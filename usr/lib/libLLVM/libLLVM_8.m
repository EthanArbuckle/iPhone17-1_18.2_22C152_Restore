uint64_t sub_1CBC3443C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  llvm::detail::DoubleAPFloat *v42;
  void *v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int RegisterDefOperandIdx;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  BOOL v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  BOOL v141;
  int v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  const char *v150;
  unsigned int v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  void *v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  const char *v179;
  uint64_t v180;
  char v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  unint64_t v202;
  int v203;
  void *v204;
  uint64_t v205;
  _DWORD v206[48];
  uint64_t v207;

  v207 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a3) {
    return 0;
  }
  v14 = *(unsigned int *)(a3 + 4);
  if ((v14 & 0x80000000) != 0) {
    v15 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  }
  else {
    v15 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v14);
  }
  v16 = *v15;
  if (v16 && ((*(unsigned char *)(v16 + 3) & 1) != 0 || (v16 = *(void *)(v16 + 24)) != 0 && (*(unsigned char *)(v16 + 3) & 1) != 0))
  {
    v17 = *(void *)(v16 + 8);
    if (a7) {
      goto LABEL_75;
    }
  }
  else
  {
    v17 = 0;
    if (a7) {
      goto LABEL_75;
    }
  }
  if ((v14 & 0x80000000) != 0) {
    v18 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  }
  else {
    v18 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v14);
  }
  v19 = *v18;
  if ((*(unsigned char *)(v19 + 3) & 1) == 0) {
    v19 = *(void *)(v19 + 24);
  }
  v20 = *(void *)(v19 + 8);
  if (**(_WORD **)(v20 + 16) != 77 || *(_DWORD *)(v20 + 40) != 3) {
    goto LABEL_75;
  }
  v21 = *(void *)(v20 + 32);
  v22 = *(unsigned int *)(v21 + 36);
  if ((v22 & 0x80000000) != 0) {
    v23 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
  }
  else {
    v23 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v22);
  }
  v24 = *v23;
  if ((*(unsigned char *)(v24 + 3) & 1) == 0) {
    v24 = *(void *)(v24 + 24);
  }
  v25 = *(void *)(v24 + 8);
  if (**(_WORD **)(v25 + 16) == 121) {
    v26 = *(void *)(*(void *)(v25 + 32) + 48);
  }
  else {
    v26 = 0;
  }
  v27 = *(unsigned int *)(v21 + 68);
  if ((v27 & 0x80000000) != 0) {
    v28 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
  }
  else {
    v28 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v27);
  }
  v29 = *v28;
  if ((*(unsigned char *)(v29 + 3) & 1) == 0) {
    v29 = *(void *)(v29 + 24);
  }
  v30 = *(void *)(v29 + 8);
  if (**(_WORD **)(v30 + 16) == 121)
  {
    v31 = *(void *)(*(void *)(v30 + 32) + 48);
    if (!v26) {
      goto LABEL_75;
    }
  }
  else
  {
    v31 = 0;
    if (!v26) {
      goto LABEL_75;
    }
  }
  if (v26 != v31) {
    goto LABEL_75;
  }
  if (!*(unsigned char *)(*(void *)v26 + 8))
  {
    if (*(_UNKNOWN **)(v26 + 32) == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(v26 + 32), (llvm::APInt *)&v204);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt(v26 + 32, (uint64_t)&v204);
    }
    v32 = (uint64_t *)&v204;
    if (v205 >= 0x41) {
      v32 = (uint64_t *)v204;
    }
    v33 = *v32;
    if (v33)
    {
      v34 = 0;
      if ((v33 & 0x3F) != 0 || (v35 = (v33 >> 10) & 0x1F, v35 - 9 > 0xA))
      {
LABEL_38:
        if (v205 >= 0x41 && v204)
        {
          v192 = v34;
          MEMORY[0x1D25D9CB0]();
          v34 = v192;
        }
        if (v34)
        {
          if (*(_UNKNOWN **)(v26 + 32) == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(v26 + 32), (llvm::APInt *)&v204);
          }
          else {
            llvm::detail::IEEEFloat::bitcastToAPInt(v26 + 32, (uint64_t)&v204);
          }
          v36 = v205;
          v37 = v204;
          v38 = (unsigned int *)&v204;
          if (v205 >= 0x41) {
            v38 = (unsigned int *)v204;
          }
          v39 = *v38;
          v40 = (v39 >> 10) & 0x1F;
          v41 = (v39 >> 6) & 0xF;
          if (v40 | v41)
          {
            if (v40 <= 0xC)
            {
              v41 = (v41 | 0x10) >> (13 - v40);
              v40 = 0;
            }
            else
            {
              v40 -= 12;
            }
          }
          v51 = (v39 >> 8) & 0x80 | (16 * v40);
LABEL_109:
          v74 = v51 | v41;
          if (v36 >= 0x41)
          {
            if (v37) {
              MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
            }
          }
          (*(void (**)(uint64_t, void))(*(void *)a6 + 32))(a6, *(void *)(a3 + 8));
          llvm::MachineOperand::ChangeToImmediate((unsigned int *)a3, v74, 0);
          (*(void (**)(uint64_t, void))(*(void *)a6 + 40))(a6, *(void *)(a3 + 8));
          return 1;
        }
        goto LABEL_49;
      }
      if (v35 <= 0xC && (((v33 | 0x400uLL) >> (13 - v35)) & 0x3F) != 0)
      {
        v34 = 0;
        goto LABEL_38;
      }
    }
    v34 = 1;
    goto LABEL_38;
  }
LABEL_49:
  v43 = *(void **)(v26 + 32);
  v42 = (llvm::detail::DoubleAPFloat *)(v26 + 32);
  if (v43 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v42, (llvm::APInt *)&v204);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v42, (uint64_t)&v204);
  }
  v44 = (uint64_t *)&v204;
  if (v205 >= 0x41) {
    v44 = (uint64_t *)v204;
  }
  v45 = *v44;
  if (!v45) {
    goto LABEL_59;
  }
  v46 = 0;
  if ((v45 & 0x7FFFF) == 0)
  {
    v47 = (v45 >> 23);
    if (v47 - 121 <= 0xA)
    {
      if (v47 <= 0x7C && (((v45 | 0x800000uLL) >> (125 - v47)) & 0x7FFFF) != 0)
      {
        v46 = 0;
        goto LABEL_60;
      }
LABEL_59:
      v46 = 1;
    }
  }
LABEL_60:
  if (v205 >= 0x41 && v204) {
    MEMORY[0x1D25D9CB0]();
  }
  if (v46)
  {
    if (*(_UNKNOWN **)v42 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v42, (llvm::APInt *)&v204);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v42, (uint64_t)&v204);
    }
    v36 = v205;
    v37 = v204;
    v48 = (unsigned int *)&v204;
    if (v205 >= 0x41) {
      v48 = (unsigned int *)v204;
    }
    v49 = *v48;
    v50 = (v49 >> 23);
    v41 = (v49 >> 19) & 0xF;
    if (v50 | v41)
    {
      if (v50 <= 0x7C)
      {
        v41 = (v41 | 0x10) >> (125 - v50);
        v50 = 0;
      }
      else
      {
        v50 -= 124;
      }
    }
    v51 = (16 * v50) | (v49 >> 31 << 7);
    goto LABEL_109;
  }
LABEL_75:
  if (**(_WORD **)(v17 + 16) != 77) {
    return 0;
  }
  v52 = *(void *)(v17 + 32);
  v53 = v52 + 32;
  v54 = v52 + 64;
  v55 = *(unsigned int *)(v52 + 36);
  if ((v55 & 0x80000000) != 0) {
    v56 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
  }
  else {
    v56 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v55);
  }
  v57 = *v56;
  if (!v57
    || (*(unsigned char *)(v57 + 3) & 1) == 0 && ((v57 = *(void *)(v57 + 24)) == 0 || (*(unsigned char *)(v57 + 3) & 1) == 0)
    || (v58 = *(void *)(v57 + 8)) == 0
    || **(_WORD **)(v58 + 16) != 178
    || *(_DWORD *)(v58 + 40) != 2)
  {
    LODWORD(v59) = 0;
LABEL_120:
    LODWORD(v64) = 0;
    goto LABEL_121;
  }
  v59 = *(unsigned int *)(*(void *)(v58 + 32) + 36);
  v60 = *(unsigned int *)(v52 + 68);
  if ((v60 & 0x80000000) != 0) {
    v61 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
  }
  else {
    v61 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v60);
  }
  v62 = *v61;
  if (!v62) {
    goto LABEL_120;
  }
  if ((*(unsigned char *)(v62 + 3) & 1) == 0)
  {
    v62 = *(void *)(v62 + 24);
    if (!v62 || (*(unsigned char *)(v62 + 3) & 1) == 0) {
      goto LABEL_120;
    }
  }
  v63 = *(void *)(v62 + 8);
  if (!v63 || **(_WORD **)(v63 + 16) != 178 || *(_DWORD *)(v63 + 40) != 2) {
    goto LABEL_120;
  }
  v64 = *(unsigned int *)(*(void *)(v63 + 32) + 36);
  if ((v59 & 0x80000000) != 0) {
    v65 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v59 & 0x7FFFFFFF) + 8);
  }
  else {
    v65 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v59);
  }
  v66 = *v65;
  if (v66 && ((*(unsigned char *)(v66 + 3) & 1) != 0 || (v66 = *(void *)(v66 + 24)) != 0 && (*(unsigned char *)(v66 + 3) & 1) != 0)) {
    v67 = *(void *)(v66 + 8);
  }
  else {
    v67 = 0;
  }
  v193 = v67;
  RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v67, v59, 0, 0, 0);
  if (RegisterDefOperandIdx == -1) {
    v69 = 0;
  }
  else {
    v69 = *(void *)(v193 + 32) + 32 * RegisterDefOperandIdx;
  }
  if ((v64 & 0x80000000) != 0) {
    v70 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8);
  }
  else {
    v70 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v64);
  }
  v71 = *v70;
  v185 = v69;
  if (v71 && ((*(unsigned char *)(v71 + 3) & 1) != 0 || (v71 = *(void *)(v71 + 24)) != 0 && (*(unsigned char *)(v71 + 3) & 1) != 0)) {
    v72 = *(void *)(v71 + 8);
  }
  else {
    v72 = 0;
  }
  v194 = v72;
  v73 = llvm::MachineInstr::findRegisterDefOperandIdx(v72, v64, 0, 0, 0);
  if (v73 == -1) {
    v54 = 0;
  }
  else {
    v54 = *(void *)(v194 + 32) + 32 * v73;
  }
  v53 = v185;
LABEL_121:
  if (v59) {
    v75 = v64 == 0;
  }
  else {
    v75 = 1;
  }
  v76 = !v75;
  v77 = *(unsigned int *)(v53 + 4);
  if ((v77 & 0x80000000) != 0 && (v77 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432)) {
    v78 = *(void *)(*(void *)(a1 + 424) + 8 * (v77 & 0x7FFFFFFF));
  }
  else {
    v78 = 0;
  }
  v79 = *(unsigned int *)(v54 + 4);
  if ((v79 & 0x80000000) != 0 && (v79 & 0x7FFFFFFF) < *(_DWORD *)(a1 + 432)) {
    v80 = *(void *)(*(void *)(a1 + 424) + 8 * (v79 & 0x7FFFFFFF));
  }
  else {
    v80 = 0;
  }
  if (v78 != v80) {
    return 0;
  }
  if ((v77 & 0x80000000) != 0) {
    v81 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v77 & 0x7FFFFFFF) + 8);
  }
  else {
    v81 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v77);
  }
  v82 = *v81;
  if (v82)
  {
    if (*(unsigned char *)(v82 + 3) & 1) != 0 || (v82 = *(void *)(v82 + 24)) != 0 && (*(unsigned char *)(v82 + 3))
    {
      v83 = *(void *)(v82 + 8);
      if (v83 && **(_WORD **)(v83 + 16) == 262 && *(_DWORD *)(v83 + 40) == 2)
      {
        v84 = *(unsigned int *)(*(void *)(v83 + 32) + 36);
        v85 = (uint64_t *)((v79 & 0x80000000) != 0
                        ? *(void *)(a1 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8
                        : *(void *)(a1 + 272) + 8 * v79);
        v86 = *v85;
        if (v86)
        {
          if (*(unsigned char *)(v86 + 3) & 1) != 0 || (v86 = *(void *)(v86 + 24)) != 0 && (*(unsigned char *)(v86 + 3))
          {
            v87 = *(void *)(v86 + 8);
            if (v87)
            {
              if (**(_WORD **)(v87 + 16) == 262 && *(_DWORD *)(v87 + 40) == 2)
              {
                v195 = *(unsigned int *)(*(void *)(v87 + 32) + 36);
                if ((v84 & 0x80000000) != 0) {
                  v88 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v84 & 0x7FFFFFFF) + 8);
                }
                else {
                  v88 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v84);
                }
                v89 = *v88;
                if (v89
                  && ((*(unsigned char *)(v89 + 3) & 1) != 0
                   || (v89 = *(void *)(v89 + 24)) != 0 && (*(unsigned char *)(v89 + 3) & 1) != 0))
                {
                  v90 = *(void *)(v89 + 8);
                }
                else
                {
                  v90 = 0;
                }
                v91 = llvm::MachineInstr::findRegisterDefOperandIdx(v90, v84, 0, 0, 0);
                if (v91 == -1) {
                  v92 = 0;
                }
                else {
                  v92 = *(void *)(v90 + 32) + 32 * v91;
                }
                v93 = v195;
                if ((v195 & 0x80000000) != 0) {
                  v94 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v195 & 0x7FFFFFFF) + 8);
                }
                else {
                  v94 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v195);
                }
                v95 = *v94;
                v186 = v92;
                if (!v95) {
                  goto LABEL_340;
                }
                if (*(unsigned char *)(v95 + 3)) {
                  goto LABEL_162;
                }
                v95 = *(void *)(v95 + 24);
                if (!v95)
                {
                  v96 = 0;
                  v93 = v195;
                  goto LABEL_163;
                }
                v93 = v195;
                if (*(unsigned char *)(v95 + 3)) {
LABEL_162:
                }
                  v96 = *(void *)(v95 + 8);
                else {
LABEL_340:
                }
                  v96 = 0;
LABEL_163:
                v97 = llvm::MachineInstr::findRegisterDefOperandIdx(v96, v93, 0, 0, 0);
                if (v97 == -1) {
                  v54 = 0;
                }
                else {
                  v54 = *(void *)(v96 + 32) + 32 * v97;
                }
                v98 = 1;
                v53 = v186;
                goto LABEL_170;
              }
            }
          }
        }
      }
    }
  }
  v98 = 0;
LABEL_170:
  v99 = *(unsigned int *)(v53 + 4);
  if ((v99 & 0x80000000) != 0) {
    v100 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
  }
  else {
    v100 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v99);
  }
  v101 = *v100;
  if (!v101) {
    goto LABEL_201;
  }
  if ((*(unsigned char *)(v101 + 3) & 1) == 0)
  {
    v101 = *(void *)(v101 + 24);
    if (!v101 || (*(unsigned char *)(v101 + 3) & 1) == 0) {
      goto LABEL_201;
    }
  }
  v102 = *(void *)(v101 + 8);
  if (!v102 || **(_WORD **)(v102 + 16) != 177 || *(_DWORD *)(v102 + 40) != 2) {
    goto LABEL_201;
  }
  v103 = *(unsigned int *)(*(void *)(v102 + 32) + 36);
  v104 = *(unsigned int *)(v54 + 4);
  v105 = (uint64_t *)((v104 & 0x80000000) != 0
                   ? *(void *)(a1 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8
                   : *(void *)(a1 + 272) + 8 * v104);
  v106 = *v105;
  if (!v106) {
    goto LABEL_201;
  }
  if ((*(unsigned char *)(v106 + 3) & 1) == 0)
  {
    v106 = *(void *)(v106 + 24);
    if (!v106 || (*(unsigned char *)(v106 + 3) & 1) == 0) {
      goto LABEL_201;
    }
  }
  v107 = *(void *)(v106 + 8);
  if (!v107 || **(_WORD **)(v107 + 16) != 177 || *(_DWORD *)(v107 + 40) != 2) {
    goto LABEL_201;
  }
  v196 = *(unsigned int *)(*(void *)(v107 + 32) + 36);
  if ((v103 & 0x80000000) != 0) {
    v108 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v103 & 0x7FFFFFFF) + 8);
  }
  else {
    v108 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v103);
  }
  v109 = *v108;
  if (v109
    && ((*(unsigned char *)(v109 + 3) & 1) != 0 || (v109 = *(void *)(v109 + 24)) != 0 && (*(unsigned char *)(v109 + 3) & 1) != 0))
  {
    v110 = *(void *)(v109 + 8);
  }
  else
  {
    v110 = 0;
  }
  v187 = v110;
  v111 = llvm::MachineInstr::findRegisterDefOperandIdx(v110, v103, 0, 0, 0);
  if (v111 == -1) {
    v112 = 0;
  }
  else {
    v112 = *(void *)(v187 + 32) + 32 * v111;
  }
  v113 = v196;
  if ((v196 & 0x80000000) != 0) {
    v114 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v196 & 0x7FFFFFFF) + 8);
  }
  else {
    v114 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v196);
  }
  v115 = *v114;
  v188 = v112;
  if (!v115) {
    goto LABEL_346;
  }
  if (*(unsigned char *)(v115 + 3)) {
    goto LABEL_196;
  }
  v115 = *(void *)(v115 + 24);
  if (!v115)
  {
    v116 = 0;
    v113 = v196;
    goto LABEL_197;
  }
  v113 = v196;
  if (*(unsigned char *)(v115 + 3)) {
LABEL_196:
  }
    v116 = *(void *)(v115 + 8);
  else {
LABEL_346:
  }
    v116 = 0;
LABEL_197:
  v197 = v116;
  v117 = llvm::MachineInstr::findRegisterDefOperandIdx(v116, v113, 0, 0, 0);
  if (v117 == -1) {
    v54 = 0;
  }
  else {
    v54 = *(void *)(v197 + 32) + 32 * v117;
  }
  v53 = v188;
  v98 |= 2u;
  v99 = *(unsigned int *)(v188 + 4);
LABEL_201:
  if ((v99 & 0x80000000) != 0) {
    v118 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
  }
  else {
    v118 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v99);
  }
  v119 = *v118;
  if (!v119) {
    goto LABEL_232;
  }
  if ((*(unsigned char *)(v119 + 3) & 1) == 0)
  {
    v119 = *(void *)(v119 + 24);
    if (!v119 || (*(unsigned char *)(v119 + 3) & 1) == 0) {
      goto LABEL_232;
    }
  }
  v120 = *(void *)(v119 + 8);
  if (!v120 || **(_WORD **)(v120 + 16) != 184 || *(_DWORD *)(v120 + 40) != 2) {
    goto LABEL_232;
  }
  v121 = *(unsigned int *)(v54 + 4);
  v122 = (uint64_t *)((v121 & 0x80000000) != 0
                   ? *(void *)(a1 + 24) + 16 * (v121 & 0x7FFFFFFF) + 8
                   : *(void *)(a1 + 272) + 8 * v121);
  v123 = *v122;
  if (!v123) {
    goto LABEL_232;
  }
  v124 = *(unsigned int *)(*(void *)(v120 + 32) + 36);
  if ((*(unsigned char *)(v123 + 3) & 1) == 0)
  {
    v123 = *(void *)(v123 + 24);
    if (!v123 || (*(unsigned char *)(v123 + 3) & 1) == 0) {
      goto LABEL_232;
    }
  }
  v125 = *(void *)(v123 + 8);
  if (!v125 || **(_WORD **)(v125 + 16) != 184 || *(_DWORD *)(v125 + 40) != 2) {
    goto LABEL_232;
  }
  v126 = *(void *)(v125 + 32);
  if ((v124 & 0x80000000) != 0) {
    v127 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v124 & 0x7FFFFFFF) + 8);
  }
  else {
    v127 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v124);
  }
  v198 = *(unsigned int *)(v126 + 36);
  v128 = *v127;
  if (*v127
    && ((*(unsigned char *)(v128 + 3) & 1) != 0 || (v128 = *(void *)(v128 + 24)) != 0 && (*(unsigned char *)(v128 + 3) & 1) != 0))
  {
    v129 = *(void *)(v128 + 8);
  }
  else
  {
    v129 = 0;
  }
  v189 = v129;
  v130 = llvm::MachineInstr::findRegisterDefOperandIdx(v129, v124, 0, 0, 0);
  if (v130 == -1) {
    v131 = 0;
  }
  else {
    v131 = *(void *)(v189 + 32) + 32 * v130;
  }
  v132 = v198;
  if ((v198 & 0x80000000) != 0) {
    v133 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v198 & 0x7FFFFFFF) + 8);
  }
  else {
    v133 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v198);
  }
  v134 = *v133;
  v190 = v131;
  if (!v134) {
    goto LABEL_352;
  }
  if (*(unsigned char *)(v134 + 3)) {
    goto LABEL_227;
  }
  v134 = *(void *)(v134 + 24);
  if (!v134)
  {
    v135 = 0;
    v132 = v198;
    goto LABEL_228;
  }
  v132 = v198;
  if (*(unsigned char *)(v134 + 3)) {
LABEL_227:
  }
    v135 = *(void *)(v134 + 8);
  else {
LABEL_352:
  }
    v135 = 0;
LABEL_228:
  v199 = v135;
  v136 = llvm::MachineInstr::findRegisterDefOperandIdx(v135, v132, 0, 0, 0);
  if (v136 == -1) {
    v54 = 0;
  }
  else {
    v54 = *(void *)(v199 + 32) + 32 * v136;
  }
  v53 = v190;
  v98 |= 4u;
  v99 = *(unsigned int *)(v190 + 4);
LABEL_232:
  if ((v99 & 0x80000000) != 0) {
    v137 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
  }
  else {
    v137 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v99);
  }
  v138 = *v137;
  if (!v138) {
    goto LABEL_238;
  }
  if ((*(unsigned char *)(v138 + 3) & 1) == 0)
  {
    v138 = *(void *)(v138 + 24);
    if (!v138 || (*(unsigned char *)(v138 + 3) & 1) == 0) {
      goto LABEL_238;
    }
  }
  v139 = *(void *)(v138 + 8);
  if (!v139) {
    goto LABEL_238;
  }
  if (**(_WORD **)(v139 + 16) != 313) {
    goto LABEL_238;
  }
  if (*(_DWORD *)(v139 + 40) != 2) {
    goto LABEL_238;
  }
  v158 = *(void *)(v139 + 32);
  if (*(unsigned char *)(v158 + 32) != 1) {
    goto LABEL_238;
  }
  v159 = *(unsigned int *)(v54 + 4);
  v160 = (uint64_t *)((v159 & 0x80000000) != 0
                   ? *(void *)(a1 + 24) + 16 * (v159 & 0x7FFFFFFF) + 8
                   : *(void *)(a1 + 272) + 8 * v159);
  v161 = *v160;
  if (!v161) {
    goto LABEL_238;
  }
  v162 = *(void *)(v158 + 48);
  if ((*(unsigned char *)(v161 + 3) & 1) == 0)
  {
    v161 = *(void *)(v161 + 24);
    if (!v161 || (*(unsigned char *)(v161 + 3) & 1) == 0) {
      goto LABEL_238;
    }
  }
  v163 = *(void *)(v161 + 8);
  if (!v163) {
    goto LABEL_238;
  }
  if (**(_WORD **)(v163 + 16) != 313) {
    goto LABEL_238;
  }
  if (*(_DWORD *)(v163 + 40) != 2) {
    goto LABEL_238;
  }
  v164 = *(void *)(v163 + 32);
  if (*(unsigned char *)(v164 + 32) != 1) {
    goto LABEL_238;
  }
  v184 = v162;
  v191 = v53;
  v201 = v98;
  v183 = v54;
  if ((v99 & 0x80000000) != 0 && (v165 = v99 & 0x7FFFFFFF, v165 < *(_DWORD *)(a1 + 432))) {
    v166 = *(void **)(*(void *)(a1 + 424) + 8 * v165);
  }
  else {
    v166 = 0;
  }
  v177 = *(void *)(v164 + 48);
  v204 = v166;
  v178 = sub_1CB8F1DC4((unint64_t *)&v204);
  if (v179 == 1)
  {
    v182 = v178;
    v178 = v182;
  }
  v180 = v177;
  v181 = (v177 & 0xF) != 0 ? 0 : a5;
  v53 = v191;
  v54 = v183;
  v98 = v201;
  if ((v181 & 1) == 0 && (v178 >> 3) + v184 == v180 && !(v184 % (uint64_t)((v178 >> 2) & 0x3FFFFFFE))) {
    v140 = v184;
  }
  else {
LABEL_238:
  }
    v140 = -1;
  if (v98) {
    v141 = 0;
  }
  else {
    v141 = v140 == 0xFFFFFFFFLL;
  }
  if (v141) {
    v142 = v76;
  }
  else {
    v142 = 1;
  }
  if (v142 != 1) {
    return 0;
  }
  v143 = *(_DWORD *)(v53 + 4);
  if ((v143 & 0x80000000) == 0 || (v144 = v143 & 0x7FFFFFFF, v144 >= *(_DWORD *)(a1 + 432)))
  {
    if (v140 == 0xFFFFFFFFLL)
    {
      v200 = v98;
      v146 = v54;
      v147 = v53;
      v145 = 0;
      v148 = 20;
      goto LABEL_255;
    }
    v145 = 0;
    goto LABEL_252;
  }
  v145 = *(void *)(*(void *)(a1 + 424) + 8 * v144);
  if (v140 != 0xFFFFFFFFLL)
  {
LABEL_252:
    if ((a7 & 1) == 0)
    {
      v156 = (void *)(a3 + 8);
      (*(void (**)(uint64_t, void))(*(void *)a6 + 32))(a6, *(void *)(a3 + 8));
      if (v145 == 257)
      {
        v157 = 775;
      }
      else if (v145 == 129)
      {
        v157 = 519;
      }
      else
      {
        v157 = 3847;
      }
      v167 = *(_DWORD *)a3;
      if (!*(_DWORD *)a3)
      {
        v168 = *(void *)(a3 + 16);
        if (v168)
        {
          if (*v156)
          {
            v169 = *(void *)(*v156 + 24);
            if (v169)
            {
              v170 = *(void *)(v169 + 32);
              if (v170)
              {
                v171 = *(void *)(v170 + 40);
                v172 = *(unsigned int *)(a3 + 4);
                if ((v172 & 0x80000000) != 0) {
                  v173 = (uint64_t *)(*(void *)(v171 + 24) + 16 * (v172 & 0x7FFFFFFF) + 8);
                }
                else {
                  v173 = (uint64_t *)(*(void *)(v171 + 272) + 8 * v172);
                }
                v174 = *v173;
                v175 = *(void *)(a3 + 24);
                if (*v173 != a3) {
                  v173 = (uint64_t *)(v168 + 24);
                }
                *v173 = v175;
                if (v175) {
                  v176 = v175;
                }
                else {
                  v176 = v174;
                }
                *(void *)(v176 + 16) = v168;
                *(void *)(a3 + 16) = 0;
                *(void *)(a3 + 24) = 0;
                v167 = *(_DWORD *)a3;
              }
            }
          }
        }
      }
      *(_DWORD *)(a3 + 16) = 64;
      *(_DWORD *)(a3 + 24) = 0;
      *(_DWORD *)a3 = v157 | v167 & 0xFFF00000;
      *(_DWORD *)(a3 + 4) = v140 >> 1;
      goto LABEL_292;
    }
    return 0;
  }
  v200 = v98;
  v146 = v54;
  v147 = v53;
  v148 = v145 & 0x8000000000000000 | 0x14;
LABEL_255:
  v204 = (void *)v145;
  v151 = sub_1CB8F1DC4((unint64_t *)&v204);
  if (v150 == 1) {
  a2[5] = *(void *)(v17 + 24);
  }
  a2[6] = v17;
  v202 = v148 | ((unint64_t)v151 << 19);
  v203 = 0;
  v152 = *(_DWORD *)(v147 + 4);
  v153 = *(_DWORD *)(v146 + 4);
  v204 = v206;
  v206[0] = v152;
  v206[4] = 0;
  v206[6] = v153;
  v206[10] = 0;
  v205 = 0x800000002;
  (*(void (**)(void *, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, void))(*a2 + 32))(a2, 77, &v202, 1, v206, 2, 0);
  v155 = v154;
  if (v204 != v206) {
    free(v204);
  }
  v156 = (void *)(a3 + 8);
  (*(void (**)(uint64_t, void))(*(void *)a6 + 32))(a6, *(void *)(a3 + 8));
  llvm::MachineOperand::setReg(a3, *(_DWORD *)(*(void *)(v155 + 32) + 4));
  v98 = v200;
LABEL_292:
  (*(void (**)(uint64_t, void))(*(void *)a6 + 40))(a6, *v156);
  *(void *)(a4 + 16) |= v98;
  return 1;
}

uint64_t sub_1CBC3568C(unsigned int a1, uint64_t a2)
{
  if ((a1 & 0x80000000) != 0) {
    v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v5 = *v4;
  if (!*v4) {
    return 1;
  }
  while ((*(unsigned char *)(v5 + 3) & 1) != 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5) {
      return 1;
    }
  }
  uint64_t v6 = *(void *)(v5 + 8);
LABEL_8:
  int v7 = **(unsigned __int16 **)(v6 + 16);
  if ((v7 & 0xFFFE) == 0xB2)
  {
    uint64_t result = sub_1CBC3568C(*(unsigned int *)(*(void *)(v6 + 32) + 4), a2);
    if (result)
    {
      uint64_t v10 = *(void *)(v5 + 8);
      goto LABEL_15;
    }
    return result;
  }
  uint64_t result = 0;
  if (**(unsigned __int16 **)(v6 + 16) > 0xA2u)
  {
    if ((v7 - 163) <= 0x38 && ((1 << (v7 + 93)) & 0x18800000038540DLL) != 0) {
      goto LABEL_14;
    }
    uint64_t v12 = (v7 - 272);
    if (v12 > 0x3F) {
      goto LABEL_28;
    }
    if (v12 != 63)
    {
      if (((1 << (v7 - 16)) & 0x20000040000000C1) == 0)
      {
LABEL_28:
        uint64_t v10 = v6;
        if (v7 == 357) {
          goto LABEL_15;
        }
        return result;
      }
LABEL_14:
      uint64_t v10 = v6;
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  if (v7 == 51)
  {
LABEL_22:
    uint64_t v11 = *(void *)(v6 + 32);
    if (*(_DWORD *)(v11 + 132) == a1) {
      return 0;
    }
    uint64_t v10 = v6;
    if (*(_DWORD *)(v11 + 164) == a1) {
      return 0;
    }
LABEL_15:
    while (1)
    {
      uint64_t v5 = *(void *)(v5 + 24);
      if (!v5) {
        return 1;
      }
      if ((*(unsigned char *)(v5 + 3) & 1) == 0)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6 != v10) {
          goto LABEL_8;
        }
      }
    }
  }
  if (v7 == 54) {
    goto LABEL_14;
  }
  uint64_t v10 = v6;
  if (v7 == 85) {
    goto LABEL_15;
  }
  return result;
}

const char *sub_1CBC35810()
{
  return "AGX3PostLegalizerCombiner";
}

uint64_t sub_1CBC35820()
{
  int v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable the agx3 post legalization machine instruction combiner";
  v4.n128_u64[1] = 62;
  char v1 = 1;
  v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCC20B8, "enable-agx3-postlegalizer-combiner", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC20B8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Should enable CSE in AGX3 Postlegalizer Combiner";
  v4.n128_u64[1] = 48;
  int v3 = 0;
  char v1 = 1;
  v2 = &v1;
  sub_1CD40E838((uint64_t)&algn_1EBCC2139[63], "enable-cse-in-agx3-postlegalizer-combiner", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &algn_1EBCC2139[63], &dword_1CB82C000);
}

void sub_1CBC35910(uint64_t a1)
{
}

uint64_t sub_1CBC359C0(llvm::FunctionPass *a1, uint64_t a2)
{
  if ((**(unsigned char **)(a2 + 360) & 0x10) != 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (!v4)
  {
    uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v4;
  }
  (*(void (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v6 = *(void *)(a2 + 328);
  if (v6 == a2 + 320) {
    goto LABEL_58;
  }
  while (2)
  {
    for (uint64_t i = *(void *)(v6 + 56); i != v6 + 48; uint64_t i = *(void *)(i + 8))
    {
      unsigned int v8 = **(unsigned __int16 **)(i + 16);
      if (v8 <= 0x50)
      {
        if (v8 == 71)
        {
          int v19 = *(_DWORD *)(*(void *)(i + 32) + 4);
          if (v19 < 0) {
            goto LABEL_33;
          }
        }
        else
        {
          if (v8 != 80) {
            goto LABEL_49;
          }
          int v19 = *(_DWORD *)(*(void *)(i + 32) + 36);
          if (v19 < 0)
          {
LABEL_33:
            uint64_t v24 = v19 & 0x7FFFFFFF;
            if (v24 < *(_DWORD *)(v5 + 432))
            {
              uint64_t v22 = *(void *)(*(void *)(v5 + 424) + 8 * v24);
              goto LABEL_36;
            }
          }
        }
        uint64_t v22 = 0;
LABEL_36:
        if ((v22 & 4) != 0) {
          uint64_t v25 = 0x7FFFFF800000000;
        }
        else {
          uint64_t v25 = 0x7FFFFF80000;
        }
        if ((v25 & v22) == 0) {
          goto LABEL_57;
        }
        goto LABEL_49;
      }
      if (v8 == 96 || v8 == 90)
      {
        int v20 = *(_DWORD *)(*(void *)(i + 32) + 4);
        if ((v20 & 0x80000000) == 0) {
          goto LABEL_49;
        }
        uint64_t v21 = v20 & 0x7FFFFFFF;
        if (v21 >= *(_DWORD *)(v5 + 432)) {
          goto LABEL_49;
        }
        uint64_t v22 = *(void *)(*(void *)(v5 + 424) + 8 * v21);
        if ((v22 & 0xFFFFFFFFFFFFFFF9) == 0 || (v22 & 6) != 2) {
          goto LABEL_49;
        }
        goto LABEL_36;
      }
      if (v8 == 81)
      {
        uint64_t v9 = *(void *)(i + 32);
        uint64_t v10 = *(unsigned int *)(v9 + 36);
        if ((v10 & 0x80000000) != 0) {
          uint64_t v11 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v11 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v10);
        }
        uint64_t v12 = *v11;
        if ((*(unsigned char *)(v12 + 3) & 1) == 0) {
          uint64_t v12 = *(void *)(v12 + 24);
        }
        uint64_t v13 = *(void *)(v12 + 8);
        BOOL v15 = **(_WORD **)(v13 + 16) == 19
           && (uint64_t v14 = *(void *)(v13 + 32), !*(unsigned char *)(v14 + 32))
           && *(_DWORD *)(v14 + 36) == 105;
        int v16 = *(_DWORD *)(v9 + 4);
        if (v16 < 0 && (uint64_t v17 = v16 & 0x7FFFFFFF, v17 < *(_DWORD *)(v5 + 432))) {
          uint64_t v18 = *(void *)(*(void *)(v5 + 424) + 8 * v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v26 = (v18 & 4) != 0 ? 0x7FFFFF800000000 : 0x7FFFFF80000;
        char v27 = (v26 & v18) != 0 || v15;
        if ((v27 & 1) == 0)
        {
LABEL_57:
          *(unsigned char *)(v4 + 560) = 1;
          goto LABEL_58;
        }
      }
LABEL_49:
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6 != a2 + 320) {
      continue;
    }
    break;
  }
LABEL_58:
  if (!byte_1EBCC22C8) {
    return 0;
  }
  v28 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  if (v29 == v30)
  {
LABEL_62:
    uint64_t v31 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v29 != &llvm::TargetPassConfig::ID)
    {
      v29 += 16;
      if (v29 == v30) {
        goto LABEL_62;
      }
    }
    uint64_t v31 = *(void *)(v29 + 8);
  }
  uint64_t v33 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v31 + 96))(v31, &llvm::TargetPassConfig::ID);
  v34 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  if (v35 == v36)
  {
LABEL_68:
    uint64_t v37 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v35 != &unk_1EA61EFE3)
    {
      v35 += 16;
      if (v35 == v36) {
        goto LABEL_68;
      }
    }
    uint64_t v37 = *(void *)(v35 + 8);
  }
  uint64_t v38 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v37 + 96))(v37, &unk_1EA61EFE3);
  if (word_1EBCC2310)
  {
    if (byte_1EBCC2388) {
      goto LABEL_72;
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)v33 + 280))(v33))
  {
LABEL_72:
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v33 + 288))(&v48, v33);
    if (!*(unsigned char *)(v38 + 624))
    {
      sub_1CC6DE3E0(v38 + 248);
      uint64_t v39 = v48;
      uint64_t v48 = 0;
      uint64_t v40 = *(void *)(v38 + 448);
      *(void *)(v38 + 448) = v39;
      if (v40) {
        (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
      }
      sub_1CC6DE1A0((uint64_t *)(v38 + 248), *(void **)(v38 + 616));
      *(unsigned char *)(v38 + 624) = 1;
    }
    uint64_t v41 = v48;
    uint64_t v48 = 0;
    if (v41) {
      (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
    }
  }
  if (*(_DWORD *)(*(void *)(a2 + 8) + 552)) {
    llvm::FunctionPass::skipFunction(a1, *(llvm::LLVMContextImpl *****)a2);
  }
  v42 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v43 = *v42;
  uint64_t v44 = v42[1];
  if (v43 == v44)
  {
LABEL_84:
    uint64_t v45 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v43 != &unk_1EA61EFE4)
    {
      v43 += 16;
      if (v43 == v44) {
        goto LABEL_84;
      }
    }
    uint64_t v45 = *(void *)(v43 + 8);
  }
  uint64_t v46 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v45 + 96))(v45, &unk_1EA61EFE4);
  sub_1CBA02330(v46);
  return sub_1CC6EB0C4();
}

uint64_t sub_1CBC35F9C(uint64_t a1, llvm::ConstantInt *****a2, uint64_t a3, uint64_t a4)
{
  uint64_t v331 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(llvm::ConstantInt ******)(a1 + 32);
  uint64_t v7 = *(void *)(a4 + 8);
  unsigned int v8 = *(llvm::ConstantInt ******)(v7 + 40);
  v309[0] = (llvm::ConstantInt *****)a4;
  v309[1] = v8;
  v309[2] = a2;
  v309[3] = v6;
  v309[4] = 0;
  v309[5] = 0;
  v309[6] = (llvm::ConstantInt *****)(*(uint64_t (**)(void))(**(void **)(v7 + 16) + 184))(*(void *)(v7 + 16));
  v309[7] = (llvm::ConstantInt *****)(*(uint64_t (**)(void))(**(void **)(*(void *)(a4 + 8) + 16)
                                                                       + 176))(*(void *)(*(void *)(a4 + 8) + 16));
  uint64_t v9 = *(void *)(*(void *)(a4 + 8) + 40);
  *(void *)(a4 + 40) = *(void *)(a3 + 24);
  *(void *)(a4 + 48) = a3;
  unsigned int v10 = **(unsigned __int16 **)(a3 + 16);
  if (v10 <= 0x73)
  {
    if (**(unsigned __int16 **)(a3 + 16) <= 0x4Cu)
    {
      if (v10 - 61 >= 2)
      {
        if (v10 != 65)
        {
          if (v10 != 66) {
            return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
          }
          uint64_t v22 = *(void *)(a3 + 32);
          int v23 = *(_DWORD *)(v22 + 36);
          LODWORD(v329) = v23;
          LODWORD(v308) = *(_DWORD *)(v22 + 68);
          uint64_t v325 = 257;
          v310 = &v325;
          uint64_t v311 = v9;
          v312 = (unint64_t *)&v329;
          v313 = (unsigned __int8 **)&v308;
          uint64_t v314 = a3;
          uint64_t v315 = a4;
          if (v23 < 0)
          {
            uint64_t v24 = v23 & 0x7FFFFFFF;
            if (v24 < *(_DWORD *)(v9 + 432))
            {
              uint64_t v25 = *(void *)(*(void *)(v9 + 424) + 8 * v24);
              if (v25 == 129)
              {
                unint64_t v26 = 129;
                int v27 = 0x7FFF;
                int v28 = 0x8000;
              }
              else
              {
                if (v25 != 257) {
                  goto LABEL_281;
                }
                unint64_t v26 = 257;
                int v27 = 0x7FFFFFFF;
                int v28 = 0x80000000;
              }
              if (sub_1CBC38A44((uint64_t)&v310, v26, v27, v28)) {
                return 1;
              }
            }
          }
        }
LABEL_281:
        uint64_t v205 = *(unsigned int *)(*(void *)(a3 + 32) + 4);
        if ((v205 & 0x80000000) != 0
          && (v205 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v9 + 432))
        {
          v206 = *(unsigned __int8 **)(*(void *)(v9 + 424) + 8 * (v205 & 0x7FFFFFFF));
        }
        else
        {
          v206 = 0;
        }
        unint64_t v308 = (unint64_t)v206;
        int v307 = 0;
        unint64_t v305 = 0;
        uint64_t v306 = 0;
        v310 = &v307;
        uint64_t v311 = (uint64_t)&v306;
        v312 = &v305;
        LODWORD(v325) = v205;
        if (sub_1CBAAAD18((uint64_t)&v310, v9, (unsigned int *)&v325))
        {
          unint64_t v207 = __clz(__rbit64(v305));
          if ((v207 - 1) <= 3)
          {
            unint64_t v208 = v305 >> v207;
            if (v305 >> v207)
            {
              if (((v208 + 1) & v208) == 0)
              {
                unint64_t v304 = v207;
                unint64_t v209 = v306 + v207;
                unint64_t v211 = sub_1CB8F1DC4(&v308);
                if (v210 == 1) {
                BOOL v149 = v209 >= v211;
                }
                unint64_t v212 = v304;
                if (!v149)
                {
                  uint64_t v325 = v308;
                  LODWORD(v326) = 0;
                  LODWORD(v310) = v307;
                  LODWORD(v312) = 0;
                  v329 = (unsigned __int8 *)v308;
                  int v330 = 0;
                  v213 = (llvm::LLVMContext *)(unsigned __int16)(v308 >> 3);
                  v214 = (llvm::LLVMContext *)(unsigned __int16)(v308 >> 19);
                  if ((v308 & 2) == 0) {
                    v214 = (llvm::LLVMContext *)(v308 >> 19);
                  }
                  if ((v308 & 4) != 0) {
                    v213 = v214;
                  }
                  if (v308) {
                    v215 = (llvm::LLVMContext *)(v308 >> 3);
                  }
                  else {
                    v215 = v213;
                  }
                  v216 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), v215);
                  v217 = llvm::ConstantInt::get(v216, v209, (const llvm::APInt *)1);
                  v313 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v329, v217);
                  uint64_t v314 = v218;
                  LODWORD(v315) = 1;
                  v219 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 128, &v325, 1, &v310, 2, 0);
                  uint64_t v325 = v308;
                  LODWORD(v326) = 0;
                  v310 = v219;
                  uint64_t v311 = v220;
                  LODWORD(v312) = 1;
                  v329 = (unsigned __int8 *)v308;
                  int v330 = 0;
                  if (v308)
                  {
                    unint64_t v221 = (v308 >> 3);
                  }
                  else
                  {
                    if ((v308 & 4) != 0)
                    {
                      if ((v308 & 2) != 0) {
                        unint64_t v221 = (unsigned __int16)(v308 >> 19);
                      }
                      else {
                        unint64_t v221 = (v308 >> 19);
                      }
                    }
                    else
                    {
                      unint64_t v221 = (unsigned __int16)(v308 >> 3);
                    }
                    unint64_t v212 = v304;
                  }
                  v222 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v221);
                  v223 = llvm::ConstantInt::get(v222, v208, (const llvm::APInt *)1);
                  v313 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v329, v223);
                  uint64_t v314 = v224;
                  LODWORD(v315) = 1;
                  v225 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v325, 1, &v310, 2, 0);
                  LODWORD(v325) = v205;
                  LODWORD(v326) = 1;
                  v310 = v225;
                  uint64_t v311 = v226;
                  LODWORD(v312) = 1;
                  v329 = (unsigned __int8 *)v308;
                  int v330 = 0;
                  if (v308)
                  {
                    unint64_t v227 = (v308 >> 3);
                  }
                  else
                  {
                    if ((v308 & 4) != 0)
                    {
                      if ((v308 & 2) != 0) {
                        unint64_t v227 = (unsigned __int16)(v308 >> 19);
                      }
                      else {
                        unint64_t v227 = (v308 >> 19);
                      }
                    }
                    else
                    {
                      unint64_t v227 = (unsigned __int16)(v308 >> 3);
                    }
                    unint64_t v212 = v304;
                  }
                  v228 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v227);
                  v229 = llvm::ConstantInt::get(v228, v212, (const llvm::APInt *)1);
                  v313 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v329, v229);
                  uint64_t v314 = v230;
                  LODWORD(v315) = 1;
                  goto LABEL_350;
                }
              }
            }
          }
        }
        v310 = &v307;
        uint64_t v311 = (uint64_t)&v306;
        v312 = &v305;
        LODWORD(v325) = v205;
        if (sub_1CBAAB09C((uint64_t)&v310, v9, (unsigned int *)&v325)
          && v306 >= 1
          && (unint64_t)v306 <= 4)
        {
          if ((v205 & 0x80000000) != 0) {
            v231 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v205 & 0x7FFFFFFF) + 8);
          }
          else {
            v231 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v205);
          }
          uint64_t v232 = *v231;
          if (!v232)
          {
LABEL_335:
            uint64_t v325 = v308;
            LODWORD(v326) = 0;
            LODWORD(v310) = v307;
            LODWORD(v312) = 0;
            v329 = (unsigned __int8 *)v308;
            int v330 = 0;
            unint64_t v242 = v305 >> v306;
            v243 = (llvm::LLVMContext *)(unsigned __int16)(v308 >> 3);
            v244 = (llvm::LLVMContext *)(unsigned __int16)(v308 >> 19);
            if ((v308 & 2) == 0) {
              v244 = (llvm::LLVMContext *)(v308 >> 19);
            }
            if ((v308 & 4) != 0) {
              v243 = v244;
            }
            if (v308) {
              v245 = (llvm::LLVMContext *)(v308 >> 3);
            }
            else {
              v245 = v243;
            }
            v246 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), v245);
            v247 = llvm::ConstantInt::get(v246, v242, (const llvm::APInt *)1);
            v313 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v329, v247);
            uint64_t v314 = v248;
            LODWORD(v315) = 1;
            v249 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v325, 1, &v310, 2, 0);
            LODWORD(v325) = v205;
            LODWORD(v326) = 1;
            v310 = v249;
            uint64_t v311 = v250;
            LODWORD(v312) = 1;
            v329 = (unsigned __int8 *)v308;
            int v330 = 0;
            unint64_t v251 = v306;
            v252 = (llvm::LLVMContext *)(unsigned __int16)(v308 >> 3);
            v253 = (llvm::LLVMContext *)(unsigned __int16)(v308 >> 19);
            if ((v308 & 2) == 0) {
              v253 = (llvm::LLVMContext *)(v308 >> 19);
            }
            if ((v308 & 4) != 0) {
              v252 = v253;
            }
            if (v308) {
              v254 = (llvm::LLVMContext *)(v308 >> 3);
            }
            else {
              v254 = v252;
            }
            v255 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), v254);
            v256 = llvm::ConstantInt::get(v255, v251, (const llvm::APInt *)1);
            v313 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v329, v256);
            uint64_t v314 = v257;
            LODWORD(v315) = 1;
LABEL_350:
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 127, &v325, 1, &v310, 2, 0);
LABEL_351:
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
            return 1;
          }
          if ((*(unsigned char *)(v232 + 3) & 0x81) != 0)
          {
            do
            {
              uint64_t v232 = *(void *)(v232 + 24);
              if (!v232) {
                goto LABEL_335;
              }
            }
            while ((*(_DWORD *)v232 & 0x81000000) != 0);
          }
          uint64_t v233 = *(void *)(v232 + 8);
          if (**(_WORD **)(v233 + 16) == 45)
          {
LABEL_314:
            uint64_t v234 = *(void *)(v233 + 32);
            uint64_t v235 = *(unsigned int *)(v234 + 36);
            if ((v235 & 0x80000000) != 0) {
              v236 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v235 & 0x7FFFFFFF) + 8);
            }
            else {
              v236 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v235);
            }
            uint64_t v237 = *v236;
            if ((*(unsigned char *)(v237 + 3) & 1) == 0) {
              uint64_t v237 = *(void *)(v237 + 24);
            }
            if (**(_WORD **)(*(void *)(v237 + 8) + 16) != 127)
            {
              uint64_t v238 = *(unsigned int *)(v234 + 68);
              if ((v238 & 0x80000000) != 0) {
                v239 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v238 & 0x7FFFFFFF) + 8);
              }
              else {
                v239 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v238);
              }
              uint64_t v240 = *v239;
              if ((*(unsigned char *)(v240 + 3) & 1) == 0) {
                uint64_t v240 = *(void *)(v240 + 24);
              }
              if (**(_WORD **)(*(void *)(v240 + 8) + 16) != 127)
              {
                while (1)
                {
                  uint64_t v232 = *(void *)(v232 + 24);
                  if (!v232) {
                    goto LABEL_335;
                  }
                  if ((*(_DWORD *)v232 & 0x81000000) == 0)
                  {
                    uint64_t v241 = *(void *)(v232 + 8);
                    if (v241 != v233)
                    {
                      uint64_t v233 = *(void *)(v232 + 8);
                      if (**(_WORD **)(v241 + 16) == 45) {
                        goto LABEL_314;
                      }
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        if ((sub_1CBAAFBA4(v309, a3) & 1) == 0 && (sub_1CBC3DED8((uint64_t *)v309, a3) & 1) == 0) {
          return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
        }
        return 1;
      }
      sub_1CC73C44C(*(_DWORD *)(*(void *)(a3 + 32) + 68), v9, 1, (uint64_t)&v325);
      if (!v328) {
        return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
      }
      unsigned int v53 = v326;
      uint64_t v54 = v325;
      uint64_t v55 = v325;
      if (v326 >= 0x41)
      {
        int v56 = 0;
        int64_t v57 = ((unint64_t)v326 + 63) >> 6;
        do
        {
          if (v57-- < 1) {
            break;
          }
          unint64_t v59 = *(void *)(v325 + 8 * v57);
          v56 += __clz(v59);
        }
        while (!v59);
        int v60 = v326 | 0xFFFFFFC0;
        if ((v326 & 0x3F) == 0) {
          int v60 = 0;
        }
        if ((v326 - v56 - v60) > 0x40) {
          goto LABEL_75;
        }
        uint64_t v55 = *(void *)v325;
      }
      if (!v55)
      {
        int v114 = 2;
        goto LABEL_274;
      }
LABEL_75:
      uint64_t v61 = *(void *)(a3 + 32);
      int v62 = *(_DWORD *)(v61 + 4);
      if (v62 < 0 && (v62 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432)) {
        unint64_t v63 = *(void *)(*(void *)(v9 + 424) + 8 * (v62 & 0x7FFFFFFF));
      }
      else {
        unint64_t v63 = 0;
      }
      if (v326 > 0x40) {
        operator new[]();
      }
      uint8x8_t v113 = (uint8x8_t)vcnt_s8((int8x8_t)v325);
      v113.i16[0] = vaddlv_u8(v113);
      if (v113.u32[0] != 1 || (((unint64_t)v325 >> (v326 - 1)) & 1) != 0)
      {
        int v114 = 2;
LABEL_272:
        if (!v328) {
          goto LABEL_277;
        }
        unsigned int v53 = v326;
LABEL_274:
        if (v53 >= 0x41 && v325) {
          MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
        }
LABEL_277:
        if (v114 == 2) {
          return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
        }
        return 1;
      }
      int v303 = *(_DWORD *)(v61 + 36);
      v310 = (void *)v63;
      LODWORD(v311) = 0;
      unint64_t v157 = v325 - 1;
      unint64_t v158 = (unsigned __int16)(v63 >> 19);
      if ((v63 & 2) == 0) {
        unint64_t v158 = (v63 >> 19);
      }
      if ((v63 & 4) == 0) {
        unint64_t v158 = (unsigned __int16)(v63 >> 3);
      }
      unint64_t v159 = (v63 >> 3);
      if (v63) {
        unint64_t v160 = (v63 >> 3);
      }
      else {
        unint64_t v160 = v158;
      }
      v161 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v160);
      v162 = llvm::ConstantInt::get(v161, v157, (const llvm::APInt *)1);
      uint64_t v163 = (*(uint64_t (**)(uint64_t, void **, void *))(*(void *)a4 + 16))(a4, &v310, v162);
      uint64_t v165 = v164;
      if (**(_WORD **)(a3 + 16) == 61)
      {
        v329 = (unsigned __int8 *)v63;
        int v330 = 0;
        LODWORD(v310) = v303;
        LODWORD(v312) = 0;
        v313 = (unsigned __int8 **)v163;
        uint64_t v314 = v164;
        LODWORD(v315) = 1;
        uint64_t v166 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v329, 1, &v310, 2, 0);
        uint64_t v296 = v167;
        v297 = (unsigned __int8 **)v166;
        v310 = (void *)v63;
        LODWORD(v311) = 0;
        unint64_t v168 = (unsigned __int16)(v63 >> 19);
        if ((v63 & 2) == 0) {
          unint64_t v168 = (v63 >> 19);
        }
        if ((v63 & 4) == 0) {
          unint64_t v168 = (unsigned __int16)(v63 >> 3);
        }
        if (v63) {
          unint64_t v169 = (v63 >> 3);
        }
        else {
          unint64_t v169 = v168;
        }
        v170 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v169);
        v171 = llvm::ConstantInt::get(v170, -v54, (const llvm::APInt *)1);
        uint64_t v172 = (*(uint64_t (**)(uint64_t, void **, void *))(*(void *)a4 + 16))(a4, &v310, v171);
        v329 = (unsigned __int8 *)v63;
        int v330 = 0;
        LODWORD(v310) = v303;
        LODWORD(v312) = 0;
        v313 = (unsigned __int8 **)v172;
        uint64_t v314 = v173;
        LODWORD(v315) = 1;
        uint64_t v174 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 66, &v329, 1, &v310, 2, 0);
        uint64_t v294 = v175;
        uint64_t v295 = v174;
        v329 = (unsigned __int8 *)v63;
        int v330 = 0;
        if ((v63 & 1) == 0)
        {
          if ((v63 & 4) != 0)
          {
            if ((v63 & 2) != 0) {
              unint64_t v159 = (unsigned __int16)(v63 >> 19);
            }
            else {
              unint64_t v159 = (v63 >> 19);
            }
          }
          else
          {
            unint64_t v159 = (unsigned __int16)(v63 >> 3);
          }
        }
        uint64_t v176 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v159);
        v178 = *(llvm::ConstantInt **)v176;
        unsigned int v179 = *(_DWORD *)(v176 + 8);
        LODWORD(v311) = v179 >> 8;
        if (v179 >> 8 >= 0x41) {
          operator new[]();
        }
        v310 = 0;
        v180 = llvm::ConstantInt::get(v178, (llvm::LLVMContext *)&v310, v177);
        if (v311 >= 0x41 && v310) {
          MEMORY[0x1D25D9CB0](v310, 0x1000C8000313F17);
        }
        uint64_t v181 = (*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v329, v180);
        uint64_t v299 = v182;
        uint64_t v301 = v181;
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v9, "", 0);
        unint64_t v184 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v9 + 24) + 16 * v184) = 4;
        unint64_t v185 = *(unsigned int *)(v9 + 432);
        if (v184 >= v185)
        {
          uint64_t v186 = *(void *)(v9 + 440);
          uint64_t v187 = v184 + 1 - v185;
          if (v184 >= *(unsigned int *)(v9 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v188 = *(_DWORD *)(v9 + 432);
          if (v187)
          {
            v189 = (void *)(*(void *)(v9 + 424) + 8 * *(unsigned int *)(v9 + 432));
            uint64_t v190 = ~v184 + v185;
            do
            {
              *v189++ = v186;
              BOOL v149 = __CFADD__(v190++, 1);
            }
            while (!v149);
            int v188 = *(_DWORD *)(v9 + 432);
          }
          *(_DWORD *)(v9 + 432) = v188 + v187;
        }
        int v298 = v62;
        *(void *)(*(void *)(v9 + 424) + 8 * v184) = v63;
        uint64_t v191 = *(void *)(v9 + 8);
        if (v191)
        {
          int v289 = IncompleteVirtualRegister;
          (*(void (**)(uint64_t))(*(void *)v191 + 24))(v191);
          int IncompleteVirtualRegister = v289;
        }
        LODWORD(v329) = IncompleteVirtualRegister;
        int v330 = 1;
        LODWORD(v310) = 32;
        LODWORD(v312) = 2;
        v313 = v297;
        uint64_t v314 = v296;
        LODWORD(v315) = 1;
        uint64_t v316 = v301;
        uint64_t v317 = v299;
        int v318 = 1;
        v319 = v297;
        uint64_t v320 = v296;
        int v321 = 1;
        uint64_t v322 = v295;
        uint64_t v323 = v294;
        int v324 = 1;
        int v192 = IncompleteVirtualRegister;
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 51, &v329, 1, &v310, 5, 0);
        LODWORD(v329) = v298;
        int v330 = 1;
        LODWORD(v310) = 40;
        LODWORD(v312) = 2;
        LODWORD(v313) = v303;
        LODWORD(v315) = 0;
        uint64_t v316 = v301;
        uint64_t v317 = v299;
        int v318 = 1;
        LODWORD(v319) = v192;
        int v321 = 0;
        uint64_t v322 = (uint64_t)v297;
        uint64_t v323 = v296;
        int v324 = 1;
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 51, &v329, 1, &v310, 5, 0);
LABEL_271:
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
        int v114 = 1;
        goto LABEL_272;
      }
      v193 = *(llvm::MachineFunction **)(a4 + 8);
      uint64_t v194 = *(void *)(*(void *)(a4 + 16) + 8) + 3120;
      v195 = *(unsigned __int8 **)(a4 + 32);
      v329 = v195;
      if (v195) {
        llvm::MetadataTracking::track((uint64_t)&v329, v195, 2);
      }
      v196 = llvm::MachineFunction::CreateMachineInstr(v193, v194, &v329, 0);
      if (v329)
      {
        int v290 = *v329;
        if ((v290 - 4) > 0x1E)
        {
          if ((v290 - 3) >= 0xFFFFFFFE) {
            v293 = v329;
          }
          else {
            v293 = 0;
          }
          if ((v290 - 3) < 0xFFFFFFFE)
          {
            if (v290 == 3) {
              *((void *)v329 + 1) = 0;
            }
            goto LABEL_265;
          }
          unint64_t v292 = (unint64_t)(v293 + 8);
        }
        else
        {
          if ((v329[1] & 0x7F) != 2 && !*((_DWORD *)v329 + 3)) {
            goto LABEL_265;
          }
          uint64_t v291 = *((void *)v329 + 2);
          if ((v291 & 4) == 0) {
            goto LABEL_265;
          }
          unint64_t v292 = v291 & 0xFFFFFFFFFFFFFFF8;
          if (!v292) {
            goto LABEL_265;
          }
        }
        v310 = &v329;
        sub_1CC5FA668(v292 + 16, &v310);
      }
LABEL_265:
      v197 = *(unint64_t **)(a4 + 48);
      uint64_t v198 = *(void *)(*(void *)(a4 + 40) + 40);
      *((void *)v196 + 3) = v198;
      uint64_t v199 = *(void *)(v198 + 32);
      uint64_t v200 = *((unsigned int *)v196 + 10);
      if (v200)
      {
        uint64_t v275 = *((void *)v196 + 4);
        uint64_t v276 = *(void *)(v199 + 40);
        uint64_t v277 = 32 * v200;
        do
        {
          if (!*(unsigned char *)v275)
          {
            uint64_t v278 = *(unsigned int *)(v275 + 4);
            if ((int)v278 >= 0) {
              v279 = (uint64_t *)(*(void *)(v276 + 272) + 8 * v278);
            }
            else {
              v279 = (uint64_t *)(*(void *)(v276 + 24) + 16 * (v278 & 0x7FFFFFFF) + 8);
            }
            uint64_t v280 = *v279;
            if (*v279)
            {
              uint64_t v281 = *(void *)(v280 + 16);
              *(void *)(v280 + 16) = v275;
              *(void *)(v275 + 16) = v281;
              if (*(unsigned char *)(v275 + 3))
              {
                *(void *)(v275 + 24) = v280;
              }
              else
              {
                *(void *)(v275 + 24) = 0;
                v279 = (uint64_t *)(v281 + 24);
              }
            }
            else
            {
              *(void *)(v275 + 16) = v275;
              *(void *)(v275 + 24) = 0;
            }
            uint64_t *v279 = v275;
          }
          v275 += 32;
          v277 -= 32;
        }
        while (v277);
      }
      uint64_t v201 = *(void *)(v199 + 728);
      if (v201) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v201 + 24))(v201, v196);
      }
      unint64_t v202 = *v197 & 0xFFFFFFFFFFFFFFF8;
      *(void *)v196 = v202 | *(void *)v196 & 7;
      *((void *)v196 + 1) = v197;
      *(void *)(v202 + 8) = v196;
      unint64_t *v197 = *v197 & 7 | (unint64_t)v196;
      uint64_t v203 = *(void *)(a4 + 56);
      if (v203) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v203 + 24))(v203, v196);
      }
      uint64_t v311 = 0;
      v312 = 0;
      v313 = 0;
      LODWORD(v310) = 0x1000000;
      HIDWORD(v310) = v62;
      llvm::MachineInstr::addOperand(v196, v193, (const llvm::MachineOperand *)&v310);
      uint64_t v311 = 0;
      v312 = 0;
      LODWORD(v310) = 0;
      HIDWORD(v310) = v303;
      v313 = 0;
      llvm::MachineInstr::addOperand(v196, v193, (const llvm::MachineOperand *)&v310);
      int v204 = *(_DWORD *)(*(void *)(v165 + 32) + 4);
      uint64_t v311 = 0;
      v312 = 0;
      LODWORD(v310) = 0;
      HIDWORD(v310) = v204;
      v313 = 0;
      llvm::MachineInstr::addOperand(v196, v193, (const llvm::MachineOperand *)&v310);
      goto LABEL_271;
    }
    if (v10 != 77)
    {
      if (v10 != 79)
      {
        if (v10 != 90) {
          return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
        }
        uint64_t v34 = *(void *)(a3 + 32);
        __int32 v35 = *(_DWORD *)(v34 + 4);
        if ((v35 & 0x80000000) == 0 || (v35 & 0x7FFFFFFFu) >= *(_DWORD *)(v9 + 432)) {
          return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
        }
        unint64_t v36 = *(void *)(*(void *)(v9 + 424) + 8 * (v35 & 0x7FFFFFFF));
        if ((v36 & 0xFFFFFFFFFFFFFFF9) == 0
          || (*(void *)(*(void *)(v9 + 424) + 8 * (v35 & 0x7FFFFFFF)) & 6) != 2)
        {
          return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
        }
        char v38 = 35;
        if ((v36 & 4) == 0) {
          char v38 = 19;
        }
        if (((v36 >> v38) & 0xFFFFFF) != 3) {
          return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
        }
        int v39 = *(_DWORD *)(v34 + 36);
        uint64_t v40 = *(void *)(a3 + 48);
        if ((v40 & 7) != 0)
        {
          unint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(a3 + 48) = v40 & 0xFFFFFFFFFFFFFFF8;
        }
        MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(*(void *)(*(void *)(a3 + 24) + 32), v41, 0, 257);
        uint64_t v325 = 257;
        LODWORD(v326) = 0;
        LODWORD(v310) = v39;
        LODWORD(v312) = 0;
        v262 = sub_1CC737934((void *)a4, 0x5Au, (int *)&v325, (int *)&v310, MachineMemOperand);
        uint64_t v52 = 1;
        LODWORD(v325) = v35;
        LODWORD(v326) = 1;
        v310 = v262;
        uint64_t v311 = v263;
        LODWORD(v312) = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 81, &v325, 1, &v310, 1, 0);
        goto LABEL_124;
      }
      return sub_1CC6ECA4C((uint64_t *)v309, (llvm::MachineInstr *)a3);
    }
    int v102 = *(_DWORD *)(*(void *)(a3 + 32) + 4);
    if (v102 < 0 && (uint64_t v103 = v102 & 0x7FFFFFFF, v103 < *(_DWORD *)(v9 + 432)))
    {
      unint64_t v104 = *(void *)(*(void *)(v9 + 424) + 8 * v103);
      unint64_t v308 = v104;
      if ((v104 & 2) != 0)
      {
        BOOL v105 = 0;
        goto LABEL_143;
      }
    }
    else
    {
      unint64_t v104 = 0;
      unint64_t v308 = 0;
    }
    char v107 = 3;
    if ((v104 & 1) == 0) {
      char v107 = 19;
    }
    BOOL v105 = (v104 & 0x8000000000000000 | (8 * (v104 >> v107))) == 64;
LABEL_143:
    v109 = (llvm::LLVMContext *)sub_1CB8F1DC4(&v308);
    if (v108 == 1)
    {
      if (!v105) {
        return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
      }
    }
    else if (!v105)
    {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    if ((v109 - 16) <= 0x30 && ((1 << (v109 - 16)) & 0x1000000010001) != 0)
    {
      v310 = &v312;
      uint64_t v311 = 0x800000000;
      if (*(_DWORD *)(a3 + 40) >= 2u)
      {
        unint64_t v110 = 1;
        uint64_t v111 = 36;
        do
        {
          sub_1CC73C824(*(_DWORD *)(*(void *)(a3 + 32) + v111), v9, 0, 0, (uint64_t)&v325);
          if (!v328) {
            break;
          }
          if (v326 > 0x40) {
            uint64_t v112 = *(void *)v325;
          }
          else {
            uint64_t v112 = v325 << -(char)v326 >> -(char)v326;
          }
          if (v311 >= (unint64_t)HIDWORD(v311)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v310 + v311) = v112;
          LODWORD(v311) = v311 + 1;
          if (v328 && v326 >= 0x41 && v325) {
            MEMORY[0x1D25D9CB0](v325, 0x1000C8000313F17);
          }
          ++v110;
          v111 += 32;
        }
        while (v110 < *(unsigned int *)(a3 + 40));
      }
      uint64_t v115 = v311;
      unint64_t v116 = v308;
      uint64_t v117 = 0x800000000000000;
      if ((v308 & 2) == 0) {
        uint64_t v117 = 0x8000000000000;
      }
      if ((v117 & v308) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v108);
        unint64_t v116 = v308;
      }
      uint64_t v118 = (unsigned __int16)(v116 >> 3);
      if (v118 == v115)
      {
        uint64_t v300 = v115;
        uint64_t v119 = 0;
        unint64_t v120 = 0;
        unint64_t v121 = 0;
        while (1)
        {
          if ((v116 & 2) != 0) {
            uint64_t v122 = 0x800000000000000;
          }
          else {
            uint64_t v122 = 0x8000000000000;
          }
          if ((v122 & v116) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v108);
            unint64_t v116 = v308;
          }
          if (v120 >= (unsigned __int16)(v116 >> 3)) {
            break;
          }
          v121 |= (unint64_t)*((unsigned __int8 *)v310 + v119) << v119;
          v119 += 8;
          ++v120;
        }
        uint64_t v325 = (8 * v109) | 1;
        LODWORD(v326) = 0;
        v153 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), v109);
        v154 = llvm::ConstantInt::get(v153, v121, (const llvm::APInt *)1);
        uint64_t v155 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)a4 + 16))(a4, &v325, v154);
        LODWORD(v329) = *(_DWORD *)(*(void *)(a3 + 32) + 4);
        int v330 = 1;
        uint64_t v325 = v155;
        uint64_t v326 = v156;
        int v327 = 1;
        sub_1CC7382B0(a4);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
        uint64_t v115 = v300;
      }
      if (v310 != &v312) {
        free(v310);
      }
      if (v118 == v115) {
        return 1;
      }
    }
    return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
  }
  if (**(unsigned __int16 **)(a3 + 16) > 0xB3u)
  {
    if (v10 - 180 < 2)
    {
      uint64_t v64 = *(void *)(a3 + 32);
      uint64_t v65 = *(unsigned int *)(v64 + 36);
      if ((v65 & 0x80000000) != 0) {
        v66 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
      }
      else {
        v66 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v65);
      }
      uint64_t v67 = *v66;
      if ((*(unsigned char *)(v67 + 3) & 1) == 0) {
        uint64_t v67 = *(void *)(v67 + 24);
      }
      uint64_t v68 = *(void *)(v67 + 8);
      if ((**(_WORD **)(v68 + 16) & 0xFFFE) == 0x74)
      {
        uint64_t v69 = *(unsigned int *)(v68 + 40);
        if (v69)
        {
          uint64_t v70 = *(void *)(v68 + 32);
          v71 = (_DWORD *)(v70 + 16);
          uint64_t v72 = v69;
          while (*((unsigned char *)v71 - 16) != 17)
          {
            v71 += 8;
            if (!--v72) {
              goto LABEL_207;
            }
          }
          if (*v71 == 2445)
          {
            int v138 = 2665;
          }
          else
          {
LABEL_207:
            for (uint64_t i = (_DWORD *)(v70 + 16); *((unsigned char *)i - 16) != 17; i += 8)
            {
              if (!--v69) {
                return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
              }
            }
            if (*i != 2446) {
              return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
            }
            int v138 = 2666;
          }
          __int32 v140 = *(_DWORD *)(v64 + 4);
          LODWORD(v329) = v140;
          if (v140 < 0
            && (v140 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432)
            && *(void *)(*(void *)(v9 + 424) + 8 * (v140 & 0x7FFFFFFF)) == 257)
          {
            sub_1CC7390C0((void *)a4, v138, (int *)&v329, 1, 0);
          }
          else
          {
            int v302 = v138;
            int v141 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v9, "", 0);
            unint64_t v142 = v141 & 0x7FFFFFFF;
            *(void *)(*(void *)(v9 + 24) + 16 * v142) = 4;
            unint64_t v143 = *(unsigned int *)(v9 + 432);
            if (v142 >= v143)
            {
              uint64_t v144 = *(void *)(v9 + 440);
              uint64_t v145 = v142 + 1 - v143;
              if (v142 >= *(unsigned int *)(v9 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v146 = *(_DWORD *)(v9 + 432);
              if (v145)
              {
                v147 = (void *)(*(void *)(v9 + 424) + 8 * *(unsigned int *)(v9 + 432));
                uint64_t v148 = ~v142 + v143;
                do
                {
                  *v147++ = v144;
                  BOOL v149 = __CFADD__(v148++, 1);
                }
                while (!v149);
                int v146 = *(_DWORD *)(v9 + 432);
              }
              *(_DWORD *)(v9 + 432) = v146 + v145;
            }
            *(void *)(*(void *)(v9 + 424) + 8 * v142) = 257;
            uint64_t v150 = *(void *)(v9 + 8);
            if (v150) {
              (*(void (**)(uint64_t))(*(void *)v150 + 24))(v150);
            }
            LODWORD(v308) = v141;
            v151 = sub_1CC7390C0((void *)a4, v302, (int *)&v308, 1, 0);
            LODWORD(v325) = v140;
            LODWORD(v326) = 1;
            v310 = v151;
            uint64_t v311 = v152;
            LODWORD(v312) = 1;
            sub_1CC738034((void *)a4, 126, (unint64_t *)&v325, (int *)&v310);
          }
          goto LABEL_351;
        }
      }
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    if (v10 != 205)
    {
      if (v10 != 206) {
        return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
      }
      int v29 = *(_DWORD *)(*(void *)(a3 + 32) + 4);
      if (v29 < 0 && (uint64_t v30 = v29 & 0x7FFFFFFF, v30 < *(_DWORD *)(v9 + 432)))
      {
        unint64_t v31 = *(void *)(*(void *)(v9 + 424) + 8 * v30);
        v310 = (void *)v31;
        if ((v31 & 0xFFFFFFFFFFFFFFF9) != 0 && (v31 & 4) != 0)
        {
          if (v31)
          {
            int v33 = v31 >> 3;
          }
          else if ((v31 & 2) != 0)
          {
            int v33 = (unsigned __int16)(v31 >> 19);
          }
          else
          {
            int v33 = v31 >> 19;
          }
          goto LABEL_137;
        }
      }
      else
      {
        v310 = 0;
      }
      int v33 = sub_1CB8F1DC4((unint64_t *)&v310);
      if (v106 == 1) {
LABEL_137:
      }
      if (!sub_1CBC382DC(a4, a3, v33)) {
        return sub_1CC6ECE68((uint64_t *)v309, (llvm::MachineInstr *)a3);
      }
      return 1;
    }
    if (*(_DWORD *)(a3 + 40) != 3) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v73 = *(unsigned int *)(*(void *)(a3 + 32) + 36);
    v74 = (uint64_t *)((v73 & 0x80000000) != 0
                    ? *(void *)(v9 + 24) + 16 * (v73 & 0x7FFFFFFF) + 8
                    : *(void *)(v9 + 272) + 8 * v73);
    uint64_t v75 = *v74;
    if (!v75) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    if ((*(unsigned char *)(v75 + 3) & 1) == 0)
    {
      uint64_t v75 = *(void *)(v75 + 24);
      if (!v75 || (*(unsigned char *)(v75 + 3) & 1) == 0) {
        return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
      }
    }
    uint64_t v76 = *(void *)(v75 + 8);
    if (!v76 || **(_WORD **)(v76 + 16) != 82 || *(_DWORD *)(v76 + 40) != 2) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v77 = *(unsigned int *)(*(void *)(v76 + 32) + 36);
    v78 = (uint64_t *)((v77 & 0x80000000) != 0
                    ? *(void *)(v9 + 24) + 16 * (v77 & 0x7FFFFFFF) + 8
                    : *(void *)(v9 + 272) + 8 * v77);
    uint64_t v79 = *v78;
    if (!v79) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    if ((*(unsigned char *)(v79 + 3) & 1) == 0)
    {
      uint64_t v79 = *(void *)(v79 + 24);
      if (!v79 || (*(unsigned char *)(v79 + 3) & 1) == 0) {
        return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
      }
    }
    uint64_t v80 = *(void *)(v79 + 8);
    if (!v80 || **(_WORD **)(v80 + 16) != 206) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    if ((v77 & 0x80000000) != 0 && (unsigned int v81 = v77 & 0x7FFFFFFF, v81 < *(_DWORD *)(v9 + 432)))
    {
      unint64_t v82 = *(void *)(*(void *)(v9 + 424) + 8 * v81);
      if (v82)
      {
        int v83 = v82 >> 3;
        goto LABEL_395;
      }
      if ((v82 & 4) != 0)
      {
        if ((v82 & 2) != 0) {
          int v83 = (unsigned __int16)(v82 >> 19);
        }
        else {
          int v83 = v82 >> 19;
        }
LABEL_395:
        if (!sub_1CBC382DC(a4, a3, v83)) {
          return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
        }
        return 1;
      }
    }
    else
    {
      unint64_t v82 = 0;
    }
    int v83 = (unsigned __int16)(v82 >> 3);
    goto LABEL_395;
  }
  if (**(unsigned __int16 **)(a3 + 16) <= 0x87u)
  {
    if (v10 != 116)
    {
      if (v10 == 126)
      {
        uint64_t v11 = *(void *)(a3 + 32);
        __int32 v12 = *(_DWORD *)(v11 + 4);
        if (v12 < 0)
        {
          unint64_t v13 = *(unsigned int *)(v9 + 432);
          if ((v12 & 0x7FFFFFFFu) < v13)
          {
            uint64_t v14 = *(void *)(v9 + 424);
            if (*(void *)(v14 + 8 * (v12 & 0x7FFFFFFF)) == 513)
            {
              uint64_t v15 = *(unsigned int *)(v11 + 36);
              int v16 = (uint64_t *)((v15 & 0x80000000) != 0
                              ? *(void *)(v9 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8
                              : *(void *)(v9 + 272) + 8 * v15);
              uint64_t v17 = *v16;
              if (v17)
              {
                if ((*(unsigned char *)(v17 + 3) & 1) != 0
                  || (uint64_t v17 = *(void *)(v17 + 24)) != 0 && (*(unsigned char *)(v17 + 3) & 1) != 0)
                {
                  uint64_t v18 = *(void *)(v17 + 8);
                  if (v18)
                  {
                    if (**(_WORD **)(v18 + 16) == 119 && *(_DWORD *)(v18 + 40) == 2)
                    {
                      int v19 = *(_DWORD *)(*(void *)(v18 + 32) + 36);
                      if ((v15 & 0x80000000) != 0 && (unint64_t v20 = v15 & 0x7FFFFFFF, v20 < v13)) {
                        uint64_t v21 = *(unsigned __int8 **)(v14 + 8 * v20);
                      }
                      else {
                        uint64_t v21 = 0;
                      }
                      unint64_t v308 = (unint64_t)v21;
                      if (v19 < 0 && (v19 & 0x7FFFFFFFu) < v13) {
                        unint64_t v264 = *(void *)(v14 + 8 * (v19 & 0x7FFFFFFF));
                      }
                      else {
                        unint64_t v264 = 0;
                      }
                      unsigned int v266 = sub_1CB8F1DC4(&v308);
                      if (v265 == 1) {
                      if (v266 > 0x40)
                      }
                        operator new[]();
                      if (v266) {
                        unint64_t v267 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v266;
                      }
                      else {
                        unint64_t v267 = 0;
                      }
                      v329 = (unsigned __int8 *)v264;
                      int v330 = 0;
                      if (v264)
                      {
                        unint64_t v268 = (v264 >> 3);
                      }
                      else if ((v264 & 4) != 0)
                      {
                        if ((v264 & 2) != 0) {
                          unint64_t v268 = (unsigned __int16)(v264 >> 19);
                        }
                        else {
                          unint64_t v268 = (v264 >> 19);
                        }
                      }
                      else
                      {
                        unint64_t v268 = (unsigned __int16)(v264 >> 3);
                      }
                      v269 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v268);
                      v270 = llvm::ConstantInt::get(v269, v267, (const llvm::APInt *)1);
                      uint64_t v271 = (*(uint64_t (**)(uint64_t, unsigned __int8 **, void *))(*(void *)a4 + 16))(a4, &v329, v270);
                      uint64_t v325 = v264;
                      LODWORD(v326) = 0;
                      LODWORD(v310) = v19;
                      LODWORD(v312) = 0;
                      v313 = (unsigned __int8 **)v271;
                      uint64_t v314 = v272;
                      LODWORD(v315) = 1;
                      v273 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v325, 1, &v310, 2, 0);
                      LODWORD(v325) = v12;
                      LODWORD(v326) = 1;
                      v310 = v273;
                      uint64_t v311 = v274;
                      LODWORD(v312) = 1;
                      sub_1CC738034((void *)a4, 126, (unint64_t *)&v325, (int *)&v310);
                      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v85 = *(unsigned int *)(a3 + 40);
    uint64_t v86 = *(void *)(a3 + 32);
    if (v85)
    {
      uint64_t v87 = 0;
      v88 = *(unsigned __int8 **)(a3 + 32);
      while (1)
      {
        int v89 = *v88;
        v88 += 32;
        if (v89 == 17) {
          break;
        }
        if (v85 == ++v87) {
          goto LABEL_113;
        }
      }
    }
    else
    {
LABEL_113:
      LODWORD(v87) = -1;
    }
    int v90 = *(_DWORD *)(v86 + 32 * v87 + 16);
    if (v90 != 2744)
    {
      if (v90 == 2755)
      {
        sub_1CC73C210(*(_DWORD *)(v86 + 68), v9, (uint64_t)&v310);
        if (v311 >= 0x41) {
          v91 = (uint64_t *)v310;
        }
        else {
          v91 = (uint64_t *)&v310;
        }
        uint64_t v92 = *v91;
        if (v311 >= 0x41 && (_BYTE)v312 && v310) {
          MEMORY[0x1D25D9CB0]();
        }
        uint64_t v52 = 1;
        int FixedObject = llvm::MachineFrameInfo::CreateFixedObject(*(llvm::MachineFrameInfo **)(*(void *)(*(void *)(a3 + 24) + 32) + 56), v92, 16, 1, 1);
        LODWORD(v310) = *(_DWORD *)(*(void *)(a3 + 32) + 4);
        LODWORD(v311) = 1;
        sub_1CC735850((void *)a4, (uint64_t *)&v310, FixedObject);
        goto LABEL_124;
      }
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v123 = *(unsigned int *)(v86 + 32 * (v87 + 1) + 4);
    if ((v123 & 0x80000000) != 0) {
      v124 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v123 & 0x7FFFFFFF) + 8);
    }
    else {
      v124 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v123);
    }
    uint64_t v125 = *v124;
    if (!v125) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v126 = *(unsigned int *)(v86 + 32 * (v87 + 2) + 4);
    if ((*(unsigned char *)(v125 + 3) & 1) == 0)
    {
      uint64_t v125 = *(void *)(v125 + 24);
      if (!v125 || (*(unsigned char *)(v125 + 3) & 1) == 0) {
        return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
      }
    }
    uint64_t v127 = *(void *)(v125 + 8);
    if (!v127 || **(_WORD **)(v127 + 16) != 119 || *(_DWORD *)(v127 + 40) != 2) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    v128 = (uint64_t *)((v126 & 0x80000000) != 0
                     ? *(void *)(v9 + 24) + 16 * (v126 & 0x7FFFFFFF) + 8
                     : *(void *)(v9 + 272) + 8 * v126);
    uint64_t v129 = *v128;
    if (!v129) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v130 = *(unsigned int *)(*(void *)(v127 + 32) + 36);
    if ((*(unsigned char *)(v129 + 3) & 1) == 0)
    {
      uint64_t v129 = *(void *)(v129 + 24);
      if (!v129 || (*(unsigned char *)(v129 + 3) & 1) == 0) {
        return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
      }
    }
    uint64_t v131 = *(void *)(v129 + 8);
    if (!v131 || **(_WORD **)(v131 + 16) != 119 || *(_DWORD *)(v131 + 40) != 2) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    if ((v130 & 0x80000000) != 0) {
      v132 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v130 & 0x7FFFFFFF) + 8);
    }
    else {
      v132 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v130);
    }
    uint64_t v133 = *v132;
    if ((*(unsigned char *)(v133 + 3) & 1) == 0) {
      uint64_t v133 = *(void *)(v133 + 24);
    }
    uint64_t v134 = *(void *)(v133 + 8);
    if ((**(_WORD **)(v134 + 16) & 0xFFFE) != 0x74) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v135 = *(unsigned int *)(v134 + 40);
    if (!v135) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v136 = *(unsigned int *)(*(void *)(v131 + 32) + 36);
    for (j = (_DWORD *)(*(void *)(v134 + 32) + 16); *((unsigned char *)j - 16) != 17; j += 8)
    {
      if (!--v135) {
        return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
      }
    }
    if (*j != 2140) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    if ((v136 & 0x80000000) != 0) {
      v282 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
    }
    else {
      v282 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v136);
    }
    uint64_t v283 = *v282;
    if ((*(unsigned char *)(v283 + 3) & 1) == 0) {
      uint64_t v283 = *(void *)(v283 + 24);
    }
    uint64_t v284 = *(void *)(v283 + 8);
    if ((**(_WORD **)(v284 + 16) & 0xFFFE) != 0x74) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v285 = *(unsigned int *)(v284 + 40);
    if (!v285) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    for (k = (_DWORD *)(*(void *)(v284 + 32) + 16); *((unsigned char *)k - 16) != 17; k += 8)
    {
      if (!--v285) {
        return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
      }
    }
    if (*k != 2544) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v325 = 129;
    LODWORD(v326) = 0;
    v310 = (void *)7;
    LODWORD(v312) = 3;
    uint64_t v52 = 1;
    v287 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 314, &v325, 1, &v310, 1, 0);
    LODWORD(v325) = *(_DWORD *)(*(void *)(a3 + 32) + 4);
    LODWORD(v326) = 1;
    v310 = v287;
    uint64_t v311 = v288;
    LODWORD(v312) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 267, &v325, 1, &v310, 1, 0);
LABEL_124:
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
    return v52;
  }
  if (v10 == 136)
  {
    v94 = *(_DWORD **)(a3 + 32);
    int v95 = v94[1];
    if ((v95 & 0x80000000) == 0) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v96 = v95 & 0x7FFFFFFF;
    if (v96 >= *(_DWORD *)(v9 + 432) || *(void *)(*(void *)(v9 + 424) + 8 * v96) != 9) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    int v97 = v94[9];
    unsigned int v98 = v94[17];
    int v99 = v94[25];
    sub_1CC73C210(v98, v9, (uint64_t)&v310);
    if ((_BYTE)v312)
    {
      if (v311 > 0x40)
      {
        if (v310) {
          MEMORY[0x1D25D9CB0](v310, 0x1000C8000313F17);
        }
        unint64_t v259 = 0;
        uint64_t v260 = 0;
        uint64_t v100 = 0;
      }
      else
      {
        unint64_t v259 = ((uint64_t)((void)v310 << -(char)v311) >> -(char)v311) & 0xFFFFFFFFFFFFFF00;
        uint64_t v260 = ((uint64_t)((void)v310 << -(char)v311) >> -(char)v311);
        uint64_t v100 = 1;
      }
      unint64_t v101 = v260 | v259;
    }
    else
    {
      uint64_t v100 = 0;
      unint64_t v101 = 0;
    }
    if (v97 != v98 && (!v100 || !v101)) {
      return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
    }
    uint64_t v52 = 1;
    LODWORD(v325) = *(_DWORD *)(*(void *)(a3 + 32) + 4);
    LODWORD(v326) = 1;
    LODWORD(v310) = v97;
    LODWORD(v312) = 0;
    LODWORD(v313) = v99;
    LODWORD(v315) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a4 + 32))(a4, 66, &v325, 1, &v310, 2, 0);
    goto LABEL_124;
  }
  if (v10 != 168) {
    return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
  }
  v42 = *(_DWORD **)(a3 + 32);
  LODWORD(v325) = v42[1];
  uint64_t v43 = v42[9];
  if ((v43 & 0x80000000) != 0) {
    uint64_t v44 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v44 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v43);
  }
  uint64_t v45 = *v44;
  if ((*(unsigned char *)(v45 + 3) & 1) == 0) {
    uint64_t v45 = *(void *)(v45 + 24);
  }
  uint64_t v46 = *(void *)(v45 + 8);
  if (**(_WORD **)(v46 + 16) != 121) {
    return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
  }
  uint64_t v47 = *(void *)(*(void *)(v46 + 32) + 48);
  if (!v47) {
    return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
  }
  int v48 = v42[17];
  if (!sub_1CB844168(v47, 1.0)) {
    return sub_1CBC4375C((int)v309, (llvm::MachineInstr *)a3);
  }
  v49 = sub_1CC7390C0((void *)a4, 253, (int *)&v325, 1, 0);
  v51 = v50;
  uint64_t v311 = 0;
  v312 = 0;
  LODWORD(v310) = 0;
  HIDWORD(v310) = v48;
  v313 = 0;
  llvm::MachineInstr::addOperand(v50, v49, (const llvm::MachineOperand *)&v310);
  *((_WORD *)v51 + 22) = *((_WORD *)v51 + 22) & 0xC | *(_WORD *)(a3 + 44) & 0xFFF3;
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
  return 1;
}

BOOL sub_1CBC382DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (a3 != 8) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  if (**(_WORD **)(a2 + 16) == 206)
  {
    uint64_t v7 = *(void *)(v6 + 120);
    if (v7)
    {
      unsigned int v8 = *(_DWORD **)(v6 + 112);
      uint64_t v9 = 4 * v7;
      while (*v8 != -1)
      {
        ++v8;
        v9 -= 4;
        if (!v9) {
          goto LABEL_7;
        }
      }
      return 0;
    }
  }
LABEL_7:
  unsigned int v10 = *(_DWORD *)(v6 + 4);
  if ((v10 & 0x80000000) != 0 && (v10 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v5 + 432)) {
    unint64_t v11 = *(void *)(*(void *)(v5 + 424) + 8 * (v10 & 0x7FFFFFFF));
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v68 = v11;
  unsigned int v13 = sub_1CB8F1DC4(&v68);
  if (v12 == 1) {
  if ((v13 & 7) != 0)
  }
    return 0;
  sub_1CBC3924C((uint64_t)v66, v5, v10, 0);
  if (!v67) {
    return 0;
  }
  int v16 = v66[0];
  if ((v66[0] & 0x80000000) != 0 && (v66[0] & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v5 + 432)) {
    uint64_t v17 = *(char **)(*(void *)(v5 + 424) + 8 * (v66[0] & 0x7FFFFFFF));
  }
  else {
    uint64_t v17 = 0;
  }
  int v18 = v66[1];
  int v19 = v13 >> 3;
  uint64_t v65 = v17;
  unint64_t v21 = sub_1CB8F1DC4((unint64_t *)&v65);
  if (v20 == 1) {
  unint64_t v22 = v21 >> 3;
  }
  if (v19 % (int)v22)
  {
    if ((int)v22 % v19) {
      return 0;
    }
  }
  if (v19 >= (int)v22 && v18 || v19 < (int)v22 && v18 % v19) {
    return 0;
  }
  int v59 = v18;
  uint64_t v62 = v5;
  int v60 = v16;
  uint64_t v69 = v71;
  v71[0] = v16;
  uint64_t v70 = 0x800000001;
  if (v13 >= 0x10)
  {
    BOOL v14 = 0;
    if (v19 <= 2) {
      int v26 = 2;
    }
    else {
      int v26 = v13 >> 3;
    }
    int v61 = v26;
    uint64_t v27 = 1;
    while (1)
    {
      sub_1CBC3924C((uint64_t)&v74, v62, v10, v27);
      if (!(_BYTE)v75) {
        goto LABEL_100;
      }
      int v28 = (v74 & 0x80000000) != 0 && (v74 & 0x7FFFFFFF) < *(_DWORD *)(v62 + 432)
          ? *(char **)(*(void *)(v62 + 424) + 8 * (v74 & 0x7FFFFFFF))
          : 0;
      if (v28 != v65
        || v19 >= (int)v22 && HIDWORD(v74) != (int)v27 % (int)v22
        || v19 < (int)v22 && v27 != SHIDWORD(v74) % v19)
      {
        goto LABEL_100;
      }
      if ((int)v27 % (int)v22)
      {
        unsigned int v23 = v70;
        if (v74 != *((_DWORD *)v69 + v70 - 1)) {
          goto LABEL_100;
        }
      }
      else
      {
        if (v70 >= (unint64_t)HIDWORD(v70)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v69 + v70) = v74;
        unsigned int v23 = v70 + 1;
        LODWORD(v70) = v70 + 1;
      }
      uint64_t v27 = (v27 + 1);
      BOOL v14 = v27 >= v19;
      if (v61 == v27) {
        goto LABEL_31;
      }
    }
  }
  unsigned int v23 = 1;
LABEL_31:
  if (v19 == v22)
  {
    uint64_t v24 = v62;
    int v25 = v60;
  }
  else
  {
    int v29 = v60;
    if (v19 <= (int)v22)
    {
      unint64_t v41 = sub_1CBA5A95C(v22 / v19, (8 * v13) | 1);
      if (v60 < 0)
      {
        int v43 = v59;
        if ((v60 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v62 + 432)) {
          uint64_t v42 = 0;
        }
        else {
          uint64_t v42 = *(void *)(*(void *)(v62 + 424) + 8 * (v60 & 0x7FFFFFFF));
        }
      }
      else
      {
        uint64_t v42 = 0;
        int v43 = v59;
      }
      if (v42 != v41)
      {
        unint64_t v72 = v41;
        int v73 = 0;
        LODWORD(v74) = v60;
        v76[0] = 0;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a1 + 32))(a1, 82, &v72, 1, &v74, 1, 0);
        int v29 = *(_DWORD *)(*(void *)(v51 + 32) + 4);
      }
      unint64_t v72 = (8 * v13) | 1;
      int v73 = 0;
      uint64_t v63 = 257;
      int v64 = 0;
      uint64_t v52 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a1 + 8), (llvm::LLVMContext *)0x20);
      unsigned int v53 = llvm::ConstantInt::get(v52, v43 / v19, (const llvm::APInt *)1);
      uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)a1 + 16))(a1, &v63, v53);
      LODWORD(v74) = v29;
      v76[0] = 0;
      uint64_t v77 = v54;
      uint64_t v78 = v55;
      int v79 = 1;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a1 + 32))(a1, 205, &v72, 1, &v74, 2, 0);
    }
    else
    {
      uint64_t v30 = v65;
      if (((unint64_t)v65 & 0xFFFFFFFFFFFFFFF9) == 0 || (v65 & 4) == 0)
      {
        unint64_t v72 = sub_1CBA5A95C(v23, (unint64_t)v65);
        int v73 = 0;
        uint64_t v44 = (int *)v69;
        int v45 = v70;
        v74 = v76;
        uint64_t v75 = 0x800000000;
        if (v70 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v24 = v62;
        if (v70)
        {
          uint64_t v46 = 0;
          uint64_t v47 = 4 * v70;
          do
          {
            int v48 = *v44++;
            v49 = &v76[v46];
            _DWORD *v49 = v48;
            v49[4] = 0;
            v46 += 6;
            v47 -= 4;
          }
          while (v47);
          int v50 = v75;
        }
        else
        {
          int v50 = 0;
        }
        LODWORD(v75) = v50 + v45;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32))(a1, 77, &v72, 1, v76);
        uint64_t v57 = v56;
        if (v74 != v76) {
          free(v74);
        }
        int v25 = *(_DWORD *)(*(void *)(v57 + 32) + 4);
        goto LABEL_92;
      }
      uint64_t v31 = 0x800000000000000;
      if ((v65 & 2) == 0) {
        uint64_t v31 = 0x8000000000000;
      }
      if ((v31 & (unint64_t)v65) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v65);
        uint64_t v30 = v65;
      }
      uint64_t v32 = (unsigned __int16)(v30 >> 3) * v23;
      char v33 = 3;
      if ((v30 & 1) == 0) {
        char v33 = 19;
      }
      unint64_t v34 = (unint64_t)v30 & 0x8000000000000000 | (8 * ((unint64_t)v30 >> v33)) | 1;
      char v35 = 35;
      char v36 = 19;
      if ((v30 & 4) == 0) {
        char v35 = 19;
      }
      unint64_t v37 = (unint64_t)v30 >> v35;
      if ((v30 & 4) == 0) {
        char v36 = 3;
      }
      if (v30) {
        char v36 = 3;
      }
      unint64_t v38 = (8 * (unsigned __int16)((unint64_t)v30 >> v36)) & 0xFFFFF8000007FFFFLL | ((v37 & 0xFFFFFF) << 19);
      if ((v30 & 2) != 0) {
        unint64_t v39 = v38 | 2;
      }
      else {
        unint64_t v39 = v34;
      }
      v74 = (void *)sub_1CBA5A95C(v32, v39);
      LODWORD(v75) = 0;
      sub_1CC738F60(a1, (uint64_t)&v74, (int *)v69, v70);
    }
    int v25 = *(_DWORD *)(*(void *)(v40 + 32) + 4);
    uint64_t v24 = v62;
  }
LABEL_92:
  if (v25 < 0 && (v25 & 0x7FFFFFFFu) < *(_DWORD *)(v24 + 432)) {
    uint64_t v58 = *(void *)(*(void *)(v24 + 424) + 8 * (v25 & 0x7FFFFFFF));
  }
  else {
    uint64_t v58 = 0;
  }
  LODWORD(v72) = v10;
  int v73 = 1;
  LODWORD(v74) = v25;
  v76[0] = 0;
  if (v58 == v68) {
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a1 + 32))(a1, 19, &v72, 1, &v74, 1, 0);
  }
  else {
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a1 + 32))(a1, 82, &v72, 1, &v74, 1, 0);
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  BOOL v14 = 1;
LABEL_100:
  if (v69 != v71) {
    free(v69);
  }
  return v14;
}

uint64_t sub_1CBC38A44(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(uint64_t **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v10 = **(unsigned int **)(a1 + 16);
  if ((v10 & 0x80000000) != 0) {
    unint64_t v11 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v11 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v10);
  }
  uint64_t v12 = *v11;
  if (!v12) {
    goto LABEL_7;
  }
  uint64_t v13 = *v9;
  if ((*(unsigned char *)(v12 + 3) & 1) == 0)
  {
    uint64_t v12 = *(void *)(v12 + 24);
    if (!v12 || (*(unsigned char *)(v12 + 3) & 1) == 0) {
      goto LABEL_7;
    }
  }
  uint64_t v14 = *(void *)(v12 + 8);
  if (!v14 || **(_WORD **)(v14 + 16) != 65 || *(_DWORD *)(v14 + 40) != 3) {
    goto LABEL_7;
  }
  uint64_t v22 = *(void *)(v14 + 32);
  int v23 = *(_DWORD *)(v22 + 36);
  sub_1CC73C210(*(_DWORD *)(v22 + 68), v8, (uint64_t)&v59);
  if ((_BYTE)v61)
  {
    if (v60 < 0x41)
    {
      uint64_t v24 = v59 << -(uint64_t)v60 >> -(uint64_t)v60;
      goto LABEL_27;
    }
    if (v59) {
      MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
    }
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v14 + 32) + 36), v8, (uint64_t)&v59);
  if (!(_BYTE)v61) {
    goto LABEL_7;
  }
  if (v60 >= 0x41) {
    goto LABEL_86;
  }
  uint64_t v24 = v59 << -(char)v60 >> -(char)v60;
  int v23 = *(_DWORD *)(*(void *)(v14 + 32) + 68);
LABEL_27:
  if (v13 != a2) {
    LODWORD(v24) = (unsigned __int16)v24;
  }
  if (v24 != a3) {
    goto LABEL_7;
  }
  uint64_t v27 = **(unsigned int **)(a1 + 24);
  int v28 = (uint64_t *)((v27 & 0x80000000) != 0
                  ? *(void *)(v8 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8
                  : *(void *)(v8 + 272) + 8 * v27);
  uint64_t v29 = *v28;
  if (!v29) {
    goto LABEL_7;
  }
  uint64_t v30 = *v9;
  if ((*(unsigned char *)(v29 + 3) & 1) == 0)
  {
    uint64_t v29 = *(void *)(v29 + 24);
    if (!v29 || (*(unsigned char *)(v29 + 3) & 1) == 0) {
      goto LABEL_7;
    }
  }
  uint64_t v31 = *(void *)(v29 + 8);
  if (!v31 || **(_WORD **)(v31 + 16) != 65 || *(_DWORD *)(v31 + 40) != 3) {
    goto LABEL_7;
  }
  uint64_t v32 = *(void *)(v31 + 32);
  int v33 = *(_DWORD *)(v32 + 36);
  sub_1CC73C210(*(_DWORD *)(v32 + 68), v8, (uint64_t)&v59);
  if (!(_BYTE)v61)
  {
LABEL_38:
    sub_1CC73C210(*(_DWORD *)(*(void *)(v31 + 32) + 36), v8, (uint64_t)&v59);
    if (!(_BYTE)v61) {
      goto LABEL_7;
    }
    if (v60 < 0x41)
    {
      uint64_t v34 = v59 << -(char)v60 >> -(char)v60;
      int v33 = *(_DWORD *)(*(void *)(v31 + 32) + 68);
      goto LABEL_59;
    }
LABEL_86:
    if (v59) {
      MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
    }
    goto LABEL_7;
  }
  if (v60 >= 0x41)
  {
    if (v59) {
      MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
    }
    goto LABEL_38;
  }
  uint64_t v34 = v59 << -(uint64_t)v60 >> -(uint64_t)v60;
LABEL_59:
  if (v30 != a2) {
    LODWORD(v34) = (unsigned __int16)v34;
  }
  if (v34 == a4) {
    goto LABEL_68;
  }
LABEL_7:
  uint64_t v15 = **(unsigned int **)(a1 + 24);
  if ((v15 & 0x80000000) != 0) {
    int v16 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
  }
  else {
    int v16 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v15);
  }
  uint64_t v17 = *v16;
  if (!v17) {
    return 0;
  }
  uint64_t v18 = *v9;
  if ((*(unsigned char *)(v17 + 3) & 1) == 0)
  {
    uint64_t v17 = *(void *)(v17 + 24);
    if (!v17 || (*(unsigned char *)(v17 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v19 = *(void *)(v17 + 8);
  if (!v19 || **(_WORD **)(v19 + 16) != 65 || *(_DWORD *)(v19 + 40) != 3) {
    return 0;
  }
  uint64_t v25 = *(void *)(v19 + 32);
  int v23 = *(_DWORD *)(v25 + 36);
  sub_1CC73C210(*(_DWORD *)(v25 + 68), v8, (uint64_t)&v59);
  if ((_BYTE)v61)
  {
    if (v60 < 0x41)
    {
      uint64_t v26 = v59 << -(uint64_t)v60 >> -(uint64_t)v60;
      goto LABEL_43;
    }
    if (v59) {
      MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
    }
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v19 + 32) + 36), v8, (uint64_t)&v59);
  if (!(_BYTE)v61) {
    return 0;
  }
  if (v60 >= 0x41) {
    goto LABEL_88;
  }
  uint64_t v26 = v59 << -(char)v60 >> -(char)v60;
  int v23 = *(_DWORD *)(*(void *)(v19 + 32) + 68);
LABEL_43:
  if (v18 != a2) {
    LODWORD(v26) = (unsigned __int16)v26;
  }
  if (v26 != a3) {
    return 0;
  }
  uint64_t v35 = **(unsigned int **)(a1 + 16);
  char v36 = (uint64_t *)((v35 & 0x80000000) != 0
                  ? *(void *)(v8 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8
                  : *(void *)(v8 + 272) + 8 * v35);
  uint64_t v37 = *v36;
  if (!v37) {
    return 0;
  }
  uint64_t v38 = *v9;
  if ((*(unsigned char *)(v37 + 3) & 1) == 0)
  {
    uint64_t v37 = *(void *)(v37 + 24);
    if (!v37 || (*(unsigned char *)(v37 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v39 = *(void *)(v37 + 8);
  if (!v39 || **(_WORD **)(v39 + 16) != 65 || *(_DWORD *)(v39 + 40) != 3) {
    return 0;
  }
  uint64_t v40 = *(void *)(v39 + 32);
  int v33 = *(_DWORD *)(v40 + 36);
  sub_1CC73C210(*(_DWORD *)(v40 + 68), v8, (uint64_t)&v59);
  if (!(_BYTE)v61)
  {
LABEL_54:
    sub_1CC73C210(*(_DWORD *)(*(void *)(v39 + 32) + 36), v8, (uint64_t)&v59);
    if ((_BYTE)v61)
    {
      if (v60 < 0x41)
      {
        uint64_t v41 = v59 << -(char)v60 >> -(char)v60;
        int v33 = *(_DWORD *)(*(void *)(v39 + 32) + 68);
        goto LABEL_65;
      }
LABEL_88:
      if (v59) {
        MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
      }
    }
    return 0;
  }
  if (v60 >= 0x41)
  {
    if (v59) {
      MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
    }
    goto LABEL_54;
  }
  uint64_t v41 = v59 << -(uint64_t)v60 >> -(uint64_t)v60;
LABEL_65:
  if (v38 != a2) {
    LODWORD(v41) = (unsigned __int16)v41;
  }
  if (v41 != a4) {
    return 0;
  }
LABEL_68:
  uint64_t v42 = *(void *)(a1 + 40);
  int v43 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 32) + 4);
  unint64_t v70 = a2;
  int v71 = 0;
  LODWORD(v59) = v23;
  int v61 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v42 + 32))(v42, 184, &v70, 1, &v59, 1, 0);
  int v45 = *(_DWORD *)(*(void *)(v44 + 32) + 4);
  uint64_t v46 = *(void *)(a1 + 40);
  unint64_t v70 = a2;
  int v71 = 0;
  LODWORD(v59) = v45;
  int v61 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v46 + 32))(v46, 177, &v70, 1, &v59, 1, 0);
  int v48 = *(_DWORD *)(*(void *)(v47 + 32) + 4);
  v49 = *(llvm::IntegerType ******)(a1 + 40);
  unint64_t v70 = a2;
  int v71 = 0;
  if (a2)
  {
    unint64_t v50 = (a2 >> 3);
  }
  else if ((a2 & 4) != 0)
  {
    if ((a2 & 2) != 0) {
      unint64_t v50 = (unsigned __int16)(a2 >> 19);
    }
    else {
      unint64_t v50 = (a2 >> 19);
    }
  }
  else
  {
    unint64_t v50 = (unsigned __int16)(a2 >> 3);
  }
  uint64_t v51 = llvm::IntegerType::get(***v49[1], (llvm::LLVMContext *)v50);
  unsigned int v53 = *(llvm::ConstantInt **)v51;
  unsigned int v54 = *(_DWORD *)(v51 + 8);
  unsigned int v60 = v54 >> 8;
  if (v54 >> 8 >= 0x41) {
    operator new[]();
  }
  uint64_t v59 = 0;
  uint64_t v55 = llvm::ConstantInt::get(v53, (llvm::LLVMContext *)&v59, v52);
  if (v60 >= 0x41 && v59) {
    MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
  }
  ((void (*)(llvm::IntegerType *****, unint64_t *, void *))(*v49)[2])(v49, &v70, v55);
  int v57 = *(_DWORD *)(*(void *)(v56 + 32) + 4);
  uint64_t v58 = *(void *)(a1 + 40);
  uint64_t v20 = 1;
  LODWORD(v70) = v43;
  int v71 = 1;
  LODWORD(v59) = 40;
  int v61 = 2;
  int v62 = v33;
  int v63 = 0;
  int v64 = v57;
  int v65 = 0;
  int v66 = v48;
  int v67 = 0;
  int v68 = v45;
  int v69 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v58 + 32))(v58, 51, &v70, 1, &v59, 5, 0);
  llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)(a1 + 32));
  return v20;
}

const char *sub_1CBC3923C()
{
  return "AGX3PreLegalizerCombiner";
}

uint64_t sub_1CBC3924C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v7 = 0;
  uint64_t v8 = a3;
  while (1)
  {
    uint64_t v9 = (uint64_t *)((v8 & 0x80000000) != 0
                   ? *(void *)(a2 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                   : *(void *)(a2 + 272) + 8 * v8);
    uint64_t v10 = *v9;
    if (v10 && ((*(unsigned char *)(v10 + 3) & 1) != 0 || (uint64_t v10 = *(void *)(v10 + 24)) != 0 && (*(unsigned char *)(v10 + 3) & 1) != 0))
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    if ((v8 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432))
    {
      unint64_t v12 = *(void *)(*(void *)(a2 + 424) + 8 * (v8 & 0x7FFFFFFF));
      goto LABEL_13;
    }
LABEL_12:
    unint64_t v12 = 0;
LABEL_13:
    unint64_t v59 = v12;
    uint64_t result = sub_1CB8F1DC4(&v59);
    int v15 = result;
    if (v14 == 1) {
    int v16 = (unsigned __int16)(v59 >> 3);
    }
    int v17 = (unsigned __int16)(v59 >> 19);
    if ((v59 & 2) == 0) {
      int v17 = v59 >> 19;
    }
    if ((v59 & 4) != 0) {
      int v16 = v17;
    }
    if (v59) {
      int v18 = v59 >> 3;
    }
    else {
      int v18 = v16;
    }
    if (((v18 | v15) & 7) != 0) {
      goto LABEL_96;
    }
    uint64_t v19 = *(unsigned __int16 **)(v11 + 16);
    unsigned int v20 = *v19;
    if (v20 <= 0xCB)
    {
      switch(*v19)
      {
        case 'J':
          uint64_t v31 = *(void *)(v11 + 32);
          unsigned int v32 = *((unsigned __int8 *)v19 + 4);
          uint64_t v33 = *((void *)v19 + 1);
          unsigned int v34 = v32;
          if ((v33 & 2) != 0)
          {
            int v48 = *(_DWORD *)(v11 + 40);
            unsigned int v34 = v32;
            if (v48 != v32)
            {
              int v49 = v48 - 1;
              unsigned int v50 = v32;
              unsigned int v34 = v32;
              do
              {
                int v51 = *(_DWORD *)(v31 + 32 * v50);
                if ((v51 & 0x10000FF) != 0x1000000) {
                  break;
                }
                v34 += (v51 & 0x2000000) == 0;
                if (v49 == v50) {
                  break;
                }
                ++v50;
              }
              while ((v51 & 0x2000000) == 0);
            }
          }
          int v35 = 0;
          if (v34)
          {
            uint64_t v36 = 32 * v34 - 32;
            uint64_t v37 = (int *)(v31 + 4);
            do
            {
              int v38 = *v37;
              v37 += 8;
              if (v8 == v38)
              {
                BOOL v39 = 1;
              }
              else
              {
                ++v35;
                BOOL v39 = v36 == 0;
              }
              v36 -= 32;
            }
            while (!v39);
          }
          int v40 = v15 + 7;
          if (v15 >= 0) {
            int v40 = v15;
          }
          if ((v33 & 2) == 0 || (int v52 = *(_DWORD *)(v11 + 40), v52 == v32))
          {
            unsigned int v41 = v32;
          }
          else
          {
            int v53 = v52 - 1;
            unsigned int v41 = v32;
            do
            {
              int v54 = *(_DWORD *)(v31 + 32 * v32);
              if ((v54 & 0x10000FF) != 0x1000000) {
                break;
              }
              v41 += (v54 & 0x2000000) == 0;
              if (v53 == v32) {
                break;
              }
              ++v32;
            }
            while ((v54 & 0x2000000) == 0);
          }
          uint64_t v8 = *(unsigned int *)(v31 + 32 * v41 + 4);
          a4 = (a4 + v35 * (v40 >> 3));
          goto LABEL_69;
        case 'L':
        case 'O':
          int v25 = *(_DWORD *)(*(void *)(v11 + 32) + 36);
          if (v25 < 0 && (uint64_t v26 = v25 & 0x7FFFFFFF, v26 < *(_DWORD *)(a2 + 432))) {
            unint64_t v27 = *(void *)(*(void *)(a2 + 424) + 8 * v26);
          }
          else {
            unint64_t v27 = 0;
          }
          unint64_t v60 = v27;
          uint64_t result = sub_1CB8F1DC4(&v60);
          int v29 = result;
          if (v28 == 1) {
          if ((v29 & 7) != 0)
          }
            goto LABEL_96;
          int v21 = v29 + 7;
          if (v29 >= 0) {
            int v21 = v29;
          }
          break;
        case 'M':
        case 'N':
          int v21 = v18 + 7;
          if (v18 >= 0) {
            int v21 = v18;
          }
          break;
        case 'R':
          uint64_t v8 = *(unsigned int *)(*(void *)(v11 + 32) + 36);
          goto LABEL_69;
        default:
          goto LABEL_93;
      }
      int v30 = v21 >> 3;
      uint64_t v8 = *(unsigned int *)(*(void *)(v11 + 32) + 32 * ((int)a4 / v30 + 1) + 4);
      a4 = ((int)a4 % v30);
      goto LABEL_69;
    }
    if (v20 == 205) {
      break;
    }
    if (v20 == 206)
    {
      uint64_t v22 = *(void *)(v11 + 32);
      int v23 = *(_DWORD *)(*(void *)(v22 + 112) + 4 * ((int)a4 / (v18 / 8)));
      if (v23 == -1) {
        goto LABEL_96;
      }
      uint64_t v8 = *(unsigned int *)(v22 + 36);
      if ((v8 & 0x80000000) != 0 && (v8 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432)) {
        unint64_t v24 = *(void *)(*(void *)(a2 + 424) + 8 * (v8 & 0x7FFFFFFF));
      }
      else {
        unint64_t v24 = 0;
      }
      uint64_t v43 = *(unsigned int *)(v22 + 68);
      unint64_t v60 = v24;
      uint64_t result = sub_1CB8F1DC4(&v60);
      int v45 = result;
      if (v44 == 1) {
      if ((v45 & 7) != 0)
      }
        goto LABEL_96;
      int v46 = (int)a4 % (v18 / 8) + v23 * (v18 / 8);
      if (v46 < v45 / 8)
      {
        int v47 = 0;
      }
      else
      {
        uint64_t v8 = v43;
        int v47 = v45 / 8;
      }
      a4 = (v46 - v47);
    }
    else
    {
      if (v20 != 204)
      {
LABEL_93:
        *(void *)a1 = v8 | (a4 << 32);
        *(unsigned char *)(a1 + 8) = 1;
        return result;
      }
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      unint64_t v60 = (unint64_t)&v58 + 4;
      int v61 = &v58;
      int v62 = &v57;
      uint64_t result = sub_1CD42D9B8((uint64_t)&v60, a2, v11);
      if (!result) {
        goto LABEL_96;
      }
      int v55 = (int)a4 / (v18 / 8);
      if (v57 == v55) {
        a4 = ((int)a4 % (v18 / 8));
      }
      else {
        a4 = a4;
      }
      if (v57 == v55) {
        uint64_t v56 = (unsigned int *)&v58;
      }
      else {
        uint64_t v56 = (unsigned int *)&v58 + 1;
      }
      uint64_t v8 = *v56;
    }
LABEL_69:
    if (++v7 == 1000) {
      goto LABEL_96;
    }
  }
  if (*(_DWORD *)(v11 + 40) != 3) {
    goto LABEL_96;
  }
  uint64_t v42 = *(void *)(v11 + 32);
  uint64_t v8 = *(unsigned int *)(v42 + 36);
  uint64_t result = sub_1CC73C210(*(_DWORD *)(v42 + 68), a2, (uint64_t)&v60);
  if (!(_BYTE)v62) {
    goto LABEL_96;
  }
  if (v61 < 0x41)
  {
    a4 = a4 + v15 / 8 * ((uint64_t)(v60 << -(char)v61) >> -(char)v61);
    goto LABEL_69;
  }
  uint64_t result = v60;
  if (v60) {
    uint64_t result = MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
  }
LABEL_96:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1CBC39760()
{
  int v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable the agx3 pre legalization machine instruction combiner";
  v4.n128_u64[1] = 61;
  char v1 = 1;
  v2 = &v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCC2248, "enable-agx3-prelegalizer-combiner", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC2248, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Should enable CSE in AGX3 Prelegalizer Combiner";
  v4.n128_u64[1] = 47;
  int v3 = 0;
  char v1 = 1;
  v2 = &v1;
  sub_1CD40E838((uint64_t)&unk_1EBCC2308, "enable-cse-in-agx3-prelegalizer-combiner", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC2308, &dword_1CB82C000);
}

void sub_1CBC39850(uint64_t a1)
{
}

uint64_t sub_1CBC39900(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC23C8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25FC978;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC23D0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBC39850;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCC23D0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBC399F8()
{
}

void sub_1CBC39A34(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  char v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    __n128 v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBC39AE8(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  __n128 v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CBC39B94(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBC39C4C(void *a1, uint64_t a2)
{
  v22[8] = *MEMORY[0x1E4F143B8];
  __n128 v4 = (uint64_t *)a1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::MachineLoopInfo::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::MachineLoopInfo::ID);
  uint64_t v9 = (uint64_t *)a1[1];
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_9:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::LiveIntervals::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  a1[31] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::LiveIntervals::ID);
  a1[32] = *(void *)(a2 + 40);
  a1[33] = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v13 = *(char **)(v8 + 272);
  uint64_t v14 = *(char **)(v8 + 280);
  unsigned int v20 = v22;
  uint64_t v21 = 0x800000000;
  sub_1CBAACC38((uint64_t)&v20, v13, v14);
  int v15 = *(uint64_t **)(v8 + 272);
  int v16 = *(uint64_t **)(v8 + 280);
  v18[0] = &unk_1F25FCA38;
  v18[1] = &v20;
  uint64_t v19 = v18;
  sub_1CD41C330(v15, v16, (uint64_t)v18);
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  if (v21)
  {
    LODWORD(v21) = v21 - 1;
    llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader();
  }
  if (v20 != v22) {
    free(v20);
  }
  return 0;
}

void sub_1CBC3A848()
{
}

void *sub_1CBC3A85C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FCA38;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC3A8A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FCA38;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC3A8D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v2 + 8 * v3) = *a2;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t sub_1CBC3A930(uint64_t *a1, uint64_t a2)
{
  v203[2] = *MEMORY[0x1E4F143B8];
  if (**(_WORD **)(a2 + 16) == 163)
  {
    uint64_t v4 = *(void *)(*a1 + 8);
    uint64_t v5 = *(void *)(v4 + 40);
    uint64_t v6 = *(void *)(v4 + 8);
    long long v7 = *(_OWORD *)(v6 + 1024);
    v164[0] = *(_OWORD *)(v6 + 1008);
    v164[1] = v7;
    uint64_t v8 = *(void *)(v6 + 1048);
    uint64_t v165 = *(void *)(v6 + 1040);
    uint64_t v166 = v8;
    uint64_t v9 = *(void *)(v6 + 1056);
    uint64_t v167 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v168 = *(_WORD *)(v6 + 1064);
    if (*(char *)(v6 + 1095) < 0)
    {
      sub_1CB8BDF7C((uint64_t)&v169, *(const void **)(v6 + 1072), *(void *)(v6 + 1080));
    }
    else
    {
      long long v169 = *(_OWORD *)(v6 + 1072);
      uint64_t v170 = *(void *)(v6 + 1088);
    }
    long long v171 = *(_OWORD *)(v6 + 1096);
    long long v172 = *(_OWORD *)(v6 + 1112);
    sub_1CB906B78((uint64_t)&v173, (uint64_t *)(v6 + 1128));
    if (*(char *)(v6 + 1311) < 0)
    {
      sub_1CB8BDF7C((uint64_t)&v174, *(const void **)(v6 + 1288), *(void *)(v6 + 1296));
    }
    else
    {
      long long v174 = *(_OWORD *)(v6 + 1288);
      uint64_t v175 = *(void *)(v6 + 1304);
    }
    BOOL v10 = DWORD2(v171) == 0;
    unsigned __int8 v11 = BYTE12(v164[0]);
    uint64_t v162 = 0;
    uint64_t v163 = 0;
    uint64_t v161 = 0;
    uint64_t v12 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v17 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) >= *(_DWORD *)(v5 + 432)) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = *(_DWORD **)(*(void *)(v5 + 424) + 8 * v17);
      }
      uint64_t v18 = *a1;
      *(void *)(v18 + 40) = *(void *)(a2 + 24);
      *(void *)(v18 + 48) = a2;
      int v15 = (uint64_t *)(*(void *)(v5 + 24) + 16 * v17 + 8);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = *a1;
      *(void *)(v14 + 40) = *(void *)(a2 + 24);
      *(void *)(v14 + 48) = a2;
      int v15 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
    }
    uint64_t v19 = *v15;
    if (v19)
    {
      if (*(unsigned char *)(v19 + 3) & 1) != 0 || (uint64_t v19 = *(void *)(v19 + 24)) != 0 && (*(unsigned char *)(v19 + 3))
      {
        uint64_t v20 = *(void *)(v19 + 8);
        if (v20)
        {
          if (**(_WORD **)(v20 + 16) == 163 && *(_DWORD *)(v20 + 40) == 3)
          {
            uint64_t v21 = *(void *)(v20 + 32);
            uint64_t v22 = *(unsigned int *)(v21 + 36);
            HIDWORD(v161) = *(_DWORD *)(v21 + 36);
            uint64_t v23 = *(unsigned int *)(v21 + 68);
            if ((v23 & 0x80000000) != 0) {
              unint64_t v24 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
            }
            else {
              unint64_t v24 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v23);
            }
            uint64_t v25 = *v24;
            if (v25
              && ((*(unsigned char *)(v25 + 3) & 1) != 0 || (uint64_t v25 = *(void *)(v25 + 24)) != 0 && (*(unsigned char *)(v25 + 3) & 1) != 0)
              && (uint64_t v26 = *(void *)(v25 + 8)) != 0
              && **(_WORD **)(v26 + 16) == 177
              && *(_DWORD *)(v26 + 40) == 2)
            {
              LODWORD(v23) = *(_DWORD *)(*(void *)(v26 + 32) + 36);
              v74 = &v161;
            }
            else
            {
              if ((v22 & 0x80000000) != 0) {
                unint64_t v27 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
              }
              else {
                unint64_t v27 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v22);
              }
              uint64_t v28 = *v27;
              if (!v28) {
                goto LABEL_32;
              }
              if ((*(unsigned char *)(v28 + 3) & 1) == 0)
              {
                uint64_t v28 = *(void *)(v28 + 24);
                if (!v28 || (*(unsigned char *)(v28 + 3) & 1) == 0) {
                  goto LABEL_32;
                }
              }
              uint64_t v29 = *(void *)(v28 + 8);
              if (!v29 || **(_WORD **)(v29 + 16) != 177 || *(_DWORD *)(v29 + 40) != 2) {
                goto LABEL_32;
              }
              LODWORD(v161) = *(_DWORD *)(*(void *)(v29 + 32) + 36);
              v74 = (uint64_t *)((char *)&v161 + 4);
            }
            *(_DWORD *)v74 = v23;
            if (HIDWORD(v161) == v161 && ((v11 & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x10) != 0)) {
              goto LABEL_117;
            }
          }
        }
      }
    }
LABEL_32:
    if ((v12 & 0x80000000) != 0) {
      int v30 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
    }
    else {
      int v30 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
    }
    uint64_t v31 = *v30;
    if (v31)
    {
      if (*(unsigned char *)(v31 + 3) & 1) != 0 || (uint64_t v31 = *(void *)(v31 + 24)) != 0 && (*(unsigned char *)(v31 + 3))
      {
        uint64_t v32 = *(void *)(v31 + 8);
        if (v32)
        {
          if (**(_WORD **)(v32 + 16) == 163 && *(_DWORD *)(v32 + 40) == 3)
          {
            uint64_t v33 = *(void *)(v32 + 32);
            uint64_t v34 = *(unsigned int *)(v33 + 36);
            if ((v34 & 0x80000000) != 0) {
              int v35 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
            }
            else {
              int v35 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v34);
            }
            uint64_t v36 = *v35;
            if (v36
              && ((*(unsigned char *)(v36 + 3) & 1) != 0 || (uint64_t v36 = *(void *)(v36 + 24)) != 0 && (*(unsigned char *)(v36 + 3) & 1) != 0)
              && (uint64_t v37 = *(void *)(v36 + 8)) != 0
              && **(_WORD **)(v37 + 16) == 177
              && *(_DWORD *)(v37 + 40) == 2)
            {
              HIDWORD(v161) = *(_DWORD *)(*(void *)(v37 + 32) + 36);
              uint64_t v75 = &v161;
              uint64_t v76 = 2;
            }
            else
            {
              LODWORD(v161) = *(_DWORD *)(v33 + 36);
              uint64_t v38 = *(unsigned int *)(v33 + 68);
              if ((v38 & 0x80000000) != 0) {
                BOOL v39 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8);
              }
              else {
                BOOL v39 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v38);
              }
              uint64_t v40 = *v39;
              if (!v40) {
                goto LABEL_51;
              }
              if ((*(unsigned char *)(v40 + 3) & 1) == 0)
              {
                uint64_t v40 = *(void *)(v40 + 24);
                if (!v40 || (*(unsigned char *)(v40 + 3) & 1) == 0) {
                  goto LABEL_51;
                }
              }
              uint64_t v41 = *(void *)(v40 + 8);
              if (!v41 || **(_WORD **)(v41 + 16) != 177 || *(_DWORD *)(v41 + 40) != 2) {
                goto LABEL_51;
              }
              uint64_t v33 = *(void *)(v41 + 32);
              uint64_t v75 = (uint64_t *)((char *)&v161 + 4);
              uint64_t v76 = 1;
            }
            *(_DWORD *)uint64_t v75 = *(_DWORD *)(v33 + 32 * v76 + 4);
            if (HIDWORD(v161) == v161 && ((v11 & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x10) != 0))
            {
LABEL_117:
              uint64_t v77 = *a1;
              uint64_t v16 = 1;
              LODWORD(v176) = v12;
              LODWORD(v177) = 1;
              sub_1CC7374CC(v77, (unint64_t *)&v176, 0.0);
LABEL_118:
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
LABEL_298:
              sub_1CB906D7C((uint64_t)v164);
              return v16;
            }
          }
        }
      }
    }
LABEL_51:
    if ((v12 & 0x80000000) != 0) {
      uint64_t v42 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v42 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
    }
    uint64_t v43 = *v42;
    if (!v43) {
      goto LABEL_70;
    }
    if ((*(unsigned char *)(v43 + 3) & 1) == 0)
    {
      uint64_t v43 = *(void *)(v43 + 24);
      if (!v43 || (*(unsigned char *)(v43 + 3) & 1) == 0) {
        goto LABEL_70;
      }
    }
    uint64_t v44 = *(void *)(v43 + 8);
    if (!v44 || **(_WORD **)(v44 + 16) != 163 || *(_DWORD *)(v44 + 40) != 3) {
      goto LABEL_70;
    }
    uint64_t v45 = *(void *)(v44 + 32);
    uint64_t v46 = *(unsigned int *)(v45 + 36);
    HIDWORD(v161) = *(_DWORD *)(v45 + 36);
    uint64_t v47 = *(unsigned int *)(v45 + 68);
    if ((v47 & 0x80000000) != 0) {
      int v48 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
    }
    else {
      int v48 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v47);
    }
    uint64_t v49 = *v48;
    if ((*(unsigned char *)(v49 + 3) & 1) == 0) {
      uint64_t v49 = *(void *)(v49 + 24);
    }
    uint64_t v50 = *(void *)(v49 + 8);
    if (**(_WORD **)(v50 + 16) == 121)
    {
      uint64_t v110 = *(void *)(*(void *)(v50 + 32) + 48);
      uint64_t v163 = v110;
      if (v110) {
        goto LABEL_193;
      }
    }
    else
    {
      uint64_t v163 = 0;
    }
    if ((v46 & 0x80000000) != 0) {
      int v51 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
    }
    else {
      int v51 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v46);
    }
    uint64_t v52 = *v51;
    if ((*(unsigned char *)(v52 + 3) & 1) == 0) {
      uint64_t v52 = *(void *)(v52 + 24);
    }
    uint64_t v53 = *(void *)(v52 + 8);
    if (**(_WORD **)(v53 + 16) != 121)
    {
      uint64_t v163 = 0;
      goto LABEL_70;
    }
    uint64_t v110 = *(void *)(*(void *)(v53 + 32) + 48);
    uint64_t v163 = v110;
    if (!v110)
    {
LABEL_70:
      if ((v12 & 0x80000000) != 0) {
        int v54 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
      }
      else {
        int v54 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
      }
      uint64_t v55 = *v54;
      if (!v55
        || (*(unsigned char *)(v55 + 3) & 1) == 0 && ((uint64_t v55 = *(void *)(v55 + 24)) == 0 || (*(unsigned char *)(v55 + 3) & 1) == 0)
        || (uint64_t v56 = *(void *)(v55 + 8)) == 0
        || **(_WORD **)(v56 + 16) != 163
        || *(_DWORD *)(v56 + 40) != 3)
      {
LABEL_89:
        long long v160 = 0uLL;
        if ((v11 & 1) == 0 && (~*(unsigned __int16 *)(a2 + 44) & 0x440) != 0) {
          goto LABEL_285;
        }
        uint64_t v176 = (_DWORD *)&v160 + 3;
        v177 = (char *)&v163;
        v178 = &v162;
        unsigned int v198 = v12;
        if (sub_1CBAC9108((uint64_t)&v176, v5, &v198))
        {
          int v65 = (const llvm::detail::DoubleAPFloat *)(v163 + 32);
          if (*(_UNKNOWN **)(v163 + 32) == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v190, v65);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v190, v65);
          }
          sub_1CBC3BFB0((uint64_t)&v198, (uint64_t)v13, (uint64_t)v189);
          if ((_UNKNOWN *)v190 == &unk_1CFB2E344)
          {
            sub_1CB845718(&v191);
          }
          else if ((*(_DWORD *)(v190 + 8) - 64) <= 0xFFFFFF7F && v191)
          {
            MEMORY[0x1D25D9CB0](v191, 0x1000C8000313F17);
          }
          int v66 = (const llvm::detail::DoubleAPFloat *)(v162 + 32);
          if (*(_UNKNOWN **)(v162 + 32) == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v187, v66);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v187, v66);
          }
          sub_1CBC3BFB0((uint64_t)&v192, (uint64_t)v13, (uint64_t)v186);
          if ((_UNKNOWN *)v187 == &unk_1CFB2E344)
          {
            sub_1CB845718(&v188);
          }
          else if ((*(_DWORD *)(v187 + 8) - 64) <= 0xFFFFFF7F && v188)
          {
            MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
          }
          if ((_UNKNOWN *)v199 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v184, (const llvm::detail::DoubleAPFloat *)&v199);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v184, (const llvm::detail::IEEEFloat *)&v199);
          }
          sub_1CB88A708((uint64_t)&v183, (uint64_t)&v192, 1);
          uint64_t v67 = *a1;
          uint64_t v176 = v13;
          LODWORD(v177) = 0;
          int v69 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v183, v68);
          uint64_t v70 = (*(uint64_t (**)(uint64_t, _DWORD **, const llvm::detail::DoubleAPFloat *))(*(void *)v67 + 24))(v67, &v176, v69);
          uint64_t v71 = *a1;
          v182[0] = v12;
          v182[2] = 1;
          LODWORD(v176) = HIDWORD(v160);
          LODWORD(v178) = 0;
          unsigned int v179 = (uint64_t *)v70;
          uint64_t v180 = v72;
          int v181 = 1;
          (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD **, uint64_t, uint64_t))(*(void *)v71 + 32))(v71, 163, v182, 1, &v176, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          if ((_UNKNOWN *)v184 == &unk_1CFB2E344)
          {
            sub_1CB845718(&v185);
          }
          else if ((*(_DWORD *)(v184 + 8) - 64) <= 0xFFFFFF7F && v185)
          {
            MEMORY[0x1D25D9CB0](v185, 0x1000C8000313F17);
          }
          uint64_t v73 = v193;
          if ((_UNKNOWN *)v193 == &unk_1CFB2E344)
          {
LABEL_340:
            sub_1CB845718(v194);
LABEL_135:
            uint64_t v88 = v199;
            if ((_UNKNOWN *)v199 != &unk_1CFB2E344)
            {
LABEL_136:
              if ((*(_DWORD *)(v88 + 8) - 64) > 0xFFFFFF7F) {
                goto LABEL_137;
              }
              uint64_t v140 = v200[0];
              if (!v200[0]) {
                goto LABEL_137;
              }
              goto LABEL_314;
            }
            unint64_t v157 = &v198;
            goto LABEL_318;
          }
LABEL_134:
          if ((*(_DWORD *)(v73 + 8) - 64) <= 0xFFFFFF7F && v194[0]) {
            MEMORY[0x1D25D9CB0](v194[0], 0x1000C8000313F17);
          }
          goto LABEL_135;
        }
        uint64_t v176 = (_DWORD *)&v160 + 3;
        v177 = (char *)&v163;
        v178 = (uint64_t *)&v160 + 1;
        unsigned int v198 = v12;
        if (sub_1CBAC951C((uint64_t)&v176, v5, &v198) && HIDWORD(v160) == DWORD2(v160))
        {
          uint64_t v78 = (const llvm::detail::DoubleAPFloat *)(v163 + 32);
          if (*(_UNKNOWN **)(v163 + 32) == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v199, v78);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v199, v78);
          }
          int v79 = (void *)v199;
          uint64_t v80 = "1.0";
          goto LABEL_129;
        }
        uint64_t v176 = (_DWORD *)&v160 + 3;
        v177 = (char *)&v160 + 8;
        v178 = (uint64_t *)((char *)&v160 + 4);
        unsigned int v179 = &v163;
        unsigned int v198 = v12;
        if (sub_1CBAC9878((uint64_t)&v176, v5, &v198)
          && __PAIR64__(HIDWORD(v160), HIDWORD(v160)) == *(void *)((char *)&v160 + 4))
        {
          unsigned int v81 = (const llvm::detail::DoubleAPFloat *)(v163 + 32);
          if (*(_UNKNOWN **)(v163 + 32) == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v199, v81);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v199, v81);
          }
          int v79 = (void *)v199;
          uint64_t v80 = "2.0";
LABEL_129:
          llvm::APFloat::APFloat((uint64_t)&v176, v79, (unsigned __int8 *)v80, 3uLL);
          if ((_UNKNOWN *)v199 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v193, (const llvm::detail::DoubleAPFloat *)&v199);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v193, (const llvm::detail::IEEEFloat *)&v199);
          }
          sub_1CB88A708((uint64_t)&v192, (uint64_t)&v176, 1);
          if (v177 == (char *)&unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v178);
          }
          else if ((*((_DWORD *)v177 + 2) - 64) <= 0xFFFFFF7F && v178)
          {
            MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
          }
          uint64_t v83 = *a1;
          uint64_t v176 = v13;
          LODWORD(v177) = 0;
          v84 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v192, v82);
          uint64_t v85 = (*(uint64_t (**)(uint64_t, _DWORD **, const llvm::detail::DoubleAPFloat *))(*(void *)v83 + 24))(v83, &v176, v84);
          uint64_t v86 = *a1;
          int v183 = v12;
          LODWORD(v184) = 1;
          LODWORD(v176) = HIDWORD(v160);
          LODWORD(v178) = 0;
          unsigned int v179 = (uint64_t *)v85;
          uint64_t v180 = v87;
          int v181 = 1;
          (*(void (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD **, uint64_t, uint64_t))(*(void *)v86 + 32))(v86, 165, &v183, 1, &v176, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          uint64_t v73 = v193;
          if ((_UNKNOWN *)v193 == &unk_1CFB2E344) {
            goto LABEL_340;
          }
          goto LABEL_134;
        }
        if ((v12 & 0x80000000) != 0) {
          int v89 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
        }
        else {
          int v89 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
        }
        uint64_t v90 = *v89;
        if (v90)
        {
          if (*(unsigned char *)(v90 + 3) & 1) != 0 || (uint64_t v90 = *(void *)(v90 + 24)) != 0 && (*(unsigned char *)(v90 + 3))
          {
            uint64_t v91 = *(void *)(v90 + 8);
            if (v91)
            {
              if (**(_WORD **)(v91 + 16) == 163 && *(_DWORD *)(v91 + 40) == 3)
              {
                uint64_t v92 = *(void *)(v91 + 32);
                uint64_t v93 = *(unsigned int *)(v92 + 36);
                if ((v93 & 0x80000000) != 0) {
                  v94 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v93 & 0x7FFFFFFF) + 8);
                }
                else {
                  v94 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v93);
                }
                uint64_t v95 = *v94;
                if (v95)
                {
                  if ((*(unsigned char *)(v95 + 3) & 1) != 0
                    || (uint64_t v95 = *(void *)(v95 + 24)) != 0 && (*(unsigned char *)(v95 + 3) & 1) != 0)
                  {
                    uint64_t v96 = *(void *)(v95 + 8);
                    if (v96)
                    {
                      if (**(_WORD **)(v96 + 16) == 163 && *(_DWORD *)(v96 + 40) == 3)
                      {
                        uint64_t v122 = *(void *)(v96 + 32);
                        int v123 = *(_DWORD *)(v122 + 36);
                        DWORD2(v160) = *(_DWORD *)(v122 + 68);
                        HIDWORD(v160) = v123;
                        v124 = (char *)&v160 + 4;
                        goto LABEL_206;
                      }
                    }
                  }
                }
                DWORD1(v160) = *(_DWORD *)(v92 + 36);
                uint64_t v97 = *(unsigned int *)(v92 + 68);
                if ((v97 & 0x80000000) != 0) {
                  unsigned int v98 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8);
                }
                else {
                  unsigned int v98 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v97);
                }
                uint64_t v99 = *v98;
                if (v99)
                {
                  if ((*(unsigned char *)(v99 + 3) & 1) != 0
                    || (uint64_t v99 = *(void *)(v99 + 24)) != 0 && (*(unsigned char *)(v99 + 3) & 1) != 0)
                  {
                    uint64_t v100 = *(void *)(v99 + 8);
                    if (v100)
                    {
                      if (**(_WORD **)(v100 + 16) == 163 && *(_DWORD *)(v100 + 40) == 3)
                      {
                        uint64_t v92 = *(void *)(v100 + 32);
                        int v123 = *(_DWORD *)(v92 + 36);
                        HIDWORD(v160) = v123;
                        v124 = (char *)&v160 + 8;
LABEL_206:
                        *(_DWORD *)v124 = *(_DWORD *)(v92 + 68);
                        if (v123 == DWORD2(v160) && v123 == DWORD1(v160))
                        {
                          if (v13 == (_DWORD *)129)
                          {
                            unint64_t v101 = &unk_1CFB2E2E0;
                          }
                          else if (v13 == (_DWORD *)513)
                          {
                            unint64_t v101 = &unk_1CFB2E31C;
                          }
                          else if (v13 == (_DWORD *)257)
                          {
                            unint64_t v101 = &unk_1CFB2E308;
                          }
                          else
                          {
                            unint64_t v101 = &unk_1CFB2E2F4;
                          }
                          uint64_t v126 = "3.0";
                          goto LABEL_223;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v176 = (_DWORD *)&v160 + 3;
        v177 = (char *)&v160 + 8;
        v178 = (uint64_t *)((char *)&v160 + 4);
        unsigned int v179 = (uint64_t *)&v160;
        unsigned int v198 = v12;
        if (sub_1CBAC9CCC(&v176, v5, &v198)
          && __PAIR64__(HIDWORD(v160), HIDWORD(v160)) == *(void *)((char *)&v160 + 4)
          && HIDWORD(v160) == v160)
        {
          if (v13 == (_DWORD *)129)
          {
            unint64_t v101 = &unk_1CFB2E2E0;
          }
          else if (v13 == (_DWORD *)513)
          {
            unint64_t v101 = &unk_1CFB2E31C;
          }
          else if (v13 == (_DWORD *)257)
          {
            unint64_t v101 = &unk_1CFB2E308;
          }
          else
          {
            unint64_t v101 = &unk_1CFB2E2F4;
          }
          uint64_t v126 = "4.0";
LABEL_223:
          llvm::APFloat::APFloat((uint64_t)&v198, v101, (unsigned __int8 *)v126, 3uLL);
          uint64_t v127 = *a1;
          uint64_t v176 = v13;
          LODWORD(v177) = 0;
          uint64_t v129 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v198, v128);
          uint64_t v130 = (*(uint64_t (**)(uint64_t, _DWORD **, const llvm::detail::DoubleAPFloat *))(*(void *)v127 + 24))(v127, &v176, v129);
          uint64_t v131 = *a1;
          LODWORD(v192) = v12;
          LODWORD(v193) = 1;
          LODWORD(v176) = HIDWORD(v160);
          LODWORD(v178) = 0;
          unsigned int v179 = (uint64_t *)v130;
          uint64_t v180 = v132;
          int v181 = 1;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD **, uint64_t, uint64_t))(*(void *)v131 + 32))(v131, 165, &v192, 1, &v176, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          uint64_t v88 = v199;
          if ((_UNKNOWN *)v199 != &unk_1CFB2E344) {
            goto LABEL_136;
          }
          uint64_t v133 = v200;
LABEL_319:
          sub_1CB845718(v133);
          goto LABEL_137;
        }
        if ((v12 & 0x80000000) != 0) {
          int v102 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
        }
        else {
          int v102 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v12);
        }
        uint64_t v103 = *v102;
        if (v103)
        {
          if ((*(unsigned char *)(v103 + 3) & 1) != 0
            || (uint64_t v103 = *(void *)(v103 + 24)) != 0 && (*(unsigned char *)(v103 + 3) & 1) != 0)
          {
            uint64_t v104 = *(void *)(v103 + 8);
            if (v104)
            {
              if (**(_WORD **)(v104 + 16) == 163 && *(_DWORD *)(v104 + 40) == 3)
              {
                uint64_t v105 = *(void *)(v104 + 32);
                int v106 = *(_DWORD *)(v105 + 36);
                if (v106 == *(_DWORD *)(v105 + 68))
                {
                  uint64_t v107 = *a1;
                  uint64_t v16 = 1;
                  unsigned int v198 = v12;
                  LODWORD(v199) = 1;
                  LODWORD(v176) = v106;
                  LODWORD(v178) = 0;
                  if (v106 < 0 && (uint64_t v108 = v106 & 0x7FFFFFFF, v108 < *(_DWORD *)(v5 + 432))) {
                    unint64_t v109 = *(void *)(*(void *)(v5 + 424) + 8 * v108);
                  }
                  else {
                    unint64_t v109 = 0;
                  }
                  unint64_t v192 = v109;
                  LODWORD(v193) = 0;
                  unsigned int v179 = (uint64_t *)sub_1CC7374CC(v107, &v192, 2.0);
                  uint64_t v180 = v121;
                  int v181 = 1;
                  (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t, _DWORD **, uint64_t, uint64_t))(*(void *)v107 + 32))(v107, 165, &v198, 1, &v176, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                  goto LABEL_118;
                }
              }
            }
          }
        }
LABEL_285:
        char v141 = v10 | v11;
        if (((v10 | v11) & 1) != 0 || (*(_WORD *)(a2 + 44) & 0x100) != 0)
        {
          uint64_t v142 = a2;
          uint64_t v143 = (uint64_t)v13;
          uint64_t v144 = *(void *)(v142 + 32);
          uint64_t v145 = (const llvm::DILocation *)*(unsigned int *)(v144 + 36);
          int v146 = (const llvm::DILocation *)*(unsigned int *)(v144 + 68);
          unint64_t v159 = (unsigned __int16 *)v142;
          v147 = (unsigned __int8 **)(v142 + 56);
          char v148 = 1;
          do
          {
            BOOL v149 = v146;
            int v146 = v145;
            char v150 = v148;
            uint64_t v151 = sub_1CBC3C080(v143, v145, v149, v5, (llvm::DILocation **)*a1, v147, v141 & 1, v159[22], 1);
            if (v151)
            {
              uint64_t v155 = (llvm::DILocation **)*a1;
              uint64_t v16 = 1;
              unsigned int v198 = v12;
              goto LABEL_297;
            }
            char v148 = 0;
            uint64_t v145 = v149;
          }
          while ((v150 & 1) != 0);
          unsigned int v158 = v12;
          char v152 = 1;
          while (1)
          {
            v153 = v149;
            char v154 = v152;
            uint64_t v151 = sub_1CBC3C080(v143, v149, v146, v5, (llvm::DILocation **)*a1, v147, v141 & 1, v159[22], 0);
            if (v151) {
              break;
            }
            char v152 = 0;
            uint64_t v16 = 0;
            BOOL v149 = v146;
            int v146 = v153;
            if ((v154 & 1) == 0) {
              goto LABEL_298;
            }
          }
          uint64_t v155 = (llvm::DILocation **)*a1;
          uint64_t v16 = 1;
          unsigned int v198 = v158;
LABEL_297:
          LODWORD(v199) = 1;
          LODWORD(v176) = *(_DWORD *)(*(void *)(v151 + 32) + 4);
          LODWORD(v178) = 0;
          (*((void (**)(llvm::DILocation **, uint64_t, unsigned int *, uint64_t, _DWORD **, uint64_t, void))*v155
           + 4))(v155, 19, &v198, 1, &v176, 1, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v159);
        }
        else
        {
          uint64_t v16 = 0;
        }
        goto LABEL_298;
      }
      uint64_t v57 = *(void *)(v56 + 32);
      uint64_t v58 = *(unsigned int *)(v57 + 36);
      if ((v58 & 0x80000000) != 0) {
        unint64_t v59 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v59 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v58);
      }
      uint64_t v60 = *v59;
      if ((*(unsigned char *)(v60 + 3) & 1) == 0) {
        uint64_t v60 = *(void *)(v60 + 24);
      }
      uint64_t v61 = *(void *)(v60 + 8);
      if (**(_WORD **)(v61 + 16) == 121)
      {
        uint64_t v111 = *(void *)(*(void *)(v61 + 32) + 48);
        uint64_t v163 = v111;
        if (v111)
        {
          uint64_t v112 = *(unsigned int *)(v57 + 68);
          if ((v112 & 0x80000000) != 0) {
            uint8x8_t v113 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
          }
          else {
            uint8x8_t v113 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v112);
          }
          uint64_t v114 = *v113;
          if ((*(unsigned char *)(v114 + 3) & 1) == 0) {
            uint64_t v114 = *(void *)(v114 + 24);
          }
          uint64_t v115 = *(void *)(v114 + 8);
          if (**(_WORD **)(v115 + 16) == 121)
          {
            uint64_t v162 = *(void *)(*(void *)(v115 + 32) + 48);
            if (v162) {
              goto LABEL_230;
            }
          }
          else
          {
            uint64_t v162 = 0;
          }
        }
      }
      else
      {
        uint64_t v163 = 0;
      }
      if ((v58 & 0x80000000) != 0) {
        int v62 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8);
      }
      else {
        int v62 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v58);
      }
      uint64_t v63 = *v62;
      if ((*(unsigned char *)(v63 + 3) & 1) == 0) {
        uint64_t v63 = *(void *)(v63 + 24);
      }
      uint64_t v64 = *(void *)(v63 + 8);
      if (**(_WORD **)(v64 + 16) != 121)
      {
        uint64_t v162 = 0;
        goto LABEL_89;
      }
      uint64_t v162 = *(void *)(*(void *)(v64 + 32) + 48);
      if (!v162) {
        goto LABEL_89;
      }
      uint64_t v116 = *(unsigned int *)(v57 + 68);
      if ((v116 & 0x80000000) != 0) {
        uint64_t v117 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v116 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v117 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v116);
      }
      uint64_t v118 = *v117;
      if ((*(unsigned char *)(v118 + 3) & 1) == 0) {
        uint64_t v118 = *(void *)(v118 + 24);
      }
      uint64_t v119 = *(void *)(v118 + 8);
      if (**(_WORD **)(v119 + 16) != 121)
      {
        uint64_t v163 = 0;
        goto LABEL_89;
      }
      uint64_t v111 = *(void *)(*(void *)(v119 + 32) + 48);
      uint64_t v163 = v111;
      if (!v111) {
        goto LABEL_89;
      }
LABEL_230:
      uint64_t v135 = *(void **)(v111 + 32);
      uint64_t v134 = (const llvm::detail::DoubleAPFloat *)(v111 + 32);
      if (v135 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v202, v134);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v202, v134);
      }
      sub_1CBC3BFB0((uint64_t)&v176, (uint64_t)v13, (uint64_t)v201);
      if ((_UNKNOWN *)v202 == &unk_1CFB2E344)
      {
        sub_1CB845718(v203);
      }
      else if ((*(_DWORD *)(v202 + 8) - 64) <= 0xFFFFFF7F && v203[0])
      {
        MEMORY[0x1D25D9CB0](v203[0], 0x1000C8000313F17);
      }
      uint64_t v136 = (const llvm::detail::DoubleAPFloat *)(v162 + 32);
      if (*(_UNKNOWN **)(v162 + 32) == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v196, v136);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v196, v136);
      }
      sub_1CBC3BFB0((uint64_t)&v198, (uint64_t)v13, (uint64_t)v195);
      if ((_UNKNOWN *)v196 == &unk_1CFB2E344)
      {
        sub_1CB845718(&v197);
      }
      else if ((*(_DWORD *)(v196 + 8) - 64) <= 0xFFFFFF7F && v197)
      {
        MEMORY[0x1D25D9CB0](v197, 0x1000C8000313F17);
      }
      if (v177 == (char *)&unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v193, (const llvm::detail::DoubleAPFloat *)&v177);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v193, (const llvm::detail::IEEEFloat *)&v177);
      }
      sub_1CB88A708((uint64_t)&v192, (uint64_t)&v198, 1);
      v137 = (llvm::DILocation **)*a1;
      int v183 = v12;
      LODWORD(v184) = 1;
      v139 = llvm::ConstantFP::get(***(llvm::ConstantFP ****)v4, (llvm::LLVMContext *)&v192, v138);
      (*((void (**)(llvm::DILocation **, int *, const llvm::detail::DoubleAPFloat *))*v137 + 3))(v137, &v183, v139);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      if ((_UNKNOWN *)v193 == &unk_1CFB2E344)
      {
        sub_1CB845718(v194);
      }
      else if ((*(_DWORD *)(v193 + 8) - 64) <= 0xFFFFFF7F && v194[0])
      {
        MEMORY[0x1D25D9CB0](v194[0], 0x1000C8000313F17);
      }
      if ((_UNKNOWN *)v199 == &unk_1CFB2E344)
      {
        sub_1CB845718(v200);
      }
      else if ((*(_DWORD *)(v199 + 8) - 64) <= 0xFFFFFF7F && v200[0])
      {
        MEMORY[0x1D25D9CB0](v200[0], 0x1000C8000313F17);
      }
      if (v177 != (char *)&unk_1CFB2E344)
      {
        if ((*((_DWORD *)v177 + 2) - 64) > 0xFFFFFF7F) {
          goto LABEL_137;
        }
        uint64_t v140 = (uint64_t)v178;
        if (!v178) {
          goto LABEL_137;
        }
LABEL_314:
        MEMORY[0x1D25D9CB0](v140, 0x1000C8000313F17);
        goto LABEL_137;
      }
      unint64_t v157 = (unsigned int *)&v176;
LABEL_318:
      uint64_t v133 = (uint64_t *)(v157 + 4);
      goto LABEL_319;
    }
    HIDWORD(v161) = v47;
    LODWORD(v46) = v47;
LABEL_193:
    if (*(_UNKNOWN **)(v110 + 32) == &unk_1CFB2E344) {
      char v120 = *(unsigned char *)(*(void *)(v110 + 40) + 28);
    }
    else {
      char v120 = *(unsigned char *)(v110 + 52);
    }
    if ((v120 & 7) == 3 && (v120 & 8 | v11 & 1 || (*(_WORD *)(a2 + 44) & 0x40) != 0))
    {
      sub_1CBA0A7C8((void *)v5, (llvm::MachineInstr *)a2, v46, a1[2]);
LABEL_137:
      uint64_t v16 = 1;
      goto LABEL_298;
    }
    goto LABEL_70;
  }
  return 0;
}

uint64_t sub_1CBC3BFB0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = &unk_1CFB2E31C;
  uint64_t v6 = &unk_1CFB2E2F4;
  if (a2 == 257) {
    uint64_t v6 = &unk_1CFB2E308;
  }
  if (a2 != 513) {
    uint64_t v5 = v6;
  }
  if (a2 == 129) {
    long long v7 = &unk_1CFB2E2E0;
  }
  else {
    long long v7 = v5;
  }
  if (v7 != *(void **)(a3 + 8)
    && (result = llvm::APFloat::convert(a3, v7, 1, &v10), long long v7 = *(void **)(a3 + 8), v7 == &unk_1CFB2E344))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = 0;
    *(void *)(v4 + 8) = &unk_1CFB2E344;
    *(void *)(v4 + 16) = v9;
  }
  else
  {
    uint64_t v8 = *(void *)(a3 + 16);
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v8;
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(a3 + 24);
    *(unsigned char *)(v4 + 28) = *(unsigned char *)(v4 + 28) & 0xF0 | *(unsigned char *)(a3 + 28) & 0xF;
  }
  *(void *)(a3 + 8) = &unk_1CFB2E394;
  return result;
}

uint64_t sub_1CBC3C080(uint64_t a1, unsigned int a2, const llvm::DILocation *a3, uint64_t a4, llvm::DILocation **a5, unsigned __int8 **a6, int a7, uint64_t a8, char a9)
{
  int v13 = (int)a3;
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  if (a9)
  {
    if ((a2 & 0x80000000) != 0) {
      int v15 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
    }
    else {
      int v15 = (uint64_t *)(*(void *)(a4 + 272) + 8 * a2);
    }
    uint64_t v16 = *v15;
    if (!v16) {
      return 0;
    }
    while ((*(unsigned char *)(v16 + 3) & 1) != 0)
    {
      uint64_t v16 = *(void *)(v16 + 24);
      if (!v16) {
        return 0;
      }
    }
    while (1)
    {
      uint64_t v16 = *(void *)(v16 + 24);
      if (!v16) {
        break;
      }
      if ((*(unsigned char *)(v16 + 3) & 1) == 0) {
        return 0;
      }
    }
  }
  uint64_t v17 = a5 + 4;
  if (a5 + 4 != (llvm::DILocation **)a6)
  {
    uint64_t v18 = *v17;
    if (!*v17) {
      goto LABEL_12;
    }
    int v37 = *(unsigned __int8 *)v18;
    if ((v37 - 4) > 0x1E)
    {
      if ((v37 - 3) >= 0xFFFFFFFE) {
        uint64_t v42 = *v17;
      }
      else {
        uint64_t v42 = 0;
      }
      if ((v37 - 3) < 0xFFFFFFFE)
      {
        if (v37 == 3) {
          *((void *)v18 + 1) = 0;
        }
        goto LABEL_12;
      }
      uint64_t v40 = a8;
      uint64_t v41 = a1;
      unint64_t v39 = (unint64_t)v42 + 8;
    }
    else
    {
      if ((*((unsigned char *)v18 + 1) & 0x7F) != 2 && !*((_DWORD *)v18 + 3)
        || (uint64_t v38 = *((void *)v18 + 2), (v38 & 4) == 0)
        || (unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
LABEL_12:
        uint64_t v19 = *a6;
        *uint64_t v17 = (llvm::DILocation *)*a6;
        if (v19)
        {
          uint64_t v35 = a1;
          uint64_t v36 = a8;
          llvm::MetadataTracking::track((uint64_t)(a5 + 4), v19, 2);
          a8 = v36;
          a1 = v35;
        }
        goto LABEL_14;
      }
      uint64_t v40 = a8;
      uint64_t v41 = a1;
    }
    v123[0] = a5 + 4;
    sub_1CC5FA668(v39 + 16, v123);
    a1 = v41;
    a8 = v40;
    goto LABEL_12;
  }
LABEL_14:
  unint64_t v20 = a2;
  if ((a2 & 0x80000000) != 0) {
    uint64_t v21 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v21 = (uint64_t *)(*(void *)(a4 + 272) + 8 * a2);
  }
  uint64_t v22 = *v21;
  if (!v22
    || (*(unsigned char *)(v22 + 3) & 1) == 0 && ((uint64_t v22 = *(void *)(v22 + 24)) == 0 || (*(unsigned char *)(v22 + 3) & 1) == 0)
    || (uint64_t v23 = *(void *)(v22 + 8)) == 0
    || **(_WORD **)(v23 + 16) != 177
    || *(_DWORD *)(v23 + 40) != 2)
  {
    int v34 = 0;
    goto LABEL_89;
  }
  uint64_t v24 = a1;
  unint64_t v20 = *(unsigned int *)(*(void *)(v23 + 32) + 36);
  if (a9)
  {
    if ((v20 & 0x80000000) != 0) {
      uint64_t v25 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v25 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v20);
    }
    uint64_t v26 = *v25;
    if (!v26) {
      return 0;
    }
    while ((*(unsigned char *)(v26 + 3) & 1) != 0)
    {
      uint64_t v26 = *(void *)(v26 + 24);
      if (!v26) {
        return 0;
      }
    }
    uint64_t result = 0;
    while (1)
    {
      uint64_t v26 = *(void *)(v26 + 24);
      if (!v26) {
        break;
      }
      if ((*(unsigned char *)(v26 + 3) & 1) == 0) {
        return result;
      }
    }
  }
  if ((v20 & 0x80000000) != 0) {
    uint64_t v28 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v28 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v20);
  }
  uint64_t v29 = *v28;
  uint64_t v30 = a8;
  if ((*(unsigned char *)(v29 + 3) & 1) == 0) {
    uint64_t v29 = *(void *)(v29 + 24);
  }
  MergedLocation = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*v17, *(const llvm::DILocation **)(*(void *)(v29 + 8) + 56), a3);
  uint64_t v129 = MergedLocation;
  if (MergedLocation) {
    llvm::MetadataTracking::track((uint64_t)&v129, MergedLocation, 2);
  }
  if (&v129 == (unsigned __int8 **)v17) {
    goto LABEL_57;
  }
  uint64_t v32 = *v17;
  a1 = v24;
  a8 = v30;
  if (*v17)
  {
    int v46 = *(unsigned __int8 *)v32;
    if ((v46 - 4) > 0x1E)
    {
      if ((v46 - 3) >= 0xFFFFFFFE) {
        uint64_t v49 = *v17;
      }
      else {
        uint64_t v49 = 0;
      }
      if ((v46 - 3) < 0xFFFFFFFE)
      {
        if (v46 == 3) {
          *((void *)v32 + 1) = 0;
        }
        goto LABEL_40;
      }
      unint64_t v48 = (unint64_t)v49 + 8;
    }
    else
    {
      if ((*((unsigned char *)v32 + 1) & 0x7F) != 2 && !*((_DWORD *)v32 + 3)) {
        goto LABEL_40;
      }
      uint64_t v47 = *((void *)v32 + 2);
      if ((v47 & 4) == 0) {
        goto LABEL_40;
      }
      unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFF8;
      if (!v48) {
        goto LABEL_40;
      }
    }
    v123[0] = a5 + 4;
    sub_1CC5FA668(v48 + 16, v123);
    a1 = v24;
    a8 = v30;
  }
LABEL_40:
  uint64_t v33 = v129;
  *uint64_t v17 = (llvm::DILocation *)v129;
  if (!v33) {
    goto LABEL_41;
  }
  uint64_t v30 = a8;
  llvm::MetadataTracking::track((uint64_t)(a5 + 4), v33, 2);
LABEL_57:
  a1 = v24;
  a8 = v30;
  if (v129)
  {
    int v43 = *v129;
    if ((v43 - 4) > 0x1E)
    {
      if ((v43 - 3) >= 0xFFFFFFFE) {
        uint64_t v50 = v129;
      }
      else {
        uint64_t v50 = 0;
      }
      if ((v43 - 3) < 0xFFFFFFFE)
      {
        if (v43 == 3) {
          *((void *)v129 + 1) = 0;
        }
        goto LABEL_41;
      }
      unint64_t v45 = (unint64_t)(v50 + 8);
    }
    else
    {
      if ((v129[1] & 0x7F) != 2 && !*((_DWORD *)v129 + 3)) {
        goto LABEL_41;
      }
      uint64_t v44 = *((void *)v129 + 2);
      if ((v44 & 4) == 0) {
        goto LABEL_41;
      }
      unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFF8;
      if (!v45) {
        goto LABEL_41;
      }
    }
    v123[0] = &v129;
    sub_1CC5FA668(v45 + 16, v123);
    a1 = v24;
    a8 = v30;
  }
LABEL_41:
  int v34 = 1;
LABEL_89:
  if ((~a8 & 0x7C0) == 0 || a7)
  {
    while (1)
    {
      if ((v20 & 0x80000000) != 0) {
        int v68 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
      }
      else {
        int v68 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v20);
      }
      uint64_t v69 = *v68;
      if (!v69
        || (*(unsigned char *)(v69 + 3) & 1) == 0 && ((uint64_t v69 = *(void *)(v69 + 24)) == 0 || (*(unsigned char *)(v69 + 3) & 1) == 0)
        || (uint64_t v70 = *(void *)(v69 + 8)) == 0
        || **(_WORD **)(v70 + 16) != 179
        || *(_DWORD *)(v70 + 40) != 2)
      {
        uint64_t v71 = (uint64_t *)((v20 & 0x80000000) != 0
                        ? *(void *)(a4 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8
                        : *(void *)(a4 + 272) + 8 * v20);
        uint64_t v72 = *v71;
        if (!v72) {
          break;
        }
        if ((*(unsigned char *)(v72 + 3) & 1) == 0)
        {
          uint64_t v72 = *(void *)(v72 + 24);
          if (!v72 || (*(unsigned char *)(v72 + 3) & 1) == 0) {
            break;
          }
        }
        uint64_t v70 = *(void *)(v72 + 8);
        if (!v70 || **(_WORD **)(v70 + 16) != 178 || *(_DWORD *)(v70 + 40) != 2) {
          break;
        }
      }
      uint64_t v118 = a1;
      unint64_t v20 = *(unsigned int *)(*(void *)(v70 + 32) + 36);
      if (a9)
      {
        if ((v20 & 0x80000000) != 0) {
          uint64_t v73 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v73 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v20);
        }
        uint64_t v74 = *v73;
        if (!v74) {
          return 0;
        }
        while ((*(unsigned char *)(v74 + 3) & 1) != 0)
        {
          uint64_t v74 = *(void *)(v74 + 24);
          if (!v74) {
            return 0;
          }
        }
        while (1)
        {
          uint64_t v74 = *(void *)(v74 + 24);
          if (!v74) {
            break;
          }
          uint64_t result = 0;
          if ((*(unsigned char *)(v74 + 3) & 1) == 0) {
            return result;
          }
        }
      }
      if ((v20 & 0x80000000) != 0) {
        uint64_t v75 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v75 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v20);
      }
      int v122 = v34;
      uint64_t v76 = *v75;
      uint64_t v77 = a8;
      if ((*(unsigned char *)(v76 + 3) & 1) == 0) {
        uint64_t v76 = *(void *)(v76 + 24);
      }
      uint64_t v78 = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*v17, *(const llvm::DILocation **)(*(void *)(v76 + 8) + 56), a3);
      uint64_t v129 = v78;
      if (v78) {
        llvm::MetadataTracking::track((uint64_t)&v129, v78, 2);
      }
      if (&v129 == (unsigned __int8 **)v17) {
        goto LABEL_159;
      }
      int v79 = *v17;
      a1 = v118;
      a8 = v77;
      int v34 = v122;
      if (*v17)
      {
        int v85 = *(unsigned __int8 *)v79;
        if ((v85 - 4) > 0x1E)
        {
          if ((v85 - 3) >= 0xFFFFFFFE) {
            int v89 = *v17;
          }
          else {
            int v89 = 0;
          }
          if ((v85 - 3) < 0xFFFFFFFE)
          {
            int v34 = v122;
            if (v85 == 3) {
              *((void *)v79 + 1) = 0;
            }
            goto LABEL_157;
          }
          uint64_t v88 = a8;
          unint64_t v87 = (unint64_t)v89 + 8;
        }
        else
        {
          if ((*((unsigned char *)v79 + 1) & 0x7F) != 2 && !*((_DWORD *)v79 + 3)) {
            goto LABEL_157;
          }
          uint64_t v86 = *((void *)v79 + 2);
          if ((v86 & 4) == 0) {
            goto LABEL_157;
          }
          unint64_t v87 = v86 & 0xFFFFFFFFFFFFFFF8;
          if (!v87) {
            goto LABEL_157;
          }
          uint64_t v88 = a8;
        }
        v123[0] = a5 + 4;
        sub_1CC5FA668(v87 + 16, v123);
        a1 = v118;
        a8 = v88;
        int v34 = v122;
      }
LABEL_157:
      uint64_t v80 = v129;
      *uint64_t v17 = (llvm::DILocation *)v129;
      if (v80)
      {
        uint64_t v77 = a8;
        llvm::MetadataTracking::track((uint64_t)(a5 + 4), v80, 2);
LABEL_159:
        a1 = v118;
        a8 = v77;
        int v34 = v122;
        if (v129)
        {
          int v81 = *v129;
          if ((v81 - 4) > 0x1E)
          {
            uint64_t v84 = a8;
            if ((v81 - 3) >= 0xFFFFFFFE) {
              uint64_t v90 = v129;
            }
            else {
              uint64_t v90 = 0;
            }
            if ((v81 - 3) < 0xFFFFFFFE)
            {
              a1 = v118;
              int v34 = v122;
              if (v81 == 3) {
                *((void *)v129 + 1) = 0;
              }
            }
            else
            {
              unint64_t v83 = (unint64_t)(v90 + 8);
LABEL_183:
              v123[0] = &v129;
              sub_1CC5FA668(v83 + 16, v123);
              a1 = v118;
              a8 = v84;
              int v34 = v122;
            }
          }
          else if ((v129[1] & 0x7F) == 2 || *((_DWORD *)v129 + 3))
          {
            uint64_t v82 = *((void *)v129 + 2);
            if ((v82 & 4) != 0)
            {
              unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
              if (v83)
              {
                uint64_t v84 = a8;
                goto LABEL_183;
              }
            }
          }
        }
      }
    }
  }
  if ((v20 & 0x80000000) != 0
    && (v20 & 0x7FFFFFFF) < *(unsigned int *)(a4 + 432)
    && *(void *)(*(void *)(a4 + 424) + 8 * (v20 & 0x7FFFFFFF)) == 257
    || v13 < 0
    && (v13 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a4 + 432)
    && *(void *)(*(void *)(a4 + 424) + 8 * (v13 & 0x7FFFFFFF)) == 257)
  {
    uint64_t v51 = 257;
    BOOL v52 = a1 == 257;
    if (a1 == 257 || a9) {
      goto LABEL_101;
    }
    return 0;
  }
  BOOL v52 = 1;
  uint64_t v51 = a1;
LABEL_101:
  if (v20 >> 31) {
    uint64_t v53 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v53 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v20);
  }
  uint64_t v54 = *v53;
  if ((*(unsigned char *)(v54 + 3) & 1) == 0) {
    uint64_t v54 = *(void *)(v54 + 24);
  }
  uint64_t v55 = *(void *)(v54 + 8);
  if (**(_WORD **)(v55 + 16) != 165 || (a7 & 1) == 0 && (*(_WORD *)(v55 + 44) & 0x100) == 0) {
    return 0;
  }
  BOOL v120 = v52;
  unsigned int v121 = a8;
  uint64_t v117 = (unsigned __int8 *)a1;
  if (!sub_1CBC53DA8(v20, a4)) {
    return 0;
  }
  if ((v20 & 0x80000000) != 0) {
    uint64_t v57 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v57 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v20);
  }
  uint64_t v58 = *v57;
  if (v58)
  {
    while ((*(unsigned char *)(v58 + 3) & 1) != 0)
    {
      uint64_t v58 = *(void *)(v58 + 24);
      if (!v58) {
        goto LABEL_114;
      }
    }
    do
    {
      uint64_t v58 = *(void *)(v58 + 24);
      BOOL v59 = v58 == 0;
    }
    while (v58 && (*(unsigned char *)(v58 + 3) & 1) != 0);
  }
  else
  {
LABEL_114:
    BOOL v59 = 0;
  }
  uint64_t v60 = *(void *)(v55 + 32);
  int v61 = *(_DWORD *)(v60 + 36);
  int v119 = *(_DWORD *)(v60 + 68);
  int v62 = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*v17, *(const llvm::DILocation **)(v55 + 56), v56);
  uint64_t v129 = v62;
  if (v62) {
    llvm::MetadataTracking::track((uint64_t)&v129, v62, 2);
  }
  if (&v129 == (unsigned __int8 **)v17) {
    goto LABEL_227;
  }
  uint64_t v63 = *v17;
  unsigned int v64 = v121;
  if (*v17)
  {
    int v108 = *(unsigned __int8 *)v63;
    if ((v108 - 4) > 0x1E)
    {
      if ((v108 - 3) >= 0xFFFFFFFE) {
        uint64_t v114 = *v17;
      }
      else {
        uint64_t v114 = 0;
      }
      if ((v108 - 3) < 0xFFFFFFFE)
      {
        if (v108 == 3) {
          *((void *)v63 + 1) = 0;
        }
        goto LABEL_121;
      }
      unint64_t v110 = (unint64_t)v114 + 8;
    }
    else
    {
      if ((*((unsigned char *)v63 + 1) & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
        goto LABEL_121;
      }
      uint64_t v109 = *((void *)v63 + 2);
      if ((v109 & 4) == 0) {
        goto LABEL_121;
      }
      unint64_t v110 = v109 & 0xFFFFFFFFFFFFFFF8;
      if (!v110) {
        goto LABEL_121;
      }
    }
    v123[0] = a5 + 4;
    sub_1CC5FA668(v110 + 16, v123);
    unsigned int v64 = v121;
  }
LABEL_121:
  int v65 = v129;
  *uint64_t v17 = (llvm::DILocation *)v129;
  if (!v65) {
    goto LABEL_122;
  }
  llvm::MetadataTracking::track((uint64_t)(a5 + 4), v65, 2);
LABEL_227:
  unsigned int v64 = v121;
  if (!v129) {
    goto LABEL_122;
  }
  int v105 = *v129;
  if ((v105 - 4) <= 0x1E)
  {
    if ((v129[1] & 0x7F) != 2 && !*((_DWORD *)v129 + 3)) {
      goto LABEL_122;
    }
    uint64_t v106 = *((void *)v129 + 2);
    if ((v106 & 4) == 0) {
      goto LABEL_122;
    }
    unint64_t v107 = v106 & 0xFFFFFFFFFFFFFFF8;
    if (!v107) {
      goto LABEL_122;
    }
    goto LABEL_257;
  }
  if ((v105 - 3) >= 0xFFFFFFFE) {
    uint64_t v115 = v129;
  }
  else {
    uint64_t v115 = 0;
  }
  if ((v105 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v107 = (unint64_t)(v115 + 8);
LABEL_257:
    v123[0] = &v129;
    sub_1CC5FA668(v107 + 16, v123);
    unsigned int v64 = v121;
    goto LABEL_122;
  }
  if (v105 == 3) {
    *((void *)v129 + 1) = 0;
  }
LABEL_122:
  int v66 = v34;
  if (v61 < 0 && (v61 & 0x7FFFFFFFu) < *(_DWORD *)(a4 + 432)) {
    uint64_t v67 = *(unsigned __int8 **)(*(void *)(a4 + 424) + 8 * (v61 & 0x7FFFFFFF));
  }
  else {
    uint64_t v67 = 0;
  }
  if (v119 < 0 && (v119 & 0x7FFFFFFFu) < *(_DWORD *)(a4 + 432)) {
    uint64_t v91 = *(void *)(*(void *)(a4 + 424) + 8 * (v119 & 0x7FFFFFFF));
  }
  else {
    uint64_t v91 = 0;
  }
  if (v66)
  {
    uint64_t v129 = v67;
    int v130 = 0;
    LODWORD(v123[0]) = v61;
    int v124 = 0;
    (*((void (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, uint64_t))*a5
     + 4))(a5, 177, &v129, 1, v123, 1, v64 | 0x100000000);
    int v61 = *(_DWORD *)(*(void *)(v92 + 32) + 4);
  }
  if (v67 != (unsigned __int8 *)v51)
  {
    uint64_t v129 = (unsigned __int8 *)v51;
    int v130 = 0;
    LODWORD(v123[0]) = v61;
    int v124 = 0;
    (*((void (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, void))*a5
     + 4))(a5, 178, &v129, 1, v123, 1, 0);
    int v61 = *(_DWORD *)(*(void *)(v93 + 32) + 4);
  }
  if (v91 == v51)
  {
    int v94 = v119;
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_215;
    }
  }
  else
  {
    uint64_t v129 = (unsigned __int8 *)v51;
    int v130 = 0;
    LODWORD(v123[0]) = v119;
    int v124 = 0;
    (*((void (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, void))*a5
     + 4))(a5, 178, &v129, 1, v123, 1, 0);
    int v94 = *(_DWORD *)(*(void *)(v95 + 32) + 4);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_215;
    }
  }
  if ((v13 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a4 + 432))
  {
    uint64_t v96 = *(void *)(*(void *)(a4 + 424) + 8 * (v13 & 0x7FFFFFFF));
    goto LABEL_216;
  }
LABEL_215:
  uint64_t v96 = 0;
LABEL_216:
  if (v96 != v51)
  {
    uint64_t v129 = (unsigned __int8 *)v51;
    int v130 = 0;
    LODWORD(v123[0]) = v13;
    int v124 = 0;
    (*((void (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, void))*a5
     + 4))(a5, 178, &v129, 1, v123, 1, 0);
    int v13 = *(_DWORD *)(*(void *)(v97 + 32) + 4);
  }
  unsigned int v98 = v121;
  char v99 = !v59;
  if (v17 == (llvm::DILocation **)a6) {
    char v99 = 1;
  }
  if (v99) {
    goto LABEL_224;
  }
  uint64_t v100 = *v17;
  if (*v17)
  {
    int v111 = *(unsigned __int8 *)v100;
    if ((v111 - 4) > 0x1E)
    {
      if ((v111 - 3) >= 0xFFFFFFFE) {
        uint64_t v116 = *v17;
      }
      else {
        uint64_t v116 = 0;
      }
      if ((v111 - 3) < 0xFFFFFFFE)
      {
        if (v111 == 3) {
          *((void *)v100 + 1) = 0;
        }
        goto LABEL_222;
      }
      unint64_t v113 = (unint64_t)v116 + 8;
    }
    else
    {
      if ((*((unsigned char *)v100 + 1) & 0x7F) != 2 && !*((_DWORD *)v100 + 3)) {
        goto LABEL_222;
      }
      uint64_t v112 = *((void *)v100 + 2);
      if ((v112 & 4) == 0) {
        goto LABEL_222;
      }
      unint64_t v113 = v112 & 0xFFFFFFFFFFFFFFF8;
      if (!v113) {
        goto LABEL_222;
      }
    }
    v123[0] = a5 + 4;
    sub_1CC5FA668(v113 + 16, v123);
    unsigned int v98 = v121;
  }
LABEL_222:
  unint64_t v101 = *a6;
  *uint64_t v17 = (llvm::DILocation *)*a6;
  if (v101)
  {
    llvm::MetadataTracking::track((uint64_t)(a5 + 4), v101, 2);
    unsigned int v98 = v121;
  }
LABEL_224:
  uint64_t v129 = (unsigned __int8 *)v51;
  int v130 = 0;
  LODWORD(v123[0]) = v61;
  int v124 = 0;
  int v125 = v94;
  int v126 = 0;
  int v127 = v13;
  int v128 = 0;
  uint64_t v103 = (*((uint64_t (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, uint64_t))*a5
          + 4))(a5, 166, &v129, 1, v123, 3, v98 | 0x100000000);
  uint64_t result = v102;
  if (!v120)
  {
    uint64_t v129 = v117;
    int v130 = 0;
    v123[0] = v103;
    v123[1] = v102;
    int v124 = 1;
    (*((void (**)(llvm::DILocation **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, void))*a5
     + 4))(a5, 179, &v129, 1, v123, 1, 0);
    return v104;
  }
  return result;
}

uint64_t sub_1CBC3CDF8(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v6 = sub_1CB8F1DC4(a3);
  if (v7 == 1)
  {
    unsigned int v11 = v6;
    unsigned int v6 = v11;
  }
  unsigned int v17 = v6;
  if (v6 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16);
  }
  unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
  if (!v6) {
    unint64_t v8 = 0;
  }
  unint64_t v16 = v8;
  unsigned int v13 = 1;
  unint64_t v12 = 0;
  unsigned int v15 = 1;
  uint64_t v14 = 0;
  uint64_t v9 = sub_1CBC3E4F4(a1, a2, a3, (unint64_t)&v16, &v12, 0, 0);
  if (v15 >= 0x41 && v14) {
    MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
  }
  if (v13 >= 0x41 && v12) {
    MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
  }
  if (v17 >= 0x41 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  return v9;
}

uint64_t sub_1CBC3CF54(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 8) + 40);
  if ((a2 & 0x80000000) != 0) {
    unsigned int v3 = (uint64_t *)(*(void *)(v2 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v3 = (uint64_t *)(*(void *)(v2 + 272) + 8 * a2);
  }
  uint64_t v4 = *v3;
  if (!*v3) {
    return 1;
  }
  while ((*(unsigned char *)(v4 + 3) & 1) != 0)
  {
    uint64_t v4 = *(void *)(v4 + 24);
    if (!v4) {
      return 1;
    }
  }
  unsigned int v6 = (void *)(v4 + 8);
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v7 = *(void *)(v5 + 32);
  if (*(unsigned char *)v7) {
    return 0;
  }
LABEL_8:
  int v8 = *(_DWORD *)(v7 + 4);
  if (v8 < 0)
  {
    uint64_t v9 = v8 & 0x7FFFFFFF;
    if (v9 < *(_DWORD *)(v2 + 432))
    {
      int v10 = **(unsigned __int16 **)(v5 + 16);
      unint64_t v19 = *(void *)(*(void *)(v2 + 424) + 8 * v9);
      if ((v19 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        if (v10 == 119)
        {
          unint64_t v11 = sub_1CB8F1DC4(&v19);
          if (v12 == 1)
          {
            unint64_t v15 = v11;
            unint64_t v11 = v15;
          }
          if (v11 > 0xF) {
            goto LABEL_27;
          }
        }
        uint64_t v18 = 0;
        unsigned int v14 = *(_DWORD *)(v7 + 4);
        unsigned int v17 = &v18;
        unsigned int v20 = v14;
        if (sub_1CBACAADC((uint64_t)v16, v2, &v20))
        {
          if (v18 == 0xFFFF)
          {
LABEL_27:
            while (1)
            {
              uint64_t v4 = *(void *)(v4 + 24);
              if (!v4) {
                return 1;
              }
              if ((*(unsigned char *)(v4 + 3) & 1) == 0)
              {
                uint64_t v5 = *(void *)(v4 + 8);
                if (v5 != *v6)
                {
                  unsigned int v6 = (void *)(v4 + 8);
                  uint64_t v7 = *(void *)(v5 + 32);
                  if (!*(unsigned char *)v7) {
                    goto LABEL_8;
                  }
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBC3D0CC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x80000000) != 0 && (a1 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432))
  {
    unint64_t v7 = *(void *)(*(void *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
    if ((v7 & 2) != 0)
    {
      char v8 = 35;
      char v9 = 19;
      if ((v7 & 4) == 0) {
        char v8 = 19;
      }
      unint64_t v10 = v7 >> v8;
      if ((v7 & 4) == 0) {
        char v9 = 3;
      }
      if (v7) {
        char v9 = 3;
      }
      unint64_t v11 = (void *)((8 * (unsigned __int16)(v7 >> v9)) & 0xFFFFF8000007FFFFLL | ((v10 & 0xFFFFFF) << 19) | 2);
      uint64_t v12 = 0x800000000000000;
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  char v13 = 3;
  if ((v7 & 1) == 0) {
    char v13 = 19;
  }
  unint64_t v11 = (void *)(v7 & 0x8000000000000000 | (8 * (v7 >> v13)) | 1);
  if ((a1 & 0x80000000) == 0)
  {
    unsigned int v14 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
    uint64_t v12 = 0x8000000000000;
    goto LABEL_17;
  }
  uint64_t v12 = 0x8000000000000;
LABEL_16:
  unsigned int v14 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
LABEL_17:
  uint64_t v15 = *v14;
  if (v15 && ((*(unsigned char *)(v15 + 3) & 1) != 0 || (uint64_t v15 = *(void *)(v15 + 24)) != 0 && (*(unsigned char *)(v15 + 3) & 1) != 0)) {
    uint64_t v16 = *(void *)(v15 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  if ((v7 & v12) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  int v17 = **(unsigned __int16 **)(v16 + 16);
  if (v17 == 119)
  {
    uint64_t v38 = v40;
    uint64_t v39 = 0x400000000;
    if (sub_1CBC3D0CC(*(unsigned int *)(*(void *)(v16 + 32) + 36), a2, a3, &v38))
    {
      if (v39)
      {
        unint64_t v18 = 0;
        do
        {
          uint64_t v36 = v11;
          int v37 = 0;
          LODWORD(v33) = *((_DWORD *)v38 + v18);
          int v35 = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 119, &v36, 1, &v33, 1, 0);
          unint64_t v20 = *(unsigned int *)(a4 + 8);
          if (v20 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v20) = *(_DWORD *)(*(void *)(v19 + 32) + 4);
          ++*(_DWORD *)(a4 + 8);
          ++v18;
        }
        while (v18 < v39);
      }
      if (v38 != v40) {
        free(v38);
      }
      return 1;
    }
    if (v38 != v40) {
      free(v38);
    }
    int v17 = **(unsigned __int16 **)(v16 + 16);
  }
  unsigned int v21 = (unsigned __int16)(v7 >> 3);
  if (v17 == 78)
  {
    if (*(_DWORD *)(v16 + 40) == v21 + 1)
    {
      if (v21)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 32 * v21;
        do
        {
          uint64_t v33 = v11;
          int v34 = 0;
          LODWORD(v38) = *(_DWORD *)(*(void *)(v16 + 32) + v28 + 36);
          v40[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 119, &v33, 1, &v38, 1, 0);
          unint64_t v31 = *(unsigned int *)(a4 + 8);
          if (v31 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v31) = *(_DWORD *)(*(void *)(v30 + 32) + 4);
          ++*(_DWORD *)(a4 + 8);
          v28 += 32;
        }
        while (v29 != v28);
      }
      return 1;
    }
    return 0;
  }
  if (v17 == 77)
  {
    if (*(_DWORD *)(v16 + 40) == v21 + 1)
    {
      if (v21)
      {
        uint64_t v26 = 0;
        unsigned int v27 = *(_DWORD *)(a4 + 8);
        do
        {
          if (v27 >= *(_DWORD *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v27) = *(_DWORD *)(*(void *)(v16 + 32) + v26 + 36);
          unsigned int v27 = *(_DWORD *)(a4 + 8) + 1;
          *(_DWORD *)(a4 + 8) = v27;
          v26 += 32;
        }
        while (32 * v21 != v26);
      }
      return 1;
    }
    return 0;
  }
  if (v17 != 68) {
    return 0;
  }
  uint64_t v38 = v11;
  LODWORD(v39) = 0;
  uint64_t v22 = 1;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 68, &v38, 1, 0, 0, 0);
  if (v21)
  {
    int v24 = *(_DWORD *)(*(void *)(v23 + 32) + 4);
    unsigned int v25 = *(_DWORD *)(a4 + 8);
    do
    {
      if (v25 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a4 + 4 * v25) = v24;
      unsigned int v25 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v25;
      --v21;
    }
    while (v21);
    return 1;
  }
  return v22;
}

void sub_1CBC3D580(uint64_t a1, int a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unint64_t v37 = a3;
  char v9 = (uint64_t *)(a6 + 8 * a4);
  if (a4 < 0) {
    char v9 = (uint64_t *)(a5 + 16 * (a4 & 0x7FFFFFFF) + 8);
  }
  uint64_t v10 = *v9;
  if ((*(unsigned char *)(v10 + 3) & 1) == 0) {
    uint64_t v10 = *(void *)(v10 + 24);
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (**(_WORD **)(v11 + 16) == 121)
  {
    uint64_t v12 = *(void *)(*(void *)(v11 + 32) + 48);
    if (v12)
    {
      unsigned int v14 = *(void **)(v12 + 32);
      char v13 = (const llvm::detail::DoubleAPFloat *)(v12 + 32);
      if (v14 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v48, v13);
      }
      else {
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v48, v13);
      }
      switch(a2)
      {
        case 175:
          llvm::APFloat::convert((uint64_t)v47, &unk_1CFB2E31C, 1, &v36);
          double v15 = llvm::APFloat::convertToDouble((llvm::APFloat *)v47);
          double v16 = log2(v15);
          int v18 = sub_1CB8F1DC4(&v37);
          if (v17 == 1) {
          if (v18 == 64)
          }
          {
            LODWORD(v43) = 64;
            double v42 = v16;
            llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v38, (const llvm::APInt **)&v42);
            unint64_t v20 = (const llvm::APInt *)v38;
            int v43 = (const llvm::APInt *)v38;
            uint64_t v44 = v39;
          }
          else
          {
            if (v18 != 32)
            {
              LODWORD(v43) = 64;
              double v42 = v16;
              llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v38, (const llvm::APInt **)&v42);
              int v43 = (const llvm::APInt *)v38;
              uint64_t v44 = v39;
              int v45 = v40;
              char v46 = v41 & 0xF;
              unint64_t v38 = 129;
              uint64_t v33 = sub_1CB8F1DC4(&v38);
              if (v32 == 1) {
              if (v33 == 64)
              }
              {
                int v34 = &unk_1CFB2E31C;
              }
              else if (v33 == 32)
              {
                int v34 = &unk_1CFB2E308;
              }
              else
              {
                int v34 = &unk_1CFB2E2E0;
              }
              llvm::APFloat::convert((uint64_t)&v42, v34, 1, &v38);
              unint64_t v20 = v43;
              goto LABEL_49;
            }
            *(float *)&unsigned int v19 = v16;
            LODWORD(v43) = 32;
            *(void *)&double v42 = v19;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v38, (const llvm::APInt **)&v42);
            unint64_t v20 = (const llvm::APInt *)v38;
            int v43 = (const llvm::APInt *)&unk_1CFB2E394;
            uint64_t v44 = v39;
          }
          int v45 = v40;
          char v46 = v41 & 0xF;
LABEL_49:
          uint64_t v35 = v44;
          if (v20 != (const llvm::APInt *)&unk_1CFB2E344)
          {
            *(_DWORD *)(a1 + 24) = v45;
            *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) & 0xF0 | v46 & 0xF;
          }
          *(void *)(a1 + 8) = v20;
          *(void *)(a1 + 16) = v35;
          *(unsigned char *)(a1 + 32) = 1;
          goto LABEL_52;
        case 176:
        case 178:
        case 180:
        case 181:
        case 182:
        case 183:
          goto LABEL_24;
        case 177:
          uint64_t v28 = v48;
          if (v48 != &unk_1CFB2E344) {
            goto LABEL_34;
          }
          uint64_t v27 = (uint64_t)v49;
          goto LABEL_32;
        case 179:
          if ((a3 | 0x8000000000000000) != 0x8000000000000081) {
            goto LABEL_24;
          }
          if (a3 == 129)
          {
            unsigned int v25 = &unk_1CFB2E2E0;
            int v26 = 0;
          }
          else
          {
            unsigned int v25 = &unk_1CFB2E2F4;
            int v26 = 1;
          }
          llvm::APFloat::convert((uint64_t)v47, v25, v26, &v42);
          uint64_t v28 = v48;
          if (v48 != &unk_1CFB2E344) {
            goto LABEL_39;
          }
          uint64_t v30 = (uint64_t)v49;
          uint64_t v49 = 0;
          goto LABEL_40;
        case 184:
          uint64_t v28 = v48;
          uint64_t v27 = (uint64_t)v49;
          uint64_t v29 = v47;
          if (v48 == &unk_1CFB2E344) {
            uint64_t v29 = v49;
          }
          if ((v29[28] & 8) == 0) {
            goto LABEL_28;
          }
          if (v48 == &unk_1CFB2E344)
          {
LABEL_32:
            sub_1CBFC6FB8(v27);
            sub_1CBFC6FB8((uint64_t)(v49 + 32));
            uint64_t v28 = v48;
LABEL_28:
            if (v28 == &unk_1CFB2E344)
            {
              uint64_t v30 = (uint64_t)v49;
              uint64_t v49 = 0;
              uint64_t v28 = &unk_1CFB2E344;
              goto LABEL_40;
            }
          }
          else
          {
LABEL_34:
            v51 ^= 8u;
          }
LABEL_39:
          uint64_t v30 = (uint64_t)v49;
          *(_DWORD *)(a1 + 24) = v50;
          *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) & 0xF0 | v51 & 0xF;
LABEL_40:
          *(void *)(a1 + 8) = v28;
          *(void *)(a1 + 16) = v30;
          unint64_t v31 = &unk_1CFB2E394;
          unint64_t v48 = &unk_1CFB2E394;
          *(unsigned char *)(a1 + 32) = 1;
LABEL_53:
          if ((v31[2] - 64) <= 0xFFFFFF7F)
          {
            if (v49) {
              MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
            }
          }
          return;
        default:
          if (a2 == 217)
          {
            llvm::APFloat::convert((uint64_t)v47, &unk_1CFB2E31C, 1, &v36);
            *(float *)&unsigned int v21 = sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v47));
            LODWORD(v39) = 32;
            unint64_t v38 = v21;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v42, (const llvm::APInt **)&v38);
            uint64_t v22 = *(const llvm::APInt **)&v42;
            uint64_t v23 = v43;
            if (*(_UNKNOWN **)&v42 != &unk_1CFB2E344)
            {
              char v24 = BYTE4(v44);
              *(_DWORD *)(a1 + 24) = v44;
              *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) & 0xF0 | v24 & 0xF;
            }
            *(void *)(a1 + 8) = v22;
            *(void *)(a1 + 16) = v23;
            *(unsigned char *)(a1 + 32) = 1;
          }
          else
          {
LABEL_24:
            *(unsigned char *)a1 = 0;
            *(unsigned char *)(a1 + 32) = 0;
          }
LABEL_52:
          unint64_t v31 = v48;
          if (v48 != &unk_1CFB2E344) {
            goto LABEL_53;
          }
          sub_1CB845718((uint64_t *)&v49);
          return;
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
}

uint64_t sub_1CBC3DA50(unsigned int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = a2;
  if ((a1 & 0x80000000) != 0) {
    unsigned int v6 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v6 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v7 = *v6;
  if (!v7) {
    return 0;
  }
  if ((*(unsigned char *)(v7 + 3) & 1) == 0)
  {
    uint64_t v7 = *(void *)(v7 + 24);
    if (!v7 || (*(unsigned char *)(v7 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    return 0;
  }
  int v9 = **(unsigned __int16 **)(v8 + 16);
  if ((v9 & 0xFFFE) == 0x78) {
    return 1;
  }
  uint64_t v11 = *(unsigned int **)(v8 + 32);
  uint64_t v12 = v11[1];
  if ((v12 & 0x80000000) != 0) {
    char v13 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
  }
  else {
    char v13 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v12);
  }
  uint64_t v14 = *v13;
  if (v14)
  {
    while ((*(unsigned char *)(v14 + 3) & 1) != 0)
    {
      uint64_t v14 = *(void *)(v14 + 24);
      if (!v14) {
        goto LABEL_13;
      }
    }
    while (1)
    {
      uint64_t v14 = *(void *)(v14 + 24);
      if (!v14) {
        break;
      }
      if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (!a4) {
      return 0;
    }
    double v15 = (uint64_t *)((int)v12 >= 0
                    ? *(void *)(a2 + 272) + 8 * v12
                    : *(void *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
    uint64_t v16 = *v15;
    if (!v16) {
      return 0;
    }
    while ((*(unsigned char *)(v16 + 3) & 1) != 0)
    {
      uint64_t v16 = *(void *)(v16 + 24);
      if (!v16) {
        return 0;
      }
    }
    uint64_t v18 = 0;
LABEL_35:
    ++v18;
    while (1)
    {
      uint64_t v16 = *(void *)(v16 + 24);
      if (!v16) {
        break;
      }
      if ((*(unsigned char *)(v16 + 3) & 1) == 0) {
        goto LABEL_35;
      }
    }
    if (v18 != 2) {
      return 0;
    }
  }
  if (v9 == 313) {
    char v17 = a3;
  }
  else {
    char v17 = 0;
  }
  uint64_t result = 1;
  if ((v17 & 1) == 0 && (v9 - 299) >= 4)
  {
    if (**(unsigned __int16 **)(v8 + 16) > 0x10Fu)
    {
      if (((v9 - 272) > 0x3D || ((1 << (v9 - 16)) & 0x20000040000000C1) == 0)
        && v9 != 357)
      {
        goto LABEL_45;
      }
    }
    else if (((v9 - 163) > 0x38 || ((1 << (v9 + 93)) & 0x18800000038540DLL) == 0) {
           && v9 != 54
    }
           && v9 != 85)
    {
LABEL_45:
      if ((v9 & 0xFFFE) == 0x74)
      {
        uint64_t v19 = *(unsigned int *)(v8 + 40);
        if (v19)
        {
          unint64_t v20 = v11 + 4;
          while (*((unsigned char *)v20 - 16) != 17)
          {
            v20 += 8;
            if (!--v19) {
              goto LABEL_52;
            }
          }
          if (*v20 == 2131) {
            return 1;
          }
        }
      }
LABEL_52:
      switch(v9)
      {
        case 51:
          if (sub_1CBC3DA50(v11[33], a2, a3, 0))
          {
            uint64_t v21 = v11[41];
            a2 = v5;
            uint64_t v22 = a3;
LABEL_59:
            if (sub_1CBC3DA50(v21, a2, v22, 0)) {
              return 1;
            }
          }
          break;
        case 178:
          if (a3) {
            return 1;
          }
          break;
        case 179:
          if (a3) {
            return 1;
          }
          uint64_t v21 = v11[9];
          uint64_t v22 = 0;
          goto LABEL_59;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CBC3DCD4(unsigned int a1, uint64_t a2)
{
  if ((a1 & 0x80000000) != 0) {
    unsigned int v3 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v3 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v4 = *v3;
  if (!*v3) {
    return 1;
  }
  while ((*(unsigned char *)(v4 + 3) & 1) != 0)
  {
    uint64_t v4 = *(void *)(v4 + 24);
    if (!v4) {
      return 1;
    }
  }
  uint64_t v6 = *(void *)(v4 + 8);
LABEL_9:
  int v7 = **(unsigned __int16 **)(v6 + 16);
  if ((v7 & 0xFFFE) == 0xB2)
  {
    if ((sub_1CBC3DCD4(*(unsigned int *)(*(void *)(v6 + 32) + 4), a2) & 1) == 0) {
      return 0;
    }
    goto LABEL_29;
  }
  if (**(unsigned __int16 **)(v6 + 16) > 0x10Fu)
  {
    BOOL v12 = (v7 - 272) > 0x3D || ((1 << (v7 - 16)) & 0x20000040000000C1) == 0;
    if (!v12 || v7 == 357)
    {
LABEL_29:
      uint64_t v13 = *(void *)(v4 + 8);
      while (1)
      {
        uint64_t v4 = *(void *)(v4 + 24);
        if (!v4) {
          return 1;
        }
        if ((*(unsigned char *)(v4 + 3) & 1) == 0)
        {
          uint64_t v6 = *(void *)(v4 + 8);
          if (v6 != v13) {
            goto LABEL_9;
          }
        }
      }
    }
LABEL_38:
    if ((v7 & 0xFFFE) != 0x74) {
      return 0;
    }
    uint64_t v14 = *(unsigned int *)(v6 + 40);
    if (!v14) {
      return 0;
    }
    for (uint64_t i = (_DWORD *)(*(void *)(v6 + 32) + 16); *((unsigned char *)i - 16) != 17; i += 8)
    {
      uint64_t result = 0;
      if (!--v14) {
        return result;
      }
    }
    if (*i != 2131) {
      return 0;
    }
    goto LABEL_29;
  }
  uint64_t v8 = (v7 - 163);
  if (v8 > 0x38) {
    goto LABEL_35;
  }
  if (((1 << (v7 + 93)) & 0x18800000038140DLL) != 0) {
    goto LABEL_29;
  }
  if (v8 != 14)
  {
LABEL_35:
    if (v7 == 54 || v7 == 85) {
      goto LABEL_29;
    }
    goto LABEL_38;
  }
  uint64_t v9 = *(unsigned int *)(*(void *)(v6 + 32) + 4);
  if ((v9 & 0x80000000) != 0) {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v9);
  }
  uint64_t v11 = *v10;
  if (!v11) {
    goto LABEL_29;
  }
  while ((*(unsigned char *)(v11 + 3) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11) {
      goto LABEL_29;
    }
  }
  while (1)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11) {
      break;
    }
    if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
      goto LABEL_29;
    }
  }
  uint64_t result = sub_1CBC3DCD4(v9, a2);
  if (result)
  {
    if ((sub_1CBC3568C(v9, a2) & 1) == 0) {
      return 0;
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_1CBC3DED8(uint64_t *a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 40) != 3) {
    return 0;
  }
  unsigned int v3 = *(unsigned int **)(a2 + 32);
  uint64_t v4 = v3[1];
  if ((v4 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(*a1 + 8) + 40);
  unint64_t v7 = v4 & 0x7FFFFFFF;
  if (v7 >= *(unsigned int *)(v6 + 432) || *(void *)(*(void *)(v6 + 424) + 8 * v7) != 9) {
    return 0;
  }
  uint64_t v8 = v3[9];
  uint64_t v9 = v3[17];
  if ((v8 & 0x80000000) != 0) {
    uint64_t v10 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v8);
  }
  uint64_t v11 = *v10;
  if (v11 && ((*(unsigned char *)(v11 + 3) & 1) != 0 || (uint64_t v11 = *(void *)(v11 + 24)) != 0 && (*(unsigned char *)(v11 + 3) & 1) != 0))
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_101:
      uint64_t v13 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v9);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_101;
    }
  }
  uint64_t v13 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
LABEL_11:
  uint64_t v14 = *v13;
  if (v14 && ((*(unsigned char *)(v14 + 3) & 1) != 0 || (uint64_t v14 = *(void *)(v14 + 24)) != 0 && (*(unsigned char *)(v14 + 3) & 1) != 0)) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v15 = 0;
  }
  if (!sub_1CBAAF2D4(v15, v6))
  {
LABEL_24:
    uint64_t v18 = v15;
    int v19 = v9;
    goto LABEL_26;
  }
  if (sub_1CBAAF2D4(v12, v6))
  {
    if ((v9 & 0x80000000) != 0) {
      uint64_t v16 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v16 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v9);
    }
    uint64_t v17 = *v16;
    if (v17)
    {
      if ((*(unsigned char *)(v17 + 3) & 0x81) == 0) {
        goto LABEL_22;
      }
      while (1)
      {
        uint64_t v17 = *(void *)(v17 + 24);
        if (!v17) {
          break;
        }
        if ((*(_DWORD *)v17 & 0x81000000) == 0)
        {
LABEL_22:
          while (1)
          {
            uint64_t v17 = *(void *)(v17 + 24);
            if (!v17) {
              goto LABEL_25;
            }
            if ((*(_DWORD *)v17 & 0x81000000) == 0) {
              goto LABEL_24;
            }
          }
        }
      }
    }
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v18 = v12;
  uint64_t v12 = v15;
  int v19 = v8;
  LODWORD(v8) = v9;
LABEL_26:
  uint64_t result = sub_1CBAAF2D4(v12, v6);
  if (!result) {
    return result;
  }
  uint64_t v59 = 0;
  if (!sub_1CBAAF2D4(v12, v6)
    || ((int v21 = **(unsigned __int16 **)(v12 + 16), (v21 - 134) >= 2) && v21 != 51
      ? (uint64_t v22 = 0)
      : (uint64_t v22 = 2),
        (unsigned int v23 = *(_DWORD *)(*(void *)(v12 + 32) + 32 * v22 + 4),
         int v61 = &v59,
         unsigned int v73 = v23,
         !sub_1CBACAADC((uint64_t)&v60, v6, &v73))
     || v59 != 1))
  {
    if (!sub_1CBAAF2D4(v18, v6)
      || ((int v24 = **(unsigned __int16 **)(v18 + 16), (v24 - 134) >= 2) && v24 != 51
        ? (uint64_t v25 = 0)
        : (uint64_t v25 = 2),
          (unsigned int v26 = *(_DWORD *)(*(void *)(v18 + 32) + 32 * v25 + 4),
           int v61 = &v59,
           unsigned int v73 = v26,
           !sub_1CBACAADC((uint64_t)&v60, v6, &v73))
       || v59 != 1))
    {
      int v27 = **(unsigned __int16 **)(v12 + 16);
      unsigned int v28 = v27 - 134;
      if ((v27 - 134) < 2 || v27 == 51) {
        uint64_t v29 = 2;
      }
      else {
        uint64_t v29 = 0;
      }
      if (v28 < 2 || v27 == 51) {
        uint64_t v30 = 3;
      }
      else {
        uint64_t v30 = 0;
      }
      uint64_t v31 = *(void *)(v12 + 32);
      BOOL v32 = v28 < 2 || v27 == 51;
      uint64_t v33 = v31 + 32 * v29;
      uint64_t v34 = v31 + 32 * v30;
      uint64_t v35 = v31 + 32 * v32;
      if ((v8 & 0x80000000) != 0) {
        char v36 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
      }
      else {
        char v36 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v8);
      }
      int v37 = *(_DWORD *)(v33 + 4);
      int v38 = *(_DWORD *)(v34 + 4);
      int v39 = *(_DWORD *)(v35 + 16);
      uint64_t v40 = *v36;
      if (v40)
      {
        while ((*(_DWORD *)v40 & 0x81000000) != 0)
        {
          uint64_t v40 = *(void *)(v40 + 24);
          if (!v40) {
            goto LABEL_61;
          }
        }
        do
        {
          uint64_t v40 = *(void *)(v40 + 24);
          if (!v40) {
            goto LABEL_64;
          }
        }
        while ((*(_DWORD *)v40 & 0x81000000) != 0);
      }
LABEL_61:
      uint64_t v41 = *(void *)(*(void *)(v6 + 24) + 16 * v7 + 8);
      if (!v41)
      {
LABEL_64:
        int v42 = 0;
        uint64_t v43 = v4;
        if ((v4 & 0x80000000) == 0) {
          goto LABEL_82;
        }
LABEL_65:
        for (uint64_t i = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
              ;
              uint64_t i = (uint64_t *)(*(void *)(v6 + 272) + 8 * v43))
        {
          uint64_t v45 = *i;
          if (!v45) {
            break;
          }
          while ((*(_DWORD *)v45 & 0x81000000) != 0)
          {
            uint64_t v45 = *(void *)(v45 + 24);
            if (!v45) {
              goto LABEL_91;
            }
          }
          while (1)
          {
            uint64_t v45 = *(void *)(v45 + 24);
            if (!v45) {
              break;
            }
            if ((*(_DWORD *)v45 & 0x81000000) == 0) {
              goto LABEL_91;
            }
          }
          if (v42 == 5) {
            break;
          }
          if ((v43 & 0x80000000) != 0) {
            char v46 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
          }
          else {
            char v46 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v43);
          }
          for (uint64_t j = *v46; (*(unsigned char *)(j + 3) & 1) != 0; uint64_t j = *(void *)(j + 24))
            ;
          uint64_t v48 = *(void *)(j + 8);
          int v49 = **(unsigned __int16 **)(v48 + 16);
          if ((v49 - 65) >= 2)
          {
            if (v49 == 136) {
              return 0;
            }
            break;
          }
          uint64_t v43 = *(unsigned int *)(*(void *)(v48 + 32) + 4);
          ++v42;
          if ((v43 & 0x80000000) != 0) {
            goto LABEL_65;
          }
LABEL_82:
          ;
        }
LABEL_91:
        uint64_t v52 = *a1;
        *(void *)(v52 + 40) = *(void *)(a2 + 24);
        *(void *)(v52 + 48) = a2;
        int v53 = **(unsigned __int16 **)(a2 + 16);
        if (v53 == 66)
        {
          uint64_t v54 = *a1;
          unsigned int v73 = v4;
          int v74 = 1;
          int v60 = v39;
          int v62 = 2;
          int v63 = v37;
          int v64 = 0;
          int v65 = v38;
          int v66 = 0;
          unint64_t v57 = 9;
          int v58 = 0;
          uint64_t v67 = sub_1CC7362A8(v54, &v57, 1uLL);
          uint64_t v68 = v56;
          int v69 = 1;
          LODWORD(v70) = v19;
          int v72 = 0;
          goto LABEL_97;
        }
        if (v53 == 65)
        {
          uint64_t v54 = *a1;
          unsigned int v73 = v4;
          int v74 = 1;
          int v60 = v39;
          int v62 = 2;
          int v63 = v37;
          int v64 = 0;
          int v65 = v38;
          int v66 = 0;
          LODWORD(v67) = v19;
          int v69 = 0;
          unint64_t v57 = 9;
          int v58 = 0;
          uint64_t v70 = sub_1CC7362A8(v54, &v57, 0);
          uint64_t v71 = v55;
          int v72 = 1;
LABEL_97:
          (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t, int *, uint64_t, void))(*(void *)v54 + 32))(v54, 51, &v73, 1, &v60, 5, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          return 1;
        }
        return 0;
      }
      while ((*(unsigned char *)(v41 + 3) & 1) != 0)
      {
        uint64_t v41 = *(void *)(v41 + 24);
        if (!v41) {
          goto LABEL_64;
        }
      }
      uint64_t v50 = *(void *)(v41 + 8);
LABEL_84:
      int v51 = **(unsigned __int16 **)(v50 + 16);
      if (v51 != 114 && v51 != 136)
      {
        while (1)
        {
          uint64_t v41 = *(void *)(v41 + 24);
          if (!v41) {
            goto LABEL_64;
          }
          if ((*(unsigned char *)(v41 + 3) & 1) == 0 && *(void *)(v41 + 8) != v50)
          {
            uint64_t v50 = *(void *)(v41 + 8);
            goto LABEL_84;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBC3E4F4(uint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t a4, unint64_t *a5, int a6, uint64_t a7)
{
  uint64_t v445 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)a3 & 1) == 0)
  {
    int v344 = **(unsigned __int16 **)(a2 + 16);
    if (v344 != 193 && v344 != 70) {
      return 0;
    }
  }
  unsigned int v15 = sub_1CB8F1DC4(a3);
  if (v13 == 1) {
  LODWORD(v436) = v15;
  }
  if (v15 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v435);
  }
  LODWORD(v438) = v15;
  unint64_t v435 = 0;
  v437 = 0;
  if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
    MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
  }
  *a5 = v435;
  *((_DWORD *)a5 + 2) = v436;
  LODWORD(v436) = 0;
  v404 = (uint64_t **)(a5 + 2);
  if (*((_DWORD *)a5 + 6) >= 0x41u && *v404) {
    MEMORY[0x1D25D9CB0](*v404, 0x1000C8000313F17);
  }
  a5[2] = (unint64_t)v437;
  *((_DWORD *)a5 + 6) = v438;
  unsigned int v16 = *(_DWORD *)(a4 + 8);
  unsigned int v434 = v16;
  if (v16 > 0x40) {
    operator new[]();
  }
  unint64_t v17 = *(void *)a4;
  unint64_t v18 = *(void *)a4;
  unint64_t __src = *(void *)a4;
  size_t v19 = *(void *)(*(void *)(*a1 + 8) + 40);
  uint64_t v20 = *(void *)(a2 + 32);
  int v21 = (const char *)*(unsigned int *)(v20 + 4);
  size_t __n = v19;
  if ((v21 & 0x80000000) != 0) {
    uint64_t v22 = (uint64_t *)(*(void *)(v19 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v22 = (uint64_t *)(*(void *)(v19 + 272) + 8 * (void)v21);
  }
  uint64_t v23 = *v22;
  if (v23)
  {
    while ((*(unsigned char *)(v23 + 3) & 1) != 0)
    {
      uint64_t v23 = *(void *)(v23 + 24);
      if (!v23) {
        goto LABEL_13;
      }
    }
    while (1)
    {
      uint64_t v23 = *(void *)(v23 + 24);
      if (!v23) {
        break;
      }
      if ((*(unsigned char *)(v23 + 3) & 1) == 0) {
        goto LABEL_13;
      }
    }
LABEL_31:
    uint64_t v28 = *(unsigned int *)(a4 + 8);
    if (v28 < 0x41) {
      goto LABEL_32;
    }
    int v292 = 0;
    int64_t v293 = (unint64_t)(v28 + 63) >> 6;
    do
    {
      if (v293-- < 1) {
        break;
      }
      unint64_t v295 = *(void *)(v17 + 8 * v293);
      v292 += __clz(v295);
    }
    while (!v295);
    BOOL v29 = 0;
    int v296 = v28 | 0xFFFFFFC0;
    if ((v28 & 0x3F) == 0) {
      int v296 = 0;
    }
    a4 = v17;
    if ((v28 - v292 - v296) <= 0x40) {
LABEL_32:
    }
      BOOL v29 = *(void *)a4 == 0;
    uint64_t v27 = 0;
    if (a6 == 6 || v29) {
      goto LABEL_67;
    }
LABEL_35:
    unsigned int v430 = 1;
    v429 = 0;
    unsigned int v432 = 1;
    v431 = 0;
    uint64_t v30 = *(unsigned __int16 **)(a2 + 16);
    unsigned int v31 = *v30;
    if (v31 <= 0x41)
    {
      if (v31 - 45 < 3)
      {
LABEL_37:
        uint64_t v32 = *(void *)(a2 + 32);
        uint64_t v33 = *(unsigned int *)(v32 + 36);
        uint64_t v34 = *(unsigned int *)(v32 + 68);
        int v35 = v16 + __clz(v18) - 64;
        unsigned int v426 = v15;
        v425 = 0;
        if (v15 != v35)
        {
          if (v15 - v35 > 0x40) {
            llvm::APInt::setBitsSlowCase(&v425, 0, v15 - v35);
          }
          else {
            v425 = (void *)((unint64_t)v425 | (0xFFFFFFFFFFFFFFFFLL >> (v35
          }
                                                                             - v15)));
        }
        if ((v33 & 0x80000000) != 0) {
          char v36 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
        }
        else {
          char v36 = (uint64_t *)(*(void *)(__n + 272) + 8 * v33);
        }
        uint64_t v37 = *v36;
        if (v37
          && ((*(unsigned char *)(v37 + 3) & 1) != 0 || (uint64_t v37 = *(void *)(v37 + 24)) != 0 && (*(unsigned char *)(v37 + 3) & 1) != 0))
        {
          uint64_t v38 = *(void *)(v37 + 8);
        }
        else
        {
          uint64_t v38 = 0;
        }
        if ((v34 & 0x80000000) != 0) {
          int v39 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
        }
        else {
          int v39 = (uint64_t *)(*(void *)(__n + 272) + 8 * v34);
        }
        uint64_t v40 = *v39;
        if (v40
          && ((*(unsigned char *)(v40 + 3) & 1) != 0 || (uint64_t v40 = *(void *)(v40 + 24)) != 0 && (*(unsigned char *)(v40 + 3) & 1) != 0))
        {
          uint64_t v41 = *(void *)(v40 + 8);
        }
        else
        {
          uint64_t v41 = 0;
        }
        if ((v33 & 0x80000000) != 0
          && (v33 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
        {
          unint64_t v42 = *(void *)(*(void *)(__n + 424) + 8 * (v33 & 0x7FFFFFFF));
        }
        else
        {
          unint64_t v42 = 0;
        }
        unint64_t v443 = v42;
        if ((sub_1CBC3E4F4(a1, v38, &v443, &v425, a5, (a6 + 1), 0) & 1) == 0
          && (sub_1CBC3E4F4(a1, v41, &v443, &v425, a5, (a6 + 1), 0) & 1) == 0
          && (sub_1CBAB2BDC(a1, a2, (uint64_t)&__src, v43) & 1) == 0)
        {
          sub_1CC6DEE8C(a1[3], (const char *)*(unsigned int *)(*(void *)(a2 + 32) + 4), (uint64_t)&v435);
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
            MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
          }
          *a5 = v435;
          *((_DWORD *)a5 + 2) = v436;
          LODWORD(v436) = 0;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *v404)
          {
            MEMORY[0x1D25D9CB0](*v404, 0x1000C8000313F17);
            unsigned int v308 = v436;
            a5[2] = (unint64_t)v437;
            *((_DWORD *)a5 + 6) = v438;
            LODWORD(v438) = 0;
            if (v308 >= 0x41 && v435) {
LABEL_609:
            }
              MEMORY[0x1D25D9CB0]();
          }
          else
          {
            a5[2] = (unint64_t)v437;
            *((_DWORD *)a5 + 6) = v438;
          }
LABEL_59:
          if (v426 >= 0x41)
          {
            unint64_t v126 = (unint64_t)v425;
            if (v425) {
LABEL_215:
            }
              MEMORY[0x1D25D9CB0](v126, 0x1000C8000313F17);
          }
          goto LABEL_60;
        }
LABEL_301:
        if (v426 >= 0x41)
        {
          unint64_t v276 = (unint64_t)v425;
          if (v425) {
LABEL_827:
          }
            MEMORY[0x1D25D9CB0](v276, 0x1000C8000313F17);
        }
LABEL_302:
        uint64_t v27 = 1;
        goto LABEL_65;
      }
      if (v31 != 19)
      {
        if (v31 == 65)
        {
          int v53 = *(_DWORD **)(a2 + 32);
          int v54 = v53[1];
          unint64_t v55 = v53[9];
          uint64_t v56 = v53[17];
          sub_1CC73C210(v56, __n, (uint64_t)&v435);
          if (!(_BYTE)v437) {
            goto LABEL_84;
          }
          uint64_t v401 = v56;
          char v127 = v436;
          if (v436 >= 0x41)
          {
            if (v435) {
              MEMORY[0x1D25D9CB0](v435, 0x1000C8000313F17);
            }
            goto LABEL_84;
          }
          unint64_t v128 = v435;
          sub_1CC6DEE8C(a1[3], (const char *)v55, (uint64_t)&v435);
          int v402 = v54;
          if (v436 < v15)
          {
            sub_1CB9F87DC((uint64_t *)&v435, v15, (uint64_t)&v425);
          }
          else if (v436 > v15)
          {
            if (v436 >= 0x41) {
              unint64_t v192 = (unint64_t *)v435;
            }
            else {
              unint64_t v192 = &v435;
            }
            unint64_t v193 = *v192;
            unint64_t v194 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
            unint64_t v195 = v194;
            if (!v15) {
              unint64_t v195 = 0;
            }
            if (v438 >= 0x41) {
              uint64_t v196 = v437;
            }
            else {
              uint64_t v196 = (void **)&v437;
            }
            if (!v15) {
              unint64_t v194 = 0;
            }
            uint64_t v197 = (void *)(v194 & (unint64_t)*v196);
            unsigned int v426 = v15;
            v425 = (void *)(v195 & v193);
            unsigned int v428 = v15;
            __s1 = v197;
          }
          else
          {
            unsigned int v426 = v436;
            if (v436 > 0x40) {
              operator new[]();
            }
            v425 = (void *)v435;
            unsigned int v428 = v438;
            if (v438 > 0x40) {
              operator new[]();
            }
            __s1 = v437;
          }
          if (v438 >= 0x41 && v437) {
            MEMORY[0x1D25D9CB0](v437, 0x1000C8000313F17);
          }
          if (v436 >= 0x41 && v435) {
            MEMORY[0x1D25D9CB0](v435, 0x1000C8000313F17);
          }
          unsigned int v444 = v15;
          if (v15) {
            unint64_t v129 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
          }
          else {
            unint64_t v129 = 0;
          }
          unint64_t v443 = v129 & ((uint64_t)(v128 << -v127) >> -v127);
          if (v426 > 0x40) {
            operator new[]();
          }
          unsigned int v130 = v444;
          unsigned int v422 = v444;
          unint64_t v131 = ~v443;
          unint64_t v132 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v444;
          if (!v444) {
            unint64_t v132 = 0;
          }
          unint64_t v421 = v132 & v131;
          unsigned int v422 = 0;
          if ((__src & (unint64_t)v425) == (__src & v132 & v131))
          {
            uint64_t v249 = *a1;
            *(void *)(v249 + 40) = *(void *)(a2 + 24);
            *(void *)(v249 + 48) = a2;
            uint64_t v250 = *a1;
            LODWORD(v441) = v54;
            unsigned int v442 = 1;
            LODWORD(v435) = v55;
            LODWORD(v437) = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v250 + 32))(v250, 19, &v441, 1, &v435, 1, 0);
            uint64_t v56 = v401;
            goto LABEL_485;
          }
          uint64_t v56 = v401;
          if ((v55 & 0x80000000) != 0) {
            uint64_t v133 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v133 = (uint64_t *)(*(void *)(__n + 272) + 8 * v55);
          }
          uint64_t v134 = *v133;
          if (!v134) {
            goto LABEL_363;
          }
          while ((*(unsigned char *)(v134 + 3) & 1) != 0)
          {
            uint64_t v134 = *(void *)(v134 + 24);
            if (!v134) {
              goto LABEL_363;
            }
          }
          while (1)
          {
            uint64_t v134 = *(void *)(v134 + 24);
            if (!v134) {
              break;
            }
            int v135 = 1;
            if ((*(unsigned char *)(v134 + 3) & 1) == 0) {
              goto LABEL_238;
            }
          }
          uint64_t v186 = (uint64_t *)((v55 & 0x80000000) != 0
                           ? *(void *)(__n + 24) + 16 * (v55 & 0x7FFFFFFF) + 8
                           : *(void *)(__n + 272) + 8 * v55);
          uint64_t v187 = *v186;
          if (!v187) {
            goto LABEL_363;
          }
          if ((*(unsigned char *)(v187 + 3) & 1) == 0)
          {
            uint64_t v187 = *(void *)(v187 + 24);
            if (!v187)
            {
              int v135 = 1;
              uint64_t v56 = v401;
              goto LABEL_238;
            }
            uint64_t v56 = v401;
            if ((*(unsigned char *)(v187 + 3) & 1) == 0) {
              goto LABEL_363;
            }
          }
          uint64_t v188 = *(void *)(v187 + 8);
          if (!v188 || **(_WORD **)(v188 + 16) != 67)
          {
LABEL_363:
            int v135 = 1;
            goto LABEL_238;
          }
          unint64_t v290 = v443;
          if (*(_DWORD *)(v188 + 40) != 3)
          {
LABEL_569:
            int v135 = 1;
            uint64_t v56 = v401;
            goto LABEL_238;
          }
          uint64_t v291 = *(void *)(v188 + 32);
          int v400 = *(_DWORD *)(v291 + 36);
          sub_1CC73C210(*(_DWORD *)(v291 + 68), __n, (uint64_t)&v435);
          if ((_BYTE)v437)
          {
            if (v436 < 0x41)
            {
              uint64_t v298 = (uint64_t)(v435 << -(char)v436) >> -(char)v436;
LABEL_587:
              if (v298 != -1) {
                goto LABEL_569;
              }
              unsigned int v420 = v130;
              unint64_t v299 = ~v290;
              if (v130) {
                unint64_t v300 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v130;
              }
              else {
                unint64_t v300 = 0;
              }
              uint64_t v301 = (void *)(v300 & v299);
              unint64_t v419 = v300 & v299;
              unsigned int v420 = 0;
              if (v428 > 0x40) {
                BOOL v302 = memcmp(__s1, v301, (((unint64_t)v428 + 63) >> 3) & 0x3FFFFFF8) == 0;
              }
              else {
                BOOL v302 = __s1 == v301;
              }
              int v303 = v302;
              int v135 = 1;
              uint64_t v56 = v401;
              if (!v303)
              {
LABEL_238:
                if (v428 >= 0x41 && __s1) {
                  MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                }
                int v54 = v402;
                if (v426 >= 0x41 && v425) {
                  MEMORY[0x1D25D9CB0](v425, 0x1000C8000313F17);
                }
                if (!v135) {
                  goto LABEL_302;
                }
LABEL_84:
                if ((v56 & 0x80000000) != 0) {
                  unint64_t v57 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
                }
                else {
                  unint64_t v57 = (uint64_t *)(*(void *)(__n + 272) + 8 * v56);
                }
                uint64_t v58 = *v57;
                if (v58
                  && ((*(unsigned char *)(v58 + 3) & 1) != 0
                   || (uint64_t v58 = *(void *)(v58 + 24)) != 0 && (*(unsigned char *)(v58 + 3) & 1) != 0))
                {
                  uint64_t v59 = *(void *)(v58 + 8);
                }
                else
                {
                  uint64_t v59 = 0;
                }
                if ((v56 & 0x80000000) != 0
                  && (v56 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
                {
                  unint64_t v60 = *(void *)(*(void *)(__n + 424) + 8 * (v56 & 0x7FFFFFFF));
                }
                else
                {
                  unint64_t v60 = 0;
                }
                unint64_t v435 = v60;
                uint64_t v61 = (a6 + 1);
                if (sub_1CBC3E4F4(a1, v59, &v435, &__src, a5, v61, 0)) {
                  goto LABEL_302;
                }
                if ((v55 & 0x80000000) != 0) {
                  int v62 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
                }
                else {
                  int v62 = (uint64_t *)(*(void *)(__n + 272) + 8 * v55);
                }
                uint64_t v63 = *v62;
                if (v63
                  && ((*(unsigned char *)(v63 + 3) & 1) != 0
                   || (uint64_t v63 = *(void *)(v63 + 24)) != 0 && (*(unsigned char *)(v63 + 3) & 1) != 0))
                {
                  uint64_t v64 = *(void *)(v63 + 8);
                }
                else
                {
                  uint64_t v64 = 0;
                }
                if ((v55 & 0x80000000) != 0 && (v55 & 0x7FFFFFFF) < *(unsigned int *)(__n + 432)) {
                  int v65 = *(void **)(*(void *)(__n + 424) + 8 * (v55 & 0x7FFFFFFF));
                }
                else {
                  int v65 = 0;
                }
                v425 = v65;
                unsigned int v66 = *((_DWORD *)a5 + 2);
                unsigned int v418 = v66;
                if (v66 > 0x40) {
                  operator new[]();
                }
                unint64_t v67 = ~*a5;
                unint64_t v68 = v66 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v66 : 0;
                unint64_t v417 = v68 & v67;
                unsigned int v418 = 0;
                LODWORD(v436) = v66;
                unint64_t v435 = __src & v68 & v67;
                if (sub_1CBC3E4F4(a1, v64, &v425, &v435, &v429, v61, 0)) {
                  goto LABEL_302;
                }
                uint64_t v70 = *a1;
                *(void *)(v70 + 40) = *(void *)(a2 + 24);
                *(void *)(v70 + 48) = a2;
                if (v430 > 0x40) {
                  operator new[]();
                }
                if (v434 > 0x40)
                {
                  uint64_t v317 = (uint64_t *)__src;
                  unint64_t v318 = (((unint64_t)v434 + 63) >> 6) - 1;
                  v319 = (uint64_t *)((unint64_t)*v404 | (unint64_t)v429);
                  do
                  {
                    uint64_t v321 = *v317++;
                    uint64_t v320 = v321;
                    uint64_t v322 = *v319++;
                    uint64_t v323 = v320 & ~v322;
                    BOOL v71 = v323 == 0;
                    BOOL v288 = v318-- != 0;
                    char v324 = v288;
                  }
                  while (!v323 && (v324 & 1) != 0);
                }
                else
                {
                  BOOL v71 = (__src & ~((unint64_t)*v404 | (unint64_t)v429)) == 0;
                }
                if (!v71)
                {
                  if (*((_DWORD *)a5 + 2) > 0x40u) {
                    operator new[]();
                  }
                  if (v434 > 0x40)
                  {
                    uint64_t v325 = (uint64_t *)__src;
                    unint64_t v326 = (((unint64_t)v434 + 63) >> 6) - 1;
                    int v327 = (uint64_t *)((unint64_t)v431 | *a5);
                    do
                    {
                      uint64_t v329 = *v325++;
                      uint64_t v328 = v329;
                      uint64_t v330 = *v327++;
                      uint64_t v331 = v328 & ~v330;
                      BOOL v72 = v331 == 0;
                      BOOL v288 = v326-- != 0;
                      char v332 = v288;
                    }
                    while (!v331 && (v332 & 1) != 0);
                  }
                  else
                  {
                    BOOL v72 = (__src & ~((unint64_t)v431 | *a5)) == 0;
                  }
                  if (!v72)
                  {
                    if ((sub_1CBAB2BDC(a1, a2, (uint64_t)&__src, v69) & 1) == 0)
                    {
                      uint64_t v73 = *((unsigned int *)a5 + 6);
                      if (v73 > 0x40)
                      {
                        v309 = *v404;
                        v310 = (uint64_t *)v431;
                        unint64_t v311 = (unint64_t)(v73 + 63) >> 6;
                        do
                        {
                          uint64_t v312 = *v310++;
                          *v309++ &= v312;
                          --v311;
                        }
                        while (v311);
                      }
                      else
                      {
                        *v404 = (uint64_t *)((unint64_t)*v404 & (unint64_t)v431);
                      }
                      uint64_t v74 = *((unsigned int *)a5 + 2);
                      if (v74 > 0x40)
                      {
                        v313 = (void *)*a5;
                        uint64_t v314 = (uint64_t *)v429;
                        unint64_t v315 = (unint64_t)(v74 + 63) >> 6;
                        do
                        {
                          uint64_t v316 = *v314++;
                          *v313++ |= v316;
                          --v315;
                        }
                        while (v315);
                      }
                      else
                      {
                        unint64_t v75 = (unint64_t)v429;
LABEL_118:
                        *a5 |= v75;
                      }
                      goto LABEL_60;
                    }
                    goto LABEL_302;
                  }
                  uint64_t v251 = *a1;
                  int v252 = v56;
                  uint64_t v27 = 1;
                  LODWORD(v425) = v54;
                  unsigned int v426 = 1;
                  LODWORD(v435) = v252;
LABEL_487:
                  LODWORD(v437) = 0;
                  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v251 + 32))(v251, 19, &v425, 1, &v435, 1, 0);
                  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
                  goto LABEL_65;
                }
LABEL_532:
                uint64_t v251 = *a1;
                uint64_t v27 = 1;
                LODWORD(v425) = v54;
                unsigned int v426 = 1;
                LODWORD(v435) = v55;
                goto LABEL_487;
              }
              uint64_t v304 = *a1;
              *(void *)(v304 + 40) = *(void *)(a2 + 24);
              *(void *)(v304 + 48) = a2;
              uint64_t v305 = *a1;
              LODWORD(v441) = v402;
              unsigned int v442 = 1;
              LODWORD(v435) = v400;
              LODWORD(v437) = 0;
              LODWORD(v438) = v401;
              int v440 = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v305 + 32))(v305, 67, &v441, 1, &v435, 2, 0);
LABEL_485:
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
              int v135 = 0;
              goto LABEL_238;
            }
            if (v435) {
              MEMORY[0x1D25D9CB0](v435, 0x1000C8000313F17);
            }
          }
          sub_1CC73C210(*(_DWORD *)(*(void *)(v188 + 32) + 36), __n, (uint64_t)&v435);
          if (!(_BYTE)v437) {
            goto LABEL_569;
          }
          if (v436 >= 0x41)
          {
            if (v435) {
              MEMORY[0x1D25D9CB0](v435, 0x1000C8000313F17);
            }
            goto LABEL_569;
          }
          uint64_t v298 = (uint64_t)(v435 << -(char)v436) >> -(char)v436;
          int v400 = *(_DWORD *)(*(void *)(v188 + 32) + 68);
          goto LABEL_587;
        }
LABEL_271:
        unsigned int v146 = *((unsigned __int8 *)v30 + 4);
        if ((v30[4] & 2) == 0 || (int v189 = *(_DWORD *)(a2 + 40), v189 == v146))
        {
          unsigned int v147 = v146;
        }
        else
        {
          int v190 = v189 - 1;
          unsigned int v147 = v146;
          do
          {
            int v191 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v146);
            if ((v191 & 0x10000FF) != 0x1000000) {
              break;
            }
            v147 += (v191 & 0x2000000) == 0;
            if (v190 == v146) {
              break;
            }
            ++v146;
          }
          while ((v191 & 0x2000000) == 0);
        }
        if (v147 != 1) {
          goto LABEL_60;
        }
        sub_1CC6DEE8C(a1[3], (const char *)*(unsigned int *)(*(void *)(a2 + 32) + 4), (uint64_t)&v425);
        if (v426 < v15)
        {
          sub_1CB9F87DC((uint64_t *)&v425, v15, (uint64_t)&v435);
        }
        else if (v426 > v15)
        {
          if (v426 >= 0x41) {
            long long v160 = (uint64_t *)v425;
          }
          else {
            long long v160 = (uint64_t *)&v425;
          }
          unint64_t v161 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
          unint64_t v162 = v161;
          if (!v15) {
            unint64_t v162 = 0;
          }
          uint64_t v163 = *v160;
          if (v428 >= 0x41) {
            p_s1 = __s1;
          }
          else {
            p_s1 = &__s1;
          }
          if (!v15) {
            unint64_t v161 = 0;
          }
          uint64_t v165 = (void **)(v161 & *p_s1);
          LODWORD(v436) = v15;
          unint64_t v435 = v162 & v163;
          LODWORD(v438) = v15;
          v437 = v165;
        }
        else
        {
          LODWORD(v436) = v426;
          if (v426 > 0x40) {
            operator new[]();
          }
          unint64_t v435 = (unint64_t)v425;
          LODWORD(v438) = v428;
          if (v428 > 0x40) {
            operator new[]();
          }
          v437 = (void **)__s1;
        }
        if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
          MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
        }
        *a5 = v435;
        *((_DWORD *)a5 + 2) = v436;
        LODWORD(v436) = 0;
        if (*((_DWORD *)a5 + 6) >= 0x41u && *v404)
        {
          MEMORY[0x1D25D9CB0](*v404, 0x1000C8000313F17);
          unsigned int v333 = v436;
          a5[2] = (unint64_t)v437;
          *((_DWORD *)a5 + 6) = v438;
          LODWORD(v438) = 0;
          if (v333 >= 0x41 && v435) {
            MEMORY[0x1D25D9CB0](v435, 0x1000C8000313F17);
          }
        }
        else
        {
          a5[2] = (unint64_t)v437;
          *((_DWORD *)a5 + 6) = v438;
          LODWORD(v438) = 0;
        }
        if (v428 < 0x41 || !__s1) {
          goto LABEL_59;
        }
        goto LABEL_609;
      }
      uint64_t v88 = *(_DWORD **)(a2 + 32);
      if ((*v88 & 0xFFF00) == 0 && (v88[8] & 0xFFF00) == 0)
      {
        int v89 = v88[9];
        if (v89 < 0)
        {
          uint64_t v90 = v89 & 0x7FFFFFFF;
          if (v90 < *(_DWORD *)(__n + 432)
            && (*(void *)(*(void *)(__n + 424) + 8 * v90) & 0xFFFFFFFFFFFFFFF9) != 0)
          {
            uint64_t v91 = *(void *)(*(void *)(__n + 24) + 16 * v90 + 8);
            if ((*(unsigned char *)(v91 + 3) & 1) == 0) {
              uint64_t v91 = *(void *)(v91 + 24);
            }
            uint64_t v27 = sub_1CBC3E4F4(a1, *(void *)(v91 + 8), a3, &__src, a5, (a6 + 1), a7);
            goto LABEL_65;
          }
        }
      }
      goto LABEL_60;
    }
    if (*v30 > 0x75u)
    {
      switch(*v30)
      {
        case 0x76u:
          uint64_t v198 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
          if ((v198 & 0x80000000) != 0
            && (v198 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            unint64_t v199 = *(void *)(*(void *)(__n + 424) + 8 * (v198 & 0x7FFFFFFF));
          }
          else
          {
            unint64_t v199 = 0;
          }
          unint64_t v435 = v199;
          unsigned int v201 = sub_1CB8F1DC4(&v435);
          if (v200 == 1) {
          if (v201 > 0x40)
          }
          {
            if (v434 != v201) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v443, (uint64_t)&__src);
          }
          else
          {
            if (v434 >= 0x41) {
              p_src = (unint64_t *)__src;
            }
            else {
              p_src = &__src;
            }
            unint64_t v203 = *p_src;
            unsigned int v444 = v201;
            if (v201) {
              unint64_t v204 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v201;
            }
            else {
              unint64_t v204 = 0;
            }
            unint64_t v443 = v204 & v203;
          }
          if ((v198 & 0x80000000) != 0) {
            uint64_t v205 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v198 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v205 = (uint64_t *)(*(void *)(__n + 272) + 8 * v198);
          }
          uint64_t v206 = *v205;
          if (v206
            && ((*(unsigned char *)(v206 + 3) & 1) != 0
             || (uint64_t v206 = *(void *)(v206 + 24)) != 0 && (*(unsigned char *)(v206 + 3) & 1) != 0))
          {
            uint64_t v207 = *(void *)(v206 + 8);
          }
          else
          {
            uint64_t v207 = 0;
          }
          if ((v198 & 0x80000000) != 0
            && (v198 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            unint64_t v208 = *(void *)(*(void *)(__n + 424) + 8 * (v198 & 0x7FFFFFFF));
          }
          else
          {
            unint64_t v208 = 0;
          }
          unint64_t v435 = v208;
          if (sub_1CBC3E4F4(a1, v207, &v435, &v443, a5, (a6 + 1), 0)) {
            goto LABEL_529;
          }
          unint64_t v209 = *a5;
          LODWORD(v436) = v15;
          if (v15)
          {
            unint64_t v119 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
            unint64_t v435 = v119 & v209;
          }
          else
          {
            unint64_t v119 = 0;
            unint64_t v435 = 0;
          }
          unint64_t v122 = (unint64_t)*v404;
          goto LABEL_211;
        case 0x77u:
          uint64_t v108 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
          if ((v108 & 0x80000000) != 0
            && (v108 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            unint64_t v109 = *(void *)(*(void *)(__n + 424) + 8 * (v108 & 0x7FFFFFFF));
          }
          else
          {
            unint64_t v109 = 0;
          }
          unint64_t v435 = v109;
          unsigned int v111 = sub_1CB8F1DC4(&v435);
          if (v110 == 1) {
          if (v111 > 0x40)
          }
          {
            if (v434 != v111) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v443, (uint64_t)&__src);
          }
          else
          {
            unsigned int v444 = v111;
            if (v111) {
              unint64_t v112 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v111;
            }
            else {
              unint64_t v112 = 0;
            }
            unint64_t v443 = v112 & __src;
          }
          if ((v108 & 0x80000000) != 0) {
            unint64_t v113 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v108 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v113 = (uint64_t *)(*(void *)(__n + 272) + 8 * v108);
          }
          uint64_t v114 = *v113;
          if (v114
            && ((*(unsigned char *)(v114 + 3) & 1) != 0
             || (uint64_t v114 = *(void *)(v114 + 24)) != 0 && (*(unsigned char *)(v114 + 3) & 1) != 0))
          {
            uint64_t v115 = *(void *)(v114 + 8);
          }
          else
          {
            uint64_t v115 = 0;
          }
          if ((v108 & 0x80000000) != 0
            && (v108 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            unint64_t v116 = *(void *)(*(void *)(__n + 424) + 8 * (v108 & 0x7FFFFFFF));
          }
          else
          {
            unint64_t v116 = 0;
          }
          unint64_t v435 = v116;
          if (sub_1CBC3E4F4(a1, v115, &v435, &v443, a5, (a6 + 1), 0))
          {
LABEL_529:
            if (v444 >= 0x41)
            {
              unint64_t v276 = v443;
              if (v443) {
                goto LABEL_827;
              }
            }
            goto LABEL_302;
          }
          uint64_t v117 = (uint64_t *)a5;
          if (*((_DWORD *)a5 + 2) >= 0x41u) {
            uint64_t v117 = (uint64_t *)*a5;
          }
          uint64_t v118 = *v117;
          LODWORD(v436) = v15;
          unint64_t v119 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
          unint64_t v120 = v119;
          if (!v15) {
            unint64_t v120 = 0;
          }
          unint64_t v435 = v120 & v118;
          unsigned int v121 = (uint64_t *)(a5 + 2);
          if (*((_DWORD *)a5 + 6) >= 0x41u) {
            unsigned int v121 = *v404;
          }
          unint64_t v122 = *v121;
          if (!v15) {
            unint64_t v119 = 0;
          }
LABEL_211:
          unint64_t v123 = v119 & v122;
          int v124 = v436;
          unint64_t v125 = v435;
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
            MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
          }
          *a5 = v125;
          *((_DWORD *)a5 + 2) = v124;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *v404) {
            MEMORY[0x1D25D9CB0](*v404, 0x1000C8000313F17);
          }
          a5[2] = v123;
          *((_DWORD *)a5 + 6) = v15;
          if (v444 < 0x41) {
            goto LABEL_60;
          }
          unint64_t v126 = v443;
          if (!v443) {
            goto LABEL_60;
          }
          goto LABEL_215;
        case 0x78u:
          sub_1CC73C210(*(_DWORD *)(*(void *)(a2 + 32) + 4), __n, (uint64_t)&v435);
          if (!(_BYTE)v437) {
            goto LABEL_60;
          }
          if (v436 >= 0x41) {
            goto LABEL_657;
          }
          uint64_t v46 = (uint64_t)(v435 << -(char)v436) >> -(char)v436;
          uint64_t v47 = *((unsigned int *)a5 + 6);
          if (v47 > 0x40)
          {
            *(void *)a5[2] = v46;
            bzero((void *)(a5[2] + 8), (((unint64_t)(v47 + 63) >> 3) - 8) & 0xFFFFFFF8);
            LODWORD(v47) = *((_DWORD *)a5 + 6);
            int v424 = v47;
            if (v47 > 0x40) {
              operator new[]();
            }
            uint64_t v50 = (uint64_t)*v404;
            unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
          }
          else
          {
            unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
            unint64_t v49 = v48;
            if (!v47) {
              unint64_t v49 = 0;
            }
            uint64_t v50 = v49 & v46;
            *v404 = (uint64_t *)v50;
            int v424 = v47;
          }
          uint64_t v51 = ~v50;
          if (!v47) {
            unint64_t v48 = 0;
          }
          unint64_t v52 = v48 & v51;
          unint64_t v423 = v48 & v51;
          int v424 = 0;
          if (*((_DWORD *)a5 + 2) <= 0x40u || !*a5)
          {
            uint64_t v27 = 0;
            *a5 = v52;
            *((_DWORD *)a5 + 2) = v47;
            goto LABEL_65;
          }
          MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
          *a5 = v52;
          *((_DWORD *)a5 + 2) = v47;
          goto LABEL_64;
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Du:
          goto LABEL_271;
        case 0x7Cu:
          uint64_t v166 = *a1;
          *(void *)(v166 + 40) = *(void *)(a2 + 24);
          *(void *)(v166 + 48) = a2;
          uint64_t v167 = *(void *)(a2 + 32);
          uint64_t v168 = *(unsigned int *)(v167 + 36);
          if ((v168 & 0x80000000) != 0
            && (v168 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            unint64_t v169 = *(void *)(*(void *)(__n + 424) + 8 * (v168 & 0x7FFFFFFF));
          }
          else
          {
            unint64_t v169 = 0;
          }
          int v403 = *(_DWORD *)(v167 + 4);
          unint64_t v435 = v169;
          unsigned int v171 = sub_1CB8F1DC4(&v435);
          if (v170 == 1) {
          unsigned int v444 = v15;
          }
          unint64_t v443 = 0;
          if (v171)
          {
            if (v171 > 0x40) {
              llvm::APInt::setBitsSlowCase(&v443, 0, v171);
            }
            else {
              v443 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v171;
            }
          }
          unsigned int v442 = v15;
          uint64_t v441 = 1 << (v171 - 1);
          unsigned int v410 = v444;
          if (v444 > 0x40) {
            operator new[]();
          }
          unint64_t v172 = ~v443;
          unint64_t v173 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v444;
          if (!v444) {
            unint64_t v173 = 0;
          }
          unint64_t v409 = v173 & v172;
          unsigned int v410 = 0;
          unint64_t v174 = __src & v173 & v172;
          unsigned int v412 = v444;
          unint64_t v411 = v174;
          if (!v174)
          {
            uint64_t v307 = *a1;
            int v184 = 1;
            LODWORD(v425) = v403;
            unsigned int v426 = 1;
            LODWORD(v435) = v168;
            LODWORD(v437) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v307 + 32))(v307, 118, &v425, 1, &v435, 1, 0);
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
            goto LABEL_348;
          }
          unsigned int v408 = v444;
          unint64_t v407 = v441 | __src & v443;
          if (v171 >= 0x41)
          {
            if (v444 != v171) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v435, (uint64_t)&v407);
          }
          else
          {
            LODWORD(v436) = v171;
            if (v171) {
              unint64_t v175 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v171;
            }
            else {
              unint64_t v175 = 0;
            }
            unint64_t v435 = v175 & (v441 | __src & v443);
          }
          if (v408 >= 0x41 && v407) {
            MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
          }
          unint64_t v407 = v435;
          unsigned int v408 = v436;
          if ((v168 & 0x80000000) != 0) {
            uint64_t v176 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v168 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v176 = (uint64_t *)(*(void *)(__n + 272) + 8 * v168);
          }
          uint64_t v177 = *v176;
          if (v177
            && ((*(unsigned char *)(v177 + 3) & 1) != 0
             || (uint64_t v177 = *(void *)(v177 + 24)) != 0 && (*(unsigned char *)(v177 + 3) & 1) != 0))
          {
            uint64_t v178 = *(void *)(v177 + 8);
          }
          else
          {
            uint64_t v178 = 0;
          }
          if ((v168 & 0x80000000) != 0
            && (v168 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
          {
            unint64_t v179 = *(void *)(*(void *)(__n + 424) + 8 * (v168 & 0x7FFFFFFF));
          }
          else
          {
            unint64_t v179 = 0;
          }
          unint64_t v435 = v179;
          if (sub_1CBC3E4F4(a1, v178, &v435, &v407, a5, (a6 + 1), 0))
          {
            int v184 = 1;
            goto LABEL_347;
          }
          llvm::APInt::sext((uint64_t)a5, v15, (uint64_t)&v435);
          llvm::APInt::sext((uint64_t)v404, v15, (uint64_t)&v425);
          unsigned int v180 = v436;
          unint64_t v181 = v435;
          uint64_t v182 = v426;
          unint64_t v183 = (unint64_t)v425;
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
            MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
          }
          *a5 = v181;
          *((_DWORD *)a5 + 2) = v180;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *v404)
          {
            MEMORY[0x1D25D9CB0](*v404, 0x1000C8000313F17);
            unsigned int v180 = *((_DWORD *)a5 + 2);
          }
          a5[2] = v183;
          *((_DWORD *)a5 + 6) = v182;
          if (v180 > 0x40)
          {
            if (!llvm::APInt::intersectsSlowCase((uint64_t **)a5, (uint64_t **)&v441)) {
              goto LABEL_343;
            }
          }
          else if ((v441 & *a5) == 0)
          {
LABEL_343:
            if (v182 <= 0x40)
            {
              if ((v441 & v183) != 0) {
                *v404 = (uint64_t *)(v174 | v183);
              }
              goto LABEL_346;
            }
            if (!llvm::APInt::intersectsSlowCase(v404, (uint64_t **)&v441))
            {
LABEL_346:
              int v184 = 2;
              goto LABEL_347;
            }
            unint64_t v347 = (unint64_t)(v182 + 63) >> 6;
            v348 = (uint64_t *)v174;
            do
            {
              uint64_t v349 = *v348++;
              *(void *)v183 |= v349;
              v183 += 8;
              int v184 = 2;
              --v347;
            }
            while (v347);
LABEL_347:
            if (v408 >= 0x41 && v407) {
              MEMORY[0x1D25D9CB0](v407, 0x1000C8000313F17);
            }
LABEL_348:
            if (v412 >= 0x41 && v174 != 0) {
              MEMORY[0x1D25D9CB0](v174, 0x1000C8000313F17);
            }
            if (v442 >= 0x41 && v441) {
              MEMORY[0x1D25D9CB0](v441, 0x1000C8000313F17);
            }
            if (v444 >= 0x41 && v443) {
              MEMORY[0x1D25D9CB0](v443, 0x1000C8000313F17);
            }
            if (v184 == 2) {
              goto LABEL_60;
            }
            goto LABEL_302;
          }
          uint64_t v345 = *a1;
          *(void *)(v345 + 40) = *(void *)(a2 + 24);
          *(void *)(v345 + 48) = a2;
          uint64_t v346 = *a1;
          int v184 = 1;
          LODWORD(v425) = v403;
          unsigned int v426 = 1;
          LODWORD(v435) = v168;
          LODWORD(v437) = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v346 + 32))(v346, 126, &v425, 1, &v435, 1, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          goto LABEL_347;
        case 0x7Eu:
          uint64_t v148 = *(void *)(a2 + 32);
          int v149 = *(_DWORD *)(v148 + 36);
          if (v149 < 0 && (v149 & 0x7FFFFFFFu) < *(_DWORD *)(__n + 432)) {
            unint64_t v150 = *(void *)(*(void *)(__n + 424) + 8 * (v149 & 0x7FFFFFFF));
          }
          else {
            unint64_t v150 = 0;
          }
          int v151 = *(_DWORD *)(v148 + 4);
          unint64_t v435 = v150;
          unsigned int v153 = sub_1CB8F1DC4(&v435);
          if (v152 == 1) {
          if (v153 > 0x40)
          }
          {
            if (v434 != v153) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v425, (uint64_t)&__src);
          }
          else
          {
            if (v434 >= 0x41) {
              char v154 = (unint64_t *)__src;
            }
            else {
              char v154 = &__src;
            }
            unint64_t v155 = *v154;
            unsigned int v426 = v153;
            if (v153) {
              unint64_t v156 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v153;
            }
            else {
              unint64_t v156 = 0;
            }
            v425 = (void *)(v156 & v155);
          }
          unsigned int v414 = v15;
          unint64_t v413 = 0;
          if (v153 == v15) {
            goto LABEL_618;
          }
          if (v153 > 0x3F)
          {
            llvm::APInt::setBitsSlowCase(&v413, v153, v15);
LABEL_618:
            unint64_t v157 = v413;
          }
          else
          {
            unint64_t v157 = v413 | (0xFFFFFFFFFFFFFFFFLL >> (v153 - v15) << v153);
          }
          unsigned int v444 = v15;
          unsigned int v414 = 0;
          unint64_t v413 = v157 & __src;
          unint64_t v443 = v157 & __src;
          if ((v157 & __src) != 0) {
            goto LABEL_59;
          }
          uint64_t v158 = *a1;
          *(void *)(v158 + 40) = *(void *)(a2 + 24);
          *(void *)(v158 + 48) = a2;
          uint64_t v159 = *a1;
          LODWORD(v441) = v151;
          unsigned int v442 = 1;
          LODWORD(v435) = v149;
          LODWORD(v437) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v159 + 32))(v159, 118, &v441, 1, &v435, 1, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          if (v444 >= 0x41 && v443) {
            MEMORY[0x1D25D9CB0](v443, 0x1000C8000313F17);
          }
          goto LABEL_301;
        case 0x7Fu:
          sub_1CC73C210(*(_DWORD *)(*(void *)(a2 + 32) + 68), __n, (uint64_t)&v435);
          if (!(_BYTE)v437) {
            goto LABEL_60;
          }
          if (v436 >= 0x41) {
            goto LABEL_657;
          }
          uint64_t v93 = (uint64_t)(v435 << -(char)v436) >> -(char)v436;
          if (v93 >= v15) {
            goto LABEL_60;
          }
          uint64_t v94 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
          if ((v94 & 0x80000000) != 0) {
            uint64_t v95 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v94 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v95 = (uint64_t *)(*(void *)(__n + 272) + 8 * v94);
          }
          uint64_t v96 = *v95;
          if (v96
            && ((*(unsigned char *)(v96 + 3) & 1) != 0 || (uint64_t v96 = *(void *)(v96 + 24)) != 0 && (*(unsigned char *)(v96 + 3) & 1) != 0))
          {
            uint64_t v97 = *(void *)(v96 + 8);
          }
          else
          {
            uint64_t v97 = 0;
          }
          LODWORD(v436) = v434;
          if (v434 > 0x40) {
            operator new[]();
          }
          if (v434 == v93) {
            unint64_t v98 = 0;
          }
          else {
            unint64_t v98 = __src >> v93;
          }
          unint64_t v435 = v98;
          if (sub_1CBC3E4F4(a1, v97, a3, &v435, a5, (a6 + 1), 0)) {
            goto LABEL_302;
          }
          unsigned int v99 = *((_DWORD *)a5 + 2);
          if (v99 > 0x40)
          {
            llvm::APInt::shlSlowCase((llvm::APInt *)a5, v93);
          }
          else
          {
            unint64_t v100 = *a5 << v93;
            if (v99 && v99 != v93) {
              goto LABEL_168;
            }
            if (v99 == v93) {
              unint64_t v100 = 0;
            }
            if (v99) {
LABEL_168:
            }
              unint64_t v101 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v99;
            else {
              unint64_t v101 = 0;
            }
            *a5 = v101 & v100;
          }
          unsigned int v102 = *((_DWORD *)a5 + 6);
          if (v102 > 0x40)
          {
            llvm::APInt::shlSlowCase((llvm::APInt *)v404, v93);
          }
          else
          {
            uint64_t v103 = (void)*v404 << v93;
            if (v102 && v102 != v93) {
              goto LABEL_173;
            }
            if (v102 == v93) {
              uint64_t v103 = 0;
            }
            if (v102) {
LABEL_173:
            }
              unint64_t v104 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v102;
            else {
              unint64_t v104 = 0;
            }
            *v404 = (uint64_t *)(v104 & v103);
          }
          if (!v93) {
            goto LABEL_60;
          }
          if (v93 > 0x40)
          {
            llvm::APInt::setBitsSlowCase(a5, 0, v93);
          }
          else
          {
            unint64_t v75 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v93;
            if (*((_DWORD *)a5 + 2) <= 0x40u) {
              goto LABEL_118;
            }
            *(void *)*a5 |= v75;
          }
          goto LABEL_60;
        case 0x80u:
          sub_1CC73C210(*(_DWORD *)(*(void *)(a2 + 32) + 68), __n, (uint64_t)&v435);
          if (!(_BYTE)v437) {
            goto LABEL_60;
          }
          if (v436 >= 0x41) {
            goto LABEL_657;
          }
          uint64_t v136 = (uint64_t)(v435 << -(char)v436) >> -(char)v436;
          if (v136 < v15)
          {
            LODWORD(v436) = v434;
            if (v434 > 0x40) {
              operator new[]();
            }
            unint64_t v137 = __src << v136;
            if (v434)
            {
              if (v434 != v136) {
                goto LABEL_248;
              }
            }
            if (v434 == v136) {
              unint64_t v137 = 0;
            }
            if (v434) {
LABEL_248:
            }
              unint64_t v138 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v434;
            else {
              unint64_t v138 = 0;
            }
            unint64_t v435 = v138 & v137;
            if (v136 && (*(_WORD *)(a2 + 44) & 0x2000) != 0)
            {
              if (v136 > 0x40)
              {
                llvm::APInt::setBitsSlowCase(&v435, 0, v136);
              }
              else
              {
                unint64_t v277 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v136;
                if (v436 > 0x40) {
                  *(void *)v435 |= v277;
                }
                else {
                  v435 |= v277;
                }
              }
            }
            uint64_t v139 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
            if ((v139 & 0x80000000) != 0) {
              uint64_t v140 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v139 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v140 = (uint64_t *)(*(void *)(__n + 272) + 8 * v139);
            }
            uint64_t v141 = *v140;
            if ((*(unsigned char *)(v141 + 3) & 1) == 0) {
              uint64_t v141 = *(void *)(v141 + 24);
            }
            char v142 = sub_1CBC3E4F4(a1, *(void *)(v141 + 8), a3, &v435, a5, (a6 + 1), 0);
            if ((v142 & 1) == 0)
            {
              unsigned int v143 = *((_DWORD *)a5 + 2);
              if (v143 > 0x40)
              {
                llvm::APInt::lshrSlowCase((void **)a5, v136);
              }
              else if (v143 == v136)
              {
                *a5 = 0;
              }
              else
              {
                *a5 >>= v136;
              }
              unsigned int v144 = *((_DWORD *)a5 + 6);
              if (v144 > 0x40) {
                llvm::APInt::lshrSlowCase((void **)v404, v136);
              }
              else {
                *v404 = v144 == v136 ? 0 : (uint64_t *)((unint64_t)*v404 >> v136);
              }
              if (v136)
              {
                uint64_t v14 = (const llvm::APInt *)*((unsigned int *)a5 + 2);
                unsigned int v145 = v14 - v136;
                if (v14 > 0x40 || v145 > 0x3F) {
                  llvm::APInt::setBitsSlowCase(a5, v145, v14);
                }
                else {
                  *a5 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v136 << v145;
                }
              }
            }
            if (v436 >= 0x41 && v435) {
              MEMORY[0x1D25D9CB0](v435, 0x1000C8000313F17);
            }
            if (v142) {
              goto LABEL_302;
            }
          }
          goto LABEL_60;
        case 0x81u:
          unsigned int v230 = *(_DWORD *)(*(void *)(a2 + 32) + 68);
          sub_1CC73C210(v230, __n, (uint64_t)&v435);
          if (!(_BYTE)v437) {
            goto LABEL_60;
          }
          if (v436 >= 0x41)
          {
LABEL_657:
            unint64_t v126 = v435;
            if (v435) {
              goto LABEL_215;
            }
            goto LABEL_60;
          }
          uint64_t v231 = (uint64_t)(v435 << -(char)v436) >> -(char)v436;
          if (v231 >= v15) {
            goto LABEL_60;
          }
          unsigned int v426 = v434;
          if (v434 > 0x40) {
            operator new[]();
          }
          unint64_t v232 = __src << v231;
          if (v434 && v434 != v231) {
            goto LABEL_449;
          }
          if (v434 == v231) {
            unint64_t v232 = 0;
          }
          if (v434) {
LABEL_449:
          }
            unint64_t v233 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v434;
          else {
            unint64_t v233 = 0;
          }
          v425 = (void *)(v233 & v232);
          if (v231 && (*(_WORD *)(a2 + 44) & 0x2000) != 0)
          {
            if (v231 > 0x40)
            {
              llvm::APInt::setBitsSlowCase(&v425, 0, v231);
            }
            else
            {
              unint64_t v297 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v231;
              if (v426 > 0x40) {
                *(void *)v425 |= v297;
              }
              else {
                v425 = (void *)((unint64_t)v425 | v297);
              }
            }
          }
          if (v434 > 0x40) {
            unsigned int v234 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__src);
          }
          else {
            unsigned int v234 = v434 + __clz(__src) - 64;
          }
          if (v234 < v231)
          {
            uint64_t v235 = 1 << (v426 - 1);
            if (v426 > 0x40) {
              *((void *)v425 + ((v426 - 1) >> 6)) |= v235;
            }
            else {
              v425 = (void *)((unint64_t)v425 | v235);
            }
          }
          uint64_t v236 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
          if ((v236 & 0x80000000) != 0) {
            uint64_t v237 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v236 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v237 = (uint64_t *)(*(void *)(__n + 272) + 8 * v236);
          }
          uint64_t v238 = *v237;
          if ((*(unsigned char *)(v238 + 3) & 1) == 0) {
            uint64_t v238 = *(void *)(v238 + 24);
          }
          if (sub_1CBC3E4F4(a1, *(void *)(v238 + 8), a3, &v425, a5, (a6 + 1), 0)) {
            goto LABEL_683;
          }
          unsigned int v239 = *((_DWORD *)a5 + 2);
          if (v239 > 0x40)
          {
            llvm::APInt::lshrSlowCase((void **)a5, v231);
          }
          else if (v239 == v231)
          {
            *a5 = 0;
          }
          else
          {
            *a5 >>= v231;
          }
          unsigned int v240 = *((_DWORD *)a5 + 6);
          if (v240 > 0x40)
          {
            llvm::APInt::lshrSlowCase((void **)v404, v231);
          }
          else if (v240 == v231)
          {
            *v404 = 0;
          }
          else
          {
            *v404 = (uint64_t *)((unint64_t)*v404 >> v231);
          }
          unsigned int v241 = ~v231 + v15;
          uint64_t v242 = v241 >> 6;
          if (*((_DWORD *)a5 + 2) >= 0x41u) {
            v243 = (unint64_t *)(*a5 + 8 * v242);
          }
          else {
            v243 = a5;
          }
          uint64_t v244 = 1 << v241;
          if ((*v243 & (1 << v241)) != 0
            || (v434 > 0x40
              ? (unsigned int v245 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__src))
              : (unsigned int v245 = v434 + __clz(__src) - 64),
                v245 >= v231))
          {
            uint64_t v342 = *a1;
            *(void *)(v342 + 40) = *(void *)(a2 + 24);
            *(void *)(v342 + 48) = a2;
            uint64_t v343 = *a1;
            LODWORD(v443) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
            unsigned int v444 = 1;
            LODWORD(v435) = v236;
            LODWORD(v437) = 0;
            LODWORD(v438) = v230;
            int v440 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v343 + 32))(v343, 128, &v443, 1, &v435, 2, 0x100002000);
          }
          else
          {
            int v246 = sub_1CBAB77A4((unsigned int *)&__src);
            if (v246 < 0
              || ((int v334 = v246, v434 > 0x40)
                ? (unsigned int v335 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__src))
                : (unsigned int v335 = v434 + __clz(__src) - 64),
                  v335 >= v231))
            {
              uint64_t v14 = (const llvm::APInt *)*((unsigned int *)a5 + 6);
              v247 = (void *)(a5[2] + 8 * v242);
              if (v14 < 0x41) {
                v247 = a5 + 2;
              }
              if ((*v247 & v244) != 0) {
                sub_1CBAB8F38(v404, v14 - v231, v14);
              }
              char v248 = 1;
              goto LABEL_481;
            }
            uint64_t v336 = *a1;
            *(void *)(v336 + 40) = *(void *)(a2 + 24);
            *(void *)(v336 + 48) = a2;
            uint64_t v337 = *a1;
            if ((v230 & 0x80000000) != 0 && (v230 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432)) {
              unint64_t v338 = *(void *)(*(void *)(__n + 424) + 8 * (v230 & 0x7FFFFFFF));
            }
            else {
              unint64_t v338 = 0;
            }
            unint64_t v435 = v338;
            LODWORD(v436) = 0;
            uint64_t v339 = sub_1CC7362A8(v337, &v435, ~v334 + v15);
            uint64_t v340 = *a1;
            LODWORD(v443) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
            unsigned int v444 = 1;
            LODWORD(v435) = v236;
            LODWORD(v437) = 0;
            uint64_t v438 = v339;
            uint64_t v439 = v341;
            int v440 = 1;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v340 + 32))(v340, 128, &v443, 1, &v435, 2, 0);
          }
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
LABEL_683:
          char v248 = 0;
LABEL_481:
          if (v426 >= 0x41 && v425) {
            MEMORY[0x1D25D9CB0](v425, 0x1000C8000313F17);
          }
          if (v248) {
            goto LABEL_60;
          }
          goto LABEL_302;
        default:
          if (v31 == 193) {
            goto LABEL_37;
          }
          goto LABEL_271;
      }
    }
    switch(v31)
    {
      case 'P':
        uint64_t v76 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
        if ((v76 & 0x80000000) != 0)
        {
          unint64_t v77 = v76 & 0x7FFFFFFF;
          if (v77 >= *(unsigned int *)(__n + 432)) {
            uint64_t v78 = 0;
          }
          else {
            uint64_t v78 = *(void *)(*(void *)(__n + 424) + 8 * v77);
          }
          uint64_t v79 = 0x7FFFFF800000000;
          if ((v78 & 4) == 0) {
            uint64_t v79 = 0x7FFFFF80000;
          }
          if ((v79 & v78) != 0) {
            goto LABEL_60;
          }
          uint64_t v80 = (uint64_t *)(*(void *)(__n + 24) + 16 * v77 + 8);
        }
        else
        {
          uint64_t v80 = (uint64_t *)(*(void *)(__n + 272) + 8 * v76);
        }
        uint64_t v81 = *v80;
        if ((*(unsigned char *)(v81 + 3) & 1) == 0) {
          uint64_t v81 = *(void *)(v81 + 24);
        }
        if (sub_1CBC3E4F4(a1, *(void *)(v81 + 8), a3, &__src, a5, (a6 + 1), 0)) {
          goto LABEL_302;
        }
LABEL_60:
        if (*((_DWORD *)a5 + 2) > 0x40u) {
          operator new[]();
        }
        if (v434 > 0x40)
        {
          uint64_t v281 = (uint64_t *)__src;
          unint64_t v282 = (((unint64_t)v434 + 63) >> 6) - 1;
          uint64_t v283 = (uint64_t *)(a5[2] | *a5);
          do
          {
            uint64_t v285 = *v281++;
            uint64_t v284 = v285;
            uint64_t v286 = *v283++;
            uint64_t v287 = v284 & ~v286;
            BOOL v44 = v287 == 0;
            BOOL v288 = v282-- != 0;
            char v289 = v288;
          }
          while (!v287 && (v289 & 1) != 0);
        }
        else
        {
          BOOL v44 = (__src & ~(a5[2] | *a5)) == 0;
        }
        if (v44)
        {
          v270 = *(unsigned __int16 **)(a2 + 16);
          unsigned int v271 = *((unsigned __int8 *)v270 + 4);
          if ((v270[4] & 2) == 0 || (int v278 = *(_DWORD *)(a2 + 40), v278 == v271))
          {
            int v272 = *((unsigned __int8 *)v270 + 4);
          }
          else
          {
            int v279 = v278 - 1;
            int v272 = *((unsigned __int8 *)v270 + 4);
            do
            {
              int v280 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v271);
              if ((v280 & 0x10000FF) != 0x1000000) {
                break;
              }
              v272 += (v280 & 0x2000000) == 0;
              if (v279 == v271) {
                break;
              }
              ++v271;
            }
            while ((v280 & 0x2000000) == 0);
          }
          if (v272 == 1)
          {
            uint64_t v273 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
            uint64_t v274 = (uint64_t *)((v273 & 0x80000000) != 0
                             ? *(void *)(__n + 24) + 16 * (v273 & 0x7FFFFFFF) + 8
                             : *(void *)(__n + 272) + 8 * v273);
            uint64_t v275 = *v274;
            if (v275)
            {
              while ((*(unsigned char *)(v275 + 3) & 1) != 0)
              {
                uint64_t v275 = *(void *)(v275 + 24);
                if (!v275) {
                  goto LABEL_64;
                }
              }
              while (1)
              {
                uint64_t v275 = *(void *)(v275 + 24);
                if (!v275) {
                  break;
                }
                uint64_t v27 = 0;
                if ((*(unsigned char *)(v275 + 3) & 1) == 0) {
                  goto LABEL_65;
                }
              }
              int v386 = *v270;
              BOOL v387 = v386 == 69 || v386 == 0;
              uint64_t v388 = a2;
              if (!v387) {
                goto LABEL_900;
              }
              if ((v273 & 0x80000000) != 0) {
                v395 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v273 & 0x7FFFFFFF) + 8);
              }
              else {
                v395 = (uint64_t *)(*(void *)(__n + 272) + 8 * v273);
              }
              for (uint64_t i = *v395; (*(unsigned char *)(i + 3) & 1) != 0; uint64_t i = *(void *)(i + 24))
                ;
              uint64_t v397 = *(void *)(i + 8);
              if (**(_WORD **)(v397 + 16) && **(_WORD **)(v397 + 16) != 69)
              {
                uint64_t v398 = *(void *)(a2 + 24);
                goto LABEL_909;
              }
              uint64_t v398 = *(void *)(a2 + 24);
              if (*(void *)(v397 + 24) != v398)
              {
LABEL_909:
                uint64_t v388 = v398 + 48;
                for (uint64_t j = *(void *)(v398 + 56); j != v388; uint64_t j = *(void *)(j + 8))
                {
                  if (**(_WORD **)(j + 16) && **(_WORD **)(j + 16) != 69)
                  {
                    uint64_t v388 = j;
                    break;
                  }
                }
LABEL_900:
                uint64_t v389 = *a1;
                *(void *)(v389 + 40) = *(void *)(v388 + 24);
                *(void *)(v389 + 48) = v388;
                v390 = (llvm::ConstantInt *****)*a1;
                uint64_t v27 = 1;
                unint64_t v435 = (8 * *((unsigned int *)a5 + 2)) | 1;
                LODWORD(v436) = 0;
                v391 = llvm::ConstantInt::get(***v390[1], (llvm::LLVMContext *)v404, v14);
                uint64_t v392 = ((uint64_t (*)(llvm::ConstantInt *****, unint64_t *, void *))(*v390)[2])(v390, &v435, v391);
                uint64_t v393 = *a1;
                LODWORD(v425) = v273;
                unsigned int v426 = 1;
                unint64_t v435 = v392;
                uint64_t v436 = v394;
                LODWORD(v437) = 1;
                sub_1CC7382B0(v393);
                llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
LABEL_65:
                if (v432 >= 0x41 && v431) {
                  MEMORY[0x1D25D9CB0](v431, 0x1000C8000313F17);
                }
                if (v430 >= 0x41 && v429) {
                  MEMORY[0x1D25D9CB0](v429, 0x1000C8000313F17);
                }
                goto LABEL_67;
              }
            }
          }
        }
LABEL_64:
        uint64_t v27 = 0;
        goto LABEL_65;
      case 'B':
        v210 = *(_DWORD **)(a2 + 32);
        uint64_t v211 = v210[17];
        if ((v211 & 0x80000000) != 0) {
          unint64_t v212 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v211 & 0x7FFFFFFF) + 8);
        }
        else {
          unint64_t v212 = (uint64_t *)(*(void *)(__n + 272) + 8 * v211);
        }
        uint64_t v213 = *v212;
        if (v213
          && ((*(unsigned char *)(v213 + 3) & 1) != 0 || (uint64_t v213 = *(void *)(v213 + 24)) != 0 && (*(unsigned char *)(v213 + 3) & 1) != 0))
        {
          uint64_t v214 = *(void *)(v213 + 8);
        }
        else
        {
          uint64_t v214 = 0;
        }
        if ((v211 & 0x80000000) != 0
          && (v211 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
        {
          unint64_t v215 = *(void *)(*(void *)(__n + 424) + 8 * (v211 & 0x7FFFFFFF));
        }
        else
        {
          unint64_t v215 = 0;
        }
        unint64_t v55 = v210[9];
        int v54 = v210[1];
        uint64_t v216 = (a6 + 1);
        unint64_t v435 = v215;
        if (sub_1CBC3E4F4(a1, v214, &v435, &__src, a5, v216, 0)) {
          goto LABEL_302;
        }
        if ((v55 & 0x80000000) != 0) {
          v217 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
        }
        else {
          v217 = (uint64_t *)(*(void *)(__n + 272) + 8 * v55);
        }
        uint64_t v218 = *v217;
        if (v218
          && ((*(unsigned char *)(v218 + 3) & 1) != 0 || (uint64_t v218 = *(void *)(v218 + 24)) != 0 && (*(unsigned char *)(v218 + 3) & 1) != 0))
        {
          uint64_t v219 = *(void *)(v218 + 8);
        }
        else
        {
          uint64_t v219 = 0;
        }
        if ((v55 & 0x80000000) != 0 && (v55 & 0x7FFFFFFF) < *(unsigned int *)(__n + 432)) {
          uint64_t v220 = *(void **)(*(void *)(__n + 424) + 8 * (v55 & 0x7FFFFFFF));
        }
        else {
          uint64_t v220 = 0;
        }
        v425 = v220;
        unsigned int v221 = *((_DWORD *)a5 + 6);
        unsigned int v416 = v221;
        if (v221 > 0x40) {
          operator new[]();
        }
        unint64_t v222 = ~(unint64_t)*v404;
        unint64_t v223 = v221 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v221 : 0;
        unint64_t v415 = v223 & v222;
        unsigned int v416 = 0;
        LODWORD(v436) = v221;
        unint64_t v435 = __src & v223 & v222;
        if (sub_1CBC3E4F4(a1, v219, &v425, &v435, &v429, v216, 0)) {
          goto LABEL_302;
        }
        uint64_t v225 = *a1;
        *(void *)(v225 + 40) = *(void *)(a2 + 24);
        *(void *)(v225 + 48) = a2;
        if (v432 > 0x40) {
          operator new[]();
        }
        if (v434 > 0x40)
        {
          v350 = (uint64_t *)__src;
          unint64_t v351 = (((unint64_t)v434 + 63) >> 6) - 1;
          v352 = (uint64_t *)(*a5 | (unint64_t)v431);
          do
          {
            uint64_t v354 = *v350++;
            uint64_t v353 = v354;
            uint64_t v355 = *v352++;
            uint64_t v356 = v353 & ~v355;
            BOOL v226 = v356 == 0;
            BOOL v288 = v351-- != 0;
            char v357 = v288;
          }
          while (!v356 && (v357 & 1) != 0);
        }
        else
        {
          BOOL v226 = (__src & ~(*a5 | (unint64_t)v431)) == 0;
        }
        if (v226) {
          goto LABEL_532;
        }
        if (*((_DWORD *)a5 + 6) > 0x40u) {
          operator new[]();
        }
        if (v434 > 0x40)
        {
          v358 = (uint64_t *)__src;
          unint64_t v359 = (((unint64_t)v434 + 63) >> 6) - 1;
          v360 = (uint64_t *)((unint64_t)v429 | (unint64_t)*v404);
          do
          {
            uint64_t v362 = *v358++;
            uint64_t v361 = v362;
            uint64_t v363 = *v360++;
            uint64_t v364 = v361 & ~v363;
            BOOL v227 = v364 == 0;
            BOOL v288 = v359-- != 0;
            char v365 = v288;
          }
          while (!v364 && (v365 & 1) != 0);
        }
        else
        {
          BOOL v227 = (__src & ~((unint64_t)v429 | (unint64_t)*v404)) == 0;
        }
        if (!v227)
        {
          if ((sub_1CBAB2BDC(a1, a2, (uint64_t)&__src, v224) & 1) == 0)
          {
            uint64_t v228 = *((unsigned int *)a5 + 2);
            if (v228 > 0x40)
            {
              v366 = (uint64_t *)*a5;
              v367 = (uint64_t *)v429;
              unint64_t v368 = (unint64_t)(v228 + 63) >> 6;
              do
              {
                uint64_t v369 = *v367++;
                *v366++ &= v369;
                --v368;
              }
              while (v368);
            }
            else
            {
              *a5 &= (unint64_t)v429;
            }
            uint64_t v229 = *((unsigned int *)a5 + 6);
            if (v229 > 0x40)
            {
              v370 = *v404;
              v371 = (uint64_t *)v431;
              unint64_t v372 = (unint64_t)(v229 + 63) >> 6;
              do
              {
                uint64_t v373 = *v371++;
                *v370++ |= v373;
                --v372;
              }
              while (v372);
            }
            else
            {
              *v404 = (uint64_t *)((unint64_t)*v404 | (unint64_t)v431);
            }
            goto LABEL_60;
          }
          goto LABEL_302;
        }
        uint64_t v251 = *a1;
        uint64_t v27 = 1;
        LODWORD(v425) = v54;
        break;
      case 'C':
        v253 = *(_DWORD **)(a2 + 32);
        uint64_t v254 = v253[17];
        if ((v254 & 0x80000000) != 0) {
          v255 = (uint64_t *)(*(void *)(__n + 24) + 16 * (v254 & 0x7FFFFFFF) + 8);
        }
        else {
          v255 = (uint64_t *)(*(void *)(__n + 272) + 8 * v254);
        }
        uint64_t v256 = *v255;
        if (v256
          && ((*(unsigned char *)(v256 + 3) & 1) != 0 || (uint64_t v256 = *(void *)(v256 + 24)) != 0 && (*(unsigned char *)(v256 + 3) & 1) != 0))
        {
          uint64_t v257 = *(void *)(v256 + 8);
        }
        else
        {
          uint64_t v257 = 0;
        }
        if ((v254 & 0x80000000) != 0
          && (v254 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432))
        {
          unint64_t v258 = *(void *)(*(void *)(__n + 424) + 8 * (v254 & 0x7FFFFFFF));
        }
        else
        {
          unint64_t v258 = 0;
        }
        uint64_t v211 = v253[9];
        int v259 = v253[1];
        unint64_t v435 = v258;
        if (sub_1CBC3E4F4(a1, v257, &v435, &__src, a5, (a6 + 1), 0)) {
          goto LABEL_302;
        }
        uint64_t v260 = (uint64_t *)((v211 & 0x80000000) != 0
                         ? *(void *)(__n + 24) + 16 * (v211 & 0x7FFFFFFF) + 8
                         : *(void *)(__n + 272) + 8 * v211);
        uint64_t v261 = *v260;
        if (v261
          && ((*(unsigned char *)(v261 + 3) & 1) != 0 || (uint64_t v261 = *(void *)(v261 + 24)) != 0 && (*(unsigned char *)(v261 + 3) & 1) != 0))
        {
          uint64_t v262 = *(void *)(v261 + 8);
        }
        else
        {
          uint64_t v262 = 0;
        }
        unint64_t v263 = (v211 & 0x80000000) != 0
            && (v211 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(__n + 432)
             ? *(void *)(*(void *)(__n + 424) + 8 * (v211 & 0x7FFFFFFF))
             : 0;
        unint64_t v435 = v263;
        if (sub_1CBC3E4F4(a1, v262, &v435, &__src, &v429, (a6 + 1), 0)) {
          goto LABEL_302;
        }
        uint64_t v265 = *a1;
        *(void *)(v265 + 40) = *(void *)(a2 + 24);
        *(void *)(v265 + 48) = a2;
        if (v434 > 0x40)
        {
          unint64_t v374 = ((unint64_t)v434 + 63) >> 6;
          v375 = (uint64_t *)__src;
          v376 = (uint64_t *)*a5;
          v377 = (uint64_t *)__src;
          unint64_t v378 = v374;
          while (1)
          {
            uint64_t v380 = *v377++;
            uint64_t v379 = v380;
            uint64_t v381 = *v376++;
            if ((v379 & ~v381) != 0) {
              break;
            }
            if (!--v378) {
              goto LABEL_866;
            }
          }
          v382 = (uint64_t *)v429;
          while (1)
          {
            uint64_t v384 = *v375++;
            uint64_t v383 = v384;
            uint64_t v385 = *v382++;
            if ((v383 & ~v385) != 0) {
              break;
            }
            if (!--v374) {
              goto LABEL_874;
            }
          }
LABEL_509:
          if (sub_1CBAB2BDC(a1, a2, (uint64_t)&__src, v264)) {
            goto LABEL_302;
          }
          if (*((_DWORD *)a5 + 2) > 0x40u) {
            operator new[]();
          }
          unsigned int v266 = *((_DWORD *)a5 + 6);
          if (v266 >= 0x41) {
            operator new[]();
          }
          unint64_t v267 = (unint64_t)v431 & (unint64_t)*v404 | (unint64_t)v429 & *a5;
          if (*((_DWORD *)a5 + 2) > 0x40u) {
            operator new[]();
          }
          unsigned int v268 = *((_DWORD *)a5 + 6);
          if (v268 >= 0x41) {
            operator new[]();
          }
          unint64_t v269 = (unint64_t)v429 & (unint64_t)*v404 | (unint64_t)v431 & *a5;
          if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
            MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
          }
          *a5 = v267;
          *((_DWORD *)a5 + 2) = v266;
          if (*((_DWORD *)a5 + 6) >= 0x41u && *v404) {
            MEMORY[0x1D25D9CB0](*v404, 0x1000C8000313F17);
          }
          a5[2] = v269;
          *((_DWORD *)a5 + 6) = v268;
          goto LABEL_60;
        }
        if ((__src & ~*a5) != 0)
        {
          if ((__src & ~(unint64_t)v429) == 0)
          {
LABEL_874:
            uint64_t v251 = *a1;
            uint64_t v27 = 1;
            LODWORD(v425) = v259;
            unsigned int v426 = 1;
            LODWORD(v435) = v254;
            goto LABEL_487;
          }
          goto LABEL_509;
        }
LABEL_866:
        uint64_t v251 = *a1;
        uint64_t v27 = 1;
        LODWORD(v425) = v259;
        break;
      default:
        goto LABEL_271;
    }
    unsigned int v426 = 1;
    LODWORD(v435) = v211;
    goto LABEL_487;
  }
LABEL_13:
  if (a7) {
    goto LABEL_31;
  }
  if (!a6) {
    goto LABEL_149;
  }
  uint64_t v24 = *(void *)(a2 + 16);
  unsigned int v25 = *(unsigned __int8 *)(v24 + 4);
  if ((*(unsigned char *)(v24 + 8) & 2) == 0 || (int v105 = *(_DWORD *)(a2 + 40), v105 == v25))
  {
    unsigned int v26 = v25;
  }
  else
  {
    int v106 = v105 - 1;
    unsigned int v26 = v25;
    do
    {
      int v107 = *(_DWORD *)(v20 + 32 * v25);
      if ((v107 & 0x10000FF) != 0x1000000) {
        break;
      }
      v26 += (v107 & 0x2000000) == 0;
      if (v106 == v25) {
        break;
      }
      ++v25;
    }
    while ((v107 & 0x2000000) == 0);
  }
  if (v26 != 1)
  {
LABEL_149:
    LODWORD(v436) = v15;
    if (v15) {
      unint64_t v92 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    }
    else {
      unint64_t v92 = 0;
    }
    unint64_t v435 = v92;
    unint64_t v18 = v92;
    unint64_t __src = v92;
    unsigned int v16 = v436;
    unsigned int v434 = v436;
    goto LABEL_35;
  }
  sub_1CC6DEE8C(a1[3], v21, (uint64_t)&v429);
  if (v430 < v15)
  {
    sub_1CB9F87DC((uint64_t *)&v429, v15, (uint64_t)&v435);
  }
  else if (v430 > v15)
  {
    if (v430 >= 0x41) {
      uint64_t v82 = (uint64_t *)v429;
    }
    else {
      uint64_t v82 = (uint64_t *)&v429;
    }
    unint64_t v83 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    unint64_t v84 = v83;
    if (!v15) {
      unint64_t v84 = 0;
    }
    uint64_t v85 = *v82;
    if (v432 >= 0x41) {
      uint64_t v86 = v431;
    }
    else {
      uint64_t v86 = &v431;
    }
    if (!v15) {
      unint64_t v83 = 0;
    }
    unint64_t v87 = (void **)(v83 & *v86);
    LODWORD(v436) = v15;
    unint64_t v435 = v84 & v85;
    LODWORD(v438) = v15;
    v437 = v87;
  }
  else
  {
    LODWORD(v436) = v430;
    if (v430 > 0x40) {
      operator new[]();
    }
    unint64_t v435 = (unint64_t)v429;
    LODWORD(v438) = v432;
    if (v432 > 0x40) {
      operator new[]();
    }
    v437 = (void **)v431;
  }
  if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
    MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
  }
  *a5 = v435;
  *((_DWORD *)a5 + 2) = v436;
  LODWORD(v436) = 0;
  if (*((_DWORD *)a5 + 6) >= 0x41u && *v404)
  {
    MEMORY[0x1D25D9CB0](*v404, 0x1000C8000313F17);
    unsigned int v306 = v436;
    a5[2] = (unint64_t)v437;
    *((_DWORD *)a5 + 6) = v438;
    LODWORD(v438) = 0;
    if (v306 >= 0x41 && v435) {
      MEMORY[0x1D25D9CB0](v435, 0x1000C8000313F17);
    }
  }
  else
  {
    a5[2] = (unint64_t)v437;
    *((_DWORD *)a5 + 6) = v438;
    LODWORD(v438) = 0;
  }
  if (v432 >= 0x41 && v431) {
    MEMORY[0x1D25D9CB0](v431, 0x1000C8000313F17);
  }
  if (v430 >= 0x41 && v429) {
    MEMORY[0x1D25D9CB0](v429, 0x1000C8000313F17);
  }
  uint64_t v27 = 0;
LABEL_67:
  if (v434 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return v27;
}

uint64_t sub_1CBC42E88(uint64_t *a1, uint64_t a2)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*a1 + 8);
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = (*(uint64_t (**)(void, void))(**(void **)(v4 + 8) + 16))(*(void *)(v4 + 8), *(void *)v4);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 168))(v6);
  uint64_t v8 = v7;
  int v9 = **(unsigned __int16 **)(a2 + 16);
  if ((v9 - 118) < 2 || v9 == 126)
  {
    uint64_t v10 = *(void *)(a2 + 32);
    uint64_t v11 = *(unsigned int *)(v10 + 36);
    if ((v11 & 0x80000000) != 0) {
      uint64_t v12 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v12 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v11);
    }
    uint64_t v13 = *v12;
    if (!v13) {
      return 0;
    }
    if ((*(unsigned char *)(v13 + 3) & 1) == 0)
    {
      uint64_t v13 = *(void *)(v13 + 24);
      if (!v13 || (*(unsigned char *)(v13 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v14 = *(void *)(v13 + 8);
    if (!v14) {
      return 0;
    }
    int v15 = **(unsigned __int16 **)(v14 + 16);
    if ((v15 & 0xFFFE) != 0x34) {
      return 0;
    }
    int v71 = *(_DWORD *)(v10 + 4);
    if (v71 < 0 && (uint64_t v72 = v71 & 0x7FFFFFFF, v72 < *(_DWORD *)(v5 + 432))) {
      uint64_t v73 = *(void *)(*(void *)(v5 + 424) + 8 * v72);
    }
    else {
      uint64_t v73 = 0;
    }
    uint64_t v105 = v73;
    uint64_t v74 = *(void *)(v14 + 32);
    int v75 = *(_DWORD *)(v74 + 36);
    if (v75 < 0 && (uint64_t v76 = v75 & 0x7FFFFFFF, v76 < *(_DWORD *)(v5 + 432))) {
      uint64_t v77 = *(void *)(*(void *)(v5 + 424) + 8 * v76);
    }
    else {
      uint64_t v77 = 0;
    }
    uint64_t v106 = v77;
    int v78 = *(_DWORD *)(v74 + 68);
    if (v78 < 0 && (uint64_t v79 = v78 & 0x7FFFFFFF, v79 < *(_DWORD *)(v5 + 432))) {
      uint64_t v80 = *(void *)(*(void *)(v5 + 424) + 8 * v79);
    }
    else {
      uint64_t v80 = 0;
    }
    uint64_t v107 = v80;
    LODWORD(v100) = v15;
    unint64_t v101 = &v105;
    uint64_t v102 = 3;
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    if (!sub_1CC72D410(v7, (uint64_t)&v100))
    {
      uint64_t v81 = (void *)*a1;
      uint64_t v82 = *(llvm::MachineFunction **)(*a1 + 8);
      uint64_t v83 = *(void *)(v81[2] + 8) + 48 * **(unsigned __int16 **)(v14 + 16);
      unint64_t v84 = (unsigned __int8 *)v81[4];
      uint64_t v100 = (uint64_t)v84;
      if (v84) {
        llvm::MetadataTracking::track((uint64_t)&v100, v84, 2);
      }
      MachineInstr = llvm::MachineFunction::CreateMachineInstr(v82, v83, (unsigned __int8 **)&v100, 0);
      if (v100) {
        llvm::MetadataTracking::untrack((uint64_t)&v100, (unsigned __int8 *)v100);
      }
      uint64_t v85 = (unint64_t *)v81[6];
      uint64_t v86 = *(void *)(v81[5] + 40);
      *((void *)MachineInstr + 3) = v86;
      uint64_t v87 = *(void *)(v86 + 32);
      uint64_t v88 = *((unsigned int *)MachineInstr + 10);
      if (v88)
      {
        uint64_t v92 = *((void *)MachineInstr + 4);
        uint64_t v93 = *(void *)(v87 + 40);
        uint64_t v94 = 32 * v88;
        do
        {
          if (!*(unsigned char *)v92)
          {
            uint64_t v95 = *(unsigned int *)(v92 + 4);
            if ((int)v95 >= 0) {
              uint64_t v96 = (uint64_t *)(*(void *)(v93 + 272) + 8 * v95);
            }
            else {
              uint64_t v96 = (uint64_t *)(*(void *)(v93 + 24) + 16 * (v95 & 0x7FFFFFFF) + 8);
            }
            uint64_t v97 = *v96;
            if (*v96)
            {
              uint64_t v98 = *(void *)(v97 + 16);
              *(void *)(v97 + 16) = v92;
              *(void *)(v92 + 16) = v98;
              if (*(unsigned char *)(v92 + 3))
              {
                *(void *)(v92 + 24) = v97;
              }
              else
              {
                *(void *)(v92 + 24) = 0;
                uint64_t v96 = (uint64_t *)(v98 + 24);
              }
            }
            else
            {
              *(void *)(v92 + 16) = v92;
              *(void *)(v92 + 24) = 0;
            }
            *uint64_t v96 = v92;
          }
          v92 += 32;
          v94 -= 32;
        }
        while (v94);
      }
      uint64_t v89 = *(void *)(v87 + 728);
      if (v89) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v89 + 24))(v89, MachineInstr);
      }
      unint64_t v90 = *v85 & 0xFFFFFFFFFFFFFFF8;
      *(void *)MachineInstr = v90 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v85;
      *(void *)(v90 + 8) = MachineInstr;
      *uint64_t v85 = *v85 & 7 | (unint64_t)MachineInstr;
      uint64_t v91 = v81[7];
      if (v91) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v91 + 24))(v91, MachineInstr);
      }
      llvm::MachineInstr::addOperand(MachineInstr, v82, *(const llvm::MachineOperand **)(a2 + 32));
      llvm::MachineInstr::addOperand(MachineInstr, v82, (const llvm::MachineOperand *)(*(void *)(v14 + 32) + 32));
      llvm::MachineInstr::addOperand(MachineInstr, v82, (const llvm::MachineOperand *)(*(void *)(v14 + 32) + 64));
      llvm::MachineInstr::addOperand(MachineInstr, v82, (const llvm::MachineOperand *)(*(void *)(v14 + 32) + 96));
      __int16 v43 = *(_WORD *)(v14 + 44);
      goto LABEL_36;
    }
    int v9 = **(unsigned __int16 **)(a2 + 16);
  }
  if ((v9 & 0xFFFE) != 0x34) {
    return 0;
  }
  unint64_t v17 = *(_DWORD **)(a2 + 32);
  uint64_t v18 = v17[9];
  if ((v18 & 0x80000000) != 0) {
    size_t v19 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
  }
  else {
    size_t v19 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v18);
  }
  uint64_t v20 = *v19;
  if (v20 && ((*(unsigned char *)(v20 + 3) & 1) != 0 || (uint64_t v20 = *(void *)(v20 + 24)) != 0 && (*(unsigned char *)(v20 + 3) & 1) != 0))
  {
    uint64_t v21 = *(void *)(v20 + 8);
    uint64_t v22 = (const llvm::MachineOperand *)(v17 + 8);
    uint64_t v23 = v17 + 16;
    if (v21 && (**(unsigned __int16 **)(v21 + 16) | 8) == 0x7E)
    {
      int v55 = v17[1];
      if (v55 < 0 && (uint64_t v56 = v55 & 0x7FFFFFFF, v56 < *(_DWORD *)(v5 + 432))) {
        uint64_t v57 = *(void *)(*(void *)(v5 + 424) + 8 * v56);
      }
      else {
        uint64_t v57 = 0;
      }
      uint64_t v105 = v57;
      int v58 = *(_DWORD *)(*(void *)(v21 + 32) + 36);
      if (v58 < 0 && (uint64_t v59 = v58 & 0x7FFFFFFF, v59 < *(_DWORD *)(v5 + 432))) {
        uint64_t v60 = *(void *)(*(void *)(v5 + 424) + 8 * v59);
      }
      else {
        uint64_t v60 = 0;
      }
      uint64_t v106 = v60;
      int v61 = v17[17];
      if (v61 < 0 && (uint64_t v62 = v61 & 0x7FFFFFFF, v62 < *(_DWORD *)(v5 + 432))) {
        uint64_t v63 = *(void *)(*(void *)(v5 + 424) + 8 * v62);
      }
      else {
        uint64_t v63 = 0;
      }
      uint64_t v107 = v63;
      LODWORD(v100) = v9;
      unint64_t v101 = &v105;
      uint64_t v102 = 3;
      uint64_t v103 = 0;
      uint64_t v104 = 0;
      if (!sub_1CC72D410(v8, (uint64_t)&v100))
      {
        uint64_t v24 = (const llvm::MachineOperand *)(*(void *)(v21 + 32) + 32);
        goto LABEL_18;
      }
    }
  }
  else
  {
    uint64_t v22 = (const llvm::MachineOperand *)(v17 + 8);
    uint64_t v23 = v17 + 16;
  }
  uint64_t v24 = v22;
LABEL_18:
  int v25 = v17[17];
  if ((v25 & 0x80000000) == 0 || (uint64_t v26 = v25 & 0x7FFFFFFF, v26 >= *(_DWORD *)(v5 + 432)))
  {
    unint64_t v99 = 0;
    goto LABEL_38;
  }
  unint64_t v99 = *(void *)(*(void *)(v5 + 424) + 8 * v26);
  uint64_t v27 = v23;
  if (v99)
  {
    unint64_t v29 = sub_1CB8F1DC4(&v99);
    if (v28 == 1) {
    uint64_t v27 = v23;
    }
    if (v29 >= 0x11)
    {
      sub_1CC73C210(v17[17], v5, (uint64_t)&v100);
      if ((_BYTE)v102)
      {
        if (v101 >= 0x41)
        {
          if (v100) {
            MEMORY[0x1D25D9CB0](v100, 0x1000C8000313F17);
          }
        }
        else
        {
          unint64_t v44 = v100 << -(uint64_t)v101 >> -(uint64_t)v101;
          if (!(v44 >> 16))
          {
            uint64_t v45 = *(void *)(a2 + 32);
            int v46 = *(_DWORD *)(v45 + 4);
            if (v46 < 0 && (uint64_t v47 = v46 & 0x7FFFFFFF, v47 < *(_DWORD *)(v5 + 432))) {
              uint64_t v48 = *(void *)(*(void *)(v5 + 424) + 8 * v47);
            }
            else {
              uint64_t v48 = 0;
            }
            int v49 = **(unsigned __int16 **)(a2 + 16);
            uint64_t v105 = v48;
            int v50 = *(_DWORD *)(v45 + 36);
            if (v50 < 0 && (uint64_t v51 = v50 & 0x7FFFFFFF, v51 < *(_DWORD *)(v5 + 432))) {
              uint64_t v52 = *(void *)(*(void *)(v5 + 424) + 8 * v51);
            }
            else {
              uint64_t v52 = 0;
            }
            uint64_t v106 = v52;
            uint64_t v107 = 129;
            LODWORD(v100) = v49;
            unint64_t v101 = &v105;
            uint64_t v102 = 3;
            uint64_t v103 = 0;
            uint64_t v104 = 0;
            uint64_t v27 = v23;
            if (!sub_1CC72D410(v8, (uint64_t)&v100))
            {
              uint64_t v53 = *a1;
              uint64_t v100 = 129;
              LODWORD(v101) = 0;
              sub_1CC7362A8(v53, (unint64_t *)&v100, v44);
              uint64_t v27 = *(_DWORD **)(v54 + 32);
            }
            goto LABEL_24;
          }
        }
      }
LABEL_38:
      uint64_t v27 = v23;
    }
  }
LABEL_24:
  if (v22 == v24 && v23 == v27) {
    return 0;
  }
  uint64_t v30 = (void *)*a1;
  unsigned int v31 = *(llvm::MachineFunction **)(*a1 + 8);
  uint64_t v32 = *(void *)(v30[2] + 8) + 48 * **(unsigned __int16 **)(a2 + 16);
  uint64_t v33 = (unsigned __int8 *)v30[4];
  uint64_t v100 = (uint64_t)v33;
  if (v33) {
    llvm::MetadataTracking::track((uint64_t)&v100, v33, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v31, v32, (unsigned __int8 **)&v100, 0);
  if (v100) {
    llvm::MetadataTracking::untrack((uint64_t)&v100, (unsigned __int8 *)v100);
  }
  int v35 = (unint64_t *)v30[6];
  uint64_t v36 = *(void *)(v30[5] + 40);
  *((void *)MachineInstr + 3) = v36;
  uint64_t v37 = *(void *)(v36 + 32);
  uint64_t v38 = *((unsigned int *)MachineInstr + 10);
  if (v38)
  {
    uint64_t v64 = *((void *)MachineInstr + 4);
    uint64_t v65 = *(void *)(v37 + 40);
    uint64_t v66 = 32 * v38;
    do
    {
      if (!*(unsigned char *)v64)
      {
        uint64_t v67 = *(unsigned int *)(v64 + 4);
        if ((int)v67 >= 0) {
          unint64_t v68 = (uint64_t *)(*(void *)(v65 + 272) + 8 * v67);
        }
        else {
          unint64_t v68 = (uint64_t *)(*(void *)(v65 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
        }
        uint64_t v69 = *v68;
        if (*v68)
        {
          uint64_t v70 = *(void *)(v69 + 16);
          *(void *)(v69 + 16) = v64;
          *(void *)(v64 + 16) = v70;
          if (*(unsigned char *)(v64 + 3))
          {
            *(void *)(v64 + 24) = v69;
          }
          else
          {
            *(void *)(v64 + 24) = 0;
            unint64_t v68 = (uint64_t *)(v70 + 24);
          }
        }
        else
        {
          *(void *)(v64 + 16) = v64;
          *(void *)(v64 + 24) = 0;
        }
        *unint64_t v68 = v64;
      }
      v64 += 32;
      v66 -= 32;
    }
    while (v66);
  }
  uint64_t v39 = *(void *)(v37 + 728);
  if (v39) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v39 + 24))(v39, MachineInstr);
  }
  unint64_t v40 = *v35 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v40 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v35;
  *(void *)(v40 + 8) = MachineInstr;
  *int v35 = *v35 & 7 | (unint64_t)MachineInstr;
  uint64_t v41 = v30[7];
  if (v41) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v41 + 24))(v41, MachineInstr);
  }
  llvm::MachineInstr::addOperand(MachineInstr, v31, *(const llvm::MachineOperand **)(a2 + 32));
  llvm::MachineInstr::addOperand(MachineInstr, v31, v24);
  int v42 = v27[1];
  unint64_t v101 = 0;
  uint64_t v102 = 0;
  LODWORD(v100) = 0;
  HIDWORD(v100) = v42;
  uint64_t v103 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v31, (const llvm::MachineOperand *)&v100);
  llvm::MachineInstr::addOperand(MachineInstr, v31, (const llvm::MachineOperand *)(*(void *)(a2 + 32) + 96));
  __int16 v43 = *(_WORD *)(a2 + 44);
LABEL_36:
  *((_WORD *)MachineInstr + 22) = *((_WORD *)MachineInstr + 22) & 0xC | v43 & 0xFFF3;
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  return 1;
}

#error "1CBC4375C: too big function (funcsize=0)"

uint64_t sub_1CBC53DA8(unsigned int a1, uint64_t a2)
{
  if ((a1 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v5 = *v4;
  if (!*v4) {
    return 1;
  }
  while ((*(unsigned char *)(v5 + 3) & 1) != 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5) {
      return 1;
    }
  }
  uint64_t v7 = *(void *)(v5 + 8);
LABEL_8:
  uint64_t v8 = v7;
  int v9 = **(unsigned __int16 **)(v7 + 16);
  if ((v9 - 177) <= 7 && ((1 << (v9 + 79)) & 0x87) != 0)
  {
    uint64_t v13 = *(unsigned int **)(v8 + 32);
    goto LABEL_28;
  }
  if (v9 == 51 || v9 == 335)
  {
    uint64_t v13 = *(unsigned int **)(v8 + 32);
    if (v13[17] != a1 && v13[25] != a1)
    {
LABEL_28:
      if (sub_1CBC53DA8(v13[1], a2)) {
        goto LABEL_24;
      }
    }
  }
  else
  {
    if ((v9 & 0xFFFE) == 0x74)
    {
      uint64_t v11 = *(unsigned int *)(v8 + 40);
      if (!v11) {
        return 0;
      }
      uint64_t v12 = (_DWORD *)(*(void *)(v8 + 32) + 16);
      while (*((unsigned char *)v12 - 16) != 17)
      {
        v12 += 8;
        if (!--v11) {
          goto LABEL_22;
        }
      }
      if (*v12 == 2131) {
        goto LABEL_24;
      }
    }
LABEL_22:
    if (v9 == 163 && *(_DWORD *)(*(void *)(v8 + 32) + 36) != *(_DWORD *)(*(void *)(v8 + 32) + 68))
    {
LABEL_24:
      while (1)
      {
        uint64_t v5 = *(void *)(v5 + 24);
        if (!v5) {
          return 1;
        }
        if ((*(unsigned char *)(v5 + 3) & 1) == 0)
        {
          uint64_t v7 = *(void *)(v5 + 8);
          if (v7 != v8) {
            goto LABEL_8;
          }
        }
      }
    }
  }
  return 0;
}

int *sub_1CBC53F14(int *result, int *a2, uint64_t a3, char a4)
{
  int v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*(a2 - 1) < v10[1])
                {
                  int v45 = *v10;
                  *uint64_t v10 = *(a2 - 2);
                  *(a2 - 2) = v45;
                  int v46 = v10[1];
                  v10[1] = *(a2 - 1);
                  *(a2 - 1) = v46;
                }
                break;
              case 3:
                uint64_t result = sub_1CBAC881C(v10, v10 + 2, a2 - 2);
                break;
              case 4:
                uint64_t result = sub_1CBAC8B10(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5:
                uint64_t result = sub_1CBAC8B10(v10, v10 + 2, v10 + 4, v10 + 6);
                if (*(a2 - 1) < v10[7])
                {
                  int v47 = v10[6];
                  v10[6] = *(a2 - 2);
                  *(a2 - 2) = v47;
                  int v48 = v10[7];
                  v10[7] = *(a2 - 1);
                  *(a2 - 1) = v48;
                  unsigned int v49 = v10[7];
                  unsigned int v50 = v10[5];
                  if (v49 < v50)
                  {
                    int v51 = v10[6];
                    unsigned int v52 = v10[3];
                    int v53 = v10[4];
                    v10[4] = v51;
                    v10[5] = v49;
                    v10[6] = v53;
                    v10[7] = v50;
                    if (v49 < v52)
                    {
                      unsigned int v54 = v10[1];
                      int v55 = v10[2];
                      v10[2] = v51;
                      v10[3] = v49;
                      v10[4] = v55;
                      v10[5] = v52;
                      if (v49 < v54)
                      {
                        int v56 = *v10;
                        *uint64_t v10 = v51;
                        v10[1] = v49;
                        v10[2] = v56;
                        v10[3] = v54;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v57 = v10 + 2;
            BOOL v59 = v10 == a2 || v57 == a2;
            if (a4)
            {
              if (!v59)
              {
                uint64_t v60 = 0;
                int v61 = v10;
                do
                {
                  unsigned int v62 = v61[3];
                  unsigned int v63 = v61[1];
                  int v61 = v57;
                  if (v62 < v63)
                  {
                    int v64 = *v57;
                    unsigned int v65 = v61[1];
                    uint64_t v66 = v60;
                    while (1)
                    {
                      uint64_t v67 = (char *)v10 + v66;
                      int v68 = *(int *)((char *)v10 + v66 + 4);
                      *((_DWORD *)v67 + 2) = *(int *)((char *)v10 + v66);
                      *((_DWORD *)v67 + 3) = v68;
                      if (!v66) {
                        break;
                      }
                      v66 -= 8;
                      if (*((_DWORD *)v67 - 1) <= v65)
                      {
                        uint64_t v69 = (int *)((char *)v10 + v66 + 8);
                        goto LABEL_83;
                      }
                    }
                    uint64_t v69 = v10;
LABEL_83:
                    *uint64_t v69 = v64;
                    v69[1] = v65;
                  }
                  uint64_t v57 = v61 + 2;
                  v60 += 8;
                }
                while (v61 + 2 != a2);
              }
            }
            else if (!v59)
            {
              uint64_t v98 = v10 + 3;
              do
              {
                unsigned int v99 = v9[3];
                unsigned int v100 = v9[1];
                int v9 = v57;
                if (v99 < v100)
                {
                  uint64_t v101 = *(void *)v57;
                  uint64_t v102 = HIDWORD(*(void *)v9);
                  uint64_t v103 = v98;
                  do
                  {
                    uint64_t v104 = v103;
                    unsigned int v105 = *(v103 - 4);
                    *(v103 - 1) = *(v103 - 3);
                    int v106 = *(v103 - 2);
                    v103 -= 2;
                    *uint64_t v104 = v106;
                  }
                  while (v105 > v102);
                  *(v103 - 1) = v101;
                  *uint64_t v103 = v102;
                }
                uint64_t v57 = v9 + 2;
                v98 += 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v70 = (unint64_t)(v12 - 2) >> 1;
              int64_t v71 = v70;
              do
              {
                int64_t v72 = v71;
                if (v70 >= v71)
                {
                  uint64_t v73 = (2 * v71) | 1;
                  uint64_t v74 = &v10[2 * v73];
                  if (2 * v72 + 2 < v12)
                  {
                    unsigned int v75 = v74[1];
                    unsigned int v76 = v74[3];
                    v74 += 2 * (v75 < v76);
                    if (v75 < v76) {
                      uint64_t v73 = 2 * v72 + 2;
                    }
                  }
                  if (v74[1] >= v10[2 * v72 + 1])
                  {
                    uint64_t v77 = &v10[2 * v72];
                    int v78 = *v77;
                    unsigned int v79 = v77[1];
                    do
                    {
                      uint64_t v80 = v77;
                      uint64_t v77 = v74;
                      *uint64_t v80 = *v74;
                      v80[1] = v74[1];
                      if (v70 < v73) {
                        break;
                      }
                      uint64_t v81 = (2 * v73) | 1;
                      uint64_t v74 = &v10[2 * v81];
                      uint64_t v82 = 2 * v73 + 2;
                      if (v82 < v12)
                      {
                        unsigned int v83 = v74[1];
                        uint64_t result = (int *)v74[3];
                        v74 += 2 * (v83 < result);
                        if (v83 < result) {
                          uint64_t v81 = v82;
                        }
                      }
                      uint64_t v73 = v81;
                    }
                    while (v74[1] >= v79);
                    *uint64_t v77 = v78;
                    v77[1] = v79;
                  }
                }
                int64_t v71 = v72 - 1;
              }
              while (v72);
              do
              {
                uint64_t v84 = 0;
                uint64_t v85 = *(void *)v10;
                uint64_t v86 = v10;
                do
                {
                  uint64_t v87 = &v86[2 * v84 + 2];
                  uint64_t v88 = (2 * v84) | 1;
                  uint64_t v89 = 2 * v84 + 2;
                  if (v89 < v12)
                  {
                    unsigned int v90 = v87[1];
                    unsigned int v91 = v87[3];
                    v87 += 2 * (v90 < v91);
                    if (v90 < v91) {
                      uint64_t v88 = v89;
                    }
                  }
                  *uint64_t v86 = *v87;
                  v86[1] = v87[1];
                  uint64_t v86 = v87;
                  uint64_t v84 = v88;
                }
                while (v88 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v87 == a2 - 2)
                {
                  *(void *)uint64_t v87 = v85;
                }
                else
                {
                  *uint64_t v87 = *(a2 - 2);
                  v87[1] = *(a2 - 1);
                  *((void *)a2 - 1) = v85;
                  uint64_t v92 = (char *)v87 - (char *)v10 + 8;
                  if (v92 >= 9)
                  {
                    unint64_t v93 = (((unint64_t)v92 >> 3) - 2) >> 1;
                    if (v10[2 * v93 + 1] < v87[1])
                    {
                      int v94 = *v87;
                      unsigned int v95 = v87[1];
                      do
                      {
                        uint64_t v96 = v87;
                        uint64_t v87 = &v10[2 * v93];
                        *uint64_t v96 = *v87;
                        v96[1] = v87[1];
                        if (!v93) {
                          break;
                        }
                        unint64_t v93 = (v93 - 1) >> 1;
                      }
                      while (v10[2 * v93 + 1] < v95);
                      *uint64_t v87 = v94;
                      v87[1] = v95;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[2 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CBAC881C(v9, &v9[2 * ((unint64_t)v12 >> 1)], a2 - 2);
            sub_1CBAC881C(v9 + 2, v14 - 2, a2 - 4);
            sub_1CBAC881C(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = sub_1CBAC881C(v14 - 2, v14, &v9[2 * v13 + 2]);
            uint64_t v15 = *(void *)v9;
            *(void *)int v9 = *(void *)v14;
            *(void *)uint64_t v14 = v15;
          }
          else
          {
            uint64_t result = sub_1CBAC881C(&v9[2 * ((unint64_t)v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(v9 - 1) < v9[1]) {
            break;
          }
          uint64_t v32 = *(void *)v9;
          uint64_t v33 = HIDWORD(*(void *)v9);
          if (*(a2 - 1) <= v33)
          {
            uint64_t v36 = v9 + 2;
            do
            {
              uint64_t v10 = v36;
              if (v36 >= a2) {
                break;
              }
              unsigned int v37 = v36[1];
              v36 += 2;
            }
            while (v37 <= v33);
          }
          else
          {
            uint64_t v34 = v9;
            do
            {
              uint64_t v10 = v34 + 2;
              unsigned int v35 = v34[3];
              v34 += 2;
            }
            while (v35 <= v33);
          }
          uint64_t v38 = a2;
          if (v10 < a2)
          {
            uint64_t v39 = a2;
            do
            {
              uint64_t v38 = v39 - 2;
              unsigned int v40 = *(v39 - 1);
              v39 -= 2;
            }
            while (v40 > v33);
          }
          while (v10 < v38)
          {
            int v41 = *v10;
            *uint64_t v10 = *v38;
            *uint64_t v38 = v41;
            int v42 = v10[1];
            v10[1] = v38[1];
            v38[1] = v42;
            do
            {
              unsigned int v43 = v10[3];
              v10 += 2;
            }
            while (v43 <= v33);
            do
            {
              unsigned int v44 = *(v38 - 1);
              v38 -= 2;
            }
            while (v44 > v33);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            *int v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v32;
          *(v10 - 1) = v33;
        }
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)v9;
        uint64_t v18 = HIDWORD(*(void *)v9);
        do
        {
          unsigned int v19 = v9[v16 + 3];
          v16 += 2;
        }
        while (v19 < v18);
        uint64_t v20 = &v9[v16];
        uint64_t v21 = a2;
        if (v16 == 2)
        {
          uint64_t v24 = a2;
          while (v20 < v24)
          {
            uint64_t v22 = v24 - 2;
            unsigned int v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 < v18) {
              goto LABEL_22;
            }
          }
          uint64_t v22 = v24;
        }
        else
        {
          do
          {
            uint64_t v22 = v21 - 2;
            unsigned int v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 >= v18);
        }
LABEL_22:
        uint64_t v10 = v20;
        if (v20 < v22)
        {
          uint64_t v26 = v22;
          do
          {
            int v27 = *v10;
            *uint64_t v10 = *v26;
            *uint64_t v26 = v27;
            int v28 = v10[1];
            v10[1] = v26[1];
            v26[1] = v28;
            do
            {
              unsigned int v29 = v10[3];
              v10 += 2;
            }
            while (v29 < v18);
            do
            {
              unsigned int v30 = *(v26 - 1);
              v26 -= 2;
            }
            while (v30 >= v18);
          }
          while (v10 < v26);
        }
        if (v10 - 2 != v9)
        {
          *int v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v17;
        *(v10 - 1) = v18;
        if (v20 >= v22) {
          break;
        }
LABEL_33:
        uint64_t result = (int *)sub_1CBC53F14(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_1CBC546B0(v9, v10 - 2);
      uint64_t result = (int *)sub_1CBC546B0(v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 2;
    if (!v31) {
      continue;
    }
    return result;
  }
}

BOOL sub_1CBC546B0(int *a1, int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < a1[1])
      {
        int v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        int v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CBAC881C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CBAC8B10(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CBAC8B10(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) < a1[7])
      {
        int v18 = a1[6];
        a1[6] = *(a2 - 2);
        *(a2 - 2) = v18;
        int v19 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v19;
        unsigned int v20 = a1[7];
        unsigned int v21 = a1[5];
        if (v20 < v21)
        {
          int v22 = a1[6];
          unsigned int v23 = a1[3];
          int v24 = a1[4];
          a1[4] = v22;
          a1[5] = v20;
          a1[6] = v24;
          a1[7] = v21;
          if (v20 < v23)
          {
            unsigned int v25 = a1[1];
            int v26 = a1[2];
            a1[2] = v22;
            a1[3] = v20;
            a1[4] = v26;
            a1[5] = v23;
            if (v20 < v25)
            {
              int v27 = *a1;
              *a1 = v22;
              a1[1] = v20;
              a1[2] = v27;
              a1[3] = v25;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 4;
      sub_1CBAC881C(a1, a1 + 2, a1 + 4);
      int v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (v9[1] < v8[1])
    {
      int v12 = *v9;
      unsigned int v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        uint64_t v15 = (int *)((char *)a1 + v14);
        int v16 = *(int *)((char *)a1 + v14 + 20);
        v15[6] = *(int *)((char *)a1 + v14 + 16);
        v15[7] = v16;
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (v15[3] <= v13)
        {
          uint64_t v17 = (int *)((char *)a1 + v14 + 24);
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *uint64_t v17 = v12;
      v17[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_1CBC548C8()
{
}

uint64_t sub_1CBC54964(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC23D8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F25FCA80;
  *(void *)(a1 + 32) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC23E0, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CBC548C8;
    v6[1] = &PassRegistry;
    BOOL v5 = v6;
    std::__call_once(&qword_1EBCC23E0, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBC54A18()
{
}

void sub_1CBC54A5C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBC54A94(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(*(void *)(a1 + 32) + 1020) & 1) != 0 || (v2 = a2 + 72, uint64_t v3 = *(void *)(a2 + 80), v3 == a2 + 72))
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = v3 - 24;
      if (!v3) {
        uint64_t v5 = 0;
      }
      uint64_t v6 = v5 + 40;
      for (uint64_t i = *(void *)(v5 + 48); i != v6; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v8 = i - 24;
        }
        else {
          uint64_t v8 = 0;
        }
        if (sub_1CB845E74(v8))
        {
          unsigned int v9 = *(unsigned __int8 *)(v8 + 17);
          if (v9 >= 0xFE)
          {
            *(unsigned char *)(v8 + 17) = v9 & 1 | 0xF2;
            char v4 = 1;
          }
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

uint64_t sub_1CBC54B50(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 34) & 0x40) == 0) {
    return 0;
  }
  uint64_t v2 = ***(void ***)a1;
  uint64_t v28 = a1;
  int v3 = *(_DWORD *)(v2 + 2520);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 2504);
    int v5 = v3 - 1;
    unsigned int v6 = (v3 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    int v7 = (void *)(v4 + 24 * v6);
    uint64_t v8 = *v7;
    if (*v7 == a1) {
      goto LABEL_5;
    }
    int v22 = 0;
    int v23 = 1;
    while (v8 != -4096)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v8 == -8192;
      }
      if (v24) {
        int v22 = v7;
      }
      unsigned int v25 = v6 + v23++;
      unsigned int v6 = v25 & v5;
      int v7 = (void *)(v4 + 24 * (v25 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a1) {
        goto LABEL_5;
      }
    }
    if (v22) {
      int v26 = v22;
    }
    else {
      int v26 = v7;
    }
  }
  else
  {
    int v26 = 0;
  }
  int v7 = sub_1CC5BF31C(v2 + 2504, (uint64_t)&v28, &v28, v26);
  uint64_t v27 = v28;
  v7[1] = 0;
  v7[2] = 0;
  *int v7 = v27;
LABEL_5:
  uint64_t v10 = v7[1];
  uint64_t v9 = v7[2];
  if (v9 == 21)
  {
    if (*(void *)v10 == 0x766972642E616972
      && *(void *)(v10 + 8) == 0x6D617261705F7265
      && *(void *)(v10 + 13) == 0x73726574656D6172)
    {
      return 2;
    }
    uint64_t v15 = *(void *)v10 ^ 0x5F7961722E616972;
    uint64_t v16 = *(void *)(v10 + 8) ^ 0x6465646E65747865;
    uint64_t v17 = *(void *)(v10 + 13);
    unsigned int v21 = 1600415076;
    goto LABEL_32;
  }
  if (v9 == 19)
  {
    uint64_t v15 = *(void *)v10 ^ 0x5F7961722E616972;
    uint64_t v16 = *(void *)(v10 + 8) ^ 0x645F726576697264;
    uint64_t v17 = *(void *)(v10 + 11);
    unsigned int v21 = 1601332598;
LABEL_32:
    uint64_t v18 = v21 | 0x6174616400000000;
    goto LABEL_33;
  }
  if (v9 != 17) {
    return 0;
  }
  BOOL v11 = *(void *)v10 == 0x656B6F742E616972 && *(void *)(v10 + 8) == 0x7265666675625F6ELL;
  if (v11 && *(unsigned char *)(v10 + 16) == 115) {
    return 0;
  }
  if (*(void *)v10 == 0x5F7961722E616972
    && *(void *)(v10 + 8) == 0x7461645F65726F63
    && *(unsigned char *)(v10 + 16) == 97)
  {
    return 1;
  }
  uint64_t v15 = *(void *)v10 ^ 0x5F7961722E616972;
  uint64_t v16 = *(void *)(v10 + 8) ^ 0x7461645F72657375;
  uint64_t v17 = *(unsigned __int8 *)(v10 + 16);
  uint64_t v18 = 97;
LABEL_33:
  if (v15 | v16 | v17 ^ v18) {
    return 0;
  }
  else {
    return 3;
  }
}

BOOL sub_1CBC54DD8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = (int *)(a1 + 34376);
  BOOL v11 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v12 = *((void *)v11 + 1);
  int v13 = *v11;
  if ((v12 & 8) != 0)
  {
    if ((v13 - 263) <= 1) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v14 = sub_1CBE52E8C(*v11);
    if ((v14 & 0xFF00000000) == 0) {
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
    }
    if (v14 == 18) {
      goto LABEL_6;
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0xC) == 0 || (*(_WORD *)(a2 + 44) & 4) != 0)
  {
    if ((v12 & 0x80) == 0 && (v12 & 0x420) != 0x420) {
      goto LABEL_15;
    }
LABEL_6:
    sub_1CBC554A4(a3, *((uint64_t **)v10 + 3), (uint64_t *)(*((void *)v10 + 3) + 8 * v10[8]));
    return 0;
  }
  if ((v12 & 0x80) != 0) {
    goto LABEL_6;
  }
  uint64_t v19 = a2;
  while ((*(_WORD *)(v19 + 44) & 8) != 0)
  {
    uint64_t v19 = *(void *)(v19 + 8);
    if ((*(unsigned char *)(*(void *)(v19 + 16) + 8) & 0x80) != 0) {
      goto LABEL_6;
    }
  }
  if ((v12 & 0x20) != 0)
  {
LABEL_29:
    if ((v12 & 0x400) != 0) {
      goto LABEL_6;
    }
    uint64_t v21 = a2;
    while ((*(_WORD *)(v21 + 44) & 8) != 0)
    {
      uint64_t v21 = *(void *)(v21 + 8);
      if ((*(unsigned char *)(*(void *)(v21 + 16) + 9) & 4) != 0) {
        goto LABEL_6;
      }
    }
  }
  else
  {
    uint64_t v20 = a2;
    while ((*(_WORD *)(v20 + 44) & 8) != 0)
    {
      uint64_t v20 = *(void *)(v20 + 8);
      if ((*(unsigned char *)(*(void *)(v20 + 16) + 8) & 0x20) != 0) {
        goto LABEL_29;
      }
    }
  }
LABEL_15:
  uint64_t v17 = sub_1CBE52E8C(v13);
  if ((v17 & 0xFF00000000) == 0) {
    return 0;
  }
  int v18 = v17;
  BOOL result = 0;
  if (v18 > 97)
  {
    if (v18 == 192)
    {
      uint64_t v24 = *(void *)(a2 + 48);
      if ((v24 & 7) != 0)
      {
        unint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a2 + 48) = v24 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v98 = v25;
      int v78 = *v10;
      uint64_t v79 = sub_1CBC5BBB0(*((void *)v10 + 2), v25);
      int v80 = sub_1CBC54B50(*(void *)(v79 + 8));
      BOOL v81 = v80 == 0;
      if (!v78) {
        BOOL v81 = v80;
      }
      if (v81)
      {
        sub_1CBC55564(a4, (uint64_t *)&v98);
        v99[0] = v25;
        uint64_t v82 = *(uint64_t **)(a3 + 264);
        unsigned int v83 = &v82[*(unsigned int *)(a3 + 272)];
        unint64_t v102 = a1;
        uint64_t v103 = v99;
        *(void *)&long long v104 = a3;
        uint64_t v84 = sub_1CBC5BF84(v82, v83, (uint64_t)&v102);
        uint64_t v85 = *(void *)(a3 + 264);
        if (v84 != (uint64_t *)(v85 + 8 * *(unsigned int *)(a3 + 272))) {
          *(_DWORD *)(a3 + 272) = ((unint64_t)v84 - v85) >> 3;
        }
      }
      return 0;
    }
    if (v18 != 98) {
      return result;
    }
    uint64_t v22 = *(void *)(a2 + 48);
    if ((v22 & 7) != 0)
    {
      unint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a2 + 48) = v22 & 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v98 = v23;
    int v26 = *v10;
    uint64_t v27 = sub_1CBC5BBB0(*((void *)v10 + 2), v23);
    int v28 = sub_1CBC54B50(*(void *)(v27 + 8));
    BOOL v29 = v28 == 0;
    if (!v26) {
      BOOL v29 = v28;
    }
    if (!v29) {
      return 0;
    }
    if (a5)
    {
      uint64_t v30 = *(unsigned int *)(a3 + 272);
      if (!v30)
      {
LABEL_132:
        uint64_t v87 = sub_1CBC5BBB0(*((void *)v10 + 2), v23);
        int v88 = sub_1CBC54B50(*(void *)(v87 + 8));
        uint64_t v89 = *(unsigned __int16 **)(a2 + 16);
        int v90 = *v89;
        if (v88)
        {
          uint64_t v91 = *(void *)(a2 + 32);
        }
        else
        {
          unsigned int v92 = sub_1CBDA6464(*v89, 0x55u);
          uint64_t v91 = *(void *)(a2 + 32);
          uint64_t v93 = *(void *)(v91 + 32 * v92 + 16);
          if (v93 >= 192 && (unint64_t)(*(void *)(v87 + 32) + v93) < 0x101)
          {
            int v86 = 0;
            return v86 != 0;
          }
        }
        unsigned int v94 = sub_1CBDA6464(v90, 0x2Fu);
        *(void *)(v91 + 32 * v94 + 16) |= 0x20000uLL;
        *(_WORD *)(v23 + 32) |= 4u;
        int v86 = 1;
LABEL_138:
        sub_1CBC55564(a3, (uint64_t *)&v98);
        return v86 != 0;
      }
      BOOL v31 = *(uint64_t **)(a3 + 264);
      uint64_t v97 = &v31[v30];
      while (1)
      {
        uint64_t v32 = *v31;
        if (v23 == *v31) {
          break;
        }
        uint64_t v33 = sub_1CBC5BBB0(*((void *)v10 + 2), v23);
        uint64_t v35 = *(void *)(v33 + 8);
        uint64_t v34 = *(void *)(v33 + 16);
        uint64_t v36 = sub_1CBC5BBB0(*((void *)v10 + 2), v32);
        uint64_t v38 = *(void *)(v36 + 8);
        uint64_t v37 = *(void *)(v36 + 16);
        if (sub_1CBC54B50(v35) || sub_1CBC54B50(v38)) {
          goto LABEL_66;
        }
        if (*(unsigned char *)(v34 + 16) != 62) {
          uint64_t v34 = 0;
        }
        uint64_t v39 = *(unsigned char *)(v37 + 16) == 62 ? v37 : 0;
        if (!v34 || v39 == 0) {
          goto LABEL_66;
        }
        uint64_t v65 = *(_DWORD *)(v34 + 20) & 0x7FFFFFF;
        if (v34 - 32 * v65 + 32 == v34)
        {
          int v71 = 0;
          int v70 = 256;
        }
        else
        {
          char v66 = 0;
          uint64_t v67 = 32 - 32 * v65;
          do
          {
            unsigned __int16 v68 = sub_1CBC5BCA4(*(void *)(v34 + v67), 6);
            if (v68 >= 0x100u && v68 != 0)
            {
              int v70 = 256;
              int v71 = 1;
              goto LABEL_107;
            }
            v66 |= v68 < 0x100u;
            v67 += 32;
          }
          while (v67);
          int v71 = 0;
          int v70 = (v66 & 1) != 0 ? 0 : 256;
        }
LABEL_107:
        uint64_t v72 = *(_DWORD *)(v39 + 20) & 0x7FFFFFF;
        if (v39 - 32 * v72 + 32 == v39)
        {
          int v77 = 0;
          char v73 = 0;
        }
        else
        {
          int v96 = v71;
          char v73 = 0;
          uint64_t v74 = 32 - 32 * v72;
          do
          {
            unsigned __int16 v75 = sub_1CBC5BCA4(*(void *)(v39 + v74), 6);
            if (v75 >= 0x100u && v75 != 0)
            {
              char v73 = 0;
              int v77 = 1;
              goto LABEL_117;
            }
            v73 |= v75 < 0x100u;
            v74 += 32;
          }
          while (v74);
          int v77 = 0;
LABEL_117:
          int v71 = v96;
        }
        if (v71 == v77 || !v70 || (v73 & 1) != 0)
        {
LABEL_66:
          int v41 = (void *)sub_1CBC5BBB0(*((void *)v10 + 2), v23);
          uint64_t v43 = v41[1];
          uint64_t v42 = v41[2];
          uint64_t v44 = v41[3];
          uint64_t v45 = v41[4];
          int v46 = (void *)sub_1CBC5BBB0(*((void *)v10 + 2), v32);
          uint64_t v47 = v46[4];
          if (v45 == -1 || v47 == -1) {
            break;
          }
          if (v43 == v46[1])
          {
            if (v42 == v46[2])
            {
              uint64_t v62 = v46[3];
              uint64_t v63 = v47 + v62;
              if (v45 + v44 > v62 && v63 > v44) {
                break;
              }
            }
            else
            {
              if (!*((void *)v10 + 1)) {
                break;
              }
              uint64_t v49 = *(void *)(v23 + 8);
              uint64_t v50 = *(void *)(v32 + 8);
              uint64_t v51 = v50 >= v49 ? *(void *)(v23 + 8) : *(void *)(v32 + 8);
              if ((*(void *)(v23 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
              {
                unint64_t v95 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v23 + 24)) + 7) >> 3;
                if (v52 == 1) {
              }
                }
              else
              {
                unint64_t v95 = -1;
              }
              if ((*(void *)(v32 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
              {
                unint64_t v54 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v32 + 24)) + 7) >> 3;
                if (v53 == 1) {
              }
                }
              else
              {
                unint64_t v54 = -1;
              }
              unint64_t v55 = v95 + v49 - v51;
              unint64_t v56 = v54 + v50 - v51;
              uint64_t v57 = *((void *)v10 + 1);
              if ((*(void *)v23 & 4) != 0) {
                unint64_t v58 = 0;
              }
              else {
                unint64_t v58 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
              }
              if (v55 > 0x7FFFFFFFFFFFFFFBLL) {
                unint64_t v55 = -2;
              }
              long long v59 = *(_OWORD *)(v23 + 56);
              long long v104 = *(_OWORD *)(v23 + 40);
              long long v105 = v59;
              unint64_t v102 = v58;
              uint64_t v103 = (void *)v55;
              unint64_t v60 = (*(void *)v32 & 4) != 0 ? 0 : *(void *)v32 & 0xFFFFFFFFFFFFFFF8;
              if (v56 > 0x7FFFFFFFFFFFFFFBLL) {
                unint64_t v56 = -2;
              }
              long long v61 = *(_OWORD *)(v32 + 56);
              long long v100 = *(_OWORD *)(v32 + 40);
              long long v101 = v61;
              v99[0] = v60;
              v99[1] = v56;
              if (llvm::AAResults::alias(v57, (uint64_t)&v102, (uint64_t)v99)) {
                break;
              }
            }
          }
        }
        if (++v31 == v97) {
          goto LABEL_132;
        }
      }
    }
    int v86 = 0;
    goto LABEL_138;
  }
  if (v18 == 22)
  {
    if (*v10 != 1) {
      return 0;
    }
    goto LABEL_6;
  }
  if (v18 == 85)
  {
    *(unsigned char *)(*(void *)(a1 + 34672) + *(int *)(*(void *)(a2 + 24) + 24)) = 1;
    sub_1CBC5CF20((void *)a3);
    BOOL result = 0;
    *(_DWORD *)(a3 + 272) = 0;
  }
  return result;
}

uint64_t sub_1CBC554A4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v12 = v3;
    uint64_t v13 = v4;
    int v5 = a2;
    uint64_t v6 = result;
    do
    {
      uint64_t v8 = a3;
      uint64_t v9 = v5;
      uint64_t v10 = v6;
      BOOL result = sub_1CBC5CF9C((uint64_t)v11, v6, v5);
      if (v11[16])
      {
        unint64_t v7 = *(unsigned int *)(v10 + 272);
        if (v7 >= *(unsigned int *)(v10 + 276)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v10 + 264) + 8 * v7) = *v9;
        ++*(_DWORD *)(v10 + 272);
      }
      a3 = v8;
      int v5 = v9 + 1;
      uint64_t v6 = v10;
    }
    while (v9 + 1 != v8);
  }
  return result;
}

uint64_t sub_1CBC55564(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_1CBC5CF9C((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 272);
    if (v6 >= *(_DWORD *)(a1 + 276)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 264) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 272);
  }
  return result;
}

uint64_t sub_1CBC555EC(unint64_t a1)
{
  v62[16] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a1 + 34368;
  uint64_t v3 = *(void *)(a1 + 34392);
  uint64_t v4 = *(uint64_t **)v3;
  uint64_t v5 = *(unsigned int *)(v3 + 16);
  uint64_t v6 = *(void *)v3 + 40 * v5;
  if (*(_DWORD *)(v3 + 8))
  {
    if (v5)
    {
      uint64_t v7 = 40 * v5;
      uint64_t v8 = *(uint64_t **)v3;
      while (*v8 == -4096 || *v8 == -8192)
      {
        v8 += 5;
        v7 -= 40;
        if (!v7) {
          goto LABEL_63;
        }
      }
    }
    else
    {
      uint64_t v8 = *(uint64_t **)v3;
    }
  }
  else
  {
LABEL_63:
    uint64_t v8 = &v4[5 * v5];
  }
  uint64_t v9 = &v4[5 * v5];
LABEL_9:
  while (v8 != v9)
  {
    uint64_t v10 = *v8;
    int v11 = sub_1CBC54B50(v8[1]);
    if (*(_WORD *)(v10 + 32))
    {
      char v12 = *(_DWORD *)(v2 + 8) ? v11 == 0 : v11;
      if (v12 & 1) != 0 && (v11)
      {
        unint64_t v34 = *(unsigned int *)(v2 + 40);
        if (v34 >= *(unsigned int *)(v2 + 44)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v2 + 32) + 8 * v34) = v10;
        ++*(_DWORD *)(v2 + 40);
      }
    }
    uint64_t v13 = v8 + 5;
    uint64_t v8 = (uint64_t *)v6;
    if (v13 != (uint64_t *)v6)
    {
      uint64_t v8 = v13;
      while (*v8 == -4096 || *v8 == -8192)
      {
        v8 += 5;
        if (v8 == (uint64_t *)v6)
        {
          uint64_t v8 = (uint64_t *)v6;
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v14 = *(void *)v2 + 320;
  uint64_t v15 = *(void *)(*(void *)v2 + 328);
  if (v15 != v14)
  {
    do
    {
      uint64_t v16 = *(void *)a1 + 536 * *(int *)(v15 + 24);
      sub_1CBC5CF20((void *)v16);
      *(_DWORD *)(v16 + 272) = 0;
      uint64_t v17 = *(void *)(a1 + 8592) + 536 * *(int *)(v15 + 24);
      sub_1CBC5CF20((void *)v17);
      *(_DWORD *)(v17 + 272) = 0;
      uint64_t v18 = *(void *)(a1 + 17184) + 536 * *(int *)(v15 + 24);
      sub_1CBC5CF20((void *)v18);
      *(_DWORD *)(v18 + 272) = 0;
      uint64_t v19 = *(void *)(a1 + 25776) + 536 * *(int *)(v15 + 24);
      sub_1CBC5CF20((void *)v19);
      *(_DWORD *)(v19 + 272) = 0;
      size_t v20 = *(void *)(a1 + 34680);
      if (*(void *)(a1 + 34688) < v20)
      {
        *(void *)(a1 + 34680) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v20) {
        bzero(*(void **)(a1 + 34672), v20);
      }
      *(void *)(a1 + 34680) = v20;
      int v21 = *(_DWORD *)(v15 + 24);
      unint64_t v22 = *(void *)(v15 + 48) & 0xFFFFFFFFFFFFFFF8;
      if (!v22 || (*(unsigned char *)v22 & 4) == 0)
      {
        while ((*(_WORD *)(v22 + 44) & 4) != 0)
          unint64_t v22 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
      }
      while (v22 != v15 + 48)
      {
        sub_1CBC54DD8(a1, v22, *(void *)(a1 + 17184) + 536 * v21, *(void *)(a1 + 25776) + 536 * v21, 0);
        unint64_t v22 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
        if (!v22 || (*(unsigned char *)v22 & 4) == 0)
        {
          while ((*(_WORD *)(v22 + 44) & 4) != 0)
            unint64_t v22 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      uint64_t v23 = *(void *)(a1 + 17184);
      uint64_t v24 = (_DWORD *)(v23 + 536 * v21);
      unint64_t v25 = (_DWORD *)(*(void *)a1 + 536 * v21);
      if (v23 != *(void *)a1) {
        sub_1CBC5C2CC(v25, v24);
      }
      sub_1CBC5C404((uint64_t)(v25 + 66), (uint64_t)(v24 + 66));
      uint64_t v15 = *(void *)(v15 + 8);
    }
    while (v15 != v14);
    uint64_t v14 = *(void *)(*(void *)v2 + 328);
  }
  v42[0] = 0;
  v42[1] = 0;
  int v43 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v44 = 0;
  unint64_t v55 = v59;
  unint64_t v56 = v59;
  int v58 = 0;
  uint64_t v57 = 0x100000008;
  unint64_t v60 = v62;
  v59[0] = v14;
  uint64_t v26 = *(void *)(v14 + 88);
  v62[0] = v14;
  v62[1] = v26;
  uint64_t v61 = 0x800000001;
  sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v55);
  uint64_t v27 = 0;
  uint64_t v51 = 0;
  memset(v53, 0, sizeof(v53));
  memset(v50, 0, sizeof(v50));
  uint64_t v47 = (char *)v50 + 8;
  int v48 = (char *)v50 + 8;
  v53[1] = 8;
  uint64_t v54 = 0;
  uint64_t v49 = 8;
  unsigned int v52 = &v53[2];
  while (1)
  {
    if (v61 != v27) {
      goto LABEL_42;
    }
    if (!v27) {
      break;
    }
    uint64_t v35 = (char *)v60 + 16 * v27;
    uint64_t v36 = v52;
    uint64_t v37 = (char *)v60;
    while (*(void *)v37 == *v36 && *((void *)v37 + 1) == v36[1])
    {
      v37 += 16;
      v36 += 2;
      if (v37 == v35) {
        goto LABEL_47;
      }
    }
LABEL_42:
    BOOL v28 = sub_1CBC55B3C((void *)a1, *((void *)v60 + 2 * v61 - 2));
    int v29 = v61;
    if (v28)
    {
      uint64_t v31 = *((void *)v60 + 2 * v61 - 2);
      uint64_t v32 = *(void **)(v31 + 64);
      uint64_t v33 = *(void **)(v31 + 72);
      if (v32 != v33)
      {
        do
          sub_1CBB24B0C((uint64_t)v42, v32++);
        while (v32 != v33);
        int v29 = v61;
      }
    }
    LODWORD(v61) = v29 - 1;
    if (v29 != 1) {
      sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v55);
    }
    uint64_t v27 = v53[0];
  }
LABEL_47:
  if (v52 != &v53[2]) {
    free(v52);
  }
  if (v48 != v47) {
    free(v48);
  }
  if (v60 != v62) {
    free(v60);
  }
  if (v56 != v55) {
    free(v56);
  }
  while (v44 != v45)
  {
    uint64_t v39 = *(void *)v44;
    sub_1CD42DACC(v42, v44);
    if (sub_1CBC55B3C((void *)a1, v39))
    {
      unsigned int v40 = *(void **)(v39 + 64);
      int v41 = *(void **)(v39 + 72);
      while (v40 != v41)
        sub_1CBB24B0C((uint64_t)v42, v40++);
    }
  }
  if (v44)
  {
    uint64_t v45 = v44;
    operator delete(v44);
  }
  return MEMORY[0x1D25D9CD0](*(void *)v42, 8);
}

BOOL sub_1CBC55B3C(void *a1, uint64_t a2)
{
  v39[32] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(int *)(a2 + 24);
  uint64_t v5 = a1[1074] + 536 * (int)v4;
  sub_1CBC5CF20((void *)v5);
  *(_DWORD *)(v5 + 272) = 0;
  uint64_t v6 = *(void *)(a2 + 88);
  for (uint64_t i = *(void *)(a2 + 96); v6 != i; v6 += 8)
  {
    uint64_t v8 = *a1 + 536 * *(int *)(*(void *)v6 + 24);
    uint64_t v9 = *(unsigned int *)(v8 + 272);
    if (v9)
    {
      uint64_t v31 = a1[1074] + 536 * (int)v4;
      uint64_t v32 = *(uint64_t **)(v8 + 264);
      uint64_t v33 = 8 * v9;
      do
      {
        sub_1CBC55564(v31, v32++);
        v33 -= 8;
      }
      while (v33);
    }
  }
  uint64_t v10 = a1[1074];
  v36[0] = 1;
  uint64_t v11 = 1;
  int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v36[v11] = v12;
    v11 += 2;
  }
  while (v11 != 33);
  uint64_t v13 = (_DWORD *)(v10 + 536 * (int)v4);
  sub_1CBC5C2CC(v36, v13);
  __s2 = v39;
  uint64_t v38 = 0x2000000000;
  if (v13[68]) {
    sub_1CBC5C404((uint64_t)&__s2, (uint64_t)(v13 + 66));
  }
  if (*(unsigned char *)(a1[4334] + v4))
  {
    sub_1CBC5CF20(v36);
    LODWORD(v38) = 0;
  }
  uint64_t v14 = a1[3222] + 536 * (int)v4;
  uint64_t v15 = *(unsigned int *)(v14 + 272);
  if (v15)
  {
    uint64_t v26 = *(uint64_t **)(v14 + 264);
    uint64_t v27 = (uint64_t *)__s2;
    uint64_t v28 = 8 * v15;
    uint64_t v29 = v38;
    do
    {
      uint64_t v34 = *v26;
      v35[0] = a1;
      v35[1] = &v34;
      v35[2] = v36;
      uint64_t v30 = sub_1CBC5BF84(v27, &v27[v29], (uint64_t)v35);
      uint64_t v27 = (uint64_t *)__s2;
      uint64_t v29 = v38;
      if (v30 != (uint64_t *)((char *)__s2 + 8 * v38))
      {
        uint64_t v29 = ((unint64_t)((char *)v30 - (unsigned char *)__s2) >> 3);
        LODWORD(v38) = (unint64_t)((char *)v30 - (unsigned char *)__s2) >> 3;
      }
      ++v26;
      v28 -= 8;
    }
    while (v28);
  }
  uint64_t v16 = a1[2148] + 536 * (int)v4;
  uint64_t v17 = *(unsigned int *)(v16 + 272);
  if (v17)
  {
    uint64_t v24 = *(uint64_t **)(v16 + 264);
    uint64_t v25 = 8 * v17;
    do
    {
      sub_1CBC55564((uint64_t)v36, v24++);
      v25 -= 8;
    }
    while (v25);
  }
  uint64_t v18 = *a1 + 536 * (int)v4;
  uint64_t v19 = *(unsigned int *)(v18 + 272);
  BOOL v20 = v19 != v38 || memcmp(*(const void **)(v18 + 264), __s2, 8 * v19) != 0;
  if ((*(unsigned char *)v18 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(v18 + 8), 8);
  }
  uint64_t v21 = 0;
  *(void *)uint64_t v18 = 1;
  int64x2_t v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(v18 + 8 + v21) = v22;
    v21 += 16;
  }
  while (v21 != 256);
  sub_1CBC5C570((unsigned int *)v18, (unsigned int *)v36);
  sub_1CBC5C65C(v18 + 264, (uint64_t)&__s2);
  if (__s2 != v39) {
    free(__s2);
  }
  if ((v36[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v36[1], 8);
  }
  return v20;
}

void sub_1CBC55E4C(uint64_t a1)
{
  v27[8] = *MEMORY[0x1E4F143B8];
  sub_1CD4305E4(a1, ((*(void *)(*(void *)(a1 + 144) + 112) - *(void *)(*(void *)(a1 + 144) + 104)) >> 3));
  v26[0] = v27;
  v26[1] = (void *)0x400000000;
  llvm::LoopTraversal::traverse((llvm::LoopTraversal *)v26, *(llvm::MachineFunction **)(a1 + 144), (uint64_t)&v23);
  unint64_t v2 = (uint64_t *)v23;
  if (v24)
  {
    uint64_t v3 = (char *)v23 + 16 * v24;
LABEL_3:
    uint64_t v4 = *v2;
    unint64_t v22 = 0x1000000000000001;
    uint64_t v5 = *(void *)(v4 + 64);
    uint64_t v6 = *(void *)(v4 + 72);
    while (v5 != v6)
    {
      uint64_t v7 = (unint64_t *)(*(void *)a1 + 8 * *(int *)(*(void *)v5 + 24));
      unint64_t v8 = *v7;
      if ((*v7 & 1) == 0)
      {
        if (!*(_DWORD *)(v8 + 64)) {
          goto LABEL_8;
        }
LABEL_7:
        sub_1CBC56144(&v22, v7);
        goto LABEL_8;
      }
      if (v8 >> 58) {
        goto LABEL_7;
      }
LABEL_8:
      v5 += 8;
    }
    for (uint64_t i = *(void *)(v4 + 56); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == v4 + 48)
      {
        sub_1CBC563DC((uint64_t *)(*(void *)a1 + 8 * *(int *)(v4 + 24)), (uint64_t *)&v22);
        unint64_t v21 = v22;
        if ((v22 & 1) == 0 && v22)
        {
          if (*(void *)v22 != v22 + 16) {
            free(*(void **)v22);
          }
          MEMORY[0x1D25D9CE0](v21, 0x1080C40EF38A13ELL);
        }
        v2 += 2;
        if (v2 == (uint64_t *)v3)
        {
          unint64_t v2 = (uint64_t *)v23;
          goto LABEL_47;
        }
        goto LABEL_3;
      }
      uint64_t v10 = *(unsigned __int16 **)(i + 16);
      uint64_t v11 = *((void *)v10 + 1);
      if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
      {
        uint64_t v16 = i;
        if ((v11 & 0x80) != 0)
        {
LABEL_26:
          sub_1CD42DB54(&v22);
          goto LABEL_36;
        }
        while ((*(_WORD *)(v16 + 44) & 8) != 0)
        {
          uint64_t v16 = *(void *)(v16 + 8);
          if ((*(unsigned char *)(*(void *)(v16 + 16) + 8) & 0x80) != 0) {
            goto LABEL_26;
          }
        }
      }
      else if ((v11 & 0x80) != 0)
      {
        goto LABEL_26;
      }
      uint64_t v13 = sub_1CBE52E8C(*v10);
      if ((v13 & 0xFF00000000) == 0) {
        goto LABEL_36;
      }
      if (v13 != 85) {
        break;
      }
      if (v22)
      {
        unint64_t v18 = v22 & 0xFC00000000000000;
LABEL_35:
        unint64_t v22 = v18 | 1;
        goto LABEL_36;
      }
      uint64_t v17 = *(unsigned int *)(v22 + 8);
      if (v17) {
        bzero(*(void **)v22, 8 * v17);
      }
LABEL_36:
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    if (v13 != 192) {
      goto LABEL_36;
    }
    uint64_t v14 = *(void *)(i + 48);
    if ((v14 & 7) != 0)
    {
      unint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(i + 48) = v14 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v19 = sub_1CBC5BBB0(*(void *)(a1 + 152), v15);
    char v20 = sub_1CBC54B50(*(void *)(v19 + 8));
    if ((v22 & 1) == 0)
    {
      **(void **)v22 |= 1 << v20;
      goto LABEL_36;
    }
    unint64_t v18 = v22 & 0xFC00000000000000 | (2
                                      * (((v22 >> 1) & ~(-1 << (v22 >> 58)) | (1 << v20)) & ~(-1 << (v22 >> 58))));
    goto LABEL_35;
  }
LABEL_47:
  if (v2 != &v25) {
    free(v2);
  }
  if (v26[0] != v27) {
    free(v26[0]);
  }
}

unint64_t *sub_1CBC56144(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  if (*a1) {
    unint64_t v5 = v4 >> 58;
  }
  else {
    unint64_t v5 = *(unsigned int *)(v4 + 64);
  }
  unint64_t v6 = *a2;
  if (*a2) {
    unint64_t v7 = v6 >> 58;
  }
  else {
    unint64_t v7 = *(unsigned int *)(v6 + 64);
  }
  if (v5 <= v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = v5;
  }
  sub_1CBA7B5AC(a1, v8, 0);
  unint64_t v9 = *a1;
  unint64_t v10 = *a2;
  if (*a1)
  {
    if (v10)
    {
      *a1 = v9 & 0xFC00000000000000 | (2
                                       * (((v10 >> 1) & ~(-1 << (v10 >> 58)) | (v9 >> 1) & ~(-1 << (v9 >> 58))) & ~(-1 << (v9 >> 58)))) | 1;
      return a1;
    }
    unint64_t v23 = *(unsigned int *)(v10 + 64);
  }
  else
  {
    if ((v10 & 1) == 0)
    {
      unsigned int v11 = *(_DWORD *)(v10 + 64);
      if (*(_DWORD *)(v9 + 64) < v11)
      {
        int v17 = *(_DWORD *)(v9 + 64) & 0x3F;
        uint64_t v18 = *(unsigned int *)(v9 + 8);
        if (v17) {
          *(void *)(*(void *)v9 + 8 * v18 - 8) &= ~(-1 << v17);
        }
        unsigned int v19 = v18;
        *(_DWORD *)(v9 + 64) = v11;
        unsigned int v20 = v11 + 63;
        if (v18 != (v11 + 63) >> 6)
        {
          uint64_t v21 = v20 >> 6;
          if (v18 > v21)
          {
            *(_DWORD *)(v9 + 8) = v21;
            unsigned int v19 = v20 >> 6;
          }
          else
          {
            if (v21 > *(_DWORD *)(v9 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v21 != v18) {
              bzero((void *)(*(void *)v9 + 8 * v18), 8 * (v21 - v18));
            }
            unsigned int v19 = v21;
            *(_DWORD *)(v9 + 8) = v21;
            unsigned int v11 = *(_DWORD *)(v9 + 64);
          }
        }
        int v22 = v11 & 0x3F;
        if (v22) {
          *(void *)(*(void *)v9 + 8 * v19 - 8) &= ~(-1 << v22);
        }
      }
      uint64_t v12 = *(unsigned int *)(v10 + 8);
      if (v12)
      {
        uint64_t v13 = *(uint64_t **)v10;
        uint64_t v14 = *(void **)v9;
        do
        {
          uint64_t v15 = *v13++;
          *v14++ |= v15;
          --v12;
        }
        while (v12);
      }
      return a1;
    }
    unint64_t v23 = v10 >> 58;
  }
  if (v23)
  {
    for (uint64_t i = 0; i != v23; ++i)
    {
      unint64_t v25 = *a1;
      if (*a1) {
        uint64_t v26 = (1 << i) & (v25 >> 1) & ~(-1 << (v25 >> 58));
      }
      else {
        uint64_t v26 = *(void *)(*(void *)v25 + 8 * (i >> 6)) & (1 << i);
      }
      if (v26)
      {
        BOOL v27 = 1;
      }
      else
      {
        unint64_t v28 = *a2;
        if (*a2) {
          uint64_t v29 = (1 << i) & (v28 >> 1) & ~(-1 << (v28 >> 58));
        }
        else {
          uint64_t v29 = *(void *)(*(void *)v28 + 8 * (i >> 6)) & (1 << i);
        }
        BOOL v27 = v29 != 0;
      }
      v30[0] = a1;
      v30[1] = i;
      sub_1CBC5C778((uint64_t)v30, v27);
    }
  }
  return a1;
}

uint64_t *sub_1CBC563DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (*a1)
  {
    if ((v5 & 1) == 0) {
      operator new();
    }
    goto LABEL_17;
  }
  if (v5)
  {
    if (v4)
    {
      if (*(void *)v4 != v4 + 16) {
        free(*(void **)v4);
      }
      MEMORY[0x1D25D9CE0](v4, 0x1080C40EF38A13ELL);
      uint64_t v5 = *a2;
    }
LABEL_17:
    *a1 = v5;
    return a1;
  }
  if (v4 != v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 + 8);
    uint64_t v7 = *(unsigned int *)(v4 + 8);
    if (v7 >= v6)
    {
      if (v6) {
        memmove(*(void **)v4, *(const void **)v5, 8 * v6);
      }
    }
    else
    {
      if (*(_DWORD *)(v4 + 12) < v6)
      {
        *(_DWORD *)(v4 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v7) {
        memmove(*(void **)v4, *(const void **)v5, 8 * v7);
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(unsigned int *)(v5 + 8);
      if (v7 != v8) {
        memcpy((void *)(*(void *)v4 + 8 * v7), (const void *)(*(void *)v5 + 8 * v7), *(void *)v5 + 8 * v8 - (*(void *)v5 + 8 * v7));
      }
    }
    *(_DWORD *)(v4 + 8) = v6;
  }
  *(_DWORD *)(v4 + 64) = *(_DWORD *)(v5 + 64);
  return a1;
}

uint64_t sub_1CBC56568(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (!a3) {
    return 0;
  }
  if (((*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FFu) - 100 > 8) {
    return 0;
  }
  uint64_t result = sub_1CBC565FC(a2, *(void *)(a1 + 312), *(void *)(a1 + 296), a1 + 776);
  if (result)
  {
    sub_1CD42DBEC(a1, result, v7, a4);
    sub_1CBC56CB4(a1);
    return 1;
  }
  return result;
}

uint64_t sub_1CBC565FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 328);
  if (sub_1CBC571E0(v6))
  {
    uint64_t v7 = *(void *)a4;
    uint64_t v8 = *(unsigned int *)(a4 + 16);
    uint64_t v9 = *(void *)a4 + 8 * v8;
    if (*(_DWORD *)(a4 + 8))
    {
      if (v8)
      {
        uint64_t v10 = 8 * v8;
        while ((*(void *)v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v7 += 8;
          v10 -= 8;
          if (!v10) {
            goto LABEL_7;
          }
        }
      }
    }
    else
    {
LABEL_7:
      uint64_t v7 = v9;
    }
    uint64_t v6 = *(void *)(*(void *)v7 + 24);
  }
  int v11 = *(_DWORD *)(a3 + 264);
  if (v11)
  {
    uint64_t v12 = *(void *)(a3 + 248);
    unsigned int v13 = v11 - 1;
    uint64_t v14 = (v11 - 1) & ((v6 >> 4) ^ (v6 >> 9));
    uint64_t v15 = *(void *)(v12 + 16 * v14);
    if (v6 == v15)
    {
LABEL_14:
      uint64_t v18 = *(void **)(v12 + 16 * v14 + 8);
      if (v18)
      {
        do
          uint64_t v18 = (void *)*v18;
        while (v18);
        sub_1CBC5C83C();
      }
    }
    else
    {
      int v16 = 1;
      while (v15 != -4096)
      {
        int v17 = v14 + v16++;
        uint64_t v14 = v17 & v13;
        uint64_t v15 = *(void *)(v12 + 16 * v14);
        if (v6 == v15) {
          goto LABEL_14;
        }
      }
    }
  }
  uint64_t v19 = *(unsigned int *)(a4 + 16);
  uint64_t v20 = *(void *)a4 + 8 * v19;
  if (*(_DWORD *)(a4 + 8))
  {
    if (v19)
    {
      uint64_t v21 = 8 * v19;
      uint64_t v22 = *(void *)a4;
      while ((*(void *)v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v22 += 8;
        v21 -= 8;
        if (!v21) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v22 = *(void *)a4;
    }
  }
  else
  {
LABEL_22:
    uint64_t v22 = *(void *)a4 + 8 * v19;
  }
  uint64_t v23 = *(void *)a4 + 8 * v19;
  while (v22 != v23)
  {
    uint64_t v24 = *(void *)(*(void *)v22 + 24);
    if (v24 != v6)
    {
      int v25 = *(_DWORD *)(a3 + 264);
      if (v25)
      {
        uint64_t v26 = *(void *)(a3 + 248);
        unsigned int v27 = v25 - 1;
        uint64_t v28 = (v25 - 1) & ((v24 >> 4) ^ (v24 >> 9));
        uint64_t v29 = *(void *)(v26 + 16 * v28);
        if (v24 == v29)
        {
LABEL_31:
          uint64_t v32 = *(void **)(v26 + 16 * v28 + 8);
          if (v32)
          {
            do
              uint64_t v32 = (void *)*v32;
            while (v32);
            sub_1CBC5C83C();
          }
        }
        else
        {
          int v30 = 1;
          while (v29 != -4096)
          {
            int v31 = v28 + v30++;
            uint64_t v28 = v31 & v27;
            uint64_t v29 = *(void *)(v26 + 16 * v28);
            if (v24 == v29) {
              goto LABEL_31;
            }
          }
        }
      }
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
    }
    uint64_t v33 = v22 + 8;
    uint64_t v22 = *(void *)a4 + 8 * v19;
    if (v33 != v20)
    {
      uint64_t v22 = v33;
      while ((*(void *)v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v22 += 8;
        if (v22 == v20)
        {
          uint64_t v22 = *(void *)a4 + 8 * v19;
          break;
        }
      }
    }
  }
  unint64_t v34 = v6 + 48;
  while (v34 != *(void *)(v6 + 56))
  {
    unint64_t v35 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
    if (!v35 || (*(unsigned char *)v35 & 4) == 0)
    {
      while ((*(_WORD *)(v35 + 44) & 4) != 0)
        unint64_t v35 = *(void *)v35 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v37 = 0;
    unint64_t v38 = v35;
    if (sub_1CBB23F80((uint64_t *)a4, &v38, &v37)) {
      break;
    }
    unint64_t v34 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
    if (!v34 || (*(unsigned char *)v34 & 4) == 0)
    {
      while ((*(_WORD *)(v34 + 44) & 4) != 0)
        unint64_t v34 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  return v6;
}

void sub_1CBC56CB4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 336);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 328);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      sub_1CB914C88(*(void *)(*(void *)(a1 + 288) + 288), v5, 0);
      v4 -= 8;
    }
    while (v4);
    uint64_t v6 = *(unsigned int *)(a1 + 336);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 328);
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t v9 = *(void *)(*(void *)v7 + 32);
        if (!*(unsigned char *)v9)
        {
          uint64_t v10 = *(void *)(a1 + 288);
          int v11 = *(_DWORD *)(v9 + 4);
          uint64_t v12 = *(unsigned int *)(v10 + 416);
          if ((v11 & 0x7FFFFFFFu) >= v12) {
            sub_1CB9153B8(v10 + 408, (v11 & 0x7FFFFFFF) - v12 + 1, *(void *)(v10 + 424));
          }
          operator new();
        }
        v7 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  if (*(unsigned char *)(a1 + 508))
  {
    uint64_t v13 = *(void *)(a1 + 288);
    unint64_t v14 = *(_DWORD *)(a1 + 504) & 0x7FFFFFFF;
    uint64_t v15 = (void *)(v13 + 408);
    unint64_t v16 = *(unsigned int *)(v13 + 416);
    BOOL v17 = v14 >= v16;
    unint64_t v18 = v14 - v16;
    if (v17)
    {
      sub_1CB9153B8((uint64_t)v15, v18 + 1, *(void *)(v13 + 424));
    }
    else
    {
      uint64_t v19 = *(llvm::LiveInterval **)(*v15 + 8 * v14);
      if (v19)
      {
        uint64_t v20 = *(llvm::LiveIntervals **)(a1 + 288);
        llvm::LiveIntervals::extendToUses(v20, v19);
        return;
      }
    }
    llvm::LiveIntervals::createInterval();
  }
}

uint64_t sub_1CBC56F08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(**(void **)(*(void *)(a2 + 24) + 32) + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if ((v4 & 7) != 0)
  {
    uint64_t v5 = *(void **)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    uint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(a2 + 48) = v4 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t result = 0;
  if ((*v5 & 4) != 0) {
    return result;
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == 0) {
    return result;
  }
  uint64_t v7 = llvm::Value::stripPointerCasts((llvm::Value *)(*v5 & 0xFFFFFFFFFFFFFFF8));
  uint64_t result = (uint64_t)llvm::getUnderlyingObject(v7, (const llvm::Value *)6);
  if (!result) {
    return result;
  }
  uint64_t v9 = result;
  if (*(unsigned char *)(result + 16) != 3) {
    return 0;
  }
  unsigned int v10 = *(_DWORD *)(*(void *)v7 + 8);
  if ((v10 & 0xFE) == 0x12) {
    unsigned int v10 = *(_DWORD *)(**(void **)(*(void *)v7 + 16) + 8);
  }
  if (v10 < 0x100) {
    goto LABEL_18;
  }
  unsigned int v11 = v10 >> 8;
  uint64_t v12 = *(unsigned int *)(v3 + 512);
  uint64_t v13 = *(void *)(v3 + 504);
  if (v12)
  {
    uint64_t v13 = *(void *)(v3 + 504);
    unint64_t v14 = *(unsigned int *)(v3 + 512);
    do
    {
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = v13 + 16 * (v14 >> 1);
      unsigned int v17 = *(_DWORD *)(v16 + 8);
      uint64_t v18 = v16 + 16;
      v14 += ~(v14 >> 1);
      if (v17 < v11) {
        uint64_t v13 = v18;
      }
      else {
        unint64_t v14 = v15;
      }
    }
    while (v14);
  }
  if (v13 == *(void *)(v3 + 504) + 16 * v12 || *(_DWORD *)(v13 + 8) != v11) {
LABEL_18:
  }
    uint64_t v13 = *(void *)(v3 + 504);
  unsigned int v28 = *(_DWORD *)(v13 + 12);
  if (v28 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v27);
  }
  unsigned int v27 = 0;
  uint64_t v19 = llvm::Value::stripAndAccumulateConstantOffsets(v7, (llvm::DataLayout *)(v3 + 272), (llvm::APInt *)&v27, 1, 0, 0, v8);
  if (v28 > 0x40)
  {
    uint64_t v20 = *v27;
    MEMORY[0x1D25D9CB0]();
  }
  else
  {
    uint64_t v20 = (uint64_t)((void)v27 << -(uint64_t)v28) >> -(uint64_t)v28;
  }
  if (*(unsigned char *)(v9 + 16) != 3) {
    uint64_t v9 = 0;
  }
  uint64_t v21 = v5[1];
  if ((v5[3] & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v23 = (unint64_t)(sub_1CB8F1DC4(v5 + 3) + 7) >> 3;
    if (v22 == 1) {
  }
    }
  else
  {
    unint64_t v23 = -1;
  }
  unsigned int v27 = 0;
  if (sub_1CBC5D0DC(*(void *)(a1 + 256), *(_DWORD *)(a1 + 272), (uint64_t)v5, &v27)) {
    return 1;
  }
  int v24 = *(_DWORD *)(a1 + 264);
  unsigned int v25 = *(_DWORD *)(a1 + 272);
  if (4 * v24 + 4 >= 3 * v25)
  {
    v25 *= 2;
    goto LABEL_36;
  }
  if (v25 + ~v24 - *(_DWORD *)(a1 + 268) <= v25 >> 3)
  {
LABEL_36:
    sub_1CD430738(a1 + 256, v25);
    unsigned int v27 = 0;
    sub_1CBC5D0DC(*(void *)(a1 + 256), *(_DWORD *)(a1 + 272), (uint64_t)v5, &v27);
  }
  uint64_t v26 = v27;
  ++*(_DWORD *)(a1 + 264);
  if (*v26 != -4096) {
    --*(_DWORD *)(a1 + 268);
  }
  *uint64_t v26 = v5;
  v26[1] = v9;
  v26[2] = v19;
  v26[3] = v21 + v20;
  uint64_t result = 1;
  v26[4] = v23;
  return result;
}

uint64_t sub_1CBC571E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (v1 == a1 + 48) {
    return 0;
  }
  while (**(_WORD **)(v1 + 16) != 6722 || *(_DWORD *)(*(void *)(v1 + 32) + 68) != 15)
  {
    if ((*(unsigned char *)v1 & 4) == 0)
    {
      while ((*(_WORD *)(v1 + 44) & 8) != 0)
        uint64_t v1 = *(void *)(v1 + 8);
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (v1 == a1 + 48) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CBC57248(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = &off_1E66AF970;
  int v13 = 2;
  uint64_t v3 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, _UNKNOWN ****, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, 6722, &v12, 1, 0, 0, 0);
  uint64_t v5 = v4;
  LODWORD(v8) = 1;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  llvm::MachineInstr::addOperand(v4, v3, (const llvm::MachineOperand *)&v8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0x4500000000;
  uint64_t v11 = 0;
  llvm::MachineInstr::addOperand(v5, v3, (const llvm::MachineOperand *)&v8);
  LODWORD(v8) = 1;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  llvm::MachineInstr::addOperand(v5, v3, (const llvm::MachineOperand *)&v8);
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a2 + 8 * v6) = v5;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((void *)v5 + 4) + 4);
}

uint64_t sub_1CBC57398(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = &off_1E66AF970;
  int v15 = 2;
  uint64_t v5 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, _UNKNOWN ****, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, 375, &v14, 1, 0, 0, 0);
  uint64_t v7 = v6;
  v10[0] = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)v10);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v10[0] = 0;
  v10[1] = a3;
  uint64_t v13 = 0;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  v10[0] = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  v10[0] = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 31;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a2 + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((void *)v7 + 4) + 4);
}

uint64_t sub_1CBC57508(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = &off_1E66AF970;
  int v15 = 2;
  uint64_t v5 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, _UNKNOWN ****, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, 402, &v14, 1, 0, 0, 0);
  uint64_t v7 = v6;
  v10[0] = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)v10);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v10[0] = 0;
  v10[1] = a3;
  uint64_t v13 = 0;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  v10[0] = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  v10[0] = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 31;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a2 + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((void *)v7 + 4) + 4);
}

void sub_1CBC57678(uint64_t a1, uint64_t a2, unint64_t a3, int a4, int a5, int a6)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  char v66 = *(uint64_t **)(a2 + 32);
  unint64_t v6 = 21;
  if (a6) {
    unint64_t v6 = 23;
  }
  uint64_t v69 = *(void *)(*v66 + 40);
  uint64_t v7 = *(uint64_t **)(v69 + 112);
  unint64_t v8 = *((unsigned int *)v7 + 8);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v6 < v9) {
    unint64_t v9 = v6;
  }
  if (v6 <= v8) {
    unint64_t v9 = v6;
  }
  if ((v8 & 0x80000000) == 0) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = v6;
  }
  uint64_t v11 = *((unsigned int *)v7 + 2);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    if (a6) {
      uint64_t v14 = "agc.ria.ray_driver_data";
    }
    else {
      uint64_t v14 = "agc.ria.ray_user_data";
    }
    do
      int v13 = 33 * v13 + v14[v12++];
    while (v10 != v12);
    uint64_t v15 = *v7;
    uint64_t v16 = *v7 + 8 * v11 + 8;
    int v17 = 1;
    int v18 = v13;
    while (1)
    {
      uint64_t v19 = v18 & (v11 - 1);
      uint64_t v20 = *(void **)(v15 + 8 * v19);
      if (v20 != (void *)-8)
      {
        if (!v20) {
          return;
        }
        if (*(_DWORD *)(v16 + 4 * v19) == v13
          && v10 == *v20
          && !memcmp(v14, (char *)v20 + *((unsigned int *)v7 + 5), v10))
        {
          break;
        }
      }
      int v18 = v17 + v19;
      ++v17;
    }
    if (v19 != -1 && (int)v19 != v11)
    {
      uint64_t v21 = *(void *)(*(void *)(v15 + 8 * (int)v19) + 8);
      if (v21)
      {
        if (*(unsigned char *)(v21 + 16) == 3 && (*(_DWORD *)(v21 + 32) & 0xFu) - 7 >= 2 && *(void *)(a1 + 520))
        {
          uint64_t v22 = sub_1CD112198(v69);
          uint64_t v23 = sub_1CD1124FC(v69);
          if (v22) {
            char v24 = a6;
          }
          else {
            char v24 = 1;
          }
          sub_1CBC59180((uint64_t)v83, a1, *(void *)(a1 + 520), a6 ^ 1);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2430, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EBCC2430))
          {
            qword_1EBCC2428 = 512;
            __cxa_guard_release(&qword_1EBCC2430);
          }
          uint64_t v25 = *(unsigned int *)(a1 + 640);
          if (v25)
          {
            uint64_t v70 = v23;
            char v26 = v24;
            unint64_t v27 = 0;
            LOBYTE(v28) = 0;
            uint64_t v29 = *(uint64_t **)(a1 + 632);
            int v30 = &v29[2 * v25];
            do
            {
              int v31 = v29 + 1;
              if (a6) {
                uint64_t v32 = v29;
              }
              else {
                uint64_t v32 = v29 + 1;
              }
              uint64_t v33 = *v32;
              if ((*(void *)(*v32 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
              {
                uint64_t v35 = sub_1CB8F1DC4((unint64_t *)(*v32 + 24));
                if (v34 == 1) {
                unint64_t v36 = (unint64_t)(v35 + 7) >> 3;
                }
                uint64_t v33 = *v32;
              }
              else
              {
                unint64_t v36 = -1;
              }
              if (v27 <= v36) {
                unint64_t v27 = v36;
              }
              uint64_t v37 = (1 << *(unsigned char *)(v33 + 34)) | *(void *)(v33 + 8);
              unsigned __int8 v38 = 63 - __clz(v37 & -v37);
              if (v28 <= v38) {
                unsigned int v28 = v38;
              }
              else {
                unsigned int v28 = v28;
              }
              uint64_t v29 = v31 + 1;
            }
            while (v31 + 1 != v30);
            uint64_t v39 = v27 - 1;
            char v24 = v26;
            uint64_t v23 = v70;
          }
          else
          {
            unsigned int v28 = 0;
            uint64_t v39 = -1;
          }
          unint64_t v40 = ((1 << v28) + v39) & -(1 << v28);
          if (qword_1EBCC2428 >= v40) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = qword_1EBCC2428;
          }
          if (v28 >= 2 && v41 != 0)
          {
            char v43 = v28;
            uint64_t v82 = 0;
            long long v81 = 0u;
            long long v80 = 0u;
            long long v79 = 0u;
            v78[0] = &unk_1F261CD58;
            v78[1] = v66;
            *((void *)&v79 + 1) = v66[5];
            *(void *)&long long v79 = (*(uint64_t (**)(uint64_t))(*(void *)v66[2] + 104))(v66[2]);
            *(void *)uint64_t v74 = 0;
            *(void *)&long long v80 = 0;
            BOOL v44 = v23 != 0;
            *((void *)&v80 + 1) = a2;
            long long v81 = a3;
            if (!a6) {
              BOOL v44 = v22 != 0;
            }
            uint64_t v45 = v66[43];
            if (v44)
            {
              if (v24) {
                unsigned int v52 = sub_1CD871FB0(v45);
              }
              else {
                unsigned int v52 = sub_1CD1122DC(v45);
              }
              int v75 = 0;
              int v76 = 64;
              int v77 = 0;
              *(_DWORD *)uint64_t v74 = 519;
              *(void *)&v74[4] = v52 >> 1;
              long long v86 = *(_OWORD *)"";
              unsigned int v53 = sub_1CBE0418C(77, 4, &v86);
              uint64_t v84 = &off_1E66AF580;
              int v85 = 2;
              uint64_t v54 = (llvm::MachineFunction *)sub_1CC739C54(v78, v53, (unint64_t *)&v84, 1, 0, 0, 0);
              unint64_t v56 = v55;
              LODWORD(v86) = 1;
              *((void *)&v86 + 1) = 0;
              uint64_t v87 = 0;
              llvm::MachineInstr::addOperand(v55, v54, (const llvm::MachineOperand *)&v86);
              *((void *)&v86 + 1) = 0;
              uint64_t v87 = 0;
              LODWORD(v86) = 0;
              DWORD1(v86) = a4;
              uint64_t v88 = 0;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v86);
              LODWORD(v86) = 1;
              *((void *)&v86 + 1) = 0;
              uint64_t v87 = 0;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v86);
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)v83);
              LODWORD(v86) = 1;
              *((void *)&v86 + 1) = 0;
              uint64_t v87 = 0;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v86);
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)v74);
              LODWORD(v86) = 1;
              *((void *)&v86 + 1) = 0;
              uint64_t v87 = 0;
              llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)&v86);
              unsigned int v57 = *(_DWORD *)(a1 + 336);
              if (v57 >= *(_DWORD *)(a1 + 340)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(a1 + 328) + 8 * v57) = v56;
              ++*(_DWORD *)(a1 + 336);
              int v49 = *(_DWORD *)(*((void *)v56 + 4) + 4);
              char v43 = v28;
            }
            else
            {
              uint64_t v46 = sub_1CBB35BE4(v66[2]);
              unsigned int v47 = sub_1CD1117B0((llvm::GlobalValue *)v21, 0, v45, v46 << 32);
              int v48 = sub_1CBC586EC((uint64_t)v78, a1 + 328, v47);
              v73[0] = v83[0];
              v73[1] = v83[1];
              int v49 = sub_1CBC58F9C((uint64_t)v78, a1 + 328, a4, (const llvm::MachineOperand *)v73, v48);
            }
            sub_1CBC57DDC(a1, v78, v49, a5, v41, v43, v21, v50);
            uint64_t v51 = *(unsigned int *)(a1 + 536);
            if (v51)
            {
              int v58 = *(uint64_t **)(a1 + 528);
              uint64_t v59 = 8 * v51;
              do
              {
                uint64_t v60 = *v58;
                if ((*(void *)(*(void *)(*v58 + 32) + 80) == 0) != a6)
                {
                  sub_1CBC59180((uint64_t)&v86, a1, v60, 0);
                  unsigned int v61 = *(_DWORD *)(*(void *)(v60 + 32) + 48);
                  int v62 = sub_1CBC58828((uint64_t)v78, a1 + 328, a4, v61, SDWORD1(v86));
                  sub_1CBC57DDC(a1, v78, v62, a5, v61, v43, v21, v63);
                }
                ++v58;
                v59 -= 8;
              }
              while (v59);
            }
            v78[0] = &unk_1F261CD58;
            if ((void)v80) {
              llvm::MetadataTracking::untrack((uint64_t)&v80, (unsigned __int8 *)v80);
            }
          }
        }
      }
    }
  }
}

void sub_1CBC57DDC(uint64_t a1, void *a2, int a3, int a4, unsigned int a5, char a6, uint64_t a7, int8x8_t a8)
{
  if (a5)
  {
    unsigned int v10 = 0;
    uint64_t v11 = *(void *)(a2[1] + 16);
    uint64_t v47 = a2[1];
    uint64_t v45 = 32 * a5;
    unint64_t v46 = a7 & 0xFFFFFFFFFFFFFFFBLL;
    unsigned int v48 = a5;
    do
    {
      LODWORD(v12) = a5 - v10;
      if (a5 - v10 >= 0x10) {
        unint64_t v12 = 16;
      }
      else {
        unint64_t v12 = v12;
      }
      uint64_t v13 = 1 << ~__clz(v12);
      if (v12) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v52 = v14;
      uint64_t v15 = ~(-1 << (v14 >> 2));
      uint64_t v16 = v11;
      if (*(unsigned char *)(v11 + 366)) {
        int v17 = 5674;
      }
      else {
        int v17 = 5722;
      }
      a8.i32[0] = ~(-1 << (v14 >> 2));
      uint8x8_t v18 = (uint8x8_t)vcnt_s8(a8);
      v18.i16[0] = vaddlv_u8(v18);
      __int32 v19 = v18.i32[0];
      unsigned int v20 = sub_1CBE52EB8(v17, 34, v18.i32[0] + 54);
      uint64_t v21 = (llvm::MachineFunction *)a2[1];
      uint64_t v22 = *(void *)(a2[2] + 8);
      uint64_t v23 = (unsigned __int8 *)a2[4];
      *(void *)&long long v56 = v23;
      if (v23) {
        llvm::MetadataTracking::track((uint64_t)&v56, v23, 2);
      }
      MachineInstr = llvm::MachineFunction::CreateMachineInstr(v21, v22 + 48 * v20, (unsigned __int8 **)&v56, 0);
      if ((void)v56) {
        llvm::MetadataTracking::untrack((uint64_t)&v56, (unsigned __int8 *)v56);
      }
      uint64_t v25 = (unint64_t *)a2[6];
      uint64_t v26 = *(void *)(a2[5] + 40);
      *((void *)MachineInstr + 3) = v26;
      uint64_t v27 = *(void *)(v26 + 32);
      uint64_t v28 = *((unsigned int *)MachineInstr + 10);
      if (v28)
      {
        uint64_t v36 = *((void *)MachineInstr + 4);
        uint64_t v37 = *(void *)(v27 + 40);
        uint64_t v38 = 32 * v28;
        do
        {
          if (!*(unsigned char *)v36)
          {
            uint64_t v39 = *(unsigned int *)(v36 + 4);
            if ((int)v39 >= 0) {
              unint64_t v40 = (uint64_t *)(*(void *)(v37 + 272) + 8 * v39);
            }
            else {
              unint64_t v40 = (uint64_t *)(*(void *)(v37 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
            }
            uint64_t v41 = *v40;
            if (*v40)
            {
              uint64_t v42 = *(void *)(v41 + 16);
              *(void *)(v41 + 16) = v36;
              *(void *)(v36 + 16) = v42;
              if (*(unsigned char *)(v36 + 3))
              {
                *(void *)(v36 + 24) = v41;
              }
              else
              {
                *(void *)(v36 + 24) = 0;
                unint64_t v40 = (uint64_t *)(v42 + 24);
              }
            }
            else
            {
              *(void *)(v36 + 16) = v36;
              *(void *)(v36 + 24) = 0;
            }
            *unint64_t v40 = v36;
          }
          v36 += 32;
          v38 -= 32;
        }
        while (v38);
      }
      uint64_t v29 = *(void *)(v27 + 728);
      if (v29) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v29 + 24))(v29, MachineInstr);
      }
      unint64_t v30 = *v25 & 0xFFFFFFFFFFFFFFF8;
      *(void *)MachineInstr = v30 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v25;
      *(void *)(v30 + 8) = MachineInstr;
      *uint64_t v25 = *v25 & 7 | (unint64_t)MachineInstr;
      uint64_t v31 = a2[7];
      if (v31) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v31 + 24))(v31, MachineInstr);
      }
      uint64_t v11 = v16;
      if (!*(unsigned char *)(v16 + 366))
      {
        int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(v47 + 40), (uint64_t)(&off_1E66AFA08)[v19 - 1], "", 0);
        *((void *)&v56 + 1) = 0;
        long long v57 = 0uLL;
        LODWORD(v56) = 0x1000000;
        DWORD1(v56) = VirtualRegister;
        llvm::MachineInstr::addOperand(MachineInstr, v21, (const llvm::MachineOperand *)&v56);
      }
      LODWORD(v56) = 1;
      *((void *)&v56 + 1) = 0;
      *(void *)&long long v57 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v21, (const llvm::MachineOperand *)&v56);
      LODWORD(v56) = 1;
      *((void *)&v56 + 1) = 0;
      *(void *)&long long v57 = (16 * v15) | 0x20002;
      llvm::MachineInstr::addOperand(MachineInstr, v21, (const llvm::MachineOperand *)&v56);
      *((void *)&v56 + 1) = 0;
      LODWORD(v56) = 0;
      DWORD1(v56) = a3;
      long long v57 = 0uLL;
      llvm::MachineInstr::addOperand(MachineInstr, v21, (const llvm::MachineOperand *)&v56);
      LODWORD(v56) = 1;
      *((void *)&v56 + 1) = 0;
      *(void *)&long long v57 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v21, (const llvm::MachineOperand *)&v56);
      *((void *)&v56 + 1) = 0;
      LODWORD(v56) = 0;
      DWORD1(v56) = a4;
      long long v57 = 0uLL;
      llvm::MachineInstr::addOperand(MachineInstr, v21, (const llvm::MachineOperand *)&v56);
      LODWORD(v56) = 1;
      *((void *)&v56 + 1) = 0;
      *(void *)&long long v57 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v21, (const llvm::MachineOperand *)&v56);
      LODWORD(v56) = 1;
      *((void *)&v56 + 1) = 0;
      *(void *)&long long v57 = 32 * v10;
      llvm::MachineInstr::addOperand(MachineInstr, v21, (const llvm::MachineOperand *)&v56);
      LODWORD(v56) = 1;
      *((void *)&v56 + 1) = 0;
      *(void *)&long long v57 = v52;
      llvm::MachineInstr::addOperand(MachineInstr, v21, (const llvm::MachineOperand *)&v56);
      v53[0] = v46;
      v53[1] = 0;
      char v55 = 0;
      if (a7)
      {
        unsigned int v32 = *(_DWORD *)(*(void *)a7 + 8);
        if ((v32 & 0xFE) == 0x12) {
          unsigned int v32 = *(_DWORD *)(**(void **)(*(void *)a7 + 16) + 8);
        }
        unsigned int v33 = v32 >> 8;
      }
      else
      {
        unsigned int v33 = 0;
      }
      unsigned int v54 = v33;
      long long v56 = 0u;
      long long v57 = 0u;
      MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v47, (uint64_t)v53, 2, v45, a6, &v56, 0, 1, 0, 0, 0);
      llvm::MachineInstr::addMemOperand(MachineInstr, v21, MachineMemOperand);
      unint64_t v35 = *(unsigned int *)(a1 + 336);
      if (v35 >= *(unsigned int *)(a1 + 340)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      a5 = v48;
      *(void *)(*(void *)(a1 + 328) + 8 * v35) = MachineInstr;
      ++*(_DWORD *)(a1 + 336);
      v10 += v52;
    }
    while (v10 < v48);
  }
}

void sub_1CBC58278(uint64_t a1, void *a2, int a3, int a4, uint64_t a5, int8x8_t a6)
{
  if (a4 >= 1)
  {
    int v8 = 0;
    uint64_t v44 = a2[1];
    uint64_t v9 = *(void *)(v44 + 16);
    uint64_t v41 = a4;
    unint64_t v42 = a5 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v43 = v9;
    int v40 = a4;
    do
    {
      LODWORD(v10) = a4 - v8;
      if ((a4 - v8) >= 0x10) {
        unint64_t v10 = 16;
      }
      else {
        unint64_t v10 = v10;
      }
      int v11 = -1 << ((unint64_t)(1 << ~__clz(v10)) >> 2);
      if (v10) {
        uint64_t v12 = ~v11;
      }
      else {
        uint64_t v12 = 0;
      }
      if (*(unsigned char *)(v9 + 366)) {
        int v13 = 5675;
      }
      else {
        int v13 = 5723;
      }
      a6.i32[0] = v12;
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(a6);
      v14.i16[0] = vaddlv_u8(v14);
      __int32 v15 = v14.i32[0];
      unsigned int v16 = sub_1CBE52EB8(v13, 34, v14.i32[0] + 54);
      int v17 = (llvm::MachineFunction *)a2[1];
      uint64_t v18 = *(void *)(a2[2] + 8);
      __int32 v19 = (unsigned __int8 *)a2[4];
      *(void *)&long long v50 = v19;
      if (v19) {
        llvm::MetadataTracking::track((uint64_t)&v50, v19, 2);
      }
      MachineInstr = llvm::MachineFunction::CreateMachineInstr(v17, v18 + 48 * v16, (unsigned __int8 **)&v50, 0);
      if ((void)v50) {
        llvm::MetadataTracking::untrack((uint64_t)&v50, (unsigned __int8 *)v50);
      }
      uint64_t v21 = (unint64_t *)a2[6];
      uint64_t v22 = *(void *)(a2[5] + 40);
      *((void *)MachineInstr + 3) = v22;
      uint64_t v23 = *(void *)(v22 + 32);
      uint64_t v24 = *((unsigned int *)MachineInstr + 10);
      if (v24)
      {
        uint64_t v32 = *((void *)MachineInstr + 4);
        uint64_t v33 = *(void *)(v23 + 40);
        uint64_t v34 = 32 * v24;
        do
        {
          if (!*(unsigned char *)v32)
          {
            uint64_t v35 = *(unsigned int *)(v32 + 4);
            if ((int)v35 >= 0) {
              uint64_t v36 = (uint64_t *)(*(void *)(v33 + 272) + 8 * v35);
            }
            else {
              uint64_t v36 = (uint64_t *)(*(void *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
            }
            uint64_t v37 = *v36;
            if (*v36)
            {
              uint64_t v38 = *(void *)(v37 + 16);
              *(void *)(v37 + 16) = v32;
              *(void *)(v32 + 16) = v38;
              if (*(unsigned char *)(v32 + 3))
              {
                *(void *)(v32 + 24) = v37;
              }
              else
              {
                *(void *)(v32 + 24) = 0;
                uint64_t v36 = (uint64_t *)(v38 + 24);
              }
            }
            else
            {
              *(void *)(v32 + 16) = v32;
              *(void *)(v32 + 24) = 0;
            }
            *uint64_t v36 = v32;
          }
          v32 += 32;
          v34 -= 32;
        }
        while (v34);
      }
      uint64_t v25 = *(void *)(v23 + 728);
      if (v25) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v25 + 24))(v25, MachineInstr);
      }
      unint64_t v26 = *v21 & 0xFFFFFFFFFFFFFFF8;
      *(void *)MachineInstr = v26 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v21;
      *(void *)(v26 + 8) = MachineInstr;
      *uint64_t v21 = *v21 & 7 | (unint64_t)MachineInstr;
      uint64_t v27 = a2[7];
      if (v27) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v27 + 24))(v27, MachineInstr);
      }
      uint64_t v9 = v43;
      if (!*(unsigned char *)(v43 + 366))
      {
        int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(v44 + 40), (uint64_t)(&off_1E66AFA08)[v15 - 1], "", 0);
        *((void *)&v50 + 1) = 0;
        long long v51 = 0uLL;
        LODWORD(v50) = 0x1000000;
        DWORD1(v50) = VirtualRegister;
        llvm::MachineInstr::addOperand(MachineInstr, v17, (const llvm::MachineOperand *)&v50);
      }
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v17, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = (16 * v12) | 0x20002;
      llvm::MachineInstr::addOperand(MachineInstr, v17, (const llvm::MachineOperand *)&v50);
      *((void *)&v50 + 1) = 0;
      LODWORD(v50) = 0;
      DWORD1(v50) = a3;
      long long v51 = 0uLL;
      llvm::MachineInstr::addOperand(MachineInstr, v17, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v17, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v17, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = v8;
      llvm::MachineInstr::addOperand(MachineInstr, v17, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      *((void *)&v50 + 1) = 0;
      *(void *)&long long v51 = 1;
      llvm::MachineInstr::addOperand(MachineInstr, v17, (const llvm::MachineOperand *)&v50);
      v47[0] = v42;
      v47[1] = v8;
      char v49 = 0;
      if (a5)
      {
        unsigned int v28 = *(_DWORD *)(*(void *)a5 + 8);
        if ((v28 & 0xFE) == 0x12) {
          unsigned int v28 = *(_DWORD *)(**(void **)(*(void *)a5 + 16) + 8);
        }
        unsigned int v29 = v28 >> 8;
      }
      else
      {
        unsigned int v29 = 0;
      }
      unsigned int v48 = v29;
      long long v50 = 0u;
      long long v51 = 0u;
      MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v44, (uint64_t)v47, 2, v41, 4, &v50, 0, 1, 0, 0, 0);
      llvm::MachineInstr::addMemOperand(MachineInstr, v17, MachineMemOperand);
      unint64_t v31 = *(unsigned int *)(a1 + 336);
      if (v31 >= *(unsigned int *)(a1 + 340)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      a4 = v40;
      *(void *)(*(void *)(a1 + 328) + 8 * v31) = MachineInstr;
      ++*(_DWORD *)(a1 + 336);
      v8 += 16;
    }
    while (v8 < v40);
  }
}

uint64_t sub_1CBC586EC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v13 = &off_1E66AF580;
  int v14 = 2;
  uint64_t v5 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, 5625, &v13, 1, 0, 0, 0);
  uint64_t v7 = v6;
  int v10 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)&v10);
  int v10 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = a3;
  llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)&v10);
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a2 + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((void *)v7 + 4) + 4);
}

uint64_t sub_1CBC58828(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v18 = xmmword_1CDC7F8D0;
  uint64_t v10 = sub_1CBE0418C(77, 4, &v18);
  unsigned int v16 = &off_1E66AF580;
  int v17 = 2;
  uint64_t v11 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, v10, &v16, 1, 0, 0, 0);
  int v13 = v12;
  LODWORD(v18) = 1;
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = 0;
  llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v18);
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = 0;
  LODWORD(v18) = 0;
  DWORD1(v18) = a3;
  uint64_t v20 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = a4;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = 0;
  LODWORD(v18) = 0;
  DWORD1(v18) = a5;
  uint64_t v20 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  unsigned int v14 = *(_DWORD *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a2 + 8 * v14) = v13;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((void *)v13 + 4) + 4);
}

uint64_t sub_1CBC58A00(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  LODWORD(v17) = 0;
  uint64_t v8 = sub_1CBE0418C(67, 3, &v16);
  unsigned int v14 = &off_1E66AF580;
  int v15 = 2;
  uint64_t v9 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, v8, &v14, 1, 0, 0, 0);
  uint64_t v11 = v10;
  LODWORD(v16) = 1;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  llvm::MachineInstr::addOperand(v10, v9, (const llvm::MachineOperand *)&v16);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  LODWORD(v16) = 0;
  HIDWORD(v16) = a3;
  uint64_t v19 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v16);
  LODWORD(v16) = 1;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v16);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  LODWORD(v16) = 0;
  HIDWORD(v16) = a4;
  uint64_t v19 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v16);
  LODWORD(v16) = 1;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v16);
  unsigned int v12 = *(_DWORD *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a2 + 8 * v12) = v11;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((void *)v11 + 4) + 4);
}

uint64_t sub_1CBC58BAC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a2 + 48;
  unint64_t v7 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v7 || (*(unsigned char *)v7 & 4) == 0)
  {
    while ((*(_WORD *)(v7 + 44) & 4) != 0)
      unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
  }
  while (v7 != v6)
  {
    uint64_t v8 = *(unsigned __int16 **)(v7 + 16);
    int v9 = *v8;
    uint64_t v10 = sub_1CBE52E8C(v9);
    if ((v8[4] & 8) != 0)
    {
      if ((v9 - 263) < 2) {
        goto LABEL_37;
      }
      uint64_t v11 = v10 & 0xFF00000000;
      if ((v10 & 0xFF00000000) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      if ((v10 & 0xFF00000000) == 0) {
        llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
      }
      if (v10 == 18)
      {
LABEL_37:
        unint64_t v20 = v7 + 8;
        return *(void *)v20;
      }
      uint64_t v11 = 1;
    }
    if (v10 == 85) {
      goto LABEL_37;
    }
LABEL_14:
    if (v11)
    {
      if (v10 == 192)
      {
        uint64_t v14 = *(void *)(v7 + 48);
        if ((v14 & 7) != 0)
        {
          unint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v7 + 48) = v14 & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v22 = 0;
        int v18 = sub_1CBC5BC0C(*(void *)(a1 + 256), *(_DWORD *)(a1 + 272), v15, &v22);
        uint64_t v19 = v22;
        if (!v18) {
          uint64_t v19 = *(void *)(a1 + 256) + 40 * *(unsigned int *)(a1 + 272);
        }
        sub_1CBC54B50(*(void *)(v19 + 8));
      }
      else if (v10 == 98)
      {
        uint64_t v12 = *(void *)(v7 + 48);
        if ((v12 & 7) != 0)
        {
          unint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v7 + 48) = v12 & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v22 = 0;
        int v16 = sub_1CBC5BC0C(*(void *)(a1 + 256), *(_DWORD *)(a1 + 272), v13, &v22);
        uint64_t v17 = v22;
        if (!v16) {
          uint64_t v17 = *(void *)(a1 + 256) + 40 * *(unsigned int *)(a1 + 272);
        }
        if (sub_1CBC54B50(*(void *)(v17 + 8)) == a3) {
          goto LABEL_37;
        }
      }
    }
    unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
    if (!v7 || (*(unsigned char *)v7 & 4) == 0)
    {
      while ((*(_WORD *)(v7 + 44) & 4) != 0)
        unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  unint64_t v20 = a2 + 56;
  return *(void *)v20;
}

uint64_t sub_1CBC58D94(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = (uint64_t *)(a4 + 34392);
  int v9 = *(_DWORD *)(a2 + 24);
  if (sub_1CD42E4F4(*a5, v9, a3)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a4 + 8592) + 536 * v9;
  uint64_t v11 = *(unsigned int *)(v10 + 272);
  if (v11)
  {
    uint64_t v12 = *(uint64_t **)(v10 + 264);
    uint64_t v13 = 8 * v11;
    while (1)
    {
      uint64_t v14 = sub_1CBC5BBB0(*v8, *v12);
      if (sub_1CBC54B50(*(void *)(v14 + 8)) == a3) {
        break;
      }
      ++v12;
      v13 -= 8;
      if (!v13) {
        return v7;
      }
    }
    if (*(void *)(v7 + 88) != *(void *)(v7 + 96)) {
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
    }
    return 0;
  }
  return v7;
}

uint64_t sub_1CBC58E94(unsigned int a1, uint64_t a2, void ***this)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 32) + 40);
  if ((a1 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(v3 + 272) + 8 * a1);
  }
  uint64_t v5 = *v4;
  if (v5)
  {
    if (*(unsigned char *)(v5 + 3) & 1) != 0 || (uint64_t v5 = *(void *)(v5 + 24)) != 0 && (*(unsigned char *)(v5 + 3))
    {
      uint64_t v6 = *(void *)(v5 + 24);
      if (!v6 || (*(unsigned char *)(v6 + 3) & 1) == 0)
      {
        llvm::MachineDominatorTree::applySplitCriticalEdges(this);
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
      }
    }
  }
  return 0;
}

uint64_t sub_1CBC58F9C(uint64_t a1, uint64_t a2, int a3, const llvm::MachineOperand *a4, int a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v18 = *(_OWORD *)"";
  uint64_t v10 = sub_1CBE0418C(77, 4, &v18);
  int v16 = &off_1E66AF580;
  int v17 = 2;
  uint64_t v11 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, v10, &v16, 1, 0, 0, 0);
  uint64_t v13 = v12;
  LODWORD(v18) = 1;
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = 0;
  llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v18);
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = 0;
  LODWORD(v18) = 0;
  DWORD1(v18) = a3;
  uint64_t v20 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  llvm::MachineInstr::addOperand(v13, v11, a4);
  LODWORD(v18) = 1;
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = 0;
  LODWORD(v18) = 0;
  DWORD1(v18) = a5;
  uint64_t v20 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  *((void *)&v18 + 1) = 0;
  uint64_t v19 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v18);
  unsigned int v14 = *(_DWORD *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a2 + 8 * v14) = v13;
  ++*(_DWORD *)(a2 + 8);
  return *(unsigned int *)(*((void *)v13 + 4) + 4);
}

void sub_1CBC59180(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = a4;
  uint64_t v7 = (_OWORD *)(v5 + 32 * a4);
  if (*(unsigned char *)v7 == 7)
  {
    long long v8 = v7[1];
    *(_OWORD *)a1 = *v7;
    *(_OWORD *)(a1 + 16) = v8;
    return;
  }
  uint64_t v11 = *(void *)(a3 + 24);
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  uint64_t v12 = *(void *)(v11 + 32);
  unint64_t v13 = *(void *)(v12 + 40);
  uint64_t v27 = &unk_1F261CD58;
  *(void *)&long long v28 = v12;
  long long v29 = v13;
  *((void *)&v28 + 1) = (*(uint64_t (**)(void))(**(void **)(v12 + 16) + 104))(*(void *)(v12 + 16));
  uint64_t v33 = 0;
  *((void *)&v30 + 1) = a3;
  *(void *)&long long v31 = 0;
  *(void *)&long long v30 = *(void *)(a3 + 24);
  unsigned int v14 = (_OWORD *)(a3 + 56);
  if (v14 != (long long *)((char *)&v29 + 8))
  {
    unint64_t v15 = *(unsigned __int8 **)v14;
    *((void *)&v29 + 1) = v15;
    if (v15) {
      llvm::MetadataTracking::track((uint64_t)&v29 + 8, v15, 2);
    }
  }
  uint64_t v33 = &off_1E66AF580;
  int v34 = 2;
  int v16 = (llvm::MachineFunction *)sub_1CC739C54(&v27, 0x13u, (unint64_t *)&v33, 1, 0, 0, 0);
  long long v18 = v17;
  unsigned int v19 = *(_DWORD *)(v5 + 32 * v6 + 4);
  int v20 = *(_DWORD *)v7 & 0xFFF00;
  memset(&v32[1], 0, 24);
  v32[0] = __PAIR64__(v19, v20);
  llvm::MachineInstr::addOperand(v17, v16, (const llvm::MachineOperand *)v32);
  unsigned int v21 = *(_DWORD *)(a2 + 336);
  if (v21 >= *(_DWORD *)(a2 + 340)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a2 + 328) + 8 * v21) = v18;
  ++*(_DWORD *)(a2 + 336);
  int v22 = *(_DWORD *)(*((void *)v18 + 4) + 4);
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = v22;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v27 = &unk_1F261CD58;
  if (*((void *)&v29 + 1))
  {
    int v23 = **((unsigned char **)&v29 + 1);
    if ((v23 - 4) > 0x1E)
    {
      if ((v23 - 3) >= 0xFFFFFFFE) {
        uint64_t v24 = *((void *)&v29 + 1);
      }
      else {
        uint64_t v24 = 0;
      }
      if ((v23 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v25 = v24 + 8;
LABEL_17:
        v32[0] = (char *)&v29 + 8;
        sub_1CC5FA668(v25 + 16, v32);
        return;
      }
      if (v23 == 3) {
        *(void *)(*((void *)&v29 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v29 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v29 + 1) + 12))
    {
      uint64_t v26 = *(void *)(*((void *)&v29 + 1) + 16);
      if ((v26 & 4) != 0)
      {
        unint64_t v25 = v26 & 0xFFFFFFFFFFFFFFF8;
        if (v25) {
          goto LABEL_17;
        }
      }
    }
  }
}

uint64_t sub_1CBC5951C()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  v363[32] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(v0 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::MachineDominatorTree::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  *(void *)(v3 + 304) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::MachineDominatorTree::ID);
  long long v8 = *(uint64_t **)(v3 + 8);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::MachinePostDominatorTree::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  *(void *)(v3 + 312) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::MachinePostDominatorTree::ID);
  uint64_t v12 = *(uint64_t **)(v3 + 8);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (v13 == v14)
  {
LABEL_14:
    uint64_t v15 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v13 != &llvm::LiveIntervals::ID)
    {
      v13 += 16;
      if (v13 == v14) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = *(void *)(v13 + 8);
  }
  *(void *)(v3 + 288) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 96))(v15, &llvm::LiveIntervals::ID);
  int v16 = *(uint64_t **)(v3 + 8);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  if (v17 == v18)
  {
LABEL_19:
    uint64_t v19 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v17 != &llvm::MachineLoopInfo::ID)
    {
      v17 += 16;
      if (v17 == v18) {
        goto LABEL_19;
      }
    }
    uint64_t v19 = *(void *)(v17 + 8);
  }
  *(void *)(v3 + 296) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v19 + 96))(v19, &llvm::MachineLoopInfo::ID);
  int v20 = *(uint64_t **)(v3 + 8);
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  if (v21 == v22)
  {
LABEL_24:
    uint64_t v23 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v21 != &llvm::AAResultsWrapperPass::ID)
    {
      v21 += 16;
      if (v21 == v22) {
        goto LABEL_24;
      }
    }
    uint64_t v23 = *(void *)(v21 + 8);
  }
  *(void *)(v3 + 320) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v23 + 96))(v23, &llvm::AAResultsWrapperPass::ID)+ 32);
  *(_DWORD *)(v3 + 336) = 0;
  uint64_t v24 = (void *)(v3 + 256);
  int v25 = *(_DWORD *)(v3 + 264);
  if (v25)
  {
    unsigned int v119 = *(_DWORD *)(v3 + 272);
    if (v119 > 4 * v25 && v119 >= 0x41)
    {
      int v120 = 1 << (33 - __clz(v25 - 1));
      if (v120 <= 64) {
        int v121 = 64;
      }
      else {
        int v121 = v120;
      }
LABEL_236:
      if (v121 == v119)
      {
        *(void *)(v3 + 264) = 0;
        uint64_t v294 = *(void **)(v3 + 256);
        uint64_t v295 = 40 * v119;
        do
        {
          *uint64_t v294 = -4096;
          v294 += 5;
          v295 -= 40;
        }
        while (v295);
      }
      else
      {
        MEMORY[0x1D25D9CD0](*v24, 8);
        if (v121)
        {
          unint64_t v122 = (4 * v121 / 3u + 1) | ((unint64_t)(4 * v121 / 3u + 1) >> 1);
          unint64_t v123 = v122 | (v122 >> 2) | ((v122 | (v122 >> 2)) >> 4);
          LODWORD(v123) = (((v123 | (v123 >> 8)) >> 16) | v123 | (v123 >> 8)) + 1;
          *(_DWORD *)(v3 + 272) = v123;
          int v124 = operator new(40 * v123, (std::align_val_t)8uLL);
          *(void *)(v3 + 256) = v124;
          *(void *)(v3 + 264) = 0;
          uint64_t v125 = *(unsigned int *)(v3 + 272);
          if (v125)
          {
            uint64_t v126 = 40 * v125;
            do
            {
              void *v124 = -4096;
              v124 += 5;
              v126 -= 40;
            }
            while (v126);
          }
        }
        else
        {
          *uint64_t v24 = 0;
          *(void *)(v3 + 264) = 0;
          *(_DWORD *)(v3 + 272) = 0;
        }
      }
      goto LABEL_28;
    }
  }
  else
  {
    if (!*(_DWORD *)(v3 + 268)) {
      goto LABEL_28;
    }
    unsigned int v119 = *(_DWORD *)(v3 + 272);
    if (v119 > 0x40)
    {
      int v121 = 0;
      goto LABEL_236;
    }
  }
  if (v119)
  {
    uint64_t v291 = (void *)*v24;
    uint64_t v292 = 40 * v119;
    do
    {
      *uint64_t v291 = -4096;
      v291 += 5;
      v292 -= 40;
    }
    while (v292);
  }
  *(void *)(v3 + 264) = 0;
LABEL_28:
  uint64_t v26 = *(void **)(v3 + 416);
  if (v26 == *(void **)(v3 + 408))
  {
LABEL_29:
    *(void *)(v3 + 428) = 0;
    goto LABEL_30;
  }
  uint64_t v102 = *(unsigned int *)(v3 + 424);
  if (v102 < 0x21 || 4 * (*(_DWORD *)(v3 + 428) - *(_DWORD *)(v3 + 432)) >= v102)
  {
    memset(v26, 255, 8 * v102);
    goto LABEL_29;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v3 + 408));
LABEL_30:
  sub_1CBB23528((_DWORD *)(v3 + 776));
  *(_DWORD *)(v3 + 536) = 0;
  uint64_t v27 = (void **)(v3 + 608);
  *(void *)(v3 + 520) = 0;
  *(void *)(v3 + 504) = 0;
  *(void *)(v3 + 512) = 0;
  int v28 = *(_DWORD *)(v3 + 616);
  if (v28 || *(_DWORD *)(v3 + 620))
  {
    uint64_t v129 = *(unsigned int *)(v3 + 624);
    if (v129 > 4 * v28 && v129 >= 0x41)
    {
      sub_1CD3C8060((_DWORD *)(v3 + 608));
      uint64_t v27 = (void **)(v3 + 608);
    }
    else
    {
      if (v129)
      {
        unsigned int v130 = *v27;
        uint64_t v131 = 16 * v129;
        do
        {
          *unsigned int v130 = -4096;
          v130 += 2;
          v131 -= 16;
        }
        while (v131);
      }
      *(void *)(v3 + 616) = 0;
    }
  }
  *(_DWORD *)(v3 + 640) = 0;
  *(void *)(v3 + 280) = 0;
  long long v29 = v2 + 40;
  long long v30 = (uint64_t *)v2[41];
  uint64_t v323 = v2 + 40;
  if (v30 != v2 + 40)
  {
    do
    {
      for (uint64_t i = v30[7]; (uint64_t *)i != v30 + 6; uint64_t i = *(void *)(i + 8))
      {
        int v32 = **(unsigned __int16 **)(i + 16);
        switch(v32)
        {
          case 306:
            *(void *)(v3 + 520) = i;
            break;
          case 309:
            unint64_t v273 = *(unsigned int *)(v3 + 536);
            if (v273 >= *(unsigned int *)(v3 + 540)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v3 + 528) + 8 * v273) = i;
            ++*(_DWORD *)(v3 + 536);
            long long v29 = v2 + 40;
            break;
          case 307:
            *(void *)(v3 + 512) = i;
            break;
        }
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      long long v30 = (uint64_t *)v30[1];
    }
    while (v30 != v29);
  }
  uint64_t v33 = v2[2];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2450, memory_order_acquire) & 1) == 0)
  {
    unsigned int v239 = v27;
    int v240 = __cxa_guard_acquire(&qword_1EBCC2450);
    uint64_t v27 = v239;
    if (v240)
    {
      byte_1EBCC23EF = 0;
      __cxa_guard_release(&qword_1EBCC2450);
      uint64_t v27 = v239;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2458, memory_order_acquire) & 1) == 0)
  {
    unsigned int v241 = v27;
    int v242 = __cxa_guard_acquire(&qword_1EBCC2458);
    uint64_t v27 = v241;
    if (v242)
    {
      byte_1EBCC23F0 = 1;
      __cxa_guard_release(&qword_1EBCC2458);
      uint64_t v27 = v241;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2460, memory_order_acquire) & 1) == 0)
  {
    v243 = v27;
    int v244 = __cxa_guard_acquire(&qword_1EBCC2460);
    uint64_t v27 = v243;
    if (v244)
    {
      byte_1EBCC23F1 = 0;
      __cxa_guard_release(&qword_1EBCC2460);
      uint64_t v27 = v243;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2468, memory_order_acquire) & 1) == 0)
  {
    unsigned int v245 = v27;
    int v246 = __cxa_guard_acquire(&qword_1EBCC2468);
    uint64_t v27 = v245;
    if (v246)
    {
      byte_1EBCC23F2 = 0;
      __cxa_guard_release(&qword_1EBCC2468);
      uint64_t v27 = v245;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2470, memory_order_acquire) & 1) == 0)
  {
    v247 = v27;
    int v248 = __cxa_guard_acquire(&qword_1EBCC2470);
    uint64_t v27 = v247;
    if (v248)
    {
      byte_1EBCC23F3 = 0;
      __cxa_guard_release(&qword_1EBCC2470);
      uint64_t v27 = v247;
    }
  }
  char v34 = 0;
  if (!dword_1EBCC24F8 || byte_1EBCC23EF || (uint64_t *)*v29 == v29) {
    goto LABEL_68;
  }
  if (!*(unsigned char *)(v33 + 365) || (*(_WORD *)(*v2 + 18) & 0x3FF0) == 0x640)
  {
    char v34 = 0;
    goto LABEL_68;
  }
  uint64_t v308 = (uint64_t)v27;
  sub_1CD112980(*(llvm::Module **)(*v2 + 40), (uint64_t)&__s1);
  if (v330)
  {
    unint64_t v35 = v329;
    unint64_t v36 = (v329 & 0x80u) == 0 ? v329 & 0x7F : v328;
    if (v36 == 33)
    {
      if ((v329 & 0x80) != 0)
      {
        p_s1 = __s1;
        unint64_t v35 = v328;
      }
      else
      {
        p_s1 = (void **)&__s1;
      }
      size_t v38 = v35 >= 0x21 ? 33 : v35;
      if (!memcmp(p_s1, "cliqueS-pop-intersection-(driver)", v38) && v35 == 33)
      {
        char v293 = sub_1CD42EC84(v3, v2, byte_1EBCC23F0);
        goto LABEL_558;
      }
    }
  }
  uint64_t v39 = (llvm::MachineBasicBlock *)v2[41];
  int v320 = sub_1CBC571E0((uint64_t)v39);
  if (v320) {
    llvm::MachineBasicBlock::getFirstTerminator(v39);
  }
  unint64_t v42 = (uint64_t *)v2[41];
  if (v42 != v29)
  {
    int v43 = 1;
    while (1)
    {
      if (v320)
      {
        llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(v3 + 304));
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
      }
      for (uint64_t j = v42[7]; (uint64_t *)j != v42 + 6; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v45 = *(unsigned __int16 **)(j + 16);
        uint64_t v46 = *((void *)v45 + 1);
        int v47 = *v45;
        if ((v46 & 8) != 0)
        {
          if ((v47 - 263) <= 1)
          {
            unsigned int v127 = sub_1CBDA6464(*v45, 0xDu);
            int v128 = *(unsigned __int8 *)(v3 + 508);
            *(_DWORD *)(v3 + 504) = *(_DWORD *)(*(void *)(j + 32) + 32 * v127 + 4);
            if (!v128) {
              *(unsigned char *)(v3 + 508) = 1;
            }
          }
          if ((unsigned __int16)(v47 - 263) < 2u) {
            goto LABEL_81;
          }
        }
        else
        {
          uint64_t v48 = sub_1CBE52E8C(*v45);
          if ((v48 & 0xFF00000000) == 0) {
            llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
          }
          if (v48 == 18) {
            goto LABEL_81;
          }
        }
        if ((*(_WORD *)(j + 44) & 0xC) != 0 && (*(_WORD *)(j + 44) & 4) == 0)
        {
          uint64_t v51 = j;
          if ((v46 & 0x80) == 0)
          {
            while ((*(_WORD *)(v51 + 44) & 8) != 0)
            {
              uint64_t v51 = *(void *)(v51 + 8);
              if ((*(unsigned char *)(*(void *)(v51 + 16) + 8) & 0x80) != 0)
              {
                uint64_t v285 = j;
                while ((*(_WORD *)(v285 + 44) & 8) != 0)
                {
                  uint64_t v285 = *(void *)(v285 + 8);
                  if ((*(unsigned char *)(*(void *)(v285 + 16) + 8) & 0x80) != 0) {
                    goto LABEL_103;
                  }
                }
                goto LABEL_81;
              }
            }
            goto LABEL_94;
          }
        }
        else if ((v46 & 0x80) == 0)
        {
          goto LABEL_94;
        }
LABEL_103:
        uint64_t v52 = *(void *)(j + 32);
        if (*(unsigned char *)v52 != 10) {
          goto LABEL_81;
        }
        unsigned int v53 = *(uint64_t ****)(v52 + 16);
        BOOL v54 = v53 && *((unsigned char *)v53 + 16) == 0;
        if (!v54 || (*((unsigned char *)v53 + 23) & 0x10) == 0) {
          goto LABEL_81;
        }
        uint64_t v55 = ***v53;
        uint64_t v56 = *(void *)(v55 + 152);
        uint64_t v57 = *(unsigned int *)(v55 + 168);
        if (!v57) {
          goto LABEL_192;
        }
        LODWORD(v58) = (v57 - 1) & ((v53 >> 4) ^ (v53 >> 9));
        uint64_t v59 = (uint64_t ****)(v56 + 16 * v58);
        uint64_t v60 = *v59;
        if (*v59 != v53)
        {
          int v61 = 1;
          while (v60 != (uint64_t ***)-4096)
          {
            int v62 = v58 + v61++;
            uint64_t v58 = v62 & (v57 - 1);
            uint64_t v60 = *(uint64_t ****)(v56 + 16 * v58);
            if (v60 == v53)
            {
              uint64_t v59 = (uint64_t ****)(v56 + 16 * v58);
              goto LABEL_116;
            }
          }
LABEL_192:
          uint64_t v59 = (uint64_t ****)(v56 + 16 * v57);
        }
LABEL_116:
        int8x8_t v63 = v59[1];
        if (*v63 != (uint64_t **)27) {
          goto LABEL_81;
        }
        int v64 = v63[2];
        uint64_t v65 = v63[3];
        char v66 = v63[4];
        uint64_t v67 = *(uint64_t *)((char *)v63 + 35);
        BOOL v68 = v64 == (uint64_t **)0x656A626F2E636761 && v65 == (uint64_t **)0x65746972772E7463;
        BOOL v69 = v68 && v66 == (uint64_t **)0x6F63646C6968635FLL;
        if (!v69 || v67 != 0x746E756F63646C69) {
          goto LABEL_81;
        }
LABEL_94:
        uint64_t v50 = sub_1CBE52E8C(v47);
        if ((v50 & 0xFF00000000) != 0)
        {
          switch(v50)
          {
            case 0x55:
              uint64_t v71 = *(void *)(v3 + 416);
              uint64_t v72 = *(unsigned int *)(v3 + 428);
              if (v71 == *(void *)(v3 + 408))
              {
                if (v72)
                {
                  char v73 = 0;
                  uint64_t v74 = 8 * v72;
                  int v75 = *(uint64_t ***)(v3 + 416);
                  while (*v75 != v42)
                  {
                    if (*v75 == (uint64_t *)-2) {
                      char v73 = v75;
                    }
                    ++v75;
                    v74 -= 8;
                    if (!v74)
                    {
                      if (!v73) {
                        goto LABEL_138;
                      }
                      *char v73 = v42;
                      --*(_DWORD *)(v3 + 432);
                      break;
                    }
                  }
LABEL_140:
                  int v78 = (unint64_t *)(j + 48);
                  unint64_t v77 = *(void *)(j + 48);
                  if (v77 < 8) {
                    goto LABEL_147;
                  }
                  if ((v77 & 7) != 0)
                  {
                    long long v79 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
                    if ((*(void *)(j + 48) & 7) == 3 && v79 != 0)
                    {
                      unsigned int v100 = *v79;
                      goto LABEL_148;
                    }
LABEL_147:
                    unsigned int v100 = 0;
                  }
                  else
                  {
                    v77 &= 0xFFFFFFFFFFFFFFF8;
                    unint64_t *v78 = v77;
                    unsigned int v100 = 1;
                  }
LABEL_148:
                  if ((v77 & 7) != 0)
                  {
                    unint64_t v81 = *(void *)((v77 & 0xFFFFFFFFFFFFFFF8) + 8);
                  }
                  else
                  {
                    unint64_t v81 = v77 & 0xFFFFFFFFFFFFFFF8;
                    unint64_t *v78 = v77 & 0xFFFFFFFFFFFFFFF8;
                  }
                  int v334 = 0;
                  char v82 = sub_1CBC5D2B4(*(void *)(v3 + 608), *(_DWORD *)(v3 + 624), j, &v334);
                  unsigned int v83 = v334;
                  if ((v82 & 1) == 0)
                  {
                    int v84 = *(_DWORD *)(v3 + 616);
                    unsigned int v85 = *(_DWORD *)(v3 + 624);
                    if (4 * v84 + 4 >= 3 * v85)
                    {
                      v85 *= 2;
                    }
                    else if (v85 + ~v84 - *(_DWORD *)(v3 + 620) > v85 >> 3)
                    {
                      goto LABEL_153;
                    }
                    sub_1CD430810(v308, v85);
                    int v334 = 0;
                    sub_1CBC5D2B4(*(void *)(v3 + 608), *(_DWORD *)(v3 + 624), j, &v334);
                    unsigned int v83 = v334;
LABEL_153:
                    ++*(_DWORD *)(v3 + 616);
                    if (*(void *)v83 != -4096) {
                      --*(_DWORD *)(v3 + 620);
                    }
                    *(void *)unsigned int v83 = j;
                    *((void *)v83 + 1) = 0;
                  }
                  *((void *)v83 + 1) = v81;
                  if (v100 >= 2)
                  {
                    unint64_t v86 = *v78;
                    if (*v78 < 8)
                    {
                      int v78 = 0;
                    }
                    else if ((v86 & 7) != 0)
                    {
                      unint64_t v87 = v86 & 0xFFFFFFFFFFFFFFF8;
                      if (v87) {
                        uint64_t v88 = (unint64_t *)(v87 + 8);
                      }
                      else {
                        uint64_t v88 = 0;
                      }
                      if ((*v78 & 7) == 3) {
                        int v78 = v88;
                      }
                      else {
                        int v78 = 0;
                      }
                    }
                    else
                    {
                      unint64_t *v78 = v86 & 0xFFFFFFFFFFFFFFF8;
                    }
                    uint64_t v97 = v78[1];
                    uint64_t v98 = *(unsigned int *)(v3 + 640);
                    if (v98 >= *(_DWORD *)(v3 + 644))
                    {
                      sub_1CD43098C(v3 + 632, v97, v78[2]);
                    }
                    else
                    {
                      unsigned int v99 = (uint64_t *)(*(void *)(v3 + 632) + 16 * v98);
                      *unsigned int v99 = v97;
                      v99[1] = v78[2];
                      *(_DWORD *)(v3 + 640) = v98 + 1;
                    }
                  }
                  goto LABEL_81;
                }
LABEL_138:
                unsigned int v76 = *(_DWORD *)(v3 + 424);
                if (v72 < v76)
                {
                  *(_DWORD *)(v3 + 428) = v72 + 1;
                  *(void *)(v71 + 8 * v72) = v42;
                  goto LABEL_140;
                }
              }
              else
              {
                unsigned int v76 = *(_DWORD *)(v3 + 424);
              }
              if (3 * v76 <= 4 * ((int)v72 - *(_DWORD *)(v3 + 432)))
              {
                if (v76 >= 0x40) {
                  v76 *= 2;
                }
                else {
                  unsigned int v76 = 128;
                }
              }
              else if (v76 - v72 >= v76 >> 3)
              {
                goto LABEL_168;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v3 + 408), v76);
              unsigned int v76 = *(_DWORD *)(v3 + 424);
              uint64_t v71 = *(void *)(v3 + 416);
LABEL_168:
              unsigned int v89 = v76 - 1;
              unsigned int v90 = (v76 - 1) & ((v42 >> 4) ^ (v42 >> 9));
              uint64_t v91 = (uint64_t **)(v71 + 8 * v90);
              unsigned int v92 = *v91;
              if (*v91 == (uint64_t *)-1)
              {
                uint64_t v93 = 0;
LABEL_185:
                if (v93) {
                  long long v101 = v93;
                }
                else {
                  long long v101 = v91;
                }
                if (*v101 != v42)
                {
                  if (*v101 == (uint64_t *)-2) {
                    --*(_DWORD *)(v3 + 432);
                  }
                  else {
                    ++*(_DWORD *)(v3 + 428);
                  }
                  *long long v101 = v42;
                }
              }
              else
              {
                uint64_t v93 = 0;
                int v94 = 1;
                while (v92 != v42)
                {
                  if (v93) {
                    BOOL v95 = 0;
                  }
                  else {
                    BOOL v95 = v92 == (uint64_t *)-2;
                  }
                  if (v95) {
                    uint64_t v93 = v91;
                  }
                  unsigned int v96 = v90 + v94++;
                  unsigned int v90 = v96 & v89;
                  uint64_t v91 = (uint64_t **)(v71 + 8 * (v96 & v89));
                  unsigned int v92 = *v91;
                  if (*v91 == (uint64_t *)-1) {
                    goto LABEL_185;
                  }
                }
              }
              goto LABEL_140;
            case 0xC0:
              v43 &= sub_1CBC56F08(v3, j);
              ++*(_DWORD *)(v3 + 284);
              goto LABEL_81;
            case 0x62:
              v43 &= sub_1CBC56F08(v3, j);
              ++*(_DWORD *)(v3 + 280);
LABEL_81:
              uint64_t v356 = j;
              sub_1CBC5D224((uint64_t)&v334, (_DWORD *)(v3 + 776), &v356);
              break;
          }
        }
        if ((*(unsigned char *)j & 4) == 0)
        {
          while ((*(_WORD *)(j + 44) & 8) != 0)
            uint64_t j = *(void *)(j + 8);
        }
      }
      unint64_t v42 = (uint64_t *)v42[1];
      if (v42 == v323) {
        goto LABEL_197;
      }
    }
  }
  LOBYTE(v43) = 1;
LABEL_197:
  if (!*(_DWORD *)(v3 + 280) && !*(_DWORD *)(v3 + 284) && *(_DWORD *)(v3 + 428) == *(_DWORD *)(v3 + 432))
  {
LABEL_200:
    char v34 = 0;
    goto LABEL_201;
  }
  int v104 = *(_DWORD *)(v3 + 428);
  int v105 = *(_DWORD *)(v3 + 432);
  *(_DWORD *)(v3 + 248) = v104 == v105;
  if ((v43 & 1) == 0)
  {
    char v34 = 0;
    if (v104 == v105 || !byte_1EBCC23F0) {
      goto LABEL_201;
    }
  }
  BOOL v304 = v104 == v105;
  uint64_t v309 = *(void *)(*v2 + 40);
  uint64_t v106 = *(void *)(v309 + 112);
  unsigned int v107 = *(_DWORD *)(v106 + 32);
  if (v107 <= 1) {
    uint64_t v108 = 1;
  }
  else {
    uint64_t v108 = v107;
  }
  if (v107 <= 0x16) {
    size_t v109 = v108;
  }
  else {
    size_t v109 = 23;
  }
  uint64_t v321 = *(uint64_t **)(v309 + 112);
  v313 = (llvm::SmallPtrSetImplBase *)*(unsigned int *)(v106 + 8);
  if (!v313) {
    goto LABEL_261;
  }
  uint64_t v110 = 0;
  int v111 = 0;
  do
    int v111 = 33 * v111 + aAgcRiaRayDrive[v110++];
  while (v109 != v110);
  uint64_t v112 = *v321;
  uint64_t v113 = *v321 + 8 * (void)v313 + 8;
  int v114 = 1;
  int v115 = v111;
  uint64_t v316 = v113;
  while (1)
  {
    uint64_t v116 = v115 & (v313 - 1);
    uint64_t v117 = *(void **)(v112 + 8 * v116);
    if (v117 != (void *)-8)
    {
      if (!v117) {
        goto LABEL_261;
      }
      if (*(_DWORD *)(v113 + 4 * v116) == v111 && v109 == *v117)
      {
        int v118 = memcmp("agc.ria.ray_driver_data", (char *)v117 + *((unsigned int *)v321 + 5), v109);
        uint64_t v113 = v316;
        if (!v118) {
          break;
        }
      }
    }
    int v115 = v114 + v116;
    ++v114;
  }
  if (v116 != -1
    && (llvm::SmallPtrSetImplBase *)(int)v116 != v313
    && (uint64_t v132 = *(void *)(*(void *)(v112 + 8 * (int)v116) + 8)) != 0
    && *(unsigned char *)(v132 + 16) == 3
    && (*(_DWORD *)(v132 + 32) & 0xFu) - 7 > 1)
  {
    BOOL v133 = 1;
    int v134 = v304;
  }
  else
  {
LABEL_261:
    BOOL v133 = llvm::Module::getGlobalVariable(v309, "agc.ria.ray_user_data", 0x15uLL, 0) != 0;
    int v134 = *(_DWORD *)(v3 + 248);
  }
  int v135 = v2;
  if (!v134)
  {
    if ((dword_1EBCC24F8 & 1) == 0) {
      goto LABEL_200;
    }
    int v136 = byte_1EBCC23F1;
    int v137 = byte_1EBCC23F2;
    if (byte_1EBCC23F0)
    {
      if (v133)
      {
        if (byte_1EBCC23F1 && byte_1EBCC23F2) {
          goto LABEL_200;
        }
        if (((*(unsigned __int16 *)(*v2 + 18) >> 4) & 0x3FFu) - 100 > 8) {
          goto LABEL_200;
        }
        uint64_t v138 = sub_1CBC565FC((uint64_t)v2, *(void *)(v3 + 312), *(void *)(v3 + 296), v3 + 776);
        if (!v138) {
          goto LABEL_200;
        }
        uint64_t v140 = v138;
        unint64_t v141 = v139;
        uint64_t v356 = (uint64_t)&unk_1F261CD58;
        long long v358 = 0u;
        long long v359 = 0u;
        long long v360 = 0u;
        uint64_t v361 = 0;
        char v357 = v2;
        *((void *)&v358 + 1) = v2[5];
        *(void *)&long long v358 = (*(uint64_t (**)(uint64_t))(*(void *)v2[2] + 104))(v2[2]);
        uint64_t v349 = 0;
        int v324 = v137;
        if (!(void)v359)
        {
          *(void *)&long long v359 = 0;
          goto LABEL_272;
        }
        int v207 = *(unsigned __int8 *)v359;
        if ((v207 - 4) > 0x1E)
        {
          if ((v207 - 3) >= 0xFFFFFFFE) {
            uint64_t v236 = v359;
          }
          else {
            uint64_t v236 = 0;
          }
          if ((v207 - 3) > 0xFFFFFFFD)
          {
            unint64_t v237 = v236 + 8;
            goto LABEL_449;
          }
          if (v207 == 3) {
            *(void *)(v359 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v359 + 1) & 0x7F) == 2 || *(_DWORD *)(v359 + 12))
        {
          uint64_t v287 = *(void *)(v359 + 16);
          if ((v287 & 4) != 0)
          {
            unint64_t v237 = v287 & 0xFFFFFFFFFFFFFFF8;
            if (v237)
            {
LABEL_449:
              int v334 = (char *)&v359;
              sub_1CC5FA668(v237 + 16, &v334);
              *(void *)&long long v359 = v349;
              int v135 = v2;
              if (v349) {
                llvm::MetadataTracking::retrack((uint64_t)&v349, (unsigned __int8 *)v349, (uint64_t)&v359);
              }
LABEL_272:
              uint64_t v317 = v140;
              *((void *)&v359 + 1) = v140;
              unint64_t v306 = v141;
              long long v360 = v141;
              int v142 = sub_1CBC57248((uint64_t)&v356, v3 + 328);
              int v314 = sub_1CBC57398((uint64_t)&v356, v3 + 328, v142);
              int v301 = v142;
              uint64_t v303 = v3 + 328;
              int v311 = sub_1CBC57508((uint64_t)&v356, v3 + 328, v142);
              sub_1CBC2E7FC((uint64_t)&v356, 2u);
              unsigned int v144 = *(_DWORD *)(v3 + 336);
              if (v144 >= *(_DWORD *)(v3 + 340)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v3 + 328) + 8 * v144) = v143;
              ++*(_DWORD *)(v3 + 336);
              if (v136) {
                goto LABEL_274;
              }
              uint64_t v159 = v135[2];
              int v334 = (char *)&unk_1F25FDCB8;
              uint64_t v335 = v159;
              *((void *)&v336 + 1) = &v334;
              unsigned int v160 = sub_1CBD854F8((uint64_t)&v334);
              if (*((char ***)&v336 + 1) == &v334)
              {
                (*((void (**)(char **))v334 + 4))(&v334);
              }
              else if (*((void *)&v336 + 1))
              {
                (*(void (**)(void))(**((void **)&v336 + 1) + 40))();
              }
              uint64_t v299 = *(void *)(v140 + 32);
              unint64_t v161 = *(uint64_t **)(*(void *)(*(void *)v299 + 40) + 112);
              unsigned int v162 = *((_DWORD *)v161 + 8);
              v310 = v161;
              if (v160 <= 3)
              {
                if (v162 <= 1) {
                  uint64_t v163 = 1;
                }
                else {
                  uint64_t v163 = v162;
                }
                if (v162 <= 0x14) {
                  size_t v164 = v163;
                }
                else {
                  size_t v164 = 21;
                }
                uint64_t v300 = *((unsigned int *)v161 + 2);
                if (v300)
                {
                  uint64_t v165 = 0;
                  int v166 = 0;
                  do
                    int v166 = 33 * v166 + aAgcRiaRayCoreD[v165++];
                  while (v164 != v165);
                  uint64_t v167 = *v161;
                  uint64_t v168 = *v161 + 8 * v300 + 8;
                  int v169 = 1;
                  int v170 = v166;
                  while (1)
                  {
                    uint64_t v171 = v170 & (v300 - 1);
                    unint64_t v172 = *(void **)(v167 + 8 * v171);
                    if (v172 != (void *)-8)
                    {
                      if (!v172) {
                        goto LABEL_274;
                      }
                      if (*(_DWORD *)(v168 + 4 * v171) == v166 && v164 == *v172)
                      {
                        int v173 = memcmp("agc.ria.ray_core_data", (char *)v172 + *((unsigned int *)v161 + 5), v164);
                        unint64_t v161 = v310;
                        if (!v173) {
                          break;
                        }
                      }
                    }
                    int v170 = v169 + v171;
                    ++v169;
                  }
                  if (v171 != -1 && (int)v171 != v300)
                  {
                    uint64_t v208 = *(void *)(*(void *)(v167 + 8 * (int)v171) + 8);
                    if (v208)
                    {
                      if (*(unsigned char *)(v208 + 16) == 3 && (*(_DWORD *)(v208 + 32) & 0xFu) - 7 >= 2)
                      {
                        uint64_t v339 = 0;
                        long long v338 = 0u;
                        long long v337 = 0u;
                        long long v336 = 0u;
                        int v334 = (char *)&unk_1F261CD58;
                        uint64_t v335 = v299;
                        *((void *)&v336 + 1) = *(void *)(v299 + 40);
                        *(void *)&long long v336 = (*(uint64_t (**)(void))(**(void **)(v299 + 16) + 104))(*(void *)(v299 + 16));
                        __p[0] = 0;
                        if (!(void)v337)
                        {
LABEL_410:
                          *(void *)&long long v337 = 0;
LABEL_411:
                          *((void *)&v337 + 1) = v140;
                          long long v338 = v306;
                          uint64_t v209 = *(void *)(v299 + 344);
                          uint64_t v210 = sub_1CBB35BE4(*(void *)(v299 + 16));
                          unsigned int v211 = sub_1CD1117B0((llvm::GlobalValue *)v208, 0, v209, v210 << 32);
                          LODWORD(v209) = sub_1CBC586EC((uint64_t)&v334, v303, v211);
                          int v212 = sub_1CBC586EC((uint64_t)&v334, v303, 0x20000u);
                          int v213 = sub_1CBC58828((uint64_t)&v334, v303, v314, 0x20u, v209);
                          int v214 = sub_1CBC58A00((uint64_t)&v334, v303, v212, v213);
                          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2418, memory_order_acquire) & 1) == 0
                            && __cxa_guard_acquire(&qword_1EBCC2418))
                          {
                            byte_1EBCC23EA = 0;
                            __cxa_guard_release(&qword_1EBCC2418);
                          }
                          uint64_t v216 = *(void *)(v299 + 48);
                          if (!v216)
                          {
                            uint64_t v216 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v299 + 8) + 216))(*(void *)(v299 + 8), v299 + 128, v299);
                            *(void *)(v299 + 48) = v216;
                          }
                          if (!byte_1EBCC23EA && *(unsigned char *)(v216 + 561))
                          {
                            int v263 = sub_1CBC586EC((uint64_t)&v334, v303, v211 + 0x40000);
                            sub_1CBC57DDC(v3, &v334, v213, v311, 0x20u, 5, v208, v264);
                            sub_1CBC57DDC(v3, &v334, v214, v311, 0x20u, 5, v208, v265);
                            int v266 = sub_1CBB35BE4(*(void *)(v299 + 16));
                            unsigned int RaySidebandSizePerRay = llvm::GPUBaseInfo::getRaySidebandSizePerRay(v266);
                            int v218 = v263;
                            char v222 = 63 - __clz(RaySidebandSizePerRay);
                            uint64_t v219 = v3;
                            int v220 = v301;
                          }
                          else
                          {
                            sub_1CBC57DDC(v3, &v334, v213, v311, 0x20u, 5, v208, v215);
                            int v218 = v214;
                            uint64_t v219 = v3;
                            int v220 = v311;
                            unsigned int RaySidebandSizePerRay = 32;
                            char v222 = 5;
                          }
                          sub_1CBC57DDC(v219, &v334, v218, v220, RaySidebandSizePerRay, v222, v208, v217);
                          int v334 = (char *)&unk_1F261CD58;
                          uint64_t v223 = v337;
                          if (!(void)v337) {
                            goto LABEL_274;
                          }
                          int v224 = *(unsigned __int8 *)v337;
                          if ((v224 - 4) <= 0x1E)
                          {
                            if ((*(unsigned char *)(v337 + 1) & 0x7F) != 2 && !*(_DWORD *)(v337 + 12)) {
                              goto LABEL_274;
                            }
                            uint64_t v225 = *(void *)(v337 + 16);
                            if ((v225 & 4) == 0) {
                              goto LABEL_274;
                            }
                            unint64_t v226 = v225 & 0xFFFFFFFFFFFFFFF8;
                            if (!v226) {
                              goto LABEL_274;
                            }
                            goto LABEL_575;
                          }
                          if ((v224 - 3) >= 0xFFFFFFFE) {
                            uint64_t v296 = v337;
                          }
                          else {
                            uint64_t v296 = 0;
                          }
                          if ((v224 - 3) >= 0xFFFFFFFE)
                          {
                            unint64_t v226 = v296 + 8;
LABEL_575:
                            uint64_t v349 = (uint64_t)&v337;
LABEL_582:
                            sub_1CC5FA668(v226 + 16, &v349);
                            goto LABEL_274;
                          }
LABEL_583:
                          if (v224 == 3) {
                            *(void *)(v223 + 8) = 0;
                          }
                          goto LABEL_274;
                        }
                        int v267 = *(unsigned __int8 *)v337;
                        if ((v267 - 4) > 0x1E)
                        {
                          if ((v267 - 3) >= 0xFFFFFFFE) {
                            uint64_t v282 = v337;
                          }
                          else {
                            uint64_t v282 = 0;
                          }
                          if ((v267 - 3) <= 0xFFFFFFFD)
                          {
                            if (v267 == 3) {
                              *(void *)(v337 + 8) = 0;
                            }
                            goto LABEL_410;
                          }
                          unint64_t v269 = v282 + 8;
                        }
                        else
                        {
                          if ((*(unsigned char *)(v337 + 1) & 0x7F) != 2 && !*(_DWORD *)(v337 + 12)) {
                            goto LABEL_410;
                          }
                          uint64_t v268 = *(void *)(v337 + 16);
                          if ((v268 & 4) == 0) {
                            goto LABEL_410;
                          }
                          unint64_t v269 = v268 & 0xFFFFFFFFFFFFFFF8;
                          if (!v269) {
                            goto LABEL_410;
                          }
                        }
                        uint64_t v349 = (uint64_t)&v337;
                        sub_1CC5FA668(v269 + 16, &v349);
                        *(void **)&long long v337 = __p[0];
                        if (__p[0]) {
                          llvm::MetadataTracking::retrack((uint64_t)__p, (unsigned __int8 *)__p[0], (uint64_t)&v337);
                        }
                        goto LABEL_411;
                      }
                    }
                  }
                }
LABEL_274:
                if (!v324)
                {
                  sub_1CBC57678(v3, v317, v306, v314, v311, 1);
                  sub_1CBC57678(v3, v317, v306, v314, v311, 0);
                }
                sub_1CBC56CB4(v3);
                uint64_t v356 = (uint64_t)&unk_1F261CD58;
                if (!(void)v359) {
                  goto LABEL_280;
                }
                int v145 = *(unsigned __int8 *)v359;
                if ((v145 - 4) > 0x1E)
                {
                  if ((v145 - 3) >= 0xFFFFFFFE) {
                    uint64_t v205 = v359;
                  }
                  else {
                    uint64_t v205 = 0;
                  }
                  if ((v145 - 3) < 0xFFFFFFFE)
                  {
                    if (v145 == 3) {
                      *(void *)(v359 + 8) = 0;
                    }
                    goto LABEL_280;
                  }
                  unint64_t v206 = v205 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v359 + 1) & 0x7F) != 2 && !*(_DWORD *)(v359 + 12)) {
                    goto LABEL_280;
                  }
                  uint64_t v284 = *(void *)(v359 + 16);
                  if ((v284 & 4) == 0) {
                    goto LABEL_280;
                  }
                  unint64_t v206 = v284 & 0xFFFFFFFFFFFFFFF8;
                  if (!v206) {
                    goto LABEL_280;
                  }
                }
                int v334 = (char *)&v359;
                sub_1CC5FA668(v206 + 16, &v334);
LABEL_280:
                char v34 = 1;
                goto LABEL_201;
              }
              if (v162 <= 1) {
                uint64_t v174 = 1;
              }
              else {
                uint64_t v174 = v162;
              }
              if (v162 <= 0x14) {
                size_t v175 = v174;
              }
              else {
                size_t v175 = 21;
              }
              uint64_t v302 = *((unsigned int *)v161 + 2);
              if (!v302) {
                goto LABEL_274;
              }
              uint64_t v176 = 0;
              int v177 = 0;
              do
                int v177 = 33 * v177 + aAgcRiaRayCoreD[v176++];
              while (v175 != v176);
              uint64_t v178 = *v161;
              uint64_t v179 = *v161 + 8 * v302 + 8;
              int v180 = 1;
              int v181 = v177;
              while (1)
              {
                uint64_t v182 = v181 & (v302 - 1);
                unint64_t v183 = *(void **)(v178 + 8 * v182);
                if (v183 != (void *)-8)
                {
                  if (!v183) {
                    goto LABEL_274;
                  }
                  if (*(_DWORD *)(v179 + 4 * v182) == v177 && v175 == *v183)
                  {
                    int v184 = memcmp("agc.ria.ray_core_data", (char *)v183 + *((unsigned int *)v161 + 5), v175);
                    unint64_t v161 = v310;
                    if (!v184) {
                      break;
                    }
                  }
                }
                int v181 = v180 + v182;
                ++v180;
              }
              if (v182 == -1) {
                goto LABEL_274;
              }
              if ((int)v182 == v302) {
                goto LABEL_274;
              }
              uint64_t v227 = *(void *)(*(void *)(v178 + 8 * (int)v182) + 8);
              if (!v227 || *(unsigned char *)(v227 + 16) != 3 || (*(_DWORD *)(v227 + 32) & 0xFu) - 7 < 2) {
                goto LABEL_274;
              }
              uint64_t v339 = 0;
              long long v338 = 0u;
              long long v337 = 0u;
              long long v336 = 0u;
              int v334 = (char *)&unk_1F261CD58;
              uint64_t v335 = v299;
              *((void *)&v336 + 1) = *(void *)(v299 + 40);
              *(void *)&long long v336 = (*(uint64_t (**)(void))(**(void **)(v299 + 16) + 104))(*(void *)(v299 + 16));
              __p[0] = 0;
              if (!(void)v337) {
                goto LABEL_430;
              }
              int v270 = *(unsigned __int8 *)v337;
              if ((v270 - 4) > 0x1E)
              {
                if ((v270 - 3) >= 0xFFFFFFFE) {
                  uint64_t v283 = v337;
                }
                else {
                  uint64_t v283 = 0;
                }
                if ((v270 - 3) > 0xFFFFFFFD)
                {
                  unint64_t v272 = v283 + 8;
                  goto LABEL_516;
                }
                if (v270 == 3) {
                  *(void *)(v337 + 8) = 0;
                }
              }
              else if ((*(unsigned char *)(v337 + 1) & 0x7F) == 2 || *(_DWORD *)(v337 + 12))
              {
                uint64_t v271 = *(void *)(v337 + 16);
                if ((v271 & 4) != 0)
                {
                  unint64_t v272 = v271 & 0xFFFFFFFFFFFFFFF8;
                  if (v272)
                  {
LABEL_516:
                    uint64_t v349 = (uint64_t)&v337;
                    sub_1CC5FA668(v272 + 16, &v349);
                    *(void **)&long long v337 = __p[0];
                    if (__p[0]) {
                      llvm::MetadataTracking::retrack((uint64_t)__p, (unsigned __int8 *)__p[0], (uint64_t)&v337);
                    }
LABEL_431:
                    *((void *)&v337 + 1) = v317;
                    long long v338 = v306;
                    uint64_t v228 = *(void *)(v299 + 344);
                    uint64_t v229 = sub_1CBB35BE4(*(void *)(v299 + 16));
                    unsigned int v230 = sub_1CD1117B0((llvm::GlobalValue *)v227, 0, v228, v229 << 32);
                    int v231 = sub_1CBC586EC((uint64_t)&v334, v303, v230);
                    int v232 = sub_1CBC58828((uint64_t)&v334, v303, v314, 0x40u, v231);
                    sub_1CBC57DDC(v3, &v334, v232, v311, 0x40u, 6, v227, v233);
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC2420, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_1EBCC2420))
                    {
                      byte_1EBCC23EB = 0;
                      __cxa_guard_release(&qword_1EBCC2420);
                    }
                    uint64_t v234 = *(void *)(v299 + 48);
                    if (!v234)
                    {
                      uint64_t v234 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v299 + 8) + 216))(*(void *)(v299 + 8), v299 + 128, v299);
                      *(void *)(v299 + 48) = v234;
                    }
                    if (!byte_1EBCC23EB && *(unsigned char *)(v234 + 561))
                    {
                      int v274 = sub_1CBB35BE4(*(void *)(v299 + 16));
                      unsigned int v275 = llvm::GPUBaseInfo::getRaySidebandSizePerRay(v274);
                      int v276 = sub_1CBC586EC((uint64_t)&v334, v303, v230 + 0x40000);
                      int v277 = sub_1CBC58828((uint64_t)&v334, v303, v314, v275, v276);
                      sub_1CBC57DDC(v3, &v334, v277, v311, v275, 63 - __clz(v275), v227, v278);
                    }
                    int v334 = (char *)&unk_1F261CD58;
                    uint64_t v223 = v337;
                    if (!(void)v337) {
                      goto LABEL_274;
                    }
                    int v224 = *(unsigned __int8 *)v337;
                    if ((v224 - 4) > 0x1E)
                    {
                      if ((v224 - 3) >= 0xFFFFFFFE) {
                        uint64_t v297 = v337;
                      }
                      else {
                        uint64_t v297 = 0;
                      }
                      if ((v224 - 3) < 0xFFFFFFFE) {
                        goto LABEL_583;
                      }
                      unint64_t v226 = v297 + 8;
                    }
                    else
                    {
                      if ((*(unsigned char *)(v337 + 1) & 0x7F) != 2 && !*(_DWORD *)(v337 + 12)) {
                        goto LABEL_274;
                      }
                      uint64_t v235 = *(void *)(v337 + 16);
                      if ((v235 & 4) == 0) {
                        goto LABEL_274;
                      }
                      unint64_t v226 = v235 & 0xFFFFFFFFFFFFFFF8;
                      if (!v226) {
                        goto LABEL_274;
                      }
                    }
                    uint64_t v349 = (uint64_t)&v337;
                    goto LABEL_582;
                  }
                }
              }
LABEL_430:
              *(void *)&long long v337 = 0;
              goto LABEL_431;
            }
          }
        }
        *(void *)&long long v359 = 0;
        int v135 = v2;
        goto LABEL_272;
      }
      char v293 = sub_1CBC56568(v3, (uint64_t)v2, byte_1EBCC23F1 == 0, byte_1EBCC23F2 == 0);
    }
    else
    {
      char v293 = sub_1CD42F2AC();
    }
LABEL_558:
    char v34 = v293;
    goto LABEL_201;
  }
  char v34 = 0;
  if ((dword_1EBCC24F8 & 2) == 0 || byte_1EBCC23F3) {
    goto LABEL_201;
  }
  sub_1CBC5C920((uint64_t)&v334, (uint64_t)v2, v134, *(void *)(v3 + 320), v3 + 256);
  sub_1CBC555EC((unint64_t)&v334);
  uint64_t v146 = v2[41];
  if ((uint64_t *)v146 == v323)
  {
    LOBYTE(v147) = 0;
    goto LABEL_348;
  }
  int v147 = 0;
  __n128 v148 = (__n128)vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(__n128 *)uint64_t v322 = v148;
  do
  {
    int v318 = v147;
    int v149 = *(_DWORD *)(v146 + 24);
    unint64_t v150 = v340;
    uint64_t v151 = 8;
    uint64_t v356 = 1;
    do
    {
      *(__n128 *)((char *)&v356 + v151) = v148;
      v151 += 16;
    }
    while (v151 != 264);
    char v152 = &v150[536 * v149];
    sub_1CBC5C2CC(&v356, v152);
    v362[0] = v363;
    v362[1] = (void *)0x2000000000;
    if (*((_DWORD *)v152 + 68)) {
      sub_1CBC5C404((uint64_t)v362, (uint64_t)(v152 + 264));
    }
    uint64_t v349 = 1;
    uint64_t v153 = 8;
    __n128 v148 = *(__n128 *)v322;
    do
    {
      *(_OWORD *)((char *)&v349 + v153) = *(_OWORD *)v322;
      v153 += 16;
    }
    while (v153 != 264);
    uint64_t v353 = v355;
    uint64_t v354 = 0x2000000000;
    uint64_t v154 = v146 + 48;
    unint64_t v155 = *(void *)(v146 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (!v155 || (*(unsigned char *)v155 & 4) == 0)
    {
      while ((*(_WORD *)(v155 + 44) & 4) != 0)
        unint64_t v155 = *(void *)v155 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v155 == v154)
    {
      int v156 = 0;
      int v158 = v318;
      goto LABEL_302;
    }
    int v156 = 0;
    do
    {
      BOOL v157 = sub_1CBC54DD8((unint64_t)&v334, v155, (uint64_t)&v356, (uint64_t)&v349, 1);
      unint64_t v155 = *(void *)v155 & 0xFFFFFFFFFFFFFFF8;
      if (v155)
      {
        __n128 v148 = *(__n128 *)v322;
        if ((*(unsigned char *)v155 & 4) != 0) {
          goto LABEL_299;
        }
      }
      else
      {
        __n128 v148 = *(__n128 *)v322;
      }
      while ((*(_WORD *)(v155 + 44) & 4) != 0)
        unint64_t v155 = *(void *)v155 & 0xFFFFFFFFFFFFFFF8;
LABEL_299:
      v156 |= v157;
    }
    while (v155 != v154);
    int v158 = v318;
    if (v353 != v355)
    {
      free(v353);
      __n128 v148 = *(__n128 *)v322;
    }
LABEL_302:
    if ((v349 & 1) == 0)
    {
      MEMORY[0x1D25D9CD0](v350, 8);
      __n128 v148 = *(__n128 *)v322;
    }
    if (v362[0] != v363)
    {
      free(v362[0]);
      __n128 v148 = *(__n128 *)v322;
    }
    if ((v356 & 1) == 0)
    {
      MEMORY[0x1D25D9CD0](v357, 8, v148);
      __n128 v148 = *(__n128 *)v322;
    }
    int v147 = v158 | v156;
    uint64_t v146 = *(void *)(v146 + 8);
  }
  while ((uint64_t *)v146 != v323);
LABEL_348:
  if (((*(unsigned __int16 *)(*v2 + 18) >> 4) & 0x3FFu) - 100 <= 8
    && (sub_1CD112980(*(llvm::Module **)(*v2 + 40), (uint64_t)__p), v333))
  {
    unint64_t v185 = v332 & 0x7C;
    if (v332 < 0) {
      unint64_t v185 = (unint64_t)__p[1];
    }
    if (v185 < 0xC) {
      goto LABEL_359;
    }
    uint64_t v186 = __p;
    if (v332 < 0) {
      uint64_t v186 = (void **)__p[0];
    }
    uint64_t v187 = *v186;
    int v188 = *((_DWORD *)v186 + 2);
    if (v187 != (void *)0x6365737265746E69 || v188 != 1852795252) {
      goto LABEL_359;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC23F8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC23F8))
    {
      byte_1EBCC23E8 = 0;
      __cxa_guard_release(&qword_1EBCC23F8);
    }
    if (byte_1EBCC23E8)
    {
LABEL_359:
      char v190 = 0;
    }
    else
    {
      char v319 = v147;
      uint64_t v191 = sub_1CBC565FC((uint64_t)v2, *(void *)(v3 + 312), *(void *)(v3 + 296), v3 + 776);
      unint64_t v307 = v192;
      unint64_t v315 = (llvm::SmallPtrSetImplBase *)v191;
      if (v191)
      {
        uint64_t v305 = *(uint64_t **)(v191 + 32);
        unint64_t v193 = *(uint64_t **)(*(void *)(*v305 + 40) + 112);
        unsigned int v194 = *((_DWORD *)v193 + 8);
        if (v194 <= 1) {
          uint64_t v195 = 1;
        }
        else {
          uint64_t v195 = v194;
        }
        if (v194 <= 0x14) {
          size_t v196 = v195;
        }
        else {
          size_t v196 = 21;
        }
        uint64_t v325 = *(void *)(*(void *)(*v305 + 40) + 112);
        uint64_t v312 = *((unsigned int *)v193 + 2);
        if (v312)
        {
          uint64_t v197 = 0;
          int v198 = 0;
          do
            int v198 = 33 * v198 + aAgcRiaTokenBuf[v197++];
          while (v196 != v197);
          uint64_t v199 = *v193;
          uint64_t v200 = *v193 + 8 * v312 + 8;
          int v201 = 1;
          int v202 = v198;
          while (1)
          {
            uint64_t v203 = v202 & (v312 - 1);
            unint64_t v204 = *(void **)(v199 + 8 * v203);
            if (v204 != (void *)-8)
            {
              if (!v204) {
                goto LABEL_456;
              }
              if (*(_DWORD *)(v200 + 4 * v203) == v198
                && v196 == *v204
                && !memcmp("agc.ria.token_buffers", (char *)v204 + *(unsigned int *)(v325 + 20), v196))
              {
                break;
              }
            }
            int v202 = v201 + v203;
            ++v201;
          }
          if (v203 != -1 && (int)v203 != v312)
          {
            uint64_t v238 = *(void *)(*(void *)(v199 + 8 * (int)v203) + 8);
            if (v238)
            {
              if (*(unsigned char *)(v238 + 16) == 3 && (*(_DWORD *)(v238 + 32) & 0xFu) - 7 >= 2)
              {
                uint64_t v249 = v305[43];
                uint64_t v250 = sub_1CBB35BE4(v305[2]);
                int v326 = sub_1CD1117B0((llvm::GlobalValue *)v238, 0, v249, v250 << 32);
                uint64_t v356 = (uint64_t)&unk_1F261CD58;
                uint64_t v361 = 0;
                long long v360 = 0u;
                long long v359 = 0u;
                long long v358 = 0u;
                char v357 = v305;
                *((void *)&v358 + 1) = v305[5];
                *(void *)&long long v358 = (*(uint64_t (**)(uint64_t))(*(void *)v357[2] + 104))(v357[2]);
                unint64_t v347 = 0;
                if (!(void)v359) {
                  goto LABEL_471;
                }
                int v279 = *(unsigned __int8 *)v359;
                if ((v279 - 4) > 0x1E)
                {
                  if ((v279 - 3) >= 0xFFFFFFFE) {
                    uint64_t v286 = v359;
                  }
                  else {
                    uint64_t v286 = 0;
                  }
                  if ((v279 - 3) <= 0xFFFFFFFD)
                  {
                    if (v279 == 3) {
                      *(void *)(v359 + 8) = 0;
                    }
                    goto LABEL_471;
                  }
                  unint64_t v281 = v286 + 8;
LABEL_533:
                  uint64_t v349 = (uint64_t)&v359;
                  sub_1CC5FA668(v281 + 16, &v349);
                  *(void *)&long long v359 = v347;
                  if (v347) {
                    llvm::MetadataTracking::retrack((uint64_t)&v347, v347, (uint64_t)&v359);
                  }
                }
                else
                {
                  if ((*(unsigned char *)(v359 + 1) & 0x7F) == 2 || *(_DWORD *)(v359 + 12))
                  {
                    uint64_t v280 = *(void *)(v359 + 16);
                    if ((v280 & 4) != 0)
                    {
                      unint64_t v281 = v280 & 0xFFFFFFFFFFFFFFF8;
                      if (v281) {
                        goto LABEL_533;
                      }
                    }
                  }
LABEL_471:
                  *(void *)&long long v359 = 0;
                }
                *((void *)&v359 + 1) = v315;
                long long v360 = v307;
                unint64_t v347 = (unsigned __int8 *)&off_1E66AF970;
                int v348 = 2;
                uint64_t v251 = (llvm::MachineFunction *)sub_1CC739C54(&v356, 0x1A42u, (unint64_t *)&v347, 1, 0, 0, 0);
                v253 = v252;
                LODWORD(v349) = 1;
                uint64_t v350 = 0;
                uint64_t v351 = 0;
                llvm::MachineInstr::addOperand(v252, v251, (const llvm::MachineOperand *)&v349);
                uint64_t v350 = 0;
                uint64_t v351 = 0;
                uint64_t v349 = 0x3A00000000;
                uint64_t v352 = 0;
                llvm::MachineInstr::addOperand(v253, v251, (const llvm::MachineOperand *)&v349);
                LODWORD(v349) = 1;
                uint64_t v350 = 0;
                uint64_t v351 = 0;
                llvm::MachineInstr::addOperand(v253, v251, (const llvm::MachineOperand *)&v349);
                int v254 = *(_DWORD *)(*((void *)v253 + 4) + 4);
                unsigned int v255 = *(_DWORD *)(v3 + 336);
                if (v255 >= *(_DWORD *)(v3 + 340)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v3 + 328) + 8 * v255) = v253;
                ++*(_DWORD *)(v3 + 336);
                int v256 = sub_1CBC586EC((uint64_t)&v356, v3 + 328, v326 + 192);
                int v257 = sub_1CBC586EC((uint64_t)&v356, v3 + 328, 0x200u);
                LODWORD(v349) = 0;
                HIDWORD(v349) = v257;
                uint64_t v351 = 0;
                uint64_t v352 = 0;
                uint64_t v350 = 0;
                int v258 = sub_1CBC58F9C((uint64_t)&v356, v3 + 328, v254, (const llvm::MachineOperand *)&v349, v256);
                sub_1CBC58278(v3, &v356, v258, 8, v238, v259);
                uint64_t v356 = (uint64_t)&unk_1F261CD58;
                if ((void)v359)
                {
                  int v260 = *(unsigned __int8 *)v359;
                  if ((v260 - 4) > 0x1E)
                  {
                    if ((v260 - 3) >= 0xFFFFFFFE) {
                      uint64_t v298 = v359;
                    }
                    else {
                      uint64_t v298 = 0;
                    }
                    if ((v260 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v262 = v298 + 8;
                      goto LABEL_590;
                    }
                    if (v260 == 3) {
                      *(void *)(v359 + 8) = 0;
                    }
                  }
                  else if ((*(unsigned char *)(v359 + 1) & 0x7F) == 2 || *(_DWORD *)(v359 + 12))
                  {
                    uint64_t v261 = *(void *)(v359 + 16);
                    if ((v261 & 4) != 0)
                    {
                      unint64_t v262 = v261 & 0xFFFFFFFFFFFFFFF8;
                      if (v262)
                      {
LABEL_590:
                        unint64_t v347 = (unsigned __int8 *)&v359;
                        sub_1CC5FA668(v262 + 16, &v347);
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_456:
        sub_1CBC56CB4(v3);
        char v190 = 1;
      }
      else
      {
        char v190 = 0;
      }
      LOBYTE(v147) = v319;
    }
    if (v333 && v332 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    char v190 = 0;
  }
  if (v345 != &v346) {
    free(v345);
  }
  if (v343 != &v344) {
    free(v343);
  }
  char v34 = v147 | v190;
  sub_1CBC5CD94(&v342);
  sub_1CBC5CD94(&v341);
  sub_1CBC5CD94(&v340);
  sub_1CBC5CD94(&v334);
LABEL_201:
  if (v330 && (char)v329 < 0) {
    operator delete(__s1);
  }
LABEL_68:
  sub_1CBC5D33C(v3, *(llvm::MachineInstr **)(v3 + 512));
  sub_1CBC5D33C(v3, *(llvm::MachineInstr **)(v3 + 520));
  uint64_t v40 = *(unsigned int *)(v3 + 536);
  if (v40)
  {
    BOOL v288 = *(llvm::MachineInstr ***)(v3 + 528);
    uint64_t v289 = 8 * v40;
    do
    {
      unint64_t v290 = *v288++;
      sub_1CBC5D33C(v3, v290);
      v289 -= 8;
    }
    while (v289);
  }
  return v34 & 1;
}

void sub_1CBC5BB00(uint64_t a1)
{
}

const char *sub_1CBC5BBA0()
{
  return "AGX3 SCS LUPlacement Pass";
}

uint64_t sub_1CBC5BBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if (sub_1CBC5BC0C(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v4)) {
    return v4;
  }
  else {
    return *(void *)a1 + 40 * *(unsigned int *)(a1 + 16);
  }
}

uint64_t sub_1CBC5BC0C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 40 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t sub_1CBC5BCA4(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 == 16)
  {
    LOBYTE(v6) = 0;
LABEL_13:
    int v7 = 1;
    return v6 | (v7 << 8);
  }
  if (v2 == 84)
  {
    uint64_t v5 = *(void *)(a1 - 32);
    if (v5)
    {
      if (!*(unsigned char *)(v5 + 16) && *(void *)(v5 + 24) == *(void *)(a1 + 72) && (*(unsigned char *)(v5 + 33) & 0x20) != 0)
      {
        LOBYTE(v6) = *(_DWORD *)(v5 + 36) == 2586;
        goto LABEL_13;
      }
    }
  }
  if (!a2) {
    goto LABEL_23;
  }
  uint64_t v17 = &v19;
  uint64_t v18 = &v19;
  uint64_t v19 = 0;
  if ((sub_1CBC5BE40(&v17, a1) & 1) != 0
    || (sub_1CBC5BEAC(&v18, a1) & 1) != 0
    || (uint64_t v17 = &v19, LODWORD(v6) = sub_1CBC5BF18(&v17, a1), v6))
  {
    LOWORD(v6) = sub_1CBC5BCA4(v19, (a2 - 1));
    int v7 = BYTE1(v6);
    return v6 | (v7 << 8);
  }
  unsigned int v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 < 0x1C)
  {
    int v7 = 0;
    return v6 | (v7 << 8);
  }
  unsigned int v9 = v8 - 41;
  int v7 = v6;
  if (v9 > 0x11) {
    return v6 | (v7 << 8);
  }
  uint64_t v6 = *(void *)(a1 - 64);
  if (!v6)
  {
LABEL_24:
    int v7 = 0;
    return v6 | (v7 << 8);
  }
  uint64_t v19 = *(void *)(a1 - 64);
  uint64_t v10 = *(void *)(a1 - 32);
  if (!v10)
  {
LABEL_23:
    LOBYTE(v6) = 0;
    goto LABEL_24;
  }
  uint64_t v11 = (a2 - 1);
  unsigned __int16 v12 = ((uint64_t (*)(void))sub_1CBC5BCA4)();
  unsigned __int16 v13 = sub_1CBC5BCA4(v10, v11);
  if (v12 >= 0x100u && (_BYTE)v12 || (unsigned int v14 = v13, v13 >= 0x100u) && (_BYTE)v13)
  {
    LOBYTE(v6) = 1;
    goto LABEL_13;
  }
  LOBYTE(v6) = 0;
  int v7 = v12 > 0xFFu && v14 > 0xFF;
  return v6 | (v7 << 8);
}

uint64_t sub_1CBC5BE40(void **a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 39
      && ((int v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (unsigned int v9 = *(uint64_t **)(a2 - 8))
        : (unsigned int v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (uint64_t v10 = *v9) != 0))
    {
      **a1 = v10;
      int v2 = 1;
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1CBC5BEAC(void **a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 40
      && ((int v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (unsigned int v9 = *(uint64_t **)(a2 - 8))
        : (unsigned int v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (uint64_t v10 = *v9) != 0))
    {
      **a1 = v10;
      int v2 = 1;
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1CBC5BF18(void **a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v4 = v3 - 28;
  BOOL v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  int v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v4 == 38
      && ((int v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (unsigned int v9 = *(uint64_t **)(a2 - 8))
        : (unsigned int v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (uint64_t v10 = *v9) != 0))
    {
      **a1 = v10;
      int v2 = 1;
    }
    else
    {
      int v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t *sub_1CBC5BF84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      BOOL v6 = v3 + 1;
      if (sub_1CBC5C00C(a3, v3)) {
        break;
      }
      ++v3;
      if (v6 == a2) {
        return a2;
      }
    }
    while (v6 != a2)
    {
      if ((sub_1CBC5C00C(a3, v6) & 1) == 0) {
        *v3++ = *v6;
      }
      ++v6;
    }
  }
  return v3;
}

uint64_t sub_1CBC5C00C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t *)(*(void *)a1 + 34384);
  uint64_t v6 = **(void **)(a1 + 8);
  if (!*v5 || *(void *)(v6 + 8) || *(void *)(v4 + 8)) {
    goto LABEL_4;
  }
  if ((*(void *)v6 & 4) != 0) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((*(void *)(v6 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v19 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v6 + 24)) + 7) >> 3;
    if (v18 == 1) {
  }
    }
  else
  {
    unint64_t v19 = -2;
  }
  long long v20 = *(_OWORD *)(v6 + 56);
  long long v36 = *(_OWORD *)(v6 + 40);
  long long v37 = v20;
  char v34 = (void *)v17;
  unint64_t v35 = v19;
  if ((*(void *)v4 & 4) != 0) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((*(void *)(v4 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v23 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v4 + 24)) + 7) >> 3;
    if (v22 == 1)
    {
      unint64_t v29 = v23;
      unint64_t v23 = v29;
    }
  }
  else
  {
    unint64_t v23 = -1;
  }
  uint64_t v24 = -2;
  long long v25 = *(_OWORD *)(v4 + 56);
  if (v23 < 0x7FFFFFFFFFFFFFFCLL) {
    uint64_t v24 = v23;
  }
  long long v32 = *(_OWORD *)(v4 + 40);
  long long v33 = v25;
  unint64_t v30 = v21;
  uint64_t v31 = v24;
  if (v19 > 0xFFFFFFFFFFFFFFFDLL || v23 > 0x7FFFFFFFFFFFFFFBLL) {
    return 0;
  }
  if (llvm::AAResults::alias(*v5, (uint64_t)&v34, (uint64_t)&v30) != 3
    || (v35 & 0x7FFFFFFFFFFFFFFFLL) < (v31 & 0x7FFFFFFFFFFFFFFFuLL))
  {
LABEL_4:
    int v7 = (void *)sub_1CBC5BBB0(v5[1], v6);
    uint64_t v8 = v7[1];
    uint64_t v9 = v7[2];
    uint64_t v10 = v7[3];
    uint64_t v11 = v7[4];
    unsigned __int16 v12 = (void *)sub_1CBC5BBB0(v5[1], v4);
    uint64_t v13 = v12[3];
    BOOL v15 = v8 == v12[1] && v9 == v12[2] && v10 <= v13;
    if (!v15 || v11 + v10 < v12[4] + v13) {
      return 0;
    }
  }
  uint64_t v26 = *(_DWORD **)(a1 + 16);
  uint64_t v27 = *a2;
  char v34 = 0;
  if (sub_1CBC5C228((uint64_t)v26, v27, &v34))
  {
    void *v34 = -8192;
    int v28 = v26[1] + 1;
    *v26 -= 2;
    v26[1] = v28;
  }
  return 1;
}

uint64_t sub_1CBC5C228(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_15:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CBC5C2CC(_DWORD *a1, _DWORD *a2)
{
  int v2 = *a1;
  if ((*a1 & 1) == 0)
  {
    unsigned int v13 = a2;
    unsigned int v14 = a1;
    MEMORY[0x1D25D9CD0](*((void *)a1 + 1), 8);
    a2 = v13;
    a1 = v14;
    int v2 = *v14;
  }
  *a1 = v2 | 1;
  if ((*a2 & 1) != 0 || a2[4] <= 0x20u)
  {
    int v3 = 0;
    *a1 = *a2 | 1;
    a1[1] = a2[1];
    int v4 = a1 + 2;
  }
  else
  {
    *a1 = v2 & 0xFFFFFFFE;
    if (*a2) {
      uint64_t v9 = 32;
    }
    else {
      uint64_t v9 = a2[4];
    }
    int v10 = a1;
    uint64_t v11 = a2;
    *((void *)a1 + 1) = operator new(8 * v9, (std::align_val_t)8uLL);
    int v4 = v10 + 2;
    *((void *)v10 + 2) = v9;
    unsigned int v12 = *v10;
    *int v10 = *v11 & 0xFFFFFFFE | *v10 & 1;
    a2 = v11;
    a1 = v10;
    v10[1] = v11[1];
    if (v12)
    {
      int v3 = 0;
    }
    else
    {
      int v4 = (void *)*v4;
      int v3 = 1;
    }
  }
  char v6 = *(unsigned char *)a2;
  int v5 = a2 + 2;
  if ((v6 & 1) == 0) {
    int v5 = (void *)*v5;
  }
  if (v3) {
    size_t v7 = 8 * a1[4];
  }
  else {
    size_t v7 = 256;
  }

  return memcpy(v4, v5, v7);
}

uint64_t sub_1CBC5C404(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 < v3)
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        uint64_t v9 = a2;
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
        uint64_t v6 = v8;
        a2 = v9;
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      if (v6 != v7) {
        memcpy((void *)(*(void *)a1 + 8 * v6), (const void *)(*(void *)a2 + 8 * v6), *(void *)a2 + 8 * v7 - (*(void *)a2 + 8 * v6));
      }
    }
    else if (v3)
    {
      memmove(*(void **)a1, *(const void **)a2, 8 * v3);
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

void *sub_1CBC5C4EC(void *a1, unsigned int a2)
{
  if (a2 <= 0x20)
  {
    *a1 = 1;
LABEL_3:
    uint64_t result = a1 + 1;
    uint64_t v4 = a1 + 33;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  uint64_t result = operator new(8 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6) {
    goto LABEL_3;
  }
  uint64_t v4 = &result[v5];
  do
LABEL_4:
    *result++ = -4096;
  while (result != v4);
  return result;
}

__n128 sub_1CBC5C570(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  *a2 = *a1 & 0xFFFFFFFE | *a2 & 1;
  unsigned int v3 = a1[1];
  *a1 = v2 & 0xFFFFFFFE | *a1 & 1;
  a1[1] = a2[1];
  a2[1] = v3;
  unsigned int v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = 0;
      int v6 = (int *)(a1 + 2);
      uint64_t v7 = (int *)(a2 + 2);
      do
      {
        uint64_t v8 = *(void *)&v6[v5];
        *(void *)&v6[v5] = *(void *)&v7[v5];
        *(void *)&v7[v5] = v8;
        v5 += 2;
      }
      while (v5 != 64);
      return result;
    }
    int v10 = a2;
  }
  else
  {
    if ((v4 & 1) == 0)
    {
      uint64_t v9 = *((void *)a1 + 1);
      *((void *)a1 + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v9;
      LODWORD(v9) = a1[4];
      a1[4] = a2[4];
      a2[4] = v9;
      return result;
    }
    unsigned int v4 = *a1;
    int v10 = a1;
    a1 = a2;
  }
  __n128 v13 = *(__n128 *)(v10 + 2);
  *int v10 = v4 | 1;
  for (uint64_t i = 2; i != 66; i += 2)
    *(void *)&v10[i] = *(void *)&a1[i];
  *a1 &= ~1u;
  __n128 result = v13;
  *(__n128 *)(a1 + 2) = v13;
  return result;
}

uint64_t sub_1CBC5C65C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    unsigned int v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = (_DWORD *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8 < v6)
      {
        if (*(_DWORD *)(a1 + 12) < v6)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v8) {
          memmove(*(void **)a1, v4, 8 * v8);
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v10 = *v7;
        if (v8 != v10) {
          memcpy((void *)(*(void *)a1 + 8 * v8), (const void *)(*(void *)a2 + 8 * v8), *(void *)a2 + 8 * v10 - (*(void *)a2 + 8 * v8));
        }
      }
      else if (v6)
      {
        memmove(*(void **)a1, v4, 8 * v6);
      }
      *(_DWORD *)(a1 + 8) = v6;
    }
    else
    {
      uint64_t v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v11);
        unsigned int v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *uint64_t v7 = 0;
  }
  return a1;
}

uint64_t sub_1CBC5C778(uint64_t result, int a2)
{
  unint64_t v2 = *(unsigned int *)(result + 8);
  unint64_t v3 = **(void **)result;
  if (!a2)
  {
    if ((v3 & 1) == 0)
    {
      *(void *)(*(void *)v3 + 8 * (v2 >> 6)) &= ~(1 << v2);
      return result;
    }
    unint64_t v4 = ((2 * ~((-1 << (v3 >> 58)) | (1 << v2))) | 0xFC00000000000000) & v3;
    goto LABEL_6;
  }
  if (v3)
  {
    unint64_t v4 = v3 & 0xFC00000000000000 | (2 * (((v3 >> 1) & ~(-1 << (v3 >> 58)) | (1 << v2)) & ~(-1 << (v3 >> 58))));
LABEL_6:
    **(void **)__n128 result = v4 | 1;
    return result;
  }
  *(void *)(*(void *)v3 + ((v2 >> 3) & 0x1FFFFFF8)) |= 1 << v2;
  return result;
}

void sub_1CBC5C83C()
{
}

uint64_t sub_1CBC5C920(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x1000000000;
  uint64_t v7 = (void *)(a1 + 34672);
  *(void *)(a1 + 8592) = a1 + 8608;
  *(void *)(a1 + 8600) = 0x1000000000;
  *(void *)(a1 + 17184) = a1 + 17200;
  *(void *)(a1 + 17192) = 0x1000000000;
  uint64_t v8 = a1 + 8592;
  uint64_t v9 = a1 + 17184;
  uint64_t v10 = a1 + 25776;
  *(void *)(a1 + 25776) = a1 + 25792;
  *(void *)(a1 + 25784) = 0x1000000000;
  *(void *)(a1 + 34368) = a2;
  *(_DWORD *)(a1 + 34376) = a3;
  *(void *)(a1 + 34384) = a4;
  *(void *)(a1 + 34392) = a5;
  *(void *)(a1 + 34400) = a1 + 34416;
  *(void *)(a1 + 34408) = 0x2000000000;
  *(void *)(a1 + 34672) = a1 + 34696;
  unint64_t v11 = ((*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  *(_OWORD *)(a1 + 34680) = xmmword_1CDB15990;
  sub_1CBC5CAB4(a1, v11);
  sub_1CBC5CAB4(v8, ((*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
  sub_1CBC5CAB4(v9, ((*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
  sub_1CBC5CAB4(v10, ((*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
  unint64_t v12 = *(void *)(a2 + 112) - *(void *)(a2 + 104);
  unint64_t v13 = v7[1];
  if (v13 != (v12 >> 3))
  {
    unint64_t v14 = (v12 >> 3);
    if (v13 <= v14)
    {
      if (v7[2] < v14) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v14 != v13) {
        bzero((void *)(*v7 + v13), v14 - v13);
      }
    }
    v7[1] = v14;
  }
  return a1;
}

void sub_1CBC5CAB4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      sub_1CD42FC18(a1, a2);
    }
    else
    {
      unint64_t v5 = *(unsigned int *)(a1 + 12);
      if (v5 >= a2)
      {
        uint64_t v8 = *(unsigned int **)a1;
      }
      else
      {
        if (HIDWORD(a2)) {
          sub_1CD0A88F0(a2);
        }
        if (v5 == -1) {
          sub_1CD0A89A8(0xFFFFFFFFuLL);
        }
        unint64_t v6 = (2 * v5) | 1;
        if (v6 <= a2) {
          unint64_t v6 = a2;
        }
        if (v6 >= 0xFFFFFFFF) {
          uint64_t v7 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v7 = v6;
        }
        uint64_t v8 = (unsigned int *)malloc_type_malloc(536 * v7, 0x4065EBACuLL);
        if (!v8) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        uint64_t v9 = *(unsigned int **)a1;
        unsigned int v10 = *(_DWORD *)(a1 + 8);
        if (v10)
        {
          uint64_t v22 = v8;
          int v24 = v7;
          unint64_t v14 = *(unsigned int **)a1;
          uint64_t v15 = 536 * v10;
          do
          {
            uint64_t v16 = sub_1CD42FCA4((uint64_t)v8, v14);
            v14 += 134;
            uint64_t v8 = (unsigned int *)(v16 + 536);
            v15 -= 536;
          }
          while (v15);
          uint64_t v9 = *(unsigned int **)a1;
          unsigned int v17 = *(_DWORD *)(a1 + 8);
          uint64_t v8 = v22;
          LODWORD(v7) = v24;
          if (v17)
          {
            uint64_t v18 = *(unsigned int **)a1;
            uint64_t v19 = 134 * v17;
            do
            {
              long long v20 = *(unsigned int **)&v18[v19 - 68];
              if (&v18[v19 - 64] != v20) {
                free(v20);
              }
              if ((v18[v19 - 134] & 1) == 0) {
                MEMORY[0x1D25D9CD0](*(void *)&v18[v19 - 132], 8);
              }
              v19 -= 134;
            }
            while (v19 * 4);
            uint64_t v9 = *(unsigned int **)a1;
            uint64_t v8 = v22;
            LODWORD(v7) = v24;
          }
        }
        if (v9 != (unsigned int *)(a1 + 16))
        {
          unint64_t v21 = v8;
          free(v9);
          uint64_t v8 = v21;
        }
        *(void *)a1 = v8;
        *(_DWORD *)(a1 + 12) = v7;
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        unint64_t v11 = &v8[134 * a2];
        unint64_t v12 = &v8[134 * v2];
        int64x2_t v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          bzero(v12 + 2, 0x210uLL);
          *(void *)unint64_t v12 = 1;
          for (uint64_t i = 2; i != 66; i += 4)
            *(int64x2_t *)&v12[i] = v23;
          *((void *)v12 + 33) = v12 + 70;
          *((void *)v12 + 34) = 0x2000000000;
          v12 += 134;
        }
        while (v12 != v11);
      }
      *(_DWORD *)(a1 + 8) = a2;
    }
  }
}

char **sub_1CBC5CCFC(uint64_t a1)
{
  unint64_t v2 = (void **)(a1 + 34400);
  unint64_t v3 = *(void **)(a1 + 34672);
  if (v3 != (void *)(a1 + 34696)) {
    free(v3);
  }
  if (*v2 != (void *)(a1 + 34416)) {
    free(*v2);
  }
  sub_1CBC5CD94((char **)(a1 + 25776));
  sub_1CBC5CD94((char **)(a1 + 17184));
  sub_1CBC5CD94((char **)(a1 + 8592));

  return sub_1CBC5CD94((char **)a1);
}

char **sub_1CBC5CD94(char **a1)
{
  unint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 536 * v3;
    do
    {
      unint64_t v5 = &v2[v4];
      unint64_t v6 = *(char **)&v2[v4 - 272];
      if (&v2[v4 - 256] != v6)
      {
        uint64_t v9 = v4;
        unint64_t v11 = v2;
        uint64_t v8 = &v2[v4];
        free(v6);
        unint64_t v5 = v8;
        uint64_t v4 = v9;
        unint64_t v2 = v11;
      }
      if ((*(v5 - 536) & 1) == 0)
      {
        uint64_t v10 = v4;
        unint64_t v12 = v2;
        MEMORY[0x1D25D9CD0](*(void *)&v2[v4 - 528], 8);
        uint64_t v4 = v10;
        unint64_t v2 = v12;
      }
      v4 -= 536;
    }
    while (v4);
    unint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CBC5CE54(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F25FCB20;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 97), 8);
  unint64_t v2 = (void *)*((void *)a1 + 79);
  if (v2 != (void *)((char *)a1 + 648)) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 76), 8);
  unsigned int v3 = (void *)*((void *)a1 + 66);
  if (v3 != (void *)((char *)a1 + 544)) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)a1 + 52);
  if (v4 != *((void **)a1 + 51)) {
    free(v4);
  }
  unint64_t v5 = (void *)*((void *)a1 + 41);
  if (v5 != (void *)((char *)a1 + 344)) {
    free(v5);
  }
  MEMORY[0x1D25D9CD0](*((void *)a1 + 32), 8);

  sub_1CBA0E6AC(a1);
}

void *sub_1CBC5CF20(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      unsigned int v3 = result + 1;
      uint64_t v4 = result + 33;
      goto LABEL_9;
    }
    uint64_t v2 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v2 || v2 < 0x41)
    {
      if (!v2)
      {
        int v5 = 0;
LABEL_11:
        *(_DWORD *)__n128 result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      unsigned int v3 = (void *)result[1];
      uint64_t v4 = &v3[v2];
      do
LABEL_9:
        *v3++ = -4096;
      while (v3 != v4);
      int v5 = *(_DWORD *)result & 1;
      goto LABEL_11;
    }
    return sub_1CD4302D0(result);
  }
  return result;
}

uint64_t sub_1CBC5CF9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v17 = 0;
  uint64_t result = sub_1CBC5C228(a2, *a3, &v17);
  uint64_t v7 = v17;
  unsigned int v8 = *(_DWORD *)a2;
  if (result)
  {
    if (v8)
    {
      uint64_t v15 = a2 + 8;
      uint64_t v16 = 32;
    }
    else
    {
      uint64_t v15 = *(void *)(a2 + 8);
      uint64_t v16 = *(unsigned int *)(a2 + 16);
    }
    char v14 = 0;
    uint64_t v13 = v15 + 8 * v16;
    goto LABEL_11;
  }
  unsigned int v9 = v8 >> 1;
  if (v8) {
    unsigned int v10 = 32;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a2 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_16;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 4) <= v10 >> 3)
  {
LABEL_16:
    sub_1CD4303A0(a2, v10);
    unsigned int v17 = 0;
    uint64_t result = sub_1CBC5C228(a2, *a3, &v17);
    uint64_t v7 = v17;
  }
  *(_DWORD *)a2 += 2;
  if (*v7 != -4096) {
    --*(_DWORD *)(a2 + 4);
  }
  *uint64_t v7 = *a3;
  uint64_t v11 = a2 + 8;
  if (*(unsigned char *)a2)
  {
    uint64_t v12 = 32;
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v13 = v11 + 8 * v12;
  char v14 = 1;
LABEL_11:
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v13;
  *(unsigned char *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_1CBC5D0DC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(a1 + 40 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t sub_1CBC5D168(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 40 * v6;
    do
    {
      *uint64_t v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CBC5D0DC(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      BOOL v10 = v12;
      *uint64_t v12 = *(void *)a2;
      long long v11 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v10 + 3) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v10 + 1) = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 40;
  }
  return result;
}

uint64_t sub_1CBC5D224(uint64_t a1, _DWORD *a2, void *a3)
{
  BOOL v10 = 0;
  uint64_t result = sub_1CBB23CC4((uint64_t)a2, a3, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CBB23D58(a2, (uint64_t)a3, a3, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a3;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a2 + 8 * a2[4];
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1CBC5D2B4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_14:
      uint64_t result = 1;
    }
    else
    {
      char v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v7 == -8192;
        }
        if (v11) {
          char v8 = v6;
        }
        unsigned int v12 = v5 + v9++;
        unsigned int v5 = v12 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v12 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_14;
        }
      }
      uint64_t result = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

void sub_1CBC5D33C(uint64_t a1, llvm::MachineInstr *this)
{
  v25[4] = *MEMORY[0x1E4F143B8];
  if (!this) {
    return;
  }
  unsigned int v24 = 0;
  uint64_t v3 = *((unsigned int *)this + 10);
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 32 * v3;
    uint64_t v6 = (_DWORD *)(*((void *)this + 4) + 4);
    do
    {
      if (!*((unsigned char *)v6 - 4))
      {
        uint64_t v7 = *(void *)(a1 + 288);
        uint64_t v8 = *v6 & 0x7FFFFFFF;
        int v9 = (void *)(v7 + 408);
        uint64_t v10 = *(unsigned int *)(v7 + 416);
        if ((*v6 & 0x7FFFFFFFu) >= v10)
        {
          sub_1CB9153B8((uint64_t)v9, v8 - v10 + 1, *(void *)(v7 + 424));
LABEL_13:
          operator new();
        }
        uint64_t v11 = *(void *)(*v9 + 8 * v8);
        if (!v11) {
          goto LABEL_13;
        }
        if (v4 >= 4) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v25[v4] = v11;
        unsigned int v4 = ++v24;
      }
      v6 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  unsigned int v12 = *(int32x2_t **)(*(void *)(a1 + 288) + 288);
  int32x2_t v13 = v12[46];
  uint64_t v14 = v12[48].u32[0];
  if (!v14) {
    goto LABEL_20;
  }
  LODWORD(v15) = (v14 - 1) & ((this >> 4) ^ (this >> 9));
  uint64_t v16 = *(void *)&v13 + 16 * v15;
  unsigned int v17 = *(llvm::MachineInstr **)v16;
  if (*(llvm::MachineInstr **)v16 != this)
  {
    int v18 = 1;
    while (v17 != (llvm::MachineInstr *)-4096)
    {
      int v19 = v15 + v18++;
      uint64_t v15 = v19 & (v14 - 1);
      unsigned int v17 = *(llvm::MachineInstr **)(*(void *)&v13 + 16 * v15);
      if (v17 == this)
      {
        uint64_t v16 = *(void *)&v13 + 16 * v15;
        goto LABEL_21;
      }
    }
LABEL_20:
    uint64_t v16 = *(void *)&v13 + 16 * v14;
  }
LABEL_21:
  if (v16 != *(void *)&v13 + 16 * v14)
  {
    unint64_t v20 = *(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v16 = -8192;
    v12[47] = vadd_s32(v12[47], (int32x2_t)0x1FFFFFFFFLL);
    *(void *)(v20 + 16) = 0;
  }
  llvm::MachineInstr::eraseFromParent(this);
  unint64_t v21 = v25;
  if (v24)
  {
    uint64_t v22 = 8 * v24;
    do
    {
      uint64_t v23 = *v21++;
      llvm::LiveIntervals::shrinkToUses(*(void **)(a1 + 288), v23, 0);
      v22 -= 8;
    }
    while (v22);
  }
}

uint64_t sub_1CBC5D668()
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v3 = "Run SCS LU placement pass";
  *((void *)&v3 + 1) = 25;
  v4[0] = v5;
  v5[0] = "off";
  v5[1] = 3;
  int v6 = 0;
  uint64_t v7 = "Do not run SCS LU";
  uint64_t v8 = 17;
  int v9 = "cliqueA";
  uint64_t v10 = 7;
  int v11 = 1;
  unsigned int v12 = "Run SCS LU for cliqueA";
  uint64_t v13 = 22;
  uint64_t v14 = "cliqueST";
  uint64_t v15 = 8;
  unsigned int v17 = "Run SCS LU for cliqueST";
  uint64_t v18 = 23;
  int v19 = "both";
  uint64_t v20 = 4;
  int v16 = 2;
  int v21 = 3;
  uint64_t v22 = "Run SCS LU for both cliqueA and cliqueST";
  uint64_t v23 = 40;
  v4[1] = (void *)0x400000004;
  int v1 = 3;
  uint64_t v2 = &v1;
  sub_1CD42FE20(&v3, (uint64_t)v4, &v2);
  if (v4[0] != v5) {
    free(v4[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1CD42DAC8, qword_1EBCC2478, &dword_1CB82C000);
}

void sub_1CBC5D7C8()
{
}

void sub_1CBC5D860()
{
}

void sub_1CBC5D904(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    unsigned int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  long long v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBC5D9B8(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  long long v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBC5DA64()
{
  return "AGX3 Write Uniform Folding Pass";
}

void sub_1CBC5DA74(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBC5DAE8(uint64_t a1, void *a2)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2[5];
  uint64_t v132 = v2;
  if ((*(_WORD *)(*a2 + 18) & 0x3FF0) != 0x640)
  {
    uint64_t v67 = (void *)a2[41];
    uint64_t v131 = a2 + 40;
    if (v67 == a2 + 40) {
      goto LABEL_280;
    }
    char v66 = 0;
LABEL_154:
    BOOL v68 = (llvm::MachineInstr *)(v67 + 6);
    BOOL v69 = (llvm::MachineInstr *)v67[7];
    int v136 = (llvm::MachineInstr *)(v67 + 6);
    if (v69 == (llvm::MachineInstr *)(v67 + 6)) {
      goto LABEL_278;
    }
LABEL_155:
    if (!v69 || (uint64_t v70 = v69, (*(unsigned char *)v69 & 4) == 0))
    {
      uint64_t v70 = v69;
      if ((*((_WORD *)v69 + 22) & 8) != 0)
      {
        uint64_t v70 = v69;
        do
          uint64_t v70 = (llvm::MachineInstr *)*((void *)v70 + 1);
        while ((*((_WORD *)v70 + 22) & 8) != 0);
      }
    }
    uint64_t v71 = (llvm::MachineInstr *)*((void *)v70 + 1);
    int v72 = **((unsigned __int16 **)v69 + 2);
    if (v72 != 19)
    {
      unsigned int v76 = 0;
LABEL_170:
      if ((v72 & 0xFFFFFFFB) == 0x228)
      {
        unsigned int v78 = sub_1CBDA6464(v72, 0x11u);
        char v79 = 0;
        uint64_t v80 = *((void *)v69 + 4);
        uint64_t v81 = v80 + 32 * v78;
        if (*(unsigned char *)v81 != 7) {
          goto LABEL_184;
        }
        char v82 = (int *)(v81 + 16);
        if (*(_DWORD *)(v81 + 16) != 64) {
          goto LABEL_184;
        }
        unsigned int v83 = v76 ? v76 : v69;
        uint64_t v84 = *(unsigned int *)(*((void *)v83 + 4) + 4);
        if ((v84 & 0x80000000) != 0)
        {
          uint64_t v86 = *(void *)(*(void *)(v2 + 24) + 16 * (v84 & 0x7FFFFFFF));
          unsigned int v85 = (v86 & 4) != 0 ? 0 : (__int16 ***)(v86 & 0xFFFFFFFFFFFFFFF8);
        }
        else
        {
          unsigned int v85 = 0;
        }
        if (v85 == (__int16 ***)&off_1E66AF970 || v85 == &off_1E66AF580)
        {
          if ((v84 & 0x80000000) != 0) {
            unint64_t v87 = (uint64_t *)(*(void *)(v2 + 24) + 16 * (v84 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v87 = (uint64_t *)(*(void *)(v2 + 272) + 8 * v84);
          }
          uint64_t v88 = *v87;
          if (!*v87)
          {
LABEL_192:
            char v79 = 1;
            BOOL v68 = v136;
            goto LABEL_184;
          }
          while ((*(unsigned char *)(v88 + 3) & 1) != 0)
          {
            uint64_t v88 = *(void *)(v88 + 24);
            if (!v88) {
              goto LABEL_192;
            }
          }
          int v134 = v67;
          uint64_t v89 = v80 + 32 * v78;
          unsigned int v90 = (int *)(v89 + 24);
          uint64_t v91 = (unsigned int *)(v89 + 4);
          char v133 = 1;
          while (1)
          {
            uint64_t v92 = v88;
            do
            {
              uint64_t v88 = *(void *)(v88 + 24);
              if (!v88)
              {
                if (!sub_1CBAD858C(v92)) {
                  goto LABEL_255;
                }
                goto LABEL_200;
              }
            }
            while ((*(unsigned char *)(v88 + 3) & 1) != 0);
            if ((sub_1CBAD858C(v92) & 1) == 0)
            {
              char v133 = 0;
              continue;
            }
LABEL_200:
            if (!v76
              || ((int v93 = (*(_DWORD *)(*((void *)v76 + 4) + 32) >> 8) & 0xFFF,
                   !*(_DWORD *)(*((void *)v76 + 4) + 32))
                ? (BOOL v94 = v93 == 0)
                : (BOOL v94 = 1),
                  v94))
            {
              int v95 = *v82;
              int v96 = *v90;
              int v97 = *v91;
              int v98 = *(_DWORD *)v81 & 0xFFF00;
              if (!*(_DWORD *)v81) {
                int v98 = 0;
              }
              int v99 = *(_DWORD *)v92;
              if (!*(_DWORD *)v92)
              {
                uint64_t v100 = *(void *)(v92 + 16);
                if (v100)
                {
                  uint64_t v101 = *(void *)(v92 + 8);
                  if (v101)
                  {
                    uint64_t v102 = *(void *)(v101 + 24);
                    if (v102)
                    {
                      uint64_t v103 = *(void *)(v102 + 32);
                      if (v103)
                      {
                        uint64_t v104 = *(void *)(v103 + 40);
                        uint64_t v105 = *(unsigned int *)(v92 + 4);
                        if ((v105 & 0x80000000) != 0) {
                          uint64_t v106 = (uint64_t *)(*(void *)(v104 + 24) + 16 * (v105 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          uint64_t v106 = (uint64_t *)(*(void *)(v104 + 272) + 8 * v105);
                        }
                        uint64_t v107 = *v106;
                        uint64_t v108 = *(void *)(v92 + 24);
                        if (*v106 != v92) {
                          uint64_t v106 = (uint64_t *)(v100 + 24);
                        }
                        uint64_t *v106 = v108;
                        if (v108) {
                          uint64_t v109 = v108;
                        }
                        else {
                          uint64_t v109 = v107;
                        }
                        *(void *)(v109 + 16) = v100;
                        *(void *)(v92 + 16) = 0;
                        *(void *)(v92 + 24) = 0;
                        int v99 = *(_DWORD *)v92;
                      }
                    }
                  }
                }
              }
              *(_DWORD *)(v92 + 16) = v95;
              *(_DWORD *)(v92 + 4) = v97;
            }
            else
            {
              int v110 = *v82;
              int v111 = *v90;
              if (v93 == 2) {
                uint64_t v112 = *v91 + 1;
              }
              else {
                uint64_t v112 = *v91;
              }
              int v99 = *(_DWORD *)v92;
              if (!*(_DWORD *)v92)
              {
                uint64_t v113 = *(void *)(v92 + 16);
                if (v113)
                {
                  uint64_t v114 = *(void *)(v92 + 8);
                  if (v114)
                  {
                    uint64_t v115 = *(void *)(v114 + 24);
                    if (v115)
                    {
                      uint64_t v116 = *(void *)(v115 + 32);
                      if (v116)
                      {
                        uint64_t v117 = *(void *)(v116 + 40);
                        uint64_t v118 = *(unsigned int *)(v92 + 4);
                        if ((v118 & 0x80000000) != 0) {
                          unsigned int v119 = (uint64_t *)(*(void *)(v117 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
                        }
                        else {
                          unsigned int v119 = (uint64_t *)(*(void *)(v117 + 272) + 8 * v118);
                        }
                        uint64_t v120 = *v119;
                        uint64_t v121 = *(void *)(v92 + 24);
                        if (*v119 != v92) {
                          unsigned int v119 = (uint64_t *)(v113 + 24);
                        }
                        *unsigned int v119 = v121;
                        if (v121) {
                          uint64_t v122 = v121;
                        }
                        else {
                          uint64_t v122 = v120;
                        }
                        *(void *)(v122 + 16) = v113;
                        *(void *)(v92 + 16) = 0;
                        *(void *)(v92 + 24) = 0;
                        int v99 = *(_DWORD *)v92;
                      }
                    }
                  }
                }
              }
              *(_DWORD *)(v92 + 16) = v110;
              *(_DWORD *)(v92 + 4) = v112;
              int v96 = v111 + HIDWORD(v112);
              int v98 = 256;
            }
            *(_DWORD *)(v92 + 24) = v96;
            *(_DWORD *)uint64_t v92 = v99 & 0xFFF00000 | v98 | 7;
            if (!v88)
            {
              if (v133)
              {
                uint64_t v2 = v132;
                uint64_t v67 = v134;
                BOOL v68 = v136;
                if (!v76) {
                  goto LABEL_267;
                }
                uint64_t v123 = *(unsigned int *)(*((void *)v69 + 4) + 4);
                if ((v123 & 0x80000000) != 0) {
                  int v124 = (uint64_t *)(*(void *)(v132 + 24) + 16 * (v123 & 0x7FFFFFFF) + 8);
                }
                else {
                  int v124 = (uint64_t *)(*(void *)(v132 + 272) + 8 * v123);
                }
                uint64_t v125 = *v124;
                if (!v125) {
                  goto LABEL_253;
                }
                while ((*(unsigned char *)(v125 + 3) & 1) != 0)
                {
                  uint64_t v125 = *(void *)(v125 + 24);
                  if (!v125) {
                    goto LABEL_253;
                  }
                }
                while (1)
                {
                  uint64_t v125 = *(void *)(v125 + 24);
                  if (!v125) {
                    break;
                  }
                  if ((*(unsigned char *)(v125 + 3) & 1) == 0) {
                    goto LABEL_253;
                  }
                }
LABEL_267:
                llvm::MachineInstr::eraseFromParent(v69);
                if (v76) {
LABEL_253:
                }
                  llvm::MachineInstr::eraseFromParent(v76);
                char v79 = 1;
              }
              else
              {
LABEL_255:
                char v79 = 1;
                uint64_t v2 = v132;
                uint64_t v67 = v134;
                BOOL v68 = v136;
              }
LABEL_184:
              v66 |= v79;
              BOOL v69 = v71;
              if (v71 == v68)
              {
LABEL_278:
                uint64_t v67 = (void *)v67[1];
                if (v67 == v131) {
                  return v66 & 1;
                }
                goto LABEL_154;
              }
              goto LABEL_155;
            }
          }
        }
      }
LABEL_183:
      char v79 = 0;
      goto LABEL_184;
    }
    uint64_t v73 = *((void *)v69 + 4);
    if (*(unsigned char *)(v73 + 32)) {
      goto LABEL_183;
    }
    uint64_t v74 = *(unsigned int *)(v73 + 36);
    if ((v74 & 0x80000000) != 0) {
      int v75 = (uint64_t *)(*(void *)(v2 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
    }
    else {
      int v75 = (uint64_t *)(*(void *)(v2 + 272) + 8 * v74);
    }
    uint64_t v77 = *v75;
    if (!v77)
    {
LABEL_167:
      unsigned int v76 = v69;
      if (v77) {
        BOOL v69 = (llvm::MachineInstr *)v77;
      }
      int v72 = **((unsigned __int16 **)v69 + 2);
      goto LABEL_170;
    }
    if ((*(unsigned char *)(v77 + 3) & 1) == 0)
    {
      uint64_t v77 = *(void *)(v77 + 24);
      if (!v77) {
        goto LABEL_167;
      }
      if ((*(unsigned char *)(v77 + 3) & 1) == 0)
      {
        uint64_t v77 = 0;
        goto LABEL_167;
      }
    }
    if ((v74 & 0x80000000) != 0) {
      uint64_t v126 = (uint64_t *)(*(void *)(v2 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v126 = (uint64_t *)(*(void *)(v2 + 272) + 8 * v74);
    }
    uint64_t v127 = *v126;
    if (v127 && (*(unsigned char *)(v127 + 3) & 1) == 0)
    {
      uint64_t v127 = *(void *)(v127 + 24);
      if (v127 && (*(unsigned char *)(v127 + 3) & 1) == 0) {
        uint64_t v127 = 0;
      }
      uint64_t v2 = v132;
      BOOL v68 = v136;
    }
    uint64_t v128 = *(void *)(v127 + 8);
    while (1)
    {
      uint64_t v127 = *(void *)(v127 + 24);
      if (!v127 || (*(unsigned char *)(v127 + 3) & 1) == 0) {
        break;
      }
      uint64_t v77 = 0;
      if (*(void *)(v127 + 8) != v128) {
        goto LABEL_167;
      }
    }
    uint64_t v77 = v128;
    goto LABEL_167;
  }
  unint64_t v139 = v141;
  uint64_t v140 = 0x800000000;
  long long v3 = a2 + 40;
  unsigned int v4 = (void *)a2[41];
  if (v4 == a2 + 40)
  {
LABEL_280:
    char v66 = 0;
    return v66 & 1;
  }
  unsigned int v130 = a2 + 40;
  do
  {
    uint64_t v5 = v4 + 6;
    unint64_t v6 = v4[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v6 || (*(unsigned char *)v6 & 4) == 0)
    {
      while ((*(_WORD *)(v6 + 44) & 4) != 0)
        unint64_t v6 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_9:
    while ((void *)v6 != v5)
    {
      unint64_t v7 = v6;
      unint64_t v6 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
      if (!v6 || (*(unsigned char *)v6 & 4) == 0)
      {
        while ((*(_WORD *)(v6 + 44) & 4) != 0)
          unint64_t v6 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
      }
      int v8 = **(unsigned __int16 **)(v7 + 16);
      if ((v8 - 560) >= 0xFFFFFFFE)
      {
        int v9 = *(const llvm::MachineOperand **)(v7 + 32);
        if (*(_DWORD *)v9 == 7
          && *((_DWORD *)v9 + 4) == 64
          && (v8 != 559 || (*(_DWORD *)v9 & 0x200) == 0))
        {
          uint64_t v11 = *((unsigned int *)v9 + 8 * sub_1CBDA6464(v8, 0x11u) + 1);
          unsigned int v12 = (uint64_t *)((v11 & 0x80000000) != 0
                          ? *(void *)(v2 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8
                          : *(void *)(v2 + 272) + 8 * v11);
          uint64_t v13 = *v12;
          if (v13)
          {
            while ((*(unsigned char *)(v13 + 3) & 1) != 0)
            {
              uint64_t v13 = *(void *)(v13 + 24);
              if (!v13) {
                goto LABEL_9;
              }
            }
            while (1)
            {
              uint64_t v13 = *(void *)(v13 + 24);
              if (!v13) {
                break;
              }
              if ((*(unsigned char *)(v13 + 3) & 1) == 0) {
                goto LABEL_9;
              }
            }
            uint64_t v14 = (uint64_t *)((v11 & 0x80000000) != 0
                            ? *(void *)(v2 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8
                            : *(void *)(v2 + 272) + 8 * v11);
            uint64_t v15 = *v14;
            if (v15
              && ((*(unsigned char *)(v15 + 3) & 1) != 0 || (uint64_t v15 = *(void *)(v15 + 24)) != 0 && (*(unsigned char *)(v15 + 3) & 1) != 0))
            {
              uint64_t v16 = *(void *)(v15 + 8);
            }
            else
            {
              uint64_t v16 = 0;
            }
            unsigned int v17 = *(unsigned __int16 **)(v16 + 16);
            int v18 = *v17;
            BOOL v19 = (v18 - 9) > 0x3C || ((1 << (v18 - 9)) & 0x1000000000000605) == 0;
            BOOL v20 = !v19 || v18 == 0;
            if (!v20 && (v17[4] & 0x10) == 0)
            {
              int v135 = v4;
              int v21 = v3;
              uint64_t v22 = *(void *)(*(void *)(*(void *)(v16 + 24) + 32) + 16);
              int v142 = (void (**)(void **))&unk_1F25FDCB8;
              *(void *)&long long v143 = v22;
              *(void *)&long long v144 = &v142;
              unsigned int v23 = sub_1CBD854F8((uint64_t)&v142);
              if ((void (***)(void **))v144 == &v142)
              {
                v142[4]((void **)&v142);
              }
              else if ((void)v144)
              {
                (*(void (**)(void))(*(void *)v144 + 40))();
              }
              BOOL v24 = sub_1CBE530B4(v18, v23);
              long long v3 = v21;
              unsigned int v4 = v135;
              if (v24 && !sub_1CBC2F844(v16))
              {
                unsigned int v25 = sub_1CBE52EB8(**(unsigned __int16 **)(v16 + 16), 0, 3);
                uint64_t v26 = *(void *)(v7 + 24);
                long long v145 = 0u;
                long long v146 = 0u;
                long long v143 = 0u;
                long long v144 = 0u;
                uint64_t v27 = *(void *)(v26 + 32);
                int v142 = (void (**)(void **))&unk_1F261CD58;
                *(void *)&long long v143 = v27;
                *(void *)&long long v144 = *(void *)(v27 + 40);
                *((void *)&v143 + 1) = (*(uint64_t (**)(void))(**(void **)(v27 + 16) + 104))(*(void *)(v27 + 16));
                uint64_t v138 = 0;
                if (!*((void *)&v144 + 1)) {
                  goto LABEL_50;
                }
                int v44 = **((unsigned char **)&v144 + 1);
                if ((v44 - 4) > 0x1E)
                {
                  if ((v44 - 3) >= 0xFFFFFFFE) {
                    uint64_t v57 = *((void *)&v144 + 1);
                  }
                  else {
                    uint64_t v57 = 0;
                  }
                  if ((v44 - 3) <= 0xFFFFFFFD)
                  {
                    if (v44 == 3) {
                      *(void *)(*((void *)&v144 + 1) + 8) = 0;
                    }
LABEL_50:
                    int v28 = 0;
                    *((void *)&v144 + 1) = 0;
                    goto LABEL_51;
                  }
                  unint64_t v46 = v57 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(*((void *)&v144 + 1) + 1) & 0x7F) != 2
                    && !*(_DWORD *)(*((void *)&v144 + 1) + 12))
                  {
                    goto LABEL_50;
                  }
                  uint64_t v45 = *(void *)(*((void *)&v144 + 1) + 16);
                  if ((v45 & 4) == 0) {
                    goto LABEL_50;
                  }
                  unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
                  if (!v46) {
                    goto LABEL_50;
                  }
                }
                v137[0] = (char *)&v144 + 8;
                sub_1CC5FA668(v46 + 16, v137);
                int v28 = v138;
                *((void *)&v144 + 1) = v138;
                if (v138)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v138, v138, (uint64_t)&v144 + 8);
                  int v28 = (unsigned __int8 *)*((void *)&v144 + 1);
                }
LABEL_51:
                *((void *)&v145 + 1) = v7;
                *(void *)&long long v146 = 0;
                *(void *)&long long v145 = *(void *)(v7 + 24);
                *((void *)&v145 + 1) = v7;
                if ((long long *)(v7 + 56) == (long long *)((char *)&v144 + 8)) {
                  goto LABEL_87;
                }
                if (v28)
                {
                  int v54 = *v28;
                  if ((v54 - 4) > 0x1E)
                  {
                    if ((v54 - 3) >= 0xFFFFFFFE) {
                      uint64_t v58 = v28;
                    }
                    else {
                      uint64_t v58 = 0;
                    }
                    if ((v54 - 3) < 0xFFFFFFFE)
                    {
                      if (v54 == 3) {
                        *((void *)v28 + 1) = 0;
                      }
                      goto LABEL_53;
                    }
                    unint64_t v56 = (unint64_t)(v58 + 8);
                  }
                  else
                  {
                    if ((v28[1] & 0x7F) != 2 && !*((_DWORD *)v28 + 3)) {
                      goto LABEL_53;
                    }
                    uint64_t v55 = *((void *)v28 + 2);
                    if ((v55 & 4) == 0) {
                      goto LABEL_53;
                    }
                    unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8;
                    if (!v56) {
                      goto LABEL_53;
                    }
                  }
                  v137[0] = (char *)&v144 + 8;
                  sub_1CC5FA668(v56 + 16, v137);
                }
LABEL_53:
                *((void *)&v144 + 1) = *(void *)(v7 + 56);
                if (!*((void *)&v144 + 1))
                {
                  unint64_t v29 = (llvm::MachineFunction *)v143;
                  uint64_t v30 = *(void *)(*((void *)&v143 + 1) + 8) + 48 * v25;
                  uint64_t v138 = 0;
                  goto LABEL_55;
                }
                llvm::MetadataTracking::track((uint64_t)&v144 + 8, *((unsigned __int8 **)&v144 + 1), 2);
                int v28 = (unsigned __int8 *)*((void *)&v144 + 1);
LABEL_87:
                unint64_t v29 = (llvm::MachineFunction *)v143;
                uint64_t v30 = *(void *)(*((void *)&v143 + 1) + 8) + 48 * v25;
                uint64_t v138 = v28;
                if (v28) {
                  llvm::MetadataTracking::track((uint64_t)&v138, v28, 2);
                }
LABEL_55:
                uint64_t v31 = llvm::MachineFunction::CreateMachineInstr(v29, v30, &v138, 0);
                if (v138)
                {
                  int v59 = *v138;
                  if ((v59 - 4) > 0x1E)
                  {
                    if ((v59 - 3) >= 0xFFFFFFFE) {
                      int v62 = v138;
                    }
                    else {
                      int v62 = 0;
                    }
                    if ((v59 - 3) < 0xFFFFFFFE)
                    {
                      unsigned int v4 = v135;
                      if (v59 == 3) {
                        *((void *)v138 + 1) = 0;
                      }
                      goto LABEL_56;
                    }
                    unint64_t v61 = (unint64_t)(v62 + 8);
                  }
                  else
                  {
                    unsigned int v4 = v135;
                    if ((v138[1] & 0x7F) != 2 && !*((_DWORD *)v138 + 3)) {
                      goto LABEL_56;
                    }
                    uint64_t v60 = *((void *)v138 + 2);
                    if ((v60 & 4) == 0) {
                      goto LABEL_56;
                    }
                    unint64_t v61 = v60 & 0xFFFFFFFFFFFFFFF8;
                    if (!v61) {
                      goto LABEL_56;
                    }
                  }
                  v137[0] = &v138;
                  sub_1CC5FA668(v61 + 16, v137);
                  unsigned int v4 = v135;
                }
LABEL_56:
                long long v32 = (unint64_t *)*((void *)&v145 + 1);
                uint64_t v33 = *(void *)(v145 + 40);
                *((void *)v31 + 3) = v33;
                uint64_t v34 = *(void *)(v33 + 32);
                uint64_t v35 = *((unsigned int *)v31 + 10);
                if (v35)
                {
                  uint64_t v47 = *((void *)v31 + 4);
                  uint64_t v48 = *(void *)(v34 + 40);
                  uint64_t v49 = 32 * v35;
                  do
                  {
                    if (!*(unsigned char *)v47)
                    {
                      uint64_t v50 = *(unsigned int *)(v47 + 4);
                      if ((int)v50 >= 0) {
                        uint64_t v51 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v50);
                      }
                      else {
                        uint64_t v51 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v52 = *v51;
                      if (*v51)
                      {
                        uint64_t v53 = *(void *)(v52 + 16);
                        *(void *)(v52 + 16) = v47;
                        *(void *)(v47 + 16) = v53;
                        if (*(unsigned char *)(v47 + 3))
                        {
                          *(void *)(v47 + 24) = v52;
                        }
                        else
                        {
                          *(void *)(v47 + 24) = 0;
                          uint64_t v51 = (uint64_t *)(v53 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v47 + 16) = v47;
                        *(void *)(v47 + 24) = 0;
                      }
                      uint64_t *v51 = v47;
                    }
                    v47 += 32;
                    v49 -= 32;
                  }
                  while (v49);
                }
                uint64_t v36 = *(void *)(v34 + 728);
                if (v36) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v36 + 24))(v36, v31);
                }
                unint64_t v37 = *v32 & 0xFFFFFFFFFFFFFFF8;
                *(void *)uint64_t v31 = v37 | *(void *)v31 & 7;
                *((void *)v31 + 1) = v32;
                *(void *)(v37 + 8) = v31;
                *long long v32 = *v32 & 7 | (unint64_t)v31;
                if ((void)v146) {
                  (*(void (**)(void, llvm::MachineInstr *))(*(void *)v146 + 24))(v146, v31);
                }
                llvm::MachineInstr::addOperand(v31, v29, v9);
                LODWORD(v137[0]) = 1;
                v137[1] = 0;
                v137[2] = 0;
                llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)v137);
                if (*(_DWORD *)(v16 + 40) >= 2u)
                {
                  uint64_t v38 = 32;
                  unint64_t v39 = 1;
                  do
                  {
                    llvm::MachineInstr::addOperand(v31, v29, (const llvm::MachineOperand *)(*(void *)(v16 + 32) + v38));
                    ++v39;
                    v38 += 32;
                  }
                  while (v39 < *(unsigned int *)(v16 + 40));
                }
                llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v7);
                if (v140 >= (unint64_t)HIDWORD(v140)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v2 = v132;
                long long v3 = v130;
                *((void *)v139 + v140) = v16;
                LODWORD(v140) = v140 + 1;
                int v142 = (void (**)(void **))&unk_1F261CD58;
                if (*((void *)&v144 + 1))
                {
                  int v40 = **((unsigned char **)&v144 + 1);
                  if ((v40 - 4) > 0x1E)
                  {
                    if ((v40 - 3) >= 0xFFFFFFFE) {
                      uint64_t v43 = *((void *)&v144 + 1);
                    }
                    else {
                      uint64_t v43 = 0;
                    }
                    if ((v40 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v42 = v43 + 8;
                      goto LABEL_77;
                    }
                    if (v40 == 3) {
                      *(void *)(*((void *)&v144 + 1) + 8) = 0;
                    }
                  }
                  else if ((*(unsigned char *)(*((void *)&v144 + 1) + 1) & 0x7F) == 2 {
                         || *(_DWORD *)(*((void *)&v144 + 1) + 12))
                  }
                  {
                    uint64_t v41 = *(void *)(*((void *)&v144 + 1) + 16);
                    if ((v41 & 4) != 0)
                    {
                      unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFF8;
                      if (v42)
                      {
LABEL_77:
                        v137[0] = (char *)&v144 + 8;
                        sub_1CC5FA668(v42 + 16, v137);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    unsigned int v4 = (void *)v4[1];
  }
  while (v4 != v3);
  int8x8_t v63 = (llvm::MachineInstr **)v139;
  if (v140)
  {
    uint64_t v64 = 8 * v140;
    do
    {
      uint64_t v65 = *v63++;
      llvm::MachineInstr::eraseFromParent(v65);
      v64 -= 8;
    }
    while (v64);
    int8x8_t v63 = (llvm::MachineInstr **)v139;
    char v66 = v140 != 0;
  }
  else
  {
    char v66 = 0;
  }
  if (v63 != (llvm::MachineInstr **)v141) {
    free(v63);
  }
  return v66 & 1;
}

uint64_t sub_1CBC5E89C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC2790;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25FCDE0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC2798, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBC5E998;
    v5[1] = &PassRegistry;
    unsigned int v4 = v5;
    std::__call_once(&qword_1EBCC2798, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBC5E998(uint64_t a1)
{
}

void sub_1CBC5EA38(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    unsigned int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  long long v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    unint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBC5EAEC(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  long long v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBC5EB98()
{
  return "AGX3 starvation free execution pass";
}

void sub_1CBC5EBA8(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  *(unsigned char *)(a2 + 160) = 1;

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBC5EC38(void *a1, const llvm::Module *a2)
{
  v41[4] = *MEMORY[0x1E4F143B8];
  BOOL v24 = (void *)((char *)a2 + 320);
  if (*((const llvm::Module **)a2 + 40) == (const llvm::Module *)((char *)a2 + 320)) {
    return 0;
  }
  if (!byte_1EBCC2750)
  {
    uint64_t ForwardProgressMode = llvm::AGXIR::getForwardProgressMode(*(llvm::AGXIR **)(*(void *)a2 + 40), a2);
    if ((ForwardProgressMode & 0xFF00000000) == 0 || ForwardProgressMode == 0) {
      return 0;
    }
  }
  unint64_t v6 = (uint64_t *)a1[1];
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_12:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v7 != &llvm::MachineDominatorTree::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_12;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  a1[32] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::MachineDominatorTree::ID);
  uint64_t v23 = (uint64_t)a1;
  a1[31] = *((void *)a2 + 40);
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v33 = v35;
  uint64_t v34 = 0x800000000;
  uint64_t v36 = v38;
  uint64_t v37 = 0x400000000;
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v26 = v28;
  uint64_t v27 = 0x800000000;
  unint64_t v29 = v31;
  uint64_t v30 = 0x400000000;
  uint64_t v10 = (void *)*((void *)a2 + 41);
  if (v10 == v24) {
    goto LABEL_60;
  }
  do
  {
    for (uint64_t i = v10[7]; (void *)i != v10 + 6; uint64_t i = *(void *)(i + 8))
    {
      unsigned int v12 = *(unsigned __int16 **)(i + 16);
      int v13 = *v12;
      uint64_t v14 = sub_1CBE52E8C(v13);
      if ((v14 & 0xFF00000000) == 0) {
        goto LABEL_45;
      }
      uint64_t v15 = (v14 - 61);
      if (v15 > 0x3F) {
        goto LABEL_25;
      }
      if (((1 << (v14 - 61)) & 0xF) == 0)
      {
        if (((1 << (v14 - 61)) & 0x200180000000) != 0)
        {
          char v16 = 1;
          goto LABEL_40;
        }
        if (v15 == 63)
        {
          if (v30 >= (unint64_t)HIDWORD(v30)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v29 + v30) = i;
          unsigned int v17 = &v30;
          goto LABEL_44;
        }
LABEL_25:
        if (v14 == 3)
        {
          if (v37 >= (unint64_t)HIDWORD(v37)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v36 + v37) = i;
          unsigned int v17 = &v37;
          goto LABEL_44;
        }
        if (v14 == 190)
        {
          unsigned int v18 = ((*(void *)(*(void *)(i + 32) + 32 * sub_1CBDA6464(v13, 0x2Eu) + 16) >> 42) & 7) - 1;
          if (v18 >= 5 || ((0x1Bu >> v18) & 1) == 0) {
            goto LABEL_45;
          }
        }
        else
        {
          __int16 v19 = *(_WORD *)(i + 44);
          uint64_t v20 = *((void *)v12 + 1);
          if ((v19 & 0xC) == 0 || (v19 & 4) != 0)
          {
            if ((v20 & 0x80) == 0) {
              goto LABEL_45;
            }
          }
          else
          {
            uint64_t v21 = i;
            if ((v20 & 0x80) == 0)
            {
              while ((*(_WORD *)(v21 + 44) & 8) != 0)
              {
                char v16 = 0;
                uint64_t v21 = *(void *)(v21 + 8);
                if ((*(unsigned char *)(*(void *)(v21 + 16) + 8) & 0x80) != 0) {
                  goto LABEL_40;
                }
              }
              goto LABEL_45;
            }
          }
        }
      }
      char v16 = 0;
LABEL_40:
      if (v27 >= (unint64_t)HIDWORD(v27)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v26 + v27) = i;
      LODWORD(v27) = v27 + 1;
      if ((v16 & 1) == 0)
      {
        if (v34 >= (unint64_t)HIDWORD(v34)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v33 + v34) = i;
        unsigned int v17 = &v34;
LABEL_44:
        ++*(_DWORD *)v17;
      }
LABEL_45:
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    uint64_t v10 = (void *)v10[1];
  }
  while (v10 != v24);
  if (v34)
  {
    sub_1CBC5FF0C(v23, v32);
    if (v37)
    {
      llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(v23 + 256));
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
    }
    sub_1CBC5FFFC(v23);
  }
LABEL_60:
  if (v27 && v30)
  {
    sub_1CBC5FF0C(v23, v25);
    unint64_t v39 = v41;
    uint64_t v40 = 0x400000000;
    if (v30)
    {
      sub_1CBDA6464(6504, 0x2Fu);
      sub_1CBDA6464(6504, 0x70u);
      llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(v23 + 256));
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
    }
    if (v39 != v41) {
      free(v39);
    }
  }
  if (v29 != v31) {
    free(v29);
  }
  if (v26 != v28) {
    free(v26);
  }
  if (v36 != v38) {
    free(v36);
  }
  if (v33 != v35) {
    free(v33);
  }
  return 0;
}

uint64_t sub_1CBC5FF0C(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 6);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = a2[2];
    uint64_t v6 = *a2;
    uint64_t v7 = 8 * v2;
    do
    {
      if (v6)
      {
        llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(result + 256));
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator();
      }
      uint64_t v6 = *(void *)(*(void *)v5 + 24);
      *a2 = v6;
      v5 += 8;
      v7 -= 8;
    }
    while (v7);
    uint64_t v8 = *((unsigned int *)a2 + 6);
    if (v8)
    {
      uint64_t v9 = (uint64_t *)a2[2];
      uint64_t v10 = 8 * v8;
      do
      {
        uint64_t v11 = *v9;
        if (*(void *)(*v9 + 24) == *a2)
        {
          uint64_t v12 = a2[1];
          if (v12)
          {
            uint64_t result = sub_1CD430B68(*(void ****)(v4 + 256), v12, *v9);
            if (result) {
              uint64_t v11 = a2[1];
            }
          }
          a2[1] = v11;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  return result;
}

void sub_1CBC5FFFC(uint64_t a1)
{
}

void sub_1CBC600A4()
{
}

uint64_t sub_1CBC600E0()
{
  v4.n128_u64[0] = (unint64_t)"Force the forward progress mode to SIMDGroupParallel";
  v4.n128_u64[1] = 52;
  char v2 = 0;
  long long v3 = &v2;
  int v1 = 1;
  sub_1CD4209D8((llvm::cl::Option *)&unk_1EBCC26D0, "force-simdgroup-parallel-forward-progress", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC26D0, &dword_1CB82C000);
}

void sub_1CBC60170()
{
}

uint64_t sub_1CBC60184()
{
  return 0;
}

void sub_1CBC60198()
{
}

uint64_t sub_1CBC601AC()
{
  return 13;
}

char **sub_1CBC601B4(uint64_t a1, int a2)
{
  if (a2 >= 128) {
    return &(&off_1E66AFA40)[3 * (a2 - 128)];
  }
  else {
    return &(&off_1E684AC10)[3 * a2];
  }
}

uint64_t sub_1CBC601DC()
{
  return 0;
}

uint64_t sub_1CBC601E4()
{
  return 0;
}

uint64_t sub_1CBC601EC()
{
  return 0;
}

_DWORD *sub_1CBC601F4(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7 = a7;
  int v10 = *(_DWORD *)(a3 + 12);
  uint64_t v11 = 1;
  switch(v10)
  {
    case 1:
    case 6:
    case 10:
    case 18:
      goto LABEL_7;
    case 2:
    case 7:
    case 11:
    case 19:
      uint64_t v11 = 2;
      if (!a7) {
        return result;
      }
      goto LABEL_8;
    case 3:
    case 8:
    case 12:
    case 20:
      uint64_t v11 = 4;
      goto LABEL_7;
    case 4:
    case 9:
    case 13:
    case 21:
      uint64_t v11 = 8;
      if (!a7) {
        return result;
      }
      goto LABEL_8;
    case 5:
    case 14:
    case 15:
    case 16:
    case 17:
      goto LABEL_5;
    default:
      if ((v10 - 129) >= 0xC) {
LABEL_5:
      }
        llvm::report_fatal_error((llvm *)"Unknown relocation!", (const llvm::Twine *)1);
LABEL_7:
      if (a7)
      {
LABEL_8:
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 80))(result);
        switch(*(_DWORD *)(a3 + 12))
        {
          case 0x81:
          case 0x87:
            unsigned int v7 = (v7 + 2) >> 1;
            break;
          case 0x82:
          case 0x88:
            unsigned int v7 = ((v7 + 2) >> 8) & 1;
            break;
          case 0x83:
          case 0x89:
            unsigned int v7 = (unsigned __int16)(v7 + 3) >> 9;
            break;
          case 0x84:
          case 0x8A:
            unsigned int v7 = ((v7 + 4) >> 16);
            break;
          case 0x85:
          case 0x8B:
            unsigned int v7 = HIBYTE(v7) & 1;
            break;
          case 0x86:
          case 0x8C:
            unsigned int v7 = (v7 + 5) >> 25;
            break;
          default:
            break;
        }
        uint64_t v12 = 0;
        unint64_t v13 = (unint64_t)v7 << result[2];
        unsigned int v14 = *(_DWORD *)(a3 + 8);
        do
        {
          *(unsigned char *)(a5 + v14) |= v13 >> v12;
          v12 += 8;
          ++v14;
        }
        while (8 * v11 != v12);
      }
      return result;
  }
}

BOOL sub_1CBC603E4(uint64_t a1, unsigned int *a2)
{
  int v2 = *a2;
  return sub_1CBC605CC(*a2) != v2;
}

BOOL sub_1CBC60414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 != (__int16)a3;
}

uint64_t sub_1CBC60420(uint64_t a1, unsigned int *a2)
{
  v13[32] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *a2;
  uint64_t result = sub_1CBC605CC(*a2);
  if (result == v3)
  {
    uint64_t v11 = v13;
    long long v12 = xmmword_1CD96DBF0;
    sub_1CD430D60((uint64_t)v9, (uint64_t)&v11);
    llvm::MCInst::dump_pretty(a2, (llvm::raw_ostream *)v9, 0, " ", 1uLL, 0);
    sub_1CB8E509C((llvm::raw_ostream *)v9, "\n");
    uint64_t v6 = *v10;
    uint64_t v5 = v10[1];
    __int16 v8 = 1283;
    v7[0] = "unexpected instruction to relax: ";
    v7[2] = v6;
    v7[3] = v5;
    llvm::report_fatal_error((llvm *)v7, (const llvm::Twine *)1);
  }
  *a2 = result;
  return result;
}

uint64_t sub_1CBC60514()
{
  return 0;
}

uint64_t sub_1CBC6051C()
{
  return 0;
}

uint64_t sub_1CBC60524()
{
  return 2;
}

BOOL sub_1CBC6052C(int a1, llvm::raw_ostream *this, uint64_t a3)
{
  char v3 = a3;
  if (a3 && (a3 & 1) == 0)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v6 >= *((void *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 0);
      }
      else
      {
        *((void *)this + 4) = v6 + 1;
        *uint64_t v6 = 0;
      }
      unsigned int v7 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v7 >= *((void *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 192);
      }
      else
      {
        *((void *)this + 4) = v7 + 1;
        *unsigned int v7 = -64;
      }
      v5 -= 2;
    }
    while (v5);
  }
  return (v3 & 1) == 0;
}

uint64_t sub_1CBC605C4()
{
  return 0;
}

uint64_t sub_1CBC605CC(uint64_t result)
{
  int v1 = result - 378;
  if (result - 378) <= 0x12 && ((0x51455u >> v1)) {
    return dword_1CDC7F908[v1];
  }
  return result;
}

void sub_1CBC606FC()
{
}

void sub_1CBC60710(uint64_t a1, uint64_t a2, uint64_t a3, llvm::MCAsmLayout *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v15 = *(_DWORD *)((*(uint64_t (**)(void, void))(**(void **)(a3 + 8) + 80))(*(void *)(a3 + 8), *(unsigned int *)(a6 + 12))+ 16);
  unsigned int v16 = *(_DWORD *)(a6 + 12) - 1;
  if (v16 >= 4)
  {
    uint64_t v48 = *(void *)a3;
    uint64_t v49 = *(void *)(a6 + 16);
    v52[0] = (uint64_t)"unsupported relocation on symbol";
    __int16 v53 = 259;
    llvm::MCContext::reportError(v48, v49, (uint64_t)v52);
    unsigned int v16 = -1;
  }
  if (*(void *)(a7 + 8))
  {
    long long v17 = *(_OWORD *)(a7 + 16);
    v51[0] = *(_OWORD *)a7;
    v51[1] = v17;
    unsigned int v18 = v51;
LABEL_5:
    sub_1CBC60AE0(a2, a3, a4, (uint64_t *)a5, a6, v18, v16, a8);
    return;
  }
  if (*(void *)a7)
  {
    uint64_t v19 = *(void *)(*(void *)a7 + 16);
    if (v19
      && ((v15 << 31 >> 31) & (1 << v16)) != -*(_DWORD *)(a7 + 16)
      && (llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v19) & 1) == 0)
    {
      long long v47 = *(_OWORD *)(a7 + 16);
      v50[0] = *(_OWORD *)a7;
      v50[1] = v47;
      unsigned int v18 = v50;
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  llvm::MCAsmLayout::ensureValid(a4, (const llvm::MCFragment *)a5);
  int v20 = *(_DWORD *)(a5 + 32);
  int v21 = *(_DWORD *)(a6 + 8);
  if (!*(void *)a7 && !*(void *)(a7 + 8)) {
    llvm::report_fatal_error((llvm *)"FIXME: relocations to absolute targets not yet implemented", (const llvm::Twine *)1);
  }
  int v22 = *(_DWORD *)(v19 + 8);
  if ((v22 & 0x1C00) == 0x800)
  {
    v52[0] = 0;
    *(_DWORD *)(v19 + 8) = v22 | 4;
    if (llvm::MCExpr::evaluateAsAbsolute(*(void *)(v19 + 24), v52, *(uint64_t **)a4, (uint64_t)a4, (uint64_t *)(a2 + 64), 1))
    {
      *a8 = v52[0];
      return;
    }
  }
  if (!llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v19))
  {
    unint64_t AssociatedFragment = *(void *)v19 & 0xFFFFFFFFFFFFFFF8;
    if (!AssociatedFragment && (*(_DWORD *)(v19 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v19 + 8) |= 4u;
      unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v19 + 24));
      *(void *)uint64_t v19 = *(void *)v19 & 7 | AssociatedFragment;
    }
    uint64_t v28 = *(void *)(AssociatedFragment + 16);
    int v23 = *(_DWORD *)(v28 + 28) + 1;
    int v29 = *(_DWORD *)(a2 + 80);
    if (v29)
    {
      uint64_t v30 = *(void *)(a2 + 64);
      unsigned int v31 = v29 - 1;
      uint64_t v32 = ((v28 >> 4) ^ (v28 >> 9)) & (v29 - 1);
      uint64_t v33 = *(void *)(v30 + 16 * v32);
      if (v28 == v33)
      {
LABEL_27:
        uint64_t v36 = *(void *)(v30 + 16 * v32 + 8);
LABEL_28:
        int v26 = 0;
        uint64_t v25 = *a8 + v36;
        goto LABEL_29;
      }
      int v34 = 1;
      while (v33 != -4096)
      {
        int v35 = v32 + v34++;
        uint64_t v32 = v35 & v31;
        uint64_t v33 = *(void *)(v30 + 16 * v32);
        if (v28 == v33) {
          goto LABEL_27;
        }
      }
    }
    uint64_t v36 = 0;
    goto LABEL_28;
  }
  int v23 = *(_DWORD *)(v19 + 16);
  unint64_t v24 = *(void *)v19 & 0xFFFFFFFFFFFFFFF8;
  if (!v24 && (*(_DWORD *)(v19 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v19 + 8) |= 4u;
    unint64_t v24 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v19 + 24));
    *(void *)uint64_t v19 = *(void *)v19 & 7 | v24;
  }
  if (v24)
  {
    v52[0] = 0;
    sub_1CCBC6418(a4, (uint64_t *)v19, 1, v52);
    uint64_t v25 = *a8 - v52[0];
    int v26 = 0x8000000;
LABEL_29:
    *a8 = v25;
    goto LABEL_30;
  }
  int v26 = 0x8000000;
LABEL_30:
  uint64_t v37 = *(void *)(a5 + 16);
  if (v15)
  {
    int v39 = *(_DWORD *)(a2 + 80);
    if (v39)
    {
      uint64_t v40 = *(void *)(a2 + 64);
      unsigned int v41 = v39 - 1;
      uint64_t v42 = (v39 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      uint64_t v43 = *(void *)(v40 + 16 * v42);
      if (v37 == v43)
      {
LABEL_37:
        uint64_t v46 = *(void *)(v40 + 16 * v42 + 8);
LABEL_38:
        *a8 -= v46;
        int v38 = 0x1000000;
        goto LABEL_39;
      }
      int v44 = 1;
      while (v43 != -4096)
      {
        int v45 = v42 + v44++;
        uint64_t v42 = v45 & v41;
        uint64_t v43 = *(void *)(v40 + 16 * v42);
        if (v37 == v43) {
          goto LABEL_37;
        }
      }
    }
    uint64_t v46 = 0;
    goto LABEL_38;
  }
  int v38 = 0;
LABEL_39:
  LODWORD(v52[0]) = v21 + v20;
  HIDWORD(v52[0]) = v23 | (v16 << 25) | v26 | v38;
  sub_1CBC60F00(a2, 0, v37, v52);
}

void sub_1CBC60AE0(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *a3, uint64_t *a4, uint64_t a5, void *a6, int a7, void *a8)
{
  llvm::MCAsmLayout::ensureValid(a3, (const llvm::MCFragment *)a4);
  uint64_t v65 = a4[4];
  int v15 = *(_DWORD *)(a5 + 8);
  int v16 = *(_DWORD *)((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 80))(*(void *)(a2 + 8), *(unsigned int *)(a5 + 12))+ 16);
  uint64_t v17 = *(void *)(*a6 + 16);
  uint64_t v18 = *(void *)v17;
  unint64_t AssociatedFragment = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
  if (!AssociatedFragment && (*(_DWORD *)(v17 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v17 + 8) |= 4u;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
    uint64_t v18 = *(void *)v17 & 7 | AssociatedFragment;
    *(void *)uint64_t v17 = v18;
  }
  if (!AssociatedFragment)
  {
    uint64_t v50 = *(void *)a2;
    uint64_t v51 = *(void *)(a5 + 16);
    if ((v18 & 4) != 0)
    {
      uint64_t v58 = *(uint64_t **)(v17 - 8);
      uint64_t v59 = *v58;
      uint64_t v52 = v58 + 2;
      uint64_t v53 = v59;
    }
    else
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
    }
    __int16 v69 = 1283;
    v66[0] = "symbol '";
    uint64_t v67 = v52;
    uint64_t v68 = v53;
    v70[0] = (uint64_t)v66;
    uint64_t v71 = "' can not be undefined in a subtraction expression";
    __int16 v72 = 770;
    llvm::MCContext::reportError(v50, v51, (uint64_t)v70);
  }
  int SymbolAddress = llvm::MachObjectWriter::getSymbolAddress((llvm::MachObjectWriter *)a1, (const llvm::MCSymbol *)v17, a3);
  unint64_t v21 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
  if (!v21 && (*(_DWORD *)(v17 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v17 + 8) |= 4u;
    int v63 = SymbolAddress;
    unint64_t v21 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
    int SymbolAddress = v63;
    *(void *)uint64_t v17 = *(void *)v17 & 7 | v21;
  }
  int v22 = *(_DWORD *)(a1 + 80);
  if (v22)
  {
    uint64_t v23 = *(void *)(v21 + 16);
    uint64_t v24 = *(void *)(a1 + 64);
    unsigned int v25 = v22 - 1;
    uint64_t v26 = ((v23 >> 4) ^ (v23 >> 9)) & (v22 - 1);
    uint64_t v27 = *(void *)(v24 + 16 * v26);
    if (v23 == v27)
    {
LABEL_9:
      uint64_t v30 = *(void *)(v24 + 16 * v26 + 8);
      goto LABEL_10;
    }
    int v28 = 1;
    while (v27 != -4096)
    {
      int v29 = v26 + v28++;
      uint64_t v26 = v29 & v25;
      uint64_t v27 = *(void *)(v24 + 16 * v26);
      if (v23 == v27) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v30 = 0;
LABEL_10:
  int v31 = v16 & 1;
  *a8 += v30;
  uint64_t v32 = a6[1];
  if (v32)
  {
    uint64_t v33 = *(void *)(v32 + 16);
    uint64_t v34 = *(void *)v33;
    unint64_t v35 = *(void *)v33 & 0xFFFFFFFFFFFFFFF8;
    int v62 = SymbolAddress;
    if (!v35 && (*(_DWORD *)(v33 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v33 + 8) |= 4u;
      unint64_t v35 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v33 + 24));
      uint64_t v34 = *(void *)v33 & 7 | v35;
      *(void *)uint64_t v33 = v34;
    }
    if (!v35)
    {
      uint64_t v54 = *(void *)a2;
      uint64_t v55 = *(void *)(a5 + 16);
      if ((v34 & 4) != 0)
      {
        uint64_t v60 = *(uint64_t **)(v33 - 8);
        uint64_t v61 = *v60;
        unint64_t v56 = v60 + 2;
        uint64_t v57 = v61;
      }
      else
      {
        unint64_t v56 = 0;
        uint64_t v57 = 0;
      }
      __int16 v69 = 1283;
      v66[0] = "symbol '";
      uint64_t v67 = v56;
      uint64_t v68 = v57;
      v70[0] = (uint64_t)v66;
      uint64_t v71 = "' can not be undefined in a subtraction expression";
      __int16 v72 = 770;
      llvm::MCContext::reportError(v54, v55, (uint64_t)v70);
    }
    int v36 = llvm::MachObjectWriter::getSymbolAddress((llvm::MachObjectWriter *)a1, (const llvm::MCSymbol *)v33, a3);
    unint64_t v37 = *(void *)v33 & 0xFFFFFFFFFFFFFFF8;
    if (!v37 && (*(_DWORD *)(v33 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v33 + 8) |= 4u;
      unint64_t v37 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v33 + 24));
      *(void *)uint64_t v33 = *(void *)v33 & 7 | v37;
    }
    int v38 = *(_DWORD *)(a1 + 80);
    if (v38)
    {
      uint64_t v39 = *(void *)(v37 + 16);
      uint64_t v40 = *(void *)(a1 + 64);
      unsigned int v41 = v38 - 1;
      uint64_t v42 = ((v39 >> 4) ^ (v39 >> 9)) & (v38 - 1);
      uint64_t v43 = *(void *)(v40 + 16 * v42);
      if (v39 == v43)
      {
LABEL_19:
        uint64_t v46 = *(void *)(v40 + 16 * v42 + 8);
      }
      else
      {
        int v44 = 1;
        while (v43 != -4096)
        {
          int v45 = v42 + v44++;
          uint64_t v42 = v45 & v41;
          uint64_t v43 = *(void *)(v40 + 16 * v42);
          if (v39 == v43) {
            goto LABEL_19;
          }
        }
        uint64_t v46 = 0;
      }
      *a8 -= v46;
    }
    int v47 = a7 << 28;
    int v48 = v31 << 30;
    LODWORD(v70[0]) = (a7 << 28) | (v31 << 30) | 0x81000000;
    HIDWORD(v70[0]) = v36;
    sub_1CBC60F00(a1, 0, a4[2], v70);
    LODWORD(v32) = 0x2000000;
    int v49 = v65;
    int SymbolAddress = v62;
  }
  else
  {
    int v47 = a7 << 28;
    int v48 = v31 << 30;
    int v49 = v65;
  }
  LODWORD(v70[0]) = (v15 + v49) | v32 | v48 | v47 | 0x80000000;
  HIDWORD(v70[0]) = SymbolAddress;
  sub_1CBC60F00(a1, 0, a4[2], v70);
}

void sub_1CBC60F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v18 = a3;
  uint64_t v5 = *a4;
  uint64_t v6 = sub_1CBC6101C(a1 + 16, &v18);
  unsigned int v7 = v6;
  uint64_t v9 = (char *)v6[2];
  unint64_t v8 = v6[3];
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = (char *)v6[1];
    uint64_t v12 = (v9 - v11) >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
      abort();
    }
    uint64_t v14 = v8 - (void)v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 60) {
        sub_1CB833614();
      }
      int v16 = (char *)operator new(16 * v15);
    }
    else
    {
      int v16 = 0;
    }
    uint64_t v17 = &v16[16 * v12];
    *(void *)uint64_t v17 = a2;
    *((void *)v17 + 1) = v5;
    int v10 = v17 + 16;
    if (v9 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v9 - 1);
        v17 -= 16;
        v9 -= 16;
      }
      while (v9 != v11);
      uint64_t v9 = (char *)v7[1];
    }
    v7[1] = v17;
    v7[2] = v10;
    v7[3] = &v16[16 * v15];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)uint64_t v9 = a2;
    *((void *)v9 + 1) = v5;
    int v10 = v9 + 16;
  }
  v7[2] = v10;
}

void *sub_1CBC6101C(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    unint64_t v13 = 0;
LABEL_16:
    uint64_t v6 = sub_1CBC6117C((uint64_t *)a1, (uint64_t)a2, a2, v13);
    uint64_t v14 = *a2;
    void v6[2] = 0;
    v6[3] = 0;
    *uint64_t v6 = v14;
    v6[1] = 0;
    return v6;
  }
  unsigned int v4 = v3 - 1;
  uint64_t v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 32 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v7 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v7 == -8192;
      }
      if (v11) {
        uint64_t v9 = v6;
      }
      int v12 = v5 + v10++;
      uint64_t v5 = v12 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 32 * v5);
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v9) {
      unint64_t v13 = v9;
    }
    else {
      unint64_t v13 = v6;
    }
    goto LABEL_16;
  }
  return v6;
}

uint64_t sub_1CBC610E0(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unsigned int v5 = v3 - 1;
    uint64_t v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 32 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          int v10 = v7;
        }
        int v13 = v6 + v11++;
        uint64_t v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 32 * v6);
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

void *sub_1CBC6117C(uint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  int v4 = *((_DWORD *)a1 + 2);
  unsigned int v5 = *((_DWORD *)a1 + 4);
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - *((_DWORD *)a1 + 3) > v5 >> 3)
  {
    goto LABEL_3;
  }
  uint64_t v8 = a1;
  sub_1CBC6122C((uint64_t)a1, v5);
  uint64_t v9 = 0;
  sub_1CBC610E0(v8, a3, &v9);
  a1 = v8;
  a4 = v9;
LABEL_3:
  ++*((_DWORD *)a1 + 2);
  if (*a4 != -4096) {
    --*((_DWORD *)a1 + 3);
  }
  return a4;
}

void *sub_1CBC6122C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4312E4(a1, (uint64_t)v4, (uint64_t)v4 + 32 * v3);
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBC61304()
{
  return 0;
}

void sub_1CBC61310()
{
}

void sub_1CBC61328(uint64_t a1, llvm::MCInst *a2, llvm::raw_ostream *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1;
  uint64_t v461 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *(_DWORD *)a2;
  uint64_t v10 = **(void **)(a1 + 8);
  v450 = v452;
  long long v451 = xmmword_1CDC7F9D0;
  uint64_t v11 = v10 + 48 * v9;
  uint64_t v13 = *(void *)(v11 + 16);
  BOOL v12 = (unsigned char *)(v11 + 16);
  unint64_t v14 = sub_1CBC646F8(a1, a2, a4, a5);
  unint64_t v15 = v14;
  if ((v13 & 1) == 0)
  {
    if ((*v12 & 0x20) == 0)
    {
      unsigned int v16 = *(_DWORD *)a2;
      HIDWORD(v18) = *(_DWORD *)a2 - 2503;
      LODWORD(v18) = HIDWORD(v18);
      unsigned int v17 = v18 >> 1;
      if (v17 - 12 >= 8 && v17 >= 2)
      {
        uint64_t v414 = v451;
        if (*(unsigned char *)(v10 + 48 * v9 + 5))
        {
          uint64_t v415 = 8 * *(unsigned __int8 *)(v10 + 48 * v9 + 5) - 8;
          do
          {
            if ((unint64_t)(v414 + 1) > *((void *)&v451 + 1)) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *((unsigned char *)v450 + v414) = ((255 << (v415 & 0xF8)) & v14) >> (v415 & 0xF8);
            uint64_t v414 = v451 + 1;
            *(void *)&long long v451 = v451 + 1;
            v415 -= 8;
          }
          while (v415 != -8);
        }
        if (*(_DWORD *)(a4 + 8) || v414 < 3)
        {
          uint64_t v422 = v414;
        }
        else
        {
          uint64_t v420 = (v414 - 2);
          uint64_t v421 = (v414 - 1);
          while (1)
          {
            uint64_t v422 = v451;
            if (*((unsigned __int8 *)v450 + v421) | *((unsigned __int8 *)v450 + v420)) {
              break;
            }
            *(void *)&long long v451 = v451 - 2;
            *((char *)v450 + v422 - 3) &= ~1u;
            LODWORD(v414) = v414 - 2;
            v421 -= 2;
            v420 -= 2;
            if (v414 <= 2)
            {
              uint64_t v422 = v451;
              break;
            }
          }
          LODWORD(v414) = v422;
        }
        *(_DWORD *)(*(void *)(v8 + 24) + 144) += v414;
        if (v422)
        {
          unint64_t v423 = (char *)v450;
          do
          {
            char v424 = *v423;
            v425 = (char *)*((void *)a3 + 4);
            if ((unint64_t)v425 >= *((void *)a3 + 3))
            {
              llvm::raw_ostream::write(a3, v424);
            }
            else
            {
              *((void *)a3 + 4) = v425 + 1;
              char *v425 = v424;
            }
            ++v423;
            --v422;
          }
          while (v422);
        }
        goto LABEL_427;
      }
      v454 = v456;
      long long v455 = xmmword_1CD96EEC0;
      v453[0].i64[0] = (uint64_t)v453[1].i64;
      v453[0].i64[1] = 0x400000000;
      unint64_t v20 = v14 & 0x1000;
      unint64_t v21 = *((unsigned int *)a2 + 6);
      if (v21)
      {
        unint64_t v440 = v14 & 0x1000;
        int v437 = v14;
        unint64_t v22 = v8;
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        char v25 = 0;
        char v26 = 0;
        unint64_t v15 = v22;
        uint64_t v27 = (void *)(**(void **)(v22 + 8) + 48 * v16 + 40);
        uint64_t v28 = 2;
        while (1)
        {
          uint64_t v29 = *((void *)a2 + 2);
          int v30 = *(unsigned __int8 *)(v29 + v23);
          if (v30 == 5) {
            break;
          }
          if (v30 == 1)
          {
            if ((*(_DWORD *)(v29 + v23 + 8) | 2) != 2) {
              break;
            }
          }
          else
          {
            int v32 = *(_DWORD *)(v29 + v23 + 8);
            if ((*(unsigned char *)(*v27 + v28) & 2) != 0) {
              char v26 = v32;
            }
            else {
              char v25 = v32;
            }
          }
LABEL_17:
          ++v24;
          v23 += 16;
          v28 += 6;
          if (v24 >= v21)
          {
            uint64_t v114 = (uint64x2_t *)v453[0].i64[0];
            uint64_t v8 = v15;
            LODWORD(v15) = v437;
            unint64_t v20 = v440;
            goto LABEL_266;
          }
        }
        int v31 = sub_1CBC796AC(v15, v29 + v23, *(void *)(a5 + 192), 0);
        if (v453[0].u32[2] >= (unint64_t)v453[0].u32[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(v453[0].i64[0] + 4 * v453[0].u32[2]) = v31;
        ++v453[0].i32[2];
        unint64_t v21 = *((unsigned int *)a2 + 6);
        goto LABEL_17;
      }
      char v26 = 0;
      char v25 = 0;
      uint64_t v114 = &v453[1];
LABEL_266:
      if (v20)
      {
        v460[0].i32[0] = *(void *)(*((void *)a2 + 2) + 40);
        sub_1CD43146C((unsigned int *)v453, (uint64_t)&v114->i64[1], v460);
        uint64_t v114 = (uint64x2_t *)v453[0].i64[0];
      }
      int v228 = ((unsigned __int32)v114->i32[1] >> 12) & 2;
      if ((unint64_t)(v455 + 1) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v455) = v25 & 1 | (32 * (v26 & 3)) | v228 | 0x10;
      uint64_t v229 = v455;
      uint64_t v230 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if (v228) {
        *(_DWORD *)(v453[0].i64[0] + 4) >>= 1;
      }
      if ((unint64_t)(v229 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v230) = (v15 >> 6) & 0x30 | (v20 >> 11) | 0x81;
      uint64_t v231 = v455;
      uint64_t v232 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v231 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v232) = *(unsigned char *)v453[0].i64[0] & 0x3F | ((BYTE1(v15) & 3) << 6);
      uint64_t v233 = v455;
      uint64_t v234 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v233 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v234) = (2 * *(unsigned char *)(v453[0].i64[0] + 4)) | 1;
      uint64_t v235 = v455;
      uint64_t v236 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v235 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v236) = *(_DWORD *)(v453[0].i64[0] + 8);
      uint64_t v237 = v455;
      uint64_t v238 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v237 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v238) = (*(_DWORD *)(v453[0].i64[0] + 4) >> 6) & 0xE | (*(_DWORD *)v453[0].i64[0] >> 2) & 0xF0 | 1;
      uint64_t v239 = v455;
      uint64_t v240 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v239 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v240) = BYTE1(*(_DWORD *)(v453[0].i64[0] + 8));
      uint64_t v241 = v455;
      uint64_t v242 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v241 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v242) = (*(_DWORD *)(v453[0].i64[0] + 4) >> 4) & 0xC0 | (v15 >> 3) & 0xC | v15 & 0x18 | 1;
      uint64_t v243 = v455;
      uint64_t v244 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v243 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v244) = *(unsigned char *)(v453[0].i64[0] + 12) & 0xFE;
      uint64_t v245 = v455;
      uint64_t v246 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v245 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v246) = (*(_DWORD *)(v453[0].i64[0] + 12) >> 2) & 0xC0;
      LODWORD(v247) = v455;
      uint64_t v248 = v455 + 1;
      *(void *)&long long v455 = v248;
      if (v248 >= 3)
      {
        uint64_t v249 = (v247 - 1);
        uint64_t v247 = v247;
        while (1)
        {
          uint64_t v250 = v455;
          if (*((unsigned __int8 *)v454 + v247) | *((unsigned __int8 *)v454 + v249)) {
            break;
          }
          *(void *)&long long v455 = v455 - 2;
          *((char *)v454 + v250 - 3) &= ~1u;
          LODWORD(v248) = v248 - 2;
          v247 -= 2;
          v249 -= 2;
          if (v248 <= 2)
          {
            uint64_t v248 = v455;
            goto LABEL_318;
          }
        }
        uint64_t v248 = v455;
      }
LABEL_318:
      if (v248)
      {
        unint64_t v281 = (char *)v454;
        do
        {
          char v282 = *v281;
          uint64_t v283 = (char *)*((void *)a3 + 4);
          if ((unint64_t)v283 >= *((void *)a3 + 3))
          {
            llvm::raw_ostream::write(a3, v282);
          }
          else
          {
            *((void *)a3 + 4) = v283 + 1;
            *uint64_t v283 = v282;
          }
          ++v281;
          --v248;
        }
        while (v248);
      }
      if ((uint64x2_t *)v453[0].i64[0] != &v453[1]) {
        free((void *)v453[0].i64[0]);
      }
      uint64_t v284 = v454;
      if (v454 == v456)
      {
LABEL_328:
        *(_DWORD *)(*(void *)(v8 + 24) + 144) += v451;
        goto LABEL_427;
      }
LABEL_327:
      free(v284);
      goto LABEL_328;
    }
    unsigned int v445 = v14 >> 12;
    unsigned int v60 = v14 >> 14;
    if ((*(unsigned char *)(a5 + 192) & 0x20) == 0)
    {
      unsigned int v442 = v14 >> 14;
      v460[0].i64[0] = (uint64_t)&v460[1].i64[1];
      *(uint64x2_t *)((char *)v460 + 8) = (uint64x2_t)xmmword_1CD96EEC0;
      v454 = (char *)&v455 + 8;
      *(void *)&long long v455 = 0x800000000;
      v453[0].i64[0] = (uint64_t)v453[1].i64;
      v453[0].i64[1] = 0x800000000;
      uint64_t v447 = v8;
      unsigned int v61 = *(_DWORD *)a2;
      uint64_t v62 = **(void **)(v8 + 8);
      unsigned int v63 = *((_DWORD *)a2 + 6);
      if (!v63)
      {
        unint64_t v251 = v14;
        char v66 = 0;
        char v64 = 0;
        int v252 = &v453[1];
LABEL_330:
        unsigned int v285 = (v251 >> 12) & 7;
        unsigned __int32 v286 = v252->u32[1];
        if ((*(unsigned char *)(v62 + 48 * v61 + 10) & 0x10) != 0)
        {
          uint64_t v288 = *((void *)v454 + 1);
          if (v285)
          {
            unsigned __int32 v289 = v252->u32[2];
            BOOL v290 = *((void *)v454 + 2) != 0;
            uint64_t v291 = 3;
          }
          else
          {
            unsigned __int32 v289 = 0;
            BOOL v290 = 0;
            uint64_t v291 = 2;
          }
          unsigned __int32 v287 = 0;
          unsigned __int32 v368 = 0;
          BOOL v369 = 0;
          unsigned __int32 v370 = v252->u32[v291];
        }
        else
        {
          unsigned __int32 v287 = v252->u32[2];
          uint64_t v288 = *((void *)v454 + 3);
          if (v285)
          {
            unsigned __int32 v289 = v252[1].u32[0];
            BOOL v290 = *((void *)v454 + 4) != 0;
          }
          else
          {
            unsigned __int32 v289 = 0;
            BOOL v290 = 0;
          }
          if ((v251 & 0x10080000) != 0)
          {
            BOOL v110 = v285 == 0;
            uint64_t v367 = 4;
            if (!v110) {
              uint64_t v367 = 5;
            }
            unsigned __int32 v368 = v252->u32[v367];
            BOOL v369 = *((void *)v454 + v367) != 0;
          }
          else
          {
            unsigned __int32 v368 = 0;
            BOOL v369 = 0;
          }
          unsigned __int32 v370 = v15;
          LODWORD(v15) = v252->i32[1];
          unsigned __int32 v286 = v252->u32[3];
        }
        unsigned int v371 = (v251 >> 1) & 2 | (32 * (v66 & 3)) | v64 & 1 | 0x18;
        if ((unint64_t)(v460[0].i64[1] + 1) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v460[0].i64[1]) = v371;
        uint64_t v372 = v460[0].i64[1];
        uint64_t v373 = ++v460[0].i64[1];
        if ((unint64_t)(v372 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v373) = (v251 >> 11) & 0xF0 | BYTE1(v251) & 0xE | 1;
        uint64_t v374 = v460[0].i64[1];
        uint64_t v375 = ++v460[0].i64[1];
        if ((unint64_t)(v374 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v375) = v370 & 0x3F | ((_BYTE)v251 << 6);
        uint64_t v376 = (v251 >> 7) & 1;
        unsigned int v377 = v15 >> 1;
        if (v376) {
          LOBYTE(v377) = 4 * v15;
        }
        uint64_t v378 = v460[0].i64[1];
        uint64_t v379 = ++v460[0].i64[1];
        if ((unint64_t)(v378 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v379) = v377 & 0xFC | (2 * v376) | 1;
        uint64_t v380 = (v251 >> 8) & 1;
        int v381 = (v287 >> 1) & 0xFE;
        if (v380) {
          LOBYTE(v381) = 4 * v287;
        }
        uint64_t v382 = v460[0].i64[1];
        uint64_t v383 = ++v460[0].i64[1];
        if ((unint64_t)(v382 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v383) = v380 | v381;
        uint64_t v384 = v460[0].i64[1];
        uint64_t v385 = ++v460[0].i64[1];
        if (v288) {
          char v386 = -127;
        }
        else {
          char v386 = 1;
        }
        if ((unint64_t)(v384 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v385) = v286 & 0x3E | (v251 >> 22) & 0x40 | v386;
        uint64_t v387 = v460[0].i64[1];
        uint64_t v388 = ++v460[0].i64[1];
        if ((unint64_t)(v387 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v388) = (32 * v445) | (v289 >> 1) & 0x1F;
        uint64_t v389 = v460[0].i64[1];
        uint64_t v390 = ++v460[0].i64[1];
        if ((unint64_t)(v389 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v390) = (v251 >> 18) & 0x20 | v442 & 0x40 | (v251 >> 20) & 0x10 | (v251 >> 22) & 8 | (v251 >> 25) & 6 | v445 & 0x80 | 1;
        uint64_t v391 = v460[0].i64[1];
        uint64_t v392 = ++v460[0].i64[1];
        if (v369) {
          char v393 = 64;
        }
        else {
          char v393 = 0;
        }
        if (v290) {
          char v394 = 0x80;
        }
        else {
          char v394 = 0;
        }
        if ((unint64_t)(v391 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v392) = v394 & 0xC0 | v368 & 0x3F | v393;
        uint64_t v395 = v460[0].i64[1];
        uint64_t v396 = ++v460[0].i64[1];
        if ((unint64_t)(v395 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v396) = (v370 >> 2) & 0xF0 | (v251 >> 28) & 2 | (v251 >> 19) & 0xC | 1;
        if (v376) {
          char v397 = 2;
        }
        else {
          char v397 = 5;
        }
        unsigned int v398 = v15 >> v397;
        uint64_t v399 = v460[0].i64[1];
        uint64_t v400 = ++v460[0].i64[1];
        if ((unint64_t)(v399 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v400) = v398 & 0xF0 | (v286 >> 6) & 0xF;
        uint64_t v401 = v460[0].i64[1];
        uint64_t v402 = ++v460[0].i64[1];
        if (v380) {
          char v403 = 2;
        }
        else {
          char v403 = 5;
        }
        if ((unint64_t)(v401 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v402) = (v287 >> v403) & 0xF0 | 1;
        uint64_t v404 = v460[0].i64[1];
        uint64_t v405 = ++v460[0].i64[1];
        uint64_t v8 = v447;
        if ((unint64_t)(v404 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v405) = (v289 >> 5) & 0xFE;
        uint64_t v406 = v460[0].i64[1];
        uint64_t v407 = ++v460[0].i64[1];
        if ((unint64_t)(v406 + 2) > v460[1].i64[0]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(v460[0].i64[0] + v407) = (v368 >> 2) & 0xF0;
        LODWORD(v408) = v460[0].i32[2];
        uint64_t v409 = ++v460[0].i64[1];
        if ((v408 + 1) >= 3)
        {
          uint64_t v410 = (v408 - 1);
          uint64_t v408 = v408;
          while (!(*(unsigned __int8 *)(v460[0].i64[0] + v408) | *(unsigned __int8 *)(v460[0].i64[0] + v410)))
          {
            v460[0].i64[1] -= 2;
            *(unsigned char *)(v460[0].i64[0] + v460[0].i64[1] - 1) &= ~1u;
            LODWORD(v409) = v409 - 2;
            v408 -= 2;
            v410 -= 2;
            if (v409 <= 2)
            {
              uint64_t v409 = v460[0].i64[1];
              goto LABEL_478;
            }
          }
          uint64_t v409 = v460[0].i64[1];
        }
LABEL_478:
        if (v409)
        {
          unint64_t v411 = (char *)v460[0].i64[0];
          do
          {
            char v412 = *v411;
            unint64_t v413 = (char *)*((void *)a3 + 4);
            if ((unint64_t)v413 >= *((void *)a3 + 3))
            {
              llvm::raw_ostream::write(a3, v412);
            }
            else
            {
              *((void *)a3 + 4) = v413 + 1;
              *unint64_t v413 = v412;
            }
            ++v411;
            --v409;
          }
          while (v409);
        }
        if ((uint64x2_t *)v453[0].i64[0] != &v453[1]) {
          free((void *)v453[0].i64[0]);
        }
        if (v454 != (char *)&v455 + 8) {
          free(v454);
        }
        uint64_t v284 = (void *)v460[0].i64[0];
        if ((unint64_t *)v460[0].i64[0] == &v460[1].u64[1]) {
          goto LABEL_328;
        }
        goto LABEL_327;
      }
      char v64 = 0;
      unsigned int v65 = 0;
      char v66 = 0;
      uint64_t v429 = v62;
      unsigned int v432 = *(_DWORD *)a2;
      uint64_t v67 = (void *)(v62 + 48 * v61 + 40);
      while (1)
      {
        uint64_t v68 = *((void *)a2 + 2);
        __int16 v69 = (unsigned __int8 *)(v68 + 16 * v65);
        int v70 = *v69;
        if (v70 == 5) {
          break;
        }
        if (v70 == 1)
        {
          if ((*(_DWORD *)(v68 + 16 * v65 + 8) | 2) != 2) {
            break;
          }
        }
        else
        {
          int v74 = *(_DWORD *)(v68 + 16 * v65 + 8);
          if ((*(unsigned char *)(*v67 + 6 * v65 + 2) & 2) != 0) {
            char v66 = v74;
          }
          else {
            char v64 = v74;
          }
        }
LABEL_69:
        if (++v65 == v63)
        {
          unint64_t v251 = v15;
          int v252 = (uint64x2_t *)v453[0].i64[0];
          LODWORD(v15) = *(_DWORD *)v453[0].i64[0];
          uint64_t v62 = v429;
          unsigned int v61 = v432;
          goto LABEL_330;
        }
      }
      int v71 = sub_1CBC796AC(v447, (uint64_t)v69, *(void *)(a5 + 192), 0);
      if (v453[0].u32[2] >= (unint64_t)v453[0].u32[3]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(v453[0].i64[0] + 4 * v453[0].u32[2]) = v71;
      ++v453[0].i32[2];
      uint64_t v72 = v65 + 1;
      if (v72 < *((_DWORD *)a2 + 6)
        && (uint64_t v73 = *((void *)a2 + 2), *(unsigned char *)(v73 + 16 * (v65 + 1)) == 2))
      {
        if (v455 >= (unint64_t)DWORD1(v455)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v454 + v455) = *(void *)(v73 + 16 * v72 + 8);
        LODWORD(v455) = v455 + 1;
        ++v65;
      }
      else
      {
        if (v455 >= (unint64_t)DWORD1(v455)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v454 + v455) = 0;
        LODWORD(v455) = v455 + 1;
      }
      goto LABEL_69;
    }
    v454 = v456;
    long long v455 = xmmword_1CD96EEC0;
    v453[0].i64[0] = (uint64_t)v453[1].i64;
    v453[0].i64[1] = 0x400000000;
    uint64_t v115 = **(void **)(v8 + 8);
    if ((v14 & 0x10) != 0)
    {
      v453[1].i32[0] = 0;
      v453[0].i32[2] = 1;
    }
    unint64_t v116 = *((unsigned int *)a2 + 6);
    if (!v116)
    {
      uint64_t v253 = 0;
      char v121 = 0;
      char v120 = 0;
      unint64_t v254 = 8;
LABEL_336:
      if (v253 + 1 > v254) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v253) = v120 & 1 | (32 * (v121 & 3)) | 0x1A;
      uint64_t v292 = v455;
      uint64_t v293 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v292 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v293) = (*(_DWORD *)v453[0].i64[0] >> 7) & 6 | v445 & 0x18 | (v15 >> 13) & 0x20 | (((*(_DWORD *)(v453[0].i64[0] + 8) >> 3) & 3) << 6) | 1;
      uint64_t v294 = v455;
      uint64_t v295 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v294 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v295) = *(_DWORD *)v453[0].i64[0];
      uint64_t v296 = v455;
      uint64_t v297 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v296 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v297) = (*(_DWORD *)(v453[0].i64[0] + 4) >> 7) & 0x7E | (v15 >> 2) & 0x80 | 1;
      uint64_t v298 = v455;
      uint64_t v299 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v298 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v299) = *(_DWORD *)(v453[0].i64[0] + 4);
      uint64_t v300 = v455;
      uint64_t v301 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v300 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v301) = (*(_DWORD *)(v453[0].i64[0] + 8) >> 4) | 1;
      uint64_t v302 = v455;
      uint64_t v303 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v302 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v303) = (v15 >> 7) & 0xF3 | (v15 >> 3) & 0xC;
      uint64_t v304 = v455;
      uint64_t v305 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v304 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v305) = (*(_DWORD *)(v453[0].i64[0] + 12) >> 7) & 6 | (v15 >> 3) & 0x80 | (32
                                                                                                 * ((v15 >> 2) & 3)) | v60 & 8 | v15 & 0x10 | 1;
      uint64_t v306 = v455;
      uint64_t v307 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v306 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v307) = *(_DWORD *)(v453[0].i64[0] + 12);
      uint64_t v308 = v455;
      uint64_t v309 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      int v310 = (v15 >> 13) & 0xFFFFFFC0 | 1;
      if (v453[0].i32[2] == 5) {
        v310 |= (*(_DWORD *)(v453[0].i64[0] + 16) >> 7) & 0x3E;
      }
      if ((unint64_t)(v308 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v309) = v310;
      uint64_t v311 = v455;
      uint64_t v312 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if (v453[0].i32[2] == 5) {
        int v313 = *(_DWORD *)(v453[0].i64[0] + 16);
      }
      else {
        LOBYTE(v313) = 0;
      }
      if ((unint64_t)(v311 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v312) = v313;
      uint64_t v314 = v455;
      uint64_t v315 = v455 + 1;
      *(void *)&long long v455 = v455 + 1;
      if ((unint64_t)(v314 + 2) > *((void *)&v455 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v454 + v315) = (*(_DWORD *)(v453[0].i64[0] + 8) >> 6) & 0xE0 | (8 * (*(unsigned char *)(v453[0].i64[0] + 8) & 7)) | (2 * (v15 & 3));
      LODWORD(v316) = v455;
      uint64_t v317 = v455 + 1;
      *(void *)&long long v455 = v317;
      if (v317 >= 3)
      {
        uint64_t v318 = (v316 - 1);
        uint64_t v316 = v316;
        while (1)
        {
          uint64_t v319 = v455;
          if (*((unsigned __int8 *)v454 + v316) | *((unsigned __int8 *)v454 + v318)) {
            break;
          }
          *(void *)&long long v455 = v455 - 2;
          *((char *)v454 + v319 - 3) &= ~1u;
          LODWORD(v317) = v317 - 2;
          v316 -= 2;
          v318 -= 2;
          if (v317 <= 2)
          {
            uint64_t v317 = v455;
            goto LABEL_359;
          }
        }
        uint64_t v317 = v455;
      }
LABEL_359:
      if (v317)
      {
        int v320 = (char *)v454;
        do
        {
          char v321 = *v320;
          uint64_t v322 = (char *)*((void *)a3 + 4);
          if ((unint64_t)v322 >= *((void *)a3 + 3))
          {
            llvm::raw_ostream::write(a3, v321);
          }
          else
          {
            *((void *)a3 + 4) = v322 + 1;
            *uint64_t v322 = v321;
          }
          ++v320;
          --v317;
        }
        while (v317);
      }
      if ((uint64x2_t *)v453[0].i64[0] != &v453[1]) {
        free((void *)v453[0].i64[0]);
      }
      uint64_t v284 = v454;
      if (v454 == v456) {
        goto LABEL_328;
      }
      goto LABEL_327;
    }
    unint64_t v438 = v14;
    unsigned int v443 = v14 >> 14;
    uint64_t v117 = v8;
    uint64_t v118 = 0;
    unint64_t v119 = 0;
    char v120 = 0;
    char v121 = 0;
    uint64_t v122 = (void *)(v115 + 48 * *(unsigned int *)a2 + 40);
    uint64_t v123 = 2;
    while (1)
    {
      uint64_t v124 = *((void *)a2 + 2);
      int v125 = *(unsigned __int8 *)(v124 + v118);
      if (v125 == 5) {
        break;
      }
      if (v125 == 1)
      {
        if ((*(_DWORD *)(v124 + v118 + 8) | 2) != 2) {
          break;
        }
      }
      else
      {
        int v127 = *(_DWORD *)(v124 + v118 + 8);
        if ((*(unsigned char *)(*v122 + v123) & 2) != 0) {
          char v121 = v127;
        }
        else {
          char v120 = v127;
        }
      }
LABEL_153:
      ++v119;
      v118 += 16;
      v123 += 6;
      if (v119 >= v116)
      {
        unint64_t v254 = *((void *)&v455 + 1);
        uint64_t v253 = v455;
        uint64_t v8 = v117;
        unint64_t v15 = v438;
        LOBYTE(v60) = v443;
        goto LABEL_336;
      }
    }
    int v126 = sub_1CBC796AC(v117, v124 + v118, *(void *)(a5 + 192), 0);
    if (v453[0].u32[2] >= (unint64_t)v453[0].u32[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(v453[0].i64[0] + 4 * v453[0].u32[2]) = v126;
    ++v453[0].i32[2];
    unint64_t v116 = *((unsigned int *)a2 + 6);
    goto LABEL_153;
  }
  uint64_t v33 = 0;
  __int16 v449 = 0;
  uint64_t v34 = *(uint64_t **)(v8 + 8);
  uint64_t v35 = *(void *)(*(void *)(v8 + 16) + 24);
  uint64_t v428 = *(void *)(v35 + 200);
  unsigned int v431 = *(unsigned __int16 *)(v35 + 214);
  unsigned int v36 = *(_DWORD *)a2;
  uint64_t v37 = *v34;
  uint64_t v38 = *(void *)(*v34 + 48 * *(unsigned int *)a2 + 16);
  do
  {
    uint64_t v39 = &v453[v33];
    v39->i64[0] = 0;
    v39->i32[2] = 0;
    ++v33;
  }
  while (v33 != 2);
  uint64_t v446 = v8;
  unsigned int v40 = (v38 >> 1) & 7;
  unsigned int v41 = *(unsigned __int8 *)(v37 + 48 * v36 + 4);
  unsigned int v42 = *((_DWORD *)a2 + 6);
  unsigned int v441 = v41;
  if (v42 > v41)
  {
    unsigned int v43 = 0;
    LOBYTE(v434) = 0;
    char v44 = 0;
    unsigned int v45 = 0;
    LOBYTE(v444) = 0;
    unsigned int v46 = 0;
    uint64_t v47 = *((void *)a2 + 2);
    uint64_t v48 = v37 + 48 * v36;
    int v49 = (void *)(v48 + 40);
    uint64_t v50 = v48 + 8;
    unsigned int v51 = v41;
    while (1)
    {
      *((_DWORD *)&v454 + v51) = -1;
      int v52 = *(unsigned __int8 *)(v47 + 16 * v51);
      if (v52 == 5) {
        break;
      }
      if (v52 == 1)
      {
        if ((*(_DWORD *)(v47 + 16 * v51 + 8) | 2) != 2) {
          break;
        }
      }
      else if ((*(unsigned char *)(*v49 + 6 * v51 + 2) & 2) != 0)
      {
        if (v52 == 2) {
          int v444 = *(_DWORD *)(v47 + 16 * v51 + 8);
        }
      }
      else
      {
        if ((v38 & 0x10) != 0 && v51 == v42 - 1) {
          goto LABEL_75;
        }
        if ((v38 & 0x10) != 0 && v51 == v42 - 3 && (*(unsigned char *)(v50 + 2) & 0x40) != 0)
        {
          unsigned int v51 = v42 - 3;
        }
        else
        {
          unint64_t v53 = *(void *)(v47 + 16 * v51 + 8);
          if ((v52 != 2) | v44 & 1)
          {
            if ((v53 & 0x100000000) != 0) {
              uint64_t v54 = (unsigned __int16)*(void *)(v47 + 16 * v51 + 8);
            }
            else {
              uint64_t v54 = *(void *)(v47 + 16 * v51 + 8);
            }
            if (v46)
            {
              uint64_t v55 = v46;
              uint64_t v56 = v46;
              uint64_t v57 = &v453[0].i64[1];
              while (*(v57 - 1) != v54)
              {
                v57 += 2;
                if (!--v56) {
                  goto LABEL_51;
                }
              }
              *((_DWORD *)&v454 + v51) = *(_DWORD *)v57;
            }
            else
            {
              uint64_t v55 = 0;
LABEL_51:
              unint64_t v58 = 2 * (v43 & 1);
              v43 |= 1 << (2 * (v43 & 1));
              *((_DWORD *)&v454 + v51) = v58;
              v459[v58] = v51;
              *(unsigned char *)((unint64_t)&v449 | (v58 >> 1)) = 1;
              ++v46;
              uint64_t v59 = &v453[v55];
              v59->i64[0] = v54;
              v59->i32[2] = v58;
            }
          }
          else
          {
            uint64_t v434 = (v53 >> 5) & 1;
            char v44 = 1;
          }
        }
      }
LABEL_29:
      if (++v51 >= v42) {
        goto LABEL_75;
      }
    }
    if (v45 < v40)
    {
      ++v51;
      ++v45;
    }
    goto LABEL_29;
  }
  LOBYTE(v444) = 0;
  LOBYTE(v434) = 0;
  unsigned int v43 = 0;
LABEL_75:
  for (uint64_t i = 0; i != 2; ++i)
  {
    unsigned int v76 = &v460[i];
    v76->i64[0] = 0;
    v76->i32[2] = 0;
  }
  if (v42 > v441)
  {
    char v77 = 0;
    int v78 = 0;
    unsigned int v79 = 0;
    unsigned int v80 = 0;
    uint64_t v81 = *((void *)a2 + 2);
    unsigned int v82 = v441;
    while (2)
    {
      switch(*(unsigned char *)(v81 + 16 * v82))
      {
        case 1:
          uint64_t v83 = *(unsigned int *)(v81 + 16 * v82 + 8);
          if ((unint64_t)(v83 - 771) < 0xFFFFFFFFFFFFFE00) {
            goto LABEL_99;
          }
          goto LABEL_83;
        case 2:
        case 4:
          goto LABEL_99;
        case 5:
          uint64_t v88 = *(void *)(v81 + 16 * v82 + 8);
          if (v88) {
            uint64_t v89 = v88 - 8;
          }
          else {
            uint64_t v89 = 0;
          }
          unint64_t v84 = *(void *)(*(void *)(v89 + 32) + 16);
          if (!v80) {
            goto LABEL_92;
          }
          goto LABEL_84;
        default:
          LODWORD(v83) = *(_DWORD *)(v81 + 16 * v82 + 8);
LABEL_83:
          unint64_t v84 = v83 | 0xFFFFFFFF00000000;
          if (v80)
          {
LABEL_84:
            uint64_t v85 = v80;
            uint64_t v86 = v80;
            unint64_t v87 = &v460[0].i64[1];
            do
            {
              if (*(v87 - 1) == v84)
              {
                *((_DWORD *)&v454 + v82) = *(_DWORD *)v87;
                goto LABEL_99;
              }
              v87 += 2;
              --v86;
            }
            while (v86);
          }
          else
          {
LABEL_92:
            uint64_t v85 = 0;
          }
          int v90 = 2 * (v43 & 1);
          int v91 = 1 << (2 * (v43 & 1));
          *((_DWORD *)&v454 + v82) = v90;
          v459[v90] = v82;
          v43 |= v91;
          ++v80;
          uint64_t v92 = &v460[v85];
          v92->i64[0] = v84;
          v92->i32[2] = v90;
          if (v79 < v40)
          {
            int v93 = *(_DWORD *)(v81 + 16 * ++v82 + 8);
            if ((v93 & 0x20) != 0)
            {
              if ((v77 & 4) != 0) {
LABEL_581:
              }
                llvm::report_fatal_error((llvm *)"Too many cached reads specified!", (const llvm::Twine *)1);
              char v77 = v90 | 4;
            }
            v78 |= v91 & (v93 << 27 >> 31);
            ++v79;
          }
LABEL_99:
          if (++v82 < v42) {
            continue;
          }
          unsigned int v94 = 0;
          uint64_t v95 = 0;
          long long v457 = 0u;
          long long v458 = 0u;
          unsigned int v96 = v441;
          break;
      }
      break;
    }
    while (1)
    {
      int v97 = *(unsigned __int8 *)(v81 + 16 * v96);
      if ((v97 - 4) >= 2)
      {
        if (v97 == 1)
        {
          int v98 = *(_DWORD *)(v81 + 16 * v96 + 8);
          if ((v98 | 2) == 2 || (v98 - 259) < 0x200) {
            goto LABEL_121;
          }
        }
        else
        {
          if (v97 == 2) {
            goto LABEL_121;
          }
          int v98 = *(_DWORD *)(v81 + 16 * v96 + 8);
        }
        if (!v95)
        {
LABEL_109:
          for (int j = 0; j != 4; ++j)
          {
            if (((v43 >> j) & 1) == 0) {
              break;
            }
          }
          *((_DWORD *)&v454 + v96) = j;
          v459[j] = v96;
          v43 |= 1 << j;
          uint64_t v102 = (v95 + 1);
          uint64_t v103 = (_DWORD *)&v457 + 2 * v95;
          *uint64_t v103 = v98;
          v103[1] = j;
          if (v94 < v40)
          {
            int v104 = *(_DWORD *)(v81 + 16 * ++v96 + 8);
            if ((v104 & 0x20) != 0)
            {
              if ((v77 & 4) != 0) {
                goto LABEL_581;
              }
              char v77 = j | 4;
            }
            v78 |= (1 << j) & (v104 << 27 >> 31);
            ++v94;
          }
          goto LABEL_122;
        }
        uint64_t v99 = v95;
        uint64_t v100 = (_DWORD *)&v457 + 1;
        while (*(v100 - 1) != v98)
        {
          v100 += 2;
          if (!--v99) {
            goto LABEL_109;
          }
        }
        *((_DWORD *)&v454 + v96) = *v100;
      }
LABEL_121:
      uint64_t v102 = v95;
LABEL_122:
      ++v96;
      uint64_t v95 = v102;
      if (v96 >= v42) {
        goto LABEL_125;
      }
    }
  }
  LOBYTE(v78) = 0;
  char v77 = 0;
  long long v457 = 0u;
  long long v458 = 0u;
LABEL_125:
  char v426 = v77;
  uint64_t v105 = *(void *)(a5 + 192);
  unsigned int v106 = (v105 >> 6) & 0x200;
  int v107 = v449;
  int v436 = HIBYTE(v449);
  unsigned int v108 = v106;
  if (!v441)
  {
    unsigned int v435 = 0;
LABEL_140:
    char v113 = 0;
    goto LABEL_160;
  }
  uint64_t v109 = (unsigned __int8 *)*((void *)a2 + 2);
  if (*v109 == 1)
  {
    BOOL v110 = v441 > 1 && *((_DWORD *)v109 + 2) == 2;
    unsigned int v111 = v110;
    v109 += 16 * v111;
  }
  unsigned int v435 = sub_1CBC796AC(v446, (uint64_t)v109, v105, 0);
  int v112 = *v109;
  if (v112 != 5)
  {
    unsigned int v106 = v108;
    if (v112 == 1
      && *((_DWORD *)v109 + 2) >> 3 < v431
      && ((*(unsigned __int8 *)(v428 + ((unint64_t)*((unsigned int *)v109 + 2) >> 3)) >> (*((_DWORD *)v109 + 2) & 7)) & 1) != 0)
    {
      char v113 = 16;
      goto LABEL_160;
    }
    goto LABEL_140;
  }
  uint64_t v128 = *((void *)v109 + 1);
  if (v128) {
    uint64_t v129 = v128 - 8;
  }
  else {
    uint64_t v129 = 0;
  }
  char v113 = 16 * (*(_DWORD *)(v129 + 24) == 4);
  unsigned int v106 = v108;
LABEL_160:
  unint64_t v433 = v15 >> 62;
  LODWORD(v130) = v106;
  BOOL v131 = v107;
  if ((v43 & 1) == 0) {
    goto LABEL_167;
  }
  uint64_t v132 = *((void *)a2 + 2) + 16 * v459[0];
  if (!v107)
  {
    int v133 = sub_1CBC796AC(v446, v132, *(void *)(a5 + 192), v433 == 0);
    unsigned int v106 = v108;
    LODWORD(v130) = v133;
    goto LABEL_166;
  }
  uint64_t v130 = *(void *)(v132 + 8);
  if ((v130 & 0x100000000) != 0)
  {
LABEL_166:
    BOOL v131 = 0;
    goto LABEL_167;
  }
  BOOL v131 = WORD1(v130) != 0;
  if (!WORD1(v130)) {
    LODWORD(v130) = (unsigned __int16)*(void *)(v132 + 8);
  }
LABEL_167:
  BOOL v427 = v131;
  char v430 = v107;
  unsigned int v134 = v106;
  if ((v43 & 2) != 0)
  {
    unsigned int v135 = sub_1CBC796AC(v446, *((void *)a2 + 2) + 16 * v459[1], *(void *)(a5 + 192), 0);
    unsigned int v106 = v108;
    unsigned int v134 = v135;
  }
  if ((v43 & 4) == 0)
  {
    LODWORD(v136) = v106;
    BOOL v137 = v436;
    goto LABEL_177;
  }
  uint64_t v138 = *((void *)a2 + 2) + 16 * v459[2];
  if (!v436)
  {
    LODWORD(v136) = sub_1CBC796AC(v446, v138, *(void *)(a5 + 192), v433 == 0);
    unsigned int v106 = v108;
    goto LABEL_176;
  }
  uint64_t v136 = *(void *)(v138 + 8);
  if ((v136 & 0x100000000) != 0)
  {
LABEL_176:
    BOOL v137 = 0;
    goto LABEL_177;
  }
  BOOL v137 = WORD1(v136) != 0;
  if (!WORD1(v136)) {
    unsigned int v134 = (unsigned __int16)v134;
  }
LABEL_177:
  unint64_t v439 = v15;
  if ((v43 & 8) != 0)
  {
    int v140 = v136;
    BOOL v141 = v137;
    LODWORD(v136) = sub_1CBC796AC(v446, *((void *)a2 + 2) + 16 * v459[3], *(void *)(a5 + 192), 0);
    BOOL v137 = v141;
    unsigned int v106 = v136;
    LODWORD(v136) = v140;
  }
  else if (!v43)
  {
    LOBYTE(v139) = 1;
    char v430 = 1;
    LOBYTE(v449) = 1;
    goto LABEL_182;
  }
  unsigned int v139 = 32 - __clz(v43);
LABEL_182:
  if ((unint64_t)(v451 + 1) > *((void *)&v451 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v450 + v451) = (v139 - 1) & 3 | v113 | (32 * v444) | (8 * (v441 != 0)) | v426 & 4 | 0x80;
  uint64_t v142 = v451;
  uint64_t v143 = v451 + 1;
  *(void *)&long long v451 = v451 + 1;
  unsigned int v144 = v136 >> 6;
  if ((unint64_t)(v142 + 2) > *((void *)&v451 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v450 + v143) = (v435 >> 7) & 2 | ((v426 & 3) << 6) | (v130 >> 4) & 0x20 | (v134 >> 5) & 0x10 | (v136 >> 6) & 8 | (v106 >> 7) & 4 | 1;
  uint64_t v145 = v451;
  uint64_t v146 = v451 + 1;
  *(void *)&long long v451 = v451 + 1;
  if (v441)
  {
    if ((unint64_t)(v145 + 2) > *((void *)&v451 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v450 + v146) = v435;
    long long v147 = v451;
    uint64_t v148 = v451 + 1;
    *(void *)&long long v451 = v451 + 1;
    if (v434) {
      char v149 = -127;
    }
    else {
      char v149 = 1;
    }
    char v150 = BYTE1(v435) & 0x3E | v149;
    BOOL v152 = v427;
    char v151 = v430;
    if ((unint64_t)(v147 + 2) > *((void *)&v147 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v450 + v148) = v150;
    uint64_t v146 = v451 + 1;
    *(void *)&long long v451 = v451 + 1;
  }
  else
  {
    BOOL v152 = v427;
    char v151 = v430;
  }
  char v153 = ((_BYTE)v78 << 6) & 0x80 | (2 * (v134 & 0x3F)) | 1;
  char v154 = ((_BYTE)v78 << 7) | (2 * (v130 & 0x3F));
  unsigned int v155 = (v130 >> 17) & 0x80 | (v130 >> 7) & 0x70 | (v134 >> 5) & 0xE;
  if (((32 * v151) | ((v130 >> 14) << 6) | (v130 >> 6) & 0x10 | (v130 >> 5) & 0xE) | v152
    || v155)
  {
    char v159 = v154 | 1;
    if ((unint64_t)(v146 + 1) > *((void *)&v451 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v450 + v146) = v159;
    uint64_t v160 = v451;
    uint64_t v161 = v451 + 1;
    *(void *)&long long v451 = v451 + 1;
    if ((unint64_t)(v160 + 2) > *((void *)&v451 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    char v162 = v155 | 1;
    *((unsigned char *)v450 + v161) = v153;
    uint64_t v163 = v451;
    uint64_t v164 = v451 + 1;
    *(void *)&long long v451 = v451 + 1;
    uint64_t v158 = v446;
    if ((unint64_t)(v163 + 2) > *((void *)&v451 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v450 + v164) = (32 * v151) | ((v130 >> 14) << 6) | (v130 >> 6) & 0x10 | (v130 >> 5) & 0xE | v152;
    uint64_t v165 = v451;
    uint64_t v166 = v451 + 1;
    *(void *)&long long v451 = v451 + 1;
    if ((unint64_t)(v165 + 2) > *((void *)&v451 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v450 + v166) = v162;
  }
  else
  {
    if ((unint64_t)(v146 + 1) > *((void *)&v451 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v450 + v146) = v154;
    uint64_t v156 = v451;
    uint64_t v157 = v451 + 1;
    *(void *)&long long v451 = v451 + 1;
    if ((unint64_t)(v156 + 2) > *((void *)&v451 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v450 + v157) = v153;
    uint64_t v158 = v446;
  }
  uint64_t v167 = v451;
  uint64_t v168 = v451 + 1;
  *(void *)&long long v451 = v451 + 1;
  if (v152)
  {
    if ((unint64_t)(v167 + 2) > *((void *)&v451 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v450 + v168) = BYTE2(v130);
    uint64_t v169 = v451;
    uint64_t v170 = v451 + 1;
    *(void *)&long long v451 = v451 + 1;
    if ((unint64_t)(v169 + 2) > *((void *)&v451 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *((unsigned char *)v450 + v170) = BYTE3(v130) | 1;
    uint64_t v168 = v451 + 1;
    *(void *)&long long v451 = v451 + 1;
  }
  if ((v43 & 0xC) != 0)
  {
    char v171 = (32 * v78) & 0x80 | (2 * (v136 & 0x3F));
    char v172 = (16 * v78) & 0x80 | (2 * (v106 & 0x3F)) | 1;
    unsigned int v173 = (v136 >> 17) & 0x80 | (v136 >> 7) & 0x70 | (v106 >> 5) & 0xE;
    if (BYTE1(v136) & 0xC0 | (32 * v436) | v144 & 0x10 | (v136 >> 5) & 0xE | v137
      || v173)
    {
      char v177 = v171 | 1;
      if ((unint64_t)(v168 + 1) > *((void *)&v451 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v450 + v168) = v177;
      uint64_t v178 = v451;
      uint64_t v179 = v451 + 1;
      *(void *)&long long v451 = v451 + 1;
      if ((unint64_t)(v178 + 2) > *((void *)&v451 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      char v180 = v173 | 1;
      *((unsigned char *)v450 + v179) = v172;
      uint64_t v181 = v451;
      uint64_t v182 = v451 + 1;
      *(void *)&long long v451 = v451 + 1;
      unint64_t v176 = v439;
      if ((unint64_t)(v181 + 2) > *((void *)&v451 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v450 + v182) = BYTE1(v136) & 0xC0 | (32 * v436) | v144 & 0x10 | (v136 >> 5) & 0xE | v137;
      uint64_t v183 = v451;
      uint64_t v184 = v451 + 1;
      *(void *)&long long v451 = v451 + 1;
      if ((unint64_t)(v183 + 2) > *((void *)&v451 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v450 + v184) = v180;
    }
    else
    {
      if ((unint64_t)(v168 + 1) > *((void *)&v451 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v450 + v168) = v171;
      uint64_t v174 = v451;
      uint64_t v175 = v451 + 1;
      *(void *)&long long v451 = v451 + 1;
      if ((unint64_t)(v174 + 2) > *((void *)&v451 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v450 + v175) = v172;
      unint64_t v176 = v439;
    }
    uint64_t v185 = v451;
    uint64_t v168 = v451 + 1;
    *(void *)&long long v451 = v451 + 1;
    if (v137)
    {
      if ((unint64_t)(v185 + 2) > *((void *)&v451 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v450 + v168) = BYTE2(v136);
      uint64_t v186 = v451;
      uint64_t v187 = v451 + 1;
      *(void *)&long long v451 = v451 + 1;
      if ((unint64_t)(v186 + 2) > *((void *)&v451 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v450 + v187) = BYTE3(v136) | 1;
      uint64_t v168 = v451 + 1;
      *(void *)&long long v451 = v451 + 1;
    }
  }
  else
  {
    unint64_t v176 = v439;
  }
  switch(v433 ^ 2)
  {
    case 1uLL:
      unint64_t v194 = 0;
      memset(v453, 0, 24);
      uint64_t v195 = **(void **)(v158 + 8);
      uint64_t v196 = v195 + 48 * *(unsigned int *)a2;
      unsigned int v197 = *(unsigned __int8 *)(v196 + 4);
      unsigned int v198 = *((_DWORD *)a2 + 6);
      if (v198 != v197)
      {
        int v199 = 0;
        char v200 = 0;
        unsigned int v201 = 0;
        unsigned int v202 = (*(_DWORD *)(v196 + 16) >> 1) & 7;
        uint64_t v203 = *((void *)a2 + 2);
        uint64_t v204 = v195 + 48 * *(unsigned int *)a2;
        uint64_t v205 = (void *)(v204 + 40);
        uint64_t v206 = v204 + 8;
        do
        {
          int v207 = *(unsigned __int8 *)(v203 + 16 * v197);
          if ((v207 != 1 || (*(_DWORD *)(v203 + 16 * v197 + 8) | 2) != 2)
            && (*(unsigned char *)(*v205 + 6 * v197 + 2) & 2) == 0)
          {
            if ((v207 != 2) | v200 & 1)
            {
              if (v197 == v198 - 1 && *((_DWORD *)&v454 + v197) == -1)
              {
                unsigned int v197 = v198 - 1;
              }
              else if (v197 == v198 - 3 && (*(unsigned char *)(v206 + 2) & 0x40) != 0 && *((_DWORD *)&v454 + v197) == -1)
              {
                unsigned int v197 = v198 - 3;
              }
              else
              {
                v453[0].i64[v199] = (*((_DWORD *)&v454 + v197) - (_BYTE)v199) & 3;
                ++v199;
                if ((v207 | 4) == 5 && v201 < v202)
                {
                  ++v201;
                  ++v197;
                }
              }
            }
            else
            {
              char v200 = 1;
            }
          }
          ++v197;
        }
        while (v197 != v198);
        unint64_t v194 = (v453[0].i64[1] << 44) | (v453[0].i64[0] << 46) | (v453[1].i64[0] << 42);
      }
      goto LABEL_409;
    case 2uLL:
      int64x2_t v208 = 0uLL;
      memset(v453, 0, 32);
      memset(v460, 0, sizeof(v460));
      uint64_t v209 = **(void **)(v158 + 8);
      uint64_t v210 = v209 + 48 * *(unsigned int *)a2;
      unsigned int v211 = *(unsigned __int8 *)(v210 + 4);
      unsigned int v212 = *((_DWORD *)a2 + 6);
      if (v212 == v211)
      {
        unint64_t v213 = 0;
        unint64_t v214 = 0;
        int8x8_t v215 = 0;
        goto LABEL_298;
      }
      int v255 = 0;
      char v256 = 0;
      unsigned int v257 = 0;
      unsigned int v258 = (*(_DWORD *)(v210 + 16) >> 1) & 7;
      uint64_t v259 = *((void *)a2 + 2);
      int v260 = (void *)(v209 + 48 * *(unsigned int *)a2 + 40);
      while (1)
      {
        int v261 = *(unsigned __int8 *)(v259 + 16 * v211);
        if (v261 == 1 && (*(_DWORD *)(v259 + 16 * v211 + 8) | 2) == 2
          || (*(unsigned char *)(*v260 + 6 * v211 + 2) & 2) != 0)
        {
          goto LABEL_296;
        }
        if (!((v261 != 2) | v256 & 1))
        {
          char v256 = 1;
          goto LABEL_296;
        }
        v460[0].i64[v255] = (*((_DWORD *)&v454 + v211) - (_BYTE)v255) & 3;
        if ((v261 | 4) != 5) {
          goto LABEL_293;
        }
        if (v257 < v258) {
          break;
        }
LABEL_294:
        ++v255;
LABEL_296:
        if (++v211 == v212)
        {
          unint64_t v213 = v453[0].u64[1];
          unint64_t v214 = v453[0].i64[0];
          int64x2_t v208 = (int64x2_t)v453[1];
          int8x16_t v262 = vorrq_s8((int8x16_t)vshlq_u64(v460[0], (uint64x2_t)xmmword_1CDC7FA20), (int8x16_t)vshlq_u64(v460[1], (uint64x2_t)xmmword_1CDC7FA40));
          int8x8_t v215 = vorr_s8(*(int8x8_t *)v262.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v262, v262, 8uLL));
LABEL_298:
          int8x16_t v263 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v208, 1), (uint64x2_t)xmmword_1CDC7FA70), (int8x16_t)xmmword_1CDC7FAA0), vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v208.i64[0], 0), (uint64x2_t)xmmword_1CDC7FA80), (int8x16_t)xmmword_1CDC7FA90)), vorrq_s8(vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL), (uint64x2_t)xmmword_1CDC7FA50), (int8x16_t)xmmword_1CDC7FAC0), vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v213), (uint64x2_t)xmmword_1CDC7FA60), (int8x16_t)xmmword_1CDC7FAB0)));
          unint64_t v194 = *(void *)&vorr_s8(*(int8x8_t *)v263.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v263, v263, 8uLL)) | ((v213 & 1) << 38) | (v214 << 52) & 0x40000000000000 | (((v214 >> 1) & 1) << 55) | ((v214 & 1) << 39) | *(void *)&v215;
          goto LABEL_409;
        }
      }
      v453[0].i64[v255] = *(void *)(v259 + 16 * ++v211 + 8);
LABEL_293:
      ++v257;
      goto LABEL_294;
    case 3uLL:
      if ((v176 & 0x3000000000000000) == 0x2000000000000000)
      {
        unint64_t v194 = 0;
        memset(v453, 0, 24);
        memset(v460, 0, 24);
        uint64_t v216 = **(void **)(v158 + 8);
        uint64_t v217 = v216 + 48 * *(unsigned int *)a2;
        unsigned int v218 = *(unsigned __int8 *)(v217 + 4);
        unsigned int v219 = *((_DWORD *)a2 + 6);
        if (v219 != v218)
        {
          int v220 = 0;
          char v221 = 0;
          unsigned int v222 = 0;
          unsigned int v223 = (*(_DWORD *)(v217 + 16) >> 1) & 7;
          uint64_t v224 = *((void *)a2 + 2);
          uint64_t v225 = (void *)(v216 + 48 * *(unsigned int *)a2 + 40);
          do
          {
            int v226 = *(unsigned __int8 *)(v224 + 16 * v218);
            if ((v226 != 1 || (*(_DWORD *)(v224 + 16 * v218 + 8) | 2) != 2)
              && (*(unsigned char *)(*v225 + 6 * v218 + 2) & 2) == 0)
            {
              if ((v226 != 2) | v221 & 1)
              {
                v453[0].i64[v220] = (*((_DWORD *)&v454 + v218) - (_BYTE)v220) & 3;
                if (v226 == 2)
                {
                  if (*(unsigned char *)(v224 + 16 * v218 + 12)) {
                    v460[0].i64[v220] = 1;
                  }
                  ++v220;
                }
                else
                {
                  ++v220;
                  if ((v226 | 4) == 5 && v222 < v223)
                  {
                    ++v222;
                    ++v218;
                  }
                }
              }
              else
              {
                char v221 = 1;
              }
            }
            ++v218;
          }
          while (v218 != v219);
          int8x16_t v227 = vorrq_s8((int8x16_t)vshlq_u64(*(uint64x2_t *)((char *)v460 + 8), (uint64x2_t)xmmword_1CDC7FA30), (int8x16_t)vshlq_u64(v453[0], (uint64x2_t)xmmword_1CDC7FA20));
          unint64_t v194 = *(void *)&vorr_s8(*(int8x8_t *)v227.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v227, v227, 8uLL)) | (v460[0].i64[0] << 50) | (v453[1].i64[0] << 42);
        }
      }
      else
      {
        uint64_t v264 = 0;
        uint64_t v265 = 0;
        uint64_t v266 = 0;
        int64x2_t v267 = 0uLL;
        memset(v453, 0, 24);
        memset(v460, 0, 24);
        *(void *)&long long v458 = 0;
        long long v457 = 0u;
        uint64_t v268 = **(void **)(v158 + 8);
        uint64_t v269 = v268 + 48 * *(unsigned int *)a2;
        unsigned int v270 = *(unsigned __int8 *)(v269 + 4);
        unsigned int v271 = *((_DWORD *)a2 + 6);
        if (v271 != v270)
        {
          unsigned int v272 = 0;
          char v273 = 0;
          unsigned int v274 = 0;
          unsigned int v275 = (*(_DWORD *)(v269 + 16) >> 1) & 7;
          uint64_t v276 = *((void *)a2 + 2);
          int v277 = (void *)(v268 + 48 * *(unsigned int *)a2 + 40);
          do
          {
            int v278 = *(unsigned __int8 *)(v276 + 16 * v270);
            if ((v278 != 1 || (*(_DWORD *)(v276 + 16 * v270 + 8) | 2) != 2)
              && (*(unsigned char *)(*v277 + 6 * v270 + 2) & 2) == 0)
            {
              if ((v278 != 2) | v273 & 1)
              {
                uint64_t v279 = v272;
                v460[0].i64[v272] = (*((_DWORD *)&v454 + v270) - (_BYTE)v272) & 3;
                if (v278 == 2)
                {
                  if (*(unsigned char *)(v276 + 16 * v270 + 12)) {
                    *((void *)&v457 + v272) = 1;
                  }
                  ++v272;
                }
                else
                {
                  ++v272;
                  if ((v278 == 1 || v278 == 5) && v274 < v275)
                  {
                    v453[0].i64[v279] = *(void *)(v276 + 16 * ++v270 + 8);
                    ++v274;
                  }
                }
              }
              else
              {
                char v273 = 1;
              }
            }
            ++v270;
          }
          while (v270 != v271);
          uint64_t v264 = v453[0].i64[0];
          int64x2_t v267 = *(int64x2_t *)((char *)v453 + 8);
          uint64_t v265 = (*((void *)&v457 + 1) << 51) | ((void)v457 << 50) | ((void)v458 << 52);
          uint64_t v266 = (v460[0].i64[1] << 44) | (v460[1].i64[0] << 42) | (v460[0].i64[0] << 46);
        }
        int8x16_t v280 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v267, 1), (uint64x2_t)xmmword_1CDC7F9E0), (int8x16_t)xmmword_1CDC7FA10), vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v267.i64[0], 0), (uint64x2_t)xmmword_1CDC7F9F0), (int8x16_t)xmmword_1CDC7FA00));
        unint64_t v194 = *(void *)&vorr_s8(*(int8x8_t *)v280.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v280, v280, 8uLL)) | (v264 << 37) & 0x8000000000 | (v264 << 54) & 0x80000000000000 | v266 | v265;
      }
      goto LABEL_409;
    default:
      switch((v176 >> 60) & 3)
      {
        case 1uLL:
          unint64_t v194 = 0;
          v453[0] = 0uLL;
          uint64_t v323 = **(void **)(v158 + 8);
          unsigned int v324 = *(unsigned __int8 *)(v323 + 48 * *(unsigned int *)a2 + 4);
          unsigned int v325 = *((_DWORD *)a2 + 6);
          if (v325 != v324)
          {
            int v326 = 0;
            char v327 = 0;
            uint64_t v328 = *((void *)a2 + 2);
            unsigned __int8 v329 = (void *)(v323 + 48 * *(unsigned int *)a2 + 40);
            do
            {
              int v330 = *(unsigned __int8 *)(v328 + 16 * v324);
              if ((v330 != 1 || (*(_DWORD *)(v328 + 16 * v324 + 8) | 2) != 2)
                && (*(unsigned char *)(*v329 + 6 * v324 + 2) & 2) == 0)
              {
                if ((v330 != 2) | v327 & 1)
                {
                  v453[0].i64[v326] = (*((_DWORD *)&v454 + v324) - (_BYTE)v326) & 3;
                  ++v326;
                  if ((v330 | 4) == 5) {
                    ++v324;
                  }
                }
                else
                {
                  char v327 = 1;
                }
              }
              ++v324;
            }
            while (v324 != v325);
            unint64_t v194 = (v453[0].i64[1] << 44) | (v453[0].i64[0] << 46);
          }
          goto LABEL_409;
        case 2uLL:
          uint64_t v331 = 0;
          uint64_t v332 = 0;
          uint64_t v333 = 0;
          uint64_t v334 = 0;
          memset(v453, 0, 24);
          memset(v460, 0, 24);
          uint64_t v335 = **(void **)(v158 + 8);
          uint64_t v336 = v335 + 48 * *(unsigned int *)a2;
          unsigned int v337 = *(unsigned __int8 *)(v336 + 4);
          unsigned int v338 = *((_DWORD *)a2 + 6);
          if (v338 == v337) {
            goto LABEL_394;
          }
          uint64_t v339 = 0;
          char v340 = 0;
          unsigned int v341 = 0;
          unsigned int v342 = (*(_DWORD *)(v336 + 16) >> 1) & 7;
          uint64_t v343 = *((void *)a2 + 2);
          uint64_t v344 = (void *)(v335 + 48 * *(unsigned int *)a2 + 40);
          do
          {
            int v345 = *(unsigned __int8 *)(v343 + 16 * v337);
            if (v345 == 1 && (*(_DWORD *)(v343 + 16 * v337 + 8) | 2) == 2
              || (*(unsigned char *)(*v344 + 6 * v337 + 2) & 2) != 0)
            {
              goto LABEL_391;
            }
            if (!((v345 != 2) | v340 & 1))
            {
              char v340 = 1;
LABEL_391:
              uint64_t v346 = v339;
              goto LABEL_392;
            }
            v453[0].i64[v339] = (*((_DWORD *)&v454 + v337) - (_BYTE)v339) & 3;
            uint64_t v346 = (v339 + 1);
            if ((v345 == 1 || v345 == 5) && v341 < v342)
            {
              v460[0].i64[v339] = *(void *)(v343 + 16 * ++v337 + 8);
              ++v341;
            }
LABEL_392:
            ++v337;
            uint64_t v339 = v346;
          }
          while (v337 != v338);
          uint64_t v332 = v460[0].i64[1];
          uint64_t v333 = v460[0].i64[0];
          uint64_t v331 = v460[1].i64[0];
          uint64_t v334 = (v453[0].i64[1] << 44) | (v453[1].i64[0] << 42) | (v453[0].i64[0] << 46);
LABEL_394:
          unint64_t v194 = v334 | (v331 << 52) & 0x80000000000000 | (v332 << 51) & 0x40000000000000 | (v333 << 50) & 0x20000000000000 | ((unint64_t)(v332 | v331 | v333) << 31) & 0xE000000000;
LABEL_409:
          unint64_t v359 = v194 | v176;
          for (uint64_t k = 56; k != -8; k -= 8)
          {
            if ((unint64_t)(v168 + 1) > *((void *)&v451 + 1)) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *((unsigned char *)v450 + v168) = ((255 << k) & v359) >> k;
            LODWORD(v361) = v451;
            uint64_t v168 = v451 + 1;
            *(void *)&long long v451 = v451 + 1;
          }
          if (v168 < 3)
          {
            uint64_t v363 = v168;
          }
          else
          {
            uint64_t v362 = (v361 - 1);
            uint64_t v361 = v361;
            while (1)
            {
              uint64_t v363 = v451;
              if (*((unsigned __int8 *)v450 + v361) | *((unsigned __int8 *)v450 + v362)) {
                break;
              }
              *(void *)&long long v451 = v451 - 2;
              *((char *)v450 + v363 - 3) &= ~1u;
              LODWORD(v168) = v168 - 2;
              v361 -= 2;
              v362 -= 2;
              if (v168 <= 2)
              {
                uint64_t v363 = v451;
                break;
              }
            }
            LODWORD(v168) = v363;
          }
          *(_DWORD *)(*(void *)(v158 + 24) + 144) += v168;
          if (v363)
          {
            uint64_t v364 = (char *)v450;
            do
            {
              char v365 = *v364;
              v366 = (char *)*((void *)a3 + 4);
              if ((unint64_t)v366 >= *((void *)a3 + 3))
              {
                llvm::raw_ostream::write(a3, v365);
              }
              else
              {
                *((void *)a3 + 4) = v366 + 1;
                char *v366 = v365;
              }
              ++v364;
              --v363;
            }
            while (v363);
          }
LABEL_427:
          if (v450 != v452) {
            free(v450);
          }
          return;
        case 3uLL:
          unint64_t v194 = 0;
          memset(v453, 0, 24);
          memset(v460, 0, 24);
          uint64_t v347 = **(void **)(v158 + 8);
          uint64_t v348 = v347 + 48 * *(unsigned int *)a2;
          unsigned int v349 = *(unsigned __int8 *)(v348 + 4);
          unsigned int v350 = *((_DWORD *)a2 + 6);
          if (v350 == v349) {
            goto LABEL_409;
          }
          uint64_t v351 = 0;
          char v352 = 0;
          unsigned int v353 = 0;
          unsigned int v354 = (*(_DWORD *)(v348 + 16) >> 1) & 7;
          uint64_t v355 = *((void *)a2 + 2);
          uint64_t v356 = (void *)(v347 + 48 * *(unsigned int *)a2 + 40);
          break;
        default:
          uint64_t v188 = **(void **)(v158 + 8);
          unsigned int v189 = *(unsigned __int8 *)(v188 + 48 * *(unsigned int *)a2 + 4);
          unsigned int v190 = *((_DWORD *)a2 + 6);
          if (v190 == v189)
          {
            unint64_t v191 = 0;
            uint64_t v192 = 0;
            uint64_t v193 = 0;
          }
          else
          {
            uint64_t v193 = 0;
            int v416 = 0;
            char v417 = 0;
            uint64_t v192 = 0;
            unint64_t v191 = 0;
            uint64_t v418 = *((void *)a2 + 2);
            do
            {
              int v419 = *(unsigned __int8 *)(v418 + 16 * v189);
              if ((v419 != 1 || (*(_DWORD *)(v418 + 16 * v189 + 8) | 2) != 2)
                && (*(unsigned char *)(*(void *)(v188 + 48 * *(unsigned int *)a2 + 40) + 6 * v189 + 2) & 2) == 0)
              {
                if ((v419 != 2) | v417 & 1)
                {
                  uint64_t v192 = (*((_DWORD *)&v454 + v189) - (_BYTE)v416) & 3;
                  if (v419 == 2)
                  {
                    if (*(unsigned char *)(v418 + 16 * v189 + 12)) {
                      uint64_t v193 = 1;
                    }
                    ++v416;
                  }
                  else
                  {
                    ++v416;
                    if ((v419 | 4) == 5) {
                      unint64_t v191 = *(void *)(v418 + 16 * ++v189 + 8);
                    }
                  }
                }
                else
                {
                  char v417 = 1;
                }
              }
              ++v189;
            }
            while (v189 != v190);
          }
          unint64_t v194 = (v191 << 37) & 0x8000000000 | (((v191 >> 1) & 1) << 55) | (v192 << 46) | (v193 << 50);
          goto LABEL_409;
      }
      break;
  }
  while (1)
  {
    int v357 = *(unsigned __int8 *)(v355 + 16 * v349);
    if ((v357 != 1 || (*(_DWORD *)(v355 + 16 * v349 + 8) | 2) != 2) && (*(unsigned char *)(*v356 + 6 * v349 + 2) & 2) == 0)
    {
      if ((v357 != 2) | v352 & 1)
      {
        v460[0].i64[v351] = (*((_DWORD *)&v454 + v349) - (_BYTE)v351) & 3;
        uint64_t v358 = (v351 + 1);
        if ((v357 == 1 || v357 == 5) && v353 < v354)
        {
          v453[0].i64[v351] = *(void *)(v355 + 16 * ++v349 + 8);
          ++v353;
        }
        goto LABEL_407;
      }
      char v352 = 1;
    }
    uint64_t v358 = v351;
LABEL_407:
    ++v349;
    uint64_t v351 = v358;
    if (v349 == v350)
    {
      unint64_t v194 = (v453[0].i64[1] << 52) & 0x20000000000000 | (v460[0].i64[0] << 46) | (v460[0].i64[1] << 44) | (v460[1].i64[0] << 42);
      goto LABEL_409;
    }
  }
}

unint64_t sub_1CBC646F8(uint64_t a1, llvm::MCInst *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)a2;
  unint64_t v8 = qword_1CDC7FB70[v5];
  switch((int)v5)
  {
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 386:
    case 387:
    case 392:
    case 393:
    case 398:
    case 399:
    case 464:
    case 465:
    case 466:
    case 467:
    case 740:
    case 741:
    case 742:
    case 743:
    case 744:
    case 745:
    case 945:
    case 946:
    case 947:
    case 948:
    case 949:
    case 950:
    case 951:
    case 952:
    case 953:
    case 954:
    case 955:
    case 956:
    case 957:
    case 958:
    case 959:
    case 960:
    case 961:
    case 962:
    case 963:
    case 964:
    case 965:
    case 966:
    case 967:
    case 968:
    case 969:
    case 970:
    case 971:
    case 972:
    case 973:
    case 974:
    case 975:
    case 976:
    case 977:
    case 978:
    case 979:
    case 980:
    case 981:
    case 982:
    case 983:
    case 984:
    case 985:
    case 986:
    case 987:
    case 988:
    case 989:
    case 990:
    case 991:
    case 992:
    case 993:
    case 994:
    case 995:
    case 996:
    case 997:
    case 998:
    case 999:
    case 1000:
    case 1001:
    case 1002:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1125:
    case 1126:
    case 1127:
    case 1128:
    case 1129:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1140:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
    case 1145:
    case 1146:
    case 1147:
    case 1148:
    case 1149:
    case 1150:
    case 1151:
    case 1152:
    case 1153:
    case 1154:
    case 1155:
    case 1156:
    case 1157:
    case 1158:
    case 1159:
    case 1160:
    case 1305:
    case 1306:
    case 1307:
    case 1308:
    case 1309:
    case 1310:
    case 1311:
    case 1312:
    case 1313:
    case 1314:
    case 1315:
    case 1316:
    case 1317:
    case 1318:
    case 1319:
    case 1320:
    case 1321:
    case 1322:
    case 1323:
    case 1324:
    case 1325:
    case 1326:
    case 1327:
    case 1328:
    case 2493:
    case 2494:
    case 2495:
    case 2496:
    case 2497:
    case 2498:
    case 2501:
    case 2590:
    case 2591:
    case 2592:
    case 2593:
    case 2594:
    case 2595:
    case 2596:
    case 2597:
    case 2598:
    case 2599:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
    case 2605:
    case 2606:
    case 2607:
    case 2608:
    case 2609:
    case 2610:
    case 2611:
    case 2612:
    case 2613:
    case 2614:
    case 2615:
    case 2616:
    case 2617:
    case 2618:
    case 2619:
    case 2620:
    case 2621:
    case 2622:
    case 2623:
    case 2624:
    case 2625:
    case 2626:
    case 2627:
    case 2628:
    case 2629:
    case 2630:
    case 2631:
    case 2632:
    case 2633:
    case 2634:
    case 2635:
    case 2636:
    case 2637:
    case 2638:
    case 2639:
    case 2640:
    case 2641:
    case 2642:
    case 2643:
    case 2644:
    case 2645:
    case 2646:
    case 2647:
    case 2648:
    case 2649:
    case 2650:
    case 2651:
    case 2652:
    case 2653:
    case 2654:
    case 2655:
    case 2656:
    case 2657:
    case 2658:
    case 2659:
    case 2660:
    case 2661:
    case 2662:
    case 2663:
    case 2664:
    case 2665:
    case 2666:
    case 2667:
    case 2668:
    case 2669:
    case 2670:
    case 2671:
    case 2672:
    case 2673:
    case 2674:
    case 2675:
    case 2676:
    case 2677:
    case 2678:
    case 2679:
    case 2680:
    case 2681:
    case 2682:
    case 2683:
    case 2684:
    case 2685:
    case 2686:
    case 2687:
    case 2688:
    case 2689:
    case 2690:
    case 2691:
    case 2692:
    case 2693:
    case 2694:
    case 2695:
    case 2696:
    case 2697:
    case 2698:
    case 2699:
    case 2700:
    case 2701:
    case 2702:
    case 2703:
    case 2704:
    case 2705:
    case 2706:
    case 2707:
    case 2708:
    case 2709:
    case 2710:
    case 2711:
    case 2712:
    case 2713:
    case 2714:
    case 2715:
    case 2716:
    case 2717:
    case 2718:
    case 2719:
    case 2720:
    case 2721:
    case 2722:
    case 2723:
    case 2724:
    case 2725:
    case 2726:
    case 2727:
    case 2728:
    case 2729:
    case 2730:
    case 2731:
    case 2732:
    case 2733:
    case 2734:
    case 2735:
    case 2736:
    case 2737:
    case 2738:
    case 2739:
    case 2740:
    case 2741:
    case 2742:
    case 2743:
    case 2744:
    case 2745:
    case 2746:
    case 2747:
    case 2748:
    case 2749:
    case 2750:
    case 2751:
    case 2752:
    case 2753:
    case 2754:
    case 2755:
    case 2756:
    case 2757:
    case 2758:
    case 2759:
    case 2760:
    case 2761:
    case 2762:
    case 2763:
    case 2764:
    case 2765:
    case 2766:
    case 2767:
    case 2768:
    case 2769:
    case 2770:
    case 2771:
    case 2772:
    case 2773:
    case 2774:
    case 2775:
    case 2776:
    case 2777:
    case 2778:
    case 2779:
    case 2780:
    case 2781:
    case 2782:
    case 2783:
    case 2784:
    case 2785:
    case 2786:
    case 2787:
    case 2788:
    case 2789:
    case 2790:
    case 2791:
    case 2792:
    case 2793:
    case 2794:
    case 2795:
    case 2796:
    case 2797:
    case 2798:
    case 2799:
    case 2800:
    case 2801:
    case 2802:
    case 2803:
    case 2804:
    case 2805:
    case 2806:
    case 2807:
    case 2808:
    case 2809:
    case 2810:
    case 2811:
    case 2812:
    case 2813:
    case 2814:
    case 2815:
    case 2816:
    case 2817:
    case 2818:
    case 2819:
    case 2820:
    case 2821:
    case 2822:
    case 2823:
    case 2824:
    case 2825:
    case 2826:
    case 2827:
    case 2828:
    case 2829:
    case 2830:
    case 2831:
    case 2832:
    case 2833:
    case 2834:
    case 2835:
    case 2836:
    case 2837:
    case 2838:
    case 2839:
    case 2840:
    case 2841:
    case 2842:
    case 2843:
    case 2844:
    case 2845:
    case 2846:
    case 2847:
    case 2848:
    case 2849:
    case 2850:
    case 2851:
    case 2852:
    case 2853:
    case 2854:
    case 2855:
    case 2856:
    case 2857:
    case 2858:
    case 2859:
    case 2860:
    case 2861:
    case 2862:
    case 2863:
    case 2864:
    case 2865:
    case 2866:
    case 2867:
    case 2868:
    case 2869:
    case 2870:
    case 2871:
    case 2872:
    case 2873:
    case 2874:
    case 2875:
    case 2876:
    case 2877:
    case 2878:
    case 2879:
    case 2880:
    case 2881:
    case 2882:
    case 2883:
    case 2884:
    case 2885:
    case 2886:
    case 2887:
    case 2888:
    case 2889:
    case 2890:
    case 2891:
    case 2892:
    case 2893:
    case 2894:
    case 2895:
    case 2896:
    case 2897:
    case 2898:
    case 2899:
    case 2900:
    case 2901:
    case 2905:
    case 2906:
    case 2907:
    case 2908:
    case 2909:
    case 2910:
    case 2911:
    case 2912:
    case 2913:
    case 2914:
    case 2915:
    case 2916:
    case 2917:
    case 2918:
    case 2919:
    case 2920:
    case 2921:
    case 2922:
    case 2923:
    case 2924:
    case 2925:
    case 2926:
    case 2927:
    case 2928:
    case 2929:
    case 2930:
    case 2931:
    case 2932:
    case 2933:
    case 2934:
    case 2935:
    case 2936:
    case 2937:
    case 2938:
    case 2939:
    case 2940:
    case 2941:
    case 2942:
    case 2943:
    case 2944:
    case 2945:
    case 2946:
    case 2947:
    case 2948:
    case 2949:
    case 2950:
    case 2951:
    case 2952:
    case 2953:
    case 2954:
    case 2955:
    case 2956:
    case 2957:
    case 2958:
    case 2959:
    case 2960:
    case 2961:
    case 2962:
    case 2963:
    case 2964:
    case 2965:
    case 2966:
    case 2967:
    case 2968:
    case 2969:
    case 2970:
    case 2971:
    case 2972:
    case 2973:
    case 2974:
    case 2975:
    case 2976:
    case 2977:
    case 2978:
    case 2979:
    case 2980:
    case 2981:
    case 2982:
    case 2983:
    case 2984:
    case 2985:
    case 2986:
    case 2987:
    case 2988:
    case 2989:
    case 2990:
    case 2991:
    case 2992:
    case 2993:
    case 2994:
    case 2995:
    case 2996:
    case 2997:
    case 2998:
    case 2999:
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3006:
    case 3007:
    case 3008:
    case 3009:
    case 3010:
    case 3011:
    case 3012:
    case 3013:
    case 3014:
    case 3015:
    case 3016:
    case 3017:
    case 3018:
    case 3019:
    case 3020:
    case 3021:
    case 3022:
    case 3023:
    case 3024:
    case 3025:
    case 3026:
    case 3027:
    case 3028:
    case 3029:
    case 3030:
    case 3031:
    case 3032:
    case 3033:
    case 3034:
    case 3035:
    case 3036:
    case 3037:
    case 3038:
    case 3039:
    case 3040:
    case 3041:
    case 3042:
    case 3043:
    case 3044:
    case 3045:
    case 3046:
    case 3047:
    case 3048:
    case 3049:
    case 3050:
    case 3051:
    case 3052:
    case 3053:
    case 3054:
    case 3055:
    case 3056:
    case 3057:
    case 3058:
    case 3059:
    case 3060:
    case 3061:
    case 3062:
    case 3063:
    case 3064:
    case 3065:
    case 3066:
    case 3067:
    case 3068:
    case 3069:
    case 3070:
    case 3071:
    case 3072:
    case 3073:
    case 3074:
    case 3075:
    case 3076:
    case 3077:
    case 3078:
    case 3079:
    case 3080:
    case 3081:
    case 3082:
    case 3083:
    case 3084:
    case 3085:
    case 3086:
    case 3087:
    case 3088:
    case 3089:
    case 3090:
    case 3091:
    case 3092:
    case 3093:
    case 3094:
    case 3095:
    case 3096:
    case 3097:
    case 3098:
    case 3099:
    case 3100:
    case 3101:
    case 3102:
    case 3103:
    case 3104:
    case 3105:
    case 3106:
    case 3107:
    case 3108:
    case 3109:
    case 3110:
    case 3111:
    case 3112:
    case 3113:
    case 3114:
    case 3115:
    case 3116:
    case 3117:
    case 3118:
    case 3119:
    case 3120:
    case 3121:
    case 3122:
    case 3123:
    case 3124:
    case 3125:
    case 3126:
    case 3127:
    case 3128:
    case 3129:
    case 3130:
    case 3131:
    case 3132:
    case 3133:
    case 3134:
    case 3135:
    case 3136:
    case 3137:
    case 3138:
    case 3139:
    case 3140:
    case 3141:
    case 3142:
    case 3143:
    case 3144:
    case 3145:
    case 3146:
    case 3147:
    case 3148:
    case 3149:
    case 3150:
    case 3151:
    case 3152:
    case 3153:
    case 3154:
    case 3155:
    case 3156:
    case 3157:
    case 3158:
    case 3159:
    case 3160:
    case 3161:
    case 3162:
    case 3163:
    case 3164:
    case 3165:
    case 3166:
    case 3167:
    case 3168:
    case 3169:
    case 3170:
    case 3171:
    case 3172:
    case 3173:
    case 3174:
    case 3175:
    case 3176:
    case 3177:
    case 3178:
    case 3179:
    case 3180:
    case 3181:
    case 3182:
    case 3183:
    case 3184:
    case 3185:
    case 3186:
    case 3187:
    case 3188:
    case 3189:
    case 3190:
    case 3191:
    case 3192:
    case 3193:
    case 3194:
    case 3195:
    case 3196:
    case 3197:
    case 3198:
    case 3199:
    case 3200:
    case 3201:
    case 3202:
    case 3203:
    case 3204:
    case 3205:
    case 3206:
    case 3207:
    case 3208:
    case 3209:
    case 3210:
    case 3211:
    case 3212:
    case 3213:
    case 3214:
    case 3215:
    case 3216:
    case 3217:
    case 3218:
    case 3219:
    case 3220:
    case 3221:
    case 3222:
    case 3223:
    case 3224:
    case 3225:
    case 3226:
    case 3227:
    case 3228:
    case 3229:
    case 3230:
    case 3231:
    case 3232:
    case 3233:
    case 3234:
    case 3235:
    case 3236:
    case 3237:
    case 3238:
    case 3239:
    case 3240:
    case 3241:
    case 3242:
    case 3243:
    case 3244:
    case 3245:
    case 3246:
    case 3247:
    case 3248:
    case 3249:
    case 3250:
    case 3251:
    case 3252:
    case 3253:
    case 3254:
    case 3255:
    case 3256:
    case 3257:
    case 3258:
    case 3259:
    case 3260:
    case 3261:
    case 3262:
    case 3263:
    case 3264:
    case 3265:
    case 3266:
    case 3267:
    case 3268:
    case 3269:
    case 3270:
    case 3271:
    case 3272:
    case 3273:
    case 3274:
    case 3275:
    case 3276:
    case 3277:
    case 3278:
    case 3279:
    case 3280:
    case 3281:
    case 3282:
    case 3283:
    case 3284:
    case 3285:
    case 3286:
    case 3287:
    case 3288:
    case 3289:
    case 3290:
    case 3291:
    case 3292:
    case 3293:
    case 3294:
    case 3295:
    case 3296:
    case 3297:
    case 3298:
    case 3299:
    case 3300:
    case 3301:
    case 3302:
    case 3303:
    case 3304:
    case 3305:
    case 3306:
    case 3307:
    case 3308:
    case 3309:
    case 3310:
    case 3311:
    case 3312:
    case 3313:
    case 3314:
    case 3315:
    case 3316:
    case 3317:
    case 3318:
    case 3319:
    case 3320:
    case 3321:
    case 3322:
    case 3323:
    case 3324:
    case 3325:
    case 3326:
    case 3327:
    case 3328:
    case 3329:
    case 3330:
    case 3331:
    case 3332:
    case 3333:
    case 3334:
    case 3335:
    case 3336:
    case 3337:
    case 3338:
    case 3339:
    case 3340:
    case 3341:
    case 3342:
    case 3343:
    case 3344:
    case 3345:
    case 3346:
    case 3347:
    case 3348:
    case 3349:
    case 3350:
    case 3351:
    case 3352:
    case 3353:
    case 3354:
    case 3355:
    case 3356:
    case 3357:
    case 3358:
    case 3359:
    case 3360:
    case 3361:
    case 3362:
    case 3363:
    case 3364:
    case 3365:
    case 3366:
    case 3367:
    case 3368:
    case 3369:
    case 3370:
    case 3371:
    case 3372:
    case 3373:
    case 3374:
    case 3375:
    case 3376:
    case 3377:
    case 3378:
    case 3379:
    case 3380:
    case 3381:
    case 3382:
    case 3383:
    case 3384:
    case 3385:
    case 3386:
    case 3387:
    case 3388:
    case 3389:
    case 3390:
    case 3391:
    case 3392:
    case 3393:
    case 3394:
    case 3395:
    case 3396:
    case 3397:
    case 3398:
    case 3399:
    case 3400:
    case 3401:
    case 3402:
    case 3403:
    case 3404:
    case 3405:
    case 3406:
    case 3407:
    case 3408:
    case 3409:
    case 3410:
    case 3411:
    case 3412:
    case 3413:
    case 3414:
    case 3415:
    case 3416:
    case 3417:
    case 3418:
    case 3419:
    case 3420:
    case 3421:
    case 3422:
    case 3423:
    case 3424:
    case 3425:
    case 3426:
    case 3427:
    case 3428:
    case 3429:
    case 3430:
    case 3431:
    case 3432:
    case 3433:
    case 3434:
    case 3435:
    case 3436:
    case 3437:
    case 3438:
    case 3439:
    case 3440:
    case 3441:
    case 3442:
    case 3443:
    case 3444:
    case 3445:
    case 3446:
    case 3447:
    case 3448:
    case 3449:
    case 3450:
    case 3451:
    case 3452:
    case 3453:
    case 3454:
    case 3455:
    case 3456:
    case 3457:
    case 3458:
    case 3459:
    case 3460:
    case 3461:
    case 3462:
    case 3463:
    case 3464:
    case 3465:
    case 3466:
    case 3467:
    case 3468:
    case 3469:
    case 3470:
    case 3471:
    case 3472:
    case 3473:
    case 3474:
    case 3475:
    case 3476:
    case 3477:
    case 3478:
    case 3479:
    case 3480:
    case 3481:
    case 3482:
    case 3483:
    case 3484:
    case 3485:
    case 3486:
    case 3487:
    case 3488:
    case 3489:
    case 3490:
    case 3491:
    case 3492:
    case 3493:
    case 3494:
    case 3495:
    case 3496:
    case 3497:
    case 3498:
    case 3499:
    case 3500:
    case 3501:
    case 3502:
    case 3503:
    case 3504:
    case 3505:
    case 3506:
    case 3507:
    case 3508:
    case 3509:
    case 3510:
    case 3511:
    case 3512:
    case 3513:
    case 3514:
    case 3515:
    case 3516:
    case 3517:
    case 3518:
    case 3519:
    case 3520:
    case 3521:
    case 3522:
    case 3523:
    case 3524:
    case 3525:
    case 3526:
    case 3527:
    case 3528:
    case 3529:
    case 3530:
    case 3531:
    case 3532:
    case 3533:
    case 3534:
    case 3535:
    case 3536:
    case 3537:
    case 3538:
    case 3539:
    case 3540:
    case 3541:
    case 3542:
    case 3543:
    case 3544:
    case 3545:
    case 3546:
    case 3547:
    case 3548:
    case 3549:
    case 3550:
    case 3551:
    case 3552:
    case 3553:
    case 3554:
    case 3555:
    case 3556:
    case 3557:
    case 3558:
    case 3559:
    case 3560:
    case 3561:
    case 3562:
    case 3563:
    case 3564:
    case 3565:
    case 3566:
    case 3567:
    case 3568:
    case 3569:
    case 3570:
    case 3571:
    case 3572:
    case 3573:
    case 3574:
    case 3575:
    case 3576:
    case 3577:
    case 3578:
    case 3579:
    case 3580:
    case 3581:
    case 3582:
    case 3583:
    case 3584:
    case 3585:
    case 3586:
    case 3587:
    case 3588:
    case 3589:
    case 3590:
    case 3591:
    case 3592:
    case 3593:
    case 3594:
    case 3595:
    case 3596:
    case 3597:
    case 3598:
    case 3599:
    case 3600:
    case 3601:
    case 3602:
    case 3603:
    case 3604:
    case 3605:
    case 3606:
    case 3607:
    case 3608:
    case 3609:
    case 3610:
    case 3611:
    case 3612:
    case 3613:
    case 3614:
    case 3615:
    case 3616:
    case 3617:
    case 3618:
    case 3619:
    case 3620:
    case 3621:
    case 3622:
    case 3623:
    case 3624:
    case 3625:
    case 3626:
    case 3627:
    case 3628:
    case 3629:
    case 3630:
    case 3631:
    case 3632:
    case 3633:
    case 3634:
    case 3635:
    case 3636:
    case 3637:
    case 3638:
    case 3639:
    case 3640:
    case 3641:
    case 3642:
    case 3643:
    case 3644:
    case 3645:
    case 3646:
    case 3647:
    case 3648:
    case 3649:
    case 3650:
    case 3651:
    case 3652:
    case 3653:
    case 3654:
    case 3655:
    case 3656:
    case 3657:
    case 3658:
    case 3659:
    case 3660:
    case 3661:
    case 3662:
    case 3663:
    case 3664:
    case 3665:
    case 3666:
    case 3667:
    case 3668:
    case 3669:
    case 3670:
    case 3671:
    case 3672:
    case 3673:
    case 3674:
    case 3675:
    case 3676:
    case 3677:
    case 3678:
    case 3679:
    case 3680:
    case 3681:
    case 3682:
    case 3683:
    case 3684:
    case 3685:
    case 3686:
    case 3687:
    case 3688:
    case 3689:
    case 3690:
    case 3691:
    case 3692:
    case 3693:
    case 3694:
    case 3695:
    case 3696:
    case 3697:
    case 3698:
    case 3699:
    case 3700:
    case 3701:
    case 3702:
    case 3703:
    case 3704:
    case 3705:
    case 3706:
    case 3707:
    case 3708:
    case 3709:
    case 3710:
    case 3711:
    case 3712:
    case 3713:
    case 3714:
    case 3715:
    case 3716:
    case 3717:
    case 3718:
    case 3719:
    case 3720:
    case 3721:
    case 3722:
    case 3723:
    case 3724:
    case 3725:
    case 3726:
    case 3727:
    case 3728:
    case 3729:
    case 3730:
    case 3731:
    case 3732:
    case 3733:
    case 3734:
    case 3735:
    case 3736:
    case 3737:
    case 3738:
    case 3739:
    case 3740:
    case 3741:
    case 3742:
    case 3743:
    case 3744:
    case 3769:
    case 3770:
    case 3771:
    case 3772:
    case 3773:
    case 3774:
    case 3775:
    case 3776:
    case 3777:
    case 3778:
    case 3779:
    case 3780:
    case 3781:
    case 3782:
    case 3783:
    case 3784:
    case 3785:
    case 3786:
    case 3787:
    case 3788:
    case 3789:
    case 3790:
    case 3791:
    case 3792:
    case 3793:
    case 3794:
    case 3795:
    case 3796:
    case 3797:
    case 3798:
    case 3799:
    case 3800:
    case 3801:
    case 3802:
    case 3803:
    case 3804:
    case 3805:
    case 3806:
    case 3807:
    case 3808:
    case 3809:
    case 3810:
    case 3811:
    case 3812:
    case 3813:
    case 3814:
    case 3815:
    case 3816:
    case 3817:
    case 3818:
    case 3819:
    case 3820:
    case 3821:
    case 3822:
    case 3823:
    case 3824:
    case 3825:
    case 3826:
    case 3827:
    case 3828:
    case 3829:
    case 3830:
    case 3831:
    case 3832:
    case 3833:
    case 3834:
    case 3835:
    case 3836:
    case 3837:
    case 3838:
    case 3839:
    case 3840:
    case 3841:
    case 3842:
    case 3843:
    case 3844:
    case 3845:
    case 3846:
    case 3847:
    case 3848:
    case 3849:
    case 3850:
    case 3851:
    case 3852:
    case 3853:
    case 3854:
    case 3855:
    case 3856:
    case 3857:
    case 3858:
    case 3859:
    case 3860:
    case 3861:
    case 3862:
    case 3863:
    case 3864:
    case 3865:
    case 3866:
    case 3867:
    case 3868:
    case 3869:
    case 3870:
    case 3871:
    case 3872:
    case 3873:
    case 3874:
    case 3875:
    case 3876:
    case 3877:
    case 3878:
    case 3879:
    case 3880:
    case 3881:
    case 3882:
    case 3883:
    case 3884:
    case 3885:
    case 3886:
    case 3887:
    case 3888:
    case 3889:
    case 3890:
    case 3891:
    case 3892:
    case 3893:
    case 3894:
    case 3895:
    case 3896:
    case 3897:
    case 3898:
    case 3899:
    case 3900:
    case 3901:
    case 3902:
    case 3903:
    case 3904:
    case 3905:
    case 3906:
    case 3907:
    case 3908:
    case 3909:
    case 3910:
    case 3911:
    case 3912:
    case 3913:
    case 3914:
    case 3915:
    case 3916:
    case 3917:
    case 3918:
    case 3919:
    case 3920:
    case 3921:
    case 3922:
    case 3923:
    case 3924:
    case 3925:
    case 3926:
    case 3927:
    case 3928:
    case 3929:
    case 3930:
    case 3931:
    case 3932:
    case 3933:
    case 3934:
    case 3935:
    case 3936:
    case 3937:
    case 3938:
    case 3939:
    case 3940:
    case 3941:
    case 3942:
    case 3943:
    case 3944:
    case 3945:
    case 3946:
    case 3947:
    case 3948:
    case 3949:
    case 3950:
    case 3951:
    case 3952:
    case 3953:
    case 3954:
    case 3955:
    case 3956:
    case 3957:
    case 3958:
    case 3959:
    case 3960:
    case 3961:
    case 3962:
    case 3963:
    case 3964:
    case 3965:
    case 3966:
    case 3967:
    case 3968:
    case 3969:
    case 3970:
    case 3971:
    case 3972:
    case 3973:
    case 3974:
    case 3975:
    case 3976:
    case 3977:
    case 3978:
    case 3979:
    case 3980:
    case 3981:
    case 3982:
    case 3983:
    case 3984:
    case 3985:
    case 3986:
    case 3987:
    case 3988:
    case 3989:
    case 3990:
    case 3991:
    case 3992:
    case 3993:
    case 3994:
    case 3995:
    case 3996:
    case 3997:
    case 3998:
    case 3999:
    case 4000:
    case 4001:
    case 4002:
    case 4003:
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4008:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4015:
    case 4016:
    case 4017:
    case 4018:
    case 4019:
    case 4020:
    case 4021:
    case 4022:
    case 4023:
    case 4024:
    case 4025:
    case 4026:
    case 4027:
    case 4028:
    case 4029:
    case 4030:
    case 4031:
    case 4032:
    case 4033:
    case 4034:
    case 4035:
    case 4036:
    case 4037:
    case 4038:
    case 4039:
    case 4040:
    case 4041:
    case 4042:
    case 4043:
    case 4044:
    case 4045:
    case 4046:
    case 4047:
    case 4048:
    case 4049:
    case 4050:
    case 4051:
    case 4052:
    case 4053:
    case 4054:
    case 4055:
    case 4056:
    case 4057:
    case 4058:
    case 4059:
    case 4060:
    case 4061:
    case 4062:
    case 4063:
    case 4064:
    case 4065:
    case 4066:
    case 4067:
    case 4068:
    case 4069:
    case 4070:
    case 4071:
    case 4072:
    case 4073:
    case 4074:
    case 4075:
    case 4076:
    case 4077:
    case 4078:
    case 4079:
    case 4080:
    case 4081:
    case 4082:
    case 4083:
    case 4084:
    case 4085:
    case 4086:
    case 4087:
    case 4088:
    case 4089:
    case 4090:
    case 4091:
    case 4092:
    case 4093:
    case 4094:
    case 4095:
    case 4096:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 4105:
    case 4106:
    case 4107:
    case 4108:
    case 4109:
    case 4110:
    case 4111:
    case 4112:
    case 4113:
    case 4114:
    case 4115:
    case 4116:
    case 4117:
    case 4118:
    case 4119:
    case 4120:
    case 4121:
    case 4122:
    case 4123:
    case 4124:
    case 4125:
    case 4126:
    case 4127:
    case 4128:
    case 4129:
    case 4130:
    case 4131:
    case 4132:
    case 4133:
    case 4134:
    case 4135:
    case 4136:
    case 4137:
    case 4138:
    case 4139:
    case 4140:
    case 4141:
    case 4142:
    case 4143:
    case 4144:
    case 4145:
    case 4146:
    case 4147:
    case 4148:
    case 4149:
    case 4150:
    case 4151:
    case 4152:
    case 4153:
    case 4154:
    case 4155:
    case 4156:
    case 4157:
    case 4158:
    case 4159:
    case 4160:
    case 4161:
    case 4162:
    case 4163:
    case 4164:
    case 4165:
    case 4166:
    case 4167:
    case 4168:
    case 4169:
    case 4170:
    case 4171:
    case 4172:
    case 4173:
    case 4174:
    case 4175:
    case 4176:
    case 4177:
    case 4178:
    case 4179:
    case 4180:
    case 4181:
    case 4182:
    case 4183:
    case 4184:
    case 4185:
    case 4186:
    case 4187:
    case 4188:
    case 4189:
    case 4190:
    case 4191:
    case 4192:
    case 4193:
    case 4194:
    case 4195:
    case 4196:
    case 4197:
    case 4198:
    case 4199:
    case 4200:
    case 4201:
    case 4202:
    case 4203:
    case 4204:
    case 4205:
    case 4206:
    case 4207:
    case 4208:
    case 4209:
    case 4210:
    case 4211:
    case 4212:
    case 4213:
    case 4214:
    case 4215:
    case 4216:
    case 4217:
    case 4218:
    case 4219:
    case 4220:
    case 4221:
    case 4222:
    case 4223:
    case 4224:
    case 4225:
    case 4226:
    case 4227:
    case 4228:
    case 4229:
    case 4230:
    case 4231:
    case 4232:
    case 4233:
    case 4234:
    case 4235:
    case 4236:
    case 4237:
    case 4238:
    case 4239:
    case 4240:
    case 4241:
    case 4242:
    case 4243:
    case 4244:
    case 4245:
    case 4246:
    case 4247:
    case 4248:
    case 4249:
    case 4250:
    case 4251:
    case 4252:
    case 4253:
    case 4254:
    case 4255:
    case 4256:
    case 4257:
    case 4258:
    case 4259:
    case 4260:
    case 4261:
    case 4262:
    case 4263:
    case 4264:
    case 4265:
    case 4266:
    case 4267:
    case 4268:
    case 4269:
    case 4270:
    case 4271:
    case 4272:
    case 4273:
    case 4274:
    case 4275:
    case 4276:
    case 4277:
    case 4278:
    case 4279:
    case 4280:
    case 4281:
    case 4282:
    case 4283:
    case 4284:
    case 4285:
    case 4286:
    case 4287:
    case 4288:
    case 4289:
    case 4290:
    case 4291:
    case 4292:
    case 4293:
    case 4294:
    case 4295:
    case 4296:
    case 4297:
    case 4298:
    case 4299:
    case 4300:
    case 4301:
    case 4302:
    case 4303:
    case 4304:
    case 4305:
    case 4306:
    case 4307:
    case 4308:
    case 4309:
    case 4310:
    case 4311:
    case 4312:
    case 4313:
    case 4314:
    case 4315:
    case 4316:
    case 4317:
    case 4318:
    case 4319:
    case 4320:
    case 4321:
    case 4322:
    case 4323:
    case 4324:
    case 4325:
    case 4326:
    case 4327:
    case 4328:
    case 4329:
    case 4330:
    case 4331:
    case 4332:
    case 4333:
    case 4334:
    case 4335:
    case 4336:
    case 4337:
    case 4338:
    case 4339:
    case 4340:
    case 4341:
    case 4342:
    case 4343:
    case 4344:
    case 4345:
    case 4346:
    case 4347:
    case 4348:
    case 4349:
    case 4350:
    case 4351:
    case 4352:
    case 4353:
    case 4354:
    case 4355:
    case 4356:
    case 4357:
    case 4358:
    case 4359:
    case 4360:
    case 4361:
    case 4362:
    case 4363:
    case 4364:
    case 4365:
    case 4366:
    case 4367:
    case 4368:
    case 4369:
    case 4370:
    case 4371:
    case 4372:
    case 4373:
    case 4374:
    case 4375:
    case 4376:
    case 4377:
    case 4378:
    case 4379:
    case 4380:
    case 4381:
    case 4382:
    case 4383:
    case 4384:
    case 4385:
    case 4386:
    case 4387:
    case 4388:
    case 4389:
    case 4390:
    case 4391:
    case 4392:
    case 4393:
    case 4394:
    case 4395:
    case 4396:
    case 4397:
    case 4398:
    case 4399:
    case 4400:
    case 4401:
    case 4402:
    case 4403:
    case 4404:
    case 4405:
    case 4406:
    case 4407:
    case 4408:
    case 4409:
    case 4410:
    case 4411:
    case 4412:
    case 4413:
    case 4414:
    case 4415:
    case 4416:
    case 4417:
    case 4418:
    case 4419:
    case 4420:
    case 4421:
    case 4422:
    case 4423:
    case 4424:
    case 4425:
    case 4426:
    case 4427:
    case 4428:
    case 4429:
    case 4430:
    case 4431:
    case 4432:
    case 4433:
    case 4434:
    case 4435:
    case 4436:
    case 4437:
    case 4438:
    case 4439:
    case 4440:
    case 4441:
    case 4442:
    case 4443:
    case 4444:
    case 4445:
    case 4446:
    case 4447:
    case 4448:
    case 4449:
    case 4450:
    case 4451:
    case 4452:
    case 4453:
    case 4454:
    case 4455:
    case 4456:
    case 4457:
    case 4458:
    case 4459:
    case 4460:
    case 4461:
    case 4462:
    case 4463:
    case 4464:
    case 4465:
    case 4466:
    case 4467:
    case 4468:
    case 4469:
    case 4470:
    case 4471:
    case 4472:
    case 4473:
    case 4474:
    case 4475:
    case 4476:
    case 4477:
    case 4478:
    case 4479:
    case 4480:
    case 4481:
    case 4482:
    case 4483:
    case 4484:
    case 4485:
    case 4486:
    case 4487:
    case 4488:
    case 4489:
    case 4490:
    case 4491:
    case 4492:
    case 4493:
    case 4494:
    case 4495:
    case 4496:
    case 4497:
    case 4498:
    case 4499:
    case 4500:
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4509:
    case 4510:
    case 4511:
    case 4512:
    case 4513:
    case 4514:
    case 4515:
    case 4516:
    case 4517:
    case 4518:
    case 4519:
    case 4520:
    case 4521:
    case 4522:
    case 4523:
    case 4524:
    case 4525:
    case 4526:
    case 4527:
    case 4528:
    case 4529:
    case 4530:
    case 4531:
    case 4532:
    case 4533:
    case 4534:
    case 4535:
    case 4536:
    case 4537:
    case 4538:
    case 4539:
    case 4540:
    case 4541:
    case 4542:
    case 4543:
    case 4544:
    case 4545:
    case 4546:
    case 4547:
    case 4548:
    case 4549:
    case 4550:
    case 4551:
    case 4552:
    case 4553:
    case 4554:
    case 4555:
    case 4556:
    case 4557:
    case 4558:
    case 4559:
    case 4560:
    case 4561:
    case 4562:
    case 4563:
    case 4564:
    case 4565:
    case 4566:
    case 4567:
    case 4568:
    case 4569:
    case 4570:
    case 4571:
    case 4572:
    case 4573:
    case 4574:
    case 4575:
    case 4576:
    case 4577:
    case 4578:
    case 4579:
    case 4580:
    case 4581:
    case 4582:
    case 4583:
    case 4584:
    case 4585:
    case 4586:
    case 4587:
    case 4588:
    case 4589:
    case 4590:
    case 4591:
    case 4592:
    case 4593:
    case 4594:
    case 4595:
    case 4596:
    case 4597:
    case 4598:
    case 4599:
    case 4600:
    case 4601:
    case 4602:
    case 4603:
    case 4604:
    case 4605:
    case 4606:
    case 4607:
    case 4608:
    case 4609:
    case 4610:
    case 4611:
    case 4612:
    case 4613:
    case 4614:
    case 4615:
    case 4616:
    case 4617:
    case 4618:
    case 4619:
    case 4620:
    case 4621:
    case 4622:
    case 4623:
    case 4624:
    case 4625:
    case 4626:
    case 4627:
    case 4628:
    case 4629:
    case 4630:
    case 4631:
    case 4632:
    case 4633:
    case 4634:
    case 4635:
    case 4636:
    case 4637:
    case 4638:
    case 4639:
    case 4640:
    case 4641:
    case 4642:
    case 4643:
    case 4644:
    case 4645:
    case 4646:
    case 4647:
    case 4648:
    case 4649:
    case 4650:
    case 4651:
    case 4652:
    case 4653:
    case 4654:
    case 4655:
    case 4656:
    case 4657:
    case 4658:
    case 4659:
    case 4660:
    case 4661:
    case 4662:
    case 4663:
    case 4664:
    case 4665:
    case 4666:
    case 4667:
    case 4668:
    case 4669:
    case 4670:
    case 4671:
    case 4672:
    case 4673:
    case 4674:
    case 4675:
    case 4676:
    case 4677:
    case 4678:
    case 4679:
    case 4680:
    case 4681:
    case 4682:
    case 4683:
    case 4684:
    case 4685:
    case 4686:
    case 4687:
    case 4688:
    case 4689:
    case 4690:
    case 4691:
    case 4692:
    case 4693:
    case 4694:
    case 4695:
    case 4696:
    case 4697:
    case 4698:
    case 4699:
    case 4700:
    case 4701:
    case 4702:
    case 4703:
    case 4704:
    case 4705:
    case 4706:
    case 4707:
    case 4708:
    case 4709:
    case 4710:
    case 4711:
    case 4712:
    case 4713:
    case 4714:
    case 4715:
    case 4716:
    case 4717:
    case 4718:
    case 4719:
    case 4720:
    case 4721:
    case 4722:
    case 4723:
    case 4724:
    case 4725:
    case 4726:
    case 4727:
    case 4728:
    case 4729:
    case 4730:
    case 4731:
    case 4732:
    case 4733:
    case 4734:
    case 10095:
    case 10096:
    case 10097:
    case 10098:
    case 10099:
    case 10100:
    case 10101:
    case 10102:
    case 10103:
    case 10104:
    case 10105:
    case 10106:
    case 10107:
    case 10108:
    case 10109:
    case 10110:
    case 10111:
    case 10112:
    case 10113:
    case 10114:
    case 10115:
    case 10116:
    case 10117:
    case 10118:
    case 10119:
    case 10120:
    case 10121:
    case 10122:
    case 10123:
    case 10124:
    case 10125:
    case 10126:
    case 10127:
    case 10128:
    case 10129:
    case 10130:
    case 10131:
    case 10132:
    case 10133:
    case 10134:
    case 10135:
    case 10136:
    case 10137:
    case 10138:
    case 10139:
    case 10140:
    case 10141:
    case 10142:
    case 10143:
    case 10144:
    case 10145:
    case 10146:
    case 10147:
    case 10148:
    case 10149:
    case 10150:
    case 10151:
    case 10152:
    case 10153:
    case 10154:
    case 10155:
    case 10156:
    case 10157:
    case 10158:
    case 10159:
    case 10160:
    case 10161:
    case 10162:
    case 10163:
    case 10164:
    case 10165:
    case 10166:
    case 10167:
    case 10168:
    case 10169:
    case 10170:
    case 10171:
    case 10172:
    case 10173:
    case 10174:
    case 10175:
    case 10176:
    case 10177:
    case 10178:
    case 10179:
    case 10180:
    case 10181:
    case 10182:
    case 10183:
    case 10184:
    case 10185:
    case 10186:
    case 10187:
    case 10188:
    case 10189:
    case 10190:
    case 10191:
    case 10192:
    case 10193:
    case 10194:
    case 10195:
    case 10196:
    case 10197:
    case 10198:
    case 10199:
    case 10200:
    case 10201:
    case 10202:
    case 10203:
    case 10204:
    case 10205:
    case 10206:
    case 10207:
    case 10208:
    case 10209:
    case 10210:
    case 10211:
    case 10212:
    case 10213:
    case 10214:
    case 10215:
    case 10216:
    case 10217:
    case 10218:
    case 10219:
    case 10220:
    case 10221:
    case 10222:
    case 10223:
    case 10224:
    case 10225:
    case 10226:
    case 10227:
    case 10228:
    case 10229:
    case 10230:
    case 10231:
    case 10232:
    case 10233:
    case 10234:
    case 10235:
    case 10236:
    case 10237:
    case 10238:
    case 10239:
    case 10240:
    case 10241:
    case 10242:
    case 10243:
    case 10244:
    case 10245:
    case 10246:
    case 10247:
    case 10248:
    case 10249:
    case 10250:
    case 10251:
    case 10252:
    case 10253:
    case 10254:
    case 10255:
    case 10256:
    case 10257:
    case 10258:
    case 10259:
    case 10260:
    case 10261:
    case 10262:
    case 10263:
    case 10264:
    case 10265:
    case 10266:
    case 10267:
    case 10268:
    case 10269:
    case 10270:
    case 10271:
    case 10272:
    case 10273:
    case 10274:
    case 10275:
    case 10276:
    case 10277:
    case 10278:
    case 10279:
    case 10280:
    case 10281:
    case 10282:
    case 10283:
    case 10284:
    case 10285:
    case 10286:
    case 10287:
    case 10288:
    case 10289:
    case 10290:
    case 10291:
    case 10292:
    case 10293:
    case 10294:
    case 10295:
    case 10296:
    case 10297:
    case 10298:
    case 10299:
    case 10300:
    case 10301:
    case 10302:
    case 10303:
    case 10304:
    case 10305:
    case 10306:
    case 10307:
    case 10308:
    case 10309:
    case 10310:
    case 10311:
    case 10312:
    case 10313:
    case 10314:
    case 10315:
    case 10316:
    case 10317:
    case 10318:
    case 10319:
    case 10320:
    case 10321:
    case 10322:
    case 10323:
    case 10324:
    case 10325:
    case 10326:
    case 10327:
    case 10328:
    case 10329:
    case 10330:
    case 10331:
    case 10332:
    case 10333:
    case 10334:
    case 10335:
    case 10336:
    case 10337:
    case 10338:
    case 10339:
    case 10340:
    case 10341:
    case 10342:
    case 10343:
    case 10344:
    case 10345:
    case 10346:
    case 10347:
    case 10348:
    case 10349:
    case 10350:
    case 10351:
    case 10352:
    case 10353:
    case 10354:
    case 10355:
    case 10356:
    case 10357:
    case 10358:
    case 10359:
    case 10360:
    case 10361:
    case 10362:
    case 10363:
    case 10364:
    case 10365:
    case 10366:
    case 10367:
    case 10368:
    case 10369:
    case 10370:
    case 10371:
    case 10372:
    case 10373:
    case 10374:
    case 10375:
    case 10376:
    case 10377:
    case 10378:
    case 10379:
    case 10380:
    case 10381:
    case 10382:
    case 10383:
    case 10384:
    case 10385:
    case 10386:
    case 10387:
    case 10388:
    case 10389:
    case 10390:
    case 10391:
    case 10392:
    case 10393:
    case 10394:
    case 10395:
    case 10396:
    case 10397:
    case 10398:
    case 10399:
    case 10400:
    case 10401:
    case 10402:
    case 10403:
    case 10404:
    case 10405:
    case 10406:
    case 11575:
    case 11576:
    case 11974:
    case 11975:
    case 11976:
    case 11977:
    case 11978:
    case 11979:
    case 11980:
    case 11981:
    case 11982:
    case 11983:
    case 11984:
    case 11985:
    case 11986:
    case 11987:
    case 11988:
    case 11989:
    case 11990:
    case 11991:
    case 11992:
    case 11993:
    case 11994:
    case 11995:
    case 11996:
    case 11997:
    case 11998:
    case 11999:
    case 12000:
    case 12001:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12007:
    case 12008:
    case 12009:
    case 12010:
    case 12011:
    case 12012:
    case 12013:
    case 12014:
    case 12015:
    case 12016:
    case 12017:
    case 12018:
    case 12019:
    case 12020:
    case 12021:
    case 12023:
    case 12024:
    case 12025:
    case 12026:
    case 12027:
    case 12028:
    case 12029:
    case 12030:
    case 12031:
    case 12032:
    case 12033:
    case 12034:
    case 12035:
    case 12036:
    case 12037:
    case 12038:
    case 12039:
    case 12040:
    case 12041:
    case 12042:
    case 12043:
    case 12044:
    case 12045:
    case 12046:
    case 12047:
    case 12048:
    case 12049:
    case 12050:
    case 12051:
    case 12052:
    case 12053:
    case 12054:
    case 12055:
    case 12056:
    case 12057:
    case 12058:
    case 12059:
    case 12060:
    case 12061:
    case 12062:
    case 12063:
    case 12064:
    case 12065:
    case 12066:
    case 12067:
    case 12068:
    case 12069:
    case 12070:
    case 12071:
    case 12072:
    case 12073:
    case 12074:
    case 12075:
    case 12076:
    case 12077:
    case 12078:
    case 12079:
    case 12080:
    case 12081:
    case 12082:
    case 12083:
    case 12084:
    case 12085:
    case 12086:
    case 12087:
    case 12088:
    case 12089:
    case 12090:
    case 12091:
    case 12092:
    case 12093:
    case 12094:
    case 12095:
    case 12096:
    case 12097:
    case 12098:
    case 12099:
    case 12100:
    case 12101:
    case 12102:
    case 12103:
    case 12104:
    case 12105:
    case 12106:
    case 12107:
    case 12108:
    case 12109:
    case 12110:
    case 12111:
    case 12112:
    case 12113:
    case 12114:
    case 12115:
    case 12116:
    case 12117:
    case 12118:
    case 12119:
    case 12120:
    case 12121:
    case 12122:
    case 12123:
    case 12124:
    case 12125:
    case 12126:
    case 12127:
    case 12128:
    case 12129:
    case 12130:
    case 12131:
    case 12132:
    case 12133:
    case 12134:
    case 12135:
    case 12136:
    case 12137:
    case 12138:
    case 12139:
    case 12140:
    case 12141:
    case 12142:
    case 12143:
    case 12144:
    case 12145:
    case 12157:
    case 12158:
    case 12159:
    case 12160:
    case 12161:
    case 12162:
    case 12163:
    case 12164:
    case 12165:
    case 12166:
    case 12167:
    case 12168:
    case 12169:
    case 12170:
    case 12171:
    case 12172:
    case 12173:
    case 12174:
    case 12175:
    case 12176:
    case 12177:
    case 12178:
    case 12179:
    case 12180:
    case 12181:
    case 12182:
    case 12183:
    case 12184:
    case 12185:
    case 12186:
    case 12187:
    case 12188:
    case 12189:
    case 12190:
    case 12191:
    case 12192:
    case 12193:
    case 12194:
    case 12195:
    case 12196:
    case 12197:
    case 12198:
    case 12199:
    case 12200:
    case 12201:
    case 12202:
    case 12203:
    case 12204:
    case 12205:
    case 12206:
    case 12207:
    case 12210:
    case 12211:
    case 12212:
    case 12213:
    case 12214:
    case 12884:
    case 12885:
    case 12886:
    case 12887:
    case 12888:
    case 12889:
    case 12890:
    case 12891:
    case 12892:
    case 12893:
    case 12894:
    case 12895:
    case 12896:
    case 12897:
    case 12898:
    case 12899:
    case 12900:
    case 12901:
    case 12902:
    case 12903:
    case 12904:
    case 12905:
    case 12906:
    case 12907:
    case 12908:
    case 12909:
    case 12910:
    case 12911:
    case 12912:
    case 12913:
    case 12914:
    case 12915:
    case 12916:
    case 12917:
    case 12918:
    case 12919:
    case 12920:
    case 12921:
    case 12922:
    case 12923:
    case 12924:
    case 12925:
    case 12926:
    case 12927:
    case 12928:
    case 12929:
    case 12930:
    case 12931:
    case 12932:
    case 12933:
    case 12934:
    case 12935:
    case 12936:
    case 12937:
    case 12938:
    case 12939:
    case 12940:
    case 12941:
    case 12942:
    case 12943:
    case 12944:
    case 12945:
    case 12946:
    case 12947:
    case 12948:
    case 12949:
    case 12950:
    case 12951:
    case 12952:
    case 12953:
    case 12954:
    case 12955:
    case 12956:
    case 12957:
    case 12958:
    case 12959:
    case 12960:
    case 12961:
    case 12962:
    case 12963:
    case 12964:
    case 12965:
    case 12966:
    case 12967:
    case 12968:
    case 12969:
    case 12970:
    case 12971:
    case 12972:
    case 12973:
    case 12974:
    case 12975:
    case 12976:
    case 12977:
    case 12978:
    case 12979:
    case 12980:
    case 12981:
    case 13356:
    case 13357:
    case 13406:
    case 13407:
    case 13408:
    case 13409:
    case 13410:
    case 13411:
    case 13412:
    case 13413:
    case 13414:
    case 13415:
    case 13416:
    case 13417:
    case 13418:
    case 13419:
    case 13420:
    case 13421:
    case 13422:
    case 13423:
    case 13424:
    case 13431:
    case 13432:
    case 13433:
    case 13434:
    case 13435:
    case 13436:
    case 13437:
    case 13438:
    case 13439:
    case 13440:
    case 13441:
    case 13442:
    case 13443:
    case 13444:
    case 13445:
    case 13446:
    case 13447:
    case 13448:
    case 13449:
    case 13450:
    case 13451:
    case 13452:
    case 13453:
    case 13454:
    case 13455:
    case 13456:
    case 13457:
    case 13458:
    case 13459:
    case 13460:
    case 13461:
    case 13462:
    case 13463:
    case 13464:
    case 13465:
    case 13466:
    case 13467:
    case 13468:
    case 13469:
    case 13470:
    case 13471:
    case 13472:
    case 13473:
    case 13474:
    case 13475:
    case 13476:
    case 13477:
    case 13478:
    case 13479:
      return v8;
    case 378:
    case 380:
    case 382:
    case 384:
      uint64_t v728 = *((void *)a2 + 2);
      if (*(unsigned char *)v728 == 2) {
        goto LABEL_1117;
      }
      uint64_t v1016 = *(void *)(v728 + 8);
      uint64_t v1017 = *((void *)a2 + 1);
      *(void *)&long long v1386 = v1016;
      *((void *)&v1386 + 1) = 0x8100000002;
      uint64_t v1387 = v1017;
      unsigned int v1018 = *(_DWORD *)(a3 + 8);
      unint64_t v1019 = *(void *)a3;
      if (v1018 >= *(_DWORD *)(a3 + 12))
      {
        BOOL v1349 = v1019 + 24 * v1018 > (unint64_t)&v1386;
        if (v1019 > (unint64_t)&v1386 || !v1349) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v1020 = v1019 + 24 * *(unsigned int *)(a3 + 8);
      long long v1021 = v1386;
      *(void *)(v1020 + 16) = v1387;
      *(_OWORD *)uint64_t v1020 = v1021;
      unsigned int v1022 = *(_DWORD *)(a3 + 12);
      unsigned int v1023 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v1023;
      uint64_t v1024 = *((void *)a2 + 1);
      *(void *)&long long v1386 = v1016;
      *((void *)&v1386 + 1) = 0x8200000002;
      uint64_t v1387 = v1024;
      unint64_t v1025 = *(void *)a3;
      if (v1023 >= v1022)
      {
        BOOL v1350 = v1025 + 24 * v1023 > (unint64_t)&v1386;
        if (v1025 > (unint64_t)&v1386 || !v1350) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v1026 = v1025 + 24 * *(unsigned int *)(a3 + 8);
      long long v1027 = v1386;
      *(void *)(v1026 + 16) = v1387;
      *(_OWORD *)uint64_t v1026 = v1027;
      unsigned int v741 = *(_DWORD *)(a3 + 12);
      unsigned int v742 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v742;
      uint64_t v743 = *((void *)a2 + 1);
      *(void *)&long long v1386 = v1016;
      uint64_t v744 = 0x8300000003;
      goto LABEL_1535;
    case 379:
    case 381:
    case 383:
    case 385:
      sub_1CBC78DBC((uint64_t)a2, a3);
      goto LABEL_1277;
    case 388:
    case 390:
    case 394:
    case 396:
      uint64_t v728 = *((void *)a2 + 2);
      if (*(unsigned char *)v728 == 2)
      {
LABEL_1117:
        unint64_t v745 = *(unsigned int *)(v728 + 8);
      }
      else
      {
        uint64_t v729 = *(void *)(v728 + 8);
        uint64_t v730 = *((void *)a2 + 1);
        *(void *)&long long v1386 = v729;
        *((void *)&v1386 + 1) = 0x8700000002;
        uint64_t v1387 = v730;
        unsigned int v731 = *(_DWORD *)(a3 + 8);
        unint64_t v732 = *(void *)a3;
        if (v731 >= *(_DWORD *)(a3 + 12))
        {
          BOOL v1347 = v732 + 24 * v731 > (unint64_t)&v1386;
          if (v732 > (unint64_t)&v1386 || !v1347) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v733 = v732 + 24 * *(unsigned int *)(a3 + 8);
        long long v734 = v1386;
        *(void *)(v733 + 16) = v1387;
        *(_OWORD *)uint64_t v733 = v734;
        unsigned int v735 = *(_DWORD *)(a3 + 12);
        unsigned int v736 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v736;
        uint64_t v737 = *((void *)a2 + 1);
        *(void *)&long long v1386 = v729;
        *((void *)&v1386 + 1) = 0x8800000002;
        uint64_t v1387 = v737;
        unint64_t v738 = *(void *)a3;
        if (v736 >= v735)
        {
          BOOL v1348 = v738 + 24 * v736 > (unint64_t)&v1386;
          if (v738 > (unint64_t)&v1386 || !v1348) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v739 = v738 + 24 * *(unsigned int *)(a3 + 8);
        long long v740 = v1386;
        *(void *)(v739 + 16) = v1387;
        *(_OWORD *)uint64_t v739 = v740;
        unsigned int v741 = *(_DWORD *)(a3 + 12);
        unsigned int v742 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v742;
        uint64_t v743 = *((void *)a2 + 1);
        *(void *)&long long v1386 = v729;
        uint64_t v744 = 0x8900000003;
LABEL_1535:
        *((void *)&v1386 + 1) = v744;
        uint64_t v1387 = v743;
        unint64_t v1028 = *(void *)a3;
        if (v742 >= v741)
        {
          BOOL v1346 = v1028 + 24 * v742 > (unint64_t)&v1386;
          if (v1028 > (unint64_t)&v1386 || !v1346) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v745 = 0;
        uint64_t v1029 = v1028 + 24 * *(unsigned int *)(a3 + 8);
        long long v1030 = v1386;
        *(void *)(v1029 + 16) = v1387;
        *(_OWORD *)uint64_t v1029 = v1030;
        ++*(_DWORD *)(a3 + 8);
        uint64_t v728 = *((void *)a2 + 2);
      }
      uint64_t v1031 = v745 & 0x100010001000100 | (v745 << 8) & 0xFE00;
      unint64_t v1032 = (v745 >> 8) & 0xFE | ((unint64_t)(*(_DWORD *)(v728 + 24) & 3) << 29);
      goto LABEL_1628;
    case 389:
    case 391:
    case 395:
    case 397:
      sub_1CBC79234((uint64_t)a2, a3);
LABEL_1277:
      unint64_t v87 = ((unint64_t)v746 << 16) & 0x100010001000100 | (v746 << 24) & 0xFE000000 | (v746 << 8) & 0xFE0000 | ((unint64_t)v746 >> 8) & 0xFF00 | ((unint64_t)v746 >> 24) & 0xFE | ((*(void *)(*((void *)a2 + 2) + 24) & 3) << 45);
      goto LABEL_110;
    case 400:
    case 401:
    case 410:
    case 411:
    case 412:
    case 413:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 454:
    case 455:
    case 749:
    case 750:
    case 759:
    case 760:
    case 761:
    case 762:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 777:
    case 778:
    case 787:
    case 788:
    case 789:
    case 790:
    case 791:
    case 792:
    case 793:
    case 794:
    case 803:
    case 804:
    case 11779:
    case 11780:
    case 11789:
    case 11790:
    case 11791:
    case 11792:
    case 11801:
    case 11802:
    case 11803:
    case 11804:
    case 11805:
    case 11806:
    case 11807:
    case 11808:
    case 11817:
    case 11818:
    case 11819:
    case 11820:
    case 11821:
    case 11822:
    case 11823:
    case 11824:
    case 11841:
    case 11842:
    case 11867:
    case 11868:
    case 11869:
    case 11870:
    case 11876:
    case 11877:
    case 11886:
    case 11887:
    case 11888:
    case 11889:
    case 11898:
    case 11899:
    case 11900:
    case 11901:
    case 11902:
    case 11903:
    case 11904:
    case 11905:
    case 11914:
    case 11915:
    case 11916:
    case 11917:
    case 11918:
    case 11919:
    case 11920:
    case 11921:
    case 11938:
    case 11939:
    case 11948:
    case 11949:
    case 11950:
    case 11951:
      int v49 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v50 = *((void *)a2 + 2);
      int v53 = *(unsigned __int8 *)(v50 + 32);
      uint64_t v51 = v50 + 32;
      int v52 = v53;
      if (v53 == 1)
      {
        LOBYTE(v54) = sub_1CBC796AC(a1, v51, *(void *)(a4 + 192), 0);
        int v49 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v52 == 2)
      {
        int v54 = *((_DWORD *)v49 + 10);
      }
      else
      {
        uint64_t v144 = *((void *)v49 + 5);
        if (*(unsigned char *)v144 == 4) {
          int v54 = *(_DWORD *)(*(void *)(v144 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v54) = 0;
        }
      }
      unint64_t v298 = (unint64_t)(v54 & 1) << 40;
      int v299 = *v49;
      if (v299 == 1)
      {
        uint64_t v300 = sub_1CBC796AC(a1, (uint64_t)v49, *(void *)(a4 + 192), 0);
        int v49 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v299 == 2)
      {
        uint64_t v300 = *((unsigned int *)v49 + 2);
      }
      else
      {
        uint64_t v301 = *((void *)v49 + 1);
        if (*(unsigned char *)v301 == 4) {
          uint64_t v300 = *(_DWORD *)(*(void *)(v301 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v300 = 0;
        }
      }
      uint64_t v302 = (v300 << 25) & 0x600000000 | v298 | (v300 << 24);
      int v303 = v49[16];
      if (v303 == 1)
      {
        int v304 = sub_1CBC796AC(a1, (uint64_t)(v49 + 16), *(void *)(a4 + 192), 0);
        int v49 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v303 == 2)
      {
        int v304 = *((_DWORD *)v49 + 6);
      }
      else
      {
        uint64_t v305 = *((void *)v49 + 3);
        if (*(unsigned char *)v305 == 4) {
          int v304 = *(_DWORD *)(*(void *)(v305 + 24) + 16) | 0x2000;
        }
        else {
          int v304 = 0;
        }
      }
      uint64_t v306 = (v304 << 9) & 0x3E0000;
      goto LABEL_802;
    case 402:
    case 403:
    case 406:
    case 407:
    case 414:
    case 415:
    case 418:
    case 419:
    case 430:
    case 431:
    case 434:
    case 435:
    case 446:
    case 447:
    case 450:
    case 451:
    case 456:
    case 457:
    case 460:
    case 461:
    case 751:
    case 752:
    case 755:
    case 756:
    case 763:
    case 764:
    case 767:
    case 768:
    case 779:
    case 780:
    case 783:
    case 784:
    case 795:
    case 796:
    case 799:
    case 800:
    case 805:
    case 806:
    case 809:
    case 810:
    case 11781:
    case 11782:
    case 11785:
    case 11786:
    case 11793:
    case 11794:
    case 11797:
    case 11798:
    case 11809:
    case 11810:
    case 11813:
    case 11814:
    case 11825:
    case 11826:
    case 11829:
    case 11830:
    case 11833:
    case 11834:
    case 11837:
    case 11838:
    case 11843:
    case 11844:
    case 11847:
    case 11848:
    case 11878:
    case 11879:
    case 11882:
    case 11883:
    case 11890:
    case 11891:
    case 11894:
    case 11895:
    case 11906:
    case 11907:
    case 11910:
    case 11911:
    case 11922:
    case 11923:
    case 11926:
    case 11927:
    case 11930:
    case 11931:
    case 11934:
    case 11935:
    case 11940:
    case 11941:
    case 11944:
    case 11945:
    case 11952:
    case 11953:
      uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      int v55 = *v10;
      if (v55 == 1)
      {
        int v56 = sub_1CBC796AC(a1, (uint64_t)v10, *(void *)(a4 + 192), 0);
        uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v55 == 2)
      {
        int v56 = *((_DWORD *)v10 + 2);
      }
      else
      {
        uint64_t v175 = *((void *)v10 + 1);
        if (*(unsigned char *)v175 == 4) {
          int v56 = *(_DWORD *)(*(void *)(v175 + 24) + 16) | 0x2000;
        }
        else {
          int v56 = 0;
        }
      }
      unint64_t v315 = (v56 << 14) & 0xF00000 | ((unint64_t)(v56 & 0x3F) << 40);
      int v316 = v10[16];
      if (v316 == 1)
      {
        int v317 = sub_1CBC796AC(a1, (uint64_t)(v10 + 16), *(void *)(a4 + 192), 0);
        uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v316 == 2)
      {
        int v317 = *((_DWORD *)v10 + 6);
      }
      else
      {
        uint64_t v318 = *((void *)v10 + 3);
        if (*(unsigned char *)v318 == 4) {
          int v317 = *(_DWORD *)(*(void *)(v318 + 24) + 16) | 0x2000;
        }
        else {
          int v317 = 0;
        }
      }
      uint64_t v319 = (v317 << 24);
      unint64_t v320 = (unsigned __int16)v317 & 0xFF00 | v315;
      goto LABEL_418;
    case 404:
    case 405:
    case 408:
    case 409:
    case 416:
    case 417:
    case 420:
    case 421:
    case 432:
    case 433:
    case 436:
    case 437:
    case 448:
    case 449:
    case 452:
    case 453:
    case 458:
    case 459:
    case 462:
    case 463:
    case 753:
    case 754:
    case 757:
    case 758:
    case 765:
    case 766:
    case 769:
    case 770:
    case 781:
    case 782:
    case 785:
    case 786:
    case 797:
    case 798:
    case 801:
    case 802:
    case 807:
    case 808:
    case 811:
    case 812:
    case 11783:
    case 11784:
    case 11787:
    case 11788:
    case 11795:
    case 11796:
    case 11799:
    case 11800:
    case 11811:
    case 11812:
    case 11815:
    case 11816:
    case 11827:
    case 11828:
    case 11831:
    case 11832:
    case 11835:
    case 11836:
    case 11839:
    case 11840:
    case 11845:
    case 11846:
    case 11849:
    case 11850:
    case 11880:
    case 11881:
    case 11884:
    case 11885:
    case 11892:
    case 11893:
    case 11896:
    case 11897:
    case 11908:
    case 11909:
    case 11912:
    case 11913:
    case 11924:
    case 11925:
    case 11928:
    case 11929:
    case 11932:
    case 11933:
    case 11936:
    case 11937:
    case 11942:
    case 11943:
    case 11946:
    case 11947:
    case 11954:
    case 11955:
      uint64_t v57 = (unsigned __int8 *)*((void *)a2 + 2);
      int v58 = *v57;
      if (v58 == 1)
      {
        int v59 = sub_1CBC796AC(a1, (uint64_t)v57, *(void *)(a4 + 192), 0);
        uint64_t v57 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v58 == 2)
      {
        int v59 = *((_DWORD *)v57 + 2);
      }
      else
      {
        uint64_t v176 = *((void *)v57 + 1);
        if (*(unsigned char *)v176 == 4) {
          int v59 = *(_DWORD *)(*(void *)(v176 + 24) + 16) | 0x2000;
        }
        else {
          int v59 = 0;
        }
      }
      int v328 = v59 << 14;
      uint64_t v1369 = a1;
      if (v57[16] == 1)
      {
        unint64_t v329 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *((unsigned int *)v57 + 6));
      }
      else
      {
        uint64_t v330 = *((void *)v57 + 3);
        if (v330) {
          uint64_t v331 = v330 - 8;
        }
        else {
          uint64_t v331 = 0;
        }
        unint64_t v329 = (*(void *)(*(void *)(v331 + 32) + 16) / 2) | 0x2000;
      }
      int v332 = v329 << 10;
      unint64_t v333 = v329 >> 4;
      int v334 = v57[32];
      uint64_t v1377 = a4;
      if (v334 == 1)
      {
        int v335 = sub_1CBC796AC(v1369, (uint64_t)(v57 + 32), *(void *)(a4 + 192), 0);
        uint64_t v57 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v334 == 2)
      {
        int v335 = *((_DWORD *)v57 + 10);
      }
      else
      {
        uint64_t v336 = *((void *)v57 + 5);
        if (*(unsigned char *)v336 == 4) {
          int v335 = *(_DWORD *)(*(void *)(v336 + 24) + 16) | 0x2000;
        }
        else {
          int v335 = 0;
        }
      }
      unint64_t v337 = (unint64_t)(v59 & 0x3F) << 40;
      uint64_t v338 = *(void *)&v328 & 0xF00000;
      uint64_t v339 = (v329 << 44) & 0x200000000000000;
      unint64_t v340 = (v329 & 0x7F) << 33;
      uint64_t v341 = *(void *)&v332 & 0xE0000;
      uint64_t v342 = v333 & 0xC0;
      uint64_t v343 = (v335 << 24);
      uint64_t v344 = (unsigned __int16)v335 & 0xFF00;
      int v345 = v57[48];
      if (v345 == 1)
      {
        LOBYTE(v346) = sub_1CBC796AC(v1369, (uint64_t)(v57 + 48), *(void *)(v1377 + 192), 0);
        uint64_t v57 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v345 == 2)
      {
        int v346 = *((_DWORD *)v57 + 14);
      }
      else
      {
        uint64_t v347 = *((void *)v57 + 7);
        if (*(unsigned char *)v347 == 4) {
          int v346 = *(_DWORD *)(*(void *)(v347 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v346) = 0;
        }
      }
      uint64_t v348 = v346 & 1;
      uint64_t v349 = (*((void *)v57 + 9) & 3) << 61;
      unint64_t v350 = v337 | v338 | v339 | v340;
      uint64_t v351 = v341 | v342 | v344;
      goto LABEL_1274;
    case 468:
    case 469:
    case 470:
    case 471:
    case 476:
    case 477:
    case 478:
    case 479:
    case 484:
    case 485:
    case 486:
    case 487:
    case 492:
    case 493:
    case 494:
    case 495:
    case 500:
    case 501:
    case 502:
    case 503:
    case 508:
    case 509:
    case 510:
    case 511:
    case 516:
    case 517:
    case 518:
    case 519:
    case 524:
    case 525:
    case 526:
    case 527:
    case 532:
    case 533:
    case 534:
    case 535:
    case 540:
    case 541:
    case 542:
    case 543:
    case 548:
    case 549:
    case 550:
    case 551:
    case 556:
    case 557:
    case 558:
    case 559:
    case 564:
    case 565:
    case 566:
    case 567:
    case 572:
    case 573:
    case 574:
    case 575:
    case 580:
    case 581:
    case 582:
    case 583:
    case 588:
    case 589:
    case 590:
    case 591:
    case 596:
    case 597:
    case 598:
    case 599:
    case 604:
    case 605:
    case 606:
    case 607:
    case 612:
    case 613:
    case 614:
    case 615:
    case 620:
    case 621:
    case 622:
    case 623:
    case 628:
    case 629:
    case 630:
    case 631:
    case 636:
    case 637:
    case 638:
    case 639:
    case 644:
    case 645:
    case 646:
    case 647:
    case 652:
    case 653:
    case 654:
    case 655:
    case 660:
    case 661:
    case 662:
    case 663:
    case 668:
    case 669:
    case 670:
    case 671:
    case 676:
    case 677:
    case 678:
    case 679:
    case 684:
    case 685:
    case 686:
    case 687:
    case 692:
    case 693:
    case 694:
    case 695:
    case 700:
    case 701:
    case 702:
    case 703:
    case 708:
    case 709:
    case 710:
    case 711:
    case 716:
    case 717:
    case 718:
    case 719:
    case 724:
    case 725:
    case 726:
    case 727:
    case 732:
    case 733:
    case 734:
    case 735:
      uint64_t v40 = *((void *)a2 + 2);
      uint64_t v37 = v40 + 64;
      int v41 = *(unsigned __int8 *)(v40 + 64);
      if (v41 == 1) {
        goto LABEL_51;
      }
      if (v41 == 2)
      {
        int v39 = *(_DWORD *)(v40 + 72);
        goto LABEL_130;
      }
      uint64_t v111 = *(void *)(v40 + 72);
      goto LABEL_127;
    case 472:
    case 473:
    case 474:
    case 475:
    case 480:
    case 481:
    case 482:
    case 483:
    case 488:
    case 489:
    case 490:
    case 491:
    case 496:
    case 497:
    case 498:
    case 499:
    case 504:
    case 505:
    case 506:
    case 507:
    case 512:
    case 513:
    case 514:
    case 515:
    case 520:
    case 521:
    case 522:
    case 523:
    case 528:
    case 529:
    case 530:
    case 531:
    case 536:
    case 537:
    case 538:
    case 539:
    case 544:
    case 545:
    case 546:
    case 547:
    case 552:
    case 553:
    case 554:
    case 555:
    case 560:
    case 561:
    case 562:
    case 563:
    case 568:
    case 569:
    case 570:
    case 571:
    case 576:
    case 577:
    case 578:
    case 579:
    case 584:
    case 585:
    case 586:
    case 587:
    case 592:
    case 593:
    case 594:
    case 595:
    case 600:
    case 601:
    case 602:
    case 603:
    case 608:
    case 609:
    case 610:
    case 611:
    case 616:
    case 617:
    case 618:
    case 619:
    case 624:
    case 625:
    case 626:
    case 627:
    case 632:
    case 633:
    case 634:
    case 635:
    case 640:
    case 641:
    case 642:
    case 643:
    case 648:
    case 649:
    case 650:
    case 651:
    case 656:
    case 657:
    case 658:
    case 659:
    case 664:
    case 665:
    case 666:
    case 667:
    case 672:
    case 673:
    case 674:
    case 675:
    case 680:
    case 681:
    case 682:
    case 683:
    case 688:
    case 689:
    case 690:
    case 691:
    case 696:
    case 697:
    case 698:
    case 699:
    case 704:
    case 705:
    case 706:
    case 707:
    case 712:
    case 713:
    case 714:
    case 715:
    case 720:
    case 721:
    case 722:
    case 723:
    case 728:
    case 729:
    case 730:
    case 731:
    case 736:
    case 737:
    case 738:
    case 739:
      uint64_t v36 = *((void *)a2 + 2);
      uint64_t v37 = v36 + 48;
      int v38 = *(unsigned __int8 *)(v36 + 48);
      if (v38 == 1)
      {
LABEL_51:
        LOBYTE(v39) = sub_1CBC796AC(a1, v37, *(void *)(a4 + 192), 0);
      }
      else if (v38 == 2)
      {
        int v39 = *(_DWORD *)(v36 + 56);
      }
      else
      {
        uint64_t v111 = *(void *)(v36 + 56);
LABEL_127:
        if (*(unsigned char *)v111 == 4) {
          int v39 = *(_DWORD *)(*(void *)(v111 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v39) = 0;
        }
      }
LABEL_130:
      v8 |= (unint64_t)(v39 & 3) << 54;
      return v8;
    case 746:
      uint64_t v676 = a1;
      v1098 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v1099 = *((void *)a2 + 2);
      int v1102 = *(unsigned __int8 *)(v1099 + 80);
      uint64_t v1100 = v1099 + 80;
      int v1101 = v1102;
      if (v1102 == 1)
      {
        LOBYTE(v1103) = sub_1CBC796AC(a1, v1100, *(void *)(a4 + 192), 0);
        v1098 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1101 == 2)
      {
        int v1103 = *((_DWORD *)v1098 + 22);
      }
      else
      {
        uint64_t v1165 = *((void *)v1098 + 11);
        if (*(unsigned char *)v1165 == 4) {
          int v1103 = *(_DWORD *)(*(void *)(v1165 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1103) = 0;
        }
      }
      unint64_t v1311 = (unint64_t)(v1103 & 1) << 40;
      int v1312 = *v1098;
      if (v1312 == 1)
      {
        uint64_t v1313 = sub_1CBC796AC(a1, (uint64_t)v1098, *(void *)(a4 + 192), 0);
        v1098 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1312 == 2)
      {
        uint64_t v1313 = *((unsigned int *)v1098 + 2);
      }
      else
      {
        uint64_t v1314 = *((void *)v1098 + 1);
        if (*(unsigned char *)v1314 == 4) {
          uint64_t v1313 = *(_DWORD *)(*(void *)(v1314 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v1313 = 0;
        }
      }
      uint64_t v1315 = (v1313 << 25) & 0x600000000 | v1311;
      uint64_t v1316 = (v1313 << 24);
      int v1317 = v1098[16];
      if (v1317 == 1)
      {
        int v1318 = sub_1CBC796AC(v676, (uint64_t)(v1098 + 16), *(void *)(a4 + 192), 0);
        v1098 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1317 == 2)
      {
        int v1318 = *((_DWORD *)v1098 + 6);
      }
      else
      {
        uint64_t v1319 = *((void *)v1098 + 3);
        if (*(unsigned char *)v1319 == 4) {
          int v1318 = *(_DWORD *)(*(void *)(v1319 + 24) + 16) | 0x2000;
        }
        else {
          int v1318 = 0;
        }
      }
      uint64_t v1320 = v1315 | v1316;
      unint64_t v1321 = (v1318 << 9) & 0x60000 | ((unint64_t)v1318 << 8);
      int v1322 = v1098[48];
      uint64_t v1323 = *((void *)v1098 + 13);
      if (v1322 == 1)
      {
        LOBYTE(v1324) = sub_1CBC796AC(v676, (uint64_t)(v1098 + 48), *(void *)(a4 + 192), 0);
        v1098 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1322 == 2)
      {
        int v1324 = *((_DWORD *)v1098 + 14);
      }
      else
      {
        uint64_t v1325 = *((void *)v1098 + 7);
        if (*(unsigned char *)v1325 == 4) {
          int v1324 = *(_DWORD *)(*(void *)(v1325 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1324) = 0;
        }
      }
      unint64_t v690 = v1321 | v1320;
      unint64_t v691 = (unint64_t)(v1323 & 3) << 45;
      uint64_t v692 = (v1324 & 3) << 6;
      uint64_t v693 = (uint64_t)(v1098 + 64);
      int v1326 = v1098[64];
      if (v1326 == 1) {
        goto LABEL_1951;
      }
      if (v1326 == 2)
      {
        int v695 = *((_DWORD *)v1098 + 18);
        goto LABEL_1952;
      }
      uint64_t v696 = *((void *)v1098 + 9);
      goto LABEL_1042;
    case 747:
    case 748:
      v1035 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v1036 = *((void *)a2 + 2);
      int v1039 = *(unsigned __int8 *)(v1036 + 64);
      uint64_t v1037 = v1036 + 64;
      int v1038 = v1039;
      if (v1039 == 1)
      {
        uint64_t v1040 = a4;
        uint64_t v1041 = a1;
        LOBYTE(v1042) = sub_1CBC796AC(a1, v1037, *(void *)(a4 + 192), 0);
        v1035 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else
      {
        uint64_t v1040 = a4;
        uint64_t v1041 = a1;
        if (v1038 == 2)
        {
          int v1042 = *((_DWORD *)v1035 + 18);
        }
        else
        {
          uint64_t v1155 = *((void *)v1035 + 9);
          if (*(unsigned char *)v1155 == 4) {
            int v1042 = *(_DWORD *)(*(void *)(v1155 + 24) + 16) | 0x2000;
          }
          else {
            LOBYTE(v1042) = 0;
          }
        }
      }
      unint64_t v1195 = (unint64_t)(v1042 & 1) << 40;
      int v1196 = *v1035;
      if (v1196 == 1)
      {
        unsigned int v1197 = sub_1CBC796AC(v1041, (uint64_t)v1035, *(void *)(v1040 + 192), 0);
        v1035 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1196 == 2)
      {
        unsigned int v1197 = *((_DWORD *)v1035 + 2);
      }
      else
      {
        uint64_t v1198 = *((void *)v1035 + 1);
        if (*(unsigned char *)v1198 == 4) {
          unsigned int v1197 = *(_DWORD *)(*(void *)(v1198 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v1197 = 0;
        }
      }
      int v1199 = v1035[16];
      unint64_t v1200 = ((v1197 << 24) | v1195) & 0xFFFF9FFFFFFFFFFFLL | (v1197 >> 2) & 0xC0 | ((*((void *)v1035 + 11) & 3) << 45);
      if (v1199 == 1)
      {
        LOBYTE(v1201) = sub_1CBC796AC(v1041, (uint64_t)(v1035 + 16), *(void *)(v1040 + 192), 0);
        v1035 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1199 == 2)
      {
        int v1201 = *((_DWORD *)v1035 + 6);
      }
      else
      {
        uint64_t v1202 = *((void *)v1035 + 3);
        if (*(unsigned char *)v1202 == 4) {
          int v1201 = *(_DWORD *)(*(void *)(v1202 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1201) = 0;
        }
      }
      unint64_t v1203 = v1200 | (16 * (v1201 & 1u));
      int v1204 = v1035[32];
      if (v1204 == 1)
      {
        LOBYTE(v1205) = sub_1CBC796AC(v1041, (uint64_t)(v1035 + 32), *(void *)(v1040 + 192), 0);
        v1035 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1204 == 2)
      {
        int v1205 = *((_DWORD *)v1035 + 10);
      }
      else
      {
        uint64_t v1206 = *((void *)v1035 + 5);
        if (*(unsigned char *)v1206 == 4) {
          int v1205 = *(_DWORD *)(*(void *)(v1206 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1205) = 0;
        }
      }
      unint64_t v1207 = v1203 | (8 * (v1205 & 1u));
      int v1208 = v1035[48];
      if (v1208 == 1)
      {
        LOBYTE(v1209) = sub_1CBC796AC(v1041, (uint64_t)(v1035 + 48), *(void *)(v1040 + 192), 0);
      }
      else if (v1208 == 2)
      {
        int v1209 = *((_DWORD *)v1035 + 14);
      }
      else
      {
        uint64_t v1210 = *((void *)v1035 + 7);
        if (*(unsigned char *)v1210 == 4) {
          int v1209 = *(_DWORD *)(*(void *)(v1210 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1209) = 0;
        }
      }
      uint64_t v1211 = 2 * (v1209 & 3u);
      goto LABEL_1907;
    case 813:
      v1110 = (unsigned __int8 *)*((void *)a2 + 2);
      int v1111 = *v1110;
      if (v1111 == 1)
      {
        unint64_t v1112 = sub_1CBC796AC(a1, (uint64_t)v1110, *(void *)(a4 + 192), 0);
        v1110 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1111 == 2)
      {
        unint64_t v1112 = *((unsigned int *)v1110 + 2);
      }
      else
      {
        uint64_t v1167 = *((void *)v1110 + 1);
        if (*(unsigned char *)v1167 == 4) {
          unint64_t v1112 = *(_DWORD *)(*(void *)(v1167 + 24) + 16) | 0x2000u;
        }
        else {
          unint64_t v1112 = 0;
        }
      }
      unint64_t v1282 = v1112 >> 8;
      uint64_t v1283 = (v1112 << 8) & 0xFE00;
      int v1284 = *((_DWORD *)v1110 + 6);
      goto LABEL_1965;
    case 814:
    case 815:
      v1050 = (unsigned __int8 *)*((void *)a2 + 2);
      int v1051 = *v1050;
      if (v1051 == 1)
      {
        unsigned int v1052 = sub_1CBC796AC(a1, (uint64_t)v1050, *(void *)(a4 + 192), 0);
        v1050 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1051 == 2)
      {
        unsigned int v1052 = *((_DWORD *)v1050 + 2);
      }
      else
      {
        uint64_t v1157 = *((void *)v1050 + 1);
        if (*(unsigned char *)v1157 == 4) {
          unsigned int v1052 = *(_DWORD *)(*(void *)(v1157 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v1052 = 0;
        }
      }
      uint64_t v435 = *((void *)v1050 + 3);
      unint64_t v436 = (v1052 << 9) & 0x60000 | ((unint64_t)v1052 << 8) | (v1052 >> 7) & 0x38;
      goto LABEL_610;
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 829:
    case 830:
    case 831:
      uint64_t v309 = (unsigned __int8 *)*((void *)a2 + 2);
      int v310 = *v309;
      if (v310 == 1)
      {
        unsigned int v311 = sub_1CBC796AC(a1, (uint64_t)v309, *(void *)(a4 + 192), 0);
        uint64_t v309 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v310 == 2)
      {
        unsigned int v311 = *((_DWORD *)v309 + 2);
      }
      else
      {
        uint64_t v669 = *((void *)v309 + 1);
        if (*(unsigned char *)v669 == 4) {
          unsigned int v311 = *(_DWORD *)(*(void *)(v669 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v311 = 0;
        }
      }
      uint64_t v979 = (v311 << 24) | (v311 >> 2) & 0xC0;
      int v980 = v309[16];
      if (v980 == 1)
      {
        int v981 = sub_1CBC796AC(a1, (uint64_t)(v309 + 16), *(void *)(a4 + 192), 0);
        uint64_t v309 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v980 == 2)
      {
        int v981 = *((_DWORD *)v309 + 6);
      }
      else
      {
        uint64_t v982 = *((void *)v309 + 3);
        if (*(unsigned char *)v982 == 4) {
          int v981 = *(_DWORD *)(*(void *)(v982 + 24) + 16) | 0x2000;
        }
        else {
          int v981 = 0;
        }
      }
      uint64_t v983 = (32 * v981) & 0xFF00 | (v981 << 6) & 0x60000 | v979;
      int v984 = v309[32];
      if (v984 == 1)
      {
        LOBYTE(v985) = sub_1CBC796AC(a1, (uint64_t)(v309 + 32), *(void *)(a4 + 192), 0);
        uint64_t v309 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v984 == 2)
      {
        int v985 = *((_DWORD *)v309 + 10);
      }
      else
      {
        uint64_t v986 = *((void *)v309 + 5);
        if (*(unsigned char *)v986 == 4) {
          int v985 = *(_DWORD *)(*(void *)(v986 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v985) = 0;
        }
      }
      uint64_t v987 = v983 | (2 * (v985 & 3u));
      int v988 = v309[48];
      if (v988 == 1)
      {
        LOBYTE(v989) = sub_1CBC796AC(a1, (uint64_t)(v309 + 48), *(void *)(a4 + 192), 0);
        uint64_t v309 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v988 == 2)
      {
        int v989 = *((_DWORD *)v309 + 14);
      }
      else
      {
        uint64_t v990 = *((void *)v309 + 7);
        if (*(unsigned char *)v990 == 4) {
          int v989 = *(_DWORD *)(*(void *)(v990 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v989) = 0;
        }
      }
      uint64_t v991 = v987 | (8 * (v989 & 1u));
      int v992 = v309[64];
      if (v992 == 1)
      {
        LOBYTE(v993) = sub_1CBC796AC(a1, (uint64_t)(v309 + 64), *(void *)(a4 + 192), 0);
        uint64_t v309 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v992 == 2)
      {
        int v993 = *((_DWORD *)v309 + 18);
      }
      else
      {
        uint64_t v994 = *((void *)v309 + 9);
        if (*(unsigned char *)v994 == 4) {
          int v993 = *(_DWORD *)(*(void *)(v994 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v993) = 0;
        }
      }
      unint64_t v538 = v991 | ((unint64_t)(v993 & 1) << 40);
      uint64_t v539 = *((void *)v309 + 11);
      goto LABEL_803;
    case 832:
    case 833:
    case 836:
    case 837:
    case 848:
    case 849:
    case 852:
    case 853:
    case 889:
    case 890:
    case 893:
    case 894:
    case 905:
    case 906:
    case 909:
    case 910:
    case 12216:
    case 12217:
    case 12220:
    case 12221:
    case 12232:
    case 12233:
    case 12236:
    case 12237:
    case 12272:
    case 12273:
    case 12276:
    case 12277:
    case 12288:
    case 12289:
    case 12292:
    case 12293:
    case 12328:
    case 12329:
    case 12332:
    case 12333:
    case 12344:
    case 12345:
    case 12348:
    case 12349:
    case 12384:
    case 12385:
    case 12388:
    case 12389:
    case 12400:
    case 12401:
    case 12404:
    case 12405:
    case 12982:
    case 12983:
    case 12986:
    case 12987:
    case 12998:
    case 12999:
    case 13002:
    case 13003:
    case 13038:
    case 13039:
    case 13042:
    case 13043:
    case 13054:
    case 13055:
    case 13058:
    case 13059:
    case 13094:
    case 13095:
    case 13098:
    case 13099:
    case 13110:
    case 13111:
    case 13114:
    case 13115:
    case 13150:
    case 13151:
    case 13154:
    case 13155:
    case 13166:
    case 13167:
    case 13170:
    case 13171:
      uint64_t v72 = *((void *)a2 + 2);
      uint64_t v27 = v72 + 128;
      int v73 = *(unsigned __int8 *)(v72 + 128);
      if (v73 == 1) {
        goto LABEL_1606;
      }
      if (v73 == 2)
      {
        int v29 = *(_DWORD *)(v72 + 136);
        goto LABEL_1607;
      }
      uint64_t v71 = *(void *)(v72 + 136);
      goto LABEL_209;
    case 834:
    case 835:
    case 838:
    case 839:
    case 840:
    case 841:
    case 844:
    case 845:
    case 850:
    case 851:
    case 854:
    case 855:
    case 856:
    case 857:
    case 860:
    case 861:
    case 864:
    case 865:
    case 868:
    case 869:
    case 877:
    case 878:
    case 881:
    case 882:
    case 891:
    case 892:
    case 895:
    case 896:
    case 897:
    case 898:
    case 901:
    case 902:
    case 907:
    case 908:
    case 911:
    case 912:
    case 913:
    case 914:
    case 917:
    case 918:
    case 921:
    case 922:
    case 925:
    case 926:
    case 933:
    case 934:
    case 937:
    case 938:
    case 12218:
    case 12219:
    case 12222:
    case 12223:
    case 12224:
    case 12225:
    case 12228:
    case 12229:
    case 12234:
    case 12235:
    case 12238:
    case 12239:
    case 12240:
    case 12241:
    case 12244:
    case 12245:
    case 12248:
    case 12249:
    case 12252:
    case 12253:
    case 12260:
    case 12261:
    case 12264:
    case 12265:
    case 12274:
    case 12275:
    case 12278:
    case 12279:
    case 12280:
    case 12281:
    case 12284:
    case 12285:
    case 12290:
    case 12291:
    case 12294:
    case 12295:
    case 12296:
    case 12297:
    case 12300:
    case 12301:
    case 12304:
    case 12305:
    case 12308:
    case 12309:
    case 12316:
    case 12317:
    case 12320:
    case 12321:
    case 12330:
    case 12331:
    case 12334:
    case 12335:
    case 12336:
    case 12337:
    case 12340:
    case 12341:
    case 12346:
    case 12347:
    case 12350:
    case 12351:
    case 12352:
    case 12353:
    case 12356:
    case 12357:
    case 12360:
    case 12361:
    case 12364:
    case 12365:
    case 12372:
    case 12373:
    case 12376:
    case 12377:
    case 12386:
    case 12387:
    case 12390:
    case 12391:
    case 12392:
    case 12393:
    case 12396:
    case 12397:
    case 12402:
    case 12403:
    case 12406:
    case 12407:
    case 12408:
    case 12409:
    case 12412:
    case 12413:
    case 12416:
    case 12417:
    case 12420:
    case 12421:
    case 12428:
    case 12429:
    case 12432:
    case 12433:
    case 12984:
    case 12985:
    case 12988:
    case 12989:
    case 12990:
    case 12991:
    case 12994:
    case 12995:
    case 13000:
    case 13001:
    case 13004:
    case 13005:
    case 13006:
    case 13007:
    case 13010:
    case 13011:
    case 13014:
    case 13015:
    case 13018:
    case 13019:
    case 13026:
    case 13027:
    case 13030:
    case 13031:
    case 13040:
    case 13041:
    case 13044:
    case 13045:
    case 13046:
    case 13047:
    case 13050:
    case 13051:
    case 13056:
    case 13057:
    case 13060:
    case 13061:
    case 13062:
    case 13063:
    case 13066:
    case 13067:
    case 13070:
    case 13071:
    case 13074:
    case 13075:
    case 13082:
    case 13083:
    case 13086:
    case 13087:
    case 13096:
    case 13097:
    case 13100:
    case 13101:
    case 13102:
    case 13103:
    case 13106:
    case 13107:
    case 13112:
    case 13113:
    case 13116:
    case 13117:
    case 13118:
    case 13119:
    case 13122:
    case 13123:
    case 13126:
    case 13127:
    case 13130:
    case 13131:
    case 13138:
    case 13139:
    case 13142:
    case 13143:
    case 13152:
    case 13153:
    case 13156:
    case 13157:
    case 13158:
    case 13159:
    case 13162:
    case 13163:
    case 13168:
    case 13169:
    case 13172:
    case 13173:
    case 13174:
    case 13175:
    case 13178:
    case 13179:
    case 13182:
    case 13183:
    case 13186:
    case 13187:
    case 13194:
    case 13195:
    case 13198:
    case 13199:
      uint64_t v26 = *((void *)a2 + 2);
      uint64_t v27 = v26 + 112;
      int v28 = *(unsigned __int8 *)(v26 + 112);
      if (v28 == 1) {
        goto LABEL_1606;
      }
      if (v28 == 2)
      {
        int v29 = *(_DWORD *)(v26 + 120);
        goto LABEL_1607;
      }
      uint64_t v71 = *(void *)(v26 + 120);
      goto LABEL_209;
    case 842:
    case 843:
    case 846:
    case 847:
    case 858:
    case 859:
    case 862:
    case 863:
    case 866:
    case 867:
    case 870:
    case 871:
    case 872:
    case 873:
    case 875:
    case 876:
    case 879:
    case 880:
    case 883:
    case 884:
    case 885:
    case 886:
    case 887:
    case 888:
    case 899:
    case 900:
    case 903:
    case 904:
    case 915:
    case 916:
    case 919:
    case 920:
    case 923:
    case 924:
    case 927:
    case 928:
    case 929:
    case 930:
    case 931:
    case 932:
    case 935:
    case 936:
    case 939:
    case 940:
    case 941:
    case 942:
    case 943:
    case 944:
    case 12226:
    case 12227:
    case 12230:
    case 12231:
    case 12242:
    case 12243:
    case 12246:
    case 12247:
    case 12250:
    case 12251:
    case 12254:
    case 12255:
    case 12256:
    case 12257:
    case 12258:
    case 12259:
    case 12262:
    case 12263:
    case 12266:
    case 12267:
    case 12268:
    case 12269:
    case 12270:
    case 12271:
    case 12282:
    case 12283:
    case 12286:
    case 12287:
    case 12298:
    case 12299:
    case 12302:
    case 12303:
    case 12306:
    case 12307:
    case 12310:
    case 12311:
    case 12312:
    case 12313:
    case 12314:
    case 12315:
    case 12318:
    case 12319:
    case 12322:
    case 12323:
    case 12324:
    case 12325:
    case 12326:
    case 12327:
    case 12338:
    case 12339:
    case 12342:
    case 12343:
    case 12354:
    case 12355:
    case 12358:
    case 12359:
    case 12362:
    case 12363:
    case 12366:
    case 12367:
    case 12368:
    case 12369:
    case 12370:
    case 12371:
    case 12374:
    case 12375:
    case 12378:
    case 12379:
    case 12380:
    case 12381:
    case 12382:
    case 12383:
    case 12394:
    case 12395:
    case 12398:
    case 12399:
    case 12410:
    case 12411:
    case 12414:
    case 12415:
    case 12418:
    case 12419:
    case 12422:
    case 12423:
    case 12424:
    case 12425:
    case 12426:
    case 12427:
    case 12430:
    case 12431:
    case 12434:
    case 12435:
    case 12436:
    case 12437:
    case 12438:
    case 12439:
    case 12992:
    case 12993:
    case 12996:
    case 12997:
    case 13008:
    case 13009:
    case 13012:
    case 13013:
    case 13016:
    case 13017:
    case 13020:
    case 13021:
    case 13022:
    case 13023:
    case 13024:
    case 13025:
    case 13028:
    case 13029:
    case 13032:
    case 13033:
    case 13034:
    case 13035:
    case 13036:
    case 13037:
    case 13048:
    case 13049:
    case 13052:
    case 13053:
    case 13064:
    case 13065:
    case 13068:
    case 13069:
    case 13072:
    case 13073:
    case 13076:
    case 13077:
    case 13078:
    case 13079:
    case 13080:
    case 13081:
    case 13084:
    case 13085:
    case 13088:
    case 13089:
    case 13090:
    case 13091:
    case 13092:
    case 13093:
    case 13104:
    case 13105:
    case 13108:
    case 13109:
    case 13120:
    case 13121:
    case 13124:
    case 13125:
    case 13128:
    case 13129:
    case 13132:
    case 13133:
    case 13134:
    case 13135:
    case 13136:
    case 13137:
    case 13140:
    case 13141:
    case 13144:
    case 13145:
    case 13146:
    case 13147:
    case 13148:
    case 13149:
    case 13160:
    case 13161:
    case 13164:
    case 13165:
    case 13176:
    case 13177:
    case 13180:
    case 13181:
    case 13184:
    case 13185:
    case 13188:
    case 13189:
    case 13190:
    case 13191:
    case 13192:
    case 13193:
    case 13196:
    case 13197:
    case 13200:
    case 13201:
    case 13202:
    case 13203:
    case 13204:
    case 13205:
      uint64_t v30 = *((void *)a2 + 2);
      uint64_t v27 = v30 + 96;
      int v31 = *(unsigned __int8 *)(v30 + 96);
      if (v31 == 1) {
        goto LABEL_1606;
      }
      if (v31 == 2)
      {
        int v29 = *(_DWORD *)(v30 + 104);
        goto LABEL_1607;
      }
      uint64_t v71 = *(void *)(v30 + 104);
      goto LABEL_209;
    case 874:
      uint64_t v1122 = *((void *)a2 + 2);
      uint64_t v27 = v1122 + 80;
      int v1123 = *(unsigned __int8 *)(v1122 + 80);
      if (v1123 == 1)
      {
LABEL_1606:
        LOBYTE(v29) = sub_1CBC796AC(a1, v27, *(void *)(a4 + 192), 0);
      }
      else if (v1123 == 2)
      {
        int v29 = *(_DWORD *)(v1122 + 88);
      }
      else
      {
        uint64_t v71 = *(void *)(v1122 + 88);
LABEL_209:
        if (*(unsigned char *)v71 == 4) {
          int v29 = *(_DWORD *)(*(void *)(v71 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v29) = 0;
        }
      }
LABEL_1607:
      uint64_t v110 = v29 & 0x1F;
LABEL_1608:
      v8 |= v110 << 53;
      return v8;
    case 1003:
    case 1019:
    case 1035:
      int v9 = *(_DWORD *)(*((void *)a2 + 2) + 168);
      goto LABEL_14;
    case 1004:
    case 1005:
    case 1007:
    case 1011:
    case 1020:
    case 1021:
    case 1023:
    case 1027:
    case 1036:
    case 1037:
    case 1039:
    case 1043:
      int v9 = *(_DWORD *)(*((void *)a2 + 2) + 152);
      goto LABEL_14;
    case 1006:
    case 1008:
    case 1009:
    case 1012:
    case 1013:
    case 1022:
    case 1024:
    case 1025:
    case 1028:
    case 1029:
    case 1038:
    case 1040:
    case 1041:
    case 1044:
    case 1045:
    case 4737:
    case 4738:
    case 4739:
    case 4740:
    case 4747:
    case 4748:
    case 4749:
    case 4750:
    case 4777:
    case 4778:
    case 4779:
    case 4780:
    case 4787:
    case 4788:
    case 4789:
    case 4790:
    case 4865:
    case 4866:
    case 4867:
    case 4868:
    case 4875:
    case 4876:
    case 4877:
    case 4878:
    case 4905:
    case 4906:
    case 4907:
    case 4908:
    case 4915:
    case 4916:
    case 4917:
    case 4918:
    case 5005:
    case 5006:
    case 5007:
    case 5008:
    case 5015:
    case 5016:
    case 5017:
    case 5018:
    case 5045:
    case 5046:
    case 5047:
    case 5048:
    case 5055:
    case 5056:
    case 5057:
    case 5058:
    case 5133:
    case 5134:
    case 5135:
    case 5136:
    case 5143:
    case 5144:
    case 5145:
    case 5146:
    case 5173:
    case 5174:
    case 5175:
    case 5176:
    case 5183:
    case 5184:
    case 5185:
    case 5186:
    case 5273:
    case 5274:
    case 5275:
    case 5276:
    case 5283:
    case 5284:
    case 5285:
    case 5286:
    case 5313:
    case 5314:
    case 5315:
    case 5316:
    case 5323:
    case 5324:
    case 5325:
    case 5326:
    case 5401:
    case 5402:
    case 5403:
    case 5404:
    case 5411:
    case 5412:
    case 5413:
    case 5414:
    case 5441:
    case 5442:
    case 5443:
    case 5444:
    case 5451:
    case 5452:
    case 5453:
    case 5454:
    case 5541:
    case 5542:
    case 5543:
    case 5544:
    case 5551:
    case 5552:
    case 5553:
    case 5554:
    case 5581:
    case 5582:
    case 5583:
    case 5584:
    case 5591:
    case 5592:
    case 5593:
    case 5594:
    case 5669:
    case 5670:
    case 5671:
    case 5672:
    case 5679:
    case 5680:
    case 5681:
    case 5682:
    case 5709:
    case 5710:
    case 5711:
    case 5712:
    case 5719:
    case 5720:
    case 5721:
    case 5722:
    case 5809:
    case 5810:
    case 5811:
    case 5812:
    case 5819:
    case 5820:
    case 5821:
    case 5822:
    case 5849:
    case 5850:
    case 5851:
    case 5852:
    case 5859:
    case 5860:
    case 5861:
    case 5862:
    case 5937:
    case 5938:
    case 5939:
    case 5940:
    case 5947:
    case 5948:
    case 5949:
    case 5950:
    case 5977:
    case 5978:
    case 5979:
    case 5980:
    case 5987:
    case 5988:
    case 5989:
    case 5990:
    case 6077:
    case 6078:
    case 6079:
    case 6080:
    case 6087:
    case 6088:
    case 6089:
    case 6090:
    case 6117:
    case 6118:
    case 6119:
    case 6120:
    case 6127:
    case 6128:
    case 6129:
    case 6130:
    case 6205:
    case 6206:
    case 6207:
    case 6208:
    case 6215:
    case 6216:
    case 6217:
    case 6218:
    case 6245:
    case 6246:
    case 6247:
    case 6248:
    case 6255:
    case 6256:
    case 6257:
    case 6258:
    case 6345:
    case 6346:
    case 6347:
    case 6348:
    case 6355:
    case 6356:
    case 6357:
    case 6358:
    case 6385:
    case 6386:
    case 6387:
    case 6388:
    case 6395:
    case 6396:
    case 6397:
    case 6398:
    case 6473:
    case 6474:
    case 6475:
    case 6476:
    case 6483:
    case 6484:
    case 6485:
    case 6486:
    case 6513:
    case 6514:
    case 6515:
    case 6516:
    case 6523:
    case 6524:
    case 6525:
    case 6526:
    case 6613:
    case 6614:
    case 6615:
    case 6616:
    case 6623:
    case 6624:
    case 6625:
    case 6626:
    case 6653:
    case 6654:
    case 6655:
    case 6656:
    case 6663:
    case 6664:
    case 6665:
    case 6666:
    case 6741:
    case 6742:
    case 6743:
    case 6744:
    case 6751:
    case 6752:
    case 6753:
    case 6754:
    case 6781:
    case 6782:
    case 6783:
    case 6784:
    case 6791:
    case 6792:
    case 6793:
    case 6794:
    case 6881:
    case 6882:
    case 6883:
    case 6884:
    case 6891:
    case 6892:
    case 6893:
    case 6894:
    case 6921:
    case 6922:
    case 6923:
    case 6924:
    case 6931:
    case 6932:
    case 6933:
    case 6934:
    case 7009:
    case 7010:
    case 7011:
    case 7012:
    case 7019:
    case 7020:
    case 7021:
    case 7022:
    case 7049:
    case 7050:
    case 7051:
    case 7052:
    case 7059:
    case 7060:
    case 7061:
    case 7062:
    case 7149:
    case 7150:
    case 7151:
    case 7152:
    case 7159:
    case 7160:
    case 7161:
    case 7162:
    case 7189:
    case 7190:
    case 7191:
    case 7192:
    case 7199:
    case 7200:
    case 7201:
    case 7202:
    case 7277:
    case 7278:
    case 7279:
    case 7280:
    case 7287:
    case 7288:
    case 7289:
    case 7290:
    case 7317:
    case 7318:
    case 7319:
    case 7320:
    case 7327:
    case 7328:
    case 7329:
    case 7330:
    case 7417:
    case 7418:
    case 7419:
    case 7420:
    case 7427:
    case 7428:
    case 7429:
    case 7430:
    case 7457:
    case 7458:
    case 7459:
    case 7460:
    case 7467:
    case 7468:
    case 7469:
    case 7470:
    case 7545:
    case 7546:
    case 7547:
    case 7548:
    case 7555:
    case 7556:
    case 7557:
    case 7558:
    case 7585:
    case 7586:
    case 7587:
    case 7588:
    case 7595:
    case 7596:
    case 7597:
    case 7598:
    case 7685:
    case 7686:
    case 7687:
    case 7688:
    case 7695:
    case 7696:
    case 7697:
    case 7698:
    case 7725:
    case 7726:
    case 7727:
    case 7728:
    case 7735:
    case 7736:
    case 7737:
    case 7738:
    case 7813:
    case 7814:
    case 7815:
    case 7816:
    case 7823:
    case 7824:
    case 7825:
    case 7826:
    case 7853:
    case 7854:
    case 7855:
    case 7856:
    case 7863:
    case 7864:
    case 7865:
    case 7866:
    case 7953:
    case 7954:
    case 7955:
    case 7956:
    case 7963:
    case 7964:
    case 7965:
    case 7966:
    case 7993:
    case 7994:
    case 7995:
    case 7996:
    case 8003:
    case 8004:
    case 8005:
    case 8006:
    case 8081:
    case 8082:
    case 8083:
    case 8084:
    case 8091:
    case 8092:
    case 8093:
    case 8094:
    case 8121:
    case 8122:
    case 8123:
    case 8124:
    case 8131:
    case 8132:
    case 8133:
    case 8134:
    case 8221:
    case 8222:
    case 8223:
    case 8224:
    case 8231:
    case 8232:
    case 8233:
    case 8234:
    case 8261:
    case 8262:
    case 8263:
    case 8264:
    case 8271:
    case 8272:
    case 8273:
    case 8274:
    case 8349:
    case 8350:
    case 8351:
    case 8352:
    case 8359:
    case 8360:
    case 8361:
    case 8362:
    case 8389:
    case 8390:
    case 8391:
    case 8392:
    case 8399:
    case 8400:
    case 8401:
    case 8402:
    case 8489:
    case 8490:
    case 8491:
    case 8492:
    case 8499:
    case 8500:
    case 8501:
    case 8502:
    case 8529:
    case 8530:
    case 8531:
    case 8532:
    case 8539:
    case 8540:
    case 8541:
    case 8542:
    case 8617:
    case 8618:
    case 8619:
    case 8620:
    case 8627:
    case 8628:
    case 8629:
    case 8630:
    case 8657:
    case 8658:
    case 8659:
    case 8660:
    case 8667:
    case 8668:
    case 8669:
    case 8670:
    case 8757:
    case 8758:
    case 8759:
    case 8760:
    case 8767:
    case 8768:
    case 8769:
    case 8770:
    case 8797:
    case 8798:
    case 8799:
    case 8800:
    case 8807:
    case 8808:
    case 8809:
    case 8810:
    case 8885:
    case 8886:
    case 8887:
    case 8888:
    case 8895:
    case 8896:
    case 8897:
    case 8898:
    case 8925:
    case 8926:
    case 8927:
    case 8928:
    case 8935:
    case 8936:
    case 8937:
    case 8938:
    case 9025:
    case 9026:
    case 9027:
    case 9028:
    case 9035:
    case 9036:
    case 9037:
    case 9038:
    case 9065:
    case 9066:
    case 9067:
    case 9068:
    case 9075:
    case 9076:
    case 9077:
    case 9078:
    case 9153:
    case 9154:
    case 9155:
    case 9156:
    case 9163:
    case 9164:
    case 9165:
    case 9166:
    case 9193:
    case 9194:
    case 9195:
    case 9196:
    case 9203:
    case 9204:
    case 9205:
    case 9206:
    case 9293:
    case 9294:
    case 9295:
    case 9296:
    case 9303:
    case 9304:
    case 9305:
    case 9306:
    case 9333:
    case 9334:
    case 9335:
    case 9336:
    case 9343:
    case 9344:
    case 9345:
    case 9346:
    case 9421:
    case 9422:
    case 9423:
    case 9424:
    case 9431:
    case 9432:
    case 9433:
    case 9434:
    case 9461:
    case 9462:
    case 9463:
    case 9464:
    case 9471:
    case 9472:
    case 9473:
    case 9474:
    case 9561:
    case 9562:
    case 9563:
    case 9564:
    case 9571:
    case 9572:
    case 9573:
    case 9574:
    case 9601:
    case 9602:
    case 9603:
    case 9604:
    case 9611:
    case 9612:
    case 9613:
    case 9614:
    case 9689:
    case 9690:
    case 9691:
    case 9692:
    case 9699:
    case 9700:
    case 9701:
    case 9702:
    case 9729:
    case 9730:
    case 9731:
    case 9732:
    case 9739:
    case 9740:
    case 9741:
    case 9742:
    case 9829:
    case 9830:
    case 9831:
    case 9832:
    case 9839:
    case 9840:
    case 9841:
    case 9842:
    case 9869:
    case 9870:
    case 9871:
    case 9872:
    case 9879:
    case 9880:
    case 9881:
    case 9882:
    case 9957:
    case 9958:
    case 9959:
    case 9960:
    case 9967:
    case 9968:
    case 9969:
    case 9970:
    case 9997:
    case 9998:
    case 9999:
    case 10000:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
      int v9 = *(_DWORD *)(*((void *)a2 + 2) + 136);
      goto LABEL_14;
    case 1010:
    case 1014:
    case 1026:
    case 1030:
    case 1042:
    case 1046:
    case 4741:
    case 4742:
    case 4743:
    case 4744:
    case 4751:
    case 4752:
    case 4753:
    case 4754:
    case 4757:
    case 4758:
    case 4759:
    case 4760:
    case 4767:
    case 4768:
    case 4769:
    case 4770:
    case 4781:
    case 4782:
    case 4783:
    case 4784:
    case 4791:
    case 4792:
    case 4793:
    case 4794:
    case 4797:
    case 4798:
    case 4799:
    case 4800:
    case 4807:
    case 4808:
    case 4809:
    case 4810:
    case 4817:
    case 4818:
    case 4819:
    case 4820:
    case 4827:
    case 4828:
    case 4829:
    case 4830:
    case 4841:
    case 4842:
    case 4843:
    case 4844:
    case 4851:
    case 4852:
    case 4853:
    case 4854:
    case 4869:
    case 4870:
    case 4871:
    case 4872:
    case 4879:
    case 4880:
    case 4881:
    case 4882:
    case 4885:
    case 4886:
    case 4887:
    case 4888:
    case 4895:
    case 4896:
    case 4897:
    case 4898:
    case 4909:
    case 4910:
    case 4911:
    case 4912:
    case 4919:
    case 4920:
    case 4921:
    case 4922:
    case 4925:
    case 4926:
    case 4927:
    case 4928:
    case 4935:
    case 4936:
    case 4937:
    case 4938:
    case 4945:
    case 4946:
    case 4947:
    case 4948:
    case 4955:
    case 4956:
    case 4957:
    case 4958:
    case 4969:
    case 4970:
    case 4971:
    case 4972:
    case 4979:
    case 4980:
    case 4981:
    case 4982:
    case 5009:
    case 5010:
    case 5011:
    case 5012:
    case 5019:
    case 5020:
    case 5021:
    case 5022:
    case 5025:
    case 5026:
    case 5027:
    case 5028:
    case 5035:
    case 5036:
    case 5037:
    case 5038:
    case 5049:
    case 5050:
    case 5051:
    case 5052:
    case 5059:
    case 5060:
    case 5061:
    case 5062:
    case 5065:
    case 5066:
    case 5067:
    case 5068:
    case 5075:
    case 5076:
    case 5077:
    case 5078:
    case 5085:
    case 5086:
    case 5087:
    case 5088:
    case 5095:
    case 5096:
    case 5097:
    case 5098:
    case 5109:
    case 5110:
    case 5111:
    case 5112:
    case 5119:
    case 5120:
    case 5121:
    case 5122:
    case 5137:
    case 5138:
    case 5139:
    case 5140:
    case 5147:
    case 5148:
    case 5149:
    case 5150:
    case 5153:
    case 5154:
    case 5155:
    case 5156:
    case 5163:
    case 5164:
    case 5165:
    case 5166:
    case 5177:
    case 5178:
    case 5179:
    case 5180:
    case 5187:
    case 5188:
    case 5189:
    case 5190:
    case 5193:
    case 5194:
    case 5195:
    case 5196:
    case 5203:
    case 5204:
    case 5205:
    case 5206:
    case 5213:
    case 5214:
    case 5215:
    case 5216:
    case 5223:
    case 5224:
    case 5225:
    case 5226:
    case 5237:
    case 5238:
    case 5239:
    case 5240:
    case 5247:
    case 5248:
    case 5249:
    case 5250:
    case 5277:
    case 5278:
    case 5279:
    case 5280:
    case 5287:
    case 5288:
    case 5289:
    case 5290:
    case 5293:
    case 5294:
    case 5295:
    case 5296:
    case 5303:
    case 5304:
    case 5305:
    case 5306:
    case 5317:
    case 5318:
    case 5319:
    case 5320:
    case 5327:
    case 5328:
    case 5329:
    case 5330:
    case 5333:
    case 5334:
    case 5335:
    case 5336:
    case 5343:
    case 5344:
    case 5345:
    case 5346:
    case 5353:
    case 5354:
    case 5355:
    case 5356:
    case 5363:
    case 5364:
    case 5365:
    case 5366:
    case 5377:
    case 5378:
    case 5379:
    case 5380:
    case 5387:
    case 5388:
    case 5389:
    case 5390:
    case 5405:
    case 5406:
    case 5407:
    case 5408:
    case 5415:
    case 5416:
    case 5417:
    case 5418:
    case 5421:
    case 5422:
    case 5423:
    case 5424:
    case 5431:
    case 5432:
    case 5433:
    case 5434:
    case 5445:
    case 5446:
    case 5447:
    case 5448:
    case 5455:
    case 5456:
    case 5457:
    case 5458:
    case 5461:
    case 5462:
    case 5463:
    case 5464:
    case 5471:
    case 5472:
    case 5473:
    case 5474:
    case 5481:
    case 5482:
    case 5483:
    case 5484:
    case 5491:
    case 5492:
    case 5493:
    case 5494:
    case 5505:
    case 5506:
    case 5507:
    case 5508:
    case 5515:
    case 5516:
    case 5517:
    case 5518:
    case 5545:
    case 5546:
    case 5547:
    case 5548:
    case 5555:
    case 5556:
    case 5557:
    case 5558:
    case 5561:
    case 5562:
    case 5563:
    case 5564:
    case 5571:
    case 5572:
    case 5573:
    case 5574:
    case 5585:
    case 5586:
    case 5587:
    case 5588:
    case 5595:
    case 5596:
    case 5597:
    case 5598:
    case 5601:
    case 5602:
    case 5603:
    case 5604:
    case 5611:
    case 5612:
    case 5613:
    case 5614:
    case 5621:
    case 5622:
    case 5623:
    case 5624:
    case 5631:
    case 5632:
    case 5633:
    case 5634:
    case 5645:
    case 5646:
    case 5647:
    case 5648:
    case 5655:
    case 5656:
    case 5657:
    case 5658:
    case 5673:
    case 5674:
    case 5675:
    case 5676:
    case 5683:
    case 5684:
    case 5685:
    case 5686:
    case 5689:
    case 5690:
    case 5691:
    case 5692:
    case 5699:
    case 5700:
    case 5701:
    case 5702:
    case 5713:
    case 5714:
    case 5715:
    case 5716:
    case 5723:
    case 5724:
    case 5725:
    case 5726:
    case 5729:
    case 5730:
    case 5731:
    case 5732:
    case 5739:
    case 5740:
    case 5741:
    case 5742:
    case 5749:
    case 5750:
    case 5751:
    case 5752:
    case 5759:
    case 5760:
    case 5761:
    case 5762:
    case 5773:
    case 5774:
    case 5775:
    case 5776:
    case 5783:
    case 5784:
    case 5785:
    case 5786:
    case 5813:
    case 5814:
    case 5815:
    case 5816:
    case 5823:
    case 5824:
    case 5825:
    case 5826:
    case 5829:
    case 5830:
    case 5831:
    case 5832:
    case 5839:
    case 5840:
    case 5841:
    case 5842:
    case 5853:
    case 5854:
    case 5855:
    case 5856:
    case 5863:
    case 5864:
    case 5865:
    case 5866:
    case 5869:
    case 5870:
    case 5871:
    case 5872:
    case 5879:
    case 5880:
    case 5881:
    case 5882:
    case 5889:
    case 5890:
    case 5891:
    case 5892:
    case 5899:
    case 5900:
    case 5901:
    case 5902:
    case 5913:
    case 5914:
    case 5915:
    case 5916:
    case 5923:
    case 5924:
    case 5925:
    case 5926:
    case 5941:
    case 5942:
    case 5943:
    case 5944:
    case 5951:
    case 5952:
    case 5953:
    case 5954:
    case 5957:
    case 5958:
    case 5959:
    case 5960:
    case 5967:
    case 5968:
    case 5969:
    case 5970:
    case 5981:
    case 5982:
    case 5983:
    case 5984:
    case 5991:
    case 5992:
    case 5993:
    case 5994:
    case 5997:
    case 5998:
    case 5999:
    case 6000:
    case 6007:
    case 6008:
    case 6009:
    case 6010:
    case 6017:
    case 6018:
    case 6019:
    case 6020:
    case 6027:
    case 6028:
    case 6029:
    case 6030:
    case 6041:
    case 6042:
    case 6043:
    case 6044:
    case 6051:
    case 6052:
    case 6053:
    case 6054:
    case 6081:
    case 6082:
    case 6083:
    case 6084:
    case 6091:
    case 6092:
    case 6093:
    case 6094:
    case 6097:
    case 6098:
    case 6099:
    case 6100:
    case 6107:
    case 6108:
    case 6109:
    case 6110:
    case 6121:
    case 6122:
    case 6123:
    case 6124:
    case 6131:
    case 6132:
    case 6133:
    case 6134:
    case 6137:
    case 6138:
    case 6139:
    case 6140:
    case 6147:
    case 6148:
    case 6149:
    case 6150:
    case 6157:
    case 6158:
    case 6159:
    case 6160:
    case 6167:
    case 6168:
    case 6169:
    case 6170:
    case 6181:
    case 6182:
    case 6183:
    case 6184:
    case 6191:
    case 6192:
    case 6193:
    case 6194:
    case 6209:
    case 6210:
    case 6211:
    case 6212:
    case 6219:
    case 6220:
    case 6221:
    case 6222:
    case 6225:
    case 6226:
    case 6227:
    case 6228:
    case 6235:
    case 6236:
    case 6237:
    case 6238:
    case 6249:
    case 6250:
    case 6251:
    case 6252:
    case 6259:
    case 6260:
    case 6261:
    case 6262:
    case 6265:
    case 6266:
    case 6267:
    case 6268:
    case 6275:
    case 6276:
    case 6277:
    case 6278:
    case 6285:
    case 6286:
    case 6287:
    case 6288:
    case 6295:
    case 6296:
    case 6297:
    case 6298:
    case 6309:
    case 6310:
    case 6311:
    case 6312:
    case 6319:
    case 6320:
    case 6321:
    case 6322:
    case 6349:
    case 6350:
    case 6351:
    case 6352:
    case 6359:
    case 6360:
    case 6361:
    case 6362:
    case 6365:
    case 6366:
    case 6367:
    case 6368:
    case 6375:
    case 6376:
    case 6377:
    case 6378:
    case 6389:
    case 6390:
    case 6391:
    case 6392:
    case 6399:
    case 6400:
    case 6401:
    case 6402:
    case 6405:
    case 6406:
    case 6407:
    case 6408:
    case 6415:
    case 6416:
    case 6417:
    case 6418:
    case 6425:
    case 6426:
    case 6427:
    case 6428:
    case 6435:
    case 6436:
    case 6437:
    case 6438:
    case 6449:
    case 6450:
    case 6451:
    case 6452:
    case 6459:
    case 6460:
    case 6461:
    case 6462:
    case 6477:
    case 6478:
    case 6479:
    case 6480:
    case 6487:
    case 6488:
    case 6489:
    case 6490:
    case 6493:
    case 6494:
    case 6495:
    case 6496:
    case 6503:
    case 6504:
    case 6505:
    case 6506:
    case 6517:
    case 6518:
    case 6519:
    case 6520:
    case 6527:
    case 6528:
    case 6529:
    case 6530:
    case 6533:
    case 6534:
    case 6535:
    case 6536:
    case 6543:
    case 6544:
    case 6545:
    case 6546:
    case 6553:
    case 6554:
    case 6555:
    case 6556:
    case 6563:
    case 6564:
    case 6565:
    case 6566:
    case 6577:
    case 6578:
    case 6579:
    case 6580:
    case 6587:
    case 6588:
    case 6589:
    case 6590:
    case 6617:
    case 6618:
    case 6619:
    case 6620:
    case 6627:
    case 6628:
    case 6629:
    case 6630:
    case 6633:
    case 6634:
    case 6635:
    case 6636:
    case 6643:
    case 6644:
    case 6645:
    case 6646:
    case 6657:
    case 6658:
    case 6659:
    case 6660:
    case 6667:
    case 6668:
    case 6669:
    case 6670:
    case 6673:
    case 6674:
    case 6675:
    case 6676:
    case 6683:
    case 6684:
    case 6685:
    case 6686:
    case 6693:
    case 6694:
    case 6695:
    case 6696:
    case 6703:
    case 6704:
    case 6705:
    case 6706:
    case 6717:
    case 6718:
    case 6719:
    case 6720:
    case 6727:
    case 6728:
    case 6729:
    case 6730:
    case 6745:
    case 6746:
    case 6747:
    case 6748:
    case 6755:
    case 6756:
    case 6757:
    case 6758:
    case 6761:
    case 6762:
    case 6763:
    case 6764:
    case 6771:
    case 6772:
    case 6773:
    case 6774:
    case 6785:
    case 6786:
    case 6787:
    case 6788:
    case 6795:
    case 6796:
    case 6797:
    case 6798:
    case 6801:
    case 6802:
    case 6803:
    case 6804:
    case 6811:
    case 6812:
    case 6813:
    case 6814:
    case 6821:
    case 6822:
    case 6823:
    case 6824:
    case 6831:
    case 6832:
    case 6833:
    case 6834:
    case 6845:
    case 6846:
    case 6847:
    case 6848:
    case 6855:
    case 6856:
    case 6857:
    case 6858:
    case 6885:
    case 6886:
    case 6887:
    case 6888:
    case 6895:
    case 6896:
    case 6897:
    case 6898:
    case 6901:
    case 6902:
    case 6903:
    case 6904:
    case 6911:
    case 6912:
    case 6913:
    case 6914:
    case 6925:
    case 6926:
    case 6927:
    case 6928:
    case 6935:
    case 6936:
    case 6937:
    case 6938:
    case 6941:
    case 6942:
    case 6943:
    case 6944:
    case 6951:
    case 6952:
    case 6953:
    case 6954:
    case 6961:
    case 6962:
    case 6963:
    case 6964:
    case 6971:
    case 6972:
    case 6973:
    case 6974:
    case 6985:
    case 6986:
    case 6987:
    case 6988:
    case 6995:
    case 6996:
    case 6997:
    case 6998:
    case 7013:
    case 7014:
    case 7015:
    case 7016:
    case 7023:
    case 7024:
    case 7025:
    case 7026:
    case 7029:
    case 7030:
    case 7031:
    case 7032:
    case 7039:
    case 7040:
    case 7041:
    case 7042:
    case 7053:
    case 7054:
    case 7055:
    case 7056:
    case 7063:
    case 7064:
    case 7065:
    case 7066:
    case 7069:
    case 7070:
    case 7071:
    case 7072:
    case 7079:
    case 7080:
    case 7081:
    case 7082:
    case 7089:
    case 7090:
    case 7091:
    case 7092:
    case 7099:
    case 7100:
    case 7101:
    case 7102:
    case 7113:
    case 7114:
    case 7115:
    case 7116:
    case 7123:
    case 7124:
    case 7125:
    case 7126:
    case 7153:
    case 7154:
    case 7155:
    case 7156:
    case 7163:
    case 7164:
    case 7165:
    case 7166:
    case 7169:
    case 7170:
    case 7171:
    case 7172:
    case 7179:
    case 7180:
    case 7181:
    case 7182:
    case 7193:
    case 7194:
    case 7195:
    case 7196:
    case 7203:
    case 7204:
    case 7205:
    case 7206:
    case 7209:
    case 7210:
    case 7211:
    case 7212:
    case 7219:
    case 7220:
    case 7221:
    case 7222:
    case 7229:
    case 7230:
    case 7231:
    case 7232:
    case 7239:
    case 7240:
    case 7241:
    case 7242:
    case 7253:
    case 7254:
    case 7255:
    case 7256:
    case 7263:
    case 7264:
    case 7265:
    case 7266:
    case 7281:
    case 7282:
    case 7283:
    case 7284:
    case 7291:
    case 7292:
    case 7293:
    case 7294:
    case 7297:
    case 7298:
    case 7299:
    case 7300:
    case 7307:
    case 7308:
    case 7309:
    case 7310:
    case 7321:
    case 7322:
    case 7323:
    case 7324:
    case 7331:
    case 7332:
    case 7333:
    case 7334:
    case 7337:
    case 7338:
    case 7339:
    case 7340:
    case 7347:
    case 7348:
    case 7349:
    case 7350:
    case 7357:
    case 7358:
    case 7359:
    case 7360:
    case 7367:
    case 7368:
    case 7369:
    case 7370:
    case 7381:
    case 7382:
    case 7383:
    case 7384:
    case 7391:
    case 7392:
    case 7393:
    case 7394:
    case 7421:
    case 7422:
    case 7423:
    case 7424:
    case 7431:
    case 7432:
    case 7433:
    case 7434:
    case 7437:
    case 7438:
    case 7439:
    case 7440:
    case 7447:
    case 7448:
    case 7449:
    case 7450:
    case 7461:
    case 7462:
    case 7463:
    case 7464:
    case 7471:
    case 7472:
    case 7473:
    case 7474:
    case 7477:
    case 7478:
    case 7479:
    case 7480:
    case 7487:
    case 7488:
    case 7489:
    case 7490:
    case 7497:
    case 7498:
    case 7499:
    case 7500:
    case 7507:
    case 7508:
    case 7509:
    case 7510:
    case 7521:
    case 7522:
    case 7523:
    case 7524:
    case 7531:
    case 7532:
    case 7533:
    case 7534:
    case 7549:
    case 7550:
    case 7551:
    case 7552:
    case 7559:
    case 7560:
    case 7561:
    case 7562:
    case 7565:
    case 7566:
    case 7567:
    case 7568:
    case 7575:
    case 7576:
    case 7577:
    case 7578:
    case 7589:
    case 7590:
    case 7591:
    case 7592:
    case 7599:
    case 7600:
    case 7601:
    case 7602:
    case 7605:
    case 7606:
    case 7607:
    case 7608:
    case 7615:
    case 7616:
    case 7617:
    case 7618:
    case 7625:
    case 7626:
    case 7627:
    case 7628:
    case 7635:
    case 7636:
    case 7637:
    case 7638:
    case 7649:
    case 7650:
    case 7651:
    case 7652:
    case 7659:
    case 7660:
    case 7661:
    case 7662:
    case 7689:
    case 7690:
    case 7691:
    case 7692:
    case 7699:
    case 7700:
    case 7701:
    case 7702:
    case 7705:
    case 7706:
    case 7707:
    case 7708:
    case 7715:
    case 7716:
    case 7717:
    case 7718:
    case 7729:
    case 7730:
    case 7731:
    case 7732:
    case 7739:
    case 7740:
    case 7741:
    case 7742:
    case 7745:
    case 7746:
    case 7747:
    case 7748:
    case 7755:
    case 7756:
    case 7757:
    case 7758:
    case 7765:
    case 7766:
    case 7767:
    case 7768:
    case 7775:
    case 7776:
    case 7777:
    case 7778:
    case 7789:
    case 7790:
    case 7791:
    case 7792:
    case 7799:
    case 7800:
    case 7801:
    case 7802:
    case 7817:
    case 7818:
    case 7819:
    case 7820:
    case 7827:
    case 7828:
    case 7829:
    case 7830:
    case 7833:
    case 7834:
    case 7835:
    case 7836:
    case 7843:
    case 7844:
    case 7845:
    case 7846:
    case 7857:
    case 7858:
    case 7859:
    case 7860:
    case 7867:
    case 7868:
    case 7869:
    case 7870:
    case 7873:
    case 7874:
    case 7875:
    case 7876:
    case 7883:
    case 7884:
    case 7885:
    case 7886:
    case 7893:
    case 7894:
    case 7895:
    case 7896:
    case 7903:
    case 7904:
    case 7905:
    case 7906:
    case 7917:
    case 7918:
    case 7919:
    case 7920:
    case 7927:
    case 7928:
    case 7929:
    case 7930:
    case 7957:
    case 7958:
    case 7959:
    case 7960:
    case 7967:
    case 7968:
    case 7969:
    case 7970:
    case 7973:
    case 7974:
    case 7975:
    case 7976:
    case 7983:
    case 7984:
    case 7985:
    case 7986:
    case 7997:
    case 7998:
    case 7999:
    case 8000:
    case 8007:
    case 8008:
    case 8009:
    case 8010:
    case 8013:
    case 8014:
    case 8015:
    case 8016:
    case 8023:
    case 8024:
    case 8025:
    case 8026:
    case 8033:
    case 8034:
    case 8035:
    case 8036:
    case 8043:
    case 8044:
    case 8045:
    case 8046:
    case 8057:
    case 8058:
    case 8059:
    case 8060:
    case 8067:
    case 8068:
    case 8069:
    case 8070:
    case 8085:
    case 8086:
    case 8087:
    case 8088:
    case 8095:
    case 8096:
    case 8097:
    case 8098:
    case 8101:
    case 8102:
    case 8103:
    case 8104:
    case 8111:
    case 8112:
    case 8113:
    case 8114:
    case 8125:
    case 8126:
    case 8127:
    case 8128:
    case 8135:
    case 8136:
    case 8137:
    case 8138:
    case 8141:
    case 8142:
    case 8143:
    case 8144:
    case 8151:
    case 8152:
    case 8153:
    case 8154:
    case 8161:
    case 8162:
    case 8163:
    case 8164:
    case 8171:
    case 8172:
    case 8173:
    case 8174:
    case 8185:
    case 8186:
    case 8187:
    case 8188:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8225:
    case 8226:
    case 8227:
    case 8228:
    case 8235:
    case 8236:
    case 8237:
    case 8238:
    case 8241:
    case 8242:
    case 8243:
    case 8244:
    case 8251:
    case 8252:
    case 8253:
    case 8254:
    case 8265:
    case 8266:
    case 8267:
    case 8268:
    case 8275:
    case 8276:
    case 8277:
    case 8278:
    case 8281:
    case 8282:
    case 8283:
    case 8284:
    case 8291:
    case 8292:
    case 8293:
    case 8294:
    case 8301:
    case 8302:
    case 8303:
    case 8304:
    case 8311:
    case 8312:
    case 8313:
    case 8314:
    case 8325:
    case 8326:
    case 8327:
    case 8328:
    case 8335:
    case 8336:
    case 8337:
    case 8338:
    case 8353:
    case 8354:
    case 8355:
    case 8356:
    case 8363:
    case 8364:
    case 8365:
    case 8366:
    case 8369:
    case 8370:
    case 8371:
    case 8372:
    case 8379:
    case 8380:
    case 8381:
    case 8382:
    case 8393:
    case 8394:
    case 8395:
    case 8396:
    case 8403:
    case 8404:
    case 8405:
    case 8406:
    case 8409:
    case 8410:
    case 8411:
    case 8412:
    case 8419:
    case 8420:
    case 8421:
    case 8422:
    case 8429:
    case 8430:
    case 8431:
    case 8432:
    case 8439:
    case 8440:
    case 8441:
    case 8442:
    case 8453:
    case 8454:
    case 8455:
    case 8456:
    case 8463:
    case 8464:
    case 8465:
    case 8466:
    case 8493:
    case 8494:
    case 8495:
    case 8496:
    case 8503:
    case 8504:
    case 8505:
    case 8506:
    case 8509:
    case 8510:
    case 8511:
    case 8512:
    case 8519:
    case 8520:
    case 8521:
    case 8522:
    case 8533:
    case 8534:
    case 8535:
    case 8536:
    case 8543:
    case 8544:
    case 8545:
    case 8546:
    case 8549:
    case 8550:
    case 8551:
    case 8552:
    case 8559:
    case 8560:
    case 8561:
    case 8562:
    case 8569:
    case 8570:
    case 8571:
    case 8572:
    case 8579:
    case 8580:
    case 8581:
    case 8582:
    case 8593:
    case 8594:
    case 8595:
    case 8596:
    case 8603:
    case 8604:
    case 8605:
    case 8606:
    case 8621:
    case 8622:
    case 8623:
    case 8624:
    case 8631:
    case 8632:
    case 8633:
    case 8634:
    case 8637:
    case 8638:
    case 8639:
    case 8640:
    case 8647:
    case 8648:
    case 8649:
    case 8650:
    case 8661:
    case 8662:
    case 8663:
    case 8664:
    case 8671:
    case 8672:
    case 8673:
    case 8674:
    case 8677:
    case 8678:
    case 8679:
    case 8680:
    case 8687:
    case 8688:
    case 8689:
    case 8690:
    case 8697:
    case 8698:
    case 8699:
    case 8700:
    case 8707:
    case 8708:
    case 8709:
    case 8710:
    case 8721:
    case 8722:
    case 8723:
    case 8724:
    case 8731:
    case 8732:
    case 8733:
    case 8734:
    case 8761:
    case 8762:
    case 8763:
    case 8764:
    case 8771:
    case 8772:
    case 8773:
    case 8774:
    case 8777:
    case 8778:
    case 8779:
    case 8780:
    case 8787:
    case 8788:
    case 8789:
    case 8790:
    case 8801:
    case 8802:
    case 8803:
    case 8804:
    case 8811:
    case 8812:
    case 8813:
    case 8814:
    case 8817:
    case 8818:
    case 8819:
    case 8820:
    case 8827:
    case 8828:
    case 8829:
    case 8830:
    case 8837:
    case 8838:
    case 8839:
    case 8840:
    case 8847:
    case 8848:
    case 8849:
    case 8850:
    case 8861:
    case 8862:
    case 8863:
    case 8864:
    case 8871:
    case 8872:
    case 8873:
    case 8874:
    case 8889:
    case 8890:
    case 8891:
    case 8892:
    case 8899:
    case 8900:
    case 8901:
    case 8902:
    case 8905:
    case 8906:
    case 8907:
    case 8908:
    case 8915:
    case 8916:
    case 8917:
    case 8918:
    case 8929:
    case 8930:
    case 8931:
    case 8932:
    case 8939:
    case 8940:
    case 8941:
    case 8942:
    case 8945:
    case 8946:
    case 8947:
    case 8948:
    case 8955:
    case 8956:
    case 8957:
    case 8958:
    case 8965:
    case 8966:
    case 8967:
    case 8968:
    case 8975:
    case 8976:
    case 8977:
    case 8978:
    case 8989:
    case 8990:
    case 8991:
    case 8992:
    case 8999:
    case 9000:
    case 9001:
    case 9002:
    case 9029:
    case 9030:
    case 9031:
    case 9032:
    case 9039:
    case 9040:
    case 9041:
    case 9042:
    case 9045:
    case 9046:
    case 9047:
    case 9048:
    case 9055:
    case 9056:
    case 9057:
    case 9058:
    case 9069:
    case 9070:
    case 9071:
    case 9072:
    case 9079:
    case 9080:
    case 9081:
    case 9082:
    case 9085:
    case 9086:
    case 9087:
    case 9088:
    case 9095:
    case 9096:
    case 9097:
    case 9098:
    case 9105:
    case 9106:
    case 9107:
    case 9108:
    case 9115:
    case 9116:
    case 9117:
    case 9118:
    case 9129:
    case 9130:
    case 9131:
    case 9132:
    case 9139:
    case 9140:
    case 9141:
    case 9142:
    case 9157:
    case 9158:
    case 9159:
    case 9160:
    case 9167:
    case 9168:
    case 9169:
    case 9170:
    case 9173:
    case 9174:
    case 9175:
    case 9176:
    case 9183:
    case 9184:
    case 9185:
    case 9186:
    case 9197:
    case 9198:
    case 9199:
    case 9200:
    case 9207:
    case 9208:
    case 9209:
    case 9210:
    case 9213:
    case 9214:
    case 9215:
    case 9216:
    case 9223:
    case 9224:
    case 9225:
    case 9226:
    case 9233:
    case 9234:
    case 9235:
    case 9236:
    case 9243:
    case 9244:
    case 9245:
    case 9246:
    case 9257:
    case 9258:
    case 9259:
    case 9260:
    case 9267:
    case 9268:
    case 9269:
    case 9270:
    case 9297:
    case 9298:
    case 9299:
    case 9300:
    case 9307:
    case 9308:
    case 9309:
    case 9310:
    case 9313:
    case 9314:
    case 9315:
    case 9316:
    case 9323:
    case 9324:
    case 9325:
    case 9326:
    case 9337:
    case 9338:
    case 9339:
    case 9340:
    case 9347:
    case 9348:
    case 9349:
    case 9350:
    case 9353:
    case 9354:
    case 9355:
    case 9356:
    case 9363:
    case 9364:
    case 9365:
    case 9366:
    case 9373:
    case 9374:
    case 9375:
    case 9376:
    case 9383:
    case 9384:
    case 9385:
    case 9386:
    case 9397:
    case 9398:
    case 9399:
    case 9400:
    case 9407:
    case 9408:
    case 9409:
    case 9410:
    case 9425:
    case 9426:
    case 9427:
    case 9428:
    case 9435:
    case 9436:
    case 9437:
    case 9438:
    case 9441:
    case 9442:
    case 9443:
    case 9444:
    case 9451:
    case 9452:
    case 9453:
    case 9454:
    case 9465:
    case 9466:
    case 9467:
    case 9468:
    case 9475:
    case 9476:
    case 9477:
    case 9478:
    case 9481:
    case 9482:
    case 9483:
    case 9484:
    case 9491:
    case 9492:
    case 9493:
    case 9494:
    case 9501:
    case 9502:
    case 9503:
    case 9504:
    case 9511:
    case 9512:
    case 9513:
    case 9514:
    case 9525:
    case 9526:
    case 9527:
    case 9528:
    case 9535:
    case 9536:
    case 9537:
    case 9538:
    case 9565:
    case 9566:
    case 9567:
    case 9568:
    case 9575:
    case 9576:
    case 9577:
    case 9578:
    case 9581:
    case 9582:
    case 9583:
    case 9584:
    case 9591:
    case 9592:
    case 9593:
    case 9594:
    case 9605:
    case 9606:
    case 9607:
    case 9608:
    case 9615:
    case 9616:
    case 9617:
    case 9618:
    case 9621:
    case 9622:
    case 9623:
    case 9624:
    case 9631:
    case 9632:
    case 9633:
    case 9634:
    case 9641:
    case 9642:
    case 9643:
    case 9644:
    case 9651:
    case 9652:
    case 9653:
    case 9654:
    case 9665:
    case 9666:
    case 9667:
    case 9668:
    case 9675:
    case 9676:
    case 9677:
    case 9678:
    case 9693:
    case 9694:
    case 9695:
    case 9696:
    case 9703:
    case 9704:
    case 9705:
    case 9706:
    case 9709:
    case 9710:
    case 9711:
    case 9712:
    case 9719:
    case 9720:
    case 9721:
    case 9722:
    case 9733:
    case 9734:
    case 9735:
    case 9736:
    case 9743:
    case 9744:
    case 9745:
    case 9746:
    case 9749:
    case 9750:
    case 9751:
    case 9752:
    case 9759:
    case 9760:
    case 9761:
    case 9762:
    case 9769:
    case 9770:
    case 9771:
    case 9772:
    case 9779:
    case 9780:
    case 9781:
    case 9782:
    case 9793:
    case 9794:
    case 9795:
    case 9796:
    case 9803:
    case 9804:
    case 9805:
    case 9806:
    case 9833:
    case 9834:
    case 9835:
    case 9836:
    case 9843:
    case 9844:
    case 9845:
    case 9846:
    case 9849:
    case 9850:
    case 9851:
    case 9852:
    case 9859:
    case 9860:
    case 9861:
    case 9862:
    case 9873:
    case 9874:
    case 9875:
    case 9876:
    case 9883:
    case 9884:
    case 9885:
    case 9886:
    case 9889:
    case 9890:
    case 9891:
    case 9892:
    case 9899:
    case 9900:
    case 9901:
    case 9902:
    case 9909:
    case 9910:
    case 9911:
    case 9912:
    case 9919:
    case 9920:
    case 9921:
    case 9922:
    case 9933:
    case 9934:
    case 9935:
    case 9936:
    case 9943:
    case 9944:
    case 9945:
    case 9946:
    case 9961:
    case 9962:
    case 9963:
    case 9964:
    case 9971:
    case 9972:
    case 9973:
    case 9974:
    case 9977:
    case 9978:
    case 9979:
    case 9980:
    case 9987:
    case 9988:
    case 9989:
    case 9990:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10017:
    case 10018:
    case 10019:
    case 10020:
    case 10027:
    case 10028:
    case 10029:
    case 10030:
    case 10037:
    case 10038:
    case 10039:
    case 10040:
    case 10047:
    case 10048:
    case 10049:
    case 10050:
    case 10061:
    case 10062:
    case 10063:
    case 10064:
    case 10071:
    case 10072:
    case 10073:
    case 10074:
      int v9 = *(_DWORD *)(*((void *)a2 + 2) + 120);
      goto LABEL_14;
    case 1015:
    case 1031:
    case 1047:
    case 4735:
    case 4736:
    case 4745:
    case 4746:
    case 4761:
    case 4762:
    case 4763:
    case 4764:
    case 4771:
    case 4772:
    case 4773:
    case 4774:
    case 4775:
    case 4776:
    case 4785:
    case 4786:
    case 4801:
    case 4802:
    case 4803:
    case 4804:
    case 4811:
    case 4812:
    case 4813:
    case 4814:
    case 4821:
    case 4822:
    case 4823:
    case 4824:
    case 4831:
    case 4832:
    case 4833:
    case 4834:
    case 4845:
    case 4846:
    case 4847:
    case 4848:
    case 4855:
    case 4856:
    case 4857:
    case 4858:
    case 4863:
    case 4864:
    case 4873:
    case 4874:
    case 4889:
    case 4890:
    case 4891:
    case 4892:
    case 4899:
    case 4900:
    case 4901:
    case 4902:
    case 4903:
    case 4904:
    case 4913:
    case 4914:
    case 4929:
    case 4930:
    case 4931:
    case 4932:
    case 4939:
    case 4940:
    case 4941:
    case 4942:
    case 4949:
    case 4950:
    case 4951:
    case 4952:
    case 4959:
    case 4960:
    case 4961:
    case 4962:
    case 4973:
    case 4974:
    case 4975:
    case 4976:
    case 4983:
    case 4984:
    case 4985:
    case 4986:
    case 5003:
    case 5004:
    case 5013:
    case 5014:
    case 5029:
    case 5030:
    case 5031:
    case 5032:
    case 5039:
    case 5040:
    case 5041:
    case 5042:
    case 5043:
    case 5044:
    case 5053:
    case 5054:
    case 5069:
    case 5070:
    case 5071:
    case 5072:
    case 5079:
    case 5080:
    case 5081:
    case 5082:
    case 5089:
    case 5090:
    case 5091:
    case 5092:
    case 5099:
    case 5100:
    case 5101:
    case 5102:
    case 5113:
    case 5114:
    case 5115:
    case 5116:
    case 5123:
    case 5124:
    case 5125:
    case 5126:
    case 5131:
    case 5132:
    case 5141:
    case 5142:
    case 5157:
    case 5158:
    case 5159:
    case 5160:
    case 5167:
    case 5168:
    case 5169:
    case 5170:
    case 5171:
    case 5172:
    case 5181:
    case 5182:
    case 5197:
    case 5198:
    case 5199:
    case 5200:
    case 5207:
    case 5208:
    case 5209:
    case 5210:
    case 5217:
    case 5218:
    case 5219:
    case 5220:
    case 5227:
    case 5228:
    case 5229:
    case 5230:
    case 5241:
    case 5242:
    case 5243:
    case 5244:
    case 5251:
    case 5252:
    case 5253:
    case 5254:
    case 5271:
    case 5272:
    case 5281:
    case 5282:
    case 5297:
    case 5298:
    case 5299:
    case 5300:
    case 5307:
    case 5308:
    case 5309:
    case 5310:
    case 5311:
    case 5312:
    case 5321:
    case 5322:
    case 5337:
    case 5338:
    case 5339:
    case 5340:
    case 5347:
    case 5348:
    case 5349:
    case 5350:
    case 5357:
    case 5358:
    case 5359:
    case 5360:
    case 5367:
    case 5368:
    case 5369:
    case 5370:
    case 5381:
    case 5382:
    case 5383:
    case 5384:
    case 5391:
    case 5392:
    case 5393:
    case 5394:
    case 5399:
    case 5400:
    case 5409:
    case 5410:
    case 5425:
    case 5426:
    case 5427:
    case 5428:
    case 5435:
    case 5436:
    case 5437:
    case 5438:
    case 5439:
    case 5440:
    case 5449:
    case 5450:
    case 5465:
    case 5466:
    case 5467:
    case 5468:
    case 5475:
    case 5476:
    case 5477:
    case 5478:
    case 5485:
    case 5486:
    case 5487:
    case 5488:
    case 5495:
    case 5496:
    case 5497:
    case 5498:
    case 5509:
    case 5510:
    case 5511:
    case 5512:
    case 5519:
    case 5520:
    case 5521:
    case 5522:
    case 5539:
    case 5540:
    case 5549:
    case 5550:
    case 5565:
    case 5566:
    case 5567:
    case 5568:
    case 5575:
    case 5576:
    case 5577:
    case 5578:
    case 5579:
    case 5580:
    case 5589:
    case 5590:
    case 5605:
    case 5606:
    case 5607:
    case 5608:
    case 5615:
    case 5616:
    case 5617:
    case 5618:
    case 5625:
    case 5626:
    case 5627:
    case 5628:
    case 5635:
    case 5636:
    case 5637:
    case 5638:
    case 5649:
    case 5650:
    case 5651:
    case 5652:
    case 5659:
    case 5660:
    case 5661:
    case 5662:
    case 5667:
    case 5668:
    case 5677:
    case 5678:
    case 5693:
    case 5694:
    case 5695:
    case 5696:
    case 5703:
    case 5704:
    case 5705:
    case 5706:
    case 5707:
    case 5708:
    case 5717:
    case 5718:
    case 5733:
    case 5734:
    case 5735:
    case 5736:
    case 5743:
    case 5744:
    case 5745:
    case 5746:
    case 5753:
    case 5754:
    case 5755:
    case 5756:
    case 5763:
    case 5764:
    case 5765:
    case 5766:
    case 5777:
    case 5778:
    case 5779:
    case 5780:
    case 5787:
    case 5788:
    case 5789:
    case 5790:
    case 5807:
    case 5808:
    case 5817:
    case 5818:
    case 5833:
    case 5834:
    case 5835:
    case 5836:
    case 5843:
    case 5844:
    case 5845:
    case 5846:
    case 5847:
    case 5848:
    case 5857:
    case 5858:
    case 5873:
    case 5874:
    case 5875:
    case 5876:
    case 5883:
    case 5884:
    case 5885:
    case 5886:
    case 5893:
    case 5894:
    case 5895:
    case 5896:
    case 5903:
    case 5904:
    case 5905:
    case 5906:
    case 5917:
    case 5918:
    case 5919:
    case 5920:
    case 5927:
    case 5928:
    case 5929:
    case 5930:
    case 5935:
    case 5936:
    case 5945:
    case 5946:
    case 5961:
    case 5962:
    case 5963:
    case 5964:
    case 5971:
    case 5972:
    case 5973:
    case 5974:
    case 5975:
    case 5976:
    case 5985:
    case 5986:
    case 6001:
    case 6002:
    case 6003:
    case 6004:
    case 6011:
    case 6012:
    case 6013:
    case 6014:
    case 6021:
    case 6022:
    case 6023:
    case 6024:
    case 6031:
    case 6032:
    case 6033:
    case 6034:
    case 6045:
    case 6046:
    case 6047:
    case 6048:
    case 6055:
    case 6056:
    case 6057:
    case 6058:
    case 6075:
    case 6076:
    case 6085:
    case 6086:
    case 6101:
    case 6102:
    case 6103:
    case 6104:
    case 6111:
    case 6112:
    case 6113:
    case 6114:
    case 6115:
    case 6116:
    case 6125:
    case 6126:
    case 6141:
    case 6142:
    case 6143:
    case 6144:
    case 6151:
    case 6152:
    case 6153:
    case 6154:
    case 6161:
    case 6162:
    case 6163:
    case 6164:
    case 6171:
    case 6172:
    case 6173:
    case 6174:
    case 6185:
    case 6186:
    case 6187:
    case 6188:
    case 6195:
    case 6196:
    case 6197:
    case 6198:
    case 6203:
    case 6204:
    case 6213:
    case 6214:
    case 6229:
    case 6230:
    case 6231:
    case 6232:
    case 6239:
    case 6240:
    case 6241:
    case 6242:
    case 6243:
    case 6244:
    case 6253:
    case 6254:
    case 6269:
    case 6270:
    case 6271:
    case 6272:
    case 6279:
    case 6280:
    case 6281:
    case 6282:
    case 6289:
    case 6290:
    case 6291:
    case 6292:
    case 6299:
    case 6300:
    case 6301:
    case 6302:
    case 6313:
    case 6314:
    case 6315:
    case 6316:
    case 6323:
    case 6324:
    case 6325:
    case 6326:
    case 6343:
    case 6344:
    case 6353:
    case 6354:
    case 6369:
    case 6370:
    case 6371:
    case 6372:
    case 6379:
    case 6380:
    case 6381:
    case 6382:
    case 6383:
    case 6384:
    case 6393:
    case 6394:
    case 6409:
    case 6410:
    case 6411:
    case 6412:
    case 6419:
    case 6420:
    case 6421:
    case 6422:
    case 6429:
    case 6430:
    case 6431:
    case 6432:
    case 6439:
    case 6440:
    case 6441:
    case 6442:
    case 6453:
    case 6454:
    case 6455:
    case 6456:
    case 6463:
    case 6464:
    case 6465:
    case 6466:
    case 6471:
    case 6472:
    case 6481:
    case 6482:
    case 6497:
    case 6498:
    case 6499:
    case 6500:
    case 6507:
    case 6508:
    case 6509:
    case 6510:
    case 6511:
    case 6512:
    case 6521:
    case 6522:
    case 6537:
    case 6538:
    case 6539:
    case 6540:
    case 6547:
    case 6548:
    case 6549:
    case 6550:
    case 6557:
    case 6558:
    case 6559:
    case 6560:
    case 6567:
    case 6568:
    case 6569:
    case 6570:
    case 6581:
    case 6582:
    case 6583:
    case 6584:
    case 6591:
    case 6592:
    case 6593:
    case 6594:
    case 6611:
    case 6612:
    case 6621:
    case 6622:
    case 6637:
    case 6638:
    case 6639:
    case 6640:
    case 6647:
    case 6648:
    case 6649:
    case 6650:
    case 6651:
    case 6652:
    case 6661:
    case 6662:
    case 6677:
    case 6678:
    case 6679:
    case 6680:
    case 6687:
    case 6688:
    case 6689:
    case 6690:
    case 6697:
    case 6698:
    case 6699:
    case 6700:
    case 6707:
    case 6708:
    case 6709:
    case 6710:
    case 6721:
    case 6722:
    case 6723:
    case 6724:
    case 6731:
    case 6732:
    case 6733:
    case 6734:
    case 6739:
    case 6740:
    case 6749:
    case 6750:
    case 6765:
    case 6766:
    case 6767:
    case 6768:
    case 6775:
    case 6776:
    case 6777:
    case 6778:
    case 6779:
    case 6780:
    case 6789:
    case 6790:
    case 6805:
    case 6806:
    case 6807:
    case 6808:
    case 6815:
    case 6816:
    case 6817:
    case 6818:
    case 6825:
    case 6826:
    case 6827:
    case 6828:
    case 6835:
    case 6836:
    case 6837:
    case 6838:
    case 6849:
    case 6850:
    case 6851:
    case 6852:
    case 6859:
    case 6860:
    case 6861:
    case 6862:
    case 6879:
    case 6880:
    case 6889:
    case 6890:
    case 6905:
    case 6906:
    case 6907:
    case 6908:
    case 6915:
    case 6916:
    case 6917:
    case 6918:
    case 6919:
    case 6920:
    case 6929:
    case 6930:
    case 6945:
    case 6946:
    case 6947:
    case 6948:
    case 6955:
    case 6956:
    case 6957:
    case 6958:
    case 6965:
    case 6966:
    case 6967:
    case 6968:
    case 6975:
    case 6976:
    case 6977:
    case 6978:
    case 6989:
    case 6990:
    case 6991:
    case 6992:
    case 6999:
    case 7000:
    case 7001:
    case 7002:
    case 7007:
    case 7008:
    case 7017:
    case 7018:
    case 7033:
    case 7034:
    case 7035:
    case 7036:
    case 7043:
    case 7044:
    case 7045:
    case 7046:
    case 7047:
    case 7048:
    case 7057:
    case 7058:
    case 7073:
    case 7074:
    case 7075:
    case 7076:
    case 7083:
    case 7084:
    case 7085:
    case 7086:
    case 7093:
    case 7094:
    case 7095:
    case 7096:
    case 7103:
    case 7104:
    case 7105:
    case 7106:
    case 7117:
    case 7118:
    case 7119:
    case 7120:
    case 7127:
    case 7128:
    case 7129:
    case 7130:
    case 7147:
    case 7148:
    case 7157:
    case 7158:
    case 7173:
    case 7174:
    case 7175:
    case 7176:
    case 7183:
    case 7184:
    case 7185:
    case 7186:
    case 7187:
    case 7188:
    case 7197:
    case 7198:
    case 7213:
    case 7214:
    case 7215:
    case 7216:
    case 7223:
    case 7224:
    case 7225:
    case 7226:
    case 7233:
    case 7234:
    case 7235:
    case 7236:
    case 7243:
    case 7244:
    case 7245:
    case 7246:
    case 7257:
    case 7258:
    case 7259:
    case 7260:
    case 7267:
    case 7268:
    case 7269:
    case 7270:
    case 7275:
    case 7276:
    case 7285:
    case 7286:
    case 7301:
    case 7302:
    case 7303:
    case 7304:
    case 7311:
    case 7312:
    case 7313:
    case 7314:
    case 7315:
    case 7316:
    case 7325:
    case 7326:
    case 7341:
    case 7342:
    case 7343:
    case 7344:
    case 7351:
    case 7352:
    case 7353:
    case 7354:
    case 7361:
    case 7362:
    case 7363:
    case 7364:
    case 7371:
    case 7372:
    case 7373:
    case 7374:
    case 7385:
    case 7386:
    case 7387:
    case 7388:
    case 7395:
    case 7396:
    case 7397:
    case 7398:
    case 7415:
    case 7416:
    case 7425:
    case 7426:
    case 7441:
    case 7442:
    case 7443:
    case 7444:
    case 7451:
    case 7452:
    case 7453:
    case 7454:
    case 7455:
    case 7456:
    case 7465:
    case 7466:
    case 7481:
    case 7482:
    case 7483:
    case 7484:
    case 7491:
    case 7492:
    case 7493:
    case 7494:
    case 7501:
    case 7502:
    case 7503:
    case 7504:
    case 7511:
    case 7512:
    case 7513:
    case 7514:
    case 7525:
    case 7526:
    case 7527:
    case 7528:
    case 7535:
    case 7536:
    case 7537:
    case 7538:
    case 7543:
    case 7544:
    case 7553:
    case 7554:
    case 7569:
    case 7570:
    case 7571:
    case 7572:
    case 7579:
    case 7580:
    case 7581:
    case 7582:
    case 7583:
    case 7584:
    case 7593:
    case 7594:
    case 7609:
    case 7610:
    case 7611:
    case 7612:
    case 7619:
    case 7620:
    case 7621:
    case 7622:
    case 7629:
    case 7630:
    case 7631:
    case 7632:
    case 7639:
    case 7640:
    case 7641:
    case 7642:
    case 7653:
    case 7654:
    case 7655:
    case 7656:
    case 7663:
    case 7664:
    case 7665:
    case 7666:
    case 7683:
    case 7684:
    case 7693:
    case 7694:
    case 7709:
    case 7710:
    case 7711:
    case 7712:
    case 7719:
    case 7720:
    case 7721:
    case 7722:
    case 7723:
    case 7724:
    case 7733:
    case 7734:
    case 7749:
    case 7750:
    case 7751:
    case 7752:
    case 7759:
    case 7760:
    case 7761:
    case 7762:
    case 7769:
    case 7770:
    case 7771:
    case 7772:
    case 7779:
    case 7780:
    case 7781:
    case 7782:
    case 7793:
    case 7794:
    case 7795:
    case 7796:
    case 7803:
    case 7804:
    case 7805:
    case 7806:
    case 7811:
    case 7812:
    case 7821:
    case 7822:
    case 7837:
    case 7838:
    case 7839:
    case 7840:
    case 7847:
    case 7848:
    case 7849:
    case 7850:
    case 7851:
    case 7852:
    case 7861:
    case 7862:
    case 7877:
    case 7878:
    case 7879:
    case 7880:
    case 7887:
    case 7888:
    case 7889:
    case 7890:
    case 7897:
    case 7898:
    case 7899:
    case 7900:
    case 7907:
    case 7908:
    case 7909:
    case 7910:
    case 7921:
    case 7922:
    case 7923:
    case 7924:
    case 7931:
    case 7932:
    case 7933:
    case 7934:
    case 7951:
    case 7952:
    case 7961:
    case 7962:
    case 7977:
    case 7978:
    case 7979:
    case 7980:
    case 7987:
    case 7988:
    case 7989:
    case 7990:
    case 7991:
    case 7992:
    case 8001:
    case 8002:
    case 8017:
    case 8018:
    case 8019:
    case 8020:
    case 8027:
    case 8028:
    case 8029:
    case 8030:
    case 8037:
    case 8038:
    case 8039:
    case 8040:
    case 8047:
    case 8048:
    case 8049:
    case 8050:
    case 8061:
    case 8062:
    case 8063:
    case 8064:
    case 8071:
    case 8072:
    case 8073:
    case 8074:
    case 8079:
    case 8080:
    case 8089:
    case 8090:
    case 8105:
    case 8106:
    case 8107:
    case 8108:
    case 8115:
    case 8116:
    case 8117:
    case 8118:
    case 8119:
    case 8120:
    case 8129:
    case 8130:
    case 8145:
    case 8146:
    case 8147:
    case 8148:
    case 8155:
    case 8156:
    case 8157:
    case 8158:
    case 8165:
    case 8166:
    case 8167:
    case 8168:
    case 8175:
    case 8176:
    case 8177:
    case 8178:
    case 8189:
    case 8190:
    case 8191:
    case 8192:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8219:
    case 8220:
    case 8229:
    case 8230:
    case 8245:
    case 8246:
    case 8247:
    case 8248:
    case 8255:
    case 8256:
    case 8257:
    case 8258:
    case 8259:
    case 8260:
    case 8269:
    case 8270:
    case 8285:
    case 8286:
    case 8287:
    case 8288:
    case 8295:
    case 8296:
    case 8297:
    case 8298:
    case 8305:
    case 8306:
    case 8307:
    case 8308:
    case 8315:
    case 8316:
    case 8317:
    case 8318:
    case 8329:
    case 8330:
    case 8331:
    case 8332:
    case 8339:
    case 8340:
    case 8341:
    case 8342:
    case 8347:
    case 8348:
    case 8357:
    case 8358:
    case 8373:
    case 8374:
    case 8375:
    case 8376:
    case 8383:
    case 8384:
    case 8385:
    case 8386:
    case 8387:
    case 8388:
    case 8397:
    case 8398:
    case 8413:
    case 8414:
    case 8415:
    case 8416:
    case 8423:
    case 8424:
    case 8425:
    case 8426:
    case 8433:
    case 8434:
    case 8435:
    case 8436:
    case 8443:
    case 8444:
    case 8445:
    case 8446:
    case 8457:
    case 8458:
    case 8459:
    case 8460:
    case 8467:
    case 8468:
    case 8469:
    case 8470:
    case 8487:
    case 8488:
    case 8497:
    case 8498:
    case 8513:
    case 8514:
    case 8515:
    case 8516:
    case 8523:
    case 8524:
    case 8525:
    case 8526:
    case 8527:
    case 8528:
    case 8537:
    case 8538:
    case 8553:
    case 8554:
    case 8555:
    case 8556:
    case 8563:
    case 8564:
    case 8565:
    case 8566:
    case 8573:
    case 8574:
    case 8575:
    case 8576:
    case 8583:
    case 8584:
    case 8585:
    case 8586:
    case 8597:
    case 8598:
    case 8599:
    case 8600:
    case 8607:
    case 8608:
    case 8609:
    case 8610:
    case 8615:
    case 8616:
    case 8625:
    case 8626:
    case 8641:
    case 8642:
    case 8643:
    case 8644:
    case 8651:
    case 8652:
    case 8653:
    case 8654:
    case 8655:
    case 8656:
    case 8665:
    case 8666:
    case 8681:
    case 8682:
    case 8683:
    case 8684:
    case 8691:
    case 8692:
    case 8693:
    case 8694:
    case 8701:
    case 8702:
    case 8703:
    case 8704:
    case 8711:
    case 8712:
    case 8713:
    case 8714:
    case 8725:
    case 8726:
    case 8727:
    case 8728:
    case 8735:
    case 8736:
    case 8737:
    case 8738:
    case 8755:
    case 8756:
    case 8765:
    case 8766:
    case 8781:
    case 8782:
    case 8783:
    case 8784:
    case 8791:
    case 8792:
    case 8793:
    case 8794:
    case 8795:
    case 8796:
    case 8805:
    case 8806:
    case 8821:
    case 8822:
    case 8823:
    case 8824:
    case 8831:
    case 8832:
    case 8833:
    case 8834:
    case 8841:
    case 8842:
    case 8843:
    case 8844:
    case 8851:
    case 8852:
    case 8853:
    case 8854:
    case 8865:
    case 8866:
    case 8867:
    case 8868:
    case 8875:
    case 8876:
    case 8877:
    case 8878:
    case 8883:
    case 8884:
    case 8893:
    case 8894:
    case 8909:
    case 8910:
    case 8911:
    case 8912:
    case 8919:
    case 8920:
    case 8921:
    case 8922:
    case 8923:
    case 8924:
    case 8933:
    case 8934:
    case 8949:
    case 8950:
    case 8951:
    case 8952:
    case 8959:
    case 8960:
    case 8961:
    case 8962:
    case 8969:
    case 8970:
    case 8971:
    case 8972:
    case 8979:
    case 8980:
    case 8981:
    case 8982:
    case 8993:
    case 8994:
    case 8995:
    case 8996:
    case 9003:
    case 9004:
    case 9005:
    case 9006:
    case 9023:
    case 9024:
    case 9033:
    case 9034:
    case 9049:
    case 9050:
    case 9051:
    case 9052:
    case 9059:
    case 9060:
    case 9061:
    case 9062:
    case 9063:
    case 9064:
    case 9073:
    case 9074:
    case 9089:
    case 9090:
    case 9091:
    case 9092:
    case 9099:
    case 9100:
    case 9101:
    case 9102:
    case 9109:
    case 9110:
    case 9111:
    case 9112:
    case 9119:
    case 9120:
    case 9121:
    case 9122:
    case 9133:
    case 9134:
    case 9135:
    case 9136:
    case 9143:
    case 9144:
    case 9145:
    case 9146:
    case 9151:
    case 9152:
    case 9161:
    case 9162:
    case 9177:
    case 9178:
    case 9179:
    case 9180:
    case 9187:
    case 9188:
    case 9189:
    case 9190:
    case 9191:
    case 9192:
    case 9201:
    case 9202:
    case 9217:
    case 9218:
    case 9219:
    case 9220:
    case 9227:
    case 9228:
    case 9229:
    case 9230:
    case 9237:
    case 9238:
    case 9239:
    case 9240:
    case 9247:
    case 9248:
    case 9249:
    case 9250:
    case 9261:
    case 9262:
    case 9263:
    case 9264:
    case 9271:
    case 9272:
    case 9273:
    case 9274:
    case 9291:
    case 9292:
    case 9301:
    case 9302:
    case 9317:
    case 9318:
    case 9319:
    case 9320:
    case 9327:
    case 9328:
    case 9329:
    case 9330:
    case 9331:
    case 9332:
    case 9341:
    case 9342:
    case 9357:
    case 9358:
    case 9359:
    case 9360:
    case 9367:
    case 9368:
    case 9369:
    case 9370:
    case 9377:
    case 9378:
    case 9379:
    case 9380:
    case 9387:
    case 9388:
    case 9389:
    case 9390:
    case 9401:
    case 9402:
    case 9403:
    case 9404:
    case 9411:
    case 9412:
    case 9413:
    case 9414:
    case 9419:
    case 9420:
    case 9429:
    case 9430:
    case 9445:
    case 9446:
    case 9447:
    case 9448:
    case 9455:
    case 9456:
    case 9457:
    case 9458:
    case 9459:
    case 9460:
    case 9469:
    case 9470:
    case 9485:
    case 9486:
    case 9487:
    case 9488:
    case 9495:
    case 9496:
    case 9497:
    case 9498:
    case 9505:
    case 9506:
    case 9507:
    case 9508:
    case 9515:
    case 9516:
    case 9517:
    case 9518:
    case 9529:
    case 9530:
    case 9531:
    case 9532:
    case 9539:
    case 9540:
    case 9541:
    case 9542:
    case 9559:
    case 9560:
    case 9569:
    case 9570:
    case 9585:
    case 9586:
    case 9587:
    case 9588:
    case 9595:
    case 9596:
    case 9597:
    case 9598:
    case 9599:
    case 9600:
    case 9609:
    case 9610:
    case 9625:
    case 9626:
    case 9627:
    case 9628:
    case 9635:
    case 9636:
    case 9637:
    case 9638:
    case 9645:
    case 9646:
    case 9647:
    case 9648:
    case 9655:
    case 9656:
    case 9657:
    case 9658:
    case 9669:
    case 9670:
    case 9671:
    case 9672:
    case 9679:
    case 9680:
    case 9681:
    case 9682:
    case 9687:
    case 9688:
    case 9697:
    case 9698:
    case 9713:
    case 9714:
    case 9715:
    case 9716:
    case 9723:
    case 9724:
    case 9725:
    case 9726:
    case 9727:
    case 9728:
    case 9737:
    case 9738:
    case 9753:
    case 9754:
    case 9755:
    case 9756:
    case 9763:
    case 9764:
    case 9765:
    case 9766:
    case 9773:
    case 9774:
    case 9775:
    case 9776:
    case 9783:
    case 9784:
    case 9785:
    case 9786:
    case 9797:
    case 9798:
    case 9799:
    case 9800:
    case 9807:
    case 9808:
    case 9809:
    case 9810:
    case 9827:
    case 9828:
    case 9837:
    case 9838:
    case 9853:
    case 9854:
    case 9855:
    case 9856:
    case 9863:
    case 9864:
    case 9865:
    case 9866:
    case 9867:
    case 9868:
    case 9877:
    case 9878:
    case 9893:
    case 9894:
    case 9895:
    case 9896:
    case 9903:
    case 9904:
    case 9905:
    case 9906:
    case 9913:
    case 9914:
    case 9915:
    case 9916:
    case 9923:
    case 9924:
    case 9925:
    case 9926:
    case 9937:
    case 9938:
    case 9939:
    case 9940:
    case 9947:
    case 9948:
    case 9949:
    case 9950:
    case 9955:
    case 9956:
    case 9965:
    case 9966:
    case 9981:
    case 9982:
    case 9983:
    case 9984:
    case 9991:
    case 9992:
    case 9993:
    case 9994:
    case 9995:
    case 9996:
    case 10005:
    case 10006:
    case 10021:
    case 10022:
    case 10023:
    case 10024:
    case 10031:
    case 10032:
    case 10033:
    case 10034:
    case 10041:
    case 10042:
    case 10043:
    case 10044:
    case 10051:
    case 10052:
    case 10053:
    case 10054:
    case 10065:
    case 10066:
    case 10067:
    case 10068:
    case 10075:
    case 10076:
    case 10077:
    case 10078:
      int v9 = *(_DWORD *)(*((void *)a2 + 2) + 104);
      goto LABEL_14;
    case 1016:
    case 1032:
    case 1048:
    case 4755:
    case 4756:
    case 4765:
    case 4766:
    case 4795:
    case 4796:
    case 4805:
    case 4806:
    case 4815:
    case 4816:
    case 4825:
    case 4826:
    case 4837:
    case 4838:
    case 4839:
    case 4840:
    case 4849:
    case 4850:
    case 4861:
    case 4862:
    case 4883:
    case 4884:
    case 4893:
    case 4894:
    case 4923:
    case 4924:
    case 4933:
    case 4934:
    case 4943:
    case 4944:
    case 4953:
    case 4954:
    case 4965:
    case 4966:
    case 4967:
    case 4968:
    case 4977:
    case 4978:
    case 4989:
    case 4990:
    case 4991:
    case 4992:
    case 4995:
    case 4996:
    case 5023:
    case 5024:
    case 5033:
    case 5034:
    case 5063:
    case 5064:
    case 5073:
    case 5074:
    case 5083:
    case 5084:
    case 5093:
    case 5094:
    case 5105:
    case 5106:
    case 5107:
    case 5108:
    case 5117:
    case 5118:
    case 5129:
    case 5130:
    case 5151:
    case 5152:
    case 5161:
    case 5162:
    case 5191:
    case 5192:
    case 5201:
    case 5202:
    case 5211:
    case 5212:
    case 5221:
    case 5222:
    case 5233:
    case 5234:
    case 5235:
    case 5236:
    case 5245:
    case 5246:
    case 5257:
    case 5258:
    case 5259:
    case 5260:
    case 5263:
    case 5264:
    case 5291:
    case 5292:
    case 5301:
    case 5302:
    case 5331:
    case 5332:
    case 5341:
    case 5342:
    case 5351:
    case 5352:
    case 5361:
    case 5362:
    case 5373:
    case 5374:
    case 5375:
    case 5376:
    case 5385:
    case 5386:
    case 5397:
    case 5398:
    case 5419:
    case 5420:
    case 5429:
    case 5430:
    case 5459:
    case 5460:
    case 5469:
    case 5470:
    case 5479:
    case 5480:
    case 5489:
    case 5490:
    case 5501:
    case 5502:
    case 5503:
    case 5504:
    case 5513:
    case 5514:
    case 5525:
    case 5526:
    case 5527:
    case 5528:
    case 5531:
    case 5532:
    case 5559:
    case 5560:
    case 5569:
    case 5570:
    case 5599:
    case 5600:
    case 5609:
    case 5610:
    case 5619:
    case 5620:
    case 5629:
    case 5630:
    case 5641:
    case 5642:
    case 5643:
    case 5644:
    case 5653:
    case 5654:
    case 5665:
    case 5666:
    case 5687:
    case 5688:
    case 5697:
    case 5698:
    case 5727:
    case 5728:
    case 5737:
    case 5738:
    case 5747:
    case 5748:
    case 5757:
    case 5758:
    case 5769:
    case 5770:
    case 5771:
    case 5772:
    case 5781:
    case 5782:
    case 5793:
    case 5794:
    case 5795:
    case 5796:
    case 5799:
    case 5800:
    case 5827:
    case 5828:
    case 5837:
    case 5838:
    case 5867:
    case 5868:
    case 5877:
    case 5878:
    case 5887:
    case 5888:
    case 5897:
    case 5898:
    case 5909:
    case 5910:
    case 5911:
    case 5912:
    case 5921:
    case 5922:
    case 5933:
    case 5934:
    case 5955:
    case 5956:
    case 5965:
    case 5966:
    case 5995:
    case 5996:
    case 6005:
    case 6006:
    case 6015:
    case 6016:
    case 6025:
    case 6026:
    case 6037:
    case 6038:
    case 6039:
    case 6040:
    case 6049:
    case 6050:
    case 6061:
    case 6062:
    case 6063:
    case 6064:
    case 6067:
    case 6068:
    case 6095:
    case 6096:
    case 6105:
    case 6106:
    case 6135:
    case 6136:
    case 6145:
    case 6146:
    case 6155:
    case 6156:
    case 6165:
    case 6166:
    case 6177:
    case 6178:
    case 6179:
    case 6180:
    case 6189:
    case 6190:
    case 6201:
    case 6202:
    case 6223:
    case 6224:
    case 6233:
    case 6234:
    case 6263:
    case 6264:
    case 6273:
    case 6274:
    case 6283:
    case 6284:
    case 6293:
    case 6294:
    case 6305:
    case 6306:
    case 6307:
    case 6308:
    case 6317:
    case 6318:
    case 6329:
    case 6330:
    case 6331:
    case 6332:
    case 6335:
    case 6336:
    case 6363:
    case 6364:
    case 6373:
    case 6374:
    case 6403:
    case 6404:
    case 6413:
    case 6414:
    case 6423:
    case 6424:
    case 6433:
    case 6434:
    case 6445:
    case 6446:
    case 6447:
    case 6448:
    case 6457:
    case 6458:
    case 6469:
    case 6470:
    case 6491:
    case 6492:
    case 6501:
    case 6502:
    case 6531:
    case 6532:
    case 6541:
    case 6542:
    case 6551:
    case 6552:
    case 6561:
    case 6562:
    case 6573:
    case 6574:
    case 6575:
    case 6576:
    case 6585:
    case 6586:
    case 6597:
    case 6598:
    case 6599:
    case 6600:
    case 6603:
    case 6604:
    case 6631:
    case 6632:
    case 6641:
    case 6642:
    case 6671:
    case 6672:
    case 6681:
    case 6682:
    case 6691:
    case 6692:
    case 6701:
    case 6702:
    case 6713:
    case 6714:
    case 6715:
    case 6716:
    case 6725:
    case 6726:
    case 6737:
    case 6738:
    case 6759:
    case 6760:
    case 6769:
    case 6770:
    case 6799:
    case 6800:
    case 6809:
    case 6810:
    case 6819:
    case 6820:
    case 6829:
    case 6830:
    case 6841:
    case 6842:
    case 6843:
    case 6844:
    case 6853:
    case 6854:
    case 6865:
    case 6866:
    case 6867:
    case 6868:
    case 6871:
    case 6872:
    case 6899:
    case 6900:
    case 6909:
    case 6910:
    case 6939:
    case 6940:
    case 6949:
    case 6950:
    case 6959:
    case 6960:
    case 6969:
    case 6970:
    case 6981:
    case 6982:
    case 6983:
    case 6984:
    case 6993:
    case 6994:
    case 7005:
    case 7006:
    case 7027:
    case 7028:
    case 7037:
    case 7038:
    case 7067:
    case 7068:
    case 7077:
    case 7078:
    case 7087:
    case 7088:
    case 7097:
    case 7098:
    case 7109:
    case 7110:
    case 7111:
    case 7112:
    case 7121:
    case 7122:
    case 7133:
    case 7134:
    case 7135:
    case 7136:
    case 7139:
    case 7140:
    case 7167:
    case 7168:
    case 7177:
    case 7178:
    case 7207:
    case 7208:
    case 7217:
    case 7218:
    case 7227:
    case 7228:
    case 7237:
    case 7238:
    case 7249:
    case 7250:
    case 7251:
    case 7252:
    case 7261:
    case 7262:
    case 7273:
    case 7274:
    case 7295:
    case 7296:
    case 7305:
    case 7306:
    case 7335:
    case 7336:
    case 7345:
    case 7346:
    case 7355:
    case 7356:
    case 7365:
    case 7366:
    case 7377:
    case 7378:
    case 7379:
    case 7380:
    case 7389:
    case 7390:
    case 7401:
    case 7402:
    case 7403:
    case 7404:
    case 7407:
    case 7408:
    case 7435:
    case 7436:
    case 7445:
    case 7446:
    case 7475:
    case 7476:
    case 7485:
    case 7486:
    case 7495:
    case 7496:
    case 7505:
    case 7506:
    case 7517:
    case 7518:
    case 7519:
    case 7520:
    case 7529:
    case 7530:
    case 7541:
    case 7542:
    case 7563:
    case 7564:
    case 7573:
    case 7574:
    case 7603:
    case 7604:
    case 7613:
    case 7614:
    case 7623:
    case 7624:
    case 7633:
    case 7634:
    case 7645:
    case 7646:
    case 7647:
    case 7648:
    case 7657:
    case 7658:
    case 7669:
    case 7670:
    case 7671:
    case 7672:
    case 7675:
    case 7676:
    case 7703:
    case 7704:
    case 7713:
    case 7714:
    case 7743:
    case 7744:
    case 7753:
    case 7754:
    case 7763:
    case 7764:
    case 7773:
    case 7774:
    case 7785:
    case 7786:
    case 7787:
    case 7788:
    case 7797:
    case 7798:
    case 7809:
    case 7810:
    case 7831:
    case 7832:
    case 7841:
    case 7842:
    case 7871:
    case 7872:
    case 7881:
    case 7882:
    case 7891:
    case 7892:
    case 7901:
    case 7902:
    case 7913:
    case 7914:
    case 7915:
    case 7916:
    case 7925:
    case 7926:
    case 7937:
    case 7938:
    case 7939:
    case 7940:
    case 7943:
    case 7944:
    case 7971:
    case 7972:
    case 7981:
    case 7982:
    case 8011:
    case 8012:
    case 8021:
    case 8022:
    case 8031:
    case 8032:
    case 8041:
    case 8042:
    case 8053:
    case 8054:
    case 8055:
    case 8056:
    case 8065:
    case 8066:
    case 8077:
    case 8078:
    case 8099:
    case 8100:
    case 8109:
    case 8110:
    case 8139:
    case 8140:
    case 8149:
    case 8150:
    case 8159:
    case 8160:
    case 8169:
    case 8170:
    case 8181:
    case 8182:
    case 8183:
    case 8184:
    case 8193:
    case 8194:
    case 8205:
    case 8206:
    case 8207:
    case 8208:
    case 8211:
    case 8212:
    case 8239:
    case 8240:
    case 8249:
    case 8250:
    case 8279:
    case 8280:
    case 8289:
    case 8290:
    case 8299:
    case 8300:
    case 8309:
    case 8310:
    case 8321:
    case 8322:
    case 8323:
    case 8324:
    case 8333:
    case 8334:
    case 8345:
    case 8346:
    case 8367:
    case 8368:
    case 8377:
    case 8378:
    case 8407:
    case 8408:
    case 8417:
    case 8418:
    case 8427:
    case 8428:
    case 8437:
    case 8438:
    case 8449:
    case 8450:
    case 8451:
    case 8452:
    case 8461:
    case 8462:
    case 8473:
    case 8474:
    case 8475:
    case 8476:
    case 8479:
    case 8480:
    case 8507:
    case 8508:
    case 8517:
    case 8518:
    case 8547:
    case 8548:
    case 8557:
    case 8558:
    case 8567:
    case 8568:
    case 8577:
    case 8578:
    case 8589:
    case 8590:
    case 8591:
    case 8592:
    case 8601:
    case 8602:
    case 8613:
    case 8614:
    case 8635:
    case 8636:
    case 8645:
    case 8646:
    case 8675:
    case 8676:
    case 8685:
    case 8686:
    case 8695:
    case 8696:
    case 8705:
    case 8706:
    case 8717:
    case 8718:
    case 8719:
    case 8720:
    case 8729:
    case 8730:
    case 8741:
    case 8742:
    case 8743:
    case 8744:
    case 8747:
    case 8748:
    case 8775:
    case 8776:
    case 8785:
    case 8786:
    case 8815:
    case 8816:
    case 8825:
    case 8826:
    case 8835:
    case 8836:
    case 8845:
    case 8846:
    case 8857:
    case 8858:
    case 8859:
    case 8860:
    case 8869:
    case 8870:
    case 8881:
    case 8882:
    case 8903:
    case 8904:
    case 8913:
    case 8914:
    case 8943:
    case 8944:
    case 8953:
    case 8954:
    case 8963:
    case 8964:
    case 8973:
    case 8974:
    case 8985:
    case 8986:
    case 8987:
    case 8988:
    case 8997:
    case 8998:
    case 9009:
    case 9010:
    case 9011:
    case 9012:
    case 9015:
    case 9016:
    case 9043:
    case 9044:
    case 9053:
    case 9054:
    case 9083:
    case 9084:
    case 9093:
    case 9094:
    case 9103:
    case 9104:
    case 9113:
    case 9114:
    case 9125:
    case 9126:
    case 9127:
    case 9128:
    case 9137:
    case 9138:
    case 9149:
    case 9150:
    case 9171:
    case 9172:
    case 9181:
    case 9182:
    case 9211:
    case 9212:
    case 9221:
    case 9222:
    case 9231:
    case 9232:
    case 9241:
    case 9242:
    case 9253:
    case 9254:
    case 9255:
    case 9256:
    case 9265:
    case 9266:
    case 9277:
    case 9278:
    case 9279:
    case 9280:
    case 9283:
    case 9284:
    case 9311:
    case 9312:
    case 9321:
    case 9322:
    case 9351:
    case 9352:
    case 9361:
    case 9362:
    case 9371:
    case 9372:
    case 9381:
    case 9382:
    case 9393:
    case 9394:
    case 9395:
    case 9396:
    case 9405:
    case 9406:
    case 9417:
    case 9418:
    case 9439:
    case 9440:
    case 9449:
    case 9450:
    case 9479:
    case 9480:
    case 9489:
    case 9490:
    case 9499:
    case 9500:
    case 9509:
    case 9510:
    case 9521:
    case 9522:
    case 9523:
    case 9524:
    case 9533:
    case 9534:
    case 9545:
    case 9546:
    case 9547:
    case 9548:
    case 9551:
    case 9552:
    case 9579:
    case 9580:
    case 9589:
    case 9590:
    case 9619:
    case 9620:
    case 9629:
    case 9630:
    case 9639:
    case 9640:
    case 9649:
    case 9650:
    case 9661:
    case 9662:
    case 9663:
    case 9664:
    case 9673:
    case 9674:
    case 9685:
    case 9686:
    case 9707:
    case 9708:
    case 9717:
    case 9718:
    case 9747:
    case 9748:
    case 9757:
    case 9758:
    case 9767:
    case 9768:
    case 9777:
    case 9778:
    case 9789:
    case 9790:
    case 9791:
    case 9792:
    case 9801:
    case 9802:
    case 9813:
    case 9814:
    case 9815:
    case 9816:
    case 9819:
    case 9820:
    case 9847:
    case 9848:
    case 9857:
    case 9858:
    case 9887:
    case 9888:
    case 9897:
    case 9898:
    case 9907:
    case 9908:
    case 9917:
    case 9918:
    case 9929:
    case 9930:
    case 9931:
    case 9932:
    case 9941:
    case 9942:
    case 9953:
    case 9954:
    case 9975:
    case 9976:
    case 9985:
    case 9986:
    case 10015:
    case 10016:
    case 10025:
    case 10026:
    case 10035:
    case 10036:
    case 10045:
    case 10046:
    case 10057:
    case 10058:
    case 10059:
    case 10060:
    case 10069:
    case 10070:
    case 10081:
    case 10082:
    case 10083:
    case 10084:
    case 10087:
    case 10088:
      int v9 = *(_DWORD *)(*((void *)a2 + 2) + 88);
      goto LABEL_14;
    case 1017:
    case 1018:
    case 1033:
    case 1034:
    case 1049:
    case 1050:
    case 4835:
    case 4836:
    case 4859:
    case 4860:
    case 4963:
    case 4964:
    case 4987:
    case 4988:
    case 4993:
    case 4994:
    case 4997:
    case 4998:
    case 4999:
    case 5000:
    case 5001:
    case 5002:
    case 5103:
    case 5104:
    case 5127:
    case 5128:
    case 5231:
    case 5232:
    case 5255:
    case 5256:
    case 5261:
    case 5262:
    case 5265:
    case 5266:
    case 5267:
    case 5268:
    case 5269:
    case 5270:
    case 5371:
    case 5372:
    case 5395:
    case 5396:
    case 5499:
    case 5500:
    case 5523:
    case 5524:
    case 5529:
    case 5530:
    case 5533:
    case 5534:
    case 5535:
    case 5536:
    case 5537:
    case 5538:
    case 5639:
    case 5640:
    case 5663:
    case 5664:
    case 5767:
    case 5768:
    case 5791:
    case 5792:
    case 5797:
    case 5798:
    case 5801:
    case 5802:
    case 5803:
    case 5804:
    case 5805:
    case 5806:
    case 5907:
    case 5908:
    case 5931:
    case 5932:
    case 6035:
    case 6036:
    case 6059:
    case 6060:
    case 6065:
    case 6066:
    case 6069:
    case 6070:
    case 6071:
    case 6072:
    case 6073:
    case 6074:
    case 6175:
    case 6176:
    case 6199:
    case 6200:
    case 6303:
    case 6304:
    case 6327:
    case 6328:
    case 6333:
    case 6334:
    case 6337:
    case 6338:
    case 6339:
    case 6340:
    case 6341:
    case 6342:
    case 6443:
    case 6444:
    case 6467:
    case 6468:
    case 6571:
    case 6572:
    case 6595:
    case 6596:
    case 6601:
    case 6602:
    case 6605:
    case 6606:
    case 6607:
    case 6608:
    case 6609:
    case 6610:
    case 6711:
    case 6712:
    case 6735:
    case 6736:
    case 6839:
    case 6840:
    case 6863:
    case 6864:
    case 6869:
    case 6870:
    case 6873:
    case 6874:
    case 6875:
    case 6876:
    case 6877:
    case 6878:
    case 6979:
    case 6980:
    case 7003:
    case 7004:
    case 7107:
    case 7108:
    case 7131:
    case 7132:
    case 7137:
    case 7138:
    case 7141:
    case 7142:
    case 7143:
    case 7144:
    case 7145:
    case 7146:
    case 7247:
    case 7248:
    case 7271:
    case 7272:
    case 7375:
    case 7376:
    case 7399:
    case 7400:
    case 7405:
    case 7406:
    case 7409:
    case 7410:
    case 7411:
    case 7412:
    case 7413:
    case 7414:
    case 7515:
    case 7516:
    case 7539:
    case 7540:
    case 7643:
    case 7644:
    case 7667:
    case 7668:
    case 7673:
    case 7674:
    case 7677:
    case 7678:
    case 7679:
    case 7680:
    case 7681:
    case 7682:
    case 7783:
    case 7784:
    case 7807:
    case 7808:
    case 7911:
    case 7912:
    case 7935:
    case 7936:
    case 7941:
    case 7942:
    case 7945:
    case 7946:
    case 7947:
    case 7948:
    case 7949:
    case 7950:
    case 8051:
    case 8052:
    case 8075:
    case 8076:
    case 8179:
    case 8180:
    case 8203:
    case 8204:
    case 8209:
    case 8210:
    case 8213:
    case 8214:
    case 8215:
    case 8216:
    case 8217:
    case 8218:
    case 8319:
    case 8320:
    case 8343:
    case 8344:
    case 8447:
    case 8448:
    case 8471:
    case 8472:
    case 8477:
    case 8478:
    case 8481:
    case 8482:
    case 8483:
    case 8484:
    case 8485:
    case 8486:
    case 8587:
    case 8588:
    case 8611:
    case 8612:
    case 8715:
    case 8716:
    case 8739:
    case 8740:
    case 8745:
    case 8746:
    case 8749:
    case 8750:
    case 8751:
    case 8752:
    case 8753:
    case 8754:
    case 8855:
    case 8856:
    case 8879:
    case 8880:
    case 8983:
    case 8984:
    case 9007:
    case 9008:
    case 9013:
    case 9014:
    case 9017:
    case 9018:
    case 9019:
    case 9020:
    case 9021:
    case 9022:
    case 9123:
    case 9124:
    case 9147:
    case 9148:
    case 9251:
    case 9252:
    case 9275:
    case 9276:
    case 9281:
    case 9282:
    case 9285:
    case 9286:
    case 9287:
    case 9288:
    case 9289:
    case 9290:
    case 9391:
    case 9392:
    case 9415:
    case 9416:
    case 9519:
    case 9520:
    case 9543:
    case 9544:
    case 9549:
    case 9550:
    case 9553:
    case 9554:
    case 9555:
    case 9556:
    case 9557:
    case 9558:
    case 9659:
    case 9660:
    case 9683:
    case 9684:
    case 9787:
    case 9788:
    case 9811:
    case 9812:
    case 9817:
    case 9818:
    case 9821:
    case 9822:
    case 9823:
    case 9824:
    case 9825:
    case 9826:
    case 9927:
    case 9928:
    case 9951:
    case 9952:
    case 10055:
    case 10056:
    case 10079:
    case 10080:
    case 10085:
    case 10086:
    case 10089:
    case 10090:
    case 10091:
    case 10092:
    case 10093:
    case 10094:
      int v9 = *(_DWORD *)(*((void *)a2 + 2) + 72);
LABEL_14:
      v8 |= (unint64_t)(v9 != 0) << 58;
      return v8;
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1093:
    case 1094:
    case 1095:
    case 1096:
    case 1097:
    case 1098:
    case 1099:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1161:
    case 1162:
    case 1163:
    case 1164:
    case 1165:
    case 1166:
    case 1167:
    case 1168:
    case 1169:
    case 1170:
    case 1171:
    case 1172:
    case 1173:
    case 1174:
    case 1175:
    case 1176:
    case 1177:
    case 1178:
    case 1179:
    case 1180:
    case 1181:
    case 1182:
    case 1183:
    case 1184:
    case 1185:
    case 1186:
    case 1187:
    case 1188:
    case 1189:
    case 1190:
    case 1191:
    case 1192:
    case 1193:
    case 1194:
    case 1195:
    case 1196:
    case 1197:
    case 1198:
    case 1199:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1212:
    case 1213:
    case 1214:
    case 1215:
    case 1216:
    case 1217:
    case 1218:
    case 1219:
    case 1220:
    case 1221:
    case 1222:
    case 1223:
    case 1224:
    case 1225:
    case 1226:
    case 1227:
    case 1228:
    case 1229:
    case 1230:
    case 1231:
    case 1232:
    case 1233:
    case 1234:
    case 1235:
    case 1236:
    case 1237:
    case 1238:
    case 1239:
    case 1240:
    case 1241:
    case 1242:
    case 1243:
    case 1244:
    case 1245:
    case 1246:
    case 1247:
    case 1248:
    case 1249:
    case 1250:
    case 1251:
    case 1252:
    case 1253:
    case 1254:
    case 1255:
    case 1256:
    case 1257:
    case 1258:
    case 1259:
    case 1260:
    case 1261:
    case 1262:
    case 1263:
    case 1264:
    case 1265:
    case 1266:
    case 1267:
    case 1268:
    case 1269:
    case 1270:
    case 1271:
    case 1272:
    case 1273:
    case 1274:
    case 1275:
    case 1276:
    case 1277:
    case 1278:
    case 1279:
    case 1280:
    case 1281:
    case 1282:
    case 1283:
    case 1284:
    case 1285:
    case 1286:
    case 1287:
    case 1288:
    case 1289:
    case 1290:
    case 1291:
    case 1292:
    case 1293:
    case 1294:
    case 1295:
    case 1296:
    case 1297:
    case 1298:
    case 1299:
    case 1300:
    case 1301:
    case 1302:
    case 1303:
    case 1304:
      uint64_t v32 = *((void *)a2 + 2);
      int v33 = *(unsigned __int8 *)(v32 + 16);
      if (v33 == 1)
      {
        LOWORD(v34) = sub_1CBC796AC(a1, v32 + 16, *(void *)(a4 + 192), 0);
      }
      else if (v33 == 2)
      {
        int v34 = *(_DWORD *)(v32 + 24);
      }
      else
      {
        uint64_t v74 = *(void *)(v32 + 24);
        if (*(unsigned char *)v74 == 4) {
          int v34 = *(_DWORD *)(*(void *)(v74 + 24) + 16) | 0x2000;
        }
        else {
          LOWORD(v34) = 0;
        }
      }
      v8 |= (unint64_t)(v34 & 0x800) << 45;
      return v8;
    case 1329:
    case 1330:
    case 1332:
    case 1333:
    case 1338:
    case 1339:
    case 1341:
    case 1342:
    case 1354:
    case 1355:
    case 1357:
    case 1358:
    case 1363:
    case 1364:
    case 1366:
    case 1367:
    case 1381:
    case 1382:
    case 1383:
    case 1384:
    case 1389:
    case 1390:
    case 1391:
    case 1392:
    case 1405:
    case 1406:
    case 1407:
    case 1408:
    case 1413:
    case 1414:
    case 1415:
    case 1416:
    case 1449:
    case 1450:
    case 1451:
    case 1452:
    case 1457:
    case 1458:
    case 1459:
    case 1460:
    case 1473:
    case 1474:
    case 1475:
    case 1476:
    case 1481:
    case 1482:
    case 1483:
    case 1484:
    case 1523:
    case 1524:
    case 1526:
    case 1527:
    case 1532:
    case 1533:
    case 1535:
    case 1536:
    case 1548:
    case 1549:
    case 1551:
    case 1552:
    case 1557:
    case 1558:
    case 1560:
    case 1561:
    case 1575:
    case 1576:
    case 1577:
    case 1578:
    case 1583:
    case 1584:
    case 1585:
    case 1586:
    case 1599:
    case 1600:
    case 1601:
    case 1602:
    case 1607:
    case 1608:
    case 1609:
    case 1610:
    case 1643:
    case 1644:
    case 1645:
    case 1646:
    case 1651:
    case 1652:
    case 1653:
    case 1654:
    case 1667:
    case 1668:
    case 1669:
    case 1670:
    case 1675:
    case 1676:
    case 1677:
    case 1678:
    case 1717:
    case 1718:
    case 1720:
    case 1721:
    case 1726:
    case 1727:
    case 1729:
    case 1730:
    case 1742:
    case 1743:
    case 1745:
    case 1746:
    case 1751:
    case 1752:
    case 1754:
    case 1755:
    case 1769:
    case 1770:
    case 1771:
    case 1772:
    case 1777:
    case 1778:
    case 1779:
    case 1780:
    case 1793:
    case 1794:
    case 1795:
    case 1796:
    case 1801:
    case 1802:
    case 1803:
    case 1804:
    case 1837:
    case 1838:
    case 1839:
    case 1840:
    case 1845:
    case 1846:
    case 1847:
    case 1848:
    case 1861:
    case 1862:
    case 1863:
    case 1864:
    case 1869:
    case 1870:
    case 1871:
    case 1872:
    case 1911:
    case 1912:
    case 1914:
    case 1915:
    case 1920:
    case 1921:
    case 1923:
    case 1924:
    case 1936:
    case 1937:
    case 1939:
    case 1940:
    case 1945:
    case 1946:
    case 1948:
    case 1949:
    case 1963:
    case 1964:
    case 1965:
    case 1966:
    case 1971:
    case 1972:
    case 1973:
    case 1974:
    case 1987:
    case 1988:
    case 1989:
    case 1990:
    case 1995:
    case 1996:
    case 1997:
    case 1998:
    case 2031:
    case 2032:
    case 2033:
    case 2034:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2063:
    case 2064:
    case 2065:
    case 2066:
    case 2105:
    case 2106:
    case 2108:
    case 2109:
    case 2114:
    case 2115:
    case 2117:
    case 2118:
    case 2130:
    case 2131:
    case 2133:
    case 2134:
    case 2139:
    case 2140:
    case 2142:
    case 2143:
    case 2157:
    case 2158:
    case 2159:
    case 2160:
    case 2165:
    case 2166:
    case 2167:
    case 2168:
    case 2181:
    case 2182:
    case 2183:
    case 2184:
    case 2189:
    case 2190:
    case 2191:
    case 2192:
    case 2225:
    case 2226:
    case 2227:
    case 2228:
    case 2233:
    case 2234:
    case 2235:
    case 2236:
    case 2249:
    case 2250:
    case 2251:
    case 2252:
    case 2257:
    case 2258:
    case 2259:
    case 2260:
    case 2299:
    case 2300:
    case 2302:
    case 2303:
    case 2308:
    case 2309:
    case 2311:
    case 2312:
    case 2324:
    case 2325:
    case 2327:
    case 2328:
    case 2333:
    case 2334:
    case 2336:
    case 2337:
    case 2351:
    case 2352:
    case 2353:
    case 2354:
    case 2359:
    case 2360:
    case 2361:
    case 2362:
    case 2375:
    case 2376:
    case 2377:
    case 2378:
    case 2383:
    case 2384:
    case 2385:
    case 2386:
    case 2419:
    case 2420:
    case 2421:
    case 2422:
    case 2427:
    case 2428:
    case 2429:
    case 2430:
    case 2443:
    case 2444:
    case 2445:
    case 2446:
    case 2451:
    case 2452:
    case 2453:
    case 2454:
      int v16 = *(_DWORD *)(*((void *)a2 + 2) + 136);
      goto LABEL_124;
    case 1331:
    case 1334:
    case 1335:
    case 1336:
    case 1340:
    case 1343:
    case 1344:
    case 1345:
    case 1347:
    case 1348:
    case 1350:
    case 1351:
    case 1356:
    case 1359:
    case 1360:
    case 1361:
    case 1365:
    case 1368:
    case 1369:
    case 1370:
    case 1372:
    case 1373:
    case 1375:
    case 1376:
    case 1385:
    case 1386:
    case 1393:
    case 1394:
    case 1397:
    case 1398:
    case 1399:
    case 1400:
    case 1409:
    case 1410:
    case 1417:
    case 1418:
    case 1421:
    case 1422:
    case 1423:
    case 1424:
    case 1429:
    case 1430:
    case 1431:
    case 1432:
    case 1437:
    case 1438:
    case 1439:
    case 1440:
    case 1453:
    case 1454:
    case 1461:
    case 1462:
    case 1465:
    case 1466:
    case 1467:
    case 1468:
    case 1477:
    case 1478:
    case 1485:
    case 1486:
    case 1489:
    case 1490:
    case 1491:
    case 1492:
    case 1497:
    case 1498:
    case 1499:
    case 1500:
    case 1505:
    case 1506:
    case 1507:
    case 1508:
    case 1525:
    case 1528:
    case 1529:
    case 1530:
    case 1534:
    case 1537:
    case 1538:
    case 1539:
    case 1541:
    case 1542:
    case 1544:
    case 1545:
    case 1550:
    case 1553:
    case 1554:
    case 1555:
    case 1559:
    case 1562:
    case 1563:
    case 1564:
    case 1566:
    case 1567:
    case 1569:
    case 1570:
    case 1579:
    case 1580:
    case 1587:
    case 1588:
    case 1591:
    case 1592:
    case 1593:
    case 1594:
    case 1603:
    case 1604:
    case 1611:
    case 1612:
    case 1615:
    case 1616:
    case 1617:
    case 1618:
    case 1623:
    case 1624:
    case 1625:
    case 1626:
    case 1631:
    case 1632:
    case 1633:
    case 1634:
    case 1647:
    case 1648:
    case 1655:
    case 1656:
    case 1659:
    case 1660:
    case 1661:
    case 1662:
    case 1671:
    case 1672:
    case 1679:
    case 1680:
    case 1683:
    case 1684:
    case 1685:
    case 1686:
    case 1691:
    case 1692:
    case 1693:
    case 1694:
    case 1699:
    case 1700:
    case 1701:
    case 1702:
    case 1719:
    case 1722:
    case 1723:
    case 1724:
    case 1728:
    case 1731:
    case 1732:
    case 1733:
    case 1735:
    case 1736:
    case 1738:
    case 1739:
    case 1744:
    case 1747:
    case 1748:
    case 1749:
    case 1753:
    case 1756:
    case 1757:
    case 1758:
    case 1760:
    case 1761:
    case 1763:
    case 1764:
    case 1773:
    case 1774:
    case 1781:
    case 1782:
    case 1785:
    case 1786:
    case 1787:
    case 1788:
    case 1797:
    case 1798:
    case 1805:
    case 1806:
    case 1809:
    case 1810:
    case 1811:
    case 1812:
    case 1817:
    case 1818:
    case 1819:
    case 1820:
    case 1825:
    case 1826:
    case 1827:
    case 1828:
    case 1841:
    case 1842:
    case 1849:
    case 1850:
    case 1853:
    case 1854:
    case 1855:
    case 1856:
    case 1865:
    case 1866:
    case 1873:
    case 1874:
    case 1877:
    case 1878:
    case 1879:
    case 1880:
    case 1885:
    case 1886:
    case 1887:
    case 1888:
    case 1893:
    case 1894:
    case 1895:
    case 1896:
    case 1913:
    case 1916:
    case 1917:
    case 1918:
    case 1922:
    case 1925:
    case 1926:
    case 1927:
    case 1929:
    case 1930:
    case 1932:
    case 1933:
    case 1938:
    case 1941:
    case 1942:
    case 1943:
    case 1947:
    case 1950:
    case 1951:
    case 1952:
    case 1954:
    case 1955:
    case 1957:
    case 1958:
    case 1967:
    case 1968:
    case 1975:
    case 1976:
    case 1979:
    case 1980:
    case 1981:
    case 1982:
    case 1991:
    case 1992:
    case 1999:
    case 2000:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2035:
    case 2036:
    case 2043:
    case 2044:
    case 2047:
    case 2048:
    case 2049:
    case 2050:
    case 2059:
    case 2060:
    case 2067:
    case 2068:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2079:
    case 2080:
    case 2081:
    case 2082:
    case 2087:
    case 2088:
    case 2089:
    case 2090:
    case 2107:
    case 2110:
    case 2111:
    case 2112:
    case 2116:
    case 2119:
    case 2120:
    case 2121:
    case 2123:
    case 2124:
    case 2126:
    case 2127:
    case 2132:
    case 2135:
    case 2136:
    case 2137:
    case 2141:
    case 2144:
    case 2145:
    case 2146:
    case 2148:
    case 2149:
    case 2151:
    case 2152:
    case 2161:
    case 2162:
    case 2169:
    case 2170:
    case 2173:
    case 2174:
    case 2175:
    case 2176:
    case 2185:
    case 2186:
    case 2193:
    case 2194:
    case 2197:
    case 2198:
    case 2199:
    case 2200:
    case 2205:
    case 2206:
    case 2207:
    case 2208:
    case 2213:
    case 2214:
    case 2215:
    case 2216:
    case 2229:
    case 2230:
    case 2237:
    case 2238:
    case 2241:
    case 2242:
    case 2243:
    case 2244:
    case 2253:
    case 2254:
    case 2261:
    case 2262:
    case 2265:
    case 2266:
    case 2267:
    case 2268:
    case 2273:
    case 2274:
    case 2275:
    case 2276:
    case 2281:
    case 2282:
    case 2283:
    case 2284:
    case 2301:
    case 2304:
    case 2305:
    case 2306:
    case 2310:
    case 2313:
    case 2314:
    case 2315:
    case 2317:
    case 2318:
    case 2320:
    case 2321:
    case 2326:
    case 2329:
    case 2330:
    case 2331:
    case 2335:
    case 2338:
    case 2339:
    case 2340:
    case 2342:
    case 2343:
    case 2345:
    case 2346:
    case 2355:
    case 2356:
    case 2363:
    case 2364:
    case 2367:
    case 2368:
    case 2369:
    case 2370:
    case 2379:
    case 2380:
    case 2387:
    case 2388:
    case 2391:
    case 2392:
    case 2393:
    case 2394:
    case 2399:
    case 2400:
    case 2401:
    case 2402:
    case 2407:
    case 2408:
    case 2409:
    case 2410:
    case 2423:
    case 2424:
    case 2431:
    case 2432:
    case 2435:
    case 2436:
    case 2437:
    case 2438:
    case 2447:
    case 2448:
    case 2455:
    case 2456:
    case 2459:
    case 2460:
    case 2461:
    case 2462:
    case 2467:
    case 2468:
    case 2469:
    case 2470:
    case 2475:
    case 2476:
    case 2477:
    case 2478:
      int v16 = *(_DWORD *)(*((void *)a2 + 2) + 120);
      goto LABEL_124;
    case 1337:
    case 1346:
    case 1349:
    case 1352:
    case 1362:
    case 1371:
    case 1374:
    case 1377:
    case 1379:
    case 1380:
    case 1387:
    case 1388:
    case 1401:
    case 1402:
    case 1403:
    case 1404:
    case 1411:
    case 1412:
    case 1425:
    case 1426:
    case 1433:
    case 1434:
    case 1441:
    case 1442:
    case 1447:
    case 1448:
    case 1455:
    case 1456:
    case 1469:
    case 1470:
    case 1471:
    case 1472:
    case 1479:
    case 1480:
    case 1493:
    case 1494:
    case 1501:
    case 1502:
    case 1509:
    case 1510:
    case 1531:
    case 1540:
    case 1543:
    case 1546:
    case 1556:
    case 1565:
    case 1568:
    case 1571:
    case 1573:
    case 1574:
    case 1581:
    case 1582:
    case 1595:
    case 1596:
    case 1597:
    case 1598:
    case 1605:
    case 1606:
    case 1619:
    case 1620:
    case 1627:
    case 1628:
    case 1635:
    case 1636:
    case 1641:
    case 1642:
    case 1649:
    case 1650:
    case 1663:
    case 1664:
    case 1665:
    case 1666:
    case 1673:
    case 1674:
    case 1687:
    case 1688:
    case 1695:
    case 1696:
    case 1703:
    case 1704:
    case 1725:
    case 1734:
    case 1737:
    case 1740:
    case 1750:
    case 1759:
    case 1762:
    case 1765:
    case 1767:
    case 1768:
    case 1775:
    case 1776:
    case 1789:
    case 1790:
    case 1791:
    case 1792:
    case 1799:
    case 1800:
    case 1813:
    case 1814:
    case 1821:
    case 1822:
    case 1829:
    case 1830:
    case 1835:
    case 1836:
    case 1843:
    case 1844:
    case 1857:
    case 1858:
    case 1859:
    case 1860:
    case 1867:
    case 1868:
    case 1881:
    case 1882:
    case 1889:
    case 1890:
    case 1897:
    case 1898:
    case 1919:
    case 1928:
    case 1931:
    case 1934:
    case 1944:
    case 1953:
    case 1956:
    case 1959:
    case 1961:
    case 1962:
    case 1969:
    case 1970:
    case 1983:
    case 1984:
    case 1985:
    case 1986:
    case 1993:
    case 1994:
    case 2007:
    case 2008:
    case 2015:
    case 2016:
    case 2023:
    case 2024:
    case 2029:
    case 2030:
    case 2037:
    case 2038:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2061:
    case 2062:
    case 2075:
    case 2076:
    case 2083:
    case 2084:
    case 2091:
    case 2092:
    case 2113:
    case 2122:
    case 2125:
    case 2128:
    case 2138:
    case 2147:
    case 2150:
    case 2153:
    case 2155:
    case 2156:
    case 2163:
    case 2164:
    case 2177:
    case 2178:
    case 2179:
    case 2180:
    case 2187:
    case 2188:
    case 2201:
    case 2202:
    case 2209:
    case 2210:
    case 2217:
    case 2218:
    case 2223:
    case 2224:
    case 2231:
    case 2232:
    case 2245:
    case 2246:
    case 2247:
    case 2248:
    case 2255:
    case 2256:
    case 2269:
    case 2270:
    case 2277:
    case 2278:
    case 2285:
    case 2286:
    case 2307:
    case 2316:
    case 2319:
    case 2322:
    case 2332:
    case 2341:
    case 2344:
    case 2347:
    case 2349:
    case 2350:
    case 2357:
    case 2358:
    case 2371:
    case 2372:
    case 2373:
    case 2374:
    case 2381:
    case 2382:
    case 2395:
    case 2396:
    case 2403:
    case 2404:
    case 2411:
    case 2412:
    case 2417:
    case 2418:
    case 2425:
    case 2426:
    case 2439:
    case 2440:
    case 2441:
    case 2442:
    case 2449:
    case 2450:
    case 2463:
    case 2464:
    case 2471:
    case 2472:
    case 2479:
    case 2480:
      int v16 = *(_DWORD *)(*((void *)a2 + 2) + 104);
      goto LABEL_124;
    case 1353:
    case 1378:
    case 1395:
    case 1396:
    case 1419:
    case 1420:
    case 1427:
    case 1428:
    case 1435:
    case 1436:
    case 1445:
    case 1446:
    case 1463:
    case 1464:
    case 1487:
    case 1488:
    case 1495:
    case 1496:
    case 1503:
    case 1504:
    case 1513:
    case 1514:
    case 1515:
    case 1516:
    case 1518:
    case 1519:
    case 1547:
    case 1572:
    case 1589:
    case 1590:
    case 1613:
    case 1614:
    case 1621:
    case 1622:
    case 1629:
    case 1630:
    case 1639:
    case 1640:
    case 1657:
    case 1658:
    case 1681:
    case 1682:
    case 1689:
    case 1690:
    case 1697:
    case 1698:
    case 1707:
    case 1708:
    case 1709:
    case 1710:
    case 1712:
    case 1713:
    case 1741:
    case 1766:
    case 1783:
    case 1784:
    case 1807:
    case 1808:
    case 1815:
    case 1816:
    case 1823:
    case 1824:
    case 1833:
    case 1834:
    case 1851:
    case 1852:
    case 1875:
    case 1876:
    case 1883:
    case 1884:
    case 1891:
    case 1892:
    case 1901:
    case 1902:
    case 1903:
    case 1904:
    case 1906:
    case 1907:
    case 1935:
    case 1960:
    case 1977:
    case 1978:
    case 2001:
    case 2002:
    case 2009:
    case 2010:
    case 2017:
    case 2018:
    case 2027:
    case 2028:
    case 2045:
    case 2046:
    case 2069:
    case 2070:
    case 2077:
    case 2078:
    case 2085:
    case 2086:
    case 2095:
    case 2096:
    case 2097:
    case 2098:
    case 2100:
    case 2101:
    case 2129:
    case 2154:
    case 2171:
    case 2172:
    case 2195:
    case 2196:
    case 2203:
    case 2204:
    case 2211:
    case 2212:
    case 2221:
    case 2222:
    case 2239:
    case 2240:
    case 2263:
    case 2264:
    case 2271:
    case 2272:
    case 2279:
    case 2280:
    case 2289:
    case 2290:
    case 2291:
    case 2292:
    case 2294:
    case 2295:
    case 2323:
    case 2348:
    case 2365:
    case 2366:
    case 2389:
    case 2390:
    case 2397:
    case 2398:
    case 2405:
    case 2406:
    case 2415:
    case 2416:
    case 2433:
    case 2434:
    case 2457:
    case 2458:
    case 2465:
    case 2466:
    case 2473:
    case 2474:
    case 2483:
    case 2484:
    case 2485:
    case 2486:
    case 2488:
    case 2489:
      int v16 = *(_DWORD *)(*((void *)a2 + 2) + 88);
      goto LABEL_124;
    case 1443:
    case 1444:
    case 1511:
    case 1512:
    case 1517:
    case 1520:
    case 1521:
    case 1522:
    case 1637:
    case 1638:
    case 1705:
    case 1706:
    case 1711:
    case 1714:
    case 1715:
    case 1716:
    case 1831:
    case 1832:
    case 1899:
    case 1900:
    case 1905:
    case 1908:
    case 1909:
    case 1910:
    case 2025:
    case 2026:
    case 2093:
    case 2094:
    case 2099:
    case 2102:
    case 2103:
    case 2104:
    case 2219:
    case 2220:
    case 2287:
    case 2288:
    case 2293:
    case 2296:
    case 2297:
    case 2298:
    case 2413:
    case 2414:
    case 2481:
    case 2482:
    case 2487:
    case 2490:
    case 2491:
    case 2492:
      int v16 = *(_DWORD *)(*((void *)a2 + 2) + 72);
LABEL_124:
      uint64_t v110 = v16 != 0;
      goto LABEL_1608;
    case 2499:
      v1104 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v1105 = *((void *)a2 + 2);
      int v1108 = *(unsigned __int8 *)(v1105 + 16);
      uint64_t v1106 = v1105 + 16;
      int v1107 = v1108;
      if (v1108 == 1)
      {
        LOBYTE(v1109) = sub_1CBC796AC(a1, v1106, *(void *)(a4 + 192), 0);
        v1104 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1107 == 2)
      {
        int v1109 = *((_DWORD *)v1104 + 6);
      }
      else
      {
        uint64_t v1166 = *((void *)v1104 + 3);
        if (*(unsigned char *)v1166 == 4) {
          int v1109 = *(_DWORD *)(*(void *)(v1166 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1109) = 0;
        }
      }
      unint64_t v1327 = ((unint64_t)(v1109 & 1) << 56) & 0x9FFFFFFFFFFFFFFFLL | ((*((void *)v1104 + 5) & 3) << 61);
      int v1328 = *v1104;
      if (v1328 == 1)
      {
        LOBYTE(v1329) = sub_1CBC796AC(a1, (uint64_t)v1104, *(void *)(a4 + 192), 0);
      }
      else if (v1328 == 2)
      {
        int v1329 = *((_DWORD *)v1104 + 2);
      }
      else
      {
        uint64_t v1330 = *((void *)v1104 + 1);
        if (*(unsigned char *)v1330 == 4) {
          int v1329 = *(_DWORD *)(*(void *)(v1330 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1329) = 0;
        }
      }
      unint64_t v87 = v1327 | ((v1329 & 1) << 19);
      goto LABEL_110;
    case 2500:
      v1113 = (unsigned __int8 *)*((void *)a2 + 2);
      int v1114 = *v1113;
      if (v1114 == 1)
      {
        LOBYTE(v1115) = sub_1CBC796AC(a1, (uint64_t)v1113, *(void *)(a4 + 192), 0);
        v1113 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1114 == 2)
      {
        int v1115 = *((_DWORD *)v1113 + 2);
      }
      else
      {
        uint64_t v1168 = *((void *)v1113 + 1);
        if (*(unsigned char *)v1168 == 4) {
          int v1115 = *(_DWORD *)(*(void *)(v1168 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1115) = 0;
        }
      }
      unint64_t v538 = (unint64_t)(v1115 & 1) << 40;
      uint64_t v539 = *((void *)v1113 + 3);
      goto LABEL_803;
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2526:
    case 2527:
    case 2528:
    case 2529:
    case 2530:
    case 2531:
    case 2532:
    case 2533:
    case 2534:
    case 2535:
    case 2536:
    case 2537:
    case 2538:
    case 2539:
    case 2540:
    case 2541:
      uint64_t v279 = *((void *)a2 + 2);
      int v280 = *(unsigned __int8 *)(v279 + 64);
      if (v280 == 1)
      {
        LOBYTE(v281) = sub_1CBC796AC(a1, v279 + 64, *(void *)(a4 + 192), 0);
        uint64_t v279 = *((void *)a2 + 2);
      }
      else if (v280 == 2)
      {
        int v281 = *(_DWORD *)(v279 + 72);
      }
      else
      {
        uint64_t v440 = *(void *)(v279 + 72);
        if (*(unsigned char *)v440 == 4) {
          int v281 = *(_DWORD *)(*(void *)(v440 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v281) = 0;
        }
      }
      int v900 = 32 * (v281 & 3);
      int v901 = *(unsigned __int8 *)(v279 + 80);
      if (v901 == 1)
      {
        LOBYTE(v902) = sub_1CBC796AC(a1, v279 + 80, *(void *)(a4 + 192), 0);
        uint64_t v279 = *((void *)a2 + 2);
      }
      else if (v901 == 2)
      {
        int v902 = *(_DWORD *)(v279 + 88);
      }
      else
      {
        uint64_t v903 = *(void *)(v279 + 88);
        if (*(unsigned char *)v903 == 4) {
          int v902 = *(_DWORD *)(*(void *)(v903 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v902) = 0;
        }
      }
      int v904 = (16 * (v902 & 1)) | v900;
      int v905 = *(unsigned __int8 *)(v279 + 96);
      if (v905 == 1)
      {
        LOBYTE(v906) = sub_1CBC796AC(a1, v279 + 96, *(void *)(a4 + 192), 0);
        uint64_t v279 = *((void *)a2 + 2);
      }
      else if (v905 == 2)
      {
        int v906 = *(_DWORD *)(v279 + 104);
      }
      else
      {
        uint64_t v907 = *(void *)(v279 + 104);
        if (*(unsigned char *)v907 == 4) {
          int v906 = *(_DWORD *)(*(void *)(v907 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v906) = 0;
        }
      }
      int v908 = v904 | (8 * (v906 & 1));
      int v909 = *(unsigned __int8 *)(v279 + 112);
      if (v909 == 1)
      {
        LOBYTE(v910) = sub_1CBC796AC(a1, v279 + 112, *(void *)(a4 + 192), 0);
        uint64_t v279 = *((void *)a2 + 2);
      }
      else if (v909 == 2)
      {
        int v910 = *(_DWORD *)(v279 + 120);
      }
      else
      {
        uint64_t v911 = *(void *)(v279 + 120);
        if (*(unsigned char *)v911 == 4) {
          int v910 = *(_DWORD *)(*(void *)(v911 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v910) = 0;
        }
      }
      uint64_t v530 = v908 | (4 * (v910 & 1)) | *(_DWORD *)(v279 + 136) & 3u;
      goto LABEL_1351;
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2517:
    case 2518:
    case 2519:
    case 2520:
    case 2521:
    case 2522:
    case 2523:
    case 2524:
    case 2525:
      char v282 = (unsigned __int8 *)*((void *)a2 + 2);
      int v283 = *v282;
      if (v283 == 1)
      {
        uint64_t v284 = sub_1CBC796AC(a1, (uint64_t)v282, *(void *)(a4 + 192), 0);
        char v282 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v283 == 2)
      {
        uint64_t v284 = *((unsigned int *)v282 + 2);
      }
      else
      {
        uint64_t v441 = *((void *)v282 + 1);
        if (*(unsigned char *)v441 == 4) {
          uint64_t v284 = *(_DWORD *)(*(void *)(v441 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v284 = 0;
        }
      }
      int v912 = v282[16];
      if (v912 == 1)
      {
        uint64_t v913 = sub_1CBC796AC(a1, (uint64_t)(v282 + 16), *(void *)(a4 + 192), 0);
        char v282 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v912 == 2)
      {
        uint64_t v913 = *((unsigned int *)v282 + 6);
      }
      else
      {
        uint64_t v914 = *((void *)v282 + 3);
        if (*(unsigned char *)v914 == 4) {
          uint64_t v913 = *(_DWORD *)(*(void *)(v914 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v913 = 0;
        }
      }
      int v915 = v282[48];
      uint64_t v1383 = a4;
      if (v915 == 1)
      {
        int v916 = sub_1CBC796AC(a1, (uint64_t)(v282 + 48), *(void *)(a4 + 192), 0);
        char v282 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v915 == 2)
      {
        int v916 = *((_DWORD *)v282 + 14);
      }
      else
      {
        uint64_t v917 = *((void *)v282 + 7);
        if (*(unsigned char *)v917 == 4) {
          int v916 = *(_DWORD *)(*(void *)(v917 + 24) + 16) | 0x2000;
        }
        else {
          int v916 = 0;
        }
      }
      unsigned __int8 v918 = v284;
      int v919 = v916 << 12;
      int v920 = v282[96];
      uint64_t v1367 = (v913 << 24);
      uint64_t v1372 = a1;
      if (v920 == 1)
      {
        LOBYTE(v921) = sub_1CBC796AC(a1, (uint64_t)(v282 + 96), *(void *)(v1383 + 192), 0);
        char v282 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v920 == 2)
      {
        int v921 = *((_DWORD *)v282 + 26);
      }
      else
      {
        uint64_t v922 = *((void *)v282 + 13);
        if (*(unsigned char *)v922 == 4) {
          int v921 = *(_DWORD *)(*(void *)(v922 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v921) = 0;
        }
      }
      uint64_t v923 = v284 << 41;
      unint64_t v924 = (unint64_t)v284 << 25;
      uint64_t v925 = v913 << 25;
      uint64_t v926 = v921 & 1;
      int v927 = v282[64];
      uint64_t v928 = *((void *)v282 + 15);
      if (v927 == 1)
      {
        LOBYTE(v929) = sub_1CBC796AC(v1372, (uint64_t)(v282 + 64), *(void *)(v1383 + 192), 0);
        char v282 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v927 == 2)
      {
        int v929 = *((_DWORD *)v282 + 18);
      }
      else
      {
        uint64_t v930 = *((void *)v282 + 9);
        if (*(unsigned char *)v930 == 4) {
          int v929 = *(_DWORD *)(*(void *)(v930 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v929) = 0;
        }
      }
      uint64_t v931 = v923 & 0x6000000000000;
      unint64_t v932 = (unint64_t)v918 << 40;
      uint64_t v933 = v924 & 0x7800000000;
      uint64_t v934 = v925 & 0x600000000;
      unint64_t v935 = (unint64_t)(v916 & 0x1F) << 51;
      uint64_t v936 = *(void *)&v919 & 0x3E0000;
      uint64_t v937 = v926 << 56;
      unint64_t v938 = (unint64_t)(v928 & 3) << 61;
      uint64_t v939 = 32 * (v929 & 3u);
      int v940 = v282[80];
      if (v940 == 1)
      {
        LOBYTE(v941) = sub_1CBC796AC(v1372, (uint64_t)(v282 + 80), *(void *)(v1383 + 192), 0);
      }
      else if (v940 == 2)
      {
        int v941 = *((_DWORD *)v282 + 22);
      }
      else
      {
        uint64_t v942 = *((void *)v282 + 11);
        if (*(unsigned char *)v942 == 4) {
          int v941 = *(_DWORD *)(*(void *)(v942 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v941) = 0;
        }
      }
      unint64_t v391 = v931 | v932 | v933 | v934 | v1367 | v935 | v936 | v937 | v938;
      uint64_t v132 = v939 | ((v941 & 3) << 13);
      goto LABEL_1107;
    case 2542:
    case 2543:
    case 2544:
    case 2545:
    case 2546:
    case 2547:
    case 2548:
    case 2549:
    case 2550:
    case 2551:
    case 2552:
    case 2553:
    case 2554:
    case 2555:
    case 2556:
    case 2557:
    case 2558:
    case 2559:
    case 2560:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
      char v177 = (unsigned __int8 *)*((void *)a2 + 2);
      int v178 = *v177;
      if (v178 == 1)
      {
        int v179 = sub_1CBC796AC(a1, (uint64_t)v177, *(void *)(a4 + 192), 0);
        char v177 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v178 == 2)
      {
        int v179 = *((_DWORD *)v177 + 2);
      }
      else
      {
        uint64_t v392 = *((void *)v177 + 1);
        if (*(unsigned char *)v392 == 4) {
          int v179 = *(_DWORD *)(*(void *)(v392 + 24) + 16) | 0x2000;
        }
        else {
          int v179 = 0;
        }
      }
      int v747 = v177[16];
      if (v747 == 1)
      {
        int v748 = sub_1CBC796AC(a1, (uint64_t)(v177 + 16), *(void *)(a4 + 192), 0);
        char v177 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v747 == 2)
      {
        int v748 = *((_DWORD *)v177 + 6);
      }
      else
      {
        uint64_t v749 = *((void *)v177 + 3);
        if (*(unsigned char *)v749 == 4) {
          int v748 = *(_DWORD *)(*(void *)(v749 + 24) + 16) | 0x2000;
        }
        else {
          int v748 = 0;
        }
      }
      int v750 = v177[32];
      uint64_t v1378 = a4;
      if (v750 == 1)
      {
        LOBYTE(v751) = sub_1CBC796AC(a1, (uint64_t)(v177 + 32), *(void *)(a4 + 192), 0);
        char v177 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v750 == 2)
      {
        int v751 = *((_DWORD *)v177 + 10);
      }
      else
      {
        uint64_t v752 = *((void *)v177 + 5);
        if (*(unsigned char *)v752 == 4) {
          int v751 = *(_DWORD *)(*(void *)(v752 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v751) = 0;
        }
      }
      int v753 = v179 << 14;
      int v754 = v177[48];
      uint64_t v1364 = (v748 << 24);
      if (v754 == 1)
      {
        LOBYTE(v755) = sub_1CBC796AC(a1, (uint64_t)(v177 + 48), *(void *)(v1378 + 192), 0);
        char v177 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v754 == 2)
      {
        int v755 = *((_DWORD *)v177 + 14);
      }
      else
      {
        uint64_t v756 = *((void *)v177 + 7);
        if (*(unsigned char *)v756 == 4) {
          int v755 = *(_DWORD *)(*(void *)(v756 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v755) = 0;
        }
      }
      uint64_t v757 = 16 * (v755 & 1u);
      int v758 = v177[64];
      if (v758 == 1)
      {
        LOBYTE(v759) = sub_1CBC796AC(a1, (uint64_t)(v177 + 64), *(void *)(v1378 + 192), 0);
        char v177 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v758 == 2)
      {
        int v759 = *((_DWORD *)v177 + 18);
      }
      else
      {
        uint64_t v760 = *((void *)v177 + 9);
        if (*(unsigned char *)v760 == 4) {
          int v759 = *(_DWORD *)(*(void *)(v760 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v759) = 0;
        }
      }
      unint64_t v761 = (unint64_t)(v179 & 0x3F) << 40;
      uint64_t v762 = *(void *)&v753 & 0xF00000;
      uint64_t v763 = (unsigned __int16)v748 & 0xFF00;
      uint64_t v764 = 4 * (v751 & 1);
      uint64_t v765 = v751 & 2;
      uint64_t v343 = 8 * (v759 & 1u);
      int v766 = v177[80];
      if (v766 == 1)
      {
        LOBYTE(v767) = sub_1CBC796AC(a1, (uint64_t)(v177 + 80), *(void *)(v1378 + 192), 0);
        char v177 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v766 == 2)
      {
        int v767 = *((_DWORD *)v177 + 22);
      }
      else
      {
        uint64_t v768 = *((void *)v177 + 11);
        if (*(unsigned char *)v768 == 4) {
          int v767 = *(_DWORD *)(*(void *)(v768 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v767) = 0;
        }
      }
      uint64_t v348 = v767 & 1;
      uint64_t v349 = (*((void *)v177 + 13) & 3) << 61;
      unint64_t v350 = v761 | v762 | v763 | v1364;
      uint64_t v351 = v765 | v764 | v757;
      goto LABEL_1274;
    case 2566:
    case 2567:
    case 2568:
    case 2569:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
    case 2577:
    case 2578:
    case 2579:
    case 2580:
    case 2581:
    case 2582:
    case 2583:
    case 2584:
    case 2585:
    case 2586:
    case 2587:
    case 2588:
    case 2589:
      uint64_t v183 = (unsigned __int8 *)*((void *)a2 + 2);
      int v184 = *v183;
      if (v184 == 1)
      {
        int v185 = sub_1CBC796AC(a1, (uint64_t)v183, *(void *)(a4 + 192), 0);
        uint64_t v183 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v184 == 2)
      {
        int v185 = *((_DWORD *)v183 + 2);
      }
      else
      {
        uint64_t v437 = *((void *)v183 + 1);
        if (*(unsigned char *)v437 == 4) {
          int v185 = *(_DWORD *)(*(void *)(v437 + 24) + 16) | 0x2000;
        }
        else {
          int v185 = 0;
        }
      }
      int v805 = v183[16];
      if (v805 == 1)
      {
        int v806 = sub_1CBC796AC(a1, (uint64_t)(v183 + 16), *(void *)(a4 + 192), 0);
        uint64_t v183 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v805 == 2)
      {
        int v806 = *((_DWORD *)v183 + 6);
      }
      else
      {
        uint64_t v807 = *((void *)v183 + 3);
        if (*(unsigned char *)v807 == 4) {
          int v806 = *(_DWORD *)(*(void *)(v807 + 24) + 16) | 0x2000;
        }
        else {
          int v806 = 0;
        }
      }
      int v808 = v183[32];
      uint64_t v1380 = a4;
      if (v808 == 1)
      {
        LOBYTE(v809) = sub_1CBC796AC(a1, (uint64_t)(v183 + 32), *(void *)(a4 + 192), 0);
        uint64_t v183 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v808 == 2)
      {
        int v809 = *((_DWORD *)v183 + 10);
      }
      else
      {
        uint64_t v810 = *((void *)v183 + 5);
        if (*(unsigned char *)v810 == 4) {
          int v809 = *(_DWORD *)(*(void *)(v810 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v809) = 0;
        }
      }
      int v811 = v185 << 14;
      uint64_t v812 = (v806 << 24);
      int v813 = v183[48];
      if (v813 == 1)
      {
        LOBYTE(v814) = sub_1CBC796AC(a1, (uint64_t)(v183 + 48), *(void *)(v1380 + 192), 0);
        uint64_t v183 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v813 == 2)
      {
        int v814 = *((_DWORD *)v183 + 14);
      }
      else
      {
        uint64_t v815 = *((void *)v183 + 7);
        if (*(unsigned char *)v815 == 4) {
          int v814 = *(_DWORD *)(*(void *)(v815 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v814) = 0;
        }
      }
      uint64_t v816 = 16 * (v814 & 1u);
      int v817 = v183[64];
      if (v817 == 1)
      {
        uint64_t v819 = 16 * (v814 & 1u);
        LOBYTE(v818) = sub_1CBC796AC(a1, (uint64_t)(v183 + 64), *(void *)(v1380 + 192), 0);
        uint64_t v816 = v819;
        uint64_t v183 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v817 == 2)
      {
        int v818 = *((_DWORD *)v183 + 18);
      }
      else
      {
        uint64_t v820 = *((void *)v183 + 9);
        if (*(unsigned char *)v820 == 4) {
          int v818 = *(_DWORD *)(*(void *)(v820 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v818) = 0;
        }
      }
      unint64_t v821 = (unint64_t)(v185 & 0x3F) << 40;
      uint64_t v822 = *(void *)&v811 & 0xF00000;
      uint64_t v823 = (unsigned __int16)v806 & 0xFF00;
      uint64_t v824 = 4 * (v809 & 1);
      uint64_t v825 = v809 & 2;
      uint64_t v343 = 8 * (v818 & 1u);
      int v826 = v183[80];
      if (v826 == 1)
      {
        uint64_t v828 = a1;
        uint64_t v829 = v816;
        LOBYTE(v827) = sub_1CBC796AC(v828, (uint64_t)(v183 + 80), *(void *)(v1380 + 192), 0);
        uint64_t v816 = v829;
        uint64_t v183 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v826 == 2)
      {
        int v827 = *((_DWORD *)v183 + 22);
      }
      else
      {
        uint64_t v830 = *((void *)v183 + 11);
        if (*(unsigned char *)v830 == 4) {
          int v827 = *(_DWORD *)(*(void *)(v830 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v827) = 0;
        }
      }
      uint64_t v348 = v827 & 1;
      uint64_t v349 = (*((void *)v183 + 13) & 3) << 61;
      unint64_t v350 = v821 | v822 | v823 | v812;
      unint64_t v831 = v825 | v824;
      goto LABEL_1273;
    case 2902:
      v1079 = (unsigned __int8 *)*((void *)a2 + 2);
      int v1080 = *v1079;
      if (v1080 == 1)
      {
        unint64_t v1081 = sub_1CBC796AC(a1, (uint64_t)v1079, *(void *)(a4 + 192), 0);
        v1079 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1080 == 2)
      {
        unint64_t v1081 = *((unsigned int *)v1079 + 2);
      }
      else
      {
        uint64_t v1162 = *((void *)v1079 + 1);
        if (*(unsigned char *)v1162 == 4) {
          unint64_t v1081 = *(_DWORD *)(*(void *)(v1162 + 24) + 16) | 0x2000u;
        }
        else {
          unint64_t v1081 = 0;
        }
      }
      uint64_t v1285 = (v1081 << 24) | (((v1081 >> 8) & 3) << 33);
      int v1286 = v1079[48];
      if (v1286 == 1)
      {
        LOBYTE(v1287) = sub_1CBC796AC(a1, (uint64_t)(v1079 + 48), *(void *)(a4 + 192), 0);
        v1079 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1286 == 2)
      {
        int v1287 = *((_DWORD *)v1079 + 14);
      }
      else
      {
        uint64_t v1288 = *((void *)v1079 + 7);
        if (*(unsigned char *)v1288 == 4) {
          int v1287 = *(_DWORD *)(*(void *)(v1288 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1287) = 0;
        }
      }
      int v1289 = v1079[16];
      unint64_t v1290 = (v1285 | ((unint64_t)(v1287 & 1) << 56)) & 0x9FFFFFFFFFFFFFFFLL | ((*((void *)v1079 + 9) & 3) << 61);
      if (v1289 == 1)
      {
        LOBYTE(v1291) = sub_1CBC796AC(a1, (uint64_t)(v1079 + 16), *(void *)(a4 + 192), 0);
        v1079 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1289 == 2)
      {
        int v1291 = *((_DWORD *)v1079 + 6);
      }
      else
      {
        uint64_t v1292 = *((void *)v1079 + 3);
        if (*(unsigned char *)v1292 == 4) {
          int v1291 = *(_DWORD *)(*(void *)(v1292 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1291) = 0;
        }
      }
      unint64_t v1207 = v1290 | (32 * (v1291 & 3u));
      int v1293 = v1079[32];
      if (v1293 == 1)
      {
        LOBYTE(v1294) = sub_1CBC796AC(a1, (uint64_t)(v1079 + 32), *(void *)(a4 + 192), 0);
      }
      else if (v1293 == 2)
      {
        int v1294 = *((_DWORD *)v1079 + 10);
      }
      else
      {
        uint64_t v1295 = *((void *)v1079 + 5);
        if (*(unsigned char *)v1295 == 4) {
          int v1294 = *(_DWORD *)(*(void *)(v1295 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1294) = 0;
        }
      }
      uint64_t v1211 = (v1294 & 3) << 13;
LABEL_1907:
      v8 |= v1207 | v1211;
      return v8;
    case 2903:
    case 2904:
      uint64_t v1033 = *((void *)a2 + 2);
      if (*(unsigned char *)v1033 == 1)
      {
        unint64_t v1034 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *(unsigned int *)(v1033 + 8));
      }
      else
      {
        uint64_t v1136 = *(void *)(v1033 + 8);
        if (v1136) {
          uint64_t v1137 = v1136 - 8;
        }
        else {
          uint64_t v1137 = 0;
        }
        unint64_t v1034 = (*(void *)(*(void *)(v1137 + 32) + 16) / 2) | 0x2000;
      }
      int v1138 = *(unsigned __int8 *)(v1033 + 16);
      if (v1138 == 1)
      {
        int v1139 = sub_1CBC796AC(a1, v1033 + 16, *(void *)(a4 + 192), 0);
        uint64_t v1033 = *((void *)a2 + 2);
      }
      else if (v1138 == 2)
      {
        int v1139 = *(_DWORD *)(v1033 + 24);
      }
      else
      {
        uint64_t v1154 = *(void *)(v1033 + 24);
        if (*(unsigned char *)v1154 == 4) {
          int v1139 = *(_DWORD *)(*(void *)(v1154 + 24) + 16) | 0x2000;
        }
        else {
          int v1139 = 0;
        }
      }
      int v1173 = *(unsigned __int8 *)(v1033 + 32);
      if (v1173 == 1)
      {
        LOBYTE(v1174) = sub_1CBC796AC(a1, v1033 + 32, *(void *)(a4 + 192), 0);
        uint64_t v1033 = *((void *)a2 + 2);
      }
      else if (v1173 == 2)
      {
        int v1174 = *(_DWORD *)(v1033 + 40);
      }
      else
      {
        uint64_t v1175 = *(void *)(v1033 + 40);
        if (*(unsigned char *)v1175 == 4) {
          int v1174 = *(_DWORD *)(*(void *)(v1175 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1174) = 0;
        }
      }
      int v1176 = v1034 << 10;
      int v1177 = *(unsigned __int8 *)(v1033 + 48);
      uint64_t v1358 = (v1139 << 24);
      uint64_t v1368 = 2 * (v1174 & 3u);
      if (v1177 == 1)
      {
        LOBYTE(v1178) = sub_1CBC796AC(a1, v1033 + 48, *(void *)(a4 + 192), 0);
        uint64_t v1033 = *((void *)a2 + 2);
      }
      else if (v1177 == 2)
      {
        int v1178 = *(_DWORD *)(v1033 + 56);
      }
      else
      {
        uint64_t v1179 = *(void *)(v1033 + 56);
        if (*(unsigned char *)v1179 == 4) {
          int v1178 = *(_DWORD *)(*(void *)(v1179 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1178) = 0;
        }
      }
      unint64_t v1180 = v1034 << 44;
      unint64_t v1181 = v1034 >> 4;
      uint64_t v1182 = 16 * (v1178 & 1u);
      int v1183 = *(unsigned __int8 *)(v1033 + 64);
      if (v1183 == 1)
      {
        LOBYTE(v1184) = sub_1CBC796AC(a1, v1033 + 64, *(void *)(a4 + 192), 0);
        uint64_t v1033 = *((void *)a2 + 2);
      }
      else if (v1183 == 2)
      {
        int v1184 = *(_DWORD *)(v1033 + 72);
      }
      else
      {
        uint64_t v1185 = *(void *)(v1033 + 72);
        if (*(unsigned char *)v1185 == 4) {
          int v1184 = *(_DWORD *)(*(void *)(v1185 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1184) = 0;
        }
      }
      unint64_t v1186 = (v1034 & 0x7F) << 33;
      uint64_t v1187 = *(void *)&v1176 & 0xE0000;
      uint64_t v1188 = v1181 & 0xC0;
      uint64_t v1189 = (unsigned __int16)v1139 & 0xFF00;
      uint64_t v1190 = 8 * (v1184 & 1u);
      int v1191 = *(unsigned __int8 *)(v1033 + 80);
      if (v1191 == 1)
      {
        LOBYTE(v1192) = sub_1CBC796AC(a1, v1033 + 80, *(void *)(a4 + 192), 0);
        uint64_t v1033 = *((void *)a2 + 2);
      }
      else if (v1191 == 2)
      {
        int v1192 = *(_DWORD *)(v1033 + 88);
      }
      else
      {
        uint64_t v1193 = *(void *)(v1033 + 88);
        if (*(unsigned char *)v1193 == 4) {
          int v1192 = *(_DWORD *)(*(void *)(v1193 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1192) = 0;
        }
      }
      uint64_t v132 = (*(void *)(v1033 + 104) & 3) << 61;
      unint64_t v391 = v1180 & 0x200000000000000 | v1186 | v1187 | v1188 | v1189 | v1358 | v1368 | v1182 | v1190 | ((unint64_t)(v1192 & 1) << 56);
      goto LABEL_1107;
    case 3745:
    case 3746:
    case 3747:
    case 3748:
    case 3749:
    case 3750:
    case 3751:
    case 3752:
    case 3753:
    case 3754:
    case 3755:
    case 3756:
    case 3757:
    case 3758:
    case 3759:
    case 3760:
    case 3761:
    case 3762:
    case 3763:
    case 3764:
    case 3765:
    case 3766:
    case 3767:
    case 3768:
      uint64_t v186 = (unsigned __int8 *)*((void *)a2 + 2);
      int v187 = *v186;
      if (v187 == 1)
      {
        int v188 = sub_1CBC796AC(a1, (uint64_t)v186, *(void *)(a4 + 192), 0);
        uint64_t v186 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v187 == 2)
      {
        int v188 = *((_DWORD *)v186 + 2);
      }
      else
      {
        uint64_t v438 = *((void *)v186 + 1);
        if (*(unsigned char *)v438 == 4) {
          int v188 = *(_DWORD *)(*(void *)(v438 + 24) + 16) | 0x2000;
        }
        else {
          int v188 = 0;
        }
      }
      int v832 = v186[16];
      if (v832 == 1)
      {
        uint64_t v833 = sub_1CBC796AC(a1, (uint64_t)(v186 + 16), *(void *)(a4 + 192), 0);
        uint64_t v186 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v832 == 2)
      {
        uint64_t v833 = *((unsigned int *)v186 + 6);
      }
      else
      {
        uint64_t v834 = *((void *)v186 + 3);
        if (*(unsigned char *)v834 == 4) {
          uint64_t v833 = *(_DWORD *)(*(void *)(v834 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v833 = 0;
        }
      }
      int v835 = v186[32];
      uint64_t v1381 = a4;
      if (v835 == 1)
      {
        unsigned int v836 = sub_1CBC796AC(a1, (uint64_t)(v186 + 32), *(void *)(a4 + 192), 0);
        uint64_t v186 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v835 == 2)
      {
        unsigned int v836 = *((_DWORD *)v186 + 10);
      }
      else
      {
        uint64_t v837 = *((void *)v186 + 5);
        if (*(unsigned char *)v837 == 4) {
          unsigned int v836 = *(_DWORD *)(*(void *)(v837 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v836 = 0;
        }
      }
      int v838 = v188 << 14;
      int v839 = v833 << 21;
      unsigned int v840 = v836 >> 2;
      int v841 = v186[48];
      if (v841 == 1)
      {
        LOBYTE(v842) = sub_1CBC796AC(a1, (uint64_t)(v186 + 48), *(void *)(v1381 + 192), 0);
        unsigned int v840 = v836 >> 2;
        uint64_t v186 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v841 == 2)
      {
        int v842 = *((_DWORD *)v186 + 14);
      }
      else
      {
        uint64_t v843 = *((void *)v186 + 7);
        if (*(unsigned char *)v843 == 4) {
          int v842 = *(_DWORD *)(*(void *)(v843 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v842) = 0;
        }
      }
      uint64_t v844 = v833 << 22;
      uint64_t v816 = (v842 & 1) << 19;
      int v845 = v186[64];
      if (v845 == 1)
      {
        uint64_t v847 = (v842 & 1) << 19;
        char v848 = v840;
        LOBYTE(v846) = sub_1CBC796AC(a1, (uint64_t)(v186 + 64), *(void *)(v1381 + 192), 0);
        LOBYTE(v840) = v848;
        uint64_t v816 = v847;
        uint64_t v186 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v845 == 2)
      {
        int v846 = *((_DWORD *)v186 + 18);
      }
      else
      {
        uint64_t v849 = *((void *)v186 + 9);
        if (*(unsigned char *)v849 == 4) {
          int v846 = *(_DWORD *)(*(void *)(v849 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v846) = 0;
        }
      }
      unint64_t v850 = (unint64_t)v188 << 40;
      uint64_t v851 = *(void *)&v838 & 0xC00000;
      uint64_t v852 = v844 & 0x600000000;
      uint64_t v853 = v839 & 0xFF000000;
      unint64_t v854 = (unint64_t)v836 << 8;
      uint64_t v855 = v840 & 0xC0;
      uint64_t v343 = (v846 & 3) << 17;
      int v856 = v186[80];
      if (v856 == 1)
      {
        uint64_t v858 = a1;
        uint64_t v859 = v816;
        LOBYTE(v857) = sub_1CBC796AC(v858, (uint64_t)(v186 + 80), *(void *)(v1381 + 192), 0);
        uint64_t v816 = v859;
        uint64_t v186 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v856 == 2)
      {
        int v857 = *((_DWORD *)v186 + 22);
      }
      else
      {
        uint64_t v860 = *((void *)v186 + 11);
        if (*(unsigned char *)v860 == 4) {
          int v857 = *(_DWORD *)(*(void *)(v860 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v857) = 0;
        }
      }
      uint64_t v348 = v857 & 1;
      uint64_t v349 = (*((void *)v186 + 13) & 3) << 61;
      unint64_t v350 = v850 | v851 | v852 | v853;
      unint64_t v831 = v854 | v855;
LABEL_1273:
      uint64_t v351 = v831 | v816;
      goto LABEL_1274;
    case 10407:
    case 10408:
    case 11475:
    case 11476:
    case 11489:
    case 11490:
    case 11503:
    case 11504:
    case 11517:
    case 11518:
    case 11531:
    case 11532:
    case 11545:
    case 11546:
    case 11559:
    case 11560:
    case 11573:
    case 11574:
      uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v293 = *((void *)a2 + 2);
      int v296 = *(unsigned __int8 *)(v293 + 80);
      uint64_t v294 = v293 + 80;
      int v295 = v296;
      if (v296 == 1)
      {
        LOBYTE(v297) = sub_1CBC796AC(a1, v294, *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v295 == 2)
      {
        int v297 = *((_DWORD *)v99 + 22);
      }
      else
      {
        uint64_t v540 = *((void *)v99 + 11);
        if (*(unsigned char *)v540 == 4) {
          int v297 = *(_DWORD *)(*(void *)(v540 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v297) = 0;
        }
      }
      unint64_t v959 = (unint64_t)(v297 & 1) << 40;
      int v960 = v99[64];
      if (v960 == 1)
      {
        LOBYTE(v961) = sub_1CBC796AC(a1, (uint64_t)(v99 + 64), *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v960 == 2)
      {
        int v961 = *((_DWORD *)v99 + 18);
      }
      else
      {
        uint64_t v962 = *((void *)v99 + 9);
        if (*(unsigned char *)v962 == 4) {
          int v961 = *(_DWORD *)(*(void *)(v962 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v961) = 0;
        }
      }
      unint64_t v963 = v959 | ((v961 & 1) << 15);
      int v964 = v99[48];
      if (v964 == 1)
      {
        LOBYTE(v965) = sub_1CBC796AC(a1, (uint64_t)(v99 + 48), *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v964 == 2)
      {
        int v965 = *((_DWORD *)v99 + 14);
      }
      else
      {
        uint64_t v966 = *((void *)v99 + 7);
        if (*(unsigned char *)v966 == 4) {
          int v965 = *(_DWORD *)(*(void *)(v966 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v965) = 0;
        }
      }
      unint64_t v967 = v963 | ((v965 & 1) << 7);
      int v968 = *v99;
      if (v968 == 1)
      {
        unsigned int v969 = sub_1CBC796AC(a1, (uint64_t)v99, *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v968 == 2)
      {
        unsigned int v969 = *((_DWORD *)v99 + 2);
      }
      else
      {
        uint64_t v970 = *((void *)v99 + 1);
        if (*(unsigned char *)v970 == 4) {
          unsigned int v969 = *(_DWORD *)(*(void *)(v970 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v969 = 0;
        }
      }
      uint64_t v971 = (v969 << 24) & 0xFE000000 | (v969 >> 7) & 6 | v967;
      int v972 = v99[16];
      if (v972 == 1)
      {
        uint64_t v973 = a1;
        int v974 = sub_1CBC796AC(a1, (uint64_t)(v99 + 16), *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v972 == 2)
      {
        uint64_t v973 = a1;
        int v974 = *((_DWORD *)v99 + 6);
      }
      else
      {
        uint64_t v975 = *((void *)v99 + 3);
        uint64_t v973 = a1;
        if (*(unsigned char *)v975 == 4) {
          int v974 = *(_DWORD *)(*(void *)(v975 + 24) + 16) | 0x2000;
        }
        else {
          int v974 = 0;
        }
      }
      unint64_t v411 = ((unint64_t)(v974 & 0x7F) << 17) | v971;
      uint64_t v429 = (v974 << 6) & 0x6000;
      int v976 = v99[32];
      if (v976 == 1)
      {
        unsigned int v977 = sub_1CBC796AC(v973, (uint64_t)(v99 + 32), *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v976 == 2)
      {
        unsigned int v977 = *((_DWORD *)v99 + 10);
      }
      else
      {
        uint64_t v978 = *((void *)v99 + 5);
        if (*(unsigned char *)v978 == 4) {
          unsigned int v977 = *(_DWORD *)(*(void *)(v978 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v977 = 0;
        }
      }
      unsigned int v433 = v977 >> 2;
      uint64_t v434 = (unint64_t)(v977 & 0x1F) << 8;
      goto LABEL_609;
    case 10409:
    case 10410:
    case 10413:
    case 10414:
    case 10417:
    case 10418:
    case 11351:
    case 11352:
    case 11355:
    case 11356:
    case 11359:
    case 11360:
    case 11365:
    case 11366:
    case 11369:
    case 11370:
    case 11373:
    case 11374:
    case 11379:
    case 11380:
    case 11383:
    case 11384:
    case 11387:
    case 11388:
    case 11393:
    case 11394:
    case 11397:
    case 11398:
    case 11401:
    case 11402:
    case 11407:
    case 11408:
    case 11411:
    case 11412:
    case 11415:
    case 11416:
    case 11421:
    case 11422:
    case 11425:
    case 11426:
    case 11429:
    case 11430:
    case 11435:
    case 11436:
    case 11439:
    case 11440:
    case 11443:
    case 11444:
    case 11449:
    case 11450:
    case 11453:
    case 11454:
    case 11457:
    case 11458:
      uint64_t v88 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v89 = *((void *)a2 + 2);
      int v92 = *(unsigned __int8 *)(v89 + 64);
      uint64_t v90 = v89 + 64;
      int v91 = v92;
      if (v92 == 1)
      {
        LOBYTE(v93) = sub_1CBC796AC(a1, v90, *(void *)(a4 + 192), 0);
        uint64_t v88 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v91 == 2)
      {
        int v93 = *((_DWORD *)v88 + 18);
      }
      else
      {
        uint64_t v291 = *((void *)v88 + 9);
        if (*(unsigned char *)v291 == 4) {
          int v93 = *(_DWORD *)(*(void *)(v291 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v93) = 0;
        }
      }
      unint64_t v362 = (unint64_t)(v93 & 1) << 40;
      int v363 = v88[32];
      if (v363 == 1)
      {
        LOBYTE(v364) = sub_1CBC796AC(a1, (uint64_t)(v88 + 32), *(void *)(a4 + 192), 0);
        uint64_t v88 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v363 == 2)
      {
        int v364 = *((_DWORD *)v88 + 10);
      }
      else
      {
        uint64_t v365 = *((void *)v88 + 5);
        if (*(unsigned char *)v365 == 4) {
          int v364 = *(_DWORD *)(*(void *)(v365 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v364) = 0;
        }
      }
      unint64_t v366 = v362 | ((v364 & 1) << 7);
      int v367 = *v88;
      if (v367 == 1)
      {
        unsigned int v368 = sub_1CBC796AC(a1, (uint64_t)v88, *(void *)(a4 + 192), 0);
        uint64_t v88 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v367 == 2)
      {
        unsigned int v368 = *((_DWORD *)v88 + 2);
      }
      else
      {
        uint64_t v369 = *((void *)v88 + 1);
        if (*(unsigned char *)v369 == 4) {
          unsigned int v368 = *(_DWORD *)(*(void *)(v369 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v368 = 0;
        }
      }
      uint64_t v370 = (v368 << 24) & 0xFE000000 | (v368 >> 7) & 6 | v366;
      int v371 = v88[16];
      if (v371 == 1)
      {
        uint64_t v372 = a1;
        LOWORD(v373) = sub_1CBC796AC(a1, (uint64_t)(v88 + 16), *(void *)(a4 + 192), 0);
        uint64_t v88 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v371 == 2)
      {
        uint64_t v372 = a1;
        int v373 = *((_DWORD *)v88 + 6);
      }
      else
      {
        uint64_t v374 = *((void *)v88 + 3);
        uint64_t v372 = a1;
        if (*(unsigned char *)v374 == 4) {
          int v373 = *(_DWORD *)(*(void *)(v374 + 24) + 16) | 0x2000;
        }
        else {
          LOWORD(v373) = 0;
        }
      }
      unint64_t v375 = (unint64_t)(v373 & 0x7F) << 17;
      __int16 v376 = (_WORD)v373 << 6;
      goto LABEL_526;
    case 10411:
    case 10412:
    case 10415:
    case 10416:
    case 10419:
    case 10420:
    case 11353:
    case 11354:
    case 11357:
    case 11358:
    case 11361:
    case 11362:
    case 11367:
    case 11368:
    case 11371:
    case 11372:
    case 11375:
    case 11376:
    case 11381:
    case 11382:
    case 11385:
    case 11386:
    case 11389:
    case 11390:
    case 11395:
    case 11396:
    case 11399:
    case 11400:
    case 11403:
    case 11404:
    case 11409:
    case 11410:
    case 11413:
    case 11414:
    case 11417:
    case 11418:
    case 11423:
    case 11424:
    case 11427:
    case 11428:
    case 11431:
    case 11432:
    case 11437:
    case 11438:
    case 11441:
    case 11442:
    case 11445:
    case 11446:
    case 11451:
    case 11452:
    case 11455:
    case 11456:
    case 11459:
    case 11460:
      uint64_t v88 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v94 = *((void *)a2 + 2);
      int v97 = *(unsigned __int8 *)(v94 + 64);
      uint64_t v95 = v94 + 64;
      int v96 = v97;
      if (v97 == 1)
      {
        LOBYTE(v98) = sub_1CBC796AC(a1, v95, *(void *)(a4 + 192), 0);
        uint64_t v88 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v96 == 2)
      {
        int v98 = *((_DWORD *)v88 + 18);
      }
      else
      {
        uint64_t v292 = *((void *)v88 + 9);
        if (*(unsigned char *)v292 == 4) {
          int v98 = *(_DWORD *)(*(void *)(v292 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v98) = 0;
        }
      }
      unint64_t v377 = (unint64_t)(v98 & 1) << 40;
      int v378 = v88[32];
      if (v378 == 1)
      {
        LOBYTE(v379) = sub_1CBC796AC(a1, (uint64_t)(v88 + 32), *(void *)(a4 + 192), 0);
        uint64_t v88 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v378 == 2)
      {
        int v379 = *((_DWORD *)v88 + 10);
      }
      else
      {
        uint64_t v380 = *((void *)v88 + 5);
        if (*(unsigned char *)v380 == 4) {
          int v379 = *(_DWORD *)(*(void *)(v380 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v379) = 0;
        }
      }
      unint64_t v381 = v377 | ((v379 & 1) << 7);
      int v382 = *v88;
      if (v382 == 1)
      {
        unsigned int v383 = sub_1CBC796AC(a1, (uint64_t)v88, *(void *)(a4 + 192), 0);
        uint64_t v88 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v382 == 2)
      {
        unsigned int v383 = *((_DWORD *)v88 + 2);
      }
      else
      {
        uint64_t v384 = *((void *)v88 + 1);
        if (*(unsigned char *)v384 == 4) {
          unsigned int v383 = *(_DWORD *)(*(void *)(v384 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v383 = 0;
        }
      }
      uint64_t v370 = (v383 << 24) & 0xFE000000 | (v383 >> 7) & 6 | v381;
      int v385 = v88[16];
      if (v385 == 1)
      {
        uint64_t v372 = a1;
        int v386 = sub_1CBC796AC(a1, (uint64_t)(v88 + 16), *(void *)(a4 + 192), 0);
        uint64_t v88 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v385 == 2)
      {
        uint64_t v372 = a1;
        int v386 = *((_DWORD *)v88 + 6);
      }
      else
      {
        uint64_t v387 = *((void *)v88 + 3);
        uint64_t v372 = a1;
        if (*(unsigned char *)v387 == 4) {
          int v386 = *(_DWORD *)(*(void *)(v387 + 24) + 16) | 0x2000;
        }
        else {
          int v386 = 0;
        }
      }
      unint64_t v375 = (v386 << 15) & 0xFE0000;
      __int16 v376 = 16 * v386;
LABEL_526:
      unint64_t v127 = v375 | v376 & 0x6000 | v370;
      int v388 = v88[48];
      uint64_t v129 = (*((void *)v88 + 11) & 3) << 45;
      if (v388 == 1)
      {
        LOBYTE(v389) = sub_1CBC796AC(v372, (uint64_t)(v88 + 48), *(void *)(a4 + 192), 0);
      }
      else if (v388 == 2)
      {
        int v389 = *((_DWORD *)v88 + 14);
      }
      else
      {
        uint64_t v390 = *((void *)v88 + 7);
        if (*(unsigned char *)v390 == 4) {
          int v389 = *(_DWORD *)(*(void *)(v390 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v389) = 0;
        }
      }
      uint64_t v132 = (v389 & 1) << 15;
      goto LABEL_534;
    case 10421:
    case 10422:
    case 11363:
    case 11364:
    case 11377:
    case 11378:
    case 11391:
    case 11392:
    case 11405:
    case 11406:
    case 11419:
    case 11420:
    case 11433:
    case 11434:
    case 11447:
    case 11448:
    case 11461:
    case 11462:
      unsigned int v285 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v286 = *((void *)a2 + 2);
      int v289 = *(unsigned __int8 *)(v286 + 64);
      uint64_t v287 = v286 + 64;
      int v288 = v289;
      if (v289 == 1)
      {
        LOBYTE(v290) = sub_1CBC796AC(a1, v287, *(void *)(a4 + 192), 0);
        unsigned int v285 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v288 == 2)
      {
        int v290 = *((_DWORD *)v285 + 18);
      }
      else
      {
        uint64_t v531 = *((void *)v285 + 9);
        if (*(unsigned char *)v531 == 4) {
          int v290 = *(_DWORD *)(*(void *)(v531 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v290) = 0;
        }
      }
      unint64_t v943 = (unint64_t)(v290 & 1) << 40;
      int v944 = v285[48];
      if (v944 == 1)
      {
        LOBYTE(v945) = sub_1CBC796AC(a1, (uint64_t)(v285 + 48), *(void *)(a4 + 192), 0);
        unsigned int v285 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v944 == 2)
      {
        int v945 = *((_DWORD *)v285 + 14);
      }
      else
      {
        uint64_t v946 = *((void *)v285 + 7);
        if (*(unsigned char *)v946 == 4) {
          int v945 = *(_DWORD *)(*(void *)(v946 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v945) = 0;
        }
      }
      unint64_t v947 = v943 | ((v945 & 1) << 15);
      int v948 = v285[32];
      if (v948 == 1)
      {
        LOBYTE(v949) = sub_1CBC796AC(a1, (uint64_t)(v285 + 32), *(void *)(a4 + 192), 0);
        unsigned int v285 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v948 == 2)
      {
        int v949 = *((_DWORD *)v285 + 10);
      }
      else
      {
        uint64_t v950 = *((void *)v285 + 5);
        if (*(unsigned char *)v950 == 4) {
          int v949 = *(_DWORD *)(*(void *)(v950 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v949) = 0;
        }
      }
      unint64_t v951 = v947 | ((v949 & 1) << 7);
      int v952 = *v285;
      if (v952 == 1)
      {
        unsigned int v953 = sub_1CBC796AC(a1, (uint64_t)v285, *(void *)(a4 + 192), 0);
        unsigned int v285 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v952 == 2)
      {
        unsigned int v953 = *((_DWORD *)v285 + 2);
      }
      else
      {
        uint64_t v954 = *((void *)v285 + 1);
        if (*(unsigned char *)v954 == 4) {
          unsigned int v953 = *(_DWORD *)(*(void *)(v954 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v953 = 0;
        }
      }
      uint64_t v955 = (v953 << 24) & 0xFE000000 | (v953 >> 7) & 6 | v951;
      int v956 = v285[16];
      if (v956 == 1)
      {
        int v957 = sub_1CBC796AC(a1, (uint64_t)(v285 + 16), *(void *)(a4 + 192), 0);
        unsigned int v285 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v956 == 2)
      {
        int v957 = *((_DWORD *)v285 + 6);
      }
      else
      {
        uint64_t v958 = *((void *)v285 + 3);
        if (*(unsigned char *)v958 == 4) {
          int v957 = *(_DWORD *)(*(void *)(v958 + 24) + 16) | 0x2000;
        }
        else {
          int v957 = 0;
        }
      }
      v8 |= (v957 << 6) & 0x6000 | ((*((void *)v285 + 11) & 3) << 45) | ((unint64_t)(v957 & 0x7F) << 17) | v955;
      return v8;
    case 10423:
    case 10425:
    case 10427:
    case 10428:
    case 10429:
    case 10431:
    case 10433:
    case 10435:
    case 10437:
    case 10439:
    case 10441:
    case 10442:
    case 10443:
    case 10445:
    case 10447:
    case 10449:
    case 10451:
    case 10453:
    case 10455:
    case 10456:
    case 10457:
    case 10459:
    case 10461:
    case 10463:
    case 10465:
    case 10467:
    case 10469:
    case 10470:
    case 10471:
    case 10473:
    case 10475:
    case 10477:
    case 10479:
    case 10481:
    case 10483:
    case 10484:
    case 10485:
    case 10487:
    case 10489:
    case 10491:
    case 10493:
    case 10495:
    case 10497:
    case 10498:
    case 10499:
    case 10501:
    case 10503:
    case 10505:
    case 10507:
    case 10509:
    case 10511:
    case 10512:
    case 10513:
    case 10515:
    case 10517:
    case 10519:
    case 10521:
    case 10523:
    case 10525:
    case 10526:
    case 10527:
    case 10529:
    case 10531:
    case 10533:
    case 10535:
    case 10537:
    case 10539:
    case 10540:
    case 10541:
    case 10543:
    case 10545:
    case 10547:
    case 10549:
    case 10551:
    case 10553:
    case 10554:
    case 10555:
    case 10557:
    case 10559:
    case 10561:
    case 10563:
    case 10565:
    case 10567:
    case 10568:
    case 10569:
    case 10571:
    case 10573:
    case 10575:
    case 10577:
    case 10579:
    case 10581:
    case 10582:
    case 10583:
    case 10585:
    case 10587:
    case 10589:
    case 10591:
    case 10593:
    case 10595:
    case 10596:
    case 10597:
    case 10599:
    case 10601:
    case 10603:
    case 10605:
    case 10607:
    case 10609:
    case 10610:
    case 10611:
    case 10613:
    case 10615:
    case 10617:
    case 10619:
    case 10621:
    case 10623:
    case 10624:
    case 10625:
    case 10627:
    case 10629:
    case 10631:
    case 10633:
    case 10635:
    case 10637:
    case 10638:
    case 10639:
    case 10641:
    case 10643:
    case 10645:
    case 10647:
    case 10649:
    case 10651:
    case 10652:
    case 10653:
    case 10655:
    case 10657:
    case 10659:
    case 10661:
    case 10663:
    case 10665:
    case 10666:
    case 10667:
    case 10669:
    case 10671:
    case 10673:
    case 10675:
    case 10677:
    case 10679:
    case 10680:
    case 10681:
    case 10683:
    case 10685:
    case 10687:
    case 10689:
    case 10691:
    case 10693:
    case 10694:
    case 10695:
    case 10697:
    case 10699:
    case 10701:
    case 10703:
    case 10705:
    case 10707:
    case 10708:
    case 10709:
    case 10711:
    case 10713:
    case 10715:
    case 10717:
    case 10719:
    case 10721:
    case 10722:
    case 10723:
    case 10725:
    case 10727:
    case 10729:
    case 10731:
    case 10733:
    case 10735:
    case 10736:
    case 10737:
    case 10739:
    case 10741:
    case 10743:
    case 10745:
    case 10747:
    case 10749:
    case 10750:
    case 10751:
    case 10753:
    case 10755:
    case 10757:
    case 10759:
    case 10761:
    case 10763:
    case 10764:
    case 10765:
    case 10767:
    case 10769:
    case 10771:
    case 10773:
    case 10775:
    case 10777:
    case 10778:
    case 10779:
    case 10781:
    case 10783:
    case 10785:
    case 10787:
    case 10789:
    case 10791:
    case 10792:
    case 10793:
    case 10795:
    case 10797:
    case 10799:
    case 10801:
    case 10803:
    case 10805:
    case 10806:
    case 10807:
    case 10809:
    case 10811:
    case 10813:
    case 10815:
    case 10817:
    case 10819:
    case 10820:
    case 10821:
    case 10823:
    case 10825:
    case 10827:
    case 10829:
    case 10831:
    case 10833:
    case 10834:
    case 10835:
    case 10837:
    case 10839:
    case 10841:
    case 10843:
    case 10845:
    case 10847:
    case 10848:
    case 10849:
    case 10851:
    case 10853:
    case 10855:
    case 10857:
    case 10859:
    case 10861:
    case 10862:
    case 10863:
    case 10865:
    case 10867:
    case 10869:
    case 10871:
    case 10873:
    case 10875:
    case 10876:
    case 10877:
    case 10879:
    case 10881:
    case 10883:
    case 10887:
    case 10889:
    case 10891:
    case 10892:
    case 10893:
    case 10895:
    case 10897:
    case 10899:
    case 10901:
    case 10903:
    case 10905:
    case 10906:
    case 10907:
    case 10909:
    case 10911:
    case 10913:
    case 10917:
    case 10919:
    case 10921:
    case 10922:
    case 10923:
    case 10925:
    case 10927:
    case 10929:
    case 10931:
    case 10933:
    case 10935:
    case 10936:
    case 10937:
    case 10939:
    case 10941:
    case 10943:
    case 10947:
    case 10949:
    case 10951:
    case 10952:
    case 10953:
    case 10955:
    case 10957:
    case 10959:
    case 10961:
    case 10963:
    case 10965:
    case 10966:
    case 10967:
    case 10969:
    case 10971:
    case 10973:
    case 10977:
    case 10979:
    case 10981:
    case 10982:
    case 10983:
    case 10985:
    case 10987:
    case 10989:
    case 10991:
    case 10993:
    case 10995:
    case 10996:
    case 10997:
    case 10999:
    case 11001:
    case 11003:
    case 11007:
    case 11009:
    case 11011:
    case 11012:
    case 11013:
    case 11015:
    case 11017:
    case 11019:
    case 11021:
    case 11023:
    case 11025:
    case 11026:
    case 11027:
    case 11029:
    case 11031:
    case 11033:
    case 11037:
    case 11039:
    case 11041:
    case 11042:
    case 11043:
    case 11045:
    case 11047:
    case 11049:
    case 11051:
    case 11053:
    case 11055:
    case 11056:
    case 11057:
    case 11059:
    case 11061:
    case 11063:
    case 11067:
    case 11069:
    case 11071:
    case 11072:
    case 11073:
    case 11075:
    case 11077:
    case 11079:
    case 11081:
    case 11083:
    case 11085:
    case 11086:
    case 11087:
    case 11089:
    case 11091:
    case 11093:
    case 11097:
    case 11099:
    case 11101:
    case 11102:
    case 11103:
    case 11105:
    case 11107:
    case 11109:
    case 11111:
    case 11113:
    case 11115:
    case 11116:
    case 11117:
    case 11119:
    case 11121:
    case 11123:
    case 11127:
    case 11129:
    case 11131:
    case 11132:
    case 11133:
    case 11135:
    case 11137:
    case 11139:
    case 11141:
    case 11143:
    case 11145:
    case 11146:
    case 11147:
    case 11149:
    case 11151:
    case 11153:
    case 11157:
    case 11159:
    case 11161:
    case 11162:
    case 11163:
    case 11165:
    case 11167:
    case 11169:
    case 11171:
    case 11173:
    case 11175:
    case 11176:
    case 11177:
    case 11179:
    case 11181:
    case 11183:
    case 11187:
    case 11189:
    case 11191:
    case 11192:
    case 11193:
    case 11195:
    case 11197:
    case 11199:
    case 11201:
    case 11203:
    case 11205:
    case 11206:
    case 11207:
    case 11209:
    case 11211:
    case 11213:
    case 11217:
    case 11219:
    case 11221:
    case 11222:
    case 11223:
    case 11225:
    case 11227:
    case 11229:
    case 11231:
    case 11233:
    case 11235:
    case 11236:
    case 11237:
    case 11239:
    case 11241:
    case 11243:
    case 11247:
    case 11249:
    case 11251:
    case 11252:
    case 11253:
    case 11255:
    case 11257:
    case 11259:
    case 11261:
    case 11263:
    case 11265:
    case 11266:
    case 11267:
    case 11269:
    case 11271:
    case 11273:
    case 11277:
    case 11279:
    case 11281:
    case 11282:
    case 11283:
    case 11285:
    case 11287:
    case 11289:
    case 11291:
    case 11293:
    case 11295:
    case 11296:
    case 11297:
    case 11299:
    case 11301:
    case 11303:
    case 11307:
    case 11309:
    case 11311:
    case 11312:
    case 11313:
    case 11315:
    case 11317:
    case 11319:
    case 11321:
    case 11323:
    case 11325:
    case 11326:
    case 11327:
    case 11329:
    case 11331:
    case 11333:
    case 11337:
    case 11339:
    case 11341:
    case 11342:
    case 11343:
    case 11345:
    case 11347:
    case 11349:
      uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v11 = *((void *)a2 + 2);
      int v14 = *(unsigned __int8 *)(v11 + 32);
      uint64_t v12 = v11 + 32;
      int v13 = v14;
      if (v14 == 1)
      {
        LOBYTE(v15) = sub_1CBC796AC(a1, v12, *(void *)(a4 + 192), 0);
        uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v13 == 2)
      {
        int v15 = *((_DWORD *)v10 + 10);
      }
      else
      {
        uint64_t v35 = *((void *)v10 + 5);
        if (*(unsigned char *)v35 == 4) {
          int v15 = *(_DWORD *)(*(void *)(v35 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v15) = 0;
        }
      }
      unint64_t v60 = (unint64_t)(v15 & 1) << 56;
      int v61 = *v10;
      if (v61 == 1)
      {
        uint64_t v62 = sub_1CBC796AC(a1, (uint64_t)v10, *(void *)(a4 + 192), 0);
        uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v61 == 2)
      {
        uint64_t v62 = *((unsigned int *)v10 + 2);
      }
      else
      {
        uint64_t v63 = *((void *)v10 + 1);
        if (*(unsigned char *)v63 == 4) {
          uint64_t v62 = *(_DWORD *)(*(void *)(v63 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v62 = 0;
        }
      }
      uint64_t v64 = (v62 << 41) & 0x6000000000000 | (v62 << 40) & 0xFE0000000000 | v60;
      int v65 = v10[16];
      if (v65 == 1)
      {
        uint64_t v66 = sub_1CBC796AC(a1, (uint64_t)(v10 + 16), *(void *)(a4 + 192), 0);
        uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v65 == 2)
      {
        uint64_t v66 = *((unsigned int *)v10 + 6);
      }
      else
      {
        uint64_t v67 = *((void *)v10 + 3);
        if (*(unsigned char *)v67 == 4) {
          uint64_t v66 = *(_DWORD *)(*(void *)(v67 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v66 = 0;
        }
      }
      unint64_t v68 = (v66 << 25) & 0x1E00000000 | v64 | (v66 << 24);
      goto LABEL_74;
    case 10424:
    case 10426:
    case 10430:
    case 10432:
    case 10434:
    case 10436:
    case 10438:
    case 10440:
    case 10444:
    case 10446:
    case 10448:
    case 10450:
    case 10452:
    case 10454:
    case 10458:
    case 10460:
    case 10462:
    case 10464:
    case 10466:
    case 10468:
    case 10472:
    case 10474:
    case 10476:
    case 10478:
    case 10480:
    case 10482:
    case 10486:
    case 10488:
    case 10490:
    case 10492:
    case 10494:
    case 10496:
    case 10500:
    case 10502:
    case 10504:
    case 10506:
    case 10508:
    case 10510:
    case 10514:
    case 10516:
    case 10518:
    case 10520:
    case 10522:
    case 10524:
    case 10528:
    case 10530:
    case 10532:
    case 10534:
    case 10536:
    case 10538:
    case 10542:
    case 10544:
    case 10546:
    case 10548:
    case 10550:
    case 10552:
    case 10556:
    case 10558:
    case 10560:
    case 10562:
    case 10564:
    case 10566:
    case 10570:
    case 10572:
    case 10574:
    case 10576:
    case 10578:
    case 10580:
    case 10584:
    case 10586:
    case 10588:
    case 10590:
    case 10592:
    case 10594:
    case 10598:
    case 10600:
    case 10602:
    case 10604:
    case 10606:
    case 10608:
    case 10612:
    case 10614:
    case 10616:
    case 10618:
    case 10620:
    case 10622:
    case 10626:
    case 10628:
    case 10630:
    case 10632:
    case 10634:
    case 10636:
    case 10640:
    case 10642:
    case 10644:
    case 10646:
    case 10648:
    case 10650:
    case 10654:
    case 10656:
    case 10658:
    case 10660:
    case 10662:
    case 10664:
    case 10668:
    case 10670:
    case 10672:
    case 10674:
    case 10676:
    case 10678:
    case 10682:
    case 10684:
    case 10686:
    case 10688:
    case 10690:
    case 10692:
    case 10696:
    case 10698:
    case 10700:
    case 10702:
    case 10704:
    case 10706:
    case 10710:
    case 10712:
    case 10714:
    case 10716:
    case 10718:
    case 10720:
    case 10724:
    case 10726:
    case 10728:
    case 10730:
    case 10732:
    case 10734:
    case 10738:
    case 10740:
    case 10742:
    case 10744:
    case 10746:
    case 10748:
    case 10752:
    case 10754:
    case 10756:
    case 10758:
    case 10760:
    case 10762:
    case 10766:
    case 10768:
    case 10770:
    case 10772:
    case 10774:
    case 10776:
    case 10780:
    case 10782:
    case 10784:
    case 10786:
    case 10788:
    case 10790:
    case 10794:
    case 10796:
    case 10798:
    case 10800:
    case 10802:
    case 10804:
    case 10808:
    case 10810:
    case 10812:
    case 10814:
    case 10816:
    case 10818:
    case 10822:
    case 10824:
    case 10826:
    case 10828:
    case 10830:
    case 10832:
    case 10836:
    case 10838:
    case 10840:
    case 10842:
    case 10844:
    case 10846:
    case 10850:
    case 10852:
    case 10854:
    case 10856:
    case 10858:
    case 10860:
    case 10864:
    case 10866:
    case 10868:
    case 10870:
    case 10872:
    case 10874:
    case 10878:
    case 10880:
    case 10882:
    case 10884:
    case 10888:
    case 10890:
    case 10894:
    case 10896:
    case 10898:
    case 10900:
    case 10902:
    case 10904:
    case 10908:
    case 10910:
    case 10912:
    case 10914:
    case 10918:
    case 10920:
    case 10924:
    case 10926:
    case 10928:
    case 10930:
    case 10932:
    case 10934:
    case 10938:
    case 10940:
    case 10942:
    case 10944:
    case 10948:
    case 10950:
    case 10954:
    case 10956:
    case 10958:
    case 10960:
    case 10962:
    case 10964:
    case 10968:
    case 10970:
    case 10972:
    case 10974:
    case 10978:
    case 10980:
    case 10984:
    case 10986:
    case 10988:
    case 10990:
    case 10992:
    case 10994:
    case 10998:
    case 11000:
    case 11002:
    case 11004:
    case 11008:
    case 11010:
    case 11014:
    case 11016:
    case 11018:
    case 11020:
    case 11022:
    case 11024:
    case 11028:
    case 11030:
    case 11032:
    case 11034:
    case 11038:
    case 11040:
    case 11044:
    case 11046:
    case 11048:
    case 11050:
    case 11052:
    case 11054:
    case 11058:
    case 11060:
    case 11062:
    case 11064:
    case 11068:
    case 11070:
    case 11074:
    case 11076:
    case 11078:
    case 11080:
    case 11082:
    case 11084:
    case 11088:
    case 11090:
    case 11092:
    case 11094:
    case 11098:
    case 11100:
    case 11104:
    case 11106:
    case 11108:
    case 11110:
    case 11112:
    case 11114:
    case 11118:
    case 11120:
    case 11122:
    case 11124:
    case 11128:
    case 11130:
    case 11134:
    case 11136:
    case 11138:
    case 11140:
    case 11142:
    case 11144:
    case 11148:
    case 11150:
    case 11152:
    case 11154:
    case 11158:
    case 11160:
    case 11164:
    case 11166:
    case 11168:
    case 11170:
    case 11172:
    case 11174:
    case 11178:
    case 11180:
    case 11182:
    case 11184:
    case 11188:
    case 11190:
    case 11194:
    case 11196:
    case 11198:
    case 11200:
    case 11202:
    case 11204:
    case 11208:
    case 11210:
    case 11212:
    case 11214:
    case 11218:
    case 11220:
    case 11224:
    case 11226:
    case 11228:
    case 11230:
    case 11232:
    case 11234:
    case 11238:
    case 11240:
    case 11242:
    case 11244:
    case 11248:
    case 11250:
    case 11254:
    case 11256:
    case 11258:
    case 11260:
    case 11262:
    case 11264:
    case 11268:
    case 11270:
    case 11272:
    case 11274:
    case 11278:
    case 11280:
    case 11284:
    case 11286:
    case 11288:
    case 11290:
    case 11292:
    case 11294:
    case 11298:
    case 11300:
    case 11302:
    case 11304:
    case 11308:
    case 11310:
    case 11314:
    case 11316:
    case 11318:
    case 11320:
    case 11322:
    case 11324:
    case 11328:
    case 11330:
    case 11332:
    case 11334:
    case 11338:
    case 11340:
    case 11344:
    case 11346:
    case 11348:
    case 11350:
      unsigned int v17 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v18 = *((void *)a2 + 2);
      int v21 = *(unsigned __int8 *)(v18 + 48);
      uint64_t v19 = v18 + 48;
      int v20 = v21;
      if (v21 == 1)
      {
        LOBYTE(v22) = sub_1CBC796AC(a1, v19, *(void *)(a4 + 192), 0);
        unsigned int v17 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v20 == 2)
      {
        int v22 = *((_DWORD *)v17 + 14);
      }
      else
      {
        uint64_t v45 = *((void *)v17 + 7);
        if (*(unsigned char *)v45 == 4) {
          int v22 = *(_DWORD *)(*(void *)(v45 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v22) = 0;
        }
      }
      unint64_t v75 = (unint64_t)(v22 & 1) << 56;
      int v76 = *v17;
      if (v76 == 1)
      {
        uint64_t v77 = sub_1CBC796AC(a1, (uint64_t)v17, *(void *)(a4 + 192), 0);
        unsigned int v17 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v76 == 2)
      {
        uint64_t v77 = *((unsigned int *)v17 + 2);
      }
      else
      {
        uint64_t v78 = *((void *)v17 + 1);
        if (*(unsigned char *)v78 == 4) {
          uint64_t v77 = *(_DWORD *)(*(void *)(v78 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v77 = 0;
        }
      }
      uint64_t v79 = (v77 << 41) & 0x6000000000000 | (v77 << 40) & 0xFE0000000000 | v75;
      int v80 = v17[16];
      if (v80 == 1)
      {
        uint64_t v81 = sub_1CBC796AC(a1, (uint64_t)(v17 + 16), *(void *)(a4 + 192), 0);
        unsigned int v17 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v80 == 2)
      {
        uint64_t v81 = *((unsigned int *)v17 + 6);
      }
      else
      {
        uint64_t v82 = *((void *)v17 + 3);
        if (*(unsigned char *)v82 == 4) {
          uint64_t v81 = *(_DWORD *)(*(void *)(v82 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v81 = 0;
        }
      }
      uint64_t v83 = (v81 << 25) & 0x1E00000000 | v79 | (v81 << 24);
      int v84 = v17[32];
      if (v84 == 1)
      {
        uint64_t v85 = sub_1CBC796AC(a1, (uint64_t)(v17 + 32), *(void *)(a4 + 192), 0);
        unsigned int v17 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v84 == 2)
      {
        uint64_t v85 = *((unsigned int *)v17 + 10);
      }
      else
      {
        uint64_t v86 = *((void *)v17 + 5);
        if (*(unsigned char *)v86 == 4) {
          uint64_t v85 = *(_DWORD *)(*(void *)(v86 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v85 = 0;
        }
      }
      unint64_t v68 = (v85 << 51) & 0xE0000000000000 | (v85 << 12) & 0xFE0000 | v83;
      uint64_t v69 = *((void *)v17 + 9);
      goto LABEL_109;
    case 10885:
    case 10886:
    case 10915:
    case 10916:
    case 10945:
    case 10946:
    case 10975:
    case 10976:
    case 11005:
    case 11006:
    case 11035:
    case 11036:
    case 11065:
    case 11066:
    case 11095:
    case 11096:
    case 11125:
    case 11126:
    case 11155:
    case 11156:
    case 11185:
    case 11186:
    case 11215:
    case 11216:
    case 11245:
    case 11246:
    case 11275:
    case 11276:
    case 11305:
    case 11306:
    case 11335:
    case 11336:
      uint64_t v160 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v161 = *((void *)a2 + 2);
      int v164 = *(unsigned __int8 *)(v161 + 16);
      uint64_t v162 = v161 + 16;
      int v163 = v164;
      if (v164 == 1)
      {
        LOBYTE(v165) = sub_1CBC796AC(a1, v162, *(void *)(a4 + 192), 0);
        uint64_t v160 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v163 == 2)
      {
        int v165 = *((_DWORD *)v160 + 6);
      }
      else
      {
        uint64_t v359 = *((void *)v160 + 3);
        if (*(unsigned char *)v359 == 4) {
          int v165 = *(_DWORD *)(*(void *)(v359 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v165) = 0;
        }
      }
      unint64_t v670 = (unint64_t)(v165 & 1) << 56;
      int v671 = *v160;
      if (v671 == 1)
      {
        uint64_t v672 = sub_1CBC796AC(a1, (uint64_t)v160, *(void *)(a4 + 192), 0);
        uint64_t v160 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v671 == 2)
      {
        uint64_t v672 = *((unsigned int *)v160 + 2);
      }
      else
      {
        uint64_t v673 = *((void *)v160 + 1);
        if (*(unsigned char *)v673 == 4) {
          uint64_t v672 = *(_DWORD *)(*(void *)(v673 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v672 = 0;
        }
      }
      unint64_t v68 = (v672 << 41) & 0x6000000000000 | (v672 << 40) & 0xFE0000000000 | v670;
      uint64_t v69 = *((void *)v160 + 5);
      goto LABEL_109;
    case 11463:
    case 11464:
    case 11467:
    case 11468:
    case 11471:
    case 11472:
    case 11477:
    case 11478:
    case 11481:
    case 11482:
    case 11485:
    case 11486:
    case 11491:
    case 11492:
    case 11495:
    case 11496:
    case 11499:
    case 11500:
    case 11505:
    case 11506:
    case 11509:
    case 11510:
    case 11513:
    case 11514:
    case 11519:
    case 11520:
    case 11523:
    case 11524:
    case 11527:
    case 11528:
    case 11533:
    case 11534:
    case 11537:
    case 11538:
    case 11541:
    case 11542:
    case 11547:
    case 11548:
    case 11551:
    case 11552:
    case 11555:
    case 11556:
    case 11561:
    case 11562:
    case 11565:
    case 11566:
    case 11569:
    case 11570:
      uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v100 = *((void *)a2 + 2);
      int v103 = *(unsigned __int8 *)(v100 + 80);
      uint64_t v101 = v100 + 80;
      int v102 = v103;
      if (v103 == 1)
      {
        LOBYTE(v104) = sub_1CBC796AC(a1, v101, *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v102 == 2)
      {
        int v104 = *((_DWORD *)v99 + 22);
      }
      else
      {
        uint64_t v307 = *((void *)v99 + 11);
        if (*(unsigned char *)v307 == 4) {
          int v104 = *(_DWORD *)(*(void *)(v307 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v104) = 0;
        }
      }
      unint64_t v394 = (unint64_t)(v104 & 1) << 40;
      int v395 = v99[64];
      if (v395 == 1)
      {
        LOBYTE(v396) = sub_1CBC796AC(a1, (uint64_t)(v99 + 64), *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v395 == 2)
      {
        int v396 = *((_DWORD *)v99 + 18);
      }
      else
      {
        uint64_t v397 = *((void *)v99 + 9);
        if (*(unsigned char *)v397 == 4) {
          int v396 = *(_DWORD *)(*(void *)(v397 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v396) = 0;
        }
      }
      unint64_t v398 = v394 | ((v396 & 1) << 15);
      int v399 = v99[48];
      if (v399 == 1)
      {
        LOBYTE(v400) = sub_1CBC796AC(a1, (uint64_t)(v99 + 48), *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v399 == 2)
      {
        int v400 = *((_DWORD *)v99 + 14);
      }
      else
      {
        uint64_t v401 = *((void *)v99 + 7);
        if (*(unsigned char *)v401 == 4) {
          int v400 = *(_DWORD *)(*(void *)(v401 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v400) = 0;
        }
      }
      unint64_t v402 = v398 | ((v400 & 1) << 7);
      int v403 = *v99;
      if (v403 == 1)
      {
        unsigned int v404 = sub_1CBC796AC(a1, (uint64_t)v99, *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v403 == 2)
      {
        unsigned int v404 = *((_DWORD *)v99 + 2);
      }
      else
      {
        uint64_t v405 = *((void *)v99 + 1);
        if (*(unsigned char *)v405 == 4) {
          unsigned int v404 = *(_DWORD *)(*(void *)(v405 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v404 = 0;
        }
      }
      uint64_t v406 = (v404 << 24) & 0xFE000000 | (v404 >> 7) & 6 | v402;
      int v407 = v99[16];
      if (v407 == 1)
      {
        uint64_t v408 = a1;
        LOWORD(v409) = sub_1CBC796AC(a1, (uint64_t)(v99 + 16), *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v407 == 2)
      {
        uint64_t v408 = a1;
        int v409 = *((_DWORD *)v99 + 6);
      }
      else
      {
        uint64_t v410 = *((void *)v99 + 3);
        uint64_t v408 = a1;
        if (*(unsigned char *)v410 == 4) {
          int v409 = *(_DWORD *)(*(void *)(v410 + 24) + 16) | 0x2000;
        }
        else {
          LOWORD(v409) = 0;
        }
      }
      unint64_t v411 = ((unint64_t)(v409 & 0x7F) << 17) | v406;
      __int16 v412 = (_WORD)v409 << 6;
      goto LABEL_601;
    case 11465:
    case 11466:
    case 11469:
    case 11470:
    case 11473:
    case 11474:
    case 11479:
    case 11480:
    case 11483:
    case 11484:
    case 11487:
    case 11488:
    case 11493:
    case 11494:
    case 11497:
    case 11498:
    case 11501:
    case 11502:
    case 11507:
    case 11508:
    case 11511:
    case 11512:
    case 11515:
    case 11516:
    case 11521:
    case 11522:
    case 11525:
    case 11526:
    case 11529:
    case 11530:
    case 11535:
    case 11536:
    case 11539:
    case 11540:
    case 11543:
    case 11544:
    case 11549:
    case 11550:
    case 11553:
    case 11554:
    case 11557:
    case 11558:
    case 11563:
    case 11564:
    case 11567:
    case 11568:
    case 11571:
    case 11572:
      uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v105 = *((void *)a2 + 2);
      int v108 = *(unsigned __int8 *)(v105 + 80);
      uint64_t v106 = v105 + 80;
      int v107 = v108;
      if (v108 == 1)
      {
        LOBYTE(v109) = sub_1CBC796AC(a1, v106, *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v107 == 2)
      {
        int v109 = *((_DWORD *)v99 + 22);
      }
      else
      {
        uint64_t v308 = *((void *)v99 + 11);
        if (*(unsigned char *)v308 == 4) {
          int v109 = *(_DWORD *)(*(void *)(v308 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v109) = 0;
        }
      }
      unint64_t v413 = (unint64_t)(v109 & 1) << 40;
      int v414 = v99[64];
      if (v414 == 1)
      {
        LOBYTE(v415) = sub_1CBC796AC(a1, (uint64_t)(v99 + 64), *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v414 == 2)
      {
        int v415 = *((_DWORD *)v99 + 18);
      }
      else
      {
        uint64_t v416 = *((void *)v99 + 9);
        if (*(unsigned char *)v416 == 4) {
          int v415 = *(_DWORD *)(*(void *)(v416 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v415) = 0;
        }
      }
      unint64_t v417 = v413 | ((v415 & 1) << 15);
      int v418 = v99[48];
      if (v418 == 1)
      {
        LOBYTE(v419) = sub_1CBC796AC(a1, (uint64_t)(v99 + 48), *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v418 == 2)
      {
        int v419 = *((_DWORD *)v99 + 14);
      }
      else
      {
        uint64_t v420 = *((void *)v99 + 7);
        if (*(unsigned char *)v420 == 4) {
          int v419 = *(_DWORD *)(*(void *)(v420 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v419) = 0;
        }
      }
      unint64_t v421 = v417 | ((v419 & 1) << 7);
      int v422 = *v99;
      if (v422 == 1)
      {
        unsigned int v423 = sub_1CBC796AC(a1, (uint64_t)v99, *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v422 == 2)
      {
        unsigned int v423 = *((_DWORD *)v99 + 2);
      }
      else
      {
        uint64_t v424 = *((void *)v99 + 1);
        if (*(unsigned char *)v424 == 4) {
          unsigned int v423 = *(_DWORD *)(*(void *)(v424 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v423 = 0;
        }
      }
      uint64_t v425 = (v423 << 24) & 0xFE000000 | (v423 >> 7) & 6 | v421;
      int v426 = v99[16];
      if (v426 == 1)
      {
        uint64_t v408 = a1;
        int v427 = sub_1CBC796AC(a1, (uint64_t)(v99 + 16), *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v426 == 2)
      {
        uint64_t v408 = a1;
        int v427 = *((_DWORD *)v99 + 6);
      }
      else
      {
        uint64_t v428 = *((void *)v99 + 3);
        uint64_t v408 = a1;
        if (*(unsigned char *)v428 == 4) {
          int v427 = *(_DWORD *)(*(void *)(v428 + 24) + 16) | 0x2000;
        }
        else {
          int v427 = 0;
        }
      }
      unint64_t v411 = (v427 << 15) & 0xFE0000 | (unint64_t)v425;
      __int16 v412 = 16 * v427;
LABEL_601:
      uint64_t v429 = v412 & 0x6000;
      int v430 = v99[32];
      if (v430 == 1)
      {
        unsigned int v431 = sub_1CBC796AC(v408, (uint64_t)(v99 + 32), *(void *)(a4 + 192), 0);
        uint64_t v99 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v430 == 2)
      {
        unsigned int v431 = *((_DWORD *)v99 + 10);
      }
      else
      {
        uint64_t v432 = *((void *)v99 + 5);
        if (*(unsigned char *)v432 == 4) {
          unsigned int v431 = *(_DWORD *)(*(void *)(v432 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v431 = 0;
        }
      }
      unsigned int v433 = v431 >> 4;
      uint64_t v434 = (v431 << 6) & 0x1F00;
LABEL_609:
      uint64_t v435 = *((void *)v99 + 13);
      unint64_t v436 = v429 | v411 | v434 | v433 & 0x78;
LABEL_610:
      unint64_t v87 = v436 & 0xFFFF9FFFFFFFFFFFLL | ((unint64_t)(v435 & 3) << 45);
      goto LABEL_110;
    case 11577:
    case 11578:
    case 11579:
    case 11580:
      uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      int v895 = *v10;
      if (v895 == 1)
      {
        uint64_t v896 = sub_1CBC796AC(a1, (uint64_t)v10, *(void *)(a4 + 192), 0);
        uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v895 == 2)
      {
        uint64_t v896 = *((unsigned int *)v10 + 2);
      }
      else
      {
        uint64_t v1073 = *((void *)v10 + 1);
        if (*(unsigned char *)v1073 == 4) {
          uint64_t v896 = *(_DWORD *)(*(void *)(v1073 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v896 = 0;
        }
      }
      unint64_t v1150 = (v896 << 41) & 0x6000000000000 | ((unint64_t)v896 << 40) | ((((unint64_t)v896 >> 10) & 0xF) << 35);
      int v1151 = v10[16];
      if (v1151 == 1)
      {
        uint64_t v1152 = sub_1CBC796AC(a1, (uint64_t)(v10 + 16), *(void *)(a4 + 192), 0);
        uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1151 == 2)
      {
        uint64_t v1152 = *((unsigned int *)v10 + 6);
      }
      else
      {
        uint64_t v1153 = *((void *)v10 + 3);
        if (*(unsigned char *)v1153 == 4) {
          uint64_t v1152 = *(_DWORD *)(*(void *)(v1153 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v1152 = 0;
        }
      }
      uint64_t v319 = v1150 | (v1152 << 25) & 0x600000000;
      unint64_t v320 = (v1152 << 24);
LABEL_418:
      unint64_t v321 = v320 | v319;
      uint64_t v322 = (uint64_t)(v10 + 32);
      int v323 = v10[32];
      if (v323 != 1) {
        goto LABEL_419;
      }
      uint64_t v326 = *(void *)(a4 + 192);
      uint64_t v327 = a1;
      goto LABEL_424;
    case 11581:
    case 11582:
    case 11583:
    case 11584:
    case 11585:
    case 11586:
    case 11587:
    case 11592:
    case 11593:
    case 11594:
    case 11595:
    case 11596:
    case 11597:
    case 11598:
    case 11599:
    case 11600:
    case 11601:
    case 11602:
    case 11603:
    case 11604:
    case 11605:
    case 11610:
    case 11611:
    case 11612:
    case 11613:
    case 11614:
    case 11615:
    case 11616:
    case 11617:
    case 11618:
    case 11619:
    case 11620:
    case 11621:
    case 11622:
    case 11623:
    case 11624:
    case 11625:
    case 11626:
    case 11627:
    case 11628:
    case 11629:
    case 11630:
    case 11631:
    case 11632:
    case 11633:
    case 11634:
    case 11635:
    case 11636:
    case 11637:
    case 11638:
    case 11639:
    case 11640:
    case 11641:
    case 11642:
    case 11643:
    case 11644:
    case 11645:
    case 11646:
    case 11647:
    case 11648:
    case 11649:
    case 11650:
    case 11651:
    case 11656:
    case 11657:
    case 11658:
    case 11659:
    case 11660:
    case 11661:
    case 11662:
    case 11663:
    case 11664:
    case 11665:
    case 11666:
    case 11667:
    case 11668:
    case 11669:
    case 11670:
    case 11671:
    case 11672:
    case 11673:
    case 11674:
    case 11675:
    case 11676:
    case 11677:
    case 11678:
    case 11679:
    case 11680:
    case 11681:
    case 11682:
    case 11683:
    case 11684:
    case 11685:
    case 11686:
    case 11687:
    case 11688:
    case 11689:
    case 11690:
    case 11691:
    case 11692:
    case 11693:
    case 11694:
    case 11695:
    case 11696:
    case 11697:
    case 11698:
    case 11699:
    case 11700:
    case 11701:
    case 11702:
    case 11703:
    case 11704:
    case 11709:
    case 11710:
    case 11711:
    case 11712:
    case 11713:
    case 11714:
    case 11715:
    case 11720:
    case 11721:
    case 11722:
    case 11723:
    case 11724:
    case 11725:
    case 11726:
    case 13206:
    case 13207:
    case 13208:
    case 13209:
    case 13210:
    case 13211:
    case 13212:
    case 13217:
    case 13218:
    case 13219:
    case 13220:
    case 13221:
    case 13222:
    case 13223:
    case 13224:
    case 13225:
    case 13226:
    case 13227:
    case 13228:
    case 13229:
    case 13230:
    case 13235:
    case 13236:
    case 13237:
    case 13238:
    case 13239:
    case 13240:
    case 13241:
    case 13242:
    case 13243:
    case 13244:
    case 13245:
    case 13246:
    case 13247:
    case 13248:
    case 13249:
    case 13250:
    case 13251:
    case 13252:
    case 13253:
    case 13254:
    case 13255:
    case 13256:
    case 13257:
    case 13258:
    case 13259:
    case 13260:
    case 13261:
    case 13262:
    case 13263:
    case 13264:
    case 13265:
    case 13266:
    case 13267:
    case 13268:
    case 13269:
    case 13270:
    case 13271:
    case 13272:
    case 13273:
    case 13274:
    case 13275:
    case 13276:
    case 13281:
    case 13282:
    case 13283:
    case 13284:
    case 13285:
    case 13286:
    case 13287:
    case 13288:
    case 13289:
    case 13290:
    case 13291:
    case 13292:
    case 13293:
    case 13294:
    case 13295:
    case 13296:
    case 13297:
    case 13298:
    case 13299:
    case 13300:
    case 13301:
    case 13302:
    case 13303:
    case 13304:
    case 13305:
    case 13306:
    case 13307:
    case 13308:
    case 13309:
    case 13310:
    case 13311:
    case 13312:
    case 13313:
    case 13314:
    case 13315:
    case 13316:
    case 13317:
    case 13318:
    case 13319:
    case 13320:
    case 13321:
    case 13322:
    case 13323:
    case 13324:
    case 13325:
    case 13326:
    case 13327:
    case 13328:
    case 13329:
    case 13334:
    case 13335:
    case 13336:
    case 13337:
    case 13338:
    case 13339:
    case 13340:
    case 13345:
    case 13346:
    case 13347:
    case 13348:
    case 13349:
    case 13350:
    case 13351:
      uint64_t v23 = (unsigned __int8 *)*((void *)a2 + 2);
      int v24 = *v23;
      if (v24 == 1)
      {
        uint64_t v25 = sub_1CBC796AC(a1, (uint64_t)v23, *(void *)(a4 + 192), 0);
        uint64_t v23 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v24 == 2)
      {
        uint64_t v25 = *((unsigned int *)v23 + 2);
      }
      else
      {
        uint64_t v70 = *((void *)v23 + 1);
        if (*(unsigned char *)v70 == 4) {
          uint64_t v25 = *(_DWORD *)(*(void *)(v70 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v25 = 0;
        }
      }
      unint64_t v114 = (v25 << 41) & 0x6000000000000 | ((unint64_t)v25 << 40) | ((((unint64_t)v25 >> 10) & 0xF) << 35);
      int v115 = v23[16];
      if (v115 == 1)
      {
        uint64_t v116 = sub_1CBC796AC(a1, (uint64_t)(v23 + 16), *(void *)(a4 + 192), 0);
        uint64_t v23 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v115 == 2)
      {
        uint64_t v116 = *((unsigned int *)v23 + 6);
      }
      else
      {
        uint64_t v117 = *((void *)v23 + 3);
        if (*(unsigned char *)v117 == 4) {
          uint64_t v116 = *(_DWORD *)(*(void *)(v117 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v116 = 0;
        }
      }
      uint64_t v118 = (v116 << 24) | v114 | (v116 << 25) & 0x600000000;
      int v119 = v23[32];
      if (v119 == 1)
      {
        LOBYTE(v120) = sub_1CBC796AC(a1, (uint64_t)(v23 + 32), *(void *)(a4 + 192), 0);
        uint64_t v23 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v119 == 2)
      {
        int v120 = *((_DWORD *)v23 + 10);
      }
      else
      {
        uint64_t v121 = *((void *)v23 + 5);
        if (*(unsigned char *)v121 == 4) {
          int v120 = *(_DWORD *)(*(void *)(v121 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v120) = 0;
        }
      }
      uint64_t v122 = v118 | (32 * (v120 & 3u));
      int v123 = v23[64];
      if (v123 == 1)
      {
        uint64_t v124 = a1;
        LOBYTE(v125) = sub_1CBC796AC(a1, (uint64_t)(v23 + 64), *(void *)(a4 + 192), 0);
        uint64_t v23 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v123 == 2)
      {
        uint64_t v124 = a1;
        int v125 = *((_DWORD *)v23 + 18);
      }
      else
      {
        uint64_t v126 = *((void *)v23 + 9);
        uint64_t v124 = a1;
        if (*(unsigned char *)v126 == 4) {
          int v125 = *(_DWORD *)(*(void *)(v126 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v125) = 0;
        }
      }
      unint64_t v127 = v122 | ((unint64_t)(v125 & 1) << 56);
      int v128 = v23[48];
      uint64_t v129 = (*((void *)v23 + 11) & 3) << 61;
      if (v128 == 1)
      {
        LOBYTE(v130) = sub_1CBC796AC(v124, (uint64_t)(v23 + 48), *(void *)(a4 + 192), 0);
      }
      else if (v128 == 2)
      {
        int v130 = *((_DWORD *)v23 + 14);
      }
      else
      {
        uint64_t v131 = *((void *)v23 + 7);
        if (*(unsigned char *)v131 == 4) {
          int v130 = *(_DWORD *)(*(void *)(v131 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v130) = 0;
        }
      }
      uint64_t v132 = (v130 & 3) << 13;
LABEL_534:
      unint64_t v391 = v129 | v127;
      goto LABEL_1107;
    case 11588:
    case 11589:
    case 11590:
    case 11591:
    case 11606:
    case 11607:
    case 11608:
    case 11609:
    case 11652:
    case 11653:
    case 11654:
    case 11655:
    case 11705:
    case 11706:
    case 11707:
    case 11708:
    case 11716:
    case 11717:
    case 11718:
    case 11719:
    case 11727:
    case 11728:
    case 11729:
    case 11730:
      unsigned int v189 = (unsigned __int8 *)*((void *)a2 + 2);
      int v190 = *v189;
      if (v190 == 1)
      {
        int v191 = sub_1CBC796AC(a1, (uint64_t)v189, *(void *)(a4 + 192), 0);
        unsigned int v189 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v190 == 2)
      {
        int v191 = *((_DWORD *)v189 + 2);
      }
      else
      {
        uint64_t v439 = *((void *)v189 + 1);
        if (*(unsigned char *)v439 == 4) {
          int v191 = *(_DWORD *)(*(void *)(v439 + 24) + 16) | 0x2000;
        }
        else {
          int v191 = 0;
        }
      }
      if (v189[16] == 1)
      {
        unint64_t v862 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *((unsigned int *)v189 + 6));
      }
      else
      {
        uint64_t v863 = *((void *)v189 + 3);
        if (v863) {
          uint64_t v864 = v863 - 8;
        }
        else {
          uint64_t v864 = 0;
        }
        unint64_t v862 = (*(void *)(*(void *)(v864 + 32) + 16) / 2) | 0x2000;
      }
      int v865 = v189[32];
      if (v865 == 1)
      {
        int v866 = sub_1CBC796AC(a1, (uint64_t)(v189 + 32), *(void *)(a4 + 192), 0);
        unsigned int v189 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v865 == 2)
      {
        int v866 = *((_DWORD *)v189 + 10);
      }
      else
      {
        uint64_t v867 = *((void *)v189 + 5);
        if (*(unsigned char *)v867 == 4) {
          int v866 = *(_DWORD *)(*(void *)(v867 + 24) + 16) | 0x2000;
        }
        else {
          int v866 = 0;
        }
      }
      int v868 = v189[48];
      if (v868 == 1)
      {
        LOBYTE(v869) = sub_1CBC796AC(a1, (uint64_t)(v189 + 48), *(void *)(a4 + 192), 0);
        unsigned int v189 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v868 == 2)
      {
        int v869 = *((_DWORD *)v189 + 14);
      }
      else
      {
        uint64_t v870 = *((void *)v189 + 7);
        if (*(unsigned char *)v870 == 4) {
          int v869 = *(_DWORD *)(*(void *)(v870 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v869) = 0;
        }
      }
      int v871 = v862 << 10;
      uint64_t v1366 = (v866 << 24);
      uint64_t v1357 = 2 * (v869 & 3u);
      int v872 = v189[64];
      uint64_t v1382 = a4;
      if (v872 == 1)
      {
        LOBYTE(v873) = sub_1CBC796AC(a1, (uint64_t)(v189 + 64), *(void *)(a4 + 192), 0);
        unsigned int v189 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v872 == 2)
      {
        int v873 = *((_DWORD *)v189 + 18);
      }
      else
      {
        uint64_t v874 = *((void *)v189 + 9);
        if (*(unsigned char *)v874 == 4) {
          int v873 = *(_DWORD *)(*(void *)(v874 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v873) = 0;
        }
      }
      unint64_t v875 = v862 >> 4;
      uint64_t v876 = 16 * (v873 & 1u);
      int v877 = v189[80];
      uint64_t v1371 = a1;
      if (v877 == 1)
      {
        uint64_t v879 = a1;
        uint64_t v880 = v876;
        LOBYTE(v878) = sub_1CBC796AC(v879, (uint64_t)(v189 + 80), *(void *)(v1382 + 192), 0);
        uint64_t v876 = v880;
        unsigned int v189 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v877 == 2)
      {
        int v878 = *((_DWORD *)v189 + 22);
      }
      else
      {
        uint64_t v881 = *((void *)v189 + 11);
        if (*(unsigned char *)v881 == 4) {
          int v878 = *(_DWORD *)(*(void *)(v881 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v878) = 0;
        }
      }
      unint64_t v882 = (unint64_t)(v191 & 0x3F) << 40;
      uint64_t v883 = (v191 << 14) & 0xF00000;
      uint64_t v884 = (v862 << 44) & 0x200000000000000;
      unint64_t v885 = (v862 & 0x7F) << 33;
      uint64_t v886 = *(void *)&v871 & 0xE0000;
      uint64_t v887 = v875 & 0xC0;
      uint64_t v888 = (unsigned __int16)v866 & 0xFF00;
      uint64_t v889 = 8 * (v878 & 1u);
      int v890 = v189[96];
      uint64_t v798 = (*((void *)v189 + 15) & 3) << 61;
      if (v890 == 1)
      {
        uint64_t v1353 = v887;
        uint64_t v892 = v876;
        uint64_t v893 = v886;
        LOBYTE(v891) = sub_1CBC796AC(v1371, (uint64_t)(v189 + 96), *(void *)(v1382 + 192), 0);
        uint64_t v887 = v1353;
        uint64_t v886 = v893;
        uint64_t v876 = v892;
      }
      else if (v890 == 2)
      {
        int v891 = *((_DWORD *)v189 + 26);
      }
      else
      {
        uint64_t v894 = *((void *)v189 + 13);
        if (*(unsigned char *)v894 == 4) {
          int v891 = *(_DWORD *)(*(void *)(v894 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v891) = 0;
        }
      }
      uint64_t v802 = v891 & 1;
      unint64_t v803 = v882 | v883 | v884 | v885 | v886 | v887 | v888;
      uint64_t v804 = v1366 | v1357 | v876 | v889;
      goto LABEL_1321;
    case 11731:
    case 11732:
    case 11733:
    case 11734:
    case 11735:
    case 11736:
    case 11737:
    case 11738:
    case 11739:
    case 11740:
    case 11741:
    case 11742:
    case 11743:
    case 11744:
    case 11745:
    case 11746:
    case 12152:
    case 12153:
    case 12154:
    case 12155:
    case 13358:
    case 13359:
    case 13360:
    case 13361:
    case 13362:
    case 13363:
    case 13364:
    case 13365:
    case 13366:
    case 13367:
    case 13368:
    case 13369:
    case 13370:
    case 13371:
    case 13372:
    case 13373:
      int v49 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v139 = *((void *)a2 + 2);
      int v142 = *(unsigned __int8 *)(v139 + 32);
      uint64_t v140 = v139 + 32;
      int v141 = v142;
      if (v142 == 1)
      {
        LOBYTE(v143) = sub_1CBC796AC(a1, v140, *(void *)(a4 + 192), 0);
        int v49 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v141 == 2)
      {
        int v143 = *((_DWORD *)v49 + 10);
      }
      else
      {
        uint64_t v354 = *((void *)v49 + 5);
        if (*(unsigned char *)v354 == 4) {
          int v143 = *(_DWORD *)(*(void *)(v354 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v143) = 0;
        }
      }
      unint64_t v532 = (unint64_t)(v143 & 1) << 40;
      int v533 = *v49;
      if (v533 == 1)
      {
        uint64_t v534 = sub_1CBC796AC(a1, (uint64_t)v49, *(void *)(a4 + 192), 0);
        int v49 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v533 == 2)
      {
        uint64_t v534 = *((unsigned int *)v49 + 2);
      }
      else
      {
        uint64_t v535 = *((void *)v49 + 1);
        if (*(unsigned char *)v535 == 4) {
          uint64_t v534 = *(_DWORD *)(*(void *)(v535 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v534 = 0;
        }
      }
      uint64_t v302 = (v534 << 25) & 0x600000000 | v532 | (v534 << 24);
      int v536 = v49[16];
      if (v536 == 1)
      {
        int v304 = sub_1CBC796AC(a1, (uint64_t)(v49 + 16), *(void *)(a4 + 192), 0);
        int v49 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v536 == 2)
      {
        int v304 = *((_DWORD *)v49 + 6);
      }
      else
      {
        uint64_t v537 = *((void *)v49 + 3);
        if (*(unsigned char *)v537 == 4) {
          int v304 = *(_DWORD *)(*(void *)(v537 + 24) + 16) | 0x2000;
        }
        else {
          int v304 = 0;
        }
      }
      uint64_t v306 = (v304 << 9) & 0x60000;
LABEL_802:
      unint64_t v538 = v306 | ((unint64_t)v304 << 8) | v302;
      uint64_t v539 = *((void *)v49 + 7);
LABEL_803:
      unint64_t v87 = v538 & 0xFFFF9FFFFFFFFFFFLL | ((unint64_t)(v539 & 3) << 45);
      goto LABEL_110;
    case 11747:
    case 11749:
    case 11751:
    case 11753:
    case 11755:
    case 11757:
    case 11759:
    case 11761:
    case 11763:
    case 11765:
    case 11767:
    case 11769:
    case 11771:
    case 11773:
    case 11775:
    case 11777:
    case 13374:
    case 13376:
    case 13378:
    case 13380:
    case 13382:
    case 13384:
    case 13386:
    case 13388:
    case 13390:
    case 13392:
    case 13394:
    case 13396:
    case 13398:
    case 13400:
    case 13402:
    case 13404:
      uint64_t v166 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v167 = *((void *)a2 + 2);
      int v170 = *(unsigned __int8 *)(v167 + 64);
      uint64_t v168 = v167 + 64;
      int v169 = v170;
      if (v170 == 1)
      {
        LOBYTE(v171) = sub_1CBC796AC(a1, v168, *(void *)(a4 + 192), 0);
        uint64_t v166 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v169 == 2)
      {
        int v171 = *((_DWORD *)v166 + 18);
      }
      else
      {
        uint64_t v360 = *((void *)v166 + 9);
        if (*(unsigned char *)v360 == 4) {
          int v171 = *(_DWORD *)(*(void *)(v360 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v171) = 0;
        }
      }
      unint64_t v674 = (unint64_t)(v171 & 1) << 40;
      int v675 = *v166;
      if (v675 == 1)
      {
        uint64_t v676 = a1;
        uint64_t v677 = sub_1CBC796AC(a1, (uint64_t)v166, *(void *)(a4 + 192), 0);
        uint64_t v166 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v675 == 2)
      {
        uint64_t v676 = a1;
        uint64_t v677 = *((unsigned int *)v166 + 2);
      }
      else
      {
        uint64_t v678 = *((void *)v166 + 1);
        uint64_t v676 = a1;
        if (*(unsigned char *)v678 == 4) {
          uint64_t v677 = *(_DWORD *)(*(void *)(v678 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v677 = 0;
        }
      }
      uint64_t v679 = (v677 << 25) & 0x600000000 | v674;
      uint64_t v680 = (v677 << 24);
      int v681 = v166[16];
      if (v681 == 1)
      {
        int v682 = sub_1CBC796AC(v676, (uint64_t)(v166 + 16), *(void *)(a4 + 192), 0);
        uint64_t v166 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v681 == 2)
      {
        int v682 = *((_DWORD *)v166 + 6);
      }
      else
      {
        uint64_t v683 = *((void *)v166 + 3);
        if (*(unsigned char *)v683 == 4) {
          int v682 = *(_DWORD *)(*(void *)(v683 + 24) + 16) | 0x2000;
        }
        else {
          int v682 = 0;
        }
      }
      uint64_t v684 = v679 | v680;
      unint64_t v685 = (v682 << 9) & 0x60000 | ((unint64_t)v682 << 8);
      int v686 = v166[32];
      uint64_t v687 = *((void *)v166 + 11);
      if (v686 == 1)
      {
        LOBYTE(v688) = sub_1CBC796AC(v676, (uint64_t)(v166 + 32), *(void *)(a4 + 192), 0);
        uint64_t v166 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v686 == 2)
      {
        int v688 = *((_DWORD *)v166 + 10);
      }
      else
      {
        uint64_t v689 = *((void *)v166 + 5);
        if (*(unsigned char *)v689 == 4) {
          int v688 = *(_DWORD *)(*(void *)(v689 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v688) = 0;
        }
      }
      unint64_t v690 = v685 | v684;
      unint64_t v691 = (unint64_t)(v687 & 3) << 45;
      uint64_t v692 = (v688 & 3) << 6;
      uint64_t v693 = (uint64_t)(v166 + 48);
      int v694 = v166[48];
      if (v694 == 1)
      {
LABEL_1951:
        LOBYTE(v695) = sub_1CBC796AC(v676, v693, *(void *)(a4 + 192), 0);
      }
      else if (v694 == 2)
      {
        int v695 = *((_DWORD *)v166 + 14);
      }
      else
      {
        uint64_t v696 = *((void *)v166 + 7);
LABEL_1042:
        if (*(unsigned char *)v696 == 4) {
          int v695 = *(_DWORD *)(*(void *)(v696 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v695) = 0;
        }
      }
LABEL_1952:
      unint64_t v391 = v691 | v690;
      uint64_t v132 = v692 | (2 * (v695 & 3u));
      goto LABEL_1107;
    case 11748:
    case 11750:
    case 11752:
    case 11754:
    case 11756:
    case 11758:
    case 11760:
    case 11762:
    case 11764:
    case 11766:
    case 11768:
    case 11770:
    case 11772:
    case 11774:
    case 11776:
    case 11778:
    case 13375:
    case 13377:
    case 13379:
    case 13381:
    case 13383:
    case 13385:
    case 13387:
    case 13389:
    case 13391:
    case 13393:
    case 13395:
    case 13397:
    case 13399:
    case 13401:
    case 13403:
    case 13405:
      char v151 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v152 = *((void *)a2 + 2);
      int v155 = *(unsigned __int8 *)(v152 + 80);
      uint64_t v153 = v152 + 80;
      int v154 = v155;
      if (v155 == 1)
      {
        LOBYTE(v156) = sub_1CBC796AC(a1, v153, *(void *)(a4 + 192), 0);
        char v151 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v154 == 2)
      {
        int v156 = *((_DWORD *)v151 + 22);
      }
      else
      {
        uint64_t v357 = *((void *)v151 + 11);
        if (*(unsigned char *)v357 == 4) {
          int v156 = *(_DWORD *)(*(void *)(v357 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v156) = 0;
        }
      }
      uint64_t v615 = v156 & 1;
      int v616 = *v151;
      if (v616 == 1)
      {
        uint64_t v617 = a1;
        uint64_t v618 = sub_1CBC796AC(a1, (uint64_t)v151, *(void *)(a4 + 192), 0);
        char v151 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v616 == 2)
      {
        uint64_t v617 = a1;
        uint64_t v618 = *((unsigned int *)v151 + 2);
      }
      else
      {
        uint64_t v619 = *((void *)v151 + 1);
        uint64_t v617 = a1;
        if (*(unsigned char *)v619 == 4) {
          uint64_t v618 = *(_DWORD *)(*(void *)(v619 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v618 = 0;
        }
      }
      uint64_t v620 = v615 << 40;
      uint64_t v621 = (v618 << 25) & 0x600000000;
      uint64_t v622 = (v618 << 24);
      int v623 = v151[16];
      if (v623 == 1)
      {
        int v624 = sub_1CBC796AC(v617, (uint64_t)(v151 + 16), *(void *)(a4 + 192), 0);
        char v151 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v623 == 2)
      {
        int v624 = *((_DWORD *)v151 + 6);
      }
      else
      {
        uint64_t v625 = *((void *)v151 + 3);
        if (*(unsigned char *)v625 == 4) {
          int v624 = *(_DWORD *)(*(void *)(v625 + 24) + 16) | 0x2000;
        }
        else {
          int v624 = 0;
        }
      }
      uint64_t v626 = v621 | v620;
      uint64_t v627 = (v624 << 9) & 0x60000;
      unint64_t v628 = (unint64_t)v624 << 8;
      int v629 = v151[32];
      uint64_t v630 = *((void *)v151 + 13);
      if (v629 == 1)
      {
        LOBYTE(v631) = sub_1CBC796AC(v617, (uint64_t)(v151 + 32), *(void *)(a4 + 192), 0);
        char v151 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v629 == 2)
      {
        int v631 = *((_DWORD *)v151 + 10);
      }
      else
      {
        uint64_t v632 = *((void *)v151 + 5);
        if (*(unsigned char *)v632 == 4) {
          int v631 = *(_DWORD *)(*(void *)(v632 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v631) = 0;
        }
      }
      uint64_t v633 = v626 | v622;
      unint64_t v634 = v627 | v628;
      uint64_t v635 = 16 * (v631 & 1u);
      int v636 = v151[48];
      if (v636 == 1)
      {
        LOBYTE(v637) = sub_1CBC796AC(v617, (uint64_t)(v151 + 48), *(void *)(a4 + 192), 0);
        char v151 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v636 == 2)
      {
        int v637 = *((_DWORD *)v151 + 14);
      }
      else
      {
        uint64_t v638 = *((void *)v151 + 7);
        if (*(unsigned char *)v638 == 4) {
          int v637 = *(_DWORD *)(*(void *)(v638 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v637) = 0;
        }
      }
      unint64_t v639 = v634 | v633;
      uint64_t v640 = 8 * (v637 & 1u);
      int v641 = v151[64];
      if (v641 == 1)
      {
        LOBYTE(v642) = sub_1CBC796AC(v617, (uint64_t)(v151 + 64), *(void *)(a4 + 192), 0);
      }
      else if (v641 == 2)
      {
        int v642 = *((_DWORD *)v151 + 18);
      }
      else
      {
        uint64_t v643 = *((void *)v151 + 9);
        if (*(unsigned char *)v643 == 4) {
          int v642 = *(_DWORD *)(*(void *)(v643 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v642) = 0;
        }
      }
      uint64_t v578 = 2 * (v642 & 3u);
      unint64_t v391 = ((unint64_t)(v630 & 3) << 45) | v639;
      unint64_t v579 = v635 | v640;
      goto LABEL_1106;
    case 11851:
    case 11852:
    case 11853:
    case 11854:
    case 11855:
    case 11856:
    case 11857:
    case 11858:
    case 11859:
    case 11860:
    case 11861:
    case 11862:
    case 11863:
    case 11864:
    case 11865:
    case 11866:
    case 11956:
    case 11957:
    case 11958:
    case 11959:
    case 11960:
    case 11961:
    case 11962:
    case 11963:
    case 11964:
    case 11965:
    case 11966:
    case 11967:
    case 11968:
    case 11969:
    case 11970:
    case 11971:
      uint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
      int v149 = *v148;
      if (v149 == 1)
      {
        uint64_t v150 = sub_1CBC796AC(a1, (uint64_t)v148, *(void *)(a4 + 192), 0);
        uint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v149 == 2)
      {
        uint64_t v150 = *((unsigned int *)v148 + 2);
      }
      else
      {
        uint64_t v356 = *((void *)v148 + 1);
        if (*(unsigned char *)v356 == 4) {
          uint64_t v150 = *(_DWORD *)(*(void *)(v356 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v150 = 0;
        }
      }
      unsigned __int8 v580 = v150;
      uint64_t v581 = (v150 << 41) & 0x6000000000000;
      int v582 = v148[16];
      if (v582 == 1)
      {
        uint64_t v583 = sub_1CBC796AC(a1, (uint64_t)(v148 + 16), *(void *)(a4 + 192), 0);
        uint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v582 == 2)
      {
        uint64_t v583 = *((unsigned int *)v148 + 6);
      }
      else
      {
        uint64_t v584 = *((void *)v148 + 3);
        if (*(unsigned char *)v584 == 4) {
          uint64_t v583 = *(_DWORD *)(*(void *)(v584 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v583 = 0;
        }
      }
      unint64_t v585 = v581 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v580 << 40);
      uint64_t v586 = (v583 << 25) & 0x600000000;
      uint64_t v587 = (v583 << 24);
      int v588 = v148[32];
      if (v588 == 1)
      {
        uint64_t v589 = a1;
        unsigned int v590 = sub_1CBC796AC(a1, (uint64_t)(v148 + 32), *(void *)(a4 + 192), 0);
        uint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v588 == 2)
      {
        uint64_t v589 = a1;
        unsigned int v590 = *((_DWORD *)v148 + 10);
      }
      else
      {
        uint64_t v591 = *((void *)v148 + 5);
        uint64_t v589 = a1;
        if (*(unsigned char *)v591 == 4) {
          unsigned int v590 = *(_DWORD *)(*(void *)(v591 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v590 = 0;
        }
      }
      unint64_t v592 = v585 | v586;
      unint64_t v593 = (unint64_t)(v590 & 0x7F) << 17;
      uint64_t v594 = (v590 >> 2) & 0xE0;
      int v595 = v148[48];
      if (v595 == 1)
      {
        LOBYTE(v596) = sub_1CBC796AC(v589, (uint64_t)(v148 + 48), *(void *)(a4 + 192), 0);
        uint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v595 == 2)
      {
        int v596 = *((_DWORD *)v148 + 14);
      }
      else
      {
        uint64_t v597 = *((void *)v148 + 7);
        if (*(unsigned char *)v597 == 4) {
          int v596 = *(_DWORD *)(*(void *)(v597 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v596) = 0;
        }
      }
      unint64_t v598 = v587 | v592;
      unint64_t v599 = v594 | v593;
      uint64_t v600 = v596 & 0xF;
      int v601 = v148[64];
      if (v601 == 1)
      {
        LOBYTE(v602) = sub_1CBC796AC(v589, (uint64_t)(v148 + 64), *(void *)(a4 + 192), 0);
        uint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v601 == 2)
      {
        int v602 = *((_DWORD *)v148 + 18);
      }
      else
      {
        uint64_t v603 = *((void *)v148 + 9);
        if (*(unsigned char *)v603 == 4) {
          int v602 = *(_DWORD *)(*(void *)(v603 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v602) = 0;
        }
      }
      unint64_t v604 = v599 | v598;
      uint64_t v605 = (v602 & 0x1F) << 8;
      int v606 = v148[80];
      if (v606 == 1)
      {
        unsigned int v607 = sub_1CBC796AC(v589, (uint64_t)(v148 + 80), *(void *)(a4 + 192), 0);
        uint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v606 == 2)
      {
        unsigned int v607 = *((_DWORD *)v148 + 22);
      }
      else
      {
        uint64_t v608 = *((void *)v148 + 11);
        if (*(unsigned char *)v608 == 4) {
          unsigned int v607 = *(_DWORD *)(*(void *)(v608 + 24) + 16) | 0x2000;
        }
        else {
          unsigned int v607 = 0;
        }
      }
      unint64_t v609 = v604 | (v600 << 51);
      unint64_t v610 = (unint64_t)(v607 & 7) << 13;
      uint64_t v611 = (v607 >> 2) & 6;
      int v612 = v148[96];
      if (v612 == 1)
      {
        LOBYTE(v613) = sub_1CBC796AC(v589, (uint64_t)(v148 + 96), *(void *)(a4 + 192), 0);
        uint64_t v148 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v612 == 2)
      {
        int v613 = *((_DWORD *)v148 + 26);
      }
      else
      {
        uint64_t v614 = *((void *)v148 + 13);
        if (*(unsigned char *)v614 == 4) {
          int v613 = *(_DWORD *)(*(void *)(v614 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v613) = 0;
        }
      }
      uint64_t v69 = *((void *)v148 + 15);
      unint64_t v68 = v609 | v605 | v610 | v611 | ((unint64_t)(v613 & 1) << 56);
      goto LABEL_109;
    case 11871:
    case 11872:
      uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      int v1053 = *v10;
      if (v1053 == 1)
      {
        uint64_t v1054 = a4;
        uint64_t v1055 = a1;
        int v1056 = sub_1CBC796AC(a1, (uint64_t)v10, *(void *)(a4 + 192), 0);
        uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else
      {
        uint64_t v1054 = a4;
        uint64_t v1055 = a1;
        if (v1053 == 2)
        {
          int v1056 = *((_DWORD *)v10 + 2);
        }
        else
        {
          uint64_t v1158 = *((void *)v10 + 1);
          if (*(unsigned char *)v1158 == 4) {
            int v1056 = *(_DWORD *)(*(void *)(v1158 + 24) + 16) | 0x2000;
          }
          else {
            int v1056 = 0;
          }
        }
      }
      unint64_t v1253 = (v1056 << 14) & 0xF00000 | ((unint64_t)(v1056 & 0x3F) << 40);
      int v1254 = v10[16];
      if (v1254 == 1)
      {
        int v1255 = sub_1CBC796AC(v1055, (uint64_t)(v10 + 16), *(void *)(v1054 + 192), 0);
        uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1254 == 2)
      {
        int v1255 = *((_DWORD *)v10 + 6);
      }
      else
      {
        uint64_t v1256 = *((void *)v10 + 3);
        if (*(unsigned char *)v1256 == 4) {
          int v1255 = *(_DWORD *)(*(void *)(v1256 + 24) + 16) | 0x2000;
        }
        else {
          int v1255 = 0;
        }
      }
      unint64_t v321 = (unsigned __int16)v1255 & 0xFF00 | v1253 | (v1255 << 24);
      uint64_t v322 = (uint64_t)(v10 + 32);
      int v323 = v10[32];
      if (v323 == 1)
      {
        uint64_t v326 = *(void *)(v1054 + 192);
        uint64_t v327 = v1055;
LABEL_424:
        LOBYTE(v324) = sub_1CBC796AC(v327, v322, v326, 0);
        uint64_t v10 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else
      {
LABEL_419:
        if (v323 == 2)
        {
          int v324 = *((_DWORD *)v10 + 10);
        }
        else
        {
          uint64_t v325 = *((void *)v10 + 5);
          if (*(unsigned char *)v325 == 4) {
            int v324 = *(_DWORD *)(*(void *)(v325 + 24) + 16) | 0x2000;
          }
          else {
            LOBYTE(v324) = 0;
          }
        }
      }
      unint64_t v68 = v321 | ((unint64_t)(v324 & 1) << 56);
LABEL_74:
      uint64_t v69 = *((void *)v10 + 7);
LABEL_109:
      unint64_t v87 = v68 & 0x9FFFFFFFFFFFFFFFLL | ((unint64_t)(v69 & 3) << 61);
      goto LABEL_110;
    case 11873:
    case 11874:
      v1057 = (unsigned __int8 *)*((void *)a2 + 2);
      int v1058 = *v1057;
      if (v1058 == 1)
      {
        int v1059 = sub_1CBC796AC(a1, (uint64_t)v1057, *(void *)(a4 + 192), 0);
        v1057 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1058 == 2)
      {
        int v1059 = *((_DWORD *)v1057 + 2);
      }
      else
      {
        uint64_t v1159 = *((void *)v1057 + 1);
        if (*(unsigned char *)v1159 == 4) {
          int v1059 = *(_DWORD *)(*(void *)(v1159 + 24) + 16) | 0x2000;
        }
        else {
          int v1059 = 0;
        }
      }
      if (v1057[16] == 1)
      {
        unint64_t v1257 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *((unsigned int *)v1057 + 6));
      }
      else
      {
        uint64_t v1258 = *((void *)v1057 + 3);
        if (v1258) {
          uint64_t v1259 = v1258 - 8;
        }
        else {
          uint64_t v1259 = 0;
        }
        unint64_t v1257 = (*(void *)(*(void *)(v1259 + 32) + 16) / 2) | 0x2000;
      }
      int v1260 = v1257 << 10;
      unint64_t v1261 = v1257 >> 4;
      int v1262 = v1057[32];
      if (v1262 == 1)
      {
        int v1263 = sub_1CBC796AC(a1, (uint64_t)(v1057 + 32), *(void *)(a4 + 192), 0);
        v1057 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1262 == 2)
      {
        int v1263 = *((_DWORD *)v1057 + 10);
      }
      else
      {
        uint64_t v1264 = *((void *)v1057 + 5);
        if (*(unsigned char *)v1264 == 4) {
          int v1263 = *(_DWORD *)(*(void *)(v1264 + 24) + 16) | 0x2000;
        }
        else {
          int v1263 = 0;
        }
      }
      unint64_t v1265 = (unint64_t)(v1059 & 0x3F) << 40;
      uint64_t v1266 = (v1059 << 14) & 0xF00000;
      uint64_t v1267 = (v1257 << 44) & 0x200000000000000;
      unint64_t v1268 = (v1257 & 0x7F) << 33;
      uint64_t v1269 = *(void *)&v1260 & 0xE0000;
      uint64_t v1270 = v1261 & 0xC0;
      uint64_t v343 = (v1263 << 24);
      uint64_t v1271 = (unsigned __int16)v1263 & 0xFF00;
      int v1272 = v1057[48];
      if (v1272 == 1)
      {
        unint64_t v1274 = v1265;
        LOBYTE(v1273) = sub_1CBC796AC(a1, (uint64_t)(v1057 + 48), *(void *)(a4 + 192), 0);
        unint64_t v1265 = v1274;
        v1057 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1272 == 2)
      {
        int v1273 = *((_DWORD *)v1057 + 14);
      }
      else
      {
        uint64_t v1275 = *((void *)v1057 + 7);
        if (*(unsigned char *)v1275 == 4) {
          int v1273 = *(_DWORD *)(*(void *)(v1275 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1273) = 0;
        }
      }
      uint64_t v348 = v1273 & 1;
      uint64_t v349 = (*((void *)v1057 + 9) & 3) << 61;
      unint64_t v350 = v1265 | v1266 | v1267 | v1268;
      uint64_t v351 = v1269 | v1270 | v1271;
LABEL_1274:
      uint64_t v861 = v350 | v351 | v343 | (v348 << 56);
      goto LABEL_1275;
    case 11875:
    case 12156:
    case 12215:
    case 13429:
      v897 = (unsigned __int8 *)*((void *)a2 + 2);
      int v898 = *v897;
      if (v898 == 1)
      {
        LOBYTE(v899) = sub_1CBC796AC(a1, (uint64_t)v897, *(void *)(a4 + 192), 0);
        v897 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v898 == 2)
      {
        int v899 = *((_DWORD *)v897 + 2);
      }
      else
      {
        uint64_t v1074 = *((void *)v897 + 1);
        if (*(unsigned char *)v1074 == 4) {
          int v899 = *(_DWORD *)(*(void *)(v1074 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v899) = 0;
        }
      }
      uint64_t v530 = (8 * (v899 & 0xF)) | ((*((_DWORD *)v897 + 6) & 3u) << 13);
      goto LABEL_1351;
    case 11972:
      v1116 = (unsigned __int8 *)*((void *)a2 + 2);
      int v1117 = *v1116;
      if (v1117 == 1)
      {
        int v1118 = sub_1CBC796AC(a1, (uint64_t)v1116, *(void *)(a4 + 192), 0);
        v1116 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1117 == 2)
      {
        int v1118 = *((_DWORD *)v1116 + 2);
      }
      else
      {
        uint64_t v1169 = *((void *)v1116 + 1);
        if (*(unsigned char *)v1169 == 4) {
          int v1118 = *(_DWORD *)(*(void *)(v1169 + 24) + 16) | 0x2000;
        }
        else {
          int v1118 = 0;
        }
      }
      unint64_t v87 = (v1118 << 10) & 0x20000 | ((v1118 & 0x7Fu) << 9) | ((*((_DWORD *)v1116 + 10) & 3) << 29);
      goto LABEL_110;
    case 11973:
      v1076 = (unsigned __int8 *)*((void *)a2 + 2);
      int v1077 = *v1076;
      if (v1077 == 1)
      {
        unint64_t v1078 = sub_1CBC796AC(a1, (uint64_t)v1076, *(void *)(a4 + 192), 0);
        v1076 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1077 == 2)
      {
        unint64_t v1078 = *((unsigned int *)v1076 + 2);
      }
      else
      {
        uint64_t v1161 = *((void *)v1076 + 1);
        if (*(unsigned char *)v1161 == 4) {
          unint64_t v1078 = *(_DWORD *)(*(void *)(v1161 + 24) + 16) | 0x2000u;
        }
        else {
          unint64_t v1078 = 0;
        }
      }
      unint64_t v1282 = v1078 >> 8;
      uint64_t v1283 = (v1078 << 8) & 0xFE00;
      int v1284 = *((_DWORD *)v1076 + 10);
LABEL_1965:
      v8 |= v1283 & 0xFFFFFFFF9FFDFFFFLL | ((v1282 & 1) << 17) & 0xFFFFFFFF9FFFFFFFLL | ((unint64_t)(v1284 & 3) << 29);
      return v8;
    case 12022:
      v1125 = (unsigned __int8 *)*((void *)a2 + 2);
      int v1126 = (*((_DWORD *)v1125 + 10) & 3) << 13;
      int v1127 = *v1125;
      if (v1127 == 1)
      {
        LOBYTE(v1128) = sub_1CBC796AC(a1, (uint64_t)v1125, *(void *)(a4 + 192), 0);
        v1125 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1127 == 2)
      {
        int v1128 = *((_DWORD *)v1125 + 2);
      }
      else
      {
        uint64_t v1171 = *((void *)v1125 + 1);
        if (*(unsigned char *)v1171 == 4) {
          int v1128 = *(_DWORD *)(*(void *)(v1171 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1128) = 0;
        }
      }
      int v1331 = ((v1128 & 3) << 8) | v1126;
      int v1332 = v1125[16];
      if (v1332 == 1)
      {
        LOBYTE(v1333) = sub_1CBC796AC(a1, (uint64_t)(v1125 + 16), *(void *)(a4 + 192), 0);
      }
      else if (v1332 == 2)
      {
        int v1333 = *((_DWORD *)v1125 + 6);
      }
      else
      {
        uint64_t v1334 = *((void *)v1125 + 3);
        if (*(unsigned char *)v1334 == 4) {
          int v1333 = *(_DWORD *)(*(void *)(v1334 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1333) = 0;
        }
      }
      uint64_t v530 = v1331 | (2 * (v1333 & 0xFu));
      goto LABEL_1351;
    case 12146:
      sub_1CBC78DBC((uint64_t)a2, a3);
      goto LABEL_1627;
    case 12147:
      sub_1CBC79234((uint64_t)a2, a3);
LABEL_1627:
      uint64x2_t v1148 = (uint64x2_t)vdupq_n_s64(v1097);
      unint64_t v1032 = ((unint64_t)v1097 >> 8) & 0xFE0000;
      int8x16_t v1149 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v1148, (uint64x2_t)xmmword_1CDC7FAD0), (int8x16_t)xmmword_1CDC7FB00), vandq_s8((int8x16_t)vshlq_u64(v1148, (uint64x2_t)xmmword_1CDC7FAE0), (int8x16_t)xmmword_1CDC7FAF0));
      uint64_t v1031 = (uint64_t)vorr_s8(*(int8x8_t *)v1149.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1149, v1149, 8uLL));
LABEL_1628:
      unint64_t v87 = v1031 | v1032;
      goto LABEL_110;
    case 12148:
    case 12150:
      uint64_t v1048 = a1;
      sub_1CBC78DBC((uint64_t)a2, a3);
      goto LABEL_1557;
    case 12149:
    case 12151:
      uint64_t v1048 = a1;
      sub_1CBC79234((uint64_t)a2, a3);
LABEL_1557:
      uint64_t v1060 = (v1049 << 40) & 0xFE0000000000;
      uint64_t v1061 = (v1049 << 32) & 0x100010001000100;
      unint64_t v1062 = ((unint64_t)v1049 << 24) & 0xFE00000000;
      uint64_t v1063 = (v1049 << 8) & 0xFF000000;
      unint64_t v1064 = ((unint64_t)v1049 >> 8) & 0xFE0000;
      uint64_t v1065 = *((void *)a2 + 2);
      int v1066 = *(unsigned __int8 *)(v1065 + 16);
      if (v1066 == 1)
      {
        uint64_t v1067 = sub_1CBC796AC(v1048, v1065 + 16, *(void *)(a4 + 192), 0);
      }
      else if (v1066 == 2)
      {
        uint64_t v1067 = *(unsigned int *)(v1065 + 24);
      }
      else
      {
        uint64_t v1075 = *(void *)(v1065 + 24);
        if (*(unsigned char *)v1075 == 4) {
          uint64_t v1067 = *(_DWORD *)(*(void *)(v1075 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v1067 = 0;
        }
      }
      unint64_t v87 = v1061 | v1060 | v1062 | v1063 | v1064 | (v1067 << 50) & 0x38000000000000 | (v1067 << 10) & 0xC400;
      goto LABEL_110;
    case 12208:
    case 12209:
      v1068 = (unsigned __int8 *)*((void *)a2 + 2);
      int v1069 = *v1068;
      if (v1069 == 1)
      {
        uint64_t v1070 = a4;
        uint64_t v1071 = a1;
        int v1072 = sub_1CBC796AC(a1, (uint64_t)v1068, *(void *)(a4 + 192), 0);
        v1068 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else
      {
        uint64_t v1070 = a4;
        uint64_t v1071 = a1;
        if (v1069 == 2)
        {
          int v1072 = *((_DWORD *)v1068 + 2);
        }
        else
        {
          uint64_t v1160 = *((void *)v1068 + 1);
          if (*(unsigned char *)v1160 == 4) {
            int v1072 = *(_DWORD *)(*(void *)(v1160 + 24) + 16) | 0x2000;
          }
          else {
            int v1072 = 0;
          }
        }
      }
      uint64_t v1276 = (v1072 << 9) & 0x20000;
      unint64_t v1277 = (unint64_t)v1072 << 8;
      int v1278 = v1068[16];
      uint64_t v1279 = (*((_DWORD *)v1068 + 10) & 3) << 29;
      if (v1278 == 1)
      {
        LOBYTE(v1280) = sub_1CBC796AC(v1071, (uint64_t)(v1068 + 16), *(void *)(v1070 + 192), 0);
      }
      else if (v1278 == 2)
      {
        int v1280 = *((_DWORD *)v1068 + 6);
      }
      else
      {
        uint64_t v1281 = *((void *)v1068 + 3);
        if (*(unsigned char *)v1281 == 4) {
          int v1280 = *(_DWORD *)(*(void *)(v1281 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1280) = 0;
        }
      }
      unint64_t v87 = v1276 | v1277 | ((v1280 & 1) << 24) | v1279;
      goto LABEL_110;
    case 12440:
    case 12443:
    case 12446:
    case 12449:
    case 12452:
    case 12455:
    case 12458:
    case 12461:
    case 12464:
    case 12467:
    case 12470:
    case 12473:
    case 12476:
    case 12479:
    case 12482:
    case 12485:
      uint64_t v312 = *((void *)a2 + 2);
      int v313 = *(unsigned __int8 *)(v312 + 64);
      if (v313 == 1)
      {
        LOBYTE(v314) = sub_1CBC796AC(a1, v312 + 64, *(void *)(a4 + 192), 0);
        uint64_t v312 = *((void *)a2 + 2);
      }
      else if (v313 == 2)
      {
        int v314 = *(_DWORD *)(v312 + 72);
      }
      else
      {
        uint64_t v727 = *(void *)(v312 + 72);
        if (*(unsigned char *)v727 == 4) {
          int v314 = *(_DWORD *)(*(void *)(v727 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v314) = 0;
        }
      }
      int v995 = (v314 & 7) << 9;
      int v996 = *(unsigned __int8 *)(v312 + 80);
      if (v996 == 1)
      {
        LOBYTE(v997) = sub_1CBC796AC(a1, v312 + 80, *(void *)(a4 + 192), 0);
        uint64_t v312 = *((void *)a2 + 2);
      }
      else if (v996 == 2)
      {
        int v997 = *(_DWORD *)(v312 + 88);
      }
      else
      {
        uint64_t v998 = *(void *)(v312 + 88);
        if (*(unsigned char *)v998 == 4) {
          int v997 = *(_DWORD *)(*(void *)(v998 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v997) = 0;
        }
      }
      unsigned int v999 = v995 & 0xFFFF8FFF | ((v997 & 7) << 12);
      int v1000 = *(unsigned __int8 *)(v312 + 96);
      if (v1000 == 1)
      {
        LOBYTE(v1001) = sub_1CBC796AC(a1, v312 + 96, *(void *)(a4 + 192), 0);
        uint64_t v312 = *((void *)a2 + 2);
      }
      else if (v1000 == 2)
      {
        int v1001 = *(_DWORD *)(v312 + 104);
      }
      else
      {
        uint64_t v1002 = *(void *)(v312 + 104);
        if (*(unsigned char *)v1002 == 4) {
          int v1001 = *(_DWORD *)(*(void *)(v1002 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1001) = 0;
        }
      }
      unsigned int v1003 = v999 & 0xF3FFFFFF | ((v1001 & 3) << 26);
      int v1004 = *(unsigned __int8 *)(v312 + 112);
      if (v1004 == 1)
      {
        LOBYTE(v1005) = sub_1CBC796AC(a1, v312 + 112, *(void *)(a4 + 192), 0);
        uint64_t v312 = *((void *)a2 + 2);
      }
      else if (v1004 == 2)
      {
        int v1005 = *(_DWORD *)(v312 + 120);
      }
      else
      {
        uint64_t v1006 = *(void *)(v312 + 120);
        if (*(unsigned char *)v1006 == 4) {
          int v1005 = *(_DWORD *)(*(void *)(v1006 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1005) = 0;
        }
      }
      int v1007 = v1003 | ((v1005 & 1) << 23);
      int v1008 = *(unsigned __int8 *)(v312 + 128);
      if (v1008 == 1)
      {
        LOBYTE(v1009) = sub_1CBC796AC(a1, v312 + 128, *(void *)(a4 + 192), 0);
        uint64_t v312 = *((void *)a2 + 2);
      }
      else if (v1008 == 2)
      {
        int v1009 = *(_DWORD *)(v312 + 136);
      }
      else
      {
        uint64_t v1010 = *(void *)(v312 + 136);
        if (*(unsigned char *)v1010 == 4) {
          int v1009 = *(_DWORD *)(*(void *)(v1010 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1009) = 0;
        }
      }
      int v1011 = v1007 | ((v1009 & 1) << 24);
      int v1012 = *(unsigned __int8 *)(v312 + 144);
      if (v1012 == 1)
      {
        LOBYTE(v1013) = sub_1CBC796AC(a1, v312 + 144, *(void *)(a4 + 192), 0);
        uint64_t v312 = *((void *)a2 + 2);
      }
      else if (v1012 == 2)
      {
        int v1013 = *(_DWORD *)(v312 + 152);
      }
      else
      {
        uint64_t v1014 = *(void *)(v312 + 152);
        if (*(unsigned char *)v1014 == 4) {
          int v1013 = *(_DWORD *)(*(void *)(v1014 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1013) = 0;
        }
      }
      int v664 = v1011 | ((v1013 & 1) << 25);
      uint64_t v665 = v312 + 160;
      int v1015 = *(unsigned __int8 *)(v312 + 160);
      if (v1015 == 1) {
        goto LABEL_1526;
      }
      if (v1015 == 2)
      {
        int v667 = *(_DWORD *)(v312 + 168);
        goto LABEL_1531;
      }
      uint64_t v668 = *(void *)(v312 + 168);
      goto LABEL_1528;
    case 12441:
    case 12442:
    case 12444:
    case 12445:
    case 12447:
    case 12448:
    case 12450:
    case 12451:
    case 12453:
    case 12454:
    case 12456:
    case 12457:
    case 12459:
    case 12460:
    case 12462:
    case 12463:
    case 12465:
    case 12466:
    case 12468:
    case 12469:
    case 12471:
    case 12472:
    case 12474:
    case 12475:
    case 12477:
    case 12478:
    case 12480:
    case 12481:
    case 12483:
    case 12484:
    case 12486:
    case 12487:
      uint64_t v157 = *((void *)a2 + 2);
      int v158 = *(unsigned __int8 *)(v157 + 96);
      if (v158 == 1)
      {
        LOBYTE(v159) = sub_1CBC796AC(a1, v157 + 96, *(void *)(a4 + 192), 0);
        uint64_t v157 = *((void *)a2 + 2);
      }
      else if (v158 == 2)
      {
        int v159 = *(_DWORD *)(v157 + 104);
      }
      else
      {
        uint64_t v358 = *(void *)(v157 + 104);
        if (*(unsigned char *)v358 == 4) {
          int v159 = *(_DWORD *)(*(void *)(v358 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v159) = 0;
        }
      }
      int v644 = (v159 & 7) << 9;
      int v645 = *(unsigned __int8 *)(v157 + 112);
      if (v645 == 1)
      {
        LOBYTE(v646) = sub_1CBC796AC(a1, v157 + 112, *(void *)(a4 + 192), 0);
        uint64_t v157 = *((void *)a2 + 2);
      }
      else if (v645 == 2)
      {
        int v646 = *(_DWORD *)(v157 + 120);
      }
      else
      {
        uint64_t v647 = *(void *)(v157 + 120);
        if (*(unsigned char *)v647 == 4) {
          int v646 = *(_DWORD *)(*(void *)(v647 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v646) = 0;
        }
      }
      unsigned int v648 = v644 & 0xFFFF8FFF | ((v646 & 7) << 12);
      int v649 = *(unsigned __int8 *)(v157 + 128);
      if (v649 == 1)
      {
        LOBYTE(v650) = sub_1CBC796AC(a1, v157 + 128, *(void *)(a4 + 192), 0);
        uint64_t v157 = *((void *)a2 + 2);
      }
      else if (v649 == 2)
      {
        int v650 = *(_DWORD *)(v157 + 136);
      }
      else
      {
        uint64_t v651 = *(void *)(v157 + 136);
        if (*(unsigned char *)v651 == 4) {
          int v650 = *(_DWORD *)(*(void *)(v651 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v650) = 0;
        }
      }
      unsigned int v652 = v648 & 0xF3FFFFFF | ((v650 & 3) << 26);
      int v653 = *(unsigned __int8 *)(v157 + 144);
      if (v653 == 1)
      {
        LOBYTE(v654) = sub_1CBC796AC(a1, v157 + 144, *(void *)(a4 + 192), 0);
        uint64_t v157 = *((void *)a2 + 2);
      }
      else if (v653 == 2)
      {
        int v654 = *(_DWORD *)(v157 + 152);
      }
      else
      {
        uint64_t v655 = *(void *)(v157 + 152);
        if (*(unsigned char *)v655 == 4) {
          int v654 = *(_DWORD *)(*(void *)(v655 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v654) = 0;
        }
      }
      int v656 = v652 | ((v654 & 1) << 23);
      int v657 = *(unsigned __int8 *)(v157 + 160);
      if (v657 == 1)
      {
        LOBYTE(v658) = sub_1CBC796AC(a1, v157 + 160, *(void *)(a4 + 192), 0);
        uint64_t v157 = *((void *)a2 + 2);
      }
      else if (v657 == 2)
      {
        int v658 = *(_DWORD *)(v157 + 168);
      }
      else
      {
        uint64_t v659 = *(void *)(v157 + 168);
        if (*(unsigned char *)v659 == 4) {
          int v658 = *(_DWORD *)(*(void *)(v659 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v658) = 0;
        }
      }
      int v660 = v656 | ((v658 & 1) << 24);
      int v661 = *(unsigned __int8 *)(v157 + 176);
      if (v661 == 1)
      {
        LOBYTE(v662) = sub_1CBC796AC(a1, v157 + 176, *(void *)(a4 + 192), 0);
        uint64_t v157 = *((void *)a2 + 2);
      }
      else if (v661 == 2)
      {
        int v662 = *(_DWORD *)(v157 + 184);
      }
      else
      {
        uint64_t v663 = *(void *)(v157 + 184);
        if (*(unsigned char *)v663 == 4) {
          int v662 = *(_DWORD *)(*(void *)(v663 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v662) = 0;
        }
      }
      int v664 = v660 | ((v662 & 1) << 25);
      uint64_t v665 = v157 + 192;
      int v666 = *(unsigned __int8 *)(v157 + 192);
      if (v666 == 1)
      {
LABEL_1526:
        LOBYTE(v667) = sub_1CBC796AC(a1, v665, *(void *)(a4 + 192), 0);
      }
      else if (v666 == 2)
      {
        int v667 = *(_DWORD *)(v157 + 200);
      }
      else
      {
        uint64_t v668 = *(void *)(v157 + 200);
LABEL_1528:
        if (*(unsigned char *)v668 == 4) {
          int v667 = *(_DWORD *)(*(void *)(v668 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v667) = 0;
        }
      }
LABEL_1531:
      v8 |= v664 & 0xDFFFFFFF | ((v667 & 1) << 29);
      return v8;
    case 12488:
    case 12490:
    case 12492:
    case 12494:
    case 12536:
    case 12538:
    case 12580:
    case 12582:
    case 12624:
    case 12626:
    case 12668:
    case 12670:
    case 12672:
    case 12674:
    case 12676:
    case 12678:
    case 12680:
    case 12682:
    case 12684:
    case 12686:
    case 12688:
    case 12690:
    case 12732:
    case 12734:
    case 12776:
    case 12778:
    case 12820:
    case 12822:
    case 12864:
    case 12866:
    case 12869:
    case 12871:
    case 12872:
    case 12874:
    case 12876:
    case 12878:
    case 12880:
    case 12882:
      uint64_t v133 = *((void *)a2 + 2);
      int v134 = *(unsigned __int8 *)(v133 + 64);
      if (v134 == 1)
      {
        LOBYTE(v135) = sub_1CBC796AC(a1, v133 + 64, *(void *)(a4 + 192), 0);
        uint64_t v133 = *((void *)a2 + 2);
      }
      else if (v134 == 2)
      {
        int v135 = *(_DWORD *)(v133 + 72);
      }
      else
      {
        uint64_t v352 = *(void *)(v133 + 72);
        if (*(unsigned char *)v352 == 4) {
          int v135 = *(_DWORD *)(*(void *)(v352 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v135) = 0;
        }
      }
      int v442 = (v135 & 3) << 13;
      int v443 = *(unsigned __int8 *)(v133 + 80);
      if (v443 == 1)
      {
        LOBYTE(v444) = sub_1CBC796AC(a1, v133 + 80, *(void *)(a4 + 192), 0);
        uint64_t v133 = *((void *)a2 + 2);
      }
      else if (v443 == 2)
      {
        int v444 = *(_DWORD *)(v133 + 88);
      }
      else
      {
        uint64_t v445 = *(void *)(v133 + 88);
        if (*(unsigned char *)v445 == 4) {
          int v444 = *(_DWORD *)(*(void *)(v445 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v444) = 0;
        }
      }
      int v446 = ((v444 & 3) << 11) | v442;
      int v447 = *(unsigned __int8 *)(v133 + 96);
      if (v447 == 1)
      {
        LOBYTE(v448) = sub_1CBC796AC(a1, v133 + 96, *(void *)(a4 + 192), 0);
        uint64_t v133 = *((void *)a2 + 2);
      }
      else if (v447 == 2)
      {
        int v448 = *(_DWORD *)(v133 + 104);
      }
      else
      {
        uint64_t v449 = *(void *)(v133 + 104);
        if (*(unsigned char *)v449 == 4) {
          int v448 = *(_DWORD *)(*(void *)(v449 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v448) = 0;
        }
      }
      unsigned int v450 = v446 & 0xFFFDFFFF | ((v448 & 1) << 17);
      int v451 = *(unsigned __int8 *)(v133 + 112);
      if (v451 == 1)
      {
        LOBYTE(v452) = sub_1CBC796AC(a1, v133 + 112, *(void *)(a4 + 192), 0);
        uint64_t v133 = *((void *)a2 + 2);
      }
      else if (v451 == 2)
      {
        int v452 = *(_DWORD *)(v133 + 120);
      }
      else
      {
        uint64_t v453 = *(void *)(v133 + 120);
        if (*(unsigned char *)v453 == 4) {
          int v452 = *(_DWORD *)(*(void *)(v453 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v452) = 0;
        }
      }
      int v454 = v450 | ((v452 & 1) << 10);
      int v455 = *(unsigned __int8 *)(v133 + 128);
      if (v455 == 1)
      {
        LOBYTE(v456) = sub_1CBC796AC(a1, v133 + 128, *(void *)(a4 + 192), 0);
        uint64_t v133 = *((void *)a2 + 2);
      }
      else if (v455 == 2)
      {
        int v456 = *(_DWORD *)(v133 + 136);
      }
      else
      {
        uint64_t v457 = *(void *)(v133 + 136);
        if (*(unsigned char *)v457 == 4) {
          int v456 = *(_DWORD *)(*(void *)(v457 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v456) = 0;
        }
      }
      int v458 = v454 | ((v456 & 1) << 9);
      int v459 = *(unsigned __int8 *)(v133 + 144);
      if (v459 == 1)
      {
        LOBYTE(v460) = sub_1CBC796AC(a1, v133 + 144, *(void *)(a4 + 192), 0);
        uint64_t v133 = *((void *)a2 + 2);
      }
      else if (v459 == 2)
      {
        int v460 = *(_DWORD *)(v133 + 152);
      }
      else
      {
        uint64_t v461 = *(void *)(v133 + 152);
        if (*(unsigned char *)v461 == 4) {
          int v460 = *(_DWORD *)(*(void *)(v461 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v460) = 0;
        }
      }
      int v462 = v458 | ((v460 & 1) << 8);
      int v463 = *(unsigned __int8 *)(v133 + 160);
      if (v463 == 1)
      {
        LOBYTE(v464) = sub_1CBC796AC(a1, v133 + 160, *(void *)(a4 + 192), 0);
        uint64_t v133 = *((void *)a2 + 2);
      }
      else if (v463 == 2)
      {
        int v464 = *(_DWORD *)(v133 + 168);
      }
      else
      {
        uint64_t v465 = *(void *)(v133 + 168);
        if (*(unsigned char *)v465 == 4) {
          int v464 = *(_DWORD *)(*(void *)(v465 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v464) = 0;
        }
      }
      int v466 = v462 | ((v464 & 1) << 7);
      int v467 = *(unsigned __int8 *)(v133 + 176);
      if (v467 == 1)
      {
        LOBYTE(v468) = sub_1CBC796AC(a1, v133 + 176, *(void *)(a4 + 192), 0);
        uint64_t v133 = *((void *)a2 + 2);
      }
      else if (v467 == 2)
      {
        int v468 = *(_DWORD *)(v133 + 184);
      }
      else
      {
        uint64_t v469 = *(void *)(v133 + 184);
        if (*(unsigned char *)v469 == 4) {
          int v468 = *(_DWORD *)(*(void *)(v469 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v468) = 0;
        }
      }
      int v470 = v466 | ((v468 & 1) << 6);
      int v471 = *(unsigned __int8 *)(v133 + 192);
      if (v471 == 1)
      {
        LOBYTE(v472) = sub_1CBC796AC(a1, v133 + 192, *(void *)(a4 + 192), 0);
        uint64_t v133 = *((void *)a2 + 2);
      }
      else if (v471 == 2)
      {
        int v472 = *(_DWORD *)(v133 + 200);
      }
      else
      {
        uint64_t v473 = *(void *)(v133 + 200);
        if (*(unsigned char *)v473 == 4) {
          int v472 = *(_DWORD *)(*(void *)(v473 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v472) = 0;
        }
      }
      int v474 = v470 | (32 * (v472 & 1));
      int v475 = *(unsigned __int8 *)(v133 + 208);
      if (v475 == 1)
      {
        LOBYTE(v476) = sub_1CBC796AC(a1, v133 + 208, *(void *)(a4 + 192), 0);
        uint64_t v133 = *((void *)a2 + 2);
      }
      else if (v475 == 2)
      {
        int v476 = *(_DWORD *)(v133 + 216);
      }
      else
      {
        uint64_t v477 = *(void *)(v133 + 216);
        if (*(unsigned char *)v477 == 4) {
          int v476 = *(_DWORD *)(*(void *)(v477 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v476) = 0;
        }
      }
      int v478 = v474 | (4 * (v476 & 3));
      int v479 = *(unsigned __int8 *)(v133 + 224);
      if (v479 == 1)
      {
        LOBYTE(v480) = sub_1CBC796AC(a1, v133 + 224, *(void *)(a4 + 192), 0);
        uint64_t v133 = *((void *)a2 + 2);
      }
      else if (v479 == 2)
      {
        int v480 = *(_DWORD *)(v133 + 232);
      }
      else
      {
        uint64_t v481 = *(void *)(v133 + 232);
        if (*(unsigned char *)v481 == 4) {
          int v480 = *(_DWORD *)(*(void *)(v481 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v480) = 0;
        }
      }
      unsigned int v482 = v478 & 0xFFE7FFFF | ((v480 & 3) << 19);
      uint64_t v483 = v133 + 240;
      int v484 = *(unsigned __int8 *)(v133 + 240);
      if (v484 == 1) {
        goto LABEL_776;
      }
      if (v484 == 2)
      {
        int v485 = *(_DWORD *)(v133 + 248);
        goto LABEL_782;
      }
      uint64_t v486 = *(void *)(v133 + 248);
      goto LABEL_779;
    case 12489:
    case 12491:
    case 12493:
    case 12495:
    case 12537:
    case 12539:
    case 12581:
    case 12583:
    case 12625:
    case 12627:
    case 12669:
    case 12671:
    case 12673:
    case 12675:
    case 12677:
    case 12679:
    case 12681:
    case 12683:
    case 12685:
    case 12687:
    case 12689:
    case 12691:
    case 12733:
    case 12735:
    case 12777:
    case 12779:
    case 12821:
    case 12823:
    case 12865:
    case 12867:
    case 12873:
    case 12875:
    case 12877:
    case 12879:
    case 12881:
    case 12883:
      uint64_t v136 = *((void *)a2 + 2);
      int v137 = *(unsigned __int8 *)(v136 + 80);
      if (v137 == 1)
      {
        LOBYTE(v138) = sub_1CBC796AC(a1, v136 + 80, *(void *)(a4 + 192), 0);
        uint64_t v136 = *((void *)a2 + 2);
      }
      else if (v137 == 2)
      {
        int v138 = *(_DWORD *)(v136 + 88);
      }
      else
      {
        uint64_t v353 = *(void *)(v136 + 88);
        if (*(unsigned char *)v353 == 4) {
          int v138 = *(_DWORD *)(*(void *)(v353 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v138) = 0;
        }
      }
      int v487 = (v138 & 3) << 13;
      int v488 = *(unsigned __int8 *)(v136 + 96);
      if (v488 == 1)
      {
        LOBYTE(v489) = sub_1CBC796AC(a1, v136 + 96, *(void *)(a4 + 192), 0);
        uint64_t v136 = *((void *)a2 + 2);
      }
      else if (v488 == 2)
      {
        int v489 = *(_DWORD *)(v136 + 104);
      }
      else
      {
        uint64_t v490 = *(void *)(v136 + 104);
        if (*(unsigned char *)v490 == 4) {
          int v489 = *(_DWORD *)(*(void *)(v490 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v489) = 0;
        }
      }
      int v491 = ((v489 & 3) << 11) | v487;
      int v492 = *(unsigned __int8 *)(v136 + 112);
      if (v492 == 1)
      {
        LOBYTE(v493) = sub_1CBC796AC(a1, v136 + 112, *(void *)(a4 + 192), 0);
        uint64_t v136 = *((void *)a2 + 2);
      }
      else if (v492 == 2)
      {
        int v493 = *(_DWORD *)(v136 + 120);
      }
      else
      {
        uint64_t v494 = *(void *)(v136 + 120);
        if (*(unsigned char *)v494 == 4) {
          int v493 = *(_DWORD *)(*(void *)(v494 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v493) = 0;
        }
      }
      unsigned int v495 = v491 & 0xFFFDFFFF | ((v493 & 1) << 17);
      int v496 = *(unsigned __int8 *)(v136 + 128);
      if (v496 == 1)
      {
        LOBYTE(v497) = sub_1CBC796AC(a1, v136 + 128, *(void *)(a4 + 192), 0);
        uint64_t v136 = *((void *)a2 + 2);
      }
      else if (v496 == 2)
      {
        int v497 = *(_DWORD *)(v136 + 136);
      }
      else
      {
        uint64_t v498 = *(void *)(v136 + 136);
        if (*(unsigned char *)v498 == 4) {
          int v497 = *(_DWORD *)(*(void *)(v498 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v497) = 0;
        }
      }
      int v499 = v495 | ((v497 & 1) << 10);
      int v500 = *(unsigned __int8 *)(v136 + 144);
      if (v500 == 1)
      {
        LOBYTE(v501) = sub_1CBC796AC(a1, v136 + 144, *(void *)(a4 + 192), 0);
        uint64_t v136 = *((void *)a2 + 2);
      }
      else if (v500 == 2)
      {
        int v501 = *(_DWORD *)(v136 + 152);
      }
      else
      {
        uint64_t v502 = *(void *)(v136 + 152);
        if (*(unsigned char *)v502 == 4) {
          int v501 = *(_DWORD *)(*(void *)(v502 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v501) = 0;
        }
      }
      int v503 = v499 | ((v501 & 1) << 9);
      int v504 = *(unsigned __int8 *)(v136 + 160);
      if (v504 == 1)
      {
        LOBYTE(v505) = sub_1CBC796AC(a1, v136 + 160, *(void *)(a4 + 192), 0);
        uint64_t v136 = *((void *)a2 + 2);
      }
      else if (v504 == 2)
      {
        int v505 = *(_DWORD *)(v136 + 168);
      }
      else
      {
        uint64_t v506 = *(void *)(v136 + 168);
        if (*(unsigned char *)v506 == 4) {
          int v505 = *(_DWORD *)(*(void *)(v506 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v505) = 0;
        }
      }
      int v507 = v503 | ((v505 & 1) << 8);
      int v508 = *(unsigned __int8 *)(v136 + 176);
      if (v508 == 1)
      {
        LOBYTE(v509) = sub_1CBC796AC(a1, v136 + 176, *(void *)(a4 + 192), 0);
        uint64_t v136 = *((void *)a2 + 2);
      }
      else if (v508 == 2)
      {
        int v509 = *(_DWORD *)(v136 + 184);
      }
      else
      {
        uint64_t v510 = *(void *)(v136 + 184);
        if (*(unsigned char *)v510 == 4) {
          int v509 = *(_DWORD *)(*(void *)(v510 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v509) = 0;
        }
      }
      int v511 = v507 | ((v509 & 1) << 7);
      int v512 = *(unsigned __int8 *)(v136 + 192);
      if (v512 == 1)
      {
        LOBYTE(v513) = sub_1CBC796AC(a1, v136 + 192, *(void *)(a4 + 192), 0);
        uint64_t v136 = *((void *)a2 + 2);
      }
      else if (v512 == 2)
      {
        int v513 = *(_DWORD *)(v136 + 200);
      }
      else
      {
        uint64_t v514 = *(void *)(v136 + 200);
        if (*(unsigned char *)v514 == 4) {
          int v513 = *(_DWORD *)(*(void *)(v514 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v513) = 0;
        }
      }
      int v515 = v511 | ((v513 & 1) << 6);
      int v516 = *(unsigned __int8 *)(v136 + 208);
      if (v516 == 1)
      {
        LOBYTE(v517) = sub_1CBC796AC(a1, v136 + 208, *(void *)(a4 + 192), 0);
        uint64_t v136 = *((void *)a2 + 2);
      }
      else if (v516 == 2)
      {
        int v517 = *(_DWORD *)(v136 + 216);
      }
      else
      {
        uint64_t v518 = *(void *)(v136 + 216);
        if (*(unsigned char *)v518 == 4) {
          int v517 = *(_DWORD *)(*(void *)(v518 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v517) = 0;
        }
      }
      int v519 = v515 | (32 * (v517 & 1));
      int v520 = *(unsigned __int8 *)(v136 + 224);
      if (v520 == 1)
      {
        LOBYTE(v521) = sub_1CBC796AC(a1, v136 + 224, *(void *)(a4 + 192), 0);
        uint64_t v136 = *((void *)a2 + 2);
      }
      else if (v520 == 2)
      {
        int v521 = *(_DWORD *)(v136 + 232);
      }
      else
      {
        uint64_t v522 = *(void *)(v136 + 232);
        if (*(unsigned char *)v522 == 4) {
          int v521 = *(_DWORD *)(*(void *)(v522 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v521) = 0;
        }
      }
      int v523 = v519 | (4 * (v521 & 3));
      int v524 = *(unsigned __int8 *)(v136 + 240);
      if (v524 == 1)
      {
        LOBYTE(v525) = sub_1CBC796AC(a1, v136 + 240, *(void *)(a4 + 192), 0);
        uint64_t v136 = *((void *)a2 + 2);
      }
      else if (v524 == 2)
      {
        int v525 = *(_DWORD *)(v136 + 248);
      }
      else
      {
        uint64_t v526 = *(void *)(v136 + 248);
        if (*(unsigned char *)v526 == 4) {
          int v525 = *(_DWORD *)(*(void *)(v526 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v525) = 0;
        }
      }
      unsigned int v482 = v523 & 0xFFE7FFFF | ((v525 & 3) << 19);
      int v527 = *(unsigned __int8 *)(v136 + 256);
      if (v527 == 1)
      {
        uint64_t v483 = v136 + 256;
LABEL_776:
        uint64_t v528 = *(void *)(a4 + 192);
        uint64_t v529 = a1;
        goto LABEL_777;
      }
      if (v527 == 2)
      {
        int v485 = *(_DWORD *)(v136 + 264);
        goto LABEL_782;
      }
      uint64_t v486 = *(void *)(v136 + 264);
      goto LABEL_779;
    case 12496:
    case 12506:
    case 12516:
    case 12526:
    case 12540:
    case 12550:
    case 12560:
    case 12570:
    case 12584:
    case 12594:
    case 12604:
    case 12614:
    case 12628:
    case 12638:
    case 12648:
    case 12658:
    case 12692:
    case 12702:
    case 12712:
    case 12722:
    case 12736:
    case 12746:
    case 12756:
    case 12766:
    case 12780:
    case 12790:
    case 12800:
    case 12810:
    case 12824:
    case 12834:
    case 12844:
    case 12854:
      uint64_t v172 = *((void *)a2 + 2);
      int v173 = *(unsigned __int8 *)(v172 + 80);
      if (v173 == 1)
      {
        LOBYTE(v174) = sub_1CBC796AC(a1, v172 + 80, *(void *)(a4 + 192), 0);
        uint64_t v172 = *((void *)a2 + 2);
      }
      else if (v173 == 2)
      {
        int v174 = *(_DWORD *)(v172 + 88);
      }
      else
      {
        uint64_t v361 = *(void *)(v172 + 88);
        if (*(unsigned char *)v361 == 4) {
          int v174 = *(_DWORD *)(*(void *)(v361 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v174) = 0;
        }
      }
      int v697 = *(unsigned __int8 *)(v172 + 160);
      if (v697 == 1)
      {
        LOBYTE(v698) = sub_1CBC796AC(a1, v172 + 160, *(void *)(a4 + 192), 0);
        uint64_t v172 = *((void *)a2 + 2);
      }
      else if (v697 == 2)
      {
        int v698 = *(_DWORD *)(v172 + 168);
      }
      else
      {
        uint64_t v699 = *(void *)(v172 + 168);
        if (*(unsigned char *)v699 == 4) {
          int v698 = *(_DWORD *)(*(void *)(v699 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v698) = 0;
        }
      }
      int v700 = *(unsigned __int8 *)(v172 + 96);
      if (v700 == 1)
      {
        LOBYTE(v701) = sub_1CBC796AC(a1, v172 + 96, *(void *)(a4 + 192), 0);
        uint64_t v172 = *((void *)a2 + 2);
      }
      else if (v700 == 2)
      {
        int v701 = *(_DWORD *)(v172 + 104);
      }
      else
      {
        uint64_t v702 = *(void *)(v172 + 104);
        if (*(unsigned char *)v702 == 4) {
          int v701 = *(_DWORD *)(*(void *)(v702 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v701) = 0;
        }
      }
      uint64_t v703 = v174 & 1;
      uint64_t v704 = v698 & 0xF;
      int v705 = *(unsigned __int8 *)(v172 + 112);
      if (v705 == 1)
      {
        LOBYTE(v706) = sub_1CBC796AC(a1, v172 + 112, *(void *)(a4 + 192), 0);
        uint64_t v172 = *((void *)a2 + 2);
      }
      else if (v705 == 2)
      {
        int v706 = *(_DWORD *)(v172 + 120);
      }
      else
      {
        uint64_t v707 = *(void *)(v172 + 120);
        if (*(unsigned char *)v707 == 4) {
          int v706 = *(_DWORD *)(*(void *)(v707 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v706) = 0;
        }
      }
      int v708 = *(unsigned __int8 *)(v172 + 144);
      uint64_t v1375 = a4;
      if (v708 == 1)
      {
        int v709 = sub_1CBC796AC(a1, v172 + 144, *(void *)(a4 + 192), 0);
        uint64_t v172 = *((void *)a2 + 2);
      }
      else if (v708 == 2)
      {
        int v709 = *(_DWORD *)(v172 + 152);
      }
      else
      {
        uint64_t v710 = *(void *)(v172 + 152);
        if (*(unsigned char *)v710 == 4) {
          int v709 = *(_DWORD *)(*(void *)(v710 + 24) + 16) | 0x2000;
        }
        else {
          int v709 = 0;
        }
      }
      uint64_t v711 = (v701 & 7) << 9;
      int v712 = *(unsigned __int8 *)(v172 + 176);
      if (v712 == 1)
      {
        LOBYTE(v713) = sub_1CBC796AC(a1, v172 + 176, *(void *)(v1375 + 192), 0);
        uint64_t v172 = *((void *)a2 + 2);
      }
      else if (v712 == 2)
      {
        int v713 = *(_DWORD *)(v172 + 184);
      }
      else
      {
        uint64_t v714 = *(void *)(v172 + 184);
        if (*(unsigned char *)v714 == 4) {
          int v713 = *(_DWORD *)(*(void *)(v714 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v713) = 0;
        }
      }
      int v715 = *(unsigned __int8 *)(v172 + 192);
      uint64_t v1363 = (v706 & 7) << 12;
      if (v715 == 1)
      {
        LOBYTE(v716) = sub_1CBC796AC(a1, v172 + 192, *(void *)(v1375 + 192), 0);
        uint64_t v172 = *((void *)a2 + 2);
      }
      else if (v715 == 2)
      {
        int v716 = *(_DWORD *)(v172 + 200);
      }
      else
      {
        uint64_t v717 = *(void *)(v172 + 200);
        if (*(unsigned char *)v717 == 4) {
          int v716 = *(_DWORD *)(*(void *)(v717 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v716) = 0;
        }
      }
      uint64_t v718 = v703 | (v704 << 15) | (8 * v704);
      uint64_t v214 = (v713 & 3) << 26;
      uint64_t v215 = (v716 & 1) << 23;
      int v719 = *(unsigned __int8 *)(v172 + 208);
      if (v719 == 1)
      {
        LOBYTE(v720) = sub_1CBC796AC(a1, v172 + 208, *(void *)(v1375 + 192), 0);
        uint64_t v172 = *((void *)a2 + 2);
      }
      else if (v719 == 2)
      {
        int v720 = *(_DWORD *)(v172 + 216);
      }
      else
      {
        uint64_t v721 = *(void *)(v172 + 216);
        if (*(unsigned char *)v721 == 4) {
          int v720 = *(_DWORD *)(*(void *)(v721 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v720) = 0;
        }
      }
      uint64_t v722 = v718 | v711;
      uint64_t v220 = (v720 & 1) << 24;
      int v723 = *(unsigned __int8 *)(v172 + 224);
      if (v723 == 1)
      {
        uint64_t v222 = a1;
        LOBYTE(v724) = sub_1CBC796AC(a1, v172 + 224, *(void *)(v1375 + 192), 0);
        uint64_t v172 = *((void *)a2 + 2);
      }
      else if (v723 == 2)
      {
        uint64_t v222 = a1;
        int v724 = *(_DWORD *)(v172 + 232);
      }
      else
      {
        uint64_t v725 = *(void *)(v172 + 232);
        uint64_t v222 = a1;
        if (*(unsigned char *)v725 == 4) {
          int v724 = *(_DWORD *)(*(void *)(v725 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v724) = 0;
        }
      }
      uint64_t v225 = v722 | v1363;
      unint64_t v226 = (unint64_t)(v709 & 3) << 21;
      uint64_t v227 = (v709 << 18) & 0x100000;
      uint64_t v228 = (v724 & 1) << 25;
      uint64_t v231 = v172 + 240;
      int v726 = *(unsigned __int8 *)(v172 + 240);
      if (v726 == 1) {
        goto LABEL_288;
      }
      if (v726 == 2)
      {
        int v230 = *(_DWORD *)(v172 + 248);
        goto LABEL_1105;
      }
      uint64_t v232 = *(void *)(v172 + 248);
      goto LABEL_290;
    case 12497:
    case 12499:
    case 12502:
    case 12504:
    case 12507:
    case 12509:
    case 12512:
    case 12514:
    case 12517:
    case 12519:
    case 12522:
    case 12524:
    case 12527:
    case 12529:
    case 12532:
    case 12534:
    case 12541:
    case 12543:
    case 12546:
    case 12548:
    case 12551:
    case 12553:
    case 12556:
    case 12558:
    case 12561:
    case 12563:
    case 12566:
    case 12568:
    case 12571:
    case 12573:
    case 12576:
    case 12578:
    case 12585:
    case 12587:
    case 12590:
    case 12592:
    case 12595:
    case 12597:
    case 12600:
    case 12602:
    case 12605:
    case 12607:
    case 12610:
    case 12612:
    case 12615:
    case 12617:
    case 12620:
    case 12622:
    case 12629:
    case 12631:
    case 12634:
    case 12636:
    case 12639:
    case 12641:
    case 12644:
    case 12646:
    case 12649:
    case 12651:
    case 12654:
    case 12656:
    case 12659:
    case 12661:
    case 12664:
    case 12666:
    case 12693:
    case 12695:
    case 12698:
    case 12700:
    case 12703:
    case 12705:
    case 12708:
    case 12710:
    case 12713:
    case 12715:
    case 12718:
    case 12720:
    case 12723:
    case 12725:
    case 12728:
    case 12730:
    case 12737:
    case 12739:
    case 12742:
    case 12744:
    case 12747:
    case 12749:
    case 12752:
    case 12754:
    case 12757:
    case 12759:
    case 12762:
    case 12764:
    case 12767:
    case 12769:
    case 12772:
    case 12774:
    case 12781:
    case 12783:
    case 12786:
    case 12788:
    case 12791:
    case 12793:
    case 12796:
    case 12798:
    case 12801:
    case 12803:
    case 12806:
    case 12808:
    case 12811:
    case 12813:
    case 12816:
    case 12818:
    case 12825:
    case 12827:
    case 12830:
    case 12832:
    case 12835:
    case 12837:
    case 12840:
    case 12842:
    case 12845:
    case 12847:
    case 12850:
    case 12852:
    case 12855:
    case 12857:
    case 12860:
    case 12862:
      uint64_t v42 = *((void *)a2 + 2);
      int v43 = *(unsigned __int8 *)(v42 + 112);
      if (v43 == 1)
      {
        LOBYTE(v44) = sub_1CBC796AC(a1, v42 + 112, *(void *)(a4 + 192), 0);
        uint64_t v42 = *((void *)a2 + 2);
      }
      else if (v43 == 2)
      {
        int v44 = *(_DWORD *)(v42 + 120);
      }
      else
      {
        uint64_t v112 = *(void *)(v42 + 120);
        if (*(unsigned char *)v112 == 4) {
          int v44 = *(_DWORD *)(*(void *)(v112 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v44) = 0;
        }
      }
      int v192 = *(unsigned __int8 *)(v42 + 192);
      if (v192 == 1)
      {
        LOBYTE(v193) = sub_1CBC796AC(a1, v42 + 192, *(void *)(a4 + 192), 0);
        uint64_t v42 = *((void *)a2 + 2);
      }
      else if (v192 == 2)
      {
        int v193 = *(_DWORD *)(v42 + 200);
      }
      else
      {
        uint64_t v194 = *(void *)(v42 + 200);
        if (*(unsigned char *)v194 == 4) {
          int v193 = *(_DWORD *)(*(void *)(v194 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v193) = 0;
        }
      }
      int v195 = *(unsigned __int8 *)(v42 + 128);
      if (v195 == 1)
      {
        LOBYTE(v196) = sub_1CBC796AC(a1, v42 + 128, *(void *)(a4 + 192), 0);
        uint64_t v42 = *((void *)a2 + 2);
      }
      else if (v195 == 2)
      {
        int v196 = *(_DWORD *)(v42 + 136);
      }
      else
      {
        uint64_t v197 = *(void *)(v42 + 136);
        if (*(unsigned char *)v197 == 4) {
          int v196 = *(_DWORD *)(*(void *)(v197 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v196) = 0;
        }
      }
      uint64_t v198 = v44 & 1;
      uint64_t v199 = v193 & 0xF;
      int v200 = *(unsigned __int8 *)(v42 + 144);
      if (v200 == 1)
      {
        LOBYTE(v201) = sub_1CBC796AC(a1, v42 + 144, *(void *)(a4 + 192), 0);
        uint64_t v42 = *((void *)a2 + 2);
      }
      else if (v200 == 2)
      {
        int v201 = *(_DWORD *)(v42 + 152);
      }
      else
      {
        uint64_t v202 = *(void *)(v42 + 152);
        if (*(unsigned char *)v202 == 4) {
          int v201 = *(_DWORD *)(*(void *)(v202 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v201) = 0;
        }
      }
      int v203 = *(unsigned __int8 *)(v42 + 176);
      uint64_t v1375 = a4;
      if (v203 == 1)
      {
        int v204 = sub_1CBC796AC(a1, v42 + 176, *(void *)(a4 + 192), 0);
        uint64_t v42 = *((void *)a2 + 2);
      }
      else if (v203 == 2)
      {
        int v204 = *(_DWORD *)(v42 + 184);
      }
      else
      {
        uint64_t v205 = *(void *)(v42 + 184);
        if (*(unsigned char *)v205 == 4) {
          int v204 = *(_DWORD *)(*(void *)(v205 + 24) + 16) | 0x2000;
        }
        else {
          int v204 = 0;
        }
      }
      uint64_t v206 = (v196 & 7) << 9;
      int v207 = *(unsigned __int8 *)(v42 + 208);
      if (v207 == 1)
      {
        LOBYTE(v208) = sub_1CBC796AC(a1, v42 + 208, *(void *)(v1375 + 192), 0);
        uint64_t v42 = *((void *)a2 + 2);
      }
      else if (v207 == 2)
      {
        int v208 = *(_DWORD *)(v42 + 216);
      }
      else
      {
        uint64_t v209 = *(void *)(v42 + 216);
        if (*(unsigned char *)v209 == 4) {
          int v208 = *(_DWORD *)(*(void *)(v209 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v208) = 0;
        }
      }
      int v210 = *(unsigned __int8 *)(v42 + 224);
      uint64_t v1359 = (v201 & 7) << 12;
      if (v210 == 1)
      {
        LOBYTE(v211) = sub_1CBC796AC(a1, v42 + 224, *(void *)(v1375 + 192), 0);
        uint64_t v42 = *((void *)a2 + 2);
      }
      else if (v210 == 2)
      {
        int v211 = *(_DWORD *)(v42 + 232);
      }
      else
      {
        uint64_t v212 = *(void *)(v42 + 232);
        if (*(unsigned char *)v212 == 4) {
          int v211 = *(_DWORD *)(*(void *)(v212 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v211) = 0;
        }
      }
      uint64_t v213 = v198 | (v199 << 15) | (8 * v199);
      uint64_t v214 = (v208 & 3) << 26;
      uint64_t v215 = (v211 & 1) << 23;
      int v216 = *(unsigned __int8 *)(v42 + 240);
      if (v216 == 1)
      {
        LOBYTE(v217) = sub_1CBC796AC(a1, v42 + 240, *(void *)(v1375 + 192), 0);
        uint64_t v42 = *((void *)a2 + 2);
      }
      else if (v216 == 2)
      {
        int v217 = *(_DWORD *)(v42 + 248);
      }
      else
      {
        uint64_t v218 = *(void *)(v42 + 248);
        if (*(unsigned char *)v218 == 4) {
          int v217 = *(_DWORD *)(*(void *)(v218 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v217) = 0;
        }
      }
      uint64_t v219 = v213 | v206;
      uint64_t v220 = (v217 & 1) << 24;
      int v221 = *(unsigned __int8 *)(v42 + 256);
      if (v221 == 1)
      {
        uint64_t v222 = a1;
        LOBYTE(v223) = sub_1CBC796AC(a1, v42 + 256, *(void *)(v1375 + 192), 0);
        uint64_t v42 = *((void *)a2 + 2);
      }
      else if (v221 == 2)
      {
        uint64_t v222 = a1;
        int v223 = *(_DWORD *)(v42 + 264);
      }
      else
      {
        uint64_t v224 = *(void *)(v42 + 264);
        uint64_t v222 = a1;
        if (*(unsigned char *)v224 == 4) {
          int v223 = *(_DWORD *)(*(void *)(v224 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v223) = 0;
        }
      }
      uint64_t v225 = v219 | v1359;
      unint64_t v226 = (unint64_t)(v204 & 3) << 21;
      uint64_t v227 = (v204 << 18) & 0x100000;
      uint64_t v228 = (v223 & 1) << 25;
      int v229 = *(unsigned __int8 *)(v42 + 272);
      if (v229 == 1)
      {
        uint64_t v231 = v42 + 272;
LABEL_288:
        LOBYTE(v230) = sub_1CBC796AC(v222, v231, *(void *)(v1375 + 192), 0);
      }
      else if (v229 == 2)
      {
        int v230 = *(_DWORD *)(v42 + 280);
      }
      else
      {
        uint64_t v232 = *(void *)(v42 + 280);
LABEL_290:
        if (*(unsigned char *)v232 == 4) {
          int v230 = *(_DWORD *)(*(void *)(v232 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v230) = 0;
        }
      }
LABEL_1105:
      uint64_t v578 = (v230 & 1) << 29;
      unint64_t v391 = v225 | v226;
      unint64_t v579 = v227 | v214 | v215 | v220 | v228;
      goto LABEL_1106;
    case 12498:
    case 12500:
    case 12503:
    case 12505:
    case 12508:
    case 12510:
    case 12513:
    case 12515:
    case 12518:
    case 12520:
    case 12523:
    case 12525:
    case 12528:
    case 12530:
    case 12533:
    case 12535:
    case 12542:
    case 12544:
    case 12547:
    case 12549:
    case 12552:
    case 12554:
    case 12557:
    case 12559:
    case 12562:
    case 12564:
    case 12567:
    case 12569:
    case 12572:
    case 12574:
    case 12577:
    case 12579:
    case 12586:
    case 12588:
    case 12591:
    case 12593:
    case 12596:
    case 12598:
    case 12601:
    case 12603:
    case 12606:
    case 12608:
    case 12611:
    case 12613:
    case 12616:
    case 12618:
    case 12621:
    case 12623:
    case 12630:
    case 12632:
    case 12635:
    case 12637:
    case 12640:
    case 12642:
    case 12645:
    case 12647:
    case 12650:
    case 12652:
    case 12655:
    case 12657:
    case 12660:
    case 12662:
    case 12665:
    case 12667:
    case 12694:
    case 12696:
    case 12699:
    case 12701:
    case 12704:
    case 12706:
    case 12709:
    case 12711:
    case 12714:
    case 12716:
    case 12719:
    case 12721:
    case 12724:
    case 12726:
    case 12729:
    case 12731:
    case 12738:
    case 12740:
    case 12743:
    case 12745:
    case 12748:
    case 12750:
    case 12753:
    case 12755:
    case 12758:
    case 12760:
    case 12763:
    case 12765:
    case 12768:
    case 12770:
    case 12773:
    case 12775:
    case 12782:
    case 12784:
    case 12787:
    case 12789:
    case 12792:
    case 12794:
    case 12797:
    case 12799:
    case 12802:
    case 12804:
    case 12807:
    case 12809:
    case 12812:
    case 12814:
    case 12817:
    case 12819:
    case 12826:
    case 12828:
    case 12831:
    case 12833:
    case 12836:
    case 12838:
    case 12841:
    case 12843:
    case 12846:
    case 12848:
    case 12851:
    case 12853:
    case 12856:
    case 12858:
    case 12861:
    case 12863:
      uint64_t v46 = *((void *)a2 + 2);
      int v47 = *(unsigned __int8 *)(v46 + 144);
      if (v47 == 1)
      {
        LOBYTE(v48) = sub_1CBC796AC(a1, v46 + 144, *(void *)(a4 + 192), 0);
        uint64_t v46 = *((void *)a2 + 2);
      }
      else if (v47 == 2)
      {
        int v48 = *(_DWORD *)(v46 + 152);
      }
      else
      {
        uint64_t v113 = *(void *)(v46 + 152);
        if (*(unsigned char *)v113 == 4) {
          int v48 = *(_DWORD *)(*(void *)(v113 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v48) = 0;
        }
      }
      int v233 = *(unsigned __int8 *)(v46 + 192);
      if (v233 == 1)
      {
        unint64_t v234 = sub_1CBC796AC(a1, v46 + 192, *(void *)(a4 + 192), 0);
        uint64_t v46 = *((void *)a2 + 2);
      }
      else if (v233 == 2)
      {
        unint64_t v234 = *(unsigned int *)(v46 + 200);
      }
      else
      {
        uint64_t v235 = *(void *)(v46 + 200);
        if (*(unsigned char *)v235 == 4) {
          unint64_t v234 = *(_DWORD *)(*(void *)(v235 + 24) + 16) | 0x2000u;
        }
        else {
          unint64_t v234 = 0;
        }
      }
      int v236 = *(unsigned __int8 *)(v46 + 224);
      if (v236 == 1)
      {
        LOBYTE(v237) = sub_1CBC796AC(a1, v46 + 224, *(void *)(a4 + 192), 0);
        uint64_t v46 = *((void *)a2 + 2);
      }
      else if (v236 == 2)
      {
        int v237 = *(_DWORD *)(v46 + 232);
      }
      else
      {
        uint64_t v238 = *(void *)(v46 + 232);
        if (*(unsigned char *)v238 == 4) {
          int v237 = *(_DWORD *)(*(void *)(v238 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v237) = 0;
        }
      }
      uint64_t v239 = v48 & 1;
      int v240 = *(unsigned __int8 *)(v46 + 160);
      if (v240 == 1)
      {
        LOBYTE(v241) = sub_1CBC796AC(a1, v46 + 160, *(void *)(a4 + 192), 0);
        uint64_t v46 = *((void *)a2 + 2);
      }
      else if (v240 == 2)
      {
        int v241 = *(_DWORD *)(v46 + 168);
      }
      else
      {
        uint64_t v242 = *(void *)(v46 + 168);
        if (*(unsigned char *)v242 == 4) {
          int v241 = *(_DWORD *)(*(void *)(v242 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v241) = 0;
        }
      }
      int v243 = *(unsigned __int8 *)(v46 + 176);
      uint64_t v1376 = a4;
      if (v243 == 1)
      {
        char v1360 = sub_1CBC796AC(a1, v46 + 176, *(void *)(a4 + 192), 0);
        uint64_t v46 = *((void *)a2 + 2);
        goto LABEL_323;
      }
      if (v243 == 2)
      {
        int v244 = *(_DWORD *)(v46 + 184);
LABEL_321:
        char v1360 = v244;
        goto LABEL_323;
      }
      uint64_t v245 = *(void *)(v46 + 184);
      if (*(unsigned char *)v245 == 4)
      {
        int v244 = *(_DWORD *)(*(void *)(v245 + 24) + 16) | 0x2000;
        goto LABEL_321;
      }
      char v1360 = 0;
LABEL_323:
      uint64_t v246 = v237 & 0xF;
      int v247 = *(unsigned __int8 *)(v46 + 208);
      if (v247 == 1)
      {
        int v248 = sub_1CBC796AC(a1, v46 + 208, *(void *)(v1376 + 192), 0);
        uint64_t v46 = *((void *)a2 + 2);
      }
      else if (v247 == 2)
      {
        int v248 = *(_DWORD *)(v46 + 216);
      }
      else
      {
        uint64_t v249 = *(void *)(v46 + 216);
        if (*(unsigned char *)v249 == 4) {
          int v248 = *(_DWORD *)(*(void *)(v249 + 24) + 16) | 0x2000;
        }
        else {
          int v248 = 0;
        }
      }
      unint64_t v250 = v234 >> 1;
      unint64_t v251 = v239 & 0xFFFFFFFFEFFFFFFFLL | ((v234 & 1) << 28);
      int v252 = *(unsigned __int8 *)(v46 + 240);
      if (v252 == 1)
      {
        LOBYTE(v253) = sub_1CBC796AC(a1, v46 + 240, *(void *)(v1376 + 192), 0);
        uint64_t v46 = *((void *)a2 + 2);
      }
      else if (v252 == 2)
      {
        int v253 = *(_DWORD *)(v46 + 248);
      }
      else
      {
        uint64_t v254 = *(void *)(v46 + 248);
        if (*(unsigned char *)v254 == 4) {
          int v253 = *(_DWORD *)(*(void *)(v254 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v253) = 0;
        }
      }
      unint64_t v255 = v251 & 0xFFFFFFFFFFF7FFFFLL | ((v250 & 1) << 19);
      int v256 = *(unsigned __int8 *)(v46 + 256);
      uint64_t v1354 = (v241 & 7) << 9;
      if (v256 == 1)
      {
        LOBYTE(v257) = sub_1CBC796AC(a1, v46 + 256, *(void *)(v1376 + 192), 0);
        uint64_t v46 = *((void *)a2 + 2);
      }
      else if (v256 == 2)
      {
        int v257 = *(_DWORD *)(v46 + 264);
      }
      else
      {
        uint64_t v258 = *(void *)(v46 + 264);
        if (*(unsigned char *)v258 == 4) {
          int v257 = *(_DWORD *)(*(void *)(v258 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v257) = 0;
        }
      }
      unint64_t v259 = v255 | (v246 << 15);
      uint64_t v1361 = (v1360 & 7) << 12;
      uint64_t v260 = (v253 & 3) << 26;
      uint64_t v261 = (v257 & 1) << 23;
      int v262 = *(unsigned __int8 *)(v46 + 272);
      if (v262 == 1)
      {
        LOBYTE(v263) = sub_1CBC796AC(a1, v46 + 272, *(void *)(v1376 + 192), 0);
        uint64_t v46 = *((void *)a2 + 2);
      }
      else if (v262 == 2)
      {
        int v263 = *(_DWORD *)(v46 + 280);
      }
      else
      {
        uint64_t v264 = *(void *)(v46 + 280);
        if (*(unsigned char *)v264 == 4) {
          int v263 = *(_DWORD *)(*(void *)(v264 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v263) = 0;
        }
      }
      uint64_t v265 = v259 | (8 * v246);
      uint64_t v266 = (v263 & 1) << 24;
      int v267 = *(unsigned __int8 *)(v46 + 288);
      if (v267 == 1)
      {
        uint64_t v268 = a1;
        LOBYTE(v269) = sub_1CBC796AC(a1, v46 + 288, *(void *)(v1376 + 192), 0);
        uint64_t v46 = *((void *)a2 + 2);
      }
      else if (v267 == 2)
      {
        uint64_t v268 = a1;
        int v269 = *(_DWORD *)(v46 + 296);
      }
      else
      {
        uint64_t v270 = *(void *)(v46 + 296);
        uint64_t v268 = a1;
        if (*(unsigned char *)v270 == 4) {
          int v269 = *(_DWORD *)(*(void *)(v270 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v269) = 0;
        }
      }
      uint64_t v271 = v265 | v1354;
      unint64_t v272 = (unint64_t)(v248 & 3) << 21;
      uint64_t v273 = (v248 << 18) & 0x100000;
      uint64_t v274 = (v269 & 1) << 25;
      int v275 = *(unsigned __int8 *)(v46 + 304);
      if (v275 == 1)
      {
        uint64_t v277 = v46 + 304;
        goto LABEL_877;
      }
      if (v275 == 2)
      {
        int v276 = *(_DWORD *)(v46 + 312);
        goto LABEL_882;
      }
      uint64_t v278 = *(void *)(v46 + 312);
      goto LABEL_879;
    case 12501:
    case 12511:
    case 12521:
    case 12531:
    case 12545:
    case 12555:
    case 12565:
    case 12575:
    case 12589:
    case 12599:
    case 12609:
    case 12619:
    case 12633:
    case 12643:
    case 12653:
    case 12663:
    case 12697:
    case 12707:
    case 12717:
    case 12727:
    case 12741:
    case 12751:
    case 12761:
    case 12771:
    case 12785:
    case 12795:
    case 12805:
    case 12815:
    case 12829:
    case 12839:
    case 12849:
    case 12859:
      uint64_t v145 = *((void *)a2 + 2);
      int v146 = *(unsigned __int8 *)(v145 + 112);
      if (v146 == 1)
      {
        LOBYTE(v147) = sub_1CBC796AC(a1, v145 + 112, *(void *)(a4 + 192), 0);
        uint64_t v145 = *((void *)a2 + 2);
      }
      else if (v146 == 2)
      {
        int v147 = *(_DWORD *)(v145 + 120);
      }
      else
      {
        uint64_t v355 = *(void *)(v145 + 120);
        if (*(unsigned char *)v355 == 4) {
          int v147 = *(_DWORD *)(*(void *)(v355 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v147) = 0;
        }
      }
      int v541 = *(unsigned __int8 *)(v145 + 160);
      if (v541 == 1)
      {
        unint64_t v542 = sub_1CBC796AC(a1, v145 + 160, *(void *)(a4 + 192), 0);
        uint64_t v145 = *((void *)a2 + 2);
      }
      else if (v541 == 2)
      {
        unint64_t v542 = *(unsigned int *)(v145 + 168);
      }
      else
      {
        uint64_t v543 = *(void *)(v145 + 168);
        if (*(unsigned char *)v543 == 4) {
          unint64_t v542 = *(_DWORD *)(*(void *)(v543 + 24) + 16) | 0x2000u;
        }
        else {
          unint64_t v542 = 0;
        }
      }
      int v544 = *(unsigned __int8 *)(v145 + 192);
      if (v544 == 1)
      {
        LOBYTE(v545) = sub_1CBC796AC(a1, v145 + 192, *(void *)(a4 + 192), 0);
        uint64_t v145 = *((void *)a2 + 2);
      }
      else if (v544 == 2)
      {
        int v545 = *(_DWORD *)(v145 + 200);
      }
      else
      {
        uint64_t v546 = *(void *)(v145 + 200);
        if (*(unsigned char *)v546 == 4) {
          int v545 = *(_DWORD *)(*(void *)(v546 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v545) = 0;
        }
      }
      int v547 = *(unsigned __int8 *)(v145 + 128);
      if (v547 == 1)
      {
        LOBYTE(v548) = sub_1CBC796AC(a1, v145 + 128, *(void *)(a4 + 192), 0);
        uint64_t v145 = *((void *)a2 + 2);
      }
      else if (v547 == 2)
      {
        int v548 = *(_DWORD *)(v145 + 136);
      }
      else
      {
        uint64_t v549 = *(void *)(v145 + 136);
        if (*(unsigned char *)v549 == 4) {
          int v548 = *(_DWORD *)(*(void *)(v549 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v548) = 0;
        }
      }
      int v550 = *(unsigned __int8 *)(v145 + 144);
      uint64_t v1376 = a4;
      if (v550 == 1)
      {
        char v1362 = sub_1CBC796AC(a1, v145 + 144, *(void *)(a4 + 192), 0);
        uint64_t v145 = *((void *)a2 + 2);
        goto LABEL_837;
      }
      if (v550 == 2)
      {
        int v551 = *(_DWORD *)(v145 + 152);
LABEL_835:
        char v1362 = v551;
        goto LABEL_837;
      }
      uint64_t v552 = *(void *)(v145 + 152);
      if (*(unsigned char *)v552 == 4)
      {
        int v551 = *(_DWORD *)(*(void *)(v552 + 24) + 16) | 0x2000;
        goto LABEL_835;
      }
      char v1362 = 0;
LABEL_837:
      uint64_t v553 = v545 & 0xF;
      int v554 = *(unsigned __int8 *)(v145 + 176);
      if (v554 == 1)
      {
        int v555 = sub_1CBC796AC(a1, v145 + 176, *(void *)(v1376 + 192), 0);
        uint64_t v145 = *((void *)a2 + 2);
      }
      else if (v554 == 2)
      {
        int v555 = *(_DWORD *)(v145 + 184);
      }
      else
      {
        uint64_t v556 = *(void *)(v145 + 184);
        if (*(unsigned char *)v556 == 4) {
          int v555 = *(_DWORD *)(*(void *)(v556 + 24) + 16) | 0x2000;
        }
        else {
          int v555 = 0;
        }
      }
      unint64_t v557 = v542 >> 1;
      unint64_t v558 = v147 & 1 | ((v542 & 1) << 28);
      int v559 = *(unsigned __int8 *)(v145 + 208);
      if (v559 == 1)
      {
        LOBYTE(v560) = sub_1CBC796AC(a1, v145 + 208, *(void *)(v1376 + 192), 0);
        uint64_t v145 = *((void *)a2 + 2);
      }
      else if (v559 == 2)
      {
        int v560 = *(_DWORD *)(v145 + 216);
      }
      else
      {
        uint64_t v561 = *(void *)(v145 + 216);
        if (*(unsigned char *)v561 == 4) {
          int v560 = *(_DWORD *)(*(void *)(v561 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v560) = 0;
        }
      }
      unint64_t v562 = v558 & 0xFFFFFFFFFFF7FFFFLL | ((v557 & 1) << 19);
      int v563 = *(unsigned __int8 *)(v145 + 224);
      uint64_t v1355 = (v548 & 7) << 9;
      if (v563 == 1)
      {
        LOBYTE(v564) = sub_1CBC796AC(a1, v145 + 224, *(void *)(v1376 + 192), 0);
        uint64_t v145 = *((void *)a2 + 2);
        goto LABEL_855;
      }
      if (v563 == 2)
      {
        int v564 = *(_DWORD *)(v145 + 232);
LABEL_855:
        char v565 = v1362;
        goto LABEL_856;
      }
      uint64_t v571 = *(void *)(v145 + 232);
      char v565 = v1362;
      if (*(unsigned char *)v571 == 4) {
        int v564 = *(_DWORD *)(*(void *)(v571 + 24) + 16) | 0x2000;
      }
      else {
        LOBYTE(v564) = 0;
      }
LABEL_856:
      unint64_t v566 = v562 | (v553 << 15);
      uint64_t v1361 = (v565 & 7) << 12;
      char v567 = v555;
      int v568 = v555 << 18;
      uint64_t v260 = (v560 & 3) << 26;
      uint64_t v261 = (v564 & 1) << 23;
      int v569 = *(unsigned __int8 *)(v145 + 240);
      if (v569 == 1)
      {
        LOBYTE(v570) = sub_1CBC796AC(a1, v145 + 240, *(void *)(v1376 + 192), 0);
        uint64_t v145 = *((void *)a2 + 2);
      }
      else if (v569 == 2)
      {
        int v570 = *(_DWORD *)(v145 + 248);
      }
      else
      {
        uint64_t v572 = *(void *)(v145 + 248);
        if (*(unsigned char *)v572 == 4) {
          int v570 = *(_DWORD *)(*(void *)(v572 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v570) = 0;
        }
      }
      uint64_t v573 = v566 | (8 * v553);
      uint64_t v266 = (v570 & 1) << 24;
      int v574 = *(unsigned __int8 *)(v145 + 256);
      if (v574 == 1)
      {
        uint64_t v268 = a1;
        LOBYTE(v575) = sub_1CBC796AC(a1, v145 + 256, *(void *)(v1376 + 192), 0);
        uint64_t v145 = *((void *)a2 + 2);
      }
      else if (v574 == 2)
      {
        uint64_t v268 = a1;
        int v575 = *(_DWORD *)(v145 + 264);
      }
      else
      {
        uint64_t v576 = *(void *)(v145 + 264);
        uint64_t v268 = a1;
        if (*(unsigned char *)v576 == 4) {
          int v575 = *(_DWORD *)(*(void *)(v576 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v575) = 0;
        }
      }
      uint64_t v271 = v573 | v1355;
      unint64_t v272 = (unint64_t)(v567 & 3) << 21;
      uint64_t v273 = *(void *)&v568 & 0x100000;
      uint64_t v274 = (v575 & 1) << 25;
      int v577 = *(unsigned __int8 *)(v145 + 272);
      if (v577 == 1)
      {
        uint64_t v277 = v145 + 272;
LABEL_877:
        LOBYTE(v276) = sub_1CBC796AC(v268, v277, *(void *)(v1376 + 192), 0);
      }
      else if (v577 == 2)
      {
        int v276 = *(_DWORD *)(v145 + 280);
      }
      else
      {
        uint64_t v278 = *(void *)(v145 + 280);
LABEL_879:
        if (*(unsigned char *)v278 == 4) {
          int v276 = *(_DWORD *)(*(void *)(v278 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v276) = 0;
        }
      }
LABEL_882:
      uint64_t v578 = (v276 & 1) << 29;
      unint64_t v391 = v271 | v1361;
      unint64_t v579 = v272 | v273 | v260 | v261 | v266 | v274;
LABEL_1106:
      uint64_t v132 = v579 | v578;
LABEL_1107:
      v8 |= v391 | v132;
      return v8;
    case 12868:
    case 12870:
      uint64_t v1043 = *((void *)a2 + 2);
      int v1044 = *(unsigned __int8 *)(v1043 + 48);
      if (v1044 == 1)
      {
        uint64_t v1045 = a4;
        uint64_t v1046 = a1;
        LOBYTE(v1047) = sub_1CBC796AC(a1, v1043 + 48, *(void *)(a4 + 192), 0);
        uint64_t v1043 = *((void *)a2 + 2);
      }
      else
      {
        uint64_t v1045 = a4;
        uint64_t v1046 = a1;
        if (v1044 == 2)
        {
          int v1047 = *(_DWORD *)(v1043 + 56);
        }
        else
        {
          uint64_t v1156 = *(void *)(v1043 + 56);
          if (*(unsigned char *)v1156 == 4) {
            int v1047 = *(_DWORD *)(*(void *)(v1156 + 24) + 16) | 0x2000;
          }
          else {
            LOBYTE(v1047) = 0;
          }
        }
      }
      int v1212 = (v1047 & 3) << 13;
      int v1213 = *(unsigned __int8 *)(v1043 + 64);
      if (v1213 == 1)
      {
        LOBYTE(v1214) = sub_1CBC796AC(v1046, v1043 + 64, *(void *)(v1045 + 192), 0);
        uint64_t v1043 = *((void *)a2 + 2);
      }
      else if (v1213 == 2)
      {
        int v1214 = *(_DWORD *)(v1043 + 72);
      }
      else
      {
        uint64_t v1215 = *(void *)(v1043 + 72);
        if (*(unsigned char *)v1215 == 4) {
          int v1214 = *(_DWORD *)(*(void *)(v1215 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1214) = 0;
        }
      }
      int v1216 = ((v1214 & 3) << 11) | v1212;
      int v1217 = *(unsigned __int8 *)(v1043 + 80);
      if (v1217 == 1)
      {
        LOBYTE(v1218) = sub_1CBC796AC(v1046, v1043 + 80, *(void *)(v1045 + 192), 0);
        uint64_t v1043 = *((void *)a2 + 2);
      }
      else if (v1217 == 2)
      {
        int v1218 = *(_DWORD *)(v1043 + 88);
      }
      else
      {
        uint64_t v1219 = *(void *)(v1043 + 88);
        if (*(unsigned char *)v1219 == 4) {
          int v1218 = *(_DWORD *)(*(void *)(v1219 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1218) = 0;
        }
      }
      unsigned int v1220 = v1216 & 0xFFFDFFFF | ((v1218 & 1) << 17);
      int v1221 = *(unsigned __int8 *)(v1043 + 96);
      if (v1221 == 1)
      {
        LOBYTE(v1222) = sub_1CBC796AC(v1046, v1043 + 96, *(void *)(v1045 + 192), 0);
        uint64_t v1043 = *((void *)a2 + 2);
      }
      else if (v1221 == 2)
      {
        int v1222 = *(_DWORD *)(v1043 + 104);
      }
      else
      {
        uint64_t v1223 = *(void *)(v1043 + 104);
        if (*(unsigned char *)v1223 == 4) {
          int v1222 = *(_DWORD *)(*(void *)(v1223 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1222) = 0;
        }
      }
      int v1224 = v1220 | ((v1222 & 1) << 10);
      int v1225 = *(unsigned __int8 *)(v1043 + 112);
      if (v1225 == 1)
      {
        LOBYTE(v1226) = sub_1CBC796AC(v1046, v1043 + 112, *(void *)(v1045 + 192), 0);
        uint64_t v1043 = *((void *)a2 + 2);
      }
      else if (v1225 == 2)
      {
        int v1226 = *(_DWORD *)(v1043 + 120);
      }
      else
      {
        uint64_t v1227 = *(void *)(v1043 + 120);
        if (*(unsigned char *)v1227 == 4) {
          int v1226 = *(_DWORD *)(*(void *)(v1227 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1226) = 0;
        }
      }
      int v1228 = v1224 | ((v1226 & 1) << 9);
      int v1229 = *(unsigned __int8 *)(v1043 + 128);
      if (v1229 == 1)
      {
        LOBYTE(v1230) = sub_1CBC796AC(v1046, v1043 + 128, *(void *)(v1045 + 192), 0);
        uint64_t v1043 = *((void *)a2 + 2);
      }
      else if (v1229 == 2)
      {
        int v1230 = *(_DWORD *)(v1043 + 136);
      }
      else
      {
        uint64_t v1231 = *(void *)(v1043 + 136);
        if (*(unsigned char *)v1231 == 4) {
          int v1230 = *(_DWORD *)(*(void *)(v1231 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1230) = 0;
        }
      }
      int v1232 = v1228 | ((v1230 & 1) << 8);
      int v1233 = *(unsigned __int8 *)(v1043 + 144);
      if (v1233 == 1)
      {
        LOBYTE(v1234) = sub_1CBC796AC(v1046, v1043 + 144, *(void *)(v1045 + 192), 0);
        uint64_t v1043 = *((void *)a2 + 2);
      }
      else if (v1233 == 2)
      {
        int v1234 = *(_DWORD *)(v1043 + 152);
      }
      else
      {
        uint64_t v1235 = *(void *)(v1043 + 152);
        if (*(unsigned char *)v1235 == 4) {
          int v1234 = *(_DWORD *)(*(void *)(v1235 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1234) = 0;
        }
      }
      int v1236 = v1232 | ((v1234 & 1) << 7);
      int v1237 = *(unsigned __int8 *)(v1043 + 160);
      if (v1237 == 1)
      {
        LOBYTE(v1238) = sub_1CBC796AC(v1046, v1043 + 160, *(void *)(v1045 + 192), 0);
        uint64_t v1043 = *((void *)a2 + 2);
      }
      else if (v1237 == 2)
      {
        int v1238 = *(_DWORD *)(v1043 + 168);
      }
      else
      {
        uint64_t v1239 = *(void *)(v1043 + 168);
        if (*(unsigned char *)v1239 == 4) {
          int v1238 = *(_DWORD *)(*(void *)(v1239 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1238) = 0;
        }
      }
      int v1240 = v1236 | ((v1238 & 1) << 6);
      int v1241 = *(unsigned __int8 *)(v1043 + 176);
      if (v1241 == 1)
      {
        LOBYTE(v1242) = sub_1CBC796AC(v1046, v1043 + 176, *(void *)(v1045 + 192), 0);
        uint64_t v1043 = *((void *)a2 + 2);
      }
      else if (v1241 == 2)
      {
        int v1242 = *(_DWORD *)(v1043 + 184);
      }
      else
      {
        uint64_t v1243 = *(void *)(v1043 + 184);
        if (*(unsigned char *)v1243 == 4) {
          int v1242 = *(_DWORD *)(*(void *)(v1243 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1242) = 0;
        }
      }
      int v1244 = v1240 | (32 * (v1242 & 1));
      int v1245 = *(unsigned __int8 *)(v1043 + 192);
      if (v1245 == 1)
      {
        LOBYTE(v1246) = sub_1CBC796AC(v1046, v1043 + 192, *(void *)(v1045 + 192), 0);
        uint64_t v1043 = *((void *)a2 + 2);
      }
      else if (v1245 == 2)
      {
        int v1246 = *(_DWORD *)(v1043 + 200);
      }
      else
      {
        uint64_t v1247 = *(void *)(v1043 + 200);
        if (*(unsigned char *)v1247 == 4) {
          int v1246 = *(_DWORD *)(*(void *)(v1247 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1246) = 0;
        }
      }
      int v1248 = v1244 | (4 * (v1246 & 3));
      int v1249 = *(unsigned __int8 *)(v1043 + 208);
      if (v1249 == 1)
      {
        LOBYTE(v1250) = sub_1CBC796AC(v1046, v1043 + 208, *(void *)(v1045 + 192), 0);
        uint64_t v1043 = *((void *)a2 + 2);
      }
      else if (v1249 == 2)
      {
        int v1250 = *(_DWORD *)(v1043 + 216);
      }
      else
      {
        uint64_t v1251 = *(void *)(v1043 + 216);
        if (*(unsigned char *)v1251 == 4) {
          int v1250 = *(_DWORD *)(*(void *)(v1251 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1250) = 0;
        }
      }
      unsigned int v482 = v1248 & 0xFFE7FFFF | ((v1250 & 3) << 19);
      uint64_t v483 = v1043 + 224;
      int v1252 = *(unsigned __int8 *)(v1043 + 224);
      if (v1252 == 1)
      {
        uint64_t v528 = *(void *)(v1045 + 192);
        uint64_t v529 = v1046;
LABEL_777:
        LOBYTE(v485) = sub_1CBC796AC(v529, v483, v528, 0);
      }
      else if (v1252 == 2)
      {
        int v485 = *(_DWORD *)(v1043 + 232);
      }
      else
      {
        uint64_t v486 = *(void *)(v1043 + 232);
LABEL_779:
        if (*(unsigned char *)v486 == 4) {
          int v485 = *(_DWORD *)(*(void *)(v486 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v485) = 0;
        }
      }
LABEL_782:
      uint64_t v530 = v482 | v485 & 3;
LABEL_1351:
      v8 |= v530;
      return v8;
    case 13213:
    case 13214:
    case 13215:
    case 13216:
    case 13231:
    case 13232:
    case 13233:
    case 13234:
    case 13277:
    case 13278:
    case 13279:
    case 13280:
    case 13330:
    case 13331:
    case 13332:
    case 13333:
    case 13341:
    case 13342:
    case 13343:
    case 13344:
    case 13352:
    case 13353:
    case 13354:
    case 13355:
      char v180 = (unsigned __int8 *)*((void *)a2 + 2);
      int v181 = *v180;
      if (v181 == 1)
      {
        int v182 = sub_1CBC796AC(a1, (uint64_t)v180, *(void *)(a4 + 192), 0);
        char v180 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v181 == 2)
      {
        int v182 = *((_DWORD *)v180 + 2);
      }
      else
      {
        uint64_t v393 = *((void *)v180 + 1);
        if (*(unsigned char *)v393 == 4) {
          int v182 = *(_DWORD *)(*(void *)(v393 + 24) + 16) | 0x2000;
        }
        else {
          int v182 = 0;
        }
      }
      if (v180[16] == 1)
      {
        unint64_t v769 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *((unsigned int *)v180 + 6));
      }
      else
      {
        uint64_t v770 = *((void *)v180 + 3);
        if (v770) {
          uint64_t v771 = v770 - 8;
        }
        else {
          uint64_t v771 = 0;
        }
        unint64_t v769 = (*(void *)(*(void *)(v771 + 32) + 16) / 2) | 0x2000;
      }
      int v772 = v180[32];
      if (v772 == 1)
      {
        int v773 = sub_1CBC796AC(a1, (uint64_t)(v180 + 32), *(void *)(a4 + 192), 0);
        char v180 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v772 == 2)
      {
        int v773 = *((_DWORD *)v180 + 10);
      }
      else
      {
        uint64_t v774 = *((void *)v180 + 5);
        if (*(unsigned char *)v774 == 4) {
          int v773 = *(_DWORD *)(*(void *)(v774 + 24) + 16) | 0x2000;
        }
        else {
          int v773 = 0;
        }
      }
      int v775 = v180[48];
      if (v775 == 1)
      {
        LOBYTE(v776) = sub_1CBC796AC(a1, (uint64_t)(v180 + 48), *(void *)(a4 + 192), 0);
        char v180 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v775 == 2)
      {
        int v776 = *((_DWORD *)v180 + 14);
      }
      else
      {
        uint64_t v777 = *((void *)v180 + 7);
        if (*(unsigned char *)v777 == 4) {
          int v776 = *(_DWORD *)(*(void *)(v777 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v776) = 0;
        }
      }
      int v778 = v769 << 10;
      uint64_t v1365 = (v773 << 24);
      uint64_t v1356 = 2 * (v776 & 3u);
      int v779 = v180[64];
      uint64_t v1379 = a4;
      if (v779 == 1)
      {
        LOBYTE(v780) = sub_1CBC796AC(a1, (uint64_t)(v180 + 64), *(void *)(a4 + 192), 0);
        char v180 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v779 == 2)
      {
        int v780 = *((_DWORD *)v180 + 18);
      }
      else
      {
        uint64_t v781 = *((void *)v180 + 9);
        if (*(unsigned char *)v781 == 4) {
          int v780 = *(_DWORD *)(*(void *)(v781 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v780) = 0;
        }
      }
      unint64_t v782 = v769 >> 4;
      uint64_t v783 = 16 * (v780 & 1u);
      int v784 = v180[80];
      uint64_t v1370 = a1;
      if (v784 == 1)
      {
        uint64_t v786 = a1;
        uint64_t v787 = v783;
        LOBYTE(v785) = sub_1CBC796AC(v786, (uint64_t)(v180 + 80), *(void *)(v1379 + 192), 0);
        uint64_t v783 = v787;
        char v180 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v784 == 2)
      {
        int v785 = *((_DWORD *)v180 + 22);
      }
      else
      {
        uint64_t v788 = *((void *)v180 + 11);
        if (*(unsigned char *)v788 == 4) {
          int v785 = *(_DWORD *)(*(void *)(v788 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v785) = 0;
        }
      }
      unint64_t v789 = (unint64_t)(v182 & 0x3F) << 40;
      uint64_t v790 = (v182 << 14) & 0xF00000;
      uint64_t v791 = (v769 << 44) & 0x200000000000000;
      unint64_t v792 = (v769 & 0x7F) << 33;
      uint64_t v793 = *(void *)&v778 & 0xE0000;
      uint64_t v794 = v782 & 0xC0;
      uint64_t v795 = (unsigned __int16)v773 & 0xFF00;
      uint64_t v796 = 8 * (v785 & 1u);
      int v797 = v180[96];
      uint64_t v798 = (*((void *)v180 + 15) & 3) << 61;
      if (v797 == 1)
      {
        uint64_t v1352 = v793;
        uint64_t v800 = v783;
        LOBYTE(v799) = sub_1CBC796AC(v1370, (uint64_t)(v180 + 96), *(void *)(v1379 + 192), 0);
        uint64_t v793 = v1352;
        uint64_t v783 = v800;
      }
      else if (v797 == 2)
      {
        int v799 = *((_DWORD *)v180 + 26);
      }
      else
      {
        uint64_t v801 = *((void *)v180 + 13);
        if (*(unsigned char *)v801 == 4) {
          int v799 = *(_DWORD *)(*(void *)(v801 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v799) = 0;
        }
      }
      uint64_t v802 = v799 & 1;
      unint64_t v803 = v789 | v790 | v791 | v792 | v793 | v794 | v795;
      uint64_t v804 = v1365 | v1356 | v783 | v796;
LABEL_1321:
      unint64_t v87 = v803 | v804 | v798 | (v802 << 56);
LABEL_110:
      v8 |= v87;
      return v8;
    case 13425:
      v1083 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v1084 = *((void *)a2 + 2);
      int v1087 = *(unsigned __int8 *)(v1084 + 16);
      uint64_t v1085 = v1084 + 16;
      int v1086 = v1087;
      if (v1087 == 1)
      {
        int v1088 = sub_1CBC796AC(a1, v1085, *(void *)(a4 + 192), 0);
        v1083 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1086 == 2)
      {
        int v1088 = *((_DWORD *)v1083 + 6);
      }
      else
      {
        uint64_t v1163 = *((void *)v1083 + 3);
        if (*(unsigned char *)v1163 == 4) {
          int v1088 = *(_DWORD *)(*(void *)(v1163 + 24) + 16) | 0x2000;
        }
        else {
          int v1088 = 0;
        }
      }
      uint64_t v1296 = (v1088 << 9) & 0x60000;
      unint64_t v1297 = (unint64_t)v1088 << 8;
      int v1298 = *v1083;
      if (v1298 == 1)
      {
        unint64_t v1299 = sub_1CBC796AC(a1, (uint64_t)v1083, *(void *)(a4 + 192), 0);
      }
      else if (v1298 == 2)
      {
        unint64_t v1299 = *((unsigned int *)v1083 + 2);
      }
      else
      {
        uint64_t v1300 = *((void *)v1083 + 1);
        if (*(unsigned char *)v1300 == 4) {
          unint64_t v1299 = *(_DWORD *)(*(void *)(v1300 + 24) + 16) | 0x2000u;
        }
        else {
          unint64_t v1299 = 0;
        }
      }
      unint64_t v1301 = (v1296 | v1297) & 0xFFFFFFF9FFFFFFFFLL | (((v1299 >> 8) & 3) << 33);
      unint64_t v1302 = (v1299 << 24) | v8;
      return v1301 | v1302;
    case 13426:
      v1130 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v1131 = *((void *)a2 + 2);
      int v1134 = *(unsigned __int8 *)(v1131 + 16);
      uint64_t v1132 = v1131 + 16;
      int v1133 = v1134;
      if (v1134 == 1)
      {
        uint64_t v1135 = sub_1CBC796AC(a1, v1132, *(void *)(a4 + 192), 0);
        v1130 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1133 == 2)
      {
        uint64_t v1135 = *((unsigned int *)v1130 + 6);
      }
      else
      {
        uint64_t v1172 = *((void *)v1130 + 3);
        if (*(unsigned char *)v1172 == 4) {
          uint64_t v1135 = *(_DWORD *)(*(void *)(v1172 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v1135 = 0;
        }
      }
      uint64_t v1335 = (v1135 << 25) & 0x600000000;
      uint64_t v1336 = (v1135 << 24);
      int v1337 = *v1130;
      if (v1337 == 1)
      {
        int v1338 = sub_1CBC796AC(a1, (uint64_t)v1130, *(void *)(a4 + 192), 0);
      }
      else if (v1337 == 2)
      {
        int v1338 = *((_DWORD *)v1130 + 2);
      }
      else
      {
        uint64_t v1339 = *((void *)v1130 + 1);
        if (*(unsigned char *)v1339 == 4) {
          int v1338 = *(_DWORD *)(*(void *)(v1339 + 24) + 16) | 0x2000;
        }
        else {
          int v1338 = 0;
        }
      }
      uint64_t v1310 = (v1338 << 9) & 0x60000;
      unint64_t v1309 = (unint64_t)v1338 << 8;
      unint64_t v1301 = v1335 | v1336;
      goto LABEL_1990;
    case 13427:
      v1090 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v1091 = *((void *)v1090 + 5);
      uint64_t v1092 = *((void *)a2 + 2);
      int v1095 = *(unsigned __int8 *)(v1092 + 16);
      uint64_t v1093 = v1092 + 16;
      int v1094 = v1095;
      if (v1095 == 1)
      {
        int v1096 = sub_1CBC796AC(a1, v1093, *(void *)(a4 + 192), 0);
        v1090 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1094 == 2)
      {
        int v1096 = *((_DWORD *)v1090 + 6);
      }
      else
      {
        uint64_t v1164 = *((void *)v1090 + 3);
        if (*(unsigned char *)v1164 == 4) {
          int v1096 = *(_DWORD *)(*(void *)(v1164 + 24) + 16) | 0x2000;
        }
        else {
          int v1096 = 0;
        }
      }
      unint64_t v1303 = (unint64_t)(v1091 & 3) << 45;
      uint64_t v1304 = (v1096 << 9) & 0x60000;
      unint64_t v1305 = (unint64_t)v1096 << 8;
      int v1306 = *v1090;
      if (v1306 == 1)
      {
        uint64_t v1307 = sub_1CBC796AC(a1, (uint64_t)v1090, *(void *)(a4 + 192), 0);
      }
      else if (v1306 == 2)
      {
        uint64_t v1307 = *((unsigned int *)v1090 + 2);
      }
      else
      {
        uint64_t v1308 = *((void *)v1090 + 1);
        if (*(unsigned char *)v1308 == 4) {
          uint64_t v1307 = *(_DWORD *)(*(void *)(v1308 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v1307 = 0;
        }
      }
      unint64_t v1309 = (v1307 << 24);
      unint64_t v1301 = v1303 | v1304;
      uint64_t v1310 = v1305 | (v1307 << 25) & 0x600000000;
LABEL_1990:
      unint64_t v1302 = v1310 | v1309 | v8;
      return v1301 | v1302;
    case 13428:
      v1141 = (unsigned __int8 *)*((void *)a2 + 2);
      uint64_t v1142 = *((void *)v1141 + 5);
      uint64_t v1143 = *((void *)a2 + 2);
      int v1146 = *(unsigned __int8 *)(v1143 + 16);
      uint64_t v1144 = v1143 + 16;
      int v1145 = v1146;
      if (v1146 == 1)
      {
        uint64_t v1147 = sub_1CBC796AC(a1, v1144, *(void *)(a4 + 192), 0);
        v1141 = (unsigned __int8 *)*((void *)a2 + 2);
      }
      else if (v1145 == 2)
      {
        uint64_t v1147 = *((unsigned int *)v1141 + 6);
      }
      else
      {
        uint64_t v1194 = *((void *)v1141 + 3);
        if (*(unsigned char *)v1194 == 4) {
          uint64_t v1147 = *(_DWORD *)(*(void *)(v1194 + 24) + 16) | 0x2000u;
        }
        else {
          uint64_t v1147 = 0;
        }
      }
      unint64_t v1340 = (unint64_t)(v1142 & 3) << 45;
      uint64_t v1341 = (v1147 << 25) & 0x600000000;
      uint64_t v1342 = (v1147 << 24);
      int v1343 = *v1141;
      if (v1343 == 1)
      {
        int v1344 = sub_1CBC796AC(a1, (uint64_t)v1141, *(void *)(a4 + 192), 0);
      }
      else if (v1343 == 2)
      {
        int v1344 = *((_DWORD *)v1141 + 2);
      }
      else
      {
        uint64_t v1345 = *((void *)v1141 + 1);
        if (*(unsigned char *)v1345 == 4) {
          int v1344 = *(_DWORD *)(*(void *)(v1345 + 24) + 16) | 0x2000;
        }
        else {
          int v1344 = 0;
        }
      }
      uint64_t v349 = (unint64_t)v1344 << 8;
      uint64_t v861 = v1340 | v1341 | v1342 | (v1344 << 9) & 0x60000;
LABEL_1275:
      v8 |= v861 | v349;
      return v8;
    case 13430:
      v1119 = (unsigned __int8 *)*((void *)a2 + 2);
      int v1120 = *v1119;
      if (v1120 == 1)
      {
        LOBYTE(v1121) = sub_1CBC796AC(a1, (uint64_t)v1119, *(void *)(a4 + 192), 0);
      }
      else if (v1120 == 2)
      {
        int v1121 = *((_DWORD *)v1119 + 2);
      }
      else
      {
        uint64_t v1170 = *((void *)v1119 + 1);
        if (*(unsigned char *)v1170 == 4) {
          int v1121 = *(_DWORD *)(*(void *)(v1170 + 24) + 16) | 0x2000;
        }
        else {
          LOBYTE(v1121) = 0;
        }
      }
      uint64_t v530 = 2 * (v1121 & 1u);
      goto LABEL_1351;
    default:
      memset(v1394, 0, sizeof(v1394));
      DWORD2(v1386) = 0;
      char v1390 = 0;
      uint64_t v1391 = 0;
      v1393 = (llvm *)v1394;
      int v1392 = 0;
      *(void *)&long long v1386 = &unk_1F2646F30;
      uint64_t v1387 = 0;
      uint64_t v1388 = 0;
      uint64_t v1389 = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1386, "Not supported instr: ", 0x15uLL);
      llvm::MCInst::print(a2, (llvm::raw_ostream *)&v1386, 0);
      v1351 = v1393;
      if (*((char *)v1393 + 23) < 0) {
        v1351 = *(llvm **)v1393;
      }
      llvm::report_fatal_error(v1351, (const llvm::Twine *)1);
  }
}

__n128 sub_1CBC78DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(unsigned char *)v2 != 2)
  {
    unint64_t v3 = *(void *)(v2 + 8);
    unint64_t v4 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8500000000;
    unint64_t v46 = v4;
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    unint64_t v6 = *(void *)a2;
    if (v5 >= *(_DWORD *)(a2 + 12))
    {
      BOOL v39 = v6 + 24 * v5 > (unint64_t)&v45;
      if (v6 > (unint64_t)&v45 || !v39) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v7 = (__n128 *)(v6 + 24 * *(unsigned int *)(a2 + 8));
    __n128 v8 = v45;
    v7[1].n128_u64[0] = v46;
    *int v7 = v8;
    unsigned int v9 = *(_DWORD *)(a2 + 12);
    unsigned int v10 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v10;
    unint64_t v11 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8100000002;
    unint64_t v46 = v11;
    unint64_t v12 = *(void *)a2;
    if (v10 >= v9)
    {
      BOOL v40 = v12 + 24 * v10 > (unint64_t)&v45;
      if (v12 > (unint64_t)&v45 || !v40) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v13 = (__n128 *)(v12 + 24 * *(unsigned int *)(a2 + 8));
    __n128 v14 = v45;
    v13[1].n128_u64[0] = v46;
    *int v13 = v14;
    unsigned int v15 = *(_DWORD *)(a2 + 12);
    unsigned int v16 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v16;
    unint64_t v17 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8200000002;
    unint64_t v46 = v17;
    unint64_t v18 = *(void *)a2;
    if (v16 >= v15)
    {
      BOOL v41 = v18 + 24 * v16 > (unint64_t)&v45;
      if (v18 > (unint64_t)&v45 || !v41) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v19 = (__n128 *)(v18 + 24 * *(unsigned int *)(a2 + 8));
    __n128 v20 = v45;
    v19[1].n128_u64[0] = v46;
    *uint64_t v19 = v20;
    unsigned int v21 = *(_DWORD *)(a2 + 12);
    unsigned int v22 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v22;
    unint64_t v23 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8300000003;
    unint64_t v46 = v23;
    unint64_t v24 = *(void *)a2;
    if (v22 >= v21)
    {
      BOOL v42 = v24 + 24 * v22 > (unint64_t)&v45;
      if (v24 > (unint64_t)&v45 || !v42) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v25 = (__n128 *)(v24 + 24 * *(unsigned int *)(a2 + 8));
    __n128 v26 = v45;
    v25[1].n128_u64[0] = v46;
    *uint64_t v25 = v26;
    unsigned int v27 = *(_DWORD *)(a2 + 12);
    unsigned int v28 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v28;
    unint64_t v29 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8400000004;
    unint64_t v46 = v29;
    unint64_t v30 = *(void *)a2;
    if (v28 >= v27)
    {
      BOOL v43 = v30 + 24 * v28 > (unint64_t)&v45;
      if (v30 > (unint64_t)&v45 || !v43) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v31 = (__n128 *)(v30 + 24 * *(unsigned int *)(a2 + 8));
    __n128 v32 = v45;
    v31[1].n128_u64[0] = v46;
    *int v31 = v32;
    unsigned int v33 = *(_DWORD *)(a2 + 12);
    unsigned int v34 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v34;
    unint64_t v35 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8600000005;
    unint64_t v46 = v35;
    unint64_t v36 = *(void *)a2;
    if (v34 >= v33)
    {
      BOOL v44 = v36 + 24 * v34 > (unint64_t)&v45;
      if (v36 <= (unint64_t)&v45 && v44) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v37 = (__n128 *)(v36 + 24 * *(unsigned int *)(a2 + 8));
    __n128 result = v45;
    v37[1].n128_u64[0] = v46;
    *uint64_t v37 = result;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

__n128 sub_1CBC79234(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(unsigned char *)v2 != 2)
  {
    unint64_t v3 = *(void *)(v2 + 8);
    unint64_t v4 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8B00000000;
    unint64_t v46 = v4;
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    unint64_t v6 = *(void *)a2;
    if (v5 >= *(_DWORD *)(a2 + 12))
    {
      BOOL v39 = v6 + 24 * v5 > (unint64_t)&v45;
      if (v6 > (unint64_t)&v45 || !v39) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v7 = (__n128 *)(v6 + 24 * *(unsigned int *)(a2 + 8));
    __n128 v8 = v45;
    v7[1].n128_u64[0] = v46;
    *int v7 = v8;
    unsigned int v9 = *(_DWORD *)(a2 + 12);
    unsigned int v10 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v10;
    unint64_t v11 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8700000002;
    unint64_t v46 = v11;
    unint64_t v12 = *(void *)a2;
    if (v10 >= v9)
    {
      BOOL v40 = v12 + 24 * v10 > (unint64_t)&v45;
      if (v12 > (unint64_t)&v45 || !v40) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v13 = (__n128 *)(v12 + 24 * *(unsigned int *)(a2 + 8));
    __n128 v14 = v45;
    v13[1].n128_u64[0] = v46;
    *int v13 = v14;
    unsigned int v15 = *(_DWORD *)(a2 + 12);
    unsigned int v16 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v16;
    unint64_t v17 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8800000002;
    unint64_t v46 = v17;
    unint64_t v18 = *(void *)a2;
    if (v16 >= v15)
    {
      BOOL v41 = v18 + 24 * v16 > (unint64_t)&v45;
      if (v18 > (unint64_t)&v45 || !v41) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v19 = (__n128 *)(v18 + 24 * *(unsigned int *)(a2 + 8));
    __n128 v20 = v45;
    v19[1].n128_u64[0] = v46;
    *uint64_t v19 = v20;
    unsigned int v21 = *(_DWORD *)(a2 + 12);
    unsigned int v22 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v22;
    unint64_t v23 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8900000003;
    unint64_t v46 = v23;
    unint64_t v24 = *(void *)a2;
    if (v22 >= v21)
    {
      BOOL v42 = v24 + 24 * v22 > (unint64_t)&v45;
      if (v24 > (unint64_t)&v45 || !v42) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v25 = (__n128 *)(v24 + 24 * *(unsigned int *)(a2 + 8));
    __n128 v26 = v45;
    v25[1].n128_u64[0] = v46;
    *uint64_t v25 = v26;
    unsigned int v27 = *(_DWORD *)(a2 + 12);
    unsigned int v28 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v28;
    unint64_t v29 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8A00000004;
    unint64_t v46 = v29;
    unint64_t v30 = *(void *)a2;
    if (v28 >= v27)
    {
      BOOL v43 = v30 + 24 * v28 > (unint64_t)&v45;
      if (v30 > (unint64_t)&v45 || !v43) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v31 = (__n128 *)(v30 + 24 * *(unsigned int *)(a2 + 8));
    __n128 v32 = v45;
    v31[1].n128_u64[0] = v46;
    *int v31 = v32;
    unsigned int v33 = *(_DWORD *)(a2 + 12);
    unsigned int v34 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v34;
    unint64_t v35 = *(void *)(a1 + 8);
    v45.n128_u64[0] = v3;
    v45.n128_u64[1] = 0x8C00000005;
    unint64_t v46 = v35;
    unint64_t v36 = *(void *)a2;
    if (v34 >= v33)
    {
      BOOL v44 = v36 + 24 * v34 > (unint64_t)&v45;
      if (v36 <= (unint64_t)&v45 && v44) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v37 = (__n128 *)(v36 + 24 * *(unsigned int *)(a2 + 8));
    __n128 result = v45;
    v37[1].n128_u64[0] = v46;
    *uint64_t v37 = result;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_1CBC796AC(uint64_t a1, uint64_t a2, __int16 a3, unsigned __int8 a4)
{
  if (*(unsigned char *)a2 == 1)
  {
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 8));
    if (a3 < 0 && result <= 0x1FF) {
      llvm::report_fatal_error((llvm *)"Temp register used when temp registers were disallowed!", (const llvm::Twine *)1);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (v5) {
      uint64_t v6 = v5 - 8;
    }
    else {
      uint64_t v6 = 0;
    }
    unsigned int v7 = *(_DWORD *)(*(void *)(v6 + 32) + 16);
    if (((*(_DWORD *)(v6 + 24) == 4) & a4) != 0) {
      int v8 = 24576;
    }
    else {
      int v8 = 0x2000;
    }
    return v8 | v7;
  }
  return result;
}

void sub_1CBC79748()
{
}

void sub_1CBC797B4()
{
}

void sub_1CBC7980C()
{
}

void sub_1CBC79914()
{
}

void sub_1CBC79A04()
{
}

void sub_1CBC79A10()
{
}

void sub_1CBC79A24()
{
}

uint64_t sub_1CBC79A38()
{
  return 9;
}

char **sub_1CBC79A40(uint64_t a1, int a2)
{
  if (a2 >= 128) {
    return &(&off_1E6750698)[3 * (a2 - 128)];
  }
  else {
    return &(&off_1E684AC10)[3 * a2];
  }
}

BOOL sub_1CBC79CB0(uint64_t a1, unsigned int *a2)
{
  int v2 = *a2;
  return sub_1CBC79EE4(*a2) != v2;
}

BOOL sub_1CBC79CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 0;
  switch(*(_DWORD *)(a2 + 12))
  {
    case 0x82:
    case 0x86:
      BOOL v4 = a3 == (__int16)a3;
      goto LABEL_5;
    case 0x83:
    case 0x87:
      BOOL result = (unint64_t)(a3 - 0x800000) < 0xFFFFFFFFFF000000;
      break;
    case 0x84:
    case 0x88:
      return result;
    default:
      BOOL v4 = a3 == (char)a3;
LABEL_5:
      BOOL result = !v4;
      break;
  }
  return result;
}

uint64_t sub_1CBC79D54(uint64_t a1, unsigned int *a2)
{
  v13[32] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *a2;
  uint64_t result = sub_1CBC79EE4(*a2);
  if (result == v3)
  {
    unint64_t v11 = v13;
    long long v12 = xmmword_1CD96DBF0;
    sub_1CD430D60((uint64_t)v9, (uint64_t)&v11);
    llvm::MCInst::dump_pretty(a2, (llvm::raw_ostream *)v9, 0, " ", 1uLL, 0);
    sub_1CB8E509C((llvm::raw_ostream *)v9, "\n");
    uint64_t v6 = *v10;
    uint64_t v5 = v10[1];
    __int16 v8 = 1283;
    v7[0] = "unexpected instruction to relax: ";
    v7[2] = v6;
    v7[3] = v5;
    llvm::report_fatal_error((llvm *)v7, (const llvm::Twine *)1);
  }
  *a2 = result;
  return result;
}

uint64_t sub_1CBC79E48()
{
  return 2;
}

BOOL sub_1CBC79E50(int a1, llvm::raw_ostream *this, uint64_t a3)
{
  char v3 = a3;
  if (a3 && (a3 & 1) == 0)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v6 >= *((void *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 8);
      }
      else
      {
        *((void *)this + 4) = v6 + 1;
        *uint64_t v6 = 8;
      }
      unsigned int v7 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v7 >= *((void *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 0);
      }
      else
      {
        *((void *)this + 4) = v7 + 1;
        *unsigned int v7 = 0;
      }
      v5 -= 2;
    }
    while (v5);
  }
  return (v3 & 1) == 0;
}

uint64_t sub_1CBC79EE4(uint64_t result)
{
  switch((int)result)
  {
    case 527:
      uint64_t result = 529;
      break;
    case 528:
      uint64_t result = 530;
      break;
    case 529:
      uint64_t result = 531;
      break;
    case 530:
      uint64_t result = 532;
      break;
    case 533:
      uint64_t result = 527;
      break;
    case 534:
      uint64_t result = 528;
      break;
    case 535:
      uint64_t result = 537;
      break;
    case 536:
      uint64_t result = 538;
      break;
    case 537:
      uint64_t result = 539;
      break;
    case 538:
      uint64_t result = 540;
      break;
    case 541:
      uint64_t result = 535;
      break;
    case 542:
      uint64_t result = 536;
      break;
    case 543:
      uint64_t result = 545;
      break;
    case 544:
      uint64_t result = 546;
      break;
    case 545:
      uint64_t result = 547;
      break;
    case 546:
      uint64_t result = 548;
      break;
    case 549:
      uint64_t result = 543;
      break;
    case 550:
      uint64_t result = 544;
      break;
    case 551:
      uint64_t result = 553;
      break;
    case 552:
      uint64_t result = 554;
      break;
    case 553:
      uint64_t result = 555;
      break;
    case 554:
      uint64_t result = 556;
      break;
    case 557:
      uint64_t result = 551;
      break;
    case 558:
      uint64_t result = 552;
      break;
    case 559:
      uint64_t result = 561;
      break;
    case 560:
      uint64_t result = 562;
      break;
    case 561:
      uint64_t result = 563;
      break;
    case 562:
      uint64_t result = 564;
      break;
    case 565:
      uint64_t result = 559;
      break;
    case 566:
      uint64_t result = 560;
      break;
    case 567:
      uint64_t result = 569;
      break;
    case 568:
      uint64_t result = 570;
      break;
    case 569:
      uint64_t result = 571;
      break;
    case 570:
      uint64_t result = 572;
      break;
    case 573:
      uint64_t result = 567;
      break;
    case 574:
      uint64_t result = 568;
      break;
    case 609:
      uint64_t result = 611;
      break;
    case 610:
      uint64_t result = 612;
      break;
    case 611:
      uint64_t result = 613;
      break;
    case 612:
      uint64_t result = 614;
      break;
    case 615:
      uint64_t result = 609;
      break;
    case 616:
      uint64_t result = 610;
      break;
    case 617:
      uint64_t result = 619;
      break;
    case 618:
      uint64_t result = 620;
      break;
    case 619:
      uint64_t result = 621;
      break;
    case 620:
      uint64_t result = 622;
      break;
    case 623:
      uint64_t result = 617;
      break;
    case 624:
      uint64_t result = 618;
      break;
    case 625:
      uint64_t result = 627;
      break;
    case 626:
      uint64_t result = 628;
      break;
    case 627:
      uint64_t result = 629;
      break;
    case 628:
      uint64_t result = 630;
      break;
    case 631:
      uint64_t result = 625;
      break;
    case 632:
      uint64_t result = 626;
      break;
    case 633:
      uint64_t result = 635;
      break;
    case 634:
      uint64_t result = 636;
      break;
    case 635:
      uint64_t result = 637;
      break;
    case 636:
      uint64_t result = 638;
      break;
    case 639:
      uint64_t result = 633;
      break;
    case 640:
      uint64_t result = 634;
      break;
    case 641:
      uint64_t result = 643;
      break;
    case 642:
      uint64_t result = 644;
      break;
    case 643:
      uint64_t result = 645;
      break;
    case 644:
      uint64_t result = 646;
      break;
    case 647:
      uint64_t result = 641;
      break;
    case 648:
      uint64_t result = 642;
      break;
    case 649:
      uint64_t result = 651;
      break;
    case 650:
      uint64_t result = 652;
      break;
    case 651:
      uint64_t result = 653;
      break;
    case 652:
      uint64_t result = 654;
      break;
    case 655:
      uint64_t result = 649;
      break;
    case 656:
      uint64_t result = 650;
      break;
    case 657:
      uint64_t result = 659;
      break;
    case 658:
      uint64_t result = 660;
      break;
    case 659:
      uint64_t result = 661;
      break;
    case 660:
      uint64_t result = 662;
      break;
    case 663:
      uint64_t result = 657;
      break;
    case 664:
      uint64_t result = 658;
      break;
    case 665:
      uint64_t result = 667;
      break;
    case 666:
      uint64_t result = 668;
      break;
    case 667:
      uint64_t result = 669;
      break;
    case 668:
      uint64_t result = 670;
      break;
    case 671:
      uint64_t result = 665;
      break;
    case 672:
      uint64_t result = 666;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1CBC7A3F8(int a1, unsigned int a2)
{
  if ((a1 - 256) >> 1 > 0xFCE)
  {
    return -1;
  }
  else
  {
    switch(a1)
    {
      case 257:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 1232);
        break;
      case 258:
      case 259:
      case 267:
      case 268:
      case 314:
      case 315:
      case 319:
      case 320:
      case 335:
      case 356:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 352);
        break;
      case 260:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 528);
        break;
      case 261:
      case 270:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 1408);
        break;
      case 262:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 1936);
        break;
      case 263:
      case 264:
      case 265:
      case 266:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 2112);
        break;
      case 269:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 1056);
        break;
      case 271:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 704);
        break;
      case 272:
      case 273:
      case 274:
      case 275:
      case 276:
      case 277:
      case 286:
      case 287:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 2640);
        break;
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 2816);
        break;
      case 288:
      case 302:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 880);
        break;
      case 289:
      case 290:
      case 293:
      case 294:
      case 295:
      case 296:
      case 297:
      case 298:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 2464);
        break;
      case 291:
      case 292:
      case 299:
      case 300:
      case 301:
      case 304:
      case 305:
      case 306:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 2288);
        break;
      case 303:
      case 488:
      case 499:
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 575:
      case 576:
      case 789:
      case 790:
      case 791:
      case 793:
      case 2163:
      case 2426:
      case 2427:
      case 2428:
      case 2429:
      case 4672:
      case 4673:
      case 4674:
      case 4675:
      case 4676:
      case 4827:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2);
        break;
      case 313:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 1584);
        break;
      case 316:
      case 317:
      case 318:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 2992);
        break;
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 334:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 4576;
        goto LABEL_4;
      case 336:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 3520);
        break;
      case 337:
      case 489:
      case 490:
      case 4670:
      case 4671:
      case 8277:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 30448;
        goto LABEL_4;
      case 338:
      case 339:
      case 340:
      case 341:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 1760);
        break;
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 352:
      case 353:
      case 354:
      case 355:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 4752;
        goto LABEL_4;
      case 357:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 4048);
        break;
      case 358:
      case 359:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 30624;
        goto LABEL_4;
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 369:
      case 370:
      case 371:
      case 372:
      case 373:
      case 374:
      case 381:
      case 382:
      case 383:
      case 384:
      case 385:
      case 386:
      case 390:
      case 391:
      case 392:
      case 393:
      case 394:
      case 395:
      case 396:
      case 397:
      case 398:
      case 399:
      case 400:
      case 401:
      case 405:
      case 406:
      case 407:
      case 408:
      case 409:
      case 410:
      case 417:
      case 418:
      case 419:
      case 420:
      case 421:
      case 422:
      case 426:
      case 427:
      case 428:
      case 429:
      case 430:
      case 431:
      case 695:
      case 696:
      case 697:
      case 698:
      case 703:
      case 704:
      case 705:
      case 706:
      case 711:
      case 712:
      case 713:
      case 714:
      case 719:
      case 720:
      case 721:
      case 722:
      case 800:
      case 911:
      case 912:
      case 915:
      case 916:
      case 919:
      case 920:
      case 923:
      case 924:
      case 1003:
      case 1004:
      case 1007:
      case 1008:
      case 1011:
      case 1012:
      case 1015:
      case 1016:
      case 1035:
      case 1036:
      case 1037:
      case 1038:
      case 1039:
      case 1040:
      case 1044:
      case 1045:
      case 1046:
      case 1047:
      case 1048:
      case 1049:
      case 1053:
      case 1054:
      case 1055:
      case 1056:
      case 1057:
      case 1058:
      case 1062:
      case 1063:
      case 1064:
      case 1065:
      case 1066:
      case 1067:
      case 1071:
      case 1072:
      case 1073:
      case 1074:
      case 1075:
      case 1076:
      case 1080:
      case 1081:
      case 1082:
      case 1083:
      case 1084:
      case 1085:
      case 1089:
      case 1090:
      case 1091:
      case 1092:
      case 1093:
      case 1094:
      case 1098:
      case 1099:
      case 1100:
      case 1101:
      case 1102:
      case 1103:
      case 1728:
      case 1729:
      case 1730:
      case 1731:
      case 1732:
      case 1733:
      case 1737:
      case 1738:
      case 1739:
      case 1740:
      case 1741:
      case 1742:
      case 1746:
      case 1747:
      case 1748:
      case 1749:
      case 1750:
      case 1751:
      case 1755:
      case 1756:
      case 1757:
      case 1758:
      case 1759:
      case 1760:
      case 1764:
      case 1765:
      case 1766:
      case 1767:
      case 1768:
      case 1769:
      case 1773:
      case 1774:
      case 1775:
      case 1776:
      case 1777:
      case 1778:
      case 1782:
      case 1783:
      case 1784:
      case 1785:
      case 1786:
      case 1787:
      case 1791:
      case 1792:
      case 1793:
      case 1794:
      case 1795:
      case 1796:
      case 2026:
      case 2027:
      case 2028:
      case 2032:
      case 2033:
      case 2034:
      case 2038:
      case 2039:
      case 2040:
      case 2044:
      case 2045:
      case 2046:
      case 2051:
      case 2052:
      case 2053:
      case 2054:
      case 2059:
      case 2060:
      case 2061:
      case 2062:
      case 2067:
      case 2068:
      case 2069:
      case 2070:
      case 2075:
      case 2076:
      case 2077:
      case 2078:
      case 2184:
      case 2185:
      case 2186:
      case 2187:
      case 2188:
      case 2189:
      case 2190:
      case 2191:
      case 2192:
      case 2193:
      case 2194:
      case 2195:
      case 2200:
      case 2201:
      case 2202:
      case 2203:
      case 2204:
      case 2205:
      case 2206:
      case 2207:
      case 2208:
      case 2209:
      case 2210:
      case 2211:
      case 2216:
      case 2217:
      case 2218:
      case 2219:
      case 2220:
      case 2221:
      case 2222:
      case 2223:
      case 2224:
      case 2225:
      case 2226:
      case 2227:
      case 2232:
      case 2233:
      case 2234:
      case 2235:
      case 2236:
      case 2237:
      case 2238:
      case 2239:
      case 2240:
      case 2241:
      case 2242:
      case 2243:
      case 2248:
      case 2249:
      case 2250:
      case 2251:
      case 2252:
      case 2253:
      case 2254:
      case 2255:
      case 2256:
      case 2257:
      case 2258:
      case 2259:
      case 2264:
      case 2265:
      case 2266:
      case 2267:
      case 2268:
      case 2269:
      case 2270:
      case 2271:
      case 2272:
      case 2273:
      case 2274:
      case 2275:
      case 2280:
      case 2281:
      case 2282:
      case 2283:
      case 2284:
      case 2285:
      case 2286:
      case 2287:
      case 2288:
      case 2289:
      case 2290:
      case 2291:
      case 2296:
      case 2297:
      case 2298:
      case 2299:
      case 2300:
      case 2301:
      case 2302:
      case 2303:
      case 2304:
      case 2305:
      case 2306:
      case 2307:
      case 2312:
      case 2313:
      case 2314:
      case 2315:
      case 2316:
      case 2317:
      case 2318:
      case 2319:
      case 2320:
      case 2321:
      case 2322:
      case 2323:
      case 2328:
      case 2329:
      case 2330:
      case 2331:
      case 2332:
      case 2333:
      case 2334:
      case 2335:
      case 2336:
      case 2337:
      case 2338:
      case 2339:
      case 2344:
      case 2345:
      case 2346:
      case 2347:
      case 2348:
      case 2349:
      case 2350:
      case 2351:
      case 2352:
      case 2353:
      case 2354:
      case 2355:
      case 2360:
      case 2361:
      case 2362:
      case 2363:
      case 2364:
      case 2365:
      case 2366:
      case 2367:
      case 2368:
      case 2369:
      case 2370:
      case 2371:
      case 3638:
      case 3639:
      case 3640:
      case 3641:
      case 3642:
      case 3643:
      case 3644:
      case 3645:
      case 3646:
      case 3647:
      case 3648:
      case 3649:
      case 3654:
      case 3655:
      case 3656:
      case 3657:
      case 3658:
      case 3659:
      case 3660:
      case 3661:
      case 3662:
      case 3663:
      case 3664:
      case 3665:
      case 3670:
      case 3671:
      case 3672:
      case 3673:
      case 3674:
      case 3675:
      case 3676:
      case 3677:
      case 3678:
      case 3679:
      case 3680:
      case 3681:
      case 3686:
      case 3687:
      case 3688:
      case 3689:
      case 3690:
      case 3691:
      case 3692:
      case 3693:
      case 3694:
      case 3695:
      case 3696:
      case 3697:
      case 3702:
      case 3703:
      case 3704:
      case 3705:
      case 3706:
      case 3707:
      case 3708:
      case 3709:
      case 3710:
      case 3711:
      case 3712:
      case 3713:
      case 3718:
      case 3719:
      case 3720:
      case 3721:
      case 3722:
      case 3723:
      case 3724:
      case 3725:
      case 3726:
      case 3727:
      case 3728:
      case 3729:
      case 3734:
      case 3735:
      case 3736:
      case 3737:
      case 3738:
      case 3739:
      case 3740:
      case 3741:
      case 3742:
      case 3743:
      case 3744:
      case 3745:
      case 3750:
      case 3751:
      case 3752:
      case 3753:
      case 3754:
      case 3755:
      case 3756:
      case 3757:
      case 3758:
      case 3759:
      case 3760:
      case 3761:
      case 3766:
      case 3767:
      case 3768:
      case 3769:
      case 3770:
      case 3771:
      case 3772:
      case 3773:
      case 3774:
      case 3775:
      case 3776:
      case 3777:
      case 3782:
      case 3783:
      case 3784:
      case 3785:
      case 3786:
      case 3787:
      case 3788:
      case 3789:
      case 3790:
      case 3791:
      case 3792:
      case 3793:
      case 3798:
      case 3799:
      case 3800:
      case 3801:
      case 3802:
      case 3803:
      case 3804:
      case 3805:
      case 3806:
      case 3807:
      case 3808:
      case 3809:
      case 3814:
      case 3815:
      case 3816:
      case 3817:
      case 3818:
      case 3819:
      case 3820:
      case 3821:
      case 3822:
      case 3823:
      case 3824:
      case 3825:
      case 4598:
      case 4599:
      case 4600:
      case 4601:
      case 4602:
      case 4603:
      case 4607:
      case 4608:
      case 4609:
      case 4610:
      case 4611:
      case 4612:
      case 4619:
      case 4620:
      case 4621:
      case 4622:
      case 4623:
      case 4624:
      case 4628:
      case 4629:
      case 4630:
      case 4631:
      case 4632:
      case 4633:
      case 4634:
      case 4635:
      case 4636:
      case 4637:
      case 4638:
      case 4639:
      case 4643:
      case 4644:
      case 4645:
      case 4646:
      case 4647:
      case 4648:
      case 4655:
      case 4656:
      case 4657:
      case 4658:
      case 4659:
      case 4660:
      case 4664:
      case 4665:
      case 4666:
      case 4667:
      case 4668:
      case 4669:
      case 4677:
      case 4678:
      case 4679:
      case 4680:
      case 4681:
      case 4682:
      case 4686:
      case 4687:
      case 4688:
      case 4689:
      case 4690:
      case 4691:
      case 4698:
      case 4699:
      case 4700:
      case 4701:
      case 4702:
      case 4703:
      case 4707:
      case 4708:
      case 4709:
      case 4710:
      case 4711:
      case 4712:
      case 4713:
      case 4714:
      case 4715:
      case 4716:
      case 4717:
      case 4718:
      case 4722:
      case 4723:
      case 4724:
      case 4725:
      case 4726:
      case 4727:
      case 4734:
      case 4735:
      case 4736:
      case 4737:
      case 4738:
      case 4739:
      case 4743:
      case 4744:
      case 4745:
      case 4746:
      case 4747:
      case 4748:
      case 4749:
      case 4750:
      case 4751:
      case 4752:
      case 4753:
      case 4754:
      case 4758:
      case 4759:
      case 4760:
      case 4761:
      case 4762:
      case 4763:
      case 4770:
      case 4771:
      case 4772:
      case 4773:
      case 4774:
      case 4775:
      case 4779:
      case 4780:
      case 4781:
      case 4782:
      case 4783:
      case 4784:
      case 4785:
      case 4786:
      case 4787:
      case 4788:
      case 4789:
      case 4790:
      case 4794:
      case 4795:
      case 4796:
      case 4797:
      case 4798:
      case 4799:
      case 4806:
      case 4807:
      case 4808:
      case 4809:
      case 4810:
      case 4811:
      case 4815:
      case 4816:
      case 4817:
      case 4818:
      case 4819:
      case 4820:
      case 4951:
      case 4952:
      case 4953:
      case 4954:
      case 4955:
      case 4956:
      case 4960:
      case 4961:
      case 4962:
      case 4963:
      case 4964:
      case 4965:
      case 4969:
      case 4970:
      case 4971:
      case 4972:
      case 4973:
      case 4974:
      case 4978:
      case 4979:
      case 4980:
      case 4981:
      case 4982:
      case 4983:
      case 5023:
      case 5024:
      case 5025:
      case 5026:
      case 5027:
      case 5028:
      case 5032:
      case 5033:
      case 5034:
      case 5035:
      case 5036:
      case 5037:
      case 5041:
      case 5042:
      case 5043:
      case 5044:
      case 5045:
      case 5046:
      case 5050:
      case 5051:
      case 5052:
      case 5053:
      case 5054:
      case 5055:
      case 5059:
      case 5060:
      case 5061:
      case 5062:
      case 5063:
      case 5064:
      case 5068:
      case 5069:
      case 5070:
      case 5071:
      case 5072:
      case 5073:
      case 5077:
      case 5078:
      case 5079:
      case 5080:
      case 5081:
      case 5082:
      case 5086:
      case 5087:
      case 5088:
      case 5089:
      case 5090:
      case 5091:
      case 5095:
      case 5096:
      case 5097:
      case 5098:
      case 5099:
      case 5100:
      case 5104:
      case 5105:
      case 5106:
      case 5107:
      case 5108:
      case 5109:
      case 5113:
      case 5114:
      case 5115:
      case 5116:
      case 5117:
      case 5118:
      case 5122:
      case 5123:
      case 5124:
      case 5125:
      case 5126:
      case 5127:
      case 5131:
      case 5132:
      case 5133:
      case 5134:
      case 5135:
      case 5136:
      case 5140:
      case 5141:
      case 5142:
      case 5143:
      case 5144:
      case 5145:
      case 5149:
      case 5150:
      case 5151:
      case 5152:
      case 5153:
      case 5154:
      case 5158:
      case 5159:
      case 5160:
      case 5161:
      case 5162:
      case 5163:
      case 5180:
      case 5181:
      case 5182:
      case 5183:
      case 5184:
      case 5185:
      case 5189:
      case 5190:
      case 5191:
      case 5192:
      case 5193:
      case 5194:
      case 5201:
      case 5202:
      case 5203:
      case 5204:
      case 5205:
      case 5206:
      case 5210:
      case 5211:
      case 5212:
      case 5213:
      case 5214:
      case 5215:
      case 5219:
      case 5220:
      case 5221:
      case 5222:
      case 5223:
      case 5224:
      case 5228:
      case 5229:
      case 5230:
      case 5231:
      case 5232:
      case 5233:
      case 5237:
      case 5238:
      case 5239:
      case 5240:
      case 5241:
      case 5242:
      case 5246:
      case 5247:
      case 5248:
      case 5249:
      case 5250:
      case 5251:
      case 5255:
      case 5256:
      case 5257:
      case 5258:
      case 5259:
      case 5260:
      case 5264:
      case 5265:
      case 5266:
      case 5267:
      case 5268:
      case 5269:
      case 5273:
      case 5274:
      case 5275:
      case 5276:
      case 5277:
      case 5278:
      case 5282:
      case 5283:
      case 5284:
      case 5285:
      case 5286:
      case 5287:
      case 5291:
      case 5292:
      case 5293:
      case 5294:
      case 5295:
      case 5296:
      case 5300:
      case 5301:
      case 5302:
      case 5303:
      case 5304:
      case 5305:
      case 5309:
      case 5310:
      case 5311:
      case 5312:
      case 5313:
      case 5314:
      case 5318:
      case 5319:
      case 5320:
      case 5321:
      case 5322:
      case 5323:
      case 5363:
      case 5364:
      case 5365:
      case 5366:
      case 5367:
      case 5368:
      case 5372:
      case 5373:
      case 5374:
      case 5375:
      case 5376:
      case 5377:
      case 5381:
      case 5382:
      case 5383:
      case 5384:
      case 5385:
      case 5386:
      case 5390:
      case 5391:
      case 5392:
      case 5393:
      case 5394:
      case 5395:
      case 5879:
      case 5880:
      case 5881:
      case 5882:
      case 5883:
      case 5884:
      case 5888:
      case 5889:
      case 5890:
      case 5891:
      case 5892:
      case 5893:
      case 5897:
      case 5898:
      case 5899:
      case 5900:
      case 5901:
      case 5902:
      case 5906:
      case 5907:
      case 5908:
      case 5909:
      case 5910:
      case 5911:
      case 5915:
      case 5916:
      case 5917:
      case 5918:
      case 5919:
      case 5920:
      case 5924:
      case 5925:
      case 5926:
      case 5927:
      case 5928:
      case 5929:
      case 5933:
      case 5934:
      case 5935:
      case 5936:
      case 5937:
      case 5938:
      case 5942:
      case 5943:
      case 5944:
      case 5945:
      case 5946:
      case 5947:
      case 5951:
      case 5952:
      case 5953:
      case 5954:
      case 5955:
      case 5956:
      case 5960:
      case 5961:
      case 5962:
      case 5963:
      case 5964:
      case 5965:
      case 5969:
      case 5970:
      case 5971:
      case 5972:
      case 5973:
      case 5974:
      case 5978:
      case 5979:
      case 5980:
      case 5981:
      case 5982:
      case 5983:
      case 5987:
      case 5988:
      case 5989:
      case 5990:
      case 5991:
      case 5992:
      case 5996:
      case 5997:
      case 5998:
      case 5999:
      case 6000:
      case 6001:
      case 6005:
      case 6006:
      case 6007:
      case 6008:
      case 6009:
      case 6010:
      case 6014:
      case 6015:
      case 6016:
      case 6017:
      case 6018:
      case 6019:
      case 6023:
      case 6024:
      case 6025:
      case 6026:
      case 6027:
      case 6028:
      case 6032:
      case 6033:
      case 6034:
      case 6035:
      case 6036:
      case 6037:
      case 6041:
      case 6042:
      case 6043:
      case 6044:
      case 6045:
      case 6046:
      case 6050:
      case 6051:
      case 6052:
      case 6053:
      case 6054:
      case 6055:
      case 7763:
      case 7764:
      case 7765:
      case 7766:
      case 7767:
      case 7768:
      case 7772:
      case 7773:
      case 7774:
      case 7775:
      case 7776:
      case 7777:
      case 7781:
      case 7782:
      case 7783:
      case 7784:
      case 7785:
      case 7786:
      case 7790:
      case 7791:
      case 7792:
      case 7793:
      case 7794:
      case 7795:
      case 7799:
      case 7800:
      case 7801:
      case 7802:
      case 7803:
      case 7804:
      case 7808:
      case 7809:
      case 7810:
      case 7811:
      case 7812:
      case 7813:
      case 7817:
      case 7818:
      case 7819:
      case 7820:
      case 7821:
      case 7822:
      case 7826:
      case 7827:
      case 7828:
      case 7829:
      case 7830:
      case 7831:
      case 8278:
      case 8279:
      case 8280:
      case 8281:
      case 8282:
      case 8283:
      case 8287:
      case 8288:
      case 8289:
      case 8290:
      case 8291:
      case 8292:
      case 8299:
      case 8300:
      case 8301:
      case 8302:
      case 8303:
      case 8304:
      case 8308:
      case 8309:
      case 8310:
      case 8311:
      case 8312:
      case 8313:
      case 8314:
      case 8315:
      case 8316:
      case 8317:
      case 8318:
      case 8319:
      case 8323:
      case 8324:
      case 8325:
      case 8326:
      case 8327:
      case 8328:
      case 8335:
      case 8336:
      case 8337:
      case 8338:
      case 8339:
      case 8340:
      case 8344:
      case 8345:
      case 8346:
      case 8347:
      case 8348:
      case 8349:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 25696;
        goto LABEL_4;
      case 366:
      case 367:
      case 368:
      case 375:
      case 376:
      case 377:
      case 378:
      case 379:
      case 380:
      case 387:
      case 388:
      case 389:
      case 402:
      case 403:
      case 404:
      case 411:
      case 412:
      case 413:
      case 414:
      case 415:
      case 416:
      case 423:
      case 424:
      case 425:
      case 691:
      case 692:
      case 693:
      case 694:
      case 699:
      case 700:
      case 701:
      case 702:
      case 707:
      case 708:
      case 709:
      case 710:
      case 715:
      case 716:
      case 717:
      case 718:
      case 913:
      case 914:
      case 917:
      case 918:
      case 921:
      case 922:
      case 925:
      case 926:
      case 1005:
      case 1006:
      case 1009:
      case 1010:
      case 1013:
      case 1014:
      case 1017:
      case 1018:
      case 1041:
      case 1042:
      case 1043:
      case 1050:
      case 1051:
      case 1052:
      case 1059:
      case 1060:
      case 1061:
      case 1068:
      case 1069:
      case 1070:
      case 1077:
      case 1078:
      case 1079:
      case 1086:
      case 1087:
      case 1088:
      case 1095:
      case 1096:
      case 1097:
      case 1104:
      case 1105:
      case 1106:
      case 1734:
      case 1735:
      case 1736:
      case 1743:
      case 1744:
      case 1745:
      case 1752:
      case 1753:
      case 1754:
      case 1761:
      case 1762:
      case 1763:
      case 1770:
      case 1771:
      case 1772:
      case 1779:
      case 1780:
      case 1781:
      case 1788:
      case 1789:
      case 1790:
      case 1797:
      case 1798:
      case 1799:
      case 2023:
      case 2024:
      case 2025:
      case 2029:
      case 2030:
      case 2031:
      case 2035:
      case 2036:
      case 2037:
      case 2041:
      case 2042:
      case 2043:
      case 2047:
      case 2048:
      case 2049:
      case 2050:
      case 2055:
      case 2056:
      case 2057:
      case 2058:
      case 2063:
      case 2064:
      case 2065:
      case 2066:
      case 2071:
      case 2072:
      case 2073:
      case 2074:
      case 2180:
      case 2181:
      case 2182:
      case 2183:
      case 2196:
      case 2197:
      case 2198:
      case 2199:
      case 2212:
      case 2213:
      case 2214:
      case 2215:
      case 2228:
      case 2229:
      case 2230:
      case 2231:
      case 2244:
      case 2245:
      case 2246:
      case 2247:
      case 2260:
      case 2261:
      case 2262:
      case 2263:
      case 2276:
      case 2277:
      case 2278:
      case 2279:
      case 2292:
      case 2293:
      case 2294:
      case 2295:
      case 2308:
      case 2309:
      case 2310:
      case 2311:
      case 2324:
      case 2325:
      case 2326:
      case 2327:
      case 2340:
      case 2341:
      case 2342:
      case 2343:
      case 2356:
      case 2357:
      case 2358:
      case 2359:
      case 3634:
      case 3635:
      case 3636:
      case 3637:
      case 3650:
      case 3651:
      case 3652:
      case 3653:
      case 3666:
      case 3667:
      case 3668:
      case 3669:
      case 3682:
      case 3683:
      case 3684:
      case 3685:
      case 3698:
      case 3699:
      case 3700:
      case 3701:
      case 3714:
      case 3715:
      case 3716:
      case 3717:
      case 3730:
      case 3731:
      case 3732:
      case 3733:
      case 3746:
      case 3747:
      case 3748:
      case 3749:
      case 3762:
      case 3763:
      case 3764:
      case 3765:
      case 3778:
      case 3779:
      case 3780:
      case 3781:
      case 3794:
      case 3795:
      case 3796:
      case 3797:
      case 3810:
      case 3811:
      case 3812:
      case 3813:
      case 4604:
      case 4605:
      case 4606:
      case 4613:
      case 4614:
      case 4615:
      case 4616:
      case 4617:
      case 4618:
      case 4625:
      case 4626:
      case 4627:
      case 4640:
      case 4641:
      case 4642:
      case 4649:
      case 4650:
      case 4651:
      case 4652:
      case 4653:
      case 4654:
      case 4661:
      case 4662:
      case 4663:
      case 4683:
      case 4684:
      case 4685:
      case 4692:
      case 4693:
      case 4694:
      case 4695:
      case 4696:
      case 4697:
      case 4704:
      case 4705:
      case 4706:
      case 4719:
      case 4720:
      case 4721:
      case 4728:
      case 4729:
      case 4730:
      case 4731:
      case 4732:
      case 4733:
      case 4740:
      case 4741:
      case 4742:
      case 4755:
      case 4756:
      case 4757:
      case 4764:
      case 4765:
      case 4766:
      case 4767:
      case 4768:
      case 4769:
      case 4776:
      case 4777:
      case 4778:
      case 4791:
      case 4792:
      case 4793:
      case 4800:
      case 4801:
      case 4802:
      case 4803:
      case 4804:
      case 4805:
      case 4812:
      case 4813:
      case 4814:
      case 4948:
      case 4949:
      case 4950:
      case 4957:
      case 4958:
      case 4959:
      case 4966:
      case 4967:
      case 4968:
      case 4975:
      case 4976:
      case 4977:
      case 5020:
      case 5021:
      case 5022:
      case 5029:
      case 5030:
      case 5031:
      case 5038:
      case 5039:
      case 5040:
      case 5047:
      case 5048:
      case 5049:
      case 5056:
      case 5057:
      case 5058:
      case 5065:
      case 5066:
      case 5067:
      case 5074:
      case 5075:
      case 5076:
      case 5083:
      case 5084:
      case 5085:
      case 5092:
      case 5093:
      case 5094:
      case 5101:
      case 5102:
      case 5103:
      case 5110:
      case 5111:
      case 5112:
      case 5119:
      case 5120:
      case 5121:
      case 5128:
      case 5129:
      case 5130:
      case 5137:
      case 5138:
      case 5139:
      case 5146:
      case 5147:
      case 5148:
      case 5155:
      case 5156:
      case 5157:
      case 5186:
      case 5187:
      case 5188:
      case 5195:
      case 5196:
      case 5197:
      case 5198:
      case 5199:
      case 5200:
      case 5207:
      case 5208:
      case 5209:
      case 5216:
      case 5217:
      case 5218:
      case 5225:
      case 5226:
      case 5227:
      case 5234:
      case 5235:
      case 5236:
      case 5243:
      case 5244:
      case 5245:
      case 5252:
      case 5253:
      case 5254:
      case 5261:
      case 5262:
      case 5263:
      case 5270:
      case 5271:
      case 5272:
      case 5279:
      case 5280:
      case 5281:
      case 5288:
      case 5289:
      case 5290:
      case 5297:
      case 5298:
      case 5299:
      case 5306:
      case 5307:
      case 5308:
      case 5315:
      case 5316:
      case 5317:
      case 5360:
      case 5361:
      case 5362:
      case 5369:
      case 5370:
      case 5371:
      case 5378:
      case 5379:
      case 5380:
      case 5387:
      case 5388:
      case 5389:
      case 5876:
      case 5877:
      case 5878:
      case 5885:
      case 5886:
      case 5887:
      case 5894:
      case 5895:
      case 5896:
      case 5903:
      case 5904:
      case 5905:
      case 5912:
      case 5913:
      case 5914:
      case 5921:
      case 5922:
      case 5923:
      case 5930:
      case 5931:
      case 5932:
      case 5939:
      case 5940:
      case 5941:
      case 5948:
      case 5949:
      case 5950:
      case 5957:
      case 5958:
      case 5959:
      case 5966:
      case 5967:
      case 5968:
      case 5975:
      case 5976:
      case 5977:
      case 5984:
      case 5985:
      case 5986:
      case 5993:
      case 5994:
      case 5995:
      case 6002:
      case 6003:
      case 6004:
      case 6011:
      case 6012:
      case 6013:
      case 6020:
      case 6021:
      case 6022:
      case 6029:
      case 6030:
      case 6031:
      case 6038:
      case 6039:
      case 6040:
      case 6047:
      case 6048:
      case 6049:
      case 7760:
      case 7761:
      case 7762:
      case 7769:
      case 7770:
      case 7771:
      case 7778:
      case 7779:
      case 7780:
      case 7787:
      case 7788:
      case 7789:
      case 7796:
      case 7797:
      case 7798:
      case 7805:
      case 7806:
      case 7807:
      case 7814:
      case 7815:
      case 7816:
      case 7823:
      case 7824:
      case 7825:
      case 8284:
      case 8285:
      case 8286:
      case 8293:
      case 8294:
      case 8295:
      case 8296:
      case 8297:
      case 8298:
      case 8305:
      case 8306:
      case 8307:
      case 8320:
      case 8321:
      case 8322:
      case 8329:
      case 8330:
      case 8331:
      case 8332:
      case 8333:
      case 8334:
      case 8341:
      case 8342:
      case 8343:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 24464;
        goto LABEL_4;
      case 432:
      case 433:
      case 446:
      case 447:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 5632;
        goto LABEL_4;
      case 434:
      case 435:
      case 436:
      case 437:
      case 448:
      case 449:
      case 450:
      case 451:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 6160;
        goto LABEL_4;
      case 438:
      case 439:
      case 440:
      case 441:
      case 452:
      case 453:
      case 454:
      case 455:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 5808;
        goto LABEL_4;
      case 442:
      case 443:
      case 444:
      case 445:
      case 456:
      case 457:
      case 458:
      case 459:
      case 2164:
      case 2165:
      case 2166:
      case 2167:
      case 2168:
      case 2169:
      case 2170:
      case 2171:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 6336;
        goto LABEL_4;
      case 460:
      case 461:
      case 474:
      case 475:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 12848;
        goto LABEL_4;
      case 462:
      case 463:
      case 464:
      case 465:
      case 476:
      case 477:
      case 478:
      case 479:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 13376;
        goto LABEL_4;
      case 466:
      case 467:
      case 468:
      case 469:
      case 480:
      case 481:
      case 482:
      case 483:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 13024;
        goto LABEL_4;
      case 470:
      case 471:
      case 472:
      case 473:
      case 484:
      case 485:
      case 486:
      case 487:
      case 2172:
      case 2173:
      case 2174:
      case 2175:
      case 2176:
      case 2177:
      case 2178:
      case 2179:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 13552;
        goto LABEL_4;
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 496:
      case 497:
      case 498:
      case 4566:
      case 4567:
      case 4568:
      case 4569:
      case 4570:
      case 4571:
      case 4572:
      case 4573:
      case 4574:
      case 4575:
      case 4576:
      case 4577:
      case 4578:
      case 4579:
      case 4580:
      case 4594:
      case 4595:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 3872);
        break;
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 540:
      case 541:
      case 542:
      case 543:
      case 544:
      case 545:
      case 546:
      case 547:
      case 548:
      case 549:
      case 550:
      case 551:
      case 552:
      case 553:
      case 554:
      case 555:
      case 556:
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
      case 563:
      case 564:
      case 565:
      case 566:
      case 567:
      case 568:
      case 569:
      case 570:
      case 571:
      case 572:
      case 573:
      case 574:
      case 609:
      case 610:
      case 611:
      case 612:
      case 613:
      case 614:
      case 615:
      case 616:
      case 617:
      case 618:
      case 619:
      case 620:
      case 621:
      case 622:
      case 623:
      case 624:
      case 625:
      case 626:
      case 627:
      case 628:
      case 629:
      case 630:
      case 631:
      case 632:
      case 633:
      case 634:
      case 635:
      case 636:
      case 637:
      case 638:
      case 639:
      case 640:
      case 641:
      case 642:
      case 643:
      case 644:
      case 645:
      case 646:
      case 647:
      case 648:
      case 649:
      case 650:
      case 651:
      case 652:
      case 653:
      case 654:
      case 655:
      case 656:
      case 657:
      case 658:
      case 659:
      case 660:
      case 661:
      case 662:
      case 663:
      case 664:
      case 665:
      case 666:
      case 667:
      case 668:
      case 669:
      case 670:
      case 671:
      case 672:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 30976;
        goto LABEL_4;
      case 577:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
      case 586:
      case 587:
      case 588:
      case 589:
      case 590:
      case 591:
      case 592:
      case 593:
      case 594:
      case 595:
      case 596:
      case 597:
      case 598:
      case 599:
      case 600:
      case 601:
      case 602:
      case 603:
      case 604:
      case 605:
      case 606:
      case 607:
      case 608:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 9152;
        goto LABEL_4;
      case 673:
      case 674:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 31152;
        goto LABEL_4;
      case 675:
      case 676:
      case 677:
      case 678:
      case 679:
      case 680:
      case 681:
      case 682:
      case 683:
      case 684:
      case 685:
      case 686:
      case 731:
      case 732:
      case 733:
      case 734:
      case 735:
      case 736:
      case 737:
      case 738:
      case 739:
      case 740:
      case 741:
      case 742:
      case 1134:
      case 1135:
      case 1136:
      case 1137:
      case 1138:
      case 1139:
      case 1140:
      case 1141:
      case 1142:
      case 1143:
      case 1144:
      case 1145:
      case 1146:
      case 1147:
      case 1148:
      case 1149:
      case 1150:
      case 1151:
      case 1152:
      case 1153:
      case 1154:
      case 1155:
      case 1156:
      case 1157:
      case 1158:
      case 1159:
      case 1160:
      case 1161:
      case 1162:
      case 1163:
      case 1164:
      case 1165:
      case 1166:
      case 1167:
      case 1168:
      case 1169:
      case 1170:
      case 1171:
      case 1172:
      case 1173:
      case 1174:
      case 1175:
      case 1176:
      case 1177:
      case 1178:
      case 1179:
      case 1180:
      case 1181:
      case 1182:
      case 1183:
      case 1184:
      case 1185:
      case 1186:
      case 1187:
      case 1188:
      case 1189:
      case 1190:
      case 1191:
      case 1192:
      case 1193:
      case 1194:
      case 1195:
      case 1196:
      case 1197:
      case 1198:
      case 1199:
      case 1200:
      case 1201:
      case 1202:
      case 1203:
      case 1204:
      case 1205:
      case 1206:
      case 1207:
      case 1208:
      case 1209:
      case 1210:
      case 1211:
      case 1212:
      case 1213:
      case 1214:
      case 1215:
      case 1216:
      case 1217:
      case 1218:
      case 1219:
      case 1220:
      case 1221:
      case 1222:
      case 1223:
      case 1224:
      case 1225:
      case 1226:
      case 1227:
      case 1228:
      case 1229:
      case 1230:
      case 1231:
      case 1232:
      case 1233:
      case 1234:
      case 1235:
      case 1596:
      case 1597:
      case 1598:
      case 1599:
      case 1600:
      case 1601:
      case 1602:
      case 1603:
      case 1604:
      case 1605:
      case 1606:
      case 1607:
      case 1608:
      case 1609:
      case 1610:
      case 1611:
      case 1612:
      case 1613:
      case 1614:
      case 1615:
      case 1616:
      case 1617:
      case 1618:
      case 1619:
      case 1816:
      case 1817:
      case 1818:
      case 1819:
      case 1820:
      case 1821:
      case 1822:
      case 1823:
      case 1824:
      case 1825:
      case 1826:
      case 1827:
      case 1828:
      case 1829:
      case 1830:
      case 1831:
      case 1832:
      case 1833:
      case 1834:
      case 1835:
      case 1836:
      case 1837:
      case 1838:
      case 1839:
      case 1840:
      case 1841:
      case 1842:
      case 1843:
      case 1844:
      case 1845:
      case 1846:
      case 1847:
      case 1848:
      case 1849:
      case 1850:
      case 1851:
      case 1852:
      case 1853:
      case 1854:
      case 1855:
      case 1856:
      case 1857:
      case 1858:
      case 1859:
      case 1860:
      case 1861:
      case 1862:
      case 1863:
      case 1864:
      case 1865:
      case 1866:
      case 1867:
      case 1868:
      case 1869:
      case 1870:
      case 1871:
      case 1872:
      case 1873:
      case 1874:
      case 1875:
      case 1876:
      case 1877:
      case 1878:
      case 1879:
      case 1880:
      case 1881:
      case 1882:
      case 1883:
      case 1884:
      case 1885:
      case 1886:
      case 1887:
      case 1960:
      case 1961:
      case 1962:
      case 1963:
      case 1964:
      case 1965:
      case 1966:
      case 1967:
      case 1968:
      case 1969:
      case 1970:
      case 1971:
      case 1972:
      case 1973:
      case 1974:
      case 1975:
      case 1976:
      case 1977:
      case 1978:
      case 1979:
      case 1980:
      case 1981:
      case 1982:
      case 1983:
      case 1984:
      case 1985:
      case 1986:
      case 1987:
      case 1988:
      case 1989:
      case 1990:
      case 1991:
      case 1992:
      case 1993:
      case 1994:
      case 1995:
      case 2151:
      case 2152:
      case 2153:
      case 2154:
      case 2155:
      case 2156:
      case 2157:
      case 2158:
      case 2159:
      case 2160:
      case 2161:
      case 2162:
      case 3478:
      case 3479:
      case 3480:
      case 3481:
      case 3482:
      case 3483:
      case 3484:
      case 3485:
      case 3486:
      case 3487:
      case 3488:
      case 3489:
      case 4066:
      case 4067:
      case 4068:
      case 4069:
      case 4070:
      case 4071:
      case 4072:
      case 4073:
      case 4074:
      case 4075:
      case 4076:
      case 4077:
      case 4828:
      case 4829:
      case 4830:
      case 4831:
      case 4832:
      case 4833:
      case 4834:
      case 4835:
      case 4836:
      case 4837:
      case 4838:
      case 4839:
      case 4840:
      case 4841:
      case 4842:
      case 4843:
      case 4844:
      case 4845:
      case 4846:
      case 4847:
      case 4848:
      case 4849:
      case 4850:
      case 4851:
      case 4852:
      case 4853:
      case 4854:
      case 4855:
      case 4856:
      case 4857:
      case 4858:
      case 4859:
      case 4860:
      case 4861:
      case 4862:
      case 4863:
      case 4864:
      case 4865:
      case 4866:
      case 4867:
      case 4868:
      case 4869:
      case 4870:
      case 4871:
      case 4872:
      case 4873:
      case 4874:
      case 4875:
      case 4876:
      case 4877:
      case 4878:
      case 4879:
      case 4880:
      case 4881:
      case 4882:
      case 4883:
      case 4884:
      case 4885:
      case 4886:
      case 4887:
      case 4888:
      case 4889:
      case 4890:
      case 4891:
      case 4892:
      case 4893:
      case 4894:
      case 4895:
      case 4896:
      case 4897:
      case 4898:
      case 4899:
      case 4900:
      case 4901:
      case 4902:
      case 4903:
      case 4904:
      case 4905:
      case 4906:
      case 4907:
      case 4908:
      case 4909:
      case 4910:
      case 4911:
      case 4912:
      case 4913:
      case 4914:
      case 4915:
      case 4916:
      case 4917:
      case 4918:
      case 4919:
      case 4920:
      case 4921:
      case 4922:
      case 4923:
      case 4924:
      case 4925:
      case 4926:
      case 4927:
      case 4928:
      case 4929:
      case 4930:
      case 4931:
      case 4932:
      case 4933:
      case 4934:
      case 4935:
      case 4936:
      case 4937:
      case 4938:
      case 4939:
      case 4940:
      case 4941:
      case 4942:
      case 4943:
      case 4944:
      case 4945:
      case 4946:
      case 4947:
      case 5164:
      case 5165:
      case 5166:
      case 5167:
      case 5168:
      case 5169:
      case 5170:
      case 5171:
      case 5172:
      case 5173:
      case 5174:
      case 5175:
      case 7832:
      case 7833:
      case 7834:
      case 7835:
      case 7836:
      case 7837:
      case 7838:
      case 7839:
      case 7840:
      case 7841:
      case 7842:
      case 7843:
      case 7844:
      case 7845:
      case 7846:
      case 7847:
      case 7848:
      case 7849:
      case 7850:
      case 7851:
      case 7852:
      case 7853:
      case 7854:
      case 7855:
      case 7856:
      case 7857:
      case 7858:
      case 7859:
      case 7860:
      case 7861:
      case 7862:
      case 7863:
      case 7864:
      case 7865:
      case 7866:
      case 7867:
      case 7868:
      case 7869:
      case 7870:
      case 7871:
      case 7872:
      case 7873:
      case 7874:
      case 7875:
      case 7876:
      case 7877:
      case 7878:
      case 7879:
      case 7880:
      case 7881:
      case 7882:
      case 7883:
      case 7884:
      case 7885:
      case 7886:
      case 7887:
      case 7888:
      case 7889:
      case 7890:
      case 7891:
      case 7892:
      case 7893:
      case 7894:
      case 7895:
      case 7896:
      case 7897:
      case 7898:
      case 7899:
      case 7900:
      case 7901:
      case 7902:
      case 7903:
      case 7904:
      case 7905:
      case 7906:
      case 7907:
      case 7908:
      case 7909:
      case 7910:
      case 7911:
      case 7912:
      case 7913:
      case 7914:
      case 7915:
      case 7916:
      case 7917:
      case 7918:
      case 7919:
      case 7920:
      case 7921:
      case 7922:
      case 7923:
      case 7924:
      case 7925:
      case 7926:
      case 7927:
      case 7928:
      case 7929:
      case 7930:
      case 7931:
      case 7932:
      case 7933:
      case 7934:
      case 7935:
      case 7936:
      case 7937:
      case 7938:
      case 7939:
      case 7940:
      case 7941:
      case 7942:
      case 7943:
      case 7944:
      case 7945:
      case 7946:
      case 7947:
      case 7948:
      case 7949:
      case 7950:
      case 7951:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 24288;
        goto LABEL_4;
      case 687:
      case 688:
      case 689:
      case 690:
      case 5176:
      case 5177:
      case 5178:
      case 5179:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 24112;
        goto LABEL_4;
      case 723:
      case 730:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 30800;
        goto LABEL_4;
      case 724:
      case 727:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 29920;
        goto LABEL_4;
      case 725:
      case 728:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 30096;
        goto LABEL_4;
      case 726:
      case 729:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 26928;
        goto LABEL_4;
      case 743:
      case 744:
      case 745:
      case 746:
      case 747:
      case 748:
      case 749:
      case 750:
      case 4581:
      case 4582:
      case 4583:
      case 4584:
      case 4585:
      case 4586:
      case 4587:
      case 4588:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 8976;
        goto LABEL_4;
      case 751:
      case 752:
      case 753:
      case 754:
      case 755:
      case 756:
      case 4589:
      case 4590:
      case 4591:
      case 4592:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 7392;
        goto LABEL_4;
      case 757:
      case 758:
      case 765:
      case 766:
      case 773:
      case 774:
      case 779:
      case 780:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 4928;
        goto LABEL_4;
      case 759:
      case 760:
      case 761:
      case 762:
      case 767:
      case 768:
      case 769:
      case 770:
      case 775:
      case 776:
      case 777:
      case 778:
      case 781:
      case 782:
      case 783:
      case 784:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 30272;
        goto LABEL_4;
      case 763:
      case 764:
      case 771:
      case 772:
      case 785:
      case 786:
      case 787:
      case 788:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 4400;
        goto LABEL_4;
      case 792:
      case 8267:
      case 8268:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 5456;
        goto LABEL_4;
      case 794:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 23760;
        goto LABEL_4;
      case 795:
      case 796:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 23936;
        goto LABEL_4;
      case 797:
      case 798:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 23232;
        goto LABEL_4;
      case 799:
      case 802:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 23408;
        goto LABEL_4;
      case 801:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 23584;
        goto LABEL_4;
      case 803:
      case 830:
      case 857:
      case 884:
      case 6056:
      case 6083:
      case 6110:
      case 6137:
      case 6164:
      case 6191:
      case 6218:
      case 6245:
      case 7952:
      case 7979:
      case 8006:
      case 8033:
      case 8060:
      case 8087:
      case 8114:
      case 8141:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 24640;
        goto LABEL_4;
      case 804:
      case 805:
      case 831:
      case 832:
      case 858:
      case 859:
      case 885:
      case 886:
      case 6057:
      case 6058:
      case 6084:
      case 6085:
      case 6111:
      case 6112:
      case 6138:
      case 6139:
      case 6165:
      case 6166:
      case 6192:
      case 6193:
      case 6219:
      case 6220:
      case 6246:
      case 6247:
      case 7953:
      case 7954:
      case 7980:
      case 7981:
      case 8007:
      case 8008:
      case 8034:
      case 8035:
      case 8061:
      case 8062:
      case 8088:
      case 8089:
      case 8115:
      case 8116:
      case 8142:
      case 8143:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 24816;
        goto LABEL_4;
      case 806:
      case 809:
      case 833:
      case 836:
      case 860:
      case 863:
      case 887:
      case 890:
      case 6059:
      case 6062:
      case 6086:
      case 6089:
      case 6113:
      case 6116:
      case 6140:
      case 6143:
      case 6167:
      case 6170:
      case 6194:
      case 6197:
      case 6221:
      case 6224:
      case 6248:
      case 6251:
      case 7955:
      case 7958:
      case 7982:
      case 7985:
      case 8009:
      case 8012:
      case 8036:
      case 8039:
      case 8063:
      case 8066:
      case 8090:
      case 8093:
      case 8117:
      case 8120:
      case 8144:
      case 8147:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 24992;
        goto LABEL_4;
      case 807:
      case 808:
      case 810:
      case 811:
      case 834:
      case 835:
      case 837:
      case 838:
      case 861:
      case 862:
      case 864:
      case 865:
      case 888:
      case 889:
      case 891:
      case 892:
      case 6060:
      case 6061:
      case 6063:
      case 6064:
      case 6087:
      case 6088:
      case 6090:
      case 6091:
      case 6114:
      case 6115:
      case 6117:
      case 6118:
      case 6141:
      case 6142:
      case 6144:
      case 6145:
      case 6168:
      case 6169:
      case 6171:
      case 6172:
      case 6195:
      case 6196:
      case 6198:
      case 6199:
      case 6222:
      case 6223:
      case 6225:
      case 6226:
      case 6249:
      case 6250:
      case 6252:
      case 6253:
      case 7956:
      case 7957:
      case 7959:
      case 7960:
      case 7983:
      case 7984:
      case 7986:
      case 7987:
      case 8010:
      case 8011:
      case 8013:
      case 8014:
      case 8037:
      case 8038:
      case 8040:
      case 8041:
      case 8064:
      case 8065:
      case 8067:
      case 8068:
      case 8091:
      case 8092:
      case 8094:
      case 8095:
      case 8118:
      case 8119:
      case 8121:
      case 8122:
      case 8145:
      case 8146:
      case 8148:
      case 8149:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 25168;
        goto LABEL_4;
      case 812:
      case 821:
      case 839:
      case 848:
      case 866:
      case 875:
      case 893:
      case 902:
      case 6065:
      case 6074:
      case 6092:
      case 6101:
      case 6119:
      case 6128:
      case 6146:
      case 6155:
      case 6173:
      case 6182:
      case 6200:
      case 6209:
      case 6227:
      case 6236:
      case 6254:
      case 6263:
      case 7961:
      case 7970:
      case 7988:
      case 7997:
      case 8015:
      case 8024:
      case 8042:
      case 8051:
      case 8069:
      case 8078:
      case 8096:
      case 8105:
      case 8123:
      case 8132:
      case 8150:
      case 8159:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 25872;
        goto LABEL_4;
      case 813:
      case 814:
      case 822:
      case 823:
      case 840:
      case 841:
      case 849:
      case 850:
      case 867:
      case 868:
      case 876:
      case 877:
      case 894:
      case 895:
      case 903:
      case 904:
      case 6066:
      case 6067:
      case 6075:
      case 6076:
      case 6093:
      case 6094:
      case 6102:
      case 6103:
      case 6120:
      case 6121:
      case 6129:
      case 6130:
      case 6147:
      case 6148:
      case 6156:
      case 6157:
      case 6174:
      case 6175:
      case 6183:
      case 6184:
      case 6201:
      case 6202:
      case 6210:
      case 6211:
      case 6228:
      case 6229:
      case 6237:
      case 6238:
      case 6255:
      case 6256:
      case 6264:
      case 6265:
      case 7962:
      case 7963:
      case 7971:
      case 7972:
      case 7989:
      case 7990:
      case 7998:
      case 7999:
      case 8016:
      case 8017:
      case 8025:
      case 8026:
      case 8043:
      case 8044:
      case 8052:
      case 8053:
      case 8070:
      case 8071:
      case 8079:
      case 8080:
      case 8097:
      case 8098:
      case 8106:
      case 8107:
      case 8124:
      case 8125:
      case 8133:
      case 8134:
      case 8151:
      case 8152:
      case 8160:
      case 8161:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 26048;
        goto LABEL_4;
      case 815:
      case 818:
      case 824:
      case 827:
      case 842:
      case 845:
      case 851:
      case 854:
      case 869:
      case 872:
      case 878:
      case 881:
      case 896:
      case 899:
      case 905:
      case 908:
      case 6068:
      case 6071:
      case 6077:
      case 6080:
      case 6095:
      case 6098:
      case 6104:
      case 6107:
      case 6122:
      case 6125:
      case 6131:
      case 6134:
      case 6149:
      case 6152:
      case 6158:
      case 6161:
      case 6176:
      case 6179:
      case 6185:
      case 6188:
      case 6203:
      case 6206:
      case 6212:
      case 6215:
      case 6230:
      case 6233:
      case 6239:
      case 6242:
      case 6257:
      case 6260:
      case 6266:
      case 6269:
      case 7964:
      case 7967:
      case 7973:
      case 7976:
      case 7991:
      case 7994:
      case 8000:
      case 8003:
      case 8018:
      case 8021:
      case 8027:
      case 8030:
      case 8045:
      case 8048:
      case 8054:
      case 8057:
      case 8072:
      case 8075:
      case 8081:
      case 8084:
      case 8099:
      case 8102:
      case 8108:
      case 8111:
      case 8126:
      case 8129:
      case 8135:
      case 8138:
      case 8153:
      case 8156:
      case 8162:
      case 8165:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 26224;
        goto LABEL_4;
      case 816:
      case 817:
      case 819:
      case 820:
      case 825:
      case 826:
      case 828:
      case 829:
      case 843:
      case 844:
      case 846:
      case 847:
      case 852:
      case 853:
      case 855:
      case 856:
      case 870:
      case 871:
      case 873:
      case 874:
      case 879:
      case 880:
      case 882:
      case 883:
      case 897:
      case 898:
      case 900:
      case 901:
      case 906:
      case 907:
      case 909:
      case 910:
      case 6069:
      case 6070:
      case 6072:
      case 6073:
      case 6078:
      case 6079:
      case 6081:
      case 6082:
      case 6096:
      case 6097:
      case 6099:
      case 6100:
      case 6105:
      case 6106:
      case 6108:
      case 6109:
      case 6123:
      case 6124:
      case 6126:
      case 6127:
      case 6132:
      case 6133:
      case 6135:
      case 6136:
      case 6150:
      case 6151:
      case 6153:
      case 6154:
      case 6159:
      case 6160:
      case 6162:
      case 6163:
      case 6177:
      case 6178:
      case 6180:
      case 6181:
      case 6186:
      case 6187:
      case 6189:
      case 6190:
      case 6204:
      case 6205:
      case 6207:
      case 6208:
      case 6213:
      case 6214:
      case 6216:
      case 6217:
      case 6231:
      case 6232:
      case 6234:
      case 6235:
      case 6240:
      case 6241:
      case 6243:
      case 6244:
      case 6258:
      case 6259:
      case 6261:
      case 6262:
      case 6267:
      case 6268:
      case 6270:
      case 6271:
      case 7965:
      case 7966:
      case 7968:
      case 7969:
      case 7974:
      case 7975:
      case 7977:
      case 7978:
      case 7992:
      case 7993:
      case 7995:
      case 7996:
      case 8001:
      case 8002:
      case 8004:
      case 8005:
      case 8019:
      case 8020:
      case 8022:
      case 8023:
      case 8028:
      case 8029:
      case 8031:
      case 8032:
      case 8046:
      case 8047:
      case 8049:
      case 8050:
      case 8055:
      case 8056:
      case 8058:
      case 8059:
      case 8073:
      case 8074:
      case 8076:
      case 8077:
      case 8082:
      case 8083:
      case 8085:
      case 8086:
      case 8100:
      case 8101:
      case 8103:
      case 8104:
      case 8109:
      case 8110:
      case 8112:
      case 8113:
      case 8127:
      case 8128:
      case 8130:
      case 8131:
      case 8136:
      case 8137:
      case 8139:
      case 8140:
      case 8154:
      case 8155:
      case 8157:
      case 8158:
      case 8163:
      case 8164:
      case 8166:
      case 8167:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 26400;
        goto LABEL_4;
      case 927:
      case 931:
      case 935:
      case 1107:
      case 1108:
      case 1110:
      case 1111:
      case 1116:
      case 1117:
      case 1119:
      case 1120:
      case 1125:
      case 1126:
      case 1128:
      case 1129:
      case 2376:
      case 2377:
      case 2379:
      case 2380:
      case 2394:
      case 2395:
      case 2397:
      case 2398:
      case 2412:
      case 2413:
      case 2415:
      case 2416:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 19536;
        goto LABEL_4;
      case 928:
      case 932:
      case 936:
      case 1109:
      case 1112:
      case 1118:
      case 1121:
      case 1127:
      case 1130:
      case 2375:
      case 2378:
      case 2393:
      case 2396:
      case 2411:
      case 2414:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 19360;
        goto LABEL_4;
      case 929:
      case 933:
      case 937:
      case 1113:
      case 1114:
      case 1122:
      case 1123:
      case 1131:
      case 1132:
      case 2373:
      case 2374:
      case 2391:
      case 2392:
      case 2409:
      case 2410:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 18656;
        goto LABEL_4;
      case 930:
      case 934:
      case 938:
      case 1115:
      case 1124:
      case 1133:
      case 2372:
      case 2390:
      case 2408:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 18480;
        goto LABEL_4;
      case 939:
      case 940:
      case 947:
      case 948:
      case 955:
      case 956:
      case 963:
      case 964:
      case 987:
      case 988:
      case 995:
      case 996:
      case 1236:
      case 1237:
      case 1238:
      case 1239:
      case 1240:
      case 1241:
      case 1245:
      case 1246:
      case 1247:
      case 1248:
      case 1249:
      case 1250:
      case 1263:
      case 1264:
      case 1265:
      case 1266:
      case 1267:
      case 1268:
      case 1272:
      case 1273:
      case 1274:
      case 1275:
      case 1276:
      case 1277:
      case 1290:
      case 1291:
      case 1292:
      case 1293:
      case 1294:
      case 1295:
      case 1299:
      case 1300:
      case 1301:
      case 1302:
      case 1303:
      case 1304:
      case 1317:
      case 1318:
      case 1319:
      case 1320:
      case 1321:
      case 1322:
      case 1326:
      case 1327:
      case 1328:
      case 1329:
      case 1330:
      case 1331:
      case 1344:
      case 1345:
      case 1346:
      case 1347:
      case 1348:
      case 1349:
      case 1353:
      case 1354:
      case 1355:
      case 1356:
      case 1357:
      case 1358:
      case 1371:
      case 1372:
      case 1373:
      case 1374:
      case 1375:
      case 1376:
      case 1380:
      case 1381:
      case 1382:
      case 1383:
      case 1384:
      case 1385:
      case 1398:
      case 1399:
      case 1400:
      case 1401:
      case 1402:
      case 1403:
      case 1407:
      case 1408:
      case 1409:
      case 1410:
      case 1411:
      case 1412:
      case 1425:
      case 1426:
      case 1427:
      case 1428:
      case 1429:
      case 1430:
      case 1434:
      case 1435:
      case 1436:
      case 1437:
      case 1438:
      case 1439:
      case 1620:
      case 1621:
      case 1622:
      case 1623:
      case 1624:
      case 1625:
      case 1629:
      case 1630:
      case 1631:
      case 1632:
      case 1633:
      case 1634:
      case 1647:
      case 1648:
      case 1649:
      case 1650:
      case 1651:
      case 1652:
      case 1656:
      case 1657:
      case 1658:
      case 1659:
      case 1660:
      case 1661:
      case 1674:
      case 1675:
      case 1676:
      case 1677:
      case 1678:
      case 1679:
      case 1683:
      case 1684:
      case 1685:
      case 1686:
      case 1687:
      case 1688:
      case 1701:
      case 1702:
      case 1703:
      case 1704:
      case 1705:
      case 1706:
      case 1710:
      case 1711:
      case 1712:
      case 1713:
      case 1714:
      case 1715:
      case 1800:
      case 1804:
      case 1808:
      case 1812:
      case 2446:
      case 2447:
      case 2448:
      case 2449:
      case 2450:
      case 2451:
      case 2452:
      case 2453:
      case 2458:
      case 2459:
      case 2460:
      case 2461:
      case 2462:
      case 2463:
      case 2464:
      case 2465:
      case 2482:
      case 2483:
      case 2484:
      case 2485:
      case 2486:
      case 2487:
      case 2488:
      case 2489:
      case 2494:
      case 2495:
      case 2496:
      case 2497:
      case 2498:
      case 2499:
      case 2500:
      case 2501:
      case 2518:
      case 2519:
      case 2520:
      case 2521:
      case 2522:
      case 2523:
      case 2524:
      case 2525:
      case 2530:
      case 2531:
      case 2532:
      case 2533:
      case 2534:
      case 2535:
      case 2536:
      case 2537:
      case 2554:
      case 2555:
      case 2556:
      case 2557:
      case 2558:
      case 2559:
      case 2560:
      case 2561:
      case 2566:
      case 2567:
      case 2568:
      case 2569:
      case 2570:
      case 2571:
      case 2572:
      case 2573:
      case 2590:
      case 2591:
      case 2592:
      case 2593:
      case 2594:
      case 2595:
      case 2596:
      case 2597:
      case 2602:
      case 2603:
      case 2604:
      case 2605:
      case 2606:
      case 2607:
      case 2608:
      case 2609:
      case 2626:
      case 2627:
      case 2628:
      case 2629:
      case 2630:
      case 2631:
      case 2632:
      case 2633:
      case 2638:
      case 2639:
      case 2640:
      case 2641:
      case 2642:
      case 2643:
      case 2644:
      case 2645:
      case 2662:
      case 2663:
      case 2664:
      case 2665:
      case 2666:
      case 2667:
      case 2668:
      case 2669:
      case 2674:
      case 2675:
      case 2676:
      case 2677:
      case 2678:
      case 2679:
      case 2680:
      case 2681:
      case 2698:
      case 2699:
      case 2700:
      case 2701:
      case 2702:
      case 2703:
      case 2704:
      case 2705:
      case 2710:
      case 2711:
      case 2712:
      case 2713:
      case 2714:
      case 2715:
      case 2716:
      case 2717:
      case 2734:
      case 2735:
      case 2736:
      case 2737:
      case 2738:
      case 2739:
      case 2740:
      case 2741:
      case 2746:
      case 2747:
      case 2748:
      case 2749:
      case 2750:
      case 2751:
      case 2752:
      case 2753:
      case 2770:
      case 2771:
      case 2772:
      case 2773:
      case 2774:
      case 2775:
      case 2776:
      case 2777:
      case 2782:
      case 2783:
      case 2784:
      case 2785:
      case 2786:
      case 2787:
      case 2788:
      case 2789:
      case 2806:
      case 2807:
      case 2808:
      case 2809:
      case 2810:
      case 2811:
      case 2812:
      case 2813:
      case 2818:
      case 2819:
      case 2820:
      case 2821:
      case 2822:
      case 2823:
      case 2824:
      case 2825:
      case 2842:
      case 2843:
      case 2844:
      case 2845:
      case 2846:
      case 2847:
      case 2848:
      case 2849:
      case 2854:
      case 2855:
      case 2856:
      case 2857:
      case 2858:
      case 2859:
      case 2860:
      case 2861:
      case 3062:
      case 3063:
      case 3064:
      case 3065:
      case 3066:
      case 3067:
      case 3068:
      case 3069:
      case 3074:
      case 3075:
      case 3076:
      case 3077:
      case 3078:
      case 3079:
      case 3080:
      case 3081:
      case 3098:
      case 3099:
      case 3100:
      case 3101:
      case 3102:
      case 3103:
      case 3104:
      case 3105:
      case 3110:
      case 3111:
      case 3112:
      case 3113:
      case 3114:
      case 3115:
      case 3116:
      case 3117:
      case 3134:
      case 3135:
      case 3136:
      case 3137:
      case 3138:
      case 3139:
      case 3140:
      case 3141:
      case 3146:
      case 3147:
      case 3148:
      case 3149:
      case 3150:
      case 3151:
      case 3152:
      case 3153:
      case 3170:
      case 3171:
      case 3172:
      case 3173:
      case 3174:
      case 3175:
      case 3176:
      case 3177:
      case 3182:
      case 3183:
      case 3184:
      case 3185:
      case 3186:
      case 3187:
      case 3188:
      case 3189:
      case 3206:
      case 3207:
      case 3208:
      case 3209:
      case 3210:
      case 3211:
      case 3212:
      case 3213:
      case 3218:
      case 3219:
      case 3220:
      case 3221:
      case 3222:
      case 3223:
      case 3224:
      case 3225:
      case 3242:
      case 3243:
      case 3244:
      case 3245:
      case 3246:
      case 3247:
      case 3248:
      case 3249:
      case 3254:
      case 3255:
      case 3256:
      case 3257:
      case 3258:
      case 3259:
      case 3260:
      case 3261:
      case 3278:
      case 3279:
      case 3280:
      case 3281:
      case 3282:
      case 3283:
      case 3284:
      case 3285:
      case 3290:
      case 3291:
      case 3292:
      case 3293:
      case 3294:
      case 3295:
      case 3296:
      case 3297:
      case 3314:
      case 3315:
      case 3316:
      case 3317:
      case 3318:
      case 3319:
      case 3320:
      case 3321:
      case 3326:
      case 3327:
      case 3328:
      case 3329:
      case 3330:
      case 3331:
      case 3332:
      case 3333:
      case 3350:
      case 3351:
      case 3352:
      case 3353:
      case 3354:
      case 3355:
      case 3356:
      case 3357:
      case 3362:
      case 3363:
      case 3364:
      case 3365:
      case 3366:
      case 3367:
      case 3368:
      case 3369:
      case 3386:
      case 3387:
      case 3388:
      case 3389:
      case 3390:
      case 3391:
      case 3392:
      case 3393:
      case 3398:
      case 3399:
      case 3400:
      case 3401:
      case 3402:
      case 3403:
      case 3404:
      case 3405:
      case 3422:
      case 3423:
      case 3424:
      case 3425:
      case 3426:
      case 3427:
      case 3428:
      case 3429:
      case 3434:
      case 3435:
      case 3436:
      case 3437:
      case 3438:
      case 3439:
      case 3440:
      case 3441:
      case 3458:
      case 3459:
      case 3460:
      case 3461:
      case 3462:
      case 3463:
      case 3464:
      case 3465:
      case 3470:
      case 3471:
      case 3472:
      case 3473:
      case 3474:
      case 3475:
      case 3476:
      case 3477:
      case 5401:
      case 5402:
      case 5403:
      case 5404:
      case 5405:
      case 5411:
      case 5412:
      case 5413:
      case 5414:
      case 5415:
      case 5461:
      case 5462:
      case 5463:
      case 5464:
      case 5465:
      case 5471:
      case 5472:
      case 5473:
      case 5474:
      case 5475:
      case 5561:
      case 5562:
      case 5563:
      case 5564:
      case 5565:
      case 5571:
      case 5572:
      case 5573:
      case 5574:
      case 5575:
      case 5621:
      case 5622:
      case 5623:
      case 5624:
      case 5625:
      case 5631:
      case 5632:
      case 5633:
      case 5634:
      case 5635:
      case 5641:
      case 5642:
      case 5643:
      case 5644:
      case 5645:
      case 5651:
      case 5652:
      case 5653:
      case 5654:
      case 5655:
      case 5701:
      case 5702:
      case 5703:
      case 5704:
      case 5705:
      case 5711:
      case 5712:
      case 5713:
      case 5714:
      case 5715:
      case 5801:
      case 5802:
      case 5803:
      case 5804:
      case 5805:
      case 5811:
      case 5812:
      case 5813:
      case 5814:
      case 5815:
      case 5861:
      case 5862:
      case 5863:
      case 5864:
      case 5865:
      case 5871:
      case 5872:
      case 5873:
      case 5874:
      case 5875:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 26752;
        goto LABEL_4;
      case 941:
      case 942:
      case 949:
      case 950:
      case 957:
      case 958:
      case 965:
      case 966:
      case 989:
      case 990:
      case 997:
      case 998:
      case 1242:
      case 1243:
      case 1244:
      case 1251:
      case 1252:
      case 1253:
      case 1269:
      case 1270:
      case 1271:
      case 1278:
      case 1279:
      case 1280:
      case 1296:
      case 1297:
      case 1298:
      case 1305:
      case 1306:
      case 1307:
      case 1323:
      case 1324:
      case 1325:
      case 1332:
      case 1333:
      case 1334:
      case 1350:
      case 1351:
      case 1352:
      case 1359:
      case 1360:
      case 1361:
      case 1377:
      case 1378:
      case 1379:
      case 1386:
      case 1387:
      case 1388:
      case 1404:
      case 1405:
      case 1406:
      case 1413:
      case 1414:
      case 1415:
      case 1431:
      case 1432:
      case 1433:
      case 1440:
      case 1441:
      case 1442:
      case 1626:
      case 1627:
      case 1628:
      case 1635:
      case 1636:
      case 1637:
      case 1653:
      case 1654:
      case 1655:
      case 1662:
      case 1663:
      case 1664:
      case 1680:
      case 1681:
      case 1682:
      case 1689:
      case 1690:
      case 1691:
      case 1707:
      case 1708:
      case 1709:
      case 1716:
      case 1717:
      case 1718:
      case 1801:
      case 1805:
      case 1809:
      case 1813:
      case 2442:
      case 2443:
      case 2444:
      case 2445:
      case 2454:
      case 2455:
      case 2456:
      case 2457:
      case 2478:
      case 2479:
      case 2480:
      case 2481:
      case 2490:
      case 2491:
      case 2492:
      case 2493:
      case 2514:
      case 2515:
      case 2516:
      case 2517:
      case 2526:
      case 2527:
      case 2528:
      case 2529:
      case 2550:
      case 2551:
      case 2552:
      case 2553:
      case 2562:
      case 2563:
      case 2564:
      case 2565:
      case 2586:
      case 2587:
      case 2588:
      case 2589:
      case 2598:
      case 2599:
      case 2600:
      case 2601:
      case 2622:
      case 2623:
      case 2624:
      case 2625:
      case 2634:
      case 2635:
      case 2636:
      case 2637:
      case 2658:
      case 2659:
      case 2660:
      case 2661:
      case 2670:
      case 2671:
      case 2672:
      case 2673:
      case 2694:
      case 2695:
      case 2696:
      case 2697:
      case 2706:
      case 2707:
      case 2708:
      case 2709:
      case 2730:
      case 2731:
      case 2732:
      case 2733:
      case 2742:
      case 2743:
      case 2744:
      case 2745:
      case 2766:
      case 2767:
      case 2768:
      case 2769:
      case 2778:
      case 2779:
      case 2780:
      case 2781:
      case 2802:
      case 2803:
      case 2804:
      case 2805:
      case 2814:
      case 2815:
      case 2816:
      case 2817:
      case 2838:
      case 2839:
      case 2840:
      case 2841:
      case 2850:
      case 2851:
      case 2852:
      case 2853:
      case 3058:
      case 3059:
      case 3060:
      case 3061:
      case 3070:
      case 3071:
      case 3072:
      case 3073:
      case 3094:
      case 3095:
      case 3096:
      case 3097:
      case 3106:
      case 3107:
      case 3108:
      case 3109:
      case 3130:
      case 3131:
      case 3132:
      case 3133:
      case 3142:
      case 3143:
      case 3144:
      case 3145:
      case 3166:
      case 3167:
      case 3168:
      case 3169:
      case 3178:
      case 3179:
      case 3180:
      case 3181:
      case 3202:
      case 3203:
      case 3204:
      case 3205:
      case 3214:
      case 3215:
      case 3216:
      case 3217:
      case 3238:
      case 3239:
      case 3240:
      case 3241:
      case 3250:
      case 3251:
      case 3252:
      case 3253:
      case 3274:
      case 3275:
      case 3276:
      case 3277:
      case 3286:
      case 3287:
      case 3288:
      case 3289:
      case 3310:
      case 3311:
      case 3312:
      case 3313:
      case 3322:
      case 3323:
      case 3324:
      case 3325:
      case 3346:
      case 3347:
      case 3348:
      case 3349:
      case 3358:
      case 3359:
      case 3360:
      case 3361:
      case 3382:
      case 3383:
      case 3384:
      case 3385:
      case 3394:
      case 3395:
      case 3396:
      case 3397:
      case 3418:
      case 3419:
      case 3420:
      case 3421:
      case 3430:
      case 3431:
      case 3432:
      case 3433:
      case 3454:
      case 3455:
      case 3456:
      case 3457:
      case 3466:
      case 3467:
      case 3468:
      case 3469:
      case 5396:
      case 5397:
      case 5398:
      case 5399:
      case 5400:
      case 5406:
      case 5407:
      case 5408:
      case 5409:
      case 5410:
      case 5456:
      case 5457:
      case 5458:
      case 5459:
      case 5460:
      case 5466:
      case 5467:
      case 5468:
      case 5469:
      case 5470:
      case 5556:
      case 5557:
      case 5558:
      case 5559:
      case 5560:
      case 5566:
      case 5567:
      case 5568:
      case 5569:
      case 5570:
      case 5616:
      case 5617:
      case 5618:
      case 5619:
      case 5620:
      case 5626:
      case 5627:
      case 5628:
      case 5629:
      case 5630:
      case 5636:
      case 5637:
      case 5638:
      case 5639:
      case 5640:
      case 5646:
      case 5647:
      case 5648:
      case 5649:
      case 5650:
      case 5696:
      case 5697:
      case 5698:
      case 5699:
      case 5700:
      case 5706:
      case 5707:
      case 5708:
      case 5709:
      case 5710:
      case 5796:
      case 5797:
      case 5798:
      case 5799:
      case 5800:
      case 5806:
      case 5807:
      case 5808:
      case 5809:
      case 5810:
      case 5856:
      case 5857:
      case 5858:
      case 5859:
      case 5860:
      case 5866:
      case 5867:
      case 5868:
      case 5869:
      case 5870:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 26576;
        goto LABEL_4;
      case 943:
      case 944:
      case 951:
      case 952:
      case 959:
      case 960:
      case 967:
      case 968:
      case 991:
      case 992:
      case 999:
      case 1000:
      case 1254:
      case 1255:
      case 1256:
      case 1257:
      case 1258:
      case 1259:
      case 1281:
      case 1282:
      case 1283:
      case 1284:
      case 1285:
      case 1286:
      case 1308:
      case 1309:
      case 1310:
      case 1311:
      case 1312:
      case 1313:
      case 1335:
      case 1336:
      case 1337:
      case 1338:
      case 1339:
      case 1340:
      case 1362:
      case 1363:
      case 1364:
      case 1365:
      case 1366:
      case 1367:
      case 1389:
      case 1390:
      case 1391:
      case 1392:
      case 1393:
      case 1394:
      case 1416:
      case 1417:
      case 1418:
      case 1419:
      case 1420:
      case 1421:
      case 1443:
      case 1444:
      case 1445:
      case 1446:
      case 1447:
      case 1448:
      case 1638:
      case 1639:
      case 1640:
      case 1641:
      case 1642:
      case 1643:
      case 1665:
      case 1666:
      case 1667:
      case 1668:
      case 1669:
      case 1670:
      case 1692:
      case 1693:
      case 1694:
      case 1695:
      case 1696:
      case 1697:
      case 1719:
      case 1720:
      case 1721:
      case 1722:
      case 1723:
      case 1724:
      case 1802:
      case 1806:
      case 1810:
      case 1814:
      case 2434:
      case 2435:
      case 2436:
      case 2437:
      case 2438:
      case 2439:
      case 2440:
      case 2441:
      case 2470:
      case 2471:
      case 2472:
      case 2473:
      case 2474:
      case 2475:
      case 2476:
      case 2477:
      case 2506:
      case 2507:
      case 2508:
      case 2509:
      case 2510:
      case 2511:
      case 2512:
      case 2513:
      case 2542:
      case 2543:
      case 2544:
      case 2545:
      case 2546:
      case 2547:
      case 2548:
      case 2549:
      case 2578:
      case 2579:
      case 2580:
      case 2581:
      case 2582:
      case 2583:
      case 2584:
      case 2585:
      case 2614:
      case 2615:
      case 2616:
      case 2617:
      case 2618:
      case 2619:
      case 2620:
      case 2621:
      case 2650:
      case 2651:
      case 2652:
      case 2653:
      case 2654:
      case 2655:
      case 2656:
      case 2657:
      case 2686:
      case 2687:
      case 2688:
      case 2689:
      case 2690:
      case 2691:
      case 2692:
      case 2693:
      case 2722:
      case 2723:
      case 2724:
      case 2725:
      case 2726:
      case 2727:
      case 2728:
      case 2729:
      case 2758:
      case 2759:
      case 2760:
      case 2761:
      case 2762:
      case 2763:
      case 2764:
      case 2765:
      case 2794:
      case 2795:
      case 2796:
      case 2797:
      case 2798:
      case 2799:
      case 2800:
      case 2801:
      case 2830:
      case 2831:
      case 2832:
      case 2833:
      case 2834:
      case 2835:
      case 2836:
      case 2837:
      case 3050:
      case 3051:
      case 3052:
      case 3053:
      case 3054:
      case 3055:
      case 3056:
      case 3057:
      case 3086:
      case 3087:
      case 3088:
      case 3089:
      case 3090:
      case 3091:
      case 3092:
      case 3093:
      case 3122:
      case 3123:
      case 3124:
      case 3125:
      case 3126:
      case 3127:
      case 3128:
      case 3129:
      case 3158:
      case 3159:
      case 3160:
      case 3161:
      case 3162:
      case 3163:
      case 3164:
      case 3165:
      case 3194:
      case 3195:
      case 3196:
      case 3197:
      case 3198:
      case 3199:
      case 3200:
      case 3201:
      case 3230:
      case 3231:
      case 3232:
      case 3233:
      case 3234:
      case 3235:
      case 3236:
      case 3237:
      case 3266:
      case 3267:
      case 3268:
      case 3269:
      case 3270:
      case 3271:
      case 3272:
      case 3273:
      case 3302:
      case 3303:
      case 3304:
      case 3305:
      case 3306:
      case 3307:
      case 3308:
      case 3309:
      case 3338:
      case 3339:
      case 3340:
      case 3341:
      case 3342:
      case 3343:
      case 3344:
      case 3345:
      case 3374:
      case 3375:
      case 3376:
      case 3377:
      case 3378:
      case 3379:
      case 3380:
      case 3381:
      case 3410:
      case 3411:
      case 3412:
      case 3413:
      case 3414:
      case 3415:
      case 3416:
      case 3417:
      case 3446:
      case 3447:
      case 3448:
      case 3449:
      case 3450:
      case 3451:
      case 3452:
      case 3453:
      case 5426:
      case 5427:
      case 5428:
      case 5429:
      case 5430:
      case 5431:
      case 5432:
      case 5433:
      case 5434:
      case 5435:
      case 5446:
      case 5447:
      case 5448:
      case 5449:
      case 5450:
      case 5451:
      case 5452:
      case 5453:
      case 5454:
      case 5455:
      case 5486:
      case 5487:
      case 5488:
      case 5489:
      case 5490:
      case 5491:
      case 5492:
      case 5493:
      case 5494:
      case 5495:
      case 5506:
      case 5507:
      case 5508:
      case 5509:
      case 5510:
      case 5511:
      case 5512:
      case 5513:
      case 5514:
      case 5515:
      case 5526:
      case 5527:
      case 5528:
      case 5529:
      case 5530:
      case 5531:
      case 5532:
      case 5533:
      case 5534:
      case 5535:
      case 5546:
      case 5547:
      case 5548:
      case 5549:
      case 5550:
      case 5551:
      case 5552:
      case 5553:
      case 5554:
      case 5555:
      case 5586:
      case 5587:
      case 5588:
      case 5589:
      case 5590:
      case 5591:
      case 5592:
      case 5593:
      case 5594:
      case 5595:
      case 5606:
      case 5607:
      case 5608:
      case 5609:
      case 5610:
      case 5611:
      case 5612:
      case 5613:
      case 5614:
      case 5615:
      case 5666:
      case 5667:
      case 5668:
      case 5669:
      case 5670:
      case 5671:
      case 5672:
      case 5673:
      case 5674:
      case 5675:
      case 5686:
      case 5687:
      case 5688:
      case 5689:
      case 5690:
      case 5691:
      case 5692:
      case 5693:
      case 5694:
      case 5695:
      case 5726:
      case 5727:
      case 5728:
      case 5729:
      case 5730:
      case 5731:
      case 5732:
      case 5733:
      case 5734:
      case 5735:
      case 5746:
      case 5747:
      case 5748:
      case 5749:
      case 5750:
      case 5751:
      case 5752:
      case 5753:
      case 5754:
      case 5755:
      case 5766:
      case 5767:
      case 5768:
      case 5769:
      case 5770:
      case 5771:
      case 5772:
      case 5773:
      case 5774:
      case 5775:
      case 5786:
      case 5787:
      case 5788:
      case 5789:
      case 5790:
      case 5791:
      case 5792:
      case 5793:
      case 5794:
      case 5795:
      case 5826:
      case 5827:
      case 5828:
      case 5829:
      case 5830:
      case 5831:
      case 5832:
      case 5833:
      case 5834:
      case 5835:
      case 5846:
      case 5847:
      case 5848:
      case 5849:
      case 5850:
      case 5851:
      case 5852:
      case 5853:
      case 5854:
      case 5855:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 25520;
        goto LABEL_4;
      case 945:
      case 946:
      case 953:
      case 954:
      case 961:
      case 962:
      case 969:
      case 970:
      case 993:
      case 994:
      case 1001:
      case 1002:
      case 1260:
      case 1261:
      case 1262:
      case 1287:
      case 1288:
      case 1289:
      case 1314:
      case 1315:
      case 1316:
      case 1341:
      case 1342:
      case 1343:
      case 1368:
      case 1369:
      case 1370:
      case 1395:
      case 1396:
      case 1397:
      case 1422:
      case 1423:
      case 1424:
      case 1449:
      case 1450:
      case 1451:
      case 1644:
      case 1645:
      case 1646:
      case 1671:
      case 1672:
      case 1673:
      case 1698:
      case 1699:
      case 1700:
      case 1725:
      case 1726:
      case 1727:
      case 1803:
      case 1807:
      case 1811:
      case 1815:
      case 2430:
      case 2431:
      case 2432:
      case 2433:
      case 2466:
      case 2467:
      case 2468:
      case 2469:
      case 2502:
      case 2503:
      case 2504:
      case 2505:
      case 2538:
      case 2539:
      case 2540:
      case 2541:
      case 2574:
      case 2575:
      case 2576:
      case 2577:
      case 2610:
      case 2611:
      case 2612:
      case 2613:
      case 2646:
      case 2647:
      case 2648:
      case 2649:
      case 2682:
      case 2683:
      case 2684:
      case 2685:
      case 2718:
      case 2719:
      case 2720:
      case 2721:
      case 2754:
      case 2755:
      case 2756:
      case 2757:
      case 2790:
      case 2791:
      case 2792:
      case 2793:
      case 2826:
      case 2827:
      case 2828:
      case 2829:
      case 3046:
      case 3047:
      case 3048:
      case 3049:
      case 3082:
      case 3083:
      case 3084:
      case 3085:
      case 3118:
      case 3119:
      case 3120:
      case 3121:
      case 3154:
      case 3155:
      case 3156:
      case 3157:
      case 3190:
      case 3191:
      case 3192:
      case 3193:
      case 3226:
      case 3227:
      case 3228:
      case 3229:
      case 3262:
      case 3263:
      case 3264:
      case 3265:
      case 3298:
      case 3299:
      case 3300:
      case 3301:
      case 3334:
      case 3335:
      case 3336:
      case 3337:
      case 3370:
      case 3371:
      case 3372:
      case 3373:
      case 3406:
      case 3407:
      case 3408:
      case 3409:
      case 3442:
      case 3443:
      case 3444:
      case 3445:
      case 5416:
      case 5417:
      case 5418:
      case 5419:
      case 5420:
      case 5421:
      case 5422:
      case 5423:
      case 5424:
      case 5425:
      case 5436:
      case 5437:
      case 5438:
      case 5439:
      case 5440:
      case 5441:
      case 5442:
      case 5443:
      case 5444:
      case 5445:
      case 5476:
      case 5477:
      case 5478:
      case 5479:
      case 5480:
      case 5481:
      case 5482:
      case 5483:
      case 5484:
      case 5485:
      case 5496:
      case 5497:
      case 5498:
      case 5499:
      case 5500:
      case 5501:
      case 5502:
      case 5503:
      case 5504:
      case 5505:
      case 5516:
      case 5517:
      case 5518:
      case 5519:
      case 5520:
      case 5521:
      case 5522:
      case 5523:
      case 5524:
      case 5525:
      case 5536:
      case 5537:
      case 5538:
      case 5539:
      case 5540:
      case 5541:
      case 5542:
      case 5543:
      case 5544:
      case 5545:
      case 5576:
      case 5577:
      case 5578:
      case 5579:
      case 5580:
      case 5581:
      case 5582:
      case 5583:
      case 5584:
      case 5585:
      case 5596:
      case 5597:
      case 5598:
      case 5599:
      case 5600:
      case 5601:
      case 5602:
      case 5603:
      case 5604:
      case 5605:
      case 5656:
      case 5657:
      case 5658:
      case 5659:
      case 5660:
      case 5661:
      case 5662:
      case 5663:
      case 5664:
      case 5665:
      case 5676:
      case 5677:
      case 5678:
      case 5679:
      case 5680:
      case 5681:
      case 5682:
      case 5683:
      case 5684:
      case 5685:
      case 5716:
      case 5717:
      case 5718:
      case 5719:
      case 5720:
      case 5721:
      case 5722:
      case 5723:
      case 5724:
      case 5725:
      case 5736:
      case 5737:
      case 5738:
      case 5739:
      case 5740:
      case 5741:
      case 5742:
      case 5743:
      case 5744:
      case 5745:
      case 5756:
      case 5757:
      case 5758:
      case 5759:
      case 5760:
      case 5761:
      case 5762:
      case 5763:
      case 5764:
      case 5765:
      case 5776:
      case 5777:
      case 5778:
      case 5779:
      case 5780:
      case 5781:
      case 5782:
      case 5783:
      case 5784:
      case 5785:
      case 5816:
      case 5817:
      case 5818:
      case 5819:
      case 5820:
      case 5821:
      case 5822:
      case 5823:
      case 5824:
      case 5825:
      case 5836:
      case 5837:
      case 5838:
      case 5839:
      case 5840:
      case 5841:
      case 5842:
      case 5843:
      case 5844:
      case 5845:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 25344;
        goto LABEL_4;
      case 971:
      case 975:
      case 979:
      case 983:
      case 1452:
      case 1453:
      case 1455:
      case 1456:
      case 1461:
      case 1462:
      case 1464:
      case 1465:
      case 1470:
      case 1471:
      case 1473:
      case 1474:
      case 1479:
      case 1480:
      case 1482:
      case 1483:
      case 1488:
      case 1489:
      case 1491:
      case 1492:
      case 1497:
      case 1498:
      case 1500:
      case 1501:
      case 1506:
      case 1507:
      case 1509:
      case 1510:
      case 1515:
      case 1516:
      case 1518:
      case 1519:
      case 1524:
      case 1525:
      case 1527:
      case 1528:
      case 1533:
      case 1534:
      case 1536:
      case 1537:
      case 1542:
      case 1543:
      case 1545:
      case 1546:
      case 1551:
      case 1552:
      case 1554:
      case 1555:
      case 1560:
      case 1561:
      case 1563:
      case 1564:
      case 1569:
      case 1570:
      case 1572:
      case 1573:
      case 1578:
      case 1579:
      case 1581:
      case 1582:
      case 1587:
      case 1588:
      case 1590:
      case 1591:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 20592;
        goto LABEL_4;
      case 972:
      case 976:
      case 980:
      case 984:
      case 1454:
      case 1457:
      case 1463:
      case 1466:
      case 1472:
      case 1475:
      case 1481:
      case 1484:
      case 1490:
      case 1493:
      case 1499:
      case 1502:
      case 1508:
      case 1511:
      case 1517:
      case 1520:
      case 1526:
      case 1529:
      case 1535:
      case 1538:
      case 1544:
      case 1547:
      case 1553:
      case 1556:
      case 1562:
      case 1565:
      case 1571:
      case 1574:
      case 1580:
      case 1583:
      case 1589:
      case 1592:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 20416;
        goto LABEL_4;
      case 973:
      case 977:
      case 981:
      case 985:
      case 1458:
      case 1459:
      case 1467:
      case 1468:
      case 1476:
      case 1477:
      case 1485:
      case 1486:
      case 1494:
      case 1495:
      case 1503:
      case 1504:
      case 1512:
      case 1513:
      case 1521:
      case 1522:
      case 1530:
      case 1531:
      case 1539:
      case 1540:
      case 1548:
      case 1549:
      case 1557:
      case 1558:
      case 1566:
      case 1567:
      case 1575:
      case 1576:
      case 1584:
      case 1585:
      case 1593:
      case 1594:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 20240;
        goto LABEL_4;
      case 974:
      case 978:
      case 982:
      case 986:
      case 1460:
      case 1469:
      case 1478:
      case 1487:
      case 1496:
      case 1505:
      case 1514:
      case 1523:
      case 1532:
      case 1541:
      case 1550:
      case 1559:
      case 1568:
      case 1577:
      case 1586:
      case 1595:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 20064;
        goto LABEL_4;
      case 1019:
      case 1020:
      case 1888:
      case 1889:
      case 1892:
      case 1893:
      case 1900:
      case 1901:
      case 1904:
      case 1905:
      case 1924:
      case 1925:
      case 1928:
      case 1929:
      case 1936:
      case 1937:
      case 1940:
      case 1941:
      case 2079:
      case 2080:
      case 2083:
      case 2084:
      case 2091:
      case 2092:
      case 2095:
      case 2096:
      case 2115:
      case 2116:
      case 2119:
      case 2120:
      case 2127:
      case 2128:
      case 2131:
      case 2132:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 29216;
        goto LABEL_4;
      case 1021:
      case 1022:
      case 1890:
      case 1891:
      case 1894:
      case 1895:
      case 1902:
      case 1903:
      case 1906:
      case 1907:
      case 1926:
      case 1927:
      case 1930:
      case 1931:
      case 1938:
      case 1939:
      case 1942:
      case 1943:
      case 2081:
      case 2082:
      case 2085:
      case 2086:
      case 2093:
      case 2094:
      case 2097:
      case 2098:
      case 2117:
      case 2118:
      case 2121:
      case 2122:
      case 2129:
      case 2130:
      case 2133:
      case 2134:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 29568;
        goto LABEL_4;
      case 1023:
      case 1024:
      case 1896:
      case 1897:
      case 1908:
      case 1909:
      case 1932:
      case 1933:
      case 1944:
      case 1945:
      case 2087:
      case 2088:
      case 2099:
      case 2100:
      case 2123:
      case 2124:
      case 2135:
      case 2136:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 28512;
        goto LABEL_4;
      case 1025:
      case 1026:
      case 1898:
      case 1899:
      case 1910:
      case 1911:
      case 1934:
      case 1935:
      case 1946:
      case 1947:
      case 2089:
      case 2090:
      case 2101:
      case 2102:
      case 2125:
      case 2126:
      case 2137:
      case 2138:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 28864;
        goto LABEL_4;
      case 1027:
      case 1028:
      case 1912:
      case 1913:
      case 1916:
      case 1917:
      case 1948:
      case 1949:
      case 1952:
      case 1953:
      case 2103:
      case 2104:
      case 2107:
      case 2108:
      case 2139:
      case 2140:
      case 2143:
      case 2144:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 27808;
        goto LABEL_4;
      case 1029:
      case 1030:
      case 1914:
      case 1915:
      case 1918:
      case 1919:
      case 1950:
      case 1951:
      case 1954:
      case 1955:
      case 2105:
      case 2106:
      case 2109:
      case 2110:
      case 2141:
      case 2142:
      case 2145:
      case 2146:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 28160;
        goto LABEL_4;
      case 1031:
      case 1032:
      case 1920:
      case 1921:
      case 1956:
      case 1957:
      case 2111:
      case 2112:
      case 2147:
      case 2148:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 27104;
        goto LABEL_4;
      case 1033:
      case 1034:
      case 1922:
      case 1923:
      case 1958:
      case 1959:
      case 2113:
      case 2114:
      case 2149:
      case 2150:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 27456;
        goto LABEL_4;
      case 1996:
      case 2005:
      case 2014:
      case 2381:
      case 2399:
      case 2417:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 18832;
        goto LABEL_4;
      case 1997:
      case 1998:
      case 2006:
      case 2007:
      case 2015:
      case 2016:
      case 2382:
      case 2383:
      case 2400:
      case 2401:
      case 2418:
      case 2419:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 19008;
        goto LABEL_4;
      case 1999:
      case 2002:
      case 2008:
      case 2011:
      case 2017:
      case 2020:
      case 2384:
      case 2387:
      case 2402:
      case 2405:
      case 2420:
      case 2423:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 19712;
        goto LABEL_4;
      case 2000:
      case 2001:
      case 2003:
      case 2004:
      case 2009:
      case 2010:
      case 2012:
      case 2013:
      case 2018:
      case 2019:
      case 2021:
      case 2022:
      case 2385:
      case 2386:
      case 2388:
      case 2389:
      case 2403:
      case 2404:
      case 2406:
      case 2407:
      case 2421:
      case 2422:
      case 2424:
      case 2425:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 19888;
        goto LABEL_4;
      case 2862:
      case 2868:
      case 2874:
      case 2934:
      case 2940:
      case 2946:
      case 2952:
      case 2958:
      case 2964:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 8624;
        goto LABEL_4;
      case 2863:
      case 2864:
      case 2869:
      case 2870:
      case 2875:
      case 2876:
      case 2935:
      case 2936:
      case 2941:
      case 2942:
      case 2947:
      case 2948:
      case 2953:
      case 2954:
      case 2959:
      case 2960:
      case 2965:
      case 2966:
      case 2974:
      case 2975:
      case 2980:
      case 2981:
      case 3005:
      case 3006:
      case 3010:
      case 3011:
      case 3035:
      case 3036:
      case 3040:
      case 3041:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 8272;
        goto LABEL_4;
      case 2865:
      case 2871:
      case 2877:
      case 2937:
      case 2943:
      case 2949:
      case 2955:
      case 2961:
      case 2967:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 7744;
        goto LABEL_4;
      case 2866:
      case 2867:
      case 2872:
      case 2873:
      case 2878:
      case 2879:
      case 2938:
      case 2939:
      case 2944:
      case 2945:
      case 2950:
      case 2951:
      case 2956:
      case 2957:
      case 2962:
      case 2963:
      case 2968:
      case 2969:
      case 2970:
      case 2971:
      case 2972:
      case 2973:
      case 2976:
      case 2977:
      case 2978:
      case 2979:
      case 2985:
      case 2986:
      case 2990:
      case 2991:
      case 2995:
      case 2996:
      case 3000:
      case 3001:
      case 3015:
      case 3016:
      case 3020:
      case 3021:
      case 3025:
      case 3026:
      case 3030:
      case 3031:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 7568;
        goto LABEL_4;
      case 2880:
      case 2886:
      case 2892:
      case 2898:
      case 2904:
      case 2910:
      case 2916:
      case 2922:
      case 2928:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 8800;
        goto LABEL_4;
      case 2881:
      case 2882:
      case 2887:
      case 2888:
      case 2893:
      case 2894:
      case 2899:
      case 2900:
      case 2905:
      case 2906:
      case 2911:
      case 2912:
      case 2917:
      case 2918:
      case 2923:
      case 2924:
      case 2929:
      case 2930:
      case 3002:
      case 3003:
      case 3004:
      case 3007:
      case 3008:
      case 3009:
      case 3032:
      case 3033:
      case 3034:
      case 3037:
      case 3038:
      case 3039:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 8448;
        goto LABEL_4;
      case 2883:
      case 2889:
      case 2895:
      case 2901:
      case 2907:
      case 2913:
      case 2919:
      case 2925:
      case 2931:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 8096;
        goto LABEL_4;
      case 2884:
      case 2885:
      case 2890:
      case 2891:
      case 2896:
      case 2897:
      case 2902:
      case 2903:
      case 2908:
      case 2909:
      case 2914:
      case 2915:
      case 2920:
      case 2921:
      case 2926:
      case 2927:
      case 2932:
      case 2933:
      case 2982:
      case 2983:
      case 2984:
      case 2987:
      case 2988:
      case 2989:
      case 2992:
      case 2993:
      case 2994:
      case 2997:
      case 2998:
      case 2999:
      case 3012:
      case 3013:
      case 3014:
      case 3017:
      case 3018:
      case 3019:
      case 3022:
      case 3023:
      case 3024:
      case 3027:
      case 3028:
      case 3029:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 7920;
        goto LABEL_4;
      case 3042:
      case 3043:
      case 3044:
      case 3045:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 4224;
        goto LABEL_4;
      case 3490:
      case 3491:
      case 3526:
      case 3527:
      case 3562:
      case 3563:
      case 3598:
      case 3599:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 27280;
        goto LABEL_4;
      case 3492:
      case 3493:
      case 3528:
      case 3529:
      case 3564:
      case 3565:
      case 3600:
      case 3601:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 27632;
        goto LABEL_4;
      case 3494:
      case 3495:
      case 3498:
      case 3499:
      case 3530:
      case 3531:
      case 3534:
      case 3535:
      case 3566:
      case 3567:
      case 3570:
      case 3571:
      case 3602:
      case 3603:
      case 3606:
      case 3607:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 27984;
        goto LABEL_4;
      case 3496:
      case 3497:
      case 3500:
      case 3501:
      case 3532:
      case 3533:
      case 3536:
      case 3537:
      case 3568:
      case 3569:
      case 3572:
      case 3573:
      case 3604:
      case 3605:
      case 3608:
      case 3609:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 28336;
        goto LABEL_4;
      case 3502:
      case 3503:
      case 3514:
      case 3515:
      case 3538:
      case 3539:
      case 3550:
      case 3551:
      case 3574:
      case 3575:
      case 3586:
      case 3587:
      case 3610:
      case 3611:
      case 3622:
      case 3623:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 28688;
        goto LABEL_4;
      case 3504:
      case 3505:
      case 3516:
      case 3517:
      case 3540:
      case 3541:
      case 3552:
      case 3553:
      case 3576:
      case 3577:
      case 3588:
      case 3589:
      case 3612:
      case 3613:
      case 3624:
      case 3625:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 29040;
        goto LABEL_4;
      case 3506:
      case 3507:
      case 3510:
      case 3511:
      case 3518:
      case 3519:
      case 3522:
      case 3523:
      case 3542:
      case 3543:
      case 3546:
      case 3547:
      case 3554:
      case 3555:
      case 3558:
      case 3559:
      case 3578:
      case 3579:
      case 3582:
      case 3583:
      case 3590:
      case 3591:
      case 3594:
      case 3595:
      case 3614:
      case 3615:
      case 3618:
      case 3619:
      case 3626:
      case 3627:
      case 3630:
      case 3631:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 29392;
        goto LABEL_4;
      case 3508:
      case 3509:
      case 3512:
      case 3513:
      case 3520:
      case 3521:
      case 3524:
      case 3525:
      case 3544:
      case 3545:
      case 3548:
      case 3549:
      case 3556:
      case 3557:
      case 3560:
      case 3561:
      case 3580:
      case 3581:
      case 3584:
      case 3585:
      case 3592:
      case 3593:
      case 3596:
      case 3597:
      case 3616:
      case 3617:
      case 3620:
      case 3621:
      case 3628:
      case 3629:
      case 3632:
      case 3633:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 29744;
        goto LABEL_4;
      case 3826:
      case 3829:
      case 3832:
      case 3835:
      case 3838:
      case 3841:
      case 3844:
      case 3847:
      case 3850:
      case 3853:
      case 3856:
      case 3859:
      case 3862:
      case 3865:
      case 3868:
      case 3871:
      case 3874:
      case 3877:
      case 3880:
      case 3883:
      case 3886:
      case 3889:
      case 3892:
      case 3895:
      case 3898:
      case 3901:
      case 3904:
      case 3907:
      case 3910:
      case 3913:
      case 3916:
      case 3919:
      case 4050:
      case 4051:
      case 4052:
      case 4053:
      case 4054:
      case 4055:
      case 4056:
      case 4057:
      case 4058:
      case 4059:
      case 4060:
      case 4061:
      case 4062:
      case 4063:
      case 4064:
      case 4065:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 16368;
        goto LABEL_4;
      case 3827:
      case 3828:
      case 3830:
      case 3831:
      case 3833:
      case 3834:
      case 3836:
      case 3837:
      case 3839:
      case 3840:
      case 3842:
      case 3843:
      case 3845:
      case 3846:
      case 3848:
      case 3849:
      case 3851:
      case 3852:
      case 3854:
      case 3855:
      case 3857:
      case 3858:
      case 3860:
      case 3861:
      case 3863:
      case 3864:
      case 3866:
      case 3867:
      case 3869:
      case 3870:
      case 3872:
      case 3873:
      case 3875:
      case 3876:
      case 3878:
      case 3879:
      case 3881:
      case 3882:
      case 3884:
      case 3885:
      case 3887:
      case 3888:
      case 3890:
      case 3891:
      case 3893:
      case 3894:
      case 3896:
      case 3897:
      case 3899:
      case 3900:
      case 3902:
      case 3903:
      case 3905:
      case 3906:
      case 3908:
      case 3909:
      case 3911:
      case 3912:
      case 3914:
      case 3915:
      case 3917:
      case 3918:
      case 3920:
      case 3921:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 5104;
        goto LABEL_4;
      case 3922:
      case 3925:
      case 3928:
      case 3931:
      case 3934:
      case 3937:
      case 3940:
      case 3943:
      case 3946:
      case 3949:
      case 3952:
      case 3955:
      case 3958:
      case 3961:
      case 3964:
      case 3967:
      case 3970:
      case 3973:
      case 3976:
      case 3979:
      case 3982:
      case 3985:
      case 3988:
      case 3991:
      case 3994:
      case 3997:
      case 4000:
      case 4003:
      case 4006:
      case 4009:
      case 4012:
      case 4015:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 16544;
        goto LABEL_4;
      case 3923:
      case 3924:
      case 3926:
      case 3927:
      case 3929:
      case 3930:
      case 3932:
      case 3933:
      case 3935:
      case 3936:
      case 3938:
      case 3939:
      case 3941:
      case 3942:
      case 3944:
      case 3945:
      case 3947:
      case 3948:
      case 3950:
      case 3951:
      case 3953:
      case 3954:
      case 3956:
      case 3957:
      case 3959:
      case 3960:
      case 3962:
      case 3963:
      case 3965:
      case 3966:
      case 3968:
      case 3969:
      case 3971:
      case 3972:
      case 3974:
      case 3975:
      case 3977:
      case 3978:
      case 3980:
      case 3981:
      case 3983:
      case 3984:
      case 3986:
      case 3987:
      case 3989:
      case 3990:
      case 3992:
      case 3993:
      case 3995:
      case 3996:
      case 3998:
      case 3999:
      case 4001:
      case 4002:
      case 4004:
      case 4005:
      case 4007:
      case 4008:
      case 4010:
      case 4011:
      case 4013:
      case 4014:
      case 4016:
      case 4017:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 5280;
        goto LABEL_4;
      case 4018:
      case 4019:
      case 4020:
      case 4021:
      case 4022:
      case 4023:
      case 4026:
      case 4027:
      case 4028:
      case 4029:
      case 4030:
      case 4031:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 11264;
        goto LABEL_4;
      case 4024:
      case 4025:
      case 4032:
      case 4033:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 10912;
        goto LABEL_4;
      case 4034:
      case 4035:
      case 4036:
      case 4037:
      case 4038:
      case 4039:
      case 4042:
      case 4043:
      case 4044:
      case 4045:
      case 4046:
      case 4047:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 17952;
        goto LABEL_4;
      case 4040:
      case 4041:
      case 4048:
      case 4049:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 17776;
        goto LABEL_4;
      case 4078:
      case 4079:
      case 4080:
      case 4081:
      case 4082:
      case 4083:
      case 4084:
      case 4085:
      case 4086:
      case 4087:
      case 4088:
      case 4089:
      case 4090:
      case 4091:
      case 4092:
      case 4093:
      case 4096:
      case 4097:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 13200;
        goto LABEL_4;
      case 4094:
      case 4095:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 16720;
        goto LABEL_4;
      case 4098:
      case 4099:
      case 4100:
      case 4101:
      case 4106:
      case 4107:
      case 4108:
      case 4109:
      case 4114:
      case 4115:
      case 4116:
      case 4117:
      case 4122:
      case 4123:
      case 4124:
      case 4125:
      case 4130:
      case 4131:
      case 4132:
      case 4133:
      case 4138:
      case 4139:
      case 4140:
      case 4141:
      case 4146:
      case 4147:
      case 4148:
      case 4149:
      case 4154:
      case 4155:
      case 4156:
      case 4157:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 13904;
        goto LABEL_4;
      case 4102:
      case 4103:
      case 4104:
      case 4105:
      case 4110:
      case 4111:
      case 4112:
      case 4113:
      case 4118:
      case 4119:
      case 4120:
      case 4121:
      case 4126:
      case 4127:
      case 4128:
      case 4129:
      case 4134:
      case 4135:
      case 4136:
      case 4137:
      case 4142:
      case 4143:
      case 4144:
      case 4145:
      case 4150:
      case 4151:
      case 4152:
      case 4153:
      case 4158:
      case 4159:
      case 4160:
      case 4161:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 14080;
        goto LABEL_4;
      case 4162:
      case 4164:
      case 4192:
      case 4194:
      case 4362:
      case 4364:
      case 4392:
      case 4394:
      case 4422:
      case 4452:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 9328;
        goto LABEL_4;
      case 4163:
      case 4165:
      case 4193:
      case 4195:
      case 4363:
      case 4365:
      case 4393:
      case 4395:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 9680;
        goto LABEL_4;
      case 4166:
      case 4196:
      case 4366:
      case 4396:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 10208;
        goto LABEL_4;
      case 4167:
      case 4197:
      case 4367:
      case 4397:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 10560;
        goto LABEL_4;
      case 4168:
      case 4170:
      case 4174:
      case 4176:
      case 4180:
      case 4182:
      case 4186:
      case 4188:
      case 4198:
      case 4200:
      case 4204:
      case 4206:
      case 4210:
      case 4212:
      case 4216:
      case 4218:
      case 4368:
      case 4370:
      case 4374:
      case 4376:
      case 4380:
      case 4382:
      case 4386:
      case 4388:
      case 4398:
      case 4400:
      case 4404:
      case 4406:
      case 4410:
      case 4412:
      case 4416:
      case 4418:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 16896;
        goto LABEL_4;
      case 4169:
      case 4171:
      case 4175:
      case 4177:
      case 4181:
      case 4183:
      case 4187:
      case 4189:
      case 4199:
      case 4201:
      case 4205:
      case 4207:
      case 4211:
      case 4213:
      case 4217:
      case 4219:
      case 4369:
      case 4371:
      case 4375:
      case 4377:
      case 4381:
      case 4383:
      case 4387:
      case 4389:
      case 4399:
      case 4401:
      case 4405:
      case 4407:
      case 4411:
      case 4413:
      case 4417:
      case 4419:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 17072;
        goto LABEL_4;
      case 4172:
      case 4178:
      case 4184:
      case 4190:
      case 4202:
      case 4208:
      case 4214:
      case 4220:
      case 4372:
      case 4378:
      case 4384:
      case 4390:
      case 4402:
      case 4408:
      case 4414:
      case 4420:
      case 4821:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 17248;
        goto LABEL_4;
      case 4173:
      case 4179:
      case 4185:
      case 4191:
      case 4203:
      case 4209:
      case 4215:
      case 4221:
      case 4373:
      case 4379:
      case 4385:
      case 4391:
      case 4403:
      case 4409:
      case 4415:
      case 4421:
      case 4822:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 17424;
        goto LABEL_4;
      case 4222:
      case 4252:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 11616;
        goto LABEL_4;
      case 4223:
      case 4253:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 11968;
        goto LABEL_4;
      case 4224:
      case 4254:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 11792;
        goto LABEL_4;
      case 4225:
      case 4255:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 12144;
        goto LABEL_4;
      case 4226:
      case 4256:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 12320;
        goto LABEL_4;
      case 4227:
      case 4257:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 12496;
        goto LABEL_4;
      case 4228:
      case 4234:
      case 4240:
      case 4246:
      case 4258:
      case 4264:
      case 4270:
      case 4276:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 20768;
        goto LABEL_4;
      case 4229:
      case 4235:
      case 4241:
      case 4247:
      case 4259:
      case 4265:
      case 4271:
      case 4277:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 21120;
        goto LABEL_4;
      case 4230:
      case 4236:
      case 4242:
      case 4248:
      case 4260:
      case 4266:
      case 4272:
      case 4278:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 20944;
        goto LABEL_4;
      case 4231:
      case 4237:
      case 4243:
      case 4249:
      case 4261:
      case 4267:
      case 4273:
      case 4279:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 21296;
        goto LABEL_4;
      case 4232:
      case 4238:
      case 4244:
      case 4250:
      case 4262:
      case 4268:
      case 4274:
      case 4280:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 21472;
        goto LABEL_4;
      case 4233:
      case 4239:
      case 4245:
      case 4251:
      case 4263:
      case 4269:
      case 4275:
      case 4281:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 21648;
        goto LABEL_4;
      case 4282:
      case 4283:
      case 4288:
      case 4289:
      case 4294:
      case 4295:
      case 4300:
      case 4301:
      case 4306:
      case 4307:
      case 4312:
      case 4313:
      case 4318:
      case 4319:
      case 4324:
      case 4325:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 12672;
        goto LABEL_4;
      case 4284:
      case 4285:
      case 4286:
      case 4287:
      case 4290:
      case 4291:
      case 4292:
      case 4293:
      case 4296:
      case 4297:
      case 4298:
      case 4299:
      case 4302:
      case 4303:
      case 4304:
      case 4305:
      case 4308:
      case 4309:
      case 4310:
      case 4311:
      case 4314:
      case 4315:
      case 4316:
      case 4317:
      case 4320:
      case 4321:
      case 4322:
      case 4323:
      case 4326:
      case 4327:
      case 4328:
      case 4329:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 13728;
        goto LABEL_4;
      case 4330:
      case 4331:
      case 4334:
      case 4335:
      case 4338:
      case 4339:
      case 4342:
      case 4343:
      case 4346:
      case 4347:
      case 4350:
      case 4351:
      case 4354:
      case 4355:
      case 4358:
      case 4359:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 17600;
        goto LABEL_4;
      case 4332:
      case 4333:
      case 4336:
      case 4337:
      case 4340:
      case 4341:
      case 4344:
      case 4345:
      case 4348:
      case 4349:
      case 4352:
      case 4353:
      case 4356:
      case 4357:
      case 4360:
      case 4361:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 18128;
        goto LABEL_4;
      case 4423:
      case 4453:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 9856;
        goto LABEL_4;
      case 4424:
      case 4454:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 9504;
        goto LABEL_4;
      case 4425:
      case 4455:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 10032;
        goto LABEL_4;
      case 4426:
      case 4456:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 10384;
        goto LABEL_4;
      case 4427:
      case 4457:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 10736;
        goto LABEL_4;
      case 4428:
      case 4434:
      case 4440:
      case 4446:
      case 4458:
      case 4464:
      case 4470:
      case 4476:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 22176;
        goto LABEL_4;
      case 4429:
      case 4435:
      case 4441:
      case 4447:
      case 4459:
      case 4465:
      case 4471:
      case 4477:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 22528;
        goto LABEL_4;
      case 4430:
      case 4436:
      case 4442:
      case 4448:
      case 4460:
      case 4466:
      case 4472:
      case 4478:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 22352;
        goto LABEL_4;
      case 4431:
      case 4437:
      case 4443:
      case 4449:
      case 4461:
      case 4467:
      case 4473:
      case 4479:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 22704;
        goto LABEL_4;
      case 4432:
      case 4438:
      case 4444:
      case 4450:
      case 4462:
      case 4468:
      case 4474:
      case 4480:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 22880;
        goto LABEL_4;
      case 4433:
      case 4439:
      case 4445:
      case 4451:
      case 4463:
      case 4469:
      case 4475:
      case 4481:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 23056;
        goto LABEL_4;
      case 4482:
      case 4483:
      case 4488:
      case 4489:
      case 4494:
      case 4495:
      case 4500:
      case 4501:
      case 4506:
      case 4507:
      case 4512:
      case 4513:
      case 4518:
      case 4519:
      case 4524:
      case 4525:
      case 8188:
      case 8189:
      case 8198:
      case 8199:
      case 8208:
      case 8209:
      case 8218:
      case 8219:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 5984;
        goto LABEL_4;
      case 4484:
      case 4485:
      case 4486:
      case 4487:
      case 4490:
      case 4491:
      case 4492:
      case 4493:
      case 4496:
      case 4497:
      case 4498:
      case 4499:
      case 4502:
      case 4503:
      case 4504:
      case 4505:
      case 4508:
      case 4509:
      case 4510:
      case 4511:
      case 4514:
      case 4515:
      case 4516:
      case 4517:
      case 4520:
      case 4521:
      case 4522:
      case 4523:
      case 4526:
      case 4527:
      case 4528:
      case 4529:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 6864;
        goto LABEL_4;
      case 4530:
      case 4531:
      case 4534:
      case 4535:
      case 4538:
      case 4539:
      case 4542:
      case 4543:
      case 4546:
      case 4547:
      case 4550:
      case 4551:
      case 4554:
      case 4555:
      case 4558:
      case 4559:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 11088;
        goto LABEL_4;
      case 4532:
      case 4533:
      case 4536:
      case 4537:
      case 4540:
      case 4541:
      case 4544:
      case 4545:
      case 4548:
      case 4549:
      case 4552:
      case 4553:
      case 4556:
      case 4557:
      case 4560:
      case 4561:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 11440;
        goto LABEL_4;
      case 4562:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 31328;
        goto LABEL_4;
      case 4563:
      case 4564:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 31504;
        goto LABEL_4;
      case 4565:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 31856;
        goto LABEL_4;
      case 4593:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 32208;
        goto LABEL_4;
      case 4596:
      case 4597:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 3696);
        break;
      case 4823:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 3168);
        break;
      case 4824:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 3344);
        break;
      case 4825:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 32384;
        goto LABEL_4;
      case 4826:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 32560;
        goto LABEL_4;
      case 4984:
      case 4985:
      case 4986:
      case 4993:
      case 4994:
      case 4995:
      case 5002:
      case 5003:
      case 5004:
      case 5011:
      case 5012:
      case 5013:
      case 5324:
      case 5325:
      case 5326:
      case 5333:
      case 5334:
      case 5335:
      case 5342:
      case 5343:
      case 5344:
      case 5351:
      case 5352:
      case 5353:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 18304;
        goto LABEL_4;
      case 4987:
      case 4988:
      case 4989:
      case 4990:
      case 4991:
      case 4992:
      case 4996:
      case 4997:
      case 4998:
      case 4999:
      case 5000:
      case 5001:
      case 5005:
      case 5006:
      case 5007:
      case 5008:
      case 5009:
      case 5010:
      case 5014:
      case 5015:
      case 5016:
      case 5017:
      case 5018:
      case 5019:
      case 5327:
      case 5328:
      case 5329:
      case 5330:
      case 5331:
      case 5332:
      case 5336:
      case 5337:
      case 5338:
      case 5339:
      case 5340:
      case 5341:
      case 5345:
      case 5346:
      case 5347:
      case 5348:
      case 5349:
      case 5350:
      case 5354:
      case 5355:
      case 5356:
      case 5357:
      case 5358:
      case 5359:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 19184;
        goto LABEL_4;
      case 6272:
      case 6276:
      case 6284:
      case 6288:
      case 6296:
      case 6300:
      case 6308:
      case 6312:
      case 6320:
      case 6324:
      case 6332:
      case 6336:
      case 6344:
      case 6348:
      case 6356:
      case 6360:
      case 6392:
      case 6396:
      case 6400:
      case 6404:
      case 6432:
      case 6436:
      case 6440:
      case 6444:
      case 6472:
      case 6476:
      case 6480:
      case 6484:
      case 6512:
      case 6516:
      case 6520:
      case 6524:
      case 6552:
      case 6556:
      case 6560:
      case 6564:
      case 6592:
      case 6596:
      case 6600:
      case 6604:
      case 6632:
      case 6636:
      case 6640:
      case 6644:
      case 6672:
      case 6676:
      case 6680:
      case 6684:
      case 6712:
      case 6716:
      case 6720:
      case 6724:
      case 6752:
      case 6756:
      case 6760:
      case 6764:
      case 6768:
      case 6772:
      case 6780:
      case 6784:
      case 6792:
      case 6796:
      case 6804:
      case 6808:
      case 6816:
      case 6820:
      case 6828:
      case 6832:
      case 6840:
      case 6844:
      case 6852:
      case 6856:
      case 6864:
      case 6868:
      case 6876:
      case 6880:
      case 6888:
      case 6892:
      case 6900:
      case 6904:
      case 6912:
      case 6916:
      case 6924:
      case 6928:
      case 6936:
      case 6940:
      case 6948:
      case 6952:
      case 6984:
      case 6988:
      case 6992:
      case 6996:
      case 7024:
      case 7028:
      case 7032:
      case 7036:
      case 7064:
      case 7068:
      case 7072:
      case 7076:
      case 7104:
      case 7108:
      case 7112:
      case 7116:
      case 7144:
      case 7148:
      case 7152:
      case 7156:
      case 7184:
      case 7188:
      case 7192:
      case 7196:
      case 7224:
      case 7228:
      case 7232:
      case 7236:
      case 7264:
      case 7268:
      case 7272:
      case 7276:
      case 7304:
      case 7308:
      case 7312:
      case 7316:
      case 7344:
      case 7348:
      case 7352:
      case 7356:
      case 7384:
      case 7388:
      case 7392:
      case 7396:
      case 7424:
      case 7428:
      case 7432:
      case 7436:
      case 7464:
      case 7468:
      case 7472:
      case 7476:
      case 7504:
      case 7508:
      case 7512:
      case 7516:
      case 7544:
      case 7548:
      case 7552:
      case 7556:
      case 7584:
      case 7588:
      case 7592:
      case 7596:
      case 7624:
      case 7628:
      case 7632:
      case 7636:
      case 7664:
      case 7668:
      case 7672:
      case 7676:
      case 7704:
      case 7708:
      case 7712:
      case 7716:
      case 7744:
      case 7748:
      case 7752:
      case 7756:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 14432;
        goto LABEL_4;
      case 6273:
      case 6277:
      case 6285:
      case 6289:
      case 6297:
      case 6301:
      case 6309:
      case 6313:
      case 6321:
      case 6325:
      case 6333:
      case 6337:
      case 6345:
      case 6349:
      case 6357:
      case 6361:
      case 6393:
      case 6397:
      case 6401:
      case 6405:
      case 6433:
      case 6437:
      case 6441:
      case 6445:
      case 6473:
      case 6477:
      case 6481:
      case 6485:
      case 6513:
      case 6517:
      case 6521:
      case 6525:
      case 6553:
      case 6557:
      case 6561:
      case 6565:
      case 6593:
      case 6597:
      case 6601:
      case 6605:
      case 6633:
      case 6637:
      case 6641:
      case 6645:
      case 6673:
      case 6677:
      case 6681:
      case 6685:
      case 6713:
      case 6717:
      case 6721:
      case 6725:
      case 6753:
      case 6757:
      case 6761:
      case 6765:
      case 6769:
      case 6773:
      case 6781:
      case 6785:
      case 6793:
      case 6797:
      case 6805:
      case 6809:
      case 6817:
      case 6821:
      case 6829:
      case 6833:
      case 6841:
      case 6845:
      case 6853:
      case 6857:
      case 6865:
      case 6869:
      case 6877:
      case 6881:
      case 6889:
      case 6893:
      case 6901:
      case 6905:
      case 6913:
      case 6917:
      case 6925:
      case 6929:
      case 6937:
      case 6941:
      case 6949:
      case 6953:
      case 6985:
      case 6989:
      case 6993:
      case 6997:
      case 7025:
      case 7029:
      case 7033:
      case 7037:
      case 7065:
      case 7069:
      case 7073:
      case 7077:
      case 7105:
      case 7109:
      case 7113:
      case 7117:
      case 7145:
      case 7149:
      case 7153:
      case 7157:
      case 7185:
      case 7189:
      case 7193:
      case 7197:
      case 7225:
      case 7229:
      case 7233:
      case 7237:
      case 7265:
      case 7269:
      case 7273:
      case 7277:
      case 7305:
      case 7309:
      case 7313:
      case 7317:
      case 7345:
      case 7349:
      case 7353:
      case 7357:
      case 7385:
      case 7389:
      case 7393:
      case 7397:
      case 7425:
      case 7429:
      case 7433:
      case 7437:
      case 7465:
      case 7469:
      case 7473:
      case 7477:
      case 7505:
      case 7509:
      case 7513:
      case 7517:
      case 7545:
      case 7549:
      case 7553:
      case 7557:
      case 7585:
      case 7589:
      case 7593:
      case 7597:
      case 7625:
      case 7629:
      case 7633:
      case 7637:
      case 7665:
      case 7669:
      case 7673:
      case 7677:
      case 7705:
      case 7709:
      case 7713:
      case 7717:
      case 7745:
      case 7749:
      case 7753:
      case 7757:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 15312;
        goto LABEL_4;
      case 6274:
      case 6278:
      case 6286:
      case 6290:
      case 6298:
      case 6302:
      case 6310:
      case 6314:
      case 6322:
      case 6326:
      case 6334:
      case 6338:
      case 6346:
      case 6350:
      case 6358:
      case 6362:
      case 6394:
      case 6398:
      case 6402:
      case 6406:
      case 6434:
      case 6438:
      case 6442:
      case 6446:
      case 6474:
      case 6478:
      case 6482:
      case 6486:
      case 6514:
      case 6518:
      case 6522:
      case 6526:
      case 6554:
      case 6558:
      case 6562:
      case 6566:
      case 6594:
      case 6598:
      case 6602:
      case 6606:
      case 6634:
      case 6638:
      case 6642:
      case 6646:
      case 6674:
      case 6678:
      case 6682:
      case 6686:
      case 6714:
      case 6718:
      case 6722:
      case 6726:
      case 6754:
      case 6758:
      case 6762:
      case 6766:
      case 6770:
      case 6774:
      case 6782:
      case 6786:
      case 6794:
      case 6798:
      case 6806:
      case 6810:
      case 6818:
      case 6822:
      case 6830:
      case 6834:
      case 6842:
      case 6846:
      case 6854:
      case 6858:
      case 6866:
      case 6870:
      case 6878:
      case 6882:
      case 6890:
      case 6894:
      case 6902:
      case 6906:
      case 6914:
      case 6918:
      case 6926:
      case 6930:
      case 6938:
      case 6942:
      case 6950:
      case 6954:
      case 6986:
      case 6990:
      case 6994:
      case 6998:
      case 7026:
      case 7030:
      case 7034:
      case 7038:
      case 7066:
      case 7070:
      case 7074:
      case 7078:
      case 7106:
      case 7110:
      case 7114:
      case 7118:
      case 7146:
      case 7150:
      case 7154:
      case 7158:
      case 7186:
      case 7190:
      case 7194:
      case 7198:
      case 7226:
      case 7230:
      case 7234:
      case 7238:
      case 7266:
      case 7270:
      case 7274:
      case 7278:
      case 7306:
      case 7310:
      case 7314:
      case 7318:
      case 7346:
      case 7350:
      case 7354:
      case 7358:
      case 7386:
      case 7390:
      case 7394:
      case 7398:
      case 7426:
      case 7430:
      case 7434:
      case 7438:
      case 7466:
      case 7470:
      case 7474:
      case 7478:
      case 7506:
      case 7510:
      case 7514:
      case 7518:
      case 7546:
      case 7550:
      case 7554:
      case 7558:
      case 7586:
      case 7590:
      case 7594:
      case 7598:
      case 7626:
      case 7630:
      case 7634:
      case 7638:
      case 7666:
      case 7670:
      case 7674:
      case 7678:
      case 7706:
      case 7710:
      case 7714:
      case 7718:
      case 7746:
      case 7750:
      case 7754:
      case 7758:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 15136;
        goto LABEL_4;
      case 6275:
      case 6279:
      case 6287:
      case 6291:
      case 6299:
      case 6303:
      case 6311:
      case 6315:
      case 6323:
      case 6327:
      case 6335:
      case 6339:
      case 6347:
      case 6351:
      case 6359:
      case 6363:
      case 6395:
      case 6399:
      case 6403:
      case 6407:
      case 6435:
      case 6439:
      case 6443:
      case 6447:
      case 6475:
      case 6479:
      case 6483:
      case 6487:
      case 6515:
      case 6519:
      case 6523:
      case 6527:
      case 6555:
      case 6559:
      case 6563:
      case 6567:
      case 6595:
      case 6599:
      case 6603:
      case 6607:
      case 6635:
      case 6639:
      case 6643:
      case 6647:
      case 6675:
      case 6679:
      case 6683:
      case 6687:
      case 6715:
      case 6719:
      case 6723:
      case 6727:
      case 6755:
      case 6759:
      case 6763:
      case 6767:
      case 6771:
      case 6775:
      case 6783:
      case 6787:
      case 6795:
      case 6799:
      case 6807:
      case 6811:
      case 6819:
      case 6823:
      case 6831:
      case 6835:
      case 6843:
      case 6847:
      case 6855:
      case 6859:
      case 6867:
      case 6871:
      case 6879:
      case 6883:
      case 6891:
      case 6895:
      case 6903:
      case 6907:
      case 6915:
      case 6919:
      case 6927:
      case 6931:
      case 6939:
      case 6943:
      case 6951:
      case 6955:
      case 6987:
      case 6991:
      case 6995:
      case 6999:
      case 7027:
      case 7031:
      case 7035:
      case 7039:
      case 7067:
      case 7071:
      case 7075:
      case 7079:
      case 7107:
      case 7111:
      case 7115:
      case 7119:
      case 7147:
      case 7151:
      case 7155:
      case 7159:
      case 7187:
      case 7191:
      case 7195:
      case 7199:
      case 7227:
      case 7231:
      case 7235:
      case 7239:
      case 7267:
      case 7271:
      case 7275:
      case 7279:
      case 7307:
      case 7311:
      case 7315:
      case 7319:
      case 7347:
      case 7351:
      case 7355:
      case 7359:
      case 7387:
      case 7391:
      case 7395:
      case 7399:
      case 7427:
      case 7431:
      case 7435:
      case 7439:
      case 7467:
      case 7471:
      case 7475:
      case 7479:
      case 7507:
      case 7511:
      case 7515:
      case 7519:
      case 7547:
      case 7551:
      case 7555:
      case 7559:
      case 7587:
      case 7591:
      case 7595:
      case 7599:
      case 7627:
      case 7631:
      case 7635:
      case 7639:
      case 7667:
      case 7671:
      case 7675:
      case 7679:
      case 7707:
      case 7711:
      case 7715:
      case 7719:
      case 7747:
      case 7751:
      case 7755:
      case 7759:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 16016;
        goto LABEL_4;
      case 6280:
      case 6292:
      case 6304:
      case 6316:
      case 6328:
      case 6340:
      case 6352:
      case 6364:
      case 6776:
      case 6788:
      case 6800:
      case 6812:
      case 6824:
      case 6836:
      case 6848:
      case 6860:
      case 6872:
      case 6884:
      case 6896:
      case 6908:
      case 6920:
      case 6932:
      case 6944:
      case 6956:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 14256;
        goto LABEL_4;
      case 6281:
      case 6293:
      case 6305:
      case 6317:
      case 6329:
      case 6341:
      case 6353:
      case 6365:
      case 6777:
      case 6789:
      case 6801:
      case 6813:
      case 6825:
      case 6837:
      case 6849:
      case 6861:
      case 6873:
      case 6885:
      case 6897:
      case 6909:
      case 6921:
      case 6933:
      case 6945:
      case 6957:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 14784;
        goto LABEL_4;
      case 6282:
      case 6294:
      case 6306:
      case 6318:
      case 6330:
      case 6342:
      case 6354:
      case 6366:
      case 6778:
      case 6790:
      case 6802:
      case 6814:
      case 6826:
      case 6838:
      case 6850:
      case 6862:
      case 6874:
      case 6886:
      case 6898:
      case 6910:
      case 6922:
      case 6934:
      case 6946:
      case 6958:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 14608;
        goto LABEL_4;
      case 6283:
      case 6295:
      case 6307:
      case 6319:
      case 6331:
      case 6343:
      case 6355:
      case 6367:
      case 6779:
      case 6791:
      case 6803:
      case 6815:
      case 6827:
      case 6839:
      case 6851:
      case 6863:
      case 6875:
      case 6887:
      case 6899:
      case 6911:
      case 6923:
      case 6935:
      case 6947:
      case 6959:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 15488;
        goto LABEL_4;
      case 6368:
      case 6372:
      case 6376:
      case 6380:
      case 6384:
      case 6388:
      case 6408:
      case 6412:
      case 6416:
      case 6420:
      case 6424:
      case 6428:
      case 6448:
      case 6452:
      case 6456:
      case 6460:
      case 6464:
      case 6468:
      case 6488:
      case 6492:
      case 6496:
      case 6500:
      case 6504:
      case 6508:
      case 6528:
      case 6532:
      case 6536:
      case 6540:
      case 6544:
      case 6548:
      case 6568:
      case 6572:
      case 6576:
      case 6580:
      case 6584:
      case 6588:
      case 6608:
      case 6612:
      case 6616:
      case 6620:
      case 6624:
      case 6628:
      case 6648:
      case 6652:
      case 6656:
      case 6660:
      case 6664:
      case 6668:
      case 6688:
      case 6692:
      case 6696:
      case 6700:
      case 6704:
      case 6708:
      case 6728:
      case 6732:
      case 6736:
      case 6740:
      case 6744:
      case 6748:
      case 6960:
      case 6964:
      case 6968:
      case 6972:
      case 6976:
      case 6980:
      case 7000:
      case 7004:
      case 7008:
      case 7012:
      case 7016:
      case 7020:
      case 7040:
      case 7044:
      case 7048:
      case 7052:
      case 7056:
      case 7060:
      case 7080:
      case 7084:
      case 7088:
      case 7092:
      case 7096:
      case 7100:
      case 7120:
      case 7124:
      case 7128:
      case 7132:
      case 7136:
      case 7140:
      case 7160:
      case 7164:
      case 7168:
      case 7172:
      case 7176:
      case 7180:
      case 7200:
      case 7204:
      case 7208:
      case 7212:
      case 7216:
      case 7220:
      case 7240:
      case 7244:
      case 7248:
      case 7252:
      case 7256:
      case 7260:
      case 7280:
      case 7284:
      case 7288:
      case 7292:
      case 7296:
      case 7300:
      case 7320:
      case 7324:
      case 7328:
      case 7332:
      case 7336:
      case 7340:
      case 7360:
      case 7364:
      case 7368:
      case 7372:
      case 7376:
      case 7380:
      case 7400:
      case 7404:
      case 7408:
      case 7412:
      case 7416:
      case 7420:
      case 7440:
      case 7444:
      case 7448:
      case 7452:
      case 7456:
      case 7460:
      case 7480:
      case 7484:
      case 7488:
      case 7492:
      case 7496:
      case 7500:
      case 7520:
      case 7524:
      case 7528:
      case 7532:
      case 7536:
      case 7540:
      case 7560:
      case 7564:
      case 7568:
      case 7572:
      case 7576:
      case 7580:
      case 7600:
      case 7604:
      case 7608:
      case 7612:
      case 7616:
      case 7620:
      case 7640:
      case 7644:
      case 7648:
      case 7652:
      case 7656:
      case 7660:
      case 7680:
      case 7684:
      case 7688:
      case 7692:
      case 7696:
      case 7700:
      case 7720:
      case 7724:
      case 7728:
      case 7732:
      case 7736:
      case 7740:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 14960;
        goto LABEL_4;
      case 6369:
      case 6373:
      case 6377:
      case 6381:
      case 6385:
      case 6389:
      case 6409:
      case 6413:
      case 6417:
      case 6421:
      case 6425:
      case 6429:
      case 6449:
      case 6453:
      case 6457:
      case 6461:
      case 6465:
      case 6469:
      case 6489:
      case 6493:
      case 6497:
      case 6501:
      case 6505:
      case 6509:
      case 6529:
      case 6533:
      case 6537:
      case 6541:
      case 6545:
      case 6549:
      case 6569:
      case 6573:
      case 6577:
      case 6581:
      case 6585:
      case 6589:
      case 6609:
      case 6613:
      case 6617:
      case 6621:
      case 6625:
      case 6629:
      case 6649:
      case 6653:
      case 6657:
      case 6661:
      case 6665:
      case 6669:
      case 6689:
      case 6693:
      case 6697:
      case 6701:
      case 6705:
      case 6709:
      case 6729:
      case 6733:
      case 6737:
      case 6741:
      case 6745:
      case 6749:
      case 6961:
      case 6965:
      case 6969:
      case 6973:
      case 6977:
      case 6981:
      case 7001:
      case 7005:
      case 7009:
      case 7013:
      case 7017:
      case 7021:
      case 7041:
      case 7045:
      case 7049:
      case 7053:
      case 7057:
      case 7061:
      case 7081:
      case 7085:
      case 7089:
      case 7093:
      case 7097:
      case 7101:
      case 7121:
      case 7125:
      case 7129:
      case 7133:
      case 7137:
      case 7141:
      case 7161:
      case 7165:
      case 7169:
      case 7173:
      case 7177:
      case 7181:
      case 7201:
      case 7205:
      case 7209:
      case 7213:
      case 7217:
      case 7221:
      case 7241:
      case 7245:
      case 7249:
      case 7253:
      case 7257:
      case 7261:
      case 7281:
      case 7285:
      case 7289:
      case 7293:
      case 7297:
      case 7301:
      case 7321:
      case 7325:
      case 7329:
      case 7333:
      case 7337:
      case 7341:
      case 7361:
      case 7365:
      case 7369:
      case 7373:
      case 7377:
      case 7381:
      case 7401:
      case 7405:
      case 7409:
      case 7413:
      case 7417:
      case 7421:
      case 7441:
      case 7445:
      case 7449:
      case 7453:
      case 7457:
      case 7461:
      case 7481:
      case 7485:
      case 7489:
      case 7493:
      case 7497:
      case 7501:
      case 7521:
      case 7525:
      case 7529:
      case 7533:
      case 7537:
      case 7541:
      case 7561:
      case 7565:
      case 7569:
      case 7573:
      case 7577:
      case 7581:
      case 7601:
      case 7605:
      case 7609:
      case 7613:
      case 7617:
      case 7621:
      case 7641:
      case 7645:
      case 7649:
      case 7653:
      case 7657:
      case 7661:
      case 7681:
      case 7685:
      case 7689:
      case 7693:
      case 7697:
      case 7701:
      case 7721:
      case 7725:
      case 7729:
      case 7733:
      case 7737:
      case 7741:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 15840;
        goto LABEL_4;
      case 6370:
      case 6374:
      case 6378:
      case 6382:
      case 6386:
      case 6390:
      case 6410:
      case 6414:
      case 6418:
      case 6422:
      case 6426:
      case 6430:
      case 6450:
      case 6454:
      case 6458:
      case 6462:
      case 6466:
      case 6470:
      case 6490:
      case 6494:
      case 6498:
      case 6502:
      case 6506:
      case 6510:
      case 6530:
      case 6534:
      case 6538:
      case 6542:
      case 6546:
      case 6550:
      case 6570:
      case 6574:
      case 6578:
      case 6582:
      case 6586:
      case 6590:
      case 6610:
      case 6614:
      case 6618:
      case 6622:
      case 6626:
      case 6630:
      case 6650:
      case 6654:
      case 6658:
      case 6662:
      case 6666:
      case 6670:
      case 6690:
      case 6694:
      case 6698:
      case 6702:
      case 6706:
      case 6710:
      case 6730:
      case 6734:
      case 6738:
      case 6742:
      case 6746:
      case 6750:
      case 6962:
      case 6966:
      case 6970:
      case 6974:
      case 6978:
      case 6982:
      case 7002:
      case 7006:
      case 7010:
      case 7014:
      case 7018:
      case 7022:
      case 7042:
      case 7046:
      case 7050:
      case 7054:
      case 7058:
      case 7062:
      case 7082:
      case 7086:
      case 7090:
      case 7094:
      case 7098:
      case 7102:
      case 7122:
      case 7126:
      case 7130:
      case 7134:
      case 7138:
      case 7142:
      case 7162:
      case 7166:
      case 7170:
      case 7174:
      case 7178:
      case 7182:
      case 7202:
      case 7206:
      case 7210:
      case 7214:
      case 7218:
      case 7222:
      case 7242:
      case 7246:
      case 7250:
      case 7254:
      case 7258:
      case 7262:
      case 7282:
      case 7286:
      case 7290:
      case 7294:
      case 7298:
      case 7302:
      case 7322:
      case 7326:
      case 7330:
      case 7334:
      case 7338:
      case 7342:
      case 7362:
      case 7366:
      case 7370:
      case 7374:
      case 7378:
      case 7382:
      case 7402:
      case 7406:
      case 7410:
      case 7414:
      case 7418:
      case 7422:
      case 7442:
      case 7446:
      case 7450:
      case 7454:
      case 7458:
      case 7462:
      case 7482:
      case 7486:
      case 7490:
      case 7494:
      case 7498:
      case 7502:
      case 7522:
      case 7526:
      case 7530:
      case 7534:
      case 7538:
      case 7542:
      case 7562:
      case 7566:
      case 7570:
      case 7574:
      case 7578:
      case 7582:
      case 7602:
      case 7606:
      case 7610:
      case 7614:
      case 7618:
      case 7622:
      case 7642:
      case 7646:
      case 7650:
      case 7654:
      case 7658:
      case 7662:
      case 7682:
      case 7686:
      case 7690:
      case 7694:
      case 7698:
      case 7702:
      case 7722:
      case 7726:
      case 7730:
      case 7734:
      case 7738:
      case 7742:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 15664;
        goto LABEL_4;
      case 6371:
      case 6375:
      case 6379:
      case 6383:
      case 6387:
      case 6391:
      case 6411:
      case 6415:
      case 6419:
      case 6423:
      case 6427:
      case 6431:
      case 6451:
      case 6455:
      case 6459:
      case 6463:
      case 6467:
      case 6471:
      case 6491:
      case 6495:
      case 6499:
      case 6503:
      case 6507:
      case 6511:
      case 6531:
      case 6535:
      case 6539:
      case 6543:
      case 6547:
      case 6551:
      case 6571:
      case 6575:
      case 6579:
      case 6583:
      case 6587:
      case 6591:
      case 6611:
      case 6615:
      case 6619:
      case 6623:
      case 6627:
      case 6631:
      case 6651:
      case 6655:
      case 6659:
      case 6663:
      case 6667:
      case 6671:
      case 6691:
      case 6695:
      case 6699:
      case 6703:
      case 6707:
      case 6711:
      case 6731:
      case 6735:
      case 6739:
      case 6743:
      case 6747:
      case 6751:
      case 6963:
      case 6967:
      case 6971:
      case 6975:
      case 6979:
      case 6983:
      case 7003:
      case 7007:
      case 7011:
      case 7015:
      case 7019:
      case 7023:
      case 7043:
      case 7047:
      case 7051:
      case 7055:
      case 7059:
      case 7063:
      case 7083:
      case 7087:
      case 7091:
      case 7095:
      case 7099:
      case 7103:
      case 7123:
      case 7127:
      case 7131:
      case 7135:
      case 7139:
      case 7143:
      case 7163:
      case 7167:
      case 7171:
      case 7175:
      case 7179:
      case 7183:
      case 7203:
      case 7207:
      case 7211:
      case 7215:
      case 7219:
      case 7223:
      case 7243:
      case 7247:
      case 7251:
      case 7255:
      case 7259:
      case 7263:
      case 7283:
      case 7287:
      case 7291:
      case 7295:
      case 7299:
      case 7303:
      case 7323:
      case 7327:
      case 7331:
      case 7335:
      case 7339:
      case 7343:
      case 7363:
      case 7367:
      case 7371:
      case 7375:
      case 7379:
      case 7383:
      case 7403:
      case 7407:
      case 7411:
      case 7415:
      case 7419:
      case 7423:
      case 7443:
      case 7447:
      case 7451:
      case 7455:
      case 7459:
      case 7463:
      case 7483:
      case 7487:
      case 7491:
      case 7495:
      case 7499:
      case 7503:
      case 7523:
      case 7527:
      case 7531:
      case 7535:
      case 7539:
      case 7543:
      case 7563:
      case 7567:
      case 7571:
      case 7575:
      case 7579:
      case 7583:
      case 7603:
      case 7607:
      case 7611:
      case 7615:
      case 7619:
      case 7623:
      case 7643:
      case 7647:
      case 7651:
      case 7655:
      case 7659:
      case 7663:
      case 7683:
      case 7687:
      case 7691:
      case 7695:
      case 7699:
      case 7703:
      case 7723:
      case 7727:
      case 7731:
      case 7735:
      case 7739:
      case 7743:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 16192;
        goto LABEL_4;
      case 8168:
      case 8169:
      case 8170:
      case 8171:
      case 8172:
      case 8173:
      case 8174:
      case 8175:
      case 8176:
      case 8177:
      case 8178:
      case 8179:
      case 8180:
      case 8181:
      case 8182:
      case 8183:
      case 8184:
      case 8185:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 6688;
        goto LABEL_4;
      case 8186:
      case 8187:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 6512;
        goto LABEL_4;
      case 8190:
      case 8191:
      case 8192:
      case 8193:
      case 8200:
      case 8201:
      case 8202:
      case 8203:
      case 8210:
      case 8211:
      case 8212:
      case 8213:
      case 8220:
      case 8221:
      case 8222:
      case 8223:
      case 8228:
      case 8229:
      case 8230:
      case 8231:
      case 8236:
      case 8237:
      case 8238:
      case 8239:
      case 8244:
      case 8245:
      case 8246:
      case 8247:
      case 8252:
      case 8253:
      case 8254:
      case 8255:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 7040;
        goto LABEL_4;
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8204:
      case 8205:
      case 8206:
      case 8207:
      case 8214:
      case 8215:
      case 8216:
      case 8217:
      case 8224:
      case 8225:
      case 8226:
      case 8227:
      case 8232:
      case 8233:
      case 8234:
      case 8235:
      case 8240:
      case 8241:
      case 8242:
      case 8243:
      case 8248:
      case 8249:
      case 8250:
      case 8251:
      case 8256:
      case 8257:
      case 8258:
      case 8259:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 7216;
        goto LABEL_4;
      case 8260:
      case 8261:
      case 8262:
      case 8263:
      case 8264:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 32736;
        goto LABEL_4;
      case 8265:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 32032;
        goto LABEL_4;
      case 8266:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 31680;
        goto LABEL_4;
      case 8269:
      case 8270:
      case 8273:
      case 8274:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 22000;
        goto LABEL_4;
      case 8271:
      case 8272:
      case 8275:
      case 8276:
        int v2 = (char *)&unk_1CDE0D730 + 2 * a2;
        uint64_t v3 = 21824;
LABEL_4:
        BOOL v4 = (__int16 *)&v2[v3];
        break;
      default:
        BOOL v4 = (__int16 *)((char *)&unk_1CDE0D730 + 2 * a2 + 176);
        break;
    }
    return *v4;
  }
}

uint64_t sub_1CBC83150(uint64_t result, uint64_t a2, unsigned int a3)
{
  if ((result - 2286) >= 2)
  {
    switch((int)result)
    {
      case 2178:
      case 2181:
        goto LABEL_153;
      case 2179:
      case 2180:
        goto LABEL_158;
      case 2182:
      case 2183:
        goto LABEL_165;
      case 2185:
      case 2196:
        goto LABEL_27;
      case 2186:
      case 2189:
        goto LABEL_172;
      case 2187:
      case 2188:
        goto LABEL_177;
      case 2190:
      case 2191:
        goto LABEL_188;
      case 2192:
      case 2195:
        goto LABEL_193;
      case 2193:
      case 2194:
        goto LABEL_196;
      case 2197:
      case 2200:
        goto LABEL_201;
      case 2198:
      case 2199:
        goto LABEL_209;
      case 2201:
      case 2208:
        goto LABEL_216;
      case 2202:
      case 2205:
        goto LABEL_221;
      case 2203:
      case 2204:
        goto LABEL_228;
      case 2206:
      case 2207:
        goto LABEL_237;
      case 2209:
      case 2220:
        goto LABEL_244;
      case 2210:
      case 2213:
        goto LABEL_249;
      case 2211:
      case 2212:
        goto LABEL_43;
      case 2214:
      case 2215:
        goto LABEL_36;
      case 2216:
      case 2219:
        goto LABEL_57;
      case 2217:
      case 2218:
        goto LABEL_62;
      case 2221:
      case 2224:
        goto LABEL_73;
      case 2222:
      case 2223:
        goto LABEL_4;
      case 2225:
      case 2232:
        goto LABEL_83;
      case 2226:
      case 2229:
        goto LABEL_90;
      case 2227:
      case 2228:
        goto LABEL_99;
      case 2230:
      case 2231:
        goto LABEL_110;
      case 2233:
      case 2240:
        goto LABEL_120;
      case 2234:
      case 2237:
        goto LABEL_127;
      case 2235:
      case 2236:
        goto LABEL_134;
      case 2238:
      case 2239:
        goto LABEL_143;
      case 2241:
      case 2248:
        int v35 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 6;
        if (!v35) {
          *(unsigned char *)(a2 + 52) = 1;
        }
        goto LABEL_150;
      case 2242:
      case 2245:
        int v36 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 7;
        if (!v36) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_153:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 16) = 0;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        int v8 = 0;
        char v12 = 0;
        int v6 = 0;
        int v11 = 0;
        int v5 = 6;
        *(_DWORD *)(a2 + 32) = 6;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 56) = 0x100000001;
        char v4 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v31 = (result & 0xFFFFFFBF) == 2181;
        goto LABEL_204;
      case 2243:
      case 2244:
        int v37 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 8;
        if (!v37) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_158:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 16) = 0;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        *(_DWORD *)(a2 + 32) = 6;
        *(void *)(a2 + 24) = 0;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        char v12 = 0;
        int v6 = 0;
        int v11 = 0;
        int v8 = 7;
        *(_DWORD *)(a2 + 40) = 7;
        *(void *)(a2 + 56) = 0x100000001;
        char v13 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v38 = (result & 0xFFFFFFBF) == 2180;
        goto LABEL_182;
      case 2246:
      case 2247:
        int v39 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 7;
        if (!v39) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_165:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 16) = 0;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        int v5 = 0;
        int v6 = 0;
        int v11 = 0;
        int v8 = 6;
        *(_DWORD *)(a2 + 40) = 6;
        *(void *)(a2 + 56) = 1;
        char v12 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v31 = (result & 0xFFFFFFBF) == 2183;
        goto LABEL_204;
      case 2249:
      case 2260:
        int v40 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 6;
        if (!v40) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_27:
        int v8 = 0;
        int v5 = 0;
        int v6 = 0;
        int v11 = 0;
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        uint64_t v14 = 0x200000002;
        char v4 = 1;
        BOOL v15 = (result & 0xFFFFFFBF) == 2196;
        goto LABEL_28;
      case 2250:
      case 2253:
        int v41 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 7;
        if (!v41) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_172:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 16) = 0;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        int v8 = 0;
        char v12 = 0;
        int v6 = 0;
        int v11 = 0;
        int v5 = 6;
        *(_DWORD *)(a2 + 32) = 6;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 56) = 0x300000002;
        char v4 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v31 = (result & 0xFFFFFFBF) == 2189;
        goto LABEL_204;
      case 2251:
      case 2252:
        int v42 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 8;
        if (!v42) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_177:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 16) = 0;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        *(_DWORD *)(a2 + 32) = 6;
        *(void *)(a2 + 24) = 0;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        char v12 = 0;
        int v6 = 0;
        int v11 = 0;
        int v8 = 7;
        *(_DWORD *)(a2 + 40) = 7;
        *(void *)(a2 + 56) = 0x300000002;
        char v13 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v38 = (result & 0xFFFFFFBF) == 2188;
LABEL_182:
        BOOL v10 = v38;
        int v5 = 6;
        goto LABEL_33;
      case 2254:
      case 2255:
        int v43 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 7;
        if (!v43) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_188:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 16) = 0;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        int v5 = 0;
        int v6 = 0;
        int v11 = 0;
        int v8 = 6;
        *(_DWORD *)(a2 + 40) = 6;
        *(void *)(a2 + 56) = 0x200000002;
        char v12 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v31 = (result & 0xFFFFFFBF) == 2191;
        goto LABEL_204;
      case 2256:
      case 2259:
        int v44 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 6;
        if (!v44) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_193:
        int v8 = 0;
        int v5 = 0;
        int v6 = 0;
        int v11 = 0;
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        uint64_t v14 = 0x400000002;
        char v4 = 1;
        BOOL v15 = (result & 0xFFFFFFBF) == 2195;
        goto LABEL_28;
      case 2257:
      case 2258:
        int v45 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 7;
        if (!v45) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_196:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 16) = 0;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        int v8 = 0;
        char v12 = 0;
        int v6 = 0;
        int v11 = 0;
        int v5 = 6;
        *(_DWORD *)(a2 + 32) = 6;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 56) = 0x800000002;
        char v4 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v31 = (result & 0xFFFFFFBF) == 2194;
        goto LABEL_204;
      case 2261:
      case 2264:
        int v46 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 7;
        if (!v46) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_201:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 16) = 0;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        int v8 = 0;
        char v12 = 0;
        int v6 = 0;
        int v11 = 0;
        int v5 = 6;
        *(_DWORD *)(a2 + 32) = 6;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 56) = 0x500000002;
        char v4 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v31 = (result & 0xFFFFFFBF) == 2200;
        goto LABEL_204;
      case 2262:
      case 2263:
        int v47 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 8;
        if (!v47) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_209:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 32) = 0;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        int v5 = 0;
        int v6 = 0;
        char v7 = 0;
        int v8 = 7;
        *(_DWORD *)(a2 + 40) = 7;
        *(void *)(a2 + 56) = 0x500000003;
        char v12 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v10 = (result & 0xFFFFFFBF) == 2199;
        int v11 = 6;
        goto LABEL_14;
      case 2265:
      case 2272:
        int v48 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 7;
        if (!v48) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_216:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        int v8 = 0;
        int v5 = 0;
        int v6 = 0;
        char v7 = 0;
        int v11 = 6;
        *(_DWORD *)(a2 + 16) = 6;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 24) = 0;
        uint64_t v20 = 1;
        BOOL v21 = (result & 0xFFFFFFBF) == 2208;
        goto LABEL_76;
      case 2266:
      case 2269:
        int v49 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 8;
        if (!v49) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_221:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        int v8 = 0;
        char v12 = 0;
        int v6 = 0;
        char v7 = 0;
        int v5 = 7;
        *(_DWORD *)(a2 + 32) = 7;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 40) = 0;
        uint64_t v23 = 0x100000001;
        BOOL v24 = (result & 0xFFFFFFBF) == 2205;
        goto LABEL_67;
      case 2267:
      case 2268:
        int v50 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 9;
        if (!v50) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_228:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        *(_DWORD *)(a2 + 32) = 7;
        *(void *)(a2 + 24) = 0;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        char v12 = 0;
        int v6 = 0;
        char v7 = 0;
        int v8 = 8;
        *(_DWORD *)(a2 + 40) = 8;
        *(void *)(a2 + 56) = 0x100000001;
        BOOL v18 = (result & 0xFFFFFFBF) == 2204;
        goto LABEL_50;
      case 2270:
      case 2271:
        int v51 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 8;
        if (!v51) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_237:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 32) = 0;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        int v5 = 0;
        int v6 = 0;
        char v7 = 0;
        int v8 = 7;
        *(_DWORD *)(a2 + 40) = 7;
        *(void *)(a2 + 56) = 1;
        BOOL v9 = (result & 0xFFFFFFBF) == 2207;
        goto LABEL_9;
      case 2273:
      case 2284:
        int v52 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 7;
        if (!v52) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_244:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        int v8 = 0;
        int v5 = 0;
        int v6 = 0;
        char v7 = 0;
        int v11 = 6;
        *(_DWORD *)(a2 + 16) = 6;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 24) = 0;
        uint64_t v20 = 0x200000002;
        BOOL v21 = (result & 0xFFFFFFBF) == 2220;
        goto LABEL_76;
      case 2274:
      case 2277:
        int v53 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 8;
        if (!v53) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_249:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        int v8 = 0;
        char v12 = 0;
        int v6 = 0;
        char v7 = 0;
        int v5 = 7;
        *(_DWORD *)(a2 + 32) = 7;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 40) = 0;
        uint64_t v23 = 0x300000002;
        BOOL v24 = (result & 0xFFFFFFBF) == 2213;
        goto LABEL_67;
      case 2275:
      case 2276:
        int v17 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 9;
        if (!v17) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_43:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        *(_DWORD *)(a2 + 32) = 7;
        *(void *)(a2 + 24) = 0;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        char v12 = 0;
        int v6 = 0;
        char v7 = 0;
        int v8 = 8;
        *(_DWORD *)(a2 + 40) = 8;
        *(void *)(a2 + 56) = 0x300000002;
        BOOL v18 = (result & 0xFFFFFFBF) == 2212;
LABEL_50:
        *(_WORD *)(a2 + 64) = 0;
        BOOL v10 = v18;
        int v11 = 6;
        char v13 = 1;
        goto LABEL_54;
      case 2278:
      case 2279:
        int v16 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 8;
        if (!v16) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_36:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 32) = 0;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        int v5 = 0;
        int v6 = 0;
        char v7 = 0;
        int v8 = 7;
        *(_DWORD *)(a2 + 40) = 7;
        *(void *)(a2 + 56) = 0x200000002;
        BOOL v9 = (result & 0xFFFFFFBF) == 2215;
        goto LABEL_9;
      case 2280:
      case 2283:
        int v19 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 7;
        if (!v19) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_57:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        int v8 = 0;
        int v5 = 0;
        int v6 = 0;
        char v7 = 0;
        int v11 = 6;
        *(_DWORD *)(a2 + 16) = 6;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 24) = 0;
        uint64_t v20 = 0x400000002;
        BOOL v21 = (result & 0xFFFFFFBF) == 2219;
        goto LABEL_76;
      case 2281:
      case 2282:
        int v22 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 8;
        if (!v22) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_62:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        int v8 = 0;
        char v12 = 0;
        int v6 = 0;
        char v7 = 0;
        int v5 = 7;
        *(_DWORD *)(a2 + 32) = 7;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 40) = 0;
        uint64_t v23 = 0x800000002;
        BOOL v24 = (result & 0xFFFFFFBF) == 2218;
LABEL_67:
        *(void *)(a2 + 56) = v23;
        *(_WORD *)(a2 + 64) = 0;
        BOOL v10 = v24;
        int v11 = 6;
        char v4 = 1;
        goto LABEL_14;
      case 2285:
      case 2288:
        int v25 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_73:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        int v8 = 0;
        int v5 = 0;
        int v6 = 0;
        char v7 = 0;
        int v11 = 6;
        *(_DWORD *)(a2 + 16) = 6;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 24) = 0;
        uint64_t v20 = 0x500000003;
        BOOL v21 = (result & 0xFFFFFFBF) == 2224;
LABEL_76:
        *(void *)(a2 + 56) = v20;
        *(_WORD *)(a2 + 64) = 0;
        BOOL v10 = v21;
        char v4 = 1;
        goto LABEL_13;
      case 2286:
      case 2287:
        __break(1u);
        goto LABEL_81;
      case 2289:
      case 2296:
LABEL_81:
        int v26 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 8;
        if (!v26) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_83:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        *(void *)(a2 + 32) = 0;
        if (!*(unsigned char *)(a2 + 28)) {
          *(unsigned char *)(a2 + 28) = 1;
        }
        int v8 = 0;
        int v5 = 0;
        char v13 = 0;
        char v7 = 0;
        int v6 = 7;
        *(_DWORD *)(a2 + 24) = 7;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 56) = 0x600000002;
        *(_WORD *)(a2 + 64) = 0;
        BOOL v10 = (result & 0xFFFFFFBF) == 2232;
        int v11 = 6;
        char v4 = 1;
        goto LABEL_117;
      case 2290:
      case 2293:
        int v27 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 9;
        if (!v27) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_90:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        *(_DWORD *)(a2 + 32) = 8;
        if (!*(unsigned char *)(a2 + 28)) {
          *(unsigned char *)(a2 + 28) = 1;
        }
        int v8 = 0;
        char v12 = 0;
        char v13 = 0;
        char v7 = 0;
        int v6 = 7;
        *(_DWORD *)(a2 + 24) = 7;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 56) = 0x700000002;
        *(_WORD *)(a2 + 64) = 0;
        BOOL v10 = (result & 0xFFFFFFBF) == 2229;
        int v11 = 6;
        int v5 = 8;
        char v4 = 1;
        break;
      case 2291:
      case 2292:
        int v28 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 10;
        if (!v28) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_99:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        *(_DWORD *)(a2 + 32) = 8;
        if (!*(unsigned char *)(a2 + 28)) {
          *(unsigned char *)(a2 + 28) = 1;
        }
        *(_DWORD *)(a2 + 24) = 7;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        char v12 = 0;
        char v13 = 0;
        char v7 = 0;
        int v8 = 9;
        *(_DWORD *)(a2 + 40) = 9;
        *(void *)(a2 + 56) = 0x700000002;
        *(_WORD *)(a2 + 64) = 0;
        BOOL v10 = (result & 0xFFFFFFBF) == 2228;
        int v11 = 6;
        int v6 = 7;
        int v5 = 8;
        break;
      case 2294:
      case 2295:
        int v29 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 9;
        if (!v29) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_110:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        if (!*(unsigned char *)(a2 + 20)) {
          *(unsigned char *)(a2 + 20) = 1;
        }
        *(_DWORD *)(a2 + 16) = 6;
        *(void *)(a2 + 32) = 0;
        if (!*(unsigned char *)(a2 + 28)) {
          *(unsigned char *)(a2 + 28) = 1;
        }
        *(_DWORD *)(a2 + 24) = 7;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        int v5 = 0;
        char v13 = 0;
        char v7 = 0;
        int v8 = 8;
        *(_DWORD *)(a2 + 40) = 8;
        *(void *)(a2 + 56) = 0x600000002;
        *(_WORD *)(a2 + 64) = 0;
        BOOL v10 = (result & 0xFFFFFFBF) == 2231;
        int v11 = 6;
        int v6 = 7;
LABEL_117:
        char v12 = 1;
        break;
      case 2297:
      case 2304:
        int v30 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 7;
        if (!v30) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_120:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 16) = 0;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        int v8 = 0;
        char v12 = 0;
        int v6 = 0;
        int v11 = 0;
        int v5 = 6;
        *(_DWORD *)(a2 + 32) = 6;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 56) = 0x600000002;
        char v4 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v31 = result == 2304 || result == 2240;
LABEL_204:
        BOOL v10 = v31;
        goto LABEL_32;
      case 2298:
      case 2301:
        int v32 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 8;
        if (!v32) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_127:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 16) = 0;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        *(_DWORD *)(a2 + 32) = 7;
        if (!*(unsigned char *)(a2 + 28)) {
          *(unsigned char *)(a2 + 28) = 1;
        }
        int v8 = 0;
        char v12 = 0;
        char v13 = 0;
        int v11 = 0;
        int v6 = 6;
        *(_DWORD *)(a2 + 24) = 6;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 56) = 0x700000002;
        char v4 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v10 = (result & 0xFFFFFFBF) == 2237;
        int v5 = 7;
        goto LABEL_33;
      case 2299:
      case 2300:
        int v33 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 9;
        if (!v33) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_134:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 16) = 0;
        if (!*(unsigned char *)(a2 + 36)) {
          *(unsigned char *)(a2 + 36) = 1;
        }
        *(_DWORD *)(a2 + 32) = 7;
        if (!*(unsigned char *)(a2 + 28)) {
          *(unsigned char *)(a2 + 28) = 1;
        }
        *(_DWORD *)(a2 + 24) = 6;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        char v12 = 0;
        char v13 = 0;
        int v11 = 0;
        int v8 = 8;
        *(_DWORD *)(a2 + 40) = 8;
        *(void *)(a2 + 56) = 0x700000002;
        char v7 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v10 = (result & 0xFFFFFFBF) == 2236;
        int v6 = 6;
LABEL_54:
        int v5 = 7;
        break;
      case 2302:
      case 2303:
        int v34 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)(a2 + 48) = 8;
        if (!v34) {
          *(unsigned char *)(a2 + 52) = 1;
        }
LABEL_143:
        *(_OWORD *)a2 = xmmword_1CDB0CFA0;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 32) = 0;
        if (!*(unsigned char *)(a2 + 28)) {
          *(unsigned char *)(a2 + 28) = 1;
        }
        *(_DWORD *)(a2 + 24) = 6;
        if (!*(unsigned char *)(a2 + 44)) {
          *(unsigned char *)(a2 + 44) = 1;
        }
        char v4 = 0;
        int v5 = 0;
        char v13 = 0;
        int v11 = 0;
        int v8 = 7;
        *(_DWORD *)(a2 + 40) = 7;
        *(void *)(a2 + 56) = 0x600000002;
        char v12 = 1;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v10 = (result & 0xFFFFFFBF) == 2239;
        int v6 = 6;
        goto LABEL_33;
      default:
LABEL_150:
        int v8 = 0;
        int v5 = 0;
        int v6 = 0;
        int v11 = 0;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        uint64_t v14 = 1;
        char v4 = 1;
        BOOL v15 = (result & 0xFFFFFFBF) == 2184;
LABEL_28:
        *(void *)(a2 + 56) = v14;
        *(_WORD *)(a2 + 64) = 1;
        BOOL v10 = v15;
        char v12 = 1;
LABEL_32:
        char v13 = 1;
LABEL_33:
        char v7 = 1;
        break;
    }
  }
  else
  {
    int v3 = *(unsigned __int8 *)(a2 + 52);
    *(_DWORD *)(a2 + 48) = 8;
    if (!v3) {
      *(unsigned char *)(a2 + 52) = 1;
    }
LABEL_4:
    *(_OWORD *)a2 = xmmword_1CDB0CFA0;
    if (!*(unsigned char *)(a2 + 20)) {
      *(unsigned char *)(a2 + 20) = 1;
    }
    *(_DWORD *)(a2 + 16) = 6;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    if (!*(unsigned char *)(a2 + 44)) {
      *(unsigned char *)(a2 + 44) = 1;
    }
    char v4 = 0;
    int v5 = 0;
    int v6 = 0;
    char v7 = 0;
    int v8 = 7;
    *(_DWORD *)(a2 + 40) = 7;
    *(void *)(a2 + 56) = 0x500000003;
    BOOL v9 = (result & 0xFFFFFFBF) == 2223;
LABEL_9:
    *(_WORD *)(a2 + 64) = 0;
    BOOL v10 = v9;
    int v11 = 6;
LABEL_13:
    char v12 = 1;
LABEL_14:
    char v13 = 1;
  }
  *(unsigned char *)(a2 + 66) = v10;
  *(int32x4_t *)a2 = vaddq_s32(vdupq_n_s32(a3), (int32x4_t)xmmword_1CDB0CFA0);
  if ((v7 & 1) == 0) {
    *(_DWORD *)(a2 + 16) = v11 + a3;
  }
  if ((v13 & 1) == 0) {
    *(_DWORD *)(a2 + 24) = v6 + a3;
  }
  if ((v12 & 1) == 0) {
    *(_DWORD *)(a2 + 32) = v5 + a3;
  }
  if ((v4 & 1) == 0) {
    *(_DWORD *)(a2 + 40) = v8 + a3;
  }
  if (*(unsigned char *)(a2 + 52)) {
    *(_DWORD *)(a2 + 48) += a3;
  }
  return result;
}

void sub_1CBC843E8(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::MCAsmLayout *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v15 = *(_DWORD *)((*(uint64_t (**)(void, void))(**(void **)(a3 + 8) + 80))(*(void *)(a3 + 8), *(unsigned int *)(a6 + 12))+ 16);
  int v16 = *(_DWORD *)(a6 + 12);
  if (v16 != 4)
  {
    if (v16 > 127)
    {
      if (v16 == 136) {
        goto LABEL_38;
      }
      if (v16 == 128) {
        goto LABEL_2;
      }
    }
    else
    {
      switch(v16)
      {
        case 3:
          if (*a7)
          {
            unsigned int v29 = *(unsigned __int16 *)(*a7 + 1) - 151;
            if (v29 < 7)
            {
              int v17 = dword_1CDE35190[(__int16)v29];
LABEL_39:
              int v18 = 2;
              goto LABEL_7;
            }
          }
LABEL_38:
          int v17 = 0;
          goto LABEL_39;
        case 1:
          int v18 = 0;
          int v17 = 0;
          goto LABEL_7;
        case 2:
          int v17 = 0;
          int v18 = 1;
          goto LABEL_7;
      }
    }
    uint64_t v33 = *(void *)a3;
    uint64_t v34 = *(void *)(a6 + 16);
    int v40 = *(_DWORD *)(a6 + 12);
    sub_1CD431AE8(&v40, (uint64_t)&v41);
    int v35 = std::string::insert(&v41, 0, "unsupported relocation on symbol (");
    std::string::size_type v36 = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    int v37 = std::string::append(&v42, ")");
    std::string::size_type v38 = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    std::string::size_type v44 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    __int16 v46 = 260;
    v45[0] = (uint64_t)__p;
    llvm::MCContext::reportError(v33, v34, (uint64_t)v45);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    return;
  }
LABEL_2:
  if (*a7)
  {
    if ((unsigned __int16)*(_DWORD *)(*a7 + 1) == 153) {
      int v17 = 5;
    }
    else {
      int v17 = 0;
    }
  }
  else
  {
    int v17 = 0;
  }
  int v18 = 3;
LABEL_7:
  if (a7[1]) {
    goto LABEL_44;
  }
  if (v17 == 10 || v17 == 5) {
    *a8 = a7[2];
  }
  uint64_t v19 = *a7 ? *(void *)(*a7 + 16) : 0;
  int v39 = a8;
  int v20 = (v15 & (v17 == 0)) != 0 ? 1 << v18 : 0;
  if (v19
    && v20 != -*((_DWORD *)a7 + 4)
    && (llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v19) & 1) == 0)
  {
LABEL_44:
    BOOL v31 = "Relocation with symbol difference is not supported.";
    goto LABEL_45;
  }
  llvm::MCAsmLayout::ensureValid(a4, (const llvm::MCFragment *)a5);
  int v21 = *(_DWORD *)(a5 + 32);
  int v22 = *(_DWORD *)(a6 + 8);
  if (!*a7 && !a7[1])
  {
    BOOL v31 = "FIXME: relocations to absolute targets not yet implemented";
LABEL_45:
    llvm::report_fatal_error((llvm *)v31, (const llvm::Twine *)1);
  }
  int v23 = *(_DWORD *)(v19 + 8);
  if ((v23 & 0x1C00) == 0x800
    && (v45[0] = 0,
        *(_DWORD *)(v19 + 8) = v23 | 4,
        llvm::MCExpr::evaluateAsAbsolute(*(void *)(v19 + 24), v45, (uint64_t **)a4, a2 + 8)))
  {
    *int v39 = v45[0];
  }
  else
  {
    int doesSymbolRequireExternRelocation = llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v19);
    unint64_t AssociatedFragment = *(void *)v19 & 0xFFFFFFFFFFFFFFF8;
    if (doesSymbolRequireExternRelocation)
    {
      if (!AssociatedFragment && (*(_DWORD *)(v19 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v19 + 8) |= 4u;
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v19 + 24));
        *(void *)uint64_t v19 = *(void *)v19 & 7 | AssociatedFragment;
      }
      if (AssociatedFragment)
      {
        uint64_t SymbolOffset = llvm::MCAsmLayout::getSymbolOffset(a4, (const llvm::MCSymbol *)v19);
        int v26 = 0;
        *v39 -= SymbolOffset;
      }
      else
      {
        int v26 = 0;
      }
    }
    else
    {
      if (!AssociatedFragment && (*(_DWORD *)(v19 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v19 + 8) |= 4u;
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v19 + 24));
        *(void *)uint64_t v19 = *(void *)v19 & 7 | AssociatedFragment;
      }
      uint64_t v19 = 0;
      int v26 = *(_DWORD *)(*(void *)(AssociatedFragment + 16) + 28) + 1;
    }
    int v27 = v22 + v21;
    if (v15)
    {
      v45[0] = *(void *)(a5 + 16);
      __p[0] = 0;
      if (sub_1CB915048(a2 + 8, v45, __p)) {
        uint64_t v30 = *((void *)__p[0] + 1);
      }
      else {
        uint64_t v30 = 0;
      }
      *v39 -= v30;
      int v28 = 0x1000000;
    }
    else
    {
      int v28 = 0;
    }
    LODWORD(v45[0]) = v27;
    HIDWORD(v45[0]) = v26 | (v18 << 25) | (v17 << 28) | v28;
    sub_1CBC60F00((uint64_t)a2, v19, *(void *)(a5 + 16), v45);
  }
}

void sub_1CBC84838()
{
}

void sub_1CBC8484C(uint64_t a1, unsigned int *a2, llvm::raw_ostream *a3, uint64_t a4, uint64_t a5)
{
  v40[1] = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *a2;
  uint64_t v9 = **(void **)(a1 + 8);
  uint64_t v37 = 0;
  __dst = v40;
  long long v39 = xmmword_1CD96EEC0;
  uint64_t v10 = *(void *)(a5 + 192);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v11 = v9 + 48 * v8;
  uint64_t v14 = *(void *)(v11 + 16);
  char v13 = (void *)(v11 + 16);
  uint64_t v12 = v14;
  if ((v10 & 0x80000000000) != 0)
  {
    if ((v12 & 0x3C0000000) != 0) {
      goto LABEL_15;
    }
    int v15 = "Emitted non-G14 instruction for G14";
    goto LABEL_52;
  }
  if ((v10 & 0x20000000000) != 0)
  {
    if ((v12 & 0x1E0000000) != 0) {
      goto LABEL_15;
    }
    int v15 = "Emitted non-G13 instruction for G13";
    goto LABEL_52;
  }
  if ((v10 & 0x2000000000) != 0)
  {
    if ((v12 & 0xC0000000) != 0) {
      goto LABEL_15;
    }
    int v15 = "Emitted non-G12 instruction for G12";
    goto LABEL_52;
  }
  if ((v10 & 0x800000000) != 0)
  {
    if ((v12 & 0x40000000) != 0) {
      goto LABEL_15;
    }
    int v15 = "Emitted non-G11 instruction for G11";
LABEL_52:
    MEMORY[0x1D25D9630](&v35, v15);
    __int16 v34 = 260;
    int v32 = &v35;
    llvm::report_fatal_error((llvm *)&v32, (const llvm::Twine *)1);
  }
  if ((v10 & 0x200000000) == 0)
  {
    int v15 = "Instruction not annotated as valid for any ISA";
    goto LABEL_52;
  }
  if ((v12 & 0x20000000) == 0)
  {
    int v15 = "Emitted non-G10 instruction for G10";
    goto LABEL_52;
  }
LABEL_15:
  size_t v16 = *(unsigned __int8 *)(v9 + 48 * v8 + 5);
  unsigned int v33 = 1;
  int v32 = 0;
  LODWORD(v36) = 1;
  uint64_t v35 = 0;
  sub_1CBC84BA8(a1);
  if ((void)v39 != v16)
  {
    if ((unint64_t)v39 <= v16)
    {
      if (*((void *)&v39 + 1) < v16) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v16 != (void)v39) {
        bzero((char *)__dst + v39, v16 - v39);
      }
    }
    *(void *)&long long v39 = v16;
  }
  memcpy(__dst, &v32, v16);
  unsigned int v17 = (*v13 >> 18) & 0xF;
  if ((*(unsigned char *)(a5 + 196) & 0x80) != 0 && (*v13 & 0x800000) != 0) {
    unsigned int v17 = 8;
  }
  if (v17)
  {
    int v19 = 0;
    uint64_t v20 = 4 * v17 - 4;
    uint64_t v21 = *(unsigned int *)((char *)&unk_1CDE55BB8 + v20);
    int v22 = *(_DWORD *)((char *)&unk_1CDE55BE0 + v20);
    unsigned int v23 = v39 - 1;
    int v24 = *(_DWORD *)((char *)&unk_1CDE55C08 + v20);
LABEL_28:
    uint64_t v25 = v21;
    unsigned int v26 = v23;
    while (!*((unsigned char *)__dst + v26))
    {
      --v26;
      if (!--v25)
      {
        v23 -= v21;
        *(void *)&long long v39 = v39 - (v21 - 2) - 2;
        *((unsigned char *)__dst + v23 + v24) &= ~0x80u;
        if (++v19 != v22) {
          goto LABEL_28;
        }
        break;
      }
    }
  }
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = v39;
  if (!*(unsigned char *)(v27 + 148)) {
    *(_DWORD *)(v27 + 144) += v39;
  }
  if (v28)
  {
    unsigned int v29 = (char *)__dst;
    do
    {
      char v30 = *v29;
      BOOL v31 = (char *)*((void *)a3 + 4);
      if ((unint64_t)v31 >= *((void *)a3 + 3))
      {
        llvm::raw_ostream::write(a3, v30);
      }
      else
      {
        *((void *)a3 + 4) = v31 + 1;
        *BOOL v31 = v30;
      }
      ++v29;
      --v28;
    }
    while (v28);
  }
  if (v36 >= 0x41 && v35) {
    MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
  }
  if (v33 >= 0x41 && v32) {
    MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
  }
  if (__dst != v40) {
    free(__dst);
  }
}

#error "1CBC84BA8: too big function (funcsize=0)"

void sub_1CBD7856C(uint64_t a1, unsigned __int8 *a2, unsigned int *a3)
{
  int v3 = *a2;
  if (v3 == 1)
  {
    uint64_t v8 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *((unsigned int *)a2 + 2));
  }
  else
  {
    if (v3 == 2)
    {
      uint64_t v4 = *((void *)a2 + 1);
      uint64_t v5 = a3[2];
      if (v5 <= 0x40)
      {
        if (v5) {
          unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
        }
        else {
          unint64_t v6 = 0;
        }
        unint64_t v7 = v6 & v4;
LABEL_17:
        *(void *)a3 = v7;
        return;
      }
      **(void **)a3 = v4;
      uint64_t v12 = (void *)(*(void *)a3 + 8);
      unint64_t v13 = v5 + 63;
      goto LABEL_20;
    }
    uint64_t v9 = *((void *)a2 + 1);
    if (*(unsigned char *)v9 == 4) {
      uint64_t v8 = *(unsigned int *)(*(void *)(v9 + 24) + 16);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  uint64_t v10 = a3[2];
  if (v10 <= 0x40)
  {
    if (v10) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v7 = v11 & v8;
    goto LABEL_17;
  }
  **(void **)a3 = v8;
  uint64_t v12 = (void *)(*(void *)a3 + 8);
  unint64_t v13 = v10 + 63;
LABEL_20:
  bzero(v12, ((v13 >> 3) - 8) & 0xFFFFFFF8);
}

void sub_1CBD78648(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  if (*(unsigned char *)(a2 + 16 * a3) == 1)
  {
    LOWORD(v4) = *(_WORD *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 16 * a3 + 8);
    if (*(unsigned char *)v4 == 4) {
      LOBYTE(v4) = *(unsigned char *)(*(void *)(v4 + 24) + 16);
    }
    else {
      LOBYTE(v4) = 0;
    }
  }
  unint64_t v5 = v4 | ((((unint64_t)*(unsigned int *)(a2 + 16 * (a3 + 1) + 8) >> 4) & 1) << 8);
  uint64_t v6 = a4[2];
  if (v6 > 0x40)
  {
    **(void **)a4 = v5;
    bzero((void *)(*(void *)a4 + 8), (((unint64_t)(v6 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if (v6) {
      unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    }
    else {
      unint64_t v7 = 0;
    }
    *(void *)a4 = v7 & v5;
  }
}

void sub_1CBD78700(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  unint64_t v4 = *(void *)(a2 + 16 * (a3 + 1) + 8);
  if (*(unsigned char *)(a2 + 16 * a3) == 5)
  {
    uint64_t v5 = *(void *)(a2 + 16 * a3 + 8);
    uint64_t v6 = v5 - 8;
    if (!v5) {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(*(void *)(v6 + 32) + 16);
    BOOL v8 = *(_DWORD *)(v6 + 24) == 4;
    uint64_t v9 = 10240;
    if (v8) {
      uint64_t v9 = 14336;
    }
    uint64_t v10 = 0x2000;
    if (v8) {
      uint64_t v10 = 12288;
    }
    if ((v7 & 0x100) == 0) {
      uint64_t v9 = v10;
    }
  }
  else
  {
    LOWORD(v7) = *(_WORD *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
    uint64_t v9 = 4096;
    if ((v4 & 0x20) == 0) {
      uint64_t v9 = 2048;
    }
    if ((v4 & 0x10) != 0) {
      uint64_t v9 = 6144;
    }
  }
  uint64_t v11 = v9 | ((v4 & 2 | (v4 >> 2) & 1) << 8) | v7;
  uint64_t v12 = a4[2];
  if (v12 > 0x40)
  {
    **(void **)a4 = v11;
    bzero((void *)(*(void *)a4 + 8), (((unint64_t)(v12 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if (v12) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    }
    else {
      unint64_t v13 = 0;
    }
    *(void *)a4 = v13 & v11;
  }
}

void sub_1CBD787FC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  unint64_t v4 = *(void *)(a2 + 16 * (a3 + 1) + 8);
  if (*(unsigned char *)(a2 + 16 * a3) == 5)
  {
    uint64_t v5 = *(void *)(a2 + 16 * a3 + 8);
    if (v5) {
      uint64_t v6 = v5 - 8;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(*(void *)(v6 + 32) + 16);
    uint64_t v8 = 14336;
    if ((v7 & 0x100) == 0) {
      uint64_t v8 = 12288;
    }
  }
  else
  {
    LOWORD(v7) = *(_WORD *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
    uint64_t v8 = 20480;
    if ((v4 & 0x20) == 0) {
      uint64_t v8 = 18432;
    }
    if ((v4 & 0x10) != 0) {
      uint64_t v8 = 22528;
    }
  }
  uint64_t v9 = v8 | ((v4 & 2 | (v4 >> 2) & 1) << 8) | v7;
  uint64_t v10 = a4[2];
  if (v10 > 0x40)
  {
    **(void **)a4 = v9;
    bzero((void *)(*(void *)a4 + 8), (((unint64_t)(v10 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if (v10) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)a4 = v11 & v9;
  }
}

void sub_1CBD788E0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v4 = *(void *)(a2 + 16 * (a3 + 1) + 8);
  if (*(unsigned char *)(a2 + 16 * a3) == 5)
  {
    uint64_t v5 = *(void *)(a2 + 16 * a3 + 8);
    uint64_t v6 = v5 - 8;
    if (!v5) {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(*(void *)(v6 + 32) + 16);
    BOOL v8 = *(_DWORD *)(v6 + 24) == 4;
    uint64_t v9 = 10240;
    if (v8) {
      uint64_t v9 = 14336;
    }
    uint64_t v10 = 0x2000;
    if (v8) {
      uint64_t v10 = 12288;
    }
    if ((v7 & 0x100) == 0) {
      uint64_t v9 = v10;
    }
  }
  else
  {
    LOWORD(v7) = *(_WORD *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
    uint64_t v9 = 4096;
    if ((v4 & 0x20) == 0) {
      uint64_t v9 = 2048;
    }
    if ((v4 & 0x10) != 0) {
      uint64_t v9 = 6144;
    }
  }
  unint64_t v11 = v9 | ((unint64_t)(__rbit32(v4) >> 29) << 8) | v7;
  uint64_t v12 = a4[2];
  if (v12 > 0x40)
  {
    **(void **)a4 = v11;
    bzero((void *)(*(void *)a4 + 8), (((unint64_t)(v12 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if (v12) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    }
    else {
      unint64_t v13 = 0;
    }
    *(void *)a4 = v13 & v11;
  }
}

void sub_1CBD789DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  int v5 = *(unsigned __int8 *)(a3 + 32);
  if (v5 == 1)
  {
    uint64_t v6 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a3 + 40));
LABEL_5:
    uint64_t v7 = a4[2];
    if (v7 > 0x40)
    {
      **(void **)a4 = v6;
      uint64_t v14 = (void *)(*(void *)a4 + 8);
      bzero(v14, (((unint64_t)(v7 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      if (v7) {
        unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
      }
      else {
        unint64_t v8 = 0;
      }
      *(void *)a4 = v8 & v6;
    }
    return;
  }
  if (v5 == 2)
  {
    uint64_t v6 = *(unsigned int *)(a3 + 40);
    goto LABEL_5;
  }
  *(void *)&long long v16 = *(void *)(a3 + 40);
  *((void *)&v16 + 1) = 0x300000002;
  uint64_t v17 = a2;
  unsigned int v9 = *(_DWORD *)(a5 + 8);
  unint64_t v10 = *(void *)a5;
  if (v9 >= *(_DWORD *)(a5 + 12))
  {
    BOOL v15 = v10 + 24 * v9 > (unint64_t)&v16;
    if (v10 > (unint64_t)&v16 || !v15) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v11 = v10 + 24 * *(unsigned int *)(a5 + 8);
  long long v12 = v16;
  *(void *)(v11 + 16) = v17;
  *(_OWORD *)uint64_t v11 = v12;
  ++*(_DWORD *)(a5 + 8);
  uint64_t v13 = a4[2];
  if (v13 > 0x40)
  {
    **(void **)a4 = 0;
    bzero((void *)(*(void *)a4 + 8), (((unint64_t)(v13 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    *(void *)a4 = 0;
  }
}

void sub_1CBD78B98(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  unsigned int v4 = *(_DWORD *)(a2 + 16 * (a3 + 1) + 8);
  if (*(unsigned char *)(a2 + 16 * a3) == 5)
  {
    uint64_t v5 = *(void *)(a2 + 16 * a3 + 8);
    uint64_t v6 = v5 - 8;
    if (!v5) {
      uint64_t v6 = 0;
    }
    int v7 = *(_DWORD *)(*(void *)(v6 + 32) + 16);
    BOOL v8 = *(_DWORD *)(v6 + 24) == 2;
    if (*(_DWORD *)(v6 + 24) == 2) {
      int v9 = 14336;
    }
    else {
      int v9 = 10240;
    }
    if (v8) {
      int v10 = 12288;
    }
    else {
      int v10 = 0x2000;
    }
    if ((v7 & 0x100) == 0) {
      int v9 = v10;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    unint64_t v12 = *(unsigned int *)(a2 + 16 * a3 + 8);
    LOWORD(v7) = *(_WORD *)(*(void *)(v11 + 104) + 2 * v12);
    uint64_t v13 = *(void *)(v11 + 24);
    if (*(_DWORD *)(a2 + 16 * a3 + 8) >> 3 < *(unsigned __int16 *)(v13 + 566)
      && ((*(unsigned __int8 *)(*(void *)(v13 + 552) + (v12 >> 3)) >> (v12 & 7)) & 1) != 0)
    {
      if ((v4 & 0x20) != 0) {
        int v9 = 20480;
      }
      else {
        int v9 = 18432;
      }
      BOOL v14 = (*(_DWORD *)(a2 + 16 * (a3 + 1) + 8) & 0x10) == 0;
      int v15 = 22528;
    }
    else
    {
      if ((v4 & 0x20) != 0) {
        int v9 = 4096;
      }
      else {
        int v9 = 2048;
      }
      BOOL v14 = (*(_DWORD *)(a2 + 16 * (a3 + 1) + 8) & 0x10) == 0;
      int v15 = 6144;
    }
    if (!v14) {
      int v9 = v15;
    }
  }
  uint64_t v16 = v9 | ((v4 & 2 | (v4 >> 2) & 1) << 8) | v7;
  uint64_t v17 = a4[2];
  if (v17 > 0x40)
  {
    **(void **)a4 = v16;
    bzero((void *)(*(void *)a4 + 8), (((unint64_t)(v17 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if (v17) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
    }
    else {
      unint64_t v18 = 0;
    }
    *(void *)a4 = v18 & v16;
  }
}

void sub_1CBD78CD8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  sub_1CBD788E0(a1, a2, a3, a4);
  uint64_t v5 = a4[2];
  if (v5 >= 0x41) {
    uint64_t v6 = *(unsigned int **)a4;
  }
  else {
    uint64_t v6 = a4;
  }
  uint64_t v7 = qword_1CDE55C30[((*(void *)v6 >> 11) & 7) - 1] | *(void *)v6 & 0x7FFLL;
  if (v5 > 0x40)
  {
    **(void **)a4 = v7;
    int v9 = (void *)(*(void *)a4 + 8);
    bzero(v9, (((unint64_t)(v5 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if (v5) {
      unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)a4 = v8 & v7;
  }
}

void sub_1CBD78D88(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  sub_1CBD787FC(a1, a2, a3, a4);
  uint64_t v5 = a4[2];
  if (v5 >= 0x41) {
    uint64_t v6 = *(unsigned int **)a4;
  }
  else {
    uint64_t v6 = a4;
  }
  uint64_t v7 = qword_1CDE55C30[((*(void *)v6 >> 11) & 7) - 1] | *(void *)v6 & 0x7FFLL;
  if (v5 > 0x40)
  {
    **(void **)a4 = v7;
    int v9 = (void *)(*(void *)a4 + 8);
    bzero(v9, (((unint64_t)(v5 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if (v5) {
      unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)a4 = v8 & v7;
  }
}

void sub_1CBD78E38(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  if (*(unsigned char *)(a2 + 16 * a3) == 5)
  {
    uint64_t v4 = *(void *)(a2 + 16 * a3 + 8);
    if (v4) {
      uint64_t v5 = v4 - 8;
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v6 = *(void *)(*(void *)(v5 + 32) + 16);
    uint64_t v7 = (v6 >> 8) & 1;
    uint64_t v8 = 0x10000;
  }
  else
  {
    uint64_t v8 = 0;
    LOWORD(v6) = *(_WORD *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
    uint64_t v7 = 3;
    if ((*(void *)(a2 + 16 * (a3 + 1) + 8) & 0x10) == 0) {
      uint64_t v7 = (*(void *)(a2 + 16 * (a3 + 1) + 8) >> 4) & 2;
    }
  }
  unint64_t v9 = v6 | (unint64_t)v8 | (v7 << 17);
  uint64_t v10 = a4[2];
  if (v10 > 0x40)
  {
    **(void **)a4 = v9;
    bzero((void *)(*(void *)a4 + 8), (((unint64_t)(v10 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if (v10) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)a4 = v11 & v9;
  }
}

void sub_1CBD78F08(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, int a5, int a6, int a7, int a8, int a9)
{
  unsigned int v9 = *(_DWORD *)(a2 + 16 * (a3 + 1) + 8);
  if (*(unsigned char *)(a2 + 16 * a3) == 5)
  {
    int v10 = a9;
    uint64_t v11 = *(void *)(a2 + 16 * a3 + 8);
    uint64_t v12 = v11 - 8;
    if (!v11) {
      uint64_t v12 = 0;
    }
    int v13 = *(_DWORD *)(*(void *)(v12 + 32) + 16);
    BOOL v14 = *(_DWORD *)(v12 + 24) == 4;
    if (*(_DWORD *)(v12 + 24) == 4) {
      int v15 = 7;
    }
    else {
      int v15 = 5;
    }
    if (v14) {
      int v16 = 6;
    }
    else {
      int v16 = 4;
    }
    if (a9 == -1) {
      int v10 = v15;
    }
    if (a8 == -1) {
      int v17 = v16;
    }
    else {
      int v17 = a8;
    }
    if ((v13 & 0x100) == 0) {
      int v10 = v17;
    }
  }
  else
  {
    LOWORD(v13) = *(_WORD *)(*(void *)(*(void *)(a1 + 16) + 104) + 2 * *(unsigned int *)(a2 + 16 * a3 + 8));
    if ((v9 & 0x20) != 0) {
      int v10 = a6;
    }
    else {
      int v10 = a5;
    }
    if ((v9 & 0x10) != 0) {
      int v10 = a7;
    }
  }
  uint64_t v18 = (v9 << 9) & 0x38000 | (((v9 >> 3) & 1) << 10) | v13 | (v10 << 11);
  uint64_t v19 = a4[2];
  if (v19 > 0x40)
  {
    **(void **)a4 = v18;
    bzero((void *)(*(void *)a4 + 8), (((unint64_t)(v19 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    if (v19) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
    }
    else {
      unint64_t v20 = 0;
    }
    *(void *)a4 = v20 & v18;
  }
}

llvm::MCStreamer *sub_1CBD79010(uint64_t a1, llvm::MCStreamer *this)
{
  return llvm::MCStreamer::visitUsedExpr(this, *(const llvm::MCExpr ***)(a1 + 32));
}

uint64_t sub_1CBD79044(uint64_t a1, int a2)
{
  return sub_1CBD7904C(a2);
}

uint64_t sub_1CBD7904C(int a1)
{
  if ((a1 - 360) >> 2 > 0x7C8) {
    return 1;
  }
  else {
    return dword_1CDE9C208[a1 - 360];
  }
}

uint64_t sub_1CBD79074(uint64_t a1, int a2)
{
  return byte_1CDE9A168[a2] & 1;
}

uint64_t sub_1CBD79088(uint64_t a1, int a2)
{
  return (byte_1CDE9A168[a2] >> 1) & 1;
}

uint64_t sub_1CBD7909C(uint64_t a1, int a2)
{
  return (byte_1CDE9A168[a2] >> 2) & 1;
}

void LLVMInitializeAGX2AsmParser_0()
{
  qword_1EBD02660 = (uint64_t)sub_1CBD790D8;
  byte_1EBCC27A0 = 1;
}

void sub_1CBD790D8()
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  PermanentLibrary = llvm::sys::DynamicLibrary::getPermanentLibrary("/usr/local/lib/libLLVMInternal.dylib", (uint64_t)__p);
  if (PermanentLibrary != &llvm::sys::DynamicLibrary::Invalid)
  {
    int v1 = PermanentLibrary;
    if (byte_1EBCC27A1 == 1)
    {
      int v2 = (void (*)(void *))dlsym(PermanentLibrary, "LLVMInitializeAGX2InstPrinterTgt");
      if (v2) {
        v2(&unk_1EBD02540);
      }
    }
    if (byte_1EBCC27A0 == 1)
    {
      int v3 = (void (*)(void *))dlsym(v1, "LLVMInitializeAGX2AsmParserTgt");
      if (v3) {
        v3(&unk_1EBD02540);
      }
    }
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1CBD791A0()
{
}

void sub_1CBD79214()
{
}

void sub_1CBD7926C()
{
}

void sub_1CBD79374()
{
}

void sub_1CBD79464()
{
}

void sub_1CBD7946C()
{
}

void sub_1CBD794C4()
{
}

uint64_t sub_1CBD794D8(uint64_t a1, int *a2)
{
  unint64_t v2 = sub_1CBD79508(*a2);
  if ((int)v2 <= -1 || HIDWORD(v2) == 0) {
    return 0;
  }
  else {
    return v2 | 0x100000000;
  }
}

uint64_t sub_1CBD79508(int a1)
{
  if ((a1 - 360) >> 1 > 0xF9A) {
    return 0;
  }
  else {
    return qword_1CDEB3848[a1 - 360] | qword_1CDEA3E98[a1 - 360] | qword_1CDEC31F8[a1 - 360];
  }
}

void sub_1CBD79554()
{
}

llvm::raw_ostream *sub_1CBD79568(uint64_t a1, int a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 16);
  uint64_t v5 = (_DWORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 572552560;
    *uint64_t v5 = 1885810185;
    *((void *)v4 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.gpu \"", 7uLL);
  }
  switch(a2)
  {
    case 0:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "unknown";
        goto LABEL_86;
      }
      *(int *)((char *)v7 + 3) = 1853321070;
      int v15 = 1852534389;
      goto LABEL_149;
    case 1:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v11 = *((void *)v6 + 4);
      if ((unint64_t)(*((void *)v6 + 3) - v11) <= 2)
      {
        uint64_t v8 = "g10";
        goto LABEL_55;
      }
      char v19 = 48;
      goto LABEL_125;
    case 2:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g10p-b0";
        goto LABEL_86;
      }
      *(int *)((char *)v7 + 3) = 811740528;
      int v15 = 1882206567;
      goto LABEL_149;
    case 3:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v11 = *((void *)v6 + 4);
      if ((unint64_t)(*((void *)v6 + 3) - v11) <= 2)
      {
        uint64_t v8 = "g11";
        goto LABEL_55;
      }
      char v19 = 49;
      goto LABEL_125;
    case 4:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g11m-a0";
        goto LABEL_86;
      }
      int v20 = 811674989;
      goto LABEL_103;
    case 5:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g11m-b0";
        goto LABEL_86;
      }
      int v20 = 811740525;
LABEL_103:
      *(int *)((char *)v7 + 3) = v20;
      int v15 = 1831940455;
      goto LABEL_149;
    case 6:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g11p-a0";
        goto LABEL_86;
      }
      int v21 = 811674992;
      goto LABEL_106;
    case 7:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g11p-b0";
        goto LABEL_86;
      }
      int v21 = 811740528;
LABEL_106:
      *(int *)((char *)v7 + 3) = v21;
      int v15 = 1882272103;
      goto LABEL_149;
    case 8:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g11g-a0";
        goto LABEL_86;
      }
      int v22 = 811674983;
      goto LABEL_109;
    case 9:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g11g-b0";
        goto LABEL_86;
      }
      int v22 = 811740519;
LABEL_109:
      *(int *)((char *)v7 + 3) = v22;
      int v15 = 1731277159;
      goto LABEL_149;
    case 10:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v11 = *((void *)v6 + 4);
      if ((unint64_t)(*((void *)v6 + 3) - v11) <= 2)
      {
        uint64_t v8 = "g12";
        goto LABEL_55;
      }
      char v19 = 50;
      goto LABEL_125;
    case 11:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g12m-a0";
        goto LABEL_86;
      }
      *(int *)((char *)v7 + 3) = 811674989;
      int v15 = 1832005991;
      goto LABEL_149;
    case 12:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g12p-a0";
        goto LABEL_86;
      }
      int v23 = 811674992;
      goto LABEL_114;
    case 13:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g12p-b0";
        goto LABEL_86;
      }
      int v23 = 811740528;
LABEL_114:
      *(int *)((char *)v7 + 3) = v23;
      int v15 = 1882337639;
      goto LABEL_149;
    case 14:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g12g-b0";
        goto LABEL_86;
      }
      *(int *)((char *)v7 + 3) = 811740519;
      int v15 = 1731342695;
      goto LABEL_149;
    case 15:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v12 = (_DWORD *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v12 <= 3uLL)
      {
        uint64_t v8 = "g12x";
        size_t v10 = 4;
        goto LABEL_87;
      }
      *uint64_t v12 = 2016555367;
      uint64_t v16 = *((void *)v6 + 4) + 4;
      goto LABEL_150;
    case 16:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v11 = *((void *)v6 + 4);
      if ((unint64_t)(*((void *)v6 + 3) - v11) <= 2)
      {
        uint64_t v8 = "g13";
        goto LABEL_55;
      }
      char v19 = 51;
      goto LABEL_125;
    case 17:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g13p-a0";
        goto LABEL_86;
      }
      int v24 = 811674992;
      goto LABEL_120;
    case 18:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g13p-b0";
        goto LABEL_86;
      }
      int v24 = 811740528;
LABEL_120:
      *(int *)((char *)v7 + 3) = v24;
      int v15 = 1882403175;
      goto LABEL_149;
    case 19:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g13g-a0";
        goto LABEL_86;
      }
      int v25 = 811674983;
      goto LABEL_123;
    case 20:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g13g-b0";
        goto LABEL_86;
      }
      int v25 = 811740519;
LABEL_123:
      *(int *)((char *)v7 + 3) = v25;
      int v15 = 1731408231;
      goto LABEL_149;
    case 21:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v11 = *((void *)v6 + 4);
      if ((unint64_t)(*((void *)v6 + 3) - v11) <= 2)
      {
        uint64_t v8 = "g14";
LABEL_55:
        size_t v10 = 3;
        goto LABEL_87;
      }
      char v19 = 52;
LABEL_125:
      *(unsigned char *)(v11 + 2) = v19;
      *(_WORD *)uint64_t v11 = 12647;
      uint64_t v16 = *((void *)v6 + 4) + 3;
      goto LABEL_150;
    case 22:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g14p-a0";
        goto LABEL_86;
      }
      int v26 = 811674992;
      goto LABEL_128;
    case 23:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g14p-b0";
        goto LABEL_86;
      }
      int v26 = 811740528;
LABEL_128:
      *(int *)((char *)v7 + 3) = v26;
      int v15 = 1882468711;
      goto LABEL_149;
    case 24:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g14g-a0";
        goto LABEL_86;
      }
      int v27 = 811674983;
      goto LABEL_131;
    case 25:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g14g-b0";
        goto LABEL_86;
      }
      int v27 = 811740519;
LABEL_131:
      *(int *)((char *)v7 + 3) = v27;
      int v15 = 1731473767;
      goto LABEL_149;
    case 26:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g14s-a0";
        goto LABEL_86;
      }
      int v28 = 811674995;
      goto LABEL_148;
    case 27:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g14s-b0";
        goto LABEL_86;
      }
      int v28 = 811740531;
LABEL_148:
      *(int *)((char *)v7 + 3) = v28;
      int v15 = 1932800359;
      goto LABEL_149;
    case 28:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g14c-a0";
        goto LABEL_86;
      }
      int v29 = 811674979;
      goto LABEL_135;
    case 29:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g14c-b0";
        goto LABEL_86;
      }
      int v29 = 811740515;
LABEL_135:
      *(int *)((char *)v7 + 3) = v29;
      int v15 = 1664364903;
      goto LABEL_149;
    case 30:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g14d-a0";
        goto LABEL_86;
      }
      int v30 = 811674980;
      goto LABEL_138;
    case 31:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g14d-b0";
        goto LABEL_86;
      }
      int v30 = 811740516;
LABEL_138:
      *(int *)((char *)v7 + 3) = v30;
      int v15 = 1681142119;
      goto LABEL_149;
    case 32:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g13s-a0";
        goto LABEL_86;
      }
      int v31 = 811674995;
      goto LABEL_141;
    case 33:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g13s-b0";
        goto LABEL_86;
      }
      int v31 = 811740531;
LABEL_141:
      *(int *)((char *)v7 + 3) = v31;
      int v15 = 1932734823;
      goto LABEL_149;
    case 34:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g13c-a0";
        goto LABEL_86;
      }
      int v17 = 811674979;
      goto LABEL_143;
    case 35:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g13c-b0";
        goto LABEL_86;
      }
      int v17 = 811740515;
LABEL_143:
      *(int *)((char *)v7 + 3) = v17;
      int v15 = 1664299367;
      goto LABEL_149;
    case 36:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g13d-a0";
        goto LABEL_86;
      }
      int v18 = 811674980;
      goto LABEL_145;
    case 37:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g13d-b0";
        goto LABEL_86;
      }
      int v18 = 811740516;
LABEL_145:
      *(int *)((char *)v7 + 3) = v18;
      int v15 = 1681076583;
      goto LABEL_149;
    case 38:
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g15p-b0";
LABEL_86:
        size_t v10 = 7;
        goto LABEL_87;
      }
      *(int *)((char *)v7 + 3) = 811740528;
      int v15 = 1882534247;
LABEL_149:
      *uint64_t v7 = v15;
      uint64_t v16 = *((void *)v6 + 4) + 7;
      goto LABEL_150;
    default:
      if (a2 != 100) {
        goto LABEL_88;
      }
      unint64_t v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v9 = *((void *)v6 + 4);
      if ((unint64_t)(*((void *)v6 + 3) - v9) > 0xA)
      {
        *(_DWORD *)(v9 + 7) = 1684370546;
        *(void *)uint64_t v9 = *(void *)"unsupported";
        uint64_t v16 = *((void *)v6 + 4) + 11;
LABEL_150:
        *((void *)v6 + 4) = v16;
      }
      else
      {
        uint64_t v8 = "unsupported";
        size_t v10 = 11;
LABEL_87:
        llvm::raw_ostream::write(v6, v8, v10);
      }
LABEL_88:
      uint64_t result = *(llvm::raw_ostream **)(a1 + 16);
      BOOL v14 = (_WORD *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v14 > 1uLL)
      {
        *BOOL v14 = 2594;
        *((void *)result + 4) += 2;
      }
      else
      {
        return llvm::raw_ostream::write(result, "\"\n", 2uLL);
      }
      return result;
  }
}

void sub_1CBD79F08()
{
}

uint64_t sub_1CBD79F1C(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(result + 8) + 272) + 24) + 8);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(v2 + 16) & 0xFFFFF00F | (16 * a2);
  return result;
}

void *sub_1CBD79F40(void *a1)
{
  *a1 = &unk_1F25FD718;
  uint64_t v2 = (void *)a1[263];
  if (v2 != a1 + 266) {
    free(v2);
  }
  return a1;
}

void sub_1CBD79F94(void *a1)
{
  *a1 = &unk_1F25FD718;
  uint64_t v2 = (void *)a1[263];
  if (v2 != a1 + 266) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CBD7A008()
{
}

uint64_t sub_1CBD7A01C()
{
  return 87;
}

char **sub_1CBD7A024(uint64_t a1, int a2)
{
  if (a2 >= 128) {
    return (char **)(a1 + 24 * (a2 - 128) + 16);
  }
  else {
    return &(&off_1E684AC10)[3 * a2];
  }
}

_DWORD *sub_1CBD7A048(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7 = *(unsigned int *)(a3 + 12);
  unint64_t v8 = a7;
  uint64_t v11 = 1;
  switch((int)v7)
  {
    case 1:
    case 6:
    case 10:
    case 18:
    case 129:
    case 133:
    case 171:
    case 175:
      goto LABEL_42;
    case 2:
    case 7:
    case 11:
    case 19:
    case 130:
    case 134:
      uint64_t v11 = 2;
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 3:
    case 8:
    case 12:
    case 20:
    case 132:
    case 136:
    case 143:
    case 147:
    case 151:
    case 153:
    case 157:
    case 166:
    case 183:
    case 184:
    case 185:
    case 212:
    case 213:
    case 214:
      uint64_t v11 = 4;
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 4:
    case 9:
    case 13:
    case 21:
    case 128:
    case 138:
    case 139:
    case 167:
    case 176:
    case 190:
    case 191:
    case 192:
    case 193:
      uint64_t v11 = 8;
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 131:
    case 135:
    case 179:
    case 205:
      uint64_t v11 = 3;
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 137:
      uint64_t v11 = 11;
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 140:
    case 144:
    case 148:
    case 152:
    case 194:
    case 195:
    case 196:
    case 197:
    case 203:
      uint64_t v11 = 10;
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 141:
    case 142:
    case 145:
    case 146:
    case 149:
    case 150:
    case 202:
    case 204:
      uint64_t v11 = 9;
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 154:
    case 155:
    case 159:
    case 164:
    case 165:
    case 170:
    case 174:
      uint64_t v11 = 5;
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 156:
    case 160:
    case 177:
    case 178:
      uint64_t v11 = 7;
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 158:
    case 168:
    case 169:
    case 172:
    case 173:
      uint64_t v11 = 6;
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 161:
    case 162:
    case 163:
      BOOL v12 = (v7 - 161) >= 2;
      uint64_t v13 = 7;
      uint64_t v14 = 4;
      goto LABEL_27;
    case 180:
    case 181:
    case 182:
      BOOL v15 = (v7 & 0xFFFFFFFE) == 180;
      goto LABEL_34;
    case 186:
    case 187:
    case 188:
    case 189:
      BOOL v12 = (v7 - 186) >= 3;
      uint64_t v13 = 2;
      uint64_t v14 = 6;
LABEL_27:
      if (v12) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = v14;
      }
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 198:
    case 199:
    case 200:
    case 201:
      if ((v7 - 198) < 3) {
        uint64_t v11 = 9;
      }
      else {
        uint64_t v11 = 10;
      }
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 206:
    case 207:
    case 208:
      BOOL v15 = v7 == 207;
LABEL_34:
      if (v15) {
        uint64_t v11 = 4;
      }
      else {
        uint64_t v11 = 3;
      }
      if (!a7) {
        return result;
      }
      goto LABEL_43;
    case 209:
    case 210:
    case 211:
      if ((v7 - 209) >= 2) {
        uint64_t v11 = 3;
      }
      else {
        uint64_t v11 = 4;
      }
LABEL_42:
      if (a7)
      {
LABEL_43:
        uint64_t v16 = *(unsigned int *)(a3 + 8);
        if ((v7 - 137) > 3)
        {
          if ((v7 - 141) > 3)
          {
            if ((v7 - 145) > 3)
            {
              if ((v7 - 149) > 3)
              {
                if ((v7 - 198) > 3)
                {
                  uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)result + 80))(result, v7);
                  int v17 = result[2];
                  switch(*(_DWORD *)(a3 + 12))
                  {
                    case 0x81:
                      unint64_t v8 = v8 >> 1;
                      break;
                    case 0x82:
                      unint64_t v8 = (unsigned __int16)v8 >> 1;
                      break;
                    case 0x83:
                      unint64_t v8 = (v8 >> 1) & 0x7FFFFF;
                      break;
                    case 0x84:
                      unint64_t v8 = v8 >> 1;
                      break;
                    case 0x85:
                      unint64_t v8 = (v8 + 2) >> 1;
                      break;
                    case 0x86:
                      unint64_t v8 = (unsigned __int16)(v8 + 2) >> 1;
                      break;
                    case 0x87:
                      unint64_t v8 = ((unint64_t)(v8 + 2) >> 1) & 0x7FFFFF;
                      break;
                    case 0x88:
                      unint64_t v8 = (v8 + 2) >> 1;
                      break;
                    default:
                      break;
                  }
                  int v18 = -v17;
                  do
                  {
                    unint64_t v19 = v8 >> v18;
                    if (v17 >= 0) {
                      LOBYTE(v19) = v8 << v17;
                    }
                    *(unsigned char *)(a5 + v16) |= v19;
                    LODWORD(v16) = v16 + 1;
                    v17 -= 8;
                    LOBYTE(v18) = v18 + 8;
                    --v11;
                  }
                  while (v11);
                }
                else
                {
                  return (_DWORD *)sub_1CD450124(v7, a5 + v16, a7);
                }
              }
              else
              {
                return (_DWORD *)sub_1CBE57710(v7, a5 + v16, a7);
              }
            }
            else
            {
              return (_DWORD *)sub_1CBE5736C(v7, a5 + v16, a7);
            }
          }
          else
          {
            return (_DWORD *)sub_1CBE56FC8(v7, a5 + v16, a7);
          }
        }
        else
        {
          return (_DWORD *)sub_1CBE56DB0(v7, (unsigned char *)(a5 + v16), a7);
        }
      }
      return result;
    default:
      llvm::report_fatal_error((llvm *)"Unknown relocation!", (const llvm::Twine *)1);
  }
}

uint64_t sub_1CBD7A740()
{
  return 0;
}

BOOL sub_1CBD7A748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 0;
  switch(*(_DWORD *)(a2 + 12))
  {
    case 0x82:
    case 0x86:
      BOOL v4 = a3 == (__int16)a3;
      goto LABEL_5;
    case 0x83:
    case 0x87:
      BOOL result = (unint64_t)(a3 - 0x800000) < 0xFFFFFFFFFF000000;
      break;
    case 0x84:
    case 0x88:
      return result;
    default:
      BOOL v4 = a3 == (char)a3;
LABEL_5:
      BOOL result = !v4;
      break;
  }
  return result;
}

void sub_1CBD7A7BC(uint64_t a1, unsigned int *a2)
{
  uint64_t v9 = &v11;
  long long v10 = xmmword_1CD96DBF0;
  sub_1CD430D60((uint64_t)v7, (uint64_t)&v9);
  llvm::MCInst::dump_pretty(a2, (llvm::raw_ostream *)v7, 0, " ", 1uLL, 0);
  sub_1CB8E509C((llvm::raw_ostream *)v7, "\n");
  uint64_t v4 = *v8;
  uint64_t v3 = v8[1];
  __int16 v6 = 1283;
  v5[0] = "unexpected instruction to relax: ";
  void v5[2] = v4;
  v5[3] = v3;
  llvm::report_fatal_error((llvm *)v5, (const llvm::Twine *)1);
}

uint64_t sub_1CBD7A854()
{
  return 2;
}

uint64_t sub_1CBD7A85C(uint64_t a1, llvm::raw_ostream *this, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  if (a3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 2112);
  if (!v4 || a3 % (2 * v4)) {
    return 0;
  }
  if (a3 >= 2)
  {
    unint64_t v7 = 0;
    unint64_t v8 = a3 >> 1;
    do
    {
      __int16 v9 = *(_WORD *)(*(void *)(a1 + 2104) + 2 * (v7 % *(void *)(a1 + 2112)));
      long long v10 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v10 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, v9);
      }
      else
      {
        *((void *)this + 4) = v10 + 1;
        *long long v10 = v9;
      }
      uint64_t v11 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v11 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, SHIBYTE(v9));
      }
      else
      {
        *((void *)this + 4) = v11 + 1;
        *uint64_t v11 = HIBYTE(v9);
      }
      ++v7;
    }
    while (v8 != v7);
  }
  return 1;
}

void sub_1CBD7A95C(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::MCAsmLayout *a4, uint64_t a5, uint64_t a6, void *a7, unsigned int *a8)
{
  int v15 = *(_DWORD *)((*(uint64_t (**)(void, void))(**(void **)(a3 + 8) + 80))(*(void *)(a3 + 8), *(unsigned int *)(a6 + 12))+ 16);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA618B20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EA618B20))
  {
    __cxa_guard_release(&qword_1EA618B20);
  }
  int v16 = *(_DWORD *)(a6 + 12);
  if (*a7) {
    int v17 = *(unsigned __int16 *)(*a7 + 1);
  }
  else {
    int v17 = 0;
  }
  std::string::size_type v44 = a8;
  if (v16 == 4)
  {
LABEL_5:
    int v45 = 0;
    if (v17 == 153) {
      unsigned int v18 = 5;
    }
    else {
      unsigned int v18 = 0;
    }
    int v19 = 3;
    goto LABEL_9;
  }
  if (v16 > 127)
  {
    switch(v16)
    {
      case 128:
        goto LABEL_5;
      case 137:
      case 138:
      case 139:
      case 140:
        switch(v17)
        {
          case 151:
            int v45 = 0;
            unsigned int v18 = 3;
            goto LABEL_42;
          case 152:
            int v45 = 0;
            unsigned int v18 = 4;
            goto LABEL_42;
          case 153:
            int v45 = 0;
            unsigned int v18 = 12;
            goto LABEL_42;
          case 154:
            int v45 = 0;
            unsigned int v18 = 6;
            goto LABEL_42;
          case 155:
            goto LABEL_99;
          case 156:
            int v45 = 0;
            unsigned int v18 = 7;
            goto LABEL_42;
          case 157:
            int v45 = 0;
            unsigned int v18 = 8;
            goto LABEL_42;
          default:
            goto LABEL_98;
        }
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
        int v19 = 0;
        int v45 = 0;
        unsigned int v18 = 2;
        goto LABEL_9;
      case 153:
      case 154:
      case 155:
      case 156:
        int v37 = sub_1CD44FB48(v16);
        goto LABEL_93;
      case 157:
      case 158:
      case 159:
      case 160:
        int v37 = sub_1CD44FBC8(v16);
        goto LABEL_93;
      case 161:
      case 162:
      case 163:
        int v37 = sub_1CD44FC3C(v16);
        goto LABEL_93;
      case 164:
      case 165:
      case 166:
      case 167:
        int v37 = sub_1CD44FCBC(v16);
        goto LABEL_93;
      case 168:
      case 169:
      case 170:
      case 171:
        int v37 = sub_1CD44FD3C(v16);
        goto LABEL_93;
      case 172:
      case 173:
      case 174:
      case 175:
        int v37 = sub_1CD44FDBC(v16);
        goto LABEL_93;
      case 176:
      case 177:
      case 178:
      case 179:
        int v37 = sub_1CD44FE3C(v16);
        goto LABEL_93;
      case 180:
      case 181:
      case 182:
        int v37 = sub_1CD44FEB0(v16);
        goto LABEL_93;
      case 183:
      case 184:
      case 185:
        int v37 = sub_1CD44FF24(v16);
        goto LABEL_93;
      case 186:
      case 187:
      case 188:
      case 189:
        int v37 = sub_1CD44FFA4(v16);
        goto LABEL_93;
      case 190:
      case 191:
      case 192:
      case 193:
        int v37 = sub_1CD450024(v16);
        goto LABEL_93;
      case 194:
      case 195:
      case 196:
      case 197:
        int v37 = sub_1CD4500A4(v16);
        goto LABEL_93;
      case 198:
      case 199:
      case 200:
      case 201:
        int v37 = sub_1CD4502D0(v16);
        goto LABEL_93;
      case 202:
      case 203:
      case 204:
      case 205:
        int v37 = sub_1CD450350(v16);
        goto LABEL_93;
      case 206:
      case 207:
      case 208:
        int v37 = sub_1CD4503C4(v16);
        goto LABEL_93;
      case 209:
      case 210:
      case 211:
        int v37 = sub_1CD450438(v16);
        goto LABEL_93;
      case 212:
      case 213:
      case 214:
        int v37 = sub_1CD4504AC(v16);
LABEL_93:
        int v45 = v37;
        int v19 = 0;
        unsigned int v18 = 15;
        goto LABEL_9;
      default:
        goto LABEL_99;
    }
  }
  switch(v16)
  {
    case 1:
      int v19 = 0;
      unsigned int v18 = 0;
      int v45 = 0;
      goto LABEL_9;
    case 2:
      unsigned int v18 = 0;
      int v45 = 0;
      int v19 = 1;
      goto LABEL_9;
    case 3:
LABEL_98:
      unsigned int v18 = 0;
      int v45 = 0;
LABEL_42:
      int v19 = 2;
LABEL_9:
      if (a7[1]) {
        goto LABEL_49;
      }
      if (v18 <= 0xC && ((1 << v18) & 0x10A0) != 0) {
        *(void *)a8 = a7[2];
      }
      int v20 = v15 & 1;
      if (*a7) {
        uint64_t v21 = *(void *)(*a7 + 16);
      }
      else {
        uint64_t v21 = 0;
      }
      if (v18) {
        BOOL v22 = 1;
      }
      else {
        BOOL v22 = v20 == 0;
      }
      int v23 = 1 << v19;
      if (v22) {
        int v23 = 0;
      }
      if (v21
        && v23 != -*((_DWORD *)a7 + 4)
        && (llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v21) & 1) == 0)
      {
LABEL_49:
        unsigned int v33 = "Relocation with symbol difference is not supported.";
        goto LABEL_50;
      }
      int v24 = (uint64_t **)a4;
      llvm::MCAsmLayout::ensureValid(a4, (const llvm::MCFragment *)a5);
      int v25 = *(_DWORD *)(a5 + 32);
      int v26 = *(_DWORD *)(a6 + 8);
      if (!*a7 && !a7[1])
      {
        unsigned int v33 = "FIXME: relocations to absolute targets not yet implemented";
LABEL_50:
        llvm::report_fatal_error((llvm *)v33, (const llvm::Twine *)1);
      }
      int v27 = *(_DWORD *)(v21 + 8);
      if ((v27 & 0x1C00) == 0x800)
      {
        v51[0] = 0;
        *(_DWORD *)(v21 + 8) = v27 | 4;
        if (llvm::MCExpr::evaluateAsAbsolute(*(void *)(v21 + 24), v51, v24, a2 + 8))
        {
          *(void *)std::string::size_type v44 = v51[0];
          return;
        }
      }
      if ((v45 & 0xFFFFFFFC) == 0x150
        || llvm::MachObjectWriter::doesSymbolRequireExternRelocation((llvm::MachObjectWriter *)a2, (const llvm::MCSymbol *)v21))
      {
        unint64_t AssociatedFragment = *(void *)v21 & 0xFFFFFFFFFFFFFFF8;
        if (!AssociatedFragment && (*(_DWORD *)(v21 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v21 + 8) |= 4u;
          unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v21 + 24));
          *(void *)uint64_t v21 = *(void *)v21 & 7 | AssociatedFragment;
        }
        int v29 = 0;
        if (AssociatedFragment) {
          *(void *)v44 -= llvm::MCAsmLayout::getSymbolOffset((llvm::MCAsmLayout *)v24, (const llvm::MCSymbol *)v21);
        }
      }
      else
      {
        unint64_t v28 = *(void *)v21 & 0xFFFFFFFFFFFFFFF8;
        if (!v28 && (*(_DWORD *)(v21 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v21 + 8) |= 4u;
          unint64_t v28 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v21 + 24));
          *(void *)uint64_t v21 = *(void *)v21 & 7 | v28;
        }
        uint64_t v21 = 0;
        int v29 = *(_DWORD *)(*(void *)(v28 + 16) + 28) + 1;
      }
      if (v20)
      {
        v51[0] = *(void *)(a5 + 16);
        __p[0] = 0;
        if (sub_1CB915048(a2 + 8, v51, __p)) {
          uint64_t v36 = *((void *)__p[0] + 1);
        }
        else {
          uint64_t v36 = 0;
        }
        *(void *)v44 -= v36;
      }
      int v30 = v26 + v25;
      switch(v18)
      {
        case 3u:
          __int16 v34 = v44;
          uint64_t v35 = *v44;
          break;
        case 4u:
          __int16 v34 = v44;
          uint64_t v35 = v44[1];
          break;
        case 0xFu:
          LODWORD(v51[0]) = v30;
          HIDWORD(v51[0]) = (v20 << 24) | (v19 << 25) | v29 | 0xF0000000;
          sub_1CBC60F00((uint64_t)a2, v21, *(void *)(a5 + 16), v51);
          uint64_t v21 = 0;
          int v31 = 0;
          LODWORD(v51[0]) = v30;
          int v19 = 2;
          unsigned int v18 = 14;
          int v29 = v45;
LABEL_36:
          HIDWORD(v51[0]) = v29 | (v18 << 28) | v31 | (v19 << 25);
          sub_1CBC60F00((uint64_t)a2, v21, *(void *)(a5 + 16), v51);
          return;
        default:
LABEL_33:
          LODWORD(v51[0]) = v30;
          if (v20) {
            int v31 = 0x1000000;
          }
          else {
            int v31 = 0;
          }
          goto LABEL_36;
      }
      void *v34 = v35;
      goto LABEL_33;
  }
LABEL_99:
  uint64_t v38 = *(void *)a3;
  uint64_t v39 = *(void *)(a6 + 16);
  int v46 = *(_DWORD *)(a6 + 12);
  sub_1CD431AE8(&v46, (uint64_t)&v47);
  int v40 = std::string::insert(&v47, 0, "unsupported relocation on symbol (");
  std::string::size_type v41 = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  std::string v42 = std::string::append(&v48, ")");
  std::string::size_type v43 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  std::string::size_type v50 = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  __int16 v52 = 260;
  v51[0] = (uint64_t)__p;
  llvm::MCContext::reportError(v38, v39, (uint64_t)v51);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
}

void sub_1CBD7B110()
{
}

void sub_1CBD7B124(uint64_t a1, unsigned __int16 *a2, llvm::raw_ostream *a3, uint64_t a4, void *a5)
{
  __src[45] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a1 + 8);
  unsigned int v6 = *(_DWORD *)a2;
  uint64_t v7 = *v5;
  uint64_t v106 = &v108;
  long long v107 = xmmword_1CD96EEC0;
  uint64_t v8 = a5[24];
  memset(__dst, 0, 24);
  if ((v8 & 0x80000000000) == 0)
  {
    int v98 = "Instruction not annotated as valid for any ISA";
    goto LABEL_103;
  }
  if ((*(unsigned char *)(v7 + 48 * v6 + 20) & 4) == 0)
  {
    int v98 = "Emitted non-G15 instruction for G15";
LABEL_103:
    MEMORY[0x1D25D9630](__dst, v98);
    LOWORD(__src[4]) = 260;
    __src[0] = __dst;
    llvm::report_fatal_error((llvm *)__src, (const llvm::Twine *)1);
  }
  uint64_t v14 = *(void *)(a1 + 16);
  __src[0] = &unk_1F25FDD00;
  __src[1] = a5;
  __src[3] = __src;
  uint64_t v15 = sub_1CBD854F8((uint64_t)__src);
  if (__src[3] == __src)
  {
    (*((void (**)(void **))__src[0] + 4))(__src);
  }
  else if (__src[3])
  {
    (*(void (**)(void *))(*(void *)__src[3] + 40))(__src[3]);
  }
  unsigned int v105 = 0;
  LODWORD(v102) = v15;
  *((void *)&v102 + 1) = a5;
  int v103 = v5;
  uint64_t v104 = v14;
  if (!sub_1CBD82924((unsigned int *)&v102, a2, &v105, (uint64_t)__src))
  {
    uint64_t v99 = "Failed to encode instruction";
    goto LABEL_108;
  }
  unsigned int v16 = v105;
  memcpy(__dst, __src, sizeof(__dst));
  sub_1CBD85228(v15, v105, (uint64_t)__dst, 1);
  unsigned int v105 = 0;
  unsigned int v101 = 0;
  __src[0] = &__src[3];
  __src[3] = 0;
  __src[4] = 0;
  *(void **)((char *)&__src[4] + 6) = 0;
  *(_OWORD *)&__src[1] = xmmword_1CDED2BB0;
  uint64_t v17 = *(unsigned int *)a2;
  if (v17 != 5625
    || (uint64_t v17 = *(unsigned __int8 *)(*((void *)a2 + 2) + 16 * sub_1CBDA6464(5625, 0x24u)),
        v17 == 2))
  {
    unint64_t v18 = 0;
    LOBYTE(v19) = 0;
    char v20 = 0;
  }
  else
  {
    uint64_t v17 = qword_1CDED2BC0[(int)v15];
    uint64_t v19 = (uint64_t)*(&off_1E67BA5E8 + (int)v15);
    unint64_t v18 = v19 & 0xFFFFFFFFFFFFFF00;
    char v20 = 1;
  }
  uint64_t v100 = a1;
  *(void *)&long long v102 = v19 | v18;
  *((void *)&v102 + 1) = v17;
  LOBYTE(v103) = v20;
  if ((sub_1CBE55A78(v15, (uint64_t)__dst, v16, (uint64_t)&v102, &__src[3], &v105, &v101) & 1) == 0)
  {
    uint64_t v99 = "Failed to encode.";
    goto LABEL_108;
  }
  unsigned int v21 = v101;
  BOOL v22 = (void *)((unint64_t)v101 >> 1);
  if (__src[1] != v22)
  {
    if (__src[1] <= v22)
    {
      if (__src[2] < v22) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v22 != __src[1]) {
        bzero((char *)__src[0] + 2 * (uint64_t)__src[1], 2 * ((void)v22 - (unint64_t)__src[1]));
      }
    }
    __src[1] = v22;
  }
  if (v21 >= 2)
  {
    uint64_t v29 = 0;
    uint64_t v30 = v107;
    if ((unint64_t)v22 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = (uint64_t)v22;
    }
    uint64_t v32 = 2 * v31;
    do
    {
      if ((unint64_t)(v30 + 1) > *((void *)&v107 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v106 + v30) = *(_WORD *)((char *)__src[0] + v29);
      uint64_t v33 = v107;
      uint64_t v34 = v107 + 1;
      *(void *)&long long v107 = v107 + 1;
      if ((unint64_t)(v33 + 2) > *((void *)&v107 + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *((unsigned char *)v106 + v34) = HIBYTE(*(_WORD *)((char *)__src[0] + v29));
      uint64_t v30 = v107 + 1;
      *(void *)&long long v107 = v107 + 1;
      v29 += 2;
    }
    while (v32 != v29);
  }
  int v23 = *(_DWORD *)a2;
  if (*(int *)a2 <= 5624)
  {
    if ((v23 - 417) > 9) {
      goto LABEL_83;
    }
    if (((1 << (v23 + 95)) & 0x333) == 0) {
      goto LABEL_83;
    }
    uint64_t v24 = v105;
    unsigned int v25 = sub_1CBDA6464((unsigned __int16)*(_DWORD *)a2, 0x24u);
    uint64_t v26 = *((void *)a2 + 2);
    if (*(unsigned char *)(v26 + 16 * v25) == 2) {
      goto LABEL_83;
    }
    uint64_t v27 = *(void *)(v26 + 16 * v25 + 8);
    switch(v16)
    {
      case 0x10u:
        int v28 = ((uint64_t (*)(uint64_t, uint64_t))loc_1CBE57670)(v15, v24);
        goto LABEL_81;
      case 0xFu:
        int v28 = sub_1CBE572CC(v15, v24);
        goto LABEL_81;
      case 3u:
        int v28 = ((uint64_t (*)(uint64_t, uint64_t))loc_1CBE56F28)(v15, v24);
LABEL_81:
        unint64_t v87 = (void *)*((void *)a2 + 1);
        *(void *)&long long v102 = v27;
        DWORD2(v102) = 0;
        HIDWORD(v102) = v28;
        int v103 = v87;
        unsigned int v88 = *(_DWORD *)(a4 + 8);
        unint64_t v89 = *(void *)a4;
        if (v88 >= *(_DWORD *)(a4 + 12))
        {
          BOOL v97 = v89 + 24 * v88 > (unint64_t)&v102;
          if (v89 > (unint64_t)&v102 || !v97) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v90 = v89 + 24 * *(unsigned int *)(a4 + 8);
        long long v91 = v102;
        *(void *)(v90 + 16) = v103;
        *(_OWORD *)uint64_t v90 = v91;
        ++*(_DWORD *)(a4 + 8);
        goto LABEL_83;
    }
    uint64_t v99 = "Unhandled branch type";
LABEL_108:
    llvm::report_fatal_error((llvm *)v99, (const llvm::Twine *)1);
  }
  if (v23 <= 6832)
  {
    if (v23 == 5625)
    {
      unsigned int v61 = sub_1CBDA6464(5625, 0x24u);
      uint64_t v62 = *((void *)a2 + 2);
      if (*(unsigned char *)(v62 + 16 * v61) == 2) {
        goto LABEL_83;
      }
      uint64_t v27 = *(void *)(v62 + 16 * v61 + 8);
      int v28 = ((uint64_t (*)(uint64_t, void))loc_1CBE56D14)(v15, v105);
      goto LABEL_81;
    }
    if (v23 == 5724)
    {
      uint64_t v47 = 0;
      unsigned int v48 = v105;
      char v49 = 1;
      do
      {
        char v50 = v49;
        unsigned int v51 = sub_1CBDA6464(*a2, (unsigned __int16)word_1F25FD9A8[8 * v47]);
        uint64_t v52 = *((void *)a2 + 2);
        if (*(unsigned char *)(v52 + 16 * v51) != 2)
        {
          uint64_t v53 = *(void *)(v52 + 16 * v51 + 8);
          int v54 = (*(uint64_t (**)(int, int))&word_1F25FD9A8[8 * v47 + 4])(v15, v48);
          int v55 = (void *)*((void *)a2 + 1);
          *(void *)&long long v102 = v53;
          DWORD2(v102) = 0;
          HIDWORD(v102) = v54;
          int v103 = v55;
          unsigned int v56 = *(_DWORD *)(a4 + 8);
          unint64_t v57 = *(void *)a4;
          if (v56 >= *(_DWORD *)(a4 + 12))
          {
            BOOL v60 = v57 + 24 * v56 > (unint64_t)&v102;
            if (v57 > (unint64_t)&v102 || !v60) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v58 = v57 + 24 * *(unsigned int *)(a4 + 8);
          long long v59 = v102;
          *(void *)(v58 + 16) = v103;
          *(_OWORD *)uint64_t v58 = v59;
          ++*(_DWORD *)(a4 + 8);
        }
        char v49 = 0;
        uint64_t v47 = 1;
      }
      while ((v50 & 1) != 0);
    }
  }
  else
  {
    switch(v23)
    {
      case 6833:
        uint64_t v75 = 0;
        uint64_t v76 = v105;
        do
        {
          unsigned int v77 = sub_1CBDA6464(*a2, (unsigned __int16)word_1F25FD9C8[v75]);
          uint64_t v78 = *((void *)a2 + 2);
          if (*(unsigned char *)(v78 + 16 * v77) != 2)
          {
            uint64_t v79 = *(void *)(v78 + 16 * v77 + 8);
            int v80 = (*(uint64_t (**)(uint64_t, uint64_t))&word_1F25FD9C8[v75 + 4])(v15, v76);
            uint64_t v81 = (void *)*((void *)a2 + 1);
            *(void *)&long long v102 = v79;
            DWORD2(v102) = 0;
            HIDWORD(v102) = v80;
            int v103 = v81;
            unsigned int v82 = *(_DWORD *)(a4 + 8);
            unint64_t v83 = *(void *)a4;
            if (v82 >= *(_DWORD *)(a4 + 12))
            {
              BOOL v86 = v83 + 24 * v82 > (unint64_t)&v102;
              if (v83 > (unint64_t)&v102 || !v86) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v84 = v83 + 24 * *(unsigned int *)(a4 + 8);
            long long v85 = v102;
            *(void *)(v84 + 16) = v103;
            *(_OWORD *)uint64_t v84 = v85;
            ++*(_DWORD *)(a4 + 8);
          }
          v75 += 8;
        }
        while (v75 != 24);
        break;
      case 8695:
        uint64_t v63 = 0;
        uint64_t v64 = v105;
        do
        {
          unsigned int v65 = sub_1CBDA6464(*a2, (unsigned __int16)word_1F25FD8E8[v63]);
          uint64_t v66 = *((void *)a2 + 2);
          if (*(unsigned char *)(v66 + 16 * v65) != 2)
          {
            uint64_t v67 = *(void *)(v66 + 16 * v65 + 8);
            int v68 = (*(uint64_t (**)(uint64_t, uint64_t))&word_1F25FD8E8[v63 + 4])(v15, v64);
            uint64_t v69 = (void *)*((void *)a2 + 1);
            *(void *)&long long v102 = v67;
            DWORD2(v102) = 0;
            HIDWORD(v102) = v68;
            int v103 = v69;
            unsigned int v70 = *(_DWORD *)(a4 + 8);
            unint64_t v71 = *(void *)a4;
            if (v70 >= *(_DWORD *)(a4 + 12))
            {
              BOOL v74 = v71 + 24 * v70 > (unint64_t)&v102;
              if (v71 > (unint64_t)&v102 || !v74) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v72 = v71 + 24 * *(unsigned int *)(a4 + 8);
            long long v73 = v102;
            *(void *)(v72 + 16) = v103;
            *(_OWORD *)uint64_t v72 = v73;
            ++*(_DWORD *)(a4 + 8);
          }
          v63 += 8;
        }
        while (v63 != 56);
        break;
      case 8696:
        uint64_t v35 = 0;
        uint64_t v36 = v105;
        do
        {
          unsigned int v37 = sub_1CBDA6464(*a2, (unsigned __int16)word_1F25FD958[v35]);
          uint64_t v38 = *((void *)a2 + 2);
          if (*(unsigned char *)(v38 + 16 * v37) != 2)
          {
            uint64_t v39 = *(void *)(v38 + 16 * v37 + 8);
            int v40 = (*(uint64_t (**)(uint64_t, uint64_t))&word_1F25FD958[v35 + 4])(v15, v36);
            std::string::size_type v41 = (void *)*((void *)a2 + 1);
            *(void *)&long long v102 = v39;
            DWORD2(v102) = 0;
            HIDWORD(v102) = v40;
            int v103 = v41;
            unsigned int v42 = *(_DWORD *)(a4 + 8);
            unint64_t v43 = *(void *)a4;
            if (v42 >= *(_DWORD *)(a4 + 12))
            {
              BOOL v46 = v43 + 24 * v42 > (unint64_t)&v102;
              if (v43 > (unint64_t)&v102 || !v46) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v44 = v43 + 24 * *(unsigned int *)(a4 + 8);
            long long v45 = v102;
            *(void *)(v44 + 16) = v103;
            *(_OWORD *)uint64_t v44 = v45;
            ++*(_DWORD *)(a4 + 8);
          }
          v35 += 8;
        }
        while (v35 != 40);
        break;
    }
  }
LABEL_83:
  if (__src[0] != &__src[3]) {
    free(__src[0]);
  }
  uint64_t v92 = *(void *)(v100 + 24);
  uint64_t v93 = v107;
  if (!*(unsigned char *)(v92 + 148)) {
    *(_DWORD *)(v92 + 144) += v107;
  }
  uint64_t v94 = (char *)v106;
  if (v93)
  {
    do
    {
      char v95 = *v94;
      int v96 = (char *)*((void *)a3 + 4);
      if ((unint64_t)v96 >= *((void *)a3 + 3))
      {
        llvm::raw_ostream::write(a3, v95);
      }
      else
      {
        *((void *)a3 + 4) = v96 + 1;
        *int v96 = v95;
      }
      ++v94;
      --v93;
    }
    while (v93);
    uint64_t v94 = (char *)v106;
  }
  if (v94 != (char *)&v108) {
    free(v94);
  }
}

llvm::MCStreamer *sub_1CBD7BBC0(uint64_t a1, llvm::MCStreamer *this)
{
  return llvm::MCStreamer::visitUsedExpr(this, *(const llvm::MCExpr ***)(a1 + 32));
}

llvm::raw_ostream *sub_1CBD7BBFC(llvm::raw_ostream *this, char *__s, unsigned int a3, unsigned int a4)
{
  if (a4 >= 5)
  {
    uint64_t v8 = (_WORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v8 > 1uLL)
    {
      *uint64_t v8 = 8315;
      *((void *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, "{ ", 2uLL);
    }
  }
  if ((a4 & 3) == 0)
  {
    if (__s)
    {
      size_t v21 = strlen(__s);
      BOOL v22 = (void *)*((void *)this + 4);
      if (v21 <= *((void *)this + 3) - (void)v22)
      {
        if (v21)
        {
          memcpy(v22, __s, v21);
          *((void *)this + 4) += v21;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, __s, v21);
      }
    }
    unint64_t v23 = a3 >> 1;
    BOOL result = sub_1CD098D14(this, v23, 0, 0, 0);
    if (a4 < 8)
    {
LABEL_46:
      if (a4 >= 5)
      {
        uint64_t v29 = (_WORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v29 > 1uLL)
        {
          *uint64_t v29 = 32032;
          *((void *)this + 4) += 2;
        }
        else
        {
          return llvm::raw_ostream::write(this, " }", 2uLL);
        }
      }
      return result;
    }
    uint64_t v24 = (a4 >> 2) - 1;
    unint64_t v25 = v23 + 1;
    while (1)
    {
      uint64_t v26 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v26 > 1uLL)
      {
        *uint64_t v26 = 8236;
        *((void *)this + 4) += 2;
        if (__s)
        {
LABEL_38:
          size_t v27 = strlen(__s);
          int v28 = (void *)*((void *)this + 4);
          if (v27 <= *((void *)this + 3) - (void)v28)
          {
            if (v27)
            {
              memcpy(v28, __s, v27);
              *((void *)this + 4) += v27;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, __s, v27);
          }
        }
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
        if (__s) {
          goto LABEL_38;
        }
      }
      BOOL result = sub_1CD098D14(this, v25++, 0, 0, 0);
      if (!--v24) {
        goto LABEL_46;
      }
    }
  }
  if (__s)
  {
    size_t v9 = strlen(__s);
    long long v10 = (void *)*((void *)this + 4);
    if (v9 <= *((void *)this + 3) - (void)v10)
    {
      if (v9)
      {
        memcpy(v10, __s, v9);
        *((void *)this + 4) += v9;
      }
    }
    else
    {
      llvm::raw_ostream::write(this, __s, v9);
    }
  }
  BOOL result = sub_1CD098D14(this, a3 >> 1, 0, 0, 0);
  if (a3) {
    BOOL v12 = "h";
  }
  else {
    BOOL v12 = "l";
  }
  uint64_t v13 = (char *)*((void *)this + 4);
  if (*((char **)this + 3) == v13)
  {
    BOOL result = llvm::raw_ostream::write(this, v12, 1uLL);
  }
  else
  {
    *uint64_t v13 = *v12;
    ++*((void *)this + 4);
  }
  if (a4 >= 4)
  {
    int v14 = (a4 >> 1) - 1;
    unsigned int v15 = a3 + 1;
    while (1)
    {
      unsigned int v16 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v16 > 1uLL)
      {
        *unsigned int v16 = 8236;
        *((void *)this + 4) += 2;
        if (__s)
        {
LABEL_17:
          size_t v17 = strlen(__s);
          unint64_t v18 = (void *)*((void *)this + 4);
          if (v17 <= *((void *)this + 3) - (void)v18)
          {
            if (v17)
            {
              memcpy(v18, __s, v17);
              *((void *)this + 4) += v17;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, __s, v17);
          }
        }
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
        if (__s) {
          goto LABEL_17;
        }
      }
      BOOL result = sub_1CD098D14(this, v15 >> 1, 0, 0, 0);
      if (v15) {
        uint64_t v19 = "h";
      }
      else {
        uint64_t v19 = "l";
      }
      char v20 = (char *)*((void *)this + 4);
      if (*((char **)this + 3) == v20)
      {
        BOOL result = llvm::raw_ostream::write(this, v19, 1uLL);
      }
      else
      {
        *char v20 = *v19;
        ++*((void *)this + 4);
      }
      ++v15;
      if (!--v14) {
        goto LABEL_46;
      }
    }
  }
  return result;
}

uint64_t sub_1CBD7C030(uint64_t a1, int a2)
{
  return sub_1CBD7C038(a2);
}

uint64_t sub_1CBD7C038(int a1)
{
  uint64_t result = 1;
  if (a1 > 5551)
  {
    switch(a1)
    {
      case 6250:
      case 6253:
      case 6254:
      case 6255:
      case 6355:
      case 6359:
      case 6363:
      case 6367:
      case 6371:
      case 6375:
      case 6379:
      case 6383:
      case 6387:
      case 6391:
      case 6395:
      case 6399:
      case 6403:
      case 6407:
      case 6411:
      case 6415:
      case 6419:
      case 6423:
      case 6427:
      case 6431:
      case 6435:
      case 6439:
      case 6443:
      case 6447:
      case 6451:
      case 6455:
      case 6459:
      case 6707:
      case 6708:
      case 6709:
      case 6710:
      case 6711:
      case 6712:
      case 6713:
      case 6714:
      case 6715:
      case 6834:
      case 6835:
      case 6836:
      case 6837:
      case 6838:
      case 6839:
      case 6840:
      case 6841:
      case 6842:
      case 6843:
      case 6844:
      case 6845:
      case 6997:
      case 6998:
      case 6999:
      case 7000:
      case 7001:
      case 7002:
      case 7003:
      case 7004:
      case 7005:
      case 7006:
      case 7007:
      case 7008:
      case 7009:
      case 7010:
      case 7011:
      case 7012:
      case 7013:
      case 7014:
      case 7015:
      case 7016:
      case 7017:
      case 7018:
      case 7019:
      case 7020:
      case 7021:
      case 7022:
      case 7023:
      case 7024:
      case 7025:
      case 7026:
      case 7027:
      case 7028:
      case 7029:
      case 7030:
      case 7031:
      case 7032:
      case 7033:
      case 7034:
      case 7035:
      case 7036:
      case 7037:
      case 7038:
      case 7039:
      case 7040:
      case 7041:
      case 7042:
      case 7043:
      case 7044:
      case 7045:
      case 7046:
      case 7047:
      case 7048:
      case 7049:
      case 7050:
      case 7051:
      case 7052:
      case 7053:
      case 7054:
      case 7055:
      case 7056:
      case 7057:
      case 7058:
      case 7059:
      case 7060:
      case 7061:
      case 7062:
      case 7063:
      case 7064:
      case 7065:
      case 7066:
      case 7067:
      case 7068:
      case 7069:
      case 7070:
      case 7071:
      case 7072:
      case 7073:
      case 7074:
      case 7075:
      case 7076:
      case 7077:
      case 7078:
      case 7079:
      case 7080:
      case 7081:
      case 7082:
      case 7083:
      case 7084:
      case 7085:
      case 7086:
      case 7087:
      case 7088:
      case 7089:
      case 7090:
      case 7091:
      case 7092:
      case 7093:
      case 7094:
      case 7095:
      case 7096:
      case 7097:
      case 7098:
      case 7099:
      case 7100:
      case 7101:
      case 7102:
      case 7103:
      case 7104:
      case 7105:
      case 7106:
      case 7107:
      case 7108:
      case 7109:
      case 7110:
      case 7111:
      case 7112:
      case 7113:
      case 7114:
      case 7115:
      case 7116:
      case 7117:
      case 7118:
      case 7119:
      case 7120:
      case 7121:
      case 7122:
      case 7123:
      case 7124:
      case 7125:
      case 7126:
      case 7127:
      case 7128:
      case 7129:
      case 7130:
      case 7131:
      case 7132:
      case 7133:
      case 7134:
      case 7135:
      case 7136:
      case 7137:
      case 7138:
      case 7139:
      case 7140:
      case 7141:
      case 7142:
      case 7143:
      case 7144:
      case 7145:
      case 7146:
      case 7147:
      case 7148:
      case 7149:
      case 7150:
      case 7151:
      case 7152:
      case 7153:
      case 7154:
      case 7155:
      case 7156:
      case 7157:
      case 7158:
        return 4;
      case 6251:
      case 6252:
      case 6356:
      case 6357:
      case 6358:
      case 6360:
      case 6361:
      case 6362:
      case 6364:
      case 6365:
      case 6366:
      case 6368:
      case 6369:
      case 6370:
      case 6372:
      case 6373:
      case 6374:
      case 6376:
      case 6377:
      case 6378:
      case 6380:
      case 6381:
      case 6382:
      case 6384:
      case 6385:
      case 6386:
      case 6388:
      case 6389:
      case 6390:
      case 6392:
      case 6393:
      case 6394:
      case 6396:
      case 6397:
      case 6398:
      case 6400:
      case 6401:
      case 6402:
      case 6404:
      case 6405:
      case 6406:
      case 6408:
      case 6409:
      case 6410:
      case 6412:
      case 6413:
      case 6414:
      case 6416:
      case 6417:
      case 6418:
      case 6420:
      case 6421:
      case 6422:
      case 6424:
      case 6425:
      case 6426:
      case 6428:
      case 6429:
      case 6430:
      case 6432:
      case 6433:
      case 6434:
      case 6436:
      case 6437:
      case 6438:
      case 6440:
      case 6441:
      case 6442:
      case 6444:
      case 6445:
      case 6446:
      case 6448:
      case 6449:
      case 6450:
      case 6452:
      case 6453:
      case 6454:
      case 6456:
      case 6457:
      case 6458:
      case 6460:
      case 6461:
      case 6462:
LABEL_15:
        uint64_t result = 8;
        break;
      case 6256:
      case 6257:
      case 6258:
      case 6259:
      case 6260:
      case 6261:
      case 6262:
      case 6263:
      case 6264:
      case 6265:
      case 6266:
      case 6267:
      case 6268:
      case 6269:
      case 6270:
      case 6271:
      case 6272:
      case 6273:
      case 6274:
      case 6275:
      case 6276:
      case 6277:
      case 6278:
      case 6279:
      case 6280:
      case 6281:
      case 6282:
      case 6283:
      case 6284:
      case 6285:
      case 6286:
      case 6287:
      case 6288:
      case 6289:
      case 6290:
      case 6291:
      case 6292:
      case 6293:
      case 6294:
      case 6295:
      case 6296:
      case 6297:
      case 6298:
      case 6299:
      case 6300:
      case 6301:
      case 6302:
      case 6303:
      case 6304:
      case 6305:
      case 6306:
      case 6307:
      case 6308:
      case 6309:
      case 6310:
      case 6311:
      case 6312:
      case 6313:
      case 6314:
      case 6315:
      case 6316:
      case 6317:
      case 6318:
      case 6319:
      case 6320:
      case 6321:
      case 6322:
      case 6323:
      case 6324:
      case 6325:
      case 6326:
      case 6327:
      case 6328:
      case 6329:
      case 6330:
      case 6331:
      case 6332:
      case 6333:
      case 6334:
      case 6335:
      case 6336:
      case 6463:
      case 6464:
      case 6465:
      case 6466:
      case 6467:
      case 6468:
      case 6469:
      case 6470:
      case 6471:
      case 6472:
      case 6473:
      case 6474:
      case 6475:
      case 6476:
      case 6477:
      case 6478:
      case 6479:
      case 6480:
      case 6481:
      case 6482:
      case 6483:
      case 6484:
      case 6485:
      case 6486:
      case 6487:
      case 6488:
      case 6489:
      case 6490:
      case 6491:
      case 6492:
      case 6493:
      case 6494:
      case 6495:
      case 6496:
      case 6497:
      case 6498:
      case 6499:
      case 6500:
      case 6501:
      case 6502:
      case 6503:
      case 6504:
      case 6605:
      case 6606:
      case 6607:
      case 6608:
      case 6609:
      case 6610:
      case 6611:
      case 6612:
      case 6613:
      case 6614:
      case 6615:
      case 6616:
      case 6617:
      case 6618:
      case 6619:
      case 6620:
      case 6621:
      case 6622:
      case 6623:
      case 6624:
      case 6625:
      case 6626:
      case 6627:
      case 6628:
      case 6629:
      case 6630:
      case 6631:
      case 6632:
      case 6633:
      case 6634:
      case 6635:
      case 6636:
      case 6637:
      case 6638:
      case 6639:
      case 6640:
      case 6641:
      case 6642:
      case 6643:
      case 6644:
      case 6645:
      case 6646:
      case 6647:
      case 6648:
      case 6649:
      case 6650:
      case 6651:
      case 6652:
      case 6653:
      case 6654:
      case 6655:
      case 6656:
      case 6657:
      case 6658:
      case 6659:
      case 6660:
      case 6661:
      case 6662:
      case 6663:
      case 6664:
      case 6665:
      case 6666:
      case 6667:
      case 6668:
      case 6669:
      case 6670:
      case 6671:
      case 6672:
      case 6673:
      case 6674:
      case 6675:
      case 6676:
      case 6677:
      case 6678:
      case 6679:
      case 6680:
      case 6681:
      case 6682:
      case 6683:
      case 6684:
      case 6685:
      case 6686:
      case 6687:
      case 6688:
      case 6689:
      case 6690:
      case 6691:
      case 6692:
      case 6693:
      case 6694:
      case 6695:
      case 6696:
      case 6697:
      case 6698:
      case 6699:
      case 6700:
      case 6701:
      case 6702:
      case 6703:
      case 6704:
      case 6705:
      case 6706:
      case 6716:
      case 6717:
      case 6718:
      case 6719:
      case 6720:
      case 6721:
      case 6722:
      case 6723:
      case 6724:
      case 6725:
      case 6726:
      case 6727:
      case 6728:
      case 6729:
      case 6730:
      case 6731:
      case 6732:
      case 6733:
      case 6734:
      case 6735:
      case 6736:
      case 6737:
      case 6738:
      case 6739:
      case 6740:
      case 6741:
      case 6742:
      case 6743:
      case 6744:
      case 6745:
      case 6746:
      case 6747:
      case 6748:
      case 6749:
      case 6750:
      case 6751:
      case 6752:
      case 6753:
      case 6754:
      case 6755:
      case 6756:
      case 6757:
      case 6758:
      case 6759:
      case 6760:
      case 6761:
      case 6762:
      case 6763:
      case 6764:
      case 6765:
      case 6766:
      case 6767:
      case 6768:
      case 6769:
      case 6770:
      case 6771:
      case 6772:
      case 6773:
      case 6774:
      case 6775:
      case 6776:
      case 6777:
      case 6778:
      case 6779:
      case 6780:
      case 6781:
      case 6782:
      case 6783:
      case 6784:
      case 6785:
      case 6786:
      case 6787:
      case 6788:
      case 6789:
      case 6790:
      case 6791:
      case 6792:
      case 6793:
      case 6794:
      case 6795:
      case 6796:
      case 6797:
      case 6798:
      case 6799:
      case 6800:
      case 6801:
      case 6802:
      case 6803:
      case 6804:
      case 6805:
      case 6806:
      case 6807:
      case 6808:
      case 6809:
      case 6810:
      case 6811:
      case 6812:
      case 6813:
      case 6814:
      case 6815:
      case 6816:
      case 6817:
      case 6818:
      case 6819:
      case 6820:
      case 6821:
      case 6822:
      case 6823:
      case 6824:
      case 6825:
      case 6826:
      case 6827:
      case 6828:
      case 6829:
      case 6830:
      case 6831:
      case 6832:
      case 6833:
      case 6846:
      case 6847:
      case 6848:
      case 6849:
      case 6850:
      case 6851:
      case 6852:
      case 6853:
      case 6854:
      case 6855:
      case 6856:
      case 6857:
      case 6858:
      case 6859:
      case 6860:
      case 6861:
      case 6862:
      case 6863:
      case 6864:
      case 6865:
      case 6866:
      case 6867:
      case 6868:
      case 6869:
      case 6870:
      case 6871:
      case 6872:
      case 6873:
      case 6874:
      case 6875:
      case 6876:
      case 6877:
      case 6878:
      case 6879:
      case 6880:
      case 6881:
      case 6882:
      case 6883:
      case 6884:
      case 6885:
      case 6886:
      case 6887:
      case 6888:
      case 6889:
      case 6890:
      case 6891:
      case 6892:
      case 6893:
      case 6894:
      case 6895:
      case 6896:
      case 6897:
      case 6898:
      case 6899:
      case 6900:
      case 6901:
      case 6902:
      case 6903:
      case 6904:
      case 6905:
      case 6906:
      case 6907:
      case 6908:
      case 6909:
      case 6910:
      case 6911:
      case 6912:
      case 6913:
      case 6914:
      case 6915:
      case 6916:
      case 6917:
      case 6918:
      case 6919:
      case 6920:
      case 6921:
      case 6922:
      case 6923:
      case 6924:
      case 6925:
      case 6927:
      case 6929:
      case 6931:
      case 6933:
      case 6935:
      case 6937:
      case 6939:
      case 6941:
      case 6943:
      case 6945:
      case 6947:
      case 6949:
      case 6951:
      case 6953:
      case 6955:
      case 6957:
      case 6959:
      case 6961:
      case 6963:
      case 6965:
      case 6967:
      case 6969:
      case 6971:
      case 6973:
      case 6974:
      case 6975:
      case 6976:
      case 6977:
      case 6978:
      case 6979:
      case 6980:
      case 6981:
      case 6982:
      case 6983:
      case 6984:
      case 6985:
      case 6986:
      case 6987:
      case 6988:
      case 6989:
      case 6990:
      case 6991:
      case 6992:
      case 6993:
      case 6994:
      case 6995:
      case 6996:
        return result;
      case 6337:
      case 6338:
      case 6339:
      case 6340:
      case 6341:
      case 6342:
      case 6343:
      case 6344:
      case 6345:
      case 6346:
      case 6347:
      case 6348:
      case 6349:
      case 6350:
      case 6351:
      case 6352:
      case 6353:
      case 6354:
      case 6505:
      case 6507:
      case 6509:
      case 6511:
      case 6513:
      case 6515:
      case 6517:
      case 6519:
      case 6521:
      case 6523:
      case 6525:
      case 6527:
      case 6529:
      case 6531:
      case 6533:
      case 6535:
      case 6537:
      case 6539:
      case 6541:
      case 6543:
      case 6545:
      case 6547:
      case 6549:
      case 6551:
      case 6553:
      case 6555:
      case 6557:
      case 6559:
      case 6561:
      case 6563:
      case 6565:
      case 6567:
      case 6569:
      case 6571:
      case 6573:
      case 6575:
      case 6577:
      case 6579:
      case 6581:
      case 6583:
      case 6585:
      case 6587:
      case 6589:
      case 6591:
      case 6593:
      case 6595:
      case 6597:
      case 6599:
      case 6601:
      case 6603:
      case 6926:
      case 6928:
      case 6930:
      case 6932:
      case 6934:
      case 6936:
      case 6938:
      case 6940:
      case 6942:
      case 6944:
      case 6946:
      case 6948:
      case 6950:
      case 6952:
      case 6954:
      case 6956:
      case 6958:
      case 6960:
      case 6962:
      case 6964:
      case 6966:
      case 6968:
      case 6970:
      case 6972:
LABEL_6:
        uint64_t result = 2;
        break;
      case 6506:
      case 6508:
      case 6510:
      case 6512:
      case 6514:
      case 6516:
      case 6518:
      case 6520:
      case 6522:
      case 6524:
      case 6526:
      case 6528:
      case 6530:
      case 6532:
      case 6534:
      case 6536:
      case 6538:
      case 6540:
      case 6542:
      case 6544:
      case 6546:
      case 6548:
      case 6550:
      case 6552:
      case 6554:
      case 6556:
      case 6558:
      case 6560:
      case 6562:
      case 6564:
      case 6566:
      case 6568:
      case 6570:
      case 6572:
      case 6574:
      case 6576:
      case 6578:
      case 6580:
      case 6582:
      case 6584:
      case 6586:
      case 6588:
      case 6590:
      case 6592:
      case 6594:
      case 6596:
      case 6598:
      case 6600:
      case 6602:
      case 6604:
        uint64_t result = 3;
        break;
      default:
        switch(a1)
        {
          case 8697:
          case 8698:
          case 8699:
          case 8700:
          case 8701:
          case 8702:
          case 8703:
          case 8704:
          case 8705:
          case 8706:
          case 8707:
          case 8708:
          case 8709:
          case 8710:
          case 8711:
          case 8712:
          case 8713:
          case 8714:
          case 8715:
          case 8716:
          case 8717:
          case 8718:
          case 8719:
          case 8720:
          case 8721:
          case 8722:
          case 8723:
          case 8724:
          case 8725:
          case 8726:
          case 8727:
          case 8728:
          case 8729:
          case 8730:
          case 8731:
          case 8732:
          case 8733:
          case 8734:
          case 8735:
          case 8736:
          case 8737:
          case 8738:
          case 8739:
          case 8740:
          case 8741:
          case 8742:
          case 8743:
          case 8744:
          case 8745:
          case 8746:
          case 8747:
          case 8748:
          case 8749:
          case 8750:
          case 8851:
          case 8852:
          case 8853:
          case 8854:
          case 8855:
          case 8856:
          case 8857:
          case 8858:
          case 8859:
          case 8860:
          case 8861:
          case 8862:
          case 8863:
          case 8864:
          case 8865:
          case 8866:
          case 8867:
          case 8868:
          case 8869:
          case 8870:
          case 8871:
          case 8872:
          case 8873:
          case 8874:
          case 8875:
          case 8876:
          case 8877:
          case 8878:
          case 8879:
          case 8880:
          case 8881:
          case 8882:
          case 8883:
          case 8884:
          case 8885:
          case 8886:
          case 8887:
          case 8888:
          case 8889:
          case 8890:
          case 8891:
          case 8892:
          case 8893:
          case 8894:
          case 8895:
          case 8896:
          case 8897:
          case 8898:
          case 8899:
          case 8900:
          case 8901:
          case 8902:
          case 8903:
          case 8904:
          case 8905:
          case 8906:
          case 8907:
          case 8908:
          case 8909:
          case 8910:
          case 8911:
          case 8912:
          case 8913:
          case 8914:
          case 8915:
          case 8916:
          case 8917:
          case 8918:
          case 8919:
          case 8920:
          case 8921:
          case 8922:
          case 8923:
          case 8924:
          case 8925:
          case 8926:
          case 8927:
          case 8928:
          case 8929:
          case 8930:
          case 8931:
          case 8932:
          case 8933:
          case 8934:
          case 8935:
          case 8936:
          case 8937:
          case 8938:
          case 8939:
          case 8940:
          case 8941:
          case 8942:
          case 8943:
          case 8944:
          case 8945:
          case 8946:
          case 8947:
          case 8948:
          case 8949:
          case 8950:
          case 8951:
          case 8952:
          case 8953:
          case 8954:
          case 8955:
          case 8956:
          case 8957:
          case 8958:
          case 8959:
          case 8960:
          case 8961:
          case 8962:
          case 8963:
          case 8964:
          case 8965:
          case 8966:
          case 8967:
          case 8968:
          case 8969:
          case 8970:
          case 8971:
          case 8972:
          case 8973:
          case 8974:
          case 8975:
          case 8976:
          case 8977:
          case 8978:
          case 8979:
          case 8980:
          case 8981:
          case 8982:
          case 8983:
          case 8984:
          case 8985:
          case 8986:
          case 8987:
          case 8988:
          case 8989:
          case 8990:
          case 8991:
          case 8992:
          case 8993:
          case 8994:
          case 8995:
          case 8996:
          case 8997:
          case 8998:
          case 8999:
          case 9000:
          case 9001:
          case 9002:
          case 9003:
          case 9004:
          case 9005:
          case 9006:
          case 9007:
          case 9008:
          case 9009:
          case 9010:
          case 9011:
          case 9012:
          case 9188:
          case 9189:
          case 9190:
          case 9191:
          case 9192:
          case 9193:
          case 9194:
          case 9195:
            return 4;
          case 8751:
          case 8753:
          case 8755:
          case 8757:
          case 8759:
          case 8761:
          case 8763:
          case 8765:
          case 8767:
          case 8769:
          case 8771:
          case 8773:
          case 8775:
          case 8777:
          case 8779:
          case 8781:
          case 8783:
          case 8785:
          case 8787:
          case 8789:
          case 8791:
          case 8793:
          case 8795:
          case 8797:
          case 8799:
          case 8801:
          case 8803:
          case 8805:
          case 8807:
          case 8809:
          case 8811:
          case 8813:
          case 8815:
          case 8817:
          case 8819:
          case 8821:
          case 8823:
          case 8825:
          case 8827:
          case 8829:
          case 8831:
          case 8833:
          case 8835:
          case 8837:
          case 8839:
          case 8841:
          case 8843:
          case 8845:
          case 8847:
          case 8849:
            uint64_t result = 5;
            break;
          case 8752:
          case 8754:
          case 8756:
          case 8758:
          case 8760:
          case 8762:
          case 8764:
          case 8766:
          case 8768:
          case 8770:
          case 8772:
          case 8774:
          case 8776:
          case 8778:
          case 8780:
          case 8782:
          case 8784:
          case 8786:
          case 8788:
          case 8790:
          case 8792:
          case 8794:
          case 8796:
          case 8798:
          case 8800:
          case 8802:
          case 8804:
          case 8806:
          case 8808:
          case 8810:
          case 8812:
          case 8814:
          case 8816:
          case 8818:
          case 8820:
          case 8822:
          case 8824:
          case 8826:
          case 8828:
          case 8830:
          case 8832:
          case 8834:
          case 8836:
          case 8838:
          case 8840:
          case 8842:
          case 8844:
          case 8846:
          case 8848:
          case 8850:
            uint64_t result = 6;
            break;
          case 9013:
          case 9014:
          case 9015:
          case 9016:
          case 9017:
          case 9018:
          case 9019:
          case 9020:
          case 9021:
          case 9022:
          case 9023:
          case 9024:
          case 9025:
          case 9026:
          case 9027:
          case 9028:
          case 9029:
          case 9030:
          case 9031:
          case 9032:
          case 9033:
          case 9034:
          case 9035:
          case 9036:
          case 9037:
          case 9038:
          case 9039:
          case 9040:
          case 9041:
          case 9042:
          case 9043:
          case 9044:
          case 9045:
          case 9046:
          case 9047:
          case 9048:
          case 9049:
          case 9050:
          case 9051:
          case 9052:
          case 9053:
          case 9054:
          case 9055:
          case 9056:
          case 9057:
          case 9058:
          case 9059:
          case 9060:
          case 9061:
          case 9062:
          case 9063:
          case 9064:
          case 9065:
          case 9066:
          case 9067:
          case 9068:
          case 9069:
          case 9070:
          case 9071:
          case 9072:
          case 9073:
          case 9074:
          case 9075:
          case 9076:
          case 9077:
          case 9078:
          case 9079:
          case 9080:
          case 9081:
          case 9082:
          case 9083:
          case 9084:
          case 9085:
          case 9086:
          case 9087:
          case 9088:
          case 9089:
          case 9090:
          case 9091:
          case 9092:
          case 9093:
          case 9094:
          case 9095:
          case 9096:
          case 9097:
          case 9098:
          case 9099:
          case 9100:
          case 9101:
          case 9102:
          case 9103:
          case 9104:
          case 9105:
          case 9106:
          case 9107:
          case 9108:
          case 9109:
          case 9110:
          case 9111:
          case 9112:
          case 9113:
          case 9114:
          case 9115:
          case 9116:
          case 9117:
          case 9118:
          case 9119:
          case 9120:
          case 9121:
          case 9122:
          case 9123:
          case 9124:
          case 9125:
          case 9126:
          case 9127:
          case 9128:
          case 9129:
          case 9130:
          case 9131:
          case 9132:
          case 9133:
          case 9134:
          case 9135:
          case 9136:
          case 9137:
          case 9138:
          case 9139:
          case 9140:
          case 9141:
          case 9142:
          case 9143:
          case 9144:
          case 9145:
          case 9146:
          case 9147:
          case 9148:
          case 9149:
          case 9150:
          case 9151:
          case 9152:
          case 9153:
          case 9154:
          case 9155:
          case 9156:
          case 9157:
          case 9158:
          case 9159:
          case 9160:
          case 9161:
          case 9162:
          case 9163:
          case 9164:
          case 9165:
          case 9166:
          case 9167:
          case 9168:
          case 9169:
          case 9170:
          case 9171:
          case 9172:
          case 9173:
          case 9174:
          case 9175:
          case 9176:
          case 9177:
          case 9178:
          case 9179:
          case 9180:
          case 9181:
          case 9182:
          case 9183:
          case 9184:
          case 9185:
          case 9186:
          case 9187:
            return result;
          case 9196:
          case 9197:
          case 9198:
          case 9199:
            goto LABEL_6;
          case 9200:
          case 9202:
            uint64_t result = 12;
            break;
          case 9201:
          case 9203:
LABEL_10:
            uint64_t result = 16;
            break;
          default:
            if ((a1 - 5552) < 0x10) {
              goto LABEL_15;
            }
            break;
        }
        break;
    }
  }
  else if ((a1 - 520) >> 1 > 0x8BE)
  {
    if ((a1 - 427) < 9) {
      return 4;
    }
  }
  else
  {
    switch(a1)
    {
      case 538:
      case 539:
      case 540:
      case 541:
      case 542:
      case 543:
      case 544:
      case 545:
      case 546:
      case 547:
      case 548:
      case 549:
      case 550:
      case 551:
      case 552:
      case 553:
      case 554:
      case 555:
      case 556:
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
      case 563:
      case 564:
      case 565:
      case 566:
      case 567:
      case 568:
      case 569:
      case 570:
      case 571:
      case 572:
      case 573:
      case 574:
      case 575:
      case 576:
      case 577:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
      case 586:
      case 587:
      case 588:
      case 589:
      case 590:
      case 591:
      case 592:
      case 593:
      case 594:
      case 595:
      case 596:
      case 597:
      case 598:
      case 599:
      case 600:
      case 601:
      case 602:
      case 603:
      case 604:
      case 605:
      case 606:
      case 607:
      case 608:
      case 609:
      case 610:
      case 611:
      case 612:
      case 613:
      case 614:
      case 615:
      case 616:
      case 617:
      case 618:
      case 619:
      case 620:
      case 621:
      case 622:
      case 623:
      case 705:
      case 706:
      case 707:
      case 708:
      case 709:
      case 710:
      case 711:
      case 712:
      case 713:
      case 714:
      case 715:
      case 716:
      case 717:
      case 718:
      case 719:
      case 720:
      case 721:
      case 722:
      case 723:
      case 724:
      case 725:
      case 726:
      case 727:
      case 728:
      case 729:
      case 730:
      case 731:
      case 732:
      case 733:
      case 734:
      case 735:
      case 736:
      case 737:
      case 738:
      case 739:
      case 740:
      case 741:
      case 742:
      case 743:
      case 744:
      case 745:
      case 746:
      case 747:
      case 748:
      case 749:
      case 750:
      case 751:
      case 752:
      case 753:
      case 754:
      case 755:
      case 756:
      case 757:
      case 758:
      case 759:
      case 760:
      case 793:
      case 794:
      case 795:
      case 796:
      case 797:
      case 798:
      case 799:
      case 800:
      case 801:
      case 802:
      case 803:
      case 804:
      case 805:
      case 806:
      case 807:
      case 808:
      case 809:
      case 810:
      case 811:
      case 812:
      case 813:
      case 814:
      case 815:
      case 816:
      case 817:
      case 818:
      case 819:
      case 820:
      case 821:
      case 822:
      case 823:
      case 824:
      case 825:
      case 826:
      case 827:
      case 828:
      case 829:
      case 830:
      case 831:
      case 832:
      case 833:
      case 834:
      case 835:
      case 836:
      case 837:
      case 838:
      case 839:
      case 840:
      case 841:
      case 842:
      case 843:
      case 844:
      case 845:
      case 846:
      case 847:
      case 848:
      case 849:
      case 850:
      case 851:
      case 852:
      case 853:
      case 854:
      case 855:
      case 856:
      case 857:
      case 858:
      case 859:
      case 860:
      case 861:
      case 862:
      case 863:
      case 864:
      case 865:
      case 866:
      case 867:
      case 868:
      case 869:
      case 870:
      case 871:
      case 872:
      case 873:
      case 874:
      case 875:
      case 876:
      case 877:
      case 878:
      case 879:
      case 880:
      case 881:
      case 882:
      case 883:
      case 884:
      case 885:
      case 886:
      case 887:
      case 888:
      case 889:
      case 890:
      case 891:
      case 892:
      case 893:
      case 894:
      case 895:
      case 896:
      case 897:
      case 898:
      case 899:
      case 900:
      case 901:
      case 902:
      case 903:
      case 904:
      case 905:
      case 906:
      case 907:
      case 908:
      case 909:
      case 910:
      case 911:
      case 912:
      case 913:
      case 914:
      case 915:
      case 916:
      case 917:
      case 918:
      case 919:
      case 920:
      case 921:
      case 922:
      case 923:
      case 924:
      case 925:
      case 926:
      case 927:
      case 928:
      case 929:
      case 930:
      case 931:
      case 932:
      case 933:
      case 934:
      case 935:
      case 936:
      case 937:
      case 938:
      case 939:
      case 940:
      case 941:
      case 942:
      case 943:
      case 944:
      case 945:
      case 946:
      case 947:
      case 948:
      case 949:
      case 950:
      case 951:
      case 952:
      case 953:
      case 954:
      case 955:
      case 956:
      case 957:
      case 958:
      case 959:
      case 960:
      case 961:
      case 962:
      case 963:
      case 964:
      case 965:
      case 966:
      case 967:
      case 968:
      case 969:
      case 970:
      case 971:
      case 972:
      case 973:
      case 974:
      case 975:
      case 976:
      case 977:
      case 978:
      case 979:
      case 980:
      case 981:
      case 982:
      case 983:
      case 984:
      case 985:
      case 986:
      case 987:
      case 988:
      case 989:
      case 990:
      case 991:
      case 992:
      case 993:
      case 994:
      case 995:
      case 996:
      case 997:
      case 998:
      case 999:
      case 1000:
      case 1001:
      case 1002:
      case 1003:
      case 1004:
      case 1005:
      case 1006:
      case 1007:
      case 1008:
      case 1009:
      case 1010:
      case 1011:
      case 1012:
      case 1013:
      case 1014:
      case 1015:
      case 1016:
      case 1017:
      case 1018:
      case 1019:
      case 1020:
      case 1021:
      case 1022:
      case 1023:
      case 1024:
      case 1025:
      case 1026:
      case 1027:
      case 1028:
      case 1029:
      case 1030:
      case 1031:
      case 1032:
      case 1033:
      case 1034:
      case 1035:
      case 1036:
      case 1037:
      case 1038:
      case 1039:
      case 1040:
      case 1041:
      case 1042:
      case 1043:
      case 1044:
      case 1045:
      case 1046:
      case 1047:
      case 1048:
      case 1049:
      case 1050:
      case 1051:
      case 1052:
      case 1053:
      case 1054:
      case 1055:
      case 1056:
      case 1057:
      case 1058:
      case 1059:
      case 1060:
      case 1061:
      case 1062:
      case 1063:
      case 1064:
      case 1065:
      case 1066:
      case 1067:
      case 1068:
      case 1069:
      case 1070:
      case 1071:
      case 1072:
      case 1073:
      case 1074:
      case 1075:
      case 1076:
      case 1077:
      case 1078:
      case 1079:
      case 1080:
      case 1081:
      case 1082:
      case 1083:
      case 1084:
      case 1085:
      case 1086:
      case 1087:
      case 1088:
      case 1089:
      case 1090:
      case 1091:
      case 1092:
      case 1093:
      case 1094:
      case 1095:
      case 1096:
      case 1129:
      case 1130:
      case 1131:
      case 1132:
      case 1133:
      case 1134:
      case 1135:
      case 1136:
      case 1137:
      case 1138:
      case 1139:
      case 1140:
      case 1141:
      case 1142:
      case 1143:
      case 1144:
      case 1145:
      case 1146:
      case 1147:
      case 1148:
      case 1149:
      case 1150:
      case 1151:
      case 1152:
      case 1153:
      case 1154:
      case 1155:
      case 1156:
      case 1157:
      case 1158:
      case 1159:
      case 1160:
      case 1161:
      case 1162:
      case 1163:
      case 1164:
      case 1165:
      case 1166:
      case 1167:
      case 1168:
      case 1169:
      case 1170:
      case 1171:
      case 1172:
      case 1173:
      case 1174:
      case 1175:
      case 1176:
      case 1177:
      case 1178:
      case 1179:
      case 1180:
      case 1181:
      case 1182:
      case 1183:
      case 1184:
      case 1185:
      case 1186:
      case 1187:
      case 1188:
      case 1189:
      case 1190:
      case 1191:
      case 1192:
      case 1193:
      case 1194:
      case 1195:
      case 1196:
      case 1197:
      case 1198:
      case 1199:
      case 1200:
      case 1201:
      case 1202:
      case 1203:
      case 1204:
      case 1205:
      case 1206:
      case 1207:
      case 1208:
      case 1209:
      case 1210:
      case 1211:
      case 1212:
      case 1213:
      case 1214:
      case 1215:
      case 1216:
      case 1217:
      case 1218:
      case 1219:
      case 1220:
      case 1221:
      case 1222:
      case 1223:
      case 1224:
      case 1225:
      case 1226:
      case 1227:
      case 1228:
      case 1229:
      case 1230:
      case 1231:
      case 1232:
      case 1233:
      case 1234:
      case 1235:
      case 1236:
      case 1237:
      case 1238:
      case 1239:
      case 1240:
      case 1241:
      case 1242:
      case 1243:
      case 1244:
      case 1245:
      case 1246:
      case 1247:
      case 1248:
      case 1249:
      case 1250:
      case 1251:
      case 1252:
      case 1253:
      case 1254:
      case 1255:
      case 1256:
      case 1257:
      case 1258:
      case 1259:
      case 1260:
      case 1261:
      case 1262:
      case 1263:
      case 1264:
      case 1265:
      case 1266:
      case 1267:
      case 1268:
      case 1269:
      case 1270:
      case 1271:
      case 1272:
      case 1273:
      case 1274:
      case 1275:
      case 1276:
      case 1277:
      case 1278:
      case 1279:
      case 1280:
      case 1281:
      case 1282:
      case 1283:
      case 1284:
      case 1285:
      case 1286:
      case 1287:
      case 1288:
      case 1289:
      case 1290:
      case 1291:
      case 1292:
      case 1293:
      case 1294:
      case 1295:
      case 1296:
      case 1297:
      case 1298:
      case 1299:
      case 1300:
      case 1301:
      case 1302:
      case 1303:
      case 1304:
      case 1305:
      case 1306:
      case 1307:
      case 1308:
      case 1309:
      case 1310:
      case 1311:
      case 1312:
      case 1313:
      case 1314:
      case 1315:
      case 1316:
      case 1317:
      case 1318:
      case 1319:
      case 1320:
      case 1321:
      case 1322:
      case 1323:
      case 1324:
      case 1325:
      case 1326:
      case 1327:
      case 1328:
      case 1329:
      case 1330:
      case 1331:
      case 1332:
      case 1333:
      case 1334:
      case 1335:
      case 1336:
      case 1337:
      case 1338:
      case 1339:
      case 1340:
      case 1341:
      case 1342:
      case 1343:
      case 1344:
      case 1345:
      case 1346:
      case 1347:
      case 1348:
      case 1349:
      case 1350:
      case 1351:
      case 1352:
      case 1353:
      case 1354:
      case 1355:
      case 1356:
      case 1357:
      case 1358:
      case 1359:
      case 1360:
      case 1361:
      case 1362:
      case 1363:
      case 1364:
      case 1365:
      case 1366:
      case 1367:
      case 1368:
      case 1369:
      case 1370:
      case 1371:
      case 1372:
      case 1373:
      case 1374:
      case 1375:
      case 1376:
      case 1377:
      case 1378:
      case 1379:
      case 1380:
      case 1381:
      case 1382:
      case 1383:
      case 1384:
      case 1385:
      case 1386:
      case 1387:
      case 1388:
      case 1389:
      case 1390:
      case 1391:
      case 1392:
      case 1393:
      case 1394:
      case 1395:
      case 1396:
      case 1397:
      case 1398:
      case 1399:
      case 1400:
      case 1401:
      case 1402:
      case 1403:
      case 1404:
      case 1405:
      case 1406:
      case 1407:
      case 1408:
      case 1409:
      case 1410:
      case 1411:
      case 1412:
      case 1413:
      case 1414:
      case 1415:
      case 1416:
      case 1417:
      case 1418:
      case 1419:
      case 1420:
      case 1421:
      case 1422:
      case 1423:
      case 1424:
      case 1425:
      case 1426:
      case 1427:
      case 1428:
      case 1429:
      case 1430:
      case 1431:
      case 1432:
      case 1433:
      case 1434:
      case 1435:
      case 1436:
      case 1437:
      case 1438:
      case 1439:
      case 1440:
      case 1441:
      case 1442:
      case 1443:
      case 1444:
      case 1445:
      case 1446:
      case 1447:
      case 1448:
      case 1449:
      case 1450:
      case 1451:
      case 1452:
      case 1453:
      case 1454:
      case 1455:
      case 1456:
      case 1457:
      case 1458:
      case 1459:
      case 1460:
      case 1461:
      case 1462:
      case 1463:
      case 1464:
      case 1465:
      case 1466:
      case 1467:
      case 1468:
      case 1469:
      case 1470:
      case 1471:
      case 1472:
      case 1473:
      case 1474:
      case 1475:
      case 1476:
      case 1477:
      case 1478:
      case 1479:
      case 1480:
      case 1481:
      case 1482:
      case 1483:
      case 1484:
      case 1485:
      case 1486:
      case 1487:
      case 1488:
      case 1489:
      case 1490:
      case 1491:
      case 1492:
      case 1493:
      case 1494:
      case 1495:
      case 1496:
      case 1497:
      case 1498:
      case 1499:
      case 1500:
      case 1501:
      case 1502:
      case 1503:
      case 1504:
      case 1505:
      case 1506:
      case 1507:
      case 1508:
      case 1509:
      case 1510:
      case 1511:
      case 1512:
      case 1513:
      case 1514:
      case 1515:
      case 1516:
      case 1517:
      case 1518:
      case 1519:
      case 1520:
      case 1521:
      case 1522:
      case 1523:
      case 1524:
      case 1525:
      case 1526:
      case 1527:
      case 1528:
      case 1529:
      case 1530:
      case 1531:
      case 1532:
      case 1533:
      case 1534:
      case 1535:
      case 1536:
      case 1537:
      case 1538:
      case 1539:
      case 1540:
      case 1541:
      case 1542:
      case 1543:
      case 1544:
      case 1545:
      case 1546:
      case 1547:
      case 1548:
      case 1549:
      case 1550:
      case 1551:
      case 1552:
      case 1553:
      case 1554:
      case 1555:
      case 1556:
      case 1557:
      case 1558:
      case 1559:
      case 1560:
      case 1561:
      case 1562:
      case 1563:
      case 1564:
      case 1565:
      case 1566:
      case 1567:
      case 1568:
      case 1569:
      case 1570:
      case 1571:
      case 1572:
      case 1573:
      case 1574:
      case 1575:
      case 1576:
      case 1577:
      case 1578:
      case 1579:
      case 1580:
      case 1581:
      case 1582:
      case 1583:
      case 1584:
      case 1585:
      case 1586:
      case 1587:
      case 1588:
      case 1589:
      case 1590:
      case 1591:
      case 1592:
      case 1593:
      case 1594:
      case 1595:
      case 1596:
      case 1597:
      case 1598:
      case 1599:
      case 1600:
      case 1601:
      case 1602:
      case 1603:
      case 1604:
      case 1605:
      case 1606:
      case 1607:
      case 1608:
      case 1609:
      case 1610:
      case 1611:
      case 1612:
      case 1613:
      case 1614:
      case 1615:
      case 1616:
      case 1617:
      case 1618:
      case 1619:
      case 1620:
      case 1621:
      case 1622:
      case 1623:
      case 1624:
      case 1625:
      case 1626:
      case 1627:
      case 1628:
      case 1629:
      case 1630:
      case 1631:
      case 1632:
      case 1633:
      case 1634:
      case 1635:
      case 1636:
      case 1637:
      case 1638:
      case 1639:
      case 1640:
      case 1641:
      case 1642:
      case 1643:
      case 1644:
      case 1645:
      case 1646:
      case 1647:
      case 1648:
      case 1649:
      case 1650:
      case 1651:
      case 1652:
      case 1653:
      case 1654:
      case 1655:
      case 1656:
      case 1657:
      case 1658:
      case 1659:
      case 1660:
      case 1661:
      case 1662:
      case 1663:
      case 1664:
      case 1665:
      case 1666:
      case 1667:
      case 1668:
      case 1669:
      case 1670:
      case 1671:
      case 1672:
      case 1673:
      case 1674:
      case 1675:
      case 1676:
      case 1677:
      case 1678:
      case 1679:
      case 1680:
      case 1681:
      case 1682:
      case 1683:
      case 1684:
      case 1685:
      case 1686:
      case 1687:
      case 1688:
      case 1689:
      case 1690:
      case 1691:
      case 1692:
      case 1693:
      case 1694:
      case 1695:
      case 1696:
      case 1697:
      case 1698:
      case 1699:
      case 1700:
      case 1701:
      case 1702:
      case 1703:
      case 1704:
      case 1705:
      case 1706:
      case 1707:
      case 1708:
      case 1709:
      case 1710:
      case 1711:
      case 1712:
      case 1713:
      case 1714:
      case 1715:
      case 1716:
      case 1717:
      case 1718:
      case 1719:
      case 1720:
      case 1721:
      case 1722:
      case 1723:
      case 1724:
      case 1725:
      case 1726:
      case 1727:
      case 1728:
      case 1729:
      case 1730:
      case 1731:
      case 1732:
      case 1733:
      case 1734:
      case 1735:
      case 1736:
      case 1737:
      case 1738:
      case 1739:
      case 1740:
      case 1741:
      case 1742:
      case 1743:
      case 1744:
      case 1745:
      case 1746:
      case 1747:
      case 1748:
      case 1749:
      case 1750:
      case 1751:
      case 1752:
      case 1753:
      case 1754:
      case 1755:
      case 1756:
      case 1757:
      case 1758:
      case 1759:
      case 1760:
      case 1761:
      case 1762:
      case 1763:
      case 1764:
      case 1765:
      case 1766:
      case 1767:
      case 1768:
      case 1769:
      case 1770:
      case 1771:
      case 1772:
      case 1773:
      case 1774:
      case 1775:
      case 1776:
      case 1777:
      case 1778:
      case 1779:
      case 1780:
      case 1781:
      case 1782:
      case 1783:
      case 1784:
      case 1785:
      case 1786:
      case 1787:
      case 1788:
      case 1789:
      case 1790:
      case 1791:
      case 1792:
      case 1793:
      case 1794:
      case 1795:
      case 1796:
      case 1797:
      case 1798:
      case 1799:
      case 1800:
      case 1801:
      case 1802:
      case 1803:
      case 1804:
      case 1805:
      case 1806:
      case 1807:
      case 1808:
      case 1809:
      case 1810:
      case 1811:
      case 1812:
      case 1813:
      case 1814:
      case 1815:
      case 1816:
      case 1817:
      case 1818:
      case 1819:
      case 1820:
      case 1821:
      case 1822:
      case 1823:
      case 1824:
      case 1825:
      case 1826:
      case 1827:
      case 1828:
      case 1829:
      case 1830:
      case 1831:
      case 1832:
      case 1833:
      case 1834:
      case 1835:
      case 1836:
      case 1837:
      case 1838:
      case 1839:
      case 1840:
      case 1841:
      case 1842:
      case 1843:
      case 1844:
      case 1845:
      case 1846:
      case 1847:
      case 1848:
      case 1849:
      case 1850:
      case 1851:
      case 1852:
      case 1853:
      case 1854:
      case 1855:
      case 1856:
      case 1857:
      case 1858:
      case 1859:
      case 1860:
      case 1861:
      case 1862:
      case 1863:
      case 1864:
      case 1865:
      case 1866:
      case 1867:
      case 1868:
      case 1869:
      case 1870:
      case 1871:
      case 1872:
      case 1873:
      case 1874:
      case 1875:
      case 1876:
      case 1877:
      case 1878:
      case 1879:
      case 1880:
      case 1881:
      case 1882:
      case 1883:
      case 1884:
      case 1885:
      case 1886:
      case 1887:
      case 1888:
      case 1889:
      case 1890:
      case 1891:
      case 1892:
      case 1893:
      case 1894:
      case 1895:
      case 1896:
      case 1897:
      case 1898:
      case 1899:
      case 1900:
      case 1901:
      case 1902:
      case 1903:
      case 1904:
      case 1905:
      case 1906:
      case 1907:
      case 1908:
      case 1909:
      case 1910:
      case 1911:
      case 1912:
      case 1913:
      case 1914:
      case 1915:
      case 1916:
      case 1917:
      case 1918:
      case 1919:
      case 1920:
      case 1921:
      case 1922:
      case 1923:
      case 1924:
      case 1925:
      case 1926:
      case 1927:
      case 1928:
      case 1929:
      case 1930:
      case 1931:
      case 1932:
      case 1933:
      case 1934:
      case 1935:
      case 1936:
      case 1937:
      case 1938:
      case 1939:
      case 1940:
      case 1941:
      case 1942:
      case 1943:
      case 1944:
      case 1945:
      case 1946:
      case 1947:
      case 1948:
      case 1949:
      case 1950:
      case 1951:
      case 1952:
      case 1953:
      case 1954:
      case 1955:
      case 1956:
      case 1957:
      case 1958:
      case 1959:
      case 1960:
      case 1961:
      case 1962:
      case 1963:
      case 1964:
      case 1965:
      case 1966:
      case 1967:
      case 1968:
      case 1969:
      case 1970:
      case 1971:
      case 1972:
      case 1973:
      case 1974:
      case 1975:
      case 1976:
      case 1977:
      case 1978:
      case 1979:
      case 1980:
      case 1981:
      case 1982:
      case 1983:
      case 1984:
      case 1985:
      case 1986:
      case 1987:
      case 1988:
      case 1989:
      case 1990:
      case 1991:
      case 1992:
      case 1993:
      case 1994:
      case 1995:
      case 1996:
      case 1997:
      case 1998:
      case 1999:
      case 2000:
      case 2001:
      case 2002:
      case 2003:
      case 2004:
      case 2005:
      case 2006:
      case 2007:
      case 2008:
      case 2009:
      case 2010:
      case 2011:
      case 2012:
      case 2013:
      case 2014:
      case 2015:
      case 2016:
      case 2017:
      case 2018:
      case 2019:
      case 2020:
      case 2021:
      case 2022:
      case 2023:
      case 2024:
      case 2025:
      case 2026:
      case 2027:
      case 2028:
      case 2029:
      case 2030:
      case 2031:
      case 2032:
      case 2033:
      case 2034:
      case 2035:
      case 2036:
      case 2037:
      case 2038:
      case 2039:
      case 2040:
      case 2041:
      case 2042:
      case 2043:
      case 2044:
      case 2045:
      case 2046:
      case 2047:
      case 2048:
      case 2049:
      case 2050:
      case 2051:
      case 2052:
      case 2053:
      case 2054:
      case 2055:
      case 2056:
      case 2057:
      case 2058:
      case 2059:
      case 2060:
      case 2061:
      case 2062:
      case 2063:
      case 2064:
      case 2065:
      case 2066:
      case 2067:
      case 2068:
      case 2069:
      case 2070:
      case 2071:
      case 2072:
      case 2073:
      case 2074:
      case 2075:
      case 2076:
      case 2077:
      case 2078:
      case 2079:
      case 2080:
      case 2081:
      case 2082:
      case 2083:
      case 2084:
      case 2085:
      case 2086:
      case 2087:
      case 2088:
      case 2089:
      case 2090:
      case 2091:
      case 2092:
      case 2093:
      case 2094:
      case 2095:
      case 2096:
      case 2097:
      case 2098:
      case 2099:
      case 2100:
      case 2101:
      case 2102:
      case 2103:
      case 2104:
      case 2105:
      case 2106:
      case 2107:
      case 2108:
      case 2109:
      case 2110:
      case 2111:
      case 2112:
      case 2113:
      case 2114:
      case 2115:
      case 2116:
      case 2117:
      case 2118:
      case 2119:
      case 2120:
      case 2121:
      case 2122:
      case 2123:
      case 2124:
      case 2125:
      case 2126:
      case 2127:
      case 2128:
      case 2129:
      case 2130:
      case 2131:
      case 2132:
      case 2133:
      case 2134:
      case 2135:
      case 2136:
      case 2137:
      case 2138:
      case 2139:
      case 2140:
      case 2141:
      case 2142:
      case 2143:
      case 2144:
      case 2145:
      case 2146:
      case 2147:
      case 2148:
      case 2149:
      case 2150:
      case 2151:
      case 2152:
      case 2153:
      case 2154:
      case 2155:
      case 2156:
      case 2157:
      case 2158:
      case 2159:
      case 2160:
      case 2161:
      case 2162:
      case 2163:
      case 2164:
      case 2165:
      case 2166:
      case 2167:
      case 2168:
      case 2169:
      case 2170:
      case 2171:
      case 2172:
      case 2173:
      case 2174:
      case 2175:
      case 2176:
      case 2177:
      case 2178:
      case 2179:
      case 2180:
      case 2181:
      case 2182:
      case 2183:
      case 2184:
      case 2185:
      case 2186:
      case 2187:
      case 2188:
      case 2189:
      case 2190:
      case 2191:
      case 2192:
      case 2193:
      case 2194:
      case 2195:
      case 2196:
      case 2197:
      case 2198:
      case 2199:
      case 2200:
      case 2201:
      case 2202:
      case 2203:
      case 2204:
      case 2205:
      case 2206:
      case 2207:
      case 2208:
      case 2209:
      case 2210:
      case 2211:
      case 2212:
      case 2213:
      case 2214:
      case 2215:
      case 2216:
      case 2217:
      case 2218:
      case 2219:
      case 2220:
      case 2221:
      case 2222:
      case 2223:
      case 2224:
      case 2225:
      case 2226:
      case 2227:
      case 2228:
      case 2229:
      case 2230:
      case 2231:
      case 2232:
      case 2233:
      case 2234:
      case 2235:
      case 2236:
      case 2237:
      case 2238:
      case 2239:
      case 2240:
      case 2241:
      case 2242:
      case 2243:
      case 2244:
      case 2245:
      case 2246:
      case 2247:
      case 2248:
      case 2249:
      case 2250:
      case 2251:
      case 2796:
      case 2797:
      case 2798:
      case 2799:
      case 2800:
      case 2801:
      case 2802:
      case 2803:
      case 2804:
      case 2805:
      case 2806:
      case 2807:
      case 2808:
      case 2809:
      case 2810:
      case 2811:
      case 2812:
      case 2813:
      case 2814:
      case 2815:
      case 2816:
      case 2817:
      case 2818:
      case 2819:
      case 2820:
      case 2821:
      case 2822:
      case 2823:
      case 2824:
      case 2825:
      case 2826:
      case 2827:
      case 2828:
      case 2829:
      case 2830:
      case 2831:
      case 2832:
      case 2833:
      case 2834:
      case 2835:
      case 2836:
      case 2837:
      case 2838:
      case 2839:
      case 2840:
      case 2841:
      case 2842:
      case 2843:
      case 2844:
      case 2845:
      case 2846:
      case 2847:
      case 2848:
      case 2849:
      case 2850:
      case 2851:
      case 2852:
      case 2853:
      case 2854:
      case 2855:
      case 2856:
      case 2857:
      case 2858:
      case 2859:
      case 2860:
      case 2861:
      case 2862:
      case 2863:
      case 2864:
      case 2865:
      case 2866:
      case 2867:
      case 2868:
      case 2869:
      case 2870:
      case 2871:
      case 2872:
      case 2873:
      case 2874:
      case 2875:
      case 2876:
      case 2877:
      case 2878:
      case 2879:
      case 2880:
      case 2881:
      case 2882:
      case 2883:
      case 2884:
      case 2885:
      case 2886:
      case 2887:
      case 2888:
      case 2889:
      case 2890:
      case 2891:
      case 2892:
      case 2893:
      case 2894:
      case 2895:
      case 2896:
      case 2897:
      case 2898:
      case 2899:
      case 2900:
      case 2901:
      case 2902:
      case 2903:
      case 2904:
      case 2905:
      case 2906:
      case 2907:
      case 2908:
      case 2909:
      case 2910:
      case 2911:
      case 2912:
      case 2913:
      case 2914:
      case 2915:
      case 2916:
      case 2917:
      case 2918:
      case 2919:
      case 2920:
      case 2921:
      case 2922:
      case 2923:
      case 2924:
      case 2925:
      case 2926:
      case 2927:
      case 2928:
      case 2929:
      case 2930:
      case 2931:
      case 2932:
      case 2933:
      case 2934:
      case 2935:
      case 2936:
      case 2937:
      case 2938:
      case 2939:
      case 2940:
      case 2941:
      case 2942:
      case 2943:
      case 2944:
      case 2945:
      case 2946:
      case 2947:
      case 2948:
      case 2949:
      case 2950:
      case 2951:
      case 2952:
      case 2953:
      case 2954:
      case 2955:
      case 2956:
      case 2957:
      case 2958:
      case 2959:
      case 2960:
      case 2961:
      case 2962:
      case 2963:
      case 2964:
      case 2965:
      case 2966:
      case 2967:
      case 2968:
      case 2969:
      case 2970:
      case 2971:
      case 2972:
      case 2973:
      case 2974:
      case 2975:
      case 2976:
      case 2977:
      case 2978:
      case 2979:
      case 2980:
      case 2981:
      case 2982:
      case 2983:
      case 2984:
      case 2985:
      case 2986:
      case 2987:
      case 2988:
      case 2989:
      case 2990:
      case 2991:
      case 2992:
      case 2993:
      case 2994:
      case 2995:
      case 2996:
      case 2997:
      case 2998:
      case 2999:
      case 3000:
      case 3001:
      case 3002:
      case 3003:
      case 3004:
      case 3005:
      case 3006:
      case 3007:
      case 3008:
      case 3009:
      case 3010:
      case 3011:
      case 3012:
      case 3013:
      case 3014:
      case 3015:
      case 3016:
      case 3017:
      case 3018:
      case 3019:
      case 3020:
      case 3021:
      case 3022:
      case 3023:
      case 3024:
      case 3025:
      case 3026:
      case 3027:
      case 3028:
      case 3029:
      case 3030:
      case 3031:
      case 3032:
      case 3033:
      case 3034:
      case 3035:
      case 3036:
      case 3037:
      case 3038:
      case 3039:
      case 3040:
      case 3041:
      case 3042:
      case 3043:
      case 3044:
      case 3045:
      case 3046:
      case 3047:
      case 3048:
      case 3049:
      case 3050:
      case 3051:
      case 3596:
      case 3597:
      case 3598:
      case 3599:
      case 3600:
      case 3601:
      case 3602:
      case 3603:
      case 3604:
      case 3605:
      case 3606:
      case 3607:
      case 3608:
      case 3609:
      case 3610:
      case 3611:
      case 3612:
      case 3613:
      case 3614:
      case 3615:
      case 3616:
      case 3617:
      case 3618:
      case 3619:
      case 3620:
      case 3621:
      case 3622:
      case 3623:
      case 3624:
      case 3625:
      case 3626:
      case 3627:
      case 3628:
      case 3629:
      case 3630:
      case 3631:
      case 3632:
      case 3633:
      case 3634:
      case 3635:
      case 3636:
      case 3637:
      case 3638:
      case 3639:
      case 3640:
      case 3641:
      case 3642:
      case 3643:
      case 3644:
      case 3645:
      case 3646:
      case 3647:
      case 3648:
      case 3649:
      case 3650:
      case 3651:
      case 3652:
      case 3653:
      case 3654:
      case 3655:
      case 3656:
      case 3657:
      case 3658:
      case 3659:
      case 3660:
      case 3661:
      case 3662:
      case 3663:
      case 3664:
      case 3665:
      case 3666:
      case 3667:
      case 3738:
      case 3742:
      case 3746:
      case 3759:
      case 3760:
      case 3761:
      case 3762:
      case 3763:
      case 3764:
      case 3765:
      case 3766:
      case 3767:
      case 3768:
      case 3769:
      case 3770:
      case 3771:
      case 3772:
      case 3773:
      case 3774:
      case 3775:
      case 3776:
      case 3777:
      case 3778:
      case 3779:
      case 3780:
      case 3781:
      case 3782:
      case 3783:
      case 3784:
      case 3785:
      case 3786:
      case 3787:
      case 3788:
      case 3789:
      case 3790:
      case 3791:
      case 3792:
      case 3793:
      case 3794:
      case 3795:
      case 3796:
      case 3797:
      case 3798:
      case 3799:
      case 3800:
      case 3801:
      case 3802:
      case 3803:
      case 3804:
      case 3805:
      case 3806:
      case 3807:
      case 3808:
      case 3809:
      case 3810:
      case 3811:
      case 3812:
      case 3813:
      case 3814:
      case 3815:
      case 3816:
      case 3817:
      case 3818:
      case 3819:
      case 3820:
      case 3821:
      case 3822:
      case 3823:
      case 3824:
      case 3825:
      case 3826:
      case 3827:
      case 3828:
      case 3829:
      case 3830:
      case 3831:
      case 3832:
      case 3833:
      case 3834:
      case 3835:
      case 3836:
      case 3837:
      case 3838:
      case 3839:
      case 3840:
      case 3841:
      case 3842:
      case 3843:
      case 3844:
      case 3845:
      case 3846:
      case 3847:
      case 3848:
      case 3849:
      case 3850:
      case 3851:
      case 3852:
      case 3853:
      case 3854:
      case 3855:
      case 3856:
      case 3857:
      case 3858:
      case 3859:
      case 3860:
      case 3861:
      case 3862:
      case 3863:
      case 3864:
      case 3865:
      case 3866:
      case 3867:
      case 3868:
      case 3869:
      case 3870:
      case 3871:
      case 3872:
      case 3873:
      case 3874:
      case 3875:
      case 3876:
      case 3877:
      case 3878:
      case 3879:
      case 3880:
      case 3881:
      case 3882:
      case 3883:
      case 3884:
      case 3885:
      case 3886:
      case 3887:
      case 3888:
      case 3889:
      case 3890:
      case 3891:
      case 3892:
      case 3893:
      case 3894:
      case 3895:
      case 3896:
      case 3897:
      case 3898:
      case 3899:
      case 3900:
      case 3901:
      case 3902:
      case 3903:
      case 3904:
      case 3905:
      case 3906:
      case 3907:
      case 3908:
      case 3909:
      case 3910:
      case 3911:
      case 3912:
      case 3913:
      case 3914:
      case 3915:
      case 3916:
      case 3917:
      case 3918:
      case 3919:
      case 3920:
      case 3921:
      case 3922:
      case 3923:
      case 3924:
      case 3925:
      case 3926:
      case 3927:
      case 3928:
      case 3929:
      case 3930:
      case 3931:
      case 3932:
      case 3933:
      case 3934:
      case 3935:
      case 3936:
      case 3937:
      case 3938:
      case 3939:
      case 3940:
      case 3941:
      case 3942:
      case 3943:
      case 3944:
      case 3945:
      case 3946:
      case 3947:
      case 3948:
      case 3949:
      case 3950:
      case 3951:
      case 3952:
      case 3953:
      case 3954:
      case 3955:
      case 3956:
      case 3957:
      case 3958:
      case 3959:
      case 3960:
      case 3961:
      case 3962:
      case 3963:
      case 3964:
      case 3965:
      case 3966:
      case 3967:
      case 3968:
      case 3969:
      case 3970:
      case 3971:
      case 3972:
      case 3973:
      case 3974:
      case 3975:
      case 3976:
      case 3977:
      case 3978:
      case 3979:
      case 3980:
      case 3981:
      case 3982:
      case 3983:
      case 3984:
      case 3985:
      case 3986:
      case 3987:
      case 3988:
      case 3989:
      case 3990:
      case 3991:
      case 3992:
      case 3993:
      case 3994:
      case 3995:
      case 3996:
      case 3997:
      case 3998:
      case 3999:
      case 4000:
      case 4001:
      case 4002:
      case 4003:
      case 4004:
      case 4005:
      case 4006:
      case 4007:
      case 4008:
      case 4009:
      case 4010:
      case 4011:
      case 4012:
      case 4013:
      case 4014:
      case 4015:
      case 4016:
      case 4017:
      case 4018:
      case 4019:
      case 4020:
      case 4021:
      case 4022:
      case 4023:
      case 4024:
      case 4025:
      case 4026:
      case 4027:
      case 4028:
      case 4029:
      case 4030:
      case 4031:
      case 4032:
      case 4033:
      case 4034:
      case 4035:
      case 4036:
      case 4037:
      case 4038:
      case 4039:
      case 4040:
      case 4041:
      case 4042:
      case 4043:
      case 4044:
      case 4045:
      case 4046:
      case 4047:
      case 4048:
      case 4049:
      case 4050:
      case 4051:
      case 4052:
      case 4053:
      case 4054:
      case 4055:
      case 4056:
      case 4057:
      case 4058:
      case 4059:
      case 4060:
      case 4061:
      case 4062:
      case 4063:
      case 4064:
      case 4065:
      case 4066:
      case 4067:
      case 4068:
      case 4069:
      case 4070:
      case 4071:
      case 4072:
      case 4073:
      case 4074:
      case 4075:
      case 4076:
      case 4077:
      case 4078:
      case 4079:
      case 4080:
      case 4081:
      case 4082:
      case 4083:
      case 4084:
      case 4085:
      case 4086:
      case 4087:
      case 4088:
      case 4089:
      case 4090:
      case 4091:
      case 4092:
      case 4093:
      case 4094:
      case 4095:
      case 4096:
      case 4097:
      case 4098:
      case 4099:
      case 4100:
      case 4101:
      case 4102:
      case 4103:
      case 4104:
      case 4105:
      case 4106:
      case 4107:
      case 4108:
      case 4109:
      case 4110:
      case 4111:
      case 4112:
      case 4113:
      case 4114:
      case 4115:
      case 4116:
      case 4117:
      case 4118:
      case 4119:
      case 4120:
      case 4121:
      case 4122:
      case 4123:
      case 4124:
      case 4125:
      case 4126:
      case 4127:
      case 4128:
      case 4129:
      case 4130:
      case 4131:
      case 4132:
      case 4133:
      case 4134:
      case 4135:
      case 4136:
      case 4137:
      case 4138:
      case 4139:
      case 4140:
      case 4141:
      case 4142:
      case 4143:
      case 4144:
      case 4145:
      case 4146:
      case 4147:
      case 4148:
      case 4149:
      case 4150:
      case 4151:
      case 4152:
      case 4153:
      case 4154:
      case 4155:
      case 4156:
      case 4157:
      case 4158:
      case 4159:
      case 4160:
      case 4161:
      case 4162:
      case 4163:
      case 4164:
      case 4165:
      case 4166:
      case 4167:
      case 4168:
      case 4169:
      case 4170:
      case 4171:
      case 4172:
      case 4173:
      case 4174:
      case 4175:
      case 4176:
      case 4177:
      case 4178:
      case 4179:
      case 4180:
      case 4181:
      case 4182:
      case 4183:
      case 4184:
      case 4185:
      case 4186:
      case 4187:
      case 4188:
      case 4189:
      case 4190:
      case 4191:
      case 4192:
      case 4193:
      case 4194:
      case 4195:
      case 4196:
      case 4197:
      case 4198:
      case 4199:
      case 4200:
      case 4201:
      case 4202:
      case 4203:
      case 4204:
      case 4205:
      case 4206:
      case 4207:
      case 4208:
      case 4209:
      case 4210:
      case 4211:
      case 4212:
      case 4213:
      case 4214:
      case 4215:
      case 4216:
      case 4217:
      case 4218:
      case 4219:
      case 4220:
      case 4221:
      case 4222:
      case 4223:
      case 4224:
      case 4225:
      case 4226:
      case 4227:
      case 4228:
      case 4229:
      case 4230:
      case 4231:
      case 4232:
      case 4233:
      case 4234:
      case 4235:
      case 4236:
      case 4237:
      case 4238:
      case 4239:
      case 4240:
      case 4241:
      case 4242:
      case 4243:
      case 4244:
      case 4245:
      case 4246:
      case 4247:
      case 4248:
      case 4249:
      case 4250:
      case 4251:
      case 4252:
      case 4253:
      case 4254:
      case 4255:
      case 4256:
      case 4257:
      case 4258:
      case 4259:
      case 4260:
      case 4261:
      case 4262:
      case 4263:
      case 4264:
      case 4265:
      case 4266:
      case 4267:
      case 4268:
      case 4269:
      case 4270:
      case 4271:
      case 4272:
      case 4273:
      case 4274:
      case 4275:
      case 4276:
      case 4277:
      case 4278:
      case 4279:
      case 4280:
      case 4281:
      case 4282:
      case 4283:
      case 4284:
      case 4285:
      case 4286:
      case 4287:
      case 4288:
      case 4289:
      case 4290:
      case 4291:
      case 4292:
      case 4293:
      case 4294:
      case 4295:
      case 4296:
      case 4297:
      case 4298:
      case 4299:
      case 4300:
      case 4301:
      case 4302:
      case 4303:
      case 4304:
      case 4305:
      case 4306:
      case 4307:
      case 4308:
      case 4309:
      case 4310:
      case 4311:
      case 4312:
      case 4313:
      case 4314:
      case 4315:
      case 4316:
      case 4317:
      case 4318:
      case 4319:
      case 4320:
      case 4321:
      case 4322:
      case 4323:
      case 4324:
      case 4325:
      case 4326:
      case 4327:
      case 4328:
      case 4329:
      case 4339:
      case 4340:
      case 4341:
      case 4342:
      case 4343:
      case 4344:
      case 4345:
      case 4346:
      case 4347:
      case 4348:
      case 4349:
      case 4350:
      case 4351:
      case 4352:
      case 4353:
      case 4354:
      case 4355:
      case 4356:
      case 4357:
      case 4358:
      case 4359:
      case 4360:
      case 4361:
      case 4362:
      case 4363:
      case 4364:
      case 4365:
      case 4366:
      case 4367:
      case 4368:
      case 4369:
      case 4370:
      case 4371:
      case 4372:
      case 4373:
      case 4374:
      case 4375:
      case 4376:
      case 4377:
      case 4378:
      case 4379:
      case 4380:
      case 4381:
      case 4382:
      case 4383:
      case 4384:
      case 4385:
      case 4386:
      case 4387:
      case 4404:
      case 4405:
      case 4406:
      case 4407:
      case 4408:
      case 4409:
      case 4410:
      case 4411:
      case 4412:
      case 4413:
      case 4414:
      case 4415:
      case 4416:
      case 4417:
      case 4418:
      case 4419:
      case 4420:
      case 4421:
      case 4422:
      case 4423:
      case 4424:
      case 4425:
      case 4426:
      case 4427:
      case 4428:
      case 4429:
      case 4430:
      case 4431:
      case 4432:
      case 4433:
      case 4434:
      case 4435:
      case 4436:
      case 4437:
      case 4438:
      case 4439:
      case 4440:
      case 4441:
      case 4442:
      case 4443:
      case 4444:
      case 4445:
      case 4446:
      case 4447:
      case 4448:
      case 4449:
      case 4450:
      case 4451:
      case 4452:
      case 4453:
      case 4454:
      case 4455:
      case 4456:
      case 4457:
      case 4458:
      case 4459:
      case 4460:
      case 4461:
      case 4462:
      case 4463:
      case 4464:
      case 4465:
      case 4466:
      case 4467:
      case 4468:
      case 4469:
      case 4470:
      case 4471:
      case 4472:
      case 4473:
      case 4474:
      case 4475:
      case 4476:
      case 4477:
      case 4478:
      case 4479:
      case 4480:
      case 4481:
      case 4482:
      case 4483:
      case 4484:
      case 4485:
      case 4486:
      case 4487:
      case 4488:
      case 4489:
      case 4490:
      case 4491:
      case 4492:
      case 4493:
      case 4494:
      case 4495:
      case 4496:
      case 4497:
      case 4498:
      case 4499:
      case 4500:
      case 4501:
      case 4502:
      case 4503:
      case 4504:
      case 4505:
      case 4506:
      case 4507:
      case 4508:
      case 4509:
      case 4741:
      case 4742:
      case 4743:
      case 4744:
      case 4745:
      case 4746:
      case 4747:
      case 4748:
      case 4749:
      case 4750:
      case 4751:
      case 4752:
      case 4753:
      case 4754:
      case 4755:
      case 4756:
      case 4757:
      case 4758:
      case 4759:
      case 4760:
      case 4761:
      case 4762:
      case 4763:
      case 4764:
      case 4765:
      case 4766:
      case 4767:
      case 4768:
      case 4769:
      case 4770:
      case 4771:
      case 4772:
      case 4773:
      case 4774:
      case 4982:
        return result;
      case 761:
      case 762:
      case 763:
      case 764:
      case 765:
      case 766:
      case 767:
      case 768:
      case 769:
      case 770:
      case 771:
      case 772:
      case 773:
      case 774:
      case 775:
      case 776:
      case 2284:
      case 2285:
      case 2286:
      case 2287:
      case 2288:
      case 2289:
      case 2290:
      case 2291:
      case 2292:
      case 2293:
      case 2294:
      case 2295:
      case 2296:
      case 2297:
      case 2298:
      case 2299:
      case 2300:
      case 2301:
      case 2302:
      case 2303:
      case 2304:
      case 2305:
      case 2306:
      case 2307:
      case 2308:
      case 2309:
      case 2310:
      case 2311:
      case 2312:
      case 2313:
      case 2314:
      case 2315:
      case 2316:
      case 2317:
      case 2318:
      case 2319:
      case 2320:
      case 2321:
      case 2322:
      case 2323:
      case 2324:
      case 2325:
      case 2326:
      case 2327:
      case 2328:
      case 2329:
      case 2330:
      case 2331:
      case 2332:
      case 2333:
      case 2334:
      case 2335:
      case 2336:
      case 2337:
      case 2338:
      case 2339:
      case 2340:
      case 2341:
      case 2342:
      case 2343:
      case 2344:
      case 2345:
      case 2346:
      case 2347:
      case 2348:
      case 2349:
      case 2350:
      case 2351:
      case 2352:
      case 2353:
      case 2354:
      case 2355:
      case 2356:
      case 2357:
      case 2358:
      case 2359:
      case 2360:
      case 2361:
      case 2362:
      case 2363:
      case 2364:
      case 2365:
      case 2366:
      case 2367:
      case 2368:
      case 2369:
      case 2370:
      case 2371:
      case 2372:
      case 2373:
      case 2374:
      case 2375:
      case 2376:
      case 2377:
      case 2378:
      case 2379:
      case 2380:
      case 2381:
      case 2382:
      case 2383:
      case 2384:
      case 2385:
      case 2386:
      case 2387:
      case 2388:
      case 2389:
      case 2390:
      case 2391:
      case 2392:
      case 2393:
      case 2394:
      case 2395:
      case 2396:
      case 2397:
      case 2398:
      case 2399:
      case 2400:
      case 2401:
      case 2402:
      case 2403:
      case 2404:
      case 2405:
      case 2406:
      case 2407:
      case 2408:
      case 2409:
      case 2410:
      case 2411:
      case 2412:
      case 2413:
      case 2414:
      case 2415:
      case 2416:
      case 2417:
      case 2418:
      case 2419:
      case 2420:
      case 2421:
      case 2422:
      case 2423:
      case 2424:
      case 2425:
      case 2426:
      case 2427:
      case 2428:
      case 2429:
      case 2430:
      case 2431:
      case 2432:
      case 2433:
      case 2434:
      case 2435:
      case 2436:
      case 2437:
      case 2438:
      case 2439:
      case 2440:
      case 2441:
      case 2442:
      case 2443:
      case 2444:
      case 2445:
      case 2446:
      case 2447:
      case 2448:
      case 2449:
      case 2450:
      case 2451:
      case 2452:
      case 2453:
      case 2454:
      case 2455:
      case 2456:
      case 2457:
      case 2458:
      case 2459:
      case 2460:
      case 2461:
      case 2462:
      case 2463:
      case 2464:
      case 2465:
      case 2466:
      case 2467:
      case 2468:
      case 2469:
      case 2470:
      case 2471:
      case 2472:
      case 2473:
      case 2474:
      case 2475:
      case 2476:
      case 2477:
      case 2478:
      case 2479:
      case 2480:
      case 2481:
      case 2482:
      case 2483:
      case 2484:
      case 2485:
      case 2486:
      case 2487:
      case 2488:
      case 2489:
      case 2490:
      case 2491:
      case 2492:
      case 2493:
      case 2494:
      case 2495:
      case 2496:
      case 2497:
      case 2498:
      case 2499:
      case 2500:
      case 2501:
      case 2502:
      case 2503:
      case 2504:
      case 2505:
      case 2506:
      case 2507:
      case 2508:
      case 2509:
      case 2510:
      case 2511:
      case 2512:
      case 2513:
      case 2514:
      case 2515:
      case 2516:
      case 2517:
      case 2518:
      case 2519:
      case 2520:
      case 2521:
      case 2522:
      case 2523:
      case 2524:
      case 2525:
      case 2526:
      case 2527:
      case 2528:
      case 2529:
      case 2530:
      case 2531:
      case 2532:
      case 2533:
      case 2534:
      case 2535:
      case 2536:
      case 2537:
      case 2538:
      case 2539:
      case 4388:
      case 4389:
      case 4390:
      case 4391:
      case 4392:
      case 4393:
      case 4394:
      case 4395:
      case 4396:
      case 4397:
      case 4398:
      case 4399:
      case 4400:
      case 4401:
      case 4402:
      case 4403:
      case 4615:
      case 4616:
      case 4617:
      case 4618:
      case 4619:
      case 4620:
      case 4621:
      case 4622:
      case 4623:
      case 4624:
      case 4625:
      case 4626:
      case 4627:
      case 4628:
      case 4629:
      case 4630:
      case 4631:
      case 4632:
      case 4633:
      case 4634:
      case 4635:
      case 4636:
      case 4637:
      case 4638:
      case 4639:
      case 4640:
      case 4641:
      case 4642:
      case 4643:
      case 4644:
      case 4645:
      case 4646:
      case 4647:
      case 4648:
      case 4649:
      case 4650:
      case 4856:
      case 4857:
      case 4858:
      case 4859:
      case 4860:
      case 4861:
      case 4862:
      case 4863:
      case 4864:
      case 4865:
      case 4866:
      case 4867:
      case 4868:
      case 4869:
      case 4870:
      case 4871:
      case 4872:
      case 4873:
      case 4874:
      case 4875:
      case 4876:
      case 4877:
      case 4878:
      case 4879:
      case 4880:
      case 4881:
      case 4882:
      case 4883:
      case 4884:
      case 4885:
      case 4886:
      case 4887:
      case 4888:
      case 4889:
      case 4890:
      case 4891:
        goto LABEL_15;
      case 777:
      case 778:
      case 779:
      case 780:
      case 781:
      case 782:
      case 783:
      case 784:
      case 785:
      case 786:
      case 787:
      case 788:
      case 789:
      case 790:
      case 791:
      case 792:
      case 2540:
      case 2541:
      case 2542:
      case 2543:
      case 2544:
      case 2545:
      case 2546:
      case 2547:
      case 2548:
      case 2549:
      case 2550:
      case 2551:
      case 2552:
      case 2553:
      case 2554:
      case 2555:
      case 2556:
      case 2557:
      case 2558:
      case 2559:
      case 2560:
      case 2561:
      case 2562:
      case 2563:
      case 2564:
      case 2565:
      case 2566:
      case 2567:
      case 2568:
      case 2569:
      case 2570:
      case 2571:
      case 2572:
      case 2573:
      case 2574:
      case 2575:
      case 2576:
      case 2577:
      case 2578:
      case 2579:
      case 2580:
      case 2581:
      case 2582:
      case 2583:
      case 2584:
      case 2585:
      case 2586:
      case 2587:
      case 2588:
      case 2589:
      case 2590:
      case 2591:
      case 2592:
      case 2593:
      case 2594:
      case 2595:
      case 2596:
      case 2597:
      case 2598:
      case 2599:
      case 2600:
      case 2601:
      case 2602:
      case 2603:
      case 2604:
      case 2605:
      case 2606:
      case 2607:
      case 2608:
      case 2609:
      case 2610:
      case 2611:
      case 2612:
      case 2613:
      case 2614:
      case 2615:
      case 2616:
      case 2617:
      case 2618:
      case 2619:
      case 2620:
      case 2621:
      case 2622:
      case 2623:
      case 2624:
      case 2625:
      case 2626:
      case 2627:
      case 2628:
      case 2629:
      case 2630:
      case 2631:
      case 2632:
      case 2633:
      case 2634:
      case 2635:
      case 2636:
      case 2637:
      case 2638:
      case 2639:
      case 2640:
      case 2641:
      case 2642:
      case 2643:
      case 2644:
      case 2645:
      case 2646:
      case 2647:
      case 2648:
      case 2649:
      case 2650:
      case 2651:
      case 2652:
      case 2653:
      case 2654:
      case 2655:
      case 2656:
      case 2657:
      case 2658:
      case 2659:
      case 2660:
      case 2661:
      case 2662:
      case 2663:
      case 2664:
      case 2665:
      case 2666:
      case 2667:
      case 2668:
      case 2669:
      case 2670:
      case 2671:
      case 2672:
      case 2673:
      case 2674:
      case 2675:
      case 2676:
      case 2677:
      case 2678:
      case 2679:
      case 2680:
      case 2681:
      case 2682:
      case 2683:
      case 2684:
      case 2685:
      case 2686:
      case 2687:
      case 2688:
      case 2689:
      case 2690:
      case 2691:
      case 2692:
      case 2693:
      case 2694:
      case 2695:
      case 2696:
      case 2697:
      case 2698:
      case 2699:
      case 2700:
      case 2701:
      case 2702:
      case 2703:
      case 2704:
      case 2705:
      case 2706:
      case 2707:
      case 2708:
      case 2709:
      case 2710:
      case 2711:
      case 2712:
      case 2713:
      case 2714:
      case 2715:
      case 2716:
      case 2717:
      case 2718:
      case 2719:
      case 2720:
      case 2721:
      case 2722:
      case 2723:
      case 2724:
      case 2725:
      case 2726:
      case 2727:
      case 2728:
      case 2729:
      case 2730:
      case 2731:
      case 2732:
      case 2733:
      case 2734:
      case 2735:
      case 2736:
      case 2737:
      case 2738:
      case 2739:
      case 2740:
      case 2741:
      case 2742:
      case 2743:
      case 2744:
      case 2745:
      case 2746:
      case 2747:
      case 2748:
      case 2749:
      case 2750:
      case 2751:
      case 2752:
      case 2753:
      case 2754:
      case 2755:
      case 2756:
      case 2757:
      case 2758:
      case 2759:
      case 2760:
      case 2761:
      case 2762:
      case 2763:
      case 2764:
      case 2765:
      case 2766:
      case 2767:
      case 2768:
      case 2769:
      case 2770:
      case 2771:
      case 2772:
      case 2773:
      case 2774:
      case 2775:
      case 2776:
      case 2777:
      case 2778:
      case 2779:
      case 2780:
      case 2781:
      case 2782:
      case 2783:
      case 2784:
      case 2785:
      case 2786:
      case 2787:
      case 2788:
      case 2789:
      case 2790:
      case 2791:
      case 2792:
      case 2793:
      case 2794:
      case 2795:
      case 4510:
      case 4511:
      case 4512:
      case 4513:
      case 4514:
      case 4515:
      case 4516:
      case 4517:
      case 4518:
      case 4519:
      case 4520:
      case 4521:
      case 4522:
      case 4523:
      case 4524:
      case 4525:
      case 4526:
      case 4527:
      case 4528:
      case 4529:
      case 4530:
      case 4531:
      case 4532:
      case 4533:
        goto LABEL_10;
      case 3668:
      case 3669:
      case 3670:
      case 3671:
      case 3672:
      case 3673:
      case 3674:
      case 3675:
      case 3676:
      case 3677:
      case 3678:
      case 3679:
      case 3680:
      case 3681:
      case 3682:
      case 3683:
      case 3684:
      case 3685:
      case 3686:
      case 3687:
      case 3688:
      case 3689:
      case 3690:
      case 3691:
      case 3692:
      case 3693:
      case 3694:
      case 3695:
      case 3696:
      case 3697:
      case 3698:
      case 3699:
      case 3700:
      case 3701:
      case 3702:
      case 3703:
      case 3704:
      case 3705:
      case 3706:
      case 3707:
      case 3708:
      case 3709:
      case 3710:
      case 3711:
      case 3712:
      case 3713:
      case 3714:
      case 3715:
      case 3716:
      case 3717:
      case 3718:
      case 3719:
      case 3720:
      case 3721:
        uint64_t result = 32;
        break;
      default:
        return 4;
    }
  }
  return result;
}

uint64_t sub_1CBD81D60(uint64_t a1, int a2)
{
  return byte_1CDF30944[a2] & 1;
}

uint64_t sub_1CBD81D74(uint64_t a1, int a2)
{
  return (byte_1CDF30944[a2] >> 1) & 1;
}

uint64_t sub_1CBD81D88(uint64_t a1, int a2)
{
  return (byte_1CDF30944[a2] >> 2) & 1;
}

void LLVMInitializeAGX3AsmParser_0()
{
  qword_1EA61E9D0 = (uint64_t)sub_1CBD81DC0;
  byte_1EBCC27A2 = 1;
}

void sub_1CBD81DC0()
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  PermanentLibrary = llvm::sys::DynamicLibrary::getPermanentLibrary("/usr/local/lib/libLLVMInternal.dylib", (uint64_t)__p);
  if (PermanentLibrary != &llvm::sys::DynamicLibrary::Invalid)
  {
    int v1 = PermanentLibrary;
    if (byte_1EBCC27A3 == 1)
    {
      uint64_t v2 = (void (*)(void *))dlsym(PermanentLibrary, "LLVMInitializeAGX3InstPrinterTgt");
      if (v2) {
        v2(&unk_1EA61E8B0);
      }
    }
    if (byte_1EBCC27A2 == 1)
    {
      uint64_t v3 = (void (*)(void *))dlsym(v1, "LLVMInitializeAGX3AsmParserTgt");
      if (v3) {
        v3(&unk_1EA61E8B0);
      }
    }
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1CBD81E88()
{
}

void sub_1CBD81EF4()
{
}

void sub_1CBD81F4C()
{
}

void sub_1CBD82054()
{
}

void sub_1CBD82144()
{
}

void sub_1CBD8214C()
{
}

uint64_t sub_1CBD821A0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1F25FDCB8;
  v7[1] = a1;
  uint64_t v8 = v7;
  unsigned int v1 = sub_1CBD854F8((uint64_t)v7);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  if (v1 > 5) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = dword_1CDF32D88[v1];
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E8A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EA61E8A8))
  {
    dword_1EA61E8A0 = 0;
    __cxa_guard_release(&qword_1EA61E8A8);
  }
  unsigned int v3 = dword_1EA61E8A0;
  if (dword_1EBD023D8) {
    BOOL v4 = word_1EBD02360 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    unsigned int v3 = dword_1EBD023D8;
  }
  if (v3 >= 0x11) {
    unsigned int v5 = v2;
  }
  else {
    unsigned int v5 = v3;
  }
  if (v3) {
    return v5;
  }
  else {
    return v2;
  }
}

uint64_t sub_1CBD82310()
{
  *(void *)&long long v1 = "Maximum number of flag registers that can be allocated, idential to AGX3_FLAG_REG_LIMIT EV and overrides it";
  *((void *)&v1 + 1) = 107;
  sub_1CD432E7C(&v1);

  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBD02358, &dword_1CB82C000);
}

void sub_1CBD82378()
{
}

uint64_t sub_1CBD8238C()
{
  return 0;
}

void sub_1CBD82398()
{
}

llvm::raw_ostream *sub_1CBD823AC(uint64_t a1, int a2)
{
  BOOL v4 = *(llvm::raw_ostream **)(a1 + 16);
  unsigned int v5 = (_DWORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 572552560;
    *unsigned int v5 = 1885810185;
    *((void *)v4 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.gpu \"", 7uLL);
  }
  switch(a2)
  {
    case 0:
    case 2:
    case 10:
    case 11:
    case 12:
    case 13:
    case 21:
    case 22:
    case 23:
    case 24:
    case 28:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "unknown";
        goto LABEL_6;
      }
      *(int *)((char *)v7 + 3) = 1853321070;
      int v13 = 1852534389;
      goto LABEL_75;
    case 1:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v12 = *((void *)v6 + 4);
      if ((unint64_t)(*((void *)v6 + 3) - v12) <= 2)
      {
        uint64_t v8 = "g15";
        size_t v9 = 3;
        goto LABEL_7;
      }
      *(unsigned char *)(v12 + 2) = 53;
      *(_WORD *)uint64_t v12 = 12647;
      uint64_t v14 = *((void *)v6 + 4) + 3;
      goto LABEL_76;
    case 4:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g15g-a0";
        goto LABEL_6;
      }
      int v15 = 811674983;
      goto LABEL_63;
    case 5:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g15g-b0";
        goto LABEL_6;
      }
      int v15 = 811740519;
      goto LABEL_63;
    case 6:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g15s-a0";
        goto LABEL_6;
      }
      int v16 = 811674995;
      goto LABEL_70;
    case 7:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g15s-b0";
        goto LABEL_6;
      }
      int v16 = 811740531;
      goto LABEL_70;
    case 8:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g15c-a0";
        goto LABEL_6;
      }
      int v17 = 811674979;
      goto LABEL_58;
    case 9:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g15c-b0";
        goto LABEL_6;
      }
      int v17 = 811740515;
LABEL_58:
      *(int *)((char *)v7 + 3) = v17;
      int v13 = 1664430439;
      goto LABEL_75;
    case 14:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g16p-a0";
        goto LABEL_6;
      }
      int v18 = 811674992;
      goto LABEL_72;
    case 15:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g16p-b0";
        goto LABEL_6;
      }
      int v18 = 811740528;
      goto LABEL_72;
    case 16:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g16g-a0";
        goto LABEL_6;
      }
      int v19 = 811674983;
      goto LABEL_68;
    case 17:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g15g-c0";
        goto LABEL_6;
      }
      int v15 = 811806055;
LABEL_63:
      *(int *)((char *)v7 + 3) = v15;
      int v13 = 1731539303;
      goto LABEL_75;
    case 18:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g16s-a0";
        goto LABEL_6;
      }
      int v20 = 811674995;
      goto LABEL_74;
    case 19:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g16c-a0";
        goto LABEL_6;
      }
      *(int *)((char *)v7 + 3) = 811674979;
      int v13 = 1664495975;
      goto LABEL_75;
    case 20:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g17p-a0";
        goto LABEL_6;
      }
      *(int *)((char *)v7 + 3) = 811674992;
      int v13 = 1882665319;
      goto LABEL_75;
    case 25:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g16g-b0";
        goto LABEL_6;
      }
      int v19 = 811740519;
LABEL_68:
      *(int *)((char *)v7 + 3) = v19;
      int v13 = 1731604839;
      goto LABEL_75;
    case 26:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g15s-b1";
        goto LABEL_6;
      }
      int v16 = 828517747;
LABEL_70:
      *(int *)((char *)v7 + 3) = v16;
      int v13 = 1932865895;
      goto LABEL_75;
    case 27:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 <= 6uLL)
      {
        uint64_t v8 = "g16p-b1";
        goto LABEL_6;
      }
      int v18 = 828517744;
LABEL_72:
      *(int *)((char *)v7 + 3) = v18;
      int v13 = 1882599783;
      goto LABEL_75;
    case 29:
      unsigned int v6 = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v7 = (int *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v7 > 6uLL)
      {
        int v20 = 811740531;
LABEL_74:
        *(int *)((char *)v7 + 3) = v20;
        int v13 = 1932931431;
LABEL_75:
        *uint64_t v7 = v13;
        uint64_t v14 = *((void *)v6 + 4) + 7;
LABEL_76:
        *((void *)v6 + 4) = v14;
      }
      else
      {
        uint64_t v8 = "g16s-b0";
LABEL_6:
        size_t v9 = 7;
LABEL_7:
        llvm::raw_ostream::write(v6, v8, v9);
      }
LABEL_8:
      uint64_t result = *(llvm::raw_ostream **)(a1 + 16);
      uint64_t v11 = (_WORD *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v11 > 1uLL)
      {
        *uint64_t v11 = 2594;
        *((void *)result + 4) += 2;
      }
      else
      {
        return llvm::raw_ostream::write(result, "\"\n", 2uLL);
      }
      return result;
    default:
      goto LABEL_8;
  }
}

void sub_1CBD828EC()
{
}

uint64_t sub_1CBD82900(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(result + 8) + 272) + 24) + 8);
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(v2 + 16) & 0xFFFFF00F | (16 * a2);
  return result;
}

BOOL sub_1CBD82924(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)a2;
  int v5 = dword_1CDF32DA0[v4];
  if (v5)
  {
    switch(*(_DWORD *)a2)
    {
      case 0x168:
      case 0x169:
      case 0x16A:
      case 0x16B:
      case 0x16C:
      case 0x16D:
      case 0x16E:
      case 0x16F:
      case 0x170:
      case 0x171:
      case 0x172:
      case 0x173:
      case 0x174:
      case 0x175:
      case 0x176:
      case 0x177:
      case 0x178:
      case 0x179:
      case 0x25AC:
      case 0x25AD:
      case 0x25AE:
      case 0x25AF:
      case 0x25B0:
      case 0x25B1:
      case 0x25B2:
      case 0x25B3:
      case 0x25B4:
      case 0x25B5:
      case 0x25B6:
      case 0x25B7:
      case 0x25B8:
      case 0x25B9:
      case 0x25BA:
      case 0x25BB:
      case 0x25BC:
      case 0x25BD:
        sub_1CBD877A0(a1, a2, a3, a4);
        break;
      case 0x17A:
      case 0x17B:
      case 0x17C:
      case 0x17D:
      case 0x17E:
      case 0x17F:
      case 0x180:
      case 0x181:
      case 0x182:
      case 0x25BE:
      case 0x25BF:
      case 0x25C0:
      case 0x25C1:
      case 0x25C2:
      case 0x25C3:
      case 0x25C4:
      case 0x25C5:
      case 0x25C6:
        sub_1CBD87FF4(a1, a2, a3, a4);
        break;
      case 0x183:
      case 0x184:
      case 0x185:
      case 0x186:
      case 0x187:
      case 0x188:
      case 0x189:
      case 0x18A:
      case 0x18B:
      case 0x18C:
      case 0x18D:
      case 0x18E:
      case 0x18F:
      case 0x190:
      case 0x191:
      case 0x192:
      case 0x193:
      case 0x194:
      case 0x25C7:
      case 0x25C8:
      case 0x25C9:
      case 0x25CA:
      case 0x25CB:
      case 0x25CC:
      case 0x25CD:
      case 0x25CE:
      case 0x25CF:
      case 0x25D0:
      case 0x25D1:
      case 0x25D2:
      case 0x25D3:
      case 0x25D4:
      case 0x25D5:
      case 0x25D6:
      case 0x25D7:
      case 0x25D8:
        sub_1CBD875FC(a1, a2, a3, a4);
        break;
      case 0x195:
      case 0x196:
      case 0x197:
      case 0x198:
      case 0x199:
      case 0x19A:
      case 0x19B:
      case 0x19C:
      case 0x19D:
      case 0x25D9:
      case 0x25DA:
      case 0x25DB:
      case 0x25DC:
      case 0x25DD:
      case 0x25DE:
      case 0x25DF:
      case 0x25E0:
      case 0x25E1:
        sub_1CBD87E48(a1, a2, a3, a4);
        break;
      case 0x19E:
      case 0x25E2:
        sub_1CBD9A830(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x19F:
      case 0x1A0:
      case 0x1A1:
      case 0x1A2:
      case 0x25E3:
      case 0x25E5:
        sub_1CBD8B050(a1, (unsigned int *)a2, a3, (_OWORD *)a4);
        break;
      case 0x1A3:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x25E7:
      case 0x25E9:
        sub_1CBD8ADE0(a1, (unsigned int *)a2, a3, (_OWORD *)a4);
        break;
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
      case 0x25EB:
      case 0x25ED:
        sub_1CBD8AF7C(a1, (unsigned int *)a2, a3, (_OWORD *)a4);
        break;
      case 0x1AB:
      case 0x1AC:
      case 0x1AD:
      case 0x1AE:
      case 0x1AF:
      case 0x1B0:
      case 0x25EF:
      case 0x25F0:
      case 0x25F1:
      case 0x25F2:
      case 0x25F3:
      case 0x25F4:
        sub_1CBD91738(a1, a2, a3, a4);
        break;
      case 0x1B1:
      case 0x1B2:
      case 0x1B3:
      case 0x25F5:
      case 0x25F6:
      case 0x25F7:
        sub_1CD438230(a1, a2, a3, a4);
        break;
      case 0x1B4:
      case 0x1B5:
      case 0x1B6:
      case 0x1B7:
      case 0x1B8:
      case 0x1B9:
      case 0x1BA:
      case 0x1BB:
      case 0x1BC:
      case 0x1BD:
      case 0x1BE:
      case 0x1BF:
      case 0x1C0:
      case 0x1C1:
      case 0x1C2:
      case 0x1C3:
      case 0x1C4:
      case 0x1C5:
      case 0x1C6:
      case 0x1C7:
      case 0x1C8:
      case 0x1C9:
      case 0x1CA:
      case 0x1CB:
      case 0x1CC:
      case 0x1CD:
      case 0x1CE:
      case 0x1CF:
      case 0x1D0:
      case 0x1D1:
      case 0x1D2:
      case 0x1D3:
      case 0x1D4:
      case 0x1D5:
      case 0x1D6:
      case 0x1D7:
      case 0x1D8:
      case 0x1D9:
      case 0x1DA:
      case 0x1DB:
      case 0x1DC:
      case 0x1DD:
      case 0x1DE:
      case 0x1DF:
      case 0x1E0:
      case 0x1E1:
      case 0x1E2:
      case 0x1E3:
      case 0x1E4:
      case 0x1E5:
      case 0x1E6:
      case 0x1E7:
      case 0x1E8:
      case 0x1E9:
      case 0x1EA:
      case 0x1EB:
      case 0x1EC:
      case 0x1ED:
      case 0x1EE:
      case 0x1EF:
      case 0x1F0:
      case 0x1F1:
      case 0x1F2:
      case 0x1F3:
      case 0x1F4:
      case 0x1F5:
      case 0x1F6:
      case 0x1F7:
      case 0x1F8:
      case 0x1F9:
      case 0x1FA:
      case 0x1FB:
      case 0x1FC:
      case 0x1FD:
      case 0x1FE:
      case 0x1FF:
      case 0x200:
      case 0x201:
      case 0x202:
      case 0x203:
      case 0x204:
      case 0x25F8:
      case 0x25F9:
      case 0x25FA:
      case 0x25FB:
      case 0x25FC:
      case 0x25FD:
      case 0x25FE:
      case 0x25FF:
      case 0x2600:
      case 0x2601:
      case 0x2602:
      case 0x2603:
      case 0x2604:
      case 0x2605:
      case 0x2606:
      case 0x2607:
      case 0x2608:
      case 0x2609:
      case 0x260A:
      case 0x260B:
      case 0x260C:
      case 0x260D:
      case 0x260E:
      case 0x260F:
      case 0x2610:
      case 0x2611:
      case 0x2612:
      case 0x2613:
      case 0x2614:
      case 0x2615:
      case 0x2616:
      case 0x2617:
      case 0x2618:
      case 0x2619:
      case 0x261A:
      case 0x261B:
      case 0x261C:
      case 0x261D:
      case 0x261E:
      case 0x261F:
      case 0x2620:
      case 0x2621:
      case 0x2622:
      case 0x2623:
      case 0x2624:
      case 0x2625:
      case 0x2626:
      case 0x2627:
      case 0x2628:
      case 0x2629:
      case 0x262A:
      case 0x262B:
      case 0x262C:
      case 0x262D:
      case 0x262E:
      case 0x262F:
      case 0x2630:
      case 0x2631:
      case 0x2632:
      case 0x2633:
      case 0x2634:
      case 0x2635:
      case 0x2636:
      case 0x2637:
      case 0x2638:
      case 0x2639:
      case 0x263A:
      case 0x263B:
      case 0x263C:
      case 0x263D:
      case 0x263E:
      case 0x263F:
      case 0x2640:
      case 0x2641:
      case 0x2642:
      case 0x2643:
      case 0x2644:
      case 0x2645:
      case 0x2646:
      case 0x2647:
      case 0x2648:
        sub_1CBD97AA4((uint64_t)a1, a2, a3, a4);
        break;
      case 0x205:
      case 0x206:
      case 0x2649:
      case 0x264A:
        sub_1CBD9D75C(a1, a2, a3, a4);
        break;
      case 0x207:
      case 0x264B:
        sub_1CBD9D870(a1, a2, a3, a4);
        break;
      case 0x208:
      case 0x209:
      case 0x20A:
      case 0x20B:
      case 0x20C:
      case 0x20D:
      case 0x20E:
      case 0x20F:
      case 0x210:
      case 0x211:
      case 0x212:
      case 0x213:
      case 0x214:
      case 0x215:
      case 0x216:
      case 0x217:
      case 0x218:
      case 0x219:
      case 0x264C:
      case 0x264D:
      case 0x264E:
      case 0x264F:
      case 0x2650:
      case 0x2651:
      case 0x2652:
      case 0x2653:
      case 0x2654:
      case 0x2655:
      case 0x2656:
      case 0x2657:
      case 0x2658:
      case 0x2659:
      case 0x265A:
      case 0x265B:
      case 0x265C:
      case 0x265D:
        sub_1CD43C458(a1, a2, a3, a4);
        break;
      case 0x21A:
      case 0x21B:
      case 0x265E:
      case 0x265F:
        sub_1CBD8B124(a1, a2, a3, a4);
        break;
      case 0x21C:
      case 0x21D:
      case 0x2660:
      case 0x2661:
        sub_1CBD8B708(a1, (unsigned int *)a2, a3, (_OWORD *)a4);
        break;
      case 0x21E:
      case 0x21F:
      case 0x2662:
      case 0x2663:
        sub_1CBD8B5A4(a1, (unsigned int *)a2, a3, (_OWORD *)a4);
        break;
      case 0x220:
      case 0x2664:
        sub_1CBD8B86C(a1, a2, a3, a4);
        break;
      case 0x221:
      case 0x222:
      case 0x2665:
      case 0x2666:
        sub_1CBD8B440(a1, (unsigned int *)a2, a3, (_OWORD *)a4);
        break;
      case 0x223:
      case 0x2667:
        sub_1CBD8B230(a1, a2, a3, a4);
        break;
      case 0x224:
      case 0x225:
      case 0x2668:
      case 0x2669:
        sub_1CBD8B2DC(a1, (unsigned int *)a2, a3, (_OWORD *)a4);
        break;
      case 0x226:
      case 0x266A:
        sub_1CBD9D478(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x227:
      case 0x228:
      case 0x229:
      case 0x22A:
      case 0x22B:
      case 0x22C:
      case 0x266B:
      case 0x266C:
      case 0x266D:
      case 0x266E:
      case 0x266F:
      case 0x2670:
        sub_1CBD8AA1C(a1, a2, a3, a4);
        break;
      case 0x22D:
      case 0x22E:
      case 0x22F:
      case 0x2671:
      case 0x2672:
      case 0x2673:
        sub_1CBD8AB6C(a1, a2, a3, a4);
        break;
      case 0x230:
      case 0x231:
      case 0x232:
      case 0x233:
      case 0x234:
      case 0x235:
      case 0x2674:
      case 0x2675:
      case 0x2676:
      case 0x2677:
      case 0x2678:
      case 0x2679:
        sub_1CBD8ACA4(a1, a2, a3, a4);
        break;
      case 0x236:
      case 0x237:
      case 0x238:
      case 0x267A:
      case 0x267B:
      case 0x267C:
        sub_1CBD9ABD0(a1, (uint64_t)a2, a3, (_OWORD *)a4);
        break;
      case 0x239:
      case 0x23A:
      case 0x23B:
      case 0x23C:
      case 0x23D:
      case 0x23E:
      case 0x23F:
      case 0x240:
      case 0x241:
      case 0x242:
      case 0x243:
      case 0x244:
      case 0x245:
      case 0x246:
      case 0x247:
      case 0x248:
      case 0x249:
      case 0x24A:
      case 0x24B:
      case 0x24C:
      case 0x24D:
      case 0x24E:
      case 0x24F:
      case 0x250:
      case 0x251:
      case 0x252:
      case 0x253:
      case 0x254:
      case 0x255:
      case 0x256:
      case 0x257:
      case 0x258:
      case 0x259:
      case 0x25A:
      case 0x25B:
      case 0x25C:
      case 0x25D:
      case 0x25E:
      case 0x25F:
      case 0x260:
      case 0x261:
      case 0x262:
      case 0x263:
      case 0x264:
      case 0x265:
      case 0x266:
      case 0x267:
      case 0x268:
      case 0x269:
      case 0x26A:
      case 0x26B:
      case 0x26C:
      case 0x26D:
      case 0x26E:
      case 0x267D:
      case 0x267E:
      case 0x267F:
      case 0x2680:
      case 0x2681:
      case 0x2682:
      case 0x2683:
      case 0x2684:
      case 0x2685:
      case 0x2686:
      case 0x2687:
      case 0x2688:
      case 0x2689:
      case 0x268A:
      case 0x268B:
      case 0x268C:
      case 0x268D:
      case 0x268E:
      case 0x268F:
      case 0x2690:
      case 0x2691:
      case 0x2692:
      case 0x2693:
      case 0x2694:
      case 0x2695:
      case 0x2696:
      case 0x2697:
      case 0x2698:
      case 0x2699:
      case 0x269A:
      case 0x269B:
      case 0x269C:
      case 0x269D:
      case 0x269E:
      case 0x269F:
      case 0x26A0:
      case 0x26A1:
      case 0x26A2:
      case 0x26A3:
      case 0x26A4:
      case 0x26A5:
      case 0x26A6:
      case 0x26A7:
      case 0x26A8:
      case 0x26A9:
      case 0x26AA:
      case 0x26AB:
      case 0x26AC:
      case 0x26AD:
      case 0x26AE:
      case 0x26AF:
      case 0x26B0:
      case 0x26B1:
      case 0x26B2:
        sub_1CBD9D5AC(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x26F:
      case 0x26B3:
        sub_1CBD85B44(a1, a2, a3, a4);
        break;
      case 0x270:
      case 0x271:
      case 0x272:
      case 0x273:
      case 0x274:
      case 0x275:
      case 0x276:
      case 0x277:
      case 0x278:
      case 0x279:
      case 0x27A:
      case 0x27B:
      case 0x27C:
      case 0x27D:
      case 0x27E:
      case 0x27F:
      case 0x280:
      case 0x281:
      case 0x282:
      case 0x283:
      case 0x284:
      case 0x285:
      case 0x286:
      case 0x287:
      case 0x288:
      case 0x289:
      case 0x28A:
      case 0x28B:
      case 0x28C:
      case 0x28D:
      case 0x28E:
      case 0x28F:
      case 0x290:
      case 0x291:
      case 0x292:
      case 0x293:
      case 0x294:
      case 0x295:
      case 0x296:
      case 0x297:
      case 0x298:
      case 0x299:
      case 0x29A:
      case 0x29B:
      case 0x29C:
      case 0x29D:
      case 0x29E:
      case 0x29F:
      case 0x2A0:
      case 0x2A1:
      case 0x2A2:
      case 0x2A3:
      case 0x2A4:
      case 0x2A5:
      case 0x26B4:
      case 0x26B5:
      case 0x26B6:
      case 0x26B7:
      case 0x26B8:
      case 0x26B9:
      case 0x26BA:
      case 0x26BB:
      case 0x26BC:
      case 0x26BD:
      case 0x26BE:
      case 0x26BF:
      case 0x26C0:
      case 0x26C1:
      case 0x26C2:
      case 0x26C3:
      case 0x26C4:
      case 0x26C5:
      case 0x26C6:
      case 0x26C7:
      case 0x26C8:
      case 0x26C9:
      case 0x26CA:
      case 0x26CB:
      case 0x26CC:
      case 0x26CD:
      case 0x26CE:
      case 0x26CF:
      case 0x26D0:
      case 0x26D1:
      case 0x26D2:
      case 0x26D3:
      case 0x26D4:
      case 0x26D5:
      case 0x26D6:
      case 0x26D7:
      case 0x26D8:
      case 0x26D9:
      case 0x26DA:
      case 0x26DB:
      case 0x26DC:
      case 0x26DD:
      case 0x26DE:
      case 0x26DF:
      case 0x26E0:
      case 0x26E1:
      case 0x26E2:
      case 0x26E3:
      case 0x26E4:
      case 0x26E5:
      case 0x26E6:
      case 0x26E7:
      case 0x26E8:
      case 0x26E9:
        sub_1CBD913E0(a1, a2, a3, a4);
        break;
      case 0x2A6:
      case 0x2A7:
      case 0x2A8:
      case 0x2A9:
      case 0x2AA:
      case 0x2AB:
      case 0x2AC:
      case 0x2AD:
      case 0x2AE:
      case 0x2AF:
      case 0x2B0:
      case 0x2B1:
      case 0x2B2:
      case 0x2B3:
      case 0x2B4:
      case 0x2B5:
      case 0x2B6:
      case 0x2B7:
      case 0x2B8:
      case 0x2B9:
      case 0x2BA:
      case 0x2BB:
      case 0x2BC:
      case 0x2BD:
      case 0x2BE:
      case 0x2BF:
      case 0x2C0:
      case 0x26EA:
      case 0x26EB:
      case 0x26EC:
      case 0x26ED:
      case 0x26EE:
      case 0x26EF:
      case 0x26F0:
      case 0x26F1:
      case 0x26F2:
      case 0x26F3:
      case 0x26F4:
      case 0x26F5:
      case 0x26F6:
      case 0x26F7:
      case 0x26F8:
      case 0x26F9:
      case 0x26FA:
      case 0x26FB:
      case 0x26FC:
      case 0x26FD:
      case 0x26FE:
      case 0x26FF:
      case 0x2700:
      case 0x2701:
      case 0x2702:
      case 0x2703:
      case 0x2704:
        sub_1CD437ED8(a1, a2, a3, a4);
        break;
      case 0x2C1:
      case 0x2C2:
      case 0x2C3:
      case 0x2C4:
      case 0x2C5:
      case 0x2C6:
      case 0x2C7:
      case 0x2C8:
      case 0x2C9:
      case 0x2CA:
      case 0x2CB:
      case 0x2CC:
      case 0x2CD:
      case 0x2CE:
      case 0x2CF:
      case 0x2D0:
      case 0x2705:
      case 0x2706:
      case 0x2707:
      case 0x2708:
      case 0x2709:
      case 0x270A:
      case 0x270B:
      case 0x270C:
      case 0x270D:
      case 0x270E:
      case 0x270F:
      case 0x2710:
      case 0x2711:
      case 0x2712:
      case 0x2713:
      case 0x2714:
        sub_1CBD8EFD4(a1, a2, a3, a4);
        break;
      case 0x2D1:
      case 0x2D2:
      case 0x2D3:
      case 0x2D4:
      case 0x2D5:
      case 0x2D6:
      case 0x2D7:
      case 0x2D8:
      case 0x2E1:
      case 0x2E2:
      case 0x2E3:
      case 0x2E4:
      case 0x2E5:
      case 0x2E6:
      case 0x2E7:
      case 0x2E8:
      case 0x2715:
      case 0x2716:
      case 0x2717:
      case 0x2718:
      case 0x2719:
      case 0x271A:
      case 0x271B:
      case 0x271C:
      case 0x2725:
      case 0x2726:
      case 0x2727:
      case 0x2728:
      case 0x2729:
      case 0x272A:
      case 0x272B:
      case 0x272C:
        sub_1CBD8F5B0(a1, a2, a3, a4);
        break;
      case 0x2D9:
      case 0x2DA:
      case 0x2DB:
      case 0x2DC:
      case 0x2DD:
      case 0x2DE:
      case 0x2DF:
      case 0x2E0:
      case 0x2E9:
      case 0x2EA:
      case 0x2EB:
      case 0x2EC:
      case 0x2ED:
      case 0x2EE:
      case 0x2EF:
      case 0x2F0:
      case 0x271D:
      case 0x271E:
      case 0x271F:
      case 0x2720:
      case 0x2721:
      case 0x2722:
      case 0x2723:
      case 0x2724:
      case 0x272D:
      case 0x272E:
      case 0x272F:
      case 0x2730:
      case 0x2731:
      case 0x2732:
      case 0x2733:
      case 0x2734:
        sub_1CD4377A4(a1, a2, a3, a4);
        break;
      case 0x2F1:
      case 0x2F2:
      case 0x2F3:
      case 0x2F4:
      case 0x2735:
      case 0x2736:
      case 0x2737:
      case 0x2738:
        sub_1CBD9B738(a1, a2, a3, a4);
        break;
      case 0x2F5:
      case 0x2F6:
      case 0x2F7:
      case 0x2F8:
      case 0x2739:
      case 0x273A:
      case 0x273B:
      case 0x273C:
        sub_1CBD9B34C(a1, a2, a3, a4);
        break;
      case 0x2F9:
      case 0x2FA:
      case 0x2FB:
      case 0x2FC:
      case 0x2FD:
      case 0x2FE:
      case 0x2FF:
      case 0x300:
      case 0x301:
      case 0x302:
      case 0x303:
      case 0x304:
      case 0x305:
      case 0x306:
      case 0x307:
      case 0x308:
      case 0x273D:
      case 0x273E:
      case 0x273F:
      case 0x2740:
      case 0x2741:
      case 0x2742:
      case 0x2743:
      case 0x2744:
      case 0x2745:
      case 0x2746:
      case 0x2747:
      case 0x2748:
      case 0x2749:
      case 0x274A:
      case 0x274B:
      case 0x274C:
        sub_1CD437978(a1, a2, a3, a4);
        break;
      case 0x309:
      case 0x30A:
      case 0x30B:
      case 0x30C:
      case 0x30D:
      case 0x30E:
      case 0x30F:
      case 0x310:
      case 0x311:
      case 0x312:
      case 0x313:
      case 0x314:
      case 0x315:
      case 0x316:
      case 0x317:
      case 0x318:
      case 0x274D:
      case 0x274E:
      case 0x274F:
      case 0x2750:
      case 0x2751:
      case 0x2752:
      case 0x2753:
      case 0x2754:
      case 0x2755:
      case 0x2756:
      case 0x2757:
      case 0x2758:
      case 0x2759:
      case 0x275A:
      case 0x275B:
      case 0x275C:
        sub_1CBD8F9C4(a1, a2, a3, a4);
        break;
      case 0x319:
      case 0x31A:
      case 0x31B:
      case 0x31C:
      case 0x31D:
      case 0x31E:
      case 0x31F:
      case 0x320:
      case 0x321:
      case 0x322:
      case 0x323:
      case 0x324:
      case 0x325:
      case 0x326:
      case 0x327:
      case 0x328:
      case 0x275D:
      case 0x275E:
      case 0x275F:
      case 0x2760:
      case 0x2761:
      case 0x2762:
      case 0x2763:
      case 0x2764:
      case 0x2765:
      case 0x2766:
      case 0x2767:
      case 0x2768:
      case 0x2769:
      case 0x276A:
      case 0x276B:
      case 0x276C:
        sub_1CBD8F40C(a1, a2, a3, a4);
        break;
      case 0x329:
      case 0x32A:
      case 0x32B:
      case 0x32C:
      case 0x32D:
      case 0x32E:
      case 0x32F:
      case 0x330:
      case 0x331:
      case 0x332:
      case 0x333:
      case 0x334:
      case 0x335:
      case 0x336:
      case 0x337:
      case 0x338:
      case 0x339:
      case 0x33A:
      case 0x33B:
      case 0x33C:
      case 0x33D:
      case 0x33E:
      case 0x33F:
      case 0x340:
      case 0x341:
      case 0x342:
      case 0x343:
      case 0x344:
      case 0x345:
      case 0x346:
      case 0x347:
      case 0x348:
      case 0x349:
      case 0x34A:
      case 0x34B:
      case 0x34C:
      case 0x34D:
      case 0x34E:
      case 0x34F:
      case 0x350:
      case 0x351:
      case 0x352:
      case 0x353:
      case 0x354:
      case 0x355:
      case 0x356:
      case 0x357:
      case 0x358:
      case 0x399:
      case 0x39A:
      case 0x39B:
      case 0x39C:
      case 0x39D:
      case 0x39E:
      case 0x39F:
      case 0x3A0:
      case 0x3A1:
      case 0x3A2:
      case 0x3A3:
      case 0x3A4:
      case 0x3A5:
      case 0x3A6:
      case 0x3A7:
      case 0x3A8:
      case 0x3A9:
      case 0x3AA:
      case 0x3AB:
      case 0x3AC:
      case 0x3AD:
      case 0x3AE:
      case 0x3AF:
      case 0x3B0:
      case 0x3B1:
      case 0x3B2:
      case 0x3B3:
      case 0x3B4:
      case 0x3B5:
      case 0x3B6:
      case 0x3B7:
      case 0x3B8:
      case 0x3B9:
      case 0x3BA:
      case 0x3BB:
      case 0x3BC:
      case 0x3BD:
      case 0x3BE:
      case 0x3BF:
      case 0x3C0:
      case 0x3C1:
      case 0x3C2:
      case 0x3C3:
      case 0x3C4:
      case 0x3C5:
      case 0x3C6:
      case 0x3C7:
      case 0x3C8:
      case 0x276D:
      case 0x276E:
      case 0x276F:
      case 0x2770:
      case 0x2771:
      case 0x2772:
      case 0x2773:
      case 0x2774:
      case 0x2775:
      case 0x2776:
      case 0x2777:
      case 0x2778:
      case 0x2779:
      case 0x277A:
      case 0x277B:
      case 0x277C:
      case 0x277D:
      case 0x277E:
      case 0x277F:
      case 0x2780:
      case 0x2781:
      case 0x2782:
      case 0x2783:
      case 0x2784:
      case 0x2785:
      case 0x2786:
      case 0x2787:
      case 0x2788:
      case 0x2789:
      case 0x278A:
      case 0x278B:
      case 0x278C:
      case 0x278D:
      case 0x278E:
      case 0x278F:
      case 0x2790:
      case 0x2791:
      case 0x2792:
      case 0x2793:
      case 0x2794:
      case 0x2795:
      case 0x2796:
      case 0x2797:
      case 0x2798:
      case 0x2799:
      case 0x279A:
      case 0x279B:
      case 0x279C:
      case 0x27DD:
      case 0x27DE:
      case 0x27DF:
      case 0x27E0:
      case 0x27E1:
      case 0x27E2:
      case 0x27E3:
      case 0x27E4:
      case 0x27E5:
      case 0x27E6:
      case 0x27E7:
      case 0x27E8:
      case 0x27E9:
      case 0x27EA:
      case 0x27EB:
      case 0x27EC:
      case 0x27ED:
      case 0x27EE:
      case 0x27EF:
      case 0x27F0:
      case 0x27F1:
      case 0x27F2:
      case 0x27F3:
      case 0x27F4:
      case 0x27F5:
      case 0x27F6:
      case 0x27F7:
      case 0x27F8:
      case 0x27F9:
      case 0x27FA:
      case 0x27FB:
      case 0x27FC:
      case 0x27FD:
      case 0x27FE:
      case 0x27FF:
      case 0x2800:
      case 0x2801:
      case 0x2802:
      case 0x2803:
      case 0x2804:
      case 0x2805:
      case 0x2806:
      case 0x2807:
      case 0x2808:
      case 0x2809:
      case 0x280A:
      case 0x280B:
      case 0x280C:
        sub_1CBD8E8A0((uint64_t)a1, a2, a3, a4);
        break;
      case 0x359:
      case 0x35A:
      case 0x35B:
      case 0x35C:
      case 0x35D:
      case 0x35E:
      case 0x35F:
      case 0x360:
      case 0x361:
      case 0x362:
      case 0x363:
      case 0x364:
      case 0x365:
      case 0x366:
      case 0x367:
      case 0x368:
      case 0x369:
      case 0x36A:
      case 0x36B:
      case 0x36C:
      case 0x36D:
      case 0x36E:
      case 0x36F:
      case 0x370:
      case 0x371:
      case 0x372:
      case 0x373:
      case 0x374:
      case 0x375:
      case 0x376:
      case 0x377:
      case 0x378:
      case 0x379:
      case 0x37A:
      case 0x37B:
      case 0x37C:
      case 0x37D:
      case 0x37E:
      case 0x37F:
      case 0x380:
      case 0x381:
      case 0x382:
      case 0x383:
      case 0x384:
      case 0x385:
      case 0x386:
      case 0x387:
      case 0x388:
      case 0x389:
      case 0x38A:
      case 0x38B:
      case 0x38C:
      case 0x38D:
      case 0x38E:
      case 0x38F:
      case 0x390:
      case 0x391:
      case 0x392:
      case 0x393:
      case 0x394:
      case 0x395:
      case 0x396:
      case 0x397:
      case 0x398:
      case 0x3C9:
      case 0x3CA:
      case 0x3CB:
      case 0x3CC:
      case 0x3CD:
      case 0x3CE:
      case 0x3CF:
      case 0x3D0:
      case 0x3D1:
      case 0x3D2:
      case 0x3D3:
      case 0x3D4:
      case 0x3D5:
      case 0x3D6:
      case 0x3D7:
      case 0x3D8:
      case 0x3D9:
      case 0x3DA:
      case 0x3DB:
      case 0x3DC:
      case 0x3DD:
      case 0x3DE:
      case 0x3DF:
      case 0x3E0:
      case 0x3E1:
      case 0x3E2:
      case 0x3E3:
      case 0x3E4:
      case 0x3E5:
      case 0x3E6:
      case 0x3E7:
      case 0x3E8:
      case 0x3E9:
      case 0x3EA:
      case 0x3EB:
      case 0x3EC:
      case 0x3ED:
      case 0x3EE:
      case 0x3EF:
      case 0x3F0:
      case 0x3F1:
      case 0x3F2:
      case 0x3F3:
      case 0x3F4:
      case 0x3F5:
      case 0x3F6:
      case 0x3F7:
      case 0x3F8:
      case 0x3F9:
      case 0x3FA:
      case 0x3FB:
      case 0x3FC:
      case 0x3FD:
      case 0x3FE:
      case 0x3FF:
      case 0x400:
      case 0x401:
      case 0x402:
      case 0x403:
      case 0x404:
      case 0x405:
      case 0x406:
      case 0x407:
      case 0x408:
      case 0x279D:
      case 0x279E:
      case 0x279F:
      case 0x27A0:
      case 0x27A1:
      case 0x27A2:
      case 0x27A3:
      case 0x27A4:
      case 0x27A5:
      case 0x27A6:
      case 0x27A7:
      case 0x27A8:
      case 0x27A9:
      case 0x27AA:
      case 0x27AB:
      case 0x27AC:
      case 0x27AD:
      case 0x27AE:
      case 0x27AF:
      case 0x27B0:
      case 0x27B1:
      case 0x27B2:
      case 0x27B3:
      case 0x27B4:
      case 0x27B5:
      case 0x27B6:
      case 0x27B7:
      case 0x27B8:
      case 0x27B9:
      case 0x27BA:
      case 0x27BB:
      case 0x27BC:
      case 0x27BD:
      case 0x27BE:
      case 0x27BF:
      case 0x27C0:
      case 0x27C1:
      case 0x27C2:
      case 0x27C3:
      case 0x27C4:
      case 0x27C5:
      case 0x27C6:
      case 0x27C7:
      case 0x27C8:
      case 0x27C9:
      case 0x27CA:
      case 0x27CB:
      case 0x27CC:
      case 0x27CD:
      case 0x27CE:
      case 0x27CF:
      case 0x27D0:
      case 0x27D1:
      case 0x27D2:
      case 0x27D3:
      case 0x27D4:
      case 0x27D5:
      case 0x27D6:
      case 0x27D7:
      case 0x27D8:
      case 0x27D9:
      case 0x27DA:
      case 0x27DB:
      case 0x27DC:
      case 0x280D:
      case 0x280E:
      case 0x280F:
      case 0x2810:
      case 0x2811:
      case 0x2812:
      case 0x2813:
      case 0x2814:
      case 0x2815:
      case 0x2816:
      case 0x2817:
      case 0x2818:
      case 0x2819:
      case 0x281A:
      case 0x281B:
      case 0x281C:
      case 0x281D:
      case 0x281E:
      case 0x281F:
      case 0x2820:
      case 0x2821:
      case 0x2822:
      case 0x2823:
      case 0x2824:
      case 0x2825:
      case 0x2826:
      case 0x2827:
      case 0x2828:
      case 0x2829:
      case 0x282A:
      case 0x282B:
      case 0x282C:
      case 0x282D:
      case 0x282E:
      case 0x282F:
      case 0x2830:
      case 0x2831:
      case 0x2832:
      case 0x2833:
      case 0x2834:
      case 0x2835:
      case 0x2836:
      case 0x2837:
      case 0x2838:
      case 0x2839:
      case 0x283A:
      case 0x283B:
      case 0x283C:
      case 0x283D:
      case 0x283E:
      case 0x283F:
      case 0x2840:
      case 0x2841:
      case 0x2842:
      case 0x2843:
      case 0x2844:
      case 0x2845:
      case 0x2846:
      case 0x2847:
      case 0x2848:
      case 0x2849:
      case 0x284A:
      case 0x284B:
      case 0x284C:
        sub_1CBD8C400((uint64_t)a1, a2, a3, a4);
        break;
      case 0x409:
      case 0x40A:
      case 0x40B:
      case 0x40C:
      case 0x40D:
      case 0x40E:
      case 0x40F:
      case 0x410:
      case 0x411:
      case 0x412:
      case 0x413:
      case 0x414:
      case 0x415:
      case 0x416:
      case 0x417:
      case 0x418:
      case 0x419:
      case 0x41A:
      case 0x41B:
      case 0x41C:
      case 0x41D:
      case 0x41E:
      case 0x41F:
      case 0x420:
      case 0x421:
      case 0x422:
      case 0x423:
      case 0x424:
      case 0x425:
      case 0x426:
      case 0x427:
      case 0x428:
      case 0x284D:
      case 0x284E:
      case 0x284F:
      case 0x2850:
      case 0x2851:
      case 0x2852:
      case 0x2853:
      case 0x2854:
      case 0x2855:
      case 0x2856:
      case 0x2857:
      case 0x2858:
      case 0x2859:
      case 0x285A:
      case 0x285B:
      case 0x285C:
      case 0x285D:
      case 0x285E:
      case 0x285F:
      case 0x2860:
      case 0x2861:
      case 0x2862:
      case 0x2863:
      case 0x2864:
      case 0x2865:
      case 0x2866:
      case 0x2867:
      case 0x2868:
      case 0x2869:
      case 0x286A:
      case 0x286B:
      case 0x286C:
        sub_1CBD8E104((uint64_t)a1, a2, a3, a4);
        break;
      case 0x429:
      case 0x42A:
      case 0x42B:
      case 0x42C:
      case 0x42D:
      case 0x42E:
      case 0x42F:
      case 0x430:
      case 0x431:
      case 0x432:
      case 0x433:
      case 0x434:
      case 0x435:
      case 0x436:
      case 0x437:
      case 0x438:
      case 0x439:
      case 0x43A:
      case 0x43B:
      case 0x43C:
      case 0x43D:
      case 0x43E:
      case 0x43F:
      case 0x440:
      case 0x441:
      case 0x442:
      case 0x443:
      case 0x444:
      case 0x445:
      case 0x446:
      case 0x447:
      case 0x448:
      case 0x286D:
      case 0x286E:
      case 0x286F:
      case 0x2870:
      case 0x2871:
      case 0x2872:
      case 0x2873:
      case 0x2874:
      case 0x2875:
      case 0x2876:
      case 0x2877:
      case 0x2878:
      case 0x2879:
      case 0x287A:
      case 0x287B:
      case 0x287C:
      case 0x287D:
      case 0x287E:
      case 0x287F:
      case 0x2880:
      case 0x2881:
      case 0x2882:
      case 0x2883:
      case 0x2884:
      case 0x2885:
      case 0x2886:
      case 0x2887:
      case 0x2888:
      case 0x2889:
      case 0x288A:
      case 0x288B:
      case 0x288C:
        sub_1CBD8E2C8((uint64_t)a1, a2, a3, a4);
        break;
      case 0x449:
      case 0x44A:
      case 0x44B:
      case 0x44C:
      case 0x44D:
      case 0x44E:
      case 0x44F:
      case 0x450:
      case 0x451:
      case 0x452:
      case 0x453:
      case 0x454:
      case 0x455:
      case 0x456:
      case 0x457:
      case 0x458:
      case 0x459:
      case 0x45A:
      case 0x45B:
      case 0x45C:
      case 0x45D:
      case 0x45E:
      case 0x45F:
      case 0x460:
      case 0x461:
      case 0x462:
      case 0x463:
      case 0x464:
      case 0x465:
      case 0x466:
      case 0x467:
      case 0x468:
      case 0x288D:
      case 0x288E:
      case 0x288F:
      case 0x2890:
      case 0x2891:
      case 0x2892:
      case 0x2893:
      case 0x2894:
      case 0x2895:
      case 0x2896:
      case 0x2897:
      case 0x2898:
      case 0x2899:
      case 0x289A:
      case 0x289B:
      case 0x289C:
      case 0x289D:
      case 0x289E:
      case 0x289F:
      case 0x28A0:
      case 0x28A1:
      case 0x28A2:
      case 0x28A3:
      case 0x28A4:
      case 0x28A5:
      case 0x28A6:
      case 0x28A7:
      case 0x28A8:
      case 0x28A9:
      case 0x28AA:
      case 0x28AB:
      case 0x28AC:
        sub_1CBD8DBB4((uint64_t)a1, a2, a3, a4);
        break;
      case 0x469:
      case 0x46A:
      case 0x46B:
      case 0x46C:
      case 0x46D:
      case 0x46E:
      case 0x46F:
      case 0x470:
      case 0x471:
      case 0x472:
      case 0x473:
      case 0x474:
      case 0x475:
      case 0x476:
      case 0x477:
      case 0x478:
      case 0x479:
      case 0x47A:
      case 0x47B:
      case 0x47C:
      case 0x47D:
      case 0x47E:
      case 0x47F:
      case 0x480:
      case 0x481:
      case 0x482:
      case 0x483:
      case 0x484:
      case 0x485:
      case 0x486:
      case 0x487:
      case 0x488:
      case 0x489:
      case 0x48A:
      case 0x48B:
      case 0x48C:
      case 0x48D:
      case 0x48E:
      case 0x48F:
      case 0x490:
      case 0x491:
      case 0x492:
      case 0x493:
      case 0x494:
      case 0x495:
      case 0x496:
      case 0x497:
      case 0x498:
      case 0x499:
      case 0x49A:
      case 0x49B:
      case 0x49C:
      case 0x49D:
      case 0x49E:
      case 0x49F:
      case 0x4A0:
      case 0x4A1:
      case 0x4A2:
      case 0x4A3:
      case 0x4A4:
      case 0x4A5:
      case 0x4A6:
      case 0x4A7:
      case 0x4A8:
      case 0x4A9:
      case 0x4AA:
      case 0x4AB:
      case 0x4AC:
      case 0x4AD:
      case 0x4AE:
      case 0x4AF:
      case 0x4B0:
      case 0x4B1:
      case 0x4B2:
      case 0x4B3:
      case 0x4B4:
      case 0x4B5:
      case 0x4B6:
      case 0x4B7:
      case 0x4B8:
      case 0x4B9:
      case 0x4BA:
      case 0x4BB:
      case 0x4BC:
      case 0x4BD:
      case 0x4BE:
      case 0x4BF:
      case 0x4C0:
      case 0x4C1:
      case 0x4C2:
      case 0x4C3:
      case 0x4C4:
      case 0x4C5:
      case 0x4C6:
      case 0x4C7:
      case 0x4C8:
      case 0x4C9:
      case 0x4CA:
      case 0x4CB:
      case 0x4CC:
      case 0x4CD:
      case 0x4CE:
      case 0x4CF:
      case 0x4D0:
      case 0x4D1:
      case 0x4D2:
      case 0x4D3:
      case 0x4D4:
      case 0x4D5:
      case 0x4D6:
      case 0x4D7:
      case 0x4D8:
      case 0x4D9:
      case 0x4DA:
      case 0x4DB:
      case 0x4DC:
      case 0x4DD:
      case 0x4DE:
      case 0x4DF:
      case 0x4E0:
      case 0x4E1:
      case 0x4E2:
      case 0x4E3:
      case 0x4E4:
      case 0x4E5:
      case 0x4E6:
      case 0x4E7:
      case 0x4E8:
      case 0x4E9:
      case 0x4EA:
      case 0x4EB:
      case 0x4EC:
      case 0x4ED:
      case 0x4EE:
      case 0x4EF:
      case 0x4F0:
      case 0x4F1:
      case 0x4F2:
      case 0x4F3:
      case 0x4F4:
      case 0x4F5:
      case 0x4F6:
      case 0x4F7:
      case 0x4F8:
      case 0x4F9:
      case 0x4FA:
      case 0x4FB:
      case 0x4FC:
      case 0x4FD:
      case 0x4FE:
      case 0x4FF:
      case 0x500:
      case 0x501:
      case 0x502:
      case 0x503:
      case 0x504:
      case 0x505:
      case 0x506:
      case 0x507:
      case 0x508:
      case 0x509:
      case 0x50A:
      case 0x50B:
      case 0x50C:
      case 0x50D:
      case 0x50E:
      case 0x50F:
      case 0x510:
      case 0x511:
      case 0x512:
      case 0x513:
      case 0x514:
      case 0x515:
      case 0x516:
      case 0x517:
      case 0x518:
      case 0x519:
      case 0x51A:
      case 0x51B:
      case 0x51C:
      case 0x51D:
      case 0x51E:
      case 0x51F:
      case 0x520:
      case 0x521:
      case 0x522:
      case 0x523:
      case 0x524:
      case 0x525:
      case 0x526:
      case 0x527:
      case 0x528:
      case 0x529:
      case 0x52A:
      case 0x52B:
      case 0x52C:
      case 0x52D:
      case 0x52E:
      case 0x52F:
      case 0x530:
      case 0x531:
      case 0x532:
      case 0x533:
      case 0x534:
      case 0x535:
      case 0x536:
      case 0x537:
      case 0x538:
      case 0x539:
      case 0x53A:
      case 0x53B:
      case 0x53C:
      case 0x53D:
      case 0x53E:
      case 0x53F:
      case 0x540:
      case 0x541:
      case 0x542:
      case 0x543:
      case 0x544:
      case 0x545:
      case 0x546:
      case 0x547:
      case 0x548:
      case 0x549:
      case 0x54A:
      case 0x54B:
      case 0x54C:
      case 0x54D:
      case 0x54E:
      case 0x54F:
      case 0x550:
      case 0x551:
      case 0x552:
      case 0x553:
      case 0x554:
      case 0x555:
      case 0x556:
      case 0x557:
      case 0x558:
      case 0x559:
      case 0x55A:
      case 0x55B:
      case 0x55C:
      case 0x55D:
      case 0x55E:
      case 0x55F:
      case 0x560:
      case 0x561:
      case 0x562:
      case 0x563:
      case 0x564:
      case 0x565:
      case 0x566:
      case 0x567:
      case 0x568:
      case 0x769:
      case 0x76A:
      case 0x76B:
      case 0x76C:
      case 0x76D:
      case 0x76E:
      case 0x76F:
      case 0x770:
      case 0x771:
      case 0x772:
      case 0x773:
      case 0x774:
      case 0x775:
      case 0x776:
      case 0x777:
      case 0x778:
      case 0x779:
      case 0x77A:
      case 0x77B:
      case 0x77C:
      case 0x77D:
      case 0x77E:
      case 0x77F:
      case 0x780:
      case 0x781:
      case 0x782:
      case 0x783:
      case 0x784:
      case 0x785:
      case 0x786:
      case 0x787:
      case 0x788:
      case 0x789:
      case 0x78A:
      case 0x78B:
      case 0x78C:
      case 0x78D:
      case 0x78E:
      case 0x78F:
      case 0x790:
      case 0x791:
      case 0x792:
      case 0x793:
      case 0x794:
      case 0x795:
      case 0x796:
      case 0x797:
      case 0x798:
      case 0x799:
      case 0x79A:
      case 0x79B:
      case 0x79C:
      case 0x79D:
      case 0x79E:
      case 0x79F:
      case 0x7A0:
      case 0x7A1:
      case 0x7A2:
      case 0x7A3:
      case 0x7A4:
      case 0x7A5:
      case 0x7A6:
      case 0x7A7:
      case 0x7A8:
      case 0x7A9:
      case 0x7AA:
      case 0x7AB:
      case 0x7AC:
      case 0x7AD:
      case 0x7AE:
      case 0x7AF:
      case 0x7B0:
      case 0x7B1:
      case 0x7B2:
      case 0x7B3:
      case 0x7B4:
      case 0x7B5:
      case 0x7B6:
      case 0x7B7:
      case 0x7B8:
      case 0x7B9:
      case 0x7BA:
      case 0x7BB:
      case 0x7BC:
      case 0x7BD:
      case 0x7BE:
      case 0x7BF:
      case 0x7C0:
      case 0x7C1:
      case 0x7C2:
      case 0x7C3:
      case 0x7C4:
      case 0x7C5:
      case 0x7C6:
      case 0x7C7:
      case 0x7C8:
      case 0x7C9:
      case 0x7CA:
      case 0x7CB:
      case 0x7CC:
      case 0x7CD:
      case 0x7CE:
      case 0x7CF:
      case 0x7D0:
      case 0x7D1:
      case 0x7D2:
      case 0x7D3:
      case 0x7D4:
      case 0x7D5:
      case 0x7D6:
      case 0x7D7:
      case 0x7D8:
      case 0x7D9:
      case 0x7DA:
      case 0x7DB:
      case 0x7DC:
      case 0x7DD:
      case 0x7DE:
      case 0x7DF:
      case 0x7E0:
      case 0x7E1:
      case 0x7E2:
      case 0x7E3:
      case 0x7E4:
      case 0x7E5:
      case 0x7E6:
      case 0x7E7:
      case 0x7E8:
      case 0x7E9:
      case 0x7EA:
      case 0x7EB:
      case 0x7EC:
      case 0x7ED:
      case 0x7EE:
      case 0x7EF:
      case 0x7F0:
      case 0x7F1:
      case 0x7F2:
      case 0x7F3:
      case 0x7F4:
      case 0x7F5:
      case 0x7F6:
      case 0x7F7:
      case 0x7F8:
      case 0x7F9:
      case 0x7FA:
      case 0x7FB:
      case 0x7FC:
      case 0x7FD:
      case 0x7FE:
      case 0x7FF:
      case 0x800:
      case 0x801:
      case 0x802:
      case 0x803:
      case 0x804:
      case 0x805:
      case 0x806:
      case 0x807:
      case 0x808:
      case 0x809:
      case 0x80A:
      case 0x80B:
      case 0x80C:
      case 0x80D:
      case 0x80E:
      case 0x80F:
      case 0x810:
      case 0x811:
      case 0x812:
      case 0x813:
      case 0x814:
      case 0x815:
      case 0x816:
      case 0x817:
      case 0x818:
      case 0x819:
      case 0x81A:
      case 0x81B:
      case 0x81C:
      case 0x81D:
      case 0x81E:
      case 0x81F:
      case 0x820:
      case 0x821:
      case 0x822:
      case 0x823:
      case 0x824:
      case 0x825:
      case 0x826:
      case 0x827:
      case 0x828:
      case 0x829:
      case 0x82A:
      case 0x82B:
      case 0x82C:
      case 0x82D:
      case 0x82E:
      case 0x82F:
      case 0x830:
      case 0x831:
      case 0x832:
      case 0x833:
      case 0x834:
      case 0x835:
      case 0x836:
      case 0x837:
      case 0x838:
      case 0x839:
      case 0x83A:
      case 0x83B:
      case 0x83C:
      case 0x83D:
      case 0x83E:
      case 0x83F:
      case 0x840:
      case 0x841:
      case 0x842:
      case 0x843:
      case 0x844:
      case 0x845:
      case 0x846:
      case 0x847:
      case 0x848:
      case 0x849:
      case 0x84A:
      case 0x84B:
      case 0x84C:
      case 0x84D:
      case 0x84E:
      case 0x84F:
      case 0x850:
      case 0x851:
      case 0x852:
      case 0x853:
      case 0x854:
      case 0x855:
      case 0x856:
      case 0x857:
      case 0x858:
      case 0x859:
      case 0x85A:
      case 0x85B:
      case 0x85C:
      case 0x85D:
      case 0x85E:
      case 0x85F:
      case 0x860:
      case 0x861:
      case 0x862:
      case 0x863:
      case 0x864:
      case 0x865:
      case 0x866:
      case 0x867:
      case 0x868:
      case 0x28AD:
      case 0x28AE:
      case 0x28AF:
      case 0x28B0:
      case 0x28B1:
      case 0x28B2:
      case 0x28B3:
      case 0x28B4:
      case 0x28B5:
      case 0x28B6:
      case 0x28B7:
      case 0x28B8:
      case 0x28B9:
      case 0x28BA:
      case 0x28BB:
      case 0x28BC:
      case 0x28BD:
      case 0x28BE:
      case 0x28BF:
      case 0x28C0:
      case 0x28C1:
      case 0x28C2:
      case 0x28C3:
      case 0x28C4:
      case 0x28C5:
      case 0x28C6:
      case 0x28C7:
      case 0x28C8:
      case 0x28C9:
      case 0x28CA:
      case 0x28CB:
      case 0x28CC:
      case 0x28CD:
      case 0x28CE:
      case 0x28CF:
      case 0x28D0:
      case 0x28D1:
      case 0x28D2:
      case 0x28D3:
      case 0x28D4:
      case 0x28D5:
      case 0x28D6:
      case 0x28D7:
      case 0x28D8:
      case 0x28D9:
      case 0x28DA:
      case 0x28DB:
      case 0x28DC:
      case 0x28DD:
      case 0x28DE:
      case 0x28DF:
      case 0x28E0:
      case 0x28E1:
      case 0x28E2:
      case 0x28E3:
      case 0x28E4:
      case 0x28E5:
      case 0x28E6:
      case 0x28E7:
      case 0x28E8:
      case 0x28E9:
      case 0x28EA:
      case 0x28EB:
      case 0x28EC:
      case 0x28ED:
      case 0x28EE:
      case 0x28EF:
      case 0x28F0:
      case 0x28F1:
      case 0x28F2:
      case 0x28F3:
      case 0x28F4:
      case 0x28F5:
      case 0x28F6:
      case 0x28F7:
      case 0x28F8:
      case 0x28F9:
      case 0x28FA:
      case 0x28FB:
      case 0x28FC:
      case 0x28FD:
      case 0x28FE:
      case 0x28FF:
      case 0x2900:
      case 0x2901:
      case 0x2902:
      case 0x2903:
      case 0x2904:
      case 0x2905:
      case 0x2906:
      case 0x2907:
      case 0x2908:
      case 0x2909:
      case 0x290A:
      case 0x290B:
      case 0x290C:
      case 0x290D:
      case 0x290E:
      case 0x290F:
      case 0x2910:
      case 0x2911:
      case 0x2912:
      case 0x2913:
      case 0x2914:
      case 0x2915:
      case 0x2916:
      case 0x2917:
      case 0x2918:
      case 0x2919:
      case 0x291A:
      case 0x291B:
      case 0x291C:
      case 0x291D:
      case 0x291E:
      case 0x291F:
      case 0x2920:
      case 0x2921:
      case 0x2922:
      case 0x2923:
      case 0x2924:
      case 0x2925:
      case 0x2926:
      case 0x2927:
      case 0x2928:
      case 0x2929:
      case 0x292A:
      case 0x292B:
      case 0x292C:
      case 0x292D:
      case 0x292E:
      case 0x292F:
      case 0x2930:
      case 0x2931:
      case 0x2932:
      case 0x2933:
      case 0x2934:
      case 0x2935:
      case 0x2936:
      case 0x2937:
      case 0x2938:
      case 0x2939:
      case 0x293A:
      case 0x293B:
      case 0x293C:
      case 0x293D:
      case 0x293E:
      case 0x293F:
      case 0x2940:
      case 0x2941:
      case 0x2942:
      case 0x2943:
      case 0x2944:
      case 0x2945:
      case 0x2946:
      case 0x2947:
      case 0x2948:
      case 0x2949:
      case 0x294A:
      case 0x294B:
      case 0x294C:
      case 0x294D:
      case 0x294E:
      case 0x294F:
      case 0x2950:
      case 0x2951:
      case 0x2952:
      case 0x2953:
      case 0x2954:
      case 0x2955:
      case 0x2956:
      case 0x2957:
      case 0x2958:
      case 0x2959:
      case 0x295A:
      case 0x295B:
      case 0x295C:
      case 0x295D:
      case 0x295E:
      case 0x295F:
      case 0x2960:
      case 0x2961:
      case 0x2962:
      case 0x2963:
      case 0x2964:
      case 0x2965:
      case 0x2966:
      case 0x2967:
      case 0x2968:
      case 0x2969:
      case 0x296A:
      case 0x296B:
      case 0x296C:
      case 0x296D:
      case 0x296E:
      case 0x296F:
      case 0x2970:
      case 0x2971:
      case 0x2972:
      case 0x2973:
      case 0x2974:
      case 0x2975:
      case 0x2976:
      case 0x2977:
      case 0x2978:
      case 0x2979:
      case 0x297A:
      case 0x297B:
      case 0x297C:
      case 0x297D:
      case 0x297E:
      case 0x297F:
      case 0x2980:
      case 0x2981:
      case 0x2982:
      case 0x2983:
      case 0x2984:
      case 0x2985:
      case 0x2986:
      case 0x2987:
      case 0x2988:
      case 0x2989:
      case 0x298A:
      case 0x298B:
      case 0x298C:
      case 0x298D:
      case 0x298E:
      case 0x298F:
      case 0x2990:
      case 0x2991:
      case 0x2992:
      case 0x2993:
      case 0x2994:
      case 0x2995:
      case 0x2996:
      case 0x2997:
      case 0x2998:
      case 0x2999:
      case 0x299A:
      case 0x299B:
      case 0x299C:
      case 0x299D:
      case 0x299E:
      case 0x299F:
      case 0x29A0:
      case 0x29A1:
      case 0x29A2:
      case 0x29A3:
      case 0x29A4:
      case 0x29A5:
      case 0x29A6:
      case 0x29A7:
      case 0x29A8:
      case 0x29A9:
      case 0x29AA:
      case 0x29AB:
      case 0x29AC:
      case 0x2BAD:
      case 0x2BAE:
      case 0x2BAF:
      case 0x2BB0:
      case 0x2BB1:
      case 0x2BB2:
      case 0x2BB3:
      case 0x2BB4:
      case 0x2BB5:
      case 0x2BB6:
      case 0x2BB7:
      case 0x2BB8:
      case 0x2BB9:
      case 0x2BBA:
      case 0x2BBB:
      case 0x2BBC:
      case 0x2BBD:
      case 0x2BBE:
      case 0x2BBF:
      case 0x2BC0:
      case 0x2BC1:
      case 0x2BC2:
      case 0x2BC3:
      case 0x2BC4:
      case 0x2BC5:
      case 0x2BC6:
      case 0x2BC7:
      case 0x2BC8:
      case 0x2BC9:
      case 0x2BCA:
      case 0x2BCB:
      case 0x2BCC:
      case 0x2BCD:
      case 0x2BCE:
      case 0x2BCF:
      case 0x2BD0:
      case 0x2BD1:
      case 0x2BD2:
      case 0x2BD3:
      case 0x2BD4:
      case 0x2BD5:
      case 0x2BD6:
      case 0x2BD7:
      case 0x2BD8:
      case 0x2BD9:
      case 0x2BDA:
      case 0x2BDB:
      case 0x2BDC:
      case 0x2BDD:
      case 0x2BDE:
      case 0x2BDF:
      case 0x2BE0:
      case 0x2BE1:
      case 0x2BE2:
      case 0x2BE3:
      case 0x2BE4:
      case 0x2BE5:
      case 0x2BE6:
      case 0x2BE7:
      case 0x2BE8:
      case 0x2BE9:
      case 0x2BEA:
      case 0x2BEB:
      case 0x2BEC:
      case 0x2BED:
      case 0x2BEE:
      case 0x2BEF:
      case 0x2BF0:
      case 0x2BF1:
      case 0x2BF2:
      case 0x2BF3:
      case 0x2BF4:
      case 0x2BF5:
      case 0x2BF6:
      case 0x2BF7:
      case 0x2BF8:
      case 0x2BF9:
      case 0x2BFA:
      case 0x2BFB:
      case 0x2BFC:
      case 0x2BFD:
      case 0x2BFE:
      case 0x2BFF:
      case 0x2C00:
      case 0x2C01:
      case 0x2C02:
      case 0x2C03:
      case 0x2C04:
      case 0x2C05:
      case 0x2C06:
      case 0x2C07:
      case 0x2C08:
      case 0x2C09:
      case 0x2C0A:
      case 0x2C0B:
      case 0x2C0C:
      case 0x2C0D:
      case 0x2C0E:
      case 0x2C0F:
      case 0x2C10:
      case 0x2C11:
      case 0x2C12:
      case 0x2C13:
      case 0x2C14:
      case 0x2C15:
      case 0x2C16:
      case 0x2C17:
      case 0x2C18:
      case 0x2C19:
      case 0x2C1A:
      case 0x2C1B:
      case 0x2C1C:
      case 0x2C1D:
      case 0x2C1E:
      case 0x2C1F:
      case 0x2C20:
      case 0x2C21:
      case 0x2C22:
      case 0x2C23:
      case 0x2C24:
      case 0x2C25:
      case 0x2C26:
      case 0x2C27:
      case 0x2C28:
      case 0x2C29:
      case 0x2C2A:
      case 0x2C2B:
      case 0x2C2C:
      case 0x2C2D:
      case 0x2C2E:
      case 0x2C2F:
      case 0x2C30:
      case 0x2C31:
      case 0x2C32:
      case 0x2C33:
      case 0x2C34:
      case 0x2C35:
      case 0x2C36:
      case 0x2C37:
      case 0x2C38:
      case 0x2C39:
      case 0x2C3A:
      case 0x2C3B:
      case 0x2C3C:
      case 0x2C3D:
      case 0x2C3E:
      case 0x2C3F:
      case 0x2C40:
      case 0x2C41:
      case 0x2C42:
      case 0x2C43:
      case 0x2C44:
      case 0x2C45:
      case 0x2C46:
      case 0x2C47:
      case 0x2C48:
      case 0x2C49:
      case 0x2C4A:
      case 0x2C4B:
      case 0x2C4C:
      case 0x2C4D:
      case 0x2C4E:
      case 0x2C4F:
      case 0x2C50:
      case 0x2C51:
      case 0x2C52:
      case 0x2C53:
      case 0x2C54:
      case 0x2C55:
      case 0x2C56:
      case 0x2C57:
      case 0x2C58:
      case 0x2C59:
      case 0x2C5A:
      case 0x2C5B:
      case 0x2C5C:
      case 0x2C5D:
      case 0x2C5E:
      case 0x2C5F:
      case 0x2C60:
      case 0x2C61:
      case 0x2C62:
      case 0x2C63:
      case 0x2C64:
      case 0x2C65:
      case 0x2C66:
      case 0x2C67:
      case 0x2C68:
      case 0x2C69:
      case 0x2C6A:
      case 0x2C6B:
      case 0x2C6C:
      case 0x2C6D:
      case 0x2C6E:
      case 0x2C6F:
      case 0x2C70:
      case 0x2C71:
      case 0x2C72:
      case 0x2C73:
      case 0x2C74:
      case 0x2C75:
      case 0x2C76:
      case 0x2C77:
      case 0x2C78:
      case 0x2C79:
      case 0x2C7A:
      case 0x2C7B:
      case 0x2C7C:
      case 0x2C7D:
      case 0x2C7E:
      case 0x2C7F:
      case 0x2C80:
      case 0x2C81:
      case 0x2C82:
      case 0x2C83:
      case 0x2C84:
      case 0x2C85:
      case 0x2C86:
      case 0x2C87:
      case 0x2C88:
      case 0x2C89:
      case 0x2C8A:
      case 0x2C8B:
      case 0x2C8C:
      case 0x2C8D:
      case 0x2C8E:
      case 0x2C8F:
      case 0x2C90:
      case 0x2C91:
      case 0x2C92:
      case 0x2C93:
      case 0x2C94:
      case 0x2C95:
      case 0x2C96:
      case 0x2C97:
      case 0x2C98:
      case 0x2C99:
      case 0x2C9A:
      case 0x2C9B:
      case 0x2C9C:
      case 0x2C9D:
      case 0x2C9E:
      case 0x2C9F:
      case 0x2CA0:
      case 0x2CA1:
      case 0x2CA2:
      case 0x2CA3:
      case 0x2CA4:
      case 0x2CA5:
      case 0x2CA6:
      case 0x2CA7:
      case 0x2CA8:
      case 0x2CA9:
      case 0x2CAA:
      case 0x2CAB:
      case 0x2CAC:
        sub_1CBD8CDB8((uint64_t)a1, a2, a3, a4);
        break;
      case 0x569:
      case 0x56A:
      case 0x56B:
      case 0x56C:
      case 0x56D:
      case 0x56E:
      case 0x56F:
      case 0x570:
      case 0x571:
      case 0x572:
      case 0x573:
      case 0x574:
      case 0x575:
      case 0x576:
      case 0x577:
      case 0x578:
      case 0x579:
      case 0x57A:
      case 0x57B:
      case 0x57C:
      case 0x57D:
      case 0x57E:
      case 0x57F:
      case 0x580:
      case 0x581:
      case 0x582:
      case 0x583:
      case 0x584:
      case 0x585:
      case 0x586:
      case 0x587:
      case 0x588:
      case 0x589:
      case 0x58A:
      case 0x58B:
      case 0x58C:
      case 0x58D:
      case 0x58E:
      case 0x58F:
      case 0x590:
      case 0x591:
      case 0x592:
      case 0x593:
      case 0x594:
      case 0x595:
      case 0x596:
      case 0x597:
      case 0x598:
      case 0x599:
      case 0x59A:
      case 0x59B:
      case 0x59C:
      case 0x59D:
      case 0x59E:
      case 0x59F:
      case 0x5A0:
      case 0x5A1:
      case 0x5A2:
      case 0x5A3:
      case 0x5A4:
      case 0x5A5:
      case 0x5A6:
      case 0x5A7:
      case 0x5A8:
      case 0x5A9:
      case 0x5AA:
      case 0x5AB:
      case 0x5AC:
      case 0x5AD:
      case 0x5AE:
      case 0x5AF:
      case 0x5B0:
      case 0x5B1:
      case 0x5B2:
      case 0x5B3:
      case 0x5B4:
      case 0x5B5:
      case 0x5B6:
      case 0x5B7:
      case 0x5B8:
      case 0x5B9:
      case 0x5BA:
      case 0x5BB:
      case 0x5BC:
      case 0x5BD:
      case 0x5BE:
      case 0x5BF:
      case 0x5C0:
      case 0x5C1:
      case 0x5C2:
      case 0x5C3:
      case 0x5C4:
      case 0x5C5:
      case 0x5C6:
      case 0x5C7:
      case 0x5C8:
      case 0x5C9:
      case 0x5CA:
      case 0x5CB:
      case 0x5CC:
      case 0x5CD:
      case 0x5CE:
      case 0x5CF:
      case 0x5D0:
      case 0x5D1:
      case 0x5D2:
      case 0x5D3:
      case 0x5D4:
      case 0x5D5:
      case 0x5D6:
      case 0x5D7:
      case 0x5D8:
      case 0x5D9:
      case 0x5DA:
      case 0x5DB:
      case 0x5DC:
      case 0x5DD:
      case 0x5DE:
      case 0x5DF:
      case 0x5E0:
      case 0x5E1:
      case 0x5E2:
      case 0x5E3:
      case 0x5E4:
      case 0x5E5:
      case 0x5E6:
      case 0x5E7:
      case 0x5E8:
      case 0x5E9:
      case 0x5EA:
      case 0x5EB:
      case 0x5EC:
      case 0x5ED:
      case 0x5EE:
      case 0x5EF:
      case 0x5F0:
      case 0x5F1:
      case 0x5F2:
      case 0x5F3:
      case 0x5F4:
      case 0x5F5:
      case 0x5F6:
      case 0x5F7:
      case 0x5F8:
      case 0x5F9:
      case 0x5FA:
      case 0x5FB:
      case 0x5FC:
      case 0x5FD:
      case 0x5FE:
      case 0x5FF:
      case 0x600:
      case 0x601:
      case 0x602:
      case 0x603:
      case 0x604:
      case 0x605:
      case 0x606:
      case 0x607:
      case 0x608:
      case 0x609:
      case 0x60A:
      case 0x60B:
      case 0x60C:
      case 0x60D:
      case 0x60E:
      case 0x60F:
      case 0x610:
      case 0x611:
      case 0x612:
      case 0x613:
      case 0x614:
      case 0x615:
      case 0x616:
      case 0x617:
      case 0x618:
      case 0x619:
      case 0x61A:
      case 0x61B:
      case 0x61C:
      case 0x61D:
      case 0x61E:
      case 0x61F:
      case 0x620:
      case 0x621:
      case 0x622:
      case 0x623:
      case 0x624:
      case 0x625:
      case 0x626:
      case 0x627:
      case 0x628:
      case 0x629:
      case 0x62A:
      case 0x62B:
      case 0x62C:
      case 0x62D:
      case 0x62E:
      case 0x62F:
      case 0x630:
      case 0x631:
      case 0x632:
      case 0x633:
      case 0x634:
      case 0x635:
      case 0x636:
      case 0x637:
      case 0x638:
      case 0x639:
      case 0x63A:
      case 0x63B:
      case 0x63C:
      case 0x63D:
      case 0x63E:
      case 0x63F:
      case 0x640:
      case 0x641:
      case 0x642:
      case 0x643:
      case 0x644:
      case 0x645:
      case 0x646:
      case 0x647:
      case 0x648:
      case 0x649:
      case 0x64A:
      case 0x64B:
      case 0x64C:
      case 0x64D:
      case 0x64E:
      case 0x64F:
      case 0x650:
      case 0x651:
      case 0x652:
      case 0x653:
      case 0x654:
      case 0x655:
      case 0x656:
      case 0x657:
      case 0x658:
      case 0x659:
      case 0x65A:
      case 0x65B:
      case 0x65C:
      case 0x65D:
      case 0x65E:
      case 0x65F:
      case 0x660:
      case 0x661:
      case 0x662:
      case 0x663:
      case 0x664:
      case 0x665:
      case 0x666:
      case 0x667:
      case 0x668:
      case 0x669:
      case 0x66A:
      case 0x66B:
      case 0x66C:
      case 0x66D:
      case 0x66E:
      case 0x66F:
      case 0x670:
      case 0x671:
      case 0x672:
      case 0x673:
      case 0x674:
      case 0x675:
      case 0x676:
      case 0x677:
      case 0x678:
      case 0x679:
      case 0x67A:
      case 0x67B:
      case 0x67C:
      case 0x67D:
      case 0x67E:
      case 0x67F:
      case 0x680:
      case 0x681:
      case 0x682:
      case 0x683:
      case 0x684:
      case 0x685:
      case 0x686:
      case 0x687:
      case 0x688:
      case 0x689:
      case 0x68A:
      case 0x68B:
      case 0x68C:
      case 0x68D:
      case 0x68E:
      case 0x68F:
      case 0x690:
      case 0x691:
      case 0x692:
      case 0x693:
      case 0x694:
      case 0x695:
      case 0x696:
      case 0x697:
      case 0x698:
      case 0x699:
      case 0x69A:
      case 0x69B:
      case 0x69C:
      case 0x69D:
      case 0x69E:
      case 0x69F:
      case 0x6A0:
      case 0x6A1:
      case 0x6A2:
      case 0x6A3:
      case 0x6A4:
      case 0x6A5:
      case 0x6A6:
      case 0x6A7:
      case 0x6A8:
      case 0x6A9:
      case 0x6AA:
      case 0x6AB:
      case 0x6AC:
      case 0x6AD:
      case 0x6AE:
      case 0x6AF:
      case 0x6B0:
      case 0x6B1:
      case 0x6B2:
      case 0x6B3:
      case 0x6B4:
      case 0x6B5:
      case 0x6B6:
      case 0x6B7:
      case 0x6B8:
      case 0x6B9:
      case 0x6BA:
      case 0x6BB:
      case 0x6BC:
      case 0x6BD:
      case 0x6BE:
      case 0x6BF:
      case 0x6C0:
      case 0x6C1:
      case 0x6C2:
      case 0x6C3:
      case 0x6C4:
      case 0x6C5:
      case 0x6C6:
      case 0x6C7:
      case 0x6C8:
      case 0x6C9:
      case 0x6CA:
      case 0x6CB:
      case 0x6CC:
      case 0x6CD:
      case 0x6CE:
      case 0x6CF:
      case 0x6D0:
      case 0x6D1:
      case 0x6D2:
      case 0x6D3:
      case 0x6D4:
      case 0x6D5:
      case 0x6D6:
      case 0x6D7:
      case 0x6D8:
      case 0x6D9:
      case 0x6DA:
      case 0x6DB:
      case 0x6DC:
      case 0x6DD:
      case 0x6DE:
      case 0x6DF:
      case 0x6E0:
      case 0x6E1:
      case 0x6E2:
      case 0x6E3:
      case 0x6E4:
      case 0x6E5:
      case 0x6E6:
      case 0x6E7:
      case 0x6E8:
      case 0x6E9:
      case 0x6EA:
      case 0x6EB:
      case 0x6EC:
      case 0x6ED:
      case 0x6EE:
      case 0x6EF:
      case 0x6F0:
      case 0x6F1:
      case 0x6F2:
      case 0x6F3:
      case 0x6F4:
      case 0x6F5:
      case 0x6F6:
      case 0x6F7:
      case 0x6F8:
      case 0x6F9:
      case 0x6FA:
      case 0x6FB:
      case 0x6FC:
      case 0x6FD:
      case 0x6FE:
      case 0x6FF:
      case 0x700:
      case 0x701:
      case 0x702:
      case 0x703:
      case 0x704:
      case 0x705:
      case 0x706:
      case 0x707:
      case 0x708:
      case 0x709:
      case 0x70A:
      case 0x70B:
      case 0x70C:
      case 0x70D:
      case 0x70E:
      case 0x70F:
      case 0x710:
      case 0x711:
      case 0x712:
      case 0x713:
      case 0x714:
      case 0x715:
      case 0x716:
      case 0x717:
      case 0x718:
      case 0x719:
      case 0x71A:
      case 0x71B:
      case 0x71C:
      case 0x71D:
      case 0x71E:
      case 0x71F:
      case 0x720:
      case 0x721:
      case 0x722:
      case 0x723:
      case 0x724:
      case 0x725:
      case 0x726:
      case 0x727:
      case 0x728:
      case 0x729:
      case 0x72A:
      case 0x72B:
      case 0x72C:
      case 0x72D:
      case 0x72E:
      case 0x72F:
      case 0x730:
      case 0x731:
      case 0x732:
      case 0x733:
      case 0x734:
      case 0x735:
      case 0x736:
      case 0x737:
      case 0x738:
      case 0x739:
      case 0x73A:
      case 0x73B:
      case 0x73C:
      case 0x73D:
      case 0x73E:
      case 0x73F:
      case 0x740:
      case 0x741:
      case 0x742:
      case 0x743:
      case 0x744:
      case 0x745:
      case 0x746:
      case 0x747:
      case 0x748:
      case 0x749:
      case 0x74A:
      case 0x74B:
      case 0x74C:
      case 0x74D:
      case 0x74E:
      case 0x74F:
      case 0x750:
      case 0x751:
      case 0x752:
      case 0x753:
      case 0x754:
      case 0x755:
      case 0x756:
      case 0x757:
      case 0x758:
      case 0x759:
      case 0x75A:
      case 0x75B:
      case 0x75C:
      case 0x75D:
      case 0x75E:
      case 0x75F:
      case 0x760:
      case 0x761:
      case 0x762:
      case 0x763:
      case 0x764:
      case 0x765:
      case 0x766:
      case 0x767:
      case 0x768:
      case 0x29AD:
      case 0x29AE:
      case 0x29AF:
      case 0x29B0:
      case 0x29B1:
      case 0x29B2:
      case 0x29B3:
      case 0x29B4:
      case 0x29B5:
      case 0x29B6:
      case 0x29B7:
      case 0x29B8:
      case 0x29B9:
      case 0x29BA:
      case 0x29BB:
      case 0x29BC:
      case 0x29BD:
      case 0x29BE:
      case 0x29BF:
      case 0x29C0:
      case 0x29C1:
      case 0x29C2:
      case 0x29C3:
      case 0x29C4:
      case 0x29C5:
      case 0x29C6:
      case 0x29C7:
      case 0x29C8:
      case 0x29C9:
      case 0x29CA:
      case 0x29CB:
      case 0x29CC:
      case 0x29CD:
      case 0x29CE:
      case 0x29CF:
      case 0x29D0:
      case 0x29D1:
      case 0x29D2:
      case 0x29D3:
      case 0x29D4:
      case 0x29D5:
      case 0x29D6:
      case 0x29D7:
      case 0x29D8:
      case 0x29D9:
      case 0x29DA:
      case 0x29DB:
      case 0x29DC:
      case 0x29DD:
      case 0x29DE:
      case 0x29DF:
      case 0x29E0:
      case 0x29E1:
      case 0x29E2:
      case 0x29E3:
      case 0x29E4:
      case 0x29E5:
      case 0x29E6:
      case 0x29E7:
      case 0x29E8:
      case 0x29E9:
      case 0x29EA:
      case 0x29EB:
      case 0x29EC:
      case 0x29ED:
      case 0x29EE:
      case 0x29EF:
      case 0x29F0:
      case 0x29F1:
      case 0x29F2:
      case 0x29F3:
      case 0x29F4:
      case 0x29F5:
      case 0x29F6:
      case 0x29F7:
      case 0x29F8:
      case 0x29F9:
      case 0x29FA:
      case 0x29FB:
      case 0x29FC:
      case 0x29FD:
      case 0x29FE:
      case 0x29FF:
      case 0x2A00:
      case 0x2A01:
      case 0x2A02:
      case 0x2A03:
      case 0x2A04:
      case 0x2A05:
      case 0x2A06:
      case 0x2A07:
      case 0x2A08:
      case 0x2A09:
      case 0x2A0A:
      case 0x2A0B:
      case 0x2A0C:
      case 0x2A0D:
      case 0x2A0E:
      case 0x2A0F:
      case 0x2A10:
      case 0x2A11:
      case 0x2A12:
      case 0x2A13:
      case 0x2A14:
      case 0x2A15:
      case 0x2A16:
      case 0x2A17:
      case 0x2A18:
      case 0x2A19:
      case 0x2A1A:
      case 0x2A1B:
      case 0x2A1C:
      case 0x2A1D:
      case 0x2A1E:
      case 0x2A1F:
      case 0x2A20:
      case 0x2A21:
      case 0x2A22:
      case 0x2A23:
      case 0x2A24:
      case 0x2A25:
      case 0x2A26:
      case 0x2A27:
      case 0x2A28:
      case 0x2A29:
      case 0x2A2A:
      case 0x2A2B:
      case 0x2A2C:
      case 0x2A2D:
      case 0x2A2E:
      case 0x2A2F:
      case 0x2A30:
      case 0x2A31:
      case 0x2A32:
      case 0x2A33:
      case 0x2A34:
      case 0x2A35:
      case 0x2A36:
      case 0x2A37:
      case 0x2A38:
      case 0x2A39:
      case 0x2A3A:
      case 0x2A3B:
      case 0x2A3C:
      case 0x2A3D:
      case 0x2A3E:
      case 0x2A3F:
      case 0x2A40:
      case 0x2A41:
      case 0x2A42:
      case 0x2A43:
      case 0x2A44:
      case 0x2A45:
      case 0x2A46:
      case 0x2A47:
      case 0x2A48:
      case 0x2A49:
      case 0x2A4A:
      case 0x2A4B:
      case 0x2A4C:
      case 0x2A4D:
      case 0x2A4E:
      case 0x2A4F:
      case 0x2A50:
      case 0x2A51:
      case 0x2A52:
      case 0x2A53:
      case 0x2A54:
      case 0x2A55:
      case 0x2A56:
      case 0x2A57:
      case 0x2A58:
      case 0x2A59:
      case 0x2A5A:
      case 0x2A5B:
      case 0x2A5C:
      case 0x2A5D:
      case 0x2A5E:
      case 0x2A5F:
      case 0x2A60:
      case 0x2A61:
      case 0x2A62:
      case 0x2A63:
      case 0x2A64:
      case 0x2A65:
      case 0x2A66:
      case 0x2A67:
      case 0x2A68:
      case 0x2A69:
      case 0x2A6A:
      case 0x2A6B:
      case 0x2A6C:
      case 0x2A6D:
      case 0x2A6E:
      case 0x2A6F:
      case 0x2A70:
      case 0x2A71:
      case 0x2A72:
      case 0x2A73:
      case 0x2A74:
      case 0x2A75:
      case 0x2A76:
      case 0x2A77:
      case 0x2A78:
      case 0x2A79:
      case 0x2A7A:
      case 0x2A7B:
      case 0x2A7C:
      case 0x2A7D:
      case 0x2A7E:
      case 0x2A7F:
      case 0x2A80:
      case 0x2A81:
      case 0x2A82:
      case 0x2A83:
      case 0x2A84:
      case 0x2A85:
      case 0x2A86:
      case 0x2A87:
      case 0x2A88:
      case 0x2A89:
      case 0x2A8A:
      case 0x2A8B:
      case 0x2A8C:
      case 0x2A8D:
      case 0x2A8E:
      case 0x2A8F:
      case 0x2A90:
      case 0x2A91:
      case 0x2A92:
      case 0x2A93:
      case 0x2A94:
      case 0x2A95:
      case 0x2A96:
      case 0x2A97:
      case 0x2A98:
      case 0x2A99:
      case 0x2A9A:
      case 0x2A9B:
      case 0x2A9C:
      case 0x2A9D:
      case 0x2A9E:
      case 0x2A9F:
      case 0x2AA0:
      case 0x2AA1:
      case 0x2AA2:
      case 0x2AA3:
      case 0x2AA4:
      case 0x2AA5:
      case 0x2AA6:
      case 0x2AA7:
      case 0x2AA8:
      case 0x2AA9:
      case 0x2AAA:
      case 0x2AAB:
      case 0x2AAC:
      case 0x2AAD:
      case 0x2AAE:
      case 0x2AAF:
      case 0x2AB0:
      case 0x2AB1:
      case 0x2AB2:
      case 0x2AB3:
      case 0x2AB4:
      case 0x2AB5:
      case 0x2AB6:
      case 0x2AB7:
      case 0x2AB8:
      case 0x2AB9:
      case 0x2ABA:
      case 0x2ABB:
      case 0x2ABC:
      case 0x2ABD:
      case 0x2ABE:
      case 0x2ABF:
      case 0x2AC0:
      case 0x2AC1:
      case 0x2AC2:
      case 0x2AC3:
      case 0x2AC4:
      case 0x2AC5:
      case 0x2AC6:
      case 0x2AC7:
      case 0x2AC8:
      case 0x2AC9:
      case 0x2ACA:
      case 0x2ACB:
      case 0x2ACC:
      case 0x2ACD:
      case 0x2ACE:
      case 0x2ACF:
      case 0x2AD0:
      case 0x2AD1:
      case 0x2AD2:
      case 0x2AD3:
      case 0x2AD4:
      case 0x2AD5:
      case 0x2AD6:
      case 0x2AD7:
      case 0x2AD8:
      case 0x2AD9:
      case 0x2ADA:
      case 0x2ADB:
      case 0x2ADC:
      case 0x2ADD:
      case 0x2ADE:
      case 0x2ADF:
      case 0x2AE0:
      case 0x2AE1:
      case 0x2AE2:
      case 0x2AE3:
      case 0x2AE4:
      case 0x2AE5:
      case 0x2AE6:
      case 0x2AE7:
      case 0x2AE8:
      case 0x2AE9:
      case 0x2AEA:
      case 0x2AEB:
      case 0x2AEC:
      case 0x2AED:
      case 0x2AEE:
      case 0x2AEF:
      case 0x2AF0:
      case 0x2AF1:
      case 0x2AF2:
      case 0x2AF3:
      case 0x2AF4:
      case 0x2AF5:
      case 0x2AF6:
      case 0x2AF7:
      case 0x2AF8:
      case 0x2AF9:
      case 0x2AFA:
      case 0x2AFB:
      case 0x2AFC:
      case 0x2AFD:
      case 0x2AFE:
      case 0x2AFF:
      case 0x2B00:
      case 0x2B01:
      case 0x2B02:
      case 0x2B03:
      case 0x2B04:
      case 0x2B05:
      case 0x2B06:
      case 0x2B07:
      case 0x2B08:
      case 0x2B09:
      case 0x2B0A:
      case 0x2B0B:
      case 0x2B0C:
      case 0x2B0D:
      case 0x2B0E:
      case 0x2B0F:
      case 0x2B10:
      case 0x2B11:
      case 0x2B12:
      case 0x2B13:
      case 0x2B14:
      case 0x2B15:
      case 0x2B16:
      case 0x2B17:
      case 0x2B18:
      case 0x2B19:
      case 0x2B1A:
      case 0x2B1B:
      case 0x2B1C:
      case 0x2B1D:
      case 0x2B1E:
      case 0x2B1F:
      case 0x2B20:
      case 0x2B21:
      case 0x2B22:
      case 0x2B23:
      case 0x2B24:
      case 0x2B25:
      case 0x2B26:
      case 0x2B27:
      case 0x2B28:
      case 0x2B29:
      case 0x2B2A:
      case 0x2B2B:
      case 0x2B2C:
      case 0x2B2D:
      case 0x2B2E:
      case 0x2B2F:
      case 0x2B30:
      case 0x2B31:
      case 0x2B32:
      case 0x2B33:
      case 0x2B34:
      case 0x2B35:
      case 0x2B36:
      case 0x2B37:
      case 0x2B38:
      case 0x2B39:
      case 0x2B3A:
      case 0x2B3B:
      case 0x2B3C:
      case 0x2B3D:
      case 0x2B3E:
      case 0x2B3F:
      case 0x2B40:
      case 0x2B41:
      case 0x2B42:
      case 0x2B43:
      case 0x2B44:
      case 0x2B45:
      case 0x2B46:
      case 0x2B47:
      case 0x2B48:
      case 0x2B49:
      case 0x2B4A:
      case 0x2B4B:
      case 0x2B4C:
      case 0x2B4D:
      case 0x2B4E:
      case 0x2B4F:
      case 0x2B50:
      case 0x2B51:
      case 0x2B52:
      case 0x2B53:
      case 0x2B54:
      case 0x2B55:
      case 0x2B56:
      case 0x2B57:
      case 0x2B58:
      case 0x2B59:
      case 0x2B5A:
      case 0x2B5B:
      case 0x2B5C:
      case 0x2B5D:
      case 0x2B5E:
      case 0x2B5F:
      case 0x2B60:
      case 0x2B61:
      case 0x2B62:
      case 0x2B63:
      case 0x2B64:
      case 0x2B65:
      case 0x2B66:
      case 0x2B67:
      case 0x2B68:
      case 0x2B69:
      case 0x2B6A:
      case 0x2B6B:
      case 0x2B6C:
      case 0x2B6D:
      case 0x2B6E:
      case 0x2B6F:
      case 0x2B70:
      case 0x2B71:
      case 0x2B72:
      case 0x2B73:
      case 0x2B74:
      case 0x2B75:
      case 0x2B76:
      case 0x2B77:
      case 0x2B78:
      case 0x2B79:
      case 0x2B7A:
      case 0x2B7B:
      case 0x2B7C:
      case 0x2B7D:
      case 0x2B7E:
      case 0x2B7F:
      case 0x2B80:
      case 0x2B81:
      case 0x2B82:
      case 0x2B83:
      case 0x2B84:
      case 0x2B85:
      case 0x2B86:
      case 0x2B87:
      case 0x2B88:
      case 0x2B89:
      case 0x2B8A:
      case 0x2B8B:
      case 0x2B8C:
      case 0x2B8D:
      case 0x2B8E:
      case 0x2B8F:
      case 0x2B90:
      case 0x2B91:
      case 0x2B92:
      case 0x2B93:
      case 0x2B94:
      case 0x2B95:
      case 0x2B96:
      case 0x2B97:
      case 0x2B98:
      case 0x2B99:
      case 0x2B9A:
      case 0x2B9B:
      case 0x2B9C:
      case 0x2B9D:
      case 0x2B9E:
      case 0x2B9F:
      case 0x2BA0:
      case 0x2BA1:
      case 0x2BA2:
      case 0x2BA3:
      case 0x2BA4:
      case 0x2BA5:
      case 0x2BA6:
      case 0x2BA7:
      case 0x2BA8:
      case 0x2BA9:
      case 0x2BAA:
      case 0x2BAB:
      case 0x2BAC:
        sub_1CD436954((uint64_t)a1, a2, a3, a4);
        break;
      case 0x869:
      case 0x86A:
      case 0x86B:
      case 0x86C:
      case 0x86D:
      case 0x86E:
      case 0x86F:
      case 0x870:
      case 0x871:
      case 0x872:
      case 0x873:
      case 0x874:
      case 0x875:
      case 0x876:
      case 0x877:
      case 0x878:
      case 0x879:
      case 0x87A:
      case 0x87B:
      case 0x87C:
      case 0x87D:
      case 0x87E:
      case 0x87F:
      case 0x880:
      case 0x881:
      case 0x882:
      case 0x883:
      case 0x884:
      case 0x885:
      case 0x886:
      case 0x887:
      case 0x888:
      case 0x889:
      case 0x88A:
      case 0x88B:
      case 0x88C:
      case 0x2CAD:
      case 0x2CAE:
      case 0x2CAF:
      case 0x2CB0:
      case 0x2CB1:
      case 0x2CB2:
      case 0x2CB3:
      case 0x2CB4:
      case 0x2CB5:
      case 0x2CB6:
      case 0x2CB7:
      case 0x2CB8:
      case 0x2CB9:
      case 0x2CBA:
      case 0x2CBB:
      case 0x2CBC:
      case 0x2CBD:
      case 0x2CBE:
      case 0x2CBF:
      case 0x2CC0:
      case 0x2CC1:
      case 0x2CC2:
      case 0x2CC3:
      case 0x2CC4:
      case 0x2CC5:
      case 0x2CC6:
      case 0x2CC7:
      case 0x2CC8:
      case 0x2CC9:
      case 0x2CCA:
      case 0x2CCB:
      case 0x2CCC:
      case 0x2CCD:
      case 0x2CCE:
      case 0x2CCF:
      case 0x2CD0:
        sub_1CBD9BCF8((uint64_t)a1, a2, a3, a4);
        break;
      case 0x88D:
      case 0x88E:
      case 0x88F:
      case 0x890:
      case 0x891:
      case 0x892:
      case 0x893:
      case 0x894:
      case 0x895:
      case 0x896:
      case 0x897:
      case 0x898:
      case 0x899:
      case 0x89A:
      case 0x89B:
      case 0x89C:
      case 0x89D:
      case 0x89E:
      case 0x2CD1:
      case 0x2CD2:
      case 0x2CD3:
      case 0x2CD4:
      case 0x2CD5:
      case 0x2CD6:
      case 0x2CD7:
      case 0x2CD8:
      case 0x2CD9:
      case 0x2CDA:
      case 0x2CDB:
      case 0x2CDC:
      case 0x2CDD:
      case 0x2CDE:
      case 0x2CDF:
      case 0x2CE0:
      case 0x2CE1:
      case 0x2CE2:
        sub_1CBD9B9E0((uint64_t)a1, a2, a3, a4);
        break;
      case 0x89F:
      case 0x8A0:
      case 0x8A1:
      case 0x8A2:
      case 0x8A3:
      case 0x8A4:
      case 0x8A5:
      case 0x8A6:
      case 0x8A7:
      case 0x8A8:
      case 0x8A9:
      case 0x8AA:
      case 0x8AB:
      case 0x8AC:
      case 0x8AD:
      case 0x8AE:
      case 0x8AF:
      case 0x8B0:
      case 0x2CE3:
      case 0x2CE4:
      case 0x2CE5:
      case 0x2CE6:
      case 0x2CE7:
      case 0x2CE8:
      case 0x2CE9:
      case 0x2CEA:
      case 0x2CEB:
      case 0x2CEC:
      case 0x2CED:
      case 0x2CEE:
      case 0x2CEF:
      case 0x2CF0:
      case 0x2CF1:
      case 0x2CF2:
      case 0x2CF3:
      case 0x2CF4:
        sub_1CD43B1B4((uint64_t)a1, a2, a3, a4);
        break;
      case 0x8B1:
      case 0x8B3:
      case 0x8B4:
      case 0x8B6:
      case 0x8B7:
      case 0x8B9:
      case 0x8BA:
      case 0x8BC:
      case 0x8BD:
      case 0x8BF:
      case 0x8C0:
      case 0x8C2:
      case 0x8C3:
      case 0x8C5:
      case 0x8C6:
      case 0x8C8:
      case 0x8C9:
      case 0x8CB:
      case 0x2CF5:
      case 0x2CF7:
      case 0x2CF8:
      case 0x2CFA:
      case 0x2CFB:
      case 0x2CFD:
      case 0x2CFE:
      case 0x2D00:
      case 0x2D01:
      case 0x2D03:
      case 0x2D04:
      case 0x2D06:
      case 0x2D07:
      case 0x2D09:
      case 0x2D0A:
      case 0x2D0C:
      case 0x2D0D:
      case 0x2D0F:
        sub_1CBD966B0(a1, a2, a3, a4);
        break;
      case 0x8B2:
      case 0x8B5:
      case 0x8BB:
      case 0x8BE:
      case 0x8C1:
      case 0x8C4:
      case 0x2CF6:
      case 0x2CF9:
      case 0x2CFF:
      case 0x2D02:
      case 0x2D05:
      case 0x2D08:
        sub_1CBD964B8(a1, a2, a3, a4);
        break;
      case 0x8B8:
      case 0x8C7:
      case 0x8CA:
      case 0x2CFC:
      case 0x2D0B:
      case 0x2D0E:
        sub_1CD439DC4(a1, a2, a3, a4);
        break;
      case 0x8CC:
      case 0x8CD:
      case 0x8CE:
      case 0x8CF:
      case 0x8D0:
      case 0x8D1:
      case 0x8D2:
      case 0x8D3:
      case 0x8D4:
      case 0x8D5:
      case 0x8D6:
      case 0x8D7:
      case 0x8D8:
      case 0x8D9:
      case 0x8DA:
      case 0x8DB:
      case 0x8DC:
      case 0x8DD:
      case 0x8DE:
      case 0x8DF:
      case 0x8E0:
      case 0x8E1:
      case 0x8E2:
      case 0x8E3:
      case 0x8E4:
      case 0x8E5:
      case 0x8E6:
      case 0x8E7:
      case 0x8E8:
      case 0x8E9:
      case 0x8EA:
      case 0x8EB:
      case 0x2D10:
      case 0x2D11:
      case 0x2D12:
      case 0x2D13:
      case 0x2D14:
      case 0x2D15:
      case 0x2D16:
      case 0x2D17:
      case 0x2D18:
      case 0x2D19:
      case 0x2D1A:
      case 0x2D1B:
      case 0x2D1C:
      case 0x2D1D:
      case 0x2D1E:
      case 0x2D1F:
      case 0x2D20:
      case 0x2D21:
      case 0x2D22:
      case 0x2D23:
      case 0x2D24:
      case 0x2D25:
      case 0x2D26:
      case 0x2D27:
      case 0x2D28:
      case 0x2D29:
      case 0x2D2A:
      case 0x2D2B:
      case 0x2D2C:
      case 0x2D2D:
      case 0x2D2E:
      case 0x2D2F:
        sub_1CBD8D9F0((uint64_t)a1, a2, a3, a4);
        break;
      case 0x8EC:
      case 0x8ED:
      case 0x8EE:
      case 0x8EF:
      case 0x8F0:
      case 0x8F1:
      case 0x8F2:
      case 0x8F3:
      case 0x8F4:
      case 0x8F5:
      case 0x8F6:
      case 0x8F7:
      case 0x8F8:
      case 0x8F9:
      case 0x8FA:
      case 0x8FB:
      case 0x8FC:
      case 0x8FD:
      case 0x8FE:
      case 0x8FF:
      case 0x900:
      case 0x901:
      case 0x902:
      case 0x903:
      case 0x904:
      case 0x905:
      case 0x906:
      case 0x907:
      case 0x908:
      case 0x909:
      case 0x90A:
      case 0x90B:
      case 0x90C:
      case 0x90D:
      case 0x90E:
      case 0x90F:
      case 0x910:
      case 0x911:
      case 0x912:
      case 0x913:
      case 0x914:
      case 0x915:
      case 0x916:
      case 0x917:
      case 0x918:
      case 0x919:
      case 0x91A:
      case 0x91B:
      case 0x91C:
      case 0x91D:
      case 0x91E:
      case 0x91F:
      case 0x920:
      case 0x921:
      case 0x922:
      case 0x923:
      case 0x924:
      case 0x925:
      case 0x926:
      case 0x927:
      case 0x928:
      case 0x929:
      case 0x92A:
      case 0x92B:
      case 0x92C:
      case 0x92D:
      case 0x92E:
      case 0x92F:
      case 0x930:
      case 0x931:
      case 0x932:
      case 0x933:
      case 0x934:
      case 0x935:
      case 0x936:
      case 0x937:
      case 0x938:
      case 0x939:
      case 0x93A:
      case 0x93B:
      case 0x93C:
      case 0x93D:
      case 0x93E:
      case 0x93F:
      case 0x940:
      case 0x941:
      case 0x942:
      case 0x943:
      case 0x944:
      case 0x945:
      case 0x946:
      case 0x947:
      case 0x948:
      case 0x949:
      case 0x94A:
      case 0x94B:
      case 0x94C:
      case 0x94D:
      case 0x94E:
      case 0x94F:
      case 0x950:
      case 0x951:
      case 0x952:
      case 0x953:
      case 0x954:
      case 0x955:
      case 0x956:
      case 0x957:
      case 0x958:
      case 0x959:
      case 0x95A:
      case 0x95B:
      case 0x95C:
      case 0x95D:
      case 0x95E:
      case 0x95F:
      case 0x960:
      case 0x961:
      case 0x962:
      case 0x963:
      case 0x964:
      case 0x965:
      case 0x966:
      case 0x967:
      case 0x968:
      case 0x969:
      case 0x96A:
      case 0x96B:
      case 0x96C:
      case 0x96D:
      case 0x96E:
      case 0x96F:
      case 0x970:
      case 0x971:
      case 0x972:
      case 0x973:
      case 0x974:
      case 0x975:
      case 0x976:
      case 0x977:
      case 0x978:
      case 0x979:
      case 0x97A:
      case 0x97B:
      case 0x97C:
      case 0x97D:
      case 0x97E:
      case 0x97F:
      case 0x980:
      case 0x981:
      case 0x982:
      case 0x983:
      case 0x984:
      case 0x985:
      case 0x986:
      case 0x987:
      case 0x988:
      case 0x989:
      case 0x98A:
      case 0x98B:
      case 0x98C:
      case 0x98D:
      case 0x98E:
      case 0x98F:
      case 0x990:
      case 0x991:
      case 0x992:
      case 0x993:
      case 0x994:
      case 0x995:
      case 0x996:
      case 0x997:
      case 0x998:
      case 0x999:
      case 0x99A:
      case 0x99B:
      case 0x99C:
      case 0x99D:
      case 0x99E:
      case 0x99F:
      case 0x9A0:
      case 0x9A1:
      case 0x9A2:
      case 0x9A3:
      case 0x9A4:
      case 0x9A5:
      case 0x9A6:
      case 0x9A7:
      case 0x9A8:
      case 0x9A9:
      case 0x9AA:
      case 0x9AB:
      case 0x9AC:
      case 0x9AD:
      case 0x9AE:
      case 0x9AF:
      case 0x9B0:
      case 0x9B1:
      case 0x9B2:
      case 0x9B3:
      case 0x9B4:
      case 0x9B5:
      case 0x9B6:
      case 0x9B7:
      case 0x9B8:
      case 0x9B9:
      case 0x9BA:
      case 0x9BB:
      case 0x9BC:
      case 0x9BD:
      case 0x9BE:
      case 0x9BF:
      case 0x9C0:
      case 0x9C1:
      case 0x9C2:
      case 0x9C3:
      case 0x9C4:
      case 0x9C5:
      case 0x9C6:
      case 0x9C7:
      case 0x9C8:
      case 0x9C9:
      case 0x9CA:
      case 0x9CB:
      case 0x9CC:
      case 0x9CD:
      case 0x9CE:
      case 0x9CF:
      case 0x9D0:
      case 0x9D1:
      case 0x9D2:
      case 0x9D3:
      case 0x9D4:
      case 0x9D5:
      case 0x9D6:
      case 0x9D7:
      case 0x9D8:
      case 0x9D9:
      case 0x9DA:
      case 0x9DB:
      case 0x9DC:
      case 0x9DD:
      case 0x9DE:
      case 0x9DF:
      case 0x9E0:
      case 0x9E1:
      case 0x9E2:
      case 0x9E3:
      case 0x9E4:
      case 0x9E5:
      case 0x9E6:
      case 0x9E7:
      case 0x9E8:
      case 0x9E9:
      case 0x9EA:
      case 0x9EB:
      case 0x2D30:
      case 0x2D31:
      case 0x2D32:
      case 0x2D33:
      case 0x2D34:
      case 0x2D35:
      case 0x2D36:
      case 0x2D37:
      case 0x2D38:
      case 0x2D39:
      case 0x2D3A:
      case 0x2D3B:
      case 0x2D3C:
      case 0x2D3D:
      case 0x2D3E:
      case 0x2D3F:
      case 0x2D40:
      case 0x2D41:
      case 0x2D42:
      case 0x2D43:
      case 0x2D44:
      case 0x2D45:
      case 0x2D46:
      case 0x2D47:
      case 0x2D48:
      case 0x2D49:
      case 0x2D4A:
      case 0x2D4B:
      case 0x2D4C:
      case 0x2D4D:
      case 0x2D4E:
      case 0x2D4F:
      case 0x2D50:
      case 0x2D51:
      case 0x2D52:
      case 0x2D53:
      case 0x2D54:
      case 0x2D55:
      case 0x2D56:
      case 0x2D57:
      case 0x2D58:
      case 0x2D59:
      case 0x2D5A:
      case 0x2D5B:
      case 0x2D5C:
      case 0x2D5D:
      case 0x2D5E:
      case 0x2D5F:
      case 0x2D60:
      case 0x2D61:
      case 0x2D62:
      case 0x2D63:
      case 0x2D64:
      case 0x2D65:
      case 0x2D66:
      case 0x2D67:
      case 0x2D68:
      case 0x2D69:
      case 0x2D6A:
      case 0x2D6B:
      case 0x2D6C:
      case 0x2D6D:
      case 0x2D6E:
      case 0x2D6F:
      case 0x2D70:
      case 0x2D71:
      case 0x2D72:
      case 0x2D73:
      case 0x2D74:
      case 0x2D75:
      case 0x2D76:
      case 0x2D77:
      case 0x2D78:
      case 0x2D79:
      case 0x2D7A:
      case 0x2D7B:
      case 0x2D7C:
      case 0x2D7D:
      case 0x2D7E:
      case 0x2D7F:
      case 0x2D80:
      case 0x2D81:
      case 0x2D82:
      case 0x2D83:
      case 0x2D84:
      case 0x2D85:
      case 0x2D86:
      case 0x2D87:
      case 0x2D88:
      case 0x2D89:
      case 0x2D8A:
      case 0x2D8B:
      case 0x2D8C:
      case 0x2D8D:
      case 0x2D8E:
      case 0x2D8F:
      case 0x2D90:
      case 0x2D91:
      case 0x2D92:
      case 0x2D93:
      case 0x2D94:
      case 0x2D95:
      case 0x2D96:
      case 0x2D97:
      case 0x2D98:
      case 0x2D99:
      case 0x2D9A:
      case 0x2D9B:
      case 0x2D9C:
      case 0x2D9D:
      case 0x2D9E:
      case 0x2D9F:
      case 0x2DA0:
      case 0x2DA1:
      case 0x2DA2:
      case 0x2DA3:
      case 0x2DA4:
      case 0x2DA5:
      case 0x2DA6:
      case 0x2DA7:
      case 0x2DA8:
      case 0x2DA9:
      case 0x2DAA:
      case 0x2DAB:
      case 0x2DAC:
      case 0x2DAD:
      case 0x2DAE:
      case 0x2DAF:
      case 0x2DB0:
      case 0x2DB1:
      case 0x2DB2:
      case 0x2DB3:
      case 0x2DB4:
      case 0x2DB5:
      case 0x2DB6:
      case 0x2DB7:
      case 0x2DB8:
      case 0x2DB9:
      case 0x2DBA:
      case 0x2DBB:
      case 0x2DBC:
      case 0x2DBD:
      case 0x2DBE:
      case 0x2DBF:
      case 0x2DC0:
      case 0x2DC1:
      case 0x2DC2:
      case 0x2DC3:
      case 0x2DC4:
      case 0x2DC5:
      case 0x2DC6:
      case 0x2DC7:
      case 0x2DC8:
      case 0x2DC9:
      case 0x2DCA:
      case 0x2DCB:
      case 0x2DCC:
      case 0x2DCD:
      case 0x2DCE:
      case 0x2DCF:
      case 0x2DD0:
      case 0x2DD1:
      case 0x2DD2:
      case 0x2DD3:
      case 0x2DD4:
      case 0x2DD5:
      case 0x2DD6:
      case 0x2DD7:
      case 0x2DD8:
      case 0x2DD9:
      case 0x2DDA:
      case 0x2DDB:
      case 0x2DDC:
      case 0x2DDD:
      case 0x2DDE:
      case 0x2DDF:
      case 0x2DE0:
      case 0x2DE1:
      case 0x2DE2:
      case 0x2DE3:
      case 0x2DE4:
      case 0x2DE5:
      case 0x2DE6:
      case 0x2DE7:
      case 0x2DE8:
      case 0x2DE9:
      case 0x2DEA:
      case 0x2DEB:
      case 0x2DEC:
      case 0x2DED:
      case 0x2DEE:
      case 0x2DEF:
      case 0x2DF0:
      case 0x2DF1:
      case 0x2DF2:
      case 0x2DF3:
      case 0x2DF4:
      case 0x2DF5:
      case 0x2DF6:
      case 0x2DF7:
      case 0x2DF8:
      case 0x2DF9:
      case 0x2DFA:
      case 0x2DFB:
      case 0x2DFC:
      case 0x2DFD:
      case 0x2DFE:
      case 0x2DFF:
      case 0x2E00:
      case 0x2E01:
      case 0x2E02:
      case 0x2E03:
      case 0x2E04:
      case 0x2E05:
      case 0x2E06:
      case 0x2E07:
      case 0x2E08:
      case 0x2E09:
      case 0x2E0A:
      case 0x2E0B:
      case 0x2E0C:
      case 0x2E0D:
      case 0x2E0E:
      case 0x2E0F:
      case 0x2E10:
      case 0x2E11:
      case 0x2E12:
      case 0x2E13:
      case 0x2E14:
      case 0x2E15:
      case 0x2E16:
      case 0x2E17:
      case 0x2E18:
      case 0x2E19:
      case 0x2E1A:
      case 0x2E1B:
      case 0x2E1C:
      case 0x2E1D:
      case 0x2E1E:
      case 0x2E1F:
      case 0x2E20:
      case 0x2E21:
      case 0x2E22:
      case 0x2E23:
      case 0x2E24:
      case 0x2E25:
      case 0x2E26:
      case 0x2E27:
      case 0x2E28:
      case 0x2E29:
      case 0x2E2A:
      case 0x2E2B:
      case 0x2E2C:
      case 0x2E2D:
      case 0x2E2E:
      case 0x2E2F:
        sub_1CD4373D8(a1, a2, a3, a4);
        break;
      case 0x9EC:
      case 0x9ED:
      case 0x9EE:
      case 0x9EF:
      case 0x9F0:
      case 0x9F1:
      case 0x9F2:
      case 0x9F3:
      case 0x9F4:
      case 0x9F5:
      case 0x9F6:
      case 0x9F7:
      case 0x9F8:
      case 0x9F9:
      case 0x9FA:
      case 0x9FB:
      case 0x9FC:
      case 0x9FD:
      case 0x9FE:
      case 0x9FF:
      case 0xA00:
      case 0xA01:
      case 0xA02:
      case 0xA03:
      case 0xA04:
      case 0xA05:
      case 0xA06:
      case 0xA07:
      case 0xA08:
      case 0xA09:
      case 0xA0A:
      case 0xA0B:
      case 0xA0C:
      case 0xA0D:
      case 0xA0E:
      case 0xA0F:
      case 0xA10:
      case 0xA11:
      case 0xA12:
      case 0xA13:
      case 0xA14:
      case 0xA15:
      case 0xA16:
      case 0xA17:
      case 0xA18:
      case 0xA19:
      case 0xA1A:
      case 0xA1B:
      case 0xA1C:
      case 0xA1D:
      case 0xA1E:
      case 0xA1F:
      case 0xA20:
      case 0xA21:
      case 0xA22:
      case 0xA23:
      case 0xA24:
      case 0xA25:
      case 0xA26:
      case 0xA27:
      case 0xA28:
      case 0xA29:
      case 0xA2A:
      case 0xA2B:
      case 0xA2C:
      case 0xA2D:
      case 0xA2E:
      case 0xA2F:
      case 0xA30:
      case 0xA31:
      case 0xA32:
      case 0xA33:
      case 0xA34:
      case 0xA35:
      case 0xA36:
      case 0xA37:
      case 0xA38:
      case 0xA39:
      case 0xA3A:
      case 0xA3B:
      case 0xA3C:
      case 0xA3D:
      case 0xA3E:
      case 0xA3F:
      case 0xA40:
      case 0xA41:
      case 0xA42:
      case 0xA43:
      case 0xA44:
      case 0xA45:
      case 0xA46:
      case 0xA47:
      case 0xA48:
      case 0xA49:
      case 0xA4A:
      case 0xA4B:
      case 0xA4C:
      case 0xA4D:
      case 0xA4E:
      case 0xA4F:
      case 0xA50:
      case 0xA51:
      case 0xA52:
      case 0xA53:
      case 0xA54:
      case 0xA55:
      case 0xA56:
      case 0xA57:
      case 0xA58:
      case 0xA59:
      case 0xA5A:
      case 0xA5B:
      case 0xA5C:
      case 0xA5D:
      case 0xA5E:
      case 0xA5F:
      case 0xA60:
      case 0xA61:
      case 0xA62:
      case 0xA63:
      case 0xA64:
      case 0xA65:
      case 0xA66:
      case 0xA67:
      case 0xA68:
      case 0xA69:
      case 0xA6A:
      case 0xA6B:
      case 0xAAC:
      case 0xAAD:
      case 0xAAE:
      case 0xAAF:
      case 0xAB0:
      case 0xAB1:
      case 0xAB2:
      case 0xAB3:
      case 0xAB4:
      case 0xAB5:
      case 0xAB6:
      case 0xAB7:
      case 0xAB8:
      case 0xAB9:
      case 0xABA:
      case 0xABB:
      case 0xABC:
      case 0xABD:
      case 0xABE:
      case 0xABF:
      case 0xAC0:
      case 0xAC1:
      case 0xAC2:
      case 0xAC3:
      case 0xAC4:
      case 0xAC5:
      case 0xAC6:
      case 0xAC7:
      case 0xAC8:
      case 0xAC9:
      case 0xACA:
      case 0xACB:
      case 0xACC:
      case 0xACD:
      case 0xACE:
      case 0xACF:
      case 0xAD0:
      case 0xAD1:
      case 0xAD2:
      case 0xAD3:
      case 0xAD4:
      case 0xAD5:
      case 0xAD6:
      case 0xAD7:
      case 0xAD8:
      case 0xAD9:
      case 0xADA:
      case 0xADB:
      case 0xADC:
      case 0xADD:
      case 0xADE:
      case 0xADF:
      case 0xAE0:
      case 0xAE1:
      case 0xAE2:
      case 0xAE3:
      case 0xAE4:
      case 0xAE5:
      case 0xAE6:
      case 0xAE7:
      case 0xAE8:
      case 0xAE9:
      case 0xAEA:
      case 0xAEB:
      case 0x2E30:
      case 0x2E31:
      case 0x2E32:
      case 0x2E33:
      case 0x2E34:
      case 0x2E35:
      case 0x2E36:
      case 0x2E37:
      case 0x2E38:
      case 0x2E39:
      case 0x2E3A:
      case 0x2E3B:
      case 0x2E3C:
      case 0x2E3D:
      case 0x2E3E:
      case 0x2E3F:
      case 0x2E40:
      case 0x2E41:
      case 0x2E42:
      case 0x2E43:
      case 0x2E44:
      case 0x2E45:
      case 0x2E46:
      case 0x2E47:
      case 0x2E48:
      case 0x2E49:
      case 0x2E4A:
      case 0x2E4B:
      case 0x2E4C:
      case 0x2E4D:
      case 0x2E4E:
      case 0x2E4F:
      case 0x2E50:
      case 0x2E51:
      case 0x2E52:
      case 0x2E53:
      case 0x2E54:
      case 0x2E55:
      case 0x2E56:
      case 0x2E57:
      case 0x2E58:
      case 0x2E59:
      case 0x2E5A:
      case 0x2E5B:
      case 0x2E5C:
      case 0x2E5D:
      case 0x2E5E:
      case 0x2E5F:
      case 0x2E60:
      case 0x2E61:
      case 0x2E62:
      case 0x2E63:
      case 0x2E64:
      case 0x2E65:
      case 0x2E66:
      case 0x2E67:
      case 0x2E68:
      case 0x2E69:
      case 0x2E6A:
      case 0x2E6B:
      case 0x2E6C:
      case 0x2E6D:
      case 0x2E6E:
      case 0x2E6F:
      case 0x2E70:
      case 0x2E71:
      case 0x2E72:
      case 0x2E73:
      case 0x2E74:
      case 0x2E75:
      case 0x2E76:
      case 0x2E77:
      case 0x2E78:
      case 0x2E79:
      case 0x2E7A:
      case 0x2E7B:
      case 0x2E7C:
      case 0x2E7D:
      case 0x2E7E:
      case 0x2E7F:
      case 0x2E80:
      case 0x2E81:
      case 0x2E82:
      case 0x2E83:
      case 0x2E84:
      case 0x2E85:
      case 0x2E86:
      case 0x2E87:
      case 0x2E88:
      case 0x2E89:
      case 0x2E8A:
      case 0x2E8B:
      case 0x2E8C:
      case 0x2E8D:
      case 0x2E8E:
      case 0x2E8F:
      case 0x2E90:
      case 0x2E91:
      case 0x2E92:
      case 0x2E93:
      case 0x2E94:
      case 0x2E95:
      case 0x2E96:
      case 0x2E97:
      case 0x2E98:
      case 0x2E99:
      case 0x2E9A:
      case 0x2E9B:
      case 0x2E9C:
      case 0x2E9D:
      case 0x2E9E:
      case 0x2E9F:
      case 0x2EA0:
      case 0x2EA1:
      case 0x2EA2:
      case 0x2EA3:
      case 0x2EA4:
      case 0x2EA5:
      case 0x2EA6:
      case 0x2EA7:
      case 0x2EA8:
      case 0x2EA9:
      case 0x2EAA:
      case 0x2EAB:
      case 0x2EAC:
      case 0x2EAD:
      case 0x2EAE:
      case 0x2EAF:
      case 0x2EF0:
      case 0x2EF1:
      case 0x2EF2:
      case 0x2EF3:
      case 0x2EF4:
      case 0x2EF5:
      case 0x2EF6:
      case 0x2EF7:
      case 0x2EF8:
      case 0x2EF9:
      case 0x2EFA:
      case 0x2EFB:
      case 0x2EFC:
      case 0x2EFD:
      case 0x2EFE:
      case 0x2EFF:
      case 0x2F00:
      case 0x2F01:
      case 0x2F02:
      case 0x2F03:
      case 0x2F04:
      case 0x2F05:
      case 0x2F06:
      case 0x2F07:
      case 0x2F08:
      case 0x2F09:
      case 0x2F0A:
      case 0x2F0B:
      case 0x2F0C:
      case 0x2F0D:
      case 0x2F0E:
      case 0x2F0F:
      case 0x2F10:
      case 0x2F11:
      case 0x2F12:
      case 0x2F13:
      case 0x2F14:
      case 0x2F15:
      case 0x2F16:
      case 0x2F17:
      case 0x2F18:
      case 0x2F19:
      case 0x2F1A:
      case 0x2F1B:
      case 0x2F1C:
      case 0x2F1D:
      case 0x2F1E:
      case 0x2F1F:
      case 0x2F20:
      case 0x2F21:
      case 0x2F22:
      case 0x2F23:
      case 0x2F24:
      case 0x2F25:
      case 0x2F26:
      case 0x2F27:
      case 0x2F28:
      case 0x2F29:
      case 0x2F2A:
      case 0x2F2B:
      case 0x2F2C:
      case 0x2F2D:
      case 0x2F2E:
      case 0x2F2F:
        sub_1CBD8EDF0(a1, a2, a3, a4);
        break;
      case 0xA6C:
      case 0xA6D:
      case 0xA6E:
      case 0xA6F:
      case 0xA70:
      case 0xA71:
      case 0xA72:
      case 0xA73:
      case 0xA74:
      case 0xA75:
      case 0xA76:
      case 0xA77:
      case 0xA78:
      case 0xA79:
      case 0xA7A:
      case 0xA7B:
      case 0xA7C:
      case 0xA7D:
      case 0xA7E:
      case 0xA7F:
      case 0xA80:
      case 0xA81:
      case 0xA82:
      case 0xA83:
      case 0xA84:
      case 0xA85:
      case 0xA86:
      case 0xA87:
      case 0xA88:
      case 0xA89:
      case 0xA8A:
      case 0xA8B:
      case 0xA8C:
      case 0xA8D:
      case 0xA8E:
      case 0xA8F:
      case 0xA90:
      case 0xA91:
      case 0xA92:
      case 0xA93:
      case 0xA94:
      case 0xA95:
      case 0xA96:
      case 0xA97:
      case 0xA98:
      case 0xA99:
      case 0xA9A:
      case 0xA9B:
      case 0xA9C:
      case 0xA9D:
      case 0xA9E:
      case 0xA9F:
      case 0xAA0:
      case 0xAA1:
      case 0xAA2:
      case 0xAA3:
      case 0xAA4:
      case 0xAA5:
      case 0xAA6:
      case 0xAA7:
      case 0xAA8:
      case 0xAA9:
      case 0xAAA:
      case 0xAAB:
      case 0x2EB0:
      case 0x2EB1:
      case 0x2EB2:
      case 0x2EB3:
      case 0x2EB4:
      case 0x2EB5:
      case 0x2EB6:
      case 0x2EB7:
      case 0x2EB8:
      case 0x2EB9:
      case 0x2EBA:
      case 0x2EBB:
      case 0x2EBC:
      case 0x2EBD:
      case 0x2EBE:
      case 0x2EBF:
      case 0x2EC0:
      case 0x2EC1:
      case 0x2EC2:
      case 0x2EC3:
      case 0x2EC4:
      case 0x2EC5:
      case 0x2EC6:
      case 0x2EC7:
      case 0x2EC8:
      case 0x2EC9:
      case 0x2ECA:
      case 0x2ECB:
      case 0x2ECC:
      case 0x2ECD:
      case 0x2ECE:
      case 0x2ECF:
      case 0x2ED0:
      case 0x2ED1:
      case 0x2ED2:
      case 0x2ED3:
      case 0x2ED4:
      case 0x2ED5:
      case 0x2ED6:
      case 0x2ED7:
      case 0x2ED8:
      case 0x2ED9:
      case 0x2EDA:
      case 0x2EDB:
      case 0x2EDC:
      case 0x2EDD:
      case 0x2EDE:
      case 0x2EDF:
      case 0x2EE0:
      case 0x2EE1:
      case 0x2EE2:
      case 0x2EE3:
      case 0x2EE4:
      case 0x2EE5:
      case 0x2EE6:
      case 0x2EE7:
      case 0x2EE8:
      case 0x2EE9:
      case 0x2EEA:
      case 0x2EEB:
      case 0x2EEC:
      case 0x2EED:
      case 0x2EEE:
      case 0x2EEF:
        sub_1CD4375BC(a1, a2, a3, a4);
        break;
      case 0xAEC:
      case 0xAED:
      case 0xAEE:
      case 0xAEF:
      case 0xAF0:
      case 0xAF1:
      case 0xAF2:
      case 0xAF3:
      case 0xAF4:
      case 0xAF5:
      case 0xAF6:
      case 0xAF7:
      case 0xAF8:
      case 0xAF9:
      case 0xAFA:
      case 0xAFB:
      case 0xAFC:
      case 0xAFD:
      case 0xAFE:
      case 0xAFF:
      case 0xB00:
      case 0xB01:
      case 0xB02:
      case 0xB03:
      case 0xB04:
      case 0xB05:
      case 0xB06:
      case 0xB07:
      case 0xB08:
      case 0xB09:
      case 0xB0A:
      case 0xB0B:
      case 0xB1C:
      case 0xB1D:
      case 0xB1E:
      case 0xB1F:
      case 0xB20:
      case 0xB21:
      case 0xB22:
      case 0xB23:
      case 0xB24:
      case 0xB25:
      case 0xB26:
      case 0xB27:
      case 0xB28:
      case 0xB29:
      case 0xB2A:
      case 0xB2B:
      case 0xBAC:
      case 0xBAD:
      case 0xBAE:
      case 0xBAF:
      case 0xBB0:
      case 0xBB1:
      case 0xBB2:
      case 0xBB3:
      case 0xBB4:
      case 0xBB5:
      case 0xBB6:
      case 0xBB7:
      case 0xBB8:
      case 0xBB9:
      case 0xBBA:
      case 0xBBB:
      case 0xBBC:
      case 0xBBD:
      case 0xBBE:
      case 0xBBF:
      case 0xBC0:
      case 0xBC1:
      case 0xBC2:
      case 0xBC3:
      case 0xBC4:
      case 0xBC5:
      case 0xBC6:
      case 0xBC7:
      case 0xBC8:
      case 0xBC9:
      case 0xBCA:
      case 0xBCB:
      case 0xBDC:
      case 0xBDD:
      case 0xBDE:
      case 0xBDF:
      case 0xBE0:
      case 0xBE1:
      case 0xBE2:
      case 0xBE3:
      case 0xBE4:
      case 0xBE5:
      case 0xBE6:
      case 0xBE7:
      case 0xBE8:
      case 0xBE9:
      case 0xBEA:
      case 0xBEB:
      case 0x2F30:
      case 0x2F31:
      case 0x2F32:
      case 0x2F33:
      case 0x2F34:
      case 0x2F35:
      case 0x2F36:
      case 0x2F37:
      case 0x2F38:
      case 0x2F39:
      case 0x2F3A:
      case 0x2F3B:
      case 0x2F3C:
      case 0x2F3D:
      case 0x2F3E:
      case 0x2F3F:
      case 0x2F40:
      case 0x2F41:
      case 0x2F42:
      case 0x2F43:
      case 0x2F44:
      case 0x2F45:
      case 0x2F46:
      case 0x2F47:
      case 0x2F48:
      case 0x2F49:
      case 0x2F4A:
      case 0x2F4B:
      case 0x2F4C:
      case 0x2F4D:
      case 0x2F4E:
      case 0x2F4F:
      case 0x2F60:
      case 0x2F61:
      case 0x2F62:
      case 0x2F63:
      case 0x2F64:
      case 0x2F65:
      case 0x2F66:
      case 0x2F67:
      case 0x2F68:
      case 0x2F69:
      case 0x2F6A:
      case 0x2F6B:
      case 0x2F6C:
      case 0x2F6D:
      case 0x2F6E:
      case 0x2F6F:
      case 0x2FF0:
      case 0x2FF1:
      case 0x2FF2:
      case 0x2FF3:
      case 0x2FF4:
      case 0x2FF5:
      case 0x2FF6:
      case 0x2FF7:
      case 0x2FF8:
      case 0x2FF9:
      case 0x2FFA:
      case 0x2FFB:
      case 0x2FFC:
      case 0x2FFD:
      case 0x2FFE:
      case 0x2FFF:
      case 0x3000:
      case 0x3001:
      case 0x3002:
      case 0x3003:
      case 0x3004:
      case 0x3005:
      case 0x3006:
      case 0x3007:
      case 0x3008:
      case 0x3009:
      case 0x300A:
      case 0x300B:
      case 0x300C:
      case 0x300D:
      case 0x300E:
      case 0x300F:
      case 0x3020:
      case 0x3021:
      case 0x3022:
      case 0x3023:
      case 0x3024:
      case 0x3025:
      case 0x3026:
      case 0x3027:
      case 0x3028:
      case 0x3029:
      case 0x302A:
      case 0x302B:
      case 0x302C:
      case 0x302D:
      case 0x302E:
      case 0x302F:
        sub_1CBD8C66C((uint64_t)a1, a2, a3, a4);
        break;
      case 0xB0C:
      case 0xB0D:
      case 0xB0E:
      case 0xB0F:
      case 0xB10:
      case 0xB11:
      case 0xB12:
      case 0xB13:
      case 0xB14:
      case 0xB15:
      case 0xB16:
      case 0xB17:
      case 0xB18:
      case 0xB19:
      case 0xB1A:
      case 0xB1B:
      case 0xBCC:
      case 0xBCD:
      case 0xBCE:
      case 0xBCF:
      case 0xBD0:
      case 0xBD1:
      case 0xBD2:
      case 0xBD3:
      case 0xBD4:
      case 0xBD5:
      case 0xBD6:
      case 0xBD7:
      case 0xBD8:
      case 0xBD9:
      case 0xBDA:
      case 0xBDB:
      case 0x2F50:
      case 0x2F51:
      case 0x2F52:
      case 0x2F53:
      case 0x2F54:
      case 0x2F55:
      case 0x2F56:
      case 0x2F57:
      case 0x2F58:
      case 0x2F59:
      case 0x2F5A:
      case 0x2F5B:
      case 0x2F5C:
      case 0x2F5D:
      case 0x2F5E:
      case 0x2F5F:
      case 0x3010:
      case 0x3011:
      case 0x3012:
      case 0x3013:
      case 0x3014:
      case 0x3015:
      case 0x3016:
      case 0x3017:
      case 0x3018:
      case 0x3019:
      case 0x301A:
      case 0x301B:
      case 0x301C:
      case 0x301D:
      case 0x301E:
      case 0x301F:
        sub_1CBD8CB80((uint64_t)a1, a2, a3, a4);
        break;
      case 0xB2C:
      case 0xB2D:
      case 0xB2E:
      case 0xB2F:
      case 0xB30:
      case 0xB31:
      case 0xB32:
      case 0xB33:
      case 0xB34:
      case 0xB35:
      case 0xB36:
      case 0xB37:
      case 0xB38:
      case 0xB39:
      case 0xB3A:
      case 0xB3B:
      case 0xB3C:
      case 0xB3D:
      case 0xB3E:
      case 0xB3F:
      case 0xB40:
      case 0xB41:
      case 0xB42:
      case 0xB43:
      case 0xB44:
      case 0xB45:
      case 0xB46:
      case 0xB47:
      case 0xB48:
      case 0xB49:
      case 0xB4A:
      case 0xB4B:
      case 0xB4C:
      case 0xB4D:
      case 0xB4E:
      case 0xB4F:
      case 0xB50:
      case 0xB51:
      case 0xB52:
      case 0xB53:
      case 0xB54:
      case 0xB55:
      case 0xB56:
      case 0xB57:
      case 0xB58:
      case 0xB59:
      case 0xB5A:
      case 0xB5B:
      case 0xB5C:
      case 0xB5D:
      case 0xB5E:
      case 0xB5F:
      case 0xB60:
      case 0xB61:
      case 0xB62:
      case 0xB63:
      case 0xB64:
      case 0xB65:
      case 0xB66:
      case 0xB67:
      case 0xB68:
      case 0xB69:
      case 0xB6A:
      case 0xB6B:
      case 0xB6C:
      case 0xB6D:
      case 0xB6E:
      case 0xB6F:
      case 0xB70:
      case 0xB71:
      case 0xB72:
      case 0xB73:
      case 0xB74:
      case 0xB75:
      case 0xB76:
      case 0xB77:
      case 0xB78:
      case 0xB79:
      case 0xB7A:
      case 0xB7B:
      case 0xB7C:
      case 0xB7D:
      case 0xB7E:
      case 0xB7F:
      case 0xB80:
      case 0xB81:
      case 0xB82:
      case 0xB83:
      case 0xB84:
      case 0xB85:
      case 0xB86:
      case 0xB87:
      case 0xB88:
      case 0xB89:
      case 0xB8A:
      case 0xB8B:
      case 0xB8C:
      case 0xB8D:
      case 0xB8E:
      case 0xB8F:
      case 0xB90:
      case 0xB91:
      case 0xB92:
      case 0xB93:
      case 0xB94:
      case 0xB95:
      case 0xB96:
      case 0xB97:
      case 0xB98:
      case 0xB99:
      case 0xB9A:
      case 0xB9B:
      case 0xB9C:
      case 0xB9D:
      case 0xB9E:
      case 0xB9F:
      case 0xBA0:
      case 0xBA1:
      case 0xBA2:
      case 0xBA3:
      case 0xBA4:
      case 0xBA5:
      case 0xBA6:
      case 0xBA7:
      case 0xBA8:
      case 0xBA9:
      case 0xBAA:
      case 0xBAB:
      case 0x2F70:
      case 0x2F71:
      case 0x2F72:
      case 0x2F73:
      case 0x2F74:
      case 0x2F75:
      case 0x2F76:
      case 0x2F77:
      case 0x2F78:
      case 0x2F79:
      case 0x2F7A:
      case 0x2F7B:
      case 0x2F7C:
      case 0x2F7D:
      case 0x2F7E:
      case 0x2F7F:
      case 0x2F80:
      case 0x2F81:
      case 0x2F82:
      case 0x2F83:
      case 0x2F84:
      case 0x2F85:
      case 0x2F86:
      case 0x2F87:
      case 0x2F88:
      case 0x2F89:
      case 0x2F8A:
      case 0x2F8B:
      case 0x2F8C:
      case 0x2F8D:
      case 0x2F8E:
      case 0x2F8F:
      case 0x2F90:
      case 0x2F91:
      case 0x2F92:
      case 0x2F93:
      case 0x2F94:
      case 0x2F95:
      case 0x2F96:
      case 0x2F97:
      case 0x2F98:
      case 0x2F99:
      case 0x2F9A:
      case 0x2F9B:
      case 0x2F9C:
      case 0x2F9D:
      case 0x2F9E:
      case 0x2F9F:
      case 0x2FA0:
      case 0x2FA1:
      case 0x2FA2:
      case 0x2FA3:
      case 0x2FA4:
      case 0x2FA5:
      case 0x2FA6:
      case 0x2FA7:
      case 0x2FA8:
      case 0x2FA9:
      case 0x2FAA:
      case 0x2FAB:
      case 0x2FAC:
      case 0x2FAD:
      case 0x2FAE:
      case 0x2FAF:
      case 0x2FB0:
      case 0x2FB1:
      case 0x2FB2:
      case 0x2FB3:
      case 0x2FB4:
      case 0x2FB5:
      case 0x2FB6:
      case 0x2FB7:
      case 0x2FB8:
      case 0x2FB9:
      case 0x2FBA:
      case 0x2FBB:
      case 0x2FBC:
      case 0x2FBD:
      case 0x2FBE:
      case 0x2FBF:
      case 0x2FC0:
      case 0x2FC1:
      case 0x2FC2:
      case 0x2FC3:
      case 0x2FC4:
      case 0x2FC5:
      case 0x2FC6:
      case 0x2FC7:
      case 0x2FC8:
      case 0x2FC9:
      case 0x2FCA:
      case 0x2FCB:
      case 0x2FCC:
      case 0x2FCD:
      case 0x2FCE:
      case 0x2FCF:
      case 0x2FD0:
      case 0x2FD1:
      case 0x2FD2:
      case 0x2FD3:
      case 0x2FD4:
      case 0x2FD5:
      case 0x2FD6:
      case 0x2FD7:
      case 0x2FD8:
      case 0x2FD9:
      case 0x2FDA:
      case 0x2FDB:
      case 0x2FDC:
      case 0x2FDD:
      case 0x2FDE:
      case 0x2FDF:
      case 0x2FE0:
      case 0x2FE1:
      case 0x2FE2:
      case 0x2FE3:
      case 0x2FE4:
      case 0x2FE5:
      case 0x2FE6:
      case 0x2FE7:
      case 0x2FE8:
      case 0x2FE9:
      case 0x2FEA:
      case 0x2FEB:
      case 0x2FEC:
      case 0x2FED:
      case 0x2FEE:
      case 0x2FEF:
        sub_1CBD8C8A8((uint64_t)a1, a2, a3, a4);
        break;
      case 0xBEC:
      case 0xBED:
      case 0xBEE:
      case 0xBEF:
      case 0xBF0:
      case 0xBF1:
      case 0xBF2:
      case 0xBF3:
      case 0xBF4:
      case 0xBF5:
      case 0xBF6:
      case 0xBF7:
      case 0xBF8:
      case 0xBF9:
      case 0xBFA:
      case 0xBFB:
      case 0xBFC:
      case 0xBFD:
      case 0xBFE:
      case 0xBFF:
      case 0xC00:
      case 0xC01:
      case 0xC02:
      case 0xC03:
      case 0xC04:
      case 0xC05:
      case 0xC06:
      case 0xC07:
      case 0xC08:
      case 0xC09:
      case 0xC0A:
      case 0xC0B:
      case 0xC0C:
      case 0xC0D:
      case 0xC0E:
      case 0xC0F:
      case 0xC10:
      case 0xC11:
      case 0xC12:
      case 0xC13:
      case 0xC14:
      case 0xC15:
      case 0xC16:
      case 0xC17:
      case 0xC18:
      case 0xC19:
      case 0xC1A:
      case 0xC1B:
      case 0xC1C:
      case 0xC1D:
      case 0xC1E:
      case 0xC1F:
      case 0xC20:
      case 0xC21:
      case 0xC22:
      case 0xC23:
      case 0xC24:
      case 0xC25:
      case 0xC26:
      case 0xC27:
      case 0xC28:
      case 0xC29:
      case 0xC2A:
      case 0xC2B:
      case 0xC2C:
      case 0xC2D:
      case 0xC2E:
      case 0xC2F:
      case 0xC30:
      case 0xC31:
      case 0xC32:
      case 0xC33:
      case 0xC34:
      case 0xC35:
      case 0xC36:
      case 0xC37:
      case 0xC38:
      case 0xC39:
      case 0xC3A:
      case 0xC3B:
      case 0xC3C:
      case 0xC3D:
      case 0xC3E:
      case 0xC3F:
      case 0xC40:
      case 0xC41:
      case 0xC42:
      case 0xC43:
      case 0xC44:
      case 0xC45:
      case 0xC46:
      case 0xC47:
      case 0xC48:
      case 0xC49:
      case 0xC4A:
      case 0xC4B:
      case 0xC4C:
      case 0xC4D:
      case 0xC4E:
      case 0xC4F:
      case 0xC50:
      case 0xC51:
      case 0xC52:
      case 0xC53:
      case 0xC54:
      case 0xC55:
      case 0xC56:
      case 0xC57:
      case 0xC58:
      case 0xC59:
      case 0xC5A:
      case 0xC5B:
      case 0xC5C:
      case 0xC5D:
      case 0xC5E:
      case 0xC5F:
      case 0xC60:
      case 0xC61:
      case 0xC62:
      case 0xC63:
      case 0xC64:
      case 0xC65:
      case 0xC66:
      case 0xC67:
      case 0xC68:
      case 0xC69:
      case 0xC6A:
      case 0xC6B:
      case 0xC6C:
      case 0xC6D:
      case 0xC6E:
      case 0xC6F:
      case 0xC70:
      case 0xC71:
      case 0xC72:
      case 0xC73:
      case 0xC74:
      case 0xC75:
      case 0xC76:
      case 0xC77:
      case 0xC78:
      case 0xC79:
      case 0xC7A:
      case 0xC7B:
      case 0xC7C:
      case 0xC7D:
      case 0xC7E:
      case 0xC7F:
      case 0xC80:
      case 0xC81:
      case 0xC82:
      case 0xC83:
      case 0xC84:
      case 0xC85:
      case 0xC86:
      case 0xC87:
      case 0xC88:
      case 0xC89:
      case 0xC8A:
      case 0xC8B:
      case 0xC8C:
      case 0xC8D:
      case 0xC8E:
      case 0xC8F:
      case 0xC90:
      case 0xC91:
      case 0xC92:
      case 0xC93:
      case 0xC94:
      case 0xC95:
      case 0xC96:
      case 0xC97:
      case 0xC98:
      case 0xC99:
      case 0xC9A:
      case 0xC9B:
      case 0xC9C:
      case 0xC9D:
      case 0xC9E:
      case 0xC9F:
      case 0xCA0:
      case 0xCA1:
      case 0xCA2:
      case 0xCA3:
      case 0xCA4:
      case 0xCA5:
      case 0xCA6:
      case 0xCA7:
      case 0xCA8:
      case 0xCA9:
      case 0xCAA:
      case 0xCAB:
      case 0xCAC:
      case 0xCAD:
      case 0xCAE:
      case 0xCAF:
      case 0xCB0:
      case 0xCB1:
      case 0xCB2:
      case 0xCB3:
      case 0xCB4:
      case 0xCB5:
      case 0xCB6:
      case 0xCB7:
      case 0xCB8:
      case 0xCB9:
      case 0xCBA:
      case 0xCBB:
      case 0xCBC:
      case 0xCBD:
      case 0xCBE:
      case 0xCBF:
      case 0xCC0:
      case 0xCC1:
      case 0xCC2:
      case 0xCC3:
      case 0xCC4:
      case 0xCC5:
      case 0xCC6:
      case 0xCC7:
      case 0xCC8:
      case 0xCC9:
      case 0xCCA:
      case 0xCCB:
      case 0xCCC:
      case 0xCCD:
      case 0xCCE:
      case 0xCCF:
      case 0xCD0:
      case 0xCD1:
      case 0xCD2:
      case 0xCD3:
      case 0xCD4:
      case 0xCD5:
      case 0xCD6:
      case 0xCD7:
      case 0xCD8:
      case 0xCD9:
      case 0xCDA:
      case 0xCDB:
      case 0xCDC:
      case 0xCDD:
      case 0xCDE:
      case 0xCDF:
      case 0xCE0:
      case 0xCE1:
      case 0xCE2:
      case 0xCE3:
      case 0xCE4:
      case 0xCE5:
      case 0xCE6:
      case 0xCE7:
      case 0xCE8:
      case 0xCE9:
      case 0xCEA:
      case 0xCEB:
      case 0x3030:
      case 0x3031:
      case 0x3032:
      case 0x3033:
      case 0x3034:
      case 0x3035:
      case 0x3036:
      case 0x3037:
      case 0x3038:
      case 0x3039:
      case 0x303A:
      case 0x303B:
      case 0x303C:
      case 0x303D:
      case 0x303E:
      case 0x303F:
      case 0x3040:
      case 0x3041:
      case 0x3042:
      case 0x3043:
      case 0x3044:
      case 0x3045:
      case 0x3046:
      case 0x3047:
      case 0x3048:
      case 0x3049:
      case 0x304A:
      case 0x304B:
      case 0x304C:
      case 0x304D:
      case 0x304E:
      case 0x304F:
      case 0x3050:
      case 0x3051:
      case 0x3052:
      case 0x3053:
      case 0x3054:
      case 0x3055:
      case 0x3056:
      case 0x3057:
      case 0x3058:
      case 0x3059:
      case 0x305A:
      case 0x305B:
      case 0x305C:
      case 0x305D:
      case 0x305E:
      case 0x305F:
      case 0x3060:
      case 0x3061:
      case 0x3062:
      case 0x3063:
      case 0x3064:
      case 0x3065:
      case 0x3066:
      case 0x3067:
      case 0x3068:
      case 0x3069:
      case 0x306A:
      case 0x306B:
      case 0x306C:
      case 0x306D:
      case 0x306E:
      case 0x306F:
      case 0x3070:
      case 0x3071:
      case 0x3072:
      case 0x3073:
      case 0x3074:
      case 0x3075:
      case 0x3076:
      case 0x3077:
      case 0x3078:
      case 0x3079:
      case 0x307A:
      case 0x307B:
      case 0x307C:
      case 0x307D:
      case 0x307E:
      case 0x307F:
      case 0x3080:
      case 0x3081:
      case 0x3082:
      case 0x3083:
      case 0x3084:
      case 0x3085:
      case 0x3086:
      case 0x3087:
      case 0x3088:
      case 0x3089:
      case 0x308A:
      case 0x308B:
      case 0x308C:
      case 0x308D:
      case 0x308E:
      case 0x308F:
      case 0x3090:
      case 0x3091:
      case 0x3092:
      case 0x3093:
      case 0x3094:
      case 0x3095:
      case 0x3096:
      case 0x3097:
      case 0x3098:
      case 0x3099:
      case 0x309A:
      case 0x309B:
      case 0x309C:
      case 0x309D:
      case 0x309E:
      case 0x309F:
      case 0x30A0:
      case 0x30A1:
      case 0x30A2:
      case 0x30A3:
      case 0x30A4:
      case 0x30A5:
      case 0x30A6:
      case 0x30A7:
      case 0x30A8:
      case 0x30A9:
      case 0x30AA:
      case 0x30AB:
      case 0x30AC:
      case 0x30AD:
      case 0x30AE:
      case 0x30AF:
      case 0x30B0:
      case 0x30B1:
      case 0x30B2:
      case 0x30B3:
      case 0x30B4:
      case 0x30B5:
      case 0x30B6:
      case 0x30B7:
      case 0x30B8:
      case 0x30B9:
      case 0x30BA:
      case 0x30BB:
      case 0x30BC:
      case 0x30BD:
      case 0x30BE:
      case 0x30BF:
      case 0x30C0:
      case 0x30C1:
      case 0x30C2:
      case 0x30C3:
      case 0x30C4:
      case 0x30C5:
      case 0x30C6:
      case 0x30C7:
      case 0x30C8:
      case 0x30C9:
      case 0x30CA:
      case 0x30CB:
      case 0x30CC:
      case 0x30CD:
      case 0x30CE:
      case 0x30CF:
      case 0x30D0:
      case 0x30D1:
      case 0x30D2:
      case 0x30D3:
      case 0x30D4:
      case 0x30D5:
      case 0x30D6:
      case 0x30D7:
      case 0x30D8:
      case 0x30D9:
      case 0x30DA:
      case 0x30DB:
      case 0x30DC:
      case 0x30DD:
      case 0x30DE:
      case 0x30DF:
      case 0x30E0:
      case 0x30E1:
      case 0x30E2:
      case 0x30E3:
      case 0x30E4:
      case 0x30E5:
      case 0x30E6:
      case 0x30E7:
      case 0x30E8:
      case 0x30E9:
      case 0x30EA:
      case 0x30EB:
      case 0x30EC:
      case 0x30ED:
      case 0x30EE:
      case 0x30EF:
      case 0x30F0:
      case 0x30F1:
      case 0x30F2:
      case 0x30F3:
      case 0x30F4:
      case 0x30F5:
      case 0x30F6:
      case 0x30F7:
      case 0x30F8:
      case 0x30F9:
      case 0x30FA:
      case 0x30FB:
      case 0x30FC:
      case 0x30FD:
      case 0x30FE:
      case 0x30FF:
      case 0x3100:
      case 0x3101:
      case 0x3102:
      case 0x3103:
      case 0x3104:
      case 0x3105:
      case 0x3106:
      case 0x3107:
      case 0x3108:
      case 0x3109:
      case 0x310A:
      case 0x310B:
      case 0x310C:
      case 0x310D:
      case 0x310E:
      case 0x310F:
      case 0x3110:
      case 0x3111:
      case 0x3112:
      case 0x3113:
      case 0x3114:
      case 0x3115:
      case 0x3116:
      case 0x3117:
      case 0x3118:
      case 0x3119:
      case 0x311A:
      case 0x311B:
      case 0x311C:
      case 0x311D:
      case 0x311E:
      case 0x311F:
      case 0x3120:
      case 0x3121:
      case 0x3122:
      case 0x3123:
      case 0x3124:
      case 0x3125:
      case 0x3126:
      case 0x3127:
      case 0x3128:
      case 0x3129:
      case 0x312A:
      case 0x312B:
      case 0x312C:
      case 0x312D:
      case 0x312E:
      case 0x312F:
        sub_1CBD8D614((uint64_t)a1, a2, a3, a4);
        break;
      case 0xCEC:
      case 0xCED:
      case 0xCEE:
      case 0xCEF:
      case 0xCF0:
      case 0xCF1:
      case 0xCF2:
      case 0xCF3:
      case 0xCF8:
      case 0xCF9:
      case 0xCFA:
      case 0xCFB:
      case 0xD1C:
      case 0xD1D:
      case 0xD1E:
      case 0xD1F:
      case 0xD20:
      case 0xD21:
      case 0xD22:
      case 0xD23:
      case 0xD28:
      case 0xD29:
      case 0xD2A:
      case 0xD2B:
      case 0x3130:
      case 0x3131:
      case 0x3132:
      case 0x3133:
      case 0x3134:
      case 0x3135:
      case 0x3136:
      case 0x3137:
      case 0x313C:
      case 0x313D:
      case 0x313E:
      case 0x313F:
      case 0x3160:
      case 0x3161:
      case 0x3162:
      case 0x3163:
      case 0x3164:
      case 0x3165:
      case 0x3166:
      case 0x3167:
      case 0x316C:
      case 0x316D:
      case 0x316E:
      case 0x316F:
        sub_1CBD8D010((uint64_t)a1, a2, a3, a4);
        break;
      case 0xCF4:
      case 0xCF5:
      case 0xCF6:
      case 0xCF7:
      case 0xD24:
      case 0xD25:
      case 0xD26:
      case 0xD27:
      case 0x3138:
      case 0x3139:
      case 0x313A:
      case 0x313B:
      case 0x3168:
      case 0x3169:
      case 0x316A:
      case 0x316B:
        sub_1CBD8D430((uint64_t)a1, a2, a3, a4);
        break;
      case 0xCFC:
      case 0xCFD:
      case 0xCFE:
      case 0xCFF:
      case 0xD00:
      case 0xD01:
      case 0xD02:
      case 0xD03:
      case 0xD08:
      case 0xD09:
      case 0xD0A:
      case 0xD0B:
      case 0xD0C:
      case 0xD0D:
      case 0xD0E:
      case 0xD0F:
      case 0xD10:
      case 0xD11:
      case 0xD12:
      case 0xD13:
      case 0xD18:
      case 0xD19:
      case 0xD1A:
      case 0xD1B:
      case 0x3140:
      case 0x3141:
      case 0x3142:
      case 0x3143:
      case 0x3144:
      case 0x3145:
      case 0x3146:
      case 0x3147:
      case 0x314C:
      case 0x314D:
      case 0x314E:
      case 0x314F:
      case 0x3150:
      case 0x3151:
      case 0x3152:
      case 0x3153:
      case 0x3154:
      case 0x3155:
      case 0x3156:
      case 0x3157:
      case 0x315C:
      case 0x315D:
      case 0x315E:
      case 0x315F:
        sub_1CBD8D1F8((uint64_t)a1, a2, a3, a4);
        break;
      case 0xD04:
      case 0xD05:
      case 0xD06:
      case 0xD07:
      case 0xD14:
      case 0xD15:
      case 0xD16:
      case 0xD17:
      case 0x3148:
      case 0x3149:
      case 0x314A:
      case 0x314B:
      case 0x3158:
      case 0x3159:
      case 0x315A:
      case 0x315B:
        sub_1CD436C54((uint64_t)a1, a2, a3, a4);
        break;
      case 0xD2C:
      case 0xD2D:
      case 0xD2E:
      case 0xD2F:
      case 0xD30:
      case 0xD31:
      case 0xD32:
      case 0xD33:
      case 0xD34:
      case 0xD35:
      case 0xD36:
      case 0xD37:
      case 0xD38:
      case 0xD39:
      case 0xD3A:
      case 0xD3B:
      case 0xD3C:
      case 0xD3D:
      case 0xD3E:
      case 0xD3F:
      case 0xD40:
      case 0xD41:
      case 0xD42:
      case 0xD43:
      case 0xD48:
      case 0xD49:
      case 0xD4A:
      case 0xD4B:
      case 0xD4C:
      case 0xD4D:
      case 0xD4E:
      case 0xD4F:
      case 0xD50:
      case 0xD51:
      case 0xD52:
      case 0xD53:
      case 0xD58:
      case 0xD59:
      case 0xD5A:
      case 0xD5B:
      case 0xD74:
      case 0xD75:
      case 0xD76:
      case 0xD77:
      case 0xD84:
      case 0xD85:
      case 0xD86:
      case 0xD87:
      case 0xDA4:
      case 0xDA5:
      case 0xDA6:
      case 0xDA7:
      case 0x3170:
      case 0x3171:
      case 0x3172:
      case 0x3173:
      case 0x3174:
      case 0x3175:
      case 0x3176:
      case 0x3177:
      case 0x3178:
      case 0x3179:
      case 0x317A:
      case 0x317B:
      case 0x317C:
      case 0x317D:
      case 0x317E:
      case 0x317F:
      case 0x3180:
      case 0x3181:
      case 0x3182:
      case 0x3183:
      case 0x3184:
      case 0x3185:
      case 0x3186:
      case 0x3187:
      case 0x318C:
      case 0x318D:
      case 0x318E:
      case 0x318F:
      case 0x3190:
      case 0x3191:
      case 0x3192:
      case 0x3193:
      case 0x3194:
      case 0x3195:
      case 0x3196:
      case 0x3197:
      case 0x319C:
      case 0x319D:
      case 0x319E:
      case 0x319F:
      case 0x31B8:
      case 0x31B9:
      case 0x31BA:
      case 0x31BB:
      case 0x31C8:
      case 0x31C9:
      case 0x31CA:
      case 0x31CB:
      case 0x31E8:
      case 0x31E9:
      case 0x31EA:
      case 0x31EB:
        sub_1CD437054((uint64_t)a1, a2, a3, (_OWORD *)a4);
        break;
      case 0xD44:
      case 0xD45:
      case 0xD46:
      case 0xD47:
      case 0xD54:
      case 0xD55:
      case 0xD56:
      case 0xD57:
      case 0xD5C:
      case 0xD5D:
      case 0xD5E:
      case 0xD5F:
      case 0xD60:
      case 0xD61:
      case 0xD62:
      case 0xD63:
      case 0xD64:
      case 0xD65:
      case 0xD66:
      case 0xD67:
      case 0xD68:
      case 0xD69:
      case 0xD6A:
      case 0xD6B:
      case 0x3188:
      case 0x3189:
      case 0x318A:
      case 0x318B:
      case 0x3198:
      case 0x3199:
      case 0x319A:
      case 0x319B:
      case 0x31A0:
      case 0x31A1:
      case 0x31A2:
      case 0x31A3:
      case 0x31A4:
      case 0x31A5:
      case 0x31A6:
      case 0x31A7:
      case 0x31A8:
      case 0x31A9:
      case 0x31AA:
      case 0x31AB:
      case 0x31AC:
      case 0x31AD:
      case 0x31AE:
      case 0x31AF:
        sub_1CD437214((uint64_t)a1, a2, a3, (_OWORD *)a4);
        break;
      case 0xD6C:
      case 0xD6D:
      case 0xD6E:
      case 0xD6F:
      case 0xD70:
      case 0xD71:
      case 0xD72:
      case 0xD73:
      case 0xD78:
      case 0xD79:
      case 0xD7A:
      case 0xD7B:
      case 0xD94:
      case 0xD95:
      case 0xD96:
      case 0xD97:
      case 0x31B0:
      case 0x31B1:
      case 0x31B2:
      case 0x31B3:
      case 0x31B4:
      case 0x31B5:
      case 0x31B6:
      case 0x31B7:
      case 0x31BC:
      case 0x31BD:
      case 0x31BE:
      case 0x31BF:
      case 0x31D8:
      case 0x31D9:
      case 0x31DA:
      case 0x31DB:
        sub_1CBD8E48C((uint64_t)a1, a2, a3, (_OWORD *)a4);
        break;
      case 0xD7C:
      case 0xD7D:
      case 0xD7E:
      case 0xD7F:
      case 0xD80:
      case 0xD81:
      case 0xD82:
      case 0xD83:
      case 0xD88:
      case 0xD89:
      case 0xD8A:
      case 0xD8B:
      case 0xD8C:
      case 0xD8D:
      case 0xD8E:
      case 0xD8F:
      case 0xD90:
      case 0xD91:
      case 0xD92:
      case 0xD93:
      case 0xD98:
      case 0xD99:
      case 0xD9A:
      case 0xD9B:
      case 0xD9C:
      case 0xD9D:
      case 0xD9E:
      case 0xD9F:
      case 0xDA0:
      case 0xDA1:
      case 0xDA2:
      case 0xDA3:
      case 0xDA8:
      case 0xDA9:
      case 0xDAA:
      case 0xDAB:
      case 0x31C0:
      case 0x31C1:
      case 0x31C2:
      case 0x31C3:
      case 0x31C4:
      case 0x31C5:
      case 0x31C6:
      case 0x31C7:
      case 0x31CC:
      case 0x31CD:
      case 0x31CE:
      case 0x31CF:
      case 0x31D0:
      case 0x31D1:
      case 0x31D2:
      case 0x31D3:
      case 0x31D4:
      case 0x31D5:
      case 0x31D6:
      case 0x31D7:
      case 0x31DC:
      case 0x31DD:
      case 0x31DE:
      case 0x31DF:
      case 0x31E0:
      case 0x31E1:
      case 0x31E2:
      case 0x31E3:
      case 0x31E4:
      case 0x31E5:
      case 0x31E6:
      case 0x31E7:
      case 0x31EC:
      case 0x31ED:
      case 0x31EE:
      case 0x31EF:
        sub_1CBD8E6DC((uint64_t)a1, a2, a3, (_OWORD *)a4);
        break;
      case 0xDAC:
      case 0xDAD:
      case 0xDAE:
      case 0xDAF:
      case 0xDB0:
      case 0xDB1:
      case 0xDB2:
      case 0xDB3:
      case 0xDB4:
      case 0xDB5:
      case 0xDB6:
      case 0xDB7:
      case 0xDB8:
      case 0xDB9:
      case 0xDBA:
      case 0xDBB:
      case 0xDBC:
      case 0xDBD:
      case 0xDBE:
      case 0xDBF:
      case 0xDC0:
      case 0xDC1:
      case 0xDC2:
      case 0xDC3:
      case 0xDC4:
      case 0xDC5:
      case 0xDC6:
      case 0xDC7:
      case 0xDC8:
      case 0xDC9:
      case 0xDCA:
      case 0xDCB:
      case 0x31F0:
      case 0x31F1:
      case 0x31F2:
      case 0x31F3:
      case 0x31F4:
      case 0x31F5:
      case 0x31F6:
      case 0x31F7:
      case 0x31F8:
      case 0x31F9:
      case 0x31FA:
      case 0x31FB:
      case 0x31FC:
      case 0x31FD:
      case 0x31FE:
      case 0x31FF:
      case 0x3200:
      case 0x3201:
      case 0x3202:
      case 0x3203:
      case 0x3204:
      case 0x3205:
      case 0x3206:
      case 0x3207:
      case 0x3208:
      case 0x3209:
      case 0x320A:
      case 0x320B:
      case 0x320C:
      case 0x320D:
      case 0x320E:
      case 0x320F:
        sub_1CBD8D82C((uint64_t)a1, a2, a3, a4);
        break;
      case 0xDCC:
      case 0xDCD:
      case 0xDCE:
      case 0xDCF:
      case 0xDD0:
      case 0xDD1:
      case 0xDD2:
      case 0xDD3:
      case 0xDD8:
      case 0xDD9:
      case 0xDDA:
      case 0xDDB:
      case 0xDDC:
      case 0xDDD:
      case 0xDDE:
      case 0xDDF:
      case 0xDE0:
      case 0xDE1:
      case 0xDE2:
      case 0xDE3:
      case 0xDE8:
      case 0xDE9:
      case 0xDEA:
      case 0xDEB:
      case 0x3210:
      case 0x3211:
      case 0x3212:
      case 0x3213:
      case 0x3214:
      case 0x3215:
      case 0x3216:
      case 0x3217:
      case 0x321C:
      case 0x321D:
      case 0x321E:
      case 0x321F:
      case 0x3220:
      case 0x3221:
      case 0x3222:
      case 0x3223:
      case 0x3224:
      case 0x3225:
      case 0x3226:
      case 0x3227:
      case 0x322C:
      case 0x322D:
      case 0x322E:
      case 0x322F:
        sub_1CBD8DF3C((uint64_t)a1, a2, a3, a4);
        break;
      case 0xDD4:
      case 0xDD5:
      case 0xDD6:
      case 0xDD7:
      case 0xDE4:
      case 0xDE5:
      case 0xDE6:
      case 0xDE7:
      case 0x3218:
      case 0x3219:
      case 0x321A:
      case 0x321B:
      case 0x3228:
      case 0x3229:
      case 0x322A:
      case 0x322B:
        sub_1CD436E90((uint64_t)a1, a2, a3, a4);
        break;
      case 0xDEC:
      case 0xDED:
      case 0xDEE:
      case 0xDEF:
      case 0xDF0:
      case 0xDF1:
      case 0xDF2:
      case 0xDF3:
      case 0xDF4:
      case 0xDF5:
      case 0xDF6:
      case 0xDF7:
      case 0xDF8:
      case 0xDF9:
      case 0xDFA:
      case 0xDFB:
      case 0xDFC:
      case 0xDFD:
      case 0xDFE:
      case 0xDFF:
      case 0xE00:
      case 0xE01:
      case 0xE02:
      case 0xE03:
      case 0xE04:
      case 0xE05:
      case 0xE06:
      case 0xE07:
      case 0xE08:
      case 0xE09:
      case 0xE0A:
      case 0xE0B:
      case 0x3230:
      case 0x3231:
      case 0x3232:
      case 0x3233:
      case 0x3234:
      case 0x3235:
      case 0x3236:
      case 0x3237:
      case 0x3238:
      case 0x3239:
      case 0x323A:
      case 0x323B:
      case 0x323C:
      case 0x323D:
      case 0x323E:
      case 0x323F:
      case 0x3240:
      case 0x3241:
      case 0x3242:
      case 0x3243:
      case 0x3244:
      case 0x3245:
      case 0x3246:
      case 0x3247:
      case 0x3248:
      case 0x3249:
      case 0x324A:
      case 0x324B:
      case 0x324C:
      case 0x324D:
      case 0x324E:
      case 0x324F:
        sub_1CBD8DD78((uint64_t)a1, a2, a3, a4);
        break;
      case 0xE0C:
      case 0xE0D:
      case 0xE0E:
      case 0xE0F:
      case 0xE10:
      case 0xE11:
      case 0xE12:
      case 0xE13:
      case 0xE14:
      case 0xE15:
      case 0xE16:
      case 0xE17:
      case 0xE18:
      case 0xE19:
      case 0xE1A:
      case 0xE1B:
      case 0xE1C:
      case 0xE1D:
      case 0xE1E:
      case 0xE1F:
      case 0xE20:
      case 0xE21:
      case 0xE22:
      case 0xE23:
      case 0xE24:
      case 0xE25:
      case 0xE26:
      case 0xE27:
      case 0xE28:
      case 0xE29:
      case 0xE2A:
      case 0xE2B:
      case 0xE2C:
      case 0xE2D:
      case 0xE2E:
      case 0xE2F:
      case 0xE30:
      case 0xE31:
      case 0xE32:
      case 0xE33:
      case 0xE34:
      case 0xE35:
      case 0xE36:
      case 0xE37:
      case 0xE38:
      case 0xE39:
      case 0xE3A:
      case 0xE3B:
      case 0xE3C:
      case 0xE3D:
      case 0xE3E:
      case 0xE3F:
      case 0xE40:
      case 0xE41:
      case 0x3250:
      case 0x3251:
      case 0x3252:
      case 0x3253:
      case 0x3254:
      case 0x3255:
      case 0x3256:
      case 0x3257:
      case 0x3258:
      case 0x3259:
      case 0x325A:
      case 0x325B:
      case 0x325C:
      case 0x325D:
      case 0x325E:
      case 0x325F:
      case 0x3260:
      case 0x3261:
      case 0x3262:
      case 0x3263:
      case 0x3264:
      case 0x3265:
      case 0x3266:
      case 0x3267:
      case 0x3268:
      case 0x3269:
      case 0x326A:
      case 0x326B:
      case 0x326C:
      case 0x326D:
      case 0x326E:
      case 0x326F:
      case 0x3270:
      case 0x3271:
      case 0x3272:
      case 0x3273:
      case 0x3274:
      case 0x3275:
      case 0x3276:
      case 0x3277:
      case 0x3278:
      case 0x3279:
      case 0x327A:
      case 0x327B:
      case 0x327C:
      case 0x327D:
      case 0x327E:
      case 0x327F:
      case 0x3280:
      case 0x3281:
      case 0x3282:
      case 0x3283:
      case 0x3284:
      case 0x3285:
        sub_1CBD9F148(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0xE42:
      case 0xE43:
      case 0xE44:
      case 0xE45:
      case 0xE46:
      case 0xE47:
      case 0xE48:
      case 0xE49:
      case 0xE4A:
      case 0xE4B:
      case 0xE4C:
      case 0xE4D:
      case 0xE4E:
      case 0xE4F:
      case 0xE50:
      case 0xE51:
      case 0xE52:
      case 0xE53:
      case 0x3286:
      case 0x3287:
      case 0x3288:
      case 0x3289:
      case 0x328A:
      case 0x328B:
      case 0x328C:
      case 0x328D:
      case 0x328E:
      case 0x328F:
      case 0x3290:
      case 0x3291:
      case 0x3292:
      case 0x3293:
      case 0x3294:
      case 0x3295:
      case 0x3296:
      case 0x3297:
        sub_1CBD8BF54((uint64_t)a1, a2, a3, a4);
        break;
      case 0xE54:
      case 0xE55:
      case 0xE56:
      case 0xE57:
      case 0xE58:
      case 0xE59:
      case 0xE5A:
      case 0xE5B:
      case 0xE5C:
      case 0xE5D:
      case 0xE5E:
      case 0xE5F:
      case 0xE60:
      case 0xE61:
      case 0xE62:
      case 0xE63:
      case 0xE64:
      case 0xE65:
      case 0x3298:
      case 0x3299:
      case 0x329A:
      case 0x329B:
      case 0x329C:
      case 0x329D:
      case 0x329E:
      case 0x329F:
      case 0x32A0:
      case 0x32A1:
      case 0x32A2:
      case 0x32A3:
      case 0x32A4:
      case 0x32A5:
      case 0x32A6:
      case 0x32A7:
      case 0x32A8:
      case 0x32A9:
        sub_1CBD9D980(a1, a2, a3, a4);
        break;
      case 0xE66:
      case 0xE67:
      case 0xE68:
      case 0xE69:
      case 0xE6A:
      case 0xE6B:
      case 0xE6C:
      case 0xE6D:
      case 0xE6E:
      case 0xE6F:
      case 0xE70:
      case 0xE71:
      case 0xE72:
      case 0xE73:
      case 0xE74:
      case 0xE75:
      case 0xE76:
      case 0xE77:
      case 0x32AA:
      case 0x32AB:
      case 0x32AC:
      case 0x32AD:
      case 0x32AE:
      case 0x32AF:
      case 0x32B0:
      case 0x32B1:
      case 0x32B2:
      case 0x32B3:
      case 0x32B4:
      case 0x32B5:
      case 0x32B6:
      case 0x32B7:
      case 0x32B8:
      case 0x32B9:
      case 0x32BA:
      case 0x32BB:
        sub_1CD442244(a1, a2, a3, a4);
        break;
      case 0xE78:
      case 0xE79:
      case 0xE7A:
      case 0xE7B:
      case 0xE7C:
      case 0xE7D:
      case 0xE7E:
      case 0xE7F:
      case 0xE80:
      case 0xE81:
      case 0xE82:
      case 0xE83:
      case 0xE84:
      case 0xE85:
      case 0xE86:
      case 0xE87:
      case 0xE88:
      case 0xE89:
      case 0x32BC:
      case 0x32BD:
      case 0x32BE:
      case 0x32BF:
      case 0x32C0:
      case 0x32C1:
      case 0x32C2:
      case 0x32C3:
      case 0x32C4:
      case 0x32C5:
      case 0x32C6:
      case 0x32C7:
      case 0x32C8:
      case 0x32C9:
      case 0x32CA:
      case 0x32CB:
      case 0x32CC:
      case 0x32CD:
        sub_1CD4423B8(a1, a2, a3, a4);
        break;
      case 0xE8A:
      case 0xE8B:
      case 0xE8C:
      case 0xE8D:
      case 0xE8E:
      case 0xE8F:
      case 0xE90:
      case 0xE91:
      case 0xE92:
      case 0xE93:
      case 0xE94:
      case 0xE95:
      case 0x32CE:
      case 0x32CF:
      case 0x32D0:
      case 0x32D1:
      case 0x32D2:
      case 0x32D3:
      case 0x32D4:
      case 0x32D5:
      case 0x32D6:
      case 0x32D7:
      case 0x32D8:
      case 0x32D9:
        sub_1CBD98D84(a1, a2, a3, a4);
        break;
      case 0xE96:
      case 0xE97:
      case 0xE98:
      case 0xE99:
      case 0x32DA:
      case 0x32DB:
      case 0x32DC:
      case 0x32DD:
        sub_1CD439FC4(a1, a2, a3, a4);
        break;
      case 0xE9A:
      case 0xE9E:
      case 0xEA2:
      case 0x32DE:
      case 0x32E2:
      case 0x32E6:
        sub_1CBD958D0(a1, a2, a3, a4);
        break;
      case 0xE9B:
      case 0xE9C:
      case 0xE9D:
      case 0xE9F:
      case 0xEA0:
      case 0xEA1:
      case 0xEA3:
      case 0xEA4:
      case 0xEA5:
      case 0xEA6:
      case 0xEA7:
      case 0xEA8:
      case 0xEA9:
      case 0xEAA:
      case 0xEAB:
      case 0xEAC:
      case 0xEAD:
      case 0xEAE:
      case 0x32DF:
      case 0x32E0:
      case 0x32E1:
      case 0x32E3:
      case 0x32E4:
      case 0x32E5:
      case 0x32E7:
      case 0x32E8:
      case 0x32E9:
      case 0x32EA:
      case 0x32EB:
      case 0x32EC:
      case 0x32ED:
      case 0x32EE:
      case 0x32EF:
      case 0x32F0:
      case 0x32F1:
      case 0x32F2:
        sub_1CBD95A70(a1, a2, a3, a4);
        break;
      case 0xEAF:
      case 0xEB0:
      case 0xEB1:
      case 0xEB2:
      case 0xEB3:
      case 0xEB4:
      case 0xEB5:
      case 0xEB6:
      case 0xEB7:
      case 0xEB8:
      case 0xEB9:
      case 0xEBA:
      case 0xEBB:
      case 0xEBC:
      case 0xEBD:
      case 0xEBE:
      case 0xEBF:
      case 0xEC0:
      case 0xEC1:
      case 0xEC2:
      case 0xEC3:
      case 0xEC4:
      case 0xEC5:
      case 0xEC6:
      case 0xEC7:
      case 0xEC8:
      case 0xEC9:
      case 0xECA:
      case 0xECB:
      case 0xECC:
      case 0xECD:
      case 0x32F3:
      case 0x32F4:
      case 0x32F5:
      case 0x32F6:
      case 0x32F7:
      case 0x32F8:
      case 0x32F9:
      case 0x32FA:
      case 0x32FB:
      case 0x32FC:
      case 0x32FD:
      case 0x32FE:
      case 0x32FF:
      case 0x3300:
      case 0x3301:
      case 0x3302:
      case 0x3303:
      case 0x3304:
      case 0x3305:
      case 0x3306:
      case 0x3307:
      case 0x3308:
      case 0x3309:
      case 0x330A:
      case 0x330B:
      case 0x330C:
      case 0x330D:
      case 0x330E:
      case 0x330F:
      case 0x3310:
      case 0x3311:
        sub_1CBD9DFF8(a1, (unsigned int *)a2, a3, a4);
        break;
      case 0xECE:
      case 0xECF:
      case 0xED0:
      case 0xED1:
      case 0xED2:
      case 0xED3:
      case 0xED4:
      case 0xED5:
      case 0xED6:
      case 0xED7:
      case 0xED8:
      case 0xED9:
      case 0xEDA:
      case 0xEDB:
      case 0xEDC:
      case 0xEDD:
      case 0xEDE:
      case 0xEDF:
      case 0xEE0:
      case 0xEE1:
      case 0xEE2:
      case 0xEE3:
      case 0xEE4:
      case 0xEE5:
      case 0xEE6:
      case 0xEE7:
      case 0xEE8:
      case 0xEE9:
      case 0xEEA:
      case 0xEEB:
      case 0xEEC:
      case 0xEED:
      case 0xEEE:
      case 0xEEF:
      case 0xEF0:
      case 0xEF1:
      case 0xEF2:
      case 0xEF3:
      case 0xEF4:
      case 0xEF5:
      case 0xEF6:
      case 0xEF7:
      case 0xEF8:
      case 0xEF9:
      case 0xEFA:
      case 0xEFB:
      case 0xEFC:
      case 0xEFD:
      case 0xEFE:
      case 0xEFF:
      case 0xF00:
      case 0xF01:
      case 0xF02:
      case 0xF03:
      case 0x3312:
      case 0x3313:
      case 0x3314:
      case 0x3315:
      case 0x3316:
      case 0x3317:
      case 0x3318:
      case 0x3319:
      case 0x331A:
      case 0x331B:
      case 0x331C:
      case 0x331D:
      case 0x331E:
      case 0x331F:
      case 0x3320:
      case 0x3321:
      case 0x3322:
      case 0x3323:
      case 0x3324:
      case 0x3325:
      case 0x3326:
      case 0x3327:
      case 0x3328:
      case 0x3329:
      case 0x332A:
      case 0x332B:
      case 0x332C:
      case 0x332D:
      case 0x332E:
      case 0x332F:
      case 0x3330:
      case 0x3331:
      case 0x3332:
      case 0x3333:
      case 0x3334:
      case 0x3335:
      case 0x3336:
      case 0x3337:
      case 0x3338:
      case 0x3339:
      case 0x333A:
      case 0x333B:
      case 0x333C:
      case 0x333D:
      case 0x333E:
      case 0x333F:
      case 0x3340:
      case 0x3341:
      case 0x3342:
      case 0x3343:
      case 0x3344:
      case 0x3345:
      case 0x3346:
      case 0x3347:
        sub_1CBD9E6C0(a1, a2, a3, a4);
        break;
      case 0xF04:
      case 0xF05:
      case 0xF06:
      case 0xF07:
      case 0xF08:
      case 0xF09:
      case 0xF0A:
      case 0xF0B:
      case 0xF0C:
      case 0xF0D:
      case 0xF0E:
      case 0xF0F:
      case 0xF10:
      case 0xF11:
      case 0xF12:
      case 0xF13:
      case 0xF14:
      case 0xF15:
      case 0xF16:
      case 0xF17:
      case 0xF18:
      case 0xF19:
      case 0xF1A:
      case 0xF1B:
      case 0xF1C:
      case 0xF1D:
      case 0xF1E:
      case 0xF1F:
      case 0xF20:
      case 0xF21:
      case 0xF22:
      case 0xF23:
      case 0xF24:
      case 0xF25:
      case 0xF26:
      case 0xF27:
      case 0xF28:
      case 0xF29:
      case 0xF2A:
      case 0xF2B:
      case 0xF2C:
      case 0xF2D:
      case 0xF2E:
      case 0xF2F:
      case 0xF30:
      case 0xF31:
      case 0xF32:
      case 0xF33:
      case 0xF34:
      case 0xF35:
      case 0xF36:
      case 0xF37:
      case 0xF38:
      case 0xF39:
      case 0xF3A:
      case 0xF3B:
      case 0xF3C:
      case 0xF3D:
      case 0xF3E:
      case 0xF3F:
      case 0xF40:
      case 0xF41:
      case 0xF42:
      case 0xF43:
      case 0xF44:
      case 0xF45:
      case 0xF46:
      case 0xF47:
      case 0xF48:
      case 0xF49:
      case 0xF4A:
      case 0xF4B:
      case 0xF4C:
      case 0xF4D:
      case 0xF4E:
      case 0xF4F:
      case 0xF50:
      case 0xF51:
      case 0xF52:
      case 0xF53:
      case 0xF54:
      case 0xF55:
      case 0xF56:
      case 0xF57:
      case 0xF58:
      case 0xF59:
      case 0xF5A:
      case 0xF5B:
      case 0xF5C:
      case 0xF5D:
      case 0xF5E:
      case 0xF5F:
      case 0xF60:
      case 0xF61:
      case 0xF62:
      case 0xF63:
      case 0xF64:
      case 0xF65:
      case 0xF66:
      case 0xF67:
      case 0xF68:
      case 0xF69:
      case 0xF6A:
      case 0xF6B:
      case 0xF6C:
      case 0xF6D:
      case 0xF6E:
      case 0xF6F:
      case 0x3348:
      case 0x3349:
      case 0x334A:
      case 0x334B:
      case 0x334C:
      case 0x334D:
      case 0x334E:
      case 0x334F:
      case 0x3350:
      case 0x3351:
      case 0x3352:
      case 0x3353:
      case 0x3354:
      case 0x3355:
      case 0x3356:
      case 0x3357:
      case 0x3358:
      case 0x3359:
      case 0x335A:
      case 0x335B:
      case 0x335C:
      case 0x335D:
      case 0x335E:
      case 0x335F:
      case 0x3360:
      case 0x3361:
      case 0x3362:
      case 0x3363:
      case 0x3364:
      case 0x3365:
      case 0x3366:
      case 0x3367:
      case 0x3368:
      case 0x3369:
      case 0x336A:
      case 0x336B:
      case 0x336C:
      case 0x336D:
      case 0x336E:
      case 0x336F:
      case 0x3370:
      case 0x3371:
      case 0x3372:
      case 0x3373:
      case 0x3374:
      case 0x3375:
      case 0x3376:
      case 0x3377:
      case 0x3378:
      case 0x3379:
      case 0x337A:
      case 0x337B:
      case 0x337C:
      case 0x337D:
      case 0x337E:
      case 0x337F:
      case 0x3380:
      case 0x3381:
      case 0x3382:
      case 0x3383:
      case 0x3384:
      case 0x3385:
      case 0x3386:
      case 0x3387:
      case 0x3388:
      case 0x3389:
      case 0x338A:
      case 0x338B:
      case 0x338C:
      case 0x338D:
      case 0x338E:
      case 0x338F:
      case 0x3390:
      case 0x3391:
      case 0x3392:
      case 0x3393:
      case 0x3394:
      case 0x3395:
      case 0x3396:
      case 0x3397:
      case 0x3398:
      case 0x3399:
      case 0x339A:
      case 0x339B:
      case 0x339C:
      case 0x339D:
      case 0x339E:
      case 0x339F:
      case 0x33A0:
      case 0x33A1:
      case 0x33A2:
      case 0x33A3:
      case 0x33A4:
      case 0x33A5:
      case 0x33A6:
      case 0x33A7:
      case 0x33A8:
      case 0x33A9:
      case 0x33AA:
      case 0x33AB:
      case 0x33AC:
      case 0x33AD:
      case 0x33AE:
      case 0x33AF:
      case 0x33B0:
      case 0x33B1:
      case 0x33B2:
      case 0x33B3:
        sub_1CBD92F80(a1, a2, a3, a4);
        break;
      case 0xF70:
      case 0xF71:
      case 0xF72:
      case 0xF73:
      case 0xF74:
      case 0xF75:
      case 0xF76:
      case 0xF77:
      case 0xF78:
      case 0xF79:
      case 0xF7A:
      case 0xF7B:
      case 0xF7C:
      case 0xF7D:
      case 0xF7E:
      case 0xF7F:
      case 0xF80:
      case 0xF81:
      case 0xF82:
      case 0xF83:
      case 0xF84:
      case 0xF85:
      case 0xF86:
      case 0xF87:
      case 0xF88:
      case 0xF89:
      case 0xF8A:
      case 0xF8B:
      case 0xF8C:
      case 0xF8D:
      case 0xF8E:
      case 0xF8F:
      case 0xF90:
      case 0xF91:
      case 0xF92:
      case 0xF93:
      case 0xF94:
      case 0xF95:
      case 0xF96:
      case 0xF97:
      case 0xF98:
      case 0xF99:
      case 0xF9A:
      case 0xF9B:
      case 0xF9C:
      case 0xF9D:
      case 0xF9E:
      case 0xF9F:
      case 0xFA0:
      case 0xFA1:
      case 0xFA2:
      case 0xFA3:
      case 0xFA4:
      case 0xFA5:
      case 0xFA6:
      case 0xFA7:
      case 0xFA8:
      case 0xFA9:
      case 0xFAA:
      case 0xFAB:
      case 0xFAC:
      case 0xFAD:
      case 0xFAE:
      case 0xFAF:
      case 0xFB0:
      case 0xFB1:
      case 0xFB2:
      case 0xFB3:
      case 0xFB4:
      case 0xFB5:
      case 0xFB6:
      case 0xFB7:
      case 0xFB8:
      case 0xFB9:
      case 0xFBA:
      case 0xFBB:
      case 0xFBC:
      case 0xFBD:
      case 0xFBE:
      case 0xFBF:
      case 0xFC0:
      case 0xFC1:
      case 0xFC2:
      case 0xFC3:
      case 0xFC4:
      case 0xFC5:
      case 0xFC6:
      case 0xFC7:
      case 0xFC8:
      case 0xFC9:
      case 0xFCA:
      case 0xFCB:
      case 0xFCC:
      case 0xFCD:
      case 0xFCE:
      case 0xFCF:
      case 0xFD0:
      case 0xFD1:
      case 0xFD2:
      case 0xFD3:
      case 0xFD4:
      case 0xFD5:
      case 0xFD6:
      case 0xFD7:
      case 0xFD8:
      case 0xFD9:
      case 0xFDA:
      case 0xFDB:
      case 0xFDC:
      case 0xFDD:
      case 0xFDE:
      case 0xFDF:
      case 0xFE0:
      case 0xFE1:
      case 0xFE2:
      case 0xFE3:
      case 0xFE4:
      case 0xFE5:
      case 0xFE6:
      case 0xFE7:
      case 0xFE8:
      case 0xFE9:
      case 0xFEA:
      case 0xFEB:
      case 0xFEC:
      case 0xFED:
      case 0xFEE:
      case 0xFEF:
      case 0xFF0:
      case 0xFF1:
      case 0xFF2:
      case 0xFF3:
      case 0xFF4:
      case 0xFF5:
      case 0xFF6:
      case 0xFF7:
      case 0xFF8:
      case 0xFF9:
      case 0xFFA:
      case 0xFFB:
      case 0xFFC:
      case 0xFFD:
      case 0xFFE:
      case 0xFFF:
      case 0x1000:
      case 0x1001:
      case 0x1002:
      case 0x1003:
      case 0x1004:
      case 0x1005:
      case 0x1006:
      case 0x1007:
      case 0x1008:
      case 0x1009:
      case 0x100A:
      case 0x100B:
      case 0x100C:
      case 0x100D:
      case 0x100E:
      case 0x100F:
      case 0x1010:
      case 0x1011:
      case 0x1012:
      case 0x1013:
      case 0x1014:
      case 0x1015:
      case 0x1016:
      case 0x1017:
      case 0x1018:
      case 0x1019:
      case 0x101A:
      case 0x101B:
      case 0x101C:
      case 0x101D:
      case 0x101E:
      case 0x101F:
      case 0x1020:
      case 0x1021:
      case 0x1022:
      case 0x1023:
      case 0x1024:
      case 0x1025:
      case 0x1026:
      case 0x1027:
      case 0x1028:
      case 0x1029:
      case 0x102A:
      case 0x102B:
      case 0x102C:
      case 0x102D:
      case 0x102E:
      case 0x102F:
      case 0x1030:
      case 0x1031:
      case 0x1032:
      case 0x1033:
      case 0x1034:
      case 0x1035:
      case 0x1036:
      case 0x1037:
      case 0x1038:
      case 0x1039:
      case 0x103A:
      case 0x103B:
      case 0x103C:
      case 0x103D:
      case 0x103E:
      case 0x103F:
      case 0x1040:
      case 0x1041:
      case 0x1042:
      case 0x1043:
      case 0x1044:
      case 0x1045:
      case 0x1046:
      case 0x1047:
      case 0x1048:
      case 0x1049:
      case 0x104A:
      case 0x104B:
      case 0x104C:
      case 0x104D:
      case 0x104E:
      case 0x104F:
      case 0x1050:
      case 0x1051:
      case 0x1052:
      case 0x1053:
      case 0x1054:
      case 0x1055:
      case 0x1056:
      case 0x1057:
      case 0x1058:
      case 0x1059:
      case 0x105A:
      case 0x105B:
      case 0x105C:
      case 0x105D:
      case 0x105E:
      case 0x105F:
      case 0x1060:
      case 0x1061:
      case 0x1062:
      case 0x1063:
      case 0x1064:
      case 0x1065:
      case 0x1066:
      case 0x1067:
      case 0x1068:
      case 0x1069:
      case 0x106A:
      case 0x106B:
      case 0x33B4:
      case 0x33B5:
      case 0x33B6:
      case 0x33B7:
      case 0x33B8:
      case 0x33B9:
      case 0x33BA:
      case 0x33BB:
      case 0x33BC:
      case 0x33BD:
      case 0x33BE:
      case 0x33BF:
      case 0x33C0:
      case 0x33C1:
      case 0x33C2:
      case 0x33C3:
      case 0x33C4:
      case 0x33C5:
      case 0x33C6:
      case 0x33C7:
      case 0x33C8:
      case 0x33C9:
      case 0x33CA:
      case 0x33CB:
      case 0x33CC:
      case 0x33CD:
      case 0x33CE:
      case 0x33CF:
      case 0x33D0:
      case 0x33D1:
      case 0x33D2:
      case 0x33D3:
      case 0x33D4:
      case 0x33D5:
      case 0x33D6:
      case 0x33D7:
      case 0x33D8:
      case 0x33D9:
      case 0x33DA:
      case 0x33DB:
      case 0x33DC:
      case 0x33DD:
      case 0x33DE:
      case 0x33DF:
      case 0x33E0:
      case 0x33E1:
      case 0x33E2:
      case 0x33E3:
      case 0x33E4:
      case 0x33E5:
      case 0x33E6:
      case 0x33E7:
      case 0x33E8:
      case 0x33E9:
      case 0x33EA:
      case 0x33EB:
      case 0x33EC:
      case 0x33ED:
      case 0x33EE:
      case 0x33EF:
      case 0x33F0:
      case 0x33F1:
      case 0x33F2:
      case 0x33F3:
      case 0x33F4:
      case 0x33F5:
      case 0x33F6:
      case 0x33F7:
      case 0x33F8:
      case 0x33F9:
      case 0x33FA:
      case 0x33FB:
      case 0x33FC:
      case 0x33FD:
      case 0x33FE:
      case 0x33FF:
      case 0x3400:
      case 0x3401:
      case 0x3402:
      case 0x3403:
      case 0x3404:
      case 0x3405:
      case 0x3406:
      case 0x3407:
      case 0x3408:
      case 0x3409:
      case 0x340A:
      case 0x340B:
      case 0x340C:
      case 0x340D:
      case 0x340E:
      case 0x340F:
      case 0x3410:
      case 0x3411:
      case 0x3412:
      case 0x3413:
      case 0x3414:
      case 0x3415:
      case 0x3416:
      case 0x3417:
      case 0x3418:
      case 0x3419:
      case 0x341A:
      case 0x341B:
      case 0x341C:
      case 0x341D:
      case 0x341E:
      case 0x341F:
      case 0x3420:
      case 0x3421:
      case 0x3422:
      case 0x3423:
      case 0x3424:
      case 0x3425:
      case 0x3426:
      case 0x3427:
      case 0x3428:
      case 0x3429:
      case 0x342A:
      case 0x342B:
      case 0x342C:
      case 0x342D:
      case 0x342E:
      case 0x342F:
      case 0x3430:
      case 0x3431:
      case 0x3432:
      case 0x3433:
      case 0x3434:
      case 0x3435:
      case 0x3436:
      case 0x3437:
      case 0x3438:
      case 0x3439:
      case 0x343A:
      case 0x343B:
      case 0x343C:
      case 0x343D:
      case 0x343E:
      case 0x343F:
      case 0x3440:
      case 0x3441:
      case 0x3442:
      case 0x3443:
      case 0x3444:
      case 0x3445:
      case 0x3446:
      case 0x3447:
      case 0x3448:
      case 0x3449:
      case 0x344A:
      case 0x344B:
      case 0x344C:
      case 0x344D:
      case 0x344E:
      case 0x344F:
      case 0x3450:
      case 0x3451:
      case 0x3452:
      case 0x3453:
      case 0x3454:
      case 0x3455:
      case 0x3456:
      case 0x3457:
      case 0x3458:
      case 0x3459:
      case 0x345A:
      case 0x345B:
      case 0x345C:
      case 0x345D:
      case 0x345E:
      case 0x345F:
      case 0x3460:
      case 0x3461:
      case 0x3462:
      case 0x3463:
      case 0x3464:
      case 0x3465:
      case 0x3466:
      case 0x3467:
      case 0x3468:
      case 0x3469:
      case 0x346A:
      case 0x346B:
      case 0x346C:
      case 0x346D:
      case 0x346E:
      case 0x346F:
      case 0x3470:
      case 0x3471:
      case 0x3472:
      case 0x3473:
      case 0x3474:
      case 0x3475:
      case 0x3476:
      case 0x3477:
      case 0x3478:
      case 0x3479:
      case 0x347A:
      case 0x347B:
      case 0x347C:
      case 0x347D:
      case 0x347E:
      case 0x347F:
      case 0x3480:
      case 0x3481:
      case 0x3482:
      case 0x3483:
      case 0x3484:
      case 0x3485:
      case 0x3486:
      case 0x3487:
      case 0x3488:
      case 0x3489:
      case 0x348A:
      case 0x348B:
      case 0x348C:
      case 0x348D:
      case 0x348E:
      case 0x348F:
      case 0x3490:
      case 0x3491:
      case 0x3492:
      case 0x3493:
      case 0x3494:
      case 0x3495:
      case 0x3496:
      case 0x3497:
      case 0x3498:
      case 0x3499:
      case 0x349A:
      case 0x349B:
      case 0x349C:
      case 0x349D:
      case 0x349E:
      case 0x349F:
      case 0x34A0:
      case 0x34A1:
      case 0x34A2:
      case 0x34A3:
      case 0x34A4:
      case 0x34A5:
      case 0x34A6:
      case 0x34A7:
      case 0x34A8:
      case 0x34A9:
      case 0x34AA:
      case 0x34AB:
      case 0x34AC:
      case 0x34AD:
      case 0x34AE:
      case 0x34AF:
        sub_1CBD91B54(a1, a2, a3, a4);
        break;
      case 0x106C:
      case 0x106D:
      case 0x106E:
      case 0x106F:
      case 0x1070:
      case 0x1071:
      case 0x1072:
      case 0x1073:
      case 0x1074:
      case 0x1075:
      case 0x1076:
      case 0x1077:
      case 0x1078:
      case 0x1079:
      case 0x107A:
      case 0x107B:
      case 0x107C:
      case 0x107D:
      case 0x107E:
      case 0x107F:
      case 0x1080:
      case 0x1081:
      case 0x1082:
      case 0x1083:
      case 0x1084:
      case 0x1085:
      case 0x1086:
      case 0x1087:
      case 0x1088:
      case 0x1089:
      case 0x108A:
      case 0x108B:
      case 0x108C:
      case 0x108D:
      case 0x108E:
      case 0x108F:
      case 0x1090:
      case 0x1091:
      case 0x1092:
      case 0x1093:
      case 0x1094:
      case 0x1095:
      case 0x1096:
      case 0x1097:
      case 0x1098:
      case 0x1099:
      case 0x109A:
      case 0x109B:
      case 0x109C:
      case 0x109D:
      case 0x109E:
      case 0x109F:
      case 0x10A0:
      case 0x10A1:
      case 0x10A2:
      case 0x10A3:
      case 0x10A4:
      case 0x10A5:
      case 0x10A6:
      case 0x10A7:
      case 0x10A8:
      case 0x10A9:
      case 0x10AA:
      case 0x10AB:
      case 0x10AC:
      case 0x10AD:
      case 0x10AE:
      case 0x10AF:
      case 0x10B0:
      case 0x10B1:
      case 0x10B2:
      case 0x10B3:
      case 0x10B4:
      case 0x10B5:
      case 0x10B6:
      case 0x10B7:
      case 0x10B8:
      case 0x10B9:
      case 0x10BA:
      case 0x10BB:
      case 0x10BC:
      case 0x10BD:
      case 0x10BE:
      case 0x10BF:
      case 0x10C0:
      case 0x10C1:
      case 0x10C2:
      case 0x10C3:
      case 0x10C4:
      case 0x10C5:
      case 0x10C6:
      case 0x10C7:
      case 0x10C8:
      case 0x10C9:
      case 0x10CA:
      case 0x10CB:
      case 0x10CC:
      case 0x10CD:
      case 0x10CE:
      case 0x10CF:
      case 0x10D0:
      case 0x10D1:
      case 0x10D2:
      case 0x10D3:
      case 0x10D4:
      case 0x10D5:
      case 0x10D6:
      case 0x10D7:
      case 0x10D8:
      case 0x10D9:
      case 0x10DA:
      case 0x10DB:
      case 0x10DC:
      case 0x10DD:
      case 0x10DE:
      case 0x10DF:
      case 0x10E0:
      case 0x10E1:
      case 0x10E2:
      case 0x10E3:
      case 0x10E4:
      case 0x10E5:
      case 0x10E6:
      case 0x10E7:
      case 0x10E8:
      case 0x10E9:
      case 0x34B0:
      case 0x34B1:
      case 0x34B2:
      case 0x34B3:
      case 0x34B4:
      case 0x34B5:
      case 0x34B6:
      case 0x34B7:
      case 0x34B8:
      case 0x34B9:
      case 0x34BA:
      case 0x34BB:
      case 0x34BC:
      case 0x34BD:
      case 0x34BE:
      case 0x34BF:
      case 0x34C0:
      case 0x34C1:
      case 0x34C2:
      case 0x34C3:
      case 0x34C4:
      case 0x34C5:
      case 0x34C6:
      case 0x34C7:
      case 0x34C8:
      case 0x34C9:
      case 0x34CA:
      case 0x34CB:
      case 0x34CC:
      case 0x34CD:
      case 0x34CE:
      case 0x34CF:
      case 0x34D0:
      case 0x34D1:
      case 0x34D2:
      case 0x34D3:
      case 0x34D4:
      case 0x34D5:
      case 0x34D6:
      case 0x34D7:
      case 0x34D8:
      case 0x34D9:
      case 0x34DA:
      case 0x34DB:
      case 0x34DC:
      case 0x34DD:
      case 0x34DE:
      case 0x34DF:
      case 0x34E0:
      case 0x34E1:
      case 0x34E2:
      case 0x34E3:
      case 0x34E4:
      case 0x34E5:
      case 0x34E6:
      case 0x34E7:
      case 0x34E8:
      case 0x34E9:
      case 0x34EA:
      case 0x34EB:
      case 0x34EC:
      case 0x34ED:
      case 0x34EE:
      case 0x34EF:
      case 0x34F0:
      case 0x34F1:
      case 0x34F2:
      case 0x34F3:
      case 0x34F4:
      case 0x34F5:
      case 0x34F6:
      case 0x34F7:
      case 0x34F8:
      case 0x34F9:
      case 0x34FA:
      case 0x34FB:
      case 0x34FC:
      case 0x34FD:
      case 0x34FE:
      case 0x34FF:
      case 0x3500:
      case 0x3501:
      case 0x3502:
      case 0x3503:
      case 0x3504:
      case 0x3505:
      case 0x3506:
      case 0x3507:
      case 0x3508:
      case 0x3509:
      case 0x350A:
      case 0x350B:
      case 0x350C:
      case 0x350D:
      case 0x350E:
      case 0x350F:
      case 0x3510:
      case 0x3511:
      case 0x3512:
      case 0x3513:
      case 0x3514:
      case 0x3515:
      case 0x3516:
      case 0x3517:
      case 0x3518:
      case 0x3519:
      case 0x351A:
      case 0x351B:
      case 0x351C:
      case 0x351D:
      case 0x351E:
      case 0x351F:
      case 0x3520:
      case 0x3521:
      case 0x3522:
      case 0x3523:
      case 0x3524:
      case 0x3525:
      case 0x3526:
      case 0x3527:
      case 0x3528:
      case 0x3529:
      case 0x352A:
      case 0x352B:
      case 0x352C:
      case 0x352D:
        sub_1CBD92C1C(a1, (unsigned int *)a2, a3, a4);
        break;
      case 0x10EA:
      case 0x10EB:
      case 0x10EC:
      case 0x10ED:
      case 0x10EE:
      case 0x10EF:
      case 0x352E:
      case 0x352F:
      case 0x3530:
      case 0x3531:
      case 0x3532:
      case 0x3533:
        sub_1CBD915E8(a1, a2, a3, a4);
        break;
      case 0x10F0:
      case 0x10F1:
      case 0x10F2:
      case 0x3534:
      case 0x3535:
      case 0x3536:
        sub_1CD4380E4(a1, a2, a3, a4);
        break;
      case 0x10F3:
      case 0x10F4:
      case 0x10F5:
      case 0x3537:
      case 0x3538:
      case 0x3539:
        sub_1CD43A164(a1, a2, a3, a4);
        break;
      case 0x10F6:
      case 0x10F7:
      case 0x10F8:
      case 0x10F9:
      case 0x10FA:
      case 0x10FB:
      case 0x353A:
      case 0x353B:
      case 0x353C:
      case 0x353D:
      case 0x353E:
      case 0x353F:
        sub_1CBD99C84(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x10FC:
      case 0x10FD:
      case 0x10FE:
      case 0x10FF:
      case 0x1100:
      case 0x1101:
      case 0x3540:
      case 0x3541:
      case 0x3542:
      case 0x3543:
      case 0x3544:
      case 0x3545:
        sub_1CBD99330(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x1102:
      case 0x1103:
      case 0x1104:
      case 0x1105:
      case 0x1106:
      case 0x1107:
      case 0x3546:
      case 0x3547:
      case 0x3548:
      case 0x3549:
      case 0x354A:
      case 0x354B:
        sub_1CBD998E8((uint64_t)a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x1108:
      case 0x354C:
        sub_1CBD85D40(a1, a2, a3, a4);
        break;
      case 0x1109:
      case 0x110A:
      case 0x110B:
      case 0x110C:
      case 0x110D:
      case 0x110E:
      case 0x110F:
      case 0x1110:
      case 0x1111:
      case 0x1112:
      case 0x1113:
      case 0x1114:
      case 0x1115:
      case 0x1116:
      case 0x1117:
      case 0x1118:
      case 0x1119:
      case 0x111A:
      case 0x354D:
      case 0x354E:
      case 0x354F:
      case 0x3550:
      case 0x3551:
      case 0x3552:
      case 0x3553:
      case 0x3554:
      case 0x3555:
      case 0x3556:
      case 0x3557:
      case 0x3558:
      case 0x3559:
      case 0x355A:
      case 0x355B:
      case 0x355C:
      case 0x355D:
      case 0x355E:
        sub_1CD433A78(a1, a2, a3, a4);
        break;
      case 0x111B:
      case 0x111C:
      case 0x111D:
      case 0x111E:
      case 0x111F:
      case 0x1120:
      case 0x1121:
      case 0x1122:
      case 0x1123:
      case 0x355F:
      case 0x3560:
      case 0x3561:
      case 0x3562:
      case 0x3563:
      case 0x3564:
      case 0x3565:
      case 0x3566:
      case 0x3567:
        sub_1CD433DE4(a1, a2, a3, a4);
        break;
      case 0x1124:
      case 0x1125:
      case 0x1126:
      case 0x1127:
      case 0x1128:
      case 0x1129:
      case 0x112A:
      case 0x112B:
      case 0x112C:
      case 0x112D:
      case 0x112E:
      case 0x112F:
      case 0x1130:
      case 0x1131:
      case 0x1132:
      case 0x1133:
      case 0x1134:
      case 0x1135:
      case 0x1136:
      case 0x1137:
      case 0x1138:
      case 0x1139:
      case 0x113A:
      case 0x113B:
      case 0x113C:
      case 0x113D:
      case 0x113E:
      case 0x113F:
      case 0x1140:
      case 0x1141:
      case 0x1142:
      case 0x1143:
      case 0x1144:
      case 0x1145:
      case 0x1146:
      case 0x1147:
      case 0x1148:
      case 0x1149:
      case 0x114A:
      case 0x114B:
      case 0x114C:
      case 0x114D:
      case 0x114E:
      case 0x114F:
      case 0x1150:
      case 0x1151:
      case 0x1152:
      case 0x1153:
      case 0x1154:
      case 0x1155:
      case 0x3568:
      case 0x3569:
      case 0x356A:
      case 0x356B:
      case 0x356C:
      case 0x356D:
      case 0x356E:
      case 0x356F:
      case 0x3570:
      case 0x3571:
      case 0x3572:
      case 0x3573:
      case 0x3574:
      case 0x3575:
      case 0x3576:
      case 0x3577:
      case 0x3578:
      case 0x3579:
      case 0x357A:
      case 0x357B:
      case 0x357C:
      case 0x357D:
      case 0x357E:
      case 0x357F:
      case 0x3580:
      case 0x3581:
      case 0x3582:
      case 0x3583:
      case 0x3584:
      case 0x3585:
      case 0x3586:
      case 0x3587:
      case 0x3588:
      case 0x3589:
      case 0x358A:
      case 0x358B:
      case 0x358C:
      case 0x358D:
      case 0x358E:
      case 0x358F:
      case 0x3590:
      case 0x3591:
      case 0x3592:
      case 0x3593:
      case 0x3594:
      case 0x3595:
      case 0x3596:
      case 0x3597:
      case 0x3598:
      case 0x3599:
        sub_1CBD860E4(a1, a2, a3, a4);
        break;
      case 0x1156:
      case 0x1157:
      case 0x1158:
      case 0x1159:
      case 0x115A:
      case 0x115B:
      case 0x115C:
      case 0x115D:
      case 0x115E:
      case 0x115F:
      case 0x1160:
      case 0x1161:
      case 0x1162:
      case 0x1163:
      case 0x1164:
      case 0x1165:
      case 0x1166:
      case 0x1167:
      case 0x1168:
      case 0x1169:
      case 0x116A:
      case 0x116B:
      case 0x116C:
      case 0x116D:
      case 0x116E:
      case 0x116F:
      case 0x1170:
      case 0x1171:
      case 0x1172:
      case 0x1173:
      case 0x1174:
      case 0x1175:
      case 0x1176:
      case 0x1177:
      case 0x1178:
      case 0x1179:
      case 0x117A:
      case 0x117B:
      case 0x117C:
      case 0x117D:
      case 0x117E:
      case 0x117F:
      case 0x1180:
      case 0x1181:
      case 0x1182:
      case 0x1183:
      case 0x1184:
      case 0x1185:
      case 0x1186:
      case 0x1187:
      case 0x1188:
      case 0x1189:
      case 0x118A:
      case 0x118B:
      case 0x359A:
      case 0x359B:
      case 0x359C:
      case 0x359D:
      case 0x359E:
      case 0x359F:
      case 0x35A0:
      case 0x35A1:
      case 0x35A2:
      case 0x35A3:
      case 0x35A4:
      case 0x35A5:
      case 0x35A6:
      case 0x35A7:
      case 0x35A8:
      case 0x35A9:
      case 0x35AA:
      case 0x35AB:
      case 0x35AC:
      case 0x35AD:
      case 0x35AE:
      case 0x35AF:
      case 0x35B0:
      case 0x35B1:
      case 0x35B2:
      case 0x35B3:
      case 0x35B4:
      case 0x35B5:
      case 0x35B6:
      case 0x35B7:
      case 0x35B8:
      case 0x35B9:
      case 0x35BA:
      case 0x35BB:
      case 0x35BC:
      case 0x35BD:
      case 0x35BE:
      case 0x35BF:
      case 0x35C0:
      case 0x35C1:
      case 0x35C2:
      case 0x35C3:
      case 0x35C4:
      case 0x35C5:
      case 0x35C6:
      case 0x35C7:
      case 0x35C8:
      case 0x35C9:
      case 0x35CA:
      case 0x35CB:
      case 0x35CC:
      case 0x35CD:
      case 0x35CE:
      case 0x35CF:
        sub_1CBD9F484(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x118C:
      case 0x118D:
      case 0x118E:
      case 0x118F:
      case 0x1190:
      case 0x1191:
      case 0x1192:
      case 0x1193:
      case 0x1194:
      case 0x1195:
      case 0x1196:
      case 0x1197:
      case 0x1198:
      case 0x1199:
      case 0x119A:
      case 0x119B:
      case 0x119C:
      case 0x119D:
      case 0x35D0:
      case 0x35D1:
      case 0x35D2:
      case 0x35D3:
      case 0x35D4:
      case 0x35D5:
      case 0x35D6:
      case 0x35D7:
      case 0x35D8:
      case 0x35D9:
      case 0x35DA:
      case 0x35DB:
      case 0x35DC:
      case 0x35DD:
      case 0x35DE:
      case 0x35DF:
      case 0x35E0:
      case 0x35E1:
        sub_1CBD8C1BC(a1, a2, a3, a4);
        break;
      case 0x119E:
      case 0x119F:
      case 0x11A0:
      case 0x11A1:
      case 0x35E2:
      case 0x35E3:
      case 0x35E4:
      case 0x35E5:
        sub_1CD4420A8(a1, a2, a3, a4);
        break;
      case 0x11A2:
      case 0x11A3:
      case 0x11A4:
      case 0x11A5:
      case 0x35E6:
      case 0x35E7:
      case 0x35E8:
      case 0x35E9:
        sub_1CBD9DC98(a1, a2, a3, a4);
        break;
      case 0x11A6:
      case 0x11A7:
      case 0x11A8:
      case 0x11A9:
      case 0x35EA:
      case 0x35EB:
      case 0x35EC:
      case 0x35ED:
        sub_1CD4426C4(a1, a2, a3, a4);
        break;
      case 0x11AA:
      case 0x11AB:
      case 0x11AC:
      case 0x11AD:
      case 0x35EE:
      case 0x35EF:
      case 0x35F0:
      case 0x35F1:
        sub_1CD44252C(a1, a2, a3, a4);
        break;
      case 0x11AE:
      case 0x11AF:
      case 0x11B0:
      case 0x11B1:
      case 0x35F2:
      case 0x35F3:
      case 0x35F4:
      case 0x35F5:
        sub_1CD4429F8(a1, a2, a3, a4);
        break;
      case 0x11B2:
      case 0x11B3:
      case 0x11B4:
      case 0x11B5:
      case 0x35F6:
      case 0x35F7:
      case 0x35F8:
      case 0x35F9:
        sub_1CD442860(a1, a2, a3, a4);
        break;
      case 0x11B6:
      case 0x11B7:
      case 0x11B8:
      case 0x11B9:
      case 0x11BA:
      case 0x11BB:
      case 0x11BC:
      case 0x11BD:
      case 0x11BE:
      case 0x11BF:
      case 0x11C0:
      case 0x11C1:
      case 0x11C2:
      case 0x11C3:
      case 0x11C4:
      case 0x11C5:
      case 0x11C6:
      case 0x11C7:
      case 0x11C8:
      case 0x11C9:
      case 0x11CA:
      case 0x11CB:
      case 0x11CC:
      case 0x11CD:
      case 0x11CE:
      case 0x11CF:
      case 0x11D0:
      case 0x11D1:
      case 0x11D2:
      case 0x11D3:
      case 0x11D4:
      case 0x11D5:
      case 0x11D6:
      case 0x11D7:
      case 0x11D8:
      case 0x11D9:
      case 0x11DA:
      case 0x11DB:
      case 0x11DC:
      case 0x11DD:
      case 0x11DE:
      case 0x11DF:
      case 0x11E0:
      case 0x11E1:
      case 0x11E2:
      case 0x11E3:
      case 0x11E4:
      case 0x11E5:
      case 0x11E6:
      case 0x11E7:
      case 0x11E8:
      case 0x11E9:
      case 0x11EA:
      case 0x11EB:
      case 0x35FA:
      case 0x35FB:
      case 0x35FC:
      case 0x35FD:
      case 0x35FE:
      case 0x35FF:
      case 0x3600:
      case 0x3601:
      case 0x3602:
      case 0x3603:
      case 0x3604:
      case 0x3605:
      case 0x3606:
      case 0x3607:
      case 0x3608:
      case 0x3609:
      case 0x360A:
      case 0x360B:
      case 0x360C:
      case 0x360D:
      case 0x360E:
      case 0x360F:
      case 0x3610:
      case 0x3611:
      case 0x3612:
      case 0x3613:
      case 0x3614:
      case 0x3615:
      case 0x3616:
      case 0x3617:
      case 0x3618:
      case 0x3619:
      case 0x361A:
      case 0x361B:
      case 0x361C:
      case 0x361D:
      case 0x361E:
      case 0x361F:
      case 0x3620:
      case 0x3621:
      case 0x3622:
      case 0x3623:
      case 0x3624:
      case 0x3625:
      case 0x3626:
      case 0x3627:
      case 0x3628:
      case 0x3629:
      case 0x362A:
      case 0x362B:
      case 0x362C:
      case 0x362D:
      case 0x362E:
      case 0x362F:
        sub_1CD434280(a1, a2, a3, a4);
        break;
      case 0x11EC:
      case 0x11ED:
      case 0x11EE:
      case 0x11EF:
      case 0x11F0:
      case 0x11F1:
      case 0x11F2:
      case 0x11F3:
      case 0x11F4:
      case 0x11F5:
      case 0x11F6:
      case 0x11F7:
      case 0x11F8:
      case 0x11F9:
      case 0x11FA:
      case 0x11FB:
      case 0x11FC:
      case 0x11FD:
      case 0x11FE:
      case 0x11FF:
      case 0x1200:
      case 0x1201:
      case 0x1202:
      case 0x1203:
      case 0x1204:
      case 0x1205:
      case 0x1206:
      case 0x3630:
      case 0x3631:
      case 0x3632:
      case 0x3633:
      case 0x3634:
      case 0x3635:
      case 0x3636:
      case 0x3637:
      case 0x3638:
      case 0x3639:
      case 0x363A:
      case 0x363B:
      case 0x363C:
      case 0x363D:
      case 0x363E:
      case 0x363F:
      case 0x3640:
      case 0x3641:
      case 0x3642:
      case 0x3643:
      case 0x3644:
      case 0x3645:
      case 0x3646:
      case 0x3647:
      case 0x3648:
      case 0x3649:
      case 0x364A:
        sub_1CD43465C(a1, a2, a3, a4);
        break;
      case 0x1207:
      case 0x1208:
      case 0x1209:
      case 0x120A:
      case 0x120B:
      case 0x120C:
      case 0x120D:
      case 0x120E:
      case 0x120F:
      case 0x1210:
      case 0x1211:
      case 0x1212:
      case 0x1213:
      case 0x1214:
      case 0x1215:
      case 0x1216:
      case 0x1217:
      case 0x1218:
      case 0x1219:
      case 0x121A:
      case 0x121B:
      case 0x121C:
      case 0x121D:
      case 0x121E:
      case 0x121F:
      case 0x1220:
      case 0x1221:
      case 0x1222:
      case 0x1223:
      case 0x1224:
      case 0x1225:
      case 0x1226:
      case 0x1227:
      case 0x1228:
      case 0x1229:
      case 0x122A:
      case 0x122B:
      case 0x122C:
      case 0x122D:
      case 0x122E:
      case 0x122F:
      case 0x1230:
      case 0x1231:
      case 0x1232:
      case 0x1233:
      case 0x1234:
      case 0x1235:
      case 0x1236:
      case 0x1237:
      case 0x1238:
      case 0x1239:
      case 0x123A:
      case 0x123B:
      case 0x123C:
      case 0x123D:
      case 0x123E:
      case 0x123F:
      case 0x1240:
      case 0x1241:
      case 0x1242:
      case 0x1243:
      case 0x1244:
      case 0x1245:
      case 0x1246:
      case 0x1247:
      case 0x1248:
      case 0x1249:
      case 0x124A:
      case 0x124B:
      case 0x124C:
      case 0x124D:
      case 0x124E:
      case 0x124F:
      case 0x1250:
      case 0x1251:
      case 0x1252:
      case 0x1253:
      case 0x1254:
      case 0x1255:
      case 0x1256:
      case 0x1257:
      case 0x1258:
      case 0x1259:
      case 0x125A:
      case 0x125B:
      case 0x125C:
      case 0x125D:
      case 0x125E:
      case 0x125F:
      case 0x1260:
      case 0x1261:
      case 0x1262:
      case 0x1263:
      case 0x1264:
      case 0x1265:
      case 0x1266:
      case 0x1267:
      case 0x1268:
      case 0x1269:
      case 0x126A:
      case 0x126B:
      case 0x126C:
      case 0x126D:
      case 0x126E:
      case 0x126F:
      case 0x1270:
      case 0x1271:
      case 0x1272:
      case 0x1273:
      case 0x1274:
      case 0x1275:
      case 0x1276:
      case 0x1277:
      case 0x1278:
      case 0x1279:
      case 0x127A:
      case 0x127B:
      case 0x127C:
      case 0x127D:
      case 0x127E:
      case 0x127F:
      case 0x1280:
      case 0x1281:
      case 0x1282:
      case 0x1283:
      case 0x1284:
      case 0x364B:
      case 0x364C:
      case 0x364D:
      case 0x364E:
      case 0x364F:
      case 0x3650:
      case 0x3651:
      case 0x3652:
      case 0x3653:
      case 0x3654:
      case 0x3655:
      case 0x3656:
      case 0x3657:
      case 0x3658:
      case 0x3659:
      case 0x365A:
      case 0x365B:
      case 0x365C:
      case 0x365D:
      case 0x365E:
      case 0x365F:
      case 0x3660:
      case 0x3661:
      case 0x3662:
      case 0x3663:
      case 0x3664:
      case 0x3665:
      case 0x3666:
      case 0x3667:
      case 0x3668:
      case 0x3669:
      case 0x366A:
      case 0x366B:
      case 0x366C:
      case 0x366D:
      case 0x366E:
      case 0x366F:
      case 0x3670:
      case 0x3671:
      case 0x3672:
      case 0x3673:
      case 0x3674:
      case 0x3675:
      case 0x3676:
      case 0x3677:
      case 0x3678:
      case 0x3679:
      case 0x367A:
      case 0x367B:
      case 0x367C:
      case 0x367D:
      case 0x367E:
      case 0x367F:
      case 0x3680:
      case 0x3681:
      case 0x3682:
      case 0x3683:
      case 0x3684:
      case 0x3685:
      case 0x3686:
      case 0x3687:
      case 0x3688:
      case 0x3689:
      case 0x368A:
      case 0x368B:
      case 0x368C:
      case 0x368D:
      case 0x368E:
      case 0x368F:
      case 0x3690:
      case 0x3691:
      case 0x3692:
      case 0x3693:
      case 0x3694:
      case 0x3695:
      case 0x3696:
      case 0x3697:
      case 0x3698:
      case 0x3699:
      case 0x369A:
      case 0x369B:
      case 0x369C:
      case 0x369D:
      case 0x369E:
      case 0x369F:
      case 0x36A0:
      case 0x36A1:
      case 0x36A2:
      case 0x36A3:
      case 0x36A4:
      case 0x36A5:
      case 0x36A6:
      case 0x36A7:
      case 0x36A8:
      case 0x36A9:
      case 0x36AA:
      case 0x36AB:
      case 0x36AC:
      case 0x36AD:
      case 0x36AE:
      case 0x36AF:
      case 0x36B0:
      case 0x36B1:
      case 0x36B2:
      case 0x36B3:
      case 0x36B4:
      case 0x36B5:
      case 0x36B6:
      case 0x36B7:
      case 0x36B8:
      case 0x36B9:
      case 0x36BA:
      case 0x36BB:
      case 0x36BC:
      case 0x36BD:
      case 0x36BE:
      case 0x36BF:
      case 0x36C0:
      case 0x36C1:
      case 0x36C2:
      case 0x36C3:
      case 0x36C4:
      case 0x36C5:
      case 0x36C6:
      case 0x36C7:
      case 0x36C8:
        sub_1CBD86C0C(a1, a2, a3, a4);
        break;
      case 0x1285:
      case 0x1286:
      case 0x36C9:
      case 0x36CA:
        sub_1CBD8FB94(a1, a2, a3, a4);
        break;
      case 0x1287:
      case 0x1288:
      case 0x1289:
      case 0x128A:
      case 0x128B:
      case 0x128C:
      case 0x128D:
      case 0x128E:
      case 0x128F:
      case 0x1290:
      case 0x1291:
      case 0x1292:
      case 0x1293:
      case 0x1294:
      case 0x1295:
      case 0x1296:
      case 0x36CB:
      case 0x36CC:
      case 0x36CD:
      case 0x36CE:
      case 0x36CF:
      case 0x36D0:
      case 0x36D1:
      case 0x36D2:
      case 0x36D3:
      case 0x36D4:
      case 0x36D5:
      case 0x36D6:
      case 0x36D7:
      case 0x36D8:
      case 0x36D9:
      case 0x36DA:
        sub_1CBD98628(a1, a2, a3, (void *)a4);
        break;
      case 0x1297:
      case 0x1298:
      case 0x1299:
      case 0x129A:
      case 0x129B:
      case 0x129C:
      case 0x129D:
      case 0x129E:
      case 0x129F:
      case 0x12A0:
      case 0x12A1:
      case 0x12A2:
      case 0x12A3:
      case 0x12A4:
      case 0x12A5:
      case 0x12A6:
      case 0x36DB:
      case 0x36DC:
      case 0x36DD:
      case 0x36DE:
      case 0x36DF:
      case 0x36E0:
      case 0x36E1:
      case 0x36E2:
      case 0x36E3:
      case 0x36E4:
      case 0x36E5:
      case 0x36E6:
      case 0x36E7:
      case 0x36E8:
      case 0x36E9:
      case 0x36EA:
        sub_1CBD989D4((int *)a1, a2, a3, (void *)a4);
        break;
      case 0x12A7:
      case 0x12A8:
      case 0x12A9:
      case 0x12AA:
      case 0x12AB:
      case 0x12AC:
      case 0x12AD:
      case 0x12AE:
      case 0x12AF:
      case 0x12B0:
      case 0x12B1:
      case 0x12B2:
      case 0x12B3:
      case 0x12B4:
      case 0x12B5:
      case 0x12B6:
      case 0x12B7:
      case 0x12B8:
      case 0x12B9:
      case 0x12BA:
      case 0x12BB:
      case 0x12BC:
      case 0x12BD:
      case 0x12BE:
      case 0x12BF:
      case 0x12C0:
      case 0x12C1:
      case 0x12C2:
      case 0x12C3:
      case 0x12C4:
      case 0x12C5:
      case 0x12C6:
      case 0x12C7:
      case 0x12C8:
      case 0x12C9:
      case 0x12CA:
      case 0x12CB:
      case 0x12CC:
      case 0x12CD:
      case 0x12CE:
      case 0x12CF:
      case 0x12D0:
      case 0x12D1:
      case 0x12D2:
      case 0x12D3:
      case 0x12D4:
      case 0x12D5:
      case 0x12D6:
      case 0x12D7:
      case 0x12D8:
      case 0x12D9:
      case 0x12DA:
      case 0x12DB:
      case 0x12DC:
      case 0x12DD:
      case 0x12DE:
      case 0x12DF:
      case 0x12E0:
      case 0x12E1:
      case 0x12E2:
      case 0x12E3:
      case 0x12E4:
      case 0x12E5:
      case 0x12E6:
      case 0x12E7:
      case 0x12E8:
      case 0x12E9:
      case 0x12EA:
      case 0x12EB:
      case 0x12EC:
      case 0x12ED:
      case 0x12EE:
      case 0x12EF:
      case 0x12F0:
      case 0x12F1:
      case 0x12F2:
      case 0x12F3:
      case 0x12F4:
      case 0x12F5:
      case 0x12F6:
      case 0x12F7:
      case 0x36EB:
      case 0x36EC:
      case 0x36ED:
      case 0x36EE:
      case 0x36EF:
      case 0x36F0:
      case 0x36F1:
      case 0x36F2:
      case 0x36F3:
      case 0x36F4:
      case 0x36F5:
      case 0x36F6:
      case 0x36F7:
      case 0x36F8:
      case 0x36F9:
      case 0x36FA:
      case 0x36FB:
      case 0x36FC:
      case 0x36FD:
      case 0x36FE:
      case 0x36FF:
      case 0x3700:
      case 0x3701:
      case 0x3702:
      case 0x3703:
      case 0x3704:
      case 0x3705:
      case 0x3706:
      case 0x3707:
      case 0x3708:
      case 0x3709:
      case 0x370A:
      case 0x370B:
      case 0x370C:
      case 0x370D:
      case 0x370E:
      case 0x370F:
      case 0x3710:
      case 0x3711:
      case 0x3712:
      case 0x3713:
      case 0x3714:
      case 0x3715:
      case 0x3716:
      case 0x3717:
      case 0x3718:
      case 0x3719:
      case 0x371A:
      case 0x371B:
      case 0x371C:
      case 0x371D:
      case 0x371E:
      case 0x371F:
      case 0x3720:
      case 0x3721:
      case 0x3722:
      case 0x3723:
      case 0x3724:
      case 0x3725:
      case 0x3726:
      case 0x3727:
      case 0x3728:
      case 0x3729:
      case 0x372A:
      case 0x372B:
      case 0x372C:
      case 0x372D:
      case 0x372E:
      case 0x372F:
      case 0x3730:
      case 0x3731:
      case 0x3732:
      case 0x3733:
      case 0x3734:
      case 0x3735:
      case 0x3736:
      case 0x3737:
      case 0x3738:
      case 0x3739:
      case 0x373A:
      case 0x373B:
        sub_1CD4348AC(a1, a2, a3, a4);
        break;
      case 0x12F8:
      case 0x12F9:
      case 0x12FA:
      case 0x12FB:
      case 0x12FC:
      case 0x12FD:
      case 0x12FE:
      case 0x12FF:
      case 0x1300:
      case 0x1301:
      case 0x1302:
      case 0x1303:
      case 0x1304:
      case 0x1305:
      case 0x1306:
      case 0x1307:
      case 0x1308:
      case 0x1309:
      case 0x130A:
      case 0x130B:
      case 0x130C:
      case 0x130D:
      case 0x130E:
      case 0x130F:
      case 0x1310:
      case 0x1311:
      case 0x1312:
      case 0x1313:
      case 0x1314:
      case 0x1315:
      case 0x1316:
      case 0x1317:
      case 0x1318:
      case 0x1319:
      case 0x131A:
      case 0x131B:
      case 0x131C:
      case 0x131D:
      case 0x131E:
      case 0x131F:
      case 0x1320:
      case 0x1321:
      case 0x1322:
      case 0x1323:
      case 0x1324:
      case 0x1325:
      case 0x1326:
      case 0x1327:
      case 0x1328:
      case 0x1329:
      case 0x132A:
      case 0x132B:
      case 0x132C:
      case 0x132D:
      case 0x132E:
      case 0x132F:
      case 0x1330:
      case 0x1331:
      case 0x1332:
      case 0x1333:
      case 0x1334:
      case 0x1335:
      case 0x1336:
      case 0x1337:
      case 0x1338:
      case 0x1339:
      case 0x133A:
      case 0x133B:
      case 0x133C:
      case 0x133D:
      case 0x133E:
      case 0x133F:
      case 0x1340:
      case 0x1341:
      case 0x1342:
      case 0x1343:
      case 0x1344:
      case 0x1345:
      case 0x1346:
      case 0x1347:
      case 0x1348:
      case 0x1349:
      case 0x134A:
      case 0x134B:
      case 0x134C:
      case 0x134D:
      case 0x134E:
      case 0x134F:
      case 0x1350:
      case 0x1351:
      case 0x1352:
      case 0x1353:
      case 0x1354:
      case 0x1355:
      case 0x1356:
      case 0x1357:
      case 0x1358:
      case 0x1359:
      case 0x135A:
      case 0x135B:
      case 0x135C:
      case 0x135D:
      case 0x135E:
      case 0x135F:
      case 0x1360:
      case 0x1361:
      case 0x1362:
      case 0x1363:
      case 0x1364:
      case 0x1365:
      case 0x1366:
      case 0x1367:
      case 0x1368:
      case 0x1369:
      case 0x136A:
      case 0x136B:
      case 0x136C:
      case 0x136D:
      case 0x136E:
      case 0x136F:
      case 0x1370:
      case 0x1371:
      case 0x1372:
      case 0x1373:
      case 0x1374:
      case 0x1375:
      case 0x373C:
      case 0x373D:
      case 0x373E:
      case 0x373F:
      case 0x3740:
      case 0x3741:
      case 0x3742:
      case 0x3743:
      case 0x3744:
      case 0x3745:
      case 0x3746:
      case 0x3747:
      case 0x3748:
      case 0x3749:
      case 0x374A:
      case 0x374B:
      case 0x374C:
      case 0x374D:
      case 0x374E:
      case 0x374F:
      case 0x3750:
      case 0x3751:
      case 0x3752:
      case 0x3753:
      case 0x3754:
      case 0x3755:
      case 0x3756:
      case 0x3757:
      case 0x3758:
      case 0x3759:
      case 0x375A:
      case 0x375B:
      case 0x375C:
      case 0x375D:
      case 0x375E:
      case 0x375F:
      case 0x3760:
      case 0x3761:
      case 0x3762:
      case 0x3763:
      case 0x3764:
      case 0x3765:
      case 0x3766:
      case 0x3767:
      case 0x3768:
      case 0x3769:
      case 0x376A:
      case 0x376B:
      case 0x376C:
      case 0x376D:
      case 0x376E:
      case 0x376F:
      case 0x3770:
      case 0x3771:
      case 0x3772:
      case 0x3773:
      case 0x3774:
      case 0x3775:
      case 0x3776:
      case 0x3777:
      case 0x3778:
      case 0x3779:
      case 0x377A:
      case 0x377B:
      case 0x377C:
      case 0x377D:
      case 0x377E:
      case 0x377F:
      case 0x3780:
      case 0x3781:
      case 0x3782:
      case 0x3783:
      case 0x3784:
      case 0x3785:
      case 0x3786:
      case 0x3787:
      case 0x3788:
      case 0x3789:
      case 0x378A:
      case 0x378B:
      case 0x378C:
      case 0x378D:
      case 0x378E:
      case 0x378F:
      case 0x3790:
      case 0x3791:
      case 0x3792:
      case 0x3793:
      case 0x3794:
      case 0x3795:
      case 0x3796:
      case 0x3797:
      case 0x3798:
      case 0x3799:
      case 0x379A:
      case 0x379B:
      case 0x379C:
      case 0x379D:
      case 0x379E:
      case 0x379F:
      case 0x37A0:
      case 0x37A1:
      case 0x37A2:
      case 0x37A3:
      case 0x37A4:
      case 0x37A5:
      case 0x37A6:
      case 0x37A7:
      case 0x37A8:
      case 0x37A9:
      case 0x37AA:
      case 0x37AB:
      case 0x37AC:
      case 0x37AD:
      case 0x37AE:
      case 0x37AF:
      case 0x37B0:
      case 0x37B1:
      case 0x37B2:
      case 0x37B3:
      case 0x37B4:
      case 0x37B5:
      case 0x37B6:
      case 0x37B7:
      case 0x37B8:
      case 0x37B9:
        sub_1CBD871E0(a1, a2, a3, a4);
        break;
      case 0x1376:
      case 0x37BA:
        sub_1CBD85BF0(a1, (uint64_t)a2, a3, a4);
        break;
      case 0x1377:
      case 0x1378:
      case 0x1379:
      case 0x137A:
      case 0x137B:
      case 0x137C:
      case 0x137D:
      case 0x137E:
      case 0x137F:
      case 0x1380:
      case 0x1381:
      case 0x1382:
      case 0x1383:
      case 0x1384:
      case 0x1385:
      case 0x37BB:
      case 0x37BC:
      case 0x37BD:
      case 0x37BE:
      case 0x37BF:
      case 0x37C0:
      case 0x37C1:
      case 0x37C2:
      case 0x37C3:
      case 0x37C4:
      case 0x37C5:
      case 0x37C6:
      case 0x37C7:
      case 0x37C8:
      case 0x37C9:
        sub_1CBD98F18(a1, (unsigned int *)a2, a3, a4);
        break;
      case 0x1386:
      case 0x37CA:
        sub_1CBD9D1BC(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x1387:
      case 0x1388:
      case 0x1389:
      case 0x138A:
      case 0x138B:
      case 0x138C:
      case 0x138D:
      case 0x138E:
      case 0x138F:
      case 0x37CB:
      case 0x37CC:
      case 0x37CD:
      case 0x37CE:
      case 0x37CF:
      case 0x37D0:
      case 0x37D1:
      case 0x37D2:
      case 0x37D3:
        sub_1CBD9D058(a1, a2, a3, a4);
        break;
      case 0x1390:
      case 0x1391:
      case 0x1392:
      case 0x1393:
      case 0x1394:
      case 0x1395:
      case 0x1396:
      case 0x1397:
      case 0x1398:
      case 0x1399:
      case 0x139A:
      case 0x139B:
      case 0x139C:
      case 0x139D:
      case 0x139E:
      case 0x139F:
      case 0x37D4:
      case 0x37D5:
      case 0x37D6:
      case 0x37D7:
      case 0x37D8:
      case 0x37D9:
      case 0x37DA:
      case 0x37DB:
      case 0x37DC:
      case 0x37DD:
      case 0x37DE:
      case 0x37DF:
      case 0x37E0:
      case 0x37E1:
      case 0x37E2:
      case 0x37E3:
        sub_1CBD9E9CC(a1, (unsigned int *)a2, a3, a4);
        break;
      case 0x13A0:
      case 0x13A1:
      case 0x13A2:
      case 0x13A3:
      case 0x13A4:
      case 0x13A5:
      case 0x13A6:
      case 0x13A7:
      case 0x13A8:
      case 0x13A9:
      case 0x13AA:
      case 0x13AB:
      case 0x13AC:
      case 0x13AD:
      case 0x13AE:
      case 0x37E4:
      case 0x37E5:
      case 0x37E6:
      case 0x37E7:
      case 0x37E8:
      case 0x37E9:
      case 0x37EA:
      case 0x37EB:
      case 0x37EC:
      case 0x37ED:
      case 0x37EE:
      case 0x37EF:
      case 0x37F0:
      case 0x37F1:
      case 0x37F2:
        sub_1CD4430F0(a1, (unsigned int *)a2, a3, a4);
        break;
      case 0x13AF:
      case 0x13B0:
      case 0x13B1:
      case 0x13B2:
      case 0x13B3:
      case 0x13B4:
      case 0x13B5:
      case 0x13B6:
      case 0x13B7:
      case 0x13B8:
      case 0x13B9:
      case 0x13BA:
      case 0x13BB:
      case 0x13BC:
      case 0x13BD:
      case 0x13BE:
      case 0x13BF:
      case 0x13C0:
      case 0x13C1:
      case 0x13C2:
      case 0x13C3:
      case 0x13C4:
      case 0x13C5:
      case 0x13C6:
      case 0x13C7:
      case 0x13C8:
      case 0x13C9:
      case 0x13CA:
      case 0x13CB:
      case 0x13CC:
      case 0x13CD:
      case 0x13CE:
      case 0x13CF:
      case 0x13D0:
      case 0x13D1:
      case 0x13D2:
      case 0x13D3:
      case 0x13D4:
      case 0x13D5:
      case 0x13D6:
      case 0x13D7:
      case 0x13D8:
      case 0x13D9:
      case 0x13DA:
      case 0x13DB:
      case 0x13DC:
      case 0x13DD:
      case 0x13DE:
      case 0x13DF:
      case 0x13E0:
      case 0x13E1:
      case 0x13E2:
      case 0x13E3:
      case 0x13E4:
      case 0x13E5:
      case 0x13E6:
      case 0x13E7:
      case 0x13E8:
      case 0x13E9:
      case 0x13EA:
      case 0x13EB:
      case 0x13EC:
      case 0x13ED:
      case 0x13EE:
      case 0x13EF:
      case 0x13F0:
      case 0x13F1:
      case 0x13F2:
      case 0x13F3:
      case 0x13F4:
      case 0x13F5:
      case 0x13F6:
      case 0x13F7:
      case 0x13F8:
      case 0x13F9:
      case 0x13FA:
      case 0x13FB:
      case 0x13FC:
      case 0x13FD:
      case 0x13FE:
      case 0x13FF:
      case 0x1400:
      case 0x1401:
      case 0x1402:
      case 0x1403:
      case 0x1404:
      case 0x1405:
      case 0x1406:
      case 0x1407:
      case 0x1408:
      case 0x1409:
      case 0x140A:
      case 0x140B:
      case 0x140C:
      case 0x140D:
      case 0x140E:
      case 0x140F:
      case 0x1410:
      case 0x1411:
      case 0x1412:
      case 0x1413:
      case 0x1414:
      case 0x1415:
      case 0x1416:
      case 0x1417:
      case 0x1418:
      case 0x1419:
      case 0x141A:
      case 0x37F3:
      case 0x37F4:
      case 0x37F5:
      case 0x37F6:
      case 0x37F7:
      case 0x37F8:
      case 0x37F9:
      case 0x37FA:
      case 0x37FB:
      case 0x37FC:
      case 0x37FD:
      case 0x37FE:
      case 0x37FF:
      case 0x3800:
      case 0x3801:
      case 0x3802:
      case 0x3803:
      case 0x3804:
      case 0x3805:
      case 0x3806:
      case 0x3807:
      case 0x3808:
      case 0x3809:
      case 0x380A:
      case 0x380B:
      case 0x380C:
      case 0x380D:
      case 0x380E:
      case 0x380F:
      case 0x3810:
      case 0x3811:
      case 0x3812:
      case 0x3813:
      case 0x3814:
      case 0x3815:
      case 0x3816:
      case 0x3817:
      case 0x3818:
      case 0x3819:
      case 0x381A:
      case 0x381B:
      case 0x381C:
      case 0x381D:
      case 0x381E:
      case 0x381F:
      case 0x3820:
      case 0x3821:
      case 0x3822:
      case 0x3823:
      case 0x3824:
      case 0x3825:
      case 0x3826:
      case 0x3827:
      case 0x3828:
      case 0x3829:
      case 0x382A:
      case 0x382B:
      case 0x382C:
      case 0x382D:
      case 0x382E:
      case 0x382F:
      case 0x3830:
      case 0x3831:
      case 0x3832:
      case 0x3833:
      case 0x3834:
      case 0x3835:
      case 0x3836:
      case 0x3837:
      case 0x3838:
      case 0x3839:
      case 0x383A:
      case 0x383B:
      case 0x383C:
      case 0x383D:
      case 0x383E:
      case 0x383F:
      case 0x3840:
      case 0x3841:
      case 0x3842:
      case 0x3843:
      case 0x3844:
      case 0x3845:
      case 0x3846:
      case 0x3847:
      case 0x3848:
      case 0x3849:
      case 0x384A:
      case 0x384B:
      case 0x384C:
      case 0x384D:
      case 0x384E:
      case 0x384F:
      case 0x3850:
      case 0x3851:
      case 0x3852:
      case 0x3853:
      case 0x3854:
      case 0x3855:
      case 0x3856:
      case 0x3857:
      case 0x3858:
      case 0x3859:
      case 0x385A:
      case 0x385B:
      case 0x385C:
      case 0x385D:
      case 0x385E:
        sub_1CBD94BA4(a1, (unsigned int *)a2, a3, a4);
        break;
      case 0x141B:
      case 0x141C:
      case 0x141D:
      case 0x141E:
      case 0x141F:
      case 0x1420:
      case 0x1421:
      case 0x1422:
      case 0x1423:
      case 0x1424:
      case 0x1425:
      case 0x1426:
      case 0x1427:
      case 0x1428:
      case 0x1429:
      case 0x142A:
      case 0x142B:
      case 0x142C:
      case 0x142D:
      case 0x142E:
      case 0x142F:
      case 0x1430:
      case 0x1431:
      case 0x1432:
      case 0x1433:
      case 0x1434:
      case 0x1435:
      case 0x1436:
      case 0x1437:
      case 0x1438:
      case 0x1439:
      case 0x143A:
      case 0x143B:
      case 0x143C:
      case 0x143D:
      case 0x143E:
      case 0x143F:
      case 0x1440:
      case 0x1441:
      case 0x1442:
      case 0x1443:
      case 0x1444:
      case 0x1445:
      case 0x1446:
      case 0x1447:
      case 0x1448:
      case 0x1449:
      case 0x144A:
      case 0x144B:
      case 0x144C:
      case 0x144D:
      case 0x144E:
      case 0x144F:
      case 0x1450:
      case 0x1451:
      case 0x1452:
      case 0x1453:
      case 0x1454:
      case 0x1455:
      case 0x1456:
      case 0x1457:
      case 0x1458:
      case 0x1459:
      case 0x145A:
      case 0x145B:
      case 0x145C:
      case 0x145D:
      case 0x145E:
      case 0x145F:
      case 0x1460:
      case 0x1461:
      case 0x1462:
      case 0x1463:
      case 0x1464:
      case 0x1465:
      case 0x1466:
      case 0x1467:
      case 0x1468:
      case 0x1469:
      case 0x146A:
      case 0x146B:
      case 0x146C:
      case 0x146D:
      case 0x146E:
      case 0x146F:
      case 0x1470:
      case 0x1471:
      case 0x1472:
      case 0x1473:
      case 0x1474:
      case 0x1475:
      case 0x1476:
      case 0x1477:
      case 0x1478:
      case 0x1479:
      case 0x147A:
      case 0x147B:
      case 0x147C:
      case 0x147D:
      case 0x147E:
      case 0x147F:
      case 0x1480:
      case 0x1481:
      case 0x1482:
      case 0x1483:
      case 0x1484:
      case 0x1485:
      case 0x1486:
      case 0x1487:
      case 0x1488:
      case 0x1489:
      case 0x148A:
      case 0x148B:
      case 0x148C:
      case 0x148D:
      case 0x148E:
      case 0x148F:
      case 0x1490:
      case 0x1491:
      case 0x1492:
      case 0x1493:
      case 0x1494:
      case 0x1495:
      case 0x1496:
      case 0x1497:
      case 0x1498:
      case 0x1499:
      case 0x149A:
      case 0x149B:
      case 0x149C:
      case 0x149D:
      case 0x149E:
      case 0x149F:
      case 0x14A0:
      case 0x14A1:
      case 0x14A2:
      case 0x14A3:
      case 0x14A4:
      case 0x14A5:
      case 0x14A6:
      case 0x14A7:
      case 0x14A8:
      case 0x14A9:
      case 0x14AA:
      case 0x14AB:
      case 0x14AC:
      case 0x14AD:
      case 0x14AE:
      case 0x14AF:
      case 0x14B0:
      case 0x14B1:
      case 0x14B2:
      case 0x14B3:
      case 0x14B4:
      case 0x14B5:
      case 0x14B6:
      case 0x14B7:
      case 0x14B8:
      case 0x14B9:
      case 0x14BA:
      case 0x14BB:
      case 0x14BC:
      case 0x14BD:
      case 0x14BE:
      case 0x14BF:
      case 0x14C0:
      case 0x14C1:
      case 0x14C2:
      case 0x14C3:
      case 0x14C4:
      case 0x14C5:
      case 0x14C6:
      case 0x14C7:
      case 0x14C8:
      case 0x14C9:
      case 0x14CA:
      case 0x14CB:
      case 0x14CC:
      case 0x14CD:
      case 0x14CE:
      case 0x14CF:
      case 0x14D0:
      case 0x14D1:
      case 0x14D2:
      case 0x14D3:
      case 0x14D4:
      case 0x14D5:
      case 0x14D6:
      case 0x14D7:
      case 0x14D8:
      case 0x14D9:
      case 0x14DA:
      case 0x14DB:
      case 0x14DC:
      case 0x14DD:
      case 0x14DE:
      case 0x14DF:
      case 0x14E0:
      case 0x14E1:
      case 0x14E2:
      case 0x14E3:
      case 0x14E4:
      case 0x14E5:
      case 0x14E6:
      case 0x14E7:
      case 0x14E8:
      case 0x14E9:
      case 0x14EA:
      case 0x14EB:
      case 0x14EC:
      case 0x14ED:
      case 0x14EE:
      case 0x14EF:
      case 0x14F0:
      case 0x14F1:
      case 0x14F2:
      case 0x14F3:
      case 0x14F4:
      case 0x14F5:
      case 0x14F6:
      case 0x14F7:
      case 0x14F8:
      case 0x14F9:
      case 0x14FA:
      case 0x14FB:
      case 0x14FC:
      case 0x14FD:
      case 0x14FE:
      case 0x14FF:
      case 0x1500:
      case 0x1501:
      case 0x1502:
      case 0x1503:
      case 0x1504:
      case 0x1505:
      case 0x1506:
      case 0x1507:
      case 0x1508:
      case 0x1509:
      case 0x150A:
      case 0x150B:
      case 0x150C:
      case 0x150D:
      case 0x150E:
      case 0x150F:
      case 0x1510:
      case 0x1511:
      case 0x1512:
      case 0x1513:
      case 0x1514:
      case 0x1515:
      case 0x1516:
      case 0x385F:
      case 0x3860:
      case 0x3861:
      case 0x3862:
      case 0x3863:
      case 0x3864:
      case 0x3865:
      case 0x3866:
      case 0x3867:
      case 0x3868:
      case 0x3869:
      case 0x386A:
      case 0x386B:
      case 0x386C:
      case 0x386D:
      case 0x386E:
      case 0x386F:
      case 0x3870:
      case 0x3871:
      case 0x3872:
      case 0x3873:
      case 0x3874:
      case 0x3875:
      case 0x3876:
      case 0x3877:
      case 0x3878:
      case 0x3879:
      case 0x387A:
      case 0x387B:
      case 0x387C:
      case 0x387D:
      case 0x387E:
      case 0x387F:
      case 0x3880:
      case 0x3881:
      case 0x3882:
      case 0x3883:
      case 0x3884:
      case 0x3885:
      case 0x3886:
      case 0x3887:
      case 0x3888:
      case 0x3889:
      case 0x388A:
      case 0x388B:
      case 0x388C:
      case 0x388D:
      case 0x388E:
      case 0x388F:
      case 0x3890:
      case 0x3891:
      case 0x3892:
      case 0x3893:
      case 0x3894:
      case 0x3895:
      case 0x3896:
      case 0x3897:
      case 0x3898:
      case 0x3899:
      case 0x389A:
      case 0x389B:
      case 0x389C:
      case 0x389D:
      case 0x389E:
      case 0x389F:
      case 0x38A0:
      case 0x38A1:
      case 0x38A2:
      case 0x38A3:
      case 0x38A4:
      case 0x38A5:
      case 0x38A6:
      case 0x38A7:
      case 0x38A8:
      case 0x38A9:
      case 0x38AA:
      case 0x38AB:
      case 0x38AC:
      case 0x38AD:
      case 0x38AE:
      case 0x38AF:
      case 0x38B0:
      case 0x38B1:
      case 0x38B2:
      case 0x38B3:
      case 0x38B4:
      case 0x38B5:
      case 0x38B6:
      case 0x38B7:
      case 0x38B8:
      case 0x38B9:
      case 0x38BA:
      case 0x38BB:
      case 0x38BC:
      case 0x38BD:
      case 0x38BE:
      case 0x38BF:
      case 0x38C0:
      case 0x38C1:
      case 0x38C2:
      case 0x38C3:
      case 0x38C4:
      case 0x38C5:
      case 0x38C6:
      case 0x38C7:
      case 0x38C8:
      case 0x38C9:
      case 0x38CA:
      case 0x38CB:
      case 0x38CC:
      case 0x38CD:
      case 0x38CE:
      case 0x38CF:
      case 0x38D0:
      case 0x38D1:
      case 0x38D2:
      case 0x38D3:
      case 0x38D4:
      case 0x38D5:
      case 0x38D6:
      case 0x38D7:
      case 0x38D8:
      case 0x38D9:
      case 0x38DA:
      case 0x38DB:
      case 0x38DC:
      case 0x38DD:
      case 0x38DE:
      case 0x38DF:
      case 0x38E0:
      case 0x38E1:
      case 0x38E2:
      case 0x38E3:
      case 0x38E4:
      case 0x38E5:
      case 0x38E6:
      case 0x38E7:
      case 0x38E8:
      case 0x38E9:
      case 0x38EA:
      case 0x38EB:
      case 0x38EC:
      case 0x38ED:
      case 0x38EE:
      case 0x38EF:
      case 0x38F0:
      case 0x38F1:
      case 0x38F2:
      case 0x38F3:
      case 0x38F4:
      case 0x38F5:
      case 0x38F6:
      case 0x38F7:
      case 0x38F8:
      case 0x38F9:
      case 0x38FA:
      case 0x38FB:
      case 0x38FC:
      case 0x38FD:
      case 0x38FE:
      case 0x38FF:
      case 0x3900:
      case 0x3901:
      case 0x3902:
      case 0x3903:
      case 0x3904:
      case 0x3905:
      case 0x3906:
      case 0x3907:
      case 0x3908:
      case 0x3909:
      case 0x390A:
      case 0x390B:
      case 0x390C:
      case 0x390D:
      case 0x390E:
      case 0x390F:
      case 0x3910:
      case 0x3911:
      case 0x3912:
      case 0x3913:
      case 0x3914:
      case 0x3915:
      case 0x3916:
      case 0x3917:
      case 0x3918:
      case 0x3919:
      case 0x391A:
      case 0x391B:
      case 0x391C:
      case 0x391D:
      case 0x391E:
      case 0x391F:
      case 0x3920:
      case 0x3921:
      case 0x3922:
      case 0x3923:
      case 0x3924:
      case 0x3925:
      case 0x3926:
      case 0x3927:
      case 0x3928:
      case 0x3929:
      case 0x392A:
      case 0x392B:
      case 0x392C:
      case 0x392D:
      case 0x392E:
      case 0x392F:
      case 0x3930:
      case 0x3931:
      case 0x3932:
      case 0x3933:
      case 0x3934:
      case 0x3935:
      case 0x3936:
      case 0x3937:
      case 0x3938:
      case 0x3939:
      case 0x393A:
      case 0x393B:
      case 0x393C:
      case 0x393D:
      case 0x393E:
      case 0x393F:
      case 0x3940:
      case 0x3941:
      case 0x3942:
      case 0x3943:
      case 0x3944:
      case 0x3945:
      case 0x3946:
      case 0x3947:
      case 0x3948:
      case 0x3949:
      case 0x394A:
      case 0x394B:
      case 0x394C:
      case 0x394D:
      case 0x394E:
      case 0x394F:
      case 0x3950:
      case 0x3951:
      case 0x3952:
      case 0x3953:
      case 0x3954:
      case 0x3955:
      case 0x3956:
      case 0x3957:
      case 0x3958:
      case 0x3959:
      case 0x395A:
        sub_1CBD93560(a1, (unsigned int *)a2, a3, a4);
        break;
      case 0x1517:
      case 0x1518:
      case 0x1519:
      case 0x151A:
      case 0x151B:
      case 0x151C:
      case 0x151D:
      case 0x151E:
      case 0x151F:
      case 0x1520:
      case 0x1521:
      case 0x1522:
      case 0x1523:
      case 0x1524:
      case 0x1525:
      case 0x1526:
      case 0x1527:
      case 0x1528:
      case 0x1529:
      case 0x152A:
      case 0x152B:
      case 0x152C:
      case 0x152D:
      case 0x152E:
      case 0x152F:
      case 0x1530:
      case 0x1531:
      case 0x1532:
      case 0x1533:
      case 0x1534:
      case 0x1535:
      case 0x1536:
      case 0x1537:
      case 0x1538:
      case 0x1539:
      case 0x153A:
      case 0x153B:
      case 0x153C:
      case 0x153D:
      case 0x153E:
      case 0x153F:
      case 0x1540:
      case 0x1541:
      case 0x1542:
      case 0x1543:
      case 0x1544:
      case 0x1545:
      case 0x1546:
      case 0x1547:
      case 0x1548:
      case 0x1549:
      case 0x154A:
      case 0x154B:
      case 0x154C:
      case 0x154D:
      case 0x154E:
      case 0x154F:
      case 0x1550:
      case 0x1551:
      case 0x1552:
      case 0x1553:
      case 0x1554:
      case 0x1555:
      case 0x1556:
      case 0x1557:
      case 0x1558:
      case 0x1559:
      case 0x155A:
      case 0x155B:
      case 0x155C:
      case 0x155D:
      case 0x155E:
      case 0x155F:
      case 0x1560:
      case 0x1561:
      case 0x1562:
      case 0x1563:
      case 0x1564:
      case 0x1565:
      case 0x1566:
      case 0x1567:
      case 0x1568:
      case 0x1569:
      case 0x156A:
      case 0x156B:
      case 0x156C:
      case 0x156D:
      case 0x156E:
      case 0x156F:
      case 0x1570:
      case 0x1571:
      case 0x1572:
      case 0x1573:
      case 0x1574:
      case 0x1575:
      case 0x1576:
      case 0x1577:
      case 0x1578:
      case 0x1579:
      case 0x157A:
      case 0x157B:
      case 0x157C:
      case 0x157D:
      case 0x157E:
      case 0x157F:
      case 0x1580:
      case 0x1581:
      case 0x1582:
      case 0x1583:
      case 0x1584:
      case 0x1585:
      case 0x1586:
      case 0x1587:
      case 0x1588:
      case 0x1589:
      case 0x158A:
      case 0x158B:
      case 0x158C:
      case 0x158D:
      case 0x158E:
      case 0x158F:
      case 0x1590:
      case 0x1591:
      case 0x1592:
      case 0x1593:
      case 0x1594:
      case 0x395B:
      case 0x395C:
      case 0x395D:
      case 0x395E:
      case 0x395F:
      case 0x3960:
      case 0x3961:
      case 0x3962:
      case 0x3963:
      case 0x3964:
      case 0x3965:
      case 0x3966:
      case 0x3967:
      case 0x3968:
      case 0x3969:
      case 0x396A:
      case 0x396B:
      case 0x396C:
      case 0x396D:
      case 0x396E:
      case 0x396F:
      case 0x3970:
      case 0x3971:
      case 0x3972:
      case 0x3973:
      case 0x3974:
      case 0x3975:
      case 0x3976:
      case 0x3977:
      case 0x3978:
      case 0x3979:
      case 0x397A:
      case 0x397B:
      case 0x397C:
      case 0x397D:
      case 0x397E:
      case 0x397F:
      case 0x3980:
      case 0x3981:
      case 0x3982:
      case 0x3983:
      case 0x3984:
      case 0x3985:
      case 0x3986:
      case 0x3987:
      case 0x3988:
      case 0x3989:
      case 0x398A:
      case 0x398B:
      case 0x398C:
      case 0x398D:
      case 0x398E:
      case 0x398F:
      case 0x3990:
      case 0x3991:
      case 0x3992:
      case 0x3993:
      case 0x3994:
      case 0x3995:
      case 0x3996:
      case 0x3997:
      case 0x3998:
      case 0x3999:
      case 0x399A:
      case 0x399B:
      case 0x399C:
      case 0x399D:
      case 0x399E:
      case 0x399F:
      case 0x39A0:
      case 0x39A1:
      case 0x39A2:
      case 0x39A3:
      case 0x39A4:
      case 0x39A5:
      case 0x39A6:
      case 0x39A7:
      case 0x39A8:
      case 0x39A9:
      case 0x39AA:
      case 0x39AB:
      case 0x39AC:
      case 0x39AD:
      case 0x39AE:
      case 0x39AF:
      case 0x39B0:
      case 0x39B1:
      case 0x39B2:
      case 0x39B3:
      case 0x39B4:
      case 0x39B5:
      case 0x39B6:
      case 0x39B7:
      case 0x39B8:
      case 0x39B9:
      case 0x39BA:
      case 0x39BB:
      case 0x39BC:
      case 0x39BD:
      case 0x39BE:
      case 0x39BF:
      case 0x39C0:
      case 0x39C1:
      case 0x39C2:
      case 0x39C3:
      case 0x39C4:
      case 0x39C5:
      case 0x39C6:
      case 0x39C7:
      case 0x39C8:
      case 0x39C9:
      case 0x39CA:
      case 0x39CB:
      case 0x39CC:
      case 0x39CD:
      case 0x39CE:
      case 0x39CF:
      case 0x39D0:
      case 0x39D1:
      case 0x39D2:
      case 0x39D3:
      case 0x39D4:
      case 0x39D5:
      case 0x39D6:
      case 0x39D7:
      case 0x39D8:
        sub_1CBD94494(a1, (unsigned int *)a2, a3, a4);
        break;
      case 0x1595:
      case 0x1596:
      case 0x1597:
      case 0x1598:
      case 0x1599:
      case 0x159A:
      case 0x159B:
      case 0x159C:
      case 0x159D:
      case 0x159E:
      case 0x159F:
      case 0x15A0:
      case 0x15A1:
      case 0x15A2:
      case 0x15A3:
      case 0x15A4:
      case 0x15A5:
      case 0x15A6:
      case 0x39D9:
      case 0x39DA:
      case 0x39DB:
      case 0x39DC:
      case 0x39DD:
      case 0x39DE:
      case 0x39DF:
      case 0x39E0:
      case 0x39E1:
      case 0x39E2:
      case 0x39E3:
      case 0x39E4:
      case 0x39E5:
      case 0x39E6:
      case 0x39E7:
      case 0x39E8:
      case 0x39E9:
      case 0x39EA:
        sub_1CD433E7C(a1, a2, a3, a4);
        break;
      case 0x15A7:
      case 0x15A8:
      case 0x15A9:
      case 0x15AA:
      case 0x15AB:
      case 0x15AC:
      case 0x15AD:
      case 0x15AE:
      case 0x15AF:
      case 0x39EB:
      case 0x39EC:
      case 0x39ED:
      case 0x39EE:
      case 0x39EF:
      case 0x39F0:
      case 0x39F1:
      case 0x39F2:
      case 0x39F3:
        sub_1CD4341E8(a1, a2, a3, a4);
        break;
      case 0x15B0:
      case 0x15B1:
      case 0x15B2:
      case 0x15B3:
      case 0x15B4:
      case 0x15B5:
      case 0x15B6:
      case 0x15B7:
      case 0x15B8:
      case 0x15B9:
      case 0x15BA:
      case 0x15BB:
      case 0x15BC:
      case 0x15BD:
      case 0x15BE:
      case 0x15BF:
      case 0x15C0:
      case 0x15C1:
      case 0x15C2:
      case 0x15C3:
      case 0x15C4:
      case 0x15C5:
      case 0x15C6:
      case 0x15C7:
      case 0x15C8:
      case 0x15C9:
      case 0x15CA:
      case 0x15CB:
      case 0x15CC:
      case 0x15CD:
      case 0x15CE:
      case 0x15CF:
      case 0x15D0:
      case 0x15D1:
      case 0x15D2:
      case 0x15D3:
      case 0x15D4:
      case 0x15D5:
      case 0x15D6:
      case 0x15D7:
      case 0x15D8:
      case 0x15D9:
      case 0x15DA:
      case 0x15DB:
      case 0x15DC:
      case 0x15DD:
      case 0x15DE:
      case 0x15DF:
      case 0x15E0:
      case 0x15E1:
      case 0x39F4:
      case 0x39F5:
      case 0x39F6:
      case 0x39F7:
      case 0x39F8:
      case 0x39F9:
      case 0x39FA:
      case 0x39FB:
      case 0x39FC:
      case 0x39FD:
      case 0x39FE:
      case 0x39FF:
      case 0x3A00:
      case 0x3A01:
      case 0x3A02:
      case 0x3A03:
      case 0x3A04:
      case 0x3A05:
      case 0x3A06:
      case 0x3A07:
      case 0x3A08:
      case 0x3A09:
      case 0x3A0A:
      case 0x3A0B:
      case 0x3A0C:
      case 0x3A0D:
      case 0x3A0E:
      case 0x3A0F:
      case 0x3A10:
      case 0x3A11:
      case 0x3A12:
      case 0x3A13:
      case 0x3A14:
      case 0x3A15:
      case 0x3A16:
      case 0x3A17:
      case 0x3A18:
      case 0x3A19:
      case 0x3A1A:
      case 0x3A1B:
      case 0x3A1C:
      case 0x3A1D:
      case 0x3A1E:
      case 0x3A1F:
      case 0x3A20:
      case 0x3A21:
      case 0x3A22:
      case 0x3A23:
      case 0x3A24:
      case 0x3A25:
        sub_1CBD866E8(a1, a2, a3, a4);
        break;
      case 0x15E2:
      case 0x15E3:
      case 0x3A26:
      case 0x3A27:
        sub_1CBD968EC(a1, a2, a3, a4);
        break;
      case 0x15E4:
      case 0x15E5:
      case 0x15E6:
      case 0x15E7:
      case 0x15E8:
      case 0x15E9:
      case 0x15EA:
      case 0x15EB:
      case 0x3A28:
      case 0x3A29:
      case 0x3A2A:
      case 0x3A2B:
      case 0x3A2C:
      case 0x3A2D:
      case 0x3A2E:
      case 0x3A2F:
        sub_1CBD9A314(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x15EC:
      case 0x15ED:
      case 0x15EE:
      case 0x15EF:
      case 0x15F0:
      case 0x15F1:
      case 0x15F2:
      case 0x15F3:
      case 0x3A30:
      case 0x3A31:
      case 0x3A32:
      case 0x3A33:
      case 0x3A34:
      case 0x3A35:
      case 0x3A36:
      case 0x3A37:
        sub_1CBD99F78((uint64_t)a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x15F4:
      case 0x15F5:
      case 0x3A38:
      case 0x3A39:
        sub_1CBD96A58((uint64_t)a1, a2, a3, a4);
        break;
      case 0x15F6:
      case 0x15F7:
      case 0x15F9:
      case 0x15FA:
      case 0x3A3D:
      case 0x3A3E:
        sub_1CBD884E8(a1, a2, a3, a4);
        break;
      case 0x15F8:
      case 0x15FB:
      case 0x3A3F:
        sub_1CBD88658(a1, a2, a3, a4);
        break;
      case 0x15FC:
      case 0x15FD:
      case 0x15FE:
      case 0x15FF:
      case 0x1600:
      case 0x1601:
      case 0x1602:
      case 0x1603:
      case 0x1604:
      case 0x1605:
      case 0x1606:
      case 0x1607:
      case 0x1608:
      case 0x1609:
      case 0x160A:
      case 0x160B:
      case 0x160C:
      case 0x160D:
      case 0x160E:
      case 0x160F:
      case 0x1610:
      case 0x1611:
      case 0x1612:
      case 0x1613:
      case 0x1614:
      case 0x1615:
      case 0x1616:
      case 0x1617:
      case 0x1618:
      case 0x1619:
      case 0x161A:
      case 0x161B:
      case 0x161C:
      case 0x161D:
      case 0x161E:
      case 0x161F:
      case 0x1620:
      case 0x1621:
      case 0x1622:
      case 0x1623:
      case 0x1624:
      case 0x1625:
      case 0x1626:
      case 0x1627:
      case 0x1628:
      case 0x1629:
      case 0x162A:
      case 0x162B:
      case 0x3A40:
      case 0x3A41:
      case 0x3A42:
      case 0x3A43:
      case 0x3A44:
      case 0x3A45:
      case 0x3A46:
      case 0x3A47:
      case 0x3A48:
      case 0x3A49:
      case 0x3A4A:
      case 0x3A4B:
      case 0x3A4C:
      case 0x3A4D:
      case 0x3A4E:
      case 0x3A4F:
      case 0x3A50:
      case 0x3A51:
      case 0x3A52:
      case 0x3A53:
      case 0x3A54:
      case 0x3A55:
      case 0x3A56:
      case 0x3A57:
      case 0x3A58:
      case 0x3A59:
      case 0x3A5A:
      case 0x3A5B:
      case 0x3A5C:
      case 0x3A5D:
      case 0x3A5E:
      case 0x3A5F:
      case 0x3A60:
      case 0x3A61:
      case 0x3A62:
      case 0x3A63:
      case 0x3A64:
      case 0x3A65:
      case 0x3A66:
      case 0x3A67:
      case 0x3A68:
      case 0x3A69:
      case 0x3A6A:
      case 0x3A6B:
      case 0x3A6C:
      case 0x3A6D:
      case 0x3A6E:
      case 0x3A6F:
        sub_1CBD8A41C(a1, a2, a3, a4);
        break;
      case 0x162C:
      case 0x162D:
      case 0x162E:
      case 0x162F:
      case 0x1630:
      case 0x1631:
      case 0x1632:
      case 0x1633:
      case 0x1634:
      case 0x1635:
      case 0x1636:
      case 0x1637:
      case 0x1638:
      case 0x1639:
      case 0x163A:
      case 0x163B:
      case 0x163C:
      case 0x163D:
      case 0x163E:
      case 0x163F:
      case 0x1640:
      case 0x1641:
      case 0x1642:
      case 0x1643:
      case 0x1644:
      case 0x1645:
      case 0x1646:
      case 0x1647:
      case 0x1648:
      case 0x1649:
      case 0x164A:
      case 0x164B:
      case 0x164C:
      case 0x164D:
      case 0x164E:
      case 0x164F:
      case 0x1650:
      case 0x1651:
      case 0x1652:
      case 0x1653:
      case 0x1654:
      case 0x1655:
      case 0x1656:
      case 0x1657:
      case 0x1658:
      case 0x1659:
      case 0x165A:
      case 0x165B:
      case 0x3A70:
      case 0x3A71:
      case 0x3A72:
      case 0x3A73:
      case 0x3A74:
      case 0x3A75:
      case 0x3A76:
      case 0x3A77:
      case 0x3A78:
      case 0x3A79:
      case 0x3A7A:
      case 0x3A7B:
      case 0x3A7C:
      case 0x3A7D:
      case 0x3A7E:
      case 0x3A7F:
      case 0x3A80:
      case 0x3A81:
      case 0x3A82:
      case 0x3A83:
      case 0x3A84:
      case 0x3A85:
      case 0x3A86:
      case 0x3A87:
      case 0x3A88:
      case 0x3A89:
      case 0x3A8A:
      case 0x3A8B:
      case 0x3A8C:
      case 0x3A8D:
      case 0x3A8E:
      case 0x3A8F:
      case 0x3A90:
      case 0x3A91:
      case 0x3A92:
      case 0x3A93:
      case 0x3A94:
      case 0x3A95:
      case 0x3A96:
      case 0x3A97:
      case 0x3A98:
      case 0x3A99:
      case 0x3A9A:
      case 0x3A9B:
      case 0x3A9C:
      case 0x3A9D:
      case 0x3A9E:
      case 0x3A9F:
        ((void (*)(unsigned int *, unsigned __int16 *, _DWORD *, uint64_t))loc_1CBD8A124)(a1, a2, a3, a4);
        break;
      case 0x165C:
      case 0x3AA0:
        sub_1CD441944(a1, a2, a3, a4);
        break;
      case 0x165D:
      case 0x165E:
      case 0x165F:
      case 0x1660:
      case 0x1661:
      case 0x1662:
      case 0x1663:
      case 0x1664:
      case 0x1665:
      case 0x1666:
      case 0x1667:
      case 0x1668:
      case 0x1669:
      case 0x166A:
      case 0x166B:
      case 0x166C:
      case 0x166D:
      case 0x166E:
      case 0x166F:
      case 0x1670:
      case 0x1671:
      case 0x1672:
      case 0x1673:
      case 0x1674:
      case 0x3AA1:
      case 0x3AA2:
      case 0x3AA3:
      case 0x3AA4:
      case 0x3AA5:
      case 0x3AA6:
      case 0x3AA7:
      case 0x3AA8:
      case 0x3AA9:
      case 0x3AAA:
      case 0x3AAB:
      case 0x3AAC:
      case 0x3AAD:
      case 0x3AAE:
      case 0x3AAF:
      case 0x3AB0:
      case 0x3AB1:
      case 0x3AB2:
      case 0x3AB3:
      case 0x3AB4:
      case 0x3AB5:
      case 0x3AB6:
      case 0x3AB7:
      case 0x3AB8:
        sub_1CBD89B68((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1675:
      case 0x1676:
      case 0x1677:
      case 0x1678:
      case 0x1679:
      case 0x167A:
      case 0x167B:
      case 0x167C:
      case 0x167D:
      case 0x167E:
      case 0x167F:
      case 0x1680:
      case 0x1681:
      case 0x1682:
      case 0x1683:
      case 0x1684:
      case 0x1685:
      case 0x1686:
      case 0x1687:
      case 0x1688:
      case 0x1689:
      case 0x168A:
      case 0x168B:
      case 0x168C:
      case 0x168D:
      case 0x168E:
      case 0x168F:
      case 0x1690:
      case 0x1691:
      case 0x1692:
      case 0x1693:
      case 0x1694:
      case 0x1695:
      case 0x1696:
      case 0x1697:
      case 0x1698:
      case 0x1699:
      case 0x169A:
      case 0x169B:
      case 0x169C:
      case 0x169D:
      case 0x169E:
      case 0x169F:
      case 0x16A0:
      case 0x16A1:
      case 0x16A2:
      case 0x16A3:
      case 0x16A4:
      case 0x16A5:
      case 0x16A6:
      case 0x16A7:
      case 0x16A8:
      case 0x16A9:
      case 0x16AA:
      case 0x16AB:
      case 0x16AC:
      case 0x16AD:
      case 0x16AE:
      case 0x16AF:
      case 0x16B0:
      case 0x16B1:
      case 0x16B2:
      case 0x16B3:
      case 0x16B4:
      case 0x3AB9:
      case 0x3ABA:
      case 0x3ABB:
      case 0x3ABC:
      case 0x3ABD:
      case 0x3ABE:
      case 0x3ABF:
      case 0x3AC0:
      case 0x3AC1:
      case 0x3AC2:
      case 0x3AC3:
      case 0x3AC4:
      case 0x3AC5:
      case 0x3AC6:
      case 0x3AC7:
      case 0x3AC8:
      case 0x3AC9:
      case 0x3ACA:
      case 0x3ACB:
      case 0x3ACC:
      case 0x3ACD:
      case 0x3ACE:
      case 0x3ACF:
      case 0x3AD0:
      case 0x3AD1:
      case 0x3AD2:
      case 0x3AD3:
      case 0x3AD4:
      case 0x3AD5:
      case 0x3AD6:
      case 0x3AD7:
      case 0x3AD8:
      case 0x3AD9:
      case 0x3ADA:
      case 0x3ADB:
      case 0x3ADC:
      case 0x3ADD:
      case 0x3ADE:
      case 0x3ADF:
      case 0x3AE0:
      case 0x3AE1:
      case 0x3AE2:
      case 0x3AE3:
      case 0x3AE4:
      case 0x3AE5:
      case 0x3AE6:
      case 0x3AE7:
      case 0x3AE8:
      case 0x3AE9:
      case 0x3AEA:
      case 0x3AEB:
      case 0x3AEC:
      case 0x3AED:
      case 0x3AEE:
      case 0x3AEF:
      case 0x3AF0:
      case 0x3AF1:
      case 0x3AF2:
      case 0x3AF3:
      case 0x3AF4:
      case 0x3AF5:
      case 0x3AF6:
      case 0x3AF7:
      case 0x3AF8:
        sub_1CBD90118((uint64_t)a1, a2, a3, a4);
        break;
      case 0x16B5:
      case 0x16B8:
      case 0x16BB:
      case 0x16BE:
      case 0x16C1:
      case 0x16C4:
      case 0x16C7:
      case 0x16CA:
      case 0x16CD:
      case 0x16D0:
      case 0x16D3:
      case 0x16D6:
      case 0x16D9:
      case 0x16DC:
      case 0x16DF:
      case 0x16E2:
      case 0x16E5:
      case 0x16E8:
      case 0x16EB:
      case 0x16EE:
      case 0x16F1:
      case 0x16F4:
      case 0x16F7:
      case 0x16FA:
      case 0x16FD:
      case 0x1700:
      case 0x1703:
      case 0x1706:
      case 0x1709:
      case 0x170C:
      case 0x170F:
      case 0x1712:
      case 0x3AF9:
      case 0x3AFC:
      case 0x3AFF:
      case 0x3B02:
      case 0x3B05:
      case 0x3B08:
      case 0x3B0B:
      case 0x3B0E:
      case 0x3B11:
      case 0x3B14:
      case 0x3B17:
      case 0x3B1A:
      case 0x3B1D:
      case 0x3B20:
      case 0x3B23:
      case 0x3B26:
      case 0x3B29:
      case 0x3B2C:
      case 0x3B2F:
      case 0x3B32:
      case 0x3B35:
      case 0x3B38:
      case 0x3B3B:
      case 0x3B3E:
      case 0x3B41:
      case 0x3B44:
      case 0x3B47:
      case 0x3B4A:
      case 0x3B4D:
      case 0x3B50:
      case 0x3B53:
      case 0x3B56:
        ((void (*)(unsigned int *, unsigned __int16 *, _DWORD *, uint64_t))loc_1CBD8958C)(a1, a2, a3, a4);
        break;
      case 0x16B6:
      case 0x16B7:
      case 0x16B9:
      case 0x16BA:
      case 0x16BC:
      case 0x16BD:
      case 0x16BF:
      case 0x16C0:
      case 0x16C2:
      case 0x16C3:
      case 0x16C5:
      case 0x16C6:
      case 0x16C8:
      case 0x16C9:
      case 0x16CB:
      case 0x16CC:
      case 0x16CE:
      case 0x16CF:
      case 0x16D1:
      case 0x16D2:
      case 0x16D4:
      case 0x16D5:
      case 0x16D7:
      case 0x16D8:
      case 0x16DA:
      case 0x16DB:
      case 0x16DD:
      case 0x16DE:
      case 0x16E0:
      case 0x16E1:
      case 0x16E3:
      case 0x16E4:
      case 0x16E6:
      case 0x16E7:
      case 0x16E9:
      case 0x16EA:
      case 0x16EC:
      case 0x16ED:
      case 0x16EF:
      case 0x16F0:
      case 0x16F2:
      case 0x16F3:
      case 0x16F5:
      case 0x16F6:
      case 0x16F8:
      case 0x16F9:
      case 0x16FB:
      case 0x16FC:
      case 0x16FE:
      case 0x16FF:
      case 0x1701:
      case 0x1702:
      case 0x1704:
      case 0x1705:
      case 0x1707:
      case 0x1708:
      case 0x170A:
      case 0x170B:
      case 0x170D:
      case 0x170E:
      case 0x1710:
      case 0x1711:
      case 0x1713:
      case 0x1714:
      case 0x3AFA:
      case 0x3AFB:
      case 0x3AFD:
      case 0x3AFE:
      case 0x3B00:
      case 0x3B01:
      case 0x3B03:
      case 0x3B04:
      case 0x3B06:
      case 0x3B07:
      case 0x3B09:
      case 0x3B0A:
      case 0x3B0C:
      case 0x3B0D:
      case 0x3B0F:
      case 0x3B10:
      case 0x3B12:
      case 0x3B13:
      case 0x3B15:
      case 0x3B16:
      case 0x3B18:
      case 0x3B19:
      case 0x3B1B:
      case 0x3B1C:
      case 0x3B1E:
      case 0x3B1F:
      case 0x3B21:
      case 0x3B22:
      case 0x3B24:
      case 0x3B25:
      case 0x3B27:
      case 0x3B28:
      case 0x3B2A:
      case 0x3B2B:
      case 0x3B2D:
      case 0x3B2E:
      case 0x3B30:
      case 0x3B31:
      case 0x3B33:
      case 0x3B34:
      case 0x3B36:
      case 0x3B37:
      case 0x3B39:
      case 0x3B3A:
      case 0x3B3C:
      case 0x3B3D:
      case 0x3B3F:
      case 0x3B40:
      case 0x3B42:
      case 0x3B43:
      case 0x3B45:
      case 0x3B46:
      case 0x3B48:
      case 0x3B49:
      case 0x3B4B:
      case 0x3B4C:
      case 0x3B4E:
      case 0x3B4F:
      case 0x3B51:
      case 0x3B52:
      case 0x3B54:
      case 0x3B55:
      case 0x3B57:
      case 0x3B58:
        sub_1CD435E14((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1715:
      case 0x1718:
      case 0x171B:
      case 0x171E:
      case 0x1721:
      case 0x1724:
      case 0x1727:
      case 0x172A:
      case 0x172D:
      case 0x1730:
      case 0x1733:
      case 0x1736:
      case 0x1739:
      case 0x173C:
      case 0x173F:
      case 0x1742:
      case 0x1745:
      case 0x1748:
      case 0x174B:
      case 0x174E:
      case 0x1751:
      case 0x1754:
      case 0x1757:
      case 0x175A:
      case 0x3B59:
      case 0x3B5C:
      case 0x3B5F:
      case 0x3B62:
      case 0x3B65:
      case 0x3B68:
      case 0x3B6B:
      case 0x3B6E:
      case 0x3B71:
      case 0x3B74:
      case 0x3B77:
      case 0x3B7A:
      case 0x3B7D:
      case 0x3B80:
      case 0x3B83:
      case 0x3B86:
      case 0x3B89:
      case 0x3B8C:
      case 0x3B8F:
      case 0x3B92:
      case 0x3B95:
      case 0x3B98:
      case 0x3B9B:
      case 0x3B9E:
        sub_1CBD88AC4((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1716:
      case 0x1717:
      case 0x1719:
      case 0x171A:
      case 0x171C:
      case 0x171D:
      case 0x171F:
      case 0x1720:
      case 0x1722:
      case 0x1723:
      case 0x1725:
      case 0x1726:
      case 0x1728:
      case 0x1729:
      case 0x172B:
      case 0x172C:
      case 0x172E:
      case 0x172F:
      case 0x1731:
      case 0x1732:
      case 0x1734:
      case 0x1735:
      case 0x1737:
      case 0x1738:
      case 0x173A:
      case 0x173B:
      case 0x173D:
      case 0x173E:
      case 0x1740:
      case 0x1741:
      case 0x1743:
      case 0x1744:
      case 0x1746:
      case 0x1747:
      case 0x1749:
      case 0x174A:
      case 0x174C:
      case 0x174D:
      case 0x174F:
      case 0x1750:
      case 0x1752:
      case 0x1753:
      case 0x1755:
      case 0x1756:
      case 0x1758:
      case 0x1759:
      case 0x175B:
      case 0x175C:
      case 0x3B5A:
      case 0x3B5B:
      case 0x3B5D:
      case 0x3B5E:
      case 0x3B60:
      case 0x3B61:
      case 0x3B63:
      case 0x3B64:
      case 0x3B66:
      case 0x3B67:
      case 0x3B69:
      case 0x3B6A:
      case 0x3B6C:
      case 0x3B6D:
      case 0x3B6F:
      case 0x3B70:
      case 0x3B72:
      case 0x3B73:
      case 0x3B75:
      case 0x3B76:
      case 0x3B78:
      case 0x3B79:
      case 0x3B7B:
      case 0x3B7C:
      case 0x3B7E:
      case 0x3B7F:
      case 0x3B81:
      case 0x3B82:
      case 0x3B84:
      case 0x3B85:
      case 0x3B87:
      case 0x3B88:
      case 0x3B8A:
      case 0x3B8B:
      case 0x3B8D:
      case 0x3B8E:
      case 0x3B90:
      case 0x3B91:
      case 0x3B93:
      case 0x3B94:
      case 0x3B96:
      case 0x3B97:
      case 0x3B99:
      case 0x3B9A:
      case 0x3B9C:
      case 0x3B9D:
      case 0x3B9F:
      case 0x3BA0:
        sub_1CBD88F9C((uint64_t)a1, a2, a3, a4);
        break;
      case 0x175D:
      case 0x175E:
      case 0x175F:
      case 0x1760:
      case 0x1761:
      case 0x1762:
      case 0x1763:
      case 0x1764:
      case 0x1765:
      case 0x1766:
      case 0x1767:
      case 0x1768:
      case 0x1769:
      case 0x176A:
      case 0x176B:
      case 0x176C:
      case 0x176D:
      case 0x176E:
      case 0x176F:
      case 0x1770:
      case 0x1771:
      case 0x1772:
      case 0x1773:
      case 0x1774:
      case 0x3BA1:
      case 0x3BA2:
      case 0x3BA3:
      case 0x3BA4:
      case 0x3BA5:
      case 0x3BA6:
      case 0x3BA7:
      case 0x3BA8:
      case 0x3BA9:
      case 0x3BAA:
      case 0x3BAB:
      case 0x3BAC:
      case 0x3BAD:
      case 0x3BAE:
      case 0x3BAF:
      case 0x3BB0:
      case 0x3BB1:
      case 0x3BB2:
      case 0x3BB3:
      case 0x3BB4:
      case 0x3BB5:
      case 0x3BB6:
      case 0x3BB7:
      case 0x3BB8:
        sub_1CD4363C4((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1775:
      case 0x1776:
      case 0x1777:
      case 0x1778:
      case 0x1779:
      case 0x177A:
      case 0x177B:
      case 0x177C:
      case 0x177D:
      case 0x177E:
      case 0x177F:
      case 0x1780:
      case 0x1781:
      case 0x1782:
      case 0x1783:
      case 0x1784:
      case 0x1785:
      case 0x1786:
      case 0x1787:
      case 0x1788:
      case 0x1789:
      case 0x178A:
      case 0x178B:
      case 0x178C:
      case 0x178D:
      case 0x178E:
      case 0x178F:
      case 0x1790:
      case 0x1791:
      case 0x1792:
      case 0x1793:
      case 0x1794:
      case 0x1795:
      case 0x1796:
      case 0x1797:
      case 0x1798:
      case 0x1799:
      case 0x179A:
      case 0x179B:
      case 0x179C:
      case 0x179D:
      case 0x179E:
      case 0x179F:
      case 0x17A0:
      case 0x17A1:
      case 0x17A2:
      case 0x17A3:
      case 0x17A4:
      case 0x17A5:
      case 0x17A6:
      case 0x17A7:
      case 0x17A8:
      case 0x17A9:
      case 0x17AA:
      case 0x17AB:
      case 0x17AC:
      case 0x17AD:
      case 0x17AE:
      case 0x17AF:
      case 0x17B0:
      case 0x17B1:
      case 0x17B2:
      case 0x17B3:
      case 0x17B4:
      case 0x3BB9:
      case 0x3BBA:
      case 0x3BBB:
      case 0x3BBC:
      case 0x3BBD:
      case 0x3BBE:
      case 0x3BBF:
      case 0x3BC0:
      case 0x3BC1:
      case 0x3BC2:
      case 0x3BC3:
      case 0x3BC4:
      case 0x3BC5:
      case 0x3BC6:
      case 0x3BC7:
      case 0x3BC8:
      case 0x3BC9:
      case 0x3BCA:
      case 0x3BCB:
      case 0x3BCC:
      case 0x3BCD:
      case 0x3BCE:
      case 0x3BCF:
      case 0x3BD0:
      case 0x3BD1:
      case 0x3BD2:
      case 0x3BD3:
      case 0x3BD4:
      case 0x3BD5:
      case 0x3BD6:
      case 0x3BD7:
      case 0x3BD8:
      case 0x3BD9:
      case 0x3BDA:
      case 0x3BDB:
      case 0x3BDC:
      case 0x3BDD:
      case 0x3BDE:
      case 0x3BDF:
      case 0x3BE0:
      case 0x3BE1:
      case 0x3BE2:
      case 0x3BE3:
      case 0x3BE4:
      case 0x3BE5:
      case 0x3BE6:
      case 0x3BE7:
      case 0x3BE8:
      case 0x3BE9:
      case 0x3BEA:
      case 0x3BEB:
      case 0x3BEC:
      case 0x3BED:
      case 0x3BEE:
      case 0x3BEF:
      case 0x3BF0:
      case 0x3BF1:
      case 0x3BF2:
      case 0x3BF3:
      case 0x3BF4:
      case 0x3BF5:
      case 0x3BF6:
      case 0x3BF7:
      case 0x3BF8:
        sub_1CBD8FDBC((uint64_t)a1, a2, a3, a4);
        break;
      case 0x17B5:
      case 0x17B8:
      case 0x17BB:
      case 0x17BE:
      case 0x17C1:
      case 0x17C4:
      case 0x17C7:
      case 0x17CA:
      case 0x17CD:
      case 0x17D0:
      case 0x17D3:
      case 0x17D6:
      case 0x17D9:
      case 0x17DC:
      case 0x17DF:
      case 0x17E2:
      case 0x17E5:
      case 0x17E8:
      case 0x17EB:
      case 0x17EE:
      case 0x17F1:
      case 0x17F4:
      case 0x17F7:
      case 0x17FA:
      case 0x17FD:
      case 0x1800:
      case 0x1803:
      case 0x1806:
      case 0x1809:
      case 0x180C:
      case 0x180F:
      case 0x1812:
      case 0x3BF9:
      case 0x3BFC:
      case 0x3BFF:
      case 0x3C02:
      case 0x3C05:
      case 0x3C08:
      case 0x3C0B:
      case 0x3C0E:
      case 0x3C11:
      case 0x3C14:
      case 0x3C17:
      case 0x3C1A:
      case 0x3C1D:
      case 0x3C20:
      case 0x3C23:
      case 0x3C26:
      case 0x3C29:
      case 0x3C2C:
      case 0x3C2F:
      case 0x3C32:
      case 0x3C35:
      case 0x3C38:
      case 0x3C3B:
      case 0x3C3E:
      case 0x3C41:
      case 0x3C44:
      case 0x3C47:
      case 0x3C4A:
      case 0x3C4D:
      case 0x3C50:
      case 0x3C53:
      case 0x3C56:
        ((void (*)(unsigned int *, unsigned __int16 *, _DWORD *, uint64_t))loc_1CBD89878)(a1, a2, a3, a4);
        break;
      case 0x17B6:
      case 0x17B7:
      case 0x17B9:
      case 0x17BA:
      case 0x17BC:
      case 0x17BD:
      case 0x17BF:
      case 0x17C0:
      case 0x17C2:
      case 0x17C3:
      case 0x17C5:
      case 0x17C6:
      case 0x17C8:
      case 0x17C9:
      case 0x17CB:
      case 0x17CC:
      case 0x17CE:
      case 0x17CF:
      case 0x17D1:
      case 0x17D2:
      case 0x17D4:
      case 0x17D5:
      case 0x17D7:
      case 0x17D8:
      case 0x17DA:
      case 0x17DB:
      case 0x17DD:
      case 0x17DE:
      case 0x17E0:
      case 0x17E1:
      case 0x17E3:
      case 0x17E4:
      case 0x17E6:
      case 0x17E7:
      case 0x17E9:
      case 0x17EA:
      case 0x17EC:
      case 0x17ED:
      case 0x17EF:
      case 0x17F0:
      case 0x17F2:
      case 0x17F3:
      case 0x17F5:
      case 0x17F6:
      case 0x17F8:
      case 0x17F9:
      case 0x17FB:
      case 0x17FC:
      case 0x17FE:
      case 0x17FF:
      case 0x1801:
      case 0x1802:
      case 0x1804:
      case 0x1805:
      case 0x1807:
      case 0x1808:
      case 0x180A:
      case 0x180B:
      case 0x180D:
      case 0x180E:
      case 0x1810:
      case 0x1811:
      case 0x1813:
      case 0x1814:
      case 0x3BFA:
      case 0x3BFB:
      case 0x3BFD:
      case 0x3BFE:
      case 0x3C00:
      case 0x3C01:
      case 0x3C03:
      case 0x3C04:
      case 0x3C06:
      case 0x3C07:
      case 0x3C09:
      case 0x3C0A:
      case 0x3C0C:
      case 0x3C0D:
      case 0x3C0F:
      case 0x3C10:
      case 0x3C12:
      case 0x3C13:
      case 0x3C15:
      case 0x3C16:
      case 0x3C18:
      case 0x3C19:
      case 0x3C1B:
      case 0x3C1C:
      case 0x3C1E:
      case 0x3C1F:
      case 0x3C21:
      case 0x3C22:
      case 0x3C24:
      case 0x3C25:
      case 0x3C27:
      case 0x3C28:
      case 0x3C2A:
      case 0x3C2B:
      case 0x3C2D:
      case 0x3C2E:
      case 0x3C30:
      case 0x3C31:
      case 0x3C33:
      case 0x3C34:
      case 0x3C36:
      case 0x3C37:
      case 0x3C39:
      case 0x3C3A:
      case 0x3C3C:
      case 0x3C3D:
      case 0x3C3F:
      case 0x3C40:
      case 0x3C42:
      case 0x3C43:
      case 0x3C45:
      case 0x3C46:
      case 0x3C48:
      case 0x3C49:
      case 0x3C4B:
      case 0x3C4C:
      case 0x3C4E:
      case 0x3C4F:
      case 0x3C51:
      case 0x3C52:
      case 0x3C54:
      case 0x3C55:
      case 0x3C57:
      case 0x3C58:
        sub_1CD4360E8((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1815:
      case 0x1816:
      case 0x3C59:
        sub_1CBD9AA8C(a1, a2, a3, a4);
        break;
      case 0x1817:
      case 0x3C5B:
        sub_1CD43397C(a1, a2, a3, a4);
        break;
      case 0x1818:
      case 0x1819:
      case 0x181A:
      case 0x181B:
      case 0x181C:
      case 0x181D:
      case 0x181E:
      case 0x181F:
      case 0x1820:
      case 0x1821:
      case 0x1822:
      case 0x1823:
      case 0x1824:
      case 0x1825:
      case 0x1826:
      case 0x1827:
      case 0x1828:
      case 0x1829:
      case 0x182A:
      case 0x182B:
      case 0x182C:
      case 0x182D:
      case 0x182E:
      case 0x182F:
      case 0x1830:
      case 0x1831:
      case 0x1832:
      case 0x3C5C:
      case 0x3C5D:
      case 0x3C5E:
      case 0x3C5F:
      case 0x3C60:
      case 0x3C61:
      case 0x3C62:
      case 0x3C63:
      case 0x3C64:
      case 0x3C65:
      case 0x3C66:
      case 0x3C67:
      case 0x3C68:
      case 0x3C69:
      case 0x3C6A:
      case 0x3C6B:
      case 0x3C6C:
      case 0x3C6D:
      case 0x3C6E:
      case 0x3C6F:
      case 0x3C70:
      case 0x3C71:
      case 0x3C72:
      case 0x3C73:
      case 0x3C74:
      case 0x3C75:
      case 0x3C76:
        sub_1CD434E30(a1, a2, a3, a4);
        break;
      case 0x1833:
      case 0x1834:
      case 0x1835:
      case 0x1836:
      case 0x1837:
      case 0x1838:
      case 0x1839:
      case 0x183A:
      case 0x183B:
      case 0x183C:
      case 0x183D:
      case 0x183E:
      case 0x183F:
      case 0x1840:
      case 0x1841:
      case 0x1842:
      case 0x1843:
      case 0x1844:
      case 0x3C77:
      case 0x3C78:
      case 0x3C79:
      case 0x3C7A:
      case 0x3C7B:
      case 0x3C7C:
      case 0x3C7D:
      case 0x3C7E:
      case 0x3C7F:
      case 0x3C80:
      case 0x3C81:
      case 0x3C82:
      case 0x3C83:
      case 0x3C84:
      case 0x3C85:
      case 0x3C86:
      case 0x3C87:
      case 0x3C88:
        sub_1CD434C88(a1, a2, a3, a4);
        break;
      case 0x1845:
      case 0x1846:
      case 0x1847:
      case 0x1848:
      case 0x1849:
      case 0x184A:
      case 0x184B:
      case 0x184C:
      case 0x184D:
      case 0x3C89:
      case 0x3C8A:
      case 0x3C8B:
      case 0x3C8C:
      case 0x3C8D:
      case 0x3C8E:
      case 0x3C8F:
      case 0x3C90:
      case 0x3C91:
        sub_1CD4354BC(a1, a2, a3, a4);
        break;
      case 0x184E:
      case 0x3C92:
        *a3 = 115;
        unsigned int v9 = sub_1CBDA6464((unsigned __int16)v4, 0x2Eu);
        int v15 = 0;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v12 = 0u;
        sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v15 + 1, (int8x8_t *)&v12 + 1, (uint64_t)&v13);
        if (*a1 >= 4) {
          *(void *)&long long v12 = 0x7200000003;
        }
        long long v10 = v13;
        *(_OWORD *)a4 = v12;
        *(_OWORD *)(a4 + 16) = v10;
        *(_OWORD *)(a4 + 32) = v14;
        *(_DWORD *)(a4 + 48) = v15;
        break;
      case 0x184F:
      case 0x1850:
      case 0x1851:
      case 0x1852:
      case 0x1853:
      case 0x1854:
      case 0x1855:
      case 0x1856:
      case 0x1857:
      case 0x1858:
      case 0x1859:
      case 0x185A:
      case 0x185B:
      case 0x185C:
      case 0x185D:
      case 0x185E:
      case 0x185F:
      case 0x1860:
      case 0x1861:
      case 0x1862:
      case 0x1863:
      case 0x1864:
      case 0x1865:
      case 0x1866:
      case 0x1867:
      case 0x1868:
      case 0x1869:
      case 0x3C93:
      case 0x3C94:
      case 0x3C95:
      case 0x3C96:
      case 0x3C97:
      case 0x3C98:
      case 0x3C99:
      case 0x3C9A:
      case 0x3C9B:
      case 0x3C9C:
      case 0x3C9D:
      case 0x3C9E:
      case 0x3C9F:
      case 0x3CA0:
      case 0x3CA1:
      case 0x3CA2:
      case 0x3CA3:
      case 0x3CA4:
      case 0x3CA5:
      case 0x3CA6:
      case 0x3CA7:
      case 0x3CA8:
      case 0x3CA9:
      case 0x3CAA:
      case 0x3CAB:
      case 0x3CAC:
      case 0x3CAD:
        sub_1CD435178(a1, a2, a3, a4);
        break;
      case 0x186A:
      case 0x186B:
      case 0x186C:
      case 0x186D:
      case 0x186E:
      case 0x186F:
      case 0x3CAE:
      case 0x3CAF:
      case 0x3CB0:
      case 0x3CB1:
      case 0x3CB2:
      case 0x3CB3:
        sub_1CBD95C3C(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x1870:
      case 0x1871:
      case 0x1872:
      case 0x1873:
      case 0x1874:
      case 0x1875:
      case 0x1876:
      case 0x1877:
      case 0x1878:
      case 0x1879:
      case 0x187A:
      case 0x187B:
      case 0x187C:
      case 0x187D:
      case 0x187E:
      case 0x187F:
      case 0x1880:
      case 0x1881:
      case 0x3CB4:
      case 0x3CB5:
      case 0x3CB6:
      case 0x3CB7:
      case 0x3CB8:
      case 0x3CB9:
      case 0x3CBA:
      case 0x3CBB:
      case 0x3CBC:
      case 0x3CBD:
      case 0x3CBE:
      case 0x3CBF:
      case 0x3CC0:
      case 0x3CC1:
      case 0x3CC2:
      case 0x3CC3:
      case 0x3CC4:
      case 0x3CC5:
        sub_1CD434FD0(a1, a2, a3, a4);
        break;
      case 0x1882:
      case 0x1883:
      case 0x1884:
      case 0x1885:
      case 0x1886:
      case 0x1887:
      case 0x1888:
      case 0x1889:
      case 0x188A:
      case 0x3CC6:
      case 0x3CC7:
      case 0x3CC8:
      case 0x3CC9:
      case 0x3CCA:
      case 0x3CCB:
      case 0x3CCC:
      case 0x3CCD:
      case 0x3CCE:
        sub_1CD43565C(a1, a2, a3, a4);
        break;
      case 0x188B:
      case 0x188C:
      case 0x188D:
      case 0x188E:
      case 0x188F:
      case 0x1890:
      case 0x1891:
      case 0x1892:
      case 0x1893:
      case 0x1894:
      case 0x1895:
      case 0x1896:
      case 0x1897:
      case 0x1898:
      case 0x1899:
      case 0x189A:
      case 0x189B:
      case 0x189C:
      case 0x3CCF:
      case 0x3CD0:
      case 0x3CD1:
      case 0x3CD2:
      case 0x3CD3:
      case 0x3CD4:
      case 0x3CD5:
      case 0x3CD6:
      case 0x3CD7:
      case 0x3CD8:
      case 0x3CD9:
      case 0x3CDA:
      case 0x3CDB:
      case 0x3CDC:
      case 0x3CDD:
      case 0x3CDE:
      case 0x3CDF:
      case 0x3CE0:
        sub_1CD435318(a1, a2, a3, a4);
        break;
      case 0x189D:
      case 0x189E:
      case 0x189F:
      case 0x18A0:
      case 0x18A1:
      case 0x18A2:
      case 0x18A3:
      case 0x18A4:
      case 0x18A5:
      case 0x3CE1:
      case 0x3CE2:
      case 0x3CE3:
      case 0x3CE4:
      case 0x3CE5:
      case 0x3CE6:
      case 0x3CE7:
      case 0x3CE8:
      case 0x3CE9:
        sub_1CD4357FC(a1, a2, a3, a4);
        break;
      case 0x18A6:
      case 0x18A7:
      case 0x18A8:
      case 0x18A9:
      case 0x18AA:
      case 0x18AB:
      case 0x18AC:
      case 0x18AD:
      case 0x18AE:
      case 0x18AF:
      case 0x18B0:
      case 0x18B1:
      case 0x18B2:
      case 0x18B3:
      case 0x18B4:
      case 0x18B5:
      case 0x18B6:
      case 0x18B7:
      case 0x3CEA:
      case 0x3CEB:
      case 0x3CEC:
      case 0x3CED:
      case 0x3CEE:
      case 0x3CEF:
      case 0x3CF0:
      case 0x3CF1:
      case 0x3CF2:
      case 0x3CF3:
      case 0x3CF4:
      case 0x3CF5:
      case 0x3CF6:
      case 0x3CF7:
      case 0x3CF8:
      case 0x3CF9:
      case 0x3CFA:
      case 0x3CFB:
        sub_1CBD87948(a1, a2, a3, a4);
        break;
      case 0x18B8:
      case 0x18B9:
      case 0x18BA:
      case 0x18BB:
      case 0x18BC:
      case 0x18BD:
      case 0x18BE:
      case 0x18BF:
      case 0x18C0:
      case 0x3CFC:
      case 0x3CFD:
      case 0x3CFE:
      case 0x3CFF:
      case 0x3D00:
      case 0x3D01:
      case 0x3D02:
      case 0x3D03:
      case 0x3D04:
        sub_1CBD88198(a1, a2, a3, a4);
        break;
      case 0x18C1:
      case 0x18C2:
      case 0x18C3:
      case 0x18C4:
      case 0x18C5:
      case 0x18C6:
      case 0x18C7:
      case 0x18C8:
      case 0x18C9:
      case 0x18CA:
      case 0x18CB:
      case 0x18CC:
      case 0x18CD:
      case 0x18CE:
      case 0x18CF:
      case 0x18D0:
      case 0x18D1:
      case 0x18D2:
      case 0x3D05:
      case 0x3D06:
      case 0x3D07:
      case 0x3D08:
      case 0x3D09:
      case 0x3D0A:
      case 0x3D0B:
      case 0x3D0C:
      case 0x3D0D:
      case 0x3D0E:
      case 0x3D0F:
      case 0x3D10:
      case 0x3D11:
      case 0x3D12:
      case 0x3D13:
      case 0x3D14:
      case 0x3D15:
      case 0x3D16:
        sub_1CD442D74(a1, a2, a3, a4);
        break;
      case 0x18D3:
      case 0x18D7:
      case 0x18DB:
      case 0x18DF:
      case 0x18E3:
      case 0x18E7:
      case 0x18EB:
      case 0x18EF:
      case 0x18F3:
      case 0x18F7:
      case 0x18FB:
      case 0x18FF:
      case 0x1903:
      case 0x1907:
      case 0x190B:
      case 0x190F:
      case 0x1913:
      case 0x1917:
      case 0x191B:
      case 0x191F:
      case 0x1923:
      case 0x1927:
      case 0x192B:
      case 0x192F:
      case 0x1933:
      case 0x1937:
      case 0x193B:
      case 0x3D17:
      case 0x3D1B:
      case 0x3D1F:
      case 0x3D23:
      case 0x3D27:
      case 0x3D2B:
      case 0x3D2F:
      case 0x3D33:
      case 0x3D37:
      case 0x3D3B:
      case 0x3D3F:
      case 0x3D43:
      case 0x3D47:
      case 0x3D4B:
      case 0x3D4F:
      case 0x3D53:
      case 0x3D57:
      case 0x3D5B:
      case 0x3D5F:
      case 0x3D63:
      case 0x3D67:
      case 0x3D6B:
      case 0x3D6F:
      case 0x3D73:
      case 0x3D77:
      case 0x3D7B:
      case 0x3D7F:
        sub_1CBD95DFC(a1, a2, a3, a4);
        break;
      case 0x18D4:
      case 0x18D5:
      case 0x18D6:
      case 0x18D8:
      case 0x18D9:
      case 0x18DA:
      case 0x18DC:
      case 0x18DD:
      case 0x18DE:
      case 0x18E0:
      case 0x18E1:
      case 0x18E2:
      case 0x18E4:
      case 0x18E5:
      case 0x18E6:
      case 0x18E8:
      case 0x18E9:
      case 0x18EA:
      case 0x18EC:
      case 0x18ED:
      case 0x18EE:
      case 0x18F0:
      case 0x18F1:
      case 0x18F2:
      case 0x18F4:
      case 0x18F5:
      case 0x18F6:
      case 0x18F8:
      case 0x18F9:
      case 0x18FA:
      case 0x18FC:
      case 0x18FD:
      case 0x18FE:
      case 0x1900:
      case 0x1901:
      case 0x1902:
      case 0x1904:
      case 0x1905:
      case 0x1906:
      case 0x1908:
      case 0x1909:
      case 0x190A:
      case 0x190C:
      case 0x190D:
      case 0x190E:
      case 0x1910:
      case 0x1911:
      case 0x1912:
      case 0x1914:
      case 0x1915:
      case 0x1916:
      case 0x1918:
      case 0x1919:
      case 0x191A:
      case 0x191C:
      case 0x191D:
      case 0x191E:
      case 0x1920:
      case 0x1921:
      case 0x1922:
      case 0x1924:
      case 0x1925:
      case 0x1926:
      case 0x1928:
      case 0x1929:
      case 0x192A:
      case 0x192C:
      case 0x192D:
      case 0x192E:
      case 0x1930:
      case 0x1931:
      case 0x1932:
      case 0x1934:
      case 0x1935:
      case 0x1936:
      case 0x1938:
      case 0x1939:
      case 0x193A:
      case 0x193C:
      case 0x193D:
      case 0x193E:
      case 0x3D18:
      case 0x3D19:
      case 0x3D1A:
      case 0x3D1C:
      case 0x3D1D:
      case 0x3D1E:
      case 0x3D20:
      case 0x3D21:
      case 0x3D22:
      case 0x3D24:
      case 0x3D25:
      case 0x3D26:
      case 0x3D28:
      case 0x3D29:
      case 0x3D2A:
      case 0x3D2C:
      case 0x3D2D:
      case 0x3D2E:
      case 0x3D30:
      case 0x3D31:
      case 0x3D32:
      case 0x3D34:
      case 0x3D35:
      case 0x3D36:
      case 0x3D38:
      case 0x3D39:
      case 0x3D3A:
      case 0x3D3C:
      case 0x3D3D:
      case 0x3D3E:
      case 0x3D40:
      case 0x3D41:
      case 0x3D42:
      case 0x3D44:
      case 0x3D45:
      case 0x3D46:
      case 0x3D48:
      case 0x3D49:
      case 0x3D4A:
      case 0x3D4C:
      case 0x3D4D:
      case 0x3D4E:
      case 0x3D50:
      case 0x3D51:
      case 0x3D52:
      case 0x3D54:
      case 0x3D55:
      case 0x3D56:
      case 0x3D58:
      case 0x3D59:
      case 0x3D5A:
      case 0x3D5C:
      case 0x3D5D:
      case 0x3D5E:
      case 0x3D60:
      case 0x3D61:
      case 0x3D62:
      case 0x3D64:
      case 0x3D65:
      case 0x3D66:
      case 0x3D68:
      case 0x3D69:
      case 0x3D6A:
      case 0x3D6C:
      case 0x3D6D:
      case 0x3D6E:
      case 0x3D70:
      case 0x3D71:
      case 0x3D72:
      case 0x3D74:
      case 0x3D75:
      case 0x3D76:
      case 0x3D78:
      case 0x3D79:
      case 0x3D7A:
      case 0x3D7C:
      case 0x3D7D:
      case 0x3D7E:
      case 0x3D80:
      case 0x3D81:
      case 0x3D82:
        sub_1CBD96028(a1, a2, a3, a4);
        break;
      case 0x193F:
      case 0x1940:
      case 0x1941:
      case 0x1942:
      case 0x1943:
      case 0x1944:
      case 0x1945:
      case 0x1946:
      case 0x3D83:
      case 0x3D84:
      case 0x3D85:
      case 0x3D86:
      case 0x3D87:
      case 0x3D88:
      case 0x3D89:
      case 0x3D8A:
        sub_1CBD98190(a1, a2, a3, a4);
        break;
      case 0x1947:
      case 0x1948:
      case 0x1949:
      case 0x194A:
      case 0x194B:
      case 0x194C:
      case 0x194D:
      case 0x194E:
      case 0x3D8B:
      case 0x3D8C:
      case 0x3D8D:
      case 0x3D8E:
      case 0x3D8F:
      case 0x3D90:
      case 0x3D91:
      case 0x3D92:
        sub_1CBD983E4(a1, a2, a3, a4);
        break;
      case 0x194F:
      case 0x1950:
      case 0x1951:
      case 0x1952:
      case 0x1953:
      case 0x1954:
      case 0x1955:
      case 0x1956:
      case 0x3D93:
      case 0x3D94:
      case 0x3D95:
      case 0x3D96:
      case 0x3D97:
      case 0x3D98:
      case 0x3D99:
      case 0x3D9A:
        sub_1CBD97CFC(a1, a2, a3, a4);
        break;
      case 0x1957:
      case 0x1958:
      case 0x1959:
      case 0x195A:
      case 0x195B:
      case 0x195C:
      case 0x195D:
      case 0x195E:
      case 0x3D9B:
      case 0x3D9C:
      case 0x3D9D:
      case 0x3D9E:
      case 0x3D9F:
      case 0x3DA0:
      case 0x3DA1:
      case 0x3DA2:
        sub_1CBD97F50(a1, a2, a3, a4);
        break;
      case 0x195F:
      case 0x1960:
      case 0x1961:
      case 0x1962:
      case 0x3DA3:
      case 0x3DA4:
      case 0x3DA5:
      case 0x3DA6:
        sub_1CBD903AC(a1, a2, a3, a4);
        break;
      case 0x1963:
      case 0x1964:
      case 0x1965:
      case 0x1966:
      case 0x3DA7:
      case 0x3DA8:
      case 0x3DA9:
      case 0x3DAA:
        sub_1CBD905CC((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1967:
      case 0x3DAB:
        sub_1CBD9A734(a1, a2, a3, a4);
        break;
      case 0x1968:
      case 0x3DAC:
        sub_1CBD9A604(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x1969:
      case 0x196A:
      case 0x196B:
      case 0x196C:
      case 0x3DAD:
      case 0x3DAE:
      case 0x3DAF:
      case 0x3DB0:
        sub_1CD43C5E4(a1, a2, a3, a4);
        break;
      case 0x196D:
      case 0x196E:
      case 0x196F:
      case 0x1970:
      case 0x3DB1:
      case 0x3DB2:
      case 0x3DB3:
      case 0x3DB4:
        sub_1CD43CF5C(a1, a2, a3, a4);
        break;
      case 0x1971:
      case 0x1972:
      case 0x3DB5:
      case 0x3DB6:
        sub_1CD43F258(a1, a2, a3, a4);
        break;
      case 0x1973:
      case 0x1974:
      case 0x3DB7:
      case 0x3DB8:
        sub_1CD43F5EC(a1, a2, a3, a4);
        break;
      case 0x1975:
      case 0x1976:
      case 0x1977:
      case 0x1978:
      case 0x3DB9:
      case 0x3DBA:
      case 0x3DBB:
      case 0x3DBC:
        sub_1CD43F3FC((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1979:
      case 0x197A:
      case 0x197B:
      case 0x197C:
      case 0x3DBD:
      case 0x3DBE:
      case 0x3DBF:
      case 0x3DC0:
        sub_1CD43FD60((uint64_t)a1, a2, a3, a4);
        break;
      case 0x197D:
      case 0x197E:
      case 0x197F:
      case 0x1980:
      case 0x3DC1:
      case 0x3DC2:
      case 0x3DC3:
      case 0x3DC4:
        sub_1CD43F790((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1981:
      case 0x1982:
      case 0x1983:
      case 0x1984:
      case 0x3DC5:
      case 0x3DC6:
      case 0x3DC7:
      case 0x3DC8:
        sub_1CD43FF54((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1985:
      case 0x1986:
      case 0x1987:
      case 0x1988:
      case 0x3DC9:
      case 0x3DCA:
      case 0x3DCB:
      case 0x3DCC:
        sub_1CD43F980((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1989:
      case 0x198A:
      case 0x198B:
      case 0x198C:
      case 0x3DCD:
      case 0x3DCE:
      case 0x3DCF:
      case 0x3DD0:
        sub_1CD440148((uint64_t)a1, a2, a3, a4);
        break;
      case 0x198D:
      case 0x198E:
      case 0x198F:
      case 0x1990:
      case 0x3DD1:
      case 0x3DD2:
      case 0x3DD3:
      case 0x3DD4:
        sub_1CD43FB70((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1991:
      case 0x1992:
      case 0x1993:
      case 0x1994:
      case 0x3DD5:
      case 0x3DD6:
      case 0x3DD7:
      case 0x3DD8:
        sub_1CD44033C((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1995:
      case 0x1996:
      case 0x1997:
      case 0x1998:
      case 0x3DD9:
      case 0x3DDA:
      case 0x3DDB:
      case 0x3DDC:
        sub_1CBD9C7E4(a1, a2, a3, a4);
        break;
      case 0x1999:
      case 0x199A:
      case 0x199B:
      case 0x199C:
      case 0x3DDD:
      case 0x3DDE:
      case 0x3DDF:
      case 0x3DE0:
        sub_1CD43E178(a1, a2, a3, a4);
        break;
      case 0x199D:
      case 0x199E:
      case 0x199F:
      case 0x19A0:
      case 0x3DE1:
      case 0x3DE2:
      case 0x3DE3:
      case 0x3DE4:
        sub_1CD43C778(a1, a2, a3, a4);
        break;
      case 0x19A1:
      case 0x19A2:
      case 0x19A3:
      case 0x19A4:
      case 0x3DE5:
      case 0x3DE6:
      case 0x3DE7:
      case 0x3DE8:
        sub_1CD43D0F0(a1, a2, a3, a4);
        break;
      case 0x19A5:
      case 0x19A6:
      case 0x19A7:
      case 0x19A8:
      case 0x3DE9:
      case 0x3DEA:
      case 0x3DEB:
      case 0x3DEC:
        sub_1CD43D8D4(a1, a2, a3, a4);
        break;
      case 0x19A9:
      case 0x19AA:
      case 0x19AB:
      case 0x19AC:
      case 0x3DED:
      case 0x3DEE:
      case 0x3DEF:
      case 0x3DF0:
        sub_1CD43E320(a1, a2, a3, a4);
        break;
      case 0x19AD:
      case 0x19AE:
      case 0x19AF:
      case 0x19B0:
      case 0x3DF1:
      case 0x3DF2:
      case 0x3DF3:
      case 0x3DF4:
        sub_1CD43DC44(a1, a2, a3, a4);
        break;
      case 0x19B1:
      case 0x19B2:
      case 0x19B3:
      case 0x19B4:
      case 0x3DF5:
      case 0x3DF6:
      case 0x3DF7:
      case 0x3DF8:
        sub_1CD43E684(a1, a2, a3, a4);
        break;
      case 0x19B5:
      case 0x19B6:
      case 0x19B7:
      case 0x19B8:
      case 0x3DF9:
      case 0x3DFA:
      case 0x3DFB:
      case 0x3DFC:
        sub_1CD43DA80(a1, a2, a3, a4);
        break;
      case 0x19B9:
      case 0x19BA:
      case 0x19BB:
      case 0x19BC:
      case 0x3DFD:
      case 0x3DFE:
      case 0x3DFF:
      case 0x3E00:
        sub_1CD43E4C8(a1, a2, a3, a4);
        break;
      case 0x19BD:
      case 0x19BE:
      case 0x19BF:
      case 0x19C0:
      case 0x3E01:
      case 0x3E02:
      case 0x3E03:
      case 0x3E04:
        sub_1CD43DDF0(a1, a2, a3, a4);
        break;
      case 0x19C1:
      case 0x19C2:
      case 0x19C3:
      case 0x19C4:
      case 0x3E05:
      case 0x3E06:
      case 0x3E07:
      case 0x3E08:
        sub_1CD43E82C(a1, a2, a3, a4);
        break;
      case 0x19C5:
      case 0x19C6:
      case 0x19C7:
      case 0x19C8:
      case 0x3E09:
      case 0x3E0A:
      case 0x3E0B:
      case 0x3E0C:
        sub_1CD43C90C(a1, a2, a3, a4);
        break;
      case 0x19C9:
      case 0x19CA:
      case 0x19CB:
      case 0x19CC:
      case 0x3E0D:
      case 0x3E0E:
      case 0x3E0F:
      case 0x3E10:
        sub_1CD43D284(a1, a2, a3, a4);
        break;
      case 0x19CD:
      case 0x19CE:
      case 0x19CF:
      case 0x19D0:
      case 0x19D1:
      case 0x19D2:
      case 0x19D3:
      case 0x19D4:
      case 0x3E11:
      case 0x3E12:
      case 0x3E13:
      case 0x3E14:
      case 0x3E15:
      case 0x3E16:
      case 0x3E17:
      case 0x3E18:
        sub_1CBD9C010(a1, a2, a3, a4);
        break;
      case 0x19D5:
      case 0x19D6:
      case 0x19D7:
      case 0x19D8:
      case 0x3E19:
      case 0x3E1A:
      case 0x3E1B:
      case 0x3E1C:
        sub_1CD43B658(a1, a2, a3, a4);
        break;
      case 0x19D9:
      case 0x19DA:
      case 0x19DB:
      case 0x19DC:
      case 0x19DD:
      case 0x19DE:
      case 0x19DF:
      case 0x19E0:
      case 0x19E1:
      case 0x19E2:
      case 0x19E3:
      case 0x19E4:
      case 0x19E5:
      case 0x19E6:
      case 0x19E7:
      case 0x19E8:
      case 0x19E9:
      case 0x19EA:
      case 0x19EB:
      case 0x19EC:
      case 0x19ED:
      case 0x19EE:
      case 0x19EF:
      case 0x19F0:
      case 0x19F1:
      case 0x19F2:
      case 0x19F3:
      case 0x3E1D:
      case 0x3E1E:
      case 0x3E1F:
      case 0x3E20:
      case 0x3E21:
      case 0x3E22:
      case 0x3E23:
      case 0x3E24:
      case 0x3E25:
      case 0x3E26:
      case 0x3E27:
      case 0x3E28:
      case 0x3E29:
      case 0x3E2A:
      case 0x3E2B:
      case 0x3E2C:
      case 0x3E2D:
      case 0x3E2E:
      case 0x3E2F:
      case 0x3E30:
      case 0x3E31:
      case 0x3E32:
      case 0x3E33:
      case 0x3E34:
      case 0x3E35:
      case 0x3E36:
      case 0x3E37:
        sub_1CD43A5F4((uint64_t)a1, a2, a3, a4);
        break;
      case 0x19F4:
      case 0x19F5:
      case 0x19F6:
      case 0x19F7:
      case 0x19F8:
      case 0x19F9:
      case 0x19FA:
      case 0x19FB:
      case 0x19FC:
      case 0x19FD:
      case 0x19FE:
      case 0x19FF:
      case 0x1A00:
      case 0x1A01:
      case 0x1A02:
      case 0x1A03:
      case 0x1A04:
      case 0x1A05:
      case 0x1A06:
      case 0x1A07:
      case 0x1A08:
      case 0x1A09:
      case 0x1A0A:
      case 0x1A0B:
      case 0x1A0C:
      case 0x1A0D:
      case 0x1A0E:
      case 0x3E38:
      case 0x3E39:
      case 0x3E3A:
      case 0x3E3B:
      case 0x3E3C:
      case 0x3E3D:
      case 0x3E3E:
      case 0x3E3F:
      case 0x3E40:
      case 0x3E41:
      case 0x3E42:
      case 0x3E43:
      case 0x3E44:
      case 0x3E45:
      case 0x3E46:
      case 0x3E47:
      case 0x3E48:
      case 0x3E49:
      case 0x3E4A:
      case 0x3E4B:
      case 0x3E4C:
      case 0x3E4D:
      case 0x3E4E:
      case 0x3E4F:
      case 0x3E50:
      case 0x3E51:
      case 0x3E52:
        sub_1CD43A43C(a1, a2, a3, a4);
        break;
      case 0x1A0F:
      case 0x1A10:
      case 0x1A11:
      case 0x1A12:
      case 0x1A13:
      case 0x1A14:
      case 0x1A15:
      case 0x1A16:
      case 0x1A17:
      case 0x1A18:
      case 0x1A19:
      case 0x1A1A:
      case 0x3E53:
      case 0x3E54:
      case 0x3E55:
      case 0x3E56:
      case 0x3E57:
      case 0x3E58:
      case 0x3E59:
      case 0x3E5A:
      case 0x3E5B:
      case 0x3E5C:
      case 0x3E5D:
      case 0x3E5E:
        sub_1CD43B4C8(a1, a2, a3, a4);
        break;
      case 0x1A1B:
      case 0x1A1C:
      case 0x1A1D:
      case 0x1A1E:
      case 0x1A1F:
      case 0x1A20:
      case 0x1A21:
      case 0x1A22:
      case 0x3E5F:
      case 0x3E60:
      case 0x3E61:
      case 0x3E62:
      case 0x3E63:
      case 0x3E64:
      case 0x3E65:
      case 0x3E66:
        sub_1CD43B970(a1, a2, a3, a4);
        break;
      case 0x1A23:
      case 0x1A24:
      case 0x1A25:
      case 0x1A26:
      case 0x3E67:
      case 0x3E68:
      case 0x3E69:
      case 0x3E6A:
        sub_1CD43BB00(a1, a2, a3, a4);
        break;
      case 0x1A27:
      case 0x1A28:
      case 0x1A29:
      case 0x1A2A:
      case 0x1A2B:
      case 0x1A2C:
      case 0x1A2D:
      case 0x1A2E:
      case 0x3E6B:
      case 0x3E6C:
      case 0x3E6D:
      case 0x3E6E:
      case 0x3E6F:
      case 0x3E70:
      case 0x3E71:
      case 0x3E72:
        sub_1CBD9C1A0(a1, a2, a3, a4);
        break;
      case 0x1A2F:
      case 0x1A30:
      case 0x1A31:
      case 0x1A32:
      case 0x3E73:
      case 0x3E74:
      case 0x3E75:
      case 0x3E76:
        sub_1CD43B7E4(a1, a2, a3, a4);
        break;
      case 0x1A33:
      case 0x1A34:
      case 0x1A35:
      case 0x1A36:
      case 0x1A37:
      case 0x1A38:
      case 0x3E77:
      case 0x3E78:
      case 0x3E79:
      case 0x3E7A:
      case 0x3E7B:
      case 0x3E7C:
        sub_1CBD91888(a1, a2, a3, a4);
        break;
      case 0x1A39:
      case 0x1A3A:
      case 0x1A3B:
      case 0x3E7D:
      case 0x3E7E:
      case 0x3E7F:
        sub_1CD43837C(a1, a2, a3, a4);
        break;
      case 0x1A3C:
      case 0x3E80:
        sub_1CD441614(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x1A3D:
      case 0x1A3E:
      case 0x1A3F:
      case 0x1A40:
      case 0x1A41:
      case 0x1A42:
      case 0x1A43:
      case 0x1A44:
      case 0x3E85:
      case 0x3E86:
      case 0x3E87:
      case 0x3E88:
      case 0x3E89:
      case 0x3E8A:
      case 0x3E8B:
      case 0x3E8C:
      case 0x3E8D:
      case 0x3E8E:
      case 0x3E8F:
      case 0x3E90:
      case 0x3E91:
      case 0x3E92:
      case 0x3E93:
      case 0x3E94:
      case 0x3E95:
      case 0x3E96:
      case 0x3E97:
      case 0x3E98:
      case 0x3E99:
      case 0x3E9A:
      case 0x3E9B:
      case 0x3E9C:
      case 0x3E9D:
      case 0x3E9E:
      case 0x3E9F:
      case 0x3EA0:
      case 0x3EA1:
      case 0x3EA2:
      case 0x3EA3:
      case 0x3EA4:
      case 0x3EA5:
      case 0x3EA6:
      case 0x3EA7:
      case 0x3EA8:
      case 0x3EA9:
      case 0x3EAA:
      case 0x3EAB:
      case 0x3EAC:
      case 0x3EAD:
      case 0x3EAE:
      case 0x3EAF:
      case 0x3EB0:
      case 0x3EB1:
      case 0x3EB2:
      case 0x3EB3:
      case 0x3EB4:
      case 0x3EB5:
      case 0x3EB6:
      case 0x3EB7:
      case 0x3EB8:
      case 0x3EB9:
      case 0x3EBA:
      case 0x3EBB:
      case 0x3EBC:
      case 0x3EBD:
      case 0x3EBE:
      case 0x3EBF:
      case 0x3EC0:
      case 0x3EC1:
      case 0x3EC2:
      case 0x3EC3:
      case 0x3EC4:
      case 0x3EC5:
      case 0x3EC6:
      case 0x3EC7:
      case 0x3EC8:
      case 0x3EC9:
      case 0x3ECA:
      case 0x3ECB:
      case 0x3ECC:
      case 0x3ECD:
      case 0x3ECE:
      case 0x3ECF:
      case 0x3ED0:
      case 0x3ED1:
      case 0x3ED2:
      case 0x3ED3:
      case 0x3ED4:
      case 0x3ED5:
      case 0x3ED6:
      case 0x3ED7:
      case 0x3ED8:
        sub_1CBD887C4(a1, a2, a3, a4);
        break;
      case 0x1A45:
      case 0x1A46:
      case 0x1A47:
      case 0x1A48:
      case 0x1A49:
      case 0x1A4A:
      case 0x1A4B:
      case 0x1A4C:
      case 0x1A4D:
      case 0x1A4E:
      case 0x1A4F:
      case 0x1A50:
      case 0x1A51:
      case 0x1A52:
      case 0x1A53:
      case 0x1A54:
      case 0x1A55:
      case 0x1A56:
      case 0x1A57:
      case 0x1A58:
      case 0x1A59:
      case 0x1A5A:
      case 0x1A5B:
      case 0x1A5C:
      case 0x3ED9:
      case 0x3EDA:
      case 0x3EDB:
      case 0x3EDC:
      case 0x3EDD:
      case 0x3EDE:
      case 0x3EDF:
      case 0x3EE0:
      case 0x3EE1:
      case 0x3EE2:
      case 0x3EE3:
      case 0x3EE4:
      case 0x3EE5:
      case 0x3EE6:
      case 0x3EE7:
      case 0x3EE8:
      case 0x3EE9:
      case 0x3EEA:
      case 0x3EEB:
      case 0x3EEC:
      case 0x3EED:
      case 0x3EEE:
      case 0x3EEF:
      case 0x3EF0:
      case 0x3EF1:
      case 0x3EF2:
      case 0x3EF3:
      case 0x3EF4:
        sub_1CBD95448(a1, a2, a3, a4);
        break;
      case 0x1A5D:
      case 0x1A5E:
      case 0x1A5F:
      case 0x1A60:
      case 0x1A61:
      case 0x1A62:
      case 0x1A63:
      case 0x1A64:
      case 0x1A65:
      case 0x1A66:
      case 0x1A67:
      case 0x1A68:
      case 0x1A69:
      case 0x1A6A:
      case 0x1A6B:
      case 0x1A6C:
      case 0x1A6D:
      case 0x1A6E:
      case 0x1A6F:
      case 0x1A70:
      case 0x1A71:
      case 0x1A72:
      case 0x1A73:
      case 0x1A74:
      case 0x1A75:
      case 0x1A76:
      case 0x1A77:
      case 0x1A78:
      case 0x1A79:
      case 0x1A7A:
      case 0x1A7B:
      case 0x1A7C:
      case 0x1A7D:
      case 0x1A7E:
      case 0x1A7F:
      case 0x1A80:
      case 0x1A81:
      case 0x1A82:
      case 0x1A83:
      case 0x1A84:
      case 0x1A85:
      case 0x1A86:
      case 0x1A87:
      case 0x1A88:
      case 0x1A89:
      case 0x1A8A:
      case 0x1A8B:
      case 0x1A8C:
      case 0x1A8D:
      case 0x1A8E:
      case 0x1A8F:
      case 0x1A90:
      case 0x1A91:
      case 0x1A92:
      case 0x1A93:
      case 0x1A94:
      case 0x3EF5:
        sub_1CBD94F2C(a1, a2, a3, a4);
        break;
      case 0x1A95:
      case 0x1A96:
      case 0x1A97:
      case 0x1A98:
      case 0x1A99:
      case 0x1A9A:
      case 0x1A9B:
      case 0x1A9C:
      case 0x1A9D:
      case 0x1A9E:
      case 0x1A9F:
      case 0x1AA0:
      case 0x1AA1:
      case 0x1AA2:
      case 0x1AA3:
      case 0x1AA4:
      case 0x1AA5:
      case 0x1AA6:
      case 0x1AA7:
      case 0x1AA8:
      case 0x1AA9:
      case 0x1AAA:
      case 0x1AAB:
      case 0x1AAC:
      case 0x1AAD:
      case 0x1AAE:
      case 0x1AAF:
      case 0x1AB0:
      case 0x3EF6:
      case 0x3EF7:
      case 0x3EF8:
      case 0x3EF9:
      case 0x3EFA:
      case 0x3EFB:
      case 0x3EFC:
      case 0x3EFD:
        sub_1CD4396C0(a1, a2, a3, a4);
        break;
      case 0x1AB1:
      case 0x3EFE:
      case 0x3EFF:
      case 0x3F00:
      case 0x3F01:
        sub_1CD441F40(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x1AB2:
      case 0x1AB3:
      case 0x1AB4:
      case 0x1AB5:
      case 0x1AB6:
      case 0x1AB7:
      case 0x1AB8:
      case 0x1AB9:
      case 0x3F02:
        sub_1CBD919D8(a1, a2, a3, a4);
        break;
      case 0x1ABA:
      case 0x1ABB:
      case 0x1ABC:
      case 0x1ABD:
      case 0x3F03:
      case 0x3F04:
      case 0x3F05:
      case 0x3F06:
        sub_1CD4384C8(a1, a2, a3, a4);
        break;
      case 0x1ABE:
      case 0x23E3:
      case 0x3F07:
      case 0x3F08:
      case 0x3F09:
      case 0x3F0A:
        sub_1CBD9A960(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x1ABF:
      case 0x1AC0:
      case 0x1AC1:
      case 0x1AC2:
      case 0x3F0B:
      case 0x3F0C:
      case 0x3F0D:
      case 0x3F0E:
        sub_1CBD9C330(a1, a2, a3, a4);
        break;
      case 0x1AC3:
      case 0x1AC4:
      case 0x1AC5:
      case 0x1AC6:
      case 0x3F0F:
      case 0x3F10:
      case 0x3F11:
      case 0x3F12:
        sub_1CD43BC8C(a1, a2, a3, a4);
        break;
      case 0x1AC7:
      case 0x1AC8:
      case 0x1AC9:
      case 0x1ACA:
      case 0x3F13:
      case 0x3F14:
      case 0x3F15:
      case 0x3F16:
        sub_1CD43BE1C(a1, a2, a3, a4);
        break;
      case 0x1ACB:
      case 0x1ACC:
      case 0x1ACD:
      case 0x1ACE:
      case 0x1ACF:
      case 0x1AD0:
      case 0x1AD1:
      case 0x1AD2:
      case 0x3F17:
      case 0x3F18:
      case 0x3F19:
      case 0x3F1A:
      case 0x3F1B:
      case 0x3F1C:
      case 0x3F1D:
      case 0x3F1E:
      case 0x3F1F:
      case 0x3F20:
      case 0x3F21:
      case 0x3F22:
      case 0x3F23:
      case 0x3F24:
      case 0x3F25:
      case 0x3F26:
      case 0x3F27:
      case 0x3F28:
      case 0x3F29:
      case 0x3F2A:
      case 0x3F2B:
      case 0x3F2C:
        sub_1CBD9C4C4(a1, a2, a3, a4);
        break;
      case 0x1AD3:
      case 0x1AD4:
      case 0x1AD5:
      case 0x1AD6:
      case 0x3F2D:
      case 0x3F2E:
      case 0x3F2F:
      case 0x3F30:
      case 0x3F31:
      case 0x3F32:
      case 0x3F33:
      case 0x3F34:
      case 0x3F35:
        sub_1CD43BFB0(a1, a2, a3, a4);
        break;
      case 0x1AD7:
      case 0x1AD8:
      case 0x1AD9:
      case 0x1ADA:
      case 0x1ADB:
      case 0x1ADC:
      case 0x1ADD:
      case 0x1ADE:
      case 0x1ADF:
      case 0x1AE0:
      case 0x1AE1:
      case 0x1AE2:
      case 0x1AE3:
      case 0x1AE4:
      case 0x1AE5:
      case 0x1AE6:
      case 0x1AE7:
      case 0x1AE8:
      case 0x3F36:
      case 0x3F37:
      case 0x3F38:
      case 0x3F39:
      case 0x3F3A:
      case 0x3F3B:
      case 0x3F3C:
      case 0x3F3D:
      case 0x3F3E:
      case 0x3F3F:
      case 0x3F40:
      case 0x3F41:
      case 0x3F42:
      case 0x3F43:
      case 0x3F44:
      case 0x3F45:
      case 0x3F46:
      case 0x3F47:
        sub_1CD43A7EC((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1AE9:
      case 0x1AEA:
      case 0x1AEB:
      case 0x1AEC:
      case 0x1AED:
      case 0x1AEE:
      case 0x1AEF:
      case 0x1AF0:
      case 0x1AF1:
      case 0x3F48:
      case 0x3F49:
      case 0x3F4A:
      case 0x3F4B:
      case 0x3F4C:
      case 0x3F4D:
      case 0x3F4E:
      case 0x3F4F:
      case 0x3F50:
        sub_1CD43AB9C((uint64_t)a1, a2, a3, a4);
        break;
      case 0x1AF2:
      case 0x1AF3:
      case 0x1AF4:
      case 0x1AF5:
      case 0x1AF6:
      case 0x1AF7:
      case 0x1AF8:
      case 0x1AF9:
      case 0x1AFA:
      case 0x1AFB:
      case 0x1AFC:
      case 0x1AFD:
      case 0x1AFE:
      case 0x1AFF:
      case 0x1B00:
      case 0x1B01:
      case 0x1B02:
      case 0x1B03:
      case 0x3F51:
      case 0x3F52:
      case 0x3F53:
      case 0x3F54:
      case 0x3F55:
      case 0x3F56:
      case 0x3F57:
      case 0x3F58:
        sub_1CBD9AD60(a1, a2, a3, a4);
        break;
      case 0x1B04:
      case 0x1B05:
      case 0x1B06:
      case 0x1B07:
      case 0x1B08:
      case 0x1B09:
      case 0x1B0A:
      case 0x1B0B:
      case 0x1B0C:
      case 0x3F59:
      case 0x3F5A:
      case 0x3F5B:
      case 0x3F5C:
        sub_1CD43A9E4(a1, a2, a3, a4);
        break;
      case 0x1B0D:
      case 0x1B0E:
      case 0x1B0F:
      case 0x1B10:
      case 0x1B11:
      case 0x1B12:
      case 0x1B13:
      case 0x1B14:
      case 0x1B19:
      case 0x1B1A:
      case 0x1B1B:
      case 0x1B1C:
      case 0x1B1D:
      case 0x1B1E:
      case 0x1B1F:
      case 0x1B20:
      case 0x3F69:
      case 0x3F6A:
      case 0x3F6B:
      case 0x3F6C:
      case 0x3F6D:
      case 0x3F6E:
      case 0x3F6F:
      case 0x3F70:
      case 0x3F81:
      case 0x3F82:
      case 0x3F83:
      case 0x3F84:
        sub_1CBD9B134(a1, a2, a3, a4);
        break;
      case 0x1B15:
      case 0x1B16:
      case 0x1B17:
      case 0x1B18:
      case 0x1B21:
      case 0x1B22:
      case 0x1B23:
      case 0x1B24:
      case 0x3F71:
      case 0x3F72:
      case 0x3F73:
      case 0x3F74:
      case 0x3F85:
      case 0x3F86:
      case 0x3F87:
      case 0x3F88:
        sub_1CD43AFA4(a1, a2, a3, a4);
        break;
      case 0x1B25:
      case 0x1B26:
      case 0x1B27:
      case 0x1B28:
      case 0x1B29:
      case 0x1B2A:
      case 0x1B2B:
      case 0x1B2C:
      case 0x1B31:
      case 0x1B32:
      case 0x1B33:
      case 0x1B34:
      case 0x1B35:
      case 0x1B36:
      case 0x1B37:
      case 0x1B38:
      case 0x3F89:
      case 0x3F8A:
      case 0x3F8B:
      case 0x3F8C:
      case 0x3F91:
      case 0x3F92:
      case 0x3F93:
      case 0x3F94:
        sub_1CBD9AF1C(a1, a2, a3, a4);
        break;
      case 0x1B2D:
      case 0x1B2E:
      case 0x1B2F:
      case 0x1B30:
      case 0x1B39:
      case 0x1B3A:
      case 0x1B3B:
      case 0x1B3C:
      case 0x3F8D:
      case 0x3F8E:
      case 0x3F8F:
      case 0x3F90:
      case 0x3F95:
      case 0x3F96:
      case 0x3F97:
      case 0x3F98:
        sub_1CD43AD94(a1, a2, a3, a4);
        break;
      case 0x1B3D:
      case 0x1B3E:
      case 0x1B3F:
      case 0x1B40:
      case 0x1B41:
      case 0x1B42:
      case 0x1B43:
      case 0x1B44:
      case 0x1B45:
      case 0x1B46:
      case 0x1B47:
      case 0x1B48:
      case 0x3F99:
      case 0x3F9A:
      case 0x3F9B:
      case 0x3F9C:
      case 0x3F9D:
      case 0x3F9E:
      case 0x3F9F:
      case 0x3FA0:
      case 0x3FA1:
      case 0x3FA2:
      case 0x3FA3:
      case 0x3FA4:
      case 0x3FA5:
      case 0x3FA6:
      case 0x3FA7:
      case 0x3FA8:
      case 0x3FA9:
      case 0x3FAA:
      case 0x3FAB:
      case 0x3FAC:
      case 0x3FAD:
      case 0x3FAE:
      case 0x3FAF:
      case 0x3FB0:
      case 0x3FB1:
      case 0x3FB2:
      case 0x3FB3:
      case 0x3FB4:
      case 0x3FB5:
      case 0x3FB6:
      case 0x3FB7:
      case 0x3FB8:
      case 0x3FB9:
      case 0x3FBA:
      case 0x3FBB:
      case 0x3FBC:
      case 0x3FBD:
      case 0x3FBE:
      case 0x3FBF:
      case 0x3FC0:
      case 0x3FC1:
      case 0x3FC2:
      case 0x3FC3:
      case 0x3FC4:
      case 0x3FC5:
      case 0x3FC6:
      case 0x3FC7:
      case 0x3FC8:
      case 0x3FC9:
      case 0x3FCA:
      case 0x3FCB:
      case 0x3FCC:
      case 0x3FCD:
      case 0x3FCE:
      case 0x3FCF:
      case 0x3FD0:
      case 0x3FD1:
      case 0x3FD2:
      case 0x3FD3:
      case 0x3FD4:
      case 0x3FD5:
      case 0x3FD6:
      case 0x3FD7:
      case 0x3FD8:
      case 0x3FD9:
      case 0x3FDA:
      case 0x3FDB:
      case 0x3FDC:
      case 0x3FDD:
      case 0x3FDE:
      case 0x3FDF:
      case 0x3FE0:
      case 0x3FE1:
      case 0x3FE2:
      case 0x3FE3:
      case 0x3FE4:
      case 0x3FE5:
      case 0x3FE6:
      case 0x3FE7:
      case 0x3FE8:
      case 0x3FE9:
      case 0x3FEA:
      case 0x3FEB:
      case 0x3FEC:
      case 0x3FED:
      case 0x3FEE:
      case 0x3FEF:
      case 0x3FF0:
      case 0x3FF1:
      case 0x3FF2:
      case 0x3FF3:
      case 0x3FF4:
      case 0x3FF5:
      case 0x3FF6:
      case 0x3FF7:
      case 0x3FF8:
      case 0x3FF9:
      case 0x3FFA:
      case 0x3FFB:
      case 0x3FFC:
      case 0x3FFD:
      case 0x3FFE:
      case 0x3FFF:
      case 0x4000:
      case 0x4001:
      case 0x4002:
      case 0x4003:
      case 0x4004:
      case 0x4005:
      case 0x4006:
      case 0x4007:
      case 0x4008:
      case 0x4009:
      case 0x400A:
      case 0x400B:
      case 0x400C:
      case 0x400D:
      case 0x400E:
      case 0x400F:
      case 0x4010:
      case 0x4011:
      case 0x4012:
      case 0x4013:
      case 0x4014:
      case 0x4015:
      case 0x4016:
      case 0x4017:
      case 0x4018:
      case 0x4019:
      case 0x401A:
      case 0x401B:
      case 0x401C:
      case 0x401D:
      case 0x401E:
      case 0x401F:
        sub_1CD43C2C8(a1, a2, a3, a4);
        break;
      case 0x1B49:
      case 0x1B4A:
      case 0x1B4B:
      case 0x1B4C:
      case 0x1B4D:
      case 0x1B4E:
      case 0x1B4F:
      case 0x1B50:
      case 0x4020:
      case 0x4021:
      case 0x4022:
      case 0x4023:
      case 0x4024:
      case 0x4025:
      case 0x4026:
      case 0x4027:
      case 0x4028:
      case 0x4029:
      case 0x402A:
      case 0x402B:
      case 0x402C:
      case 0x402D:
      case 0x402E:
      case 0x402F:
      case 0x4030:
      case 0x4031:
      case 0x4032:
      case 0x4033:
      case 0x4034:
      case 0x4035:
      case 0x4036:
      case 0x4037:
      case 0x4038:
      case 0x4039:
      case 0x403A:
      case 0x403B:
      case 0x403C:
      case 0x403D:
      case 0x403E:
      case 0x403F:
      case 0x4040:
      case 0x4041:
      case 0x4042:
      case 0x4043:
      case 0x4044:
      case 0x4045:
      case 0x4046:
      case 0x4047:
      case 0x4048:
      case 0x4049:
      case 0x404A:
      case 0x404B:
      case 0x404C:
      case 0x404D:
      case 0x404E:
      case 0x404F:
      case 0x4050:
      case 0x4051:
      case 0x4052:
      case 0x4053:
      case 0x4054:
      case 0x4055:
      case 0x4056:
      case 0x4057:
      case 0x4058:
      case 0x4059:
      case 0x405A:
      case 0x405B:
      case 0x405C:
      case 0x405D:
      case 0x405E:
      case 0x405F:
      case 0x4060:
      case 0x4061:
      case 0x4062:
      case 0x4063:
      case 0x4064:
      case 0x4065:
      case 0x4066:
      case 0x4067:
      case 0x4068:
      case 0x4069:
      case 0x406A:
      case 0x406B:
      case 0x406C:
      case 0x406D:
      case 0x406E:
      case 0x406F:
      case 0x4070:
      case 0x4071:
      case 0x4072:
      case 0x4073:
      case 0x4074:
      case 0x4075:
      case 0x4076:
      case 0x4077:
      case 0x4078:
      case 0x4079:
      case 0x407A:
      case 0x407B:
      case 0x407C:
      case 0x407D:
      case 0x407E:
      case 0x407F:
      case 0x4080:
      case 0x4081:
      case 0x4082:
      case 0x4083:
      case 0x4084:
      case 0x4085:
      case 0x4086:
      case 0x4087:
      case 0x4088:
      case 0x4089:
      case 0x408A:
      case 0x408B:
      case 0x408C:
      case 0x408D:
      case 0x408E:
      case 0x408F:
      case 0x4090:
      case 0x4091:
      case 0x4092:
      case 0x4093:
      case 0x4094:
      case 0x4095:
      case 0x4096:
      case 0x4097:
      case 0x4098:
      case 0x4099:
      case 0x409A:
      case 0x409B:
      case 0x409C:
      case 0x409D:
      case 0x409E:
      case 0x409F:
      case 0x40A0:
      case 0x40A1:
      case 0x40A2:
      case 0x40A3:
      case 0x40A4:
      case 0x40A5:
      case 0x40A6:
      case 0x40A7:
      case 0x40A8:
      case 0x40A9:
      case 0x40AA:
      case 0x40AB:
      case 0x40AC:
      case 0x40AD:
      case 0x40AE:
      case 0x40AF:
      case 0x40B0:
      case 0x40B1:
      case 0x40B2:
      case 0x40B3:
      case 0x40B4:
      case 0x40B5:
      case 0x40B6:
      case 0x40B7:
      case 0x40B8:
      case 0x40B9:
      case 0x40BA:
      case 0x40BB:
      case 0x40BC:
      case 0x40BD:
      case 0x40BE:
      case 0x40BF:
      case 0x40C0:
      case 0x40C1:
      case 0x40C2:
      case 0x40C3:
      case 0x40C4:
      case 0x40C5:
      case 0x40C6:
      case 0x40C7:
      case 0x40C8:
      case 0x40C9:
      case 0x40CA:
      case 0x40CB:
      case 0x40CC:
      case 0x40CD:
      case 0x40CE:
      case 0x40CF:
      case 0x40D0:
      case 0x40D1:
      case 0x40D2:
      case 0x40D3:
      case 0x40D4:
      case 0x40D5:
      case 0x40D6:
      case 0x40D7:
      case 0x40D8:
      case 0x40D9:
      case 0x40DA:
      case 0x40DB:
      case 0x40DC:
      case 0x40DD:
      case 0x40DE:
      case 0x40DF:
      case 0x40E0:
      case 0x40E1:
      case 0x40E2:
      case 0x40E3:
      case 0x40E4:
      case 0x40E5:
      case 0x40E6:
      case 0x40E7:
      case 0x40E8:
      case 0x40E9:
      case 0x40EA:
      case 0x40EB:
      case 0x40EC:
      case 0x40ED:
      case 0x40EE:
      case 0x40EF:
      case 0x40F0:
      case 0x40F1:
      case 0x40F2:
      case 0x40F3:
      case 0x40F4:
      case 0x40F5:
      case 0x40F6:
      case 0x40F7:
      case 0x40F8:
      case 0x40F9:
      case 0x40FA:
      case 0x40FB:
      case 0x40FC:
      case 0x40FD:
      case 0x40FE:
      case 0x40FF:
      case 0x4100:
      case 0x4101:
      case 0x4102:
      case 0x4103:
      case 0x4104:
      case 0x4105:
      case 0x4106:
      case 0x4107:
      case 0x4108:
      case 0x4109:
      case 0x410A:
      case 0x410B:
      case 0x410C:
      case 0x410D:
      case 0x410E:
      case 0x410F:
      case 0x4110:
      case 0x4111:
      case 0x4112:
      case 0x4113:
      case 0x4114:
      case 0x4115:
      case 0x4116:
      case 0x4117:
      case 0x4118:
      case 0x4119:
      case 0x411A:
      case 0x411B:
      case 0x411C:
      case 0x411D:
      case 0x411E:
      case 0x411F:
      case 0x4120:
      case 0x4121:
      case 0x4122:
      case 0x4123:
      case 0x4124:
      case 0x4125:
      case 0x4126:
      case 0x4127:
      case 0x4128:
      case 0x4129:
      case 0x412A:
      case 0x412B:
      case 0x412C:
      case 0x412D:
      case 0x412E:
      case 0x412F:
      case 0x4130:
      case 0x4131:
      case 0x4132:
      case 0x4133:
      case 0x4134:
      case 0x4135:
      case 0x4136:
      case 0x4137:
      case 0x4138:
      case 0x4139:
      case 0x413A:
      case 0x413B:
      case 0x413C:
      case 0x413D:
      case 0x413E:
      case 0x413F:
      case 0x4140:
      case 0x4141:
      case 0x4142:
      case 0x4143:
      case 0x4144:
      case 0x4145:
      case 0x4146:
      case 0x4147:
      case 0x4148:
      case 0x4149:
      case 0x414A:
      case 0x414B:
      case 0x414C:
      case 0x414D:
      case 0x414E:
      case 0x414F:
      case 0x4150:
      case 0x4151:
      case 0x4152:
      case 0x4153:
      case 0x4154:
      case 0x4155:
      case 0x4156:
      case 0x4157:
      case 0x4158:
      case 0x4159:
      case 0x415A:
      case 0x415B:
      case 0x415C:
      case 0x415D:
      case 0x415E:
      case 0x415F:
      case 0x4160:
      case 0x4161:
      case 0x4162:
      case 0x4163:
      case 0x4164:
      case 0x4165:
      case 0x4166:
      case 0x4167:
      case 0x4168:
      case 0x4169:
      case 0x416A:
      case 0x416B:
      case 0x416C:
      case 0x416D:
      case 0x416E:
      case 0x416F:
      case 0x4170:
      case 0x4171:
      case 0x4172:
      case 0x4173:
      case 0x4174:
      case 0x4175:
      case 0x4176:
      case 0x4177:
      case 0x4178:
      case 0x4179:
      case 0x417A:
      case 0x417B:
      case 0x417C:
      case 0x417D:
      case 0x417E:
      case 0x417F:
      case 0x4180:
      case 0x4181:
      case 0x4182:
      case 0x4183:
      case 0x4184:
      case 0x4185:
      case 0x4186:
      case 0x4187:
      case 0x4188:
      case 0x4189:
      case 0x418A:
      case 0x418B:
      case 0x418C:
      case 0x418D:
      case 0x418E:
      case 0x418F:
      case 0x4190:
      case 0x4191:
      case 0x4192:
      case 0x4193:
      case 0x4194:
      case 0x4195:
      case 0x4196:
      case 0x4197:
      case 0x4198:
      case 0x4199:
      case 0x419A:
      case 0x419B:
      case 0x419C:
      case 0x419D:
      case 0x419E:
      case 0x419F:
      case 0x41A0:
      case 0x41A1:
      case 0x41A2:
      case 0x41A3:
      case 0x41A4:
      case 0x41A5:
      case 0x41A6:
      case 0x41A7:
      case 0x41A8:
      case 0x41A9:
      case 0x41AA:
      case 0x41AB:
      case 0x41AC:
      case 0x41AD:
      case 0x41AE:
      case 0x41AF:
      case 0x41B0:
      case 0x41B1:
      case 0x41B2:
      case 0x41B3:
      case 0x41B4:
      case 0x41B5:
      case 0x41B6:
      case 0x41B7:
      case 0x41B8:
      case 0x41B9:
      case 0x41BA:
        sub_1CBD9C654(a1, a2, a3, a4);
        break;
      case 0x1B51:
      case 0x1B52:
      case 0x1B53:
      case 0x1B54:
      case 0x41BB:
      case 0x41BC:
      case 0x41BD:
      case 0x41BE:
      case 0x41BF:
      case 0x41C0:
      case 0x41C1:
      case 0x41C2:
      case 0x41C3:
      case 0x41C4:
      case 0x41C5:
      case 0x41C6:
      case 0x41C7:
      case 0x41C8:
      case 0x41C9:
      case 0x41CA:
      case 0x41CB:
      case 0x41CC:
      case 0x41CD:
      case 0x41CE:
      case 0x41CF:
      case 0x41D0:
      case 0x41D1:
      case 0x41D2:
      case 0x41D3:
      case 0x41D4:
      case 0x41D5:
      case 0x41D6:
      case 0x41D7:
      case 0x41D8:
      case 0x41D9:
      case 0x41DA:
      case 0x41DB:
      case 0x41DC:
      case 0x41DD:
      case 0x41DE:
      case 0x41DF:
      case 0x41E0:
      case 0x41E1:
      case 0x41E2:
      case 0x41E3:
      case 0x41E4:
      case 0x41E5:
      case 0x41E6:
      case 0x41E7:
      case 0x41E8:
      case 0x41E9:
      case 0x41EA:
      case 0x41EB:
      case 0x41EC:
      case 0x41ED:
      case 0x41EE:
      case 0x41EF:
      case 0x41F0:
      case 0x41F1:
      case 0x41F2:
      case 0x41F3:
      case 0x41F4:
      case 0x41F5:
      case 0x41F6:
      case 0x41F7:
      case 0x41F8:
      case 0x41F9:
      case 0x41FA:
      case 0x41FB:
      case 0x41FC:
      case 0x41FD:
      case 0x41FE:
      case 0x41FF:
      case 0x4200:
      case 0x4201:
      case 0x4202:
      case 0x4203:
      case 0x4204:
      case 0x4205:
      case 0x4206:
      case 0x4207:
      case 0x4208:
      case 0x4209:
      case 0x420A:
      case 0x420B:
      case 0x420C:
      case 0x420D:
      case 0x420E:
      case 0x420F:
      case 0x4210:
      case 0x4211:
      case 0x4212:
      case 0x4213:
      case 0x4214:
      case 0x4215:
      case 0x4216:
      case 0x4217:
      case 0x4218:
      case 0x4219:
      case 0x421A:
      case 0x421B:
      case 0x421C:
      case 0x421D:
      case 0x421E:
      case 0x421F:
      case 0x4220:
      case 0x4221:
      case 0x4222:
      case 0x4223:
      case 0x4224:
      case 0x4225:
      case 0x4226:
      case 0x4227:
      case 0x4228:
      case 0x4229:
      case 0x422A:
      case 0x422B:
      case 0x422C:
      case 0x422D:
      case 0x422E:
      case 0x422F:
      case 0x4230:
      case 0x4231:
      case 0x4232:
      case 0x4233:
      case 0x4234:
      case 0x4235:
      case 0x4236:
      case 0x4237:
      case 0x4238:
      case 0x4239:
      case 0x423A:
      case 0x423B:
      case 0x423C:
      case 0x423D:
      case 0x423E:
      case 0x423F:
      case 0x4240:
      case 0x4241:
      case 0x4242:
      case 0x4243:
      case 0x4244:
      case 0x4245:
      case 0x4246:
      case 0x4247:
      case 0x4248:
      case 0x4249:
      case 0x424A:
      case 0x424B:
      case 0x424C:
      case 0x424D:
      case 0x424E:
      case 0x424F:
      case 0x4250:
      case 0x4251:
      case 0x4252:
      case 0x4253:
      case 0x4254:
      case 0x4255:
      case 0x4256:
      case 0x4257:
      case 0x4258:
      case 0x4259:
      case 0x425A:
      case 0x425B:
      case 0x425C:
      case 0x425D:
      case 0x425E:
      case 0x425F:
      case 0x4260:
      case 0x4261:
      case 0x4262:
      case 0x4263:
      case 0x4264:
      case 0x4265:
      case 0x4266:
      case 0x4267:
      case 0x4268:
      case 0x4269:
      case 0x426A:
      case 0x426B:
      case 0x426C:
      case 0x426D:
      case 0x426E:
      case 0x426F:
      case 0x4270:
      case 0x4271:
      case 0x4272:
      case 0x4273:
      case 0x4274:
      case 0x4275:
      case 0x4276:
      case 0x4277:
      case 0x4278:
      case 0x4279:
      case 0x427A:
      case 0x427B:
      case 0x427C:
      case 0x427D:
      case 0x427E:
      case 0x427F:
      case 0x4280:
      case 0x4281:
      case 0x4282:
      case 0x4283:
      case 0x4284:
      case 0x4285:
      case 0x4286:
      case 0x4287:
      case 0x4288:
      case 0x4289:
      case 0x428A:
      case 0x428B:
      case 0x428C:
      case 0x428D:
      case 0x428E:
      case 0x428F:
      case 0x4290:
      case 0x4291:
      case 0x4292:
      case 0x4293:
      case 0x4294:
      case 0x4295:
      case 0x4296:
      case 0x4297:
      case 0x4298:
      case 0x4299:
      case 0x429A:
      case 0x429B:
      case 0x429C:
      case 0x429D:
      case 0x429E:
      case 0x429F:
      case 0x42A0:
      case 0x42A1:
      case 0x42A2:
      case 0x42A3:
      case 0x42A4:
      case 0x42A5:
      case 0x42A6:
      case 0x42A7:
      case 0x42A8:
      case 0x42A9:
      case 0x42AA:
      case 0x42AB:
      case 0x42AC:
      case 0x42AD:
      case 0x42AE:
      case 0x42AF:
      case 0x42B0:
      case 0x42B1:
      case 0x42B2:
      case 0x42B3:
      case 0x42B4:
      case 0x42B5:
      case 0x42B6:
      case 0x42B7:
      case 0x42B8:
      case 0x42B9:
      case 0x42BA:
      case 0x42BB:
      case 0x42BC:
      case 0x42BD:
      case 0x42BE:
      case 0x42BF:
      case 0x42C0:
      case 0x42C1:
      case 0x42C2:
      case 0x42C3:
      case 0x42C4:
      case 0x42C5:
      case 0x42C6:
      case 0x42C7:
      case 0x42C8:
      case 0x42C9:
      case 0x42CA:
      case 0x42CB:
      case 0x42CC:
      case 0x42CD:
      case 0x42CE:
      case 0x42CF:
      case 0x42D0:
      case 0x42D1:
      case 0x42D2:
      case 0x42D3:
      case 0x42D4:
      case 0x42D5:
      case 0x42D6:
      case 0x42D7:
      case 0x42D8:
      case 0x42D9:
      case 0x42DA:
      case 0x42DB:
      case 0x42DC:
      case 0x42DD:
      case 0x42DE:
      case 0x42DF:
      case 0x42E0:
      case 0x42E1:
      case 0x42E2:
      case 0x42E3:
      case 0x42E4:
      case 0x42E5:
      case 0x42E6:
      case 0x42E7:
      case 0x42E8:
      case 0x42E9:
      case 0x42EA:
      case 0x42EB:
      case 0x42EC:
      case 0x42ED:
      case 0x42EE:
      case 0x42EF:
      case 0x42F0:
      case 0x42F1:
      case 0x42F2:
      case 0x42F3:
      case 0x42F4:
      case 0x42F5:
      case 0x42F6:
      case 0x42F7:
      case 0x42F8:
      case 0x42F9:
      case 0x42FA:
      case 0x42FB:
      case 0x42FC:
      case 0x42FD:
      case 0x42FE:
      case 0x42FF:
      case 0x4300:
      case 0x4301:
      case 0x4302:
      case 0x4303:
      case 0x4304:
      case 0x4305:
      case 0x4306:
      case 0x4307:
      case 0x4308:
      case 0x4309:
      case 0x430A:
      case 0x430B:
      case 0x430C:
      case 0x430D:
      case 0x430E:
      case 0x430F:
      case 0x4310:
      case 0x4311:
      case 0x4312:
      case 0x4313:
      case 0x4314:
      case 0x4315:
      case 0x4316:
      case 0x4317:
      case 0x4318:
      case 0x4319:
      case 0x431A:
      case 0x431B:
      case 0x431C:
      case 0x431D:
      case 0x431E:
      case 0x431F:
      case 0x4320:
      case 0x4321:
      case 0x4322:
      case 0x4323:
      case 0x4324:
      case 0x4325:
      case 0x4326:
      case 0x4327:
      case 0x4328:
      case 0x4329:
      case 0x432A:
      case 0x432B:
      case 0x432C:
      case 0x432D:
      case 0x432E:
      case 0x432F:
      case 0x4330:
      case 0x4331:
      case 0x4332:
      case 0x4333:
      case 0x4334:
      case 0x4335:
      case 0x4336:
      case 0x4337:
      case 0x4338:
      case 0x4339:
      case 0x433A:
        sub_1CD43C13C(a1, a2, a3, a4);
        break;
      case 0x1B55:
      case 0x1B56:
      case 0x1B57:
      case 0x1B58:
      case 0x1B59:
      case 0x1B5A:
      case 0x1B5B:
      case 0x1B5C:
      case 0x1B5D:
      case 0x1B5E:
      case 0x1B5F:
      case 0x1B60:
      case 0x1B61:
      case 0x1B62:
      case 0x1B63:
      case 0x1B64:
      case 0x1B65:
      case 0x1B66:
      case 0x1B67:
      case 0x1B68:
      case 0x1B69:
      case 0x1B6A:
      case 0x1B6B:
      case 0x1B6C:
      case 0x1B6D:
      case 0x1B6E:
      case 0x1B6F:
      case 0x1B70:
      case 0x1B71:
      case 0x1B72:
      case 0x1B73:
      case 0x1B74:
      case 0x1B75:
      case 0x1B76:
      case 0x1B77:
      case 0x1B78:
      case 0x1B79:
      case 0x1B7A:
      case 0x1B7B:
      case 0x1B7C:
      case 0x1B7D:
      case 0x1B7E:
      case 0x1B7F:
      case 0x1B80:
      case 0x1B81:
      case 0x1B82:
      case 0x1B83:
      case 0x1B84:
      case 0x1B85:
      case 0x1B86:
      case 0x1B87:
      case 0x1B88:
      case 0x1B89:
      case 0x1B8A:
      case 0x1B8B:
      case 0x1B8C:
      case 0x1B8D:
      case 0x1B8E:
      case 0x1B8F:
      case 0x1B90:
      case 0x1B91:
      case 0x1B92:
      case 0x1B93:
      case 0x1B94:
      case 0x1B95:
      case 0x1B96:
      case 0x1B97:
      case 0x1B98:
      case 0x1B99:
      case 0x1B9A:
      case 0x1B9B:
      case 0x1B9C:
      case 0x1B9D:
      case 0x1B9E:
      case 0x1B9F:
      case 0x1BA0:
      case 0x1BA1:
      case 0x1BA2:
      case 0x1BA3:
      case 0x1BA4:
      case 0x1BA5:
      case 0x433B:
      case 0x433C:
      case 0x433D:
      case 0x433E:
      case 0x433F:
      case 0x4340:
      case 0x4341:
      case 0x4342:
      case 0x4343:
      case 0x4344:
      case 0x4345:
      case 0x4346:
      case 0x4347:
      case 0x4348:
      case 0x4349:
      case 0x434A:
      case 0x434B:
      case 0x434C:
      case 0x434D:
      case 0x434E:
      case 0x434F:
      case 0x4350:
      case 0x4351:
      case 0x4352:
      case 0x4353:
      case 0x4354:
      case 0x4355:
      case 0x4356:
      case 0x4357:
      case 0x4358:
      case 0x4359:
      case 0x435A:
      case 0x435B:
      case 0x435C:
      case 0x435D:
      case 0x435E:
      case 0x435F:
      case 0x4360:
      case 0x4361:
      case 0x4362:
      case 0x4363:
      case 0x4364:
      case 0x4365:
      case 0x4366:
      case 0x4367:
      case 0x4368:
      case 0x4369:
      case 0x436A:
      case 0x436B:
      case 0x436C:
      case 0x436D:
      case 0x436E:
      case 0x436F:
      case 0x4370:
      case 0x4371:
      case 0x4372:
      case 0x4373:
      case 0x4374:
      case 0x4375:
      case 0x4376:
      case 0x4377:
      case 0x4378:
      case 0x4379:
      case 0x437A:
      case 0x437B:
      case 0x437C:
      case 0x437D:
      case 0x437E:
      case 0x437F:
      case 0x4380:
      case 0x4381:
      case 0x4382:
      case 0x4383:
      case 0x4384:
      case 0x4385:
      case 0x4386:
      case 0x4387:
      case 0x4388:
      case 0x4389:
      case 0x438A:
      case 0x438B:
      case 0x438C:
      case 0x438D:
      case 0x438E:
      case 0x438F:
      case 0x4390:
      case 0x4391:
      case 0x4392:
      case 0x4393:
      case 0x4394:
      case 0x4395:
      case 0x4396:
      case 0x4397:
      case 0x4398:
      case 0x4399:
      case 0x439A:
      case 0x439B:
      case 0x439C:
      case 0x439D:
      case 0x439E:
      case 0x439F:
      case 0x43A0:
      case 0x43A1:
      case 0x43A2:
      case 0x43A3:
      case 0x43A4:
      case 0x43A5:
      case 0x43A6:
      case 0x43A7:
      case 0x43A8:
      case 0x43A9:
      case 0x43AA:
      case 0x43AB:
      case 0x43AC:
      case 0x43AD:
      case 0x43AE:
      case 0x43AF:
      case 0x43B0:
      case 0x43B1:
      case 0x43B2:
      case 0x43B3:
      case 0x43B4:
      case 0x43B5:
      case 0x43B6:
      case 0x43B7:
      case 0x43B8:
      case 0x43B9:
      case 0x43BA:
      case 0x43BB:
      case 0x43BC:
      case 0x43BD:
      case 0x43BE:
      case 0x43BF:
      case 0x43C0:
      case 0x43C1:
      case 0x43C2:
      case 0x43C3:
      case 0x43C4:
      case 0x43C5:
      case 0x43C6:
      case 0x43C7:
      case 0x43C8:
      case 0x43C9:
      case 0x43CA:
      case 0x43CB:
      case 0x43CC:
      case 0x43CD:
      case 0x43CE:
      case 0x43CF:
      case 0x43D0:
      case 0x43D1:
      case 0x43D2:
      case 0x43D3:
      case 0x43D4:
      case 0x43D5:
      case 0x43D6:
      case 0x43D7:
      case 0x43D8:
      case 0x43D9:
      case 0x43DA:
      case 0x43DB:
      case 0x43DC:
      case 0x43DD:
      case 0x43DE:
      case 0x43DF:
      case 0x43E0:
      case 0x43E1:
      case 0x43E2:
      case 0x43E3:
      case 0x43E4:
      case 0x43E5:
      case 0x43E6:
      case 0x43E7:
      case 0x43E8:
      case 0x43E9:
      case 0x43EA:
      case 0x43EB:
      case 0x43EC:
      case 0x43ED:
      case 0x43EE:
      case 0x43EF:
      case 0x43F0:
      case 0x43F1:
      case 0x43F2:
      case 0x43F3:
      case 0x43F4:
      case 0x43F5:
      case 0x43F6:
      case 0x43F7:
      case 0x43F8:
      case 0x43F9:
      case 0x43FA:
      case 0x43FB:
      case 0x43FC:
      case 0x43FD:
      case 0x43FE:
      case 0x43FF:
      case 0x4400:
      case 0x4401:
      case 0x4402:
      case 0x4403:
      case 0x4404:
      case 0x4405:
      case 0x4406:
      case 0x4407:
      case 0x4408:
      case 0x4409:
      case 0x440A:
      case 0x440B:
      case 0x440C:
      case 0x440D:
      case 0x440E:
      case 0x440F:
      case 0x4410:
      case 0x4411:
      case 0x4412:
      case 0x4413:
      case 0x4414:
      case 0x4415:
      case 0x4416:
      case 0x4417:
      case 0x4418:
      case 0x4419:
      case 0x441A:
      case 0x441B:
      case 0x441C:
      case 0x441D:
      case 0x441E:
      case 0x441F:
      case 0x4420:
      case 0x4421:
      case 0x4422:
      case 0x4423:
      case 0x4424:
      case 0x4425:
      case 0x4426:
      case 0x4427:
      case 0x4428:
      case 0x4429:
      case 0x442A:
      case 0x442B:
      case 0x442C:
      case 0x442D:
      case 0x442E:
      case 0x442F:
      case 0x4430:
      case 0x4431:
      case 0x4432:
      case 0x4433:
      case 0x4434:
      case 0x4435:
      case 0x4436:
      case 0x4437:
      case 0x4438:
      case 0x4439:
      case 0x443A:
      case 0x443B:
      case 0x443C:
      case 0x443D:
      case 0x443E:
      case 0x443F:
      case 0x4440:
      case 0x4441:
      case 0x4442:
      case 0x4443:
      case 0x4444:
      case 0x4445:
      case 0x4446:
      case 0x4447:
      case 0x4448:
      case 0x4449:
      case 0x444A:
      case 0x444B:
      case 0x444C:
      case 0x444D:
      case 0x444E:
      case 0x444F:
      case 0x4450:
      case 0x4451:
      case 0x4452:
      case 0x4453:
      case 0x4454:
      case 0x4455:
      case 0x4456:
      case 0x4457:
      case 0x4458:
      case 0x4459:
      case 0x445A:
      case 0x445B:
      case 0x445C:
      case 0x445D:
      case 0x445E:
      case 0x445F:
      case 0x4460:
      case 0x4461:
      case 0x4462:
      case 0x4463:
      case 0x4464:
      case 0x4465:
      case 0x4466:
      case 0x4467:
      case 0x4468:
      case 0x4469:
      case 0x446A:
      case 0x446B:
      case 0x446C:
      case 0x446D:
      case 0x446E:
      case 0x446F:
      case 0x4470:
      case 0x4471:
      case 0x4472:
      case 0x4473:
      case 0x4474:
      case 0x4475:
      case 0x4476:
      case 0x4477:
      case 0x4478:
      case 0x4479:
      case 0x447A:
      case 0x447B:
      case 0x447C:
      case 0x447D:
      case 0x447E:
      case 0x447F:
      case 0x4480:
      case 0x4481:
      case 0x4482:
      case 0x4483:
      case 0x4484:
      case 0x4485:
      case 0x4486:
      case 0x4487:
      case 0x4488:
      case 0x4489:
      case 0x448A:
      case 0x448B:
      case 0x448C:
      case 0x448D:
      case 0x448E:
      case 0x448F:
      case 0x4490:
      case 0x4491:
      case 0x4492:
      case 0x4493:
      case 0x4494:
      case 0x4495:
      case 0x4496:
      case 0x4497:
      case 0x4498:
      case 0x4499:
      case 0x449A:
      case 0x449B:
      case 0x449C:
      case 0x449D:
      case 0x449E:
      case 0x449F:
      case 0x44A0:
      case 0x44A1:
      case 0x44A2:
      case 0x44A3:
      case 0x44A4:
      case 0x44A5:
      case 0x44A6:
      case 0x44A7:
      case 0x44A8:
      case 0x44A9:
      case 0x44AA:
      case 0x44AB:
      case 0x44AC:
      case 0x44AD:
      case 0x44AE:
      case 0x44AF:
      case 0x44B0:
      case 0x44B1:
      case 0x44B2:
      case 0x44B3:
      case 0x44B4:
      case 0x44B5:
      case 0x44B6:
      case 0x44B7:
      case 0x44B8:
      case 0x44B9:
      case 0x44BA:
      case 0x44BB:
      case 0x44BC:
      case 0x44BD:
      case 0x44BE:
      case 0x44BF:
      case 0x44C0:
      case 0x44C1:
      case 0x44C2:
      case 0x44C3:
      case 0x44C4:
      case 0x44C5:
      case 0x44C6:
      case 0x44C7:
      case 0x44C8:
      case 0x44C9:
      case 0x44CA:
      case 0x44CB:
      case 0x44CC:
      case 0x44CD:
      case 0x44CE:
      case 0x44CF:
      case 0x44D0:
      case 0x44D1:
      case 0x44D2:
      case 0x44D3:
      case 0x44D4:
      case 0x44D5:
      case 0x44D6:
      case 0x44D7:
      case 0x44D8:
      case 0x44D9:
      case 0x44DA:
      case 0x44DB:
      case 0x44DC:
      case 0x44DD:
      case 0x44DE:
      case 0x44DF:
      case 0x44E0:
      case 0x44E1:
      case 0x44E2:
      case 0x44E3:
      case 0x44E4:
      case 0x44E5:
      case 0x44E6:
      case 0x44E7:
      case 0x44E8:
      case 0x44E9:
      case 0x44EA:
      case 0x44EB:
      case 0x44EC:
      case 0x44ED:
      case 0x44EE:
      case 0x44EF:
      case 0x44F0:
      case 0x44F1:
      case 0x44F2:
      case 0x44F3:
      case 0x44F4:
      case 0x44F5:
      case 0x44F6:
      case 0x44F7:
      case 0x44F8:
      case 0x44F9:
      case 0x44FA:
      case 0x44FB:
      case 0x44FC:
      case 0x44FD:
      case 0x44FE:
      case 0x44FF:
      case 0x4500:
      case 0x4501:
      case 0x4502:
      case 0x4503:
      case 0x4504:
      case 0x4505:
      case 0x4506:
      case 0x4507:
      case 0x4508:
      case 0x4509:
      case 0x450A:
      case 0x450B:
      case 0x450C:
      case 0x450D:
      case 0x450E:
      case 0x450F:
      case 0x4510:
      case 0x4511:
      case 0x4512:
      case 0x4513:
      case 0x4514:
      case 0x4515:
      case 0x4516:
      case 0x4517:
      case 0x4518:
      case 0x4519:
      case 0x451A:
      case 0x451B:
      case 0x451C:
      case 0x451D:
      case 0x451E:
      case 0x451F:
      case 0x4520:
      case 0x4521:
      case 0x4522:
      case 0x4523:
      case 0x4524:
      case 0x4525:
      case 0x4526:
      case 0x4527:
      case 0x4528:
      case 0x4529:
      case 0x452A:
      case 0x452B:
      case 0x452C:
      case 0x452D:
      case 0x452E:
      case 0x452F:
      case 0x4530:
      case 0x4531:
      case 0x4532:
      case 0x4533:
      case 0x4534:
      case 0x4535:
      case 0x4536:
      case 0x4537:
      case 0x4538:
      case 0x4539:
      case 0x453A:
      case 0x453B:
      case 0x453C:
      case 0x453D:
      case 0x453E:
      case 0x453F:
      case 0x4540:
      case 0x4541:
      case 0x4542:
      case 0x4543:
      case 0x4544:
      case 0x4545:
      case 0x4546:
      case 0x4547:
      case 0x4548:
      case 0x4549:
      case 0x454A:
      case 0x454B:
      case 0x454C:
      case 0x454D:
      case 0x454E:
      case 0x454F:
      case 0x4550:
      case 0x4551:
      case 0x4552:
      case 0x4553:
      case 0x4554:
      case 0x4555:
      case 0x4556:
      case 0x4557:
      case 0x4558:
      case 0x4559:
      case 0x455A:
      case 0x455B:
      case 0x455C:
      case 0x455D:
      case 0x455E:
      case 0x455F:
      case 0x4560:
      case 0x4561:
      case 0x4562:
      case 0x4563:
      case 0x4564:
      case 0x4565:
      case 0x4566:
      case 0x4567:
      case 0x4568:
      case 0x4569:
      case 0x456A:
      case 0x456B:
      case 0x456C:
      case 0x456D:
      case 0x456E:
      case 0x456F:
      case 0x4570:
      case 0x4571:
      case 0x4572:
      case 0x4573:
      case 0x4574:
      case 0x4575:
      case 0x4576:
      case 0x4577:
      case 0x4578:
      case 0x4579:
      case 0x457A:
      case 0x457B:
      case 0x457C:
      case 0x457D:
      case 0x457E:
      case 0x457F:
      case 0x4580:
      case 0x4581:
      case 0x4582:
      case 0x4583:
      case 0x4584:
      case 0x4585:
      case 0x4586:
      case 0x4587:
      case 0x4588:
      case 0x4589:
      case 0x458A:
      case 0x458B:
      case 0x458C:
      case 0x458D:
      case 0x458E:
      case 0x458F:
      case 0x4590:
      case 0x4591:
      case 0x4592:
      case 0x4593:
      case 0x4594:
      case 0x4595:
      case 0x4596:
      case 0x4597:
      case 0x4598:
      case 0x4599:
      case 0x459A:
      case 0x459B:
      case 0x459C:
      case 0x459D:
      case 0x459E:
      case 0x459F:
      case 0x45A0:
      case 0x45A1:
      case 0x45A2:
      case 0x45A3:
      case 0x45A4:
      case 0x45A5:
      case 0x45A6:
      case 0x45A7:
      case 0x45A8:
      case 0x45A9:
      case 0x45AA:
      case 0x45AB:
      case 0x45AC:
      case 0x45AD:
      case 0x45AE:
      case 0x45AF:
      case 0x45B0:
      case 0x45B1:
      case 0x45B2:
      case 0x45B3:
      case 0x45B4:
      case 0x45B5:
      case 0x45B6:
      case 0x45B7:
      case 0x45B8:
      case 0x45B9:
      case 0x45BA:
      case 0x45BB:
      case 0x45BC:
      case 0x45BD:
      case 0x45BE:
      case 0x45BF:
      case 0x45C0:
      case 0x45C1:
      case 0x45C2:
      case 0x45C3:
      case 0x45C4:
      case 0x45C5:
      case 0x45C6:
      case 0x45C7:
      case 0x45C8:
      case 0x45C9:
      case 0x45CA:
      case 0x45CB:
      case 0x45CC:
      case 0x45CD:
      case 0x45CE:
      case 0x45CF:
      case 0x45D0:
      case 0x45D1:
      case 0x45D2:
      case 0x45D3:
      case 0x45D4:
      case 0x45D5:
      case 0x45D6:
      case 0x45D7:
      case 0x45D8:
      case 0x45D9:
      case 0x45DA:
      case 0x45DB:
      case 0x45DC:
      case 0x45DD:
      case 0x45DE:
      case 0x45DF:
      case 0x45E0:
      case 0x45E1:
      case 0x45E2:
      case 0x45E3:
      case 0x45E4:
      case 0x45E5:
      case 0x45E6:
      case 0x45E7:
      case 0x45E8:
      case 0x45E9:
      case 0x45EA:
      case 0x45EB:
      case 0x45EC:
      case 0x45ED:
      case 0x45EE:
      case 0x45EF:
      case 0x45F0:
      case 0x45F1:
      case 0x45F2:
      case 0x45F3:
      case 0x45F4:
      case 0x45F5:
      case 0x45F6:
      case 0x45F7:
      case 0x45F8:
      case 0x45F9:
      case 0x45FA:
      case 0x45FB:
      case 0x45FC:
      case 0x45FD:
      case 0x45FE:
      case 0x45FF:
      case 0x4600:
      case 0x4601:
      case 0x4602:
      case 0x4603:
      case 0x4604:
      case 0x4605:
      case 0x4606:
      case 0x4607:
      case 0x4608:
      case 0x4609:
      case 0x460A:
      case 0x460B:
      case 0x460C:
      case 0x460D:
      case 0x460E:
      case 0x460F:
      case 0x4610:
      case 0x4611:
      case 0x4612:
      case 0x4613:
      case 0x4614:
      case 0x4615:
      case 0x4616:
      case 0x4617:
      case 0x4618:
      case 0x4619:
      case 0x461A:
      case 0x461B:
      case 0x461C:
      case 0x461D:
      case 0x461E:
      case 0x461F:
      case 0x4620:
      case 0x4621:
      case 0x4622:
      case 0x4623:
      case 0x4624:
      case 0x4625:
      case 0x4626:
      case 0x4627:
      case 0x4628:
      case 0x4629:
      case 0x462A:
      case 0x462B:
      case 0x462C:
      case 0x462D:
      case 0x462E:
      case 0x462F:
      case 0x4630:
      case 0x4631:
      case 0x4632:
      case 0x4633:
      case 0x4634:
      case 0x4635:
      case 0x4636:
      case 0x4637:
      case 0x4638:
      case 0x4639:
      case 0x463A:
        sub_1CBD91050(a1, a2, a3, a4);
        break;
      case 0x1BA6:
      case 0x1BA7:
      case 0x1BA8:
      case 0x1BA9:
      case 0x1BAA:
      case 0x1BAB:
      case 0x1BAC:
      case 0x1BAD:
      case 0x1BAE:
      case 0x1BAF:
      case 0x1BB0:
      case 0x1BB1:
      case 0x1BB2:
      case 0x1BB3:
      case 0x1BB4:
      case 0x1BB5:
      case 0x1BB6:
      case 0x1BB7:
      case 0x1BB8:
      case 0x1BB9:
      case 0x1BBA:
      case 0x1BBB:
      case 0x1BBC:
      case 0x1BBD:
      case 0x1BBE:
      case 0x1BBF:
      case 0x1BC0:
      case 0x1BC1:
      case 0x1BC2:
      case 0x1BC3:
      case 0x1BC4:
      case 0x1BC5:
      case 0x1BC6:
      case 0x1BC7:
      case 0x1BC8:
      case 0x1BC9:
      case 0x1BCA:
      case 0x1BCB:
      case 0x1BCC:
      case 0x1BCD:
      case 0x1BCE:
      case 0x1BCF:
      case 0x1BD0:
      case 0x1BD1:
      case 0x1BD2:
      case 0x1BD3:
      case 0x1BD4:
      case 0x1BD5:
      case 0x1BD6:
      case 0x1BD7:
      case 0x1BD8:
      case 0x1BD9:
      case 0x1BDA:
      case 0x1BDB:
      case 0x463B:
        sub_1CBD90838(a1, a2, a3, a4);
        break;
      case 0x1BDC:
      case 0x1BDD:
      case 0x1BDE:
      case 0x1BDF:
      case 0x1BE0:
      case 0x1BE1:
      case 0x1BE2:
      case 0x1BE3:
      case 0x1BE4:
      case 0x1BE5:
      case 0x1BE6:
      case 0x1BE7:
      case 0x1BE8:
      case 0x1BE9:
      case 0x1BEA:
      case 0x1BEB:
      case 0x1BEC:
      case 0x1BED:
      case 0x1BEE:
      case 0x1BEF:
      case 0x1BF0:
      case 0x1BF1:
      case 0x1BF2:
      case 0x1BF3:
      case 0x1BF4:
      case 0x1BF5:
      case 0x1BF6:
      case 0x463C:
        sub_1CBD90A3C(a1, a2, a3, a4);
        break;
      case 0x1BF7:
      case 0x1BF8:
      case 0x1BF9:
      case 0x1BFA:
      case 0x1BFB:
      case 0x1BFC:
      case 0x1BFD:
      case 0x1BFE:
      case 0x1BFF:
      case 0x1C00:
      case 0x1C01:
      case 0x1C02:
      case 0x1C03:
      case 0x1C04:
      case 0x1C05:
      case 0x1C06:
      case 0x1C07:
      case 0x1C08:
      case 0x1C09:
      case 0x1C0A:
      case 0x1C0B:
      case 0x1C0C:
      case 0x1C0D:
      case 0x1C0E:
      case 0x1C0F:
      case 0x1C10:
      case 0x1C11:
      case 0x1C12:
      case 0x1C13:
      case 0x1C14:
      case 0x1C15:
      case 0x1C16:
      case 0x1C17:
      case 0x1C18:
      case 0x1C19:
      case 0x1C1A:
      case 0x1C1B:
      case 0x1C1C:
      case 0x1C1D:
      case 0x1C1E:
      case 0x1C1F:
      case 0x1C20:
      case 0x1C21:
      case 0x1C22:
      case 0x1C23:
      case 0x1C24:
      case 0x1C25:
      case 0x1C26:
      case 0x1C27:
      case 0x1C28:
      case 0x1C29:
      case 0x1C2A:
      case 0x1C2B:
      case 0x1C2C:
      case 0x1C2D:
      case 0x1C2E:
      case 0x1C2F:
      case 0x1C30:
      case 0x1C31:
      case 0x1C32:
      case 0x1C33:
      case 0x1C34:
      case 0x1C35:
      case 0x1C36:
      case 0x1C37:
      case 0x1C38:
      case 0x1C39:
      case 0x1C3A:
      case 0x1C3B:
      case 0x1C3C:
      case 0x1C3D:
      case 0x1C3E:
      case 0x1C3F:
      case 0x1C40:
      case 0x1C41:
      case 0x1C42:
      case 0x1C43:
      case 0x1C44:
      case 0x1C45:
      case 0x1C46:
      case 0x1C47:
      case 0x1C48:
      case 0x1C49:
      case 0x1C4A:
      case 0x1C4B:
      case 0x1C4C:
      case 0x1C4D:
      case 0x1C4E:
      case 0x1C4F:
      case 0x1C50:
      case 0x1C51:
      case 0x1C52:
      case 0x1C53:
      case 0x1C54:
      case 0x1C55:
      case 0x1C56:
      case 0x1C57:
      case 0x1C58:
      case 0x1C59:
      case 0x1C5A:
      case 0x1C5B:
      case 0x1C5C:
      case 0x1C5D:
      case 0x1C5E:
      case 0x1C5F:
      case 0x1C60:
      case 0x1C61:
      case 0x1C62:
      case 0x1C63:
      case 0x1C64:
      case 0x1C65:
      case 0x1C66:
      case 0x1C67:
      case 0x1C68:
      case 0x1C69:
      case 0x1C6A:
      case 0x1C6B:
      case 0x1C6C:
      case 0x1C6D:
      case 0x1C6E:
      case 0x1C6F:
      case 0x1C70:
      case 0x1C71:
      case 0x1C72:
      case 0x1C73:
      case 0x1C74:
      case 0x1C75:
      case 0x1C76:
      case 0x1C77:
      case 0x1C78:
      case 0x1C79:
      case 0x1C7A:
      case 0x1C7B:
      case 0x1C7C:
      case 0x1C7D:
      case 0x1C7E:
      case 0x1C7F:
      case 0x1C80:
      case 0x1C81:
      case 0x1C82:
      case 0x1C83:
      case 0x1C84:
      case 0x1C85:
      case 0x1C86:
      case 0x1C87:
      case 0x1C88:
      case 0x1C89:
      case 0x1C8A:
      case 0x1C8B:
      case 0x1C8C:
      case 0x1C8D:
      case 0x1C8E:
      case 0x1C8F:
      case 0x1C90:
      case 0x1C91:
      case 0x1C92:
      case 0x1C93:
      case 0x1C94:
      case 0x1C95:
      case 0x1C96:
      case 0x1C97:
      case 0x1C98:
      case 0x1C99:
      case 0x1C9A:
      case 0x1C9B:
      case 0x1C9C:
      case 0x1C9D:
      case 0x1C9E:
      case 0x1C9F:
      case 0x1CA0:
      case 0x1CA1:
      case 0x1CA2:
      case 0x1CA3:
      case 0x1CA4:
      case 0x1CA5:
      case 0x1CA6:
      case 0x1CA7:
      case 0x1CA8:
      case 0x1CA9:
      case 0x1CAA:
      case 0x1CAB:
      case 0x1CAC:
      case 0x1CAD:
      case 0x1CAE:
      case 0x1CAF:
      case 0x1CB0:
      case 0x1CB1:
      case 0x1CB2:
      case 0x1CB3:
      case 0x1CB4:
      case 0x1CB5:
      case 0x1CB6:
      case 0x1CB7:
      case 0x1CB8:
      case 0x1CB9:
      case 0x1CBA:
      case 0x1CBB:
      case 0x1CBC:
      case 0x1CBD:
      case 0x1CBE:
      case 0x1CBF:
      case 0x1CC0:
      case 0x1CC1:
      case 0x1CC2:
      case 0x1CC3:
      case 0x1CC4:
      case 0x1CC5:
      case 0x1CC6:
      case 0x1CC7:
      case 0x1CC8:
      case 0x1CC9:
      case 0x1CCA:
      case 0x1CCB:
      case 0x1CCC:
      case 0x1CCD:
      case 0x1CCE:
      case 0x1CCF:
      case 0x1CD0:
      case 0x1CD1:
      case 0x1CD2:
      case 0x1CD3:
      case 0x1CD4:
      case 0x1CD5:
      case 0x1CD6:
      case 0x1CD7:
      case 0x1CD8:
      case 0x1CD9:
      case 0x1CDA:
      case 0x1CDB:
      case 0x1CDC:
      case 0x1CDD:
      case 0x1CDE:
      case 0x1CDF:
      case 0x1CE0:
      case 0x1CE1:
      case 0x1CE2:
      case 0x1CE3:
      case 0x1CE4:
      case 0x1CE5:
      case 0x1CE6:
      case 0x1CE7:
      case 0x1CE8:
      case 0x1CE9:
      case 0x1CEA:
      case 0x1CEB:
      case 0x1CEC:
      case 0x1CED:
      case 0x1CEE:
      case 0x1CEF:
      case 0x1CF0:
      case 0x1CF1:
      case 0x1CF2:
      case 0x1CF3:
      case 0x1CF4:
      case 0x1CF5:
      case 0x1CF6:
      case 0x1CF7:
      case 0x1CF8:
      case 0x1CF9:
      case 0x1CFA:
      case 0x1CFB:
      case 0x1CFC:
      case 0x1CFD:
      case 0x1CFE:
      case 0x1CFF:
      case 0x1D00:
      case 0x1D01:
      case 0x1D02:
      case 0x1D03:
      case 0x1D04:
      case 0x1D05:
      case 0x1D06:
      case 0x1D07:
      case 0x1D08:
      case 0x1D09:
      case 0x1D0A:
      case 0x1D0B:
      case 0x1D0C:
      case 0x1D0D:
      case 0x1D0E:
      case 0x1D0F:
      case 0x1D10:
      case 0x1D11:
      case 0x1D12:
      case 0x1D13:
      case 0x1D14:
      case 0x1D15:
      case 0x1D16:
      case 0x1D17:
      case 0x1D18:
      case 0x1D19:
      case 0x1D1A:
      case 0x1D1B:
      case 0x1D1C:
      case 0x1D1D:
      case 0x1D1E:
      case 0x1D1F:
      case 0x1D20:
      case 0x1D21:
      case 0x1D22:
      case 0x1D23:
      case 0x1D24:
      case 0x1D25:
      case 0x1D26:
      case 0x1D27:
      case 0x1D28:
      case 0x1D29:
      case 0x1D2A:
      case 0x1D2B:
      case 0x1D2C:
      case 0x1D2D:
      case 0x1D2E:
      case 0x1D2F:
      case 0x1D30:
      case 0x1D31:
      case 0x1D32:
      case 0x1D33:
      case 0x1D34:
      case 0x1D35:
      case 0x1D36:
      case 0x1D37:
      case 0x1D38:
      case 0x1D39:
      case 0x1D3A:
      case 0x1D3B:
      case 0x1D3C:
      case 0x1D3D:
      case 0x1D3E:
      case 0x1D3F:
      case 0x1D40:
      case 0x1D41:
      case 0x1D42:
      case 0x1D43:
      case 0x1D44:
      case 0x1D45:
      case 0x1D46:
      case 0x1D47:
      case 0x1D48:
      case 0x1D49:
      case 0x1D4A:
      case 0x1D4B:
      case 0x1D4C:
      case 0x1D4D:
      case 0x1D4E:
      case 0x1D4F:
      case 0x1D50:
      case 0x1D51:
      case 0x1D52:
      case 0x1D53:
      case 0x1D54:
      case 0x1D55:
      case 0x1D56:
      case 0x1D57:
      case 0x1D58:
      case 0x1D59:
      case 0x1D5A:
      case 0x1D5B:
      case 0x1D5C:
      case 0x1D5D:
      case 0x1D5E:
      case 0x1D5F:
      case 0x1D60:
      case 0x1D61:
      case 0x1D62:
      case 0x1D63:
      case 0x1D64:
      case 0x1D65:
      case 0x1D66:
      case 0x1D67:
      case 0x1D68:
      case 0x1D69:
      case 0x1D6A:
      case 0x1D6B:
      case 0x1D6C:
      case 0x1D6D:
      case 0x1D6E:
      case 0x1D6F:
      case 0x1D70:
      case 0x1D71:
      case 0x1D72:
      case 0x1D73:
      case 0x1D74:
      case 0x1D75:
      case 0x1D76:
      case 0x463D:
      case 0x463E:
      case 0x463F:
      case 0x4640:
      case 0x4641:
      case 0x4642:
      case 0x4643:
      case 0x4644:
      case 0x4645:
      case 0x4646:
      case 0x4647:
      case 0x4648:
      case 0x4649:
      case 0x464A:
      case 0x464B:
      case 0x464C:
      case 0x464D:
      case 0x464E:
        sub_1CBD96BC8((uint64_t)a1, a2, a3, (void *)a4);
        break;
      case 0x1D77:
      case 0x1D78:
      case 0x1D79:
      case 0x1D7A:
      case 0x1D7B:
      case 0x1D7C:
      case 0x1D7D:
      case 0x1D7E:
      case 0x1D7F:
      case 0x1D80:
      case 0x1D81:
      case 0x1D82:
      case 0x1D83:
      case 0x1D84:
      case 0x1D85:
      case 0x1D86:
      case 0x1D87:
      case 0x1D88:
      case 0x1D89:
      case 0x1D8A:
      case 0x1D8B:
      case 0x1D8C:
      case 0x1D8D:
      case 0x1D8E:
      case 0x1D8F:
      case 0x1D90:
      case 0x1D91:
      case 0x1D92:
      case 0x1D93:
      case 0x1D94:
      case 0x1D95:
      case 0x1D96:
      case 0x1D97:
      case 0x1D98:
      case 0x1D99:
      case 0x1D9A:
      case 0x1D9B:
      case 0x1D9C:
      case 0x1D9D:
      case 0x1D9E:
      case 0x1D9F:
      case 0x1DA0:
      case 0x1DA1:
      case 0x1DA2:
      case 0x1DA3:
      case 0x1DA4:
      case 0x1DA5:
      case 0x1DA6:
      case 0x1DA7:
      case 0x1DA8:
      case 0x1DA9:
      case 0x1DAA:
      case 0x1DAB:
      case 0x1DAC:
      case 0x1DAD:
      case 0x1DAE:
      case 0x1DAF:
      case 0x1DB0:
      case 0x1DB1:
      case 0x1DB2:
      case 0x1DB3:
      case 0x1DB4:
      case 0x1DB5:
      case 0x1DB6:
      case 0x1DB7:
      case 0x1DB8:
      case 0x1DB9:
      case 0x1DBA:
      case 0x1DBB:
      case 0x1DBC:
      case 0x1DBD:
      case 0x1DBE:
      case 0x1DBF:
      case 0x1DC0:
      case 0x1DC1:
      case 0x1DC2:
      case 0x1DC3:
      case 0x1DC4:
      case 0x1DC5:
      case 0x1DC6:
      case 0x1DC7:
      case 0x1DC8:
      case 0x1DC9:
      case 0x1DCA:
      case 0x1DCB:
      case 0x1DCC:
      case 0x1DCD:
      case 0x1DCE:
      case 0x1DCF:
      case 0x1DD0:
      case 0x1DD1:
      case 0x1DD2:
      case 0x1DD3:
      case 0x1DD4:
      case 0x1DD5:
      case 0x1DD6:
      case 0x1DD7:
      case 0x1DD8:
      case 0x1DD9:
      case 0x1DDA:
      case 0x1DDB:
      case 0x1DDC:
      case 0x1DDD:
      case 0x1DDE:
      case 0x1DDF:
      case 0x1DE0:
      case 0x1DE1:
      case 0x1DE2:
      case 0x1DE3:
      case 0x1DE4:
      case 0x1DE5:
      case 0x1DE6:
      case 0x1DE7:
      case 0x1DE8:
      case 0x1DE9:
      case 0x1DEA:
      case 0x1DEB:
      case 0x1DEC:
      case 0x1DED:
      case 0x1DEE:
      case 0x1DEF:
      case 0x1DF0:
      case 0x1DF1:
      case 0x1DF2:
      case 0x1DF3:
      case 0x1DF4:
      case 0x1DF5:
      case 0x1DF6:
      case 0x1DF7:
      case 0x1DF8:
      case 0x1DF9:
      case 0x1DFA:
      case 0x1DFB:
      case 0x1DFC:
      case 0x1DFD:
      case 0x1DFE:
      case 0x1DFF:
      case 0x1E00:
      case 0x1E01:
      case 0x1E02:
      case 0x1E03:
      case 0x1E04:
      case 0x1E05:
      case 0x1E06:
      case 0x1E07:
      case 0x1E08:
      case 0x1E09:
      case 0x1E0A:
      case 0x1E0B:
      case 0x1E0C:
      case 0x1E0D:
      case 0x1E0E:
      case 0x1E0F:
      case 0x1E10:
      case 0x1E11:
      case 0x1E12:
      case 0x1E13:
      case 0x1E14:
      case 0x1E15:
      case 0x1E16:
      case 0x1E17:
      case 0x1E18:
      case 0x1E19:
      case 0x1E1A:
      case 0x1E1B:
      case 0x1E1C:
      case 0x1E1D:
      case 0x1E1E:
      case 0x1E1F:
      case 0x1E20:
      case 0x1E21:
      case 0x1E22:
      case 0x1E23:
      case 0x1E24:
      case 0x1E25:
      case 0x1E26:
      case 0x1E27:
      case 0x1E28:
      case 0x1E29:
      case 0x1E2A:
      case 0x1E2B:
      case 0x1E2C:
      case 0x1E2D:
      case 0x1E2E:
      case 0x1E2F:
      case 0x1E30:
      case 0x1E31:
      case 0x1E32:
      case 0x1E33:
      case 0x1E34:
      case 0x1E35:
      case 0x1E36:
      case 0x1E37:
      case 0x1E38:
      case 0x1E39:
      case 0x1E3A:
      case 0x1E3B:
      case 0x1E3C:
      case 0x1E3D:
      case 0x1E3E:
      case 0x1E3F:
      case 0x1E40:
      case 0x1E41:
      case 0x1E42:
      case 0x1E43:
      case 0x1E44:
      case 0x1E45:
      case 0x1E46:
      case 0x1E47:
      case 0x1E48:
      case 0x1E49:
      case 0x1E4A:
      case 0x1E4B:
      case 0x1E4C:
      case 0x1E4D:
      case 0x1E4E:
      case 0x1E4F:
      case 0x1E50:
      case 0x1E51:
      case 0x1E52:
      case 0x1E53:
      case 0x1E54:
      case 0x1E55:
      case 0x1E56:
      case 0x1E57:
      case 0x1E58:
      case 0x1E59:
      case 0x1E5A:
      case 0x1E5B:
      case 0x1E5C:
      case 0x1E5D:
      case 0x1E5E:
      case 0x1E5F:
      case 0x1E60:
      case 0x1E61:
      case 0x1E62:
      case 0x1E63:
      case 0x1E64:
      case 0x1E65:
      case 0x1E66:
      case 0x1E67:
      case 0x1E68:
      case 0x1E69:
      case 0x1E6A:
      case 0x1E6B:
      case 0x1E6C:
      case 0x1E6D:
      case 0x1E6E:
      case 0x1E6F:
      case 0x1E70:
      case 0x1E71:
      case 0x1E72:
      case 0x1E73:
      case 0x1E74:
      case 0x1E75:
      case 0x1E76:
      case 0x1E77:
      case 0x1E78:
      case 0x1E79:
      case 0x1E7A:
      case 0x1E7B:
      case 0x1E7C:
      case 0x1E7D:
      case 0x1E7E:
      case 0x1E7F:
      case 0x1E80:
      case 0x1E81:
      case 0x1E82:
      case 0x1E83:
      case 0x1E84:
      case 0x1E85:
      case 0x1E86:
      case 0x1E87:
      case 0x1E88:
      case 0x1E89:
      case 0x1E8A:
      case 0x1E8B:
      case 0x1E8C:
      case 0x1E8D:
      case 0x1E8E:
      case 0x1E8F:
      case 0x1E90:
      case 0x1E91:
      case 0x1E92:
      case 0x1E93:
      case 0x1E94:
      case 0x1E95:
      case 0x1E96:
      case 0x1E97:
      case 0x1E98:
      case 0x1E99:
      case 0x1E9A:
      case 0x1E9B:
      case 0x1E9C:
      case 0x1E9D:
      case 0x1E9E:
      case 0x1E9F:
      case 0x1EA0:
      case 0x1EA1:
      case 0x1EA2:
      case 0x1EA3:
      case 0x1EA4:
      case 0x1EA5:
      case 0x1EA6:
      case 0x1EA7:
      case 0x1EA8:
      case 0x1EA9:
      case 0x1EAA:
      case 0x1EAB:
      case 0x1EAC:
      case 0x1EAD:
      case 0x1EAE:
      case 0x1EAF:
      case 0x1EB0:
      case 0x1EB1:
      case 0x1EB2:
      case 0x1EB3:
      case 0x1EB4:
      case 0x1EB5:
      case 0x1EB6:
      case 0x1EB7:
      case 0x1EB8:
      case 0x1EB9:
      case 0x1EBA:
      case 0x1EBB:
      case 0x1EBC:
      case 0x1EBD:
      case 0x1EBE:
      case 0x1EBF:
      case 0x1EC0:
      case 0x1EC1:
      case 0x1EC2:
      case 0x1EC3:
      case 0x1EC4:
      case 0x1EC5:
      case 0x1EC6:
      case 0x1EC7:
      case 0x1EC8:
      case 0x1EC9:
      case 0x1ECA:
      case 0x1ECB:
      case 0x1ECC:
      case 0x1ECD:
      case 0x1ECE:
      case 0x1ECF:
      case 0x1ED0:
      case 0x1ED1:
      case 0x1ED2:
      case 0x1ED3:
      case 0x1ED4:
      case 0x1ED5:
      case 0x1ED6:
      case 0x1ED7:
      case 0x1ED8:
      case 0x1ED9:
      case 0x1EDA:
      case 0x1EDB:
      case 0x1EDC:
      case 0x1EDD:
      case 0x1EDE:
      case 0x1EDF:
      case 0x1EE0:
      case 0x1EE1:
      case 0x1EE2:
      case 0x1EE3:
      case 0x1EE4:
      case 0x1EE5:
      case 0x1EE6:
      case 0x1EE7:
      case 0x1EE8:
      case 0x1EE9:
      case 0x1EEA:
      case 0x1EEB:
      case 0x1EEC:
      case 0x1EED:
      case 0x1EEE:
      case 0x1EEF:
      case 0x1EF0:
      case 0x1EF1:
      case 0x1EF2:
      case 0x1EF3:
      case 0x1EF4:
      case 0x1EF5:
      case 0x1EF6:
      case 0x2077:
      case 0x2078:
      case 0x2079:
      case 0x207A:
      case 0x207B:
      case 0x207C:
      case 0x207D:
      case 0x207E:
      case 0x207F:
      case 0x2080:
      case 0x2081:
      case 0x2082:
      case 0x2083:
      case 0x2084:
      case 0x2085:
      case 0x2086:
      case 0x2087:
      case 0x2088:
      case 0x2089:
      case 0x208A:
      case 0x208B:
      case 0x208C:
      case 0x208D:
      case 0x208E:
      case 0x208F:
      case 0x2090:
      case 0x2091:
      case 0x2092:
      case 0x2093:
      case 0x2094:
      case 0x2095:
      case 0x2096:
      case 0x2097:
      case 0x2098:
      case 0x2099:
      case 0x209A:
      case 0x209B:
      case 0x209C:
      case 0x209D:
      case 0x209E:
      case 0x209F:
      case 0x20A0:
      case 0x20A1:
      case 0x20A2:
      case 0x20A3:
      case 0x20A4:
      case 0x20A5:
      case 0x20A6:
      case 0x20A7:
      case 0x20A8:
      case 0x20A9:
      case 0x20AA:
      case 0x20AB:
      case 0x20AC:
      case 0x20AD:
      case 0x20AE:
      case 0x20AF:
      case 0x20B0:
      case 0x20B1:
      case 0x20B2:
      case 0x20B3:
      case 0x20B4:
      case 0x20B5:
      case 0x20B6:
      case 0x20B7:
      case 0x20B8:
      case 0x20B9:
      case 0x20BA:
      case 0x20BB:
      case 0x20BC:
      case 0x20BD:
      case 0x20BE:
      case 0x20BF:
      case 0x20C0:
      case 0x20C1:
      case 0x20C2:
      case 0x20C3:
      case 0x20C4:
      case 0x20C5:
      case 0x20C6:
      case 0x20C7:
      case 0x20C8:
      case 0x20C9:
      case 0x20CA:
      case 0x20CB:
      case 0x20CC:
      case 0x20CD:
      case 0x20CE:
      case 0x20CF:
      case 0x20D0:
      case 0x20D1:
      case 0x20D2:
      case 0x20D3:
      case 0x20D4:
      case 0x20D5:
      case 0x20D6:
      case 0x20D7:
      case 0x20D8:
      case 0x20D9:
      case 0x20DA:
      case 0x20DB:
      case 0x20DC:
      case 0x20DD:
      case 0x20DE:
      case 0x20DF:
      case 0x20E0:
      case 0x20E1:
      case 0x20E2:
      case 0x20E3:
      case 0x20E4:
      case 0x20E5:
      case 0x20E6:
      case 0x20E7:
      case 0x20E8:
      case 0x20E9:
      case 0x20EA:
      case 0x20EB:
      case 0x20EC:
      case 0x20ED:
      case 0x20EE:
      case 0x20EF:
      case 0x20F0:
      case 0x20F1:
      case 0x20F2:
      case 0x20F3:
      case 0x20F4:
      case 0x20F5:
      case 0x20F6:
      case 0x20F7:
      case 0x20F8:
      case 0x20F9:
      case 0x20FA:
      case 0x20FB:
      case 0x20FC:
      case 0x20FD:
      case 0x20FE:
      case 0x20FF:
      case 0x2100:
      case 0x2101:
      case 0x2102:
      case 0x2103:
      case 0x2104:
      case 0x2105:
      case 0x2106:
      case 0x2107:
      case 0x2108:
      case 0x2109:
      case 0x210A:
      case 0x210B:
      case 0x210C:
      case 0x210D:
      case 0x210E:
      case 0x210F:
      case 0x2110:
      case 0x2111:
      case 0x2112:
      case 0x2113:
      case 0x2114:
      case 0x2115:
      case 0x2116:
      case 0x2117:
      case 0x2118:
      case 0x2119:
      case 0x211A:
      case 0x211B:
      case 0x211C:
      case 0x211D:
      case 0x211E:
      case 0x211F:
      case 0x2120:
      case 0x2121:
      case 0x2122:
      case 0x2123:
      case 0x2124:
      case 0x2125:
      case 0x2126:
      case 0x2127:
      case 0x2128:
      case 0x2129:
      case 0x212A:
      case 0x212B:
      case 0x212C:
      case 0x212D:
      case 0x212E:
      case 0x212F:
      case 0x2130:
      case 0x2131:
      case 0x2132:
      case 0x2133:
      case 0x2134:
      case 0x2135:
      case 0x2136:
      case 0x2137:
      case 0x2138:
      case 0x2139:
      case 0x213A:
      case 0x213B:
      case 0x213C:
      case 0x213D:
      case 0x213E:
      case 0x213F:
      case 0x2140:
      case 0x2141:
      case 0x2142:
      case 0x2143:
      case 0x2144:
      case 0x2145:
      case 0x2146:
      case 0x2147:
      case 0x2148:
      case 0x2149:
      case 0x214A:
      case 0x214B:
      case 0x214C:
      case 0x214D:
      case 0x214E:
      case 0x214F:
      case 0x2150:
      case 0x2151:
      case 0x2152:
      case 0x2153:
      case 0x2154:
      case 0x2155:
      case 0x2156:
      case 0x2157:
      case 0x2158:
      case 0x2159:
      case 0x215A:
      case 0x215B:
      case 0x215C:
      case 0x215D:
      case 0x215E:
      case 0x215F:
      case 0x2160:
      case 0x2161:
      case 0x2162:
      case 0x2163:
      case 0x2164:
      case 0x2165:
      case 0x2166:
      case 0x2167:
      case 0x2168:
      case 0x2169:
      case 0x216A:
      case 0x216B:
      case 0x216C:
      case 0x216D:
      case 0x216E:
      case 0x216F:
      case 0x2170:
      case 0x2171:
      case 0x2172:
      case 0x2173:
      case 0x2174:
      case 0x2175:
      case 0x2176:
      case 0x2177:
      case 0x2178:
      case 0x2179:
      case 0x217A:
      case 0x217B:
      case 0x217C:
      case 0x217D:
      case 0x217E:
      case 0x217F:
      case 0x2180:
      case 0x2181:
      case 0x2182:
      case 0x2183:
      case 0x2184:
      case 0x2185:
      case 0x2186:
      case 0x2187:
      case 0x2188:
      case 0x2189:
      case 0x218A:
      case 0x218B:
      case 0x218C:
      case 0x218D:
      case 0x218E:
      case 0x218F:
      case 0x2190:
      case 0x2191:
      case 0x2192:
      case 0x2193:
      case 0x2194:
      case 0x2195:
      case 0x2196:
      case 0x2197:
      case 0x2198:
      case 0x2199:
      case 0x219A:
      case 0x219B:
      case 0x219C:
      case 0x219D:
      case 0x219E:
      case 0x219F:
      case 0x21A0:
      case 0x21A1:
      case 0x21A2:
      case 0x21A3:
      case 0x21A4:
      case 0x21A5:
      case 0x21A6:
      case 0x21A7:
      case 0x21A8:
      case 0x21A9:
      case 0x21AA:
      case 0x21AB:
      case 0x21AC:
      case 0x21AD:
      case 0x21AE:
      case 0x21AF:
      case 0x21B0:
      case 0x21B1:
      case 0x21B2:
      case 0x21B3:
      case 0x21B4:
      case 0x21B5:
      case 0x21B6:
      case 0x21B7:
      case 0x21B8:
      case 0x21B9:
      case 0x21BA:
      case 0x21BB:
      case 0x21BC:
      case 0x21BD:
      case 0x21BE:
      case 0x21BF:
      case 0x21C0:
      case 0x21C1:
      case 0x21C2:
      case 0x21C3:
      case 0x21C4:
      case 0x21C5:
      case 0x21C6:
      case 0x21C7:
      case 0x21C8:
      case 0x21C9:
      case 0x21CA:
      case 0x21CB:
      case 0x21CC:
      case 0x21CD:
      case 0x21CE:
      case 0x21CF:
      case 0x21D0:
      case 0x21D1:
      case 0x21D2:
      case 0x21D3:
      case 0x21D4:
      case 0x21D5:
      case 0x21D6:
      case 0x21D7:
      case 0x21D8:
      case 0x21D9:
      case 0x21DA:
      case 0x21DB:
      case 0x21DC:
      case 0x21DD:
      case 0x21DE:
      case 0x21DF:
      case 0x21E0:
      case 0x21E1:
      case 0x21E2:
      case 0x21E3:
      case 0x21E4:
      case 0x21E5:
      case 0x21E6:
      case 0x21E7:
      case 0x21E8:
      case 0x21E9:
      case 0x21EA:
      case 0x21EB:
      case 0x21EC:
      case 0x21ED:
      case 0x21EE:
      case 0x21EF:
      case 0x21F0:
      case 0x21F1:
      case 0x21F2:
      case 0x21F3:
      case 0x21F4:
      case 0x21F5:
      case 0x21F6:
      case 0x464F:
      case 0x4650:
      case 0x4651:
      case 0x4652:
      case 0x4653:
      case 0x4654:
      case 0x4655:
      case 0x4656:
      case 0x4657:
      case 0x466A:
      case 0x466B:
      case 0x466C:
      case 0x466D:
      case 0x466E:
      case 0x466F:
      case 0x4670:
      case 0x4671:
      case 0x4672:
        sub_1CBD97418((uint64_t)a1, a2, a3, (void *)a4);
        break;
      case 0x1EF7:
      case 0x1EF8:
      case 0x1EF9:
      case 0x1EFA:
      case 0x1EFB:
      case 0x1EFC:
      case 0x1EFD:
      case 0x1EFE:
      case 0x1EFF:
      case 0x1F00:
      case 0x1F01:
      case 0x1F02:
      case 0x1F03:
      case 0x1F04:
      case 0x1F05:
      case 0x1F06:
      case 0x1F07:
      case 0x1F08:
      case 0x1F09:
      case 0x1F0A:
      case 0x1F0B:
      case 0x1F0C:
      case 0x1F0D:
      case 0x1F0E:
      case 0x1F0F:
      case 0x1F10:
      case 0x1F11:
      case 0x1F12:
      case 0x1F13:
      case 0x1F14:
      case 0x1F15:
      case 0x1F16:
      case 0x1F17:
      case 0x1F18:
      case 0x1F19:
      case 0x1F1A:
      case 0x1F1B:
      case 0x1F1C:
      case 0x1F1D:
      case 0x1F1E:
      case 0x1F1F:
      case 0x1F20:
      case 0x1F21:
      case 0x1F22:
      case 0x1F23:
      case 0x1F24:
      case 0x1F25:
      case 0x1F26:
      case 0x1F27:
      case 0x1F28:
      case 0x1F29:
      case 0x1F2A:
      case 0x1F2B:
      case 0x1F2C:
      case 0x1F2D:
      case 0x1F2E:
      case 0x1F2F:
      case 0x1F30:
      case 0x1F31:
      case 0x1F32:
      case 0x1F33:
      case 0x1F34:
      case 0x1F35:
      case 0x1F36:
      case 0x1F37:
      case 0x1F38:
      case 0x1F39:
      case 0x1F3A:
      case 0x1F3B:
      case 0x1F3C:
      case 0x1F3D:
      case 0x1F3E:
      case 0x1F3F:
      case 0x1F40:
      case 0x1F41:
      case 0x1F42:
      case 0x1F43:
      case 0x1F44:
      case 0x1F45:
      case 0x1F46:
      case 0x1F47:
      case 0x1F48:
      case 0x1F49:
      case 0x1F4A:
      case 0x1F4B:
      case 0x1F4C:
      case 0x1F4D:
      case 0x1F4E:
      case 0x1F4F:
      case 0x1F50:
      case 0x1F51:
      case 0x1F52:
      case 0x1F53:
      case 0x1F54:
      case 0x1F55:
      case 0x1F56:
      case 0x1F57:
      case 0x1F58:
      case 0x1F59:
      case 0x1F5A:
      case 0x1F5B:
      case 0x1F5C:
      case 0x1F5D:
      case 0x1F5E:
      case 0x1F5F:
      case 0x1F60:
      case 0x1F61:
      case 0x1F62:
      case 0x1F63:
      case 0x1F64:
      case 0x1F65:
      case 0x1F66:
      case 0x1F67:
      case 0x1F68:
      case 0x1F69:
      case 0x1F6A:
      case 0x1F6B:
      case 0x1F6C:
      case 0x1F6D:
      case 0x1F6E:
      case 0x1F6F:
      case 0x1F70:
      case 0x1F71:
      case 0x1F72:
      case 0x1F73:
      case 0x1F74:
      case 0x1F75:
      case 0x1F76:
      case 0x1F77:
      case 0x1F78:
      case 0x1F79:
      case 0x1F7A:
      case 0x1F7B:
      case 0x1F7C:
      case 0x1F7D:
      case 0x1F7E:
      case 0x1F7F:
      case 0x1F80:
      case 0x1F81:
      case 0x1F82:
      case 0x1F83:
      case 0x1F84:
      case 0x1F85:
      case 0x1F86:
      case 0x1F87:
      case 0x1F88:
      case 0x1F89:
      case 0x1F8A:
      case 0x1F8B:
      case 0x1F8C:
      case 0x1F8D:
      case 0x1F8E:
      case 0x1F8F:
      case 0x1F90:
      case 0x1F91:
      case 0x1F92:
      case 0x1F93:
      case 0x1F94:
      case 0x1F95:
      case 0x1F96:
      case 0x1F97:
      case 0x1F98:
      case 0x1F99:
      case 0x1F9A:
      case 0x1F9B:
      case 0x1F9C:
      case 0x1F9D:
      case 0x1F9E:
      case 0x1F9F:
      case 0x1FA0:
      case 0x1FA1:
      case 0x1FA2:
      case 0x1FA3:
      case 0x1FA4:
      case 0x1FA5:
      case 0x1FA6:
      case 0x1FA7:
      case 0x1FA8:
      case 0x1FA9:
      case 0x1FAA:
      case 0x1FAB:
      case 0x1FAC:
      case 0x1FAD:
      case 0x1FAE:
      case 0x1FAF:
      case 0x1FB0:
      case 0x1FB1:
      case 0x1FB2:
      case 0x1FB3:
      case 0x1FB4:
      case 0x1FB5:
      case 0x1FB6:
      case 0x1FB7:
      case 0x1FB8:
      case 0x1FB9:
      case 0x1FBA:
      case 0x1FBB:
      case 0x1FBC:
      case 0x1FBD:
      case 0x1FBE:
      case 0x1FBF:
      case 0x1FC0:
      case 0x1FC1:
      case 0x1FC2:
      case 0x1FC3:
      case 0x1FC4:
      case 0x1FC5:
      case 0x1FC6:
      case 0x1FC7:
      case 0x1FC8:
      case 0x1FC9:
      case 0x1FCA:
      case 0x1FCB:
      case 0x1FCC:
      case 0x1FCD:
      case 0x1FCE:
      case 0x1FCF:
      case 0x1FD0:
      case 0x1FD1:
      case 0x1FD2:
      case 0x1FD3:
      case 0x1FD4:
      case 0x1FD5:
      case 0x1FD6:
      case 0x1FD7:
      case 0x1FD8:
      case 0x1FD9:
      case 0x1FDA:
      case 0x1FDB:
      case 0x1FDC:
      case 0x1FDD:
      case 0x1FDE:
      case 0x1FDF:
      case 0x1FE0:
      case 0x1FE1:
      case 0x1FE2:
      case 0x1FE3:
      case 0x1FE4:
      case 0x1FE5:
      case 0x1FE6:
      case 0x1FE7:
      case 0x1FE8:
      case 0x1FE9:
      case 0x1FEA:
      case 0x1FEB:
      case 0x1FEC:
      case 0x1FED:
      case 0x1FEE:
      case 0x1FEF:
      case 0x1FF0:
      case 0x1FF1:
      case 0x1FF2:
      case 0x1FF3:
      case 0x1FF4:
      case 0x1FF5:
      case 0x1FF6:
      case 0x1FF7:
      case 0x1FF8:
      case 0x1FF9:
      case 0x1FFA:
      case 0x1FFB:
      case 0x1FFC:
      case 0x1FFD:
      case 0x1FFE:
      case 0x1FFF:
      case 0x2000:
      case 0x2001:
      case 0x2002:
      case 0x2003:
      case 0x2004:
      case 0x2005:
      case 0x2006:
      case 0x2007:
      case 0x2008:
      case 0x2009:
      case 0x200A:
      case 0x200B:
      case 0x200C:
      case 0x200D:
      case 0x200E:
      case 0x200F:
      case 0x2010:
      case 0x2011:
      case 0x2012:
      case 0x2013:
      case 0x2014:
      case 0x2015:
      case 0x2016:
      case 0x2017:
      case 0x2018:
      case 0x2019:
      case 0x201A:
      case 0x201B:
      case 0x201C:
      case 0x201D:
      case 0x201E:
      case 0x201F:
      case 0x2020:
      case 0x2021:
      case 0x2022:
      case 0x2023:
      case 0x2024:
      case 0x2025:
      case 0x2026:
      case 0x2027:
      case 0x2028:
      case 0x2029:
      case 0x202A:
      case 0x202B:
      case 0x202C:
      case 0x202D:
      case 0x202E:
      case 0x202F:
      case 0x2030:
      case 0x2031:
      case 0x2032:
      case 0x2033:
      case 0x2034:
      case 0x2035:
      case 0x2036:
      case 0x2037:
      case 0x2038:
      case 0x2039:
      case 0x203A:
      case 0x203B:
      case 0x203C:
      case 0x203D:
      case 0x203E:
      case 0x203F:
      case 0x2040:
      case 0x2041:
      case 0x2042:
      case 0x2043:
      case 0x2044:
      case 0x2045:
      case 0x2046:
      case 0x2047:
      case 0x2048:
      case 0x2049:
      case 0x204A:
      case 0x204B:
      case 0x204C:
      case 0x204D:
      case 0x204E:
      case 0x204F:
      case 0x2050:
      case 0x2051:
      case 0x2052:
      case 0x2053:
      case 0x2054:
      case 0x2055:
      case 0x2056:
      case 0x2057:
      case 0x2058:
      case 0x2059:
      case 0x205A:
      case 0x205B:
      case 0x205C:
      case 0x205D:
      case 0x205E:
      case 0x205F:
      case 0x2060:
      case 0x2061:
      case 0x2062:
      case 0x2063:
      case 0x2064:
      case 0x2065:
      case 0x2066:
      case 0x2067:
      case 0x2068:
      case 0x2069:
      case 0x206A:
      case 0x206B:
      case 0x206C:
      case 0x206D:
      case 0x206E:
      case 0x206F:
      case 0x2070:
      case 0x2071:
      case 0x2072:
      case 0x2073:
      case 0x2074:
      case 0x2075:
      case 0x2076:
      case 0x4658:
      case 0x4659:
      case 0x465A:
      case 0x465B:
      case 0x465C:
      case 0x465D:
      case 0x465E:
      case 0x465F:
      case 0x4660:
      case 0x4661:
      case 0x4662:
      case 0x4663:
      case 0x4664:
      case 0x4665:
      case 0x4666:
      case 0x4667:
      case 0x4668:
      case 0x4669:
        sub_1CBD970F0((uint64_t)a1, a2, a3, (void *)a4);
        break;
      case 0x21F7:
      case 0x4673:
      case 0x4674:
      case 0x4675:
      case 0x4676:
        sub_1CD441AC0(a1, a2, a3, a4);
        break;
      case 0x21F8:
      case 0x4677:
      case 0x4678:
      case 0x4679:
      case 0x467A:
        sub_1CD441D48(a1, a2, a3, a4);
        break;
      case 0x21F9:
      case 0x21FA:
      case 0x21FB:
      case 0x21FC:
      case 0x21FD:
      case 0x21FE:
      case 0x21FF:
      case 0x2200:
      case 0x2201:
      case 0x2202:
      case 0x2203:
      case 0x2204:
      case 0x2205:
      case 0x2206:
      case 0x2207:
      case 0x2208:
      case 0x2209:
      case 0x220A:
      case 0x220B:
      case 0x220C:
      case 0x220D:
      case 0x220E:
      case 0x220F:
      case 0x2210:
      case 0x2211:
      case 0x2212:
      case 0x2213:
      case 0x467B:
      case 0x467C:
      case 0x467D:
      case 0x467E:
        sub_1CD437D4C(a1, a2, a3, a4);
        break;
      case 0x2214:
      case 0x2215:
      case 0x2216:
      case 0x2217:
      case 0x2218:
      case 0x2219:
      case 0x221A:
      case 0x221B:
      case 0x221C:
      case 0x221D:
      case 0x221E:
      case 0x221F:
      case 0x2220:
      case 0x2221:
      case 0x2222:
      case 0x2223:
      case 0x2224:
      case 0x2225:
      case 0x2226:
      case 0x2227:
      case 0x2228:
      case 0x2229:
      case 0x222A:
      case 0x222B:
      case 0x222C:
      case 0x222D:
      case 0x222E:
      case 0x467F:
      case 0x4680:
      case 0x4681:
      case 0x4682:
      case 0x4683:
      case 0x4684:
      case 0x4685:
      case 0x4686:
        sub_1CBD91254(a1, a2, a3, a4);
        break;
      case 0x222F:
      case 0x2230:
      case 0x2231:
      case 0x2232:
      case 0x4687:
      case 0x4688:
      case 0x4689:
      case 0x468A:
        sub_1CD43CAA0(a1, a2, a3, a4);
        break;
      case 0x2233:
      case 0x2234:
      case 0x2235:
      case 0x2236:
      case 0x468B:
      case 0x468C:
      case 0x468D:
      case 0x468E:
        sub_1CD43D418(a1, a2, a3, a4);
        break;
      case 0x2237:
      case 0x2238:
      case 0x468F:
      case 0x4690:
      case 0x4691:
      case 0x4692:
        sub_1CD440530(a1, a2, a3, a4);
        break;
      case 0x2239:
      case 0x223A:
      case 0x4693:
      case 0x4694:
      case 0x4695:
      case 0x4696:
        sub_1CD4408C4(a1, a2, a3, a4);
        break;
      case 0x223B:
      case 0x223C:
      case 0x223D:
      case 0x223E:
      case 0x223F:
      case 0x2240:
      case 0x2241:
      case 0x2242:
      case 0x4697:
      case 0x4698:
      case 0x4699:
      case 0x469A:
      case 0x469B:
      case 0x469C:
      case 0x469D:
      case 0x469E:
        sub_1CD4406D4((uint64_t)a1, a2, a3, a4);
        break;
      case 0x2243:
      case 0x2244:
      case 0x2245:
      case 0x2246:
      case 0x469F:
      case 0x46A0:
      case 0x46A1:
      case 0x46A2:
        sub_1CD440A68((uint64_t)a1, a2, a3, a4);
        break;
      case 0x2247:
      case 0x2248:
      case 0x2249:
      case 0x224A:
      case 0x46A3:
      case 0x46A4:
      case 0x46A5:
      case 0x46A6:
        sub_1CD441038((uint64_t)a1, a2, a3, a4);
        break;
      case 0x224B:
      case 0x224C:
      case 0x224D:
      case 0x224E:
      case 0x46A7:
      case 0x46A8:
      case 0x46A9:
      case 0x46AA:
        sub_1CD440C58((uint64_t)a1, a2, a3, a4);
        break;
      case 0x224F:
      case 0x2250:
      case 0x2251:
      case 0x2252:
      case 0x46AB:
      case 0x46AC:
      case 0x46AD:
      case 0x46AE:
        sub_1CD44122C((uint64_t)a1, a2, a3, a4);
        break;
      case 0x2253:
      case 0x2254:
      case 0x2255:
      case 0x2256:
      case 0x46AF:
      case 0x46B0:
      case 0x46B1:
      case 0x46B2:
        sub_1CD440E48((uint64_t)a1, a2, a3, a4);
        break;
      case 0x2257:
      case 0x2258:
      case 0x2259:
      case 0x225A:
      case 0x46B3:
      case 0x46B4:
      case 0x46B5:
      case 0x46B6:
        sub_1CD441420((uint64_t)a1, a2, a3, a4);
        break;
      case 0x225B:
      case 0x225C:
      case 0x225D:
      case 0x225E:
      case 0x46B7:
      case 0x46B8:
      case 0x46B9:
      case 0x46BA:
        sub_1CBD9C990(a1, a2, a3, a4);
        break;
      case 0x225F:
      case 0x2260:
      case 0x2261:
      case 0x2262:
      case 0x46BB:
      case 0x46BC:
      case 0x46BD:
      case 0x46BE:
        sub_1CD43E9E8(a1, a2, a3, a4);
        break;
      case 0x2263:
      case 0x2264:
      case 0x2265:
      case 0x2266:
      case 0x46BF:
      case 0x46C0:
      case 0x46C1:
      case 0x46C2:
        sub_1CD43CC34(a1, a2, a3, a4);
        break;
      case 0x2267:
      case 0x2268:
      case 0x2269:
      case 0x226A:
      case 0x46C3:
      case 0x46C4:
      case 0x46C5:
      case 0x46C6:
        sub_1CD43D5AC(a1, a2, a3, a4);
        break;
      case 0x226B:
      case 0x226C:
      case 0x226D:
      case 0x226E:
      case 0x46C7:
      case 0x46C8:
      case 0x46C9:
      case 0x46CA:
        sub_1CBD9CB3C(a1, a2, a3, a4);
        break;
      case 0x226F:
      case 0x2270:
      case 0x2271:
      case 0x2272:
      case 0x46CB:
      case 0x46CC:
      case 0x46CD:
      case 0x46CE:
        sub_1CD43EB90(a1, a2, a3, a4);
        break;
      case 0x2273:
      case 0x2274:
      case 0x2275:
      case 0x2276:
      case 0x46CF:
      case 0x46D0:
      case 0x46D1:
      case 0x46D2:
        sub_1CBD9CEAC(a1, a2, a3, a4);
        break;
      case 0x2277:
      case 0x2278:
      case 0x2279:
      case 0x227A:
      case 0x46D3:
      case 0x46D4:
      case 0x46D5:
      case 0x46D6:
        sub_1CD43EEF4(a1, a2, a3, a4);
        break;
      case 0x227B:
      case 0x227C:
      case 0x227D:
      case 0x227E:
      case 0x46D7:
      case 0x46D8:
      case 0x46D9:
      case 0x46DA:
      case 0x46DB:
      case 0x46DC:
      case 0x46DD:
      case 0x46DE:
      case 0x46DF:
      case 0x46E0:
      case 0x46E1:
      case 0x46E2:
      case 0x46E3:
      case 0x46E4:
      case 0x46E5:
      case 0x46E6:
      case 0x46E7:
      case 0x46E8:
      case 0x46E9:
      case 0x46EA:
      case 0x46EB:
      case 0x46EC:
      case 0x46ED:
      case 0x46EE:
      case 0x46EF:
      case 0x46F0:
      case 0x46F1:
      case 0x46F2:
      case 0x46F3:
      case 0x46F4:
      case 0x46F5:
      case 0x46F6:
      case 0x46F7:
      case 0x46F8:
      case 0x46F9:
      case 0x46FA:
      case 0x46FB:
      case 0x46FC:
      case 0x46FD:
      case 0x46FE:
      case 0x46FF:
      case 0x4700:
      case 0x4701:
      case 0x4702:
      case 0x4703:
      case 0x4704:
      case 0x4705:
      case 0x4706:
      case 0x4707:
      case 0x4708:
      case 0x4709:
      case 0x470A:
      case 0x470B:
      case 0x470C:
        sub_1CBD9CCE8(a1, a2, a3, a4);
        break;
      case 0x227F:
      case 0x2280:
      case 0x2281:
      case 0x2282:
      case 0x470D:
      case 0x470E:
      case 0x470F:
      case 0x4710:
      case 0x4711:
      case 0x4712:
      case 0x4713:
      case 0x4714:
      case 0x4715:
      case 0x4716:
      case 0x4717:
      case 0x4718:
      case 0x4719:
      case 0x471A:
      case 0x471B:
      case 0x471C:
      case 0x471D:
      case 0x471E:
      case 0x471F:
      case 0x4720:
      case 0x4721:
      case 0x4722:
      case 0x4723:
      case 0x4724:
      case 0x4725:
      case 0x4726:
      case 0x4727:
        sub_1CD43ED38(a1, a2, a3, a4);
        break;
      case 0x2283:
      case 0x2284:
      case 0x2285:
      case 0x2286:
      case 0x4728:
      case 0x4729:
      case 0x472A:
      case 0x472B:
      case 0x472C:
      case 0x472D:
      case 0x472E:
      case 0x472F:
      case 0x4730:
      case 0x4731:
      case 0x4732:
      case 0x4733:
      case 0x4734:
      case 0x4735:
      case 0x4736:
      case 0x4737:
      case 0x4738:
      case 0x4739:
      case 0x473A:
      case 0x473B:
      case 0x473C:
      case 0x473D:
      case 0x473E:
      case 0x473F:
      case 0x4740:
      case 0x4741:
      case 0x4742:
      case 0x4743:
      case 0x4744:
      case 0x4745:
      case 0x4746:
      case 0x4747:
      case 0x4748:
      case 0x4749:
      case 0x474A:
      case 0x474B:
      case 0x474C:
      case 0x474D:
      case 0x474E:
      case 0x474F:
      case 0x4750:
      case 0x4751:
      case 0x4752:
      case 0x4753:
      case 0x4754:
      case 0x4755:
      case 0x4756:
      case 0x4757:
      case 0x4758:
      case 0x4759:
      case 0x475A:
      case 0x475B:
      case 0x475C:
      case 0x475D:
        sub_1CD43DFB4(a1, a2, a3, a4);
        break;
      case 0x2287:
      case 0x2288:
      case 0x2289:
      case 0x228A:
      case 0x475E:
      case 0x475F:
      case 0x4760:
      case 0x4761:
      case 0x4762:
      case 0x4763:
      case 0x4764:
      case 0x4765:
      case 0x4766:
      case 0x4767:
      case 0x4768:
      case 0x4769:
      case 0x476A:
      case 0x476B:
      case 0x476C:
      case 0x476D:
      case 0x476E:
      case 0x476F:
      case 0x4770:
      case 0x4771:
      case 0x4772:
      case 0x4773:
      case 0x4774:
      case 0x4775:
      case 0x4776:
      case 0x4777:
      case 0x4778:
        sub_1CD43F09C(a1, a2, a3, a4);
        break;
      case 0x228B:
      case 0x228C:
      case 0x228D:
      case 0x228E:
      case 0x4779:
      case 0x477A:
      case 0x477B:
        sub_1CD43CDC8(a1, a2, a3, a4);
        break;
      case 0x228F:
      case 0x2290:
      case 0x2291:
      case 0x2292:
      case 0x477C:
      case 0x477D:
      case 0x477E:
        sub_1CD43D740(a1, a2, a3, a4);
        break;
      case 0x2293:
      case 0x2294:
      case 0x2295:
      case 0x2296:
      case 0x2297:
      case 0x2298:
      case 0x2299:
      case 0x229A:
      case 0x229B:
      case 0x229C:
      case 0x229D:
      case 0x229E:
      case 0x229F:
      case 0x22A0:
      case 0x22A1:
      case 0x22A2:
      case 0x22A3:
      case 0x22A4:
      case 0x22A5:
      case 0x22A6:
      case 0x22A7:
      case 0x22A8:
      case 0x22A9:
      case 0x22AA:
      case 0x22AB:
      case 0x22AC:
      case 0x22AD:
      case 0x22AE:
      case 0x22AF:
      case 0x22B0:
      case 0x22B1:
      case 0x22B2:
      case 0x22B3:
      case 0x22B4:
      case 0x22B5:
      case 0x22B6:
      case 0x22B7:
      case 0x22B8:
      case 0x22B9:
      case 0x22BA:
      case 0x22BB:
      case 0x22BC:
      case 0x22BD:
      case 0x22BE:
      case 0x22BF:
      case 0x22C0:
      case 0x22C1:
      case 0x22C2:
      case 0x22C3:
      case 0x22C4:
      case 0x22C5:
      case 0x22C6:
      case 0x22C7:
      case 0x22C8:
      case 0x22C9:
      case 0x22CA:
      case 0x22CB:
      case 0x22CC:
      case 0x22CD:
      case 0x22CE:
      case 0x22CF:
      case 0x22D0:
      case 0x22D1:
      case 0x22D2:
      case 0x22D3:
      case 0x22D4:
      case 0x22D5:
      case 0x22D6:
      case 0x22D7:
      case 0x22D8:
      case 0x22D9:
      case 0x22DA:
      case 0x22DB:
      case 0x22DC:
      case 0x22DD:
      case 0x22DE:
      case 0x22DF:
      case 0x22E0:
      case 0x22E1:
      case 0x22E2:
      case 0x22E3:
      case 0x477F:
      case 0x4780:
      case 0x4781:
      case 0x4782:
      case 0x4783:
      case 0x4784:
      case 0x4785:
      case 0x4786:
      case 0x4787:
      case 0x4788:
      case 0x4789:
      case 0x478A:
      case 0x478B:
      case 0x478C:
      case 0x478D:
      case 0x478E:
      case 0x478F:
      case 0x4790:
      case 0x4791:
      case 0x4792:
      case 0x4793:
      case 0x4794:
      case 0x4795:
      case 0x4796:
      case 0x4797:
      case 0x4798:
      case 0x4799:
      case 0x479A:
      case 0x479B:
      case 0x479C:
      case 0x479D:
      case 0x479E:
      case 0x479F:
      case 0x47A0:
      case 0x47A1:
      case 0x47A2:
      case 0x47A3:
      case 0x47A4:
      case 0x47A5:
      case 0x47A6:
      case 0x47A7:
      case 0x47A8:
      case 0x47A9:
      case 0x47AA:
      case 0x47AB:
      case 0x47AC:
      case 0x47AD:
      case 0x47AE:
      case 0x47AF:
      case 0x47B0:
      case 0x47B1:
      case 0x47B2:
      case 0x47B3:
      case 0x47B4:
      case 0x47B5:
      case 0x47B6:
      case 0x47B7:
      case 0x47B8:
      case 0x47B9:
      case 0x47BA:
      case 0x47BB:
      case 0x47BC:
      case 0x47BD:
      case 0x47BE:
      case 0x47BF:
      case 0x47C0:
      case 0x47C1:
      case 0x47C2:
      case 0x47C3:
      case 0x47C4:
      case 0x47C5:
      case 0x47C6:
        sub_1CD437B48(a1, a2, a3, a4);
        break;
      case 0x22E4:
      case 0x22E5:
      case 0x22E6:
      case 0x22E7:
      case 0x22E8:
      case 0x22E9:
      case 0x22EA:
      case 0x22EB:
      case 0x22EC:
      case 0x22ED:
      case 0x22EE:
      case 0x22EF:
      case 0x22F0:
      case 0x22F1:
      case 0x22F2:
      case 0x22F3:
      case 0x22F4:
      case 0x22F5:
      case 0x22F6:
      case 0x22F7:
      case 0x22F8:
      case 0x22F9:
      case 0x22FA:
      case 0x22FB:
      case 0x22FC:
      case 0x22FD:
      case 0x22FE:
      case 0x22FF:
      case 0x2300:
      case 0x2301:
      case 0x2302:
      case 0x2303:
      case 0x2304:
      case 0x2305:
      case 0x2306:
      case 0x2307:
      case 0x2308:
      case 0x2309:
      case 0x230A:
      case 0x230B:
      case 0x230C:
      case 0x230D:
      case 0x230E:
      case 0x230F:
      case 0x2310:
      case 0x2311:
      case 0x2312:
      case 0x2313:
      case 0x2314:
      case 0x2315:
      case 0x2316:
      case 0x2317:
      case 0x2318:
      case 0x2319:
      case 0x47C7:
      case 0x47C8:
      case 0x47C9:
      case 0x47CA:
      case 0x47CB:
      case 0x47CC:
      case 0x47CD:
      case 0x47CE:
      case 0x47CF:
      case 0x47D0:
      case 0x47D1:
      case 0x47D2:
      case 0x47D3:
      case 0x47D4:
      case 0x47D5:
      case 0x47D6:
      case 0x47D7:
      case 0x47D8:
      case 0x47D9:
      case 0x47DA:
      case 0x47DB:
      case 0x47DC:
      case 0x47DD:
      case 0x47DE:
        sub_1CBD90C44(a1, a2, a3, a4);
        break;
      case 0x231A:
      case 0x231B:
      case 0x231C:
      case 0x231D:
      case 0x231E:
      case 0x231F:
      case 0x2320:
      case 0x2321:
      case 0x2322:
      case 0x2323:
      case 0x2324:
      case 0x2325:
      case 0x2326:
      case 0x2327:
      case 0x2328:
      case 0x2329:
      case 0x232A:
      case 0x232B:
      case 0x232C:
      case 0x232D:
      case 0x232E:
      case 0x232F:
      case 0x2330:
      case 0x2331:
      case 0x2332:
      case 0x2333:
      case 0x2334:
      case 0x47DF:
      case 0x47E0:
      case 0x47E1:
      case 0x47E2:
      case 0x47E3:
      case 0x47E4:
      case 0x47E5:
      case 0x47E6:
      case 0x47E7:
      case 0x47E8:
      case 0x47E9:
      case 0x47EA:
      case 0x47EB:
      case 0x47EC:
      case 0x47ED:
      case 0x47EE:
      case 0x47EF:
      case 0x47F0:
      case 0x47F1:
      case 0x47F2:
      case 0x47F3:
      case 0x47F4:
      case 0x47F5:
      case 0x47F6:
      case 0x47F7:
      case 0x47F8:
      case 0x47F9:
      case 0x47FA:
      case 0x47FB:
      case 0x47FC:
      case 0x47FD:
      case 0x47FE:
      case 0x47FF:
      case 0x4800:
      case 0x4801:
      case 0x4802:
      case 0x4803:
      case 0x4804:
      case 0x4805:
      case 0x4806:
      case 0x4807:
      case 0x4808:
      case 0x4809:
      case 0x480A:
      case 0x480B:
      case 0x480C:
      case 0x480D:
      case 0x480E:
        sub_1CBD90E48(a1, a2, a3, a4);
        break;
      case 0x2335:
      case 0x2336:
      case 0x2337:
      case 0x480F:
      case 0x4810:
      case 0x4811:
      case 0x4812:
      case 0x4813:
      case 0x4814:
      case 0x4815:
      case 0x4816:
      case 0x4817:
      case 0x4818:
      case 0x4819:
      case 0x481A:
      case 0x481B:
      case 0x481C:
      case 0x481D:
      case 0x481E:
      case 0x481F:
      case 0x4820:
      case 0x4821:
      case 0x4822:
      case 0x4823:
      case 0x4824:
      case 0x4825:
      case 0x4826:
        sub_1CBD9794C(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x2338:
      case 0x2339:
      case 0x233A:
      case 0x4828:
      case 0x4829:
      case 0x482A:
      case 0x482B:
      case 0x4830:
      case 0x4831:
      case 0x4832:
      case 0x4833:
        sub_1CBD97828(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x233B:
      case 0x233E:
      case 0x2341:
      case 0x2344:
      case 0x2347:
      case 0x234A:
      case 0x234D:
      case 0x2350:
      case 0x2353:
      case 0x2356:
      case 0x2359:
      case 0x235C:
      case 0x235F:
      case 0x2362:
      case 0x2365:
      case 0x2368:
      case 0x236B:
      case 0x236E:
      case 0x2371:
      case 0x2374:
      case 0x2377:
      case 0x237A:
      case 0x237D:
      case 0x2380:
      case 0x482C:
      case 0x482D:
      case 0x482E:
      case 0x482F:
        sub_1CBD89294((uint64_t)a1, a2, a3, a4);
        break;
      case 0x233C:
      case 0x233D:
      case 0x233F:
      case 0x2340:
      case 0x2342:
      case 0x2343:
      case 0x2345:
      case 0x2346:
      case 0x2348:
      case 0x2349:
      case 0x234B:
      case 0x234C:
      case 0x234E:
      case 0x234F:
      case 0x2351:
      case 0x2352:
      case 0x2354:
      case 0x2355:
      case 0x2357:
      case 0x2358:
      case 0x235A:
      case 0x235B:
      case 0x235D:
      case 0x235E:
      case 0x2360:
      case 0x2361:
      case 0x2363:
      case 0x2364:
      case 0x2366:
      case 0x2367:
      case 0x2369:
      case 0x236A:
      case 0x236C:
      case 0x236D:
      case 0x236F:
      case 0x2370:
      case 0x2372:
      case 0x2373:
      case 0x2375:
      case 0x2376:
      case 0x2378:
      case 0x2379:
      case 0x237B:
      case 0x237C:
      case 0x237E:
      case 0x237F:
      case 0x2381:
      case 0x2382:
      case 0x4834:
      case 0x4836:
        sub_1CD435B3C((uint64_t)a1, a2, a3, a4);
        break;
      case 0x2383:
      case 0x2384:
      case 0x2385:
      case 0x2386:
      case 0x2387:
      case 0x2388:
      case 0x2389:
      case 0x238A:
      case 0x238B:
      case 0x238C:
      case 0x238D:
      case 0x238E:
      case 0x238F:
      case 0x2390:
      case 0x2391:
      case 0x2392:
      case 0x2393:
      case 0x2394:
      case 0x2395:
      case 0x2396:
      case 0x2397:
      case 0x2398:
      case 0x2399:
      case 0x239A:
      case 0x4835:
      case 0x4837:
        sub_1CD436688((uint64_t)a1, a2, a3, a4);
        break;
      case 0x239B:
      case 0x239C:
      case 0x239D:
      case 0x239E:
      case 0x239F:
      case 0x23A0:
      case 0x23A1:
      case 0x23A2:
      case 0x23A3:
      case 0x23A4:
      case 0x23A5:
      case 0x23A6:
      case 0x23A7:
      case 0x23A8:
      case 0x23A9:
      case 0x23AA:
      case 0x23AB:
      case 0x23AC:
      case 0x23AD:
      case 0x23AE:
      case 0x23AF:
      case 0x23B0:
      case 0x23B1:
      case 0x23B2:
      case 0x23B3:
      case 0x23B4:
      case 0x23B5:
      case 0x23B6:
      case 0x23B7:
      case 0x23B8:
      case 0x23B9:
      case 0x23BA:
      case 0x23BB:
      case 0x23BC:
      case 0x23BD:
      case 0x23BE:
      case 0x23BF:
      case 0x23C0:
      case 0x23C1:
      case 0x23C2:
      case 0x23C3:
      case 0x23C4:
      case 0x23C5:
      case 0x23C6:
      case 0x23C7:
      case 0x23C8:
      case 0x23C9:
      case 0x23CA:
      case 0x4838:
        sub_1CBD8A6E4((uint64_t)a1, a2, a3, a4);
        break;
      case 0x23CB:
      case 0x23CC:
      case 0x23CD:
      case 0x23CE:
      case 0x23CF:
      case 0x23D0:
      case 0x23D1:
      case 0x23D2:
      case 0x23D3:
      case 0x23D4:
      case 0x23D5:
      case 0x23D6:
      case 0x23D7:
      case 0x23D8:
      case 0x23D9:
      case 0x23DA:
      case 0x23DB:
      case 0x23DC:
      case 0x23DD:
      case 0x23DE:
      case 0x23DF:
      case 0x23E0:
      case 0x23E1:
      case 0x23E2:
      case 0x4839:
        sub_1CBD89E44((uint64_t)a1, a2, a3, a4);
        break;
      case 0x23E4:
      case 0x23E5:
      case 0x23E6:
      case 0x23E7:
      case 0x23E8:
      case 0x23E9:
      case 0x23EA:
      case 0x23EB:
      case 0x23EC:
      case 0x23ED:
      case 0x23EE:
      case 0x23EF:
      case 0x483A:
      case 0x483B:
      case 0x483C:
      case 0x483D:
      case 0x483E:
      case 0x483F:
        sub_1CD442F4C(a1, a2, a3, (_OWORD *)a4);
        break;
      case 0x23F0:
      case 0x23F1:
      case 0x23F2:
      case 0x23F3:
      case 0x4840:
      case 0x4841:
      case 0x4842:
      case 0x4843:
      case 0x4844:
      case 0x4845:
      case 0x4846:
      case 0x4847:
      case 0x4848:
      case 0x4849:
      case 0x484A:
      case 0x484B:
      case 0x484C:
      case 0x484D:
      case 0x484E:
      case 0x484F:
        sub_1CBD96280(a1, (unsigned int *)a2, a3, a4);
        break;
      case 0x23F4:
      case 0x4850:
      case 0x4851:
      case 0x4852:
      case 0x4853:
      case 0x4854:
      case 0x4855:
      case 0x4856:
      case 0x4857:
      case 0x4858:
      case 0x4859:
      case 0x485A:
      case 0x485B:
      case 0x485C:
      case 0x485D:
      case 0x485E:
      case 0x485F:
      case 0x4860:
      case 0x4861:
        sub_1CD44169C(a1, a2, a3, a4);
        break;
      case 0x23F5:
      case 0x4862:
      case 0x4863:
      case 0x4864:
      case 0x4865:
      case 0x4866:
      case 0x4867:
      case 0x4868:
      case 0x4869:
      case 0x486A:
      case 0x4888:
        sub_1CD4417B8(a1, a2, a3, a4);
        break;
      case 0x23F6:
      case 0x23F7:
      case 0x23F8:
      case 0x486B:
      case 0x486C:
      case 0x486D:
      case 0x486E:
      case 0x486F:
      case 0x4870:
      case 0x4871:
      case 0x4872:
      case 0x4873:
      case 0x4874:
      case 0x4875:
      case 0x4876:
      case 0x4877:
      case 0x4878:
      case 0x4879:
      case 0x487A:
      case 0x487B:
      case 0x487C:
        sub_1CBD8BC30((int *)a1, a2, a3, a4);
        break;
      case 0x23F9:
      case 0x23FA:
      case 0x23FB:
      case 0x487D:
      case 0x487E:
      case 0x487F:
      case 0x4880:
      case 0x4881:
      case 0x4882:
      case 0x4883:
      case 0x4884:
      case 0x4885:
        sub_1CBD8B964(a1, a2, a3, a4);
        break;
      case 0x23FC:
      case 0x23FD:
      case 0x23FE:
      case 0x23FF:
      case 0x2400:
      case 0x2401:
      case 0x2402:
      case 0x2403:
      case 0x2404:
      case 0x2405:
      case 0x2406:
      case 0x2407:
      case 0x2408:
      case 0x2409:
      case 0x240A:
      case 0x240B:
      case 0x4886:
      case 0x4887:
        sub_1CD442B94(a1, a2, a3, a4);
        break;
      case 0x240C:
      case 0x240D:
      case 0x240E:
      case 0x240F:
      case 0x2410:
      case 0x2411:
      case 0x2412:
      case 0x2413:
      case 0x2414:
      case 0x2415:
      case 0x2416:
      case 0x2417:
      case 0x2418:
      case 0x2419:
      case 0x241A:
      case 0x241B:
      case 0x241C:
      case 0x241D:
        sub_1CBD87AF4(a1, a2, a3, a4);
        break;
      case 0x241E:
      case 0x241F:
      case 0x2420:
      case 0x2421:
      case 0x2422:
      case 0x2423:
      case 0x2424:
      case 0x2425:
      case 0x2426:
        sub_1CD43599C(a1, a2, a3, a4);
        break;
      case 0x2427:
      case 0x2428:
      case 0x2429:
      case 0x242A:
      case 0x242B:
      case 0x242C:
      case 0x242D:
      case 0x242E:
      case 0x242F:
      case 0x2430:
      case 0x2431:
      case 0x2432:
      case 0x2433:
      case 0x2434:
      case 0x2435:
      case 0x2436:
      case 0x2437:
      case 0x2438:
        sub_1CBD87C9C(a1, a2, a3, a4);
        break;
      case 0x2439:
      case 0x243A:
      case 0x243B:
      case 0x243C:
      case 0x243D:
      case 0x243E:
      case 0x243F:
      case 0x2440:
      case 0x2441:
        sub_1CBD88340(a1, a2, a3, a4);
        break;
      case 0x2442:
      case 0x2443:
        sub_1CD441864(a1, a2, a3, a4);
        break;
      default:
        sub_1CBD8BB1C(a1, a2, a3, a4);
        break;
    }
  }
  return v5 != 0;
}

BOOL sub_1CBD85228(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (byte_1EBCC2840) {
    return 1;
  }
  if (!atomic_load_explicit(&qword_1EBCC27A8, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EBCC27A8, (void *(*)(void))sub_1CBD8531C, (void (*)(void *))sub_1CD433854);
  }
  if (!*(unsigned char *)qword_1EBCC27A8) {
    return 1;
  }
  uint64_t v11 = 0;
  long long v10 = 0u;
  uint64_t v8 = sub_1CBE5ECA4(a2);
  ((void (*)(uint64_t, unsigned char *))v8)(a3, v9);
  BOOL result = sub_1CBE57E7C();
  if (!result)
  {
    if (a4) {
      llvm::report_fatal_error((llvm *)"Invalid instruction specification (validation failed.)", (const llvm::Twine *)1);
    }
  }
  return result;
}

void sub_1CBD8531C()
{
}

uint64_t sub_1CBD85368(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5)
      {
        uint64_t v9 = *(unsigned int *)(a1 + 8);
        memmove(*(void **)a1, *(const void **)a2, 16 * v5);
        uint64_t v6 = v9;
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      if (v6 != v7) {
        memcpy((void *)(*(void *)a1 + 16 * v6), (const void *)(*(void *)a2 + 16 * v6), *(void *)a2 + 16 * v7 - (*(void *)a2 + 16 * v6));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1CBD85448()
{
  char v2 = 0;
  unsigned int v3 = &v2;
  *(void *)&long long v1 = "Disable InstrSpec validation (AGX3). Can speed up compilation time.";
  *((void *)&v1 + 1) = 67;
  sub_1CD433870((uint64_t)&unk_1EBCC27C0, "disable-instrspec-validation", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC27C0, &dword_1CB82C000);
}

uint64_t sub_1CBD854C8(int a1)
{
  return dword_1CDF51F78[a1];
}

uint64_t sub_1CBD854D8(int a1)
{
  return dword_1CDF522F4[a1];
}

uint64_t sub_1CBD854E8(int a1)
{
  return dword_1CDF52FA4[a1];
}

uint64_t sub_1CBD854F8(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  do
  {
    v4[v1] = v1;
    ++v1;
  }
  while (v1 != 6);
  sub_1CBD857E0((uint64_t)v5, a1);
  char v2 = (unsigned int *)sub_1CBD856C8((uint64_t)v4, (uint64_t)v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  return *v2;
}

uint64_t sub_1CBD855E4(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F25FDD00;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = sub_1CBD854F8((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

uint64_t sub_1CBD856C8(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  sub_1CBD857E0((uint64_t)v7, a2);
  for (uint64_t i = 0; i != 24; i += 4)
  {
    int v6 = *(_DWORD *)(a1 + i);
    if (!v8) {
      sub_1CB920400();
    }
    if ((*(uint64_t (**)(void *, int *))(*v8 + 48))(v8, &v6)) {
      break;
    }
  }
  uint64_t v4 = a1 + i;
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  return v4;
}

uint64_t sub_1CBD857E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1CBD8587C()
{
}

void *sub_1CBD85890(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F25FDCB8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBD858D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FDCB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBD85904(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  switch(*a2)
  {
    case 1:
      uint64_t v3 = v2 + 299;
      break;
    case 2:
      uint64_t v3 = v2 + 300;
      break;
    case 3:
      uint64_t v3 = v2 + 301;
      break;
    case 4:
      uint64_t v3 = v2 + 303;
      break;
    case 5:
      uint64_t v3 = v2 + 305;
      break;
    default:
      uint64_t v3 = v2 + 298;
      break;
  }
  return *v3;
}

void sub_1CBD8597C()
{
}

void *sub_1CBD85990(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F25FDD00;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBD859D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FDD00;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBD85A04(uint64_t a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = qword_1CDF53320[*a2];
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v9 = v4;
  do
  {
    *(uint64_t *)((char *)&v9 + v2) &= *(void *)(v3 + 192 + v2);
    v2 += 8;
  }
  while (v2 != 40);
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = *(uint64_t *)((char *)&v9 + v5);
    if (v6) {
      break;
    }
    BOOL v7 = v5 == 32;
    v5 += 8;
  }
  while (!v7);
  return v6 != 0;
}

int8x8_t sub_1CBD85A80(_DWORD *a1, uint64_t a2, unsigned int a3, BOOL *a4, int8x8_t *a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(*(void *)(a2 + 16) + 16 * a3 + 8);
  *a4 = (v6 & 0x40) != 0;
  uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(v6);
  *a5 = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_1CDF53570), (int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_1CDF53560)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_1CDF53590), (int32x4_t)vshlq_u64(v7, (uint64x2_t)xmmword_1CDF53580)))), (int8x8_t)0x101010101010101);
  uint64_t v8 = HIDWORD(v6) & 3;
  if (*a1 < 4u)
  {
    *(_DWORD *)a6 = v8;
    int8x8_t result = vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v7, (uint64x2_t)xmmword_1CDF535A0)), (int8x8_t)0x300000003);
    *(int8x8_t *)(a6 + 4) = result;
  }
  else
  {
    *(_DWORD *)(a6 + 12) = v8;
    int8x8_t result = vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v7, (uint64x2_t)xmmword_1CDF535A0)), (int8x8_t)0x300000003);
    *(int8x8_t *)(a6 + 16) = result;
    *(_DWORD *)(a6 + 24) = (v6 >> 46) & 3;
  }
  return result;
}

double sub_1CBD85B44(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 34;
  unsigned int v7 = sub_1CBDA6464(*a2, 0x2Eu);
  *(_DWORD *)long long v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v7, v13, (int8x8_t *)&v10 + 1, (uint64_t)&v11);
  if (*a1 >= 4u) {
    *(void *)&long long v10 = 0x2700000003;
  }
  long long v8 = v11;
  *(_OWORD *)a4 = v10;
  *(_OWORD *)(a4 + 16) = v8;
  double result = *(double *)&v12;
  *(_OWORD *)(a4 + 32) = v12;
  *(_DWORD *)(a4 + 48) = *(_DWORD *)v13;
  return result;
}

double sub_1CBD85BF0(_DWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 89;
  int v7 = *(_DWORD *)a2;
  int v8 = (unsigned __int16)*(_DWORD *)a2;
  unsigned int v9 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x60u);
  unsigned int v11 = sub_1CBDA6464(v8, 0x61u);
  *(_DWORD *)int v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v16 = 0u;
  sub_1CBD85A80(a1, a2, v9, v20, (int8x8_t *)((char *)&v17[1] + 4), (uint64_t)&v18);
  uint64_t v12 = *(void *)(a2 + 16);
  WORD6(v17[1]) = *(void *)(v12 + 16 * v10 + 8);
  HIWORD(v17[1]) = *(_WORD *)(v12 + 16 * v11 + 8) & 0xFFF;
  uint64_t v13 = sub_1CBE52E8C(v7);
  if ((v13 & 0xFF00000000) == 0) {
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
  }
  if (v13 != 65)
  {
    *((void *)&v16 + 1) = 0x200000007;
    LODWORD(v16) = 26;
  }
  if (*a1 >= 4u) {
    *(void *)((char *)v17 + 12) = 0x5A00000003;
  }
  long long v14 = v18;
  *(_OWORD *)(a4 + 32) = v17[1];
  *(_OWORD *)(a4 + 48) = v14;
  *(_OWORD *)(a4 + 64) = v19;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)v20;
  double result = *(double *)&v16;
  *(_OWORD *)a4 = v16;
  *(_OWORD *)(a4 + 16) = v17[0];
  return result;
}

double sub_1CBD85D40(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 89;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x58u);
  *(_DWORD *)long long v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  memset(v16, 0, sizeof(v16));
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)v16);
  uint64_t v11 = *((void *)a2 + 2);
  LOBYTE(v16[1]) = (*(unsigned char *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v19, (int8x8_t *)((char *)&v16[2] + 4), (uint64_t)&v17);
  WORD6(v16[2]) = *(void *)(v11 + 16 * v10 + 8);
  uint64_t v12 = sub_1CBE52E8C(*(_DWORD *)a2);
  if ((v12 & 0xFF00000000) == 0) {
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
  }
  if (v12 != 65)
  {
    *((void *)&v16[0] + 1) = 0x200000007;
    LODWORD(v16[0]) = 26;
  }
  if (*a1 >= 4u) {
    *(void *)((char *)&v16[1] + 12) = 0x5A00000003;
  }
  long long v13 = v17;
  *(_OWORD *)(a4 + 32) = v16[2];
  *(_OWORD *)(a4 + 48) = v13;
  *(_OWORD *)(a4 + 64) = v18;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)v19;
  double result = *(double *)v16;
  long long v15 = v16[1];
  *(_OWORD *)a4 = v16[0];
  *(_OWORD *)(a4 + 16) = v15;
  return result;
}

uint64_t sub_1CBD85EB8(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(a2 + 16);
  unsigned int v9 = (unsigned __int8 *)(v8 + 16 * a3);
  *(_DWORD *)(a4 + 24) = 0;
  int v10 = *v9;
  if (v10 == 1)
  {
    *(_DWORD *)(a4 + 8) = sub_1CBDA014C(*(void **)(result + 24), (unsigned __int8 *)(v8 + 16 * a3));
    *(_DWORD *)(a4 + 12) = ((uint64_t (*)(uint64_t, unsigned __int8 *))loc_1CBD9FDCC)(v7, v9);
    double result = sub_1CBD9FA40(*(void *)(v7 + 24), v9, *(_DWORD *)(a4 + 8));
    *(void *)a4 = result;
    unsigned int v11 = a3 + 1;
LABEL_44:
    uint64_t v32 = *(void *)(a2 + 16) + 16 * v11;
LABEL_45:
    uint64_t v23 = *(void *)(v32 + 8);
    goto LABEL_46;
  }
  if (v10 != 5)
  {
    if (*v9 == 2)
    {
      *(_DWORD *)(a4 + 8) = 4;
      *(_DWORD *)(a4 + 12) = sub_1CBD9FCC8((unsigned int *)a2);
      int v16 = *(_DWORD *)(a4 + 8);
LABEL_43:
      double result = sub_1CBD9FA40(*(void *)(v7 + 24), v9, v16);
      *(void *)a4 = result;
      unsigned int v11 = a3 + 2;
      goto LABEL_44;
    }
    goto LABEL_15;
  }
  uint64_t v12 = *(void *)(v8 + 16 * a3 + 8);
  if (*(unsigned char *)v12 != 4)
  {
LABEL_15:
    uint64_t v17 = 0;
    goto LABEL_16;
  }
  if (*v9 == 2 || (*(_DWORD *)(v12 + 16) - 9) < 2)
  {
    *(_DWORD *)(a4 + 8) = 4;
    int v14 = *(_DWORD *)(v12 + 32);
    if (v14 == 2)
    {
      int v15 = 1;
    }
    else if (v14 == 4)
    {
      int v15 = 2;
    }
    else
    {
      int v15 = 3;
    }
    *(_DWORD *)(a4 + 12) = v15;
    int v16 = 4;
    goto LABEL_43;
  }
  uint64_t v17 = v12 - 8;
LABEL_16:
  if (!*(_DWORD *)(v17 + 24))
  {
    int v29 = *(_DWORD *)(v17 + 40);
    if (v29 == 4) {
      int v30 = 2;
    }
    else {
      int v30 = 3;
    }
    if (v29 == 2) {
      int v31 = 1;
    }
    else {
      int v31 = v30;
    }
    *(_DWORD *)(a4 + 8) = 3;
    *(_DWORD *)(a4 + 12) = v31;
    *(_WORD *)a4 = *(_WORD *)(*(void *)(v17 + 32) + 16) & 0x1FF;
    uint64_t v32 = v8 + 16 * (a3 + 1);
    goto LABEL_45;
  }
  uint64_t v18 = v8 + 16 * a3;
  uint64_t v19 = *(void *)(v18 + 8);
  if (v19) {
    uint64_t v20 = v19 - 8;
  }
  else {
    uint64_t v20 = 0;
  }
  __int16 v21 = *(_WORD *)(*(void *)(v20 + 32) + 16) & 0x1FFF;
  if (a3) {
    int v22 = 1;
  }
  else {
    int v22 = 2;
  }
  uint64_t v23 = *(void *)(v8 + 16 * (v22 + a3) + 8);
  *(_DWORD *)(a4 + 8) = 5;
  *(_WORD *)a4 = v21;
  uint64_t v24 = *(void *)(v18 + 8);
  if (v24) {
    uint64_t v25 = v24 - 8;
  }
  else {
    uint64_t v25 = 0;
  }
  int v26 = *(_DWORD *)(v25 + 40);
  if (v26 == 4) {
    int v27 = 2;
  }
  else {
    int v27 = 3;
  }
  if (v26 == 2) {
    int v28 = 1;
  }
  else {
    int v28 = v27;
  }
  *(_DWORD *)(a4 + 12) = v28;
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(v25 + 24) - 4;
LABEL_46:
  *(_DWORD *)(a4 + 20) = (v23 >> 20) & 0xF;
  return result;
}

double sub_1CBD860E4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 <= 3u)
  {
    *(void *)&double result = sub_1CBD861C4(a1, a2, a3, a4).n128_u64[0];
  }
  else if (sub_1CBD9F7E4((uint64_t)a2))
  {
    if (*a1 >= 4u) {
      sub_1CBD9F7E4((uint64_t)a2);
    }
    *(void *)&double result = sub_1CBD86490(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(void *)&double result = sub_1CBD86310(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1CBD861C4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 76;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  long long v20 = 0u;
  memset(v21, 0, 60);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 8, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 8);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD8666C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v21[1] + 1);
  LOBYTE(v21[1]) = 0;
  long long v12 = v21[2];
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v21[2] + 12);
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD86310(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 78;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  __n128 v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 12, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD8666C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v22 + 2);
  BYTE4(v22) = 0;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 80;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD86490(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 79;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 81;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t sub_1CBD86608(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result = sub_1CBD88900(a1, (unsigned __int16 *)a2, a3, a4);
  uint64_t v8 = *(void *)(a2 + 16);
  *(unsigned char *)(a4 + 25) = *(unsigned char *)(v8 + 16 * a3) != 2 && (*(unsigned char *)(v8 + 16 * (a3 + 1) + 8) & 8) != 0;
  return result;
}

uint64_t sub_1CBD8666C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result = sub_1CBD86608(a1, a2, a3, a4);
  uint64_t v9 = *(void *)(a2 + 16);
  if (*(unsigned char *)(v9 + 16 * a3) == 2)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    unint64_t v10 = (*(void *)(v9 + 16 * (a3 + 1) + 8) >> 8) & 7;
    if (v10 >= 5) {
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
    }
  }
  *a5 = v10;
  return result;
}

double sub_1CBD866E8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 <= 3u)
  {
    *(void *)&double result = sub_1CBD867C8(a1, a2, a3, a4).n128_u64[0];
  }
  else if (sub_1CBD9F7E4((uint64_t)a2))
  {
    if (*a1 >= 4u) {
      sub_1CBD9F7E4((uint64_t)a2);
    }
    *(void *)&double result = sub_1CBD86A94(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(void *)&double result = sub_1CBD86914(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1CBD867C8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 94;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  long long v20 = 0u;
  memset(v21, 0, 60);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 8, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 8);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD8666C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v21[1] + 1);
  LOBYTE(v21[1]) = 0;
  long long v12 = v21[2];
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v21[2] + 12);
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD86914(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 101;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  __n128 v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 12, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD8666C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v22 + 2);
  BYTE4(v22) = 0;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 100;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD86A94(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 102;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 101;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CBD86C0C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 <= 3u)
  {
    return sub_1CBD86CEC(a1, a2, a3, a4);
  }
  else if (sub_1CBD9F7E4((uint64_t)a2))
  {
    if (*a1 >= 4u) {
      sub_1CBD9F7E4((uint64_t)a2);
    }
    *(void *)&double result = sub_1CBD87028(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(void *)&double result = sub_1CBD86E74(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

double sub_1CBD86CEC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 81;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v18 = sub_1CBDA6464(v7, 0x14u);
  *(_DWORD *)int v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v29, (int8x8_t *)((char *)&v26 + 4), (uint64_t)&v27);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v20 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v22 + 8);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  BYTE12(v26) = 0;
  long long v12 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v29;
  long long v13 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v13;
  long long v14 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v14;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  double result = *(double *)&v25;
  long long v17 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v17;
  return result;
}

__n128 sub_1CBD86E74(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 82;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  __n128 v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)&v25 + 1, (uint64_t)&v26 + 4);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v23 + 4);
  LOBYTE(v26) = 0;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3) {
      LODWORD(v25) = dword_1CDF53620[DWORD2(v18) - 2];
    }
    DWORD1(v25) = 84;
  }
  long long v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(void *)(a4 + 160) = v28;
  long long v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  long long v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  long long v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  __n128 result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CBD87028(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 83;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v17 = sub_1CBDA6464(v7, 0x14u);
  *(_DWORD *)uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  __n128 v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v28, (int8x8_t *)&v25 + 1, (uint64_t)&v26);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v17, (uint64_t)&v23 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3) {
      LODWORD(v25) = dword_1CDF53620[DWORD2(v18) - 2];
    }
    DWORD1(v25) = 85;
  }
  long long v12 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v28;
  long long v13 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v13;
  long long v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  long long v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  __n128 result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1CBD871E0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  if (*a1 <= 3u)
  {
    return sub_1CBD872C0(a1, a2, a3, a4);
  }
  else if (sub_1CBD9F7E4((uint64_t)a2))
  {
    if (*a1 >= 4u) {
      sub_1CBD9F7E4((uint64_t)a2);
    }
    *(void *)&double result = sub_1CD4346F4(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(void *)&double result = sub_1CBD87448(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

double sub_1CBD872C0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 86;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v18 = sub_1CBDA6464(v7, 0x14u);
  *(_DWORD *)int v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v29, (int8x8_t *)((char *)&v26 + 4), (uint64_t)&v27);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v20 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v22 + 8);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  BYTE12(v26) = 0;
  long long v12 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v29;
  long long v13 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v13;
  long long v14 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v14;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  double result = *(double *)&v25;
  long long v17 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v17;
  return result;
}

__n128 sub_1CBD87448(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 87;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x14u);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  __n128 v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)&v25 + 1, (uint64_t)&v26 + 4);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v23 + 4);
  LOBYTE(v26) = 0;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3) {
      LODWORD(v25) = dword_1CDF53620[DWORD2(v18) - 2];
    }
    DWORD1(v25) = 88;
  }
  long long v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(void *)(a4 + 160) = v28;
  long long v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  long long v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  long long v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  __n128 result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CBD875FC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 5;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 10;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD877A0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 6;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 11;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD87948(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 11;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 16;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD87AF4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 13;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 18;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD87C9C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 14;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 19;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD87E48(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 5;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 10;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD87FF4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 6;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 11;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD88198(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 11;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 16;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1CBD88340(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 14;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  __n128 v17 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1) {
    *(void *)((char *)&v18 + 4) = 0x200000001;
  }
  sub_1CBD88E08((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (v20 == 1) {
    *(void *)&long long v20 = 0x200000001;
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      DWORD1(v21) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD2(v21) = 19;
  }
  long long v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(void *)(a4 + 128) = v24;
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  __n128 result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1CBD884E8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 106;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x24u);
  *(_DWORD *)long long v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  uint64_t v11 = *((void *)a2 + 2);
  LOBYTE(v17) = (*(unsigned char *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v21, (int8x8_t *)&v18 + 1, (uint64_t)&v19);
  if (*(unsigned char *)(v11 + 16 * v10) == 5) {
    int v12 = 0;
  }
  else {
    int v12 = *(_DWORD *)(v11 + 16 * v10 + 8);
  }
  HIDWORD(v17) = v12;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      LODWORD(v18) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD1(v18) = 105;
  }
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  *(_OWORD *)(a4 + 64) = v20;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)v21;
  double result = *(double *)&v16;
  long long v15 = v17;
  *(_OWORD *)a4 = v16;
  *(_OWORD *)(a4 + 16) = v15;
  return result;
}

double sub_1CBD88658(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 106;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x24u);
  *(_DWORD *)long long v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  uint64_t v11 = *((void *)a2 + 2);
  LOBYTE(v17) = (*(unsigned char *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, v21, (int8x8_t *)&v18 + 1, (uint64_t)&v19);
  if (*(unsigned char *)(v11 + 16 * v10) == 5) {
    int v12 = 0;
  }
  else {
    int v12 = *(_DWORD *)(v11 + 16 * v10 + 8);
  }
  HIDWORD(v17) = v12;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3) {
      LODWORD(v18) = dword_1CDF53620[DWORD2(v16) - 2];
    }
    DWORD1(v18) = 105;
  }
  long long v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  *(_OWORD *)(a4 + 64) = v20;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)v21;
  double result = *(double *)&v16;
  long long v15 = v17;
  *(_OWORD *)a4 = v16;
  *(_OWORD *)(a4 + 16) = v15;
  return result;
}

__n128 sub_1CBD887C4(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 146;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  long long v20 = 0u;
  long long v21 = 0u;
  __n128 v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  LOBYTE(v16) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v21 + 12, (int8x8_t *)&v19, (uint64_t)&v19 + 12);
  sub_1CBD88900((uint64_t)a1, a2, v10, (uint64_t)&v16 + 12);
  unsigned int v11 = *a1;
  if (*a1)
  {
    BYTE8(v19) = 1;
    if (v11 >= 4) {
      v18.n128_u64[1] = 0x9000000004;
    }
  }
  long long v12 = v20;
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v12;
  *(_OWORD *)(a4 + 96) = v21;
  long long v13 = v16;
  *(_OWORD *)a4 = v15;
  *(_OWORD *)(a4 + 16) = v13;
  __n128 result = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

uint64_t sub_1CBD88900(uint64_t result, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = a3;
  uint64_t v7 = *((void *)a2 + 2);
  unsigned int v8 = (unsigned __int8 *)(v7 + 16 * a3);
  if (*v8 == 5)
  {
    uint64_t v9 = *(void *)(v7 + 16 * a3 + 8);
    if (v9) {
      uint64_t v10 = v9 - 8;
    }
    else {
      uint64_t v10 = 0;
    }
    if (!*(_DWORD *)(v10 + 24))
    {
      int v11 = *(_DWORD *)(v10 + 40);
      if (v11 == 4) {
        int v12 = 2;
      }
      else {
        int v12 = 3;
      }
      if (v11 == 2) {
        int v13 = 1;
      }
      else {
        int v13 = v12;
      }
      *(_DWORD *)(a4 + 8) = 3;
      *(_DWORD *)(a4 + 12) = v13;
      *(_WORD *)a4 = *(_WORD *)(*(void *)(v10 + 32) + 16) & 0x1FF;
    }
    unsigned int v14 = *(_DWORD *)(v7 + 16 * (a3 + 1) + 8);
    goto LABEL_28;
  }
  uint64_t v16 = result;
  if (word_1CDF77000[dword_1CDF6DEF0[*a2] + (unsigned __int16)a3] == 62)
  {
    *(_DWORD *)(a4 + 8) = 4;
    long long v17 = (_DWORD *)(a4 + 8);
LABEL_19:
    int v18 = sub_1CBD9FCC8((unsigned int *)a2);
    goto LABEL_21;
  }
  __n128 result = sub_1CBDA014C(*(void **)(result + 24), (unsigned __int8 *)(v7 + 16 * a3));
  *(_DWORD *)(a4 + 8) = result;
  long long v17 = (_DWORD *)(a4 + 8);
  if (result == 4) {
    goto LABEL_19;
  }
  if (result == 1)
  {
    *(_WORD *)a4 = *(void *)(v7 + 16 * v6 + 8);
    *(_DWORD *)(a4 + 12) = 1;
    goto LABEL_22;
  }
  int v18 = ((uint64_t (*)(uint64_t, unsigned __int8 *))loc_1CBD9FDCC)(v16, v8);
LABEL_21:
  *(_DWORD *)(a4 + 12) = v18;
  __n128 result = sub_1CBD9FA40(*(void *)(v16 + 24), v8, *(_DWORD *)(a4 + 8));
  *(void *)a4 = result;
LABEL_22:
  if (*v17 == 4)
  {
    unsigned int v14 = *(_DWORD *)(*((void *)a2 + 2) + 16 * (a3 + 2) + 8);
    *(unsigned char *)(a4 + 16) = 0;
LABEL_27:
    *(unsigned char *)(a4 + 24) = (v14 & 0x10) != 0;
LABEL_28:
    int v19 = (v14 >> 20) & 0xF;
    goto LABEL_29;
  }
  if (*v17 != 1)
  {
    unsigned int v14 = *(_DWORD *)(*((void *)a2 + 2) + 16 * (a3 + 1) + 8);
    *(unsigned char *)(a4 + 16) = (v14 & 0x20) != 0;
    goto LABEL_27;
  }
  int v19 = 0;
  *(unsigned char *)(a4 + 16) = 0;
  *(unsigned char *)(a4 + 24) = 0;
LABEL_29:
  *(_DWORD *)(a4 + 20) = v19;
  return result;
}

__n128 sub_1CBD88AC4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 105;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x57u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v28 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v27 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x55u);
  uint64_t v41 = 0;
  unsigned int v29 = sub_1CBDA6464(v7, 0x56u);
  long long v39 = 0u;
  long long v40 = 0u;
  __n128 v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  int v12 = (unsigned __int8 *)(*((void *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1CBD9F8B0((unsigned int *)a2, v8, *(void **)(a1 + 16));
  *(void *)&long long v30 = sub_1CBD9FA40(*(void *)(a1 + 24), v12, 2);
  unsigned int v13 = v8 + 1;
  uint64_t v14 = *((void *)a2 + 2);
  *(void *)((char *)&v31 + 4) = (*(_DWORD *)(v14 + 16 * v13 + 8) >> 20) & 0xF;
  sub_1CBD88D90((_DWORD *)a1, (uint64_t)a2, v9, &v39, (BOOL *)&v31, (BOOL *)&v41 + 4, (int8x8_t *)((char *)&v37.n128_f64[1] + 4), (uint64_t)&v39 + 4);
  uint64_t v15 = *(void *)(v14 + 16 * v10 + 8);
  BYTE4(v38) = v15 >> 4;
  BYTE5(v33) = (v15 & 0x800) == 0;
  sub_1CBD88E08(a1, a2, v28, (uint64_t)&v33 + 8);
  sub_1CBD88900(a1, a2, v27, (uint64_t)&v31 + 12);
  uint64_t v16 = *((void *)a2 + 2);
  if (*(unsigned char *)(v16 + 16 * v11) == 5) {
    __int16 v17 = 0;
  }
  else {
    __int16 v17 = *(_WORD *)(v16 + 16 * v11 + 8);
  }
  WORD6(v38) = v17;
  uint64_t v18 = *(void *)(v16 + 16 * v29 + 8);
  if (v18 == 1)
  {
    int v19 = 0;
    goto LABEL_5;
  }
  if (v18 > 7)
  {
    if (v18 == 16)
    {
      int v19 = 4;
      goto LABEL_5;
    }
    if (v18 == 8)
    {
      int v19 = 3;
      goto LABEL_5;
    }
LABEL_18:
    llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  if (v18 == 4)
  {
    int v19 = 2;
    goto LABEL_5;
  }
  if (v18 != 2) {
    goto LABEL_18;
  }
  int v19 = 1;
LABEL_5:
  unsigned int v20 = 0;
  unsigned int v21 = *(_DWORD *)a1;
  long long v36 = 0uLL;
  *((void *)&v35 + 1) = 0;
  DWORD2(v38) = v19;
  v37.n128_u32[0] = 0;
  if (v21 >= 4)
  {
    WORD4(v35) = 15;
    *(unint64_t *)((char *)v37.n128_u64 + 4) = 0x6800000000;
    unsigned int v20 = 1;
  }
  *(void *)&long long v36 = v20 | 0x100000000;
  BYTE4(v35) = 0;
  long long v22 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v22;
  *(_OWORD *)(a4 + 160) = v40;
  *(void *)(a4 + 176) = v41;
  long long v23 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v23;
  long long v24 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v24;
  long long v25 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v25;
  __n128 result = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

void sub_1CBD88D90(_DWORD *a1, uint64_t a2, unsigned int a3, _DWORD *a4, BOOL *a5, BOOL *a6, int8x8_t *a7, uint64_t a8)
{
  uint64_t v10 = a3;
  if (*a1 >= 4u) {
    *a5 = (*(unsigned char *)(*(void *)(a2 + 16) + 16 * a3 + 8) & 0x20) != 0;
  }
  sub_1CBD85A80(a1, a2, a3, a6, a7, a8);
  *a4 = (*(void *)(*(void *)(a2 + 16) + 16 * v10 + 8) >> 42) & 7;
}

uint64_t sub_1CBD88E08(uint64_t result, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = a3;
  uint64_t v7 = *((void *)a2 + 2);
  unsigned int v8 = (unsigned __int8 *)(v7 + 16 * a3);
  if (*v8 == 5)
  {
    uint64_t v9 = *(void *)(v7 + 16 * a3 + 8);
    if (v9) {
      uint64_t v10 = v9 - 8;
    }
    else {
      uint64_t v10 = 0;
    }
    if (!*(_DWORD *)(v10 + 24))
    {
      int v11 = *(_DWORD *)(v10 + 40);
      if (v11 == 4) {
        int v12 = 2;
      }
      else {
        int v12 = 3;
      }
      if (v11 == 2) {
        int v13 = 1;
      }
      else {
        int v13 = v12;
      }
      *(_DWORD *)(a4 + 8) = 3;
      *(_DWORD *)(a4 + 12) = v13;
      *(_WORD *)a4 = *(_WORD *)(*(void *)(v10 + 32) + 16) & 0x1FF;
    }
    *(_DWORD *)(a4 + 20) = (*(_DWORD *)(v7 + 16 * (a3 + 1) + 8) >> 20) & 0xF;
    return result;
  }
  uint64_t v15 = result;
  if (word_1CDF77000[dword_1CDF6DEF0[*a2] + (unsigned __int16)a3] == 62)
  {
    *(_DWORD *)(a4 + 8) = 4;
LABEL_19:
    int v17 = sub_1CBD9FCC8((unsigned int *)a2);
LABEL_21:
    *(_DWORD *)(a4 + 12) = v17;
    *(void *)a4 = sub_1CBD9FA40(*(void *)(v15 + 24), v8, *(_DWORD *)(a4 + 8));
    goto LABEL_22;
  }
  int v16 = sub_1CBDA014C(*(void **)(result + 24), (unsigned __int8 *)(v7 + 16 * a3));
  *(_DWORD *)(a4 + 8) = v16;
  if (v16 == 4) {
    goto LABEL_19;
  }
  if (v16 != 1)
  {
    int v17 = ((uint64_t (*)(uint64_t, unsigned __int8 *))loc_1CBD9FDCC)(v15, v8);
    goto LABEL_21;
  }
  *(_WORD *)a4 = *(void *)(v7 + 16 * v6 + 8);
  *(_DWORD *)(a4 + 12) = 1;
LABEL_22:

  return sub_1CBDA00E4((uint64_t)a2, (uint64_t)v8, a3, a4);
}

double sub_1CBD88F9C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 105;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x57u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v26 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v25 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x55u);
  unsigned int v27 = sub_1CBDA6464(v7, 0x56u);
  unsigned int v28 = sub_1CBDA6464(v7, 0x6Fu);
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  int v12 = (unsigned __int8 *)(*((void *)a2 + 2) + 16 * v8);
  DWORD2(v29) = 2;
  HIDWORD(v29) = sub_1CBD9F8B0((unsigned int *)a2, v8, *(void **)(a1 + 16));
  *(void *)&long long v29 = sub_1CBD9FA40(*(void *)(a1 + 24), v12, 2);
  uint64_t v13 = *((void *)a2 + 2);
  *(void *)((char *)&v30 + 4) = (*(_DWORD *)(v13 + 16 * (v8 + 1) + 8) >> 20) & 0xFLL;
  sub_1CBD88D90((_DWORD *)a1, (uint64_t)a2, v9, &v38, (BOOL *)&v30, (BOOL *)&v40 + 4, (int8x8_t *)((char *)&v36 + 12), (uint64_t)&v38 + 4);
  uint64_t v14 = *(void *)(v13 + 16 * v10 + 8);
  BYTE4(v37) = v14 >> 4;
  BYTE5(v32) = (v14 & 0x800) == 0;
  sub_1CBD88E08(a1, a2, v26, (uint64_t)&v32 + 8);
  sub_1CBD88900(a1, a2, v25, (uint64_t)&v30 + 12);
  uint64_t v15 = *((void *)a2 + 2);
  if (*(unsigned char *)(v15 + 16 * v11) == 5) {
    __int16 v16 = 0;
  }
  else {
    __int16 v16 = *(_WORD *)(v15 + 16 * v11 + 8);
  }
  WORD6(v37) = v16;
  uint64_t v17 = *(void *)(v15 + 16 * v27 + 8) - 1;
  int v18 = 0;
  switch(v17)
  {
    case 0:
      break;
    case 1:
      int v18 = 1;
      break;
    case 3:
      int v18 = 2;
      break;
    case 7:
      int v18 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  DWORD2(v37) = v18;
  BYTE4(v34) = 1;
  sub_1CBD88E08(a1, a2, v28, (uint64_t)&v34 + 8);
  if (*(_DWORD *)a1 >= 4u) {
    *(void *)((char *)&v36 + 4) = 0x6800000000;
  }
  long long v19 = v38;
  *(_OWORD *)(a4 + 128) = v37;
  *(_OWORD *)(a4 + 144) = v19;
  *(_OWORD *)(a4 + 160) = v39;
  *(void *)(a4 + 176) = v40;
  long long v20 = v34;
  *(_OWORD *)(a4 + 64) = v33;
  *(_OWORD *)(a4 + 80) = v20;
  long long v21 = v36;
  *(_OWORD *)(a4 + 96) = v35;
  *(_OWORD *)(a4 + 112) = v21;
  long long v22 = v30;
  *(_OWORD *)a4 = v29;
  *(_OWORD *)(a4 + 16) = v22;
  double result = *(double *)&v31;
  long long v24 = v32;
  *(_OWORD *)(a4 + 32) = v31;
  *(_OWORD *)(a4 + 48) = v24;
  return result;
}

__n128 sub_1CBD89294(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 190;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x57u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v29 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v28 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x55u);
  uint64_t v42 = 0;
  unsigned int v30 = sub_1CBDA6464(v7, 0x56u);
  long long v40 = 0u;
  long long v41 = 0u;
  __n128 v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  int v12 = (unsigned __int8 *)(*((void *)a2 + 2) + 16 * v8);
  DWORD2(v31) = 2;
  HIDWORD(v31) = sub_1CBD9F8B0((unsigned int *)a2, v8, *(void **)(a1 + 16));
  *(void *)&long long v31 = sub_1CBD9FA40(*(void *)(a1 + 24), v12, 2);
  unsigned int v13 = v8 + 1;
  uint64_t v14 = *((void *)a2 + 2);
  unsigned int v15 = *(_DWORD *)(v14 + 16 * v13 + 8);
  DWORD1(v32) = (v15 >> 20) & 0xF;
  BYTE8(v32) = (v15 & 0x10) != 0;
  sub_1CBD88D90((_DWORD *)a1, (uint64_t)a2, v9, &v40, (BOOL *)&v32, (BOOL *)&v42 + 4, (int8x8_t *)((char *)&v38.n128_f64[1] + 4), (uint64_t)&v40 + 4);
  uint64_t v16 = *(void *)(v14 + 16 * v10 + 8);
  BYTE4(v39) = v16 >> 4;
  BYTE5(v34) = (v16 & 0x800) == 0;
  sub_1CBD88E08(a1, a2, v29, (uint64_t)&v34 + 8);
  sub_1CBD88900(a1, a2, v28, (uint64_t)&v32 + 12);
  uint64_t v17 = *((void *)a2 + 2);
  if (*(unsigned char *)(v17 + 16 * v11) == 5) {
    __int16 v18 = 0;
  }
  else {
    __int16 v18 = *(_WORD *)(v17 + 16 * v11 + 8);
  }
  WORD6(v39) = v18;
  uint64_t v19 = *(void *)(v17 + 16 * v30 + 8) - 1;
  int v20 = 0;
  switch(v19)
  {
    case 0:
      break;
    case 1:
      int v20 = 1;
      break;
    case 3:
      int v20 = 2;
      break;
    case 7:
      int v20 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  unsigned int v21 = 0;
  unsigned int v22 = *(_DWORD *)a1;
  long long v37 = 0uLL;
  *((void *)&v36 + 1) = 0;
  DWORD2(v39) = v20;
  v38.n128_u32[0] = 0;
  if (v22 >= 4)
  {
    WORD4(v36) = 15;
    *(unint64_t *)((char *)v38.n128_u64 + 4) = 0xBB00000000;
    unsigned int v21 = 1;
  }
  *(void *)&long long v37 = v21 | 0x100000000;
  BYTE4(v36) = 0;
  long long v23 = v40;
  *(_OWORD *)(a4 + 128) = v39;
  *(_OWORD *)(a4 + 144) = v23;
  *(_OWORD *)(a4 + 160) = v41;
  *(void *)(a4 + 176) = v42;
  long long v24 = v32;
  *(_OWORD *)a4 = v31;
  *(_OWORD *)(a4 + 16) = v24;
  long long v25 = v34;
  *(_OWORD *)(a4 + 32) = v33;
  *(_OWORD *)(a4 + 48) = v25;
  long long v26 = v36;
  *(_OWORD *)(a4 + 64) = v35;
  *(_OWORD *)(a4 + 80) = v26;
  __n128 result = v38;
  *(_OWORD *)(a4 + 96) = v37;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

double sub_1CBD89B68(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 110;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x57u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v12 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x55u);
  unsigned int v28 = sub_1CBDA6464(v7, 0x56u);
  int v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v14 = (unsigned __int8 *)(*((void *)a2 + 2) + 16 * v8);
  DWORD2(v29) = 2;
  HIDWORD(v29) = sub_1CBD9F8B0((unsigned int *)a2, v8, *(void **)(a1 + 16));
  *(void *)&long long v29 = sub_1CBD9FA40(*(void *)(a1 + 24), v14, 2);
  unsigned int v15 = v8 + 1;
  uint64_t v16 = *((void *)a2 + 2);
  *(void *)((char *)&v30 + 4) = (*(_DWORD *)(v16 + 16 * v15 + 8) >> 20) & 0xFLL;
  LOBYTE(v30) = (*(unsigned char *)(v16 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v38 + 1, (int8x8_t *)((char *)&v34 + 12), (uint64_t)&v36);
  uint64_t v17 = *(void *)(v16 + 16 * v10 + 8);
  BYTE5(v35) = v17 >> 4;
  BYTE5(v32) = (v17 & 0x800) == 0;
  HIDWORD(v33) = (unsigned __int16)v17 >> 12;
  BYTE4(v35) = BYTE2(v17) & 1;
  if (word_1CDF77000[dword_1CDF6DEF0[*a2] + (unsigned __int16)v11] == 62) {
    unsigned int v18 = 4;
  }
  else {
    unsigned int v18 = sub_1CBDA014C(*(void **)(a1 + 24), (unsigned __int8 *)(v16 + 16 * v11));
  }
  *(void *)&long long v33 = v18 | 0x100000000;
  WORD4(v32) = 0;
  sub_1CBD88900(a1, a2, v12, (uint64_t)&v30 + 12);
  uint64_t v19 = *((void *)a2 + 2);
  if (*(unsigned char *)(v19 + 16 * v13) == 5) {
    __int16 v20 = 0;
  }
  else {
    __int16 v20 = *(_WORD *)(v19 + 16 * v13 + 8);
  }
  WORD6(v35) = v20;
  uint64_t v21 = *(void *)(v19 + 16 * v28 + 8);
  if (v21 == 1)
  {
    int v22 = 0;
    goto LABEL_7;
  }
  if (v21 <= 7)
  {
    if (v21 == 4)
    {
      int v22 = 2;
      goto LABEL_7;
    }
    if (v21 == 2)
    {
      int v22 = 1;
      goto LABEL_7;
    }
LABEL_21:
    llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  if (v21 == 8)
  {
    int v22 = 3;
    goto LABEL_7;
  }
  if (v21 != 16) {
    goto LABEL_21;
  }
  int v22 = 4;
LABEL_7:
  DWORD2(v35) = v22;
  if (*(_DWORD *)a1 >= 4u) {
    *(void *)((char *)&v34 + 4) = 0x6D00000000;
  }
  long long v23 = v36;
  *(_OWORD *)(a4 + 96) = v35;
  *(_OWORD *)(a4 + 112) = v23;
  *(_OWORD *)(a4 + 128) = v37;
  *(_DWORD *)(a4 + 144) = v38;
  long long v24 = v32;
  *(_OWORD *)(a4 + 32) = v31;
  *(_OWORD *)(a4 + 48) = v24;
  long long v25 = v34;
  *(_OWORD *)(a4 + 64) = v33;
  *(_OWORD *)(a4 + 80) = v25;
  double result = *(double *)&v29;
  long long v27 = v30;
  *(_OWORD *)a4 = v29;
  *(_OWORD *)(a4 + 16) = v27;
  return result;
}

double sub_1CBD89E44(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 193;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x57u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v29 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x55u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x56u);
  *(_DWORD *)long long v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v14 = (unsigned __int8 *)(*((void *)a2 + 2) + 16 * v8);
  DWORD2(v30) = 2;
  HIDWORD(v30) = sub_1CBD9F8B0((unsigned int *)a2, v8, *(void **)(a1 + 16));
  *(void *)&long long v30 = sub_1CBD9FA40(*(void *)(a1 + 24), v14, 2);
  unsigned int v15 = v8 + 1;
  uint64_t v16 = *((void *)a2 + 2);
  unsigned int v17 = *(_DWORD *)(v16 + 16 * v15 + 8);
  DWORD1(v31) = (v17 >> 20) & 0xF;
  BYTE8(v31) = (v17 & 0x10) != 0;
  LOBYTE(v31) = (*(unsigned char *)(v16 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, v39, (int8x8_t *)((char *)&v35 + 12), (uint64_t)&v37);
  uint64_t v18 = *(void *)(v16 + 16 * v10 + 8);
  BYTE5(v36) = v18 >> 4;
  BYTE5(v33) = (v18 & 0x800) == 0;
  HIDWORD(v34) = (unsigned __int16)v18 >> 12;
  BYTE4(v36) = BYTE2(v18) & 1;
  if (word_1CDF77000[dword_1CDF6DEF0[*a2] + (unsigned __int16)v11] == 62) {
    unsigned int v19 = 4;
  }
  else {
    unsigned int v19 = sub_1CBDA014C(*(void **)(a1 + 24), (unsigned __int8 *)(v16 + 16 * v11));
  }
  *(void *)&long long v34 = v19 | 0x100000000;
  WORD4(v33) = 0;
  sub_1CBD88900(a1, a2, v29, (uint64_t)&v31 + 12);
  uint64_t v20 = *((void *)a2 + 2);
  if (*(unsigned char *)(v20 + 16 * v12) == 5) {
    __int16 v21 = 0;
  }
  else {
    __int16 v21 = *(_WORD *)(v20 + 16 * v12 + 8);
  }
  WORD6(v36) = v21;
  uint64_t v22 = *(void *)(v20 + 16 * v13 + 8);
  if (v22 == 1)
  {
    int v23 = 0;
    goto LABEL_7;
  }
  if (v22 <= 7)
  {
    if (v22 == 4)
    {
      int v23 = 2;
      goto LABEL_7;
    }
    if (v22 == 2)
    {
      int v23 = 1;
      goto LABEL_7;
    }
LABEL_21:
    llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  if (v22 == 8)
  {
    int v23 = 3;
    goto LABEL_7;
  }
  if (v22 != 16) {
    goto LABEL_21;
  }
  int v23 = 4;
LABEL_7:
  DWORD2(v36) = v23;
  if (*(_DWORD *)a1 >= 4u) {
    *(void *)((char *)&v35 + 4) = 0xBE00000000;
  }
  long long v24 = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(_OWORD *)(a4 + 112) = v24;
  *(_OWORD *)(a4 + 128) = v38;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v39;
  long long v25 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v25;
  long long v26 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v26;
  double result = *(double *)&v30;
  long long v28 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v28;
  return result;
}

double sub_1CBD8A41C(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 107;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v11 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x55u);
  unsigned int v29 = sub_1CBDA6464(v7, 0x56u);
  int v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  *(void *)&long long v30 = 0;
  uint64_t v13 = *((void *)a2 + 2);
  LOBYTE(v31) = (*(unsigned char *)(v13 + 16 * v8 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v41 + 1, (int8x8_t *)((char *)&v37 + 12), (uint64_t)&v39);
  uint64_t v14 = *(void *)(v13 + 16 * v9 + 8);
  BYTE4(v38) = v14 >> 4;
  BYTE5(v33) = (v14 & 0x800) == 0;
  LOBYTE(v41) = 1;
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v33 + 8);
  sub_1CBD88900((uint64_t)a1, a2, v11, (uint64_t)&v31 + 12);
  uint64_t v15 = *((void *)a2 + 2);
  if (*(unsigned char *)(v15 + 16 * v12) == 5) {
    __int16 v16 = 0;
  }
  else {
    __int16 v16 = *(_WORD *)(v15 + 16 * v12 + 8);
  }
  WORD6(v38) = v16;
  uint64_t v17 = *(void *)(v15 + 16 * v29 + 8);
  if (v17 == 16)
  {
    int v18 = 4;
  }
  else
  {
    uint64_t v28 = v17 - 1;
    int v18 = 0;
    switch(v28)
    {
      case 0:
        break;
      case 1:
        int v18 = 1;
        break;
      case 3:
        int v18 = 2;
        break;
      case 7:
        int v18 = 3;
        break;
      default:
        llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
    }
  }
  unsigned int v19 = 0;
  unsigned int v20 = *a1;
  long long v36 = 0uLL;
  *((void *)&v35 + 1) = 0;
  DWORD2(v38) = v18;
  LODWORD(v37) = 0;
  if (v20 >= 4)
  {
    WORD4(v35) = 15;
    unsigned int v19 = 1;
  }
  *(void *)&long long v36 = v19 | 0x100000000;
  BYTE4(v35) = 0;
  DWORD2(v30) = 0;
  LOBYTE(v30) = 0;
  if (sub_1CBDB2780(*(unsigned int *)a2, 33, 0) == 54) {
    int v21 = 1;
  }
  else {
    int v21 = 2;
  }
  HIDWORD(v30) = v21;
  if (v20 >= 4) {
    *(void *)((char *)&v37 + 4) = 0x6A00000000;
  }
  long long v22 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v22;
  *(_OWORD *)(a4 + 160) = v40;
  *(_DWORD *)(a4 + 176) = v41;
  long long v23 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v23;
  long long v24 = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(_OWORD *)(a4 + 112) = v24;
  long long v25 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v25;
  double result = *(double *)&v32;
  long long v27 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v27;
  return result;
}

__n128 sub_1CBD8A6E4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 191;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x57u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x2Fu);
  unsigned int v11 = sub_1CBDA6464(v7, 0x2Bu);
  unsigned int v12 = sub_1CBDA6464(v7, 0x30u);
  unsigned int v13 = sub_1CBDA6464(v7, 0x55u);
  *(_DWORD *)uint64_t v42 = 0;
  unsigned int v30 = sub_1CBDA6464(v7, 0x56u);
  long long v40 = 0u;
  long long v41 = 0u;
  __n128 v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v14 = (unsigned __int8 *)(*((void *)a2 + 2) + 16 * v8);
  DWORD2(v31) = 2;
  HIDWORD(v31) = sub_1CBD9F8B0((unsigned int *)a2, v8, *(void **)(a1 + 16));
  *(void *)&long long v31 = sub_1CBD9FA40(*(void *)(a1 + 24), v14, 2);
  unsigned int v15 = v8 + 1;
  uint64_t v16 = *((void *)a2 + 2);
  unsigned int v17 = *(_DWORD *)(v16 + 16 * v15 + 8);
  DWORD1(v32) = (v17 >> 20) & 0xF;
  BYTE8(v32) = (v17 & 0x10) != 0;
  LOBYTE(v32) = (*(unsigned char *)(v16 + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, v42, (int8x8_t *)((char *)&v38.n128_f64[1] + 4), (uint64_t)&v40);
  uint64_t v18 = *(void *)(v16 + 16 * v10 + 8);
  BYTE4(v39) = v18 >> 4;
  BYTE5(v34) = (v18 & 0x800) == 0;
  sub_1CBD88E08(a1, a2, v11, (uint64_t)&v34 + 8);
  sub_1CBD88900(a1, a2, v12, (uint64_t)&v32 + 12);
  uint64_t v19 = *((void *)a2 + 2);
  if (*(unsigned char *)(v19 + 16 * v13) == 5) {
    __int16 v20 = 0;
  }
  else {
    __int16 v20 = *(_WORD *)(v19 + 16 * v13 + 8);
  }
  WORD6(v39) = v20;
  uint64_t v21 = *(void *)(v19 + 16 * v30 + 8) - 1;
  int v22 = 0;
  switch(v21)
  {
    case 0:
      break;
    case 1:
      int v22 = 1;
      break;
    case 3:
      int v22 = 2;
      break;
    case 7:
      int v22 = 3;
      break;
    default:
      llvm::report_fatal_error((llvm *)"Unhandled size for stride", (const llvm::Twine *)1);
  }
  unsigned int v23 = 0;
  unsigned int v24 = *(_DWORD *)a1;
  long long v37 = 0uLL;
  *((void *)&v36 + 1) = 0;
  DWORD2(v39) = v22;
  v38.n128_u32[0] = 0;
  if (v24 >= 4)
  {
    WORD4(v36) = 15;
    *(unint64_t *)((char *)v38.n128_u64 + 4) = 0xBC00000000;
    unsigned int v23 = 1;
  }
  *(void *)&long long v37 = v23 | 0x100000000;
  BYTE4(v36) = 0;
  long long v25 = v40;
  *(_OWORD *)(a4 + 128) = v39;
  *(_OWORD *)(a4 + 144) = v25;
  *(_OWORD *)(a4 + 160) = v41;
  *(_DWORD *)(a4 + 176) = *(_DWORD *)v42;
  long long v26 = v32;
  *(_OWORD *)a4 = v31;
  *(_OWORD *)(a4 + 16) = v26;
  long long v27 = v34;
  *(_OWORD *)(a4 + 32) = v33;
  *(_OWORD *)(a4 + 48) = v27;
  long long v28 = v36;
  *(_OWORD *)(a4 + 64) = v35;
  *(_OWORD *)(a4 + 80) = v28;
  __n128 result = v38;
  *(_OWORD *)(a4 + 96) = v37;
  *(__n128 *)(a4 + 112) = result;
  return result;
}

__n128 sub_1CBD8AA1C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 30;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  memset(v18, 0, 44);
  long long v16 = 0u;
  __n128 v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3) {
      v17.n128_u32[2] = dword_1CDF53620[DWORD2(v14) - 2];
    }
    v17.n128_u32[3] = 35;
  }
  long long v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  long long v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  __n128 result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CBD8AB6C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 30;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  memset(v18, 0, 44);
  long long v16 = 0u;
  __n128 v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3) {
      v17.n128_u32[2] = dword_1CDF53620[DWORD2(v14) - 2];
    }
    v17.n128_u32[3] = 35;
  }
  long long v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  long long v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  __n128 result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1CBD8ACA4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 30;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  memset(v18, 0, 44);
  long long v16 = 0u;
  __n128 v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  sub_1CBD85EB8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3) {
      v17.n128_u32[2] = dword_1CDF53620[DWORD2(v14) - 2];
    }
    v17.n128_u32[3] = 35;
  }
  long long v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  long long v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  __n128 result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1CBD8ADE0(_DWORD *a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 3;
  int v7 = *(unsigned __int16 *)a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x24u);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v16 + 12, (int8x8_t *)&v14, (uint64_t)&v14 + 12);
  sub_1CBD8AEB4(a2, v9, (BOOL *)&v14 + 8, (uint64_t *)&v13);
  if (*a1 >= 4u) {
    *((void *)&v13 + 1) = 0x800000003;
  }
  long long v10 = v14;
  *a4 = v13;
  a4[1] = v10;
  double result = *(double *)&v15;
  long long v12 = v16;
  a4[2] = v15;
  a4[3] = v12;
  return result;
}

uint64_t sub_1CBD8AEB4(unsigned int *a1, unsigned int a2, BOOL *a3, uint64_t *a4)
{
  uint64_t v8 = *a1;
  int v9 = sub_1CBDB2780(v8, 3, 0);
  *a3 = v9 == 4;
  uint64_t result = sub_1CBDB2780(v8, 4, 0);
  uint64_t v11 = *((void *)a1 + 2);
  if (*(unsigned char *)(v11 + 16 * a2) == 2)
  {
    uint64_t v12 = *(void *)(v11 + 16 * a2 + 8);
    BOOL v14 = v12 < 0 && v9 != 4;
    if (HIWORD(v12) && !v14) {
      llvm::report_fatal_error((llvm *)"Branch offset too big to encode.", (const llvm::Twine *)1);
    }
    uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v15 = 0;
  }
  *a4 = v15;
  return result;
}

double sub_1CBD8AF7C(_DWORD *a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 16;
  int v7 = *(unsigned __int16 *)a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x24u);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v16 + 12, (int8x8_t *)&v14, (uint64_t)&v14 + 12);
  sub_1CBD8AEB4(a2, v9, (BOOL *)&v14 + 8, (uint64_t *)&v13);
  if (*a1 >= 4u) {
    *((void *)&v13 + 1) = 0x1500000003;
  }
  long long v10 = v14;
  *a4 = v13;
  a4[1] = v10;
  double result = *(double *)&v15;
  long long v12 = v16;
  a4[2] = v15;
  a4[3] = v12;
  return result;
}

double sub_1CBD8B050(_DWORD *a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 15;
  int v7 = *(unsigned __int16 *)a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x24u);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v16 + 12, (int8x8_t *)&v14, (uint64_t)&v14 + 12);
  sub_1CBD8AEB4(a2, v9, (BOOL *)&v14 + 8, (uint64_t *)&v13);
  if (*a1 >= 4u) {
    *((void *)&v13 + 1) = 0x1400000003;
  }
  long long v10 = v14;
  *a4 = v13;
  a4[1] = v10;
  double result = *(double *)&v15;
  long long v12 = v16;
  a4[2] = v15;
  a4[3] = v12;
  return result;
}

double sub_1CBD8B124(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 22;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 7u);
  *(_DWORD *)long long v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  memset(v13, 0, sizeof(v13));
  sub_1CBD85A80(a1, (uint64_t)a2, v8, v16, (int8x8_t *)((char *)&v13[2] + 4), (uint64_t)&v14);
  sub_1CBD86608((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)v13);
  BYTE12(v13[2]) = sub_1CBDB2780(*(unsigned int *)a2, 3, 0) == 4;
  if (*a1 >= 4u) {
    *(void *)((char *)&v13[1] + 12) = 0x1B00000002;
  }
  long long v10 = v14;
  *(_OWORD *)(a4 + 32) = v13[2];
  *(_OWORD *)(a4 + 48) = v10;
  *(_OWORD *)(a4 + 64) = v15;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)v16;
  double result = *(double *)v13;
  long long v12 = v13[1];
  *(_OWORD *)a4 = v13[0];
  *(_OWORD *)(a4 + 16) = v12;
  return result;
}

double sub_1CBD8B230(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 27;
  unsigned int v7 = sub_1CBDA6464(*a2, 0x2Eu);
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v7, (BOOL *)&v13 + 4, (int8x8_t *)&v10 + 1, (uint64_t)&v11 + 4);
  if (*a1 >= 4u) {
    *(void *)&long long v10 = 0x2000000003;
  }
  long long v8 = v11;
  *(_OWORD *)a4 = v10;
  *(_OWORD *)(a4 + 16) = v8;
  double result = *(double *)&v12;
  *(_OWORD *)(a4 + 32) = v12;
  *(void *)(a4 + 48) = v13;
  return result;
}

double sub_1CBD8B2DC(_DWORD *a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 28;
  uint64_t v7 = *a2;
  int v8 = (unsigned __int16)*a2;
  unsigned int v9 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x3Bu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x3Cu);
  memset(v18, 0, 60);
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v18[3] + 8, (int8x8_t *)((unint64_t)v18 | 0xC), (uint64_t)&v18[1] + 8);
  uint64_t v12 = *((void *)a2 + 2);
  int v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    char v14 = 6;
  }
  else if (v13 == 1)
  {
    char v14 = 7;
  }
  else
  {
    char v14 = (v13 + 9) & 0xF;
  }
  BYTE1(v18[0]) = v14;
  if (*(unsigned char *)(v12 + 16 * v11) == 5) {
    __int16 v15 = 0;
  }
  else {
    __int16 v15 = *(_WORD *)(v12 + 16 * v11 + 8);
  }
  WORD2(v18[1]) = v15;
  LOBYTE(v18[0]) = sub_1CBDB2780(v7, 8, 0) == 13;
  if (*a1 >= 4u) {
    *(void *)((char *)v18 + 4) = 0x2100000003;
  }
  long long v16 = v18[1];
  *a4 = v18[0];
  a4[1] = v16;
  a4[2] = v18[2];
  double result = *(double *)((char *)&v18[2] + 12);
  *(_OWORD *)((char *)a4 + 44) = *(_OWORD *)((char *)&v18[2] + 12);
  return result;
}

double sub_1CBD8B440(_DWORD *a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 26;
  uint64_t v7 = *a2;
  int v8 = (unsigned __int16)*a2;
  unsigned int v9 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x3Bu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x3Cu);
  memset(v18, 0, 60);
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v18[3] + 8, (int8x8_t *)((unint64_t)v18 | 0xC), (uint64_t)&v18[1] + 8);
  uint64_t v12 = *((void *)a2 + 2);
  int v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    char v14 = 6;
  }
  else if (v13 == 1)
  {
    char v14 = 7;
  }
  else
  {
    char v14 = (v13 + 9) & 0xF;
  }
  BYTE1(v18[0]) = v14;
  if (*(unsigned char *)(v12 + 16 * v11) == 5) {
    __int16 v15 = 0;
  }
  else {
    __int16 v15 = *(_WORD *)(v12 + 16 * v11 + 8);
  }
  WORD2(v18[1]) = v15;
  LOBYTE(v18[0]) = sub_1CBDB2780(v7, 8, 0) == 13;
  if (*a1 >= 4u) {
    *(void *)((char *)v18 + 4) = 0x1F00000003;
  }
  long long v16 = v18[1];
  *a4 = v18[0];
  a4[1] = v16;
  a4[2] = v18[2];
  double result = *(double *)((char *)&v18[2] + 12);
  *(_OWORD *)((char *)a4 + 44) = *(_OWORD *)((char *)&v18[2] + 12);
  return result;
}

double sub_1CBD8B5A4(_DWORD *a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 24;
  uint64_t v7 = *a2;
  int v8 = (unsigned __int16)*a2;
  unsigned int v9 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x3Bu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x3Cu);
  memset(v18, 0, 60);
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v18[3] + 8, (int8x8_t *)((unint64_t)v18 | 0xC), (uint64_t)&v18[1] + 8);
  uint64_t v12 = *((void *)a2 + 2);
  int v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    char v14 = 6;
  }
  else if (v13 == 1)
  {
    char v14 = 7;
  }
  else
  {
    char v14 = (v13 + 9) & 0xF;
  }
  BYTE1(v18[0]) = v14;
  if (*(unsigned char *)(v12 + 16 * v11) == 5) {
    __int16 v15 = 0;
  }
  else {
    __int16 v15 = *(_WORD *)(v12 + 16 * v11 + 8);
  }
  WORD2(v18[1]) = v15;
  LOBYTE(v18[0]) = sub_1CBDB2780(v7, 8, 0) == 13;
  if (*a1 >= 4u) {
    *(void *)((char *)v18 + 4) = 0x1D00000003;
  }
  long long v16 = v18[1];
  *a4 = v18[0];
  a4[1] = v16;
  a4[2] = v18[2];
  double result = *(double *)((char *)&v18[2] + 12);
  *(_OWORD *)((char *)a4 + 44) = *(_OWORD *)((char *)&v18[2] + 12);
  return result;
}

double sub_1CBD8B708(_DWORD *a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  *a3 = 23;
  uint64_t v7 = *a2;
  int v8 = (unsigned __int16)*a2;
  unsigned int v9 = sub_1CBDA6464(v8, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v8, 0x3Bu);
  unsigned int v11 = sub_1CBDA6464(v8, 0x3Cu);
  memset(v18, 0, 60);
  sub_1CBD85A80(a1, (uint64_t)a2, v9, (BOOL *)&v18[3] + 8, (int8x8_t *)((unint64_t)v18 | 0xC), (uint64_t)&v18[1] + 8);
  uint64_t v12 = *((void *)a2 + 2);
  int v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    char v14 = 6;
  }
  else if (v13 == 1)
  {
    char v14 = 7;
  }
  else
  {
    char v14 = (v13 + 9) & 0xF;
  }
  BYTE1(v18[0]) = v14;
  if (*(unsigned char *)(v12 + 16 * v11) == 5) {
    __int16 v15 = 0;
  }
  else {
    __int16 v15 = *(_WORD *)(v12 + 16 * v11 + 8);
  }
  WORD2(v18[1]) = v15;
  LOBYTE(v18[0]) = sub_1CBDB2780(v7, 8, 0) == 13;
  if (*a1 >= 4u) {
    *(void *)((char *)v18 + 4) = 0x1C00000003;
  }
  long long v16 = v18[1];
  *a4 = v18[0];
  a4[1] = v16;
  a4[2] = v18[2];
  double result = *(double *)((char *)&v18[2] + 12);
  *(_OWORD *)((char *)a4 + 44) = *(_OWORD *)((char *)&v18[2] + 12);
  return result;
}

double sub_1CBD8B86C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 25;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x3Cu);
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v17 + 4, (int8x8_t *)&v14 + 1, (uint64_t)&v15 + 4);
  uint64_t v10 = *((void *)a2 + 2);
  if (*(unsigned char *)(v10 + 16 * v9) == 5) {
    __int16 v11 = 0;
  }
  else {
    __int16 v11 = *(_WORD *)(v10 + 16 * v9 + 8);
  }
  LOWORD(v15) = v11;
  if (*a1 >= 4u) {
    *(void *)&long long v14 = 0x1E00000003;
  }
  long long v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  double result = *(double *)&v16;
  *(_OWORD *)(a4 + 32) = v16;
  *(void *)(a4 + 48) = v17;
  return result;
}

double sub_1CBD8B964(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 199;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x83u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x3Du);
  *(_DWORD *)long long v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  memset(v22, 0, sizeof(v22));
  long long v21 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)v22 + 12);
  DWORD2(v21) = 5;
  unsigned int v11 = *a1;
  if (v11 >= 4) {
    HIDWORD(v21) = 2;
  }
  uint64_t v12 = *((void *)a2 + 2);
  uint64_t v13 = *(void *)(v12 + 16 * v10 + 8);
  if (v13) {
    uint64_t v14 = v13 - 8;
  }
  else {
    uint64_t v14 = 0;
  }
  LOWORD(v21) = *(_WORD *)(*(void *)(v14 + 32) + 16) & 0x1FFF;
  if (v10) {
    int v15 = 1;
  }
  else {
    int v15 = 2;
  }
  unsigned int v16 = *(_DWORD *)(v12 + 16 * (v15 + v10) + 8);
  BYTE8(v22[0]) = (v16 & 0x10) != 0;
  DWORD1(v22[0]) = (v16 >> 20) & 0xF;
  HIDWORD(v25) = 0;
  if (v11 >= 3)
  {
    if (sub_1CBDB2780(*(unsigned int *)a2, 49, 0) == 85)
    {
      DWORD1(v22[2]) = 0;
      *(void *)((char *)&v22[1] + 4) = 0x100000000;
      *(void *)((char *)&v22[1] + 12) = 0;
      *(void *)((char *)v22 + 12) = 0;
    }
    if (v11 >= 4) {
      *((void *)&v22[2] + 1) = 0xC400000002;
    }
  }
  long long v17 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v17;
  *(_OWORD *)(a4 + 96) = v25;
  *(_DWORD *)(a4 + 112) = *(_DWORD *)v26;
  long long v18 = v22[0];
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v18;
  double result = *(double *)&v22[1];
  long long v20 = v22[2];
  *(_OWORD *)(a4 + 32) = v22[1];
  *(_OWORD *)(a4 + 48) = v20;
  return result;
}

__n128 sub_1CBD8BB1C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 0;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x39u);
  unsigned int v10 = sub_1CBDA6464(v7, 0x3Au);
  memset(v18, 0, 44);
  long long v16 = 0u;
  __n128 v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1CBD88E08((uint64_t)a1, a2, v9, (uint64_t)&v14);
  sub_1CBD88E08((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u) {
    v17.n128_u64[1] = 0x500000002;
  }
  long long v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  long long v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  __n128 result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1CBD8BC30(int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 198;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 7u);
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  memset(v14, 0, sizeof(v14));
  sub_1CBD85A80(a1, (uint64_t)a2, v8, (BOOL *)&v17 + 5, (int8x8_t *)((char *)&v14[2] + 4), (uint64_t)&v15 + 4);
  sub_1CBD8BD54((uint64_t)a1, a2, v9, (uint64_t)v14);
  LODWORD(v15) = dword_1CDF53630[(int)sub_1CBDB2780(*(unsigned int *)a2, 48, 0) - 82];
  BYTE4(v17) = 1;
  int v10 = *a1;
  if (*a1 >= 3)
  {
    HIDWORD(v14[2]) = 1;
    if (v10 != 3) {
      *(void *)((char *)&v14[1] + 12) = 0xC300000002;
    }
  }
  long long v11 = v15;
  *(_OWORD *)(a4 + 32) = v14[2];
  *(_OWORD *)(a4 + 48) = v11;
  *(_OWORD *)(a4 + 64) = v16;
  *(void *)(a4 + 80) = v17;
  double result = *(double *)v14;
  long long v13 = v14[1];
  *(_OWORD *)a4 = v14[0];
  *(_OWORD *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_1CBD8BD54(uint64_t result, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = a3;
  uint64_t v7 = *((void *)a2 + 2);
  unsigned int v8 = (unsigned __int8 *)(v7 + 16 * a3);
  if (*v8 == 5)
  {
    uint64_t v9 = *(void *)(v7 + 16 * a3 + 8);
    if (v9) {
      uint64_t v10 = v9 - 8;
    }
    else {
      uint64_t v10 = 0;
    }
    if (!*(_DWORD *)(v10 + 24))
    {
      int v11 = *(_DWORD *)(v10 + 40);
      if (v11 == 4) {
        int v12 = 2;
      }
      else {
        int v12 = 3;
      }
      if (v11 == 2) {
        int v13 = 1;
      }
      else {
        int v13 = v12;
      }
      *(_DWORD *)(a4 + 8) = 3;
      *(_DWORD *)(a4 + 12) = v13;
      *(_WORD *)a4 = *(_WORD *)(*(void *)(v10 + 32) + 16) & 0x1FF;
    }
    *(_DWORD *)(a4 + 20) = (*(_DWORD *)(v7 + 16 * (a3 + 1) + 8) >> 20) & 0xF;
    return result;
  }
  uint64_t v15 = result;
  int v16 = (__int16)word_1CDF77000[dword_1CDF6DEF0[*a2] + (unsigned __int16)a3];
  if (v16 == 62)
  {
    *(_DWORD *)(a4 + 8) = 4;
LABEL_19:
    *(_DWORD *)(a4 + 12) = sub_1CBD9FCC8((unsigned int *)a2);
    uint64_t v20 = *(void *)(v15 + 24);
    int v19 = *(_DWORD *)(a4 + 8);
LABEL_20:
    *(void *)a4 = sub_1CBD9FA40(v20, v8, v19);
    goto LABEL_21;
  }
  uint64_t v17 = *(void **)(result + 24);
  uint64_t v18 = sub_1CBDA014C(v17, (unsigned __int8 *)(v7 + 16 * a3));
  *(_DWORD *)(a4 + 8) = v18;
  if (v18 == 4) {
    goto LABEL_19;
  }
  int v19 = v18;
  if (v18 != 1)
  {
    char v21 = v16 + 117;
    if ((v16 - 139) <= 0x25)
    {
      if (((1 << v21) & 0x1600015) != 0)
      {
        int v22 = 1;
LABEL_30:
        *(_DWORD *)(a4 + 12) = v22;
        uint64_t v20 = (uint64_t)v17;
        goto LABEL_20;
      }
      if (((1 << v21) & 0x3400000000) != 0)
      {
        int v22 = 2;
        goto LABEL_30;
      }
    }
    int v22 = ((uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))loc_1CBD9FDCC)(v15, v8, v18);
    uint64_t v17 = *(void **)(v15 + 24);
    int v19 = *(_DWORD *)(a4 + 8);
    goto LABEL_30;
  }
  *(_WORD *)a4 = *(void *)(v7 + 16 * v6 + 8);
  *(_DWORD *)(a4 + 12) = 1;
LABEL_21:

  return sub_1CBDA00E4((uint64_t)a2, (uint64_t)v8, a3, a4);
}

double sub_1CBD8BF54(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 65;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v10 = sub_1CBDA6464(v7, 3u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x19u);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  memset(v25, 0, sizeof(v25));
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v8, (BOOL *)&v28, (int8x8_t *)((char *)&v25[1] + 4), (uint64_t)&v26);
  uint64_t v13 = *((void *)a2 + 2);
  HIDWORD(v25[1]) = *(_DWORD *)(v13 + 16 * v9 + 8) & 0xF;
  int v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v14 == 2)
  {
    char v15 = 6;
  }
  else if (v14 == 1)
  {
    char v15 = 7;
  }
  else
  {
    char v15 = (v14 + 9) & 0xF;
  }
  BYTE9(v25[0]) = v15;
  sub_1CBD8C148(a1, (uint64_t)a2, v11, (uint64_t)&v22);
  sub_1CBD8C148(a1, (uint64_t)a2, v12, (uint64_t)&v23 + 12);
  uint64_t v16 = *(unsigned int *)a2;
  BYTE8(v25[0]) = sub_1CBDB2780(v16, 20, 0) == 13;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v28) = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v17 = sub_1CBE52E8C(v16);
      if ((v17 & 0xFF00000000) == 0 || v17 != 47) {
        HIDWORD(v28) = 0;
      }
    }
    goto LABEL_11;
  }
  if (*(_DWORD *)a1 == 4) {
LABEL_11:
  }
    *(void *)((char *)v25 + 12) = 0x4500000003;
  long long v18 = v26;
  *(_OWORD *)(a4 + 64) = v25[1];
  *(_OWORD *)(a4 + 80) = v18;
  *(_OWORD *)(a4 + 96) = v27;
  *(void *)(a4 + 112) = v28;
  long long v19 = v23;
  *(_OWORD *)a4 = v22;
  *(_OWORD *)(a4 + 16) = v19;
  double result = *(double *)&v24;
  long long v21 = v25[0];
  *(_OWORD *)(a4 + 32) = v24;
  *(_OWORD *)(a4 + 48) = v21;
  return result;
}

uint64_t sub_1CBD8C148(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result = sub_1CBD8F254(a1, (unsigned __int16 *)a2, a3, a4);
  uint64_t v8 = *(void *)(a2 + 16);
  if (*(unsigned char *)(v8 + 16 * a3) != 2 && (*(unsigned char *)(v8 + 16 * (a3 + 1) + 9) & 8) != 0) {
    *(_DWORD *)(a4 + 12) = 4;
  }
  if (*(_DWORD *)(a4 + 8) == 1) {
    *(_DWORD *)(a4 + 12) = 2;
  }
  return result;
}

double sub_1CBD8C1BC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  *a3 = 80;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v9 = sub_1CBDA6464(v7, 0x54u);
  unsigned int v10 = sub_1CBDA6464(v7, 3u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x18u);
  unsigned int v12 = sub_1CBDA6464(v7, 0x19u);
  *(_DWORD *)unsigned int v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  memset(v27, 0, sizeof(v27));
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  sub_1CBD85A80(a1, (uint64_t)a2, v8, v30, (int8x8_t *)((char *)&v27[1] + 4), (uint64_t)&v28);
  uint64_t v13 = *((void *)a2 + 2);
  HIDWORD(v27[1]) = dword_1CDF536A4[(*(void *)(v13 + 16 * v9 + 8) & 0xFLL) - 8];
  int v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v14 == 2)
  {
    char v15 = 6;
  }
  else if (v14 == 1)
  {
    char v15 = 7;
  }
  else
  {
    char v15 = (v14 + 9) & 0xF;
  }
  BYTE9(v27[0]) = v15;
  sub_1CBD88900((uint64_t)a1, a2, v11, (uint64_t)&v24);
  sub_1CBD88900((uint64_t)a1, a2, v12, (uint64_t)&v25 + 12);
  BYTE8(v27[0]) = sub_1CBDB2780(*(unsigned int *)a2, 20, 0) == 13;
  if (HIDWORD(v27[1]) >= 4)
  {
    char v16 = 0;
    uint64_t v17 = 0;
    v31[0] = &v24;
    v31[1] = (char *)&v25 + 12;
    do
    {
      char v18 = v16;
      uint64_t v19 = v31[v17];
      if (*(_DWORD *)(v19 + 8) != 1 && *(_DWORD *)(v19 + 12) == 1) {
        *(unsigned char *)(v19 + 25) = 1;
      }
      char v16 = 1;
      uint64_t v17 = 1;
    }
    while ((v18 & 1) == 0);
  }
  if (*a1 >= 4u) {
    *(void *)((char *)v27 + 12) = 0x5200000003;
  }
  long long v20 = v28;
  *(_OWORD *)(a4 + 64) = v27[1];
  *(_OWORD *)(a4 + 80) = v20;
  *(_OWORD *)(a4 + 96) = v29;
  *(_DWORD *)(a4 + 112) = *(_DWORD *)v30;
  long long v21 = v25;
  *(_OWORD *)a4 = v24;
  *(_OWORD *)(a4 + 16) = v21;
  double result = *(double *)&v26;
  long long v23 = v27[0];
  *(_OWORD *)(a4 + 32) = v26;
  *(_OWORD *)(a4 + 48) = v23;
  return result;
}

double sub_1CBD8C400(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 43;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  int v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(unsigned char *)(*((void *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v27 + 12, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v25 + 12);
  sub_1CBD8C148(a1, (uint64_t)a2, v10, (uint64_t)&v21 + 4);
  sub_1CBD8C148(a1, (uint64_t)a2, v11, (uint64_t)&v23);
  uint64_t v12 = *(unsigned int *)a2;
  BYTE12(v20) = sub_1CBDB2780(v12, 8, 0) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    int v28 = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v13 = sub_1CBE52E8C(v12);
      if ((v13 & 0xFF00000000) == 0 || v13 != 47) {
        int v28 = 0;
      }
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_11;
  }
  if ((DWORD2(v19) - 2) <= 3) {
    HIDWORD(v24) = dword_1CDF53620[DWORD2(v19) - 2];
  }
  LODWORD(v25) = 48;
LABEL_11:
  long long v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(_DWORD *)(a4 + 144) = v28;
  long long v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  long long v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  double result = *(double *)&v19;
  long long v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

void sub_1CBD8C5F0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  sub_1CBD8F178(a1, a2, a3, a4);
  uint64_t v7 = *(void *)(a2 + 16);
  if (*(unsigned char *)(v7 + 16 * a3) != 2 && (*(unsigned char *)(v7 + 16 * (a3 + 1) + 9) & 8) != 0) {
    *(_DWORD *)(a4 + 12) = 4;
  }

  sub_1CBD9FB50((long long *)a2, a3, a4);
}

double sub_1CBD8C66C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 57;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v10 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v11 = sub_1CBDA6464(v7, 4u);
  int v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v23);
  int v12 = *(_DWORD *)(*((void *)a2 + 2) + 16 * v9 + 8);
  LOBYTE(v24) = (v12 & 0x20) != 0;
  BYTE8(v30) = (v12 & 0x80) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v32 + 12, (int8x8_t *)((char *)&v29 + 12), (uint64_t)&v30 + 12);
  sub_1CBD8C148(a1, (uint64_t)a2, v10, (uint64_t)&v25 + 4);
  sub_1CBD8C148(a1, (uint64_t)a2, v11, (uint64_t)v27);
  uint64_t v13 = *(unsigned int *)a2;
  BYTE12(v24) = sub_1CBDB2780(v13, 8, 0) == 19;
  unsigned int v14 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    int v33 = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v22 = sub_1CBE52E8C(v13);
      if ((v22 & 0xFF00000000) == 0 || v22 != 47) {
        int v33 = 0;
      }
    }
  }
  *(void *)((char *)&v27[2] + 4) = 0x200000000;
  *(void *)((char *)&v27[1] + 12) = 0;
  memset((char *)&v27[2] + 12, 0, 20);
  long long v28 = 0x200000000uLL;
  DWORD1(v30) = 0;
  LODWORD(v29) = 0;
  if (v14 >= 4)
  {
    if ((DWORD2(v23) - 2) <= 3) {
      DWORD1(v29) = dword_1CDF53620[DWORD2(v23) - 2];
    }
    DWORD2(v29) = 62;
  }
  long long v15 = v31;
  *(_OWORD *)(a4 + 160) = v30;
  *(_OWORD *)(a4 + 176) = v15;
  *(_OWORD *)(a4 + 192) = v32;
  *(_DWORD *)(a4 + 208) = v33;
  long long v16 = v27[3];
  *(_OWORD *)(a4 + 96) = v27[2];
  *(_OWORD *)(a4 + 112) = v16;
  long long v17 = v29;
  *(_OWORD *)(a4 + 128) = v28;
  *(_OWORD *)(a4 + 144) = v17;
  long long v18 = v26;
  *(_OWORD *)(a4 + 32) = v25;
  *(_OWORD *)(a4 + 48) = v18;
  long long v19 = v27[1];
  *(_OWORD *)(a4 + 64) = v27[0];
  *(_OWORD *)(a4 + 80) = v19;
  double result = *(double *)&v23;
  long long v21 = v24;
  *(_OWORD *)a4 = v23;
  *(_OWORD *)(a4 + 16) = v21;
  return result;
}

double sub_1CBD8C8A8(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  *a3 = 57;
  int v7 = *a2;
  unsigned int v8 = sub_1CBDA6464(v7, 3u);
  unsigned int v9 = sub_1CBDA6464(v7, 0x2Eu);
  unsigned int v25 = sub_1CBDA6464(v7, 0x11u);
  unsigned int v10 = sub_1CBDA6464(v7, 4u);
  unsigned int v11 = sub_1CBDA6464(v7, 0x1Cu);
  unsigned int v12 = sub_1CBDA6464(v7, 0x47u);
  int v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  sub_1CBD8C5F0(a1, (uint64_t)a2, v8, (uint64_t)&v26);
  int v13 = *(_DWORD *)(*((void *)a2 + 2) + 16 * v9 + 8);
  LOBYTE(v27) = (v13 & 0x20) != 0;
  BYTE8(v36) = (v13 & 0x80) != 0;
  sub_1CBD85A80((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v38 + 12, (int8x8_t *)((char *)&v35 + 12), (uint64_t)&v36 + 12);
  sub_1CBD8C148(a1, (uint64_t)a2, v25, (uint64_t)&v28 + 4);
  sub_1CBD8C148(a1, (uint64_t)a2, v10, (uint64_t)&v30);
  uint64_t v14 = *((void *)a2 + 2);
  if (*(unsigned char *)(v14 + 16 * v11) == 1)
  {
    sub_1CBD8BD54(a1, a2, v11, (uint64_t)&v31 + 12);
    uint64_t v14 = *((void *)a2 + 2);
  }
  else
  {
    BYTE12(v31) = *(unsigned char *)(v14 + 16 * v11 + 8) & 0x7F;
    *(void *)((char *)&v32 + 4) = 0x200000006;
    BYTE12(v32) = 0;
  }
  if (*(unsigned char *)(v14 + 16 * v12) == 1)
  {
    sub_1CBD8BD54(a1, a2, v12, (uint64_t)&v33 + 8);
  }
  else
  {
    BYTE8(v33) = *(unsigned char *)(v14 + 16 * v12 + 8) & 0x7F;
    *(void *)&long long v34 = 0x200000006;
    BYTE8(v34) = 0;
  }
  uint64_t v15 = *(unsigned int *)a2;
  BYTE12(v27) = sub_1CBDB2780(v15, 8, 0) == 19;
  int v16 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    int v39 = 1;
    if ((*(unsigned char *)(*(void *)(a1 + 8) + 196) & 2) != 0)
    {
      uint64_t v17 = sub_1CBE52E8C(v15);
      if ((v17 & 0xFF00000000) == 0 || v17 != 47) {
        int v39 = 0;
      }
    }
    DWORD1(v36) = 1;
  }
  else
  {
    DWORD1(v36) = 1;
    if (v16 != 4) {
      goto LABEL_16;
    }
  }
  if ((DWORD2(v26) - 2) <= 3) {
    DWORD1(v35) = dword_1CDF53620[DWORD2(v26) - 2];
  }
  DWORD2(v35) = 62;
LABEL_16:
  long long v18 = v37;
  *(_OWORD *)(a4 + 160) = v36;
  *(_OWORD *)(a4 + 176) = v18;
  *(_OWORD *)(a4 + 192) = v38;
  *(_DWORD *)(a4 + 208) = v39;
  long long v19 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v19;
  long long v20 = v35;
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v20;
  long long v21 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v21;
  long long v22 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v22;
  double result = *(double *)&v26;
  long long v24 = v27;
  *(_OWORD *)a4 = v26;
  *(_OWORD *)(a4 + 16) = v24;
  return result;
}