uint64_t sub_1CCFC1B34(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    do
    {
      result = *(void *)(v1 + 24);
      v2 = *(void *)(result - 32);
      if (!v2) {
        break;
      }
      if (*(unsigned char *)(v2 + 16)) {
        break;
      }
      if (*(void *)(v2 + 24) != *(void *)(result + 72)) {
        break;
      }
      if (*(_DWORD *)(v2 + 36) != 10) {
        break;
      }
      v1 = *(void *)(v1 + 8);
    }
    while (v1);
  }
  return result;
}

uint64_t sub_1CCFC1D04(int a1)
{
  if (a1 > 276)
  {
    switch(a1)
    {
      case 303:
        uint64_t result = 93;
        break;
      case 304:
        uint64_t result = 95;
        break;
      case 305:
      case 306:
        __break(1u);
        JUMPOUT(0x1CCFC1D84);
      case 307:
        uint64_t result = 89;
        break;
      case 308:
        uint64_t result = 91;
        break;
      default:
        uint64_t result = 90;
        break;
    }
  }
  else
  {
    if (a1 == 265) {
      unsigned int v1 = 94;
    }
    else {
      unsigned int v1 = 88;
    }
    if (a1 == 264) {
      return 92;
    }
    else {
      return v1;
    }
  }
  return result;
}

_DWORD *sub_1CCFC1DD0(_DWORD *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4 < 2)
  {
    v4 = result + 132;
    v5 = result + 134;
    unsigned int v6 = result[134];
    if (v6 < result[135]) {
      goto LABEL_6;
    }
LABEL_8:
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a4 != 2) {
    return result;
  }
  v4 = result + 168;
  v5 = result + 170;
  unsigned int v6 = result[170];
  if (v6 >= result[171]) {
    goto LABEL_8;
  }
LABEL_6:
  v7 = (void *)(*v4 + 16 * v6);
  void *v7 = a2;
  v7[1] = 1;
  ++*v5;
  return result;
}

uint64_t *sub_1CCFC1E7C(llvm::IntegerType ***a1, unsigned __int8 a2, uint64_t a3)
{
  unsigned __int8 v46 = a2;
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    v5 = **a1;
    if ((a2 - 15) <= 0x9Bu) {
      a2 = sub_1CB8C2FBC(&v46);
    }
    LOBYTE(v47) = a2;
    unsigned int v6 = (llvm::LLVMContext *)sub_1CB87E200((unsigned __int8 *)&v47);
    v8 = (llvm::FixedVectorType *)llvm::IntegerType::get(v5, v6);
    if (v46 - 15 <= 0x9B)
    {
      if (v46 - 120 <= 0x32) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v7);
      }
      v9 = (llvm::Type *)sub_1CB8C32B0(&v46);
      llvm::FixedVectorType::get(v8, v9);
      v8 = v10;
    }
    v11 = (llvm::Constant *)llvm::PointerType::get(v8, 0);
    v16 = (llvm *)a1;
    if (*a1 != (llvm::IntegerType **)v11) {
      v16 = sub_1CC56C0C0((llvm *)0x31, (llvm::detail::IEEEFloat *)a1, v11, 0);
    }
    v17 = (unsigned __int8 *)llvm::ConstantFoldLoadFromConstPtr(v16, v8, (llvm::Type *)(*(void *)(**(void **)(*(void *)(a3 + 832) + 40) + 40) + 272), v12, v13, v14, v15);
    if (v17) {
      return sub_1CD7DE5B4(a3, v17);
    }
  }
  uint64_t v18 = *(void *)(a3 + 840);
  if (v18
    && (*(void *)&long long v47 = a1,
        *((void *)&v47 + 1) = -1,
        long long v48 = 0u,
        long long v49 = 0u,
        llvm::AAResults::pointsToConstantMemory(v18, (uint64_t)&v47, 0)))
  {
    int v19 = 0;
    uint64_t v20 = *(void *)(a3 + 832) + 112;
    char v21 = 1;
  }
  else
  {
    char v21 = 0;
    uint64_t v22 = *(void *)(a3 + 832);
    uint64_t v20 = *(void *)(v22 + 192);
    int v19 = *(_DWORD *)(v22 + 200);
  }
  v23 = sub_1CD7DE5B4(a3, (unsigned __int8 *)a1);
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(a3 + 832);
  uint64_t v27 = v46;
  uint64_t v28 = *(void *)a3;
  int v29 = *(_DWORD *)(a3 + 816);
  v44 = 0;
  int v45 = v29;
  if (v28)
  {
    v30 = (unsigned __int8 **)(v28 + 48);
    if (v30 != &v44)
    {
      v31 = *v30;
      v44 = v31;
      if (v31) {
        llvm::MetadataTracking::track((uint64_t)&v44, v31, 2);
      }
    }
  }
  *(void *)&long long v41 = (unint64_t)a1 & 0xFFFFFFFFFFFFFFFBLL;
  *((void *)&v41 + 1) = 0;
  char v43 = 0;
  unsigned int v32 = *((_DWORD *)*a1 + 2);
  if ((v32 & 0xFE) == 0x12) {
    unsigned int v32 = *(_DWORD *)(*(void *)(*a1)[2] + 8);
  }
  unsigned int v42 = v32 >> 8;
  long long v47 = 0u;
  long long v48 = 0u;
  v33 = sub_1CD7F00F8(v26, v27, 0, (uint64_t)&v44, v20, v19, (uint64_t)v23, v25, &v41, 256, 0, 0, &v47, 0);
  if (v44)
  {
    int v34 = *v44;
    if ((v34 - 4) > 0x1E)
    {
      if ((v34 - 3) >= 0xFFFFFFFE) {
        v38 = v44;
      }
      else {
        v38 = 0;
      }
      if ((v34 - 3) < 0xFFFFFFFE)
      {
        if (v34 == 3) {
          *((void *)v44 + 1) = 0;
        }
        goto LABEL_26;
      }
      unint64_t v39 = (unint64_t)(v38 + 8);
      goto LABEL_36;
    }
    if ((v44[1] & 0x7F) == 2 || *((_DWORD *)v44 + 3))
    {
      uint64_t v40 = *((void *)v44 + 2);
      if ((v40 & 4) != 0)
      {
        unint64_t v39 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v39)
        {
LABEL_36:
          *(void *)&long long v47 = &v44;
          sub_1CC5FA668(v39 + 16, &v47);
        }
      }
    }
  }
LABEL_26:
  if ((v21 & 1) == 0)
  {
    unsigned int v35 = *(_DWORD *)(a3 + 112);
    if (v35 >= *(_DWORD *)(a3 + 116)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v36 = (uint64_t **)(*(void *)(a3 + 104) + 16 * v35);
    *v36 = v33;
    v36[1] = (uint64_t *)1;
    ++*(_DWORD *)(a3 + 112);
  }
  return v33;
}

BOOL sub_1CCFC21BC(uint64_t a1, unsigned __int8 *a2)
{
  v3 = (unsigned __int8 **)&a2[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  v4 = *v3;
  v5 = v3[4];
  uint64_t v6 = *(void *)(a1 + 832);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(void *)a1;
  int v9 = *(_DWORD *)(a1 + 816);
  int v29 = 0;
  int v30 = v9;
  if (v8)
  {
    v10 = (unsigned __int8 **)(v8 + 48);
    if (v10 != &v29)
    {
      v11 = *v10;
      int v29 = v11;
      if (v11) {
        llvm::MetadataTracking::track((uint64_t)&v29, v11, 2);
      }
    }
  }
  v12 = sub_1CD7D7360(a1);
  uint64_t v14 = v13;
  uint64_t v15 = sub_1CD7DE5B4(a1, v4);
  uint64_t v17 = v16;
  sub_1CD7DE5B4(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unsigned __int8 **, uint64_t *, uint64_t, uint64_t *, uint64_t))(*(void *)v7 + 56))(&v31, v7, v6, &v29, v12, v14, v15, v17);
  if (v29)
  {
    int v18 = *v29;
    if ((v18 - 4) <= 0x1E)
    {
      if ((v29[1] & 0x7F) != 2 && !*((_DWORD *)v29 + 3)) {
        goto LABEL_9;
      }
      uint64_t v27 = *((void *)v29 + 2);
      if ((v27 & 4) == 0) {
        goto LABEL_9;
      }
      unint64_t v22 = v27 & 0xFFFFFFFFFFFFFFF8;
      if (!v22) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
    if ((v18 - 3) >= 0xFFFFFFFE) {
      char v21 = v29;
    }
    else {
      char v21 = 0;
    }
    if ((v18 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v22 = (unint64_t)(v21 + 8);
LABEL_17:
      unsigned int v35 = &v29;
      sub_1CC5FA668(v22 + 16, &v35);
      goto LABEL_9;
    }
    if (v18 == 3) {
      *((void *)v29 + 1) = 0;
    }
  }
LABEL_9:
  uint64_t v19 = v31;
  if (v31)
  {
    int v23 = v32;
    int v29 = a2;
    uint64_t v24 = sub_1CD7E88EC((uint64_t *)(a1 + 8), &v29);
    v24[1] = v19;
    *((_DWORD *)v24 + 4) = v23;
    uint64_t v25 = *(void *)(a1 + 832);
    int v26 = v34;
    *(void *)(v25 + 192) = v33;
    *(_DWORD *)(v25 + 200) = v26;
  }
  return v19 != 0;
}

unint64_t sub_1CCFC2434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = a2;
  *(void *)&long long v57 = a2;
  *((void *)&v57 + 1) = a3;
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  unint64_t result = sub_1CB87DC14(*(void *)a1, *(void *)(**(void **)(v6[104] + 40) + 40) + 272, ***(llvm::EVT ****)(a1 + 16), 0);
  *(void *)&long long v56 = result;
  *((void *)&v56 + 1) = v8;
  **(void **)(a1 + 16) += 8;
  int v9 = (uint64_t *)(*(void *)(v4 + 40) + 16 * v3);
  uint64_t v10 = *v9;
  int v11 = result;
  if (result == *v9)
  {
    uint64_t v12 = v9[1];
    if ((_BYTE)result) {
      BOOL v13 = 1;
    }
    else {
      BOOL v13 = v8 == v12;
    }
    if (v13)
    {
LABEL_7:
      if (v11 == v10)
      {
        uint64_t v14 = *((void *)&v56 + 1);
        if (v11) {
          BOOL v15 = 1;
        }
        else {
          BOOL v15 = *((void *)&v56 + 1) == v12;
        }
        if (v15) {
          goto LABEL_63;
        }
      }
      else
      {
        if (v11)
        {
          BOOL v16 = (v11 - 120) >= 0x20 && (v11 - 2) >= 6;
          if (v16 && (v11 - 15) >= 0x3C) {
            goto LABEL_63;
          }
          goto LABEL_26;
        }
        uint64_t v14 = *((void *)&v56 + 1);
      }
      if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
        int v17 = *(unsigned __int8 *)(**(void **)(v14 + 16) + 8);
      }
      else {
        int v17 = *(_DWORD *)(v14 + 8);
      }
      if (v17 != 13) {
        goto LABEL_63;
      }
LABEL_26:
      if ((_BYTE)v10)
      {
        BOOL v18 = v10 - 120 >= 0x20 && v10 - 2 >= 6;
        if (v18 && v10 - 15 >= 0x3C) {
          goto LABEL_63;
        }
      }
      else
      {
        if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12) {
          int v19 = *(unsigned __int8 *)(**(void **)(v12 + 16) + 8);
        }
        else {
          int v19 = *(_DWORD *)(v12 + 8);
        }
        if (v19 != 13) {
          goto LABEL_63;
        }
      }
      uint64_t v20 = (llvm::APFloatBase *)v6[104];
      uint64_t v21 = *v6;
      int v22 = *((_DWORD *)v6 + 204);
      v54 = 0;
      int v55 = v22;
      if (v21)
      {
        int v23 = (unsigned __int8 **)(v21 + 48);
        if (v23 != &v54)
        {
          uint64_t v24 = *v23;
          v54 = v24;
          if (v24)
          {
            llvm::MetadataTracking::track((uint64_t)&v54, v24, 2);
            uint64_t v4 = v57;
          }
        }
      }
      uint64_t v26 = *((void *)&v56 + 1);
      uint64_t v25 = (llvm *)v56;
      uint64_t v27 = (void *)*((void *)&v57 + 1);
      uint64_t v28 = *((void *)v20 + 104);
      if (v28) {
        __int16 v29 = *(_WORD *)(v28 + 8);
      }
      else {
        __int16 v29 = 0;
      }
      int v30 = v20;
      uint64_t v31 = 201;
      uint64_t v32 = v4;
      goto LABEL_59;
    }
  }
  else if ((_BYTE)result)
  {
    uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v56);
    goto LABEL_48;
  }
  uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v56);
LABEL_48:
  uint64_t v35 = ExtendedSizeInBits;
  int v36 = v34;
  unint64_t result = (unint64_t)sub_1CD3E3904((unsigned int *)&v57);
  if (v35 != result || v36 != v37)
  {
    uint64_t v4 = v57;
    int v11 = v56;
    v44 = (uint64_t *)(*(void *)(v57 + 40) + 16 * DWORD2(v57));
    uint64_t v10 = *v44;
    uint64_t v12 = v44[1];
    goto LABEL_7;
  }
  v38 = (llvm::APFloatBase *)v6[104];
  uint64_t v39 = *v6;
  int v40 = *((_DWORD *)v6 + 204);
  v54 = 0;
  int v55 = v40;
  if (v39)
  {
    long long v41 = (unsigned __int8 **)(v39 + 48);
    if (v41 != &v54)
    {
      unsigned int v42 = *v41;
      v54 = v42;
      if (v42) {
        llvm::MetadataTracking::track((uint64_t)&v54, v42, 2);
      }
    }
  }
  uint64_t v26 = *((void *)&v56 + 1);
  uint64_t v25 = (llvm *)v56;
  uint64_t v27 = (void *)*((void *)&v57 + 1);
  uint64_t v32 = v57;
  uint64_t v43 = *((void *)v38 + 104);
  if (v43) {
    __int16 v29 = *(_WORD *)(v43 + 8);
  }
  else {
    __int16 v29 = 0;
  }
  int v30 = v38;
  uint64_t v31 = 216;
LABEL_59:
  unint64_t result = (unint64_t)sub_1CD7F3564(v30, (const char *)v31, (uint64_t)&v54, v25, v26, v32, v27, v29);
  *(void *)&long long v57 = result;
  DWORD2(v57) = v45;
  if (!v54) {
    goto LABEL_63;
  }
  int v46 = *v54;
  if ((v46 - 4) > 0x1E)
  {
    if ((v46 - 3) >= 0xFFFFFFFE) {
      v51 = v54;
    }
    else {
      v51 = 0;
    }
    if ((v46 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v52 = (unint64_t)(v51 + 8);
LABEL_71:
      v58 = &v54;
      unint64_t result = sub_1CC5FA668(v52 + 16, &v58);
      goto LABEL_63;
    }
    if (v46 == 3) {
      *((void *)v54 + 1) = 0;
    }
  }
  else if ((v54[1] & 0x7F) == 2 || *((_DWORD *)v54 + 3))
  {
    uint64_t v53 = *((void *)v54 + 2);
    if ((v53 & 4) != 0)
    {
      unint64_t v52 = v53 & 0xFFFFFFFFFFFFFFF8;
      if (v52) {
        goto LABEL_71;
      }
    }
  }
LABEL_63:
  uint64_t v47 = *(void *)(a1 + 24);
  unsigned int v48 = *(_DWORD *)(v47 + 8);
  if (v48 >= *(_DWORD *)(v47 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)v47 + 16 * v48) = v56;
  ++*(_DWORD *)(v47 + 8);
  uint64_t v49 = *(void *)(a1 + 32);
  unsigned int v50 = *(_DWORD *)(v49 + 8);
  if (v50 >= *(_DWORD *)(v49 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)v49 + 16 * v50) = v57;
  ++*(_DWORD *)(v49 + 8);
  return result;
}

void sub_1CCFC2800(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  __p = 0;
  v61 = 0;
  unint64_t v62 = 0;
  sub_1CD78A38C((uint64_t)&__p, a5);
  if (a5)
  {
    unsigned int v14 = a5 + a4;
    do
    {
      BOOL v15 = *(unsigned __int8 **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * a4);
      long long v57 = 0u;
      long long v58 = 0u;
      LODWORD(v59) = v59 & 0xC000;
      *((void *)&v59 + 1) = 0;
      *((void *)&v57 + 1) = sub_1CD7DE5B4(a1, v15);
      LODWORD(v58) = v16;
      *((void *)&v58 + 1) = *(void *)v15;
      sub_1CD80D26C((uint64_t)&v57, a3, a4);
      int v17 = v61;
      if ((unint64_t)v61 >= v62)
      {
        uint64_t v21 = __p;
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (unsigned char *)__p) >> 4);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0x555555555555555) {
          abort();
        }
        if (0x5555555555555556 * ((uint64_t)(v62 - (void)__p) >> 4) > v23) {
          unint64_t v23 = 0x5555555555555556 * ((uint64_t)(v62 - (void)__p) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v24 = 0x555555555555555;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24)
        {
          if (v24 > 0x555555555555555) {
            sub_1CB833614();
          }
          uint64_t v25 = (char *)operator new(48 * v24);
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v26 = &v25[48 * v22];
        long long v27 = v58;
        *(_OWORD *)uint64_t v26 = v57;
        *((_OWORD *)v26 + 1) = v27;
        *((_OWORD *)v26 + 2) = v59;
        uint64_t v28 = v26;
        if (v17 != v21)
        {
          do
          {
            long long v29 = *(v17 - 3);
            long long v30 = *(v17 - 1);
            *((_OWORD *)v28 - 2) = *(v17 - 2);
            *((_OWORD *)v28 - 1) = v30;
            *((_OWORD *)v28 - 3) = v29;
            v28 -= 48;
            v17 -= 3;
          }
          while (v17 != v21);
          int v17 = v21;
        }
        uint64_t v31 = &v25[48 * v24];
        uint64_t v20 = v26 + 48;
        __p = v28;
        v61 = v26 + 48;
        unint64_t v62 = (unint64_t)v31;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        long long v18 = v57;
        long long v19 = v59;
        v61[1] = v58;
        v17[2] = v19;
        _OWORD *v17 = v18;
        uint64_t v20 = v17 + 3;
      }
      v61 = v20;
      ++a4;
    }
    while (a4 != v14);
  }
  uint64_t v32 = *(void *)a1;
  int v33 = *(_DWORD *)(a1 + 816);
  *(void *)&long long v57 = 0;
  DWORD2(v57) = v33;
  BOOL v35 = v32 == 0;
  int v34 = (unsigned __int8 **)(v32 + 48);
  BOOL v35 = v35 || v34 == (unsigned __int8 **)&v57;
  if (!v35)
  {
    int v36 = *v34;
    *(void *)&long long v57 = v36;
    if (v36) {
      llvm::MetadataTracking::track((uint64_t)&v57, v36, 2);
    }
  }
  int v37 = (unsigned __int8 **)(a2 + 88);
  if (&v57 != (long long *)(a2 + 88))
  {
    v38 = *v37;
    if (!*v37) {
      goto LABEL_29;
    }
    int v49 = *v38;
    if ((v49 - 4) > 0x1E)
    {
      if ((v49 - 3) >= 0xFFFFFFFE) {
        unint64_t v52 = *v37;
      }
      else {
        unint64_t v52 = 0;
      }
      if ((v49 - 3) < 0xFFFFFFFE)
      {
        if (v49 == 3) {
          *((void *)v38 + 1) = 0;
        }
        goto LABEL_29;
      }
      unint64_t v51 = (unint64_t)(v52 + 8);
    }
    else if ((v38[1] & 0x7F) != 2 && !*((_DWORD *)v38 + 3) {
           || (uint64_t v50 = *((void *)v38 + 2), (v50 & 4) == 0)
    }
           || (unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_29:
      uint64_t v39 = (unsigned __int8 *)v57;
      *int v37 = (unsigned __int8 *)v57;
      if (v39) {
        llvm::MetadataTracking::track(a2 + 88, v39, 2);
      }
      goto LABEL_31;
    }
    v63 = (long long *)(a2 + 88);
    sub_1CC5FA668(v51 + 16, &v63);
    goto LABEL_29;
  }
LABEL_31:
  *(_DWORD *)(a2 + 96) = DWORD2(v57);
  *(void *)a2 = sub_1CD7D7360(a1);
  *(_DWORD *)(a2 + 8) = v40;
  int v41 = (*(unsigned __int16 *)(a3 + 18) >> 2) & 0x3FF;
  *(void *)(a2 + 16) = a8;
  *(void *)(a2 + 40) = a6;
  *(_DWORD *)(a2 + 48) = a7;
  uint64_t v43 = __p;
  unsigned int v42 = v61;
  *(_DWORD *)(a2 + 28) = -1431655765 * ((unint64_t)((char *)v61 - (unsigned char *)__p) >> 4);
  *(_DWORD *)(a2 + 32) = v41;
  v44 = *(void **)(a2 + 56);
  if (v44)
  {
    *(void *)(a2 + 64) = v44;
    operator delete(v44);
    uint64_t v43 = __p;
    unsigned int v42 = v61;
  }
  *(void *)(a2 + 56) = v43;
  *(void *)(a2 + 64) = v42;
  *(void *)(a2 + 72) = v62;
  v61 = 0;
  unint64_t v62 = 0;
  __p = 0;
  if (a9) {
    __int16 v45 = 128;
  }
  else {
    __int16 v45 = 0;
  }
  *(_WORD *)(a2 + 24) = v45 | (32 * (*(void *)(a3 + 8) != 0)) | *(_WORD *)(a2 + 24) & 0xFF5F;
  *(_WORD *)(a2 + 24) = *(_WORD *)(a2 + 24) & 0xFEFF | ((sub_1CC646CF4(a3, 4) != 0) << 8);
  if ((void)v57)
  {
    int v46 = *(unsigned __int8 *)v57;
    if ((v46 - 4) > 0x1E)
    {
      if ((v46 - 3) >= 0xFFFFFFFE) {
        uint64_t v47 = v57;
      }
      else {
        uint64_t v47 = 0;
      }
      if ((v46 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v48 = v47 + 8;
LABEL_48:
        v63 = &v57;
        sub_1CC5FA668(v48 + 16, &v63);
        goto LABEL_40;
      }
      if (v46 == 3) {
        *(void *)(v57 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v57 + 1) & 0x7F) == 2 || *(_DWORD *)(v57 + 12))
    {
      uint64_t v53 = *(void *)(v57 + 16);
      if ((v53 & 4) != 0)
      {
        unint64_t v48 = v53 & 0xFFFFFFFFFFFFFFF8;
        if (v48) {
          goto LABEL_48;
        }
      }
    }
  }
LABEL_40:
  if (__p)
  {
    v61 = __p;
    operator delete(__p);
  }
}

uint64_t *sub_1CCFC2C3C(uint64_t *result, unsigned int a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8 = a2;
  int v9 = result;
  int v10 = *((unsigned __int8 *)result + 16);
  if (v10 == 84)
  {
    uint64_t v11 = 0;
  }
  else if (v10 == 39)
  {
    uint64_t v11 = (*((_DWORD *)result + 20) + 1);
  }
  else
  {
    uint64_t v11 = 2;
  }
  int v12 = 0;
  int v13 = *((_DWORD *)result + 5);
  uint64_t v14 = -(uint64_t)(v13 & 0x7FFFFFF);
  if (v13 < 0)
  {
    int v33 = &result[-4 * (v13 & 0x7FFFFFF)];
    uint64_t v34 = *(v33 - 1);
    if ((v34 & 0xFFFFFFFF0) != 0) {
      int v12 = *((_DWORD *)v33 - 3) - *(_DWORD *)((char *)v33 - v34);
    }
    else {
      int v12 = 0;
    }
  }
  unint64_t v15 = (-32 * v11 + 32 * (unint64_t)-v12 - 32 * v14 - 32) >> 5;
  if (v15 != a2)
  {
    do
    {
      unint64_t result = sub_1CD7DE5B4(a5, (unsigned __int8 *)v9[4 * v8 + -4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF)]);
      int v16 = result;
      long long v18 = v17;
      switch(((unsigned __int16)(*((_WORD *)result + 12) - 11) >> 2) | (unsigned __int16)((*((_WORD *)result + 12) - 11) << 14))
      {
        case 0:
        case 6:
          uint64_t v20 = sub_1CD7EBF14(*(void *)(a5 + 832), 2, a3, (llvm *)6, 0, 1, 0);
          unint64_t v21 = *(unsigned int *)(a4 + 8);
          if (v21 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v22 = (uint64_t **)(*(void *)a4 + 16 * v21);
          *unint64_t v22 = v20;
          v22[1] = v19;
          ++*(_DWORD *)(a4 + 8);
          uint64_t v23 = v16[10];
          unsigned int v24 = *(_DWORD *)(v23 + 32);
          if (v24 > 0x40) {
            uint64_t v25 = **(void **)(v23 + 24);
          }
          else {
            uint64_t v25 = (uint64_t)(*(void *)(v23 + 24) << -(char)v24) >> -(char)v24;
          }
          unint64_t result = sub_1CD7EBF14(*(void *)(a5 + 832), v25, a3, (llvm *)6, 0, 1, 0);
          goto LABEL_12;
        case 1:
        case 7:
          uint64_t v26 = *(void *)(a5 + 832);
          int v27 = *((_DWORD *)result + 19);
          uint64_t v28 = *(void *)(**(void **)(v26 + 40) + 40);
          unsigned __int8 v29 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v26 + 24) + 32))(*(void *)(v26 + 24), v28 + 272, *(unsigned int *)(v28 + 276));
          unint64_t result = sub_1CD7ED208(v26, v27, (llvm *)v29, 0, 1);
LABEL_12:
          int v16 = result;
          long long v18 = v30;
          break;
        default:
          break;
      }
      unint64_t v31 = *(unsigned int *)(a4 + 8);
      if (v31 >= *(unsigned int *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v32 = (uint64_t **)(*(void *)a4 + 16 * v31);
      *uint64_t v32 = v16;
      v32[1] = v18;
      ++*(_DWORD *)(a4 + 8);
      ++v8;
    }
    while (v15 != v8);
  }
  return result;
}

void sub_1CCFC2F18(uint64_t a1, llvm::Function *this)
{
  v346[96] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(uint64_t **)(a1 + 304);
  uint64_t v4 = v3[104];
  uint64_t v5 = *v3;
  LODWORD(v3) = *((_DWORD *)v3 + 204);
  v321 = 0;
  int v322 = (int)v3;
  uint64_t v6 = (unsigned __int8 **)(v5 + 48);
  if (v5) {
    BOOL v7 = v6 == &v321;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    unsigned int v8 = *v6;
    v321 = v8;
    if (v8) {
      llvm::MetadataTracking::track((uint64_t)&v321, v8, 2);
    }
  }
  uint64_t v9 = *(void *)(**(void **)(v4 + 40) + 40);
  v344 = v346;
  uint64_t v345 = 0x1000000000;
  uint64_t v10 = *((void *)this + 14);
  if (v10 && (*(unsigned char *)(v10 + 14) & 2) != 0) {
    goto LABEL_364;
  }
  v295 = (llvm::DataLayout *)(v9 + 272);
  uint64_t v11 = *(unsigned __int8 **)(a1 + 264);
  if (!v11[48])
  {
    v333 = &v335;
    uint64_t v334 = 0x100000000;
    uint64_t v279 = *(void *)(a1 + 344);
    unint64_t v280 = llvm::PointerType::get(**(llvm::PointerType ***)(*((void *)this + 3) + 16), (llvm::Type *)*(unsigned int *)(v9 + 276));
    llvm::ComputeValueVTs(v279, v295, v280, (uint64_t)&v333, 0, 0, 0);
    char v281 = sub_1CB87E160(*(void *)(a1 + 344), *(llvm::LLVMContext **)(v4 + 56), *(void *)v333, *((void *)v333 + 1));
    long long v282 = *(_OWORD *)v333;
    v339 = (void *)8;
    LODWORD(v340) = 0;
    char v342 = 1;
    uint64_t v343 = 0xFFFFFFFFLL;
    BYTE4(v340) = v281;
    long long v341 = v282;
    v283 = (long long *)sub_1CD58643C((uint64_t)&v344, (unint64_t)&v339, 1);
    v284 = (char *)v344 + 48 * v345;
    long long v285 = *v283;
    long long v286 = v283[2];
    v284[1] = v283[1];
    v284[2] = v286;
    _OWORD *v284 = v285;
    LODWORD(v345) = v345 + 1;
    if (v333 != &v335) {
      free(v333);
    }
    uint64_t v11 = *(unsigned __int8 **)(a1 + 264);
  }
  uint64_t v318 = 0;
  uint64_t v319 = 0;
  unsigned int v320 = 0;
  v323 = v11;
  v339 = (void *)1;
  for (uint64_t i = 8; i != 136; i += 16)
    *(void **)((char *)&v339 + i) = (void *)-4096;
  int v13 = *(_DWORD *)(*(void *)v11 + 96);
  if ((v13 & 0x7FFFFFFF) != 0)
  {
    unint64_t v14 = (8 * v13 / 3u + 1) | ((unint64_t)(8 * v13 / 3u + 1) >> 1);
    unint64_t v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    unsigned int v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
    unsigned int v17 = v341;
    if (v339) {
      unsigned int v17 = 8;
    }
    if (v17 <= v16)
    {
      sub_1CCFC7570((uint64_t)&v339, v16 + 1);
      uint64_t v11 = v323;
    }
  }
  v328 = &v323;
  uint64_t v329 = (uint64_t)&v339;
  uint64_t v18 = *(void *)(*(void *)v11 + 80);
  if (v18) {
    uint64_t v19 = v18 - 24;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = v19 + 40;
  uint64_t v21 = *(void *)(v19 + 48);
  uint64_t v301 = v4;
  v311 = this;
  if (v21 != v19 + 40)
  {
    do
    {
      if (v21) {
        uint64_t v22 = v21 - 24;
      }
      else {
        uint64_t v22 = 0;
      }
      int v23 = *(unsigned __int8 *)(v22 + 16);
      if (v23 == 61) {
        uint64_t v24 = v22;
      }
      else {
        uint64_t v24 = 0;
      }
      if (v21 && v23 == 61)
      {
        uint64_t v25 = (_DWORD *)sub_1CCFC73E8((uint64_t)&v328, *(llvm::Value **)(v24 - 64));
        if (v25) {
          *uint64_t v25 = 1;
        }
        uint64_t v26 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v24 - 32));
        int v27 = (_DWORD *)sub_1CCFC73E8((uint64_t)&v328, v26);
        if (!v27) {
          goto LABEL_52;
        }
        uint64_t v28 = v27;
        if (*v27) {
          goto LABEL_52;
        }
        unsigned __int8 v29 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v24 - 64));
        if (v29) {
          BOOL v30 = *((unsigned char *)v29 + 16) == 21;
        }
        else {
          BOOL v30 = 0;
        }
        if (!v30) {
          goto LABEL_40;
        }
        unint64_t v31 = (llvm::Type **)v29;
        if (llvm::Argument::hasPassPointeeByValueCopyAttr(v29)) {
          goto LABEL_40;
        }
        uint64_t v32 = *v31;
        if (llvm::Type::isEmptyTy(*v31)) {
          goto LABEL_40;
        }
        int v312 = v13;
        unint64_t v305 = sub_1CB83544C((uint64_t)v295, (uint64_t)v32) + 7;
        BOOL v303 = v38 == 1;
        uint64_t v39 = (llvm::Type *)*((void *)v26 + 8);
        unint64_t v40 = (unint64_t)(sub_1CB83544C((uint64_t)v295, (uint64_t)v39) + 7) >> 3;
        BOOL v299 = v41 == 1;
        char Alignment = llvm::DataLayout::getAlignment(v295, v39, 1);
        if (((1 << Alignment) + v40 - 1) & -(1 << Alignment)) != v305 >> 3 || ((v303 ^ v299)) {
          goto LABEL_40;
        }
        uint64_t v43 = *v31;
        uint64_t v44 = sub_1CB83544C((uint64_t)v295, (uint64_t)*v31);
        int v306 = v45;
        BOOL v7 = v44 == ((sub_1CB83544C((uint64_t)v295, (uint64_t)v43) + 7) & 0xFFFFFFFFFFFFFFF8);
        int v13 = v312;
        if (!v7 || v306 != (v46 == 1))
        {
LABEL_40:
          *uint64_t v28 = 1;
          uint64_t v4 = v301;
          this = v311;
          goto LABEL_52;
        }
        if (v320)
        {
          unsigned int v48 = (v320 - 1) & ((v31 >> 4) ^ (v31 >> 9));
          int v49 = *(llvm::Type ***)(v318 + 24 * v48);
          if (v31 == v49) {
            goto LABEL_40;
          }
          int v50 = 1;
          while (v49 != (llvm::Type **)-4096)
          {
            unsigned int v51 = v48 + v50++;
            unsigned int v48 = v51 & (v320 - 1);
            int v49 = *(llvm::Type ***)(v318 + 24 * v48);
            if (v31 == v49) {
              goto LABEL_40;
            }
          }
        }
        *uint64_t v28 = 2;
        v333 = v31;
        uint64_t v334 = (uint64_t)v26;
        *(void *)&long long v335 = v24;
        sub_1CD5A0A5C((uint64_t)&v331, (uint64_t)&v318, (uint64_t *)&v333, &v334);
        uint64_t v4 = v301;
        this = v311;
        if (v319 == v312) {
          break;
        }
      }
      else if ((v23 - 66) >= 0xD && !sub_1CBF63B28(v22) && !sub_1CC27D470(v22))
      {
        int v33 = *(_DWORD *)(v22 + 20);
        if ((v33 & 0x40000000) != 0)
        {
          BOOL v35 = *(llvm::Value ***)(v22 - 8);
          uint64_t v34 = v33 & 0x7FFFFFF;
          if (v34)
          {
LABEL_48:
            uint64_t v36 = 32 * v34;
            do
            {
              int v37 = (_DWORD *)sub_1CCFC73E8((uint64_t)&v328, *v35);
              if (v37) {
                *int v37 = 1;
              }
              v35 += 4;
              v36 -= 32;
            }
            while (v36);
          }
        }
        else
        {
          uint64_t v34 = v33 & 0x7FFFFFF;
          BOOL v35 = (llvm::Value **)(v22 - 32 * v34);
          if (v34) {
            goto LABEL_48;
          }
        }
      }
LABEL_52:
      uint64_t v21 = *(void *)(v21 + 8);
    }
    while (v21 != v20);
  }
  if ((v339 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v340, 8);
  }
  uint64_t v52 = sub_1CB923B44(this);
  uint64_t v291 = v53;
  v54 = (void *)a1;
  int v55 = v295;
  if (v52 != v53)
  {
    uint64_t v56 = v52;
    uint64_t v290 = v318;
    int v294 = v320;
    unsigned int v289 = v320 - 1;
    do
    {
      int v307 = *(_DWORD *)(v56 + 32);
      v339 = &v341;
      uint64_t v340 = 0x400000000;
      llvm::ComputeValueVTs(v54[43], (llvm::DataLayout *)(*(void *)(**(void **)(v4 + 40) + 40) + 272), *(void *)v56, (uint64_t)&v339, 0, 0, 0);
      uint64_t ParamByValType = *(void *)v56;
      uint64_t v58 = *(void *)(v56 + 8);
      uint64_t v59 = *(void *)(v56 + 24);
      uint64_t v62 = *(void *)(v59 + 112);
      v60 = (llvm::AttributeList *)(v59 + 112);
      uint64_t v61 = v62;
      uint64_t v300 = v56;
      if (v62)
      {
        unsigned int v63 = *(_DWORD *)(v56 + 32) + 2;
        if (v63 < *(_DWORD *)(v61 + 8))
        {
          uint64_t v124 = *(void *)(v61 + 8 * v63 + 40);
          if (v124)
          {
            if ((*(unsigned char *)(v124 + 20) & 0x20) != 0) {
              uint64_t ParamByValType = llvm::AttributeList::getParamByValType(v60, *(_DWORD *)(v56 + 32));
            }
          }
        }
      }
      int v309 = (*(uint64_t (**)(void, uint64_t, void, BOOL, llvm::DataLayout *))(**(void **)(a1 + 344)
                                                                                          + 1912))(*(void *)(a1 + 344), ParamByValType, (*((unsigned __int16 *)this + 9) >> 4) & 0x3FF, *(_DWORD *)(*((void *)this + 3) + 8) > 0xFFu, v55);
      uint64_t v298 = v340;
      if (v340)
      {
        uint64_t v64 = 0;
        int v65 = 0;
        BOOL v304 = v58 != 0;
        v292 = (llvm::SmallPtrSetImplBase *)(v290
                                           + 24 * (v289 & ((v300 >> 4) ^ (v300 >> 9))));
        do
        {
          long long v331 = *((_OWORD *)v339 + v64);
          llvm::EVT::getTypeForEVT((llvm::EVT *)&v331, *(llvm::LLVMContext **)(v4 + 56));
          int v67 = *(_DWORD *)(*(void *)v300 + 8);
          int v68 = *(_DWORD *)(*(void *)v300 + 8) >> 8;
          uint64_t v69 = (unint64_t)(v67 == 15) << 31;
          if (v67 != 15) {
            int v68 = 0;
          }
          int v313 = v68;
          uint64_t v70 = *(void *)(*(void *)(v300 + 24) + 112);
          if (v70)
          {
            uint64_t v71 = (*(_DWORD *)(v300 + 32) + 2);
            uint64_t v72 = a1;
            if (v71 < *(_DWORD *)(v70 + 8))
            {
              uint64_t v73 = v70 + 40;
              uint64_t v74 = *(void *)(v73 + 8 * v71);
              if (v74) {
                LODWORD(v74) = (*(unsigned __int8 *)(v74 + 20) >> 3) & 1;
              }
              v69 |= v74;
              uint64_t v75 = *(void *)(v73 + 8 * v71);
              if (v75) {
                v69 |= 2 * (*(unsigned char *)(v75 + 18) & 1u);
              }
              uint64_t v76 = *(void *)(v73 + 8 * v71);
              if (v76 && (*(unsigned char *)(v76 + 13) & 4) != 0)
              {
                uint64_t v77 = v69 | 0x20000;
                if (v64) {
                  uint64_t v77 = v69;
                }
                BOOL v78 = v67 == 16 && (*((_WORD *)v311 + 9) & 0x3FF0) == 1280;
                uint64_t v79 = v77 | 0x10000;
                if (!v78) {
                  uint64_t v79 = v69;
                }
                uint64_t v69 = v79 | 4;
              }
              uint64_t v80 = *(void *)(v73 + 8 * v71);
              if (v80) {
                v69 |= (4 * *(unsigned __int8 *)(v80 + 21)) & 8;
              }
              uint64_t v81 = *(void *)(v73 + 8 * v71);
              if (v81) {
                v69 |= (unint64_t)(*(unsigned char *)(v81 + 20) & 1) << 12;
              }
              uint64_t v82 = *(void *)(v73 + 8 * v71);
              if (v82) {
                v69 |= (unint64_t)(*(unsigned char *)(v82 + 19) & 0x40) << 7;
              }
              uint64_t v83 = *(void *)(v73 + 8 * v71);
              if (v83 && *(char *)(v83 + 19) < 0) {
                v69 |= 0x4000uLL;
              }
              uint64_t v84 = *(void *)(v73 + 8 * v71);
              if (v84) {
                v69 |= (*(unsigned __int8 *)(v84 + 20) >> 1) & 0x10;
              }
              uint64_t v85 = *(void *)(v73 + 8 * v71);
              if (v85) {
                v69 |= (2 * *(unsigned __int8 *)(v85 + 20)) & 0x20;
              }
              uint64_t v86 = *(void *)(v73 + 8 * v71);
              if (v86 && *(char *)(v86 + 20) < 0) {
                v69 |= 0x210uLL;
              }
              uint64_t v87 = *(void *)(v73 + 8 * v71);
              if (v87 && (*(unsigned char *)(v87 + 21) & 1) != 0) {
                v69 |= 0x410uLL;
              }
            }
          }
          else
          {
            uint64_t v72 = a1;
          }
          int v88 = (*(uint64_t (**)(void, uint64_t, llvm::DataLayout *))(**(void **)(v72 + 344) + 608))(*(void *)(v72 + 344), v66, v55);
          unint64_t v89 = ((v88 << 23) + 0x800000) & 0xF800000 | v69 & 0xFFFFFFFFF07FFFFFLL;
          if ((v69 & 0x630) != 0)
          {
            PointeeInMemoryValueType = (llvm::Type *)llvm::Argument::getPointeeInMemoryValueType((llvm::Argument *)v300);
            uint64_t v91 = sub_1CB83544C((uint64_t)v55, (uint64_t)PointeeInMemoryValueType);
            BOOL v93 = v92 == 1;
            char v95 = llvm::DataLayout::getAlignment(v55, PointeeInMemoryValueType, 1);
            if (v93) {
            ParamStackchar Alignment = llvm::AttributeList::getParamStackAlignment((llvm::AttributeList *)(*(void *)(v300 + 24) + 112), *(_DWORD *)(v300 + 32));
            }
            uint64_t v72 = a1;
            if ((unsigned __int16)ParamStackAlignment <= 0xFFu)
            {
              uint64_t v97 = *(void *)(*(void *)(v300 + 24) + 112);
              if (!v97
                || (unsigned int v98 = *(_DWORD *)(v300 + 32) + 2, v98 >= *(_DWORD *)(v97 + 8))
                || (v99 = *(llvm::AttributeSetNode **)(v97 + 8 * v98 + 40)) == 0
                || (ParamStackchar Alignment = llvm::AttributeSetNode::getAlignment(v99),
                    (unsigned __int16)ParamStackAlignment <= 0xFFu))
              {
                ParamStackchar Alignment = 63
                                    - __clz((*(uint64_t (**)(void, llvm::Type *, llvm::DataLayout *))(**(void **)(a1 + 344) + 576))(*(void *)(a1 + 344), PointeeInMemoryValueType, v55));
              }
            }
            v89 |= (((1 << v95) + 0xFFFFFFFFLL + ((unint64_t)(v91 + 7) >> 3)) & -(1 << v95)) << 32;
          }
          else
          {
            int v100 = v88;
            ParamStackchar Alignment = llvm::AttributeList::getParamStackAlignment((llvm::AttributeList *)(*(void *)(v300 + 24) + 112), *(_DWORD *)(v300 + 32));
            if ((ParamStackAlignment & 0xFF00) == 0) {
              ParamStackchar Alignment = v100;
            }
          }
          unint64_t v101 = v89 & 0xFFFFFFFFFF87FFFFLL | ((((unint64_t)((ParamStackAlignment << 19) + 0x80000) >> 19) & 0xF) << 19);
          unsigned int v102 = *(_DWORD *)(v300 + 32) + 2;
          uint64_t v103 = *(void *)(*(void *)(v300 + 24) + 112);
          if (v103)
          {
            if (v102 < *(_DWORD *)(v103 + 8))
            {
              uint64_t v119 = *(void *)(v103 + 8 * v102 + 40);
              if (v119)
              {
                if ((*(unsigned char *)(v119 + 14) & 4) != 0) {
                  unint64_t v101 = v89 & 0xFFFFFFFF00000000 | v89 & 0xFF87FFBF | ((((unint64_t)((ParamStackAlignment << 19) + 0x80000) >> 19) & 0xF) << 19) & 0xFFFFFFBF | 0x40;
                }
              }
            }
          }
          if (v309) {
            uint64_t v104 = v101 | 0x20000000;
          }
          else {
            uint64_t v104 = v101;
          }
          if (v294)
          {
            uint64_t v105 = *(void *)v292;
            if (v300 == *(void *)v292)
            {
LABEL_134:
              v104 |= 0x40000000uLL;
            }
            else
            {
              int v121 = 1;
              unsigned int v122 = v289 & ((v300 >> 4) ^ (v300 >> 9));
              while (v105 != -4096)
              {
                unsigned int v123 = v122 + v121++;
                unsigned int v122 = v123 & v289;
                uint64_t v105 = *(void *)(v290 + 24 * (v123 & v289));
                if (v300 == v105) {
                  goto LABEL_134;
                }
              }
            }
          }
          if (v103)
          {
            if (v102 < *(_DWORD *)(v103 + 8))
            {
              uint64_t v120 = *(void *)(v103 + 8 * v102 + 40);
              if (v120) {
                v104 |= (2 * *(unsigned __int8 *)(v120 + 17)) & 0x80;
              }
            }
          }
          LOBYTE(v328) = (*(uint64_t (**)(void, void, void, void, void))(**(void **)(v72 + 344)
                                                                                           + 592))(*(void *)(v72 + 344), *(void *)(*(void *)(v72 + 296) + 56), (*((unsigned __int16 *)v311 + 9) >> 4) & 0x3FF, v331, *((void *)&v331 + 1));
          int v106 = (*(uint64_t (**)(void))(**(void **)(v72 + 344) + 600))();
          if (v106)
          {
            int v107 = v106;
            int v108 = 0;
            int v109 = -v106;
            do
            {
              char v110 = (char)v328;
              long long v111 = v331;
              uint64_t v112 = sub_1CB87E200((unsigned __int8 *)&v328);
              v333 = (void *)v104;
              LODWORD(v334) = v313;
              BOOL v336 = v304;
              int v337 = v307;
              int v338 = v65 + v108 * ((unint64_t)(v112 + 7) >> 3);
              BYTE4(v334) = v110;
              long long v335 = v111;
              if (v107 == 1 || v108)
              {
                if (v108)
                {
                  if (v109 + v108 == -1) {
                    int v113 = 8390656;
                  }
                  else {
                    int v113 = 0x800000;
                  }
                  LODWORD(v333) = v113 | v104 & 0xF07FFFFF;
                }
              }
              else
              {
                LODWORD(v333) = v104 | 0x100;
              }
              v114 = (_OWORD *)sub_1CD58643C((uint64_t)&v344, (unint64_t)&v333, 1);
              v115 = (char *)v344 + 48 * v345;
              long long v117 = v114[1];
              long long v116 = v114[2];
              _OWORD *v115 = *v114;
              v115[1] = v117;
              v115[2] = v116;
              LODWORD(v345) = v345 + 1;
              ++v108;
            }
            while (v109 + v108);
          }
          char v118 = v309;
          if (v64 != v298 - 1) {
            char v118 = 0;
          }
          if (v118) {
            *((_DWORD *)v344 + 12 * v345 - 12) |= 0x10000000u;
          }
          v65 += sub_1CB896FB8((unsigned __int8 *)&v331);
          ++v64;
          uint64_t v4 = v301;
          int v55 = v295;
        }
        while (v64 != v298);
      }
      if (v339 != &v341) {
        free(v339);
      }
      uint64_t v56 = v300 + 40;
      v54 = (void *)a1;
      this = v311;
    }
    while (v300 + 40 != v291);
  }
  v339 = &v341;
  uint64_t v340 = 0x800000000;
  uint64_t v125 = (*(uint64_t (**)(void, void, void, void, BOOL, void **, unsigned __int8 **, uint64_t, void **))(*(void *)v54[43] + 1832))(v54[43], *(void *)(v4 + 192), *(void *)(v4 + 200), (*((unsigned __int16 *)this + 9) >> 4) & 0x3FF, *(_DWORD *)(*((void *)this + 3) + 8) > 0xFFu, &v344, &v321, v4, &v339);
  *(void *)(v4 + 192) = v125;
  *(_DWORD *)(v4 + 200) = v126;
  if (!*(unsigned char *)(v54[33] + 48))
  {
    uint64_t v128 = v125;
    uint64_t v129 = v126;
    v333 = &v335;
    uint64_t v334 = 0x100000000;
    uint64_t v130 = v54[43];
    uint64_t v131 = *(void *)(**(void **)(v4 + 40) + 40);
    v132 = (llvm::DataLayout *)(v131 + 272);
    unint64_t v133 = llvm::PointerType::get(**(llvm::PointerType ***)(*((void *)this + 3) + 16), (llvm::Type *)*(unsigned int *)(v131 + 276));
    llvm::ComputeValueVTs(v130, v132, v133, (uint64_t)&v333, 0, 0, 0);
    uint64_t v134 = *(unsigned __int8 *)v333;
    unsigned __int8 v135 = sub_1CB87E160(v54[43], *(llvm::LLVMContext **)(v54[37] + 56), v134, 0);
    v136 = sub_1CCFA51B8(v4, (const llvm::APInt *)&v321, (long long *)v339, 1, v135, (llvm *)v134, 0, 0, ((unint64_t)*((unsigned __int16 *)this + 9) >> 4) & 0x3FF | 0x100000000, 0);
    uint64_t v138 = v137;
    uint64_t v139 = *(void *)(*(void *)(*(void *)(v54[38] + 832) + 40) + 40);
    uint64_t v140 = (*(uint64_t (**)(void))(*(void *)v54[43] + 424))();
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v139, "", 0);
    *(void *)(*(void *)(v139 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v140 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v142 = *(void *)(v139 + 8);
    if (v142) {
      (*(void (**)(uint64_t))(*(void *)v142 + 24))(v142);
    }
    *(_DWORD *)(v54[33] + 52) = IncompleteVirtualRegister;
    v143 = (uint64_t *)v54[38];
    v144 = (void *)v143[104];
    uint64_t v145 = *v143;
    LODWORD(v143) = *((_DWORD *)v143 + 204);
    *(void *)&long long v331 = 0;
    DWORD2(v331) = v143;
    if (v145)
    {
      v146 = (long long *)(v145 + 48);
      if (v146 != &v331)
      {
        v147 = *(unsigned __int8 **)v146;
        *(void *)&long long v331 = v147;
        if (v147) {
          llvm::MetadataTracking::track((uint64_t)&v331, v147, 2);
        }
      }
    }
    uint64_t v148 = v136[5] + 16 * v138;
    uint64_t v149 = sub_1CD7EEB94((uint64_t)v144, IncompleteVirtualRegister, *(llvm **)v148, *(void *)(v148 + 8));
    uint64_t v152 = v144[104];
    uint64_t v4 = v301;
    if (v152) {
      LOWORD(v152) = *(_WORD *)(v152 + 8);
    }
    v153 = sub_1CD7F5D38(v144, (const char *)0x31, (const llvm::APInt *)&v331, (llvm *)1, 0, v128, v129, v151, v149, v150, (uint64_t)v136, v138, SHIDWORD(v138), v152);
    unsigned int v155 = v154;
    if (!(void)v331) {
      goto LABEL_185;
    }
    int v156 = *(unsigned __int8 *)v331;
    if ((v156 - 4) > 0x1E)
    {
      if ((v156 - 3) >= 0xFFFFFFFE) {
        uint64_t v277 = v331;
      }
      else {
        uint64_t v277 = 0;
      }
      if ((v156 - 3) < 0xFFFFFFFE)
      {
        if (v156 == 3) {
          *(void *)(v331 + 8) = 0;
        }
        goto LABEL_185;
      }
      unint64_t v278 = v277 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v331 + 1) & 0x7F) != 2 && !*(_DWORD *)(v331 + 12)) {
        goto LABEL_185;
      }
      uint64_t v288 = *(void *)(v331 + 16);
      if ((v288 & 4) == 0) {
        goto LABEL_185;
      }
      unint64_t v278 = v288 & 0xFFFFFFFFFFFFFFF8;
      if (!v278) {
        goto LABEL_185;
      }
    }
    v328 = &v331;
    sub_1CC5FA668(v278 + 16, &v328);
LABEL_185:
    unint64_t v157 = v129 & 0xFFFFFFFF00000000 | v155;
    *(void *)(v301 + 192) = v153;
    *(_DWORD *)(v301 + 200) = v155;
    if (v333 != &v335) {
      free(v333);
    }
    v296 = v153;
    unint64_t v297 = v157;
    unsigned int v127 = 1;
    goto LABEL_188;
  }
  v296 = (uint64_t *)v125;
  unint64_t v297 = v126;
  unsigned int v127 = 0;
LABEL_188:
  v333 = &v335;
  uint64_t v334 = 0x400000000;
  uint64_t v315 = 0;
  uint64_t v316 = 0;
  unsigned int v317 = 0;
  uint64_t v158 = sub_1CB923B44(v311);
  uint64_t v314 = v159;
  if (v158 != v159)
  {
    uint64_t v160 = v158;
    v293 = (llvm::SmallPtrSetImplBase *)(v54 + 45);
    do
    {
      *(void *)&long long v331 = v332;
      *((void *)&v331 + 1) = 0x400000000;
      v328 = v330;
      uint64_t v329 = 0x400000000;
      llvm::ComputeValueVTs(v54[43], (llvm::DataLayout *)(*(void *)(**(void **)(v4 + 40) + 40) + 272), *(void *)v160, (uint64_t)&v328, 0, 0, 0);
      unint64_t v161 = v329;
      if (!v329) {
        goto LABEL_225;
      }
      BOOL v162 = *(void *)(v160 + 8) != 0;
      if ((*((unsigned char *)v344 + 48 * v127 + 3) & 0x40) == 0) {
        goto LABEL_199;
      }
      uint64_t v163 = *((void *)v339 + 2 * v127);
      if (!v163 || *(_WORD *)(v163 + 24) != 253) {
        goto LABEL_199;
      }
      uint64_t v164 = *(void *)(*(void *)(v163 + 32) + 40);
      int v165 = *(unsigned __int16 *)(v164 + 24);
      if (v165 == 39 || v165 == 15)
      {
        unint64_t v222 = v329;
        uint64_t v223 = *(void *)(a1 + 264);
        v323 = 0;
        uint64_t v224 = v318;
        unsigned int v225 = v320;
        if (sub_1CD45B528(v318, v320, v160, &v323)) {
          v226 = v323;
        }
        else {
          v226 = (unsigned __int8 *)(v224 + 24 * v225);
        }
        v327 = (unsigned __int8 **)*((void *)v226 + 1);
        int v227 = *(_DWORD *)(v164 + 76);
        v228 = sub_1CD78CBDC((_DWORD *)(v223 + 176), &v327);
        int v229 = *((_DWORD *)v228 + 2);
        uint64_t v230 = *(void *)(*(void *)(v223 + 8) + 56);
        int v231 = *(_DWORD *)(v230 + 32);
        unsigned int v232 = v231 + v227;
        uint64_t v233 = *(void *)(v230 + 8);
        uint64_t v234 = *(void *)(v233 + 40 * (v231 + v227) + 8);
        uint64_t v235 = v233 + 40 * (v231 + v229);
        uint64_t v237 = *(void *)(v235 + 8);
        v236 = (void *)(v235 + 8);
        if (v234 == v237
          && (__clz(1 << *((_WORD *)v327 + 9)) ^ 0x3F) <= *(unsigned __int8 *)(v233 + 40 * v232 + 16))
        {
          void *v236 = -1;
          *(unsigned char *)(v233 + 40 * v232 + 17) = 0;
          *((_DWORD *)v228 + 2) = v227;
          int v325 = v229;
          int v326 = v227;
          sub_1CD7E87F8((uint64_t)&v323, (uint64_t)&v315, &v325, &v326);
          unint64_t v161 = v222;
          if (v334 >= (unint64_t)HIDWORD(v334)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v54 = (void *)a1;
          v243 = (char *)v333 + 16 * v334;
          void *v243 = v163;
          v243[1] = 1;
          LODWORD(v334) = v334 + 1;
          uint64_t v244 = *((void *)v226 + 2);
          uint64_t v245 = *(void *)(a1 + 368);
          uint64_t v246 = *(unsigned int *)(a1 + 380);
          if (v245 == *(void *)(a1 + 360))
          {
            if (v246)
            {
              v247 = 0;
              uint64_t v248 = 8 * v246;
              v249 = *(void **)(a1 + 368);
              while (*v249 != v244)
              {
                if (*v249 == -2) {
                  v247 = v249;
                }
                ++v249;
                v248 -= 8;
                if (!v248)
                {
                  if (!v247) {
                    goto LABEL_306;
                  }
                  void *v247 = v244;
                  --*(_DWORD *)(a1 + 384);
                  goto LABEL_330;
                }
              }
              goto LABEL_330;
            }
LABEL_306:
            unsigned int v250 = *(_DWORD *)(a1 + 376);
            if (v246 < v250)
            {
              *(_DWORD *)(a1 + 380) = v246 + 1;
              *(void *)(v245 + 8 * v246) = v244;
LABEL_330:
              uint64_t v260 = *(void *)(v160 + 8);
              if (v260)
              {
                while (*(void *)(v260 + 24) == v244)
                {
                  uint64_t v260 = *(void *)(v260 + 8);
                  if (!v260) {
                    goto LABEL_199;
                  }
                }
                BOOL v162 = 1;
              }
              goto LABEL_199;
            }
          }
          else
          {
            unsigned int v250 = *(_DWORD *)(a1 + 376);
          }
          if (3 * v250 <= 4 * ((int)v246 - *(_DWORD *)(a1 + 384)))
          {
            if (v250 >= 0x40) {
              v250 *= 2;
            }
            else {
              unsigned int v250 = 128;
            }
          }
          else if (v250 - v246 >= v250 >> 3)
          {
            goto LABEL_311;
          }
          llvm::SmallPtrSetImplBase::Grow(v293, v250);
          unsigned int v250 = *(_DWORD *)(a1 + 376);
          uint64_t v245 = *(void *)(a1 + 368);
LABEL_311:
          unsigned int v251 = v250 - 1;
          unsigned int v252 = (v250 - 1) & ((v244 >> 4) ^ (v244 >> 9));
          v253 = (void *)(v245 + 8 * v252);
          uint64_t v254 = *v253;
          if (*v253 == -1)
          {
            v255 = 0;
LABEL_323:
            if (v255) {
              v259 = v255;
            }
            else {
              v259 = v253;
            }
            if (*v259 != v244)
            {
              if (*v259 == -2) {
                --*(_DWORD *)(a1 + 384);
              }
              else {
                ++*(_DWORD *)(a1 + 380);
              }
              void *v259 = v244;
            }
          }
          else
          {
            v255 = 0;
            int v256 = 1;
            while (v254 != v244)
            {
              if (v255) {
                BOOL v257 = 0;
              }
              else {
                BOOL v257 = v254 == -2;
              }
              if (v257) {
                v255 = v253;
              }
              unsigned int v258 = v252 + v256++;
              unsigned int v252 = v258 & v251;
              v253 = (void *)(v245 + 8 * (v258 & v251));
              uint64_t v254 = *v253;
              if (*v253 == -1) {
                goto LABEL_323;
              }
            }
          }
          goto LABEL_330;
        }
        v54 = (void *)a1;
        unint64_t v161 = v222;
      }
      else
      {
        v54 = (void *)a1;
      }
      if (!(*(unsigned int (**)(void))(*(void *)v54[43] + 1768))(v54[43])) {
        goto LABEL_202;
      }
LABEL_199:
      uint64_t v167 = *(void *)(*(void *)(v160 + 24) + 112);
      if (!v167) {
        goto LABEL_203;
      }
      unsigned int v168 = *(_DWORD *)(v160 + 32) + 2;
      if (v168 < *(_DWORD *)(v167 + 8))
      {
        uint64_t v167 = *(void *)(v167 + 8 * v168 + 40);
        if (v167) {
          LODWORD(v167) = *(char *)(v167 + 19) < 0;
        }
      }
      else
      {
LABEL_202:
        LODWORD(v167) = 0;
      }
LABEL_203:
      int v308 = v167;
      if (v162) {
        int v169 = 1;
      }
      else {
        int v169 = v167;
      }
      if ((v169 & 1) == 0)
      {
        uint64_t v183 = v54[38];
        v184 = (uint64_t *)((char *)v339 + 16 * v127);
        uint64_t v185 = *v184;
        uint64_t v186 = v184[1];
        v323 = (unsigned __int8 *)v160;
        v187 = sub_1CD7E88EC((uint64_t *)(v183 + 32), &v323);
        v187[1] = v185;
        *((_DWORD *)v187 + 4) = v186;
        uint64_t v188 = *((void *)v339 + 2 * v127);
        v54 = (void *)a1;
        int v189 = *(unsigned __int16 *)(v188 + 24);
        if (v189 == 39 || v189 == 15)
        {
          uint64_t v191 = *(void *)(a1 + 264);
          int v192 = *(_DWORD *)(v188 + 76);
          v323 = (unsigned __int8 *)v160;
          *((_DWORD *)sub_1CD4B4E64((uint64_t *)(v191 + 200), &v323) + 2) = v192;
          v54 = (void *)a1;
        }
      }
      uint64_t v170 = 0;
      unint64_t v310 = v161;
      do
      {
        v171 = *(llvm **)((char *)v328 + v170);
        uint64_t v172 = *(void *)((char *)v328 + v170 + 8);
        unsigned __int8 v173 = (*(uint64_t (**)(void, void, void, llvm *, uint64_t))(*(void *)v54[43] + 592))(v54[43], *(void *)(v54[37] + 56), (*((unsigned __int16 *)v311 + 9) >> 4) & 0x3FF, v171, v172);
        uint64_t v174 = (*(uint64_t (**)(void))(*(void *)v54[43] + 600))();
        if (v169)
        {
          uint64_t v175 = *(void *)(*(void *)(v160 + 24) + 112);
          if (v175 && (uint64_t v176 = (*(_DWORD *)(v160 + 32) + 2), v176 < *(_DWORD *)(v175 + 8)))
          {
            uint64_t v181 = v175 + 40;
            uint64_t v182 = *(void *)(v181 + 8 * v176);
            if (v182 && (*(unsigned char *)(v182 + 18) & 1) != 0)
            {
              uint64_t v177 = 3;
            }
            else
            {
              uint64_t v177 = *(void *)(v181 + 8 * v176);
              if (v177)
              {
                if ((*(unsigned char *)(v177 + 20) & 8) != 0) {
                  uint64_t v177 = 4;
                }
                else {
                  uint64_t v177 = 0;
                }
              }
            }
          }
          else
          {
            uint64_t v177 = 0;
          }
          v179 = sub_1CCFA51B8(v301, (const llvm::APInt *)&v321, (long long *)v339 + v127, v174, v173, v171, v172, 0, ((unint64_t)*((unsigned __int16 *)v311 + 9) >> 4) & 0x3FF | 0x100000000, v177);
          if (DWORD2(v331) >= (unint64_t)HIDWORD(v331)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v180 = (uint64_t **)(v331 + 16 * DWORD2(v331));
          *v180 = v179;
          v180[1] = v178;
          ++DWORD2(v331);
        }
        v127 += v174;
        v170 += 16;
        LODWORD(v161) = v161 - 1;
      }
      while (v161);
      uint64_t v4 = v301;
      if (!DWORD2(v331)) {
        goto LABEL_225;
      }
      v193 = (uint64_t *)v331;
      int v194 = *(unsigned __int16 *)(*(void *)v331 + 24);
      if (v194 == 39 || v194 == 15)
      {
        uint64_t v196 = v54[33];
        int v197 = *(_DWORD *)(*(void *)v331 + 76);
        v323 = (unsigned __int8 *)v160;
        *((_DWORD *)sub_1CD4B4E64((uint64_t *)(v196 + 200), &v323) + 2) = v197;
        v54 = (void *)a1;
        v193 = (uint64_t *)v331;
      }
      v198 = (uint64_t *)v54[38];
      uint64_t v199 = *v198;
      LODWORD(v198) = *((_DWORD *)v198 + 204);
      v323 = 0;
      LODWORD(v324) = v198;
      if (v199)
      {
        v200 = (uint64_t *)(v199 + 48);
        if (v200 != (uint64_t *)&v323)
        {
          v201 = (unsigned __int8 *)*v200;
          v323 = v201;
          if (v201) {
            llvm::MetadataTracking::track((uint64_t)&v323, v201, 2);
          }
        }
      }
      v202 = sub_1CD7F9858((void *)v301, v193, v310, (const llvm::APInt *)&v323);
      int v204 = v203;
      if (v323)
      {
        int v205 = *v323;
        if ((v205 - 4) > 0x1E)
        {
          if ((v205 - 3) >= 0xFFFFFFFE) {
            v238 = v323;
          }
          else {
            v238 = 0;
          }
          if ((v205 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v239 = (unint64_t)(v238 + 8);
LABEL_293:
            v327 = &v323;
            sub_1CC5FA668(v239 + 16, &v327);
            goto LABEL_251;
          }
          if (v205 == 3) {
            *((void *)v323 + 1) = 0;
          }
        }
        else if ((v323[1] & 0x7F) == 2 || *((_DWORD *)v323 + 3))
        {
          uint64_t v261 = *((void *)v323 + 2);
          if ((v261 & 4) != 0)
          {
            unint64_t v239 = v261 & 0xFFFFFFFFFFFFFFF8;
            if (v239) {
              goto LABEL_293;
            }
          }
        }
      }
LABEL_251:
      uint64_t v206 = v54[38];
      v323 = (unsigned __int8 *)v160;
      v207 = sub_1CD7E88EC((uint64_t *)(v206 + 8), &v323);
      v207[1] = v202;
      *((_DWORD *)v207 + 4) = v204;
      if ((*(_WORD *)(v54[31] + 1020) & 0x800) == 0 && *((_WORD *)v202 + 12) == 54)
      {
        uint64_t v208 = *(void *)(v202[4] + 40 * *(unsigned __int8 *)(*(void *)(**(void **)(v301 + 40) + 40) + 272));
        if (v208)
        {
          if (*(_WORD *)(v208 + 24) == 253)
          {
            uint64_t v209 = *(void *)(*(void *)(v208 + 32) + 40);
            int v210 = *(unsigned __int16 *)(v209 + 24);
            if (v210 == 39 || v210 == 15)
            {
              uint64_t v241 = v54[33];
              int v242 = *(_DWORD *)(v209 + 76);
              v323 = (unsigned __int8 *)v160;
              *((_DWORD *)sub_1CD4B4E64((uint64_t *)(v241 + 200), &v323) + 2) = v242;
            }
          }
        }
      }
      int v212 = *((unsigned __int16 *)v202 + 12);
      if (v212 == 4)
      {
        v202 = *(uint64_t **)v202[4];
        int v212 = *((unsigned __int16 *)v202 + 12);
      }
      int v213 = v308;
      if (v212 != 50) {
        int v213 = 0;
      }
      if (v213 != 1) {
        goto LABEL_267;
      }
      int v214 = *(_DWORD *)(*(void *)(v202[4] + 40) + 76);
      if (v214 < 0)
      {
        uint64_t v215 = *(void *)(a1 + 272);
        uint64_t v216 = *(void *)(v215 + 104);
        v323 = *(unsigned __int8 **)(*(void *)(a1 + 264) + 640);
        uint64_t v324 = v216;
        *((_DWORD *)sub_1CD57EB4C(v215 + 32, (uint64_t *)&v323) + 4) = v214;
        int v212 = *((unsigned __int16 *)v202 + 12);
LABEL_267:
        if (v212 == 50)
        {
          int v217 = *(_DWORD *)(*(void *)(v202[4] + 40) + 76);
          if (v217 < 0)
          {
            v240 = (uint64_t *)(*(void *)(a1 + 264) + 80);
            v323 = (unsigned __int8 *)v160;
            *((_DWORD *)sub_1CD3CDD24(v240, &v323) + 2) = v217;
            v54 = (void *)a1;
            goto LABEL_225;
          }
        }
      }
      v54 = (void *)a1;
      if ((*(_WORD *)(*(void *)(a1 + 248) + 1020) & 0x800) == 0)
      {
        uint64_t v218 = *(void *)(*(void *)(v160 + 24) + 80);
        if (v218) {
          uint64_t v219 = v218 - 24;
        }
        else {
          uint64_t v219 = 0;
        }
        uint64_t v220 = *(void *)(v160 + 8);
        if (!v220) {
          goto LABEL_225;
        }
        while (1)
        {
          uint64_t v221 = *(void *)(v220 + 24);
          if (*(void *)(v221 + 40) != v219 || *(unsigned char *)(v221 + 16) == 31) {
            break;
          }
          uint64_t v220 = *(void *)(v220 + 8);
          if (!v220) {
            goto LABEL_225;
          }
        }
LABEL_279:
        sub_1CD3CD784(*(void *)(a1 + 264), (const llvm::Value *)v160);
        sub_1CD7D79A4(*(void *)(a1 + 304), (llvm::Type **)v160);
        goto LABEL_225;
      }
      if (*(void *)(v160 + 8)) {
        goto LABEL_279;
      }
LABEL_225:
      if (v328 != v330) {
        free(v328);
      }
      if ((unsigned char *)v331 != v332) {
        free((void *)v331);
      }
      v160 += 40;
    }
    while (v160 != v314);
  }
  v263 = v296;
  int v262 = v297;
  if (v334)
  {
    if (v334 >= HIDWORD(v334)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v264 = (uint64_t **)((char *)v333 + 16 * v334);
    *v264 = v296;
    v264[1] = (uint64_t *)v297;
    uint64_t v265 = (v334 + 1);
    LODWORD(v334) = v334 + 1;
    uint64_t v266 = *(void *)(v4 + 832);
    if (v266) {
      uint64_t v267 = *(unsigned __int16 *)(v266 + 8);
    }
    else {
      uint64_t v267 = 0;
    }
    v263 = sub_1CD7FF4E8((void *)v4, (const char *)2, (const llvm::APInt *)&v321, (llvm *)1, 0, (uint64_t *)v333, v265, v267);
    int v262 = v268;
  }
  *(void *)(v4 + 192) = v263;
  *(_DWORD *)(v4 + 200) = v262;
  uint64_t v269 = v54[35];
  uint64_t v270 = *(unsigned int *)(v269 + 776);
  if (v270 && v316)
  {
    uint64_t v271 = 32 * v270;
    v272 = (_DWORD *)(*(void *)(v269 + 768) + 16);
    do
    {
      v273 = sub_1CD53E7FC(&v315, v272);
      if ((int *)(v315 + 8 * v317) != v273) {
        _DWORD *v272 = v273[1];
      }
      v272 += 8;
      v271 -= 32;
    }
    while (v271);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  MEMORY[0x1D25D9CD0](v315, 4);
  if (v333 != &v335) {
    free(v333);
  }
  if (v339 != &v341) {
    free(v339);
  }
  MEMORY[0x1D25D9CD0](v318, 8);
  if (v344 != v346) {
    free(v344);
  }
LABEL_364:
  if (v321)
  {
    int v274 = *v321;
    if ((v274 - 4) > 0x1E)
    {
      if ((v274 - 3) >= 0xFFFFFFFE) {
        v275 = v321;
      }
      else {
        v275 = 0;
      }
      if ((v274 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v276 = (unint64_t)(v275 + 8);
LABEL_374:
        v344 = &v321;
        sub_1CC5FA668(v276 + 16, &v344);
        return;
      }
      if (v274 == 3) {
        *((void *)v321 + 1) = 0;
      }
    }
    else if ((v321[1] & 0x7F) == 2 || *((_DWORD *)v321 + 3))
    {
      uint64_t v287 = *((void *)v321 + 2);
      if ((v287 & 4) != 0)
      {
        unint64_t v276 = v287 & 0xFFFFFFFFFFFFFFF8;
        if (v276) {
          goto LABEL_374;
        }
      }
    }
  }
}

void sub_1CCFC4B58(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4, llvm::MachineBasicBlock *a5)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a1 + 912);
  uint64_t v7 = *(void *)(a2 + 8);
  unsigned int v8 = *(llvm::MachineBasicBlock ***)(*(void *)a2 + 8);
  uint64_t v158 = *(llvm::MachineFunction **)(v6 + 8);
  uint64_t v161 = (uint64_t)v158 + 320;
  if (v8 == (llvm::MachineBasicBlock **)((char *)v158 + 320)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(*(void *)a2 + 8);
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (*(uint64_t **)a2 == a4 && -858993459 * ((unint64_t)(v10 - v7) >> 3) == 1)
  {
    uint64_t v12 = *(void *)(v7 + 8);
    if (v12 == *(void *)(v7 + 16))
    {
      uint64_t v13 = *(void *)(v10 + 8);
      if (v13 == *(void *)(v10 + 16) && *(void *)(v7 + 24) == *(void *)(v10 + 24))
      {
        uint64_t v170 = *(llvm::MachineBasicBlock **)(v6 + 32);
        if (*(_DWORD *)(v13 + 32) >= 0x41u) {
          operator new[]();
        }
        int8x8_t v14 = (int8x8_t)(*(void *)(v12 + 24) ^ *(void *)(v13 + 24));
        DWORD2(v178) = *(_DWORD *)(v13 + 32);
        *(int8x8_t *)&long long v178 = v14;
        uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] == 1)
        {
          v99 = sub_1CD7DE5B4(a1, a3);
          uint64_t v101 = (uint64_t)v99;
          uint64_t v102 = v5;
          uint64_t v103 = v100;
          uint64_t v104 = v99[5] + 16 * v100;
          int v106 = *(llvm **)v104;
          uint64_t v105 = *(void *)(v104 + 8);
          uint64_t v107 = *(void *)v102;
          LODWORD(v102) = *(_DWORD *)(v102 + 816);
          uint64_t v191 = 0;
          int v192 = v102;
          if (v107)
          {
            int v108 = (unsigned __int8 **)(v107 + 48);
            if (v108 != &v191)
            {
              uint64_t v191 = *v108;
              if (v191) {
                llvm::MetadataTracking::track((uint64_t)&v191, v191, 2);
              }
            }
          }
          uint64_t v109 = *(void *)(a1 + 832);
          uint64_t v110 = sub_1CD7EBB14(v109, (llvm::LLVMContext *)&v178, (const llvm::APInt *)&v191, (uint64_t)v106, v105, 0, 0);
          uint64_t v113 = *(void *)(v109 + 832);
          if (v113) {
            LOWORD(v113) = *(_WORD *)(v113 + 8);
          }
          v114 = sub_1CCFDED5C(v109, 172, (const llvm::APInt *)&v191, v106, v105, v101, v103, v112, v110, v111, v113);
          uint64_t v166 = v115;
          uint64_t v168 = (uint64_t)v114;
          long long v116 = *(void **)(a1 + 832);
          if (*(_DWORD *)(v13 + 32) > 0x40u) {
            operator new[]();
          }
          long long v117 = (unsigned __int8 **)(*(void *)(v12 + 24) | *(void *)(v13 + 24));
          unsigned int v190 = *(_DWORD *)(v13 + 32);
          int v189 = v117;
          uint64_t v118 = sub_1CD7EBB14((uint64_t)v116, (llvm::LLVMContext *)&v189, (const llvm::APInt *)&v191, (uint64_t)v106, v105, 0, 0);
          uint64_t v120 = v119;
          uint64_t v121 = sub_1CD7EE368(v116, 0x11u);
          uint64_t v124 = v116[104];
          if (v124) {
            LOWORD(v124) = *(_WORD *)(v124 + 8);
          }
          uint64_t v125 = sub_1CD7F5D38(v116, (const char *)0xC1, (const llvm::APInt *)&v191, (llvm *)2, 0, v168, v166, v123, v118, v120, v121, v122, SHIDWORD(v122), v124);
          uint64_t v127 = v126;
          if (v190 >= 0x41 && v189) {
            MEMORY[0x1D25D9CB0](v189, 0x1000C8000313F17);
          }
          uint64_t v128 = *(unsigned int *)(v10 + 32);
          uint64_t v129 = *(unsigned int *)(v7 + 32);
          unint64_t v130 = v129 + v128;
          int v131 = v129 + v128;
          if (v130 <= 0x80000000) {
            int v132 = v131;
          }
          else {
            int v132 = 0x80000000;
          }
          sub_1CD7DE748(a1, (llvm::MachineBasicBlock *)a4, *(llvm::MachineBasicBlock **)(v7 + 24), v132);
          if (v170) {
            int EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability((uint64_t)v170, a4[2], 0);
          }
          else {
            int EdgeProbability = -1;
          }
          sub_1CD7DE748(a1, (llvm::MachineBasicBlock *)a4, a5, EdgeProbability);
          uint64_t v134 = *(void **)(a1 + 832);
          sub_1CD3D61B4((unsigned int *)(a1 + 384), *(unsigned char **)(a1 + 672), (unsigned char *)(*(void *)(a1 + 672) + 16 * *(unsigned int *)(a1 + 680)));
          *(_DWORD *)(a1 + 680) = 0;
          unsigned __int8 v135 = sub_1CD7D7210((uint64_t *)a1, a1 + 384);
          uint64_t v137 = v136;
          uint64_t v138 = sub_1CD7EDC88(*(void **)(a1 + 832), *(void *)(v7 + 24));
          uint64_t v141 = v134[104];
          if (v141) {
            LOWORD(v141) = *(_WORD *)(v141 + 8);
          }
          uint64_t v142 = sub_1CD7F5D38(v134, (const char *)0x103, (const llvm::APInt *)&v191, (llvm *)1, 0, (uint64_t)v135, v137, v140, (uint64_t)v125, v127, (uint64_t)v138, v139, SHIDWORD(v139), v141);
          uint64_t v144 = v143;
          uint64_t v145 = *(void **)(a1 + 832);
          v146 = sub_1CD7EDC88(v145, (uint64_t)a5);
          uint64_t v149 = v145[104];
          if (v149) {
            LOWORD(v149) = *(_WORD *)(v149 + 8);
          }
          uint64_t v150 = sub_1CCFDED5C((uint64_t)v145, 256, (const llvm::APInt *)&v191, (llvm *)1, 0, (uint64_t)v142, v144, v148, (uint64_t)v146, v147, v149);
          uint64_t v151 = *(void *)(a1 + 832);
          *(void *)(v151 + 192) = v150;
          *(_DWORD *)(v151 + 200) = v152;
          if (!v191) {
            goto LABEL_178;
          }
          int v153 = *v191;
          if ((v153 - 4) > 0x1E)
          {
            if ((v153 - 3) >= 0xFFFFFFFE) {
              unsigned int v154 = v191;
            }
            else {
              unsigned int v154 = 0;
            }
            if ((v153 - 3) < 0xFFFFFFFE)
            {
              if (v153 == 3) {
                *((void *)v191 + 1) = 0;
              }
              goto LABEL_178;
            }
            unint64_t v155 = (unint64_t)(v154 + 8);
          }
          else
          {
            if ((v191[1] & 0x7F) != 2 && !*((_DWORD *)v191 + 3)) {
              goto LABEL_178;
            }
            uint64_t v156 = *((void *)v191 + 2);
            if ((v156 & 4) == 0) {
              goto LABEL_178;
            }
            unint64_t v155 = v156 & 0xFFFFFFFFFFFFFFF8;
            if (!v155) {
              goto LABEL_178;
            }
          }
          int v189 = &v191;
          sub_1CC5FA668(v155 + 16, &v189);
LABEL_178:
          if (DWORD2(v178) >= 0x41 && (void)v178) {
            MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
          }
          return;
        }
      }
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 824) + 552))
  {
    unint64_t v16 = *(void *)(a2 + 8);
    unint64_t v17 = *(void *)(a2 + 16) + 40;
    unint64_t v18 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v16) >> 3));
    uint64_t v19 = v17 == v16 ? 0 : v18;
    sub_1CCFC8E38(v16, v17, v19, 1);
    unint64_t v21 = *(void *)(a2 + 8);
    unint64_t v20 = *(void *)(a2 + 16);
    if (v21 < v20)
    {
      unint64_t v22 = *(void *)(a2 + 16);
      while (*(_DWORD *)(v22 - 8) <= *(_DWORD *)(v20 + 32))
      {
        if (!*(_DWORD *)(v22 - 40) && *(void *)(v22 - 16) == v9)
        {
          uint64_t v23 = *(void *)(v22 - 8);
          long long v24 = *(_OWORD *)(v22 - 40);
          long long v25 = *(_OWORD *)(v22 - 24);
          int v26 = *(_DWORD *)(v20 + 32);
          long long v27 = *(_OWORD *)(v20 + 16);
          *(_OWORD *)(v22 - 40) = *(_OWORD *)v20;
          *(_OWORD *)(v22 - 24) = v27;
          *(_DWORD *)(v22 - 8) = v26;
          *(_OWORD *)unint64_t v20 = v24;
          *(_OWORD *)(v20 + 16) = v25;
          *(_DWORD *)(v20 + 32) = v23;
          break;
        }
        v22 -= 40;
        if (v21 >= v22) {
          break;
        }
      }
    }
  }
  uint64_t v28 = a5;
  unsigned __int8 v29 = *(int **)(a2 + 8);
  unint64_t v30 = *(void *)(a2 + 16);
  if (v30 >= (unint64_t)v29)
  {
    unint64_t v31 = *(void *)(a2 + 8);
    unsigned int v32 = *(_DWORD *)(a2 + 40);
    do
    {
      uint64_t v33 = *(unsigned int *)(v31 + 32);
      unint64_t v34 = v33 + v32;
      unsigned int v35 = v33 + v32;
      if (v34 <= 0x80000000) {
        unsigned int v32 = v35;
      }
      else {
        unsigned int v32 = 0x80000000;
      }
      v31 += 40;
    }
    while (v30 >= v31);
    uint64_t v36 = *(const llvm::BasicBlock ***)a2;
    unint64_t v159 = (unint64_t)*(unsigned int *)(a2 + 40) >> 1;
    unint64_t v167 = *(void *)(a2 + 16);
    while (1)
    {
      int v37 = (uint64_t *)v36;
      if (v29 == *(int **)(a2 + 16))
      {
        BOOL v38 = llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)v28 + 2), 1)[16] == 35;
        uint64_t v36 = (const llvm::BasicBlock **)v28;
      }
      else
      {
        MachineBasicBlock = (const llvm::BasicBlock **)llvm::MachineFunction::CreateMachineBasicBlock(v158, v36[2]);
        llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v161, (uint64_t)MachineBasicBlock);
        uint64_t v87 = *v8;
        *MachineBasicBlock = *v8;
        MachineBasicBlock[1] = (const llvm::BasicBlock *)v8;
        *((void *)v87 + 1) = MachineBasicBlock;
        unsigned __int8 *v8 = (llvm::MachineBasicBlock *)MachineBasicBlock;
        sub_1CD7DE9A0(v5, a3);
        uint64_t v36 = MachineBasicBlock;
        BOOL v38 = 0;
      }
      unsigned int v39 = v29[8];
      if (v32 >= v39) {
        v32 -= v39;
      }
      else {
        unsigned int v32 = 0;
      }
      int v40 = *v29;
      if (*v29)
      {
        if (v40 == 2)
        {
          BOOL v165 = v38;
          uint64_t v172 = (llvm::MachineBasicBlock *)v36;
          unsigned int v64 = v29[6];
          uint64_t v65 = *(void *)(*(void *)(v5 + 856) + 56);
          uint64_t v163 = v65 + 192 * v64;
          uint64_t v66 = *(unsigned int *)(v163 + 72);
          if (v66)
          {
            uint64_t v67 = 32 * v66;
            int v68 = (llvm::MachineBasicBlock ***)(*(void *)(v163 + 64) + 8);
            do
            {
              uint64_t v69 = *v68;
              v68 += 4;
              llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v161, (uint64_t)v69);
              uint64_t v70 = *v8;
              *uint64_t v69 = *v8;
              v69[1] = (llvm::MachineBasicBlock *)v8;
              *((void *)v70 + 1) = v69;
              unsigned __int8 *v8 = (llvm::MachineBasicBlock *)v69;
              v67 -= 32;
            }
            while (v67);
          }
          uint64_t v71 = v65 + 192 * v64;
          *(_DWORD *)(v71 + 180) = v32;
          uint64_t v72 = (_DWORD *)(v71 + 180);
          *(void *)(v72 - 33) = v37;
          uint64_t v36 = (const llvm::BasicBlock **)v172;
          *(void *)(v72 - 31) = v172;
          if (!*((unsigned char *)v72 - 134))
          {
            uint64_t v73 = v65 + 192 * v64;
            uint64_t v74 = *(unsigned int *)(v73 + 176);
            unint64_t v75 = v74 + v159;
            unsigned int v76 = v74 + v159;
            if (v75 > 0x80000000) {
              unsigned int v76 = 0x80000000;
            }
            *(_DWORD *)(v73 + 176) = v76;
            int v77 = v32 - v159;
            if (v32 < v159) {
              int v77 = 0;
            }
            *uint64_t v72 = v77;
          }
          uint64_t v28 = a5;
          unint64_t v30 = v167;
          if (v165) {
            *(unsigned char *)(v65 + 192 * v64 + 184) = 1;
          }
          uint64_t v5 = a1;
          if (v37 == a4)
          {
            sub_1CD7E0980(a1, v163, (uint64_t)a4);
            uint64_t v36 = (const llvm::BasicBlock **)v172;
            *(unsigned char *)(v65 + 192 * v64 + 45) = 1;
          }
        }
        else if (v40 == 1)
        {
          BOOL v164 = v38;
          int v41 = (unsigned int **)v37;
          v171 = (llvm::MachineBasicBlock *)v36;
          unsigned int v162 = v29[6];
          uint64_t v157 = *(void *)(*(void *)(v5 + 856) + 32);
          uint64_t v42 = v157 + 80 * v162;
          uint64_t v43 = *(llvm::MachineBasicBlock **)(v42 + 64);
          llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v161, (uint64_t)v43);
          uint64_t v44 = *v8;
          *(void *)uint64_t v43 = *v8;
          *((void *)v43 + 1) = v8;
          *((void *)v44 + 1) = v43;
          unsigned __int8 *v8 = v43;
          uint64_t v45 = v29[8];
          uint64_t v46 = *((void *)v43 + 11);
          uint64_t v47 = *((void *)v43 + 12);
          if (v46 == v47)
          {
LABEL_48:
            int v49 = v32;
          }
          else
          {
            uint64_t v48 = 0;
            while (*(llvm::MachineBasicBlock **)(v46 + v48) != v28)
            {
              v48 += 8;
              if (v46 + v48 == v47) {
                goto LABEL_48;
              }
            }
            if (v45 + v159 <= 0x80000000) {
              LODWORD(v45) = v45 + v159;
            }
            else {
              LODWORD(v45) = 0x80000000;
            }
            if (v32 >= v159) {
              int v49 = v32 - v159;
            }
            else {
              int v49 = 0;
            }
            int v92 = (unsigned int *)*((void *)v43 + 14);
            BOOL v93 = (unsigned int *)*((void *)v43 + 15);
            if (v92 != v93) {
              *(unsigned int *)((char *)v92 + (v48 >> 1)) = v159;
            }
            sub_1CC2BE0A8(v92, v93);
          }
          if (v164)
          {
            *(unsigned char *)(v42 + 49) = 1;
          }
          else if (!*(unsigned char *)(v42 + 49))
          {
            sub_1CD7DE748(v5, (llvm::MachineBasicBlock *)v41, v171, v49);
          }
          sub_1CD7DE748(v5, (llvm::MachineBasicBlock *)v41, v43, v45);
          sub_1CC2BE0A8(v41[14], v41[15]);
          *(void *)(v42 + 40) = v41;
          uint64_t v36 = (const llvm::BasicBlock **)v171;
          *(void *)(v157 + 80 * v162 + 72) = v171;
          unint64_t v30 = v167;
          if (v41 == (unsigned int **)a4)
          {
            sub_1CD7DFAD0(v5, v42 + 56, v42, (uint64_t)a4);
            uint64_t v36 = (const llvm::BasicBlock **)v171;
            *(unsigned char *)(v42 + 48) = 1;
          }
        }
        goto LABEL_94;
      }
      uint64_t v50 = v5;
      unsigned int v51 = v37;
      uint64_t v52 = *((void *)v29 + 1);
      uint64_t v53 = *((void *)v29 + 2);
      if (v52 == v53) {
        v54 = a3;
      }
      else {
        v54 = (unsigned __int8 *)*((void *)v29 + 1);
      }
      if (v52 == v53) {
        int v55 = 0;
      }
      else {
        int v55 = a3;
      }
      if (v52 == v53) {
        int v56 = 17;
      }
      else {
        int v56 = 21;
      }
      if (v38) {
        int v57 = 15;
      }
      else {
        int v57 = v56;
      }
      uint64_t v58 = *((void *)v29 + 3);
      uint64_t v59 = *(void *)v50;
      int v60 = *(_DWORD *)(v50 + 816);
      uint64_t v176 = 0;
      int v177 = v60;
      if (!v59 || (uint64_t v61 = (unsigned __int8 **)(v59 + 48), v61 == &v176))
      {
        uint64_t v62 = 0;
      }
      else
      {
        uint64_t v62 = *v61;
        uint64_t v176 = v62;
        if (v62)
        {
          unsigned int v63 = v36;
          llvm::MetadataTracking::track((uint64_t)&v176, v62, 2);
          uint64_t v36 = v63;
          unsigned int v39 = v29[8];
          uint64_t v62 = v176;
        }
      }
      LODWORD(v178) = v57;
      *((void *)&v178 + 1) = v54;
      v179 = v55;
      uint64_t v180 = v53;
      uint64_t v181 = v58;
      BOOL v78 = v36;
      uint64_t v182 = v36;
      uint64_t v183 = v51;
      uint64_t v79 = v51;
      v184 = v62;
      if (!v62)
      {
        int v185 = v177;
        uint64_t v186 = 0;
        unsigned int v187 = v39;
        unsigned int v188 = v32;
        uint64_t v28 = a5;
        unint64_t v30 = v167;
        uint64_t v5 = a1;
        goto LABEL_88;
      }
      llvm::MetadataTracking::track((uint64_t)&v184, v62, 2);
      int v185 = v177;
      uint64_t v186 = 0;
      unsigned int v187 = v39;
      unsigned int v188 = v32;
      uint64_t v28 = a5;
      unint64_t v30 = v167;
      uint64_t v5 = a1;
      if (!v176) {
        goto LABEL_88;
      }
      int v80 = *v176;
      if ((v80 - 4) <= 0x1E) {
        break;
      }
      if ((v80 - 3) >= 0xFFFFFFFE) {
        int v88 = v176;
      }
      else {
        int v88 = 0;
      }
      if ((v80 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v82 = (unint64_t)(v88 + 8);
LABEL_102:
        uint64_t v191 = (unsigned __int8 *)&v176;
        sub_1CC5FA668(v82 + 16, &v191);
        goto LABEL_88;
      }
      if (v80 == 3) {
        *((void *)v176 + 1) = 0;
      }
LABEL_88:
      if (v79 == a4)
      {
        sub_1CD7DF1BC(v5, (uint64_t)&v178, (uint64_t)a4);
      }
      else
      {
        uint64_t v83 = *(void *)(v5 + 856);
        unint64_t v84 = *(void *)(v83 + 16);
        if (v84 < *(void *)(v83 + 24)) {
          uint64_t v85 = sub_1CD616B8C(v84, &v178) + 88;
        }
        else {
          uint64_t v85 = sub_1CC7039C8((long long **)(v83 + 8), &v178);
        }
        *(void *)(v83 + 16) = v85;
      }
      uint64_t v36 = v78;
      if (v186)
      {
        int v89 = *v186;
        if ((v89 - 4) > 0x1E)
        {
          if ((v89 - 3) >= 0xFFFFFFFE) {
            v94 = v186;
          }
          else {
            v94 = 0;
          }
          if ((v89 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v91 = (unint64_t)(v94 + 8);
LABEL_133:
            uint64_t v191 = (unsigned __int8 *)&v186;
            sub_1CC5FA668(v91 + 16, &v191);
            uint64_t v36 = v78;
            goto LABEL_93;
          }
          if (v89 == 3) {
            *((void *)v186 + 1) = 0;
          }
        }
        else if ((v186[1] & 0x7F) == 2 || *((_DWORD *)v186 + 3))
        {
          uint64_t v90 = *((void *)v186 + 2);
          if ((v90 & 4) != 0)
          {
            unint64_t v91 = v90 & 0xFFFFFFFFFFFFFFF8;
            if (v91) {
              goto LABEL_133;
            }
          }
        }
      }
LABEL_93:
      if (v184)
      {
        int v95 = *v184;
        if ((v95 - 4) > 0x1E)
        {
          if ((v95 - 3) >= 0xFFFFFFFE) {
            unsigned int v98 = v184;
          }
          else {
            unsigned int v98 = 0;
          }
          if ((v95 - 3) < 0xFFFFFFFE)
          {
            unint64_t v30 = v167;
            uint64_t v5 = a1;
            uint64_t v28 = a5;
            uint64_t v36 = v78;
            if (v95 == 3) {
              *((void *)v184 + 1) = 0;
            }
            goto LABEL_94;
          }
          unint64_t v97 = (unint64_t)(v98 + 8);
        }
        else
        {
          unint64_t v30 = v167;
          uint64_t v5 = a1;
          uint64_t v28 = a5;
          uint64_t v36 = v78;
          if ((v184[1] & 0x7F) != 2 && !*((_DWORD *)v184 + 3)) {
            goto LABEL_94;
          }
          uint64_t v96 = *((void *)v184 + 2);
          if ((v96 & 4) == 0) {
            goto LABEL_94;
          }
          unint64_t v97 = v96 & 0xFFFFFFFFFFFFFFF8;
          if (!v97) {
            goto LABEL_94;
          }
        }
        uint64_t v191 = (unsigned __int8 *)&v184;
        sub_1CC5FA668(v97 + 16, &v191);
        unint64_t v30 = v167;
        uint64_t v5 = a1;
        uint64_t v28 = a5;
        uint64_t v36 = v78;
      }
LABEL_94:
      v29 += 10;
      if ((unint64_t)v29 > v30) {
        return;
      }
    }
    if ((v176[1] & 0x7F) != 2 && !*((_DWORD *)v176 + 3)) {
      goto LABEL_88;
    }
    uint64_t v81 = *((void *)v176 + 2);
    if ((v81 & 4) == 0) {
      goto LABEL_88;
    }
    unint64_t v82 = v81 & 0xFFFFFFFFFFFFFFF8;
    if (!v82) {
      goto LABEL_88;
    }
    goto LABEL_102;
  }
}

uint64_t sub_1CCFC57F4(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v6 = a3[1];
  unint64_t v5 = a3[2];
  unint64_t v7 = *((unsigned int *)a3 + 10);
  uint64_t v8 = *(unsigned int *)(v6 + 32);
  if (v8 + (v7 >> 1) <= 0x80000000) {
    unsigned int v9 = v8 + (*((_DWORD *)a3 + 10) >> 1);
  }
  else {
    unsigned int v9 = 0x80000000;
  }
  uint64_t v10 = *(unsigned int *)(v5 + 32);
  if (v10 + (v7 >> 1) <= 0x80000000) {
    unsigned int v11 = v10 + (*((_DWORD *)a3 + 10) >> 1);
  }
  else {
    unsigned int v11 = 0x80000000;
  }
  unint64_t v12 = v6 + 40;
  if (v6 + 40 >= v5)
  {
    uint64_t v14 = 0;
    unint64_t v15 = a3[1];
  }
  else
  {
    char v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = a3[1];
    do
    {
      if (v9 < v11 || v9 == v11 && (v13 & 1) != 0)
      {
        uint64_t v16 = *(unsigned int *)(v15 + 72);
        unint64_t v17 = v16 + v9;
        unsigned int v18 = v16 + v9;
        if (v17 <= 0x80000000) {
          unsigned int v9 = v18;
        }
        else {
          unsigned int v9 = 0x80000000;
        }
        unint64_t v15 = v12;
      }
      else
      {
        uint64_t v19 = *(unsigned int *)(v5 - 8 + 40 * v14--);
        unint64_t v20 = v19 + v11;
        unsigned int v21 = v19 + v11;
        if (v20 <= 0x80000000) {
          unsigned int v11 = v21;
        }
        else {
          unsigned int v11 = 0x80000000;
        }
      }
      ++v13;
      unint64_t v12 = v15 + 40;
    }
    while (v15 + 40 < v5 + 40 * v14);
  }
  while (1)
  {
    unint64_t v22 = v15;
    unint64_t v23 = v5 + 40 * v14;
    int v24 = -858993459 * ((v15 - v6) >> 3);
    unsigned int v25 = v24 + 1;
    unsigned int v26 = 1 - v14;
    unsigned int v27 = 1 - (int)v14 >= (v24 + 1) ? v24 + 1 : 1 - v14;
    unsigned int v28 = v25 <= v26 ? 1 - v14 : v25;
    if (v27 > 2 || v28 < 4) {
      break;
    }
    if (v25 >= v26)
    {
      if (v15 + 40 == v6)
      {
        unsigned int v58 = 0;
      }
      else
      {
        unsigned int v58 = 0;
        unsigned int v59 = *(_DWORD *)(v15 + 32);
        uint64_t v60 = v6;
        do
        {
          unsigned int v61 = *(_DWORD *)(v60 + 32);
          if (v61 == v59)
          {
            uint64_t v62 = *(void *)(v60 + 8);
            uint64_t v63 = *(void *)(v15 + 8);
            unsigned int v64 = (void *)(v63 + 24);
            uint64_t v65 = *(unsigned int *)(v62 + 32);
            if (v65 > 0x40)
            {
              uint64_t v71 = *(void *)(v62 + 24);
              uint64_t v72 = *(void *)(v71 + 8 * ((v65 - 1) >> 6)) & (1 << (v65 - 1));
              unsigned int v73 = *(_DWORD *)(v63 + 32);
              unsigned int v74 = v73 - 1;
              uint64_t v75 = *(void *)(v63 + 24);
              if (v73 >= 0x41) {
                unsigned int v64 = (void *)(v75 + 8 * (v74 >> 6));
              }
              if ((v72 != 0) == ((*v64 >> v74) & 1))
              {
                unint64_t v76 = v65 + 63;
                uint64_t v77 = v75 - 8;
                uint64_t v78 = (v76 >> 3) & 0x3FFFFFF8;
                uint64_t v79 = v71 - 8;
                do
                {
                  if (!v78)
                  {
                    unsigned int v69 = 0;
                    goto LABEL_68;
                  }
                  unint64_t v80 = *(void *)(v79 + v78);
                  unint64_t v81 = *(void *)(v77 + v78);
                  v78 -= 8;
                }
                while (v80 == v81);
                if (v80 > v81) {
                  unsigned int v69 = 1;
                }
                else {
                  unsigned int v69 = -1;
                }
              }
              else if (v72)
              {
                unsigned int v69 = -1;
              }
              else
              {
                unsigned int v69 = 1;
              }
            }
            else
            {
              uint64_t v66 = -v65;
              uint64_t v67 = (uint64_t)(*(void *)(v62 + 24) << v66) >> v66;
              uint64_t v68 = (uint64_t)(*v64 << v66) >> v66;
              BOOL v129 = v67 < v68;
              unsigned int v69 = v67 > v68;
              if (v129) {
                unsigned int v69 = -1;
              }
            }
LABEL_68:
            unsigned int v70 = v69 >> 31;
          }
          else
          {
            unsigned int v70 = v61 > v59;
          }
          v58 += v70;
          BOOL v46 = v60 == v15;
          v60 += 40;
        }
        while (!v46);
      }
      if (v14 == 1)
      {
        uint64_t v14 = 0;
        v15 -= 40;
      }
      else
      {
        unsigned int v106 = 0;
        unsigned int v107 = *(_DWORD *)(v15 + 32);
        do
        {
          unsigned int v108 = *(_DWORD *)(v23 + 32);
          if (v108 == v107)
          {
            uint64_t v109 = *(void *)(v23 + 8);
            uint64_t v110 = *(void *)(v15 + 8);
            uint64_t v111 = (void *)(v110 + 24);
            uint64_t v112 = *(unsigned int *)(v109 + 32);
            if (v112 > 0x40)
            {
              uint64_t v118 = *(void *)(v109 + 24);
              uint64_t v119 = *(void *)(v118 + 8 * ((v112 - 1) >> 6)) & (1 << (v112 - 1));
              unsigned int v120 = *(_DWORD *)(v110 + 32);
              unsigned int v121 = v120 - 1;
              uint64_t v122 = *(void *)(v110 + 24);
              if (v120 >= 0x41) {
                uint64_t v111 = (void *)(v122 + 8 * (v121 >> 6));
              }
              if ((v119 != 0) == ((*v111 >> v121) & 1))
              {
                unint64_t v123 = v112 + 63;
                uint64_t v124 = v122 - 8;
                uint64_t v125 = (v123 >> 3) & 0x3FFFFFF8;
                uint64_t v126 = v118 - 8;
                do
                {
                  if (!v125)
                  {
                    unsigned int v116 = 0;
                    goto LABEL_122;
                  }
                  unint64_t v127 = *(void *)(v126 + v125);
                  unint64_t v128 = *(void *)(v124 + v125);
                  v125 -= 8;
                }
                while (v127 == v128);
                if (v127 > v128) {
                  unsigned int v116 = 1;
                }
                else {
                  unsigned int v116 = -1;
                }
              }
              else if (v119)
              {
                unsigned int v116 = -1;
              }
              else
              {
                unsigned int v116 = 1;
              }
            }
            else
            {
              uint64_t v113 = -v112;
              uint64_t v114 = (uint64_t)(*(void *)(v109 + 24) << v113) >> v113;
              uint64_t v115 = (uint64_t)(*v111 << v113) >> v113;
              BOOL v129 = v114 < v115;
              unsigned int v116 = v114 > v115;
              if (v129) {
                unsigned int v116 = -1;
              }
            }
LABEL_122:
            unsigned int v117 = v116 >> 31;
          }
          else
          {
            unsigned int v117 = v108 > v107;
          }
          v106 += v117;
          BOOL v46 = v23 == v5;
          v23 += 40;
        }
        while (!v46);
        v14 -= v106 <= v58;
        BOOL v129 = v106 > v58;
        if (v106 > v58) {
          uint64_t v130 = 0;
        }
        else {
          uint64_t v130 = -1;
        }
        v15 += 40 * v130;
        if (v129)
        {
          unint64_t v23 = v5 + 40 * v14;
          goto LABEL_148;
        }
      }
    }
    else
    {
      if (v14 == 1)
      {
        unsigned int v30 = 0;
      }
      else
      {
        unsigned int v30 = 0;
        unint64_t v82 = v5 + 40 * v14;
        unsigned int v83 = *(_DWORD *)(v82 + 32);
        unint64_t v84 = (void *)(v82 + 8);
        do
        {
          unsigned int v85 = *(_DWORD *)(v23 + 32);
          if (v85 == v83)
          {
            uint64_t v86 = *(void *)(v23 + 8);
            uint64_t v87 = *v84;
            int v88 = (void *)(*v84 + 24);
            uint64_t v89 = *(unsigned int *)(v86 + 32);
            if (v89 > 0x40)
            {
              uint64_t v95 = *(void *)(v86 + 24);
              uint64_t v96 = *(void *)(v95 + 8 * ((v89 - 1) >> 6)) & (1 << (v89 - 1));
              unsigned int v97 = *(_DWORD *)(v87 + 32);
              unsigned int v98 = v97 - 1;
              uint64_t v99 = *(void *)(v87 + 24);
              if (v97 >= 0x41) {
                int v88 = (void *)(v99 + 8 * (v98 >> 6));
              }
              if ((v96 != 0) == ((*v88 >> v98) & 1))
              {
                unint64_t v100 = v89 + 63;
                uint64_t v101 = v99 - 8;
                uint64_t v102 = (v100 >> 3) & 0x3FFFFFF8;
                uint64_t v103 = v95 - 8;
                do
                {
                  if (!v102)
                  {
                    unsigned int v93 = 0;
                    goto LABEL_95;
                  }
                  unint64_t v104 = *(void *)(v103 + v102);
                  unint64_t v105 = *(void *)(v101 + v102);
                  v102 -= 8;
                }
                while (v104 == v105);
                if (v104 > v105) {
                  unsigned int v93 = 1;
                }
                else {
                  unsigned int v93 = -1;
                }
              }
              else if (v96)
              {
                unsigned int v93 = -1;
              }
              else
              {
                unsigned int v93 = 1;
              }
            }
            else
            {
              uint64_t v90 = -v89;
              uint64_t v91 = (uint64_t)(*(void *)(v86 + 24) << v90) >> v90;
              uint64_t v92 = (uint64_t)(*v88 << v90) >> v90;
              BOOL v129 = v91 < v92;
              unsigned int v93 = v91 > v92;
              if (v129) {
                unsigned int v93 = -1;
              }
            }
LABEL_95:
            unsigned int v94 = v93 >> 31;
          }
          else
          {
            unsigned int v94 = v85 > v83;
          }
          v30 += v94;
          BOOL v46 = v23 == v5;
          v23 += 40;
        }
        while (!v46);
      }
      v15 += 40;
      if (v22 + 40 == v6)
      {
        ++v14;
        unint64_t v15 = v6;
      }
      else
      {
        unsigned int v31 = 0;
        unint64_t v32 = v5 + 40 * v14;
        unsigned int v33 = *(_DWORD *)(v32 + 32);
        unint64_t v34 = (void *)(v32 + 8);
        uint64_t v35 = v6;
        do
        {
          unsigned int v36 = *(_DWORD *)(v35 + 32);
          if (v36 == v33)
          {
            uint64_t v37 = *(void *)(v35 + 8);
            uint64_t v38 = *v34;
            unsigned int v39 = (void *)(*v34 + 24);
            uint64_t v40 = *(unsigned int *)(v37 + 32);
            if (v40 > 0x40)
            {
              uint64_t v47 = *(void *)(v37 + 24);
              uint64_t v48 = *(void *)(v47 + 8 * ((v40 - 1) >> 6)) & (1 << (v40 - 1));
              unsigned int v49 = *(_DWORD *)(v38 + 32);
              unsigned int v50 = v49 - 1;
              uint64_t v51 = *(void *)(v38 + 24);
              if (v49 >= 0x41) {
                unsigned int v39 = (void *)(v51 + 8 * (v50 >> 6));
              }
              if ((v48 != 0) == ((*v39 >> v50) & 1))
              {
                unint64_t v52 = v40 + 63;
                uint64_t v53 = v51 - 8;
                uint64_t v54 = (v52 >> 3) & 0x3FFFFFF8;
                uint64_t v55 = v47 - 8;
                do
                {
                  if (!v54)
                  {
                    unsigned int v44 = 0;
                    goto LABEL_43;
                  }
                  unint64_t v56 = *(void *)(v55 + v54);
                  unint64_t v57 = *(void *)(v53 + v54);
                  v54 -= 8;
                }
                while (v56 == v57);
                if (v56 > v57) {
                  unsigned int v44 = 1;
                }
                else {
                  unsigned int v44 = -1;
                }
              }
              else if (v48)
              {
                unsigned int v44 = -1;
              }
              else
              {
                unsigned int v44 = 1;
              }
            }
            else
            {
              uint64_t v41 = -v40;
              uint64_t v42 = (uint64_t)(*(void *)(v37 + 24) << v41) >> v41;
              uint64_t v43 = (uint64_t)(*v39 << v41) >> v41;
              BOOL v129 = v42 < v43;
              unsigned int v44 = v42 > v43;
              if (v129) {
                unsigned int v44 = -1;
              }
            }
LABEL_43:
            unsigned int v45 = v44 >> 31;
          }
          else
          {
            unsigned int v45 = v36 > v33;
          }
          v31 += v45;
          BOOL v46 = v35 == v22;
          v35 += 40;
        }
        while (!v46);
        if (v31 > v30)
        {
          unint64_t v23 = v5 + 40 * v14;
          break;
        }
        ++v14;
      }
    }
  }
  unint64_t v15 = v22;
LABEL_148:
  uint64_t v131 = *(void *)(v23 + 8);
  uint64_t v132 = *a3;
  long long v178 = *(uint64_t **)(*a3 + 8);
  if (v15 != v6 || *(_DWORD *)v6 || *(void *)(v6 + 8) != a3[3]) {
    goto LABEL_157;
  }
  uint64_t v133 = *(void *)(v6 + 16);
  unsigned int v200 = *(_DWORD *)(v133 + 32);
  if (v200 > 0x40) {
    operator new[]();
  }
  uint64_t v199 = *(const void **)(v133 + 24);
  llvm::APInt::operator+=((uint64_t)&v199, 1uLL);
  uint64_t v134 = v200;
  unsigned __int8 v135 = v199;
  unsigned int v200 = 0;
  uint64_t v136 = v131;
  if (v134 > 0x40)
  {
    int v144 = memcmp(v199, *(const void **)(v131 + 24), ((unint64_t)(v134 + 63) >> 3) & 0x3FFFFFF8);
    if (v135)
    {
      MEMORY[0x1D25D9CB0](v135, 0x1000C8000313F17);
      if (v200 >= 0x41)
      {
        if (v199) {
          MEMORY[0x1D25D9CB0](v199, 0x1000C8000313F17);
        }
      }
    }
    if (v144) {
      goto LABEL_156;
    }
LABEL_163:
    MachineBasicBlock = *(void **)(v6 + 24);
    goto LABEL_164;
  }
  if (v199 == *(const void **)(v131 + 24)) {
    goto LABEL_163;
  }
LABEL_156:
  uint64_t v132 = *a3;
LABEL_157:
  MachineBasicBlock = (void *)llvm::MachineFunction::CreateMachineBasicBlock(*(llvm::MachineFunction **)(*(void *)(a1 + 912) + 8), *(const llvm::BasicBlock **)(v132 + 16));
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(void *)(*(void *)(a1 + 912) + 8) + 320, (uint64_t)MachineBasicBlock);
  uint64_t v138 = *v178;
  void *MachineBasicBlock = *v178;
  MachineBasicBlock[1] = v178;
  *(void *)(v138 + 8) = MachineBasicBlock;
  uint64_t *v178 = (uint64_t)MachineBasicBlock;
  *(void *)&long long v186 = MachineBasicBlock;
  *((void *)&v186 + 1) = v6;
  uint64_t v139 = a3[3];
  unint64_t v187 = v15;
  uint64_t v188 = v139;
  int v189 = (void *)v131;
  LODWORD(v190) = *((_DWORD *)a3 + 10) >> 1;
  uint64_t v140 = (_OWORD *)sub_1CC703F44(a2, (unint64_t)&v186, 1);
  uint64_t v141 = (_OWORD *)(*(void *)a2 + 48 * *(unsigned int *)(a2 + 8));
  long long v143 = v140[1];
  long long v142 = v140[2];
  *uint64_t v141 = *v140;
  v141[1] = v143;
  v141[2] = v142;
  ++*(_DWORD *)(a2 + 8);
  uint64_t v136 = v131;
  sub_1CD7DE9A0(a1, a4);
LABEL_164:
  uint64_t v145 = a3;
  if (v23 != v5 || *(_DWORD *)v5 || !a3[4]) {
    goto LABEL_172;
  }
  uint64_t v146 = *(void *)(v5 + 16);
  unsigned int v198 = *(_DWORD *)(v146 + 32);
  if (v198 > 0x40) {
    operator new[]();
  }
  int v197 = *(const void **)(v146 + 24);
  llvm::APInt::operator+=((uint64_t)&v197, 1uLL);
  uint64_t v147 = v198;
  uint64_t v148 = v197;
  unsigned int v198 = 0;
  uint64_t v149 = a3[4];
  if (v147 > 0x40)
  {
    int v157 = memcmp(v197, *(const void **)(v149 + 24), ((unint64_t)(v147 + 63) >> 3) & 0x3FFFFFF8);
    if (v148)
    {
      MEMORY[0x1D25D9CB0](v148, 0x1000C8000313F17);
      if (v198 >= 0x41)
      {
        if (v197) {
          MEMORY[0x1D25D9CB0](v197, 0x1000C8000313F17);
        }
      }
    }
    if (v157) {
      goto LABEL_172;
    }
LABEL_178:
    uint64_t v151 = *(void **)(v5 + 24);
    uint64_t v150 = a1;
    goto LABEL_179;
  }
  if (v197 == *(const void **)(v149 + 24)) {
    goto LABEL_178;
  }
LABEL_172:
  uint64_t v150 = a1;
  uint64_t v151 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(*(llvm::MachineFunction **)(*(void *)(a1 + 912) + 8), *(const llvm::BasicBlock **)(*a3 + 16));
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(void *)(*(void *)(a1 + 912) + 8) + 320, (uint64_t)v151);
  uint64_t v152 = *v178;
  *uint64_t v151 = *v178;
  v151[1] = v178;
  *(void *)(v152 + 8) = v151;
  uint64_t *v178 = (uint64_t)v151;
  *(void *)&long long v186 = v151;
  *((void *)&v186 + 1) = v23;
  unint64_t v187 = v5;
  uint64_t v188 = v136;
  int v189 = (void *)a3[4];
  LODWORD(v190) = *((_DWORD *)a3 + 10) >> 1;
  int v153 = (_OWORD *)sub_1CC703F44(a2, (unint64_t)&v186, 1);
  unsigned int v154 = (_OWORD *)(*(void *)a2 + 48 * *(unsigned int *)(a2 + 8));
  long long v156 = v153[1];
  long long v155 = v153[2];
  *unsigned int v154 = *v153;
  v154[1] = v156;
  v154[2] = v155;
  ++*(_DWORD *)(a2 + 8);
  sub_1CD7DE9A0(a1, a4);
LABEL_179:
  uint64_t v158 = *a3;
  uint64_t v159 = *(void *)v150;
  int v160 = *(_DWORD *)(v150 + 816);
  v184 = 0;
  int v185 = v160;
  if (!v159 || (uint64_t v161 = (unsigned __int8 **)(v159 + 48), v161 == &v184))
  {
    unsigned int v162 = 0;
  }
  else
  {
    unsigned int v162 = *v161;
    v184 = v162;
    if (v162)
    {
      llvm::MetadataTracking::track((uint64_t)&v184, v162, 2);
      unsigned int v162 = v184;
    }
  }
  LODWORD(v186) = 20;
  *((void *)&v186 + 1) = a4;
  unint64_t v187 = 0;
  uint64_t v188 = v136;
  int v189 = MachineBasicBlock;
  unsigned int v190 = v151;
  uint64_t v191 = v158;
  int v192 = v162;
  if (!v162)
  {
    int v193 = v185;
    int v194 = 0;
    unsigned int v195 = v9;
    unsigned int v196 = v11;
    goto LABEL_193;
  }
  llvm::MetadataTracking::track((uint64_t)&v192, v162, 2);
  int v193 = v185;
  int v194 = 0;
  unsigned int v195 = v9;
  unsigned int v196 = v11;
  if (!v184) {
    goto LABEL_193;
  }
  int v163 = *v184;
  if ((v163 - 4) > 0x1E)
  {
    if ((v163 - 3) >= 0xFFFFFFFE) {
      int v169 = v184;
    }
    else {
      int v169 = 0;
    }
    if ((v163 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v165 = (unint64_t)(v169 + 8);
LABEL_205:
      v201[0] = &v184;
      sub_1CC5FA668(v165 + 16, v201);
      goto LABEL_193;
    }
    if (v163 == 3) {
      *((void *)v184 + 1) = 0;
    }
  }
  else if ((v184[1] & 0x7F) == 2 || *((_DWORD *)v184 + 3))
  {
    uint64_t v164 = *((void *)v184 + 2);
    if ((v164 & 4) == 0 || (unint64_t v165 = v164 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
      uint64_t v150 = a1;
      uint64_t v145 = a3;
      goto LABEL_193;
    }
    uint64_t v150 = a1;
    uint64_t v145 = a3;
    goto LABEL_205;
  }
LABEL_193:
  if (*v145 == a5)
  {
    uint64_t result = (uint64_t)sub_1CD7DF1BC(v150, (uint64_t)&v186, a5);
  }
  else
  {
    uint64_t v166 = *(void *)(v150 + 856);
    unint64_t v167 = *(void *)(v166 + 16);
    if (v167 < *(void *)(v166 + 24)) {
      uint64_t result = sub_1CD616B8C(v167, &v186) + 88;
    }
    else {
      uint64_t result = sub_1CC7039C8((long long **)(v166 + 8), &v186);
    }
    *(void *)(v166 + 16) = result;
  }
  if (!v194) {
    goto LABEL_198;
  }
  int v170 = *v194;
  if ((v170 - 4) <= 0x1E)
  {
    if ((v194[1] & 0x7F) != 2 && !*((_DWORD *)v194 + 3)) {
      goto LABEL_198;
    }
    uint64_t v171 = *((void *)v194 + 2);
    if ((v171 & 4) == 0) {
      goto LABEL_198;
    }
    unint64_t v172 = v171 & 0xFFFFFFFFFFFFFFF8;
    if (!v172) {
      goto LABEL_198;
    }
LABEL_221:
    v201[0] = &v194;
    uint64_t result = sub_1CC5FA668(v172 + 16, v201);
    goto LABEL_198;
  }
  if ((v170 - 3) >= 0xFFFFFFFE) {
    unsigned __int8 v173 = v194;
  }
  else {
    unsigned __int8 v173 = 0;
  }
  if ((v170 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v172 = (unint64_t)(v173 + 8);
    goto LABEL_221;
  }
  if (v170 == 3) {
    *((void *)v194 + 1) = 0;
  }
LABEL_198:
  if (!v192) {
    return result;
  }
  int v174 = *v192;
  if ((v174 - 4) > 0x1E)
  {
    if ((v174 - 3) >= 0xFFFFFFFE) {
      int v177 = v192;
    }
    else {
      int v177 = 0;
    }
    if ((v174 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v176 = (unint64_t)(v177 + 8);
LABEL_235:
      v201[0] = &v192;
      return sub_1CC5FA668(v176 + 16, v201);
    }
    if (v174 == 3) {
      *((void *)v192 + 1) = 0;
    }
  }
  else if ((v192[1] & 0x7F) == 2 || *((_DWORD *)v192 + 3))
  {
    uint64_t v175 = *((void *)v192 + 2);
    if ((v175 & 4) != 0)
    {
      unint64_t v176 = v175 & 0xFFFFFFFFFFFFFFF8;
      if (v176) {
        goto LABEL_235;
      }
    }
  }
  return result;
}

uint64_t sub_1CCFC6464(llvm::LLVMContext *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a2)
  {
    return llvm::LLVMContext::emitError((uint64_t)a1, a3);
  }
  if (a2[16] <= 0x1Bu) {
    a2 = 0;
  }
  BOOL v4 = a2[16] != 84 || a2 == 0;
  if (!v4 && *(unsigned char *)(*((void *)a2 - 4) + 16) == 24)
  {
    int v5 = *(unsigned __int8 *)(a3 + 32);
    if (v5 == 1)
    {
      v9[0] = ", possible invalid constraint for vector type";
      __int16 v6 = 259;
    }
    else
    {
      if (*(unsigned char *)(a3 + 32))
      {
        uint64_t v7 = *(void *)(a3 + 8);
        if (*(unsigned char *)(a3 + 33) == 1)
        {
          uint64_t v8 = *(void *)a3;
        }
        else
        {
          LOBYTE(v5) = 2;
          uint64_t v8 = a3;
        }
        v9[0] = v8;
        v9[1] = v7;
        v9[2] = ", possible invalid constraint for vector type";
        LOBYTE(v10) = v5;
        HIBYTE(v10) = 3;
        return llvm::LLVMContext::emitError(a1, (const llvm::Instruction *)a2, (const llvm::Twine *)v9);
      }
      __int16 v6 = 256;
    }
    __int16 v10 = v6;
    return llvm::LLVMContext::emitError(a1, (const llvm::Instruction *)a2, (const llvm::Twine *)v9);
  }

  return llvm::LLVMContext::emitError(a1, (const llvm::Instruction *)a2, (const llvm::Twine *)a3);
}

uint64_t *sub_1CCFC6558(void *a1, uint64_t a2, uint64_t a3, const llvm::APInt *a4, llvm *a5, uint64_t a6)
{
  v49[32] = *MEMORY[0x1E4F143B8];
  unsigned int v45 = a5;
  uint64_t v46 = a6;
  if ((_BYTE)a5)
  {
    if (a5 - 15 >= 0x9C) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(a6 + 8) & 0xFE) != 0x12)
  {
    return 0;
  }
  long long v44 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
  unint64_t v10 = sub_1CC4A0738((llvm::EVT *)&v45);
  unsigned int v11 = v10;
  unint64_t v12 = HIDWORD(v10);
  unint64_t v13 = sub_1CC4A0738((llvm::EVT *)&v44);
  int v15 = v13;
  BOOL v16 = (v13 & 0xFFFFFFFF00000000) != 0x100000000 && v12 == 1;
  if (!v16 && v11 <= v13) {
    return 0;
  }
  if ((v12 == 1) != ((v13 & 0xFFFFFFFF00000000) == 0x100000000)) {
    return 0;
  }
  if ((_BYTE)v45)
  {
    char EVT = sub_1CB8C2FBC((unsigned __int8 *)&v45);
    uint64_t v19 = 0;
  }
  else
  {
    char EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v46 + 24), 0, v14);
    uint64_t v19 = v20;
  }
  if ((_BYTE)v44)
  {
    char v21 = sub_1CB8C2FBC((unsigned __int8 *)&v44);
    uint64_t v23 = 0;
  }
  else
  {
    char v21 = llvm::EVT::getEVT(*(llvm::EVT **)(*((void *)&v44 + 1) + 24), 0, v17);
  }
  if (EVT != v21 || !EVT && v19 != v23) {
    return 0;
  }
  if (v12 == 1)
  {
    unsigned int v26 = v45;
    uint64_t v27 = v46;
    unsigned int v28 = sub_1CD3DD4D8((uint64_t)a1, v45, v46);
    uint64_t v30 = v29;
    uint64_t v31 = sub_1CD7EC9F4((uint64_t)a1, 0, (uint64_t)a4, 0);
    uint64_t v34 = a1[104];
    if (v34) {
      LOWORD(v34) = *(_WORD *)(v34 + 8);
    }
    return sub_1CD7F5D38(a1, (const char *)0x96, a4, v26, v27, (uint64_t)v28, v30, v33, a2, a3, v31, v32, SHIDWORD(v32), v34);
  }
  else
  {
    if ((_BYTE)v45)
    {
      LOBYTE(v35) = sub_1CB8C2FBC((unsigned __int8 *)&v45);
      unint64_t v38 = 0;
      uint64_t v37 = 0;
    }
    else
    {
      unint64_t v35 = llvm::EVT::getEVT(*(llvm::EVT **)(v46 + 24), 0, v22);
      uint64_t v37 = v36;
      unint64_t v38 = v35 & 0xFFFFFFFFFFFFFF00;
    }
    unsigned int v39 = (llvm *)(v38 | v35);
    uint64_t v47 = v49;
    uint64_t v48 = 0x1000000000;
    sub_1CD803D6C((uint64_t)a1, a2, a3, (uint64_t)&v47, 0, 0, 0, 0);
    uint64_t v40 = sub_1CD3DD4D8((uint64_t)a1, v39, v37);
    sub_1CD788338((uint64_t)&v47, v11 - v15, (uint64_t)v40, v41);
    uint64_t v42 = a1[104];
    if (v42) {
      uint64_t v43 = *(unsigned __int16 *)(v42 + 8);
    }
    else {
      uint64_t v43 = 0;
    }
    int v24 = sub_1CD7FF4E8(a1, (const char *)0x92, a4, v45, v46, (uint64_t *)v47, v48, v43);
    if (v47 != v49) {
      free(v47);
    }
  }
  return v24;
}

uint64_t sub_1CCFC684C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return sub_1CD7E8720(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1 + 16 * v3;
  *(void *)uint64_t v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t sub_1CCFC687C(uint64_t a1)
{
  v2 = *(unsigned __int8 **)(a1 + 72);
  if (!v2) {
    goto LABEL_2;
  }
  int v5 = *v2;
  if ((v5 - 4) <= 0x1E)
  {
    if ((v2[1] & 0x7F) != 2 && !*((_DWORD *)v2 + 3)) {
      goto LABEL_2;
    }
    uint64_t v6 = *((void *)v2 + 2);
    if ((v6 & 4) == 0) {
      goto LABEL_2;
    }
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if (!v7) {
      goto LABEL_2;
    }
    goto LABEL_16;
  }
  if ((v5 - 3) >= 0xFFFFFFFE) {
    uint64_t v8 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v8 = 0;
  }
  if ((v5 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v7 = v8 + 8;
LABEL_16:
    uint64_t v9 = a1 + 72;
    sub_1CC5FA668(v7 + 16, &v9);
    goto LABEL_2;
  }
  if (v5 == 3) {
    *((void *)v2 + 1) = 0;
  }
LABEL_2:
  uint64_t v3 = *(unsigned __int8 **)(a1 + 56);
  if (v3) {
    llvm::MetadataTracking::untrack(a1 + 56, v3);
  }
  return a1;
}

uint64_t *sub_1CCFC693C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, const llvm::APInt *a5)
{
  unint64_t v10 = sub_1CD7EBF14(a1, 2139095040, a5, (llvm *)5, 0, 0, 0);
  __int16 v13 = 0;
  uint64_t v14 = *(void *)(a1 + 832);
  if (v14) {
    __int16 v13 = *(_WORD *)(v14 + 8);
  }
  int v15 = sub_1CCFDED5C(a1, 171, a5, (llvm *)5, 0, a2, a3, v12, (uint64_t)v10, v11, v13);
  uint64_t v17 = v16;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a4, 5, 0, *(void *)(**(void **)(a1 + 40) + 40) + 272, 1);
  uint64_t v20 = sub_1CD7EBF14(a1, 23, a5, ShiftAmountTy, v19, 0, 0);
  __int16 v23 = 0;
  uint64_t v24 = *(void *)(a1 + 832);
  if (v24) {
    __int16 v23 = *(_WORD *)(v24 + 8);
  }
  unsigned int v25 = sub_1CCFDED5C(a1, 177, a5, (llvm *)5, 0, (uint64_t)v15, v17, v22, (uint64_t)v20, v21, v23);
  uint64_t v27 = v26;
  unsigned int v28 = sub_1CD7EBF14(a1, 127, a5, (llvm *)5, 0, 0, 0);
  uint64_t v31 = *(void *)(a1 + 832);
  if (v31) {
    LOWORD(v31) = *(_WORD *)(v31 + 8);
  }
  uint64_t v33 = sub_1CCFDED5C(a1, 57, a5, (llvm *)5, 0, (uint64_t)v25, v27, v30, (uint64_t)v28, v29, v31);
  uint64_t v34 = *(void *)(a1 + 832);
  if (v34) {
    __int16 v35 = *(_WORD *)(v34 + 8);
  }
  else {
    __int16 v35 = 0;
  }

  return sub_1CD7F3564((llvm::APFloatBase *)a1, (const char *)0xCA, (uint64_t)a5, (llvm *)0xA, 0, (uint64_t)v33, v32, v35);
}

uint64_t *sub_1CCFC6AF8(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, const llvm::APInt *a4)
{
  uint64_t v8 = sub_1CD7EBF14((uint64_t)a1, 0x7FFFFFLL, a4, (llvm *)5, 0, 0, 0);
  __int16 v11 = 0;
  uint64_t v12 = *((void *)a1 + 104);
  if (v12) {
    __int16 v11 = *(_WORD *)(v12 + 8);
  }
  __int16 v13 = sub_1CCFDED5C((uint64_t)a1, 171, a4, (llvm *)5, 0, a2, a3, v10, (uint64_t)v8, v9, v11);
  uint64_t v15 = v14;
  uint64_t v16 = sub_1CD7EBF14((uint64_t)a1, 1065353216, a4, (llvm *)5, 0, 0, 0);
  uint64_t v19 = *((void *)a1 + 104);
  if (v19) {
    LOWORD(v19) = *(_WORD *)(v19 + 8);
  }
  uint64_t v21 = sub_1CCFDED5C((uint64_t)a1, 172, a4, (llvm *)5, 0, (uint64_t)v13, v15, v18, (uint64_t)v16, v17, v19);
  uint64_t v22 = *((void *)a1 + 104);
  if (v22) {
    __int16 v23 = *(_WORD *)(v22 + 8);
  }
  else {
    __int16 v23 = 0;
  }

  return sub_1CD7F3564(a1, (const char *)0xD8, (uint64_t)a4, (llvm *)0xA, 0, (uint64_t)v21, v20, v23);
}

uint64_t *sub_1CCFC6C24(uint64_t a1, unsigned int a2, const llvm::APFloat *a3)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  int v8 = 32;
  unint64_t v7 = a2;
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v10, (const llvm::APInt **)&v7);
  uint64_t result = sub_1CD7ECA8C(a1, (llvm::LLVMContext *)v9, a3, (llvm *)0xA, 0, 0);
  if ((_UNKNOWN *)v10 == &unk_1CFB2E344)
  {
    uint64_t v6 = result;
    sub_1CB845718(v11);
    return v6;
  }
  if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F && v11[0])
  {
    uint64_t v6 = result;
    MEMORY[0x1D25D9CB0](v11[0], 0x1000C8000313F17);
    return v6;
  }
  return result;
}

uint64_t *sub_1CCFC6D34(uint64_t a1, void *a2, const llvm::APInt *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 832);
  if (v8) {
    __int16 v9 = *(_WORD *)(v8 + 8);
  }
  else {
    __int16 v9 = 0;
  }
  __int16 v11 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD0, (uint64_t)a3, (llvm *)5, 0, a1, a2, v9);
  uint64_t v12 = (uint64_t)v10;
  __int16 v13 = 0;
  uint64_t v14 = *(void *)(a4 + 832);
  if (v14) {
    __int16 v13 = *(_WORD *)(v14 + 8);
  }
  uint64_t v15 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xCA, (uint64_t)a3, (llvm *)0xA, 0, (uint64_t)v11, v10, v13);
  __int16 v18 = 0;
  uint64_t v19 = *(void *)(a4 + 832);
  if (v19) {
    __int16 v18 = *(_WORD *)(v19 + 8);
  }
  uint64_t v20 = sub_1CCFDED5C(a4, 97, a3, (llvm *)0xA, 0, a1, (uint64_t)a2, v17, (uint64_t)v15, v16, v18);
  uint64_t v22 = v21;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(a4 + 24), 5, 0, *(void *)(**(void **)(a4 + 40) + 40) + 272, 1);
  unsigned int v25 = sub_1CD7EBF14(a4, 23, a3, ShiftAmountTy, v24, 0, 0);
  uint64_t v28 = *(void *)(a4 + 832);
  if (v28) {
    LOWORD(v28) = *(_WORD *)(v28 + 8);
  }
  uint64_t v29 = sub_1CCFDED5C(a4, 175, a3, (llvm *)5, 0, (uint64_t)v11, v12, v27, (uint64_t)v25, v26, v28);
  unsigned int v31 = v30;
  if (dword_1EBCF9F78 > 6)
  {
    if (dword_1EBCF9F78 > 0xC)
    {
      unint64_t v57 = sub_1CCFC6C24(a4, 0x3924B03Eu, a3);
      uint64_t v60 = *(void *)(a4 + 832);
      if (v60) {
        LOWORD(v60) = *(_WORD *)(v60 + 8);
      }
      unsigned int v61 = sub_1CCFDED5C(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v20, v22, v59, (uint64_t)v57, v58, v60);
      uint64_t v63 = v62;
      unsigned int v64 = sub_1CCFC6C24(a4, 0x3AB24B87u, a3);
      uint64_t v67 = *(void *)(a4 + 832);
      if (v67) {
        LOWORD(v67) = *(_WORD *)(v67 + 8);
      }
      unsigned int v69 = sub_1CCFDED5C(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v61, v63, v66, (uint64_t)v64, v65, v67);
      uint64_t v71 = *(void *)(a4 + 832);
      if (v71) {
        LOWORD(v71) = *(_WORD *)(v71 + 8);
      }
      uint64_t v72 = sub_1CCFDED5C(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v69, v68, v70, (uint64_t)v20, v22, v71);
      uint64_t v74 = v73;
      uint64_t v75 = sub_1CCFC6C24(a4, 0x3C1D8C17u, a3);
      uint64_t v78 = *(void *)(a4 + 832);
      if (v78) {
        LOWORD(v78) = *(_WORD *)(v78 + 8);
      }
      unint64_t v80 = sub_1CCFDED5C(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v72, v74, v77, (uint64_t)v75, v76, v78);
      uint64_t v82 = *(void *)(a4 + 832);
      if (v82) {
        LOWORD(v82) = *(_WORD *)(v82 + 8);
      }
      unsigned int v83 = sub_1CCFDED5C(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v80, v79, v81, (uint64_t)v20, v22, v82);
      uint64_t v85 = v84;
      uint64_t v86 = sub_1CCFC6C24(a4, 0x3D634A1Du, a3);
      uint64_t v89 = *(void *)(a4 + 832);
      if (v89) {
        LOWORD(v89) = *(_WORD *)(v89 + 8);
      }
      uint64_t v91 = sub_1CCFDED5C(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v83, v85, v88, (uint64_t)v86, v87, v89);
      uint64_t v93 = *(void *)(a4 + 832);
      if (v93) {
        LOWORD(v93) = *(_WORD *)(v93 + 8);
      }
      unsigned int v94 = sub_1CCFDED5C(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v91, v90, v92, (uint64_t)v20, v22, v93);
      uint64_t v96 = v95;
      unsigned int v97 = sub_1CCFC6C24(a4, 0x3E75FE14u, a3);
      uint64_t v100 = *(void *)(a4 + 832);
      if (v100) {
        LOWORD(v100) = *(_WORD *)(v100 + 8);
      }
      uint64_t v102 = sub_1CCFDED5C(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v94, v96, v99, (uint64_t)v97, v98, v100);
      uint64_t v104 = *(void *)(a4 + 832);
      if (v104) {
        LOWORD(v104) = *(_WORD *)(v104 + 8);
      }
      uint64_t v36 = sub_1CCFDED5C(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v102, v101, v103, (uint64_t)v20, v22, v104);
      uint64_t v38 = v105;
      unsigned int v39 = 1065353216;
      unsigned int v40 = 1060205108;
    }
    else
    {
      uint64_t v41 = sub_1CCFC6C24(a4, 0x3DA235E3u, a3);
      uint64_t v44 = *(void *)(a4 + 832);
      if (v44) {
        LOWORD(v44) = *(_WORD *)(v44 + 8);
      }
      unsigned int v45 = sub_1CCFDED5C(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v20, v22, v43, (uint64_t)v41, v42, v44);
      uint64_t v47 = v46;
      uint64_t v48 = sub_1CCFC6C24(a4, 0x3E65B8F3u, a3);
      uint64_t v51 = *(void *)(a4 + 832);
      if (v51) {
        LOWORD(v51) = *(_WORD *)(v51 + 8);
      }
      uint64_t v53 = sub_1CCFDED5C(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v45, v47, v50, (uint64_t)v48, v49, v51);
      uint64_t v55 = *(void *)(a4 + 832);
      if (v55) {
        LOWORD(v55) = *(_WORD *)(v55 + 8);
      }
      uint64_t v36 = sub_1CCFDED5C(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v53, v52, v54, (uint64_t)v20, v22, v55);
      uint64_t v38 = v56;
      unsigned int v39 = 1065351421;
      unsigned int v40 = 1060260615;
    }
  }
  else
  {
    uint64_t v32 = sub_1CCFC6C24(a4, 0x3E814304u, a3);
    uint64_t v35 = *(void *)(a4 + 832);
    if (v35) {
      LOWORD(v35) = *(_WORD *)(v35 + 8);
    }
    uint64_t v36 = sub_1CCFDED5C(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v20, v22, v34, (uint64_t)v32, v33, v35);
    uint64_t v38 = v37;
    unsigned int v39 = 1065311870;
    unsigned int v40 = 1060917448;
  }
  unsigned int v106 = sub_1CCFC6C24(a4, v40, a3);
  uint64_t v109 = *(void *)(a4 + 832);
  if (v109) {
    LOWORD(v109) = *(_WORD *)(v109 + 8);
  }
  uint64_t v111 = sub_1CCFDED5C(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v36, v38, v108, (uint64_t)v106, v107, v109);
  uint64_t v113 = *(void *)(a4 + 832);
  if (v113) {
    LOWORD(v113) = *(_WORD *)(v113 + 8);
  }
  uint64_t v114 = sub_1CCFDED5C(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v111, v110, v112, (uint64_t)v20, v22, v113);
  uint64_t v116 = v115;
  unsigned int v117 = sub_1CCFC6C24(a4, v39, a3);
  uint64_t v120 = *(void *)(a4 + 832);
  if (v120) {
    LOWORD(v120) = *(_WORD *)(v120 + 8);
  }
  uint64_t v122 = sub_1CCFDED5C(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v114, v116, v119, (uint64_t)v117, v118, v120);
  unint64_t v123 = v12 & 0xFFFFFFFF00000000 | v31;
  uint64_t v124 = *(void *)(a4 + 832);
  if (v124) {
    __int16 v125 = *(_WORD *)(v124 + 8);
  }
  else {
    __int16 v125 = 0;
  }
  unint64_t v127 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)a3, (llvm *)5, 0, (uint64_t)v122, (void *)v121, v125);
  uint64_t v129 = *(void *)(a4 + 832);
  if (v129) {
    LOWORD(v129) = *(_WORD *)(v129 + 8);
  }
  uint64_t v131 = sub_1CCFDED5C(a4, 56, a3, (llvm *)5, 0, (uint64_t)v127, v126, v128, (uint64_t)v29, v123, v129);
  uint64_t v132 = *(void *)(a4 + 832);
  if (v132) {
    __int16 v133 = *(_WORD *)(v132 + 8);
  }
  else {
    __int16 v133 = 0;
  }

  return sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)a3, (llvm *)0xA, 0, (uint64_t)v131, v130, v133);
}

uint64_t sub_1CCFC73E8(uint64_t a1, llvm::Value *this)
{
  if (!this) {
    return 0;
  }
  uint64_t v3 = llvm::Value::stripPointerCasts(this);
  uint64_t result = 0;
  if (v3 && *((unsigned char *)v3 + 16) == 59)
  {
    if (*(unsigned char *)(*((void *)v3 - 4) + 16) != 16) {
      return 0;
    }
    uint64_t v5 = *((void *)v3 + 5);
    uint64_t v6 = *(void *)(*(void *)(v5 + 56) + 80);
    uint64_t v7 = v6 ? v6 - 24 : 0;
    if (v5 != v7 || (*((_WORD *)v3 + 9) & 0x40) != 0) {
      return 0;
    }
    uint64_t v8 = **(void **)a1 + 176;
    uint64_t v16 = 0;
    uint64_t v17 = v3;
    int v9 = sub_1CB87DF68(v8, &v17, &v16);
    uint64_t result = 0;
    if (v9)
    {
      uint64_t v10 = *(int **)(a1 + 8);
      uint64_t v16 = 0;
      char v11 = sub_1CCFC77C0((uint64_t)v10, (uint64_t)v3, &v16);
      uint64_t v12 = v16;
      if (v11) {
        return (uint64_t)v12 + 8;
      }
      uint64_t v17 = v16;
      int v13 = *v10;
      unsigned int v14 = *v10 >> 1;
      if (*v10) {
        unsigned int v15 = 8;
      }
      else {
        unsigned int v15 = v10[4];
      }
      if (4 * v14 + 4 >= 3 * v15)
      {
        v15 *= 2;
      }
      else if (v15 + ~v14 - v10[1] > v15 >> 3)
      {
LABEL_19:
        int *v10 = v13 + 2;
        if (*(void *)v12 != -4096) {
          --v10[1];
        }
        *(void *)uint64_t v12 = v3;
        *((_DWORD *)v12 + 2) = 0;
        return (uint64_t)v12 + 8;
      }
      sub_1CCFC7570((uint64_t)v10, v15);
      sub_1CCFC77C0((uint64_t)v10, (uint64_t)v3, &v17);
      int v13 = *v10;
      uint64_t v12 = v17;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_1CCFC7570(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CCFC76FC(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  int v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)int v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CCFC76FC(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1CCFC76FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    int v9 = (void *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    int v9 = &v8[2 * v7];
  }
  do
  {
    void *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CCFC77C0((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      void *v12 = *(void *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1CCFC77C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

char *sub_1CCFC786C(char **a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  v2 = a1[1];
  uint64_t v4 = (v2 - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_1CB833614();
    }
    uint64_t v10 = (char *)operator new(16 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  int v11 = &v10[16 * v4];
  *(_OWORD *)int v11 = *a2;
  BOOL v12 = v11 + 16;
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *((void *)v2 - 2);
      v2 -= 16;
      int v14 = *((_DWORD *)v2 + 2);
      *((void *)v11 - 2) = v13;
      v11 -= 16;
      *((_DWORD *)v11 + 2) = v14;
    }
    while (v2 != v3);
    v2 = *a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

void sub_1CCFC7950(void ***a1)
{
  unsigned int v1 = *a1;
  v2 = (unsigned __int8 **)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (unsigned __int8 **)v1[1];
  unint64_t v5 = **a1;
  if (v4 == v2) {
    goto LABEL_21;
  }
  unsigned int v6 = v4 - 2;
  do
  {
    uint64_t v7 = *v6;
    if (!*v6) {
      goto LABEL_8;
    }
    int v8 = *v7;
    if ((v8 - 4) > 0x1E)
    {
      if ((v8 - 3) >= 0xFFFFFFFE) {
        uint64_t v10 = *v6;
      }
      else {
        uint64_t v10 = 0;
      }
      if ((v8 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v11 = (unint64_t)(v10 + 8);
LABEL_15:
        uint64_t v13 = v6;
        sub_1CC5FA668(v11 + 16, &v13);
        goto LABEL_8;
      }
      if (v8 == 3) {
        *((void *)v7 + 1) = 0;
      }
    }
    else if ((v7[1] & 0x7F) == 2 || *((_DWORD *)v7 + 3))
    {
      uint64_t v12 = *((void *)v7 + 2);
      if ((v12 & 4) != 0)
      {
        unint64_t v11 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v11) {
          goto LABEL_15;
        }
      }
    }
LABEL_8:
    unint64_t v9 = v6 - 1;
    v6 -= 3;
  }
  while (v9 != v2);
  unint64_t v5 = **a1;
LABEL_21:
  v1[1] = v2;

  operator delete(v5);
}

void sub_1CCFC7A60(uint64_t *a1, long long *a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = (void *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((uint64_t)v5 - *a1) >> 5;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 59) {
      abort();
    }
    uint64_t v9 = v4 - *a1;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    uint64_t v22 = a1 + 2;
    if (v10 >> 59) {
      sub_1CB833614();
    }
    unint64_t v11 = (char *)operator new(32 * v10);
    long long v12 = *a2;
    long long v13 = a2[1];
    int v14 = &v11[32 * v7];
    __p = v11;
    uint64_t v19 = v14;
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = 0;
    *(_OWORD *)int v14 = v12;
    *((_OWORD *)v14 + 1) = v13;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v20 = v14 + 32;
    uint64_t v21 = &v11[32 * v10];
    sub_1CD58F244(a1, &__p);
    unsigned int v6 = (void *)a1[1];
    uint64_t v16 = v19;
    uint64_t v15 = v20;
    if (v20 != v19)
    {
      do
      {
        uint64_t v17 = v15 - 32;
        __int16 v23 = (void **)(v15 - 24);
        sub_1CCFC7950(&v23);
        uint64_t v15 = v17;
      }
      while (v17 != v16);
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    void *v5 = *(void *)a2;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0;
    *(_OWORD *)(v5 + 1) = *(long long *)((char *)a2 + 8);
    v5[3] = *((void *)a2 + 3);
    unsigned int v6 = v5 + 4;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
  }
  a1[1] = (uint64_t)v6;
}

uint64_t sub_1CCFC7B98(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, int *a4)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v5;
  }
  __int16 v18 = a1 + 2;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    unint64_t v11 = (char *)operator new(24 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  int v14 = v11;
  uint64_t v15 = &v11[24 * v4];
  uint64_t v17 = &v11[24 * v10];
  sub_1CCFC7CB0(v15, a2, a3, a4);
  uint64_t v16 = v15 + 24;
  sub_1CD7E9050(a1, &v14);
  uint64_t v12 = a1[1];
  sub_1CD7E9128((uint64_t)&v14);
  return v12;
}

void *sub_1CCFC7CB0(void *result, uint64_t a2, unsigned __int8 *a3, int *a4)
{
  unsigned int v6 = result;
  uint64_t v9 = a3;
  if (a3)
  {
    uint64_t result = (void *)llvm::MetadataTracking::track((uint64_t)&v9, a3, 2);
    uint64_t v7 = v9;
    int v8 = *a4;
    *unsigned int v6 = a2;
    v6[1] = v7;
    if (v7) {
      uint64_t result = (void *)llvm::MetadataTracking::retrack((uint64_t)&v9, v7, (uint64_t)(v6 + 1));
    }
  }
  else
  {
    int v8 = *a4;
    *uint64_t result = a2;
    result[1] = 0;
  }
  *((_DWORD *)v6 + 4) = v8;
  return result;
}

uint64_t sub_1CCFC7D30(void *a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  BOOL v4 = v3 > 0x1B || v3 == 5;
  int v5 = v4;
  if (v4)
  {
    if (v3 <= 0x1B) {
      unsigned int v6 = *(unsigned __int16 *)(a2 + 18);
    }
    else {
      unsigned int v6 = v3 - 28;
    }
    if (v6 == 47)
    {
      int v7 = *(_DWORD *)(a2 + 20);
      if ((v7 & 0x40000000) != 0) {
        int v8 = *(uint64_t **)(a2 - 8);
      }
      else {
        int v8 = (uint64_t *)(a2 - 32 * (v7 & 0x7FFFFFF));
      }
      uint64_t v2 = *v8;
      if (v2)
      {
        *a1 = v2;
        LODWORD(v2) = 1;
      }
    }
    else
    {
      LODWORD(v2) = 0;
    }
  }
  return v5 & v2;
}

void sub_1CCFC7D98(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v41 = *(void *)(a2 - 24);
                unint64_t v40 = a2 - 24;
                if (v41 < *(void *)v10)
                {
                  uint64_t v111 = *(void *)(v10 + 16);
                  long long v102 = *(_OWORD *)v10;
                  long long v42 = *(_OWORD *)v40;
                  *(void *)(v10 + 16) = *(void *)(v40 + 16);
                  *(_OWORD *)unint64_t v10 = v42;
                  *(void *)(v40 + 16) = v111;
                  *(_OWORD *)unint64_t v40 = v102;
                }
                break;
              case 3:
                sub_1CCFC8654((long long *)v10, (uint64_t *)(v10 + 24), (uint64_t *)(a2 - 24));
                break;
              case 4:
                sub_1CCFC89E0(v10, (uint64_t *)(v10 + 24), (uint64_t *)(v10 + 48), a2 - 24);
                break;
              case 5:
                uint64_t v43 = (long long *)(v10 + 24);
                uint64_t v44 = (long long *)(v10 + 48);
                unsigned int v45 = (long long *)(v10 + 72);
                sub_1CCFC89E0(v10, (uint64_t *)(v10 + 24), (uint64_t *)(v10 + 48), v10 + 72);
                uint64_t v47 = *(void *)(a2 - 24);
                unint64_t v46 = a2 - 24;
                if (v47 < *(void *)(v10 + 72))
                {
                  long long v48 = *v45;
                  uint64_t v49 = *(void *)(v10 + 88);
                  uint64_t v50 = *(void *)(v46 + 16);
                  *unsigned int v45 = *(_OWORD *)v46;
                  *(void *)(v10 + 88) = v50;
                  *(void *)(v46 + 16) = v49;
                  *(_OWORD *)unint64_t v46 = v48;
                  if (*(void *)v45 < *(void *)v44)
                  {
                    uint64_t v51 = *(void *)(v10 + 64);
                    long long v52 = *v44;
                    long long *v44 = *v45;
                    *(void *)(v10 + 64) = *(void *)(v10 + 88);
                    *unsigned int v45 = v52;
                    *(void *)(v10 + 88) = v51;
                    if (*(void *)v44 < *(void *)v43)
                    {
                      uint64_t v53 = *(void *)(v10 + 40);
                      long long v54 = *v43;
                      *uint64_t v43 = *v44;
                      *(void *)(v10 + 40) = *(void *)(v10 + 64);
                      long long *v44 = v54;
                      *(void *)(v10 + 64) = v53;
                      if (*(void *)(v10 + 24) < *(void *)v10)
                      {
                        uint64_t v112 = *(void *)(v10 + 16);
                        long long v103 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v43;
                        *(void *)(v10 + 16) = *(void *)(v10 + 40);
                        *uint64_t v43 = v103;
                        *(void *)(v10 + 40) = v112;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            unint64_t v55 = v10 + 24;
            BOOL v57 = v10 == a2 || v55 == a2;
            if (a4)
            {
              if (!v57)
              {
                uint64_t v58 = 0;
                unint64_t v59 = v10;
                do
                {
                  unint64_t v60 = v55;
                  uint64_t v61 = *(void *)(v59 + 24);
                  if (v61 < *(void *)v59)
                  {
                    long long v104 = *(_OWORD *)(v59 + 32);
                    uint64_t v62 = v58;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      *(_OWORD *)(v63 + 24) = *(_OWORD *)(v10 + v62);
                      *(void *)(v63 + 40) = *(void *)(v10 + v62 + 16);
                      if (!v62) {
                        break;
                      }
                      v62 -= 24;
                      if (v61 >= *(void *)(v63 - 24))
                      {
                        uint64_t v64 = v10 + v62 + 24;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v64 = v10;
LABEL_80:
                    *(void *)uint64_t v64 = v61;
                    *(_OWORD *)(v64 + 8) = v104;
                  }
                  unint64_t v55 = v60 + 24;
                  v58 += 24;
                  unint64_t v59 = v60;
                }
                while (v60 + 24 != a2);
              }
            }
            else if (!v57)
            {
              do
              {
                unint64_t v93 = v55;
                uint64_t v94 = *(void *)(a1 + 24);
                if (v94 < *(void *)a1)
                {
                  long long v107 = *(_OWORD *)(a1 + 32);
                  do
                  {
                    *(_OWORD *)unint64_t v55 = *(_OWORD *)(v55 - 24);
                    *(void *)(v55 + 16) = *(void *)(v55 - 8);
                    uint64_t v95 = *(void *)(v55 - 48);
                    v55 -= 24;
                  }
                  while (v94 < v95);
                  *(void *)unint64_t v55 = v94;
                  *(_OWORD *)(v55 + 8) = v107;
                }
                unint64_t v55 = v93 + 24;
                a1 = v93;
              }
              while (v93 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v65 = (unint64_t)(v12 - 2) >> 1;
              int64_t v66 = v65;
              do
              {
                int64_t v67 = v66;
                if (v65 >= v66)
                {
                  uint64_t v68 = (2 * v66) | 1;
                  unsigned int v69 = (void *)(v10 + 24 * v68);
                  if (2 * v67 + 2 < v12)
                  {
                    uint64_t v71 = v69[3];
                    BOOL v70 = *v69 < v71;
                    if (*v69 > v71) {
                      uint64_t v71 = *v69;
                    }
                    if (v70)
                    {
                      v69 += 3;
                      uint64_t v68 = 2 * v67 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v71 = *v69;
                  }
                  uint64_t v72 = (void *)(v10 + 24 * v67);
                  uint64_t v73 = *v72;
                  if (v71 >= *v72)
                  {
                    long long v105 = *(_OWORD *)(v72 + 1);
                    do
                    {
                      uint64_t v74 = v72;
                      uint64_t v72 = v69;
                      long long v75 = *(_OWORD *)v69;
                      v74[2] = v69[2];
                      *(_OWORD *)uint64_t v74 = v75;
                      if (v65 < v68) {
                        break;
                      }
                      uint64_t v76 = (2 * v68) | 1;
                      unsigned int v69 = (void *)(v10 + 24 * v76);
                      uint64_t v68 = 2 * v68 + 2;
                      if (v68 < v12)
                      {
                        uint64_t v79 = *v69;
                        uint64_t v77 = v69[3];
                        BOOL v78 = *v69 < v77;
                        if (*v69 <= v77) {
                          uint64_t v79 = v69[3];
                        }
                        if (*v69 < v77) {
                          v69 += 3;
                        }
                        if (!v78) {
                          uint64_t v68 = v76;
                        }
                      }
                      else
                      {
                        uint64_t v79 = *v69;
                        uint64_t v68 = v76;
                      }
                    }
                    while (v79 >= v73);
                    *uint64_t v72 = v73;
                    *(_OWORD *)(v72 + 1) = v105;
                  }
                }
                int64_t v66 = v67 - 1;
              }
              while (v67);
              do
              {
                uint64_t v80 = 0;
                uint64_t v113 = *(void *)(v10 + 16);
                long long v106 = *(_OWORD *)v10;
                unint64_t v81 = v10;
                do
                {
                  uint64_t v82 = v81 + 24 * v80 + 24;
                  uint64_t v83 = (2 * v80) | 1;
                  uint64_t v84 = 2 * v80 + 2;
                  if (v84 < v12 && *(void *)v82 < *(void *)(v82 + 24))
                  {
                    v82 += 24;
                    uint64_t v83 = v84;
                  }
                  long long v85 = *(_OWORD *)v82;
                  *(void *)(v81 + 16) = *(void *)(v82 + 16);
                  *(_OWORD *)unint64_t v81 = v85;
                  unint64_t v81 = v82;
                  uint64_t v80 = v83;
                }
                while (v83 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                a2 -= 24;
                if (v82 == a2)
                {
                  *(void *)(v82 + 16) = v113;
                  *(_OWORD *)uint64_t v82 = v106;
                }
                else
                {
                  long long v86 = *(_OWORD *)a2;
                  *(void *)(v82 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)uint64_t v82 = v86;
                  *(void *)(a2 + 16) = v113;
                  *(_OWORD *)a2 = v106;
                  uint64_t v87 = v82 - v10 + 24;
                  if (v87 >= 25)
                  {
                    unint64_t v88 = (v87 / 0x18uLL - 2) >> 1;
                    uint64_t v89 = v10 + 24 * v88;
                    uint64_t v90 = *(void *)v82;
                    if (*(void *)v89 < *(void *)v82)
                    {
                      long long v98 = *(_OWORD *)(v82 + 8);
                      do
                      {
                        uint64_t v91 = v82;
                        uint64_t v82 = v89;
                        long long v92 = *(_OWORD *)v89;
                        *(void *)(v91 + 16) = *(void *)(v89 + 16);
                        *(_OWORD *)uint64_t v91 = v92;
                        if (!v88) {
                          break;
                        }
                        unint64_t v88 = (v88 - 1) >> 1;
                        uint64_t v89 = v10 + 24 * v88;
                      }
                      while (*(void *)v89 < v90);
                      *(void *)uint64_t v82 = v90;
                      *(_OWORD *)(v82 + 8) = v98;
                    }
                  }
                }
                BOOL v70 = v12-- <= 2;
              }
              while (!v70);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          int v14 = (uint64_t *)(v10 + 24 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_1CCFC8654((long long *)a1, (uint64_t *)(a1 + 24 * ((unint64_t)v12 >> 1)), (uint64_t *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            uint64_t v16 = (uint64_t *)(a1 + 24 * v13 - 24);
            sub_1CCFC8654((long long *)(a1 + 24), v16, (uint64_t *)(a2 - 48));
            uint64_t v17 = (uint64_t *)(a1 + 24 + 8 * v15);
            sub_1CCFC8654((long long *)(a1 + 48), v17, (uint64_t *)(a2 - 72));
            sub_1CCFC8654((long long *)v16, v14, v17);
            uint64_t v108 = *(void *)(a1 + 16);
            long long v99 = *(_OWORD *)a1;
            uint64_t v18 = v14[2];
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = v18;
            v14[2] = v108;
            *(_OWORD *)int v14 = v99;
          }
          else
          {
            sub_1CCFC8654((long long *)(a1 + 24 * ((unint64_t)v12 >> 1)), (uint64_t *)a1, (uint64_t *)(a2 - 24));
          }
          --a3;
          uint64_t v19 = *(void *)a1;
          if ((a4 & 1) != 0 || *(void *)(a1 - 24) < v19) {
            break;
          }
          long long v97 = *(_OWORD *)(a1 + 8);
          if (v19 >= *(void *)(a2 - 24))
          {
            unint64_t v33 = a1 + 24;
            do
            {
              unint64_t v10 = v33;
              if (v33 >= a2) {
                break;
              }
              v33 += 24;
            }
            while (v19 >= *(void *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              uint64_t v32 = *(void *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v32);
          }
          unint64_t v34 = a2;
          if (v10 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              uint64_t v35 = *(void *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v35);
          }
          while (v10 < v34)
          {
            uint64_t v110 = *(void *)(v10 + 16);
            long long v101 = *(_OWORD *)v10;
            long long v36 = *(_OWORD *)v34;
            *(void *)(v10 + 16) = *(void *)(v34 + 16);
            *(_OWORD *)unint64_t v10 = v36;
            *(void *)(v34 + 16) = v110;
            *(_OWORD *)unint64_t v34 = v101;
            do
            {
              uint64_t v37 = *(void *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v37);
            do
            {
              uint64_t v38 = *(void *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v38);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v39 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v39;
          }
          a4 = 0;
          *(void *)(v10 - 24) = v19;
          *(_OWORD *)(v10 - 16) = v97;
        }
        uint64_t v20 = 0;
        long long v96 = *(_OWORD *)(a1 + 8);
        do
        {
          uint64_t v21 = *(void *)(a1 + v20 + 24);
          v20 += 24;
        }
        while (v21 < v19);
        unint64_t v22 = a1 + v20;
        unint64_t v23 = a2;
        if (v20 == 24)
        {
          unint64_t v23 = a2;
          do
          {
            if (v22 >= v23) {
              break;
            }
            uint64_t v25 = *(void *)(v23 - 24);
            v23 -= 24;
          }
          while (v25 >= v19);
        }
        else
        {
          do
          {
            uint64_t v24 = *(void *)(v23 - 24);
            v23 -= 24;
          }
          while (v24 >= v19);
        }
        unint64_t v10 = a1 + v20;
        if (v22 < v23)
        {
          unint64_t v26 = v23;
          do
          {
            uint64_t v109 = *(void *)(v10 + 16);
            long long v100 = *(_OWORD *)v10;
            long long v27 = *(_OWORD *)v26;
            *(void *)(v10 + 16) = *(void *)(v26 + 16);
            *(_OWORD *)unint64_t v10 = v27;
            *(void *)(v26 + 16) = v109;
            *(_OWORD *)unint64_t v26 = v100;
            do
            {
              uint64_t v28 = *(void *)(v10 + 24);
              v10 += 24;
            }
            while (v28 < v19);
            do
            {
              uint64_t v29 = *(void *)(v26 - 24);
              v26 -= 24;
            }
            while (v29 >= v19);
          }
          while (v10 < v26);
        }
        if (v10 - 24 != a1)
        {
          long long v30 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v30;
        }
        *(void *)(v10 - 24) = v19;
        *(_OWORD *)(v10 - 16) = v96;
        if (v22 >= v23) {
          break;
        }
LABEL_30:
        sub_1CCFC7D98(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_1CCFC8744(a1, v10 - 24);
      if (sub_1CCFC8744(v10, a2)) {
        break;
      }
      if (!v31) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 24;
    if (!v31) {
      continue;
    }
    break;
  }
}

long long *sub_1CCFC8654(long long *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if (*a2 >= *(void *)result)
  {
    if (v4 < v3)
    {
      uint64_t v8 = a2[2];
      long long v9 = *(_OWORD *)a2;
      uint64_t v10 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v10;
      *(_OWORD *)a3 = v9;
      a3[2] = v8;
      if (*a2 < *(void *)result)
      {
        uint64_t v11 = *((void *)result + 2);
        long long v12 = *result;
        uint64_t v13 = a2[2];
        *uint64_t result = *(_OWORD *)a2;
        *((void *)result + 2) = v13;
        *(_OWORD *)a2 = v12;
        a2[2] = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      uint64_t v14 = *((void *)result + 2);
      long long v15 = *result;
      uint64_t v16 = a2[2];
      *uint64_t result = *(_OWORD *)a2;
      *((void *)result + 2) = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
      if (*a3 >= *a2) {
        return result;
      }
      uint64_t v5 = a2[2];
      long long v6 = *(_OWORD *)a2;
      uint64_t v17 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v17;
    }
    else
    {
      uint64_t v5 = *((void *)result + 2);
      long long v6 = *result;
      uint64_t v7 = a3[2];
      *uint64_t result = *(_OWORD *)a3;
      *((void *)result + 2) = v7;
    }
    *(_OWORD *)a3 = v6;
    a3[2] = v5;
  }
  return result;
}

BOOL sub_1CCFC8744(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (long long *)(a2 - 24);
      if (*(void *)(a2 - 24) < *(void *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        *long long v6 = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_1CCFC8654((long long *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1CCFC89E0(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      uint64_t v18 = (long long *)(a1 + 24);
      uint64_t v19 = (long long *)(a1 + 48);
      uint64_t v20 = (long long *)(a1 + 72);
      sub_1CCFC89E0(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), a1 + 72);
      uint64_t v22 = *(void *)(a2 - 24);
      uint64_t v21 = a2 - 24;
      if (v22 < *(void *)(a1 + 72))
      {
        uint64_t v23 = *(void *)(a1 + 88);
        long long v24 = *v20;
        uint64_t v25 = *(void *)(v21 + 16);
        *uint64_t v20 = *(_OWORD *)v21;
        *(void *)(a1 + 88) = v25;
        *(_OWORD *)uint64_t v21 = v24;
        *(void *)(v21 + 16) = v23;
        if (*(void *)v20 < *(void *)v19)
        {
          uint64_t v26 = *(void *)(a1 + 64);
          long long v27 = *v19;
          *uint64_t v19 = *v20;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *uint64_t v20 = v27;
          *(void *)(a1 + 88) = v26;
          if (*(void *)v19 < *(void *)v18)
          {
            uint64_t v28 = *(void *)(a1 + 40);
            long long v29 = *v18;
            *uint64_t v18 = *v19;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *uint64_t v19 = v29;
            *(void *)(a1 + 64) = v28;
            if (*(void *)(a1 + 24) < *(void *)a1)
            {
              uint64_t v30 = *(void *)(a1 + 16);
              long long v31 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v18;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *uint64_t v18 = v31;
              *(void *)(a1 + 40) = v30;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = (void *)(a1 + 48);
      sub_1CCFC8654((long long *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    uint64_t v14 = *(void *)v11;
    if (*(void *)v11 < *v10)
    {
      long long v32 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(void *)(v16 + 88) = *(void *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(void *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(void *)uint64_t v17 = v14;
      *(_OWORD *)(v17 + 8) = v32;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    uint64_t v10 = (void *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CCFC89E0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  sub_1CCFC8654((long long *)a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    uint64_t v9 = a3[2];
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    if (*a3 < *a2)
    {
      uint64_t v11 = a2[2];
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v12;
      *(__n128 *)a3 = result;
      a3[2] = v11;
      if (*a2 < *(void *)a1)
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        a2[2] = v13;
      }
    }
  }
  return result;
}

char *sub_1CCFC8AB0(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v10 = *(long long **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (a5 > (v9 - (uint64_t)v10) >> 4)
  {
    uint64_t v11 = *(char **)a1;
    unint64_t v12 = a5 + (((uint64_t)v10 - *(void *)a1) >> 4);
    if (v12 >> 60) {
      abort();
    }
    uint64_t v13 = v9 - (void)v11;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 60) {
        sub_1CB833614();
      }
      uint64_t v15 = (char *)operator new(16 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v25 = &v15[16 * ((v5 - v11) >> 4)];
    uint64_t v26 = &v25[16 * a5];
    uint64_t v27 = 16 * a5;
    uint64_t v28 = v25;
    do
    {
      long long v29 = *(_OWORD *)v7;
      v7 += 16;
      *(_OWORD *)uint64_t v28 = v29;
      v28 += 16;
      v27 -= 16;
    }
    while (v27);
    uint64_t v30 = *(char **)a1;
    if (v5 == *(char **)a1)
    {
      long long v32 = v25;
    }
    else
    {
      long long v31 = v5;
      long long v32 = v25;
      do
      {
        uint64_t v33 = *((void *)v31 - 2);
        v31 -= 16;
        int v34 = *((_DWORD *)v31 + 2);
        *((void *)v32 - 2) = v33;
        v32 -= 16;
        *((_DWORD *)v32 + 2) = v34;
      }
      while (v31 != v30);
      uint64_t v10 = *(long long **)(a1 + 8);
    }
    uint64_t v35 = &v15[16 * v14];
    uint64_t v36 = (char *)v10 - v5;
    if (v10 != (long long *)v5) {
      memmove(v26, v5, v36 - 4);
    }
    uint64_t v37 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v26[v36];
    *(void *)(a1 + 16) = v35;
    if (v37) {
      operator delete(v37);
    }
    return v25;
  }
  uint64_t v16 = (char *)v10 - __dst;
  uint64_t v17 = ((char *)v10 - __dst) >> 4;
  if (v17 >= a5)
  {
    uint64_t v18 = &__src[16 * a5];
    uint64_t v20 = *(char **)(a1 + 8);
LABEL_18:
    uint64_t v21 = &v5[16 * a5];
    uint64_t v22 = (long long *)&v20[-16 * a5];
    uint64_t v23 = v20;
    if (v22 < v10)
    {
      uint64_t v23 = v20;
      do
      {
        long long v24 = *v22++;
        *(_OWORD *)uint64_t v23 = v24;
        v23 += 16;
      }
      while (v22 < v10);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v20[-16 * ((v20 - v21) >> 4)], v5, v20 - v21 - 4);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7 - 4);
    }
    return v5;
  }
  uint64_t v18 = &__src[16 * v17];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(*(void **)(a1 + 8), &__src[16 * v17], v19 - 4);
  }
  uint64_t v20 = (char *)v10 + v19;
  *(void *)(a1 + 8) = (char *)v10 + v19;
  if (v16 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

__n128 sub_1CCFC8CB4(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    long long v6 = *(__n128 **)a1;
    uint64_t v5 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v14 = 0x5555555555555556 * (v4 - v6);
      if (v4 == v6) {
        unint64_t v14 = 1;
      }
      if (v14 >= 0x555555555555556) {
        sub_1CB833614();
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v16 = 3 * v14;
      uint64_t v17 = (char *)operator new(48 * v14);
      uint64_t v18 = (__n128 *)&v17[48 * v15];
      int64_t v20 = (char *)v4 - (char *)v5;
      BOOL v19 = v4 == v5;
      uint64_t v4 = v18;
      if (!v19)
      {
        uint64_t v21 = v20 / 48;
        uint64_t v4 = &v18[3 * v21];
        uint64_t v22 = 48 * v21;
        uint64_t v23 = &v17[48 * v15];
        do
        {
          __n128 v24 = *v5;
          __n128 v25 = v5[2];
          *((__n128 *)v23 + 1) = v5[1];
          *((__n128 *)v23 + 2) = v25;
          *(__n128 *)uint64_t v23 = v24;
          v23 += 48;
          v5 += 3;
          v22 -= 48;
        }
        while (v22);
      }
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v17[16 * v16];
      if (v6)
      {
        operator delete(v6);
        uint64_t v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 4);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -(v8 >> 1);
      uint64_t v10 = -3 * (v8 >> 1);
      uint64_t v11 = &v5[v10];
      int64_t v12 = (char *)v4 - (char *)v5;
      if (v4 != v5)
      {
        memmove(&v5[v10], *(const void **)(a1 + 8), (char *)v4 - (char *)v5);
        uint64_t v4 = *(__n128 **)(a1 + 8);
      }
      uint64_t v13 = &v4[3 * v9];
      uint64_t v4 = (__n128 *)((char *)v11 + v12);
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = (char *)v11 + v12;
    }
  }
  __n128 result = *a2;
  __n128 v27 = a2[2];
  v4[1] = a2[1];
  v4[2] = v27;
  __n128 *v4 = result;
  *(void *)(a1 + 16) += 48;
  return result;
}

unint64_t sub_1CCFC8E38(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  uint64_t v10 = (long long *)(a2 - 40);
  unint64_t v11 = v9;
LABEL_3:
  while (1)
  {
    unint64_t v9 = v11;
    uint64_t v12 = a2 - v11;
    uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v11) >> 3);
    if (v5 || !v4) {
      break;
    }
    if (v12 <= 959)
    {
      unint64_t v258 = v11 + 40;
      BOOL v260 = v11 == a2 || v258 == a2;
      if (a4)
      {
        if (!v260)
        {
          unint64_t v261 = v11;
          while (1)
          {
            unint64_t v262 = v261;
            unint64_t v261 = v258;
            unsigned int v263 = *(_DWORD *)(v262 + 32);
            unsigned int v264 = *(_DWORD *)(v262 + 72);
            if (v264 != v263) {
              break;
            }
            uint64_t v265 = *(void *)(v262 + 48);
            uint64_t v266 = *(void *)(v262 + 8);
            uint64_t v267 = (void *)(v266 + 24);
            uint64_t v268 = *(unsigned int *)(v265 + 32);
            if (v268 <= 0x40)
            {
              if ((uint64_t)(*(void *)(v265 + 24) << -(char)v268) >> -(char)v268 >= (uint64_t)(*v267 << -(char)v268) >> -(char)v268) {
                goto LABEL_292;
              }
              goto LABEL_272;
            }
            uint64_t v286 = *(void *)(v265 + 24);
            uint64_t v287 = *(void *)(v286 + 8 * ((v268 - 1) >> 6)) & (1 << (v268 - 1));
            __n128 result = v287 != 0;
            unsigned int v288 = *(_DWORD *)(v266 + 32);
            unsigned int v289 = v288 - 1;
            uint64_t v290 = *(void *)(v266 + 24);
            if (v288 >= 0x41) {
              uint64_t v267 = (void *)(v290 + 8 * (v289 >> 6));
            }
            if (result != ((*v267 >> v289) & 1))
            {
              if (!v287) {
                goto LABEL_292;
              }
              goto LABEL_272;
            }
            unint64_t v291 = v268 + 63;
            uint64_t v292 = v290 - 8;
            uint64_t v293 = (v291 >> 3) & 0x3FFFFFF8;
            uint64_t v294 = v286 - 8;
            do
            {
              if (!v293) {
                goto LABEL_292;
              }
              unint64_t v295 = *(void *)(v294 + v293);
              unint64_t v296 = *(void *)(v292 + v293);
              v293 -= 8;
            }
            while (v295 == v296);
            if (v295 <= v296) {
              goto LABEL_272;
            }
LABEL_292:
            unint64_t v258 = v261 + 40;
            if (v261 + 40 == a2) {
              return result;
            }
          }
          if (v264 <= v263) {
            goto LABEL_292;
          }
          uint64_t v265 = *(void *)(v262 + 48);
LABEL_272:
          uint64_t v269 = *(void *)(v262 + 40);
          long long v507 = *(_OWORD *)(v262 + 56);
          *(_DWORD *)(v261 + 32) = *(_DWORD *)(v262 + 32);
          long long v270 = *(_OWORD *)(v262 + 16);
          *(_OWORD *)unint64_t v261 = *(_OWORD *)v262;
          *(_OWORD *)(v261 + 16) = v270;
          unint64_t v271 = v11;
          if (v262 == v11) {
            goto LABEL_291;
          }
          while (1)
          {
            unsigned int v272 = *(_DWORD *)(v262 - 8);
            if (v264 == v272)
            {
              uint64_t v273 = *(void *)(v262 - 32);
              int v274 = (void *)(v273 + 24);
              uint64_t v275 = *(unsigned int *)(v265 + 32);
              if (v275 <= 0x40)
              {
                if ((uint64_t)(*(void *)(v265 + 24) << -(char)v275) >> -(char)v275 >= (uint64_t)(*v274 << -(char)v275) >> -(char)v275) {
                  goto LABEL_290;
                }
              }
              else
              {
                uint64_t v277 = *(void *)(v265 + 24);
                __n128 result = *(void *)(v277 + 8 * ((v275 - 1) >> 6)) & (1 << (v275 - 1));
                unsigned int v278 = *(_DWORD *)(v273 + 32);
                unsigned int v279 = v278 - 1;
                uint64_t v280 = *(void *)(v273 + 24);
                if (v278 >= 0x41) {
                  int v274 = (void *)(v280 + 8 * (v279 >> 6));
                }
                if ((result != 0) == ((*v274 >> v279) & 1))
                {
                  unint64_t v281 = v275 + 63;
                  uint64_t v282 = v280 - 8;
                  uint64_t v283 = (v281 >> 3) & 0x3FFFFFF8;
                  uint64_t v284 = v277 - 8;
                  while (v283)
                  {
                    long long v285 = *(long long **)(v284 + v283);
                    __n128 result = *(void *)(v282 + v283);
                    v283 -= 8;
                    if (v285 != (long long *)result)
                    {
                      if ((unint64_t)v285 <= result) {
                        goto LABEL_279;
                      }
                      break;
                    }
                  }
LABEL_290:
                  unint64_t v271 = v262;
LABEL_291:
                  *(void *)unint64_t v271 = v269;
                  *(void *)(v271 + 8) = v265;
                  *(_OWORD *)(v271 + 16) = v507;
                  *(_DWORD *)(v271 + 32) = v264;
                  goto LABEL_292;
                }
                if (!result) {
                  goto LABEL_290;
                }
              }
            }
            else if (v264 <= v272)
            {
              goto LABEL_290;
            }
LABEL_279:
            long long v276 = *(_OWORD *)(v262 - 24);
            *(_OWORD *)unint64_t v262 = *(_OWORD *)(v262 - 40);
            *(_OWORD *)(v262 + 16) = v276;
            *(_DWORD *)(v262 + 32) = *(_DWORD *)(v262 - 8);
            v262 -= 40;
            if (v262 == v11)
            {
              unint64_t v271 = v11;
              goto LABEL_291;
            }
          }
        }
        return result;
      }
      if (v260) {
        return result;
      }
      while (2)
      {
        unint64_t v457 = v9;
        unint64_t v9 = v258;
        unsigned int v458 = *(_DWORD *)(v457 + 32);
        unsigned int v459 = *(_DWORD *)(v457 + 72);
        if (v459 == v458)
        {
          uint64_t v460 = *(void *)(v457 + 48);
          uint64_t v461 = *(void *)(v457 + 8);
          v462 = (void *)(v461 + 24);
          uint64_t v463 = *(unsigned int *)(v460 + 32);
          if (v463 > 0x40)
          {
            uint64_t v481 = *(void *)(v460 + 24);
            uint64_t v482 = *(void *)(v481 + 8 * ((v463 - 1) >> 6)) & (1 << (v463 - 1));
            __n128 result = *(unsigned int *)(v461 + 32);
            unsigned int v483 = result - 1;
            uint64_t v484 = *(void *)(v461 + 24);
            if (result >= 0x41) {
              v462 = (void *)(v484 + 8 * (v483 >> 6));
            }
            if ((v482 != 0) == ((*v462 >> v483) & 1))
            {
              unint64_t v485 = v463 + 63;
              uint64_t v486 = v484 - 8;
              uint64_t v487 = (v485 >> 3) & 0x3FFFFFF8;
              uint64_t v488 = v481 - 8;
              while (v487)
              {
                unint64_t v489 = *(void *)(v488 + v487);
                unint64_t v490 = *(void *)(v486 + v487);
                v487 -= 8;
                if (v489 != v490)
                {
                  if (v489 <= v490) {
                    goto LABEL_465;
                  }
                  break;
                }
              }
            }
            else if (v482)
            {
              break;
            }
LABEL_483:
            unint64_t v258 = v9 + 40;
            if (v9 + 40 == a2) {
              return result;
            }
            continue;
          }
          if ((uint64_t)(*(void *)(v460 + 24) << -(char)v463) >> -(char)v463 >= (uint64_t)(*v462 << -(char)v463) >> -(char)v463) {
            goto LABEL_483;
          }
        }
        else
        {
          if (v459 <= v458) {
            goto LABEL_483;
          }
          uint64_t v460 = *(void *)(v457 + 48);
        }
        break;
      }
LABEL_465:
      uint64_t v464 = *(void *)v9;
      long long v511 = *(_OWORD *)(v457 + 56);
      unint64_t v465 = v9;
      while (1)
      {
        while (1)
        {
LABEL_466:
          while (1)
          {
            unint64_t v466 = v465;
            unint64_t v465 = v457;
            long long v467 = *(_OWORD *)(v457 + 16);
            *(_OWORD *)unint64_t v466 = *(_OWORD *)v457;
            *(_OWORD *)(v466 + 16) = v467;
            *(_DWORD *)(v466 + 32) = *(_DWORD *)(v457 + 32);
            v457 -= 40;
            unsigned int v468 = *(_DWORD *)(v465 - 8);
            if (v459 == v468) {
              break;
            }
            if (v459 <= v468) {
              goto LABEL_482;
            }
          }
          uint64_t v469 = *(void *)(v465 - 32);
          v470 = (void *)(v469 + 24);
          uint64_t v471 = *(unsigned int *)(v460 + 32);
          if (v471 > 0x40) {
            break;
          }
          if ((uint64_t)(*(void *)(v460 + 24) << -(char)v471) >> -(char)v471 >= (uint64_t)(*v470 << -(char)v471) >> -(char)v471) {
            goto LABEL_482;
          }
        }
        uint64_t v472 = *(void *)(v460 + 24);
        __n128 result = *(void *)(v472 + 8 * ((v471 - 1) >> 6)) & (1 << (v471 - 1));
        unsigned int v473 = *(_DWORD *)(v469 + 32);
        unsigned int v474 = v473 - 1;
        uint64_t v475 = *(void *)(v469 + 24);
        if (v473 >= 0x41) {
          v470 = (void *)(v475 + 8 * (v474 >> 6));
        }
        if ((result != 0) == ((*v470 >> v474) & 1)) {
          break;
        }
        if (!result) {
          goto LABEL_482;
        }
      }
      unint64_t v476 = v471 + 63;
      uint64_t v477 = v475 - 8;
      uint64_t v478 = (v476 >> 3) & 0x3FFFFFF8;
      uint64_t v479 = v472 - 8;
      while (v478)
      {
        v480 = *(long long **)(v479 + v478);
        __n128 result = *(void *)(v477 + v478);
        v478 -= 8;
        if (v480 != (long long *)result)
        {
          if ((unint64_t)v480 <= result) {
            goto LABEL_466;
          }
          break;
        }
      }
LABEL_482:
      *(void *)unint64_t v465 = v464;
      *(void *)(v465 + 8) = v460;
      *(_OWORD *)(v465 + 16) = v511;
      *(_DWORD *)(v465 + 32) = v459;
      goto LABEL_483;
    }
    if (!a3)
    {
      if (v11 == a2) {
        return result;
      }
      int64_t v297 = (unint64_t)(v13 - 2) >> 1;
      int64_t v298 = v297;
LABEL_306:
      int64_t v299 = v298;
      if (v297 < v298) {
        goto LABEL_364;
      }
      uint64_t v300 = (2 * v298) | 1;
      unint64_t v301 = v11 + 40 * v300;
      if (2 * v299 + 2 >= v13) {
        goto LABEL_314;
      }
      unsigned int v302 = *(_DWORD *)(v301 + 72);
      unsigned int v303 = *(_DWORD *)(v11 + 40 * v300 + 32);
      if (v303 == v302)
      {
        uint64_t v304 = *(void *)(v11 + 40 * v300 + 8);
        uint64_t v305 = *(void *)(v301 + 48);
        int v306 = (void *)(v305 + 24);
        uint64_t v307 = *(unsigned int *)(v304 + 32);
        if (v307 <= 0x40)
        {
          BOOL v308 = (uint64_t)(*(void *)(v304 + 24) << -(char)v307) >> -(char)v307 < (uint64_t)(*v306 << -(char)v307) >> -(char)v307;
          goto LABEL_312;
        }
        uint64_t v366 = *(void *)(v304 + 24);
        uint64_t v367 = *(void *)(v366 + 8 * ((v307 - 1) >> 6)) & (1 << (v307 - 1));
        unsigned int v368 = *(_DWORD *)(v305 + 32);
        unsigned int v369 = v368 - 1;
        uint64_t v370 = *(void *)(v305 + 24);
        if (v368 >= 0x41) {
          int v306 = (void *)(v370 + 8 * (v369 >> 6));
        }
        if (((v367 != 0) ^ (*v306 >> v369)))
        {
          v301 += 40 * (v367 != 0);
          if (!v367) {
            goto LABEL_314;
          }
LABEL_313:
          uint64_t v300 = 2 * v299 + 2;
LABEL_314:
          unint64_t v309 = v11 + 40 * v299;
          unsigned int v310 = *(_DWORD *)(v309 + 32);
          unsigned int v311 = *(_DWORD *)(v301 + 32);
          if (v311 == v310)
          {
            uint64_t v312 = *(void *)(v301 + 8);
            uint64_t v313 = *(void *)(v11 + 40 * v299 + 8);
            uint64_t v314 = (void *)(v313 + 24);
            uint64_t v315 = *(unsigned int *)(v312 + 32);
            if (v315 > 0x40)
            {
              uint64_t v361 = *(void *)(v312 + 24);
              uint64_t v362 = *(void *)(v361 + 8 * ((v315 - 1) >> 6)) & (1 << (v315 - 1));
              unsigned int v363 = *(_DWORD *)(v313 + 32);
              unsigned int v364 = v363 - 1;
              uint64_t v365 = *(void *)(v313 + 24);
              if (v363 >= 0x41) {
                uint64_t v314 = (void *)(v365 + 8 * (v364 >> 6));
              }
              if ((v362 != 0) == ((*v314 >> v364) & 1))
              {
                unint64_t v371 = v315 + 63;
                uint64_t v372 = v365 - 8;
                uint64_t v373 = (v371 >> 3) & 0x3FFFFFF8;
                uint64_t v374 = v361 - 8;
                do
                {
                  if (!v373) {
                    goto LABEL_320;
                  }
                  unint64_t v375 = *(void *)(v374 + v373);
                  unint64_t v376 = *(void *)(v372 + v373);
                  v373 -= 8;
                }
                while (v375 == v376);
                if (v375 <= v376) {
                  goto LABEL_364;
                }
              }
              else if (v362)
              {
                goto LABEL_364;
              }
            }
            else if ((uint64_t)(*(void *)(v312 + 24) << -(char)v315) >> -(char)v315 < (uint64_t)(*v314 << -(char)v315) >> -(char)v315)
            {
              goto LABEL_364;
            }
          }
          else
          {
            if (v311 > v310) {
              goto LABEL_364;
            }
            uint64_t v313 = *(void *)(v309 + 8);
          }
LABEL_320:
          uint64_t v316 = *(void *)v309;
          long long v508 = *(_OWORD *)(v309 + 16);
          long long v317 = *(_OWORD *)v301;
          long long v318 = *(_OWORD *)(v301 + 16);
          *(_DWORD *)(v309 + 32) = *(_DWORD *)(v301 + 32);
          *(_OWORD *)unint64_t v309 = v317;
          *(_OWORD *)(v309 + 16) = v318;
          if (v297 < v300) {
            goto LABEL_363;
          }
          while (1)
          {
            unint64_t v319 = v301;
            uint64_t v320 = 2 * v300;
            uint64_t v300 = (2 * v300) | 1;
            unint64_t v301 = v11 + 40 * v300;
            uint64_t v321 = v320 + 2;
            if (v321 < v13)
            {
              unsigned int v322 = *(_DWORD *)(v301 + 72);
              unsigned int v323 = *(_DWORD *)(v11 + 40 * v300 + 32);
              if (v323 == v322)
              {
                uint64_t v324 = *(void *)(v11 + 40 * v300 + 8);
                uint64_t v325 = *(void *)(v301 + 48);
                int v326 = (void *)(v325 + 24);
                uint64_t v327 = *(unsigned int *)(v324 + 32);
                if (v327 > 0x40)
                {
                  uint64_t v344 = *(void *)(v324 + 24);
                  uint64_t v345 = *(void *)(v344 + 8 * ((v327 - 1) >> 6)) & (1 << (v327 - 1));
                  unsigned int v346 = *(_DWORD *)(v325 + 32);
                  unsigned int v347 = v346 - 1;
                  uint64_t v348 = *(void *)(v325 + 24);
                  if (v346 >= 0x41) {
                    int v326 = (void *)(v348 + 8 * (v347 >> 6));
                  }
                  if ((v345 != 0) == ((*v326 >> v347) & 1))
                  {
                    unint64_t v355 = v327 + 63;
                    uint64_t v356 = v348 - 8;
                    uint64_t v357 = (v355 >> 3) & 0x3FFFFFF8;
                    uint64_t v358 = v344 - 8;
                    do
                    {
                      if (!v357)
                      {
                        unsigned int v331 = 0;
                        goto LABEL_327;
                      }
                      unint64_t v359 = *(void *)(v358 + v357);
                      unint64_t v360 = *(void *)(v356 + v357);
                      v357 -= 8;
                    }
                    while (v359 == v360);
                    if (v359 > v360) {
                      unsigned int v331 = 1;
                    }
                    else {
                      unsigned int v331 = -1;
                    }
                  }
                  else if (v345)
                  {
                    unsigned int v331 = -1;
                  }
                  else
                  {
                    unsigned int v331 = 1;
                  }
                }
                else
                {
                  uint64_t v328 = -v327;
                  uint64_t v329 = (uint64_t)(*(void *)(v324 + 24) << v328) >> v328;
                  uint64_t v330 = (uint64_t)(*v326 << v328) >> v328;
                  BOOL v79 = v329 < v330;
                  unsigned int v331 = v329 > v330;
                  if (v79) {
                    unsigned int v331 = -1;
                  }
                }
LABEL_327:
                BOOL v332 = v331 >> 31;
              }
              else
              {
                BOOL v332 = v323 > v322;
              }
              v301 += 40 * v332;
              if (v332) {
                uint64_t v300 = v321;
              }
            }
            unsigned int v333 = *(_DWORD *)(v301 + 32);
            if (v333 == v310)
            {
              uint64_t v334 = *(void *)(v301 + 8);
              uint64_t v335 = *(unsigned int *)(v334 + 32);
              if (v335 > 0x40)
              {
                uint64_t v338 = *(void *)(v334 + 24);
                uint64_t v339 = *(void *)(v338 + 8 * ((v335 - 1) >> 6)) & (1 << (v335 - 1));
                unsigned int v340 = *(_DWORD *)(v313 + 32);
                unsigned int v341 = v340 - 1;
                uint64_t v342 = *(void *)(v313 + 24);
                if (v340 >= 0x41) {
                  uint64_t v343 = (void *)(v342 + 8 * (v341 >> 6));
                }
                else {
                  uint64_t v343 = (void *)(v313 + 24);
                }
                if ((v339 != 0) == ((*v343 >> v341) & 1))
                {
                  unint64_t v349 = v335 + 63;
                  uint64_t v350 = v342 - 8;
                  uint64_t v351 = (v349 >> 3) & 0x3FFFFFF8;
                  uint64_t v352 = v338 - 8;
                  do
                  {
                    if (!v351) {
                      goto LABEL_336;
                    }
                    unint64_t v353 = *(void *)(v352 + v351);
                    unint64_t v354 = *(void *)(v350 + v351);
                    v351 -= 8;
                  }
                  while (v353 == v354);
                  if (v353 <= v354)
                  {
LABEL_362:
                    unint64_t v301 = v319;
LABEL_363:
                    *(void *)unint64_t v301 = v316;
                    *(void *)(v301 + 8) = v313;
                    *(_OWORD *)(v301 + 16) = v508;
                    *(_DWORD *)(v301 + 32) = v310;
LABEL_364:
                    int64_t v298 = v299 - 1;
                    if (!v299)
                    {
                      while (2)
                      {
                        uint64_t v383 = 0;
                        uint64_t v519 = *(void *)(v11 + 32);
                        long long v509 = *(_OWORD *)v11;
                        long long v515 = *(_OWORD *)(v11 + 16);
                        unint64_t v384 = v11;
                        do
                        {
                          __n128 result = v383 + 1;
                          unint64_t v385 = v384 + 40 * (v383 + 1);
                          uint64_t v386 = (2 * v383) | 1;
                          uint64_t v387 = 2 * v383 + 2;
                          if (v387 < v13)
                          {
                            unsigned int v388 = *(_DWORD *)(v385 + 72);
                            unsigned int v389 = *(_DWORD *)(v384 + 40 * result + 32);
                            if (v389 == v388)
                            {
                              uint64_t v390 = *(void *)(v384 + 40 * result + 8);
                              uint64_t v391 = *(void *)(v385 + 48);
                              v392 = (void *)(v391 + 24);
                              uint64_t v393 = *(unsigned int *)(v390 + 32);
                              if (v393 > 0x40)
                              {
                                uint64_t v400 = *(void *)(v390 + 24);
                                uint64_t v401 = *(void *)(v400 + 8 * ((v393 - 1) >> 6)) & (1 << (v393 - 1));
                                unsigned int v402 = *(_DWORD *)(v391 + 32);
                                unsigned int v403 = v402 - 1;
                                uint64_t v404 = *(void *)(v391 + 24);
                                if (v402 >= 0x41) {
                                  v392 = (void *)(v404 + 8 * (v403 >> 6));
                                }
                                if ((v401 != 0) == ((*v392 >> v403) & 1))
                                {
                                  unint64_t v405 = v393 + 63;
                                  uint64_t v406 = v404 - 8;
                                  uint64_t v407 = (v405 >> 3) & 0x3FFFFFF8;
                                  uint64_t v408 = v400 - 8;
                                  do
                                  {
                                    if (!v407)
                                    {
                                      unsigned int v397 = 0;
                                      goto LABEL_392;
                                    }
                                    unint64_t v409 = *(void *)(v408 + v407);
                                    unint64_t v410 = *(void *)(v406 + v407);
                                    v407 -= 8;
                                  }
                                  while (v409 == v410);
                                  if (v409 > v410) {
                                    unsigned int v397 = 1;
                                  }
                                  else {
                                    unsigned int v397 = -1;
                                  }
                                }
                                else if (v401)
                                {
                                  unsigned int v397 = -1;
                                }
                                else
                                {
                                  unsigned int v397 = 1;
                                }
                              }
                              else
                              {
                                uint64_t v394 = -v393;
                                uint64_t v395 = (uint64_t)(*(void *)(v390 + 24) << v394) >> v394;
                                uint64_t v396 = (uint64_t)(*v392 << v394) >> v394;
                                BOOL v79 = v395 < v396;
                                unsigned int v397 = v395 > v396;
                                if (v79) {
                                  unsigned int v397 = -1;
                                }
                              }
LABEL_392:
                              __n128 result = v397 >> 31;
                            }
                            else
                            {
                              __n128 result = v389 > v388;
                            }
                            v385 += 40 * result;
                            if (result) {
                              uint64_t v386 = v387;
                            }
                          }
                          long long v398 = *(_OWORD *)v385;
                          long long v399 = *(_OWORD *)(v385 + 16);
                          *(_DWORD *)(v384 + 32) = *(_DWORD *)(v385 + 32);
                          *(_OWORD *)unint64_t v384 = v398;
                          *(_OWORD *)(v384 + 16) = v399;
                          unint64_t v384 = v385;
                          uint64_t v383 = v386;
                        }
                        while (v386 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
                        a2 -= 40;
                        if (v385 == a2)
                        {
                          *(_DWORD *)(v385 + 32) = v519;
                          *(_OWORD *)unint64_t v385 = v509;
                          *(_OWORD *)(v385 + 16) = v515;
                          goto LABEL_423;
                        }
                        long long v411 = *(_OWORD *)a2;
                        long long v412 = *(_OWORD *)(a2 + 16);
                        *(_DWORD *)(v385 + 32) = *(_DWORD *)(a2 + 32);
                        *(_OWORD *)unint64_t v385 = v411;
                        *(_OWORD *)(v385 + 16) = v412;
                        *(_DWORD *)(a2 + 32) = v519;
                        *(_OWORD *)a2 = v509;
                        *(_OWORD *)(a2 + 16) = v515;
                        uint64_t v413 = v385 - v11 + 40;
                        if (v413 >= 41)
                        {
                          unint64_t v414 = v413 / 0x28uLL - 2;
                          unint64_t v415 = v414 >> 1;
                          unsigned int v416 = *(_DWORD *)(v385 + 32);
                          unsigned int v417 = *(_DWORD *)(v11 + 40 * (v414 >> 1) + 32);
                          if (v417 != v416)
                          {
                            if (v417 <= v416) {
                              goto LABEL_423;
                            }
                            uint64_t v419 = *(void *)(v385 + 8);
                            goto LABEL_420;
                          }
                          uint64_t v418 = *(void *)(v11 + 40 * v415 + 8);
                          uint64_t v419 = *(void *)(v385 + 8);
                          v420 = (void *)(v419 + 24);
                          uint64_t v421 = *(unsigned int *)(v418 + 32);
                          if (v421 > 0x40)
                          {
                            __n128 result = *(void *)(v418 + 24);
                            uint64_t v446 = *(void *)(result + 8 * ((v421 - 1) >> 6)) & (1 << (v421 - 1));
                            unsigned int v447 = *(_DWORD *)(v419 + 32);
                            unsigned int v448 = v447 - 1;
                            uint64_t v449 = *(void *)(v419 + 24);
                            if (v447 >= 0x41) {
                              v420 = (void *)(v449 + 8 * (v448 >> 6));
                            }
                            if ((v446 != 0) != ((*v420 >> v448) & 1))
                            {
                              if (!v446) {
                                goto LABEL_423;
                              }
                              goto LABEL_420;
                            }
                            unint64_t v450 = v421 + 63;
                            uint64_t v451 = v449 - 8;
                            uint64_t v452 = (v450 >> 3) & 0x3FFFFFF8;
                            result -= 8;
                            while (v452)
                            {
                              unint64_t v453 = *(void *)(result + v452);
                              unint64_t v454 = *(void *)(v451 + v452);
                              v452 -= 8;
                              if (v453 != v454)
                              {
                                if (v453 <= v454) {
                                  goto LABEL_420;
                                }
                                break;
                              }
                            }
                          }
                          else
                          {
                            uint64_t v422 = -v421;
                            __n128 result = (uint64_t)(*(void *)(v418 + 24) << v422) >> v422;
                            if ((uint64_t)result >= (uint64_t)(*v420 << v422) >> v422) {
                              goto LABEL_423;
                            }
LABEL_420:
                            uint64_t v423 = *(void *)v385;
                            long long v504 = *(_OWORD *)(v385 + 16);
                            unsigned int v424 = *(_DWORD *)(v385 + 32);
                            __n128 result = v11 + 40 * v415;
                            int v425 = *(_DWORD *)(result + 32);
                            long long v426 = *(_OWORD *)(result + 16);
                            *(_OWORD *)unint64_t v385 = *(_OWORD *)result;
                            *(_OWORD *)(v385 + 16) = v426;
                            *(_DWORD *)(v385 + 32) = v425;
                            if (v414 >= 2)
                            {
                              while (1)
                              {
                                unint64_t v428 = v415 - 1;
                                unint64_t v415 = (v415 - 1) >> 1;
                                unsigned int v429 = *(_DWORD *)(v11 + 40 * v415 + 32);
                                if (v429 == v424)
                                {
                                  uint64_t v430 = *(void *)(v11 + 40 * v415 + 8);
                                  uint64_t v431 = *(unsigned int *)(v430 + 32);
                                  if (v431 > 0x40)
                                  {
                                    uint64_t v434 = *(void *)(v430 + 24);
                                    uint64_t v435 = *(void *)(v434 + 8 * ((v431 - 1) >> 6)) & (1 << (v431 - 1));
                                    unsigned int v436 = *(_DWORD *)(v419 + 32);
                                    unsigned int v437 = v436 - 1;
                                    uint64_t v438 = *(void *)(v419 + 24);
                                    if (v436 >= 0x41) {
                                      v439 = (void *)(v438 + 8 * (v437 >> 6));
                                    }
                                    else {
                                      v439 = (void *)(v419 + 24);
                                    }
                                    if ((v435 != 0) == ((*v439 >> v437) & 1))
                                    {
                                      unint64_t v440 = v431 + 63;
                                      uint64_t v441 = v438 - 8;
                                      uint64_t v442 = (v440 >> 3) & 0x3FFFFFF8;
                                      uint64_t v443 = v434 - 8;
                                      while (v442)
                                      {
                                        unint64_t v444 = *(void *)(v443 + v442);
                                        unint64_t v445 = *(void *)(v441 + v442);
                                        v442 -= 8;
                                        if (v444 != v445)
                                        {
                                          if (v444 <= v445) {
                                            goto LABEL_431;
                                          }
                                          goto LABEL_421;
                                        }
                                      }
                                      break;
                                    }
                                    if (!v435) {
                                      break;
                                    }
                                  }
                                  else if ((uint64_t)(*(void *)(v430 + 24) << -(char)v431) >> -(char)v431 >= (uint64_t)(*(void *)(v419 + 24) << -(char)v431) >> -(char)v431)
                                  {
                                    break;
                                  }
                                }
                                else if (v429 <= v424)
                                {
                                  break;
                                }
LABEL_431:
                                unint64_t v427 = v11 + 40 * v415;
                                long long v432 = *(_OWORD *)v427;
                                long long v433 = *(_OWORD *)(v427 + 16);
                                *(_DWORD *)(result + 32) = *(_DWORD *)(v427 + 32);
                                *(_OWORD *)__n128 result = v432;
                                *(_OWORD *)(result + 16) = v433;
                                __n128 result = v427;
                                if (v428 <= 1) {
                                  goto LABEL_422;
                                }
                              }
                            }
LABEL_421:
                            unint64_t v427 = result;
LABEL_422:
                            *(void *)unint64_t v427 = v423;
                            *(void *)(v427 + 8) = v419;
                            *(_OWORD *)(v427 + 16) = v504;
                            *(_DWORD *)(v427 + 32) = v424;
                          }
                        }
LABEL_423:
                        BOOL v79 = v13-- <= 2;
                        if (v79) {
                          return result;
                        }
                        continue;
                      }
                    }
                    goto LABEL_306;
                  }
                }
                else if (v339)
                {
                  goto LABEL_362;
                }
              }
              else if ((uint64_t)(*(void *)(v334 + 24) << -(char)v335) >> -(char)v335 < (uint64_t)(*(void *)(v313 + 24) << -(char)v335) >> -(char)v335)
              {
                goto LABEL_362;
              }
            }
            else if (v333 > v310)
            {
              goto LABEL_362;
            }
LABEL_336:
            long long v336 = *(_OWORD *)v301;
            long long v337 = *(_OWORD *)(v301 + 16);
            *(_DWORD *)(v319 + 32) = *(_DWORD *)(v301 + 32);
            *(_OWORD *)unint64_t v319 = v336;
            *(_OWORD *)(v319 + 16) = v337;
            if (v297 < v300) {
              goto LABEL_363;
            }
          }
        }
        unint64_t v377 = v307 + 63;
        uint64_t v378 = v370 - 8;
        uint64_t v379 = (v377 >> 3) & 0x3FFFFFF8;
        uint64_t v380 = v366 - 8;
        do
        {
          if (!v379) {
            goto LABEL_314;
          }
          unint64_t v381 = *(void *)(v380 + v379);
          unint64_t v382 = *(void *)(v378 + v379);
          v379 -= 8;
        }
        while (v381 == v382);
        BOOL v308 = v381 <= v382;
      }
      else
      {
        BOOL v308 = v303 > v302;
      }
LABEL_312:
      v301 += 40 * v308;
      if (v308) {
        goto LABEL_313;
      }
      goto LABEL_314;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    unint64_t v15 = v11 + 40 * ((unint64_t)v13 >> 1);
    if ((unint64_t)v12 >= 0x1401)
    {
      sub_1CC706108((long long *)v9, (long long *)(v9 + 40 * ((unint64_t)v13 >> 1)), (long long *)(a2 - 40));
      uint64_t v16 = 5 * v14;
      uint64_t v17 = (long long *)(v9 + 40 * v14 - 40);
      sub_1CC706108((long long *)(v9 + 40), v17, (long long *)(a2 - 80));
      uint64_t v18 = (long long *)(v9 + 40 + 8 * v16);
      sub_1CC706108((long long *)(v9 + 80), v18, (long long *)(a2 - 120));
      __n128 result = (unint64_t)sub_1CC706108(v17, (long long *)v15, v18);
      uint64_t v517 = *(void *)(v9 + 32);
      long long v505 = *(_OWORD *)v9;
      long long v512 = *(_OWORD *)(v9 + 16);
      long long v19 = *(_OWORD *)v15;
      long long v20 = *(_OWORD *)(v15 + 16);
      *(_DWORD *)(v9 + 32) = *(_DWORD *)(v15 + 32);
      *(_OWORD *)unint64_t v9 = v19;
      *(_OWORD *)(v9 + 16) = v20;
      *(_DWORD *)(v15 + 32) = v517;
      *(_OWORD *)unint64_t v15 = v505;
      *(_OWORD *)(v15 + 16) = v512;
    }
    else
    {
      __n128 result = (unint64_t)sub_1CC706108((long long *)(v9 + 40 * ((unint64_t)v13 >> 1)), (long long *)v9, (long long *)(a2 - 40));
    }
    --a3;
    if (a4)
    {
      unsigned int v21 = *(_DWORD *)(v9 + 32);
    }
    else
    {
      unsigned int v21 = *(_DWORD *)(v9 + 32);
      unsigned int v22 = *(_DWORD *)(v9 - 8);
      if (v22 == v21)
      {
        uint64_t v23 = *(void *)(v9 - 32);
        uint64_t v24 = *(void *)(v9 + 8);
        __n128 v25 = (void *)(v24 + 24);
        uint64_t v26 = *(unsigned int *)(v23 + 32);
        if (v26 > 0x40)
        {
          uint64_t v158 = *(void *)(v23 + 24);
          uint64_t v159 = *(void *)(v158 + 8 * ((v26 - 1) >> 6)) & (1 << (v26 - 1));
          unsigned int v160 = *(_DWORD *)(v24 + 32);
          unsigned int v161 = v160 - 1;
          uint64_t v162 = *(void *)(v24 + 24);
          __n128 result = v162 + 8 * ((v160 - 1) >> 6);
          if (v160 >= 0x41) {
            __n128 v25 = (void *)(v162 + 8 * (v161 >> 6));
          }
          if ((v159 != 0) == ((*v25 >> v161) & 1))
          {
            unint64_t v163 = v26 + 63;
            uint64_t v164 = v162 - 8;
            uint64_t v165 = (v163 >> 3) & 0x3FFFFFF8;
            uint64_t v166 = v158 - 8;
            do
            {
              if (!v165) {
                goto LABEL_15;
              }
              unint64_t v167 = *(void *)(v166 + v165);
              unint64_t v168 = *(void *)(v164 + v165);
              v165 -= 8;
            }
            while (v167 == v168);
            if (v167 > v168) {
              goto LABEL_15;
            }
          }
          else if (!v159)
          {
            goto LABEL_15;
          }
        }
        else if ((uint64_t)(*(void *)(v23 + 24) << -(char)v26) >> -(char)v26 >= (uint64_t)(*v25 << -(char)v26) >> -(char)v26)
        {
          goto LABEL_15;
        }
      }
      else if (v22 <= v21)
      {
        uint64_t v24 = *(void *)(v9 + 8);
LABEL_15:
        uint64_t v27 = *(void *)v9;
        long long v502 = *(_OWORD *)(v9 + 16);
        unsigned int v28 = *(_DWORD *)(a2 - 8);
        if (v21 == v28)
        {
          uint64_t v29 = *(void *)(a2 - 32);
          uint64_t v30 = (void *)(v29 + 24);
          uint64_t v31 = *(unsigned int *)(v24 + 32);
          if (v31 <= 0x40)
          {
            if ((uint64_t)(*(void *)(v24 + 24) << -(char)v31) >> -(char)v31 >= (uint64_t)(*v30 << -(char)v31) >> -(char)v31) {
              goto LABEL_164;
            }
LABEL_132:
            unint64_t v140 = v9;
            do
            {
              while (1)
              {
                while (1)
                {
LABEL_133:
                  while (1)
                  {
                    unint64_t v11 = v140 + 40;
                    unsigned int v141 = *(_DWORD *)(v140 + 72);
                    if (v21 == v141) {
                      break;
                    }
                    v140 += 40;
                    if (v21 > v141) {
                      goto LABEL_181;
                    }
                  }
                  uint64_t v142 = *(void *)(v140 + 48);
                  long long v143 = (void *)(v142 + 24);
                  uint64_t v144 = *(unsigned int *)(v24 + 32);
                  if (v144 > 0x40) {
                    break;
                  }
                  uint64_t v145 = -v144;
                  uint64_t v146 = (uint64_t)(*(void *)(v24 + 24) << v145) >> v145;
                  uint64_t v147 = (uint64_t)(*v143 << v145) >> v145;
                  unint64_t v140 = v11;
                  if (v146 < v147) {
                    goto LABEL_181;
                  }
                }
                uint64_t v148 = *(void *)(v24 + 24);
                uint64_t v149 = *(void *)(v148 + 8 * ((v144 - 1) >> 6)) & (1 << (v144 - 1));
                __n128 result = *(unsigned int *)(v142 + 32);
                unsigned int v150 = result - 1;
                uint64_t v151 = *(void *)(v142 + 24);
                if (result >= 0x41) {
                  long long v143 = (void *)(v151 + 8 * (v150 >> 6));
                }
                if ((v149 != 0) != ((*v143 >> v150) & 1)) {
                  break;
                }
                unint64_t v152 = v144 + 63;
                uint64_t v153 = v151 - 8;
                uint64_t v154 = (v152 >> 3) & 0x3FFFFFF8;
                uint64_t v155 = v148 - 8;
                do
                {
                  if (!v154)
                  {
                    unint64_t v140 = v11;
                    goto LABEL_133;
                  }
                  unint64_t v156 = *(void *)(v155 + v154);
                  unint64_t v157 = *(void *)(v153 + v154);
                  v154 -= 8;
                }
                while (v156 == v157);
                unint64_t v140 = v11;
                if (v156 <= v157) {
                  goto LABEL_181;
                }
              }
              unint64_t v140 = v11;
            }
            while (!v149);
LABEL_181:
            unint64_t v190 = a2;
            if (v11 >= a2) {
              goto LABEL_232;
            }
            unint64_t v190 = a2;
            while (1)
            {
              unint64_t v191 = v190;
              v190 -= 40;
              if (v21 == v28)
              {
                uint64_t v192 = *(void *)(v191 - 32);
                int v193 = (void *)(v192 + 24);
                uint64_t v194 = *(unsigned int *)(v24 + 32);
                if (v194 > 0x40)
                {
                  uint64_t v195 = *(void *)(v24 + 24);
                  uint64_t v196 = *(void *)(v195 + 8 * ((v194 - 1) >> 6)) & (1 << (v194 - 1));
                  __n128 result = v196 != 0;
                  unsigned int v197 = *(_DWORD *)(v192 + 32);
                  unsigned int v198 = v197 - 1;
                  uint64_t v199 = *(void *)(v192 + 24);
                  if (v197 >= 0x41) {
                    int v193 = (void *)(v199 + 8 * (v198 >> 6));
                  }
                  if (result == ((*v193 >> v198) & 1))
                  {
                    unint64_t v200 = v194 + 63;
                    uint64_t v201 = v199 - 8;
                    uint64_t v202 = (v200 >> 3) & 0x3FFFFFF8;
                    uint64_t v203 = v195 - 8;
                    while (v202)
                    {
                      unint64_t v204 = *(void *)(v203 + v202);
                      unint64_t v205 = *(void *)(v201 + v202);
                      v202 -= 8;
                      if (v204 != v205)
                      {
                        if (v204 <= v205) {
                          goto LABEL_188;
                        }
                        break;
                      }
                    }
LABEL_232:
                    while (v11 < v190)
                    {
                      uint64_t v518 = *(void *)(v11 + 32);
                      long long v506 = *(_OWORD *)v11;
                      long long v514 = *(_OWORD *)(v11 + 16);
                      long long v206 = *(_OWORD *)v190;
                      long long v207 = *(_OWORD *)(v190 + 16);
                      *(_DWORD *)(v11 + 32) = *(_DWORD *)(v190 + 32);
                      *(_OWORD *)unint64_t v11 = v206;
                      *(_OWORD *)(v11 + 16) = v207;
                      *(_DWORD *)(v190 + 32) = v518;
                      *(_OWORD *)unint64_t v190 = v506;
                      *(_OWORD *)(v190 + 16) = v514;
LABEL_200:
                      unint64_t v208 = v11;
                      do
                      {
                        while (1)
                        {
LABEL_201:
                          while (1)
                          {
                            unint64_t v11 = v208 + 40;
                            unsigned int v209 = *(_DWORD *)(v208 + 72);
                            if (v21 == v209) {
                              break;
                            }
                            v208 += 40;
                            if (v21 > v209) {
                              goto LABEL_216;
                            }
                          }
                          uint64_t v210 = *(void *)(v208 + 48);
                          v211 = (void *)(v210 + 24);
                          uint64_t v212 = *(unsigned int *)(v24 + 32);
                          if (v212 > 0x40) {
                            break;
                          }
                          uint64_t v213 = -v212;
                          uint64_t v214 = (uint64_t)(*(void *)(v24 + 24) << v213) >> v213;
                          uint64_t v215 = (uint64_t)(*v211 << v213) >> v213;
                          unint64_t v208 = v11;
                          if (v214 < v215) {
                            goto LABEL_216;
                          }
                        }
                        uint64_t v216 = *(void *)(v24 + 24);
                        uint64_t v217 = *(void *)(v216 + 8 * ((v212 - 1) >> 6)) & (1 << (v212
                                                                                                  - 1));
                        __n128 result = *(unsigned int *)(v210 + 32);
                        unsigned int v218 = result - 1;
                        uint64_t v219 = *(void *)(v210 + 24);
                        if (result >= 0x41) {
                          v211 = (void *)(v219 + 8 * (v218 >> 6));
                        }
                        if ((v217 != 0) == ((*v211 >> v218) & 1))
                        {
                          unint64_t v220 = v212 + 63;
                          uint64_t v221 = v219 - 8;
                          uint64_t v222 = (v220 >> 3) & 0x3FFFFFF8;
                          uint64_t v223 = v216 - 8;
                          while (v222)
                          {
                            unint64_t v224 = *(void *)(v223 + v222);
                            unint64_t v225 = *(void *)(v221 + v222);
                            v222 -= 8;
                            if (v224 != v225)
                            {
                              unint64_t v208 = v11;
                              if (v224 > v225) {
                                goto LABEL_201;
                              }
                              goto LABEL_216;
                            }
                          }
                          goto LABEL_200;
                        }
                        unint64_t v208 = v11;
                      }
                      while (!v217);
LABEL_216:
                      unint64_t v226 = v190;
                      while (1)
                      {
                        while (1)
                        {
LABEL_217:
                          while (1)
                          {
                            unint64_t v190 = v226 - 40;
                            unsigned int v227 = *(_DWORD *)(v226 - 8);
                            if (v21 == v227) {
                              break;
                            }
                            v226 -= 40;
                            if (v21 <= v227) {
                              goto LABEL_232;
                            }
                          }
                          uint64_t v228 = *(void *)(v226 - 32);
                          int v229 = (void *)(v228 + 24);
                          uint64_t v230 = *(unsigned int *)(v24 + 32);
                          if (v230 > 0x40) {
                            break;
                          }
                          uint64_t v231 = -v230;
                          uint64_t v232 = (uint64_t)(*(void *)(v24 + 24) << v231) >> v231;
                          uint64_t v233 = (uint64_t)(*v229 << v231) >> v231;
                          unint64_t v226 = v190;
                          if (v232 >= v233) {
                            goto LABEL_232;
                          }
                        }
                        uint64_t v234 = *(void *)(v24 + 24);
                        uint64_t v235 = *(void *)(v234 + 8 * ((v230 - 1) >> 6)) & (1 << (v230
                                                                                                  - 1));
                        __n128 result = *(unsigned int *)(v228 + 32);
                        unsigned int v236 = result - 1;
                        uint64_t v237 = *(void *)(v228 + 24);
                        if (result >= 0x41) {
                          int v229 = (void *)(v237 + 8 * (v236 >> 6));
                        }
                        if ((v235 != 0) == ((*v229 >> v236) & 1)) {
                          break;
                        }
                        unint64_t v226 = v190;
                        if (!v235) {
                          goto LABEL_232;
                        }
                      }
                      unint64_t v238 = v230 + 63;
                      uint64_t v239 = v237 - 8;
                      uint64_t v240 = (v238 >> 3) & 0x3FFFFFF8;
                      uint64_t v241 = v234 - 8;
                      while (v240)
                      {
                        unint64_t v242 = *(void *)(v241 + v240);
                        unint64_t v243 = *(void *)(v239 + v240);
                        v240 -= 8;
                        if (v242 != v243)
                        {
                          unint64_t v226 = v190;
                          if (v242 <= v243) {
                            goto LABEL_217;
                          }
                          goto LABEL_232;
                        }
                      }
                    }
                    BOOL v4 = v11 - 40 >= v9;
                    BOOL v5 = v11 - 40 == v9;
                    if (v11 - 40 != v9)
                    {
                      long long v244 = *(_OWORD *)(v11 - 40);
                      long long v245 = *(_OWORD *)(v11 - 24);
                      *(_DWORD *)(v9 + 32) = *(_DWORD *)(v11 - 8);
                      *(_OWORD *)unint64_t v9 = v244;
                      *(_OWORD *)(v9 + 16) = v245;
                    }
                    a4 = 0;
                    *(void *)(v11 - 40) = v27;
                    *(void *)(v11 - 32) = v24;
                    *(_OWORD *)(v11 - 24) = v502;
                    *(_DWORD *)(v11 - 8) = v21;
                    goto LABEL_3;
                  }
                  if (!v196) {
                    goto LABEL_232;
                  }
                }
                else if ((uint64_t)(*(void *)(v24 + 24) << -(char)v194) >> -(char)v194 >= (uint64_t)(*v193 << -(char)v194) >> -(char)v194)
                {
                  goto LABEL_232;
                }
              }
              else if (v21 <= v28)
              {
                goto LABEL_232;
              }
LABEL_188:
              unsigned int v28 = *(_DWORD *)(v191 - 48);
            }
          }
          uint64_t v169 = *(void *)(v24 + 24);
          uint64_t v170 = *(void *)(v169 + 8 * ((v31 - 1) >> 6)) & (1 << (v31 - 1));
          __n128 result = *(unsigned int *)(v29 + 32);
          unsigned int v171 = result - 1;
          uint64_t v172 = *(void *)(v29 + 24);
          if (result >= 0x41) {
            uint64_t v30 = (void *)(v172 + 8 * (v171 >> 6));
          }
          if ((v170 != 0) == ((*v30 >> v171) & 1))
          {
            unint64_t v246 = v31 + 63;
            uint64_t v247 = v172 - 8;
            uint64_t v248 = (v246 >> 3) & 0x3FFFFFF8;
            uint64_t v249 = v169 - 8;
            while (v248)
            {
              unint64_t v250 = *(void *)(v249 + v248);
              unint64_t v251 = *(void *)(v247 + v248);
              v248 -= 8;
              if (v250 != v251)
              {
                if (v250 <= v251) {
                  goto LABEL_132;
                }
                break;
              }
            }
          }
          else if (v170)
          {
            goto LABEL_132;
          }
        }
        else if (v21 > v28)
        {
          goto LABEL_132;
        }
LABEL_164:
        unint64_t v11 = v9 + 40;
        unint64_t v173 = v9;
        while (v11 < a2)
        {
          unint64_t v174 = v173;
          unint64_t v173 = v11;
          unsigned int v175 = *(_DWORD *)(v174 + 72);
          if (v21 == v175)
          {
            uint64_t v176 = *(void *)(v174 + 48);
            int v177 = (void *)(v176 + 24);
            uint64_t v178 = *(unsigned int *)(v24 + 32);
            if (v178 > 0x40)
            {
              uint64_t v179 = *(void *)(v24 + 24);
              uint64_t v180 = *(void *)(v179 + 8 * ((v178 - 1) >> 6)) & (1 << (v178 - 1));
              __n128 result = v180 != 0;
              unsigned int v181 = *(_DWORD *)(v176 + 32);
              unsigned int v182 = v181 - 1;
              uint64_t v183 = *(void *)(v176 + 24);
              if (v181 >= 0x41) {
                int v177 = (void *)(v183 + 8 * (v182 >> 6));
              }
              if (result == ((*v177 >> v182) & 1))
              {
                unint64_t v184 = v178 + 63;
                uint64_t v185 = v183 - 8;
                uint64_t v186 = (v184 >> 3) & 0x3FFFFFF8;
                uint64_t v187 = v179 - 8;
                while (v186)
                {
                  unint64_t v188 = *(void *)(v187 + v186);
                  unint64_t v189 = *(void *)(v185 + v186);
                  v186 -= 8;
                  if (v188 != v189)
                  {
                    if (v188 > v189) {
                      break;
                    }
                    goto LABEL_181;
                  }
                }
              }
              else if (v180)
              {
                goto LABEL_181;
              }
            }
            else if ((uint64_t)(*(void *)(v24 + 24) << -(char)v178) >> -(char)v178 < (uint64_t)(*v177 << -(char)v178) >> -(char)v178)
            {
              goto LABEL_181;
            }
          }
          else if (v21 > v175)
          {
            goto LABEL_181;
          }
          v11 += 40;
        }
        goto LABEL_181;
      }
    }
    uint64_t v32 = *(void *)v9;
    uint64_t v33 = *(void *)(v9 + 8);
    long long v503 = *(_OWORD *)(v9 + 16);
    int v34 = (void *)(v33 + 24);
    unint64_t v35 = v9;
    while (1)
    {
      while (1)
      {
LABEL_22:
        while (1)
        {
          unint64_t v36 = v35;
          v35 += 40;
          unsigned int v37 = *(_DWORD *)(v36 + 72);
          if (v37 == v21) {
            break;
          }
          if (v37 <= v21) {
            goto LABEL_38;
          }
        }
        uint64_t v38 = *(void *)(v36 + 48);
        uint64_t v39 = *(unsigned int *)(v38 + 32);
        if (v39 > 0x40) {
          break;
        }
        if ((uint64_t)(*(void *)(v38 + 24) << -(char)v39) >> -(char)v39 >= (uint64_t)(*v34 << -(char)v39) >> -(char)v39) {
          goto LABEL_38;
        }
      }
      uint64_t v40 = *(void *)(v38 + 24);
      uint64_t v41 = *(void *)(v40 + 8 * ((v39 - 1) >> 6)) & (1 << (v39 - 1));
      unsigned int v42 = *(_DWORD *)(v33 + 32);
      unsigned int v43 = v42 - 1;
      uint64_t v44 = *(void *)(v33 + 24);
      unsigned int v45 = (void *)(v42 >= 0x41 ? v44 + 8 * (v43 >> 6) : v33 + 24);
      if ((v41 != 0) == ((*v45 >> v43) & 1)) {
        break;
      }
      if (!v41) {
        goto LABEL_38;
      }
    }
    unint64_t v46 = v39 + 63;
    uint64_t v47 = v44 - 8;
    uint64_t v48 = (v46 >> 3) & 0x3FFFFFF8;
    uint64_t v49 = v40 - 8;
    while (v48)
    {
      unint64_t v50 = *(void *)(v49 + v48);
      unint64_t v51 = *(void *)(v47 + v48);
      v48 -= 8;
      if (v50 != v51)
      {
        if (v50 <= v51) {
          goto LABEL_22;
        }
        break;
      }
    }
LABEL_38:
    unint64_t v52 = a2;
    if (v36 == v9)
    {
      unint64_t v53 = a2;
      if (v35 < a2)
      {
        unint64_t v72 = a2;
        do
        {
          while (1)
          {
            unint64_t v53 = v72 - 40;
            unsigned int v73 = *(_DWORD *)(v72 - 8);
            if (v73 == v21) {
              break;
            }
            BOOL v81 = v73 > v21 || v35 >= v53;
            v72 -= 40;
            if (v81) {
              goto LABEL_87;
            }
          }
          uint64_t v74 = *(void *)(v72 - 32);
          uint64_t v75 = *(unsigned int *)(v74 + 32);
          if (v75 > 0x40)
          {
            uint64_t v82 = *(void *)(v74 + 24);
            uint64_t v83 = *(void *)(v82 + 8 * ((v75 - 1) >> 6)) & (1 << (v75 - 1));
            unsigned int v84 = *(_DWORD *)(v33 + 32);
            unsigned int v85 = v84 - 1;
            uint64_t v86 = *(void *)(v33 + 24);
            if (v84 >= 0x41) {
              uint64_t v87 = (void *)(v86 + 8 * (v85 >> 6));
            }
            else {
              uint64_t v87 = (void *)(v33 + 24);
            }
            if ((v83 != 0) == ((*v87 >> v85) & 1))
            {
              unint64_t v88 = v75 + 63;
              uint64_t v89 = v86 - 8;
              uint64_t v90 = (v88 >> 3) & 0x3FFFFFF8;
              uint64_t v91 = v82 - 8;
              do
              {
                if (!v90)
                {
                  int v80 = 0;
                  goto LABEL_64;
                }
                unint64_t v92 = *(void *)(v91 + v90);
                unint64_t v93 = *(void *)(v89 + v90);
                v90 -= 8;
              }
              while (v92 == v93);
              if (v92 > v93) {
                int v80 = 1;
              }
              else {
                int v80 = -1;
              }
            }
            else if (v83)
            {
              int v80 = -1;
            }
            else
            {
              int v80 = 1;
            }
          }
          else
          {
            uint64_t v76 = -v75;
            uint64_t v77 = (uint64_t)(*(void *)(v74 + 24) << v76) >> v76;
            uint64_t v78 = (uint64_t)(*v34 << v76) >> v76;
            BOOL v79 = v77 < v78;
            int v80 = v77 > v78;
            if (v79) {
              int v80 = -1;
            }
          }
LABEL_64:
          if (v80 < 0) {
            break;
          }
          unint64_t v72 = v53;
        }
        while (v35 < v53);
      }
    }
    else
    {
      do
      {
        while (1)
        {
          while (1)
          {
LABEL_39:
            while (1)
            {
              unint64_t v53 = v52 - 40;
              unsigned int v54 = *(_DWORD *)(v52 - 8);
              if (v54 == v21) {
                break;
              }
              v52 -= 40;
              if (v54 > v21) {
                goto LABEL_87;
              }
            }
            uint64_t v55 = *(void *)(v52 - 32);
            uint64_t v56 = *(unsigned int *)(v55 + 32);
            if (v56 > 0x40) {
              break;
            }
            uint64_t v57 = -v56;
            uint64_t v58 = (uint64_t)(*(void *)(v55 + 24) << v57) >> v57;
            uint64_t v59 = (uint64_t)(*v34 << v57) >> v57;
            unint64_t v52 = v53;
            if (v58 < v59) {
              goto LABEL_87;
            }
          }
          uint64_t v60 = *(void *)(v55 + 24);
          uint64_t v61 = *(void *)(v60 + 8 * ((v56 - 1) >> 6)) & (1 << (v56 - 1));
          unsigned int v62 = *(_DWORD *)(v33 + 32);
          unsigned int v63 = v62 - 1;
          uint64_t v64 = *(void *)(v33 + 24);
          int64_t v65 = (void *)(v62 >= 0x41 ? v64 + 8 * (v63 >> 6) : v33 + 24);
          if ((v61 != 0) != ((*v65 >> v63) & 1)) {
            break;
          }
          unint64_t v66 = v56 + 63;
          uint64_t v67 = v64 - 8;
          uint64_t v68 = (v66 >> 3) & 0x3FFFFFF8;
          uint64_t v69 = v60 - 8;
          do
          {
            if (!v68)
            {
              unint64_t v52 = v53;
              goto LABEL_39;
            }
            unint64_t v70 = *(void *)(v69 + v68);
            unint64_t v71 = *(void *)(v67 + v68);
            v68 -= 8;
          }
          while (v70 == v71);
          unint64_t v52 = v53;
          if (v70 <= v71) {
            goto LABEL_87;
          }
        }
        unint64_t v52 = v53;
      }
      while (!v61);
    }
LABEL_87:
    unint64_t v11 = v35;
    if (v35 < v53)
    {
      unint64_t v94 = v53;
      do
      {
        unint64_t v95 = v94;
        long long v96 = *(_OWORD *)v11;
        long long v513 = *(_OWORD *)(v11 + 16);
        int v97 = *(void *)(v11 + 32);
        long long v99 = *(_OWORD *)v95;
        long long v98 = *(_OWORD *)(v95 + 16);
        *(_DWORD *)(v11 + 32) = *(_DWORD *)(v95 + 32);
        *(_OWORD *)unint64_t v11 = v99;
        *(_OWORD *)(v11 + 16) = v98;
        *(_DWORD *)(v95 + 32) = v97;
        *(_OWORD *)unint64_t v95 = v96;
        *(_OWORD *)(v95 + 16) = v513;
        unint64_t v100 = v11;
        do
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                unint64_t v11 = v100 + 40;
                unsigned int v101 = *(_DWORD *)(v100 + 72);
                if (v101 == v21) {
                  break;
                }
                v100 += 40;
                if (v101 <= v21) {
                  goto LABEL_121;
                }
              }
              uint64_t v102 = *(void *)(v100 + 48);
              uint64_t v103 = *(unsigned int *)(v102 + 32);
              if (v103 > 0x40) {
                break;
              }
              uint64_t v104 = -v103;
              uint64_t v105 = (uint64_t)(*(void *)(v102 + 24) << v104) >> v104;
              uint64_t v106 = (uint64_t)(*v34 << v104) >> v104;
              unint64_t v100 = v11;
              if (v105 >= v106) {
                goto LABEL_121;
              }
            }
            uint64_t v107 = *(void *)(v102 + 24);
            uint64_t v108 = *(void *)(v107 + 8 * ((v103 - 1) >> 6)) & (1 << (v103 - 1));
            unsigned int v109 = *(_DWORD *)(v33 + 32);
            unsigned int v110 = v109 - 1;
            uint64_t v111 = *(void *)(v33 + 24);
            uint64_t v112 = (void *)(v109 >= 0x41 ? v111 + 8 * (v110 >> 6) : v33 + 24);
            if ((v108 != 0) == ((*v112 >> v110) & 1)) {
              break;
            }
            unint64_t v100 = v11;
            if (!v108) {
              goto LABEL_121;
            }
          }
          unint64_t v113 = v103 + 63;
          uint64_t v114 = v111 - 8;
          uint64_t v115 = (v113 >> 3) & 0x3FFFFFF8;
          uint64_t v116 = v107 - 8;
          do
          {
            if (!v115) {
              goto LABEL_121;
            }
            unint64_t v117 = *(void *)(v116 + v115);
            unint64_t v118 = *(void *)(v114 + v115);
            v115 -= 8;
          }
          while (v117 == v118);
          unint64_t v100 = v11;
        }
        while (v117 <= v118);
        do
        {
          while (1)
          {
LABEL_121:
            while (1)
            {
              unint64_t v94 = v95 - 40;
              unsigned int v131 = *(_DWORD *)(v95 - 8);
              if (v131 == v21) {
                break;
              }
              v95 -= 40;
              if (v131 > v21) {
                goto LABEL_124;
              }
            }
            uint64_t v132 = *(void *)(v95 - 32);
            uint64_t v133 = *(unsigned int *)(v132 + 32);
            if (v133 <= 0x40) {
              break;
            }
            uint64_t v119 = *(void *)(v132 + 24);
            uint64_t v120 = *(void *)(v119 + 8 * ((v133 - 1) >> 6)) & (1 << (v133 - 1));
            unsigned int v121 = *(_DWORD *)(v33 + 32);
            unsigned int v122 = v121 - 1;
            uint64_t v123 = *(void *)(v33 + 24);
            if (v121 >= 0x41) {
              uint64_t v124 = (void *)(v123 + 8 * (v122 >> 6));
            }
            else {
              uint64_t v124 = (void *)(v33 + 24);
            }
            if ((v120 != 0) == ((*v124 >> v122) & 1))
            {
              unint64_t v125 = v133 + 63;
              uint64_t v126 = v123 - 8;
              uint64_t v127 = (v125 >> 3) & 0x3FFFFFF8;
              uint64_t v128 = v119 - 8;
              do
              {
                if (!v127)
                {
                  unint64_t v95 = v94;
                  goto LABEL_121;
                }
                unint64_t v129 = *(void *)(v128 + v127);
                unint64_t v130 = *(void *)(v126 + v127);
                v127 -= 8;
              }
              while (v129 == v130);
              unint64_t v95 = v94;
              if (v129 <= v130) {
                goto LABEL_124;
              }
            }
            else
            {
              unint64_t v95 = v94;
              if (v120) {
                goto LABEL_124;
              }
            }
          }
          uint64_t v134 = -v133;
          uint64_t v135 = (uint64_t)(*(void *)(v132 + 24) << v134) >> v134;
          uint64_t v136 = (uint64_t)(*v34 << v134) >> v134;
          unint64_t v95 = v94;
        }
        while (v135 >= v136);
LABEL_124:
        ;
      }
      while (v11 < v94);
    }
    if (v11 - 40 != v9)
    {
      long long v137 = *(_OWORD *)(v11 - 40);
      long long v138 = *(_OWORD *)(v11 - 24);
      *(_DWORD *)(v9 + 32) = *(_DWORD *)(v11 - 8);
      *(_OWORD *)unint64_t v9 = v137;
      *(_OWORD *)(v9 + 16) = v138;
    }
    *(void *)(v11 - 40) = v32;
    *(void *)(v11 - 32) = v33;
    *(_OWORD *)(v11 - 24) = v503;
    *(_DWORD *)(v11 - 8) = v21;
    if (v35 >= v53)
    {
      BOOL v139 = sub_1CCFCAB24(v9, v11 - 40);
      __n128 result = sub_1CCFCAB24(v11, a2);
      if (result)
      {
        a2 = v11 - 40;
        if (v139) {
          return result;
        }
        goto LABEL_2;
      }
      if (v139) {
        continue;
      }
    }
    __n128 result = sub_1CCFC8E38(v9, v11 - 40, a3, a4 & 1);
    a4 = 0;
  }
  switch(v13)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v252 = *(_DWORD *)(v11 + 32);
      unsigned int v253 = *(_DWORD *)(a2 - 8);
      if (v253 != v252)
      {
        if (v253 <= v252) {
          return result;
        }
        goto LABEL_455;
      }
      uint64_t v254 = *(void *)(a2 - 32);
      uint64_t v255 = *(void *)(v11 + 8);
      int v256 = (void *)(v255 + 24);
      uint64_t v257 = *(unsigned int *)(v254 + 32);
      if (v257 <= 0x40)
      {
        if ((uint64_t)(*(void *)(v254 + 24) << -(char)v257) >> -(char)v257 >= (uint64_t)(*v256 << -(char)v257) >> -(char)v257) {
          return result;
        }
        goto LABEL_455;
      }
      uint64_t v491 = *(void *)(v254 + 24);
      uint64_t v492 = *(void *)(v491 + 8 * ((v257 - 1) >> 6)) & (1 << (v257 - 1));
      unsigned int v493 = *(_DWORD *)(v255 + 32);
      unsigned int v494 = v493 - 1;
      uint64_t v495 = *(void *)(v255 + 24);
      if (v493 >= 0x41) {
        int v256 = (void *)(v495 + 8 * (v494 >> 6));
      }
      if ((v492 != 0) == ((*v256 >> v494) & 1))
      {
        unint64_t v496 = v257 + 63;
        uint64_t v497 = v495 - 8;
        uint64_t v498 = (v496 >> 3) & 0x3FFFFFF8;
        uint64_t v499 = v491 - 8;
        do
        {
          if (!v498) {
            return result;
          }
          unint64_t v500 = *(void *)(v499 + v498);
          unint64_t v501 = *(void *)(v497 + v498);
          v498 -= 8;
        }
        while (v500 == v501);
        if (v500 <= v501)
        {
LABEL_455:
          uint64_t v520 = *(void *)(v11 + 32);
          long long v510 = *(_OWORD *)v11;
          long long v516 = *(_OWORD *)(v11 + 16);
          long long v455 = *v10;
          long long v456 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v11 + 32) = *(_DWORD *)(a2 - 8);
          *(_OWORD *)unint64_t v11 = v455;
          *(_OWORD *)(v11 + 16) = v456;
          *(_DWORD *)(a2 - 8) = v520;
          long long *v10 = v510;
          *(_OWORD *)(a2 - 24) = v516;
          return result;
        }
      }
      else if (v492)
      {
        goto LABEL_455;
      }
      break;
    case 3:
      return (unint64_t)sub_1CC706108((long long *)v11, (long long *)(v11 + 40), (long long *)(a2 - 40));
    case 4:
      return (unint64_t)sub_1CC706A54(v11, v11 + 40, v11 + 80, a2 - 40);
    case 5:
      return (unint64_t)sub_1CC705CBC(v11, v11 + 40, v11 + 80, v11 + 120, a2 - 40);
    default:
      JUMPOUT(0);
  }
  return result;
}

BOOL sub_1CCFCAB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v6 = *(_DWORD *)(a1 + 32);
      unsigned int v7 = *(_DWORD *)(a2 - 8);
      if (v7 == v6)
      {
        uint64_t v8 = *(void *)(a2 - 32);
        uint64_t v9 = *(void *)(a1 + 8);
        uint64_t v10 = (void *)(v9 + 24);
        uint64_t v11 = *(unsigned int *)(v8 + 32);
        if (v11 > 0x40)
        {
          uint64_t v57 = *(void *)(v8 + 24);
          uint64_t v58 = *(void *)(v57 + 8 * ((v11 - 1) >> 6)) & (1 << (v11 - 1));
          unsigned int v59 = *(_DWORD *)(v9 + 32);
          unsigned int v60 = v59 - 1;
          uint64_t v61 = *(void *)(v9 + 24);
          if (v59 >= 0x41) {
            uint64_t v10 = (void *)(v61 + 8 * (v60 >> 6));
          }
          if ((v58 != 0) == ((*v10 >> v60) & 1))
          {
            unint64_t v62 = v11 + 63;
            uint64_t v63 = v61 - 8;
            uint64_t v64 = (v62 >> 3) & 0x3FFFFFF8;
            uint64_t v65 = v57 - 8;
            do
            {
              if (!v64) {
                return 1;
              }
              unint64_t v66 = *(void *)(v65 + v64);
              unint64_t v67 = *(void *)(v63 + v64);
              v64 -= 8;
            }
            while (v66 == v67);
            if (v66 > v67) {
              return 1;
            }
          }
          else if (!v58)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(void *)(v8 + 24) << -(char)v11) >> -(char)v11 >= (uint64_t)(*v10 << -(char)v11) >> -(char)v11)
        {
          return result;
        }
      }
      else if (v7 <= v6)
      {
        return result;
      }
      uint64_t v51 = a2 - 40;
      uint64_t v52 = *(void *)(a1 + 32);
      long long v53 = *(_OWORD *)a1;
      long long v54 = *(_OWORD *)(a1 + 16);
      int v55 = *(_DWORD *)(a2 - 8);
      long long v56 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v56;
      *(_DWORD *)(a1 + 32) = v55;
      *(_OWORD *)uint64_t v51 = v53;
      *(_OWORD *)(v51 + 16) = v54;
      *(_DWORD *)(v51 + 32) = v52;
      return 1;
    case 3uLL:
      sub_1CC706108((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_1CC706A54(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_1CC705CBC(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v12 = a1 + 80;
      sub_1CC706108((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned int v15 = *(_DWORD *)(v12 + 32);
    unsigned int v16 = *(_DWORD *)(v13 + 32);
    if (v16 != v15)
    {
      if (v16 <= v15) {
        goto LABEL_33;
      }
      uint64_t v17 = *(void *)(v13 + 8);
      goto LABEL_14;
    }
    uint64_t v17 = *(void *)(v13 + 8);
    uint64_t v18 = *(void *)(v12 + 8);
    long long v19 = (void *)(v18 + 24);
    uint64_t v20 = *(unsigned int *)(v17 + 32);
    if (v20 <= 0x40) {
      break;
    }
    uint64_t v40 = *(void *)(v17 + 24);
    uint64_t v41 = *(void *)(v40 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
    unsigned int v42 = *(_DWORD *)(v18 + 32);
    unsigned int v43 = v42 - 1;
    uint64_t v44 = *(void *)(v18 + 24);
    if (v42 >= 0x41) {
      long long v19 = (void *)(v44 + 8 * (v43 >> 6));
    }
    if ((v41 != 0) != ((*v19 >> v43) & 1))
    {
      if (!v41) {
        goto LABEL_33;
      }
      goto LABEL_14;
    }
    unint64_t v45 = v20 + 63;
    uint64_t v46 = v44 - 8;
    uint64_t v47 = (v45 >> 3) & 0x3FFFFFF8;
    uint64_t v48 = v40 - 8;
    do
    {
      if (!v47) {
        goto LABEL_33;
      }
      unint64_t v49 = *(void *)(v48 + v47);
      unint64_t v50 = *(void *)(v46 + v47);
      v47 -= 8;
    }
    while (v49 == v50);
    if (v49 <= v50) {
      goto LABEL_14;
    }
LABEL_33:
    uint64_t v12 = v13;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
  if ((uint64_t)(*(void *)(v17 + 24) << -(char)v20) >> -(char)v20 >= (uint64_t)(*v19 << -(char)v20) >> -(char)v20) {
    goto LABEL_33;
  }
LABEL_14:
  uint64_t v21 = *(void *)v13;
  long long v68 = *(_OWORD *)(v13 + 16);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v12 + 32);
  long long v22 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v22;
  uint64_t v23 = a1;
  if (v12 == a1) {
    goto LABEL_32;
  }
  while (1)
  {
    unsigned int v24 = *(_DWORD *)(v12 - 8);
    if (v16 != v24)
    {
      if (v16 <= v24) {
        goto LABEL_31;
      }
      goto LABEL_20;
    }
    uint64_t v25 = *(void *)(v12 - 32);
    uint64_t v26 = (void *)(v25 + 24);
    uint64_t v27 = *(unsigned int *)(v17 + 32);
    if (v27 <= 0x40)
    {
      if ((uint64_t)(*(void *)(v17 + 24) << -(char)v27) >> -(char)v27 >= (uint64_t)(*v26 << -(char)v27) >> -(char)v27) {
        goto LABEL_31;
      }
      goto LABEL_20;
    }
    uint64_t v29 = *(void *)(v17 + 24);
    uint64_t v30 = *(void *)(v29 + 8 * ((v27 - 1) >> 6)) & (1 << (v27 - 1));
    unsigned int v31 = *(_DWORD *)(v25 + 32);
    unsigned int v32 = v31 - 1;
    uint64_t v33 = *(void *)(v25 + 24);
    if (v31 >= 0x41) {
      uint64_t v26 = (void *)(v33 + 8 * (v32 >> 6));
    }
    if ((v30 != 0) == ((*v26 >> v32) & 1)) {
      break;
    }
    if (!v30) {
      goto LABEL_31;
    }
LABEL_20:
    long long v28 = *(_OWORD *)(v12 - 24);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)(v12 - 40);
    *(_OWORD *)(v12 + 16) = v28;
    *(_DWORD *)(v12 + 32) = *(_DWORD *)(v12 - 8);
    v12 -= 40;
    if (v12 == a1)
    {
      uint64_t v23 = a1;
      goto LABEL_32;
    }
  }
  unint64_t v34 = v27 + 63;
  uint64_t v35 = v33 - 8;
  uint64_t v36 = (v34 >> 3) & 0x3FFFFFF8;
  uint64_t v37 = v29 - 8;
  while (v36)
  {
    unint64_t v38 = *(void *)(v37 + v36);
    unint64_t v39 = *(void *)(v35 + v36);
    v36 -= 8;
    if (v38 != v39)
    {
      if (v38 <= v39) {
        goto LABEL_20;
      }
      break;
    }
  }
LABEL_31:
  uint64_t v23 = v12;
LABEL_32:
  *(void *)uint64_t v23 = v21;
  *(void *)(v23 + 8) = v17;
  *(_OWORD *)(v23 + 16) = v68;
  *(_DWORD *)(v23 + 32) = v16;
  if (++v14 != 8) {
    goto LABEL_33;
  }
  return v13 + 40 == a2;
}

uint64_t sub_1CCFCAF74()
{
  LOBYTE(v4) = 1;
  BOOL v5 = &v4;
  v3.n128_u64[1] = 43;
  LODWORD(v2) = 2;
  sub_1CD7E8C3C((char **)&v5, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF9F80, &dword_1CB82C000);
  v3.n128_u64[0] = (unint64_t)"Generate low-precision inline sequences for some float libcalls";
  v3.n128_u64[1] = 63;
  BOOL v5 = &dword_1EBCF9F78;
  int v4 = 1;
  int v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD7E8DB4((long long *)&v3, &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CC0708F8, &qword_1EBCFA040, &dword_1CB82C000);
  LODWORD(v2) = 1;
  int v4 = 66;
  BOOL v5 = &v4;
  v3.n128_u64[0] = (unint64_t)"Set the case probability threshold for peeling the case from a switch statement. A "
                                     "value greater than 100 will void this optimization";
  v3.n128_u64[1] = 133;
  sub_1CD45A86C((uint64_t)&unk_1EBCFA100, "switch-peel-threshold", &v2, &v5, &v3);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFA100, &dword_1CB82C000);
}

uint64_t sub_1CCFCB0B8(uint64_t a1, unint64_t *a2, unint64_t *a3, unsigned int *a4, BOOL *a5, unsigned int a6, int a7)
{
  long long v66 = *(_OWORD *)*(void *)(a1 + 40);
  if ((_BYTE)v66) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v66);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v66);
  }
  unsigned int v17 = ExtendedSizeInBits;
  if (v15 == 1) {
  if (v17 < a6)
  }
    return 0;
  long long v56 = a4;
  if (v17 >= 0x41) {
    operator new[]();
  }
  if (*((_DWORD *)a2 + 2) >= 0x41u && *a2) {
    MEMORY[0x1D25D9CB0](*a2, 0x1000C8000313F17);
  }
  *a2 = 0;
  *((_DWORD *)a2 + 2) = v17;
  int v55 = a5;
  if (*((_DWORD *)a3 + 2) >= 0x41u && *a3) {
    MEMORY[0x1D25D9CB0](*a3, 0x1000C8000313F17);
  }
  *a3 = 0;
  *((_DWORD *)a3 + 2) = v17;
  uint64_t v19 = *(unsigned __int16 *)(a1 + 56);
  unsigned int v20 = sub_1CD3E12F4((unsigned __int8 *)&v66, (uint64_t)v15, v16);
  if (v19)
  {
    unsigned int v21 = v20;
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    unint64_t v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
    for (uint64_t i = v19 - 1; i != -1; --i)
    {
      if (a7) {
        unsigned int v25 = i;
      }
      else {
        unsigned int v25 = v23;
      }
      uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 40 * v25);
      unsigned int v27 = *(unsigned __int16 *)(v26 + 24);
      if (v27 <= 0x22)
      {
        if (v27 == 11)
        {
LABEL_33:
          llvm::APInt::zextOrTrunc((uint64_t *)(*(void *)(v26 + 80) + 24), v21, (uint64_t)&v64);
          goto LABEL_34;
        }
        if (v27 != 12) {
          return 0;
        }
      }
      else
      {
        if (v27 == 35) {
          goto LABEL_33;
        }
        if (v27 != 36)
        {
          if (v27 != 51) {
            return 0;
          }
          if (v21)
          {
            unsigned int v28 = v21 + v22;
            if (v22 > 0x3F || v28 > 0x40)
            {
              llvm::APInt::setBitsSlowCase(a3, v22, v28);
            }
            else
            {
              unint64_t v29 = v57 << v22;
              if (*((_DWORD *)a3 + 2) > 0x40u) {
                *(void *)*a3 |= v29;
              }
              else {
                *a3 |= v29;
              }
            }
          }
          goto LABEL_37;
        }
      }
      uint64_t v30 = *(void *)(v26 + 80);
      unsigned int v32 = *(void **)(v30 + 32);
      unsigned int v31 = (llvm::detail::DoubleAPFloat *)(v30 + 32);
      if (v32 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v31, (llvm::APInt *)&v64);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v31, (uint64_t)&v64);
      }
LABEL_34:
      llvm::APInt::insertBits((void **)a2, (const llvm::APInt *)&v64, v22);
      if (v65 >= 0x41 && v64) {
        MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
      }
LABEL_37:
      ++v23;
      v22 += v21;
    }
  }
  uint64_t v33 = *((unsigned int *)a3 + 2);
  unint64_t v34 = a3;
  if (v33 < 0x41) {
    goto LABEL_49;
  }
  int v35 = 0;
  unint64_t v34 = (void *)*a3;
  int64_t v36 = (unint64_t)(v33 + 63) >> 6;
  do
  {
    if (v36-- < 1) {
      break;
    }
    unint64_t v38 = v34[v36];
    v35 += __clz(v38);
  }
  while (!v38);
  int v39 = v33 | 0xFFFFFFC0;
  if ((v33 & 0x3F) == 0) {
    int v39 = 0;
  }
  if ((v33 - v35 - v39) > 0x40) {
    BOOL v40 = 1;
  }
  else {
LABEL_49:
  }
    BOOL v40 = *v34 != 0;
  *int v55 = v40;
  do
  {
    if (v17 < 9) {
      break;
    }
    unsigned int v41 = v17 >> 1;
    llvm::APInt::extractBits((uint64_t)a2, v17 >> 1, v17 >> 1, (uint64_t)&v64);
    llvm::APInt::extractBits((uint64_t)a2, v17 >> 1, 0, (uint64_t)&v62);
    llvm::APInt::extractBits((uint64_t)a3, v17 >> 1, v17 >> 1, (uint64_t)&v60);
    llvm::APInt::extractBits((uint64_t)a3, v17 >> 1, 0, (uint64_t)&__src);
    unint64_t v42 = v59;
    if (v59 > 0x40) {
      operator new[]();
    }
    unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v59;
    if (!v59) {
      unint64_t v43 = 0;
    }
    uint64_t v44 = (const void *)((unint64_t)v64 & v43 & ~(unint64_t)__src);
    unsigned int v45 = v61;
    if (v61 > 0x40) {
      operator new[]();
    }
    unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v61;
    if (!v61) {
      unint64_t v46 = 0;
    }
    uint64_t v47 = (const void *)(v62 & v46 & ~(unint64_t)v60);
    if (v59 > 0x40uLL) {
      BOOL v48 = memcmp(v44, v47, (((unint64_t)v59 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v48 = v44 == v47;
    }
    int v49 = v48;
    if (v41 >= a6) {
      int v50 = v49;
    }
    else {
      int v50 = 0;
    }
    if (v45 >= 0x41 && v47) {
      MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
    }
    if (v42 >= 0x41 && v44) {
      MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
    }
    if (v50)
    {
      unsigned int v51 = v65;
      if (v65 > 0x40) {
        operator new[]();
      }
      unint64_t v52 = v62 | (unint64_t)v64;
      if (*((_DWORD *)a2 + 2) >= 0x41u && *a2) {
        MEMORY[0x1D25D9CB0](*a2, 0x1000C8000313F17);
      }
      *a2 = v52;
      *((_DWORD *)a2 + 2) = v51;
      unsigned int v53 = v61;
      if (v61 > 0x40) {
        operator new[]();
      }
      unint64_t v54 = (unint64_t)__src & (unint64_t)v60;
      if (*((_DWORD *)a3 + 2) >= 0x41u && *a3) {
        MEMORY[0x1D25D9CB0](*a3, 0x1000C8000313F17);
      }
      *a3 = v54;
      *((_DWORD *)a3 + 2) = v53;
      unsigned int v17 = v41;
    }
    if (v59 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    if (v61 >= 0x41 && v60) {
      MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
    }
    if (v63 >= 0x41 && v62) {
      MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
    }
    if (v65 >= 0x41)
    {
      if (v64) {
        MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
      }
    }
  }
  while ((v50 & 1) != 0);
  *long long v56 = v17;
  return 1;
}

BOOL sub_1CCFCB8EC(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v3 = a1;
  for (int i = *(unsigned __int16 *)(a1 + 24); i == 216; int i = *(unsigned __int16 *)(v3 + 24))
    uint64_t v3 = **(void **)(v3 + 32);
  if (i != 156 || (a2 & 1) != 0)
  {
    if (i != 146) {
      return 0;
    }
    uint64_t v5 = *(unsigned __int16 *)(v3 + 56);
    if (!*(_WORD *)(v3 + 56)) {
      return 0;
    }
    uint64_t v6 = 0;
    for (j = (_DWORD *)(*(void *)(v3 + 32) + 8); ; j += 10)
    {
      uint64_t v8 = *((void *)j - 1);
      if (*(_WORD *)(v8 + 24) != 51) {
        break;
      }
      if (v5 == ++v6) {
        return 0;
      }
    }
    int v13 = *j;
    long long v25 = *(_OWORD *)*(void *)(v3 + 40);
    unsigned int v14 = sub_1CD3E12F4((unsigned __int8 *)&v25, a2, a3);
    BOOL v9 = 0;
    unsigned int v15 = *(unsigned __int16 *)(v8 + 24);
    if (v15 > 0x22)
    {
      if (v15 == 36) {
        goto LABEL_30;
      }
      if (v15 != 35) {
        return v9;
      }
    }
    else if (v15 != 11)
    {
      if (v15 != 12) {
        return v9;
      }
LABEL_30:
      uint64_t v19 = *(void *)(v8 + 80);
      unsigned int v21 = *(void **)(v19 + 32);
      unsigned int v20 = (llvm::detail::DoubleAPFloat *)(v19 + 32);
      if (v21 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v20, (llvm::APInt *)&v25);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v20, (uint64_t)&v25);
      }
      if (DWORD2(v25) > 0x40)
      {
        unsigned int v22 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v25);
        if ((void)v25) {
          MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
        }
        if (v22 >= v14) {
          goto LABEL_41;
        }
      }
      else if (__clz(__rbit64(~(void)v25)) >= v14)
      {
LABEL_41:
        if (v5 - 1 == v6) {
          return 1;
        }
        unsigned int v23 = v6 + 1;
        BOOL v9 = 1;
        while (1)
        {
          unsigned int v24 = (_DWORD *)(*(void *)(v3 + 32) + 40 * v23);
          if ((*(void *)v24 != v8 || v24[2] != v13) && *(_WORD *)(*(void *)v24 + 24) != 51) {
            break;
          }
          if (v5 == ++v23) {
            return v9;
          }
        }
      }
      return 0;
    }
    uint64_t v16 = *(void *)(v8 + 80);
    unsigned int v17 = (llvm::APInt *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) > 0x40u) {
      unsigned int v18 = llvm::APInt::countTrailingOnesSlowCase(v17);
    }
    else {
      unsigned int v18 = __clz(__rbit64(~*(void *)v17));
    }
    if (v18 >= v14) {
      goto LABEL_41;
    }
    return 0;
  }
  DWORD2(v25) = 1;
  *(void *)&long long v25 = 0;
  int v11 = sub_1CD7E967C(v3, (unint64_t *)&v25, a3);
  int v12 = DWORD2(v25);
  if (v11)
  {
    if (!DWORD2(v25)) {
      return 1;
    }
    if (DWORD2(v25) <= 0x40) {
      return (void)v25 == 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v25);
    }
    BOOL v9 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v25) == v12;
  }
  else
  {
    BOOL v9 = 0;
    if (DWORD2(v25) < 0x41) {
      return v9;
    }
  }
  if ((void)v25) {
    MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
  }
  return v9;
}

uint64_t sub_1CCFCBB88(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v3 = a1;
  for (int i = *(unsigned __int16 *)(a1 + 24); i == 216; int i = *(unsigned __int16 *)(v3 + 24))
    uint64_t v3 = **(void **)(v3 + 32);
  if (i == 156 && (a2 & 1) == 0)
  {
    DWORD2(v30) = 1;
    *(void *)&long long v30 = 0;
    if (sub_1CD7E967C(v3, (unint64_t *)&v30, a3))
    {
      if (DWORD2(v30) <= 0x40)
      {
        char v9 = (void)v30 == 0;
        return v9 & 1;
      }
      int v25 = 0;
      int64_t v26 = ((unint64_t)DWORD2(v30) + 63) >> 6;
      uint64_t v23 = v30;
      do
      {
        if (v26-- < 1) {
          break;
        }
        unint64_t v28 = *(void *)(v30 + 8 * v26);
        v25 += __clz(v28);
      }
      while (!v28);
      unsigned int v29 = DWORD2(v30) | 0xFFFFFFC0;
      if ((BYTE8(v30) & 0x3F) == 0) {
        unsigned int v29 = 0;
      }
      char v9 = v25 + v29 == DWORD2(v30);
    }
    else
    {
      if (DWORD2(v30) < 0x41) {
        goto LABEL_44;
      }
      char v9 = 0;
      uint64_t v23 = v30;
    }
    if (v23) {
      MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
    }
    return v9 & 1;
  }
  if (i != 146)
  {
LABEL_44:
    char v9 = 0;
    return v9 & 1;
  }
  if (*(_WORD *)(v3 + 56))
  {
    uint64_t v5 = *(uint64_t **)(v3 + 32);
    uint64_t v6 = 40 * *(unsigned __int16 *)(v3 + 56);
    char v7 = 1;
    while (1)
    {
      if (*(_WORD *)(*v5 + 24) == 51) {
        goto LABEL_10;
      }
      long long v30 = *(_OWORD *)*(void *)(v3 + 40);
      unsigned int v8 = sub_1CD3E12F4((unsigned __int8 *)&v30, a2, a3);
      char v9 = 0;
      uint64_t v10 = *v5;
      unsigned int v11 = *(unsigned __int16 *)(*v5 + 24);
      if (v11 > 0x22)
      {
        if (v11 != 36)
        {
          if (v11 != 35) {
            return v9 & 1;
          }
LABEL_18:
          uint64_t v12 = *(void *)(v10 + 80);
          int v13 = (unint64_t **)(v12 + 24);
          unsigned int v14 = *(_DWORD *)(v12 + 32);
          if (v14 > 0x40)
          {
            unsigned int v16 = llvm::APInt::countTrailingZerosSlowCase(v13);
          }
          else
          {
            unsigned int v15 = __clz(__rbit64((unint64_t)*v13));
            if (v14 >= v15) {
              unsigned int v16 = v15;
            }
            else {
              unsigned int v16 = v14;
            }
          }
          char v7 = 0;
          char v9 = 0;
          if (v16 < v8) {
            return v9 & 1;
          }
          goto LABEL_10;
        }
      }
      else
      {
        if (v11 == 11) {
          goto LABEL_18;
        }
        if (v11 != 12) {
          return v9 & 1;
        }
      }
      uint64_t v17 = *(void *)(v10 + 80);
      uint64_t v19 = *(void **)(v17 + 32);
      unsigned int v18 = (llvm::detail::DoubleAPFloat *)(v17 + 32);
      if (v19 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v18, (llvm::APInt *)&v30);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v18, (uint64_t)&v30);
      }
      unsigned int v20 = DWORD2(v30);
      if (DWORD2(v30) > 0x40)
      {
        unsigned int v22 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v30);
        if ((void)v30) {
          MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
        }
        char v7 = 0;
        char v9 = 0;
        if (v22 < v8) {
          return v9 & 1;
        }
      }
      else
      {
        char v7 = 0;
        char v9 = 0;
        unsigned int v21 = __clz(__rbit64(v30));
        if (DWORD2(v30) >= v21) {
          unsigned int v20 = v21;
        }
        if (v20 < v8) {
          return v9 & 1;
        }
      }
LABEL_10:
      v5 += 5;
      v6 -= 40;
      if (!v6) {
        goto LABEL_38;
      }
    }
  }
  char v7 = 1;
LABEL_38:
  char v9 = v7 ^ 1;
  return v9 & 1;
}

BOOL sub_1CCFCBF2C(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a2 + 24);
  if (v3 <= 0x11)
  {
    if (v3 == 7)
    {
      uint64_t v14 = *(void *)(a2 + 80);
      if (!*(void *)(a2 + 80)) {
        return sub_1CD8053E4((uint64_t **)(a1 + 728), *(void *)(a2 + 80), *(void *)(a2 + 88)) != 0;
      }
      uint64_t v15 = *(void *)(a1 + 704);
      BOOL v13 = *(void *)(v15 + 8 * v14) != 0;
      *(void *)(v15 + 8 * v14) = 0;
      return v13;
    }
    if (v3 == 8)
    {
      uint64_t v11 = *(unsigned int *)(a2 + 76);
      uint64_t v12 = *(void *)(a1 + 680);
      BOOL v13 = *(void *)(v12 + 8 * v11) != 0;
      *(void *)(v12 + 8 * v11) = 0;
      return v13;
    }
  }
  else if (*(unsigned __int16 *)(a2 + 24) > 0x2Bu)
  {
    if (v3 == 281) {
      return 0;
    }
    if (v3 == 44)
    {
      uint64_t v42 = *(void *)(a2 + 80);
      __dst[0] = 0;
      if (sub_1CD40EA84(*(void *)(a1 + 808), *(_DWORD *)(a1 + 824), v42, __dst))
      {
        *(void *)__dst[0] = -8192;
        *(int32x2_t *)(a1 + 816) = vadd_s32(*(int32x2_t *)(a1 + 816), (int32x2_t)0x1FFFFFFFFLL);
        return 1;
      }
      return 0;
    }
  }
  else
  {
    if (v3 == 18)
    {
      int v4 = *(unsigned __int8 **)(a2 + 80);
      if (v4)
      {
        size_t v5 = strlen(*(const char **)(a2 + 80));
        unsigned int v6 = *(_DWORD *)(a1 + 760);
        if (v6)
        {
          size_t v7 = v5;
          if (v5)
          {
            uint64_t v8 = 0;
            int v9 = 0;
            do
              int v9 = 33 * v9 + v4[v8++];
            while (v5 != v8);
            char v10 = 0;
            goto LABEL_21;
          }
LABEL_20:
          int v9 = 0;
          char v10 = 1;
LABEL_21:
          unsigned int v17 = v6 - 1;
          uint64_t v18 = *(void *)(a1 + 752);
          uint64_t v47 = v6;
          uint64_t v48 = a1;
          uint64_t v19 = v18 + 8 * v6 + 8;
          int v20 = 1;
          int v21 = v9;
          while (1)
          {
            uint64_t v22 = v21 & v17;
            uint64_t v23 = *(void **)(v18 + 8 * v22);
            if (v23 != (void *)-8)
            {
              if (!v23) {
                return 0;
              }
              if (*(_DWORD *)(v19 + 4 * v22) == v9 && v7 == *v23)
              {
                uint64_t v24 = *(unsigned int *)(v48 + 772);
                if ((v10 & 1) != 0 || !memcmp(v4, (char *)v23 + v24, v7)) {
                  break;
                }
              }
            }
            int v21 = v20 + v22;
            ++v20;
          }
          if (v22 != -1 && (int)v22 != v47)
          {
            unsigned int v32 = *(size_t **)(v18 + 8 * (int)v22);
            size_t v33 = *v32;
            if (*v32)
            {
              int v34 = 0;
              size_t v35 = *v32;
              int64_t v36 = (unsigned __int8 *)v32 + v24;
              do
              {
                int v37 = *v36++;
                int v34 = 33 * v34 + v37;
                --v35;
              }
              while (v35);
            }
            else
            {
              int v34 = 0;
            }
            int v38 = 1;
            int v39 = v34;
            while (1)
            {
              uint64_t v40 = v39 & v17;
              unsigned int v41 = *(void **)(v18 + 8 * v40);
              if (v41 != (void *)-8)
              {
                if (!v41) {
                  goto LABEL_63;
                }
                if (*(_DWORD *)(v19 + 4 * v40) == v34
                  && v33 == *v41
                  && (!v33 || !memcmp((char *)v32 + v24, (char *)v41 + v24, v33)))
                {
                  break;
                }
              }
              int v39 = v38 + v40;
              ++v38;
            }
            *(void *)(v18 + 8 * (int)v40) = -8;
            *(int32x2_t *)(v48 + 764) = vadd_s32(*(int32x2_t *)(v48 + 764), (int32x2_t)0x1FFFFFFFFLL);
LABEL_63:
            MEMORY[0x1D25D9CD0](v32, 8);
            return 1;
          }
        }
      }
      else
      {
        unsigned int v6 = *(_DWORD *)(a1 + 760);
        if (v6)
        {
          size_t v7 = 0;
          goto LABEL_20;
        }
      }
      return 0;
    }
    if (v3 == 42)
    {
      int v25 = *(const char **)(a2 + 80);
      int v26 = *(_DWORD *)(a2 + 88);
      size_t v27 = strlen(v25);
      if (v27 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      unint64_t v28 = (const void *)v27;
      unsigned int v29 = (uint64_t **)(a1 + 784);
      if (v27 >= 0x17)
      {
        uint64_t v43 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v27 | 7) != 0x17) {
          uint64_t v43 = v27 | 7;
        }
        uint64_t v44 = v43 + 1;
        long long v30 = (const void **)operator new(v43 + 1);
        __dst[1] = v28;
        unint64_t v50 = v44 | 0x8000000000000000;
        __dst[0] = v30;
      }
      else
      {
        HIBYTE(v50) = v27;
        long long v30 = __dst;
        if (!v27) {
          goto LABEL_58;
        }
      }
      memmove(v30, v25, (size_t)v28);
LABEL_58:
      *((unsigned char *)v28 + (void)v30) = 0;
      int v51 = v26;
      uint64_t v45 = sub_1CD805368(a1 + 784, __dst);
      BOOL v46 = a1 + 792 == v45;
      BOOL v13 = a1 + 792 != v45;
      if (!v46) {
        sub_1CD4F3F94(v29, v45);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete((void *)__dst[0]);
      }
      return v13;
    }
  }
  uint64_t v31 = a1 + 328;

  return llvm::FoldingSetBase::RemoveNode(v31, (void *)a2);
}

int32x2_t sub_1CCFCC30C(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v11 = 0;
  if (sub_1CD7D38CC((uint64_t *)(a1 + 688), &v10, &v11))
  {
    int v4 = (void *)v11;
    if (v11 != *(void *)(a1 + 688) + 40 * *(unsigned int *)(a1 + 704))
    {
      size_t v5 = *(void **)(v11 + 8);
      uint64_t v6 = *(unsigned int *)(v11 + 16);
      if (v6)
      {
        uint64_t v7 = 8 * v6;
        uint64_t v8 = *(uint64_t **)(v11 + 8);
        do
        {
          uint64_t v9 = *v8++;
          *(unsigned char *)(v9 + 62) = 1;
          v7 -= 8;
        }
        while (v7);
      }
      if (v5 != v4 + 3) {
        free(v5);
      }
      void *v4 = -8192;
      int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 696), (int32x2_t)0x1FFFFFFFFLL);
      *(int32x2_t *)(a1 + 696) = result;
    }
  }
  return result;
}

int32x2_t sub_1CCFCC3BC(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 **)(a2 + 40);
  if (*v4 == 172) {
    goto LABEL_9;
  }
  int v5 = *(unsigned __int16 *)(a2 + 24);
  if (v5 == 263 || v5 == 281) {
    goto LABEL_9;
  }
  int v6 = *(unsigned __int16 *)(a2 + 58);
  if (v6 != 1)
  {
    unsigned int v7 = 1;
    while (v4[16 * v7] != 172)
    {
      if (v6 == ++v7) {
        goto LABEL_8;
      }
    }
    goto LABEL_9;
  }
LABEL_8:
  inserted = llvm::FoldingSetBase::GetOrInsertNode(a1 + 328, (uint64_t *)a2, (uint64_t)off_1F2642190);
  if (inserted == (void *)a2)
  {
LABEL_9:
    for (int i = *(void **)(a1 + 656); i; int i = (void *)i[1])
      (*(void (**)(void *, uint64_t))(*i + 24))(i, a2);
    return result;
  }
  uint64_t v11 = inserted;
  sub_1CCFCC50C(a1, a2, (uint64_t)inserted);
  for (j = *(void **)(a1 + 656); j; j = (void *)j[1])
    (*(void (**)(void *, uint64_t, void *))(*j + 16))(j, a2, v11);

  return sub_1CD7EA4EC(a1, a2);
}

void sub_1CCFCC50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    v25[7] = v3;
    v25[8] = v4;
    uint64_t v8 = *(unsigned __int16 *)(a2 + 58);
    if (*(_WORD *)(a2 + 58))
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void *)(a2 + 48);
        if (v10)
        {
          while (v9 != *(_DWORD *)(v10 + 8))
          {
            uint64_t v10 = *(void *)(v10 + 32);
            if (!v10) {
              goto LABEL_9;
            }
          }
          sub_1CCFDD3A4(a1, a2, v9, a3, v9, 0, 0, 1);
        }
LABEL_9:
        ++v9;
      }
      while (v9 != v8);
    }
    uint64_t v11 = *(void *)(a2 + 48);
    uint64_t v24 = 0;
    v25[0] = v11;
    uint64_t v20 = *(void *)(a1 + 656);
    uint64_t v21 = a1;
    *(void *)(a1 + 656) = &v19;
    uint64_t v19 = &unk_1F2642130;
    uint64_t v22 = v25;
    uint64_t v23 = &v24;
    if (v11)
    {
      uint64_t v12 = (uint64_t *)(a3 + 48);
      do
      {
        uint64_t v13 = *(void *)(v11 + 16);
        sub_1CCFCBF2C(a1, v13);
        uint64_t v14 = v25[0];
        do
        {
          uint64_t v15 = (uint64_t *)(v14 + 32);
          uint64_t v16 = *(void *)(v14 + 32);
          v25[0] = v16;
          if (*(void *)v14)
          {
            **(void **)(v14 + 24) = v16;
            uint64_t v17 = *(void *)(v14 + 32);
            if (v17) {
              *(void *)(v17 + 24) = *(void *)(v14 + 24);
            }
          }
          *(void *)uint64_t v14 = a3;
          if (a3)
          {
            uint64_t v18 = *v12;
            *uint64_t v15 = *v12;
            if (v18) {
              *(void *)(v18 + 24) = v15;
            }
            *(void *)(v14 + 24) = v12;
            uint64_t *v12 = v14;
          }
          if (((*(unsigned __int8 *)(a3 + 26) >> 2) & 1) != (*(unsigned char *)(a2 + 26) & 4) >> 2) {
            sub_1CD80005C(a1, v13);
          }
          uint64_t v14 = v25[0];
        }
        while (v25[0] != v24 && *(void *)(v25[0] + 16) == v13);
        sub_1CCFCC3BC(a1, v13);
        uint64_t v11 = v25[0];
      }
      while (v25[0] != v24);
    }
    if (*(void *)(a1 + 192) == a2) {
      *(void *)(a1 + 192) = a3;
    }
    *(void *)(v21 + 656) = v20;
  }
}

unsigned __int8 **sub_1CCFCC6D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned __int8 **)(a2 + 40);
  if (*v6 == 172) {
    return 0;
  }
  unsigned int v7 = 0;
  int v9 = *(unsigned __int16 *)(a2 + 24);
  if (v9 != 263 && v9 != 281)
  {
    uint64_t v13 = *(unsigned __int16 *)(a2 + 58);
    if (v13 != 1)
    {
      unsigned int v14 = 1;
      while (v6[16 * v14] != 172)
      {
        if (v13 == ++v14) {
          goto LABEL_10;
        }
      }
      return 0;
    }
LABEL_10:
    uint64_t v25 = a3;
    int v26 = a4;
    v23[0] = v24;
    v23[1] = (void *)0x2000000000;
    sub_1CCFCC8C8((uint64_t)v23, v9, (uint64_t)v6, v13, &v25, 1);
    sub_1CCFCCA90(v23, a2);
    uint64_t v15 = *(unsigned __int8 **)(a2 + 64);
    uint64_t v20 = v15;
    if (v15) {
      llvm::MetadataTracking::track((uint64_t)&v20, v15, 2);
    }
    int v21 = *(_DWORD *)(a2 + 60);
    unsigned int v7 = sub_1CD7EA8F8(a1, (uint64_t)v23, (uint64_t)&v20, a5);
    if (!v20) {
      goto LABEL_16;
    }
    int v16 = *v20;
    if ((v16 - 4) > 0x1E)
    {
      if ((v16 - 3) >= 0xFFFFFFFE) {
        uint64_t v17 = v20;
      }
      else {
        uint64_t v17 = 0;
      }
      if ((v16 - 3) < 0xFFFFFFFE)
      {
        if (v16 == 3) {
          *((void *)v20 + 1) = 0;
        }
        goto LABEL_16;
      }
      unint64_t v18 = (unint64_t)(v17 + 8);
    }
    else
    {
      if ((v20[1] & 0x7F) != 2 && !*((_DWORD *)v20 + 3)) {
        goto LABEL_16;
      }
      uint64_t v19 = *((void *)v20 + 2);
      if ((v19 & 4) == 0) {
        goto LABEL_16;
      }
      unint64_t v18 = v19 & 0xFFFFFFFFFFFFFFF8;
      if (!v18) {
        goto LABEL_16;
      }
    }
    uint64_t v22 = &v20;
    sub_1CC5FA668(v18 + 16, &v22);
LABEL_16:
    if (v7) {
      *((_WORD *)v7 + 36) &= *(_WORD *)(a2 + 72) | 0xF001;
    }
    if (v23[0] != v24) {
      free(v23[0]);
    }
  }
  return v7;
}

uint64_t sub_1CCFCC8C8(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  int v6 = a5;
  unsigned int v7 = *(_DWORD *)(result + 8);
  if (v7 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v7) = a2;
  unsigned int v8 = *(_DWORD *)(result + 12);
  unsigned int v9 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v9;
  if (v9 >= v8) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v9) = a3;
  unsigned int v10 = *(_DWORD *)(result + 12);
  unsigned int v11 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v11;
  if (v11 >= v10) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v11) = HIDWORD(a3);
  unsigned int v12 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v12;
  if (a6)
  {
    do
    {
      uint64_t v13 = *v6;
      if (v12 >= *(_DWORD *)(result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v12) = v13;
      unsigned int v14 = *(_DWORD *)(result + 12);
      unsigned int v15 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v15;
      if (v15 >= v14) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v15) = HIDWORD(v13);
      unsigned int v16 = *(_DWORD *)(result + 12);
      unsigned int v17 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v17;
      if (v17 >= v16) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v17) = *((_DWORD *)v6 + 2);
      unsigned int v12 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v12;
      v6 += 2;
    }
    while (v6 != &a5[2 * a6]);
  }
  return result;
}

_DWORD *sub_1CCFCCA90(_DWORD *result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 <= 0xFC)
  {
    switch(*(_WORD *)(a2 + 24))
    {
      case 5:
        unint64_t v30 = 1 << *(unsigned char *)(a2 + 76);
        goto LABEL_48;
      case 6:
      case 0xA:
LABEL_26:
        unint64_t v30 = *(void *)(a2 + 80);
LABEL_48:
        unsigned int v54 = result[2];
        unsigned int v53 = result[3];
        goto LABEL_49;
      case 7:
      case 8:
      case 0x12:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x2A:
      case 0x2C:
        goto LABEL_59;
      case 9:
      case 0xF:
      case 0x27:
        LODWORD(v15) = *(_DWORD *)(a2 + 76);
        unsigned int v14 = result[2];
        unsigned int v13 = result[3];
        goto LABEL_56;
      case 0xB:
      case 0x23:
        uint64_t v31 = *(void *)(a2 + 80);
        unsigned int v32 = result[2];
        if (v32 >= result[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v32) = v31;
        unsigned int v33 = result[3];
        unsigned int v34 = result[2] + 1;
        result[2] = v34;
        if (v34 >= v33) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v34) = HIDWORD(v31);
        unsigned int v35 = result[3];
        unsigned int v14 = result[2] + 1;
        result[2] = v14;
        if (v14 >= v35) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        LODWORD(v15) = (*(unsigned __int8 *)(a2 + 26) >> 3) & 1;
        goto LABEL_57;
      case 0xC:
      case 0x24:
        unint64_t v36 = *(void *)(a2 + 80);
        unsigned int v37 = result[2];
        if (v37 >= result[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v37) = v36;
        unsigned int v38 = result[3];
        unsigned int v14 = result[2] + 1;
        result[2] = v14;
        if (v14 >= v38) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v15 = HIDWORD(v36);
        goto LABEL_57;
      case 0xD:
      case 0xE:
      case 0x13:
      case 0x25:
      case 0x26:
      case 0x2B:
LABEL_12:
        uint64_t v16 = *(void *)(a2 + 80);
        unsigned int v17 = result[2];
        if (v17 >= result[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v17) = v16;
        unsigned int v18 = result[3];
        unsigned int v19 = result[2] + 1;
        result[2] = v19;
        if (v19 >= v18) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v19) = HIDWORD(v16);
        unsigned int v20 = result[3];
        unsigned int v21 = result[2] + 1;
        result[2] = v21;
        unint64_t v15 = *(void *)(a2 + 88);
        if (v21 >= v20) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v21) = v15;
        unsigned int v22 = result[3];
        unsigned int v23 = result[2] + 1;
        result[2] = v23;
        if (v23 >= v22) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v23) = HIDWORD(v15);
        unsigned int v13 = result[3];
        unsigned int v14 = result[2] + 1;
        result[2] = v14;
        LODWORD(v15) = *(_DWORD *)(a2 + 96);
        goto LABEL_56;
      case 0x10:
      case 0x28:
        unsigned int v39 = result[2];
        if (v39 >= result[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v39) = *(_DWORD *)(a2 + 76);
        unsigned int v13 = result[3];
        unsigned int v14 = result[2] + 1;
        result[2] = v14;
        LODWORD(v15) = *(_DWORD *)(a2 + 80);
        goto LABEL_56;
      case 0x11:
      case 0x29:
        uint64_t v40 = 1 << *(unsigned char *)(a2 + 92);
        unsigned int v41 = result[2];
        if (v41 >= result[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v41) = v40;
        unsigned int v42 = result[3];
        unsigned int v43 = result[2] + 1;
        result[2] = v43;
        if (v43 >= v42) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v43) = HIDWORD(v40);
        unsigned int v44 = result[3];
        unsigned int v45 = result[2] + 1;
        result[2] = v45;
        if (v45 >= v44) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v45) = *(_DWORD *)(a2 + 88) & 0x7FFFFFFF;
        unsigned int v46 = result[2] + 1;
        result[2] = v46;
        int32x2_t result = *(_DWORD **)(a2 + 80);
        if ((*(_DWORD *)(a2 + 88) & 0x80000000) != 0)
        {
          int32x2_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)result + 40))(result, v3);
          unsigned int v14 = v3[2];
        }
        else
        {
          if (v46 >= v3[3]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)v3 + 4 * v46) = result;
          unsigned int v47 = v3[3];
          unsigned int v48 = v3[2] + 1;
          v3[2] = v48;
          if (v48 >= v47) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)v3 + 4 * v48) = HIDWORD(result);
          unsigned int v14 = v3[2] + 1;
          v3[2] = v14;
        }
        LODWORD(v15) = *(_DWORD *)(a2 + 96);
        if (v14 >= v3[3]) {
          goto LABEL_69;
        }
        goto LABEL_57;
      case 0x2D:
        unsigned int v56 = result[2];
        if (v56 >= result[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v56) = *(_DWORD *)(a2 + 80);
        unsigned int v57 = result[3];
        unsigned int v58 = result[2] + 1;
        result[2] = v58;
        unint64_t v15 = *(void *)(a2 + 88);
        if (v58 >= v57) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v58) = v15;
        unsigned int v59 = result[3];
        unsigned int v60 = result[2] + 1;
        result[2] = v60;
        if (v60 >= v59) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v60) = HIDWORD(v15);
        unsigned int v13 = result[3];
        unsigned int v14 = result[2] + 1;
        result[2] = v14;
        LODWORD(v15) = *(_DWORD *)(a2 + 76);
LABEL_56:
        if (v14 >= v13) {
LABEL_69:
        }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        goto LABEL_57;
      default:
        if (v4 != 153) {
          goto LABEL_59;
        }
        long long v69 = *(_OWORD *)*(void *)(a2 + 40);
        int32x2_t result = (_DWORD *)sub_1CD3DB440((llvm::EVT *)&v69, (const char *)a2);
        if (result)
        {
          uint64_t v67 = 0;
          unsigned int v68 = v3[2];
          do
          {
            if (v68 >= v3[3]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)v3 + 4 * v68) = *(_DWORD *)(*(void *)(a2 + 80) + v67);
            unsigned int v68 = v3[2] + 1;
            v3[2] = v68;
            v67 += 4;
          }
          while (4 * result != v67);
        }
        break;
    }
  }
  else
  {
    switch(*(_WORD *)(a2 + 24))
    {
      case 0xFD:
      case 0xFE:
      case 0x122:
      case 0x123:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x134:
      case 0x135:
      case 0x136:
      case 0x137:
LABEL_3:
        if (*(unsigned char *)(a2 + 80)) {
          uint64_t v5 = *(unsigned __int8 *)(a2 + 80);
        }
        else {
          uint64_t v5 = *(void *)(a2 + 88);
        }
        unsigned int v6 = result[2];
        if (v6 >= result[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v6) = v5;
        unsigned int v7 = result[3];
        unsigned int v8 = result[2] + 1;
        result[2] = v8;
        if (v8 >= v7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v8) = HIDWORD(v5);
        unsigned int v9 = result[3];
        unsigned int v10 = result[2] + 1;
        result[2] = v10;
        if (v10 >= v9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v10) = *(unsigned char *)(a2 + 26) & 0xFA | (*(unsigned __int8 *)(a2 + 27) << 8);
        unsigned int v11 = result[3];
        unsigned int v12 = result[2] + 1;
        result[2] = v12;
        if (v12 >= v11) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v12) = *(_DWORD *)(*(void *)(a2 + 96) + 16);
        unsigned int v13 = result[3];
        unsigned int v14 = result[2] + 1;
        result[2] = v14;
        LODWORD(v15) = *(unsigned __int16 *)(*(void *)(a2 + 96) + 32);
        goto LABEL_56;
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x114:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x120:
      case 0x121:
      case 0x132:
      case 0x133:
      case 0x13A:
      case 0x13B:
      case 0x13C:
        goto LABEL_59;
      case 0x115:
        goto LABEL_26;
      case 0x11F:
        unsigned int v65 = result[2];
        if (v65 >= result[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v65) = *(_DWORD *)(*(void *)(a2 + 96) + 16);
        unsigned int v66 = result[3];
        unsigned int v14 = result[2] + 1;
        result[2] = v14;
        LODWORD(v15) = *(unsigned __int16 *)(*(void *)(a2 + 96) + 32);
        if (v14 >= v66) {
          goto LABEL_69;
        }
        goto LABEL_57;
      case 0x138:
      case 0x139:
        if ((*(void *)(a2 + 88) & 0x8000000000000000) != 0) {
          goto LABEL_58;
        }
        uint64_t v49 = *(void *)(a2 + 80);
        unsigned int v50 = result[2];
        if (v50 >= result[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v50) = v49;
        unsigned int v51 = result[3];
        unsigned int v52 = result[2] + 1;
        result[2] = v52;
        if (v52 >= v51) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)result + 4 * v52) = HIDWORD(v49);
        unsigned int v53 = result[3];
        unsigned int v54 = result[2] + 1;
        result[2] = v54;
        unint64_t v30 = *(void *)(a2 + 88);
        break;
      case 0x13D:
        goto LABEL_12;
      default:
        switch(*(_WORD *)(a2 + 24))
        {
          case 0x16E:
          case 0x170:
          case 0x171:
          case 0x173:
            goto LABEL_3;
          case 0x16F:
          case 0x172:
            if (*(unsigned char *)(a2 + 80)) {
              uint64_t v24 = *(unsigned __int8 *)(a2 + 80);
            }
            else {
              uint64_t v24 = *(void *)(a2 + 88);
            }
            unsigned int v25 = result[2];
            if (v25 >= result[3]) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)result + 4 * v25) = v24;
            unsigned int v26 = result[3];
            unsigned int v27 = result[2] + 1;
            result[2] = v27;
            if (v27 >= v26) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)result + 4 * v27) = HIDWORD(v24);
            unsigned int v28 = result[3];
            unsigned int v29 = result[2] + 1;
            result[2] = v29;
            if (v29 >= v28) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)result + 4 * v29) = *(unsigned char *)(a2 + 26) & 0xFA | (*(unsigned __int8 *)(a2 + 27) << 8);
            unsigned int v13 = result[3];
            unsigned int v14 = result[2] + 1;
            result[2] = v14;
            LODWORD(v15) = *(_DWORD *)(*(void *)(a2 + 96) + 16);
            goto LABEL_56;
          default:
            goto LABEL_59;
        }
    }
LABEL_49:
    if (v54 >= v53) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)result + 4 * v54) = v30;
    unsigned int v55 = result[3];
    unsigned int v14 = result[2] + 1;
    result[2] = v14;
    if (v14 >= v55) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v15 = HIDWORD(v30);
LABEL_57:
    *(_DWORD *)(*(void *)v3 + 4 * v14) = v15;
    ++v3[2];
  }
LABEL_58:
  LOWORD(v4) = *(_WORD *)(a2 + 24);
LABEL_59:
  if ((__int16)v4 >= 890)
  {
    unsigned int v61 = v3[2];
    if (v61 >= v3[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)v3 + 4 * v61) = *(_DWORD *)(*(void *)(a2 + 96) + 16);
    unsigned int v62 = v3[3];
    unsigned int v63 = v3[2] + 1;
    v3[2] = v63;
    int v64 = *(unsigned __int16 *)(*(void *)(a2 + 96) + 32);
    if (v63 >= v62) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)v3 + 4 * v63) = v64;
    ++v3[2];
  }
  return result;
}

unsigned __int8 **sub_1CCFCD698(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, void *a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(unsigned __int8 **)(a2 + 40);
  if (*v8 == 172) {
    return 0;
  }
  unsigned int v9 = 0;
  int v11 = *(unsigned __int16 *)(a2 + 24);
  if (v11 != 263 && v11 != 281)
  {
    uint64_t v15 = *(unsigned __int16 *)(a2 + 58);
    if (v15 != 1)
    {
      unsigned int v16 = 1;
      while (v8[16 * v16] != 172)
      {
        if (v15 == ++v16) {
          goto LABEL_10;
        }
      }
      return 0;
    }
LABEL_10:
    uint64_t v27 = a3;
    int v28 = a4;
    uint64_t v29 = a5;
    int v30 = a6;
    v25[0] = v26;
    v25[1] = (void *)0x2000000000;
    sub_1CCFCC8C8((uint64_t)v25, v11, (uint64_t)v8, v15, &v27, 2);
    sub_1CCFCCA90(v25, a2);
    unsigned int v17 = *(unsigned __int8 **)(a2 + 64);
    unsigned int v22 = v17;
    if (v17) {
      llvm::MetadataTracking::track((uint64_t)&v22, v17, 2);
    }
    int v23 = *(_DWORD *)(a2 + 60);
    unsigned int v9 = sub_1CD7EA8F8(a1, (uint64_t)v25, (uint64_t)&v22, a7);
    if (!v22) {
      goto LABEL_16;
    }
    int v18 = *v22;
    if ((v18 - 4) > 0x1E)
    {
      if ((v18 - 3) >= 0xFFFFFFFE) {
        unsigned int v19 = v22;
      }
      else {
        unsigned int v19 = 0;
      }
      if ((v18 - 3) < 0xFFFFFFFE)
      {
        if (v18 == 3) {
          *((void *)v22 + 1) = 0;
        }
        goto LABEL_16;
      }
      unint64_t v20 = (unint64_t)(v19 + 8);
    }
    else
    {
      if ((v22[1] & 0x7F) != 2 && !*((_DWORD *)v22 + 3)) {
        goto LABEL_16;
      }
      uint64_t v21 = *((void *)v22 + 2);
      if ((v21 & 4) == 0) {
        goto LABEL_16;
      }
      unint64_t v20 = v21 & 0xFFFFFFFFFFFFFFF8;
      if (!v20) {
        goto LABEL_16;
      }
    }
    uint64_t v24 = &v22;
    sub_1CC5FA668(v20 + 16, &v24);
LABEL_16:
    if (v9) {
      *((_WORD *)v9 + 36) &= *(_WORD *)(a2 + 72) | 0xF001;
    }
    if (v25[0] != v26) {
      free(v25[0]);
    }
  }
  return v9;
}

unsigned __int8 **sub_1CCFCD894(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5)
{
  v25[16] = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *(unsigned __int8 **)(a2 + 40);
  if (*v7 == 172) {
    return 0;
  }
  unsigned int v8 = 0;
  int v10 = *(unsigned __int16 *)(a2 + 24);
  if (v10 != 263 && v10 != 281)
  {
    uint64_t v14 = *(unsigned __int16 *)(a2 + 58);
    if (v14 != 1)
    {
      unsigned int v15 = 1;
      while (v7[16 * v15] != 172)
      {
        if (v14 == ++v15) {
          goto LABEL_10;
        }
      }
      return 0;
    }
LABEL_10:
    v24[0] = v25;
    v24[1] = (void *)0x2000000000;
    sub_1CCFCC8C8((uint64_t)v24, v10, (uint64_t)v7, v14, a3, a4);
    sub_1CCFCCA90(v24, a2);
    unsigned int v16 = *(unsigned __int8 **)(a2 + 64);
    uint64_t v21 = v16;
    if (v16) {
      llvm::MetadataTracking::track((uint64_t)&v21, v16, 2);
    }
    int v22 = *(_DWORD *)(a2 + 60);
    unsigned int v8 = sub_1CD7EA8F8(a1, (uint64_t)v24, (uint64_t)&v21, a5);
    if (!v21) {
      goto LABEL_16;
    }
    int v17 = *v21;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        int v18 = v21;
      }
      else {
        int v18 = 0;
      }
      if ((v17 - 3) < 0xFFFFFFFE)
      {
        if (v17 == 3) {
          *((void *)v21 + 1) = 0;
        }
        goto LABEL_16;
      }
      unint64_t v19 = (unint64_t)(v18 + 8);
    }
    else
    {
      if ((v21[1] & 0x7F) != 2 && !*((_DWORD *)v21 + 3)) {
        goto LABEL_16;
      }
      uint64_t v20 = *((void *)v21 + 2);
      if ((v20 & 4) == 0) {
        goto LABEL_16;
      }
      unint64_t v19 = v20 & 0xFFFFFFFFFFFFFFF8;
      if (!v19) {
        goto LABEL_16;
      }
    }
    int v23 = &v21;
    sub_1CC5FA668(v19 + 16, &v23);
LABEL_16:
    if (v8) {
      *((_WORD *)v8 + 36) &= *(_WORD *)(a2 + 72) | 0xF001;
    }
    if (v24[0] != v25) {
      free(v24[0]);
    }
  }
  return v8;
}

uint64_t *sub_1CCFCDA78(uint64_t a1, llvm *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, void *__src, uint64_t a10)
{
  int v11 = (uint64_t *)a7;
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  unsigned int v110 = a2;
  uint64_t v111 = a3;
  if (*(_WORD *)(a5 + 24) == 51 && *(_WORD *)(a7 + 24) == 51) {
    return sub_1CD3DD4D8(a1, a2, a3);
  }
  unint64_t v118 = v120;
  uint64_t v119 = 0x800000000;
  if ((unint64_t)(4 * a10) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v16 = 0;
  if (a10)
  {
    memcpy(v118, __src, 4 * a10);
    int v16 = v119;
  }
  LODWORD(v119) = v16 + ((unint64_t)(4 * a10) >> 2);
  if ((uint64_t *)a5 == v11 && a6 == a8)
  {
    int v11 = sub_1CD3DD4D8(a1, v110, v111);
    a8 = v41;
    if (a10)
    {
      unsigned int v42 = v118;
      uint64_t v43 = a10;
      do
      {
        if (*v42 >= (int)a10) {
          *v42 -= a10;
        }
        ++v42;
        --v43;
      }
      while (v43);
    }
  }
  if (*(_WORD *)(a5 + 24) == 51)
  {
    int v17 = v119;
    unsigned int v18 = a6;
    a6 = a8;
    a8 = v18;
    if (v119)
    {
      unint64_t v19 = (int *)v118;
      int v20 = -(int)v119;
      uint64_t v21 = v119;
      do
      {
        int v22 = *v19;
        if ((*v19 & 0x80000000) == 0)
        {
          if (v22 >= v17) {
            int v23 = v20;
          }
          else {
            int v23 = v17;
          }
          *unint64_t v19 = v23 + v22;
        }
        ++v19;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = (uint64_t *)a5;
  }
  else
  {
    uint64_t v24 = v11;
    int v11 = (uint64_t *)a5;
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 1248))(*(void *)(a1 + 24)))
  {
    if (*((_WORD *)v11 + 12) == 146 && v11 != 0)
    {
      unsigned int v121 = v123;
      uint64_t v122 = 0x600000000;
      int v124 = 0;
      uint64_t v57 = sub_1CD7EE8F8((uint64_t)v11, (uint64_t)&v121);
      unsigned int v58 = v121;
      if (v57 && (int)a10 >= 1)
      {
        uint64_t v59 = 0;
        unsigned int v60 = v118;
        do
        {
          unint64_t v61 = v60[v59];
          if ((v61 & 0x80000000) != 0 || (int)v61 >= (int)a10) {
            goto LABEL_93;
          }
          if ((*(void *)&v58[(v61 >> 3) & 0x1FFFFFF8] >> v61))
          {
            int v62 = -1;
          }
          else
          {
            if ((*(void *)&v58[8 * (v59 >> 6)] >> v59)) {
              goto LABEL_93;
            }
            int v62 = v59;
          }
          v60[v59] = v62;
LABEL_93:
          ++v59;
        }
        while ((int)a10 != v59);
      }
      if (v58 != v123) {
        free(v58);
      }
    }
    if (*((_WORD *)v24 + 12) == 146 && v24 != 0)
    {
      unsigned int v121 = v123;
      uint64_t v122 = 0x600000000;
      int v124 = 0;
      uint64_t v63 = sub_1CD7EE8F8((uint64_t)v24, (uint64_t)&v121);
      int v64 = v121;
      if (v63 && (int)a10 >= 1)
      {
        uint64_t v65 = 0;
        unsigned int v66 = v118;
        do
        {
          int v67 = v66[v65];
          BOOL v68 = v67 >= (int)a10 && v67 < 2 * (int)a10;
          if (!v68) {
            goto LABEL_108;
          }
          if ((*(void *)&v64[8 * ((v67 - a10) >> 6)] >> (v67 - a10)))
          {
            int v69 = -1;
          }
          else
          {
            if ((*(void *)&v64[8 * (v65 >> 6)] >> v65)) {
              goto LABEL_108;
            }
            int v69 = a10 + v65;
          }
          v66[v65] = v69;
LABEL_108:
          ++v65;
        }
        while ((int)a10 != v65);
      }
      if (v64 != v123) {
        free(v64);
      }
    }
  }
  int v27 = *((unsigned __int16 *)v24 + 12);
  if (a10)
  {
    int v28 = (int *)v118;
    uint64_t v29 = a10;
    char v30 = 1;
    char v31 = 1;
    do
    {
      if (*v28 >= (int)a10)
      {
        if (v27 == 51) {
          *int v28 = -1;
        }
        else {
          char v30 = 0;
        }
      }
      else
      {
        v31 &= *v28 < 0;
      }
      ++v28;
      --v29;
    }
    while (v29);
    if ((v30 & 1) == 0) {
      goto LABEL_42;
    }
  }
  else
  {
    char v31 = 1;
    char v30 = 1;
  }
  if (v31) {
    goto LABEL_57;
  }
LABEL_42:
  if ((v30 & (v27 != 51)) == 1)
  {
    uint64_t v24 = sub_1CD3DD4D8(a1, v110, v111);
    a8 = v44;
    if ((v31 & 1) == 0) {
      goto LABEL_44;
    }
  }
  else if ((v31 & 1) == 0)
  {
LABEL_44:
    unsigned int v32 = v24;
    uint64_t v24 = v11;
    goto LABEL_45;
  }
  unsigned int v32 = sub_1CD3DD4D8(a1, v110, v111);
  int v45 = v119;
  a6 = a8;
  a8 = v46;
  if (v119)
  {
    unsigned int v47 = (int *)v118;
    int v48 = -(int)v119;
    uint64_t v49 = v119;
    do
    {
      int v50 = *v47;
      if ((*v47 & 0x80000000) == 0)
      {
        if (v50 >= v45) {
          int v51 = v48;
        }
        else {
          int v51 = v45;
        }
        *unsigned int v47 = v51 + v50;
      }
      ++v47;
      --v49;
    }
    while (v49);
  }
LABEL_45:
  int v33 = *((unsigned __int16 *)v32 + 12);
  int v34 = *((unsigned __int16 *)v24 + 12);
  if (v34 != 51 || v33 != 51)
  {
    uint64_t v107 = a4;
    if (a10)
    {
      uint64_t v35 = 0;
      char v36 = 1;
      LOBYTE(v37) = 1;
      do
      {
        uint64_t v38 = *((unsigned int *)v118 + v35);
        if ((int)v38 >= 0) {
          v36 &= v35 == v38;
        }
        int v37 = (v38 == *(_DWORD *)v118) & v37;
        ++v35;
      }
      while (a10 != v35);
      if (v36)
      {
        unsigned int v39 = v24;
        goto LABEL_54;
      }
    }
    else
    {
      int v37 = 1;
    }
    if (v33 != 51) {
      goto LABEL_115;
    }
    unsigned int v39 = v24;
    unsigned int v52 = a6;
    while (v34 == 216)
    {
      unsigned int v53 = (_DWORD *)v39[4];
      unsigned int v39 = *(void **)v53;
      unsigned int v52 = v53[2];
      int v34 = *(unsigned __int16 *)(*(void *)v53 + 24);
    }
    if (v34 != 146)
    {
LABEL_115:
      v116[0] = v117;
      v116[1] = (void *)0x2000000000;
      uint64_t v112 = v24;
      unsigned int v113 = a6;
      uint64_t v114 = v32;
      unsigned int v115 = a8;
      uint64_t v70 = sub_1CD7FFC1C(v110, v111);
      sub_1CCFCC8C8((uint64_t)v116, 153, v70, 1, (uint64_t *)&v112, 2);
      if (a10)
      {
        uint64_t v71 = 0;
        unsigned int v72 = v116[1];
        do
        {
          if (v72 >= HIDWORD(v116[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v116[0] + v72) = *(_DWORD *)((char *)v118 + v71);
          unsigned int v72 = ++LODWORD(v116[1]);
          v71 += 4;
        }
        while (4 * a10 != v71);
      }
      uint64_t v109 = 0;
      unsigned int v39 = sub_1CD7EA8F8(a1, (uint64_t)v116, v107, &v109);
      if (!v39)
      {
        unsigned int v84 = (void *)sub_1CB906F34((uint64_t *)(a1 + 344), 4 * (int)a10, 2);
        uint64_t v108 = v84;
        if (v119) {
          memmove(v84, v118, 4 * v119);
        }
        LODWORD(v121) = *(_DWORD *)(v107 + 8);
        unsigned int v39 = (void *)sub_1CD7EE980(a1, (uint64_t)&v110, (int *)&v121, (unsigned __int8 **)v107, (uint64_t *)&v108);
        sub_1CCFCE460(a1, (uint64_t)v39, (uint64_t)&v112, 2);
        unsigned int v85 = *(_DWORD *)(a1 + 340) + 1;
        int v86 = *(_DWORD *)(a1 + 336);
        if (v85 > 2 * v86)
        {
          llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v86, (uint64_t)off_1F2642190);
          unsigned int v121 = v123;
          uint64_t v122 = 0x2000000000;
          uint64_t v87 = *(void *)(a1 + 328)
              + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1CD805508(v102, (uint64_t)v39, &v121));
          if (v121 != v123) {
            free(v121);
          }
          unsigned int v85 = *(_DWORD *)(a1 + 340) + 1;
        }
        else
        {
          uint64_t v87 = v109;
        }
        uint64_t v88 = *(void *)v87;
        if (!*(void *)v87) {
          uint64_t v88 = v87 | 1;
        }
        *unsigned int v39 = v88;
        *(void *)uint64_t v87 = v39;
        uint64_t v90 = *(void *)(a1 + 208);
        uint64_t v89 = a1 + 208;
        *(_DWORD *)(v89 + 132) = v85;
        v39[1] = v90;
        v39[2] = v89;
        *(void *)(v90 + 8) = v39 + 1;
        *(void *)uint64_t v89 = v39 + 1;
        for (int i = *(void **)(v89 + 448); i; int i = (void *)i[1])
          (*(void (**)(void *, void *))(*i + 32))(i, v39);
      }
      if (v116[0] != v117) {
        free(v116[0]);
      }
      goto LABEL_54;
    }
    unsigned int v121 = v123;
    uint64_t v122 = 0x600000000;
    int v124 = 0;
    uint64_t v54 = sub_1CD7EE8F8((uint64_t)v39, (uint64_t)&v121);
    if (v54 && *(_WORD *)(v54 + 24) == 51)
    {
      unsigned int v39 = sub_1CD3DD4D8(a1, v110, v111);
      char v56 = 0;
      goto LABEL_160;
    }
    *(_OWORD *)uint64_t v116 = *(_OWORD *)(v39[5] + 16 * v52);
    uint64_t v73 = v54;
    int v104 = sub_1CD3DB440((llvm::EVT *)v116, v55);
    int v75 = sub_1CD3DB440((llvm::EVT *)&v110, v74);
    if (v73)
    {
      if (!v122)
      {
LABEL_130:
        if (v104 == v75)
        {
          char v56 = 0;
          unsigned int v39 = v24;
          goto LABEL_160;
        }
        int v92 = *(unsigned __int16 *)(v73 + 24);
        if (v92 != 35 && v92 != 11) {
          goto LABEL_159;
        }
        uint64_t v94 = *(void *)(v73 + 80);
        uint64_t v95 = *(unsigned int *)(v94 + 32);
        if (v95 > 0x40)
        {
          int v96 = 0;
          int64_t v97 = (unint64_t)(v95 + 63) >> 6;
          do
          {
            BOOL v68 = v97-- < 1;
            if (v68) {
              break;
            }
            unint64_t v98 = *(void *)(*(void *)(v94 + 24) + 8 * v97);
            v96 += __clz(v98);
          }
          while (!v98);
          int v99 = v95 | 0xFFFFFFC0;
          if ((v95 & 0x3F) == 0) {
            int v99 = 0;
          }
          if (v96 + v99 != v95) {
            goto LABEL_159;
          }
        }
        else if (*(void *)(v94 + 24))
        {
          goto LABEL_159;
        }
        char v56 = 0;
        unsigned int v39 = v24;
        goto LABEL_160;
      }
      uint64_t v76 = v121;
      uint64_t v77 = 8 * v122;
      while (!*(void *)v76)
      {
        v76 += 8;
        v77 -= 8;
        if (!v77) {
          goto LABEL_130;
        }
      }
    }
    if (v104 == v75) {
      int v78 = v37;
    }
    else {
      int v78 = 0;
    }
    if (v78 == 1)
    {
      uint64_t v79 = v39[5];
      uint64_t v80 = *(void *)(v79 + 8);
      uint64_t v103 = v80;
      uint64_t v105 = *(llvm **)v79;
      BOOL v81 = (uint64_t *)(v39[4] + 40 * *(unsigned int *)v118);
      unsigned int v39 = sub_1CD787B1C(a1, v105, v80, v107, *v81, v81[1]);
      if (v105 != v110 || (!(_BYTE)v105 ? (BOOL v83 = v103 == v111) : (BOOL v83 = 1), !v83))
      {
        uint64_t v100 = *(void *)(a1 + 832);
        if (v100) {
          __int16 v101 = *(_WORD *)(v100 + 8);
        }
        else {
          __int16 v101 = 0;
        }
        unsigned int v39 = sub_1CD7F3564((llvm::APFloatBase *)a1, (const char *)0xD8, v107, v110, v111, (uint64_t)v39, v82, v101);
      }
      char v56 = 0;
LABEL_160:
      if (v121 != v123)
      {
        char v106 = v56;
        free(v121);
        char v56 = v106;
      }
      if ((v56 & 1) == 0) {
        goto LABEL_54;
      }
      goto LABEL_115;
    }
LABEL_159:
    char v56 = 1;
    goto LABEL_160;
  }
LABEL_57:
  unsigned int v39 = sub_1CD3DD4D8(a1, v110, v111);
LABEL_54:
  if (v118 != v120) {
    free(v118);
  }
  return v39;
}

uint64_t sub_1CCFCE460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = 64 - __clz(a4 - 1);
  if (!a4) {
    unint64_t v8 = 0;
  }
  if (*(_DWORD *)(a1 + 448) > v8
    && (uint64_t v9 = *(void *)(a1 + 440), (v10 = *(void **)(v9 + 8 * v8)) != 0))
  {
    *(void *)(v9 + 8 * v8) = *v10;
    if (!a4)
    {
LABEL_6:
      LOBYTE(v11) = 0;
      goto LABEL_15;
    }
  }
  else
  {
    int v10 = (void *)sub_1CB906F34((uint64_t *)(a1 + 344), 40 << v8, 3);
    if (!a4) {
      goto LABEL_6;
    }
  }
  uint64_t v12 = 0;
  int v11 = 0;
  unsigned int v13 = 1;
  do
  {
    uint64_t v14 = &v10[5 * v12];
    v14[2] = a2;
    unsigned int v15 = (uint64_t *)(a3 + 16 * v12);
    uint64_t v16 = *v15;
    *((_DWORD *)v14 + 2) = *((_DWORD *)v15 + 2);
    *uint64_t v14 = v16;
    uint64_t v17 = *v15;
    uint64_t v20 = *(void *)(v17 + 48);
    unsigned int v18 = (void *)(v17 + 48);
    uint64_t v19 = v20;
    v14[4] = v20;
    if (v20) {
      *(void *)(v19 + 24) = v14 + 4;
    }
    v10[5 * v12 + 3] = v18;
    *unsigned int v18 = v14;
    if (*(unsigned char *)(*(void *)(*v14 + 40) + 16 * *((unsigned int *)v14 + 2)) != 1) {
      v11 |= (*(unsigned char *)(*v14 + 26) & 4) >> 2;
    }
    uint64_t v12 = v13;
  }
  while (a4 != v13++);
LABEL_15:
  *(_WORD *)(a2 + 56) = a4;
  *(void *)(a2 + 32) = v10;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 1520))(*(void *)(a1 + 24), a2);
  if ((result & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 24) + 1504))(*(void *)(a1 + 24), a2, *(void *)(a1 + 80), *(void *)(a1 + 72));
    if ((v11 | result)) {
      char v23 = 4;
    }
    else {
      char v23 = 0;
    }
    *(unsigned char *)(a2 + 26) = *(unsigned char *)(a2 + 26) & 0xFB | v23;
  }
  return result;
}

void sub_1CCFCE670(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v606 = a2;
  BOOL v607 = a3;
  unsigned int v10 = sub_1CD7878C0((unsigned int *)&v606, a2, a3);
  unsigned int v13 = v10;
  unsigned int v603 = v10;
  uint64_t v14 = &v604;
  if (v10 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  unsigned int v605 = v10;
  unint64_t __src = 0;
  unint64_t v604 = 0;
  uint64_t v15 = v606;
  uint64_t v16 = (unsigned __int8 *)(*(void *)(v606 + 40) + 16 * v607);
  if (*v16)
  {
    if (*v16 - 120 < 0x33) {
      goto LABEL_23;
    }
  }
  else if (*(unsigned char *)(*((void *)v16 + 1) + 8) == 19)
  {
LABEL_23:
    *(_DWORD *)(a6 + 8) = v603;
    *(void *)a6 = __src;
    *(_DWORD *)(a6 + 24) = v605;
    *(void *)(a6 + 16) = v604;
    unsigned int v603 = 0;
    unsigned int v605 = 0;
    goto LABEL_53;
  }
  int v17 = *(unsigned __int16 *)(v606 + 24);
  if (v17 > 0x22)
  {
    if (v17 == 36) {
      goto LABEL_16;
    }
    if (v17 != 35) {
      goto LABEL_22;
    }
LABEL_12:
    uint64_t v18 = *(void *)(v606 + 80);
    unsigned int v19 = *(_DWORD *)(v18 + 32);
    unsigned int v599 = v19;
    if (v19 > 0x40) {
      operator new[]();
    }
    uint64_t v20 = *(void *)(v18 + 24);
    unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
    if (!v19) {
      unint64_t v21 = 0;
    }
    *(_DWORD *)(a6 + 8) = v19;
    *(void *)a6 = v21 & ~v20;
    *(_DWORD *)(a6 + 24) = v19;
    *(void *)(a6 + 16) = v20;
    goto LABEL_52;
  }
  if (v17 == 11) {
    goto LABEL_12;
  }
  if (v17 == 12)
  {
LABEL_16:
    uint64_t v22 = *(void *)(v606 + 80);
    uint64_t v24 = *(void **)(v22 + 32);
    char v23 = (llvm::detail::DoubleAPFloat *)(v22 + 32);
    if (v24 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v23, (llvm::APInt *)&v595);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v23, (uint64_t)&v595);
    }
    unsigned int v599 = DWORD2(v595);
    if (DWORD2(v595) > 0x40) {
      operator new[]();
    }
    uint64_t v25 = v595;
    if (DWORD2(v595)) {
      unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v595);
    }
    else {
      unint64_t v26 = 0;
    }
    unint64_t v27 = v26 & ~(void)v595;
    int v28 = DWORD2(v595);
    *(_DWORD *)(a6 + 8) = DWORD2(v595);
    *(void *)a6 = v27;
    *(_DWORD *)(a6 + 24) = v28;
    *(void *)(a6 + 16) = v25;
    goto LABEL_52;
  }
LABEL_22:
  if (a5 >= 6) {
    goto LABEL_23;
  }
  unsigned int v599 = 1;
  v598 = 0;
  unsigned int v601 = 1;
  unint64_t v600 = 0;
  uint64_t v29 = (void *)a4[2];
  __dst = v29;
  if (v29 > 0x40)
  {
    int v32 = 0;
    int64_t v33 = ((unint64_t)v29 + 63) >> 6;
    char v30 = *(unsigned int **)a4;
    do
    {
      BOOL v34 = v33-- < 1;
      if (v34) {
        break;
      }
      unint64_t v35 = *(void *)&v30[2 * v33];
      v32 += __clz(v35);
    }
    while (!v35);
    unsigned int v36 = v29 | 0xFFFFFFC0;
    if ((v29 & 0x3F) == 0) {
      unsigned int v36 = 0;
    }
    char v31 = *(unsigned int **)a4;
    if (v32 + v36 == v29) {
      goto LABEL_50;
    }
  }
  else
  {
    char v30 = *(unsigned int **)a4;
    if (!*(void *)a4) {
      goto LABEL_50;
    }
    char v31 = *(unsigned int **)a4;
  }
  if (v17 <= 38)
  {
    if (v17 == 5)
    {
      unsigned int v37 = *(unsigned __int8 *)(v606 + 76);
      if (*(unsigned char *)(v606 + 76))
      {
        if (v37 > 0x40)
        {
          llvm::APInt::setBitsSlowCase(&__src, 0, *(unsigned __int8 *)(v606 + 76));
        }
        else
        {
          unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v37;
          if (v603 > 0x40) {
            *(void *)__src |= v38;
          }
          else {
            __src |= v38;
          }
        }
      }
      DWORD2(v595) = v605;
      if (v605 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v595);
      }
      *(void *)&long long v595 = 0;
      if (v37 != v605)
      {
        if (v37 > 0x3F) {
          llvm::APInt::setBitsSlowCase(&v595, v37, v605);
        }
        else {
          *(void *)&long long v595 = v595 | (0xFFFFFFFFFFFFFFFFLL >> (v37 - v605) << v37);
        }
      }
      if (v605 > 0x40)
      {
        uint64_t v520 = 0;
        unint64_t v521 = v604;
        uint64_t v522 = v595;
        unint64_t v523 = (((unint64_t)v605 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          *(void *)(v521 + v520) &= *(void *)(v522 + v520);
          v520 += 8;
        }
        while (v523 != v520);
      }
      else
      {
        v604 &= v595;
      }
      goto LABEL_50;
    }
    if (v17 == 15)
    {
LABEL_36:
      (*(void (**)(void, void, unint64_t *, void))(**(void **)(a1 + 24) + 1632))(*(void *)(a1 + 24), *(unsigned int *)(v606 + 76), &__src, *(void *)(a1 + 40));
      goto LABEL_50;
    }
    if (v17 != 4)
    {
LABEL_48:
      if (v17 >= 0x186) {
LABEL_49:
      }
        (*(void (**)(void, uint64_t, BOOL, unint64_t *, unsigned int *, uint64_t, uint64_t))(**(void **)(a1 + 24) + 1608))(*(void *)(a1 + 24), v606, v607, &__src, a4, a1, a5);
      goto LABEL_50;
    }
    *(_OWORD *)v590 = *(_OWORD *)(*(void *)(*(void *)(v606 + 32) + 40) + 80);
    if (LOBYTE(v590[0])) {
      unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v590);
    }
    else {
      unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v590);
    }
    unsigned int v42 = ExtendedSizeInBits;
    if (v41 == 1) {
    DWORD2(v608[0]) = v13;
    }
    if (v13 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)v608);
    }
    *(void *)&v608[0] = 0;
    if (v42)
    {
      if (v42 > 0x40)
      {
        llvm::APInt::setBitsSlowCase(v608, 0, v42);
      }
      else
      {
        unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v42;
        if (DWORD2(v608[0]) > 0x40) {
          **(void **)&v608[0] |= v43;
        }
        else {
          *(void *)&v608[0] |= v43;
        }
      }
    }
    sub_1CD7F121C(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), (a5 + 1));
    if (v603 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    unint64_t __src = v595;
    unsigned int v603 = DWORD2(v595);
    DWORD2(v595) = 0;
    if (v605 >= 0x41 && v604)
    {
      MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      unsigned int v597 = 0;
      if (DWORD2(v595) >= 0x41 && (void)v595) {
        MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
      }
    }
    else
    {
      unint64_t v604 = v596;
      unsigned int v605 = v597;
    }
    unsigned int v44 = DWORD2(v608[0]);
    int v585 = DWORD2(v608[0]);
    if (DWORD2(v608[0]) > 0x40) {
      operator new[]();
    }
    int v45 = *(void **)&v608[0];
    unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v608[0]);
    if (!DWORD2(v608[0])) {
      unint64_t v46 = 0;
    }
    unint64_t v47 = v46 & ~*(void *)&v608[0];
    if (v603 > 0x40)
    {
      int v48 = (void *)__src;
      unint64_t v49 = ((unint64_t)v603 + 63) >> 6;
      int v50 = (uint64_t *)v47;
      do
      {
        uint64_t v51 = *v50++;
        *v48++ |= v51;
        --v49;
      }
      while (v49);
    }
    else
    {
      __src |= v47;
    }
    unsigned int v52 = v603;
    unsigned int v584 = v603;
    if (v603 > 0x40) {
      operator new[]();
    }
    unint64_t v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v603;
    if (!v603) {
      unint64_t v53 = 0;
    }
    unint64_t v54 = v53 & ~__src;
    if (v605 > 0x40)
    {
      unsigned int v55 = (void *)v604;
      unint64_t v56 = ((unint64_t)v605 + 63) >> 6;
      uint64_t v57 = (uint64_t *)v54;
      do
      {
        uint64_t v58 = *v57++;
        *v55++ &= v58;
        --v56;
      }
      while (v56);
    }
    else
    {
      v604 &= v54;
    }
    if (v52 >= 0x41 && v54) {
      MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
    }
    if (v44 < 0x41 || !v45) {
      goto LABEL_50;
    }
    unsigned int v39 = v45;
    goto LABEL_107;
  }
  v572 = (llvm::APInt *)&v600;
  switch(v17)
  {
    case 39:
      goto LABEL_36;
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 49:
    case 50:
    case 51:
    case 52:
    case 54:
    case 55:
    case 59:
    case 65:
    case 66:
    case 67:
    case 71:
    case 73:
    case 74:
    case 75:
    case 82:
    case 83:
    case 84:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 140:
    case 141:
    case 142:
    case 143:
    case 145:
    case 152:
    case 154:
    case 156:
    case 157:
    case 158:
    case 161:
    case 162:
    case 163:
    case 165:
    case 166:
    case 178:
    case 179:
    case 194:
    case 195:
    case 196:
    case 197:
    case 202:
    case 203:
    case 208:
    case 209:
    case 210:
    case 212:
    case 213:
    case 214:
    case 215:
      goto LABEL_48;
    case 46:
    case 47:
    case 48:
      goto LABEL_49;
    case 53:
      sub_1CD7F121C(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 >= 0x41 && v604)
      {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        unint64_t v604 = v596;
        unsigned int v605 = v597;
        unsigned int v597 = 0;
        if (DWORD2(v595) >= 0x41 && (void)v595) {
          MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
        }
      }
      else
      {
        unint64_t v604 = v596;
        unsigned int v605 = v597;
      }
      uint64_t v360 = *(void *)(*(void *)(*(void *)(v606 + 32) + 40) + 80);
      uint64_t v361 = (void *)(v360 + 24);
      if (*(_DWORD *)(v360 + 32) >= 0x41u) {
        uint64_t v361 = (void *)*v361;
      }
      int v362 = *(_DWORD *)v361;
      unsigned int v364 = sub_1CD3E3904((unsigned int *)&v606);
      if (v363 == 1) {
      int v365 = v364 * v362;
      }
      llvm::APInt::getHiBits((llvm::APInt *)&__src, v603 - v365, (uint64_t)&v595);
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      llvm::APInt::getHiBits((llvm::APInt *)&v604, DWORD2(v595) - v365, (uint64_t)&v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v366 = v595;
      unint64_t v604 = v595;
      unsigned int v367 = DWORD2(v595);
      unsigned int v605 = DWORD2(v595);
      if (v364 > 0x40)
      {
        if (v603 != v364) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v595, (uint64_t)&__src);
        if (v605 != v364) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)v590, (uint64_t)&v604);
        unsigned int v364 = v590[1];
        uint64_t v372 = v590[0];
LABEL_896:
        unsigned int v373 = DWORD2(v595);
        unint64_t v374 = v595;
        if (v603 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        unint64_t __src = v374;
        unsigned int v603 = v373;
        if (v605 >= 0x41 && v604) {
          MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        }
        unint64_t v604 = (unint64_t)v372;
        unsigned int v605 = v364;
        goto LABEL_50;
      }
      if (v603 >= 0x41) {
        p_src = (unint64_t *)__src;
      }
      else {
        p_src = &__src;
      }
      unint64_t v369 = *p_src;
      DWORD2(v595) = v364;
      unint64_t v370 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v364;
      unint64_t v371 = v370;
      if (!v364) {
        unint64_t v371 = 0;
      }
      *(void *)&long long v595 = v371 & v369;
      if (v367 >= 0x41)
      {
        unint64_t v366 = *(void *)v366;
        if (v364) {
          goto LABEL_895;
        }
      }
      else if (v364)
      {
LABEL_895:
        uint64_t v372 = (void *)(v370 & v366);
        goto LABEL_896;
      }
      unint64_t v370 = 0;
      goto LABEL_895;
    case 56:
    case 68:
    case 70:
      goto LABEL_725;
    case 57:
    case 69:
      goto LABEL_57;
    case 58:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      uint64_t v151 = *(void *)(v606 + 32);
      if (*(void *)v151 == *(void *)(v151 + 40) && *(_DWORD *)(v151 + 8) == *(_DWORD *)(v151 + 48)) {
        uint64_t v146 = sub_1CCFD8600(a1, *(void *)v151, *(void *)(v151 + 8), (uint64_t)a4, 0, (int)a5 + 1);
      }
      else {
        uint64_t v146 = 0;
      }
      goto LABEL_661;
    case 60:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      llvm::KnownBits::udiv((llvm::KnownBits *)&__src, (const llvm::KnownBits *)&v598, (uint64_t)&v595);
      goto LABEL_662;
    case 61:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      llvm::KnownBits::srem((uint64_t)&__src, (int8x8_t *)&v598, (uint64_t)&v595);
      goto LABEL_484;
    case 62:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      llvm::KnownBits::urem((llvm::KnownBits *)&__src, (int8x8_t *)&v598, (uint64_t)&v595);
      goto LABEL_484;
    case 63:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      uint64_t v150 = *(void *)(v606 + 32);
      uint64_t v146 = *(void *)v150 == *(void *)(v150 + 40) && *(_DWORD *)(v150 + 8) == *(_DWORD *)(v150 + 48);
      if (!v607) {
        goto LABEL_661;
      }
      goto LABEL_986;
    case 64:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      uint64_t v145 = *(void *)(v606 + 32);
      uint64_t v146 = *(void *)v145 == *(void *)(v145 + 40) && *(_DWORD *)(v145 + 8) == *(_DWORD *)(v145 + 48);
      if (v607) {
        goto LABEL_862;
      }
LABEL_661:
      llvm::KnownBits::mul((llvm::KnownBits *)&__src, (const llvm::KnownBits *)&v598, (const llvm::KnownBits *)v146, (uint64_t)&v595);
      goto LABEL_662;
    case 72:
    case 76:
    case 77:
      if (v607) {
        goto LABEL_724;
      }
LABEL_725:
      DWORD2(v595) = 1;
      unsigned int v597 = 1;
      *(void *)&long long v595 = v17 != 72 && v17 != 70;
      unint64_t v596 = 0;
      sub_1CCFCE670(v590, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = (unint64_t)v590[0];
      unsigned int v603 = v590[1];
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v591;
      unsigned int v605 = v592;
      sub_1CCFCE670(v590, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v590[0];
      unsigned int v599 = v590[1];
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v591;
      unsigned int v601 = v592;
      llvm::KnownBits::computeForAddCarry((llvm::KnownBits *)&__src, (const llvm::KnownBits *)&v598, (const llvm::KnownBits *)&v595, (uint64_t)v590);
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = (unint64_t)v590[0];
      unsigned int v603 = v590[1];
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v591;
      unsigned int v605 = v592;
      if (v597 >= 0x41 && v596) {
        MEMORY[0x1D25D9CB0](v596, 0x1000C8000313F17);
      }
      unsigned int v199 = DWORD2(v595);
      goto LABEL_829;
    case 78:
    case 79:
      if (v607)
      {
LABEL_724:
        uint64_t v305 = *(unsigned int **)(a1 + 24);
        int v306 = (uint64_t *)(*(void *)(**(void **)(v606 + 32) + 40)
                         + 16 * *(unsigned int *)(*(void *)(v606 + 32) + 8));
        uint64_t v307 = *v306;
        uint64_t v308 = v306[1];
LABEL_729:
        int v312 = sub_1CD7879C8(v305, v307, v308);
        if (v13 >= 2 && v312 == 1) {
          goto LABEL_571;
        }
      }
      else
      {
LABEL_57:
        sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
        if (v603 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        unint64_t __src = v595;
        unsigned int v603 = DWORD2(v595);
        DWORD2(v595) = 0;
        if (v605 >= 0x41 && v604) {
          MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        }
        unint64_t v604 = v596;
        unsigned int v605 = v597;
        sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
        if (v599 >= 0x41 && v598) {
          MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
        }
        v598 = (int8x8_t *)v595;
        unsigned int v599 = DWORD2(v595);
        if (v601 >= 0x41 && v600) {
          MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
        }
        unint64_t v600 = v596;
        unsigned int v601 = v597;
        unsigned int v581 = v599;
        if (v599 > 0x40) {
          operator new[]();
        }
        int8x8_t v580 = (int8x8_t)v598;
        unsigned int v583 = v597;
        if (v597 > 0x40) {
          operator new[]();
        }
        unint64_t v582 = v600;
        llvm::KnownBits::computeForAddSub(0, 0, (uint64_t)&__src, (uint64_t)&v580, (uint64_t)&v595);
        if (v603 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        unint64_t __src = v595;
        unsigned int v603 = DWORD2(v595);
        DWORD2(v595) = 0;
        if (v605 >= 0x41 && v604)
        {
          MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
          unint64_t v604 = v596;
          unsigned int v605 = v597;
          unsigned int v597 = 0;
          if (DWORD2(v595) >= 0x41 && (void)v595) {
            MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
          }
        }
        else
        {
          unint64_t v604 = v596;
          unsigned int v605 = v597;
          unsigned int v597 = 0;
        }
        if (v583 >= 0x41 && v582) {
          MEMORY[0x1D25D9CB0](v582, 0x1000C8000313F17);
        }
        if (v581 >= 0x41)
        {
          unsigned int v39 = (void *)v580;
          goto LABEL_1179;
        }
      }
      goto LABEL_50;
    case 80:
    case 81:
      if (v607) {
        goto LABEL_560;
      }
      goto LABEL_50;
    case 85:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      if (v599 > 0x40)
      {
        int v144 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v598);
      }
      else
      {
        if (!v599) {
          goto LABEL_50;
        }
        int v144 = __clz(~((void)v598 << -(char)v599));
      }
      if (!v144) {
        goto LABEL_50;
      }
      LODWORD(v62) = v603;
      unsigned int v94 = v603 - v144;
      if (v603 > 0x40 || v94 > 0x3F) {
        goto LABEL_1267;
      }
      int v126 = -v144;
      goto LABEL_599;
    case 138:
    case 139:
    case 193:
      BOOL v309 = sub_1CD407020(v606);
      unsigned int v310 = (unsigned int *)(*(void *)(v606 + 32) + 40 * v309);
      unsigned int v311 = (uint64_t *)(*(void *)(*(void *)v310 + 40) + 16 * v310[2]);
      uint64_t v307 = *v311;
      uint64_t v308 = v311[1];
      uint64_t v305 = *(unsigned int **)(a1 + 24);
      goto LABEL_729;
    case 144:
    case 187:
      goto LABEL_571;
    case 146:
      unsigned int v103 = v603;
      if (v603 > 0x40)
      {
        memset((void *)__src, 255, (((unint64_t)v603 + 63) >> 3) & 0x3FFFFFF8);
        unsigned int v103 = v603;
        if (v603)
        {
LABEL_204:
          unint64_t v104 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v103;
          if (v103 < 0x41)
          {
LABEL_205:
            uint64_t v105 = &__src;
            goto LABEL_206;
          }
          uint64_t v105 = (unint64_t *)(__src + 8 * ((((unint64_t)v103 + 63) >> 6) - 1));
LABEL_206:
          *v105 &= v104;
          unsigned int v106 = v605;
          if (v605 > 0x40)
          {
            memset((void *)v604, 255, (((unint64_t)v605 + 63) >> 3) & 0x3FFFFFF8);
            unsigned int v106 = v605;
            if (v605)
            {
LABEL_208:
              unint64_t v107 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
              if (v106 >= 0x41) {
                uint64_t v14 = (unint64_t *)(v604 + 8 * ((((unint64_t)v106 + 63) >> 6) - 1));
              }
              goto LABEL_210;
            }
          }
          else
          {
            unint64_t v604 = -1;
            if (v605) {
              goto LABEL_208;
            }
          }
          unint64_t v107 = 0;
LABEL_210:
          *v14 &= v107;
          uint64_t v108 = *(unsigned __int16 *)(v606 + 56);
          if (*(_WORD *)(v606 + 56))
          {
            uint64_t v109 = 0;
            unsigned int __dstb = a5 + 1;
            do
            {
              if (a4[2] >= 0x41) {
                unsigned int v110 = (unsigned int *)(*(void *)a4 + 8 * (v109 >> 6));
              }
              else {
                unsigned int v110 = a4;
              }
              if ((*(void *)v110 >> v109))
              {
                v608[0] = *(_OWORD *)(*(void *)(v606 + 32) + 40 * v109);
                sub_1CD7F121C(&v595, a1, *(void *)&v608[0], *((void *)&v608[0] + 1), __dstb);
                if (v599 >= 0x41 && v598) {
                  MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
                }
                v598 = (int8x8_t *)v595;
                unsigned int v599 = DWORD2(v595);
                DWORD2(v595) = 0;
                if (v601 >= 0x41 && v600)
                {
                  MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
                  unint64_t v600 = v596;
                  unsigned int v601 = v597;
                  unsigned int v597 = 0;
                  if (DWORD2(v595) >= 0x41 && (void)v595) {
                    MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
                  }
                }
                else
                {
                  unint64_t v600 = v596;
                  unsigned int v601 = v597;
                }
                uint64_t v112 = sub_1CD3E3904((unsigned int *)v608);
                if (v111 == 1) {
                if (v112 != (llvm::Type *)v13)
                }
                {
                  if (v13 > 0x40)
                  {
                    if (v599 != v13) {
                      operator new[]();
                    }
                    sub_1CD0463BC((uint64_t)&v595, (uint64_t)&v598);
                    if (v601 != v13) {
                      operator new[]();
                    }
                    sub_1CD0463BC((uint64_t)v590, (uint64_t)&v600);
                    unsigned int v120 = v590[1];
                    uint64_t v119 = v590[0];
                  }
                  else
                  {
                    if (v599 >= 0x41) {
                      unsigned int v113 = v598;
                    }
                    else {
                      unsigned int v113 = (int8x8_t *)&v598;
                    }
                    int8x8_t v114 = *v113;
                    DWORD2(v595) = v13;
                    unint64_t v115 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
                    if (!v13) {
                      unint64_t v115 = 0;
                    }
                    *(void *)&long long v595 = v115 & *(void *)&v114;
                    uint64_t v116 = &v600;
                    if (v601 >= 0x41) {
                      uint64_t v116 = (unint64_t *)v600;
                    }
                    unint64_t v117 = *v116;
                    unint64_t v118 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
                    if (!v13) {
                      unint64_t v118 = 0;
                    }
                    uint64_t v119 = (void *)(v118 & v117);
                    unsigned int v120 = v13;
                  }
                  unsigned int v121 = DWORD2(v595);
                  int8x8_t v122 = (int8x8_t)v595;
                  if (v599 >= 0x41 && v598) {
                    MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
                  }
                  v598 = (int8x8_t *)v122;
                  unsigned int v599 = v121;
                  if (v601 >= 0x41 && v600) {
                    MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
                  }
                  unint64_t v600 = (unint64_t)v119;
                  unsigned int v601 = v120;
                }
                if (v603 > 0x40) {
                  operator new[]();
                }
                if (v605 > 0x40) {
                  operator new[]();
                }
                unint64_t v123 = v600 & v604;
                __src &= (unint64_t)v598;
                v604 &= v600;
                if (!__src && !v123) {
                  break;
                }
              }
              ++v109;
            }
            while (v109 != v108);
          }
          goto LABEL_50;
        }
      }
      else
      {
        unint64_t __src = -1;
        if (v603) {
          goto LABEL_204;
        }
      }
      unint64_t v104 = 0;
      goto LABEL_205;
    case 147:
      uint64_t v142 = *(uint64_t **)(v606 + 32);
      uint64_t v561 = v142[1];
      uint64_t v564 = *v142;
      size_t v557 = v142[6];
      uint64_t v559 = v142[5];
      uint64_t v143 = v142[10];
      DWORD2(v608[0]) = v29;
      if (v29 > 0x40) {
        operator new[]();
      }
      *(void *)&v608[0] = v31;
      int v245 = *(unsigned __int16 *)(v143 + 24);
      BOOL v246 = v245 == 35 || v245 == 11;
      if (!v246) {
        goto LABEL_783;
      }
      uint64_t v247 = *(void *)(v143 + 80);
      uint64_t v248 = *(unsigned int *)(v247 + 32);
      if (v248 >= 0x41)
      {
        int v254 = 0;
        int64_t v255 = (unint64_t)(v248 + 63) >> 6;
        do
        {
          BOOL v34 = v255-- < 1;
          if (v34) {
            break;
          }
          unint64_t v256 = *(void *)(*(void *)(v247 + 24) + 8 * v255);
          v254 += __clz(v256);
        }
        while (!v256);
        int v257 = v248 | 0xFFFFFFC0;
        if ((v248 & 0x3F) == 0) {
          int v257 = 0;
        }
        if ((v248 - v254 - v257) >= 0x41) {
          goto LABEL_783;
        }
        unint64_t v249 = **(void **)(v247 + 24);
      }
      else
      {
        unint64_t v249 = *(void *)(v247 + 24);
      }
      if (v249 < (unint64_t)v29)
      {
        if (a4[2] >= 0x41) {
          unint64_t v258 = &v30[2 * (v249 >> 6)];
        }
        else {
          unint64_t v258 = a4;
        }
        uint64_t v259 = 1 << v249;
        uint64_t v260 = *(void *)v258;
        *(void *)&v608[0] = (unint64_t)v31 & ~(1 << v249);
        unint64_t v604 = -1;
        if (v605) {
          unint64_t v266 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v605;
        }
        else {
          unint64_t v266 = 0;
        }
        v604 &= v266;
        unsigned int v267 = v603;
        if (v603 > 0x40)
        {
          memset((void *)__src, 255, (((unint64_t)v603 + 63) >> 3) & 0x3FFFFFF8);
          unsigned int v267 = v603;
        }
        else
        {
          unint64_t __src = -1;
        }
        if (v267)
        {
          unint64_t v268 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v267;
          if (v267 >= 0x41)
          {
            uint64_t v269 = (unint64_t *)(__src + 8 * ((((unint64_t)v267 + 63) >> 6) - 1));
LABEL_623:
            *v269 &= v268;
            if ((v260 & v259) == 0) {
              goto LABEL_624;
            }
LABEL_790:
            sub_1CD7F121C(&v595, a1, v559, v557, (a5 + 1));
            if (v599 >= 0x41 && v598) {
              MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
            }
            v598 = (int8x8_t *)v595;
            unsigned int v599 = DWORD2(v595);
            DWORD2(v595) = 0;
            if (v601 >= 0x41 && v600)
            {
              MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
              unint64_t v600 = v596;
              unsigned int v601 = v597;
              unsigned int v597 = 0;
              if (DWORD2(v595) >= 0x41 && (void)v595) {
                MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
              }
            }
            else
            {
              unint64_t v600 = v596;
              unsigned int v601 = v597;
            }
            if (v599 < v13)
            {
              sub_1CB9F87DC((uint64_t *)&v598, v13, (uint64_t)&v595);
            }
            else if (v599 > v13)
            {
              if (v13 > 0x40) {
                operator new[]();
              }
              if (v599 >= 0x41) {
                unsigned int v416 = v598;
              }
              else {
                unsigned int v416 = (int8x8_t *)&v598;
              }
              unint64_t v417 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
              unint64_t v418 = v417;
              if (!v13) {
                unint64_t v418 = 0;
              }
              int8x8_t v419 = *v416;
              if (v601 >= 0x41) {
                v572 = (llvm::APInt *)v600;
              }
              if (!v13) {
                unint64_t v417 = 0;
              }
              unint64_t v420 = v417 & *(void *)v572;
              DWORD2(v595) = v13;
              *(void *)&long long v595 = v418 & *(void *)&v419;
              unsigned int v597 = v13;
              unint64_t v596 = v420;
            }
            else
            {
              DWORD2(v595) = v599;
              if (v599 > 0x40) {
                operator new[]();
              }
              *(void *)&long long v595 = v598;
              unsigned int v597 = v601;
              if (v601 > 0x40) {
                operator new[]();
              }
              unint64_t v596 = v600;
            }
            if (v603 > 0x40) {
              operator new[]();
            }
            if (v605 > 0x40) {
              operator new[]();
            }
            __src &= v595;
            v604 &= v596;
            if (v597 >= 0x41 && v596) {
              MEMORY[0x1D25D9CB0](v596, 0x1000C8000313F17);
            }
            if (DWORD2(v595) >= 0x41 && (void)v595) {
              MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
            }
LABEL_624:
            if (DWORD2(v608[0]) > 0x40)
            {
              int v270 = 0;
              int64_t v271 = ((unint64_t)DWORD2(v608[0]) + 63) >> 6;
              unsigned int v39 = *(void **)&v608[0];
              do
              {
                BOOL v34 = v271-- < 1;
                if (v34) {
                  break;
                }
                unint64_t v272 = *(void *)(*(void *)&v608[0] + 8 * v271);
                v270 += __clz(v272);
              }
              while (!v272);
              unsigned int v273 = DWORD2(v608[0]) | 0xFFFFFFC0;
              if ((BYTE8(v608[0]) & 0x3F) == 0) {
                unsigned int v273 = 0;
              }
              if (v270 + v273 == DWORD2(v608[0]))
              {
LABEL_1179:
                if (!v39) {
                  goto LABEL_50;
                }
                goto LABEL_107;
              }
            }
            else if (!*(void *)&v608[0])
            {
              goto LABEL_50;
            }
            sub_1CCFCE670(&v595, a1, v564, v561, v608, (a5 + 1));
            if (v599 >= 0x41 && v598) {
              MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
            }
            v598 = (int8x8_t *)v595;
            unsigned int v599 = DWORD2(v595);
            if (v601 >= 0x41 && v600) {
              MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
            }
            unint64_t v600 = v596;
            unsigned int v601 = v597;
            if (v603 > 0x40) {
              operator new[]();
            }
            if (v605 > 0x40) {
              operator new[]();
            }
            __src &= (unint64_t)v598;
            v604 &= v600;
            if (DWORD2(v608[0]) < 0x41) {
              goto LABEL_50;
            }
            unsigned int v39 = *(void **)&v608[0];
            goto LABEL_1179;
          }
        }
        else
        {
          unint64_t v268 = 0;
        }
        uint64_t v269 = &__src;
        goto LABEL_623;
      }
LABEL_783:
      unint64_t v604 = -1;
      if (v605) {
        unint64_t v325 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v605;
      }
      else {
        unint64_t v325 = 0;
      }
      v604 &= v325;
      unsigned int v326 = v603;
      if (v603 > 0x40)
      {
        memset((void *)__src, 255, (((unint64_t)v603 + 63) >> 3) & 0x3FFFFFF8);
        unsigned int v326 = v603;
        if (v603)
        {
LABEL_787:
          unint64_t v327 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v326;
          if (v326 >= 0x41)
          {
            uint64_t v328 = (unint64_t *)(__src + 8 * ((((unint64_t)v326 + 63) >> 6) - 1));
            goto LABEL_789;
          }
LABEL_788:
          uint64_t v328 = &__src;
LABEL_789:
          *v328 &= v327;
          goto LABEL_790;
        }
      }
      else
      {
        unint64_t __src = -1;
        if (v603) {
          goto LABEL_787;
        }
      }
      unint64_t v327 = 0;
      goto LABEL_788;
    case 148:
      uint64_t v159 = *(void **)(v606 + 32);
      uint64_t v160 = *v159;
      uint64_t v161 = v159[1];
      uint64_t v162 = v159[5];
      unint64_t v163 = (uint64_t *)(*(void *)(*v159 + 40) + 16 * v161);
      uint64_t v165 = *v163;
      uint64_t v164 = v163[1];
      *(void *)&v608[0] = v165;
      *((void *)&v608[0] + 1) = v164;
      if ((_BYTE)v165)
      {
        if (v165 - 120 < 0x33) {
          goto LABEL_50;
        }
      }
      else if (*(unsigned char *)(v164 + 8) == 19)
      {
        goto LABEL_50;
      }
      unsigned int v280 = sub_1CD3E12F4((unsigned __int8 *)v608, (uint64_t)v11, v12);
      unsigned int __dstc = sub_1CD3DB440((llvm::EVT *)v608, v281);
      unsigned int v574 = v280;
      if (v13 > v280)
      {
        if (v280 > 0x40)
        {
          if (v603 != v280) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v595, (uint64_t)&__src);
          if (v605 != v280) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)v590, (uint64_t)&v604);
          unsigned int v565 = v590[1];
          v569 = v590[0];
        }
        else
        {
          if (v603 >= 0x41) {
            uint64_t v282 = (unint64_t *)__src;
          }
          else {
            uint64_t v282 = &__src;
          }
          unint64_t v283 = *v282;
          DWORD2(v595) = v280;
          unint64_t v284 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v280;
          unint64_t v285 = v284;
          if (!v280) {
            unint64_t v285 = 0;
          }
          *(void *)&long long v595 = v285 & v283;
          uint64_t v286 = &v604;
          if (v605 >= 0x41) {
            uint64_t v286 = (unint64_t *)v604;
          }
          unint64_t v287 = *v286;
          if (!v280) {
            unint64_t v284 = 0;
          }
          v569 = (void *)(v284 & v287);
          unsigned int v565 = v280;
        }
        unsigned int v288 = DWORD2(v595);
        unint64_t v289 = v595;
        if (v603 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        unint64_t __src = v289;
        unsigned int v603 = v288;
        if (v605 >= 0x41 && v604) {
          MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        }
        unint64_t v604 = (unint64_t)v569;
        unsigned int v605 = v565;
      }
      unsigned int v594 = __dstc;
      if (__dstc > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v593);
      }
      if (__dstc) {
        unint64_t v290 = 0xFFFFFFFFFFFFFFFFLL >> -(char)__dstc;
      }
      else {
        unint64_t v290 = 0;
      }
      uint64_t v593 = v290;
      int v291 = *(unsigned __int16 *)(v162 + 24);
      if (v291 != 35 && v291 != 11) {
        goto LABEL_1169;
      }
      uint64_t v292 = *(void *)(v162 + 80);
      uint64_t v293 = *(unsigned int *)(v292 + 32);
      if (v293 >= 0x41)
      {
        int v464 = 0;
        int64_t v465 = (unint64_t)(v293 + 63) >> 6;
        do
        {
          BOOL v34 = v465-- < 1;
          if (v34) {
            break;
          }
          unint64_t v466 = *(void *)(*(void *)(v292 + 24) + 8 * v465);
          v464 += __clz(v466);
        }
        while (!v466);
        int v467 = v293 | 0xFFFFFFC0;
        if ((v293 & 0x3F) == 0) {
          int v467 = 0;
        }
        if ((v293 - v464 - v467) >= 0x41)
        {
LABEL_1169:
          sub_1CCFCE670(&v595, a1, v160, v161, &v593, (a5 + 1));
          if (v603 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          unint64_t __src = v595;
          unsigned int v603 = DWORD2(v595);
          if (v605 >= 0x41 && v604) {
            MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
          }
          unint64_t v604 = v596;
          unsigned int v605 = v597;
          if (v13 > v574)
          {
            if (v13 >= 0x41)
            {
LABEL_1218:
              if (v603 != v13) {
                operator new[]();
              }
              sub_1CD0463BC((uint64_t)&v595, (uint64_t)&__src);
              if (v605 != v13) {
                operator new[]();
              }
              sub_1CD0463BC((uint64_t)v590, (uint64_t)&v604);
              unsigned int v13 = v590[1];
              unint64_t v359 = v590[0];
            }
            else
            {
              DWORD2(v595) = v13;
              unint64_t v468 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
              *(void *)&long long v595 = __src & v468;
              unint64_t v359 = (void *)(v596 & v468);
            }
LABEL_1174:
            unsigned int v469 = DWORD2(v595);
            unint64_t v470 = v595;
            if (v603 >= 0x41 && __src) {
              MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            }
            unint64_t __src = v470;
            unsigned int v603 = v469;
            if (v605 >= 0x41 && v604) {
              MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
            }
            unint64_t v604 = (unint64_t)v359;
            unsigned int v605 = v13;
          }
LABEL_1177:
          if (v594 < 0x41) {
            goto LABEL_50;
          }
          unsigned int v39 = (void *)v593;
          goto LABEL_1179;
        }
        unint64_t v294 = **(void **)(v292 + 24);
      }
      else
      {
        unint64_t v294 = *(void *)(v292 + 24);
      }
      if (v294 < __dstc)
      {
        DWORD2(v595) = __dstc;
        if (v594 >= 0x41 && v593) {
          MEMORY[0x1D25D9CB0](v593, 0x1000C8000313F17);
        }
        uint64_t v593 = 1 << v294;
        unsigned int v594 = __dstc;
      }
      goto LABEL_1169;
    case 149:
      unsigned int v376 = v603;
      if (v603 > 0x40)
      {
        memset((void *)__src, 255, (((unint64_t)v603 + 63) >> 3) & 0x3FFFFFF8);
        unsigned int v376 = v603;
        if (v603)
        {
LABEL_909:
          unint64_t v377 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v376;
          if (v376 < 0x41)
          {
LABEL_910:
            uint64_t v378 = &__src;
            goto LABEL_911;
          }
          uint64_t v378 = (unint64_t *)(__src + 8 * ((((unint64_t)v376 + 63) >> 6) - 1));
LABEL_911:
          *v378 &= v377;
          unsigned int v379 = v605;
          if (v605 > 0x40)
          {
            memset((void *)v604, 255, (((unint64_t)v605 + 63) >> 3) & 0x3FFFFFF8);
            unsigned int v379 = v605;
            if (v605)
            {
LABEL_913:
              unint64_t v380 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v379;
              if (v379 >= 0x41) {
                uint64_t v14 = (unint64_t *)(v604 + 8 * ((((unint64_t)v379 + 63) >> 6) - 1));
              }
              goto LABEL_915;
            }
          }
          else
          {
            unint64_t v604 = -1;
            if (v605) {
              goto LABEL_913;
            }
          }
          unint64_t v380 = 0;
LABEL_915:
          *v14 &= v380;
          *(_OWORD *)v590 = *(_OWORD *)(*(void *)(**(void **)(v606 + 32) + 40)
                                      + 16 * *(unsigned int *)(*(void *)(v606 + 32) + 8));
          unsigned int v381 = sub_1CD3DB440((llvm::EVT *)v590, v11);
          uint64_t v382 = *(unsigned __int16 *)(v606 + 56);
          if (!*(_WORD *)(v606 + 56)) {
            goto LABEL_50;
          }
          unsigned int v383 = v381;
          uint64_t v384 = 0;
          while (1)
          {
            llvm::APInt::extractBits((uint64_t)a4, v383, v383 * v384, (uint64_t)v608);
            if (DWORD2(v608[0]) <= 0x40) {
              break;
            }
            int v385 = 0;
            int64_t v386 = ((unint64_t)DWORD2(v608[0]) + 63) >> 6;
            do
            {
              BOOL v34 = v386-- < 1;
              if (v34) {
                break;
              }
              unint64_t v387 = *(void *)(*(void *)&v608[0] + 8 * v386);
              v385 += __clz(v387);
            }
            while (!v387);
            unsigned int v388 = DWORD2(v608[0]) | 0xFFFFFFC0;
            if ((BYTE8(v608[0]) & 0x3F) == 0) {
              unsigned int v388 = 0;
            }
            if (v385 + v388 != DWORD2(v608[0])) {
              goto LABEL_926;
            }
LABEL_931:
            if (v603 > 0x40)
            {
              int v392 = 0;
              int64_t v393 = ((unint64_t)v603 + 63) >> 6;
              do
              {
                BOOL v34 = v393-- < 1;
                if (v34) {
                  break;
                }
                unint64_t v394 = *(void *)(__src + 8 * v393);
                v392 += __clz(v394);
              }
              while (!v394);
              int v390 = 0;
              unsigned int v395 = v603 | 0xFFFFFFC0;
              if ((v603 & 0x3F) == 0) {
                unsigned int v395 = 0;
              }
              if (v392 + v395 != v603) {
                goto LABEL_939;
              }
LABEL_933:
              if (v605 > 0x40)
              {
                int v396 = 0;
                int64_t v397 = ((unint64_t)v605 + 63) >> 6;
                do
                {
                  BOOL v34 = v397-- < 1;
                  if (v34) {
                    break;
                  }
                  unint64_t v398 = *(void *)(v604 + 8 * v397);
                  v396 += __clz(v398);
                }
                while (!v398);
                unsigned int v399 = v605 | 0xFFFFFFC0;
                if ((v605 & 0x3F) == 0) {
                  unsigned int v399 = 0;
                }
                BOOL v389 = v396 + v399 == v605;
              }
              else
              {
                BOOL v389 = v604 == 0;
              }
              int v390 = v389;
              goto LABEL_939;
            }
            if (!__src) {
              goto LABEL_933;
            }
            int v390 = 0;
LABEL_939:
            if (DWORD2(v608[0]) >= 0x41 && *(void *)&v608[0]) {
              MEMORY[0x1D25D9CB0](*(void *)&v608[0], 0x1000C8000313F17);
            }
            if (++v384 == v382) {
              int v391 = 1;
            }
            else {
              int v391 = v390;
            }
            if (v391 == 1) {
              goto LABEL_50;
            }
          }
          if (!*(void *)&v608[0]) {
            goto LABEL_931;
          }
LABEL_926:
          sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40 * v384), *(void *)(*(void *)(v606 + 32) + 40 * v384 + 8), v608, (a5 + 1));
          if (v599 >= 0x41 && v598) {
            MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
          }
          v598 = (int8x8_t *)v595;
          unsigned int v599 = DWORD2(v595);
          DWORD2(v595) = 0;
          if (v601 >= 0x41 && v600) {
            MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
          }
          unint64_t v600 = v596;
          unsigned int v601 = v597;
          if (v603 > 0x40) {
            operator new[]();
          }
          if (v605 > 0x40) {
            operator new[]();
          }
          __src &= (unint64_t)v598;
          v604 &= v600;
          goto LABEL_931;
        }
      }
      else
      {
        unint64_t __src = -1;
        if (v603) {
          goto LABEL_909;
        }
      }
      unint64_t v377 = 0;
      goto LABEL_910;
    case 150:
      uint64_t v400 = *(void ***)(v606 + 32);
      unsigned int v402 = v400[5];
      uint64_t v401 = v400[6];
      uint64_t v403 = *((void *)v400[10] + 10);
      uint64_t v404 = (void *)(v403 + 24);
      if (*(_DWORD *)(v403 + 32) >= 0x41u) {
        uint64_t v404 = (void *)*v404;
      }
      unint64_t v405 = v400[1];
      __dstd = *v400;
      unsigned int v406 = *(_DWORD *)v404;
      long long v595 = *(_OWORD *)(v402[5] + 16 * v401);
      unsigned int v407 = sub_1CD3DB440((llvm::EVT *)&v595, v11);
      llvm::APInt::extractBits((uint64_t)a4, v407, v406, (uint64_t)v590);
      DWORD2(v608[0]) = a4[2];
      if (DWORD2(v608[0]) > 0x40) {
        operator new[]();
      }
      *(void *)&v608[0] = *(void *)a4;
      DWORD2(v595) = v407;
      if (v407 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v595);
      }
      *(void *)&long long v595 = 0;
      llvm::APInt::insertBits((void **)v608, (const llvm::APInt *)&v595, v406);
      if (DWORD2(v595) >= 0x41 && (void)v595) {
        MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
      }
      unsigned int v421 = v605;
      if (v605 > 0x40)
      {
        memset((void *)v604, 255, (((unint64_t)v605 + 63) >> 3) & 0x3FFFFFF8);
        unsigned int v421 = v605;
        if (v605)
        {
LABEL_1043:
          unint64_t v422 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v421;
          if (v421 >= 0x41) {
            uint64_t v14 = (unint64_t *)(v604 + 8 * ((((unint64_t)v421 + 63) >> 6) - 1));
          }
LABEL_1045:
          *v14 &= v422;
          unsigned int v423 = v603;
          if (v603 > 0x40)
          {
            memset((void *)__src, 255, (((unint64_t)v603 + 63) >> 3) & 0x3FFFFFF8);
            unsigned int v423 = v603;
            if (v603)
            {
LABEL_1047:
              unint64_t v424 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v423;
              if (v423 >= 0x41)
              {
                int v425 = (unint64_t *)(__src + 8 * ((((unint64_t)v423 + 63) >> 6) - 1));
LABEL_1049:
                *v425 &= v424;
                if (LODWORD(v590[1]) > 0x40)
                {
                  int v426 = 0;
                  int64_t v427 = ((unint64_t)LODWORD(v590[1]) + 63) >> 6;
                  do
                  {
                    BOOL v34 = v427-- < 1;
                    if (v34) {
                      break;
                    }
                    unint64_t v428 = *((void *)v590[0] + v427);
                    v426 += __clz(v428);
                  }
                  while (!v428);
                  unsigned int v429 = LODWORD(v590[1]) | 0xFFFFFFC0;
                  if (((uint64_t)v590[1] & 0x3F) == 0) {
                    unsigned int v429 = 0;
                  }
                  if (v426 + v429 == LODWORD(v590[1])) {
                    goto LABEL_1065;
                  }
                }
                else if (!v590[0])
                {
                  goto LABEL_1065;
                }
                sub_1CCFCE670(&v595, a1, v402, v401, v590, (a5 + 1));
                if (v603 >= 0x41 && __src) {
                  MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                }
                unint64_t __src = v595;
                unsigned int v430 = DWORD2(v595);
                unsigned int v603 = DWORD2(v595);
                DWORD2(v595) = 0;
                if (v605 >= 0x41 && v604)
                {
                  MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
                  unint64_t v431 = v596;
                  unint64_t v604 = v596;
                  unsigned int v432 = v597;
                  unsigned int v605 = v597;
                  unsigned int v430 = v603;
                }
                else
                {
                  unint64_t v431 = v596;
                  unint64_t v604 = v596;
                  unsigned int v432 = v597;
                  unsigned int v605 = v597;
                }
                if (v430 > 0x40)
                {
                  int v524 = 0;
                  int64_t v525 = ((unint64_t)v430 + 63) >> 6;
                  do
                  {
                    BOOL v34 = v525-- < 1;
                    if (v34) {
                      break;
                    }
                    unint64_t v526 = *(void *)(__src + 8 * v525);
                    v524 += __clz(v526);
                  }
                  while (!v526);
                  unsigned int v527 = v430 | 0xFFFFFFC0;
                  if ((v430 & 0x3F) == 0) {
                    unsigned int v527 = 0;
                  }
                  if (v524 + v527 != v430) {
                    goto LABEL_1065;
                  }
                }
                else if (__src)
                {
                  goto LABEL_1065;
                }
                if (v432 > 0x40)
                {
                  int v552 = 0;
                  int64_t v553 = ((unint64_t)v432 + 63) >> 6;
                  do
                  {
                    BOOL v34 = v553-- < 1;
                    if (v34) {
                      break;
                    }
                    unint64_t v554 = *(void *)(v431 + 8 * v553);
                    v552 += __clz(v554);
                  }
                  while (!v554);
                  unsigned int v555 = v432 | 0xFFFFFFC0;
                  if ((v432 & 0x3F) == 0) {
                    unsigned int v555 = 0;
                  }
                  if (v552 + v555 == v432) {
                    goto LABEL_776;
                  }
                }
                else if (!v431)
                {
                  goto LABEL_776;
                }
LABEL_1065:
                if (DWORD2(v608[0]) > 0x40)
                {
                  int v437 = 0;
                  int64_t v438 = ((unint64_t)DWORD2(v608[0]) + 63) >> 6;
                  uint64_t v319 = *(void *)&v608[0];
                  do
                  {
                    BOOL v34 = v438-- < 1;
                    if (v34) {
                      break;
                    }
                    unint64_t v439 = *(void *)(*(void *)&v608[0] + 8 * v438);
                    v437 += __clz(v439);
                  }
                  while (!v439);
                  unsigned int v440 = DWORD2(v608[0]) | 0xFFFFFFC0;
                  if ((BYTE8(v608[0]) & 0x3F) == 0) {
                    unsigned int v440 = 0;
                  }
                  if (v437 + v440 == DWORD2(v608[0])) {
                    goto LABEL_778;
                  }
                }
                else if (!*(void *)&v608[0])
                {
                  goto LABEL_780;
                }
                sub_1CCFCE670(&v595, a1, __dstd, v405, v608, (a5 + 1));
                if (v599 >= 0x41 && v598) {
                  MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
                }
                v598 = (int8x8_t *)v595;
                unsigned int v599 = DWORD2(v595);
                if (v601 >= 0x41 && v600) {
                  MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
                }
                unint64_t v600 = v596;
                unsigned int v601 = v597;
                unsigned int v322 = v603;
                if (v603 > 0x40) {
                  operator new[]();
                }
                unint64_t v323 = (unint64_t)v598 & __src;
                unsigned int v324 = v605;
                if (v605 > 0x40) {
                  operator new[]();
                }
                goto LABEL_775;
              }
LABEL_1048:
              int v425 = &__src;
              goto LABEL_1049;
            }
          }
          else
          {
            unint64_t __src = -1;
            if (v603) {
              goto LABEL_1047;
            }
          }
          unint64_t v424 = 0;
          goto LABEL_1048;
        }
      }
      else
      {
        unint64_t v604 = -1;
        if (v605) {
          goto LABEL_1043;
        }
      }
      unint64_t v422 = 0;
      goto LABEL_1045;
    case 151:
      unint64_t v184 = *(void **)(v606 + 32);
      uint64_t v185 = *v184;
      uint64_t v186 = v184[1];
      uint64_t v187 = (uint64_t *)(*(void *)(*v184 + 40) + 16 * v186);
      uint64_t v188 = *v187;
      if (*v187)
      {
        if (*v187 - 120 < 0x33) {
          goto LABEL_50;
        }
      }
      else if (*(unsigned char *)(v187[1] + 8) == 19)
      {
        goto LABEL_50;
      }
      uint64_t v295 = *(void *)(v184[5] + 80);
      unint64_t v296 = (void *)(v295 + 24);
      if (*(_DWORD *)(v295 + 32) >= 0x41u) {
        unint64_t v296 = (void *)*v296;
      }
      int v297 = *(_DWORD *)v296;
      uint64_t v298 = v187[1];
      *(void *)&long long v595 = v188;
      *((void *)&v595 + 1) = v298;
      unsigned int v299 = sub_1CD3DB440((llvm::EVT *)&v595, v11);
      unsigned int v300 = a4[2];
      if (v300 < v299)
      {
        unsigned int v302 = v299;
        if (v299 > 0x40) {
          operator new[]();
        }
        unint64_t v301 = *(void *)a4 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v299);
      }
      else
      {
        if (v300 > 0x40) {
          operator new[]();
        }
        unint64_t v301 = *(void *)a4;
        unsigned int v302 = a4[2];
      }
      LODWORD(v590[1]) = v302;
      unint64_t v303 = v301 << v297;
      if (v302 == v297) {
        unint64_t v303 = 0;
      }
      unint64_t v304 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v302;
      if (!v302) {
        unint64_t v304 = 0;
      }
      v590[0] = (void *)(v304 & v303);
      sub_1CCFCE670(&v595, a1, v185, v186, v590, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      goto LABEL_780;
    case 153:
      LODWORD(v590[1]) = v29;
      if (v29 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)v590);
      }
      v590[0] = 0;
      DWORD2(v608[0]) = v29;
      *(void *)&v608[0] = 0;
      unsigned int v127 = v603;
      if (v603 > 0x40)
      {
        memset((void *)__src, 255, (((unint64_t)v603 + 63) >> 3) & 0x3FFFFFF8);
        unsigned int v127 = v603;
        if (v603)
        {
LABEL_278:
          unint64_t v128 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v127;
          if (v127 < 0x41)
          {
LABEL_279:
            unint64_t v129 = &__src;
            goto LABEL_280;
          }
          unint64_t v129 = (unint64_t *)(__src + 8 * ((((unint64_t)v127 + 63) >> 6) - 1));
LABEL_280:
          *v129 &= v128;
          unsigned int v130 = v605;
          if (v605 > 0x40)
          {
            memset((void *)v604, 255, (((unint64_t)v605 + 63) >> 3) & 0x3FFFFFF8);
            unsigned int v130 = v605;
            if (v605)
            {
LABEL_282:
              unint64_t v131 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v130;
              if (v130 >= 0x41) {
                uint64_t v14 = (unint64_t *)(v604 + 8 * ((((unint64_t)v130 + 63) >> 6) - 1));
              }
              goto LABEL_284;
            }
          }
          else
          {
            unint64_t v604 = -1;
            if (v605) {
              goto LABEL_282;
            }
          }
          unint64_t v131 = 0;
LABEL_284:
          *v14 &= v131;
          if (!__dst) {
            goto LABEL_744;
          }
          uint64_t v132 = 0;
          uint64_t v133 = v606;
          unsigned int v134 = a4[2];
          unsigned int v135 = v590[1];
          unsigned int v136 = DWORD2(v608[0]);
          while (1)
          {
            long long v137 = (unsigned int *)(*(void *)a4 + 8 * (v132 >> 6));
            if (v134 < 0x41) {
              long long v137 = a4;
            }
            if ((*(void *)v137 >> v132))
            {
              unint64_t v138 = *(unsigned int *)(*(void *)(v133 + 80) + 4 * v132);
              if ((v138 & 0x80000000) != 0)
              {
                if (v603 > 0x40) {
                  bzero((void *)__src, (((unint64_t)v603 + 63) >> 3) & 0x3FFFFFF8);
                }
                else {
                  unint64_t __src = 0;
                }
                if (v605 > 0x40) {
                  bzero((void *)v604, (((unint64_t)v605 + 63) >> 3) & 0x3FFFFFF8);
                }
                else {
                  unint64_t v604 = 0;
                }
                if (LODWORD(v590[1]) > 0x40) {
                  bzero(v590[0], (((unint64_t)LODWORD(v590[1]) + 63) >> 3) & 0x3FFFFFF8);
                }
                else {
                  v590[0] = 0;
                }
                if (DWORD2(v608[0]) > 0x40) {
                  bzero(*(void **)&v608[0], (((unint64_t)DWORD2(v608[0]) + 63) >> 3) & 0x3FFFFFF8);
                }
                else {
                  *(void *)&v608[0] = 0;
                }
LABEL_744:
                if (LODWORD(v590[1]) > 0x40)
                {
                  int v313 = 0;
                  int64_t v314 = ((unint64_t)LODWORD(v590[1]) + 63) >> 6;
                  do
                  {
                    BOOL v34 = v314-- < 1;
                    if (v34) {
                      break;
                    }
                    unint64_t v315 = *((void *)v590[0] + v314);
                    v313 += __clz(v315);
                  }
                  while (!v315);
                  unsigned int v316 = LODWORD(v590[1]) | 0xFFFFFFC0;
                  if (((uint64_t)v590[1] & 0x3F) == 0) {
                    unsigned int v316 = 0;
                  }
                  if (v313 + v316 != LODWORD(v590[1])) {
                    goto LABEL_753;
                  }
                }
                else
                {
                  if (!v590[0]) {
                    goto LABEL_758;
                  }
LABEL_753:
                  sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), v590, (a5 + 1));
                  if (v599 >= 0x41 && v598) {
                    MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
                  }
                  v598 = (int8x8_t *)v595;
                  unsigned int v599 = DWORD2(v595);
                  DWORD2(v595) = 0;
                  if (v601 >= 0x41 && v600) {
                    MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
                  }
                  unint64_t v600 = v596;
                  unsigned int v601 = v597;
                  if (v603 > 0x40) {
                    operator new[]();
                  }
                  if (v605 > 0x40) {
                    operator new[]();
                  }
                  __src &= (unint64_t)v598;
                  v604 &= v600;
                }
LABEL_758:
                if (v603 > 0x40)
                {
                  int v512 = 0;
                  int64_t v513 = ((unint64_t)v603 + 63) >> 6;
                  do
                  {
                    BOOL v34 = v513-- < 1;
                    if (v34) {
                      break;
                    }
                    unint64_t v514 = *(void *)(__src + 8 * v513);
                    v512 += __clz(v514);
                  }
                  while (!v514);
                  unsigned int v515 = v603 | 0xFFFFFFC0;
                  if ((v603 & 0x3F) == 0) {
                    unsigned int v515 = 0;
                  }
                  if (v512 + v515 != v603) {
                    goto LABEL_762;
                  }
LABEL_760:
                  if (v605 > 0x40)
                  {
                    int v544 = 0;
                    int64_t v545 = ((unint64_t)v605 + 63) >> 6;
                    do
                    {
                      BOOL v34 = v545-- < 1;
                      if (v34) {
                        break;
                      }
                      unint64_t v546 = *(void *)(v604 + 8 * v545);
                      v544 += __clz(v546);
                    }
                    while (!v546);
                    unsigned int v547 = v605 | 0xFFFFFFC0;
                    if ((v605 & 0x3F) == 0) {
                      unsigned int v547 = 0;
                    }
                    if (v544 + v547 != v605) {
                      goto LABEL_762;
                    }
                  }
                  else if (v604)
                  {
                    goto LABEL_762;
                  }
                  goto LABEL_776;
                }
                if (!__src) {
                  goto LABEL_760;
                }
LABEL_762:
                if (DWORD2(v608[0]) <= 0x40)
                {
                  if (!*(void *)&v608[0]) {
                    goto LABEL_780;
                  }
LABEL_771:
                  sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), v608, (a5 + 1));
                  if (v599 >= 0x41 && v598) {
                    MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
                  }
                  v598 = (int8x8_t *)v595;
                  unsigned int v599 = DWORD2(v595);
                  if (v601 >= 0x41 && v600) {
                    MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
                  }
                  unint64_t v600 = v596;
                  unsigned int v601 = v597;
                  unsigned int v322 = v603;
                  if (v603 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v323 = (unint64_t)v598 & __src;
                  unsigned int v324 = v605;
                  if (v605 > 0x40) {
                    operator new[]();
                  }
LABEL_775:
                  unint64_t __src = v323;
                  unsigned int v603 = v322;
                  v604 &= v600;
                  unsigned int v605 = v324;
LABEL_776:
                  if (DWORD2(v608[0]) >= 0x41)
                  {
                    uint64_t v319 = *(void *)&v608[0];
                    goto LABEL_778;
                  }
LABEL_780:
                  if (LODWORD(v590[1]) < 0x41) {
                    goto LABEL_50;
                  }
                  unsigned int v39 = v590[0];
                  if (!v590[0]) {
                    goto LABEL_50;
                  }
LABEL_107:
                  MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
                  goto LABEL_50;
                }
                int v317 = 0;
                int64_t v318 = ((unint64_t)DWORD2(v608[0]) + 63) >> 6;
                uint64_t v319 = *(void *)&v608[0];
                do
                {
                  BOOL v34 = v318-- < 1;
                  if (v34) {
                    break;
                  }
                  unint64_t v320 = *(void *)(*(void *)&v608[0] + 8 * v318);
                  v317 += __clz(v320);
                }
                while (!v320);
                unsigned int v321 = DWORD2(v608[0]) | 0xFFFFFFC0;
                if ((BYTE8(v608[0]) & 0x3F) == 0) {
                  unsigned int v321 = 0;
                }
                if (v317 + v321 != DWORD2(v608[0])) {
                  goto LABEL_771;
                }
LABEL_778:
                if (v319) {
                  MEMORY[0x1D25D9CB0](v319, 0x1000C8000313F17);
                }
                goto LABEL_780;
              }
              if (v138 >= __dst)
              {
                unsigned int v140 = v138 % __dst;
                uint64_t v141 = 1 << (v138 % __dst);
                if (v136 > 0x40) {
                  *(void *)(*(void *)&v608[0] + 8 * (v140 >> 6)) |= v141;
                }
                else {
                  *(void *)&v608[0] |= v141;
                }
              }
              else
              {
                uint64_t v139 = 1 << v138;
                if (v135 > 0x40) {
                  *(void *)((char *)v590[0] + ((v138 >> 3) & 0x1FFFFFF8)) |= v139;
                }
                else {
                  v590[0] = (void *)((unint64_t)v590[0] | v139);
                }
              }
            }
            if (__dst == (void *)++v132) {
              goto LABEL_744;
            }
          }
        }
      }
      else
      {
        unint64_t __src = -1;
        if (v603) {
          goto LABEL_278;
        }
      }
      unint64_t v128 = 0;
      goto LABEL_279;
    case 155:
      if (v29 >= 0x41)
      {
        int v170 = 0;
        int64_t v171 = ((unint64_t)v29 + 63) >> 6;
        do
        {
          BOOL v34 = v171-- < 1;
          if (v34) {
            break;
          }
          unint64_t v172 = *(void *)&v30[2 * v171];
          v170 += __clz(v172);
        }
        while (!v172);
        unsigned int v173 = v29 | 0xFFFFFFC0;
        if ((v29 & 0x3F) == 0) {
          unsigned int v173 = 0;
        }
        a4 = v30;
        if (v29 - v170 - v173 > 0x40) {
          goto LABEL_50;
        }
      }
      if (*(void *)a4 != 1) {
        goto LABEL_50;
      }
      v608[0] = *(_OWORD *)*(void *)(v606 + 32);
      sub_1CD7F121C(&v595, a1, *(void *)&v608[0], *((void *)&v608[0] + 1), (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 >= 0x41 && v604)
      {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        unint64_t v604 = v596;
        unsigned int v605 = v597;
        unsigned int v597 = 0;
        if (DWORD2(v595) >= 0x41 && (void)v595) {
          MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
        }
      }
      else
      {
        unint64_t v604 = v596;
        unsigned int v605 = v597;
      }
      unsigned int v175 = sub_1CD3E3904((unsigned int *)v608);
      if (v174 == 1) {
      if (v175 == (llvm::Type *)v13)
      }
        goto LABEL_50;
      if (v13 <= 0x40)
      {
        if (v603 >= 0x41) {
          uint64_t v176 = (unint64_t *)__src;
        }
        else {
          uint64_t v176 = &__src;
        }
        unint64_t v177 = *v176;
        DWORD2(v595) = v13;
        unint64_t v178 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
        unint64_t v179 = v178;
        if (!v13) {
          unint64_t v179 = 0;
        }
        *(void *)&long long v595 = v179 & v177;
        if (v605 >= 0x41) {
          uint64_t v14 = (unint64_t *)v604;
        }
        if (!v13) {
          unint64_t v178 = 0;
        }
        unint64_t v157 = (void *)(v178 & *v14);
        goto LABEL_433;
      }
      if (v603 != v13) {
        operator new[]();
      }
      sub_1CD0463BC((uint64_t)&v595, (uint64_t)&__src);
      if (v605 != v13) {
        operator new[]();
      }
      goto LABEL_1828;
    case 159:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
LABEL_862:
      llvm::KnownBits::mulhu((llvm::KnownBits *)&__src, (const llvm::KnownBits *)&v598, (uint64_t)&v595);
      goto LABEL_662;
    case 160:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
LABEL_986:
      llvm::KnownBits::mulhs((llvm::KnownBits *)&__src, (const llvm::KnownBits *)&v598, (uint64_t)&v595);
      goto LABEL_662;
    case 164:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      sub_1CB9F87DC((uint64_t *)&__src, v13 + 1, (uint64_t)&v595);
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 >= 0x41 && v604)
      {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        unint64_t v604 = v596;
        unsigned int v605 = v597;
        unsigned int v597 = 0;
        if (DWORD2(v595) >= 0x41 && (void)v595) {
          MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
        }
      }
      else
      {
        unint64_t v604 = v596;
        unsigned int v605 = v597;
      }
      sub_1CB9F87DC((uint64_t *)&v598, v13 + 1, (uint64_t)&v595);
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v601 >= 0x41 && v600)
      {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
        unint64_t v600 = v596;
        unsigned int v601 = v597;
        unsigned int v597 = 0;
        if (DWORD2(v595) >= 0x41 && (void)v595) {
          MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
        }
      }
      else
      {
        unint64_t v600 = v596;
        unsigned int v601 = v597;
      }
      DWORD2(v595) = 1;
      *(void *)&long long v595 = 0;
      unsigned int v597 = 1;
      unint64_t v596 = 1;
      llvm::KnownBits::computeForAddCarry((llvm::KnownBits *)&__src, (const llvm::KnownBits *)&v598, (const llvm::KnownBits *)&v595, (uint64_t)v590);
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = (unint64_t)v590[0];
      unsigned int v603 = v590[1];
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v591;
      unsigned int v605 = v592;
      llvm::APInt::extractBits((uint64_t)&__src, v13, 1u, (uint64_t)v590);
      llvm::APInt::extractBits((uint64_t)&v604, v13, 1u, (uint64_t)v608);
      unsigned int v411 = v590[1];
      long long v412 = v590[0];
      unsigned int v413 = DWORD2(v608[0]);
      unint64_t v414 = *(void *)&v608[0];
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = (unint64_t)v412;
      unsigned int v603 = v411;
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v414;
      unsigned int v605 = v413;
      if (v597 >= 0x41 && v596) {
        MEMORY[0x1D25D9CB0](v596, 0x1000C8000313F17);
      }
      unsigned int v279 = DWORD2(v595);
      goto LABEL_1003;
    case 167:
    case 168:
      uint64_t v73 = sub_1CCFD8140(*(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), (llvm::APInt *)a4, 0, 0);
      if (!v73) {
        goto LABEL_710;
      }
      uint64_t v74 = **(void **)(v606 + 32);
      int v75 = v17 == 168 ? 167 : 168;
      if (v75 != *(unsigned __int16 *)(v74 + 24)) {
        goto LABEL_710;
      }
      uint64_t v76 = v73;
      uint64_t v77 = sub_1CCFD8140(*(void *)(*(void *)(v74 + 32) + 40), *(void *)(*(void *)(v74 + 32) + 48), (llvm::APInt *)a4, 0, 0);
      if (!v77) {
        goto LABEL_710;
      }
      if (v17 == 168) {
        uint64_t v78 = v77;
      }
      else {
        uint64_t v78 = v76;
      }
      if (v17 == 168) {
        uint64_t v79 = v76;
      }
      else {
        uint64_t v79 = v77;
      }
      uint64_t v80 = *(void *)(v79 + 80);
      BOOL v81 = (llvm::APInt *)(v80 + 24);
      uint64_t v82 = *(void *)(v78 + 80);
      v568 = (llvm::APInt *)(v82 + 24);
      uint64_t v83 = *(unsigned int *)(v80 + 32);
      if (v83 > 0x40)
      {
        unint64_t v84 = *(void *)v81;
        uint64_t v478 = (v83 - 1) >> 6;
        uint64_t v479 = 1 << (v83 - 1);
        unsigned int v480 = *(_DWORD *)(v82 + 32);
        unsigned int v481 = v480 - 1;
        unint64_t v85 = *(void *)(v82 + 24);
        BOOL v482 = v480 >= 0x41;
        unsigned int v483 = (void *)(v82 + 24);
        if (v482) {
          unsigned int v483 = (void *)(v85 + 8 * (v481 >> 6));
        }
        if (((*(void *)(*(void *)v81 + 8 * v478) & v479) != 0) == ((*v483 >> v481) & 1))
        {
          unint64_t v496 = ((unint64_t)(v83 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v496) {
              goto LABEL_1196;
            }
            unint64_t v497 = *(void *)(v84 - 8 + v496);
            unint64_t v498 = *(void *)(v85 - 8 + v496);
            v496 -= 8;
          }
          while (v497 == v498);
          if (v497 > v498) {
            goto LABEL_710;
          }
        }
        else if ((*(void *)(v84 + 8 * v478) & v479) == 0)
        {
          goto LABEL_710;
        }
LABEL_1196:
        if ((*(void *)(v84 + 8 * v478) & v479) != 0)
        {
          unsigned int v563 = llvm::APInt::countLeadingOnesSlowCase(v81);
        }
        else
        {
          int v484 = 0;
          int64_t v485 = (unint64_t)(v83 + 63) >> 6;
          do
          {
            BOOL v34 = v485-- < 1;
            if (v34) {
              break;
            }
            unint64_t v486 = *(void *)(v84 + 8 * v485);
            v484 += __clz(v486);
          }
          while (!v486);
          int v487 = v83 | 0xFFFFFFC0;
          if ((v83 & 0x3F) == 0) {
            int v487 = 0;
          }
          unsigned int v563 = v484 + v487;
        }
        unsigned int v573 = v83 - 1;
      }
      else
      {
        unint64_t v84 = *(void *)v81;
        unint64_t v85 = *(void *)v568;
        if ((uint64_t)(*(void *)v81 << -(char)v83) >> -(char)v83 > (uint64_t)(*(void *)v568 << -(char)v83) >> -(char)v83) {
          goto LABEL_710;
        }
        unsigned int v573 = v83 - 1;
        if ((v84 >> (v83 - 1)))
        {
          if (!v83)
          {
            unsigned int v563 = 0;
            goto LABEL_157;
          }
          unsigned int v86 = __clz(~(v84 << -(char)v83));
        }
        else
        {
          unsigned int v86 = v83 + __clz(v84) - 64;
        }
        unsigned int v563 = v86;
      }
LABEL_157:
      uint64_t v87 = *(unsigned int *)(v82 + 32);
      unsigned int __dsta = v87 - 1;
      if (v87 > 0x40)
      {
        if ((*(void *)(v85 + 8 * (__dsta >> 6)) >> __dsta))
        {
          unsigned int v90 = llvm::APInt::countLeadingOnesSlowCase(v568);
        }
        else
        {
          int v548 = 0;
          int64_t v549 = (unint64_t)(v87 + 63) >> 6;
          do
          {
            BOOL v34 = v549-- < 1;
            if (v34) {
              break;
            }
            unint64_t v550 = *(void *)(v85 + 8 * v549);
            v548 += __clz(v550);
          }
          while (!v550);
          int v551 = v87 | 0xFFFFFFC0;
          if ((v87 & 0x3F) == 0) {
            int v551 = 0;
          }
          unsigned int v90 = v548 + v551;
        }
      }
      else
      {
        unsigned int v88 = v87 + __clz(v85) - 64;
        unsigned int v89 = __clz(~(v85 << -(char)v87));
        if (!v87) {
          unsigned int v89 = 0;
        }
        if ((v85 >> __dsta)) {
          unsigned int v90 = v89;
        }
        else {
          unsigned int v90 = v88;
        }
      }
      if (v90 >= v563) {
        unsigned int v91 = v563;
      }
      else {
        unsigned int v91 = v90;
      }
      unint64_t v92 = v84;
      if (v83 >= 0x41) {
        unint64_t v92 = *(void *)(v84 + 8 * (v573 >> 6));
      }
      if ((v92 & (1 << v573)) != 0)
      {
        unint64_t v93 = v85;
        if (v87 >= 0x41) {
          unint64_t v93 = *(void *)(v85 + 8 * (__dsta >> 6));
        }
        if ((v93 >> __dsta))
        {
          if (!v91) {
            goto LABEL_50;
          }
          LODWORD(v62) = v605;
          unsigned int v94 = v605 - v91;
          if (v605 <= 0x40 && v94 <= 0x3F)
          {
            unint64_t v95 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v91 << v94;
            goto LABEL_447;
          }
          uint64_t v499 = &v604;
          goto LABEL_1271;
        }
      }
      if (v83 >= 0x41) {
        unint64_t v84 = *(void *)(v84 + 8 * (v573 >> 6));
      }
      if ((v84 & (1 << v573)) != 0) {
        goto LABEL_710;
      }
      if (v87 >= 0x41) {
        unint64_t v85 = *(void *)(v85 + 8 * (__dsta >> 6));
      }
      if ((v85 >> __dsta))
      {
LABEL_710:
        sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
        if (v603 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        unint64_t __src = v595;
        unsigned int v603 = DWORD2(v595);
        if (v605 >= 0x41 && v604) {
          MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        }
        unint64_t v604 = v596;
        unsigned int v605 = v597;
        sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
        if (v599 >= 0x41 && v598) {
          MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
        }
        v598 = (int8x8_t *)v595;
        unsigned int v599 = DWORD2(v595);
        if (v601 >= 0x41 && v600) {
          MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
        }
        unint64_t v600 = v596;
        unsigned int v601 = v597;
        if (v17 == 168) {
          llvm::KnownBits::smax((llvm::KnownBits *)&__src, (const llvm::KnownBits *)&v598, (uint64_t)&v595);
        }
        else {
          llvm::KnownBits::smin((llvm::KnownBits *)&__src, (const llvm::KnownBits *)&v598, (uint64_t)&v595);
        }
        goto LABEL_717;
      }
      if (!v91) {
        goto LABEL_50;
      }
      LODWORD(v62) = v603;
      unsigned int v94 = v603 - v91;
      if (v603 <= 0x40 && v94 <= 0x3F)
      {
        int v126 = -v91;
        goto LABEL_599;
      }
      goto LABEL_1267;
    case 169:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      llvm::KnownBits::umin((llvm::KnownBits *)&__src, (const llvm::KnownBits *)&v598, (uint64_t)&v595);
      goto LABEL_484;
    case 170:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      llvm::KnownBits::umax((llvm::KnownBits *)&__src, (const llvm::KnownBits *)&v598, (uint64_t)&v595);
      goto LABEL_484;
    case 171:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      if (v603 > 0x40)
      {
        unint64_t v500 = (void *)__src;
        unint64_t v501 = v598;
        unint64_t v502 = ((unint64_t)v603 + 63) >> 6;
        do
        {
          uint64_t v503 = (uint64_t)*v501++;
          *v500++ |= v503;
          --v502;
        }
        while (v502);
      }
      else
      {
        __src |= (unint64_t)v598;
      }
      if (v605 <= 0x40)
      {
        unint64_t v189 = v604 & v600;
        goto LABEL_456;
      }
      long long v504 = (void *)v604;
      long long v505 = (uint64_t *)v600;
      unint64_t v506 = ((unint64_t)v605 + 63) >> 6;
      do
      {
        uint64_t v507 = *v505++;
        *v504++ &= v507;
        --v506;
      }
      while (v506);
      goto LABEL_50;
    case 172:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      if (v603 > 0x40)
      {
        v532 = (void *)__src;
        v533 = v598;
        unint64_t v534 = ((unint64_t)v603 + 63) >> 6;
        do
        {
          uint64_t v535 = (uint64_t)*v533++;
          *v532++ &= v535;
          --v534;
        }
        while (v534);
      }
      else
      {
        __src &= (unint64_t)v598;
      }
      if (v605 > 0x40)
      {
        v536 = (void *)v604;
        v537 = (uint64_t *)v600;
        unint64_t v538 = ((unint64_t)v605 + 63) >> 6;
        do
        {
          uint64_t v539 = *v537++;
          *v536++ |= v539;
          --v538;
        }
        while (v538);
      }
      else
      {
        unint64_t v95 = v600;
LABEL_447:
        unint64_t v189 = v604 | v95;
LABEL_456:
        unint64_t v604 = v189;
      }
      goto LABEL_50;
    case 173:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      llvm::KnownBits::operator^=((uint64_t)&__src, &v598);
      goto LABEL_50;
    case 174:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      llvm::KnownBits::abs((uint64_t)&v598, 0, (uint64_t)&v595);
      goto LABEL_484;
    case 175:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      llvm::KnownBits::shl((llvm::KnownBits *)&__src, (int8x8_t *)&v598, (uint64_t)&v595);
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 >= 0x41 && v604)
      {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        unint64_t v604 = v596;
        unsigned int v605 = v597;
        unsigned int v597 = 0;
        if (DWORD2(v595) >= 0x41 && (void)v595) {
          MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
        }
      }
      else
      {
        unint64_t v604 = v596;
        unsigned int v605 = v597;
      }
      uint64_t v149 = sub_1CCFD82BC(v606, v607, (llvm::APInt *)a4);
      if (!v149) {
        goto LABEL_50;
      }
      if (*((_DWORD *)v149 + 2) >= 0x41u) {
        uint64_t v149 = *(llvm::APInt **)v149;
      }
      int v62 = *(llvm::APInt **)v149;
      if (!*(void *)v149) {
        goto LABEL_50;
      }
      if (v62 > 0x40)
      {
        uint64_t v499 = &__src;
        unsigned int v94 = 0;
        goto LABEL_1271;
      }
      unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v62;
      if (v603 <= 0x40) {
        goto LABEL_600;
      }
      *(void *)__src |= v63;
      goto LABEL_50;
    case 176:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      llvm::KnownBits::ashr((uint64_t)&__src, (int8x8_t *)&v598, v158, &v595);
      goto LABEL_662;
    case 177:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      llvm::KnownBits::lshr((llvm::KnownBits *)&__src, (int8x8_t *)&v598, (uint64_t)&v595);
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 >= 0x41 && v604)
      {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        unint64_t v604 = v596;
        unsigned int v605 = v597;
        unsigned int v597 = 0;
        if (DWORD2(v595) >= 0x41 && (void)v595) {
          MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
        }
      }
      else
      {
        unint64_t v604 = v596;
        unsigned int v605 = v597;
      }
      int v124 = sub_1CCFD82BC(v606, v607, (llvm::APInt *)a4);
      if (!v124) {
        goto LABEL_50;
      }
      if (*((_DWORD *)v124 + 2) >= 0x41u) {
        int v124 = *(llvm::APInt **)v124;
      }
      uint64_t v125 = *(llvm::APInt **)v124;
      if (!*(void *)v124) {
        goto LABEL_50;
      }
      LODWORD(v62) = v603;
      unsigned int v94 = v603 - v125;
      if (v603 > 0x40 || v94 > 0x3F) {
        goto LABEL_1267;
      }
      int v126 = -(int)v125;
      goto LABEL_599;
    case 180:
    case 181:
      uint64_t v96 = sub_1CCFD8140(*(void *)(*(void *)(v606 + 32) + 80), *(void *)(*(void *)(v606 + 32) + 88), (llvm::APInt *)a4, 0, 0);
      if (!v96) {
        goto LABEL_50;
      }
      unsigned int v97 = llvm::APInt::urem((uint64_t **)(*(void *)(v96 + 80) + 24), v13);
      if (!v97)
      {
        unint64_t v261 = (size_t *)(*(void *)(v606 + 32) + 40 * (v17 != 180));
        size_t v262 = *v261;
        size_t v263 = v261[1];
        uint64_t v264 = (a5 + 1);
        uint64_t v265 = a1;
        goto LABEL_615;
      }
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      if (v17 == 180)
      {
        if (v605 > 0x40)
        {
          llvm::APInt::shlSlowCase((llvm::APInt *)&v604, v97);
        }
        else
        {
          unint64_t v98 = v604 << v97;
          if (v605 == v97) {
            unint64_t v98 = 0;
          }
          if (v605) {
            unint64_t v99 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v605;
          }
          else {
            unint64_t v99 = 0;
          }
          unint64_t v604 = v99 & v98;
        }
        if (v603 > 0x40)
        {
          llvm::APInt::shlSlowCase((llvm::APInt *)&__src, v97);
        }
        else
        {
          unint64_t v100 = __src << v97;
          if (v603 == v97) {
            unint64_t v100 = 0;
          }
          if (v603) {
            unint64_t v101 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v603;
          }
          else {
            unint64_t v101 = 0;
          }
          unint64_t __src = v101 & v100;
        }
        unsigned int v102 = v13 - v97;
        if (v601 > 0x40)
        {
          llvm::APInt::lshrSlowCase((void **)&v600, v13 - v97);
        }
        else if (v601 == v102)
        {
          unint64_t v600 = 0;
        }
        else
        {
          v600 >>= v102;
        }
        if (v599 <= 0x40)
        {
          if (v599 != v102)
          {
            int8x8_t v329 = (int8x8_t)((unint64_t)v598 >> v102);
LABEL_810:
            v598 = (int8x8_t *)v329;
            goto LABEL_811;
          }
          goto LABEL_806;
        }
        unsigned int v330 = v13 - v97;
      }
      else
      {
        unsigned int v274 = v13 - v97;
        if (v605 > 0x40)
        {
          llvm::APInt::shlSlowCase((llvm::APInt *)&v604, v13 - v97);
        }
        else
        {
          unint64_t v275 = v604 << v274;
          if (v605 == v274) {
            unint64_t v275 = 0;
          }
          if (v605) {
            unint64_t v276 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v605;
          }
          else {
            unint64_t v276 = 0;
          }
          unint64_t v604 = v276 & v275;
        }
        if (v603 > 0x40)
        {
          llvm::APInt::shlSlowCase((llvm::APInt *)&__src, v13 - v97);
        }
        else
        {
          unint64_t v277 = __src << v274;
          if (v603 == v274) {
            unint64_t v277 = 0;
          }
          if (v603) {
            unint64_t v278 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v603;
          }
          else {
            unint64_t v278 = 0;
          }
          unint64_t __src = v278 & v277;
        }
        if (v601 > 0x40)
        {
          llvm::APInt::lshrSlowCase((void **)&v600, v97);
        }
        else if (v601 == v97)
        {
          unint64_t v600 = 0;
        }
        else
        {
          v600 >>= v97;
        }
        if (v599 <= 0x40)
        {
          if (v599 != v97)
          {
            int8x8_t v329 = (int8x8_t)((unint64_t)v598 >> v97);
            goto LABEL_810;
          }
LABEL_806:
          v598 = 0;
          goto LABEL_811;
        }
        unsigned int v330 = v97;
      }
      llvm::APInt::lshrSlowCase((void **)&v598, v330);
LABEL_811:
      if (v605 > 0x40)
      {
        unsigned int v331 = (void *)v604;
        BOOL v332 = (uint64_t *)v600;
        unint64_t v333 = ((unint64_t)v605 + 63) >> 6;
        do
        {
          uint64_t v334 = *v332++;
          *v331++ |= v334;
          --v333;
        }
        while (v333);
      }
      else
      {
        v604 |= v600;
      }
      if (v603 > 0x40)
      {
        uint64_t v335 = (void *)__src;
        long long v336 = v598;
        unint64_t v337 = ((unint64_t)v603 + 63) >> 6;
        do
        {
          uint64_t v338 = (uint64_t)*v336++;
          *v335++ |= v338;
          --v337;
        }
        while (v337);
        goto LABEL_50;
      }
      unint64_t v63 = (unint64_t)v598;
      goto LABEL_600;
    case 182:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      sub_1CD612D88((uint64_t)&v598, (uint64_t)&v595);
      goto LABEL_484;
    case 183:
    case 188:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      if (v597 > 0x40)
      {
        unsigned int v71 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v600);
      }
      else
      {
        unsigned int v70 = __clz(__rbit64(v596));
        if (v597 >= v70) {
          unsigned int v71 = v70;
        }
        else {
          unsigned int v71 = v597;
        }
      }
      int v126 = __clz(v71);
      unsigned int v94 = 32 - v126;
      LODWORD(v62) = v603;
      if (32 - v126 == v603) {
        goto LABEL_50;
      }
      if (v603 > 0x40) {
        goto LABEL_1267;
      }
      LOBYTE(v126) = 96 - v126 - v603;
      goto LABEL_599;
    case 184:
    case 189:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      if (v597 > 0x40)
      {
        int v190 = 0;
        int64_t v191 = ((unint64_t)v597 + 63) >> 6;
        do
        {
          BOOL v34 = v191-- < 1;
          if (v34) {
            break;
          }
          unint64_t v192 = *(void *)(v596 + 8 * v191);
          v190 += __clz(v192);
        }
        while (!v192);
        if ((v597 & 0x3F) != 0) {
          unsigned int v193 = v597 | 0xFFFFFFC0;
        }
        else {
          unsigned int v193 = 0;
        }
        unsigned int v72 = v190 + v193;
      }
      else
      {
        unsigned int v72 = v597 + __clz(v596) - 64;
      }
      int v126 = __clz(v72);
      unsigned int v94 = 32 - v126;
      LODWORD(v62) = v603;
      if (32 - v126 == v603) {
        goto LABEL_50;
      }
      if (v603 > 0x40) {
        goto LABEL_1267;
      }
      LOBYTE(v126) = v126 + v603;
      char v194 = 96;
      goto LABEL_598;
    case 185:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      if (v599 > 0x40)
      {
        __int32 v148 = 0;
        unint64_t v250 = ((unint64_t)v599 + 63) >> 6;
        unint64_t v251 = v598;
        do
        {
          int8x8_t v252 = *v251++;
          uint8x8_t v253 = (uint8x8_t)vcnt_s8(v252);
          v253.i16[0] = vaddlv_u8(v253);
          v148 += v253.i32[0];
          --v250;
        }
        while (v250);
      }
      else
      {
        uint8x8_t v147 = (uint8x8_t)vcnt_s8((int8x8_t)v598);
        v147.i16[0] = vaddlv_u8(v147);
        __int32 v148 = v147.i32[0];
      }
      int v126 = __clz(v599 - v148);
      unsigned int v94 = 32 - v126;
      LODWORD(v62) = v603;
      if (32 - v126 == v603) {
        goto LABEL_50;
      }
      if (v603 > 0x40) {
        goto LABEL_1267;
      }
      char v194 = 96 - v603;
LABEL_598:
      LOBYTE(v126) = v194 - v126;
      goto LABEL_599;
    case 186:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      sub_1CD612DE8((unsigned int *)&v598, (uint64_t)&v595);
      goto LABEL_484;
    case 190:
    case 191:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 80), *(void *)(*(void *)(v606 + 32) + 88), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v64 = DWORD2(v595);
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604)
      {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        unint64_t v65 = v596;
        unint64_t v604 = v596;
        unsigned int v66 = v597;
        unsigned int v605 = v597;
        unsigned int v64 = v603;
      }
      else
      {
        unint64_t v65 = v596;
        unint64_t v604 = v596;
        unsigned int v66 = v597;
        unsigned int v605 = v597;
      }
      if (v64 > 0x40)
      {
        int v508 = 0;
        int64_t v509 = ((unint64_t)v64 + 63) >> 6;
        do
        {
          BOOL v34 = v509-- < 1;
          if (v34) {
            break;
          }
          unint64_t v510 = *(void *)(__src + 8 * v509);
          v508 += __clz(v510);
        }
        while (!v510);
        unsigned int v511 = v64 | 0xFFFFFFC0;
        if ((v64 & 0x3F) == 0) {
          unsigned int v511 = 0;
        }
        if (v508 + v511 != v64) {
          goto LABEL_125;
        }
      }
      else if (__src)
      {
        goto LABEL_125;
      }
      if (v66 > 0x40)
      {
        int v528 = 0;
        int64_t v529 = ((unint64_t)v66 + 63) >> 6;
        do
        {
          BOOL v34 = v529-- < 1;
          if (v34) {
            break;
          }
          unint64_t v530 = *(void *)(v65 + 8 * v529);
          v528 += __clz(v530);
        }
        while (!v530);
        unsigned int v531 = v66 | 0xFFFFFFC0;
        if ((v66 & 0x3F) == 0) {
          unsigned int v531 = 0;
        }
        if (v528 + v531 == v66) {
          goto LABEL_50;
        }
      }
      else if (!v65)
      {
        goto LABEL_50;
      }
LABEL_125:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 40), *(void *)(*(void *)(v606 + 32) + 48), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      unsigned int v67 = v603;
      if (v603 > 0x40) {
        operator new[]();
      }
      unint64_t v68 = (unint64_t)v598 & __src;
      unsigned int v69 = v605;
      if (v605 > 0x40) {
        operator new[]();
      }
      goto LABEL_400;
    case 192:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 120), *(void *)(*(void *)(v606 + 32) + 128), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v166 = DWORD2(v595);
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604)
      {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        unint64_t v167 = v596;
        unint64_t v604 = v596;
        unsigned int v168 = v597;
        unsigned int v605 = v597;
        unsigned int v166 = v603;
      }
      else
      {
        unint64_t v167 = v596;
        unint64_t v604 = v596;
        unsigned int v168 = v597;
        unsigned int v605 = v597;
      }
      if (v166 > 0x40)
      {
        int v516 = 0;
        int64_t v517 = ((unint64_t)v166 + 63) >> 6;
        do
        {
          BOOL v34 = v517-- < 1;
          if (v34) {
            break;
          }
          unint64_t v518 = *(void *)(__src + 8 * v517);
          v516 += __clz(v518);
        }
        while (!v518);
        unsigned int v519 = v166 | 0xFFFFFFC0;
        if ((v166 & 0x3F) == 0) {
          unsigned int v519 = 0;
        }
        if (v516 + v519 != v166) {
          goto LABEL_396;
        }
      }
      else if (__src)
      {
        goto LABEL_396;
      }
      if (v168 > 0x40)
      {
        int v540 = 0;
        int64_t v541 = ((unint64_t)v168 + 63) >> 6;
        do
        {
          BOOL v34 = v541-- < 1;
          if (v34) {
            break;
          }
          unint64_t v542 = *(void *)(v167 + 8 * v541);
          v540 += __clz(v542);
        }
        while (!v542);
        unsigned int v543 = v168 | 0xFFFFFFC0;
        if ((v168 & 0x3F) == 0) {
          unsigned int v543 = 0;
        }
        if (v540 + v543 == v168) {
          goto LABEL_50;
        }
      }
      else if (!v167)
      {
        goto LABEL_50;
      }
LABEL_396:
      sub_1CCFCE670(&v595, a1, *(void *)(*(void *)(v606 + 32) + 80), *(void *)(*(void *)(v606 + 32) + 88), a4, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      unsigned int v67 = v603;
      if (v603 > 0x40) {
        operator new[]();
      }
      unint64_t v68 = (unint64_t)v598 & __src;
      unsigned int v69 = v605;
      if (v605 > 0x40) {
        operator new[]();
      }
LABEL_400:
      unint64_t v169 = v600 & v604;
      unint64_t __src = v68;
      goto LABEL_401;
    case 198:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      llvm::APInt::sext((uint64_t)&__src, v13, (uint64_t)&v595);
      llvm::APInt::sext((uint64_t)&v604, v13, (uint64_t)v590);
      unsigned int v195 = DWORD2(v595);
      unint64_t v196 = v595;
      unsigned int v197 = v590[1];
      unsigned int v198 = v590[0];
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v196;
      unsigned int v603 = v195;
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = (unint64_t)v198;
      unsigned int v605 = v197;
      goto LABEL_50;
    case 199:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CB9F87DC((uint64_t *)&__src, v13, (uint64_t)&v595);
LABEL_484:
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 < 0x41 || !v604) {
        goto LABEL_719;
      }
      MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      unsigned int v199 = DWORD2(v595);
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      unsigned int v597 = 0;
LABEL_829:
      if (v199 < 0x41) {
        goto LABEL_50;
      }
      unsigned int v39 = (void *)v595;
      goto LABEL_1179;
    case 200:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      if (v13 <= 0x40)
      {
        DWORD2(v595) = v13;
        if (v13)
        {
          unint64_t v180 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
          unint64_t v181 = v180 & __src;
        }
        else
        {
          unint64_t v181 = 0;
          unint64_t v180 = 0;
        }
        *(void *)&long long v595 = v181;
        unint64_t v157 = (void *)(v180 & v596);
        goto LABEL_433;
      }
      if (v603 != v13) {
        operator new[]();
      }
      sub_1CD0463BC((uint64_t)&v595, (uint64_t)&__src);
      if (v605 != v13) {
        operator new[]();
      }
      goto LABEL_1828;
    case 201:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v152 = v596;
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      if (v13 > 0x40)
      {
        if (v603 != v13) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v595, (uint64_t)&__src);
        if (v605 != v13) {
          operator new[]();
        }
LABEL_1828:
        sub_1CD0463BC((uint64_t)v590, (uint64_t)&v604);
        unsigned int v13 = v590[1];
        unint64_t v157 = v590[0];
LABEL_433:
        unsigned int v182 = DWORD2(v595);
        unint64_t v183 = v595;
        if (v603 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        unint64_t __src = v183;
        unsigned int v603 = v182;
        if (v605 >= 0x41 && v604) {
          MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        }
        unint64_t v604 = (unint64_t)v157;
        unsigned int v605 = v13;
        goto LABEL_50;
      }
      if (v603 >= 0x41) {
        uint64_t v153 = (unint64_t *)__src;
      }
      else {
        uint64_t v153 = &__src;
      }
      unint64_t v154 = *v153;
      DWORD2(v595) = v13;
      unint64_t v155 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
      unint64_t v156 = v155;
      if (!v13) {
        unint64_t v156 = 0;
      }
      *(void *)&long long v595 = v156 & v154;
      if (v597 >= 0x41)
      {
        unint64_t v152 = *(void *)v596;
        if (v13) {
          goto LABEL_375;
        }
      }
      else if (v13)
      {
LABEL_375:
        unint64_t v157 = (void *)(v155 & v152);
        goto LABEL_433;
      }
      unint64_t v155 = 0;
      goto LABEL_375;
    case 204:
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), a4, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      *(_OWORD *)v590 = *(_OWORD *)(*(void *)(*(void *)(v606 + 32) + 40) + 80);
      int v353 = sub_1CD3E12F4((unsigned __int8 *)v590, v351, v352);
      llvm::KnownBits::sextInReg((llvm::KnownBits *)&__src, v353, (unsigned int *)&v595);
LABEL_662:
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 < 0x41 || !v604) {
        goto LABEL_719;
      }
      MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      unsigned int v279 = DWORD2(v595);
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      unsigned int v597 = 0;
LABEL_1003:
      if (v279 < 0x41) {
        goto LABEL_50;
      }
      unsigned int v39 = (void *)v595;
      if (!(void)v595) {
        goto LABEL_50;
      }
      goto LABEL_107;
    case 205:
      v608[0] = *(_OWORD *)(*(void *)(**(void **)(v606 + 32) + 40)
                          + 16 * *(unsigned int *)(*(void *)(v606 + 32) + 8));
      unsigned int v354 = sub_1CD3DB440((llvm::EVT *)v608, v11);
      unsigned int v355 = a4[2];
      if (v355 < v354)
      {
        if (v354 > 0x40) {
          operator new[]();
        }
        unint64_t v489 = *(void *)a4;
        unsigned int v594 = v354;
        unint64_t v356 = v489 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v354);
      }
      else
      {
        unsigned int v594 = a4[2];
        if (v355 > 0x40) {
          operator new[]();
        }
        unint64_t v356 = *(void *)a4;
      }
      uint64_t v593 = v356;
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), &v593, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      if (v13 > 0x40) {
        goto LABEL_1218;
      }
      DWORD2(v595) = v13;
      if (v13)
      {
        unint64_t v357 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
        unint64_t v358 = v357 & __src;
      }
      else
      {
        unint64_t v358 = 0;
        unint64_t v357 = 0;
      }
      *(void *)&long long v595 = v358;
      unint64_t v359 = (void *)(v357 & v596);
      goto LABEL_1174;
    case 206:
      v608[0] = *(_OWORD *)(*(void *)(**(void **)(v606 + 32) + 40)
                          + 16 * *(unsigned int *)(*(void *)(v606 + 32) + 8));
      unsigned int v344 = sub_1CD3DB440((llvm::EVT *)v608, v11);
      unsigned int v345 = a4[2];
      if (v345 < v344)
      {
        if (v344 > 0x40) {
          operator new[]();
        }
        unint64_t v488 = *(void *)a4;
        unsigned int v594 = v344;
        unint64_t v346 = v488 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v344);
      }
      else
      {
        unsigned int v594 = a4[2];
        if (v345 > 0x40) {
          operator new[]();
        }
        unint64_t v346 = *(void *)a4;
      }
      uint64_t v593 = v346;
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), &v593, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      llvm::APInt::sext((uint64_t)&__src, v13, (uint64_t)&v595);
      llvm::APInt::sext((uint64_t)&v604, v13, (uint64_t)v590);
      unsigned int v347 = DWORD2(v595);
      unint64_t v348 = v595;
      unsigned int v349 = v590[1];
      uint64_t v350 = v590[0];
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v348;
      unsigned int v603 = v347;
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = (unint64_t)v350;
      unsigned int v605 = v349;
      goto LABEL_1177;
    case 207:
      *(_OWORD *)v590 = *(_OWORD *)(*(void *)(**(void **)(v606 + 32) + 40)
                                  + 16 * *(unsigned int *)(*(void *)(v606 + 32) + 8));
      unsigned int v408 = sub_1CD3DB440((llvm::EVT *)v590, v11);
      unsigned int v409 = a4[2];
      if (v409 < v408)
      {
        if (v408 > 0x40) {
          operator new[]();
        }
        unint64_t v490 = *(void *)a4;
        DWORD2(v608[0]) = v408;
        unint64_t v410 = v490 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v408);
      }
      else
      {
        DWORD2(v608[0]) = a4[2];
        if (v409 > 0x40) {
          operator new[]();
        }
        unint64_t v410 = *(void *)a4;
      }
      *(void *)&v608[0] = v410;
      sub_1CCFCE670(&v595, a1, **(void **)(v606 + 32), *(void *)(*(void *)(v606 + 32) + 8), v608, (a5 + 1));
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      if (v605 >= 0x41 && v604) {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
      }
      unint64_t v604 = v596;
      unsigned int v605 = v597;
      sub_1CB9F87DC((uint64_t *)&__src, v13, (uint64_t)&v595);
      if (v603 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v595;
      unsigned int v603 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v605 >= 0x41 && v604)
      {
        MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        unint64_t v604 = v596;
        unsigned int v605 = v597;
        unsigned int v597 = 0;
        if (DWORD2(v595) >= 0x41 && (void)v595) {
          MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
        }
      }
      else
      {
        unint64_t v604 = v596;
        unsigned int v605 = v597;
      }
      if (DWORD2(v608[0]) >= 0x41)
      {
        unsigned int v39 = *(void **)&v608[0];
        if (*(void *)&v608[0]) {
          goto LABEL_107;
        }
      }
      goto LABEL_50;
    case 211:
      long long v595 = *(_OWORD *)(*(void *)(*(void *)(v606 + 32) + 40) + 80);
      unsigned int v415 = sub_1CD3E12F4((unsigned __int8 *)&v595, (uint64_t)v11, v12);
      LODWORD(v590[1]) = v13;
      if (v13 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)v590);
      }
      v590[0] = 0;
      if (v13 != v415)
      {
        if (v415 > 0x3F) {
          llvm::APInt::setBitsSlowCase(v590, v415, v13);
        }
        else {
          v590[0] = (void *)((unint64_t)v590[0] | (0xFFFFFFFFFFFFFFFFLL >> (v415
        }
                                                                                 - v13) << v415));
      }
      if (v603 > 0x40)
      {
        uint64_t v433 = 0;
        unint64_t v434 = __src;
        uint64_t v435 = (char *)v590[0];
        unint64_t v436 = (((unint64_t)v603 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          *(void *)(v434 + v433) |= *(void *)&v435[v433];
          v433 += 8;
        }
        while (v436 != v433);
      }
      else
      {
        __src |= (unint64_t)v590[0];
      }
      goto LABEL_50;
    case 216:
      unint64_t v375 = *(size_t **)(v606 + 32);
      size_t v558 = *v375;
      size_t v560 = v375[1];
      v608[0] = *(_OWORD *)(*(void *)(*v375 + 40) + 16 * v560);
      unsigned int v570 = sub_1CD3E12F4((unsigned __int8 *)v608, (uint64_t)v11, v12);
      if (LOBYTE(v608[0]))
      {
        if ((LOBYTE(v608[0]) - 120) >= 0x20u
          && (LOBYTE(v608[0]) - 2) >= 6u
          && (LOBYTE(v608[0]) - 15) >= 0x3Cu
          && (LOBYTE(v608[0]) + 104) >= 0x13u
          && (LOBYTE(v608[0]) - 8) >= 7u
          && (LOBYTE(v608[0]) - 75) >= 0x2Du)
        {
          goto LABEL_50;
        }
      }
      else
      {
        if ((*(_DWORD *)(*((void *)&v608[0] + 1) + 8) & 0xFE) == 0x12) {
          unsigned int v441 = *(unsigned __int8 *)(**(void **)(*((void *)&v608[0] + 1) + 16) + 8);
        }
        else {
          unsigned int v441 = *(_DWORD *)(*((void *)&v608[0] + 1) + 8);
        }
        if (v441 != 13 && v441 > 6) {
          goto LABEL_50;
        }
      }
      if (v13 == v570)
      {
        uint64_t v264 = (a5 + 1);
        uint64_t v265 = a1;
        size_t v262 = v558;
        size_t v263 = v560;
LABEL_615:
        sub_1CCFCE670(&v595, v265, v262, v263, a4, v264);
LABEL_717:
        if (v603 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        unint64_t __src = v595;
        unsigned int v603 = DWORD2(v595);
        if (v605 >= 0x41 && v604) {
          MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
        }
LABEL_719:
        unint64_t v604 = v596;
        unsigned int v605 = v597;
        goto LABEL_50;
      }
      int v562 = *(unsigned __int8 *)(*(void *)(**(void **)(a1 + 40) + 40) + 272);
      int v566 = v13 / v570;
      if (!(v13 % v570))
      {
        int v442 = v566 * __dst;
        LODWORD(v590[1]) = v566 * __dst;
        if ((v566 * __dst) > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)v590);
        }
        v590[0] = 0;
        if (__dst)
        {
          unsigned int v443 = 0;
          unsigned int v444 = a4[2];
          do
          {
            unint64_t v445 = (unsigned int *)(*(void *)a4 + 8 * (v443 >> 6));
            if (v444 < 0x41) {
              unint64_t v445 = a4;
            }
            if ((*(void *)v445 >> v443)) {
              v590[0] = (void *)((unint64_t)v590[0] | (1 << (v443 * v566)));
            }
            ++v443;
          }
          while (__dst != v443);
        }
        if (v570 <= v13)
        {
          uint64_t v491 = 0;
          do
          {
            unsigned int v594 = v566 * __dst;
            uint64_t v492 = (uint64_t)v590[0] << v491;
            if (v491 == v442) {
              uint64_t v492 = 0;
            }
            if (v442) {
              unint64_t v493 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v442;
            }
            else {
              unint64_t v493 = 0;
            }
            uint64_t v593 = v493 & v492;
            sub_1CCFCE670(&v595, a1, v558, v560, &v593, (a5 + 1));
            if (v599 >= 0x41 && v598) {
              MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
            }
            v598 = (int8x8_t *)v595;
            unsigned int v599 = DWORD2(v595);
            DWORD2(v595) = 0;
            if (v601 >= 0x41 && v600) {
              MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
            }
            unint64_t v600 = v596;
            unsigned int v601 = v597;
            if (v594 >= 0x41 && v593) {
              MEMORY[0x1D25D9CB0](v593, 0x1000C8000313F17);
            }
            int v494 = v566 + ~v491;
            if (!v562) {
              int v494 = v491;
            }
            unsigned int v495 = v494 * v570;
            llvm::APInt::insertBits((void **)&__src, (const llvm::APInt *)&v598, v494 * v570);
            llvm::APInt::insertBits((void **)&v604, (const llvm::APInt *)&v600, v495);
            ++v491;
          }
          while (v566 != v491);
        }
      }
      unsigned int v556 = v570 / v13;
      if (v570 % v13) {
        goto LABEL_50;
      }
      llvm::APIntOps::ScaleBitMask((llvm::APIntOps *)a4, (const llvm::APInt *)(__dst / v556), (uint64_t)&v593);
      sub_1CCFCE670(&v595, a1, v558, v560, &v593, (a5 + 1));
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      v598 = (int8x8_t *)v595;
      unsigned int v599 = DWORD2(v595);
      DWORD2(v595) = 0;
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      unint64_t v600 = v596;
      unsigned int v601 = v597;
      unsigned int v446 = v603;
      if (v603 > 0x40)
      {
        memset((void *)__src, 255, (((unint64_t)v603 + 63) >> 3) & 0x3FFFFFF8);
        unsigned int v446 = v603;
        if (v603)
        {
LABEL_1107:
          unint64_t v447 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v446;
          if (v446 < 0x41)
          {
LABEL_1108:
            unsigned int v448 = &__src;
            goto LABEL_1109;
          }
          unsigned int v448 = (unint64_t *)(__src + 8 * ((((unint64_t)v446 + 63) >> 6) - 1));
LABEL_1109:
          *v448 &= v447;
          unsigned int v449 = v605;
          if (v605 > 0x40)
          {
            memset((void *)v604, 255, (((unint64_t)v605 + 63) >> 3) & 0x3FFFFFF8);
            unsigned int v449 = v605;
            if (v605)
            {
LABEL_1111:
              unint64_t v450 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v449;
              if (v449 >= 0x41) {
                uint64_t v14 = (unint64_t *)(v604 + 8 * ((((unint64_t)v449 + 63) >> 6) - 1));
              }
              goto LABEL_1113;
            }
          }
          else
          {
            unint64_t v604 = -1;
            if (v605) {
              goto LABEL_1111;
            }
          }
          unint64_t v450 = 0;
LABEL_1113:
          *v14 &= v450;
          if (!__dst)
          {
LABEL_1150:
            if (v594 >= 0x41)
            {
              unsigned int v39 = (void *)v593;
              if (v593) {
                goto LABEL_107;
              }
            }
            goto LABEL_50;
          }
          unsigned int v451 = 0;
          while (1)
          {
            if (a4[2] >= 0x41) {
              uint64_t v452 = (unsigned int *)(*(void *)a4 + 8 * (v451 >> 6));
            }
            else {
              uint64_t v452 = a4;
            }
            if (((*(void *)v452 >> v451) & 1) == 0) {
              goto LABEL_1129;
            }
            unsigned int v453 = __dst + ~v451;
            if (!v562) {
              unsigned int v453 = v451;
            }
            unsigned int v454 = v453 % v556 * v13;
            llvm::APInt::extractBits((uint64_t)&v598, v13, v454, (uint64_t)&v595);
            llvm::APInt::extractBits((uint64_t)&v600, v13, v454, (uint64_t)v590);
            unsigned int v567 = DWORD2(v595);
            size_t v571 = v595;
            if (v603 > 0x40) {
              operator new[]();
            }
            if (v605 > 0x40) {
              operator new[]();
            }
            __src &= v595;
            v604 &= (unint64_t)v590[0];
            if (LODWORD(v590[1]) >= 0x41 && v590[0]) {
              MEMORY[0x1D25D9CB0](v590[0], 0x1000C8000313F17);
            }
            if (v567 >= 0x41 && v571) {
              MEMORY[0x1D25D9CB0](v571, 0x1000C8000313F17);
            }
            if (v603 > 0x40)
            {
              int v455 = 0;
              int64_t v456 = ((unint64_t)v603 + 63) >> 6;
              do
              {
                BOOL v34 = v456-- < 1;
                if (v34) {
                  break;
                }
                unint64_t v457 = *(void *)(__src + 8 * v456);
                v455 += __clz(v457);
              }
              while (!v457);
              unsigned int v458 = v603 | 0xFFFFFFC0;
              if ((v603 & 0x3F) == 0) {
                unsigned int v458 = 0;
              }
              if (v455 + v458 != v603) {
                goto LABEL_1129;
              }
            }
            else if (__src)
            {
              goto LABEL_1129;
            }
            if (v605 > 0x40)
            {
              int v459 = 0;
              int64_t v460 = ((unint64_t)v605 + 63) >> 6;
              do
              {
                BOOL v34 = v460-- < 1;
                if (v34) {
                  break;
                }
                unint64_t v461 = *(void *)(v604 + 8 * v460);
                v459 += __clz(v461);
              }
              while (!v461);
              unsigned int v462 = v605 | 0xFFFFFFC0;
              if ((v605 & 0x3F) == 0) {
                unsigned int v462 = 0;
              }
              if (v459 + v462 == v605) {
                goto LABEL_1150;
              }
            }
            else if (!v604)
            {
              goto LABEL_1150;
            }
LABEL_1129:
            if (++v451 == __dst) {
              goto LABEL_1150;
            }
          }
        }
      }
      else
      {
        unint64_t __src = -1;
        if (v603) {
          goto LABEL_1107;
        }
      }
      unint64_t v447 = 0;
      goto LABEL_1108;
    default:
      uint64_t v59 = (v17 - 253);
      if (v59 > 0x34) {
        goto LABEL_48;
      }
      if (v17 != 253)
      {
        if (v59 == 40)
        {
          if (v607)
          {
LABEL_560:
            if (*v16) {
              BOOL v241 = *v16 - 15 < 0x9C;
            }
            else {
              BOOL v241 = (*(_DWORD *)(*((void *)v16 + 1) + 8) & 0xFE) == 18;
            }
            BOOL v246 = !v241;
            uint64_t v242 = 52;
            if (!v246) {
              uint64_t v242 = 60;
            }
            if (v10 < 2 || *(_DWORD *)(*(void *)(a1 + 24) + v242) != 1) {
              goto LABEL_50;
            }
LABEL_571:
            LODWORD(v62) = v603;
            if (v603 == 1) {
              goto LABEL_50;
            }
            if (v603 <= 0x40)
            {
              unint64_t v243 = __src | (2 * (0xFFFFFFFFFFFFFFFFLL >> (65 - v603)));
              goto LABEL_601;
            }
            uint64_t v499 = &__src;
            unsigned int v94 = 1;
LABEL_1271:
            llvm::APInt::setBitsSlowCase(v499, v94, v62);
            goto LABEL_50;
          }
        }
        else if (((1 << (v17 + 3)) & 0x1FFEA000000000) == 0)
        {
          goto LABEL_48;
        }
        long long v595 = *(_OWORD *)(v606 + 80);
        unsigned int v60 = sub_1CD3E12F4((unsigned __int8 *)&v595, (uint64_t)v11, v12);
        if (v607) {
          goto LABEL_50;
        }
        unsigned int v61 = v60;
        if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 984))(*(void *)(a1 + 24)) != 199) {
          goto LABEL_50;
        }
        LODWORD(v62) = v603;
        if (v603 == v61) {
          goto LABEL_50;
        }
        if (v61 <= 0x3F && v603 <= 0x40)
        {
          unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> (v61 - v603) << v61;
          goto LABEL_600;
        }
        uint64_t v499 = &__src;
        unsigned int v94 = v61;
        goto LABEL_1271;
      }
      unint64_t v200 = (llvm::Type **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 1688))(*(void *)(a1 + 24), v606);
      if (*(_WORD *)(v15 + 24) != 253 || (*(_WORD *)(v15 + 26) & 0xC00) != 0 || (uint64_t v203 = v200) == 0)
      {
        if (*(_WORD *)(v606 + 24) != 253 || (~*(unsigned __int16 *)(v606 + 26) & 0xC00) != 0 || v607)
        {
          uint64_t v244 = *(void *)(*(void *)(v15 + 96) + 72);
          if (v244 && (*(_WORD *)(v15 + 26) & 0xC00) == 0) {
            llvm::computeKnownBitsFromRangeMetadata(v244, (void **)&__src, v202);
          }
          goto LABEL_50;
        }
        long long v595 = *(_OWORD *)(v15 + 80);
        unsigned int v463 = sub_1CD3E12F4((unsigned __int8 *)&v595, v201, (BOOL)v202);
        unsigned int v94 = v463;
        LODWORD(v62) = v603;
        if (v603 == v463) {
          goto LABEL_50;
        }
        if (v463 > 0x3F || v603 > 0x40)
        {
LABEL_1267:
          uint64_t v499 = &__src;
          goto LABEL_1271;
        }
        LOBYTE(v126) = v463 - v603;
LABEL_599:
        unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> v126 << v94;
LABEL_600:
        unint64_t v243 = __src | v63;
LABEL_601:
        unint64_t __src = v243;
        goto LABEL_50;
      }
      unint64_t v204 = *v200;
      unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v200);
      if (v205 == 1) {
      if (PrimitiveSizeInBits != __dst * v13)
      }
        goto LABEL_50;
      if ((*((_DWORD *)v204 + 2) & 0xFE) == 0x12)
      {
        SplatValue = (llvm::Type **)llvm::Constant::getSplatValue((llvm::Constant *)v203, 0);
        if (SplatValue)
        {
          unint64_t v204 = *SplatValue;
          uint64_t v203 = SplatValue;
        }
      }
      if ((*((_DWORD *)v204 + 2) & 0xFE) == 0x12
        && llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)v204 + 2)) == v13)
      {
        unsigned int v208 = v605;
        if (v605 > 0x40)
        {
          memset((void *)v604, 255, (((unint64_t)v605 + 63) >> 3) & 0x3FFFFFF8);
          unsigned int v208 = v605;
          if (v605)
          {
LABEL_505:
            unint64_t v209 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v208;
            if (v208 >= 0x41) {
              uint64_t v14 = (unint64_t *)(v604 + 8 * ((((unint64_t)v208 + 63) >> 6) - 1));
            }
LABEL_507:
            *v14 &= v209;
            unsigned int v210 = v603;
            if (v603 > 0x40)
            {
              memset((void *)__src, 255, (((unint64_t)v603 + 63) >> 3) & 0x3FFFFFF8);
              unsigned int v210 = v603;
              if (v603)
              {
LABEL_509:
                unint64_t v211 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v210;
                if (v210 >= 0x41)
                {
                  uint64_t v212 = (unint64_t *)(__src + 8 * ((((unint64_t)v210 + 63) >> 6) - 1));
                  goto LABEL_511;
                }
LABEL_510:
                uint64_t v212 = &__src;
LABEL_511:
                *v212 &= v211;
                if (!__dst) {
                  goto LABEL_50;
                }
                uint64_t v213 = 0;
                while (1)
                {
                  if (a4[2] >= 0x41) {
                    uint64_t v214 = (unsigned int *)(*(void *)a4 + 8 * (v213 >> 6));
                  }
                  else {
                    uint64_t v214 = a4;
                  }
                  if ((*(void *)v214 >> (char)v213))
                  {
                    AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v203, v213);
                    if (!AggregateElement) {
                      goto LABEL_1204;
                    }
                    int v216 = *((unsigned __int8 *)AggregateElement + 16);
                    if (v216 == 17)
                    {
                      if ((_UNKNOWN *)AggregateElement[4] == &unk_1CFB2E344) {
                        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)(AggregateElement + 4), (llvm::APInt *)&v595);
                      }
                      else {
                        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)(AggregateElement + 4), (uint64_t)&v595);
                      }
                      if (v605 > 0x40)
                      {
                        uint64_t v217 = (void *)v604;
                        unsigned int v218 = (uint64_t *)v595;
                        unint64_t v219 = ((unint64_t)v605 + 63) >> 6;
                        do
                        {
                          uint64_t v220 = *v218++;
                          *v217++ &= v220;
                          --v219;
                        }
                        while (v219);
                      }
                      else
                      {
                        v604 &= v595;
                      }
                      unsigned int v221 = DWORD2(v595);
                      int v587 = DWORD2(v595);
                      if (DWORD2(v595) > 0x40) {
                        operator new[]();
                      }
                      uint64_t v222 = ~(void)v595;
                      unint64_t v223 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v595);
                      if (!DWORD2(v595)) {
                        unint64_t v223 = 0;
                      }
                      unint64_t v224 = v223 & v222;
                      unint64_t v586 = v223 & v222;
                      int v587 = 0;
                      if (v603 > 0x40)
                      {
                        unint64_t v225 = (void *)__src;
                        unint64_t v226 = ((unint64_t)v603 + 63) >> 6;
                        unsigned int v227 = (uint64_t *)v224;
                        do
                        {
                          uint64_t v228 = *v227++;
                          *v225++ &= v228;
                          --v226;
                        }
                        while (v226);
                      }
                      else
                      {
                        __src &= v224;
                      }
                      if (v221 >= 0x41 && v224) {
                        MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
                      }
                      if (DWORD2(v595) >= 0x41 && (void)v595) {
                        MEMORY[0x1D25D9CB0](v595, 0x1000C8000313F17);
                      }
                    }
                    else
                    {
                      if (v216 != 16)
                      {
LABEL_1204:
                        if (v605 > 0x40) {
                          bzero((void *)v604, (((unint64_t)v605 + 63) >> 3) & 0x3FFFFFF8);
                        }
                        else {
                          unint64_t v604 = 0;
                        }
                        if (v603 > 0x40) {
                          bzero((void *)__src, (((unint64_t)v603 + 63) >> 3) & 0x3FFFFFF8);
                        }
                        else {
                          unint64_t __src = 0;
                        }
                        goto LABEL_50;
                      }
                      if (v605 > 0x40)
                      {
                        int v229 = (void *)v604;
                        uint64_t v230 = (uint64_t *)AggregateElement[3];
                        unint64_t v231 = ((unint64_t)v605 + 63) >> 6;
                        do
                        {
                          uint64_t v232 = *v230++;
                          *v229++ &= v232;
                          --v231;
                        }
                        while (v231);
                      }
                      else
                      {
                        v604 &= AggregateElement[3];
                      }
                      unsigned int v233 = *((_DWORD *)AggregateElement + 8);
                      unsigned int v589 = v233;
                      if (v233 > 0x40) {
                        operator new[]();
                      }
                      uint64_t v234 = ~AggregateElement[3];
                      unint64_t v235 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v233;
                      if (!v233) {
                        unint64_t v235 = 0;
                      }
                      unint64_t v236 = v235 & v234;
                      unint64_t v588 = v235 & v234;
                      unsigned int v589 = 0;
                      if (v603 > 0x40)
                      {
                        uint64_t v237 = (void *)__src;
                        unint64_t v238 = ((unint64_t)v603 + 63) >> 6;
                        uint64_t v239 = (uint64_t *)v236;
                        do
                        {
                          uint64_t v240 = *v239++;
                          *v237++ &= v240;
                          --v238;
                        }
                        while (v238);
                      }
                      else
                      {
                        __src &= v236;
                      }
                    }
                  }
                  uint64_t v213 = (llvm::Type *)(v213 + 1);
                  if (v213 == __dst) {
                    goto LABEL_50;
                  }
                }
              }
            }
            else
            {
              unint64_t __src = -1;
              if (v603) {
                goto LABEL_509;
              }
            }
            unint64_t v211 = 0;
            goto LABEL_510;
          }
        }
        else
        {
          unint64_t v604 = -1;
          if (v605) {
            goto LABEL_505;
          }
        }
        unint64_t v209 = 0;
        goto LABEL_507;
      }
      unint64_t v340 = llvm::Type::getPrimitiveSizeInBits(v204);
      if (v339 == 1) {
      if (v13 == v340)
      }
      {
        int v341 = *((unsigned __int8 *)v203 + 16);
        if (v341 == 17)
        {
          uint64_t v472 = v203[4];
          uint64_t v471 = (llvm::detail::DoubleAPFloat *)(v203 + 4);
          if (v472 == (llvm::Type *)&unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v471, (llvm::APInt *)v590);
          }
          else {
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v471, (uint64_t)v590);
          }
          unsigned int v473 = v590[1];
          DWORD2(v595) = v590[1];
          if (LODWORD(v590[1]) > 0x40) {
            operator new[]();
          }
          if (LODWORD(v590[1])) {
            unint64_t v474 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v590[1]);
          }
          else {
            unint64_t v474 = 0;
          }
          unint64_t v475 = v474 & ~(uint64_t)v590[0];
          unsigned int v476 = v590[1];
          uint64_t v477 = v590[0];
          if (v603 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          unint64_t __src = v475;
          unsigned int v603 = v473;
          if (v605 >= 0x41 && v604) {
            MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
          }
          unint64_t v604 = (unint64_t)v477;
          unsigned int v605 = v476;
          goto LABEL_780;
        }
        if (v341 == 16)
        {
          unsigned int v67 = *((_DWORD *)v203 + 8);
          DWORD2(v595) = v67;
          if (v67 > 0x40) {
            operator new[]();
          }
          if (v67) {
            unint64_t v342 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v67;
          }
          else {
            unint64_t v342 = 0;
          }
          unint64_t v343 = v342 & ~(unint64_t)v203[3];
          unsigned int v69 = *((_DWORD *)v203 + 8);
          if (v69 > 0x40) {
            operator new[]();
          }
          unint64_t v169 = (unint64_t)v203[3];
          if (v603 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          unint64_t __src = v343;
LABEL_401:
          unsigned int v603 = v67;
          if (v605 >= 0x41 && v604) {
            MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
          }
          unint64_t v604 = v169;
          unsigned int v605 = v69;
        }
      }
LABEL_50:
      *(_DWORD *)(a6 + 8) = v603;
      *(void *)a6 = __src;
      *(_DWORD *)(a6 + 24) = v605;
      *(void *)(a6 + 16) = v604;
      unsigned int v603 = 0;
      unsigned int v605 = 0;
      if (v601 >= 0x41 && v600) {
        MEMORY[0x1D25D9CB0](v600, 0x1000C8000313F17);
      }
      if (v599 >= 0x41 && v598) {
        MEMORY[0x1D25D9CB0](v598, 0x1000C8000313F17);
      }
      break;
  }
LABEL_52:
  if (v605 >= 0x41 && v604) {
    MEMORY[0x1D25D9CB0](v604, 0x1000C8000313F17);
  }
LABEL_53:
  if (v603 >= 0x41)
  {
    if (__src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
}

BOOL sub_1CCFD7F7C(uint64_t *a1, uint64_t a2, uint64_t a3, int8x8_t *a4)
{
  uint64_t v6 = *a1;
  unsigned int v17 = 1;
  uint64_t v16 = 0;
  uint64_t v7 = a4[1].u32[0];
  if (v7 > 0x40)
  {
    __int32 v9 = 0;
    unint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    int v11 = (int8x8_t *)*a4;
    do
    {
      int8x8_t v12 = *v11++;
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      v9 += v13.i32[0];
      --v10;
    }
    while (v10);
  }
  else
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*a4);
    v8.i16[0] = vaddlv_u8(v8);
    __int32 v9 = v8.i32[0];
  }
  if (v9 == 1)
  {
    BOOL v14 = 1;
  }
  else if (sub_1CD7F1358(v6, a2, a3, a4, &v16, (*(_DWORD *)a1[1] + 1)))
  {
    if (a4[1].i32[0] >= 0x41u) {
      operator new[]();
    }
    BOOL v14 = (v16 & *(void *)a4) == 0;
  }
  else
  {
    BOOL v14 = 0;
  }
  if (v17 >= 0x41 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  return v14;
}

uint64_t sub_1CCFD8140(uint64_t a1, unsigned int a2, llvm::APInt *this, int a4, char a5)
{
  uint64_t v5 = a1;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned __int16 *)(a1 + 24);
  if (v6 == 11 || v6 == 35) {
    return v5;
  }
  if (!a1 || v6 != 146) {
    return 0;
  }
  unint64_t v26 = v28;
  uint64_t v27 = 0x600000000;
  v28[12] = 0;
  uint64_t v11 = sub_1CD804680(a1, this, (uint64_t)&v26);
  if (!v11) {
    goto LABEL_16;
  }
  uint64_t v14 = v11;
  int v15 = *(unsigned __int16 *)(v11 + 24);
  if (v15 != 35 && v15 != 11) {
    goto LABEL_16;
  }
  if (v27)
  {
    uint64_t v16 = v26;
    uint64_t v17 = 8 * v27;
    while (!*v16)
    {
      ++v16;
      v17 -= 8;
      if (!v17) {
        goto LABEL_21;
      }
    }
    if (!a4) {
      goto LABEL_16;
    }
  }
LABEL_21:
  unsigned int v19 = *(uint64_t **)(v11 + 40);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  long long v25 = *(_OWORD *)(*(void *)(v5 + 40) + 16 * a2);
  unsigned __int8 v22 = sub_1CD3DD468((unsigned __int8 *)&v25, v12, v13);
  if ((a5 & 1) == 0)
  {
    if (v21 != v22 || (v20 != v23 ? (BOOL v24 = v21 == 0) : (BOOL v24 = 0), v24))
    {
LABEL_16:
      uint64_t v5 = 0;
      int v18 = 1;
      goto LABEL_17;
    }
  }
  int v18 = 0;
  uint64_t v5 = v14;
LABEL_17:
  if (v26 != v28) {
    free(v26);
  }
  if (v18) {
    return 0;
  }
  return v5;
}

llvm::APInt *sub_1CCFD82BC(uint64_t a1, BOOL a2, llvm::APInt *a3)
{
  v27[0] = a1;
  v27[1] = a2;
  uint64_t result = sub_1CD7F2844(a1, a1, a2, a3);
  if (!result)
  {
    unsigned int v7 = sub_1CD7878C0((unsigned int *)v27, v5, v6);
    uint64_t result = 0;
    uint64_t v8 = *(void *)(*(void *)(v27[0] + 32) + 40);
    if (v8)
    {
      if (*(_WORD *)(v8 + 24) == 146)
      {
        if (*(_WORD *)(v8 + 56))
        {
          uint64_t v9 = 0;
          uint64_t result = 0;
          while (1)
          {
            unint64_t v10 = (llvm::APInt *)(*(void *)a3 + 8 * (v9 >> 6));
            if (*((_DWORD *)a3 + 2) < 0x41u) {
              unint64_t v10 = a3;
            }
            if ((*(void *)v10 >> v9))
            {
              uint64_t v11 = *(void *)(*(void *)(v8 + 32) + 40 * v9);
              int v12 = *(unsigned __int16 *)(v11 + 24);
              if (v12 != 35 && v12 != 11) {
                return 0;
              }
              uint64_t v14 = *(void *)(v11 + 80);
              int v15 = (void *)(v14 + 24);
              uint64_t v16 = *(unsigned int *)(v14 + 32);
              uint64_t v17 = v15;
              if (v16 >= 0x41)
              {
                int v18 = 0;
                int64_t v19 = (unint64_t)(v16 + 63) >> 6;
                do
                {
                  BOOL v23 = v19-- < 1;
                  if (v23) {
                    break;
                  }
                  unint64_t v20 = *(void *)(*v15 + 8 * v19);
                  v18 += __clz(v20);
                }
                while (!v20);
                int v21 = v16 | 0xFFFFFFC0;
                if ((v16 & 0x3F) == 0) {
                  int v21 = 0;
                }
                if ((v16 - v18 - v21) > 0x40) {
                  return 0;
                }
                uint64_t v17 = (void *)*v15;
              }
              if (*v17 >= (unint64_t)v7) {
                return 0;
              }
              if (!result) {
                goto LABEL_29;
              }
              uint64_t v22 = *((unsigned int *)result + 2);
              if (v22 > 0x40)
              {
                unint64_t v24 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
                while (v24)
                {
                  unint64_t v25 = *(void *)(*(void *)result - 8 + v24);
                  unint64_t v26 = *(void *)(*v15 - 8 + v24);
                  v24 -= 8;
                  BOOL v23 = v25 > v26;
                  if (v25 != v26) {
                    goto LABEL_27;
                  }
                }
                goto LABEL_30;
              }
              BOOL v23 = *(void *)result > *v15;
LABEL_27:
              if (v23) {
LABEL_29:
              }
                uint64_t result = (llvm::APInt *)v15;
            }
LABEL_30:
            if (++v9 == *(unsigned __int16 *)(v8 + 56)) {
              return result;
            }
          }
        }
        return 0;
      }
    }
  }
  return result;
}

llvm::APInt *sub_1CCFD8460(uint64_t a1, uint64_t a2, BOOL a3, llvm::APInt *a4)
{
  v28[0] = a2;
  v28[1] = a3;
  uint64_t result = sub_1CD7F2844(a1, a2, a3, a4);
  if (!result)
  {
    unsigned int v8 = sub_1CD7878C0((unsigned int *)v28, v6, v7);
    uint64_t result = 0;
    uint64_t v9 = *(void *)(*(void *)(v28[0] + 32) + 40);
    if (v9)
    {
      if (*(_WORD *)(v9 + 24) == 146)
      {
        if (*(_WORD *)(v9 + 56))
        {
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          while (1)
          {
            int v12 = (llvm::APInt *)(*(void *)a4 + 8 * (v10 >> 6));
            if (*((_DWORD *)a4 + 2) < 0x41u) {
              int v12 = a4;
            }
            if (((*(void *)v12 >> v10) & 1) == 0) {
              goto LABEL_27;
            }
            uint64_t v13 = *(void *)(*(void *)(v9 + 32) + 40 * v10);
            int v14 = *(unsigned __int16 *)(v13 + 24);
            if (v14 != 35 && v14 != 11) {
              return 0;
            }
            uint64_t v16 = *(void *)(v13 + 80);
            uint64_t result = (llvm::APInt *)(v16 + 24);
            uint64_t v17 = *(unsigned int *)(v16 + 32);
            int v18 = result;
            if (v17 >= 0x41)
            {
              int v19 = 0;
              int64_t v20 = (unint64_t)(v17 + 63) >> 6;
              do
              {
                if (v20-- < 1) {
                  break;
                }
                unint64_t v22 = *(void *)(*(void *)result + 8 * v20);
                v19 += __clz(v22);
              }
              while (!v22);
              int v23 = v17 | 0xFFFFFFC0;
              if ((v17 & 0x3F) == 0) {
                int v23 = 0;
              }
              if ((v17 - v19 - v23) > 0x40) {
                return 0;
              }
              int v18 = *(llvm::APInt **)result;
            }
            if (*(void *)v18 >= (unint64_t)v8) {
              return 0;
            }
            if (v11)
            {
              uint64_t v24 = v11[2];
              if (v24 > 0x40)
              {
                unint64_t v25 = ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8;
                while (v25)
                {
                  unint64_t v26 = *(void *)(*(void *)v11 - 8 + v25);
                  unint64_t v27 = *(void *)(*(void *)result - 8 + v25);
                  v25 -= 8;
                  if (v26 != v27)
                  {
                    if (v26 <= v27) {
                      goto LABEL_28;
                    }
                    break;
                  }
                }
LABEL_27:
                uint64_t result = (llvm::APInt *)v11;
                goto LABEL_28;
              }
              if (*(void *)v11 >= *(void *)result) {
                goto LABEL_27;
              }
            }
LABEL_28:
            ++v10;
            uint64_t v11 = (unsigned int *)result;
            if (v10 == *(unsigned __int16 *)(v9 + 56)) {
              return result;
            }
          }
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1CCFD8600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6 = *(unsigned __int16 *)(a2 + 24);
  if (v6 == 52) {
    return 1;
  }
  if (a6 > 5) {
    return 0;
  }
  if (v6 > 0x33) {
    goto LABEL_9;
  }
  if (((1 << v6) & 0x1800001800) != 0) {
    return 1;
  }
  if (v6 == 51) {
    return a5;
  }
LABEL_9:
  if (v6 == 146)
  {
    uint64_t v12 = *(unsigned __int16 *)(a2 + 56);
    if (!*(_WORD *)(a2 + 56)) {
      return 1;
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = a6 + 1;
    do
    {
      if (*(_DWORD *)(a4 + 8) >= 0x41u) {
        uint64_t v16 = (void *)(*(void *)a4 + 8 * (v14 >> 6));
      }
      else {
        uint64_t v16 = (void *)a4;
      }
      if ((*v16 >> v14))
      {
        uint64_t result = sub_1CD7F2F0C(a1, *(void *)(*(void *)(a2 + 32) + v13), *(void *)(*(void *)(a2 + 32) + v13 + 8), a5, v15);
        if (!result) {
          break;
        }
      }
      ++v14;
      v13 += 40;
      uint64_t result = 1;
    }
    while (v12 != v14);
  }
  else
  {
    if (v6 <= 0x185 && (v6 - 46) > 2) {
      return 0;
    }
    uint64_t v17 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 1680);
    return v17();
  }
  return result;
}

uint64_t sub_1CCFD878C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 > 0x40) {
    operator new[]();
  }
  unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  if (!v2) {
    unint64_t v3 = 0;
  }
  unint64_t v4 = v3 & ~*(void *)result;
  *(_DWORD *)(a2 + 8) = v2;
  *(void *)a2 = v4;
  return result;
}

BOOL sub_1CCFD8838(uint64_t a1, uint64_t a2, BOOL a3)
{
  long long v59 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
  unsigned int v6 = sub_1CD3E12F4((unsigned __int8 *)&v59, a2, a3);
  int v7 = *(unsigned __int16 *)(a2 + 24);
  switch(v7)
  {
    case 11:
      goto LABEL_4;
    case 175:
      uint64_t v9 = sub_1CCFD8CD8(**(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), 0, 0);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 80);
        uint64_t v11 = (void *)(v10 + 24);
        uint64_t v12 = *(unsigned int *)(v10 + 32);
        if (v12 < 0x41) {
          goto LABEL_17;
        }
        int v13 = 0;
        int64_t v14 = (unint64_t)(v12 + 63) >> 6;
        do
        {
          if (v14-- < 1) {
            break;
          }
          unint64_t v16 = *(void *)(*v11 + 8 * v14);
          v13 += __clz(v16);
        }
        while (!v16);
        int v17 = v12 | 0xFFFFFFC0;
        if ((v12 & 0x3F) == 0) {
          int v17 = 0;
        }
        if ((v12 - v13 - v17) <= 0x40)
        {
          uint64_t v11 = (void *)*v11;
LABEL_17:
          if (*v11 == 1) {
            return 1;
          }
        }
      }
      int v7 = *(unsigned __int16 *)(a2 + 24);
      break;
    case 35:
LABEL_4:
      llvm::APInt::zextOrTrunc((uint64_t *)(*(void *)(a2 + 80) + 24), v6, (uint64_t)&v55);
      if (v56 <= 0x40)
      {
        if (v55) {
          return (*(void *)&v55 & (*(void *)&v55 - 1)) == 0;
        }
        else {
          return 0;
        }
      }
      uint64_t v30 = 0;
      int v31 = 0;
      int8x8_t v32 = v55;
      do
      {
        uint8x8_t v33 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(void *)&v55 + v30));
        v33.i16[0] = vaddlv_u8(v33);
        v31 += v33.i32[0];
        v30 += 8;
      }
      while (((((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8) != v30);
      BOOL v8 = v31 == 1;
LABEL_43:
      MEMORY[0x1D25D9CB0](*(void *)&v32, 0x1000C8000313F17);
      return v8;
  }
  if (v7 == 177)
  {
    uint64_t v18 = sub_1CCFD8CD8(**(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), 0, 0);
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + 80);
      int64_t v20 = (unint64_t **)(v19 + 24);
      unsigned int v21 = *(_DWORD *)(v19 + 32);
      if (v21 > 0x40)
      {
        if ((((*v20)[(v21 - 1) >> 6] >> (v21 - 1)) & 1) != 0
          && llvm::APInt::countTrailingZerosSlowCase(v20) == v21 - 1)
        {
          return 1;
        }
      }
      else
      {
        BOOL v8 = 1;
        if (*v20 == (unint64_t *)(1 << (v21 - 1))) {
          return v8;
        }
      }
    }
  }
  int v22 = *(unsigned __int16 *)(a2 + 24);
  if (v22 == 146)
  {
    if (!*(_WORD *)(a2 + 56)) {
      return 1;
    }
    uint64_t v23 = *(void *)(a2 + 32);
    uint64_t v24 = v23 + 40 * *(unsigned __int16 *)(a2 + 56);
    while (1)
    {
      int v25 = *(unsigned __int16 *)(*(void *)v23 + 24);
      if (v25 != 35 && v25 != 11) {
        break;
      }
      llvm::APInt::zextOrTrunc((uint64_t *)(*(void *)(*(void *)v23 + 80) + 24), v6, (uint64_t)&v55);
      if (v56 > 0x40)
      {
        uint64_t v27 = 0;
        int v28 = 0;
        do
        {
          uint8x8_t v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(void *)&v55 + v27));
          v29.i16[0] = vaddlv_u8(v29);
          v28 += v29.i32[0];
          v27 += 8;
        }
        while (((((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8) != v27);
        MEMORY[0x1D25D9CB0](*(void *)&v55, 0x1000C8000313F17);
        if (v28 != 1) {
          break;
        }
      }
      else if (!*(void *)&v55 || (*(void *)&v55 & (*(void *)&v55 - 1)) != 0)
      {
        break;
      }
      v23 += 40;
      if (v23 == v24) {
        return 1;
      }
    }
    int v22 = *(unsigned __int16 *)(a2 + 24);
  }
  if (v22 == 156)
  {
    uint64_t v34 = **(void **)(a2 + 32);
    int v35 = *(unsigned __int16 *)(v34 + 24);
    if (v35 == 35 || v35 == 11)
    {
      llvm::APInt::zextOrTrunc((uint64_t *)(*(void *)(v34 + 80) + 24), v6, (uint64_t)&v55);
      if (v56 > 0x40)
      {
        uint64_t v37 = 0;
        int v38 = 0;
        do
        {
          uint8x8_t v39 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(void *)&v55 + v37));
          v39.i16[0] = vaddlv_u8(v39);
          v38 += v39.i32[0];
          v37 += 8;
        }
        while (((((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8) != v37);
        MEMORY[0x1D25D9CB0](*(void *)&v55, 0x1000C8000313F17);
        if (v38 != 1) {
          goto LABEL_60;
        }
      }
      else if (!*(void *)&v55 || (*(void *)&v55 & (*(void *)&v55 - 1)) != 0)
      {
        goto LABEL_60;
      }
      return 1;
    }
  }
LABEL_60:
  sub_1CD7F121C(a1, a2, a3, 0, (uint64_t)&v55);
  unsigned int v41 = v56;
  if (v56 > 0x40)
  {
    __int32 v43 = 0;
    unint64_t v44 = ((unint64_t)v56 + 63) >> 6;
    int v45 = (int8x8_t *)v55;
    do
    {
      int8x8_t v46 = *v45++;
      uint8x8_t v47 = (uint8x8_t)vcnt_s8(v46);
      v47.i16[0] = vaddlv_u8(v47);
      v43 += v47.i32[0];
      --v44;
    }
    while (v44);
  }
  else
  {
    uint8x8_t v42 = (uint8x8_t)vcnt_s8(v55);
    v42.i16[0] = vaddlv_u8(v42);
    __int32 v43 = v42.i32[0];
  }
  if (v56 - v43 == 1)
  {
    unsigned int v48 = v58;
    if (v58 > 0x40)
    {
      __int32 v50 = 0;
      unint64_t v51 = ((unint64_t)v58 + 63) >> 6;
      unsigned int v52 = v57;
      do
      {
        int8x8_t v53 = *v52++;
        uint8x8_t v54 = (uint8x8_t)vcnt_s8(v53);
        v54.i16[0] = vaddlv_u8(v54);
        v50 += v54.i32[0];
        --v51;
      }
      while (v51);
    }
    else
    {
      uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
      v49.i16[0] = vaddlv_u8(v49);
      __int32 v50 = v49.i32[0];
    }
    BOOL v8 = v50 == 1;
  }
  else
  {
    BOOL v8 = 0;
    unsigned int v48 = v58;
  }
  if (v48 >= 0x41 && v57)
  {
    MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
    unsigned int v41 = v56;
  }
  if (v41 >= 0x41)
  {
    int8x8_t v32 = v55;
    if (v55) {
      goto LABEL_43;
    }
  }
  return v8;
}

uint64_t sub_1CCFD8CD8(uint64_t a1, unsigned int a2, BOOL a3, char a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1;
  int v5 = *(unsigned __int16 *)(a1 + 24);
  if (v5 == 11 || v5 == 35) {
    return v4;
  }
  if (v5 == 156)
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v12 = *(void **)v10;
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v34 = v12;
    uint64_t v35 = v11;
    if ((_BYTE)v12)
    {
      unsigned __int8 EVT = sub_1CB8C2FBC((unsigned __int8 *)&v34);
      uint64_t v14 = 0;
    }
    else
    {
      unsigned __int8 EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v11 + 24), 0, a3);
    }
    uint64_t v4 = **(void **)(a1 + 32);
    int v15 = *(unsigned __int16 *)(v4 + 24);
    if (v15 == 35 || v15 == 11)
    {
      if (a4) {
        return v4;
      }
      int v17 = *(unsigned __int8 **)(v4 + 40);
      if (*v17 == EVT && (v14 == *((void *)v17 + 1) || EVT != 0)) {
        return v4;
      }
    }
  }
  if (!a1 || *(_WORD *)(a1 + 24) != 146) {
    return 0;
  }
  uint64_t v34 = v36;
  uint64_t v35 = 0x600000000;
  v36[12] = 0;
  uint64_t v20 = sub_1CD7EE8F8(a1, (uint64_t)&v34);
  if (!v20) {
    goto LABEL_32;
  }
  uint64_t v4 = v20;
  int v23 = *(unsigned __int16 *)(v20 + 24);
  if (v23 != 35 && v23 != 11) {
    goto LABEL_32;
  }
  if (v35)
  {
    uint64_t v24 = v34;
    uint64_t v25 = 8 * v35;
    while (!*v24)
    {
      ++v24;
      v25 -= 8;
      if (!v25) {
        goto LABEL_37;
      }
    }
    if (!a3) {
      goto LABEL_32;
    }
  }
LABEL_37:
  uint64_t v27 = *(uint64_t **)(v20 + 40);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  long long v33 = *(_OWORD *)(*(void *)(a1 + 40) + 16 * a2);
  unsigned __int8 v30 = sub_1CD3DD468((unsigned __int8 *)&v33, v21, v22);
  if ((a4 & 1) == 0)
  {
    if (v29 != v30 || (v28 != v31 ? (BOOL v32 = v29 == 0) : (BOOL v32 = 0), v32))
    {
LABEL_32:
      uint64_t v4 = 0;
      int v26 = 1;
      goto LABEL_33;
    }
  }
  int v26 = 0;
LABEL_33:
  if (v34 != v36) {
    free(v34);
  }
  if (v26) {
    return 0;
  }
  return v4;
}

unint64_t sub_1CCFD8ECC(uint64_t a1, uint64_t a2, BOOL a3, unsigned int *a4, uint64_t a5)
{
  BOOL v7 = a3;
  uint64_t v359 = a2;
  BOOL v360 = a3;
  long long v358 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
  uint64_t v10 = sub_1CD3E12F4((unsigned __int8 *)&v358, a2, a3);
  unsigned int v13 = *(unsigned __int16 *)(a2 + 24);
  BOOL v14 = v13 == 35 || v13 == 11;
  if (v14)
  {
    uint64_t v15 = *(void *)(a2 + 80);
    unint64_t v16 = (llvm::APInt *)(v15 + 24);
    uint64_t v17 = *(unsigned int *)(v15 + 32);
    unsigned int v18 = v17 - 1;
    if (v17 > 0x40)
    {
      if ((*(void *)(*(void *)v16 + 8 * (v18 >> 6)) >> v18))
      {
        return llvm::APInt::countLeadingOnesSlowCase(v16);
      }
      else
      {
        int v339 = 0;
        int64_t v340 = (unint64_t)(v17 + 63) >> 6;
        do
        {
          BOOL v28 = v340-- < 1;
          if (v28) {
            break;
          }
          unint64_t v341 = *(void *)(*(void *)v16 + 8 * v340);
          v339 += __clz(v341);
        }
        while (!v341);
        if ((v17 & 0x3F) != 0) {
          int v342 = v17 | 0xFFFFFFC0;
        }
        else {
          int v342 = 0;
        }
        return (v339 + v342);
      }
    }
    else
    {
      unint64_t v19 = *(void *)v16;
      if ((*(void *)v16 >> v18))
      {
        if (v17) {
          return __clz(~(v19 << -(char)v17));
        }
        else {
          return 0;
        }
      }
      else
      {
        return v17 + __clz(v19) - 64;
      }
    }
  }
  if (a5 > 5) {
    return 1;
  }
  uint64_t v22 = (uint64_t)v10;
  unint64_t v23 = a4[2];
  if (v23 > 0x40)
  {
    int v26 = 0;
    int64_t v27 = (v23 + 63) >> 6;
    uint64_t v24 = *(void *)a4;
    do
    {
      BOOL v28 = v27-- < 1;
      if (v28) {
        break;
      }
      unint64_t v29 = *(void *)(v24 + 8 * v27);
      v26 += __clz(v29);
    }
    while (!v29);
    int v30 = v23 | 0xFFFFFFC0;
    if ((v23 & 0x3F) == 0) {
      int v30 = 0;
    }
    uint64_t v25 = *(void *)a4;
    if (v26 + v30 == v23) {
      return 1;
    }
  }
  else
  {
    uint64_t v24 = *(void *)a4;
    if (!*(void *)a4) {
      return 1;
    }
    uint64_t v25 = *(void *)a4;
  }
  if ((_BYTE)v358)
  {
    if (v358 - 120 < 0x33) {
      return 1;
    }
  }
  else if (*(unsigned char *)(*((void *)&v358 + 1) + 8) == 19)
  {
    return 1;
  }
  int v31 = 1;
  if (*(unsigned __int16 *)(a2 + 24) <= 0x89u)
  {
    switch(*(_WORD *)(a2 + 24))
    {
      case '5':
        int v245 = sub_1CD7F2D8C(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), (a5 + 1));
        signed int v247 = sub_1CD3E3904((unsigned int *)&v359);
        if (v246 == 1) {
        unint64_t v249 = sub_1CD3E3904(*(unsigned int **)(v359 + 32));
        }
        if (v248 == 1) {
        uint64_t v250 = *(void *)(*(void *)(*(void *)(v359 + 32) + 40) + 80);
        }
        unint64_t v251 = (void *)(v250 + 24);
        if (*(_DWORD *)(v250 + 32) >= 0x41u) {
          unint64_t v251 = (void *)*v251;
        }
        int v252 = v247 + v247 * (*(_DWORD *)v251 - (unint64_t)v249 / v247) + v245;
        if (v252 >= v247) {
          int v252 = v247;
        }
        return v252 & ~(v252 >> 31);
      case '6':
      case '7':
      case ';':
      case '<':
      case '>':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
        goto LABEL_287;
      case '8':
      case 'D':
        uint64_t v48 = (a5 + 1);
        uint64_t v49 = sub_1CCFD8ECC(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a4, v48);
        if (v49 == 1) {
          return 1;
        }
        uint64_t v50 = v49;
        uint64_t v51 = sub_1CCFD8140(*(void *)(*(void *)(v359 + 32) + 40), *(void *)(*(void *)(v359 + 32) + 48), (llvm::APInt *)a4, 0, 0);
        if (!v51) {
          goto LABEL_230;
        }
        uint64_t v52 = *(void *)(v51 + 80);
        unsigned int v53 = *(_DWORD *)(v52 + 32);
        if (!v53) {
          goto LABEL_221;
        }
        uint8x8_t v54 = (llvm::APInt *)(v52 + 24);
        if (v53 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase(v54) != v53) {
            goto LABEL_230;
          }
        }
        else if (*(void *)v54 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v53)
        {
          goto LABEL_230;
        }
LABEL_221:
        sub_1CCFCE670(a1, **(void **)(v359 + 32), *(void *)(*(void *)(v359 + 32) + 8), a4, v48, (uint64_t)__src);
        unsigned int v174 = __src[1];
        if (LODWORD(__src[1]) > 0x40) {
          operator new[]();
        }
        if (LODWORD(__src[1]))
        {
          BOOL v175 = 0;
          uint64_t v20 = v22;
          if ((((unint64_t)__src[0] | 1) & (0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))) != 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))
          {
            BOOL v175 = (((unint64_t)__src[0] >> (LOBYTE(__src[1]) - 1)) & 1) == 0;
            uint64_t v20 = v50;
          }
        }
        else
        {
          BOOL v175 = 0;
          uint64_t v20 = v22;
        }
        if (v355 >= 0x41 && v354) {
          MEMORY[0x1D25D9CB0](v354, 0x1000C8000313F17);
        }
        if (v174 >= 0x41 && __src[0]) {
          MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
        }
        if (!v175) {
          return v20;
        }
LABEL_230:
        unsigned int v176 = sub_1CCFD8ECC(a1, *(void *)(*(void *)(v359 + 32) + 40), *(void *)(*(void *)(v359 + 32) + 48), a4, v48);
        if (v176 == 1) {
          return 1;
        }
        if (v176 >= v50) {
          unsigned int v177 = v50;
        }
        else {
          unsigned int v177 = v176;
        }
        return v177 - 1;
      case '9':
        uint64_t v92 = (a5 + 1);
        uint64_t v93 = sub_1CCFD8ECC(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), a4, v92);
        if (v93 == 1) {
          return 1;
        }
        uint64_t v94 = v93;
        uint64_t v95 = sub_1CCFD8140(**(void **)(v359 + 32), *(void *)(*(void *)(v359 + 32) + 8), (llvm::APInt *)a4, 0, 0);
        if (!v95) {
          goto LABEL_386;
        }
        uint64_t v96 = *(void *)(v95 + 80);
        uint64_t v97 = *(unsigned int *)(v96 + 32);
        if (v97 > 0x40)
        {
          int v182 = 0;
          int64_t v183 = (unint64_t)(v97 + 63) >> 6;
          do
          {
            BOOL v28 = v183-- < 1;
            if (v28) {
              break;
            }
            unint64_t v184 = *(void *)(*(void *)(v96 + 24) + 8 * v183);
            v182 += __clz(v184);
          }
          while (!v184);
          int v185 = v97 | 0xFFFFFFC0;
          if ((v97 & 0x3F) == 0) {
            int v185 = 0;
          }
          if (v182 + v185 != v97) {
            goto LABEL_386;
          }
        }
        else if (*(void *)(v96 + 24))
        {
          goto LABEL_386;
        }
        sub_1CCFCE670(a1, *(void *)(*(void *)(v359 + 32) + 40), *(void *)(*(void *)(v359 + 32) + 48), a4, v92, (uint64_t)__src);
        unsigned int v186 = __src[1];
        if (LODWORD(__src[1]) > 0x40) {
          operator new[]();
        }
        if (LODWORD(__src[1]))
        {
          BOOL v187 = 0;
          uint64_t v20 = v22;
          if ((((unint64_t)__src[0] | 1) & (0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))) != 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))
          {
            BOOL v187 = (((unint64_t)__src[0] >> (LOBYTE(__src[1]) - 1)) & 1) == 0;
            uint64_t v20 = v94;
          }
        }
        else
        {
          BOOL v187 = 0;
          uint64_t v20 = v22;
        }
        if (v355 >= 0x41 && v354) {
          MEMORY[0x1D25D9CB0](v354, 0x1000C8000313F17);
        }
        if (v186 >= 0x41 && __src[0]) {
          MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
        }
        if (!v187) {
          return v20;
        }
LABEL_386:
        unsigned int v244 = sub_1CCFD8ECC(a1, **(void **)(v359 + 32), *(void *)(*(void *)(v359 + 32) + 8), a4, v92);
        if (v244 == 1) {
          return 1;
        }
        if (v94 >= v244) {
          unsigned int v177 = v244;
        }
        else {
          unsigned int v177 = v94;
        }
        return v177 - 1;
      case ':':
        int v253 = sub_1CD7F2D8C(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), (a5 + 1));
        if (v253 == 1) {
          goto LABEL_286;
        }
        int v254 = v253;
        int v255 = sub_1CD7F2D8C(a1, *(void *)(*(void *)(v359 + 32) + 40), *(void *)(*(void *)(v359 + 32) + 48), (a5 + 1));
        int v31 = 1;
        if (v255 == 1) {
          goto LABEL_287;
        }
        unsigned int v256 = 2 * v22 - (v254 + v255) + 2;
        BOOL v257 = v22 >= v256;
        int v258 = v22 - v256;
        if (v257) {
          return (v258 + 1);
        }
        else {
          return 1;
        }
      case '=':
        unsigned int v86 = *(uint64_t **)(a2 + 32);
        uint64_t v87 = *v86;
        uint64_t v88 = v86[1];
        uint64_t v89 = (a5 + 1);
        uint64_t v90 = a1;
        return sub_1CCFD8ECC(v90, v87, v88, a4, v89);
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
        if (!v7) {
          goto LABEL_288;
        }
        if ((_BYTE)v358) {
          BOOL v32 = v358 - 15 < 0x9C;
        }
        else {
          BOOL v32 = (*(_DWORD *)(*((void *)&v358 + 1) + 8) & 0xFE) == 18;
        }
        BOOL v14 = !v32;
        uint64_t v55 = 52;
        if (!v14) {
          uint64_t v55 = 60;
        }
        if (*(_DWORD *)(*(void *)(a1 + 24) + v55) != 2) {
          goto LABEL_286;
        }
        return v22;
      default:
        if (v13 == 3)
        {
          *(_OWORD *)unint64_t __src = *(_OWORD *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
          if (LOBYTE(__src[0])) {
            unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)__src);
          }
          else {
            unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
          }
          unsigned int v134 = ExtendedSizeInBits;
          if (v99 == 1) {
          int v135 = v22 - v134;
          }
          return (v135 + 1);
        }
        if (v13 != 4) {
          goto LABEL_287;
        }
        *(_OWORD *)unint64_t __src = *(_OWORD *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
        if (LOBYTE(__src[0])) {
          unsigned int v46 = sub_1CB87E200((unsigned __int8 *)__src);
        }
        else {
          unsigned int v46 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
        }
        unsigned int v133 = v46;
        if (v47 == 1) {
        uint64_t v20 = v22 - v133;
        }
        break;
    }
    return v20;
  }
  switch(*(_WORD *)(a2 + 24))
  {
    case 0xA7:
    case 0xA8:
      uint64_t v62 = sub_1CCFD8140(*(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), (llvm::APInt *)a4, 0, 0);
      if (!v62) {
        goto LABEL_534;
      }
      uint64_t v63 = **(void **)(v359 + 32);
      int v64 = v13 == 168 ? 167 : 168;
      if (v64 != *(unsigned __int16 *)(v63 + 24)) {
        goto LABEL_534;
      }
      uint64_t v65 = v62;
      uint64_t v66 = sub_1CCFD8140(*(void *)(*(void *)(v63 + 32) + 40), *(void *)(*(void *)(v63 + 32) + 48), (llvm::APInt *)a4, 0, 0);
      if (!v66) {
        goto LABEL_534;
      }
      if (v13 == 168) {
        uint64_t v67 = v66;
      }
      else {
        uint64_t v67 = v65;
      }
      if (v13 == 168) {
        uint64_t v68 = v65;
      }
      else {
        uint64_t v68 = v66;
      }
      uint64_t v69 = *(void *)(v68 + 80);
      unsigned int v70 = (llvm::APInt *)(v69 + 24);
      uint64_t v71 = *(void *)(v67 + 80);
      unsigned int v72 = (unint64_t *)(v71 + 24);
      uint64_t v73 = *(unsigned int *)(v69 + 32);
      if (v73 <= 0x40)
      {
        unint64_t v74 = *(void *)v70;
        unint64_t v75 = *v72;
        if ((uint64_t)(*(void *)v70 << -(char)v73) >> -(char)v73 <= (uint64_t)(*v72 << -(char)v73) >> -(char)v73)
        {
          if ((v74 >> (v73 - 1)))
          {
            if (v73) {
              unsigned int v76 = __clz(~(v74 << -(char)v73));
            }
            else {
              unsigned int v76 = 0;
            }
          }
          else
          {
            unsigned int v76 = v73 + __clz(v74) - 64;
          }
          goto LABEL_92;
        }
        goto LABEL_534;
      }
      unint64_t v321 = *(void *)v70;
      uint64_t v322 = (v73 - 1) >> 6;
      uint64_t v323 = 1 << (v73 - 1);
      unsigned int v324 = *(_DWORD *)(v71 + 32);
      unsigned int v325 = v324 - 1;
      unint64_t v75 = *(void *)(v71 + 24);
      if (v324 >= 0x41) {
        unsigned int v326 = (void *)(v75 + 8 * (v325 >> 6));
      }
      else {
        unsigned int v326 = (void *)(v71 + 24);
      }
      if (((*(void *)(*(void *)v70 + 8 * v322) & v323) != 0) == ((*v326 >> v325) & 1))
      {
        unint64_t v331 = ((unint64_t)(v73 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v331) {
            goto LABEL_549;
          }
          unint64_t v332 = *(void *)(v321 - 8 + v331);
          unint64_t v333 = *(void *)(v75 - 8 + v331);
          v331 -= 8;
        }
        while (v332 == v333);
        if (v332 > v333) {
          goto LABEL_534;
        }
LABEL_549:
        if ((*(void *)(v321 + 8 * v322) & v323) != 0)
        {
          unsigned int v76 = llvm::APInt::countLeadingOnesSlowCase(v70);
        }
        else
        {
          int v334 = 0;
          int64_t v335 = (unint64_t)(v73 + 63) >> 6;
          do
          {
            BOOL v28 = v335-- < 1;
            if (v28) {
              break;
            }
            unint64_t v336 = *(void *)(v321 + 8 * v335);
            v334 += __clz(v336);
          }
          while (!v336);
          if ((v73 & 0x3F) != 0) {
            int v337 = v73 | 0xFFFFFFC0;
          }
          else {
            int v337 = 0;
          }
          unsigned int v76 = v334 + v337;
        }
LABEL_92:
        uint64_t v77 = *(unsigned int *)(v71 + 32);
        unsigned int v78 = v77 - 1;
        if (v77 > 0x40)
        {
          if ((*(void *)(v75 + 8 * (v78 >> 6)) >> v78))
          {
            unsigned int v83 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)(v71 + 24));
          }
          else
          {
            int v343 = 0;
            int64_t v344 = (unint64_t)(v77 + 63) >> 6;
            do
            {
              BOOL v28 = v344-- < 1;
              if (v28) {
                break;
              }
              unint64_t v345 = *(void *)(v75 + 8 * v344);
              v343 += __clz(v345);
            }
            while (!v345);
            if ((v77 & 0x3F) != 0) {
              int v346 = v77 | 0xFFFFFFC0;
            }
            else {
              int v346 = 0;
            }
            unsigned int v83 = v343 + v346;
          }
        }
        else
        {
          unint64_t v79 = v75 >> v78;
          unsigned int v80 = v77 + __clz(v75) - 64;
          unsigned int v81 = __clz(~(v75 << -(char)v77));
          if (v77) {
            unsigned int v82 = v81;
          }
          else {
            unsigned int v82 = 0;
          }
          if (v79) {
            unsigned int v83 = v82;
          }
          else {
            unsigned int v83 = v80;
          }
        }
        if (v83 >= v76) {
          return v76;
        }
        else {
          return v83;
        }
      }
      if ((*(void *)(*(void *)v70 + 8 * v322) & v323) != 0) {
        goto LABEL_549;
      }
LABEL_534:
      unint64_t v84 = *(void **)(v359 + 32);
LABEL_535:
      uint64_t v56 = (a5 + 1);
      unsigned int v327 = sub_1CCFD8ECC(a1, *v84, v84[1], a4, v56);
      if (v327 == 1) {
        return 1;
      }
      unsigned int v58 = v327;
      uint64_t v328 = *(void *)(v359 + 32);
      uint64_t v60 = *(void *)(v328 + 40);
      uint64_t v61 = *(void *)(v328 + 48);
LABEL_537:
      unsigned int v329 = sub_1CCFD8ECC(a1, v60, v61, a4, v56);
      if (v329 >= v58) {
        return v58;
      }
      else {
        return v329;
      }
    case 0xA9:
    case 0xAA:
      unint64_t v84 = *(void **)(a2 + 32);
      goto LABEL_535;
    case 0xAB:
    case 0xAC:
    case 0xAD:
      unsigned int v33 = sub_1CCFD8ECC(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a4, (a5 + 1));
      if (v33 == 1) {
        goto LABEL_286;
      }
      unsigned int v34 = v33;
      unsigned int v35 = sub_1CCFD8ECC(a1, *(void *)(*(void *)(v359 + 32) + 40), *(void *)(*(void *)(v359 + 32) + 48), a4, (a5 + 1));
      if (v35 >= v34) {
        int v31 = v34;
      }
      else {
        int v31 = v35;
      }
      goto LABEL_287;
    case 0xAE:
    case 0xB1:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC7:
    case 0xC8:
    case 0xCA:
    case 0xCB:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD7:
      goto LABEL_287;
    case 0xAF:
      unint64_t v104 = sub_1CCFD8460((uint64_t)v10, a2, v7, (llvm::APInt *)a4);
      if (!v104) {
        goto LABEL_286;
      }
      uint64_t v105 = v104;
      unsigned int v106 = sub_1CCFD8ECC(a1, **(void **)(v359 + 32), *(void *)(*(void *)(v359 + 32) + 8), a4, (a5 + 1));
      uint64_t v107 = *((unsigned int *)v105 + 2);
      if (v107 >= 0x41)
      {
        int v178 = 0;
        int64_t v179 = (unint64_t)(v107 + 63) >> 6;
        do
        {
          BOOL v28 = v179-- < 1;
          if (v28) {
            break;
          }
          unint64_t v180 = *(void *)(*(void *)v105 + 8 * v179);
          v178 += __clz(v180);
        }
        while (!v180);
        int v181 = v107 | 0xFFFFFFC0;
        if ((v107 & 0x3F) == 0) {
          int v181 = 0;
        }
        if ((v107 - v178 - v181) >= 0x41) {
          goto LABEL_286;
        }
        uint64_t v108 = **(void ***)v105;
      }
      else
      {
        uint64_t v108 = *(void **)v105;
      }
      if ((unint64_t)v108 >= v106) {
        goto LABEL_286;
      }
      return v106 - v108;
    case 0xB0:
      uint64_t v20 = sub_1CCFD8ECC(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a4, (a5 + 1));
      uint64_t v109 = sub_1CCFD82BC(v359, v360, (llvm::APInt *)a4);
      if (v109)
      {
        if (*((_DWORD *)v109 + 2) >= 0x41u) {
          uint64_t v109 = *(llvm::APInt **)v109;
        }
        if (v22 >= *(void *)v109 + (unint64_t)v20) {
          return *(void *)v109 + v20;
        }
        else {
          return v22;
        }
      }
      return v20;
    case 0xB2:
    case 0xB3:
      unsigned int v85 = sub_1CCFD8ECC(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a4, (a5 + 1));
      if (v85 == v22) {
        return v22;
      }
      unsigned int v110 = v85;
      uint64_t v111 = sub_1CCFD8140(*(void *)(*(void *)(v359 + 32) + 40), *(void *)(*(void *)(v359 + 32) + 48), (llvm::APInt *)a4, 0, 0);
      if (!v111) {
        goto LABEL_286;
      }
      int v112 = llvm::APInt::urem((uint64_t **)(*(void *)(v111 + 80) + 24), v22);
      if (v13 == 179) {
        int v112 = ((int)v22 - v112) % v22;
      }
      if (v110 <= v112 + 1) {
        goto LABEL_286;
      }
      return v110 - v112;
    case 0xBE:
    case 0xBF:
      uint64_t v56 = (a5 + 1);
      unsigned int v57 = sub_1CCFD8ECC(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), a4, v56);
      if (v57 == 1) {
        return 1;
      }
      unsigned int v58 = v57;
      uint64_t v59 = *(void *)(v359 + 32);
      uint64_t v60 = *(void *)(v59 + 80);
      uint64_t v61 = *(void *)(v59 + 88);
      goto LABEL_537;
    case 0xC0:
      uint64_t v56 = (a5 + 1);
      unsigned int v102 = sub_1CCFD8ECC(a1, *(void *)(*(void *)(a2 + 32) + 80), *(void *)(*(void *)(a2 + 32) + 88), a4, v56);
      if (v102 == 1) {
        return 1;
      }
      unsigned int v58 = v102;
      uint64_t v103 = *(void *)(v359 + 32);
      uint64_t v60 = *(void *)(v103 + 120);
      uint64_t v61 = *(void *)(v103 + 128);
      goto LABEL_537;
    case 0xC1:
LABEL_278:
      BOOL v194 = sub_1CD407020(a2);
      unsigned int v195 = (unsigned int *)(*(void *)(v359 + 32) + 40 * v194);
      unint64_t v196 = (void *)(*(void *)(*(void *)v195 + 40) + 16 * v195[2]);
      if (sub_1CD7879C8(*(unsigned int **)(a1 + 24), *v196, v196[1]) != 2) {
        goto LABEL_286;
      }
      return v22;
    case 0xC6:
      unsigned int v278 = v10 - sub_1CD7878C0(*(unsigned int **)(a2 + 32), (uint64_t)v11, v12);
      return sub_1CCFD8ECC(a1, **(void **)(v359 + 32), *(void *)(*(void *)(v359 + 32) + 8), a4, (a5 + 1))+ v278;
    case 0xC9:
      unsigned int v264 = sub_1CD7878C0(*(unsigned int **)(a2 + 32), (uint64_t)v11, v12);
      unsigned int v265 = sub_1CD7F2D8C(a1, **(void **)(v359 + 32), *(void *)(*(void *)(v359 + 32) + 8), (a5 + 1));
      unsigned int v266 = v264 - v22;
      uint64_t v20 = v265 - (v264 - v22);
      if (v265 <= v266) {
        goto LABEL_286;
      }
      return v20;
    case 0xCC:
      *(_OWORD *)unint64_t __src = *(_OWORD *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
      unsigned int v276 = v10 - sub_1CD3E12F4((unsigned __int8 *)__src, (uint64_t)v11, v12);
      unsigned int v277 = sub_1CCFD8ECC(a1, **(void **)(v359 + 32), *(void *)(*(void *)(v359 + 32) + 8), a4, (a5 + 1));
      if (v276 + 1 > v277) {
        return v276 + 1;
      }
      else {
        return v277;
      }
    case 0xCE:
      unsigned int v267 = *(void **)(a2 + 32);
      uint64_t v268 = *v267;
      uint64_t v269 = v267[1];
      *(_OWORD *)unint64_t __src = *(_OWORD *)(*(void *)(*v267 + 40) + 16 * v269);
      unsigned int v270 = sub_1CD3DB440((llvm::EVT *)__src, v11);
      unsigned int v273 = a4[2];
      if (v273 < v270)
      {
        if (v270 > 0x40) {
          operator new[]();
        }
        uint64_t v330 = *(void *)a4;
        unsigned int v357 = v270;
        unint64_t v274 = v330 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v270);
      }
      else
      {
        unsigned int v357 = a4[2];
        if (v273 > 0x40) {
          operator new[]();
        }
        unint64_t v274 = *(void *)a4;
      }
      uint64_t v356 = v274;
      int v275 = v22 - sub_1CD3E12F4((unsigned __int8 *)__src, v271, v272);
      uint64_t v20 = sub_1CCFD8ECC(a1, v268, v269, &v356, (a5 + 1)) + v275;
      goto LABEL_524;
    case 0xD2:
      long long v210 = *(_OWORD *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
      goto LABEL_425;
    case 0xD8:
      uint64_t v259 = *(void **)(a2 + 32);
      uint64_t v261 = *v259;
      uint64_t v260 = v259[1];
      *(_OWORD *)unint64_t __src = *(_OWORD *)(*(void *)(*v259 + 40) + 16 * v260);
      unsigned int v262 = sub_1CD3E12F4((unsigned __int8 *)__src, (uint64_t)v11, v12);
      unsigned int v263 = v262;
      if (LOBYTE(__src[0]))
      {
        if ((LOBYTE(__src[0]) - 120) >= 0x20u
          && (LOBYTE(__src[0]) - 2) >= 6u
          && (LOBYTE(__src[0]) - 15) >= 0x3Cu
          && (LOBYTE(__src[0]) + 104) >= 0x13u
          && (LOBYTE(__src[0]) - 8) >= 7u
          && (LOBYTE(__src[0]) - 75) >= 0x2Du)
        {
          goto LABEL_286;
        }
      }
      else
      {
        if ((*((_DWORD *)__src[1] + 2) & 0xFE) == 0x12) {
          unsigned int v303 = *(unsigned __int8 *)(**((void **)__src[1] + 2) + 8);
        }
        else {
          unsigned int v303 = *((_DWORD *)__src[1] + 2);
        }
        if (v303 != 13 && v303 > 6) {
          goto LABEL_286;
        }
      }
      if (v22 == v262)
      {
        uint64_t v89 = (a5 + 1);
        uint64_t v90 = a1;
        uint64_t v87 = v261;
        uint64_t v88 = v260;
        return sub_1CCFD8ECC(v90, v87, v88, a4, v89);
      }
      unsigned int v304 = v262 / v22;
      if (v262 % v22) {
        goto LABEL_286;
      }
      int v305 = *(unsigned __int8 *)(*(void *)(**(void **)(a1 + 40) + 40) + 272);
      llvm::APIntOps::ScaleBitMask((llvm::APIntOps *)a4, (const llvm::APInt *)(v23 / v304), (uint64_t)&v356);
      unsigned int v306 = sub_1CCFD8ECC(a1, v261, v260, &v356, (a5 + 1));
      if (v306 == v263 || !v23)
      {
        uint64_t v20 = v22;
      }
      else
      {
        unsigned int v307 = 0;
        uint64_t v20 = v22;
        while (1)
        {
          uint64_t v308 = (unsigned int *)(*(void *)a4 + 8 * (v307 >> 6));
          if (a4[2] < 0x41) {
            uint64_t v308 = a4;
          }
          if ((*(void *)v308 >> v307))
          {
            int v309 = v307 % v304;
            if (!v305) {
              int v309 = v304 + ~(v307 % v304);
            }
            unsigned int v310 = v309 * v22;
            uint64_t v20 = v306 - v310 >= v20 ? v20 : v306 - v310;
            if (v306 <= v310) {
              break;
            }
          }
          if (v23 == ++v307) {
            goto LABEL_524;
          }
        }
        uint64_t v20 = 1;
      }
      goto LABEL_524;
    default:
      switch(*(_WORD *)(a2 + 24))
      {
        case 0x8A:
        case 0x8B:
          goto LABEL_278;
        case 0x8C:
        case 0x8D:
        case 0x8E:
        case 0x8F:
        case 0x90:
        case 0x91:
        case 0x98:
          goto LABEL_287;
        case 0x92:
          unint64_t v36 = *(unsigned __int16 *)(a2 + 56);
          if (!*(_WORD *)(a2 + 56) || v10 < 2) {
            return v22;
          }
          uint64_t v37 = 0;
          unsigned int v348 = a5 + 1;
          int v38 = (llvm::Type *)v10;
          unint64_t v39 = 1;
          uint64_t v20 = (uint64_t)v10;
          do
          {
            if (a4[2] >= 0x41) {
              uint64_t v40 = (unsigned int *)(*(void *)a4 + 8 * ((v39 - 1) >> 6));
            }
            else {
              uint64_t v40 = a4;
            }
            if ((*(void *)v40 >> (v39 - 1)))
            {
              *(_OWORD *)unint64_t __src = *(_OWORD *)(*(void *)(v359 + 32) + v37);
              unsigned int v41 = sub_1CD7F2D8C(a1, __src[0], __src[1], v348);
              __int32 v43 = sub_1CD3E3904((unsigned int *)__src);
              if (v42 == 1) {
              if (v43 != v38)
              }
              {
                unsigned int v45 = sub_1CD3E3904((unsigned int *)__src);
                if (v44 == 1) {
                if (v41 <= v45 - v22)
                }
                  unsigned int v41 = 1;
                else {
                  v41 -= v45 - v22;
                }
              }
              if (v41 >= v20) {
                uint64_t v20 = v20;
              }
              else {
                uint64_t v20 = v41;
              }
            }
            if (v39 >= v36) {
              break;
            }
            ++v39;
            v37 += 40;
          }
          while (v20 > 1);
          return v20;
        case 0x93:
          uint64_t v124 = *(void *)(a2 + 32);
          uint64_t v125 = *(void *)v124;
          uint64_t v126 = *(void *)(v124 + 8);
          *(_OWORD *)unint64_t __src = *(_OWORD *)(v124 + 40);
          uint64_t v20 = *(void *)(v124 + 80);
          unsigned int v357 = v23;
          if (v23 > 0x40) {
            operator new[]();
          }
          uint64_t v356 = v25;
          unsigned int v127 = v23;
          int v136 = *(unsigned __int16 *)(v20 + 24);
          if (v136 != 35 && v136 != 11) {
            goto LABEL_280;
          }
          uint64_t v138 = *(void *)(v20 + 80);
          uint64_t v139 = *(unsigned int *)(v138 + 32);
          if (v139 >= 0x41)
          {
            int v141 = 0;
            int64_t v142 = (unint64_t)(v139 + 63) >> 6;
            do
            {
              BOOL v28 = v142-- < 1;
              if (v28) {
                break;
              }
              unint64_t v143 = *(void *)(*(void *)(v138 + 24) + 8 * v142);
              v141 += __clz(v143);
            }
            while (!v143);
            int v144 = v139 | 0xFFFFFFC0;
            if ((v139 & 0x3F) == 0) {
              int v144 = 0;
            }
            if ((v139 - v141 - v144) >= 0x41) {
              goto LABEL_280;
            }
            unint64_t v140 = **(void **)(v138 + 24);
          }
          else
          {
            unint64_t v140 = *(void *)(v138 + 24);
          }
          if (v140 < v23)
          {
            uint64_t v145 = a4[2] >= 0x41 ? (unsigned int *)(v24 + 8 * (v140 >> 6)) : a4;
            uint64_t v146 = 1 << v140;
            uint64_t v147 = *(void *)v145 & (1 << v140);
            uint64_t v356 = v25 & ~v146;
            if (!v147)
            {
              uint64_t v20 = 0xFFFFFFFFLL;
              goto LABEL_185;
            }
          }
LABEL_280:
          uint64_t v197 = v126;
          uint64_t v198 = v125;
          if (sub_1CD7878C0((unsigned int *)__src, v125, v126) != (llvm::Type *)v10)
          {
            BOOL v154 = 1;
            goto LABEL_282;
          }
          uint64_t v20 = sub_1CD7F2D8C(a1, __src[0], __src[1], (a5 + 1));
          unsigned int v127 = v357;
          uint64_t v125 = v198;
          uint64_t v126 = v197;
LABEL_185:
          if (v127 > 0x40)
          {
            int v148 = 0;
            int64_t v149 = ((unint64_t)v127 + 63) >> 6;
            uint64_t v150 = (void *)v356;
            do
            {
              BOOL v28 = v149-- < 1;
              if (v28) {
                break;
              }
              unint64_t v151 = *(void *)(v356 + 8 * v149);
              v148 += __clz(v151);
            }
            while (!v151);
            unsigned int v152 = v127 | 0xFFFFFFC0;
            if ((v127 & 0x3F) == 0) {
              unsigned int v152 = 0;
            }
            if (v148 + v152 == v127) {
              goto LABEL_526;
            }
          }
          else if (!v356)
          {
            return v20;
          }
          unsigned int v153 = sub_1CCFD8ECC(a1, v125, v126, &v356, (a5 + 1));
          BOOL v154 = 0;
          if (v153 >= v20) {
            uint64_t v20 = v20;
          }
          else {
            uint64_t v20 = v153;
          }
LABEL_282:
          if (v357 < 0x41) {
            goto LABEL_285;
          }
          unint64_t v189 = (void *)v356;
          if (!v356) {
            goto LABEL_285;
          }
          goto LABEL_284;
        case 0x94:
          unint64_t v117 = *(void **)(a2 + 32);
          uint64_t v118 = *v117;
          uint64_t v119 = v117[1];
          uint64_t v120 = v117[5];
          uint64_t v121 = *(void *)(*v117 + 40) + 16 * v119;
          unint64_t v123 = *(void **)v121;
          int8x8_t v122 = *(unsigned char **)(v121 + 8);
          __src[0] = v123;
          __src[1] = v122;
          if ((_BYTE)v123)
          {
            if (v123 - 120 < 0x33) {
              goto LABEL_286;
            }
          }
          else if (v122[8] == 19)
          {
            goto LABEL_286;
          }
          unsigned int v347 = sub_1CD3E3904((unsigned int *)&v359);
          if (v155 == 1) {
          unsigned int v157 = sub_1CD7878C0(*(unsigned int **)(v359 + 32), (uint64_t)v155, v156);
          }
          unsigned int v349 = sub_1CD3DB440((llvm::EVT *)__src, v158);
          if (v347 != v157) {
            goto LABEL_286;
          }
          unsigned int v357 = v349;
          if (v349 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v356);
          }
          unint64_t v159 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v349;
          if (!v349) {
            unint64_t v159 = 0;
          }
          uint64_t v356 = v159;
          int v160 = *(unsigned __int16 *)(v120 + 24);
          if (v160 != 35 && v160 != 11) {
            goto LABEL_523;
          }
          uint64_t v161 = *(void *)(v120 + 80);
          uint64_t v162 = *(unsigned int *)(v161 + 32);
          if (v162 < 0x41)
          {
            unint64_t v163 = *(void *)(v161 + 24);
            goto LABEL_518;
          }
          int v317 = 0;
          int64_t v318 = (unint64_t)(v162 + 63) >> 6;
          do
          {
            BOOL v28 = v318-- < 1;
            if (v28) {
              break;
            }
            unint64_t v319 = *(void *)(*(void *)(v161 + 24) + 8 * v318);
            v317 += __clz(v319);
          }
          while (!v319);
          int v320 = v162 | 0xFFFFFFC0;
          if ((v162 & 0x3F) == 0) {
            int v320 = 0;
          }
          if ((v162 - v317 - v320) < 0x41)
          {
            unint64_t v163 = **(void **)(v161 + 24);
LABEL_518:
            if (v163 < v349)
            {
              unsigned int v352 = v349;
              if (v357 >= 0x41 && v356) {
                MEMORY[0x1D25D9CB0](v356, 0x1000C8000313F17);
              }
              uint64_t v356 = 1 << v163;
              unsigned int v357 = v349;
            }
          }
LABEL_523:
          uint64_t v20 = sub_1CCFD8ECC(a1, v118, v119, &v356, (a5 + 1));
LABEL_524:
          if (v357 < 0x41) {
            return v20;
          }
          uint64_t v150 = (void *)v356;
          goto LABEL_526;
        case 0x95:
          *(_OWORD *)unint64_t __src = *(_OWORD *)(*(void *)(**(void **)(a2 + 32) + 40)
                                       + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8));
          unsigned int v279 = sub_1CD3DB440((llvm::EVT *)__src, v11);
          unint64_t v280 = *(unsigned __int16 *)(v359 + 56);
          if (!*(_WORD *)(v359 + 56)) {
            return 0xFFFFFFFFLL;
          }
          unsigned int v281 = v279;
          uint64_t v282 = 0;
          uint64_t v283 = (a5 + 1);
          uint64_t v20 = 0xFFFFFFFFLL;
          while (1)
          {
            llvm::APInt::extractBits((uint64_t)a4, v281, v281 * v282, (uint64_t)&v356);
            if (v357 > 0x40)
            {
              int v284 = 0;
              int64_t v285 = ((unint64_t)v357 + 63) >> 6;
              uint64_t v286 = v356;
              do
              {
                BOOL v28 = v285-- < 1;
                if (v28) {
                  break;
                }
                unint64_t v287 = *(void *)(v356 + 8 * v285);
                v284 += __clz(v287);
              }
              while (!v287);
              unsigned int v288 = v357 | 0xFFFFFFC0;
              if ((v357 & 0x3F) == 0) {
                unsigned int v288 = 0;
              }
              if (v284 + v288 == v357) {
                goto LABEL_446;
              }
            }
            else if (!v356)
            {
              goto LABEL_448;
            }
            unsigned int v289 = sub_1CCFD8ECC(a1, *(void *)(*(void *)(v359 + 32) + 40 * v282), *(void *)(*(void *)(v359 + 32) + 40 * v282 + 8), &v356, v283);
            if (v289 >= v20) {
              uint64_t v20 = v20;
            }
            else {
              uint64_t v20 = v289;
            }
            if (v357 >= 0x41)
            {
              uint64_t v286 = v356;
LABEL_446:
              if (v286) {
                MEMORY[0x1D25D9CB0](v286, 0x1000C8000313F17);
              }
            }
LABEL_448:
            if (++v282 >= v280 || v20 <= 1) {
              return v20;
            }
          }
        case 0x96:
          unint64_t v290 = *(uint64_t **)(a2 + 32);
          uint64_t v291 = v290[5];
          uint64_t v292 = v290[6];
          uint64_t v293 = *(void *)(v290[10] + 80);
          unint64_t v294 = (void *)(v293 + 24);
          if (*(_DWORD *)(v293 + 32) >= 0x41u) {
            unint64_t v294 = (void *)*v294;
          }
          uint64_t v295 = *v290;
          uint64_t v296 = v290[1];
          unsigned int v297 = *(_DWORD *)v294;
          *(_OWORD *)unint64_t __src = *(_OWORD *)(*(void *)(v291 + 40) + 16 * v292);
          unsigned int v298 = sub_1CD3DB440((llvm::EVT *)__src, v11);
          llvm::APInt::extractBits((uint64_t)a4, v298, v297, (uint64_t)__src);
          unsigned int v357 = a4[2];
          if (v357 > 0x40) {
            operator new[]();
          }
          uint64_t v356 = *(void *)a4;
          unsigned int v352 = v298;
          if (v298 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v351);
          }
          uint64_t v351 = 0;
          llvm::APInt::insertBits((void **)&v356, (const llvm::APInt *)&v351, v297);
          if (v352 >= 0x41 && v351) {
            MEMORY[0x1D25D9CB0](v351, 0x1000C8000313F17);
          }
          if (LODWORD(__src[1]) > 0x40)
          {
            int v299 = 0;
            int64_t v300 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
            do
            {
              BOOL v28 = v300-- < 1;
              if (v28) {
                break;
              }
              unint64_t v301 = *((void *)__src[0] + v300);
              v299 += __clz(v301);
            }
            while (!v301);
            unsigned int v302 = LODWORD(__src[1]) | 0xFFFFFFC0;
            if (((uint64_t)__src[1] & 0x3F) == 0) {
              unsigned int v302 = 0;
            }
            if (v299 + v302 != LODWORD(__src[1])) {
              goto LABEL_462;
            }
          }
          else if (__src[0])
          {
LABEL_462:
            uint64_t v20 = sub_1CCFD8ECC(a1, v291, v292, __src, (a5 + 1));
            if (v20 == 1)
            {
              uint64_t v20 = 1;
              goto LABEL_505;
            }
LABEL_471:
            if (v357 > 0x40)
            {
              int v311 = 0;
              int64_t v312 = ((unint64_t)v357 + 63) >> 6;
              uint64_t v313 = v356;
              do
              {
                BOOL v28 = v312-- < 1;
                if (v28) {
                  break;
                }
                unint64_t v314 = *(void *)(v356 + 8 * v312);
                v311 += __clz(v314);
              }
              while (!v314);
              unsigned int v315 = v357 | 0xFFFFFFC0;
              if ((v357 & 0x3F) == 0) {
                unsigned int v315 = 0;
              }
              if (v311 + v315 == v357) {
                goto LABEL_507;
              }
            }
            else if (!v356)
            {
              goto LABEL_509;
            }
            unsigned int v316 = sub_1CCFD8ECC(a1, v295, v296, &v356, (a5 + 1));
            if (v316 >= v20) {
              uint64_t v20 = v20;
            }
            else {
              uint64_t v20 = v316;
            }
LABEL_505:
            if (v357 < 0x41) {
              goto LABEL_509;
            }
            uint64_t v313 = v356;
LABEL_507:
            if (v313) {
              MEMORY[0x1D25D9CB0](v313, 0x1000C8000313F17);
            }
LABEL_509:
            if (LODWORD(__src[1]) < 0x41) {
              return v20;
            }
            uint64_t v150 = __src[0];
LABEL_526:
            if (!v150) {
              return v20;
            }
LABEL_527:
            MEMORY[0x1D25D9CB0](v150, 0x1000C8000313F17);
            return v20;
          }
          uint64_t v20 = 0xFFFFFFFFLL;
          goto LABEL_471;
        case 0x97:
          unint64_t v128 = *(void **)(a2 + 32);
          uint64_t v129 = *v128;
          uint64_t v130 = v128[1];
          uint64_t v131 = *(void *)(*v128 + 40) + 16 * v130;
          uint64_t v132 = *(void **)v131;
          if (*(void *)v131)
          {
            if (*(void *)v131 - 120 < 0x33) {
              goto LABEL_286;
            }
          }
          else if (*(unsigned char *)(*(void *)(v131 + 8) + 8) == 19)
          {
            goto LABEL_286;
          }
          uint64_t v164 = *(void *)(v128[5] + 80);
          uint64_t v165 = (void *)(v164 + 24);
          if (*(_DWORD *)(v164 + 32) >= 0x41u) {
            uint64_t v165 = (void *)*v165;
          }
          int v166 = *(_DWORD *)v165;
          unint64_t v167 = *(void **)(v131 + 8);
          __src[0] = v132;
          __src[1] = v167;
          unsigned int v168 = sub_1CD3DB440((llvm::EVT *)__src, v11);
          unsigned int v169 = a4[2];
          if (v169 < v168)
          {
            unsigned int v171 = v168;
            if (v168 > 0x40) {
              operator new[]();
            }
            unint64_t v170 = *(void *)a4 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v168);
          }
          else
          {
            if (v169 > 0x40) {
              operator new[]();
            }
            unint64_t v170 = *(void *)a4;
            unsigned int v171 = a4[2];
          }
          LODWORD(__src[1]) = v171;
          unint64_t v172 = v170 << v166;
          if (v171 == v166) {
            unint64_t v172 = 0;
          }
          unint64_t v173 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v171;
          if (!v171) {
            unint64_t v173 = 0;
          }
          __src[0] = (void *)(v173 & v172);
          uint64_t v20 = sub_1CCFD8ECC(a1, v129, v130, __src, (a5 + 1));
          goto LABEL_509;
        case 0x99:
          LODWORD(__src[1]) = a4[2];
          if (v23 >= 0x41) {
            llvm::APInt::initSlowCase((llvm::APInt *)__src);
          }
          __src[0] = 0;
          unsigned int v357 = v23;
          unsigned int v113 = v23;
          uint64_t v356 = 0;
          if (!v23)
          {
            uint64_t v20 = 0xFFFFFFFFLL;
            goto LABEL_264;
          }
          uint64_t v114 = 0;
          uint64_t v115 = *(void *)(a2 + 80);
          do
          {
            while (2)
            {
              if ((*(void *)a4 >> v114))
              {
                unsigned int v116 = *(_DWORD *)(v115 + 4 * v114);
                if ((v116 & 0x80000000) != 0)
                {
                  BOOL v154 = 0;
                  uint64_t v20 = 1;
                  goto LABEL_265;
                }
                if (v116 < v23)
                {
                  __src[0] = (void *)((unint64_t)__src[0] | (1 << v116));
                  if (++v114 == v23) {
                    goto LABEL_146;
                  }
                  continue;
                }
                v356 |= 1 << (v116 % v23);
              }
              break;
            }
            ++v114;
          }
          while (v114 != v23);
          if (__src[0])
          {
LABEL_146:
            uint64_t v20 = sub_1CCFD8ECC(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), __src, (a5 + 1));
            unsigned int v113 = v357;
            goto LABEL_258;
          }
          uint64_t v20 = 0xFFFFFFFFLL;
LABEL_258:
          if (v113 <= 0x40)
          {
            if (!v356) {
              goto LABEL_264;
            }
            goto LABEL_260;
          }
          int v190 = 0;
          int64_t v191 = ((unint64_t)v113 + 63) >> 6;
          do
          {
            BOOL v28 = v191-- < 1;
            if (v28) {
              break;
            }
            unint64_t v192 = *(void *)(v356 + 8 * v191);
            v190 += __clz(v192);
          }
          while (!v192);
          unsigned int v193 = v113 | 0xFFFFFFC0;
          if ((v113 & 0x3F) == 0) {
            unsigned int v193 = 0;
          }
          if (v190 + v193 != v113)
          {
LABEL_260:
            unsigned int v188 = sub_1CCFD8ECC(a1, *(void *)(*(void *)(v359 + 32) + 40), *(void *)(*(void *)(v359 + 32) + 48), &v356, (a5 + 1));
            if (v188 >= v20) {
              uint64_t v20 = v20;
            }
            else {
              uint64_t v20 = v188;
            }
            unsigned int v113 = v357;
          }
LABEL_264:
          BOOL v154 = v20 == 1;
LABEL_265:
          if (v113 >= 0x41 && v356) {
            MEMORY[0x1D25D9CB0](v356, 0x1000C8000313F17);
          }
          if (LODWORD(__src[1]) >= 0x41)
          {
            unint64_t v189 = __src[0];
            if (__src[0]) {
LABEL_284:
            }
              MEMORY[0x1D25D9CB0](v189, 0x1000C8000313F17);
          }
LABEL_285:
          if (!v154) {
            return v20;
          }
LABEL_286:
          int v31 = 1;
LABEL_287:
          LODWORD(v7) = v360;
LABEL_288:
          unsigned int v101 = v31;
          if (!v7)
          {
            uint64_t v11 = (const char *)v359;
            if (v359)
            {
              if (*(_WORD *)(v359 + 24) == 253)
              {
                int v209 = (*(unsigned __int16 *)(v359 + 26) >> 10) & 3;
                if (v209)
                {
                  if (v209 == 3)
                  {
                    *(_OWORD *)unint64_t __src = *(_OWORD *)(v359 + 80);
                    return v22 - sub_1CD3E12F4((unsigned __int8 *)__src, v359, v12);
                  }
                  if (v209 == 2)
                  {
                    long long v210 = *(_OWORD *)(v359 + 80);
LABEL_425:
                    *(_OWORD *)unint64_t __src = v210;
                    int v135 = v22 - sub_1CD3E12F4((unsigned __int8 *)__src, (uint64_t)v11, v12);
                    return (v135 + 1);
                  }
                }
                else
                {
                  uint64_t v212 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 1688))(*(void *)(a1 + 24));
                  if (v212)
                  {
                    uint64_t v213 = *(void *)v212;
                    if ((*(_DWORD *)(*(void *)v212 + 8) & 0xFE) == 0x12)
                    {
                      uint64_t v350 = (llvm::Constant *)v212;
                      unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v213);
                      if (v214 == 1) {
                      if (PrimitiveSizeInBits == v23 * v22)
                      }
                      {
                        if ((*(_DWORD *)(v213 + 8) & 0xFE) == 0x12) {
                          uint64_t v213 = **(void **)(v213 + 16);
                        }
                        if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v213) == v22)
                        {
                          if (!v23) {
                            return v22;
                          }
                          int v216 = 0;
                          uint64_t v20 = v22;
                          uint64_t v217 = v350;
                          do
                          {
                            if (a4[2] >= 0x41) {
                              unsigned int v218 = (unsigned int *)(*(void *)a4 + 8 * (v216 >> 6));
                            }
                            else {
                              unsigned int v218 = a4;
                            }
                            if ((*(void *)v218 >> (char)v216))
                            {
                              AggregateElement = llvm::Constant::getAggregateElement(v217, v216);
                              if (!AggregateElement) {
                                return 1;
                              }
                              int v220 = *((unsigned __int8 *)AggregateElement + 16);
                              if (v220 == 17)
                              {
                                uint64_t v230 = (void *)AggregateElement[4];
                                int v229 = (llvm::detail::DoubleAPFloat *)(AggregateElement + 4);
                                if (v230 == &unk_1CFB2E344) {
                                  llvm::detail::DoubleAPFloat::bitcastToAPInt(v229, (llvm::APInt *)__src);
                                }
                                else {
                                  llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v229, (uint64_t)__src);
                                }
                                unsigned int v231 = __src[1];
                                unsigned int v232 = LODWORD(__src[1]) - 1;
                                if (LODWORD(__src[1]) > 0x40)
                                {
                                  unint64_t v238 = __src[0];
                                  if ((*((void *)__src[0] + (v232 >> 6)) >> v232))
                                  {
                                    unsigned int v243 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)__src);
                                  }
                                  else
                                  {
                                    int v239 = 0;
                                    int64_t v240 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
                                    do
                                    {
                                      BOOL v28 = v240-- < 1;
                                      if (v28) {
                                        break;
                                      }
                                      unint64_t v241 = *((void *)__src[0] + v240);
                                      v239 += __clz(v241);
                                    }
                                    while (!v241);
                                    if (((uint64_t)__src[1] & 0x3F) != 0) {
                                      unsigned int v242 = LODWORD(__src[1]) | 0xFFFFFFC0;
                                    }
                                    else {
                                      unsigned int v242 = 0;
                                    }
                                    unsigned int v243 = v239 + v242;
                                  }
                                  if (v243 >= v20) {
                                    uint64_t v20 = v20;
                                  }
                                  else {
                                    uint64_t v20 = v243;
                                  }
                                  MEMORY[0x1D25D9CB0](v238, 0x1000C8000313F17);
                                  uint64_t v217 = v350;
                                }
                                else
                                {
                                  if (((unint64_t)__src[0] >> v232))
                                  {
                                    if (LODWORD(__src[1])) {
                                      unsigned int v231 = __clz(~((uint64_t)__src[0] << -LOBYTE(__src[1])));
                                    }
                                    uint64_t v217 = v350;
                                  }
                                  else
                                  {
                                    unsigned int v231 = LODWORD(__src[1]) + __clz((unint64_t)__src[0]) - 64;
                                  }
                                  if (v231 >= v20) {
                                    uint64_t v20 = v20;
                                  }
                                  else {
                                    uint64_t v20 = v231;
                                  }
                                }
                              }
                              else
                              {
                                if (v220 != 16) {
                                  return 1;
                                }
                                unsigned int v221 = AggregateElement + 3;
                                uint64_t v222 = *((unsigned int *)AggregateElement + 8);
                                unsigned int v223 = v222 - 1;
                                if (v222 > 0x40)
                                {
                                  unint64_t v233 = *v221;
                                  if ((*(void *)(*v221 + 8 * (v223 >> 6)) >> v223))
                                  {
                                    unsigned int v228 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)(AggregateElement + 3));
                                  }
                                  else
                                  {
                                    int v234 = 0;
                                    int64_t v235 = (unint64_t)(v222 + 63) >> 6;
                                    do
                                    {
                                      BOOL v28 = v235-- < 1;
                                      if (v28) {
                                        break;
                                      }
                                      unint64_t v236 = *(void *)(v233 + 8 * v235);
                                      v234 += __clz(v236);
                                    }
                                    while (!v236);
                                    if ((v222 & 0x3F) != 0) {
                                      int v237 = v222 | 0xFFFFFFC0;
                                    }
                                    else {
                                      int v237 = 0;
                                    }
                                    unsigned int v228 = v234 + v237;
                                  }
                                  uint64_t v217 = v350;
                                }
                                else
                                {
                                  unint64_t v224 = *v221;
                                  unint64_t v225 = v224 >> v223;
                                  unsigned int v226 = v222 + __clz(v224) - 64;
                                  unsigned int v227 = __clz(~(v224 << -(char)v222));
                                  if (!v222) {
                                    unsigned int v227 = 0;
                                  }
                                  if (v225) {
                                    unsigned int v228 = v227;
                                  }
                                  else {
                                    unsigned int v228 = v226;
                                  }
                                }
                                if (v228 >= v20) {
                                  uint64_t v20 = v20;
                                }
                                else {
                                  uint64_t v20 = v228;
                                }
                              }
                            }
                            int v216 = (llvm::Type *)(v216 + 1);
                          }
                          while (v216 != v23);
                          return v20;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_289:
          uint64_t v199 = v359;
          BOOL v200 = v360;
          if (v13 > 0x185 || v13 - 46 <= 2)
          {
            unsigned int v201 = (*(uint64_t (**)(void, uint64_t, BOOL, unsigned int *, uint64_t, uint64_t))(**(void **)(a1 + 24) + 1640))(*(void *)(a1 + 24), v359, v360, a4, a1, a5);
            if (v101 <= v201) {
              unsigned int v202 = v201;
            }
            else {
              unsigned int v202 = v101;
            }
            if (v201 > 1) {
              unsigned int v101 = v202;
            }
            uint64_t v199 = v359;
            BOOL v200 = v360;
          }
          sub_1CCFCE670(a1, v199, v200, a4, a5, (uint64_t)__src);
          unsigned int v203 = __src[1];
          unsigned int v204 = LODWORD(__src[1]) - 1;
          if (LODWORD(__src[1]) > 0x40)
          {
            unint64_t v205 = __src[0];
            if ((*((void *)__src[0] + (v204 >> 6)) >> v204))
            {
              uint64_t v338 = __src;
              goto LABEL_566;
            }
            unsigned int v206 = v101;
          }
          else
          {
            unint64_t v205 = __src[0];
            unsigned int v206 = v101;
            if (((unint64_t)__src[0] >> v204))
            {
              unsigned int v211 = __clz(~((uint64_t)__src[0] << -LOBYTE(__src[1])));
              if (LODWORD(__src[1])) {
                unsigned int v208 = v211;
              }
              else {
                unsigned int v208 = 0;
              }
LABEL_311:
              if (v206 <= v208) {
                uint64_t v20 = v208;
              }
              else {
                uint64_t v20 = v206;
              }
              if (v355 >= 0x41 && v354) {
                MEMORY[0x1D25D9CB0](v354, 0x1000C8000313F17);
              }
              if (v203 < 0x41 || !v205) {
                return v20;
              }
              uint64_t v150 = v205;
              goto LABEL_527;
            }
          }
          unsigned int v207 = v355 - 1;
          if (v355 <= 0x40)
          {
            if ((v354 >> v207))
            {
              if (v355) {
                unsigned int v208 = __clz(~(v354 << -(char)v355));
              }
              else {
                unsigned int v208 = 0;
              }
            }
            else
            {
              unsigned int v208 = 1;
            }
            goto LABEL_311;
          }
          if (((*(void *)(v354 + 8 * (v207 >> 6)) >> v207) & 1) == 0)
          {
            unsigned int v208 = 1;
LABEL_567:
            unsigned int v206 = v101;
            goto LABEL_311;
          }
          uint64_t v338 = (void **)&v354;
LABEL_566:
          unsigned int v208 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)v338);
          goto LABEL_567;
        default:
          if (v13 - 290 > 0xF || v13 == 291) {
            goto LABEL_287;
          }
          *(_OWORD *)unint64_t __src = *(_OWORD *)(a2 + 80);
          unsigned int v100 = sub_1CD3E12F4((unsigned __int8 *)__src, (uint64_t)v11, v12);
          if (v360)
          {
            unsigned int v101 = 1;
            goto LABEL_289;
          }
          uint64_t v20 = v22 - v100;
          if (v22 == v100) {
            return 1;
          }
          if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 984))(*(void *)(a1 + 24)) == 198) {
            return (v20 + 1);
          }
          if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 984))(*(void *)(a1 + 24)) != 199) {
            goto LABEL_286;
          }
          return v20;
      }
  }
}

uint64_t sub_1CCFDB4C8(void **a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if ((*((_WORD *)*a1 + 510) & 4) == 0)
  {
    LODWORD(v5) = a5;
    while ((*(_WORD *)(a2 + 72) & 0x10) == 0)
    {
      if (v5 > 5) {
        goto LABEL_41;
      }
      unsigned int v9 = *(unsigned __int16 *)(a2 + 24);
      if (v9 <= 0xBD)
      {
        if (*(unsigned __int16 *)(a2 + 24) <= 0x8Cu)
        {
          if (v9 - 96 < 5)
          {
LABEL_32:
            LOBYTE(v10) = a4;
            return v10 & 1;
          }
          if (v9 != 12 && v9 != 36)
          {
LABEL_39:
            if (v9 <= 0x185 && v9 - 46 > 2)
            {
LABEL_41:
              LOBYTE(v10) = 0;
              return v10 & 1;
            }
            unsigned int v18 = *(uint64_t (**)(void))(*a1[3] + 1696);
            return v18();
          }
          uint64_t v12 = *(void *)(a2 + 80);
          unsigned int v13 = (unsigned char *)(v12 + 32);
          if (*(_UNKNOWN **)(v12 + 32) == &unk_1CFB2E344)
          {
            uint64_t v15 = *(void *)(v12 + 40);
            int v16 = *(unsigned char *)(v15 + 28) & 7;
            LOBYTE(v10) = v16 != 1;
            if (v16 != 1 || ((a4 ^ 1) & 1) != 0) {
              return v10 & 1;
            }
            unsigned int v13 = (unsigned char *)(v15 + 8);
          }
          else
          {
            int v14 = *(unsigned char *)(v12 + 52) & 7;
            LOBYTE(v10) = v14 != 1;
            if (v14 != 1 || ((a4 ^ 1) & 1) != 0) {
              return v10 & 1;
            }
          }
          if ((v13[20] & 7) != 1 || *(_DWORD *)(*(void *)v13 + 16) == 1) {
            break;
          }
          int v19 = *(_DWORD *)(*(void *)v13 + 8);
          uint64_t v20 = v13 + 8;
          if ((v19 - 64) <= 0xFFFFFF7F) {
            uint64_t v20 = (void *)*v20;
          }
          uint64_t v10 = (v20[(v19 - 2) >> 6] >> (v19 - 2)) & 1;
          return v10 & 1;
        }
        switch(*(_WORD *)(a2 + 24))
        {
          case 0x8D:
          case 0x8E:
            if (a4) {
              goto LABEL_46;
            }
            uint64_t v5 = (v5 + 1);
            if (!sub_1CCFDB4C8(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), 0, v5)|| !sub_1CCFDB4C8(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0, v5))
            {
              goto LABEL_41;
            }
            a4 = 0;
LABEL_30:
            uint64_t v11 = (uint64_t *)(*(void *)(a2 + 32) + 80);
            break;
          case 0x8F:
          case 0x94:
            goto LABEL_9;
          case 0x91:
LABEL_7:
            if (a4) {
              goto LABEL_46;
            }
LABEL_8:
            a4 = 0;
LABEL_9:
            uint64_t v11 = *(uint64_t **)(a2 + 32);
            LODWORD(v5) = v5 + 1;
            break;
          default:
            goto LABEL_39;
        }
      }
      else
      {
        LOBYTE(v10) = 1;
        switch(*(_WORD *)(a2 + 24))
        {
          case 0xBE:
            uint64_t v5 = (v5 + 1);
            if (sub_1CCFDB4C8(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), a4 & 1, v5))goto LABEL_30; {
            goto LABEL_41;
            }
          case 0xCA:
          case 0xCB:
            return v10 & 1;
          case 0xD4:
          case 0xD7:
            if (a4) {
              return v10 & 1;
            }
            goto LABEL_8;
          case 0xDE:
          case 0xDF:
            goto LABEL_9;
          case 0xE0:
          case 0xE2:
          case 0xE3:
          case 0xE4:
          case 0xE5:
          case 0xE6:
          case 0xE7:
          case 0xE8:
            goto LABEL_32;
          case 0xE9:
          case 0xEA:
          case 0xEB:
          case 0xEC:
          case 0xED:
          case 0xEE:
          case 0xEF:
          case 0xF0:
          case 0xF1:
            goto LABEL_7;
          case 0xF6:
          case 0xF7:
            uint64_t v5 = (v5 + 1);
            if (sub_1CCFDB4C8(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a4 & 1, v5)) {
              return v10 & 1;
            }
            goto LABEL_28;
          case 0xF8:
          case 0xF9:
            if (a4) {
              return v10 & 1;
            }
            uint64_t v5 = (v5 + 1);
            if (sub_1CCFDB4C8(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), 0, v5))
            {
              if (sub_1CCFDB4C8(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 1, v5))return v10 & 1; {
            }
              }
            if (!sub_1CCFDB4C8(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0, v5))goto LABEL_41; {
            uint64_t v11 = *(uint64_t **)(a2 + 32);
            }
            a4 = 1;
            break;
          case 0xFA:
          case 0xFB:
            uint64_t v5 = (v5 + 1);
            if (!sub_1CCFDB4C8(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a4 & 1, v5))goto LABEL_41; {
LABEL_28:
            }
            uint64_t v11 = (uint64_t *)(*(void *)(a2 + 32) + 40);
            break;
          default:
            goto LABEL_39;
        }
      }
      a2 = *v11;
      if ((*((_WORD *)*a1 + 510) & 4) != 0) {
        break;
      }
    }
  }
LABEL_46:
  LOBYTE(v10) = 1;
  return v10 & 1;
}

uint64_t sub_1CCFDB970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1CD802AAC(a1, a2, 1);
  if (result)
  {
    unsigned int v6 = *(uint64_t **)(a1 + 32);
    uint64_t v7 = *v6;
    int v8 = *((_DWORD *)v6 + 2);
    uint64_t v9 = *(void *)(a3 + 32);
    if (v7 == *(void *)v9 && v8 == *(_DWORD *)(v9 + 8)) {
      return 1;
    }
    else {
      return v7 == *(void *)(v9 + 40) && v8 == *(_DWORD *)(v9 + 48);
    }
  }
  return result;
}

uint64_t *sub_1CCFDBB80(uint64_t a1, const char *a2, const llvm::APInt *a3, llvm *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  v233[6] = *MEMORY[0x1E4F143B8];
  int v209 = a4;
  uint64_t v210 = a5;
  if (a2 > 0x185) {
    return 0;
  }
  uint64_t v8 = 0;
  if (a2 == 149) {
    return (uint64_t *)v8;
  }
  if (!a7) {
    return 0;
  }
  if (sub_1CD7F4B84(a1, (int)a2, (uint64_t)a6)) {
    return sub_1CD3DD4D8(a1, a4, a5);
  }
  if (a7 != 2) {
    goto LABEL_9;
  }
  uint64_t v8 = (uint64_t)sub_1CD7F4C7C(a1, (int)a2, (uint64_t)a3, a4, a5, *a6, a6[1], v14, a6[2], a6[3]);
  if (v8) {
    return (uint64_t *)v8;
  }
  uint64_t v46 = *a6;
  unsigned int v47 = *(unsigned __int16 *)(*a6 + 24);
  if (v47 <= 0x26)
  {
    if (((1 << v47) & 0x800000800) != 0)
    {
      uint64_t v48 = a6[2];
      int v49 = *(unsigned __int16 *)(v48 + 24);
      if (v49 == 35 || v49 == 11)
      {
        if ((*(unsigned char *)(v46 + 26) & 8) != 0 || (*(unsigned char *)(v48 + 26) & 8) != 0) {
          return 0;
        }
        sub_1CCFDD6E0((uint64_t)&v214, (int)a2, (llvm::APInt *)(*(void *)(v46 + 80) + 24), (llvm::APInt *)(*(void *)(v48 + 80) + 24));
        if (!BYTE8(v215[0])) {
          return 0;
        }
        uint64_t v129 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)&v214, v50);
        uint64_t v8 = sub_1CD7EC028(a1, v129, a3, v209, v210, 0, 0);
        if (!BYTE8(v215[0])) {
          return (uint64_t *)v8;
        }
LABEL_251:
        if (LODWORD(v215[0]) >= 0x41 && v214) {
          MEMORY[0x1D25D9CB0](v214, 0x1000C8000313F17);
        }
        return (uint64_t *)v8;
      }
      if (v47 - 13 > 1) {
        goto LABEL_184;
      }
    }
    else if (((1 << v47) & 0x6000006000) == 0)
    {
      goto LABEL_184;
    }
    uint64_t v100 = a6[2];
    return sub_1CD7F4A24(a1, (int)a2, a4, a5, v46, v100);
  }
LABEL_184:
  if ((*(unsigned int (**)(void, const char *))(**(void **)(a1 + 24) + 1128))(*(void *)(a1 + 24), a2))
  {
    uint64_t v46 = a6[2];
    unsigned int v101 = *(unsigned __int16 *)(v46 + 24);
    if (v101 <= 0x26 && ((1 << v101) & 0x6000006000) != 0)
    {
      uint64_t v100 = *a6;
      return sub_1CD7F4A24(a1, (int)a2, a4, a5, v46, v100);
    }
  }
LABEL_9:
  if ((_BYTE)a4)
  {
    if (a4 - 15 >= 0x9C) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
  {
    return 0;
  }
  unint64_t v17 = sub_1CC4A0738((llvm::EVT *)&v209);
  if (a7 != 2) {
    goto LABEL_47;
  }
  if ((_BYTE)v209)
  {
    if (v209 - 15 >= 0x3C) {
      goto LABEL_47;
    }
  }
  else if (*(unsigned char *)(v210 + 8) != 18 || *(unsigned char *)(**(void **)(v210 + 16) + 8) != 13)
  {
    goto LABEL_47;
  }
  uint64_t v18 = *a6;
  int v19 = (unsigned __int8 *)(*(void *)(*a6 + 40) + 16 * *((unsigned int *)a6 + 2));
  int v20 = *v19;
  if (v20 != v209) {
    goto LABEL_47;
  }
  uint64_t v21 = *((void *)v19 + 1);
  BOOL v22 = v20 || v21 == v210;
  if (!v22) {
    goto LABEL_47;
  }
  uint64_t v23 = a6[2];
  uint64_t v24 = (unsigned __int8 *)(*(void *)(v23 + 40) + 16 * *((unsigned int *)a6 + 6));
  if (*v24 != v20 || !v20 && *((void *)v24 + 1) != v210) {
    goto LABEL_47;
  }
  if (*(_WORD *)(v18 + 24) != 216 || *(_WORD *)(v23 + 24) != 216) {
    goto LABEL_47;
  }
  do
  {
    uint64_t v25 = *(unsigned int **)(v18 + 32);
    uint64_t v18 = *(void *)v25;
    int v26 = *(unsigned __int16 *)(*(void *)v25 + 24);
  }
  while (v26 == 216);
  uint64_t v27 = v25[2];
  do
  {
    BOOL v28 = *(unsigned int **)(v23 + 32);
    uint64_t v23 = *(void *)v28;
    int v29 = *(unsigned __int16 *)(*(void *)v28 + 24);
  }
  while (v29 == 216);
  uint64_t v30 = v28[2];
  uint64_t v31 = v26 == 146 ? v18 : 0;
  uint64_t v32 = v29 == 146 ? v23 : 0;
  uint64_t v33 = *(void *)(v18 + 40) + 16 * v27;
  unsigned int v35 = *(llvm **)v33;
  uint64_t v34 = *(void *)(v33 + 8);
  unsigned int v207 = v35;
  uint64_t v208 = v34;
  if (!v31 || !v32)
  {
LABEL_47:
    if (a2 != 175 && a2 != 58 || *(_WORD *)(*a6 + 24) != 158) {
      goto LABEL_50;
    }
    LODWORD(v215[0]) = 1;
    uint64_t v214 = 0;
    if (!sub_1CD7E967C(a6[2], (unint64_t *)&v214, v16))
    {
      if (LODWORD(v215[0]) >= 0x41 && v214) {
        MEMORY[0x1D25D9CB0](v214, 0x1000C8000313F17);
      }
LABEL_50:
      uint64_t v37 = (unsigned int *)&a6[2 * a7];
      if (a7)
      {
        uint64_t v38 = 16 * a7;
        unint64_t v39 = a6;
        do
        {
          unsigned int v40 = *(unsigned __int16 *)(*v39 + 24);
          if (v40 > 0x91)
          {
            if (v40 != 156 && v40 != 146) {
              return 0;
            }
          }
          else if (v40 != 8 && v40 != 51)
          {
            return 0;
          }
          v39 += 2;
          v38 -= 16;
        }
        while (v38);
        for (int i = (unsigned int *)a6; i != v37; i += 4)
        {
          uint64_t v42 = *(void *)(*(void *)i + 40) + 16 * i[2];
          __int32 v43 = *(void **)v42;
          if (*(void *)v42)
          {
            if (*(void *)v42 - 15 <= 0x9B)
            {
              uint64_t v44 = *(void *)(v42 + 8);
LABEL_64:
              uint64_t v214 = v43;
              *(void *)&v215[0] = v44;
              if (v17 != sub_1CC4A0738((llvm::EVT *)&v214)) {
                return 0;
              }
            }
          }
          else
          {
            uint64_t v44 = *(void *)(v42 + 8);
            if ((*(_DWORD *)(v44 + 8) & 0xFE) == 0x12) {
              goto LABEL_64;
            }
          }
        }
      }
      if (a2 == 193)
      {
        unint64_t v192 = 2;
        unsigned int v193 = 0;
      }
      else
      {
        unint64_t v192 = sub_1CD3DD468((unsigned __int8 *)&v209, v15, v16);
        unsigned int v193 = (void *)v15;
      }
      uint64_t v51 = (void *)sub_1CD3DD468((unsigned __int8 *)&v209, v15, v16);
      v217[0] = v51;
      v217[1] = (void *)v52;
      uint64_t v54 = a1;
      if (!*(unsigned char *)(a1 + 651)) {
        goto LABEL_93;
      }
      BOOL v53 = (char)v51;
      if ((_BYTE)v51)
      {
        uint64_t v54 = a1;
        if (v51 - 120 >= 0x20)
        {
          uint64_t v54 = a1;
          if (v51 - 2 >= 6 && v51 - 15 >= 0x3C) {
            goto LABEL_93;
          }
        }
      }
      else
      {
        if ((*(_DWORD *)(v52 + 8) & 0xFE) == 0x12) {
          int v55 = *(unsigned __int8 *)(**(void **)(v52 + 16) + 8);
        }
        else {
          int v55 = *(_DWORD *)(v52 + 8);
        }
        uint64_t v54 = a1;
        if (v55 != 13) {
          goto LABEL_93;
        }
      }
      llvm::TargetLoweringBase::getTypeConversion(*(void *)(v54 + 24), *(llvm::LLVMContext **)(v54 + 56), (BOOL)v51, v52, (uint64_t)&v214);
      *(_OWORD *)uint64_t v217 = v215[0];
      unsigned int v106 = (void *)sub_1CD3DD468((unsigned __int8 *)&v209, v104, v105);
      char v107 = (char)v106;
      if (LOBYTE(v217[0]) != v106)
      {
        uint64_t v214 = v106;
        *(void *)&v215[0] = v52;
        if (LOBYTE(v217[0]))
        {
          uint64_t v108 = sub_1CB87E200((unsigned __int8 *)v217);
LABEL_202:
          unint64_t v112 = v108;
          int v113 = v109;
          if (v107) {
            unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v214);
          }
          else {
            unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v214);
          }
          if (v113 == 1 && v52 != 1)
          {
            uint64_t v54 = a1;
            uint64_t v37 = (unsigned int *)&a6[2 * a7];
          }
          else
          {
            uint64_t v54 = a1;
            uint64_t v37 = (unsigned int *)&a6[2 * a7];
            if (v112 < ExtendedSizeInBits) {
              return 0;
            }
          }
          goto LABEL_93;
        }
LABEL_195:
        uint64_t v108 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v217);
        goto LABEL_202;
      }
      uint64_t v54 = a1;
      if (!LOBYTE(v217[0]) && v217[1] != (void *)v52)
      {
        uint64_t v214 = v106;
        *(void *)&v215[0] = v52;
        goto LABEL_195;
      }
LABEL_93:
      unint64_t v190 = v17 & 0xFFFFFFFF00000000;
      if ((v17 & 0xFFFFFFFF00000000) == 0x100000000) {
        uint64_t v56 = 1;
      }
      else {
        uint64_t v56 = v17;
      }
      uint64_t v214 = (char *)v215 + 8;
      *(void *)&v215[0] = 0x400000000;
      uint64_t v196 = v56;
      if (!v56)
      {
        uint64_t v97 = (uint64_t *)v215 + 1;
        goto LABEL_176;
      }
      unsigned __int16 v189 = 0;
      uint64_t v200 = 0;
      uint64_t v197 = v37;
      unsigned __int16 v198 = 0;
      uint64_t v191 = v192;
      while (1)
      {
        unint64_t __src = v213;
        uint64_t v212 = 0x400000000;
        if (a7)
        {
          unsigned int v57 = a6;
          while (1)
          {
            uint64_t v58 = *v57;
            uint64_t v59 = v57[1];
            *(_OWORD *)unint64_t v219 = *(_OWORD *)(*(void *)(*v57 + 40) + 16 * v59);
            uint64_t v60 = (llvm *)sub_1CD3DD468((unsigned __int8 *)v219, v52, v53);
            BOOL v61 = (BOOL)v60;
            uint64_t v62 = v52;
            int v63 = *(unsigned __int16 *)(v58 + 24);
            if (v63 == 146 || v63 == 156) {
              break;
            }
            if (v63 == 51)
            {
              unsigned int v82 = sub_1CD3DD4D8(a1, v60, v52);
              if (v212 >= (unint64_t)HIDWORD(v212)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v81 = (uint64_t *)v197;
              unsigned int v83 = (uint64_t **)((char *)__src + 16 * v212);
              *unsigned int v83 = v82;
              v83[1] = (uint64_t *)v52;
              unsigned int v80 = v212 + 1;
              LODWORD(v212) = v212 + 1;
              goto LABEL_135;
            }
            if (v212 >= (unint64_t)HIDWORD(v212)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unint64_t v84 = (uint64_t *)((char *)__src + 16 * v212);
            *unint64_t v84 = v58;
            v84[1] = v59;
LABEL_134:
            unsigned int v80 = v212 + 1;
            LODWORD(v212) = v212 + 1;
            unsigned int v81 = (uint64_t *)v197;
LABEL_135:
            v57 += 2;
            if (v57 == v81)
            {
              unsigned int v86 = (uint64_t *)__src;
              uint64_t v54 = a1;
              goto LABEL_153;
            }
          }
          BOOL v22 = v63 == 156;
          uint64_t v64 = v200;
          if (v22) {
            uint64_t v64 = 0;
          }
          uint64_t v65 = (uint64_t *)(*(void *)(v58 + 32) + 40 * v64);
          uint64_t v67 = *v65;
          unint64_t v66 = v65[1];
          uint64_t v68 = (char **)(*(void *)(*v65 + 40) + 16 * v66);
          unsigned int v70 = *v68;
          uint64_t v69 = (uint64_t)v68[1];
          unsigned int v231 = v70;
          uint64_t v232 = v69;
          if ((_BYTE)v70)
          {
            BOOL v71 = v70 - 120 >= 0x20 && v70 - 2 >= 6;
            if (v71 && v70 - 15 >= 0x3C)
            {
LABEL_132:
              if (v212 >= (unint64_t)HIDWORD(v212)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unint64_t v79 = (uint64_t *)((char *)__src + 16 * v212);
              *unint64_t v79 = v67;
              v79[1] = v66;
              goto LABEL_134;
            }
          }
          else
          {
            if ((*(_DWORD *)(v69 + 8) & 0xFE) == 0x12) {
              int v72 = *(unsigned __int8 *)(**(void **)(v69 + 16) + 8);
            }
            else {
              int v72 = *(_DWORD *)(v69 + 8);
            }
            if (v72 != 13) {
              goto LABEL_132;
            }
          }
          if (v70 != v60 || (!(_BYTE)v70 ? (BOOL v73 = v69 == v52) : (BOOL v73 = 1), !v73))
          {
            if (sub_1CC277C0C((unsigned __int8 *)&v231, (uint64_t)v60, v52))
            {
              uint64_t v54 = a1;
              if (*(unsigned char *)(a1 + 651))
              {
                unsigned int v74 = *(unsigned __int16 *)(v67 + 24);
                BOOL v95 = v74 > 0x33;
                uint64_t v75 = (1 << v74) & 0x8000800000800;
                if (v95 || v75 == 0)
                {
                  llvm::TargetLoweringBase::getTypeConversion(*(void *)(a1 + 24), *(llvm::LLVMContext **)(a1 + 56), v61, v62, (uint64_t)v219);
                  uint64_t v54 = a1;
                  if (LOBYTE(v219[0]))
                  {
                    uint64_t v8 = 0;
                    char v85 = 0;
                    goto LABEL_147;
                  }
                }
              }
              uint64_t v77 = *(void *)(v54 + 832);
              if (v77) {
                uint64_t v78 = *(unsigned __int16 *)(v77 + 8);
              }
              else {
                uint64_t v78 = v198 & 0xF000;
              }
              unsigned __int16 v198 = v78;
              uint64_t v67 = sub_1CD7F3564(v54, 201, a3, v61, v62, v67, v66, v78);
              unint64_t v66 = v66 & 0xFFFFFFFF00000000 | v52;
            }
          }
          goto LABEL_132;
        }
        unsigned int v80 = 0;
        unsigned int v86 = (uint64_t *)v213;
LABEL_153:
        uint64_t v87 = *(void *)(v54 + 832);
        if (v87) {
          uint64_t v88 = *(unsigned __int16 *)(v87 + 8);
        }
        else {
          uint64_t v88 = WORD2(v191) & 0xF000;
        }
        WORD2(v191) = v88;
        uint64_t v89 = sub_1CD7FF4E8((void *)a1, a2, a3, (llvm *)v192, (uint64_t)v193, v86, v80, v88);
        unint64_t v90 = v52;
        if (LOBYTE(v217[0]) == v192)
        {
          if ((_BYTE)v192) {
            goto LABEL_165;
          }
          unsigned int v91 = v217[1];
          if (v217[1] == v193) {
            goto LABEL_165;
          }
        }
        else
        {
          unsigned int v91 = v217[1];
        }
        uint64_t v92 = *(void *)(a1 + 832);
        if (v92) {
          uint64_t v93 = *(unsigned __int16 *)(v92 + 8);
        }
        else {
          uint64_t v93 = v189 & 0xF000;
        }
        unsigned __int16 v189 = v93;
        uint64_t v89 = (uint64_t *)sub_1CD7F3564(a1, 198, a3, v217[0], v91, v89, v52, v93);
        unint64_t v90 = v90 & 0xFFFFFFFF00000000 | v52;
LABEL_165:
        int v94 = *((unsigned __int16 *)v89 + 12);
        BOOL v95 = v94 != 51 && (v94 - 11) > 1;
        if (v95)
        {
          uint64_t v8 = 0;
          char v85 = 0;
        }
        else
        {
          if (LODWORD(v215[0]) >= (unint64_t)DWORD1(v215[0])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v96 = (uint64_t **)((char *)v214 + 16 * LODWORD(v215[0]));
          *uint64_t v96 = v89;
          v96[1] = (uint64_t *)v90;
          ++LODWORD(v215[0]);
          char v85 = 1;
        }
        uint64_t v54 = a1;
LABEL_147:
        if (__src != v213)
        {
          free(__src);
          uint64_t v54 = a1;
        }
        if ((v85 & 1) == 0) {
          goto LABEL_179;
        }
        if (++v200 == v196)
        {
          uint64_t v97 = (uint64_t *)v214;
LABEL_176:
          if (v190 == 0x100000000)
          {
            unint64_t v98 = (uint64_t *)sub_1CD787A68(v54, v209, v210, a3, *v97, v97[1]);
          }
          else
          {
            uint64_t v102 = *(void *)(v54 + 832);
            if (v102) {
              uint64_t v103 = *(unsigned __int16 *)(v102 + 8);
            }
            else {
              uint64_t v103 = 0;
            }
            unint64_t v98 = sub_1CD7FF4E8((void *)a1, (const char *)0x92, a3, v209, v210, v97, LODWORD(v215[0]), v103);
          }
          uint64_t v8 = (uint64_t)v98;
LABEL_179:
          unint64_t v99 = v214;
          if (v214 != (char *)v215 + 8) {
LABEL_180:
          }
            free(v99);
          return (uint64_t *)v8;
        }
      }
    }
    uint64_t v110 = *(void *)(**(void **)(*a6 + 32) + 80);
    uint64_t v111 = (void **)(v110 + 24);
    if (a2 == 58)
    {
      llvm::APInt::operator*((uint64_t)v111, &v214, (uint64_t)&__src);
LABEL_220:
      unsigned int v203 = v212;
      if (v212 > 0x40) {
        operator new[]();
      }
      unsigned int v202 = __src;
      uint64_t v8 = sub_1CD7EE5B8(a1, (const char *)a3, v209, v210, (llvm::LLVMContext *)&v202);
      if (v203 >= 0x41 && v202) {
        MEMORY[0x1D25D9CB0](v202, 0x1000C8000313F17);
      }
      if (v212 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      goto LABEL_251;
    }
    unint64_t v115 = *(unsigned int *)(v110 + 32);
    LODWORD(v212) = v115;
    if (v115 > 0x40) {
      operator new[]();
    }
    unsigned int v116 = *v111;
    unint64_t __src = *v111;
    if (LODWORD(v215[0]) >= 0x41)
    {
      int v133 = 0;
      int64_t v134 = ((unint64_t)LODWORD(v215[0]) + 63) >> 6;
      do
      {
        BOOL v95 = v134-- < 1;
        if (v95) {
          break;
        }
        unint64_t v135 = *((void *)v214 + v134);
        v133 += __clz(v135);
      }
      while (!v135);
      unsigned int v136 = LODWORD(v215[0]) | 0xFFFFFFC0;
      if ((v215[0] & 0x3F) == 0) {
        unsigned int v136 = 0;
      }
      int v118 = v115;
      if (LODWORD(v215[0]) - v133 - v136 > 0x40) {
        goto LABEL_215;
      }
      unint64_t v117 = *(void **)v214;
    }
    else
    {
      unint64_t v117 = v214;
    }
    int v118 = v115;
    if ((unint64_t)v117 <= v115) {
      int v118 = (int)v117;
    }
LABEL_215:
    uint64_t v119 = (void)v116 << v118;
    if (v115 == v118) {
      uint64_t v119 = 0;
    }
    if (v115) {
      unint64_t v120 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v115;
    }
    else {
      unint64_t v120 = 0;
    }
    unint64_t __src = (void *)(v120 & v119);
    goto LABEL_220;
  }
  if ((_BYTE)v35)
  {
    BOOL v36 = v35 - 120 >= 0x20 && v35 - 2 >= 6;
    if (v36 && v35 - 15 >= 0x3C) {
      goto LABEL_47;
    }
  }
  else
  {
    if ((*(_DWORD *)(v34 + 8) & 0xFE) == 0x12) {
      int v121 = *(unsigned __int8 *)(**(void **)(v34 + 16) + 8);
    }
    else {
      int v121 = *(_DWORD *)(v34 + 8);
    }
    if (v121 != 13) {
      goto LABEL_47;
    }
  }
  int8x8_t v122 = (unsigned __int8 *)(*(void *)(v23 + 40) + 16 * v30);
  if (v35 != *v122) {
    goto LABEL_47;
  }
  uint64_t v123 = *((void *)v122 + 1);
  if (!(_BYTE)v35 && v34 != v123) {
    goto LABEL_47;
  }
  int v195 = *(unsigned __int8 *)(*(void *)(**(void **)(a1 + 40) + 40) + 272);
  unsigned int v125 = sub_1CD3E12F4((unsigned __int8 *)&v209, v15, v16);
  unsigned int v231 = (char *)v233;
  uint64_t v232 = 0x300000000;
  unsigned int v228 = v230;
  uint64_t v229 = 0x300000000;
  uint64_t v214 = (char *)v215 + 8;
  *(void *)&v215[0] = 0x600000000;
  int v216 = 0;
  unint64_t __src = v213;
  uint64_t v212 = 0x600000000;
  v213[12] = 0;
  if (!sub_1CD7F505C(v31, v195 == 0, v125, (const llvm::APInt *)&v231, (uint64_t)&v214)
    || !sub_1CD7F505C(v32, v195 == 0, v125, (const llvm::APInt *)&v228, (uint64_t)&__src))
  {
    goto LABEL_239;
  }
  if (LODWORD(v215[0]))
  {
    long long v137 = v214;
    uint64_t v138 = 8 * LODWORD(v215[0]);
    do
    {
      if (*v137) {
        goto LABEL_239;
      }
      ++v137;
      v138 -= 8;
    }
    while (v138);
  }
  if (v212)
  {
    uint64_t v139 = __src;
    uint64_t v140 = 8 * v212;
    do
    {
      if (*v139) {
        goto LABEL_239;
      }
      ++v139;
      v140 -= 8;
    }
    while (v140);
  }
  unint64_t v225 = v227;
  uint64_t v226 = 0x300000000;
  if (!v17) {
    goto LABEL_310;
  }
  for (uint64_t j = 0; 16 * v17 != j; j += 16)
  {
    sub_1CCFDD6E0((uint64_t)v219, (int)a2, (llvm::APInt *)&v231[j], (llvm::APInt *)&v228[j]);
    if (!v220[0]) {
      break;
    }
    int64_t v142 = (char *)v225;
    if (v226 >= HIDWORD(v226))
    {
      unint64_t v146 = v226 + 1;
      if (v225 > v219 || (char *)v225 + 16 * v226 <= (char *)v219)
      {
        sub_1CBFC6948((uint64_t)&v225, v146);
        BOOL v194 = v219;
        int64_t v142 = (char *)v225;
        goto LABEL_288;
      }
      int64_t v147 = (char *)v219 - (unsigned char *)v225;
      sub_1CBFC6948((uint64_t)&v225, v146);
      int64_t v142 = (char *)v225;
      unint64_t v143 = (void **)((char *)v225 + v147);
    }
    else
    {
      unint64_t v143 = v219;
    }
    BOOL v194 = v143;
LABEL_288:
    int v144 = &v142[16 * v226];
    unsigned int v145 = *((_DWORD *)v194 + 2);
    *((_DWORD *)v144 + 2) = v145;
    if (v145 > 0x40) {
      operator new[]();
    }
    *(void *)int v144 = *v194;
    LODWORD(v226) = v226 + 1;
    if (v220[0] && LODWORD(v219[1]) >= 0x41 && v219[0]) {
      MEMORY[0x1D25D9CB0](v219[0], 0x1000C8000313F17);
    }
  }
  if (v226 != v17)
  {
    int v148 = (char *)v225;
    if (v226)
    {
      uint64_t v149 = 16 * v226;
      do
      {
        if (*(_DWORD *)&v148[v149 - 8] >= 0x41u)
        {
          uint64_t v150 = *(void *)&v148[v149 - 16];
          if (v150) {
            MEMORY[0x1D25D9CB0](v150, 0x1000C8000313F17);
          }
        }
        v149 -= 16;
      }
      while (v149);
      int v148 = (char *)v225;
    }
    if (v148 != v227) {
      free(v148);
    }
LABEL_239:
    if (__src != v213) {
      free(__src);
    }
    if (v214 != (char *)v215 + 8) {
      free(v214);
    }
    uint64_t v126 = v228;
    if (v229)
    {
      uint64_t v127 = 16 * v229;
      do
      {
        if (*(_DWORD *)&v126[v127 - 8] >= 0x41u)
        {
          uint64_t v128 = *(void *)&v126[v127 - 16];
          if (v128) {
            MEMORY[0x1D25D9CB0](v128, 0x1000C8000313F17);
          }
        }
        v127 -= 16;
      }
      while (v127);
      uint64_t v126 = v228;
    }
    if (v126 != v230) {
      free(v126);
    }
    uint64_t v130 = v231;
    if (v232)
    {
      uint64_t v131 = 16 * v232;
      do
      {
        if (*(_DWORD *)&v130[v131 - 8] >= 0x41u)
        {
          uint64_t v132 = *(void *)&v130[v131 - 16];
          if (v132) {
            MEMORY[0x1D25D9CB0](v132, 0x1000C8000313F17);
          }
        }
        v131 -= 16;
      }
      while (v131);
      uint64_t v130 = v231;
    }
    if (v130 != (char *)v233) {
      free(v130);
    }
    goto LABEL_47;
  }
LABEL_310:
  uint64_t v222 = v224;
  uint64_t v223 = 0x300000000;
  v219[0] = v220;
  v219[1] = (void *)0x600000000;
  int v221 = 0;
  unsigned int v151 = sub_1CD3E12F4((unsigned __int8 *)&v207, v15, v16);
  unsigned int v152 = v225;
  unsigned int v153 = v226;
  uint64_t v154 = (v226 + 63) >> 6;
  v217[0] = v218;
  HIDWORD(v217[1]) = 6;
  if ((v226 + 63) >= 0x1C0)
  {
    LODWORD(v217[1]) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v226 + 63) >= 0x40) {
    bzero(v218, 8 * v154);
  }
  LODWORD(v217[1]) = v154;
  v218[12] = v153;
  sub_1CD7F5310(v195 == 0, v151, (const llvm::APInt *)&v222, (uint64_t)v152, v153, (uint64_t)v219, v217);
  if (v217[0] != v218) {
    free(v217[0]);
  }
  long long v206 = *(_OWORD *)(*(void *)(**(void **)(v31 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(v31 + 32) + 8));
  if ((_BYTE)v206) {
    unsigned int v155 = sub_1CB87E200((unsigned __int8 *)&v206);
  }
  else {
    unsigned int v155 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v206);
  }
  unsigned int v157 = v155;
  if (v156 == 1) {
  unint64_t v158 = v223;
  }
  unint64_t v159 = sub_1CD3DD4D8(a1, (llvm *)v206, *((uint64_t *)&v206 + 1));
  v217[0] = v218;
  v217[1] = (void *)0x300000000;
  sub_1CD3E535C((uint64_t *)v217, v158, (uint64_t)v159, v160);
  if (v223)
  {
    uint64_t v166 = 0;
    unsigned int v167 = 0;
    uint64_t v168 = 16 * v223;
    do
    {
      if (((*((void *)v219[0] + (v167 >> 6)) >> v167) & 1) == 0)
      {
        unsigned int v169 = *(_DWORD *)((char *)v222 + v166 + 8);
        if (v169 < v157)
        {
          llvm::APInt::sext((uint64_t)v222 + v166, v157, (uint64_t)&v204);
        }
        else
        {
          unsigned int v205 = *(_DWORD *)((char *)v222 + v166 + 8);
          if (v169 > 0x40) {
            operator new[]();
          }
          uint64_t v204 = *(void *)((char *)v222 + v166);
        }
        long long v170 = v206;
        unsigned int v171 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)&v204, v161);
        uint64_t v172 = sub_1CD7EC028(a1, v171, a3, v170, *((void *)&v170 + 1), 0, 0);
        unint64_t v173 = (char *)v217[0] + v166;
        *(void *)unint64_t v173 = v172;
        *((_DWORD *)v173 + 2) = v174;
        if (v205 >= 0x41 && v204) {
          MEMORY[0x1D25D9CB0](v204, 0x1000C8000313F17);
        }
      }
      ++v167;
      v166 += 16;
    }
    while (v168 != v166);
  }
  uint64_t v162 = v209;
  uint64_t v163 = v210;
  uint64_t v164 = *(void *)(a1 + 832);
  if (v164) {
    uint64_t v165 = *(unsigned __int16 *)(v164 + 8);
  }
  else {
    uint64_t v165 = 0;
  }
  BOOL v175 = sub_1CD7FF4E8((void *)a1, (const char *)0x92, a3, v207, v208, (uint64_t *)v217[0], LODWORD(v217[1]), v165);
  uint64_t v8 = sub_1CD7EF724(a1, (uint64_t)v162, v163, (uint64_t)v175, v176);
  if (v217[0] != v218) {
    free(v217[0]);
  }
  if (v219[0] != v220) {
    free(v219[0]);
  }
  unsigned int v177 = (char *)v222;
  if (v223)
  {
    uint64_t v178 = 16 * v223;
    do
    {
      if (*(_DWORD *)&v177[v178 - 8] >= 0x41u)
      {
        uint64_t v179 = *(void *)&v177[v178 - 16];
        if (v179) {
          MEMORY[0x1D25D9CB0](v179, 0x1000C8000313F17);
        }
      }
      v178 -= 16;
    }
    while (v178);
    unsigned int v177 = (char *)v222;
  }
  if (v177 != v224) {
    free(v177);
  }
  unint64_t v180 = (char *)v225;
  if (v226)
  {
    uint64_t v181 = 16 * v226;
    do
    {
      if (*(_DWORD *)&v180[v181 - 8] >= 0x41u)
      {
        uint64_t v182 = *(void *)&v180[v181 - 16];
        if (v182) {
          MEMORY[0x1D25D9CB0](v182, 0x1000C8000313F17);
        }
      }
      v181 -= 16;
    }
    while (v181);
    unint64_t v180 = (char *)v225;
  }
  if (v180 != v227) {
    free(v180);
  }
  if (__src != v213) {
    free(__src);
  }
  if (v214 != (char *)v215 + 8) {
    free(v214);
  }
  int64_t v183 = v228;
  if (v229)
  {
    uint64_t v184 = 16 * v229;
    do
    {
      if (*(_DWORD *)&v183[v184 - 8] >= 0x41u)
      {
        uint64_t v185 = *(void *)&v183[v184 - 16];
        if (v185) {
          MEMORY[0x1D25D9CB0](v185, 0x1000C8000313F17);
        }
      }
      v184 -= 16;
    }
    while (v184);
    int64_t v183 = v228;
  }
  if (v183 != v230) {
    free(v183);
  }
  unsigned int v186 = v231;
  if (v232)
  {
    uint64_t v187 = 16 * v232;
    do
    {
      if (*(_DWORD *)&v186[v187 - 8] >= 0x41u)
      {
        uint64_t v188 = *(void *)&v186[v187 - 16];
        if (v188) {
          MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
        }
      }
      v187 -= 16;
    }
    while (v187);
    unsigned int v186 = v231;
  }
  if (v186 != (char *)v233)
  {
    unint64_t v99 = v186;
    goto LABEL_180;
  }
  return (uint64_t *)v8;
}

uint64_t *sub_1CCFDD248(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    return sub_1CD3DD4D8(a5, a1, a2);
  }
  uint64_t v6 = 16 * a4;
  for (uint64_t i = a3; *(_WORD *)(*(void *)i + 24) == 51; i += 16)
  {
    v6 -= 16;
    if (!v6) {
      return sub_1CD3DD4D8(a5, a1, a2);
    }
  }
  if (a4)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    int v12 = a1;
    while (1)
    {
      uint64_t v13 = *(void *)(a3 + 16 * v9);
      if (*(_WORD *)(v13 + 24) != 148) {
        break;
      }
      uint64_t v14 = *(void *)(v13 + 32);
      uint64_t result = *(uint64_t **)v14;
      unsigned int v15 = *(_DWORD *)(v14 + 8);
      BOOL v16 = (unsigned __int8 *)(*(void *)(*(void *)v14 + 40) + 16 * v15);
      if (*v16 != v12 || !v12 && *((void *)v16 + 1) != a2) {
        break;
      }
      if (v10)
      {
        if (result != v10 || v15 != v11) {
          break;
        }
      }
      uint64_t v18 = *(void *)(v14 + 40);
      int v19 = *(unsigned __int16 *)(v18 + 24);
      if (v19 != 35 && v19 != 11) {
        break;
      }
      uint64_t v21 = *(void *)(v18 + 80);
      BOOL v22 = (void *)(v21 + 24);
      uint64_t v23 = *(unsigned int *)(v21 + 32);
      if (v23 >= 0x41)
      {
        int v24 = 0;
        int64_t v25 = (unint64_t)(v23 + 63) >> 6;
        do
        {
          if (v25-- < 1) {
            break;
          }
          unint64_t v27 = *(void *)(*v22 + 8 * v25);
          v24 += __clz(v27);
        }
        while (!v27);
        int v28 = v23 | 0xFFFFFFC0;
        if ((v23 & 0x3F) == 0) {
          int v28 = 0;
        }
        if ((v23 - v24 - v28) > 0x40) {
          return 0;
        }
        BOOL v22 = (void *)*v22;
      }
      if (*v22 != v9) {
        return 0;
      }
      ++v9;
      uint64_t v10 = result;
      unsigned int v11 = v15;
      if (v9 == a4) {
        return result;
      }
    }
  }
  return 0;
}

void sub_1CCFDD3A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, unsigned int a7, int a8)
{
  v57[2] = *MEMORY[0x1E4F143B8];
  if (a2 != a4 && (*(unsigned char *)(a2 + 26) & 1) != 0)
  {
    uint64_t v13 = v57;
    int v55 = v57;
    uint64_t v56 = 0x200000000;
    uint64_t v14 = *(void *)(a1 + 616);
    uint64_t v15 = sub_1CCF9A240(v14 + 688, a2);
    if (*(void *)(v14 + 688) + 40 * *(unsigned int *)(v14 + 704) != v15)
    {
      uint64_t v16 = *(unsigned int *)(v15 + 16);
      if (v16)
      {
        unint64_t v17 = *(uint64_t **)(v15 + 8);
        uint64_t v18 = &v17[v16];
        unint64_t v38 = a7 + a6;
        unsigned int v41 = a6;
        unsigned int v42 = a7;
        while (1)
        {
          uint64_t v19 = *v17;
          if (!*(unsigned char *)(*v17 + 62)) {
            break;
          }
LABEL_7:
          if (++v17 == v18) {
            goto LABEL_28;
          }
        }
        int v20 = v13;
        char v51 = 0;
        uint64_t v21 = *(unsigned char **)(v19 + 8);
        BOOL v22 = &v21[24 * *(void *)v19];
        uint64_t v52 = v54;
        uint64_t v53 = 0x200000000;
        sub_1CCD286A0((unsigned int *)&v52, v21, v22);
        uint64_t v23 = v52;
        unsigned int v47 = &v51;
        int v48 = 0;
        uint64_t v49 = a2;
        int v50 = a3;
        char v24 = v51;
        unint64_t v39 = v52;
        if (v53)
        {
          uint64_t v25 = 24 * v53;
          do
          {
            int v26 = sub_1CD806674((uint64_t)v23, (uint64_t)&v48);
            v24 |= v26;
            char v51 = v24;
            if (v26)
            {
              *(_DWORD *)uint64_t v23 = 0;
              v23[1] = a4;
              *((_DWORD *)v23 + 4) = a5;
            }
            v23 += 3;
            v25 -= 24;
          }
          while (v25);
        }
        BOOL v27 = v24 == 0;
        uint64_t v13 = v20;
        if (!v27)
        {
          uint64_t v28 = *(void *)(v19 + 32);
          int v29 = *(uint64_t ***)(v19 + 40);
          if (v42)
          {
            uint64_t v37 = *(void *)(v19 + 32);
            llvm::DIExpression::getFragmentInfo(v29[3], v29[4], &v45);
            if (v46 && v45.i64[0] < v38) {
              goto LABEL_19;
            }
            FragmentExpression = llvm::DIExpression::createFragmentExpression((llvm::DIExpression *)v29, (const llvm::DIExpression *)v41, v42);
            if (!v31) {
              goto LABEL_19;
            }
            int v29 = (uint64_t **)FragmentExpression;
            unint64_t v39 = v52;
            uint64_t v28 = v37;
          }
          unsigned int v32 = *(_DWORD *)(a4 + 60);
          if (v32 <= *(_DWORD *)(v19 + 56)) {
            unsigned int v32 = *(_DWORD *)(v19 + 56);
          }
          uint64_t v33 = sub_1CD801CEC(a1, v28, (uint64_t)v29, v39, v53, *(const void **)(v19 + 24), *(void *)(v19 + 16), *(unsigned char *)(v19 + 60), (unsigned __int8 **)(v19 + 48), v32, *(unsigned char *)(v19 + 61));
          if (v56 >= (unint64_t)HIDWORD(v56)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v55[v56] = v33;
          LODWORD(v56) = v56 + 1;
          if (a8) {
            *(_WORD *)(v19 + 62) = 257;
          }
        }
LABEL_19:
        if (v52 != v54) {
          free(v52);
        }
        goto LABEL_7;
      }
    }
LABEL_28:
    uint64_t v34 = v55;
    if (v56)
    {
      uint64_t v35 = 8 * v56;
      do
      {
        BOOL v36 = (void *)*v34++;
        sub_1CD801DD0(a1, v36, 0);
        v35 -= 8;
      }
      while (v35);
      uint64_t v34 = v55;
    }
    if (v34 != v13) {
      free(v34);
    }
  }
}

void sub_1CCFDD6E0(uint64_t a1, int a2, llvm::APInt *this, llvm::APInt *a4)
{
  uint64_t v4 = a4;
  switch(a2)
  {
    case 159:
      int v7 = *((_DWORD *)this + 2);
      int v8 = 2 * v7;
      if ((2 * v7) > 0x40)
      {
        if (v7) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&__src, (uint64_t)this);
        if (*((_DWORD *)v4 + 2) != v8) {
          operator new[]();
        }
        sub_1CD0463BC((uint64_t)&v107, (uint64_t)v4);
      }
      else
      {
        uint64_t v9 = *(void *)this;
        unsigned int v110 = 2 * v7;
        if (v8)
        {
          unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> ((-2 * v7) & 0x3E);
          unint64_t __src = (void *)(v10 & v9);
        }
        else
        {
          unint64_t v10 = 0;
          unint64_t __src = 0;
        }
        uint64_t v11 = *(void *)a4;
        unsigned int v108 = v8;
        unint64_t v107 = v10 & v11;
      }
      goto LABEL_21;
    case 160:
      unsigned int v17 = 2 * *((_DWORD *)this + 2);
      llvm::APInt::sext((uint64_t)this, v17, (uint64_t)&__src);
      llvm::APInt::sext((uint64_t)v4, v17, (uint64_t)&v107);
LABEL_21:
      llvm::APInt::operator*((uint64_t)&__src, &v107, (uint64_t)&v103);
      llvm::APInt::extractBits((uint64_t)&v103, *((_DWORD *)this + 2), *((_DWORD *)this + 2), (uint64_t)&v105);
      *(_DWORD *)(a1 + 8) = v106;
      *(void *)a1 = v105;
      unsigned int v106 = 0;
      *(unsigned char *)(a1 + 16) = 1;
      goto LABEL_102;
    case 161:
      unsigned int v40 = *((_DWORD *)this + 2) + 1;
      llvm::APInt::sext((uint64_t)this, v40, (uint64_t)&__src);
      llvm::APInt::sext((uint64_t)v4, v40, (uint64_t)&v107);
      if (v110 >= 0x41) {
        operator new[]();
      }
      unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v110;
      if (!v110) {
        unint64_t v41 = 0;
      }
      unsigned int v104 = v110;
      unint64_t v103 = v41 & ((unint64_t)__src + v107);
      llvm::APInt::extractBits((uint64_t)&v103, *((_DWORD *)this + 2), 1u, (uint64_t)&v105);
      *(_DWORD *)(a1 + 8) = v106;
      *(void *)a1 = v105;
      unsigned int v106 = 0;
      *(unsigned char *)(a1 + 16) = 1;
LABEL_102:
      if (v104 < 0x41) {
        goto LABEL_112;
      }
      unint64_t v51 = v103;
      if (!v103) {
        goto LABEL_112;
      }
      goto LABEL_111;
    case 162:
      int v27 = *((_DWORD *)this + 2);
      if ((v27 + 1) > 0x40) {
        operator new[]();
      }
      if (v27 == -1)
      {
        unint64_t v29 = 0;
        unint64_t v28 = 0;
      }
      else
      {
        unint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v27;
        unint64_t v29 = v28 & *(void *)this;
      }
      uint64_t v30 = *(void *)a4;
      unsigned int v110 = v27 + 1;
      unint64_t __src = (void *)(v28 & v30);
      unint64_t v31 = (v28 & v30) + v29;
      unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v27;
      if (v27 == -1) {
        unint64_t v32 = 0;
      }
      unsigned int v106 = v27 + 1;
      unint64_t v105 = v32 & v31;
      llvm::APInt::extractBits((uint64_t)&v105, *((_DWORD *)this + 2), 1u, (uint64_t)&v107);
      *(_DWORD *)(a1 + 8) = v108;
      *(void *)a1 = v107;
      unsigned int v108 = 0;
      *(unsigned char *)(a1 + 16) = 1;
      if (v106 < 0x41) {
        goto LABEL_58;
      }
      unint64_t v33 = v105;
      if (!v105) {
        goto LABEL_58;
      }
      goto LABEL_57;
    case 163:
      unsigned int v42 = *((_DWORD *)this + 2) + 1;
      llvm::APInt::sext((uint64_t)this, v42, (uint64_t)&__src);
      llvm::APInt::sext((uint64_t)v4, v42, (uint64_t)&v107);
      if (v110 >= 0x41) {
        operator new[]();
      }
      unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v110;
      if (!v110) {
        unint64_t v43 = 0;
      }
      unsigned int v102 = v110;
      unint64_t v101 = v43 & ((unint64_t)__src + v107);
      llvm::APInt::operator+=((uint64_t)&v101, 1uLL);
      unsigned int v104 = v102;
      unint64_t v103 = v101;
      unsigned int v102 = 0;
      llvm::APInt::extractBits((uint64_t)&v103, *((_DWORD *)this + 2), 1u, (uint64_t)&v105);
      *(_DWORD *)(a1 + 8) = v106;
      *(void *)a1 = v105;
      unsigned int v106 = 0;
      *(unsigned char *)(a1 + 16) = 1;
      if (v104 >= 0x41 && v103) {
        MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
      }
      if (v102 >= 0x41)
      {
        unint64_t v51 = v101;
        if (v101) {
LABEL_111:
        }
          MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
      }
LABEL_112:
      if (v108 >= 0x41 && v107) {
        MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
      }
      if (v110 >= 0x41)
      {
        if (__src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
      }
      return;
    case 164:
      int v34 = *((_DWORD *)this + 2);
      if ((v34 + 1) > 0x40) {
        operator new[]();
      }
      if (v34 == -1)
      {
        unint64_t v36 = 0;
        unint64_t v35 = 0;
      }
      else
      {
        unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v34;
        unint64_t v36 = v35 & *(void *)this;
      }
      uint64_t v37 = *(void *)a4;
      unsigned int v110 = v34 + 1;
      unint64_t __src = (void *)(v35 & v37);
      unint64_t v38 = (v35 & v37) + v36;
      unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v34;
      if (v34 == -1) {
        unint64_t v39 = 0;
      }
      unsigned int v100 = v34 + 1;
      unint64_t v99 = v39 & v38;
      llvm::APInt::operator+=((uint64_t)&v99, 1uLL);
      unsigned int v106 = v100;
      unint64_t v105 = v99;
      unsigned int v100 = 0;
      llvm::APInt::extractBits((uint64_t)&v105, *((_DWORD *)this + 2), 1u, (uint64_t)&v107);
      *(_DWORD *)(a1 + 8) = v108;
      *(void *)a1 = v107;
      unsigned int v108 = 0;
      *(unsigned char *)(a1 + 16) = 1;
      if (v106 >= 0x41 && v105) {
        MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
      }
      if (v100 >= 0x41)
      {
        unint64_t v33 = v99;
        if (v99) {
LABEL_57:
        }
          MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
      }
LABEL_58:
      if (v110 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      return;
    case 165:
    case 166:
    case 174:
      goto LABEL_160;
    case 167:
      uint64_t v18 = *((unsigned int *)this + 2);
      if (v18 <= 0x40)
      {
        uint64_t v19 = -v18;
        uint64_t v20 = (uint64_t)(*(void *)this << v19) >> v19;
        uint64_t v21 = (uint64_t)(*(void *)a4 << v19) >> v19;
        if (v20 < v21 || v20 <= v21) {
          goto LABEL_35;
        }
        goto LABEL_36;
      }
      uint64_t v73 = *(void *)(*(void *)this + 8 * ((v18 - 1) >> 6)) & (1 << (v18 - 1));
      unsigned int v74 = *((_DWORD *)a4 + 2);
      unsigned int v75 = v74 - 1;
      if (v74 >= 0x41) {
        unsigned int v76 = (llvm::APInt *)(*(void *)a4 + 8 * (v75 >> 6));
      }
      else {
        unsigned int v76 = a4;
      }
      if ((v73 != 0) != ((*(void *)v76 >> v75) & 1))
      {
        if (!v73) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
      unint64_t v81 = ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v81) {
          goto LABEL_35;
        }
        unint64_t v82 = *(void *)(*(void *)this - 8 + v81);
        unint64_t v83 = *(void *)(*(void *)a4 - 8 + v81);
        v81 -= 8;
        BOOL v15 = v82 > v83;
      }
      while (v82 == v83);
      goto LABEL_15;
    case 168:
      uint64_t v23 = *((unsigned int *)this + 2);
      if (v23 <= 0x40)
      {
        if ((uint64_t)(*(void *)this << -(char)v23) >> -(char)v23 < (uint64_t)(*(void *)a4 << -(char)v23) >> -(char)v23) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
      uint64_t v77 = *(void *)(*(void *)this + 8 * ((v23 - 1) >> 6)) & (1 << (v23 - 1));
      unsigned int v78 = *((_DWORD *)a4 + 2);
      unsigned int v79 = v78 - 1;
      if (v78 >= 0x41) {
        unsigned int v80 = (llvm::APInt *)(*(void *)a4 + 8 * (v79 >> 6));
      }
      else {
        unsigned int v80 = a4;
      }
      if ((v77 != 0) != ((*(void *)v80 >> v79) & 1))
      {
        if (!v77) {
          goto LABEL_35;
        }
        goto LABEL_36;
      }
      unint64_t v84 = ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v84) {
          goto LABEL_35;
        }
        unint64_t v85 = *(void *)(*(void *)this - 8 + v84);
        unint64_t v86 = *(void *)(*(void *)a4 - 8 + v84);
        v84 -= 8;
        BOOL v87 = v85 > v86;
      }
      while (v85 == v86);
      goto LABEL_210;
    case 169:
      uint64_t v14 = *((unsigned int *)this + 2);
      if (v14 > 0x40)
      {
        unint64_t v93 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v93) {
            goto LABEL_35;
          }
          unint64_t v94 = *(void *)(*(void *)this - 8 + v93);
          unint64_t v95 = *(void *)(*(void *)a4 - 8 + v93);
          v93 -= 8;
          BOOL v15 = v94 > v95;
        }
        while (v94 == v95);
      }
      else
      {
        BOOL v15 = *(void *)this >= *(void *)a4 && *(void *)this > *(void *)a4;
      }
LABEL_15:
      if (v15) {
        goto LABEL_36;
      }
      goto LABEL_35;
    case 170:
      uint64_t v24 = *((unsigned int *)this + 2);
      if (v24 <= 0x40)
      {
        if (*(void *)this < *(void *)a4) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
      unint64_t v96 = ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v96) {
          goto LABEL_35;
        }
        unint64_t v97 = *(void *)(*(void *)this - 8 + v96);
        unint64_t v98 = *(void *)(*(void *)a4 - 8 + v96);
        v96 -= 8;
        BOOL v87 = v97 > v98;
      }
      while (v97 == v98);
LABEL_210:
      if (v87) {
LABEL_35:
      }
        uint64_t v4 = this;
LABEL_36:
      unsigned int v25 = *((_DWORD *)v4 + 2);
      *(_DWORD *)(a1 + 8) = v25;
      if (v25 > 0x40) {
        operator new[]();
      }
      unint64_t v26 = *(void *)v4;
      goto LABEL_163;
    case 171:
      unsigned int v12 = *((_DWORD *)this + 2);
      if (v12 > 0x40) {
        operator new[]();
      }
      uint64_t v13 = *(void *)this;
      unint64_t v16 = *(void *)a4;
LABEL_89:
      unint64_t v44 = v16 & v13;
      goto LABEL_153;
    case 172:
      unsigned int v12 = *((_DWORD *)this + 2);
      if (v12 > 0x40) {
        operator new[]();
      }
      unint64_t v44 = *(void *)a4 | *(void *)this;
      goto LABEL_153;
    case 173:
      unsigned int v12 = *((_DWORD *)this + 2);
      if (v12 > 0x40) {
        operator new[]();
      }
      unint64_t v44 = *(void *)a4 ^ *(void *)this;
LABEL_153:
      *(_DWORD *)(a1 + 8) = v12;
      *(void *)a1 = v44;
      goto LABEL_164;
    case 175:
      unint64_t v45 = *((unsigned int *)this + 2);
      unsigned int v110 = v45;
      if (v45 > 0x40) {
        operator new[]();
      }
      uint64_t v46 = *(void *)this;
      unint64_t __src = *(void **)this;
      uint64_t v52 = *((unsigned int *)a4 + 2);
      if (v52 < 0x41)
      {
        unint64_t v53 = *(void *)a4;
        goto LABEL_123;
      }
      int v88 = 0;
      int64_t v89 = (unint64_t)(v52 + 63) >> 6;
      unint64_t v90 = *(unint64_t **)a4;
      do
      {
        BOOL v15 = v89-- < 1;
        if (v15) {
          break;
        }
        unint64_t v91 = v90[v89];
        v88 += __clz(v91);
      }
      while (!v91);
      int v92 = v52 | 0xFFFFFFC0;
      if ((v52 & 0x3F) == 0) {
        int v92 = 0;
      }
      int v54 = v45;
      if ((v52 - v88 - v92) <= 0x40)
      {
        unint64_t v53 = *v90;
LABEL_123:
        int v54 = v45;
        if (v53 <= v45) {
          int v54 = v53;
        }
      }
      uint64_t v55 = v46 << v54;
      if (v45 == v54) {
        uint64_t v55 = 0;
      }
      unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v45;
      if (!v45) {
        unint64_t v56 = 0;
      }
      unint64_t v26 = v56 & v55;
      *(_DWORD *)(a1 + 8) = v45;
LABEL_163:
      *(void *)a1 = v26;
LABEL_164:
      *(unsigned char *)(a1 + 16) = 1;
      return;
    case 176:
      unsigned int v110 = *((_DWORD *)this + 2);
      if (v110 > 0x40) {
        operator new[]();
      }
      unint64_t __src = *(void **)this;
      llvm::APInt::ashrInPlace((unsigned int *)&__src, a4);
      goto LABEL_162;
    case 177:
      unsigned int v110 = *((_DWORD *)this + 2);
      if (v110 > 0x40) {
        operator new[]();
      }
      unint64_t __src = *(void **)this;
      llvm::APInt::lshrInPlace((llvm::APInt *)&__src, a4);
      goto LABEL_162;
    case 178:
      llvm::APInt::rotl(this, a4, (uint64_t)&__src);
      goto LABEL_162;
    case 179:
      llvm::APInt::rotr(this, a4, (uint64_t)&__src);
LABEL_162:
      *(_DWORD *)(a1 + 8) = v110;
      unint64_t v26 = (unint64_t)__src;
      goto LABEL_163;
    default:
      switch(a2)
      {
        case '8':
          unsigned int v12 = *((_DWORD *)this + 2);
          if (v12 >= 0x41) {
            operator new[]();
          }
          uint64_t v13 = *(void *)a4 + *(void *)this;
          goto LABEL_87;
        case '9':
          unsigned int v12 = *((_DWORD *)this + 2);
          if (v12 >= 0x41) {
            operator new[]();
          }
          uint64_t v13 = *(void *)this - *(void *)a4;
LABEL_87:
          unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
          if (!v12) {
            unint64_t v16 = 0;
          }
          goto LABEL_89;
        case ':':
          llvm::APInt::operator*((uint64_t)this, a4, (uint64_t)&__src);
          goto LABEL_162;
        case ';':
          uint64_t v50 = *((unsigned int *)a4 + 2);
          if (v50 <= 0x40)
          {
            if (!*(void *)a4) {
              goto LABEL_160;
            }
            goto LABEL_161;
          }
          int v69 = 0;
          int64_t v70 = (unint64_t)(v50 + 63) >> 6;
          do
          {
            BOOL v15 = v70-- < 1;
            if (v15) {
              break;
            }
            unint64_t v71 = *(void *)(*(void *)a4 + 8 * v70);
            v69 += __clz(v71);
          }
          while (!v71);
          int v72 = v50 | 0xFFFFFFC0;
          if ((v50 & 0x3F) == 0) {
            int v72 = 0;
          }
          if (v69 + v72 != v50)
          {
LABEL_161:
            llvm::APInt::sdiv(this, a4, (uint64_t)&__src);
            goto LABEL_162;
          }
          goto LABEL_160;
        case '<':
          uint64_t v48 = *((unsigned int *)a4 + 2);
          if (v48 <= 0x40)
          {
            if (!*(void *)a4) {
              goto LABEL_160;
            }
            goto LABEL_143;
          }
          int v61 = 0;
          int64_t v62 = (unint64_t)(v48 + 63) >> 6;
          do
          {
            BOOL v15 = v62-- < 1;
            if (v15) {
              break;
            }
            unint64_t v63 = *(void *)(*(void *)a4 + 8 * v62);
            v61 += __clz(v63);
          }
          while (!v63);
          int v64 = v48 | 0xFFFFFFC0;
          if ((v48 & 0x3F) == 0) {
            int v64 = 0;
          }
          if (v61 + v64 != v48)
          {
LABEL_143:
            llvm::APInt::udiv((uint64_t)this, a4, (uint64_t)&__src);
            goto LABEL_162;
          }
          goto LABEL_160;
        case '=':
          uint64_t v49 = *((unsigned int *)a4 + 2);
          if (v49 <= 0x40)
          {
            if (!*(void *)a4) {
              goto LABEL_160;
            }
            goto LABEL_150;
          }
          int v65 = 0;
          int64_t v66 = (unint64_t)(v49 + 63) >> 6;
          do
          {
            BOOL v15 = v66-- < 1;
            if (v15) {
              break;
            }
            unint64_t v67 = *(void *)(*(void *)a4 + 8 * v66);
            v65 += __clz(v67);
          }
          while (!v67);
          int v68 = v49 | 0xFFFFFFC0;
          if ((v49 & 0x3F) == 0) {
            int v68 = 0;
          }
          if (v65 + v68 != v49)
          {
LABEL_150:
            llvm::APInt::srem(this, a4, (uint64_t)&__src);
            goto LABEL_162;
          }
          goto LABEL_160;
        case '>':
          uint64_t v47 = *((unsigned int *)a4 + 2);
          if (v47 <= 0x40)
          {
            if (!*(void *)a4) {
              goto LABEL_160;
            }
            goto LABEL_136;
          }
          int v57 = 0;
          int64_t v58 = (unint64_t)(v47 + 63) >> 6;
          do
          {
            BOOL v15 = v58-- < 1;
            if (v15) {
              break;
            }
            unint64_t v59 = *(void *)(*(void *)a4 + 8 * v58);
            v57 += __clz(v59);
          }
          while (!v59);
          int v60 = v47 | 0xFFFFFFC0;
          if ((v47 & 0x3F) == 0) {
            int v60 = 0;
          }
          if (v57 + v60 != v47)
          {
LABEL_136:
            llvm::APInt::urem(this, a4, (uint64_t)&__src);
            goto LABEL_162;
          }
LABEL_160:
          *(unsigned char *)a1 = 0;
          *(unsigned char *)(a1 + 16) = 0;
          return;
        case 'R':
          llvm::APInt::sadd_sat(this, a4, (uint64_t)&__src);
          goto LABEL_162;
        case 'S':
          llvm::APInt::uadd_sat(this, a4, (uint64_t)&__src);
          goto LABEL_162;
        case 'T':
          llvm::APInt::ssub_sat(this, a4, (llvm::APInt *)&__src);
          goto LABEL_162;
        case 'U':
          llvm::APInt::usub_sat(this, a4, (uint64_t)&__src);
          goto LABEL_162;
        case 'V':
          llvm::APInt::sshl_sat(this, a4, (llvm::APInt *)&__src);
          goto LABEL_162;
        case 'W':
          llvm::APInt::ushl_sat(this, a4, (uint64_t)&__src);
          goto LABEL_162;
        default:
          goto LABEL_160;
      }
  }
}

uint64_t sub_1CCFDEC10(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  int v4 = *(unsigned __int16 *)(a1 + 24);
  if (v4 == 12 || v4 == 36) {
    return v3;
  }
  if (!a1 || v4 != 146) {
    goto LABEL_5;
  }
  BOOL v15 = v17;
  uint64_t v16 = 0x600000000;
  v17[12] = 0;
  uint64_t v10 = sub_1CD7EE8F8(a1, (uint64_t)&v15);
  if (!v10) {
    goto LABEL_22;
  }
  uint64_t v3 = v10;
  int v11 = *(unsigned __int16 *)(v10 + 24);
  if (v11 != 36 && v11 != 12) {
    goto LABEL_22;
  }
  unsigned int v12 = v15;
  if (!v16) {
    goto LABEL_21;
  }
  uint64_t v13 = 0;
  while (!*(void *)((char *)v15 + v13))
  {
    v13 += 8;
    if (8 * v16 == v13) {
      goto LABEL_21;
    }
  }
  if (a3)
  {
LABEL_21:
    int v14 = 0;
  }
  else
  {
LABEL_22:
    uint64_t v3 = 0;
    int v14 = 1;
    unsigned int v12 = v15;
  }
  if (v12 != v17) {
    free(v12);
  }
  if (v14)
  {
    int v4 = *(unsigned __int16 *)(a1 + 24);
LABEL_5:
    if (v4 != 156) {
      return 0;
    }
    uint64_t v3 = **(void **)(a1 + 32);
    int v6 = *(unsigned __int16 *)(v3 + 24);
    if (v6 != 36 && v6 != 12) {
      return 0;
    }
  }
  return v3;
}

uint64_t *sub_1CCFDED5C(uint64_t a1, uint64_t a2, const llvm::APInt *a3, llvm *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11)
{
  uint64_t v258 = *MEMORY[0x1E4F143B8];
  BOOL v246 = a4;
  uint64_t v247 = a5;
  *(void *)&long long v245 = a6;
  *((void *)&v245 + 1) = a7;
  uint64_t v243 = a9;
  uint64_t v244 = a10;
  int v242 = a2;
  sub_1CD7F57F4(a1, a2, &v245, (uint64_t)&v243);
  uint64_t v14 = v245;
  int v15 = *(unsigned __int16 *)(v245 + 24);
  BOOL v16 = v15 == 35 || v15 == 11;
  unsigned int v231 = a3;
  if (v16) {
    uint64_t v17 = v245;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v19 = v243;
  uint64_t v18 = v244;
  int v20 = *(unsigned __int16 *)(v243 + 24);
  if (v20 == 35 || v20 == 11) {
    uint64_t v22 = v243;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = sub_1CCFD8CD8(v243, v244, 0, 1);
  uint64_t v26 = v23;
  if ((int)a2 <= 145)
  {
    if ((int)a2 <= 81)
    {
      switch((int)a2)
      {
        case '5':
          if (*(_WORD *)(v14 + 24) == 54)
          {
            uint64_t v27 = *(void *)(v22 + 80);
            unint64_t v28 = (void *)(v27 + 24);
            if (*(_DWORD *)(v27 + 32) >= 0x41u) {
              unint64_t v28 = (void *)*v28;
            }
            unsigned int v29 = *(_DWORD *)v28;
            uint64_t v30 = *(void *)(v14 + 32);
            return *(uint64_t **)(v30 + 40 * v29);
          }
          if (!v17) {
            goto LABEL_256;
          }
          if ((_BYTE)v246) {
            unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v246);
          }
          else {
            unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v246);
          }
          unsigned int v215 = ExtendedSizeInBits;
          if (v92 == 1) {
          uint64_t v216 = *(void *)(v22 + 80);
          }
          uint64_t v217 = (void *)(v216 + 24);
          if (*(_DWORD *)(v216 + 32) >= 0x41u) {
            uint64_t v217 = (void *)*v217;
          }
          llvm::APInt::extractBits(*(void *)(v17 + 80) + 24, v215, *(_DWORD *)v217 * v215, (uint64_t)&v255);
          unsigned int v218 = v246;
          uint64_t v219 = v247;
          int v221 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)&v255, v220);
          uint64_t v14 = sub_1CD7EC028(a1, v221, v231, v218, v219, 0, 0);
          if (DWORD2(v255) < 0x41) {
            return (uint64_t *)v14;
          }
          uint64_t v98 = v255;
          if (!(void)v255) {
            return (uint64_t *)v14;
          }
          goto LABEL_169;
        case '6':
        case '7':
          goto LABEL_256;
        case '8':
        case '9':
          goto LABEL_32;
        case ':':
          if ((_BYTE)v246)
          {
            if (v246 - 15 >= 0x9C) {
              goto LABEL_164;
            }
            char EVT = sub_1CB8C2FBC((unsigned __int8 *)&v246);
          }
          else
          {
            if ((*(_DWORD *)(v247 + 8) & 0xFE) != 0x12) {
              goto LABEL_164;
            }
            char EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v247 + 24), 0, v25);
          }
          if (EVT == 2) {
            goto LABEL_160;
          }
LABEL_164:
          if (!v22 || *(_WORD *)(v14 + 24) != 318 || (a11 & 4) == 0) {
            goto LABEL_256;
          }
          uint64_t v100 = *(void *)(**(void **)(v14 + 32) + 80) + 24;
          unint64_t v101 = v246;
          uint64_t v102 = v247;
          llvm::APInt::operator*(v100, (void *)(*(void *)(v22 + 80) + 24), (uint64_t)&v240);
          uint64_t v14 = sub_1CD7877A0(a1, v231, (uint64_t)v101, v102, (uint64_t)&v240);
          if (v241 >= 0x41)
          {
            uint64_t v98 = v240;
            if (v240) {
              goto LABEL_169;
            }
          }
          return (uint64_t *)v14;
        case ';':
        case '<':
        case '=':
        case '>':
          goto LABEL_29;
        default:
          if (a2 != 2)
          {
            if ((a2 - 3) >= 2) {
              goto LABEL_256;
            }
            int v103 = *(unsigned __int8 *)(v19 + 80);
            uint64_t v104 = *(void *)(v19 + 88);
            int v106 = sub_1CD3DD468((unsigned __int8 *)&v246, (uint64_t)v24, v25);
            if (v106 != v103 || !v106 && v105 != v104) {
              goto LABEL_256;
            }
            return (uint64_t *)v14;
          }
          if (*(_WORD *)(v14 + 24) == 1) {
            return (uint64_t *)v19;
          }
          if (*(_WORD *)(v19 + 24) == 1 || v14 == v19 && DWORD2(v245) == v18) {
            return (uint64_t *)v14;
          }
          break;
      }
      goto LABEL_256;
    }
    if ((a2 - 96) < 5)
    {
      unint64_t v32 = sub_1CCFE0B24(a1, a2, v14, *((uint64_t *)&v245 + 1), v19, v18, a11);
      if (!v32) {
        goto LABEL_256;
      }
      return v32;
    }
    if ((a2 - 82) >= 4) {
      goto LABEL_256;
    }
LABEL_29:
    if ((_BYTE)v246)
    {
      if (v246 - 15 >= 0x9C) {
        goto LABEL_256;
      }
      char v33 = sub_1CB8C2FBC((unsigned __int8 *)&v246);
    }
    else
    {
      if ((*(_DWORD *)(v247 + 8) & 0xFE) != 0x12) {
        goto LABEL_256;
      }
      char v33 = llvm::EVT::getEVT(*(llvm::EVT **)(v247 + 24), 0, v25);
    }
    if (v33 == 2)
    {
      if ((a2 & 0xFFFFFFFE) == 0x52)
      {
LABEL_137:
        unsigned int v42 = v246;
        uint64_t v43 = v247;
        uint64_t v45 = *((void *)&v245 + 1);
        unint64_t v41 = v231;
        uint64_t v39 = a1;
        uint64_t v40 = 172;
LABEL_161:
        uint64_t v44 = v14;
        return (uint64_t *)sub_1CCFDED5C(v39, v40, v41, v42, v43, v44, v45);
      }
      if ((a2 & 0xFFFFFFFE) != 0x54) {
        goto LABEL_256;
      }
      unint64_t v36 = v246;
      uint64_t v37 = v247;
      uint64_t v38 = *((void *)&v245 + 1);
      sub_1CD787918(a1, v231, (BOOL)v246, v247, 0, 0);
      sub_1CCFDED5C(a1, 173, v231, v36, v37, v19, v18);
      uint64_t v39 = a1;
      uint64_t v40 = 171;
      unint64_t v41 = v231;
      unsigned int v42 = v36;
      uint64_t v43 = v37;
      goto LABEL_42;
    }
LABEL_256:
    *(void *)&long long v255 = v245;
    DWORD2(v255) = DWORD2(v245);
    uint64_t v256 = v243;
    int v257 = v244;
    uint64_t v157 = sub_1CCFDBB80(a1, a2, v231, v246, v247, &v255, 2);
    if (v157) {
      return (uint64_t *)v157;
    }
    if (*(_WORD *)(v14 + 24) == 51)
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 24) + 1128))(*(void *)(a1 + 24), a2))
      {
        long long v255 = v245;
        DWORD2(v245) = v244;
        *(void *)&long long v245 = v243;
        uint64_t v19 = v255;
        uint64_t v243 = v255;
        LODWORD(v244) = DWORD2(v255);
      }
      else
      {
        if ((a2 - 57) <= 0x1C)
        {
          if (((1 << (a2 - 57)) & 0x1800003C) != 0) {
            return (uint64_t *)sub_1CD7EBF14(a1, 0, v231, v246, v247, 0, 0);
          }
          if (a2 == 57) {
            return sub_1CD3DD4D8(a1, v246, v247);
          }
        }
        if (a2 == 204) {
          return sub_1CD3DD4D8(a1, v246, v247);
        }
      }
    }
    if (*(_WORD *)(v19 + 24) == 51)
    {
      if ((int)a2 > 170)
      {
        switch(a2)
        {
          case 0xAB:
            return (uint64_t *)sub_1CD7EBF14(a1, 0, v231, v246, v247, 0, 0);
          case 0xAC:
            return (uint64_t *)sub_1CD787918(a1, v231, (BOOL)v246, v247, 0, 0);
          case 0xAD:
            if (*(_WORD *)(v245 + 24) != 51) {
              return sub_1CD3DD4D8(a1, v246, v247);
            }
            return (uint64_t *)sub_1CD7EBF14(a1, 0, v231, v246, v247, 0, 0);
        }
      }
      else
      {
        char v159 = a2 - 56;
        if ((a2 - 56) <= 0x1D)
        {
          if (((1 << v159) & 0x7B) != 0) {
            return sub_1CD3DD4D8(a1, v246, v247);
          }
          if (((1 << v159) & 0x30000004) == 0)
          {
            if (((1 << v159) & 0xC000000) == 0) {
              goto LABEL_280;
            }
            return (uint64_t *)sub_1CD787918(a1, v231, (BOOL)v246, v247, 0, 0);
          }
          return (uint64_t *)sub_1CD7EBF14(a1, 0, v231, v246, v247, 0, 0);
        }
      }
    }
LABEL_280:
    uint64_t v160 = sub_1CD7FFC1C(v246, v247);
    v233[0] = v160;
    v233[1] = 1;
    uint64_t v251 = v245;
    int v252 = DWORD2(v245);
    uint64_t v253 = v243;
    int v254 = v244;
    if (v246 == 172)
    {
      LODWORD(v255) = *((_DWORD *)v231 + 2);
      uint64_t v161 = sub_1CD7F34AC(a1, &v242, (int *)&v255, (unsigned __int8 **)v231, v233);
      sub_1CCFCE460(a1, (uint64_t)v161, (uint64_t)&v251, 2);
    }
    else
    {
      uint64_t v248 = v250;
      uint64_t v249 = 0x2000000000;
      sub_1CCFCC8C8((uint64_t)&v248, (unsigned __int16)a2, v160, 1, &v251, 2);
      uint64_t v232 = 0;
      uint64_t v162 = sub_1CD7EA8F8(a1, (uint64_t)&v248, (uint64_t)v231, &v232);
      uint64_t v163 = v162;
      if (v162)
      {
        uint64_t v161 = 0;
        *((_WORD *)v162 + 36) &= a11 | 0xF001;
        uint64_t v157 = (uint64_t)v162;
      }
      else
      {
        LODWORD(v255) = *((_DWORD *)v231 + 2);
        uint64_t v161 = sub_1CD7F34AC(a1, &v242, (int *)&v255, (unsigned __int8 **)v231, v233);
        *((_WORD *)v161 + 36) = a11;
        sub_1CCFCE460(a1, (uint64_t)v161, (uint64_t)&v251, 2);
        unsigned int v211 = *(_DWORD *)(a1 + 340) + 1;
        int v212 = *(_DWORD *)(a1 + 336);
        if (v211 > 2 * v212)
        {
          llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v212, (uint64_t)off_1F2642190);
          *(void *)&long long v255 = &v256;
          *((void *)&v255 + 1) = 0x2000000000;
          uint64_t v213 = *(void *)(a1 + 328)
               + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1CD805508(v230, (uint64_t)v161, &v255));
          if ((uint64_t *)v255 != &v256) {
            free((void *)v255);
          }
          unsigned int v211 = *(_DWORD *)(a1 + 340) + 1;
        }
        else
        {
          uint64_t v213 = v232;
        }
        *(_DWORD *)(a1 + 340) = v211;
        uint64_t v214 = *(void *)v213;
        if (!*(void *)v213) {
          uint64_t v214 = v213 | 1;
        }
        *uint64_t v161 = v214;
        *(void *)uint64_t v213 = v161;
      }
      if (v248 != v250) {
        free(v248);
      }
      if (v163) {
        return (uint64_t *)v157;
      }
    }
    uint64_t v165 = *(void *)(a1 + 208);
    uint64_t v164 = (void *)(a1 + 208);
    v161[1] = v165;
    v161[2] = v164;
    *(void *)(v165 + 8) = v161 + 1;
    *uint64_t v164 = v161 + 1;
    for (uint64_t i = (void *)v164[56]; i; uint64_t i = (void *)i[1])
      (*(void (**)(void *, void *))(*i + 32))(i, v161);
    return v161;
  }
  switch((int)a2)
  {
    case 146:
      *(void *)&long long v255 = v245;
      DWORD2(v255) = DWORD2(v245);
      uint64_t v256 = v243;
      int v257 = v244;
      unint64_t v32 = sub_1CCFDD248(v246, v247, (uint64_t)&v255, 2, a1);
      if (!v32) {
        goto LABEL_256;
      }
      return v32;
    case 147:
    case 150:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 174:
      goto LABEL_256;
    case 148:
      int v60 = *(unsigned __int16 *)(v14 + 24);
      if (v60 == 51 || *(_WORD *)(v19 + 24) == 51) {
        return sub_1CD3DD4D8(a1, v246, v247);
      }
      if (!v22) {
        goto LABEL_226;
      }
      int v61 = (uint64_t *)(*(void *)(v14 + 40) + 16 * DWORD2(v245));
      uint64_t v62 = *v61;
      uint64_t v63 = v61[1];
      if ((_BYTE)v62)
      {
        if (v62 - 15 >= 0x69) {
          goto LABEL_210;
        }
      }
      else if (*(unsigned char *)(v63 + 8) != 18)
      {
        goto LABEL_210;
      }
      uint64_t v170 = *(void *)(v22 + 80);
      unsigned int v171 = (void *)(v170 + 24);
      *(void *)&long long v255 = v62;
      *((void *)&v255 + 1) = v63;
      unsigned int v172 = sub_1CD3DB440((llvm::EVT *)&v255, v24);
      uint64_t v173 = *(unsigned int *)(v170 + 32);
      if (v173 >= 0x41)
      {
        int v174 = 0;
        int64_t v175 = (unint64_t)(v173 + 63) >> 6;
        do
        {
          BOOL v53 = v175-- < 1;
          if (v53) {
            break;
          }
          unint64_t v176 = *(void *)(*v171 + 8 * v175);
          v174 += __clz(v176);
        }
        while (!v176);
        int v177 = v173 | 0xFFFFFFC0;
        if ((v173 & 0x3F) == 0) {
          int v177 = 0;
        }
        if ((v173 - v174 - v177) > 0x40) {
          return sub_1CD3DD4D8(a1, v246, v247);
        }
        unsigned int v171 = (void *)*v171;
      }
      if (*v171 >= (unint64_t)v172) {
        return sub_1CD3DD4D8(a1, v246, v247);
      }
LABEL_210:
      uint64_t v123 = *(unsigned int **)(v14 + 32);
      uint64_t v124 = *(void *)(*(void *)v123 + 40);
      unsigned int v125 = (void *)(v124 + 16 * v123[2]);
      if (*v125)
      {
        if (*v125 - 15 < 0x69) {
          goto LABEL_212;
        }
      }
      else if (*(unsigned char *)(v125[1] + 8) == 18)
      {
LABEL_212:
        int v60 = *(unsigned __int16 *)(v14 + 24);
        if (v60 == 149)
        {
          if (!*(_WORD *)(v14 + 56)) {
            goto LABEL_256;
          }
          uint64_t v126 = v125[1];
          *(void *)&long long v255 = *v125;
          *((void *)&v255 + 1) = v126;
          unsigned int v127 = sub_1CD3DB440((llvm::EVT *)&v255, v24);
          uint64_t v128 = v246;
          uint64_t v129 = v247;
          uint64_t v130 = *(void *)(v22 + 80);
          uint64_t v131 = (void **)(v130 + 24);
          unsigned int v132 = *(_DWORD *)(v130 + 32);
          int v133 = v131;
          if (v132 >= 0x41) {
            int v133 = *v131;
          }
          int64_t v134 = (uint64_t *)(*(void *)(v14 + 32) + 40 * (*v133 / (unint64_t)v127));
          uint64_t v14 = *v134;
          uint64_t v38 = v134[1];
          if (v132 >= 0x41) {
            uint64_t v131 = (void **)*v131;
          }
          sub_1CD7EC9F4(a1, (unint64_t)*v131 % v127, (uint64_t)v231, 0);
          uint64_t v39 = a1;
          uint64_t v40 = 148;
          unint64_t v41 = v231;
          unsigned int v42 = v128;
          uint64_t v43 = v129;
LABEL_42:
          uint64_t v44 = v14;
          uint64_t v45 = v38;
          return (uint64_t *)sub_1CCFDED5C(v39, v40, v41, v42, v43, v44, v45);
        }
LABEL_221:
        if (v60 == 156)
        {
          int v138 = 0;
          uint64_t v14 = *(void *)v123;
          uint64_t v137 = (uint64_t)v231;
          goto LABEL_250;
        }
        if (v60 == 146)
        {
          uint64_t v135 = *(void *)(v22 + 80);
          unsigned int v136 = (unsigned int *)(v135 + 24);
          if (*(_DWORD *)(v135 + 32) >= 0x41u) {
            unsigned int v136 = *(unsigned int **)v136;
          }
          uint64_t v137 = (uint64_t)v231;
          int v138 = *v136;
          uint64_t v14 = *(void *)&v123[10 * *v136];
          uint64_t v124 = *(void *)(v14 + 40);
LABEL_250:
          uint64_t v154 = *(void *)&v123[10 * v138 + 2];
          unsigned int v155 = (unsigned __int8 *)(v124 + 16 * v154);
          if (v246 == *v155)
          {
            if ((_BYTE)v246) {
              return (uint64_t *)v14;
            }
            uint64_t v156 = v247;
            if (v247 == *((void *)v155 + 1)) {
              return (uint64_t *)v14;
            }
          }
          else
          {
            uint64_t v156 = v247;
          }
          return (uint64_t *)sub_1CD7EB67C(a1, v14, v154, v137, (uint64_t)v246, v156);
        }
LABEL_226:
        if (v60 != 147)
        {
          if (v60 != 151) {
            goto LABEL_256;
          }
          unsigned int v151 = (uint64_t *)(*(void *)(v14 + 40) + 16 * DWORD2(v245));
          uint64_t v152 = *v151;
          uint64_t v153 = v151[1];
          if ((_BYTE)v152)
          {
            if (v152 - 15 >= 0x69) {
              goto LABEL_256;
            }
          }
          else if (*(unsigned char *)(v153 + 8) != 18)
          {
            goto LABEL_256;
          }
          *(void *)&long long v255 = v152;
          *((void *)&v255 + 1) = v153;
          if (sub_1CD3DB440((llvm::EVT *)&v255, v24) == 1)
          {
            unsigned int v42 = v246;
            uint64_t v43 = v247;
            uint64_t v222 = *(uint64_t **)(v14 + 32);
            uint64_t v44 = *v222;
            uint64_t v45 = v222[1];
            uint64_t v39 = a1;
            uint64_t v40 = 148;
            unint64_t v41 = v231;
            return (uint64_t *)sub_1CCFDED5C(v39, v40, v41, v42, v43, v44, v45);
          }
          goto LABEL_256;
        }
        uint64_t v139 = *(uint64_t **)(v14 + 32);
        uint64_t v140 = v139[10];
        int v141 = *(unsigned __int16 *)(v140 + 24);
        if (v141 != 35 && v141 != 11 || v22 == 0) {
          goto LABEL_256;
        }
        uint64_t v144 = *(void *)(v140 + 80);
        unsigned int v145 = (void *)(v144 + 24);
        if (*(_DWORD *)(v144 + 32) >= 0x41u) {
          unsigned int v145 = (void *)*v145;
        }
        unint64_t v146 = (void *)*v145;
        uint64_t v147 = *(void *)(v22 + 80);
        int v148 = (void *)(v147 + 24);
        if (*(_DWORD *)(v147 + 32) >= 0x41u) {
          int v148 = (void *)*v148;
        }
        unint64_t v41 = v231;
        if (v146 != (void *)*v148)
        {
          unsigned int v42 = v246;
          uint64_t v43 = v247;
          uint64_t v44 = *v139;
          uint64_t v45 = v139[1];
          uint64_t v39 = a1;
          uint64_t v40 = 148;
          return (uint64_t *)sub_1CCFDED5C(v39, v40, v41, v42, v43, v44, v45);
        }
        uint64_t v14 = v139[5];
        uint64_t v149 = (unsigned __int8 *)(*(void *)(v14 + 40) + 16 * *((unsigned int *)v139 + 12));
        if (v246 == *v149)
        {
          if ((_BYTE)v246) {
            return (uint64_t *)v14;
          }
          uint64_t v150 = v247;
          if (v247 == *((void *)v149 + 1)) {
            return (uint64_t *)v14;
          }
        }
        else
        {
          if ((_BYTE)v246)
          {
            uint64_t v150 = v247;
            if (((_BYTE)v246 + 104) < 0x13u || ((_BYTE)v246 - 8) < 7u)
            {
              uint64_t v229 = (uint64_t)v231;
            }
            else
            {
              uint64_t v229 = (uint64_t)v231;
              if (((_BYTE)v246 - 75) >= 0x2Du) {
                return (uint64_t *)sub_1CD7EB744(a1, v139[5], v139[6], v229, (uint64_t)v246, v150);
              }
            }
            return (uint64_t *)sub_1CD7EB1C8(a1, v139[5], v139[6], v229, (uint64_t)v246, v150);
          }
          uint64_t v150 = v247;
        }
        if ((*(_DWORD *)(v150 + 8) & 0xFE) == 0x12) {
          unsigned int v223 = *(unsigned __int8 *)(**(void **)(v150 + 16) + 8);
        }
        else {
          unsigned int v223 = *(_DWORD *)(v150 + 8);
        }
        uint64_t v229 = (uint64_t)v231;
        if (v223 <= 6) {
          return (uint64_t *)sub_1CD7EB1C8(a1, v139[5], v139[6], v229, (uint64_t)v246, v150);
        }
        return (uint64_t *)sub_1CD7EB744(a1, v139[5], v139[6], v229, (uint64_t)v246, v150);
      }
      int v60 = *(unsigned __int16 *)(v14 + 24);
      goto LABEL_221;
    case 149:
      *(void *)&long long v255 = v245;
      DWORD2(v255) = DWORD2(v245);
      uint64_t v256 = v243;
      int v257 = v244;
      unint64_t v32 = sub_1CCFE0680((uint64_t)v231, v246, v247, (unsigned int *)&v255, 2, a1);
      if (!v32) {
        goto LABEL_256;
      }
      return v32;
    case 151:
      int64_t v58 = (unsigned __int8 *)(*(void *)(v14 + 40) + 16 * DWORD2(v245));
      if (v246 == *v58 && ((_BYTE)v246 || v247 == *((void *)v58 + 1))) {
        return (uint64_t *)v14;
      }
      int v59 = *(unsigned __int16 *)(v14 + 24);
      if (v59 == 149)
      {
        if (!*(_WORD *)(v14 + 56)) {
          goto LABEL_256;
        }
        uint64_t v111 = (unsigned __int8 *)(*(void *)(**(void **)(v14 + 32) + 40)
                                 + 16 * *(unsigned int *)(*(void *)(v14 + 32) + 8));
        if (v246 != *v111 || !(_BYTE)v246 && v247 != *((void *)v111 + 1)) {
          goto LABEL_256;
        }
        unsigned int v112 = sub_1CC4A0738((llvm::EVT *)&v246);
        uint64_t v113 = *(void *)(v22 + 80);
        uint64_t v114 = (void *)(v113 + 24);
        if (*(_DWORD *)(v113 + 32) >= 0x41u) {
          uint64_t v114 = (void *)*v114;
        }
        uint64_t v30 = *(void *)(v14 + 32);
        unsigned int v29 = *v114 / (unint64_t)v112;
        return *(uint64_t **)(v30 + 40 * v29);
      }
      if (v59 != 150)
      {
        if (v59 != 51) {
          goto LABEL_256;
        }
        return sub_1CD3DD4D8(a1, v246, v247);
      }
      uint64_t v115 = *(void *)(v14 + 32);
      if (v19 == *(void *)(v115 + 80) && *(_DWORD *)(v115 + 88) == v18)
      {
        unsigned int v116 = (unsigned __int8 *)(*(void *)(*(void *)(v115 + 40) + 40) + 16 * *(unsigned int *)(v115 + 48));
        if (v246 == *v116 && ((_BYTE)v246 || v247 == *((void *)v116 + 1))) {
          return *(uint64_t **)(v115 + 40);
        }
      }
      goto LABEL_256;
    case 159:
    case 160:
      goto LABEL_29;
    case 167:
    case 170:
      if ((_BYTE)v246)
      {
        if (v246 - 15 >= 0x9C) {
          goto LABEL_256;
        }
        char v31 = sub_1CB8C2FBC((unsigned __int8 *)&v246);
      }
      else
      {
        if ((*(_DWORD *)(v247 + 8) & 0xFE) != 0x12) {
          goto LABEL_256;
        }
        char v31 = llvm::EVT::getEVT(*(llvm::EVT **)(v247 + 24), 0, v25);
      }
      if (v31 == 2) {
        goto LABEL_137;
      }
      goto LABEL_256;
    case 168:
    case 169:
      if ((_BYTE)v246)
      {
        if (v246 - 15 >= 0x9C) {
          goto LABEL_256;
        }
        char v50 = sub_1CB8C2FBC((unsigned __int8 *)&v246);
      }
      else
      {
        if ((*(_DWORD *)(v247 + 8) & 0xFE) != 0x12) {
          goto LABEL_256;
        }
        char v50 = llvm::EVT::getEVT(*(llvm::EVT **)(v247 + 24), 0, v25);
      }
      if (v50 != 2) {
        goto LABEL_256;
      }
LABEL_160:
      unsigned int v42 = v246;
      uint64_t v43 = v247;
      uint64_t v45 = *((void *)&v245 + 1);
      unint64_t v41 = v231;
      uint64_t v39 = a1;
      uint64_t v40 = 171;
      goto LABEL_161;
    case 171:
      if (!v23) {
        goto LABEL_256;
      }
      uint64_t v69 = *(void *)(v23 + 80);
      int64_t v70 = (llvm::APInt *)(v69 + 24);
      uint64_t v71 = *(unsigned int *)(v69 + 32);
      if (v71 > 0x40)
      {
        int v107 = 0;
        int64_t v108 = (unint64_t)(v71 + 63) >> 6;
        do
        {
          BOOL v53 = v108-- < 1;
          if (v53) {
            break;
          }
          unint64_t v109 = *(void *)(*(void *)v70 + 8 * v108);
          v107 += __clz(v109);
        }
        while (!v109);
        int v110 = v71 | 0xFFFFFFC0;
        if ((v71 & 0x3F) == 0) {
          int v110 = 0;
        }
        if (v107 + v110 != v71)
        {
          if (llvm::APInt::countTrailingOnesSlowCase(v70) == v71) {
            return (uint64_t *)v14;
          }
          goto LABEL_256;
        }
        return (uint64_t *)v19;
      }
      if (!*(void *)v70) {
        return (uint64_t *)v19;
      }
      if (v71) {
        BOOL v72 = *(void *)v70 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v71;
      }
      else {
        BOOL v72 = 1;
      }
      if (!v72) {
        goto LABEL_256;
      }
      return (uint64_t *)v14;
    case 172:
    case 173:
LABEL_32:
      if (!v23) {
        goto LABEL_60;
      }
      uint64_t v34 = *(void *)(v23 + 80);
      uint64_t v35 = *(unsigned int *)(v34 + 32);
      if (v35 > 0x40)
      {
        int v51 = 0;
        int64_t v52 = (unint64_t)(v35 + 63) >> 6;
        do
        {
          BOOL v53 = v52-- < 1;
          if (v53) {
            break;
          }
          unint64_t v54 = *(void *)(*(void *)(v34 + 24) + 8 * v52);
          v51 += __clz(v54);
        }
        while (!v54);
        int v55 = v35 | 0xFFFFFFC0;
        if ((v35 & 0x3F) == 0) {
          int v55 = 0;
        }
        if (v51 + v55 == v35) {
          return (uint64_t *)v14;
        }
      }
      else if (!*(void *)(v34 + 24))
      {
        return (uint64_t *)v14;
      }
LABEL_60:
      if ((a2 & 0xFFFFFFFE) != 0x38) {
        goto LABEL_256;
      }
      if ((_BYTE)v246)
      {
        if (v246 - 15 >= 0x9C) {
          goto LABEL_256;
        }
        char v56 = sub_1CB8C2FBC((unsigned __int8 *)&v246);
      }
      else
      {
        if ((*(_DWORD *)(v247 + 8) & 0xFE) != 0x12) {
          goto LABEL_256;
        }
        char v56 = llvm::EVT::getEVT(*(llvm::EVT **)(v247 + 24), 0, v25);
      }
      if (v56 == 2)
      {
        unsigned int v42 = v246;
        uint64_t v43 = v247;
        uint64_t v45 = *((void *)&v245 + 1);
        unint64_t v41 = v231;
        uint64_t v39 = a1;
        uint64_t v40 = 173;
        goto LABEL_161;
      }
      goto LABEL_256;
    case 175:
      if (!v22) {
        goto LABEL_195;
      }
      if (*(_WORD *)(v14 + 24) != 318 || (a11 & 4) == 0) {
        goto LABEL_195;
      }
      uint64_t v65 = *(void *)(**(void **)(v14 + 32) + 80);
      uint64_t v66 = *(void *)(v22 + 80);
      unint64_t v67 = *(unsigned int *)(v65 + 32);
      unsigned int v239 = v67;
      if (v67 > 0x40) {
        operator new[]();
      }
      uint64_t v68 = *(void *)(v65 + 24);
      unint64_t v238 = *(void *)(v65 + 24);
      uint64_t v93 = *(unsigned int *)(v66 + 32);
      if (v93 < 0x41)
      {
        unint64_t v94 = *(void *)(v66 + 24);
        goto LABEL_148;
      }
      int v224 = 0;
      int64_t v225 = (unint64_t)(v93 + 63) >> 6;
      uint64_t v226 = *(unint64_t **)(v66 + 24);
      do
      {
        BOOL v53 = v225-- < 1;
        if (v53) {
          break;
        }
        unint64_t v227 = v226[v225];
        v224 += __clz(v227);
      }
      while (!v227);
      int v228 = v93 | 0xFFFFFFC0;
      if ((v93 & 0x3F) == 0) {
        int v228 = 0;
      }
      int v95 = v67;
      if ((v93 - v224 - v228) <= 0x40)
      {
        unint64_t v94 = *v226;
LABEL_148:
        int v95 = v67;
        if (v94 <= v67) {
          int v95 = v94;
        }
      }
      uint64_t v96 = v68 << v95;
      if (v67 == v95) {
        uint64_t v96 = 0;
      }
      unint64_t v97 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v67;
      if (!v67) {
        unint64_t v97 = 0;
      }
      unint64_t v238 = v97 & v96;
      uint64_t v14 = sub_1CD7877A0(a1, v231, (uint64_t)v246, v247, (uint64_t)&v238);
      if (v239 < 0x41) {
        return (uint64_t *)v14;
      }
      uint64_t v98 = v238;
      if (!v238) {
        return (uint64_t *)v14;
      }
      goto LABEL_169;
    case 176:
    case 177:
LABEL_195:
      unint64_t v32 = sub_1CD7F5AFC(a1, v14, DWORD2(v245), v19, v18);
      if (!v32) {
        goto LABEL_196;
      }
      return v32;
    case 178:
    case 179:
LABEL_196:
      if (v246 == 2) {
        return (uint64_t *)v14;
      }
      if (!v26) {
        goto LABEL_256;
      }
      uint64_t v117 = *(void *)(v26 + 80);
      uint64_t v118 = *(unsigned int *)(v117 + 32);
      if (v118 <= 0x40)
      {
        if (*(void *)(v117 + 24)) {
          goto LABEL_256;
        }
        return (uint64_t *)v14;
      }
      int v119 = 0;
      int64_t v120 = (unint64_t)(v118 + 63) >> 6;
      do
      {
        BOOL v53 = v120-- < 1;
        if (v53) {
          break;
        }
        unint64_t v121 = *(void *)(*(void *)(v117 + 24) + 8 * v120);
        v119 += __clz(v121);
      }
      while (!v121);
      int v122 = v118 | 0xFFFFFFC0;
      if ((v118 & 0x3F) == 0) {
        int v122 = 0;
      }
      if (v119 + v122 == v118) {
        return (uint64_t *)v14;
      }
      goto LABEL_256;
    default:
      if (a2 != 204)
      {
        if (a2 == 212)
        {
          uint64_t v46 = (unsigned __int8 *)(*(void *)(v14 + 40) + 16 * DWORD2(v245));
          int v47 = *v46;
          if (v47 == v246)
          {
            uint64_t v48 = *((void *)v46 + 1);
            if (v47 || v48 == v247) {
              return (uint64_t *)v14;
            }
          }
        }
        goto LABEL_256;
      }
      uint64_t v73 = *(void *)(v19 + 88);
      uint64_t v248 = *(void **)(v19 + 80);
      uint64_t v249 = v73;
      unsigned int v74 = v246;
      if (v248 == v246 && ((_BYTE)v248 || v73 == v247)) {
        return (uint64_t *)v14;
      }
      if (v17)
      {
        uint64_t v167 = *(void *)(v17 + 80);
        unsigned int v168 = *(_DWORD *)(v167 + 32);
        unsigned int v237 = v168;
        if (v168 > 0x40) {
          operator new[]();
        }
        unint64_t v169 = *(void *)(v167 + 24);
        unint64_t v236 = v169;
        uint64_t v201 = v247;
        unsigned int v202 = sub_1CD3E12F4((unsigned __int8 *)&v248, (uint64_t)v24, v25);
        if (v202) {
          unint64_t v204 = v169 << (v168 - v202);
        }
        else {
          unint64_t v204 = 0;
        }
        unint64_t v205 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v168;
        if (v168) {
          unint64_t v206 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v168;
        }
        else {
          unint64_t v206 = 0;
        }
        uint64_t v207 = (uint64_t)((v206 & v204) << -(char)v168) >> -(char)v168;
        if (v202) {
          char v208 = v168 - v202;
        }
        else {
          char v208 = 63;
        }
        uint64_t v209 = v207 >> v208;
        if (!v168) {
          unint64_t v205 = 0;
        }
        unint64_t v236 = v205 & v209;
        uint64_t v210 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)&v236, v203);
        uint64_t v14 = sub_1CD7EC028(a1, v210, v231, v74, v201, 0, 0);
        if (v237 < 0x41) {
          return (uint64_t *)v14;
        }
        uint64_t v98 = v236;
        if (!v236) {
          return (uint64_t *)v14;
        }
LABEL_169:
        MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
        return (uint64_t *)v14;
      }
      if (*(_WORD *)(v14 + 24) != 146) {
        goto LABEL_256;
      }
      unsigned int v75 = *(unsigned int **)(v14 + 32);
      if (*(_WORD *)(v14 + 56))
      {
        uint64_t v76 = 40 * *(unsigned __int16 *)(v14 + 56);
        uint64_t v77 = *(void *)(v14 + 32);
        do
        {
          int v78 = *(unsigned __int16 *)(*(void *)v77 + 24);
          BOOL v80 = v78 != 11 && v78 != 35;
          if (v78 == 51) {
            int v81 = 3;
          }
          else {
            int v81 = v80;
          }
          if (v81 != 3 && v81 != 0) {
            goto LABEL_256;
          }
          v77 += 40;
          v76 -= 40;
        }
        while (v76);
      }
      *(void *)&long long v255 = &v256;
      *((void *)&v255 + 1) = 0x800000000;
      uint64_t v83 = *(void *)(*(void *)v75 + 40) + 16 * v75[2];
      unint64_t v84 = *(llvm **)v83;
      uint64_t v85 = *(void *)(v83 + 8);
      unsigned int v86 = sub_1CD3DB440((llvm::EVT *)&v246, v24);
      if (!v86)
      {
LABEL_128:
        uint64_t v89 = *(void *)(a1 + 832);
        if (v89) {
          uint64_t v90 = *(unsigned __int16 *)(v89 + 8);
        }
        else {
          uint64_t v90 = 0;
        }
        uint64_t v14 = sub_1CD7FF4E8(a1, 146, v231, v246, v247, v255, DWORD2(v255), v90);
        if ((uint64_t *)v255 != &v256) {
          free((void *)v255);
        }
        return (uint64_t *)v14;
      }
      uint64_t v178 = 0;
      uint64_t v179 = 40 * v86;
      break;
  }
  while (1)
  {
    uint64_t v180 = *(void *)(*(void *)(v14 + 32) + v178);
    if (*(_WORD *)(v180 + 24) != 51) {
      break;
    }
    uint64_t v181 = sub_1CD3DD4D8(a1, v84, v85);
    if (DWORD2(v255) >= (unint64_t)HIDWORD(v255)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v182 = (uint64_t **)(v255 + 16 * DWORD2(v255));
    *uint64_t v182 = v181;
    v182[1] = (uint64_t *)v87;
    ++DWORD2(v255);
LABEL_329:
    v178 += 40;
    if (v179 == v178) {
      goto LABEL_128;
    }
  }
  uint64_t v183 = *(void *)(v180 + 80);
  if (*(_DWORD *)(v183 + 32) > 0x40u) {
    operator new[]();
  }
  uint64_t v184 = *(void *)(v183 + 24);
  unsigned int v235 = *(_DWORD *)(v183 + 32);
  uint64_t v234 = v184;
  unsigned int v185 = sub_1CD3E12F4((unsigned __int8 *)&v248, v87, v88);
  unsigned int v187 = v185;
  unsigned int v188 = v235;
  unsigned int v189 = v235 - v185;
  if (v235 > 0x40)
  {
    llvm::APInt::shlSlowCase((llvm::APInt *)&v234, v189);
    unsigned int v188 = v235;
    unsigned int v189 = v235 - v187;
    if (v235 > 0x40)
    {
      llvm::APInt::ashrSlowCase((unsigned int *)&v234, v189);
LABEL_325:
      unsigned __int16 v198 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)&v234, v186);
      uint64_t v199 = sub_1CD7EC028(a1, v198, v231, v84, v85, 0, 0);
      if (DWORD2(v255) >= (unint64_t)HIDWORD(v255)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v200 = (uint64_t *)(v255 + 16 * DWORD2(v255));
      uint64_t *v200 = v199;
      v200[1] = v87;
      ++DWORD2(v255);
      if (v235 >= 0x41 && v234) {
        MEMORY[0x1D25D9CB0](v234, 0x1000C8000313F17);
      }
      goto LABEL_329;
    }
    unint64_t v193 = v234;
    unint64_t v191 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v235;
  }
  else
  {
    if (v185) {
      uint64_t v190 = v234 << v189;
    }
    else {
      uint64_t v190 = 0;
    }
    unint64_t v191 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v235;
    if (v235) {
      unint64_t v192 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v235;
    }
    else {
      unint64_t v192 = 0;
    }
    unint64_t v193 = v192 & v190;
  }
  uint64_t v194 = (uint64_t)(v193 << -(char)v188) >> -(char)v188;
  if (v187) {
    char v195 = v189;
  }
  else {
    char v195 = 63;
  }
  uint64_t v196 = v194 >> v195;
  if (v188) {
    unint64_t v197 = v191;
  }
  else {
    unint64_t v197 = 0;
  }
  uint64_t v234 = v197 & v196;
  goto LABEL_325;
}

uint64_t *sub_1CCFE0680(uint64_t a1, llvm *a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  int v6 = a4;
  v75[32] = *MEMORY[0x1E4F143B8];
  uint64_t v71 = a2;
  uint64_t v72 = a3;
  if (a5 == 1) {
    return *(uint64_t **)a4;
  }
  if (!a5) {
    return sub_1CD3DD4D8(a6, a2, a3);
  }
  uint64_t v9 = 16 * a5;
  uint64_t v10 = a4;
  int v11 = &a4[4 * a5];
  while (*(_WORD *)(*(void *)v10 + 24) == 51)
  {
    v10 += 4;
    v9 -= 16;
    if (!v9) {
      return sub_1CD3DD4D8(a6, a2, a3);
    }
  }
  uint64_t v12 = a5;
  if (!a5) {
    return 0;
  }
  uint64_t v13 = 0;
  unsigned int v14 = 0;
  uint64_t v15 = 0;
  BOOL v16 = a4 + 2;
  while (1)
  {
    uint64_t v17 = *((void *)v16 - 1);
    *(_OWORD *)unsigned int v74 = *(_OWORD *)(*(void *)(v17 + 40) + 16 * *v16);
    int v18 = sub_1CC4A0738((llvm::EVT *)v74);
    if (*(_WORD *)(v17 + 24) != 151)
    {
      int v24 = v71;
LABEL_29:
      if (v24) {
        goto LABEL_30;
      }
LABEL_54:
      if (*(unsigned char *)(v72 + 8) == 19) {
        return 0;
      }
LABEL_31:
      uint64_t v69 = (llvm *)sub_1CD3DD468((unsigned __int8 *)&v71, v19, v20);
      uint64_t v70 = (uint64_t)v30;
      v74[0] = v75;
      v74[1] = (void *)0x1000000000;
      do
      {
        uint64_t v31 = *(void *)v6;
        long long v73 = *(_OWORD *)(*(void *)(*(void *)v6 + 40) + 16 * v6[2]);
        int v32 = *(unsigned __int16 *)(v31 + 24);
        if (v32 == 146)
        {
          sub_1CD3E560C((uint64_t)v74, *(char **)(v31 + 32), (char *)(*(void *)(v31 + 32) + 40 * *(unsigned __int16 *)(v31 + 56)));
        }
        else
        {
          if (v32 != 51)
          {
            uint64_t v7 = 0;
            goto LABEL_58;
          }
          uint64_t v33 = sub_1CD3DB440((llvm::EVT *)&v73, v30);
          uint64_t v34 = sub_1CD3DD4D8(a6, v69, v70);
          sub_1CD788338((uint64_t)v74, v33, (uint64_t)v34, v35);
        }
        v6 += 4;
      }
      while (v6 != v11);
      if (!LODWORD(v74[1]))
      {
LABEL_38:
        unint64_t v38 = sub_1CD3DD468((unsigned __int8 *)&v71, (uint64_t)v30, v36);
        if ((v69 != v38 || !(_BYTE)v69 && v70 != v37)
          && sub_1CC277C0C((unsigned __int8 *)&v69, v38, v37)
          && LODWORD(v74[1]))
        {
          uint64_t v39 = (char *)v74[0];
          uint64_t v40 = 16 * LODWORD(v74[1]);
          unint64_t v41 = (uint64_t *)((char *)v74[0] + 8);
          do
          {
            uint64_t v42 = *(v41 - 1);
            if (*(_WORD *)(v42 + 24) == 51)
            {
              *(v41 - 1) = (uint64_t)sub_1CD3DD4D8(a6, v69, v70);
              uint64_t v44 = (uint64_t *)(v39 + 8);
            }
            else
            {
              uint64_t v45 = (void *)(*(void *)(v42 + 40) + 16 * *(unsigned int *)v41);
              int v46 = (*(uint64_t (**)(void, void, void, llvm *, uint64_t))(**(void **)(a6 + 24) + 1192))(*(void *)(a6 + 24), *v45, v45[1], v69, v70);
              uint64_t v47 = *(v41 - 1);
              uint64_t v48 = *v41;
              if (v46) {
                uint64_t v49 = sub_1CD7EB80C(a6, v47, v48, a1, (uint64_t)v69, v70);
              }
              else {
                uint64_t v49 = sub_1CD7EB744(a6, v47, v48, a1, (uint64_t)v69, v70);
              }
              *(v41 - 1) = v49;
              uint64_t v44 = v41;
            }
            *(_DWORD *)uint64_t v44 = v43;
            v39 += 16;
            v41 += 2;
            v40 -= 16;
          }
          while (v40);
        }
        uint64_t v50 = *(void *)(a6 + 832);
        if (v50) {
          uint64_t v51 = *(unsigned __int16 *)(v50 + 8);
        }
        else {
          uint64_t v51 = 0;
        }
        uint64_t v7 = sub_1CD7FF4E8(a6, 146, a1, v71, v72, v74[0], LODWORD(v74[1]), v51);
LABEL_58:
        if (v74[0] != v75) {
          free(v74[0]);
        }
        return (uint64_t *)v7;
      }
      BOOL v53 = (unsigned int *)v74[0];
      unint64_t v54 = (unsigned int *)((char *)v74[0] + 16 * LODWORD(v74[1]));
      int v55 = v69;
      while (1)
      {
        uint64_t v56 = *(void *)v53;
        uint64_t v57 = v53[2];
        int64_t v58 = (uint64_t *)(*(void *)(*(void *)v53 + 40) + 16 * v57);
        uint64_t v60 = *v58;
        uint64_t v59 = v58[1];
        if (v55 != *v58) {
          break;
        }
        int v61 = &v69;
        if (!v55 && v70 != v59)
        {
          *(void *)&long long v73 = v60;
          *((void *)&v73 + 1) = v59;
          goto LABEL_65;
        }
LABEL_75:
        uint64_t v67 = (uint64_t)v61[1];
        uint64_t v69 = *v61;
        uint64_t v70 = v67;
        int v55 = v69;
        v53 += 4;
        if (v53 == v54) {
          goto LABEL_38;
        }
      }
      *(void *)&long long v73 = *v58;
      *((void *)&v73 + 1) = v59;
      if (v55) {
        uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v69);
      }
      else {
LABEL_65:
      }
        uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v69);
      unint64_t v64 = ExtendedSizeInBits;
      int v65 = v63;
      if ((_BYTE)v60) {
        unint64_t v66 = sub_1CB87E200((unsigned __int8 *)&v73);
      }
      else {
        unint64_t v66 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v73);
      }
      if (v65 == 1 && v30 != 1 || v64 >= v66) {
        int v61 = &v69;
      }
      else {
        int v61 = (llvm **)(*(void *)(v56 + 40) + 16 * v57);
      }
      goto LABEL_75;
    }
    uint64_t v21 = *(void *)(v17 + 32);
    uint64_t v7 = *(void *)v21;
    unsigned int v22 = *(_DWORD *)(v21 + 8);
    uint64_t v23 = (unsigned __int8 *)(*(void *)(*(void *)v21 + 40) + 16 * v22);
    int v24 = *v23;
    if (v24 != v71) {
      break;
    }
    uint64_t v25 = *((void *)v23 + 1);
    if (v24) {
      BOOL v26 = 1;
    }
    else {
      BOOL v26 = v25 == v72;
    }
    if (!v26) {
      goto LABEL_54;
    }
    if (v15)
    {
      if (v7 != v15 || v22 != v14) {
        goto LABEL_29;
      }
    }
    uint64_t v28 = *(void *)(*(void *)(v21 + 40) + 80);
    unsigned int v29 = (void *)(v28 + 24);
    if (*(_DWORD *)(v28 + 32) >= 0x41u) {
      unsigned int v29 = (void *)*v29;
    }
    if (*v29 != v13 * v18) {
      goto LABEL_29;
    }
    v16 += 4;
    ++v13;
    unsigned int v14 = v22;
    uint64_t v15 = v7;
    if (v12 == v13) {
      return (uint64_t *)v7;
    }
  }
  int v24 = v71;
  if (!(_BYTE)v71) {
    goto LABEL_54;
  }
LABEL_30:
  if ((v24 - 120) >= 0x33) {
    goto LABEL_31;
  }
  return 0;
}

uint64_t *sub_1CCFE0B24(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  unsigned int v9 = a4;
  uint64_t v10 = (uint64_t *)a3;
  uint64_t v14 = sub_1CCFDEC10(a3, a4, 1);
  uint64_t v15 = sub_1CCFDEC10(a5, a6, 1);
  uint64_t v16 = v15;
  if (!v14
    || ((v17 = *(void *)(v14 + 80), int v18 = *(void **)(v17 + 32), v18 == &unk_1CFB2E344)
      ? (uint64_t v19 = *(void *)(v17 + 40))
      : (uint64_t v19 = v17 + 24),
        LODWORD(v19) = *(unsigned char *)(v19 + 28) & 7,
        v19 != 1))
  {
    if (v15)
    {
      uint64_t v20 = *(void *)(v15 + 80);
      if (*(_UNKNOWN **)(v20 + 32) == &unk_1CFB2E344) {
        uint64_t v19 = *(void *)(v20 + 40);
      }
      else {
        uint64_t v19 = v20 + 24;
      }
      LOBYTE(v19) = (*(unsigned char *)(v19 + 28) & 7) == 1;
      if (!v14) {
        goto LABEL_18;
      }
    }
    else
    {
      LOBYTE(v19) = 0;
      if (!v14) {
        goto LABEL_18;
      }
    }
    uint64_t v17 = *(void *)(v14 + 80);
    int v18 = *(void **)(v17 + 32);
  }
  if (v18 == &unk_1CFB2E344) {
    uint64_t v21 = *(void *)(v17 + 40);
  }
  else {
    uint64_t v21 = v17 + 24;
  }
  if ((*(unsigned char *)(v21 + 28) & 7) == 0)
  {
    BOOL v24 = 1;
    if ((a7 & 0x10) == 0) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }
LABEL_18:
  if (v15)
  {
    uint64_t v22 = *(void *)(v15 + 80);
    if (*(_UNKNOWN **)(v22 + 32) == &unk_1CFB2E344) {
      uint64_t v23 = *(void *)(v22 + 40);
    }
    else {
      uint64_t v23 = v22 + 24;
    }
    BOOL v24 = (*(unsigned char *)(v23 + 28) & 7) == 0;
    if ((a7 & 0x10) == 0) {
      goto LABEL_30;
    }
  }
  else
  {
    BOOL v24 = 0;
    if ((a7 & 0x10) == 0) {
      goto LABEL_30;
    }
  }
LABEL_27:
  if ((v19 & 1) != 0 || *((_WORD *)v10 + 12) == 51 || *(_WORD *)(a5 + 24) == 51) {
    goto LABEL_48;
  }
LABEL_30:
  if ((a7 & 0x20) != 0 && (v24 || *((_WORD *)v10 + 12) == 51 || *(_WORD *)(a5 + 24) == 51))
  {
LABEL_48:
    uint64_t v31 = v10[5] + 16 * v9;
    return sub_1CD3DD4D8(a1, *(llvm **)v31, *(void *)(v31 + 8));
  }
  if (!v15) {
    return 0;
  }
  if (a2 == 97)
  {
    uint64_t v27 = *(void *)(v15 + 80);
    if (*(_UNKNOWN **)(v27 + 32) == &unk_1CFB2E344) {
      char v28 = *(unsigned char *)(*(void *)(v27 + 40) + 28);
    }
    else {
      char v28 = *(unsigned char *)(v27 + 52);
    }
    if ((v28 & 7) != 3 || (v28 & 8) != 0) {
      return 0;
    }
  }
  else
  {
    if (a2 == 96)
    {
      uint64_t v25 = *(void *)(v15 + 80);
      if (*(_UNKNOWN **)(v25 + 32) == &unk_1CFB2E344) {
        char v26 = *(unsigned char *)(*(void *)(v25 + 40) + 28);
      }
      else {
        char v26 = *(unsigned char *)(v25 + 52);
      }
      if ((v26 & 7) == 3 && (v26 & 8) != 0) {
        return v10;
      }
      return 0;
    }
    if ((a2 & 0xFFFFFFFE) != 0x62 || (sub_1CB8BE1E4(*(void *)(v15 + 80) + 24, 1.0) & 1) == 0)
    {
      if (a2 != 98 || (a7 & 0x10) == 0) {
        return 0;
      }
      uint64_t v10 = 0;
      if ((a7 & 0x40) != 0)
      {
        uint64_t v29 = *(void *)(v16 + 80);
        if (*(_UNKNOWN **)(v29 + 32) == &unk_1CFB2E344) {
          uint64_t v30 = *(void *)(v29 + 40);
        }
        else {
          uint64_t v30 = v29 + 24;
        }
        if ((*(unsigned char *)(v30 + 28) & 7) != 3) {
          return 0;
        }
        uint64_t v33 = *(unsigned __int8 **)(a5 + 64);
        uint64_t v39 = v33;
        if (v33) {
          llvm::MetadataTracking::track((uint64_t)&v39, v33, 2);
        }
        int v40 = *(_DWORD *)(a5 + 60);
        uint64_t v34 = *(void *)(a5 + 40) + 16 * a6;
        uint64_t v10 = sub_1CD7ECDC4(a1, (uint64_t)&v39, *(void *)v34, *(void *)(v34 + 8), 0, 0.0);
        if (v39)
        {
          int v35 = *v39;
          if ((v35 - 4) > 0x1E)
          {
            if ((v35 - 3) >= 0xFFFFFFFE) {
              unint64_t v38 = v39;
            }
            else {
              unint64_t v38 = 0;
            }
            if ((v35 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v37 = (unint64_t)(v38 + 8);
LABEL_76:
              unint64_t v41 = &v39;
              sub_1CC5FA668(v37 + 16, &v41);
              return v10;
            }
            if (v35 == 3) {
              *((void *)v39 + 1) = 0;
            }
          }
          else if ((v39[1] & 0x7F) == 2 || *((_DWORD *)v39 + 3))
          {
            uint64_t v36 = *((void *)v39 + 2);
            if ((v36 & 4) != 0)
            {
              unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFF8;
              if (v37) {
                goto LABEL_76;
              }
            }
          }
        }
      }
    }
  }
  return v10;
}

uint64_t *sub_1CCFE0EEC(void *a1, const llvm::APInt *a2, uint64_t *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unsigned __int8 a10, int a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  v208[32] = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a7 + 24) == 51) {
    return a3;
  }
  uint64_t v21 = (uint64_t)a1;
  uint64_t v182 = (unsigned int *)a1[3];
  uint64_t v22 = a1[5];
  int64_t v175 = *(unsigned __int8 **)(*(void *)v22 + 40);
  uint64_t v166 = (llvm::LLVMContext *)a1[7];
  uint64_t v194 = 0;
  uint64_t v195 = 0;
  __p = 0;
  uint64_t v23 = *(void *)(v22 + 56);
  unsigned int v24 = *(_DWORD *)(*(void *)(v22 + 8) + 484);
  BOOL v25 = v24 > 0x21;
  uint64_t v26 = (1 << v24) & 0x3F0000888;
  if (v25 || v26 == 0)
  {
    uint64_t v29 = a8;
    uint64_t v30 = a5;
    int v31 = sub_1CD7EAF54((uint64_t)a1);
    a5 = v30;
    a8 = v29;
    BOOL v180 = v31;
  }
  else
  {
    uint64_t v28 = *(void *)(*(void *)v22 + 112);
    if (v28) {
      BOOL v180 = *(char *)(v28 + 13) < 0;
    }
    else {
      BOOL v180 = 0;
    }
  }
  unsigned __int8 v32 = a10;
  int v33 = *(unsigned __int16 *)(a5 + 24);
  uint64_t v174 = a5;
  uint64_t v167 = v23;
  if (v33 == 39 || v33 == 15)
  {
    int v34 = *(_DWORD *)(a5 + 76);
    BOOL v35 = v34 < 0 && v34 >= -*(_DWORD *)(v23 + 32);
    int v36 = !v35;
    uint64_t v169 = a5;
  }
  else
  {
    uint64_t v169 = 0;
    int v36 = 0;
  }
  uint64_t v165 = a8;
  unsigned __int16 v37 = sub_1CD803F50(v21, a7);
  uint64_t v38 = v37;
  if (v37 < 0x100u || (unsigned __int8 v39 = v37, v38 = a10, a10 > v37)) {
    unsigned __int8 v39 = a10;
  }
  char v177 = v39;
  if (a12) {
    goto LABEL_29;
  }
  uint64_t v38 = *(unsigned __int16 *)(a7 + 24);
  if (v38 != 13)
  {
    if (v38 == 56)
    {
      int v40 = *(uint64_t **)(a7 + 32);
      uint64_t v38 = *v40;
      if (*(_WORD *)(*v40 + 24) == 13)
      {
        uint64_t v41 = v40[5];
        if (*(_WORD *)(v41 + 24) == 11)
        {
          uint64_t v42 = *(void *)(v41 + 80);
          int v43 = (void *)(v42 + 24);
          if (*(_DWORD *)(v42 + 32) >= 0x41u) {
            int v43 = (void *)*v43;
          }
          uint64_t v44 = (void *)*v43;
          goto LABEL_31;
        }
      }
    }
LABEL_29:
    BOOL ConstantDataArrayInfo = 0;
    goto LABEL_32;
  }
  uint64_t v44 = 0;
  uint64_t v38 = a7;
LABEL_31:
  BOOL ConstantDataArrayInfo = llvm::getConstantDataArrayInfo(*(llvm::Value **)(v38 + 80), (uint64_t *)&v190, 8u, (unint64_t)v44 + *(void *)(v38 + 88));
  uint64_t v38 = (uint64_t)v190;
  unsigned __int8 v39 = v177;
LABEL_32:
  uint64_t v157 = v38;
  if (v38) {
    BOOL v46 = 0;
  }
  else {
    BOOL v46 = ConstantDataArrayInfo;
  }
  if (a13)
  {
    unsigned int v47 = -1;
    uint64_t v48 = (uint64_t)v182;
  }
  else
  {
    uint64_t v48 = (uint64_t)v182;
    uint64_t v49 = v182 + 46065;
    if (v180) {
      uint64_t v49 = v182 + 46066;
    }
    unsigned int v47 = *v49;
  }
  BOOL v171 = ConstantDataArrayInfo;
  uint64_t v173 = a2;
  if (v46)
  {
    uint64_t v50 = 0x101000000;
    if (!a12) {
      uint64_t v50 = 0x101010000;
    }
  }
  else
  {
    uint64_t v51 = 0x10000000000;
    if (!ConstantDataArrayInfo) {
      uint64_t v51 = 0;
    }
    unint64_t v52 = v51 | ((unint64_t)v39 << 48);
    uint64_t v53 = 0x10000;
    if (a12) {
      uint64_t v53 = 0;
    }
    uint64_t v50 = v52 | v53;
  }
  v189[0] = a9;
  v189[1] = v36 & 0xFFFF00FF | ((unint64_t)a10 << 8) | v50;
  uint64_t v54 = *(unsigned int *)(a14 + 16);
  uint64_t v55 = *(unsigned int *)(a15 + 16);
  uint64_t v200 = *(void **)(*(void *)v22 + 112);
  if (sub_1CCFF9C00(v48, &__p, v47, (uint64_t)v189, v54, v55, (uint64_t)&v200))
  {
    unint64_t v179 = a9;
    uint64_t v153 = (llvm::DataLayout *)(v175 + 272);
    if (v36)
    {
      llvm::EVT::getTypeForEVT((llvm::EVT *)__p, v166);
      unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v175 + 272), v56, 1);
      uint64_t v58 = (*(uint64_t (**)(void))(**(void **)(v22 + 16) + 176))(*(void *)(v22 + 16));
      if ((*(unsigned int (**)(void))(*(void *)v58 + 440))()
        && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v58 + 432))(v58, v22))
      {
        unsigned int v59 = a10;
        char i = v177;
      }
      else
      {
        unsigned int v59 = a10;
        for (char i = v177; Alignment > a10; Alignment = 63 - __clz((unint64_t)(1 << Alignment) >> 1))
        {
          if (!v175[281]) {
            break;
          }
          if (v175[280] >= Alignment) {
            break;
          }
        }
      }
      if (v59 < Alignment)
      {
        int v61 = *(_DWORD *)(v169 + 76);
        uint64_t v62 = *(void *)(v167 + 8) + 40 * (*(_DWORD *)(v167 + 32) + v61);
        unsigned int v64 = *(unsigned __int8 *)(v62 + 16);
        int v63 = (unsigned __int8 *)(v62 + 16);
        if (v64 < Alignment)
        {
          unsigned __int8 *v63 = Alignment;
          if (!*(unsigned char *)(*(void *)(v167 + 8) + 40 * (*(_DWORD *)(v167 + 32) + v61) + 20)
            && *(unsigned __int8 *)(v167 + 60) < Alignment)
          {
            *(unsigned char *)(v167 + 60) = Alignment;
          }
        }
        unsigned __int8 v32 = Alignment;
      }
    }
    else
    {
      char i = v177;
    }
    v188[1] = *(_OWORD *)(a16 + 16);
    if (a12) {
      __int16 v65 = 4;
    }
    else {
      __int16 v65 = 0;
    }
    __int16 v172 = v65;
    v188[0] = 0uLL;
    unint64_t v206 = v208;
    uint64_t v207 = 0x1000000000;
    unsigned int v203 = v205;
    uint64_t v204 = 0x1000000000;
    uint64_t v200 = v202;
    uint64_t v201 = 0x2000000000;
    if (((v194 - (unsigned char *)__p) & 0xFFFFFFFF0) == 0)
    {
LABEL_72:
      unsigned int v66 = dword_1EBCFA348;
      if (!dword_1EBCFA348) {
        unsigned int v66 = (*(uint64_t (**)(unsigned int *))(*(void *)v182 + 640))(v182);
      }
      unsigned int v67 = v204;
      if (v204)
      {
        if (v66 >= 2 && byte_1EBCFA288)
        {
          if (v66 >= v204) {
            goto LABEL_84;
          }
          unsigned int v68 = v204 / v66;
          unsigned int v69 = v204 / v66 <= 1 ? 1 : v204 / v66;
          unsigned int v70 = v204;
          do
          {
            sub_1CCFE2BF0((void *)v21, a2, (uint64_t)&v200, v70 - v66, v70, &v206, &v203);
            v70 -= v66;
            --v69;
          }
          while (v69);
          v67 -= v68 * v66;
          if (v67) {
LABEL_84:
          }
            sub_1CCFE2BF0((void *)v21, a2, (uint64_t)&v200, 0, v67, &v206, &v203);
        }
        else
        {
          uint64_t v146 = 0;
          unsigned int v147 = v201;
          uint64_t v148 = 16 * v204;
          do
          {
            if (v147 >= HIDWORD(v201)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_OWORD *)v200 + v147) = *(_OWORD *)((char *)v206 + v146);
            unsigned int v149 = v201 + 1;
            LODWORD(v201) = v149;
            if (v149 >= HIDWORD(v201)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_OWORD *)v200 + v149) = *(_OWORD *)((char *)v203 + v146);
            unsigned int v147 = v201 + 1;
            LODWORD(v201) = v201 + 1;
            v146 += 16;
          }
          while (v148 != v146);
        }
      }
      uint64_t v71 = *(void *)(v21 + 832);
      if (v71) {
        uint64_t v72 = *(unsigned __int16 *)(v71 + 8);
      }
      else {
        uint64_t v72 = 0;
      }
      a3 = sub_1CD7FF4E8((void *)v21, (const char *)2, a2, (llvm *)1, 0, (uint64_t *)v200, v201, v72);
      if (v200 != v202) {
        free(v200);
      }
      if (v203 != v205) {
        free(v203);
      }
      if (v206 != v208) {
        free(v206);
      }
      goto LABEL_51;
    }
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v155 = v21;
    uint64_t v156 = v32;
    __int16 v152 = v65 | 0x10;
    uint64_t v154 = ((unint64_t)(v194 - (unsigned char *)__p) >> 4);
    int v178 = (unint64_t)(v194 - (unsigned char *)__p) >> 4;
    __int16 v176 = v178;
    __int16 v150 = v178;
    uint64_t v151 = 1 << i;
    while (1)
    {
      uint64_t v170 = v73;
      long long v187 = *((_OWORD *)__p + v73);
      if ((_BYTE)v187) {
        uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v187);
      }
      else {
        uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v187);
      }
      unint64_t v78 = ExtendedSizeInBits;
      if (v77 == 1) {
      unint64_t v79 = (v78 >> 3);
      }
      unint64_t v80 = v79 - v179;
      if (v79 < v179) {
        unint64_t v80 = 0;
      }
      uint64_t v181 = v75 - v80;
      unint64_t v81 = v74 - v80;
      uint64_t v168 = (v78 >> 3);
      if (!v171)
      {
        unint64_t v82 = (unint64_t)v182;
LABEL_173:
        llvm::TargetLoweringBase::getTypeConversion(v82, v166, v187, *((uint64_t *)&v187 + 1), (uint64_t)&v198);
        uint64_t v161 = v199;
        uint64_t v163 = *((void *)&v198 + 1);
        sub_1CB8F0264((uint64_t *)a15, v81, (uint64_t)&v198);
        if (llvm::MachinePointerInfo::isDereferenceable((llvm::MachinePointerInfo *)&v198, v78 >> 3, v166, v153))__int16 v130 = v152; {
        else
        }
          __int16 v130 = v172;
        uint64_t v21 = v155;
        a2 = v173;
        uint64_t v131 = sub_1CD7F6604(v155, a7, v165, v81, 0, v173, v176 & 0xF000);
        uint64_t v133 = v132;
        sub_1CB8F0264((uint64_t *)a15, v81, (uint64_t)&v185);
        unint64_t v164 = v164 & 0xFFFFFFFFFFFF0000 | (63 - __clz((v81 | v151) & -(uint64_t)(v81 | v151))) | 0x100;
        unsigned int v136 = sub_1CD7FAEE8(v155, 1, (uint64_t)v173, v163, v161, (uint64_t)a3, a4, v134, (uint64_t)v131, v133, &v185, v187, *((uint64_t *)&v187 + 1), v164, SHIDWORD(v164), v130, v188);
        if (v207 >= (unint64_t)HIDWORD(v207)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v137 = v135;
        int v138 = (uint64_t **)((char *)v206 + 16 * v207);
        *int v138 = v136;
        v138[1] = (uint64_t *)1;
        LODWORD(v207) = v207 + 1;
        uint64_t v139 = sub_1CD7F6604(v155, v174, a6, v181, 0, v173, v178 & 0xF000);
        unsigned int v141 = v140;
        sub_1CB8F0264((uint64_t *)a14, v181, (uint64_t)v184);
        unint64_t v143 = sub_1CD7FB71C(v155, (uint64_t)a3, a4, (uint64_t)v173, (uint64_t)v136, v137, (uint64_t)v139, v141, (uint64_t)v184, v187, *((uint64_t *)&v187 + 1), v156, SHIDWORD(v156), v172, v188);
        if (v204 >= (unint64_t)HIDWORD(v204)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v144 = v168;
        v176 &= 0xF000u;
        LOWORD(v178) = v178 & 0xF000;
        unsigned int v145 = (uint64_t **)((char *)v203 + 16 * v204);
        *unsigned int v145 = v143;
        v145[1] = (uint64_t *)v142;
        LODWORD(v204) = v204 + 1;
        goto LABEL_179;
      }
      unint64_t v82 = (unint64_t)v182;
      if (v157)
      {
        if ((_BYTE)v187)
        {
          BOOL v96 = v187 - 75 >= 0xFFFFFFC4
             || v187 - 8 >= 0xFFFFFFFA;
          if (!v96 || v187 - 15 < 0x9C) {
            goto LABEL_173;
          }
        }
        else if ((*(_DWORD *)(*((void *)&v187 + 1) + 8) & 0xFE) == 0x12 {
               || *(_DWORD *)(*((void *)&v187 + 1) + 8) != 13)
        }
        {
          goto LABEL_173;
        }
      }
      LODWORD(v83) = v192 - v81;
      if (v192 <= v81) {
        break;
      }
      unint64_t v84 = v190;
      uint64_t v86 = *((void *)&v187 + 1);
      uint64_t v85 = (llvm *)v187;
      long long v198 = v187;
      if (!v190) {
        goto LABEL_109;
      }
      int v159 = v191;
      if ((_BYTE)v187) {
        unsigned int v87 = sub_1CB87E200((unsigned __int8 *)&v198);
      }
      else {
        unsigned int v87 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v198);
      }
      unsigned int v97 = v87;
      unint64_t v162 = v78;
      if (v88 == 1) {
      unsigned int v98 = v97 >> 3;
      }
      if (v97 >> 3 >= v83) {
        uint64_t v83 = v83;
      }
      else {
        uint64_t v83 = v98;
      }
      unsigned int v197 = v97;
      if (v97 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v196);
      }
      unint64_t v196 = 0;
      unsigned int v99 = v159 + v81;
      if (*(unsigned char *)(*(void *)(**(void **)(v21 + 40) + 40) + 272))
      {
        if (v83)
        {
          char v105 = 8 * v98 - 8;
          do
          {
            unint64_t v106 = (unint64_t)llvm::ConstantDataSequential::getElementAsInteger(v84, v99) << v105;
            if (v197 > 0x40)
            {
              *(void *)v196 |= v106;
            }
            else
            {
              unint64_t v107 = v196 | v106;
              if (v197) {
                unint64_t v108 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v197;
              }
              else {
                unint64_t v108 = 0;
              }
              unint64_t v196 = v108 & v107;
            }
            v105 -= 8;
            ++v99;
            --v83;
          }
          while (v83);
        }
      }
      else if (v83)
      {
        uint64_t v100 = 0;
        uint64_t v101 = 8 * v83;
        do
        {
          unint64_t v102 = (unint64_t)llvm::ConstantDataSequential::getElementAsInteger(v84, v99) << v100;
          if (v197 > 0x40)
          {
            *(void *)v196 |= v102;
          }
          else
          {
            unint64_t v103 = v196 | v102;
            if (v197) {
              unint64_t v104 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v197;
            }
            else {
              unint64_t v104 = 0;
            }
            unint64_t v196 = v104 & v103;
          }
          v100 += 8;
          ++v99;
        }
        while (v101 != v100);
      }
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v198, *(llvm::LLVMContext **)(v21 + 56));
      unint64_t v82 = (unint64_t)v182;
      if ((*(unsigned int (**)(unsigned int *, unint64_t *, uint64_t))(*(void *)v182 + 1400))(v182, &v196, v109))
      {
        uint64_t v112 = *((void *)&v198 + 1);
        uint64_t v111 = (llvm *)v198;
        uint64_t v113 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v21 + 56), (llvm::LLVMContext *)&v196, v110);
        uint64_t v114 = sub_1CD7EC028(v21, (uint64_t)v113, a2, v111, v112, 0, 0);
        unsigned int v116 = v115;
      }
      else
      {
        unsigned int v116 = 0;
        uint64_t v114 = 0;
      }
      unint64_t v78 = v162;
      if (v197 >= 0x41 && v196) {
        MEMORY[0x1D25D9CB0](v196, 0x1000C8000313F17);
      }
LABEL_170:
      if (!v114) {
        goto LABEL_173;
      }
      unsigned int v160 = v116;
      unsigned int v125 = sub_1CD7F6604(v21, v174, a6, v181, 0, a2, v150 & 0xF000);
      unsigned int v158 = v126;
      sub_1CB8F0264((uint64_t *)a14, v181, (uint64_t)v186);
      uint64_t v128 = sub_1CD7FB188(v21, (uint64_t)a3, a4, (uint64_t)a2, (uint64_t)v114, v160, (uint64_t)v125, v158, (uint64_t)v186, v156, SHIDWORD(v156), v172, v188);
      if (v201 >= (unint64_t)HIDWORD(v201)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v150 &= 0xF000u;
      uint64_t v129 = (uint64_t **)((char *)v200 + 16 * v201);
      *uint64_t v129 = v128;
      v129[1] = (uint64_t *)v127;
      LODWORD(v201) = v201 + 1;
      if (!v128) {
        goto LABEL_173;
      }
      a2 = v173;
      uint64_t v21 = v155;
      uint64_t v144 = v168;
LABEL_179:
      uint64_t v74 = v81 + v144;
      uint64_t v75 = v181 + v144;
      v179 -= v144;
      uint64_t v73 = v170 + 1;
      if (v170 + 1 == v154) {
        goto LABEL_72;
      }
    }
    uint64_t v86 = *((void *)&v187 + 1);
    uint64_t v85 = (llvm *)v187;
    long long v198 = v187;
LABEL_109:
    unint64_t v82 = (unint64_t)v182;
    if ((_BYTE)v85)
    {
      if (((_BYTE)v85 - 120) >= 0x20u
        && ((_BYTE)v85 - 2) >= 6u
        && ((_BYTE)v85 - 15) >= 0x3Cu)
      {
        if (v85 > 0xDu || ((1 << (char)v85) & 0x2C00) == 0)
        {
LABEL_113:
          unsigned int v92 = sub_1CD3DB440((llvm::EVT *)&v198, v77);
          if ((_BYTE)v198) {
            char EVT = sub_1CB8C2FBC((unsigned __int8 *)&v198);
          }
          else {
            char EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((void *)&v198 + 1) + 24), 0, v91);
          }
          if (EVT == 10) {
            uint64_t v117 = 5;
          }
          else {
            uint64_t v117 = 6;
          }
          long long v118 = v198;
          int v119 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(v21 + 56), v117, 0, v92, 0);
          int v122 = sub_1CD7EBF14(v21, 0, a2, v119, v120, 0, 0);
          __int16 v123 = 0;
          uint64_t v124 = *(void *)(v21 + 832);
          if (v124) {
            __int16 v123 = *(_WORD *)(v124 + 8);
          }
          unint64_t v94 = sub_1CD7F3564((llvm::APFloatBase *)v21, (const char *)0xD8, (uint64_t)a2, (llvm *)v118, *((uint64_t *)&v118 + 1), (uint64_t)v122, v121, v123);
          goto LABEL_169;
        }
        unint64_t v94 = sub_1CD7ECDC4(v21, (uint64_t)a2, (BOOL)v85, v86, 0, 0.0);
LABEL_169:
        uint64_t v114 = v94;
        unsigned int v116 = v95;
        goto LABEL_170;
      }
    }
    else
    {
      if ((*(_DWORD *)(v86 + 8) & 0xFE) == 0x12) {
        int v90 = *(unsigned __int8 *)(**(void **)(v86 + 16) + 8);
      }
      else {
        int v90 = *(_DWORD *)(v86 + 8);
      }
      if (v90 != 13) {
        goto LABEL_113;
      }
    }
    unint64_t v94 = sub_1CD7EBF14(v21, 0, a2, v85, v86, 0, 0);
    goto LABEL_169;
  }
  a3 = 0;
LABEL_51:
  if (__p)
  {
    uint64_t v194 = __p;
    operator delete(__p);
  }
  return a3;
}

uint64_t sub_1CCFE1EDC(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    int v2 = a2;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(result + 8) + 64))(*(void *)(result + 8), a2, 0);
    if ((result & 1) == 0)
    {
      uint64_t v5 = "cannot lower memory intrinsic in address space ";
      __int16 v6 = 259;
      __int16 v4 = 264;
      LODWORD(v3[0]) = v2;
      sub_1CD3E3950((uint64_t *)&v5, v3, (uint64_t)v7);
      llvm::report_fatal_error((llvm *)v7, (const llvm::Twine *)1);
    }
  }
  return result;
}

__n128 sub_1CCFE1F74(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = *(unsigned __int16 *)(a6 + 24);
  switch(v6)
  {
    case 11:
      goto LABEL_4;
    case 51:
      result.n128_u64[0] = sub_1CCFE2008(a2, a3, a4, 0, a1).n128_u64[0];
      return result;
    case 35:
LABEL_4:
      uint64_t v7 = *(void *)(a6 + 80);
      unsigned int v8 = *(_DWORD *)(v7 + 32);
      if (v8 > 0x40) {
        unint64_t v9 = **(void **)(v7 + 24);
      }
      else {
        unint64_t v9 = (uint64_t)(*(void *)(v7 + 24) << -(char)v8) >> -(char)v8;
      }
      result.n128_u64[0] = sub_1CCFE2008(a2, a3, a4, v9, a1).n128_u64[0];
      break;
    default:
      __n128 result = *a2;
      *a1 = *a2;
      a1[1].n128_u64[0] = a2[1].n128_u64[0];
      break;
  }
  return result;
}

__n128 sub_1CCFE2008@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X4>, __n128 *a5@<X8>)
{
  unint64_t v5 = a4;
  int v7 = *(unsigned __int16 *)(a3 + 24);
  if (v7 == 15) {
    goto LABEL_4;
  }
  if (v7 == 56)
  {
    uint64_t v14 = *(uint64_t **)(a3 + 32);
    uint64_t v15 = v14[5];
    int v16 = *(unsigned __int16 *)(v15 + 24);
    if (v16 == 35 || v16 == 11)
    {
      uint64_t v18 = *v14;
      int v19 = *(unsigned __int16 *)(v18 + 24);
      if (v19 == 15 || v19 == 39)
      {
        int v20 = *(_DWORD *)(v18 + 76);
        uint64_t v21 = *(void *)(v15 + 80);
        unsigned int v22 = *(_DWORD *)(v21 + 32);
        if (v22 > 0x40) {
          uint64_t v23 = **(void **)(v21 + 24);
        }
        else {
          uint64_t v23 = (uint64_t)(*(void *)(v21 + 24) << -(char)v22) >> -(char)v22;
        }
        unint64_t v5 = v23 + a4;
        uint64_t v10 = *(uint64_t ***)(*(void *)(a2 + 40) + 432);
        int v9 = v20;
        goto LABEL_5;
      }
    }
LABEL_17:
    __n128 result = *a1;
    *a5 = *a1;
    a5[1].n128_u64[0] = a1[1].n128_u64[0];
    return result;
  }
  if (v7 != 39) {
    goto LABEL_17;
  }
LABEL_4:
  uint64_t v8 = *(void *)(a2 + 40);
  int v9 = *(_DWORD *)(a3 + 76);
  uint64_t v10 = *(uint64_t ***)(v8 + 432);
LABEL_5:
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(v10, v9);
  a5->n128_u64[0] = (unint64_t)FixedStack | 4;
  a5->n128_u64[1] = v5;
  a5[1].n128_u8[4] = 0;
  if (FixedStack) {
    unsigned __int32 v13 = *((_DWORD *)FixedStack + 3);
  }
  else {
    unsigned __int32 v13 = 0;
  }
  a5[1].n128_u32[0] = v13;
  return result;
}

void sub_1CCFE2110(uint64_t a1, uint64_t a2)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 26))
  {
    __int16 v4 = v38;
    int v36 = v38;
    uint64_t v37 = 0x200000000;
    uint64_t v5 = *(void *)(a1 + 616);
    uint64_t v6 = sub_1CCF9A240(v5 + 688, a2);
    if (*(void *)(v5 + 688) + 40 * *(unsigned int *)(v5 + 704) != v6)
    {
      uint64_t v7 = *(unsigned int *)(v6 + 16);
      if (v7)
      {
        uint64_t v8 = *(uint64_t **)(v6 + 8);
        int v9 = &v8[v7];
        do
        {
          uint64_t v10 = *v8;
          if (!*(unsigned char *)(*v8 + 62) && *(_WORD *)(a2 + 24) == 56)
          {
            int v11 = *(uint64_t **)(a2 + 32);
            uint64_t v12 = *v11;
            uint64_t v13 = v11[1];
            uint64_t v14 = v11[5];
            if (!sub_1CD7F590C(a1, *v11))
            {
              if (sub_1CD7F590C(a1, v14))
              {
                uint64_t v15 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
                int v16 = (uint64_t *)(v15 + 24);
                if (*(_DWORD *)(v15 + 32) >= 0x41u) {
                  int v16 = (uint64_t *)*v16;
                }
                uint64_t v27 = v4;
                uint64_t v28 = *v16;
                appended = *(llvm::MDNode **)(v10 + 40);
                uint64_t v17 = *(unsigned char **)(v10 + 8);
                uint64_t v18 = &v17[24 * *(void *)v10];
                int v33 = v35;
                uint64_t v34 = 0x200000000;
                sub_1CCD286A0((unsigned int *)&v33, v17, v18);
                unint64_t v19 = v34;
                if (v34)
                {
                  uint64_t v21 = 0;
                  unint64_t v22 = 0;
                  do
                  {
                    if (!*(_DWORD *)((char *)v33 + v21))
                    {
                      uint64_t v23 = (char *)v33 + v21;
                      if (*(void *)((char *)v33 + v21 + 8) == a2)
                      {
                        *(_DWORD *)uint64_t v23 = 0;
                        *((void *)v23 + 1) = v12;
                        *((_DWORD *)v23 + 4) = v13;
                        uint64_t v30 = v32;
                        uint64_t v31 = 0x300000000;
                        llvm::DIExpression::appendOffset((uint64_t)&v30, v28);
                        appended = llvm::DIExpression::appendOpsToArg(appended, (uint64_t *)v30, v31, v22, 1);
                        if (v30 != v32) {
                          free(v30);
                        }
                        unint64_t v19 = v34;
                      }
                    }
                    ++v22;
                    v21 += 24;
                  }
                  while (v22 < v19);
                }
                else
                {
                  unint64_t v19 = 0;
                }
                uint64_t v20 = sub_1CD801CEC(a1, *(void *)(v10 + 32), (uint64_t)appended, v33, v19, *(const void **)(v10 + 24), *(void *)(v10 + 16), *(unsigned char *)(v10 + 60), (unsigned __int8 **)(v10 + 48), *(_DWORD *)(v10 + 56), *(unsigned char *)(v10 + 61));
                __int16 v4 = v27;
                if (v37 >= (unint64_t)HIDWORD(v37)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v36[v37] = v20;
                LODWORD(v37) = v37 + 1;
                *(_WORD *)(v10 + 62) = 257;
                if (v33 != v35) {
                  free(v33);
                }
              }
            }
          }
          ++v8;
        }
        while (v8 != v9);
      }
    }
    unsigned int v24 = v36;
    if (v37)
    {
      uint64_t v25 = 8 * v37;
      do
      {
        uint64_t v26 = (void *)*v24++;
        sub_1CD801DD0(a1, v26, 0);
        v25 -= 8;
      }
      while (v25);
      unsigned int v24 = v36;
    }
    if (v24 != v4) {
      free(v24);
    }
  }
}

void *sub_1CCFE241C(void *result)
{
  *__n128 result = &unk_1F26420B8;
  *(void *)(result[2] + 656) = result[1];
  return result;
}

BOOL sub_1CCFE2444(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2) {
    return 0;
  }
  do
  {
    int v3 = *(_DWORD *)(v2 + 8);
    BOOL result = v3 == a2;
    if (v3 == a2) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 32);
  }
  while (v2);
  return result;
}

uint64_t sub_1CCFE2470(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 1520))(*(void *)(a1 + 24))) {
    return 0;
  }
  if (((*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 24) + 1504))(*(void *)(a1 + 24), a2, *(void *)(a1 + 80), *(void *)(a1 + 72)) & 1) == 0)
  {
    if (!*(_WORD *)(a2 + 56)) {
      return 0;
    }
    uint64_t v5 = *(unsigned int **)(a2 + 32);
    uint64_t v6 = &v5[10 * *(unsigned __int16 *)(a2 + 56)];
    while (*(unsigned char *)(*(void *)(*(void *)v5 + 40) + 16 * v5[2]) == 1
         || (*(unsigned char *)(*(void *)v5 + 26) & 4) == 0)
    {
      v5 += 10;
      if (v5 == v6) {
        return 0;
      }
    }
  }
  return 1;
}

void *sub_1CCFE2558(void *result)
{
  *BOOL result = &unk_1F26420B8;
  *(void *)(result[2] + 656) = result[1];
  return result;
}

uint64_t sub_1CCFE2580(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  for (int i = 1 - a4; ; ++i)
  {
    uint64_t v6 = *a1;
    if (*a1 == a2 && *((_DWORD *)a1 + 2) == a3) {
      return 1;
    }
    if (i == 1) {
      return 0;
    }
    int v7 = *(unsigned __int16 *)(v6 + 24);
    if (v7 != 253) {
      break;
    }
    uint64_t v8 = *(void *)(v6 + 96);
    if ((*(_WORD *)(v8 + 36) & 0xE00) != 0 || (*(_WORD *)(v8 + 32) & 4) != 0) {
      return 0;
    }
    a1 = *(uint64_t **)(v6 + 32);
  }
  if (v7 != 2) {
    return 0;
  }
  int v9 = *(_OWORD **)(v6 + 32);
  uint64_t v10 = *(unsigned __int16 *)(v6 + 56);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    uint64_t v12 = (char *)v9;
    while (*(void *)v12 != a2 || *((_DWORD *)v12 + 2) != a3)
    {
      v12 += 40;
      v11 -= 40;
      if (!v11)
      {
        uint64_t v12 = (char *)v9 + 40 * v10;
        break;
      }
    }
  }
  else
  {
    uint64_t v12 = (char *)v9;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v12 - (char *)v9) >> 3) == v10 || (uint64_t v14 = *(void *)(a2 + 48)) == 0)
  {
LABEL_29:
    if (!v10) {
      return 1;
    }
    goto LABEL_30;
  }
  int v15 = 1;
  do
  {
    if (*(_DWORD *)(v14 + 8) == a3)
    {
      if (!v15) {
        goto LABEL_29;
      }
      int v15 = 0;
    }
    uint64_t v14 = *(void *)(v14 + 32);
  }
  while (v14);
  uint64_t result = 1;
  if (v10 && v15)
  {
LABEL_30:
    uint64_t v16 = a3;
    uint64_t v17 = -i;
    uint64_t v18 = 40 * v10 - 40;
    do
    {
      long long v19 = *v9;
      int v9 = (_OWORD *)((char *)v9 + 40);
      long long v21 = v19;
      uint64_t result = sub_1CCFE2580(&v21, a2, v16, v17);
      if (!result) {
        break;
      }
      uint64_t v20 = v18;
      v18 -= 40;
    }
    while (v20);
  }
  return result;
}

uint64_t sub_1CCFE2710(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if ((*(unsigned char *)(a2 + 26) & 8) != 0) {
    return 0;
  }
  if ((*(unsigned char *)(a3 + 26) & 8) != 0) {
    return 0;
  }
  if ((*(_WORD *)(*(void *)(a2 + 96) + 36) & 0xF00) != 0) {
    return 0;
  }
  if ((*(_WORD *)(a2 + 26) & 0x380) != 0) {
    return 0;
  }
  if ((*(_WORD *)(a3 + 26) & 0x380) != 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a3 + 32);
  if (*(void *)v7 != *(void *)v8 || *(_DWORD *)(v7 + 8) != *(_DWORD *)(v8 + 8)) {
    return 0;
  }
  long long v19 = *(_OWORD *)*(void *)(a2 + 40);
  uint64_t v12 = (_BYTE)v19
      ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)&v19)
      : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v19);
  if (v13 == 1)
  {
    int v15 = v12;
    uint64_t v12 = v15;
  }
  if (a4 != (unint64_t)v12 >> 3) {
    return 0;
  }
  sub_1CCFE3E9C(a3, a1, (uint64_t)v18);
  sub_1CCFE3E9C(a2, a1, (uint64_t)v17);
  uint64_t v16 = 0;
  LODWORD(result) = sub_1CCFE3CB0(v18, v17, a1, &v16);
  if (v16 == a5 * a4) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t *sub_1CCFE2860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const llvm::APInt *a6@<X5>, uint64_t **a7@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v12 = *(void *)(a2 + 40) + 16 * a3;
  uint64_t v13 = *(llvm **)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  BOOL v35 = *(llvm **)v12;
  uint64_t v36 = v14;
  unsigned int v17 = sub_1CC4A0738((llvm::EVT *)&v37) >> 1;
  if ((_BYTE)v37)
  {
    if (v37 - 15 >= 0x69) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v21 = (uint64_t)sub_1CD7EBF14(a1, v17, a6, v13, v14, 0, 0);
    uint64_t v23 = v24;
    goto LABEL_11;
  }
  if (*(unsigned char *)(v38 + 8) == 18) {
    goto LABEL_10;
  }
LABEL_3:
  unsigned int v18 = sub_1CD3E12F4((unsigned __int8 *)&v35, v15, v16);
  unsigned int v34 = v18;
  if (v18 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v33);
  }
  unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
  if (!v18) {
    LODWORD(v19) = 0;
  }
  uint64_t v33 = v19 & v17;
  uint64_t v21 = sub_1CD7877A0(a1, a6, (uint64_t)v13, v14, (uint64_t)&v33);
  uint64_t v23 = v22;
  if (v34 >= 0x41 && v33) {
    MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
  }
LABEL_11:
  uint64_t v25 = *(void *)(a1 + 832);
  if (v25) {
    LOWORD(v25) = *(_WORD *)(v25 + 8);
  }
  uint64_t v27 = sub_1CCFDED5C(a1, 169, a6, v35, v36, a2, a3, v20, v21, v23, v25);
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(a1 + 832);
  if (v30) {
    LOWORD(v30) = *(_WORD *)(v30 + 8);
  }
  uint64_t result = sub_1CCFDED5C(a1, 85, a6, v35, v36, a2, a3, v26, v21, v23, v30);
  *a7 = v27;
  a7[1] = v29;
  a7[2] = result;
  a7[3] = v32;
  return result;
}

void *sub_1CCFE2A40(void *a1)
{
  *a1 = &unk_1F26420F0;
  uint64_t v2 = a1 + 3;
  int v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  *a1 = &unk_1F26420B8;
  *(void *)(a1[2] + 656) = a1[1];
  return a1;
}

void sub_1CCFE2B08(void *a1)
{
  *a1 = &unk_1F26420F0;
  uint64_t v2 = a1 + 3;
  int v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  *a1 = &unk_1F26420B8;
  *(void *)(a1[2] + 656) = a1[1];

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCFE2BF0(void *a1, const llvm::APInt *a2, uint64_t a3, unsigned int a4, unsigned int a5, void *a6, void *a7)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v31 = 0;
  unsigned int v12 = a5 - a4;
  if (a5 <= a4)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v13 = 16 * a4;
    do
    {
      unint64_t v14 = *(unsigned int *)(a3 + 8);
      if (v14 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(*(void *)a3 + 16 * v14) = *(_OWORD *)(*a6 + v13);
      ++*(_DWORD *)(a3 + 8);
      if (v31 >= 0x10uLL) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v32[v31] = *(_OWORD *)(*a6 + v13);
      uint64_t v15 = ++v31;
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  uint64_t v16 = a1[104];
  if (v16) {
    uint64_t v17 = *(unsigned __int16 *)(v16 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  unsigned int v18 = sub_1CD7FF4E8(a1, (const char *)2, a2, (llvm *)1, 0, (uint64_t *)v32, v15, v17);
  BOOL v20 = a5 >= a4;
  unsigned int v21 = a5 - a4;
  if (v21 != 0 && v20)
  {
    uint64_t v22 = (uint64_t)v18;
    int v23 = v19;
    uint64_t v24 = 16 * a4;
    do
    {
      uint64_t v25 = *(void *)(*a7 + v24);
      if (*(_WORD *)(v25 + 24) != 254) {
        uint64_t v25 = 0;
      }
      uint64_t v27 = sub_1CD7FB840((uint64_t)a1, v22, v23, (uint64_t)a2, *(void *)(*(void *)(v25 + 32) + 40), *(void *)(*(void *)(v25 + 32) + 48), *(void *)(*(void *)(v25 + 32) + 80), *(void *)(*(void *)(v25 + 32) + 88), *(void *)(v25 + 80), *(void *)(v25 + 88), *(void *)(v25 + 96));
      unint64_t v28 = *(unsigned int *)(a3 + 8);
      if (v28 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v29 = (uint64_t **)(*(void *)a3 + 16 * v28);
      *uint64_t v29 = v27;
      v29[1] = v26;
      ++*(_DWORD *)(a3 + 8);
      v24 += 16;
      --v21;
    }
    while (v21);
  }
}

uint64_t *sub_1CCFE2E54(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6)
{
  v83[2] = *MEMORY[0x1E4F143B8];
  unint64_t v79 = a3;
  uint64_t v80 = a4;
  uint64_t v10 = sub_1CD3E12F4((unsigned __int8 *)&v79, a2, (BOOL)a3);
  uint64_t v13 = v10;
  int v14 = *(unsigned __int16 *)(a1 + 24);
  if (v14 != 35 && v14 != 11)
  {
    unint64_t v29 = sub_1CD3DD468((unsigned __int8 *)&v79, v11, v12);
    uint64_t v31 = v29;
    uint64_t v32 = v30;
    unint64_t v81 = (llvm *)v29;
    uint64_t v82 = v30;
    if ((_BYTE)v29)
    {
      if (v29 - 120 < 0x20
        || v29 - 2 < 6
        || v29 - 15 < 0x3C)
      {
        goto LABEL_59;
      }
      unsigned int v34 = *(llvm::IntegerType **)(a5 + 56);
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v81);
    }
    else
    {
      if ((*(_DWORD *)(v30 + 8) & 0xFE) == 0x12) {
        int v33 = *(unsigned __int8 *)(**(void **)(v30 + 16) + 8);
      }
      else {
        int v33 = *(_DWORD *)(v30 + 8);
      }
      if (v33 == 13)
      {
LABEL_59:
        uint64_t v46 = *(void *)(a5 + 832);
        if (v46) {
          __int16 v47 = *(_WORD *)(v46 + 8);
        }
        else {
          __int16 v47 = 0;
        }
        unint64_t v48 = a2 & 0xFFFFFFFF00000000;
        uint64_t v28 = (uint64_t)sub_1CD7F3564((llvm::APFloatBase *)a5, (const char *)0xC7, (uint64_t)a6, (llvm *)v31, v32, a1, (void *)a2, v47);
        unsigned int v51 = v49;
        if (v13 >= 9)
        {
          unsigned int v76 = 8;
          uint64_t v75 = 1;
          llvm::APInt::getSplat(v13, (llvm::APInt *)&v75, (uint64_t)&v77);
          if (v76 >= 0x41 && v75) {
            MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
          }
          int v63 = v81;
          uint64_t v64 = v82;
          uint64_t v65 = v51 | v48;
          unsigned int v66 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a5 + 56), (llvm::LLVMContext *)&v77, v62);
          unsigned int v67 = sub_1CD7EC028(a5, (uint64_t)v66, a6, v63, v64, 0, 0);
          uint64_t v70 = *(void *)(a5 + 832);
          if (v70) {
            LOWORD(v70) = *(_WORD *)(v70 + 8);
          }
          uint64_t v28 = (uint64_t)sub_1CCFDED5C(a5, 58, a6, v63, v64, v28, v65, v69, (uint64_t)v67, v68, v70);
          unsigned int v51 = v49;
          if (v78 >= 0x41 && v77) {
            MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
          }
        }
        uint64_t v52 = *(void *)(v28 + 40);
        uint64_t v53 = v51;
        uint64_t v54 = (unsigned __int8 *)(v52 + 16 * v51);
        int v55 = *v54;
        int v56 = v79;
        if (v79 == v55)
        {
          if ((_BYTE)v79) {
            goto LABEL_79;
          }
          uint64_t v57 = *((void *)v54 + 1);
          uint64_t v58 = v80;
          if (v80 == v57) {
            goto LABEL_79;
          }
        }
        else
        {
          if ((_BYTE)v79)
          {
            if (v79 - 120 < 0x20
              || v79 - 2 < 6
              || v79 - 15 < 0x3C)
            {
              goto LABEL_77;
            }
            goto LABEL_93;
          }
          uint64_t v58 = v80;
        }
        if ((*(_DWORD *)(v58 + 8) & 0xFE) == 0x12) {
          int v59 = *(unsigned __int8 *)(**(void **)(v58 + 16) + 8);
        }
        else {
          int v59 = *(_DWORD *)(v58 + 8);
        }
        if (v59 == 13)
        {
          int v56 = 0;
LABEL_77:
          if (v56 != v55)
          {
            uint64_t v60 = v80;
            return sub_1CD787B1C(a5, v79, v60, (uint64_t)a6, v28, v53 | v48);
          }
          int v56 = v55;
LABEL_79:
          if (v56) {
            return (uint64_t *)v28;
          }
          uint64_t v60 = v80;
          if (v80 == *(void *)(v52 + 16 * v53 + 8)) {
            return (uint64_t *)v28;
          }
          return sub_1CD787B1C(a5, v79, v60, (uint64_t)a6, v28, v53 | v48);
        }
LABEL_93:
        unint64_t v71 = sub_1CD3DD468((unsigned __int8 *)&v79, v49, v50);
        uint64_t v28 = sub_1CD7EF724(a5, v71, v72, v28, v51 | v48);
        uint64_t v52 = *(void *)(v28 + 40);
        uint64_t v53 = v73;
        int v56 = v79;
        int v55 = *(unsigned __int8 *)(v52 + 16 * v73);
        goto LABEL_77;
      }
      unsigned int v34 = *(llvm::IntegerType **)(a5 + 56);
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v81);
    }
    uint64_t v42 = (llvm::LLVMContext *)ExtendedSizeInBits;
    if (v36 == 1)
    {
      uint64_t v74 = (llvm::LLVMContext *)ExtendedSizeInBits;
      uint64_t v42 = v74;
    }
    if ((int)v42 <= 31)
    {
      switch(v42)
      {
        case 1:
          uint64_t v32 = 0;
          uint64_t v31 = 2;
          goto LABEL_58;
        case 0x10:
          uint64_t v32 = 0;
          uint64_t v31 = 4;
          goto LABEL_58;
        case 8:
          uint64_t v32 = 0;
          uint64_t v31 = 3;
          goto LABEL_58;
      }
    }
    else
    {
      switch(v42)
      {
        case 0x20:
          uint64_t v32 = 0;
          uint64_t v31 = 5;
LABEL_58:
          unint64_t v81 = (llvm *)v31;
          uint64_t v82 = v32;
          goto LABEL_59;
        case 0x40:
          uint64_t v32 = 0;
          uint64_t v31 = 6;
          goto LABEL_58;
        case 0x80:
          uint64_t v32 = 0;
          uint64_t v31 = 7;
          goto LABEL_58;
      }
    }
    uint64_t v32 = llvm::IntegerType::get(v34, v42);
    uint64_t v31 = 0;
    goto LABEL_58;
  }
  llvm::APInt::getSplat(v10, (llvm::APInt *)(*(void *)(a1 + 80) + 24), (uint64_t)&v77);
  if ((_BYTE)v79)
  {
    BOOL v22 = v79 - 120 >= 0x20 && v79 - 2 >= 6;
    if (!v22 || v79 - 15 < 0x3C)
    {
      uint64_t v19 = sub_1CB87E200((unsigned __int8 *)&v79);
      goto LABEL_29;
    }
    uint64_t v17 = v80;
LABEL_18:
    int v23 = sub_1CD788130((uint64_t)v79, v17, v16);
    if (v23 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v82, (uint64_t)&unk_1CFB2E344);
    }
    llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)&v82, v23, &v77);
    uint64_t v24 = v79;
    uint64_t v25 = v80;
    uint64_t v27 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(a5 + 56), (llvm::LLVMContext *)&v81, v26);
    uint64_t v28 = (uint64_t)sub_1CD7ECAFC(a5, (uint64_t)v27, (uint64_t)a6, v24, v25, 0);
    if ((_UNKNOWN *)v82 == &unk_1CFB2E344)
    {
      sub_1CB845718(v83);
    }
    else if ((*(_DWORD *)(v82 + 8) - 64) <= 0xFFFFFF7F && v83[0])
    {
      MEMORY[0x1D25D9CB0](v83[0], 0x1000C8000313F17);
    }
    goto LABEL_47;
  }
  uint64_t v17 = v80;
  if ((*(_DWORD *)(v80 + 8) & 0xFE) == 0x12) {
    int v18 = *(unsigned __int8 *)(**(void **)(v80 + 16) + 8);
  }
  else {
    int v18 = *(_DWORD *)(v80 + 8);
  }
  if (v18 != 13) {
    goto LABEL_18;
  }
  uint64_t v19 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v79);
LABEL_29:
  unint64_t v37 = v19;
  if (v20 == 1) {
  if (v37 <= 0x40)
  }
  {
    uint64_t v39 = *(void *)(a1 + 80);
    unsigned int v40 = *(_DWORD *)(v39 + 32);
    if (v40 > 0x40) {
      uint64_t v41 = **(void **)(v39 + 24);
    }
    else {
      uint64_t v41 = (uint64_t)(*(void *)(v39 + 24) << -(char)v40) >> -(char)v40;
    }
    uint64_t v38 = (*(unsigned int (**)(void, uint64_t))(**(void **)(a5 + 24) + 1096))(*(void *)(a5 + 24), v41) ^ 1;
  }
  else
  {
    uint64_t v38 = 1;
  }
  int v43 = v79;
  uint64_t v44 = v80;
  uint64_t v45 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a5 + 56), (llvm::LLVMContext *)&v77, v21);
  uint64_t v28 = (uint64_t)sub_1CD7EC028(a5, (uint64_t)v45, a6, v43, v44, 0, v38);
LABEL_47:
  if (v78 >= 0x41 && v77) {
    MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
  }
  return (uint64_t *)v28;
}

void sub_1CCFE34C8(void *a1)
{
  *a1 = &unk_1F26420B8;
  *(void *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCFE3500(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 24);
  int v3 = *(void **)(result + 32);
  for (uint64_t i = *v2; i != *v3 && *(void *)(i + 16) == a2; *v2 = i)
    uint64_t i = *(void *)(i + 32);
  return result;
}

void sub_1CCFE3530(void *a1)
{
  *a1 = &unk_1F26420B8;
  *(void *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCFE3568(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(unsigned int *)(v2 + 8);
  if (v3)
  {
    __int16 v4 = *(void **)v2;
    uint64_t v5 = 24 * v3;
    do
    {
      if (*v4 == a2) {
        void *v4 = 0;
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  return result;
}

BOOL sub_1CCFE35A0(const void **a1, const void **a2)
{
  size_t v4 = *((unsigned __int8 *)a2 + 23);
  uint64_t v5 = a2[1];
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if ((v4 & 0x80u) == 0) {
    size_t v7 = v4 & 0x7F;
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  int v8 = *((char *)a1 + 23);
  if (v8 >= 0) {
    size_t v9 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v9 = (size_t)a1[1];
  }
  if (v8 >= 0) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = *a1;
  }
  if (v7 >= v9) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v7;
  }
  int v12 = memcmp(v10, v6, v11);
  BOOL v13 = v9 < v7;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  if ((v4 & 0x80u) != 0) {
    size_t v4 = (size_t)v5;
  }
  if (v9 >= v4) {
    size_t v15 = v4;
  }
  else {
    size_t v15 = v9;
  }
  int v16 = memcmp(v6, v10, v15);
  BOOL v17 = v4 < v9;
  if (v16) {
    BOOL v17 = v16 < 0;
  }
  return !v17 && *((_DWORD *)a1 + 6) < *((_DWORD *)a2 + 6);
}

_DWORD *sub_1CCFE3694(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(48 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 48 * v5;
      do
      {
        *(void *)uint64_t result = -4096;
        result += 12;
        v6 -= 48;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1CCFE3734()
{
}

void *sub_1CCFE3748()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F26421B8;
  return result;
}

void sub_1CCFE3780(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26421B8;
}

uint64_t sub_1CCFE37A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 80);
  uint64_t v3 = *(unsigned int *)(v2 + 32);
  if (v3 > 0x40)
  {
    int v5 = 0;
    int64_t v6 = (unint64_t)(v3 + 63) >> 6;
    do
    {
      if (v6-- < 1) {
        break;
      }
      unint64_t v8 = *(void *)(*(void *)(v2 + 24) + 8 * v6);
      v5 += __clz(v8);
    }
    while (!v8);
    int v9 = v3 | 0xFFFFFFC0;
    if ((v3 & 0x3F) == 0) {
      int v9 = 0;
    }
    BOOL v4 = v5 + v9 == v3;
  }
  else
  {
    BOOL v4 = *(void *)(v2 + 24) == 0;
  }
  int v10 = v4;
  return v10 ^ 1u;
}

char **sub_1CCFE3810(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    do
    {
      if (*(_DWORD *)&v2[v4 - 8] >= 0x41u)
      {
        uint64_t v6 = *(void *)&v2[v4 - 16];
        if (v6)
        {
          uint64_t v7 = v4;
          unint64_t v8 = v2;
          MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
          uint64_t v4 = v7;
          uint64_t v2 = v8;
        }
      }
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CCFE38AC()
{
}

__n128 sub_1CCFE38C0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2642200;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCFE390C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2642200;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CCFE393C(uint64_t a1, uint64_t a2, BOOL a3)
{
  if (!*(void *)a2) {
    return 1;
  }
  uint64_t v4 = *(void *)(*(void *)a2 + 80);
  int v5 = (void *)(v4 + 24);
  uint64_t v6 = sub_1CD7878C0((unsigned int *)(a1 + 8), a2, a3);
  uint64_t v7 = *(unsigned int *)(v4 + 32);
  if (v7 >= 0x41)
  {
    int v8 = 0;
    int64_t v9 = (unint64_t)(v7 + 63) >> 6;
    do
    {
      if (v9-- < 1) {
        break;
      }
      unint64_t v11 = *(void *)(*v5 + 8 * v9);
      v8 += __clz(v11);
    }
    while (!v11);
    int v12 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0) {
      int v12 = 0;
    }
    if ((v7 - v8 - v12) > 0x40) {
      return 1;
    }
    int v5 = (void *)*v5;
  }
  return *v5 >= (unint64_t)v6;
}

uint64_t sub_1CCFE39E8(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

void sub_1CCFE3A04()
{
}

void **sub_1CCFE3B64(void **result)
{
  if (result)
  {
    int v1 = result;
    uint64_t v2 = *result;
    if (v2)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t sub_1CCFE3BC0()
{
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  v4.n128_u64[0] = (unint64_t)"Gang up loads and stores generated by inlining of memcpy";
  v4.n128_u64[1] = 56;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCFA208, "enable-memcpy-dag-opt", &v3, (unsigned char **)&v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFA208, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Number limit for gluing ld/st of memcpy.";
  v4.n128_u64[1] = 40;
  int v3 = 1;
  int v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD542604((llvm::cl::Option *)&unk_1EBCFA2C8, "ldstmemcpy-glue-max", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCFA2C8, &dword_1CB82C000);
}

uint64_t sub_1CCFE3CB0(uint64_t *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (*a1) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return 0;
  }
  if (!*((unsigned char *)a1 + 40) || *((unsigned char *)a2 + 40) == 0) {
    return 0;
  }
  uint64_t v8 = a2[4] - a1[4];
  *a4 = v8;
  if (a2[2] != a1[2]
    || *((_DWORD *)a2 + 6) != *((_DWORD *)a1 + 6)
    || *((unsigned __int8 *)a2 + 48) != *((unsigned __int8 *)a1 + 48))
  {
    return 0;
  }
  if (v5 == v4 && *((_DWORD *)a2 + 2) == *((_DWORD *)a1 + 2)) {
    return 1;
  }
  unsigned int v9 = *(unsigned __int16 *)(v4 + 24);
  BOOL v10 = v9 > 0x26;
  uint64_t v11 = (1 << v9) & 0x6000006000;
  if (v10 || v11 == 0)
  {
    uint64_t v13 = *a1;
  }
  else
  {
    uint64_t v13 = *a1;
    if (*a1)
    {
      unsigned int v14 = *(unsigned __int16 *)(v5 + 24);
      if (v14 <= 0x26 && ((1 << v14) & 0x6000006000) != 0)
      {
        uint64_t v15 = *a2;
        if (*a2)
        {
          if (*(void *)(v13 + 80) == *(void *)(v15 + 80))
          {
            uint64_t v16 = *(void *)(v15 + 88);
            uint64_t v17 = *(void *)(v13 + 88);
LABEL_43:
            uint64_t v27 = v16 + v8 - v17;
            goto LABEL_44;
          }
        }
      }
    }
  }
  int v18 = *(unsigned __int16 *)(v13 + 24);
  if (v18 == 41 || v18 == 17)
  {
    int v19 = *(unsigned __int16 *)(v5 + 24);
    if (v19 == 41 || v19 == 17)
    {
      int v20 = *(_DWORD *)(v13 + 88);
      int v21 = *(_DWORD *)(v5 + 88);
      if (((v21 ^ v20) & 0x80000000) == 0 && *(void *)(v13 + 80) == *(void *)(v5 + 80))
      {
        uint64_t v27 = v8 + (v21 & 0x7FFFFFFF) - (v20 & 0x7FFFFFFF);
LABEL_44:
        *a4 = v27;
        return 1;
      }
    }
  }
  uint64_t v22 = *(void *)(*(void *)(a3 + 40) + 56);
  if (v18 != 39 && v18 != 15) {
    return 0;
  }
  int v23 = *(unsigned __int16 *)(v5 + 24);
  if (v23 != 39 && v23 != 15) {
    return 0;
  }
  int v24 = *(_DWORD *)(v13 + 76);
  int v25 = *(_DWORD *)(v5 + 76);
  if (v24 == v25) {
    return 1;
  }
  if ((v24 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t result = 0;
  int v28 = *(_DWORD *)(v22 + 32);
  if (v25 >= -v28 && v25 < 0 && v24 >= -v28)
  {
    uint64_t v29 = *(void *)(v22 + 8);
    uint64_t v16 = *(void *)(v29 + 40 * (v28 + v25));
    uint64_t v17 = *(void *)(v29 + 40 * (v28 + v24));
    goto LABEL_43;
  }
  return result;
}

uint64_t sub_1CCFE3E9C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  int v5 = *(unsigned __int16 *)(result + 24);
  if (!result || (v5 - 255) < 0xFFFFFFFE)
  {
    if (!result || (v5 & 0xFFFE) != 0x138)
    {
      *(void *)(a3 + 48) = 0;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      return result;
    }
    uint64_t v6 = *(void *)(result + 88);
    *(_OWORD *)a3 = *(_OWORD *)(*(void *)(result + 32) + 40);
    uint64_t v7 = (void *)(a3 + 16);
    if (v6 < 0)
    {
      *(unsigned char *)(a3 + 40) = 0;
      *(unsigned char *)(a3 + 48) = 0;
      void *v7 = 0;
      *(void *)(a3 + 24) = 0;
      *(unsigned char *)(a3 + 32) = 0;
      return result;
    }
    void *v7 = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = v6;
LABEL_7:
    *(unsigned char *)(a3 + 40) = 1;
    *(unsigned char *)(a3 + 48) = 0;
    return result;
  }
  unsigned int v9 = (void *)sub_1CD3E3954(result);
  uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a2 + 24) + 1712))(*(void *)(a2 + 24), *v9, v9[1]);
  uint64_t v10 = result;
  unint64_t v12 = v11;
  int v13 = (*(unsigned __int16 *)(v3 + 26) >> 7) & 7;
  if (v13 != 2)
  {
    if (v13 != 1)
    {
      uint64_t v20 = 0;
      goto LABEL_35;
    }
    uint64_t v14 = 120;
    if (*(_WORD *)(v3 + 24) == 253) {
      uint64_t v14 = 80;
    }
    uint64_t v15 = *(void *)(*(void *)(v3 + 32) + v14);
    int v16 = *(unsigned __int16 *)(v15 + 24);
    if (v16 == 35 || v16 == 11)
    {
      uint64_t v18 = *(void *)(v15 + 80);
      unsigned int v19 = *(_DWORD *)(v18 + 32);
      if (v19 > 0x40) {
        uint64_t v20 = **(void **)(v18 + 24);
      }
      else {
        uint64_t v20 = (uint64_t)(*(void *)(v18 + 24) << -(char)v19) >> -(char)v19;
      }
      goto LABEL_35;
    }
    goto LABEL_31;
  }
  uint64_t v21 = 120;
  if (*(_WORD *)(v3 + 24) == 253) {
    uint64_t v21 = 80;
  }
  uint64_t v22 = *(void *)(*(void *)(v3 + 32) + v21);
  int v23 = *(unsigned __int16 *)(v22 + 24);
  if (v23 != 35 && v23 != 11)
  {
LABEL_31:
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    goto LABEL_7;
  }
  uint64_t v25 = *(void *)(v22 + 80);
  unsigned int v26 = *(_DWORD *)(v25 + 32);
  if (v26 > 0x40) {
    uint64_t v27 = **(void **)(v25 + 24);
  }
  else {
    uint64_t v27 = (uint64_t)(*(void *)(v25 + 24) << -(char)v26) >> -(char)v26;
  }
  uint64_t v20 = -v27;
LABEL_35:
  while (1)
  {
    int v28 = *(unsigned __int16 *)(v10 + 24);
    if ((v28 - 253) >= 2) {
      break;
    }
    unsigned int v36 = *(unsigned __int16 *)(v10 + 26);
    if ((v36 & 0x380) == 0 || v12 != (v28 == 253)) {
      goto LABEL_82;
    }
    uint64_t v37 = v28 == 253 ? 80 : 120;
    uint64_t v38 = *(void *)(*(void *)(v10 + 32) + v37);
    int v39 = *(unsigned __int16 *)(v38 + 24);
    if (v39 != 35 && v39 != 11) {
      goto LABEL_82;
    }
    uint64_t v41 = *(void *)(v38 + 80);
    unsigned int v42 = *(_DWORD *)(v41 + 32);
    if (v42 > 0x40) {
      uint64_t v43 = **(void **)(v41 + 24);
    }
    else {
      uint64_t v43 = (uint64_t)(*(void *)(v41 + 24) << -(char)v42) >> -(char)v42;
    }
    int v51 = (v36 >> 7) & 7;
    if (v51 == 4 || v51 == 2) {
      v20 -= v43;
    }
    else {
      v20 += v43;
    }
    uint64_t v52 = *(void *)(a2 + 24);
    uint64_t v53 = (void *)sub_1CD3E3954(v10);
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v52 + 1712))(v52, *v53, v53[1]);
LABEL_76:
    uint64_t v10 = result;
    unint64_t v12 = v12 & 0xFFFFFFFF00000000 | v54;
  }
  if (v28 == 56)
  {
    uint64_t v44 = *(uint64_t **)(v10 + 32);
    uint64_t v45 = v44[5];
    int v46 = *(unsigned __int16 *)(v45 + 24);
    if (v46 != 35 && v46 != 11) {
      goto LABEL_80;
    }
    uint64_t v48 = *(void *)(v45 + 80);
    unsigned int v49 = *(_DWORD *)(v48 + 32);
    if (v49 > 0x40) {
      uint64_t v50 = **(void **)(v48 + 24);
    }
    else {
      uint64_t v50 = (uint64_t)(*(void *)(v48 + 24) << -(char)v49) >> -(char)v49;
    }
    v20 += v50;
    uint64_t v55 = *(void *)(a2 + 24);
    goto LABEL_75;
  }
  if (v28 != 172) {
    goto LABEL_78;
  }
  uint64_t v29 = *(uint64_t **)(v10 + 32);
  uint64_t v30 = v29[5];
  int v31 = *(unsigned __int16 *)(v30 + 24);
  if (v31 != 35 && v31 != 11) {
    goto LABEL_82;
  }
  uint64_t result = sub_1CD7F11AC(a2, *v29, v29[1], *(void *)(v30 + 80) + 24, 0);
  if (result)
  {
    uint64_t v33 = *(void *)(v30 + 80);
    unsigned int v34 = *(_DWORD *)(v33 + 32);
    if (v34 > 0x40) {
      uint64_t v35 = **(void **)(v33 + 24);
    }
    else {
      uint64_t v35 = (uint64_t)(*(void *)(v33 + 24) << -(char)v34) >> -(char)v34;
    }
    v20 += v35;
    uint64_t v55 = *(void *)(a2 + 24);
    uint64_t v44 = *(uint64_t **)(v10 + 32);
LABEL_75:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v55 + 1712))(v55, *v44, v44[1]);
    goto LABEL_76;
  }
  int v28 = *(unsigned __int16 *)(v10 + 24);
LABEL_78:
  if (v28 != 56)
  {
LABEL_82:
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    BOOL v58 = 0;
LABEL_83:
    *(void *)a3 = v10;
    *(void *)(a3 + 8) = v12;
    *(void *)(a3 + 16) = v56;
    *(void *)(a3 + 24) = v57;
    *(void *)(a3 + 32) = v20;
    *(unsigned char *)(a3 + 40) = 1;
    *(unsigned char *)(a3 + 48) = v58;
    return result;
  }
  uint64_t v44 = *(uint64_t **)(v10 + 32);
  uint64_t v45 = v44[5];
  int v46 = *(unsigned __int16 *)(v45 + 24);
LABEL_80:
  if (v46 == 58)
  {
    *(void *)a3 = v10;
    *(void *)(a3 + 8) = v12;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = v20;
    goto LABEL_7;
  }
  if (v46 == 198)
  {
    int v59 = *(void **)(v45 + 32);
    uint64_t v61 = *v59;
    uint64_t v60 = (unsigned int *)(v59 + 1);
    uint64_t v45 = v61;
    int v62 = *(unsigned __int16 *)(v61 + 24);
  }
  else
  {
    uint64_t v60 = (unsigned int *)(v44 + 6);
    int v62 = v46;
  }
  uint64_t v10 = *v44;
  uint64_t v63 = v44[1];
  uint64_t v64 = *v60;
  if (v62 == 56)
  {
    uint64_t v65 = *(unsigned int **)(v45 + 32);
    uint64_t v66 = *((void *)v65 + 5);
    int v67 = *(unsigned __int16 *)(v66 + 24);
    if (v67 == 35 || v67 == 11)
    {
      uint64_t v69 = *(void *)(v66 + 80);
      unsigned int v70 = *(_DWORD *)(v69 + 32);
      if (v70 > 0x40) {
        uint64_t v71 = **(void **)(v69 + 24);
      }
      else {
        uint64_t v71 = (uint64_t)(*(void *)(v69 + 24) << -(char)v70) >> -(char)v70;
      }
      v20 += v71;
      uint64_t v56 = *(void *)v65;
      BOOL v58 = *(unsigned __int16 *)(*(void *)v65 + 24) == 198;
      if (*(_WORD *)(*(void *)v65 + 24) == 198)
      {
        uint64_t v65 = *(unsigned int **)(v56 + 32);
        uint64_t v56 = *(void *)v65;
      }
      uint64_t v57 = v65[2];
      unint64_t v12 = v12 & 0xFFFFFFFF00000000 | v63;
      goto LABEL_83;
    }
  }
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v63;
  *(void *)(a3 + 16) = v45;
  *(void *)(a3 + 24) = v64;
  *(void *)(a3 + 32) = v20;
  *(unsigned char *)(a3 + 40) = 1;
  *(unsigned char *)(a3 + 48) = v46 == 198;
  return result;
}

void sub_1CCFE437C(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  int v5 = (char *)a3;
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(unsigned __int16 *)(a1 + 24);
  switch(*(_WORD *)(a1 + 24))
  {
    case 1:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28261;
      uint64_t v15 = "EntryToken";
      goto LABEL_431;
    case 2:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1919906915;
      int v24 = "TokenFactor";
      goto LABEL_426;
    case 3:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29816;
      uint64_t v15 = "AssertSext";
      goto LABEL_431;
    case 4:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29816;
      uint64_t v15 = "AssertZext";
      goto LABEL_431;
    case 5:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1852270956;
      int v24 = "AssertAlign";
      goto LABEL_426;
    case 6:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 27491;
      uint64_t v15 = "BasicBlock";
      goto LABEL_431;
    case 7:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 101;
      int v16 = "ValueType";
      goto LABEL_450;
    case 8:
      switch(*(_DWORD *)(a1 + 76))
      {
        case 1:
          *((unsigned char *)a3 + 23) = 6;
          int v98 = 1869899123;
          goto LABEL_509;
        case 2:
          *((unsigned char *)a3 + 23) = 6;
          int v99 = 1869899123;
          goto LABEL_511;
        case 3:
          *((unsigned char *)a3 + 23) = 6;
          int v100 = 1869899123;
          goto LABEL_513;
        case 4:
          *((unsigned char *)a3 + 23) = 6;
          int v101 = 1869899123;
          goto LABEL_515;
        case 5:
          *((unsigned char *)a3 + 23) = 6;
          int v73 = 1869899123;
          goto LABEL_370;
        case 6:
          *((unsigned char *)a3 + 23) = 6;
          int v102 = 1869899123;
          goto LABEL_518;
        case 7:
          *((unsigned char *)a3 + 23) = 4;
          int v26 = 1869899123;
          goto LABEL_334;
        case 8:
          *((unsigned char *)a3 + 23) = 5;
          int v53 = 1970562419;
          goto LABEL_160;
        case 9:
          *((unsigned char *)a3 + 23) = 6;
          int v98 = 1970562419;
LABEL_509:
          *(_DWORD *)int v5 = v98;
          __int16 v45 = 29029;
          break;
        case 0xA:
          *((unsigned char *)a3 + 23) = 6;
          int v99 = 1970562419;
LABEL_511:
          *(_DWORD *)int v5 = v99;
          __int16 v45 = 29799;
          break;
        case 0xB:
          *((unsigned char *)a3 + 23) = 6;
          int v100 = 1970562419;
LABEL_513:
          *(_DWORD *)int v5 = v100;
          __int16 v45 = 25959;
          break;
        case 0xC:
          *((unsigned char *)a3 + 23) = 6;
          int v101 = 1970562419;
LABEL_515:
          *(_DWORD *)int v5 = v101;
          __int16 v45 = 29804;
          break;
        case 0xD:
          *((unsigned char *)a3 + 23) = 6;
          int v73 = 1970562419;
          goto LABEL_370;
        case 0xE:
          *((unsigned char *)a3 + 23) = 6;
          int v102 = 1970562419;
LABEL_518:
          *(_DWORD *)int v5 = v102;
          __int16 v45 = 25966;
          break;
        case 0xF:
          *((unsigned char *)a3 + 23) = 7;
          *a3 = 1953785203;
          int v55 = 1702195828;
          goto LABEL_433;
        case 0x10:
          *((unsigned char *)a3 + 23) = 9;
          *((_WORD *)a3 + 4) = 50;
          int v16 = "setfalse2";
          goto LABEL_450;
        case 0x11:
          *((unsigned char *)a3 + 23) = 5;
          *a3 = 1702126963;
          __int16 v25 = 113;
          goto LABEL_395;
        case 0x12:
          *((unsigned char *)a3 + 23) = 5;
          int v63 = 1735681395;
          goto LABEL_305;
        case 0x13:
          *((unsigned char *)a3 + 23) = 5;
          int v71 = 1735681395;
          goto LABEL_302;
        case 0x14:
          *((unsigned char *)a3 + 23) = 5;
          int v63 = 1819567475;
          goto LABEL_305;
        case 0x15:
          *((unsigned char *)a3 + 23) = 5;
          int v71 = 1819567475;
          goto LABEL_302;
        case 0x16:
          *((unsigned char *)a3 + 23) = 5;
          int v71 = 1853121907;
          goto LABEL_302;
        case 0x17:
          *((unsigned char *)a3 + 23) = 8;
          uint64_t v18 = 0x3265757274746573;
          goto LABEL_452;
        default:
          *((unsigned char *)a3 + 23) = 8;
          uint64_t v18 = 0x65736C6166746573;
          goto LABEL_452;
      }
      goto LABEL_413;
    case 9:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v17 = 0x747369676552;
      goto LABEL_326;
    case 0xA:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1802723661;
      unsigned int v34 = "RegisterMask";
      goto LABEL_440;
    case 0xB:
      if ((*(unsigned char *)(a1 + 26) & 8) != 0)
      {
        unint64_t v12 = "OpaqueConstant";
        goto LABEL_461;
      }
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x746E6174736E6F43;
LABEL_452:
      *(void *)int v5 = v18;
      v5[8] = 0;
      return;
    case 0xC:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 20550;
      uint64_t v15 = "ConstantFP";
      goto LABEL_431;
    case 0xD:
      unsigned int v19 = "GlobalAddress";
      goto LABEL_442;
    case 0xE:
      *((unsigned char *)a3 + 23) = 16;
      uint64_t v20 = "GlobalTLSAddress";
      goto LABEL_328;
    case 0xF:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 30821;
      uint64_t v15 = "FrameIndex";
      goto LABEL_431;
    case 0x10:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 101;
      int v16 = "JumpTable";
      goto LABEL_450;
    case 0x11:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1819242320;
      unsigned int v34 = "ConstantPool";
      goto LABEL_440;
    case 0x12:
      unint64_t v12 = "ExternalSymbol";
      goto LABEL_461;
    case 0x13:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1936942450;
      unsigned int v34 = "BlockAddress";
      goto LABEL_440;
    case 0x14:
      *((unsigned char *)a3 + 23) = 20;
      a3[4] = 1936942450;
      uint64_t v43 = "PtrAuthGlobalAddress";
      goto LABEL_464;
    case 0x15:
      *((unsigned char *)a3 + 23) = 19;
      *(_DWORD *)((char *)a3 + 15) = 1162625601;
      uint64_t v22 = "GLOBAL_OFFSET_TABLE";
      goto LABEL_364;
    case 0x16:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 82;
      int v16 = "FRAMEADDR";
      goto LABEL_450;
    case 0x17:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 21060;
      uint64_t v15 = "RETURNADDR";
      goto LABEL_431;
    case 0x18:
      *((unsigned char *)a3 + 23) = 16;
      uint64_t v20 = "ADDROFRETURNADDR";
      goto LABEL_328;
    case 0x19:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 89;
      int v16 = "SPONENTRY";
      goto LABEL_450;
    case 0x1A:
      unsigned int v19 = "LOCAL_RECOVER";
      goto LABEL_442;
    case 0x1B:
      unsigned int v19 = "READ_REGISTER";
      goto LABEL_442;
    case 0x1C:
      unint64_t v12 = "WRITE_REGISTER";
      goto LABEL_461;
    case 0x1D:
      *((unsigned char *)a3 + 23) = 20;
      a3[4] = 1413829446;
      uint64_t v43 = "FRAME_TO_ARGS_OFFSET";
      goto LABEL_464;
    case 0x1E:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1095123807;
      unsigned int v34 = "EH_DWARF_CFA";
      goto LABEL_440;
    case 0x1F:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 78;
      int v16 = "EH_RETURN";
      goto LABEL_450;
    case 0x20:
      unint64_t v12 = "EH_SJLJ_SETJMP";
      goto LABEL_461;
    case 0x21:
      uint64_t v21 = "EH_SJLJ_LONGJMP";
      goto LABEL_331;
    case 0x22:
      uint64_t v44 = "EH_SJLJ_SETUP_DISPATCH";
      goto LABEL_454;
    case 0x23:
      if ((*(unsigned char *)(a1 + 26) & 8) != 0)
      {
        *((unsigned char *)a3 + 23) = 20;
        a3[4] = 1953390964;
        uint64_t v43 = "OpaqueTargetConstant";
        goto LABEL_464;
      }
      unint64_t v12 = "TargetConstant";
LABEL_461:
      *((unsigned char *)a3 + 23) = 14;
      *(void *)a3 = *(void *)v12;
      *(void *)((char *)a3 + 6) = *(void *)(v12 + 6);
      *((unsigned char *)a3 + 14) = 0;
      return;
    case 0x24:
      *((unsigned char *)a3 + 23) = 16;
      uint64_t v20 = "TargetConstantFP";
      goto LABEL_328;
    case 0x25:
      *((unsigned char *)a3 + 23) = 19;
      *(_DWORD *)((char *)a3 + 15) = 1936942450;
      uint64_t v22 = "TargetGlobalAddress";
      goto LABEL_364;
    case 0x26:
      uint64_t v44 = "TargetGlobalTLSAddress";
      goto LABEL_454;
    case 0x27:
      *((unsigned char *)a3 + 23) = 16;
      uint64_t v20 = "TargetFrameIndex";
      goto LABEL_328;
    case 0x28:
      uint64_t v21 = "TargetJumpTable";
      goto LABEL_331;
    case 0x29:
      *((unsigned char *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 27759;
      int v23 = "TargetConstantPool";
      goto LABEL_373;
    case 0x2A:
      *((unsigned char *)a3 + 23) = 20;
      a3[4] = 1819239021;
      uint64_t v43 = "TargetExternalSymbol";
      goto LABEL_464;
    case 0x2B:
      *((unsigned char *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 29555;
      int v23 = "TargetBlockAddress";
      goto LABEL_373;
    case 0x2C:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x6C6F626D7953434DLL;
      goto LABEL_452;
    case 0x2D:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 2019910766;
      int v24 = "TargetIndex";
      goto LABEL_426;
    case 0x2E:
    case 0x2F:
    case 0x30:
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 40 * (v6 != 46)) + 80);
      uint64_t v8 = (void *)(v7 + 24);
      if (*(_DWORD *)(v7 + 32) >= 0x41u) {
        uint64_t v8 = (void *)*v8;
      }
      if (*v8 <= 0x30EC)
      {
        unsigned int v9 = off_1E6830B58[*v8];
        if (!v9)
        {
          *(void *)int v5 = 0;
          *((void *)v5 + 1) = 0;
          *((void *)v5 + 2) = 0;
          return;
        }
        size_t v10 = strlen(v9);
        if (v10 <= 0x7FFFFFFFFFFFFFF7)
        {
          size_t v11 = v10;
          if (v10 >= 0x17)
          {
            uint64_t v83 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v10 | 7) != 0x17) {
              uint64_t v83 = v10 | 7;
            }
            uint64_t v84 = v83 + 1;
            uint64_t v85 = (char *)operator new(v83 + 1);
            *((void *)v5 + 1) = v11;
            *((void *)v5 + 2) = v84 | 0x8000000000000000;
            *(void *)int v5 = v85;
            int v5 = v85;
          }
          else
          {
            v5[23] = v10;
            if (!v10) {
              goto LABEL_477;
            }
          }
          memmove(v5, v9, v11);
LABEL_477:
          v5[v11] = 0;
          return;
        }
LABEL_535:
        abort();
      }
      if (a2)
      {
        uint64_t v13 = (*(uint64_t (**)(void))(**(void **)a2 + 56))();
        if (v13)
        {
          uint64_t v14 = *(void (**)(void))(*(void *)v13 + 16);
          v14();
        }
      }
      else
      {
        v5[23] = 17;
        *((_WORD *)v5 + 8) = 99;
        uint64_t v35 = "Unknown intrinsic";
LABEL_459:
        *(_OWORD *)int v5 = *(_OWORD *)v35;
      }
      return;
    case 0x31:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 103;
      int v16 = "CopyToReg";
      goto LABEL_450;
    case 0x32:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1734693485;
      int v24 = "CopyFromReg";
      goto LABEL_426;
    case 0x33:
      *((unsigned char *)a3 + 23) = 5;
      *a3 = 1701080693;
      __int16 v25 = 102;
      goto LABEL_395;
    case 0x34:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1701147238;
      __int16 v45 = 25978;
      goto LABEL_413;
    case 0x35:
      uint64_t v21 = "extract_element";
      goto LABEL_331;
    case 0x36:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29289;
      uint64_t v15 = "build_pair";
      goto LABEL_431;
    case 0x37:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1936029036;
      unsigned int v34 = "merge_values";
      goto LABEL_440;
    case 0x38:
      *((unsigned char *)a3 + 23) = 3;
      unsigned __int16 v46 = 25697;
      goto LABEL_227;
    case 0x39:
      *((unsigned char *)a3 + 23) = 3;
      int v47 = 6452595;
      goto LABEL_236;
    case 0x3A:
      *((unsigned char *)a3 + 23) = 3;
      unsigned __int16 v37 = 30061;
      goto LABEL_233;
    case 0x3B:
      *((unsigned char *)a3 + 23) = 4;
      int v48 = 1986618470;
      goto LABEL_140;
    case 0x3C:
      *((unsigned char *)a3 + 23) = 4;
      int v49 = 1986618470;
      goto LABEL_142;
    case 0x3D:
      *((unsigned char *)a3 + 23) = 4;
      int v48 = 1835364966;
LABEL_140:
      int v26 = v48 + 13;
      goto LABEL_334;
    case 0x3E:
      *((unsigned char *)a3 + 23) = 4;
      int v49 = 1835364966;
LABEL_142:
      int v26 = v49 + 15;
      goto LABEL_334;
    case 0x3F:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 105;
      int v16 = "smul_lohi";
      goto LABEL_450;
    case 0x40:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 105;
      int v16 = "umul_lohi";
      goto LABEL_450;
    case 0x41:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v50 = 25715;
      goto LABEL_147;
    case 0x42:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v50 = 25717;
LABEL_147:
      *(_DWORD *)int v5 = v50 | 0x76690000;
      unsigned __int16 v51 = 29302;
      goto LABEL_410;
    case 0x43:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1702063201;
      int v24 = "carry_false";
      goto LABEL_426;
    case 0x44:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1667523681;
      goto LABEL_334;
    case 0x45:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1667396979;
      goto LABEL_334;
    case 0x46:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1701078113;
      goto LABEL_334;
    case 0x47:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1700951411;
      goto LABEL_334;
    case 0x48:
      *((unsigned char *)a3 + 23) = 8;
      unsigned int v52 = 1667523681;
      goto LABEL_153;
    case 0x49:
      *((unsigned char *)a3 + 23) = 8;
      unsigned int v52 = 1667396979;
LABEL_153:
      uint64_t v18 = v52 | 0x7972726100000000;
      goto LABEL_452;
    case 0x4A:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 2037543521;
      int v24 = "saddo_carry";
      goto LABEL_426;
    case 0x4B:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 2037543521;
      int v24 = "ssubo_carry";
      goto LABEL_426;
    case 0x4C:
      *((unsigned char *)a3 + 23) = 5;
      unsigned __int16 v27 = 24947;
      goto LABEL_155;
    case 0x4D:
      *((unsigned char *)a3 + 23) = 5;
      unsigned __int16 v27 = 24949;
LABEL_155:
      int v53 = v27 | 0x64640000;
      goto LABEL_160;
    case 0x4E:
      *((unsigned char *)a3 + 23) = 5;
      unsigned __int16 v28 = 29555;
      goto LABEL_157;
    case 0x4F:
      *((unsigned char *)a3 + 23) = 5;
      unsigned __int16 v28 = 29557;
LABEL_157:
      int v53 = v28 | 0x62750000;
      goto LABEL_160;
    case 0x50:
      *((unsigned char *)a3 + 23) = 5;
      unsigned __int16 v29 = 28019;
      goto LABEL_159;
    case 0x51:
      *((unsigned char *)a3 + 23) = 5;
      unsigned __int16 v29 = 28021;
LABEL_159:
      int v53 = v29 | 0x6C750000;
LABEL_160:
      *(_DWORD *)int v5 = v53;
      __int16 v25 = 111;
      goto LABEL_395;
    case 0x52:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v54 = 24947;
      goto LABEL_163;
    case 0x53:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v54 = 24949;
LABEL_163:
      *(_DWORD *)int v5 = v54 | 0x64640000;
      unsigned __int16 v31 = 29540;
      goto LABEL_166;
    case 0x54:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v30 = 29555;
      goto LABEL_46;
    case 0x55:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v30 = 29557;
LABEL_46:
      *(_DWORD *)int v5 = v30 | 0x62750000;
      unsigned __int16 v31 = 29538;
      goto LABEL_166;
    case 0x56:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v32 = 29555;
      goto LABEL_165;
    case 0x57:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v32 = 29557;
LABEL_165:
      *(_DWORD *)int v5 = v32 | 0x6C680000;
      unsigned __int16 v31 = 29548;
LABEL_166:
      int v55 = v31 | 0x74610000;
      goto LABEL_433;
    case 0x58:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v56 = 28019;
      goto LABEL_169;
    case 0x59:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v56 = 28021;
LABEL_169:
      *(_DWORD *)int v5 = v56 | 0x6C750000;
      unsigned __int16 v57 = 26220;
      goto LABEL_174;
    case 0x5A:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29793;
      uint64_t v15 = "smulfixsat";
      goto LABEL_431;
    case 0x5B:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29793;
      uint64_t v15 = "umulfixsat";
      goto LABEL_431;
    case 0x5C:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v33 = 25715;
      goto LABEL_173;
    case 0x5D:
      *((unsigned char *)a3 + 23) = 7;
      unsigned __int16 v33 = 25717;
LABEL_173:
      *(_DWORD *)int v5 = v33 | 0x76690000;
      unsigned __int16 v57 = 26230;
LABEL_174:
      int v55 = v57 | 0x78690000;
      goto LABEL_433;
    case 0x5E:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29793;
      uint64_t v15 = "sdivfixsat";
      goto LABEL_431;
    case 0x5F:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29793;
      uint64_t v15 = "udivfixsat";
      goto LABEL_431;
    case 0x60:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1684300134;
      goto LABEL_334;
    case 0x61:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1651864422;
      goto LABEL_334;
    case 0x62:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1819635046;
      goto LABEL_334;
    case 0x63:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1986618470;
      goto LABEL_334;
    case 0x64:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1835364966;
      goto LABEL_334;
    case 0x65:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1684300134;
      int v24 = "strict_fadd";
      goto LABEL_426;
    case 0x66:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1651864422;
      int v24 = "strict_fsub";
      goto LABEL_426;
    case 0x67:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1819635046;
      int v24 = "strict_fmul";
      goto LABEL_426;
    case 0x68:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1986618470;
      int v24 = "strict_fdiv";
      goto LABEL_426;
    case 0x69:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1835364966;
      int v24 = "strict_frem";
      goto LABEL_426;
    case 0x6A:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 24941;
      uint64_t v15 = "strict_fma";
      goto LABEL_431;
    case 0x6B:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1953657203;
      unsigned int v34 = "strict_fsqrt";
      goto LABEL_440;
    case 0x6C:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 2003791974;
      int v24 = "strict_fpow";
      goto LABEL_426;
    case 0x6D:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1769434992;
      unsigned int v34 = "strict_fpowi";
      goto LABEL_440;
    case 0x6E:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1852404582;
      int v24 = "strict_fsin";
      goto LABEL_426;
    case 0x6F:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1936679782;
      int v24 = "strict_fcos";
      goto LABEL_426;
    case 0x70:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1886938470;
      int v24 = "strict_fexp";
      goto LABEL_426;
    case 0x71:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 846231653;
      unsigned int v34 = "strict_fexp2";
      goto LABEL_440;
    case 0x72:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1735355494;
      int v24 = "strict_flog";
      goto LABEL_426;
    case 0x73:
      unsigned int v19 = "strict_flog10";
      goto LABEL_442;
    case 0x74:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 845639532;
      unsigned int v34 = "strict_flog2";
      goto LABEL_440;
    case 0x75:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1953393010;
      unsigned int v34 = "strict_frint";
      goto LABEL_440;
    case 0x76:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 116;
      uint64_t v35 = "strict_fnearbyint";
      goto LABEL_459;
    case 0x77:
      unint64_t v12 = "strict_fmaxnum";
      goto LABEL_461;
    case 0x78:
      unint64_t v12 = "strict_fminnum";
      goto LABEL_461;
    case 0x79:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1818846563;
      unsigned int v34 = "strict_fceil";
      goto LABEL_440;
    case 0x7A:
      unsigned int v19 = "strict_ffloor";
      goto LABEL_442;
    case 0x7B:
      unsigned int v19 = "strict_fround";
      goto LABEL_442;
    case 0x7C:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 110;
      uint64_t v35 = "strict_froundeven";
      goto LABEL_459;
    case 0x7D:
      unsigned int v19 = "strict_ftrunc";
      goto LABEL_442;
    case 0x7E:
      unsigned int v19 = "strict_lround";
      goto LABEL_442;
    case 0x7F:
      unint64_t v12 = "strict_llround";
      goto LABEL_461;
    case 0x80:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1953393010;
      unsigned int v34 = "strict_lrint";
      goto LABEL_440;
    case 0x81:
      unsigned int v19 = "strict_llrint";
      goto LABEL_442;
    case 0x82:
      uint64_t v21 = "strict_fmaximum";
      goto LABEL_331;
    case 0x83:
      uint64_t v21 = "strict_fminimum";
      goto LABEL_331;
    case 0x84:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 116;
      uint64_t v35 = "strict_fp_to_sint";
      goto LABEL_459;
    case 0x85:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 116;
      uint64_t v35 = "strict_fp_to_uint";
      goto LABEL_459;
    case 0x86:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 112;
      uint64_t v35 = "strict_sint_to_fp";
      goto LABEL_459;
    case 0x87:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 112;
      uint64_t v35 = "strict_uint_to_fp";
      goto LABEL_459;
    case 0x88:
      uint64_t v21 = "strict_fp_round";
      goto LABEL_331;
    case 0x89:
      *((unsigned char *)a3 + 23) = 16;
      uint64_t v20 = "strict_fp_extend";
      goto LABEL_328;
    case 0x8A:
      unsigned int v19 = "strict_fsetcc";
      goto LABEL_442;
    case 0x8B:
      unint64_t v12 = "strict_fsetccs";
      goto LABEL_461;
    case 0x8D:
      *((unsigned char *)a3 + 23) = 3;
      unsigned __int16 v36 = 28006;
      goto LABEL_235;
    case 0x8E:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1684106598;
      goto LABEL_334;
    case 0x8F:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 110;
      int v16 = "fcopysign";
      goto LABEL_450;
    case 0x90:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x6E67697374656766;
      goto LABEL_452;
    case 0x91:
      unsigned int v19 = "fcanonicalize";
      goto LABEL_442;
    case 0x92:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1380930627;
      unsigned int v34 = "BUILD_VECTOR";
      goto LABEL_440;
    case 0x93:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 116;
      uint64_t v35 = "insert_vector_elt";
      goto LABEL_459;
    case 0x94:
      *((unsigned char *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 29804;
      int v23 = "extract_vector_elt";
      goto LABEL_373;
    case 0x95:
      unint64_t v12 = "concat_vectors";
      goto LABEL_461;
    case 0x96:
      *((unsigned char *)a3 + 23) = 16;
      uint64_t v20 = "insert_subvector";
      goto LABEL_328;
    case 0x97:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 114;
      uint64_t v35 = "extract_subvector";
      goto LABEL_459;
    case 0x98:
      unint64_t v12 = "vector_reverse";
      goto LABEL_461;
    case 0x99:
      unint64_t v12 = "vector_shuffle";
      goto LABEL_461;
    case 0x9A:
      unsigned int v19 = "vector_splice";
      goto LABEL_442;
    case 0x9B:
      *((unsigned char *)a3 + 23) = 16;
      uint64_t v20 = "scalar_to_vector";
      goto LABEL_328;
    case 0x9C:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1919906915;
      unsigned int v34 = "splat_vector";
      goto LABEL_440;
    case 0x9D:
      *((unsigned char *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 29556;
      int v23 = "splat_vector_parts";
      goto LABEL_373;
    case 0x9E:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1919906915;
      int v24 = "step_vector";
      goto LABEL_426;
    case 0x9F:
      *((unsigned char *)a3 + 23) = 5;
      *a3 = 1751938413;
      __int16 v25 = 117;
      goto LABEL_395;
    case 0xA0:
      *((unsigned char *)a3 + 23) = 5;
      *a3 = 1751938413;
      __int16 v25 = 115;
      goto LABEL_395;
    case 0xA1:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 115;
      int v16 = "avgfloors";
      goto LABEL_450;
    case 0xA2:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 117;
      int v16 = "avgflooru";
      goto LABEL_450;
    case 0xA3:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x736C696563677661;
      goto LABEL_452;
    case 0xA4:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x756C696563677661;
      goto LABEL_452;
    case 0xA5:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1935958625;
      goto LABEL_334;
    case 0xA6:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1969513057;
      goto LABEL_334;
    case 0xA7:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1852403059;
      goto LABEL_334;
    case 0xA8:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 2019650931;
      goto LABEL_334;
    case 0xA9:
      *((unsigned char *)a3 + 23) = 4;
      int v58 = 1852403059;
      goto LABEL_225;
    case 0xAA:
      *((unsigned char *)a3 + 23) = 4;
      int v58 = 2019650931;
LABEL_225:
      int v26 = v58 + 2;
      goto LABEL_334;
    case 0xAB:
      *((unsigned char *)a3 + 23) = 3;
      unsigned __int16 v46 = 28257;
LABEL_227:
      int v47 = v46 | 0x640000;
      goto LABEL_236;
    case 0xAC:
      *((unsigned char *)a3 + 23) = 2;
      __int16 v42 = 29295;
      goto LABEL_229;
    case 0xAD:
      *((unsigned char *)a3 + 23) = 3;
      int v47 = 7499640;
      goto LABEL_236;
    case 0xAE:
      *((unsigned char *)a3 + 23) = 3;
      int v47 = 7561825;
      goto LABEL_236;
    case 0xAF:
      *((unsigned char *)a3 + 23) = 3;
      unsigned __int16 v37 = 26739;
      goto LABEL_233;
    case 0xB0:
      *((unsigned char *)a3 + 23) = 3;
      unsigned __int16 v36 = 29299;
LABEL_235:
      int v47 = v36 | 0x610000;
      goto LABEL_236;
    case 0xB1:
      *((unsigned char *)a3 + 23) = 3;
      unsigned __int16 v37 = 29299;
LABEL_233:
      int v47 = v37 | 0x6C0000;
LABEL_236:
      *(_DWORD *)int v5 = v47;
      return;
    case 0xB2:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1819570034;
      goto LABEL_334;
    case 0xB3:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1920233330;
      goto LABEL_334;
    case 0xB4:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1818784614;
      goto LABEL_334;
    case 0xB5:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1919447910;
      goto LABEL_334;
    case 0xB6:
      *((unsigned char *)a3 + 23) = 5;
      int v59 = 1635218274;
      goto LABEL_242;
    case 0xB7:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 2054452323;
      goto LABEL_334;
    case 0xB8:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 2053928035;
      goto LABEL_334;
    case 0xB9:
      *((unsigned char *)a3 + 23) = 5;
      int v59 = 1869640803;
LABEL_242:
      *(_DWORD *)int v5 = v59;
      __int16 v25 = 112;
      goto LABEL_395;
    case 0xBA:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25971;
      uint64_t v15 = "bitreverse";
      goto LABEL_431;
    case 0xBB:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1769103728;
      __int16 v45 = 31092;
      goto LABEL_413;
    case 0xBC:
      uint64_t v21 = "cttz_zero_undef";
      goto LABEL_331;
    case 0xBD:
      uint64_t v21 = "ctlz_zero_undef";
      goto LABEL_331;
    case 0xBE:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1701602675;
      __int16 v45 = 29795;
      goto LABEL_413;
    case 0xBF:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1818588022;
      int v55 = 1952671084;
      goto LABEL_433;
    case 0xC0:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 99;
      int v16 = "select_cc";
      goto LABEL_450;
    case 0xC1:
      *((unsigned char *)a3 + 23) = 5;
      int v38 = 1668572531;
      goto LABEL_308;
    case 0xC2:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 31090;
      uint64_t v15 = "setcccarry";
      goto LABEL_431;
    case 0xC3:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 115;
      int v16 = "shl_parts";
      goto LABEL_450;
    case 0xC4:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 115;
      int v16 = "sra_parts";
      goto LABEL_450;
    case 0xC5:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 115;
      int v16 = "srl_parts";
      goto LABEL_450;
    case 0xC6:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1684956532;
      int v24 = "sign_extend";
      goto LABEL_426;
    case 0xC7:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1684956532;
      int v24 = "zero_extend";
      goto LABEL_426;
    case 0xC8:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25710;
      uint64_t v15 = "any_extend";
      goto LABEL_431;
    case 0xC9:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x657461636E757274;
      goto LABEL_452;
    case 0xCA:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28774;
      uint64_t v15 = "sint_to_fp";
      goto LABEL_431;
    case 0xCB:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28774;
      uint64_t v15 = "uint_to_fp";
      goto LABEL_431;
    case 0xCC:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 103;
      uint64_t v35 = "sign_extend_inreg";
      goto LABEL_459;
    case 0xCD:
      uint64_t v60 = (char *)operator new(0x19uLL);
      *(void *)int v5 = v60;
      long long v61 = xmmword_1CD91A420;
      int v62 = "any_extend_vector_inreg";
      goto LABEL_367;
    case 0xCE:
      int v39 = operator new(0x20uLL);
      *(void *)int v5 = v39;
      long long v40 = xmmword_1CD91A410;
      uint64_t v41 = "sign_extend_vector_inreg";
      goto LABEL_343;
    case 0xCF:
      int v39 = operator new(0x20uLL);
      *(void *)int v5 = v39;
      long long v40 = xmmword_1CD91A410;
      uint64_t v41 = "zero_extend_vector_inreg";
      goto LABEL_343;
    case 0xD0:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29806;
      uint64_t v15 = "fp_to_sint";
      goto LABEL_431;
    case 0xD1:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29806;
      uint64_t v15 = "fp_to_uint";
      goto LABEL_431;
    case 0xD2:
      unint64_t v12 = "fp_to_sint_sat";
      goto LABEL_461;
    case 0xD3:
      unint64_t v12 = "fp_to_uint_sat";
      goto LABEL_461;
    case 0xD4:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x646E756F725F7066;
      goto LABEL_452;
    case 0xD5:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29540;
      uint64_t v15 = "flt_rounds";
      goto LABEL_431;
    case 0xD6:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1735289188;
      unsigned int v34 = "set_rounding";
      goto LABEL_440;
    case 0xD7:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 100;
      int v16 = "fp_extend";
      goto LABEL_450;
    case 0xD8:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1668573538;
      int v55 = 1953718627;
      goto LABEL_433;
    case 0xD9:
      unsigned int v19 = "addrspacecast";
      goto LABEL_442;
    case 0xDA:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28774;
      uint64_t v15 = "fp16_to_fp";
      goto LABEL_431;
    case 0xDB:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 13873;
      uint64_t v15 = "fp_to_fp16";
      goto LABEL_431;
    case 0xDC:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 112;
      uint64_t v35 = "strict_fp16_to_fp";
      goto LABEL_459;
    case 0xDD:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 54;
      uint64_t v35 = "strict_fp_to_fp16";
      goto LABEL_459;
    case 0xDE:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1734700646;
      goto LABEL_334;
    case 0xDF:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1935827302;
      goto LABEL_334;
    case 0xE0:
      *((unsigned char *)a3 + 23) = 5;
      int v63 = 1920037734;
      goto LABEL_305;
    case 0xE1:
      *((unsigned char *)a3 + 23) = 5;
      int v63 = 1919050598;
      goto LABEL_305;
    case 0xE2:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1852404582;
      goto LABEL_334;
    case 0xE3:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1936679782;
      goto LABEL_334;
    case 0xE4:
      *((unsigned char *)a3 + 23) = 5;
      *a3 = 2003791974;
      __int16 v25 = 105;
      goto LABEL_395;
    case 0xE5:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 2003791974;
      goto LABEL_334;
    case 0xE6:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1735355494;
      goto LABEL_334;
    case 0xE7:
      *((unsigned char *)a3 + 23) = 5;
      int v64 = 1735355494;
      goto LABEL_280;
    case 0xE8:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1735355494;
      __int16 v45 = 12337;
      goto LABEL_413;
    case 0xE9:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1886938470;
      goto LABEL_334;
    case 0xEA:
      *((unsigned char *)a3 + 23) = 5;
      int v64 = 1886938470;
LABEL_280:
      *(_DWORD *)int v5 = v64;
      __int16 v25 = 50;
      goto LABEL_395;
    case 0xEB:
      *((unsigned char *)a3 + 23) = 5;
      *a3 = 1768252262;
      __int16 v25 = 108;
      goto LABEL_395;
    case 0xEC:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1970435174;
      __int16 v45 = 25454;
      goto LABEL_413;
    case 0xED:
      *((unsigned char *)a3 + 23) = 5;
      unsigned __int16 v65 = 29286;
      goto LABEL_290;
    case 0xEE:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29806;
      uint64_t v15 = "fnearbyint";
      goto LABEL_431;
    case 0xEF:
      *((unsigned char *)a3 + 23) = 6;
      unsigned __int16 v66 = 29286;
      goto LABEL_287;
    case 0xF0:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28261;
      uint64_t v15 = "froundeven";
      goto LABEL_431;
    case 0xF1:
      *((unsigned char *)a3 + 23) = 6;
      int v67 = 1869375078;
      goto LABEL_403;
    case 0xF2:
      *((unsigned char *)a3 + 23) = 6;
      unsigned __int16 v66 = 29292;
LABEL_287:
      int v68 = v66 | 0x756F0000;
      goto LABEL_389;
    case 0xF3:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1869769836;
      int v55 = 1684960623;
      goto LABEL_433;
    case 0xF4:
      *((unsigned char *)a3 + 23) = 5;
      unsigned __int16 v65 = 29292;
LABEL_290:
      int v63 = v65 | 0x6E690000;
      goto LABEL_305;
    case 0xF5:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1769106540;
      __int16 v45 = 29806;
      goto LABEL_413;
    case 0xF6:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1852403046;
      unsigned __int16 v69 = 28270;
      goto LABEL_294;
    case 0xF7:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 2019650918;
      unsigned __int16 v69 = 28280;
LABEL_294:
      int v55 = v69 | 0x6D750000;
      goto LABEL_433;
    case 0xF8:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1701143913;
      unsigned int v34 = "fminnum_ieee";
      goto LABEL_440;
    case 0xF9:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1701143913;
      unsigned int v34 = "fmaxnum_ieee";
      goto LABEL_440;
    case 0xFA:
      *((unsigned char *)a3 + 23) = 8;
      unsigned int v70 = 1852403046;
      goto LABEL_298;
    case 0xFB:
      *((unsigned char *)a3 + 23) = 8;
      unsigned int v70 = 2019650918;
LABEL_298:
      uint64_t v18 = v70 | 0x6D756D6900000000;
      goto LABEL_452;
    case 0xFC:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1852404582;
      int v55 = 1936679790;
      goto LABEL_433;
    case 0xFD:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1684107116;
      goto LABEL_334;
    case 0xFE:
      *((unsigned char *)a3 + 23) = 5;
      int v71 = 1919906931;
LABEL_302:
      *(_DWORD *)int v5 = v71;
      __int16 v25 = 101;
      goto LABEL_395;
    case 0xFF:
      *((unsigned char *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 25455;
      int v23 = "dynamic_stackalloc";
      goto LABEL_373;
    case 0x100:
      *((unsigned char *)a3 + 23) = 2;
      __int16 v42 = 29282;
LABEL_229:
      *(_WORD *)int v5 = v42;
      v5[2] = 0;
      return;
    case 0x101:
      *((unsigned char *)a3 + 23) = 5;
      int v72 = 1852404322;
      goto LABEL_320;
    case 0x102:
      *((unsigned char *)a3 + 23) = 5;
      int v63 = 1784640098;
LABEL_305:
      *(_DWORD *)int v5 = v63;
      __int16 v25 = 116;
      goto LABEL_395;
    case 0x103:
      *((unsigned char *)a3 + 23) = 6;
      int v68 = 1868788322;
      goto LABEL_389;
    case 0x104:
      *((unsigned char *)a3 + 23) = 5;
      int v38 = 1667199586;
LABEL_308:
      *(_DWORD *)int v5 = v38;
      __int16 v25 = 99;
      goto LABEL_395;
    case 0x105:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 109;
      int v16 = "inlineasm";
      goto LABEL_450;
    case 0x106:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1919049581;
      unsigned int v34 = "inlineasm_br";
      goto LABEL_440;
    case 0x107:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x6C6562616C5F6865;
      goto LABEL_452;
    case 0x108:
      *((unsigned char *)a3 + 23) = 16;
      uint64_t v20 = "annotation_label";
      goto LABEL_328;
    case 0x109:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x7465726863746163;
      goto LABEL_452;
    case 0x10A:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29797;
      uint64_t v15 = "cleanupret";
      goto LABEL_431;
    case 0x10B:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 101;
      int v16 = "stacksave";
      goto LABEL_450;
    case 0x10C:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1701998452;
      unsigned int v34 = "stackrestore";
      goto LABEL_440;
    case 0x10D:
      unsigned int v19 = "callseq_start";
      goto LABEL_442;
    case 0x10E:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1684956511;
      int v24 = "callseq_end";
      goto LABEL_426;
    case 0x10F:
      *((unsigned char *)a3 + 23) = 5;
      *a3 = 1918984566;
      __int16 v25 = 103;
      goto LABEL_395;
    case 0x110:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1868783990;
      __int16 v45 = 31088;
      goto LABEL_413;
    case 0x111:
      *((unsigned char *)a3 + 23) = 5;
      int v72 = 1852137846;
LABEL_320:
      *(_DWORD *)int v5 = v72;
      __int16 v25 = 100;
      goto LABEL_395;
    case 0x112:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1953718646;
      int v55 = 1953653108;
      goto LABEL_433;
    case 0x113:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28789;
      uint64_t v15 = "call_setup";
      goto LABEL_431;
    case 0x114:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25455;
      uint64_t v15 = "call_alloc";
      goto LABEL_431;
    case 0x115:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x65756C6156637253;
      goto LABEL_452;
    case 0x116:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1867400269;
      __int16 v45 = 25956;
      goto LABEL_413;
    case 0x117:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v17 = 0x6B72614D4350;
LABEL_326:
      uint64_t v18 = v17 & 0xFFFFFFFFFFFFLL | 0x7265000000000000;
      goto LABEL_452;
    case 0x118:
      *((unsigned char *)a3 + 23) = 16;
      uint64_t v20 = "ReadCycleCounter";
LABEL_328:
      *(_OWORD *)int v5 = *(_OWORD *)v20;
      v5[16] = 0;
      return;
    case 0x119:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25956;
      uint64_t v15 = "handlenode";
      goto LABEL_431;
    case 0x11A:
      uint64_t v21 = "init_trampoline";
LABEL_331:
      *((unsigned char *)a3 + 23) = 15;
      *(void *)a3 = *(void *)v21;
      *(void *)((char *)a3 + 7) = *(void *)(v21 + 7);
      *((unsigned char *)a3 + 15) = 0;
      return;
    case 0x11B:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 101;
      uint64_t v35 = "adjust_trampoline";
      goto LABEL_459;
    case 0x11C:
      *((unsigned char *)a3 + 23) = 4;
      int v26 = 1885434484;
LABEL_334:
      *(_DWORD *)int v5 = v26;
      v5[4] = 0;
      return;
    case 0x11D:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 112;
      int v16 = "debugtrap";
      goto LABEL_450;
    case 0x11E:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 112;
      int v16 = "ubsantrap";
      goto LABEL_450;
    case 0x11F:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x6863746566657250;
      goto LABEL_452;
    case 0x121:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1701015141;
      int v24 = "AtomicFence";
      goto LABEL_426;
    case 0x122:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25697;
      uint64_t v15 = "AtomicLoad";
      goto LABEL_431;
    case 0x123:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1701998452;
      int v24 = "AtomicStore";
      goto LABEL_426;
    case 0x124:
      unsigned int v19 = "AtomicCmpSwap";
      goto LABEL_442;
    case 0x125:
      int v39 = operator new(0x20uLL);
      *(void *)int v5 = v39;
      long long v40 = xmmword_1CD91A410;
      uint64_t v41 = "AtomicCmpSwapWithSuccess";
LABEL_343:
      *(_OWORD *)(v5 + 8) = v40;
      *(_OWORD *)int v39 = *(_OWORD *)v41;
      v39[2] = *((void *)v41 + 2);
      *((unsigned char *)v39 + 24) = 0;
      return;
    case 0x126:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 28769;
      uint64_t v15 = "AtomicSwap";
      goto LABEL_431;
    case 0x127:
      unsigned int v19 = "AtomicLoadAdd";
      goto LABEL_442;
    case 0x128:
      unsigned int v19 = "AtomicLoadSub";
      goto LABEL_442;
    case 0x129:
      unsigned int v19 = "AtomicLoadAnd";
      goto LABEL_442;
    case 0x12A:
      unsigned int v19 = "AtomicLoadClr";
      goto LABEL_442;
    case 0x12B:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1917805665;
      unsigned int v34 = "AtomicLoadOr";
      goto LABEL_440;
    case 0x12C:
      unsigned int v19 = "AtomicLoadXor";
      goto LABEL_442;
    case 0x12D:
      unint64_t v12 = "AtomicLoadNand";
      goto LABEL_461;
    case 0x12E:
      unsigned int v19 = "AtomicLoadMin";
      goto LABEL_442;
    case 0x12F:
      unsigned int v19 = "AtomicLoadMax";
      goto LABEL_442;
    case 0x130:
      unint64_t v12 = "AtomicLoadUMin";
      goto LABEL_461;
    case 0x131:
      unint64_t v12 = "AtomicLoadUMax";
      goto LABEL_461;
    case 0x132:
      unint64_t v12 = "AtomicLoadFAdd";
      goto LABEL_461;
    case 0x134:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1684107116;
      int v24 = "masked_load";
      goto LABEL_426;
    case 0x135:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1701998452;
      unsigned int v34 = "masked_store";
      goto LABEL_440;
    case 0x136:
      unsigned int v19 = "masked_gather";
      goto LABEL_442;
    case 0x137:
      unint64_t v12 = "masked_scatter";
      goto LABEL_461;
    case 0x138:
      unint64_t v12 = "lifetime.start";
      goto LABEL_461;
    case 0x139:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1684956462;
      unsigned int v34 = "lifetime.end";
      goto LABEL_440;
    case 0x13A:
      *((unsigned char *)a3 + 23) = 19;
      *(_DWORD *)((char *)a3 + 15) = 1953653108;
      uint64_t v22 = "gc_transition.start";
LABEL_364:
      *(_OWORD *)int v5 = *(_OWORD *)v22;
      v5[19] = 0;
      return;
    case 0x13B:
      *((unsigned char *)a3 + 23) = 17;
      *((_WORD *)a3 + 8) = 100;
      uint64_t v35 = "gc_transition.end";
      goto LABEL_459;
    case 0x13C:
      uint64_t v60 = (char *)operator new(0x19uLL);
      *(void *)int v5 = v60;
      long long v61 = xmmword_1CD91A420;
      int v62 = "get.dynamic.area.offset";
LABEL_367:
      *(_OWORD *)(v5 + 8) = v61;
      *(_OWORD *)uint64_t v60 = *(_OWORD *)v62;
      *(void *)(v60 + 15) = *(void *)(v62 + 15);
      v60[23] = 0;
      return;
    case 0x13D:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1700949874;
      int v24 = "pseudoprobe";
      goto LABEL_426;
    case 0x13E:
      *((unsigned char *)a3 + 23) = 6;
      int v73 = 1633907574;
LABEL_370:
      *(_DWORD *)int v5 = v73;
      __int16 v45 = 25964;
      goto LABEL_413;
    case 0x13F:
      *((unsigned char *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 25700;
      int v23 = "vecreduce_seq_fadd";
      goto LABEL_373;
    case 0x140:
      *((unsigned char *)a3 + 23) = 18;
      *((_WORD *)a3 + 8) = 27765;
      int v23 = "vecreduce_seq_fmul";
LABEL_373:
      *(_OWORD *)int v5 = *(_OWORD *)v23;
      v5[18] = 0;
      return;
    case 0x141:
      unint64_t v12 = "vecreduce_fadd";
      goto LABEL_461;
    case 0x142:
      unint64_t v12 = "vecreduce_fmul";
      goto LABEL_461;
    case 0x143:
      unint64_t v12 = "vecreduce_fmax";
      goto LABEL_461;
    case 0x144:
      unint64_t v12 = "vecreduce_fmin";
      goto LABEL_461;
    case 0x145:
      unsigned int v19 = "vecreduce_add";
      goto LABEL_442;
    case 0x146:
      unsigned int v19 = "vecreduce_mul";
      goto LABEL_442;
    case 0x147:
      unsigned int v19 = "vecreduce_and";
      goto LABEL_442;
    case 0x148:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1919901541;
      unsigned int v34 = "vecreduce_or";
      goto LABEL_440;
    case 0x149:
      unsigned int v19 = "vecreduce_xor";
      goto LABEL_442;
    case 0x14A:
      unint64_t v12 = "vecreduce_smax";
      goto LABEL_461;
    case 0x14B:
      unint64_t v12 = "vecreduce_smin";
      goto LABEL_461;
    case 0x14C:
      unint64_t v12 = "vecreduce_umax";
      goto LABEL_461;
    case 0x14D:
      unint64_t v12 = "vecreduce_umin";
      goto LABEL_461;
    case 0x14E:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1633644662;
      __int16 v45 = 25700;
      goto LABEL_413;
    case 0x14F:
      *((unsigned char *)a3 + 23) = 6;
      int v68 = 1633644662;
LABEL_389:
      *(_DWORD *)int v5 = v68;
      __int16 v45 = 25710;
      goto LABEL_413;
    case 0x150:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1633644662;
      unsigned __int16 v74 = 29537;
      goto LABEL_392;
    case 0x151:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1818194038;
      unsigned __int16 v74 = 29548;
LABEL_392:
      int v55 = v74 | 0x72680000;
      goto LABEL_433;
    case 0x152:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1834971254;
      __int16 v45 = 27765;
      goto LABEL_413;
    case 0x153:
      *((unsigned char *)a3 + 23) = 5;
      *a3 = 1868525686;
      __int16 v25 = 114;
LABEL_395:
      *((_WORD *)v5 + 2) = v25;
      return;
    case 0x154:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1935634550;
      unsigned __int16 v75 = 25715;
      goto LABEL_408;
    case 0x155:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1935634550;
      __int16 v45 = 27752;
      goto LABEL_413;
    case 0x156:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1935634550;
      unsigned __int16 v51 = 29299;
      goto LABEL_410;
    case 0x157:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1935634550;
      __int16 v45 = 25205;
      goto LABEL_413;
    case 0x158:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1969188982;
      unsigned __int16 v75 = 25717;
      goto LABEL_408;
    case 0x159:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1969188982;
      unsigned __int16 v51 = 29301;
      goto LABEL_410;
    case 0x15A:
      *((unsigned char *)a3 + 23) = 6;
      int v67 = 2019520630;
LABEL_403:
      *(_DWORD *)int v5 = v67;
      __int16 v45 = 29295;
      goto LABEL_413;
    case 0x15B:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1717530742;
      int v55 = 1684300134;
      goto LABEL_433;
    case 0x15C:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1717530742;
      int v55 = 1651864422;
      goto LABEL_433;
    case 0x15D:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1717530742;
      int v55 = 1819635046;
      goto LABEL_433;
    case 0x15E:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1717530742;
      unsigned __int16 v75 = 25702;
LABEL_408:
      int v55 = v75 | 0x76690000;
      goto LABEL_433;
    case 0x15F:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1717530742;
      unsigned __int16 v51 = 29286;
LABEL_410:
      int v55 = v51 | 0x6D650000;
      goto LABEL_433;
    case 0x160:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1717530742;
      int v55 = 1734700646;
      goto LABEL_433;
    case 0x161:
      *((unsigned char *)a3 + 23) = 6;
      *a3 = 1717530742;
      __int16 v45 = 24941;
LABEL_413:
      *((_WORD *)v5 + 2) = v45;
      v5[6] = 0;
      return;
    case 0x162:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 105;
      int v16 = "vp_fptoui";
      goto LABEL_450;
    case 0x163:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 105;
      int v16 = "vp_fptosi";
      goto LABEL_450;
    case 0x164:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 112;
      int v16 = "vp_uitofp";
      goto LABEL_450;
    case 0x165:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 112;
      int v16 = "vp_sitofp";
      goto LABEL_450;
    case 0x166:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 25454;
      uint64_t v15 = "vp_fptrunc";
      goto LABEL_431;
    case 0x167:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x74786570665F7076;
      goto LABEL_452;
    case 0x168:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x636E7572745F7076;
      goto LABEL_452;
    case 0x169:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 2053075062;
      unsigned __int16 v76 = 25978;
      goto LABEL_423;
    case 0x16A:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1935634550;
      unsigned __int16 v76 = 25971;
LABEL_423:
      int v55 = v76 | 0x74780000;
      goto LABEL_433;
    case 0x16B:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1953393007;
      int v24 = "vp_ptrtoint";
      goto LABEL_426;
    case 0x16C:
      *((unsigned char *)a3 + 23) = 11;
      *(_DWORD *)((char *)a3 + 7) = 1920233583;
      int v24 = "vp_inttoptr";
LABEL_426:
      *(void *)int v5 = *(void *)v24;
      v5[11] = 0;
      return;
    case 0x16D:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x63637465735F7076;
      goto LABEL_452;
    case 0x16E:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x65726F74735F7076;
      goto LABEL_452;
    case 0x16F:
      uint64_t v77 = (char *)operator new(0x20uLL);
      *(void *)int v5 = v77;
      *(_OWORD *)(v5 + 8) = xmmword_1CD91A430;
      strcpy(v77, "experimental_vp_strided_store");
      return;
    case 0x170:
      *((unsigned char *)a3 + 23) = 10;
      *((_WORD *)a3 + 4) = 29285;
      uint64_t v15 = "vp_scatter";
LABEL_431:
      *(void *)int v5 = *(void *)v15;
      v5[10] = 0;
      return;
    case 0x171:
      *((unsigned char *)a3 + 23) = 7;
      *a3 = 1818194038;
      int v55 = 1684107116;
LABEL_433:
      *(_DWORD *)(v5 + 3) = v55;
      v5[7] = 0;
      return;
    case 0x172:
      unsigned int v78 = (char *)operator new(0x20uLL);
      *(void *)int v5 = v78;
      *(_OWORD *)(v5 + 8) = xmmword_1CDB15B50;
      strcpy(v78, "experimental_vp_strided_load");
      return;
    case 0x173:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 114;
      int v16 = "vp_gather";
      goto LABEL_450;
    case 0x174:
      unsigned int v19 = "vp_reduce_add";
      goto LABEL_442;
    case 0x175:
      unsigned int v19 = "vp_reduce_mul";
      goto LABEL_442;
    case 0x176:
      unsigned int v19 = "vp_reduce_and";
      goto LABEL_442;
    case 0x177:
      *((unsigned char *)a3 + 23) = 12;
      a3[2] = 1919901541;
      unsigned int v34 = "vp_reduce_or";
LABEL_440:
      *(void *)int v5 = *(void *)v34;
      v5[12] = 0;
      return;
    case 0x178:
      unsigned int v19 = "vp_reduce_xor";
LABEL_442:
      *((unsigned char *)a3 + 23) = 13;
      *(void *)a3 = *(void *)v19;
      *(void *)((char *)a3 + 5) = *(void *)(v19 + 5);
      *((unsigned char *)a3 + 13) = 0;
      return;
    case 0x179:
      unint64_t v12 = "vp_reduce_smax";
      goto LABEL_461;
    case 0x17A:
      unint64_t v12 = "vp_reduce_smin";
      goto LABEL_461;
    case 0x17B:
      unint64_t v12 = "vp_reduce_umax";
      goto LABEL_461;
    case 0x17C:
      unint64_t v12 = "vp_reduce_umin";
      goto LABEL_461;
    case 0x17D:
      unint64_t v12 = "vp_reduce_fmax";
      goto LABEL_461;
    case 0x17E:
      unint64_t v12 = "vp_reduce_fmin";
      goto LABEL_461;
    case 0x17F:
    case 0x180:
      unint64_t v12 = "vp_reduce_fadd";
      goto LABEL_461;
    case 0x181:
    case 0x182:
      unint64_t v12 = "vp_reduce_fmul";
      goto LABEL_461;
    case 0x183:
      *((unsigned char *)a3 + 23) = 9;
      *((_WORD *)a3 + 4) = 116;
      int v16 = "vp_select";
LABEL_450:
      *(void *)int v5 = *(void *)v16;
      return;
    case 0x184:
      *((unsigned char *)a3 + 23) = 8;
      uint64_t v18 = 0x656772656D5F7076;
      goto LABEL_452;
    case 0x185:
      uint64_t v44 = "experimental_vp_splice";
LABEL_454:
      *(_OWORD *)int v5 = *(_OWORD *)v44;
      *(void *)(v5 + 14) = *(void *)(v44 + 14);
      *((_WORD *)v5 + 11) = 5632;
      return;
    default:
      if (v6 > 0x185)
      {
        if ((v6 & 0x8000) != 0)
        {
          if (!a2) {
            goto LABEL_497;
          }
          uint64_t v86 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 40) + 16) + 104))(*(void *)(*(void *)(a2 + 40) + 16));
          LODWORD(v6) = *(unsigned __int16 *)(a1 + 24);
          if (v86 && *(_DWORD *)(v86 + 48) > (__int16)~(_WORD)v6)
          {
            uint64_t v87 = *(void *)(v86 + 24);
            if (!v87)
            {
              size_t v82 = 0;
              v5[23] = 0;
              goto LABEL_496;
            }
            uint64_t v80 = (const char *)(v87 + *(unsigned int *)(*(void *)(v86 + 16) + 4 * (__int16)~(_WORD)v6));
LABEL_469:
            size_t v81 = strlen(v80);
            if (v81 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_535;
            }
            size_t v82 = v81;
            if (v81 >= 0x17)
            {
              uint64_t v94 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v81 | 7) != 0x17) {
                uint64_t v94 = v81 | 7;
              }
              uint64_t v95 = v94 + 1;
              BOOL v96 = (char *)operator new(v94 + 1);
              *((void *)v5 + 1) = v82;
              *((void *)v5 + 2) = v95 | 0x8000000000000000;
              *(void *)int v5 = v96;
              int v5 = v96;
            }
            else
            {
              v5[23] = v81;
              if (!v81) {
                goto LABEL_496;
              }
            }
            memmove(v5, v80, v82);
LABEL_496:
            v5[v82] = 0;
            return;
          }
          if (*(_WORD *)(a1 + 24))
          {
LABEL_497:
            BOOL v91 = (char *)&v110;
            unint64_t v97 = v6;
            do
            {
              *--BOOL v91 = (v97 % 0xA) | 0x30;
              BOOL v89 = v97 > 9;
              v97 /= 0xAuLL;
            }
            while (v89);
          }
          else
          {
            BOOL v91 = &v109;
            char v109 = 48;
          }
          sub_1CC028D80(&v107, v91, (char *)&v110, (char *)&v110 - v91);
          int v90 = "<<Unknown Machine Node #";
        }
        else if (a2)
        {
          uint64_t v79 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 1984))(*(void *)(a2 + 24));
          if (v79)
          {
            uint64_t v80 = (const char *)v79;
            goto LABEL_469;
          }
          unint64_t v92 = *(unsigned __int16 *)(a1 + 24);
          if (*(_WORD *)(a1 + 24))
          {
            uint64_t v93 = &v108.__r_.__value_.__s.__data_[21];
            do
            {
              *--uint64_t v93 = (v92 % 0xA) | 0x30;
              BOOL v89 = v92 > 9;
              v92 /= 0xAuLL;
            }
            while (v89);
          }
          else
          {
            uint64_t v93 = &v108.__r_.__value_.__s.__data_[20];
            v108.__r_.__value_.__s.__data_[20] = 48;
          }
          sub_1CC028D80(&v107, v93, &v108.__r_.__value_.__s.__data_[21], (char *)&v108.__r_.__value_.__r.__words[2] + 5 - v93);
          int v90 = "<<Unknown Target Node #";
        }
        else
        {
          uint64_t v88 = 0;
          do
          {
            v108.__r_.__value_.__s.__data_[v88-- + 20] = (v6 % 0xA) | 0x30;
            BOOL v89 = v6 > 9;
            v6 /= 0xAuLL;
          }
          while (v89);
          sub_1CC028D80(&v107, &v108.__r_.__value_.__s.__data_[v88 + 21], &v108.__r_.__value_.__s.__data_[21], -v88);
          int v90 = "<<Unknown Node #";
        }
        unint64_t v103 = std::string::insert(&v107, 0, v90);
        std::string::size_type v104 = v103->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v108.__r_.__value_.__l.__data_ = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        v108.__r_.__value_.__r.__words[2] = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        char v105 = std::string::append(&v108, ">>");
        std::string::size_type v106 = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v5 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        *((void *)v5 + 2) = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v108.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        return;
      }
      *((unsigned char *)a3 + 23) = 20;
      a3[4] = 1044276580;
      uint64_t v43 = "<<Unknown DAG Node>>";
LABEL_464:
      *(_OWORD *)int v5 = *(_OWORD *)v43;
      v5[20] = 0;
      return;
  }
}

double sub_1CCFE7764(uint64_t a1, llvm::raw_ostream *this, uint64_t a3, double result)
{
  v241[5] = *MEMORY[0x1E4F143B8];
  if ((*(_WORD *)(a1 + 72) & 2) != 0)
  {
    uint64_t v7 = (_DWORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v7 > 3uLL)
    {
      _DWORD *v7 = 2004184608;
      *((void *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " nuw", 4uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 4) != 0)
  {
    uint64_t v8 = (_DWORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v8 > 3uLL)
    {
      _DWORD *v8 = 2004053536;
      *((void *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " nsw", 4uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 8) != 0)
  {
    uint64_t v9 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v9) > 5)
    {
      *(_WORD *)(v9 + 4) = 29795;
      *(_DWORD *)uint64_t v9 = 1635280160;
      *((void *)this + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(this, " exact", 6uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x10) != 0)
  {
    uint64_t v10 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v10) > 4)
    {
      *(unsigned char *)(v10 + 4) = 110;
      *(_DWORD *)uint64_t v10 = 1634627104;
      *((void *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " nnan", 5uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x20) != 0)
  {
    uint64_t v11 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v11) > 4)
    {
      *(unsigned char *)(v11 + 4) = 102;
      *(_DWORD *)uint64_t v11 = 1852403232;
      *((void *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " ninf", 5uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x40) != 0)
  {
    unint64_t v12 = (_DWORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v12 > 3uLL)
    {
      _DWORD *v12 = 2054385184;
      *((void *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " nsz", 4uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x80) != 0)
  {
    uint64_t v13 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v13) > 4)
    {
      *(unsigned char *)(v13 + 4) = 112;
      *(_DWORD *)uint64_t v13 = 1668440352;
      *((void *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " arcp", 5uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0)
  {
    uint64_t v14 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v14) > 8)
    {
      *(unsigned char *)(v14 + 8) = 116;
      *(void *)uint64_t v14 = *(void *)" contract";
      *((void *)this + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(this, " contract", 9uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x200) != 0)
  {
    uint64_t v15 = (_DWORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v15 > 3uLL)
    {
      *uint64_t v15 = 1852203296;
      *((void *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " afn", 4uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x400) != 0)
  {
    int v16 = (void *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v16 > 7uLL)
    {
      void *v16 = 0x636F737361657220;
      *((void *)this + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(this, " reassoc", 8uLL);
    }
  }
  if ((*(_WORD *)(a1 + 72) & 0x800) != 0)
  {
    uint64_t v17 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v17) > 0xA)
    {
      *(_DWORD *)(v17 + 7) = 1953523043;
      *(void *)uint64_t v17 = *(void *)" nofpexcept";
      *((void *)this + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(this, " nofpexcept", 0xBuLL);
    }
  }
  if (*(__int16 *)(a1 + 24) < 0)
  {
    uint64_t v20 = (uint64_t **)(a1 + 88);
    if (!*(_DWORD *)(a1 + 88)) {
      goto LABEL_364;
    }
    uint64_t v21 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v21)
    {
      llvm::raw_ostream::write(this, "<", 1uLL);
      uint64_t v22 = (_DWORD *)*((void *)this + 4);
    }
    else
    {
      *uint64_t v21 = 60;
      uint64_t v22 = (_DWORD *)(*((void *)this + 4) + 1);
      *((void *)this + 4) = v22;
    }
    if (*((void *)this + 3) - (void)v22 > 3uLL)
    {
      *uint64_t v22 = 980247885;
      *((void *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, "Mem:", 4uLL);
    }
    int v23 = *(_DWORD *)v20;
    if (*(_DWORD *)v20)
    {
      if (v23 == 1)
      {
        int v24 = (uint64_t **)(a1 + 80);
      }
      else
      {
        int v24 = (uint64_t **)(*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v20 = &v24[v23];
      }
      unsigned __int16 v36 = *v24;
      uint64_t v35 = v24 + 1;
      sub_1CCFE9D54(this, v36, a3);
      while (v35 != v20)
      {
        unsigned __int16 v37 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v37)
        {
          llvm::raw_ostream::write(this, " ", 1uLL);
        }
        else
        {
          *unsigned __int16 v37 = 32;
          ++*((void *)this + 4);
        }
        int v38 = *v35++;
        sub_1CCFE9D54(this, v38, a3);
      }
    }
    goto LABEL_360;
  }
  unsigned int v18 = *(unsigned __int16 *)(a1 + 24);
  if (v18 <= 0xFD)
  {
    switch(*(_WORD *)(a1 + 24))
    {
      case 6:
        std::string v107 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v107)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *std::string v107 = 60;
          ++*((void *)this + 4);
        }
        std::string v108 = *(uint64_t ****)(*(void *)(a1 + 80) + 16);
        if (!v108) {
          goto LABEL_359;
        }
        if ((*((unsigned char *)v108 + 23) & 0x10) == 0) {
          goto LABEL_353;
        }
        uint64_t v109 = ***v108;
        uint64_t v110 = *(void *)(v109 + 152);
        uint64_t v111 = *(unsigned int *)(v109 + 168);
        if (!v111) {
          goto LABEL_350;
        }
        LODWORD(v112) = (v111 - 1) & ((v108 >> 4) ^ (v108 >> 9));
        uint64_t v113 = (uint64_t ****)(v110 + 16 * v112);
        uint64_t v114 = *v113;
        if (*v113 == v108) {
          goto LABEL_351;
        }
        int v115 = 1;
        while (v114 != (uint64_t ***)-4096)
        {
          int v116 = v112 + v115++;
          uint64_t v112 = v116 & (v111 - 1);
          uint64_t v114 = *(uint64_t ****)(v110 + 16 * v112);
          if (v114 == v108)
          {
            uint64_t v113 = (uint64_t ****)(v110 + 16 * v112);
            goto LABEL_351;
          }
        }
LABEL_350:
        uint64_t v113 = (uint64_t ****)(v110 + 16 * v111);
LABEL_351:
        BOOL v180 = (size_t *)v113[1];
        size_t v183 = *v180;
        uint64_t v181 = v180 + 2;
        size_t v182 = v183;
        uint64_t v184 = (unsigned char *)*((void *)this + 4);
        if (v183 <= *((void *)this + 3) - (void)v184)
        {
          if (v182)
          {
            memcpy(v184, v181, v182);
            uint64_t v184 = (unsigned char *)(*((void *)this + 4) + v182);
            *((void *)this + 4) = v184;
          }
        }
        else
        {
          llvm::raw_ostream::write(this, (const char *)v181, v182);
LABEL_353:
          uint64_t v184 = (unsigned char *)*((void *)this + 4);
        }
        if (*((unsigned char **)this + 3) == v184)
        {
          unsigned int v34 = " ";
          goto LABEL_358;
        }
        unsigned char *v184 = 32;
        goto LABEL_502;
      case 7:
        uint64_t v117 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v117)
        {
          llvm::raw_ostream::write(this, ":", 1uLL);
        }
        else
        {
          *uint64_t v117 = 58;
          ++*((void *)this + 4);
        }
        *(_OWORD *)unint64_t v238 = *(_OWORD *)(a1 + 80);
        llvm::EVT::getEVTString((llvm::EVT *)v238, (uint64_t)&__p);
        if (v240 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        if (v240 >= 0) {
          size_t v119 = HIBYTE(v240) & 0x7F;
        }
        else {
          size_t v119 = v240;
        }
        llvm::raw_ostream::write(this, p_p, v119);
        if (SHIBYTE(v240) < 0) {
          operator delete(__p);
        }
        goto LABEL_364;
      case 8:
      case 0xA:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x2B:
      case 0x2C:
        goto LABEL_444;
      case 9:
        int v101 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v101 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 32);
        }
        else
        {
          *((void *)this + 4) = v101 + 1;
          *int v101 = 32;
        }
        int v128 = *(_DWORD *)(a1 + 76);
        if (a3) {
          uint64_t v129 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 40) + 16) + 176))(*(void *)(*(void *)(a3 + 40) + 16));
        }
        else {
          uint64_t v129 = 0;
        }
        uint64_t v132 = operator new(0x28uLL);
        *(void *)uint64_t v132 = &unk_1F26154E0;
        v132[2] = v128;
        *((void *)v132 + 2) = v129;
        v132[6] = 0;
        *((void *)v132 + 4) = 0;
        off_1F2615510((llvm::raw_ostream *)v132, this);
        (*(void (**)(_DWORD *))(*(void *)v132 + 40))(v132);
        goto LABEL_364;
      case 0xB:
      case 0x23:
        unsigned int v19 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v19 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 60);
        }
        else
        {
          *((void *)this + 4) = v19 + 1;
          *unsigned int v19 = 60;
        }
        uint64_t v120 = (unsigned int *)(*(void *)(a1 + 80) + 24);
        __p = v241;
        long long v240 = xmmword_1CDB15B30;
        llvm::APInt::toString(v120, &__p, 0xAu, 1, 0);
        llvm::raw_ostream::write(this, (const char *)__p, v240);
        if (__p != v241) {
          free(__p);
        }
        goto LABEL_333;
      case 0xC:
      case 0x24:
        unsigned __int16 v46 = *(void **)(*(void *)(a1 + 80) + 32);
        if (v46 == &unk_1CFB2E308)
        {
          unint64_t v121 = (unsigned char *)*((void *)this + 4);
          if ((unint64_t)v121 >= *((void *)this + 3))
          {
            llvm::raw_ostream::write(this, 60);
          }
          else
          {
            *((void *)this + 4) = v121 + 1;
            *unint64_t v121 = 60;
          }
          double v133 = llvm::APFloat::convertToFloat((llvm::APFloat *)(*(void *)(a1 + 80) + 24));
        }
        else
        {
          if (v46 != &unk_1CFB2E31C)
          {
            uint64_t v47 = *((void *)this + 4);
            if ((unint64_t)(*((void *)this + 3) - v47) > 8)
            {
              *(unsigned char *)(v47 + 8) = 40;
              *(void *)uint64_t v47 = *(void *)"<APFloat(";
              *((void *)this + 4) += 9;
            }
            else
            {
              llvm::raw_ostream::write(this, "<APFloat(", 9uLL);
            }
            uint64_t v48 = *(void *)(a1 + 80);
            unsigned __int16 v50 = *(void **)(v48 + 32);
            int v49 = (llvm::detail::DoubleAPFloat *)(v48 + 32);
            if (v50 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v49, (llvm::APInt *)v238);
            }
            else {
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v49, (uint64_t)v238);
            }
            __p = v241;
            long long v240 = xmmword_1CDB15B30;
            llvm::APInt::toString(v238, &__p, 0xAu, 0, 0);
            llvm::raw_ostream::write(this, (const char *)__p, v240);
            if (__p != v241) {
              free(__p);
            }
            if (v238[2] >= 0x41 && *(void *)v238) {
              MEMORY[0x1D25D9CB0](*(void *)v238, 0x1000C8000313F17);
            }
            unsigned __int16 v51 = (_WORD *)*((void *)this + 4);
            if (*((void *)this + 3) - (void)v51 <= 1uLL)
            {
              unsigned int v52 = ")>";
              int v53 = this;
              size_t v54 = 2;
              goto LABEL_363;
            }
            _WORD *v51 = 15913;
            uint64_t v208 = *((void *)this + 4) + 2;
            goto LABEL_408;
          }
          uint64_t v131 = (unsigned char *)*((void *)this + 4);
          if ((unint64_t)v131 >= *((void *)this + 3))
          {
            llvm::raw_ostream::write(this, 60);
          }
          else
          {
            *((void *)this + 4) = v131 + 1;
            *uint64_t v131 = 60;
          }
          double v133 = llvm::APFloat::convertToDouble((llvm::APFloat *)(*(void *)(a1 + 80) + 24));
        }
        llvm::write_double(this, 0, 0, 0, v133);
        goto LABEL_333;
      case 0xD:
      case 0xE:
      case 0x25:
      case 0x26:
        int64_t v159 = *(void *)(a1 + 88);
        unsigned int v160 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v160 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 60);
        }
        else
        {
          *((void *)this + 4) = v160 + 1;
          *unsigned int v160 = 60;
        }
        llvm::Value::printAsOperand(*(llvm::Value **)(a1 + 80), this, 1, 0);
        uint64_t v174 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v174 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 62);
        }
        else
        {
          *((void *)this + 4) = v174 + 1;
          *uint64_t v174 = 62;
        }
        __int16 v176 = (unsigned char *)*((void *)this + 3);
        int64_t v175 = (unsigned char *)*((void *)this + 4);
        goto LABEL_343;
      case 0xF:
      case 0x27:
        long long v61 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v61)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          unsigned char *v61 = 60;
          ++*((void *)this + 4);
        }
        unint64_t v62 = *(int *)(a1 + 76);
        if ((v62 & 0x80000000) != 0)
        {
          unint64_t v62 = -(uint64_t)v62;
          int v63 = this;
          int v64 = 1;
        }
        else
        {
          int v63 = this;
          int v64 = 0;
        }
        sub_1CD098D14(v63, v62, 0, 0, v64);
        goto LABEL_360;
      case 0x10:
      case 0x28:
        int v55 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v55)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *int v55 = 60;
          ++*((void *)this + 4);
        }
        unint64_t v56 = *(int *)(a1 + 76);
        if ((v56 & 0x80000000) != 0)
        {
          unint64_t v56 = -(uint64_t)v56;
          unsigned __int16 v57 = this;
          int v58 = 1;
        }
        else
        {
          unsigned __int16 v57 = this;
          int v58 = 0;
        }
        sub_1CD098D14(v57, v56, 0, 0, v58);
        int v59 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v59)
        {
          llvm::raw_ostream::write(this, ">", 1uLL);
        }
        else
        {
          *int v59 = 62;
          ++*((void *)this + 4);
        }
        unint64_t v60 = *(unsigned int *)(a1 + 80);
        if (v60) {
          goto LABEL_419;
        }
        goto LABEL_364;
      case 0x11:
      case 0x29:
        int v39 = *(_DWORD *)(a1 + 88);
        unint64_t v40 = v39 & 0x7FFFFFFF;
        __int16 v42 = (unsigned char *)*((void *)this + 3);
        uint64_t v41 = (unsigned char *)*((void *)this + 4);
        if (v39 < 0)
        {
          if (v42 == v41)
          {
            llvm::raw_ostream::write(this, "<", 1uLL);
          }
          else
          {
            *uint64_t v41 = 60;
            ++*((void *)this + 4);
          }
          (*(void (**)(void, llvm::raw_ostream *))(**(void **)(a1 + 80) + 48))(*(void *)(a1 + 80), this);
        }
        else
        {
          if (v42 == v41)
          {
            llvm::raw_ostream::write(this, "<", 1uLL);
          }
          else
          {
            *uint64_t v41 = 60;
            ++*((void *)this + 4);
          }
          llvm::Value::print(*(llvm::Value **)(a1 + 80), this, 0);
        }
        uint64_t v43 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v43)
        {
          llvm::raw_ostream::write(this, ">", 1uLL);
        }
        else
        {
          *uint64_t v43 = 62;
          ++*((void *)this + 4);
        }
        uint64_t v45 = *((void *)this + 3);
        uint64_t v44 = *((void *)this + 4);
        if (v40)
        {
          if ((unint64_t)(v45 - v44) > 2)
          {
            *(unsigned char *)(v44 + 2) = 32;
            *(_WORD *)uint64_t v44 = 11040;
            *((void *)this + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(this, " + ", 3uLL);
          }
          sub_1CD098D14(this, v40, 0, 0, 0);
        }
        else
        {
          if (v45 == v44)
          {
            llvm::raw_ostream::write(this, " ", 1uLL);
          }
          else
          {
            *(unsigned char *)uint64_t v44 = 32;
            ++*((void *)this + 4);
          }
          sub_1CD098FF4(this, 0, 0, 0, 0);
        }
        goto LABEL_418;
      case 0x12:
      case 0x2A:
        unsigned __int16 v65 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v65)
        {
          llvm::raw_ostream::write(this, "'", 1uLL);
          unsigned __int16 v66 = (unsigned char *)*((void *)this + 4);
        }
        else
        {
          *unsigned __int16 v65 = 39;
          unsigned __int16 v66 = (unsigned char *)(*((void *)this + 4) + 1);
          *((void *)this + 4) = v66;
        }
        int v67 = *(const void **)(a1 + 80);
        if (v67)
        {
          size_t v68 = strlen(*(const char **)(a1 + 80));
          size_t v69 = v68;
          if (v68 <= *((void *)this + 3) - (void)v66)
          {
            if (v68)
            {
              memcpy(v66, v67, v68);
              unsigned __int16 v66 = (unsigned char *)(*((void *)this + 4) + v69);
              *((void *)this + 4) = v66;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, (const char *)v67, v68);
            unsigned __int16 v66 = (unsigned char *)*((void *)this + 4);
          }
        }
        if (*((unsigned char **)this + 3) == v66)
        {
          llvm::raw_ostream::write(this, "'", 1uLL);
        }
        else
        {
          *unsigned __int16 v66 = 39;
          ++*((void *)this + 4);
        }
        unint64_t v60 = *(unsigned int *)(a1 + 88);
        if (v60) {
          goto LABEL_419;
        }
        goto LABEL_364;
      case 0x2D:
        int v102 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v102)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *int v102 = 60;
          ++*((void *)this + 4);
        }
        unint64_t v103 = *(int *)(a1 + 80);
        if ((v103 & 0x80000000) != 0)
        {
          unint64_t v103 = -(uint64_t)v103;
          std::string::size_type v104 = this;
          int v105 = 1;
        }
        else
        {
          std::string::size_type v104 = this;
          int v105 = 0;
        }
        sub_1CD098D14(v104, v103, 0, 0, v105);
        std::string::size_type v106 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v106 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 43);
        }
        else
        {
          *((void *)this + 4) = v106 + 1;
          *std::string::size_type v106 = 43;
        }
        llvm::raw_ostream::operator<<(this, *(void *)(a1 + 88));
        __int16 v130 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v130)
        {
          llvm::raw_ostream::write(this, ">", 1uLL);
        }
        else
        {
          *__int16 v130 = 62;
          ++*((void *)this + 4);
        }
        unint64_t v60 = *(unsigned int *)(a1 + 76);
        if (v60) {
          goto LABEL_419;
        }
        goto LABEL_364;
      default:
        if (v18 == 253)
        {
          uint64_t v95 = (unsigned char *)*((void *)this + 4);
          if (*((unsigned char **)this + 3) == v95)
          {
            llvm::raw_ostream::write(this, "<", 1uLL);
          }
          else
          {
            *uint64_t v95 = 60;
            ++*((void *)this + 4);
          }
          sub_1CCFE9D54(this, *(uint64_t **)(a1 + 96), a3);
          unint64_t v71 = *(unsigned __int16 *)(a1 + 26);
          unsigned int v96 = (v71 >> 10) & 3;
          switch(v96)
          {
            case 3u:
              uint64_t v161 = *((void *)this + 4);
              if ((unint64_t)(*((void *)this + 3) - v161) <= 5)
              {
                int v98 = ", zext";
                goto LABEL_306;
              }
              *(_WORD *)(v161 + 4) = 29816;
              int v233 = 1702502444;
              break;
            case 2u:
              uint64_t v161 = *((void *)this + 4);
              if ((unint64_t)(*((void *)this + 3) - v161) <= 5)
              {
                int v98 = ", sext";
LABEL_306:
                int v99 = this;
                size_t v100 = 6;
                goto LABEL_307;
              }
              *(_WORD *)(v161 + 4) = 29816;
              int v233 = 1702043692;
              break;
            case 1u:
              unint64_t v97 = (void *)*((void *)this + 4);
              if (*((void *)this + 3) - (void)v97 <= 7uLL)
              {
                int v98 = ", anyext";
                int v99 = this;
                size_t v100 = 8;
LABEL_307:
                llvm::raw_ostream::write(v99, v98, v100);
LABEL_308:
                uint64_t v162 = *((void *)this + 4);
                if ((unint64_t)(*((void *)this + 3) - v162) <= 5)
                {
                  int v73 = " from ";
                  unsigned __int16 v74 = this;
                  size_t v75 = 6;
                  goto LABEL_310;
                }
                *(_WORD *)(v162 + 4) = 8301;
                *(_DWORD *)uint64_t v162 = 1869768224;
                uint64_t v225 = *((void *)this + 4) + 6;
                goto LABEL_504;
              }
              *unint64_t v97 = 0x747865796E61202CLL;
              uint64_t v232 = *((void *)this + 4) + 8;
LABEL_532:
              *((void *)this + 4) = v232;
              goto LABEL_308;
            default:
              goto LABEL_320;
          }
          *(_DWORD *)uint64_t v161 = v233;
          uint64_t v232 = *((void *)this + 4) + 6;
          goto LABEL_532;
        }
        if (v18 != 153) {
          goto LABEL_444;
        }
        int v212 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v212)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *int v212 = 60;
          ++*((void *)this + 4);
        }
        unsigned int v213 = sub_1CD3DB440(*(llvm::EVT **)(a1 + 40), (const char *)this);
        if (!v213) {
          goto LABEL_360;
        }
        uint64_t v214 = 0;
        uint64_t v215 = 4 * v213;
        break;
    }
    while (1)
    {
      unint64_t v216 = *(unsigned int *)(*(void *)(a1 + 80) + v214);
      if (!v214) {
        goto LABEL_435;
      }
      uint64_t v217 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v217) {
        break;
      }
      *uint64_t v217 = 44;
      ++*((void *)this + 4);
      if ((v216 & 0x80000000) != 0)
      {
LABEL_438:
        unsigned int v218 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v218)
        {
          llvm::raw_ostream::write(this, "u", 1uLL);
        }
        else
        {
          *unsigned int v218 = 117;
          ++*((void *)this + 4);
        }
        goto LABEL_440;
      }
LABEL_436:
      sub_1CD098D14(this, v216, 0, 0, 0);
LABEL_440:
      v214 += 4;
      if (v215 == v214) {
        goto LABEL_360;
      }
    }
    llvm::raw_ostream::write(this, ",", 1uLL);
LABEL_435:
    if ((v216 & 0x80000000) != 0) {
      goto LABEL_438;
    }
    goto LABEL_436;
  }
  if (*(unsigned __int16 *)(a1 + 24) > 0x133u)
  {
    switch(*(_WORD *)(a1 + 24))
    {
      case 0x134:
        __int16 v25 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v25)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *__int16 v25 = 60;
          ++*((void *)this + 4);
        }
        sub_1CCFE9D54(this, *(uint64_t **)(a1 + 96), a3);
        unint64_t v26 = *(unsigned __int16 *)(a1 + 26);
        unsigned int v27 = (v26 >> 10) & 3;
        switch(v27)
        {
          case 3u:
            uint64_t v151 = *((void *)this + 4);
            if ((unint64_t)(*((void *)this + 3) - v151) <= 5)
            {
              unsigned __int16 v29 = ", zext";
              goto LABEL_273;
            }
            *(_WORD *)(v151 + 4) = 29816;
            int v230 = 1702502444;
            break;
          case 2u:
            uint64_t v151 = *((void *)this + 4);
            if ((unint64_t)(*((void *)this + 3) - v151) <= 5)
            {
              unsigned __int16 v29 = ", sext";
LABEL_273:
              unsigned __int16 v30 = this;
              size_t v31 = 6;
              goto LABEL_274;
            }
            *(_WORD *)(v151 + 4) = 29816;
            int v230 = 1702043692;
            break;
          case 1u:
            unsigned __int16 v28 = (void *)*((void *)this + 4);
            if (*((void *)this + 3) - (void)v28 <= 7uLL)
            {
              unsigned __int16 v29 = ", anyext";
              unsigned __int16 v30 = this;
              size_t v31 = 8;
LABEL_274:
              llvm::raw_ostream::write(v30, v29, v31);
              goto LABEL_275;
            }
            *unsigned __int16 v28 = 0x747865796E61202CLL;
            uint64_t v231 = *((void *)this + 4) + 8;
LABEL_527:
            *((void *)this + 4) = v231;
LABEL_275:
            uint64_t v152 = *((void *)this + 4);
            if ((unint64_t)(*((void *)this + 3) - v152) > 5)
            {
              *(_WORD *)(v152 + 4) = 8301;
              *(_DWORD *)uint64_t v152 = 1869768224;
              *((void *)this + 4) += 6;
            }
            else
            {
              llvm::raw_ostream::write(this, " from ", 6uLL);
            }
            *(_OWORD *)unint64_t v238 = *(_OWORD *)(a1 + 80);
            llvm::EVT::getEVTString((llvm::EVT *)v238, (uint64_t)&__p);
            if (v240 >= 0) {
              uint64_t v153 = (const char *)&__p;
            }
            else {
              uint64_t v153 = (const char *)__p;
            }
            if (v240 >= 0) {
              size_t v154 = HIBYTE(v240) & 0x7F;
            }
            else {
              size_t v154 = v240;
            }
            llvm::raw_ostream::write(this, v153, v154);
            if (SHIBYTE(v240) < 0) {
              operator delete(__p);
            }
            unint64_t v26 = *(unsigned __int16 *)(a1 + 26);
LABEL_286:
            uint64_t v155 = ((v26 >> 7) & 7) - 1;
            if (v155 > 3) {
              uint64_t v156 = "";
            }
            else {
              uint64_t v156 = off_1E684F9D8[v155];
            }
            int v122 = (_WORD *)*((void *)this + 4);
            if (*v156)
            {
              if (*((void *)this + 3) - (void)v122 > 1uLL)
              {
                *int v122 = 8236;
                int v122 = (_WORD *)(*((void *)this + 4) + 2);
                *((void *)this + 4) = v122;
              }
              else
              {
                llvm::raw_ostream::write(this, ", ", 2uLL);
                int v122 = (_WORD *)*((void *)this + 4);
              }
              size_t v157 = strlen(v156);
              size_t v158 = v157;
              if (v157 <= *((void *)this + 3) - (void)v122)
              {
                if (v157)
                {
                  memcpy(v122, v156, v157);
                  int v122 = (_WORD *)(*((void *)this + 4) + v158);
                  *((void *)this + 4) = v122;
                }
              }
              else
              {
                llvm::raw_ostream::write(this, v156, v157);
                int v122 = (_WORD *)*((void *)this + 4);
              }
            }
            if ((*(_WORD *)(a1 + 26) & 0x1000) != 0)
            {
              if (*((void *)this + 3) - (void)v122 > 0xAuLL)
              {
                *(_DWORD *)((char *)v122 + 7) = 1735289188;
                *(void *)int v122 = *(void *)", expanding";
                int v122 = (_WORD *)(*((void *)this + 4) + 11);
LABEL_510:
                *((void *)this + 4) = v122;
              }
              else
              {
                unsigned int v125 = ", expanding";
                unsigned int v126 = this;
                size_t v127 = 11;
LABEL_297:
                llvm::raw_ostream::write(v126, v125, v127);
                int v122 = (_WORD *)*((void *)this + 4);
              }
            }
LABEL_298:
            if (*((_WORD **)this + 3) != v122)
            {
              *(unsigned char *)int v122 = 62;
LABEL_407:
              uint64_t v208 = *((void *)this + 4) + 1;
LABEL_408:
              *((void *)this + 4) = v208;
              goto LABEL_364;
            }
            goto LABEL_362;
          default:
            goto LABEL_286;
        }
        *(_DWORD *)uint64_t v151 = v230;
        uint64_t v231 = *((void *)this + 4) + 6;
        goto LABEL_527;
      case 0x135:
        uint64_t v88 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v88)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *uint64_t v88 = 60;
          ++*((void *)this + 4);
        }
        sub_1CCFE9D54(this, *(uint64_t **)(a1 + 96), a3);
        unint64_t v89 = *(unsigned __int16 *)(a1 + 26);
        if ((v89 & 0x400) != 0)
        {
          uint64_t v90 = *((void *)this + 4);
          if ((unint64_t)(*((void *)this + 3) - v90) > 0xA)
          {
            *(_DWORD *)(v90 + 7) = 544175136;
            *(void *)uint64_t v90 = *(void *)", trunc to ";
            *((void *)this + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(this, ", trunc to ", 0xBuLL);
          }
          *(_OWORD *)unint64_t v238 = *(_OWORD *)(a1 + 80);
          llvm::EVT::getEVTString((llvm::EVT *)v238, (uint64_t)&__p);
          if (v240 >= 0) {
            BOOL v91 = (const char *)&__p;
          }
          else {
            BOOL v91 = (const char *)__p;
          }
          if (v240 >= 0) {
            size_t v92 = HIBYTE(v240) & 0x7F;
          }
          else {
            size_t v92 = v240;
          }
          llvm::raw_ostream::write(this, v91, v92);
          if (SHIBYTE(v240) < 0) {
            operator delete(__p);
          }
          unint64_t v89 = *(unsigned __int16 *)(a1 + 26);
        }
        uint64_t v93 = ((v89 >> 7) & 7) - 1;
        if (v93 > 3) {
          uint64_t v94 = "";
        }
        else {
          uint64_t v94 = off_1E684F9D8[v93];
        }
        int v122 = (_WORD *)*((void *)this + 4);
        if (*v94)
        {
          if (*((void *)this + 3) - (void)v122 > 1uLL)
          {
            *int v122 = 8236;
            int v122 = (_WORD *)(*((void *)this + 4) + 2);
            *((void *)this + 4) = v122;
          }
          else
          {
            llvm::raw_ostream::write(this, ", ", 2uLL);
            int v122 = (_WORD *)*((void *)this + 4);
          }
          size_t v123 = strlen(v94);
          size_t v124 = v123;
          if (v123 <= *((void *)this + 3) - (void)v122)
          {
            if (v123)
            {
              memcpy(v122, v94, v123);
              int v122 = (_WORD *)(*((void *)this + 4) + v124);
              *((void *)this + 4) = v122;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, v94, v123);
            int v122 = (_WORD *)*((void *)this + 4);
          }
        }
        if ((*(_WORD *)(a1 + 26) & 0x800) == 0) {
          goto LABEL_298;
        }
        if (*((void *)this + 3) - (void)v122 <= 0xCuLL)
        {
          unsigned int v125 = ", compressing";
          unsigned int v126 = this;
          size_t v127 = 13;
          goto LABEL_297;
        }
        qmemcpy(v122, ", compressing", 13);
        int v122 = (_WORD *)(*((void *)this + 4) + 13);
        goto LABEL_510;
      case 0x136:
        unsigned __int16 v76 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v76)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *unsigned __int16 v76 = 60;
          ++*((void *)this + 4);
        }
        sub_1CCFE9D54(this, *(uint64_t **)(a1 + 96), a3);
        unsigned int v77 = *(unsigned __int16 *)(a1 + 26);
        int v78 = (v77 >> 10) & 3;
        switch(v78)
        {
          case 3:
            uint64_t v134 = *((void *)this + 4);
            if ((unint64_t)(*((void *)this + 3) - v134) <= 5)
            {
              uint64_t v80 = ", zext";
              goto LABEL_232;
            }
            *(_WORD *)(v134 + 4) = 29816;
            int v229 = 1702502444;
            break;
          case 2:
            uint64_t v134 = *((void *)this + 4);
            if ((unint64_t)(*((void *)this + 3) - v134) <= 5)
            {
              uint64_t v80 = ", sext";
LABEL_232:
              size_t v81 = this;
              size_t v82 = 6;
              goto LABEL_233;
            }
            *(_WORD *)(v134 + 4) = 29816;
            int v229 = 1702043692;
            break;
          case 1:
            uint64_t v79 = (void *)*((void *)this + 4);
            if (*((void *)this + 3) - (void)v79 <= 7uLL)
            {
              uint64_t v80 = ", anyext";
              size_t v81 = this;
              size_t v82 = 8;
LABEL_233:
              llvm::raw_ostream::write(v81, v80, v82);
              goto LABEL_234;
            }
            *uint64_t v79 = 0x747865796E61202CLL;
            uint64_t v228 = *((void *)this + 4) + 8;
            goto LABEL_522;
          default:
            goto LABEL_246;
        }
        *(_DWORD *)uint64_t v134 = v229;
        uint64_t v228 = *((void *)this + 4) + 6;
LABEL_522:
        *((void *)this + 4) = v228;
LABEL_234:
        uint64_t v135 = *((void *)this + 4);
        if ((unint64_t)(*((void *)this + 3) - v135) > 5)
        {
          *(_WORD *)(v135 + 4) = 8301;
          *(_DWORD *)uint64_t v135 = 1869768224;
          uint64_t v224 = *((void *)this + 4) + 6;
LABEL_506:
          *((void *)this + 4) = v224;
        }
        else
        {
          uint64_t v85 = " from ";
          uint64_t v86 = this;
          size_t v87 = 6;
LABEL_236:
          llvm::raw_ostream::write(v86, v85, v87);
        }
        *(_OWORD *)unint64_t v238 = *(_OWORD *)(a1 + 80);
        llvm::EVT::getEVTString((llvm::EVT *)v238, (uint64_t)&__p);
        if (v240 >= 0) {
          unsigned int v136 = (const char *)&__p;
        }
        else {
          unsigned int v136 = (const char *)__p;
        }
        if (v240 >= 0) {
          size_t v137 = HIBYTE(v240) & 0x7F;
        }
        else {
          size_t v137 = v240;
        }
        llvm::raw_ostream::write(this, v136, v137);
        if (SHIBYTE(v240) < 0) {
          operator delete(__p);
        }
        LOWORD(v77) = *(_WORD *)(a1 + 26);
LABEL_246:
        int v138 = v77 & 0x300;
        if ((v77 & 0x300) != 0) {
          uint64_t v139 = "unsigned";
        }
        else {
          uint64_t v139 = "signed";
        }
        int v140 = v77 & 0x280;
        if ((v77 & 0x280) != 0) {
          unsigned int v141 = "unscaled";
        }
        else {
          unsigned int v141 = "scaled";
        }
        unsigned int v142 = (_WORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v142 > 1uLL)
        {
          *unsigned int v142 = 8236;
          unint64_t v143 = (void *)(*((void *)this + 4) + 2);
          *((void *)this + 4) = v143;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ", 2uLL);
          unint64_t v143 = (void *)*((void *)this + 4);
        }
        if (v138) {
          size_t v144 = 8;
        }
        else {
          size_t v144 = 6;
        }
        if (v144 <= *((void *)this + 3) - (void)v143)
        {
          memcpy(v143, v139, v144);
          unsigned int v145 = (unsigned char *)(*((void *)this + 4) + v144);
          *((void *)this + 4) = v145;
        }
        else
        {
          llvm::raw_ostream::write(this, v139, v144);
          unsigned int v145 = (unsigned char *)*((void *)this + 4);
        }
        if (*((unsigned char **)this + 3) == v145)
        {
          llvm::raw_ostream::write(this, " ", 1uLL);
          uint64_t v146 = (void *)*((void *)this + 4);
        }
        else
        {
          *unsigned int v145 = 32;
          uint64_t v146 = (void *)(*((void *)this + 4) + 1);
          *((void *)this + 4) = v146;
        }
        if (v140) {
          size_t v147 = 8;
        }
        else {
          size_t v147 = 6;
        }
        if (v147 <= *((void *)this + 3) - (void)v146)
        {
          memcpy(v146, v141, v147);
          uint64_t v148 = (_DWORD *)(*((void *)this + 4) + v147);
          *((void *)this + 4) = v148;
        }
        else
        {
          llvm::raw_ostream::write(this, v141, v147);
          uint64_t v148 = (_DWORD *)*((void *)this + 4);
        }
        if (*((void *)this + 3) - (void)v148 > 6uLL)
        {
          *(_DWORD *)((char *)v148 + 3) = 1952805734;
          *uint64_t v148 = 1717989152;
          unsigned int v149 = (unsigned char *)(*((void *)this + 4) + 7);
          *((void *)this + 4) = v149;
        }
        else
        {
          llvm::raw_ostream::write(this, " offset", 7uLL);
          unsigned int v149 = (unsigned char *)*((void *)this + 4);
        }
        __int16 v150 = (unsigned char *)*((void *)this + 3);
LABEL_361:
        if (v150 != v149)
        {
          *unsigned int v149 = 62;
          goto LABEL_407;
        }
LABEL_362:
        unsigned int v52 = ">";
        int v53 = this;
        size_t v54 = 1;
        goto LABEL_363;
      case 0x137:
        uint64_t v83 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v83)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *uint64_t v83 = 60;
          ++*((void *)this + 4);
        }
        sub_1CCFE9D54(this, *(uint64_t **)(a1 + 96), a3);
        LOWORD(v77) = *(_WORD *)(a1 + 26);
        if ((v77 & 0x400) == 0) {
          goto LABEL_246;
        }
        uint64_t v84 = *((void *)this + 4);
        if ((unint64_t)(*((void *)this + 3) - v84) <= 0xA)
        {
          uint64_t v85 = ", trunc to ";
          uint64_t v86 = this;
          size_t v87 = 11;
          goto LABEL_236;
        }
        *(_DWORD *)(v84 + 7) = 544175136;
        *(void *)uint64_t v84 = *(void *)", trunc to ";
        uint64_t v224 = *((void *)this + 4) + 11;
        goto LABEL_506;
      default:
        goto LABEL_444;
    }
  }
  if (v18 == 254)
  {
    unsigned int v70 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v70)
    {
      llvm::raw_ostream::write(this, "<", 1uLL);
    }
    else
    {
      *unsigned int v70 = 60;
      ++*((void *)this + 4);
    }
    sub_1CCFE9D54(this, *(uint64_t **)(a1 + 96), a3);
    unint64_t v71 = *(unsigned __int16 *)(a1 + 26);
    if ((v71 & 0x400) == 0) {
      goto LABEL_320;
    }
    uint64_t v72 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v72) <= 0xA)
    {
      int v73 = ", trunc to ";
      unsigned __int16 v74 = this;
      size_t v75 = 11;
LABEL_310:
      llvm::raw_ostream::write(v74, v73, v75);
      goto LABEL_311;
    }
    *(_DWORD *)(v72 + 7) = 544175136;
    *(void *)uint64_t v72 = *(void *)", trunc to ";
    uint64_t v225 = *((void *)this + 4) + 11;
LABEL_504:
    *((void *)this + 4) = v225;
LABEL_311:
    *(_OWORD *)unint64_t v238 = *(_OWORD *)(a1 + 80);
    llvm::EVT::getEVTString((llvm::EVT *)v238, (uint64_t)&__p);
    if (v240 >= 0) {
      uint64_t v163 = (const char *)&__p;
    }
    else {
      uint64_t v163 = (const char *)__p;
    }
    if (v240 >= 0) {
      size_t v164 = HIBYTE(v240) & 0x7F;
    }
    else {
      size_t v164 = v240;
    }
    llvm::raw_ostream::write(this, v163, v164);
    if (SHIBYTE(v240) < 0) {
      operator delete(__p);
    }
    unint64_t v71 = *(unsigned __int16 *)(a1 + 26);
LABEL_320:
    uint64_t v165 = ((v71 >> 7) & 7) - 1;
    if (v165 > 3) {
      uint64_t v166 = "";
    }
    else {
      uint64_t v166 = off_1E684F9D8[v165];
    }
    uint64_t v167 = (_WORD *)*((void *)this + 4);
    if (*v166)
    {
      if (*((void *)this + 3) - (void)v167 > 1uLL)
      {
        *uint64_t v167 = 8236;
        uint64_t v167 = (_WORD *)(*((void *)this + 4) + 2);
        *((void *)this + 4) = v167;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
        uint64_t v167 = (_WORD *)*((void *)this + 4);
      }
      size_t v168 = strlen(v166);
      size_t v169 = v168;
      if (v168 <= *((void *)this + 3) - (void)v167)
      {
        if (v168)
        {
          memcpy(v167, v166, v168);
          uint64_t v167 = (_WORD *)(*((void *)this + 4) + v169);
          *((void *)this + 4) = v167;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v166, v168);
        uint64_t v167 = (_WORD *)*((void *)this + 4);
      }
    }
    if (*((_WORD **)this + 3) != v167)
    {
      *(unsigned char *)uint64_t v167 = 62;
      goto LABEL_407;
    }
    goto LABEL_362;
  }
  if (v18 == 277 || v18 == 278)
  {
    uint64_t v33 = *((void *)this + 3);
    uint64_t v32 = *((void *)this + 4);
    if (!*(void *)(a1 + 80))
    {
      if ((unint64_t)(v33 - v32) > 5)
      {
        *(_WORD *)(v32 + 4) = 15980;
        *(_DWORD *)uint64_t v32 = 1819635260;
        uint64_t v208 = *((void *)this + 4) + 6;
        goto LABEL_408;
      }
      unsigned int v52 = "<null>";
      int v53 = this;
      size_t v54 = 6;
LABEL_363:
      llvm::raw_ostream::write(v53, v52, v54);
      goto LABEL_364;
    }
    if (v33 == v32)
    {
      unsigned int v34 = "<";
LABEL_358:
      llvm::raw_ostream::write(this, v34, 1uLL);
    }
    else
    {
      *(unsigned char *)uint64_t v32 = 60;
LABEL_502:
      ++*((void *)this + 4);
    }
LABEL_359:
    llvm::write_hex(this, *(void *)(a1 + 80), 3, 0, 0);
    goto LABEL_360;
  }
LABEL_444:
  if (sub_1CD3ED460(a1))
  {
    uint64_t v219 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v219)
    {
      llvm::raw_ostream::write(this, "<", 1uLL);
    }
    else
    {
      *uint64_t v219 = 60;
      ++*((void *)this + 4);
    }
    sub_1CCFE9D54(this, *(uint64_t **)(a1 + 96), a3);
LABEL_360:
    __int16 v150 = (unsigned char *)*((void *)this + 3);
    unsigned int v149 = (unsigned char *)*((void *)this + 4);
    goto LABEL_361;
  }
  int v220 = *(unsigned __int16 *)(a1 + 24);
  if (v220 == 217)
  {
    unsigned int v223 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v223 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 91);
    }
    else
    {
      *((void *)this + 4) = v223 + 1;
      *unsigned int v223 = 91;
    }
    sub_1CD098D14(this, *(unsigned int *)(a1 + 76), 0, 0, 0);
    unint64_t v227 = (_DWORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v227 > 3uLL)
    {
      *unint64_t v227 = 540945696;
      *((void *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " -> ", 4uLL);
    }
    unint64_t v211 = *(unsigned int *)(a1 + 80);
    uint64_t v210 = this;
LABEL_422:
    sub_1CD098D14(v210, v211, 0, 0, 0);
    uint64_t v170 = (char *)*((void *)this + 4);
    if ((unint64_t)v170 < *((void *)this + 3))
    {
      *((void *)this + 4) = v170 + 1;
      char v171 = 93;
      goto LABEL_424;
    }
    __int16 v172 = this;
    char v173 = 93;
LABEL_426:
    llvm::raw_ostream::write(v172, v173);
    goto LABEL_364;
  }
  if (v220 == 43 || v220 == 19)
  {
    int64_t v159 = *(void *)(a1 + 88);
    unsigned int v235 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v235)
    {
      llvm::raw_ostream::write(this, "<", 1uLL);
    }
    else
    {
      *unsigned int v235 = 60;
      ++*((void *)this + 4);
    }
    llvm::Value::printAsOperand(*(llvm::Value **)(*(void *)(a1 + 80) - 64), this, 0, 0);
    unint64_t v236 = (_WORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v236 > 1uLL)
    {
      _WORD *v236 = 8236;
      *((void *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, ", ", 2uLL);
    }
    llvm::Value::printAsOperand(*(llvm::Value **)(*(void *)(a1 + 80) - 32), this, 0, 0);
    unsigned int v237 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v237)
    {
      llvm::raw_ostream::write(this, ">", 1uLL);
      int64_t v175 = (unsigned char *)*((void *)this + 4);
    }
    else
    {
      *unsigned int v237 = 62;
      int64_t v175 = (unsigned char *)(*((void *)this + 4) + 1);
      *((void *)this + 4) = v175;
    }
    __int16 v176 = (unsigned char *)*((void *)this + 3);
LABEL_343:
    if (v159 < 1)
    {
      if (v176 == v175)
      {
        char v177 = " ";
        int v178 = this;
        size_t v179 = 1;
        goto LABEL_416;
      }
      *int64_t v175 = 32;
      uint64_t v234 = *((void *)this + 4) + 1;
    }
    else
    {
      if ((unint64_t)(v176 - v175) <= 2)
      {
        char v177 = " + ";
        int v178 = this;
        size_t v179 = 3;
LABEL_416:
        llvm::raw_ostream::write(v178, v177, v179);
        goto LABEL_417;
      }
      v175[2] = 32;
      *(_WORD *)int64_t v175 = 11040;
      uint64_t v234 = *((void *)this + 4) + 3;
    }
    *((void *)this + 4) = v234;
LABEL_417:
    llvm::raw_ostream::operator<<(this, v159);
LABEL_418:
    unint64_t v60 = *(unsigned int *)(a1 + 96);
    if (!v60) {
      goto LABEL_364;
    }
LABEL_419:
    uint64_t v209 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v209) > 4)
    {
      *(unsigned char *)(v209 + 4) = 61;
      *(_DWORD *)uint64_t v209 = 1179933472;
      *((void *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " [TF=", 5uLL);
    }
    uint64_t v210 = this;
    unint64_t v211 = v60;
    goto LABEL_422;
  }
  if ((v220 & 0xFFFE) != 0x138)
  {
    if (v220 != 5) {
      goto LABEL_364;
    }
    uint64_t v226 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v226 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 60);
    }
    else
    {
      *((void *)this + 4) = v226 + 1;
      unsigned char *v226 = 60;
    }
    sub_1CD098D14(this, 1 << *(unsigned char *)(a1 + 76), 0, 0, 0);
LABEL_333:
    uint64_t v170 = (char *)*((void *)this + 4);
    if ((unint64_t)v170 < *((void *)this + 3))
    {
      *((void *)this + 4) = v170 + 1;
      char v171 = 62;
LABEL_424:
      *uint64_t v170 = v171;
      goto LABEL_364;
    }
    __int16 v172 = this;
    char v173 = 62;
    goto LABEL_426;
  }
  if ((*(void *)(a1 + 88) & 0x8000000000000000) == 0)
  {
    int v221 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v221)
    {
      llvm::raw_ostream::write(this, "<", 1uLL);
    }
    else
    {
      *int v221 = 60;
      ++*((void *)this + 4);
    }
    llvm::raw_ostream::operator<<(this, *(void *)(a1 + 88));
    uint64_t v222 = (_DWORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v222 > 3uLL)
    {
      *uint64_t v222 = 544175136;
      *((void *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, " to ", 4uLL);
    }
    llvm::raw_ostream::operator<<(this, *(void *)(a1 + 80) + *(void *)(a1 + 88));
    goto LABEL_360;
  }
LABEL_364:
  if (!byte_1EBCFA408) {
    return result;
  }
  unint64_t v185 = *(unsigned int *)(a1 + 60);
  if (v185)
  {
    uint64_t v186 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v186) > 5)
    {
      *(_WORD *)(v186 + 4) = 15684;
      *(_DWORD *)uint64_t v186 = 1380932384;
      *((void *)this + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(this, " [ORD=", 6uLL);
    }
    sub_1CD098D14(this, v185, 0, 0, 0);
    long long v187 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v187 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 93);
    }
    else
    {
      *((void *)this + 4) = v187 + 1;
      unsigned char *v187 = 93;
    }
  }
  if (*(_DWORD *)(a1 + 28) != -1)
  {
    uint64_t v188 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v188) > 4)
    {
      *(unsigned char *)(v188 + 4) = 61;
      *(_DWORD *)uint64_t v188 = 1145658144;
      *((void *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " [ID=", 5uLL);
    }
    unint64_t v189 = *(int *)(a1 + 28);
    if ((v189 & 0x80000000) != 0)
    {
      unint64_t v189 = -(uint64_t)v189;
      uint64_t v190 = this;
      int v191 = 1;
    }
    else
    {
      uint64_t v190 = this;
      int v191 = 0;
    }
    sub_1CD098D14(v190, v189, 0, 0, v191);
    unint64_t v192 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v192 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 93);
    }
    else
    {
      *((void *)this + 4) = v192 + 1;
      *unint64_t v192 = 93;
    }
  }
  unsigned int v193 = *(unsigned __int16 *)(a1 + 24);
  if (v193 <= 0x24 && ((1 << v193) & 0x1800001800) != 0)
  {
    if (!a3) {
      goto LABEL_391;
    }
  }
  else
  {
    uint64_t v200 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v200) > 4)
    {
      *(unsigned char *)(v200 + 4) = 58;
      *(_DWORD *)uint64_t v200 = 1142956832;
      *((void *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " # D:", 5uLL);
    }
    sub_1CD098D14(this, ((unint64_t)*(unsigned __int8 *)(a1 + 26) >> 2) & 1, 0, 0, 0);
    if (!a3) {
      goto LABEL_391;
    }
  }
  uint64_t v194 = *(void *)(a3 + 616);
  uint64_t v195 = sub_1CCF9A240(v194 + 688, a1);
  if (*(void *)(v194 + 688) + 40 * *(unsigned int *)(v194 + 704) != v195 && *(_DWORD *)(v195 + 16))
  {
    unint64_t v196 = (_OWORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v196 > 0xFuLL)
    {
      *unint64_t v196 = *(_OWORD *)" [NoOfDbgValues=";
      *((void *)this + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(this, " [NoOfDbgValues=", 0x10uLL);
    }
    uint64_t v197 = *(void *)(a3 + 616);
    uint64_t v198 = sub_1CCF9A240(v197 + 688, a1);
    if (*(void *)(v197 + 688) + 40 * *(unsigned int *)(v197 + 704) == v198) {
      unint64_t v199 = 0;
    }
    else {
      unint64_t v199 = *(unsigned int *)(v198 + 16);
    }
    sub_1CD098D14(this, v199, 0, 0, 0);
    unsigned int v202 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v202 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 93);
    }
    else
    {
      *((void *)this + 4) = v202 + 1;
      unsigned char *v202 = 93;
    }
    uint64_t v203 = *(void *)(a3 + 616);
    uint64_t v204 = sub_1CCF9A240(v203 + 688, a1);
    if (*(void *)(v203 + 688) + 40 * *(unsigned int *)(v203 + 704) != v204)
    {
      uint64_t v205 = *(unsigned int *)(v204 + 16);
      if (v205)
      {
        unint64_t v206 = *(uint64_t **)(v204 + 8);
        uint64_t v207 = 8 * v205;
        do
        {
          if (!*(unsigned char *)(*v206 + 62)) {
            sub_1CD807160(*v206, this);
          }
          ++v206;
          v207 -= 8;
        }
        while (v207);
      }
    }
    return result;
  }
LABEL_391:
  if (*(unsigned char *)(a1 + 26))
  {
    uint64_t v201 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v201) > 0x11)
    {
      *(_WORD *)(v201 + 16) = 23856;
      uint64_t result = *(double *)" [NoOfDbgValues>0]";
      *(_OWORD *)uint64_t v201 = *(_OWORD *)" [NoOfDbgValues>0]";
      *((void *)this + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(this, " [NoOfDbgValues>0]", 0x12uLL);
    }
  }
  return result;
}

void sub_1CCFE9D54(llvm::raw_ostream *a1, uint64_t *a2, uint64_t a3)
{
  if (!a3) {
    llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)v11);
  }
  unint64_t v6 = *(const llvm::Function ***)(a3 + 40);
  uint64_t v7 = *((void *)*v6 + 5);
  uint64_t v8 = v6[7];
  uint64_t v9 = (*(uint64_t (**)(const llvm::Function *))(*(void *)v6[2] + 104))(v6[2]);
  uint64_t v10 = *(uint64_t **)(a3 + 56);

  sub_1CCFEA74C(a1, a2, v6, v7, v8, v9, v10);
}

BOOL sub_1CCFE9E54(uint64_t a1, uint64_t a2)
{
  if (!a2 || !byte_1EBCFA408)
  {
    if (*(_WORD *)(a1 + 24) == 1) {
      return 0;
    }
    return *(_WORD *)(a1 + 56) == 0;
  }
  uint64_t v3 = *(void *)(a2 + 616);
  uint64_t v4 = sub_1CCF9A240(v3 + 688, a1);
  BOOL v5 = *(void *)(v3 + 688) + 40 * *(unsigned int *)(v3 + 704) != v4 && *(_DWORD *)(v4 + 16) != 0;
  BOOL result = 0;
  if (!v5 && *(_WORD *)(a1 + 24) != 1) {
    return *(_WORD *)(a1 + 56) == 0;
  }
  return result;
}

llvm *sub_1CCFE9EF4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  BOOL v5 = (llvm *)a1;
  if (*(_WORD *)(a1 + 56))
  {
    unint64_t v6 = *(uint64_t **)(a1 + 32);
    uint64_t v7 = 40 * *(unsigned __int16 *)(a1 + 56);
    do
    {
      a1 = sub_1CCFE9E54(*v6, a3);
      if ((a1 & 1) == 0)
      {
        a1 = *v6;
        uint64_t v8 = *(void *)(*v6 + 48);
        if (v8)
        {
          if (!*(void *)(v8 + 32)) {
            a1 = sub_1CCFE9EF4();
          }
        }
      }
      v6 += 5;
      v7 -= 40;
    }
    while (v7);
  }
  uint64_t v9 = llvm::dbgs((llvm *)a1);
  llvm::raw_ostream::indent(v9, a2);

  return sub_1CD806F00(v5, a3);
}

void sub_1CCFE9FA4(llvm::raw_ostream *a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 8);
  uint64_t v11 = *(unsigned int *)(a5 + 20);
  if (v10 == *(void *)a5)
  {
    if (v11)
    {
      unint64_t v12 = 0;
      uint64_t v13 = 8 * v11;
      uint64_t v14 = *(unint64_t **)(a5 + 8);
      do
      {
        if (*v14 == a2) {
          return;
        }
        if (*v14 == -2) {
          unint64_t v12 = v14;
        }
        ++v14;
        v13 -= 8;
      }
      while (v13);
      if (v12)
      {
        unint64_t *v12 = a2;
        --*(_DWORD *)(a5 + 24);
        goto LABEL_33;
      }
    }
    unsigned int v15 = *(_DWORD *)(a5 + 16);
    if (v11 < v15)
    {
      *(_DWORD *)(a5 + 20) = v11 + 1;
      *(void *)(v10 + 8 * v11) = a2;
LABEL_33:
      llvm::raw_ostream::indent(a1, a3);
      sub_1CD807730(a2, a1, a4);
      uint64_t v25 = *(unsigned __int16 *)(a2 + 56);
      if (*(_WORD *)(a2 + 56))
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          unsigned int v27 = (unsigned char *)*((void *)a1 + 4);
          if (i)
          {
            if (*((unsigned char **)a1 + 3) == v27)
            {
              llvm::raw_ostream::write(a1, ",", 1uLL);
              unsigned int v27 = (unsigned char *)*((void *)a1 + 4);
            }
            else
            {
              *unsigned int v27 = 44;
              unsigned int v27 = (unsigned char *)(*((void *)a1 + 4) + 1);
              *((void *)a1 + 4) = v27;
            }
          }
          if (*((unsigned char **)a1 + 3) == v27)
          {
            llvm::raw_ostream::write(a1, " ", 1uLL);
          }
          else
          {
            *unsigned int v27 = 32;
            ++*((void *)a1 + 4);
          }
          unsigned __int16 v28 = (unint64_t *)(*(void *)(a2 + 32) + 40 * i);
          unint64_t v29 = *v28;
          if (sub_1CCFEA500(a1, a4, *v28, v28[1]))
          {
            uint64_t v30 = *(void *)(a5 + 8);
            uint64_t v31 = *(unsigned int *)(a5 + 20);
            if (v30 != *(void *)a5)
            {
              unsigned int v35 = *(_DWORD *)(a5 + 16);
LABEL_52:
              if (3 * v35 <= 4 * ((int)v31 - *(_DWORD *)(a5 + 24)))
              {
                if (v35 >= 0x40) {
                  v35 *= 2;
                }
                else {
                  unsigned int v35 = 128;
                }
              }
              else if (v35 - v31 >= v35 >> 3)
              {
                goto LABEL_54;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a5, v35);
              unsigned int v35 = *(_DWORD *)(a5 + 16);
              uint64_t v30 = *(void *)(a5 + 8);
LABEL_54:
              unsigned int v36 = v35 - 1;
              unsigned int v37 = (v35 - 1) & ((v29 >> 4) ^ (v29 >> 9));
              int v38 = (unint64_t *)(v30 + 8 * v37);
              unint64_t v39 = *v38;
              if (*v38 == -1)
              {
                unint64_t v40 = 0;
LABEL_66:
                if (v40) {
                  uint64_t v44 = v40;
                }
                else {
                  uint64_t v44 = v38;
                }
                if (*v44 != v29)
                {
                  if (*v44 == -2) {
                    --*(_DWORD *)(a5 + 24);
                  }
                  else {
                    ++*(_DWORD *)(a5 + 20);
                  }
                  unint64_t *v44 = v29;
                }
              }
              else
              {
                unint64_t v40 = 0;
                int v41 = 1;
                while (v39 != v29)
                {
                  if (v40) {
                    BOOL v42 = 0;
                  }
                  else {
                    BOOL v42 = v39 == -2;
                  }
                  if (v42) {
                    unint64_t v40 = v38;
                  }
                  unsigned int v43 = v37 + v41++;
                  unsigned int v37 = v43 & v36;
                  int v38 = (unint64_t *)(v30 + 8 * (v43 & v36));
                  unint64_t v39 = *v38;
                  if (*v38 == -1) {
                    goto LABEL_66;
                  }
                }
              }
              continue;
            }
            if (v31)
            {
              uint64_t v32 = 0;
              uint64_t v33 = 8 * v31;
              unsigned int v34 = *(unint64_t **)(a5 + 8);
              while (*v34 != v29)
              {
                if (*v34 == -2) {
                  uint64_t v32 = v34;
                }
                ++v34;
                v33 -= 8;
                if (!v33)
                {
                  if (!v32) {
                    goto LABEL_49;
                  }
                  *uint64_t v32 = v29;
                  --*(_DWORD *)(a5 + 24);
                  goto LABEL_73;
                }
              }
              continue;
            }
LABEL_49:
            unsigned int v35 = *(_DWORD *)(a5 + 16);
            if (v31 >= v35) {
              goto LABEL_52;
            }
            *(_DWORD *)(a5 + 20) = v31 + 1;
            *(void *)(v30 + 8 * v31) = v29;
          }
LABEL_73:
          ;
        }
      }
      uint64_t v45 = (unsigned char *)*((void *)a1 + 4);
      if (*((unsigned char **)a1 + 3) == v45)
      {
        llvm::raw_ostream::write(a1, "\n", 1uLL);
      }
      else
      {
        *uint64_t v45 = 10;
        ++*((void *)a1 + 4);
      }
      uint64_t v46 = *(unsigned __int16 *)(a2 + 56);
      if (*(_WORD *)(a2 + 56))
      {
        uint64_t v47 = *(uint64_t **)(a2 + 32);
        uint64_t v48 = 40 * v46;
        do
        {
          uint64_t v49 = *v47;
          v47 += 5;
          sub_1CCFE9FA4(a1, v49, a3 + 2, a4, a5);
          v48 -= 40;
        }
        while (v48);
      }
      return;
    }
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(a5 + 16);
  }
  if (3 * v15 <= 4 * ((int)v11 - *(_DWORD *)(a5 + 24)))
  {
    if (v15 >= 0x40) {
      v15 *= 2;
    }
    else {
      unsigned int v15 = 128;
    }
  }
  else if (v15 - v11 >= v15 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a5, v15);
  unsigned int v15 = *(_DWORD *)(a5 + 16);
  uint64_t v10 = *(void *)(a5 + 8);
LABEL_14:
  unsigned int v16 = v15 - 1;
  unsigned int v17 = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v18 = (unint64_t *)(v10 + 8 * v17);
  unint64_t v19 = *v18;
  if (*v18 != -1)
  {
    uint64_t v20 = 0;
    int v21 = 1;
    while (v19 != a2)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v19 == -2;
      }
      if (v22) {
        uint64_t v20 = v18;
      }
      unsigned int v23 = v17 + v21++;
      unsigned int v17 = v23 & v16;
      unsigned int v18 = (unint64_t *)(v10 + 8 * (v23 & v16));
      unint64_t v19 = *v18;
      if (*v18 == -1) {
        goto LABEL_26;
      }
    }
    return;
  }
  uint64_t v20 = 0;
LABEL_26:
  if (v20) {
    int v24 = v20;
  }
  else {
    int v24 = v18;
  }
  if (*v24 != a2)
  {
    if (*v24 == -2) {
      --*(_DWORD *)(a5 + 24);
    }
    else {
      ++*(_DWORD *)(a5 + 20);
    }
    *int v24 = a2;
    goto LABEL_33;
  }
}

void sub_1CCFEA40C(llvm::raw_ostream *a1, unint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a4)
  {
    llvm::raw_ostream::indent(a1, a5);
    sub_1CD806F78(a2, a1, a3);
    uint64_t v10 = *(unsigned __int16 *)(a2 + 56);
    if (*(_WORD *)(a2 + 56))
    {
      uint64_t v11 = *(unsigned int **)(a2 + 32);
      uint64_t v12 = (a4 - 1);
      uint64_t v13 = a5 + 2;
      uint64_t v14 = 40 * v10;
      do
      {
        if (*(unsigned char *)(*(void *)(*(void *)v11 + 40) + 16 * v11[2]) != 1)
        {
          unsigned int v15 = (unsigned char *)*((void *)a1 + 4);
          if ((unint64_t)v15 >= *((void *)a1 + 3))
          {
            llvm::raw_ostream::write(a1, 10);
          }
          else
          {
            *((void *)a1 + 4) = v15 + 1;
            *unsigned int v15 = 10;
          }
          sub_1CCFEA40C(a1, *(void *)v11, a3, v12, v13);
        }
        v11 += 10;
        v14 -= 40;
      }
      while (v14);
    }
  }
}

uint64_t sub_1CCFEA500(llvm::raw_ostream *this, uint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    uint64_t v8 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v8) > 5)
    {
      uint64_t result = 0;
      *(_WORD *)(v8 + 4) = 15980;
      *(_DWORD *)uint64_t v8 = 1819635260;
      *((void *)this + 4) += 6;
      return result;
    }
    llvm::raw_ostream::write(this, "<null>", 6uLL);
    return 0;
  }
  if (!sub_1CCFE9E54(a3, a2))
  {
    p_p = &__p;
    __p = &unk_1F2642260;
    size_t v16 = a3;
    llvm::write_hex(this, a3, 3, 0, 0);
    if (p_p == &__p)
    {
      (*((void (**)(void **))__p + 4))(&__p);
    }
    else if (p_p)
    {
      (*((void (**)(void))*p_p + 5))();
    }
    if (a4)
    {
      uint64_t v9 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v9 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 58);
      }
      else
      {
        *((void *)this + 4) = v9 + 1;
        unsigned char *v9 = 58;
      }
      sub_1CD098D14(this, a4, 0, 0, 0);
    }
    return 0;
  }
  sub_1CCFE437C(a3, a2, &__p);
  if (v17 >= 0) {
    uint64_t v11 = (const char *)&__p;
  }
  else {
    uint64_t v11 = (const char *)__p;
  }
  if (v17 >= 0) {
    size_t v12 = v17 & 0x7F;
  }
  else {
    size_t v12 = v16;
  }
  llvm::raw_ostream::write(this, v11, v12);
  uint64_t v13 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v13 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 58);
  }
  else
  {
    *((void *)this + 4) = v13 + 1;
    *uint64_t v13 = 58;
  }
  if (v17 < 0) {
    operator delete(__p);
  }
  sub_1CD807068(a3, this);
  sub_1CCFE7764(a3, this, a2, v14);
  return 1;
}

void sub_1CCFEA74C(llvm::raw_ostream *a1, uint64_t *a2, const llvm::Function **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  v13[0] = (const llvm::Function *)&unk_1F26160C0;
  v13[1] = 0;
  BOOL v14 = a4 != 0;
  char v15 = 1;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = a4;
  if (a3) {
    llvm::ModuleSlotTracker::incorporateFunction(v13, *a3);
  }
  v12[0] = v13;
  v12[1] = 0;
  llvm::MachineMemOperand::print(a2, a1, (llvm::ModuleSlotTracker *)v13, (uint64_t)v12, a7, a5, a6);
  if (v12[0] != v13) {
    free(v12[0]);
  }
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v13);
}

void sub_1CCFEA860()
{
}

void *sub_1CCFEA874(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2642260;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCFEA8BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2642260;
  a2[1] = v2;
  return result;
}

llvm::raw_ostream *sub_1CCFEA8E8(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::write_hex(a2, *(void *)(a1 + 8), 3, 0, 0);
}

uint64_t sub_1CCFEA904()
{
  int v2 = 1;
  *(void *)&long long v1 = "Display more information when dumping selection DAG nodes.";
  *((void *)&v1 + 1) = 58;
  sub_1CD4C1500((uint64_t)&unk_1EBCFA388, "dag-dump-verbose", &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFA388, &dword_1CB82C000);
}

BOOL sub_1CCFEA99C(uint64_t a1, const llvm::Function **this)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if ((*(void *)this[45] & 0x80) == 0)
  {
    uint64_t v4 = *this;
    *(void *)(a1 + 280) = this;
    BOOL v5 = llvm::MachineFunction::useDebugInstrRef((llvm::MachineFunction *)this);
    *(unsigned char *)(a1 + 424) = v5;
    *(unsigned char *)(*(void *)(a1 + 296) + 650) = v5;
    llvm::TargetMachine::resetTargetOptions(*(llvm::TargetMachine **)(a1 + 248), v4);
    int v6 = *(_DWORD *)(a1 + 328);
    if (v6)
    {
      if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, (llvm::LLVMContextImpl ****)v4)) {
        int v7 = 0;
      }
      else {
        int v7 = v6;
      }
    }
    else
    {
      int v7 = 0;
    }
    sub_1CD809C64((uint64_t)v16, a1, v7);
    *(void *)(a1 + 336) = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 280) + 16) + 104))(*(void *)(*(void *)(a1 + 280) + 16));
    *(void *)(a1 + 344) = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 280) + 16) + 120))(*(void *)(*(void *)(a1 + 280) + 16));
    *(void *)(a1 + 288) = *(void *)(*(void *)(a1 + 280) + 40);
    uint64_t v8 = *(uint64_t **)(a1 + 8);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (v9 == v10)
    {
LABEL_11:
      uint64_t v11 = 0;
    }
    else
    {
      while (*(char **)v9 != llvm::TargetLibraryInfoWrapperPass::ID)
      {
        v9 += 16;
        if (v9 == v10) {
          goto LABEL_11;
        }
      }
      uint64_t v11 = *(void *)(v9 + 8);
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v11 + 96))(v11, llvm::TargetLibraryInfoWrapperPass::ID);
    v16[2] = 0;
    v16[3] = 0;
    int v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = 0;
    uint64_t v13 = v12 + 32;
    if (!*(unsigned char *)(v12 + 232))
    {
      uint64_t v14 = *((void *)v4 + 5) + 216;
      __int16 v25 = 260;
      v24[0] = v14;
      llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v24);
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      int v37 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      *(void *)&long long v15 = -1;
      *((void *)&v15 + 1) = -1;
      *(_OWORD *)unint64_t __src = v15;
      long long v29 = v15;
      long long v30 = v15;
      long long v31 = v15;
      long long v32 = v15;
      long long v33 = v15;
      *(_OWORD *)unsigned int v34 = v15;
      *(void *)&v34[13] = -1;
      sub_1CC153974((uint64_t)__src, (int *)__p);
      sub_1CD4D04B8(v13, (uint64_t)__src);
      sub_1CD4CFA4C((uint64_t *)__src);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1CC1569E8(__src, v13);
  }
  return (*(void *)this[45] & 0x80) == 0;
}

void sub_1CCFEC44C(uint64_t a1, llvm::Function *a2)
{
  uint64_t v3 = a1;
  v580[34] = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 352) = 0;
  if ((*(_WORD *)(*(void *)(a1 + 248) + 1020) & 0x800) != 0)
  {
    uint64_t v5 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 344) + 1992))(*(void *)(a1 + 344), *(void *)(a1 + 264), *(void *)(a1 + 256));
    uint64_t v4 = (uint64_t *)v5;
    if (v5) {
      *(unsigned char *)(v5 + 129) = *(unsigned char *)(v3 + 424);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)&long long v575 = a2;
  unsigned int v563 = 0;
  uint64_t v564 = 0;
  int v562 = 0;
  sub_1CBF8C36C((char **)&v562, (uint64_t)&v575);
  uint64_t v6 = *(void *)(v3 + 264);
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t v8 = (void **)*((void *)a2 + 10);
  uint64_t v9 = v8 - 3;
  if (!v8) {
    uint64_t v9 = 0;
  }
  *(void *)&long long v575 = v9;
  int v10 = *(_DWORD *)(v6 + 72);
  if (v10)
  {
    int v11 = v10 - 1;
    unsigned int v12 = ((v9 >> 4) ^ (v9 >> 9)) & (v10 - 1);
    uint64_t v13 = (void *)(v7 + 16 * v12);
    uint64_t v14 = (void **)*v13;
    if (v9 == (void **)*v13) {
      goto LABEL_17;
    }
    long long v15 = 0;
    int v16 = 1;
    while (v14 != (void **)-4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == (void **)-8192;
      }
      if (v17) {
        long long v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & v11;
      uint64_t v13 = (void *)(v7 + 16 * (v18 & v11));
      uint64_t v14 = (void **)*v13;
      if (v9 == (void **)*v13) {
        goto LABEL_17;
      }
    }
    if (v15) {
      unsigned int v531 = v15;
    }
    else {
      unsigned int v531 = v13;
    }
  }
  else
  {
    unsigned int v531 = 0;
  }
  uint64_t v13 = sub_1CB883BA0((_DWORD *)(v6 + 56), (uint64_t)&v575, &v575, v531);
  *uint64_t v13 = v575;
  v13[1] = 0;
  uint64_t v6 = *(void *)(v3 + 264);
LABEL_17:
  *(void *)(v6 + 640) = v13[1];
  *(void *)(*(void *)(v3 + 264) + 648) = *(void *)(*(void *)(*(void *)(v3 + 264) + 640) + 56);
  *(void *)(*(void *)(v3 + 296) + 80) = *(void *)(v3 + 264);
  int v552 = (uint64_t *)v3;
  if (!v4)
  {
    sub_1CCFC2F18(v3, a2);
    goto LABEL_61;
  }
  sub_1CD788FD8(v4);
  if ((sub_1CD789028((uint64_t)v4) & 1) == 0)
  {
    *(unsigned char *)(v3 + 352) = 1;
    if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
      goto LABEL_35;
    }
    uint64_t v19 = ***(void ***)a2;
    *(void *)&long long v575 = a2;
    int v20 = *(_DWORD *)(v19 + 2496);
    if (v20)
    {
      uint64_t v21 = *(void *)(v19 + 2480);
      int v22 = v20 - 1;
      unsigned int v23 = v22 & ((a2 >> 4) ^ (a2 >> 9));
      int v24 = (llvm::Function **)(v21 + 40 * v23);
      __int16 v25 = *v24;
      if (*v24 == a2) {
        goto LABEL_31;
      }
      unint64_t v26 = 0;
      int v27 = 1;
      while (v25 != (llvm::Function *)-4096)
      {
        if (v26) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v25 == (llvm::Function *)-8192;
        }
        if (v28) {
          unint64_t v26 = v24;
        }
        unsigned int v29 = v23 + v27++;
        unsigned int v23 = v29 & v22;
        int v24 = (llvm::Function **)(v21 + 40 * v23);
        __int16 v25 = *v24;
        if (*v24 == a2) {
          goto LABEL_31;
        }
      }
      if (v26) {
        unint64_t v534 = v26;
      }
      else {
        unint64_t v534 = v24;
      }
    }
    else
    {
      unint64_t v534 = 0;
    }
    int v24 = (llvm::Function **)sub_1CC609054(v19 + 2480, (uint64_t)&v575, (uint64_t *)&v575, v534);
    uint64_t v535 = (llvm::Function *)v575;
    v24[3] = 0;
    uint64_t v24[4] = 0;
    *int v24 = v535;
    v24[1] = (llvm::Function *)(v24 + 3);
    v24[2] = (llvm::Function *)0x100000000;
LABEL_31:
    uint64_t v30 = *((unsigned int *)v24 + 4);
    if (v30)
    {
      long long v31 = (void *)((char *)v24[1] + 8);
      uint64_t v32 = 16 * v30;
      while (*((_DWORD *)v31 - 2))
      {
        v31 += 2;
        v32 -= 16;
        if (!v32) {
          goto LABEL_35;
        }
      }
      uint64_t v532 = *v31;
      long long v567 = 0uLL;
      if (v532)
      {
        uint64_t v533 = v532;
        if (*(unsigned char *)v532 != 15) {
          uint64_t v533 = *(void *)(v532 - 8 * *(unsigned int *)(v532 + 8));
        }
        *(void *)&long long v567 = v533;
        DWORD2(v567) = *(_DWORD *)(v532 + 28);
      }
      goto LABEL_36;
    }
LABEL_35:
    long long v567 = 0uLL;
LABEL_36:
    long long v33 = (void **)*((void *)a2 + 10);
    if (v33) {
      uint64_t v34 = (uint64_t)(v33 - 3);
    }
    else {
      uint64_t v34 = 0;
    }
    llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&v575, (uint64_t)"sdagisel", (uint64_t)"FastISelFailure", 15, &v567, v34);
    *(void *)&long long v567 = "FastISel didn't lower all arguments: ";
    *((void *)&v567 + 1) = 37;
    sub_1CC59ADEC((uint64_t *)&v578, (uint64_t)&v567);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v558, "Prototype", 9uLL, *(llvm::Type **)a2);
    sub_1CD3D6290((uint64_t)&v575, (long long *)v558);
    if (v561 < 0) {
      operator delete(__p);
    }
    if (v559 < 0) {
      operator delete(v558[0]);
    }
    sub_1CCFEF7BC(**(uint64_t *****)(v3 + 280), *(uint64_t ****)(v3 + 432), (llvm::DiagnosticInfoOptimizationBase *)&v575, dword_1EBCFA4F8 > 1);
    sub_1CCFC2F18(v3, a2);
    uint64_t v35 = *(void *)(v3 + 296);
    *(void *)(v35 + 192) = sub_1CD7D73F8(v552[38]);
    *(_DWORD *)(v35 + 200) = v36;
    uint64_t v3 = (uint64_t)v552;
    sub_1CD7D7144(v552[38]);
    sub_1CD8080E0((uint64_t)v552, v37, v38, v39, v40, v41, v42, v43);
    *(void *)&long long v575 = &unk_1F2616800;
    uint64_t v44 = (char *)v578;
    if (v579)
    {
      unint64_t v45 = (unint64_t)v579 << 6;
      do
      {
        uint64_t v46 = (void **)&v44[v45];
        if (v44[v45 - 17] < 0) {
          operator delete(*(v46 - 5));
        }
        if (*((char *)v46 - 41) < 0) {
          operator delete(*(v46 - 8));
        }
        v45 -= 64;
      }
      while (v45);
      uint64_t v44 = (char *)v578;
      uint64_t v3 = (uint64_t)v552;
    }
    if (v44 != (char *)v580) {
      free(v44);
    }
  }
  uint64_t v47 = *(void *)(v3 + 264);
  uint64_t v48 = *(void **)(*(void *)(v47 + 640) + 56);
  uint64_t v49 = *(void **)(v47 + 648);
  if (v49 == v48)
  {
    v4[17] = 0;
    v4[18] = 0;
  }
  else
  {
    unint64_t v50 = *v49 & 0xFFFFFFFFFFFFFFF8;
    if (!v50 || (*(unsigned char *)v50 & 4) == 0)
    {
      while ((*(_WORD *)(v50 + 44) & 4) != 0)
        unint64_t v50 = *(void *)v50 & 0xFFFFFFFFFFFFFFF8;
    }
    v4[17] = v50;
    v4[18] = v50;
  }
LABEL_61:
  uint64_t v51 = *(void *)(v3 + 272);
  uint64_t v52 = **(void **)(v3 + 304);
  if (v52)
  {
    int v53 = *(unsigned __int8 **)(v52 + 48);
    size_t v557 = v53;
    if (v53) {
      llvm::MetadataTracking::track((uint64_t)&v557, v53, 2);
    }
  }
  else
  {
    size_t v557 = 0;
  }
  int v54 = llvm::SwiftErrorValueTracking::createEntriesInEntryBlock(v51, &v557);
  if (v557)
  {
    int v55 = *v557;
    if ((v55 - 4) > 0x1E)
    {
      if ((v55 - 3) >= 0xFFFFFFFE) {
        int64_t v529 = v557;
      }
      else {
        int64_t v529 = 0;
      }
      if ((v55 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v530 = (unint64_t)(v529 + 8);
LABEL_755:
        *(void *)&long long v575 = &v557;
        sub_1CC5FA668(v530 + 16, &v575);
        goto LABEL_69;
      }
      if (v55 == 3) {
        *((void *)v557 + 1) = 0;
      }
    }
    else if ((v557[1] & 0x7F) == 2 || *((_DWORD *)v557 + 3))
    {
      uint64_t v536 = *((void *)v557 + 2);
      if ((v536 & 4) != 0)
      {
        unint64_t v530 = v536 & 0xFFFFFFFFFFFFFFF8;
        if (v530) {
          goto LABEL_755;
        }
      }
    }
  }
LABEL_69:
  if (v4 && ((v54 ^ 1) & 1) == 0)
  {
    unint64_t v56 = **(void **)(*(void *)(v3 + 264) + 648) & 0xFFFFFFFFFFFFFFF8;
    if (!v56 || (*(unsigned char *)v56 & 4) == 0)
    {
      while ((*(_WORD *)(v56 + 44) & 4) != 0)
        unint64_t v56 = *(void *)v56 & 0xFFFFFFFFFFFFFFF8;
    }
    v4[17] = v56;
    v4[18] = v56;
  }
  unint64_t v546 = v4;
  unint64_t v538 = a2;
  uint64_t v57 = *(void *)(v3 + 264);
  uint64_t v58 = *(void *)v57 + 72;
  uint64_t v59 = *(void *)(*(void *)v57 + 80);
  if (v59 != v58)
  {
    uint64_t v60 = *(void *)(v57 + 8);
    long long v61 = (llvm::DataLayout *)(*(void *)(*(void *)v60 + 40) + 272);
    uint64_t v548 = v60 + 768;
    do
    {
      uint64_t v62 = v59 - 24;
      if (!v59) {
        uint64_t v62 = 0;
      }
      uint64_t v63 = v62 + 40;
      for (uint64_t i = *(void *)(v62 + 48); i != v63; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v65 = i - 24;
        }
        else {
          uint64_t v65 = 0;
        }
        BOOL v66 = sub_1CC1F4FA8(v65);
        if (v66) {
          uint64_t v67 = v65;
        }
        else {
          uint64_t v67 = 0;
        }
        if (i)
        {
          if (v66)
          {
            size_t v68 = *(unsigned __int8 **)(*(void *)(v67 - 32 * (*(_DWORD *)(v67 + 20) & 0x7FFFFFF)) + 24);
            int v69 = *v68;
            if ((v69 - 4) >= 0x1C && (v69 - 33) >= 2)
            {
              if (v69 == 32) {
                size_t v68 = (unsigned __int8 *)**((void **)v68 + 3);
              }
              unsigned int v70 = (uint64_t *)*((void *)v68 + 16);
              if (v70)
              {
                unsigned int v73 = sub_1CB83544C((uint64_t)v61, *v70);
                if (v71 == 1) {
                DWORD2(v575) = v73;
                }
                if (v73 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v575);
                }
                *(void *)&long long v575 = 0;
                unsigned __int16 v74 = (unsigned __int8 *)llvm::Value::stripAndAccumulateConstantOffsets((llvm::GlobalValue *)v70, v61, (llvm::APInt *)&v575, 0, 0, 0, v72);
                int v75 = v74[16];
                if (v74 && v75 == 59)
                {
                  int64_t v553 = v74;
                  *(void *)&long long v567 = 0;
                  if (sub_1CB87DF68(v57 + 176, &v553, &v567)
                    && (void)v567 != *(void *)(v57 + 176) + 16 * *(unsigned int *)(v57 + 192))
                  {
                    int v76 = *(_DWORD *)(v567 + 8);
                    goto LABEL_105;
                  }
                  goto LABEL_113;
                }
                if (v74) {
                  BOOL v81 = v75 == 21;
                }
                else {
                  BOOL v81 = 0;
                }
                if (!v81) {
                  goto LABEL_113;
                }
                int v76 = sub_1CD78C488(v57, (uint64_t)v74);
LABEL_105:
                if (v76 == 0x7FFFFFFF)
                {
LABEL_113:
                  if (DWORD2(v575) >= 0x41)
                  {
                    if ((void)v575) {
                      MEMORY[0x1D25D9CB0](v575, 0x1000C8000313F17);
                    }
                  }
                  continue;
                }
                uint64_t v77 = *(_DWORD *)(v67 + 20) & 0x7FFFFFF;
                uint64_t v78 = -v77;
                uint64_t v79 = *(llvm::DIExpression **)(*(void *)(v67 - 32 * v77 + 64) + 24);
                if (DWORD2(v575) > 0x40)
                {
                  int v82 = 0;
                  int64_t v83 = ((unint64_t)DWORD2(v575) + 63) >> 6;
                  do
                  {
                    BOOL v98 = v83-- < 1;
                    if (v98) {
                      break;
                    }
                    unint64_t v84 = *(void *)(v575 + 8 * v83);
                    v82 += __clz(v84);
                  }
                  while (!v84);
                  unsigned int v85 = DWORD2(v575) | 0xFFFFFFC0;
                  if ((BYTE8(v575) & 0x3F) == 0) {
                    unsigned int v85 = 0;
                  }
                  if (v82 + v85 == DWORD2(v575)) {
                    goto LABEL_125;
                  }
                  uint64_t v80 = *(void *)v575;
                }
                else
                {
                  uint64_t v80 = v575;
                  if (!(void)v575) {
                    goto LABEL_125;
                  }
                }
                uint64_t v79 = llvm::DIExpression::prepend(v79, 0, v80);
                uint64_t v78 = -(uint64_t)(*(_DWORD *)(v67 + 20) & 0x7FFFFFF);
LABEL_125:
                uint64_t v86 = *(unsigned __int8 **)(v67 + 48);
                *(void *)&long long v567 = *(void *)(*(void *)(v67 + 32 * v78 + 32) + 24);
                int64_t v553 = v79;
                LODWORD(v556) = v76;
                unsigned int v565 = v86;
                sub_1CD6168D8(v548, &v567, (uint64_t *)&v553, (int *)&v556, (uint64_t *)&v565);
                goto LABEL_113;
              }
            }
          }
        }
      }
      uint64_t v59 = *(void *)(v59 + 8);
    }
    while (v59 != v58);
  }
  size_t v87 = *(uint64_t **)(v3 + 8);
  uint64_t v88 = *v87;
  uint64_t v89 = v87[1];
  if (v88 == v89)
  {
LABEL_131:
    uint64_t v90 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v88 != &llvm::StackProtector::ID)
    {
      v88 += 16;
      if (v88 == v89) {
        goto LABEL_131;
      }
    }
    uint64_t v90 = *(void *)(v88 + 8);
  }
  unsigned int v543 = (llvm::StackProtector *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v90 + 96))(v90, &llvm::StackProtector::ID);
  BOOL v91 = v563;
  int64_t v545 = (char *)v562;
  if (v563 != v562)
  {
    unsigned int v547 = (unsigned int *)(v3 + 376);
    int64_t v549 = (unsigned int *)(v3 + 380);
    v537 = (void **)(v3 + 360);
    while (1)
    {
      uint64_t v93 = *((void *)v91 - 1);
      v91 -= 8;
      size_t v92 = (void *)v93;
      unsigned int v556 = (void *)v93;
      if (!*(_DWORD *)(v3 + 328)) {
        goto LABEL_240;
      }
      uint64_t v94 = v92[1];
      if (!v94) {
        goto LABEL_192;
      }
      while (1)
      {
        uint64_t v95 = *(void *)(v94 + 24);
        unsigned int v96 = *(unsigned __int8 *)(v95 + 16);
        BOOL v97 = v95 && v96 >= 0x1C;
        BOOL v98 = !v97 || v96 - 29 > 0xA;
        if (!v98) {
          break;
        }
        uint64_t v94 = *(void *)(v94 + 8);
        if (!v94) {
          goto LABEL_192;
        }
      }
      uint64_t v99 = *(void *)(v3 + 264);
      uint64_t v100 = *(void *)(v99 + 688);
      uint64_t v101 = *(void *)(v99 + 680);
      int v102 = (unsigned int *)(v99 + 700);
      unint64_t v103 = (unsigned int *)(v99 + 696);
      int v104 = 1;
LABEL_152:
      uint64_t v105 = *(void *)(v95 + 40);
      if (v100 == v101)
      {
        uint64_t v106 = *v102;
        std::string v107 = (void *)(v100 + 8 * v106);
        if (v106)
        {
          uint64_t v108 = 0;
          uint64_t v109 = 8 * v106;
          while (*(void *)(v100 + v108) != v105)
          {
            v108 += 8;
            if (v109 == v108) {
              goto LABEL_170;
            }
          }
          std::string v107 = (void *)(v100 + v108);
        }
LABEL_170:
        uint64_t v118 = v100;
      }
      else
      {
        uint64_t v110 = *v103;
        int v111 = v110 - 1;
        unsigned int v112 = (v110 - 1) & ((v105 >> 4) ^ (v105 >> 9));
        std::string v107 = (void *)(v100 + 8 * v112);
        uint64_t v113 = *v107;
        if (*v107 == -1)
        {
          uint64_t v114 = 0;
LABEL_172:
          if (v114) {
            std::string v107 = v114;
          }
          if (*v107 != v105) {
            std::string v107 = (void *)(v100 + 8 * v110);
          }
        }
        else
        {
          uint64_t v114 = 0;
          int v115 = 1;
          while (v113 != v105)
          {
            if (v114) {
              BOOL v116 = 0;
            }
            else {
              BOOL v116 = v113 == -2;
            }
            if (v116) {
              uint64_t v114 = v107;
            }
            unsigned int v117 = v112 + v115++;
            unsigned int v112 = v117 & v111;
            std::string v107 = (void *)(v100 + 8 * (v117 & v111));
            uint64_t v113 = *v107;
            if (*v107 == -1) {
              goto LABEL_172;
            }
          }
        }
        uint64_t v118 = v101;
      }
      size_t v119 = v100 == v118 ? v102 : v103;
      uint64_t v120 = (void *)(v100 + 8 * *v119);
      BOOL v17 = v107 == v120;
      BOOL v121 = v107 != v120;
      if (v17) {
        goto LABEL_200;
      }
      v104 &= v121;
      while (1)
      {
        uint64_t v94 = *(void *)(v94 + 8);
        if (!v94) {
          break;
        }
        uint64_t v95 = *(void *)(v94 + 24);
        unsigned int v122 = *(unsigned __int8 *)(v95 + 16);
        if (v95) {
          BOOL v123 = v122 >= 0x1C;
        }
        else {
          BOOL v123 = 0;
        }
        if (v123 && v122 - 29 < 0xB) {
          goto LABEL_152;
        }
      }
      if (!v104)
      {
LABEL_200:
        if ((void *)v92[5] != v92 + 5)
        {
          for (uint64_t j = v92[6]; ; uint64_t j = *(void *)(v129 + 32))
          {
            uint64_t v129 = j - 24;
            uint64_t v130 = j ? j - 24 : 0;
            if (!j || *(unsigned char *)(v130 + 16) != 83) {
              break;
            }
            sub_1CD808B94(*(void *)(v3 + 264), j - 24);
          }
        }
      }
      else
      {
LABEL_192:
        if ((void *)v92[5] != v92 + 5)
        {
          for (uint64_t k = v92[6]; ; uint64_t k = *(void *)(v126 + 32))
          {
            uint64_t v126 = k - 24;
            uint64_t v127 = k ? k - 24 : 0;
            if (!k || *(unsigned char *)(v127 + 16) != 83) {
              break;
            }
            sub_1CCF6EA3C(*(void *)(v3 + 264), k - 24);
          }
        }
      }
      uint64_t v131 = *(void *)(v3 + 264);
      uint64_t v132 = (uint64_t)v556;
      uint64_t v133 = *(void *)(v131 + 688);
      uint64_t v134 = *(unsigned int *)(v131 + 700);
      if (v133 != *(void *)(v131 + 680))
      {
        unsigned int v138 = *(_DWORD *)(v131 + 696);
        goto LABEL_219;
      }
      if (!v134) {
        break;
      }
      uint64_t v135 = 0;
      uint64_t v136 = 8 * v134;
      size_t v137 = *(void **)(v131 + 688);
      while ((void *)*v137 != v556)
      {
        if (*v137 == -2) {
          uint64_t v135 = v137;
        }
        ++v137;
        v136 -= 8;
        if (!v136)
        {
          if (!v135) {
            goto LABEL_216;
          }
          *uint64_t v135 = v556;
          --*(_DWORD *)(v131 + 704);
          break;
        }
      }
LABEL_240:
      uint64_t v148 = v556 + 5;
      for (m = (void *)v556[6]; m != v148; m = (void *)m[1])
      {
        uint64_t v150 = (uint64_t)(m - 3);
        if (m) {
          uint64_t v151 = m - 3;
        }
        else {
          uint64_t v151 = 0;
        }
        if (*((unsigned char *)v151 + 16) != 83) {
          goto LABEL_254;
        }
      }
      uint64_t v150 = 0;
LABEL_254:
      *(void *)(*(void *)(v3 + 264) + 640) = sub_1CD3CE844((_DWORD *)(*(void *)(v3 + 264) + 56), &v556)[1];
      uint64_t v153 = *(void *)(v3 + 264);
      uint64_t v154 = *(void *)(v153 + 640);
      if (!v154) {
        goto LABEL_555;
      }
      *(void *)(v153 + 648) = v154 + 48;
      uint64_t v155 = *(void **)(v3 + 264);
      *(void *)((char *)v155 + 772) = 0;
      uint64_t v156 = (uint64_t)v556;
      for (uint64_t n = v556[6]; ; uint64_t n = *(void *)(n + 8))
      {
        uint64_t v158 = n - 24;
        if (!n) {
          uint64_t v158 = 0;
        }
        if (*(unsigned char *)(v158 + 16) != 83) {
          break;
        }
      }
      unsigned int v159 = *(unsigned __int8 *)(n - 8) - 38;
      BOOL v98 = v159 > 0x38;
      uint64_t v160 = (1 << v159) & 0x100060000000001;
      BOOL v161 = v98 || v160 == 0;
      int v544 = v91;
      if (!v161)
      {
        uint64_t v162 = (void *)v155[80];
        int64_t v553 = v162;
        uint64_t v163 = *v155;
        int v164 = *(_DWORD *)(*v155 + 20);
        if ((v164 & 0x40000000) != 0) {
          uint64_t v165 = *(llvm::Value ***)(v163 - 8);
        }
        else {
          uint64_t v165 = (llvm::Value **)(v163 - 32 * (v164 & 0x7FFFFFF));
        }
        uint64_t v166 = *v165;
        uint64_t v167 = v162[2];
        uint64_t v168 = *(void *)(v3 + 344);
        uint64_t v169 = (*(unsigned __int8 (**)(uint64_t, uint64_t, void))(*(void *)v168 + 32))(v168, *(void *)(**(void **)(*(void *)(v3 + 296) + 40) + 40) + 272, 0);
        uint64_t v170 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v168 + 424))(v168, v169, 0);
        unsigned int v172 = llvm::classifyEHPersonality(v166, v171);
        if (v172 - 7 <= 3)
        {
          for (iuint64_t i = *(void *)(v167 + 48); ; iuint64_t i = *(void *)(ii + 8))
          {
            if (ii == v167 + 40) {
              goto LABEL_336;
            }
            uint64_t v174 = ii - 24;
            uint64_t v175 = ii ? ii - 24 : 0;
            if (*(unsigned char *)(v175 + 16) != 83) {
              break;
            }
          }
          if (*(unsigned char *)(ii - 8) == 80)
          {
            uint64_t v180 = *(void *)(ii - 16);
            if (v180)
            {
              while (1)
              {
                uint64_t v181 = *(void *)(v180 + 24);
                if (*(unsigned char *)(v181 + 16) == 84)
                {
                  uint64_t v182 = *(void *)(v181 - 32);
                  if (v182)
                  {
                    if (!*(unsigned char *)(v182 + 16)
                      && *(void *)(v182 + 24) == *(void *)(v181 + 72)
                      && (*(unsigned char *)(v182 + 33) & 0x20) != 0
                      && (*(_DWORD *)(v182 + 36) & 0xFFFFFFFE) == 0x3E)
                    {
                      break;
                    }
                  }
                }
                uint64_t v180 = *(void *)(v180 + 8);
                if (!v180) {
                  goto LABEL_336;
                }
              }
              unsigned __int16 v469 = (*(uint64_t (**)(void, llvm::Value *))(**(void **)(v3 + 344) + 712))(*(void *)(v3 + 344), v166);
              unsigned __int16 v470 = v469;
              uint64_t v472 = (char *)v162[20];
              unint64_t v471 = v162[21];
              if ((unint64_t)v472 >= v471)
              {
                uint64_t v540 = v170;
                unint64_t v474 = (char *)v162[19];
                uint64_t v475 = (v472 - v474) >> 4;
                unint64_t v476 = v475 + 1;
                if ((unint64_t)(v475 + 1) >> 60) {
                  abort();
                }
                unsigned __int16 v477 = v469;
                uint64_t v478 = v471 - (void)v474;
                if (v478 >> 3 > v476) {
                  unint64_t v476 = v478 >> 3;
                }
                if ((unint64_t)v478 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v479 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v479 = v476;
                }
                if (v479)
                {
                  if (v479 >> 60) {
                    sub_1CB833614();
                  }
                  unsigned int v480 = (char *)operator new(16 * v479);
                }
                else
                {
                  unsigned int v480 = 0;
                }
                unsigned int v481 = &v480[16 * v475];
                *(_WORD *)unsigned int v481 = v477;
                *((void *)v481 + 1) = -1;
                BOOL v482 = v481;
                if (v472 != v474)
                {
                  do
                  {
                    *((_OWORD *)v482 - 1) = *((_OWORD *)v472 - 1);
                    v482 -= 16;
                    v472 -= 16;
                  }
                  while (v472 != v474);
                  uint64_t v472 = (char *)v162[19];
                }
                unsigned int v473 = v481 + 16;
                v162[19] = v482;
                v162[20] = v481 + 16;
                v162[21] = &v480[16 * v479];
                if (v472) {
                  operator delete(v472);
                }
                uint64_t v170 = v540;
                unsigned __int16 v470 = v477;
              }
              else
              {
                *(_WORD *)uint64_t v472 = v469;
                *((void *)v472 + 1) = -1;
                unsigned int v473 = v472 + 16;
              }
              v162[20] = v473;
              int v483 = sub_1CD78C4EC(v552[33], v174, v170);
              int v484 = *(unint64_t **)(v552[33] + 648);
              uint64_t v485 = *(void *)v552[38];
              if (!v485)
              {
                unsigned int v565 = 0;
                goto LABEL_662;
              }
              unint64_t v486 = *(unsigned __int8 **)(v485 + 48);
              unsigned int v565 = v486;
              if (v486)
              {
                llvm::MetadataTracking::track((uint64_t)&v565, v486, 2);
                uint64_t v487 = *(void *)(v552[42] + 8) + 912;
                unint64_t v488 = (llvm::MachineFunction *)v162[4];
                *(void *)&long long v567 = v565;
                if (v565) {
                  llvm::MetadataTracking::track((uint64_t)&v567, v565, 2);
                }
              }
              else
              {
LABEL_662:
                uint64_t v487 = *(void *)(v552[42] + 8) + 912;
                unint64_t v488 = (llvm::MachineFunction *)v162[4];
                *(void *)&long long v567 = 0;
              }
              MachineInstr = llvm::MachineFunction::CreateMachineInstr(v488, v487, (unsigned __int8 **)&v567, 0);
              if ((void)v567)
              {
                int v525 = *(unsigned __int8 *)v567;
                if ((v525 - 4) > 0x1E)
                {
                  if ((v525 - 3) >= 0xFFFFFFFE) {
                    uint64_t v528 = v567;
                  }
                  else {
                    uint64_t v528 = 0;
                  }
                  if ((v525 - 3) < 0xFFFFFFFE)
                  {
                    if (v525 == 3) {
                      *(void *)(v567 + 8) = 0;
                    }
                    goto LABEL_666;
                  }
                  unint64_t v527 = v528 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v567 + 1) & 0x7F) != 2 && !*(_DWORD *)(v567 + 12)) {
                    goto LABEL_666;
                  }
                  uint64_t v526 = *(void *)(v567 + 16);
                  if ((v526 & 4) == 0) {
                    goto LABEL_666;
                  }
                  unint64_t v527 = v526 & 0xFFFFFFFFFFFFFFF8;
                  if (!v527) {
                    goto LABEL_666;
                  }
                }
                *(void *)&long long v575 = &v567;
                sub_1CC5FA668(v527 + 16, &v575);
              }
LABEL_666:
              uint64_t v490 = v162[5];
              *((void *)MachineInstr + 3) = v490;
              uint64_t v491 = *(void *)(v490 + 32);
              uint64_t v492 = *((unsigned int *)MachineInstr + 10);
              if (v492)
              {
                uint64_t v502 = *((void *)MachineInstr + 4);
                uint64_t v503 = *(void *)(v491 + 40);
                uint64_t v504 = 32 * v492;
                do
                {
                  if (!*(unsigned char *)v502)
                  {
                    uint64_t v505 = *(unsigned int *)(v502 + 4);
                    if ((int)v505 >= 0) {
                      unint64_t v506 = (uint64_t *)(*(void *)(v503 + 272) + 8 * v505);
                    }
                    else {
                      unint64_t v506 = (uint64_t *)(*(void *)(v503 + 24) + 16 * (v505 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v507 = *v506;
                    if (*v506)
                    {
                      uint64_t v508 = *(void *)(v507 + 16);
                      *(void *)(v507 + 16) = v502;
                      *(void *)(v502 + 16) = v508;
                      if (*(unsigned char *)(v502 + 3))
                      {
                        *(void *)(v502 + 24) = v507;
                      }
                      else
                      {
                        *(void *)(v502 + 24) = 0;
                        unint64_t v506 = (uint64_t *)(v508 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v502 + 16) = v502;
                      *(void *)(v502 + 24) = 0;
                    }
                    *unint64_t v506 = v502;
                  }
                  v502 += 32;
                  v504 -= 32;
                }
                while (v504);
              }
              uint64_t v493 = *(void *)(v491 + 728);
              if (v493) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v493 + 24))(v493, MachineInstr);
              }
              unint64_t v494 = *v484 & 0xFFFFFFFFFFFFFFF8;
              *(void *)MachineInstr = v494 | *(void *)MachineInstr & 7;
              *((void *)MachineInstr + 1) = v484;
              *(void *)(v494 + 8) = MachineInstr;
              *int v484 = *v484 & 7 | (unint64_t)MachineInstr;
              *((void *)&v575 + 1) = 0;
              v576 = 0;
              uint64_t v577 = 0;
              DWORD1(v575) = v483;
              LODWORD(v575) = 0x1000000;
              llvm::MachineInstr::addOperand(MachineInstr, v488, (const llvm::MachineOperand *)&v575);
              HIDWORD(v575) = 0;
              v576 = 0;
              uint64_t v577 = 0;
              *(void *)((char *)&v575 + 4) = v470;
              LODWORD(v575) = 0x4000000;
              llvm::MachineInstr::addOperand(MachineInstr, v488, (const llvm::MachineOperand *)&v575);
              uint64_t v3 = (uint64_t)v552;
              if (v565)
              {
                int v495 = *v565;
                if ((v495 - 4) > 0x1E)
                {
                  if ((v495 - 3) >= 0xFFFFFFFE) {
                    unint64_t v501 = v565;
                  }
                  else {
                    unint64_t v501 = 0;
                  }
                  if ((v495 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v497 = (unint64_t)(v501 + 8);
LABEL_684:
                    *(void *)&long long v575 = &v565;
                    sub_1CC5FA668(v497 + 16, &v575);
                    goto LABEL_336;
                  }
                  if (v495 == 3) {
                    *((void *)v565 + 1) = 0;
                  }
                }
                else if ((v565[1] & 0x7F) == 2 || *((_DWORD *)v565 + 3))
                {
                  uint64_t v496 = *((void *)v565 + 2);
                  if ((v496 & 4) != 0)
                  {
                    unint64_t v497 = v496 & 0xFFFFFFFFFFFFFFF8;
                    if (v497) {
                      goto LABEL_684;
                    }
                  }
                }
              }
            }
          }
LABEL_336:
          uint64_t v156 = (uint64_t)v556;
          goto LABEL_337;
        }
        unsigned int v176 = v172;
        uint64_t v539 = v170;
        unint64_t v550 = v162;
        uint64_t v541 = v167;
        unint64_t v542 = llvm::MachineFunction::addLandingPad(*(llvm::MachineFunction **)(v3 + 280), (llvm::MachineBasicBlock *)v162);
        uint64_t v177 = *(void *)(*(void *)(v3 + 336) + 8);
        int v178 = *(unint64_t **)(*(void *)(v3 + 264) + 648);
        uint64_t v179 = **(void **)(v3 + 304);
        if (!v179)
        {
          unsigned int v565 = 0;
          goto LABEL_288;
        }
        size_t v183 = *(unsigned __int8 **)(v179 + 48);
        unsigned int v565 = v183;
        if (v183)
        {
          llvm::MetadataTracking::track((uint64_t)&v565, v183, 2);
          unint64_t v185 = (llvm::MachineFunction *)v550[4];
          *(void *)&long long v567 = v565;
          uint64_t v184 = v166;
          if (v565) {
            llvm::MetadataTracking::track((uint64_t)&v567, v565, 2);
          }
        }
        else
        {
LABEL_288:
          uint64_t v184 = v166;
          unint64_t v185 = (llvm::MachineFunction *)v550[4];
          *(void *)&long long v567 = 0;
        }
        uint64_t v186 = llvm::MachineFunction::CreateMachineInstr(v185, v177 + 192, (unsigned __int8 **)&v567, 0);
        if ((void)v567)
        {
          int v520 = *(unsigned __int8 *)v567;
          if ((v520 - 4) > 0x1E)
          {
            if ((v520 - 3) >= 0xFFFFFFFE) {
              uint64_t v523 = v567;
            }
            else {
              uint64_t v523 = 0;
            }
            if ((v520 - 3) < 0xFFFFFFFE)
            {
              uint64_t v3 = (uint64_t)v552;
              if (v520 == 3) {
                *(void *)(v567 + 8) = 0;
              }
              goto LABEL_292;
            }
            unint64_t v522 = v523 + 8;
          }
          else
          {
            uint64_t v3 = (uint64_t)v552;
            if ((*(unsigned char *)(v567 + 1) & 0x7F) != 2 && !*(_DWORD *)(v567 + 12)) {
              goto LABEL_292;
            }
            uint64_t v521 = *(void *)(v567 + 16);
            if ((v521 & 4) == 0) {
              goto LABEL_292;
            }
            unint64_t v522 = v521 & 0xFFFFFFFFFFFFFFF8;
            if (!v522) {
              goto LABEL_292;
            }
          }
          *(void *)&long long v575 = &v567;
          sub_1CC5FA668(v522 + 16, &v575);
          uint64_t v3 = (uint64_t)v552;
        }
LABEL_292:
        long long v187 = v550;
        uint64_t v188 = v550[5];
        *((void *)v186 + 3) = v188;
        uint64_t v189 = *(void *)(v188 + 32);
        uint64_t v190 = *((unsigned int *)v186 + 10);
        if (v190)
        {
          uint64_t v453 = *((void *)v186 + 4);
          uint64_t v454 = *(void *)(v189 + 40);
          uint64_t v455 = 32 * v190;
          do
          {
            if (!*(unsigned char *)v453)
            {
              uint64_t v456 = *(unsigned int *)(v453 + 4);
              if ((int)v456 >= 0) {
                unint64_t v457 = (uint64_t *)(*(void *)(v454 + 272) + 8 * v456);
              }
              else {
                unint64_t v457 = (uint64_t *)(*(void *)(v454 + 24) + 16 * (v456 & 0x7FFFFFFF) + 8);
              }
              uint64_t v458 = *v457;
              if (*v457)
              {
                uint64_t v459 = *(void *)(v458 + 16);
                *(void *)(v458 + 16) = v453;
                *(void *)(v453 + 16) = v459;
                if (*(unsigned char *)(v453 + 3))
                {
                  *(void *)(v453 + 24) = v458;
                }
                else
                {
                  *(void *)(v453 + 24) = 0;
                  unint64_t v457 = (uint64_t *)(v459 + 24);
                }
              }
              else
              {
                *(void *)(v453 + 16) = v453;
                *(void *)(v453 + 24) = 0;
              }
              *unint64_t v457 = v453;
            }
            v453 += 32;
            v455 -= 32;
          }
          while (v455);
        }
        uint64_t v191 = *(void *)(v189 + 728);
        if (v191) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v191 + 24))(v191, v186);
        }
        unint64_t v192 = *v178 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v186 = v192 | *(void *)v186 & 7;
        *((void *)v186 + 1) = v178;
        *(void *)(v192 + 8) = v186;
        unint64_t *v178 = *v178 & 7 | (unint64_t)v186;
        v576 = v542;
        LODWORD(v577) = 0;
        long long v575 = 0xFuLL;
        llvm::MachineInstr::addOperand(v186, v185, (const llvm::MachineOperand *)&v575);
        if (v565)
        {
          int v193 = *v565;
          if ((v193 - 4) > 0x1E)
          {
            if ((v193 - 3) >= 0xFFFFFFFE) {
              uint64_t v208 = v565;
            }
            else {
              uint64_t v208 = 0;
            }
            if ((v193 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v209 = (unint64_t)(v208 + 8);
              goto LABEL_324;
            }
            if (v193 == 3) {
              *((void *)v565 + 1) = 0;
            }
          }
          else if ((v565[1] & 0x7F) == 2 || *((_DWORD *)v565 + 3))
          {
            uint64_t v509 = *((void *)v565 + 2);
            if ((v509 & 4) != 0)
            {
              unint64_t v209 = v509 & 0xFFFFFFFFFFFFFFF8;
              if (v209)
              {
LABEL_324:
                *(void *)&long long v575 = &v565;
                sub_1CC5FA668(v209 + 16, &v575);
              }
            }
          }
        }
        uint64_t v194 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v3 + 280) + 16) + 176))(*(void *)(*(void *)(v3 + 280) + 16));
        uint64_t v195 = (int *)(*(uint64_t (**)(uint64_t, void))(*(void *)v194 + 48))(v194, *(void *)(v3 + 280));
        if (v195) {
          sub_1CBA6DECC(*(void *)(*(void *)(v3 + 280) + 40) + 280, v195, 0xFFFFFFFF);
        }
        if (v176 == 12)
        {
          for (juint64_t j = *(void *)(v541 + 48); ; juint64_t j = *(void *)(jj + 8))
          {
            if (jj == v541 + 40) {
              goto LABEL_336;
            }
            uint64_t v197 = jj - 24;
            if (!jj) {
              uint64_t v197 = 0;
            }
            if (*(unsigned char *)(v197 + 16) != 83) {
              break;
            }
          }
          if (*(unsigned char *)(jj - 8) != 80) {
            goto LABEL_336;
          }
          uint64_t v202 = v550[4];
          int v203 = *(_DWORD *)(jj - 4) & 0x7FFFFFF;
          if (v203 == 2)
          {
            uint64_t v204 = *(void *)(jj - 88);
            unsigned int v205 = *(unsigned __int8 *)(v204 + 16);
            if (v204 && v205 == 16)
            {
              uint64_t v206 = *(unsigned int *)(v204 + 32);
              if (v206 <= 0x40)
              {
                char v207 = *(void *)(v204 + 24) == 0;
                goto LABEL_318;
              }
              int v510 = 0;
              int64_t v511 = (unint64_t)(v206 + 63) >> 6;
              do
              {
                BOOL v98 = v511-- < 1;
                if (v98) {
                  break;
                }
                unint64_t v512 = *(void *)(*(void *)(v204 + 24) + 8 * v511);
                v510 += __clz(v512);
              }
              while (!v512);
              int v513 = v206 | 0xFFFFFFC0;
              if ((v206 & 0x3F) == 0) {
                int v513 = 0;
              }
              char v207 = v510 + v513 == v206;
              int v203 = 2;
              long long v187 = v550;
              uint64_t v3 = (uint64_t)v552;
            }
            else if (v204 && v205 == 17)
            {
              char v207 = sub_1CB844168(v204, 0.0);
              int v203 = *(_DWORD *)(jj - 4) & 0x7FFFFFF;
            }
            else
            {
              BOOL v98 = v205 > 0x14;
              int v467 = (1 << v205) & 0x1C2000;
              if (!v98 && v467 != 0) {
                goto LABEL_336;
              }
              char v207 = 0;
LABEL_318:
              int v203 = 2;
            }
          }
          else
          {
            char v207 = 0;
          }
          if ((v207 & 1) == 0 && v203 != 1)
          {
            uint64_t v210 = *(void *)(jj - 16);
            if (v210)
            {
              while (1)
              {
                uint64_t v211 = *(void *)(v210 + 24);
                if (*(unsigned char *)(v211 + 16) == 84)
                {
                  uint64_t v212 = *(void *)(v211 - 32);
                  if (v212)
                  {
                    if (!*(unsigned char *)(v212 + 16)
                      && *(void *)(v212 + 24) == *(void *)(v211 + 72)
                      && (*(unsigned char *)(v212 + 33) & 0x20) != 0
                      && *(_DWORD *)(v212 + 36) == 11060)
                    {
                      break;
                    }
                  }
                }
                uint64_t v210 = *(void *)(v210 + 8);
                if (!v210) {
                  goto LABEL_336;
                }
              }
              uint64_t v498 = *(void *)(v211 - 32 * (*(_DWORD *)(v211 + 20) & 0x7FFFFFF) + 32);
              uint64_t v499 = (void *)(v498 + 24);
              if (*(_DWORD *)(v498 + 32) >= 0x41u) {
                uint64_t v499 = (void *)*v499;
              }
              unint64_t v500 = (void *)*v499;
              *(void *)&long long v575 = v187;
              *((_DWORD *)sub_1CD41D7A0((uint64_t *)(v202 + 560), &v575) + 2) = v500;
              uint64_t v3 = (uint64_t)v552;
            }
          }
          goto LABEL_336;
        }
        uint64_t v198 = *(void *)(v3 + 280);
        unint64_t v199 = sub_1CD7D3BF0((uint64_t *)(*(void *)(v3 + 304) + 936), &v553);
        llvm::MachineFunction::setCallSiteLandingPad(v198, (uint64_t)v542, (unsigned char *)v199[1], *((unsigned int *)v199 + 4));
        int v200 = (*(uint64_t (**)(void))(**(void **)(v3 + 344) + 712))();
        if (v200) {
          *(_DWORD *)(*(void *)(v3 + 264) + 772) = llvm::MachineBasicBlock::addLiveIn(v553, v200, v539);
        }
        int v201 = (*(uint64_t (**)(void, llvm::Value *))(**(void **)(v3 + 344) + 720))(*(void *)(v3 + 344), v184);
        uint64_t v152 = (llvm::MachineInstr *)v539;
        if (v201) {
          *(_DWORD *)(*(void *)(v3 + 264) + 776) = llvm::MachineBasicBlock::addLiveIn(v553, v201, v539);
        }
        goto LABEL_336;
      }
LABEL_337:
      uint64_t v213 = v150 + 24;
      if (v546)
      {
        uint64_t v214 = *((void *)v538 + 10);
        if (v214) {
          uint64_t v215 = v214 - 24;
        }
        else {
          uint64_t v215 = 0;
        }
        if (v156 != v215) {
          sub_1CD788FD8(v546);
        }
        llvm::SwiftErrorValueTracking::preassignVRegs(*(void *)(v3 + 272), *(const llvm::MachineBasicBlock **)(*(void *)(v3 + 264) + 640), v150 + 24, (uint64_t)v148);
        if ((void *)v213 != v148)
        {
          while (1)
          {
            if (*v148) {
              uint64_t v216 = *v148 - 24;
            }
            else {
              uint64_t v216 = 0;
            }
            if ((sub_1CCFEF948(v216, *(void *)(v3 + 264)) & 1) == 0)
            {
              uint64_t v218 = *(void *)(v3 + 360);
              uint64_t v217 = *(void *)(v3 + 368);
              if (v217 == v218)
              {
                uint64_t v219 = *v549;
                int v220 = (void *)(v217 + 8 * v219);
                if (v219)
                {
                  uint64_t v221 = 0;
                  uint64_t v222 = 8 * v219;
                  while (*(void *)(v217 + v221) != v216)
                  {
                    v221 += 8;
                    if (v222 == v221) {
                      goto LABEL_366;
                    }
                  }
                  int v220 = (void *)(v217 + v221);
                }
LABEL_366:
                uint64_t v218 = *(void *)(v3 + 368);
              }
              else
              {
                uint64_t v223 = *v547;
                int v224 = v223 - 1;
                unsigned int v225 = (v223 - 1) & ((v216 >> 4) ^ (v216 >> 9));
                int v220 = (void *)(v217 + 8 * v225);
                uint64_t v226 = *v220;
                if (*v220 == -1)
                {
                  unint64_t v227 = 0;
LABEL_373:
                  if (v227) {
                    int v220 = v227;
                  }
                  if (*v220 != v216) {
                    int v220 = (void *)(v217 + 8 * v223);
                  }
                }
                else
                {
                  unint64_t v227 = 0;
                  int v228 = 1;
                  while (v226 != v216)
                  {
                    if (v227) {
                      BOOL v229 = 0;
                    }
                    else {
                      BOOL v229 = v226 == -2;
                    }
                    if (v229) {
                      unint64_t v227 = v220;
                    }
                    unsigned int v230 = v225 + v228++;
                    unsigned int v225 = v230 & v224;
                    int v220 = (void *)(v217 + 8 * (v230 & v224));
                    uint64_t v226 = *v220;
                    if (*v220 == -1) {
                      goto LABEL_373;
                    }
                  }
                }
              }
              BOOL v17 = v217 == v218;
              uint64_t v231 = v549;
              if (!v17) {
                uint64_t v231 = v547;
              }
              if (v220 == (void *)(v217 + 8 * *v231))
              {
                sub_1CD789154((uint64_t)v546);
                if (sub_1CD78B450((uint64_t)v546, v216))
                {
                  uint64_t v232 = v216;
                  while (v232 != v150)
                  {
                    uint64_t v233 = *(void *)(v232 + 24);
                    if (v233) {
                      uint64_t v232 = v233 - 24;
                    }
                    else {
                      uint64_t v232 = 0;
                    }
                    if ((sub_1CCFEF948(v232, *(void *)(v3 + 264)) & 1) == 0) {
                      goto LABEL_386;
                    }
                  }
                  uint64_t v232 = v150;
LABEL_386:
                  if (v232 != v216 && *(unsigned char *)(v232 + 16) == 60)
                  {
                    uint64_t v234 = *(void *)(v232 + 8);
                    if (v234)
                    {
                      if (!*(void *)(v234 + 8) && sub_1CD78BDB8(v546, v232, v216)) {
                        uint64_t v148 = *(void **)(v232 + 32);
                      }
                    }
                  }
                }
                else
                {
                  *(unsigned char *)(v3 + 352) = 1;
                  if (*(unsigned char *)(v216 + 16) != 84 || sub_1CC27FA84(v216) || sub_1CC070820(v216) || sub_1CC64B564(v216))
                  {
                    long long v567 = 0uLL;
                    uint64_t v451 = *(void *)(v216 + 48);
                    if (v451)
                    {
                      uint64_t v524 = *(void *)(v451 - 8 * *(unsigned int *)(v451 + 8));
                      if (*(unsigned char *)v524 != 15) {
                        uint64_t v524 = *(void *)(v524 - 8 * *(unsigned int *)(v524 + 8));
                      }
                      *(void *)&long long v567 = v524;
                      DWORD2(v567) = *(_DWORD *)(v451 + 4);
                      HIDWORD(v567) = *(unsigned __int16 *)(v451 + 2);
                      uint64_t v3 = (uint64_t)v552;
                    }
                    llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&v575, (uint64_t)"sdagisel", (uint64_t)"FastISelFailure", 15, &v567, (uint64_t)v556);
                    if (*(unsigned __int8 *)(v216 + 16) - 29 > 0xA)
                    {
                      BOOL v452 = dword_1EBCFA4F8 != 0;
                      *(void *)&long long v567 = "FastISel missed";
                      *((void *)&v567 + 1) = 15;
                      sub_1CC59ADEC((uint64_t *)&v578, (uint64_t)&v567);
                    }
                    else
                    {
                      *(void *)&long long v567 = "FastISel missed terminator";
                      *((void *)&v567 + 1) = 26;
                      sub_1CC59ADEC((uint64_t *)&v578, (uint64_t)&v567);
                      BOOL v452 = dword_1EBCFA4F8 > 2;
                    }
                    if ((llvm::OptimizationRemarkMissed::isEnabled((llvm::Function **)&v575) & 1) != 0
                      || dword_1EBCFA4F8)
                    {
                      int64_t v553 = 0;
                      uint64_t v554 = 0;
                      uint64_t v555 = 0;
                      DWORD2(v567) = 0;
                      char v571 = 0;
                      uint64_t v572 = 0;
                      *(void *)&long long v567 = &unk_1F2646F30;
                      unsigned int v574 = &v553;
                      int v573 = 0;
                      uint64_t v569 = 0;
                      uint64_t v570 = 0;
                      uint64_t v568 = 0;
                      llvm::Value::print((llvm::Value *)v216, (llvm::raw_ostream *)&v567, 0);
                      unsigned int v565 = ": ";
                      uint64_t v566 = 2;
                      sub_1CC59ADEC((uint64_t *)&v578, (uint64_t)&v565);
                      int64_t v460 = (unsigned __int8 *)v574;
                      char v461 = *((unsigned char *)v574 + 23);
                      BOOL v462 = v461 < 0;
                      if (v461 < 0) {
                        int64_t v460 = (unsigned __int8 *)*v574;
                      }
                      uint64_t v463 = v461 & 0x7F;
                      if (v462) {
                        uint64_t v463 = (uint64_t)v574[1];
                      }
                      unsigned int v565 = v460;
                      uint64_t v566 = v463;
                      sub_1CC59ADEC((uint64_t *)&v578, (uint64_t)&v565);
                      *(void *)&long long v567 = &unk_1F2646B98;
                      if (v573 == 1 && v568) {
                        MEMORY[0x1D25D9CB0](v568, 0x1000C8077774924);
                      }
                      if (SHIBYTE(v555) < 0) {
                        operator delete(v553);
                      }
                    }
                    sub_1CCFEF7BC(**(uint64_t *****)(v3 + 280), *(uint64_t ****)(v3 + 432), (llvm::DiagnosticInfoOptimizationBase *)&v575, v452);
                    *(void *)&long long v575 = &unk_1F2616800;
                    int v464 = (char *)v578;
                    if (v579)
                    {
                      unint64_t v465 = (unint64_t)v579 << 6;
                      do
                      {
                        unint64_t v466 = (void **)&v464[v465];
                        if (v464[v465 - 17] < 0) {
                          operator delete(*(v466 - 5));
                        }
                        if (*((char *)v466 - 41) < 0) {
                          operator delete(*(v466 - 8));
                        }
                        v465 -= 64;
                      }
                      while (v465);
                      int v464 = (char *)v578;
                      uint64_t v3 = (uint64_t)v552;
                    }
                    if (v464 != (char *)v580) {
                      free(v464);
                    }
                    break;
                  }
                  long long v567 = 0uLL;
                  uint64_t v235 = *(void *)(v216 + 48);
                  if (v235)
                  {
                    uint64_t v249 = *(void *)(v235 - 8 * *(unsigned int *)(v235 + 8));
                    if (*(unsigned char *)v249 != 15) {
                      uint64_t v249 = *(void *)(v249 - 8 * *(unsigned int *)(v249 + 8));
                    }
                    *(void *)&long long v567 = v249;
                    DWORD2(v567) = *(_DWORD *)(v235 + 4);
                    HIDWORD(v567) = *(unsigned __int16 *)(v235 + 2);
                    uint64_t v3 = (uint64_t)v552;
                  }
                  llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)&v575, (uint64_t)"sdagisel", (uint64_t)"FastISelFailure", 15, &v567, (uint64_t)v556);
                  *(void *)&long long v567 = "FastISel missed call";
                  *((void *)&v567 + 1) = 20;
                  sub_1CC59ADEC((uint64_t *)&v578, (uint64_t)&v567);
                  if ((llvm::OptimizationRemarkMissed::isEnabled((llvm::Function **)&v575) & 1) != 0
                    || (int v236 = dword_1EBCFA4F8) != 0)
                  {
                    int64_t v553 = 0;
                    uint64_t v554 = 0;
                    uint64_t v555 = 0;
                    DWORD2(v567) = 0;
                    char v571 = 0;
                    uint64_t v572 = 0;
                    *(void *)&long long v567 = &unk_1F2646F30;
                    unsigned int v574 = &v553;
                    int v573 = 0;
                    uint64_t v569 = 0;
                    uint64_t v570 = 0;
                    uint64_t v568 = 0;
                    llvm::Value::print((llvm::Value *)v216, (llvm::raw_ostream *)&v567, 0);
                    unsigned int v565 = ": ";
                    uint64_t v566 = 2;
                    sub_1CC59ADEC((uint64_t *)&v578, (uint64_t)&v565);
                    unsigned int v237 = (unsigned __int8 *)v574;
                    char v238 = *((unsigned char *)v574 + 23);
                    BOOL v239 = v238 < 0;
                    if (v238 < 0) {
                      unsigned int v237 = (unsigned __int8 *)*v574;
                    }
                    uint64_t v240 = v238 & 0x7F;
                    if (v239) {
                      uint64_t v240 = (uint64_t)v574[1];
                    }
                    unsigned int v565 = v237;
                    uint64_t v566 = v240;
                    sub_1CC59ADEC((uint64_t *)&v578, (uint64_t)&v565);
                    *(void *)&long long v567 = &unk_1F2646B98;
                    if (v573 == 1 && v568) {
                      MEMORY[0x1D25D9CB0](v568, 0x1000C8077774924);
                    }
                    if (SHIBYTE(v555) < 0) {
                      operator delete(v553);
                    }
                    int v236 = dword_1EBCFA4F8;
                  }
                  sub_1CCFEF7BC(**(uint64_t *****)(v3 + 280), *(uint64_t ****)(v3 + 432), (llvm::DiagnosticInfoOptimizationBase *)&v575, v236 > 2);
                  int v241 = *(unsigned __int8 *)(*(void *)v216 + 8);
                  if (v241 != 7 && v241 != 12)
                  {
                    if (*(void *)(v216 + 8))
                    {
                      int v242 = (uint64_t *)(*(void *)(v3 + 264) + 80);
                      *(void *)&long long v567 = v216;
                      uint64_t v243 = sub_1CD3CDD24(v242, &v567);
                      if (!*((_DWORD *)v243 + 2)) {
                        *((_DWORD *)v243 + 2) = sub_1CD78C35C(*(void *)(v3 + 264), (const llvm::Value *)v216);
                      }
                    }
                  }
                  LOBYTE(v567) = 0;
                  uint64_t v244 = *(llvm::MachineInstr **)(*(void *)(v3 + 264) + 648);
                  sub_1CD807FE8((void *)v3, v216 + 24, (uint64_t)v148, &v567);
                  int v245 = v567;
                  if ((_BYTE)v567)
                  {
                    sub_1CD789BAC(v546, v244, (llvm::MachineInstr *)(*(void *)(*(void *)(v3 + 264) + 640) + 48));
                    uint64_t v148 = (void *)*v148;
                  }
                  *(void *)&long long v575 = &unk_1F2616800;
                  BOOL v246 = (char *)v578;
                  if (v579)
                  {
                    unint64_t v247 = (unint64_t)v579 << 6;
                    do
                    {
                      uint64_t v248 = (void **)&v246[v247];
                      if (v246[v247 - 17] < 0) {
                        operator delete(*(v248 - 5));
                      }
                      if (*((char *)v248 - 41) < 0) {
                        operator delete(*(v248 - 8));
                      }
                      v247 -= 64;
                    }
                    while (v247);
                    BOOL v246 = (char *)v578;
                    uint64_t v3 = (uint64_t)v552;
                  }
                  if (v246 == (char *)v580)
                  {
                    if (v245) {
                      break;
                    }
                  }
                  else
                  {
                    free(v246);
                    if (v245) {
                      break;
                    }
                  }
                }
              }
            }
            uint64_t v148 = (void *)*v148;
            if (v148 == (void *)v213)
            {
              uint64_t v148 = (void *)(v150 + 24);
              break;
            }
          }
        }
        sub_1CD789154((uint64_t)v546);
        uint64_t v156 = (uint64_t)v556;
      }
      if (*((unsigned char *)v543 + 312) && !*((unsigned char *)v543 + 313))
      {
        uint64_t v514 = *(void *)(v156 + 40);
        if (v514) {
          uint64_t v515 = v514 - 24;
        }
        else {
          uint64_t v515 = 0;
        }
        if (*(unsigned __int8 *)(v515 + 16) - 29 >= 0xB) {
          uint64_t v515 = 0;
        }
        if (*(unsigned char *)(v515 + 16) == 29)
        {
          char v516 = (*(uint64_t (**)(void, void, llvm::MachineInstr *))(**(void **)(v3 + 344) + 792))(*(void *)(v3 + 344), *((void *)v538 + 5), v152) != 0;
          int64_t v517 = (llvm::MachineBasicBlock *)(*(void *)(v3 + 304) + 864);
          unint64_t v518 = (const llvm::BasicBlock *)v556;
          unsigned int v519 = sub_1CD3CE844((_DWORD *)(*(void *)(v3 + 264) + 56), &v556);
          sub_1CD61612C(v517, v518, (llvm::MachineBasicBlock *)v519[1], v516);
        }
      }
      if ((void *)v213 != v148)
      {
        LOBYTE(v575) = 0;
        sub_1CD807FE8((void *)v3, v213, (uint64_t)v148, &v575);
        if (v546)
        {
          if ((_BYTE)v575)
          {
            uint64_t v267 = *(void *)(v3 + 264);
            uint64_t v152 = (llvm::MachineInstr *)(*(void *)(v267 + 640) + 48);
            uint64_t v268 = *(llvm::MachineInstr **)(v267 + 648);
            if (v268 != v152) {
              sub_1CD789BAC(v546, v268, v152);
            }
          }
        }
      }
      if (v546) {
        sub_1CCF6835C((uint64_t)v546);
      }
      unint64_t v250 = *(void *)(*(void *)(v3 + 264) + 752) - *(void *)(*(void *)(v3 + 264) + 744);
      if ((v250 & 0xFFFFFFFF0) != 0)
      {
        uint64_t v251 = 0;
        uint64_t v252 = (v250 >> 4);
        do
        {
          uint64_t v253 = *(void *)(v3 + 264);
          uint64_t v254 = *(void *)(v253 + 744);
          long long v255 = *(llvm::MachineInstr **)(v254 + 16 * v251);
          uint64_t v256 = *(void *)(v253 + 640);
          int v257 = *(void **)(v256 + 88);
          uint64_t v258 = *(void **)(v256 + 96);
          if (v257 != v258)
          {
            while (*v257 != *((void *)v255 + 3))
            {
              if (++v257 == v258)
              {
                int v257 = v258;
                break;
              }
            }
          }
          if (v257 != v258)
          {
            uint64_t v259 = *(llvm::MachineFunction **)(v3 + 280);
            int v260 = *(_DWORD *)(v254 + 16 * v251 + 8);
            *((void *)&v575 + 1) = 0;
            DWORD1(v575) = v260;
            LODWORD(v575) = 0;
            v576 = 0;
            uint64_t v577 = 0;
            llvm::MachineInstr::addOperand(v255, v259, (const llvm::MachineOperand *)&v575);
            uint64_t v261 = *(llvm::MachineBasicBlock **)(*(void *)(v3 + 264) + 640);
            *((void *)&v575 + 1) = 0;
            v576 = v261;
            LODWORD(v575) = 4;
            llvm::MachineInstr::addOperand(v255, v259, (const llvm::MachineOperand *)&v575);
          }
          ++v251;
        }
        while (v251 != v252);
      }
      uint64_t v262 = *(void *)(v3 + 304);
      unsigned int v263 = *(llvm **)(v262 + 864);
      if (v263)
      {
        unsigned int v264 = *(llvm **)(v262 + 872);
        uint64_t v265 = *(void *)(v262 + 880);
        if (v264)
        {
          if (!v265) {
            goto LABEL_465;
          }
          SplitPointForStackProtector = (unint64_t *)llvm::findSplitPointForStackProtector(*(llvm **)(v262 + 864), *(llvm::MachineBasicBlock **)(v3 + 336), v152);
          uint64_t v271 = (unint64_t *)((char *)v263 + 48);
          if (v264 != v263 && v271 != SplitPointForStackProtector)
          {
            unint64_t v273 = *((void *)v264 + 5);
            unint64_t v274 = SplitPointForStackProtector;
            do
            {
              v274[3] = v273;
              unint64_t v274 = (unint64_t *)v274[1];
            }
            while (v274 != v271);
            unint64_t v275 = *v271;
            unint64_t v276 = *v271 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v277 = *SplitPointForStackProtector & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v277 + 8) = v271;
            *uint64_t v271 = v277 | v275 & 7;
            uint64_t v279 = *((void *)v264 + 6);
            unsigned int v278 = (unint64_t *)((char *)v264 + 48);
            *(void *)(v276 + 8) = v278;
            unint64_t *SplitPointForStackProtector = v279 & 0xFFFFFFFFFFFFFFF8 | *SplitPointForStackProtector & 7;
            *(void *)((v279 & 0xFFFFFFFFFFFFFFF8) + 8) = SplitPointForStackProtector;
            *unsigned int v278 = v275 & 0xFFFFFFFFFFFFFFF8 | *v278 & 7;
          }
          *(void *)(*(void *)(v3 + 264) + 640) = v263;
          *(void *)(*(void *)(v3 + 264) + 648) = v271;
          sub_1CD7E002C(*(void *)(v3 + 304), *(void *)(v3 + 304) + 864, (uint64_t)v263, v270);
          uint64_t v280 = v552[37];
          *(void *)(v280 + 192) = sub_1CD7D7360(v552[38]);
          *(_DWORD *)(v280 + 200) = v281;
          uint64_t v282 = v552;
          sub_1CD7D7144(v552[38]);
          sub_1CD8080E0((uint64_t)v552, v283, v284, v285, v286, v287, v288, v289);
          uint64_t v290 = v552[38];
          uint64_t v291 = *(void *)(v290 + 880);
          uint64_t v293 = *(void *)(v291 + 48);
          uint64_t v292 = v291 + 48;
          if (v292 == (v293 & 0xFFFFFFFFFFFFFFF8))
          {
            *(void *)(v552[33] + 640) = *(void *)(v290 + 880);
            *(void *)(v552[33] + 648) = v292;
            sub_1CD7E07A8((uint64_t *)v552[38]);
            goto LABEL_463;
          }
        }
        else
        {
          if (v265) {
            goto LABEL_465;
          }
          *(void *)(*(void *)(v3 + 264) + 640) = v263;
          *(void *)(*(void *)(v3 + 264) + 648) = llvm::findSplitPointForStackProtector(v263, *(llvm::MachineBasicBlock **)(v3 + 336), v152);
          sub_1CD7E002C(*(void *)(v3 + 304), *(void *)(v3 + 304) + 864, (uint64_t)v263, v266);
LABEL_463:
          uint64_t v294 = v552[37];
          *(void *)(v294 + 192) = sub_1CD7D7360(v552[38]);
          *(_DWORD *)(v294 + 200) = v295;
          uint64_t v282 = v552;
          sub_1CD7D7144(v552[38]);
          sub_1CD8080E0((uint64_t)v552, v296, v297, v298, v299, v300, v301, v302);
          uint64_t v290 = v552[38];
        }
        *(_OWORD *)(v290 + 864) = 0u;
        uint64_t v262 = v282[38];
      }
LABEL_465:
      uint64_t v303 = *(void *)(v262 + 856);
      uint64_t v305 = *(void *)(v303 + 64);
      unsigned int v304 = (uint64_t *)(v303 + 64);
      uint64_t v306 = *(v304 - 1);
      uint64_t v551 = v305;
      if (v306 != v305)
      {
        do
        {
          unsigned int v307 = v552;
          if (!*(unsigned char *)(v306 + 45))
          {
            *(void *)(v552[33] + 640) = *(void *)(v306 + 48);
            *(void *)(v552[33] + 648) = *(void *)(v552[33] + 640) + 48;
            sub_1CD7E0980(v552[38], v306, *(void *)(v552[33] + 640));
            uint64_t v345 = v552[37];
            *(void *)(v345 + 192) = sub_1CD7D7360(v552[38]);
            *(_DWORD *)(v345 + 200) = v346;
            unsigned int v307 = v552;
            sub_1CD7D7144(v552[38]);
            sub_1CD8080E0((uint64_t)v552, v347, v348, v349, v350, v351, v352, v353);
          }
          uint64_t v308 = *(unsigned int *)(v306 + 72);
          if (v308)
          {
            uint64_t v309 = 0;
            unsigned int v310 = *(_DWORD *)(v306 + 176);
            uint64_t v311 = 32 * v308;
            uint64_t v312 = 32 * v308 - 32;
            int v313 = v308 - 2;
            while (1)
            {
              uint64_t v314 = *(void *)(v306 + 64) + v309;
              unsigned int v315 = *(_DWORD *)(v314 + 24);
              BOOL v97 = v310 >= v315;
              unsigned int v316 = v310 - v315;
              unsigned int v310 = v97 ? v316 : 0;
              *(void *)(v307[33] + 640) = *(void *)(v314 + 8);
              *(void *)(v307[33] + 648) = *(void *)(v307[33] + 640) + 48;
              if (v313 || !(*(unsigned __int8 *)(v306 + 46) | *(unsigned __int8 *)(v306 + 184)))
              {
                uint64_t v317 = *(void *)(v306 + 64);
                int64_t v318 = (llvm::MachineBasicBlock **)(v317 + v309 + 40);
                if (v312 == v309) {
                  int64_t v318 = (llvm::MachineBasicBlock **)(v306 + 56);
                }
              }
              else
              {
                uint64_t v317 = *(void *)(v306 + 64);
                int64_t v318 = (llvm::MachineBasicBlock **)(v317 + v309 + 48);
              }
              sub_1CD7E0E3C(v307[38], v306, *v318, v310, *(_DWORD *)(v306 + 40), v317 + v309, *(void *)(v307[33] + 640));
              uint64_t v319 = v552[37];
              *(void *)(v319 + 192) = sub_1CD7D7360(v552[38]);
              *(_DWORD *)(v319 + 200) = v320;
              unsigned int v307 = v552;
              sub_1CD7D7144(v552[38]);
              sub_1CD8080E0((uint64_t)v552, v321, v322, v323, v324, v325, v326, v327);
              if (!v313)
              {
                if (*(unsigned __int8 *)(v306 + 46) | *(unsigned __int8 *)(v306 + 184)) {
                  break;
                }
              }
              v309 += 32;
              --v313;
              if (v311 == v309) {
                goto LABEL_481;
              }
            }
            --*(_DWORD *)(v306 + 72);
          }
LABEL_481:
          uint64_t v328 = v307[33];
          unsigned int v329 = *(_DWORD **)(v328 + 744);
          uint64_t v330 = *(_DWORD **)(v328 + 752);
          while (v329 != v330)
          {
            unint64_t v331 = (llvm::MachineFunction *)v552[35];
            unint64_t v332 = *(llvm::MachineInstr **)v329;
            uint64_t v333 = *(void *)(*(void *)v329 + 24);
            if (v333 == *(void *)(v306 + 56))
            {
              int v334 = v329[2];
              *((void *)&v575 + 1) = 0;
              DWORD1(v575) = v334;
              LODWORD(v575) = 0;
              v576 = 0;
              uint64_t v577 = 0;
              llvm::MachineInstr::addOperand(v332, v331, (const llvm::MachineOperand *)&v575);
              int64_t v335 = *(llvm::MachineBasicBlock **)(v306 + 48);
              *((void *)&v575 + 1) = 0;
              v576 = v335;
              LODWORD(v575) = 4;
              llvm::MachineInstr::addOperand(v332, v331, (const llvm::MachineOperand *)&v575);
              if (!*(unsigned char *)(v306 + 46))
              {
                int v336 = v329[2];
                *((void *)&v575 + 1) = 0;
                DWORD1(v575) = v336;
                LODWORD(v575) = 0;
                v576 = 0;
                uint64_t v577 = 0;
                llvm::MachineInstr::addOperand(v332, v331, (const llvm::MachineOperand *)&v575);
                int v337 = *(llvm::MachineBasicBlock **)(*(void *)(v306 + 64) + 32 * *(unsigned int *)(v306 + 72) - 24);
                *((void *)&v575 + 1) = 0;
                v576 = v337;
                LODWORD(v575) = 4;
                llvm::MachineInstr::addOperand(v332, v331, (const llvm::MachineOperand *)&v575);
              }
            }
            uint64_t v338 = *(unsigned int *)(v306 + 72);
            if (v338)
            {
              uint64_t v339 = *(void *)(v306 + 64);
              uint64_t v340 = v339 + 32 * v338;
              do
              {
                unint64_t v341 = *(llvm::MachineBasicBlock **)(v339 + 8);
                int v342 = (void *)*((void *)v341 + 11);
                int v343 = (void *)*((void *)v341 + 12);
                if (v342 != v343)
                {
                  while (*v342 != v333)
                  {
                    if (++v342 == v343)
                    {
                      int v342 = (void *)*((void *)v341 + 12);
                      break;
                    }
                  }
                }
                if (v342 != v343)
                {
                  int v344 = v329[2];
                  *((void *)&v575 + 1) = 0;
                  DWORD1(v575) = v344;
                  LODWORD(v575) = 0;
                  v576 = 0;
                  uint64_t v577 = 0;
                  llvm::MachineInstr::addOperand(v332, v331, (const llvm::MachineOperand *)&v575);
                  *((void *)&v575 + 1) = 0;
                  v576 = v341;
                  LODWORD(v575) = 4;
                  llvm::MachineInstr::addOperand(v332, v331, (const llvm::MachineOperand *)&v575);
                }
                v339 += 32;
              }
              while (v339 != v340);
            }
            v329 += 4;
          }
          v306 += 192;
        }
        while (v306 != v551);
        uint64_t v354 = *(void *)(v552[38] + 856);
        uint64_t v355 = *(void *)(v354 + 64);
        unsigned int v304 = (uint64_t *)(v354 + 64);
        uint64_t v306 = v355;
        uint64_t v356 = *(v304 - 1);
        if (v355 != v356)
        {
          do
          {
            v306 -= 192;
            sub_1CD57FDF4(v306);
          }
          while (v306 != v356);
          uint64_t v306 = v356;
        }
      }
      *unsigned int v304 = v306;
      uint64_t v357 = *(void *)(v552[38] + 856);
      uint64_t v359 = *(void *)(v357 + 32);
      uint64_t v358 = *(void *)(v357 + 40);
      uint64_t v360 = -858993459 * ((unint64_t)(v358 - v359) >> 4);
      if (v360)
      {
        uint64_t v361 = 0;
        int v362 = v552;
        do
        {
          uint64_t v363 = *(void *)(*(void *)(v362[38] + 856) + 32);
          uint64_t v364 = v363 + 80 * v361;
          uint64_t v365 = v362[33];
          if (!*(unsigned char *)(v364 + 48))
          {
            *(void *)(v365 + 640) = *(void *)(v364 + 40);
            *(void *)(v362[33] + 648) = *(void *)(v362[33] + 640) + 48;
            uint64_t v366 = v362[38];
            uint64_t v367 = *(void *)(*(void *)(v366 + 856) + 32) + 80 * v361;
            sub_1CD7DFAD0(v366, v367 + 56, v367, *(void *)(v362[33] + 640));
            uint64_t v368 = v552[37];
            *(void *)(v368 + 192) = sub_1CD7D7360(v552[38]);
            *(_DWORD *)(v368 + 200) = v369;
            int v362 = v552;
            sub_1CD7D7144(v552[38]);
            sub_1CD8080E0((uint64_t)v552, v370, v371, v372, v373, v374, v375, v376);
            uint64_t v363 = *(void *)(*(void *)(v552[38] + 856) + 32);
            uint64_t v365 = v552[33];
          }
          *(void *)(v365 + 640) = *(void *)(v363 + 80 * v361 + 64);
          *(void *)(v362[33] + 648) = *(void *)(v362[33] + 640) + 48;
          sub_1CD7DF920(v362[38], (int *)(*(void *)(*(void *)(v362[38] + 856) + 32) + 80 * v361 + 56));
          uint64_t v377 = v552[37];
          *(void *)(v377 + 192) = sub_1CD7D7360(v552[38]);
          *(_DWORD *)(v377 + 200) = v378;
          int v362 = v552;
          sub_1CD7D7144(v552[38]);
          sub_1CD8080E0((uint64_t)v552, v379, v380, v381, v382, v383, v384, v385);
          unint64_t v386 = *(void *)(v362[33] + 752) - *(void *)(v362[33] + 744);
          if ((v386 & 0xFFFFFFFF0) != 0)
          {
            uint64_t v387 = 0;
            uint64_t v388 = (v386 >> 4);
            do
            {
              BOOL v389 = (llvm::MachineFunction *)v552[35];
              uint64_t v390 = v552[33];
              uint64_t v391 = *(void *)(v390 + 744);
              int v392 = *(llvm::MachineInstr **)(v391 + 16 * v387);
              uint64_t v393 = *((void *)v392 + 3);
              if (v393 == *(void *)(*(void *)(*(void *)(v552[38] + 856) + 32) + 80 * v361 + 72))
              {
                int v394 = *(_DWORD *)(v391 + 16 * v387 + 8);
                *((void *)&v575 + 1) = 0;
                DWORD1(v575) = v394;
                LODWORD(v575) = 0;
                v576 = 0;
                uint64_t v577 = 0;
                llvm::MachineInstr::addOperand(v392, v389, (const llvm::MachineOperand *)&v575);
                unsigned int v395 = *(llvm::MachineBasicBlock **)(*(void *)(*(void *)(v552[38] + 856) + 32) + 80 * v361 + 40);
                *((void *)&v575 + 1) = 0;
                v576 = v395;
                LODWORD(v575) = 4;
                llvm::MachineInstr::addOperand(v392, v389, (const llvm::MachineOperand *)&v575);
                uint64_t v390 = v552[33];
              }
              uint64_t v396 = *(void *)(v390 + 640);
              int64_t v397 = *(void **)(v396 + 88);
              unint64_t v398 = *(void **)(v396 + 96);
              if (v397 != v398)
              {
                while (*v397 != v393)
                {
                  if (++v397 == v398)
                  {
                    int64_t v397 = v398;
                    break;
                  }
                }
              }
              if (v397 != v398)
              {
                int v399 = *(_DWORD *)(*(void *)(v390 + 744) + 16 * v387 + 8);
                *((void *)&v575 + 1) = 0;
                DWORD1(v575) = v399;
                LODWORD(v575) = 0;
                v576 = 0;
                uint64_t v577 = 0;
                llvm::MachineInstr::addOperand(v392, v389, (const llvm::MachineOperand *)&v575);
                uint64_t v400 = *(llvm::MachineBasicBlock **)(v552[33] + 640);
                *((void *)&v575 + 1) = 0;
                v576 = v400;
                LODWORD(v575) = 4;
                llvm::MachineInstr::addOperand(v392, v389, (const llvm::MachineOperand *)&v575);
              }
              ++v387;
            }
            while (v387 != v388);
          }
          ++v361;
        }
        while (v361 != v360);
        uint64_t v357 = *(void *)(v552[38] + 856);
        uint64_t v359 = *(void *)(v357 + 32);
        uint64_t v358 = *(void *)(v357 + 40);
      }
      while (v358 != v359)
        uint64_t v358 = sub_1CD494A40(v358 - 80);
      *(void *)(v357 + 40) = v359;
      uint64_t v3 = (uint64_t)v552;
      uint64_t v401 = *(void *)(v552[38] + 856);
      uint64_t v403 = *(unsigned __int8 ***)(v401 + 8);
      unsigned int v402 = *(unsigned __int8 ***)(v401 + 16);
      uint64_t v404 = -1171354717 * ((unint64_t)((char *)v402 - (char *)v403) >> 3);
      if (v404)
      {
        for (kuint64_t k = 0; kk != v404; ++kk)
        {
          *(void *)(*(void *)(v3 + 264) + 640) = *(void *)(*(void *)(*(void *)(*(void *)(v3 + 304) + 856)
                                                                             + 8)
                                                                 + 88 * kk
                                                                 + 48);
          *(void *)(*(void *)(v3 + 264) + 648) = *(void *)(*(void *)(v3 + 264) + 640) + 48;
          *(void *)&long long v567 = &v568;
          uint64_t v406 = *(void *)(v3 + 304);
          uint64_t v407 = *(void *)(v406 + 856);
          uint64_t v568 = *(void *)(*(void *)(v407 + 8) + 88 * kk + 32);
          *((void *)&v567 + 1) = 0x200000001;
          uint64_t v408 = *(void *)(v407 + 8);
          uint64_t v409 = v408 + 88 * kk;
          uint64_t v411 = *(void *)(v409 + 32);
          uint64_t v410 = *(void *)(v409 + 40);
          if (v411 != v410)
          {
            uint64_t v569 = v410;
            DWORD2(v567) = 2;
            uint64_t v408 = *(void *)(v407 + 8);
          }
          sub_1CD7DF1BC(v406, v408 + 88 * kk, *(void *)(*(void *)(v3 + 264) + 640));
          uint64_t v412 = v552[37];
          *(void *)(v412 + 192) = sub_1CD7D7360(v552[38]);
          *(_DWORD *)(v412 + 200) = v413;
          uint64_t v3 = (uint64_t)v552;
          sub_1CD7D7144(v552[38]);
          sub_1CD8080E0((uint64_t)v552, v414, v415, v416, v417, v418, v419, v420);
          uint64_t v421 = DWORD2(v567);
          if (DWORD2(v567))
          {
            uint64_t v422 = 0;
            unsigned int v423 = *(llvm::MachineBasicBlock **)(v552[33] + 640);
            do
            {
              *(void *)(v552[33] + 640) = *(void *)(v567 + 8 * v422);
              *(void *)(v552[33] + 648) = *(void *)(v552[33] + 640) + 48;
              uint64_t v424 = *(void *)(v552[33] + 640);
              int v425 = (void *)*((void *)v423 + 11);
              int v426 = (void *)*((void *)v423 + 12);
              if (v425 != v426)
              {
                while (*v425 != v424)
                {
                  if (++v425 == v426)
                  {
                    int v425 = (void *)*((void *)v423 + 12);
                    break;
                  }
                }
              }
              if (v425 != v426)
              {
                uint64_t v427 = v424 + 48;
                for (uint64_t mm = *(void *)(v424 + 56); mm != v427; uint64_t mm = *(void *)(mm + 8))
                {
                  int v429 = **(unsigned __int16 **)(mm + 16);
                  if (v429 != 69 && v429 != 0) {
                    break;
                  }
                  unsigned int v431 = 0;
                  unsigned int v432 = (llvm::MachineFunction *)v552[35];
                  uint64_t v433 = *(void *)(v552[33] + 744);
                  do
                  {
                    unsigned int v434 = v431;
                    uint64_t v435 = *(void *)(v433 + 16 * v431++);
                  }
                  while (v435 != mm);
                  int v436 = *(_DWORD *)(v433 + 16 * v434 + 8);
                  *((void *)&v575 + 1) = 0;
                  DWORD1(v575) = v436;
                  LODWORD(v575) = 0;
                  v576 = 0;
                  uint64_t v577 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)mm, v432, (const llvm::MachineOperand *)&v575);
                  *((void *)&v575 + 1) = 0;
                  v576 = v423;
                  LODWORD(v575) = 4;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)mm, v432, (const llvm::MachineOperand *)&v575);
                  if (!mm || (*(unsigned char *)mm & 4) == 0)
                  {
                    while ((*(_WORD *)(mm + 44) & 8) != 0)
                      uint64_t mm = *(void *)(mm + 8);
                  }
                }
              }
              ++v422;
            }
            while (v422 != v421);
          }
          if ((uint64_t *)v567 != &v568) {
            free((void *)v567);
          }
        }
        uint64_t v401 = *(void *)(v552[38] + 856);
        uint64_t v403 = *(unsigned __int8 ***)(v401 + 8);
        unsigned int v402 = *(unsigned __int8 ***)(v401 + 16);
      }
      if (v402 != v403)
      {
        int64_t v438 = v402 - 2;
        do
        {
          unint64_t v439 = *v438;
          if (!*v438) {
            goto LABEL_559;
          }
          int v442 = *v439;
          if ((v442 - 4) > 0x1E)
          {
            if ((v442 - 3) >= 0xFFFFFFFE) {
              unint64_t v445 = *v438;
            }
            else {
              unint64_t v445 = 0;
            }
            if ((v442 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v444 = (unint64_t)(v445 + 8);
LABEL_573:
              *(void *)&long long v575 = v438;
              sub_1CC5FA668(v444 + 16, &v575);
              goto LABEL_559;
            }
            if (v442 == 3) {
              *((void *)v439 + 1) = 0;
            }
          }
          else if ((v439[1] & 0x7F) == 2 || *((_DWORD *)v439 + 3))
          {
            uint64_t v443 = *((void *)v439 + 2);
            if ((v443 & 4) != 0)
            {
              unint64_t v444 = v443 & 0xFFFFFFFFFFFFFFF8;
              if (v444) {
                goto LABEL_573;
              }
            }
          }
LABEL_559:
          unsigned int v440 = *(v438 - 2);
          if (v440)
          {
            int v446 = *v440;
            if ((v446 - 4) > 0x1E)
            {
              if ((v446 - 3) >= 0xFFFFFFFE) {
                uint64_t v449 = (uint64_t)*(v438 - 2);
              }
              else {
                uint64_t v449 = 0;
              }
              if ((v446 - 3) < 0xFFFFFFFE)
              {
                uint64_t v3 = (uint64_t)v552;
                if (v446 == 3) {
                  *((void *)v440 + 1) = 0;
                }
                goto LABEL_560;
              }
              unint64_t v448 = v449 + 8;
            }
            else
            {
              uint64_t v3 = (uint64_t)v552;
              if ((v440[1] & 0x7F) != 2 && !*((_DWORD *)v440 + 3)) {
                goto LABEL_560;
              }
              uint64_t v447 = *((void *)v440 + 2);
              if ((v447 & 4) == 0) {
                goto LABEL_560;
              }
              unint64_t v448 = v447 & 0xFFFFFFFFFFFFFFF8;
              if (!v448) {
                goto LABEL_560;
              }
            }
            *(void *)&long long v575 = v438 - 2;
            sub_1CC5FA668(v448 + 16, &v575);
            uint64_t v3 = (uint64_t)v552;
          }
LABEL_560:
          unsigned int v441 = v438 - 9;
          v438 -= 11;
        }
        while (v441 != v403);
      }
      *(void *)(v401 + 16) = v403;
      *(void *)(*(void *)(v3 + 264) + 752) = *(void *)(*(void *)(v3 + 264) + 744);
      int v437 = *(void **)(v3 + 368);
      BOOL v91 = v544;
      if (v437 != *(void **)(v3 + 360))
      {
        uint64_t v450 = *(unsigned int *)(v3 + 376);
        if (v450 >= 0x21 && 4 * (*(_DWORD *)(v3 + 380) - *(_DWORD *)(v3 + 384)) < v450)
        {
          llvm::SmallPtrSetImplBase::shrink_and_clear(v537);
          goto LABEL_555;
        }
        memset(v437, 255, 8 * v450);
      }
      *(void *)int64_t v549 = 0;
LABEL_555:
      if (v91 == v545) {
        goto LABEL_134;
      }
    }
LABEL_216:
    unsigned int v138 = *(_DWORD *)(v131 + 696);
    if (v134 < v138)
    {
      *(_DWORD *)(v131 + 700) = v134 + 1;
      *(void *)(v133 + 8 * v134) = v132;
      goto LABEL_240;
    }
LABEL_219:
    if (3 * v138 <= 4 * ((int)v134 - *(_DWORD *)(v131 + 704)))
    {
      if (v138 >= 0x40) {
        v138 *= 2;
      }
      else {
        unsigned int v138 = 128;
      }
    }
    else if (v138 - v134 >= v138 >> 3)
    {
      goto LABEL_221;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v131 + 680), v138);
    unsigned int v138 = *(_DWORD *)(v131 + 696);
    uint64_t v133 = *(void *)(v131 + 688);
LABEL_221:
    unsigned int v139 = v138 - 1;
    unsigned int v140 = (v138 - 1) & ((v132 >> 4) ^ (v132 >> 9));
    unsigned int v141 = (uint64_t *)(v133 + 8 * v140);
    uint64_t v142 = *v141;
    if (*v141 == -1)
    {
      unint64_t v143 = 0;
LABEL_233:
      if (v143) {
        size_t v147 = v143;
      }
      else {
        size_t v147 = v141;
      }
      if (*v147 != v132)
      {
        if (*v147 == -2) {
          --*(_DWORD *)(v131 + 704);
        }
        else {
          ++*(_DWORD *)(v131 + 700);
        }
        uint64_t *v147 = v132;
      }
    }
    else
    {
      unint64_t v143 = 0;
      int v144 = 1;
      while (v142 != v132)
      {
        if (v143) {
          BOOL v145 = 0;
        }
        else {
          BOOL v145 = v142 == -2;
        }
        if (v145) {
          unint64_t v143 = v141;
        }
        unsigned int v146 = v140 + v144++;
        unsigned int v140 = v146 & v139;
        unsigned int v141 = (uint64_t *)(v133 + 8 * (v146 & v139));
        uint64_t v142 = *v141;
        if (*v141 == -1) {
          goto LABEL_233;
        }
      }
    }
    goto LABEL_240;
  }
LABEL_134:
  llvm::StackProtector::copyToMachineFrameInfo((uint64_t)v543, *(llvm::MachineFrameInfo **)(*(void *)(v3 + 280) + 56));
  llvm::SwiftErrorValueTracking::propagateVRegs(*(llvm::SwiftErrorValueTracking **)(v3 + 272));
  if (v546) {
    (*(void (**)(uint64_t *))(*v546 + 8))(v546);
  }
  sub_1CD7D71A8(*(void *)(v3 + 304));
  *(void *)(*(void *)(v3 + 304) + 880) = 0;
  if (v562)
  {
    unsigned int v563 = (char *)v562;
    operator delete(v562);
  }
}

void sub_1CCFEF2D8(uint64_t a1)
{
  v48[128] = *MEMORY[0x1E4F143B8];
  uint64_t v40 = (char *)v44;
  uint64_t v41 = (char *)v44;
  int v43 = 0;
  unint64_t v45 = v48;
  unsigned int v47 = 128;
  v48[0] = *(void *)(*(void *)(a1 + 296) + 192);
  uint64_t v42 = 0x100000010;
  v44[0] = v48[0];
  unsigned int v2 = 1;
  unsigned int v37 = 1;
  uint64_t v36 = 0;
  unsigned int v39 = 1;
  uint64_t v38 = 0;
  do
  {
    uint64_t v3 = *((void *)v45 + v2 - 1);
    unsigned int v46 = v2 - 1;
    if (*(_WORD *)(v3 + 56))
    {
      uint64_t v4 = *(unsigned int **)(v3 + 32);
      uint64_t v5 = &v4[10 * *(unsigned __int16 *)(v3 + 56)];
      while (1)
      {
        uint64_t v6 = *(void *)v4;
        if (*(unsigned char *)(*(void *)(*(void *)v4 + 40) + 16 * v4[2]) == 1) {
          break;
        }
LABEL_39:
        v4 += 10;
        if (v4 == v5) {
          goto LABEL_48;
        }
      }
      uint64_t v7 = v41;
      uint64_t v8 = HIDWORD(v42);
      if (v41 == v40)
      {
        if (HIDWORD(v42))
        {
          uint64_t v9 = 0;
          uint64_t v10 = 8 * HIDWORD(v42);
          int v11 = v41;
          while (*(void *)v11 != v6)
          {
            if (*(void *)v11 == -2) {
              uint64_t v9 = v11;
            }
            v11 += 8;
            v10 -= 8;
            if (!v10)
            {
              if (!v9) {
                goto LABEL_13;
              }
              *(void *)uint64_t v9 = v6;
              --v43;
              goto LABEL_37;
            }
          }
          goto LABEL_39;
        }
LABEL_13:
        unsigned int v12 = v42;
        if (HIDWORD(v42) < v42)
        {
          ++HIDWORD(v42);
          *(void *)&v41[8 * v8] = v6;
LABEL_37:
          if (v46 >= (unint64_t)v47) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v45 + v46++) = *(void *)v4;
          goto LABEL_39;
        }
      }
      else
      {
        unsigned int v12 = v42;
      }
      if (3 * v12 <= 4 * (HIDWORD(v42) - v43))
      {
        if (v12 >= 0x40) {
          v12 *= 2;
        }
        else {
          unsigned int v12 = 128;
        }
      }
      else if (v12 - HIDWORD(v42) >= v12 >> 3)
      {
LABEL_18:
        unsigned int v13 = v12 - 1;
        unsigned int v14 = (v12 - 1) & ((v6 >> 4) ^ (v6 >> 9));
        long long v15 = &v7[8 * v14];
        uint64_t v16 = *(void *)v15;
        if (*(void *)v15 != -1)
        {
          BOOL v17 = 0;
          int v18 = 1;
          while (v16 != v6)
          {
            if (v17) {
              BOOL v19 = 0;
            }
            else {
              BOOL v19 = v16 == -2;
            }
            if (v19) {
              BOOL v17 = v15;
            }
            unsigned int v20 = v14 + v18++;
            unsigned int v14 = v20 & v13;
            long long v15 = &v7[8 * (v20 & v13)];
            uint64_t v16 = *(void *)v15;
            if (*(void *)v15 == -1) {
              goto LABEL_30;
            }
          }
          goto LABEL_39;
        }
        BOOL v17 = 0;
LABEL_30:
        if (v17) {
          uint64_t v21 = v17;
        }
        else {
          uint64_t v21 = v15;
        }
        if (*(void *)v21 == v6) {
          goto LABEL_39;
        }
        if (*(void *)v21 == -2) {
          --v43;
        }
        else {
          ++HIDWORD(v42);
        }
        *(void *)uint64_t v21 = v6;
        goto LABEL_37;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v40, v12);
      unsigned int v12 = v42;
      uint64_t v7 = v41;
      goto LABEL_18;
    }
LABEL_48:
    if (*(_WORD *)(v3 + 24) == 49)
    {
      int v22 = *(void **)(v3 + 32);
      int v23 = *(_DWORD *)(v22[5] + 76);
      if (v23 < 0)
      {
        uint64_t v24 = v22[10];
        uint64_t v25 = v22[11];
        unint64_t v26 = (unsigned __int8 *)(*(void *)(v24 + 40) + 16 * v25);
        int v27 = *v26;
        if (*v26)
        {
          BOOL v28 = (v27 - 120) >= 0x20 && (v27 - 2) >= 6;
          if (v28 && (v27 - 15) >= 0x3C) {
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v29 = *((void *)v26 + 1);
          if ((*(_DWORD *)(v29 + 8) & 0xFE) == 0x12) {
            int v30 = *(unsigned __int8 *)(**(void **)(v29 + 16) + 8);
          }
          else {
            int v30 = *(_DWORD *)(v29 + 8);
          }
          if (v30 != 13) {
            goto LABEL_61;
          }
        }
        int v31 = sub_1CD7F2D8C(*(void *)(a1 + 296), v24, v25, 0);
        sub_1CD7F121C(*(void *)(a1 + 296), v24, v25, 0, (uint64_t)&v32);
        if (v37 >= 0x41 && v36) {
          MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
        }
        uint64_t v36 = v32;
        unsigned int v37 = v33;
        unsigned int v33 = 0;
        if (v39 >= 0x41 && v38)
        {
          MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
          uint64_t v38 = v34;
          unsigned int v39 = v35;
          unsigned int v35 = 0;
          if (v33 >= 0x41 && v32) {
            MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v38 = v34;
          unsigned int v39 = v35;
        }
        sub_1CD808694(*(void *)(a1 + 264), v23, v31, (llvm::APInt *)&v36);
      }
    }
LABEL_61:
    unsigned int v2 = v46;
  }
  while (v46);
  if (v39 >= 0x41 && v38) {
    MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
  }
  if (v37 >= 0x41 && v36) {
    MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
  }
  if (v45 != v48) {
    free(v45);
  }
  if (v41 != v40) {
    free(v41);
  }
}

void *sub_1CCFEF794(void *result)
{
  *uint64_t result = &unk_1F26420B8;
  *(void *)(result[2] + 656) = result[1];
  return result;
}

unint64_t sub_1CCFEF7BC(uint64_t ***a1, uint64_t ***this, llvm::DiagnosticInfoOptimizationBase *a3, int a4)
{
  if (*((void *)a3 + 3)) {
    BOOL v7 = a4 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    goto LABEL_20;
  }
  if ((*((unsigned char *)a1 + 23) & 0x10) == 0)
  {
    int v18 = 0;
    BOOL v17 = &byte_1CFBCE98E;
    goto LABEL_14;
  }
  uint64_t v8 = ***a1;
  uint64_t v9 = *(void *)(v8 + 152);
  uint64_t v10 = *(unsigned int *)(v8 + 168);
  if (!v10) {
    goto LABEL_12;
  }
  LODWORD(v11) = (v10 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  unsigned int v12 = (uint64_t ****)(v9 + 16 * v11);
  unsigned int v13 = *v12;
  if (*v12 != a1)
  {
    int v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      unsigned int v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == a1)
      {
        unsigned int v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_13;
      }
    }
LABEL_12:
    unsigned int v12 = (uint64_t ****)(v9 + 16 * v10);
  }
LABEL_13:
  uint64_t v16 = v12[1];
  BOOL v19 = *v16;
  BOOL v17 = (char *)(v16 + 2);
  int v18 = v19;
LABEL_14:
  __int16 v24 = 1283;
  v23[0] = " (in function: ";
  v23[2] = v17;
  v23[3] = v18;
  v25[0] = v23;
  v25[2] = ")";
  __int16 v26 = 770;
  llvm::Twine::str((llvm::Twine *)v25, v27);
  unsigned int v20 = (void **)v27[0];
  if (v28 >= 0) {
    unsigned int v20 = v27;
  }
  uint64_t v21 = (void *)(v28 & 0x7F);
  if (v28 < 0) {
    uint64_t v21 = v27[1];
  }
  v29[0] = v20;
  v29[1] = v21;
  sub_1CC59ADEC((uint64_t *)a3 + 10, (uint64_t)v29);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
LABEL_20:
  if (a4)
  {
    llvm::DiagnosticInfoOptimizationBase::getMsg(a3, (uint64_t)v23);
    __int16 v26 = 260;
    v25[0] = v23;
    llvm::report_fatal_error((llvm *)v25, (const llvm::Twine *)1);
  }
  return llvm::OptimizationRemarkEmitter::emit(this, a3);
}

uint64_t sub_1CCFEF948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16) - 33;
  if (v4 > 0x37) {
    goto LABEL_5;
  }
  if (((1 << (*(unsigned char *)(a1 + 16) - 33)) & 0x8000000000041) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    if (!v7 || (*(unsigned char *)(v7 + 17) & 0x30) == 0)
    {
      int v8 = *(_DWORD *)(a1 + 20);
      if (v8 < 0)
      {
        uint64_t v9 = a1 - 32 * (v8 & 0x7FFFFFF);
        uint64_t v12 = *(void *)(v9 - 8);
        uint64_t v10 = v9 - 8;
        uint64_t v11 = v12;
        if (v12)
        {
          uint64_t v13 = -v11;
          do
          {
            unsigned int v14 = *(_DWORD *)(*(void *)(v10 + v13) + 8);
            BOOL v15 = v14 > 7;
            int v16 = (1 << v14) & 0x83;
            if (v15 || v16 == 0) {
              return 0;
            }
            v13 += 16;
          }
          while (v13);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) == 0)
      {
        uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44);
        if (!result) {
          return result;
        }
      }
    }
    goto LABEL_5;
  }
  if (v4 != 27)
  {
    if (((1 << (*(unsigned char *)(a1 + 16) - 33)) & 0x808001D0000010) == 0) {
      goto LABEL_5;
    }
    return 0;
  }
  if ((*(_WORD *)(a1 + 18) & 0x301) != 0) {
    return 0;
  }
LABEL_5:
  if (*(unsigned __int8 *)(a1 + 16) - 29 < 0xB) {
    return 0;
  }
  if (sub_1CBF63B28(a1)) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + 16) - 38;
  if (v5 < 0x39 && ((0x100060000000001uLL >> v5) & 1) != 0) {
    return 0;
  }
  uint64_t v18 = 0;
  uint64_t v19 = a1;
  return sub_1CD3C8538((uint64_t *)(a2 + 80), &v19, &v18) ^ 1;
}

void sub_1CCFEFABC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  char v28 = v30;
  uint64_t v29 = 0x400000000;
  uint64_t v6 = *(unsigned int *)(a5 + 8);
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v11 = *(void *)(*(void *)a5 + 8 * i);
      if (v11 && (v11 != a2 || (a6 & 1) == 0))
      {
        int v12 = *(unsigned __int16 *)(v11 + 58);
        int v13 = v12 - 1;
        uint64_t v14 = *(unsigned __int8 *)(*(void *)(v11 + 40) + 16 * (v12 - 1));
        int v15 = v12 - 2;
        if (v14 == 172) {
          int v16 = v15;
        }
        else {
          int v16 = v13;
        }
        uint64_t v17 = *(void *)(a1 + 296);
        v23[0] = &unk_1F2642680;
        v23[1] = a5;
        __int16 v24 = v23;
        sub_1CCF762E8(v25, v17, (uint64_t)v23);
        if (v24 == v23)
        {
          (*(void (**)(void *))(v23[0] + 32))(v23);
        }
        else if (v24)
        {
          (*(void (**)(void))(*v24 + 40))();
        }
        if (*(_WORD *)(v11 + 24) != 2)
        {
          sub_1CD800DA0(*(void *)(a1 + 296), v11, v16, a3, a4);
          sub_1CD808A6C(a3);
        }
        if (v11 != a2 && !*(void *)(v11 + 48))
        {
          uint64_t v18 = (char *)v28;
          if (v29)
          {
            uint64_t v19 = 8 * v29;
            uint64_t v18 = (char *)v28;
            while (*(void *)v18 != v11)
            {
              v18 += 8;
              v19 -= 8;
              if (!v19)
              {
                uint64_t v18 = (char *)v28 + 8 * v29;
                break;
              }
            }
          }
          if (v29 == (v18 - (unsigned char *)v28) >> 3)
          {
            if (v29 >= HIDWORD(v29)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v28 + v29) = v11;
            LODWORD(v29) = v29 + 1;
          }
        }
        v25[0] = &unk_1F26420F0;
        if (v27 == v26)
        {
          (*(void (**)(void *))(v26[0] + 32))(v26);
        }
        else if (v27)
        {
          (*(void (**)(void))(*v27 + 40))();
        }
        *(void *)(v25[2] + 656) = v25[1];
      }
    }
    if (v29) {
      sub_1CD7EA288(*(void **)(a1 + 296), (uint64_t)&v28);
    }
  }
  if (v28 != v30) {
    free(v28);
  }
}

void sub_1CCFEFDD4(uint64_t a1, unint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  uint64_t v9 = a2;
  uint64_t v10 = (uint64_t *)a1;
  uint64_t v587 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = *(unsigned __int16 *)(a2 + 24);
  switch(*(_WORD *)(a2 + 24))
  {
    case 1:
    case 2:
    case 6:
    case 9:
    case 0xA:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x31:
    case 0x32:
      goto LABEL_7;
    case 3:
    case 4:
    case 5:
      int v12 = *(uint64_t **)(a2 + 32);
      uint64_t v13 = *v12;
      sub_1CD800DA0(*(void *)(a1 + 296), a2, 0, *v12, v12[1]);
      sub_1CD808A6C(v13);
      uint64_t v14 = (void *)v10[37];
      sub_1CD7EA438(v14, v9);
      return;
    case 7:
    case 8:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
      goto LABEL_11;
    case 0x1B:
      sub_1CD8090CC(a1, a2);
      return;
    case 0x1C:
      sub_1CD809200(a1, a2);
      return;
    case 0x33:
      uint64_t v454 = *(void **)(a1 + 296);
      uint64_t v455 = *(void *)(a2 + 40);
      uint64_t v456 = *(llvm **)v455;
      uint64_t v457 = *(void *)(v455 + 8);
      sub_1CD800640(v454, a2, 10, v456, v457);
      return;
    case 0x34:
      uint64_t v458 = *(void **)(a1 + 296);
      int64_t v460 = *(uint64_t **)(a2 + 32);
      uint64_t v459 = *(void *)(a2 + 40);
      char v461 = *(llvm **)v459;
      uint64_t v462 = *(void *)(v459 + 8);
      uint64_t v463 = *v460;
      uint64_t v464 = v460[1];
      __int16 v465 = 19;
      goto LABEL_853;
    default:
      uint64_t v15 = (v11 - 261);
      if (v15 > 0x38) {
        goto LABEL_11;
      }
      if (((1 << (v11 - 5)) & 0x11800000012000CLL) != 0)
      {
LABEL_7:
        *(_DWORD *)(a2 + 28) = -1;
        return;
      }
      if (((1 << (v11 - 5)) & 3) == 0)
      {
        if (v15 != 27)
        {
LABEL_11:
          uint64_t v570 = v572;
          v572[0] = a2;
          v572[1] = 0;
          uint64_t v571 = 0x800000001;
          __src[0] = v569;
          __src[1] = (void *)0x800000000;
          __p = v567;
          __dst = (void *)0x800000000;
          int v562 = v564;
          uint64_t v563 = 0x200000000;
          char v559 = v561;
          uint64_t v560 = 0x300000000;
          uint64_t v16 = *(void *)(a1 + 448);
          uint64_t v17 = *(void *)(a1 + 456);
          if (v16 == v17)
          {
            if (*a3 != 31) {
              goto LABEL_27;
            }
            for (unsigned int i = 1; ; unsigned int i = v19 + 2 + v21)
            {
              unsigned int v19 = i + 1;
              int v20 = (char)v8[i];
              LODWORD(v21) = v20;
              if (v20 < 0)
              {
                uint64_t v21 = v20 & 0x7F;
                int v22 = 7;
                do
                {
                  char v23 = v8[v19++];
                  v21 |= (unint64_t)(v23 & 0x7F) << v22;
                  v22 += 7;
                }
                while (v23 < 0);
              }
              if (!v21) {
                break;
              }
              unint64_t v24 = v8[v19] | ((unint64_t)v8[v19 + 1] << 8);
              unint64_t v25 = (v10[57] - v16) >> 2;
              if (v25 <= v24)
              {
                unint64_t v26 = 2 * v24 + 2;
                if (v26 <= v25)
                {
                  if (v26 < v25) {
                    v10[57] = v16 + 4 * v26;
                  }
                }
                else
                {
                  sub_1CBF2A8C4((char **)v10 + 56, v26 - v25);
                  uint64_t v16 = v10[56];
                }
              }
              *(_DWORD *)(v16 + 4 * v24) = v19 + 2;
            }
            unint64_t v11 = *(unsigned __int16 *)(v9 + 24);
            uint64_t v17 = v10[57];
          }
          if (v11 < (v17 - v16) >> 2)
          {
            int v27 = *(_DWORD *)(v16 + 4 * v11);
            goto LABEL_28;
          }
LABEL_27:
          int v27 = 0;
LABEL_28:
          uint64_t v28 = 0;
          uint64_t v543 = 0;
          uint64_t v545 = 0;
          uint64_t v547 = 0;
          uint64_t v29 = 0;
LABEL_29:
          while (2)
          {
            int v30 = v8[v27];
            int v31 = v27 + 1;
            switch(v8[v27])
            {
              case 0:
                while (2)
                {
                  int v27 = v31 + 1;
                  LODWORD(v84) = v8[v31];
                  if ((char)v8[v31] < 0)
                  {
                    v84 &= 0x7Fu;
                    int v85 = 7;
                    do
                    {
                      char v86 = v8[v27++];
                      v84 |= (unint64_t)(v86 & 0x7F) << v85;
                      v85 += 7;
                    }
                    while (v86 < 0);
                  }
                  if (!v84) {
                    goto LABEL_655;
                  }
                  int v31 = v84 + v27;
                  int v87 = v8[v27];
                  int v88 = v27 + 1;
                  switch(v8[v27])
                  {
                    case 0x16:
                      uint64_t v118 = (char *)__p + 24 * v8[v88];
                      if (*(void *)v118 != v9 || *((_DWORD *)v118 + 2) != v29) {
                        continue;
                      }
                      goto LABEL_392;
                    case 0x17:
                    case 0x18:
                    case 0x19:
                    case 0x1A:
                      unsigned int v100 = v87 - 23;
                      if (v100 >= *(unsigned __int16 *)(v9 + 56)) {
                        continue;
                      }
                      uint64_t v101 = *(void *)(v9 + 32) + 40 * v100;
                      int v102 = (char *)__p + 24 * v8[v88];
                      if (*(void *)v102 != *(void *)v101 || *((_DWORD *)v102 + 2) != *(_DWORD *)(v101 + 8)) {
                        continue;
                      }
                      goto LABEL_392;
                    case 0x1B:
                      if (((*(uint64_t (**)(uint64_t *, void))(*v10 + 240))(v10, v8[v88]) & 1) == 0) {
                        continue;
                      }
                      goto LABEL_392;
                    case 0x1C:
                      if (((*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 248))(v10, v9, v8[v88]) & 1) == 0)continue; {
                      goto LABEL_392;
                      }
                    case 0x1E:
                      if ((v8[v88] | (v8[v27 + 2] << 8)) != *(unsigned __int16 *)(v9 + 24)) {
                        continue;
                      }
                      goto LABEL_654;
                    case 0x20:
                      int v93 = v8[v88];
                      uint64_t v94 = (unsigned __int8 *)(*(void *)(v9 + 40) + 16 * v29);
                      int v95 = *v94;
                      if (v93 != v95) {
                        goto LABEL_178;
                      }
                      uint64_t v112 = *((void *)v94 + 1);
                      if (v93) {
                        BOOL v113 = 1;
                      }
                      else {
                        BOOL v113 = v112 == 0;
                      }
                      if (!v113) {
                        continue;
                      }
                      goto LABEL_392;
                    case 0x21:
                      int v119 = v8[v27 + 2];
                      uint64_t v120 = (unsigned __int8 *)(*(void *)(v9 + 40) + 16 * v8[v88]);
                      int v121 = *v120;
                      if (v119 == v121)
                      {
                        uint64_t v122 = *((void *)v120 + 1);
                        if (v8[v27 + 2]) {
                          BOOL v123 = 1;
                        }
                        else {
                          BOOL v123 = v122 == 0;
                        }
                        if (v123) {
                          goto LABEL_654;
                        }
                        continue;
                      }
                      if (v119 != 254) {
                        continue;
                      }
                      uint64_t v135 = *((void *)v120 + 1);
                      if (v121 != (*(unsigned __int8 (**)(uint64_t, uint64_t, void))(*(void *)v10[43]
                                                                                               + 32))(v10[43], *(void *)(**(void **)(v10[37] + 40) + 40) + 272, 0))continue;
                      if (v135 && v121 == 0) {
                        continue;
                      }
LABEL_654:
                      v27 += 3;
                      if (!v31) {
                        goto LABEL_655;
                      }
                      goto LABEL_394;
                    case 0x23:
                    case 0x24:
                    case 0x25:
                    case 0x26:
                    case 0x27:
                    case 0x28:
                    case 0x29:
                    case 0x2A:
                      unsigned int v89 = v87 - 35;
                      if (v89 >= *(unsigned __int16 *)(v9 + 56)) {
                        continue;
                      }
                      uint64_t v90 = *(void *)(v9 + 32) + 40 * v89;
                      uint64_t v91 = *(void *)v90;
                      uint64_t v92 = *(unsigned int *)(v90 + 8);
                      int v93 = v8[v88];
                      uint64_t v94 = (unsigned __int8 *)(*(void *)(v91 + 40) + 16 * v92);
                      int v95 = *v94;
                      if (v93 == v95)
                      {
                        if (v93 || !*((void *)v94 + 1)) {
                          goto LABEL_392;
                        }
                        continue;
                      }
LABEL_178:
                      if (v93 != 254) {
                        continue;
                      }
                      uint64_t v114 = v10[43];
                      uint64_t v115 = *(void *)(**(void **)(v10[37] + 40) + 40) + 272;
                      uint64_t v116 = *((void *)v94 + 1);
                      goto LABEL_180;
                    case 0x2B:
                      int v104 = v27 + 2;
                      int v105 = (char)v8[v88];
                      unint64_t v106 = v8[v88];
                      if (v105 < 0)
                      {
                        v106 &= 0x7Fu;
                        int v137 = 7;
                        do
                        {
                          char v138 = v8[v104];
                          int v27 = v104 + 1;
                          v106 |= (unint64_t)(v138 & 0x7F) << v137;
                          v137 += 7;
                          ++v104;
                        }
                        while (v138 < 0);
                      }
                      else
                      {
                        v27 += 2;
                      }
                      unint64_t v139 = 0x8000000000000000;
                      if (v106 != 1) {
                        unint64_t v139 = -(uint64_t)(v106 >> 1);
                      }
                      if (v106) {
                        unint64_t v131 = v139;
                      }
                      else {
                        unint64_t v131 = v106 >> 1;
                      }
                      int v140 = *(unsigned __int16 *)(v9 + 24);
                      if (v140 != 35 && v140 != 11) {
                        continue;
                      }
                      uint64_t v134 = *(void *)(v9 + 80);
                      goto LABEL_233;
                    case 0x2C:
                    case 0x2D:
                    case 0x2E:
                    case 0x2F:
                    case 0x30:
                      unsigned int v96 = v87 - 44;
                      if (v96 >= *(unsigned __int16 *)(v9 + 56)) {
                        continue;
                      }
                      int v97 = v27 + 2;
                      int v98 = (char)v8[v88];
                      unint64_t v99 = v8[v88];
                      if (v98 < 0)
                      {
                        v99 &= 0x7Fu;
                        int v127 = 7;
                        do
                        {
                          char v128 = v8[v97];
                          int v27 = v97 + 1;
                          v99 |= (unint64_t)(v128 & 0x7F) << v127;
                          v127 += 7;
                          ++v97;
                        }
                        while (v128 < 0);
                      }
                      else
                      {
                        v27 += 2;
                      }
                      uint64_t v129 = *(void *)(*(void *)(v9 + 32) + 40 * v96);
                      unint64_t v130 = 0x8000000000000000;
                      if (v99 != 1) {
                        unint64_t v130 = -(uint64_t)(v99 >> 1);
                      }
                      unint64_t v131 = (v99 & 1) != 0 ? v130 : v99 >> 1;
                      int v132 = *(unsigned __int16 *)(v129 + 24);
                      if (v132 != 35 && v132 != 11) {
                        continue;
                      }
                      uint64_t v134 = *(void *)(v129 + 80);
LABEL_233:
                      unsigned int v142 = *(_DWORD *)(v134 + 32);
                      if (v142 > 0x40) {
                        uint64_t v143 = **(void **)(v134 + 24);
                      }
                      else {
                        uint64_t v143 = (uint64_t)(*(void *)(v134 + 24) << -(char)v142) >> -(char)v142;
                      }
                      if (v143 == v131) {
                        goto LABEL_393;
                      }
                      continue;
                    case 0x31:
                      int v103 = *(_DWORD *)(v9 + 76);
                      goto LABEL_154;
                    case 0x32:
                      if (*(unsigned __int16 *)(v9 + 56) < 3u) {
                        continue;
                      }
                      int v103 = *(_DWORD *)(*(void *)(*(void *)(v9 + 32) + 80) + 76);
LABEL_154:
                      if (v103 == v8[v88]) {
                        goto LABEL_392;
                      }
                      continue;
                    case 0x33:
                      int v110 = v8[v88];
                      int v95 = *(unsigned __int8 *)(v9 + 80);
                      if (v110 == v95)
                      {
                        if (v110) {
                          BOOL v111 = 1;
                        }
                        else {
                          BOOL v111 = *(void *)(v9 + 88) == 0;
                        }
                        if (v111) {
                          goto LABEL_392;
                        }
                        continue;
                      }
                      if (v110 != 254) {
                        continue;
                      }
                      uint64_t v114 = v10[43];
                      uint64_t v115 = *(void *)(**(void **)(v10[37] + 40) + 40) + 272;
                      uint64_t v116 = *(void *)(v9 + 88);
LABEL_180:
                      if (v95 != (*(unsigned __int8 (**)(uint64_t, uint64_t, void))(*(void *)v114 + 32))(v114, v115, 0))continue; {
                      if (v116 && v95 == 0)
                      }
                        continue;
LABEL_392:
                      v27 += 2;
LABEL_393:
                      if (!v31) {
                        goto LABEL_655;
                      }
LABEL_394:
                      v576[1] = &v578;
                      uint64_t v577 = 0x400000000;
                      uint64_t v582 = 0;
                      int v583 = 0;
                      uint64_t v584 = 0;
                      int v585 = 0;
                      LODWORD(v576[0]) = v31;
                      sub_1CD3D61B4((unsigned int *)&v576[1], v570, (unsigned char *)v570 + 16 * v571);
                      int v580 = (int)__dst;
                      int v581 = v563;
                      uint64_t v582 = v545;
                      int v583 = v547;
                      uint64_t v584 = v28;
                      int v585 = v543;
                      BOOL v586 = v560 != 0;
                      int v221 = (int)__src[1];
                      uint64_t v222 = v576;
                      uint64_t v223 = (char *)__src[0];
                      if (LODWORD(__src[1]) >= HIDWORD(__src[1]))
                      {
                        uint64_t v533 = v28;
                        BOOL v408 = __src[0] <= v576 && (char *)__src[0] + 136 * LODWORD(__src[1]) > (char *)v576;
                        BOOL v542 = v408;
                        if (v408) {
                          unint64_t v409 = 0xF0F0F0F0F0F0F0F1 * (((char *)v576 - (char *)__src[0]) >> 3);
                        }
                        else {
                          unint64_t v409 = -1;
                        }
                        unint64_t v537 = v409;
                        unint64_t v410 = LODWORD(__src[1]) + 1;
                        if (LODWORD(__src[1]) == -1) {
                          sub_1CD0A88F0(v410);
                        }
                        if (HIDWORD(__src[1]) == -1) {
                          sub_1CD0A89A8(0xFFFFFFFFuLL);
                        }
                        unint64_t v411 = (2 * HIDWORD(__src[1])) | 1;
                        if (v411 <= v410) {
                          unint64_t v411 = LODWORD(__src[1]) + 1;
                        }
                        if (v411 >= 0xFFFFFFFF) {
                          unint64_t v411 = 0xFFFFFFFFLL;
                        }
                        int v530 = v411;
                        uint64_t v412 = (char *)malloc_type_malloc(136 * v411, 0x4065EBACuLL);
                        if (!v412) {
                          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
                        }
                        uint64_t v223 = v412;
                        int v413 = (char *)__src[0];
                        if (LODWORD(__src[1]))
                        {
                          uint64_t v414 = (char *)__src[0] + 136 * LODWORD(__src[1]);
                          uint64_t v415 = (char *)__src[0] + 8;
                          uint64_t v416 = v412;
                          do
                          {
                            uint64_t v417 = v415 - 8;
                            *(_DWORD *)uint64_t v416 = *((_DWORD *)v415 - 2);
                            *((void *)v416 + 1) = v416 + 24;
                            *((void *)v416 + 2) = 0x400000000;
                            if (*((_DWORD *)v415 + 2)) {
                              sub_1CD727100((uint64_t)(v416 + 8), (uint64_t)v415);
                            }
                            long long v418 = *((_OWORD *)v415 + 5);
                            long long v419 = *((_OWORD *)v415 + 6);
                            *(_OWORD *)(v416 + 113) = *(_OWORD *)(v415 + 105);
                            *(_OWORD *)(v416 + 104) = v419;
                            *(_OWORD *)(v416 + 88) = v418;
                            v416 += 136;
                            v415 += 136;
                          }
                          while (v417 + 136 != v414);
                          int v413 = (char *)__src[0];
                          if (LODWORD(__src[1]))
                          {
                            uint64_t v421 = 136 * LODWORD(__src[1]);
                            do
                            {
                              uint64_t v422 = *(char **)&v413[v421 - 128];
                              if (&v413[v421 - 112] != v422) {
                                free(v422);
                              }
                              v421 -= 136;
                            }
                            while (v421);
                            int v413 = (char *)__src[0];
                          }
                        }
                        if (v413 != (char *)v569) {
                          free(v413);
                        }
                        __src[0] = v223;
                        HIDWORD(__src[1]) = v530;
                        uint64_t v28 = v533;
                        if (v542) {
                          uint64_t v222 = (void **)&v223[136 * v537];
                        }
                        else {
                          uint64_t v222 = v576;
                        }
                        int v224 = (uint64_t *)&v223[136 * v537 + 16];
                        if (!v542) {
                          int v224 = &v577;
                        }
                        int v221 = (int)__src[1];
                      }
                      else
                      {
                        int v224 = &v577;
                      }
                      unsigned int v225 = &v223[136 * v221];
                      *(_DWORD *)unsigned int v225 = *(_DWORD *)v222;
                      *((void *)v225 + 2) = 0x400000000;
                      *((void *)v225 + 1) = v225 + 24;
                      uint64_t v226 = (uint64_t)(v225 + 8);
                      if (*(_DWORD *)v224) {
                        sub_1CD629BB0(v226, (uint64_t)(v222 + 1));
                      }
                      unint64_t v227 = &v223[136 * v221];
                      long long v228 = *(_OWORD *)(v222 + 11);
                      long long v229 = *(_OWORD *)(v222 + 13);
                      *(_OWORD *)(v227 + 113) = *(_OWORD *)((char *)v222 + 113);
                      *(_OWORD *)(v227 + 104) = v229;
                      *(_OWORD *)(v227 + 88) = v228;
                      ++LODWORD(__src[1]);
                      a1 = (uint64_t)v576[1];
                      if (v576[1] != &v578) {
                        free(v576[1]);
                      }
                      break;
                    case 0x35:
                      int v124 = v27 + 2;
                      int v125 = (char)v8[v88];
                      uint64_t v126 = v125;
                      if (v125 < 0)
                      {
                        uint64_t v126 = v125 & 0x7F;
                        int v150 = 7;
                        do
                        {
                          char v151 = v8[v124];
                          int v27 = v124 + 1;
                          v126 |= (unint64_t)(v151 & 0x7F) << v150;
                          v150 += 7;
                          ++v124;
                        }
                        while (v151 < 0);
                      }
                      else
                      {
                        v27 += 2;
                      }
                      if (*(_WORD *)(v9 + 24) != 171) {
                        continue;
                      }
                      uint64_t v152 = *(uint64_t **)(v9 + 32);
                      uint64_t v153 = v152[5];
                      int v154 = *(unsigned __int16 *)(v153 + 24);
                      BOOL v155 = v154 == 35 || v154 == 11;
                      if (!v155 || !sub_1CD808C3C((uint64_t)v10, *v152, v152[1], *(void *)(v153 + 80), v126)) {
                        continue;
                      }
                      goto LABEL_393;
                    case 0x36:
                      int v107 = v27 + 2;
                      int v108 = (char)v8[v88];
                      uint64_t v109 = v108;
                      if (v108 < 0)
                      {
                        uint64_t v109 = v108 & 0x7F;
                        int v144 = 7;
                        do
                        {
                          char v145 = v8[v107];
                          int v27 = v107 + 1;
                          v109 |= (unint64_t)(v145 & 0x7F) << v144;
                          v144 += 7;
                          ++v107;
                        }
                        while (v145 < 0);
                      }
                      else
                      {
                        v27 += 2;
                      }
                      if (*(_WORD *)(v9 + 24) != 172) {
                        continue;
                      }
                      unsigned int v146 = *(uint64_t **)(v9 + 32);
                      uint64_t v147 = v146[5];
                      int v148 = *(unsigned __int16 *)(v147 + 24);
                      BOOL v149 = v148 == 35 || v148 == 11;
                      if (!v149 || !sub_1CD808E40((uint64_t)v10, *v146, v146[1], *(void *)(v147 + 80), v109)) {
                        continue;
                      }
                      goto LABEL_393;
                    default:
                      goto LABEL_393;
                  }
                  goto LABEL_29;
                }
              case 1:
                if (v571 < 2) {
                  uint64_t v359 = 0;
                }
                else {
                  uint64_t v359 = *((void *)v570 + 2 * v571 - 4);
                }
                v576[0] = (void *)v9;
                v576[1] = v29;
                uint64_t v577 = v359;
                goto LABEL_32;
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
                if (v30 - 2 >= *(unsigned __int16 *)(v9 + 56)) {
                  goto LABEL_655;
                }
                *(_OWORD *)v576 = *(_OWORD *)(*(void *)(v9 + 32) + 40 * (v30 - 2));
                uint64_t v577 = v9;
LABEL_32:
                a1 = sub_1CD483108((uint64_t)&__p, (unint64_t)v576);
                uint64_t v32 = (char *)__p + 24 * __dst;
                long long v33 = *(_OWORD *)a1;
                *((void *)v32 + 2) = *(void *)(a1 + 16);
                *(_OWORD *)uint64_t v32 = v33;
                LODWORD(__dst) = __dst + 1;
                goto LABEL_129;
              case 0xA:
                a1 = sub_1CD3ED460(v9);
                ++v27;
                if (!a1) {
                  continue;
                }
                int v27 = v31;
                if (!v9) {
                  continue;
                }
                if (v563 >= (unint64_t)HIDWORD(v563)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v562 + v563) = *(void *)(v9 + 96);
                LODWORD(v563) = v563 + 1;
                goto LABEL_129;
              case 0xB:
                ++v27;
                if (!*(_WORD *)(v9 + 56)) {
                  continue;
                }
                uint64_t v73 = *(void *)(v9 + 32) + 40 * (*(unsigned __int16 *)(v9 + 56) - 1);
                uint64_t v74 = *(void *)v73;
                uint64_t v75 = *(unsigned int *)(v73 + 8);
                uint64_t v76 = v543;
                if (*(unsigned __int8 *)(*(void *)(v74 + 40) + 16 * v75) == 172) {
                  uint64_t v76 = v75;
                }
                uint64_t v543 = v76;
                if (*(unsigned __int8 *)(*(void *)(v74 + 40) + 16 * v75) == 172) {
                  uint64_t v28 = v74;
                }
                goto LABEL_129;
              case 0xC:
                if (*(unsigned __int16 *)(v9 + 56) <= v8[v31]) {
                  goto LABEL_655;
                }
                uint64_t v71 = *(void *)(v9 + 32) + 40 * v8[v31];
                uint64_t v9 = *(void *)v71;
                uint64_t v29 = (void *)*(unsigned int *)(v71 + 8);
                if (v571 >= (unint64_t)HIDWORD(v571)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v27 += 2;
                uint64_t v72 = (uint64_t *)((char *)v570 + 16 * v571);
                *uint64_t v72 = v9;
                v72[1] = (uint64_t)v29;
                LODWORD(v571) = v571 + 1;
                continue;
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x14:
                if (v30 - 13 >= *(unsigned __int16 *)(v9 + 56)) {
                  goto LABEL_655;
                }
                uint64_t v38 = *(void *)(v9 + 32) + 40 * (v30 - 13);
                uint64_t v9 = *(void *)v38;
                uint64_t v29 = (void *)*(unsigned int *)(v38 + 8);
                if (v571 >= (unint64_t)HIDWORD(v571)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unsigned int v39 = (uint64_t *)((char *)v570 + 16 * v571);
                *unsigned int v39 = v9;
                v39[1] = (uint64_t)v29;
                LODWORD(v571) = v571 + 1;
                goto LABEL_129;
              case 0x15:
                LODWORD(v571) = v571 - 1;
                int64_t v83 = (char *)v570 + 16 * v571;
                uint64_t v9 = *((void *)v83 - 2);
                uint64_t v29 = (void *)*((unsigned int *)v83 - 2);
                goto LABEL_129;
              case 0x16:
                unsigned int v70 = (char *)__p + 24 * v8[v31];
                if (*(void *)v70 != v9) {
                  goto LABEL_655;
                }
                v27 += 2;
                if (*((_DWORD *)v70 + 2) != v29) {
                  goto LABEL_655;
                }
                continue;
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
                if (v30 - 23 >= *(unsigned __int16 *)(v9 + 56)) {
                  goto LABEL_655;
                }
                uint64_t v42 = *(void *)(v9 + 32) + 40 * (v30 - 23);
                int v43 = (char *)__p + 24 * v8[v31];
                if (*(void *)v43 != *(void *)v42) {
                  goto LABEL_655;
                }
                v27 += 2;
                if (*((_DWORD *)v43 + 2) != *(_DWORD *)(v42 + 8)) {
                  goto LABEL_655;
                }
                continue;
              case 0x1B:
                v27 += 2;
                a1 = (*(uint64_t (**)(uint64_t *, void))(*v10 + 240))(v10, v8[v31]);
                if ((a1 & 1) == 0) {
                  goto LABEL_655;
                }
                continue;
              case 0x1C:
                v27 += 2;
                a1 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(*v10 + 248))(v10, v9, v8[v31]);
                if ((a1 & 1) == 0) {
                  goto LABEL_655;
                }
                continue;
              case 0x1D:
                int v158 = v8[v31];
                int v159 = v27 + 2;
                v576[0] = &v577;
                v576[1] = (void *)0x800000000;
                if (v158)
                {
                  unsigned int v160 = 0;
                  do
                  {
                    if (v160 >= HIDWORD(v576[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_OWORD *)v576[0] + v160) = *(_OWORD *)((char *)__p + 24 * v8[v159]);
                    unsigned int v160 = ++LODWORD(v576[1]);
                    ++v159;
                    --v158;
                  }
                  while (v158);
                }
                char v161 = (*(uint64_t (**)(uint64_t *, uint64_t, void, void **))(*v10 + 256))(v10, v9, v8[v159], v576);
                a1 = (uint64_t)v576[0];
                if (v576[0] != &v577) {
                  free(v576[0]);
                }
                int v27 = v159 + 1;
                if ((v161 & 1) == 0) {
                  goto LABEL_655;
                }
                continue;
              case 0x1E:
                int v77 = v27 + 2;
                v27 += 3;
                int v51 = v8[v31] | (v8[v77] << 8);
                int v52 = *(unsigned __int16 *)(v9 + 24);
                goto LABEL_112;
              case 0x1F:
                int v64 = *(unsigned __int16 *)(v9 + 24);
                while (1)
                {
                  int v65 = v31 + 1;
                  LODWORD(v66) = v8[v31];
                  if ((char)v8[v31] < 0)
                  {
                    v66 &= 0x7Fu;
                    int v67 = 7;
                    do
                    {
                      char v68 = v8[v65++];
                      v66 |= (unint64_t)(v68 & 0x7F) << v67;
                      v67 += 7;
                    }
                    while (v68 < 0);
                  }
                  if (!v66) {
                    goto LABEL_655;
                  }
                  int v69 = v8[v65] | (v8[v65 + 1] << 8);
                  if (v69 == v64) {
                    LODWORD(v66) = 0;
                  }
                  int v31 = v65 + v66 + 2;
                  if (v69 == v64) {
                    goto LABEL_129;
                  }
                }
              case 0x20:
                v27 += 2;
                int v35 = v8[v31];
                uint64_t v36 = (unsigned __int8 *)(*(void *)(v9 + 40) + 16 * v29);
                goto LABEL_115;
              case 0x21:
                int v78 = v27 + 2;
                v27 += 3;
                int v35 = v8[v78];
                uint64_t v36 = (unsigned __int8 *)(*(void *)(v9 + 40) + 16 * v8[v31]);
LABEL_115:
                int v37 = *v36;
                if (v35 != v37) {
                  goto LABEL_121;
                }
                uint64_t v79 = *((void *)v36 + 1);
                if (v35) {
                  BOOL v80 = 1;
                }
                else {
                  BOOL v80 = v79 == 0;
                }
                if (!v80) {
                  goto LABEL_655;
                }
                continue;
              case 0x22:
                unsigned __int8 v57 = *(unsigned char *)(*(void *)(v9 + 40) + 16 * v29);
                while (1)
                {
                  int v58 = v31 + 1;
                  int v59 = (char)v8[v31];
                  LODWORD(v60) = v8[v31];
                  if (v59 < 0)
                  {
                    v60 &= 0x7Fu;
                    int v61 = 7;
                    do
                    {
                      char v62 = v8[v58++];
                      v60 |= (unint64_t)(v62 & 0x7F) << v61;
                      v61 += 7;
                    }
                    while (v62 < 0);
                  }
                  if (!v60) {
                    goto LABEL_655;
                  }
                  a1 = v8[v58];
                  if (a1 == 254) {
                    a1 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v10[43] + 32))(v10[43], *(void *)(**(void **)(v10[37] + 40) + 40) + 272, 0);
                  }
                  if (a1 == v57) {
                    int v63 = 0;
                  }
                  else {
                    int v63 = v60;
                  }
                  int v31 = v58 + 1 + v63;
                  if (a1 == v57)
                  {
LABEL_129:
                    int v27 = v31;
                    goto LABEL_29;
                  }
                }
              case 0x23:
              case 0x24:
              case 0x25:
              case 0x26:
              case 0x27:
              case 0x28:
              case 0x29:
              case 0x2A:
                if (v30 - 35 >= *(unsigned __int16 *)(v9 + 56)) {
                  goto LABEL_655;
                }
                uint64_t v34 = (unsigned int *)(*(void *)(v9 + 32) + 40 * (v30 - 35));
                v27 += 2;
                int v35 = v8[v31];
                uint64_t v36 = (unsigned __int8 *)(*(void *)(*(void *)v34 + 40) + 16 * v34[2]);
                int v37 = *v36;
                if (v35 == v37)
                {
                  if (!v8[v31] && *((void *)v36 + 1)) {
                    goto LABEL_655;
                  }
                  continue;
                }
LABEL_121:
                if (v35 == 254)
                {
                  uint64_t v81 = *((void *)v36 + 1);
                  a1 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v10[43] + 32))(v10[43], *(void *)(**(void **)(v10[37] + 40) + 40) + 272, 0);
                  if (v37 == a1 && (v37 || v81 == 0)) {
                    continue;
                  }
                }
                goto LABEL_655;
              case 0x2B:
                int v53 = v27 + 2;
                unint64_t v54 = v8[v31];
                if ((char)v8[v31] < 0)
                {
                  v54 &= 0x7Fu;
                  int v208 = 7;
                  do
                  {
                    char v209 = v8[v53];
                    int v27 = v53 + 1;
                    v54 |= (unint64_t)(v209 & 0x7F) << v208;
                    v208 += 7;
                    ++v53;
                  }
                  while (v209 < 0);
                }
                else
                {
                  v27 += 2;
                }
                unint64_t v210 = 0x8000000000000000;
                if (v54 != 1) {
                  unint64_t v210 = -(uint64_t)(v54 >> 1);
                }
                if (v54) {
                  unint64_t v186 = v210;
                }
                else {
                  unint64_t v186 = v54 >> 1;
                }
                int v211 = *(unsigned __int16 *)(v9 + 24);
                if (v211 != 35 && v211 != 11) {
                  goto LABEL_655;
                }
                uint64_t v189 = *(void *)(v9 + 80);
                goto LABEL_377;
              case 0x2C:
              case 0x2D:
              case 0x2E:
              case 0x2F:
              case 0x30:
                if (v30 - 44 >= *(unsigned __int16 *)(v9 + 56)) {
                  goto LABEL_655;
                }
                int v40 = v27 + 2;
                unint64_t v41 = v8[v31];
                if ((char)v8[v31] < 0)
                {
                  v41 &= 0x7Fu;
                  int v183 = 7;
                  do
                  {
                    char v184 = v8[v40];
                    int v27 = v40 + 1;
                    v41 |= (unint64_t)(v184 & 0x7F) << v183;
                    v183 += 7;
                    ++v40;
                  }
                  while (v184 < 0);
                }
                else
                {
                  v27 += 2;
                }
                uint64_t v185 = *(void *)(*(void *)(v9 + 32) + 40 * (v30 - 44));
                unint64_t v186 = 0x8000000000000000;
                if (v41 != 1) {
                  unint64_t v186 = -(uint64_t)(v41 >> 1);
                }
                if ((v41 & 1) == 0) {
                  unint64_t v186 = v41 >> 1;
                }
                int v187 = *(unsigned __int16 *)(v185 + 24);
                if (v187 != 35 && v187 != 11) {
                  goto LABEL_655;
                }
                uint64_t v189 = *(void *)(v185 + 80);
LABEL_377:
                unsigned int v213 = *(_DWORD *)(v189 + 32);
                if (v213 > 0x40) {
                  uint64_t v214 = **(void **)(v189 + 24);
                }
                else {
                  uint64_t v214 = (uint64_t)(*(void *)(v189 + 24) << -(char)v213) >> -(char)v213;
                }
                if (v214 != v186) {
                  goto LABEL_655;
                }
                continue;
              case 0x31:
                int v51 = *(_DWORD *)(v9 + 76);
                goto LABEL_67;
              case 0x32:
                if (*(unsigned __int16 *)(v9 + 56) < 3u) {
                  goto LABEL_655;
                }
                int v51 = *(_DWORD *)(*(void *)(*(void *)(v9 + 32) + 80) + 76);
LABEL_67:
                v27 += 2;
                int v52 = v8[v31];
LABEL_112:
                if (v51 != v52) {
                  goto LABEL_655;
                }
                continue;
              case 0x33:
                v27 += 2;
                int v162 = v8[v31];
                int v163 = *(unsigned __int8 *)(v9 + 80);
                if (v162 != v163)
                {
                  if (v162 != 254) {
                    goto LABEL_655;
                  }
                  uint64_t v190 = *(void *)(v9 + 88);
                  a1 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v10[43] + 32))(v10[43], *(void *)(**(void **)(v10[37] + 40) + 40) + 272, 0);
                  if (v163 != a1 || !v163 && v190) {
                    goto LABEL_655;
                  }
                  continue;
                }
                if (v8[v31]) {
                  BOOL v164 = 1;
                }
                else {
                  BOOL v164 = *(void *)(v9 + 88) == 0;
                }
                if (v164) {
                  continue;
                }
                goto LABEL_655;
              case 0x34:
                uint64_t v55 = v8[v31];
                unsigned int v56 = v8[v27 + 2];
                if ((*(unsigned int (**)(uint64_t *))(*v10 + 280))(v10)) {
                  operator new();
                }
                a1 = (*(uint64_t (**)(uint64_t *, unint64_t, void, void, void, uint64_t, void **))(*v10 + 264))(v10, a2, *((void *)__p + 3 * v56 + 2), *((void *)__p + 3 * v56), *((void *)__p + 3 * v56 + 1), v55, &__p);
                v27 += 3;
                if ((a1 & 1) == 0) {
                  goto LABEL_655;
                }
                continue;
              case 0x35:
                int v49 = v27 + 2;
                uint64_t v50 = v8[v31];
                if ((char)v8[v31] < 0)
                {
                  v50 &= 0x7Fu;
                  int v202 = 7;
                  do
                  {
                    char v203 = v8[v49];
                    int v27 = v49 + 1;
                    v50 |= (unint64_t)(v203 & 0x7F) << v202;
                    v202 += 7;
                    ++v49;
                  }
                  while (v203 < 0);
                }
                else
                {
                  v27 += 2;
                }
                if (*(_WORD *)(v9 + 24) != 171) {
                  goto LABEL_655;
                }
                uint64_t v204 = *(uint64_t **)(v9 + 32);
                uint64_t v205 = v204[5];
                int v206 = *(unsigned __int16 *)(v205 + 24);
                if (v206 != 35 && v206 != 11) {
                  goto LABEL_655;
                }
                a1 = sub_1CD808C3C((uint64_t)v10, *v204, v204[1], *(void *)(v205 + 80), v50);
                if ((a1 & 1) == 0) {
                  goto LABEL_655;
                }
                continue;
              case 0x36:
                int v156 = v27 + 2;
                uint64_t v157 = v8[v31];
                if ((char)v8[v31] < 0)
                {
                  v157 &= 0x7Fu;
                  int v215 = 7;
                  do
                  {
                    char v216 = v8[v156];
                    int v27 = v156 + 1;
                    v157 |= (unint64_t)(v216 & 0x7F) << v215;
                    v215 += 7;
                    ++v156;
                  }
                  while (v216 < 0);
                }
                else
                {
                  v27 += 2;
                }
                if (*(_WORD *)(v9 + 24) != 172) {
                  goto LABEL_655;
                }
                uint64_t v217 = *(uint64_t **)(v9 + 32);
                uint64_t v218 = v217[5];
                int v219 = *(unsigned __int16 *)(v218 + 24);
                if (v219 != 35 && v219 != 11) {
                  goto LABEL_655;
                }
                a1 = sub_1CD808E40((uint64_t)v10, *v217, v217[1], *(void *)(v218 + 80), v157);
                if ((a1 & 1) == 0) {
                  goto LABEL_655;
                }
                continue;
              case 0x37:
                a1 = sub_1CCFCB8EC(v9, 0, (BOOL)a3);
                goto LABEL_73;
              case 0x38:
                a1 = sub_1CCFCBB88(v9, 0, (BOOL)a3);
LABEL_73:
                ++v27;
                if ((a1 & 1) == 0) {
                  goto LABEL_655;
                }
                continue;
              case 0x39:
                if (v571 == 2) {
                  goto LABEL_291;
                }
                uint64_t v191 = 1;
                do
                {
                  uint64_t v192 = *(void *)(*((void *)v570 + 2 * v191) + 48);
                  if (v192)
                  {
                    int v193 = 0;
                    do
                    {
                      if (*(unsigned char *)(*(void *)(*(void *)v192 + 40) + 16 * *(unsigned int *)(v192 + 8)) != 1)
                      {
                        if (v193) {
                          goto LABEL_655;
                        }
                        int v193 = 1;
                      }
                      uint64_t v192 = *(void *)(v192 + 32);
                    }
                    while (v192);
                  }
                  ++v191;
                }
                while (v571 - 1 != v191);
LABEL_291:
                if (!(*(unsigned int (**)(uint64_t *, uint64_t, void *, void, unint64_t))(*v10 + 216))(v10, v9, v29, *((void *)v570 + 2 * v571 - 4), a2)|| !*((_DWORD *)v10 + 82))
                {
                  goto LABEL_655;
                }
                unint64_t v174 = a2;
                int v175 = *(unsigned __int16 *)(a2 + 58);
                char v176 = 1;
                if (*(unsigned __int8 *)(*(void *)(a2 + 40) + 16 * (v175 - 1)) == 172)
                {
                  do
                  {
                    uint64_t v177 = *(void *)(v174 + 48);
                    if (!v177) {
                      break;
                    }
                    int v178 = v175 - 1;
                    while (*(_DWORD *)(v177 + 8) != v178)
                    {
                      uint64_t v177 = *(void *)(v177 + 32);
                      if (!v177) {
                        goto LABEL_301;
                      }
                    }
                    unint64_t v179 = *(void *)(v177 + 16);
                    if (!v179) {
                      break;
                    }
                    char v176 = 0;
                    int v175 = *(unsigned __int16 *)(v179 + 58);
                    unint64_t v174 = v179;
                  }
                  while (*(unsigned __int8 *)(*(void *)(v179 + 40) + 16 * (v175 - 1)) == 172);
                }
LABEL_301:
                uint64_t v180 = *((void *)v570 + 2 * v571 - 4);
                v576[0] = v579;
                v576[1] = v579;
                uint64_t v577 = 16;
                int v578 = 0;
                int v573 = v575;
                uint64_t v574 = 0x1000000000;
                uint64_t v181 = *(void *)(v9 + 48);
                if (v181)
                {
                  do
                  {
                    if (*(void *)(v181 + 16) != v180) {
                      goto LABEL_445;
                    }
                    uint64_t v181 = *(void *)(v181 + 32);
                  }
                  while (v181);
                  char v182 = 1;
                  goto LABEL_542;
                }
LABEL_445:
                HIDWORD(v577) = 1;
                v579[0] = v180;
                if (*(_WORD *)(v180 + 56))
                {
                  long long v255 = *(unsigned int **)(v180 + 32);
                  uint64_t v256 = &v255[10 * *(unsigned __int16 *)(v180 + 56)];
                  while (1)
                  {
                    uint64_t v257 = *(void *)v255;
                    if (*(void *)v255 != v9
                      && (v176 & (*(unsigned char *)(*(void *)(*(void *)v255 + 40) + 16 * v255[2]) == 1)) == 0)
                    {
                      break;
                    }
LABEL_483:
                    v255 += 10;
                    if (v255 == v256) {
                      goto LABEL_492;
                    }
                  }
                  uint64_t v258 = (char *)v576[1];
                  uint64_t v259 = HIDWORD(v577);
                  if (v576[1] == v576[0])
                  {
                    if (HIDWORD(v577))
                    {
                      int v260 = 0;
                      uint64_t v261 = 8 * HIDWORD(v577);
                      uint64_t v262 = v576[1];
                      while (*v262 != v257)
                      {
                        if (*v262 == -2) {
                          int v260 = v262;
                        }
                        ++v262;
                        v261 -= 8;
                        if (!v261)
                        {
                          if (!v260) {
                            goto LABEL_457;
                          }
                          *int v260 = v257;
                          --v578;
                          goto LABEL_481;
                        }
                      }
                      goto LABEL_483;
                    }
LABEL_457:
                    unsigned int v263 = v577;
                    if (HIDWORD(v577) < v577)
                    {
                      ++HIDWORD(v577);
                      *((void *)v576[1] + v259) = v257;
LABEL_481:
                      if (v574 >= (unint64_t)HIDWORD(v574)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v573 + v574) = v257;
                      LODWORD(v574) = v574 + 1;
                      goto LABEL_483;
                    }
                  }
                  else
                  {
                    unsigned int v263 = v577;
                  }
                  if (3 * v263 <= 4 * (HIDWORD(v577) - v578))
                  {
                    if (v263 >= 0x40) {
                      v263 *= 2;
                    }
                    else {
                      unsigned int v263 = 128;
                    }
                  }
                  else if (v263 - HIDWORD(v577) >= v263 >> 3)
                  {
LABEL_462:
                    unsigned int v264 = v263 - 1;
                    unsigned int v265 = (v263 - 1) & ((v257 >> 4) ^ (v257 >> 9));
                    uint64_t v266 = &v258[8 * v265];
                    uint64_t v267 = *(void *)v266;
                    if (*(void *)v266 != -1)
                    {
                      uint64_t v268 = 0;
                      int v269 = 1;
                      while (v267 != v257)
                      {
                        if (v268) {
                          BOOL v270 = 0;
                        }
                        else {
                          BOOL v270 = v267 == -2;
                        }
                        if (v270) {
                          uint64_t v268 = v266;
                        }
                        unsigned int v271 = v265 + v269++;
                        unsigned int v265 = v271 & v264;
                        uint64_t v266 = &v258[8 * (v271 & v264)];
                        uint64_t v267 = *(void *)v266;
                        if (*(void *)v266 == -1) {
                          goto LABEL_474;
                        }
                      }
                      goto LABEL_483;
                    }
                    uint64_t v268 = 0;
LABEL_474:
                    if (v268) {
                      BOOL v272 = v268;
                    }
                    else {
                      BOOL v272 = v266;
                    }
                    if (*(void *)v272 == v257) {
                      goto LABEL_483;
                    }
                    if (*(void *)v272 == -2) {
                      --v578;
                    }
                    else {
                      ++HIDWORD(v577);
                    }
                    *(void *)BOOL v272 = v257;
                    goto LABEL_481;
                  }
                  unint64_t v539 = v174;
                  uint64_t v534 = v180;
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v576, v263);
                  uint64_t v180 = v534;
                  unint64_t v174 = v539;
                  unsigned int v263 = v577;
                  uint64_t v258 = (char *)v576[1];
                  goto LABEL_462;
                }
LABEL_492:
                if (v174 != v180 && *(_WORD *)(v174 + 56))
                {
                  unint64_t v273 = *(unsigned int **)(v174 + 32);
                  unint64_t v274 = &v273[10 * *(unsigned __int16 *)(v174 + 56)];
                  while (1)
                  {
                    uint64_t v275 = *(void *)v273;
                    if (*(void *)v273 != v9
                      && (v176 & (*(unsigned char *)(*(void *)(*(void *)v273 + 40) + 16 * v273[2]) == 1)) == 0)
                    {
                      break;
                    }
LABEL_531:
                    v273 += 10;
                    if (v273 == v274) {
                      goto LABEL_540;
                    }
                  }
                  unint64_t v276 = (char *)v576[1];
                  uint64_t v277 = HIDWORD(v577);
                  if (v576[1] == v576[0])
                  {
                    if (HIDWORD(v577))
                    {
                      unsigned int v278 = 0;
                      uint64_t v279 = 8 * HIDWORD(v577);
                      uint64_t v280 = v576[1];
                      while (*v280 != v275)
                      {
                        if (*v280 == -2) {
                          unsigned int v278 = v280;
                        }
                        ++v280;
                        v279 -= 8;
                        if (!v279)
                        {
                          if (!v278) {
                            goto LABEL_505;
                          }
                          *unsigned int v278 = v275;
                          --v578;
                          goto LABEL_529;
                        }
                      }
                      goto LABEL_531;
                    }
LABEL_505:
                    unsigned int v281 = v577;
                    if (HIDWORD(v577) < v577)
                    {
                      ++HIDWORD(v577);
                      *((void *)v576[1] + v277) = v275;
LABEL_529:
                      if (v574 >= (unint64_t)HIDWORD(v574)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v573 + v574) = v275;
                      LODWORD(v574) = v574 + 1;
                      goto LABEL_531;
                    }
                  }
                  else
                  {
                    unsigned int v281 = v577;
                  }
                  if (3 * v281 <= 4 * (HIDWORD(v577) - v578))
                  {
                    if (v281 >= 0x40) {
                      v281 *= 2;
                    }
                    else {
                      unsigned int v281 = 128;
                    }
                  }
                  else if (v281 - HIDWORD(v577) >= v281 >> 3)
                  {
LABEL_510:
                    unsigned int v282 = v281 - 1;
                    unsigned int v283 = (v281 - 1) & ((v275 >> 4) ^ (v275 >> 9));
                    uint64_t v284 = &v276[8 * v283];
                    uint64_t v285 = *(void *)v284;
                    if (*(void *)v284 != -1)
                    {
                      uint64_t v286 = 0;
                      int v287 = 1;
                      while (v285 != v275)
                      {
                        if (v286) {
                          BOOL v288 = 0;
                        }
                        else {
                          BOOL v288 = v285 == -2;
                        }
                        if (v288) {
                          uint64_t v286 = v284;
                        }
                        unsigned int v289 = v283 + v287++;
                        unsigned int v283 = v289 & v282;
                        uint64_t v284 = &v276[8 * (v289 & v282)];
                        uint64_t v285 = *(void *)v284;
                        if (*(void *)v284 == -1) {
                          goto LABEL_522;
                        }
                      }
                      goto LABEL_531;
                    }
                    uint64_t v286 = 0;
LABEL_522:
                    if (v286) {
                      uint64_t v290 = v286;
                    }
                    else {
                      uint64_t v290 = v284;
                    }
                    if (*(void *)v290 == v275) {
                      goto LABEL_531;
                    }
                    if (*(void *)v290 == -2) {
                      --v578;
                    }
                    else {
                      ++HIDWORD(v577);
                    }
                    *(void *)uint64_t v290 = v275;
                    goto LABEL_529;
                  }
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v576, v281);
                  unsigned int v281 = v577;
                  unint64_t v276 = (char *)v576[1];
                  goto LABEL_510;
                }
LABEL_540:
                char v182 = sub_1CCF551A8(v9, (llvm::SmallPtrSetImplBase *)v576, (unsigned int *)&v573, 0, 1) ^ 1;
                if (v573 != v575) {
                  free(v573);
                }
LABEL_542:
                a1 = (uint64_t)v576[1];
                if (v576[1] != v576[0]) {
                  free(v576[1]);
                }
                int v27 = v31;
                if ((v182 & 1) == 0)
                {
LABEL_655:
                  unsigned int v370 = __src[1];
                  while (1)
                  {
                    if (!v370) {
                      sub_1CD8094E8((uint64_t)v10, a2);
                    }
                    uint64_t v371 = (char *)__src[0] + 136 * v370;
                    sub_1CD3D6DA0((uint64_t)&__p, *((unsigned int *)v371 - 12));
                    LODWORD(v571) = 0;
                    a1 = (uint64_t)sub_1CD3D61B4((unsigned int *)&v570, *((unsigned char **)v371 - 16), (unsigned char *)(*((void *)v371 - 16) + 16 * *((unsigned int *)v371 - 30)));
                    uint64_t v372 = (char *)v570 + 16 * v571;
                    uint64_t v9 = *((void *)v372 - 2);
                    uint64_t v29 = (void *)*((unsigned int *)v372 - 2);
                    unint64_t v373 = *((unsigned int *)v371 - 11);
                    if (v563 != v373) {
                      sub_1CD42769C((uint64_t)&v562, v373);
                    }
                    uint64_t v374 = *((unsigned int *)v371 - 34);
                    uint64_t v375 = *((void *)v371 - 5);
                    uint64_t v376 = *((unsigned int *)v371 - 8);
                    uint64_t v28 = *((void *)v371 - 3);
                    uint64_t v377 = *((unsigned int *)v371 - 4);
                    if (!*(v371 - 8)) {
                      LODWORD(v560) = 0;
                    }
                    int v27 = v374 + 1;
                    int v378 = (char)v8[v374];
                    LODWORD(v374) = v8[v374];
                    if (v378 < 0) {
                      break;
                    }
                    if (v374) {
                      goto LABEL_669;
                    }
LABEL_667:
                    unsigned int v370 = LODWORD(__src[1]) - 1;
                    LODWORD(__src[1]) = v370;
                    uint64_t v381 = (char *)__src[0] + 136 * v370;
                    uint64_t v382 = (char *)*((void *)v381 + 1);
                    if (v382 != v381 + 24)
                    {
                      free(v382);
                      unsigned int v370 = __src[1];
                    }
                  }
                  v374 &= 0x7Fu;
                  int v379 = 7;
                  do
                  {
                    char v380 = v8[v27++];
                    v374 |= (unint64_t)(v380 & 0x7F) << v379;
                    v379 += 7;
                  }
                  while (v380 < 0);
                  if (!v374) {
                    goto LABEL_667;
                  }
LABEL_669:
                  uint64_t v545 = v375;
                  uint64_t v547 = v376;
                  uint64_t v543 = v377;
                  *((_DWORD *)v371 - 34) = v374 + v27;
                }
                continue;
              case 0x3A:
              case 0x3B:
                int v253 = v27 + 3;
                unint64_t v254 = v8[v27 + 2];
                if ((char)v8[v27 + 2] < 0)
                {
                  v254 &= 0x7Fu;
                  int v320 = 7;
                  do
                  {
                    char v321 = v8[v253];
                    int v27 = v253 + 1;
                    v254 |= (unint64_t)(v321 & 0x7F) << v320;
                    v320 += 7;
                    ++v253;
                  }
                  while (v321 < 0);
                }
                else
                {
                  v27 += 3;
                }
                uint64_t v322 = (llvm *)v8[v31];
                unint64_t v323 = 0x8000000000000000;
                if (v254 != 1) {
                  unint64_t v323 = -(uint64_t)(v254 >> 1);
                }
                if ((v254 & 1) == 0) {
                  unint64_t v323 = v254 >> 1;
                }
                if (v30 == 58) {
                  uint64_t v324 = v323;
                }
                else {
                  uint64_t v324 = v254;
                }
                uint64_t v325 = v10[37];
                uint64_t v326 = *(void **)(a2 + 64);
                int v573 = v326;
                if (v326) {
                  llvm::MetadataTracking::track((uint64_t)&v573, (unsigned __int8 *)v326, 2);
                }
                LODWORD(v574) = *(_DWORD *)(a2 + 60);
                v576[0] = sub_1CD7EBF14(v325, v324, (const llvm::APInt *)&v573, v322, 0, 1, 0);
                v576[1] = v327;
                uint64_t v577 = 0;
                a1 = sub_1CD483108((uint64_t)&__p, (unint64_t)v576);
                uint64_t v328 = (char *)__p + 24 * __dst;
                long long v329 = *(_OWORD *)a1;
                *((void *)v328 + 2) = *(void *)(a1 + 16);
                *(_OWORD *)uint64_t v328 = v329;
                LODWORD(__dst) = __dst + 1;
                if (!v573) {
                  continue;
                }
                int v330 = *(unsigned __int8 *)v573;
                if ((v330 - 4) > 0x1E)
                {
                  if ((v330 - 3) >= 0xFFFFFFFE) {
                    uint64_t v393 = v573;
                  }
                  else {
                    uint64_t v393 = 0;
                  }
                  if ((v330 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v332 = (unint64_t)v393 + 8;
LABEL_697:
                    uint64_t v554 = &v573;
                    a1 = sub_1CC5FA668(v332 + 16, &v554);
                    continue;
                  }
                  if (v330 == 3) {
                    *((void *)v573 + 1) = 0;
                  }
                }
                else if ((*((unsigned char *)v573 + 1) & 0x7F) == 2 || *((_DWORD *)v573 + 3))
                {
                  uint64_t v331 = *((void *)v573 + 2);
                  if ((v331 & 4) != 0)
                  {
                    unint64_t v332 = v331 & 0xFFFFFFFFFFFFFFF8;
                    if (v332) {
                      goto LABEL_697;
                    }
                  }
                }
                continue;
              case 0x3C:
                int v333 = v27 + 2;
                int v334 = (llvm *)v8[v31];
                v27 += 3;
                int v335 = v8[v333];
                goto LABEL_646;
              case 0x3D:
                int v334 = (llvm *)v8[v31];
                int v364 = v8[v27 + 2];
                int v365 = v27 + 3;
                v27 += 4;
                int v335 = v364 | (v8[v365] << 8);
LABEL_646:
                v576[0] = (void *)sub_1CD7EEB94(v10[37], v335, v334, 0);
                v576[1] = v366;
                uint64_t v577 = 0;
                a1 = sub_1CD483108((uint64_t)&__p, (unint64_t)v576);
                uint64_t v363 = (char *)__p + 24 * __dst;
                goto LABEL_647;
              case 0x3E:
                unsigned int v336 = v8[v31];
                int v337 = (unsigned int *)((char *)__p + 24 * v8[v31]);
                uint64_t v338 = *(uint64_t **)v337;
                uint64_t v340 = v337[2];
                unsigned int v339 = v337[3];
                int v341 = *(unsigned __int16 *)(*(void *)v337 + 24);
                if (v341 == 12)
                {
                  unsigned int v540 = v339;
                  uint64_t v394 = v338[10];
                  uint64_t v395 = v10[37];
                  uint64_t v396 = *(void **)(a2 + 64);
                  v576[0] = v396;
                  if (v396)
                  {
                    uint64_t v536 = v395;
                    llvm::MetadataTracking::track((uint64_t)v576, (unsigned __int8 *)v396, 2);
                    uint64_t v395 = v536;
                  }
                  LODWORD(v576[1]) = *(_DWORD *)(a2 + 60);
                  uint64_t v347 = sub_1CD7ECAFC(v395, v394, (uint64_t)v576, *(llvm **)(v338[5] + 16 * v340), *(void *)(v338[5] + 16 * v340 + 8), 1);
                }
                else
                {
                  if (v341 != 11) {
                    goto LABEL_708;
                  }
                  unsigned int v540 = v339;
                  uint64_t v342 = v338[10];
                  uint64_t v343 = v10[37];
                  int v344 = *(void **)(a2 + 64);
                  v576[0] = v344;
                  if (v344)
                  {
                    uint64_t v535 = v343;
                    unsigned int v345 = v336;
                    uint64_t v346 = v342;
                    llvm::MetadataTracking::track((uint64_t)v576, (unsigned __int8 *)v344, 2);
                    uint64_t v343 = v535;
                    uint64_t v342 = v346;
                    unsigned int v336 = v345;
                  }
                  LODWORD(v576[1]) = *(_DWORD *)(a2 + 60);
                  uint64_t v347 = sub_1CD7EC028(v343, v342, (const llvm::APInt *)v576, *(llvm **)(v338[5] + 16 * v340), *(void *)(v338[5] + 16 * v340 + 8), 1, 0);
                }
                uint64_t v338 = v347;
                int v397 = v348;
                if (!v576[0]) {
                  goto LABEL_707;
                }
                int v398 = *(unsigned __int8 *)v576[0];
                if ((v398 - 4) > 0x1E)
                {
                  if ((v398 - 3) >= 0xFFFFFFFE) {
                    uint64_t v404 = v576[0];
                  }
                  else {
                    uint64_t v404 = 0;
                  }
                  if ((v398 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v405 = (unint64_t)v404 + 8;
LABEL_734:
                    int v573 = v576;
                    sub_1CC5FA668(v405 + 16, &v573);
                    goto LABEL_707;
                  }
                  if (v398 == 3) {
                    *((void *)v576[0] + 1) = 0;
                  }
                }
                else if ((*((unsigned char *)v576[0] + 1) & 0x7F) == 2 || *((_DWORD *)v576[0] + 3))
                {
                  uint64_t v423 = *((void *)v576[0] + 2);
                  if ((v423 & 4) != 0)
                  {
                    unint64_t v405 = v423 & 0xFFFFFFFFFFFFFFF8;
                    if (v405) {
                      goto LABEL_734;
                    }
                  }
                }
LABEL_707:
                LODWORD(v340) = v397;
                unsigned int v339 = v540;
LABEL_708:
                v27 += 2;
                v576[0] = v338;
                v576[1] = (void *)__PAIR64__(v339, v340);
                uint64_t v577 = *((void *)__p + 3 * v336 + 2);
                a1 = sub_1CD483108((uint64_t)&__p, (unint64_t)v576);
                int v399 = (char *)__p + 24 * __dst;
                long long v400 = *(_OWORD *)a1;
                *((void *)v399 + 2) = *(void *)(a1 + 16);
                *(_OWORD *)int v399 = v400;
                LODWORD(__dst) = __dst + 1;
                continue;
              case 0x3F:
                uint64_t v165 = v28;
                v27 += 2;
                int v166 = v8[v31];
                unsigned int v167 = v560;
                if (!v8[v31]) {
                  goto LABEL_352;
                }
                int v168 = 0;
                while (1)
                {
                  unsigned int v169 = v8[v27];
                  if (v167 >= HIDWORD(v560)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v559 + v167) = *((void *)__p + 3 * v8[v27]);
                  unsigned int v167 = v560 + 1;
                  LODWORD(v560) = v167;
                  if (*((void *)v559 + v167 - 1) != a2)
                  {
                    uint64_t v170 = (char *)__p + 24 * v169;
                    uint64_t v171 = *(void *)(*(void *)v170 + 48);
                    if (!v171) {
                      goto LABEL_57;
                    }
                    int v172 = v170[2];
                    int v173 = 1;
                    do
                    {
                      if (*(_DWORD *)(v171 + 8) == v172)
                      {
                        if (!v173) {
                          goto LABEL_57;
                        }
                        --v173;
                      }
                      uint64_t v171 = *(void *)(v171 + 32);
                    }
                    while (v171);
                    if (v173) {
                      goto LABEL_57;
                    }
                  }
                  ++v27;
                  if (++v168 == v166)
                  {
LABEL_352:
                    if (!v167) {
                      goto LABEL_655;
                    }
                    uint64_t v28 = v165;
                    a1 = (uint64_t)sub_1CCFF3A60((unsigned int *)&v559, (void *)v10[37]);
                    uint64_t v547 = v201;
                    goto LABEL_59;
                  }
                }
              case 0x40:
              case 0x41:
              case 0x42:
                if (v560 >= (unint64_t)HIDWORD(v560)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v559 + v560) = *((void *)__p + 3 * (v30 - 64));
                LODWORD(v560) = v560 + 1;
                if (*((void *)v559 + v560 - 1) == a2) {
                  goto LABEL_58;
                }
                uint64_t v44 = (char *)__p + 24 * (v30 - 64);
                uint64_t v45 = *(void *)(*(void *)v44 + 48);
                if (!v45) {
                  goto LABEL_57;
                }
                int v46 = v44[2];
                int v47 = 1;
                do
                {
                  if (*(_DWORD *)(v45 + 8) == v46)
                  {
                    if (!v47) {
                      goto LABEL_57;
                    }
                    --v47;
                  }
                  uint64_t v45 = *(void *)(v45 + 32);
                }
                while (v45);
                if (v47)
                {
LABEL_57:
                  LODWORD(v560) = 0;
                  goto LABEL_655;
                }
LABEL_58:
                a1 = (uint64_t)sub_1CCFF3A60((unsigned int *)&v559, (void *)v10[37]);
                uint64_t v547 = v48;
                ++v27;
LABEL_59:
                uint64_t v545 = a1;
                if (!a1) {
                  goto LABEL_655;
                }
                continue;
              case 0x43:
              case 0x44:
                int v251 = v27 + 3;
                int v252 = v8[v27 + 2];
                uint64_t v532 = v28;
                if (v30 == 68)
                {
                  v27 += 4;
                  v252 |= v8[v251] << 8;
                }
                else
                {
                  v27 += 3;
                }
                unsigned int v311 = v8[v31];
                uint64_t v312 = (void *)v10[37];
                if (v545) {
                  uint64_t v313 = v545;
                }
                else {
                  uint64_t v313 = (uint64_t)(v312 + 14);
                }
                if (v545) {
                  int v314 = v547;
                }
                else {
                  int v314 = 0;
                }
                unsigned int v315 = *(void **)(a2 + 64);
                v576[0] = v315;
                if (v315)
                {
                  int v548 = v314;
                  int v316 = v252;
                  llvm::MetadataTracking::track((uint64_t)v576, (unsigned __int8 *)v315, 2);
                  int v314 = v548;
                  int v252 = v316;
                }
                LODWORD(v576[1]) = *(_DWORD *)(a2 + 60);
                a1 = (uint64_t)sub_1CD3E5420(v312, v313, v314, (const llvm::APInt *)v576, v252, *((void *)__p + 3 * v311), *((void *)__p + 3 * v311 + 1), a8, v532, v543);
                uint64_t v28 = a1;
                unsigned int v318 = v317;
                if (!v576[0]) {
                  goto LABEL_609;
                }
                int v319 = *(unsigned __int8 *)v576[0];
                if ((v319 - 4) > 0x1E)
                {
                  if ((v319 - 3) >= 0xFFFFFFFE) {
                    uint64_t v391 = v576[0];
                  }
                  else {
                    uint64_t v391 = 0;
                  }
                  if ((v319 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v392 = (unint64_t)v391 + 8;
LABEL_691:
                    int v573 = v576;
                    a1 = sub_1CC5FA668(v392 + 16, &v573);
                    goto LABEL_609;
                  }
                  if (v319 == 3) {
                    *((void *)v576[0] + 1) = 0;
                  }
                }
                else if ((*((unsigned char *)v576[0] + 1) & 0x7F) == 2 || *((_DWORD *)v576[0] + 3))
                {
                  uint64_t v420 = *((void *)v576[0] + 2);
                  if ((v420 & 4) != 0)
                  {
                    unint64_t v392 = v420 & 0xFFFFFFFFFFFFFFF8;
                    if (v392) {
                      goto LABEL_691;
                    }
                  }
                }
LABEL_609:
                uint64_t v545 = v28;
                uint64_t v547 = v318;
                uint64_t v543 = 1;
                continue;
              case 0x45:
                int v360 = v27 + 2;
                v27 += 3;
                uint64_t v361 = (char *)__p + 24 * v8[v360];
                v576[0] = (void *)(*(uint64_t (**)(uint64_t *, void, void, void))(*v10 + 272))(v10, *v361, v361[1], v8[v31]);
                v576[1] = v362;
                uint64_t v577 = 0;
                a1 = sub_1CD483108((uint64_t)&__p, (unint64_t)v576);
                uint64_t v363 = (char *)__p + 24 * __dst;
LABEL_647:
                long long v367 = *(_OWORD *)a1;
                *((void *)v363 + 2) = *(void *)(a1 + 16);
                *(_OWORD *)uint64_t v363 = v367;
                LODWORD(__dst) = __dst + 1;
                continue;
              case 0x46:
              case 0x47:
              case 0x48:
              case 0x49:
              case 0x4A:
              case 0x4B:
              case 0x4C:
              case 0x4D:
                int v194 = v27 + 4;
                int v195 = v30 - 75;
                if ((v30 - 75) > 2)
                {
                  int v195 = v30 - 71;
                  if ((v30 - 71) > 2)
                  {
                    int v195 = v8[v194];
                    int v194 = v27 + 5;
                  }
                }
                int v528 = v8[v31];
                int v196 = v27 + 3;
                int v197 = v8[v27 + 2];
                unsigned int v538 = v8[v196];
                int v573 = v575;
                uint64_t v574 = 0x400000000;
                for (unsigned int j = 0; v195; --v195)
                {
                  int v199 = v8[v194];
                  if (v199 == 254)
                  {
                    LOBYTE(v199) = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v10[43] + 32))(v10[43], *(void *)(**(void **)(v10[37] + 40) + 40) + 272, 0);
                    unsigned int j = v574;
                  }
                  if (j >= HIDWORD(v574)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v200 = (char *)v573 + 16 * j;
                  void *v200 = v199;
                  v200[1] = 0;
                  unsigned int j = v574 + 1;
                  LODWORD(v574) = v574 + 1;
                  ++v194;
                }
                if (v538)
                {
                  if (j >= HIDWORD(v574)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_OWORD *)v573 + j) = xmmword_1CD91D2E0;
                  unsigned int j = v574 + 1;
                  LODWORD(v574) = v574 + 1;
                }
                if ((v538 & 4) != 0)
                {
                  if (j >= HIDWORD(v574)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_OWORD *)v573 + j) = xmmword_1CFB2D760;
                  unsigned int j = v574 + 1;
                  LODWORD(v574) = v574 + 1;
                }
                int v526 = v197;
                if (j == 2)
                {
                  uint64_t v230 = sub_1CD7F95FC(v10[37], *(void *)v573, *((void *)v573 + 1), *((void *)v573 + 2), *((void *)v573 + 3));
                }
                else
                {
                  if (j == 1)
                  {
                    uint64_t v524 = 1;
                    uint64_t v525 = sub_1CD7FFC1C(*(llvm **)v573, *((void *)v573 + 1));
                    goto LABEL_403;
                  }
                  uint64_t v230 = sub_1CD7F9A18(v10[37], (uint64_t *)v573, j);
                }
                uint64_t v524 = v231;
                uint64_t v525 = v230;
LABEL_403:
                int v232 = v8[v194];
                int v27 = v194 + 1;
                v576[0] = &v577;
                v576[1] = (void *)0x800000000;
                uint64_t v531 = v28;
                unsigned int v233 = 0;
                if (v232)
                {
                  for (int k = 0; k != v232; ++k)
                  {
                    int v241 = v27 + 1;
                    LODWORD(v242) = v8[v27];
                    if ((char)v8[v27] < 0)
                    {
                      v242 &= 0x7Fu;
                      int v243 = 7;
                      do
                      {
                        char v244 = v8[v241];
                        int v27 = v241 + 1;
                        v242 |= (unint64_t)(v244 & 0x7F) << v243;
                        v243 += 7;
                        ++v241;
                      }
                      while (v244 < 0);
                    }
                    else
                    {
                      ++v27;
                    }
                    if (v233 >= HIDWORD(v576[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((_OWORD *)v576[0] + v233) = *(_OWORD *)((char *)__p + 24 * v242);
                    unsigned int v233 = ++LODWORD(v576[1]);
                  }
                }
                if ((v538 & 0x70) != 0)
                {
                  unsigned int v234 = (v538 & 1) + ((v538 >> 4) & 7) - 1;
                  for (int m = *(unsigned __int16 *)(a2 + 56); m != v234; ++v234)
                  {
                    unsigned int v237 = (void *)(*(void *)(a2 + 32) + 40 * v234);
                    uint64_t v238 = v237[1];
                    if (*(unsigned __int8 *)(*(void *)(*v237 + 40) + 16 * v238) == 172) {
                      break;
                    }
                    if (v233 >= HIDWORD(v576[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    BOOL v239 = (char *)v576[0] + 16 * v233;
                    *BOOL v239 = *v237;
                    v239[1] = v238;
                    unsigned int v233 = ++LODWORD(v576[1]);
                  }
                }
                if (v538)
                {
                  uint64_t v28 = v531;
                  uint64_t v236 = v543;
                  if (v233 >= HIDWORD(v576[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v245 = (uint64_t *)((char *)v576[0] + 16 * v233);
                  *int v245 = v545;
                  v245[1] = v547;
                  unsigned int v233 = ++LODWORD(v576[1]);
                }
                else
                {
                  uint64_t v28 = v531;
                  uint64_t v236 = v543;
                }
                if ((v538 & 2) != 0 && v28)
                {
                  if (v233 >= HIDWORD(v576[1])) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  BOOL v246 = (uint64_t *)((char *)v576[0] + 16 * v233);
                  *BOOL v246 = v28;
                  v246[1] = v236;
                  ++LODWORD(v576[1]);
                }
                if (!v560)
                {
                  int v523 = 1;
                  goto LABEL_548;
                }
                unint64_t v247 = (uint64_t *)v559;
                uint64_t v248 = 8 * v560;
                break;
              case 0x4E:
                uint64_t v424 = v8[v31];
                if (v8[v31])
                {
                  uint64_t v425 = 0;
                  int v426 = v27 + 2;
                  do
                  {
                    int v427 = v426 + 1;
                    LODWORD(v428) = v8[v426];
                    if ((char)v8[v426] < 0)
                    {
                      v428 &= 0x7Fu;
                      int v429 = 7;
                      do
                      {
                        char v430 = v8[v427];
                        int v426 = v427 + 1;
                        v428 |= (unint64_t)(v430 & 0x7F) << v429;
                        v429 += 7;
                        ++v427;
                      }
                      while (v430 < 0);
                    }
                    else
                    {
                      ++v426;
                    }
                    unsigned int v431 = (uint64_t *)((char *)__p + 24 * v428);
                    uint64_t v432 = *v431;
                    sub_1CD800DA0(v10[37], a2, v425, *v431, v431[1]);
                    sub_1CD808A6C(v432);
                    ++v425;
                  }
                  while (v425 != v424);
                }
                sub_1CCFEFABC((uint64_t)v10, a2, v545, v547, (uint64_t)&v559, 0);
                uint64_t v433 = a2;
                if (*(unsigned __int8 *)(*(void *)(a2 + 40)
                                        + 16 * (*(unsigned __int16 *)(a2 + 58) - 1)) == 172
                  && v28 != 0)
                {
                  sub_1CD800DA0(v10[37], a2, *(unsigned __int16 *)(a2 + 58) - 1, v28, v543);
                  sub_1CD808A6C(v28);
                  uint64_t v433 = a2;
                }
                sub_1CD7EA438((void *)v10[37], v433);
                goto LABEL_807;
              case 0x4F:
                int v349 = v8[v31];
                int v350 = v8[v27 + 2];
                uint64_t v351 = llvm::dbgs((llvm *)a1);
                uint64_t v352 = v351;
                uint64_t v353 = *((void *)v351 + 4);
                if ((unint64_t)(*((void *)v351 + 3) - v353) > 8)
                {
                  *(unsigned char *)(v353 + 8) = 32;
                  *(void *)uint64_t v353 = *(void *)"COVERED: ";
                  *((void *)v351 + 4) += 9;
                }
                else
                {
                  llvm::raw_ostream::write(v351, "COVERED: ", 9uLL);
                }
                uint64_t v354 = v349 | (v350 << 8);
                uint64_t v356 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t))(*v10 + 224))(v10, v354);
                size_t v357 = v355;
                uint64_t v358 = (llvm::raw_ostream *)*((void *)v352 + 4);
                if (v355 <= *((void *)v352 + 3) - (void)v358)
                {
                  if (v355)
                  {
                    memcpy(v358, v356, v355);
                    uint64_t v358 = (llvm::raw_ostream *)(*((void *)v352 + 4) + v357);
                    *((void *)v352 + 4) = v358;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v352, (const char *)v356, v355);
                  uint64_t v358 = (llvm::raw_ostream *)*((void *)v352 + 4);
                }
                if (*((llvm::raw_ostream **)v352 + 3) == v358)
                {
                  uint64_t v358 = llvm::raw_ostream::write(v352, "\n", 1uLL);
                }
                else
                {
                  *(unsigned char *)uint64_t v358 = 10;
                  ++*((void *)v352 + 4);
                }
                uint64_t v383 = llvm::dbgs(v358);
                uint64_t v384 = v383;
                uint64_t v385 = *((void *)v383 + 4);
                if ((unint64_t)(*((void *)v383 + 3) - v385) > 9)
                {
                  *(_WORD *)(v385 + 8) = 8250;
                  *(void *)uint64_t v385 = *(void *)"INCLUDED: ";
                  *((void *)v383 + 4) += 10;
                }
                else
                {
                  llvm::raw_ostream::write(v383, "INCLUDED: ", 0xAuLL);
                }
                a3 = (unsigned char *)(*(uint64_t (**)(uint64_t *, uint64_t))(*v10 + 232))(v10, v354);
                size_t v387 = v386;
                a1 = *((void *)v384 + 4);
                if (v386 <= *((void *)v384 + 3) - a1)
                {
                  if (v386)
                  {
                    memcpy((void *)a1, a3, v386);
                    a1 = *((void *)v384 + 4) + v387;
                    *((void *)v384 + 4) = a1;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v384, a3, v386);
                  a1 = *((void *)v384 + 4);
                }
                v27 += 3;
                if (*((void *)v384 + 3) == a1)
                {
                  a1 = (uint64_t)llvm::raw_ostream::write(v384, "\n", 1uLL);
                }
                else
                {
                  *(unsigned char *)a1 = 10;
                  ++*((void *)v384 + 4);
                }
                continue;
              default:
                goto LABEL_655;
            }
            break;
          }
          while (1)
          {
            uint64_t v249 = *v247;
            if (*(__int16 *)(*v247 + 24) < 0)
            {
              if ((*(unsigned char *)(*(void *)(v10[42] + 8) + 48 * (*(unsigned __int16 *)(*v247 + 24) ^ 0xFFFFu) + 10) & 0x20) != 0) {
                goto LABEL_436;
              }
            }
            else
            {
              unsigned int v250 = *(unsigned __int16 *)(*v247 + 24);
              if (v250 < 0x186)
              {
                if (sub_1CD407020(*v247))
                {
LABEL_436:
                  if ((*(_WORD *)(v249 + 72) & 0x800) == 0)
                  {
                    int v523 = 0;
                    goto LABEL_547;
                  }
                }
              }
              else if (v250 > 0x315)
              {
                goto LABEL_436;
              }
            }
            ++v247;
            v248 -= 8;
            if (!v248)
            {
              int v523 = 1;
LABEL_547:
              uint64_t v236 = v543;
LABEL_548:
              int v291 = v528 | (v526 << 8);
              unsigned int v292 = v30 - 78;
              unsigned int v529 = v291;
              if (v292 > 0xFFFFFFFB)
              {
                uint64_t v305 = v10[37];
                v552[0] = &unk_1F26426C8;
                v552[1] = v10;
                v552[2] = &v559;
                int64_t v553 = v552;
                sub_1CCF762E8(&v554, v305, (uint64_t)v552);
                if (v553 == v552)
                {
                  (*(void (**)(void *))(v552[0] + 32))(v552);
                  int v304 = v538 & 1;
                }
                else
                {
                  int v304 = v538 & 1;
                  if (v553) {
                    (*(void (**)(void))(*v553 + 40))();
                  }
                }
                int v295 = (unsigned __int16 *)sub_1CD809380((uint64_t)v10, a2, v291, v525, v524, (uint64_t *)v576[0], LODWORD(v576[1]), v538);
                uint64_t v554 = &unk_1F26420F0;
                if (v558 == v557)
                {
                  (*(void (**)(void *))(v557[0] + 32))(v557);
                }
                else if (v558)
                {
                  (*(void (**)(void))(*v558 + 40))();
                }
                *(void *)(v556 + 656) = v555;
              }
              else
              {
                uint64_t v293 = v10[37];
                uint64_t v294 = *(void **)(a2 + 64);
                uint64_t v554 = v294;
                if (v294) {
                  llvm::MetadataTracking::track((uint64_t)&v554, (unsigned __int8 *)v294, 2);
                }
                LODWORD(v555) = *(_DWORD *)(a2 + 60);
                int v295 = (unsigned __int16 *)sub_1CD801044(v293, v291, (uint64_t)&v554, v525, v524, (uint64_t *)v576[0], LODWORD(v576[1]));
                uint64_t v236 = v543;
                if (v554)
                {
                  int v296 = *(unsigned __int8 *)v554;
                  if ((v296 - 4) > 0x1E)
                  {
                    if ((v296 - 3) >= 0xFFFFFFFE) {
                      uint64_t v368 = v554;
                    }
                    else {
                      uint64_t v368 = 0;
                    }
                    if ((v296 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v369 = (unint64_t)v368 + 8;
                      goto LABEL_653;
                    }
                    if (v296 == 3) {
                      *((void *)v554 + 1) = 0;
                    }
                  }
                  else if ((*((unsigned char *)v554 + 1) & 0x7F) == 2 || *((_DWORD *)v554 + 3))
                  {
                    uint64_t v406 = *((void *)v554 + 2);
                    if ((v406 & 4) != 0)
                    {
                      unint64_t v369 = v406 & 0xFFFFFFFFFFFFFFF8;
                      if (v369)
                      {
LABEL_653:
                        uint64_t v551 = &v554;
                        sub_1CC5FA668(v369 + 16, &v551);
                      }
                    }
                  }
                }
                uint64_t v297 = v574;
                if (v574)
                {
                  unsigned int v527 = v292;
                  uint64_t v298 = 0;
                  uint64_t v299 = 0;
                  do
                  {
                    int v300 = *((unsigned __int8 *)v573 + v298);
                    if (v300 == 1) {
                      break;
                    }
                    if (v300 == 172) {
                      break;
                    }
                    uint64_t v554 = v295;
                    LODWORD(v555) = v299;
                    uint64_t v556 = 0;
                    unint64_t v301 = sub_1CD483108((uint64_t)&__p, (unint64_t)&v554);
                    uint64_t v302 = (char *)__p + 24 * __dst;
                    long long v303 = *(_OWORD *)v301;
                    *((void *)v302 + 2) = *(void *)(v301 + 16);
                    *(_OWORD *)uint64_t v302 = v303;
                    LODWORD(__dst) = __dst + 1;
                    ++v299;
                    v298 += 16;
                  }
                  while (v297 != v299);
                  uint64_t v236 = v543;
                  int v304 = v538 & 1;
                  unsigned int v292 = v527;
                }
                else
                {
                  int v304 = v538 & 1;
                }
              }
              if (!v523) {
                goto LABEL_576;
              }
              if ((__int16)v295[12] < 0)
              {
                if ((*(unsigned char *)(*(void *)(v10[42] + 8) + 48 * (v295[12] ^ 0xFFFFu) + 10) & 0x20) == 0) {
                  goto LABEL_576;
                }
                goto LABEL_575;
              }
              unsigned int v306 = v295[12];
              if (v306 < 0x186)
              {
                if (!sub_1CD407020((uint64_t)v295)) {
                  goto LABEL_576;
                }
LABEL_575:
                v295[36] |= 0x801u;
                goto LABEL_576;
              }
              if (v306 > 0x315) {
                goto LABEL_575;
              }
LABEL_576:
              if ((v538 & 4) != 0)
              {
                uint64_t v236 = (v574 - 1);
                if (v304) {
                  uint64_t v307 = (uint64_t)v295;
                }
                else {
                  uint64_t v307 = v545;
                }
                uint64_t v308 = v547;
                if (v304) {
                  uint64_t v308 = (v574 - 2);
                }
                uint64_t v545 = v307;
                uint64_t v547 = v308;
                uint64_t v28 = (uint64_t)v295;
              }
              else if (v304)
              {
                uint64_t v545 = (uint64_t)v295;
                uint64_t v547 = (v574 - 1);
              }
              uint64_t v543 = v236;
              uint64_t v310 = v545;
              int v309 = v547;
              if ((v538 & 8) == 0) {
                goto LABEL_586;
              }
              uint64_t v541 = (uint64_t)v295;
              uint64_t v388 = *(void *)(*(void *)(v10[42] + 8) + 48 * v529 + 8);
              uint64_t v554 = &v556;
              uint64_t v555 = 0x400000000;
              if (!v563)
              {
                unsigned int v389 = 0;
                uint64_t v390 = &v556;
                goto LABEL_720;
              }
              unsigned int v389 = 0;
              uint64_t v401 = (char *)v562;
              uint64_t v402 = 8 * v563;
              while (2)
              {
                __int16 v403 = *(_WORD *)(*(void *)v401 + 32);
                if (v403)
                {
                  if ((v388 & 0x80000) == 0) {
                    goto LABEL_717;
                  }
                }
                else if ((v403 & 2) != 0 && (v388 & 0x100000) == 0)
                {
                  goto LABEL_717;
                }
                if (v389 >= HIDWORD(v555)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v554 + v389) = *(void *)v401;
                unsigned int v389 = v555 + 1;
                LODWORD(v555) = v555 + 1;
LABEL_717:
                v401 += 8;
                v402 -= 8;
                if (v402) {
                  continue;
                }
                break;
              }
              uint64_t v390 = (uint64_t *)v554;
              uint64_t v310 = v545;
              int v309 = v547;
LABEL_720:
              sub_1CD8005B8((uint64_t *)v10[37], v541, v390, v389);
              if (v554 != &v556) {
                free(v554);
              }
              int v295 = (unsigned __int16 *)v541;
LABEL_586:
              if (v292 >= 0xFFFFFFFC) {
                sub_1CCFEFABC((uint64_t)v10, (uint64_t)v295, v310, v309, (uint64_t)&v559, 1);
              }
              if (v576[0] != &v577) {
                free(v576[0]);
              }
              a1 = (uint64_t)v573;
              if (v573 != v575) {
                free(v573);
              }
              if (v292 >= 0xFFFFFFFC)
              {
LABEL_807:
                if (v559 != v561) {
                  free(v559);
                }
                if (v562 != v564) {
                  free(v562);
                }
                if (__p != v567) {
                  free(__p);
                }
                uint64_t v435 = (char *)__src[0];
                if (LODWORD(__src[1]))
                {
                  uint64_t v436 = 136 * LODWORD(__src[1]);
                  do
                  {
                    int v437 = *(char **)&v435[v436 - 128];
                    if (&v435[v436 - 112] != v437) {
                      free(v437);
                    }
                    v436 -= 136;
                  }
                  while (v436);
                  uint64_t v435 = (char *)__src[0];
                }
                if (v435 != (char *)v569) {
                  free(v435);
                }
                if (v570 != v572) {
                  free(v570);
                }
                return;
              }
              goto LABEL_29;
            }
          }
        }
        uint64_t v458 = *(void **)(a1 + 296);
        unsigned int v473 = *(uint64_t **)(a2 + 32);
        uint64_t v472 = *(void *)(a2 + 40);
        char v461 = *(llvm **)v472;
        uint64_t v462 = *(void *)(v472 + 8);
        uint64_t v463 = *v473;
        uint64_t v464 = v473[1];
        __int16 v465 = 24;
LABEL_853:
        sub_1CD800714(v458, a2, v465, v461, v462, v463, v464);
        return;
      }
      int64_t v438 = *(void **)(a2 + 64);
      v576[0] = v438;
      if (v438) {
        llvm::MetadataTracking::track((uint64_t)v576, (unsigned __int8 *)v438, 2);
      }
      unint64_t v439 = 0;
      unsigned int v440 = 0;
      LODWORD(v576[1]) = *(_DWORD *)(v9 + 60);
      unsigned int v441 = *(long long **)(v9 + 32);
      uint64_t v442 = *(unsigned __int16 *)(v9 + 56);
      __dst = 0;
      v567[0] = 0;
      __p = 0;
      if (v442)
      {
        uint64_t v443 = (char *)operator new(16 * v442);
        unsigned int v440 = v443;
        uint64_t v444 = 0;
        __p = v443;
        __dst = v443;
        v567[0] = &v443[16 * v442];
        uint64_t v445 = 40 * v442;
        do
        {
          long long v446 = *v441;
          unsigned int v441 = (long long *)((char *)v441 + 40);
          *(_OWORD *)&v443[v444] = v446;
          v444 += 16;
          v445 -= 40;
        }
        while (v445);
        unint64_t v439 = &v443[v444];
      }
      uint64_t v447 = operator new(0x20uLL);
      v447[1] = v440[1];
      *(void *)uint64_t v447 = *(void *)v440;
      *((_DWORD *)v447 + 2) = *((_DWORD *)v440 + 2);
      unint64_t v448 = operator new(0x40uLL);
      v448[2] = v440[2];
      for (uint64_t n = 1; n != -1; --n)
      {
        uint64_t v450 = &v448[n];
        *(void *)uint64_t v450 = *(void *)&v447[n];
        *((_DWORD *)v450 + 2) = DWORD2(v447[n]);
      }
      uint64_t v451 = v448 + 4;
      BOOL v452 = v448 + 3;
      __p = v448;
      v567[0] = v448 + 4;
      operator delete(v447);
      __dst = v452;
      uint64_t v453 = v440 + 3;
      if ((unint64_t)v452 < v567[0])
      {
        *(_OWORD *)BOOL v452 = *v453;
        goto LABEL_863;
      }
      unint64_t v466 = __p;
      uint64_t v467 = ((char *)v452 - (unsigned char *)__p) >> 4;
      unint64_t v468 = v467 + 1;
      if ((unint64_t)(v467 + 1) >> 60) {
        goto LABEL_938;
      }
      uint64_t v469 = v567[0] - (void)__p;
      if ((uint64_t)(v567[0] - (void)__p) >> 3 > v468) {
        unint64_t v468 = v469 >> 3;
      }
      if ((unint64_t)v469 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v470 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v470 = v468;
      }
      if (v470)
      {
        if (v470 >> 60) {
          goto LABEL_939;
        }
        unint64_t v471 = (char *)operator new(16 * v470);
      }
      else
      {
        unint64_t v471 = 0;
      }
      unint64_t v474 = &v471[16 * v467];
      *(_OWORD *)unint64_t v474 = *v453;
      uint64_t v451 = v474 + 16;
      if (v452 == v466)
      {
        __p = v474;
        __dst = v474 + 16;
        v567[0] = &v471[16 * v470];
LABEL_862:
        operator delete(v452);
        goto LABEL_863;
      }
      do
      {
        uint64_t v475 = *((void *)v452 - 2);
        v452 -= 4;
        *((void *)v474 - 2) = v475;
        v474 -= 16;
        *((_DWORD *)v474 + 2) = v452[2];
      }
      while (v452 != v466);
      BOOL v452 = __p;
      __p = v474;
      __dst = v451;
      v567[0] = &v471[16 * v470];
      if (v452) {
        goto LABEL_862;
      }
LABEL_863:
      __dst = v451;
      int v544 = v439;
      uint64_t v546 = (v439 - (char *)v440) >> 4;
      int v476 = v546
           - (*(unsigned __int8 *)(*(void *)(*(void *)&v440[(v546 - 1)] + 40)
                                 + 16 * DWORD2(v440[(v546 - 1)])) == 172);
      if (v476 != 4)
      {
        unsigned int v480 = 4;
        do
        {
          unsigned int v481 = (char *)&v440[v480];
          uint64_t v482 = *(void *)(*(void *)v481 + 80);
          int v483 = (void *)(v482 + 24);
          if (*(_DWORD *)(v482 + 32) >= 0x41u) {
            int v483 = (void *)*v483;
          }
          unsigned int v484 = *(_DWORD *)v483;
          if ((v484 & 7) == 6)
          {
            if ((v484 & 0x80000000) != 0)
            {
              uint64_t v486 = *(void *)(*((void *)v440 + 8) + 80);
              uint64_t v487 = (void *)(v486 + 24);
              if (*(_DWORD *)(v486 + 32) >= 0x41u) {
                uint64_t v487 = (void *)*v487;
              }
              int v488 = HIWORD(v484) & 0x7FFF;
              unsigned int v484 = *(_DWORD *)v487;
              if (v488)
              {
                unsigned int v489 = 4;
                do
                {
                  v489 += ((unsigned __int16)v484 >> 3) + 1;
                  uint64_t v490 = *(void *)(*(void *)&v440[v489] + 80);
                  uint64_t v491 = (void *)(v490 + 24);
                  if (*(_DWORD *)(v490 + 32) >= 0x41u) {
                    uint64_t v491 = (void *)*v491;
                  }
                  unsigned int v484 = *(_DWORD *)v491;
                  --v488;
                }
                while (v488);
              }
            }
            uint64_t v492 = HIWORD(v484) & 0x7FFF;
            __src[1] = 0;
            __src[0] = 0;
            *(void *)&v569[0] = 0;
            if ((*(unsigned int (**)(uint64_t *, _OWORD *, uint64_t, void **))(*v10 + 208))(v10, &v440[v480 + 1], v492, __src))
            {
              llvm::report_fatal_error((llvm *)"Could not match memory address.  Inline asm failure!", (const llvm::Twine *)1);
            }
            uint64_t v493 = sub_1CD7EBF14(v10[37], ((unint64_t)((char *)__src[1] - (char *)__src[0]) >> 1) & 0xFFFFFFF8 | (v492 << 16) | 6, (const llvm::APInt *)v576, (llvm *)5, 0, 1, 0);
            int v495 = v493;
            uint64_t v496 = v494;
            unint64_t v497 = __dst;
            if ((unint64_t)__dst >= v567[0])
            {
              uint64_t v499 = __p;
              int64_t v500 = ((unsigned char *)__dst - (unsigned char *)__p) >> 4;
              unint64_t v501 = v500 + 1;
              if ((unint64_t)(v500 + 1) >> 60) {
                goto LABEL_938;
              }
              uint64_t v502 = v567[0] - (void)__p;
              if ((uint64_t)(v567[0] - (void)__p) >> 3 > v501) {
                unint64_t v501 = v502 >> 3;
              }
              if ((unint64_t)v502 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v501 = 0xFFFFFFFFFFFFFFFLL;
              }
              unint64_t v549 = v501;
              if (v501)
              {
                if (v501 >> 60) {
                  goto LABEL_939;
                }
                uint64_t v503 = (char *)operator new(16 * v501);
              }
              else
              {
                uint64_t v503 = 0;
              }
              uint64_t v504 = (uint64_t **)&v503[16 * v500];
              *uint64_t v504 = v495;
              v504[1] = v496;
              uint64_t v505 = v504;
              if (v497 == v499)
              {
                unint64_t v506 = v549;
              }
              else
              {
                unint64_t v506 = v549;
                do
                {
                  uint64_t v507 = (uint64_t *)*((void *)v497 - 2);
                  v497 -= 4;
                  int v508 = v497[2];
                  *(v505 - 2) = v507;
                  v505 -= 2;
                  *((_DWORD *)v505 + 2) = v508;
                }
                while (v497 != v499);
                unint64_t v497 = __p;
              }
              uint64_t v498 = v504 + 2;
              __p = v505;
              __dst = v504 + 2;
              v567[0] = &v503[16 * v506];
              if (v497) {
                operator delete(v497);
              }
            }
            else
            {
              *(void *)__dst = v493;
              *((void *)v497 + 1) = v494;
              uint64_t v498 = v497 + 4;
            }
            __dst = v498;
            sub_1CCFC8AB0((uint64_t)&__p, (char *)v498, (char *)__src[0], (char *)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 4);
            if (__src[0])
            {
              __src[1] = __src[0];
              operator delete(__src[0]);
            }
            v480 += 2;
          }
          else
          {
            int v485 = (unsigned __int16)v484 >> 3;
            sub_1CCFC8AB0((uint64_t)&__p, (char *)__dst, v481, &v481[16 * ((unsigned __int16)v484 >> 3) + 16], (16 * ((unsigned __int16)v484 >> 3) + 16) >> 4);
            v480 += v485 + 1;
          }
        }
        while (v480 != v476);
      }
      if (v546 != v476)
      {
        unsigned __int16 v477 = v544 - 16;
        uint64_t v478 = __dst;
        if ((unint64_t)__dst < v567[0])
        {
          *(_OWORD *)__dst = *(_OWORD *)v477;
          unint64_t v479 = v478 + 4;
LABEL_919:
          __dst = v479;
          goto LABEL_920;
        }
        uint64_t v509 = __p;
        int64_t v510 = ((unsigned char *)__dst - (unsigned char *)__p) >> 4;
        unint64_t v511 = v510 + 1;
        if (!((unint64_t)(v510 + 1) >> 60))
        {
          uint64_t v512 = v567[0] - (void)__p;
          if ((uint64_t)(v567[0] - (void)__p) >> 3 > v511) {
            unint64_t v511 = v512 >> 3;
          }
          if ((unint64_t)v512 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v513 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v513 = v511;
          }
          if (!v513)
          {
            uint64_t v514 = 0;
LABEL_914:
            uint64_t v515 = &v514[16 * v510];
            *(_OWORD *)uint64_t v515 = *(_OWORD *)v477;
            unint64_t v479 = v515 + 16;
            if (v478 != v509)
            {
              do
              {
                uint64_t v516 = *((void *)v478 - 2);
                v478 -= 4;
                int v517 = v478[2];
                *((void *)v515 - 2) = v516;
                v515 -= 16;
                *((_DWORD *)v515 + 2) = v517;
              }
              while (v478 != v509);
              uint64_t v478 = __p;
            }
            __p = v515;
            __dst = v479;
            v567[0] = &v514[16 * v513];
            if (v478) {
              operator delete(v478);
            }
            goto LABEL_919;
          }
          if (!(v513 >> 60))
          {
            uint64_t v514 = (char *)operator new(16 * v513);
            goto LABEL_914;
          }
LABEL_939:
          sub_1CB833614();
        }
LABEL_938:
        abort();
      }
LABEL_920:
      operator delete(v440);
      *(_OWORD *)unint64_t __src = xmmword_1CFB2DE20;
      v569[0] = unk_1CFB2DE30;
      unint64_t v518 = sub_1CD7EB5F0((void *)v10[37], (const char *)*(unsigned __int16 *)(v9 + 24), (const llvm::APInt *)v576, (uint64_t *)__src, 2, (uint64_t *)__p, ((unsigned char *)__dst - (unsigned char *)__p) >> 4);
      *((_DWORD *)v518 + 7) = -1;
      sub_1CCFCC50C(v10[37], v9, (uint64_t)v518);
      sub_1CD808A6C((uint64_t)v518);
      sub_1CD7EA438((void *)v10[37], v9);
      if (__p)
      {
        __dst = __p;
        operator delete(__p);
      }
      if (v576[0])
      {
        int v519 = *(unsigned __int8 *)v576[0];
        if ((v519 - 4) > 0x1E)
        {
          if ((v519 - 3) >= 0xFFFFFFFE) {
            unint64_t v522 = v576[0];
          }
          else {
            unint64_t v522 = 0;
          }
          if ((v519 - 3) < 0xFFFFFFFE)
          {
            if (v519 == 3) {
              *((void *)v576[0] + 1) = 0;
            }
            return;
          }
          unint64_t v521 = (unint64_t)v522 + 8;
        }
        else
        {
          if ((*((unsigned char *)v576[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v576[0] + 3)) {
            return;
          }
          uint64_t v520 = *((void *)v576[0] + 2);
          if ((v520 & 4) == 0) {
            return;
          }
          unint64_t v521 = v520 & 0xFFFFFFFFFFFFFFF8;
          if (!v521) {
            return;
          }
        }
        __src[0] = v576;
        sub_1CC5FA668(v521 + 16, __src);
      }
      return;
  }
}

uint64_t *sub_1CCFF3A60(unsigned int *a1, void *a2)
{
  v57[8] = *MEMORY[0x1E4F143B8];
  int v43 = v47;
  uint64_t v44 = v47;
  uint64_t v45 = 16;
  int v46 = 0;
  uint64_t v55 = v57;
  uint64_t v56 = 0x800000000;
  int v52 = v54;
  uint64_t v53 = 0x300000000;
  uint64_t v3 = a1[2];
  if (v3 == 1)
  {
    uint64_t v4 = **(uint64_t ***)(**(void **)a1 + 32);
    goto LABEL_73;
  }
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1F26425C8;
  v6[1] = &v43;
  v6[2] = v50;
  v6[3] = &v52;
  int v51 = v6;
  if (!v3) {
    goto LABEL_50;
  }
  uint64_t v7 = *(uint64_t **)a1;
  uint64_t v8 = *(void *)a1 + 8 * v3;
  do
  {
    uint64_t v9 = *v7;
    if (v56 >= (unint64_t)HIDWORD(v56)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v55[v56] = v9;
    LODWORD(v56) = v56 + 1;
    uint64_t v10 = v44;
    uint64_t v11 = HIDWORD(v45);
    if (v44 != v43)
    {
      unsigned int v15 = v45;
      goto LABEL_17;
    }
    if (!HIDWORD(v45))
    {
LABEL_14:
      unsigned int v15 = v45;
      if (HIDWORD(v45) < v45)
      {
        ++HIDWORD(v45);
        *(void *)&v44[8 * v11] = v9;
        goto LABEL_38;
      }
LABEL_17:
      if (3 * v15 <= 4 * (HIDWORD(v45) - v46))
      {
        if (v15 >= 0x40) {
          v15 *= 2;
        }
        else {
          unsigned int v15 = 128;
        }
      }
      else if (v15 - HIDWORD(v45) >= v15 >> 3)
      {
        goto LABEL_19;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v43, v15);
      unsigned int v15 = v45;
      uint64_t v10 = v44;
LABEL_19:
      unsigned int v16 = v15 - 1;
      unsigned int v17 = (v15 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v18 = &v10[8 * v17];
      uint64_t v19 = *(void *)v18;
      if (*(void *)v18 == -1)
      {
        int v20 = 0;
LABEL_31:
        if (v20) {
          unint64_t v24 = v20;
        }
        else {
          unint64_t v24 = v18;
        }
        if (*(void *)v24 != v9)
        {
          if (*(void *)v24 == -2) {
            --v46;
          }
          else {
            ++HIDWORD(v45);
          }
          *(void *)unint64_t v24 = v9;
        }
      }
      else
      {
        int v20 = 0;
        int v21 = 1;
        while (v19 != v9)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v19 == -2;
          }
          if (v22) {
            int v20 = v18;
          }
          unsigned int v23 = v17 + v21++;
          unsigned int v17 = v23 & v16;
          uint64_t v18 = &v10[8 * (v23 & v16)];
          uint64_t v19 = *(void *)v18;
          if (*(void *)v18 == -1) {
            goto LABEL_31;
          }
        }
      }
      goto LABEL_38;
    }
    int v12 = 0;
    uint64_t v13 = 8 * HIDWORD(v45);
    uint64_t v14 = v44;
    while (*(void *)v14 != v9)
    {
      if (*(void *)v14 == -2) {
        int v12 = v14;
      }
      v14 += 8;
      v13 -= 8;
      if (!v13)
      {
        if (!v12) {
          goto LABEL_14;
        }
        *(void *)int v12 = v9;
        --v46;
        break;
      }
    }
LABEL_38:
    ++v7;
  }
  while (v7 != (uint64_t *)v8);
  while (v56)
  {
    uint64_t v25 = v55[v56 - 1];
    LODWORD(v56) = v56 - 1;
    long long v48 = *(_OWORD *)*(void *)(v25 + 32);
    if (!v51) {
      sub_1CB920400();
    }
    (*(void (**)(void *, long long *))(*v51 + 48))(v51, &v48);
  }
LABEL_50:
  if (!v53)
  {
    uint64_t v4 = a2 + 14;
    goto LABEL_67;
  }
  if (v44 == v43) {
    goto LABEL_52;
  }
  if (v45 >= 0x21 && 4 * (HIDWORD(v45) - v46) < v45)
  {
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v43);
  }
  else
  {
    memset(v44, 255, 8 * v45);
LABEL_52:
    HIDWORD(v45) = 0;
    int v46 = 0;
  }
  if (v53)
  {
    unint64_t v26 = v52;
    unsigned int v27 = v56;
    uint64_t v28 = 16 * v53;
    do
    {
      if (v27 >= HIDWORD(v56)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v55[v27] = *v26;
      unsigned int v27 = v56 + 1;
      LODWORD(v56) = v56 + 1;
      v26 += 2;
      v28 -= 16;
    }
    while (v28);
  }
  uint64_t v29 = a1[2];
  if (v29)
  {
    int v30 = *(uint64_t **)a1;
    uint64_t v31 = 8 * v29;
    while ((sub_1CCF551A8(*v30, (llvm::SmallPtrSetImplBase *)&v43, (unsigned int *)&v55, 0x2000u, 1) & 1) == 0)
    {
      ++v30;
      v31 -= 8;
      if (!v31) {
        goto LABEL_63;
      }
    }
    uint64_t v4 = 0;
  }
  else
  {
LABEL_63:
    unsigned int v32 = v53;
    if (v53 == 1)
    {
      uint64_t v4 = *(uint64_t **)v52;
      goto LABEL_67;
    }
    uint64_t v34 = **(void **)a1;
    int v35 = *(unsigned __int8 **)(v34 + 64);
    *(void *)&long long v48 = v35;
    if (v35)
    {
      llvm::MetadataTracking::track((uint64_t)&v48, v35, 2);
      unsigned int v32 = v53;
    }
    DWORD2(v48) = *(_DWORD *)(v34 + 60);
    uint64_t v36 = v32;
    uint64_t v37 = a2[104];
    if (v37) {
      uint64_t v38 = *(unsigned __int16 *)(v37 + 8);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v4 = sub_1CD7FF4E8(a2, (const char *)2, (const llvm::APInt *)&v48, (llvm *)1, 0, (uint64_t *)v52, v36, v38);
    if ((void)v48)
    {
      int v39 = *(unsigned __int8 *)v48;
      if ((v39 - 4) > 0x1E)
      {
        if ((v39 - 3) >= 0xFFFFFFFE) {
          uint64_t v42 = v48;
        }
        else {
          uint64_t v42 = 0;
        }
        if ((v39 - 3) < 0xFFFFFFFE)
        {
          if (v39 == 3) {
            *(void *)(v48 + 8) = 0;
          }
          goto LABEL_67;
        }
        unint64_t v41 = v42 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v48 + 1) & 0x7F) != 2 && !*(_DWORD *)(v48 + 12)) {
          goto LABEL_67;
        }
        uint64_t v40 = *(void *)(v48 + 16);
        if ((v40 & 4) == 0) {
          goto LABEL_67;
        }
        unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (!v41) {
          goto LABEL_67;
        }
      }
      int v49 = &v48;
      sub_1CC5FA668(v41 + 16, &v49);
    }
  }
LABEL_67:
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
  }
  else if (v51)
  {
    (*(void (**)(void))(*v51 + 40))();
  }
  if (v52 != v54) {
    free(v52);
  }
LABEL_73:
  if (v55 != v57) {
    free(v55);
  }
  if (v44 != v43) {
    free(v44);
  }
  return v4;
}

void *sub_1CCFF402C(void *a1)
{
  *a1 = &unk_1F26423D8;
  unsigned int v2 = a1 + 81;
  uint64_t v3 = (void *)a1[84];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  sub_1CCFF40EC(a1 + 20);

  return sub_1CB87DD48(a1);
}

void *sub_1CCFF40EC(void *a1)
{
  *a1 = &unk_1F2642440;
  qword_1EBD0C008 = 0;
  a1[1] = &unk_1F26424C8;
  unsigned int v2 = (void *)a1[3];
  if (v2 != a1 + 5) {
    free(v2);
  }
  return a1;
}

void *sub_1CCFF4168(uint64_t a1)
{
  return sub_1CCFF40EC((void *)(a1 - 8));
}

void sub_1CCFF4170(void *a1)
{
  sub_1CCFF40EC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCFF41A8(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  *(void *)&long long v13 = a5;
  *((void *)&v13 + 1) = a6;
  char v16 = 1;
  uint64_t v14 = &unk_1F2642518;
  uint64_t v15 = a4;
  unint64_t v6 = *(void *)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(a1 + 24);
  if (v7 >= *(_DWORD *)(a1 + 28))
  {
    BOOL v11 = v6 + 56 * v7 > (unint64_t)&v12;
    if (v6 > (unint64_t)&v12 || !v11) {
      sub_1CD809B84();
    }
    sub_1CD809B84();
  }
  uint64_t v8 = v6 + 56 * *(unsigned int *)(a1 + 24);
  long long v9 = v13;
  *(_OWORD *)uint64_t v8 = v12;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 32) = &unk_1F2642538;
  uint64_t v10 = v15;
  *(unsigned char *)(v8 + 48) = v16;
  *(void *)(v8 + 32) = &unk_1F2642518;
  *(void *)(v8 + 40) = v10;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(void *)(a1 + 8), a2, a3);
}

BOOL sub_1CCFF42E4(_DWORD *a1)
{
  if (a1[2] > 0x40u)
  {
    unint64_t v6 = a1;
    int v4 = a1[2];
    int v5 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a1);
    a1 = v6;
    if (v5 == v4) {
      goto LABEL_3;
    }
    return 0;
  }
  if (*(void *)a1) {
    return 0;
  }
LABEL_3:
  unsigned int v1 = a1[6];
  if (v1 > 0x40) {
    return llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a1 + 4)) == v1;
  }
  else {
    return *((void *)a1 + 2) == 0;
  }
}

void sub_1CCFF4370(void *a1)
{
  *a1 = &unk_1F26420B8;
  *(void *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCFF43A8(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(void **)(result + 24);
  uint64_t v3 = a2 + 8;
  if (!a2) {
    uint64_t v3 = 0;
  }
  if (*v2 == v3) {
    void *v2 = *(void *)(v3 + 8);
  }
  return result;
}

void *sub_1CCFF43D4(void *result)
{
  *uint64_t result = &unk_1F26420B8;
  *(void *)(result[2] + 656) = result[1];
  return result;
}

void sub_1CCFF43FC(void *a1)
{
  *a1 = &unk_1F26420B8;
  *(void *)(a1[2] + 656) = a1[1];
  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CCFF4434(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 && (*(__int16 *)(a3 + 24) & 0x80000000) == 0)
  {
    uint64_t v3 = (void *)result[3];
    if (*v3 == a2) {
      *uint64_t v3 = a3;
    }
    uint64_t v4 = result[4];
    uint64_t v5 = *(unsigned int *)(v4 + 8);
    if (v5)
    {
      unint64_t v6 = *(void **)v4;
      uint64_t v7 = 24 * v5;
      do
      {
        if (*v6 == a2) {
          *unint64_t v6 = a3;
        }
        v6 += 3;
        v7 -= 24;
      }
      while (v7);
    }
    uint64_t v8 = (uint64_t *)result[5];
    unsigned int v9 = *((_DWORD *)v8 + 2);
    if (v9)
    {
      uint64_t v10 = *v8;
      uint64_t v11 = v10 + 136 * v9;
      do
      {
        uint64_t v12 = *(unsigned int *)(v10 + 16);
        if (v12)
        {
          long long v13 = *(void **)(v10 + 8);
          uint64_t v14 = 16 * v12;
          do
          {
            if (*v13 == a2) {
              *long long v13 = a3;
            }
            v13 += 2;
            v14 -= 16;
          }
          while (v14);
        }
        v10 += 136;
      }
      while (v10 != v11);
    }
  }
  return result;
}

void sub_1CCFF44E0()
{
}

__n128 sub_1CCFF44F4(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_1F26425C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CCFF4548(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26425C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCFF4580(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*(unsigned char *)(*(void *)(*a2 + 40) + 16 * v3) != 1) {
    return;
  }
  int v4 = *(unsigned __int16 *)(v2 + 24);
  if (v4 == 1) {
    return;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(unsigned int *)(v6 + 20);
  if (v7 == *(void *)v6)
  {
    if (v8)
    {
      unsigned int v9 = 0;
      uint64_t v10 = 8 * v8;
      uint64_t v11 = *(void **)(v6 + 8);
      while (*v11 != v2)
      {
        if (*v11 == -2) {
          unsigned int v9 = v11;
        }
        ++v11;
        v10 -= 8;
        if (!v10)
        {
          if (!v9) {
            goto LABEL_11;
          }
          void *v9 = v2;
          --*(_DWORD *)(v6 + 24);
          goto LABEL_35;
        }
      }
      return;
    }
LABEL_11:
    unsigned int v12 = *(_DWORD *)(v6 + 16);
    if (v8 < v12)
    {
      *(_DWORD *)(v6 + 20) = v8 + 1;
      *(void *)(v7 + 8 * v8) = v2;
      goto LABEL_35;
    }
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(v6 + 16);
  }
  if (3 * v12 <= 4 * ((int)v8 - *(_DWORD *)(v6 + 24)))
  {
    if (v12 >= 0x40) {
      v12 *= 2;
    }
    else {
      unsigned int v12 = 128;
    }
  }
  else if (v12 - v8 >= v12 >> 3)
  {
    goto LABEL_16;
  }
  llvm::SmallPtrSetImplBase::Grow(*(llvm::SmallPtrSetImplBase **)(a1 + 8), v12);
  unsigned int v12 = *(_DWORD *)(v6 + 16);
  uint64_t v7 = *(void *)(v6 + 8);
LABEL_16:
  unsigned int v13 = v12 - 1;
  unsigned int v14 = (v12 - 1) & ((v2 >> 4) ^ (v2 >> 9));
  uint64_t v15 = (void *)(v7 + 8 * v14);
  uint64_t v16 = *v15;
  if (*v15 != -1)
  {
    unsigned int v17 = 0;
    int v18 = 1;
    while (v16 != v2)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v16 == -2;
      }
      if (v19) {
        unsigned int v17 = v15;
      }
      unsigned int v20 = v14 + v18++;
      unsigned int v14 = v20 & v13;
      uint64_t v15 = (void *)(v7 + 8 * (v20 & v13));
      uint64_t v16 = *v15;
      if (*v15 == -1) {
        goto LABEL_28;
      }
    }
    return;
  }
  unsigned int v17 = 0;
LABEL_28:
  if (v17) {
    int v21 = v17;
  }
  else {
    int v21 = v15;
  }
  if (*v21 != v2)
  {
    if (*v21 == -2) {
      --*(_DWORD *)(v6 + 24);
    }
    else {
      ++*(_DWORD *)(v6 + 20);
    }
    *int v21 = v2;
    int v4 = *(unsigned __int16 *)(v2 + 24);
LABEL_35:
    if (v4 == 2)
    {
      if (*(_WORD *)(v2 + 56))
      {
        BOOL v22 = *(long long **)(v2 + 32);
        uint64_t v23 = 40 * *(unsigned __int16 *)(v2 + 56);
        while (1)
        {
          uint64_t v24 = *(void *)(a1 + 16);
          long long v29 = *v22;
          uint64_t v25 = *(void *)(v24 + 24);
          if (!v25) {
            break;
          }
          (*(void (**)(uint64_t, long long *))(*(void *)v25 + 48))(v25, &v29);
          BOOL v22 = (long long *)((char *)v22 + 40);
          v23 -= 40;
          if (!v23) {
            return;
          }
        }
        sub_1CB920400();
        sub_1CCFF47EC();
      }
    }
    else
    {
      uint64_t v26 = *(void *)(a1 + 24);
      unsigned int v27 = *(_DWORD *)(v26 + 8);
      if (v27 >= *(_DWORD *)(v26 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v28 = (void *)(*(void *)v26 + 16 * v27);
      *uint64_t v28 = v2;
      v28[1] = v3;
      ++*(_DWORD *)(v26 + 8);
    }
  }
}

void sub_1CCFF47EC()
{
  for (uint64_t i = qword_1EBD0BFF8; i; uint64_t i = *(void *)i)
    sub_1CCFF41A8((uint64_t)&qword_1EBCFA760, *(unsigned __int8 **)(i + 8), *(void *)(i + 16), *(void *)(i + 40), *(void *)(i + 24), *(void *)(i + 32));
  qword_1EBD0C008 = (uint64_t)&qword_1EBCFA758;
}

void sub_1CCFF4848(void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 32;
        uint64_t v7 = (void **)(v4 - 24);
        sub_1CCFC7950(&v7);
        int v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CCFF48C8()
{
}

void *sub_1CCFF48DC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2642680;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCFF4924(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2642680;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CCFF4950(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(unsigned int *)(v2 + 8);
  if (v3)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = *(void **)v2;
    uint64_t v6 = 8 * v3;
    do
    {
      if (*v5 == v4) {
        void *v5 = 0;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_1CCFF498C()
{
}

__n128 sub_1CCFF49A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F26426C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCFF49EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26426C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCFF4A1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  sub_1CCFE2110(*(void *)(*(void *)(a1 + 8) + 296), *a2);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(char **)v4;
  uint64_t v6 = *(unsigned int *)(v4 + 8);
  uint64_t v7 = *(char **)v4;
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    uint64_t v7 = *(char **)v4;
    while (*(void *)v7 != v3)
    {
      v7 += 8;
      v8 -= 8;
      if (!v8)
      {
        uint64_t v7 = (char *)(*(void *)v4 + 8 * v6);
        break;
      }
    }
  }
  uint64_t v9 = (v7 - v5) >> 3;
  uint64_t v10 = v7 + 8;
  if (v9 != v6 && v10 != (void *)(*(void *)v4 + 8 * v6))
  {
    uint64_t v12 = 8 * v6 - 8 * v9 - 8;
    do
    {
      if (*v10 != v3)
      {
        *(void *)uint64_t v7 = *v10;
        v7 += 8;
      }
      ++v10;
      v12 -= 8;
    }
    while (v12);
    uint64_t v5 = *(char **)v4;
  }
  *(_DWORD *)(v4 + 8) = (unint64_t)(v7 - v5) >> 3;
}

uint64_t sub_1CCFF4ADC()
{
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Enable abort calls when \"fast\" instruction selection fails to lower an instructio"
                                     "n: 0 disable the abort, 1 will abort but for args, calls and terminators, 2 will al"
                                     "so abort for argument lowering, and 3 will never fallback to SelectionDAG.";
  v1.n128_u64[1] = 238;
  sub_1CD809CB4(&v4, (long long *)&v1);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCFA478, &dword_1CB82C000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Emit a diagnostic when \"fast\" instruction selection falls back to SelectionDAG.";
  v1.n128_u64[1] = 79;
  sub_1CD4C1500((uint64_t)&unk_1EBCFA538, "fast-isel-report-on-fallback", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFA538, &dword_1CB82C000);
  v1.n128_u64[0] = (unint64_t)"use Machine Branch Probability Info";
  v1.n128_u64[1] = 35;
  LOBYTE(v2) = 1;
  uint64_t v4 = (uint64_t (**)(uint64_t, uint64_t))&v2;
  LODWORD(v3) = 1;
  sub_1CD809DC0(&v1, (char **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCFA5F8, &dword_1CB82C000);
  uint64_t v3 = sub_1CD807A18;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Instruction schedulers available (before register allocation):";
  v1.n128_u64[1] = 62;
  sub_1CD809F38((uint64_t **)&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD807C3C, &qword_1EBCFA6B8, &dword_1CB82C000);
  qword_1EBCFA448 = 0;
  unk_1EBCFA450 = "default";
  qword_1EBCFA458 = 7;
  unk_1EBCFA460 = "Best scheduler for the target";
  qword_1EBCFA468 = 29;
  unk_1EBCFA470 = sub_1CD807A18;
  sub_1CCF97F78(&qword_1EBD0BFF8, &qword_1EBCFA448);
  return __cxa_atexit((void (*)(void *))sub_1CCF97F44, &qword_1EBCFA448, &dword_1CB82C000);
}

void sub_1CCFF4C98(uint64_t a1, uint64_t a2, llvm::Twine *this, char a4, llvm::Twine *a5, uint64_t a6)
{
  if (*(char *)(a6 + 23) < 0) {
    uint64_t v11 = *(void *)(a6 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(a6 + 23);
  }
  int v49 = 0;
  if (v11)
  {
    __int16 v44 = 260;
    uint64_t v42 = a6;
    *(void *)&long long v47 = llvm::sys::fs::openFile((unsigned __int8 *)&v42, &v49, 0, 2, 1, 438);
    *((void *)&v47 + 1) = v12;
    unsigned int v13 = std::generic_category();
    uint64_t v42 = 17;
    int v43 = v13;
    unsigned int v14 = (llvm *)(*(uint64_t (**)(void, void, uint64_t *))(**((void **)&v47 + 1) + 32))(*((void *)&v47 + 1), v47, &v42);
    if (v14
      || (unsigned int v14 = (llvm *)((uint64_t (*)(const std::error_category *, long long *, void))v43->equivalent_0)(v43, &v47, v42), v14))
    {
      unsigned int v20 = (llvm::raw_ostream *)llvm::errs(v14);
      int v21 = (void *)*((void *)v20 + 4);
      if (*((void *)v20 + 3) - (void)v21 > 0x17uLL)
      {
        qmemcpy(v21, "file exists, overwriting", 24);
        BOOL v22 = (unsigned char *)(*((void *)v20 + 4) + 24);
        *((void *)v20 + 4) = v22;
      }
      else
      {
        unsigned int v20 = llvm::raw_ostream::write(v20, "file exists, overwriting", 0x18uLL);
        BOOL v22 = (unsigned char *)*((void *)v20 + 4);
      }
      uint64_t v23 = (unsigned char *)*((void *)v20 + 3);
    }
    else
    {
      int v15 = v47;
      uint64_t v16 = (llvm::raw_ostream *)llvm::errs(v14);
      unsigned int v17 = (char *)*((void *)v16 + 4);
      unint64_t v18 = *((void *)v16 + 3) - (void)v17;
      if (v15)
      {
        if (v18 > 0x16)
        {
          qmemcpy(v17, "error writing into file", 23);
          BOOL v19 = (unsigned char *)(*((void *)v16 + 4) + 23);
          *((void *)v16 + 4) = v19;
        }
        else
        {
          uint64_t v16 = llvm::raw_ostream::write(v16, "error writing into file", 0x17uLL);
          BOOL v19 = (unsigned char *)*((void *)v16 + 4);
        }
        if (*((unsigned char **)v16 + 3) == v19)
        {
          llvm::raw_ostream::write(v16, "\n", 1uLL);
        }
        else
        {
          *BOOL v19 = 10;
          ++*((void *)v16 + 4);
        }
        *(unsigned char *)(a1 + 23) = 0;
        *(unsigned char *)a1 = 0;
        return;
      }
      if (v18 > 0x21)
      {
        qmemcpy(v17, "writing to the newly created file ", 34);
        *((void *)v16 + 4) += 34;
      }
      else
      {
        uint64_t v16 = llvm::raw_ostream::write(v16, "writing to the newly created file ", 0x22uLL);
      }
      char v24 = *(unsigned char *)(a6 + 23);
      BOOL v25 = v24 < 0;
      if (v24 >= 0) {
        uint64_t v26 = (const char *)a6;
      }
      else {
        uint64_t v26 = *(const char **)a6;
      }
      size_t v27 = v24 & 0x7F;
      if (v25) {
        size_t v28 = *(void *)(a6 + 8);
      }
      else {
        size_t v28 = v27;
      }
      unsigned int v20 = llvm::raw_ostream::write(v16, v26, v28);
      uint64_t v23 = (unsigned char *)*((void *)v20 + 3);
      BOOL v22 = (unsigned char *)*((void *)v20 + 4);
    }
    if (v23 == v22)
    {
      llvm::raw_ostream::write(v20, "\n", 1uLL);
    }
    else
    {
      *BOOL v22 = 10;
      ++*((void *)v20 + 4);
    }
  }
  else
  {
    llvm::Twine::str(this, __p);
    __int16 v44 = 260;
    uint64_t v42 = (uint64_t)__p;
    llvm::createGraphFilename((llvm *)&v42, (const llvm::Twine *)&v49, (uint64_t)&v47);
    if (*(char *)(a6 + 23) < 0) {
      operator delete(*(void **)a6);
    }
    *(_OWORD *)a6 = v47;
    *(void *)(a6 + 16) = v48;
    HIBYTE(v48) = 0;
    LOBYTE(v47) = 0;
    if (v46 < 0) {
      operator delete(__p[0]);
    }
  }
  long long v29 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v42, v49, 1, 0, 0);
  if (v49 == -1)
  {
    int v30 = (llvm::raw_ostream *)llvm::errs(v29);
    uint64_t v31 = *((void *)v30 + 4);
    if ((unint64_t)(*((void *)v30 + 3) - v31) > 0x13)
    {
      *(_DWORD *)(v31 + 16) = 656434540;
      *(_OWORD *)uint64_t v31 = *(_OWORD *)"error opening file '";
      *((void *)v30 + 4) += 20;
    }
    else
    {
      int v30 = llvm::raw_ostream::write(v30, "error opening file '", 0x14uLL);
    }
    char v32 = *(unsigned char *)(a6 + 23);
    BOOL v33 = v32 < 0;
    if (v32 >= 0) {
      uint64_t v34 = (const char *)a6;
    }
    else {
      uint64_t v34 = *(const char **)a6;
    }
    size_t v35 = v32 & 0x7F;
    if (v33) {
      size_t v36 = *(void *)(a6 + 8);
    }
    else {
      size_t v36 = v35;
    }
    uint64_t v37 = llvm::raw_ostream::write(v30, v34, v36);
    uint64_t v38 = (void *)*((void *)v37 + 4);
    if (*((void *)v37 + 3) - (void)v38 > 0xEuLL)
    {
      qmemcpy(v38, "' for writing!\n", 15);
      *((void *)v37 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v37, "' for writing!\n", 0xFuLL);
    }
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    int v39 = (llvm *)sub_1CD80AB58((uint64_t)&v42, a2, a4, a5);
    uint64_t v40 = (llvm::raw_ostream *)llvm::errs(v39);
    unint64_t v41 = (void *)*((void *)v40 + 4);
    if (*((void *)v40 + 3) - (void)v41 > 7uLL)
    {
      *unint64_t v41 = 0xA202E656E6F6420;
      *((void *)v40 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v40, " done. \n", 8uLL);
    }
    *(_OWORD *)a1 = *(_OWORD *)a6;
    *(void *)(a1 + 16) = *(void *)(a6 + 16);
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    *(void *)a6 = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v42);
}

void sub_1CCFF50EC(uint64_t a1, unint64_t a2)
{
  char v101 = 13;
  strcpy((char *)v100, "shape=Mrecord");
  uint64_t v4 = *(llvm::raw_ostream **)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v5) > 4)
  {
    *(unsigned char *)(v5 + 4) = 101;
    *(_DWORD *)uint64_t v5 = 1685016073;
    *((void *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v4, a2, 3, 0, 0);
  uint64_t v6 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v6 > 7uLL)
  {
    *uint64_t v6 = 0x3D65706168735B20;
    *((void *)v4 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v4, " [shape=", 8uLL);
  }
  uint64_t v7 = *(llvm::raw_ostream **)a1;
  uint64_t v8 = *(void *)(*(void *)a1 + 32);
  unint64_t v9 = *(void *)(*(void *)a1 + 24) - v8;
  if (*(unsigned char *)(a1 + 16))
  {
    if (v9 <= 4)
    {
      uint64_t v10 = "none,";
      size_t v11 = 5;
      goto LABEL_10;
    }
    *(unsigned char *)(v8 + 4) = 44;
    *(_DWORD *)uint64_t v8 = 1701736302;
    uint64_t v85 = *((void *)v7 + 4) + 5;
  }
  else
  {
    if (v9 <= 6)
    {
      uint64_t v10 = "record,";
      size_t v11 = 7;
LABEL_10:
      llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_11;
    }
    *(_DWORD *)(v8 + 3) = 744780399;
    *(_DWORD *)uint64_t v8 = 1868785010;
    uint64_t v85 = *((void *)v7 + 4) + 7;
  }
  *((void *)v7 + 4) = v85;
LABEL_11:
  if (v101 >= 0) {
    size_t v12 = v101 & 0x7F;
  }
  else {
    size_t v12 = (size_t)v100[1];
  }
  if (v12)
  {
    if (v101 >= 0) {
      unsigned int v13 = (const char *)v100;
    }
    else {
      unsigned int v13 = (const char *)v100[0];
    }
    unsigned int v14 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v13, v12);
    int v15 = (unsigned char *)*((void *)v14 + 4);
    if (*((unsigned char **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, ",", 1uLL);
    }
    else
    {
      *int v15 = 44;
      ++*((void *)v14 + 4);
    }
  }
  uint64_t v16 = *(llvm::raw_ostream **)a1;
  uint64_t v17 = *(void *)(*(void *)a1 + 32);
  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 15724;
    *(_DWORD *)uint64_t v17 = 1700946284;
    *((void *)v16 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v16, "label=", 6uLL);
  }
  if (*(unsigned char *)(a1 + 16))
  {
    int v21 = *(unsigned __int16 *)(a2 + 56);
    if (*(_WORD *)(a2 + 56))
    {
      int v24 = v21 - 1;
      if ((v21 - 1) >= 0x3F) {
        int v24 = 63;
      }
      unsigned int v22 = v24 + 1;
      BOOL v23 = v22 != v21;
    }
    else
    {
      unsigned int v22 = 0;
      BOOL v23 = 0;
    }
    if (v22 <= 1) {
      int v25 = 1;
    }
    else {
      int v25 = v22;
    }
    uint64_t v26 = *(llvm::raw_ostream **)a1;
    size_t v27 = *(void **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v27 > 0x30uLL)
    {
      qmemcpy(v27, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
      size_t v28 = (void *)(*((void *)v26 + 4) + 49);
      *((void *)v26 + 4) = v28;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
      size_t v28 = (void *)*((void *)v26 + 4);
    }
    unint64_t v29 = (v25 + v23);
    if (*((void *)v26 + 3) - (void)v28 > 0x2EuLL)
    {
      qmemcpy(v28, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
      *((void *)v26 + 4) += 47;
    }
    else
    {
      llvm::raw_ostream::write(v26, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
    }
    sub_1CD098D14(v26, v29, 0, 0, 0);
    int v30 = (_WORD *)*((void *)v26 + 4);
    if (*((void *)v26 + 3) - (void)v30 <= 1uLL)
    {
      unsigned int v20 = "\">";
      unint64_t v18 = v26;
      goto LABEL_39;
    }
    *int v30 = 15906;
    *((void *)v26 + 4) += 2;
  }
  else
  {
    unint64_t v18 = *(llvm::raw_ostream **)a1;
    BOOL v19 = *(_WORD **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v19 <= 1uLL)
    {
      unsigned int v20 = "\"{";
LABEL_39:
      llvm::raw_ostream::write(v18, v20, 2uLL);
      goto LABEL_40;
    }
    *BOOL v19 = 31522;
    *((void *)v18 + 4) += 2;
  }
LABEL_40:
  v98[0] = 0;
  v98[1] = 0;
  uint64_t v99 = 0;
  int v90 = 0;
  char v94 = 0;
  uint64_t v95 = 0;
  int v97 = v98;
  int v96 = 0;
  unsigned int v89 = &unk_1F2646F30;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  if (!sub_1CD80AFC0(a1, (llvm::raw_ostream *)&v89, *(_WORD *)(a2 + 56))) {
    goto LABEL_62;
  }
  uint64_t v31 = *(llvm::raw_ostream **)a1;
  if (*(unsigned char *)(a1 + 16))
  {
    char v39 = *((unsigned char *)v97 + 23);
    if (v39 >= 0) {
      uint64_t v37 = (const char *)v97;
    }
    else {
      uint64_t v37 = (const char *)*v97;
    }
    if (v39 >= 0) {
      size_t v38 = v39 & 0x7F;
    }
    else {
      size_t v38 = (size_t)v97[1];
    }
  }
  else
  {
    char v32 = (unsigned char *)*((void *)v31 + 4);
    if (*((unsigned char **)v31 + 3) == v32)
    {
      uint64_t v31 = llvm::raw_ostream::write(v31, "{", 1uLL);
    }
    else
    {
      *char v32 = 123;
      ++*((void *)v31 + 4);
    }
    char v33 = *((unsigned char *)v97 + 23);
    if (v33 >= 0) {
      uint64_t v34 = (const char *)v97;
    }
    else {
      uint64_t v34 = (const char *)*v97;
    }
    if (v33 >= 0) {
      size_t v35 = v33 & 0x7F;
    }
    else {
      size_t v35 = (size_t)v97[1];
    }
    uint64_t v31 = llvm::raw_ostream::write(v31, v34, v35);
    size_t v36 = (unsigned char *)*((void *)v31 + 4);
    if (*((unsigned char **)v31 + 3) != v36)
    {
      *size_t v36 = 125;
      ++*((void *)v31 + 4);
      goto LABEL_59;
    }
    uint64_t v37 = "}";
    size_t v38 = 1;
  }
  llvm::raw_ostream::write(v31, v37, v38);
LABEL_59:
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_73;
  }
  uint64_t v40 = *(llvm::raw_ostream **)a1;
  unint64_t v41 = *(unsigned char **)(*(void *)a1 + 32);
  if (*(unsigned char **)(*(void *)a1 + 24) == v41)
  {
    llvm::raw_ostream::write(v40, "|", 1uLL);
  }
  else
  {
    *unint64_t v41 = 124;
    ++*((void *)v40 + 4);
  }
LABEL_62:
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v42 = *(llvm::raw_ostream **)a1;
    sub_1CD80A478(&v86, a2, **(void **)(a1 + 8));
    llvm::DOT::EscapeString((char *)&v86, (uint64_t)__p);
    if (v103 >= 0) {
      int v43 = __p;
    }
    else {
      int v43 = (void **)__p[0];
    }
    if (v103 >= 0) {
      size_t v44 = HIBYTE(v103) & 0x7F;
    }
    else {
      size_t v44 = (size_t)__p[1];
    }
    llvm::raw_ostream::write(v42, (const char *)v43, v44);
    if (SHIBYTE(v103) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v88) < 0)
    {
      uint64_t v45 = v86;
LABEL_81:
      operator delete(v45);
      goto LABEL_82;
    }
    goto LABEL_82;
  }
LABEL_73:
  char v46 = *(llvm::raw_ostream **)a1;
  sub_1CD80A478(__p, a2, **(void **)(a1 + 8));
  if (v103 >= 0) {
    long long v47 = __p;
  }
  else {
    long long v47 = (void **)__p[0];
  }
  if (v103 >= 0) {
    size_t v48 = HIBYTE(v103) & 0x7F;
  }
  else {
    size_t v48 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(v46, (const char *)v47, v48);
  if (SHIBYTE(v103) < 0)
  {
    uint64_t v45 = __p[0];
    goto LABEL_81;
  }
LABEL_82:
  char v86 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  LODWORD(__p[1]) = 0;
  char v106 = 0;
  uint64_t v107 = 0;
  uint64_t v109 = &v86;
  int v108 = 0;
  __p[0] = &unk_1F2646F30;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  llvm::write_hex((llvm::raw_ostream *)__p, a2, 3, 0, 0);
  __p[0] = &unk_1F2646B98;
  if (v108 == 1 && v103) {
    MEMORY[0x1D25D9CB0](v103, 0x1000C8077774924);
  }
  char v49 = HIBYTE(v88);
  uint64_t v50 = HIBYTE(v88) & 0x7F;
  if (v88 < 0) {
    uint64_t v50 = v87;
  }
  if (v50)
  {
    int v51 = *(llvm::raw_ostream **)a1;
    int v52 = *(unsigned char **)(*(void *)a1 + 32);
    if (*(unsigned char **)(*(void *)a1 + 24) == v52)
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "|", 1uLL);
    }
    else
    {
      *int v52 = 124;
      ++*((void *)v51 + 4);
    }
    llvm::DOT::EscapeString((char *)&v86, (uint64_t)__p);
    if (v103 >= 0) {
      uint64_t v53 = __p;
    }
    else {
      uint64_t v53 = (void **)__p[0];
    }
    if (v103 >= 0) {
      size_t v54 = HIBYTE(v103) & 0x7F;
    }
    else {
      size_t v54 = (size_t)__p[1];
    }
    llvm::raw_ostream::write(v51, (const char *)v53, v54);
    if (SHIBYTE(v103) < 0) {
      operator delete(__p[0]);
    }
    char v49 = HIBYTE(v88);
  }
  if (v49 < 0) {
    operator delete(v86);
  }
  uint64_t v55 = *(llvm::raw_ostream **)a1;
  uint64_t v56 = *(_WORD **)(*(void *)a1 + 32);
  if (*(void *)(*(void *)a1 + 24) - (void)v56 > 1uLL)
  {
    *uint64_t v56 = 31612;
    *((void *)v55 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v55, "|{", 2uLL);
  }
  int v57 = *(unsigned __int16 *)(a2 + 58);
  if (*(_WORD *)(a2 + 58))
  {
    unint64_t v58 = 0;
    int v59 = v57 - 1;
    if ((v57 - 1) >= 0x3F) {
      int v59 = 63;
    }
    uint64_t v60 = (v59 + 1);
    do
    {
      if (v58)
      {
        int v61 = *(llvm::raw_ostream **)a1;
        char v62 = *(unsigned char **)(*(void *)a1 + 32);
        if (*(unsigned char **)(*(void *)a1 + 24) == v62)
        {
          llvm::raw_ostream::write(v61, "|", 1uLL);
        }
        else
        {
          *char v62 = 124;
          ++*((void *)v61 + 4);
        }
      }
      int v63 = *(llvm::raw_ostream **)a1;
      int v64 = *(_WORD **)(*(void *)a1 + 32);
      if (*(void *)(*(void *)a1 + 24) - (void)v64 > 1uLL)
      {
        *int v64 = 25660;
        *((void *)v63 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<d", 2uLL);
      }
      sub_1CD098D14(v63, v58, 0, 0, 0);
      int v65 = (unsigned char *)*((void *)v63 + 4);
      if (*((unsigned char **)v63 + 3) == v65)
      {
        llvm::raw_ostream::write(v63, ">", 1uLL);
      }
      else
      {
        *int v65 = 62;
        ++*((void *)v63 + 4);
      }
      *(_OWORD *)__p = *(_OWORD *)(*(void *)(a2 + 40) + 16 * v58);
      llvm::EVT::getEVTString((llvm::EVT *)__p, (uint64_t)&v86);
      llvm::DOT::EscapeString((char *)&v86, (uint64_t)__p);
      if (v103 >= 0) {
        uint64_t v66 = __p;
      }
      else {
        uint64_t v66 = (void **)__p[0];
      }
      if (v103 >= 0) {
        size_t v67 = HIBYTE(v103) & 0x7F;
      }
      else {
        size_t v67 = (size_t)__p[1];
      }
      llvm::raw_ostream::write(v63, (const char *)v66, v67);
      if (SHIBYTE(v103) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v88) < 0) {
        operator delete(v86);
      }
      ++v58;
    }
    while (v60 != v58);
    if (v60 != v57)
    {
      char v68 = *(llvm::raw_ostream **)a1;
      uint64_t v69 = *(void *)(*(void *)a1 + 32);
      if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v69) > 0x11)
      {
        *(_WORD *)(v69 + 16) = 11822;
        *(_OWORD *)uint64_t v69 = *(_OWORD *)"|<d64>truncated...";
        *((void *)v68 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(v68, "|<d64>truncated...", 0x12uLL);
      }
    }
  }
  unsigned int v70 = *(llvm::raw_ostream **)a1;
  uint64_t v71 = *(unsigned char **)(*(void *)a1 + 32);
  if (*(unsigned char **)(*(void *)a1 + 24) == v71)
  {
    llvm::raw_ostream::write(v70, "}", 1uLL);
  }
  else
  {
    *uint64_t v71 = 125;
    ++*((void *)v70 + 4);
  }
  uint64_t v72 = *(llvm::raw_ostream **)a1;
  uint64_t v73 = *(_WORD **)(*(void *)a1 + 32);
  unint64_t v74 = *(void *)(*(void *)a1 + 24) - (void)v73;
  if (*(unsigned char *)(a1 + 16))
  {
    if (v74 <= 0xD)
    {
      uint64_t v75 = "</tr></table>>";
      size_t v76 = 14;
LABEL_137:
      llvm::raw_ostream::write(v72, v75, v76);
      goto LABEL_138;
    }
    qmemcpy(v73, "</tr></table>>", 14);
    uint64_t v84 = *((void *)v72 + 4) + 14;
  }
  else
  {
    if (v74 <= 1)
    {
      uint64_t v75 = "}\"";
      size_t v76 = 2;
      goto LABEL_137;
    }
    *uint64_t v73 = 8829;
    uint64_t v84 = *((void *)v72 + 4) + 2;
  }
  *((void *)v72 + 4) = v84;
LABEL_138:
  int v77 = *(llvm::raw_ostream **)a1;
  uint64_t v78 = *(void *)(*(void *)a1 + 32);
  if ((unint64_t)(*(void *)(*(void *)a1 + 24) - v78) > 2)
  {
    *(unsigned char *)(v78 + 2) = 10;
    *(_WORD *)uint64_t v78 = 15197;
    *((void *)v77 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v77, "];\n", 3uLL);
  }
  int v79 = *(unsigned __int16 *)(a2 + 56);
  if (*(_WORD *)(a2 + 56))
  {
    int v80 = 0;
    unint64_t v81 = 0;
    do
    {
      sub_1CD80B1F4((llvm::raw_ostream **)a1, a2, v80, a2, v81);
      int v82 = v81 + 1;
      unint64_t v81 = v81 & 0xFFFFFFFF00000000 | (v81 + 1);
      if (v80 == 63) {
        break;
      }
      ++v80;
    }
    while (v82 != v79);
  }
  else
  {
    unint64_t v81 = 0;
  }
  if (v81 != v79)
  {
    do
    {
      sub_1CD80B1F4((llvm::raw_ostream **)a1, a2, 64, a2, v81);
      int v83 = v81 + 1;
      unint64_t v81 = v81 & 0xFFFFFFFF00000000 | (v81 + 1);
    }
    while (v83 != v79);
  }
  unsigned int v89 = &unk_1F2646B98;
  if (v96 == 1 && v91) {
    MEMORY[0x1D25D9CB0](v91, 0x1000C8077774924);
  }
  if (SHIBYTE(v99) < 0) {
    operator delete(v98[0]);
  }
  if (v101 < 0) {
    operator delete(v100[0]);
  }
}

void *sub_1CCFF5C0C(uint64_t a1, uint64_t a2)
{
  v327[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v285 = a1 + 248;
  sub_1CD80B4E4((_DWORD *)(a1 + 248));
  *(_DWORD *)(a1 + 280) = 0;
  sub_1CD80B53C((void ***)(a1 + 272));
  sub_1CBA7B5AC((unint64_t *)(a1 + 272), *(unsigned int *)(*(void *)(a1 + 912) + 432), 0);
  int v316 = v318;
  uint64_t v317 = 0xA00000000;
  uint64_t v313 = v315;
  uint64_t v314 = 0x1000000000;
  uint64_t v310 = v312;
  uint64_t v311 = 0x1000000000;
  v286[0] = 0;
  v286[1] = 0;
  int v287 = 0;
  char v4 = *(unsigned char *)(a2 + 4352);
  int v304 = dword_1EBCFAB60;
  p_src = v325;
  uint64_t v324 = 0x800000000;
  v327[1] = 0;
  v327[0] = 0;
  uint64_t v326 = v327;
  if (!byte_1EBCFAAA0)
  {
    uint64_t v5 = *(void *)(a2 + 448);
    if (v5)
    {
      if (*(unsigned char *)(v5 + 16) == 33)
      {
        uint64_t FirstNonPHI = llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v5 - 64));
        uint64_t v7 = *(unsigned int *)(a2 + 296);
        if (v7)
        {
          uint64_t v264 = FirstNonPHI;
          unsigned int v265 = *(llvm::GCRelocateInst ***)(a2 + 288);
          uint64_t v266 = 8 * v7;
          do
          {
            uint64_t v267 = *v265;
            if (*((void *)*v265 - 4 * (*((_DWORD *)*v265 + 5) & 0x7FFFFFF)) == v264)
            {
              BasePtr = (unsigned __int8 *)llvm::GCRelocateInst::getBasePtr(*v265);
              v305[0] = sub_1CD7DE5B4(a1, BasePtr);
              v305[1] = v269;
              sub_1CD80B81C((uint64_t *)&p_src, (uint64_t *)v305);
              DerivedPtr = (unsigned __int8 *)llvm::GCRelocateInst::getDerivedPtr(v267);
              v305[0] = sub_1CD7DE5B4(a1, DerivedPtr);
              v305[1] = v271;
              sub_1CD80B81C((uint64_t *)&p_src, (uint64_t *)v305);
            }
            ++v265;
            v266 -= 8;
          }
          while (v266);
        }
      }
    }
  }
  v305[0] = (void *)1;
  for (uint64_t i = 1; i != 33; i += 4)
  {
    unint64_t v9 = &v305[i];
    *(_OWORD *)unint64_t v9 = xmmword_1CD923640;
    *((_OWORD *)v9 + 1) = xmmword_1CD923640;
  }
  uint64_t v307 = v309;
  uint64_t v308 = 0x1000000000;
  unint64_t v301 = 0;
  uint64_t v302 = 0;
  int v303 = 0;
  int v300 = 0;
  uint64_t v299 = &p_src;
  unsigned int v292 = (void **)a1;
  uint64_t v293 = v305;
  uint64_t v294 = &v301;
  int v295 = v286;
  int v296 = &v304;
  uint64_t v297 = &v299;
  uint64_t v298 = &v300;
  uint64_t v10 = *(unsigned int *)(a2 + 152);
  if (v10)
  {
    size_t v11 = *(unsigned __int8 ***)(a2 + 144);
    uint64_t v12 = 8 * v10;
    do
    {
      unsigned int v13 = *v11++;
      sub_1CCFF83B8((uint64_t)&v292, v13);
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v14 = *(unsigned int *)(a2 + 8);
  if (v14)
  {
    int v15 = *(unsigned __int8 ***)a2;
    uint64_t v16 = 8 * v14;
    do
    {
      uint64_t v17 = *v15++;
      sub_1CCFF83B8((uint64_t)&v292, v17);
      v16 -= 8;
    }
    while (v16);
  }
  uint64_t v18 = *(void *)(a2 + 4344);
  if (v18)
  {
    BOOL v19 = *(unsigned __int8 ***)(a2 + 4336);
    for (uint64_t j = 32 * v18; j; j -= 32)
    {
      int v21 = *v19;
      uint64_t v22 = *(void *)(*(void *)(a1 + 832) + 24);
      BOOL v23 = sub_1CD7DE5B4(a1, *v19);
      if (*(unsigned char *)(v23[5] + 16 * v24) && *(void *)(v22 + 8 * *(unsigned __int8 *)(v23[5] + 16 * v24) + 96))
      {
        if (sub_1CCFF8314(*(void *)v21, *(void *)(a1 + 928)))
        {
          int v25 = sub_1CD7DE5B4(a1, v21);
          if (sub_1CD80CC60(v286[0], v287, (unint64_t)v25, v26, &__src)) {
            goto LABEL_23;
          }
        }
        else if ((v4 & 2) != 0 || byte_1EBCFA9E0)
        {
          goto LABEL_23;
        }
      }
      sub_1CCFF84B8(v21, (void *)a1);
LABEL_23:
      v19 += 4;
    }
  }
  uint64_t v27 = *(unsigned int *)(a2 + 152);
  if (v27)
  {
    size_t v28 = *(unsigned __int8 ***)(a2 + 144);
    uint64_t v29 = 8 * v27;
    do
    {
      int v30 = *v28;
      uint64_t v31 = sub_1CD7DE5B4(a1, *v28);
      if ((sub_1CD80CC60(v286[0], v287, (unint64_t)v31, v32, &__src) & 1) == 0) {
        sub_1CCFF84B8(v30, (void *)a1);
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  uint64_t v33 = *(unsigned int *)(a2 + 8);
  if (v33)
  {
    uint64_t v34 = *(unsigned __int8 ***)a2;
    uint64_t v35 = 8 * v33;
    do
    {
      size_t v36 = *v34;
      uint64_t v37 = sub_1CD7DE5B4(a1, *v34);
      if ((sub_1CD80CC60(v286[0], v287, (unint64_t)v37, v38, &__src) & 1) == 0) {
        sub_1CCFF84B8(v36, (void *)a1);
      }
      ++v34;
      v35 -= 8;
    }
    while (v35);
  }
  sub_1CCFF782C((uint64_t)&v316, (uint64_t *)a1, *(int *)(a2 + 4344));
  uint64_t v39 = *(void *)(a2 + 4344);
  if (v39)
  {
    uint64_t v60 = *(uint64_t **)(a2 + 4336);
    uint64_t v61 = 32 * v39;
    do
    {
      char v62 = (unsigned __int8 *)*v60;
      if (*v60) {
        BOOL v63 = *(unsigned char *)(*v60 + 16) == 21;
      }
      else {
        BOOL v63 = 0;
      }
      if (!v63
        || (int v64 = sub_1CD78C488(*(void *)(a1 + 912), *v60), v64 == 0x7FFFFFFF)
        || (int v65 = v64,
            uint64_t v66 = *(void *)(a1 + 832),
            uint64_t v67 = *(void *)(**(void **)(v66 + 40) + 40),
            unsigned __int8 v68 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v66 + 24) + 32))(*(void *)(v66 + 24), v67 + 272, *(unsigned int *)(v67 + 276)), (v69 = sub_1CD7ED208(v66, v65, (llvm *)v68, 0, 0)) == 0))
      {
        uint64_t v69 = sub_1CD7DE5B4(a1, v62);
      }
      unint64_t v71 = (unint64_t)v69;
      unsigned int v72 = v70;
      uint64_t v73 = *(void *)(*(void *)(a1 + 832) + 24);
      unint64_t v74 = sub_1CD7DE5B4(a1, v62);
      if (*(unsigned char *)(v74[5] + 16 * v75) && *(void *)(v73 + 8 * *(unsigned __int8 *)(v74[5] + 16 * v75) + 96))
      {
        if (sub_1CCFF8314(*(void *)v62, *(void *)(a1 + 928)))
        {
          int v77 = sub_1CD7DE5B4(a1, v62);
          char v76 = sub_1CD80CC60(v286[0], v287, (unint64_t)v77, v78, &__src) ^ 1;
        }
        else
        {
          char v76 = (v4 & 2) == 0 && byte_1EBCFA9E0 == 0;
        }
      }
      else
      {
        char v76 = 1;
      }
      sub_1CCFF867C(v71, v72, v76, (uint64_t)&v316, (uint64_t)&v310, a1);
      v60 += 4;
      v61 -= 32;
    }
    while (v61);
  }
  sub_1CCFF782C((uint64_t)&v316, (uint64_t *)a1, v308);
  if (v308)
  {
    uint64_t v40 = (unint64_t *)v307;
    unint64_t v41 = (unint64_t *)((char *)v307 + 16 * v308);
    do
    {
      unint64_t v42 = *v40;
      unint64_t v43 = v40[1];
      v40 += 2;
      char v44 = sub_1CD80CC60(v286[0], v287, v42, v43, &__src);
      sub_1CCFF867C(v42, v43, v44 ^ 1, (uint64_t)&v316, (uint64_t)&v310, a1);
    }
    while (v40 != v41);
  }
  sub_1CD80CA8C(v305);
  unint64_t __src = &v321;
  uint64_t v320 = 0x1000000000;
  if (v308) {
    sub_1CD727100((uint64_t)&__src, (uint64_t)&v307);
  }
  sub_1CD727100((uint64_t)&v313, (uint64_t)&__src);
  if (__src != &v321) {
    free(__src);
  }
  unint64_t __src = &v321;
  uint64_t v320 = 0x400000000;
  uint64_t v45 = *(void *)(a2 + 440);
  if (v45)
  {
    char v46 = *(unsigned __int8 ***)(a2 + 432);
    uint64_t v47 = 32 * v45;
    do
    {
      size_t v48 = sub_1CD7DE5B4(a1, *v46);
      int v49 = *((unsigned __int16 *)v48 + 12);
      if (v49 == 39 || v49 == 15)
      {
        uint64_t v51 = (uint64_t)v48;
        uint64_t v52 = *(void *)(a1 + 832);
        int v53 = *((_DWORD *)v48 + 19);
        uint64_t v54 = *(void *)(**(void **)(v52 + 40) + 40);
        unsigned __int8 v55 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v52 + 24) + 32))(*(void *)(v52 + 24), v54 + 272, *(unsigned int *)(v54 + 276));
        int v57 = sub_1CD7ED208(v52, v53, (llvm *)v55, 0, 1);
        if (v320 >= (unint64_t)HIDWORD(v320)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v58 = (uint64_t **)((char *)__src + 16 * v320);
        *unint64_t v58 = v57;
        v58[1] = v56;
        LODWORD(v320) = v320 + 1;
        unint64_t v59 = sub_1CCFF8C60(*(void *)(*(void *)(a1 + 832) + 40), v51);
        if (v311 >= (unint64_t)HIDWORD(v311)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v310 + v311) = v59;
        LODWORD(v311) = v311 + 1;
      }
      v46 += 4;
      v47 -= 32;
    }
    while (v47);
    LODWORD(v45) = v320;
  }
  sub_1CCFF782C((uint64_t)&v316, (uint64_t *)a1, v45);
  sub_1CD3D61B4((unsigned int *)&v316, __src, (unsigned char *)__src + 16 * v320);
  sub_1CCFF782C((uint64_t)&v316, (uint64_t *)a1, *(unsigned int *)(a2 + 152));
  uint64_t v79 = *(void *)a1;
  int v80 = *(_DWORD *)(a1 + 816);
  *(void *)&long long v291 = 0;
  DWORD2(v291) = v80;
  if (v79)
  {
    unint64_t v81 = (long long *)(v79 + 48);
    if (v81 != &v291)
    {
      int v82 = *(unsigned __int8 **)v81;
      *(void *)&long long v291 = v82;
      if (v82) {
        llvm::MetadataTracking::track((uint64_t)&v291, v82, 2);
      }
    }
  }
  if (*(_DWORD *)(a2 + 152))
  {
    unint64_t v87 = 0;
    do
    {
      unsigned int v289 = sub_1CD7DE5B4(a1, *(unsigned __int8 **)(*(void *)a2 + 8 * v87));
      uint64_t v290 = v88;
      uint64_t v89 = *(void *)(a1 + 832);
      uint64_t v90 = sub_1CD80CBE4((uint64_t)&v301, (uint64_t)&v289);
      uint64_t v92 = sub_1CD7EBF14(v89, *(unsigned int *)(v90 + 16), (const llvm::APInt *)&v291, (llvm *)6, 0, 1, 0);
      if (v317 >= (unint64_t)HIDWORD(v317)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v93 = (uint64_t **)((char *)v316 + 16 * v317);
      *uint64_t v93 = v92;
      v93[1] = v91;
      LODWORD(v317) = v317 + 1;
      v288[0] = sub_1CD7DE5B4(a1, *(unsigned __int8 **)(*(void *)(a2 + 144) + 8 * v87));
      v288[1] = v94;
      uint64_t v95 = *(void *)(a1 + 832);
      uint64_t v96 = sub_1CD80CBE4((uint64_t)&v301, (uint64_t)v288);
      int v98 = sub_1CD7EBF14(v95, *(unsigned int *)(v96 + 16), (const llvm::APInt *)&v291, (llvm *)6, 0, 1, 0);
      if (v317 >= (unint64_t)HIDWORD(v317)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v99 = (uint64_t **)((char *)v316 + 16 * v317);
      llvm::raw_ostream *v99 = v98;
      v99[1] = v97;
      LODWORD(v317) = v317 + 1;
      ++v87;
    }
    while (v87 < *(unsigned int *)(a2 + 152));
  }
  if ((void)v291)
  {
    int v83 = *(unsigned __int8 *)v291;
    if ((v83 - 4) > 0x1E)
    {
      if ((v83 - 3) >= 0xFFFFFFFE) {
        uint64_t v250 = v291;
      }
      else {
        uint64_t v250 = 0;
      }
      if ((v83 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v251 = v250 + 8;
LABEL_275:
        unsigned int v289 = (uint64_t *)&v291;
        sub_1CC5FA668(v251 + 16, &v289);
        goto LABEL_84;
      }
      if (v83 == 3) {
        *(void *)(v291 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v291 + 1) & 0x7F) == 2 || *(_DWORD *)(v291 + 12))
    {
      uint64_t v272 = *(void *)(v291 + 16);
      if ((v272 & 4) != 0)
      {
        unint64_t v251 = v272 & 0xFFFFFFFFFFFFFFF8;
        if (v251) {
          goto LABEL_275;
        }
      }
    }
  }
LABEL_84:
  if (__src != &v321) {
    free(__src);
  }
  MEMORY[0x1D25D9CD0](v301, 8);
  if (v307 != v309) {
    free(v307);
  }
  if (((uint64_t)v305[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v305[1], 8);
  }
  sub_1CB833A08((uint64_t)&v326, v327[0]);
  if (p_src != v325) {
    free(p_src);
  }
  *(void *)(a2 + 480) = sub_1CD7D7360(a1);
  *(_DWORD *)(a2 + 488) = v84;
  sub_1CD7E6E10(a1, a2 + 480, *(void *)(a2 + 4368), (uint64_t)v305);
  uint64_t v280 = v305[0];
  uint64_t v85 = v306[0];
  if (*(unsigned char *)(*(void *)(a2 + 496) + 8) != 7)
  {
    int v86 = *(unsigned __int16 *)(v306[0] + 24);
    if (v86 == 253)
    {
      uint64_t v85 = **(void **)(v306[0] + 32);
    }
    else
    {
      while (v86 == 50)
      {
        uint64_t v85 = **(void **)(v85 + 32);
        int v86 = *(unsigned __int16 *)(v85 + 24);
      }
    }
  }
  uint64_t v100 = **(void **)(v85 + 32);
  char v101 = *(uint64_t ***)(v100 + 32);
  int v102 = v101[1];
  if (*(_WORD *)(v100 + 56)
    && (uint64_t v103 = (unsigned int *)&v101[5 * *(unsigned __int16 *)(v100 + 56) - 5],
        uint64_t v104 = *(uint64_t **)v103,
        *(unsigned __int8 *)(*(void *)(*(void *)v103 + 40) + 16 * v103[2]) == 172))
  {
    uint64_t v283 = v103[2];
    int v105 = 0;
  }
  else
  {
    uint64_t v104 = 0;
    uint64_t v283 = 0;
    int v105 = 1;
  }
  char v106 = *v101;
  uint64_t v284 = v100;
  uint64_t v281 = *(void *)(a2 + 4352);
  if ((v281 & 1) == 0)
  {
    unint64_t v107 = (unint64_t)v101[1];
    goto LABEL_138;
  }
  v305[0] = v306;
  v306[0] = v106;
  v306[1] = v102;
  unsigned int v282 = v102;
  v305[1] = (void *)0x800000001;
  uint64_t v108 = *(void *)(a2 + 464);
  if (v108)
  {
    int v121 = *(unsigned __int8 ***)(a2 + 456);
    uint64_t v122 = 32 * v108;
    do
    {
      BOOL v123 = *v121;
      int v125 = sub_1CD7DE5B4(a1, *v121);
      if (LODWORD(v305[1]) >= (unint64_t)HIDWORD(v305[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v126 = (uint64_t **)((char *)v305[0] + 16 * LODWORD(v305[1]));
      *uint64_t v126 = v125;
      v126[1] = v124;
      unsigned int v109 = ++LODWORD(v305[1]);
      if (*(unsigned char *)(*(void *)v123 + 8) == 15)
      {
        char v128 = sub_1CD7EF3FC(*(void **)(a1 + 832), (uint64_t)v123);
        if (LODWORD(v305[1]) >= (unint64_t)HIDWORD(v305[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v129 = (uint64_t **)((char *)v305[0] + 16 * LODWORD(v305[1]));
        *uint64_t v129 = v128;
        v129[1] = v127;
        unsigned int v109 = ++LODWORD(v305[1]);
      }
      v121 += 4;
      v122 -= 32;
    }
    while (v122);
  }
  else
  {
    unsigned int v109 = 1;
  }
  uint64_t v100 = v284;
  if ((v105 & 1) == 0)
  {
    if (v109 >= HIDWORD(v305[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v110 = (uint64_t **)((char *)v305[0] + 16 * v109);
    *int v110 = v104;
    v110[1] = (uint64_t *)v283;
    ++LODWORD(v305[1]);
  }
  uint64_t v111 = sub_1CD7F95FC(*(void *)(a1 + 832), 1, 0, 172, 0);
  uint64_t v113 = v112;
  uint64_t v114 = *(void **)(a1 + 832);
  uint64_t v115 = *(void *)a1;
  int v116 = *(_DWORD *)(a1 + 816);
  unint64_t __src = 0;
  LODWORD(v320) = v116;
  if (v115)
  {
    unsigned int v117 = (void **)(v115 + 48);
    if (v117 != &__src)
    {
      uint64_t v118 = *v117;
      unint64_t __src = v118;
      if (v118) {
        llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v118, 2);
      }
    }
  }
  uint64_t v119 = v114[104];
  if (v119) {
    __int16 v120 = *(_WORD *)(v119 + 8);
  }
  else {
    __int16 v120 = 0;
  }
  char v106 = sub_1CD7FF854(v114, (const char *)0x13A, (const llvm::APInt *)&__src, v111, v113, (uint64_t *)v305[0], LODWORD(v305[1]), v120);
  if (__src)
  {
    int v130 = *(unsigned __int8 *)__src;
    if ((v130 - 4) > 0x1E)
    {
      if ((v130 - 3) >= 0xFFFFFFFE) {
        int v260 = __src;
      }
      else {
        int v260 = 0;
      }
      if ((v130 - 3) < 0xFFFFFFFE)
      {
        if (v130 == 3) {
          *((void *)__src + 1) = 0;
        }
        goto LABEL_135;
      }
      unint64_t v261 = (unint64_t)v260 + 8;
    }
    else
    {
      if ((*((unsigned char *)__src + 1) & 0x7F) != 2 && !*((_DWORD *)__src + 3)) {
        goto LABEL_135;
      }
      uint64_t v277 = *((void *)__src + 2);
      if ((v277 & 4) == 0) {
        goto LABEL_135;
      }
      unint64_t v261 = v277 & 0xFFFFFFFFFFFFFFF8;
      if (!v261) {
        goto LABEL_135;
      }
    }
    p_src = &__src;
    sub_1CC5FA668(v261 + 16, &p_src);
  }
LABEL_135:
  if (v305[0] != v306) {
    free(v305[0]);
  }
  unint64_t v107 = (unint64_t)v282 & 0xFFFFFFFF00000000;
  uint64_t v283 = 1;
  uint64_t v104 = v106;
LABEL_138:
  v305[0] = v306;
  v305[1] = (void *)0x2800000000;
  uint64_t v131 = *(void *)(a1 + 832);
  uint64_t v132 = *(unsigned int *)(a2 + 472);
  uint64_t v133 = *(void *)a1;
  int v134 = *(_DWORD *)(a1 + 816);
  unint64_t __src = 0;
  LODWORD(v320) = v134;
  if (v133)
  {
    uint64_t v135 = (void **)(v133 + 48);
    if (v135 != &__src)
    {
      uint64_t v136 = *v135;
      unint64_t __src = v136;
      if (v136) {
        llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v136, 2);
      }
    }
  }
  char v138 = sub_1CD7EBF14(v131, v132, (const llvm::APInt *)&__src, (llvm *)6, 0, 1, 0);
  if (LODWORD(v305[1]) >= HIDWORD(v305[1])) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v139 = (uint64_t **)((char *)v305[0] + 16 * LODWORD(v305[1]));
  *unint64_t v139 = v138;
  v139[1] = v137;
  ++LODWORD(v305[1]);
  if (__src)
  {
    int v140 = *(unsigned __int8 *)__src;
    if ((v140 - 4) > 0x1E)
    {
      if ((v140 - 3) >= 0xFFFFFFFE) {
        int v252 = __src;
      }
      else {
        int v252 = 0;
      }
      if ((v140 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v253 = (unint64_t)v252 + 8;
LABEL_281:
        p_src = &__src;
        sub_1CC5FA668(v253 + 16, &p_src);
        goto LABEL_147;
      }
      if (v140 == 3) {
        *((void *)__src + 1) = 0;
      }
    }
    else if ((*((unsigned char *)__src + 1) & 0x7F) == 2 || *((_DWORD *)__src + 3))
    {
      uint64_t v273 = *((void *)__src + 2);
      if ((v273 & 4) != 0)
      {
        unint64_t v253 = v273 & 0xFFFFFFFFFFFFFFF8;
        if (v253) {
          goto LABEL_281;
        }
      }
    }
  }
LABEL_147:
  uint64_t v141 = *(void *)(a1 + 832);
  uint64_t v142 = *(unsigned int *)(a2 + 4360);
  uint64_t v143 = *(void *)a1;
  int v144 = *(_DWORD *)(a1 + 816);
  unint64_t __src = 0;
  LODWORD(v320) = v144;
  if (v143)
  {
    char v145 = (void **)(v143 + 48);
    if (v145 != &__src)
    {
      unsigned int v146 = *v145;
      unint64_t __src = v146;
      if (v146) {
        llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v146, 2);
      }
    }
  }
  int v148 = sub_1CD7EBF14(v141, v142, (const llvm::APInt *)&__src, (llvm *)5, 0, 1, 0);
  if (LODWORD(v305[1]) >= HIDWORD(v305[1])) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  BOOL v149 = (uint64_t **)((char *)v305[0] + 16 * LODWORD(v305[1]));
  *BOOL v149 = v148;
  v149[1] = v147;
  ++LODWORD(v305[1]);
  if (__src)
  {
    int v150 = *(unsigned __int8 *)__src;
    if ((v150 - 4) > 0x1E)
    {
      if ((v150 - 3) >= 0xFFFFFFFE) {
        unint64_t v254 = __src;
      }
      else {
        unint64_t v254 = 0;
      }
      if ((v150 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v255 = (unint64_t)v254 + 8;
LABEL_287:
        p_src = &__src;
        sub_1CC5FA668(v255 + 16, &p_src);
        goto LABEL_156;
      }
      if (v150 == 3) {
        *((void *)__src + 1) = 0;
      }
    }
    else if ((*((unsigned char *)__src + 1) & 0x7F) == 2 || *((_DWORD *)__src + 3))
    {
      uint64_t v274 = *((void *)__src + 2);
      if ((v274 & 4) != 0)
      {
        unint64_t v255 = v274 & 0xFFFFFFFFFFFFFFF8;
        if (v255) {
          goto LABEL_287;
        }
      }
    }
  }
LABEL_156:
  if (v105) {
    int v151 = -3;
  }
  else {
    int v151 = -4;
  }
  uint64_t v152 = v151 + *(unsigned __int16 *)(v100 + 56);
  uint64_t v153 = *(void *)(a1 + 832);
  uint64_t v154 = *(void *)a1;
  int v155 = *(_DWORD *)(a1 + 816);
  unint64_t __src = 0;
  LODWORD(v320) = v155;
  if (v154)
  {
    int v156 = (void **)(v154 + 48);
    if (v156 != &__src)
    {
      uint64_t v157 = *v156;
      unint64_t __src = v157;
      if (v157) {
        llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v157, 2);
      }
    }
  }
  int v159 = sub_1CD7EBF14(v153, v152, (const llvm::APInt *)&__src, (llvm *)5, 0, 1, 0);
  if (LODWORD(v305[1]) >= HIDWORD(v305[1])) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v160 = (uint64_t **)((char *)v305[0] + 16 * LODWORD(v305[1]));
  *unsigned int v160 = v159;
  v160[1] = v158;
  unsigned int v161 = ++LODWORD(v305[1]);
  if (__src)
  {
    int v162 = *(unsigned __int8 *)__src;
    if ((v162 - 4) > 0x1E)
    {
      if ((v162 - 3) >= 0xFFFFFFFE) {
        uint64_t v256 = __src;
      }
      else {
        uint64_t v256 = 0;
      }
      if ((v162 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v257 = (unint64_t)v256 + 8;
        goto LABEL_293;
      }
      if (v162 == 3) {
        *((void *)__src + 1) = 0;
      }
    }
    else if ((*((unsigned char *)__src + 1) & 0x7F) == 2 || *((_DWORD *)__src + 3))
    {
      uint64_t v275 = *((void *)__src + 2);
      if ((v275 & 4) == 0)
      {
        uint64_t v100 = v284;
        goto LABEL_168;
      }
      unint64_t v257 = v275 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v100 = v284;
      if (v257)
      {
LABEL_293:
        p_src = &__src;
        sub_1CC5FA668(v257 + 16, &p_src);
        unsigned int v161 = v305[1];
      }
    }
  }
LABEL_168:
  if (v161 >= HIDWORD(v305[1])) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v163 = (char *)v305[0] + 16 * v161;
  *int v163 = *(void *)(*(void *)(v100 + 32) + 40);
  v163[1] = 0;
  unsigned int v164 = ++LODWORD(v305[1]);
  uint64_t v165 = *(void *)(v100 + 32);
  uint64_t v166 = -80;
  if (v105) {
    uint64_t v166 = -40;
  }
  unsigned int v167 = (char *)(v165 + 40 * *(unsigned __int16 *)(v100 + 56) + v166);
  sub_1CD3DF8C4((uint64_t)v305, (uint64_t)v305[0] + 16 * v164, (char *)(v165 + 80), v167);
  sub_1CCFF782C((uint64_t)v305, (uint64_t *)a1, *(unsigned int *)(a2 + 512));
  sub_1CCFF782C((uint64_t)v305, (uint64_t *)a1, *(void *)(a2 + 4352));
  sub_1CD805660((unsigned int *)v305, (uint64_t)v305[0] + 16 * LODWORD(v305[1]), v316, (unsigned char *)v316 + 16 * v317);
  if (LODWORD(v305[1]) >= HIDWORD(v305[1])) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_OWORD *)v305[0] + LODWORD(v305[1])) = *(_OWORD *)v167;
  unsigned int v168 = LODWORD(v305[1]) + 1;
  LODWORD(v305[1]) = v168;
  if (v168 >= HIDWORD(v305[1])) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v169 = (uint64_t **)((char *)v305[0] + 16 * v168);
  *unsigned int v169 = v106;
  v169[1] = (uint64_t *)v107;
  unsigned int v170 = ++LODWORD(v305[1]);
  if (v104)
  {
    if (v170 >= HIDWORD(v305[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v171 = (uint64_t **)((char *)v305[0] + 16 * v170);
    const llvm::Value *v171 = v104;
    v171[1] = (uint64_t *)v283;
    ++LODWORD(v305[1]);
  }
  unint64_t v172 = (unint64_t)v325;
  p_src = v325;
  uint64_t v324 = 0x800000000;
  unsigned int v173 = v314;
  if (v314)
  {
    unint64_t v174 = (char *)v313;
    int v175 = (char *)v313 + 16 * v314;
    do
    {
      unint64_t v176 = *(void *)v174;
      uint64_t v177 = *((unsigned int *)v174 + 2);
      if (sub_1CD80CC60(v286[0], v287, *(void *)v174, *((_DWORD *)v174 + 2), &__src))
      {
        if (v324 >= (unint64_t)HIDWORD(v324)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)p_src + v324) = *(_OWORD *)(*(void *)(v176 + 40) + 16 * v177);
        LODWORD(v324) = v324 + 1;
      }
      v174 += 16;
    }
    while (v174 != v175);
    unsigned int v173 = v324;
    if (v324 >= HIDWORD(v324)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  *((_OWORD *)p_src + v173) = xmmword_1CD91D2E0;
  unsigned int v178 = v324 + 1;
  LODWORD(v324) = v178;
  if (v178 >= HIDWORD(v324)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_OWORD *)p_src + v178) = xmmword_1CFB2D760;
  unint64_t v179 = (unsigned __int16 *)v324;
  unsigned int v180 = v324 + 1;
  LODWORD(v324) = v324 + 1;
  uint64_t v181 = *(void *)(a1 + 832);
  uint64_t v182 = *(void *)a1;
  int v183 = *(_DWORD *)(a1 + 816);
  unint64_t __src = 0;
  LODWORD(v320) = v183;
  if (v182)
  {
    char v184 = (void **)(v182 + 48);
    if (v184 != &__src)
    {
      uint64_t v185 = *v184;
      unint64_t __src = v185;
      if (v185)
      {
        llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v185, 2);
        unsigned int v180 = v324;
      }
    }
  }
  unint64_t v186 = (uint64_t *)v305[0];
  uint64_t v187 = LODWORD(v305[1]);
  uint64_t v188 = sub_1CD7F9A18(v181, (uint64_t *)p_src, v180);
  uint64_t v190 = (unsigned __int16 *)sub_1CD801044(v181, 31, (uint64_t)&__src, v188, v189, v186, v187);
  if (__src)
  {
    int v191 = *(unsigned __int8 *)__src;
    if ((v191 - 4) > 0x1E)
    {
      if ((v191 - 3) >= 0xFFFFFFFE) {
        uint64_t v258 = __src;
      }
      else {
        uint64_t v258 = 0;
      }
      if ((v191 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v259 = (unint64_t)v258 + 8;
LABEL_299:
        unsigned int v292 = &__src;
        sub_1CC5FA668(v259 + 16, &v292);
        goto LABEL_194;
      }
      if (v191 == 3) {
        *((void *)__src + 1) = 0;
      }
    }
    else if ((*((unsigned char *)__src + 1) & 0x7F) == 2 || *((_DWORD *)__src + 3))
    {
      uint64_t v276 = *((void *)__src + 2);
      if ((v276 & 4) != 0)
      {
        unint64_t v259 = v276 & 0xFFFFFFFFFFFFFFF8;
        if (v259) {
          goto LABEL_299;
        }
      }
    }
  }
LABEL_194:
  uint64_t v279 = v179;
  sub_1CD8005B8(*(uint64_t **)(a1 + 832), (uint64_t)v190, v310, v311);
  unsigned int v292 = 0;
  uint64_t v293 = 0;
  LODWORD(v294) = 0;
  uint64_t v192 = *(unsigned int *)(a2 + 296);
  if (v192)
  {
    int v206 = *(llvm::GCRelocateInst ***)(a2 + 288);
    uint64_t v207 = 8 * v192;
    while (1)
    {
      int v208 = (llvm::LLVMContext ***)*v206;
      char v209 = (unsigned __int8 *)llvm::GCRelocateInst::getDerivedPtr(*v206);
      unint64_t v301 = sub_1CD7DE5B4(a1, v209);
      uint64_t v302 = v210;
      if (sub_1CD80CC60(v286[0], v287, (unint64_t)v301, v210, &__src))
      {
        unint64_t __src = 0;
        if ((sub_1CD78E72C((uint64_t *)&v292, (uint64_t)&v301, (uint64_t *)&__src) & 1) == 0) {
          break;
        }
      }
LABEL_220:
      ++v206;
      v207 -= 8;
      if (!v207) {
        goto LABEL_195;
      }
    }
    uint64_t v211 = *(unsigned int *)(sub_1CD80CBE4((uint64_t)v286, (uint64_t)&v301) + 16);
    uint64_t v212 = *v208;
    int v213 = sub_1CD78C110(*(void *)(a1 + 912), *v208);
    sub_1CD7D6730((uint64_t)&__src, *(llvm::LLVMContext **)(*(void *)(a1 + 832) + 56), *(void *)(*(void *)(a1 + 832) + 24), (llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(a1 + 832) + 40) + 40) + 272), v213, (uint64_t)v212, 0);
    uint64_t v214 = *(void *)(a1 + 832);
    long long v291 = *(_OWORD *)(v214 + 192);
    uint64_t v215 = *(void *)a1;
    int v216 = *(_DWORD *)(a1 + 816);
    unsigned int v289 = 0;
    LODWORD(v290) = v216;
    if (v215)
    {
      uint64_t v217 = (uint64_t *)(v215 + 48);
      if (v217 != (uint64_t *)&v289)
      {
        uint64_t v218 = (unsigned __int8 *)*v217;
        unsigned int v289 = (uint64_t *)v218;
        if (v218) {
          llvm::MetadataTracking::track((uint64_t)&v289, v218, 2);
        }
      }
    }
    unint64_t v172 = v172 & 0xFFFFFFFF00000000 | v211;
    sub_1CD7D6A08((uint64_t)&__src, (uint64_t)v190, v172, (void *)v214, (const llvm::APInt *)&v289, (uint64_t *)&v291, 0, 0, 0xC8u);
    if (v289)
    {
      int v219 = *(unsigned __int8 *)v289;
      if ((v219 - 4) > 0x1E)
      {
        if ((v219 - 3) >= 0xFFFFFFFE) {
          uint64_t v221 = (uint64_t)v289;
        }
        else {
          uint64_t v221 = 0;
        }
        if ((v219 - 3) < 0xFFFFFFFE)
        {
          if (v219 == 3) {
            v289[1] = 0;
          }
          goto LABEL_218;
        }
        unint64_t v222 = v221 + 8;
      }
      else
      {
        if ((*((unsigned char *)v289 + 1) & 0x7F) != 2 && !*((_DWORD *)v289 + 3)) {
          goto LABEL_218;
        }
        uint64_t v223 = v289[2];
        if ((v223 & 4) == 0) {
          goto LABEL_218;
        }
        unint64_t v222 = v223 & 0xFFFFFFFFFFFFFFF8;
        if (!v222) {
          goto LABEL_218;
        }
      }
      v288[0] = &v289;
      sub_1CC5FA668(v222 + 16, v288);
    }
LABEL_218:
    unint64_t v220 = *(unsigned int *)(a1 + 392);
    if (v220 >= *(unsigned int *)(a1 + 396)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_OWORD *)(*(void *)(a1 + 384) + 16 * v220) = v291;
    ++*(_DWORD *)(a1 + 392);
    *(_DWORD *)(sub_1CD80CFD0((uint64_t *)&v292, (uint64_t)&v301) + 16) = v213;
    sub_1CD7E86AC((uint64_t)&__src);
    goto LABEL_220;
  }
LABEL_195:
  uint64_t v193 = *(void *)(a2 + 448);
  unsigned int v289 = (uint64_t *)v193;
  int v194 = sub_1CD748FA4(*(void *)(a1 + 912) + 152, (uint64_t *)&v289);
  uint64_t v195 = *(unsigned int *)(a2 + 296);
  if (v195)
  {
    uint64_t v196 = (uint64_t)(v194 + 1);
    int v197 = *(llvm::GCRelocateInst ***)(a2 + 288);
    uint64_t v198 = 8 * v195;
    do
    {
      int v199 = *v197;
      int v200 = (unsigned __int8 *)llvm::GCRelocateInst::getDerivedPtr(*v197);
      *(void *)&long long v291 = v200;
      unint64_t __src = sub_1CD7DE5B4(a1, v200);
      uint64_t v320 = v201;
      uint64_t v202 = sub_1CD80B7AC(v285, (unint64_t)__src, v201);
      if (sub_1CD80CC60(v286[0], v287, (unint64_t)__src, v320, &v301))
      {
        uint64_t v203 = *(unsigned int *)(sub_1CD80CFD0((uint64_t *)&v292, (uint64_t)&__src) + 16);
        uint64_t v204 = 2;
      }
      else if (v202)
      {
        uint64_t v203 = *(unsigned int *)(v202 + 76);
        uint64_t v204 = 1;
      }
      else
      {
        if (*((void *)v199 + 5) != *(void *)(v193 + 40)) {
          sub_1CD7DE9A0(a1, v200);
        }
        uint64_t v204 = 0;
        uint64_t v203 = 0xFFFFFFFFLL;
      }
      sub_1CD80D040(v196, (uint64_t *)&v291)[1] = v204 | (v203 << 32);
      ++v197;
      v198 -= 8;
    }
    while (v198);
  }
  if ((v281 & 1) == 0)
  {
    uint64_t v205 = v284;
    goto LABEL_259;
  }
  unint64_t __src = &v321;
  char v321 = v190;
  uint64_t v322 = (v279 - 1);
  uint64_t v320 = 0x800000001;
  uint64_t v224 = *(void *)(a2 + 464);
  if (v224)
  {
    uint64_t v226 = *(unsigned __int8 ***)(a2 + 456);
    uint64_t v227 = 32 * v224;
    do
    {
      long long v228 = *v226;
      uint64_t v230 = sub_1CD7DE5B4(a1, *v226);
      if (v320 >= (unint64_t)HIDWORD(v320)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v231 = (uint64_t **)((char *)__src + 16 * v320);
      *uint64_t v231 = v230;
      v231[1] = v229;
      unsigned int v225 = v320 + 1;
      LODWORD(v320) = v320 + 1;
      if (*(unsigned char *)(*(void *)v228 + 8) == 15)
      {
        unsigned int v233 = sub_1CD7EF3FC(*(void **)(a1 + 832), (uint64_t)v228);
        if (v320 >= (unint64_t)HIDWORD(v320)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unsigned int v234 = (uint64_t **)((char *)__src + 16 * v320);
        *unsigned int v234 = v233;
        v234[1] = v232;
        unsigned int v225 = v320 + 1;
        LODWORD(v320) = v320 + 1;
      }
      v226 += 4;
      v227 -= 32;
    }
    while (v227);
    if (v225 >= HIDWORD(v320)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  else
  {
    unsigned int v225 = 1;
  }
  uint64_t v205 = v284;
  uint64_t v235 = (unsigned __int16 **)((char *)__src + 16 * v225);
  *uint64_t v235 = v190;
  v235[1] = v279;
  LODWORD(v320) = v320 + 1;
  uint64_t v236 = sub_1CD7F95FC(*(void *)(a1 + 832), 1, 0, 172, 0);
  uint64_t v238 = v237;
  BOOL v239 = *(void **)(a1 + 832);
  uint64_t v240 = *(void *)a1;
  int v241 = *(_DWORD *)(a1 + 816);
  unint64_t v301 = 0;
  LODWORD(v302) = v241;
  if (v240)
  {
    uint64_t v242 = (unint64_t *)(v240 + 48);
    if (v242 != (unint64_t *)&v301)
    {
      int v243 = (unsigned __int8 *)*v242;
      unint64_t v301 = (uint64_t *)v243;
      if (v243) {
        llvm::MetadataTracking::track((uint64_t)&v301, v243, 2);
      }
    }
  }
  uint64_t v244 = v239[104];
  if (v244) {
    __int16 v245 = *(_WORD *)(v244 + 8);
  }
  else {
    __int16 v245 = 0;
  }
  uint64_t v190 = (unsigned __int16 *)sub_1CD7FF854(v239, (const char *)0x13B, (const llvm::APInt *)&v301, v236, v238, (uint64_t *)__src, v320, v245);
  if (v301)
  {
    int v246 = *(unsigned __int8 *)v301;
    if ((v246 - 4) > 0x1E)
    {
      if ((v246 - 3) >= 0xFFFFFFFE) {
        uint64_t v262 = v301;
      }
      else {
        uint64_t v262 = 0;
      }
      if ((v246 - 3) < 0xFFFFFFFE)
      {
        if (v246 == 3) {
          v301[1] = 0;
        }
        goto LABEL_257;
      }
      unint64_t v263 = (unint64_t)(v262 + 1);
      goto LABEL_311;
    }
    if ((*((unsigned char *)v301 + 1) & 0x7F) == 2 || *((_DWORD *)v301 + 3))
    {
      uint64_t v278 = v301[2];
      if ((v278 & 4) != 0)
      {
        unint64_t v263 = v278 & 0xFFFFFFFFFFFFFFF8;
        if (v263)
        {
LABEL_311:
          *(void *)&long long v291 = &v301;
          sub_1CC5FA668(v263 + 16, &v291);
        }
      }
    }
  }
LABEL_257:
  if (__src != &v321) {
    free(__src);
  }
LABEL_259:
  int v247 = v190[29];
  unint64_t __src = v190;
  LODWORD(v320) = v247 - 2;
  char v321 = v190;
  LODWORD(v322) = v247 - 1;
  sub_1CD8020C0(*(void *)(a1 + 832), v205, (uint64_t *)&__src);
  uint64_t v248 = *(void *)(a1 + 832);
  sub_1CCFCBF2C(v248, v205);
  sub_1CD7EA4EC(v248, v205);
  sub_1CD7D73F8(a1);
  MEMORY[0x1D25D9CD0](v292, 8);
  if (p_src != v325) {
    free(p_src);
  }
  if (v305[0] != v306) {
    free(v305[0]);
  }
  MEMORY[0x1D25D9CD0](v286[0], 8);
  if (v310 != v312) {
    free(v310);
  }
  if (v313 != v315) {
    free(v313);
  }
  if (v316 != v318) {
    free(v316);
  }
  return v280;
}

uint64_t *sub_1CCFF782C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 204);
  BOOL v23 = 0;
  int v24 = v7;
  BOOL v9 = v6 == 0;
  uint64_t v8 = (unsigned __int8 **)(v6 + 48);
  BOOL v9 = v9 || v8 == &v23;
  if (!v9)
  {
    uint64_t v10 = *v8;
    BOOL v23 = v10;
    if (v10) {
      llvm::MetadataTracking::track((uint64_t)&v23, v10, 2);
    }
  }
  uint64_t v12 = sub_1CD7EBF14(a2[104], 2, (const llvm::APInt *)&v23, (llvm *)6, 0, 1, 0);
  unsigned int v13 = *(_DWORD *)(a1 + 8);
  if (v13 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v14 = (uint64_t **)(*(void *)a1 + 16 * v13);
  *uint64_t v14 = v12;
  v14[1] = v11;
  ++*(_DWORD *)(a1 + 8);
  __n128 result = sub_1CD7EBF14(a2[104], a3, (const llvm::APInt *)&v23, (llvm *)6, 0, 1, 0);
  unsigned int v17 = *(_DWORD *)(a1 + 8);
  if (v17 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v18 = (uint64_t **)(*(void *)a1 + 16 * v17);
  *uint64_t v18 = result;
  v18[1] = v16;
  ++*(_DWORD *)(a1 + 8);
  if (v23)
  {
    int v19 = *v23;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        unsigned int v20 = v23;
      }
      else {
        unsigned int v20 = 0;
      }
      if ((v19 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v21 = (unint64_t)(v20 + 8);
LABEL_19:
        int v25 = &v23;
        return (uint64_t *)sub_1CC5FA668(v21 + 16, &v25);
      }
      if (v19 == 3) {
        *((void *)v23 + 1) = 0;
      }
    }
    else if ((v23[1] & 0x7F) == 2 || *((_DWORD *)v23 + 3))
    {
      uint64_t v22 = *((void *)v23 + 2);
      if ((v22 & 4) != 0)
      {
        unint64_t v21 = v22 & 0xFFFFFFFFFFFFFFF8;
        if (v21) {
          goto LABEL_19;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CCFF79FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v82 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = v4;
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = sub_1CD7DE5B4(v4, *(unsigned __int8 **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 64));
  uint64_t v11 = *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
  uint64_t v12 = (void *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u) {
    uint64_t v12 = (void *)*v12;
  }
  if (*(_DWORD *)v12)
  {
    uint64_t v13 = v10[5] + 16 * v9;
    uint64_t v10 = sub_1CD3DD4D8(*(void *)(v8 + 832), *(llvm **)v13, *(void *)(v13 + 8));
  }
  int v14 = v9;
  uint64_t v15 = *(void *)(v8 + 832);
  uint64_t v93 = &v95;
  uint64_t v94 = 0x1000000000;
  uint64_t v96 = &v98;
  uint64_t v97 = 0x1000000000;
  uint64_t v99 = &v101;
  uint64_t v100 = 0x1000000000;
  long long v102 = 0u;
  long long v103 = 0u;
  uint64_t v104 = 0;
  int v105 = -1;
  uint64_t v106 = 0;
  int v107 = 0;
  uint64_t v108 = 0;
  int v109 = 32;
  uint64_t v110 = 0xFFFFFFFFLL;
  uint64_t v111 = 0;
  int v112 = 0;
  long long v113 = 0u;
  uint64_t v114 = 0;
  uint64_t v115 = v15;
  uint64_t v116 = 0;
  int v117 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = v121;
  uint64_t v120 = 0x2000000000;
  v121[192] = v122;
  v121[193] = 0x2000000000;
  v122[64] = v123;
  v122[65] = 0x2000000000;
  v123[192] = v124;
  v123[193] = 0x400000000;
  v124[64] = 0;
  v124[88] = 0;
  long long v125 = 0u;
  uint64_t v126 = -1;
  int v127 = -1;
  uint64_t v128 = 0;
  uint64_t v16 = *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 96);
  unsigned int v17 = (void *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u) {
    unsigned int v17 = (void *)*v17;
  }
  unsigned int v18 = *(_DWORD *)v17;
  uint64_t ParamElementType = llvm::AttributeList::getParamElementType((llvm::AttributeList *)(v7 + 64), 2);
  sub_1CCFC2800(v8, (uint64_t)&v106, v7, 5u, v18, (uint64_t)v10, v14, **(void **)(ParamElementType + 16), 0);
  v89[0] = v90;
  v89[1] = (void *)0x800000000;
  v92[0] = 0;
  v92[1] = 0;
  uint64_t v91 = v92;
  sub_1CCA32FA0(v7, &v87);
  unsigned int v20 = v87;
  unint64_t v21 = v88;
  if (v87 != v88)
  {
    do
    {
      uint64_t v22 = (llvm::GCRelocateInst *)*v20;
      if (v100 >= (unint64_t)HIDWORD(v100)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v99[v100] = (uint64_t)v22;
      LODWORD(v100) = v100 + 1;
      DerivedPtr = (unsigned __int8 *)llvm::GCRelocateInst::getDerivedPtr(v22);
      *(void *)&long long v85 = sub_1CD7DE5B4(v8, DerivedPtr);
      *((void *)&v85 + 1) = v24;
      if ((sub_1CD80B81C((uint64_t *)v89, (uint64_t *)&v85) & 0x100000000) != 0)
      {
        uint64_t BasePtr = llvm::GCRelocateInst::getBasePtr(v22);
        if (v94 >= (unint64_t)HIDWORD(v94)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v93[v94] = BasePtr;
        LODWORD(v94) = v94 + 1;
        uint64_t v26 = llvm::GCRelocateInst::getDerivedPtr(v22);
        if (v97 >= (unint64_t)HIDWORD(v97)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v96[v97] = v26;
        LODWORD(v97) = v97 + 1;
      }
      ++v20;
    }
    while (v20 != v21);
    unsigned int v20 = v87;
  }
  if (v20)
  {
    uint64_t v88 = v20;
    operator delete(v20);
  }
  uint64_t v27 = (uint64_t **)sub_1CD80B950((char *)v7);
  uint64_t v28 = sub_1CD80B99C((char *)v7);
  if (v27 != (uint64_t **)v28)
  {
    size_t v48 = (uint64_t **)v28;
    do
    {
      int v49 = *v27;
      if (sub_1CCFF8314(**v27, *(void *)(v8 + 928)))
      {
        unint64_t v87 = sub_1CD7DE5B4(v8, (unsigned __int8 *)v49);
        uint64_t v88 = v50;
        if ((sub_1CD80B81C((uint64_t *)v89, (uint64_t *)&v87) & 0x100000000) != 0)
        {
          if (v94 >= (unint64_t)HIDWORD(v94)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v93[v94] = (uint64_t)v49;
          LODWORD(v94) = v94 + 1;
          if (v97 >= (unint64_t)HIDWORD(v97)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v96[v97] = (uint64_t)v49;
          LODWORD(v97) = v97 + 1;
        }
      }
      v27 += 4;
    }
    while (v27 != v48);
  }
  uint64_t v29 = sub_1CD78079C((char *)v7);
  uint64_t v30 = sub_1CD7807E8((char *)v7);
  *(void *)&long long v102 = v29;
  *((void *)&v102 + 1) = (v30 - v29) >> 5;
  *(void *)&long long v103 = v7;
  uint64_t v31 = *(void *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
  int v32 = (void *)(v31 + 24);
  if (*(_DWORD *)(v31 + 32) >= 0x41u) {
    int v32 = (void *)*v32;
  }
  int v105 = *v32;
  uint64_t v33 = sub_1CD80B950((char *)v7);
  uint64_t v34 = sub_1CD80B99C((char *)v7);
  *(void *)&long long v125 = v33;
  *((void *)&v125 + 1) = (v34 - v33) >> 5;
  uint64_t v35 = sub_1CD80B9EC((char *)v7);
  uint64_t v36 = sub_1CD80BA38((char *)v7);
  *((void *)&v103 + 1) = v35;
  uint64_t v104 = (v36 - v35) >> 5;
  uint64_t v37 = v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
  uint64_t v38 = *(void *)(v37 + 128);
  uint64_t v39 = (uint64_t *)(v38 + 24);
  if (*(_DWORD *)(v38 + 32) >= 0x41u) {
    uint64_t v39 = (uint64_t *)*v39;
  }
  uint64_t v126 = *v39;
  uint64_t v40 = *(void *)(v37 + 32);
  unint64_t v41 = (void *)(v40 + 24);
  if (*(_DWORD *)(v40 + 32) >= 0x41u) {
    unint64_t v41 = (void *)*v41;
  }
  int v127 = *v41;
  uint64_t v128 = v82;
  unint64_t v42 = sub_1CCFF5C0C(v8, (uint64_t)&v93);
  uint64_t v44 = v43;
  uint64_t v45 = *(void *)(v7 + 8);
  if (v45)
  {
    uint64_t v47 = 0;
    uint64_t v46 = 0;
    do
    {
      uint64_t v51 = *(void *)(v45 + 24);
      BOOL v52 = sub_1CC64B564(v51);
      if (v51) {
        BOOL v53 = !v52;
      }
      else {
        BOOL v53 = 1;
      }
      if (!v53)
      {
        if (*(void *)(v51 + 40) == *(void *)(v7 + 40)) {
          uint64_t v46 = v51;
        }
        else {
          uint64_t v47 = v51;
        }
      }
      uint64_t v45 = *(void *)(v45 + 8);
    }
    while (v45);
  }
  else
  {
    uint64_t v46 = 0;
    uint64_t v47 = 0;
  }
  if (v46 | v47)
  {
    if (v46)
    {
      unint64_t v87 = (uint64_t *)v7;
      uint64_t v54 = sub_1CD7E88EC((uint64_t *)(v8 + 8), &v87);
      v54[1] = v42;
      *((_DWORD *)v54 + 4) = v44;
    }
    if (v47)
    {
      unsigned __int8 v55 = *(llvm::LLVMContext ***)v47;
      int v56 = sub_1CD78C110(*(void *)(v8 + 912), v55);
      sub_1CD7D6730((uint64_t)&v87, *(llvm::LLVMContext **)(*(void *)(v8 + 832) + 56), *(void *)(*(void *)(v8 + 832) + 24), (llvm::DataLayout *)(*(void *)(**(void **)(*(void *)(v8 + 832) + 40) + 40) + 272), v56, (uint64_t)v55, ((unint64_t)*(unsigned __int16 *)(v7 + 18) >> 2) & 0x3FF | 0x100000000);
      int v57 = *(void **)(v8 + 832);
      long long v85 = (unint64_t)(v57 + 14);
      uint64_t v58 = *(void *)v8;
      int v59 = *(_DWORD *)(v8 + 816);
      int v83 = 0;
      int v84 = v59;
      if (v58)
      {
        uint64_t v60 = (unsigned __int8 **)(v58 + 48);
        if (v60 != &v83)
        {
          uint64_t v61 = *v60;
          int v83 = v61;
          if (v61) {
            llvm::MetadataTracking::track((uint64_t)&v83, v61, 2);
          }
        }
      }
      sub_1CD7D6A08((uint64_t)&v87, (uint64_t)v42, v44, v57, (const llvm::APInt *)&v83, (uint64_t *)&v85, 0, 0, 0xC8u);
      if (!v83) {
        goto LABEL_60;
      }
      int v62 = *v83;
      if ((v62 - 4) > 0x1E)
      {
        if ((v62 - 3) >= 0xFFFFFFFE) {
          int v78 = v83;
        }
        else {
          int v78 = 0;
        }
        if ((v62 - 3) < 0xFFFFFFFE)
        {
          if (v62 == 3) {
            *((void *)v83 + 1) = 0;
          }
          goto LABEL_60;
        }
        unint64_t v79 = (unint64_t)(v78 + 8);
      }
      else
      {
        if ((v83[1] & 0x7F) != 2 && !*((_DWORD *)v83 + 3)) {
          goto LABEL_60;
        }
        uint64_t v81 = *((void *)v83 + 2);
        if ((v81 & 4) == 0) {
          goto LABEL_60;
        }
        unint64_t v79 = v81 & 0xFFFFFFFFFFFFFFF8;
        if (!v79) {
          goto LABEL_60;
        }
      }
      int v86 = &v83;
      sub_1CC5FA668(v79 + 16, &v86);
LABEL_60:
      unsigned int v63 = *(_DWORD *)(v8 + 392);
      if (v63 >= *(_DWORD *)(v8 + 396)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(*(void *)(v8 + 384) + 16 * v63) = v85;
      ++*(_DWORD *)(v8 + 392);
      int v64 = (uint64_t *)(*(void *)(v8 + 912) + 80);
      int v83 = (unsigned __int8 *)v7;
      *((_DWORD *)sub_1CD3CDD24(v64, &v83) + 2) = v56;
      sub_1CD7E86AC((uint64_t)&v87);
    }
  }
  else
  {
    uint64_t v65 = *(void *)(v8 + 832);
    uint64_t v66 = *(void *)v8;
    int v67 = *(_DWORD *)(v8 + 816);
    unint64_t v87 = 0;
    LODWORD(v88) = v67;
    if (v66)
    {
      unsigned __int8 v68 = (uint64_t **)(v66 + 48);
      if (v68 != &v87)
      {
        uint64_t v69 = *v68;
        unint64_t v87 = v69;
        if (v69) {
          llvm::MetadataTracking::track((uint64_t)&v87, (unsigned __int8 *)v69, 2);
        }
      }
    }
    unsigned int v70 = sub_1CD7EB364(v65, -1, (const llvm::APInt *)&v87, 0);
    int v72 = v71;
    *(void *)&long long v85 = v7;
    uint64_t v73 = sub_1CD7E88EC((uint64_t *)(v8 + 8), &v85);
    v73[1] = v70;
    *((_DWORD *)v73 + 4) = v72;
    if (v87)
    {
      int v74 = *(unsigned __int8 *)v87;
      if ((v74 - 4) > 0x1E)
      {
        if ((v74 - 3) >= 0xFFFFFFFE) {
          char v76 = v87;
        }
        else {
          char v76 = 0;
        }
        if ((v74 - 3) < 0xFFFFFFFE)
        {
          if (v74 == 3) {
            v87[1] = 0;
          }
          goto LABEL_70;
        }
        unint64_t v77 = (unint64_t)(v76 + 1);
      }
      else
      {
        if ((*((unsigned char *)v87 + 1) & 0x7F) != 2 && !*((_DWORD *)v87 + 3)) {
          goto LABEL_70;
        }
        uint64_t v80 = v87[2];
        if ((v80 & 4) == 0) {
          goto LABEL_70;
        }
        unint64_t v77 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (!v77) {
          goto LABEL_70;
        }
      }
      *(void *)&long long v85 = &v87;
      sub_1CC5FA668(v77 + 16, &v85);
    }
  }
LABEL_70:
  sub_1CB833A08((uint64_t)&v91, v92[0]);
  if (v89[0] != v90) {
    free(v89[0]);
  }
  return sub_1CD80CEB8((uint64_t)&v93);
}

BOOL sub_1CCFF8314(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1;
  if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
    int v3 = *(unsigned __int8 *)(**(void **)(a1 + 16) + 8);
  }
  else {
    int v3 = *(_DWORD *)(a1 + 8);
  }
  if (v3 == 15)
  {
    BOOL v5 = 1;
    if (a2)
    {
      unsigned __int16 v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8), a1);
      BOOL v2 = v4 != 0;
      if (v4 > 0xFFu) {
        BOOL v5 = 0;
      }
    }
    return v2 || v5;
  }
  else
  {
    return 0;
  }
}

unint64_t sub_1CCFF83B8(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = sub_1CD7DE5B4(*(void *)a1, a2);
  unsigned int v5 = v4;
  *(void *)&long long v11 = v3;
  *((void *)&v11 + 1) = v4;
  unint64_t result = sub_1CD80C42C(*(void *)(a1 + 8), &v11);
  if (result)
  {
    int v7 = *(_DWORD *)(*(void *)(a1 + 8) + 272) - 1;
    unint64_t result = sub_1CD80CBE4(*(void *)(a1 + 16), (uint64_t)&v11);
    *(_DWORD *)(result + 16) = v7;
    if (*(_DWORD *)(*(void *)(a1 + 24) + 8) != **(_DWORD **)(a1 + 32))
    {
      uint64_t v8 = (unsigned __int8 *)(v3[5] + 16 * v5);
      if (*v8)
      {
        if (*v8 - 15 < 0x9C) {
          return result;
        }
      }
      else if ((*(_DWORD *)(*((void *)v8 + 1) + 8) & 0xFE) == 0x12)
      {
        return result;
      }
      unint64_t result = sub_1CD80C730(**(void **)(a1 + 40), (unint64_t)v3, v5);
      if (!result)
      {
        unint64_t result = sub_1CCFF8F6C((uint64_t)v3, v5);
        if ((result & 1) == 0)
        {
          unsigned int v9 = *(_DWORD **)(a1 + 48);
          int v10 = (*v9)++;
          unint64_t result = sub_1CD80CBE4(*(void *)(a1 + 24), (uint64_t)&v11);
          *(_DWORD *)(result + 16) = v10;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1CCFF84B8(unsigned __int8 *a1, void *a2)
{
  uint64_t v4 = sub_1CD7DE5B4((uint64_t)a2, a1);
  uint64_t v6 = v5;
  unint64_t result = sub_1CCFF8F6C((uint64_t)v4, v5);
  if ((result & 1) == 0)
  {
    uint64_t v8 = (uint64_t)(a2 + 31);
    unint64_t result = sub_1CD80B7AC((uint64_t)(a2 + 31), (unint64_t)v4, v6);
    if (!result)
    {
      unint64_t result = sub_1CCFF9028((uint64_t)a1, (uint64_t)a2, 6);
      if (HIDWORD(result))
      {
        int v9 = result;
        uint64_t v10 = a2[114];
        uint64_t v11 = *(void *)(v10 + 424);
        uint64_t v12 = *(unsigned int *)(v10 + 432);
        if (v12)
        {
          uint64_t v13 = 4 * v12;
          int v14 = *(_DWORD **)(v10 + 424);
          uint64_t v15 = (_DWORD *)(v11 + 4 * v12);
          while (*v14 != result)
          {
            ++v14;
            v13 -= 4;
            if (!v13)
            {
              int v14 = v15;
              break;
            }
          }
        }
        else
        {
          int v14 = *(_DWORD **)(v10 + 424);
        }
        unint64_t v16 = (unint64_t)v14 - v11;
        unint64_t v17 = a2[34];
        if (v17)
        {
          unint64_t v23 = v16 >> 2;
          uint64_t v24 = -1 << (v17 >> 58);
          uint64_t v25 = 1 << v23;
          unint64_t v26 = (v17 >> 1) & ~v24;
          if ((v26 & v25) == 0)
          {
            a2[34] = v17 & 0xFC00000000000000 | (2 * ((v25 | v26) & ~v24)) | 1;
            goto LABEL_16;
          }
        }
        else
        {
          unint64_t v18 = v16 >> 2;
          uint64_t v19 = (v16 >> 8) & 0x3FFFFFF;
          uint64_t v20 = *(void *)v17;
          uint64_t v21 = *(void *)(v20 + 8 * v19);
          uint64_t v22 = 1 << v18;
          if ((v21 & v22) == 0)
          {
            *(void *)(v20 + 8 * v19) = v21 | v22;
LABEL_16:
            uint64_t v27 = a2[104];
            uint64_t v28 = *(void *)(**(void **)(v27 + 40) + 40);
            unsigned __int8 v29 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v27 + 24) + 32))(*(void *)(v27 + 24), v28 + 272, *(unsigned int *)(v28 + 276));
            uint64_t v30 = sub_1CD7ED208(v27, v9, (llvm *)v29, 0, 1);
            int v32 = v31;
            v33[0] = v4;
            v33[1] = v6;
            unint64_t result = sub_1CD80C7CC(v8, (uint64_t)v33);
            *(void *)(result + 16) = v30;
            *(_DWORD *)(result + 24) = v32;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CCFF867C(unint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result = (uint64_t *)sub_1CCFF8F6C(a1, a2);
  if (!result)
  {
    if ((a3 & 1) == 0)
    {
      unsigned int v14 = *(_DWORD *)(a4 + 8);
      if (v14 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v15 = (unint64_t *)(*(void *)a4 + 16 * v14);
      *uint64_t v15 = a1;
      v15[1] = a2;
      ++*(_DWORD *)(a4 + 8);
      return result;
    }
    int v71 = sub_1CD7D7360(a6);
    int v26 = v25;
    unint64_t result = (uint64_t *)sub_1CD80B7AC(a6 + 248, a1, a2);
    unint64_t v28 = v27;
    if (result)
    {
      unsigned __int8 v29 = result;
      unint64_t v30 = 0;
LABEL_33:
      unsigned int v31 = *(_DWORD *)(a4 + 8);
      if (v31 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v32 = (uint64_t **)(*(void *)a4 + 16 * v31);
      *int v32 = v29;
      v32[1] = (uint64_t *)v28;
      ++*(_DWORD *)(a4 + 8);
      if (v30)
      {
        unsigned int v33 = *(_DWORD *)(a5 + 8);
        if (v33 >= *(_DWORD *)(a5 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a5 + 8 * v33) = v30;
        ++*(_DWORD *)(a5 + 8);
      }
      uint64_t v34 = *(void *)(a6 + 832);
      *(void *)(v34 + 192) = v71;
      *(_DWORD *)(v34 + 200) = v26;
      return result;
    }
    uint64_t v44 = *(void *)(a1 + 40) + 16 * a2;
    int v45 = *((_DWORD *)sub_1CD80B5D4(a6 + 248, *(llvm **)v44, *(void *)(v44 + 8), a6) + 19);
    uint64_t v46 = *(void *)(a6 + 832);
    uint64_t v47 = *(void *)(**(void **)(v46 + 40) + 40);
    unsigned __int8 v48 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v46 + 24) + 32))(*(void *)(v46 + 24), v47 + 272, *(unsigned int *)(v47 + 276));
    unsigned __int8 v29 = sub_1CD7ED208(v46, v45, (llvm *)v48, 0, 1);
    unint64_t v28 = v28 & 0xFFFFFFFF00000000 | v49;
    uint64_t v50 = *(void *)(*(void *)(a6 + 832) + 40);
    uint64_t v67 = *(void *)(v50 + 56);
    unsigned int v69 = v49;
    uint64_t v70 = v50;
    FixedStacint k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v50 + 432), v45);
    if (FixedStack) {
      int v52 = *((_DWORD *)FixedStack + 3);
    }
    else {
      int v52 = 0;
    }
    v73[0] = (unint64_t)FixedStack | 4;
    v73[1] = 0;
    int v74 = v52;
    char v75 = 0;
    uint64_t v53 = *(void *)(v67 + 8) + 40 * (*(_DWORD *)(v67 + 32) + v45);
    uint64_t v54 = *(void *)(v53 + 8);
    char v55 = *(unsigned char *)(v53 + 16);
    memset(v72, 0, sizeof(v72));
    unint64_t MachineMemOperand = llvm::MachineFunction::getMachineMemOperand(v70, (uint64_t)v73, 2, v54, v55, v72, 0, 1, 0, 0, 0);
    uint64_t v57 = *(void *)(a6 + 832);
    uint64_t v58 = *(void *)a6;
    int v59 = *(_DWORD *)(a6 + 816);
    *(void *)&v72[0] = 0;
    DWORD2(v72[0]) = v59;
    if (v58)
    {
      uint64_t v60 = (long long *)(v58 + 48);
      if (v60 != v72)
      {
        uint64_t v61 = *(unsigned __int8 **)v60;
        *(void *)&v72[0] = v61;
        if (v61)
        {
          uint64_t v68 = v57;
          llvm::MetadataTracking::track((uint64_t)v72, v61, 2);
          uint64_t v57 = v68;
        }
      }
    }
    int v71 = sub_1CD7FB2A8(v57, (uint64_t)v71, v26, (uint64_t)v72, a1, a2, (uint64_t)v29, v28, MachineMemOperand);
    int v26 = v62;
    if (*(void *)&v72[0])
    {
      int v63 = **(unsigned char **)&v72[0];
      if ((v63 - 4) > 0x1E)
      {
        if ((v63 - 3) >= 0xFFFFFFFE) {
          uint64_t v64 = *(void *)&v72[0];
        }
        else {
          uint64_t v64 = 0;
        }
        if ((v63 - 3) < 0xFFFFFFFE)
        {
          if (v63 == 3) {
            *(void *)(*(void *)&v72[0] + 8) = 0;
          }
          goto LABEL_52;
        }
        unint64_t v65 = v64 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*(void *)&v72[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v72[0] + 12)) {
          goto LABEL_52;
        }
        uint64_t v66 = *(void *)(*(void *)&v72[0] + 16);
        if ((v66 & 4) == 0) {
          goto LABEL_52;
        }
        unint64_t v65 = v66 & 0xFFFFFFFFFFFFFFF8;
        if (!v65) {
          goto LABEL_52;
        }
      }
      char v76 = v72;
      sub_1CC5FA668(v65 + 16, &v76);
    }
LABEL_52:
    unint64_t v30 = sub_1CCFF8C60(v70, (uint64_t)v29);
    *(void *)&v72[0] = a1;
    *((void *)&v72[0] + 1) = a2;
    unint64_t result = (uint64_t *)sub_1CD80C7CC(a6 + 248, (uint64_t)v72);
    result[2] = (uint64_t)v29;
    *((_DWORD *)result + 6) = v69;
    goto LABEL_33;
  }
  unsigned int v13 = *(unsigned __int16 *)(a1 + 24);
  if (v13 <= 0x22)
  {
    if (v13 == 11)
    {
LABEL_20:
      uint64_t v20 = *(void *)(a1 + 80);
      unsigned int v21 = *(_DWORD *)(v20 + 32);
      if (v21 > 0x40) {
        uint64_t v22 = **(void **)(v20 + 24);
      }
      else {
        uint64_t v22 = (uint64_t)(*(void *)(v20 + 24) << -(char)v21) >> -(char)v21;
      }
      uint64_t v23 = a4;
      uint64_t v24 = (uint64_t *)a6;
      goto LABEL_26;
    }
    if (v13 == 12)
    {
LABEL_13:
      uint64_t v16 = *(void *)(a1 + 80);
      unint64_t v18 = *(void **)(v16 + 32);
      unint64_t v17 = (llvm::detail::DoubleAPFloat *)(v16 + 32);
      if (v18 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v17, (llvm::APInt *)v72);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v17, (uint64_t)v72);
      }
      uint64_t v19 = (uint64_t *)v72;
      if (DWORD2(v72[0]) >= 0x41) {
        uint64_t v19 = *(uint64_t **)&v72[0];
      }
      unint64_t result = sub_1CCFF782C(a4, (uint64_t *)a6, *v19);
      if (DWORD2(v72[0]) >= 0x41)
      {
        unint64_t result = *(uint64_t **)&v72[0];
        if (*(void *)&v72[0]) {
          return (uint64_t *)MEMORY[0x1D25D9CB0](*(void *)&v72[0], 0x1000C8000313F17);
        }
      }
      return result;
    }
    if (v13 != 15) {
      return result;
    }
  }
  else
  {
    if (*(unsigned __int16 *)(a1 + 24) <= 0x26u)
    {
      if (v13 != 35)
      {
        if (v13 != 36) {
          return result;
        }
        goto LABEL_13;
      }
      goto LABEL_20;
    }
    if (v13 == 51)
    {
      uint64_t v23 = a4;
      uint64_t v24 = (uint64_t *)a6;
      uint64_t v22 = 4278124286;
LABEL_26:
      return sub_1CCFF782C(v23, v24, v22);
    }
    if (v13 != 39) {
      return result;
    }
  }
  uint64_t v35 = *(void *)(a6 + 832);
  int v36 = *(_DWORD *)(a1 + 76);
  uint64_t v37 = *(void *)(**(void **)(v35 + 40) + 40);
  unsigned __int8 v38 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v35 + 24) + 32))(*(void *)(v35 + 24), v37 + 272, *(unsigned int *)(v37 + 276));
  uint64_t v40 = sub_1CD7ED208(v35, v36, (llvm *)v38, 0, 1);
  unsigned int v41 = *(_DWORD *)(a4 + 8);
  if (v41 >= *(_DWORD *)(a4 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v42 = (uint64_t **)(*(void *)a4 + 16 * v41);
  *unint64_t v42 = v40;
  v42[1] = v39;
  ++*(_DWORD *)(a4 + 8);
  unint64_t result = (uint64_t *)sub_1CCFF8C60(*(void *)(*(void *)(a6 + 832) + 40), a1);
  unsigned int v43 = *(_DWORD *)(a5 + 8);
  if (v43 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a5 + 8 * v43) = result;
  ++*(_DWORD *)(a5 + 8);
  return result;
}

unint64_t sub_1CCFF8C60(uint64_t a1, uint64_t a2)
{
  FixedStacint k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(a1 + 432), *(_DWORD *)(a2 + 76));
  if (FixedStack) {
    int v5 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  v12[0] = (unint64_t)FixedStack | 4;
  v12[1] = 0;
  int v13 = v5;
  char v14 = 0;
  uint64_t v7 = *(void *)(v6 + 8) + 40 * (*(_DWORD *)(v6 + 32) + *(_DWORD *)(a2 + 76));
  uint64_t v8 = *(void *)(v7 + 8);
  char v9 = *(unsigned char *)(v7 + 16);
  memset(v11, 0, sizeof(v11));
  return llvm::MachineFunction::getMachineMemOperand(a1, (uint64_t)v12, 7, v8, v9, v11, 0, 1, 0, 0, 0);
}

uint64_t sub_1CCFF8D04(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CCFF8E98(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  char v9 = v14;
  do
  {
    if (*(void *)(a1 + v8 + 8)) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = *(_DWORD *)(a1 + v8 + 16) > 0xFFFFFFFD;
    }
    if (!v10) {
      *v9++ = *(_OWORD *)(a1 + v8 + 8);
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CCFF8E98(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1CCFF8E98(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)unint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (_OWORD *)(result + 8);
    char v9 = (_OWORD *)(result + 264);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v8 = *(_OWORD **)(result + 8);
    char v9 = &v8[v7];
  }
  do
    *v8++ = xmmword_1CD923640;
  while (v8 != v9);
LABEL_13:
  while (a2 != a3)
  {
    unint64_t v10 = *(void *)a2;
    unsigned int v11 = *(_DWORD *)(a2 + 8);
    if (*(void *)a2) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v11 > 0xFFFFFFFD;
    }
    if (!v12)
    {
      uint64_t v15 = 0;
      unint64_t result = sub_1CD80C598((uint64_t)v5, v10, v11, &v15);
      uint64_t v13 = (unint64_t *)v15;
      unint64_t v14 = *(void *)a2;
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 + 8);
      *uint64_t v13 = v14;
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

unint64_t sub_1CCFF8F6C(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int16 *)(a1 + 24);
  unint64_t result = 1;
  if (v3 != 15 && v3 != 39)
  {
    long long v9 = *(_OWORD *)(*(void *)(a1 + 40) + 16 * a2);
    if ((_BYTE)v9) {
      unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v9);
    }
    else {
      unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v9);
    }
    if (v6 == 1)
    {
      unint64_t v8 = ExtendedSizeInBits;
      unint64_t ExtendedSizeInBits = v8;
    }
    if (ExtendedSizeInBits > 0x40) {
      return 0;
    }
    unsigned int v7 = *(unsigned __int16 *)(a1 + 24);
    if (v7 > 0x33) {
      return 0;
    }
    else {
      return (0x8001800001800uLL >> v7) & 1;
    }
  }
  return result;
}

unint64_t sub_1CCFF9028(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = (a3 - 1);
  if (a3 < 1) {
    goto LABEL_26;
  }
  BOOL v6 = sub_1CC070820(a1);
  if (a1 && v6)
  {
    uint64_t v17 = *(void *)(a2 + 912) + 152;
    uint64_t Statepoint = llvm::GCProjectionInst::getStatepoint((llvm::GCProjectionInst *)a1);
    unint64_t v18 = sub_1CD748FA4(v17, &Statepoint);
    uint64_t DerivedPtr = llvm::GCRelocateInst::getDerivedPtr((llvm::GCRelocateInst *)a1);
    uint64_t Statepoint = 0;
    int v20 = sub_1CD40EA84(v18[1], *((_DWORD *)v18 + 6), DerivedPtr, &Statepoint);
    uint64_t v10 = 0;
    LOBYTE(v8) = 0;
    unint64_t v9 = 0;
    if (v20) {
      BOOL v21 = Statepoint == v18[1] + 16 * *((unsigned int *)v18 + 6);
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      if (*(_DWORD *)(Statepoint + 8) != 1) {
        goto LABEL_26;
      }
      unint64_t v8 = *(unsigned int *)(Statepoint + 12);
      unint64_t v9 = v8 >> 8;
LABEL_25:
      uint64_t v10 = 0x100000000;
    }
  }
  else
  {
    int v7 = *(unsigned __int8 *)(a1 + 16);
    if (a1 && v7 == 77)
    {
      unint64_t v8 = sub_1CCFF9028(*(void *)(a1 - 32), a2, v3);
      unint64_t v9 = v8 >> 8;
      uint64_t v10 = v8 & 0x100000000;
      return v8 | (unint64_t)v10 | (v9 << 8);
    }
    uint64_t v10 = 0;
    LOBYTE(v8) = 0;
    unint64_t v9 = 0;
    if (a1 && v7 == 83)
    {
      int v11 = *(_DWORD *)(a1 + 20);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v12 = v11 & 0x7FFFFFF;
        uint64_t v13 = (void *)(a1 - 32 * v12);
        if (!v12) {
          goto LABEL_26;
        }
LABEL_13:
        LODWORD(v9) = 0;
        unsigned __int8 v14 = 0;
        uint64_t v15 = 32 * v12;
        char v16 = 1;
        while (1)
        {
          unint64_t v8 = sub_1CCFF9028(*v13, a2, v3);
          if (!HIDWORD(v8) || (v16 & 1) == 0 && (v14 | (v9 << 8)) != v8) {
            goto LABEL_26;
          }
          char v16 = 0;
          unint64_t v9 = v8 >> 8;
          v13 += 4;
          unsigned __int8 v14 = v8;
          v15 -= 32;
          if (!v15) {
            goto LABEL_25;
          }
        }
      }
      uint64_t v13 = *(void **)(a1 - 8);
      uint64_t v12 = v11 & 0x7FFFFFF;
      if (v12) {
        goto LABEL_13;
      }
LABEL_26:
      uint64_t v10 = 0;
      LOBYTE(v8) = 0;
      unint64_t v9 = 0;
    }
  }
  return v8 | (unint64_t)v10 | (v9 << 8);
}

uint64_t sub_1CCFF91E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 32 * v6;
    do
    {
      _OWORD *v7 = xmmword_1CD923640;
      v7 += 2;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    unint64_t v9 = *(void *)a2;
    unsigned int v10 = *(_DWORD *)(a2 + 8);
    if (*(void *)a2) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = v10 > 0xFFFFFFFD;
    }
    if (!v11)
    {
      uint64_t v14 = 0;
      unint64_t result = sub_1CD80C848(*(void *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      uint64_t v12 = v14;
      unint64_t v13 = *(void *)a2;
      *(_DWORD *)(v14 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)uint64_t v12 = v13;
      *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

uint64_t sub_1CCFF92A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      _OWORD *v7 = xmmword_1CD923640;
      int v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    unint64_t v9 = *(void *)a2;
    unsigned int v10 = *(_DWORD *)(a2 + 8);
    if (*(void *)a2) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = v10 > 0xFFFFFFFD;
    }
    if (!v11)
    {
      uint64_t v14 = 0;
      unint64_t result = sub_1CD80CC60(*(void *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      uint64_t v12 = v14;
      unint64_t v13 = *(void *)a2;
      *(_DWORD *)(v14 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)uint64_t v12 = v13;
      *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

_DWORD *sub_1CCFF9374(_DWORD *result, int a2)
{
  BOOL v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    unint64_t result = operator new(32 * v4, (std::align_val_t)8uLL);
    *(void *)BOOL v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 32 * v5;
      do
      {
        *(_OWORD *)unint64_t result = xmmword_1CD923640;
        result += 8;
        v6 -= 32;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)unint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1CCFF940C()
{
  int v4 = 1;
  LOBYTE(v2) = 0;
  unint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Allow using registers for non pointer deopt args";
  v1.n128_u64[1] = 48;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCFA960, "use-registers-for-deopt-values", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFA960, &dword_1CB82C000);
  int v4 = 1;
  LOBYTE(v2) = 0;
  unint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Allow using registers for gc pointer in landing pad";
  v1.n128_u64[1] = 51;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCFAA20, "use-registers-for-gc-values-in-landing-pad", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCFAA20, &dword_1CB82C000);
  int v4 = 1;
  int v2 = 0;
  unint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Max number of VRegs allowed to pass GC pointer meta args in";
  v1.n128_u64[1] = 59;
  sub_1CD45A86C((uint64_t)&unk_1EBCFAAE0, "max-registers-for-gc-values", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCFAAE0, &dword_1CB82C000);
}

void sub_1CCFF9554(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, int a12)
{
  unint64_t v13 = a7;
  uint64_t v15 = a2;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t v76 = a4;
  uint64_t v77 = a5;
  uint64_t v17 = a2 + 112;
  if (a11) {
    uint64_t v17 = a11;
  }
  uint64_t v66 = v17;
  uint64_t v73 = 0;
  int v74 = 0;
  char v75 = 0;
  sub_1CD78A38C((uint64_t)&v73, a7);
  if (v13)
  {
    unint64_t v18 = 0;
    int v19 = 0;
    uint64_t v69 = a6;
    uint64_t v70 = v15;
    do
    {
      int v72 = v19;
      int v20 = (unsigned int *)(a6 + 16 * v18);
      uint64_t v21 = *(void *)v20;
      uint64_t v22 = v20[2];
      long long v79 = *(_OWORD *)(*(void *)(*(void *)v20 + 40) + 16 * v22);
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v79, *(llvm::LLVMContext **)(v15 + 56));
      uint64_t v71 = v23;
      int v24 = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a1 + 928))(a1, *(void *)(*(void *)(v21 + 40) + 16 * v22), *(void *)(*(void *)(v21 + 40) + 16 * v22 + 8), *(unsigned char *)(a8 + 32) & 1);
      if (v24) {
        __int16 v25 = 0;
      }
      else {
        __int16 v25 = 2;
      }
      __int16 v26 = v25 | v24;
      if ((*(unsigned char *)(a8 + 32) & 0x10) != 0
        && !(*(unsigned int (**)(uint64_t, void, void))(*(void *)a1 + 936))(a1, *(void *)(*(void *)a8 + 16 * v18), *(void *)(*(void *)a8 + 16 * v18 + 8)))
      {
        __int16 v26 = 0;
      }
      unint64_t v27 = v74;
      if (v74 >= v75)
      {
        unint64_t v29 = v13;
        uint64_t v30 = a1;
        uint64_t v31 = a8;
        int v32 = (char *)v73;
        unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v74 - (unsigned char *)v73) >> 4);
        unint64_t v34 = v33 + 1;
        if (v33 + 1 > 0x555555555555555) {
          abort();
        }
        if (0x5555555555555556 * ((v75 - (unsigned char *)v73) >> 4) > v34) {
          unint64_t v34 = 0x5555555555555556 * ((v75 - (unsigned char *)v73) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v75 - (unsigned char *)v73) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v35 = 0x555555555555555;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v35)
        {
          if (v35 > 0x555555555555555) {
            sub_1CB833614();
          }
          int v36 = (char *)operator new(48 * v35);
        }
        else
        {
          int v36 = 0;
        }
        uint64_t v37 = &v36[48 * v33];
        *(void *)uint64_t v37 = 0;
        *((void *)v37 + 1) = v21;
        *((_DWORD *)v37 + 4) = v22;
        *((_DWORD *)v37 + 5) = 0;
        *((void *)v37 + 3) = v71;
        *((_WORD *)v37 + 16) = v26;
        *((_WORD *)v37 + 17) = 0;
        *((void *)v37 + 5) = 0;
        unsigned __int8 v38 = v37;
        a8 = v31;
        if (v27 != v32)
        {
          do
          {
            long long v39 = *((_OWORD *)v27 - 3);
            long long v40 = *((_OWORD *)v27 - 1);
            *((_OWORD *)v38 - 2) = *((_OWORD *)v27 - 2);
            *((_OWORD *)v38 - 1) = v40;
            *((_OWORD *)v38 - 3) = v39;
            v38 -= 48;
            v27 -= 48;
          }
          while (v27 != v32);
          unint64_t v27 = v32;
        }
        a1 = v30;
        unint64_t v28 = v37 + 48;
        uint64_t v73 = v38;
        int v74 = v37 + 48;
        char v75 = &v36[48 * v35];
        unint64_t v13 = v29;
        if (v27) {
          operator delete(v27);
        }
        a6 = v69;
        uint64_t v15 = v70;
      }
      else
      {
        *(void *)int v74 = 0;
        *((void *)v27 + 1) = v21;
        *((_DWORD *)v27 + 4) = v22;
        *((_DWORD *)v27 + 5) = 0;
        *((void *)v27 + 3) = v71;
        *((_WORD *)v27 + 16) = v26;
        *((_WORD *)v27 + 17) = 0;
        unint64_t v28 = v27 + 48;
        *((void *)v27 + 5) = 0;
      }
      int v74 = v28;
      unint64_t v18 = (v72 + 1);
      int v19 = v72 + 1;
    }
    while (v13 > v18);
  }
  if (a3 == 637) {
    llvm::report_fatal_error((llvm *)"Unsupported library call operation!", (const llvm::Twine *)1);
  }
  unsigned int v41 = *(char **)(a1 + 8 * a3 + 174048);
  unsigned __int8 v42 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 32))(a1, *(void *)(**(void **)(v15 + 40) + 40) + 272, 0);
  uint64_t v43 = v15;
  size_t v44 = sub_1CD7EDF94(v15, v41, v42, 0);
  int v46 = v45;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v76, *(llvm::LLVMContext **)(v43 + 56));
  uint64_t v48 = v47;
  *(void *)&long long v79 = 0;
  DWORD2(v79) = 0;
  uint64_t v80 = 0;
  __int16 v81 = v81 & 0xFC00 | 0x20;
  __int16 v82 = 0;
  uint64_t v83 = 0xFFFFFFFFLL;
  size_t v84 = 0;
  int v85 = 0;
  __p = 0;
  unint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = v43;
  uint64_t v90 = 0;
  int v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = v95;
  uint64_t v94 = 0x2000000000;
  v95[192] = v96;
  v95[193] = 0x2000000000;
  v96[64] = v97;
  v96[65] = 0x2000000000;
  v97[192] = v98;
  v97[193] = 0x400000000;
  v98[64] = 0;
  v98[88] = 0;
  int v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 928))(a1, v76, v77, *(unsigned char *)(a8 + 32) & 1);
  int v50 = v49 ^ 1;
  if ((*(unsigned char *)(a8 + 32) & 0x10) != 0)
  {
    int v51 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 936))(a1, *(void *)(a8 + 16), *(void *)(a8 + 24));
    v50 &= v51;
    LOWORD(v49) = v51 & v49;
  }
  if (&v90 != (unsigned __int8 **)a10)
  {
    if (!v90) {
      goto LABEL_35;
    }
    int v62 = *v90;
    if ((v62 - 4) > 0x1E)
    {
      if ((v62 - 3) >= 0xFFFFFFFE) {
        unint64_t v65 = v90;
      }
      else {
        unint64_t v65 = 0;
      }
      if ((v62 - 3) < 0xFFFFFFFE)
      {
        if (v62 == 3) {
          *((void *)v90 + 1) = 0;
        }
        goto LABEL_35;
      }
      unint64_t v64 = (unint64_t)(v65 + 8);
    }
    else if ((v90[1] & 0x7F) != 2 && !*((_DWORD *)v90 + 3) {
           || (uint64_t v63 = *((void *)v90 + 2), (v63 & 4) == 0)
    }
           || (unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_35:
      int v52 = *(unsigned __int8 **)a10;
      uint64_t v90 = v52;
      if (v52) {
        llvm::MetadataTracking::track((uint64_t)&v90, v52, 2);
      }
      goto LABEL_37;
    }
    int v78 = &v90;
    sub_1CC5FA668(v64 + 16, &v78);
    goto LABEL_35;
  }
LABEL_37:
  int v53 = *(_DWORD *)(a10 + 8);
  *(void *)&long long v79 = v66;
  if (a11) {
    int v54 = a12;
  }
  else {
    int v54 = 0;
  }
  DWORD2(v79) = v54;
  int v55 = *(_DWORD *)(a1 + 4 * a3 + 181700);
  uint64_t v80 = v48;
  size_t v84 = v44;
  int v91 = v53;
  int v85 = v46;
  uint64_t v57 = v73;
  int v56 = v74;
  LODWORD(v83) = -1431655765 * ((unint64_t)(v74 - (unsigned char *)v73) >> 4);
  HIDWORD(v83) = v55;
  if (__p)
  {
    unint64_t v87 = __p;
    operator delete(__p);
    uint64_t v57 = v73;
    int v56 = v74;
  }
  __p = v57;
  unint64_t v87 = v56;
  uint64_t v88 = v75;
  uint64_t v73 = 0;
  int v74 = 0;
  char v75 = 0;
  (***(void (****)(void))(v89 + 24))();
  unsigned int v58 = *(unsigned __int8 *)(a8 + 32);
  unsigned int v59 = v58 >> 2;
  unsigned int v60 = v58 >> 1;
  HIBYTE(v82) = (v58 & 8) != 0;
  if (v50) {
    __int16 v61 = 2;
  }
  else {
    __int16 v61 = 0;
  }
  __int16 v81 = v61 & 0xFFCF | v49 & 0xFFCF | v81 & 0xFFCC | (16 * (v60 & 1)) & 0xDF | (32 * (v59 & 1));
  sub_1CCFB0250(a1, (uint64_t)&v79, a9);
  sub_1CD78F470(&v79);
  if (v73)
  {
    int v74 = (char *)v73;
    operator delete(v73);
  }
}

BOOL sub_1CCFF9C00(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!(*(unsigned __int8 *)(a4 + 11) | *(unsigned __int8 *)(a4 + 8))
    && *(unsigned __int8 *)(a4 + 14) < *(unsigned __int8 *)(a4 + 9))
  {
    return 0;
  }
  *(void *)&long long v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 672))(a1, a4, a7);
  *((void *)&v56 + 1) = v11;
  unsigned int v51 = a5;
  if (v56 == 1)
  {
    LOBYTE(v56) = 6;
    *((void *)&v56 + 1) = 0;
    if (!*(unsigned char *)(a4 + 8))
    {
      char v46 = 6;
      while (1)
      {
        char v47 = *(unsigned char *)(a4 + 9);
        if (v46) {
          uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v56);
        }
        else {
          uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v56);
        }
        unint64_t v50 = ExtendedSizeInBits;
        if (v49 == 1) {
        if (1 << v47 >= v50 >> 3
        }
          || ((*(uint64_t (**)(uint64_t, void, void, void, void, void, void))(*(void *)a1 + 648))(a1, v56, *((void *)&v56 + 1), a5, *(unsigned __int8 *)(a4 + 9), 0, 0) & 1) != 0)
        {
          break;
        }
        char v46 = v56 - 1;
        LOBYTE(v56) = v56 - 1;
        *((void *)&v56 + 1) = 0;
      }
    }
    unsigned __int8 v12 = 6;
    a5 = a5;
    while (!v12 || !*(void *)(a1 + 8 * v12 + 96))
      --v12;
    if (v56 != v12 && sub_1CC277C0C((unsigned __int8 *)&v56, v12, 0))
    {
      LOBYTE(v56) = v12;
      *((void *)&v56 + 1) = 0;
    }
  }
  unint64_t v13 = *(void *)a4;
  if (!*(void *)a4) {
    return 1;
  }
  unsigned int v14 = 0;
  uint64_t v15 = a2;
  do
  {
    if ((_BYTE)v56) {
      uint64_t v16 = sub_1CB87E200((unsigned __int8 *)&v56);
    }
    else {
      uint64_t v16 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v56);
    }
    unint64_t v18 = v16;
    if (v17 == 1) {
    for (unint64_t i = (v18 >> 3); i > v13; unint64_t i = v33)
    }
    {
      long long v55 = v56;
      if ((_BYTE)v56)
      {
        if (v56 - 8 >= 0xA3) {
          goto LABEL_44;
        }
        uint64_t v20 = sub_1CB87E200((unsigned __int8 *)&v56);
      }
      else
      {
        if ((*(_DWORD *)(*((void *)&v56 + 1) + 8) & 0xFE) != 0x12
          && *(_DWORD *)(*((void *)&v56 + 1) + 8) >= 7u)
        {
LABEL_44:
          while (1)
          {
            int v27 = v55 - 1;
            LOBYTE(v55) = v55 - 1;
            *((void *)&v55 + 1) = 0;
            if (v27 == 3) {
              goto LABEL_48;
            }
            if ((*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 688))(a1, v27))
            {
              int v25 = v55;
              goto LABEL_47;
            }
          }
        }
        uint64_t v20 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v56);
      }
      unint64_t v23 = v20;
      if (v21 == 1) {
      if (v23 <= 0x40)
      }
        unsigned __int8 v24 = 5;
      else {
        unsigned __int8 v24 = 6;
      }
      LOBYTE(v55) = v24;
      DWORD1(v55) = *(_DWORD *)&v54[3];
      *(_DWORD *)((char *)&v55 + 1) = *(_DWORD *)v54;
      *((void *)&v55 + 1) = 0;
      int v25 = v24;
      if (v24 != 1 && !*(void *)(a1 + 8 * v24 + 96)
        || (*(unsigned __int8 *)(a1 + 390 * v24 + 4116) | 4) != 4
        || (char v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 688))(a1),
            int v25 = v55,
            (v26 & 1) == 0))
      {
        if (v25 != 6
          || !*(void *)(a1 + 184)
          || (*(unsigned __int8 *)(a1 + 8406) | 4) != 4
          || !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 688))(a1, 11))
        {
          goto LABEL_44;
        }
        LOBYTE(v55) = 11;
        *((void *)&v55 + 1) = 0;
LABEL_48:
        uint64_t v28 = sub_1CB87E200((unsigned __int8 *)&v55);
        goto LABEL_49;
      }
LABEL_47:
      if (v25) {
        goto LABEL_48;
      }
      uint64_t v28 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v55);
LABEL_49:
      unint64_t v30 = v28;
      if (v29 == 1) {
      v54[0] = 0;
      }
      if (v14 && *(unsigned char *)(a4 + 10) && (v30 >> 3) < v13)
      {
        unsigned __int8 v31 = *(unsigned char *)(a4 + 8) ? 0 : *(unsigned char *)(a4 + 9);
        BOOL v32 = !(*(unsigned int (**)(uint64_t, void, void, uint64_t, void, void, unsigned char *))(*(void *)a1 + 648))(a1, v56, *((void *)&v56 + 1), a5, v31, 0, v54)|| v54[0] == 0;
        LODWORD(v33) = v13;
        if (!v32) {
          continue;
        }
      }
      unint64_t v33 = v30 >> 3;
      long long v56 = v55;
    }
    BOOL result = ++v14 <= a3;
    if (v14 > a3) {
      break;
    }
    unint64_t v35 = (_OWORD *)v15[1];
    unint64_t v34 = v15[2];
    if ((unint64_t)v35 >= v34)
    {
      uint64_t v37 = (_OWORD *)*v15;
      uint64_t v38 = v35 - v37;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60) {
        abort();
      }
      uint64_t v40 = v34 - (void)v37;
      if (v40 >> 3 > v39) {
        unint64_t v39 = v40 >> 3;
      }
      unint64_t v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v39;
      if (v41)
      {
        if (v41 >> 60) {
          sub_1CB833614();
        }
        unsigned __int8 v42 = (char *)operator new(16 * v41);
      }
      else
      {
        unsigned __int8 v42 = 0;
      }
      uint64_t v43 = &v42[16 * v38];
      *(_OWORD *)uint64_t v43 = v56;
      size_t v44 = v43;
      if (v35 == v37)
      {
        int v45 = (char **)a2;
      }
      else
      {
        do
        {
          *((_OWORD *)v44 - 1) = *(v35 - 1);
          v44 -= 16;
          --v35;
        }
        while (v35 != v37);
        int v45 = (char **)a2;
        unint64_t v35 = (_OWORD *)*a2;
      }
      int v36 = v43 + 16;
      *int v45 = v44;
      v45[1] = v43 + 16;
      v45[2] = &v42[16 * v41];
      if (v35) {
        operator delete(v35);
      }
      a5 = v51;
      BOOL result = v14 <= a3;
    }
    else
    {
      *unint64_t v35 = v56;
      int v36 = v35 + 1;
    }
    a2[1] = v36;
    uint64_t v15 = a2;
    v13 -= i;
  }
  while (v13);
  return result;
}

uint64_t sub_1CCFFA248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t *a7, uint64_t a8, char a9)
{
  uint64_t v1455 = *MEMORY[0x1E4F143B8];
  uint64_t v1450 = a2;
  uint64_t v1451 = a3;
  unint64_t v15 = *(unsigned int *)(a4 + 8);
  unsigned int v1447 = v15;
  if (v15 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v1446);
  }
  unsigned int v1449 = v15;
  unint64_t v1446 = 0;
  unint64_t v1448 = 0;
  if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
    MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
  }
  *a6 = v1446;
  *((_DWORD *)a6 + 2) = v1447;
  unsigned int v1447 = 0;
  uint64_t v16 = a6 + 2;
  if (*((_DWORD *)a6 + 6) >= 0x41u && *v16) {
    MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
  }
  a6[2] = v1448;
  *((_DWORD *)a6 + 6) = v1449;
  uint64_t v17 = v1450;
  unint64_t v18 = (unsigned __int8 *)(*(void *)(v1450 + 40) + 16 * v1451);
  if (*v18)
  {
    if (*v18 - 120 < 0x33) {
      return 0;
    }
  }
  else if (*(unsigned char *)(*((void *)v18 + 1) + 8) == 19)
  {
    return 0;
  }
  v1406 = (void **)(a6 + 2);
  uint64_t v1407 = a1;
  v1408 = a7;
  int v20 = *(unsigned __int8 *)(*(void *)(**(void **)(*a7 + 40) + 40) + 272);
  uint64_t v21 = *(unsigned int *)(a5 + 8);
  unsigned int v1445 = *(_DWORD *)(a4 + 8);
  if (v1445 > 0x40) {
    operator new[]();
  }
  unint64_t v1444 = *(void *)a4;
  unsigned int v1443 = v21;
  if (v21 > 0x40) {
    operator new[]();
  }
  unint64_t v1442 = *(void *)a5;
  uint64_t v22 = *(unsigned __int8 **)(v1450 + 64);
  v1440 = v22;
  uint64_t v23 = v1450;
  if (v22)
  {
    llvm::MetadataTracking::track((uint64_t)&v1440, v22, 2);
    uint64_t v23 = v1450;
  }
  int v1441 = *(_DWORD *)(v17 + 60);
  int v24 = *(unsigned __int16 *)(v23 + 24);
  switch(v24)
  {
    case 51:
      goto LABEL_61;
    case 12:
      uint64_t v31 = *(void *)(v23 + 80);
      unint64_t v33 = *(void **)(v31 + 32);
      BOOL v32 = (llvm::detail::DoubleAPFloat *)(v31 + 32);
      if (v33 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v32, (llvm::APInt *)&v1452);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v32, (uint64_t)&v1452);
      }
      int v34 = DWORD2(v1452);
      unsigned int v1447 = DWORD2(v1452);
      if (DWORD2(v1452) > 0x40) {
        operator new[]();
      }
      if (DWORD2(v1452)) {
        unint64_t v35 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1452);
      }
      else {
        unint64_t v35 = 0;
      }
      unint64_t v36 = v35 & ~(void)v1452;
      int v37 = DWORD2(v1452);
      unint64_t v38 = v1452;
      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
        MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
      }
      *a6 = v36;
      *((_DWORD *)a6 + 2) = v34;
      if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
        MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
      }
      a6[2] = v38;
      *((_DWORD *)a6 + 6) = v37;
      if (DWORD2(v1452) < 0x41) {
        goto LABEL_61;
      }
      unint64_t v39 = v1452;
      if (!(void)v1452) {
        goto LABEL_61;
      }
      goto LABEL_33;
    case 11:
      uint64_t v25 = *(void *)(v23 + 80);
      unsigned int v26 = *(_DWORD *)(v25 + 32);
      unsigned int v1447 = v26;
      if (v26 > 0x40) {
        operator new[]();
      }
      if (v26) {
        unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
      }
      else {
        unint64_t v27 = 0;
      }
      unint64_t v28 = v27 & ~*(void *)(v25 + 24);
      unsigned int v29 = *(_DWORD *)(v25 + 32);
      if (v29 > 0x40) {
        operator new[]();
      }
      unint64_t v30 = *(void *)(v25 + 24);
      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
        MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
      }
      *a6 = v28;
      *((_DWORD *)a6 + 2) = v26;
      if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
        MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
      }
      uint64_t v19 = 0;
      a6[2] = v30;
      *((_DWORD *)a6 + 6) = v29;
      goto LABEL_62;
  }
  uint64_t v40 = *v1408;
  uint64_t v41 = *(void *)(**(void **)(*v1408 + 40) + 40);
  uint64_t v42 = *(void *)(v23 + 48);
  uint64_t v43 = *(void *)(v23 + 40) + 16 * v1451;
  size_t v44 = *(llvm **)v43;
  int v45 = *(const llvm::KnownBits **)(v43 + 8);
  v1438 = *(llvm **)v43;
  v1439 = v45;
  if (v42) {
    LOBYTE(v42) = *(void *)(v42 + 32) == 0;
  }
  if (v42 & 1) != 0 || (a9)
  {
    uint64_t v46 = *(unsigned int *)(a4 + 8);
    char v47 = *(void **)a4;
    if (v46 >= 0x41)
    {
      int v48 = 0;
      int64_t v49 = (unint64_t)(v46 + 63) >> 6;
      do
      {
        BOOL v50 = v49-- < 1;
        if (v50) {
          break;
        }
        unint64_t v51 = v47[v49];
        v48 += __clz(v51);
      }
      while (!v51);
      int v52 = v46 | 0xFFFFFFC0;
      if ((v46 & 0x3F) == 0) {
        int v52 = 0;
      }
      if ((v46 - v48 - v52) > 0x40)
      {
LABEL_51:
        uint64_t v53 = *(unsigned int *)(a5 + 8);
        int v54 = *(void **)a5;
        if (v53 >= 0x41)
        {
          int v55 = 0;
          int64_t v56 = (unint64_t)(v53 + 63) >> 6;
          do
          {
            BOOL v50 = v56-- < 1;
            if (v50) {
              break;
            }
            unint64_t v57 = v54[v56];
            v55 += __clz(v57);
          }
          while (!v57);
          int v58 = v53 | 0xFFFFFFC0;
          if ((v53 & 0x3F) == 0) {
            int v58 = 0;
          }
          if ((v53 - v55 - v58) > 0x40)
          {
LABEL_60:
            if (a8 > 5) {
              goto LABEL_61;
            }
            goto LABEL_92;
          }
          int v54 = (void *)*v54;
        }
        if (v54) {
          goto LABEL_60;
        }
LABEL_104:
        int v79 = v1451;
        uint64_t v80 = sub_1CD3DD4D8(v40, v44, (uint64_t)v45);
        v1408[2] = v23;
        *((_DWORD *)v1408 + 6) = v79;
        v1408[4] = (uint64_t)v80;
        *((_DWORD *)v1408 + 10) = v81;
        uint64_t v19 = 1;
        goto LABEL_62;
      }
      char v47 = (void *)*v47;
    }
    if (!v47) {
      goto LABEL_104;
    }
    goto LABEL_51;
  }
  if (a8)
  {
    sub_1CCFCE670(v40, v23, v1451, (unsigned int *)&v1442, a8, (uint64_t)&v1446);
    if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
      MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
    }
    *a6 = v1446;
    *((_DWORD *)a6 + 2) = v1447;
    unsigned int v1447 = 0;
    if (*((_DWORD *)a6 + 6) < 0x41u || !*v1406)
    {
      a6[2] = v1448;
      *((_DWORD *)a6 + 6) = v1449;
      goto LABEL_61;
    }
    MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
    unsigned int v1038 = v1447;
    a6[2] = v1448;
    *((_DWORD *)a6 + 6) = v1449;
    unsigned int v1449 = 0;
    if (v1038 < 0x41) {
      goto LABEL_61;
    }
    unint64_t v39 = v1446;
    if (!v1446) {
      goto LABEL_61;
    }
LABEL_33:
    MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
LABEL_61:
    uint64_t v19 = 0;
    goto LABEL_62;
  }
  unsigned int v1447 = v15;
  if (v15) {
    unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
  }
  else {
    unint64_t v63 = 0;
  }
  unint64_t v1446 = v63;
  if (v1445 >= 0x41 && v1444) {
    MEMORY[0x1D25D9CB0](v1444, 0x1000C8000313F17);
  }
  unint64_t v1444 = v1446;
  unsigned int v1445 = v1447;
  unsigned int v1447 = v21;
  if (v21) {
    unint64_t v64 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
  }
  else {
    unint64_t v64 = 0;
  }
  unint64_t v1446 = v64;
  if (v1443 >= 0x41 && v1442) {
    MEMORY[0x1D25D9CB0](v1442, 0x1000C8000313F17);
  }
  unint64_t v1442 = v1446;
  unsigned int v1443 = v1447;
  uint64_t v23 = v1450;
  int v24 = *(unsigned __int16 *)(v1450 + 24);
LABEL_92:
  unsigned int v1447 = 1;
  unint64_t v1446 = 0;
  unsigned int v1449 = 1;
  unint64_t v1448 = 0;
  if (v24 > 57)
  {
    uint64_t v65 = v41 + 272;
    switch(v24)
    {
      case 146:
        uint64_t v76 = *v1408;
        uint64_t v78 = v1451;
        uint64_t v77 = v23;
        goto LABEL_161;
      case 147:
        uint64_t v398 = *(void *)(v23 + 32);
        int v399 = *(void **)v398;
        uint64_t v400 = *(void *)(v398 + 8);
        *(_OWORD *)v1409 = *(_OWORD *)(v398 + 40);
        uint64_t v401 = *(void *)(v398 + 80);
        int v402 = *(unsigned __int16 *)(v401 + 24);
        if (v402 != 35 && v402 != 11) {
          uint64_t v401 = 0;
        }
        long long v1437 = *(_OWORD *)(v399[5] + 16 * v400);
        uint64_t v404 = v1443;
        LODWORD(v1433) = v1443;
        if (v1443 > 0x40) {
          operator new[]();
        }
        unint64_t v405 = v1442;
        v1432 = (long long *)v1442;
        if (!v401) {
          goto LABEL_823;
        }
        uint64_t v622 = *(void *)(v401 + 80);
        v623 = (void *)(v622 + 24);
        unsigned int v624 = sub_1CD3DB440((llvm::EVT *)&v1437, (const char *)v44);
        uint64_t v625 = *(unsigned int *)(v622 + 32);
        if (v625 < 0x41) {
          goto LABEL_839;
        }
        int v626 = 0;
        int64_t v627 = (unint64_t)(v625 + 63) >> 6;
        do
        {
          BOOL v50 = v627-- < 1;
          if (v50) {
            break;
          }
          unint64_t v628 = *(void *)(*v623 + 8 * v627);
          v626 += __clz(v628);
        }
        while (!v628);
        int v629 = v625 | 0xFFFFFFC0;
        if ((v625 & 0x3F) == 0) {
          int v629 = 0;
        }
        if ((v625 - v626 - v629) <= 0x40)
        {
          v623 = (void *)*v623;
LABEL_839:
          if (*v623 < (unint64_t)v624)
          {
            uint64_t v630 = *(void *)(v401 + 80);
            v631 = (void *)(v630 + 24);
            if (*(_DWORD *)(v630 + 32) >= 0x41u) {
              v631 = (void *)*v631;
            }
            v632 = (void *)*v631;
            uint64_t v633 = 1 << *v631;
            uint64_t v634 = ~v633;
            uint64_t v635 = v632 >> 6;
            if (v404 > 0x40)
            {
              *(void *)(v405 + 8 * v635) &= v634;
            }
            else
            {
              v405 &= v634;
              v1432 = (long long *)v405;
            }
            v693 = (unint64_t *)(v1442 + 8 * v635);
            if (v1443 < 0x41) {
              v693 = &v1442;
            }
            if ((*v693 & v633) == 0)
            {
              int v694 = v1451;
              v1408[2] = v1450;
              *((_DWORD *)v1408 + 6) = v694;
              v1408[4] = (uint64_t)v399;
              *((_DWORD *)v1408 + 10) = v400;
              uint64_t v19 = 1;
              goto LABEL_1367;
            }
          }
        }
LABEL_823:
        uint64_t v19 = 1;
        DWORD2(v1452) = 1;
        *(void *)&long long v1452 = 0;
        unsigned int v1454 = 1;
        unint64_t v1453 = 0;
        unsigned int v620 = sub_1CD7878C0((unsigned int *)v1409, (uint64_t)v44, (BOOL)v45);
        llvm::APInt::zextOrTrunc((uint64_t *)&v1444, v620, (uint64_t)&v1430);
        uint64_t v621 = (a8 + 1);
        if (sub_1CD80E454(v1407, *(void *)v1409, *(void *)&v1409[2], &v1430, &v1452, v1408, v621, 0)) {
          goto LABEL_1362;
        }
        sub_1CC17EE08((unint64_t)&v1452, v15, (uint64_t)__src);
        if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
          MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
        }
        *a6 = (unint64_t)__src[0];
        *((_DWORD *)a6 + 2) = __src[1];
        LODWORD(__src[1]) = 0;
        if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406)
        {
          MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
          unsigned int v1318 = __src[1];
          a6[2] = v1435;
          *((_DWORD *)a6 + 6) = v1436;
          unsigned int v1436 = 0;
          if (v1318 >= 0x41 && __src[0]) {
            MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
          }
        }
        else
        {
          a6[2] = v1435;
          *((_DWORD *)a6 + 6) = v1436;
        }
        LODWORD(__src[1]) = 1;
        __src[0] = 0;
        unsigned int v1436 = 1;
        unint64_t v1435 = 0;
        uint64_t v19 = sub_1CCFFA248(v1407, v399, v400, &v1444, &v1432, __src, v1408, v621, 0);
        if (v19) {
          goto LABEL_1360;
        }
        if (v404 <= 0x40)
        {
          if (!v405) {
            goto LABEL_1360;
          }
          goto LABEL_1355;
        }
        int v895 = 0;
        int64_t v896 = (unint64_t)(v404 + 63) >> 6;
        do
        {
          BOOL v50 = v896-- < 1;
          if (v50) {
            break;
          }
          unint64_t v897 = *(void *)(v405 + 8 * v896);
          v895 += __clz(v897);
        }
        while (!v897);
        int v898 = v404 | 0xFFFFFFC0;
        if ((v404 & 0x3F) == 0) {
          int v898 = 0;
        }
        if (v895 + v898 != v404)
        {
LABEL_1355:
          unsigned int v899 = *((_DWORD *)a6 + 2);
          if (v899 > 0x40) {
            operator new[]();
          }
          uint64_t v900 = (unint64_t)__src[0] & *a6;
          unsigned int v901 = *((_DWORD *)a6 + 6);
          if (v901 > 0x40) {
            operator new[]();
          }
          unint64_t v902 = v1435 & (unint64_t)*v1406;
          if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
            MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
          }
          *a6 = v900;
          *((_DWORD *)a6 + 2) = v899;
          if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
            MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
          }
          a6[2] = v902;
          *((_DWORD *)a6 + 6) = v901;
        }
LABEL_1360:
        if (v1436 >= 0x41 && v1435) {
          MEMORY[0x1D25D9CB0](v1435, 0x1000C8000313F17);
        }
        if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
          MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
        }
LABEL_1362:
        if (v1431 >= 0x41 && v1430) {
          MEMORY[0x1D25D9CB0](v1430, 0x1000C8000313F17);
        }
        if (v1454 >= 0x41 && v1453) {
          MEMORY[0x1D25D9CB0](v1453, 0x1000C8000313F17);
        }
        if (DWORD2(v1452) >= 0x41 && (void)v1452) {
          MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
        }
LABEL_1367:
        if (v404 >= 0x41 && v405) {
          MEMORY[0x1D25D9CB0](v405, 0x1000C8000313F17);
        }
        goto LABEL_2020;
      case 148:
        uint64_t v357 = *(void *)(v23 + 32);
        *(_OWORD *)v1409 = *(_OWORD *)v357;
        uint64_t v358 = *(void *)(v357 + 40);
        uint64_t v359 = *(void *)(v357 + 48);
        long long v1452 = *(_OWORD *)(*(void *)(*(void *)v1409 + 40) + 16 * v1409[2]);
        unint64_t v360 = sub_1CC4A0738((llvm::EVT *)&v1452);
        unsigned int v363 = sub_1CD7878C0((unsigned int *)v1409, v361, v362);
        if (HIDWORD(v360) == 1) {
          goto LABEL_1590;
        }
        unsigned int v364 = v363;
        DWORD2(v1437) = v360;
        if (v360 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v1437);
        }
        unint64_t v365 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v360;
        if (!v360) {
          unint64_t v365 = 0;
        }
        *(void *)&long long v1437 = v365;
        int v366 = *(unsigned __int16 *)(v358 + 24);
        if (v366 != 35 && v366 != 11) {
          goto LABEL_1017;
        }
        uint64_t v368 = *(void *)(v358 + 80);
        uint64_t v369 = *(unsigned int *)(v368 + 32);
        if (v369 < 0x41)
        {
          unint64_t v370 = *(void *)(v368 + 24);
          goto LABEL_1012;
        }
        int v722 = 0;
        int64_t v723 = (unint64_t)(v369 + 63) >> 6;
        do
        {
          BOOL v50 = v723-- < 1;
          if (v50) {
            break;
          }
          unint64_t v724 = *(void *)(*(void *)(v368 + 24) + 8 * v723);
          v722 += __clz(v724);
        }
        while (!v724);
        int v725 = v369 | 0xFFFFFFC0;
        if ((v369 & 0x3F) == 0) {
          int v725 = 0;
        }
        if ((v369 - v722 - v725) < 0x41)
        {
          unint64_t v370 = **(void **)(v368 + 24);
LABEL_1012:
          if (v370 < v360)
          {
            DWORD2(v1452) = v360;
            if (DWORD2(v1437) >= 0x41 && (void)v1437) {
              MEMORY[0x1D25D9CB0](v1437, 0x1000C8000313F17);
            }
            *(void *)&long long v1437 = 1 << v370;
            DWORD2(v1437) = v360;
          }
        }
LABEL_1017:
        LODWORD(v1433) = v1445;
        if (v1445 > 0x40) {
          operator new[]();
        }
        v1432 = (long long *)v1444;
        if (v15 > v364)
        {
          if (v364 > 0x40)
          {
            if (v1445 != v364) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v1452, (uint64_t)&v1432);
          }
          else
          {
            DWORD2(v1452) = v364;
            unint64_t v726 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v364;
            if (!v364) {
              unint64_t v726 = 0;
            }
            *(void *)&long long v1452 = v726 & v1444;
          }
          if (v1433 >= 0x41 && v1432) {
            MEMORY[0x1D25D9CB0](v1432, 0x1000C8000313F17);
          }
          v1432 = (long long *)v1452;
          LODWORD(v1433) = DWORD2(v1452);
        }
        uint64_t v727 = (a8 + 1);
        char v327 = 0;
        if (sub_1CCFFA248(v1407, *(void *)v1409, *(void *)&v1409[2], &v1432, &v1437, &v1446, v1408, v727, 0)) {
          goto LABEL_1458;
        }
        int v728 = v1433;
        if (!v1433) {
          goto LABEL_1340;
        }
        if (v1433 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1432) != v728) {
            goto LABEL_1443;
          }
        }
        else if (v1432 != (long long *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1433))
        {
          goto LABEL_1443;
        }
LABEL_1340:
        int v893 = DWORD2(v1437);
        if (!DWORD2(v1437)) {
          goto LABEL_1447;
        }
        if (DWORD2(v1437) > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1437) == v893) {
            goto LABEL_1447;
          }
        }
        else if ((void)v1437 == 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1437))
        {
          goto LABEL_1447;
        }
LABEL_1443:
        v938 = sub_1CD005E7C((unsigned int *)v1407, *(uint64_t *)v1409, *(BOOL *)&v1409[2], (uint64_t)&v1432, (unsigned int *)&v1437, *v1408, v727);
        if (v938)
        {
          uint64_t v941 = *(void *)(*v1408 + 832);
          if (v941) {
            LOWORD(v941) = *(_WORD *)(v941 + 8);
          }
          v942 = sub_1CCFDED5C(*v1408, *(unsigned __int16 *)(v1450 + 24), (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, (uint64_t)v938, v939, v940, v358, v359, v941);
          char v327 = 0;
          int v943 = v1451;
          v1408[2] = v1450;
          *((_DWORD *)v1408 + 6) = v943;
          v1408[4] = (uint64_t)v942;
          *((_DWORD *)v1408 + 10) = v944;
          goto LABEL_1458;
        }
LABEL_1447:
        unsigned int v945 = v1447;
        if (*((_DWORD *)a6 + 2) > 0x40u || v1447 > 0x40)
        {
          if (&v1446 != a6)
          {
            llvm::APInt::reallocate((uint64_t)a6, v1447);
            uint64_t v1319 = *((unsigned int *)a6 + 2);
            if (v1319 <= 0x40) {
              *a6 = v1446;
            }
            else {
              memcpy((void *)*a6, (const void *)v1446, ((unint64_t)(v1319 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
        }
        else
        {
          *a6 = v1446;
          *((_DWORD *)a6 + 2) = v945;
        }
        unsigned int v946 = v1449;
        if (*((_DWORD *)a6 + 6) > 0x40u || v1449 > 0x40)
        {
          if (&v1446 != a6)
          {
            llvm::APInt::reallocate((uint64_t)v1406, v1449);
            uint64_t v1320 = *((unsigned int *)a6 + 6);
            if (v1320 <= 0x40) {
              *v1406 = (void *)v1448;
            }
            else {
              memcpy(*v1406, (const void *)v1448, ((unint64_t)(v1320 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
        }
        else
        {
          a6[2] = v1448;
          *((_DWORD *)a6 + 6) = v946;
        }
        if (v15 > v364)
        {
          unint64_t v947 = *a6;
          DWORD2(v1452) = v15;
          unint64_t v948 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
          *(void *)&long long v1452 = v947 & v948;
          unint64_t v949 = a6[2] & v948;
          unint64_t v950 = v947 & v948;
          if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
            MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
          }
          *a6 = v950;
          *((_DWORD *)a6 + 2) = v15;
          if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
            MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
          }
          a6[2] = v949;
          *((_DWORD *)a6 + 6) = v15;
        }
        goto LABEL_1457;
      case 149:
        uint64_t v377 = *((unsigned int *)a6 + 2);
        if (v377 > 0x40)
        {
          memset((void *)*a6, 255, ((unint64_t)(v377 + 63) >> 3) & 0x3FFFFFF8);
          LODWORD(v377) = *((_DWORD *)a6 + 2);
        }
        else
        {
          *a6 = -1;
        }
        uint64_t v378 = v1407;
        if (!v377)
        {
          unint64_t v379 = 0;
          goto LABEL_492;
        }
        unint64_t v379 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v377;
        if (v377 < 0x41)
        {
LABEL_492:
          char v380 = a6;
          goto LABEL_493;
        }
        char v380 = (unint64_t *)(*a6 + 8 * ((((unint64_t)v377 + 63) >> 6) - 1));
LABEL_493:
        *v380 &= v379;
        uint64_t v381 = *((unsigned int *)a6 + 6);
        if (v381 > 0x40)
        {
          memset((void *)a6[2], 255, ((unint64_t)(v381 + 63) >> 3) & 0x3FFFFFF8);
          LODWORD(v381) = *((_DWORD *)a6 + 6);
          if (v381)
          {
LABEL_495:
            unint64_t v382 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v381;
            if (v381 < 0x41)
            {
LABEL_496:
              uint64_t v383 = a6 + 2;
              goto LABEL_497;
            }
            uint64_t v383 = (char *)*v1406 + 8 * (((unint64_t)v381 + 63) >> 6) - 8;
LABEL_497:
            *v383 &= v382;
            long long v1452 = *(_OWORD *)(*(void *)(**(void **)(v1450 + 32) + 40)
                              + 16 * *(unsigned int *)(*(void *)(v1450 + 32) + 8));
            uint64_t v384 = *(unsigned __int16 *)(v1450 + 56);
            unsigned int v385 = sub_1CD3DB440((llvm::EVT *)&v1452, (const char *)v44);
            if (v384)
            {
              unsigned int v386 = v385;
              uint64_t v387 = 0;
              uint64_t v388 = (a8 + 1);
              while (1)
              {
                llvm::APInt::extractBits((uint64_t)&v1442, v386, v386 * v387, (uint64_t)__src);
                LOBYTE(v1378) = 0;
                if (sub_1CCFFA248(v378, *(void *)(*(void *)(v1450 + 32) + 40 * v387), *(void *)(*(void *)(v1450 + 32) + 40 * v387 + 8), &v1444, __src, &v1446, v1408, v388, v1378))
                {
                  if (LODWORD(__src[1]) < 0x41 || !__src[0]) {
                    goto LABEL_2019;
                  }
LABEL_358:
                  MEMORY[0x1D25D9CB0]();
                  goto LABEL_2019;
                }
                if (LODWORD(__src[1]) > 0x40) {
                  break;
                }
                if (__src[0]) {
                  goto LABEL_509;
                }
LABEL_517:
                if (++v387 == v384) {
                  goto LABEL_1555;
                }
              }
              int v389 = 0;
              int64_t v390 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
              uint64_t v391 = __src[0];
              do
              {
                BOOL v50 = v390-- < 1;
                if (v50) {
                  break;
                }
                unint64_t v392 = *((void *)__src[0] + v390);
                v389 += __clz(v392);
              }
              while (!v392);
              unsigned int v393 = LODWORD(__src[1]) | 0xFFFFFFC0;
              if (((uint64_t)__src[1] & 0x3F) == 0) {
                unsigned int v393 = 0;
              }
              if (v389 + v393 != LODWORD(__src[1]))
              {
LABEL_509:
                unsigned int v394 = *((_DWORD *)a6 + 2);
                if (v394 > 0x40) {
                  operator new[]();
                }
                unint64_t v395 = v1446 & *a6;
                unsigned int v396 = *((_DWORD *)a6 + 6);
                if (v396 > 0x40) {
                  operator new[]();
                }
                unint64_t v397 = v1448 & (unint64_t)*v1406;
                if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
                  MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
                }
                *a6 = v395;
                *((_DWORD *)a6 + 2) = v394;
                if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
                  MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
                }
                a6[2] = v397;
                *((_DWORD *)a6 + 6) = v396;
                uint64_t v378 = v1407;
                if (LODWORD(__src[1]) < 0x41) {
                  goto LABEL_517;
                }
                uint64_t v391 = __src[0];
              }
              if (v391) {
                MEMORY[0x1D25D9CB0](v391, 0x1000C8000313F17);
              }
              goto LABEL_517;
            }
            goto LABEL_1555;
          }
        }
        else
        {
          *v1406 = (void *)-1;
          if (v381) {
            goto LABEL_495;
          }
        }
        unint64_t v382 = 0;
        goto LABEL_496;
      case 150:
        uint64_t v371 = *(void *)(v23 + 32);
        *(_OWORD *)v1409 = *(_OWORD *)v371;
        long long v1437 = *(_OWORD *)(v371 + 40);
        uint64_t v372 = *(void *)(*(void *)(v371 + 80) + 80);
        unint64_t v373 = (void *)(v372 + 24);
        if (*(_DWORD *)(v372 + 32) >= 0x41u) {
          unint64_t v373 = (void *)*v373;
        }
        unsigned int v374 = *(_DWORD *)v373;
        uint64_t v375 = v1437;
        long long v1452 = *(_OWORD *)(*(void *)(v1437 + 40) + 16 * DWORD2(v1437));
        unsigned int v376 = sub_1CD3DB440((llvm::EVT *)&v1452, (const char *)v44);
        llvm::APInt::extractBits((uint64_t)&v1442, v376, v374, (uint64_t)&v1432);
        LODWORD(v1431) = v1443;
        if (v1443 > 0x40) {
          operator new[]();
        }
        unint64_t v1430 = v1442;
        DWORD2(v1452) = v376;
        if (v376 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v1452);
        }
        *(void *)&long long v1452 = 0;
        llvm::APInt::insertBits((void **)&v1430, (const llvm::APInt *)&v1452, v374);
        if (DWORD2(v1452) >= 0x41 && (void)v1452) {
          MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
        }
        DWORD2(v1452) = 1;
        *(void *)&long long v1452 = 0;
        unsigned int v1454 = 1;
        unint64_t v1453 = 0;
        LODWORD(__src[1]) = 1;
        __src[0] = 0;
        unsigned int v1436 = 1;
        unint64_t v1435 = 0;
        uint64_t v610 = (a8 + 1);
        uint64_t v611 = *((void *)&v1437 + 1);
        char v240 = 0;
        if (sub_1CCFFA248(v1407, v375, *((void *)&v1437 + 1), &v1444, &v1432, &v1452, v1408, v610, 0)) {
          goto LABEL_1544;
        }
        uint64_t v612 = *(void *)&v1409[2];
        LOBYTE(v1382) = 0;
        uint64_t v613 = *(void *)v1409;
        char v240 = 0;
        if (sub_1CCFFA248(v1407, *(void *)v1409, *(void *)&v1409[2], &v1444, &v1430, __src, v1408, v610, v1382)) {
          goto LABEL_1544;
        }
        uint64_t v614 = *((unsigned int *)a6 + 2);
        if (v614 > 0x40)
        {
          memset((void *)*a6, 255, ((unint64_t)(v614 + 63) >> 3) & 0x3FFFFFF8);
          LODWORD(v614) = *((_DWORD *)a6 + 2);
          if (v614)
          {
LABEL_812:
            unint64_t v615 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v614;
            if (v614 < 0x41)
            {
LABEL_813:
              v616 = a6;
              goto LABEL_814;
            }
            v616 = (unint64_t *)(*a6
                                      + 8 * ((((unint64_t)v614 + 63) >> 6) - 1));
LABEL_814:
            *v616 &= v615;
            uint64_t v617 = *((unsigned int *)a6 + 6);
            if (v617 > 0x40)
            {
              memset((void *)a6[2], 255, ((unint64_t)(v617 + 63) >> 3) & 0x3FFFFFF8);
              LODWORD(v617) = *((_DWORD *)a6 + 6);
              if (v617)
              {
LABEL_816:
                unint64_t v618 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v617;
                if (v617 >= 0x41)
                {
                  v619 = (char *)*v1406 + 8 * (((unint64_t)v617 + 63) >> 6) - 8;
LABEL_818:
                  *v619 &= v618;
                  if (v1433 > 0x40)
                  {
                    int v778 = 0;
                    int64_t v779 = ((unint64_t)v1433 + 63) >> 6;
                    do
                    {
                      BOOL v50 = v779-- < 1;
                      if (v50) {
                        break;
                      }
                      unint64_t v780 = *((void *)v1432 + v779);
                      v778 += __clz(v780);
                    }
                    while (!v780);
                    int v781 = v1433 | 0xFFFFFFC0;
                    if ((v1433 & 0x3F) == 0) {
                      int v781 = 0;
                    }
                    if (v778 + v781 == v1433)
                    {
LABEL_1156:
                      if (v1431 > 0x40)
                      {
                        int v786 = 0;
                        int64_t v787 = ((unint64_t)v1431 + 63) >> 6;
                        do
                        {
                          BOOL v50 = v787-- < 1;
                          if (v50) {
                            break;
                          }
                          unint64_t v788 = *(void *)(v1430 + 8 * v787);
                          v786 += __clz(v788);
                        }
                        while (!v788);
                        int v789 = v1431 | 0xFFFFFFC0;
                        if ((v1431 & 0x3F) == 0) {
                          int v789 = 0;
                        }
                        if (v786 + v789 == v1431)
                        {
LABEL_1170:
                          unsigned int v794 = v1445;
                          if (v1445)
                          {
                            if (v1445 > 0x40)
                            {
                              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1444) != v794) {
                                goto LABEL_1535;
                              }
                            }
                            else if (v1444 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1445)
                            {
                              goto LABEL_1535;
                            }
                          }
                          int v894 = v1433;
                          if (v1433)
                          {
                            if (v1433 > 0x40)
                            {
                              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1432) != v894) {
                                goto LABEL_1535;
                              }
                            }
                            else if (v1432 != (long long *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v1433))
                            {
                              goto LABEL_1535;
                            }
                          }
                          int v952 = v1431;
                          if (!v1431) {
                            goto LABEL_1543;
                          }
                          if (v1431 > 0x40)
                          {
                            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1430) == v952) {
                              goto LABEL_1543;
                            }
                          }
                          else if (v1430 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1431)
                          {
                            goto LABEL_1543;
                          }
LABEL_1535:
                          v971 = sub_1CD005E7C((unsigned int *)v1407, v375, v611, (uint64_t)&v1444, (unsigned int *)&v1432, *v1408, v610);
                          v1428 = v971;
                          uint64_t v1429 = v972;
                          v973 = sub_1CD005E7C((unsigned int *)v1407, v613, v612, (uint64_t)&v1444, (unsigned int *)&v1430, *v1408, v610);
                          v1426 = v973;
                          uint64_t v1427 = v975;
                          if ((unint64_t)v971 | (unint64_t)v973)
                          {
                            v976 = (uint64_t *)&v1437;
                            if (v971) {
                              v976 = (uint64_t *)&v1428;
                            }
                            uint64_t v977 = *v976;
                            LODWORD(v1429) = *((_DWORD *)v976 + 2);
                            v1428 = (uint64_t *)v977;
                            v978 = &v1426;
                            if (!v973) {
                              v978 = v1409;
                            }
                            v979 = *(void **)v978;
                            LODWORD(v1427) = v978[2];
                            v1426 = v979;
                            uint64_t v980 = *(void *)(v1450 + 32);
                            uint64_t v981 = *(void *)(v980 + 80);
                            uint64_t v982 = *(void *)(v980 + 88);
                            uint64_t v983 = *(void *)(*v1408 + 832);
                            if (v983) {
                              LOWORD(v983) = *(_WORD *)(v983 + 8);
                            }
                            v984 = sub_1CD7F5D38((void *)*v1408, (const char *)*(unsigned __int16 *)(v1450 + 24), (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, (uint64_t)v979, v1427, v974, v977, v1429, v981, v982, SHIDWORD(v982), v983);
                            char v240 = 0;
                            int v985 = v1451;
                            v1408[2] = v1450;
                            *((_DWORD *)v1408 + 6) = v985;
                            v1408[4] = (uint64_t)v984;
                            *((_DWORD *)v1408 + 10) = v986;
LABEL_1544:
                            if (v1436 >= 0x41 && v1435) {
                              MEMORY[0x1D25D9CB0](v1435, 0x1000C8000313F17);
                            }
                            if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
                              MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
                            }
                            if (v1454 >= 0x41 && v1453) {
                              MEMORY[0x1D25D9CB0](v1453, 0x1000C8000313F17);
                            }
                            if (DWORD2(v1452) >= 0x41 && (void)v1452) {
                              MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
                            }
                            if (v1431 >= 0x41 && v1430) {
                              MEMORY[0x1D25D9CB0](v1430, 0x1000C8000313F17);
                            }
                            if (v1433 >= 0x41)
                            {
                              unsigned int v431 = v1432;
                              if (v1432) {
                                goto LABEL_1553;
                              }
                            }
                            goto LABEL_1554;
                          }
LABEL_1543:
                          char v240 = 1;
                          goto LABEL_1544;
                        }
                      }
                      else if (!v1430)
                      {
                        goto LABEL_1170;
                      }
                      unsigned int v790 = *((_DWORD *)a6 + 2);
                      if (v790 > 0x40) {
                        operator new[]();
                      }
                      uint64_t v791 = (unint64_t)__src[0] & *a6;
                      unsigned int v792 = *((_DWORD *)a6 + 6);
                      if (v792 > 0x40) {
                        operator new[]();
                      }
                      unint64_t v793 = v1435 & (unint64_t)*v1406;
                      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
                        MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
                      }
                      *a6 = v791;
                      *((_DWORD *)a6 + 2) = v790;
                      if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
                        MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
                      }
                      a6[2] = v793;
                      *((_DWORD *)a6 + 6) = v792;
                      goto LABEL_1170;
                    }
                  }
                  else if (!v1432)
                  {
                    goto LABEL_1156;
                  }
                  unsigned int v782 = *((_DWORD *)a6 + 2);
                  if (v782 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v783 = v1452 & *a6;
                  unsigned int v784 = *((_DWORD *)a6 + 6);
                  if (v784 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v785 = v1453 & (unint64_t)*v1406;
                  if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
                    MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
                  }
                  *a6 = v783;
                  *((_DWORD *)a6 + 2) = v782;
                  if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
                    MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
                  }
                  a6[2] = v785;
                  *((_DWORD *)a6 + 6) = v784;
                  goto LABEL_1156;
                }
LABEL_817:
                v619 = a6 + 2;
                goto LABEL_818;
              }
            }
            else
            {
              *v1406 = (void *)-1;
              if (v617) {
                goto LABEL_816;
              }
            }
            unint64_t v618 = 0;
            goto LABEL_817;
          }
        }
        else
        {
          *a6 = -1;
          if (v614) {
            goto LABEL_812;
          }
        }
        unint64_t v615 = 0;
        goto LABEL_813;
      case 151:
        int v140 = *(uint64_t **)(v23 + 32);
        uint64_t v141 = *v140;
        uint64_t v142 = v140[1];
        uint64_t v143 = (uint64_t *)(*(void *)(*v140 + 40) + 16 * v142);
        uint64_t v144 = *v143;
        if (*v143)
        {
          if (*v143 - 120 < 0x33) {
            goto LABEL_1555;
          }
        }
        else if (*(unsigned char *)(v143[1] + 8) == 19)
        {
          goto LABEL_1555;
        }
        uint64_t v229 = *(void *)(v140[5] + 80);
        uint64_t v230 = (void *)(v229 + 24);
        if (*(_DWORD *)(v229 + 32) >= 0x41u) {
          uint64_t v230 = (void *)*v230;
        }
        uint64_t v231 = v1408;
        int v232 = *(_DWORD *)v230;
        uint64_t v233 = v143[1];
        *(void *)&long long v1452 = v144;
        *((void *)&v1452 + 1) = v233;
        unsigned int v234 = sub_1CD3DB440((llvm::EVT *)&v1452, (const char *)v44);
        if (v1443 < v234)
        {
          unsigned int v236 = v234;
          if (v234 > 0x40) {
            operator new[]();
          }
          unint64_t v235 = v1442 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v234);
          uint64_t v231 = v1408;
        }
        else
        {
          if (v1443 > 0x40) {
            operator new[]();
          }
          unint64_t v235 = v1442;
          unsigned int v236 = v1443;
        }
        DWORD2(v1452) = v236;
        unint64_t v237 = v235 << v232;
        if (v236 == v232) {
          unint64_t v237 = 0;
        }
        if (v236) {
          unint64_t v238 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v236;
        }
        else {
          unint64_t v238 = 0;
        }
        *(void *)&long long v1452 = v238 & v237;
        if (v236 >= 0x41 && v235) {
          MEMORY[0x1D25D9CB0](v235, 0x1000C8000313F17);
        }
        uint64_t v239 = (a8 + 1);
        char v240 = 0;
        if (sub_1CCFFA248(v1407, v141, v142, &v1444, &v1452, a6, v231, v239, 0)) {
          goto LABEL_560;
        }
        unsigned int v241 = v1445;
        if (v1445)
        {
          BOOL v242 = v1445 > 0x40
               ? llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1444) == v241
               : v1444 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1445;
          v739 = v1408;
          if (!v242) {
            goto LABEL_1235;
          }
        }
        int v740 = DWORD2(v1452);
        if (!DWORD2(v1452)) {
          goto LABEL_1555;
        }
        if (DWORD2(v1452) > 0x40) {
          BOOL v741 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1452) == v740;
        }
        else {
          BOOL v741 = (void)v1452 == 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1452);
        }
        v739 = v1408;
        if (v741) {
          goto LABEL_1829;
        }
LABEL_1235:
        v837 = sub_1CD005E7C((unsigned int *)v1407, v141, v142, (uint64_t)&v1444, (unsigned int *)&v1452, *v739, v239);
        if (!v837) {
          goto LABEL_1829;
        }
        uint64_t v840 = *(void *)(v1450 + 32);
        uint64_t v841 = *(void *)(v840 + 40);
        uint64_t v842 = *(void *)(v840 + 48);
        uint64_t v843 = *(void *)(*v1408 + 832);
        if (v843) {
          LOWORD(v843) = *(_WORD *)(v843 + 8);
        }
        v844 = sub_1CCFDED5C(*v1408, *(unsigned __int16 *)(v1450 + 24), (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, (uint64_t)v837, v838, v839, v841, v842, v843);
        char v240 = 0;
        int v845 = v1451;
        v1408[2] = v1450;
        *((_DWORD *)v1408 + 6) = v845;
        v1408[4] = (uint64_t)v844;
        *((_DWORD *)v1408 + 10) = v846;
        goto LABEL_560;
      case 152:
      case 154:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 174:
      case 183:
      case 184:
      case 187:
      case 188:
      case 189:
      case 191:
      case 194:
      case 195:
      case 196:
      case 197:
      case 202:
      case 203:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
        goto LABEL_204;
      case 153:
        long long v1452 = *(_OWORD *)*(void *)(v23 + 40);
        uint64_t v352 = *(_DWORD **)(v23 + 80);
        unsigned int v353 = sub_1CD3DB440((llvm::EVT *)&v1452, (const char *)v44);
        DWORD2(v1452) = v21;
        *(void *)&long long v1452 = 0;
        LODWORD(__src[1]) = v21;
        __src[0] = 0;
        if (!v21) {
          goto LABEL_1180;
        }
        uint64_t v354 = 0;
        while (2)
        {
          size_t v355 = (unint64_t *)(v1442 + 8 * (v354 >> 6));
          if (v1443 < 0x41) {
            size_t v355 = &v1442;
          }
          if (((*v355 >> v354) & 1) == 0) {
            goto LABEL_471;
          }
          int v356 = v352[v354];
          if ((v356 & 0x80000000) == 0)
          {
            if (v356 >= (int)v21) {
              __src[0] = (void *)((unint64_t)__src[0] | (1 << (v356 - v21)));
            }
            else {
              *(void *)&long long v1452 = v1452 | (1 << v356);
            }
LABEL_471:
            if (v21 == ++v354) {
              goto LABEL_1180;
            }
            continue;
          }
          break;
        }
        *(void *)&long long v1452 = 0;
        __src[0] = 0;
LABEL_1180:
        if (!(void)v1452 && !__src[0]) {
          goto LABEL_1829;
        }
        v799 = *(_OWORD **)(v1450 + 32);
        *(_OWORD *)v1409 = *v799;
        long long v1437 = *(_OWORD *)((char *)v799 + 40);
        uint64_t v800 = *((unsigned int *)a6 + 2);
        if (v800 > 0x40)
        {
          memset((void *)*a6, 255, ((unint64_t)(v800 + 63) >> 3) & 0x3FFFFFF8);
          LODWORD(v800) = *((_DWORD *)a6 + 2);
          if (v800)
          {
LABEL_1184:
            unint64_t v801 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v800;
            if (v800 < 0x41)
            {
LABEL_1185:
              v802 = a6;
              goto LABEL_1186;
            }
            v802 = (unint64_t *)(*a6
                                      + 8 * ((((unint64_t)v800 + 63) >> 6) - 1));
LABEL_1186:
            *v802 &= v801;
            uint64_t v803 = *((unsigned int *)a6 + 6);
            if (v803 > 0x40)
            {
              memset((void *)a6[2], 255, ((unint64_t)(v803 + 63) >> 3) & 0x3FFFFFF8);
              LODWORD(v803) = *((_DWORD *)a6 + 6);
              if (v803)
              {
LABEL_1188:
                unint64_t v804 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v803;
                if (v803 >= 0x41)
                {
                  v805 = (char *)*v1406 + 8 * (((unint64_t)v803 + 63) >> 6) - 8;
LABEL_1190:
                  *v805 &= v804;
                  if (DWORD2(v1452) > 0x40)
                  {
                    int v806 = 0;
                    int64_t v807 = ((unint64_t)DWORD2(v1452) + 63) >> 6;
                    do
                    {
                      BOOL v50 = v807-- < 1;
                      if (v50) {
                        break;
                      }
                      unint64_t v808 = *(void *)(v1452 + 8 * v807);
                      v806 += __clz(v808);
                    }
                    while (!v808);
                    unsigned int v809 = DWORD2(v1452) | 0xFFFFFFC0;
                    if ((BYTE8(v1452) & 0x3F) == 0) {
                      unsigned int v809 = 0;
                    }
                    if (v806 + v809 == DWORD2(v1452)) {
                      goto LABEL_1205;
                    }
                  }
                  else if (!(void)v1452)
                  {
                    goto LABEL_1205;
                  }
                  if (sub_1CCFFA248(v1407, *(void *)v1409, *(void *)&v1409[2], &v1444, &v1452, &v1446, v1408, (a8 + 1), 0))goto LABEL_1215; {
                  unsigned int v810 = *((_DWORD *)a6 + 2);
                  }
                  if (v810 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v811 = v1446 & *a6;
                  unsigned int v812 = *((_DWORD *)a6 + 6);
                  if (v812 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v813 = v1448 & (unint64_t)*v1406;
                  if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
                    MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
                  }
                  *a6 = v811;
                  *((_DWORD *)a6 + 2) = v810;
                  if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
                    MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
                  }
                  a6[2] = v813;
                  *((_DWORD *)a6 + 6) = v812;
LABEL_1205:
                  if (LODWORD(__src[1]) > 0x40)
                  {
                    int v814 = 0;
                    int64_t v815 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
                    do
                    {
                      BOOL v50 = v815-- < 1;
                      if (v50) {
                        break;
                      }
                      unint64_t v816 = *((void *)__src[0] + v815);
                      v814 += __clz(v816);
                    }
                    while (!v816);
                    unsigned int v817 = LODWORD(__src[1]) | 0xFFFFFFC0;
                    if (((uint64_t)__src[1] & 0x3F) == 0) {
                      unsigned int v817 = 0;
                    }
                    if (v814 + v817 == LODWORD(__src[1])) {
                      goto LABEL_1221;
                    }
                  }
                  else if (!__src[0])
                  {
LABEL_1221:
                    uint64_t v822 = (a8 + 1);
                    v823 = sub_1CD005E7C((unsigned int *)v1407, *(uint64_t *)v1409, *(BOOL *)&v1409[2], (uint64_t)&v1444, (unsigned int *)&v1452, *v1408, v822);
                    v1432 = (long long *)v823;
                    uint64_t v1433 = v824;
                    unint64_t v825 = (unint64_t)sub_1CD005E7C((unsigned int *)v1407, v1437, *((BOOL *)&v1437 + 1), (uint64_t)&v1444, (unsigned int *)__src, *v1408, v822);
                    unint64_t v1430 = v825;
                    uint64_t v1431 = v826;
                    if ((unint64_t)v823 | v825)
                    {
                      v827 = (int *)&v1432;
                      if (!v823) {
                        v827 = v1409;
                      }
                      uint64_t v828 = *(void *)v827;
                      v1409[2] = v827[2];
                      *(void *)v1409 = v828;
                      v829 = &v1430;
                      if (!v825) {
                        v829 = (unint64_t *)&v1437;
                      }
                      uint64_t v830 = *v829;
                      DWORD2(v1437) = *((_DWORD *)v829 + 2);
                      *(void *)&long long v1437 = v830;
                      v831 = sub_1CCFCDA78(*v1408, v1438, (uint64_t)v1439, (uint64_t)&v1440, v828, v1409[2], v830, DWORD2(v1437), v352, v353);
                      char v240 = 0;
                      int v832 = v1451;
                      v1408[2] = v1450;
                      *((_DWORD *)v1408 + 6) = v832;
                      v1408[4] = (uint64_t)v831;
                      *((_DWORD *)v1408 + 10) = v833;
                    }
                    else
                    {
                      char v240 = 1;
                    }
LABEL_1228:
                    if (LODWORD(__src[1]) >= 0x41)
                    {
                      v834 = __src[0];
                      if (__src[0]) {
LABEL_1230:
                      }
                        MEMORY[0x1D25D9CB0](v834, 0x1000C8000313F17);
                    }
                    goto LABEL_560;
                  }
                  LOBYTE(v1378) = 0;
                  if ((sub_1CCFFA248(v1407, v1437, *((void *)&v1437 + 1), &v1444, __src, &v1446, v1408, (a8 + 1), v1378) & 1) == 0)
                  {
                    unsigned int v818 = *((_DWORD *)a6 + 2);
                    if (v818 > 0x40) {
                      operator new[]();
                    }
                    unint64_t v819 = v1446 & *a6;
                    unsigned int v820 = *((_DWORD *)a6 + 6);
                    if (v820 > 0x40) {
                      operator new[]();
                    }
                    unint64_t v821 = v1448 & (unint64_t)*v1406;
                    if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
                      MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
                    }
                    *a6 = v819;
                    *((_DWORD *)a6 + 2) = v818;
                    if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
                      MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
                    }
                    a6[2] = v821;
                    *((_DWORD *)a6 + 6) = v820;
                    goto LABEL_1221;
                  }
LABEL_1215:
                  char v240 = 0;
                  goto LABEL_1228;
                }
LABEL_1189:
                v805 = a6 + 2;
                goto LABEL_1190;
              }
            }
            else
            {
              *v1406 = (void *)-1;
              if (v803) {
                goto LABEL_1188;
              }
            }
            unint64_t v804 = 0;
            goto LABEL_1189;
          }
        }
        else
        {
          *a6 = -1;
          if (v800) {
            goto LABEL_1184;
          }
        }
        unint64_t v801 = 0;
        goto LABEL_1185;
      case 155:
        uint64_t v412 = &v1442;
        if (v1443 >= 0x41) {
          uint64_t v412 = (unint64_t *)v1442;
        }
        if ((*(unsigned char *)v412 & 1) == 0)
        {
          int v255 = v1451;
          unint64_t v139 = v1408;
          uint64_t v312 = sub_1CD3DD4D8(*v1408, v1438, (uint64_t)v1439);
          goto LABEL_415;
        }
        DWORD2(v1452) = 1;
        *(void *)&long long v1452 = 0;
        unsigned int v1454 = 1;
        unint64_t v1453 = 0;
        *(_OWORD *)v1409 = *(_OWORD *)*(void *)(v23 + 32);
        unsigned int v636 = sub_1CD7878C0((unsigned int *)v1409, (uint64_t)v44, (BOOL)v45);
        if (v1445 < v636)
        {
          if (v636 > 0x40) {
            operator new[]();
          }
          DWORD2(v1437) = v636;
          v637 = (void *)(v1444 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v636));
        }
        else
        {
          DWORD2(v1437) = v1445;
          if (v1445 > 0x40) {
            operator new[]();
          }
          v637 = (void *)v1444;
        }
        *(void *)&long long v1437 = v637;
        if (sub_1CD80E454(v1407, *(void *)v1409, *(void *)&v1409[2], &v1437, &v1452, v1408, (a8 + 1), 0))
        {
          if (DWORD2(v1437) >= 0x41 && (void)v1437) {
            MEMORY[0x1D25D9CB0](v1437, 0x1000C8000313F17);
          }
          goto LABEL_355;
        }
        unint64_t v687 = v1442;
        if (v1443 < 0x41) {
          goto LABEL_944;
        }
        int v688 = 0;
        int64_t v689 = ((unint64_t)v1443 + 63) >> 6;
        do
        {
          BOOL v50 = v689-- < 1;
          if (v50) {
            break;
          }
          unint64_t v690 = *(void *)(v1442 + 8 * v689);
          v688 += __clz(v690);
        }
        while (!v690);
        unsigned int v691 = v1443 | 0xFFFFFFC0;
        if ((v1443 & 0x3F) == 0) {
          unsigned int v691 = 0;
        }
        if (v1443 - v688 - v691 <= 0x40)
        {
          unint64_t v687 = *(void *)v1442;
LABEL_944:
          if (v687 == 1)
          {
            sub_1CC17EE08((unint64_t)&v1452, v15, (uint64_t)__src);
            if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
              MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
            }
            *a6 = (unint64_t)__src[0];
            *((_DWORD *)a6 + 2) = __src[1];
            LODWORD(__src[1]) = 0;
            if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406)
            {
              MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
              unsigned int v1333 = __src[1];
              a6[2] = v1435;
              *((_DWORD *)a6 + 6) = v1436;
              unsigned int v1436 = 0;
              if (v1333 >= 0x41 && __src[0]) {
                MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
              }
            }
            else
            {
              a6[2] = v1435;
              *((_DWORD *)a6 + 6) = v1436;
            }
          }
        }
        if (DWORD2(v1437) >= 0x41 && (void)v1437) {
          MEMORY[0x1D25D9CB0](v1437, 0x1000C8000313F17);
        }
        if (v1454 >= 0x41 && v1453) {
          MEMORY[0x1D25D9CB0](v1453, 0x1000C8000313F17);
        }
LABEL_154:
        unsigned int v119 = DWORD2(v1452);
        goto LABEL_155;
      case 169:
        int v413 = *(uint64_t **)(v23 + 32);
        uint64_t v414 = *v413;
        uint64_t v415 = v413[1];
        uint64_t v416 = v413[5];
        uint64_t v417 = v413[6];
        uint64_t v418 = (a8 + 1);
        sub_1CCFCE670(*v1408, *v413, v415, (unsigned int *)&v1442, v418, (uint64_t)&v1452);
        sub_1CCFCE670(*v1408, v416, v417, (unsigned int *)&v1442, v418, (uint64_t)__src);
        llvm::KnownBits::umin((llvm::KnownBits *)&v1452, (const llvm::KnownBits *)__src, (uint64_t)v1409);
        if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
          MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
        }
        *a6 = *(void *)v1409;
        *((_DWORD *)a6 + 2) = v1409[2];
        v1409[2] = 0;
        if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406)
        {
          MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
          unsigned int v1271 = v1409[2];
          a6[2] = v1410;
          *((_DWORD *)a6 + 6) = v1411;
          int v1411 = 0;
          if (v1271 >= 0x41 && *(void *)v1409) {
            MEMORY[0x1D25D9CB0](*(void *)v1409, 0x1000C8000313F17);
          }
        }
        else
        {
          a6[2] = v1410;
          *((_DWORD *)a6 + 6) = v1411;
        }
        unsigned __int16 v420 = llvm::KnownBits::ugt((llvm::KnownBits *)&v1452, (const llvm::KnownBits *)__src, v419);
        if (v420 >= 0x100u) {
          goto LABEL_549;
        }
        uint64_t v421 = __src;
        uint64_t v422 = (void **)&v1452;
        goto LABEL_1434;
      case 170:
        uint64_t v423 = *(uint64_t **)(v23 + 32);
        uint64_t v414 = *v423;
        uint64_t v415 = v423[1];
        uint64_t v416 = v423[5];
        uint64_t v417 = v423[6];
        uint64_t v424 = (a8 + 1);
        sub_1CCFCE670(*v1408, *v423, v415, (unsigned int *)&v1442, v424, (uint64_t)&v1452);
        sub_1CCFCE670(*v1408, v416, v417, (unsigned int *)&v1442, v424, (uint64_t)__src);
        llvm::KnownBits::umax((llvm::KnownBits *)&v1452, (const llvm::KnownBits *)__src, (uint64_t)v1409);
        if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
          MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
        }
        *a6 = *(void *)v1409;
        *((_DWORD *)a6 + 2) = v1409[2];
        v1409[2] = 0;
        if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406)
        {
          MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
          unsigned int v1272 = v1409[2];
          a6[2] = v1410;
          *((_DWORD *)a6 + 6) = v1411;
          int v1411 = 0;
          if (v1272 >= 0x41 && *(void *)v1409) {
            MEMORY[0x1D25D9CB0](*(void *)v1409, 0x1000C8000313F17);
          }
        }
        else
        {
          a6[2] = v1410;
          *((_DWORD *)a6 + 6) = v1411;
        }
        unsigned __int16 v420 = llvm::KnownBits::ugt((llvm::KnownBits *)__src, (const llvm::KnownBits *)&v1452, v425);
        if (v420 < 0x100u)
        {
          uint64_t v421 = (void **)&v1452;
          uint64_t v422 = __src;
LABEL_1434:
          unsigned __int16 v935 = llvm::KnownBits::ugt((llvm::KnownBits *)v421, (const llvm::KnownBits *)v422, v45);
          if (v935 < 0x100u)
          {
            char v240 = 1;
            goto LABEL_557;
          }
          int v426 = v935;
        }
        else
        {
LABEL_549:
          int v426 = v420 ^ 1;
        }
        char v240 = 0;
        int v427 = v1451;
        BOOL v428 = v426 == 0;
        if (v426) {
          int v429 = (void *)v414;
        }
        else {
          int v429 = (void *)v416;
        }
        if (v428) {
          int v430 = v417;
        }
        else {
          int v430 = v415;
        }
        v1408[2] = v1450;
        *((_DWORD *)v1408 + 6) = v427;
        v1408[4] = (uint64_t)v429;
        *((_DWORD *)v1408 + 10) = v430;
LABEL_557:
        if (v1436 >= 0x41 && v1435) {
          MEMORY[0x1D25D9CB0](v1435, 0x1000C8000313F17);
        }
        if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
          MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
        }
        if (v1454 < 0x41) {
          goto LABEL_560;
        }
        v834 = (void *)v1453;
        if (!v1453) {
          goto LABEL_560;
        }
        goto LABEL_1230;
      case 171:
        uint64_t v133 = *(_OWORD **)(v23 + 32);
        *(_OWORD *)unint64_t __src = *v133;
        *(_OWORD *)v1409 = *(_OWORD *)((char *)v133 + 40);
        uint64_t v134 = *(void *)v1409;
        uint64_t v122 = *(void *)&v1409[2];
        uint64_t v135 = sub_1CCFD8CD8(*(uint64_t *)v1409, v1409[2], 0, 0);
        size_t __nb = *(void *)v1409;
        if (!v135) {
          goto LABEL_1846;
        }
        uint64_t v136 = v135;
        int v137 = (int)__src[1];
        v1400 = __src[0];
        sub_1CCFCE670(*v1408, (uint64_t)__src[0], (BOOL)__src[1], (unsigned int *)&v1442, a8, (uint64_t)&v1452);
        if (DWORD2(v1452) > 0x40) {
          operator new[]();
        }
        uint64_t v245 = *(void *)(v136 + 80);
        unsigned int v246 = *(_DWORD *)(v245 + 32);
        unsigned int v1425 = v246;
        if (v246 > 0x40) {
          operator new[]();
        }
        uint64_t v247 = ~*(void *)(v245 + 24);
        unint64_t v248 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v246;
        if (!v246) {
          unint64_t v248 = 0;
        }
        unint64_t v1424 = v248 & v247;
        unsigned int v1425 = 0;
        int v261 = v1451;
        if ((v1444 & (unint64_t)v1452) == (v1444 & v248 & v247))
        {
          v1408[2] = v1450;
          *((_DWORD *)v1408 + 6) = v261;
          v1408[4] = (uint64_t)v1400;
          *((_DWORD *)v1408 + 10) = v137;
LABEL_355:
          if (v1454 >= 0x41 && v1453) {
            MEMORY[0x1D25D9CB0](v1453, 0x1000C8000313F17);
          }
LABEL_356:
          if (DWORD2(v1452) < 0x41 || !(void)v1452) {
            goto LABEL_2019;
          }
          goto LABEL_358;
        }
        int v1423 = DWORD2(v1452);
        unint64_t v608 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1452);
        if (!DWORD2(v1452)) {
          unint64_t v608 = 0;
        }
        unint64_t v1422 = v608 & ~(void)v1452;
        int v1423 = 0;
        DWORD2(v1437) = DWORD2(v1452);
        *(void *)&long long v1437 = v1444 & v1422;
        BOOL v730 = sub_1CD80DE6C(v1407, v1450, v1451, (uint64_t)&v1437, (uint64_t)&v1442, v1408);
        if (DWORD2(v1437) >= 0x41 && (void)v1437) {
          MEMORY[0x1D25D9CB0](v1437, 0x1000C8000313F17);
        }
        if (v730) {
          goto LABEL_355;
        }
        if (sub_1CD802AAC((uint64_t)__src[0], (uint64_t)__src[1], 0))
        {
          uint64_t v732 = *((void *)__src[0] + 6);
          if (v732)
          {
            int v733 = 1;
            do
            {
              if (*(_DWORD *)(v732 + 8) == LODWORD(__src[1]))
              {
                if (!v733) {
                  goto LABEL_1843;
                }
                --v733;
              }
              uint64_t v732 = *(void *)(v732 + 32);
            }
            while (v732);
            if (!v733)
            {
              uint64_t v734 = *(void *)(v136 + 80);
              unsigned int v735 = *(_DWORD *)(v734 + 32);
              unsigned int v1421 = v735;
              if (v735 > 0x40) {
                operator new[]();
              }
              uint64_t v736 = ~*(void *)(v734 + 24);
              unint64_t v737 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v735;
              if (!v735) {
                unint64_t v737 = 0;
              }
              v738 = (const void *)(v737 & v736);
              unint64_t v1420 = v737 & v736;
              unsigned int v1421 = 0;
              if (v1454 > 0x40
                 ? memcmp((const void *)v1453, v738, (((unint64_t)v1454 + 63) >> 3) & 0x3FFFFFF8) == 0
                 : v1453 == (void)v738)
              {
                v1146 = (uint64_t *)*((void *)__src[0] + 4);
                uint64_t v1147 = *v1146;
                uint64_t v1148 = v1146[1];
                uint64_t v1149 = *(void *)(*v1408 + 832);
                if (v1149) {
                  LOWORD(v1149) = *(_WORD *)(v1149 + 8);
                }
                v1150 = sub_1CCFDED5C(*v1408, 173, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v1147, v1148, v731, *(uint64_t *)v1409, *(uint64_t *)&v1409[2], v1149);
                int v1151 = v1451;
                v1408[2] = v1450;
                *((_DWORD *)v1408 + 6) = v1151;
                v1408[4] = (uint64_t)v1150;
                *((_DWORD *)v1408 + 10) = v1152;
                goto LABEL_355;
              }
            }
          }
        }
LABEL_1843:
        if (v1454 >= 0x41 && v1453) {
          MEMORY[0x1D25D9CB0](v1453, 0x1000C8000313F17);
        }
        if (DWORD2(v1452) >= 0x41 && (void)v1452) {
          MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
        }
        uint64_t v122 = *(void *)&v1409[2];
        uint64_t v134 = *(void *)v1409;
LABEL_1846:
        uint64_t v1153 = (a8 + 1);
        if (sub_1CCFFA248(v1407, v134, v122, &v1444, &v1442, a6, v1408, v1153, 0)) {
          goto LABEL_2019;
        }
        v1155 = __src[0];
        int v1154 = (int)__src[1];
        unsigned int v1156 = *((_DWORD *)a6 + 2);
        unsigned int v1419 = v1156;
        if (v1156 > 0x40) {
          operator new[]();
        }
        unint64_t v1157 = ~*a6;
        unint64_t v1158 = v1156 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v1156 : 0;
        unint64_t v1418 = v1158 & v1157;
        unsigned int v1419 = 0;
        DWORD2(v1452) = v1156;
        *(void *)&long long v1452 = v1444 & v1158 & v1157;
        LOBYTE(v1384) = 0;
        char v1159 = sub_1CCFFA248(v1407, __src[0], __src[1], &v1452, &v1442, &v1446, v1408, v1153, v1384);
        if (v1159) {
          goto LABEL_2019;
        }
        unsigned int v1160 = v1445;
        if (!v1445) {
          goto LABEL_1858;
        }
        if (v1445 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1444) != v1160) {
            goto LABEL_1863;
          }
        }
        else if (v1444 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1445)
        {
LABEL_1863:
          v1162 = sub_1CD005E7C((unsigned int *)v1407, (uint64_t)__src[0], (BOOL)__src[1], (uint64_t)&v1444, (unsigned int *)&v1442, *v1408, v1153);
          *(void *)&long long v1452 = v1162;
          *((void *)&v1452 + 1) = v1163;
          v1164 = sub_1CD005E7C((unsigned int *)v1407, *(uint64_t *)v1409, v122, (uint64_t)&v1444, (unsigned int *)&v1442, *v1408, v1153);
          *(void *)&long long v1437 = v1164;
          *((void *)&v1437 + 1) = v1166;
          if ((unint64_t)v1162 | (unint64_t)v1164)
          {
            v1177 = (void **)&v1452;
            if (!v1162) {
              v1177 = __src;
            }
            v1178 = *v1177;
            LODWORD(__src[1]) = *((_DWORD *)v1177 + 2);
            __src[0] = v1178;
            v1179 = v1409;
            if (v1164) {
              v1179 = (int *)&v1437;
            }
            uint64_t v1180 = *(void *)v1179;
            v1409[2] = v1179[2];
            *(void *)v1409 = v1180;
            uint64_t v1181 = *(void *)(*v1408 + 832);
            if (v1181) {
              LOWORD(v1181) = *(_WORD *)(v1181 + 8);
            }
            uint64_t v275 = sub_1CCFDED5C(*v1408, *(unsigned __int16 *)(v1450 + 24), (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, (uint64_t)v1178, (uint64_t)__src[1], v1165, v1180, *(uint64_t *)&v1409[2], v1181);
            goto LABEL_1885;
          }
          goto LABEL_1864;
        }
LABEL_1858:
        unsigned int v1161 = v1443;
        if (v1443)
        {
          if (v1443 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1442) != v1161) {
              goto LABEL_1863;
            }
          }
          else if (v1442 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1443)
          {
            goto LABEL_1863;
          }
        }
LABEL_1864:
        if (v1447 > 0x40) {
          operator new[]();
        }
        if (v1445 > 0x40)
        {
          v1168 = (uint64_t *)v1444;
          unint64_t v1169 = (((unint64_t)v1445 + 63) >> 6) - 1;
          v1170 = (uint64_t *)((unint64_t)*v1406 | v1446);
          do
          {
            uint64_t v1172 = *v1168++;
            uint64_t v1171 = v1172;
            uint64_t v1173 = *v1170++;
            uint64_t v1174 = v1171 & ~v1173;
            BOOL v1167 = v1174 == 0;
            BOOL v905 = v1169-- != 0;
            char v1175 = v905;
          }
          while (!v1174 && (v1175 & 1) != 0);
        }
        else
        {
          BOOL v1167 = (v1444 & ~((unint64_t)*v1406 | v1446)) == 0;
        }
        if (v1167)
        {
          int v1176 = v1451;
          v1408[2] = v1450;
          *((_DWORD *)v1408 + 6) = v1176;
          v1408[4] = (uint64_t)v1155;
          *((_DWORD *)v1408 + 10) = v1154;
          goto LABEL_2019;
        }
        if (*((_DWORD *)a6 + 2) > 0x40u) {
          operator new[]();
        }
        if (v1445 > 0x40)
        {
          v1184 = (uint64_t *)v1444;
          unint64_t v1185 = (((unint64_t)v1445 + 63) >> 6) - 1;
          v1186 = (uint64_t *)(v1448 | *a6);
          do
          {
            uint64_t v1188 = *v1184++;
            uint64_t v1187 = v1188;
            uint64_t v1189 = *v1186++;
            uint64_t v1190 = v1187 & ~v1189;
            BOOL v1183 = v1190 == 0;
            BOOL v905 = v1185-- != 0;
            char v1191 = v905;
          }
          while (!v1190 && (v1191 & 1) != 0);
        }
        else
        {
          BOOL v1183 = (v1444 & ~(v1448 | *a6)) == 0;
        }
        if (v1183)
        {
          int v1192 = v1451;
          v696 = v1408;
          v1408[2] = v1450;
          *((_DWORD *)v1408 + 6) = v1192;
          v1408[4] = __nb;
          goto LABEL_1897;
        }
        if (*((_DWORD *)a6 + 2) > 0x40u) {
          operator new[]();
        }
        if (v1445 > 0x40)
        {
          v1194 = (uint64_t *)v1444;
          unint64_t v1195 = (((unint64_t)v1445 + 63) >> 6) - 1;
          v1196 = (uint64_t *)(v1446 | *a6);
          do
          {
            uint64_t v1198 = *v1194++;
            uint64_t v1197 = v1198;
            uint64_t v1199 = *v1196++;
            uint64_t v1200 = v1197 & ~v1199;
            BOOL v1193 = v1200 == 0;
            BOOL v905 = v1195-- != 0;
            char v1201 = v905;
          }
          while (!v1200 && (v1201 & 1) != 0);
        }
        else
        {
          BOOL v1193 = (v1444 & ~(v1446 | *a6)) == 0;
        }
        uint64_t v1203 = v1450;
        int v1202 = v1451;
        if (v1193)
        {
          v927 = v1408;
          v928 = sub_1CD7EBF14(*v1408, 0, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, 0, 0);
          v1408[2] = v1203;
          *((_DWORD *)v1408 + 6) = v1202;
          goto LABEL_1910;
        }
        unsigned int v1417 = v1447;
        unint64_t v1204 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1447;
        if (!v1447) {
          unint64_t v1204 = 0;
        }
        unint64_t v1416 = v1204 & ~v1446;
        unsigned int v1417 = 0;
        DWORD2(v1452) = v1447;
        *(void *)&long long v1452 = v1444 & v1416;
        BOOL v1205 = sub_1CD80DE6C(v1407, v1450, v1451, (uint64_t)&v1452, (uint64_t)&v1442, v1408);
        if (DWORD2(v1452) >= 0x41 && (void)v1452) {
          MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
        }
        if (v1205 || sub_1CD80E164(v1450, v1451, v15, (llvm::APInt *)&v1444, (uint64_t)v1408, v1206)) {
          goto LABEL_2019;
        }
        uint64_t v1207 = *((unsigned int *)a6 + 2);
        if (v1207 > 0x40)
        {
          v1362 = (void *)*a6;
          v1363 = (uint64_t *)v1446;
          unint64_t v1364 = (unint64_t)(v1207 + 63) >> 6;
          do
          {
            uint64_t v1365 = *v1363++;
            *v1362++ |= v1365;
            --v1364;
          }
          while (v1364);
        }
        else
        {
          *a6 |= v1446;
        }
        uint64_t v1208 = *((unsigned int *)a6 + 6);
        if (v1208 <= 0x40)
        {
          v891 = a6 + 2;
          unint64_t v892 = (unint64_t)*v1406 & v1448;
          goto LABEL_1338;
        }
        v1366 = *v1406;
        v1367 = (uint64_t *)v1448;
        unint64_t v1368 = (unint64_t)(v1208 + 63) >> 6;
        do
        {
          uint64_t v1369 = *v1367++;
          *v1366++ &= v1369;
          --v1368;
        }
        while (v1368);
        goto LABEL_1555;
      case 172:
        char v145 = *(long long **)(v23 + 32);
        long long v1452 = *v145;
        *(_OWORD *)unint64_t __src = *(long long *)((char *)v145 + 40);
        uint64_t v147 = __src[0];
        unsigned int v146 = __src[1];
        uint64_t v148 = (a8 + 1);
        BOOL v149 = v1408;
        if (sub_1CCFFA248(v1407, __src[0], __src[1], &v1444, &v1442, a6, v1408, v148, 0)) {
          goto LABEL_2019;
        }
        uint64_t v1401 = v1452;
        unsigned int v150 = *((_DWORD *)a6 + 6);
        unsigned int v1415 = v150;
        if (v150 > 0x40) {
          operator new[]();
        }
        unint64_t v151 = ~(unint64_t)*v1406;
        unint64_t v152 = v150 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v150 : 0;
        unint64_t v1414 = v152 & v151;
        unsigned int v1415 = 0;
        v1409[2] = v150;
        *(void *)v1409 = v1444 & v152 & v151;
        LOBYTE(v1380) = 0;
        uint64_t v277 = *((void *)&v1452 + 1);
        char v278 = sub_1CCFFA248(v1407, v1452, *((void *)&v1452 + 1), v1409, &v1442, &v1446, v1408, v148, v1380);
        if (v278) {
          goto LABEL_2019;
        }
        unsigned int v279 = v1445;
        int v280 = v277;
        if (!v1445) {
          goto LABEL_423;
        }
        if (v1445 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1444) != v279) {
            goto LABEL_669;
          }
        }
        else if (v1444 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1445)
        {
          goto LABEL_669;
        }
LABEL_423:
        unsigned int v320 = v1443;
        if (!v1443) {
          goto LABEL_670;
        }
        if (v1443 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1442) == v320) {
            goto LABEL_670;
          }
        }
        else if (v1442 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1443)
        {
          goto LABEL_670;
        }
LABEL_669:
        uint64_t v504 = sub_1CD005E7C((unsigned int *)v1407, v1401, v277, (uint64_t)&v1444, (unsigned int *)&v1442, *v1408, v148);
        *(void *)v1409 = v504;
        *(void *)&v1409[2] = v505;
        unint64_t v506 = sub_1CD005E7C((unsigned int *)v1407, (uint64_t)v147, (BOOL)v146, (uint64_t)&v1444, (unsigned int *)&v1442, *v1408, v148);
        *(void *)&long long v1437 = v506;
        *((void *)&v1437 + 1) = v508;
        if ((unint64_t)v504 | (unint64_t)v506) {
          goto LABEL_686;
        }
LABEL_670:
        if (v1449 > 0x40) {
          operator new[]();
        }
        if (v1445 > 0x40)
        {
          int64_t v510 = (uint64_t *)v1444;
          unint64_t v511 = (((unint64_t)v1445 + 63) >> 6) - 1;
          uint64_t v512 = (uint64_t *)(*a6 | v1448);
          do
          {
            uint64_t v514 = *v510++;
            uint64_t v513 = v514;
            uint64_t v515 = *v512++;
            uint64_t v516 = v513 & ~v515;
            BOOL v509 = v516 == 0;
            BOOL v905 = v511-- != 0;
            char v517 = v905;
          }
          while (!v516 && (v517 & 1) != 0);
        }
        else
        {
          BOOL v509 = (v1444 & ~(*a6 | v1448)) == 0;
        }
        if (v509)
        {
          int v518 = v1451;
          v1408[2] = v1450;
          *((_DWORD *)v1408 + 6) = v518;
          v1408[4] = v1401;
          *((_DWORD *)v1408 + 10) = v280;
          goto LABEL_2019;
        }
        if (*((_DWORD *)a6 + 6) > 0x40u) {
          operator new[]();
        }
        if (v1445 > 0x40)
        {
          int v585 = (uint64_t *)v1444;
          unint64_t v586 = (((unint64_t)v1445 + 63) >> 6) - 1;
          uint64_t v587 = (uint64_t *)(v1446 | (unint64_t)*v1406);
          do
          {
            uint64_t v589 = *v585++;
            uint64_t v588 = v589;
            uint64_t v590 = *v587++;
            uint64_t v591 = v588 & ~v590;
            BOOL v584 = v591 == 0;
            BOOL v905 = v586-- != 0;
            char v592 = v905;
          }
          while (!v591 && (v592 & 1) != 0);
        }
        else
        {
          BOOL v584 = (v1444 & ~(v1446 | (unint64_t)*v1406)) == 0;
        }
        int v593 = v1451;
        if (v584)
        {
          v1408[2] = v1450;
          *((_DWORD *)v1408 + 6) = v593;
          v1408[4] = (uint64_t)v147;
          *((_DWORD *)v1408 + 10) = v146;
          goto LABEL_2019;
        }
        if (sub_1CD80DE6C(v1407, v1450, v1451, (uint64_t)&v1444, (uint64_t)&v1442, v1408)
          || sub_1CD80E164(v1450, v1451, v15, (llvm::APInt *)&v1444, (uint64_t)v1408, v888))
        {
          goto LABEL_2019;
        }
        uint64_t v889 = *((unsigned int *)a6 + 2);
        if (v889 > 0x40)
        {
          v1370 = (void *)*a6;
          v1371 = (uint64_t *)v1446;
          unint64_t v1372 = (unint64_t)(v889 + 63) >> 6;
          do
          {
            uint64_t v1373 = *v1371++;
            *v1370++ &= v1373;
            --v1372;
          }
          while (v1372);
        }
        else
        {
          *a6 &= v1446;
        }
        uint64_t v890 = *((unsigned int *)a6 + 6);
        if (v890 > 0x40)
        {
          v1374 = *v1406;
          v1375 = (uint64_t *)v1448;
          unint64_t v1376 = (unint64_t)(v890 + 63) >> 6;
          do
          {
            uint64_t v1377 = *v1375++;
            *v1374++ |= v1377;
            --v1376;
          }
          while (v1376);
        }
        else
        {
          v891 = a6 + 2;
          unint64_t v892 = (unint64_t)*v1406 | v1448;
LABEL_1338:
          unint64_t *v891 = v892;
        }
        goto LABEL_1555;
      case 173:
        int v162 = *(long long **)(v23 + 32);
        long long v1452 = *v162;
        *(_OWORD *)unint64_t __src = *(long long *)((char *)v162 + 40);
        unsigned int v164 = __src[0];
        int v163 = (int)__src[1];
        uint64_t v165 = (a8 + 1);
        BOOL v149 = v1408;
        if (sub_1CCFFA248(v1407, __src[0], __src[1], &v1444, &v1442, a6, v1408, v165, 0)) {
          goto LABEL_2019;
        }
        uint64_t v166 = *((void *)&v1452 + 1);
        uint64_t v167 = v1452;
        LOBYTE(v1381) = 0;
        if (sub_1CCFFA248(v1407, v1452, *((void *)&v1452 + 1), &v1444, &v1442, &v1446, v1408, v165, v1381)) {
          goto LABEL_2019;
        }
        unsigned int v169 = v1445;
        if (!v1445) {
          goto LABEL_428;
        }
        if (v1445 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1444) != v169) {
            goto LABEL_685;
          }
        }
        else if (v1444 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1445)
        {
          goto LABEL_685;
        }
LABEL_428:
        unsigned int v321 = v1443;
        if (!v1443) {
          goto LABEL_695;
        }
        if (v1443 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1442) == v321) {
            goto LABEL_695;
          }
        }
        else if (v1442 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1443)
        {
          goto LABEL_695;
        }
LABEL_685:
        uint64_t v519 = v166;
        uint64_t v504 = sub_1CD005E7C((unsigned int *)v1407, v167, v166, (uint64_t)&v1444, (unsigned int *)&v1442, *v1408, v165);
        *(void *)v1409 = v504;
        *(void *)&v1409[2] = v520;
        unint64_t v506 = sub_1CD005E7C((unsigned int *)v1407, (uint64_t)__src[0], (BOOL)__src[1], (uint64_t)&v1444, (unsigned int *)&v1442, *v1408, v165);
        *(void *)&long long v1437 = v506;
        *((void *)&v1437 + 1) = v521;
        if ((unint64_t)v504 | (unint64_t)v506)
        {
LABEL_686:
          unint64_t v522 = v1409;
          if (!v504) {
            unint64_t v522 = (int *)&v1452;
          }
          uint64_t v523 = *(void *)v522;
          DWORD2(v1452) = v522[2];
          *(void *)&long long v1452 = v523;
          uint64_t v524 = __src;
          if (v506) {
            uint64_t v524 = (void **)&v1437;
          }
          uint64_t v525 = *v524;
          LODWORD(__src[1]) = *((_DWORD *)v524 + 2);
          __src[0] = v525;
          uint64_t v526 = *(void *)(*v149 + 832);
          if (v526) {
            LOWORD(v526) = *(_WORD *)(v526 + 8);
          }
          uint64_t v527 = (uint64_t)sub_1CCFDED5C(*v149, *(unsigned __int16 *)(v1450 + 24), (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v523, *((uint64_t *)&v1452 + 1), v507, (uint64_t)v525, (uint64_t)__src[1], v526);
          int v529 = v1451;
          v149[2] = v1450;
          *((_DWORD *)v149 + 6) = v529;
LABEL_693:
          v149[4] = v527;
          *((_DWORD *)v149 + 10) = v528;
          goto LABEL_2019;
        }
        unsigned int v169 = v1445;
        uint64_t v166 = v519;
LABEL_695:
        if (v169 > 0x40)
        {
          unint64_t v531 = ((unint64_t)v169 + 63) >> 6;
          uint64_t v532 = (uint64_t *)v1444;
          uint64_t v533 = (uint64_t *)*a6;
          uint64_t v534 = (uint64_t *)v1444;
          unint64_t v535 = v531;
          while (1)
          {
            uint64_t v537 = *v534++;
            uint64_t v536 = v537;
            uint64_t v538 = *v533++;
            if ((v536 & ~v538) != 0) {
              break;
            }
            if (!--v535) {
              goto LABEL_702;
            }
          }
          unsigned int v540 = (uint64_t *)v1446;
          while (1)
          {
            uint64_t v542 = *v532++;
            uint64_t v541 = v542;
            uint64_t v543 = *v540++;
            if ((v541 & ~v543) != 0) {
              break;
            }
            if (!--v531) {
              goto LABEL_698;
            }
          }
        }
        else
        {
          if ((v1444 & ~*a6) == 0)
          {
LABEL_702:
            int v539 = v1451;
            v1408[2] = v1450;
            *((_DWORD *)v1408 + 6) = v539;
            v1408[4] = v167;
            *((_DWORD *)v1408 + 10) = v166;
            goto LABEL_2019;
          }
          if ((v1444 & ~v1446) == 0)
          {
LABEL_698:
            int v530 = v1451;
            v1408[2] = v1450;
            *((_DWORD *)v1408 + 6) = v530;
            v1408[4] = (uint64_t)v164;
            *((_DWORD *)v1408 + 10) = v163;
            goto LABEL_2019;
          }
        }
        if (sub_1CD80E164(v1450, v1451, v15, (llvm::APInt *)&v1444, (uint64_t)v1408, v168)) {
          goto LABEL_2019;
        }
        if (*((_DWORD *)a6 + 2) > 0x40u) {
          operator new[]();
        }
        if (v1445 > 0x40)
        {
          v655 = (uint64_t *)v1444;
          unint64_t v656 = (((unint64_t)v1445 + 63) >> 6) - 1;
          v657 = (uint64_t *)(v1446 | *a6);
          do
          {
            uint64_t v659 = *v655++;
            uint64_t v658 = v659;
            uint64_t v660 = *v657++;
            uint64_t v661 = v658 & ~v660;
            BOOL v654 = v661 == 0;
            BOOL v905 = v656-- != 0;
            char v662 = v905;
          }
          while (!v661 && (v662 & 1) != 0);
        }
        else
        {
          BOOL v654 = (v1444 & ~(v1446 | *a6)) == 0;
        }
        if (v654)
        {
          uint64_t v663 = v1450;
          int v202 = v1451;
          uint64_t v664 = *(void *)(*v1408 + 832);
          if (v664) {
            LOWORD(v664) = *(_WORD *)(v664 + 8);
          }
          uint64_t v205 = sub_1CCFDED5C(*v1408, 172, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v167, v166, v544, (uint64_t)__src[0], (uint64_t)__src[1], v664);
LABEL_906:
          uint64_t v207 = v1408;
          v1408[2] = v663;
LABEL_264:
          *((_DWORD *)v207 + 6) = v202;
          v207[4] = (uint64_t)v205;
          *((_DWORD *)v207 + 10) = v206;
          goto LABEL_2019;
        }
        uint64_t v665 = sub_1CCFD8140((uint64_t)__src[0], __src[1], (llvm::APInt *)&v1442, 0, 0);
        uint64_t v667 = v1407;
        v666 = v1408;
        if (!v665) {
          goto LABEL_1597;
        }
        uint64_t v668 = *(void *)(v665 + 80);
        v669 = (const void **)(v668 + 24);
        uint64_t v670 = *(unsigned int *)(v668 + 32);
        if (v670 > 0x40)
        {
          unint64_t v671 = (unint64_t)*v669;
          if (!memcmp(*v669, (const void *)v1448, ((unint64_t)(v670 + 63) >> 3) & 0x3FFFFFF8))
          {
            unsigned int v1413 = v670;
            operator new[]();
          }
          int v720 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v669);
          v673 = (uint64_t *)v671;
          if (v720 == v670) {
            goto LABEL_1063;
          }
        }
        else
        {
          unint64_t v671 = (unint64_t)*v669;
          if (*v669 == (const void *)v1448)
          {
            uint64_t v1066 = *v1408;
            unint64_t v1067 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v670;
            if (!v670) {
              unint64_t v1067 = 0;
            }
            unint64_t v1412 = v1067 & ~v671;
            unsigned int v1413 = 0;
            v1409[2] = v670;
            *(void *)v1409 = v1444 & v1412;
            uint64_t v1100 = sub_1CD7EBB14(v1066, (llvm::LLVMContext *)v1409, (const llvm::APInt *)&v1440, (uint64_t)v1438, (uint64_t)v1439, 0, 0);
            uint64_t v1103 = v1100;
            uint64_t v1104 = v1101;
            if (v1409[2] >= 0x41u && *(void *)v1409) {
              MEMORY[0x1D25D9CB0](*(void *)v1409, 0x1000C8000313F17);
            }
            if (v1413 >= 0x41 && v1412) {
              MEMORY[0x1D25D9CB0](v1412, 0x1000C8000313F17);
            }
            uint64_t v1105 = v1450;
            int v202 = v1451;
            uint64_t v1106 = *(void *)(*v1408 + 832);
            if (v1106) {
              LOWORD(v1106) = *(_WORD *)(v1106 + 8);
            }
            uint64_t v205 = sub_1CCFDED5C(*v1408, 171, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v167, v166, v1102, v1103, v1104, v1106);
LABEL_1788:
            uint64_t v207 = v1408;
            v1408[2] = v1105;
            goto LABEL_264;
          }
          if (v670) {
            BOOL v672 = v671 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v670;
          }
          else {
            BOOL v672 = 1;
          }
          if (v672) {
            goto LABEL_1066;
          }
          v673 = (uint64_t *)*v669;
        }
        if (v1445 > 0x40)
        {
          unint64_t v922 = ((unint64_t)v1445 + 63) >> 6;
          v923 = (uint64_t *)v1444;
          while (1)
          {
            uint64_t v925 = *v923++;
            uint64_t v924 = v925;
            uint64_t v926 = *v673++;
            if ((v924 & ~v926) != 0) {
              break;
            }
            if (!--v922) {
              goto LABEL_1423;
            }
          }
LABEL_1002:
          if (v670 <= 0x40)
          {
            BOOL v721 = v671 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v670;
            goto LABEL_1064;
          }
LABEL_1063:
          BOOL v721 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v669) == v670;
LABEL_1064:
          uint64_t v667 = v1407;
          v666 = v1408;
          if (!v721)
          {
LABEL_1597:
            if (sub_1CD80DE6C(v667, v1450, v1451, (uint64_t)&v1444, (uint64_t)&v1442, v666)) {
              goto LABEL_2019;
            }
          }
LABEL_1066:
          llvm::KnownBits::operator^=((uint64_t)a6, &v1446);
          goto LABEL_1555;
        }
        if ((v1444 & ~v671) != 0) {
          goto LABEL_1002;
        }
LABEL_1423:
        v927 = v1408;
        v928 = sub_1CD7EBB8C(*v1408, (const llvm::APInt *)&v1440, v167, v166, v1438, (uint64_t)v1439);
        int v930 = v1451;
        v1408[2] = v1450;
        *((_DWORD *)v1408 + 6) = v930;
LABEL_1910:
        v927[4] = (uint64_t)v928;
        *((_DWORD *)v927 + 10) = v929;
        goto LABEL_2019;
      case 175:
        uint64_t v445 = *(void *)(v23 + 32);
        uint64_t v446 = v23;
        uint64_t v447 = *(void *)v445;
        uint64_t v448 = *(void *)(v445 + 8);
        uint64_t v449 = *(void *)(*(void *)(v445 + 40) + 40) + 16 * *(unsigned int *)(v445 + 48);
        uint64_t v450 = *(llvm **)v449;
        uint64_t v451 = *(void *)(v449 + 8);
        BOOL v452 = v1408;
        uint64_t v453 = sub_1CD7F2844(*v1408, v446, v1451, (llvm::APInt *)&v1442);
        if (!v453) {
          goto LABEL_1288;
        }
        if (*((_DWORD *)v453 + 2) >= 0x41u) {
          uint64_t v453 = *(llvm::APInt **)v453;
        }
        uint64_t v456 = *(llvm::APInt **)v453;
        if (!*(void *)v453) {
          goto LABEL_1298;
        }
        int v457 = *(unsigned __int16 *)(v447 + 24);
        if (v457 != 177) {
          goto LABEL_1254;
        }
        DWORD2(v1452) = v15;
        *(void *)&long long v1452 = 0;
        if (v456 > 0x40) {
          llvm::APInt::setBitsSlowCase(&v1452, 0, v456);
        }
        else {
          *(void *)&long long v1452 = v1452 | (0xFFFFFFFFFFFFFFFFLL >> -(char)v456);
        }
        if (v1445 > 0x40)
        {
          uint64_t v847 = 0;
          uint64_t v458 = v1452;
          do
          {
            uint64_t v848 = *(void *)(v1452 + v847) & *(void *)(v1444 + v847);
            BOOL v459 = v848 != 0;
            if (v848) {
              BOOL v849 = 1;
            }
            else {
              BOOL v849 = ((((unint64_t)v1445 + 63) >> 3) & 0x3FFFFFF8) - 8 == v847;
            }
            v847 += 8;
          }
          while (!v849);
        }
        else
        {
          uint64_t v458 = v1452;
          BOOL v459 = ((unint64_t)v1452 & v1444) != 0;
        }
        if (DWORD2(v1452) >= 0x41 && v458 != 0) {
          MEMORY[0x1D25D9CB0](v458, 0x1000C8000313F17);
        }
        if (!v459)
        {
          v1044 = sub_1CD7F2844(*v1408, v447, v448, (llvm::APInt *)&v1442);
          if (v1044)
          {
            if (*((_DWORD *)v1044 + 2) >= 0x41u) {
              v1044 = *(llvm::APInt **)v1044;
            }
            int v1045 = v456 - *(_DWORD *)v1044;
            if (v1045 >= 0) {
              uint64_t v1046 = v1045;
            }
            else {
              uint64_t v1046 = (*(_DWORD *)v1044 - v456);
            }
            if (v1045 >= 0) {
              uint64_t v1047 = 175;
            }
            else {
              uint64_t v1047 = 177;
            }
            v1048 = sub_1CD7EBF14(*v1408, v1046, (const llvm::APInt *)&v1440, v450, v451, 0, 0);
            uint64_t v203 = v1450;
            int v202 = v1451;
            v1051 = *(uint64_t **)(v447 + 32);
            uint64_t v1052 = *v1051;
            uint64_t v1053 = v1051[1];
            uint64_t v1054 = *(void *)(*v1408 + 832);
            if (v1054) {
              LOWORD(v1054) = *(_WORD *)(v1054 + 8);
            }
            uint64_t v205 = sub_1CCFDED5C(*v1408, v1047, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v1052, v1053, v1050, (uint64_t)v1048, v1049, v1054);
            goto LABEL_263;
          }
        }
        int v457 = *(unsigned __int16 *)(v447 + 24);
LABEL_1254:
        if (v457 != 200) {
          goto LABEL_1255;
        }
        v1032 = *(size_t **)(v447 + 32);
        size_t __ne = *v1032;
        uint64_t v1405 = v1032[1];
        long long v1452 = *(_OWORD *)(*(void *)(*v1032 + 40) + 16 * v1405);
        unsigned int v1033 = sub_1CD3E12F4((unsigned __int8 *)&v1452, v454, v455);
        unsigned int v1034 = v1033;
        if (v456 < v1033)
        {
          if (v1445 > 0x40)
          {
            int v1081 = 0;
            int64_t v1082 = ((unint64_t)v1445 + 63) >> 6;
            do
            {
              BOOL v50 = v1082-- < 1;
              if (v50) {
                break;
              }
              unint64_t v1083 = *(void *)(v1444 + 8 * v1082);
              v1081 += __clz(v1083);
            }
            while (!v1083);
            unsigned int v1084 = v1445 | 0xFFFFFFC0;
            if ((v1445 & 0x3F) == 0) {
              unsigned int v1084 = 0;
            }
            int v1035 = v1081 + v1084;
          }
          else
          {
            int v1035 = v1445 + __clz(v1444) - 64;
          }
          if (v1445 - v1035 <= v1033
            && (*(unsigned int (**)(uint64_t, uint64_t, void, void))(*(void *)v1407 + 1744))(v1407, 175, v1452, *((void *)&v1452 + 1)))
          {
            ShiftAmountTy = (void *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1407, v1452, *((uint64_t *)&v1452 + 1), v65, 1);
            __src[0] = ShiftAmountTy;
            __src[1] = v1256;
            v1409[2] = v15;
            unint64_t v1257 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
            if (!v15) {
              LODWORD(v1257) = 0;
            }
            *(void *)v1409 = v1257 & v456;
            if ((_BYTE)ShiftAmountTy) {
              unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)__src);
            }
            else {
              unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
            }
            unsigned int v1260 = ExtendedSizeInBits;
            if (v1259 == 1) {
            if (64 - __clz(*(unint64_t *)v1409) > v1260)
            }
              *(_OWORD *)unint64_t __src = v1452;
            uint64_t v1261 = *v1408;
            long long v1262 = v1452;
            v1263 = sub_1CD7EBF14(*v1408, v456, (const llvm::APInt *)&v1440, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
            uint64_t v1266 = *(void *)(v1261 + 832);
            if (v1266) {
              LOWORD(v1266) = *(_WORD *)(v1266 + 8);
            }
            v1268 = sub_1CCFDED5C(v1261, 175, (const llvm::APInt *)&v1440, (llvm *)v1262, *((uint64_t *)&v1262 + 1), __ne, v1405, v1265, (uint64_t)v1263, v1264, v1266);
            uint64_t v663 = v1450;
            int v202 = v1451;
            uint64_t v1269 = *(void *)(*v1408 + 832);
            if (v1269) {
              __int16 v1270 = *(_WORD *)(v1269 + 8);
            }
            else {
              __int16 v1270 = 0;
            }
            uint64_t v205 = sub_1CD7F3564((llvm::APFloatBase *)*v1408, (const char *)0xC8, (uint64_t)&v1440, v1438, (uint64_t)v1439, (uint64_t)v1268, v1267, v1270);
            goto LABEL_906;
          }
        }
        uint64_t v1085 = *(void *)(v447 + 48);
        if (!v1085) {
          goto LABEL_1255;
        }
        int v1086 = 1;
        do
        {
          if (*(_DWORD *)(v1085 + 8) == v448)
          {
            if (!v1086) {
              goto LABEL_1255;
            }
            --v1086;
          }
          uint64_t v1085 = *(void *)(v1085 + 32);
        }
        while (v1085);
        if (v1086) {
          goto LABEL_1255;
        }
        if (*(_WORD *)(__ne + 24) != 177) {
          goto LABEL_1255;
        }
        uint64_t v1087 = *(void *)(__ne + 48);
        if (!v1087) {
          goto LABEL_1255;
        }
        int v1088 = 1;
        do
        {
          if (*(_DWORD *)(v1087 + 8) == v1405)
          {
            if (!v1088) {
              goto LABEL_1255;
            }
            --v1088;
          }
          uint64_t v1087 = *(void *)(v1087 + 32);
        }
        while (v1087);
        if (v1088) {
          goto LABEL_1255;
        }
        v1089 = sub_1CD7F2844(*v1408, __ne, v1405, (llvm::APInt *)&v1442);
        if (!v1089) {
          goto LABEL_1255;
        }
        if (*((_DWORD *)v1089 + 2) >= 0x41u) {
          v1089 = *(llvm::APInt **)v1089;
        }
        v1090 = *(llvm::APInt **)v1089;
        if (*(void *)v1089 >= v456 || v1090 >= v1034) {
          goto LABEL_1255;
        }
        if (v1445 > 0x40)
        {
          int v1321 = 0;
          int64_t v1322 = ((unint64_t)v1445 + 63) >> 6;
          do
          {
            BOOL v50 = v1322-- < 1;
            if (v50) {
              break;
            }
            unint64_t v1323 = *(void *)(v1444 + 8 * v1322);
            v1321 += __clz(v1323);
          }
          while (!v1323);
          unsigned int v1324 = v1445 | 0xFFFFFFC0;
          if ((v1445 & 0x3F) == 0) {
            unsigned int v1324 = 0;
          }
          if (v1445 - v1321 - v1324 > v1034 + v456 - v1090) {
            goto LABEL_1255;
          }
          unsigned int v1093 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1444);
        }
        else
        {
          if (64 - __clz(v1444) > v1034 + v456 - v1090) {
            goto LABEL_1255;
          }
          unsigned int v1092 = __clz(__rbit64(v1444));
          if (v1445 >= v1092) {
            unsigned int v1093 = v1092;
          }
          else {
            unsigned int v1093 = v1445;
          }
        }
        if (v1093 >= v456)
        {
          v1325 = sub_1CD7EBF14(*v1408, (v456 - v1090), (const llvm::APInt *)&v1440, v450, v451, 0, 0);
          uint64_t v1327 = v1326;
          v1328 = *(uint64_t **)(__ne + 32);
          uint64_t v1329 = *v1328;
          v1330 = (void *)v1328[1];
          uint64_t v1331 = *(void *)(*v1408 + 832);
          if (v1331) {
            __int16 v1332 = *(_WORD *)(v1331 + 8);
          }
          else {
            __int16 v1332 = 0;
          }
          v1359 = sub_1CD7F3564((llvm::APFloatBase *)*v1408, (const char *)0xC8, (uint64_t)&v1440, v1438, (uint64_t)v1439, v1329, v1330, v1332);
          uint64_t v1105 = v1450;
          int v202 = v1451;
          uint64_t v1361 = *(void *)(*v1408 + 832);
          if (v1361) {
            LOWORD(v1361) = *(_WORD *)(v1361 + 8);
          }
          uint64_t v205 = sub_1CCFDED5C(*v1408, 175, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, (uint64_t)v1359, v1358, v1360, (uint64_t)v1325, v1327, v1361);
          goto LABEL_1788;
        }
LABEL_1255:
        unsigned int v851 = v1445;
        DWORD2(v1452) = v1445;
        if (v1445 > 0x40) {
          operator new[]();
        }
        if (v1445 == v456)
        {
          unint64_t v852 = 0;
          *(void *)&long long v1452 = 0;
        }
        else
        {
          unint64_t v852 = v1444 >> (char)v456;
          *(void *)&long long v1452 = v1444 >> (char)v456;
        }
        BOOL v854 = 0;
        if ((sub_1CCFFA248(v1407, v447, v448, &v1452, &v1442, a6, v1408, (a8 + 1), 0) & 1) == 0)
        {
          unsigned int v855 = *((_DWORD *)a6 + 2);
          if (v855 > 0x40)
          {
            llvm::APInt::shlSlowCase((llvm::APInt *)a6, v456);
          }
          else
          {
            unint64_t v856 = *a6 << (char)v456;
            if (v855 == v456) {
              unint64_t v856 = 0;
            }
            if (v855) {
              unint64_t v857 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v855;
            }
            else {
              unint64_t v857 = 0;
            }
            *a6 = v857 & v856;
          }
          unsigned int v858 = *((_DWORD *)a6 + 6);
          if (v858 > 0x40)
          {
            llvm::APInt::shlSlowCase((llvm::APInt *)v1406, v456);
          }
          else
          {
            uint64_t v859 = (void)*v1406 << (char)v456;
            if (v858 == v456) {
              uint64_t v859 = 0;
            }
            if (v858) {
              unint64_t v860 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v858;
            }
            else {
              unint64_t v860 = 0;
            }
            *v1406 = (void *)(v860 & v859);
          }
          if (v456 > 0x40)
          {
            llvm::APInt::setBitsSlowCase(a6, 0, v456);
          }
          else
          {
            unint64_t v861 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v456;
            if (*((_DWORD *)a6 + 2) > 0x40u) {
              *(void *)*a6 |= v861;
            }
            else {
              *a6 |= v861;
            }
          }
          if (v1445 > 0x40)
          {
            int v863 = 0;
            int64_t v864 = ((unint64_t)v1445 + 63) >> 6;
            do
            {
              BOOL v50 = v864-- < 1;
              if (v50) {
                break;
              }
              unint64_t v865 = *(void *)(v1444 + 8 * v864);
              v863 += __clz(v865);
            }
            while (!v865);
            unsigned int v866 = v1445 | 0xFFFFFFC0;
            if ((v1445 & 0x3F) == 0) {
              unsigned int v866 = 0;
            }
            int v862 = v863 + v866;
          }
          else
          {
            int v862 = v1445 + __clz(v1444) - 64;
          }
          BOOL v854 = v1445 - v862 <= v456
              || (sub_1CD80E164(v1450, v1451, v15, (llvm::APInt *)&v1444, (uint64_t)v1408, v853) & 1) == 0;
        }
        if (v851 >= 0x41 && v852) {
          MEMORY[0x1D25D9CB0](v852, 0x1000C8000313F17);
        }
        BOOL v452 = v1408;
        if (!v854) {
          goto LABEL_2019;
        }
LABEL_1288:
        v867 = sub_1CCFD8460(*v452, v1450, v1451, (llvm::APInt *)&v1442);
        if (v867)
        {
          if (*((_DWORD *)v867 + 2) >= 0x41u) {
            v867 = *(llvm::APInt **)v867;
          }
          unsigned int v868 = *(_DWORD *)v867;
          unsigned int v869 = sub_1CCFD8ECC(*v1408, v447, v448, (unsigned int *)&v1442, (a8 + 1));
          if (v1445 > 0x40)
          {
            unsigned int v871 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1444);
          }
          else
          {
            unsigned int v870 = __clz(__rbit64(v1444));
            unsigned int v871 = v1445 >= v870 ? v870 : v1445;
          }
          if (v869 > v868 && v869 - v868 >= v15 - v871)
          {
LABEL_1298:
            int v872 = v1451;
            v1408[2] = v1450;
            *((_DWORD *)v1408 + 6) = v872;
            v1408[4] = v447;
            *((_DWORD *)v1408 + 10) = v448;
            goto LABEL_2019;
          }
        }
        goto LABEL_1555;
      case 176:
        uint64_t v153 = *(uint64_t **)(v23 + 32);
        uint64_t v155 = *v153;
        uint64_t v154 = v153[1];
        uint64_t v156 = v153[5];
        uint64_t v157 = v153[6];
        uint64_t v158 = *(void *)(v156 + 40) + 16 * v157;
        uint64_t v159 = *(void *)(v158 + 8);
        v1402 = *(llvm **)v158;
        if (v1445 > 0x40)
        {
          int v161 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1444);
        }
        else
        {
          unsigned int v160 = __clz(__rbit64(v1444));
          if (v1445 >= v160) {
            int v161 = v160;
          }
          else {
            int v161 = v1445;
          }
        }
        uint64_t v200 = (a8 + 1);
        if (sub_1CCFD8ECC(*v1408, v155, v154, (unsigned int *)&v1442, v200) >= (int)v15 - v161)
        {
          int v208 = v1451;
          v1408[2] = v1450;
          *((_DWORD *)v1408 + 6) = v208;
          v1408[4] = v155;
          *((_DWORD *)v1408 + 10) = v154;
          goto LABEL_2019;
        }
        if (v1445 > 0x40)
        {
          int v249 = 0;
          int64_t v250 = ((unint64_t)v1445 + 63) >> 6;
          do
          {
            BOOL v50 = v250-- < 1;
            if (v50) {
              break;
            }
            unint64_t v251 = *(void *)(v1444 + 8 * v250);
            v249 += __clz(v251);
          }
          while (!v251);
          unsigned int v252 = v1445 | 0xFFFFFFC0;
          if ((v1445 & 0x3F) == 0) {
            unsigned int v252 = 0;
          }
          if (v249 + v252 == v1445 - 1)
          {
LABEL_260:
            uint64_t v203 = v1450;
            int v202 = v1451;
            uint64_t v204 = *(void *)(*v1408 + 832);
            if (v204) {
              LOWORD(v204) = *(_WORD *)(v204 + 8);
            }
            uint64_t v205 = sub_1CCFDED5C(*v1408, 177, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v155, v154, v201, v156, v157, v204);
LABEL_263:
            uint64_t v207 = v1408;
            v1408[2] = v203;
            goto LABEL_264;
          }
        }
        else if (v1444 == 1)
        {
          goto LABEL_260;
        }
        uint64_t v126 = v1408;
        uint64_t v128 = sub_1CD0074DC(v1450, v1451, *v1408, v1407, (uint64_t)&v1444, (llvm::APInt *)&v1442, v200);
        int v130 = v253;
        uint64_t v131 = v1450;
        int v132 = v1451;
        if (v128)
        {
LABEL_159:
          v126[2] = v131;
          *((_DWORD *)v126 + 6) = v132;
          v126[4] = (uint64_t)v128;
          uint64_t v19 = 1;
          *((_DWORD *)v126 + 10) = v130;
          goto LABEL_2020;
        }
        unint64_t v254 = sub_1CD7F2844(*v1408, v1450, v1451, (llvm::APInt *)&v1442);
        if (!v254) {
          goto LABEL_1555;
        }
        if (*((_DWORD *)v254 + 2) >= 0x41u) {
          unint64_t v254 = *(llvm::APInt **)v254;
        }
        size_t __nc = *(void *)v254;
        if (!*(void *)v254)
        {
          int v937 = v1451;
          v1408[2] = v1450;
          *((_DWORD *)v1408 + 6) = v937;
          v1408[4] = v155;
          *((_DWORD *)v1408 + 10) = v154;
          goto LABEL_2019;
        }
        DWORD2(v1452) = v1445;
        if (v1445 > 0x40) {
          operator new[]();
        }
        unint64_t v960 = v1444 << __nc;
        if (v1445 == __nc) {
          unint64_t v960 = 0;
        }
        unint64_t v961 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1445;
        if (!v1445) {
          unint64_t v961 = 0;
        }
        *(void *)&long long v1452 = v961 & v960;
        if ((*(_WORD *)(v1450 + 72) & 8) != 0)
        {
          if (__nc > 0x40)
          {
            llvm::APInt::setBitsSlowCase(&v1452, 0, __nc);
          }
          else
          {
            unint64_t v962 = 0xFFFFFFFFFFFFFFFFLL >> -(char)__nc;
            if (DWORD2(v1452) > 0x40) {
              *(void *)v1452 |= v962;
            }
            else {
              *(void *)&long long v1452 = v1452 | v962;
            }
          }
        }
        if (v1445 > 0x40)
        {
          int v964 = 0;
          int64_t v965 = ((unint64_t)v1445 + 63) >> 6;
          do
          {
            BOOL v50 = v965-- < 1;
            if (v50) {
              break;
            }
            unint64_t v966 = *(void *)(v1444 + 8 * v965);
            v964 += __clz(v966);
          }
          while (!v966);
          if ((v1445 & 0x3F) != 0) {
            unsigned int v967 = v1445 | 0xFFFFFFC0;
          }
          else {
            unsigned int v967 = 0;
          }
          unsigned int v963 = v964 + v967;
        }
        else
        {
          unsigned int v963 = v1445 + __clz(v1444) - 64;
        }
        if (v963 < __nc)
        {
          uint64_t v968 = 1 << (BYTE8(v1452) - 1);
          if (DWORD2(v1452) > 0x40) {
            *(void *)(v1452 + 8 * ((DWORD2(v1452) - 1) >> 6)) |= v968;
          }
          else {
            *(void *)&long long v1452 = v1452 | v968;
          }
        }
        char v240 = 0;
        if (sub_1CCFFA248(v1407, v155, v154, &v1452, &v1442, a6, v1408, v200, 0))
        {
LABEL_560:
          if (DWORD2(v1452) >= 0x41)
          {
            unsigned int v431 = (long long *)v1452;
            if ((void)v1452) {
LABEL_1553:
            }
              MEMORY[0x1D25D9CB0](v431, 0x1000C8000313F17);
          }
LABEL_1554:
          if ((v240 & 1) == 0) {
            goto LABEL_2019;
          }
          goto LABEL_1555;
        }
        unsigned int v1031 = *((_DWORD *)a6 + 2);
        if (v1031 > 0x40)
        {
          llvm::APInt::lshrSlowCase((void **)a6, __nc);
        }
        else if (v1031 == __nc)
        {
          *a6 = 0;
        }
        else
        {
          *a6 >>= __nc;
        }
        unsigned int v1039 = *((_DWORD *)a6 + 6);
        if (v1039 > 0x40)
        {
          llvm::APInt::lshrSlowCase(v1406, __nc);
        }
        else if (v1039 == __nc)
        {
          *v1406 = 0;
        }
        else
        {
          *v1406 = (void *)((unint64_t)*v1406 >> __nc);
        }
        unsigned int v1040 = v15 + ~__nc;
        uint64_t v1391 = v1040 >> 6;
        if (*((_DWORD *)a6 + 2) >= 0x41u) {
          v1041 = (unint64_t *)(*a6 + 8 * v1391);
        }
        else {
          v1041 = a6;
        }
        uint64_t v1042 = 1 << v1040;
        if ((*v1041 & (1 << v1040)) != 0) {
          goto LABEL_1736;
        }
        if (v1445 > 0x40)
        {
          int v1068 = 0;
          int64_t v1069 = ((unint64_t)v1445 + 63) >> 6;
          do
          {
            BOOL v50 = v1069-- < 1;
            if (v50) {
              break;
            }
            unint64_t v1070 = *(void *)(v1444 + 8 * v1069);
            v1068 += __clz(v1070);
          }
          while (!v1070);
          unsigned int v1071 = (v1445 & 0x3F) != 0 ? v1445 | 0xFFFFFFC0 : 0;
          unsigned int v1043 = v1068 + v1071;
        }
        else
        {
          unsigned int v1043 = v1445 + __clz(v1444) - 64;
        }
        if (v1043 >= __nc)
        {
LABEL_1736:
          uint64_t v1078 = v1450;
          int v1077 = v1451;
          v1079 = sub_1CCFDED5C(*v1408, 177, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v155, v154, v1030, v156, v157, *(_WORD *)(v1450 + 72) & 8 | 1u);
LABEL_1737:
          char v240 = 0;
          v1408[2] = v1078;
          *((_DWORD *)v1408 + 6) = v1077;
          v1408[4] = (uint64_t)v1079;
          *((_DWORD *)v1408 + 10) = v1080;
          goto LABEL_560;
        }
        int v1072 = sub_1CBAB77A4((unsigned int *)&v1444);
        if ((v1072 & 0x80000000) == 0)
        {
          v1251 = sub_1CD7EBF14(*v1408, (v15 + ~v1072), (const llvm::APInt *)&v1440, v1402, v159, 0, 0);
          uint64_t v1078 = v1450;
          int v1077 = v1451;
          uint64_t v1254 = *(void *)(*v1408 + 832);
          if (v1254) {
            LOWORD(v1254) = *(_WORD *)(v1254 + 8);
          }
          v1079 = sub_1CCFDED5C(*v1408, 177, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v155, v154, v1253, (uint64_t)v1251, v1252, v1254);
          goto LABEL_1737;
        }
        LODWORD(v45) = *((_DWORD *)a6 + 6);
        unint64_t v1073 = a6[2];
        v1074 = (void *)(v1073 + 8 * v1391);
        if (v45 < 0x41) {
          v1074 = a6 + 2;
        }
        if ((*v1074 & v1042) != 0)
        {
          unsigned int v1075 = v45 - __nc;
          if (v45 > 0x40 || v1075 > 0x3F) {
            llvm::APInt::setBitsSlowCase(v1406, v1075, v45);
          }
          else {
            *v1406 = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)__nc << v1075) | v1073);
          }
        }
        int v1076 = DWORD2(v1452);
        if (!DWORD2(v1452)) {
          goto LABEL_1814;
        }
        if (DWORD2(v1452) > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1452) != v1076) {
            goto LABEL_1825;
          }
        }
        else if ((void)v1452 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1452))
        {
          goto LABEL_1825;
        }
LABEL_1814:
        unsigned int v1138 = v1443;
        if (!v1443) {
          goto LABEL_1829;
        }
        if (v1443 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1442) == v1138) {
            goto LABEL_1829;
          }
        }
        else if (v1442 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1443)
        {
          goto LABEL_1829;
        }
LABEL_1825:
        v1140 = sub_1CD005E7C((unsigned int *)v1407, v155, v154, (uint64_t)&v1452, (unsigned int *)&v1442, *v1408, v200);
        if (v1140)
        {
          uint64_t v1143 = *(void *)(*v1408 + 832);
          if (v1143) {
            LOWORD(v1143) = *(_WORD *)(v1143 + 8);
          }
          v1079 = sub_1CCFDED5C(*v1408, 176, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, (uint64_t)v1140, v1141, v1142, v156, v157, v1143);
          uint64_t v1078 = v1450;
          int v1077 = v1451;
          goto LABEL_1737;
        }
LABEL_1829:
        char v240 = 1;
        goto LABEL_560;
      case 177:
        uint64_t v120 = *(void *)(v23 + 32);
        uint64_t v121 = *(void *)v120;
        uint64_t v122 = *(void *)(v120 + 8);
        uint64_t v123 = *(void *)(*(void *)(v120 + 40) + 40) + 16 * *(unsigned int *)(v120 + 48);
        int v124 = *(llvm **)v123;
        uint64_t v125 = *(void *)(v123 + 8);
        uint64_t v126 = v1408;
        uint64_t v127 = (a8 + 1);
        uint64_t v128 = sub_1CD0074DC(v23, v1451, *v1408, v1407, (uint64_t)&v1444, (llvm::APInt *)&v1442, v127);
        int v130 = v129;
        uint64_t v131 = v1450;
        int v132 = v1451;
        if (v128) {
          goto LABEL_159;
        }
        uint64_t v499 = sub_1CD7F2844(*v1408, v1450, v1451, (llvm::APInt *)&v1442);
        if (!v499) {
          goto LABEL_1555;
        }
        uint64_t v500 = v121;
        if (*((_DWORD *)v499 + 2) >= 0x41u) {
          uint64_t v499 = *(llvm::APInt **)v499;
        }
        unint64_t v501 = *(llvm::APInt **)v499;
        if (!*(void *)v499)
        {
          int v695 = v1451;
          v696 = v1408;
          v1408[2] = v1450;
          *((_DWORD *)v1408 + 6) = v695;
          v1408[4] = v121;
LABEL_1897:
          *((_DWORD *)v696 + 10) = v122;
          goto LABEL_2019;
        }
        if (*(_WORD *)(v121 + 24) == 175)
        {
          DWORD2(v1452) = v15;
          *(void *)&long long v1452 = 0;
          unsigned int v502 = v15 - v501;
          if ((v15 - v501) > 0x3F) {
            llvm::APInt::setBitsSlowCase(&v1452, v502, v15);
          }
          else {
            *(void *)&long long v1452 = v1452 | (0xFFFFFFFFFFFFFFFFLL >> -(char)v501 << v502);
          }
          if (v1445 > 0x40)
          {
            uint64_t v873 = 0;
            do
            {
              uint64_t v874 = *(void *)(v1452 + v873) & *(void *)(v1444 + v873);
              BOOL v503 = v874 != 0;
              if (v874) {
                BOOL v875 = 1;
              }
              else {
                BOOL v875 = ((((unint64_t)v1445 + 63) >> 3) & 0x3FFFFFF8) - 8 == v873;
              }
              v873 += 8;
            }
            while (!v875);
          }
          else
          {
            BOOL v503 = ((unint64_t)v1452 & v1444) != 0;
          }
          if (!v503)
          {
            v1055 = sub_1CD7F2844(*v1408, v121, v122, (llvm::APInt *)&v1442);
            if (v1055)
            {
              if (*((_DWORD *)v1055 + 2) >= 0x41u) {
                v1055 = *(llvm::APInt **)v1055;
              }
              int v1056 = v501 - *(_DWORD *)v1055;
              if (v1056 >= 0) {
                uint64_t v1057 = v1056;
              }
              else {
                uint64_t v1057 = (*(_DWORD *)v1055 - v501);
              }
              if (v1056 >= 0) {
                uint64_t v1058 = 177;
              }
              else {
                uint64_t v1058 = 175;
              }
              v1059 = sub_1CD7EBF14(*v1408, v1057, (const llvm::APInt *)&v1440, v124, v125, 0, 0);
              uint64_t v203 = v1450;
              int v202 = v1451;
              v1062 = *(uint64_t **)(v500 + 32);
              uint64_t v1063 = *v1062;
              uint64_t v1064 = v1062[1];
              uint64_t v1065 = *(void *)(*v1408 + 832);
              if (v1065) {
                LOWORD(v1065) = *(_WORD *)(v1065 + 8);
              }
              uint64_t v205 = sub_1CCFDED5C(*v1408, v1058, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v1063, v1064, v1061, (uint64_t)v1059, v1060, v1065);
              goto LABEL_263;
            }
          }
        }
        DWORD2(v1452) = v1445;
        if (v1445 > 0x40) {
          operator new[]();
        }
        unint64_t v876 = v1444 << (char)v501;
        if (v1445 == v501) {
          unint64_t v876 = 0;
        }
        if (v1445) {
          unint64_t v877 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1445;
        }
        else {
          unint64_t v877 = 0;
        }
        *(void *)&long long v1452 = v877 & v876;
        if ((*(_WORD *)(v1450 + 72) & 8) != 0)
        {
          if (v501 > 0x40)
          {
            llvm::APInt::setBitsSlowCase(&v1452, 0, v501);
          }
          else
          {
            unint64_t v878 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v501;
            if (DWORD2(v1452) > 0x40) {
              *(void *)v1452 |= v878;
            }
            else {
              *(void *)&long long v1452 = v1452 | v878;
            }
          }
        }
        char v193 = sub_1CCFFA248(v1407, v121, v122, &v1452, &v1442, a6, v1408, v127, 0);
        if ((v193 & 1) == 0)
        {
          unsigned int v879 = *((_DWORD *)a6 + 2);
          if (v879 > 0x40)
          {
            llvm::APInt::lshrSlowCase((void **)a6, v501);
          }
          else if (v879 == v501)
          {
            *a6 = 0;
          }
          else
          {
            *a6 >>= (char)v501;
          }
          unsigned int v969 = *((_DWORD *)a6 + 6);
          if (v969 > 0x40)
          {
            llvm::APInt::lshrSlowCase(v1406, v501);
          }
          else if (v969 == v501)
          {
            *v1406 = 0;
          }
          else
          {
            *v1406 = (void *)((unint64_t)*v1406 >> (char)v501);
          }
          LODWORD(v45) = *((_DWORD *)a6 + 2);
          unsigned int v970 = v45 - v501;
          if (v45 > 0x40 || v970 > 0x3F) {
            llvm::APInt::setBitsSlowCase(a6, v970, v45);
          }
          else {
            *a6 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v501 << v970;
          }
        }
        goto LABEL_237;
      case 178:
      case 179:
        uint64_t v66 = *(void *)(v23 + 32);
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *(void *)(v66 + 8);
        long long v1452 = *(_OWORD *)(v66 + 40);
        uint64_t v69 = (a8 + 1);
        if (v15 == sub_1CCFD8ECC(*v1408, v68, v67, (unsigned int *)&v1442, v69))
        {
          int v70 = v1451;
          v1408[2] = v1450;
          *((_DWORD *)v1408 + 6) = v70;
          v1408[4] = v68;
          *((_DWORD *)v1408 + 10) = v67;
          goto LABEL_2019;
        }
        uint64_t v170 = sub_1CCFD8140(v1452, DWORD2(v1452), (llvm::APInt *)&v1442, 0, 0);
        if (!v170) {
          goto LABEL_866;
        }
        unsigned int v173 = llvm::APInt::urem((uint64_t **)(*(void *)(v170 + 80) + 24), v15);
        unsigned int v174 = v173;
        unsigned int v175 = v15 - v173;
        if (v24 == 178) {
          uint64_t v176 = v173;
        }
        else {
          uint64_t v176 = v175;
        }
        llvm::APInt::rotr((llvm::APInt *)&v1444, v176, (uint64_t)__src);
        int v177 = 0;
        if (sub_1CCFFA248(v1407, v68, v67, __src, &v1442, &v1446, v1408, v69, 0)) {
          goto LABEL_862;
        }
        if (!v174)
        {
          uint64_t v308 = v1450;
          int v309 = v1451;
LABEL_406:
          int v177 = 0;
          v1408[2] = v308;
          *((_DWORD *)v1408 + 6) = v309;
          v1408[4] = v68;
          *((_DWORD *)v1408 + 10) = v67;
          goto LABEL_862;
        }
        int v178 = *((unsigned __int8 *)v1408 + 9);
        if (!*((unsigned char *)v1408 + 9)) {
          goto LABEL_198;
        }
        if (!(_BYTE)v1438) {
          goto LABEL_861;
        }
        uint64_t v179 = v1438;
        if (v1438 != 1 && !*(void *)(v1407 + 8 * v1438 + 96)
          || *(unsigned char *)(v1407 + 390 * v1438 + 4037))
        {
          goto LABEL_740;
        }
LABEL_198:
        unsigned int v1403 = v1445;
        if (v1445 > 0x40)
        {
          unsigned int v181 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1444);
        }
        else
        {
          unsigned int v180 = __clz(__rbit64(v1444));
          if (v1445 >= v180) {
            unsigned int v181 = v180;
          }
          else {
            unsigned int v181 = v1445;
          }
        }
        if (v181 >= v176)
        {
          uint64_t v880 = *(void *)(v1452 + 40) + 16 * DWORD2(v1452);
          v881 = sub_1CD7EBF14(*v1408, v176, (const llvm::APInt *)&v1440, *(llvm **)v880, *(void *)(v880 + 8), 0, 0);
          *(void *)&long long v1452 = v881;
          DWORD2(v1452) = v883;
          uint64_t v308 = v1450;
          int v309 = v1451;
          uint64_t v884 = *(void *)(*v1408 + 832);
          if (v884) {
            LOWORD(v884) = *(_WORD *)(v884 + 8);
          }
          v885 = sub_1CCFDED5C(*v1408, 175, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v68, v67, v882, (uint64_t)v881, *((uint64_t *)&v1452 + 1), v884);
        }
        else
        {
          if (v178)
          {
            uint64_t v179 = v1438;
LABEL_740:
            if (!v179) {
              goto LABEL_861;
            }
            if (v179 != 1)
            {
              int v177 = 1;
              if (!*(void *)(v1407 + 8 * v179 + 96))
              {
LABEL_862:
                if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
                  MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
                }
                if (v177)
                {
LABEL_866:
                  v172.i32[0] = v15;
                  uint8x8_t v642 = (uint8x8_t)vcnt_s8(v172);
                  v642.i16[0] = vaddlv_u8(v642);
                  if (v642.i32[0] != 1) {
                    goto LABEL_1555;
                  }
                  unsigned int v643 = sub_1CD7878C0((unsigned int *)&v1452, v171, (BOOL)v45);
                  unsigned int v557 = v643;
                  LODWORD(__src[1]) = v643;
                  if (v643 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)__src);
                  }
                  if (v643) {
                    unint64_t v644 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v643;
                  }
                  else {
                    LODWORD(v644) = 0;
                  }
                  __src[0] = (void *)(v644 & (v15 - 1));
                  uint64_t v562 = *((void *)&v1452 + 1);
                  uint64_t v561 = v1452;
                  LOBYTE(v1378) = 0;
                  uint64_t v558 = v1407;
                  char v559 = v1408;
                  uint64_t v563 = v69;
LABEL_871:
                  int v645 = sub_1CCFFA248(v558, v561, v562, __src, &v1442, &v1446, v559, v563, v1378);
                  if (v557 >= 0x41 && __src[0]) {
                    MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
                  }
                  if (!v645) {
                    goto LABEL_1555;
                  }
                }
                goto LABEL_2019;
              }
            }
            if (*(unsigned char *)(v1407 + 390 * v179 + 4039))
            {
LABEL_861:
              int v177 = 1;
              goto LABEL_862;
            }
            unsigned int v564 = v1445;
          }
          else
          {
            unsigned int v564 = v1403;
          }
          if (v564 > 0x40)
          {
            int v638 = 0;
            int64_t v639 = ((unint64_t)v564 + 63) >> 6;
            do
            {
              BOOL v50 = v639-- < 1;
              if (v50) {
                break;
              }
              unint64_t v640 = *(void *)(v1444 + 8 * v639);
              v638 += __clz(v640);
            }
            while (!v640);
            unsigned int v641 = v564 | 0xFFFFFFC0;
            if ((v564 & 0x3F) == 0) {
              unsigned int v641 = 0;
            }
            unsigned int v609 = v638 + v641;
          }
          else
          {
            unsigned int v609 = v564 + __clz(v1444) - 64;
          }
          if (v24 == 178) {
            uint64_t v171 = v175;
          }
          else {
            uint64_t v171 = v174;
          }
          if (v609 < v171) {
            goto LABEL_861;
          }
          uint64_t v953 = *(void *)(v1452 + 40) + 16 * DWORD2(v1452);
          v954 = sub_1CD7EBF14(*v1408, v171, (const llvm::APInt *)&v1440, *(llvm **)v953, *(void *)(v953 + 8), 0, 0);
          *(void *)&long long v1452 = v954;
          DWORD2(v1452) = v956;
          uint64_t v308 = v1450;
          int v309 = v1451;
          uint64_t v957 = *(void *)(*v1408 + 832);
          if (v957) {
            LOWORD(v957) = *(_WORD *)(v957 + 8);
          }
          v885 = sub_1CCFDED5C(*v1408, 177, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v68, v67, v955, (uint64_t)v954, *((uint64_t *)&v1452 + 1), v957);
        }
        uint64_t v68 = (uint64_t)v885;
        LODWORD(v67) = v171;
        goto LABEL_406;
      case 180:
      case 181:
        __int16 v82 = *(uint64_t **)(v23 + 32);
        uint64_t v84 = *v82;
        size_t v83 = v82[1];
        uint64_t v86 = v82[5];
        size_t v85 = v82[6];
        long long v1452 = *((_OWORD *)v82 + 5);
        uint64_t v87 = sub_1CCFD8140(v1452, DWORD2(v1452), (llvm::APInt *)&v1442, 0, 0);
        if (!v87) {
          goto LABEL_731;
        }
        unsigned int v90 = llvm::APInt::urem((uint64_t **)(*(void *)(v87 + 80) + 24), v15);
        if (!v90)
        {
          if (v24 == 180) {
            uint64_t v209 = v84;
          }
          else {
            uint64_t v209 = v86;
          }
          if (v24 == 180) {
            size_t v210 = v83;
          }
          else {
            size_t v210 = v85;
          }
          if ((sub_1CCFFA248(v1407, v209, v210, &v1444, &v1442, a6, v1408, (a8 + 1), 0) & 1) == 0) {
            goto LABEL_1555;
          }
          goto LABEL_2019;
        }
        __uint64_t n = v85;
        if (v24 == 180) {
          uint64_t v91 = v90;
        }
        else {
          uint64_t v91 = v15 - v90;
        }
        unsigned int v92 = v1445;
        LODWORD(__src[1]) = v1445;
        *(void *)v1386 = v91;
        if (v1445 > 0x40) {
          operator new[]();
        }
        if (v1445 == v91)
        {
          unint64_t v1398 = 0;
          __src[0] = 0;
        }
        else
        {
          unint64_t v1398 = v1444 >> v91;
          __src[0] = (void *)(v1444 >> v91);
        }
        if (v24 == 180) {
          unsigned int v93 = v15 - v90;
        }
        else {
          unsigned int v93 = v90;
        }
        v1409[2] = v1445;
        unsigned int v1385 = v93;
        unint64_t v94 = v1444 << v93;
        if (v1445 == v93) {
          unint64_t v94 = 0;
        }
        if (v1445) {
          unint64_t v95 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1445;
        }
        else {
          unint64_t v95 = 0;
        }
        *(void *)v1409 = v95 & v94;
        char v222 = sub_1CCFFA248(v1407, v84, v83, __src, &v1442, &v1446, v1408, (a8 + 1), 0);
        char v223 = 0;
        if ((v222 & 1) == 0)
        {
          LOBYTE(v1378) = 0;
          char v223 = 0;
          if ((sub_1CCFFA248(v1407, v86, __n, v1409, &v1442, a6, v1408, (a8 + 1), v1378) & 1) == 0)
          {
            if (v1449 > 0x40)
            {
              llvm::APInt::shlSlowCase((llvm::APInt *)&v1448, v1386[0]);
              uint64_t v88 = *(void *)v1386;
            }
            else
            {
              uint64_t v88 = *(void *)v1386;
              unint64_t v224 = v1448 << SLOBYTE(v1386[0]);
              if (v1449 == v1386[0]) {
                unint64_t v224 = 0;
              }
              if (v1449) {
                unint64_t v225 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1449;
              }
              else {
                unint64_t v225 = 0;
              }
              unint64_t v1448 = v225 & v224;
            }
            if (v1447 > 0x40)
            {
              llvm::APInt::shlSlowCase((llvm::APInt *)&v1446, v88);
            }
            else
            {
              unint64_t v226 = v1446 << v88;
              if (v1447 == v88) {
                unint64_t v226 = 0;
              }
              if (v1447) {
                unint64_t v227 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1447;
              }
              else {
                unint64_t v227 = 0;
              }
              unint64_t v1446 = v227 & v226;
            }
            unsigned int v228 = *((_DWORD *)a6 + 6);
            if (v228 > 0x40)
            {
              llvm::APInt::lshrSlowCase(v1406, v1385);
            }
            else if (v228 == v1385)
            {
              *v1406 = 0;
            }
            else
            {
              *v1406 = (void *)((unint64_t)*v1406 >> v1385);
            }
            unsigned int v545 = *((_DWORD *)a6 + 2);
            if (v545 > 0x40)
            {
              llvm::APInt::lshrSlowCase((void **)a6, v1385);
            }
            else if (v545 == v1385)
            {
              *a6 = 0;
            }
            else
            {
              *a6 >>= v1385;
            }
            uint64_t v546 = *((unsigned int *)a6 + 6);
            if (v546 > 0x40)
            {
              uint64_t v547 = *v1406;
              int v548 = (uint64_t *)v1448;
              unint64_t v549 = (unint64_t)(v546 + 63) >> 6;
              do
              {
                uint64_t v550 = *v548++;
                *v547++ |= v550;
                --v549;
              }
              while (v549);
            }
            else
            {
              *v1406 = (void *)((unint64_t)*v1406 | v1448);
            }
            uint64_t v551 = *((unsigned int *)a6 + 2);
            if (v551 > 0x40)
            {
              int v552 = (void *)*a6;
              int64_t v553 = (uint64_t *)v1446;
              unint64_t v554 = (unint64_t)(v551 + 63) >> 6;
              char v223 = 1;
              do
              {
                uint64_t v555 = *v553++;
                *v552++ |= v555;
                --v554;
              }
              while (v554);
            }
            else
            {
              *a6 |= v1446;
              char v223 = 1;
            }
          }
        }
        if (v1409[2] >= 0x41u && *(void *)v1409) {
          MEMORY[0x1D25D9CB0](*(void *)v1409, 0x1000C8000313F17);
        }
        if (v92 >= 0x41 && v1398) {
          MEMORY[0x1D25D9CB0](v1398, 0x1000C8000313F17);
        }
        if ((v223 & 1) == 0) {
          goto LABEL_2019;
        }
LABEL_731:
        v89.i32[0] = v15;
        uint8x8_t v556 = (uint8x8_t)vcnt_s8(v89);
        v556.i16[0] = vaddlv_u8(v556);
        if (v556.i32[0] != 1) {
          goto LABEL_1555;
        }
        unsigned int v557 = sub_1CD7878C0((unsigned int *)&v1452, v88, (BOOL)v45);
        LODWORD(__src[1]) = v557;
        if (v557 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)__src);
        }
        uint64_t v558 = v1407;
        char v559 = v1408;
        if (v557) {
          unint64_t v560 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v557;
        }
        else {
          LODWORD(v560) = 0;
        }
        __src[0] = (void *)(v560 & (v15 - 1));
        uint64_t v562 = *((void *)&v1452 + 1);
        uint64_t v561 = v1452;
        uint64_t v563 = (a8 + 1);
        LOBYTE(v1378) = 0;
        goto LABEL_871;
      case 182:
        int v109 = *(uint64_t **)(v23 + 32);
        uint64_t v111 = *v109;
        uint64_t v110 = v109[1];
        if (v1445 > 0x40)
        {
          int v186 = 0;
          int64_t v187 = ((unint64_t)v1445 + 63) >> 6;
          uint64_t v115 = v1408;
          do
          {
            BOOL v50 = v187-- < 1;
            if (v50) {
              break;
            }
            unint64_t v188 = *(void *)(v1444 + 8 * v187);
            v186 += __clz(v188);
          }
          while (!v188);
          if ((v1445 & 0x3F) != 0) {
            unsigned int v189 = v1445 | 0xFFFFFFC0;
          }
          else {
            unsigned int v189 = 0;
          }
          int v112 = v186 + v189;
          int v114 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1444);
        }
        else
        {
          int v112 = v1445 + __clz(v1444) - 64;
          unsigned int v113 = __clz(__rbit64(v1444));
          if (v1445 >= v113) {
            int v114 = v113;
          }
          else {
            int v114 = v1445;
          }
          uint64_t v115 = v1408;
        }
        unsigned int v190 = v112 & 0xFFFFFFF8;
        unsigned int v191 = v114 & 0xFFFFFFF8;
        if (v15 - (v114 & 0xFFFFFFF8) - v190 == 8)
        {
          uint64_t v192 = v190 <= v191 ? 175 : 177;
          if (!*((unsigned char *)v115 + 9)
            || (_BYTE)v1438
            && (v1438 == 1 || *(void *)(v1407 + 8 * v1438 + 96))
            && !*(unsigned char *)(v1407 + 390 * v1438 + v192 + 3862))
          {
            v602 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1407, (uint64_t)v1438, (uint64_t)v1439, v65, 1);
            unsigned int v603 = v190 - v191;
            if (v190 <= v191) {
              unsigned int v603 = v191 - v190;
            }
            unint64_t v604 = sub_1CD7EBF14(*v115, v603 & 0xFFFFFFF8, (const llvm::APInt *)&v1440, v602, v601, 0, 0);
            uint64_t v607 = *(void *)(*v115 + 832);
            if (v607) {
              LOWORD(v607) = *(_WORD *)(v607 + 8);
            }
            uint64_t v275 = sub_1CCFDED5C(*v115, v192, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v111, v110, v606, (uint64_t)v604, v605, v607);
            goto LABEL_1885;
          }
        }
        llvm::APInt::byteSwap((llvm::APInt *)&v1444, (uint64_t)&v1452);
        char v193 = sub_1CCFFA248(v1407, v111, v110, &v1452, &v1442, &v1446, v115, (a8 + 1), 0);
        if ((v193 & 1) == 0)
        {
          llvm::APInt::byteSwap((llvm::APInt *)&v1448, (uint64_t)__src);
          if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
            MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
          }
          a6[2] = (unint64_t)__src[0];
          *((_DWORD *)a6 + 6) = __src[1];
          llvm::APInt::byteSwap((llvm::APInt *)&v1446, (uint64_t)__src);
          if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
            MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
          }
          *a6 = (unint64_t)__src[0];
          *((_DWORD *)a6 + 2) = __src[1];
        }
LABEL_237:
        if (DWORD2(v1452) >= 0x41 && (void)v1452) {
          MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
        }
        if (v193) {
          goto LABEL_2019;
        }
        goto LABEL_1555;
      case 185:
        if (v1445 > 0x40)
        {
          int v194 = 0;
          int64_t v195 = ((unint64_t)v1445 + 63) >> 6;
          unint64_t v139 = v1408;
          do
          {
            BOOL v50 = v195-- < 1;
            if (v50) {
              break;
            }
            unint64_t v196 = *(void *)(v1444 + 8 * v195);
            v194 += __clz(v196);
          }
          while (!v196);
          unsigned int v197 = v1445 | 0xFFFFFFC0;
          if ((v1445 & 0x3F) == 0) {
            unsigned int v197 = 0;
          }
          BOOL v138 = v194 + v197 == v1445 - 1;
        }
        else
        {
          BOOL v138 = v1444 == 1;
          unint64_t v139 = v1408;
        }
        BOOL v198 = v138 && *((unsigned char *)v139 + 9) == 0;
        if (!v198) {
          goto LABEL_347;
        }
        if ((_BYTE)v1438)
        {
          if (v1438 - 15 >= 0x9C)
          {
            uint64_t v199 = (uint64_t)v1439;
            goto LABEL_351;
          }
        }
        else
        {
          uint64_t v199 = (uint64_t)v1439;
          if ((*((_DWORD *)v1439 + 2) & 0xFE) != 0x12)
          {
LABEL_351:
            int v255 = v1451;
            uint64_t v256 = *(uint64_t **)(v23 + 32);
            uint64_t v257 = *v256;
            uint64_t v258 = (void *)v256[1];
            uint64_t v259 = *(void *)(*v139 + 832);
            if (v259) {
              __int16 v260 = *(_WORD *)(v259 + 8);
            }
            else {
              __int16 v260 = 0;
            }
            uint64_t v312 = sub_1CD7F3564((llvm::APFloatBase *)*v139, (const char *)0xBB, (uint64_t)&v1440, v1438, v199, v257, v258, v260);
LABEL_415:
            v139[2] = v23;
            *((_DWORD *)v139 + 6) = v255;
            v139[4] = (uint64_t)v312;
            *((_DWORD *)v139 + 10) = v313;
            goto LABEL_2019;
          }
        }
LABEL_347:
        uint64_t v182 = (llvm::APFloatBase *)*v139;
        goto LABEL_348;
      case 186:
        uint64_t v116 = *(uint64_t **)(v23 + 32);
        uint64_t v117 = *v116;
        uint64_t v118 = v116[1];
        llvm::APInt::reverseBits((unsigned int *)&v1444, (llvm::APInt *)&v1452);
        if (sub_1CCFFA248(v1407, v117, v118, &v1452, &v1442, &v1446, v1408, (a8 + 1), 0)) {
          goto LABEL_356;
        }
        llvm::APInt::reverseBits((unsigned int *)&v1448, (llvm::APInt *)__src);
        if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
          MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
        }
        a6[2] = (unint64_t)__src[0];
        *((_DWORD *)a6 + 6) = __src[1];
        llvm::APInt::reverseBits((unsigned int *)&v1446, (llvm::APInt *)__src);
        if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
          MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
        }
        *a6 = (unint64_t)__src[0];
        *((_DWORD *)a6 + 2) = __src[1];
        goto LABEL_154;
      case 190:
        if ((sub_1CD80E454(v1407, *(void *)(*(void *)(v23 + 32) + 80), *(void *)(*(void *)(v23 + 32) + 88), &v1444, a6, v1408, (a8 + 1), 0) & 1) != 0|| (sub_1CD80E454(v1407, *(void *)(*(void *)(v1450 + 32) + 40), *(void *)(*(void *)(v1450 + 32) + 48), &v1444, &v1446, v1408, (a8 + 1), 0) & 1) != 0|| sub_1CD80DE6C(v1407, v1450, v1451, (uint64_t)&v1444, (uint64_t)&v1442, v1408))
        {
          goto LABEL_2019;
        }
        unsigned int v442 = *((_DWORD *)a6 + 2);
        if (v442 > 0x40) {
          operator new[]();
        }
        unint64_t v443 = v1446 & *a6;
        unsigned int v444 = *((_DWORD *)a6 + 6);
        if (v444 > 0x40) {
          operator new[]();
        }
        goto LABEL_589;
      case 192:
        if ((sub_1CD80E454(v1407, *(void *)(*(void *)(v23 + 32) + 120), *(void *)(*(void *)(v23 + 32) + 128), &v1444, a6, v1408, (a8 + 1), 0) & 1) != 0|| (sub_1CD80E454(v1407, *(void *)(*(void *)(v1450 + 32) + 80), *(void *)(*(void *)(v1450 + 32) + 88), &v1444, &v1446, v1408, (a8 + 1), 0) & 1) != 0|| sub_1CD80DE6C(v1407, v1450, v1451, (uint64_t)&v1444, (uint64_t)&v1442, v1408))
        {
          goto LABEL_2019;
        }
        unsigned int v442 = *((_DWORD *)a6 + 2);
        if (v442 > 0x40) {
          operator new[]();
        }
        unint64_t v443 = v1446 & *a6;
        unsigned int v444 = *((_DWORD *)a6 + 6);
        if (v444 > 0x40) {
          operator new[]();
        }
LABEL_589:
        unint64_t v460 = v1448 & (unint64_t)*v1406;
        if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
          MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
        }
        *a6 = v443;
        *((_DWORD *)a6 + 2) = v442;
        if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
          MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
        }
        a6[2] = v460;
        *((_DWORD *)a6 + 6) = v444;
        goto LABEL_1555;
      case 193:
        uint64_t v343 = *(long long **)(v23 + 32);
        long long v1452 = *v343;
        uint64_t v344 = *((void *)v343 + 5);
        uint64_t v345 = *((void *)v343 + 6);
        int v346 = *(_DWORD *)(*((void *)v343 + 10) + 76);
        if (v1445 > 0x40)
        {
          uint64_t v347 = (unsigned int *)v1407;
          if (((*(void *)(v1444 + 8 * ((v1445 - 1) >> 6)) >> (v1445 - 1)) & 1) == 0) {
            goto LABEL_457;
          }
          unsigned int v1274 = v1445 - 1;
          if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1444) != v1274) {
            goto LABEL_457;
          }
        }
        else
        {
          uint64_t v347 = (unsigned int *)v1407;
          if (v1444 != 1 << (v1445 - 1)) {
            goto LABEL_457;
          }
        }
        if (sub_1CD7878C0((unsigned int *)&v1452, (uint64_t)v44, (BOOL)v45) != (llvm::Type *)v15) {
          goto LABEL_457;
        }
        int v348 = (void *)(*(void *)(v1452 + 40) + 16 * DWORD2(v1452));
        if (sub_1CD7879C8(v347, *v348, v348[1]) != 2 || v346 != 20) {
          goto LABEL_457;
        }
        v795 = (unsigned __int8 *)(*(void *)(v344 + 40) + 16 * v345);
        int v796 = *v795;
        if (*v795)
        {
          BOOL v931 = (v796 - 120) >= 0x20 && (v796 - 2) >= 6;
          uint64_t v347 = (unsigned int *)v1407;
          if (v931 && (v796 - 15) >= 0x3C) {
            goto LABEL_457;
          }
        }
        else
        {
          uint64_t v797 = *((void *)v795 + 1);
          if ((*(_DWORD *)(v797 + 8) & 0xFE) == 0x12) {
            int v798 = *(unsigned __int8 *)(**(void **)(v797 + 16) + 8);
          }
          else {
            int v798 = *(_DWORD *)(v797 + 8);
          }
          uint64_t v347 = (unsigned int *)v1407;
          if (v798 != 13) {
            goto LABEL_457;
          }
        }
        if (sub_1CD7F2D2C(v344) || sub_1CCFCBB88(v344, 1, v932))
        {
          int v933 = v1451;
          long long v934 = v1452;
          v1408[2] = v1450;
          *((_DWORD *)v1408 + 6) = v933;
          v1408[4] = v934;
          *((_DWORD *)v1408 + 10) = DWORD2(v934);
          goto LABEL_2019;
        }
LABEL_457:
        int v350 = (void *)(*(void *)(v1452 + 40) + 16 * DWORD2(v1452));
        int v351 = sub_1CD7879C8(v347, *v350, v350[1]);
        if (v15 >= 2 && v351 == 1)
        {
          LODWORD(v45) = *((_DWORD *)a6 + 2);
          if (v45 != 1)
          {
            if (v45 > 0x40) {
              llvm::APInt::setBitsSlowCase(a6, 1u, v45);
            }
            else {
              *a6 |= 2 * (0xFFFFFFFFFFFFFFFFLL >> (65 - v45));
            }
          }
        }
        goto LABEL_1555;
      case 198:
      case 206:
        int v303 = *(uint64_t **)(v23 + 32);
        uint64_t v297 = *v303;
        int v296 = (void *)v303[1];
        *(_OWORD *)v1409 = *(_OWORD *)(*(void *)(*v303 + 40) + 16 * v296);
        unsigned int v305 = sub_1CD3E12F4((unsigned __int8 *)v1409, (uint64_t)v44, (BOOL)v45);
        if (LOBYTE(v1409[0]))
        {
          int v300 = v1408;
          if (LOBYTE(v1409[0]) - 15 >= 0x9C)
          {
LABEL_402:
            unsigned int v306 = 1;
            goto LABEL_403;
          }
        }
        else
        {
          int v300 = v1408;
          if ((*(_DWORD *)(*(void *)&v1409[2] + 8) & 0xFE) != 0x12) {
            goto LABEL_402;
          }
        }
        unsigned int v306 = sub_1CD3DB440((llvm::EVT *)v1409, v304);
LABEL_403:
        if (v1445 > 0x40)
        {
          int v483 = 0;
          int64_t v484 = ((unint64_t)v1445 + 63) >> 6;
          do
          {
            BOOL v50 = v484-- < 1;
            if (v50) {
              break;
            }
            unint64_t v485 = *(void *)(v1444 + 8 * v484);
            v483 += __clz(v485);
          }
          while (!v485);
          unsigned int v486 = v1445 | 0xFFFFFFC0;
          if ((v1445 & 0x3F) == 0) {
            unsigned int v486 = 0;
          }
          int v307 = v483 + v486;
        }
        else
        {
          int v307 = v1445 + __clz(v1444) - 64;
        }
        int v487 = *(unsigned __int16 *)(v1450 + 24);
        if (v1445 - v307 > v305) {
          goto LABEL_635;
        }
        if (v20 || v487 != 206) {
          goto LABEL_1403;
        }
        unint64_t v492 = v1442;
        if (v1443 < 0x41) {
          goto LABEL_656;
        }
        int v493 = 0;
        int64_t v494 = ((unint64_t)v1443 + 63) >> 6;
        do
        {
          BOOL v50 = v494-- < 1;
          if (v50) {
            break;
          }
          unint64_t v495 = *(void *)(v1442 + 8 * v494);
          v493 += __clz(v495);
        }
        while (!v495);
        unsigned int v496 = v1443 | 0xFFFFFFC0;
        if ((v1443 & 0x3F) == 0) {
          unsigned int v496 = 0;
        }
        int v300 = v1408;
        if (v1443 - v493 - v496 <= 0x40)
        {
          unint64_t v492 = *(void *)v1442;
LABEL_656:
          if (v492 == 1)
          {
            unint64_t v497 = (_BYTE)v1438
                 ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)&v1438)
                 : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1438);
            v912 = v497;
            int v913 = v498;
            v914 = LOBYTE(v1409[0])
                 ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)v1409)
                 : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1409);
            BOOL v198 = v912 == v914;
            int v300 = v1408;
            if (v198 && v913 == v915) {
              goto LABEL_1662;
            }
          }
        }
LABEL_1403:
        if (v487 == 206) {
          uint64_t v910 = 205;
        }
        else {
          uint64_t v910 = 200;
        }
        v911 = v1438;
        if (!*((unsigned char *)v300 + 9)
          || (_BYTE)v1438
          && (v1438 == 1 || *(void *)(v1407 + 8 * v1438 + 96))
          && !*(unsigned char *)(v1407 + 390 * v1438 + v910 + 3862))
        {
          goto LABEL_1411;
        }
LABEL_635:
        if (v305 > 0x40)
        {
          if (v1445 != v305) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v1437, (uint64_t)&v1444);
          int v300 = v1408;
        }
        else
        {
          if (v1445 >= 0x41) {
            int v488 = (unint64_t *)v1444;
          }
          else {
            int v488 = &v1444;
          }
          unint64_t v489 = *v488;
          DWORD2(v1437) = v305;
          if (v305) {
            unint64_t v490 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v305;
          }
          else {
            unint64_t v490 = 0;
          }
          *(void *)&long long v1437 = v490 & v489;
        }
        if (v1443 < v306)
        {
          if (v306 > 0x40) {
            operator new[]();
          }
          LODWORD(v1433) = v306;
          v1432 = (long long *)(v1442 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v306));
          int v300 = v1408;
        }
        else
        {
          LODWORD(v1433) = v1443;
          if (v1443 > 0x40) {
            operator new[]();
          }
          v1432 = (long long *)v1442;
        }
        uint64_t v491 = 1 << (v305 - 1);
        if (DWORD2(v1437) > 0x40) {
          *(void *)(v1437 + 8 * ((v305 - 1) >> 6)) |= v491;
        }
        else {
          *(void *)&long long v1437 = v1437 | v491;
        }
        uint64_t v565 = (a8 + 1);
        char v566 = sub_1CCFFA248(v1407, v297, v296, &v1437, &v1432, a6, v300, v565, 0);
        char v327 = 0;
        if (v566) {
          goto LABEL_1458;
        }
        llvm::APInt::sext((uint64_t)a6, v15, (uint64_t)&v1452);
        llvm::APInt::sext((uint64_t)v1406, v15, (uint64_t)__src);
        unsigned int v567 = DWORD2(v1452);
        uint64_t v568 = (char *)v1452;
        int v569 = (int)__src[1];
        uint64_t v570 = __src[0];
        if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
          MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
        }
        *a6 = (unint64_t)v568;
        *((_DWORD *)a6 + 2) = v567;
        if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406)
        {
          MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
          unsigned int v567 = *((_DWORD *)a6 + 2);
          uint64_t v568 = (char *)*a6;
        }
        a6[2] = (unint64_t)v570;
        *((_DWORD *)a6 + 6) = v569;
        uint64_t v571 = (unint64_t *)&v568[8 * ((v567 - 1) >> 6)];
        if (v567 < 0x41) {
          uint64_t v571 = a6;
        }
        if (((*v571 >> (v567 - 1)) & 1) != 0
          && (v487 != 206 ? (uint64_t v572 = 199) : (uint64_t v572 = 207),
              (int v573 = v1438, !*((unsigned char *)v1408 + 9))
           || (_BYTE)v1438
           && (v1438 == 1 || *(void *)(v1407 + 8 * v1438 + 96))
           && !*(unsigned char *)(v1407 + 390 * v1438 + v572 + 3862)))
        {
          uint64_t v578 = v1450;
          int v579 = v1451;
          int v580 = (llvm::APFloatBase *)*v1408;
          uint64_t v581 = (uint64_t)v1439;
          uint64_t v692 = *(void *)(*v1408 + 832);
          if (v692) {
            __int16 v583 = *(_WORD *)(v692 + 8);
          }
          else {
            __int16 v583 = 0;
          }
          uint64_t v576 = v297;
          uint64_t v577 = v296;
        }
        else
        {
          uint64_t v574 = sub_1CD005E7C((unsigned int *)v1407, v297, (BOOL)v296, (uint64_t)&v1437, (unsigned int *)&v1432, *v1408, v565);
          if (!v574)
          {
LABEL_1457:
            char v327 = 1;
            goto LABEL_1458;
          }
          uint64_t v576 = (uint64_t)v574;
          uint64_t v577 = v575;
          uint64_t v578 = v1450;
          int v579 = v1451;
          int v580 = (llvm::APFloatBase *)*v1408;
          uint64_t v572 = *(unsigned __int16 *)(v1450 + 24);
          int v573 = v1438;
          uint64_t v581 = (uint64_t)v1439;
          uint64_t v582 = *(void *)(*v1408 + 832);
          if (v582) {
            __int16 v583 = *(_WORD *)(v582 + 8);
          }
          else {
            __int16 v583 = 0;
          }
        }
        v886 = sub_1CD7F3564(v580, (const char *)v572, (uint64_t)&v1440, v573, v581, v576, v577, v583);
        char v327 = 0;
        v1408[2] = v578;
        *((_DWORD *)v1408 + 6) = v579;
        v1408[4] = (uint64_t)v886;
        *((_DWORD *)v1408 + 10) = v887;
LABEL_1458:
        if (v1433 >= 0x41 && v1432) {
          MEMORY[0x1D25D9CB0](v1432, 0x1000C8000313F17);
        }
LABEL_1461:
        if (DWORD2(v1437) >= 0x41)
        {
          v951 = (void *)v1437;
          if ((void)v1437) {
LABEL_1463:
          }
            MEMORY[0x1D25D9CB0](v951, 0x1000C8000313F17);
        }
LABEL_1464:
        if ((v327 & 1) == 0) {
          goto LABEL_2019;
        }
        goto LABEL_1555;
      case 199:
      case 207:
        int v295 = *(uint64_t **)(v23 + 32);
        uint64_t v297 = *v295;
        int v296 = (void *)v295[1];
        *(_OWORD *)unint64_t __src = *(_OWORD *)(*(void *)(*v295 + 40) + 16 * v296);
        unsigned int v299 = sub_1CD3E12F4((unsigned __int8 *)__src, (uint64_t)v44, (BOOL)v45);
        if (LOBYTE(__src[0]))
        {
          int v300 = v1408;
          if (LOBYTE(__src[0]) - 15 >= 0x9C)
          {
LABEL_397:
            unsigned int v301 = 1;
            goto LABEL_398;
          }
        }
        else
        {
          int v300 = v1408;
          if ((*((_DWORD *)__src[1] + 2) & 0xFE) != 0x12) {
            goto LABEL_397;
          }
        }
        unsigned int v301 = sub_1CD3DB440((llvm::EVT *)__src, v298);
LABEL_398:
        if (v1445 > 0x40)
        {
          int v461 = 0;
          int64_t v462 = ((unint64_t)v1445 + 63) >> 6;
          do
          {
            BOOL v50 = v462-- < 1;
            if (v50) {
              break;
            }
            unint64_t v463 = *(void *)(v1444 + 8 * v462);
            v461 += __clz(v463);
          }
          while (!v463);
          unsigned int v464 = v1445 | 0xFFFFFFC0;
          if ((v1445 & 0x3F) == 0) {
            unsigned int v464 = 0;
          }
          int v302 = v461 + v464;
        }
        else
        {
          int v302 = v1445 + __clz(v1444) - 64;
        }
        if (v1445 - v302 > v299) {
          goto LABEL_599;
        }
        int v475 = *(unsigned __int16 *)(v1450 + 24);
        if (v20 || v475 != 207) {
          goto LABEL_1387;
        }
        unint64_t v476 = v1442;
        if (v1443 < 0x41) {
          goto LABEL_625;
        }
        int v477 = 0;
        int64_t v478 = ((unint64_t)v1443 + 63) >> 6;
        do
        {
          BOOL v50 = v478-- < 1;
          if (v50) {
            break;
          }
          unint64_t v479 = *(void *)(v1442 + 8 * v478);
          v477 += __clz(v479);
        }
        while (!v479);
        unsigned int v480 = v1443 | 0xFFFFFFC0;
        if ((v1443 & 0x3F) == 0) {
          unsigned int v480 = 0;
        }
        int v300 = v1408;
        if (v1443 - v477 - v480 > 0x40) {
          goto LABEL_1387;
        }
        unint64_t v476 = *(void *)v1442;
LABEL_625:
        if (v476 == 1
          && (!(_BYTE)v1438
            ? (uint64_t v481 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1438))
            : (uint64_t v481 = sub_1CB87E200((unsigned __int8 *)&v1438)),
              (uint64_t v906 = v481, v907 = v482, !LOBYTE(__src[0]))
            ? (uint64_t v908 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src))
            : (uint64_t v908 = sub_1CB87E200((unsigned __int8 *)__src)),
              (v198 = v906 == v908, int v300 = v1408, v198) && v907 == v909))
        {
LABEL_1662:
          uint64_t v916 = v1450;
          int v917 = v1451;
          uint64_t v920 = sub_1CD7EF724(*v300, (uint64_t)v1438, (uint64_t)v1439, v297, (uint64_t)v296);
        }
        else
        {
LABEL_1387:
          if (v475 == 207) {
            uint64_t v910 = 205;
          }
          else {
            uint64_t v910 = 200;
          }
          v911 = v1438;
          if (*((unsigned char *)v300 + 9)
            && (!(_BYTE)v1438
             || v1438 != 1 && !*(void *)(v1407 + 8 * v1438 + 96)
             || *(unsigned char *)(v1407 + 390 * v1438 + v910 + 3862)))
          {
LABEL_599:
            if (v299 > 0x40)
            {
              if (v1445 != v299) {
                operator new[]();
              }
              sub_1CD0463BC((uint64_t)v1409, (uint64_t)&v1444);
              int v300 = v1408;
            }
            else
            {
              if (v1445 >= 0x41) {
                __int16 v465 = (unint64_t *)v1444;
              }
              else {
                __int16 v465 = &v1444;
              }
              unint64_t v466 = *v465;
              v1409[2] = v299;
              if (v299) {
                unint64_t v467 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v299;
              }
              else {
                unint64_t v467 = 0;
              }
              *(void *)v1409 = v467 & v466;
            }
            if (v1443 < v301)
            {
              if (v301 > 0x40) {
                operator new[]();
              }
              DWORD2(v1437) = v301;
              *(void *)&long long v1437 = v1442 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v301);
              int v300 = v1408;
            }
            else
            {
              DWORD2(v1437) = v1443;
              if (v1443 > 0x40) {
                operator new[]();
              }
              *(void *)&long long v1437 = v1442;
            }
            uint64_t v468 = (a8 + 1);
            char v240 = 0;
            if ((sub_1CCFFA248(v1407, v297, v296, v1409, &v1437, a6, v300, v468, 0) & 1) == 0)
            {
              sub_1CB9F87DC((uint64_t *)a6, v15, (uint64_t)&v1452);
              if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
                MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
              }
              *a6 = v1452;
              *((_DWORD *)a6 + 2) = DWORD2(v1452);
              DWORD2(v1452) = 0;
              if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406)
              {
                MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
                unsigned int v1273 = DWORD2(v1452);
                a6[2] = v1453;
                *((_DWORD *)a6 + 6) = v1454;
                unsigned int v1454 = 0;
                if (v1273 >= 0x41 && (void)v1452) {
                  MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
                }
              }
              else
              {
                a6[2] = v1453;
                *((_DWORD *)a6 + 6) = v1454;
              }
              uint64_t v469 = sub_1CD005E7C((unsigned int *)v1407, v297, (BOOL)v296, (uint64_t)v1409, (unsigned int *)&v1437, *v1408, v468);
              if (v469)
              {
                uint64_t v471 = v1450;
                int v472 = v1451;
                uint64_t v473 = *(void *)(*v1408 + 832);
                if (v473) {
                  __int16 v474 = *(_WORD *)(v473 + 8);
                }
                else {
                  __int16 v474 = 0;
                }
                v718 = sub_1CD7F3564((llvm::APFloatBase *)*v1408, (const char *)*(unsigned __int16 *)(v1450 + 24), (uint64_t)&v1440, v1438, (uint64_t)v1439, (uint64_t)v469, v470, v474);
                char v240 = 0;
                v1408[2] = v471;
                *((_DWORD *)v1408 + 6) = v472;
                v1408[4] = (uint64_t)v718;
                *((_DWORD *)v1408 + 10) = v719;
              }
              else
              {
                char v240 = 1;
              }
            }
            if (DWORD2(v1437) >= 0x41 && (void)v1437) {
              MEMORY[0x1D25D9CB0](v1437, 0x1000C8000313F17);
            }
            if (v1409[2] >= 0x41u)
            {
              unsigned int v431 = *(long long **)v1409;
              if (*(void *)v1409) {
                goto LABEL_1553;
              }
            }
            goto LABEL_1554;
          }
LABEL_1411:
          uint64_t v916 = v1450;
          int v917 = v1451;
          uint64_t v918 = *(void *)(*v300 + 832);
          if (v918) {
            __int16 v919 = *(_WORD *)(v918 + 8);
          }
          else {
            __int16 v919 = 0;
          }
          uint64_t v920 = (uint64_t)sub_1CD7F3564((llvm::APFloatBase *)*v300, (const char *)v910, (uint64_t)&v1440, v911, (uint64_t)v1439, v297, v296, v919);
        }
        v1408[2] = v916;
        *((_DWORD *)v1408 + 6) = v917;
        v1408[4] = v920;
        uint64_t v19 = 1;
        *((_DWORD *)v1408 + 10) = v921;
        goto LABEL_2020;
      case 200:
      case 205:
        uint64_t v281 = *(uint64_t **)(v23 + 32);
        uint64_t v283 = *v281;
        uint64_t v282 = v281[1];
        *(_OWORD *)v1409 = *(_OWORD *)(*(void *)(*v281 + 40) + 16 * v282);
        unsigned int v285 = sub_1CD3E12F4((unsigned __int8 *)v1409, (uint64_t)v44, (BOOL)v45);
        if (LOBYTE(v1409[0]))
        {
          BOOL v149 = v1408;
          if (LOBYTE(v1409[0]) - 15 >= 0x9C) {
            goto LABEL_382;
          }
        }
        else
        {
          BOOL v149 = v1408;
          if ((*(_DWORD *)(*(void *)&v1409[2] + 8) & 0xFE) != 0x12)
          {
LABEL_382:
            unsigned int v286 = 1;
            if (v20) {
              goto LABEL_1078;
            }
            goto LABEL_383;
          }
        }
        unsigned int v286 = sub_1CD3DB440((llvm::EVT *)v1409, v284);
        if (v20) {
          goto LABEL_1078;
        }
LABEL_383:
        if (*(_WORD *)(v1450 + 24) != 205) {
          goto LABEL_1078;
        }
        unint64_t v287 = v1442;
        if (v1443 < 0x41) {
          goto LABEL_392;
        }
        int v288 = 0;
        int64_t v289 = ((unint64_t)v1443 + 63) >> 6;
        do
        {
          BOOL v50 = v289-- < 1;
          if (v50) {
            break;
          }
          unint64_t v290 = *(void *)(v1442 + 8 * v289);
          v288 += __clz(v290);
        }
        while (!v290);
        unsigned int v291 = v1443 | 0xFFFFFFC0;
        if ((v1443 & 0x3F) == 0) {
          unsigned int v291 = 0;
        }
        if (v1443 - v288 - v291 <= 0x40)
        {
          unint64_t v287 = *(void *)v1442;
LABEL_392:
          if (v287 == 1)
          {
            uint64_t v292 = v282;
            uint64_t v293 = (_BYTE)v1438
                 ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)&v1438)
                 : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1438);
            v742 = v293;
            int v743 = v294;
            v744 = LOBYTE(v1409[0])
                 ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)v1409)
                 : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v1409);
            BOOL v198 = v742 == v744;
            BOOL v149 = v1408;
            uint64_t v282 = v292;
            if (v198 && v743 == v745)
            {
              uint64_t v1036 = v1450;
              int v1037 = v1451;
              uint64_t v527 = sub_1CD7EF724(*v1408, (uint64_t)v1438, (uint64_t)v1439, v283, v282);
              v1408[2] = v1036;
              *((_DWORD *)v1408 + 6) = v1037;
              goto LABEL_693;
            }
          }
        }
LABEL_1078:
        if (v285 > 0x40)
        {
          if (v1445 != v285) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v1437, (uint64_t)&v1444);
          BOOL v149 = v1408;
          v746 = a6 + 2;
        }
        else
        {
          v746 = a6 + 2;
          if (v1445 >= 0x41) {
            v747 = (unint64_t *)v1444;
          }
          else {
            v747 = &v1444;
          }
          unint64_t v748 = *v747;
          DWORD2(v1437) = v285;
          if (v285) {
            unint64_t v749 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v285;
          }
          else {
            unint64_t v749 = 0;
          }
          *(void *)&long long v1437 = v749 & v748;
        }
        if (v1443 < v286)
        {
          if (v286 > 0x40) {
            operator new[]();
          }
          LODWORD(v1433) = v286;
          v1432 = (long long *)(v1442 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v286));
          BOOL v149 = v1408;
          v746 = a6 + 2;
        }
        else
        {
          LODWORD(v1433) = v1443;
          if (v1443 > 0x40) {
            operator new[]();
          }
          v1432 = (long long *)v1442;
        }
        uint64_t v750 = (a8 + 1);
        char v240 = 0;
        if ((sub_1CCFFA248(v1407, v283, v282, &v1437, &v1432, a6, v149, v750, 0) & 1) == 0)
        {
          unint64_t v751 = *a6;
          DWORD2(v1452) = v15;
          if (v15)
          {
            unint64_t v752 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
            *(void *)&long long v1452 = v752 & v751;
          }
          else
          {
            unint64_t v752 = 0;
            *(void *)&long long v1452 = 0;
          }
          unint64_t v753 = v752 & *v746;
          int v754 = DWORD2(v1452);
          unint64_t v755 = v1452;
          if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
            MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
          }
          *a6 = v755;
          *((_DWORD *)a6 + 2) = v754;
          if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
            MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
          }
          a6[2] = v753;
          *((_DWORD *)a6 + 6) = v15;
          v756 = sub_1CD005E7C((unsigned int *)v1407, v283, v282, (uint64_t)&v1437, (unsigned int *)&v1432, *v149, v750);
          if (v756)
          {
            uint64_t v758 = (uint64_t)v756;
            v759 = (llvm::APFloatBase **)v149;
            uint64_t v760 = v1450;
            int v761 = v1451;
            v762 = *v759;
            uint64_t v763 = *((void *)*v759 + 104);
            if (v763) {
              __int16 v764 = *(_WORD *)(v763 + 8);
            }
            else {
              __int16 v764 = 0;
            }
            v765 = sub_1CD7F3564(v762, (const char *)*(unsigned __int16 *)(v1450 + 24), (uint64_t)&v1440, v1438, (uint64_t)v1439, v758, v757, v764);
            char v240 = 0;
            v1408[2] = v760;
            *((_DWORD *)v1408 + 6) = v761;
            v1408[4] = (uint64_t)v765;
            *((_DWORD *)v1408 + 10) = v766;
          }
          else
          {
            char v240 = 1;
          }
        }
        if (v1433 >= 0x41 && v1432) {
          MEMORY[0x1D25D9CB0](v1432, 0x1000C8000313F17);
        }
        if (DWORD2(v1437) >= 0x41)
        {
          unsigned int v431 = (long long *)v1437;
          if ((void)v1437) {
            goto LABEL_1553;
          }
        }
        goto LABEL_1554;
      case 201:
        *(_OWORD *)v1409 = *(_OWORD *)*(void *)(v23 + 32);
        unsigned int v322 = sub_1CD7878C0((unsigned int *)v1409, (uint64_t)v44, (BOOL)v45);
        unsigned int v323 = v322;
        if (v322 > 0x40)
        {
          if (v1445 != v322) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v1437, (uint64_t)&v1444);
          uint64_t v324 = v1408;
        }
        else
        {
          DWORD2(v1437) = v322;
          uint64_t v324 = v1408;
          if (v322) {
            unint64_t v325 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v322;
          }
          else {
            unint64_t v325 = 0;
          }
          *(void *)&long long v1437 = v325 & v1444;
        }
        uint64_t v326 = (a8 + 1);
        char v327 = 0;
        if (sub_1CCFFA248(v1407, *(void *)v1409, *(void *)&v1409[2], &v1437, &v1442, a6, v324, v326, 0)) {
          goto LABEL_1461;
        }
        uint64_t v328 = (uint64_t *)a6;
        if (*((_DWORD *)a6 + 2) >= 0x41u) {
          uint64_t v328 = (uint64_t *)*a6;
        }
        uint64_t v329 = *v328;
        DWORD2(v1452) = v15;
        unint64_t v330 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
        unint64_t v331 = v330;
        if (!v15) {
          unint64_t v331 = 0;
        }
        *(void *)&long long v1452 = v331 & v329;
        unint64_t v332 = (uint64_t *)(a6 + 2);
        if (*((_DWORD *)a6 + 6) >= 0x41u) {
          unint64_t v332 = (uint64_t *)*v1406;
        }
        uint64_t v333 = *v332;
        if (!v15) {
          unint64_t v330 = 0;
        }
        unint64_t v334 = v330 & v333;
        int v335 = DWORD2(v1452);
        unint64_t v336 = v1452;
        if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
          MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
        }
        *a6 = v336;
        *((_DWORD *)a6 + 2) = v335;
        if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
          MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
        }
        a6[2] = v334;
        *((_DWORD *)a6 + 6) = v15;
        int v337 = sub_1CD005E7C((unsigned int *)v1407, *(uint64_t *)v1409, *(BOOL *)&v1409[2], (uint64_t)&v1437, (unsigned int *)&v1442, *v1408, v326);
        if (v337)
        {
          uint64_t v340 = v1450;
          int v339 = v1451;
          uint64_t v341 = *(void *)(*v1408 + 832);
          if (v341) {
            __int16 v342 = *(_WORD *)(v341 + 8);
          }
          else {
            __int16 v342 = 0;
          }
          v835 = sub_1CD7F3564((llvm::APFloatBase *)*v1408, (const char *)0xC9, (uint64_t)&v1440, v1438, (uint64_t)v1439, (uint64_t)v337, v338, v342);
          char v327 = 0;
          v1408[2] = v340;
          *((_DWORD *)v1408 + 6) = v339;
          v1408[4] = (uint64_t)v835;
          *((_DWORD *)v1408 + 10) = v836;
          goto LABEL_1461;
        }
        uint64_t v716 = *(void *)v1409;
        uint64_t v717 = *(void *)(*(void *)v1409 + 48);
        if (!v717 || *(void *)(v717 + 32) || *(_WORD *)(*(void *)v1409 + 24) != 177) {
          goto LABEL_989;
        }
        if (!*((unsigned char *)v1408 + 8)) {
          goto LABEL_1929;
        }
        if (!(*(unsigned int (**)(uint64_t, uint64_t, llvm *, const llvm::KnownBits *))(*(void *)v1407
                                                                                                + 1744))(v1407, 177, v1438, v1439))goto LABEL_989;
        uint64_t v716 = *(void *)v1409;
LABEL_1929:
        v1210 = sub_1CD7F2844(*v1408, v716, *(BOOL *)&v1409[2], (llvm::APInt *)&v1442);
        if (!v1210) {
          goto LABEL_989;
        }
        uint64_t v1211 = *((unsigned int *)v1210 + 2);
        if (v1211 >= 0x41)
        {
          int v1228 = 0;
          int64_t v1229 = (unint64_t)(v1211 + 63) >> 6;
          do
          {
            BOOL v50 = v1229-- < 1;
            if (v50) {
              break;
            }
            unint64_t v1230 = *(void *)(*(void *)v1210 + 8 * v1229);
            v1228 += __clz(v1230);
          }
          while (!v1230);
          int v1231 = v1211 | 0xFFFFFFC0;
          if ((v1211 & 0x3F) == 0) {
            int v1231 = 0;
          }
          if ((v1211 - v1228 - v1231) >= 0x41) {
            goto LABEL_989;
          }
          unint64_t v1212 = **(void **)v1210;
        }
        else
        {
          unint64_t v1212 = *(void *)v1210;
        }
        if (v1212 >= v15) {
          goto LABEL_989;
        }
        DWORD2(v1452) = v323;
        if (v323 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v1452);
        }
        *(void *)&long long v1452 = 0;
        LODWORD(v45) = v323;
        if (v15 == v323) {
          goto LABEL_2348;
        }
        if (v15 > 0x3F)
        {
          llvm::APInt::setBitsSlowCase(&v1452, v15, v323);
          LODWORD(v45) = DWORD2(v1452);
LABEL_2348:
          if (v45 > 0x40)
          {
            llvm::APInt::lshrSlowCase((void **)&v1452, v1212);
            unsigned int v1334 = DWORD2(v1452);
LABEL_2353:
            if (v1334 >= 0x41) {
              v1335 = (uint64_t *)v1452;
            }
            else {
              v1335 = (uint64_t *)&v1452;
            }
            uint64_t v1336 = *v1335;
            LODWORD(__src[1]) = v15;
            if (v15) {
              unint64_t v1337 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
            }
            else {
              unint64_t v1337 = 0;
            }
            __src[0] = (void *)(v1337 & v1336);
            if (DWORD2(v1452) >= 0x41 && (void)v1452) {
              MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
            }
            *(void **)&long long v1452 = __src[0];
            DWORD2(v1452) = __src[1];
            if (LODWORD(__src[1]) >= 0x41) {
              operator new[]();
            }
            if ((v1444 & (unint64_t)__src[0]) != 0)
            {
              char v1338 = 0;
            }
            else
            {
              uint64_t v1339 = *v1408;
              v1340 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1407, (uint64_t)v1438, (uint64_t)v1439, v41 + 272, *((unsigned __int8 *)v1408 + 8));
              v1342 = sub_1CD7EBF14(v1339, v1212, (const llvm::APInt *)&v1440, v1340, v1341, 0, 0);
              uint64_t v1344 = v1343;
              v1345 = *(uint64_t **)(*(void *)v1409 + 32);
              uint64_t v1346 = *v1345;
              v1347 = (void *)v1345[1];
              uint64_t v1348 = *(void *)(*v1408 + 832);
              if (v1348) {
                __int16 v1349 = *(_WORD *)(v1348 + 8);
              }
              else {
                __int16 v1349 = 0;
              }
              v1351 = sub_1CD7F3564((llvm::APFloatBase *)*v1408, (const char *)0xC9, (uint64_t)&v1440, v1438, (uint64_t)v1439, v1346, v1347, v1349);
              uint64_t v1354 = v1450;
              int v1353 = v1451;
              uint64_t v1355 = *(void *)(*v1408 + 832);
              if (v1355) {
                LOWORD(v1355) = *(_WORD *)(v1355 + 8);
              }
              v1356 = sub_1CCFDED5C(*v1408, 177, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, (uint64_t)v1351, v1350, v1352, (uint64_t)v1342, v1344, v1355);
              v1408[2] = v1354;
              *((_DWORD *)v1408 + 6) = v1353;
              v1408[4] = (uint64_t)v1356;
              *((_DWORD *)v1408 + 10) = v1357;
              char v1338 = 1;
            }
            if (DWORD2(v1452) >= 0x41 && (void)v1452) {
              MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
            }
            if (v1338)
            {
              char v327 = 0;
              goto LABEL_1461;
            }
LABEL_989:
            char v327 = 1;
            goto LABEL_1461;
          }
        }
        else
        {
          *(void *)&long long v1452 = v1452 | (0xFFFFFFFFFFFFFFFFLL >> (v15 - v323) << v15);
        }
        unsigned int v1334 = v1212;
        if (v45 == v1212)
        {
          *(void *)&long long v1452 = 0;
        }
        else
        {
          *(void *)&long long v1452 = (unint64_t)v1452 >> v1212;
          unsigned int v1334 = v45;
        }
        goto LABEL_2353;
      case 204:
        uint64_t v432 = *(void *)(v23 + 32);
        unsigned int v434 = *(uint64_t **)v432;
        uint64_t v433 = *(void *)(v432 + 8);
        long long v1452 = *(_OWORD *)(*(void *)(v432 + 40) + 80);
        unsigned int v435 = sub_1CD3E12F4((unsigned __int8 *)&v1452, (uint64_t)v44, (BOOL)v45);
        unsigned int v436 = v1445;
        if (v1445 > 0x40)
        {
          unsigned int v1275 = v1445 - 1;
          v1276 = (void *)v1444;
          if (((*(void *)(v1444 + 8 * ((v1445 - 1) >> 6)) >> (v1445 - 1)) & 1) == 0) {
            goto LABEL_2189;
          }
          int v1277 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1444);
          int64_t v438 = v1408;
          if (v1277 != v1275) {
            goto LABEL_2189;
          }
        }
        else
        {
          unint64_t v437 = v1444;
          int64_t v438 = v1408;
          if (v1444 != 1 << (v1445 - 1))
          {
LABEL_565:
            int v439 = v436 + __clz(v437) - 64;
LABEL_566:
            if (v436 - v439 > v435)
            {
              LODWORD(__src[1]) = v436;
              if (v436 >= 0x41) {
                operator new[]();
              }
              unint64_t v936 = 0;
              __src[0] = 0;
              if (v435)
              {
                if (v435 > 0x40) {
                  llvm::APInt::setBitsSlowCase(__src, 0, v435);
                }
                else {
                  unint64_t v936 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v435;
                }
              }
              __src[0] = (void *)(v1444 & v936);
              uint64_t v1290 = 1 << (v435 - 1);
              uint64_t v1291 = (v435 - 1) >> 6;
              if (LODWORD(__src[1]) > 0x40) {
                *((void *)__src[0] + v1291) |= v1290;
              }
              else {
                __src[0] = (void *)((unint64_t)__src[0] | v1290);
              }
              char v327 = 0;
              if ((sub_1CD80E454(v1407, v434, v433, __src, a6, v1408, (a8 + 1), 0) & 1) == 0)
              {
                if (*((_DWORD *)a6 + 2) >= 0x41u) {
                  v1292 = (unint64_t *)(*a6 + 8 * v1291);
                }
                else {
                  v1292 = a6;
                }
                if ((*v1292 & v1290) != 0)
                {
                  uint64_t v1307 = v1450;
                  int v1308 = v1451;
                  v1309 = sub_1CD7EB9C8(*v1408, (uint64_t)v434, v433, (const llvm::APInt *)&v1440, v1452, *((uint64_t *)&v1452 + 1));
                  char v327 = 0;
                  v1408[2] = v1307;
                  *((_DWORD *)v1408 + 6) = v1308;
                  v1408[4] = (uint64_t)v1309;
                  *((_DWORD *)v1408 + 10) = v1310;
                }
                else
                {
                  v1409[2] = v15;
                  *(void *)v1409 = 0;
                  if (v435)
                  {
                    if (v435 > 0x40) {
                      llvm::APInt::setBitsSlowCase(v1409, 0, v435);
                    }
                    else {
                      *(void *)v1409 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v435;
                    }
                  }
                  LODWORD(v45) = *((_DWORD *)a6 + 6);
                  unint64_t v1293 = a6[2];
                  v1294 = (void *)(v1293 + 8 * v1291);
                  if (v45 < 0x41) {
                    v1294 = a6 + 2;
                  }
                  if ((*v1294 & v1290) != 0)
                  {
                    if (v45 != v435)
                    {
                      if (v435 > 0x3F || v45 > 0x40) {
                        llvm::APInt::setBitsSlowCase(v1406, v435, v45);
                      }
                      else {
                        *v1406 = (void *)((0xFFFFFFFFFFFFFFFFLL >> (v435 - v45) << v435) | v1293);
                      }
                    }
                    uint64_t v1295 = *((unsigned int *)a6 + 2);
                    if (v1295 > 0x40)
                    {
                      uint64_t v1298 = 0;
                      v1299 = (char *)*a6;
                      uint64_t v1296 = *(void *)v1409;
                      unint64_t v1300 = ((unint64_t)(v1295 + 63) >> 3) & 0x3FFFFFF8;
                      do
                      {
                        *(void *)&v1299[v1298] &= *(void *)(v1296 + v1298);
                        v1298 += 8;
                      }
                      while (v1300 != v1298);
                    }
                    else
                    {
                      uint64_t v1296 = *(void *)v1409;
                      *a6 &= *(void *)v1409;
                    }
                  }
                  else
                  {
                    uint64_t v1297 = *((unsigned int *)a6 + 2);
                    if (v1297 > 0x40)
                    {
                      uint64_t v1301 = 0;
                      v1302 = (char *)*a6;
                      uint64_t v1296 = *(void *)v1409;
                      unint64_t v1303 = ((unint64_t)(v1297 + 63) >> 3) & 0x3FFFFFF8;
                      do
                      {
                        *(void *)&v1302[v1301] &= *(void *)(v1296 + v1301);
                        v1301 += 8;
                      }
                      while (v1303 != v1301);
                      LODWORD(v45) = *((_DWORD *)a6 + 6);
                    }
                    else
                    {
                      uint64_t v1296 = *(void *)v1409;
                      *a6 &= *(void *)v1409;
                    }
                    if (v45 > 0x40)
                    {
                      uint64_t v1304 = 0;
                      v1305 = (char *)*v1406;
                      do
                      {
                        *(void *)&v1305[v1304] &= *(void *)(v1296 + v1304);
                        v1304 += 8;
                      }
                      while (((((unint64_t)v45 + 63) >> 3) & 0x3FFFFFF8) != v1304);
                    }
                    else
                    {
                      *v1406 = (void *)((unint64_t)*v1406 & v1296);
                    }
                  }
                  if (v1409[2] >= 0x41u && v1296 != 0) {
                    MEMORY[0x1D25D9CB0]();
                  }
                  char v327 = 1;
                }
              }
              if (LODWORD(__src[1]) >= 0x41)
              {
                v951 = __src[0];
                if (__src[0]) {
                  goto LABEL_1463;
                }
              }
              goto LABEL_1464;
            }
            uint64_t v440 = v1450;
            int v441 = v1451;
LABEL_568:
            v438[2] = v440;
            *((_DWORD *)v438 + 6) = v441;
            v438[4] = (uint64_t)v434;
            uint64_t v19 = 1;
            *((_DWORD *)v438 + 10) = v433;
            goto LABEL_2020;
          }
        }
        if (sub_1CD7F2ECC(*v438, (uint64_t)v434, v433, (unsigned int *)&v1442, (a8 + 1)) > v435)
        {
          uint64_t v1282 = *v1408;
          v1283 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1407, (uint64_t)v1438, (uint64_t)v1439, v65, 1);
          v1285 = sub_1CD7EBF14(v1282, v15 - v435, (const llvm::APInt *)&v1440, v1283, v1284, 0, 0);
          uint64_t v440 = v1450;
          int v441 = v1451;
          uint64_t v1288 = *(void *)(*v1408 + 832);
          if (v1288) {
            LOWORD(v1288) = *(_WORD *)(v1288 + 8);
          }
          unsigned int v434 = sub_1CCFDED5C(*v1408, 175, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, (uint64_t)v434, v433, v1287, (uint64_t)v1285, v1286, v1288);
          LODWORD(v433) = v1289;
          int64_t v438 = v1408;
          goto LABEL_568;
        }
        unsigned int v436 = v1445;
        if (v1445 <= 0x40)
        {
          unint64_t v437 = v1444;
          int64_t v438 = v1408;
          goto LABEL_565;
        }
        v1276 = (void *)v1444;
LABEL_2189:
        int v1278 = 0;
        int64_t v1279 = ((unint64_t)v436 + 63) >> 6;
        do
        {
          BOOL v50 = v1279-- < 1;
          if (v50) {
            break;
          }
          unint64_t v1280 = v1276[v1279];
          v1278 += __clz(v1280);
        }
        while (!v1280);
        unsigned int v1281 = v436 | 0xFFFFFFC0;
        if ((v436 & 0x3F) == 0) {
          unsigned int v1281 = 0;
        }
        int v439 = v1278 + v1281;
        int64_t v438 = v1408;
        goto LABEL_566;
      case 216:
        uint64_t v406 = *(uint64_t **)(v23 + 32);
        __nd = (void *)v406[1];
        uint64_t v1404 = *v406;
        *(_OWORD *)unint64_t __src = *(_OWORD *)(*(void *)(*v406 + 40) + 16 * __nd);
        unsigned int v408 = sub_1CD3E12F4((unsigned __int8 *)__src, (uint64_t)v44, (BOOL)v45);
        if (*((unsigned char *)v1408 + 9)) {
          goto LABEL_533;
        }
        if ((_BYTE)v1438)
        {
          if (v1438 - 15 < 0x9C) {
            goto LABEL_533;
          }
        }
        else if ((*((_DWORD *)v1439 + 2) & 0xFE) == 0x12)
        {
          goto LABEL_533;
        }
        int v409 = LOBYTE(__src[0]);
        if (LOBYTE(__src[0]))
        {
          if (LOBYTE(__src[0]) - 15 < 0x9C) {
            goto LABEL_534;
          }
        }
        else if ((*((_DWORD *)__src[1] + 2) & 0xFE) == 0x12)
        {
          goto LABEL_533;
        }
        unsigned int v903 = sub_1CD3E3904((unsigned int *)&v1450);
        if (v407 == 1) {
        DWORD2(v1452) = v903;
        }
        if (v903 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v1452);
        }
        *(void *)&long long v1452 = 1 << (v903 - 1);
        if (v1445 > 0x40)
        {
          if (!memcmp((const void *)v1444, (const void *)v1452, (((unint64_t)v1445 + 63) >> 3) & 0x3FFFFFF8)) {
            goto LABEL_1376;
          }
        }
        else if (v1444 == (void)v1452)
        {
LABEL_1376:
          if (LOBYTE(__src[0]))
          {
            int v904 = 1;
            if (LOBYTE(__src[0]) - 8 < 7 || (LOBYTE(__src[0]) - 75) < 0x2Du) {
              goto LABEL_1938;
            }
            BOOL v905 = (LOBYTE(__src[0]) + 104) >= 0x13u;
          }
          else
          {
            if ((*((_DWORD *)__src[1] + 2) & 0xFE) == 0x12) {
              unsigned int v1139 = *(unsigned __int8 *)(**((void **)__src[1] + 2) + 8);
            }
            else {
              unsigned int v1139 = *((_DWORD *)__src[1] + 2);
            }
            BOOL v905 = v1139 >= 7;
          }
          int v904 = !v905;
LABEL_1938:
          if (v904)
          {
            if ((_BYTE)v1438)
            {
              if (v1438 == 1 || (BOOL v1213 = 0, *(void *)(v1407 + 8 * v1438 + 96))) {
                BOOL v1213 = (*(unsigned char *)(v1407 + 390 * v1438 + 4006) & 0xFB) == 0;
              }
            }
            else
            {
              BOOL v1213 = 0;
            }
            uint64_t v1214 = *(void *)(v1407 + 136);
            if (v1214) {
              LODWORD(v1214) = (*(unsigned char *)(v1407 + 5956) & 0xFB) == 0;
            }
            if ((_BYTE)v1438 && v1213 | v1214)
            {
              int v409 = LOBYTE(__src[0]);
              if ((LOBYTE(__src[0]) | 4) != 0xD)
              {
                __int16 v1215 = 0;
                v1216 = (llvm::APFloatBase *)*v1408;
                if (v1213) {
                  uint64_t v1217 = (uint64_t)v1438;
                }
                else {
                  uint64_t v1217 = 5;
                }
                if (v1213) {
                  uint64_t v1218 = (uint64_t)v1439;
                }
                else {
                  uint64_t v1218 = 0;
                }
                uint64_t v1219 = *((void *)v1216 + 104);
                if (v1219) {
                  __int16 v1215 = *(_WORD *)(v1219 + 8);
                }
                v1220 = sub_1CD7F3564(v1216, (const char *)0x90, (uint64_t)&v1440, (llvm *)v1217, v1218, v1404, __nd, v1215);
                unint64_t v1222 = v1221;
                unsigned int v1224 = sub_1CD3E3904((unsigned int *)&v1450);
                if (v1223 == 1) {
                char v1225 = v1224 < 0x21 || v1213;
                }
                if ((v1225 & 1) == 0)
                {
                  uint64_t v1226 = *(void *)(*v1408 + 832);
                  if (v1226) {
                    __int16 v1227 = *(_WORD *)(v1226 + 8);
                  }
                  else {
                    __int16 v1227 = 0;
                  }
                  v1220 = sub_1CD7F3564((llvm::APFloatBase *)*v1408, (const char *)0xC7, (uint64_t)&v1440, v1438, (uint64_t)v1439, (uint64_t)v1220, (void *)v1222, v1227);
                  unint64_t v1222 = v1222 & 0xFFFFFFFF00000000 | v1311;
                }
                unsigned int v1313 = sub_1CD3E3904((unsigned int *)&v1450);
                if (v1312 == 1) {
                v1314 = sub_1CD7EBF14(*v1408, v1313 - 1, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, 0, 0);
                }
                uint64_t v1105 = v1450;
                int v202 = v1451;
                uint64_t v1317 = *(void *)(*v1408 + 832);
                if (v1317) {
                  LOWORD(v1317) = *(_WORD *)(v1317 + 8);
                }
                uint64_t v205 = sub_1CCFDED5C(*v1408, 175, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, (uint64_t)v1220, v1222, v1316, (uint64_t)v1314, v1315, v1317);
                goto LABEL_1788;
              }
              goto LABEL_534;
            }
          }
LABEL_533:
          int v409 = LOBYTE(__src[0]);
          if (!LOBYTE(__src[0]))
          {
            char v410 = 1;
            char v411 = 1;
            if ((*((_DWORD *)__src[1] + 2) & 0xFE) != 0x12)
            {
LABEL_921:
              if (v20) {
                goto LABEL_923;
              }
              unsigned int v675 = v408 / v15;
              if (v408 % v15) {
                goto LABEL_923;
              }
              if (v411)
              {
                if ((*((_DWORD *)__src[1] + 2) & 0xFE) != 0x12)
                {
LABEL_1108:
                  unsigned int v767 = 1;
                  goto LABEL_1109;
                }
              }
              else if ((v409 - 15) >= 0x9C)
              {
                goto LABEL_1108;
              }
              unsigned int v767 = sub_1CD3DB440((llvm::EVT *)__src, v407);
LABEL_1109:
              v1409[2] = v408;
              if (v408 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)v1409);
              }
              *(void *)v1409 = 0;
              DWORD2(v1437) = v767;
              if (v767 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v1437);
              }
              *(void *)&long long v1437 = 0;
              if (v21)
              {
                unsigned int v768 = 0;
                unsigned int v769 = DWORD2(v1437);
                do
                {
                  if (v1443 >= 0x41) {
                    v770 = (unint64_t *)(v1442 + 8 * (v768 >> 6));
                  }
                  else {
                    v770 = &v1442;
                  }
                  if ((*v770 >> v768))
                  {
                    llvm::APInt::insertBits((void **)v1409, (const llvm::APInt *)&v1444, v768 % v675 * v15);
                    uint64_t v771 = 1 << (v768 / v675);
                    if (v769 > 0x40) {
                      *(void *)(v1437 + 8 * ((v768 / v675) >> 6)) |= v771;
                    }
                    else {
                      *(void *)&long long v1437 = v1437 | v771;
                    }
                  }
                  ++v768;
                }
                while (v21 != v768);
              }
              if (LOBYTE(__src[0]))
              {
                if (LOBYTE(__src[0]) - 15 >= 0x9C) {
                  goto LABEL_1486;
                }
              }
              else if ((*((_DWORD *)__src[1] + 2) & 0xFE) != 0x12)
              {
                goto LABEL_1486;
              }
              DWORD2(v1452) = 1;
              *(void *)&long long v1452 = 0;
              LODWORD(v1433) = 1;
              v1432 = 0;
              char v958 = sub_1CD007B58((unsigned int *)v1407, v1404, (uint64_t)__nd, (uint64_t)&v1437, &v1452, &v1432, (void **)v1408, (int)a8 + 1, 0);
              if (v1433 >= 0x41 && v1432) {
                MEMORY[0x1D25D9CB0](v1432, 0x1000C8000313F17);
              }
              if (DWORD2(v1452) >= 0x41 && (void)v1452) {
                MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
              }
              if (v958)
              {
                int v959 = 1;
                goto LABEL_1488;
              }
LABEL_1486:
              DWORD2(v1452) = 1;
              *(void *)&long long v1452 = 0;
              unsigned int v1454 = 1;
              unint64_t v1453 = 0;
              LOBYTE(v1378) = 0;
              int v959 = sub_1CCFFA248(v1407, v1404, __nd, v1409, &v1437, &v1452, v1408, (a8 + 1), v1378);
              if (v1454 >= 0x41 && v1453) {
                MEMORY[0x1D25D9CB0](v1453, 0x1000C8000313F17);
              }
              if (DWORD2(v1452) >= 0x41 && (void)v1452) {
                MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
              }
LABEL_1488:
              if (DWORD2(v1437) >= 0x41 && (void)v1437) {
                MEMORY[0x1D25D9CB0](v1437, 0x1000C8000313F17);
              }
              if (v1409[2] >= 0x41u && *(void *)v1409) {
                MEMORY[0x1D25D9CB0](*(void *)v1409, 0x1000C8000313F17);
              }
              if (v959) {
                goto LABEL_2019;
              }
              goto LABEL_923;
            }
            goto LABEL_920;
          }
LABEL_534:
          char v410 = 0;
          char v411 = 0;
          if ((v409 - 15) >= 0x9C) {
            goto LABEL_921;
          }
LABEL_920:
          unsigned int v674 = v15 / v408;
          char v411 = v410;
          if (v15 % v408) {
            goto LABEL_921;
          }
          unsigned int v1012 = sub_1CD3DB440((llvm::EVT *)__src, v407);
          v1409[2] = v408;
          if (v408 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)v1409);
          }
          *(void *)v1409 = 0;
          DWORD2(v1437) = v1012;
          if (v1012 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v1437);
          }
          *(void *)&long long v1437 = 0;
          if (v15 < v408)
          {
LABEL_1632:
            int v1029 = 1;
            LODWORD(v1433) = 1;
            v1432 = 0;
            LODWORD(v1431) = 1;
            unint64_t v1430 = 0;
            if ((sub_1CD007B58((unsigned int *)v1407, v1404, (uint64_t)__nd, (uint64_t)&v1437, &v1432, &v1430, (void **)v1408, (int)a8 + 1, 0) & 1) == 0)
            {
              DWORD2(v1452) = 1;
              *(void *)&long long v1452 = 0;
              unsigned int v1454 = 1;
              unint64_t v1453 = 0;
              LOBYTE(v1383) = 0;
              int v1029 = sub_1CCFFA248(v1407, v1404, __nd, v1409, &v1437, &v1452, v1408, (a8 + 1), v1383);
              if (v1454 >= 0x41 && v1453) {
                MEMORY[0x1D25D9CB0](v1453, 0x1000C8000313F17);
              }
              if (DWORD2(v1452) >= 0x41 && (void)v1452) {
                MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
              }
            }
            if (v1431 >= 0x41 && v1430) {
              MEMORY[0x1D25D9CB0](v1430, 0x1000C8000313F17);
            }
            if (v1433 >= 0x41 && v1432) {
              MEMORY[0x1D25D9CB0](v1432, 0x1000C8000313F17);
            }
            if (DWORD2(v1437) >= 0x41 && (void)v1437) {
              MEMORY[0x1D25D9CB0](v1437, 0x1000C8000313F17);
            }
            if (v1409[2] >= 0x41u && *(void *)v1409) {
              MEMORY[0x1D25D9CB0](*(void *)v1409, 0x1000C8000313F17);
            }
            if (v1029) {
              goto LABEL_2019;
            }
LABEL_923:
            if (a8) {
              goto LABEL_103;
            }
            goto LABEL_1555;
          }
          unsigned int v1013 = 0;
          unsigned int v1390 = v1409[2];
          unint64_t v1388 = ((unint64_t)v1409[2] + 63) >> 6;
          unsigned int v1014 = DWORD2(v1437);
          while (1)
          {
            unsigned int v1015 = v674 + ~v1013;
            if (!v20) {
              unsigned int v1015 = v1013;
            }
            llvm::APInt::extractBits((uint64_t)&v1444, v408, v1015 * v408, (uint64_t)&v1452);
            unsigned int v1016 = DWORD2(v1452);
            if (DWORD2(v1452) > 0x40) {
              break;
            }
            unint64_t v1017 = v1452;
            if ((void)v1452) {
              goto LABEL_1614;
            }
LABEL_1631:
            if (++v1013 == v674) {
              goto LABEL_1632;
            }
          }
          int v1018 = 0;
          int64_t v1019 = ((unint64_t)DWORD2(v1452) + 63) >> 6;
          unint64_t v1017 = v1452;
          do
          {
            BOOL v50 = v1019-- < 1;
            if (v50) {
              break;
            }
            unint64_t v1020 = *(void *)(v1452 + 8 * v1019);
            v1018 += __clz(v1020);
          }
          while (!v1020);
          unsigned int v1021 = DWORD2(v1452) | 0xFFFFFFC0;
          if ((BYTE8(v1452) & 0x3F) == 0) {
            unsigned int v1021 = 0;
          }
          if (v1018 + v1021 != DWORD2(v1452))
          {
LABEL_1614:
            if (v1390 > 0x40)
            {
              v1022 = *(void **)v1409;
              unint64_t v1023 = v1388;
              do
              {
                uint64_t v1024 = *(void *)v1017;
                v1017 += 8;
                *v1022++ |= v1024;
                --v1023;
              }
              while (v1023);
            }
            else
            {
              *(void *)v1409 |= v1017;
            }
            if (v21)
            {
              unsigned int v1025 = 0;
              unsigned int v1026 = v1443;
              do
              {
                v1027 = (unint64_t *)(v1442 + 8 * (v1025 >> 6));
                if (v1026 < 0x41) {
                  v1027 = &v1442;
                }
                if ((*v1027 >> v1025))
                {
                  uint64_t v1028 = 1 << (v1013 + v1025 * v674);
                  if (v1014 > 0x40) {
                    *(void *)(v1437 + 8 * ((v1013 + v1025 * v674) >> 6)) |= v1028;
                  }
                  else {
                    *(void *)&long long v1437 = v1437 | v1028;
                  }
                }
                ++v1025;
              }
              while (v21 != v1025);
            }
            if (v1016 < 0x41) {
              goto LABEL_1631;
            }
            unint64_t v1017 = v1452;
          }
          if (v1017) {
            MEMORY[0x1D25D9CB0](v1017, 0x1000C8000313F17);
          }
          goto LABEL_1631;
        }
        int v904 = 0;
        goto LABEL_1938;
      default:
        if (v24 != 58)
        {
          if (v24 != 253) {
            goto LABEL_204;
          }
          if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1407 + 1688))(v1407, v23))
          {
LABEL_103:
            uint64_t v76 = *v1408;
            uint64_t v77 = v1450;
            uint64_t v78 = v1451;
LABEL_161:
            sub_1CCFCE670(v76, v77, v78, (unsigned int *)&v1442, a8, (uint64_t)&v1452);
            if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
              MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
            }
            *a6 = v1452;
            *((_DWORD *)a6 + 2) = DWORD2(v1452);
            DWORD2(v1452) = 0;
            if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406)
            {
              MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
              unsigned int v1209 = DWORD2(v1452);
              a6[2] = v1453;
              *((_DWORD *)a6 + 6) = v1454;
              unsigned int v1454 = 0;
              if (v1209 >= 0x41 && (void)v1452) {
                MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
              }
            }
            else
            {
              a6[2] = v1453;
              *((_DWORD *)a6 + 6) = v1454;
            }
            goto LABEL_1590;
          }
          if (*(_WORD *)(v1450 + 24) == 253 && (~*(unsigned __int16 *)(v1450 + 26) & 0xC00) == 0 && !v1451)
          {
            long long v1452 = *(_OWORD *)(v23 + 80);
            unsigned int v243 = sub_1CD3E12F4((unsigned __int8 *)&v1452, v75, (BOOL)v45);
            unsigned int v244 = *((_DWORD *)a6 + 2);
            if (v244 != v243)
            {
              if (v243 > 0x3F || v244 > 0x40) {
                llvm::APInt::setBitsSlowCase(a6, v243, v244);
              }
              else {
                *a6 |= 0xFFFFFFFFFFFFFFFFLL >> (v243 - v244) << v243;
              }
            }
            goto LABEL_1590;
          }
          goto LABEL_1555;
        }
        if (v1445 > 0x40)
        {
          int v211 = 0;
          unint64_t v212 = ((unint64_t)v1445 + 63) >> 6;
          int v213 = (int8x8_t *)v1444;
          uint64_t v71 = (uint64_t)v1408;
          do
          {
            int8x8_t v214 = *v213++;
            uint8x8_t v215 = (uint8x8_t)vcnt_s8(v214);
            v215.i16[0] = vaddlv_u8(v215);
            v211 += v215.i32[0];
            --v212;
          }
          while (v212);
          if (v211 != 1) {
            goto LABEL_361;
          }
          unsigned int v185 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v1444);
        }
        else
        {
          uint8x8_t v183 = (uint8x8_t)vcnt_s8((int8x8_t)v1444);
          v183.i16[0] = vaddlv_u8(v183);
          uint64_t v71 = (uint64_t)v1408;
          if (v183.u32[0] != 1) {
            goto LABEL_361;
          }
          unsigned int v184 = __clz(__rbit64(v1444));
          if (v1445 >= v184) {
            unsigned int v185 = v184;
          }
          else {
            unsigned int v185 = v1445;
          }
        }
        uint64_t v216 = sub_1CCFD8140(*(void *)(*(void *)(v23 + 32) + 40), *(void *)(*(void *)(v23 + 32) + 48), (llvm::APInt *)&v1442, 0, 0);
        if (v216)
        {
          uint64_t v217 = *(void *)(v216 + 80);
          uint64_t v218 = (unint64_t **)(v217 + 24);
          unsigned int v219 = *(_DWORD *)(v217 + 32);
          if (v219 > 0x40)
          {
            unsigned int v221 = llvm::APInt::countTrailingZerosSlowCase(v218);
          }
          else
          {
            unsigned int v220 = __clz(__rbit64((unint64_t)*v218));
            unsigned int v221 = v219 >= v220 ? v220 : v219;
          }
          if (v221 == v185)
          {
            v678 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1407, (uint64_t)v1438, (uint64_t)v1439, *(void *)(**(void **)(*(void *)v71 + 40) + 40) + 272, 1);
            v680 = sub_1CD7EBF14(*(void *)v71, v185, (const llvm::APInt *)&v1440, v678, v679, 0, 0);
            v683 = *(uint64_t **)(v1450 + 32);
            uint64_t v684 = *v683;
            uint64_t v685 = v683[1];
            uint64_t v686 = *(void *)(*(void *)v71 + 832);
            if (v686) {
              LOWORD(v686) = *(_WORD *)(v686 + 8);
            }
            uint64_t v275 = sub_1CCFDED5C(*(void *)v71, 175, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v684, v685, v682, (uint64_t)v680, v681, v686);
LABEL_1885:
            int v1182 = v1451;
            v1408[2] = v1450;
            *((_DWORD *)v1408 + 6) = v1182;
            v1408[4] = (uint64_t)v275;
            *((_DWORD *)v1408 + 10) = v276;
            goto LABEL_2019;
          }
        }
LABEL_361:
        uint64_t v23 = v1450;
        uint64_t v262 = *(void *)(v1450 + 32);
        if (*(void *)v262 == *(void *)(v262 + 40) && *(_DWORD *)(v262 + 8) == *(_DWORD *)(v262 + 48))
        {
          unint64_t v263 = (void *)v1444;
          if (v1445 < 0x41)
          {
LABEL_371:
            if ((unint64_t)v263 > 3) {
              goto LABEL_98;
            }
            uint64_t v268 = sub_1CD7EBF14(*(void *)v71, 1, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, 0, 0);
            unsigned int v271 = *(uint64_t **)(v1450 + 32);
            uint64_t v272 = *v271;
            uint64_t v273 = v271[1];
            uint64_t v274 = *(void *)(*(void *)v71 + 832);
            if (v274) {
              LOWORD(v274) = *(_WORD *)(v274 + 8);
            }
            uint64_t v275 = sub_1CCFDED5C(*(void *)v71, 171, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v272, v273, v270, (uint64_t)v268, v269, v274);
            goto LABEL_1885;
          }
          int v264 = 0;
          int64_t v265 = ((unint64_t)v1445 + 63) >> 6;
          do
          {
            BOOL v50 = v265-- < 1;
            if (v50) {
              break;
            }
            unint64_t v266 = *(void *)(v1444 + 8 * v265);
            v264 += __clz(v266);
          }
          while (!v266);
          unsigned int v267 = v1445 | 0xFFFFFFC0;
          if ((v1445 & 0x3F) == 0) {
            unsigned int v267 = 0;
          }
          if (v1445 - v264 - v267 <= 0x40)
          {
            unint64_t v263 = *(void **)v1444;
            goto LABEL_371;
          }
        }
LABEL_98:
        int v72 = *(long long **)(v23 + 32);
        long long v1452 = *v72;
        *(_OWORD *)unint64_t __src = *(long long *)((char *)v72 + 40);
        __int16 v73 = *(_WORD *)(v23 + 72);
        if (v1445 > 0x40)
        {
          int v96 = 0;
          int64_t v97 = ((unint64_t)v1445 + 63) >> 6;
          do
          {
            BOOL v50 = v97-- < 1;
            if (v50) {
              break;
            }
            unint64_t v98 = *(void *)(v1444 + 8 * v97);
            v96 += __clz(v98);
          }
          while (!v98);
          if ((v1445 & 0x3F) != 0) {
            unsigned int v99 = v1445 | 0xFFFFFFC0;
          }
          else {
            unsigned int v99 = 0;
          }
          int v74 = v96 + v99;
        }
        else
        {
          int v74 = v1445 + __clz(v1444) - 64;
        }
        unsigned int v100 = v15 - v74;
        v1409[2] = v15;
        *(void *)v1409 = 0;
        if (v15 != v74)
        {
          if (v100 > 0x40) {
            llvm::APInt::setBitsSlowCase(v1409, 0, v15 - v74);
          }
          else {
            *(void *)v1409 |= 0xFFFFFFFFFFFFFFFFLL >> (v74 - v15);
          }
        }
        size_t __na = *((void *)&v1452 + 1);
        uint64_t v1399 = v1452;
        if (sub_1CCFFA248(v1407, v1452, *((void *)&v1452 + 1), v1409, &v1442, &v1446, v71, (a8 + 1), 0) & 1) != 0|| (long long v102 = __src[0], v103 = __src[1], LOBYTE(v1379) = 0, (sub_1CCFFA248(v1407, __src[0], __src[1], v1409, &v1442, &v1446, v71, (a8 + 1), v1379))|| sub_1CD80E164(v1450, v1451, v15, (llvm::APInt *)&v1444, v71, v104))
        {
          if ((v73 & 6) != 0)
          {
            int v105 = sub_1CCFDED5C(*(void *)v71, *(unsigned __int16 *)(v1450 + 24), (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v1399, __na, v101, (uint64_t)__src[0], (uint64_t)__src[1], v73 & 0xFFF8 | 1u);
            int v106 = v1451;
            *(void *)(v71 + 16) = v1450;
            *(_DWORD *)(v71 + 24) = v106;
            *(void *)(v71 + 32) = v105;
            *(_DWORD *)(v71 + 40) = v107;
          }
          goto LABEL_135;
        }
        uint64_t v1387 = (uint64_t)v103;
        uint64_t v1389 = (uint64_t)v102;
        int v310 = v1409[2];
        BOOL v311 = (BOOL)v103;
        if (v1409[2])
        {
          if (v1409[2] > 0x40u)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v1409) != v310)
            {
LABEL_965:
              v697 = sub_1CD005E7C((unsigned int *)v1407, v1399, __na, (uint64_t)v1409, (unsigned int *)&v1442, *v1408, (a8 + 1));
              *(void *)&long long v1437 = v697;
              *((void *)&v1437 + 1) = v698;
              v699 = sub_1CD005E7C((unsigned int *)v1407, v1389, v311, (uint64_t)v1409, (unsigned int *)&v1442, *v1408, (a8 + 1));
              v1432 = (long long *)v699;
              uint64_t v1433 = v701;
              if (!((unint64_t)v697 | (unint64_t)v699))
              {
                LODWORD(v311) = v1387;
                goto LABEL_967;
              }
              v709 = &v1437;
              if (!v697) {
                v709 = &v1452;
              }
              uint64_t v710 = *(void *)v709;
              DWORD2(v1452) = *((_DWORD *)v709 + 2);
              *(void *)&long long v1452 = v710;
              v711 = (void **)&v1432;
              if (!v699) {
                v711 = __src;
              }
              v712 = *v711;
              LODWORD(__src[1]) = *((_DWORD *)v711 + 2);
              __src[0] = v712;
              v713 = sub_1CCFDED5C(*v1408, *(unsigned __int16 *)(v1450 + 24), (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v710, *((uint64_t *)&v1452 + 1), v700, (uint64_t)v712, (uint64_t)__src[1], v73 & 0xFFF8 | 1u);
              int v714 = v1451;
              v1408[2] = v1450;
              *((_DWORD *)v1408 + 6) = v714;
              v1408[4] = (uint64_t)v713;
              *((_DWORD *)v1408 + 10) = v715;
LABEL_135:
              int v108 = 1;
LABEL_136:
              if (v1409[2] >= 0x41u && *(void *)v1409) {
                MEMORY[0x1D25D9CB0](*(void *)v1409, 0x1000C8000313F17);
              }
              if (v108) {
                goto LABEL_2019;
              }
              uint64_t v23 = v1450;
              int v24 = *(unsigned __int16 *)(v1450 + 24);
LABEL_204:
              if (v24 >= 0x186)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *, uint64_t *, uint64_t))(*(void *)v1407 + 1664))(v1407, v23, v1451, &v1444, &v1442, a6, v1408, a8))goto LABEL_2019; {
                goto LABEL_1555;
                }
              }
              uint64_t v182 = (llvm::APFloatBase *)*v1408;
LABEL_348:
              sub_1CCFCE670((uint64_t)v182, v23, v1451, (unsigned int *)&v1442, a8, (uint64_t)&v1452);
              if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
                MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
              }
              *a6 = v1452;
              *((_DWORD *)a6 + 2) = DWORD2(v1452);
              DWORD2(v1452) = 0;
              if (*((_DWORD *)a6 + 6) < 0x41u || !*v1406)
              {
                a6[2] = v1453;
                *((_DWORD *)a6 + 6) = v1454;
                goto LABEL_1555;
              }
              MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
              unsigned int v119 = DWORD2(v1452);
              a6[2] = v1453;
              *((_DWORD *)a6 + 6) = v1454;
              unsigned int v1454 = 0;
LABEL_155:
              if (v119 < 0x41 || !(void)v1452)
              {
LABEL_1555:
                if (*((_DWORD *)a6 + 2) > 0x40u) {
                  operator new[]();
                }
                if (v1445 > 0x40)
                {
                  v988 = (uint64_t *)v1444;
                  unint64_t v989 = (((unint64_t)v1445 + 63) >> 6) - 1;
                  v990 = (uint64_t *)(a6[2] | *a6);
                  do
                  {
                    uint64_t v992 = *v988++;
                    uint64_t v991 = v992;
                    uint64_t v993 = *v990++;
                    uint64_t v994 = v991 & ~v993;
                    BOOL v987 = v994 == 0;
                    BOOL v905 = v989-- != 0;
                    char v995 = v905;
                  }
                  while (!v994 && (v995 & 1) != 0);
                }
                else
                {
                  BOOL v987 = (v1444 & ~(a6[2] | *a6)) == 0;
                }
                if (!v987) {
                  goto LABEL_1590;
                }
                uint64_t v996 = v1450;
                if (*(_WORD *)(v1450 + 56))
                {
                  uint64_t v997 = 0;
                  do
                  {
                    uint64_t v998 = *(void *)(*(void *)(v1450 + 32) + 40 * v997);
                    int v999 = *(unsigned __int16 *)(v998 + 24);
                    BOOL v1000 = v999 == 35 || v999 == 11;
                    if (v1000 && (*(unsigned char *)(v998 + 26) & 8) != 0) {
                      goto LABEL_1590;
                    }
                    int v1001 = v997 + 1;
                    uint64_t v997 = (v997 + 1);
                  }
                  while (v1001 != *(unsigned __int16 *)(v1450 + 56));
                }
                if ((_BYTE)v1438)
                {
                  BOOL v1002 = ((_BYTE)v1438 - 120) >= 0x20u && ((_BYTE)v1438 - 2) >= 6u;
                  if (v1002 && ((_BYTE)v1438 - 15) >= 0x3Cu)
                  {
                    if (((_BYTE)v1438 + 104) < 0x13u
                      || ((_BYTE)v1438 - 8) < 7u
                      || ((_BYTE)v1438 - 75) < 0x2Du)
                    {
LABEL_1592:
                      int v1007 = v1451;
                      uint64_t v1008 = *v1408;
                      v1009 = sub_1CD788130((uint64_t)v1438, (uint64_t)v1439, (BOOL)v45);
                      if (v1009 == &unk_1CFB2E344) {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v1452 + 1, (uint64_t)&unk_1CFB2E344);
                      }
                      llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)((char *)&v1452 + 8), v1009, (const llvm::APInt **)v1406);
                      v1010 = sub_1CD7ECA8C(v1008, (llvm::LLVMContext *)&v1452, (const llvm::APFloat *)&v1440, v1438, (uint64_t)v1439, 0);
                      v1408[2] = v996;
                      *((_DWORD *)v1408 + 6) = v1007;
                      v1408[4] = (uint64_t)v1010;
                      *((_DWORD *)v1408 + 10) = v1011;
                      if (*((_UNKNOWN **)&v1452 + 1) == &unk_1CFB2E344)
                      {
                        sub_1CB845718((uint64_t *)&v1453);
                        goto LABEL_2019;
                      }
                      if ((*(_DWORD *)(*((void *)&v1452 + 1) + 8) - 64) <= 0xFFFFFF7F && v1453) {
                        goto LABEL_358;
                      }
                      goto LABEL_2019;
                    }
LABEL_1590:
                    uint64_t v19 = 0;
                    goto LABEL_2020;
                  }
                }
                else
                {
                  if ((*((_DWORD *)v1439 + 2) & 0xFE) == 0x12) {
                    unsigned int v1003 = *(unsigned __int8 *)(**((void **)v1439 + 2) + 8);
                  }
                  else {
                    unsigned int v1003 = *((_DWORD *)v1439 + 2);
                  }
                  if (v1003 != 13)
                  {
                    if (v1003 <= 6) {
                      goto LABEL_1592;
                    }
                    goto LABEL_1590;
                  }
                }
                int v1004 = v1451;
                uint64_t v1005 = sub_1CD7EBB14(*v1408, (llvm::LLVMContext *)v1406, (const llvm::APInt *)&v1440, (uint64_t)v1438, (uint64_t)v1439, 0, 0);
                v1408[2] = v996;
                *((_DWORD *)v1408 + 6) = v1004;
                v1408[4] = v1005;
                *((_DWORD *)v1408 + 10) = v1006;
                goto LABEL_2019;
              }
LABEL_157:
              MEMORY[0x1D25D9CB0]();
              goto LABEL_1555;
            }
          }
          else if (*(void *)v1409 != 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v1409[2]))
          {
            goto LABEL_965;
          }
        }
        unsigned int v676 = v1443;
        if (!v1443
          || (v1443 > 0x40
            ? (BOOL v677 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1442) == v676)
            : (BOOL v677 = v1442 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1443),
              BOOL v311 = (BOOL)v103,
              v677))
        {
LABEL_967:
          uint64_t v702 = sub_1CCFD8CD8(v1389, v311, 0, 0);
          DWORD2(v1437) = v15;
          *(void *)&long long v1437 = 0;
          if (v74)
          {
            if (v100 > 0x3F) {
              llvm::APInt::setBitsSlowCase(&v1437, v100, v15);
            }
            else {
              *(void *)&long long v1437 = v1437 | (0xFFFFFFFFFFFFFFFFLL >> -(char)v74 << v100);
            }
          }
          if (v702)
          {
            uint64_t v703 = *(void *)(v702 + 80);
            uint64_t v704 = *(unsigned int *)(v703 + 32);
            if (v704)
            {
              v705 = (uint64_t *)(v703 + 24);
              if (v704 > 0x40)
              {
                if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v703 + 24)) != v704)
                {
                  int v772 = 0;
                  int64_t v773 = (unint64_t)(v704 + 63) >> 6;
                  do
                  {
                    BOOL v50 = v773-- < 1;
                    if (v50) {
                      break;
                    }
                    unint64_t v774 = *(void *)(*v705 + 8 * v773);
                    v772 += __clz(v774);
                  }
                  while (!v774);
                  int v775 = v704 | 0xFFFFFFC0;
                  if ((v704 & 0x3F) == 0) {
                    int v775 = 0;
                  }
                  if (v772 + v775 != v704 - 1) {
                    operator new[]();
                  }
                }
              }
              else
              {
                uint64_t v706 = *v705;
                unint64_t v707 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v704;
                BOOL v708 = *v705 == v707 || v706 == 1;
                if (!v708 && ((unint64_t)v1437 | v706) == v707)
                {
                  uint64_t v1094 = sub_1CD787918(*v1408, (const llvm::APInt *)&v1440, (BOOL)v1438, (uint64_t)v1439, 0, 0);
                  v1097 = sub_1CCFDED5C(*v1408, *(unsigned __int16 *)(v1450 + 24), (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v1399, __na, v1096, v1094, v1095, v73 & 0xFFF8 | 1u);
                  int v1098 = v1451;
                  v1408[2] = v1450;
                  *((_DWORD *)v1408 + 6) = v1098;
                  v1408[4] = (uint64_t)v1097;
                  *((_DWORD *)v1408 + 10) = v1099;
LABEL_1800:
                  int v108 = 1;
                  goto LABEL_1142;
                }
              }
            }
          }
          v1432 = &v1437;
          if ((_BYTE)v1438)
          {
            if (v1438 == 1 || (int v108 = 0, *(void *)(v1407 + 8 * v1438 + 96)))
            {
              if ((*(unsigned __int8 *)(v1407 + 390 * v1438 + 4037) | 4) != 4
                || *(_WORD *)(v1450 + 24) != 56)
              {
                goto LABEL_1141;
              }
              unsigned int v776 = sub_1CD00C080((void **)&v1432, v1399, __na);
              if (v776)
              {
                unsigned int v1107 = v776;
                v1108 = *(uint64_t **)(v1399 + 32);
                uint64_t v1110 = *v1108;
                uint64_t v1109 = v1108[1];
                v1111 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1407, (uint64_t)v1438, (uint64_t)v1439, *(void *)(**(void **)(*v1408 + 40) + 40) + 272, 1);
                v1113 = sub_1CD7EBF14(*v1408, v1107, (const llvm::APInt *)&v1440, v1111, v1112, 0, 0);
                uint64_t v1116 = *(void *)(*v1408 + 832);
                if (v1116) {
                  LOWORD(v1116) = *(_WORD *)(v1116 + 8);
                }
                v1117 = sub_1CCFDED5C(*v1408, 175, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v1110, v1109, v1115, (uint64_t)v1113, v1114, v1116);
                uint64_t v1120 = *(void *)(*v1408 + 832);
                if (v1120) {
                  LOWORD(v1120) = *(_WORD *)(v1120 + 8);
                }
                v1121 = sub_1CCFDED5C(*v1408, 57, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v1389, v1387, v1119, (uint64_t)v1117, v1118, v1120);
              }
              else
              {
                unsigned int v777 = sub_1CD00C080((void **)&v1432, v1389, v1387);
                if (!v777)
                {
LABEL_1141:
                  int v108 = 0;
                  goto LABEL_1142;
                }
                unsigned int v1123 = v777;
                v1124 = *(uint64_t **)(v1389 + 32);
                uint64_t v1125 = *v1124;
                uint64_t v1126 = v1124[1];
                v1127 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v1407, (uint64_t)v1438, (uint64_t)v1439, *(void *)(**(void **)(*v1408 + 40) + 40) + 272, 1);
                v1129 = sub_1CD7EBF14(*v1408, v1123, (const llvm::APInt *)&v1440, v1127, v1128, 0, 0);
                uint64_t v1132 = *(void *)(*v1408 + 832);
                if (v1132) {
                  LOWORD(v1132) = *(_WORD *)(v1132 + 8);
                }
                v1133 = sub_1CCFDED5C(*v1408, 175, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v1125, v1126, v1131, (uint64_t)v1129, v1130, v1132);
                uint64_t v1136 = *(void *)(*v1408 + 832);
                if (v1136) {
                  LOWORD(v1136) = *(_WORD *)(v1136 + 8);
                }
                v1121 = sub_1CCFDED5C(*v1408, 57, (const llvm::APInt *)&v1440, v1438, (uint64_t)v1439, v1399, __na, v1135, (uint64_t)v1133, v1134, v1136);
              }
              int v1137 = v1451;
              v1408[2] = v1450;
              *((_DWORD *)v1408 + 6) = v1137;
              v1408[4] = (uint64_t)v1121;
              *((_DWORD *)v1408 + 10) = v1122;
              goto LABEL_1800;
            }
          }
          else
          {
            int v108 = 0;
          }
LABEL_1142:
          if (DWORD2(v1437) >= 0x41 && (void)v1437) {
            MEMORY[0x1D25D9CB0](v1437, 0x1000C8000313F17);
          }
          goto LABEL_136;
        }
        goto LABEL_965;
    }
  }
  if ((v24 - 56) < 2)
  {
    uint64_t v71 = (uint64_t)v1408;
    goto LABEL_98;
  }
  if (v24 != 4)
  {
    if (v24 != 54) {
      goto LABEL_204;
    }
    *(_OWORD *)v1409 = *(_OWORD *)(*(void *)(**(void **)(v23 + 32) + 40)
                                 + 16 * *(unsigned int *)(*(void *)(v23 + 32) + 8));
    unsigned int v316 = sub_1CD3E12F4((unsigned __int8 *)v1409, (uint64_t)v44, (BOOL)v45);
    uint64_t v317 = v1445;
    DWORD2(v1452) = v1445;
    if (v1445 >= 0x41) {
      operator new[]();
    }
    unint64_t v318 = 0;
    int v319 = v1408;
    *(void *)&long long v1452 = 0;
    if (v316)
    {
      if (v316 <= 0x40)
      {
        unint64_t v318 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v316;
        goto LABEL_1990;
      }
      llvm::APInt::setBitsSlowCase(&v1452, 0, v316);
    }
    if (v317 > 0x40)
    {
      v1248 = (uint64_t *)v1444;
      unint64_t v1249 = (unint64_t)(v317 + 63) >> 6;
      do
      {
        uint64_t v1250 = *v1248++;
        *(void *)v318 &= v1250;
        v318 += 8;
        --v1249;
      }
      while (v1249);
      goto LABEL_1991;
    }
LABEL_1990:
    *(void *)&long long v1452 = v1444 & v318;
LABEL_1991:
    if (v316 > 0x40)
    {
      if (DWORD2(v1452) != v316) {
        operator new[]();
      }
      sub_1CD0463BC((uint64_t)&v1437, (uint64_t)&v1452);
      uint64_t v1232 = v1407;
      int v319 = v1408;
    }
    else
    {
      uint64_t v1232 = v1407;
      if (DWORD2(v1452) >= 0x41) {
        v1233 = (uint64_t *)v1452;
      }
      else {
        v1233 = (uint64_t *)&v1452;
      }
      uint64_t v1234 = *v1233;
      DWORD2(v1437) = v316;
      unint64_t v1235 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v316;
      if (!v316) {
        unint64_t v1235 = 0;
      }
      *(void *)&long long v1437 = v1235 & v1234;
    }
    if (DWORD2(v1452) >= 0x41 && (void)v1452) {
      MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
    }
    llvm::APInt::getHiBits((llvm::APInt *)&v1444, v316, (uint64_t)&v1452);
    if (v316 > 0x40)
    {
      if (DWORD2(v1452) != v316) {
        operator new[]();
      }
      sub_1CD0463BC((uint64_t)&v1432, (uint64_t)&v1452);
      uint64_t v1232 = v1407;
      int v319 = v1408;
    }
    else
    {
      if (DWORD2(v1452) >= 0x41) {
        v1236 = (uint64_t *)v1452;
      }
      else {
        v1236 = (uint64_t *)&v1452;
      }
      uint64_t v1237 = *v1236;
      LODWORD(v1433) = v316;
      if (v316) {
        unint64_t v1238 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v316;
      }
      else {
        unint64_t v1238 = 0;
      }
      v1432 = (long long *)(v1238 & v1237);
    }
    if (DWORD2(v1452) >= 0x41 && (void)v1452) {
      MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
    }
    DWORD2(v1452) = 1;
    *(void *)&long long v1452 = 0;
    unsigned int v1454 = 1;
    unint64_t v1453 = 0;
    LODWORD(__src[1]) = 1;
    __src[0] = 0;
    unsigned int v1436 = 1;
    unint64_t v1435 = 0;
    uint64_t v1239 = (a8 + 1);
    if (sub_1CD80E454(v1232, **(void **)(v1450 + 32), *(void *)(*(void *)(v1450 + 32) + 8), &v1437, &v1452, v319, v1239, 0) & 1) != 0|| (sub_1CD80E454(v1232, *(void *)(*(void *)(v1450 + 32) + 40), *(void *)(*(void *)(v1450 + 32) + 48), &v1432, __src, v319, v1239, 0))
    {
      if (v1436 >= 0x41 && v1435) {
        MEMORY[0x1D25D9CB0](v1435, 0x1000C8000313F17);
      }
      if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
        MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
      }
      if (v1454 >= 0x41 && v1453) {
        MEMORY[0x1D25D9CB0](v1453, 0x1000C8000313F17);
      }
      if (DWORD2(v1452) >= 0x41 && (void)v1452) {
        MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
      }
      if (v1433 >= 0x41 && v1432) {
        MEMORY[0x1D25D9CB0](v1432, 0x1000C8000313F17);
      }
      if (DWORD2(v1437) >= 0x41 && (void)v1437) {
        goto LABEL_358;
      }
      goto LABEL_2019;
    }
    LODWORD(v1431) = v15;
    if (v15)
    {
      unint64_t v1240 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
      unint64_t v1430 = v1240 & v1452;
    }
    else
    {
      unint64_t v1240 = 0;
      unint64_t v1430 = 0;
    }
    LODWORD(v1427) = v15;
    v1426 = (void *)(v1240 & (unint64_t)__src[0]);
    LODWORD(v1429) = v15;
    uint64_t v1241 = (v1240 & (unint64_t)__src[0]) << v316;
    if (v15 == v316) {
      uint64_t v1241 = 0;
    }
    if (v15) {
      unint64_t v1242 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    }
    else {
      unint64_t v1242 = 0;
    }
    unint64_t v1243 = v1242 & v1241 | v1430;
    v1428 = (uint64_t *)v1243;
    LODWORD(v1429) = 0;
    if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
      MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
    }
    *a6 = v1243;
    *((_DWORD *)a6 + 2) = v15;
    if (v1427 >= 0x41 && v1426) {
      MEMORY[0x1D25D9CB0](v1426, 0x1000C8000313F17);
    }
    if (v1431 >= 0x41 && v1430) {
      MEMORY[0x1D25D9CB0](v1430, 0x1000C8000313F17);
    }
    LODWORD(v1431) = v15;
    if (v15)
    {
      unint64_t v1244 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
      unint64_t v1430 = v1244 & v1453;
    }
    else
    {
      unint64_t v1244 = 0;
      unint64_t v1430 = 0;
    }
    LODWORD(v1427) = v15;
    v1426 = (void *)(v1244 & v1435);
    LODWORD(v1429) = v15;
    unint64_t v1245 = (v1244 & v1435) << v316;
    if (v15 == v316) {
      unint64_t v1245 = 0;
    }
    if (v15) {
      unint64_t v1246 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    }
    else {
      unint64_t v1246 = 0;
    }
    unint64_t v1247 = v1246 & v1245 | v1430;
    v1428 = (uint64_t *)v1247;
    LODWORD(v1429) = 0;
    if (*((_DWORD *)a6 + 6) >= 0x41u && *v1406) {
      MEMORY[0x1D25D9CB0](*v1406, 0x1000C8000313F17);
    }
    a6[2] = v1247;
    *((_DWORD *)a6 + 6) = v15;
    if (v1427 >= 0x41 && v1426) {
      MEMORY[0x1D25D9CB0](v1426, 0x1000C8000313F17);
    }
    if (v1431 >= 0x41 && v1430) {
      MEMORY[0x1D25D9CB0](v1430, 0x1000C8000313F17);
    }
    if (v1436 >= 0x41 && v1435) {
      MEMORY[0x1D25D9CB0](v1435, 0x1000C8000313F17);
    }
    if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
      MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
    }
    if (v1454 >= 0x41 && v1453) {
      MEMORY[0x1D25D9CB0](v1453, 0x1000C8000313F17);
    }
    if (DWORD2(v1452) >= 0x41 && (void)v1452) {
      MEMORY[0x1D25D9CB0](v1452, 0x1000C8000313F17);
    }
    if (v1433 >= 0x41 && v1432) {
      MEMORY[0x1D25D9CB0](v1432, 0x1000C8000313F17);
    }
    if (DWORD2(v1437) < 0x41 || !(void)v1437) {
      goto LABEL_1555;
    }
    goto LABEL_157;
  }
  long long v1452 = *(_OWORD *)(*(void *)(*(void *)(v23 + 32) + 40) + 80);
  if ((_BYTE)v1452) {
    unsigned int v314 = sub_1CB87E200((unsigned __int8 *)&v1452);
  }
  else {
    unsigned int v314 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1452);
  }
  unsigned int v594 = v314;
  if (v315 == 1) {
  LODWORD(__src[1]) = v15;
  }
  __src[0] = 0;
  if (v594)
  {
    if (v594 > 0x40) {
      llvm::APInt::setBitsSlowCase(__src, 0, v594);
    }
    else {
      __src[0] = (void *)((unint64_t)__src[0] | (0xFFFFFFFFFFFFFFFFLL >> -(char)v594));
    }
  }
  long long v595 = *(uint64_t **)(v1450 + 32);
  uint64_t v596 = *v595;
  uint64_t v597 = v595[1];
  unsigned int v598 = __src[1];
  if (LODWORD(__src[1]) > 0x40) {
    operator new[]();
  }
  unint64_t v599 = (unint64_t)__src[0];
  unint64_t v600 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
  if (!LODWORD(__src[1])) {
    unint64_t v600 = 0;
  }
  v1409[2] = (int)__src[1];
  *(void *)v1409 = v1444 | v600 & ~(uint64_t)__src[0];
  char v646 = sub_1CD80E454(v1407, v596, v597, v1409, a6, v1408, (a8 + 1), 0);
  if ((v646 & 1) == 0)
  {
    if (v598 > 0x40) {
      operator new[]();
    }
    unint64_t v647 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v598;
    if (!v598) {
      unint64_t v647 = 0;
    }
    unint64_t v648 = v647 & ~v599;
    uint64_t v649 = *((unsigned int *)a6 + 2);
    if (v649 > 0x40)
    {
      v650 = (void *)*a6;
      unint64_t v651 = (unint64_t)(v649 + 63) >> 6;
      v652 = (uint64_t *)v648;
      do
      {
        uint64_t v653 = *v652++;
        *v650++ |= v653;
        --v651;
      }
      while (v651);
    }
    else
    {
      *a6 |= v648;
    }
    goto LABEL_1555;
  }
  if (v598 >= 0x41 && v599) {
    goto LABEL_358;
  }
LABEL_2019:
  uint64_t v19 = 1;
LABEL_2020:
  if (v1449 >= 0x41 && v1448) {
    MEMORY[0x1D25D9CB0](v1448, 0x1000C8000313F17);
  }
  if (v1447 >= 0x41 && v1446) {
    MEMORY[0x1D25D9CB0](v1446, 0x1000C8000313F17);
  }
LABEL_62:
  if (v1440)
  {
    int v59 = *v1440;
    if ((v59 - 4) > 0x1E)
    {
      if ((v59 - 3) >= 0xFFFFFFFE) {
        __int16 v61 = v1440;
      }
      else {
        __int16 v61 = 0;
      }
      if ((v59 - 3) < 0xFFFFFFFE)
      {
        if (v59 == 3) {
          *((void *)v1440 + 1) = 0;
        }
        goto LABEL_66;
      }
      unint64_t v62 = (unint64_t)(v61 + 8);
    }
    else
    {
      if ((v1440[1] & 0x7F) != 2 && !*((_DWORD *)v1440 + 3)) {
        goto LABEL_66;
      }
      uint64_t v729 = *((void *)v1440 + 2);
      if ((v729 & 4) == 0) {
        goto LABEL_66;
      }
      unint64_t v62 = v729 & 0xFFFFFFFFFFFFFFF8;
      if (!v62) {
        goto LABEL_66;
      }
    }
    unint64_t v1446 = (unint64_t)&v1440;
    sub_1CC5FA668(v62 + 16, &v1446);
  }
LABEL_66:
  if (v1443 >= 0x41 && v1442) {
    MEMORY[0x1D25D9CB0](v1442, 0x1000C8000313F17);
  }
  if (v1445 >= 0x41 && v1444) {
    MEMORY[0x1D25D9CB0](v1444, 0x1000C8000313F17);
  }
  return v19;
}

uint64_t *sub_1CD005E7C(unsigned int *a1, uint64_t a2, BOOL a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  if (a7 > 5) {
    return 0;
  }
  uint64_t v293 = v7;
  uint64_t v294 = v8;
  unsigned int v11 = *(unsigned __int16 *)(a2 + 24);
  if (v11 == 51) {
    return 0;
  }
  int v12 = a7;
  unsigned int v14 = a5;
  BOOL v16 = a3;
  unint64_t v18 = (llvm::Type *)*(unsigned int *)(a4 + 8);
  uint64_t v19 = *(unint64_t **)a4;
  unint64_t v20 = *(void *)a4;
  if (v18 >= 0x41)
  {
    int v21 = 0;
    int64_t v22 = ((unint64_t)v18 + 63) >> 6;
    do
    {
      BOOL v23 = v22-- < 1;
      if (v23) {
        break;
      }
      unint64_t v24 = v19[v22];
      v21 += __clz(v24);
    }
    while (!v24);
    unsigned int v25 = v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0) {
      unsigned int v25 = 0;
    }
    if (v18 - v21 - v25 > 0x40) {
      goto LABEL_14;
    }
    unint64_t v20 = *v19;
  }
  if (!v20) {
    goto LABEL_73;
  }
LABEL_14:
  uint64_t v26 = a5[2];
  unint64_t v27 = *(unsigned int **)a5;
  unint64_t v28 = *(unsigned int **)a5;
  if (v26 < 0x41) {
    goto LABEL_22;
  }
  int v29 = 0;
  int64_t v30 = (unint64_t)(v26 + 63) >> 6;
  do
  {
    BOOL v23 = v30-- < 1;
    if (v23) {
      break;
    }
    unint64_t v31 = *(void *)&v27[2 * v30];
    v29 += __clz(v31);
  }
  while (!v31);
  int v32 = v26 | 0xFFFFFFC0;
  if ((v26 & 0x3F) == 0) {
    int v32 = 0;
  }
  if ((v26 - v29 - v32) <= 0x40)
  {
    unint64_t v28 = *(unsigned int **)v27;
LABEL_22:
    if (v28) {
      goto LABEL_23;
    }
LABEL_73:
    uint64_t v83 = *(void *)(a2 + 40) + 16 * a3;
    return sub_1CD3DD4D8(a6, *(llvm **)v83, *(void *)(v83 + 8));
  }
LABEL_23:
  if (*(unsigned __int16 *)(a2 + 24) > 0xC0u)
  {
    if (*(unsigned __int16 *)(a2 + 24) <= 0xCCu)
    {
      if (v11 == 193)
      {
        int v70 = *(long long **)(a2 + 32);
        long long v292 = *v70;
        uint64_t v71 = *((void *)v70 + 5);
        uint64_t v72 = *((void *)v70 + 6);
        int v73 = *(_DWORD *)(*((void *)v70 + 10) + 76);
        unsigned int v74 = v18 - 1;
        if (v18 > 0x40)
        {
          if (((v19[v74 >> 6] >> v74) & 1) == 0
            || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a4) != v74)
          {
            goto LABEL_331;
          }
        }
        else if ((unint64_t *)(1 << v74) != v19)
        {
          uint64_t v36 = 0;
          uint64_t v75 = 0;
          unint64_t v76 = 0;
          unint64_t v38 = 0;
          unsigned int v37 = 1;
          unsigned int v77 = 1;
          unsigned int v39 = 1;
          unsigned int v78 = 1;
          goto LABEL_334;
        }
        if (sub_1CD7878C0((unsigned int *)&v292, a2, a3) != v18) {
          goto LABEL_331;
        }
        __int16 v260 = (void *)(*(void *)(v292 + 40) + 16 * DWORD2(v292));
        if (sub_1CD7879C8(a1, *v260, v260[1]) != 2 || v73 != 20) {
          goto LABEL_331;
        }
        uint64_t v262 = (unsigned __int8 *)(*(void *)(v71 + 40) + 16 * v72);
        int v263 = *v262;
        if (*v262)
        {
          BOOL v264 = (v263 - 120) >= 0x20 && (v263 - 2) >= 6;
          if (v264 && (v263 - 15) >= 0x3C) {
            goto LABEL_331;
          }
        }
        else
        {
          uint64_t v265 = *((void *)v262 + 1);
          if ((*(_DWORD *)(v265 + 8) & 0xFE) == 0x12) {
            int v266 = *(unsigned __int8 *)(**(void **)(v265 + 16) + 8);
          }
          else {
            int v266 = *(_DWORD *)(v265 + 8);
          }
          if (v266 != 13) {
            goto LABEL_331;
          }
        }
        if (sub_1CD7F2D2C(v71)) {
          return (uint64_t *)v292;
        }
        unsigned int v37 = 1;
        if (sub_1CCFCBB88(v71, 1, v267)) {
          return (uint64_t *)v292;
        }
        uint64_t v36 = 0;
        uint64_t v75 = 0;
        unint64_t v76 = 0;
        unint64_t v38 = 0;
        goto LABEL_333;
      }
      if (v11 == 204)
      {
        unsigned int v180 = *(long long **)(a2 + 32);
        long long v292 = *v180;
        long long v282 = *(_OWORD *)(*((void *)v180 + 5) + 80);
        unsigned int v181 = sub_1CD3E12F4((unsigned __int8 *)&v282, a2, a3);
        uint64_t v182 = *(unsigned int *)(a4 + 8);
        if (v182 > 0x40)
        {
          int v225 = 0;
          int64_t v226 = (unint64_t)(v182 + 63) >> 6;
          do
          {
            BOOL v23 = v226-- < 1;
            if (v23) {
              break;
            }
            unint64_t v227 = *(void *)(*(void *)a4 + 8 * v226);
            v225 += __clz(v227);
          }
          while (!v227);
          int v228 = v182 | 0xFFFFFFC0;
          if ((v182 & 0x3F) == 0) {
            int v228 = 0;
          }
          int v183 = v225 + v228;
        }
        else
        {
          int v183 = v182 + __clz(*(void *)a4) - 64;
        }
        if ((int)v182 - v183 <= v181
          || sub_1CCFD8ECC(a6, v292, *((BOOL *)&v292 + 1), v14, (v12 + 1)) >= v18 - v181 + 1)
        {
          return (uint64_t *)v292;
        }
        goto LABEL_331;
      }
      goto LABEL_145;
    }
    int v40 = *(unsigned __int8 *)(*(void *)(**(void **)(a6 + 40) + 40) + 272);
    if (v11 - 205 < 3)
    {
      uint64_t v41 = *(uint64_t **)(a2 + 32);
      uint64_t v42 = *(void *)(a2 + 40);
      uint64_t v44 = *v41;
      uint64_t v43 = v41[1];
      long long v45 = *(_OWORD *)(*(void *)(*v41 + 40) + 16 * v43);
      long long v282 = v45;
      long long v46 = *(_OWORD *)(v42 + 16 * a3);
      long long v291 = v46;
      if (v40) {
        goto LABEL_331;
      }
      if (v26 >= 0x41)
      {
        int v47 = 0;
        int64_t v48 = (unint64_t)(v26 + 63) >> 6;
        do
        {
          BOOL v23 = v48-- < 1;
          if (v23) {
            break;
          }
          unint64_t v49 = *(void *)&v27[2 * v48];
          v47 += __clz(v49);
        }
        while (!v49);
        int v50 = v26 | 0xFFFFFFC0;
        if ((v26 & 0x3F) == 0) {
          int v50 = 0;
        }
        unsigned int v14 = v27;
        if ((v26 - v47 - v50) > 0x40) {
          goto LABEL_331;
        }
      }
      if (*(void *)v14 != 1) {
        goto LABEL_331;
      }
      char __srca = v45;
      unint64_t v51 = (_BYTE)v46
          ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)&v291)
          : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v291);
      uint64_t v167 = v51;
      int v168 = v52;
      unsigned int v169 = __srca
           ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)&v282)
           : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v282);
      if (v167 != v169 || v168 != v170) {
        goto LABEL_331;
      }
      uint64_t v172 = *(unsigned int *)(a4 + 8);
      if (v172 > 0x40)
      {
        int v229 = 0;
        int64_t v230 = (unint64_t)(v172 + 63) >> 6;
        do
        {
          BOOL v23 = v230-- < 1;
          if (v23) {
            break;
          }
          unint64_t v231 = *(void *)(*(void *)a4 + 8 * v230);
          v229 += __clz(v231);
        }
        while (!v231);
        int v232 = v172 | 0xFFFFFFC0;
        if ((v172 & 0x3F) == 0) {
          int v232 = 0;
        }
        int v173 = v229 + v232;
      }
      else
      {
        int v173 = v172 + __clz(*(void *)a4) - 64;
      }
      if ((unint64_t)sub_1CD3E12F4((unsigned __int8 *)&v282, v170, v171) < (v172 - v173)) {
        goto LABEL_331;
      }
      uint64_t v234 = *((void *)&v291 + 1);
      uint64_t v233 = v291;
      uint64_t v235 = a6;
      uint64_t v236 = v44;
      uint64_t v237 = v43;
      goto LABEL_266;
    }
    if (v11 != 216) {
      goto LABEL_145;
    }
    int v79 = *(uint64_t **)(a2 + 32);
    uint64_t v80 = *v79;
    unint64_t v81 = v79[1];
    while (*(_WORD *)(v80 + 24) == 216)
    {
      __int16 v82 = *(uint64_t **)(v80 + 32);
      uint64_t v80 = *v82;
      unint64_t v81 = v81 & 0xFFFFFFFF00000000 | *((unsigned int *)v82 + 2);
    }
    int v96 = (uint64_t *)(*(void *)(v80 + 40) + 16 * v81);
    uint64_t v98 = *v96;
    uint64_t v97 = v96[1];
    *(void *)&long long v282 = v98;
    *((void *)&v282 + 1) = v97;
    unsigned int v99 = (uint64_t *)(*(void *)(a2 + 40) + 16 * a3);
    uint64_t v101 = *v99;
    uint64_t v100 = v99[1];
    *(void *)&long long v291 = v101;
    *((void *)&v291 + 1) = v100;
    if (v98 == v101 && ((_BYTE)v98 || v97 == v100))
    {
      *(void *)&long long v292 = v80;
      *((void *)&v292 + 1) = v81;
      return (uint64_t *)v292;
    }
    int v275 = v40;
    unsigned int v174 = sub_1CD3E12F4((unsigned __int8 *)&v282, a2, a3);
    unsigned int __srcb = sub_1CD3E12F4((unsigned __int8 *)&v291, v175, v176);
    if (v174 == __srcb)
    {
      uint64_t v178 = sub_1CD005E7C(a1, v80, v81, a4, v14, a6, (v12 + 1));
      if (v178)
      {
        uint64_t v236 = v178;
        uint64_t v237 = (uint64_t)v177;
        uint64_t v234 = *((void *)&v291 + 1);
        uint64_t v233 = v291;
        uint64_t v235 = a6;
LABEL_266:
        uint64_t v239 = sub_1CD7EF724(v235, v233, v234, v236, v237);
        goto LABEL_267;
      }
    }
    if ((_BYTE)v282)
    {
      int v179 = v275;
      if (v282 - 15 >= 0x9C)
      {
LABEL_213:
        if (v179) {
          goto LABEL_331;
        }
        goto LABEL_214;
      }
    }
    else
    {
      int v179 = v275;
      if ((*(_DWORD *)(*((void *)&v282 + 1) + 8) & 0xFE) != 0x12) {
        goto LABEL_213;
      }
    }
    int v216 = __srcb / v174;
    if (__srcb % v174) {
      goto LABEL_213;
    }
    unsigned int v271 = sub_1CD3DB440((llvm::EVT *)&v282, v177);
    unsigned int v290 = v174;
    unsigned int v273 = v174;
    if (v174 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v289);
    }
    unint64_t v289 = 0;
    unsigned int v288 = v271;
    if (v271 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v287);
    }
    uint64_t v287 = 0;
    if (v174 > __srcb)
    {
LABEL_301:
      uint64_t v223 = sub_1CD005E7C(a1, v80, v81, &v289, &v287, a6, (v12 + 1));
      if (v223) {
        goto LABEL_314;
      }
      if (v288 >= 0x41 && v287) {
        MEMORY[0x1D25D9CB0](v287, 0x1000C8000313F17);
      }
      if (v290 >= 0x41 && v289) {
        MEMORY[0x1D25D9CB0](v289, 0x1000C8000313F17);
      }
      unsigned int v174 = v273;
      if (v275) {
        goto LABEL_331;
      }
LABEL_214:
      unsigned int v217 = v174 / __srcb;
      if (v174 % __srcb) {
        goto LABEL_331;
      }
      if ((_BYTE)v282)
      {
        if (v282 - 15 >= 0x9C)
        {
LABEL_217:
          unsigned int v218 = 1;
          goto LABEL_218;
        }
      }
      else if ((*(_DWORD *)(*((void *)&v282 + 1) + 8) & 0xFE) != 0x12)
      {
        goto LABEL_217;
      }
      unsigned int v218 = sub_1CD3DB440((llvm::EVT *)&v282, v177);
      unsigned int v217 = v174 / __srcb;
LABEL_218:
      unsigned int v290 = v174;
      if (v174 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v289);
      }
      unint64_t v289 = 0;
      unsigned int v288 = v218;
      if (v218 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v287);
      }
      uint64_t v287 = 0;
      if (v26)
      {
        unsigned int v219 = 0;
        unsigned int v277 = v217;
        do
        {
          if (v14[2] >= 0x41) {
            unsigned int v220 = (unsigned int *)(*(void *)v14 + 8 * (v219 >> 6));
          }
          else {
            unsigned int v220 = v14;
          }
          if ((*(void *)v220 >> v219))
          {
            unsigned int v221 = v219 / v217;
            llvm::APInt::insertBits((void **)&v289, (const llvm::APInt *)a4, v219 % v217 * __srcb);
            uint64_t v222 = 1 << v221;
            if (v288 > 0x40) {
              *(void *)(v287 + 8 * (v221 >> 6)) |= v222;
            }
            else {
              v287 |= v222;
            }
            unsigned int v217 = v277;
          }
          ++v219;
        }
        while (v26 != v219);
      }
      uint64_t v223 = sub_1CD005E7C(a1, v80, v81, &v289, &v287, a6, (v12 + 1));
      if (!v223)
      {
        if (v288 >= 0x41 && v287) {
          MEMORY[0x1D25D9CB0](v287, 0x1000C8000313F17);
        }
        if (v290 < 0x41) {
          goto LABEL_331;
        }
        unint64_t v224 = v289;
        if (!v289) {
          goto LABEL_331;
        }
        goto LABEL_313;
      }
LABEL_314:
      *(void *)&long long v292 = sub_1CD7EF724(a6, v291, *((uint64_t *)&v291 + 1), v223, (uint64_t)v177);
      *((void *)&v292 + 1) = v257;
      if (v288 >= 0x41 && v287) {
        MEMORY[0x1D25D9CB0](v287, 0x1000C8000313F17);
      }
      if (v290 < 0x41 || !v289) {
        return (uint64_t *)v292;
      }
      goto LABEL_253;
    }
    int v241 = 0;
    while (1)
    {
      int v242 = v216 + ~v241;
      if (!v275) {
        int v242 = v241;
      }
      llvm::APInt::extractBits(a4, v273, v242 * v273, (uint64_t)&v285);
      unsigned int v243 = v286;
      if (v286 > 0x40) {
        break;
      }
      unint64_t v244 = (unint64_t)v285;
      if (v285) {
        goto LABEL_283;
      }
LABEL_300:
      if (++v241 == v216) {
        goto LABEL_301;
      }
    }
    int v245 = 0;
    int64_t v246 = ((unint64_t)v286 + 63) >> 6;
    unint64_t v244 = (unint64_t)v285;
    do
    {
      BOOL v23 = v246-- < 1;
      if (v23) {
        break;
      }
      unint64_t v247 = v285[v246];
      v245 += __clz(v247);
    }
    while (!v247);
    unsigned int v248 = v286 | 0xFFFFFFC0;
    if ((v286 & 0x3F) == 0) {
      unsigned int v248 = 0;
    }
    if (v245 + v248 != v286)
    {
LABEL_283:
      if (v290 > 0x40)
      {
        int v249 = (void *)v289;
        unint64_t v250 = ((unint64_t)v290 + 63) >> 6;
        do
        {
          uint64_t v251 = *(void *)v244;
          v244 += 8;
          *v249++ |= v251;
          --v250;
        }
        while (v250);
      }
      else
      {
        v289 |= v244;
      }
      if (v26)
      {
        unsigned int v252 = 0;
        unsigned int v253 = v14[2];
        unsigned int v254 = v288;
        do
        {
          int v255 = (unsigned int *)(*(void *)v14 + 8 * (v252 >> 6));
          if (v253 < 0x41) {
            int v255 = v14;
          }
          if ((*(void *)v255 >> v252))
          {
            uint64_t v256 = 1 << (v241 + v252 * v216);
            if (v254 > 0x40) {
              *(void *)(v287 + 8 * ((v241 + v252 * v216) >> 6)) |= v256;
            }
            else {
              v287 |= v256;
            }
          }
          ++v252;
        }
        while (v26 != v252);
      }
      if (v243 < 0x41) {
        goto LABEL_300;
      }
      unint64_t v244 = (unint64_t)v285;
    }
    if (v244) {
      MEMORY[0x1D25D9CB0](v244, 0x1000C8000313F17);
    }
    goto LABEL_300;
  }
  if (*(unsigned __int16 *)(a2 + 24) > 0xAAu)
  {
    switch(*(_WORD *)(a2 + 24))
    {
      case 0xAB:
        uint64_t v33 = (a7 + 1);
        sub_1CCFCE670(a6, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a5, v33, (uint64_t)&v282);
        unint64_t v34 = v282;
        unsigned int v35 = DWORD2(v282);
        *(void *)uint64_t v272 = v283;
        unsigned int v269 = v284;
        sub_1CCFCE670(a6, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), v14, v33, (uint64_t)&v282);
        uint64_t v36 = v282;
        unsigned int v37 = DWORD2(v282);
        unint64_t v274 = v34;
        unint64_t __src = v283;
        if (v35 > 0x40) {
          operator new[]();
        }
        unint64_t v38 = *(llvm::APInt **)v272;
        unsigned int v39 = v35;
        unsigned int v77 = v284;
        uint64_t v122 = *(unsigned int *)(a4 + 8);
        unsigned int v78 = v269;
        if (v122 > 0x40)
        {
          unint64_t v124 = (unint64_t)(v122 + 63) >> 6;
          uint64_t v125 = *(unint64_t **)a4;
          unint64_t v126 = v124 - 1;
          uint64_t v127 = (uint64_t *)((unint64_t)v283 | v34);
          do
          {
            uint64_t v129 = *v125++;
            uint64_t v128 = v129;
            uint64_t v130 = *v127++;
            uint64_t v131 = v128 & ~v130;
            BOOL v123 = v131 == 0;
            BOOL v264 = v126-- != 0;
            char v132 = v264;
          }
          while (!v131 && (v132 & 1) != 0);
        }
        else
        {
          BOOL v123 = (*(void *)a4 & ~((unint64_t)v283 | v34)) == 0;
        }
        if (v123) {
          goto LABEL_120;
        }
        if (DWORD2(v282) > 0x40) {
          operator new[]();
        }
        uint64_t v156 = *(unsigned int *)(a4 + 8);
        if (v156 > 0x40)
        {
          unint64_t v158 = (unint64_t)(v156 + 63) >> 6;
          uint64_t v159 = *(unint64_t **)a4;
          unint64_t v160 = v158 - 1;
          int v161 = (uint64_t *)(v282 | *(void *)v272);
          unint64_t v76 = v274;
          do
          {
            uint64_t v163 = *v159++;
            uint64_t v162 = v163;
            uint64_t v164 = *v161++;
            uint64_t v165 = v162 & ~v164;
            BOOL v157 = v165 == 0;
            BOOL v264 = v160-- != 0;
            char v166 = v264;
          }
          while (!v165 && (v166 & 1) != 0);
        }
        else
        {
          BOOL v157 = (*(void *)a4 & ~((unint64_t)v282 | *(void *)v272)) == 0;
          unint64_t v76 = v274;
        }
        if (!v157) {
          goto LABEL_169;
        }
        goto LABEL_158;
      case 0xAC:
        sub_1CCFCE670(a6, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a5, (a7 + 1), (uint64_t)&v282);
        unint64_t v274 = v282;
        unsigned int v270 = DWORD2(v282);
        int8x8_t v89 = v283;
        unsigned int v78 = v284;
        sub_1CCFCE670(a6, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), v14, (v12 + 1), (uint64_t)&v282);
        uint64_t v36 = v282;
        unsigned int v37 = DWORD2(v282);
        unint64_t __src = v283;
        unsigned int v77 = v284;
        if (v78 > 0x40) {
          operator new[]();
        }
        unint64_t v90 = v282 | (unint64_t)v89;
        unint64_t v38 = v89;
        unsigned int v39 = v270;
        uint64_t v111 = *(unsigned int *)(a4 + 8);
        if (v111 > 0x40)
        {
          unint64_t v113 = (unint64_t)(v111 + 63) >> 6;
          int v114 = *(unint64_t **)a4;
          unint64_t v115 = v113 - 1;
          uint64_t v116 = (uint64_t *)v90;
          do
          {
            uint64_t v118 = *v114++;
            uint64_t v117 = v118;
            uint64_t v119 = *v116++;
            uint64_t v120 = v117 & ~v119;
            BOOL v112 = v120 == 0;
            BOOL v264 = v115-- != 0;
            char v121 = v264;
          }
          while (!v120 && (v121 & 1) != 0);
        }
        else
        {
          BOOL v112 = (*(void *)a4 & ~v90) == 0;
        }
        if (v112)
        {
LABEL_120:
          long long v292 = *(_OWORD *)*(void *)(a2 + 32);
          unint64_t v76 = v274;
          uint64_t v75 = __src;
          goto LABEL_335;
        }
        if (v284 > 0x40) {
          operator new[]();
        }
        unint64_t v76 = v274;
        uint64_t v145 = *(unsigned int *)(a4 + 8);
        if (v145 > 0x40)
        {
          unint64_t v147 = (unint64_t)(v145 + 63) >> 6;
          uint64_t v148 = *(unint64_t **)a4;
          unint64_t v149 = v147 - 1;
          unsigned int v150 = (uint64_t *)((unint64_t)v283 | v274);
          do
          {
            uint64_t v152 = *v148++;
            uint64_t v151 = v152;
            uint64_t v153 = *v150++;
            uint64_t v154 = v151 & ~v153;
            BOOL v146 = v154 == 0;
            BOOL v264 = v149-- != 0;
            char v155 = v264;
          }
          while (!v154 && (v155 & 1) != 0);
        }
        else
        {
          BOOL v146 = (*(void *)a4 & ~((unint64_t)v283 | v274)) == 0;
        }
        if (v146)
        {
LABEL_158:
          long long v292 = *(_OWORD *)(*(void *)(a2 + 32) + 40);
          uint64_t v75 = __src;
          goto LABEL_335;
        }
LABEL_169:
        uint64_t v75 = __src;
        break;
      case 0xAD:
        uint64_t v84 = (a7 + 1);
        sub_1CCFCE670(a6, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a5, v84, (uint64_t)&v282);
        size_t v85 = (uint64_t *)v282;
        unsigned int v86 = DWORD2(v282);
        uint64_t v87 = v283;
        unsigned int v78 = v284;
        sub_1CCFCE670(a6, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), v14, v84, (uint64_t)&v282);
        uint64_t v36 = v282;
        unsigned int v37 = DWORD2(v282);
        uint64_t v75 = v283;
        uint64_t v88 = *(unsigned int *)(a4 + 8);
        if (v88 <= 0x40)
        {
          unint64_t v38 = v87;
          unsigned int v39 = v86;
          unint64_t v76 = (unint64_t)v85;
          if ((*(void *)a4 & ~(void)v282) != 0)
          {
            unsigned int v77 = v284;
            if ((*(void *)a4 & ~v76) != 0) {
              break;
            }
LABEL_77:
            long long v292 = *(_OWORD *)(*(void *)(a2 + 32) + 40);
            goto LABEL_335;
          }
LABEL_97:
          long long v292 = *(_OWORD *)*(void *)(a2 + 32);
          unsigned int v77 = v284;
          goto LABEL_335;
        }
        unint64_t v103 = (unint64_t)(v88 + 63) >> 6;
        int8x8_t v104 = *(unint64_t **)a4;
        int v105 = *(unint64_t **)a4;
        int v106 = (uint64_t *)v282;
        unint64_t v107 = v103;
        unint64_t v38 = v87;
        unsigned int v39 = v86;
        unint64_t v76 = (unint64_t)v85;
        while (1)
        {
          uint64_t v109 = *v105++;
          uint64_t v108 = v109;
          uint64_t v110 = *v106++;
          if ((v108 & ~v110) != 0) {
            break;
          }
          if (!--v107) {
            goto LABEL_97;
          }
        }
        uint64_t v133 = v85;
        unsigned int v77 = v284;
        while (1)
        {
          uint64_t v135 = *v104++;
          uint64_t v134 = v135;
          uint64_t v136 = *v133++;
          if ((v134 & ~v136) != 0) {
            break;
          }
          if (!--v103) {
            goto LABEL_77;
          }
        }
        break;
      case 0xAF:
        uint64_t v75 = sub_1CCFD8460(a6, a2, a3, (llvm::APInt *)a5);
        if (!v75) {
          goto LABEL_147;
        }
        long long v292 = *(_OWORD *)*(void *)(a2 + 32);
        if (*((_DWORD *)v75 + 2) >= 0x41u) {
          uint64_t v75 = *(llvm::APInt **)v75;
        }
        unsigned int v91 = *(_DWORD *)v75;
        unsigned int v92 = sub_1CCFD8ECC(a6, v292, *((BOOL *)&v292 + 1), v14, (v12 + 1));
        unsigned int v93 = *(_DWORD *)(a4 + 8);
        if (v93 > 0x40)
        {
          int v95 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a4);
        }
        else
        {
          unsigned int v94 = __clz(__rbit64(*(void *)a4));
          if (v93 >= v94) {
            int v95 = v94;
          }
          else {
            int v95 = *(_DWORD *)(a4 + 8);
          }
        }
        if (v92 > v91 && v92 - v91 >= (int)v18 - v95) {
          return (uint64_t *)v292;
        }
        goto LABEL_331;
      default:
        goto LABEL_145;
    }
LABEL_334:
    long long v292 = 0uLL;
LABEL_335:
    if (v77 >= 0x41 && v75) {
      MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
    }
    if (v37 >= 0x41 && v36) {
      MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
    }
    if (v78 >= 0x41 && v38) {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
    }
    if (v39 < 0x41 || !v76) {
      return (uint64_t *)v292;
    }
LABEL_253:
    MEMORY[0x1D25D9CB0]();
    return (uint64_t *)v292;
  }
  switch(v11)
  {
    case 0x93u:
      uint64_t v53 = *(long long **)(a2 + 32);
      long long v292 = *v53;
      uint64_t v54 = *((void *)v53 + 10);
      int v55 = *(unsigned __int16 *)(v54 + 24);
      BOOL v56 = v55 == 35 || v55 == 11;
      if (v56) {
        uint64_t v57 = v54;
      }
      else {
        uint64_t v57 = 0;
      }
      long long v282 = *(_OWORD *)(*(void *)(v292 + 40) + 16 * DWORD2(v292));
      if (v57)
      {
        uint64_t v58 = *(void *)(v57 + 80);
        int v59 = (void *)(v58 + 24);
        unsigned int v60 = sub_1CD3DB440((llvm::EVT *)&v282, (const char *)a2);
        uint64_t v61 = *(unsigned int *)(v58 + 32);
        if (v61 < 0x41)
        {
LABEL_57:
          if (*v59 < (unint64_t)v60)
          {
            uint64_t v66 = *(void *)(v57 + 80);
            uint64_t v67 = (void *)(v66 + 24);
            if (*(_DWORD *)(v66 + 32) >= 0x41u) {
              uint64_t v67 = (void *)*v67;
            }
            uint64_t v68 = (void *)*v67;
            uint64_t v69 = v14[2] >= 0x41 ? (unsigned int *)(*(void *)v14 + 8 * (v68 >> 6)) : v14;
            if (((*(void *)v69 >> (char)v68) & 1) == 0) {
              return (uint64_t *)v292;
            }
          }
          goto LABEL_331;
        }
        int v62 = 0;
        int64_t v63 = (unint64_t)(v61 + 63) >> 6;
        do
        {
          BOOL v23 = v63-- < 1;
          if (v23) {
            break;
          }
          unint64_t v64 = *(void *)(*v59 + 8 * v63);
          v62 += __clz(v64);
        }
        while (!v64);
        int v65 = v61 | 0xFFFFFFC0;
        if ((v61 & 0x3F) == 0) {
          int v65 = 0;
        }
        if ((v61 - v62 - v65) <= 0x40)
        {
          int v59 = (void *)*v59;
          goto LABEL_57;
        }
      }
LABEL_331:
      uint64_t v36 = 0;
      uint64_t v75 = 0;
      goto LABEL_332;
    case 0x96u:
      unsigned int v184 = *(uint64_t **)(a2 + 32);
      uint64_t v185 = v184[5];
      uint64_t v186 = v184[6];
      uint64_t v187 = *(void *)(v184[10] + 80);
      unint64_t v188 = (void *)(v187 + 24);
      uint64_t __srcc = *v184;
      if (*(_DWORD *)(v187 + 32) >= 0x41u) {
        unint64_t v188 = (void *)*v188;
      }
      uint64_t v276 = v184[1];
      unsigned int v189 = (void *)*v188;
      long long v282 = *(_OWORD *)(*(void *)(v185 + 40) + 16 * v186);
      unsigned int v190 = sub_1CD3DB440((llvm::EVT *)&v282, (const char *)a2);
      llvm::APInt::extractBits((uint64_t)v14, v190, v189, (uint64_t)&v282);
      unsigned int v191 = DWORD2(v282);
      uint64_t v192 = v282;
      if (DWORD2(v282) >= 0x41)
      {
        int v193 = 0;
        int64_t v194 = ((unint64_t)DWORD2(v282) + 63) >> 6;
        do
        {
          BOOL v23 = v194-- < 1;
          if (v23) {
            break;
          }
          unint64_t v195 = *(void *)(v282 + 8 * v194);
          v193 += __clz(v195);
        }
        while (!v195);
        unsigned int v196 = DWORD2(v282) | 0xFFFFFFC0;
        if ((BYTE8(v282) & 0x3F) == 0) {
          unsigned int v196 = 0;
        }
        if (DWORD2(v282) - v193 - v196 > 0x40)
        {
LABEL_196:
          if (!v189 && *(_WORD *)(__srcc + 24) == 51)
          {
            uint64_t v197 = sub_1CD005E7C(a1, v185, v186, a4, &v282, a6, (v12 + 1));
            if (v197)
            {
              uint64_t v200 = v197;
              uint64_t v201 = v198;
              int v202 = (const char *)*(unsigned __int16 *)(a2 + 24);
              uint64_t v203 = *(unsigned __int8 **)(a2 + 64);
              *(void *)&long long v291 = v203;
              if (v203) {
                llvm::MetadataTracking::track((uint64_t)&v291, v203, 2);
              }
              DWORD2(v291) = *(_DWORD *)(a2 + 60);
              uint64_t v204 = *(uint64_t **)(a2 + 32);
              uint64_t v205 = *(void *)(a2 + 40) + 16 * v16;
              int v206 = *(llvm **)v205;
              uint64_t v207 = *(void *)(v205 + 8);
              uint64_t v208 = *v204;
              uint64_t v209 = v204[1];
              uint64_t v210 = v204[10];
              uint64_t v211 = v204[11];
              uint64_t v212 = *(void *)(a6 + 832);
              if (v212) {
                LOWORD(v212) = *(_WORD *)(v212 + 8);
              }
              *(void *)&long long v292 = sub_1CD7F5D38((void *)a6, v202, (const llvm::APInt *)&v291, v206, v207, v208, v209, v199, v200, v201, v210, v211, SHIDWORD(v211), v212);
              *((void *)&v292 + 1) = v213;
              if (!(void)v291) {
                goto LABEL_207;
              }
              int v214 = *(unsigned __int8 *)v291;
              if ((v214 - 4) > 0x1E)
              {
                if ((v214 - 3) >= 0xFFFFFFFE) {
                  uint64_t v258 = v291;
                }
                else {
                  uint64_t v258 = 0;
                }
                if ((v214 - 3) < 0xFFFFFFFE)
                {
                  if (v214 == 3) {
                    *(void *)(v291 + 8) = 0;
                  }
                  goto LABEL_207;
                }
                unint64_t v259 = v258 + 8;
              }
              else
              {
                if ((*(unsigned char *)(v291 + 1) & 0x7F) != 2 && !*(_DWORD *)(v291 + 12)) {
                  goto LABEL_207;
                }
                uint64_t v268 = *(void *)(v291 + 16);
                if ((v268 & 4) == 0) {
                  goto LABEL_207;
                }
                unint64_t v259 = v268 & 0xFFFFFFFFFFFFFFF8;
                if (!v259) {
                  goto LABEL_207;
                }
              }
              unint64_t v289 = (unint64_t)&v291;
              sub_1CC5FA668(v259 + 16, &v289);
LABEL_207:
              unsigned int v191 = DWORD2(v282);
LABEL_251:
              if (v191 < 0x41 || !(void)v282) {
                return (uint64_t *)v292;
              }
              goto LABEL_253;
            }
            unsigned int v191 = DWORD2(v282);
          }
          if (v191 < 0x41) {
            goto LABEL_331;
          }
          unint64_t v224 = v282;
          if (!(void)v282) {
            goto LABEL_331;
          }
LABEL_313:
          MEMORY[0x1D25D9CB0](v224, 0x1000C8000313F17);
          goto LABEL_331;
        }
        uint64_t v192 = *(void *)v282;
      }
      if (!v192)
      {
        *(void *)&long long v292 = __srcc;
        *((void *)&v292 + 1) = v276;
        goto LABEL_251;
      }
      goto LABEL_196;
    case 0x99u:
      long long v282 = *(_OWORD *)*(void *)(a2 + 40);
      uint64_t v137 = *(void *)(a2 + 80);
      sub_1CD3DB440((llvm::EVT *)&v282, (const char *)a2);
      if (v26)
      {
        uint64_t v138 = 0;
        char v139 = 1;
        char v140 = 1;
        char v141 = 1;
        do
        {
          while (1)
          {
            uint64_t v142 = *(unsigned int *)(v137 + 4 * v138);
            if ((v142 & 0x80000000) != 0) {
              break;
            }
            uint64_t v143 = (unsigned int *)(*(void *)v14 + 8 * (v138 >> 6));
            if (v14[2] < 0x41) {
              uint64_t v143 = v14;
            }
            if (((*(void *)v143 >> v138) & 1) == 0) {
              break;
            }
            char v141 = 0;
            v140 &= v138 == v142;
            v139 &= v138 == v142 - v26;
            BOOL v56 = v26 - 1 == v138++;
            if (v56) {
              goto LABEL_209;
            }
          }
          ++v138;
        }
        while (v26 != v138);
        if (v141) {
          goto LABEL_262;
        }
LABEL_209:
        if (v140)
        {
          return (uint64_t *)*(_OWORD *)*(void *)(a2 + 32);
        }
        else
        {
          if ((v139 & 1) == 0) {
            goto LABEL_331;
          }
          return (uint64_t *)*(_OWORD *)(*(void *)(a2 + 32) + 40);
        }
      }
LABEL_262:
      uint64_t v238 = *(void *)(a2 + 40) + 16 * v16;
      uint64_t v239 = (uint64_t)sub_1CD3DD4D8(a6, *(llvm **)v238, *(void *)(v238 + 8));
LABEL_267:
      *(void *)&long long v292 = v239;
      *((void *)&v292 + 1) = v240;
      return (uint64_t *)v292;
  }
LABEL_145:
  if (v11 < 0x186) {
    goto LABEL_331;
  }
  uint64_t v75 = (llvm::APInt *)(*(uint64_t (**)(unsigned int *, uint64_t, BOOL, uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)a1 + 1672))(a1, a2, a3, a4, a5, a6, a7);
  *(void *)&long long v292 = v75;
  *((void *)&v292 + 1) = v144;
  if (!v75)
  {
LABEL_147:
    uint64_t v36 = 0;
LABEL_332:
    unint64_t v76 = 0;
    unint64_t v38 = 0;
    unsigned int v37 = 1;
LABEL_333:
    unsigned int v77 = 1;
    unsigned int v39 = 1;
    unsigned int v78 = 1;
    goto LABEL_334;
  }
  return (uint64_t *)v292;
}

uint64_t *sub_1CD0074DC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::APInt *this, uint64_t a7)
{
  uint64_t v14 = sub_1CCFD8140(*(void *)(*(void *)(a1 + 32) + 40), *(void *)(*(void *)(a1 + 32) + 48), this, 0, 0);
  if (!v14) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 80);
  uint64_t v16 = *(unsigned int *)(v15 + 32);
  if (v16 > 0x40)
  {
    int v17 = 0;
    int64_t v18 = (unint64_t)(v16 + 63) >> 6;
    do
    {
      if (v18-- < 1) {
        break;
      }
      unint64_t v20 = *(void *)(*(void *)(v15 + 24) + 8 * v18);
      v17 += __clz(v20);
    }
    while (!v20);
    int v21 = v16 | 0xFFFFFFC0;
    if ((v16 & 0x3F) == 0) {
      int v21 = 0;
    }
    if (v17 + v21 != v16 - 1) {
      return 0;
    }
  }
  else if (*(void *)(v15 + 24) != 1)
  {
    return 0;
  }
  uint64_t v22 = **(void **)(a1 + 32);
  if (*(_WORD *)(v22 + 24) != 56) {
    return 0;
  }
  BOOL v23 = *(long long **)(v22 + 32);
  long long v81 = *v23;
  long long v80 = *(long long *)((char *)v23 + 40);
  v79[0] = this;
  v79[1] = &v81;
  v79[2] = &v80;
  if (*(_WORD *)(v81 + 24) == 56
    && (sub_1CD01DF5C((uint64_t)v79, **(void **)(v81 + 32), *(void *)(*(void *)(v81 + 32) + 8), *(void *)(*(void *)(v81 + 32) + 40), *(void *)(*(void *)(v81 + 32) + 48), v80, DWORD2(v80)) & 1) != 0)
  {
    int v72 = 1;
  }
  else if (*(_WORD *)(v80 + 24) == 56)
  {
    int v72 = sub_1CD01DF5C((uint64_t)v79, **(void **)(v80 + 32), *(void *)(*(void *)(v80 + 32) + 8), *(void *)(*(void *)(v80 + 32) + 40), *(void *)(*(void *)(v80 + 32) + 48), v81, DWORD2(v81));
  }
  else
  {
    int v72 = 0;
  }
  int v73 = *(unsigned __int16 *)(a1 + 24);
  unsigned int v24 = sub_1CCFD8ECC(a3, v81, *((BOOL *)&v81 + 1), (unsigned int *)this, a7);
  unsigned int v25 = sub_1CCFD8ECC(a3, v80, *((BOOL *)&v80 + 1), (unsigned int *)this, a7);
  if (v25 >= v24) {
    unsigned int v26 = v24;
  }
  else {
    unsigned int v26 = v25;
  }
  sub_1CCFCE670(a3, v81, *((BOOL *)&v81 + 1), (unsigned int *)this, a7, (uint64_t)&v76);
  unsigned int v27 = DWORD2(v76);
  if (DWORD2(v76) > 0x40)
  {
    unsigned int v28 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v76);
  }
  else if (DWORD2(v76))
  {
    unsigned int v28 = __clz(~((void)v76 << -BYTE8(v76)));
  }
  else
  {
    unsigned int v28 = 0;
  }
  if (v78 >= 0x41 && v77)
  {
    MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
    unsigned int v27 = DWORD2(v76);
  }
  if (v27 >= 0x41 && (void)v76) {
    MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
  }
  sub_1CCFCE670(a3, v80, *((BOOL *)&v80 + 1), (unsigned int *)this, a7, (uint64_t)&v76);
  unsigned int v31 = DWORD2(v76);
  if (DWORD2(v76) > 0x40)
  {
    unsigned int v32 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v76);
  }
  else if (DWORD2(v76))
  {
    unsigned int v32 = __clz(~((void)v76 << -BYTE8(v76)));
  }
  else
  {
    unsigned int v32 = 0;
  }
  if (v78 >= 0x41 && v77)
  {
    MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
    unsigned int v31 = DWORD2(v76);
  }
  unsigned int v33 = v26 - 1;
  if (v31 >= 0x41 && (void)v76) {
    MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
  }
  if (v32 >= v28) {
    unsigned int v32 = v28;
  }
  if (v73 != 176)
  {
    if (!v32 || v33 >= v32)
    {
      if (!v33) {
        return 0;
      }
      unsigned int v34 = *(_DWORD *)(a5 + 8);
      char v35 = v34 - 1;
      uint64_t v36 = (void *)(v34 >= 0x41 ? *(void *)a5 + 8 * ((v34 - 1) >> 6) : a5);
      if ((*v36 >> v35)) {
        return 0;
      }
      goto LABEL_50;
    }
LABEL_49:
    unsigned int v39 = 162;
    uint64_t v40 = 199;
    unsigned int v41 = 164;
    goto LABEL_51;
  }
  if (v32 >= 2 && v33 < v32) {
    goto LABEL_49;
  }
  if (!v33) {
    return 0;
  }
LABEL_50:
  unsigned int v39 = 161;
  uint64_t v40 = 198;
  unsigned int v41 = 163;
  unsigned int v32 = v33;
LABEL_51:
  if (v72) {
    uint64_t v42 = v41;
  }
  else {
    uint64_t v42 = v39;
  }
  long long v76 = *(_OWORD *)(*(void *)(a1 + 40) + 16 * a2);
  LODWORD(v43) = sub_1CD3E12F4((unsigned __int8 *)&v76, v29, v30) - v32;
  if (v43 <= 8) {
    uint64_t v43 = 8;
  }
  else {
    uint64_t v43 = v43;
  }
  unint64_t v44 = (v43 - 1) | ((unint64_t)(v43 - 1) >> 1) | (((v43 - 1) | ((unint64_t)(v43 - 1) >> 1)) >> 2);
  unint64_t v45 = v44 | (v44 >> 4) | ((v44 | (v44 >> 4)) >> 8);
  int v46 = (v45 >> 16) | v45;
  if (v46 > 62)
  {
    if (v46 == 63)
    {
      uint64_t v47 = 0;
      unint64_t v48 = 6;
      goto LABEL_66;
    }
    if (v46 == 127)
    {
      uint64_t v47 = 0;
      unint64_t v48 = 7;
      goto LABEL_66;
    }
  }
  else
  {
    switch(v46)
    {
      case 31:
        uint64_t v47 = 0;
        unint64_t v48 = 5;
        goto LABEL_66;
      case 15:
        uint64_t v47 = 0;
        unint64_t v48 = 4;
        goto LABEL_66;
      case 7:
        uint64_t v47 = 0;
        unint64_t v48 = 3;
        goto LABEL_66;
    }
  }
  uint64_t v47 = llvm::IntegerType::get(*(llvm::IntegerType **)(a3 + 56), (llvm::LLVMContext *)(v46 + 1));
  unint64_t v48 = 0;
LABEL_66:
  if ((_BYTE)v76)
  {
    if (v76 - 15 >= 0x9C) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if ((*(_DWORD *)(*((void *)&v76 + 1) + 8) & 0xFE) == 0x12)
  {
LABEL_68:
    unint64_t v49 = *(llvm::LLVMContext **)(a3 + 56);
    int v50 = (llvm::Type *)sub_1CC4A0738((llvm::EVT *)&v76);
    unint64_t v48 = sub_1CB882C1C(v49, v48, v47, v50);
    uint64_t v47 = v51;
  }
LABEL_69:
  if (!(_BYTE)v48
    || v48 != 1 && !*(void *)(a4 + 8 * v48 + 96)
    || (*(unsigned char *)(a4 + 390 * v48 + v42 + 3862) & 0xFB) != 0)
  {
    return 0;
  }
  int v52 = *(unsigned __int8 **)(a1 + 64);
  unsigned int v74 = v52;
  if (v52) {
    llvm::MetadataTracking::track((uint64_t)&v74, v52, 2);
  }
  int v75 = *(_DWORD *)(a1 + 60);
  uint64_t v53 = *(void *)(a3 + 832);
  if (v53) {
    __int16 v54 = *(_WORD *)(v53 + 8);
  }
  else {
    __int16 v54 = 0;
  }
  int v55 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)0xC9, (uint64_t)&v74, (llvm *)v48, v47, v81, *((void **)&v81 + 1), v54);
  uint64_t v57 = v56;
  uint64_t v58 = *(void *)(a3 + 832);
  if (v58) {
    __int16 v59 = *(_WORD *)(v58 + 8);
  }
  else {
    __int16 v59 = 0;
  }
  unsigned int v60 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)0xC9, (uint64_t)&v74, (llvm *)v48, v47, v80, *((void **)&v80 + 1), v59);
  uint64_t v63 = *(void *)(a3 + 832);
  if (v63) {
    LOWORD(v63) = *(_WORD *)(v63 + 8);
  }
  int v65 = sub_1CCFDED5C(a3, v42, (const llvm::APInt *)&v74, (llvm *)v48, v47, (uint64_t)v55, v57, v62, (uint64_t)v60, v61, v63);
  uint64_t v66 = *(void *)(a3 + 832);
  if (v66) {
    __int16 v67 = *(_WORD *)(v66 + 8);
  }
  else {
    __int16 v67 = 0;
  }
  unsigned int v37 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)v40, (uint64_t)&v74, (llvm *)v76, *((uint64_t *)&v76 + 1), (uint64_t)v65, v64, v67);
  if (v74)
  {
    int v68 = *v74;
    if ((v68 - 4) > 0x1E)
    {
      if ((v68 - 3) >= 0xFFFFFFFE) {
        uint64_t v71 = v74;
      }
      else {
        uint64_t v71 = 0;
      }
      if ((v68 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v70 = (unint64_t)(v71 + 8);
LABEL_100:
        __int16 v82 = &v74;
        sub_1CC5FA668(v70 + 16, &v82);
        return v37;
      }
      if (v68 == 3) {
        *((void *)v74 + 1) = 0;
      }
    }
    else if ((v74[1] & 0x7F) == 2 || *((_DWORD *)v74 + 3))
    {
      uint64_t v69 = *((void *)v74 + 2);
      if ((v69 & 4) != 0)
      {
        unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFF8;
        if (v70) {
          goto LABEL_100;
        }
      }
    }
  }
  return v37;
}

uint64_t sub_1CD007B58(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void **a7, unsigned int a8, char a9)
{
  uint64_t v548 = *MEMORY[0x1E4F143B8];
  uint64_t v539 = a2;
  uint64_t v540 = a3;
  unsigned int v538 = a8;
  long long v537 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
  int v536 = *(unsigned __int16 *)(a2 + 24);
  unint64_t v14 = *(unsigned int *)(a4 + 8);
  unsigned int v15 = v14;
  unsigned int v535 = *(_DWORD *)(a4 + 8);
  if (v14 > 0x40) {
    operator new[]();
  }
  __b = *(void **)a4;
  LODWORD(v545[1]) = v14;
  v545[0] = 0;
  if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
    MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
  }
  uint64_t v16 = v545[0];
  *a6 = v545[0];
  unsigned int v17 = v545[1];
  *((_DWORD *)a6 + 2) = v545[1];
  if (*((_DWORD *)a5 + 2) > 0x40u || v17 > 0x40)
  {
    if (a5 != a6)
    {
      llvm::APInt::reallocate((uint64_t)a5, v17);
      uint64_t v34 = *((unsigned int *)a5 + 2);
      if (v34 <= 0x40) {
        *a5 = *a6;
      }
      else {
        memcpy((void *)*a5, (const void *)*a6, ((unint64_t)(v34 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *a5 = v16;
    *((_DWORD *)a5 + 2) = *((_DWORD *)a6 + 2);
  }
  if (!(*(unsigned int (**)(void, uint64_t, uint64_t, void **))(*(void *)(*a7)[3] + 1600))((*a7)[3], v539, v540, a7))goto LABEL_41; {
  if ((_BYTE)v537)
  }
  {
    if (v537 - 120 < 0x33) {
      goto LABEL_41;
    }
  }
  else if (*(unsigned char *)(*((void *)&v537 + 1) + 8) == 19)
  {
LABEL_41:
    uint64_t v21 = 0;
    goto LABEL_42;
  }
  if (*(_WORD *)(v539 + 24) == 51)
  {
    uint64_t v19 = *((unsigned int *)a5 + 2);
    if (v19 > 0x40)
    {
      memset((void *)*a5, 255, ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
      LODWORD(v19) = *((_DWORD *)a5 + 2);
      if (v19)
      {
LABEL_19:
        unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
        if (v19 >= 0x41) {
          a5 = (void *)(*a5 + 8 * ((((unint64_t)v19 + 63) >> 6) - 1));
        }
        goto LABEL_21;
      }
    }
    else
    {
      *a5 = -1;
      if (v19) {
        goto LABEL_19;
      }
    }
    unint64_t v20 = 0;
LABEL_21:
    uint64_t v21 = 0;
    *a5 &= v20;
    goto LABEL_42;
  }
  uint64_t v22 = *(void *)(v539 + 48);
  if (v22) {
    LOBYTE(v22) = *(void *)(v22 + 32) == 0;
  }
  unsigned int v23 = v535;
  if ((v22 & 1) == 0 && (a9 & 1) == 0)
  {
    if (v535 > 0x40)
    {
      memset(__b, 255, (((unint64_t)v535 + 63) >> 3) & 0x3FFFFFF8);
      unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v535;
      p_b = (void **)((char *)__b + 8 * (((unint64_t)v535 + 63) >> 6) - 8);
      uint64_t v24 = (uint64_t)*p_b;
    }
    else
    {
      uint64_t v24 = -1;
      __b = (void *)-1;
      unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v535;
      if (!v535) {
        unint64_t v25 = 0;
      }
      p_b = &__b;
    }
    *p_b = (void *)(v24 & v25);
    unsigned int v23 = v535;
  }
  unsigned int v27 = __b;
  if (v23 < 0x41)
  {
LABEL_39:
    if (v27) {
      goto LABEL_40;
    }
    uint64_t v49 = *((unsigned int *)a5 + 2);
    if (v49 > 0x40)
    {
      memset((void *)*a5, 255, ((unint64_t)(v49 + 63) >> 3) & 0x3FFFFFF8);
      LODWORD(v49) = *((_DWORD *)a5 + 2);
      if (v49)
      {
LABEL_58:
        unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v49;
        if (v49 >= 0x41) {
          a5 = (void *)(*a5 + 8 * ((((unint64_t)v49 + 63) >> 6) - 1));
        }
        goto LABEL_60;
      }
    }
    else
    {
      *a5 = -1;
      if (v49) {
        goto LABEL_58;
      }
    }
    unint64_t v50 = 0;
LABEL_60:
    *a5 &= v50;
    uint64_t v51 = (void *)v539;
    int v52 = v540;
    uint64_t v53 = sub_1CD3DD4D8((uint64_t)*a7, (llvm *)v537, *((uint64_t *)&v537 + 1));
    a7[2] = v51;
    *((_DWORD *)a7 + 6) = v52;
    a7[4] = v53;
    *((_DWORD *)a7 + 10) = v54;
    uint64_t v21 = 1;
    goto LABEL_42;
  }
  int v28 = 0;
  int64_t v29 = ((unint64_t)v23 + 63) >> 6;
  do
  {
    BOOL v30 = v29-- < 1;
    if (v30) {
      break;
    }
    unint64_t v31 = *((void *)__b + v29);
    v28 += __clz(v31);
  }
  while (!v31);
  unsigned int v32 = v23 | 0xFFFFFFC0;
  if ((v23 & 0x3F) == 0) {
    unsigned int v32 = 0;
  }
  if (v23 - v28 - v32 <= 0x40)
  {
    unsigned int v27 = *(void **)__b;
    goto LABEL_39;
  }
LABEL_40:
  if (v538 > 5) {
    goto LABEL_41;
  }
  uint64_t v35 = v539;
  uint64_t v36 = *(unsigned __int8 **)(v539 + 64);
  uint64_t v532 = v36;
  if (v36) {
    llvm::MetadataTracking::track((uint64_t)&v532, v36, 2);
  }
  int v533 = *(_DWORD *)(v35 + 60);
  unsigned int v37 = sub_1CD3E12F4((unsigned __int8 *)&v537, (uint64_t)v36, v18);
  unsigned int v40 = v37;
  int v41 = *(unsigned __int8 *)(*(void *)(*(void *)(*a7)[5] + 40) + 272);
  v531[0] = a1;
  v531[1] = &__b;
  v531[2] = a7;
  v531[3] = &v538;
  v531[4] = &v536;
  v531[5] = &v539;
  v531[6] = &v537;
  if (v536 <= 145)
  {
    if (v536 > 95)
    {
      if ((v536 - 96) < 5) {
        goto LABEL_63;
      }
LABEL_172:
      if (*(unsigned __int16 *)(v539 + 24) < 0x186u)
      {
        LODWORD(v545[1]) = 1;
        v545[0] = 0;
        unsigned int v547 = 1;
        uint64_t v546 = 0;
        DWORD2(v542) = v37;
        if (v37 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v542);
        }
        if (v37) {
          unint64_t v117 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v37;
        }
        else {
          unint64_t v117 = 0;
        }
        *(void *)&long long v542 = v117;
        char v118 = sub_1CCFFA248(a1, v539, v540, &v542, a4, v545, a7, v538, a9);
        if (v40 >= 0x41 && (void)v542) {
          MEMORY[0x1D25D9CB0](v542, 0x1000C8000313F17);
        }
        if (v547 >= 0x41 && v546) {
          MEMORY[0x1D25D9CB0](v546, 0x1000C8000313F17);
        }
        if (LODWORD(v545[1]) >= 0x41 && v545[0]) {
          MEMORY[0x1D25D9CB0](v545[0], 0x1000C8000313F17);
        }
        if ((v118 & 1) == 0) {
          goto LABEL_202;
        }
      }
      else if (((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 1656))(a1) & 1) == 0)
      {
        goto LABEL_202;
      }
      goto LABEL_511;
    }
    switch(v536)
    {
      case '8':
        long long v102 = *(uint64_t **)(v539 + 32);
        uint64_t v103 = *v102;
        uint64_t v104 = v102[1];
        uint64_t v105 = v102[5];
        int v106 = *((_DWORD *)v102 + 12);
        if (v103 == v105 && v106 == v104)
        {
          uint64_t v108 = *(void *)(v103 + 48);
          if (v108)
          {
            do
            {
              if (*(void *)(v108 + 16) != v539) {
                goto LABEL_63;
              }
              uint64_t v108 = *(void *)(v108 + 32);
            }
            while (v108);
            LODWORD(v545[1]) = 1;
            v545[0] = 0;
            DWORD2(v542) = 1;
            *(void *)&long long v542 = 0;
            char v109 = sub_1CD007B58(a1);
            if (DWORD2(v542) >= 0x41 && (void)v542) {
              MEMORY[0x1D25D9CB0](v542, 0x1000C8000313F17);
            }
            if (LODWORD(v545[1]) >= 0x41 && v545[0]) {
              MEMORY[0x1D25D9CB0](v545[0], 0x1000C8000313F17);
            }
            if (v109) {
              goto LABEL_511;
            }
          }
        }
        break;
      case '9':
        break;
      case ':':
LABEL_90:
        uint64_t v66 = *(uint64_t **)(v539 + 32);
        uint64_t v67 = *v66;
        uint64_t v68 = v66[1];
        uint64_t v69 = v66[5];
        uint64_t v70 = v66[6];
        LODWORD(v545[1]) = 1;
        v545[0] = 0;
        DWORD2(v542) = 1;
        *(void *)&long long v542 = 0;
        if (sub_1CD007B58(a1) & 1) != 0 || (sub_1CD007B58(a1))
        {
LABEL_92:
          if (DWORD2(v542) >= 0x41 && (void)v542) {
            MEMORY[0x1D25D9CB0](v542, 0x1000C8000313F17);
          }
          if (LODWORD(v545[1]) >= 0x41)
          {
            uint64_t v71 = v545[0];
            if (v545[0]) {
LABEL_97:
            }
              MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
          }
          goto LABEL_511;
        }
        uint64_t v113 = *((unsigned int *)a6 + 2);
        if (v113 > 0x40)
        {
          unint64_t v158 = (void *)*a6;
          uint64_t v159 = (uint64_t *)v542;
          unint64_t v160 = (unint64_t)(v113 + 63) >> 6;
          do
          {
            uint64_t v161 = *v159++;
            *v158++ |= v161;
            --v160;
          }
          while (v160);
        }
        else
        {
          *a6 |= v542;
        }
        uint64_t v162 = *((unsigned int *)a5 + 2);
        if (v162 > 0x40)
        {
          uint64_t v163 = (void *)*a5;
          uint64_t v164 = (uint64_t *)v545[0];
          unint64_t v165 = (unint64_t)(v162 + 63) >> 6;
          do
          {
            uint64_t v166 = *v164++;
            *v163++ &= v166;
            --v165;
          }
          while (v165);
        }
        else
        {
          *a5 &= (unint64_t)v545[0];
          LODWORD(v113) = *((_DWORD *)a6 + 2);
        }
        if (v113 > 0x40) {
          operator new[]();
        }
        unint64_t v167 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v113;
        if (!v113) {
          unint64_t v167 = 0;
        }
        if (v162 > 0x40)
        {
          int v168 = (void *)*a5;
          unint64_t v169 = ((unint64_t)v162 + 63) >> 6;
          uint64_t v170 = (uint64_t *)(v167 & ~*a6);
          do
          {
            uint64_t v171 = *v170++;
            *v168++ &= v171;
            --v169;
          }
          while (v169);
        }
        else
        {
          *a5 &= v167 & ~*a6;
        }
        unsigned int v172 = v535;
        if (v535)
        {
          if (v535 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__b) == v172) {
              goto LABEL_332;
            }
          }
          else if (__b == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v535))
          {
            goto LABEL_332;
          }
          if (sub_1CD00C374((uint64_t)v531, v67, v68, v69, v70)) {
            goto LABEL_92;
          }
        }
LABEL_332:
        if (DWORD2(v542) >= 0x41 && (void)v542) {
          MEMORY[0x1D25D9CB0](v542, 0x1000C8000313F17);
        }
        if (LODWORD(v545[1]) >= 0x41 && v545[0]) {
          MEMORY[0x1D25D9CB0](v545[0], 0x1000C8000313F17);
        }
        goto LABEL_202;
      default:
        goto LABEL_172;
    }
LABEL_63:
    int v55 = *(uint64_t **)(v539 + 32);
    uint64_t v56 = *v55;
    uint64_t v57 = v55[1];
    uint64_t v59 = v55[5];
    uint64_t v58 = v55[6];
    int v60 = 1;
    LODWORD(__src[1]) = 1;
    __src[0] = 0;
    unsigned int v529 = 1;
    int v528 = 0;
    if (sub_1CD007B58(a1)) {
      goto LABEL_71;
    }
    LODWORD(v527[1]) = 1;
    v527[0] = 0;
    unsigned int v526 = 1;
    uint64_t v525 = 0;
    if (sub_1CD007B58(a1))
    {
LABEL_65:
      if (v526 >= 0x41 && v525) {
        MEMORY[0x1D25D9CB0](v525, 0x1000C8000313F17);
      }
      if (LODWORD(v527[1]) >= 0x41 && v527[0]) {
        MEMORY[0x1D25D9CB0](v527[0], 0x1000C8000313F17);
      }
LABEL_71:
      if (v529 >= 0x41 && v528) {
        MEMORY[0x1D25D9CB0](v528, 0x1000C8000313F17);
      }
      if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
        MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
      }
      if (v60 == 2) {
        goto LABEL_202;
      }
      goto LABEL_511;
    }
    BOOL v498 = v57;
    uint64_t v500 = v56;
    uint64_t v502 = v59;
    unsigned int v157 = v526;
    if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
      MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
    }
    *a6 = (unint64_t)v528 & (unint64_t)v525;
    *((_DWORD *)a6 + 2) = v157;
    __uint64_t n = (size_t)*a7;
    *(void *)unint64_t v511 = v539;
    uint64_t v183 = *(void *)(v539 + 40) + 16 * v540;
    uint64_t v185 = *(void **)v183;
    unsigned int v184 = *(llvm::EVT ***)(v183 + 8);
    v545[0] = v185;
    v545[1] = v184;
    if ((_BYTE)v185)
    {
      unsigned __int8 v508 = sub_1CB8C2FBC((unsigned __int8 *)v545);
      unint64_t v188 = 0;
      unsigned int __dstb = 0;
    }
    else
    {
      unint64_t EVT = llvm::EVT::getEVT(v184[3], 0, v61);
      unsigned int __dstb = v187;
      unint64_t v188 = EVT & 0xFFFFFFFFFFFFFF00;
      unsigned __int8 v508 = EVT;
    }
    unsigned int v189 = sub_1CD3DB440((llvm::EVT *)v545, v187);
    LODWORD(v524) = v189;
    if (v189 >= 0x41) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v523);
    }
    uint64_t v523 = 0;
    unsigned __int8 v192 = v508;
    uint64_t v191 = *(void *)v511;
    if (v189)
    {
      uint64_t v193 = 0;
      uint64_t v194 = 0;
      uint64_t v195 = v189;
      uint64_t v503 = v189;
      uint64_t v505 = (llvm *)(v188 | v508);
      do
      {
        uint64_t v196 = v194 >> 6;
        if (LODWORD(v527[1]) >= 0x41) {
          uint64_t v197 = (void **)((char *)v527[0] + 8 * v196);
        }
        else {
          uint64_t v197 = v527;
        }
        uint64_t v198 = 1 << v194;
        if (((unint64_t)*v197 & (1 << v194)) != 0)
        {
          int v225 = sub_1CD3DD4D8(__n, v505, (uint64_t)__dstb);
          uint64_t v195 = v503;
          unsigned __int8 v192 = v508;
          uint64_t v191 = *(void *)v511;
          uint64_t v201 = (uint64_t)v225;
          uint64_t v199 = v226;
        }
        else
        {
          uint64_t v199 = 0;
          uint64_t v200 = **(void **)(v191 + 32);
          if (v200)
          {
            uint64_t v201 = 0;
            if (*(_WORD *)(v200 + 24) == 146)
            {
              int v202 = (uint64_t *)(*(void *)(v200 + 32) + v193);
              uint64_t v201 = *v202;
              uint64_t v199 = v202[1];
              unsigned int v203 = *(unsigned __int16 *)(*v202 + 24);
              BOOL v204 = v203 == 35 || v203 == 11;
              uint64_t v205 = v204 ? *v202 : 0;
              BOOL v30 = v203 > 0x33;
              uint64_t v206 = (1 << v203) & 0x8001000001000;
              BOOL v207 = v30 || v206 == 0;
              if (v207 && (!v205 || (*(unsigned char *)(v205 + 26) & 8) != 0))
              {
                uint64_t v199 = 0;
                uint64_t v201 = 0;
              }
            }
          }
          else
          {
            uint64_t v201 = 0;
          }
        }
        if (LODWORD(__src[1]) >= 0x41) {
          uint64_t v208 = (void **)((char *)__src[0] + 8 * v196);
        }
        else {
          uint64_t v208 = __src;
        }
        if (((unint64_t)*v208 & v198) != 0)
        {
          unint64_t v227 = sub_1CD3DD4D8(__n, v505, (uint64_t)__dstb);
          uint64_t v195 = v503;
          unsigned __int8 v192 = v508;
          uint64_t v191 = *(void *)v511;
          uint64_t v212 = (uint64_t)v227;
        }
        else
        {
          uint64_t v209 = *(void *)(*(void *)(v191 + 32) + 40);
          if (!v209 || *(_WORD *)(v209 + 24) != 146) {
            goto LABEL_406;
          }
          uint64_t v210 = (uint64_t *)(*(void *)(v209 + 32) + v193);
          uint64_t v212 = *v210;
          uint64_t v211 = v210[1];
          unsigned int v213 = *(unsigned __int16 *)(*v210 + 24);
          BOOL v214 = v213 == 35 || v213 == 11;
          uint64_t v215 = v214 ? *v210 : 0;
          BOOL v30 = v213 > 0x33;
          uint64_t v216 = (1 << v213) & 0x8001000001000;
          BOOL v217 = v30 || v216 == 0;
          if (v217 && (!v215 || (*(unsigned char *)(v215 + 26) & 8) != 0)) {
            goto LABEL_406;
          }
        }
        if (v201)
        {
          if (v212)
          {
            unsigned int v218 = (void **)(*(void *)(v201 + 40) + 16 * v199);
            if (*(unsigned __int8 *)v218 == v192 && (v192 || v218[1] == __dstb))
            {
              unsigned int v219 = (void **)(*(void *)(v212 + 40) + 16 * v211);
              if (*(unsigned __int8 *)v219 == v192 && (v192 || v219[1] == __dstb))
              {
                uint64_t v497 = v211;
                unsigned int v496 = *(unsigned __int16 *)(v191 + 24);
                unsigned int v220 = *(unsigned __int8 **)(v191 + 64);
                *(void *)&long long v542 = v220;
                if (v220) {
                  llvm::MetadataTracking::track((uint64_t)&v542, v220, 2);
                }
                DWORD2(v542) = *(_DWORD *)(*(void *)v511 + 60);
                uint64_t v221 = *(void *)(__n + 832);
                if (v221) {
                  LOWORD(v221) = *(_WORD *)(v221 + 8);
                }
                int v222 = *((unsigned __int16 *)sub_1CCFDED5C(__n, v496, (const llvm::APInt *)&v542, v505, (uint64_t)__dstb, v201, v199, v190, v212, v497, v221)+ 12);
                if ((void)v542)
                {
                  int v223 = *(unsigned __int8 *)v542;
                  if ((v223 - 4) > 0x1E)
                  {
                    if ((v223 - 3) >= 0xFFFFFFFE) {
                      uint64_t v228 = v542;
                    }
                    else {
                      uint64_t v228 = 0;
                    }
                    if ((v223 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v229 = v228 + 8;
                      goto LABEL_415;
                    }
                    if (v223 == 3) {
                      *(void *)(v542 + 8) = 0;
                    }
                  }
                  else if ((*(unsigned char *)(v542 + 1) & 0x7F) == 2 || *(_DWORD *)(v542 + 12))
                  {
                    uint64_t v230 = *(void *)(v542 + 16);
                    if ((v230 & 4) != 0)
                    {
                      unint64_t v229 = v230 & 0xFFFFFFFFFFFFFFF8;
                      if (v229)
                      {
LABEL_415:
                        *(void *)&long long v522 = &v542;
                        sub_1CC5FA668(v229 + 16, &v522);
                      }
                    }
                  }
                }
                unsigned __int8 v192 = v508;
                uint64_t v191 = *(void *)v511;
                uint64_t v195 = v503;
                if (v222 == 51)
                {
                  unint64_t v224 = &v523;
                  if (v524 >= 0x41) {
                    unint64_t v224 = (uint64_t *)(v523 + 8 * v196);
                  }
                  *v224 |= v198;
                }
              }
            }
          }
        }
LABEL_406:
        ++v194;
        v193 += 40;
      }
      while (v195 != v194);
    }
    if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
      MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
    }
    *a5 = v523;
    *((_DWORD *)a5 + 2) = v524;
    unsigned int v231 = v535;
    if (v535)
    {
      if (v535 <= 0x40)
      {
        if (__b == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v535)) {
          goto LABEL_435;
        }
LABEL_433:
        if (sub_1CD00C374((uint64_t)v531, v500, v498, v502, v58))
        {
          int v60 = 1;
          goto LABEL_65;
        }
        goto LABEL_435;
      }
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__b) != v231) {
        goto LABEL_433;
      }
    }
LABEL_435:
    int v60 = 2;
    goto LABEL_65;
  }
  switch(v536)
  {
    case 146:
      unsigned int v87 = v535;
      if (!v535) {
        goto LABEL_277;
      }
      if (v535 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__b) == v87)
        {
LABEL_277:
          if (!v14) {
            goto LABEL_202;
          }
          uint64_t v152 = 0;
          uint64_t v153 = 0;
          while (1)
          {
            *(_OWORD *)unsigned int v545 = *(_OWORD *)(*(void *)(v539 + 32) + v152);
            if (*((_WORD *)v545[0] + 12) == 51)
            {
              uint64_t v154 = (char *)a5;
              if (*((_DWORD *)a5 + 2) >= 0x41u)
              {
                char v155 = (char *)*a5;
LABEL_282:
                uint64_t v154 = &v155[8 * (v153 >> 6)];
              }
            }
            else
            {
              if ((llvm::Type *)v40 != sub_1CD7878C0((unsigned int *)v545, v38, (BOOL)v39)) {
                goto LABEL_284;
              }
              uint64_t v156 = v545[0];
              if (!sub_1CD7F2D2C((uint64_t)v545[0]) && !sub_1CD8028FC((uint64_t)v156)) {
                goto LABEL_284;
              }
              uint64_t v154 = (char *)a6;
              if (*((_DWORD *)a6 + 2) >= 0x41u)
              {
                char v155 = (char *)*a6;
                goto LABEL_282;
              }
            }
            *(void *)v154 |= 1 << v153;
LABEL_284:
            ++v153;
            v152 += 40;
            if (v14 == v153) {
              goto LABEL_202;
            }
          }
        }
      }
      else if (__b == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v535))
      {
        goto LABEL_277;
      }
      if (*(_WORD *)(v539 + 56))
      {
        uint64_t v38 = *(void *)(v539 + 32);
        unsigned int v39 = (char *)(v38 + 40 * *(unsigned __int16 *)(v539 + 56));
        uint64_t v151 = v38;
        while (*(void *)v38 == *(void *)v151 && *(_DWORD *)(v38 + 8) == *(_DWORD *)(v151 + 8))
        {
          v151 += 40;
          if ((char *)v151 == v39) {
            goto LABEL_277;
          }
        }
        unsigned int __dstd = v40;
        v545[0] = &v546;
        v545[1] = (void *)0x2000000000;
        sub_1CD3E560C((uint64_t)v545, (char *)v38, v39);
        if (v14)
        {
          uint64_t v297 = 0;
          char v298 = 0;
LABEL_627:
          unsigned int v299 = (uint64_t *)v545[0];
          uint64_t v300 = 16 * v297++;
          do
          {
            char v301 = v297 - 1;
            uint64_t v302 = (v297 - 1) >> 6;
            int v303 = (void **)((char *)__b + 8 * v302);
            if (v535 < 0x41) {
              int v303 = &__b;
            }
            uint64_t v304 = 1 << v301;
            if (((unint64_t)*v303 & (1 << v301)) == 0
              && *(_WORD *)(*(void *)((char *)v545[0] + v300) + 24) != 51)
            {
              uint64_t v305 = *(void *)(*(void *)v545[0] + 40) + 16 * *((unsigned int *)v545[0] + 2);
              unsigned int v306 = sub_1CD3DD4D8((uint64_t)*a7, *(llvm **)v305, *(void *)(v305 + 8));
              int v307 = (char *)v545[0] + v300;
              *(void *)int v307 = v306;
              *((_DWORD *)v307 + 2) = v38;
              if (*((_DWORD *)a5 + 2) >= 0x41u) {
                uint64_t v308 = (void *)(*a5 + 8 * v302);
              }
              else {
                uint64_t v308 = a5;
              }
              *v308 |= v304;
              char v298 = 1;
              if (v297 == v14)
              {
                unsigned int v299 = (uint64_t *)v545[0];
                goto LABEL_878;
              }
              goto LABEL_627;
            }
            ++v297;
            v300 += 16;
          }
          while (v297 - v14 != 1);
          if ((v298 & 1) == 0)
          {
            char v324 = 0;
            goto LABEL_757;
          }
LABEL_878:
          int v429 = (void *)v539;
          int v428 = v540;
          uint64_t v430 = (*a7)[104];
          uint64_t v431 = v430 ? *(unsigned __int16 *)(v430 + 8) : 0;
          int v457 = sub_1CD7FF4E8(*a7, (const char *)0x92, (const llvm::APInt *)&v532, (llvm *)v537, *((uint64_t *)&v537 + 1), v299, LODWORD(v545[1]), v431);
          a7[2] = v429;
          *((_DWORD *)a7 + 6) = v428;
          a7[4] = v457;
          *((_DWORD *)a7 + 10) = v38;
          char v324 = 1;
        }
        else
        {
          char v324 = 0;
        }
        unsigned int v299 = (uint64_t *)v545[0];
LABEL_757:
        if (v299 != &v546) {
          free(v299);
        }
        unsigned int v40 = __dstd;
        if (v324) {
          goto LABEL_511;
        }
      }
      goto LABEL_277;
    case 147:
      unsigned int v78 = *(void **)(v539 + 32);
      long long v80 = (void *)*v78;
      uint64_t v79 = v78[1];
      uint64_t v81 = v78[10];
      int v82 = *(unsigned __int16 *)(v81 + 24);
      if (v82 != 35 && v82 != 11) {
        goto LABEL_262;
      }
      __dst = (unsigned __int16 *)v78[5];
      uint64_t v84 = *(void *)(v81 + 80);
      uint64_t v85 = *(unsigned int *)(v84 + 32);
      if (v85 >= 0x41)
      {
        int v145 = 0;
        int64_t v146 = (unint64_t)(v85 + 63) >> 6;
        do
        {
          BOOL v30 = v146-- < 1;
          if (v30) {
            break;
          }
          unint64_t v147 = *(void *)(*(void *)(v84 + 24) + 8 * v146);
          v145 += __clz(v147);
        }
        while (!v147);
        int v148 = v85 | 0xFFFFFFC0;
        if ((v85 & 0x3F) == 0) {
          int v148 = 0;
        }
        if ((v85 - v145 - v148) >= 0x41) {
          goto LABEL_262;
        }
        unint64_t v86 = **(void **)(v84 + 24);
      }
      else
      {
        unint64_t v86 = *(void *)(v84 + 24);
      }
      if (v86 < v14)
      {
        unint64_t v149 = (void **)((char *)__b + 8 * (v86 >> 6));
        if (v535 < 0x41) {
          unint64_t v149 = &__b;
        }
        if (((unint64_t)*v149 & (1 << v86)) == 0)
        {
          int v234 = v540;
          a7[2] = (void *)v539;
          *((_DWORD *)a7 + 6) = v234;
          a7[4] = v80;
          *((_DWORD *)a7 + 10) = v79;
          goto LABEL_511;
        }
        LODWORD(v545[1]) = v535;
        if (v535 > 0x40) {
          operator new[]();
        }
        v545[0] = (void *)((unint64_t)__b & ~(1 << v86));
        char v235 = sub_1CD007B58(a1);
        if (v235)
        {
          int v150 = 1;
        }
        else
        {
          sub_1CD6BFBEC(a5, v86, __dst[12] == 51);
          int v338 = sub_1CD7F2D2C((uint64_t)__dst) || sub_1CD8028FC((uint64_t)__dst);
          sub_1CD6BFBEC(a6, v86, v338);
          int v150 = 2;
        }
LABEL_440:
        if (v150 == 2) {
          goto LABEL_202;
        }
        goto LABEL_511;
      }
LABEL_262:
      LODWORD(v545[1]) = 1;
      v545[0] = 0;
      DWORD2(v542) = 1;
      *(void *)&long long v542 = 0;
      if (sub_1CD007B58(a1)) {
        int v150 = 1;
      }
      else {
        int v150 = 2;
      }
      if (DWORD2(v542) >= 0x41 && (void)v542) {
        MEMORY[0x1D25D9CB0](v542, 0x1000C8000313F17);
      }
      if (LODWORD(v545[1]) >= 0x41 && v545[0]) {
        MEMORY[0x1D25D9CB0]();
      }
      goto LABEL_440;
    case 148:
    case 152:
    case 154:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 174:
      goto LABEL_172;
    case 149:
      *(_OWORD *)unsigned int v545 = *(_OWORD *)(*(void *)(**(void **)(v539 + 32) + 40)
                                  + 16 * *(unsigned int *)(*(void *)(v539 + 32) + 8));
      uint64_t v242 = *(unsigned __int16 *)(v539 + 56);
      unsigned int v243 = sub_1CD3DB440((llvm::EVT *)v545, (const char *)v38);
      if (!v242) {
        goto LABEL_202;
      }
      unsigned int v244 = v243;
      unsigned int v245 = 0;
      uint64_t v246 = 0;
      while (1)
      {
        llvm::APInt::extractBits((uint64_t)&__b, v244, v245, (uint64_t)&v542);
        LODWORD(__src[1]) = 1;
        __src[0] = 0;
        unsigned int v529 = 1;
        int v528 = 0;
        if (sub_1CD007B58(a1)) {
          break;
        }
        llvm::APInt::insertBits((void **)a5, (const llvm::APInt *)__src, v245);
        llvm::APInt::insertBits((void **)a6, (const llvm::APInt *)&v528, v245);
        if (v529 >= 0x41 && v528) {
          MEMORY[0x1D25D9CB0](v528, 0x1000C8000313F17);
        }
        if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
          MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
        }
        if (DWORD2(v542) >= 0x41 && (void)v542) {
          MEMORY[0x1D25D9CB0](v542, 0x1000C8000313F17);
        }
        v246 += 40;
        v245 += v244;
        if (40 * v242 == v246) {
          goto LABEL_202;
        }
      }
      if (v529 >= 0x41 && v528) {
        MEMORY[0x1D25D9CB0](v528, 0x1000C8000313F17);
      }
      if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
        MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
      }
      if (DWORD2(v542) < 0x41) {
        goto LABEL_511;
      }
      uint64_t v71 = (void *)v542;
      if (!(void)v542) {
        goto LABEL_511;
      }
      goto LABEL_97;
    case 150:
      uint64_t v247 = *(void *)(v539 + 32);
      *(_OWORD *)unsigned int v545 = *(_OWORD *)v247;
      long long v542 = *(_OWORD *)(v247 + 40);
      uint64_t v248 = *(void *)(*(void *)(v247 + 80) + 80);
      int v249 = (void *)(v248 + 24);
      if (*(_DWORD *)(v248 + 32) >= 0x41u) {
        int v249 = (void *)*v249;
      }
      unsigned int v250 = *(_DWORD *)v249;
      uint64_t v251 = v542;
      *(_OWORD *)unint64_t __src = *(_OWORD *)(*(void *)(v542 + 40) + 16 * DWORD2(v542));
      unsigned int v252 = sub_1CD3DB440((llvm::EVT *)__src, (const char *)v38);
      llvm::APInt::extractBits((uint64_t)&__b, v252, v250, (uint64_t)__src);
      unsigned int v529 = v535;
      if (v535 > 0x40) {
        operator new[]();
      }
      int v528 = __b;
      LODWORD(v527[1]) = v252;
      if (v252 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)v527);
      }
      v527[0] = 0;
      llvm::APInt::insertBits(&v528, (const llvm::APInt *)v527, v250);
      if (LODWORD(v527[1]) >= 0x41 && v527[0]) {
        MEMORY[0x1D25D9CB0](v527[0], 0x1000C8000313F17);
      }
      LODWORD(v527[1]) = 1;
      v527[0] = 0;
      unsigned int v526 = 1;
      uint64_t v525 = 0;
      uint64_t v264 = *((void *)&v542 + 1);
      char v265 = 0;
      if (sub_1CD007B58(a1)) {
        goto LABEL_805;
      }
      if (v529 > 0x40)
      {
        int v317 = 0;
        int64_t v318 = ((unint64_t)v529 + 63) >> 6;
        do
        {
          BOOL v30 = v318-- < 1;
          if (v30) {
            break;
          }
          unint64_t v319 = *((void *)v528 + v318);
          v317 += __clz(v319);
        }
        while (!v319);
        unsigned int v320 = v529 | 0xFFFFFFC0;
        if ((v529 & 0x3F) == 0) {
          unsigned int v320 = 0;
        }
        if (v317 + v320 != v529) {
          goto LABEL_685;
        }
      }
      else if (v528)
      {
        goto LABEL_685;
      }
      if (*((_WORD *)v545[0] + 12) != 51)
      {
        uint64_t v433 = (void *)v539;
        int v432 = v540;
        unsigned int v434 = *a7;
        long long v435 = v537;
        unint64_t v437 = sub_1CD3DD4D8((uint64_t)*a7, (llvm *)v537, *((uint64_t *)&v537 + 1));
        uint64_t v439 = *(void *)(v539 + 32);
        uint64_t v440 = *(void *)(v439 + 80);
        uint64_t v441 = *(void *)(v439 + 88);
        uint64_t v442 = v434[104];
        if (v442) {
          LOWORD(v442) = *(_WORD *)(v442 + 8);
        }
        unint64_t v443 = sub_1CD7F5D38(v434, (const char *)0x96, (const llvm::APInt *)&v532, (llvm *)v435, *((uint64_t *)&v435 + 1), (uint64_t)v437, v436, v438, v251, v264, v440, v441, SHIDWORD(v441), v442);
        char v265 = 0;
        a7[2] = v433;
        *((_DWORD *)a7 + 6) = v432;
        a7[4] = v443;
        *((_DWORD *)a7 + 10) = v444;
LABEL_805:
        if (v526 >= 0x41 && v525) {
          MEMORY[0x1D25D9CB0](v525, 0x1000C8000313F17);
        }
        if (LODWORD(v527[1]) >= 0x41 && v527[0]) {
          MEMORY[0x1D25D9CB0](v527[0], 0x1000C8000313F17);
        }
        if (v529 >= 0x41 && v528) {
          MEMORY[0x1D25D9CB0](v528, 0x1000C8000313F17);
        }
        if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
          MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
        }
        if (v265) {
          goto LABEL_202;
        }
        goto LABEL_511;
      }
LABEL_685:
      unsigned int v321 = v545[0];
      unsigned int v322 = v545[1];
      char v265 = 0;
      if (sub_1CD007B58(a1)) {
        goto LABEL_805;
      }
      llvm::APInt::insertBits((void **)a5, (const llvm::APInt *)v527, v250);
      llvm::APInt::insertBits((void **)a6, (const llvm::APInt *)&v525, v250);
      unsigned int v323 = v529;
      if (v529)
      {
        if (v529 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v528) != v323) {
            goto LABEL_854;
          }
        }
        else if (v528 != (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v529))
        {
          goto LABEL_854;
        }
      }
      int v370 = (int)__src[1];
      if (!LODWORD(__src[1])) {
        goto LABEL_804;
      }
      if (LODWORD(__src[1]) > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)__src) == v370) {
          goto LABEL_804;
        }
      }
      else if (__src[0] == (void *)(0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1])))
      {
        goto LABEL_804;
      }
LABEL_854:
      unint64_t v386 = (unint64_t)sub_1CD80E5C8(a1, (uint64_t)v321, (BOOL)v322, (unsigned int *)&v528, (uint64_t)*a7, v538 + 1);
      uint64_t v523 = v386;
      uint64_t v524 = v387;
      uint64_t v388 = sub_1CD80E5C8(a1, v251, v264, (unsigned int *)__src, (uint64_t)*a7, v538 + 1);
      *(void *)&long long v522 = v388;
      *((void *)&v522 + 1) = v390;
      if (v386 | (unint64_t)v388)
      {
        uint64_t v391 = (void **)&v523;
        if (!v386) {
          uint64_t v391 = v545;
        }
        uint64_t v392 = (uint64_t)*v391;
        LODWORD(v524) = *((_DWORD *)v391 + 2);
        uint64_t v523 = v392;
        unsigned int v393 = &v522;
        if (!v388) {
          unsigned int v393 = &v542;
        }
        int v394 = *((_DWORD *)v393 + 2);
        *(void *)&long long v522 = *(void *)v393;
        DWORD2(v522) = v394;
        unint64_t v395 = *a7;
        uint64_t v396 = v539;
        unint64_t v397 = (const char *)*(unsigned __int16 *)(v539 + 24);
        uint64_t v398 = *(unsigned __int8 **)(v539 + 64);
        uint64_t v520 = v398;
        uint64_t v399 = v539;
        if (v398)
        {
          llvm::MetadataTracking::track((uint64_t)&v520, v398, 2);
          uint64_t v399 = v539;
        }
        int v521 = *(_DWORD *)(v396 + 60);
        uint64_t v400 = *(void *)(v399 + 32);
        uint64_t v401 = *(void *)(v400 + 80);
        uint64_t v402 = *(void *)(v400 + 88);
        uint64_t v403 = v395[104];
        if (v403) {
          LOWORD(v403) = *(_WORD *)(v403 + 8);
        }
        uint64_t v404 = sub_1CD7F5D38(v395, v397, (const llvm::APInt *)&v520, (llvm *)v537, *((uint64_t *)&v537 + 1), v523, v524, v389, v522, *((uint64_t *)&v522 + 1), v401, v402, SHIDWORD(v402), v403);
        int v406 = v405;
        if (!v520) {
          goto LABEL_867;
        }
        int v407 = *v520;
        if ((v407 - 4) > 0x1E)
        {
          if ((v407 - 3) >= 0xFFFFFFFE) {
            unint64_t v466 = v520;
          }
          else {
            unint64_t v466 = 0;
          }
          if ((v407 - 3) < 0xFFFFFFFE)
          {
            if (v407 == 3) {
              *((void *)v520 + 1) = 0;
            }
            goto LABEL_867;
          }
          unint64_t v467 = (unint64_t)(v466 + 8);
        }
        else
        {
          if ((v520[1] & 0x7F) != 2 && !*((_DWORD *)v520 + 3)) {
            goto LABEL_867;
          }
          uint64_t v494 = *((void *)v520 + 2);
          if ((v494 & 4) == 0) {
            goto LABEL_867;
          }
          unint64_t v467 = v494 & 0xFFFFFFFFFFFFFFF8;
          if (!v467) {
            goto LABEL_867;
          }
        }
        uint64_t v541 = &v520;
        sub_1CC5FA668(v467 + 16, &v541);
LABEL_867:
        char v265 = 0;
        int v408 = v540;
        a7[2] = (void *)v539;
        *((_DWORD *)a7 + 6) = v408;
        a7[4] = v404;
        *((_DWORD *)a7 + 10) = v406;
        goto LABEL_805;
      }
LABEL_804:
      char v265 = 1;
      goto LABEL_805;
    case 151:
      uint64_t v88 = *(uint64_t **)(v539 + 32);
      uint64_t v89 = *v88;
      uint64_t v90 = v88[1];
      uint64_t v91 = *(void *)(*v88 + 40) + 16 * v90;
      unsigned int v92 = *(void **)v91;
      if (*(void *)v91)
      {
        if (*(void *)v91 - 120 < 0x33) {
          goto LABEL_202;
        }
      }
      else if (*(unsigned char *)(*(void *)(v91 + 8) + 8) == 19)
      {
        goto LABEL_202;
      }
      uint64_t v126 = *(void *)(v88[5] + 80);
      uint64_t v127 = (void *)(v126 + 24);
      if (*(_DWORD *)(v126 + 32) >= 0x41u) {
        uint64_t v127 = (void *)*v127;
      }
      unsigned int v510 = *(_DWORD *)v127;
      uint64_t v128 = *(void **)(v91 + 8);
      v545[0] = v92;
      v545[1] = v128;
      unsigned int v129 = sub_1CD3DB440((llvm::EVT *)v545, (const char *)v38);
      if (v535 < v129)
      {
        unsigned int v130 = v129;
        if (v129 > 0x40) {
          operator new[]();
        }
        unint64_t __dsta = (unint64_t)__b & (0xFFFFFFFFFFFFFFFFLL >> -(char)v129);
      }
      else
      {
        if (v535 > 0x40) {
          operator new[]();
        }
        unint64_t __dsta = (unint64_t)__b;
        unsigned int v130 = v535;
      }
      LODWORD(v545[1]) = v130;
      unint64_t v131 = __dsta << v510;
      if (v130 == v510) {
        unint64_t v131 = 0;
      }
      if (v130) {
        unint64_t v132 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v130;
      }
      else {
        unint64_t v132 = 0;
      }
      v545[0] = (void *)(v132 & v131);
      if (v130 >= 0x41 && __dsta) {
        MEMORY[0x1D25D9CB0](__dsta, 0x1000C8000313F17);
      }
      DWORD2(v542) = 1;
      *(void *)&long long v542 = 0;
      LODWORD(__src[1]) = 1;
      __src[0] = 0;
      char v133 = 0;
      if (sub_1CD007B58(a1)) {
        goto LABEL_728;
      }
      llvm::APInt::extractBits((uint64_t)&v542, v15, v510, (uint64_t)&v528);
      if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
        MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
      }
      *a5 = v528;
      *((_DWORD *)a5 + 2) = v529;
      llvm::APInt::extractBits((uint64_t)__src, v15, v510, (uint64_t)&v528);
      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
        MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
      }
      *a6 = v528;
      *((_DWORD *)a6 + 2) = v529;
      unsigned int v134 = v535;
      if (!v535) {
        goto LABEL_727;
      }
      if (v535 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__b) == v134) {
          goto LABEL_727;
        }
      }
      else if (__b == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v535))
      {
        goto LABEL_727;
      }
      int v409 = sub_1CD80E5C8(a1, v89, v90, (unsigned int *)v545, (uint64_t)*a7, v538 + 1);
      if (v409)
      {
        uint64_t v412 = (uint64_t)v409;
        uint64_t v413 = v410;
        uint64_t v414 = (uint64_t)*a7;
        uint64_t v415 = v539;
        uint64_t v416 = *(unsigned __int16 *)(v539 + 24);
        uint64_t v417 = *(void **)(v539 + 64);
        int v528 = v417;
        uint64_t v418 = v539;
        if (v417)
        {
          llvm::MetadataTracking::track((uint64_t)&v528, (unsigned __int8 *)v417, 2);
          uint64_t v418 = v539;
        }
        unsigned int v529 = *(_DWORD *)(v415 + 60);
        uint64_t v419 = *(void *)(v418 + 32);
        uint64_t v420 = *(void *)(v419 + 40);
        uint64_t v421 = *(void *)(v419 + 48);
        uint64_t v422 = *(void *)(v414 + 832);
        if (v422) {
          LOWORD(v422) = *(_WORD *)(v422 + 8);
        }
        uint64_t v423 = sub_1CCFDED5C(v414, v416, (const llvm::APInt *)&v528, (llvm *)v537, *((uint64_t *)&v537 + 1), v412, v413, v411, v420, v421, v422);
        int v425 = v424;
        if (!v528) {
          goto LABEL_877;
        }
        int v426 = *(unsigned __int8 *)v528;
        if ((v426 - 4) > 0x1E)
        {
          if ((v426 - 3) >= 0xFFFFFFFE) {
            unsigned int v464 = v528;
          }
          else {
            unsigned int v464 = 0;
          }
          if ((v426 - 3) < 0xFFFFFFFE)
          {
            if (v426 == 3) {
              *((void *)v528 + 1) = 0;
            }
            goto LABEL_877;
          }
          unint64_t v465 = (unint64_t)v464 + 8;
        }
        else
        {
          if ((*((unsigned char *)v528 + 1) & 0x7F) != 2 && !*((_DWORD *)v528 + 3)) {
            goto LABEL_877;
          }
          uint64_t v493 = *((void *)v528 + 2);
          if ((v493 & 4) == 0) {
            goto LABEL_877;
          }
          unint64_t v465 = v493 & 0xFFFFFFFFFFFFFFF8;
          if (!v465) {
            goto LABEL_877;
          }
        }
        v527[0] = &v528;
        sub_1CC5FA668(v465 + 16, v527);
LABEL_877:
        char v133 = 0;
        int v427 = v540;
        a7[2] = (void *)v539;
        *((_DWORD *)a7 + 6) = v427;
        a7[4] = v423;
        *((_DWORD *)a7 + 10) = v425;
LABEL_728:
        if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
          MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
        }
        if (DWORD2(v542) >= 0x41 && (void)v542) {
          MEMORY[0x1D25D9CB0](v542, 0x1000C8000313F17);
        }
        if (LODWORD(v545[1]) >= 0x41 && v545[0]) {
          MEMORY[0x1D25D9CB0](v545[0], 0x1000C8000313F17);
        }
        if (v133) {
          goto LABEL_202;
        }
        goto LABEL_511;
      }
LABEL_727:
      char v133 = 1;
      goto LABEL_728;
    case 153:
      *(_OWORD *)unsigned int v545 = *(_OWORD *)*(void *)(v539 + 40);
      uint64_t v236 = *(_DWORD **)(v539 + 80);
      unsigned int v237 = sub_1CD3DB440((llvm::EVT *)v545, (const char *)v38);
      DWORD2(v542) = v14;
      *(void *)&long long v542 = 0;
      LODWORD(__src[1]) = v14;
      __src[0] = 0;
      if (v14)
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          int v239 = v236[i];
          if ((v239 & 0x80000000) == 0)
          {
            uint64_t v240 = (void **)((char *)__b + 8 * (i >> 6));
            if (v535 < 0x41) {
              uint64_t v240 = &__b;
            }
            if (((unint64_t)*v240 >> i))
            {
              if (v239 >= (int)v14) {
                __src[0] = (void *)((unint64_t)__src[0] | (1 << (v239 - v14)));
              }
              else {
                *(void *)&long long v542 = v542 | (1 << v239);
              }
            }
          }
        }
        char v241 = 0;
      }
      else
      {
        char v241 = 1;
      }
      int v47 = 1;
      unsigned int v529 = 1;
      int v528 = 0;
      LODWORD(v527[1]) = 1;
      v527[0] = 0;
      unsigned int v526 = 1;
      uint64_t v525 = 0;
      LODWORD(v524) = 1;
      uint64_t v523 = 0;
      if (sub_1CD007B58(a1) & 1) != 0 || (sub_1CD007B58(a1)) {
        goto LABEL_607;
      }
      v545[0] = &v546;
      v545[1] = (void *)0x2000000000;
      if (v237 >= 0x21) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v267 = 0;
      if (v237)
      {
        memcpy(&v546, v236, 4 * v237);
        int v267 = (int)v545[1];
      }
      LODWORD(v545[1]) = v267 + v237;
      if (v241) {
        goto LABEL_604;
      }
      uint64_t v268 = 0;
      char v269 = 0;
      char v270 = 1;
      unsigned int v271 = v545[0];
      char v272 = 1;
      do
      {
        unint64_t v273 = v271[v268];
        if ((v273 & 0x80000000) != 0) {
          goto LABEL_571;
        }
        if (v535 >= 0x41) {
          unint64_t v274 = (void **)((char *)__b + 8 * (v268 >> 6));
        }
        else {
          unint64_t v274 = &__b;
        }
        if (((unint64_t)*v274 >> v268))
        {
          unsigned int v275 = v273 - v14;
          if ((int)v273 >= (int)v14)
          {
            if (v526 >= 0x41) {
              unsigned int v277 = (void **)((char *)v525 + 8 * (v275 >> 6));
            }
            else {
              unsigned int v277 = &v525;
            }
            if ((((unint64_t)*v277 >> v275) & 1) == 0) {
              goto LABEL_564;
            }
          }
          else
          {
            if (v529 >= 0x41) {
              uint64_t v276 = (void **)((char *)v528 + ((v273 >> 3) & 0x1FFFFFF8));
            }
            else {
              uint64_t v276 = &v528;
            }
            if ((((unint64_t)*v276 >> v273) & 1) == 0) {
              goto LABEL_564;
            }
          }
        }
        LODWORD(v273) = -1;
        v271[v268] = -1;
        char v269 = 1;
LABEL_564:
        BOOL v278 = v268 == v273 || (v273 & 0x80000000) != 0;
        v270 &= v278;
        BOOL v279 = v268 == v273 - v14 || (v273 & 0x80000000) != 0;
        v272 &= v279;
LABEL_571:
        ++v268;
      }
      while (v14 != v268);
      if (v270 & 1 | ((v269 & 1) == 0) | v272 & 1
        || *((unsigned char *)a7 + 9)
        || (uint64_t v454 = sub_1CD80E678((uint64_t)a1, (llvm *)v537, *((uint64_t *)&v537 + 1), (uint64_t)&v532, **(void **)(v539 + 32), *(void *)(*(void *)(v539 + 32) + 8), *(void *)(*(void *)(v539 + 32) + 40), *(void *)(*(void *)(v539 + 32) + 48), v271, LODWORD(v545[1]), (uint64_t)*a7)) == 0)
      {
        uint64_t v280 = 0;
        unsigned int v281 = v526;
        unsigned int v282 = v524;
        unsigned int v283 = v529;
        unsigned int v284 = v527[1];
        while (1)
        {
          unint64_t v285 = v236[v280];
          if ((v285 & 0x80000000) != 0)
          {
            long long v291 = (char *)a5;
            if (*((_DWORD *)a5 + 2) >= 0x41u)
            {
              long long v292 = (char *)*a5;
LABEL_601:
              long long v291 = &v292[8 * (v280 >> 6)];
            }
          }
          else
          {
            if ((int)v285 >= (int)v14)
            {
              unsigned int v293 = v285 - v14;
              uint64_t v294 = v293 >> 6;
              int v295 = (void **)((char *)v525 + 8 * v294);
              if (v281 < 0x41) {
                int v295 = &v525;
              }
              uint64_t v288 = 1 << v293;
              if (((unint64_t)*v295 & v288) != 0)
              {
                if (*((_DWORD *)a5 + 2) >= 0x41u) {
                  int v296 = (void *)(*a5 + 8 * (v280 >> 6));
                }
                else {
                  int v296 = a5;
                }
                *v296 |= 1 << v280;
              }
              unsigned int v290 = (void **)(v523 + 8 * v294);
              if (v282 < 0x41) {
                unsigned int v290 = (void **)&v523;
              }
            }
            else
            {
              unint64_t v286 = v285 >> 6;
              uint64_t v287 = (void **)((char *)v528 + 8 * (v285 >> 6));
              if (v283 < 0x41) {
                uint64_t v287 = &v528;
              }
              uint64_t v288 = 1 << v285;
              if (((unint64_t)*v287 & v288) != 0)
              {
                if (*((_DWORD *)a5 + 2) >= 0x41u) {
                  unint64_t v289 = (void *)(*a5 + 8 * (v280 >> 6));
                }
                else {
                  unint64_t v289 = a5;
                }
                *v289 |= 1 << v280;
              }
              unsigned int v290 = (void **)((char *)v527[0] + 8 * v286);
              if (v284 < 0x41) {
                unsigned int v290 = v527;
              }
            }
            if (((unint64_t)*v290 & v288) == 0) {
              goto LABEL_603;
            }
            long long v291 = (char *)a6;
            if (*((_DWORD *)a6 + 2) >= 0x41u)
            {
              long long v292 = (char *)*a6;
              goto LABEL_601;
            }
          }
          *(void *)v291 |= 1 << v280;
LABEL_603:
          if (v14 == ++v280)
          {
LABEL_604:
            int v47 = 2;
            goto LABEL_605;
          }
        }
      }
      int v456 = v540;
      a7[2] = (void *)v539;
      *((_DWORD *)a7 + 6) = v456;
      a7[4] = v454;
      *((_DWORD *)a7 + 10) = v455;
      int v47 = 1;
LABEL_605:
      if (v545[0] != &v546) {
        free(v545[0]);
      }
LABEL_607:
      if (v524 >= 0x41 && v523) {
        MEMORY[0x1D25D9CB0](v523, 0x1000C8000313F17);
      }
      if (v526 >= 0x41 && v525) {
        MEMORY[0x1D25D9CB0](v525, 0x1000C8000313F17);
      }
      if (LODWORD(v527[1]) >= 0x41 && v527[0]) {
        MEMORY[0x1D25D9CB0](v527[0], 0x1000C8000313F17);
      }
      if (v529 >= 0x41 && v528) {
        MEMORY[0x1D25D9CB0](v528, 0x1000C8000313F17);
      }
      if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
        MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
      }
      if (DWORD2(v542) >= 0x41)
      {
        uint64_t v119 = (void *)v542;
        if ((void)v542) {
LABEL_200:
        }
          MEMORY[0x1D25D9CB0](v119, 0x1000C8000313F17);
      }
LABEL_201:
      if (v47 != 2) {
        goto LABEL_511;
      }
LABEL_202:
      if (v535 <= 0x40)
      {
        if (((unint64_t)__b & ~*a5) != 0) {
          goto LABEL_204;
        }
LABEL_510:
        uint64_t v256 = (void *)v539;
        int v257 = v540;
        uint64_t v258 = sub_1CD3DD4D8((uint64_t)*a7, (llvm *)v537, *((uint64_t *)&v537 + 1));
        a7[2] = v256;
        *((_DWORD *)a7 + 6) = v257;
        a7[4] = v258;
        *((_DWORD *)a7 + 10) = v259;
        goto LABEL_511;
      }
      unint64_t v120 = ((unint64_t)v535 + 63) >> 6;
      char v121 = (uint64_t *)__b;
      uint64_t v122 = (uint64_t *)*a5;
      while (1)
      {
        uint64_t v124 = *v121++;
        uint64_t v123 = v124;
        uint64_t v125 = *v122++;
        if ((v123 & ~v125) != 0) {
          break;
        }
        if (!--v120) {
          goto LABEL_510;
        }
      }
LABEL_204:
      uint64_t v21 = 0;
LABEL_512:
      if (v532)
      {
        int v260 = *v532;
        if ((v260 - 4) > 0x1E)
        {
          if ((v260 - 3) >= 0xFFFFFFFE) {
            int v263 = v532;
          }
          else {
            int v263 = 0;
          }
          if ((v260 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v262 = (unint64_t)(v263 + 8);
            goto LABEL_524;
          }
          if (v260 == 3) {
            *((void *)v532 + 1) = 0;
          }
        }
        else if ((v532[1] & 0x7F) == 2 || *((_DWORD *)v532 + 3))
        {
          uint64_t v261 = *((void *)v532 + 2);
          if ((v261 & 4) != 0)
          {
            unint64_t v262 = v261 & 0xFFFFFFFFFFFFFFF8;
            if (v262)
            {
LABEL_524:
              v545[0] = &v532;
              sub_1CC5FA668(v262 + 16, v545);
            }
          }
        }
      }
LABEL_42:
      if (v535 >= 0x41 && __b) {
        MEMORY[0x1D25D9CB0](__b, 0x1000C8000313F17);
      }
      return v21;
    case 155:
      unsigned int v93 = &__b;
      if (v535 >= 0x41) {
        unsigned int v93 = __b;
      }
      if (*v93)
      {
        uint64_t v94 = **(void **)(v539 + 32);
        if (*(_WORD *)(v94 + 24) != 148) {
          goto LABEL_133;
        }
        int v95 = *(void **)(v94 + 32);
        uint64_t v96 = v95[5];
        *(_OWORD *)unsigned int v545 = *(_OWORD *)(*(void *)(*v95 + 40) + 16 * v95[1]);
        unint64_t v97 = sub_1CC4A0738((llvm::EVT *)v545);
        uint64_t v21 = (v97 & 0xFFFFFFFF00000000) != 0x100000000;
        if ((v97 & 0xFFFFFFFF00000000) != 0x100000000)
        {
          unsigned int v98 = v97;
          if (!sub_1CD7F2D2C(v96)) {
            goto LABEL_133;
          }
          DWORD2(v542) = v98;
          if (v98 >= 0x41) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v542);
          }
          *(void *)&long long v542 = 1;
          llvm::APInt::zextOrTrunc(a5, v98, (uint64_t)__src);
          llvm::APInt::zextOrTrunc(a6, v98, (uint64_t)&v528);
          char v99 = sub_1CD007B58(a1);
          if (v529 >= 0x41 && v528) {
            MEMORY[0x1D25D9CB0](v528, 0x1000C8000313F17);
          }
          if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
            MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
          }
          if ((v99 & 1) == 0)
          {
LABEL_133:
            if (v14 != 1)
            {
              unsigned int v100 = *((_DWORD *)a5 + 2);
              unsigned int v101 = v100 - (v14 - 1);
              if (v100 > 0x40 || v101 > 0x3F) {
                llvm::APInt::setBitsSlowCase(a5, v101, v100);
              }
              else {
                *a5 |= 0xFFFFFFFFFFFFFFFFLL >> (65 - v14) << v101;
              }
            }
            goto LABEL_202;
          }
        }
        goto LABEL_512;
      }
      uint64_t v254 = *((unsigned int *)a5 + 2);
      if (v254 > 0x40)
      {
        memset((void *)*a5, 255, ((unint64_t)(v254 + 63) >> 3) & 0x3FFFFFF8);
        LODWORD(v254) = *((_DWORD *)a5 + 2);
        if (v254)
        {
LABEL_507:
          unint64_t v255 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v254;
          if (v254 >= 0x41) {
            a5 = (void *)(*a5 + 8 * ((((unint64_t)v254 + 63) >> 6) - 1));
          }
          goto LABEL_509;
        }
      }
      else
      {
        *a5 = -1;
        if (v254) {
          goto LABEL_507;
        }
      }
      unint64_t v255 = 0;
LABEL_509:
      *a5 &= v255;
      goto LABEL_510;
    case 171:
      goto LABEL_90;
    case 172:
    case 173:
      goto LABEL_63;
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
      uint64_t v42 = *(uint64_t **)(v539 + 32);
      uint64_t v43 = *v42;
      uint64_t v44 = v42[1];
      uint64_t v45 = v42[5];
      uint64_t v46 = v42[6];
      int v47 = 1;
      LODWORD(v545[1]) = 1;
      v545[0] = 0;
      DWORD2(v542) = 1;
      *(void *)&long long v542 = 0;
      if (sub_1CD007B58(a1)) {
        goto LABEL_195;
      }
      LODWORD(__src[1]) = 1;
      __src[0] = 0;
      unsigned int v529 = 1;
      int v528 = 0;
      if (sub_1CD007B58(a1)) {
        goto LABEL_189;
      }
      unsigned int v48 = v529;
      if (*((_DWORD *)a6 + 2) > 0x40u)
      {
        if (&v528 != a6)
        {
          llvm::APInt::reallocate((uint64_t)a6, v529);
          uint64_t v316 = *((unsigned int *)a6 + 2);
          if (v316 <= 0x40) {
            *a6 = v528;
          }
          else {
            memcpy((void *)*a6, v528, ((unint64_t)(v316 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
      }
      else
      {
        *a6 = v528;
        *((_DWORD *)a6 + 2) = v48;
      }
      int v110 = (int)__src[1];
      if (LODWORD(__src[1]) > 0x40) {
        operator new[]();
      }
      uint64_t v111 = (uint64_t)v545[0] & (uint64_t)__src[0];
      if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
        MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
      }
      *a5 = v111;
      *((_DWORD *)a5 + 2) = v110;
      unsigned int v112 = v535;
      if (!v535) {
        goto LABEL_188;
      }
      if (v535 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__b) == v112) {
          goto LABEL_188;
        }
      }
      else if (__b == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v535))
      {
        goto LABEL_188;
      }
      if (sub_1CD00C374((uint64_t)v531, v43, v44, v45, v46))
      {
        int v47 = 1;
        goto LABEL_189;
      }
LABEL_188:
      int v47 = 2;
LABEL_189:
      if (v529 >= 0x41 && v528) {
        MEMORY[0x1D25D9CB0](v528, 0x1000C8000313F17);
      }
      if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
        MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
      }
LABEL_195:
      if (DWORD2(v542) >= 0x41 && (void)v542) {
        MEMORY[0x1D25D9CB0](v542, 0x1000C8000313F17);
      }
      if (LODWORD(v545[1]) >= 0x41)
      {
        uint64_t v119 = v545[0];
        if (v545[0]) {
          goto LABEL_200;
        }
      }
      goto LABEL_201;
    default:
      char v62 = v536 + 58;
      if ((v536 - 198) > 0x12) {
        goto LABEL_168;
      }
      if (((1 << v62) & 0xB) != 0)
      {
        if (sub_1CD007B58(a1)) {
          goto LABEL_511;
        }
        uint64_t v63 = v539;
        if (*(_WORD *)(v539 + 24) != 199) {
          goto LABEL_202;
        }
        if (v535 > 0x40)
        {
          uint64_t v135 = 0;
          unint64_t v64 = (char *)*a5;
          while ((*(void *)((unsigned char *)__b + v135) & ~*(void *)&v64[v135]) == 0)
          {
            v135 += 8;
            if (((((unint64_t)v535 + 63) >> 3) & 0x3FFFFFF8) == v135) {
              goto LABEL_236;
            }
          }
        }
        else
        {
          unint64_t v64 = (char *)*a5;
          if (((unint64_t)__b & ~*a5) == 0)
          {
LABEL_236:
            int v136 = v540;
            uint64_t v137 = (uint64_t)*a7;
            uint64_t v138 = *(void **)(v539 + 64);
            v545[0] = v138;
            if (v138) {
              llvm::MetadataTracking::track((uint64_t)v545, (unsigned __int8 *)v138, 2);
            }
            LODWORD(v545[1]) = *(_DWORD *)(v63 + 60);
            char v139 = sub_1CD7EBF14(v137, 0, (const llvm::APInt *)v545, (llvm *)v537, *((uint64_t *)&v537 + 1), 0, 0);
            a7[2] = (void *)v63;
            *((_DWORD *)a7 + 6) = v136;
            a7[4] = v139;
            *((_DWORD *)a7 + 10) = v140;
            if (v545[0])
            {
              int v141 = *(unsigned __int8 *)v545[0];
              if ((v141 - 4) > 0x1E)
              {
                if ((v141 - 3) >= 0xFFFFFFFE) {
                  uint64_t v369 = v545[0];
                }
                else {
                  uint64_t v369 = 0;
                }
                if ((v141 - 3) < 0xFFFFFFFE)
                {
                  if (v141 == 3) {
                    *((void *)v545[0] + 1) = 0;
                  }
                  goto LABEL_511;
                }
                unint64_t v143 = (unint64_t)v369 + 8;
              }
              else
              {
                if ((*((unsigned char *)v545[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v545[0] + 3)) {
                  goto LABEL_511;
                }
                uint64_t v142 = *((void *)v545[0] + 2);
                if ((v142 & 4) == 0) {
                  goto LABEL_511;
                }
                unint64_t v143 = v142 & 0xFFFFFFFFFFFFFFF8;
                if (!v143) {
                  goto LABEL_511;
                }
              }
              *(void *)&long long v542 = v545;
              sub_1CC5FA668(v143 + 16, &v542);
            }
LABEL_511:
            uint64_t v21 = 1;
            goto LABEL_512;
          }
        }
        uint64_t v65 = *((unsigned int *)a5 + 2);
        if (v65 > 0x40) {
          bzero(v64, ((unint64_t)(v65 + 63) >> 3) & 0x3FFFFFF8);
        }
        else {
          *a5 = 0;
        }
        goto LABEL_202;
      }
      if (v536 == 216)
      {
        int v72 = *(void **)(v539 + 32);
        uint64_t v73 = *v72;
        uint64_t v74 = v72[1];
        int v75 = (uint64_t *)(*(void *)(*v72 + 40) + 16 * v74);
        uint64_t v77 = *v75;
        uint64_t v76 = v75[1];
        *(void *)&long long v542 = v77;
        *((void *)&v542 + 1) = v76;
        if ((_BYTE)v77)
        {
          if (v77 - 15 >= 0x9C) {
            goto LABEL_202;
          }
        }
        else if ((*(_DWORD *)(v76 + 8) & 0xFE) != 0x12)
        {
          goto LABEL_202;
        }
        int v144 = v41;
        uint64_t v499 = v74;
        uint64_t v501 = v73;
        unsigned int v504 = sub_1CD3DB440((llvm::EVT *)&v542, (const char *)v38);
        if (v504 == v14)
        {
          uint64_t v21 = sub_1CD007B58(a1);
          goto LABEL_512;
        }
        LODWORD(__src[1]) = 1;
        __src[0] = 0;
        unsigned int v529 = 1;
        int v528 = 0;
        unsigned int v512 = 1;
        LODWORD(v527[1]) = 1;
        v527[0] = 0;
        unsigned int __na = v14 / v504;
        if (v14 % v504)
        {
          BOOL v509 = 0;
LABEL_538:
          unsigned int __dstc = v504 / v14;
          if (v504 % v14)
          {
LABEL_539:
            char v266 = 1;
LABEL_744:
            if (LODWORD(v527[1]) >= 0x41 && v527[0]) {
              MEMORY[0x1D25D9CB0](v527[0], 0x1000C8000313F17);
            }
            if (v529 >= 0x41 && v528) {
              MEMORY[0x1D25D9CB0](v528, 0x1000C8000313F17);
            }
            if (v512 >= 0x41 && v509) {
              MEMORY[0x1D25D9CB0](v509, 0x1000C8000313F17);
            }
            if (v266) {
              goto LABEL_202;
            }
            goto LABEL_511;
          }
          llvm::APIntOps::ScaleBitMask((llvm::APIntOps *)&__b, (const llvm::APInt *)v504, (uint64_t)v545);
          if (v512 >= 0x41 && v509) {
            MEMORY[0x1D25D9CB0](v509, 0x1000C8000313F17);
          }
          BOOL v509 = (char *)v545[0];
          __src[0] = v545[0];
          unsigned int v512 = v545[1];
          LODWORD(__src[1]) = v545[1];
          if (sub_1CD007B58(a1))
          {
LABEL_743:
            char v266 = 0;
            goto LABEL_744;
          }
          unsigned int v371 = 0;
          while (1)
          {
            uint64_t v372 = v371 >> 6;
            unint64_t v373 = &__b;
            if (v535 >= 0x41) {
              unint64_t v373 = (void **)((char *)__b + 8 * v372);
            }
            uint64_t v374 = 1 << v371;
            if (((unint64_t)*v373 & (1 << v371)) == 0) {
              goto LABEL_845;
            }
            llvm::APInt::extractBits((uint64_t)&v528, __dstc, v371 * __dstc, (uint64_t)v545);
            int v375 = (int)v545[1];
            if (!LODWORD(v545[1])) {
              goto LABEL_830;
            }
            if (LODWORD(v545[1]) <= 0x40) {
              break;
            }
            int v376 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v545);
            if (v545[0]) {
              MEMORY[0x1D25D9CB0](v545[0], 0x1000C8000313F17);
            }
            if (v376 == v375) {
              goto LABEL_830;
            }
LABEL_834:
            llvm::APInt::extractBits((uint64_t)v527, __dstc, v371 * __dstc, (uint64_t)v545);
            int v378 = (int)v545[1];
            if (!LODWORD(v545[1])) {
              goto LABEL_841;
            }
            if (LODWORD(v545[1]) > 0x40)
            {
              int v379 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v545);
              if (v545[0]) {
                MEMORY[0x1D25D9CB0](v545[0], 0x1000C8000313F17);
              }
              if (v379 != v378) {
                goto LABEL_845;
              }
LABEL_841:
              if (*((_DWORD *)a5 + 2) >= 0x41u) {
                char v380 = (void *)(*a5 + 8 * v372);
              }
              else {
                char v380 = a5;
              }
              *v380 |= v374;
              goto LABEL_845;
            }
            if (v545[0] == (void *)(0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v545[1]))) {
              goto LABEL_841;
            }
LABEL_845:
            if (v14 == ++v371) {
              goto LABEL_539;
            }
          }
          if (v545[0] != (void *)(0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v545[1]))) {
            goto LABEL_834;
          }
LABEL_830:
          if (*((_DWORD *)a6 + 2) >= 0x41u) {
            uint64_t v377 = (void *)(*a6 + 8 * v372);
          }
          else {
            uint64_t v377 = a6;
          }
          *v377 |= v374;
          goto LABEL_834;
        }
        llvm::APIntOps::ScaleBitMask((llvm::APIntOps *)&__b, (const llvm::APInt *)v504, (uint64_t)v545);
        BOOL v509 = (char *)v545[0];
        __src[0] = v545[0];
        unsigned int v512 = v545[1];
        LODWORD(__src[1]) = v545[1];
        if (sub_1CD007B58(a1)) {
          goto LABEL_743;
        }
        if (v144)
        {
LABEL_694:
          for (uint64_t j = 0; j != v504; ++j)
          {
            uint64_t v328 = j >> 6;
            uint64_t v329 = (void **)&v509[8 * v328];
            if (v512 < 0x41) {
              uint64_t v329 = __src;
            }
            uint64_t v330 = 1 << j;
            if (((unint64_t)*v329 & (1 << j)) != 0)
            {
              unint64_t v331 = &v528;
              if (v529 >= 0x41) {
                unint64_t v331 = (void **)((char *)v528 + 8 * v328);
              }
              unsigned int v332 = __na * j;
              unsigned int __dste = __na + __na * j;
              if (((unint64_t)*v331 & v330) != 0 && v332 != __na + __na * j)
              {
                if (v332 > 0x3F || __dste > 0x40)
                {
                  llvm::APInt::setBitsSlowCase(a6, __na * j, __dste);
                }
                else
                {
                  unint64_t v334 = 0xFFFFFFFFFFFFFFFFLL >> (v332 - __dste) << v332;
                  if (*((_DWORD *)a6 + 2) > 0x40u) {
                    *(void *)*a6 |= v334;
                  }
                  else {
                    *a6 |= v334;
                  }
                }
              }
              int v335 = v527;
              if (LODWORD(v527[1]) >= 0x41) {
                int v335 = (void **)((char *)v527[0] + 8 * v328);
              }
              if (((unint64_t)*v335 & v330) != 0 && v332 != __dste)
              {
                if (v332 > 0x3F || __dste > 0x40)
                {
                  llvm::APInt::setBitsSlowCase(a5, v332, __dste);
                }
                else
                {
                  unint64_t v337 = 0xFFFFFFFFFFFFFFFFLL >> (v332 - __dste) << v332;
                  if (*((_DWORD *)a5 + 2) > 0x40u) {
                    *(void *)*a5 |= v337;
                  }
                  else {
                    *a5 |= v337;
                  }
                }
              }
            }
          }
          goto LABEL_538;
        }
        unsigned int v526 = sub_1CD3E12F4((unsigned __int8 *)&v542, v325, v326);
        if (v526 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v525);
        }
        uint64_t v525 = 0;
        if (v14)
        {
          unsigned int v460 = 0;
          do
          {
            if (v535 >= 0x41) {
              int v461 = (void **)((char *)__b + 8 * (v460 >> 6));
            }
            else {
              int v461 = &__b;
            }
            if ((((unint64_t)*v461 >> v460) & 1) != 0 && v40)
            {
              unsigned int v462 = v460 % __na * v40;
              unsigned int v463 = v462 + v40;
              if (v462 > 0x3F || v463 > 0x40) {
                llvm::APInt::setBitsSlowCase(&v525, v462, v463);
              }
              else {
                uint64_t v525 = (void *)((unint64_t)v525 | (0xFFFFFFFFFFFFFFFFLL >> -(char)v40 << v462));
              }
            }
            ++v460;
          }
          while (v14 != v460);
        }
        LODWORD(v545[1]) = 1;
        v545[0] = 0;
        unsigned int v547 = 1;
        uint64_t v546 = 0;
        if (sub_1CCFFA248(a1, v501, v499, &v525, __src, v545, a7, v538 + 1, 0))
        {
          if (v547 >= 0x41 && v546) {
            MEMORY[0x1D25D9CB0](v546, 0x1000C8000313F17);
          }
          if (LODWORD(v545[1]) >= 0x41 && v545[0]) {
            MEMORY[0x1D25D9CB0](v545[0], 0x1000C8000313F17);
          }
          if (v526 >= 0x41 && v525) {
            MEMORY[0x1D25D9CB0](v525, 0x1000C8000313F17);
          }
          goto LABEL_743;
        }
        if (v504 > v14)
        {
LABEL_985:
          if (v547 >= 0x41 && v546) {
            MEMORY[0x1D25D9CB0](v546, 0x1000C8000313F17);
          }
          if (LODWORD(v545[1]) >= 0x41 && v545[0]) {
            MEMORY[0x1D25D9CB0](v545[0], 0x1000C8000313F17);
          }
          if (v526 >= 0x41 && v525) {
            MEMORY[0x1D25D9CB0](v525, 0x1000C8000313F17);
          }
          goto LABEL_694;
        }
        int v481 = 0;
        while (1)
        {
          llvm::APInt::extractBits((uint64_t)v545, v40, v481 * v40, (uint64_t)&v523);
          int v482 = v524;
          if (!v524) {
            goto LABEL_976;
          }
          if (v524 > 0x40) {
            break;
          }
          if (v523 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v524) {
            goto LABEL_976;
          }
LABEL_984:
          if (++v481 == __na) {
            goto LABEL_985;
          }
        }
        int __dstf = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v523);
        if (v523) {
          MEMORY[0x1D25D9CB0](v523, 0x1000C8000313F17);
        }
        if (__dstf != v482) {
          goto LABEL_984;
        }
LABEL_976:
        int v483 = 0;
        unsigned int v484 = v535;
        unsigned int v485 = *((_DWORD *)a6 + 2);
        unsigned int v486 = v504;
        do
        {
          unsigned int v487 = v481 + v483 * __na;
          uint64_t v488 = v487 >> 6;
          unint64_t v489 = (void **)((char *)__b + 8 * v488);
          if (v484 < 0x41) {
            unint64_t v489 = &__b;
          }
          uint64_t v490 = 1 << v487;
          if ((v490 & (unint64_t)*v489) != 0)
          {
            uint64_t v491 = (void *)(*a6 + 8 * v488);
            if (v485 < 0x41) {
              uint64_t v491 = a6;
            }
            *v491 |= v490;
          }
          ++v483;
          --v486;
        }
        while (v486);
        goto LABEL_984;
      }
      if (((1 << v62) & 0x380) == 0)
      {
LABEL_168:
        if (v536 != 191) {
          goto LABEL_172;
        }
        int v114 = 1;
        LODWORD(v545[1]) = 1;
        v545[0] = 0;
        DWORD2(v542) = 1;
        *(void *)&long long v542 = 0;
        if ((sub_1CD007B58(a1) & 1) == 0)
        {
          unsigned int v115 = v535;
          LODWORD(__src[1]) = v535;
          if (v535 > 0x40) {
            operator new[]();
          }
          __src[0] = __b;
          unsigned int v529 = v535;
          uint64_t v116 = __b;
          int v528 = __b;
          int v114 = 1;
          LODWORD(v527[1]) = 1;
          v527[0] = 0;
          unsigned int v526 = 1;
          uint64_t v525 = 0;
          LODWORD(v524) = 1;
          uint64_t v523 = 0;
          DWORD2(v522) = 1;
          *(void *)&long long v522 = 0;
          char v232 = sub_1CD007B58(a1);
          if ((v232 & 1) == 0 && (sub_1CD007B58(a1) & 1) == 0)
          {
            int v233 = (int)v527[1];
            if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
              MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
            }
            *a5 = v523 & (uint64_t)v527[0];
            *((_DWORD *)a5 + 2) = v233;
            unsigned int v253 = v526;
            if (v526 > 0x40) {
              operator new[]();
            }
            if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
              MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
            }
            *a6 = v522 & (unint64_t)v525;
            *((_DWORD *)a6 + 2) = v253;
            int v114 = 2;
          }
          if (DWORD2(v522) >= 0x41 && (void)v522) {
            MEMORY[0x1D25D9CB0](v522, 0x1000C8000313F17);
          }
          if (v524 >= 0x41 && v523) {
            MEMORY[0x1D25D9CB0](v523, 0x1000C8000313F17);
          }
          if (v526 >= 0x41 && v525) {
            MEMORY[0x1D25D9CB0](v525, 0x1000C8000313F17);
          }
          if (LODWORD(v527[1]) >= 0x41 && v527[0]) {
            MEMORY[0x1D25D9CB0](v527[0], 0x1000C8000313F17);
          }
          if (v115 >= 0x41 && v116) {
            MEMORY[0x1D25D9CB0](v116, 0x1000C8000313F17);
          }
        }
        if (DWORD2(v542) >= 0x41 && (void)v542) {
          MEMORY[0x1D25D9CB0](v542, 0x1000C8000313F17);
        }
        if (LODWORD(v545[1]) >= 0x41 && v545[0]) {
          MEMORY[0x1D25D9CB0](v545[0], 0x1000C8000313F17);
        }
        if (v114 == 2) {
          goto LABEL_202;
        }
        goto LABEL_511;
      }
      int v173 = v41;
      LODWORD(__src[1]) = 1;
      __src[0] = 0;
      unsigned int v529 = 1;
      int v528 = 0;
      *(_OWORD *)uint64_t v527 = *(_OWORD *)*(void *)(v539 + 32);
      *(_OWORD *)unsigned int v545 = *(_OWORD *)(*((void *)v527[0] + 5) + 16 * LODWORD(v527[1]));
      unsigned int v174 = sub_1CD3DB440((llvm::EVT *)v545, (const char *)v38);
      unsigned int v175 = v174;
      unsigned int v176 = v535;
      if (v535 < v174)
      {
        if (v174 > 0x40) {
          operator new[]();
        }
        unsigned int v526 = v174;
        int v177 = (void *)((unint64_t)__b & (0xFFFFFFFFFFFFFFFFLL >> -(char)v174));
        uint64_t v525 = v177;
        unsigned int v176 = v174;
      }
      else
      {
        unsigned int v526 = v535;
        if (v535 > 0x40) {
          operator new[]();
        }
        int v177 = __b;
        uint64_t v525 = __b;
      }
      char v178 = sub_1CD007B58(a1);
      char v179 = 0;
      if (v178) {
        goto LABEL_652;
      }
      llvm::APInt::zextOrTrunc((uint64_t *)&v528, v15, (uint64_t)v545);
      if (*((_DWORD *)a6 + 2) >= 0x41u && *a6) {
        MEMORY[0x1D25D9CB0](*a6, 0x1000C8000313F17);
      }
      *a6 = v545[0];
      *((_DWORD *)a6 + 2) = v545[1];
      llvm::APInt::zextOrTrunc((uint64_t *)__src, v15, (uint64_t)v545);
      if (*((_DWORD *)a5 + 2) >= 0x41u && *a5) {
        MEMORY[0x1D25D9CB0](*a5, 0x1000C8000313F17);
      }
      *a5 = v545[0];
      *((_DWORD *)a5 + 2) = v545[1];
      if (v173) {
        goto LABEL_325;
      }
      if (*(_WORD *)(v539 + 24) != 205) {
        goto LABEL_325;
      }
      uint64_t v381 = sub_1CD3E3904((unsigned int *)&v539);
      int v383 = v382;
      if (v381 != sub_1CD3E3904((unsigned int *)v527) || v383 != v384) {
        goto LABEL_325;
      }
      if (v176 >= 0x41)
      {
        int v445 = 0;
        int64_t v446 = ((unint64_t)v176 + 63) >> 6;
        do
        {
          BOOL v30 = v446-- < 1;
          if (v30) {
            break;
          }
          unint64_t v447 = v177[v446];
          v445 += __clz(v447);
        }
        while (!v447);
        unsigned int v448 = v176 | 0xFFFFFFC0;
        if ((v176 & 0x3F) == 0) {
          unsigned int v448 = 0;
        }
        unsigned int v449 = v176 - v445 - v448;
        unsigned int v385 = (void **)v177;
        if (v449 > 0x40) {
          goto LABEL_325;
        }
      }
      else
      {
        unsigned int v385 = &v525;
      }
      if (*v385 == (void *)1)
      {
        uint64_t v450 = (void *)v539;
        int v451 = v540;
        uint64_t v452 = sub_1CD7EF724((uint64_t)*a7, v537, *((uint64_t *)&v537 + 1), (uint64_t)v527[0], (uint64_t)v527[1]);
        char v179 = 0;
        a7[2] = v450;
        *((_DWORD *)a7 + 6) = v451;
        a7[4] = (void *)v452;
        *((_DWORD *)a7 + 10) = v453;
        goto LABEL_652;
      }
LABEL_325:
      uint64_t v180 = v539;
      if (*(_WORD *)(v539 + 24) != 207)
      {
LABEL_651:
        char v179 = 1;
        goto LABEL_652;
      }
      if (v535 > 0x40)
      {
        uint64_t v309 = 0;
        unsigned int v181 = (char *)*a5;
        while ((*(void *)((unsigned char *)__b + v309) & ~*(void *)&v181[v309]) == 0)
        {
          v309 += 8;
          if (((((unint64_t)v535 + 63) >> 3) & 0x3FFFFFF8) == v309) {
            goto LABEL_642;
          }
        }
      }
      else
      {
        unsigned int v181 = (char *)*a5;
        if (((unint64_t)__b & ~*a5) == 0)
        {
LABEL_642:
          int v310 = v540;
          uint64_t v311 = (uint64_t)*a7;
          uint64_t v312 = *(void **)(v539 + 64);
          v545[0] = v312;
          if (v312) {
            llvm::MetadataTracking::track((uint64_t)v545, (unsigned __int8 *)v312, 2);
          }
          LODWORD(v545[1]) = *(_DWORD *)(v180 + 60);
          int v313 = sub_1CD7EBF14(v311, 0, (const llvm::APInt *)v545, (llvm *)v537, *((uint64_t *)&v537 + 1), 0, 0);
          a7[2] = (void *)v180;
          *((_DWORD *)a7 + 6) = v310;
          a7[4] = v313;
          *((_DWORD *)a7 + 10) = v314;
          if (!v545[0]) {
            goto LABEL_648;
          }
          int v315 = *(unsigned __int8 *)v545[0];
          if ((v315 - 4) > 0x1E)
          {
            if ((v315 - 3) >= 0xFFFFFFFE) {
              uint64_t v458 = v545[0];
            }
            else {
              uint64_t v458 = 0;
            }
            if ((v315 - 3) < 0xFFFFFFFE)
            {
              if (v315 == 3) {
                *((void *)v545[0] + 1) = 0;
              }
              goto LABEL_648;
            }
            unint64_t v459 = (unint64_t)v458 + 8;
          }
          else
          {
            if ((*((unsigned char *)v545[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v545[0] + 3)) {
              goto LABEL_648;
            }
            uint64_t v492 = *((void *)v545[0] + 2);
            if ((v492 & 4) == 0) {
              goto LABEL_648;
            }
            unint64_t v459 = v492 & 0xFFFFFFFFFFFFFFF8;
            if (!v459) {
              goto LABEL_648;
            }
          }
          *(void *)&long long v542 = v545;
          sub_1CC5FA668(v459 + 16, &v542);
LABEL_648:
          char v179 = 0;
LABEL_652:
          if (v526 >= 0x41 && v525) {
            MEMORY[0x1D25D9CB0](v525, 0x1000C8000313F17);
          }
          if (v529 >= 0x41 && v528) {
            MEMORY[0x1D25D9CB0](v528, 0x1000C8000313F17);
          }
          if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
            MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
          }
          if (v179) {
            goto LABEL_202;
          }
          goto LABEL_511;
        }
      }
      uint64_t v182 = *((unsigned int *)a5 + 2);
      if (v182 > 0x40) {
        bzero(v181, ((unint64_t)(v182 + 63) >> 3) & 0x3FFFFFF8);
      }
      else {
        *a5 = 0;
      }
      if (v173) {
        goto LABEL_651;
      }
      if (v176 >= 0x41)
      {
        int v339 = 0;
        int64_t v340 = ((unint64_t)v176 + 63) >> 6;
        do
        {
          BOOL v30 = v340-- < 1;
          if (v30) {
            break;
          }
          unint64_t v341 = v177[v340];
          v339 += __clz(v341);
        }
        while (!v341);
        unsigned int v342 = v176 | 0xFFFFFFC0;
        if ((v176 & 0x3F) == 0) {
          unsigned int v342 = 0;
        }
        if (v176 - v339 - v342 > 0x40) {
          goto LABEL_651;
        }
      }
      else
      {
        int v177 = &v525;
      }
      if (*v177 != 1) {
        goto LABEL_651;
      }
      if (*((_WORD *)v527[0] + 12) != 171) {
        goto LABEL_651;
      }
      uint64_t v343 = *((void *)v527[0] + 6);
      if (!v343) {
        goto LABEL_651;
      }
      do
      {
        if (*(void *)(v343 + 16) != v539) {
          goto LABEL_651;
        }
        uint64_t v343 = *(void *)(v343 + 32);
      }
      while (v343);
      uint64_t v344 = sub_1CD3E3904((unsigned int *)&v539);
      int v346 = v345;
      if (v344 != sub_1CD3E3904((unsigned int *)v527) || v346 != v347) {
        goto LABEL_651;
      }
      uint64_t v349 = v539;
      int v350 = *(unsigned __int8 **)(v539 + 64);
      uint64_t v523 = (uint64_t)v350;
      if (v350) {
        llvm::MetadataTracking::track((uint64_t)&v523, v350, 2);
      }
      LODWORD(v524) = *(_DWORD *)(v349 + 60);
      long long v522 = *(_OWORD *)(*((void *)v527[0] + 5) + 16 * LODWORD(v527[1]));
      int v351 = (llvm *)sub_1CD3DD468((unsigned __int8 *)&v522, (uint64_t)v350, v348);
      uint64_t v353 = v352;
      v545[0] = &v546;
      v545[1] = (void *)0x300000000;
      uint64_t v355 = sub_1CD787918((uint64_t)*a7, (const llvm::APInt *)&v523, (BOOL)v351, v352, 0, 0);
      if (LODWORD(v545[1]) >= HIDWORD(v545[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v356 = (uint64_t *)((char *)v545[0] + 16 * LODWORD(v545[1]));
      *int v356 = v355;
      v356[1] = v354;
      ++LODWORD(v545[1]);
      uint64_t v357 = sub_1CD7EBF14((uint64_t)*a7, 0, (const llvm::APInt *)&v523, v351, v353, 0, 0);
      sub_1CD788338((uint64_t)v545, v175 - 1, (uint64_t)v357, v358);
      uint64_t v359 = 0;
      uint64_t v360 = (*a7)[104];
      if (v360) {
        uint64_t v359 = *(unsigned __int16 *)(v360 + 8);
      }
      uint64_t v361 = sub_1CD7FF4E8(*a7, (const char *)0x92, (const llvm::APInt *)&v523, (llvm *)v522, *((uint64_t *)&v522 + 1), (uint64_t *)v545[0], LODWORD(v545[1]), v359);
      uint64_t v362 = (uint64_t)*a7;
      uint64_t v363 = *((void *)v527[0] + 4);
      *(void *)&long long v542 = *(void *)(v363 + 40);
      DWORD2(v542) = *(_DWORD *)(v363 + 48);
      uint64_t v543 = v361;
      int v544 = v364;
      long long v367 = sub_1CCFDBB80(v362, (const char *)0xAB, (const llvm::APInt *)&v523, (llvm *)v522, *((uint64_t *)&v522 + 1), (uint64_t *)&v542, 2);
      if (v367)
      {
        uint64_t v470 = v365;
        uint64_t v471 = (uint64_t *)*((void *)v527[0] + 4);
        uint64_t v472 = *v471;
        uint64_t v473 = v471[1];
        uint64_t v474 = (*a7)[104];
        if (v474) {
          LOWORD(v474) = *(_WORD *)(v474 + 8);
        }
        int v475 = sub_1CCFDED5C((uint64_t)*a7, 171, (const llvm::APInt *)&v523, (llvm *)v522, *((uint64_t *)&v522 + 1), v472, v473, v366, (uint64_t)v367, v365, v474);
        int v477 = (void *)v539;
        int v478 = v540;
        uint64_t v479 = sub_1CD7EF724((uint64_t)*a7, v537, *((uint64_t *)&v537 + 1), (uint64_t)v475, v470 & 0xFFFFFFFF00000000 | v476);
        a7[2] = v477;
        *((_DWORD *)a7 + 6) = v478;
        a7[4] = (void *)v479;
        *((_DWORD *)a7 + 10) = v480;
      }
      if (v545[0] != &v546) {
        free(v545[0]);
      }
      if (v523)
      {
        int v368 = *(unsigned __int8 *)v523;
        if ((v368 - 4) > 0x1E)
        {
          if ((v368 - 3) >= 0xFFFFFFFE) {
            uint64_t v468 = v523;
          }
          else {
            uint64_t v468 = 0;
          }
          if ((v368 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v469 = v468 + 8;
LABEL_953:
            v545[0] = &v523;
            sub_1CC5FA668(v469 + 16, v545);
            goto LABEL_786;
          }
          if (v368 == 3) {
            *(void *)(v523 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v523 + 1) & 0x7F) == 2 || *(_DWORD *)(v523 + 12))
        {
          uint64_t v495 = *(void *)(v523 + 16);
          if ((v495 & 4) != 0)
          {
            unint64_t v469 = v495 & 0xFFFFFFFFFFFFFFF8;
            if (v469) {
              goto LABEL_953;
            }
          }
        }
      }
LABEL_786:
      if (!v367) {
        goto LABEL_651;
      }
      goto LABEL_648;
  }
}

unint64_t sub_1CD00C080(void **a1, uint64_t a2, int a3)
{
  if (*(_WORD *)(a2 + 24) != 58) {
    return 0;
  }
  uint64_t v3 = *(void *)(a2 + 48);
  if (!v3) {
    return 0;
  }
  int v5 = 1;
  do
  {
    if (*(_DWORD *)(v3 + 8) == a3)
    {
      if (!v5) {
        return 0;
      }
      --v5;
    }
    uint64_t v3 = *(void *)(v3 + 32);
  }
  while (v3);
  if (v5) {
    return 0;
  }
  uint64_t v8 = sub_1CCFD8CD8(*(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0, 0);
  if (!v8 || (*(unsigned char *)(v8 + 26) & 8) != 0) {
    return 0;
  }
  uint64_t v9 = *(void *)(v8 + 80);
  uint64_t v10 = *(unsigned int *)(v9 + 32);
  if (v10 > 0x40)
  {
    int v12 = 0;
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    do
    {
      BOOL v14 = v13-- < 1;
      if (v14) {
        break;
      }
      unint64_t v15 = *(void *)(*(void *)(v9 + 24) + 8 * v13);
      v12 += __clz(v15);
    }
    while (!v15);
    int v16 = v10 | 0xFFFFFFC0;
    if ((v10 & 0x3F) == 0) {
      int v16 = 0;
    }
    if (v12 + v16 != v10)
    {
      int v17 = 0;
      BOOL v18 = *(int8x8_t **)(v9 + 24);
      unint64_t v19 = (unint64_t)(v10 + 63) >> 6;
      do
      {
        int8x8_t v20 = *v18++;
        uint8x8_t v21 = (uint8x8_t)vcnt_s8(v20);
        v21.i16[0] = vaddlv_u8(v21);
        v17 += v21.i32[0];
        --v19;
      }
      while (v19);
      if (v17 != 1) {
        operator new[]();
      }
    }
    return 0;
  }
  uint64_t v11 = *(void *)(v9 + 24);
  if ((v11 & (v11 - 1)) == 0) {
    return 0;
  }
  unint64_t v6 = **a1 | v11;
  unsigned int v34 = *(_DWORD *)(v9 + 32);
  unint64_t __src = (void *)v6;
  BOOL v22 = sub_1CCA4D700((llvm::APInt *)&__src);
  BOOL v23 = v22;
  if (v22)
  {
    unsigned int v32 = v34;
    if (v34 > 0x40) {
      operator new[]();
    }
    if (v34) {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
    }
    else {
      unint64_t v24 = 0;
    }
    unint64_t v31 = v24 & ~(unint64_t)__src;
    llvm::APInt::operator++((uint64_t)&v31);
    uint64_t v25 = v32;
    unsigned int v32 = 0;
    if (v25 > 0x40)
    {
      int v27 = 0;
      int64_t v28 = (unint64_t)(v25 + 63) >> 6;
      do
      {
        BOOL v14 = v28-- < 1;
        if (v14) {
          break;
        }
        unint64_t v29 = *(void *)(v31 + 8 * v28);
        v27 += __clz(v29);
      }
      while (!v29);
      int v30 = v25 | 0xFFFFFFC0;
      if ((v25 & 0x3F) == 0) {
        int v30 = 0;
      }
      int v26 = v27 + v30;
      if (v31)
      {
        MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
        if (v32 >= 0x41)
        {
          if (v31) {
            MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
          }
        }
      }
    }
    else
    {
      int v26 = v25 + __clz(v31) - 64;
    }
    unint64_t v6 = (v25 + ~v26);
  }
  if (v34 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (!v23) {
    return 0;
  }
  return v6;
}

BOOL sub_1CD00C374(uint64_t a1, uint64_t a2, BOOL a3, uint64_t a4, BOOL a5)
{
  uint64_t v10 = *(unsigned int **)a1;
  uint64_t v11 = (uint64_t)sub_1CD80E5C8(*(unsigned int **)a1, a2, a3, *(unsigned int **)(a1 + 8), **(void **)(a1 + 16), (**(_DWORD **)(a1 + 24) + 1));
  uint64_t v13 = v12;
  uint64_t v16 = (uint64_t)sub_1CD80E5C8(v10, a4, a5, *(unsigned int **)(a1 + 8), **(void **)(a1 + 16), (**(_DWORD **)(a1 + 24) + 1));
  BOOL result = (v11 | v16) != 0;
  if (v11 | v16)
  {
    uint64_t v18 = v14;
    uint64_t v19 = **(void **)(a1 + 16);
    int8x8_t v20 = *(uint64_t **)(a1 + 40);
    uint64_t v21 = **(unsigned int **)(a1 + 32);
    uint64_t v22 = *v20;
    BOOL v23 = *(unsigned __int8 **)(*v20 + 64);
    int v47 = v23;
    if (v23)
    {
      BOOL v45 = a5;
      uint64_t v46 = v19;
      uint64_t v24 = v21;
      uint64_t v25 = v18;
      llvm::MetadataTracking::track((uint64_t)&v47, v23, 2);
      uint64_t v18 = v25;
      a5 = v45;
      uint64_t v19 = v46;
      uint64_t v21 = v24;
    }
    int v48 = *(_DWORD *)(v22 + 60);
    uint64_t v26 = *(void *)(a1 + 48);
    int v27 = *(llvm **)v26;
    uint64_t v28 = *(void *)(v26 + 8);
    if (v11) {
      uint64_t v29 = v11;
    }
    else {
      uint64_t v29 = a2;
    }
    if (v11) {
      uint64_t v30 = v13;
    }
    else {
      uint64_t v30 = a3;
    }
    if (v16) {
      uint64_t v31 = v16;
    }
    else {
      uint64_t v31 = a4;
    }
    if (v16) {
      uint64_t v32 = v18;
    }
    else {
      uint64_t v32 = a5;
    }
    uint64_t v33 = *(void *)(v19 + 832);
    if (v33) {
      LOWORD(v33) = *(_WORD *)(v33 + 8);
    }
    unsigned int v34 = sub_1CCFDED5C(v19, v21, (const llvm::APInt *)&v47, v27, v28, v29, v30, v15, v31, v32, v33);
    int v36 = v35;
    if (!v47) {
      goto LABEL_22;
    }
    int v37 = *v47;
    if ((v37 - 4) > 0x1E)
    {
      if ((v37 - 3) >= 0xFFFFFFFE) {
        uint64_t v42 = v47;
      }
      else {
        uint64_t v42 = 0;
      }
      if ((v37 - 3) < 0xFFFFFFFE)
      {
        if (v37 == 3) {
          *((void *)v47 + 1) = 0;
        }
        goto LABEL_22;
      }
      unint64_t v43 = (unint64_t)(v42 + 8);
    }
    else
    {
      if ((v47[1] & 0x7F) != 2 && !*((_DWORD *)v47 + 3)) {
        goto LABEL_22;
      }
      uint64_t v44 = *((void *)v47 + 2);
      if ((v44 & 4) == 0) {
        goto LABEL_22;
      }
      unint64_t v43 = v44 & 0xFFFFFFFFFFFFFFF8;
      if (!v43) {
        goto LABEL_22;
      }
    }
    uint64_t v49 = &v47;
    sub_1CC5FA668(v43 + 16, &v49);
LABEL_22:
    uint64_t v38 = *(void *)(a1 + 16);
    unsigned int v39 = *(uint64_t **)(a1 + 40);
    uint64_t v41 = *v39;
    uint64_t v40 = v39[1];
    *(void *)(v38 + 16) = v41;
    *(_DWORD *)(v38 + 24) = v40;
    *(void *)(v38 + 32) = v34;
    *(_DWORD *)(v38 + 40) = v36;
    return (v11 | v16) != 0;
  }
  return result;
}

void *sub_1CD00C564(int a1, int a2, llvm::APInt *this, uint64_t a4)
{
  unsigned int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a4 + 56) + 8)
                          + 40 * (*(_DWORD *)(*(void *)(a4 + 56) + 32) + a2)
                          + 16);
  if (*(unsigned char *)(*(void *)(*(void *)(a4 + 56) + 8)
                + 40 * (*(_DWORD *)(*(void *)(a4 + 56) + 32) + a2)
                + 16))
  {
    if (v4 > 0x40)
    {
      return llvm::APInt::setBitsSlowCase(this, 0, v4);
    }
    else
    {
      unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
      if (*((_DWORD *)this + 2) > 0x40u) {
        **(void **)this |= v5;
      }
      else {
        *(void *)this |= v5;
      }
    }
  }
  return result;
}

BOOL sub_1CD00C5E8(int8x8_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[1].u32[0];
  if (v2 > 0x40)
  {
    uint64_t v7 = (int8x8_t *)*a1;
    uint64_t v3 = *(int8x8_t **)a2;
    unint64_t v8 = (unint64_t)(v2 + 63) >> 6;
    uint64_t v9 = v8;
    while (v9 * 8)
    {
      unint64_t v10 = *(void *)(*(void *)a1 - 8 + v9 * 8);
      int8x8_t v11 = v3[--v9];
      if (v10 != *(void *)&v11)
      {
        if (v10 <= *(void *)&v11) {
          return 0;
        }
        int v12 = 0;
        do
        {
          int8x8_t v13 = *v7++;
          uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
          v14.i16[0] = vaddlv_u8(v14);
          v12 += v14.i32[0];
          --v8;
        }
        while (v8);
        if (v12 != 1) {
          return 0;
        }
        goto LABEL_14;
      }
    }
    return 0;
  }
  uint64_t v3 = *(int8x8_t **)a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(*a1);
  v4.i16[0] = vaddlv_u8(v4);
  if (*(void *)a1 <= *(void *)a2 || v4.u32[0] != 1) {
    return 0;
  }
LABEL_14:
  uint64_t v15 = *(unsigned int *)(a2 + 8);
  if (v15 > 0x40)
  {
    int v16 = 0;
    unint64_t v17 = (unint64_t)(v15 + 63) >> 6;
    do
    {
      int8x8_t v18 = *v3++;
      uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
      v19.i16[0] = vaddlv_u8(v19);
      v16 += v19.i32[0];
      --v17;
    }
    while (v17);
    return v16 == 1;
  }
  else
  {
    return v3 && ((unint64_t)v3 & ((unint64_t)&v3[-1] + 7)) == 0;
  }
}

uint64_t sub_1CD00C6D8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 48);
  if (!v3) {
    return 0;
  }
  int v6 = 1;
  do
  {
    if (*(_DWORD *)(v3 + 8) == a3)
    {
      if (!v6) {
        return 0;
      }
      --v6;
    }
    uint64_t v3 = *(void *)(v3 + 32);
  }
  while (v3);
  if (v6) {
    return 0;
  }
  int v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 == 175)
  {
    int v9 = 177;
  }
  else
  {
    if (v8 != 177) {
      return 0;
    }
    int v9 = 175;
  }
  **(_DWORD **)a1 = v9;
  unint64_t v10 = *(uint64_t **)(a2 + 32);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *v10;
  *(_DWORD *)(v11 + 8) = *((_DWORD *)v10 + 2);
  *(void *)uint64_t v11 = v12;
  if (!sub_1CCFD8CD8(**(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8), 1, 1)) {
    return 0;
  }
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(v13 + 40);
  *(_DWORD *)(v14 + 8) = *(_DWORD *)(v13 + 48);
  *(void *)uint64_t v14 = v15;
  sub_1CCFD8CD8(**(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8), 1, 1);
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 352))(*(void *)(a1 + 32), **(void **)(a1 + 8));
}

uint64_t *sub_1CD00C82C(unsigned int *a1, llvm *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, unsigned int a8, char a9, uint64_t a10, const llvm::APInt *a11)
{
  uint64_t v12 = a5;
  uint64_t v13 = a4;
  uint64_t v1052 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v1043 = a2;
  *((void *)&v1043 + 1) = a3;
  *(void *)&long long v1042 = a4;
  *((void *)&v1042 + 1) = a5;
  unsigned int v1041 = a8;
  uint64_t v16 = *(void *)(a10 + 16);
  unsigned int v1003 = *(llvm::APInt **)(**(void **)(v16 + 40) + 40);
  uint64_t v17 = *(void *)(a4 + 40) + 16 * a5;
  uint8x8_t v19 = *(llvm **)v17;
  uint64_t v18 = *(void *)(v17 + 8);
  unsigned int v1039 = *(llvm **)v17;
  uint64_t v1040 = v18;
  int8x8_t v20 = sub_1CD7F07C8((void *)v16, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a11);
  if (v20) {
    return v20;
  }
  uint64_t v988 = a3;
  v990 = a2;
  uint64_t v1002 = v16;
  uint64_t v21 = sub_1CCFD8CD8(v13, v12, 0, 1);
  uint64_t v22 = (uint64_t)a7;
  uint64_t v23 = sub_1CCFD8CD8(a6, a7, 0, 1);
  unsigned int v24 = (a8 >> 1) & 2 | a8 & 0xFFFFFFF9 | (4 * ((a8 >> 1) & 1));
  if (!v21)
  {
    uint64_t v25 = (void *)v16;
    if (v23) {
      goto LABEL_18;
    }
    if (*(int *)(a10 + 8) >= 2)
    {
      uint64_t v27 = *(void *)(*(void *)(v13 + 40) + 16 * v12);
      if (((a1[23 * v24 + 42897 + (v27 >> 3)] >> (4 * (v27 & 7))) & 0xF) != 0) {
        goto LABEL_18;
      }
    }
    uint64_t v28 = sub_1CD7FFC1C(v19, v18);
    *(void *)&long long v1044 = a6;
    DWORD2(v1044) = a7;
    *(void *)&long long v1045 = v1042;
    DWORD2(v1045) = DWORD2(v1042);
    if (!sub_1CD801880(v16, 0x39u, v28, 1, (uint64_t *)&v1044, 2))
    {
      uint64_t v12 = *((void *)&v1042 + 1);
      uint64_t v988 = *((void *)&v1043 + 1);
      v990 = (llvm *)v1043;
      uint64_t v13 = v1042;
      goto LABEL_18;
    }
    uint64_t v590 = sub_1CD7FFC1C(v1039, v1040);
    *(void *)&long long v1049 = v1042;
    DWORD2(v1049) = DWORD2(v1042);
    uint64_t v1050 = (int8x8_t *)a6;
    unsigned int v1051 = a7;
    uint64_t v12 = *((void *)&v1042 + 1);
    uint64_t v988 = *((void *)&v1043 + 1);
    v990 = (llvm *)v1043;
    uint64_t v13 = v1042;
    if (sub_1CD801880(v16, 0x39u, v590, 1, (uint64_t *)&v1049, 2)) {
      goto LABEL_18;
    }
LABEL_842:
    unsigned int v982 = v24;
    int v168 = v25;
    unint64_t v169 = a11;
    uint64_t v164 = v988;
    uint64_t v163 = v990;
    uint64_t v170 = (uint64_t *)a6;
    uint64_t v165 = (uint64_t)a7;
    uint64_t v166 = (uint64_t *)v13;
    uint64_t v167 = v12;
    return sub_1CD3DC614(v168, v169, v163, v164, (uint64_t)v170, v165, (uint64_t)v166, v167, v982, 0, 0, 0, 0);
  }
  uint64_t v25 = (void *)v16;
  if ((_BYTE)v19) {
    BOOL v26 = v19 - 120 < 0x33;
  }
  else {
    BOOL v26 = *(unsigned __int8 *)(v18 + 8) == 19;
  }
  if (!v26 || v23 == 0)
  {
    if (*(int *)(a10 + 8) < 2) {
      goto LABEL_842;
    }
    uint64_t v30 = *(void *)(*(void *)(v13 + 40) + 16 * v12);
    if (((a1[23 * v24 + 42897 + (v30 >> 3)] >> (4 * (v30 & 7))) & 0xF) == 0) {
      goto LABEL_842;
    }
  }
LABEL_18:
  uint64_t v31 = v1041;
  if (v1041 != 22 && v1041 != 17) {
    goto LABEL_65;
  }
  uint64_t v32 = sub_1CCFD8CD8(a6, a7, 1, 0);
  if (v32)
  {
    uint64_t v34 = *(void *)(v32 + 80);
    int v35 = (llvm::APInt *)(v34 + 24);
    uint64_t v36 = *(unsigned int *)(v34 + 32);
    if (v36 > 0x40)
    {
      int v37 = 0;
      int64_t v38 = (unint64_t)(v36 + 63) >> 6;
      do
      {
        BOOL v527 = v38-- < 1;
        if (v527) {
          break;
        }
        unint64_t v39 = *(void *)(*(void *)v35 + 8 * v38);
        v37 += __clz(v39);
      }
      while (!v39);
      int v40 = v36 | 0xFFFFFFC0;
      if ((v36 & 0x3F) == 0) {
        int v40 = 0;
      }
      if (v37 + v40 != v36 && llvm::APInt::countTrailingOnesSlowCase(v35) != v36) {
        goto LABEL_64;
      }
    }
    else if (v36 && *(void *)v35 && *(void *)v35 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v36)
    {
      goto LABEL_64;
    }
    int v41 = *(unsigned __int16 *)(v13 + 24);
    if ((v41 & 0xFFFE) == 0xB2)
    {
      uint64_t v42 = *(void *)(v13 + 32);
      unint64_t v43 = *(uint64_t **)v42;
      if (*(void *)v42)
      {
        uint64_t v64 = *(void *)(v42 + 8);
LABEL_60:
        uint64_t v66 = v988;
        uint64_t v65 = v990;
        goto LABEL_61;
      }
    }
    uint64_t v44 = *(void *)(v13 + 48);
    if (!v44) {
      goto LABEL_64;
    }
    uint64_t v45 = *(void *)(v13 + 40) + 16 * v12;
    uint64_t v46 = *(llvm **)v45;
    uint64_t v47 = *(void *)(v45 + 8);
    int v48 = 1;
    do
    {
      if (*(_DWORD *)(v44 + 8) == v12)
      {
        if (!v48) {
          goto LABEL_64;
        }
        --v48;
      }
      uint64_t v44 = *(void *)(v44 + 32);
    }
    while (v44);
    if (v41 != 172 || v48) {
      goto LABEL_64;
    }
    if (v36 > 0x40)
    {
      int v49 = 0;
      int64_t v50 = (unint64_t)(v36 + 63) >> 6;
      do
      {
        BOOL v527 = v50-- < 1;
        if (v527) {
          break;
        }
        unint64_t v51 = *(void *)(*(void *)v35 + 8 * v50);
        v49 += __clz(v51);
      }
      while (!v51);
      int v52 = v36 | 0xFFFFFFC0;
      if ((v36 & 0x3F) == 0) {
        int v52 = 0;
      }
      if (v49 + v52 != v36) {
        goto LABEL_64;
      }
    }
    else if (*(void *)v35)
    {
      goto LABEL_64;
    }
    uint64_t v53 = *(uint64_t **)(v13 + 32);
    uint64_t v54 = *v53;
    if ((*(_WORD *)(*v53 + 24) & 0xFFFE) == 0xB2)
    {
      int v55 = *(uint64_t **)(v54 + 32);
      uint64_t v56 = *v55;
      if (*v55)
      {
        uint64_t v601 = v55[1];
        uint64_t v602 = v53[5];
        uint64_t v603 = v53[6];
        uint64_t v604 = v25[104];
        if (v604) {
          LOWORD(v604) = *(_WORD *)(v604 + 8);
        }
        uint64_t v66 = v988;
        uint64_t v65 = v990;
        unint64_t v43 = sub_1CCFDED5C((uint64_t)v25, 172, a11, v46, v47, v56, v601, v33, v602, v603, v604);
        uint64_t v64 = v605;
LABEL_61:
        uint64_t v67 = sub_1CD7EE368(v25, v1041);
        uint64_t v70 = v25[104];
        if (v70) {
          LOWORD(v70) = *(_WORD *)(v70 + 8);
        }
        int8x8_t v20 = sub_1CD7F5D38(v25, (const char *)0xC1, a11, v65, v66, (uint64_t)v43, v64, v69, a6, (uint64_t)a7, v67, v68, SHIDWORD(v68), v70);
        if (v20) {
          return v20;
        }
        goto LABEL_64;
      }
    }
    uint64_t v57 = v53[5];
    if ((*(_WORD *)(v57 + 24) & 0xFFFE) == 0xB2)
    {
      uint64_t v58 = *(uint64_t **)(v57 + 32);
      uint64_t v59 = *v58;
      if (*v58)
      {
        uint64_t v60 = v58[1];
        uint64_t v61 = v53[1];
        uint64_t v62 = v25[104];
        if (v62) {
          LOWORD(v62) = *(_WORD *)(v62 + 8);
        }
        unint64_t v43 = sub_1CCFDED5C((uint64_t)v25, 172, a11, v46, v47, v59, v60, v33, v54, v61, v62);
        uint64_t v64 = v63;
        goto LABEL_60;
      }
    }
  }
LABEL_64:
  uint64_t v31 = v1041;
  uint64_t v12 = *((void *)&v1042 + 1);
  uint64_t v988 = *((void *)&v1043 + 1);
  v990 = (llvm *)v1043;
  uint64_t v13 = v1042;
LABEL_65:
  *(void *)&long long v1044 = v13;
  *((void *)&v1044 + 1) = v12;
  if (v31 != 22 && v31 != 17) {
    goto LABEL_88;
  }
  uint64_t v72 = sub_1CCFD8CD8(a6, a7, 1, 0);
  if (!v72) {
    goto LABEL_88;
  }
  uint64_t v75 = *(void *)(v72 + 80);
  uint64_t v76 = *(unsigned int *)(v75 + 32);
  if (v76 > 0x40)
  {
    int v77 = 0;
    int64_t v78 = (unint64_t)(v76 + 63) >> 6;
    do
    {
      BOOL v527 = v78-- < 1;
      if (v527) {
        break;
      }
      unint64_t v79 = *(void *)(*(void *)(v75 + 24) + 8 * v78);
      v77 += __clz(v79);
    }
    while (!v79);
    int v80 = v76 | 0xFFFFFFC0;
    if ((v76 & 0x3F) == 0) {
      int v80 = 0;
    }
    if (v77 + v80 != v76) {
      goto LABEL_88;
    }
  }
  else if (*(void *)(v75 + 24))
  {
    goto LABEL_88;
  }
  uint64_t v81 = *(void *)(v1044 + 48);
  if (v81)
  {
    int v82 = 1;
    do
    {
      if (*(_DWORD *)(v81 + 8) == DWORD2(v1044))
      {
        if (!v82) {
          goto LABEL_88;
        }
        --v82;
      }
      uint64_t v81 = *(void *)(v81 + 32);
    }
    while (v81);
    if (!v82 && (*(_WORD *)(v1044 + 24) & 0xFFFE) == 0xB4)
    {
      unsigned int v539 = sub_1CD7878C0((unsigned int *)&v1044, v73, v74);
      uint64_t v540 = sub_1CCFD8CD8(*(void *)(*(void *)(v1044 + 32) + 80), *(void *)(*(void *)(v1044 + 32) + 88), 0, 0);
      if (v540)
      {
        uint64_t v541 = *(void *)(v540 + 80);
        uint64_t v542 = *(unsigned int *)(v541 + 32);
        if (v542 >= 0x41)
        {
          int v606 = 0;
          int64_t v607 = (unint64_t)(v542 + 63) >> 6;
          do
          {
            BOOL v527 = v607-- < 1;
            if (v527) {
              break;
            }
            unint64_t v608 = *(void *)(*(void *)(v541 + 24) + 8 * v607);
            v606 += __clz(v608);
          }
          while (!v608);
          int v609 = v542 | 0xFFFFFFC0;
          if ((v542 & 0x3F) == 0) {
            int v609 = 0;
          }
          if ((v542 - v606 - v609) >= 0x41) {
            goto LABEL_88;
          }
          unint64_t v543 = **(void **)(v541 + 24);
        }
        else
        {
          unint64_t v543 = *(void *)(v541 + 24);
        }
        if (v543 >= v539) {
          goto LABEL_88;
        }
        if (*(_WORD *)(v1044 + 24) == 181) {
          unsigned int v610 = v539 - v543;
        }
        else {
          unsigned int v610 = v543;
        }
        uint64_t v611 = *(void *)(v1044 + 32);
        uint64_t v612 = *(void *)(v1044 + 40) + 16 * DWORD2(v1044);
        uint64_t v614 = *(llvm **)v612;
        uint64_t v613 = *(void *)(v612 + 8);
        uint64_t v615 = *(void *)(*(void *)(v611 + 80) + 40) + 16 * *(unsigned int *)(v611 + 88);
        v616 = *(llvm **)v615;
        uint64_t v617 = *(void *)(v615 + 8);
        uint64_t v619 = *(void *)v611;
        uint64_t v618 = *(void *)(v611 + 8);
        uint64_t v620 = *(void *)(v611 + 40);
        uint64_t v621 = *(void *)(v611 + 48);
        if (*(_WORD *)(*(void *)v611 + 24) != 172) {
          goto LABEL_889;
        }
        uint64_t v622 = *(void *)(v619 + 48);
        if (!v622) {
          goto LABEL_889;
        }
        uint64_t v623 = v621;
        int v624 = 1;
        do
        {
          if (*(_DWORD *)(v622 + 8) == v618)
          {
            if (!v624) {
              goto LABEL_889;
            }
            --v624;
          }
          uint64_t v622 = *(void *)(v622 + 32);
        }
        while (v622);
        if (v624) {
          goto LABEL_889;
        }
        uint64_t v625 = *(void *)(v619 + 32);
        uint64_t v626 = *(void *)v625;
        if (*(void *)v625 == v620 && *(_DWORD *)(v625 + 8) == v621)
        {
          uint64_t v767 = *(void *)(v625 + 40);
          v625 += 40;
          uint64_t v626 = v767;
        }
        else
        {
          uint64_t v25 = (void *)v1002;
          uint64_t v22 = (uint64_t)a7;
          if (*(void *)(v625 + 40) != v620 || *(_DWORD *)(v625 + 48) != v621)
          {
LABEL_889:
            if (*(_WORD *)(v620 + 24) != 172) {
              goto LABEL_88;
            }
            uint64_t v627 = *(void *)(v620 + 48);
            if (!v627) {
              goto LABEL_88;
            }
            uint64_t v623 = v618;
            int v628 = 1;
            do
            {
              if (*(_DWORD *)(v627 + 8) == v621)
              {
                if (!v628) {
                  goto LABEL_88;
                }
                --v628;
              }
              uint64_t v627 = *(void *)(v627 + 32);
            }
            while (v627);
            if (v628) {
              goto LABEL_88;
            }
            uint64_t v625 = *(void *)(v620 + 32);
            uint64_t v626 = *(void *)v625;
            if (*(void *)v625 == v619 && *(_DWORD *)(v625 + 8) == v618)
            {
              uint64_t v769 = *(void *)(v625 + 40);
              v625 += 40;
              uint64_t v626 = v769;
            }
            else
            {
              uint64_t v25 = (void *)v1002;
              uint64_t v22 = (uint64_t)a7;
              if (*(void *)(v625 + 40) != v619 || *(_DWORD *)(v625 + 48) != v618) {
                goto LABEL_88;
              }
            }
            unsigned int v610 = v539 - v610;
            uint64_t v768 = 177;
            goto LABEL_1127;
          }
        }
        uint64_t v768 = 175;
        uint64_t v619 = v620;
LABEL_1127:
        uint64_t v770 = *(unsigned int *)(v625 + 8);
        uint64_t v771 = sub_1CD7EBF14(v1002, v610, a11, v616, v617, 0, 0);
        uint64_t v774 = *(void *)(v1002 + 832);
        if (v774) {
          LOWORD(v774) = *(_WORD *)(v774 + 8);
        }
        unsigned int v776 = sub_1CCFDED5C(v1002, v768, a11, v614, v613, v626, v770, v773, (uint64_t)v771, v772, v774);
        uint64_t v778 = *(void *)(v1002 + 832);
        if (v778) {
          LOWORD(v778) = *(_WORD *)(v778 + 8);
        }
        int64_t v779 = sub_1CCFDED5C(v1002, 172, a11, v614, v613, (uint64_t)v776, v775, v777, v619, v623, v778);
        uint64_t v781 = v780;
        uint64_t v782 = sub_1CD7EE368((void *)v1002, v31);
        uint64_t v785 = *(void *)(v1002 + 832);
        if (v785) {
          LOWORD(v785) = *(_WORD *)(v785 + 8);
        }
        uint64_t v22 = (uint64_t)a7;
        uint64_t v25 = (void *)v1002;
        int8x8_t v20 = sub_1CD7F5D38((void *)v1002, (const char *)0xC1, a11, v990, v988, (uint64_t)v779, v781, v784, a6, (uint64_t)a7, v782, v783, SHIDWORD(v783), v785);
        if (v20) {
          return v20;
        }
      }
    }
  }
LABEL_88:
  uint64_t v83 = sub_1CCFD8CD8(a6, v22, 0, 0);
  unint64_t v86 = (unint64_t)v1003;
  if (!v83) {
    goto LABEL_125;
  }
  uint64_t v87 = *(void *)(v83 + 80);
  uint64_t v88 = (void *)(v87 + 24);
  uint64_t v90 = *((void *)&v1043 + 1);
  uint64_t v89 = (llvm *)v1043;
  unsigned int v92 = DWORD2(v1042);
  uint64_t v91 = v1042;
  uint64_t v31 = v1041;
  long long v1044 = v1042;
  if (*(_WORD *)(v1042 + 24) == 201)
  {
    uint64_t v93 = *(void *)(v1042 + 48);
    if (v93)
    {
      int v94 = 1;
      do
      {
        if (*(_DWORD *)(v93 + 8) == DWORD2(v1042))
        {
          if (!v94) {
            goto LABEL_101;
          }
          --v94;
        }
        uint64_t v93 = *(void *)(v93 + 32);
      }
      while (v93);
      if (!v94)
      {
        if ((_BYTE)v1043)
        {
          if (v1043 - 15 >= 0x9C)
          {
LABEL_673:
            int v475 = sub_1CD7878C0((unsigned int *)&v1044, v84, v85);
            unsigned int v478 = sub_1CD7878C0(*(unsigned int **)(v1044 + 32), v476, v477);
            uint64_t v90 = *((void *)&v1043 + 1);
            uint64_t v89 = (llvm *)v1043;
            uint64_t v88 = (void *)(v87 + 24);
            if ((unint64_t)v475 > 31 - __clz(v478))
            {
              uint64_t v479 = *(uint64_t **)(v1044 + 32);
              uint64_t v91 = *v479;
              unsigned int v92 = *((_DWORD *)v479 + 2);
            }
          }
        }
        else if ((*(_DWORD *)(*((void *)&v1043 + 1) + 8) & 0xFE) != 0x12)
        {
          goto LABEL_673;
        }
      }
    }
  }
LABEL_101:
  if (*(_WORD *)(v91 + 24) != 185) {
    goto LABEL_109;
  }
  uint64_t v95 = *(void *)(v91 + 48);
  if (!v95) {
    goto LABEL_109;
  }
  int v96 = 1;
  do
  {
    if (*(_DWORD *)(v95 + 8) == v92)
    {
      if (!v96) {
        goto LABEL_109;
      }
      --v96;
    }
    uint64_t v95 = *(void *)(v95 + 32);
  }
  while (v95);
  if (v96) {
    goto LABEL_109;
  }
  uint64_t v151 = *(void *)(v91 + 32);
  uint64_t v152 = *(void *)(v91 + 40) + 16 * v92;
  uint64_t v154 = *(llvm **)v152;
  uint64_t v153 = *(void *)(v152 + 8);
  char v155 = *(uint64_t **)v151;
  unint64_t v156 = *(void *)(v151 + 8);
  if ((_BYTE)v89)
  {
    if (v89 - 15 >= 0x9C) {
      goto LABEL_279;
    }
  }
  else if ((*(_DWORD *)(v90 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_279;
  }
  if ((_BYTE)v154)
  {
    if ((v154 == 1 || !(BOOL v203 = *(void *)&a1[2 * v154 + 24] == 0))
      && !*((unsigned char *)a1 + 390 * v154 + 4047))
    {
      goto LABEL_109;
    }
  }
LABEL_279:
  if (v1041 == 12 || v1041 == 10)
  {
    uint64_t v991 = v90;
    char v995 = v89;
    uint64_t v998 = (void **)v88;
    unsigned int v204 = (*(uint64_t (**)(unsigned int *, llvm *, uint64_t, void))(*(void *)a1 + 240))(a1, v154, v153, v1041);
    if (v1041 == 12) {
      unint64_t v205 = v204 + 1;
    }
    else {
      unint64_t v205 = v204;
    }
    uint64_t v206 = *(unsigned int *)(v87 + 32);
    if (v206 >= 0x41)
    {
      int v260 = 0;
      int64_t v261 = (unint64_t)(v206 + 63) >> 6;
      uint64_t v262 = v261;
      uint64_t v88 = v998;
      do
      {
        BOOL v527 = v262-- < 1;
        if (v527) {
          break;
        }
        unint64_t v263 = (*v998)[v262];
        v260 += __clz(v263);
      }
      while (!v263);
      int v264 = v206 | 0xFFFFFFC0;
      if ((v206 & 0x3F) == 0) {
        int v264 = 0;
      }
      if ((v206 - v260 - v264) <= 0x40)
      {
        BOOL v207 = (void *)**v998;
        if ((unint64_t)v207 <= v205)
        {
          int v265 = 0;
          do
          {
            BOOL v527 = v261-- < 1;
            if (v527) {
              break;
            }
            unint64_t v266 = (*v998)[v261];
            v265 += __clz(v266);
          }
          while (!v266);
          unsigned int v267 = v206 - (v264 + v265);
          BOOL v268 = v267 <= 0x40 && v1041 == 12;
          if (!v268 || v207 != 0)
          {
            if (v267 > 0x40) {
              LODWORD(v207) = -1;
            }
            goto LABEL_293;
          }
        }
      }
    }
    else
    {
      uint64_t v88 = v998;
      BOOL v207 = *v998;
      BOOL v209 = v1041 == 12 && v207 == 0;
      if ((unint64_t)v207 <= v205 && !v209)
      {
LABEL_293:
        int v210 = v207 - (v1041 == 12);
        uint64_t v211 = sub_1CD787918((uint64_t)v25, a11, (BOOL)v154, v153, 0, 0);
        if (v210)
        {
          uint64_t v214 = v211;
          uint64_t v215 = v212;
          do
          {
            uint64_t v216 = v25[104];
            if (v216) {
              LOWORD(v216) = *(_WORD *)(v216 + 8);
            }
            BOOL v217 = sub_1CCFDED5C((uint64_t)v25, 56, a11, v154, v153, (uint64_t)v155, v156, v213, v214, v215, v216);
            uint64_t v220 = v25[104];
            if (v220) {
              LOWORD(v220) = *(_WORD *)(v220 + 8);
            }
            char v155 = sub_1CCFDED5C((uint64_t)v25, 171, a11, v154, v153, (uint64_t)v155, v156, v219, (uint64_t)v217, v218, v220);
            unint64_t v156 = v156 & 0xFFFFFFFF00000000 | v221;
            --v210;
          }
          while (v210);
        }
        if (v1041 == 12) {
          unsigned int v222 = 17;
        }
        else {
          unsigned int v222 = 22;
        }
        int v223 = sub_1CD7EBF14((uint64_t)v25, 0, a11, v154, v153, 0, 0);
        uint64_t v225 = v224;
        uint64_t v226 = sub_1CD7EE368(v25, v222);
        uint64_t v229 = v25[104];
        if (v229) {
          LOWORD(v229) = *(_WORD *)(v229 + 8);
        }
        uint64_t v22 = (uint64_t)a7;
        unint64_t v86 = (unint64_t)v1003;
        uint64_t v230 = sub_1CD7F5D38(v25, (const char *)0xC1, a11, v995, v991, (uint64_t)v155, v156, v228, (uint64_t)v223, v225, v226, v227, SHIDWORD(v227), v229);
        goto LABEL_829;
      }
    }
LABEL_109:
    uint64_t v22 = (uint64_t)a7;
    goto LABEL_110;
  }
  if (v1041 != 22 && v1041 != 17) {
    goto LABEL_109;
  }
  uint64_t v270 = *(unsigned int *)(v87 + 32);
  if (v270 >= 0x41)
  {
    int v271 = 0;
    int64_t v272 = (unint64_t)(v270 + 63) >> 6;
    do
    {
      BOOL v527 = v272-- < 1;
      if (v527) {
        break;
      }
      unint64_t v273 = *(void *)(*v88 + 8 * v272);
      v271 += __clz(v273);
    }
    while (!v273);
    int v274 = v270 | 0xFFFFFFC0;
    if ((v270 & 0x3F) == 0) {
      int v274 = 0;
    }
    if ((v270 - v271 - v274) > 0x40) {
      goto LABEL_109;
    }
  }
  unsigned int v275 = v270 >= 0x41 ? (void *)*v88 : v88;
  if (*v275 != 1) {
    goto LABEL_109;
  }
  if ((_BYTE)v89)
  {
    if (v89 - 15 < 0x9C) {
      goto LABEL_815;
    }
  }
  else if ((*(_DWORD *)(v90 + 8) & 0xFE) == 0x12)
  {
    goto LABEL_815;
  }
  if ((v154 == 1 || (_BYTE)v154 && *(void *)&a1[2 * v154 + 24])
    && (_BYTE)v154
    && (*((unsigned __int8 *)a1 + 390 * v154 + 4047) | 4) == 4)
  {
    goto LABEL_109;
  }
LABEL_815:
  uint64_t v992 = v90;
  uint64_t v996 = v89;
  uint64_t v998 = (void **)v88;
  uint64_t v546 = sub_1CD7EBF14((uint64_t)v25, 0, a11, v154, v153, 0, 0);
  uint64_t v986 = v547;
  uint64_t v989 = (uint64_t)v546;
  uint64_t v548 = sub_1CD787918((uint64_t)v25, a11, (BOOL)v154, v153, 0, 0);
  uint64_t v550 = v549;
  __uint64_t n = sub_1CD7E9F74(v1041, v154, v153);
  __int16 v552 = 0;
  uint64_t v553 = v25[104];
  if (v553) {
    __int16 v552 = *(_WORD *)(v553 + 8);
  }
  unint64_t v554 = sub_1CCFDED5C((uint64_t)v25, 56, a11, v154, v153, (uint64_t)v155, v156, v551, v548, v550, v552);
  uint64_t v557 = v25[104];
  if (v557) {
    LOWORD(v557) = *(_WORD *)(v557 + 8);
  }
  uint64_t v558 = sub_1CCFDED5C((uint64_t)v25, 171, a11, v154, v153, (uint64_t)v155, v156, v556, (uint64_t)v554, v555, v557);
  uint64_t v560 = v559;
  uint64_t v561 = sub_1CD7EE368(v25, __n);
  uint64_t v564 = v25[104];
  if (v564) {
    LOWORD(v564) = *(_WORD *)(v564 + 8);
  }
  uint64_t v22 = (uint64_t)a7;
  uint64_t v565 = sub_1CD7F5D38(v25, (const char *)0xC1, a11, v996, v992, (uint64_t)v155, v156, v563, v989, v986, v561, v562, SHIDWORD(v562), v564);
  uint64_t v567 = v566;
  uint64_t v568 = sub_1CD7EE368(v25, v1041);
  uint64_t v571 = v25[104];
  if (v571) {
    LOWORD(v571) = *(_WORD *)(v571 + 8);
  }
  uint64_t v572 = sub_1CD7F5D38(v25, (const char *)0xC1, a11, v996, v992, (uint64_t)v558, v560, v570, v989, v986, v568, v569, SHIDWORD(v569), v571);
  if (v1041 == 17) {
    uint64_t v575 = 171;
  }
  else {
    uint64_t v575 = 172;
  }
  uint64_t v576 = v25[104];
  if (v576) {
    LOWORD(v576) = *(_WORD *)(v576 + 8);
  }
  uint64_t v230 = sub_1CCFDED5C((uint64_t)v25, v575, a11, v996, v992, (uint64_t)v565, v567, v574, (uint64_t)v572, v573, v576);
LABEL_829:
  uint64_t v344 = v230;
  uint64_t v88 = v998;
  if (v230) {
    return v344;
  }
LABEL_110:
  if (*(_WORD *)(v1042 + 24) != 177) {
    goto LABEL_125;
  }
  uint64_t v97 = *(unsigned int *)(v87 + 32);
  if (v97 > 0x40)
  {
    int v98 = 0;
    int64_t v99 = (unint64_t)(v97 + 63) >> 6;
    do
    {
      BOOL v527 = v99-- < 1;
      if (v527) {
        break;
      }
      unint64_t v100 = *(void *)(*v88 + 8 * v99);
      v98 += __clz(v100);
    }
    while (!v100);
    int v101 = v97 | 0xFFFFFFC0;
    if ((v97 & 0x3F) == 0) {
      int v101 = 0;
    }
    int v102 = v98 + v101;
    if (v102 != v97 && v102 != v97 - 1) {
      goto LABEL_125;
    }
  }
  else if (*v88 >= 2uLL)
  {
    goto LABEL_125;
  }
  if (*(_WORD *)(**(void **)(v1042 + 32) + 24) != 184) {
    goto LABEL_125;
  }
  int v307 = v88;
  uint8x8_t v308 = (uint8x8_t)vcnt_s8((int8x8_t)sub_1CD7878C0((unsigned int *)&v1042, v84, v85));
  v308.i16[0] = vaddlv_u8(v308);
  if (v308.i32[0] != 1) {
    goto LABEL_125;
  }
  uint64_t v309 = sub_1CCFD8CD8(*(void *)(*(void *)(v1042 + 32) + 40), *(void *)(*(void *)(v1042 + 32) + 48), 0, 0);
  if (!v309 || v1041 != 22 && v1041 != 17) {
    goto LABEL_125;
  }
  uint64_t v310 = *(void *)(v309 + 80);
  uint64_t v311 = (void *)(v310 + 24);
  unsigned int v312 = sub_1CD7878C0((unsigned int *)&v1042, v84, v85);
  uint64_t v313 = *(unsigned int *)(v310 + 32);
  if (v313 < 0x41)
  {
LABEL_401:
    uint64_t v25 = (void *)v1002;
    uint64_t v22 = (uint64_t)a7;
    unint64_t v86 = (unint64_t)v1003;
    if (*v311 != 31 - __clz(v312)) {
      goto LABEL_125;
    }
    uint64_t v318 = *(unsigned int *)(v87 + 32);
    if (v318 >= 0x41)
    {
      int v319 = 0;
      int64_t v320 = (unint64_t)(v318 + 63) >> 6;
      do
      {
        BOOL v527 = v320-- < 1;
        if (v527) {
          break;
        }
        unint64_t v321 = *(void *)(*v307 + 8 * v320);
        v319 += __clz(v321);
      }
      while (!v321);
      BOOL v322 = 0;
      int v323 = v318 | 0xFFFFFFC0;
      if ((v318 & 0x3F) == 0) {
        int v323 = 0;
      }
      if ((v318 - v319 - v323) > 0x40) {
        goto LABEL_411;
      }
      int v307 = (void *)*v307;
    }
    BOOL v322 = *v307 == 0;
LABEL_411:
    if (v322 != (v1041 != 17)) {
      unsigned int v324 = 22;
    }
    else {
      unsigned int v324 = 17;
    }
    unsigned int v1041 = v324;
    uint64_t v325 = *(void *)(v1042 + 40) + 16 * DWORD2(v1042);
    BOOL v326 = sub_1CD7EBF14(v1002, 0, a11, *(llvm **)v325, *(void *)(v325 + 8), 0, 0);
    char v327 = *(uint64_t **)(**(void **)(v1042 + 32) + 32);
    return sub_1CD3DC614((void *)v1002, a11, (llvm *)v1043, *((uint64_t *)&v1043 + 1), *v327, v327[1], (uint64_t)v326, v328, v1041, 0, 0, 0, 0);
  }
  int v314 = 0;
  int64_t v315 = (unint64_t)(v313 + 63) >> 6;
  do
  {
    BOOL v527 = v315-- < 1;
    if (v527) {
      break;
    }
    unint64_t v316 = *(void *)(*v311 + 8 * v315);
    v314 += __clz(v316);
  }
  while (!v316);
  int v317 = v313 | 0xFFFFFFC0;
  if ((v313 & 0x3F) == 0) {
    int v317 = 0;
  }
  uint64_t v25 = (void *)v1002;
  uint64_t v22 = (uint64_t)a7;
  unint64_t v86 = (unint64_t)v1003;
  if ((v313 - v314 - v317) <= 0x40)
  {
    uint64_t v311 = (void *)*v311;
    goto LABEL_401;
  }
LABEL_125:
  ShiftAmountTy = (llvm *)(v86 + 272);
  unint64_t v105 = a6;
  int v106 = *(unsigned __int16 *)(a6 + 24);
  if (v106 != 35 && v106 != 11) {
    goto LABEL_545;
  }
  unint64_t v86 = *(void *)(a6 + 80);
  uint64_t v22 = v86 + 24;
  uint64_t v108 = a10;
  if ((v1041 == 22 || v1041 == 17) && !*(_DWORD *)(a10 + 8))
  {
    uint64_t v109 = *(void *)(v1042 + 48);
    if (v109)
    {
      if (!*(void *)(v109 + 32))
      {
        uint64_t v31 = (uint64_t)sub_1CD3E3904((unsigned int *)&v1042);
        if (v84 == 1) {
        unsigned int v329 = 0;
        }
        unint64_t v105 = 0;
        unsigned int v330 = *(unsigned __int16 *)(v1042 + 24);
        if (v330 > 0xC6)
        {
          if (v330 != 253)
          {
            if (v330 == 199)
            {
              uint64_t v31 = (uint64_t)sub_1CD3E3904(*(unsigned int **)(v1042 + 32));
              if (v84 == 1) {
              uint64_t v545 = *(void *)(v1042 + 32);
              }
              unint64_t v105 = *(void *)v545;
              unsigned int v329 = *(_DWORD *)(v545 + 8);
            }
            goto LABEL_919;
          }
          int v347 = (*(unsigned __int16 *)(v1042 + 26) >> 10) & 3;
          if (v347 != 2)
          {
            if (v347 != 3)
            {
LABEL_849:
              unint64_t v105 = 0;
              unsigned int v329 = 0;
              goto LABEL_919;
            }
            long long v1044 = *(_OWORD *)(v1042 + 80);
            if ((_BYTE)v1044) {
              uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v1044);
            }
            else {
              uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1044);
            }
            uint64_t v31 = ExtendedSizeInBits;
            if (v84 == 1) {
            unint64_t v105 = v1042;
            }
            unsigned int v329 = DWORD2(v1042);
LABEL_919:
            uint64_t v648 = *(unsigned int *)(v86 + 32);
            if (v648 > 0x40)
            {
              int v650 = 0;
              int64_t v651 = (unint64_t)(v648 + 63) >> 6;
              do
              {
                BOOL v527 = v651-- < 1;
                if (v527) {
                  break;
                }
                unint64_t v652 = *(void *)(*(void *)v22 + 8 * v651);
                v650 += __clz(v652);
              }
              while (!v652);
              int v653 = v648 | 0xFFFFFFC0;
              if ((v648 & 0x3F) == 0) {
                int v653 = 0;
              }
              int v649 = v650 + v653;
            }
            else
            {
              int v649 = v648 + __clz(*(void *)v22) - 64;
            }
            unsigned int v654 = v648 - v649;
            if (!v31) {
              goto LABEL_135;
            }
LABEL_928:
            if (v31 >= v648 || v31 < v654) {
              goto LABEL_135;
            }
            if ((int)v31 <= 31)
            {
              switch(v31)
              {
                case 1:
                  uint64_t v655 = 0;
                  uint64_t v656 = 2;
                  goto LABEL_970;
                case 0x10:
                  uint64_t v655 = 0;
                  uint64_t v656 = 4;
                  goto LABEL_970;
                case 8:
                  uint64_t v655 = 0;
                  uint64_t v656 = 3;
LABEL_969:
                  uint64_t v25 = (void *)v1002;
                  goto LABEL_970;
              }
            }
            else
            {
              switch(v31)
              {
                case 0x20:
                  uint64_t v655 = 0;
                  uint64_t v656 = 5;
                  goto LABEL_970;
                case 0x40:
                  uint64_t v655 = 0;
                  uint64_t v656 = 6;
                  goto LABEL_970;
                case 0x80:
                  uint64_t v655 = 0;
                  uint64_t v656 = 7;
                  goto LABEL_969;
              }
            }
            uint64_t v25 = (void *)v1002;
            uint64_t v655 = llvm::IntegerType::get(*(llvm::IntegerType **)(v1002 + 56), (llvm::LLVMContext *)v31);
            uint64_t v656 = 0;
LABEL_970:
            if (!(*(unsigned int (**)(unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1744))(a1, 193, v656, v655))
            {
              uint64_t v686 = *(unsigned int **)(v1042 + 32);
              uint64_t v687 = *(void *)v686;
              BOOL v688 = *(unsigned char *)(*(void *)(*(void *)v686 + 40) + 16 * v686[2]) == 2
                  && v1043 == 2;
              uint64_t v108 = a10;
              if (!v688) {
                goto LABEL_135;
              }
              if (*(_WORD *)(v687 + 24) != 193) {
                goto LABEL_135;
              }
              int v689 = *(unsigned __int16 *)(v1042 + 24);
              if ((v689 & 0xFFFE) != 0xC6
                || (sub_1CD80EB68(a1, a6) & 1) == 0
                && !sub_1CD80EC3C(a1, a6, **(void **)(v1042 + 40), *(void *)(*(void *)(v1042 + 40) + 8), v689 == 198))
              {
                goto LABEL_135;
              }
              uint64_t v690 = *(void *)(a6 + 80);
              uint64_t v691 = *(unsigned int *)(v690 + 32);
              if (v691 > 0x40)
              {
                int v737 = 0;
                int64_t v738 = (unint64_t)(v691 + 63) >> 6;
                uint64_t v739 = v738;
                do
                {
                  BOOL v527 = v739-- < 1;
                  if (v527) {
                    break;
                  }
                  unint64_t v740 = *(void *)(*(void *)(v690 + 24) + 8 * v739);
                  v737 += __clz(v740);
                }
                while (!v740);
                int v741 = v691 | 0xFFFFFFC0;
                if ((v691 & 0x3F) == 0) {
                  int v741 = 0;
                }
                if (v737 + v741 == v691 && v1041 == 17) {
                  goto LABEL_1056;
                }
                int v743 = 0;
                do
                {
                  BOOL v527 = v738-- < 1;
                  if (v527) {
                    break;
                  }
                  unint64_t v744 = *(void *)(*(void *)(v690 + 24) + 8 * v738);
                  v743 += __clz(v744);
                }
                while (!v744);
                BOOL v693 = v743 + v741 == v691;
              }
              else
              {
                uint64_t v692 = *(void *)(v690 + 24);
                BOOL v693 = v692 == 0;
                if (!v692 && v1041 == 17)
                {
LABEL_1056:
                  uint64_t v745 = *(void *)(v687 + 32);
                  uint64_t v159 = *(uint64_t **)v745;
                  v746 = (void *)(*(void *)(*(void *)v745 + 40) + 16 * *(unsigned int *)(v745 + 8));
                  unsigned int v747 = sub_1CD7E9F74(*(_DWORD *)(*(void *)(v745 + 80) + 76), *v746, v746[1]);
                  uint64_t v164 = *((void *)&v1043 + 1);
                  uint64_t v163 = (llvm *)v1043;
                  uint64_t v165 = *(void *)(v745 + 8);
                  uint64_t v166 = *(uint64_t **)(v745 + 40);
                  uint64_t v167 = *(void *)(v745 + 48);
                  unsigned int v982 = v747;
                  int v168 = (void *)v1002;
                  goto LABEL_213;
                }
              }
              if (v693 || v1041 != 22) {
                return (uint64_t *)v687;
              }
              goto LABEL_1056;
            }
            uint64_t v694 = v25[104];
            if (v694) {
              __int16 v695 = *(_WORD *)(v694 + 8);
            }
            else {
              __int16 v695 = 0;
            }
            v696 = sub_1CD7F3564((llvm::APFloatBase *)v1002, (const char *)0xC9, (uint64_t)a11, (llvm *)v656, v655, v105, (void *)v329, v695);
            uint64_t v698 = v697;
            uint64_t v699 = *(unsigned int *)(v86 + 32);
            if (v31 == 1)
            {
              uint64_t v700 = (void *)v22;
              if (v699 < 0x41) {
                goto LABEL_995;
              }
              int v701 = 0;
              int64_t v702 = (unint64_t)(v699 + 63) >> 6;
              do
              {
                BOOL v527 = v702-- < 1;
                if (v527) {
                  break;
                }
                unint64_t v703 = *(void *)(*(void *)v22 + 8 * v702);
                v701 += __clz(v703);
              }
              while (!v703);
              int v704 = v699 | 0xFFFFFFC0;
              if ((v699 & 0x3F) == 0) {
                int v704 = 0;
              }
              if ((v699 - v701 - v704) <= 0x40)
              {
                uint64_t v700 = *(void **)v22;
LABEL_995:
                if (*v700 == 1)
                {
                  long long v705 = v1043;
                  unint64_t v707 = sub_1CD7EBF14(v1002, 0, a11, (llvm *)2, 0, 0, 0);
                  if (v1041 == 17) {
                    unsigned int v708 = 22;
                  }
                  else {
                    unsigned int v708 = 17;
                  }
                  return sub_1CD3DC614((void *)v1002, a11, (llvm *)v705, *((uint64_t *)&v705 + 1), (uint64_t)v696, v698, (uint64_t)v707, v706, v708, 0, 0, 0, 0);
                }
              }
            }
            if (v31 > 0x40)
            {
              if (v699 != v31) {
                operator new[]();
              }
              sub_1CD0463BC((uint64_t)&v1044, v22);
            }
            else
            {
              if (v699 >= 0x41) {
                uint64_t v22 = *(void *)v22;
              }
              unint64_t v709 = *(void *)v22;
              DWORD2(v1044) = v31;
              *(void *)&long long v1044 = v709 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v31);
            }
            uint64_t v710 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1044, a11, v656, v655, 0, 0);
            uint64_t v712 = v711;
            if (DWORD2(v1044) >= 0x41 && (void)v1044) {
              MEMORY[0x1D25D9CB0](v1044, 0x1000C8000313F17);
            }
            uint64_t v164 = *((void *)&v1043 + 1);
            uint64_t v163 = (llvm *)v1043;
            unsigned int v982 = v1041;
            int v168 = (void *)v1002;
            unint64_t v169 = a11;
            uint64_t v170 = v696;
            uint64_t v165 = v698;
            uint64_t v166 = (uint64_t *)v710;
            goto LABEL_1379;
          }
          long long v1044 = *(_OWORD *)(v1042 + 80);
          if ((_BYTE)v1044) {
            uint64_t v594 = sub_1CB87E200((unsigned __int8 *)&v1044);
          }
          else {
            uint64_t v594 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1044);
          }
          uint64_t v31 = v594;
          if (v84 == 1) {
          int v544 = &v1042;
          }
        }
        else
        {
          if (v330 == 171)
          {
            uint64_t v331 = *(void *)(*(void *)(v1042 + 32) + 40);
            int v332 = *(unsigned __int16 *)(v331 + 24);
            if (v332 != 35 && v332 != 11) {
              goto LABEL_849;
            }
            unint64_t v334 = *(int8x8_t **)(v331 + 80);
            unsigned int v1038 = v334[4].u32[0];
            if (v1038 > 0x40) {
              operator new[]();
            }
            int8x8_t v1037 = v334[3];
            llvm::APInt::operator+=((uint64_t)&v1037, 1uLL);
            uint64_t v592 = v1038;
            unsigned int v1038 = 0;
            if (v592 > 0x40)
            {
              uint64_t v595 = 0;
              int v596 = 0;
              unint64_t v597 = ((unint64_t)(v592 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                uint8x8_t v598 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(void *)&v1037 + v595));
                v598.i16[0] = vaddlv_u8(v598);
                v596 += v598.i32[0];
                v595 += 8;
              }
              while (v597 != v595);
              if (v1037)
              {
                MEMORY[0x1D25D9CB0](*(void *)&v1037, 0x1000C8000313F17);
                if (v1038 >= 0x41)
                {
                  if (v1037) {
                    MEMORY[0x1D25D9CB0](*(void *)&v1037, 0x1000C8000313F17);
                  }
                }
              }
              if (v596 != 1) {
                goto LABEL_849;
              }
            }
            else
            {
              uint8x8_t v593 = (uint8x8_t)vcnt_s8(v1037);
              v593.i16[0] = vaddlv_u8(v593);
              if (v593.u32[0] != 1) {
                goto LABEL_849;
              }
            }
            uint64_t v599 = *(void *)(v331 + 80);
            unint64_t v600 = (llvm::APInt *)(v599 + 24);
            if (*(_DWORD *)(v599 + 32) > 0x40u) {
              uint64_t v31 = llvm::APInt::countTrailingOnesSlowCase(v600);
            }
            else {
              uint64_t v31 = __clz(__rbit64(~*(void *)v600));
            }
            uint64_t v629 = *(void *)(v1042 + 32);
            unint64_t v105 = *(void *)v629;
            unsigned int v329 = *(_DWORD *)(v629 + 8);
            goto LABEL_919;
          }
          if (v330 != 198) {
            goto LABEL_919;
          }
          uint64_t v31 = (uint64_t)sub_1CD3E3904(*(unsigned int **)(v1042 + 32));
          if (v84 == 1) {
          int v544 = *(long long **)(v1042 + 32);
          }
        }
        unsigned int v329 = *((_DWORD *)v544 + 2);
        unint64_t v105 = *(void *)v544;
        uint64_t v648 = *(unsigned int *)(v86 + 32);
        unsigned int v657 = v648 - 1;
        if (v648 > 0x40)
        {
          if ((*(void *)(*(void *)v22 + 8 * (v657 >> 6)) >> v657))
          {
            int v659 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)(v86 + 24));
          }
          else
          {
            int v827 = 0;
            int64_t v828 = (unint64_t)(v648 + 63) >> 6;
            do
            {
              BOOL v527 = v828-- < 1;
              if (v527) {
                break;
              }
              unint64_t v829 = *(void *)(*(void *)v22 + 8 * v828);
              v827 += __clz(v829);
            }
            while (!v829);
            int v830 = v648 | 0xFFFFFFC0;
            if ((v648 & 0x3F) == 0) {
              int v830 = 0;
            }
            int v659 = v827 + v830;
          }
        }
        else
        {
          unint64_t v658 = *(void *)v22;
          if (((*(void *)v22 >> v657) & 1) == 0)
          {
            int v659 = v648 + __clz(v658) - 64;
            goto LABEL_944;
          }
          if (v648) {
            int v659 = __clz(~(v658 << -(char)v648));
          }
          else {
LABEL_1499:
          }
            int v659 = 0;
        }
        uint64_t v25 = (void *)v1002;
        uint64_t v108 = a10;
LABEL_944:
        unsigned int v654 = v648 - v659 + 1;
        if (!v31) {
          goto LABEL_135;
        }
        goto LABEL_928;
      }
    }
  }
LABEL_135:
  if (*(_DWORD *)(v108 + 8) || v1041 - 18 < 4 || *(_WORD *)(v1042 + 24) != 171) {
    goto LABEL_147;
  }
  uint64_t v110 = *(unsigned int *)(v86 + 32);
  uint64_t v111 = (void *)v22;
  if (v110 >= 0x41)
  {
    int v112 = 0;
    int64_t v113 = (unint64_t)(v110 + 63) >> 6;
    do
    {
      BOOL v527 = v113-- < 1;
      if (v527) {
        break;
      }
      unint64_t v114 = *(void *)(*(void *)v22 + 8 * v113);
      v112 += __clz(v114);
    }
    while (!v114);
    int v115 = v110 | 0xFFFFFFC0;
    if ((v110 & 0x3F) == 0) {
      int v115 = 0;
    }
    if ((v110 - v112 - v115) > 0x40) {
      goto LABEL_147;
    }
    uint64_t v111 = *(void **)v22;
  }
  if (!*v111)
  {
    uint64_t v195 = *(void *)(v1042 + 48);
    if (v195)
    {
      if (!*(void *)(v195 + 32))
      {
        uint64_t v196 = *(uint64_t **)(v1042 + 32);
        uint64_t v31 = *v196;
        if (*(_WORD *)(*v196 + 24) == 253)
        {
          uint64_t v197 = *(void *)(v31 + 48);
          if (v197)
          {
            if (!*(void *)(v197 + 32))
            {
              int v198 = *(unsigned __int16 *)(v196[5] + 24);
              if (v198 == 35 || v198 == 11)
              {
                DWORD2(v1049) = 1;
                *(void *)&long long v1049 = 0;
                if ((*(_WORD *)(*(void *)(v31 + 96) + 36) & 0xF00) == 0
                  && (*(unsigned char *)(v31 + 26) & 8) == 0
                  && (*(_WORD *)(v31 + 26) & 0x380) == 0)
                {
                  unsigned int v994 = sub_1CD3E3904((unsigned int *)&v1042);
                  if (v84 == 1) {
                  unsigned int v997 = v994;
                  }
                  if ((*(_WORD *)(v31 + 26) & 0xC00) != 0)
                  {
                    long long v1044 = *(_OWORD *)(v31 + 80);
                    unsigned int v200 = (_BYTE)v1044
                         ? sub_1CB87E200((unsigned __int8 *)&v1044)
                         : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1044);
                    unsigned int v997 = v200;
                    if (v84 == 1) {
                  }
                    }
                  uint64_t v25 = (void *)v1002;
                  uint64_t v108 = a10;
                  if (v997 >= 0x10)
                  {
                    int64_t v993 = 0;
                    unsigned int v983 = 0;
                    int __na = 0;
                    uint64_t v748 = *(void *)(*(void *)(*(void *)(v1042 + 32) + 40) + 80);
                    int v987 = 1;
                    unsigned int v749 = v997;
                    do
                    {
                      unsigned int v1006 = v749;
                      DWORD2(v1044) = v994;
                      if (v994 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v1044);
                      }
                      *(void *)&long long v1044 = 0;
                      v749 >>= 1;
                      if (v1006 > 0x81)
                      {
                        llvm::APInt::setBitsSlowCase(&v1044, 0, v1006 >> 1);
                      }
                      else
                      {
                        unint64_t v750 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v749;
                        if (DWORD2(v1044) > 0x40) {
                          *(void *)v1044 |= v750;
                        }
                        else {
                          *(void *)&long long v1044 = v1044 | v750;
                        }
                      }
                      if (v749 <= v997)
                      {
                        int v751 = 0;
                        if (v997 / v749 <= 1) {
                          int v752 = 1;
                        }
                        else {
                          int v752 = v997 / v749;
                        }
                        do
                        {
                          uint64_t v753 = *(unsigned int *)(v748 + 32);
                          if (v753 > 0x40)
                          {
                            unint64_t v757 = (unint64_t)(v753 + 63) >> 6;
                            uint64_t v758 = *(uint64_t **)(v748 + 24);
                            uint64_t v754 = v1044;
                            v759 = (uint64_t *)v1044;
                            while (1)
                            {
                              uint64_t v761 = *v758++;
                              uint64_t v760 = v761;
                              uint64_t v762 = *v759++;
                              if ((v760 & ~v762) != 0) {
                                break;
                              }
                              if (!--v757) {
                                goto LABEL_1096;
                              }
                            }
                          }
                          else
                          {
                            uint64_t v754 = v1044;
                            if ((*(void *)(v748 + 24) & ~(void)v1044) == 0)
                            {
LABEL_1096:
                              if (*(unsigned char *)ShiftAmountTy) {
                                int v763 = v997 / v749 + ~v751;
                              }
                              else {
                                int v763 = v751;
                              }
                              int v764 = v751 * (v749 & 0x7FFFFFF8);
                              LODWORD(v1036) = *(_DWORD *)(v748 + 32);
                              if (v753 > 0x40) {
                                operator new[]();
                              }
                              if (v753 == v764)
                              {
                                int64_t v993 = 0;
                                int64_t v1035 = 0;
                              }
                              else
                              {
                                int64_t v993 = *(void *)(v748 + 24) >> v764;
                                int64_t v1035 = v993;
                              }
                              unsigned int v983 = v763 * (v1006 >> 4);
                              int __na = v749;
                              *(void *)&long long v1049 = v993;
                              DWORD2(v1049) = v753;
                              int v987 = v753;
                              break;
                            }
                          }
                          if (DWORD2(v1044) > 0x40)
                          {
                            llvm::APInt::shlSlowCase((llvm::APInt *)&v1044, v749);
                          }
                          else
                          {
                            uint64_t v755 = v754 << v749;
                            if (DWORD2(v1044) == v749) {
                              uint64_t v755 = 0;
                            }
                            if (DWORD2(v1044)) {
                              unint64_t v756 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v1044);
                            }
                            else {
                              unint64_t v756 = 0;
                            }
                            *(void *)&long long v1044 = v756 & v755;
                          }
                          ++v751;
                        }
                        while (v751 != v752);
                      }
                      if (DWORD2(v1044) >= 0x41 && (void)v1044) {
                        MEMORY[0x1D25D9CB0](v1044, 0x1000C8000313F17);
                      }
                    }
                    while (v1006 > 0x1F);
                    if (!__na)
                    {
LABEL_1155:
                      uint64_t v25 = (void *)v1002;
                      uint64_t v108 = a10;
                      goto LABEL_147;
                    }
                    if (__na <= 31)
                    {
                      switch(__na)
                      {
                        case 1:
                          uint64_t v765 = 0;
                          uint64_t v766 = 2;
                          goto LABEL_1153;
                        case 16:
                          uint64_t v765 = 0;
                          uint64_t v766 = 4;
                          goto LABEL_1153;
                        case 8:
                          uint64_t v765 = 0;
                          uint64_t v766 = 3;
                          goto LABEL_1153;
                      }
                    }
                    else
                    {
                      switch(__na)
                      {
                        case 32:
                          uint64_t v765 = 0;
                          uint64_t v766 = 5;
LABEL_1153:
                          int64_t v1035 = v766;
                          uint64_t v1036 = v765;
                          if (sub_1CC277B80((unsigned __int8 *)&v1035)
                            && (*(unsigned int (**)(unsigned int *, uint64_t, void, int64_t, uint64_t))(*(void *)a1 + 624))(a1, v31, 0, v1035, v1036))
                          {
                            int v789 = *(uint64_t **)(v31 + 32);
                            uint64_t v791 = (uint64_t *)v789[5];
                            unint64_t v790 = v789[6];
                            if (v983)
                            {
                              uint64_t v792 = v983;
                              uint64_t v791 = sub_1CD7F6604(v1002, (uint64_t)v791, v790, v983, 0, a11, 0);
                              unint64_t v790 = v790 & 0xFFFFFFFF00000000 | v793;
                              int v789 = *(uint64_t **)(v31 + 32);
                            }
                            else
                            {
                              uint64_t v792 = 0;
                            }
                            v795 = (llvm *)v1035;
                            uint64_t v794 = v1036;
                            uint64_t v796 = *v789;
                            uint64_t v797 = v789[1];
                            sub_1CB8F0264(*(uint64_t **)(v31 + 96), v792, (uint64_t)&v1034);
                            uint64_t v798 = *(unsigned __int8 *)(*(void *)(v31 + 96) + 34) | 0x100;
                            long long v1044 = 0u;
                            long long v1045 = 0u;
                            v799 = sub_1CD7F00F8(v1002, (uint64_t)v795, v794, (uint64_t)a11, v796, v797, (uint64_t)v791, v790, &v1034, v798, SHIDWORD(v798), 0, &v1044, 0);
                            uint64_t v801 = v800;
                            long long v802 = v1043;
                            uint64_t v803 = (llvm *)v1035;
                            uint64_t v804 = v1036;
                            if (__na > 0x40)
                            {
                              if (v987 != __na) {
                                operator new[]();
                              }
                              sub_1CD0463BC((uint64_t)&v1044, (uint64_t)&v1049);
                            }
                            else
                            {
                              DWORD2(v1044) = __na;
                              *(void *)&long long v1044 = v993 & (0xFFFFFFFFFFFFFFFFLL >> -(char)__na);
                            }
                            uint64_t v805 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1044, a11, v1035, v1036, 0, 0);
                            uint64_t v808 = *(void *)(v1002 + 832);
                            if (v808) {
                              LOWORD(v808) = *(_WORD *)(v808 + 8);
                            }
                            unsigned int v809 = sub_1CCFDED5C(v1002, 171, a11, v803, v804, (uint64_t)v799, v801, v807, v805, v806, v808);
                            uint64_t v811 = v810;
                            unsigned int v812 = sub_1CD7EBF14(v1002, 0, a11, (llvm *)v1035, v1036, 0, 0);
                            int v814 = sub_1CD3DC614((void *)v1002, a11, (llvm *)v802, *((uint64_t *)&v802 + 1), (uint64_t)v809, v811, (uint64_t)v812, v813, v1041, 0, 0, 0, 0);
                            if (DWORD2(v1044) >= 0x41 && (void)v1044) {
                              MEMORY[0x1D25D9CB0](v1044, 0x1000C8000313F17);
                            }
                            if (DWORD2(v1049) < 0x41) {
                              return v814;
                            }
                            uint64_t v815 = v1049;
                            if (!(void)v1049) {
                              return v814;
                            }
LABEL_1485:
                            MEMORY[0x1D25D9CB0](v815, 0x1000C8000313F17);
                            return v814;
                          }
                          goto LABEL_1155;
                        case 64:
                          uint64_t v765 = 0;
                          uint64_t v766 = 6;
                          goto LABEL_1153;
                        case 128:
                          uint64_t v765 = 0;
                          uint64_t v766 = 7;
                          goto LABEL_1153;
                      }
                    }
                    uint64_t v765 = llvm::IntegerType::get(*(llvm::IntegerType **)(v1002 + 56), (llvm::LLVMContext *)__na);
                    uint64_t v766 = 0;
                    goto LABEL_1153;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_147:
  int v116 = *(unsigned __int16 *)(v1042 + 24);
  if (v116 != 204)
  {
    if (v116 == 199)
    {
      unsigned int v117 = sub_1CD3E3904(*(unsigned int **)(v1042 + 32));
      if (v84 == 1) {
      unsigned int v118 = *(_DWORD *)(v86 + 32);
      }
      DWORD2(v1044) = v118;
      if (v118 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v1044);
      }
      *(void *)&long long v1044 = 0;
      if (v117 != v118)
      {
        uint64_t v84 = v117;
        if (v117 > 0x3F) {
          llvm::APInt::setBitsSlowCase(&v1044, v117, v118);
        }
        else {
          *(void *)&long long v1044 = v1044 | (0xFFFFFFFFFFFFFFFFLL >> (v117 - v118) << v117);
        }
      }
      uint64_t v119 = *(unsigned int *)(v86 + 32);
      if (v119 > 0x40)
      {
        unint64_t v231 = (unint64_t)(v119 + 63) >> 6;
        char v232 = *(uint64_t **)v22;
        int v233 = (uint64_t *)v1044;
        unint64_t v234 = v231 - 1;
        do
        {
          uint64_t v236 = *v232++;
          uint64_t v235 = v236;
          uint64_t v237 = *v233++;
          uint64_t v238 = v237 & v235;
          BOOL v120 = v238 != 0;
          if (v238) {
            BOOL v239 = 1;
          }
          else {
            BOOL v239 = v234 == 0;
          }
          --v234;
        }
        while (!v239);
      }
      else
      {
        BOOL v120 = ((unint64_t)v1044 & *(void *)v22) != 0;
      }
      if (v120)
      {
        switch(v1041)
        {
          case 0xAu:
          case 0xBu:
          case 0x11u:
            uint64_t v241 = *((void *)&v1043 + 1);
            uint64_t v240 = (llvm *)v1043;
            uint64_t v242 = (uint64_t)v25;
            uint64_t v243 = 0;
            goto LABEL_456;
          case 0xCu:
          case 0xDu:
          case 0x16u:
            uint64_t v241 = *((void *)&v1043 + 1);
            uint64_t v240 = (llvm *)v1043;
            uint64_t v242 = (uint64_t)v25;
            uint64_t v243 = 1;
LABEL_456:
            uint64_t v349 = a11;
            return sub_1CD7EBF14(v242, v243, v349, v240, v241, 0, 0);
          case 0x12u:
          case 0x13u:
            unsigned int v486 = *(_DWORD *)(v86 + 32);
            unsigned int v487 = v486 - 1;
            if (v486 >= 0x41) {
              uint64_t v22 = *(void *)v22 + 8 * (v487 >> 6);
            }
            uint64_t v349 = a11;
            unint64_t v488 = *(void *)v22;
            goto LABEL_709;
          case 0x14u:
          case 0x15u:
            unsigned int v489 = *(_DWORD *)(v86 + 32);
            unsigned int v487 = v489 - 1;
            if (v489 >= 0x41) {
              uint64_t v22 = *(void *)v22 + 8 * (v487 >> 6);
            }
            uint64_t v349 = a11;
            unint64_t v488 = ~*(void *)v22;
LABEL_709:
            uint64_t v243 = (v488 >> v487) & 1;
            uint64_t v241 = *((void *)&v1043 + 1);
            uint64_t v240 = (llvm *)v1043;
            uint64_t v242 = (uint64_t)v25;
            return sub_1CD7EBF14(v242, v243, v349, v240, v241, 0, 0);
          default:
            goto LABEL_475;
        }
      }
      if (v1041 <= 0x16 && ((1 << v1041) & 0x423C00) != 0)
      {
        unsigned int v245 = (uint64_t *)(*(void *)(**(void **)(v1042 + 32) + 40)
                         + 16 * *(unsigned int *)(*(void *)(v1042 + 32) + 8));
        uint64_t v246 = *v245;
        uint64_t v31 = v245[1];
        if (*(int *)(v108 + 8) < 2
          || *v245
          && ((uint64_t v339 = *v245, v246 == 1)
           || (v339 ? (BOOL v340 = *(void *)&a1[2 * v339 + 24] == 0) : (BOOL v340 = 1), !v340))
          && !*((unsigned char *)a1 + 390 * v339 + 4055)
          && ((a1[23 * v1041 + 42897 + (v246 >> 3)] >> (4 * (v246 & 7))) & 0xF) == 0)
        {
          uint64_t v247 = (llvm *)(*(uint64_t (**)(unsigned int *, llvm *, void, uint64_t, uint64_t))(*(void *)a1 + 400))(a1, ShiftAmountTy, v25[7], v246, v31);
          uint64_t v249 = v248;
          unsigned int v250 = *(_DWORD *)(v86 + 32);
          if (v117 > 0x40)
          {
            if (v250 != v117) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v1044, v22);
            uint64_t v251 = a11;
          }
          else
          {
            if (v250 >= 0x41) {
              uint64_t v22 = *(void *)v22;
            }
            uint64_t v251 = a11;
            unint64_t v252 = *(void *)v22;
            DWORD2(v1044) = v117;
            unint64_t v253 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v117;
            if (!v117) {
              unint64_t v253 = 0;
            }
            *(void *)&long long v1044 = v253 & v252;
          }
          uint64_t v254 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1044, v251, v246, v31, 0, 0);
          uint64_t v256 = v255;
          if (DWORD2(v1044) >= 0x41 && (void)v1044) {
            MEMORY[0x1D25D9CB0](v1044, 0x1000C8000313F17);
          }
          int v257 = sub_1CD3DC614((void *)v1002, v251, v247, v249, **(void **)(v1042 + 32), *(void *)(*(void *)(v1042 + 32) + 8), v254, v256, v1041, 0, 0, 0, 0);
          uint64_t v258 = (void *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
          return sub_1CD7EB8D4(v1002, (uint64_t)v257, v259, (uint64_t)v251, (llvm *)v1043, *((uint64_t *)&v1043 + 1), *v258, v258[1]);
        }
      }
      goto LABEL_475;
    }
LABEL_163:
    uint64_t v122 = *(void *)(a6 + 80);
    uint64_t v123 = *(unsigned int *)(v122 + 32);
    if (v123 > 0x40)
    {
      int v124 = 0;
      int64_t v125 = (unint64_t)(v123 + 63) >> 6;
      do
      {
        BOOL v527 = v125-- < 1;
        if (v527) {
          break;
        }
        unint64_t v126 = *(void *)(*(void *)(v122 + 24) + 8 * v125);
        v124 += __clz(v126);
      }
      while (!v126);
      int v127 = v123 | 0xFFFFFFC0;
      if ((v123 & 0x3F) == 0) {
        int v127 = 0;
      }
      int v128 = v124 + v127;
      if (v128 != v123 && v128 != v123 - 1) {
        goto LABEL_475;
      }
    }
    else if (*(void *)(v122 + 24) >= 2uLL)
    {
      goto LABEL_475;
    }
    if (v1041 != 22 && v1041 != 17) {
      goto LABEL_475;
    }
    unint64_t v131 = (uint64_t *)v1042;
    if (*(_WORD *)(v1042 + 24) != 193 || !(_BYTE)v1043 || !*(void *)&a1[2 * v1043 + 24]) {
      goto LABEL_214;
    }
    unint64_t v132 = (uint64_t *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
    uint64_t v133 = *v132;
    if (v1043 != *v132)
    {
      BOOL v150 = sub_1CD787F08((unsigned __int8 *)&v1043, v133, v132[1]);
      unint64_t v131 = (uint64_t *)v1042;
      if (!v150) {
        goto LABEL_214;
      }
      LOBYTE(v133) = *(unsigned char *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
    }
    if (v133 != 2)
    {
      unsigned int v157 = (void *)(*(void *)(*(void *)v131[4] + 40) + 16 * *(unsigned int *)(v131[4] + 8));
      if (sub_1CD7879C8(a1, *v157, v157[1]) != 1)
      {
        unint64_t v131 = (uint64_t *)v1042;
        goto LABEL_214;
      }
    }
    uint64_t v134 = *(void *)(a6 + 80);
    uint64_t v135 = *(unsigned int *)(v134 + 32);
    if (v135 > 0x40)
    {
      int v137 = 0;
      int64_t v138 = (unint64_t)(v135 + 63) >> 6;
      do
      {
        BOOL v527 = v138-- < 1;
        if (v527) {
          break;
        }
        unint64_t v139 = *(void *)(*(void *)(v134 + 24) + 8 * v138);
        v137 += __clz(v139);
      }
      while (!v139);
      int v140 = v135 | 0xFFFFFFC0;
      if ((v135 & 0x3F) == 0) {
        int v140 = 0;
      }
      BOOL v136 = v137 + v140 == v135 - 1;
    }
    else
    {
      BOOL v136 = *(void *)(v134 + 24) == 1;
    }
    int v141 = v136;
    if ((v1041 != 17) != v141)
    {
      uint64_t v143 = *((void *)&v1043 + 1);
      uint64_t v142 = (llvm *)v1043;
      int v145 = (void *)*((void *)&v1042 + 1);
      int v144 = (uint64_t *)v1042;
      uint64_t v146 = v25[104];
      if (v146) {
        __int16 v147 = *(_WORD *)(v146 + 8);
      }
      else {
        __int16 v147 = 0;
      }
      uint64_t v148 = (uint64_t)a11;
      unint64_t v149 = (llvm::APFloatBase *)v25;
      return sub_1CD7F3564(v149, (const char *)0xC9, v148, v142, v143, (uint64_t)v144, v145, v147);
    }
    unint64_t v131 = (uint64_t *)v1042;
    uint64_t v158 = *(void *)(v1042 + 32);
    uint64_t v159 = *(uint64_t **)v158;
    unint64_t v160 = (uint64_t *)(*(void *)(*(void *)v158 + 40) + 16 * *(unsigned int *)(v158 + 8));
    uint64_t v161 = *v160;
    unsigned int v162 = sub_1CD7E9F74(*(_DWORD *)(*(void *)(v158 + 80) + 76), *v160, v160[1]);
    if (*(int *)(v108 + 8) >= 2
      && ((a1[23 * v162 + 42897 + (v161 >> 3)] >> (4 * (v161 & 7))) & 0xF) != 0)
    {
LABEL_214:
      int v171 = *((unsigned __int16 *)v131 + 12);
      if (v171 == 171)
      {
        uint64_t v180 = v131[4];
        if (*(_WORD *)(*(void *)v180 + 24) != 173) {
          goto LABEL_232;
        }
        uint64_t v181 = *(void *)(*(void *)v180 + 32);
        uint64_t v172 = *(void *)(v180 + 40);
        if (v172 != *(void *)(v181 + 40) || *(_DWORD *)(v180 + 48) != *(_DWORD *)(v181 + 48)) {
          goto LABEL_232;
        }
      }
      else
      {
        if (v171 != 173) {
          goto LABEL_232;
        }
        uint64_t v172 = *(void *)(v131[4] + 40);
      }
      if (sub_1CD8029CC(v172))
      {
        unsigned int v174 = sub_1CD3E3904((unsigned int *)&v1042);
        if (v173 == 1) {
        DWORD2(v1044) = v174;
        }
        if (v174 >= 0x41) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v1044);
        }
        *(void *)&long long v1044 = 0;
        if (v174 != 1) {
          *(void *)&long long v1044 = v1044 | (2 * (0xFFFFFFFFFFFFFFFFLL >> (65 - v174)));
        }
        uint64_t v25 = (void *)v1002;
        BOOL v176 = sub_1CD7F11AC(v1002, v1042, *((BOOL *)&v1042 + 1), (uint64_t)&v1044, 0);
        if (DWORD2(v1044) >= 0x41 && (void)v1044) {
          MEMORY[0x1D25D9CB0](v1044, 0x1000C8000313F17);
        }
        if (v176)
        {
          if (*(_WORD *)(v1042 + 24) == 173)
          {
            uint64_t v177 = *(void *)(v1042 + 32);
            uint64_t v170 = *(uint64_t **)v177;
            uint64_t v165 = *(unsigned int *)(v177 + 8);
            char v178 = a11;
            uint64_t v179 = (uint64_t)a7;
          }
          else
          {
            uint64_t v336 = *(void *)(v1002 + 832);
            uint64_t v179 = (uint64_t)a7;
            if (v336) {
              LOWORD(v336) = *(_WORD *)(v336 + 8);
            }
            char v178 = a11;
            uint64_t v335 = *(void *)(v1042 + 40) + 16 * DWORD2(v1042);
            uint64_t v170 = sub_1CCFDED5C(v1002, 171, a11, *(llvm **)v335, *(void *)(v335 + 8), **(void **)(**(void **)(v1042 + 32) + 32), *(void *)(*(void *)(**(void **)(v1042 + 32) + 32) + 8), v175, *(void *)(*(void *)(v1042 + 32) + 40), *(void *)(*(void *)(v1042 + 32) + 48), v336);
            uint64_t v165 = v337;
          }
          uint64_t v164 = *((void *)&v1043 + 1);
          uint64_t v163 = (llvm *)v1043;
          if (v1041 == 17) {
            int v338 = 22;
          }
          else {
            int v338 = 17;
          }
          unsigned int v982 = v338;
          int v168 = (void *)v1002;
          unint64_t v169 = v178;
          uint64_t v166 = (uint64_t *)a6;
          goto LABEL_433;
        }
LABEL_475:
        uint64_t v22 = (uint64_t)a7;
        if (*(_WORD *)(v1042 + 24) == 62)
        {
          uint64_t v364 = *(void *)(a6 + 80);
          uint64_t v365 = *(unsigned int *)(v364 + 32);
          if (v365 > 0x40)
          {
            int v366 = 0;
            int64_t v367 = (unint64_t)(v365 + 63) >> 6;
            do
            {
              BOOL v527 = v367-- < 1;
              if (v527) {
                break;
              }
              unint64_t v368 = *(void *)(*(void *)(v364 + 24) + 8 * v367);
              v366 += __clz(v368);
            }
            while (!v368);
            int v369 = v365 | 0xFFFFFFC0;
            if ((v365 & 0x3F) == 0) {
              int v369 = 0;
            }
            if (v366 + v369 != v365) {
              goto LABEL_511;
            }
          }
          else if (*(void *)(v364 + 24))
          {
            goto LABEL_511;
          }
          unsigned int v370 = v1041;
          if (v1041 != 22 && v1041 != 17)
          {
LABEL_512:
            BOOL v385 = v370 == 22 || v370 == 17;
            if (!v385 || *(_WORD *)(v1042 + 24) != 176) {
              goto LABEL_544;
            }
            uint64_t v386 = *(void *)(*(void *)(v1042 + 32) + 40);
            int v387 = *(unsigned __int16 *)(v386 + 24);
            if (v387 != 35 && v387 != 11) {
              goto LABEL_544;
            }
            uint64_t v389 = *(void *)(v386 + 80);
            uint64_t v390 = (llvm::Type *)(v389 + 24);
            uint64_t v391 = sub_1CD3E12F4((unsigned __int8 *)&v1039, v84, v85);
            uint64_t v392 = *(unsigned int *)(v389 + 32);
            if (v392 >= 0x41)
            {
              int v393 = 0;
              int64_t v394 = (unint64_t)(v392 + 63) >> 6;
              do
              {
                BOOL v527 = v394-- < 1;
                if (v527) {
                  break;
                }
                unint64_t v395 = *(void *)(*(void *)v390 + 8 * v394);
                v393 += __clz(v395);
              }
              while (!v395);
              int v396 = v392 | 0xFFFFFFC0;
              if ((v392 & 0x3F) == 0) {
                int v396 = 0;
              }
              if ((v392 - v393 - v396) > 0x40)
              {
LABEL_544:
                unint64_t v105 = a6;
                int8x8_t v20 = sub_1CD80F258((llvm *)v1043, *((uint64_t *)&v1043 + 1), v1042, *((uint64_t *)&v1042 + 1), a6, (uint64_t)a7, v1041, v108, a11);
                if (v20) {
                  return v20;
                }
LABEL_545:
                uint64_t v416 = sub_1CCFD8CD8(v105, v22, 0, 0);
                if (!v416)
                {
LABEL_546:
                  int v419 = *(unsigned __int16 *)(v105 + 24);
                  if (v419 != 35 && v419 != 11) {
                    goto LABEL_1296;
                  }
                  int v1004 = *(llvm::APInt **)(v1002 + 24);
                  unint64_t v86 = *(void *)(a6 + 80);
                  uint64_t v420 = (uint64_t *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
                  uint64_t v31 = *v420;
                  uint64_t v22 = v420[1];
                  if ((_BYTE)v1043) {
                    uint64_t v421 = sub_1CB87E200((unsigned __int8 *)&v1043);
                  }
                  else {
                    uint64_t v421 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1043);
                  }
                  uint64_t v432 = v421;
                  if (v422 == 1) {
                  uint64_t v433 = (unint64_t *)(v86 + 24);
                  }
                  if (v432 != 1
                    && (unsigned int v434 = (void *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042)),
                        sub_1CD7879C8(a1, *v434, v434[1]) != 1)
                    || v1041 != 22 && v1041 != 17
                    || (v1043 != v31 || !(_BYTE)v1043
                                                                       && *((void *)&v1043 + 1) != v22)
                    && (!(_BYTE)v1043
                     || !*(void *)&a1[2 * v1043 + 24]
                     || (v1043 != v31 || !(_BYTE)v31 && *((void *)&v1043 + 1) != v22)
                     && !sub_1CD787F08((unsigned __int8 *)&v1043, v31, v22))
                    || *(_WORD *)(v1042 + 24) != 171
                    || ((uint64_t v435 = *(void *)(*(void *)(v1042 + 32) + 40),
                         int v436 = *(unsigned __int16 *)(v435 + 24),
                         v436 != 35)
                      ? (BOOL v437 = v436 == 11)
                      : (BOOL v437 = 1),
                        !v437))
                  {
LABEL_1018:
                    unint64_t v105 = *(unsigned int *)(v86 + 32);
                    unsigned int v722 = v105 - 1;
                    if (v105 > 0x40)
                    {
                      unint64_t v723 = *v433;
                      if ((*(void *)(*v433 + 8 * (v722 >> 6)) >> v722))
                      {
                        if (v105
                           - llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)(v86 + 24))
                           + 1 >= 0x41)
                          goto LABEL_1296;
                        goto LABEL_1217;
                      }
                      int v823 = 0;
                      int64_t v824 = (v105 + 63) >> 6;
                      do
                      {
                        BOOL v527 = v824-- < 1;
                        if (v527) {
                          break;
                        }
                        unint64_t v825 = *(void *)(v723 + 8 * v824);
                        v823 += __clz(v825);
                      }
                      while (!v825);
                      int v826 = v105 | 0xFFFFFFC0;
                      if ((v105 & 0x3F) == 0) {
                        int v826 = 0;
                      }
                      int v727 = v823 + v826;
                    }
                    else
                    {
                      unint64_t v723 = *v433;
                      unint64_t v724 = *v433 >> v722;
                      int v725 = v105 + __clz(*v433) - 64;
                      int v726 = __clz(~(*v433 << -(char)v105));
                      if (!v105) {
                        int v726 = 0;
                      }
                      if (v724) {
                        int v727 = v726;
                      }
                      else {
                        int v727 = v725;
                      }
                    }
                    if ((v105 - v727 + 1) >= 0x41) {
                      goto LABEL_1296;
                    }
                    if (v105 <= 0x40)
                    {
                      uint64_t v728 = (uint64_t)(v723 << -(char)v105) >> -(char)v105;
LABEL_1218:
                      if ((*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)a1 + 1080))(a1, v728)) {
                        goto LABEL_1296;
                      }
                      ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)a1, v31, v22, (uint64_t)ShiftAmountTy, *(_DWORD *)(a10 + 8) != 0);
                      uint64_t v833 = v832;
                      if (v1041 == 22 || v1041 == 17)
                      {
                        if (*(_WORD *)(v1042 + 24) != 171) {
                          goto LABEL_1296;
                        }
                        uint64_t v834 = *(void *)(v1042 + 48);
                        if (!v834) {
                          goto LABEL_1296;
                        }
                        int v835 = 1;
                        do
                        {
                          if (*(_DWORD *)(v834 + 8) == DWORD2(v1042))
                          {
                            if (!v835) {
                              goto LABEL_1238;
                            }
                            --v835;
                          }
                          uint64_t v834 = *(void *)(v834 + 32);
                        }
                        while (v834);
                        if (!v835)
                        {
                          uint64_t v836 = *(void *)(*(void *)(v1042 + 32) + 40);
                          int v837 = *(unsigned __int16 *)(v836 + 24);
                          if (v837 == 35 || v837 == 11)
                          {
                            uint64_t v839 = *(void *)(v836 + 80);
                            unint64_t v105 = v839 + 24;
                            if (sub_1CCA4D700((llvm::APInt *)(v839 + 24)))
                            {
                              unsigned int v840 = *(_DWORD *)(v839 + 32);
                              if (v840 >= 0x41) {
                                operator new[]();
                              }
                              if ((*v433 & ~*(void *)v105) == 0)
                              {
                                unsigned int v853 = __clz(__rbit64(*(void *)v105));
                                unint64_t v105 = v840 >= v853 ? v853 : v840;
                                if (((*(uint64_t (**)(llvm::APInt *, uint64_t, uint64_t, unint64_t))(*(void *)v1004 + 1456))(v1004, v31, v22, v105) & 1) == 0)
                                {
                                  BOOL v854 = *(uint64_t **)(v1042 + 32);
                                  uint64_t v855 = *v854;
                                  uint64_t v856 = v854[1];
                                  unint64_t v857 = sub_1CD7EBF14(v1002, v105, a11, ShiftAmountTy, v833, 0, 0);
                                  uint64_t v860 = *(void *)(v1002 + 832);
                                  if (v860) {
                                    LOWORD(v860) = *(_WORD *)(v860 + 8);
                                  }
                                  unint64_t v861 = sub_1CCFDED5C(v1002, 177, a11, (llvm *)v31, v22, v855, v856, v859, (uint64_t)v857, v858, v860);
                                  uint64_t v863 = v862;
                                  unsigned int v864 = *(_DWORD *)(v86 + 32);
                                  DWORD2(v1044) = v864;
                                  if (v864 > 0x40) {
                                    operator new[]();
                                  }
                                  if (v864 == v105) {
                                    *(void *)&long long v1044 = 0;
                                  }
                                  else {
                                    *(void *)&long long v1044 = *v433 >> v105;
                                  }
                                  uint64_t v865 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1044, a11, v31, v22, 0, 0);
                                  uint64_t v179 = v866;
                                  if (DWORD2(v1044) >= 0x41 && (void)v1044) {
                                    MEMORY[0x1D25D9CB0](v1044, 0x1000C8000313F17);
                                  }
                                  uint64_t v164 = *((void *)&v1043 + 1);
                                  uint64_t v163 = (llvm *)v1043;
                                  unsigned int v982 = v1041;
                                  int v168 = (void *)v1002;
                                  unint64_t v169 = a11;
                                  uint64_t v170 = v861;
                                  uint64_t v165 = v863;
                                  uint64_t v166 = (uint64_t *)v865;
LABEL_433:
                                  uint64_t v167 = v179;
                                  return sub_1CD3DC614(v168, v169, v163, v164, (uint64_t)v170, v165, (uint64_t)v166, v167, v982, 0, 0, 0, 0);
                                }
                              }
                            }
                          }
                          goto LABEL_1296;
                        }
                      }
LABEL_1238:
                      if (v1041 - 10 > 3)
                      {
LABEL_1296:
                        uint64_t v170 = (uint64_t *)v1042;
                        uint64_t v867 = *(unsigned __int16 *)(v1042 + 24);
                        unsigned int v329 = a11;
                        uint64_t v648 = v1002;
                        uint64_t v712 = (uint64_t)a7;
                        if (v867 == 12) {
                          goto LABEL_1327;
                        }
                        if (v867 == 36) {
                          goto LABEL_1327;
                        }
                        int v868 = *(unsigned __int16 *)(a6 + 24);
                        if (v868 != 36 && v868 != 12) {
                          goto LABEL_1327;
                        }
                        if (v1041 - 7 <= 1) {
                          return sub_1CD3DC614((void *)v1002, a11, (llvm *)v1043, *((uint64_t *)&v1043 + 1), v1042, *((uint64_t *)&v1042 + 1), v1042, *((uint64_t *)&v1042 + 1), v1041, 0, 0, 0, 0);
                        }
                        if (v867 == 222)
                        {
                          unint64_t v105 = (v1041 >> 1) & 2 | v1041 & 0xFFFFFFF9 | (4 * ((v1041 >> 1) & 1));
                          uint64_t v869 = *(void *)(v1042 + 40);
                          unsigned int v870 = *(llvm **)(v869 + 16 * DWORD2(v1042));
                          if (*(int *)(a10 + 8) < 2
                            || (uint64_t v871 = v870 >> 3,
                                int v872 = 15 << (4 * (v870 & 7)),
                                (a1[23 * v105 + 42897 + v871] & v872) == 0))
                          {
                            uint64_t v873 = *(void *)(v1002 + 832);
                            if (v873) {
                              __int16 v874 = *(_WORD *)(v873 + 8);
                            }
                            else {
                              __int16 v874 = 0;
                            }
                            uint64_t v166 = sub_1CD7F3564((llvm::APFloatBase *)v1002, (const char *)0xDE, (uint64_t)a11, v870, *(void *)(v869 + 16 * DWORD2(v1042) + 8), a6, a7, v874);
                            uint64_t v167 = v879;
                            uint64_t v164 = *((void *)&v1043 + 1);
                            uint64_t v163 = (llvm *)v1043;
                            uint64_t v880 = *(void *)(v1042 + 32);
                            uint64_t v170 = *(uint64_t **)v880;
                            uint64_t v165 = *(void *)(v880 + 8);
                            unsigned int v982 = v105;
                            goto LABEL_1392;
                          }
                        }
                        else
                        {
                          uint64_t v875 = *(void *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
                          char v876 = 4 * (v875 & 7);
                          uint64_t v871 = v875 >> 3;
                          int v872 = 15 << v876;
                        }
                        if ((a1[23 * v1041 + 42897 + v871] & v872) == 0) {
                          goto LABEL_1327;
                        }
                        uint64_t v877 = *(void *)(a6 + 80);
                        char v878 = *(_UNKNOWN **)(v877 + 32) == &unk_1CFB2E344
                             ? *(unsigned char *)(*(void *)(v877 + 40) + 28)
                             : *(unsigned char *)(v877 + 52);
                        if ((v878 & 7) != 0) {
                          goto LABEL_1327;
                        }
                        if ((int)v1041 > 8)
                        {
                          if (v1041 == 9)
                          {
                            BOOL v881 = (v878 & 8) == 0;
                            unsigned int v882 = 13;
                            int v883 = 11;
                          }
                          else
                          {
                            if (v1041 != 14) {
                              goto LABEL_1327;
                            }
                            BOOL v881 = (v878 & 8) == 0;
                            unsigned int v882 = 10;
                            int v883 = 12;
                          }
                        }
                        else if (v1041 == 1)
                        {
                          BOOL v881 = (v878 & 8) == 0;
                          unsigned int v882 = 5;
                          int v883 = 3;
                        }
                        else
                        {
                          if (v1041 != 6) {
                            goto LABEL_1327;
                          }
                          BOOL v881 = (v878 & 8) == 0;
                          unsigned int v882 = 2;
                          int v883 = 4;
                        }
                        if (v881) {
                          unsigned int v882 = v883;
                        }
                        if ((a1[23 * v882 + 42897 + v871] & v872) == 0)
                        {
LABEL_1378:
                          uint64_t v164 = *((void *)&v1043 + 1);
                          uint64_t v163 = (llvm *)v1043;
                          uint64_t v165 = *((void *)&v1042 + 1);
                          unsigned int v982 = v882;
                          int v168 = (void *)v1002;
                          unint64_t v169 = a11;
                          uint64_t v166 = (uint64_t *)a6;
LABEL_1379:
                          uint64_t v167 = v712;
                          return sub_1CD3DC614(v168, v169, v163, v164, (uint64_t)v170, v165, (uint64_t)v166, v167, v982, 0, 0, 0, 0);
                        }
LABEL_1327:
                        if ((void)v1042 == a6 && DWORD2(v1042) == a7)
                        {
                          unsigned int v884 = (v1041 >> 3) & 3;
                          if (v884 == 2 || v884 == (v1041 & 1))
                          {
                            uint64_t v287 = *((void *)&v1043 + 1);
                            BOOL v286 = v1043;
                            char v288 = (char)v1039;
                            uint64_t v289 = v1040;
                            uint64_t v290 = v1002;
                            char v285 = v1041 & 1;
                            long long v291 = a11;
                            return (uint64_t *)sub_1CD7EBCBC(v290, v285, v291, v286, v287, v288, v289);
                          }
                          unsigned int v882 = v884 ? 8 : 7;
                          if (v882 != v1041)
                          {
                            if (*(int *)(a10 + 8) < 2) {
                              goto LABEL_1378;
                            }
                            uint64_t v897 = *(void *)(*(void *)(a6 + 40) + 16 * a7);
                            if (((a1[23 * v882 + 42897 + (v897 >> 3)] >> (4 * (v897 & 7))) & 0xF) == 0) {
                              goto LABEL_1378;
                            }
                          }
                        }
                        if (v1041 != 22 && v1041 != 17) {
                          goto LABEL_1350;
                        }
                        v885 = (unsigned __int8 *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
                        int v886 = *v885;
                        if (*v885)
                        {
                          BOOL v889 = (v886 - 120) >= 0x20 && (v886 - 2) >= 6;
                          if (!v889 || (v886 - 15) < 0x3C)
                          {
LABEL_1370:
                            if ((v867 - 56) >= 2 && v867 != 173)
                            {
LABEL_1443:
                              unint64_t v105 = a6;
                              int v934 = *(unsigned __int16 *)(a6 + 24);
                              if ((v934 - 56) < 2 || v934 == 173)
                              {
                                int8x8_t v20 = sub_1CD80F874((uint64_t *)a1, (llvm *)v1043, *((uint64_t *)&v1043 + 1), a6, a7, v1042, DWORD2(v1042), v1041, a11, a10);
                                if (v20) {
                                  return v20;
                                }
                              }
                              int8x8_t v20 = sub_1CD80ED50(a1, v1043, *((BOOL *)&v1043 + 1), v1042, *((unint64_t *)&v1042 + 1), a6, a7, v1041, (uint64_t)a11, a10);
                              if (v20) {
                                return v20;
                              }
                              uint64_t v170 = (uint64_t *)v1042;
                              uint64_t v867 = *(unsigned __int16 *)(v1042 + 24);
                              goto LABEL_1350;
                            }
                            int v894 = *(unsigned __int16 *)(a6 + 24);
                            if (v867 == v894)
                            {
                              uint64_t v895 = *(void *)(v1042 + 32);
                              uint64_t v896 = *(void *)(a6 + 32);
                              uint64_t v170 = *(uint64_t **)v895;
                              uint64_t v166 = *(uint64_t **)v896;
                              if (*(void *)v895 == *(void *)v896 && *(_DWORD *)(v895 + 8) == *(_DWORD *)(v896 + 8))
                              {
                                uint64_t v164 = *((void *)&v1043 + 1);
                                uint64_t v163 = (llvm *)v1043;
                                uint64_t v170 = *(uint64_t **)(v895 + 40);
                                uint64_t v165 = *(void *)(v895 + 48);
                                uint64_t v166 = *(uint64_t **)(v896 + 40);
                                uint64_t v167 = *(void *)(v896 + 48);
LABEL_1383:
                                unsigned int v982 = v1041;
LABEL_1392:
                                int v168 = (void *)v1002;
                                unint64_t v169 = a11;
                                return sub_1CD3DC614(v168, v169, v163, v164, (uint64_t)v170, v165, (uint64_t)v166, v167, v982, 0, 0, 0, 0);
                              }
                              if (*(void *)(v895 + 40) == *(void *)(v896 + 40)
                                && *(_DWORD *)(v895 + 48) == *(_DWORD *)(v896 + 48))
                              {
                                uint64_t v164 = *((void *)&v1043 + 1);
                                uint64_t v163 = (llvm *)v1043;
                                uint64_t v165 = *(void *)(v895 + 8);
                                uint64_t v167 = *(void *)(v896 + 8);
                                goto LABEL_1383;
                              }
                              if ((*(unsigned int (**)(unsigned int *))(*(void *)a1 + 1128))(a1))
                              {
                                uint64_t v898 = *(void *)(v1042 + 32);
                                uint64_t v899 = *(void *)(a6 + 32);
                                uint64_t v170 = *(uint64_t **)v898;
                                uint64_t v166 = *(uint64_t **)(v899 + 40);
                                if (*(uint64_t **)v898 == v166 && *(_DWORD *)(v898 + 8) == *(_DWORD *)(v899 + 48))
                                {
                                  uint64_t v164 = *((void *)&v1043 + 1);
                                  uint64_t v163 = (llvm *)v1043;
                                  uint64_t v170 = *(uint64_t **)(v898 + 40);
                                  uint64_t v165 = *(void *)(v898 + 48);
                                  uint64_t v166 = *(uint64_t **)v899;
                                  uint64_t v167 = *(void *)(v899 + 8);
LABEL_1391:
                                  unsigned int v982 = v1041;
                                  goto LABEL_1392;
                                }
                                if (*(void *)(v898 + 40) == *(void *)v899
                                  && *(_DWORD *)(v898 + 48) == *(_DWORD *)(v899 + 8))
                                {
                                  uint64_t v164 = *((void *)&v1043 + 1);
                                  uint64_t v163 = (llvm *)v1043;
                                  uint64_t v165 = *(void *)(v898 + 8);
                                  uint64_t v167 = *(void *)(v899 + 48);
                                  goto LABEL_1391;
                                }
                              }
                              int v894 = *(unsigned __int16 *)(a6 + 24);
                            }
                            if (v894 != 35 && v894 != 11)
                            {
LABEL_1442:
                              int8x8_t v20 = sub_1CD80F874((uint64_t *)a1, (llvm *)v1043, *((uint64_t *)&v1043 + 1), v1042, DWORD2(v1042), a6, a7, v1041, a11, a10);
                              if (v20) {
                                return v20;
                              }
                              goto LABEL_1443;
                            }
                            uint64_t v900 = *(uint64_t **)(v1042 + 32);
                            uint64_t v901 = v900[5];
                            int v902 = *(unsigned __int16 *)(v901 + 24);
                            if (v902 != 35 && v902 != 11)
                            {
LABEL_1413:
                              int v917 = *(unsigned __int16 *)(*v900 + 24);
                              if ((v917 == 35 || v917 == 11) && *(_WORD *)(v1042 + 24) == 57)
                              {
                                uint64_t v919 = *(void *)(v1042 + 48);
                                if (v919)
                                {
                                  if (!*(void *)(v919 + 32))
                                  {
                                    long long v920 = v1043;
                                    uint64_t v921 = v900[6];
                                    uint64_t v922 = *(void *)(*v900 + 80);
                                    unsigned int v923 = *(_DWORD *)(v922 + 32);
                                    if (v923 >= 0x41) {
                                      operator new[]();
                                    }
                                    unint64_t v924 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v923;
                                    if (!v923) {
                                      unint64_t v924 = 0;
                                    }
                                    unint64_t v925 = v924 & (*(void *)(v922 + 24) - *(void *)(*(void *)(a6 + 80) + 24));
                                    DWORD2(v1044) = *(_DWORD *)(v922 + 32);
                                    *(void *)&long long v1044 = v925;
                                    unsigned int v945 = (uint64_t *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
                                    uint64_t v946 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1044, a11, *v945, v945[1], 0, 0);
                                    unint64_t v948 = sub_1CD3DC614((void *)v1002, a11, (llvm *)v920, *((uint64_t *)&v920 + 1), v901, v921, v946, v947, v1041, 0, 0, 0, 0);
                                    goto LABEL_1483;
                                  }
                                }
                              }
                              long long v1044 = *(_OWORD *)*(void *)(a6 + 40);
                              if ((_BYTE)v1044) {
                                uint64_t v926 = sub_1CB87E200((unsigned __int8 *)&v1044);
                              }
                              else {
                                uint64_t v926 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1044);
                              }
                              unint64_t v928 = v926;
                              if (v927 == 1) {
                              if (v928 <= 0x40)
                              }
                              {
                                uint64_t v929 = *(void *)(a6 + 80);
                                unsigned int v930 = *(_DWORD *)(v929 + 32);
                                uint64_t v931 = v930 > 0x40
                                     ? **(void **)(v929 + 24)
                                     : (uint64_t)(*(void *)(v929 + 24) << -(char)v930) >> -(char)v930;
                                if ((*(unsigned int (**)(unsigned int *, uint64_t))(*(void *)a1 + 1080))(a1, v931))
                                {
                                  uint64_t v932 = *(void *)(v1042 + 48);
                                  if (!v932) {
                                    goto LABEL_1443;
                                  }
                                  int v933 = 1;
                                  do
                                  {
                                    if (*(_DWORD *)(v932 + 8) == DWORD2(v1042))
                                    {
                                      if (!v933) {
                                        goto LABEL_1443;
                                      }
                                      --v933;
                                    }
                                    uint64_t v932 = *(void *)(v932 + 32);
                                  }
                                  while (v932);
                                  if (v933) {
                                    goto LABEL_1443;
                                  }
                                }
                              }
                              goto LABEL_1442;
                            }
                            int v904 = *(unsigned __int16 *)(v1042 + 24);
                            if (v904 == 173)
                            {
                              uint64_t v914 = *(void *)(v1042 + 48);
                              if (!v914 || *(void *)(v914 + 32)) {
                                goto LABEL_1413;
                              }
                              uint64_t v907 = *((void *)&v1043 + 1);
                              uint64_t v906 = (llvm *)v1043;
                              uint64_t v908 = *v900;
                              uint64_t v909 = v900[1];
                              uint64_t v915 = *(void *)(v901 + 80);
                              if (*(_DWORD *)(v915 + 32) > 0x40u) {
                                operator new[]();
                              }
                              uint64_t v916 = *(void *)(*(void *)(a6 + 80) + 24) ^ *(void *)(v915 + 24);
                              DWORD2(v1044) = *(_DWORD *)(v915 + 32);
                              *(void *)&long long v1044 = v916;
                            }
                            else
                            {
                              if (v904 != 56) {
                                goto LABEL_1413;
                              }
                              uint64_t v905 = *(void *)(v1042 + 48);
                              if (!v905 || *(void *)(v905 + 32)) {
                                goto LABEL_1413;
                              }
                              uint64_t v907 = *((void *)&v1043 + 1);
                              uint64_t v906 = (llvm *)v1043;
                              uint64_t v908 = *v900;
                              uint64_t v909 = v900[1];
                              uint64_t v910 = *(void *)(a6 + 80);
                              unsigned int v911 = *(_DWORD *)(v910 + 32);
                              if (v911 >= 0x41) {
                                operator new[]();
                              }
                              unint64_t v912 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v911;
                              if (!v911) {
                                unint64_t v912 = 0;
                              }
                              unint64_t v913 = v912 & (*(void *)(v910 + 24) - *(void *)(*(void *)(v901 + 80) + 24));
                              DWORD2(v1044) = *(_DWORD *)(v910 + 32);
                              *(void *)&long long v1044 = v913;
                            }
                            uint64_t v975 = (uint64_t *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
                            uint64_t v976 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1044, a11, *v975, v975[1], 0, 0);
                            unint64_t v948 = sub_1CD3DC614((void *)v1002, a11, v906, v907, v908, v909, v976, v977, v1041, 0, 0, 0, 0);
                            goto LABEL_1483;
                          }
                        }
                        else
                        {
                          uint64_t v887 = *((void *)v885 + 1);
                          if ((*(_DWORD *)(v887 + 8) & 0xFE) == 0x12) {
                            int v888 = *(unsigned __int8 *)(**(void **)(v887 + 16) + 8);
                          }
                          else {
                            int v888 = *(_DWORD *)(v887 + 8);
                          }
                          if (v888 == 13) {
                            goto LABEL_1370;
                          }
                        }
LABEL_1350:
                        if ((v867 - 61) <= 1)
                        {
                          uint64_t v890 = v170[6];
                          if (v890)
                          {
                            int v891 = 1;
                            do
                            {
                              if (*(_DWORD *)(v890 + 8) == DWORD2(v1042))
                              {
                                if (!v891) {
                                  goto LABEL_1453;
                                }
                                --v891;
                              }
                              uint64_t v890 = *(void *)(v890 + 32);
                            }
                            while (v890);
                            if (!v891 && (v1041 == 22 || v1041 == 17))
                            {
                              unint64_t v105 = *(void *)(**(void **)(v1002 + 40) + 112);
                              if (((*(uint64_t (**)(unsigned int *, void, void, unint64_t))(*(void *)a1 + 144))(a1, v1043, *((void *)&v1043 + 1), v105) & 1) == 0&& (!v105 || (*(char *)(v105 + 13) & 0x80000000) == 0))
                              {
                                int v893 = *(unsigned __int16 *)(v1042 + 24);
                                if (v893 == 61)
                                {
                                  uint64_t v712 = (uint64_t)a7;
                                  int8x8_t v20 = sub_1CD80FBBC((uint64_t *)a1, v1043, *((BOOL *)&v1043 + 1), v1042, DWORD2(v1042), a6, a7, v1041, (uint64_t *)a10, a11);
                                  uint64_t v648 = v1002;
                                  if (v20) {
                                    return v20;
                                  }
                                }
                                else
                                {
                                  uint64_t v648 = v1002;
                                  uint64_t v712 = (uint64_t)a7;
                                  if (v893 == 62)
                                  {
                                    int8x8_t v20 = sub_1CD80FAE0((uint64_t *)a1, v1043, *((BOOL *)&v1043 + 1), v1042, DWORD2(v1042), a6, (uint64_t)a7, v1041, (uint64_t *)a10, a11);
                                    if (v20) {
                                      return v20;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
LABEL_1453:
                        long long v1044 = *(_OWORD *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
                        if (sub_1CD3DD468((unsigned __int8 *)&v1044, v867, v418) != 2) {
                          return 0;
                        }
                        uint64_t v344 = 0;
                        if (a9)
                        {
                          uint64_t v84 = (uint64_t)a11;
                          switch(v1041)
                          {
                            case 0xBu:
                            case 0x15u:
                              unsigned int v967 = sub_1CD7EBB8C(v648, a11, a6, v712, v1039, v1040);
                              uint64_t v970 = *(void *)(v648 + 832);
                              if (v970) {
                                LOWORD(v970) = *(_WORD *)(v970 + 8);
                              }
                              v971 = sub_1CCFDED5C(v1002, 172, a11, v1039, v1040, v1042, *((uint64_t *)&v1042 + 1), v969, (uint64_t)v967, v968, v970);
                              goto LABEL_1474;
                            case 0xCu:
                            case 0x12u:
                              char v958 = sub_1CD7EBB8C(v648, a11, v1042, *((uint64_t *)&v1042 + 1), v1039, v1040);
                              uint64_t v953 = v958;
                              uint64_t v961 = *(void *)(v648 + 832);
                              if (v961) {
                                LOWORD(v961) = *(_WORD *)(v961 + 8);
                              }
                              uint64_t v955 = sub_1CCFDED5C(v1002, 171, a11, v1039, v1040, a6, (uint64_t)a7, v960, (uint64_t)v958, v959, v961);
                              goto LABEL_1466;
                            case 0xDu:
                            case 0x13u:
                              unint64_t v962 = sub_1CD7EBB8C(v648, a11, v1042, *((uint64_t *)&v1042 + 1), v1039, v1040);
                              uint64_t v953 = v962;
                              uint64_t v965 = *(void *)(v648 + 832);
                              if (v965) {
                                LOWORD(v965) = *(_WORD *)(v965 + 8);
                              }
                              uint64_t v955 = sub_1CCFDED5C(v1002, 172, a11, v1039, v1040, a6, (uint64_t)a7, v964, (uint64_t)v962, v963, v965);
                              goto LABEL_1466;
                            case 0xEu:
                            case 0xFu:
                            case 0x10u:
                              __break(1u);
                              goto LABEL_1499;
                            case 0x11u:
                              uint64_t v973 = *(void *)(v648 + 832);
                              if (v973) {
                                LOWORD(v973) = *(_WORD *)(v973 + 8);
                              }
                              uint64_t v953 = sub_1CCFDED5C(v1002, 173, a11, v1039, v1040, v1042, *((uint64_t *)&v1042 + 1), v949, a6, (uint64_t)a7, v973);
                              uint64_t v955 = sub_1CD7EBB8C(v1002, a11, (uint64_t)v953, v974, v1039, v1040);
                              goto LABEL_1466;
                            case 0x16u:
                              uint64_t v972 = *(void *)(v648 + 832);
                              if (v972) {
                                LOWORD(v972) = *(_WORD *)(v972 + 8);
                              }
                              v971 = sub_1CCFDED5C(v1002, 173, a11, v1039, v1040, v1042, *((uint64_t *)&v1042 + 1), v949, a6, (uint64_t)a7, v972);
LABEL_1474:
                              *(void *)&long long v1042 = v971;
                              DWORD2(v1042) = v956;
                              uint64_t v966 = a10;
                              break;
                            default:
                              unint64_t v950 = sub_1CD7EBB8C(v648, a11, a6, v712, v1039, v1040);
                              uint64_t v953 = v950;
                              uint64_t v954 = *(void *)(v648 + 832);
                              if (v954) {
                                LOWORD(v954) = *(_WORD *)(v954 + 8);
                              }
                              uint64_t v955 = sub_1CCFDED5C(v1002, 171, a11, v1039, v1040, v1042, *((uint64_t *)&v1042 + 1), v952, (uint64_t)v950, v951, v954);
LABEL_1466:
                              *(void *)&long long v1042 = v955;
                              DWORD2(v1042) = v956;
                              uint64_t v966 = a10;
                              if (!*(unsigned char *)(a10 + 12)) {
                                sub_1CCEF0788(*(void *)a10, (uint64_t)v953);
                              }
                              break;
                          }
                          if (sub_1CD3DD468((unsigned __int8 *)&v1043, v956, v957) == 2)
                          {
                            return (uint64_t *)v1042;
                          }
                          else
                          {
                            if (!*(unsigned char *)(v966 + 12)) {
                              sub_1CCEF0788(*(void *)a10, v1042);
                            }
                            v978 = (const char *)(200 - sub_1CD7879C8(a1, (char)v1039, v1040));
                            uint64_t v979 = *(void *)(v1002 + 832);
                            if (v979) {
                              __int16 v980 = *(_WORD *)(v979 + 8);
                            }
                            else {
                              __int16 v980 = 0;
                            }
                            uint64_t v344 = sub_1CD7F3564((llvm::APFloatBase *)v1002, v978, (uint64_t)a11, (llvm *)v1043, *((uint64_t *)&v1043 + 1), v1042, *((void **)&v1042 + 1), v980);
                            DWORD2(v1042) = v981;
                          }
                        }
                        return v344;
                      }
                      unsigned int v841 = *(_DWORD *)(v86 + 32);
                      DWORD2(v1044) = v841;
                      if (v841 > 0x40) {
                        operator new[]();
                      }
                      unint64_t v105 = *v433;
                      *(void *)&long long v1044 = *v433;
                      uint64_t v1001 = v832;
                      if (v1041 == 13 || v1041 == 10)
                      {
                        if (*(_DWORD *)(v86 + 32) > 0x40u) {
                          uint64_t v842 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v86 + 24));
                        }
                        else {
                          uint64_t v842 = __clz(__rbit64(~*v433));
                        }
                        unsigned int v1011 = v841;
                        unint64_t v1010 = v105;
                        llvm::APInt::operator+=((uint64_t)&v1010, 1uLL);
                        unsigned int v843 = v1011;
                        unint64_t v86 = v1010;
                        unsigned int v1011 = 0;
                        *(void *)&long long v1044 = v1010;
                        DWORD2(v1044) = v843;
                        if (v1041 == 13) {
                          unsigned int v844 = 12;
                        }
                        else {
                          unsigned int v844 = 11;
                        }
                        unint64_t v105 = v1010;
                      }
                      else
                      {
                        unsigned int v844 = v1041;
                        unsigned int v845 = *(_DWORD *)(v86 + 32);
                        if (v845 > 0x40)
                        {
                          uint64_t v842 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v86 + 24));
                        }
                        else
                        {
                          unsigned int v846 = __clz(__rbit64(*v433));
                          if (v845 >= v846) {
                            uint64_t v842 = v846;
                          }
                          else {
                            uint64_t v842 = v845;
                          }
                        }
                        unsigned int v843 = v841;
                        unint64_t v86 = v105;
                      }
                      if (v843 > 0x40)
                      {
                        llvm::APInt::lshrSlowCase((void **)&v1044, v842);
                        if (!v842) {
                          goto LABEL_1294;
                        }
                        if ((*(void *)(v105 + 8 * ((v843 - 1) >> 6)) >> (v843 - 1)))
                        {
                          if (v843 - llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v1044) + 1 >= 0x41)
                          {
LABEL_1295:
                            MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
                            goto LABEL_1296;
                          }
                          goto LABEL_1290;
                        }
                        int v847 = 0;
                        int64_t v848 = ((unint64_t)v843 + 63) >> 6;
                        do
                        {
                          BOOL v527 = v848-- < 1;
                          if (v527) {
                            break;
                          }
                          unint64_t v849 = *(void *)(v105 + 8 * v848);
                          v847 += __clz(v849);
                        }
                        while (!v849);
                        unsigned int v850 = v843 | 0xFFFFFFC0;
                        if ((v843 & 0x3F) == 0) {
                          unsigned int v850 = 0;
                        }
                        int v851 = v847 + v850;
                      }
                      else
                      {
                        if (v843 == v842)
                        {
                          unint64_t v105 = 0;
                          *(void *)&long long v1044 = 0;
                        }
                        else
                        {
                          unint64_t v105 = v86 >> v842;
                          *(void *)&long long v1044 = v86 >> v842;
                        }
                        if (!v842) {
                          goto LABEL_1293;
                        }
                        if ((v105 >> (v843 - 1)))
                        {
                          if (v843) {
                            int v851 = __clz(~(v105 << -(char)v843));
                          }
                          else {
                            int v851 = 0;
                          }
                        }
                        else
                        {
                          int v851 = v843 + __clz(v105) - 64;
                        }
                      }
                      if (v843 - v851 + 1 >= 0x41) {
                        goto LABEL_1293;
                      }
                      if (v843 <= 0x40)
                      {
                        uint64_t v852 = (uint64_t)(v105 << -(char)v843) >> -(char)v843;
LABEL_1291:
                        if ((*(unsigned int (**)(unsigned int *, uint64_t))(*(void *)a1 + 1080))(a1, v852)&& ((*(uint64_t (**)(llvm::APInt *, uint64_t, uint64_t, uint64_t))(*(void *)v1004+ 1456))(v1004, v31, v22, v842) & 1) == 0)
                        {
                          long long v935 = v1042;
                          unint64_t v936 = sub_1CD7EBF14(v1002, v842, a11, ShiftAmountTy, v1001, 0, 0);
                          uint64_t v939 = *(void *)(v1002 + 832);
                          if (v939) {
                            LOWORD(v939) = *(_WORD *)(v939 + 8);
                          }
                          uint64_t v940 = sub_1CCFDED5C(v1002, 177, a11, (llvm *)v31, v22, v935, *((uint64_t *)&v935 + 1), v938, (uint64_t)v936, v937, v939);
                          uint64_t v942 = v941;
                          uint64_t v943 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1044, a11, v31, v22, 0, 0);
                          unint64_t v948 = sub_1CD3DC614((void *)v1002, a11, (llvm *)v1043, *((uint64_t *)&v1043 + 1), (uint64_t)v940, v942, v943, v944, v844, 0, 0, 0, 0);
LABEL_1483:
                          int v814 = v948;
                          if (DWORD2(v1044) < 0x41) {
                            return v814;
                          }
                          uint64_t v815 = v1044;
                          if (!(void)v1044) {
                            return v814;
                          }
                          goto LABEL_1485;
                        }
LABEL_1293:
                        if (v843 < 0x41) {
                          goto LABEL_1296;
                        }
LABEL_1294:
                        if (!v105) {
                          goto LABEL_1296;
                        }
                        goto LABEL_1295;
                      }
LABEL_1290:
                      uint64_t v852 = *(void *)v105;
                      goto LABEL_1291;
                    }
LABEL_1217:
                    uint64_t v728 = *(void *)v723;
                    goto LABEL_1218;
                  }
                  uint64_t v438 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)a1, v31, v22, (uint64_t)ShiftAmountTy, *(_DWORD *)(a10 + 8) != 0);
                  uint64_t v440 = v439;
                  if (v1041 == 17)
                  {
                    uint64_t v660 = *(void *)(v435 + 80);
                    uint64_t v661 = *(unsigned int *)(v86 + 32);
                    if (v661 > 0x40)
                    {
                      unsigned int v675 = (int8x8_t *)*v433;
                      unint64_t v676 = v661 + 63;
                      if (memcmp((const void *)*v433, *(const void **)(v660 + 24), ((unint64_t)(v661 + 63) >> 3) & 0x3FFFFFF8))
                      {
                        goto LABEL_1018;
                      }
                      int v677 = 0;
                      unint64_t v678 = v676 >> 6;
                      uint64_t v679 = v676 >> 6;
                      do
                      {
                        BOOL v527 = v679-- < 1;
                        if (v527) {
                          break;
                        }
                        unint64_t v680 = (unint64_t)v675[v679];
                        v677 += __clz(v680);
                      }
                      while (!v680);
                      int v681 = 0;
                      int v682 = v661 | 0xFFFFFFC0;
                      if ((v661 & 0x3F) == 0) {
                        int v682 = 0;
                      }
                      int v664 = v677 + v682;
                      do
                      {
                        int8x8_t v683 = *v675++;
                        uint8x8_t v684 = (uint8x8_t)vcnt_s8(v683);
                        v684.i16[0] = vaddlv_u8(v684);
                        v681 += v684.i32[0];
                        --v678;
                      }
                      while (v678);
                      if (v681 != 1) {
                        goto LABEL_1018;
                      }
                    }
                    else
                    {
                      int8x8_t v662 = (int8x8_t)*v433;
                      if (*v433 != *(void *)(v660 + 24)) {
                        goto LABEL_1018;
                      }
                      uint8x8_t v663 = (uint8x8_t)vcnt_s8(v662);
                      v663.i16[0] = vaddlv_u8(v663);
                      if (v663.u32[0] != 1) {
                        goto LABEL_1018;
                      }
                      int v664 = v661 + __clz(*(void *)&v662) - 64;
                    }
                    uint64_t v685 = (v661 + ~v664);
                  }
                  else
                  {
                    if (v1041 != 22) {
                      goto LABEL_1018;
                    }
                    uint64_t v441 = *(unsigned int *)(v86 + 32);
                    uint64_t v442 = (void *)(v86 + 24);
                    if (v441 >= 0x41)
                    {
                      int v443 = 0;
                      int64_t v444 = (unint64_t)(v441 + 63) >> 6;
                      do
                      {
                        BOOL v527 = v444-- < 1;
                        if (v527) {
                          break;
                        }
                        unint64_t v445 = *(void *)(*v433 + 8 * v444);
                        v443 += __clz(v445);
                      }
                      while (!v445);
                      int v446 = v441 | 0xFFFFFFC0;
                      if ((v441 & 0x3F) == 0) {
                        int v446 = 0;
                      }
                      if ((v441 - v443 - v446) > 0x40) {
                        goto LABEL_1018;
                      }
                      uint64_t v442 = (void *)*v433;
                    }
                    if (*v442) {
                      goto LABEL_1018;
                    }
                    uint64_t v447 = *(void *)(v435 + 80);
                    uint64_t v448 = *(unsigned int *)(v447 + 32);
                    if (v448 > 0x40)
                    {
                      int v713 = 0;
                      unint64_t v714 = (unint64_t)(v448 + 63) >> 6;
                      uint64_t v715 = v714;
                      do
                      {
                        BOOL v527 = v715-- < 1;
                        if (v527) {
                          break;
                        }
                        unint64_t v716 = *(void *)(*(void *)(v447 + 24) + 8 * v715);
                        v713 += __clz(v716);
                      }
                      while (!v716);
                      int v717 = 0;
                      int v718 = v448 | 0xFFFFFFC0;
                      if ((v448 & 0x3F) == 0) {
                        int v718 = 0;
                      }
                      int v451 = v713 + v718;
                      int v719 = *(int8x8_t **)(v447 + 24);
                      do
                      {
                        int8x8_t v720 = *v719++;
                        uint8x8_t v721 = (uint8x8_t)vcnt_s8(v720);
                        v721.i16[0] = vaddlv_u8(v721);
                        v717 += v721.i32[0];
                        --v714;
                      }
                      while (v714);
                      if (v717 != 1) {
                        goto LABEL_1018;
                      }
                    }
                    else
                    {
                      unint64_t v449 = *(void *)(v447 + 24);
                      uint8x8_t v450 = (uint8x8_t)vcnt_s8((int8x8_t)v449);
                      v450.i16[0] = vaddlv_u8(v450);
                      if (v450.u32[0] != 1) {
                        goto LABEL_1018;
                      }
                      int v451 = v448 + __clz(v449) - 64;
                    }
                    uint64_t v685 = (v448 + ~v451);
                  }
                  if ((*(uint64_t (**)(llvm::APInt *, uint64_t, uint64_t, uint64_t))(*(void *)v1004 + 1456))(v1004, v31, v22, v685))goto LABEL_1018; {
                  long long v729 = v1043;
                  }
                  long long v730 = v1042;
                  uint64_t v731 = sub_1CD7EBF14(v1002, v685, a11, v438, v440, 0, 0);
                  uint64_t v734 = *(void *)(v1002 + 832);
                  if (v734) {
                    LOWORD(v734) = *(_WORD *)(v734 + 8);
                  }
                  int v144 = sub_1CCFDED5C(v1002, 177, a11, (llvm *)v31, v22, v730, *((uint64_t *)&v730 + 1), v733, (uint64_t)v731, v732, v734);
                  int v145 = v735;
                  uint64_t v736 = *(void *)(v1002 + 832);
                  if (v736) {
                    __int16 v147 = *(_WORD *)(v736 + 8);
                  }
                  else {
                    __int16 v147 = 0;
                  }
                  unint64_t v149 = (llvm::APFloatBase *)v1002;
                  uint64_t v148 = (uint64_t)a11;
                  uint64_t v143 = *((void *)&v729 + 1);
                  uint64_t v142 = (llvm *)v729;
                  return sub_1CD7F3564(v149, (const char *)0xC9, v148, v142, v143, (uint64_t)v144, v145, v147);
                }
                uint64_t v22 = v416;
                uint64_t v423 = *(void *)(v416 + 80);
                long long v1044 = *(_OWORD *)*(void *)(v416 + 40);
                unsigned int v424 = sub_1CD3E12F4((unsigned __int8 *)&v1044, v417, v418);
                unsigned int v425 = v424;
                if (v1041 - 18 > 3)
                {
                  DWORD2(v1044) = v424;
                  if (v424 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v1044);
                  }
                  *(void *)&long long v1049 = 0;
                  unsigned int v426 = DWORD2(v1044);
                  DWORD2(v1049) = DWORD2(v1044);
                  DWORD2(v1044) = v424;
                  if (v424) {
                    int v429 = (llvm *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v424);
                  }
                  else {
                    int v429 = 0;
                  }
                  int v427 = 0;
                  *(void *)&long long v1044 = v429;
                  uint64_t v31 = (uint64_t)v429;
                  int64_t v1035 = (int64_t)v429;
                  unsigned int v425 = DWORD2(v1044);
                }
                else
                {
                  DWORD2(v1044) = v424;
                  if (v424 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v1044);
                  }
                  unsigned int v426 = v424;
                  *(void *)&long long v1044 = 1 << (v424 - 1);
                  int v427 = (void *)v1044;
                  *(void *)&long long v1049 = v1044;
                  DWORD2(v1049) = v424;
                  DWORD2(v1044) = v424;
                  if (v424) {
                    unint64_t v428 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v424;
                  }
                  else {
                    unint64_t v428 = 0;
                  }
                  *(void *)&long long v1044 = v428 & ~(1 << (v424 - 1));
                  uint64_t v31 = v1044;
                  int64_t v1035 = v1044;
                }
                LODWORD(v1036) = v425;
                uint64_t v1005 = (const void **)(v423 + 24);
                unsigned int v430 = v1041;
                if (v1041 == 19 || v1041 == 11)
                {
                  unint64_t v86 = *(unsigned int *)(v423 + 32);
                  if (v86 > 0x40)
                  {
                    uint64_t v431 = *v1005;
                    if (!memcmp(*v1005, v427, ((v86 + 63) >> 3) & 0x3FFFFFF8)) {
                      goto LABEL_635;
                    }
                  }
                  else
                  {
                    uint64_t v431 = *v1005;
                    if (*v1005 == v427) {
                      goto LABEL_635;
                    }
                  }
                  if ((_BYTE)v1043)
                  {
                    if (v1043 - 15 < 0x9C) {
                      goto LABEL_627;
                    }
LABEL_605:
                    uint64_t v999 = v423;
                    uint64_t v452 = v31;
                    unsigned int v453 = v426;
                    unsigned int v1031 = v86;
                    uint64_t v454 = v427;
                    if (v86 > 0x40) {
                      operator new[]();
                    }
                    uint64_t v1030 = v431;
                    llvm::APInt::operator-=((uint64_t)&v1030, 1uLL);
                    unsigned int v459 = v1031;
                    DWORD2(v1044) = v1031;
                    *(void *)&long long v1044 = v1030;
                    unsigned int v1031 = 0;
                    if (v1041 == 19) {
                      unsigned int v460 = 18;
                    }
                    else {
                      unsigned int v460 = 10;
                    }
                    if (*(int *)(a10 + 8) >= 2
                      && ((*(unsigned int *)((char *)&a1[23 * v460 + 42897]
                                           + (((unint64_t)v1043 >> 1) & 0x7C)) >> (4 * (v1043 & 7))) & 0xF) != 0)
                    {
                      if (v459 < 0x41)
                      {
LABEL_626:
                        unsigned int v430 = v1041;
                        int v427 = v454;
                        unsigned int v426 = v453;
                        uint64_t v31 = v452;
                        uint64_t v423 = v999;
                        goto LABEL_627;
                      }
                    }
                    else
                    {
                      if ((*(unsigned char *)(v22 + 26) & 8) == 0) {
                        goto LABEL_650;
                      }
                      if (v459 <= 0x40)
                      {
                        if ((*(unsigned int (**)(unsigned int *, uint64_t))(*(void *)a1 + 1080))(a1, (uint64_t)((void)v1030 << -(char)v459) >> -(char)v459))
                        {
                          goto LABEL_650;
                        }
                        goto LABEL_626;
                      }
                    }
                    if (v1030) {
                      MEMORY[0x1D25D9CB0]();
                    }
                    goto LABEL_626;
                  }
                  if ((*(_DWORD *)(*((void *)&v1043 + 1) + 8) & 0xFE) != 0x12) {
                    goto LABEL_605;
                  }
                }
LABEL_627:
                if (v430 != 21 && v430 != 13) {
                  goto LABEL_656;
                }
                unint64_t v86 = *(unsigned int *)(v423 + 32);
                if (v86 > 0x40)
                {
                  int v461 = *v1005;
                  if (memcmp(*v1005, (const void *)v31, ((v86 + 63) >> 3) & 0x3FFFFFF8)) {
                    goto LABEL_631;
                  }
                }
                else
                {
                  int v461 = *v1005;
                  if (*v1005 != (const void *)v31)
                  {
LABEL_631:
                    if ((_BYTE)v1043)
                    {
                      if (v1043 - 15 < 0x9C) {
                        goto LABEL_656;
                      }
                      goto LABEL_637;
                    }
                    if ((*(_DWORD *)(*((void *)&v1043 + 1) + 8) & 0xFE) != 0x12)
                    {
LABEL_637:
                      uint64_t v1000 = v423;
                      uint64_t v463 = v31;
                      unsigned int v464 = v426;
                      unsigned int v1029 = v86;
                      unint64_t v465 = v427;
                      if (v86 > 0x40) {
                        operator new[]();
                      }
                      uint64_t v1028 = v461;
                      llvm::APInt::operator+=((uint64_t)&v1028, 1uLL);
                      unsigned int v466 = v1029;
                      DWORD2(v1044) = v1029;
                      *(void *)&long long v1044 = v1028;
                      unsigned int v1029 = 0;
                      if (v1041 == 21) {
                        unsigned int v460 = 20;
                      }
                      else {
                        unsigned int v460 = 12;
                      }
                      if (*(int *)(a10 + 8) >= 2
                        && ((*(unsigned int *)((char *)&a1[23 * v460 + 42897]
                                             + (((unint64_t)v1043 >> 1) & 0x7C)) >> (4 * (v1043 & 7))) & 0xF) != 0)
                      {
                        if (v466 < 0x41) {
                          goto LABEL_655;
                        }
LABEL_653:
                        if (v1028) {
                          MEMORY[0x1D25D9CB0]();
                        }
                        goto LABEL_655;
                      }
                      if ((*(unsigned char *)(v22 + 26) & 8) != 0)
                      {
                        if (v466 > 0x40) {
                          goto LABEL_653;
                        }
                        if (!(*(unsigned int (**)(unsigned int *, uint64_t))(*(void *)a1 + 1080))(a1, (uint64_t)((void)v1028 << -(char)v466) >> -(char)v466))
                        {
LABEL_655:
                          unsigned int v430 = v1041;
                          int v427 = v465;
                          unsigned int v426 = v464;
                          uint64_t v31 = v463;
                          uint64_t v423 = v1000;
                          goto LABEL_656;
                        }
                      }
LABEL_650:
                      long long v467 = v1043;
                      long long v468 = v1042;
                      unint64_t v469 = (uint64_t *)(*(void *)(a6 + 40) + 16 * a7);
                      uint64_t v470 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1044, a11, *v469, v469[1], 0, 0);
                      uint64_t v344 = sub_1CD3DC614((void *)v1002, a11, (llvm *)v467, *((uint64_t *)&v467 + 1), v468, *((uint64_t *)&v468 + 1), v470, v471, v460, 0, 0, 0, 0);
                      if (DWORD2(v1044) >= 0x41 && (void)v1044)
                      {
                        uint64_t v472 = v344;
                        MEMORY[0x1D25D9CB0](v1044, 0x1000C8000313F17);
                        uint64_t v344 = v472;
                      }
LABEL_770:
                      if (v425 >= 0x41 && v1035)
                      {
                        uint64_t v524 = v344;
                        MEMORY[0x1D25D9CB0](v1035, 0x1000C8000313F17);
                        uint64_t v344 = v524;
                      }
                      if (DWORD2(v1049) < 0x41) {
                        return v344;
                      }
                      int64_t v346 = v1049;
                      if (!(void)v1049) {
                        return v344;
                      }
LABEL_775:
                      uint64_t v525 = v344;
                      MEMORY[0x1D25D9CB0](v346, 0x1000C8000313F17);
                      return v525;
                    }
LABEL_656:
                    if (v430 == 20 || v430 == 12)
                    {
                      unint64_t v86 = *(unsigned int *)(v423 + 32);
                      if (v86 > 0x40)
                      {
                        uint64_t v473 = *v1005;
                        if (!memcmp(*v1005, v427, ((v86 + 63) >> 3) & 0x3FFFFFF8)) {
                          goto LABEL_696;
                        }
                      }
                      else
                      {
                        uint64_t v473 = *v1005;
                        if (*v1005 == v427) {
                          goto LABEL_696;
                        }
                      }
                      if ((_BYTE)v1043) {
                        BOOL v474 = v1043 - 15 < 0x9C;
                      }
                      else {
                        BOOL v474 = (*(_DWORD *)(*((void *)&v1043 + 1) + 8) & 0xFE) == 18;
                      }
                      if (!v474 || *(int *)(a10 + 8) <= 1)
                      {
                        if (v86 > 0x40)
                        {
                          if (!memcmp(v473, (const void *)v31, ((v86 + 63) >> 3) & 0x3FFFFFF8)) {
                            goto LABEL_712;
                          }
                        }
                        else if (v473 == (const void *)v31)
                        {
                          goto LABEL_712;
                        }
                        unsigned int v1027 = v426;
                        if (v426 > 0x40) {
                          operator new[]();
                        }
                        __s2 = v427;
                        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
                        unint64_t v86 = v1027;
                        int v480 = __s2;
                        unsigned int v1027 = 0;
                        uint64_t v481 = *(unsigned int *)(v423 + 32);
                        if (v481 > 0x40) {
                          BOOL v482 = memcmp(*v1005, __s2, ((unint64_t)(v481 + 63) >> 3) & 0x3FFFFFF8) == 0;
                        }
                        else {
                          BOOL v482 = *v1005 == __s2;
                        }
                        char v483 = v482;
                        if (v86 >= 0x41)
                        {
                          if (v480)
                          {
                            MEMORY[0x1D25D9CB0](v480, 0x1000C8000313F17);
                            if (v1027 >= 0x41)
                            {
                              if (__s2) {
                                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                              }
                            }
                          }
                        }
                        if (v483)
                        {
                          long long v665 = v1043;
                          long long v666 = v1042;
                          uint64_t v667 = (uint64_t *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
                          uint64_t v668 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1049, a11, *v667, v667[1], 0, 0);
                          uint64_t v462 = (uint64_t)sub_1CD3DC614((void *)v1002, a11, (llvm *)v665, *((uint64_t *)&v665 + 1), v666, *((uint64_t *)&v666 + 1), v668, v669, 0x11u, 0, 0, 0, 0);
                          goto LABEL_769;
                        }
                        unsigned int v430 = v1041;
                      }
                    }
                    if (v430 != 18 && v430 != 10) {
                      goto LABEL_726;
                    }
                    unint64_t v86 = *(unsigned int *)(v423 + 32);
                    if (v86 > 0x40)
                    {
                      unsigned int v484 = (void *)*v1005;
                      if (memcmp(*v1005, (const void *)v31, ((v86 + 63) >> 3) & 0x3FFFFFF8))
                      {
LABEL_693:
                        if ((_BYTE)v1043) {
                          BOOL v485 = v1043 - 15 < 0x9C;
                        }
                        else {
                          BOOL v485 = (*(_DWORD *)(*((void *)&v1043 + 1) + 8) & 0xFE) == 18;
                        }
                        if (v485 && *(int *)(a10 + 8) > 1) {
                          goto LABEL_726;
                        }
                        if (v86 > 0x40)
                        {
                          if (memcmp(v484, v427, ((v86 + 63) >> 3) & 0x3FFFFFF8))
                          {
LABEL_702:
                            unsigned int v1025 = v425;
                            uint64_t v1024 = (void *)v31;
                            llvm::APInt::operator-=((uint64_t)&v1024, 1uLL);
                            unint64_t v86 = v1025;
                            uint64_t v490 = v1024;
                            unsigned int v1025 = 0;
                            uint64_t v491 = *(unsigned int *)(v423 + 32);
                            if (v491 > 0x40) {
                              BOOL v492 = memcmp(*v1005, v1024, ((unint64_t)(v491 + 63) >> 3) & 0x3FFFFFF8) == 0;
                            }
                            else {
                              BOOL v492 = *v1005 == v1024;
                            }
                            char v493 = v492;
                            if (v86 >= 0x41)
                            {
                              if (v490)
                              {
                                MEMORY[0x1D25D9CB0](v490, 0x1000C8000313F17);
                                if (v1025 >= 0x41)
                                {
                                  if (v1024) {
                                    MEMORY[0x1D25D9CB0](v1024, 0x1000C8000313F17);
                                  }
                                }
                              }
                            }
                            if (v493)
                            {
                              long long v670 = v1043;
                              long long v671 = v1042;
                              BOOL v672 = (uint64_t *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
                              uint64_t v673 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1035, a11, *v672, v672[1], 0, 0);
                              uint64_t v344 = sub_1CD3DC614((void *)v1002, a11, (llvm *)v670, *((uint64_t *)&v670 + 1), v671, *((uint64_t *)&v671 + 1), v673, v674, 0x11u, 0, 0, 0, 0);
                              unsigned int v425 = v1036;
                              goto LABEL_770;
                            }
                            unsigned int v430 = v1041;
LABEL_726:
                            if (v430 != 22 && v430 != 17) {
                              goto LABEL_776;
                            }
                            uint64_t v494 = *(unsigned int *)(v423 + 32);
                            if (v494 > 0x40)
                            {
                              int v495 = 0;
                              int64_t v496 = (unint64_t)(v494 + 63) >> 6;
                              do
                              {
                                BOOL v527 = v496-- < 1;
                                if (v527) {
                                  break;
                                }
                                unint64_t v497 = *((void *)*v1005 + v496);
                                v495 += __clz(v497);
                              }
                              while (!v497);
                              int v498 = v494 | 0xFFFFFFC0;
                              if ((v494 & 0x3F) == 0) {
                                int v498 = 0;
                              }
                              if (v495 + v498 != v494) {
                                goto LABEL_737;
                              }
                            }
                            else if (*v1005)
                            {
                              goto LABEL_737;
                            }
                            uint64_t v462 = (uint64_t)sub_1CD80F690((llvm *)v1043, *((uint64_t *)&v1043 + 1), v1042, SDWORD2(v1042), a6, (uint64_t)a7, v430, *(void **)(a10 + 16), a11);
                            if (v462) {
                              goto LABEL_769;
                            }
LABEL_737:
                            uint64_t v499 = *(void *)(v22 + 80);
                            uint64_t v500 = (llvm::APInt *)(v499 + 24);
                            uint64_t v501 = *(unsigned int *)(v499 + 32);
                            if (v501 > 0x40)
                            {
                              int v505 = 0;
                              int64_t v506 = (unint64_t)(v501 + 63) >> 6;
                              do
                              {
                                BOOL v527 = v506-- < 1;
                                if (v527) {
                                  break;
                                }
                                unint64_t v507 = *(void *)(*(void *)v500 + 8 * v506);
                                v505 += __clz(v507);
                              }
                              while (!v507);
                              int v508 = v501 | 0xFFFFFFC0;
                              if ((v501 & 0x3F) == 0) {
                                int v508 = 0;
                              }
                              BOOL v503 = v505 + v508 == v501;
                              BOOL v1023 = v503;
                              BOOL v504 = llvm::APInt::countTrailingOnesSlowCase(v500) == v501;
                            }
                            else
                            {
                              uint64_t v502 = *(void *)v500;
                              BOOL v503 = *(void *)v500 == 0;
                              BOOL v1023 = v503;
                              if (!v501)
                              {
LABEL_751:
                                uint64_t v510 = *(void *)(v1042 + 48);
                                if (v510)
                                {
                                  int v511 = 1;
                                  do
                                  {
                                    if (*(_DWORD *)(v510 + 8) == DWORD2(v1042))
                                    {
                                      if (!v511) {
                                        goto LABEL_776;
                                      }
                                      --v511;
                                    }
                                    uint64_t v510 = *(void *)(v510 + 32);
                                  }
                                  while (v510);
                                  if (!v511)
                                  {
                                    uint64_t v1022 = v1002;
                                    *(void *)&long long v1044 = &v1042;
                                    *((void *)&v1044 + 1) = v1002;
                                    *(void *)&long long v1045 = a11;
                                    *((void *)&v1045 + 1) = &v1039;
                                    uint64_t v1046 = &v1023;
                                    uint64_t v1047 = &v1043;
                                    v1048 = &v1041;
                                    unint64_t v1032 = 0;
                                    LODWORD(v1033) = 0;
                                    unint64_t v1020 = 0;
                                    LODWORD(v1021) = 0;
                                    if (sub_1CD012D74(&v1022, v1042, *((BOOL *)&v1042 + 1), (uint64_t)&v1032, (uint64_t)&v1020))
                                    {
                                      uint64_t v512 = v1032;
                                      uint64_t v513 = v1033;
                                      uint64_t v514 = v1020;
                                      uint64_t v515 = v1021;
LABEL_768:
                                      uint64_t v462 = (uint64_t)sub_1CD013030((uint64_t)&v1044, v512, v513, (uint64_t)v514, v515);
                                      goto LABEL_769;
                                    }
                                    if (*(unsigned __int16 *)(v1042 + 24) - 171 <= 1)
                                    {
                                      uint64_t v1018 = 0;
                                      LODWORD(v1019) = 0;
                                      uint64_t v1016 = 0;
                                      LODWORD(v1017) = 0;
                                      uint64_t v1014 = 0;
                                      LODWORD(v1015) = 0;
                                      uint64_t v1012 = 0;
                                      LODWORD(v1013) = 0;
                                      if (sub_1CD012D74(&v1022, **(void **)(v1042 + 32), *(void *)(*(void *)(v1042 + 32) + 8), (uint64_t)&v1018, (uint64_t)&v1014))
                                      {
                                        if (sub_1CD012D74(&v1022, *(void *)(*(void *)(v1042 + 32) + 40), *(void *)(*(void *)(v1042 + 32) + 48), (uint64_t)&v1016, (uint64_t)&v1012))
                                        {
                                          uint64_t v517 = *(void *)(v1002 + 832);
                                          if (v517) {
                                            LOWORD(v517) = *(_WORD *)(v517 + 8);
                                          }
                                          uint64_t v519 = sub_1CCFDED5C(v1002, *(unsigned __int16 *)(v1042 + 24), a11, v1039, v1040, v1018, v1019, v516, v1016, v1017, v517);
                                          uint64_t v521 = v520;
                                          uint64_t v522 = *(void *)(v1002 + 832);
                                          if (v522) {
                                            LOWORD(v522) = *(_WORD *)(v522 + 8);
                                          }
                                          uint64_t v514 = sub_1CCFDED5C(v1002, *(unsigned __int16 *)(v1042 + 24), a11, v1039, v1040, v1014, v1015, v518, v1012, v1013, v522);
                                          uint64_t v515 = v523;
                                          uint64_t v512 = (uint64_t)v519;
                                          uint64_t v513 = v521;
                                          goto LABEL_768;
                                        }
                                      }
                                    }
                                  }
                                }
LABEL_776:
                                if ((_BYTE)v1043) {
                                  BOOL v526 = v1043 - 15 < 0x9C;
                                }
                                else {
                                  BOOL v526 = (*(_DWORD *)(*((void *)&v1043 + 1) + 8) & 0xFE) == 18;
                                }
                                BOOL v527 = !v526 || *(_DWORD *)(a10 + 8) <= 1;
                                if (!v527)
                                {
LABEL_1174:
                                  if (v426 >= 0x41 && v427) {
                                    MEMORY[0x1D25D9CB0](v427, 0x1000C8000313F17);
                                  }
                                  unint64_t v105 = a6;
                                  goto LABEL_546;
                                }
                                switch(v1041)
                                {
                                  case 0xAu:
                                    unsigned int v528 = *(_DWORD *)(v423 + 32);
                                    if (v528 <= 0x40)
                                    {
                                      unsigned int v529 = *v1005;
                                      uint64_t v530 = ~(-1 << (v528 - 1));
                                      goto LABEL_912;
                                    }
                                    unsigned int v818 = v528 - 1;
                                    if ((*((void *)*v1005 + ((v528 - 1) >> 6)) >> (v528 - 1))) {
                                      goto LABEL_1174;
                                    }
                                    int v831 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v1005);
                                    goto LABEL_1208;
                                  case 0xBu:
                                    unsigned int v645 = *(_DWORD *)(v423 + 32);
                                    if (v645 > 0x40)
                                    {
                                      unsigned int v818 = v645 - 1;
                                      if (((*((void *)*v1005 + ((v645 - 1) >> 6)) >> (v645 - 1)) & 1) == 0) {
                                        goto LABEL_1174;
                                      }
                                      int v831 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1005);
LABEL_1208:
                                      if (v831 != v818) {
                                        goto LABEL_1174;
                                      }
                                    }
                                    else
                                    {
                                      unsigned int v529 = *v1005;
                                      uint64_t v530 = 1 << (v645 - 1);
LABEL_912:
                                      if (v529 != (const void *)v530) {
                                        goto LABEL_1174;
                                      }
                                    }
                                    uint64_t v635 = *((void *)&v1043 + 1);
                                    uint64_t v634 = (llvm *)v1043;
                                    uint64_t v637 = *((void *)&v1042 + 1);
                                    uint64_t v636 = v1042;
                                    uint64_t v646 = *(void *)(a6 + 40) + 16 * a7;
                                    int64_t v639 = (void *)v1002;
                                    unint64_t v640 = a11;
                                    uint64_t v641 = (uint64_t)sub_1CD7EBF14(v1002, 0, a11, *(llvm **)v646, *(void *)(v646 + 8), 0, 0);
                                    uint64_t v643 = v647;
                                    unsigned int v644 = 20;
                                    goto LABEL_914;
                                  case 0xCu:
                                    unsigned int v630 = *(_DWORD *)(v423 + 32);
                                    if (v630 <= 0x40)
                                    {
                                      v631 = *v1005;
                                      uint64_t v632 = 1 << (v630 - 1);
                                      goto LABEL_908;
                                    }
                                    unsigned int v816 = v630 - 1;
                                    if (((*((void *)*v1005 + ((v630 - 1) >> 6)) >> (v630 - 1)) & 1) == 0) {
                                      goto LABEL_1174;
                                    }
                                    int v817 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1005);
                                    goto LABEL_1212;
                                  case 0xDu:
                                    unsigned int v633 = *(_DWORD *)(v423 + 32);
                                    if (v633 > 0x40)
                                    {
                                      unsigned int v816 = v633 - 1;
                                      if ((*((void *)*v1005 + ((v633 - 1) >> 6)) >> (v633 - 1))) {
                                        goto LABEL_1174;
                                      }
                                      int v817 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v1005);
LABEL_1212:
                                      if (v817 != v816) {
                                        goto LABEL_1174;
                                      }
                                    }
                                    else
                                    {
                                      v631 = *v1005;
                                      uint64_t v632 = ~(-1 << (v633 - 1));
LABEL_908:
                                      if (v631 != (const void *)v632) {
                                        goto LABEL_1174;
                                      }
                                    }
                                    uint64_t v635 = *((void *)&v1043 + 1);
                                    uint64_t v634 = (llvm *)v1043;
                                    uint64_t v637 = *((void *)&v1042 + 1);
                                    uint64_t v636 = v1042;
                                    uint64_t v638 = *(void *)(a6 + 40) + 16 * a7;
                                    int64_t v639 = (void *)v1002;
                                    unint64_t v640 = a11;
                                    uint64_t v641 = sub_1CD787918(v1002, a11, *(void *)v638, *(void *)(v638 + 8), 0, 0);
                                    uint64_t v643 = v642;
                                    unsigned int v644 = 18;
LABEL_914:
                                    uint64_t v462 = (uint64_t)sub_1CD3DC614(v639, v640, v634, v635, v636, v637, v641, v643, v644, 0, 0, 0, 0);
                                    goto LABEL_769;
                                  default:
                                    goto LABEL_1174;
                                }
                              }
                              BOOL v504 = v502 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v501;
                            }
                            int v509 = v504;
                            if (!v503 && !v509) {
                              goto LABEL_776;
                            }
                            goto LABEL_751;
                          }
                        }
                        else if (v484 != v427)
                        {
                          goto LABEL_702;
                        }
LABEL_712:
                        uint64_t v462 = (uint64_t)sub_1CD3DC614((void *)v1002, a11, (llvm *)v1043, *((uint64_t *)&v1043 + 1), v1042, *((uint64_t *)&v1042 + 1), a6, (uint64_t)a7, 0x16u, 0, 0, 0, 0);
                        goto LABEL_769;
                      }
                    }
                    else
                    {
                      unsigned int v484 = (void *)*v1005;
                      if (*v1005 != (const void *)v31) {
                        goto LABEL_693;
                      }
                    }
LABEL_696:
                    uint64_t v462 = (uint64_t)sub_1CD7EBF14(v1002, 0, a11, (llvm *)v1043, *((uint64_t *)&v1043 + 1), 0, 0);
                    goto LABEL_769;
                  }
                }
LABEL_635:
                uint64_t v462 = sub_1CD7EBCBC(v1002, 1, a11, v1043, *((uint64_t *)&v1043 + 1), (char)v1039, v1040);
LABEL_769:
                uint64_t v344 = (uint64_t *)v462;
                goto LABEL_770;
              }
              uint64_t v390 = *(llvm::Type **)v390;
            }
            if (*(llvm::Type **)v390 != (llvm::Type *)((char *)v391 - 1)) {
              goto LABEL_544;
            }
            uint64_t v397 = *(void *)(a6 + 80);
            unsigned int v398 = *(_DWORD *)(v397 + 32);
            if (v398)
            {
              int v407 = (llvm::APInt *)(v397 + 24);
              if (v398 > 0x40)
              {
                if (llvm::APInt::countTrailingOnesSlowCase(v407) != v398) {
                  goto LABEL_544;
                }
              }
              else if (*(void *)v407 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v398)
              {
                goto LABEL_544;
              }
            }
            long long v399 = v1043;
            uint64_t v400 = *(uint64_t **)(v1042 + 32);
            uint64_t v401 = v25;
            uint64_t v402 = *v400;
            uint64_t v403 = v400[1];
            int v405 = sub_1CD7EBF14((uint64_t)v401, 0, a11, v1039, v1040, 0, 0);
            if (v1041 == 17) {
              unsigned int v406 = 20;
            }
            else {
              unsigned int v406 = 19;
            }
            return sub_1CD3DC614(v401, a11, (llvm *)v399, *((uint64_t *)&v399 + 1), v402, v403, (uint64_t)v405, v404, v406, 0, 0, 0, 0);
          }
          sub_1CD7F121C((uint64_t)v25, **(void **)(v1042 + 32), *(void *)(*(void *)(v1042 + 32) + 8), 0, (uint64_t)&v1044);
          sub_1CD7F121C((uint64_t)v25, *(void *)(*(void *)(v1042 + 32) + 40), *(void *)(*(void *)(v1042 + 32) + 48), 0, (uint64_t)&v1049);
          if (DWORD2(v1044) > 0x40)
          {
            __int32 v373 = 0;
            unint64_t v374 = ((unint64_t)DWORD2(v1044) + 63) >> 6;
            int v375 = (int8x8_t *)v1044;
            do
            {
              int8x8_t v376 = *v375++;
              uint8x8_t v377 = (uint8x8_t)vcnt_s8(v376);
              v377.i16[0] = vaddlv_u8(v377);
              v373 += v377.i32[0];
              --v374;
            }
            while (v374);
          }
          else
          {
            uint8x8_t v372 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v1044);
            v372.i16[0] = vaddlv_u8(v372);
            __int32 v373 = v372.i32[0];
          }
          if (DWORD2(v1044) - v373 == 1)
          {
            unsigned int v378 = v1051;
            if (v1051 > 0x40)
            {
              unsigned int v380 = 0;
              unint64_t v381 = ((unint64_t)v1051 + 63) >> 6;
              int v382 = v1050;
              do
              {
                int8x8_t v383 = *v382++;
                uint8x8_t v384 = (uint8x8_t)vcnt_s8(v383);
                v384.i16[0] = vaddlv_u8(v384);
                v380 += v384.i32[0];
                --v381;
              }
              while (v381);
            }
            else
            {
              uint8x8_t v379 = (uint8x8_t)vcnt_s8((int8x8_t)v1050);
              v379.i16[0] = vaddlv_u8(v379);
              unsigned int v380 = v379.i32[0];
            }
            if (v380 >= 2)
            {
              uint64_t v344 = sub_1CD3DC614(v25, a11, (llvm *)v1043, *((uint64_t *)&v1043 + 1), **(void **)(v1042 + 32), *(void *)(*(void *)(v1042 + 32) + 8), a6, (uint64_t)a7, v1041, 0, 0, 0, 0);
              if (v1051 >= 0x41 && v1050)
              {
                int v786 = v344;
                MEMORY[0x1D25D9CB0](v1050, 0x1000C8000313F17);
                uint64_t v344 = v786;
              }
              if (DWORD2(v1049) >= 0x41 && (void)v1049)
              {
                int64_t v787 = v344;
                MEMORY[0x1D25D9CB0](v1049, 0x1000C8000313F17);
                uint64_t v344 = v787;
              }
              if (DWORD2(v1045) >= 0x41 && (void)v1045)
              {
                unint64_t v788 = v344;
                MEMORY[0x1D25D9CB0](v1045, 0x1000C8000313F17);
                uint64_t v344 = v788;
              }
              if (DWORD2(v1044) < 0x41) {
                return v344;
              }
              int64_t v346 = v1044;
              if (!(void)v1044) {
                return v344;
              }
              goto LABEL_775;
            }
          }
          else
          {
            unsigned int v378 = v1051;
          }
          if (v378 >= 0x41 && v1050) {
            MEMORY[0x1D25D9CB0](v1050, 0x1000C8000313F17);
          }
          if (DWORD2(v1049) >= 0x41 && (void)v1049) {
            MEMORY[0x1D25D9CB0](v1049, 0x1000C8000313F17);
          }
          if (DWORD2(v1045) >= 0x41 && (void)v1045) {
            MEMORY[0x1D25D9CB0](v1045, 0x1000C8000313F17);
          }
          if (DWORD2(v1044) >= 0x41 && (void)v1044) {
            MEMORY[0x1D25D9CB0](v1044, 0x1000C8000313F17);
          }
        }
LABEL_511:
        unsigned int v370 = v1041;
        goto LABEL_512;
      }
LABEL_232:
      uint64_t v182 = *(void *)(a6 + 80);
      uint64_t v183 = *(unsigned int *)(v182 + 32);
      if (v183 > 0x40)
      {
        int v184 = 0;
        int64_t v185 = (unint64_t)(v183 + 63) >> 6;
        do
        {
          BOOL v527 = v185-- < 1;
          if (v527) {
            break;
          }
          unint64_t v186 = *(void *)(*(void *)(v182 + 24) + 8 * v185);
          v184 += __clz(v186);
        }
        while (!v186);
        int v187 = v183 | 0xFFFFFFC0;
        if ((v183 & 0x3F) == 0) {
          int v187 = 0;
        }
        if (v184 + v187 != v183 - 1) {
          goto LABEL_475;
        }
      }
      else if (*(void *)(v182 + 24) != 1)
      {
        goto LABEL_475;
      }
      unint64_t v188 = *((void *)&v1042 + 1);
      if (v171 == 201)
      {
        unsigned int v189 = (unsigned int *)v131[4];
        unint64_t v131 = *(uint64_t **)v189;
        unint64_t v188 = *((void *)&v1042 + 1) & 0xFFFFFFFF00000000 | v189[2];
        int v171 = *(unsigned __int16 *)(*(void *)v189 + 24);
      }
      if (v171 == 173)
      {
        uint64_t v190 = (uint64_t *)v131[4];
        uint64_t v191 = *v190;
        if (*(_WORD *)(*v190 + 24) == 193)
        {
          uint64_t v192 = v190[5];
          if (*(_WORD *)(v192 + 24) == 193)
          {
            unint64_t v86 = v190[1];
            uint64_t v193 = v190[6];
            if (*(unsigned char *)(v131[5] + 16 * v188) == 2
              || (int v350 = (void *)(*(void *)(**(void **)(v191 + 32) + 40)
                                  + 16 * *(unsigned int *)(*(void *)(v191 + 32) + 8)),
                  sub_1CD7879C8(a1, *v350, v350[1]) == 1)
              && (int v351 = (void *)(*(void *)(**(void **)(v192 + 32) + 40)
                                  + 16 * *(unsigned int *)(*(void *)(v192 + 32) + 8)),
                  sub_1CD7879C8(a1, *v351, v351[1]) == 1))
            {
              if (v1041 == 17) {
                unsigned int v194 = 22;
              }
              else {
                unsigned int v194 = 17;
              }
              unsigned int v1041 = v194;
              return sub_1CD3DC614(v25, a11, (llvm *)v1043, *((uint64_t *)&v1043 + 1), v191, v86, v192, v193, v194, 0, 0, 0, 0);
            }
          }
        }
        int v171 = *((unsigned __int16 *)v131 + 12);
      }
      if (v171 == 4)
      {
        if (*(unsigned char *)(*(void *)(v131[4] + 40) + 80) != 2) {
          goto LABEL_475;
        }
        uint64_t v360 = *((void *)&v1043 + 1);
        uint64_t v359 = (llvm *)v1043;
        uint64_t v361 = v131[5] + 16 * v188;
        uint64_t v166 = sub_1CD7EBF14((uint64_t)v25, 0, a11, *(llvm **)v361, *(void *)(v361 + 8), 0, 0);
        uint64_t v167 = v362;
        if (v1041 == 17) {
          int v363 = 22;
        }
        else {
          int v363 = 17;
        }
        unsigned int v982 = v363;
        int v168 = v25;
        unint64_t v169 = a11;
LABEL_840:
        uint64_t v163 = v359;
        uint64_t v164 = v360;
        uint64_t v170 = v131;
        uint64_t v165 = v188;
        return sub_1CD3DC614(v168, v169, v163, v164, (uint64_t)v170, v165, (uint64_t)v166, v167, v982, 0, 0, 0, 0);
      }
      if (v171 != 171 || !sub_1CD8029CC(*(void *)(v131[4] + 40))) {
        goto LABEL_475;
      }
      uint64_t v352 = (uint64_t *)(v131[5] + 16 * v188);
      uint64_t v354 = *v352;
      uint64_t v353 = v352[1];
      *(void *)&long long v1044 = v354;
      *((void *)&v1044 + 1) = v353;
      uint64_t v355 = *((void *)&v1043 + 1);
      uint64_t v356 = v1043;
      int v357 = v354;
      if (v354 == v1043
        && (!(_BYTE)v354 ? (BOOL v358 = v353 == *((void *)&v1043 + 1)) : (BOOL v358 = 1), v358))
      {
        *(void *)&long long v1049 = v354;
        *((void *)&v1049 + 1) = v353;
      }
      else
      {
        if (sub_1CC277C0C((unsigned __int8 *)&v1044, v1043, *((uint64_t *)&v1043 + 1)))
        {
          uint64_t v409 = *((void *)&v1043 + 1);
          int v408 = (llvm *)v1043;
          uint64_t v410 = (uint64_t *)v131[4];
          uint64_t v411 = *v410;
          uint64_t v412 = (void *)v410[1];
          uint64_t v413 = v25[104];
          uint64_t v414 = a11;
          if (v413) {
            __int16 v415 = *(_WORD *)(v413 + 8);
          }
          else {
            __int16 v415 = 0;
          }
          unint64_t v531 = (llvm::APFloatBase *)v25;
          uint64_t v532 = 201;
LABEL_833:
          uint64_t v577 = sub_1CD7F3564(v531, (const char *)v532, (uint64_t)v414, v408, v409, v411, v412, v415);
          uint64_t v578 = (uint64_t)v25;
          uint64_t v580 = v579;
          uint64_t v581 = sub_1CD7EBF14(v578, 1, v414, (llvm *)v1043, *((uint64_t *)&v1043 + 1), 0, 0);
          uint64_t v584 = *(void *)(v578 + 832);
          if (v584) {
            LOWORD(v584) = *(_WORD *)(v584 + 8);
          }
          uint64_t v585 = v580;
          uint64_t v25 = (void *)v1002;
          unint64_t v131 = sub_1CCFDED5C(v1002, 171, v414, v408, v409, (uint64_t)v577, v585, v583, (uint64_t)v581, v582, v584);
          unint64_t v188 = v188 & 0xFFFFFFFF00000000 | v586;
          goto LABEL_836;
        }
        int v455 = (uint64_t *)(v131[5] + 16 * v188);
        uint64_t v456 = *v455;
        uint64_t v353 = v455[1];
        uint64_t v355 = *((void *)&v1043 + 1);
        uint64_t v356 = v1043;
        int v357 = v1043;
        *(void *)&long long v1049 = v456;
        *((void *)&v1049 + 1) = v353;
        if (v1043 != v456)
        {
          long long v1044 = v1043;
          uint64_t v414 = a11;
          if ((_BYTE)v456)
          {
            uint64_t v457 = sub_1CB87E200((unsigned __int8 *)&v1049);
LABEL_791:
            unint64_t v533 = v457;
            int v534 = v458;
            if ((_BYTE)v356) {
              unint64_t v535 = sub_1CB87E200((unsigned __int8 *)&v1044);
            }
            else {
              unint64_t v535 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1044);
            }
            if ((v534 != 1 || v536 == 1) && v533 < v535)
            {
              uint64_t v409 = *((void *)&v1043 + 1);
              int v408 = (llvm *)v1043;
              long long v537 = (uint64_t *)v131[4];
              uint64_t v411 = *v537;
              uint64_t v412 = (void *)v537[1];
              uint64_t v538 = v25[104];
              if (v538) {
                __int16 v415 = *(_WORD *)(v538 + 8);
              }
              else {
                __int16 v415 = 0;
              }
              unint64_t v531 = (llvm::APFloatBase *)v25;
              uint64_t v532 = 200;
              goto LABEL_833;
            }
LABEL_836:
            uint64_t v360 = *((void *)&v1043 + 1);
            uint64_t v359 = (llvm *)v1043;
            uint64_t v587 = v131[5] + 16 * v188;
            uint64_t v166 = sub_1CD7EBF14((uint64_t)v25, 0, v414, *(llvm **)v587, *(void *)(v587 + 8), 0, 0);
            uint64_t v167 = v588;
            if (v1041 == 17) {
              int v589 = 22;
            }
            else {
              int v589 = 17;
            }
            unsigned int v982 = v589;
            int v168 = v25;
            unint64_t v169 = v414;
            goto LABEL_840;
          }
LABEL_611:
          uint64_t v457 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1049);
          goto LABEL_791;
        }
      }
      uint64_t v414 = a11;
      if (v357 || v353 == v355) {
        goto LABEL_836;
      }
      *(void *)&long long v1044 = v356;
      *((void *)&v1044 + 1) = v355;
      goto LABEL_611;
    }
    uint64_t v164 = *((void *)&v1043 + 1);
    uint64_t v163 = (llvm *)v1043;
    uint64_t v165 = *(void *)(v158 + 8);
    uint64_t v166 = *(uint64_t **)(v158 + 40);
    uint64_t v167 = *(void *)(v158 + 48);
    unsigned int v982 = v162;
    int v168 = v25;
LABEL_213:
    unint64_t v169 = a11;
    uint64_t v170 = v159;
    return sub_1CD3DC614(v168, v169, v163, v164, (uint64_t)v170, v165, (uint64_t)v166, v167, v982, 0, 0, 0, 0);
  }
  BOOL v121 = v1041 == 22 || v1041 == 17;
  if (!v121
    || ((*(uint64_t (**)(unsigned int *, void, void, llvm *, uint64_t))(*(void *)a1 + 1208))(a1, *(void *)(*(void *)(*(void *)(v1042 + 32) + 40) + 80), *(void *)(*(void *)(*(void *)(v1042 + 32) + 40) + 88), v1039, v1040) & 1) != 0)
  {
    goto LABEL_163;
  }
  long long v1044 = *(_OWORD *)(*(void *)(*(void *)(v1042 + 32) + 40) + 80);
  if ((_BYTE)v1044) {
    unsigned int v201 = sub_1CB87E200((unsigned __int8 *)&v1044);
  }
  else {
    unsigned int v201 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1044);
  }
  unsigned int v276 = v201;
  unsigned int v277 = a11;
  if (v202 == 1) {
  long long v1049 = *(_OWORD *)(*(void *)(v1042 + 40) + 16 * DWORD2(v1042));
  }
  if ((_BYTE)v1049) {
    unsigned int v278 = sub_1CB87E200((unsigned __int8 *)&v1049);
  }
  else {
    unsigned int v278 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1049);
  }
  unsigned int v280 = v278;
  if (v279 == 1) {
  uint64_t v281 = *(unsigned int *)(v86 + 32);
  }
  unsigned int v282 = v281 - 1;
  if (v281 > 0x40)
  {
    if ((*(void *)(*(void *)v22 + 8 * (v282 >> 6)) >> v282))
    {
      int v284 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)v22);
    }
    else
    {
      int v819 = 0;
      int64_t v820 = (unint64_t)(v281 + 63) >> 6;
      do
      {
        BOOL v527 = v820-- < 1;
        if (v527) {
          break;
        }
        unint64_t v821 = *(void *)(*(void *)v22 + 8 * v820);
        v819 += __clz(v821);
      }
      while (!v821);
      int v822 = v281 | 0xFFFFFFC0;
      if ((v281 & 0x3F) == 0) {
        int v822 = 0;
      }
      int v284 = v819 + v822;
    }
  }
  else
  {
    unint64_t v283 = *(void *)v22;
    if (((*(void *)v22 >> v282) & 1) == 0)
    {
      int v284 = v281 + __clz(v283) - 64;
      goto LABEL_376;
    }
    if (v281) {
      int v284 = __clz(~(v283 << -(char)v281));
    }
    else {
      int v284 = 0;
    }
  }
  uint64_t v108 = a10;
  unsigned int v277 = a11;
LABEL_376:
  if ((int)v281 - v284 + 1 > v276)
  {
    char v285 = v1041 == 22;
    uint64_t v287 = *((void *)&v1043 + 1);
    BOOL v286 = v1043;
    char v288 = (char)v1039;
    uint64_t v289 = v1040;
    uint64_t v290 = v1002;
    long long v291 = v277;
    return (uint64_t *)sub_1CD7EBCBC(v290, v285, v291, v286, v287, v288, v289);
  }
  LODWORD(v1036) = v280;
  if (v280 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v1035);
  }
  int64_t v1035 = 0;
  if (v276)
  {
    if (v276 > 0x40)
    {
      llvm::APInt::setBitsSlowCase(&v1035, 0, v276);
    }
    else
    {
      unint64_t v292 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v276;
      if (v1036 > 0x40) {
        *(void *)v1035 |= v292;
      }
      else {
        v1035 |= v292;
      }
    }
  }
  long long v293 = v1049;
  uint64_t v294 = *(uint64_t **)(v1042 + 32);
  uint64_t v295 = *v294;
  uint64_t v296 = v294[1];
  uint64_t v297 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1035, v277, v1049, *((uint64_t *)&v1049 + 1), 0, 0);
  uint64_t v300 = *(void *)(v1002 + 832);
  if (v300) {
    LOWORD(v300) = *(_WORD *)(v300 + 8);
  }
  char v301 = sub_1CCFDED5C(v1002, 171, v277, (llvm *)v293, *((uint64_t *)&v293 + 1), v295, v296, v299, v297, v298, v300);
  uint64_t v303 = v302;
  if (!*(unsigned char *)(v108 + 12)) {
    sub_1CCEF0788(*(void *)v108, (uint64_t)v301);
  }
  long long v304 = v1043;
  unsigned int v305 = *(_DWORD *)(v86 + 32);
  if (v305 > 0x40) {
    operator new[]();
  }
  unint64_t v306 = v1035 & *(void *)v22;
  LODWORD(v1033) = v305;
  unint64_t v1032 = v306;
  uint64_t v341 = sub_1CD7EBB14(v1002, (llvm::LLVMContext *)&v1032, a11, v1049, *((uint64_t *)&v1049 + 1), 0, 0);
  uint64_t v343 = sub_1CD3DC614((void *)v1002, a11, (llvm *)v304, *((uint64_t *)&v304 + 1), (uint64_t)v301, v303, v341, v342, v1041, 0, 0, 0, 0);
  uint64_t v344 = v343;
  if (v1033 >= 0x41 && v1032)
  {
    int v345 = v343;
    MEMORY[0x1D25D9CB0](v1032, 0x1000C8000313F17);
    uint64_t v344 = v345;
  }
  if (v1036 >= 0x41)
  {
    int64_t v346 = v1035;
    if (v1035) {
      goto LABEL_775;
    }
  }
  return v344;
}

uint64_t sub_1CD012D74(uint64_t *a1, uint64_t a2, BOOL a3, uint64_t a4, uint64_t a5)
{
  v46[0] = a2;
  v46[1] = a3;
  unsigned int v8 = sub_1CD7878C0((unsigned int *)v46, a2, a3);
  if (*(_WORD *)(v46[0] + 24) != 172 || (v8 & 1) != 0) {
    return 0;
  }
  uint64_t v11 = *(uint64_t **)(v46[0] + 32);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[5];
  uint64_t v15 = v11[6];
  uint64_t v16 = v8 >> 1;
  unsigned int v45 = v8;
  if (v8 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v44);
  }
  uint64_t v44 = 0;
  if (v8 >= 2)
  {
    unsigned int v17 = v8 - v16;
    if (v17 > 0x3F) {
      llvm::APInt::setBitsSlowCase(&v44, v17, v8);
    }
    else {
      v44 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v16 << v17;
    }
  }
  if (*(_WORD *)(v14 + 24) != 175) {
    goto LABEL_26;
  }
  uint64_t v18 = (uint64_t **)(v14 + 32);
  uint64_t v19 = *(void *)(*(void *)(v14 + 32) + 40);
  int v20 = *(unsigned __int16 *)(v19 + 24);
  if (v20 != 35 && v20 != 11) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v19 + 80);
  uint64_t v23 = (void *)(v22 + 24);
  uint64_t v24 = *(unsigned int *)(v22 + 32);
  if (v24 >= 0x41)
  {
    int v25 = 0;
    int64_t v26 = (unint64_t)(v24 + 63) >> 6;
    do
    {
      BOOL v27 = v26-- < 1;
      if (v27) {
        break;
      }
      unint64_t v28 = *(void *)(*v23 + 8 * v26);
      v25 += __clz(v28);
    }
    while (!v28);
    int v29 = v24 | 0xFFFFFFC0;
    if ((v24 & 0x3F) == 0) {
      int v29 = 0;
    }
    if ((v24 - v25 - v29) > 0x40) {
      goto LABEL_26;
    }
    uint64_t v23 = (void *)*v23;
  }
  if (*v23 == v16 && sub_1CD7F11AC(*a1, v12, v13, (uint64_t)&v44, 0))
  {
    uint64_t v14 = v12;
    goto LABEL_49;
  }
LABEL_26:
  if (*(_WORD *)(v12 + 24) == 175)
  {
    uint64_t v31 = *(void *)(v12 + 32);
    uint64_t v30 = (uint64_t **)(v12 + 32);
    uint64_t v32 = *(void *)(v31 + 40);
    int v33 = *(unsigned __int16 *)(v32 + 24);
    if (v33 == 35 || v33 == 11)
    {
      uint64_t v35 = *(void *)(v32 + 80);
      uint64_t v36 = (void *)(v35 + 24);
      uint64_t v37 = *(unsigned int *)(v35 + 32);
      if (v37 >= 0x41)
      {
        int v38 = 0;
        int64_t v39 = (unint64_t)(v37 + 63) >> 6;
        do
        {
          BOOL v27 = v39-- < 1;
          if (v27) {
            break;
          }
          unint64_t v40 = *(void *)(*v36 + 8 * v39);
          v38 += __clz(v40);
        }
        while (!v40);
        uint64_t v10 = 0;
        int v41 = v37 | 0xFFFFFFC0;
        if ((v37 & 0x3F) == 0) {
          int v41 = 0;
        }
        if ((v37 - v38 - v41) > 0x40) {
          goto LABEL_42;
        }
        uint64_t v36 = (void *)*v36;
      }
      if (*v36 == v16)
      {
        uint64_t v10 = 0;
        LODWORD(v13) = v15;
        uint64_t v18 = v30;
        if (!sub_1CD7F11AC(*a1, v14, v15, (uint64_t)&v44, 0)) {
          goto LABEL_42;
        }
LABEL_49:
        *(void *)a4 = v14;
        *(_DWORD *)(a4 + 8) = v13;
        uint64_t v43 = **v18;
        *(_DWORD *)(a5 + 8) = *((_DWORD *)*v18 + 2);
        *(void *)a5 = v43;
        uint64_t v10 = 1;
        goto LABEL_42;
      }
    }
  }
  uint64_t v10 = 0;
LABEL_42:
  if (v45 >= 0x41 && v44) {
    MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
  }
  return v10;
}

uint64_t *sub_1CD013030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10 = sub_1CD7878C0(*(unsigned int **)a1, a2, a3);
  unsigned int v44 = v10;
  if (v10 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  unsigned int v11 = v10;
  unint64_t v12 = 0;
  unint64_t __src = 0;
  if (v10 < 2) {
    goto LABEL_5;
  }
  unsigned int v13 = v10 - (v10 >> 1);
  if (v13 <= 0x3F)
  {
    unint64_t v12 = (unint64_t)__src | (0xFFFFFFFFFFFFFFFFLL >> -(char)(v10 >> 1) << v13);
    unint64_t __src = (void *)v12;
LABEL_5:
    uint64_t v14 = *(void *)(a1 + 8);
    goto LABEL_6;
  }
  llvm::APInt::setBitsSlowCase(&__src, v13, v10);
  uint64_t v14 = *(void *)(a1 + 8);
  unint64_t v12 = (unint64_t)__src;
LABEL_6:
  unint64_t v15 = ~v12;
  unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (!v11) {
    unint64_t v16 = 0;
  }
  unsigned int v42 = v11;
  unint64_t v41 = v16 & v15;
  uint64_t v18 = sub_1CD7EBB14(v14, (llvm::LLVMContext *)&v41, *(const llvm::APInt **)(a1 + 16), **(void **)(a1 + 24), *(void *)(*(void *)(a1 + 24) + 8), 0, 0);
  uint64_t v20 = v19;
  if (v42 >= 0x41 && v41) {
    MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
  }
  uint64_t v21 = *(void *)(a1 + 8);
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v23 = *(llvm **)v22;
  uint64_t v24 = *(void *)(v22 + 8);
  uint64_t v25 = *(void *)(v21 + 832);
  if (v25) {
    LOWORD(v25) = *(_WORD *)(v25 + 8);
  }
  int64_t v26 = sub_1CCFDED5C(v21, 171, *(const llvm::APInt **)(a1 + 16), v23, v24, a4, a5, v17, v18, v20, v25);
  uint64_t v29 = *(void *)(a1 + 24);
  if (**(unsigned char **)(a1 + 32)) {
    uint64_t v30 = 172;
  }
  else {
    uint64_t v30 = 171;
  }
  uint64_t v31 = *(void *)(a1 + 8);
  uint64_t v32 = *(llvm **)v29;
  uint64_t v33 = *(void *)(v29 + 8);
  uint64_t v34 = *(void *)(v31 + 832);
  if (v34) {
    LOWORD(v34) = *(_WORD *)(v34 + 8);
  }
  uint64_t v35 = sub_1CCFDED5C(v31, v30, *(const llvm::APInt **)(a1 + 16), v32, v33, a2, a3, v28, (uint64_t)v26, v27, v34);
  uint64_t v37 = v36;
  if (**(unsigned char **)(a1 + 32))
  {
    uint64_t v18 = (uint64_t)sub_1CD7EBF14(*(void *)(a1 + 8), 0, *(const llvm::APInt **)(a1 + 16), **(llvm ***)(a1 + 24), *(void *)(*(void *)(a1 + 24) + 8), 0, 0);
    uint64_t v20 = v38;
  }
  int64_t v39 = sub_1CD3DC614(*(void **)(a1 + 8), *(const llvm::APInt **)(a1 + 16), **(llvm ***)(a1 + 40), *(void *)(*(void *)(a1 + 40) + 8), (uint64_t)v35, v37, v18, v20, **(_DWORD **)(a1 + 48), 0, 0, 0, 0);
  if (v44 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return v39;
}

void sub_1CD013350(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t ***a5, uint64_t a6)
{
  char v6 = *(unsigned char *)(a4 + 23);
  int v7 = v6;
  unint64_t v8 = v6 & 0x7E;
  if (v7 < 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 > 1) {
    return;
  }
  int v9 = v7 >= 0 ? (char *)a4 : *(char **)a4;
  int v10 = *v9;
  if ((v10 - 88) > 0x1B || ((1 << (v10 - 88)) & 0x8420001) == 0) {
    return;
  }
  for (uint64_t i = 0; ; i += v30)
  {
    uint64_t v17 = *(unsigned __int16 *)(a2 + 24);
    if (v17 == 35 || v17 == 11)
    {
      if (v10 == 115) {
        goto LABEL_20;
      }
      int v79 = *(_DWORD *)(*(void *)(a2 + 80) + 32);
      int v80 = sub_1CD7879C8(a1, 6, 0);
      uint64_t v81 = *(void *)(a2 + 80);
      int v82 = (uint64_t *)(v81 + 24);
      unsigned int v83 = *(_DWORD *)(v81 + 32);
      if (v79 == 1 && v80 == 1)
      {
        if (v83 < 0x41)
        {
LABEL_122:
          uint64_t v85 = *v82;
LABEL_123:
          uint64_t v86 = v85 + i;
          uint64_t v87 = *(unsigned __int8 **)(a2 + 64);
          int v98 = v87;
          if (v87) {
            llvm::MetadataTracking::track((uint64_t)&v98, v87, 2);
          }
          int v99 = *(_DWORD *)(a2 + 60);
          uint64_t v33 = sub_1CD7EBF14(a6, v86, (const llvm::APInt *)&v98, (llvm *)6, 0, 1, 0);
          uint64_t v35 = v88;
          uint64_t v37 = a5[1];
          unint64_t v89 = (unint64_t)a5[2];
          if ((unint64_t)v37 < v89)
          {
LABEL_48:
            *uint64_t v37 = v33;
            v37[1] = v35;
            uint64_t v38 = v37 + 2;
          }
          else
          {
            uint64_t v90 = *a5;
            uint64_t v91 = ((char *)v37 - (char *)*a5) >> 4;
            unint64_t v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 60) {
              goto LABEL_139;
            }
            uint64_t v93 = v89 - (void)v90;
            if (v93 >> 3 > v92) {
              unint64_t v92 = v93 >> 3;
            }
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v94 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v94 = v92;
            }
            if (v94)
            {
              if (v94 >> 60) {
                goto LABEL_140;
              }
              uint64_t v95 = (char *)operator new(16 * v94);
            }
            else
            {
              uint64_t v95 = 0;
            }
            uint64_t v59 = (uint64_t **)&v95[16 * v91];
            uint64_t v60 = &v95[16 * v94];
            *uint64_t v59 = v33;
            v59[1] = v35;
            uint64_t v38 = v59 + 2;
            if (v37 != v90)
            {
              do
              {
                int v96 = *(v37 - 2);
                v37 -= 2;
                int v97 = *((_DWORD *)v37 + 2);
                *(v59 - 2) = v96;
                v59 -= 2;
                *((_DWORD *)v59 + 2) = v97;
              }
              while (v37 != v90);
LABEL_75:
              uint64_t v37 = *a5;
            }
LABEL_76:
            *a5 = v59;
            a5[1] = v38;
            a5[2] = (uint64_t **)v60;
            if (v37) {
              operator delete(v37);
            }
          }
          a5[1] = v38;
          if (!v98) {
            return;
          }
          int v63 = *v98;
          if ((v63 - 4) > 0x1E)
          {
            if ((v63 - 3) >= 0xFFFFFFFE) {
              uint64_t v66 = v98;
            }
            else {
              uint64_t v66 = 0;
            }
            if ((v63 - 3) < 0xFFFFFFFE)
            {
              if (v63 == 3) {
                *((void *)v98 + 1) = 0;
              }
              return;
            }
            unint64_t v65 = (unint64_t)(v66 + 8);
          }
          else
          {
            if ((v98[1] & 0x7F) != 2 && !*((_DWORD *)v98 + 3)) {
              return;
            }
            uint64_t v64 = *((void *)v98 + 2);
            if ((v64 & 4) == 0) {
              return;
            }
            unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFF8;
            if (!v65) {
              return;
            }
          }
          unint64_t v100 = &v98;
          sub_1CC5FA668(v65 + 16, &v100);
          return;
        }
      }
      else if (v83 <= 0x40)
      {
        uint64_t v85 = *v82 << -(char)v83 >> -(char)v83;
        goto LABEL_123;
      }
      int v82 = (uint64_t *)*v82;
      goto LABEL_122;
    }
    if (v10 == 110) {
      goto LABEL_24;
    }
LABEL_20:
    if (v17 > 0x2B) {
      goto LABEL_24;
    }
    if (((1 << v17) & 0x6000006000) != 0)
    {
      uint64_t v31 = *(void *)(a2 + 80);
      uint64_t v32 = *(unsigned __int8 **)(a2 + 64);
      int v98 = v32;
      if (v32) {
        llvm::MetadataTracking::track((uint64_t)&v98, v32, 2);
      }
      int v99 = *(_DWORD *)(a2 + 60);
      uint64_t v33 = sub_1CD7ECF00(a6, v31, (uint64_t)&v98, **(llvm ***)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), *(void *)(a2 + 88) + i, 1, 0);
      uint64_t v35 = v34;
      uint64_t v37 = a5[1];
      unint64_t v36 = (unint64_t)a5[2];
      if ((unint64_t)v37 < v36) {
        goto LABEL_48;
      }
      unsigned int v45 = *a5;
      uint64_t v46 = ((char *)v37 - (char *)*a5) >> 4;
      unint64_t v47 = v46 + 1;
      if (!((unint64_t)(v46 + 1) >> 60))
      {
        uint64_t v48 = v36 - (void)v45;
        if (v48 >> 3 > v47) {
          unint64_t v47 = v48 >> 3;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49)
        {
          if (!(v49 >> 60))
          {
            int64_t v50 = (char *)operator new(16 * v49);
            goto LABEL_73;
          }
LABEL_140:
          sub_1CB833614();
        }
        int64_t v50 = 0;
LABEL_73:
        uint64_t v59 = (uint64_t **)&v50[16 * v46];
        uint64_t v60 = &v50[16 * v49];
        *uint64_t v59 = v33;
        v59[1] = v35;
        uint64_t v38 = v59 + 2;
        if (v37 != v45)
        {
          do
          {
            uint64_t v61 = *(v37 - 2);
            v37 -= 2;
            int v62 = *((_DWORD *)v37 + 2);
            *(v59 - 2) = v61;
            v59 -= 2;
            *((_DWORD *)v59 + 2) = v62;
          }
          while (v37 != v45);
          goto LABEL_75;
        }
        goto LABEL_76;
      }
LABEL_139:
      abort();
    }
    if (((1 << v17) & 0x80000080000) != 0)
    {
      int64_t v39 = sub_1CD7EF178(a6, *(void *)(a2 + 80), **(llvm ***)(a2 + 40), *(void *)(*(void *)(a2 + 40) + 8), *(void *)(a2 + 88) + i, 1, *(_DWORD *)(a2 + 96));
      unint64_t v41 = v39;
      unsigned int v42 = v40;
      unsigned int v44 = a5[1];
      unint64_t v43 = (unint64_t)a5[2];
      if ((unint64_t)v44 < v43)
      {
        llvm *v44 = v39;
        v44[1] = v40;
        goto LABEL_62;
      }
      uint64_t v53 = *a5;
      uint64_t v54 = ((char *)v44 - (char *)*a5) >> 4;
      unint64_t v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 60) {
        goto LABEL_139;
      }
      uint64_t v56 = v43 - (void)v53;
      if (v56 >> 3 > v55) {
        unint64_t v55 = v56 >> 3;
      }
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57)
      {
        if (v57 >> 60) {
          goto LABEL_140;
        }
        uint64_t v58 = (char *)operator new(16 * v57);
      }
      else
      {
        uint64_t v58 = 0;
      }
      uint64_t v73 = &v58[16 * v54];
      BOOL v74 = &v58[16 * v57];
      *(void *)uint64_t v73 = v41;
      *((void *)v73 + 1) = v42;
      int v52 = (uint64_t **)(v73 + 16);
      if (v44 != v53)
      {
        do
        {
          uint64_t v75 = (uint64_t)*(v44 - 2);
          v44 -= 2;
          int v76 = *((_DWORD *)v44 + 2);
          *((void *)v73 - 2) = v75;
          v73 -= 16;
          *((_DWORD *)v73 + 2) = v76;
        }
        while (v44 != v53);
LABEL_109:
        unsigned int v44 = *a5;
      }
LABEL_110:
      *a5 = (uint64_t **)v73;
      a5[1] = v52;
      a5[2] = (uint64_t **)v74;
      if (v44) {
        operator delete(v44);
      }
      goto LABEL_112;
    }
    if (v17 == 6) {
      break;
    }
LABEL_24:
    if ((v17 & 0xFFFE) != 0x38) {
      return;
    }
    uint64_t v19 = *(unsigned int **)(a2 + 32);
    uint64_t v20 = *(void *)v19;
    int v21 = *(unsigned __int16 *)(*(void *)v19 + 24);
    if (v21 == 35 || v21 == 11)
    {
      a2 = *((void *)v19 + 5);
      uint64_t v23 = v19 + 12;
    }
    else
    {
      if (v17 != 56) {
        return;
      }
      uint64_t v24 = *((void *)v19 + 5);
      int v25 = *(unsigned __int16 *)(v24 + 24);
      if (v25 != 35 && v25 != 11) {
        return;
      }
      uint64_t v23 = v19 + 2;
      a2 = v20;
      uint64_t v20 = v24;
    }
    uint64_t v27 = *(void *)(v20 + 80);
    unsigned int v28 = *(_DWORD *)(v27 + 32);
    if (v28 > 0x40) {
      uint64_t v29 = **(void **)(v27 + 24);
    }
    else {
      uint64_t v29 = (uint64_t)(*(void *)(v27 + 24) << -(char)v28) >> -(char)v28;
    }
    a3 = a3 & 0xFFFFFFFF00000000 | *v23;
    if (v17 == 56) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = -v29;
    }
  }
  unsigned int v44 = a5[1];
  unint64_t v51 = (unint64_t)a5[2];
  if ((unint64_t)v44 >= v51)
  {
    uint64_t v67 = *a5;
    uint64_t v68 = ((char *)v44 - (char *)*a5) >> 4;
    unint64_t v69 = v68 + 1;
    if ((unint64_t)(v68 + 1) >> 60) {
      goto LABEL_139;
    }
    uint64_t v70 = v51 - (void)v67;
    if (v70 >> 3 > v69) {
      unint64_t v69 = v70 >> 3;
    }
    if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v71 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v71 = v69;
    }
    if (v71)
    {
      if (v71 >> 60) {
        goto LABEL_140;
      }
      uint64_t v72 = (char *)operator new(16 * v71);
    }
    else
    {
      uint64_t v72 = 0;
    }
    uint64_t v73 = &v72[16 * v68];
    BOOL v74 = &v72[16 * v71];
    *(void *)uint64_t v73 = a2;
    *((void *)v73 + 1) = a3;
    int v52 = (uint64_t **)(v73 + 16);
    if (v44 != v67)
    {
      do
      {
        uint64_t v77 = (uint64_t)*(v44 - 2);
        v44 -= 2;
        int v78 = *((_DWORD *)v44 + 2);
        *((void *)v73 - 2) = v77;
        v73 -= 16;
        *((_DWORD *)v73 + 2) = v78;
      }
      while (v44 != v67);
      goto LABEL_109;
    }
    goto LABEL_110;
  }
  llvm *v44 = (uint64_t *)a2;
  v44[1] = (uint64_t *)a3;
LABEL_62:
  int v52 = v44 + 2;
LABEL_112:
  a5[1] = v52;
}

uint64_t *sub_1CD014128(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  int v10 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v165 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v165, v10, 2);
  }
  int v166 = *(_DWORD *)(a2 + 60);
  long long v164 = *(_OWORD *)*(void *)(a2 + 40);
  v163[0] = sub_1CD3DD468((unsigned __int8 *)&v164, (uint64_t)v10, a3);
  v163[1] = v11;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, v164, *((uint64_t *)&v164 + 1), *(void *)(**(void **)(a3 + 40) + 40) + 272, 1);
  uint64_t v162 = v12;
  v160[0] = sub_1CD3DD468((unsigned __int8 *)&ShiftAmountTy, v12, v13);
  v160[1] = v14;
  unsigned int v17 = sub_1CD3E12F4((unsigned __int8 *)&v164, v14, v15);
  LOBYTE(v159) = 0;
  *((void *)&v159 + 1) = 0;
  BOOL v18 = v164;
  if (!(_BYTE)v164 || !a1[v164 + 12])
  {
    if (!(_BYTE)v164)
    {
      uint64_t v24 = 0;
      goto LABEL_85;
    }
    uint64_t v24 = 0;
    if (v164 - 15 < 0x9C) {
      goto LABEL_85;
    }
    if (*((unsigned char *)a1 + v164 + 173796) != 1) {
      goto LABEL_36;
    }
    llvm::TargetLoweringBase::getTypeConversion((unint64_t)a1, *(llvm::LLVMContext **)(a3 + 56), v164, *((uint64_t *)&v164 + 1), (uint64_t)&v183);
    long long v159 = *(_OWORD *)v184;
    if (LOBYTE(v184[0])) {
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v159);
    }
    else {
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v159);
    }
    unint64_t v39 = ExtendedSizeInBits;
    if (v16 == 1) {
    if (v39 < 2 * v17)
    }
      goto LABEL_36;
    if (!(_BYTE)v159)
    {
      uint64_t v24 = 0;
      goto LABEL_85;
    }
    if (v159 != 1)
    {
      uint64_t v24 = 0;
      if (!a1[v159 + 12]) {
        goto LABEL_85;
      }
    }
    if (*((unsigned char *)a1 + 390 * v159 + 3920))
    {
LABEL_36:
      uint64_t v24 = 0;
      goto LABEL_85;
    }
  }
  uint64_t v155 = a5;
  unsigned int v156 = v17;
  if ((*(_WORD *)(a2 + 72) & 8) != 0)
  {
    uint64_t v40 = *(void *)(a2 + 32);
    unint64_t v41 = *(_OWORD **)(a2 + 40);
    unint64_t v43 = *(uint64_t **)v40;
    unint64_t v42 = *(void *)(v40 + 8);
    uint64_t v44 = *(void *)(v40 + 40);
    uint64_t v45 = *(void *)(v40 + 48);
    *(_OWORD *)unsigned int v174 = *v41;
    v171[0] = sub_1CD3DD468((unsigned __int8 *)v174, (uint64_t)v16, v18);
    v171[1] = v46;
    unint64_t v169 = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v174[0], (uint64_t)v174[1], *(void *)(**(void **)(a3 + 40) + 40) + 272, 1);
    uint64_t v170 = v47;
    v168[0] = sub_1CD3DD468((unsigned __int8 *)&v169, v47, v48);
    v168[1] = v49;
    char v167 = 0;
    uint64_t v183 = &v184[2];
    *(void *)int v184 = 0x1000000000;
    uint64_t v180 = v182;
    uint64_t v181 = 0x1000000000;
    int64_t v50 = (void **)operator new(0x40uLL);
    *int64_t v50 = &unk_1F2642FB0;
    v50[1] = &v167;
    v50[2] = &v183;
    void v50[3] = (void *)a3;
    v50[4] = &v165;
    v50[5] = v168;
    v50[6] = &v180;
    v50[7] = v171;
    uint64_t v179 = v50;
    int v52 = sub_1CD7E9A18(v44, v45, (uint64_t)&v176, 0);
    if (v179 == &v176)
    {
      (*((void (**)(void **))v176 + 4))(&v176);
    }
    else if (v179)
    {
      (*((void (**)(void))*v179 + 5))();
    }
    if (!v52)
    {
      uint64_t v24 = 0;
      goto LABEL_69;
    }
    int v82 = *(unsigned __int16 *)(v44 + 24);
    if (v82 == 156)
    {
      unsigned int v83 = sub_1CD787A68((llvm::APFloatBase *)a3, v169, v170, (uint64_t)&v165, *(void *)v183, *((void **)v183 + 1));
      uint64_t v84 = v145;
      uint64_t v146 = sub_1CD787A68((llvm::APFloatBase *)a3, (llvm *)v174[0], (uint64_t)v174[1], (uint64_t)&v165, *(void *)v180, *((void **)v180 + 1));
    }
    else
    {
      if (v82 != 146)
      {
        unsigned int v83 = *(uint64_t **)v183;
        uint64_t v84 = *((unsigned int *)v183 + 2);
        uint64_t v85 = *(void *)v180;
        uint64_t v86 = *((unsigned int *)v180 + 2);
LABEL_62:
        if (v167)
        {
          unint64_t v43 = sub_1CCFDED5C(a3, 176, (const llvm::APInt *)&v165, (llvm *)v174[0], (uint64_t)v174[1], (uint64_t)v43, v42, v51, (uint64_t)v83, v84, 9);
          unint64_t v42 = v42 & 0xFFFFFFFF00000000 | v87;
          unsigned int v88 = *(_DWORD *)(a5 + 8);
          if (v88 >= *(_DWORD *)(a5 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a5 + 8 * v88) = v43;
          ++*(_DWORD *)(a5 + 8);
        }
        uint64_t v89 = *(void *)(a3 + 832);
        if (v89) {
          LOWORD(v89) = *(_WORD *)(v89 + 8);
        }
        uint64_t v24 = sub_1CCFDED5C(a3, 58, (const llvm::APInt *)&v165, (llvm *)v174[0], (uint64_t)v174[1], (uint64_t)v43, v42, v51, v85, v86, v89);
LABEL_69:
        if (v180 != v182) {
          free(v180);
        }
        uint64_t v90 = v183;
        if (v183 != &v184[2]) {
          goto LABEL_84;
        }
        goto LABEL_85;
      }
      uint64_t v143 = *(void *)(a3 + 832);
      if (v143) {
        uint64_t v144 = *(unsigned __int16 *)(v143 + 8);
      }
      else {
        uint64_t v144 = 0;
      }
      unsigned int v83 = sub_1CD7FF4E8((void *)a3, (const char *)0x92, (const llvm::APInt *)&v165, v169, v170, (uint64_t *)v183, v184[0], v144);
      uint64_t v84 = v148;
      uint64_t v149 = *(void *)(a3 + 832);
      if (v149) {
        uint64_t v150 = *(unsigned __int16 *)(v149 + 8);
      }
      else {
        uint64_t v150 = 0;
      }
      uint64_t v146 = sub_1CD7FF4E8((void *)a3, (const char *)0x92, (const llvm::APInt *)&v165, (llvm *)v174[0], (uint64_t)v174[1], (uint64_t *)v180, v181, v150);
    }
    uint64_t v85 = (uint64_t)v146;
    uint64_t v86 = v147;
    goto LABEL_62;
  }
  uint64_t v183 = &v184[2];
  *(void *)int v184 = 0x1000000000;
  uint64_t v180 = v182;
  uint64_t v181 = 0x1000000000;
  BOOL v176 = &v178;
  uint64_t v177 = 0x1000000000;
  v174[0] = v175;
  v174[1] = (void *)0x1000000000;
  uint64_t v19 = *(uint64_t **)(a2 + 32);
  uint64_t v157 = v19[1];
  uint64_t v158 = *v19;
  uint64_t v20 = v19[5];
  uint64_t v21 = v19[6];
  uint64_t v22 = operator new(0x48uLL);
  *uint64_t v22 = &unk_1F2643040;
  v22[1] = &v183;
  v22[2] = a3;
  v22[3] = &v165;
  v22[4] = v163;
  v22[5] = &v180;
  v22[6] = &v176;
  v22[7] = v160;
  v22[8] = v174;
  int v173 = v22;
  int v23 = sub_1CD7E9A18(v20, v21, (uint64_t)v172, 0);
  if (v173 == v172)
  {
    (*(void (**)(void *))(v172[0] + 32))(v172);
    if (!v23) {
      goto LABEL_27;
    }
  }
  else
  {
    if (v173) {
      (*(void (**)(void))(*v173 + 40))();
    }
    if (!v23) {
      goto LABEL_27;
    }
  }
  int v26 = *(unsigned __int16 *)(v20 + 24);
  if (v26 == 156)
  {
    uint64_t v27 = sub_1CD787A68((llvm::APFloatBase *)a3, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t)&v165, *(void *)v183, *((void **)v183 + 1));
    uint64_t v28 = v77;
    uint64_t v29 = sub_1CD787A68((llvm::APFloatBase *)a3, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t)&v165, *(void *)v180, *((void **)v180 + 1));
    uint64_t v154 = v78;
    uint64_t v30 = sub_1CD787A68((llvm::APFloatBase *)a3, ShiftAmountTy, v162, (uint64_t)&v165, *(void *)v176, *((void **)v176 + 1));
    uint64_t v31 = v79;
    int v80 = sub_1CD787A68((llvm::APFloatBase *)a3, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t)&v165, *(void *)v174[0], *((void **)v174[0] + 1));
LABEL_109:
    uint64_t v32 = (uint64_t)v80;
    uint64_t v33 = v81;
    goto LABEL_20;
  }
  if (v26 == 146)
  {
    uint64_t v75 = *(void *)(a3 + 832);
    if (v75) {
      uint64_t v76 = *(unsigned __int16 *)(v75 + 8);
    }
    else {
      uint64_t v76 = 0;
    }
    uint64_t v27 = sub_1CD7FF4E8((void *)a3, (const char *)0x92, (const llvm::APInt *)&v165, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t *)v183, v184[0], v76);
    LODWORD(v28) = v97;
    uint64_t v98 = *(void *)(a3 + 832);
    if (v98) {
      uint64_t v99 = *(unsigned __int16 *)(v98 + 8);
    }
    else {
      uint64_t v99 = 0;
    }
    uint64_t v29 = sub_1CD7FF4E8((void *)a3, (const char *)0x92, (const llvm::APInt *)&v165, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t *)v180, v181, v99);
    uint64_t v101 = *(void *)(a3 + 832);
    if (v101) {
      uint64_t v102 = *(unsigned __int16 *)(v101 + 8);
    }
    else {
      uint64_t v102 = 0;
    }
    uint64_t v28 = v28;
    uint64_t v154 = v100;
    uint64_t v30 = sub_1CD7FF4E8((void *)a3, (const char *)0x92, (const llvm::APInt *)&v165, ShiftAmountTy, v162, (uint64_t *)v176, v177, v102);
    uint64_t v31 = v103;
    uint64_t v104 = *(void *)(a3 + 832);
    if (v104) {
      uint64_t v105 = *(unsigned __int16 *)(v104 + 8);
    }
    else {
      uint64_t v105 = 0;
    }
    int v80 = sub_1CD7FF4E8((void *)a3, (const char *)0x92, (const llvm::APInt *)&v165, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t *)v174[0], LODWORD(v174[1]), v105);
    goto LABEL_109;
  }
  uint64_t v27 = *(uint64_t **)v183;
  uint64_t v28 = *((unsigned int *)v183 + 2);
  uint64_t v29 = *(uint64_t **)v180;
  uint64_t v154 = *((unsigned int *)v180 + 2);
  uint64_t v30 = *(uint64_t **)v176;
  uint64_t v31 = *((unsigned int *)v176 + 2);
  uint64_t v32 = *(void *)v174[0];
  uint64_t v33 = *((unsigned int *)v174[0] + 2);
LABEL_20:
  if ((_BYTE)v164 && a1[v164 + 12])
  {
    if (sub_1CCF41ED0((uint64_t)a1, 0xA0u, v164, *((uint64_t *)&v164 + 1), a4))
    {
      uint64_t v35 = *(void *)(a3 + 832);
      if (v35) {
        LOWORD(v35) = *(_WORD *)(v35 + 8);
      }
      unint64_t v36 = sub_1CCFDED5C(a3, 160, (const llvm::APInt *)&v165, (llvm *)v164, *((uint64_t *)&v164 + 1), v158, v157, v34, (uint64_t)v27, v28, v35);
      goto LABEL_75;
    }
    if (sub_1CCF41ED0((uint64_t)a1, 0x3Fu, v164, *((uint64_t *)&v164 + 1), a4))
    {
      uint64_t v106 = sub_1CD7F95FC(a3, v164, *((uint64_t *)&v164 + 1), v164, *((uint64_t *)&v164 + 1));
      uint64_t v91 = sub_1CD7FFB18((void *)a3, (const char *)0x3F, (const llvm::APInt *)&v165, v106, v107, v158, v157, v108, (uint64_t)v27, v28);
      uint64_t v92 = 1;
      if (!v91) {
        goto LABEL_76;
      }
      goto LABEL_111;
    }
LABEL_27:
    uint64_t v24 = 0;
    goto LABEL_77;
  }
  uint64_t v53 = *(void *)(a3 + 832);
  if (v53) {
    __int16 v54 = *(_WORD *)(v53 + 8);
  }
  else {
    __int16 v54 = 0;
  }
  uint64_t v153 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)0xC6, (uint64_t)&v165, (llvm *)v159, *((uint64_t *)&v159 + 1), v158, (void *)v157, v54);
  unsigned int v56 = v55;
  uint64_t v57 = *(void *)(a3 + 832);
  if (v57) {
    __int16 v58 = *(_WORD *)(v57 + 8);
  }
  else {
    __int16 v58 = 0;
  }
  uint64_t v59 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)0xC6, (uint64_t)&v165, (llvm *)v159, *((uint64_t *)&v159 + 1), (uint64_t)v27, (void *)v28, v58);
  uint64_t v62 = *(void *)(a3 + 832);
  if (v62) {
    LOWORD(v62) = *(_WORD *)(v62 + 8);
  }
  int v63 = sub_1CCFDED5C(a3, 58, (const llvm::APInt *)&v165, (llvm *)v159, *((uint64_t *)&v159 + 1), (uint64_t)v153, v56 | v157 & 0xFFFFFFFF00000000, v61, (uint64_t)v59, v60, v62);
  long long v64 = v159;
  uint64_t v66 = v65;
  uint64_t v67 = sub_1CD7EC970(a3, v156, v159, *((uint64_t *)&v159 + 1), (const llvm::APInt *)&v165, 1);
  uint64_t v70 = *(void *)(a3 + 832);
  if (v70) {
    LOWORD(v70) = *(_WORD *)(v70 + 8);
  }
  uint64_t v72 = sub_1CCFDED5C(a3, 177, (const llvm::APInt *)&v165, (llvm *)v64, *((uint64_t *)&v64 + 1), (uint64_t)v63, v66, v69, (uint64_t)v67, v68, v70);
  uint64_t v73 = *(void *)(a3 + 832);
  if (v73) {
    __int16 v74 = *(_WORD *)(v73 + 8);
  }
  else {
    __int16 v74 = 0;
  }
  unint64_t v36 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)0xC9, (uint64_t)&v165, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t)v72, (void *)v71, v74);
LABEL_75:
  uint64_t v91 = v36;
  uint64_t v92 = v37;
  if (!v36)
  {
LABEL_76:
    uint64_t v24 = 0;
    goto LABEL_77;
  }
LABEL_111:
  unsigned int v109 = *(_DWORD *)(v155 + 8);
  if (v109 >= *(_DWORD *)(v155 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v155 + 8 * v109) = v91;
  ++*(_DWORD *)(v155 + 8);
  uint64_t v110 = *(void *)(a3 + 832);
  uint64_t v152 = v31;
  if (v110) {
    LOWORD(v110) = *(_WORD *)(v110 + 8);
  }
  int64_t v113 = sub_1CCFDED5C(a3, 58, (const llvm::APInt *)&v165, (llvm *)v164, *((uint64_t *)&v164 + 1), v158, v157, v38, (uint64_t)v29, v154, v110);
  unsigned int v114 = *(_DWORD *)(v155 + 8);
  if (v114 >= *(_DWORD *)(v155 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v155 + 8 * v114) = v113;
  ++*(_DWORD *)(v155 + 8);
  uint64_t v115 = *(void *)(a3 + 832);
  if (v115) {
    LOWORD(v115) = *(_WORD *)(v115 + 8);
  }
  unsigned int v117 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v165, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t)v91, v92, v112, (uint64_t)v113, v111, v115);
  unint64_t v119 = v92 & 0xFFFFFFFF00000000 | v118;
  unsigned int v120 = *(_DWORD *)(v155 + 8);
  if (v120 >= *(_DWORD *)(v155 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v121 = v92 & 0xFFFFFFFF00000000;
  *(void *)(*(void *)v155 + 8 * v120) = v117;
  ++*(_DWORD *)(v155 + 8);
  uint64_t v122 = *(void *)(a3 + 832);
  if (v122) {
    LOWORD(v122) = *(_WORD *)(v122 + 8);
  }
  uint64_t v123 = sub_1CCFDED5C(a3, 176, (const llvm::APInt *)&v165, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t)v117, v119, v116, (uint64_t)v30, v152, v122);
  uint64_t v125 = v124 | v121;
  unsigned int v126 = *(_DWORD *)(v155 + 8);
  if (v126 >= *(_DWORD *)(v155 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v155 + 8 * v126) = v123;
  ++*(_DWORD *)(v155 + 8);
  int v127 = sub_1CD7EBF14(a3, v156 - 1, (const llvm::APInt *)&v165, ShiftAmountTy, v162, 0, 0);
  uint64_t v130 = *(void *)(a3 + 832);
  if (v130) {
    LOWORD(v130) = *(_WORD *)(v130 + 8);
  }
  uint64_t v133 = sub_1CCFDED5C(a3, 177, (const llvm::APInt *)&v165, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t)v123, v125, v129, (uint64_t)v127, v128, v130);
  uint64_t v134 = v131;
  unsigned int v135 = *(_DWORD *)(v155 + 8);
  if (v135 >= *(_DWORD *)(v155 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v155 + 8 * v135) = v133;
  ++*(_DWORD *)(v155 + 8);
  uint64_t v136 = *(void *)(a3 + 832);
  if (v136) {
    LOWORD(v136) = *(_WORD *)(v136 + 8);
  }
  int64_t v138 = sub_1CCFDED5C(a3, 171, (const llvm::APInt *)&v165, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t)v133, v131, v132, v32, v33, v136);
  unint64_t v140 = v134 & 0xFFFFFFFF00000000 | v139;
  unsigned int v141 = *(_DWORD *)(v155 + 8);
  if (v141 >= *(_DWORD *)(v155 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v155 + 8 * v141) = v138;
  ++*(_DWORD *)(v155 + 8);
  uint64_t v142 = *(void *)(a3 + 832);
  if (v142) {
    LOWORD(v142) = *(_WORD *)(v142 + 8);
  }
  uint64_t v24 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v165, (llvm *)v164, *((uint64_t *)&v164 + 1), (uint64_t)v123, v125, v137, (uint64_t)v138, v140, v142);
LABEL_77:
  if (v174[0] != v175) {
    free(v174[0]);
  }
  if (v176 != &v178) {
    free(v176);
  }
  if (v180 != v182) {
    free(v180);
  }
  uint64_t v90 = v183;
  if (v183 != &v184[2]) {
LABEL_84:
  }
    free(v90);
LABEL_85:
  if (v165)
  {
    int v93 = *v165;
    if ((v93 - 4) > 0x1E)
    {
      if ((v93 - 3) >= 0xFFFFFFFE) {
        uint64_t v95 = v165;
      }
      else {
        uint64_t v95 = 0;
      }
      if ((v93 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v96 = (unint64_t)(v95 + 8);
LABEL_95:
        uint64_t v183 = &v165;
        sub_1CC5FA668(v96 + 16, &v183);
        return v24;
      }
      if (v93 == 3) {
        *((void *)v165 + 1) = 0;
      }
    }
    else if ((v165[1] & 0x7F) == 2 || *((_DWORD *)v165 + 3))
    {
      uint64_t v151 = *((void *)v165 + 2);
      if ((v151 & 4) != 0)
      {
        unint64_t v96 = v151 & 0xFFFFFFFFFFFFFFF8;
        if (v96) {
          goto LABEL_95;
        }
      }
    }
  }
  return v24;
}

uint64_t *sub_1CD014F10(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  char v117 = a4;
  int v9 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v115 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v115, v9, 2);
  }
  int v116 = *(_DWORD *)(a2 + 60);
  long long v114 = *(_OWORD *)*(void *)(a2 + 40);
  v113[0] = sub_1CD3DD468((unsigned __int8 *)&v114, (uint64_t)v9, a3);
  v113[1] = v10;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, v114, *((uint64_t *)&v114 + 1), *(void *)(**(void **)(a3 + 40) + 40) + 272, 1);
  uint64_t v112 = v11;
  v110[0] = sub_1CD3DD468((unsigned __int8 *)&ShiftAmountTy, v11, v12);
  v110[1] = v13;
  unsigned int v109 = sub_1CD3E12F4((unsigned __int8 *)&v114, v13, v14);
  LOBYTE(v108) = 0;
  *((void *)&v108 + 1) = 0;
  if ((_BYTE)v114 && a1[v114 + 12])
  {
LABEL_5:
    char v107 = 0;
    uint64_t v129 = &v130[2];
    *(void *)uint64_t v130 = 0x1000000000;
    unsigned int v126 = v128;
    uint64_t v127 = 0x1000000000;
    uint64_t v123 = v125;
    uint64_t v124 = 0x1000000000;
    unsigned int v120 = v122;
    uint64_t v121 = 0x1000000000;
    BOOL v15 = *(uint64_t **)(a2 + 32);
    uint64_t v104 = *v15;
    uint64_t v105 = v15[1];
    uint64_t v16 = v15[5];
    uint64_t v17 = v15[6];
    BOOL v18 = operator new(0x58uLL);
    *BOOL v18 = &unk_1F2643088;
    v18[1] = &v129;
    v18[2] = a3;
    v18[3] = &v115;
    v18[4] = v110;
    v18[5] = &v123;
    v18[6] = v113;
    uint64_t v18[7] = &v120;
    v18[8] = &v109;
    v18[9] = &v126;
    v18[10] = &v107;
    unint64_t v119 = v18;
    uint64_t v103 = v17;
    int v20 = sub_1CD7E9A18(v16, v17, (uint64_t)v118, 0);
    if (v119 == v118)
    {
      (*(void (**)(void *))(v118[0] + 32))(v118);
      if (!v20)
      {
LABEL_23:
        uint64_t v21 = 0;
LABEL_24:
        if (v120 != v122) {
          free(v120);
        }
        if (v123 != v125) {
          free(v123);
        }
        if (v126 != v128) {
          free(v126);
        }
        if (v129 != &v130[2]) {
          free(v129);
        }
        goto LABEL_42;
      }
    }
    else
    {
      if (v119) {
        (*(void (**)(void))(*v119 + 40))();
      }
      if (!v20) {
        goto LABEL_23;
      }
    }
    int v24 = *(unsigned __int16 *)(v16 + 24);
    if (v24 == 156)
    {
      uint64_t v25 = v16;
      int v26 = sub_1CD787A68((llvm::APFloatBase *)a3, ShiftAmountTy, v112, (uint64_t)&v115, *(void *)v129, *((void **)v129 + 1));
      uint64_t v27 = v55;
      uint64_t v28 = sub_1CD787A68((llvm::APFloatBase *)a3, (llvm *)v114, *((uint64_t *)&v114 + 1), (uint64_t)&v115, *(void *)v123, *((void **)v123 + 1));
      uint64_t v29 = v56;
      uint64_t v57 = sub_1CD787A68((llvm::APFloatBase *)a3, (llvm *)v114, *((uint64_t *)&v114 + 1), (uint64_t)&v115, *(void *)v120, *((void **)v120 + 1));
      uint64_t v97 = v58;
      uint64_t v99 = (uint64_t)v57;
      uint64_t v59 = sub_1CD787A68((llvm::APFloatBase *)a3, ShiftAmountTy, v112, (uint64_t)&v115, *(void *)v126, *((void **)v126 + 1));
    }
    else
    {
      if (v24 != 146)
      {
        uint64_t v25 = v16;
        uint64_t v97 = 0;
        uint64_t v99 = 0;
        int v26 = *(uint64_t **)v129;
        uint64_t v27 = *((unsigned int *)v129 + 2);
        uint64_t v28 = *(uint64_t **)v123;
        uint64_t v29 = *((unsigned int *)v123 + 2);
        uint64_t v102 = *(void *)v126;
        uint64_t v30 = *((unsigned int *)v126 + 2);
        goto LABEL_19;
      }
      uint64_t v53 = *(void *)(a3 + 832);
      uint64_t v25 = v16;
      if (v53) {
        uint64_t v54 = *(unsigned __int16 *)(v53 + 8);
      }
      else {
        uint64_t v54 = 0;
      }
      int v26 = sub_1CD7FF4E8((void *)a3, (const char *)0x92, (const llvm::APInt *)&v115, ShiftAmountTy, v112, (uint64_t *)v129, v130[0], v54);
      unsigned int v62 = v61;
      uint64_t v63 = *(void *)(a3 + 832);
      if (v63) {
        uint64_t v64 = *(unsigned __int16 *)(v63 + 8);
      }
      else {
        uint64_t v64 = 0;
      }
      uint64_t v28 = sub_1CD7FF4E8((void *)a3, (const char *)0x92, (const llvm::APInt *)&v115, (llvm *)v114, *((uint64_t *)&v114 + 1), (uint64_t *)v123, v124, v64);
      uint64_t v66 = *(void *)(a3 + 832);
      if (v66) {
        uint64_t v67 = *(unsigned __int16 *)(v66 + 8);
      }
      else {
        uint64_t v67 = 0;
      }
      uint64_t v27 = v62;
      uint64_t v29 = v65;
      uint64_t v68 = sub_1CD7FF4E8((void *)a3, (const char *)0x92, (const llvm::APInt *)&v115, (llvm *)v114, *((uint64_t *)&v114 + 1), (uint64_t *)v120, v121, v67);
      uint64_t v97 = v69;
      uint64_t v99 = (uint64_t)v68;
      uint64_t v70 = *(void *)(a3 + 832);
      if (v70) {
        uint64_t v71 = *(unsigned __int16 *)(v70 + 8);
      }
      else {
        uint64_t v71 = 0;
      }
      uint64_t v59 = sub_1CD7FF4E8((void *)a3, (const char *)0x92, (const llvm::APInt *)&v115, ShiftAmountTy, v112, (uint64_t *)v126, v127, v71);
    }
    uint64_t v102 = (uint64_t)v59;
    uint64_t v30 = v60;
LABEL_19:
    uint64_t v101 = v30;
    uint64_t v31 = *(void *)(a3 + 832);
    if (v31) {
      LOWORD(v31) = *(_WORD *)(v31 + 8);
    }
    uint64_t v33 = sub_1CCFDED5C(a3, 177, (const llvm::APInt *)&v115, (llvm *)v114, *((uint64_t *)&v114 + 1), v104, v105, v19, (uint64_t)v26, v27, v31);
    unsigned int v34 = *(_DWORD *)(a5 + 8);
    if (v34 >= *(_DWORD *)(a5 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a5 + 8 * v34) = v33;
    ++*(_DWORD *)(a5 + 8);
    v106[0] = a1;
    v106[1] = &v114;
    v106[2] = a3;
    v106[3] = &v115;
    v106[4] = &v108;
    v106[5] = &v109;
    v106[6] = &v117;
    uint64_t v35 = sub_1CD01591C((uint64_t)v106, (uint64_t)v33, v105 & 0xFFFFFFFF00000000 | v32, (uint64_t)v28, v29);
    if (!v35) {
      goto LABEL_23;
    }
    unint64_t v43 = v35;
    unint64_t v44 = v105 & 0xFFFFFFFF00000000;
    unint64_t v45 = v36 | v105 & 0xFFFFFFFF00000000;
    unsigned int v46 = *(_DWORD *)(a5 + 8);
    if (v46 >= *(_DWORD *)(a5 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a5 + 8 * v46) = v35;
    ++*(_DWORD *)(a5 + 8);
    if (!v107)
    {
LABEL_90:
      uint64_t v84 = *(void *)(a3 + 832);
      if (v84) {
        LOWORD(v84) = *(_WORD *)(v84 + 8);
      }
      uint64_t v85 = sub_1CCFDED5C(a3, 177, (const llvm::APInt *)&v115, (llvm *)v114, *((uint64_t *)&v114 + 1), (uint64_t)v43, v45, v37, v102, v101, v84);
      unint64_t v87 = v86 | v44;
      unsigned int v88 = *(_DWORD *)(a5 + 8);
      if (v88 >= *(_DWORD *)(a5 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a5 + 8 * v88) = v85;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v89 = (llvm *)(*(uint64_t (**)(uint64_t *, uint64_t, void, void, void))(*a1 + 400))(a1, *(void *)(**(void **)(a3 + 40) + 40) + 272, *(void *)(a3 + 56), v114, *((void *)&v114 + 1));
      uint64_t v91 = v90;
      uint64_t v92 = sub_1CD7EBF14(a3, 1, (const llvm::APInt *)&v115, (llvm *)v114, *((uint64_t *)&v114 + 1), 0, 0);
      unint64_t v94 = sub_1CD3DC614((void *)a3, (const llvm::APInt *)&v115, v89, v91, v25, v103, (uint64_t)v92, v93, 0x11u, 0, 0, 0, 0);
      uint64_t v21 = sub_1CD3E1260((void *)a3, (const llvm::APInt *)&v115, (llvm *)v114, *((uint64_t *)&v114 + 1), (uint64_t)v94, v95, v104, v105, (uint64_t)v85, v87, SHIDWORD(v87));
      goto LABEL_24;
    }
    uint64_t v47 = *(void *)(a3 + 832);
    if (v47) {
      LOWORD(v47) = *(_WORD *)(v47 + 8);
    }
    uint64_t v49 = sub_1CCFDED5C(a3, 57, (const llvm::APInt *)&v115, (llvm *)v114, *((uint64_t *)&v114 + 1), v104, v105, v37, (uint64_t)v35, v45, v47);
    uint64_t v50 = v48;
    unsigned int v51 = *(_DWORD *)(a5 + 8);
    if (v51 >= *(_DWORD *)(a5 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a5 + 8 * v51) = v49;
    ++*(_DWORD *)(a5 + 8);
    if ((_BYTE)v114)
    {
      if (v114 - 15 >= 0x9C)
      {
        uint64_t v52 = *((void *)&v114 + 1);
LABEL_82:
        uint64_t v98 = (llvm *)v114;
        uint64_t v100 = v52;
        uint64_t v75 = sub_1CD7EBF14(a3, 1, (const llvm::APInt *)&v115, ShiftAmountTy, v112, 0, 0);
        uint64_t v78 = *(void *)(a3 + 832);
        if (v78) {
          LOWORD(v78) = *(_WORD *)(v78 + 8);
        }
        uint64_t v72 = sub_1CCFDED5C(a3, 177, (const llvm::APInt *)&v115, v98, v100, (uint64_t)v49, v50, v77, (uint64_t)v75, v76, v78);
        goto LABEL_85;
      }
    }
    else
    {
      uint64_t v52 = *((void *)&v114 + 1);
      if ((*(_DWORD *)(*((void *)&v114 + 1) + 8) & 0xFE) != 0x12) {
        goto LABEL_82;
      }
    }
    uint64_t v72 = sub_1CD01591C((uint64_t)v106, (uint64_t)v49, v48, v99, v97);
LABEL_85:
    unint64_t v79 = v50 & 0xFFFFFFFF00000000 | v73;
    unsigned int v80 = *(_DWORD *)(a5 + 8);
    if (v80 >= *(_DWORD *)(a5 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a5 + 8 * v80) = v72;
    ++*(_DWORD *)(a5 + 8);
    uint64_t v81 = *(void *)(a3 + 832);
    if (v81) {
      LOWORD(v81) = *(_WORD *)(v81 + 8);
    }
    unint64_t v43 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v115, (llvm *)v114, *((uint64_t *)&v114 + 1), (uint64_t)v72, v79, v74, (uint64_t)v43, v45, v81);
    unint64_t v45 = v82 | v44;
    unsigned int v83 = *(_DWORD *)(a5 + 8);
    if (v83 >= *(_DWORD *)(a5 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a5 + 8 * v83) = v43;
    ++*(_DWORD *)(a5 + 8);
    goto LABEL_90;
  }
  if (!(_BYTE)v114)
  {
    uint64_t v21 = 0;
    goto LABEL_42;
  }
  uint64_t v21 = 0;
  if (v114 - 15 < 0x9C) {
    goto LABEL_42;
  }
  if (*((unsigned char *)a1 + v114 + 173796) != 1) {
    goto LABEL_40;
  }
  llvm::TargetLoweringBase::getTypeConversion((unint64_t)a1, *(llvm::LLVMContext **)(a3 + 56), v114, *((uint64_t *)&v114 + 1), (uint64_t)&v129);
  long long v108 = *(_OWORD *)v130;
  if (LOBYTE(v130[0])) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v108);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v108);
  }
  unint64_t v38 = ExtendedSizeInBits;
  if (v23 == 1) {
  if (v38 < 2 * v109)
  }
  {
LABEL_40:
    uint64_t v21 = 0;
    goto LABEL_42;
  }
  if (!(_BYTE)v108)
  {
    uint64_t v21 = 0;
    goto LABEL_42;
  }
  if (v108 == 1 || (uint64_t v21 = 0, a1[v108 + 12]))
  {
    if (!*((unsigned char *)a1 + 390 * v108 + 3920)) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_42:
  if (v115)
  {
    int v39 = *v115;
    if ((v39 - 4) > 0x1E)
    {
      if ((v39 - 3) >= 0xFFFFFFFE) {
        unint64_t v41 = v115;
      }
      else {
        unint64_t v41 = 0;
      }
      if ((v39 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v42 = (unint64_t)(v41 + 8);
LABEL_52:
        uint64_t v129 = &v115;
        sub_1CC5FA668(v42 + 16, &v129);
        return v21;
      }
      if (v39 == 3) {
        *((void *)v115 + 1) = 0;
      }
    }
    else if ((v115[1] & 0x7F) == 2 || *((_DWORD *)v115 + 3))
    {
      uint64_t v96 = *((void *)v115 + 2);
      if ((v96 & 4) != 0)
      {
        unint64_t v42 = v96 & 0xFFFFFFFFFFFFFFF8;
        if (v42) {
          goto LABEL_52;
        }
      }
    }
  }
  return v21;
}

uint64_t *sub_1CD01591C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void **)(a1 + 8);
  if (*v10 && (uint64_t v11 = *(void *)a1, *(void *)(*(void *)a1 + 8 * *v10 + 96)))
  {
    if (sub_1CCF41ED0(*(void *)a1, 0x9Fu, *v10, v10[1], **(unsigned __int8 **)(a1 + 48)))
    {
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 8);
      BOOL v15 = *(llvm **)v14;
      uint64_t v16 = *(void *)(v14 + 8);
      uint64_t v17 = *(void *)(v13 + 832);
      if (v17) {
        LOWORD(v17) = *(_WORD *)(v17 + 8);
      }
      return sub_1CCFDED5C(v13, 159, *(const llvm::APInt **)(a1 + 24), v15, v16, a2, a3, v12, a4, a5, v17);
    }
    else if (sub_1CCF41ED0(v11, 0x40u, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8), **(unsigned __int8 **)(a1 + 48)))
    {
      unsigned int v62 = *(void **)(a1 + 16);
      unsigned int v61 = *(const llvm::APInt **)(a1 + 24);
      uint64_t v63 = sub_1CD7F95FC((uint64_t)v62, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8), **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
      return sub_1CD7FFB18(v62, (const char *)0x40, v61, v63, v64, a2, a3, v65, a4, a5);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v19 = *(llvm::APFloatBase **)(a1 + 16);
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(llvm **)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    uint64_t v23 = *((void *)v19 + 104);
    if (v23) {
      __int16 v24 = *(_WORD *)(v23 + 8);
    }
    else {
      __int16 v24 = 0;
    }
    unint64_t v25 = a3 & 0xFFFFFFFF00000000;
    int v26 = sub_1CD7F3564(v19, (const char *)0xC7, *(void *)(a1 + 24), v21, v22, a2, (void *)a3, v24);
    unsigned int v28 = v27;
    uint64_t v29 = *(llvm::APFloatBase **)(a1 + 16);
    uint64_t v30 = *(void *)(a1 + 32);
    uint64_t v31 = *(llvm **)v30;
    uint64_t v32 = *(void *)(v30 + 8);
    unint64_t v33 = a5 & 0xFFFFFFFF00000000;
    uint64_t v34 = *((void *)v29 + 104);
    if (v34) {
      __int16 v35 = *(_WORD *)(v34 + 8);
    }
    else {
      __int16 v35 = 0;
    }
    unint64_t v38 = sub_1CD7F3564(v29, (const char *)0xC7, *(void *)(a1 + 24), v31, v32, a4, (void *)a5, v35);
    uint64_t v39 = *(void *)(a1 + 16);
    uint64_t v40 = *(void *)(v39 + 832);
    if (v40) {
      LOWORD(v40) = *(_WORD *)(v40 + 8);
    }
    unint64_t v41 = sub_1CCFDED5C(v39, 58, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), (uint64_t)v26, v28 | v25, v37, (uint64_t)v38, v36 | v33, v40);
    uint64_t v42 = *(void *)(a1 + 16);
    unint64_t v43 = *(const llvm::APInt **)(a1 + 24);
    unint64_t v44 = *(uint64_t **)(a1 + 32);
    unsigned int v46 = (llvm *)*v44;
    uint64_t v45 = v44[1];
    uint64_t v48 = v47 | v33;
    uint64_t v49 = sub_1CD7EC970(v42, **(unsigned int **)(a1 + 40), *v44, v45, v43, 1);
    uint64_t v52 = *(void *)(v42 + 832);
    if (v52) {
      LOWORD(v52) = *(_WORD *)(v52 + 8);
    }
    uint64_t v54 = sub_1CCFDED5C(v42, 177, v43, v46, v45, (uint64_t)v41, v48, v51, (uint64_t)v49, v50, v52);
    unsigned int v55 = *(llvm::APFloatBase **)(a1 + 16);
    uint64_t v56 = *(void *)(a1 + 8);
    uint64_t v57 = *(llvm **)v56;
    uint64_t v58 = *(void *)(v56 + 8);
    uint64_t v59 = *((void *)v55 + 104);
    if (v59) {
      __int16 v60 = *(_WORD *)(v59 + 8);
    }
    else {
      __int16 v60 = 0;
    }
    return sub_1CD7F3564(v55, (const char *)0xC9, *(void *)(a1 + 24), v57, v58, (uint64_t)v54, (void *)(v53 | v33), v60);
  }
}

uint64_t sub_1CD015B9C(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  sub_1CD01E724((uint64_t)v28, a3);
  uint64_t v10 = &a1[a2];
  sub_1CD01E724((uint64_t)&v30, (uint64_t)v28);
  uint64_t v12 = 16 * a2;
  if (a2)
  {
    uint64_t v13 = 16 * a2;
    uint64_t v14 = a1;
    do
    {
      long long v22 = *v14;
      if (!v31) {
        goto LABEL_55;
      }
      if (!(*(unsigned int (**)(long long *, long long *))(*(void *)v31 + 48))(v31, &v22)) {
        goto LABEL_8;
      }
      ++v14;
      v13 -= 16;
    }
    while (v13);
    uint64_t v14 = &a1[a2];
  }
  else
  {
    uint64_t v14 = a1;
  }
LABEL_8:
  if (v31 == &v30)
  {
    (*(void (**)(long long *))(v30 + 32))(&v30);
  }
  else if (v31)
  {
    (*(void (**)(long long *, uint64_t))(*(void *)v31 + 40))(v31, v11);
  }
  uint64_t result = (uint64_t)v29;
  if (v29 == v28)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v28[0] + 32))(v28);
  }
  else if (v29)
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v29 + 40))(v29, v11);
  }
  if (v14 == v10) {
    goto LABEL_43;
  }
  sub_1CD01E724((uint64_t)v25, a3);
  unsigned int v27 = v14;
  if (v26)
  {
    if (v26 == v25)
    {
      uint64_t v31 = &v30;
      (*(void (**)(void *, long long *))(v25[0] + 24))(v25, &v30);
    }
    else
    {
      uint64_t v31 = (long long *)(*(uint64_t (**)(void *, uint64_t))(*v26 + 16))(v26, v16);
    }
  }
  else
  {
    uint64_t v31 = 0;
  }
  uint64_t v32 = v27;
  if (a2)
  {
    uint64_t v17 = a1;
    while (1)
    {
      uint64_t v18 = *((void *)v17 + 1);
      if (*(void *)v32 != *(void *)v17 || *((_DWORD *)v32 + 2) != v18)
      {
        *(void *)&long long v22 = *(void *)v17;
        *((void *)&v22 + 1) = v18;
        if (!v31) {
          goto LABEL_55;
        }
        if (!(*(unsigned int (**)(long long *, long long *))(*(void *)v31 + 48))(v31, &v22)) {
          break;
        }
      }
      if (++v17 == v10) {
        goto LABEL_29;
      }
    }
    int v19 = 0;
  }
  else
  {
LABEL_29:
    int v19 = 1;
  }
  if (v31 == &v30)
  {
    (*(void (**)(long long *))(v30 + 32))(&v30);
  }
  else if (v31)
  {
    (*(void (**)(long long *, uint64_t))(*(void *)v31 + 40))(v31, v16);
  }
  uint64_t result = (uint64_t)v26;
  if (v26 == v25)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v25[0] + 32))(v25);
    if (!v19) {
      goto LABEL_43;
    }
  }
  else
  {
    if (v26) {
      uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v26 + 40))(v26, v16);
    }
    if (!v19) {
      goto LABEL_43;
    }
  }
  uint64_t v20 = *(void *)v14;
  if (*(void *)v14)
  {
    a5 = *((_DWORD *)v14 + 2);
    goto LABEL_45;
  }
LABEL_43:
  if (!a4) {
    return result;
  }
  uint64_t v20 = a4;
LABEL_45:
  sub_1CD01E724((uint64_t)v23, a3);
  if (a2)
  {
    while (1)
    {
      long long v30 = *a1;
      if (!v24) {
        break;
      }
      if ((*(unsigned int (**)(void *, long long *))(*v24 + 48))(v24, &v30))
      {
        *(void *)a1 = v20;
        *((_DWORD *)a1 + 2) = a5;
      }
      ++a1;
      v12 -= 16;
      if (!v12) {
        goto LABEL_50;
      }
    }
LABEL_55:
    sub_1CB920400();
  }
LABEL_50:
  uint64_t result = (uint64_t)v24;
  if (v24 == v23) {
    return (*(uint64_t (**)(void *))(v23[0] + 32))(v23);
  }
  if (v24) {
    return (*(uint64_t (**)(void *, uint64_t))(*v24 + 40))(v24, v21);
  }
  return result;
}

uint64_t *sub_1CD016038(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, uint64_t a5, uint64_t a6, int *a7, unsigned int a8)
{
  uint64_t v242 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(unsigned __int16 *)(a2 + 24);
  if (v10 == 222)
  {
    *a7 = 0;
    return **(uint64_t ***)(a2 + 32);
  }
  if (a8 > 6) {
    return 0;
  }
  __int16 v220 = *(_WORD *)(a2 + 72);
  uint64_t v18 = *a4;
  uint64_t v19 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 40) + 16 * a3;
  uint64_t v221 = *(void *)(v20 + 8);
  unsigned int v222 = *(llvm **)v20;
  int v21 = 1;
  if (!v19)
  {
LABEL_9:
    char v22 = 1;
    goto LABEL_11;
  }
  while (*(_DWORD *)(v19 + 8) != a3)
  {
LABEL_8:
    uint64_t v19 = *(void *)(v19 + 32);
    if (!v19) {
      goto LABEL_9;
    }
  }
  if (v21)
  {
    --v21;
    goto LABEL_8;
  }
  char v22 = 0;
LABEL_11:
  if (v21) {
    char v23 = 0;
  }
  else {
    char v23 = v22;
  }
  if (v10 != 12 && (v23 & 1) == 0)
  {
    if (v10 != 215) {
      return 0;
    }
    __int16 v24 = (void *)(*(void *)(**(void **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8));
    if (!(*(unsigned int (**)(uint64_t, llvm *, uint64_t, void, void))(*(void *)a1 + 1288))(a1, v222, v221, *v24, v24[1]))return 0; {
  }
    }
  uint64_t v26 = a8 + 1;
  unsigned int v27 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v226 = v27;
  if (v27) {
    llvm::MetadataTracking::track((uint64_t)&v226, v27, 2);
  }
  int v227 = *(_DWORD *)(a2 + 60);
  v224[0] = (uint64_t)v224;
  v224[1] = (uint64_t)v224;
  uint64_t v225 = 0;
  if ((int)v10 <= 140)
  {
    if ((int)v10 > 97)
    {
      if ((v10 - 98) >= 2) {
        goto LABEL_186;
      }
      uint64_t v67 = *(uint64_t **)(a2 + 32);
      uint64_t v68 = *v67;
      uint64_t v69 = v67[1];
      uint64_t v215 = v67[6];
      uint64_t v218 = (llvm::detail::DoubleAPFloat *)v67[5];
      LODWORD(v228) = 2;
      uint64_t v208 = v69;
      uint64_t v210 = v68;
      uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1808))(a1);
      uint64_t v72 = v71;
      if (v70)
      {
        unsigned int v212 = v26;
        unsigned int v73 = operator new(0x88uLL);
        *unsigned int v73 = 0;
        v73[1] = 0;
        sub_1CD7875EC((uint64_t)(v73 + 2), v70, v72);
        uint64_t v74 = v224[0];
        *unsigned int v73 = v224[0];
        v73[1] = v224;
        *(void *)(v74 + 8) = v73;
        v224[0] = (uint64_t)v73;
        uint64_t v26 = v212;
        ++v225;
      }
      int v237 = 2;
      uint64_t v75 = (*(uint64_t (**)(uint64_t, llvm::detail::DoubleAPFloat *, uint64_t, void *, uint64_t, uint64_t, int *, uint64_t))(*(void *)a1 + 1808))(a1, v218, v215, a4, a5, a6, &v237, v26);
      uint64_t v77 = v76;
      sub_1CD81B144(v224);
      if (!v70 || (int)v228 > v237)
      {
        uint64_t v79 = sub_1CCFDEC10(*(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0);
        if (v79 && sub_1CB8BE1E4(*(void *)(v79 + 80) + 24, 2.0) && *(_WORD *)(a2 + 24) == 98 || !v75) {
          goto LABEL_186;
        }
        *a7 = v237;
        uint64_t v11 = sub_1CCFDED5C((uint64_t)a4, v10, (const llvm::APInt *)&v226, v222, v221, v210, v208, v80, v75, v77, v220);
        BOOL v83 = (uint64_t *)v70 == v11 && v72 == v81;
        if (!v70) {
          goto LABEL_289;
        }
        if (v83) {
          goto LABEL_289;
        }
        uint64_t v75 = v70;
        if (*(void *)(v70 + 48)) {
          goto LABEL_289;
        }
LABEL_194:
        uint64_t v154 = a4;
        uint64_t v155 = v75;
        goto LABEL_195;
      }
      *a7 = (int)v228;
      uint64_t v151 = sub_1CCFDED5C((uint64_t)a4, v10, (const llvm::APInt *)&v226, v222, v221, v70, v72, v78, (uint64_t)v218, v215, v220);
LABEL_188:
      uint64_t v11 = v151;
      BOOL v153 = v77 == v152 && v75 == (void)v151;
      if (v153 || !v75 || *(void *)(v75 + 48)) {
        goto LABEL_289;
      }
      goto LABEL_194;
    }
    if (v10 != 12)
    {
      if (v10 != 96)
      {
        if (v10 != 97 || !(*(_WORD *)(v18 + 1020) & 0x10 | v220 & 0x40)) {
          goto LABEL_186;
        }
        unsigned int v55 = *(uint64_t **)(a2 + 32);
        uint64_t v56 = *v55;
        uint64_t v57 = v55[1];
        uint64_t v11 = (uint64_t *)v55[5];
        uint64_t v58 = v55[6];
        uint64_t v59 = sub_1CCFDEC10(*v55, v57, 1);
        if (v59)
        {
          uint64_t v61 = *(void *)(v59 + 80);
          uint64_t v62 = *(_UNKNOWN **)(v61 + 32) == &unk_1CFB2E344 ? *(void *)(v61 + 40) : v61 + 24;
          if ((*(unsigned char *)(v62 + 28) & 7) == 3)
          {
            *a7 = 0;
            goto LABEL_289;
          }
        }
        *a7 = 1;
        unsigned int v147 = sub_1CCFDED5C((uint64_t)a4, 97, (const llvm::APInt *)&v226, v222, v221, (uint64_t)v11, v58, v60, v56, v57, v220);
LABEL_288:
        uint64_t v11 = v147;
        goto LABEL_289;
      }
      if (!(*(_WORD *)(v18 + 1020) & 0x10 | v220 & 0x40)
        || a5
        && (!(_BYTE)v222
         || v222 != 1 && !*(void *)(a1 + 8 * v222 + 96)
         || !(_BYTE)v222
         || (*(unsigned __int8 *)(a1 + 390 * v222 + 3959) | 4) != 4))
      {
        goto LABEL_186;
      }
      uint64_t v91 = *(uint64_t **)(a2 + 32);
      uint64_t v93 = *v91;
      uint64_t v92 = v91[1];
      uint64_t v216 = v91[6];
      uint64_t v219 = (llvm::detail::DoubleAPFloat *)v91[5];
      LODWORD(v228) = 2;
      uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, void **, uint64_t))(*(void *)a1 + 1808))(a1, v93, v92, a4, a5, a6, &v228, v26);
      uint64_t v96 = v95;
      if (v94)
      {
        uint64_t v213 = v92;
        uint64_t v97 = v93;
        uint64_t v98 = v26;
        uint64_t v99 = operator new(0x88uLL);
        void *v99 = 0;
        v99[1] = 0;
        sub_1CD7875EC((uint64_t)(v99 + 2), v94, v96);
        uint64_t v100 = v224[0];
        void *v99 = v224[0];
        v99[1] = v224;
        *(void *)(v100 + 8) = v99;
        v224[0] = (uint64_t)v99;
        uint64_t v26 = v98;
        uint64_t v93 = v97;
        uint64_t v92 = v213;
        ++v225;
      }
      int v237 = 2;
      uint64_t v75 = (*(uint64_t (**)(uint64_t, llvm::detail::DoubleAPFloat *, uint64_t, void *, uint64_t, uint64_t, int *, uint64_t))(*(void *)a1 + 1808))(a1, v219, v216, a4, a5, a6, &v237, v26);
      uint64_t v77 = v101;
      sub_1CD81B144(v224);
      if (!v94 || (int)v228 > v237)
      {
        if (!v75) {
          goto LABEL_186;
        }
        *a7 = v237;
        uint64_t v11 = sub_1CCFDED5C((uint64_t)a4, 97, (const llvm::APInt *)&v226, v222, v221, v75, v77, v102, v93, v92, v220);
        BOOL v105 = (uint64_t *)v94 == v11 && v96 == v103;
        if (!v94) {
          goto LABEL_289;
        }
        if (v105) {
          goto LABEL_289;
        }
        uint64_t v75 = v94;
        if (*(void *)(v94 + 48)) {
          goto LABEL_289;
        }
        goto LABEL_194;
      }
      *a7 = (int)v228;
      uint64_t v151 = sub_1CCFDED5C((uint64_t)a4, 97, (const llvm::APInt *)&v226, v222, v221, v94, v96, v102, (uint64_t)v219, v216, v220);
      goto LABEL_188;
    }
    if ((_BYTE)v222
      && (v222 == 1 || (_BYTE)v222 && *(void *)(a1 + 8 * v222 + 96))
      && !*(unsigned char *)(a1 + 390 * v222 + 3874))
    {
LABEL_145:
      uint64_t v122 = *(void *)(a2 + 80);
      uint64_t v123 = *(void *)(v122 + 32);
      if ((_UNKNOWN *)v123 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v229, (const llvm::detail::DoubleAPFloat *)(v122 + 32));
      }
      else
      {
        uint64_t v229 = *(void *)(v122 + 32);
        if ((*(_DWORD *)(v123 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        char v124 = *(unsigned char *)(v122 + 52);
        int v125 = v124 & 7;
        char v232 = v232 & 0xF0 | v124 & 0xF;
        int v231 = *(_DWORD *)(v122 + 48);
        BOOL v127 = (v124 & 6) != 0 && v125 != 3;
        if (v125 == 1 || v127)
        {
          uint64_t v128 = *(unsigned int *)(v229 + 8);
          if ((v128 - 64) <= 0xFFFFFF7F) {
            uint64_t v129 = v230;
          }
          else {
            uint64_t v129 = (uint64_t *)&v230;
          }
          uint64_t v132 = *(uint64_t **)(v122 + 40);
          uint64_t v131 = (uint64_t *)(v122 + 40);
          uint64_t v130 = v132;
          if ((*(_DWORD *)(*(v131 - 1) + 8) - 64) >= 0xFFFFFF80) {
            uint64_t v130 = v131;
          }
          if (v128 <= 0xFFFFFFBF)
          {
            unint64_t v133 = (unint64_t)(v128 + 64) >> 6;
            do
            {
              uint64_t v134 = *v130++;
              *v129++ = v134;
              --v133;
            }
            while (v133);
          }
        }
      }
      if ((_UNKNOWN *)v229 == &unk_1CFB2E344)
      {
        sub_1CBFC6FB8((uint64_t)v230);
        sub_1CBFC6FB8((uint64_t)(v230 + 4));
      }
      else
      {
        v232 ^= 8u;
      }
      unsigned int v135 = sub_1CD7ECA8C((uint64_t)a4, (llvm::LLVMContext *)&v228, (const llvm::APFloat *)&v226, v222, v221, 0);
      uint64_t v11 = v135;
      uint64_t v137 = *(void *)(a2 + 48);
      if (!v137) {
        goto LABEL_179;
      }
      int v138 = 1;
      do
      {
        if (*(_DWORD *)(v137 + 8) == a3)
        {
          if (!v138) {
            goto LABEL_179;
          }
          --v138;
        }
        uint64_t v137 = *(void *)(v137 + 32);
      }
      while (v137);
      if (v138)
      {
LABEL_179:
        uint64_t v150 = v135[6];
        if (!v150)
        {
LABEL_182:
          char v139 = 1;
LABEL_183:
          if ((_UNKNOWN *)v229 == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v230);
          }
          else if ((*(_DWORD *)(v229 + 8) - 64) <= 0xFFFFFF7F && v230)
          {
            MEMORY[0x1D25D9CB0](v230, 0x1000C8000313F17);
          }
          if ((v139 & 1) == 0) {
            goto LABEL_289;
          }
          goto LABEL_186;
        }
        while (*(_DWORD *)(v150 + 8) != v136)
        {
          uint64_t v150 = *(void *)(v150 + 32);
          if (!v150) {
            goto LABEL_182;
          }
        }
      }
      char v139 = 0;
      *a7 = 1;
      goto LABEL_183;
    }
    uint64_t v106 = *(void *)(a2 + 80);
    uint64_t v107 = *(void *)(v106 + 32);
    if ((_UNKNOWN *)v107 == &unk_1CFB2E344)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v233, (const llvm::detail::DoubleAPFloat *)(v106 + 32));
    }
    else
    {
      int v233 = *(unsigned int **)(v106 + 32);
      if ((*(_DWORD *)(v107 + 8) + 64) >= 0x80) {
        operator new[]();
      }
      char v108 = *(unsigned char *)(v106 + 52);
      int v109 = v108 & 7;
      char v236 = v236 & 0xF0 | v108 & 0xF;
      int v235 = *(_DWORD *)(v106 + 48);
      BOOL v111 = (v108 & 6) != 0 && v109 != 3;
      if (v109 == 1 || v111)
      {
        uint64_t v112 = v233[2];
        if ((v112 - 64) <= 0xFFFFFF7F) {
          int64_t v113 = v234;
        }
        else {
          int64_t v113 = (uint64_t *)&v234;
        }
        int v116 = *(uint64_t **)(v106 + 40);
        uint64_t v115 = (uint64_t *)(v106 + 40);
        long long v114 = v116;
        if ((*(_DWORD *)(*(v115 - 1) + 8) - 64) >= 0xFFFFFF80) {
          long long v114 = v115;
        }
        if (v112 <= 0xFFFFFFBF)
        {
          unint64_t v117 = (unint64_t)(v112 + 64) >> 6;
          do
          {
            uint64_t v118 = *v114++;
            *v113++ = v118;
            --v117;
          }
          while (v117);
        }
      }
    }
    unint64_t v119 = v233;
    if (v233 == (unsigned int *)&unk_1CFB2E344)
    {
      sub_1CBFC6FB8((uint64_t)v234);
      sub_1CBFC6FB8((uint64_t)(v234 + 4));
      unint64_t v119 = v233;
      if (v233 == (unsigned int *)&unk_1CFB2E344)
      {
        uint64_t v120 = (uint64_t)v234;
        unint64_t v234 = 0;
        unint64_t v119 = &unk_1CFB2E344;
LABEL_140:
        uint64_t v229 = (uint64_t)v119;
        uint64_t v230 = (uint64_t *)v120;
        int v233 = (unsigned int *)&unk_1CFB2E394;
        int v121 = (*(uint64_t (**)(uint64_t, void **, llvm *, uint64_t, uint64_t))(*(void *)a1 + 480))(a1, &v228, v222, v221, a6);
        if ((_UNKNOWN *)v229 == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v230);
        }
        else if ((*(_DWORD *)(v229 + 8) - 64) <= 0xFFFFFF7F && v230)
        {
          MEMORY[0x1D25D9CB0](v230, 0x1000C8000313F17);
        }
        if (v233 == (unsigned int *)&unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v234);
        }
        else if (v233[2] - 64 <= 0xFFFFFF7F && v234)
        {
          MEMORY[0x1D25D9CB0](v234, 0x1000C8000313F17);
        }
        if ((a5 ^ 1 | v121) != 1) {
          goto LABEL_186;
        }
        goto LABEL_145;
      }
    }
    else
    {
      v236 ^= 8u;
    }
    uint64_t v120 = (uint64_t)v234;
    int v231 = v235;
    char v232 = v232 & 0xF0 | v236 & 0xF;
    goto LABEL_140;
  }
  if ((int)v10 > 211)
  {
    if (v10 == 212)
    {
      uint64_t v140 = (*(uint64_t (**)(uint64_t, void, void, void *, uint64_t, uint64_t, int *, uint64_t))(*(void *)a1 + 1808))(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a4, a5, a6, a7, v26);
      if (!v140) {
        goto LABEL_186;
      }
      uint64_t v143 = *(void *)(a2 + 32);
      uint64_t v144 = *(void *)(v143 + 40);
      uint64_t v145 = *(void *)(v143 + 48);
      uint64_t v146 = a4[104];
      if (v146) {
        LOWORD(v146) = *(_WORD *)(v146 + 8);
      }
      unsigned int v147 = sub_1CCFDED5C((uint64_t)a4, 212, (const llvm::APInt *)&v226, v222, v221, v140, v141, v142, v144, v145, v146);
    }
    else
    {
      if (v10 != 215 && v10 != 226) {
        goto LABEL_186;
      }
      uint64_t v63 = (*(uint64_t (**)(uint64_t, void, void, void *, uint64_t, uint64_t, int *, uint64_t))(*(void *)a1 + 1808))(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), a4, a5, a6, a7, v26);
      if (!v63) {
        goto LABEL_186;
      }
      uint64_t v65 = a4[104];
      if (v65) {
        __int16 v66 = *(_WORD *)(v65 + 8);
      }
      else {
        __int16 v66 = 0;
      }
      unsigned int v147 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)v10, (uint64_t)&v226, v222, v221, v63, v64, v66);
    }
    goto LABEL_288;
  }
  if ((v10 - 141) < 2)
  {
    if (*(_WORD *)(v18 + 1020) & 0x10 | v220 & 0x40)
    {
      unsigned int v28 = *(uint64_t **)(a2 + 32);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      uint64_t v31 = v28[6];
      BOOL v217 = (llvm::detail::DoubleAPFloat *)v28[5];
      uint64_t v32 = v28[10];
      uint64_t v33 = v28[11];
      LODWORD(v228) = 2;
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, void **, uint64_t))(*(void *)a1 + 1808))(a1, v32, v33, a4, a5, a6, &v228, v26);
      if (v34)
      {
        uint64_t v209 = v31;
        uint64_t v36 = v34;
        uint64_t v214 = v30;
        uint64_t v37 = v35;
        unsigned int v211 = v26;
        unint64_t v38 = operator new(0x88uLL);
        void *v38 = 0;
        v38[1] = 0;
        uint64_t v207 = v37;
        sub_1CD7875EC((uint64_t)(v38 + 2), v36, v37);
        uint64_t v39 = v224[0];
        void *v38 = v224[0];
        v38[1] = v224;
        *(void *)(v39 + 8) = v38;
        v224[0] = (uint64_t)v38;
        uint64_t v40 = v211;
        ++v225;
        int v237 = 2;
        uint64_t v206 = v29;
        uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t, int *, void))(*(void *)a1 + 1808))(a1, v29, v214, a4, a5, a6, &v237, v211);
        uint64_t v43 = v42;
        if (v41)
        {
          unint64_t v44 = operator new(0x88uLL);
          void *v44 = 0;
          v44[1] = 0;
          sub_1CD7875EC((uint64_t)(v44 + 2), v41, v43);
          uint64_t v45 = v224[0];
          void *v44 = v224[0];
          v44[1] = v224;
          *(void *)(v45 + 8) = v44;
          v224[0] = (uint64_t)v44;
          uint64_t v40 = v211;
          ++v225;
        }
        int v223 = 2;
        uint64_t v46 = (*(uint64_t (**)(uint64_t, llvm::detail::DoubleAPFloat *, uint64_t, void *, uint64_t, uint64_t, int *, uint64_t))(*(void *)a1 + 1808))(a1, v217, v209, a4, a5, a6, &v223, v40);
        uint64_t v48 = v47;
        sub_1CD81B144(v224);
        if (v41 && (int v50 = v237, v237 <= v223))
        {
          if ((int)v228 < v237) {
            int v50 = (int)v228;
          }
          *a7 = v50;
          BOOL v203 = sub_1CD7F5D38(a4, (const char *)v10, (const llvm::APInt *)&v226, v222, v221, v41, v43, v49, (uint64_t)v217, v209, v36, v207, SHIDWORD(v207), v220);
          uint64_t v11 = v203;
          BOOL v205 = v48 == v204 && v46 == (void)v203;
          if (v205 || !v46 || *(void *)(v46 + 48)) {
            goto LABEL_289;
          }
        }
        else
        {
          if (!v46) {
            goto LABEL_186;
          }
          int v51 = (int)v228;
          if ((int)v228 >= v223) {
            int v51 = v223;
          }
          *a7 = v51;
          uint64_t v11 = sub_1CD7F5D38(a4, (const char *)v10, (const llvm::APInt *)&v226, v222, v221, v206, v214, v49, v46, v48, v36, v207, SHIDWORD(v207), v220);
          BOOL v54 = (uint64_t *)v41 == v11 && v43 == v52;
          if (!v41) {
            goto LABEL_289;
          }
          if (v54) {
            goto LABEL_289;
          }
          uint64_t v46 = v41;
          if (*(void *)(v41 + 48)) {
            goto LABEL_289;
          }
        }
        uint64_t v154 = a4;
        uint64_t v155 = v46;
LABEL_195:
        sub_1CD7EA438(v154, v155);
        goto LABEL_289;
      }
    }
LABEL_186:
    uint64_t v11 = 0;
    goto LABEL_289;
  }
  if (v10 != 146) {
    goto LABEL_186;
  }
  uint64_t v84 = *(void *)(a2 + 32);
  if (*(_WORD *)(a2 + 56))
  {
    uint64_t v85 = 40 * *(unsigned __int16 *)(a2 + 56);
    uint64_t v86 = *(void *)(a2 + 32);
    do
    {
      unsigned int v87 = *(unsigned __int16 *)(*(void *)v86 + 24);
      BOOL v88 = v87 > 0x33;
      uint64_t v89 = (1 << v87) & 0x8001000001000;
      if (v88 || v89 == 0) {
        goto LABEL_186;
      }
      v86 += 40;
      v85 -= 40;
    }
    while (v85);
  }
  if ((_BYTE)v222
    && (v222 == 1 || (_BYTE)v222 && *(void *)(a1 + 8 * v222 + 96))
    && !*(unsigned char *)(a1 + 390 * v222 + 3874))
  {
    if (!*(_WORD *)(a2 + 56) || !*(unsigned char *)(a1 + 390 * v222 + 4008)) {
      goto LABEL_177;
    }
  }
  else if (!*(_WORD *)(a2 + 56))
  {
    goto LABEL_177;
  }
  uint64_t v156 = v84 + 40 * *(unsigned __int16 *)(a2 + 56);
  while (2)
  {
    if (*(_WORD *)(*(void *)v84 + 24) == 51) {
      goto LABEL_227;
    }
    uint64_t v157 = *(void *)(*(void *)v84 + 80);
    uint64_t v158 = *(void *)(v157 + 32);
    if ((_UNKNOWN *)v158 == &unk_1CFB2E344)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v238, (const llvm::detail::DoubleAPFloat *)(v157 + 32));
    }
    else
    {
      uint64_t v238 = *(_DWORD **)(v157 + 32);
      if ((*(_DWORD *)(v158 + 8) + 64) >= 0x80) {
        operator new[]();
      }
      char v159 = *(unsigned char *)(v157 + 52);
      int v160 = v159 & 7;
      char v241 = v241 & 0xF0 | v159 & 0xF;
      int v240 = *(_DWORD *)(v157 + 48);
      BOOL v162 = (v159 & 6) != 0 && v160 != 3;
      if (v160 == 1 || v162)
      {
        uint64_t v164 = v238[2];
        uint64_t v165 = (uint64_t *)&v239;
        if ((v164 - 64) <= 0xFFFFFF7F) {
          uint64_t v165 = v239;
        }
        int v168 = *(uint64_t **)(v157 + 40);
        char v167 = (uint64_t *)(v157 + 40);
        int v166 = v168;
        if ((*(_DWORD *)(*(v167 - 1) + 8) - 64) >= 0xFFFFFF80) {
          int v166 = v167;
        }
        if (v164 <= 0xFFFFFFBF)
        {
          unint64_t v169 = (unint64_t)(v164 + 64) >> 6;
          do
          {
            uint64_t v170 = *v166++;
            *v165++ = v170;
            --v169;
          }
          while (v169);
        }
      }
    }
    uint64_t v171 = (uint64_t)v238;
    if (v238 != (_DWORD *)&unk_1CFB2E344)
    {
      v241 ^= 8u;
      goto LABEL_221;
    }
    sub_1CBFC6FB8((uint64_t)v239);
    sub_1CBFC6FB8((uint64_t)(v239 + 4));
    uint64_t v171 = (uint64_t)v238;
    if (v238 == (_DWORD *)&unk_1CFB2E344)
    {
      uint64_t v173 = (uint64_t)v239;
      BOOL v239 = 0;
      uint64_t v229 = (uint64_t)&unk_1CFB2E344;
      uint64_t v230 = (uint64_t *)v173;
    }
    else
    {
LABEL_221:
      uint64_t v229 = v171;
      uint64_t v230 = v239;
      int v231 = v240;
      char v232 = v232 & 0xF0 | v241 & 0xF;
    }
    uint64_t v238 = &unk_1CFB2E394;
    int v172 = (*(uint64_t (**)(uint64_t, void **, llvm *, uint64_t, uint64_t))(*(void *)a1 + 480))(a1, &v228, v222, v221, a6);
    if ((_UNKNOWN *)v229 == &unk_1CFB2E344)
    {
      sub_1CB845718((uint64_t *)&v230);
    }
    else if ((*(_DWORD *)(v229 + 8) - 64) <= 0xFFFFFF7F && v230)
    {
      MEMORY[0x1D25D9CB0](v230, 0x1000C8000313F17);
    }
    if (v238 == (_DWORD *)&unk_1CFB2E344)
    {
      sub_1CB845718((uint64_t *)&v239);
    }
    else if ((v238[2] - 64) <= 0xFFFFFF7F && v239)
    {
      MEMORY[0x1D25D9CB0](v239, 0x1000C8000313F17);
    }
    if (v172)
    {
LABEL_227:
      v84 += 40;
      if (v84 == v156) {
        goto LABEL_177;
      }
      continue;
    }
    break;
  }
  if (a5) {
    goto LABEL_186;
  }
LABEL_177:
  uint64_t v228 = &v230;
  uint64_t v229 = 0x400000000;
  if (*(_WORD *)(a2 + 56))
  {
    unsigned int v174 = *(void **)(a2 + 32);
    uint64_t v175 = &v174[5 * *(unsigned __int16 *)(a2 + 56)];
    do
    {
      uint64_t v177 = *v174;
      uint64_t v176 = v174[1];
      if (*(_WORD *)(*v174 + 24) == 51)
      {
        if (v229 >= (unint64_t)HIDWORD(v229)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v178 = (char *)v228 + 16 * v229;
        void *v178 = v177;
        v178[1] = v176;
        LODWORD(v229) = v229 + 1;
      }
      else
      {
        uint64_t v179 = *(void *)(v177 + 80);
        uint64_t v180 = *(void *)(v179 + 32);
        if ((_UNKNOWN *)v180 == &unk_1CFB2E344)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v238, (const llvm::detail::DoubleAPFloat *)(v179 + 32));
        }
        else
        {
          uint64_t v238 = *(_DWORD **)(v179 + 32);
          if ((*(_DWORD *)(v180 + 8) + 64) >= 0x80) {
            operator new[]();
          }
          char v181 = *(unsigned char *)(v179 + 52);
          int v182 = v181 & 7;
          char v241 = v241 & 0xF0 | v181 & 0xF;
          int v240 = *(_DWORD *)(v179 + 48);
          BOOL v184 = (v181 & 6) != 0 && v182 != 3;
          if (v182 == 1 || v184)
          {
            uint64_t v186 = v238[2];
            int v187 = (uint64_t *)&v239;
            if ((v186 - 64) <= 0xFFFFFF7F) {
              int v187 = v239;
            }
            uint64_t v190 = *(uint64_t **)(v179 + 40);
            unsigned int v189 = (uint64_t *)(v179 + 40);
            unint64_t v188 = v190;
            if ((*(_DWORD *)(*(v189 - 1) + 8) - 64) >= 0xFFFFFF80) {
              unint64_t v188 = v189;
            }
            if (v186 <= 0xFFFFFFBF)
            {
              unint64_t v191 = (unint64_t)(v186 + 64) >> 6;
              do
              {
                uint64_t v192 = *v188++;
                *v187++ = v192;
                --v191;
              }
              while (v191);
            }
          }
        }
        if (v238 == (_DWORD *)&unk_1CFB2E344)
        {
          sub_1CBFC6FB8((uint64_t)v239);
          sub_1CBFC6FB8((uint64_t)(v239 + 4));
        }
        else
        {
          v241 ^= 8u;
        }
        uint64_t v193 = *(void *)(v177 + 40) + 16 * v176;
        uint64_t v195 = sub_1CD7ECA8C((uint64_t)a4, (llvm::LLVMContext *)&v237, (const llvm::APFloat *)&v226, *(llvm **)v193, *(void *)(v193 + 8), 0);
        if (v229 >= (unint64_t)HIDWORD(v229)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v196 = (uint64_t **)((char *)v228 + 16 * v229);
        *uint64_t v196 = v195;
        v196[1] = v194;
        LODWORD(v229) = v229 + 1;
        if (v238 == (_DWORD *)&unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v239);
        }
        else if ((v238[2] - 64) <= 0xFFFFFF7F && v239)
        {
          MEMORY[0x1D25D9CB0](v239, 0x1000C8000313F17);
        }
      }
      v174 += 5;
    }
    while (v174 != v175);
    uint64_t v149 = (uint64_t *)v228;
    uint64_t v148 = v229;
  }
  else
  {
    uint64_t v148 = 0;
    uint64_t v149 = (uint64_t *)&v230;
  }
  *a7 = 1;
  uint64_t v197 = a4[104];
  if (v197) {
    uint64_t v198 = *(unsigned __int16 *)(v197 + 8);
  }
  else {
    uint64_t v198 = 0;
  }
  uint64_t v11 = sub_1CD7FF4E8(a4, (const char *)0x92, (const llvm::APInt *)&v226, v222, v221, v149, v148, v198);
  if (v228 != &v230) {
    free(v228);
  }
LABEL_289:
  sub_1CD81B144(v224);
  if (v226)
  {
    int v199 = *v226;
    if ((v199 - 4) > 0x1E)
    {
      if ((v199 - 3) >= 0xFFFFFFFE) {
        int v202 = v226;
      }
      else {
        int v202 = 0;
      }
      if ((v199 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v201 = (unint64_t)(v202 + 8);
        goto LABEL_301;
      }
      if (v199 == 3) {
        *((void *)v226 + 1) = 0;
      }
    }
    else if ((v226[1] & 0x7F) == 2 || *((_DWORD *)v226 + 3))
    {
      uint64_t v200 = *((void *)v226 + 2);
      if ((v200 & 4) != 0)
      {
        unint64_t v201 = v200 & 0xFFFFFFFFFFFFFFF8;
        if (v201)
        {
LABEL_301:
          uint64_t v228 = &v226;
          sub_1CC5FA668(v201 + 16, &v228);
        }
      }
    }
  }
  return v11;
}

uint64_t sub_1CD0176B8(uint64_t *a1, uint64_t a2, llvm *a3, uint64_t a4, const llvm::APInt *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t *a11, llvm *a12, uint64_t a13, uint64_t a14, int a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t *a22,uint64_t a23)
{
  BOOL v27 = (char)a12;
  unint64_t v395 = a3;
  uint64_t v396 = a4;
  int v393 = a12;
  uint64_t v394 = a13;
  if (!a15)
  {
    BOOL v31 = 1;
    BOOL v27 = 1;
    BOOL v29 = 1;
    BOOL v28 = 1;
    goto LABEL_22;
  }
  if (!(_BYTE)a12)
  {
    BOOL v28 = 0;
    BOOL v29 = 0;
LABEL_12:
    BOOL v31 = 0;
    goto LABEL_15;
  }
  if (a12 != 1 && (!a1[a12 + 12] || a12 == 0))
  {
    BOOL v28 = 0;
    BOOL v29 = 0;
    BOOL v27 = 0;
    goto LABEL_12;
  }
  uint64_t v32 = (char *)a1 + 390 * a12;
  BOOL v29 = (v32[4022] & 0xFB) == 0;
  BOOL v28 = (v32[4021] & 0xFB) == 0;
  BOOL v27 = (v32[3925] & 0xFB) == 0;
  int v33 = v32[3926];
  if (!v33)
  {
    BOOL v31 = 1;
    goto LABEL_22;
  }
  BOOL v31 = v33 == 4;
  if (v28) {
    goto LABEL_22;
  }
LABEL_15:
  if (!v29 && !v31 && !v27) {
    return 0;
  }
LABEL_22:
  BOOL v381 = v28;
  BOOL v382 = v31;
  BOOL v380 = v29;
  int v384 = a2;
  unsigned int v387 = sub_1CD3E12F4((unsigned __int8 *)&v395, a2, (BOOL)a3);
  unsigned int v385 = sub_1CD3E12F4((unsigned __int8 *)&v393, v36, v37);
  unint64_t v38 = a16;
  uint64_t v39 = a20;
  uint64_t v41 = sub_1CD7F95FC(a14, (uint64_t)v393, v394, (uint64_t)v393, v394);
  uint64_t v42 = v40;
  if ((unint64_t)a16 | (unint64_t)a20)
  {
    unsigned int v44 = a21;
    unsigned int v45 = a17;
    if (a16) {
      goto LABEL_37;
    }
    return 0;
  }
  if (!(_BYTE)v393) {
    return 0;
  }
  uint64_t v43 = (uint64_t)a5;
  if (v393 != 1)
  {
    uint64_t v34 = 0;
    if (!a1[v393 + 12]) {
      return v34;
    }
  }
  if ((*((unsigned __int8 *)a1 + 390 * v393 + 4063) | 4) != 4) {
    return 0;
  }
  uint64_t v46 = *(void *)(a14 + 832);
  uint64_t v376 = v41;
  uint64_t v378 = v40;
  __int16 v47 = v46 ? *(_WORD *)(v46 + 8) : 0;
  a5 = (const llvm::APInt *)v43;
  unint64_t v38 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC9, v43, v393, v394, a6, a7, v47);
  uint64_t v48 = *(void *)(a14 + 832);
  unsigned int v45 = v49;
  __int16 v50 = v48 ? *(_WORD *)(v48 + 8) : 0;
  uint64_t v39 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC9, (uint64_t)a5, v393, v394, a9, a10, v50);
  uint64_t v41 = v376;
  uint64_t v42 = v378;
  if (!v38) {
    return 0;
  }
LABEL_37:
  uint64_t v377 = v41;
  uint64_t v379 = v42;
  unsigned int v392 = v387;
  unsigned int v370 = v44;
  unsigned int v372 = v45;
  if (v387 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v391);
  }
  uint64_t v391 = 0;
  uint64_t v51 = a14;
  if (v385)
  {
    unsigned int v52 = v387 - v385;
    if (v387 - v385 > 0x3F) {
      llvm::APInt::setBitsSlowCase(&v391, v52, v387);
    }
    else {
      v391 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v385 << v52;
    }
    uint64_t v51 = a14;
  }
  uint64_t v374 = (uint64_t)v39;
  unint64_t v367 = a17 & 0xFFFFFFFF00000000;
  unint64_t v53 = a21 & 0xFFFFFFFF00000000;
  uint64_t v54 = v51;
  int v375 = a5;
  if (!sub_1CD7F11AC(v51, a6, (BOOL)a7, (uint64_t)&v391, 0))
  {
    uint64_t v57 = v54;
LABEL_57:
    unsigned int v56 = v387;
    goto LABEL_58;
  }
  if (!sub_1CD7F11AC(v54, a9, (BOOL)a10, (uint64_t)&v391, 0))
  {
    uint64_t v57 = a14;
    goto LABEL_57;
  }
  unsigned int v56 = v387;
  if (v382)
  {
    uint64_t v65 = sub_1CD7FFB18((void *)a14, (const char *)0x40, a5, v377, v379, (uint64_t)v38, v372, v55, v374, v370);
    unsigned int v63 = v140;
    uint64_t v67 = 1;
    uint64_t v61 = v65;
LABEL_51:
    unsigned int v68 = *((_DWORD *)a11 + 2);
    uint64_t v69 = a11 + 1;
    if (v68 >= *((_DWORD *)a11 + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v70 = (uint64_t **)(*a11 + 16 * v68);
    *uint64_t v70 = v61;
    v70[1] = (uint64_t *)v63;
    unsigned int v71 = *((_DWORD *)a11 + 3);
    unsigned int v72 = *((_DWORD *)a11 + 2) + 1;
    *((_DWORD *)a11 + 2) = v72;
    if (v72 >= v71) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v73 = (uint64_t **)(*a11 + 16 * v72);
    *unsigned int v73 = v65;
    v73[1] = (uint64_t *)v67;
    ++*((_DWORD *)a11 + 2);
    if (v384 == 58) {
      goto LABEL_109;
    }
    uint64_t v75 = sub_1CD7EBF14(a14, 0, a5, v393, v394, 0, 0);
    uint64_t v76 = v74;
    uint64_t v77 = a11;
    unsigned int v78 = *((_DWORD *)a11 + 2);
    if (v78 >= *((_DWORD *)a11 + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v79 = (uint64_t **)(*a11 + 16 * v78);
    *uint64_t v79 = v75;
    v79[1] = (uint64_t *)v74;
    goto LABEL_74;
  }
  uint64_t v57 = a14;
  if (v381)
  {
    uint64_t v58 = *(void *)(a14 + 832);
    if (v58) {
      LOWORD(v58) = *(_WORD *)(v58 + 8);
    }
    uint64_t v59 = (uint64_t)v38;
    uint64_t v61 = sub_1CCFDED5C(a14, 58, a5, v393, v394, (uint64_t)v38, v372 | v367, v55, v374, v370 | v53, v58);
    unsigned int v63 = v62;
    uint64_t v64 = *(void *)(a14 + 832);
    if (v64) {
      LOWORD(v64) = *(_WORD *)(v64 + 8);
    }
    uint64_t v65 = sub_1CCFDED5C(a14, 159, a5, v393, v394, v59, v372 | v367, v60, v374, v370 | v53, v64);
    uint64_t v67 = v66;
    goto LABEL_51;
  }
  BOOL v381 = 0;
LABEL_58:
  uint64_t v366 = (uint64_t)v38;
  if ((_BYTE)v395) {
    BOOL v80 = v395 - 15 < 0x9C;
  }
  else {
    BOOL v80 = (*(_DWORD *)(v396 + 8) & 0xFE) == 18;
  }
  if (v384 == 58 && !v80)
  {
    unsigned int v81 = sub_1CD7F2D8C(v57, a6, (BOOL)a7, 0);
    unsigned int v56 = v387;
    uint64_t v57 = a14;
    if (v81 > v385)
    {
      unsigned int v82 = sub_1CD7F2D8C(a14, a9, (BOOL)a10, 0);
      unsigned int v56 = v387;
      uint64_t v57 = a14;
      if (v82 > v385)
      {
        if (v27)
        {
          uint64_t v75 = sub_1CD7FFB18((void *)a14, (const char *)0x3F, a5, v377, v379, (uint64_t)v38, v372, v83, v374, v370);
          unsigned int v88 = v166;
          uint64_t v76 = 1;
          uint64_t v86 = v75;
LABEL_72:
          uint64_t v77 = a11;
          unsigned int v91 = *((_DWORD *)a11 + 2);
          uint64_t v69 = a11 + 1;
          if (v91 >= *((_DWORD *)a11 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v92 = (uint64_t **)(*a11 + 16 * v91);
          *uint64_t v92 = v86;
          v92[1] = (uint64_t *)v88;
LABEL_74:
          unsigned int v93 = *((_DWORD *)v77 + 3);
          unsigned int v94 = *((_DWORD *)v77 + 2) + 1;
          *((_DWORD *)v77 + 2) = v94;
LABEL_106:
          if (v94 >= v93) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v138 = *v77;
LABEL_108:
          char v139 = (uint64_t **)(v138 + 16 * v94);
          *char v139 = v75;
          v139[1] = (uint64_t *)v76;
          ++*v69;
LABEL_109:
          uint64_t v34 = 1;
          goto LABEL_144;
        }
        if (v380)
        {
          uint64_t v84 = *(void *)(a14 + 832);
          if (v84) {
            LOWORD(v84) = *(_WORD *)(v84 + 8);
          }
          uint64_t v86 = sub_1CCFDED5C(a14, 58, a5, v393, v394, (uint64_t)v38, v372 | v367, v83, v374, v370 | v53, v84);
          unsigned int v88 = v87;
          uint64_t v89 = *(void *)(a14 + 832);
          if (v89) {
            LOWORD(v89) = *(_WORD *)(v89 + 8);
          }
          uint64_t v75 = sub_1CCFDED5C(a14, 160, a5, v393, v394, (uint64_t)v38, v372 | v367, v85, v374, v370 | v53, v89);
          uint64_t v76 = v90;
          goto LABEL_72;
        }
      }
    }
  }
  uint64_t v34 = a18;
  unsigned int v357 = a19;
  unint64_t v359 = a19 & 0xFFFFFFFF00000000;
  unsigned int v361 = a23;
  unint64_t v363 = a23 & 0xFFFFFFFF00000000;
  uint64_t v95 = v56 - v385;
  uint64_t v96 = v57;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v395, v396, *(void *)(**(void **)(v57 + 40) + 40) + 272, 1);
  uint64_t v99 = v98;
  uint64_t v100 = v95;
  uint64_t v101 = v375;
  uint64_t v102 = sub_1CD7EBF14(v96, v100, v375, ShiftAmountTy, v99, 0, 0);
  uint64_t v105 = (uint64_t)v102;
  uint64_t v386 = a22;
  if (a18 | (unint64_t)a22)
  {
    uint64_t v106 = v366;
    goto LABEL_80;
  }
  if (!(_BYTE)v395) {
    goto LABEL_143;
  }
  if (v395 == 1 || (uint64_t v34 = 0, a1[v395 + 12]))
  {
    if ((*((unsigned __int8 *)a1 + 390 * v395 + 4039) | 4) != 4 || !(_BYTE)v393) {
      goto LABEL_143;
    }
    if (v393 == 1 || (uint64_t v34 = 0, a1[v393 + 12]))
    {
      if ((*((unsigned __int8 *)a1 + 390 * v393 + 4063) | 4) != 4) {
        goto LABEL_143;
      }
      uint64_t v141 = v103;
      uint64_t v142 = *(void *)(a14 + 832);
      if (v142) {
        LOWORD(v142) = *(_WORD *)(v142 + 8);
      }
      uint64_t v144 = sub_1CCFDED5C(a14, 177, v375, v395, v396, a6, (uint64_t)a7, v104, (uint64_t)v102, v103, v142);
      uint64_t v145 = *(void *)(a14 + 832);
      if (v145) {
        __int16 v146 = *(_WORD *)(v145 + 8);
      }
      else {
        __int16 v146 = 0;
      }
      unsigned int v189 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC9, (uint64_t)v375, v393, v394, (uint64_t)v144, (void *)(v143 | v359), v146);
      unsigned int v357 = v190;
      uint64_t v191 = *(void *)(a14 + 832);
      if (v191) {
        LOWORD(v191) = *(_WORD *)(v191 + 8);
      }
      uint64_t v193 = sub_1CCFDED5C(a14, 177, v375, v395, v396, a9, (uint64_t)a10, v188, v105, v141, v191);
      uint64_t v194 = *(void *)(a14 + 832);
      if (v194) {
        __int16 v195 = *(_WORD *)(v194 + 8);
      }
      else {
        __int16 v195 = 0;
      }
      uint64_t v101 = v375;
      uint64_t v386 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC9, (uint64_t)v375, v393, v394, (uint64_t)v193, (void *)(v192 | v363), v195);
      unsigned int v361 = v196;
      uint64_t v106 = v366;
      uint64_t v103 = v141;
      uint64_t v34 = (uint64_t)v189;
LABEL_80:
      if (v34)
      {
        uint64_t v107 = v370 | v53;
        if (v382)
        {
          uint64_t v389 = v34;
          uint64_t v356 = v103;
          uint64_t v388 = (void *)(v370 | v53);
          uint64_t v390 = (void *)(v372 | v367);
          uint64_t v115 = sub_1CD7FFB18((void *)a14, (const char *)0x40, v101, v377, v379, v106, v372, v104, v374, v370);
          unsigned int v112 = v165;
          uint64_t v117 = 1;
          uint64_t v110 = v115;
        }
        else
        {
          if (!v381) {
            goto LABEL_143;
          }
          uint64_t v108 = *(void *)(a14 + 832);
          uint64_t v356 = v103;
          uint64_t v389 = v34;
          if (v108) {
            LOWORD(v108) = *(_WORD *)(v108 + 8);
          }
          uint64_t v110 = sub_1CCFDED5C(a14, 58, v101, v393, v394, v106, v372 | v367, v104, v374, v370 | v53, v108);
          unsigned int v112 = v111;
          uint64_t v113 = *(void *)(a14 + 832);
          if (v113) {
            LOWORD(v113) = *(_WORD *)(v113 + 8);
          }
          uint64_t v388 = (void *)v107;
          uint64_t v390 = (void *)(v372 | v367);
          uint64_t v115 = sub_1CCFDED5C(a14, 159, v375, v393, v394, v366, (uint64_t)v390, v109, v374, v107, v113);
          uint64_t v117 = v116;
        }
        unsigned int v118 = *((_DWORD *)a11 + 2);
        uint64_t v69 = a11 + 1;
        if (v118 >= *((_DWORD *)a11 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v119 = (uint64_t **)(*a11 + 16 * v118);
        *unint64_t v119 = v110;
        v119[1] = (uint64_t *)v112;
        ++*((_DWORD *)a11 + 2);
        if (v384 == 58)
        {
          uint64_t v122 = *(void *)(a14 + 832);
          if (v122) {
            LOWORD(v122) = *(_WORD *)(v122 + 8);
          }
          char v124 = sub_1CCFDED5C(a14, 58, v375, v393, v394, v366, (uint64_t)v390, v114, (uint64_t)v386, v361 | v363, v122);
          unsigned int v126 = v125;
          uint64_t v127 = *(void *)(a14 + 832);
          if (v127) {
            LOWORD(v127) = *(_WORD *)(v127 + 8);
          }
          uint64_t v129 = sub_1CCFDED5C(a14, 58, v375, v393, v394, v389, v357 | v359, v123, v374, (uint64_t)v388, v127);
          unsigned int v131 = v130;
          uint64_t v132 = *(void *)(a14 + 832);
          if (v132) {
            LOWORD(v132) = *(_WORD *)(v132 + 8);
          }
          uint64_t v134 = sub_1CCFDED5C(a14, 56, v375, v393, v394, (uint64_t)v115, v117, v128, (uint64_t)v124, v126 | v363, v132);
          uint64_t v136 = *(void *)(a14 + 832);
          if (v136) {
            LOWORD(v136) = *(_WORD *)(v136 + 8);
          }
          uint64_t v75 = sub_1CCFDED5C(a14, 56, v375, v393, v394, (uint64_t)v134, v133, v135, (uint64_t)v129, v131 | v359, v136);
          uint64_t v76 = v137;
          uint64_t v77 = a11;
          unsigned int v94 = *((_DWORD *)a11 + 2);
          unsigned int v93 = *((_DWORD *)a11 + 3);
          goto LABEL_106;
        }
        uint64_t v120 = *(void *)(a14 + 832);
        if (v120) {
          __int16 v121 = *(_WORD *)(v120 + 8);
        }
        else {
          __int16 v121 = 0;
        }
        unsigned int v147 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC7, (uint64_t)v375, v395, v396, (uint64_t)v115, (void *)v117, v121);
        uint64_t v150 = v149;
        uint64_t v373 = v361 | v363;
        if (v382)
        {
          uint64_t v368 = (uint64_t)v147;
          uint64_t v371 = v105;
          uint64_t v157 = a14;
          uint64_t v158 = sub_1CD7FFB18((void *)a14, (const char *)0x40, v375, v377, v379, v366, (int)v390, v148, (uint64_t)v386, v373);
          unsigned int v155 = v197;
          uint64_t v364 = 1;
          BOOL v153 = v158;
          goto LABEL_127;
        }
        if (v381)
        {
          uint64_t v368 = (uint64_t)v147;
          uint64_t v371 = v105;
          uint64_t v151 = *(void *)(a14 + 832);
          if (v151) {
            LOWORD(v151) = *(_WORD *)(v151 + 8);
          }
          BOOL v153 = sub_1CCFDED5C(a14, 58, v375, v393, v394, v366, (uint64_t)v390, v148, (uint64_t)v386, v373, v151);
          unsigned int v155 = v154;
          uint64_t v156 = *(void *)(a14 + 832);
          if (v156) {
            LOWORD(v156) = *(_WORD *)(v156 + 8);
          }
          uint64_t v157 = a14;
          uint64_t v158 = sub_1CCFDED5C(a14, 159, v375, v393, v394, v366, (uint64_t)v390, v152, (uint64_t)v386, v373, v156);
          uint64_t v364 = v159;
LABEL_127:
          unint64_t v160 = v155;
          BOOL v162 = v395;
          uint64_t v161 = v396;
          uint64_t v163 = *(void *)(v157 + 832);
          if (v163) {
            __int16 v164 = *(_WORD *)(v163 + 8);
          }
          else {
            __int16 v164 = 0;
          }
          char v167 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC7, (uint64_t)v375, v395, v396, (uint64_t)v153, (void *)v160, v164);
          unsigned int v169 = v168;
          uint64_t v170 = *(void *)(a14 + 832);
          if (v170) {
            __int16 v171 = *(_WORD *)(v170 + 8);
          }
          else {
            __int16 v171 = 0;
          }
          uint64_t v173 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC7, (uint64_t)v375, v395, v396, (uint64_t)v158, (void *)v364, v171);
          uint64_t v175 = *(void *)(a14 + 832);
          if (v175) {
            LOWORD(v175) = *(_WORD *)(v175 + 8);
          }
          uint64_t v176 = sub_1CCFDED5C(a14, 175, v375, v395, v396, (uint64_t)v173, v172, v174, v371, v356, v175);
          uint64_t v179 = *(void *)(a14 + 832);
          if (v179) {
            LOWORD(v179) = *(_WORD *)(v179 + 8);
          }
          uint64_t v180 = sub_1CCFDED5C(a14, 172, v375, v395, v396, (uint64_t)v167, v169, v178, (uint64_t)v176, v177, v179);
          uint64_t v183 = *(void *)(a14 + 832);
          if (v183) {
            LOWORD(v183) = *(_WORD *)(v183 + 8);
          }
          uint64_t v185 = sub_1CCFDED5C(a14, 56, v375, v162, v161, v368, v150, v182, (uint64_t)v180, v181, v183);
          int v187 = v186;
          uint64_t v369 = v357 | v359;
          if (v382)
          {
            uint64_t v198 = sub_1CD7FFB18((void *)a14, (const char *)0x40, v375, v377, v379, v389, v369, v184, v374, (int)v388);
            unsigned int v200 = v199;
            uint64_t v358 = 1;
            uint64_t v354 = v198;
          }
          else
          {
            if (!v381) {
              goto LABEL_143;
            }
            uint64_t v201 = *(void *)(a14 + 832);
            if (v201) {
              LOWORD(v201) = *(_WORD *)(v201 + 8);
            }
            uint64_t v354 = sub_1CCFDED5C(a14, 58, v375, v393, v394, v389, v369, v184, v374, (uint64_t)v388, v201);
            unsigned int v200 = v203;
            uint64_t v204 = *(void *)(a14 + 832);
            if (v204) {
              LOWORD(v204) = *(_WORD *)(v204 + 8);
            }
            uint64_t v198 = sub_1CCFDED5C(a14, 159, v375, v393, v394, v389, v369, v202, v374, (uint64_t)v388, v204);
            uint64_t v358 = v205;
          }
          int v360 = v187;
          unint64_t v362 = v150 & 0xFFFFFFFF00000000;
          uint64_t v206 = sub_1CD7EBF14(a14, 0, v375, v393, v394, 0, 0);
          int v352 = v207;
          uint64_t v353 = (uint64_t)v206;
          uint64_t v365 = (llvm *)(*(uint64_t (**)(uint64_t *, uint64_t, void, llvm *, uint64_t))(*a1 + 400))(a1, *(void *)(**(void **)(a14 + 40) + 40) + 272, *(void *)(a14 + 56), v395, v396);
          uint64_t v209 = v208;
          if ((_BYTE)v395
            && (v395 == 1 || a1[v395 + 12])
            && (*((unsigned __int8 *)a1 + 390 * v395 + 3930) | 4) == 4
            && (v395 == 1 || a1[v395 + 12])
            && (*((unsigned __int8 *)a1 + 390 * v395 + 3932) | 4) == 4)
          {
            uint64_t v210 = sub_1CD7F95FC(a14, (uint64_t)v395, v396, 172, 0);
            uint64_t v212 = v211;
            __int16 v213 = 0;
            uint64_t v214 = *(void *)(a14 + 832);
            if (v214) {
              __int16 v213 = *(_WORD *)(v214 + 8);
            }
            uint64_t v215 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC7, (uint64_t)v375, v395, v396, (uint64_t)v354, (void *)v200, v213);
            unsigned int v217 = v216;
            uint64_t v218 = *(void *)(a14 + 832);
            if (v218) {
              __int16 v219 = *(_WORD *)(v218 + 8);
            }
            else {
              __int16 v219 = 0;
            }
            char v269 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC7, (uint64_t)v375, v395, v396, (uint64_t)v198, (void *)v358, v219);
            uint64_t v271 = *(void *)(a14 + 832);
            if (v271) {
              LOWORD(v271) = *(_WORD *)(v271 + 8);
            }
            int64_t v272 = sub_1CCFDED5C(a14, 175, v375, v395, v396, (uint64_t)v269, v268, v270, v371, v356, v271);
            uint64_t v275 = *(void *)(a14 + 832);
            if (v275) {
              LOWORD(v275) = *(_WORD *)(v275 + 8);
            }
            unsigned int v276 = sub_1CCFDED5C(a14, 172, v375, v395, v396, (uint64_t)v215, v217, v274, (uint64_t)v272, v273, v275);
            unsigned int v244 = sub_1CD7FFB18((void *)a14, (const char *)0x44, v375, v210, v212, (uint64_t)v185, v360, v278, (uint64_t)v276, v277);
            int v245 = 1;
          }
          else
          {
            uint64_t v220 = sub_1CD7F95FC(a14, (uint64_t)v395, v396, (uint64_t)v365, v208);
            uint64_t v222 = v221;
            uint64_t v223 = *(void *)(a14 + 832);
            if (v223) {
              __int16 v224 = *(_WORD *)(v223 + 8);
            }
            else {
              __int16 v224 = 0;
            }
            uint64_t v355 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC7, (uint64_t)v375, v395, v396, (uint64_t)v354, (void *)v200, v224);
            unsigned int v226 = v225;
            uint64_t v227 = *(void *)(a14 + 832);
            if (v227) {
              __int16 v228 = *(_WORD *)(v227 + 8);
            }
            else {
              __int16 v228 = 0;
            }
            uint64_t v230 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC7, (uint64_t)v375, v395, v396, (uint64_t)v198, (void *)v358, v228);
            uint64_t v232 = *(void *)(a14 + 832);
            if (v232) {
              LOWORD(v232) = *(_WORD *)(v232 + 8);
            }
            int v233 = sub_1CCFDED5C(a14, 175, v375, v395, v396, (uint64_t)v230, v229, v231, v371, v356, v232);
            uint64_t v236 = *(void *)(a14 + 832);
            if (v236) {
              LOWORD(v236) = *(_WORD *)(v236 + 8);
            }
            int v237 = sub_1CCFDED5C(a14, 172, v375, v395, v396, (uint64_t)v355, v226, v235, (uint64_t)v233, v234, v236);
            int v239 = v238;
            int v240 = sub_1CD7EBF14(a14, 0, v375, v365, v209, 0, 0);
            unsigned int v244 = sub_1CD7FFB94((void *)a14, (const char *)0x48, v375, v220, v222, (uint64_t)v185, v360, v242, (uint64_t)v237, v239, (uint64_t)v240, v241);
            int v245 = 0;
          }
          uint64_t v246 = (void *)(v243 | v362);
          uint64_t v247 = *(void *)(a14 + 832);
          if (v247) {
            __int16 v248 = *(_WORD *)(v247 + 8);
          }
          else {
            __int16 v248 = 0;
          }
          uint64_t v251 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC9, (uint64_t)v375, v393, v394, (uint64_t)v244, v246, v248);
          unsigned int v252 = *((_DWORD *)a11 + 2);
          if (v252 >= *((_DWORD *)a11 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v253 = (uint64_t **)(*a11 + 16 * v252);
          void *v253 = v251;
          v253[1] = v249;
          ++*((_DWORD *)a11 + 2);
          uint64_t v254 = *(void *)(a14 + 832);
          if (v254) {
            LOWORD(v254) = *(_WORD *)(v254 + 8);
          }
          uint64_t v256 = sub_1CCFDED5C(a14, 177, v375, v395, v396, (uint64_t)v244, (uint64_t)v246, v250, v371, v356, v254);
          unsigned int v258 = v257;
          if (v384 == 63)
          {
            if (!v27)
            {
              if (!v380) {
                goto LABEL_143;
              }
              uint64_t v259 = 160;
              goto LABEL_196;
            }
            uint64_t v279 = 63;
          }
          else
          {
            if (!v382)
            {
              if (!v381) {
                goto LABEL_143;
              }
              uint64_t v259 = 159;
LABEL_196:
              uint64_t v260 = *(void *)(a14 + 832);
              if (v260) {
                LOWORD(v260) = *(_WORD *)(v260 + 8);
              }
              int8x8_t v383 = sub_1CCFDED5C(a14, 58, v375, v393, v394, v389, v369, v255, (uint64_t)v386, v373, v260);
              unsigned int v263 = v262;
              uint64_t v264 = *(void *)(a14 + 832);
              if (v264) {
                LOWORD(v264) = *(_WORD *)(v264 + 8);
              }
              int v265 = sub_1CCFDED5C(a14, v259, v375, v393, v394, v389, v369, v261, (uint64_t)v386, v373, v264);
              int v267 = v266;
              goto LABEL_215;
            }
            uint64_t v279 = 64;
          }
          int v265 = sub_1CD7FFB18((void *)a14, (const char *)v279, v375, v377, v379, v389, v369, v255, (uint64_t)v386, v373);
          unsigned int v263 = v280;
          int v267 = 1;
          int8x8_t v383 = v265;
LABEL_215:
          if (v245) {
            uint64_t v281 = 172;
          }
          else {
            uint64_t v281 = (uint64_t)v365;
          }
          if (v245) {
            uint64_t v282 = 0;
          }
          else {
            uint64_t v282 = v209;
          }
          if (v245) {
            uint64_t v283 = 70;
          }
          else {
            uint64_t v283 = 72;
          }
          uint64_t v284 = sub_1CD7F95FC(a14, (uint64_t)v393, v394, v281, v282);
          uint64_t v287 = sub_1CD7FFB94((void *)a14, (const char *)v283, v375, v284, v285, (uint64_t)v265, v267, v286, v353, v352, (uint64_t)v244, 1);
          unint64_t v289 = v288;
          long long v291 = v395;
          uint64_t v290 = v396;
          uint64_t v292 = *(void *)(a14 + 832);
          if (v292) {
            __int16 v293 = *(_WORD *)(v292 + 8);
          }
          else {
            __int16 v293 = 0;
          }
          uint64_t v294 = v258;
          uint64_t v295 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC7, (uint64_t)v375, v395, v396, (uint64_t)v383, (void *)v263, v293);
          unsigned int v297 = v296;
          uint64_t v298 = *(void *)(a14 + 832);
          if (v298) {
            __int16 v299 = *(_WORD *)(v298 + 8);
          }
          else {
            __int16 v299 = 0;
          }
          char v301 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC7, (uint64_t)v375, v395, v396, (uint64_t)v287, (void *)v289, v299);
          uint64_t v303 = *(void *)(a14 + 832);
          if (v303) {
            LOWORD(v303) = *(_WORD *)(v303 + 8);
          }
          long long v304 = sub_1CCFDED5C(a14, 175, v375, v395, v396, (uint64_t)v301, v300, v302, v371, v356, v303);
          uint64_t v307 = *(void *)(a14 + 832);
          if (v307) {
            LOWORD(v307) = *(_WORD *)(v307 + 8);
          }
          uint8x8_t v308 = sub_1CCFDED5C(a14, 172, v375, v395, v396, (uint64_t)v295, v297, v306, (uint64_t)v304, v305, v307);
          uint64_t v311 = *(void *)(a14 + 832);
          if (v311) {
            LOWORD(v311) = *(_WORD *)(v311 + 8);
          }
          unsigned int v312 = sub_1CCFDED5C(a14, 56, v375, v291, v290, (uint64_t)v256, v294 | v362, v310, (uint64_t)v308, v309, v311);
          int v314 = (void *)(v313 | v362);
          if (v384 == 63)
          {
            uint64_t v328 = v395;
            uint64_t v329 = v396;
            uint64_t v330 = *(void *)(a14 + 832);
            if (v330) {
              __int16 v331 = *(_WORD *)(v330 + 8);
            }
            else {
              __int16 v331 = 0;
            }
            int v332 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC7, (uint64_t)v375, v395, v396, v374, v388, v331);
            uint64_t v335 = *(void *)(a14 + 832);
            if (v335) {
              LOWORD(v335) = *(_WORD *)(v335 + 8);
            }
            uint64_t v336 = sub_1CCFDED5C(a14, 57, v375, v328, v329, (uint64_t)v312, (uint64_t)v314, v334, (uint64_t)v332, v333, v335);
            int v338 = sub_1CD3D6058((void *)a14, v375, v389, v369, v353, v352, (uint64_t)v336, v337, (uint64_t)v312, (int)v314, SHIDWORD(v314), 0x14u);
            uint64_t v340 = v339 | v362;
            uint64_t v341 = v395;
            uint64_t v342 = v396;
            uint64_t v343 = *(void *)(a14 + 832);
            if (v343) {
              __int16 v344 = *(_WORD *)(v343 + 8);
            }
            else {
              __int16 v344 = 0;
            }
            int v345 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC7, (uint64_t)v375, v395, v396, v366, v390, v344);
            uint64_t v348 = *(void *)(a14 + 832);
            if (v348) {
              LOWORD(v348) = *(_WORD *)(v348 + 8);
            }
            uint64_t v349 = sub_1CCFDED5C(a14, 57, v375, v341, v342, (uint64_t)v338, v340, v347, (uint64_t)v345, v346, v348);
            unsigned int v312 = sub_1CD3D6058((void *)a14, v375, (uint64_t)v386, v373, v353, v352, (uint64_t)v349, v350, (uint64_t)v338, v340, SHIDWORD(v340), 0x14u);
            int v314 = (void *)(v351 | v362);
          }
          uint64_t v315 = *(void *)(a14 + 832);
          if (v315) {
            __int16 v316 = *(_WORD *)(v315 + 8);
          }
          else {
            __int16 v316 = 0;
          }
          int v319 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC9, (uint64_t)v375, v393, v394, (uint64_t)v312, v314, v316);
          unsigned int v320 = *((_DWORD *)a11 + 2);
          if (v320 >= *((_DWORD *)a11 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v321 = (uint64_t **)(*a11 + 16 * v320);
          void *v321 = v319;
          v321[1] = v317;
          ++*((_DWORD *)a11 + 2);
          uint64_t v322 = *(void *)(a14 + 832);
          if (v322) {
            LOWORD(v322) = *(_WORD *)(v322 + 8);
          }
          unsigned int v324 = sub_1CCFDED5C(a14, 177, v375, v395, v396, (uint64_t)v312, (uint64_t)v314, v318, v371, v356, v322);
          uint64_t v325 = *(void *)(a14 + 832);
          if (v325) {
            __int16 v326 = *(_WORD *)(v325 + 8);
          }
          else {
            __int16 v326 = 0;
          }
          uint64_t v75 = sub_1CD7F3564((llvm::APFloatBase *)a14, (const char *)0xC9, (uint64_t)v375, v393, v394, (uint64_t)v324, (void *)(v323 | v362), v326);
          uint64_t v76 = v327;
          unsigned int v94 = *((_DWORD *)a11 + 2);
          if (v94 >= *((_DWORD *)a11 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v138 = *a11;
          goto LABEL_108;
        }
LABEL_143:
        uint64_t v34 = 0;
      }
    }
  }
LABEL_144:
  if (v392 >= 0x41 && v391) {
    MEMORY[0x1D25D9CB0](v391, 0x1000C8000313F17);
  }
  return v34;
}

uint64_t sub_1CD019010(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (void (**)(void **))&unk_1F2642FF8;
  int v6 = a3;
  int v7 = (void **)&v5;
  uint64_t v3 = sub_1CD7E9A18(a1, a2, (uint64_t)&v5, 1);
  if (v7 == (void **)&v5)
  {
    v5[4]((void **)&v5);
  }
  else if (v7)
  {
    (*((void (**)(void))*v7 + 5))();
  }
  return v3;
}

uint64_t sub_1CD0190FC(uint64_t a1, uint64_t a2, BOOL a3)
{
  v8[0] = a2;
  v8[1] = a3;
  unsigned int v4 = sub_1CD3E12F4((unsigned __int8 *)v8, a2, a3);
  if (LOBYTE(v8[0])
    && (LOBYTE(v8[0]) == 1 || !(BOOL v5 = *(void *)(a1 + 8 * LOBYTE(v8[0]) + 96) == 0))
    && (*(unsigned __int8 *)(a1 + 390 * LOBYTE(v8[0]) + 3918) | 4) == 4
    && (LOBYTE(v8[0]) == 1 || *(void *)(a1 + 8 * LOBYTE(v8[0]) + 96))
    && (*(unsigned __int8 *)(a1 + 390 * LOBYTE(v8[0]) + 3919) | 4) == 4
    && (LOBYTE(v8[0]) == 1 || *(void *)(a1 + 8 * LOBYTE(v8[0]) + 96))
    && (*(unsigned __int8 *)(a1 + 390 * LOBYTE(v8[0]) + 4039) | 4) == 4
    && (v4 == 8
     || (LOBYTE(v8[0]) == 1 || *(void *)(a1 + 8 * LOBYTE(v8[0]) + 96))
     && (*(unsigned __int8 *)(a1 + 390 * LOBYTE(v8[0]) + 3920) | 4) == 4)
    && (LOBYTE(v8[0]) == 1 || *(void *)(a1 + 8 * LOBYTE(v8[0]) + 96))
    && (unsigned int v6 = *(unsigned __int8 *)(a1 + 390 * LOBYTE(v8[0]) + 4033), v6 <= 4))
  {
    return (0x13u >> v6) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t *sub_1CD019244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 **)(a2 + 64);
  BOOL v80 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v80, v6, 2);
  }
  int v81 = *(_DWORD *)(a2 + 60);
  int v7 = *(uint64_t **)(a2 + 32);
  long long v79 = *(_OWORD *)*(void *)(a2 + 40);
  uint64_t v9 = *v7;
  uint64_t v8 = (void *)v7[1];
  unsigned int v10 = sub_1CD3E12F4((unsigned __int8 *)&v79, (uint64_t)v6, a3);
  unsigned int v12 = v10;
  int v13 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v14 = (llvm *)v79;
  uint64_t v15 = v79;
  if (v13 == 188)
  {
    if (!(_BYTE)v79) {
      goto LABEL_13;
    }
    if ((v79 == 1 || *(void *)(a1 + 8 * v79 + 96))
      && (*(unsigned __int8 *)(a1 + 390 * v79 + 4045) | 4) == 4)
    {
      uint64_t v16 = *((void *)&v79 + 1);
      uint64_t v17 = *(void *)(a3 + 832);
      if (v17) {
        __int16 v18 = *(_WORD *)(v17 + 8);
      }
      else {
        __int16 v18 = 0;
      }
      uint64_t v41 = (llvm::APFloatBase *)a3;
      uint64_t v42 = 183;
      uint64_t v43 = (llvm *)v79;
      uint64_t v44 = v9;
      unsigned int v45 = v8;
LABEL_58:
      uint64_t v46 = sub_1CD7F3564(v41, (const char *)v42, (uint64_t)&v80, v43, v16, v44, v45, v18);
LABEL_59:
      int v21 = v46;
      goto LABEL_75;
    }
  }
  if ((_BYTE)v79)
  {
    if ((v79 == 1 || *(void *)(a1 + 8 * v79 + 96))
      && (*(unsigned __int8 *)(a1 + 390 * v79 + 4050) | 4) == 4)
    {
      __int16 v47 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(a3 + 40) + 40) + 272, *(void *)(a3 + 56), v79, *((void *)&v79 + 1));
      uint64_t v49 = v48;
      uint64_t v50 = *(void *)(a3 + 832);
      if (v50) {
        __int16 v51 = *(_WORD *)(v50 + 8);
      }
      else {
        __int16 v51 = 0;
      }
      unsigned int v52 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)0xBC, (uint64_t)&v80, (llvm *)v79, *((uint64_t *)&v79 + 1), v9, v8, v51);
      uint64_t v54 = v53;
      uint64_t v55 = sub_1CD7EBF14(a3, 0, (const llvm::APInt *)&v80, (llvm *)v79, *((uint64_t *)&v79 + 1), 0, 0);
      uint64_t v57 = sub_1CD3DC614((void *)a3, (const llvm::APInt *)&v80, v47, v49, v9, (uint64_t)v8, (uint64_t)v55, v56, 0x11u, 0, 0, 0, 0);
      uint64_t v59 = v58;
      long long v60 = v79;
      uint64_t v61 = sub_1CD7EBF14(a3, v12, (const llvm::APInt *)&v80, (llvm *)v79, *((uint64_t *)&v79 + 1), 0, 0);
      uint64_t v46 = sub_1CD3E1260((void *)a3, (const llvm::APInt *)&v80, (llvm *)v60, *((uint64_t *)&v60 + 1), (uint64_t)v57, v59, (uint64_t)v61, v62, (uint64_t)v52, v54, SHIDWORD(v54));
      goto LABEL_59;
    }
    if (v79 - 15 >= 0x9C) {
      goto LABEL_43;
    }
    goto LABEL_18;
  }
LABEL_13:
  if ((*(_DWORD *)(*((void *)&v79 + 1) + 8) & 0xFE) != 0x12) {
    goto LABEL_43;
  }
LABEL_18:
  v11.i32[0] = v10;
  uint8x8_t v19 = (uint8x8_t)vcnt_s8(v11);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.i32[0] != 1)
  {
LABEL_74:
    int v21 = 0;
    goto LABEL_75;
  }
  if ((_BYTE)v79)
  {
    if (v79 == 1 || (uint64_t v20 = *(void *)(a1 + 8 * v79 + 96)) != 0)
    {
      if ((*(unsigned __int8 *)(a1 + 390 * v79 + 4047) | 4) == 4) {
        goto LABEL_29;
      }
      if (v79 == 1)
      {
LABEL_26:
        if ((*(unsigned __int8 *)(a1 + 390 * v79 + 4046) | 4) == 4) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(a1 + 8 * v79 + 96);
    }
    if (!v20) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_27:
  if (!sub_1CD0190FC(a1, v79, *((BOOL *)&v79 + 1))) {
    goto LABEL_74;
  }
  uint64_t v14 = (llvm *)v79;
  uint64_t v15 = v79;
LABEL_29:
  if (!(_BYTE)v14)
  {
    int v21 = (uint64_t *)v14;
    goto LABEL_75;
  }
  if (v14 == 1)
  {
    if (!v15) {
      goto LABEL_74;
    }
    goto LABEL_36;
  }
  int v21 = 0;
  if (v15 && *(void *)(a1 + 8 * v15 + 96))
  {
LABEL_36:
    if ((*(unsigned __int8 *)(a1 + 390 * v15 + 3919) | 4) != 4
      || v14 != 1 && !*(void *)(a1 + 8 * v15 + 96))
    {
      goto LABEL_74;
    }
    unsigned int v22 = *(unsigned __int8 *)(a1 + 390 * v15 + 4033);
    if (v22 >= 2 && v22 != 4) {
      goto LABEL_74;
    }
    if (v14 != 1 && !*(void *)(a1 + 8 * v15 + 96)) {
      goto LABEL_74;
    }
    unsigned int v23 = *(unsigned __int8 *)(a1 + 390 * v15 + 4035);
    if (v23 >= 2 && v23 != 4) {
      goto LABEL_74;
    }
LABEL_43:
    uint64_t v24 = *((void *)&v79 + 1);
    unsigned int v78 = sub_1CD7EBB8C(a3, (const llvm::APInt *)&v80, v9, (uint64_t)v8, v14, *((uint64_t *)&v79 + 1));
    uint64_t v26 = v25;
    long long v27 = v79;
    BOOL v28 = sub_1CD7EBF14(a3, 1, (const llvm::APInt *)&v80, (llvm *)v79, *((uint64_t *)&v79 + 1), 0, 0);
    uint64_t v31 = *(void *)(a3 + 832);
    if (v31) {
      LOWORD(v31) = *(_WORD *)(v31 + 8);
    }
    uint64_t v32 = sub_1CCFDED5C(a3, 57, (const llvm::APInt *)&v80, (llvm *)v27, *((uint64_t *)&v27 + 1), v9, (uint64_t)v8, v30, (uint64_t)v28, v29, v31);
    uint64_t v35 = *(void *)(a3 + 832);
    if (v35) {
      LOWORD(v35) = *(_WORD *)(v35 + 8);
    }
    uint64_t v36 = sub_1CCFDED5C(a3, 171, (const llvm::APInt *)&v80, v14, v24, (uint64_t)v78, v26, v34, (uint64_t)v32, v33, v35);
    unint64_t v38 = v37;
    uint64_t v39 = (llvm *)v79;
    if ((_BYTE)v79
      && (v79 == 1 || *(void *)(a1 + 8 * v79 + 96))
      && !*(unsigned char *)(a1 + 390 * v79 + 4046)
      && *(unsigned char *)(a1 + 390 * v79 + 4047))
    {
      uint64_t v63 = *((void *)&v79 + 1);
      uint64_t v64 = sub_1CD7EBF14(a3, v12, (const llvm::APInt *)&v80, (llvm *)v79, *((uint64_t *)&v79 + 1), 0, 0);
      uint64_t v66 = v65;
      uint64_t v67 = *(void *)(a3 + 832);
      if (v67) {
        __int16 v68 = *(_WORD *)(v67 + 8);
      }
      else {
        __int16 v68 = 0;
      }
      uint64_t v69 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)0xB8, (uint64_t)&v80, (llvm *)v79, *((uint64_t *)&v79 + 1), (uint64_t)v36, v38, v68);
      uint64_t v72 = *(void *)(a3 + 832);
      if (v72) {
        LOWORD(v72) = *(_WORD *)(v72 + 8);
      }
      uint64_t v46 = sub_1CCFDED5C(a3, 57, (const llvm::APInt *)&v80, v39, v63, (uint64_t)v64, v66, v71, (uint64_t)v69, v70, v72);
      goto LABEL_59;
    }
    uint64_t v16 = *((void *)&v79 + 1);
    uint64_t v40 = *(void *)(a3 + 832);
    if (v40) {
      __int16 v18 = *(_WORD *)(v40 + 8);
    }
    else {
      __int16 v18 = 0;
    }
    uint64_t v41 = (llvm::APFloatBase *)a3;
    uint64_t v42 = 185;
    uint64_t v43 = (llvm *)v79;
    uint64_t v44 = (uint64_t)v36;
    unsigned int v45 = v38;
    goto LABEL_58;
  }
LABEL_75:
  if (v80)
  {
    int v73 = *v80;
    if ((v73 - 4) > 0x1E)
    {
      if ((v73 - 3) >= 0xFFFFFFFE) {
        uint64_t v75 = v80;
      }
      else {
        uint64_t v75 = 0;
      }
      if ((v73 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v76 = (unint64_t)(v75 + 8);
LABEL_85:
        *(void *)&long long v79 = &v80;
        sub_1CC5FA668(v76 + 16, &v79);
        return v21;
      }
      if (v73 == 3) {
        *((void *)v80 + 1) = 0;
      }
    }
    else if ((v80[1] & 0x7F) == 2 || *((_DWORD *)v80 + 3))
    {
      uint64_t v77 = *((void *)v80 + 2);
      if ((v77 & 4) != 0)
      {
        unint64_t v76 = v77 & 0xFFFFFFFFFFFFFFF8;
        if (v76) {
          goto LABEL_85;
        }
      }
    }
  }
  return v21;
}

uint64_t *sub_1CD0198B8(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v75 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v75, v8, 2);
  }
  int v76 = *(_DWORD *)(a2 + 60);
  uint64_t v9 = *(void *)(a2 + 40);
  int8x8_t v11 = *(llvm **)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  int v73 = v11;
  uint64_t v74 = v10;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v11, v10, *(void *)(**(void **)(a3 + 40) + 40) + 272, 1);
  uint64_t v15 = v12;
  uint64_t v16 = *(uint64_t **)(a2 + 32);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  if ((a4 & 1) == 0)
  {
    if (!(_BYTE)v11)
    {
LABEL_23:
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
      {
LABEL_61:
        uint64_t v59 = 0;
        goto LABEL_71;
      }
LABEL_53:
      uint64_t v44 = sub_1CD3E12F4((unsigned __int8 *)&v73, v12, v13);
      unsigned int v45 = sub_1CD7EBF14(a3, (uint64_t)v44 - 1, (const llvm::APInt *)&v75, ShiftAmountTy, v15, 0, 0);
      uint64_t v48 = *(void *)(a3 + 832);
      if (v48) {
        LOWORD(v48) = *(_WORD *)(v48 + 8);
      }
      uint64_t v49 = sub_1CCFDED5C(a3, 176, (const llvm::APInt *)&v75, v11, v10, v18, v17, v47, (uint64_t)v45, v46, v48);
      uint64_t v52 = (uint64_t)v49;
      uint64_t v53 = v50;
      uint64_t v54 = *(void *)(a3 + 832);
      if (v54) {
        LOWORD(v54) = *(_WORD *)(v54 + 8);
      }
      uint64_t v55 = sub_1CCFDED5C(a3, 173, (const llvm::APInt *)&v75, v73, v74, v18, v17, v51, (uint64_t)v49, v50, v54);
      uint64_t v58 = *(void *)(a3 + 832);
      if (a4)
      {
        if (v58) {
          LOWORD(v58) = *(_WORD *)(v58 + 8);
        }
        long long v27 = sub_1CCFDED5C(a3, 57, (const llvm::APInt *)&v75, v73, v74, v52, v53, v57, (uint64_t)v55, v56, v58);
      }
      else
      {
        if (v58) {
          LOWORD(v58) = *(_WORD *)(v58 + 8);
        }
        long long v27 = sub_1CCFDED5C(a3, 57, (const llvm::APInt *)&v75, v73, v74, (uint64_t)v55, v56, v57, v52, v53, v58);
      }
      goto LABEL_70;
    }
    if (v11 == 1)
    {
      if (*((unsigned char *)a1 + 390 * v11 + 3919)) {
        goto LABEL_53;
      }
      if (*((unsigned char *)a1 + 390 * v11 + 4030))
      {
LABEL_17:
        if (!*((unsigned char *)a1 + 390 * v11 + 4031))
        {
          uint64_t v29 = sub_1CD7EBF14(a3, 0, (const llvm::APInt *)&v75, v11, v10, 0, 0);
          uint64_t v31 = *(void *)(a3 + 832);
          if (v31) {
            LOWORD(v31) = *(_WORD *)(v31 + 8);
          }
          uint64_t v32 = sub_1CCFDED5C(a3, 57, (const llvm::APInt *)&v75, v11, v10, (uint64_t)v29, v28, v30, v18, v17, v31);
          uint64_t v35 = *(void *)(a3 + 832);
          if (v35) {
            LOWORD(v35) = *(_WORD *)(v35 + 8);
          }
          long long v27 = sub_1CCFDED5C(a3, 169, (const llvm::APInt *)&v75, v11, v10, v18, v17, v34, (uint64_t)v32, v33, v35);
          goto LABEL_70;
        }
        goto LABEL_38;
      }
    }
    else
    {
      if (a1[v11 + 12] == 0) {
        goto LABEL_38;
      }
      unint64_t v38 = (char *)a1 + 390 * v11;
      if (v38[3919] || *((unsigned char *)a1 + 390 * v11 + 4030))
      {
        if (v38[3919]) {
          goto LABEL_38;
        }
        goto LABEL_17;
      }
    }
    uint64_t v61 = sub_1CD7EBF14(a3, 0, (const llvm::APInt *)&v75, v11, v10, 0, 0);
    uint64_t v63 = *(void *)(a3 + 832);
    if (v63) {
      LOWORD(v63) = *(_WORD *)(v63 + 8);
    }
    uint64_t v64 = sub_1CCFDED5C(a3, 57, (const llvm::APInt *)&v75, v11, v10, (uint64_t)v61, v60, v62, v18, v17, v63);
    uint64_t v67 = *(void *)(a3 + 832);
    if (v67) {
      LOWORD(v67) = *(_WORD *)(v67 + 8);
    }
    long long v27 = sub_1CCFDED5C(a3, 168, (const llvm::APInt *)&v75, v11, v10, v18, v17, v66, (uint64_t)v64, v65, v67);
    goto LABEL_70;
  }
  if (!(_BYTE)v11) {
    goto LABEL_23;
  }
  if (v11 == 1)
  {
    if (*((unsigned char *)a1 + 390 * v11 + 3919)) {
      goto LABEL_53;
    }
  }
  else
  {
    BOOL v36 = a1[v11 + 12] == 0;
    if (v36 || *((unsigned char *)a1 + 390 * v11 + 3919)) {
      goto LABEL_38;
    }
  }
  if (*((unsigned char *)a1 + 390 * v11 + 4029))
  {
LABEL_38:
    if (v11 - 15 < 0x9C)
    {
      BOOL v39 = a1[v11 + 12] == 0;
      if (v39 || (*((unsigned __int8 *)a1 + 390 * v11 + 4038) | 4) != 4) {
        goto LABEL_61;
      }
      uint64_t v40 = (char *)a1 + 390 * v11;
      int v41 = (a4 & 1) != 0 ? v40[3919] : v40[3918];
      if ((v41 | 4) != 4) {
        goto LABEL_61;
      }
      unsigned int v42 = *((unsigned __int8 *)a1 + 390 * v11 + 4035);
      if (v42 >= 2 && v42 != 4) {
        goto LABEL_61;
      }
    }
    goto LABEL_53;
  }
  uint64_t v20 = sub_1CD7EBF14(a3, 0, (const llvm::APInt *)&v75, v11, v10, 0, 0);
  uint64_t v22 = *(void *)(a3 + 832);
  if (v22) {
    LOWORD(v22) = *(_WORD *)(v22 + 8);
  }
  unsigned int v23 = sub_1CCFDED5C(a3, 57, (const llvm::APInt *)&v75, v11, v10, (uint64_t)v20, v19, v21, v18, v17, v22);
  uint64_t v26 = *(void *)(a3 + 832);
  if (v26) {
    LOWORD(v26) = *(_WORD *)(v26 + 8);
  }
  long long v27 = sub_1CCFDED5C(a3, 167, (const llvm::APInt *)&v75, v11, v10, v18, v17, v25, (uint64_t)v23, v24, v26);
LABEL_70:
  uint64_t v59 = v27;
LABEL_71:
  if (v75)
  {
    int v68 = *v75;
    if ((v68 - 4) > 0x1E)
    {
      if ((v68 - 3) >= 0xFFFFFFFE) {
        uint64_t v70 = v75;
      }
      else {
        uint64_t v70 = 0;
      }
      if ((v68 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v71 = (unint64_t)(v70 + 8);
LABEL_81:
        int v73 = (llvm *)&v75;
        sub_1CC5FA668(v71 + 16, &v73);
        return v59;
      }
      if (v68 == 3) {
        *((void *)v75 + 1) = 0;
      }
    }
    else if ((v75[1] & 0x7F) == 2 || *((_DWORD *)v75 + 3))
    {
      uint64_t v72 = *((void *)v75 + 2);
      if ((v72 & 4) != 0)
      {
        unint64_t v71 = v72 & 0xFFFFFFFFFFFFFFF8;
        if (v71) {
          goto LABEL_81;
        }
      }
    }
  }
  return v59;
}

uint64_t *sub_1CD019DD4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 **)(a2 + 64);
  unsigned int v192 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v192, v6, 2);
  }
  int v193 = *(_DWORD *)(a2 + 60);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(v7 + 8);
  unsigned int v190 = *(unsigned __int8 ***)v7;
  uint64_t v191 = v9;
  int8x8_t v11 = *(uint64_t **)v8;
  uint64_t v10 = *(void **)(v8 + 8);
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v190, v9, *(void *)(**(void **)(a3 + 40) + 40) + 272, 1);
  uint64_t v14 = v13;
  uint64_t v16 = sub_1CD3E12F4((unsigned __int8 *)&v190, v13, v15);
  uint64_t v17 = v16;
  if (v16 < 8
    || (uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v18.i16[0] = vaddlv_u8(v18), v18.i32[0] > 1u))
  {
    uint64_t v22 = sub_1CD7EBF14(a3, 0, (const llvm::APInt *)&v192, (llvm *)v190, v191, 0, 0);
    if (v17)
    {
      uint64_t v176 = (uint64_t)v10;
      uint64_t v177 = (uint64_t)v11;
      uint64_t v178 = v14;
      uint64_t v179 = ShiftAmountTy;
      unint64_t v23 = 0;
      unsigned int v24 = v17 - 1;
      unsigned int v25 = 1 - v17;
      unsigned int v26 = v17 - 1;
      unsigned int v27 = v21;
      do
      {
        unsigned int v180 = v27;
        uint64_t v181 = (uint64_t)v22;
        uint64_t v28 = (llvm *)v190;
        uint64_t v29 = v191;
        if (v23 >= v24) {
          uint64_t v30 = v25;
        }
        else {
          uint64_t v30 = v26;
        }
        if (v23 >= v24) {
          uint64_t v31 = 177;
        }
        else {
          uint64_t v31 = 175;
        }
        uint64_t v32 = sub_1CD7EBF14(a3, v30, (const llvm::APInt *)&v192, ShiftAmountTy, v178, 0, 0);
        uint64_t v35 = *(void *)(a3 + 832);
        if (v35) {
          LOWORD(v35) = *(_WORD *)(v35 + 8);
        }
        unsigned int v36 = v24;
        BOOL v37 = sub_1CCFDED5C(a3, v31, (const llvm::APInt *)&v192, v28, v29, v177, v176, v34, (uint64_t)v32, v33, v35);
        unsigned int v39 = v38;
        unsigned int v189 = v17;
        if (v17 >= 0x41) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v188);
        }
        uint64_t v40 = 1 << v24;
        if (v24 == v17) {
          uint64_t v40 = 0;
        }
        unint64_t v188 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v17) & v40;
        int v41 = (llvm *)v190;
        uint64_t v42 = v191;
        uint64_t v43 = sub_1CD7EBB14(a3, (llvm::LLVMContext *)&v188, (const llvm::APInt *)&v192, (uint64_t)v190, v191, 0, 0);
        uint64_t v46 = *(void *)(a3 + 832);
        if (v46) {
          LOWORD(v46) = *(_WORD *)(v46 + 8);
        }
        uint64_t v47 = sub_1CCFDED5C(a3, 171, (const llvm::APInt *)&v192, v41, v42, (uint64_t)v37, v39, v45, v43, v44, v46);
        uint64_t v50 = *(void *)(a3 + 832);
        if (v50) {
          LOWORD(v50) = *(_WORD *)(v50 + 8);
        }
        uint64_t v22 = sub_1CCFDED5C(a3, 172, (const llvm::APInt *)&v192, (llvm *)v190, v191, v181, v180, v49, (uint64_t)v47, v48, v50);
        unsigned int v27 = v51;
        if (v189 >= 0x41 && v188) {
          MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
        }
        ++v23;
        v26 -= 2;
        v25 += 2;
        unsigned int v24 = v36 - 1;
        ShiftAmountTy = v179;
      }
      while (v17 != v23);
    }
  }
  else
  {
    unsigned int v187 = 8;
    uint64_t v186 = 15;
    llvm::APInt::getSplat(v16, (llvm::APInt *)&v186, (uint64_t)&v188);
    if (v187 >= 0x41 && v186) {
      MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
    }
    unsigned int v185 = 8;
    uint64_t v184 = 51;
    llvm::APInt::getSplat(v17, (llvm::APInt *)&v184, (uint64_t)&v186);
    if (v185 >= 0x41 && v184) {
      MEMORY[0x1D25D9CB0](v184, 0x1000C8000313F17);
    }
    unsigned int v183 = 8;
    uint64_t v182 = 85;
    llvm::APInt::getSplat(v17, (llvm::APInt *)&v182, (uint64_t)&v184);
    if (v183 >= 0x41 && v182) {
      MEMORY[0x1D25D9CB0](v182, 0x1000C8000313F17);
    }
    if (v17 >= 9)
    {
      uint64_t v19 = *(void *)(a3 + 832);
      if (v19) {
        __int16 v20 = *(_WORD *)(v19 + 8);
      }
      else {
        __int16 v20 = 0;
      }
      int8x8_t v11 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)0xB6, (uint64_t)&v192, (llvm *)v190, v191, (uint64_t)v11, v10, v20);
      LODWORD(v10) = v52;
    }
    uint64_t v53 = v10;
    uint64_t v54 = (llvm *)v190;
    uint64_t v55 = v191;
    uint64_t v56 = sub_1CD7EBF14(a3, 4, (const llvm::APInt *)&v192, ShiftAmountTy, v14, 0, 0);
    uint64_t v59 = *(void *)(a3 + 832);
    if (v59) {
      LOWORD(v59) = *(_WORD *)(v59 + 8);
    }
    uint64_t v60 = sub_1CCFDED5C(a3, 177, (const llvm::APInt *)&v192, v54, v55, (uint64_t)v11, v10, v58, (uint64_t)v56, v57, v59);
    uint64_t v62 = v61;
    uint64_t v64 = (llvm *)v190;
    uint64_t v63 = v191;
    uint64_t v65 = sub_1CD7EBB14(a3, (llvm::LLVMContext *)&v188, (const llvm::APInt *)&v192, (uint64_t)v190, v191, 0, 0);
    uint64_t v68 = *(void *)(a3 + 832);
    if (v68) {
      LOWORD(v68) = *(_WORD *)(v68 + 8);
    }
    uint64_t v69 = sub_1CCFDED5C(a3, 171, (const llvm::APInt *)&v192, v64, v63, (uint64_t)v60, v62, v67, v65, v66, v68);
    uint64_t v71 = v70;
    uint64_t v72 = (llvm *)v190;
    uint64_t v73 = v191;
    uint64_t v74 = sub_1CD7EBB14(a3, (llvm::LLVMContext *)&v188, (const llvm::APInt *)&v192, (uint64_t)v190, v191, 0, 0);
    uint64_t v77 = *(void *)(a3 + 832);
    if (v77) {
      LOWORD(v77) = *(_WORD *)(v77 + 8);
    }
    unsigned int v78 = sub_1CCFDED5C(a3, 171, (const llvm::APInt *)&v192, v72, v73, (uint64_t)v11, v53, v76, v74, v75, v77);
    uint64_t v80 = v79;
    int v81 = (llvm *)v190;
    uint64_t v82 = v191;
    uint64_t v83 = sub_1CD7EBF14(a3, 4, (const llvm::APInt *)&v192, ShiftAmountTy, v14, 0, 0);
    uint64_t v86 = *(void *)(a3 + 832);
    if (v86) {
      LOWORD(v86) = *(_WORD *)(v86 + 8);
    }
    unsigned int v87 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v192, v81, v82, (uint64_t)v78, v80, v85, (uint64_t)v83, v84, v86);
    uint64_t v90 = *(void *)(a3 + 832);
    if (v90) {
      LOWORD(v90) = *(_WORD *)(v90 + 8);
    }
    unsigned int v91 = sub_1CCFDED5C(a3, 172, (const llvm::APInt *)&v192, (llvm *)v190, v191, (uint64_t)v69, v71, v89, (uint64_t)v87, v88, v90);
    uint64_t v92 = (llvm *)v190;
    uint64_t v93 = v191;
    uint64_t v95 = v94;
    uint64_t v96 = sub_1CD7EBF14(a3, 2, (const llvm::APInt *)&v192, ShiftAmountTy, v14, 0, 0);
    uint64_t v99 = *(void *)(a3 + 832);
    if (v99) {
      LOWORD(v99) = *(_WORD *)(v99 + 8);
    }
    uint64_t v100 = sub_1CCFDED5C(a3, 177, (const llvm::APInt *)&v192, v92, v93, (uint64_t)v91, v95, v98, (uint64_t)v96, v97, v99);
    uint64_t v102 = v101;
    uint64_t v104 = (llvm *)v190;
    uint64_t v103 = v191;
    uint64_t v105 = sub_1CD7EBB14(a3, (llvm::LLVMContext *)&v186, (const llvm::APInt *)&v192, (uint64_t)v190, v191, 0, 0);
    uint64_t v108 = *(void *)(a3 + 832);
    if (v108) {
      LOWORD(v108) = *(_WORD *)(v108 + 8);
    }
    uint64_t v109 = sub_1CCFDED5C(a3, 171, (const llvm::APInt *)&v192, v104, v103, (uint64_t)v100, v102, v107, v105, v106, v108);
    uint64_t v111 = v110;
    unsigned int v112 = (llvm *)v190;
    uint64_t v113 = v191;
    uint64_t v114 = sub_1CD7EBB14(a3, (llvm::LLVMContext *)&v186, (const llvm::APInt *)&v192, (uint64_t)v190, v191, 0, 0);
    uint64_t v117 = *(void *)(a3 + 832);
    if (v117) {
      LOWORD(v117) = *(_WORD *)(v117 + 8);
    }
    unsigned int v118 = sub_1CCFDED5C(a3, 171, (const llvm::APInt *)&v192, v112, v113, (uint64_t)v91, v95, v116, v114, v115, v117);
    uint64_t v120 = v119;
    __int16 v121 = (llvm *)v190;
    uint64_t v122 = v191;
    uint64_t v123 = sub_1CD7EBF14(a3, 2, (const llvm::APInt *)&v192, ShiftAmountTy, v14, 0, 0);
    uint64_t v126 = *(void *)(a3 + 832);
    if (v126) {
      LOWORD(v126) = *(_WORD *)(v126 + 8);
    }
    uint64_t v127 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v192, v121, v122, (uint64_t)v118, v120, v125, (uint64_t)v123, v124, v126);
    uint64_t v130 = *(void *)(a3 + 832);
    if (v130) {
      LOWORD(v130) = *(_WORD *)(v130 + 8);
    }
    unsigned int v131 = sub_1CCFDED5C(a3, 172, (const llvm::APInt *)&v192, (llvm *)v190, v191, (uint64_t)v109, v111, v129, (uint64_t)v127, v128, v130);
    uint64_t v132 = (llvm *)v190;
    uint64_t v133 = v191;
    uint64_t v135 = v134;
    uint64_t v136 = sub_1CD7EBF14(a3, 1, (const llvm::APInt *)&v192, ShiftAmountTy, v14, 0, 0);
    uint64_t v139 = *(void *)(a3 + 832);
    if (v139) {
      LOWORD(v139) = *(_WORD *)(v139 + 8);
    }
    unsigned int v140 = sub_1CCFDED5C(a3, 177, (const llvm::APInt *)&v192, v132, v133, (uint64_t)v131, v135, v138, (uint64_t)v136, v137, v139);
    uint64_t v142 = v141;
    uint64_t v144 = (llvm *)v190;
    uint64_t v143 = v191;
    uint64_t v145 = sub_1CD7EBB14(a3, (llvm::LLVMContext *)&v184, (const llvm::APInt *)&v192, (uint64_t)v190, v191, 0, 0);
    uint64_t v148 = *(void *)(a3 + 832);
    if (v148) {
      LOWORD(v148) = *(_WORD *)(v148 + 8);
    }
    uint64_t v149 = sub_1CCFDED5C(a3, 171, (const llvm::APInt *)&v192, v144, v143, (uint64_t)v140, v142, v147, v145, v146, v148);
    uint64_t v151 = v150;
    uint64_t v152 = (llvm *)v190;
    uint64_t v153 = v191;
    uint64_t v154 = sub_1CD7EBB14(a3, (llvm::LLVMContext *)&v184, (const llvm::APInt *)&v192, (uint64_t)v190, v191, 0, 0);
    uint64_t v157 = *(void *)(a3 + 832);
    if (v157) {
      LOWORD(v157) = *(_WORD *)(v157 + 8);
    }
    uint64_t v158 = sub_1CCFDED5C(a3, 171, (const llvm::APInt *)&v192, v152, v153, (uint64_t)v131, v135, v156, v154, v155, v157);
    uint64_t v160 = v159;
    uint64_t v161 = (llvm *)v190;
    uint64_t v162 = v191;
    uint64_t v163 = sub_1CD7EBF14(a3, 1, (const llvm::APInt *)&v192, ShiftAmountTy, v14, 0, 0);
    uint64_t v166 = *(void *)(a3 + 832);
    if (v166) {
      LOWORD(v166) = *(_WORD *)(v166 + 8);
    }
    char v167 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v192, v161, v162, (uint64_t)v158, v160, v165, (uint64_t)v163, v164, v166);
    uint64_t v170 = *(void *)(a3 + 832);
    if (v170) {
      LOWORD(v170) = *(_WORD *)(v170 + 8);
    }
    uint64_t v22 = sub_1CCFDED5C(a3, 172, (const llvm::APInt *)&v192, (llvm *)v190, v191, (uint64_t)v149, v151, v169, (uint64_t)v167, v168, v170);
    if (v185 >= 0x41 && v184) {
      MEMORY[0x1D25D9CB0](v184, 0x1000C8000313F17);
    }
    if (v187 >= 0x41 && v186) {
      MEMORY[0x1D25D9CB0](v186, 0x1000C8000313F17);
    }
    if (v189 >= 0x41 && v188) {
      MEMORY[0x1D25D9CB0](v188, 0x1000C8000313F17);
    }
  }
  if (v192)
  {
    int v171 = *v192;
    if ((v171 - 4) > 0x1E)
    {
      if ((v171 - 3) >= 0xFFFFFFFE) {
        uint64_t v173 = v192;
      }
      else {
        uint64_t v173 = 0;
      }
      if ((v171 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v174 = (unint64_t)(v173 + 8);
LABEL_92:
        unsigned int v190 = &v192;
        sub_1CC5FA668(v174 + 16, &v190);
        return v22;
      }
      if (v171 == 3) {
        *((void *)v192 + 1) = 0;
      }
    }
    else if ((v192[1] & 0x7F) == 2 || *((_DWORD *)v192 + 3))
    {
      uint64_t v175 = *((void *)v192 + 2);
      if ((v175 & 4) != 0)
      {
        unint64_t v174 = v175 & 0xFFFFFFFFFFFFFFF8;
        if (v174) {
          goto LABEL_92;
        }
      }
    }
  }
  return v22;
}

void sub_1CD01A7F4(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v231 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(uint64_t **)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v204 = *v8;
  uint64_t v205 = v8[1];
  uint64_t v10 = v8[5];
  uint64_t v11 = v8[6];
  uint64_t v13 = *(llvm **)v9;
  uint64_t v12 = *(void *)(v9 + 8);
  long long v224 = *(_OWORD *)(a2 + 80);
  uint64_t v14 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v222 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v222, v14, 2);
  }
  int v223 = *(_DWORD *)(a2 + 60);
  uint64_t v202 = *(void *)(a3 + 40);
  uint64_t v186 = a4;
  if ((_BYTE)v13)
  {
    if (((_BYTE)v13 - 8) < 0xA3u) {
      goto LABEL_12;
    }
  }
  else if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12 || *(_DWORD *)(v12 + 8) <= 6u)
  {
LABEL_12:
    unsigned int v21 = *(llvm::IntegerType **)(a3 + 56);
    if ((_BYTE)v224) {
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v224);
    }
    else {
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v224);
    }
    uint64_t v28 = (llvm::LLVMContext *)ExtendedSizeInBits;
    if (v23 == 1) {
    if ((int)v28 <= 31)
    }
    {
      switch(v28)
      {
        case 1:
          uint64_t v29 = 2;
          goto LABEL_55;
        case 0x10:
          uint64_t v29 = 4;
          goto LABEL_55;
        case 8:
          uint64_t v29 = 3;
          goto LABEL_55;
      }
    }
    else
    {
      switch(v28)
      {
        case 0x20:
          uint64_t v29 = 5;
LABEL_55:
          uint64_t v85 = 0;
          if (!*(void *)(a1 + 8 * v29 + 96) || !(_BYTE)v224 || !*(void *)(a1 + 8 * v224 + 96))
          {
LABEL_58:
            unsigned __int8 v221 = sub_1CB87E160(a1, *(llvm::LLVMContext **)(a3 + 56), v29, v85);
            int v87 = sub_1CB896FB8((unsigned __int8 *)&v224);
            if (v86 == 1) {
            unint64_t v88 = v11;
            }
            unint64_t v90 = sub_1CB87E200(&v221);
            if (v89 == 1) {
            uint64_t v201 = a2;
            }
            uint64_t v184 = (uint64_t)v13;
            uint64_t v185 = v12;
            int v181 = v87;
            unint64_t v197 = v90 >> 3;
            unsigned int v91 = (v87 + (v90 >> 3) - 1) / (v90 >> 3);
            uint64_t v92 = sub_1CD7F06FC(a3, v224, *((uint64_t *)&v224 + 1), v221, 0);
            unint64_t v94 = v93;
            int v199 = *((_DWORD *)v92 + 19);
            *(void *)&long long v229 = v230;
            *((void *)&v229 + 1) = 0x800000000;
            uint64_t v95 = (uint64_t *)v10;
            uint64_t v96 = *(void *)(v10 + 40) + 16 * v88;
            uint64_t v97 = *(llvm **)v96;
            uint64_t v98 = *(void *)(v96 + 8);
            uint64_t v99 = v92[5] + 16 * v93;
            uint64_t v100 = *(llvm **)v99;
            uint64_t v101 = *(void *)(v99 + 8);
            uint64_t v102 = (v90 >> 3);
            uint64_t v103 = sub_1CD7EBF14(a3, v102, (const llvm::APInt *)&v222, v97, v98, 0, 0);
            uint64_t v193 = v104;
            uint64_t v195 = (uint64_t)v103;
            uint64_t v105 = sub_1CD7EBF14(a3, v102, (const llvm::APInt *)&v222, v100, v101, 0, 0);
            uint64_t v187 = v106;
            uint64_t v190 = (uint64_t)v105;
            uint64_t v182 = v94;
            uint64_t v183 = (uint64_t)v92;
            unsigned int v107 = 0;
            unint64_t v108 = v94;
            if (v91 < 2)
            {
              unsigned int v110 = v95;
              unint64_t v111 = v88;
            }
            else
            {
              unsigned int v109 = v91 - 1;
              unsigned int v110 = v95;
              unint64_t v111 = v88;
              do
              {
                uint64_t v112 = v221;
                uint64_t v113 = v107;
                sub_1CB8F0264(*(uint64_t **)(v201 + 96), v107, (uint64_t)&v220);
                uint64_t v114 = *(void *)(v201 + 96);
                uint64_t v115 = *(unsigned __int8 *)(v114 + 34);
                __int16 v116 = *(_WORD *)(v114 + 32);
                long long v117 = *(_OWORD *)(v114 + 56);
                long long v218 = *(_OWORD *)(v114 + 40);
                long long v219 = v117;
                unint64_t v206 = v206 & 0xFFFFFFFFFFFF0000 | v115 | 0x100;
                unsigned int v118 = sub_1CD7F00F8(a3, v112, 0, (uint64_t)&v222, v204, v205, (uint64_t)v110, v111, &v220, v206, SHIDWORD(v206), v116, &v218, 0);
                unsigned int v120 = v119;
                FixedStacint k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v202 + 432), v199);
                if (FixedStack) {
                  int v122 = *((_DWORD *)FixedStack + 3);
                }
                else {
                  int v122 = 0;
                }
                long long v218 = 0u;
                long long v219 = 0u;
                uint64_t v225 = (unint64_t)FixedStack | 4;
                uint64_t v226 = v113;
                int v227 = v122;
                char v228 = 0;
                uint64_t v123 = (uint64_t *)(v118[5] + 16 * v120);
                char v124 = sub_1CD7EA9CC(a3, *v123, v123[1]);
                uint64_t v127 = sub_1CD7FB188(a3, (uint64_t)v118, 1, (uint64_t)&v222, (uint64_t)v118, v120, (uint64_t)v92, v108, (uint64_t)&v225, v124, 0, 0, &v218);
                if (DWORD2(v229) >= (unint64_t)HIDWORD(v229)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unsigned int v128 = (uint64_t **)(v229 + 16 * DWORD2(v229));
                *unsigned int v128 = v127;
                v128[1] = v125;
                ++DWORD2(v229);
                unsigned int v107 = v113 + v197;
                uint64_t v129 = v110[5] + 16 * v111;
                unsigned int v110 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v222, *(llvm **)v129, *(void *)(v129 + 8), (uint64_t)v110, v111, v126, v195, v193, 3);
                unint64_t v111 = v111 & 0xFFFFFFFF00000000 | v130;
                uint64_t v131 = v92[5] + 16 * v108;
                uint64_t v92 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v222, *(llvm **)v131, *(void *)(v131 + 8), (uint64_t)v92, v108, v132, v190, v187, 3);
                unint64_t v108 = v108 & 0xFFFFFFFF00000000 | v133;
                --v109;
              }
              while (v109);
            }
            uint64_t v134 = v111;
            uint64_t v135 = (uint64_t)v110;
            uint64_t v136 = (llvm::LLVMContext *)(8 * (v181 - v107));
            if ((int)v136 > 63)
            {
              if (v136 == 64)
              {
                uint64_t v137 = 0;
                uint64_t v138 = 6;
                goto LABEL_101;
              }
              if (v136 == 128)
              {
                uint64_t v137 = 0;
                uint64_t v138 = 7;
                goto LABEL_101;
              }
            }
            else
            {
              switch(v136)
              {
                case 0x20:
                  uint64_t v137 = 0;
                  uint64_t v138 = 5;
LABEL_101:
                  uint64_t v150 = v221;
                  sub_1CB8F0264(*(uint64_t **)(v201 + 96), v107, (uint64_t)&v217);
                  uint64_t v151 = *(void *)(v201 + 96);
                  uint64_t v152 = *(unsigned __int8 *)(v151 + 34);
                  __int16 v153 = *(_WORD *)(v151 + 32);
                  long long v154 = *(_OWORD *)(v151 + 56);
                  long long v218 = *(_OWORD *)(v151 + 40);
                  long long v219 = v154;
                  uint64_t v156 = sub_1CD7FAEE8(a3, 1, (uint64_t)&v222, v150, 0, v204, v205, v155, v135, v134, &v217, v138, v137, (unsigned __int16)v152 | 0x100u, (v152 | 0x100uLL) >> 32, v153, &v218);
                  uint64_t v158 = v157;
                  unsigned int v159 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v202 + 432), v199);
                  if (v159) {
                    int v160 = *((_DWORD *)v159 + 3);
                  }
                  else {
                    int v160 = 0;
                  }
                  long long v218 = 0u;
                  long long v219 = 0u;
                  uint64_t v225 = (unint64_t)v159 | 4;
                  uint64_t v226 = v107;
                  int v227 = v160;
                  char v228 = 0;
                  char v161 = sub_1CD7EA9CC(a3, v138, v137);
                  uint64_t v163 = sub_1CD7FB71C(a3, (uint64_t)v156, 1, (uint64_t)&v222, (uint64_t)v156, v158, (uint64_t)v92, v108, (uint64_t)&v225, v138, v137, v161, 0, 0, &v218);
                  if (DWORD2(v229) >= HIDWORD(v229)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v164 = (uint64_t **)(v229 + 16 * DWORD2(v229));
                  *uint64_t v164 = v163;
                  v164[1] = v162;
                  uint64_t v165 = ++DWORD2(v229);
                  uint64_t v166 = *(void *)(a3 + 832);
                  if (v166) {
                    uint64_t v167 = *(unsigned __int16 *)(v166 + 8);
                  }
                  else {
                    uint64_t v167 = 0;
                  }
                  unsigned int v168 = sub_1CD7FF4E8((void *)a3, (const char *)2, (const llvm::APInt *)&v222, (llvm *)1, 0, (uint64_t *)v229, v165, v167);
                  uint64_t v170 = v169;
                  int v171 = (*(unsigned __int16 *)(v201 + 26) >> 10) & 3;
                  unsigned int v172 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v202 + 432), v199);
                  *(void *)&long long v214 = (unint64_t)v172 | 4;
                  *((void *)&v214 + 1) = 0;
                  char v216 = 0;
                  if (v172) {
                    int v174 = *((_DWORD *)v172 + 3);
                  }
                  else {
                    int v174 = 0;
                  }
                  int v215 = v174;
                  long long v218 = 0u;
                  long long v219 = 0u;
                  *uint64_t v186 = sub_1CD7FAEE8(a3, v171, (uint64_t)&v222, v184, v185, (uint64_t)v168, (int)v170, v173, v183, v182, &v214, v224, *((uint64_t *)&v224 + 1), 0, 0, 0, &v218);
                  v186[1] = (uint64_t *)(v158 & 0xFFFFFFFF00000000 | v175);
                  v186[2] = v168;
                  v186[3] = v170;
                  if ((_OWORD *)v229 != v230) {
                    free((void *)v229);
                  }
                  goto LABEL_111;
                case 0x10:
                  uint64_t v137 = 0;
                  uint64_t v138 = 4;
                  goto LABEL_101;
                case 8:
                  uint64_t v137 = 0;
                  uint64_t v138 = 3;
                  goto LABEL_101;
              }
            }
            uint64_t v137 = llvm::IntegerType::get(*(llvm::IntegerType **)(a3 + 56), v136);
            uint64_t v138 = 0;
            goto LABEL_101;
          }
          if ((*(unsigned __int8 *)(a1 + 390 * v29 + 4115) | 4) != 4
            && v224 - 15 < 0x9C)
          {
            sub_1CD8163A4(a2, a3, (unint64_t)a4);
            goto LABEL_111;
          }
          unsigned int v140 = sub_1CD7FAE3C(a3, v29, 0, (uint64_t)&v222, v204, v205, v10, v11, *(void *)(a2 + 96));
          uint64_t v141 = *(void *)(a3 + 832);
          if (v141) {
            __int16 v142 = *(_WORD *)(v141 + 8);
          }
          else {
            __int16 v142 = 0;
          }
          uint64_t v143 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)0xD8, (uint64_t)&v222, (llvm *)v224, *((uint64_t *)&v224 + 1), (uint64_t)v140, v139, v142);
          unint64_t v145 = v144;
          if (v224 == v13)
          {
            if ((_BYTE)v13 || *((void *)&v224 + 1) == v12)
            {
LABEL_126:
              *a4 = v143;
              a4[1] = (uint64_t *)v145;
              a4[2] = v140;
              a4[3] = (uint64_t *)1;
              goto LABEL_111;
            }
          }
          else if ((_BYTE)v13)
          {
            if (((_BYTE)v13 + 104) < 0x13u
              || ((_BYTE)v13 - 8) < 7u
              || ((_BYTE)v13 - 75) < 0x2Du)
            {
LABEL_96:
              uint64_t v146 = 215;
              goto LABEL_97;
            }
LABEL_92:
            uint64_t v146 = 200;
LABEL_97:
            uint64_t v148 = *(void *)(a3 + 832);
            if (v148) {
              __int16 v149 = *(_WORD *)(v148 + 8);
            }
            else {
              __int16 v149 = 0;
            }
            uint64_t v143 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)v146, (uint64_t)&v222, v13, v12, (uint64_t)v143, (void *)v145, v149);
            unint64_t v145 = v145 & 0xFFFFFFFF00000000 | v179;
            goto LABEL_126;
          }
          int v147 = *(_DWORD *)(v12 + 8);
          if ((v147 & 0xFE) == 0x12) {
            int v147 = *(_DWORD *)(**(void **)(v12 + 16) + 8);
          }
          if (v147 <= 6u) {
            goto LABEL_96;
          }
          goto LABEL_92;
        case 0x40:
          uint64_t v29 = 6;
          goto LABEL_55;
        case 0x80:
          uint64_t v29 = 7;
          goto LABEL_55;
      }
    }
    uint64_t v85 = llvm::IntegerType::get(v21, v28);
    uint64_t v29 = 0;
    goto LABEL_58;
  }
  int v207 = (uint64_t *)a1;
  uint64_t v16 = v11;
  uint64_t v17 = v10;
  if ((_BYTE)v224) {
    unsigned int v18 = sub_1CB87E200((unsigned __int8 *)&v224);
  }
  else {
    unsigned int v18 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v224);
  }
  unsigned int v24 = v18;
  if (v19 == 1) {
  unsigned int v25 = (llvm::LLVMContext *)(v24 >> 1);
  }
  uint64_t v203 = (uint64_t)v25;
  if (v24 >> 1 <= 0x1F)
  {
    switch(v25)
    {
      case 1:
        uint64_t v26 = 0;
        uint64_t v27 = 2;
        goto LABEL_40;
      case 0x10:
        uint64_t v26 = 0;
        uint64_t v27 = 4;
        goto LABEL_40;
      case 8:
        uint64_t v26 = 0;
        uint64_t v27 = 3;
        goto LABEL_40;
    }
LABEL_136:
    uint64_t v26 = llvm::IntegerType::get(*(llvm::IntegerType **)(a3 + 56), v25);
    uint64_t v27 = 0;
    goto LABEL_40;
  }
  if (v25 != 32)
  {
    if (v25 == 64)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 6;
      goto LABEL_40;
    }
    if (v25 == 128)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 7;
      goto LABEL_40;
    }
    goto LABEL_136;
  }
  uint64_t v26 = 0;
  uint64_t v27 = 5;
LABEL_40:
  uint64_t v30 = *(void *)(a2 + 96);
  if (((*(unsigned __int16 *)(a2 + 26) >> 10) & 3) != 0) {
    int v31 = (*(unsigned __int16 *)(a2 + 26) >> 10) & 3;
  }
  else {
    int v31 = 3;
  }
  uint64_t v32 = (long long *)(v30 + 40);
  uint64_t v33 = *(unsigned __int8 *)(v30 + 34) | 0x100;
  uint64_t v34 = v24 >> 4;
  uint64_t v198 = v27;
  unint64_t v200 = v16 & 0xFFFFFFFF00000000;
  uint64_t v35 = a2;
  uint64_t v194 = v33;
  uint64_t v196 = v26;
  if (*(unsigned char *)(*(void *)(**(void **)(a3 + 40) + 40) + 272))
  {
    long long v209 = *(_OWORD *)v30;
    uint64_t v210 = *(void *)(v30 + 16);
    __int16 v55 = *(_WORD *)(v30 + 32);
    long long v56 = v32[1];
    long long v229 = *v32;
    v230[0] = v56;
    unsigned int v38 = v13;
    uint64_t v57 = v12;
    unsigned int v192 = sub_1CD7FAEE8(a3, v31, (uint64_t)&v222, (uint64_t)v13, v12, v204, v205, v20, v17, v16, &v209, v27, v26, v33, SHIDWORD(v33), v55, &v229);
    unsigned int v54 = v58;
    unsigned int v189 = sub_1CD7F6604(a3, v17, v16, v34, 0, (const llvm::APInt *)&v222, 3);
    uint64_t v44 = a3;
    uint64_t v60 = v59 | v200;
    uint64_t v46 = v57;
    sub_1CB8F0264(*(uint64_t **)(v35 + 96), v34, (uint64_t)&v208);
    uint64_t v61 = *(void *)(v35 + 96);
    __int16 v62 = *(_WORD *)(v61 + 32);
    long long v63 = *(_OWORD *)(v61 + 56);
    long long v229 = *(_OWORD *)(v61 + 40);
    v230[0] = v63;
    int v52 = v192;
    uint64_t v47 = sub_1CD7FAEE8(v44, 3, (uint64_t)&v222, (uint64_t)v38, v57, v204, v205, v64, (uint64_t)v189, v60, &v208, v198, v196, v194, SHIDWORD(v194), v62, &v229);
    unsigned int v42 = v65;
  }
  else
  {
    long long v212 = *(_OWORD *)v30;
    uint64_t v213 = *(void *)(v30 + 16);
    __int16 v36 = *(_WORD *)(v30 + 32);
    long long v37 = v32[1];
    long long v229 = *v32;
    v230[0] = v37;
    int v191 = v31;
    unsigned int v38 = v13;
    uint64_t v39 = v12;
    uint64_t v40 = sub_1CD7FAEE8(a3, 3, (uint64_t)&v222, (uint64_t)v13, v12, v204, v205, v20, v17, v16, &v212, v27, v26, v33, SHIDWORD(v33), v36, &v229);
    unsigned int v42 = v41;
    unint64_t v188 = sub_1CD7F6604(a3, v17, v16, v34, 0, (const llvm::APInt *)&v222, 3);
    uint64_t v44 = a3;
    uint64_t v45 = v43 | v200;
    uint64_t v46 = v39;
    uint64_t v47 = v40;
    sub_1CB8F0264(*(uint64_t **)(v35 + 96), v34, (uint64_t)&v211);
    uint64_t v48 = *(void *)(v35 + 96);
    __int16 v49 = *(_WORD *)(v48 + 32);
    long long v50 = *(_OWORD *)(v48 + 56);
    long long v229 = *(_OWORD *)(v48 + 40);
    v230[0] = v50;
    int v52 = sub_1CD7FAEE8(v44, v191, (uint64_t)&v222, (uint64_t)v13, v46, v204, v205, v51, (uint64_t)v188, v45, &v211, v198, v196, v194, SHIDWORD(v194), v49, &v229);
    unsigned int v54 = v53;
  }
  uint64_t v66 = (uint64_t *)(v52[5] + 16 * v54);
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(v207, *v66, v66[1], *(void *)(**(void **)(v44 + 40) + 40) + 272, 1);
  uint64_t v69 = sub_1CD7EBF14(v44, v203, (const llvm::APInt *)&v222, ShiftAmountTy, v68, 0, 0);
  uint64_t v72 = *(void *)(v44 + 832);
  if (v72) {
    LOWORD(v72) = *(_WORD *)(v72 + 8);
  }
  uint64_t v74 = sub_1CCFDED5C(v44, 175, (const llvm::APInt *)&v222, v38, v46, (uint64_t)v52, v54, v71, (uint64_t)v69, v70, v72);
  uint64_t v76 = v73;
  uint64_t v77 = *(void *)(v44 + 832);
  if (v77) {
    LOWORD(v77) = *(_WORD *)(v77 + 8);
  }
  unsigned int v79 = sub_1CCFDED5C(v44, 172, (const llvm::APInt *)&v222, v38, v46, (uint64_t)v74, v73, v75, (uint64_t)v47, v42, v77);
  unint64_t v81 = v76 & 0xFFFFFFFF00000000 | v80;
  uint64_t v82 = *(void *)(v44 + 832);
  if (v82) {
    LOWORD(v82) = *(_WORD *)(v82 + 8);
  }
  uint64_t v83 = sub_1CCFDED5C(v44, 2, (const llvm::APInt *)&v222, (llvm *)1, 0, (uint64_t)v47, 1, v78, (uint64_t)v52, 1, v82);
  *uint64_t v186 = v79;
  v186[1] = (uint64_t *)v81;
  v186[2] = v83;
  v186[3] = v84;
LABEL_111:
  if (v222)
  {
    int v176 = *v222;
    if ((v176 - 4) > 0x1E)
    {
      if ((v176 - 3) >= 0xFFFFFFFE) {
        uint64_t v177 = v222;
      }
      else {
        uint64_t v177 = 0;
      }
      if ((v176 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v178 = (unint64_t)(v177 + 8);
LABEL_121:
        *(void *)&long long v229 = &v222;
        sub_1CC5FA668(v178 + 16, &v229);
        return;
      }
      if (v176 == 3) {
        *((void *)v222 + 1) = 0;
      }
    }
    else if ((v222[1] & 0x7F) == 2 || *((_DWORD *)v222 + 3))
    {
      uint64_t v180 = *((void *)v222 + 2);
      if ((v180 & 4) != 0)
      {
        unint64_t v178 = v180 & 0xFFFFFFFFFFFFFFF8;
        if (v178) {
          goto LABEL_121;
        }
      }
    }
  }
}

uint64_t *sub_1CD01B664(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  BOOL v5 = *(uint64_t **)(a2 + 32);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v9 = (uint64_t *)v5[10];
  unint64_t v8 = v5[11];
  uint64_t v11 = v5[5];
  uint64_t v10 = (void *)v5[6];
  long long v12 = *(_OWORD *)(*(void *)(v11 + 40) + 16 * v10);
  uint64_t v153 = *(unsigned __int8 *)(*(void *)(a2 + 96) + 34);
  uint64_t v148 = *(void *)(a3 + 40);
  long long v13 = *(_OWORD *)(a2 + 80);
  long long v173 = v13;
  long long v174 = v12;
  uint64_t v14 = *(unsigned __int8 **)(a2 + 64);
  int v171 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v171, v14, 2);
    char v15 = v173;
  }
  else
  {
    char v15 = v13;
  }
  int v172 = *(_DWORD *)(a2 + 60);
  if (v15)
  {
    if ((v15 - 8) >= 0xA3u) {
      goto LABEL_7;
    }
  }
  else if ((*(_DWORD *)(*((void *)&v173 + 1) + 8) & 0xFE) != 0x12 {
         && *(_DWORD *)(*((void *)&v173 + 1) + 8) > 6u)
  }
  {
LABEL_7:
    int v16 = v7;
    *(void *)&long long v163 = sub_1CD78EC68((unsigned __int8 *)&v173, *(llvm::IntegerType **)(a3 + 56));
    *((void *)&v163 + 1) = v17;
    if ((_BYTE)v163) {
      unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v163);
    }
    else {
      unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v163);
    }
    unsigned int v25 = ExtendedSizeInBits;
    uint64_t v151 = v6;
    uint64_t v26 = ExtendedSizeInBits;
    uint64_t v27 = (uint64_t *)(*(void *)(v11 + 40) + 16 * v10);
    ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, *v27, v27[1], *(void *)(**(void **)(a3 + 40) + 40) + 272, 1);
    uint64_t v30 = sub_1CD7EBF14(a3, v26, (const llvm::APInt *)&v171, ShiftAmountTy, v29, 0, 0);
    uint64_t v33 = *(void *)(a3 + 832);
    if (v33) {
      LOWORD(v33) = *(_WORD *)(v33 + 8);
    }
    unsigned int v34 = v10;
    uint64_t v35 = sub_1CCFDED5C(a3, 177, (const llvm::APInt *)&v171, (llvm *)v174, *((uint64_t *)&v174 + 1), v11, (uint64_t)v10, v32, (uint64_t)v30, v31, v33);
    uint64_t v37 = v11;
    unsigned int v38 = v35;
    unsigned int v144 = v36;
    if (*(unsigned char *)(*(void *)(**(void **)(a3 + 40) + 40) + 272)) {
      uint64_t v39 = (uint64_t)v35;
    }
    else {
      uint64_t v39 = v37;
    }
    if (*(unsigned char *)(*(void *)(**(void **)(a3 + 40) + 40) + 272)) {
      unsigned int v40 = v36;
    }
    else {
      unsigned int v40 = v34;
    }
    unsigned int v41 = *(long long **)(a2 + 96);
    long long v156 = *v41;
    uint64_t v157 = *((void *)v41 + 2);
    LOWORD(v41) = *((_WORD *)v41 + 16);
    long long v175 = 0u;
    v176[0] = 0u;
    unsigned int v42 = sub_1CD7FB71C(a3, v151, v16, (uint64_t)&v171, v39, v40, (uint64_t)v9, v8, (uint64_t)&v156, v163, *((uint64_t *)&v163 + 1), v153, SHIDWORD(v153), (__int16)v41, &v175);
    uint64_t v146 = v43;
    uint64_t v149 = (uint64_t)v42;
    uint64_t v44 = v25 >> 3;
    uint64_t v45 = sub_1CD7F6604(a3, (uint64_t)v9, v8, v44, 0, (const llvm::APInt *)&v171, 3);
    unsigned int v47 = v46;
    if (!*(unsigned char *)(*(void *)(**(void **)(a3 + 40) + 40) + 272))
    {
      uint64_t v37 = (uint64_t)v38;
      unsigned int v34 = v144;
    }
    sub_1CB8F0264(*(uint64_t **)(a2 + 96), v44, (uint64_t)v155);
    uint64_t v48 = *(void *)(a2 + 96);
    __int16 v49 = *(_WORD *)(v48 + 32);
    long long v50 = *(_OWORD *)(v48 + 56);
    long long v175 = *(_OWORD *)(v48 + 40);
    v176[0] = v50;
    uint64_t v51 = sub_1CD7FB71C(a3, v151, v16, (uint64_t)&v171, v37, v34, (uint64_t)v45, v47, (uint64_t)v155, v163, *((uint64_t *)&v163 + 1), v153, SHIDWORD(v153), v49, &v175);
    uint64_t v54 = *(void *)(a3 + 832);
    if (v54) {
      LOWORD(v54) = *(_WORD *)(v54 + 8);
    }
    __int16 v55 = sub_1CCFDED5C(a3, 2, (const llvm::APInt *)&v171, (llvm *)1, 0, v149, v146, v53, (uint64_t)v51, v52, v54);
    goto LABEL_32;
  }
  uint64_t v19 = v6;
  uint64_t v20 = *(llvm::IntegerType **)(a3 + 56);
  if ((_BYTE)v174) {
    uint64_t v21 = sub_1CB87E200((unsigned __int8 *)&v174);
  }
  else {
    uint64_t v21 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v174);
  }
  unint64_t v23 = (llvm::LLVMContext *)v21;
  if (v22 == 1) {
  if ((int)v23 <= 31)
  }
  {
    switch(v23)
    {
      case 1:
        uint64_t v24 = 2;
        goto LABEL_41;
      case 0x10:
        uint64_t v24 = 4;
        goto LABEL_41;
      case 8:
        uint64_t v24 = 3;
        goto LABEL_41;
    }
  }
  else
  {
    switch(v23)
    {
      case 0x20:
        uint64_t v24 = 5;
        goto LABEL_41;
      case 0x40:
        uint64_t v24 = 6;
        goto LABEL_41;
      case 0x80:
        uint64_t v24 = 7;
LABEL_41:
        if (!a1[v24 + 12]) {
          goto LABEL_42;
        }
        if ((*((unsigned __int8 *)a1 + 390 * v24 + 4116) | 4) == 4)
        {
LABEL_45:
          uint64_t v60 = *(void *)(a3 + 832);
          if (v60) {
            __int16 v61 = *(_WORD *)(v60 + 8);
          }
          else {
            __int16 v61 = 0;
          }
          unsigned int v65 = sub_1CD7F3564((llvm::APFloatBase *)a3, (const char *)0xD8, (uint64_t)&v171, (llvm *)v24, 0, v11, v10, v61);
          uint64_t v66 = *(long long **)(a2 + 96);
          long long v169 = *v66;
          uint64_t v170 = *((void *)v66 + 2);
          LOWORD(v66) = *((_WORD *)v66 + 16);
          long long v175 = 0u;
          v176[0] = 0u;
          long long v56 = sub_1CD7FB188(a3, v19, v7, (uint64_t)&v171, (uint64_t)v65, v67, (uint64_t)v9, v8, (uint64_t)&v169, v153, SHIDWORD(v153), (__int16)v66, &v175);
          goto LABEL_101;
        }
        if ((_BYTE)v173)
        {
          if (v173 - 15 >= 0x9C) {
            goto LABEL_45;
          }
        }
        else if ((*(_DWORD *)(*((void *)&v173 + 1) + 8) & 0xFE) != 0x12)
        {
          goto LABEL_45;
        }
        __int16 v55 = sub_1CD816B0C(v21, a2, a3);
LABEL_32:
        long long v56 = v55;
        goto LABEL_101;
    }
  }
  llvm::IntegerType::get(v20, v23);
LABEL_42:
  int v152 = v7;
  uint64_t v57 = *(llvm::IntegerType **)(a3 + 56);
  if ((_BYTE)v173) {
    uint64_t v58 = sub_1CB87E200((unsigned __int8 *)&v173);
  }
  else {
    uint64_t v58 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v173);
  }
  __int16 v62 = (llvm::LLVMContext *)v58;
  if (v59 == 1) {
  if ((int)v62 <= 31)
  }
  {
    switch(v62)
    {
      case 1:
        uint64_t v63 = 0;
        uint64_t v64 = 2;
        goto LABEL_68;
      case 0x10:
        uint64_t v63 = 0;
        uint64_t v64 = 4;
        goto LABEL_68;
      case 8:
        uint64_t v63 = 0;
        uint64_t v64 = 3;
        goto LABEL_68;
    }
  }
  else
  {
    switch(v62)
    {
      case 0x20:
        uint64_t v63 = 0;
        uint64_t v64 = 5;
        goto LABEL_68;
      case 0x40:
        uint64_t v63 = 0;
        uint64_t v64 = 6;
        goto LABEL_68;
      case 0x80:
        uint64_t v63 = 0;
        uint64_t v64 = 7;
        goto LABEL_68;
    }
  }
  uint64_t v63 = llvm::IntegerType::get(v57, v62);
  uint64_t v64 = 0;
LABEL_68:
  unsigned __int8 v168 = sub_1CB87E160((unint64_t)a1, v57, v64, v63);
  uint64_t v68 = v9[5] + 16 * v8;
  uint64_t v139 = *(llvm **)v68;
  uint64_t v141 = *(void *)(v68 + 8);
  int v70 = sub_1CB896FB8((unsigned __int8 *)&v173);
  if (v69 == 1) {
  unint64_t v72 = sub_1CB87E200(&v168);
  }
  if (v71 == 1) {
  int v136 = v70;
  }
  unsigned int v135 = (v70 + (v72 >> 3) - 1) / (v72 >> 3);
  uint64_t v73 = sub_1CD7F06FC(a3, v173, *((uint64_t *)&v173 + 1), v168, 0);
  unint64_t v154 = v74;
  uint64_t v75 = (uint64_t)v73;
  int v147 = *((_DWORD *)v73 + 19);
  FixedStacint k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v148 + 432), v147);
  if (FixedStack) {
    int v77 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v77 = 0;
  }
  long long v78 = v173;
  long long v175 = 0u;
  v176[0] = 0u;
  long long v163 = (unint64_t)FixedStack | 4;
  LODWORD(v164) = v77;
  BYTE4(v164) = 0;
  char v79 = sub_1CD7EA9CC(a3, v173, *((uint64_t *)&v173 + 1));
  uint64_t v80 = v19;
  unint64_t v81 = (uint64_t *)v75;
  uint64_t v82 = sub_1CD7FB71C(a3, v80, v152, (uint64_t)&v171, v11, v10, v75, v154, (uint64_t)&v163, v78, *((uint64_t *)&v78 + 1), v79, 0, 0, &v175);
  int v143 = v83;
  uint64_t v145 = (uint64_t)v82;
  uint64_t v84 = *(void *)(v75 + 40) + 16 * v154;
  uint64_t v85 = *(llvm **)v84;
  uint64_t v86 = *(void *)(v84 + 8);
  int v87 = sub_1CD7EBF14(a3, (v72 >> 3), (const llvm::APInt *)&v171, v139, v141, 0, 0);
  uint64_t v140 = v88;
  uint64_t v142 = (uint64_t)v87;
  uint64_t v89 = sub_1CD7EBF14(a3, (v72 >> 3), (const llvm::APInt *)&v171, v85, v86, 0, 0);
  uint64_t v137 = v90;
  uint64_t v138 = (uint64_t)v89;
  *(void *)&long long v175 = v176;
  *((void *)&v175 + 1) = 0x800000000;
  if (v135 < 2)
  {
    unsigned int v91 = 0;
  }
  else
  {
    unsigned int v91 = 0;
    unsigned int v92 = v135 - 1;
    do
    {
      uint64_t v93 = v168;
      unint64_t v94 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v148 + 432), v147);
      *(void *)&long long v165 = (unint64_t)v94 | 4;
      *((void *)&v165 + 1) = v91;
      char v167 = 0;
      if (v94) {
        int v95 = *((_DWORD *)v94 + 3);
      }
      else {
        int v95 = 0;
      }
      int v166 = v95;
      long long v164 = 0u;
      long long v163 = 0u;
      uint64_t v96 = (uint64_t)v81;
      uint64_t v97 = sub_1CD7F00F8(a3, v93, 0, (uint64_t)&v171, v145, v143, (uint64_t)v81, v154, &v165, 0, 0, 0, &v163, 0);
      unsigned int v99 = v98;
      sub_1CB8F0264(*(uint64_t **)(a2 + 96), v91, (uint64_t)v162);
      uint64_t v100 = *(void *)(a2 + 96);
      uint64_t v101 = *(unsigned __int8 *)(v100 + 34);
      LOWORD(v100) = *(_WORD *)(v100 + 32);
      long long v164 = 0u;
      long long v163 = 0u;
      uint64_t v104 = sub_1CD7FB188(a3, (uint64_t)v97, 1, (uint64_t)&v171, (uint64_t)v97, v99, (uint64_t)v9, v8, (uint64_t)v162, v101, SHIDWORD(v101), v100, &v163);
      if (DWORD2(v175) >= (unint64_t)HIDWORD(v175)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v105 = (uint64_t **)(v175 + 16 * DWORD2(v175));
      *uint64_t v105 = v104;
      v105[1] = v102;
      ++DWORD2(v175);
      v91 += v72 >> 3;
      uint64_t v106 = *(void *)(v96 + 40) + 16 * v154;
      unint64_t v81 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v171, *(llvm **)v106, *(void *)(v106 + 8), v96, v154, v103, v138, v137, 3);
      unint64_t v154 = v154 & 0xFFFFFFFF00000000 | v107;
      uint64_t v108 = v9[5] + 16 * v8;
      uint64_t v9 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v171, *(llvm **)v108, *(void *)(v108 + 8), (uint64_t)v9, v8, v109, v142, v140, 3);
      unint64_t v8 = v8 & 0xFFFFFFFF00000000 | v110;
      --v92;
    }
    while (v92);
  }
  unint64_t v111 = (llvm::LLVMContext *)(8 * (v136 - v91));
  if ((int)v111 > 63)
  {
    if (v111 == 64)
    {
      uint64_t v112 = 0;
      uint64_t v113 = 6;
      goto LABEL_93;
    }
    if (v111 == 128)
    {
      uint64_t v112 = 0;
      uint64_t v113 = 7;
      goto LABEL_93;
    }
LABEL_121:
    uint64_t v112 = llvm::IntegerType::get(*(llvm::IntegerType **)(a3 + 56), v111);
    uint64_t v113 = 0;
    goto LABEL_93;
  }
  if (v111 != 32)
  {
    if (v111 == 16)
    {
      uint64_t v112 = 0;
      uint64_t v113 = 4;
      goto LABEL_93;
    }
    if (v111 == 8)
    {
      uint64_t v112 = 0;
      uint64_t v113 = 3;
      goto LABEL_93;
    }
    goto LABEL_121;
  }
  uint64_t v112 = 0;
  uint64_t v113 = 5;
LABEL_93:
  uint64_t v114 = v168;
  uint64_t v115 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v148 + 432), v147);
  *(void *)&long long v159 = (unint64_t)v115 | 4;
  *((void *)&v159 + 1) = v91;
  char v161 = 0;
  if (v115) {
    int v117 = *((_DWORD *)v115 + 3);
  }
  else {
    int v117 = 0;
  }
  int v160 = v117;
  long long v164 = 0u;
  long long v163 = 0u;
  unsigned int v118 = sub_1CD7FAEE8(a3, 1, (uint64_t)&v171, v114, 0, v145, v143, v116, (uint64_t)v81, v154, &v159, v113, v112, 0, 0, 0, &v163);
  unsigned int v120 = v119;
  sub_1CB8F0264(*(uint64_t **)(a2 + 96), v91, (uint64_t)v158);
  uint64_t v121 = *(void *)(a2 + 96);
  uint64_t v122 = *(unsigned __int8 *)(v121 + 34);
  __int16 v123 = *(_WORD *)(v121 + 32);
  long long v163 = *(_OWORD *)(v121 + 40);
  long long v164 = *(_OWORD *)(v121 + 56);
  uint64_t v125 = sub_1CD7FB71C(a3, (uint64_t)v118, 1, (uint64_t)&v171, (uint64_t)v118, v120, (uint64_t)v9, v8, (uint64_t)v158, v113, v112, v122, SHIDWORD(v122), v123, &v163);
  if (DWORD2(v175) >= HIDWORD(v175)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v126 = (uint64_t **)(v175 + 16 * DWORD2(v175));
  *uint64_t v126 = v125;
  v126[1] = v124;
  uint64_t v127 = ++DWORD2(v175);
  uint64_t v128 = *(void *)(a3 + 832);
  if (v128) {
    uint64_t v129 = *(unsigned __int16 *)(v128 + 8);
  }
  else {
    uint64_t v129 = 0;
  }
  long long v56 = sub_1CD7FF4E8((void *)a3, (const char *)2, (const llvm::APInt *)&v171, (llvm *)1, 0, (uint64_t *)v175, v127, v129);
  if ((_OWORD *)v175 != v176) {
    free((void *)v175);
  }
LABEL_101:
  if (v171)
  {
    int v130 = *v171;
    if ((v130 - 4) > 0x1E)
    {
      if ((v130 - 3) >= 0xFFFFFFFE) {
        uint64_t v132 = v171;
      }
      else {
        uint64_t v132 = 0;
      }
      if ((v130 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v133 = (unint64_t)(v132 + 8);
LABEL_111:
        *(void *)&long long v175 = &v171;
        sub_1CC5FA668(v133 + 16, &v175);
        return v56;
      }
      if (v130 == 3) {
        *((void *)v171 + 1) = 0;
      }
    }
    else if ((v171[1] & 0x7F) == 2 || *((_DWORD *)v171 + 3))
    {
      uint64_t v134 = *((void *)v171 + 2);
      if ((v134 & 4) != 0)
      {
        unint64_t v133 = v134 & 0xFFFFFFFFFFFFFFF8;
        if (v133) {
          goto LABEL_111;
        }
      }
    }
  }
  return v56;
}

uint64_t *sub_1CD01C2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(uint64_t **)(a2 + 32);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  uint64_t v44 = v11[6];
  uint64_t v45 = v11[5];
  uint64_t v14 = *(void *)(*v11 + 40) + 16 * v12;
  int v16 = *(llvm **)v14;
  uint64_t v15 = *(void *)(v14 + 8);
  int v17 = *(unsigned __int16 *)(a2 + 24);
  unsigned int v18 = *(unsigned __int8 **)(a2 + 64);
  unsigned int v46 = v18;
  if (v18) {
    llvm::MetadataTracking::track((uint64_t)&v46, v18, 2);
  }
  int v47 = *(_DWORD *)(a2 + 60);
  unsigned int v19 = 18;
  switch(v17)
  {
    case 168:
      goto LABEL_5;
    case 169:
      if (!(_BYTE)v16)
      {
        unsigned int v19 = 12;
        goto LABEL_33;
      }
      if (v16 != 1)
      {
        BOOL v31 = *(void *)(a1 + 8 * v16 + 96) == 0;
        if (v31 || *(unsigned char *)(a1 + 390 * v16 + 3919)) {
          goto LABEL_31;
        }
        goto LABEL_10;
      }
      if (!*(unsigned char *)(a1 + 390 * v16 + 3919))
      {
LABEL_10:
        if (!*(unsigned char *)(a1 + 390 * v16 + 3947))
        {
          uint64_t v20 = *(void *)(a3 + 832);
          if (v20) {
            LOWORD(v20) = *(_WORD *)(v20 + 8);
          }
          uint64_t v21 = sub_1CCFDED5C(a3, 85, (const llvm::APInt *)&v46, v16, v15, v13, v12, a8, v45, v44, v20);
          uint64_t v24 = *(void *)(a3 + 832);
          if (v24) {
            LOWORD(v24) = *(_WORD *)(v24 + 8);
          }
          unsigned int v25 = sub_1CCFDED5C(a3, 57, (const llvm::APInt *)&v46, v16, v15, v13, v12, v23, (uint64_t)v21, v22, v24);
          goto LABEL_48;
        }
LABEL_31:
        unsigned int v19 = 12;
        goto LABEL_41;
      }
      unsigned int v19 = 12;
      goto LABEL_63;
    case 170:
      if (!(_BYTE)v16)
      {
        unsigned int v19 = 10;
LABEL_33:
        if ((*(_DWORD *)(v15 + 8) & 0xFE) == 0x12)
        {
LABEL_47:
          unsigned int v25 = sub_1CD8032A8(a3, a2, 0);
          goto LABEL_48;
        }
LABEL_63:
        uint64_t v39 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, void, llvm *, uint64_t))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(a3 + 40) + 40) + 272, *(void *)(a3 + 56), v16, v15);
        unsigned int v41 = sub_1CD3DC614((void *)a3, (const llvm::APInt *)&v46, v39, v40, v13, v12, v45, v44, v19, 0, 0, 0, 0);
        unsigned int v25 = sub_1CD3E1260((void *)a3, (const llvm::APInt *)&v46, v16, v15, (uint64_t)v41, v42, v13, v12, v45, v44, SHIDWORD(v44));
        goto LABEL_48;
      }
      if (v16 == 1)
      {
        if (*(unsigned char *)(a1 + 390 * v16 + 3918))
        {
          unsigned int v19 = 10;
          goto LABEL_63;
        }
      }
      else
      {
        BOOL v32 = *(void *)(a1 + 8 * v16 + 96) == 0;
        if (v32 || *(unsigned char *)(a1 + 390 * v16 + 3918)) {
          goto LABEL_40;
        }
      }
      if (*(unsigned char *)(a1 + 390 * v16 + 3947))
      {
LABEL_40:
        unsigned int v19 = 10;
LABEL_41:
        if (v16 - 15 < 0x9C)
        {
          BOOL v33 = !(_BYTE)v16 || *(void *)(a1 + 8 * v16 + 96) == 0;
          if (v33 || (*(unsigned __int8 *)(a1 + 390 * v16 + 4053) | 4) != 4) {
            goto LABEL_47;
          }
        }
        goto LABEL_63;
      }
      uint64_t v26 = *(void *)(a3 + 832);
      if (v26) {
        LOWORD(v26) = *(_WORD *)(v26 + 8);
      }
      uint64_t v27 = sub_1CCFDED5C(a3, 85, (const llvm::APInt *)&v46, v16, v15, v45, v44, a8, v13, v12, v26);
      uint64_t v30 = *(void *)(a3 + 832);
      if (v30) {
        LOWORD(v30) = *(_WORD *)(v30 + 8);
      }
      unsigned int v25 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v46, v16, v15, v13, v12, v29, (uint64_t)v27, v28, v30);
LABEL_48:
      unsigned int v34 = v25;
      if (v46)
      {
        int v35 = *v46;
        if ((v35 - 4) > 0x1E)
        {
          if ((v35 - 3) >= 0xFFFFFFFE) {
            uint64_t v37 = v46;
          }
          else {
            uint64_t v37 = 0;
          }
          if ((v35 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v38 = (unint64_t)(v37 + 8);
LABEL_58:
            uint64_t v48 = &v46;
            sub_1CC5FA668(v38 + 16, &v48);
            return v34;
          }
          if (v35 == 3) {
            *((void *)v46 + 1) = 0;
          }
        }
        else if ((v46[1] & 0x7F) == 2 || *((_DWORD *)v46 + 3))
        {
          uint64_t v43 = *((void *)v46 + 2);
          if ((v43 & 4) != 0)
          {
            unint64_t v38 = v43 & 0xFFFFFFFFFFFFFFF8;
            if (v38) {
              goto LABEL_58;
            }
          }
        }
      }
      return v34;
    default:
      unsigned int v19 = 20;
LABEL_5:
      if (!(_BYTE)v16) {
        goto LABEL_33;
      }
      goto LABEL_41;
  }
}

uint64_t *sub_1CD01C6A4(unsigned int *a1, uint64_t a2, BOOL a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  int v11 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v12 = *(long long **)(a2 + 32);
  long long v99 = *v12;
  uint64_t v13 = *((void *)v12 + 5);
  uint64_t v14 = *((void *)v12 + 6);
  uint64_t v15 = v99;
  uint64_t v16 = *(void *)(v99 + 40) + 16 * DWORD2(v99);
  int v17 = *(llvm **)v16;
  uint64_t v18 = *(void *)(v16 + 8);
  unsigned int v19 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v97 = v19;
  if (v19)
  {
    llvm::MetadataTracking::track((uint64_t)&v97, v19, 2);
    uint64_t v8 = a3;
  }
  int v98 = *(_DWORD *)(a2 + 60);
  if (v11 != 85)
  {
    if (v11 == 82)
    {
      uint64_t v23 = 76;
    }
    else
    {
      if (v11 != 84)
      {
        if ((_BYTE)v17)
        {
          if (v17 != 1 && (BOOL v24 = *(void *)&a1[2 * v17 + 24] == 0)
            || *((unsigned char *)a1 + 390 * v17 + 4031))
          {
            int v22 = 1;
            uint64_t v23 = 77;
            goto LABEL_27;
          }
          uint64_t v81 = v8;
          uint64_t v82 = sub_1CD7EBB8C(v8, (const llvm::APInt *)&v97, v13, v14, v17, v18);
          uint64_t v85 = *(void *)(v81 + 832);
          if (v85) {
            LOWORD(v85) = *(_WORD *)(v85 + 8);
          }
          long long v50 = sub_1CCFDED5C(v81, 169, (const llvm::APInt *)&v97, v17, v18, v15, *((uint64_t *)&v99 + 1), v84, (uint64_t)v82, v83, v85);
          uint64_t v54 = v86;
          uint64_t v87 = *(void *)(v81 + 832);
          if (v87) {
            LOWORD(v87) = *(_WORD *)(v87 + 8);
          }
          uint64_t v90 = v14;
          __int16 v91 = v87;
          uint64_t v89 = v13;
          uint64_t v46 = v81;
          uint64_t v47 = 56;
LABEL_43:
          uint64_t v48 = v17;
          uint64_t v49 = v18;
LABEL_67:
          long long v56 = sub_1CCFDED5C(v46, v47, (const llvm::APInt *)&v97, v48, v49, (uint64_t)v50, v54, v44, v89, v90, v91);
          goto LABEL_47;
        }
        int v22 = 1;
        uint64_t v23 = 77;
LABEL_45:
        if ((*(_DWORD *)(v18 + 8) & 0xFE) != 0x12) {
          goto LABEL_33;
        }
LABEL_46:
        long long v56 = sub_1CD8032A8(v8, a2, 0);
LABEL_47:
        uint64_t v57 = v56;
        goto LABEL_48;
      }
      uint64_t v23 = 78;
    }
    int v22 = 0;
    if ((_BYTE)v17) {
      goto LABEL_27;
    }
    goto LABEL_45;
  }
  if (!(_BYTE)v17)
  {
    int v22 = 0;
    uint64_t v23 = 79;
    goto LABEL_45;
  }
  if ((v17 == 1 || !(BOOL v21 = *(void *)&a1[2 * v17 + 24] == 0))
    && !*((unsigned char *)a1 + 390 * v17 + 4032))
  {
    uint64_t v51 = *(void *)(v8 + 832);
    if (v51) {
      LOWORD(v51) = *(_WORD *)(v51 + 8);
    }
    uint64_t v52 = v8;
    long long v50 = sub_1CCFDED5C(v8, 170, (const llvm::APInt *)&v97, v17, v18, v15, *((uint64_t *)&v99 + 1), a8, v13, v14, v51);
    uint64_t v54 = v53;
    uint64_t v55 = *(void *)(v52 + 832);
    if (v55) {
      LOWORD(v55) = *(_WORD *)(v55 + 8);
    }
    uint64_t v90 = v14;
    __int16 v91 = v55;
    uint64_t v89 = v13;
    uint64_t v46 = v52;
    uint64_t v47 = 57;
    goto LABEL_43;
  }
  int v22 = 0;
  uint64_t v23 = 79;
LABEL_27:
  if (v17 - 15 < 0x9C)
  {
    BOOL v25 = !(_BYTE)v17 || *(void *)&a1[2 * v17 + 24] == 0;
    if (v25 || (*((unsigned __int8 *)a1 + 390 * v17 + 4053) | 4) != 4) {
      goto LABEL_46;
    }
  }
LABEL_33:
  uint64_t v26 = v8;
  unsigned int v93 = sub_1CD7878C0((unsigned int *)&v99, (uint64_t)v19, a3);
  uint64_t v27 = v18;
  uint64_t v28 = (*(uint64_t (**)(unsigned int *, uint64_t, void, llvm *, uint64_t))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(v26 + 40) + 40) + 272, *(void *)(v26 + 56), v17, v18);
  uint64_t v30 = sub_1CD7F95FC(v26, (uint64_t)v17, v18, v28, v29);
  BOOL v33 = sub_1CD7FFB18((void *)v26, (const char *)v23, (const llvm::APInt *)&v97, v30, v31, v99, SDWORD2(v99), v32, v13, v14);
  uint64_t v92 = v34;
  int v35 = sub_1CD7EBF14(v26, 0, (const llvm::APInt *)&v97, v17, v18, 0, 0);
  uint64_t v37 = v36;
  unint64_t v94 = (void *)v26;
  uint64_t v38 = sub_1CD787918(v26, (const llvm::APInt *)&v97, (BOOL)v17, v27, 0, 0);
  if (v22)
  {
    uint64_t v40 = v38;
    uint64_t v41 = v39;
    if (sub_1CD7879C8(a1, (char)v17, v27) != 2)
    {
      long long v56 = sub_1CD3E1260(v94, (const llvm::APInt *)&v97, v17, v27, (uint64_t)v33, 1, v40, v41, (uint64_t)v33, 0, 0);
      goto LABEL_47;
    }
    uint64_t v42 = sub_1CD7EB744((uint64_t)v94, (uint64_t)v33, 1, (uint64_t)&v97, (uint64_t)v17, v27);
    uint64_t v45 = v94[104];
    if (v45) {
      LOWORD(v45) = *(_WORD *)(v45 + 8);
    }
    uint64_t v90 = v43;
    __int16 v91 = v45;
    uint64_t v89 = v42;
    uint64_t v46 = (uint64_t)v94;
    uint64_t v47 = 172;
    uint64_t v48 = v17;
    uint64_t v49 = v27;
    long long v50 = v33;
    goto LABEL_66;
  }
  if (v11 == 85)
  {
    if (sub_1CD7879C8(a1, (char)v17, v27) != 2)
    {
      long long v56 = sub_1CD3E1260((void *)v26, (const llvm::APInt *)&v97, v17, v27, (uint64_t)v33, 1, (uint64_t)v35, v37, (uint64_t)v33, 0, 0);
      goto LABEL_47;
    }
    uint64_t v62 = sub_1CD7EB744(v26, (uint64_t)v33, 1, (uint64_t)&v97, (uint64_t)v17, v27);
    uint64_t v64 = sub_1CD7EBB8C(v26, (const llvm::APInt *)&v97, v62, v63, v17, v27);
    uint64_t v66 = *(void *)(v26 + 832);
    if (v66) {
      LOWORD(v66) = *(_WORD *)(v66 + 8);
    }
    uint64_t v90 = v65;
    __int16 v91 = v66;
    uint64_t v89 = (uint64_t)v64;
    uint64_t v46 = v26;
    uint64_t v47 = 171;
    uint64_t v48 = v17;
    uint64_t v49 = v27;
    long long v50 = v33;
LABEL_66:
    uint64_t v54 = 0;
    goto LABEL_67;
  }
  unsigned int v96 = v93;
  if (v93 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v95);
  }
  int v95 = (unsigned __int8 **)(1 << (v93 - 1));
  uint64_t v67 = sub_1CD7EBB14(v26, (llvm::LLVMContext *)&v95, (const llvm::APInt *)&v97, (uint64_t)v17, v27, 0, 0);
  uint64_t v69 = v68;
  int v70 = sub_1CD7EBF14(v26, v93 - 1, (const llvm::APInt *)&v97, v17, v27, 0, 0);
  uint64_t v73 = *(void *)(v26 + 832);
  if (v73) {
    LOWORD(v73) = *(_WORD *)(v73 + 8);
  }
  uint64_t v75 = sub_1CCFDED5C(v26, 176, (const llvm::APInt *)&v97, v17, v27, (uint64_t)v33, 0, v72, (uint64_t)v70, v71, v73);
  __int16 v77 = 0;
  uint64_t v78 = *(void *)(v26 + 832);
  if (v78) {
    __int16 v77 = *(_WORD *)(v78 + 8);
  }
  char v79 = sub_1CCFDED5C(v26, 173, (const llvm::APInt *)&v97, v17, v27, (uint64_t)v75, v74, v76, v67, v69, v77);
  uint64_t v57 = sub_1CD3E1260((void *)v26, (const llvm::APInt *)&v97, v17, v27, (uint64_t)v33, 1, (uint64_t)v79, v92 & 0xFFFFFFFF00000000 | v80, (uint64_t)v33, 0, 0);
  if (v96 >= 0x41 && v95) {
    MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
  }
LABEL_48:
  if (v97)
  {
    int v58 = *v97;
    if ((v58 - 4) > 0x1E)
    {
      if ((v58 - 3) >= 0xFFFFFFFE) {
        uint64_t v60 = v97;
      }
      else {
        uint64_t v60 = 0;
      }
      if ((v58 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v61 = (unint64_t)(v60 + 8);
LABEL_58:
        int v95 = &v97;
        sub_1CC5FA668(v61 + 16, &v95);
        return v57;
      }
      if (v58 == 3) {
        *((void *)v97 + 1) = 0;
      }
    }
    else if ((v97[1] & 0x7F) == 2 || *((_DWORD *)v97 + 3))
    {
      uint64_t v88 = *((void *)v97 + 2);
      if ((v88 & 4) != 0)
      {
        unint64_t v61 = v88 & 0xFFFFFFFFFFFFFFF8;
        if (v61) {
          goto LABEL_58;
        }
      }
    }
  }
  return v57;
}

uint64_t *sub_1CD01CDD4(uint64_t *a1, int a2, const llvm::APInt *a3, uint64_t a4, BOOL a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v15 = (llvm **)(*(void *)(a4 + 40) + 16 * a5);
  uint64_t v16 = *v15;
  unsigned int v17 = a2 & 0xFFFFFFFD;
  uint64_t v116 = (uint64_t)v15[1];
  uint64_t v106 = (llvm *)(*(uint64_t (**)(uint64_t *, uint64_t, void, llvm *))(*a1 + 400))(a1, *(void *)(**(void **)(a9 + 40) + 40) + 272, *(void *)(a9 + 56), *v15);
  uint64_t v107 = v18;
  unsigned int v110 = v17;
  int v117 = v16;
  uint64_t v113 = (uint64_t *)a4;
  uint64_t v114 = a5;
  if (v17 == 92)
  {
    unsigned int v19 = sub_1CD7F2D8C(a9, a4, a5, 0) - 1;
    uint64_t v20 = a7;
    uint64_t v21 = a9;
  }
  else
  {
    BOOL v22 = a5;
    uint64_t v23 = a6;
    sub_1CD7F121C(a9, a4, v22, 0, (uint64_t)&v118);
    unsigned int v24 = v119;
    uint64_t v21 = a9;
    if (v119 > 0x40)
    {
      unsigned int v19 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v118);
      uint64_t v20 = a7;
    }
    else
    {
      uint64_t v20 = a7;
      if (v119) {
        unsigned int v19 = __clz(~(v118 << -(char)v119));
      }
      else {
        unsigned int v19 = 0;
      }
    }
    if (v121 >= 0x41 && v120)
    {
      MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
      unsigned int v24 = v119;
    }
    if (v24 >= 0x41 && v118) {
      MEMORY[0x1D25D9CB0](v118, 0x1000C8000313F17);
    }
    a6 = v23;
  }
  BOOL v25 = (uint64_t *)a6;
  sub_1CD7F121C(v21, a6, v20, 0, (uint64_t)&v118);
  unsigned int v26 = v119;
  if (v119 > 0x40) {
    int v27 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v118);
  }
  else {
    int v27 = __clz(__rbit64(~v118));
  }
  if (v121 >= 0x41 && v120)
  {
    MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
    unsigned int v26 = v119;
  }
  if (v26 >= 0x41 && v118) {
    MEMORY[0x1D25D9CB0](v118, 0x1000C8000313F17);
  }
  if (a2 == 94) {
    unsigned int v28 = a8 + 1;
  }
  else {
    unsigned int v28 = a8;
  }
  if (v27 + v19 < v28) {
    return 0;
  }
  if (v19 >= a8) {
    uint64_t v30 = a8;
  }
  else {
    uint64_t v30 = v19;
  }
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a1, (uint64_t)v117, v116, *(void *)(**(void **)(v21 + 40) + 40) + 272, 1);
  uint64_t v34 = v31;
  if (v30)
  {
    uint64_t v45 = v31;
    uint64_t v46 = sub_1CD7EBF14(v21, v30, a3, ShiftAmountTy, v31, 0, 0);
    uint64_t v49 = *(void *)(v21 + 832);
    uint64_t v36 = v25;
    if (v49) {
      LOWORD(v49) = *(_WORD *)(v49 + 8);
    }
    uint64_t v113 = sub_1CCFDED5C(v21, 175, a3, v117, v116, (uint64_t)v113, v114, v48, (uint64_t)v46, v47, v49);
    unsigned int v35 = v50;
    uint64_t v34 = v45;
  }
  else
  {
    unsigned int v35 = v114;
    uint64_t v36 = v25;
  }
  uint64_t v37 = (void *)v21;
  if (v19 < a8)
  {
    uint64_t v51 = a8 - v30;
    if (v110 == 92) {
      uint64_t v52 = 176;
    }
    else {
      uint64_t v52 = 177;
    }
    uint64_t v53 = v21;
    uint64_t v54 = v21;
    uint64_t v39 = a3;
    uint64_t v55 = sub_1CD7EBF14(v53, v51, a3, ShiftAmountTy, v34, 0, 0);
    uint64_t v58 = *(void *)(v54 + 832);
    uint64_t v40 = v117;
    uint64_t v41 = v114;
    if (v58) {
      LOWORD(v58) = *(_WORD *)(v58 + 8);
    }
    uint64_t v36 = sub_1CCFDED5C((uint64_t)v37, v52, a3, v117, v116, (uint64_t)v36, v20, v57, (uint64_t)v55, v56, v58);
    unsigned int v38 = v59;
  }
  else
  {
    unsigned int v38 = v20;
    uint64_t v39 = a3;
    uint64_t v40 = v117;
    uint64_t v41 = v114;
  }
  unint64_t v42 = v20 & 0xFFFFFFFF00000000;
  if (v110 == 92)
  {
    uint64_t v105 = (uint64_t)v36;
    if ((_BYTE)v40
      && a1[v40 + 12]
      && (*((unsigned __int8 *)a1 + 390 * v40 + 3927) | 4) == 4)
    {
      uint64_t v60 = v37;
      uint64_t v61 = v116;
      uint64_t v62 = sub_1CD7F95FC((uint64_t)v37, (uint64_t)v40, v116, (uint64_t)v40, v116);
      unint64_t v63 = v41 & 0xFFFFFFFF00000000 | v35;
      uint64_t v103 = v38 | v42;
      uint64_t v66 = sub_1CD7FFB18(v37, (const char *)0x41, v39, v62, v64, (uint64_t)v113, v63, v65, (uint64_t)v36, v38 | v42);
      uint64_t v115 = 0;
      uint64_t v67 = v40;
      uint64_t v68 = 1;
      uint64_t v104 = v66;
      uint64_t v69 = v66;
    }
    else
    {
      unint64_t v63 = v41 & 0xFFFFFFFF00000000 | v35;
      uint64_t v70 = v37[104];
      if (v70) {
        LOWORD(v70) = *(_WORD *)(v70 + 8);
      }
      uint64_t v104 = sub_1CCFDED5C((uint64_t)v37, 59, v39, v40, v116, (uint64_t)v113, v63, v32, (uint64_t)v36, v38 | v42, v70);
      uint64_t v115 = v72;
      uint64_t v73 = v37[104];
      if (v73) {
        LOWORD(v73) = *(_WORD *)(v73 + 8);
      }
      uint64_t v103 = v38 | v42;
      uint64_t v60 = v37;
      uint64_t v61 = v116;
      uint64_t v69 = sub_1CCFDED5C((uint64_t)v37, 61, v39, v40, v116, (uint64_t)v113, v63, v71, (uint64_t)v36, v103, v73);
      uint64_t v67 = v40;
      uint64_t v68 = v74;
    }
    uint64_t v75 = sub_1CD7EBF14((uint64_t)v60, 0, v39, v67, v61, 0, 0);
    uint64_t v77 = v76;
    uint64_t v78 = sub_1CD3DC614(v60, v39, v106, v107, (uint64_t)v69, v68, (uint64_t)v75, v76, 0x16u, 0, 0, 0, 0);
    uint64_t v109 = v79;
    uint64_t v111 = (uint64_t)v78;
    unsigned int v80 = sub_1CD3DC614(v60, v39, v106, v107, (uint64_t)v113, v63, (uint64_t)v75, v77, 0x14u, 0, 0, 0, 0);
    uint64_t v82 = v81;
    uint64_t v83 = sub_1CD3DC614(v60, v39, v106, v107, v105, v103, (uint64_t)v75, v77, 0x14u, 0, 0, 0, 0);
    __int16 v86 = 0;
    uint64_t v87 = v60[104];
    uint64_t v88 = (uint64_t)v60;
    if (v87) {
      __int16 v86 = *(_WORD *)(v87 + 8);
    }
    uint64_t v89 = sub_1CCFDED5C((uint64_t)v60, 173, a3, v106, v107, (uint64_t)v80, v82, v85, (uint64_t)v83, v84, v86);
    uint64_t v91 = v90;
    uint64_t v92 = sub_1CD7EBF14(v88, 1, a3, v117, v116, 0, 0);
    uint64_t v95 = *(void *)(v88 + 832);
    if (v95) {
      LOWORD(v95) = *(_WORD *)(v95 + 8);
    }
    uint64_t v97 = sub_1CCFDED5C((uint64_t)v37, 57, a3, v117, v116, (uint64_t)v104, v115, v94, (uint64_t)v92, v93, v95);
    uint64_t v99 = v98;
    uint64_t v100 = v37[104];
    if (v100) {
      LOWORD(v100) = *(_WORD *)(v100 + 8);
    }
    uint64_t v101 = sub_1CCFDED5C((uint64_t)v37, 171, a3, v106, v107, v111, v109, v96, (uint64_t)v89, v91, v100);
    return sub_1CD3E1260(v37, a3, v117, v116, (uint64_t)v101, v102, (uint64_t)v97, v99, (uint64_t)v104, v115, SHIDWORD(v115));
  }
  else
  {
    unint64_t v43 = v41 & 0xFFFFFFFF00000000 | v35;
    uint64_t v44 = v37[104];
    if (v44) {
      LOWORD(v44) = *(_WORD *)(v44 + 8);
    }
    return sub_1CCFDED5C((uint64_t)v37, 60, v39, v40, v116, (uint64_t)v113, v43, v32, (uint64_t)v36, v38 | v42, v44);
  }
}

uint64_t *sub_1CD01D500(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v67 = v13;
  if (v13) {
    llvm::MetadataTracking::track((uint64_t)&v67, v13, 2);
  }
  int v68 = *(_DWORD *)(a2 + 60);
  uint64_t v14 = *(uint64_t **)(a2 + 32);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = v14[5];
  uint64_t v18 = v14[6];
  int v19 = *(unsigned __int16 *)(a2 + 24);
  if (v19 == 76) {
    uint64_t v20 = 56;
  }
  else {
    uint64_t v20 = 57;
  }
  uint64_t v21 = *(void *)(v15 + 40) + 16 * v16;
  BOOL v22 = *(llvm **)v21;
  uint64_t v23 = *(void *)(v21 + 8);
  uint64_t v24 = *(void *)(a5 + 832);
  if (v24) {
    LOWORD(v24) = *(_WORD *)(v24 + 8);
  }
  uint64_t v64 = v18;
  uint64_t v65 = v17;
  *a3 = (uint64_t)sub_1CCFDED5C(a5, v20, (const llvm::APInt *)&v67, v22, v23, v15, v16, a8, v17, v18, v24);
  *((_DWORD *)a3 + 2) = v25;
  unsigned int v26 = *(void **)(a2 + 40);
  int v27 = (llvm *)v26[2];
  uint64_t v66 = v26[3];
  unint64_t v63 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(a5 + 40) + 40) + 272, *(void *)(a5 + 56), *v26, v26[1]);
  uint64_t v30 = v29;
  if (v19 == 76) {
    uint64_t v31 = 82;
  }
  else {
    uint64_t v31 = 84;
  }
  uint64_t v32 = *(void *)(v15 + 40) + 16 * v16;
  BOOL v33 = *(llvm **)v32;
  if (!*(void *)v32
    || *(void *)v32 != 1
    && (*(void *)v32
      ? (BOOL v34 = *(void *)(a1 + 8 * *(void *)v32 + 96) == 0)
      : (BOOL v34 = 1),
        v34)
    || *(unsigned char *)(a1 + 390 * *(void *)v32 + v31 + 3862))
  {
    uint64_t v62 = a4;
    unint64_t v43 = sub_1CD7EBF14(a5, 0, (const llvm::APInt *)&v67, v33, *(void *)(v32 + 8), 0, 0);
    uint64_t v45 = v44;
    uint64_t v46 = sub_1CD3DC614((void *)a5, (const llvm::APInt *)&v67, v63, v30, *a3, a3[1], v15, v16, 0x14u, 0, 0, 0, 0);
    uint64_t v48 = v47;
    if (v19 == 76) {
      unsigned int v49 = 20;
    }
    else {
      unsigned int v49 = 18;
    }
    uint64_t v51 = sub_1CD3DC614((void *)a5, (const llvm::APInt *)&v67, v63, v30, v65, v64, (uint64_t)v43, v45, v49, 0, 0, 0, 0);
    __int16 v53 = 0;
    uint64_t v54 = *(void *)(a5 + 832);
    if (v54) {
      __int16 v53 = *(_WORD *)(v54 + 8);
    }
    uint64_t v40 = sub_1CCFDED5C(a5, 173, (const llvm::APInt *)&v67, v63, v30, (uint64_t)v51, v50, v52, (uint64_t)v46, v48, v53);
    unint64_t v42 = v55;
    a4 = v62;
    uint64_t v37 = v66;
  }
  else
  {
    uint64_t v35 = *(void *)(v32 + 8);
    uint64_t v36 = *(void *)(a5 + 832);
    if (v36) {
      LOWORD(v36) = *(_WORD *)(v36 + 8);
    }
    uint64_t v37 = v66;
    unsigned int v38 = sub_1CCFDED5C(a5, v31, (const llvm::APInt *)&v67, v33, v35, v15, v16, v28, v65, v64, v36);
    uint64_t v40 = sub_1CD3DC614((void *)a5, (const llvm::APInt *)&v67, v63, v30, *a3, a3[1], (uint64_t)v38, v39, 0x16u, 0, 0, 0, 0);
    unint64_t v42 = v41;
  }
  uint64_t result = sub_1CD7EB8D4(a5, (uint64_t)v40, v42, (uint64_t)&v67, v27, v37, (char)v27, v37);
  *(void *)a4 = result;
  *(_DWORD *)(a4 + 8) = v57;
  if (v67)
  {
    int v58 = *v67;
    if ((v58 - 4) > 0x1E)
    {
      if ((v58 - 3) >= 0xFFFFFFFE) {
        unsigned int v59 = v67;
      }
      else {
        unsigned int v59 = 0;
      }
      if ((v58 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v60 = (unint64_t)(v59 + 8);
LABEL_37:
        uint64_t v69 = &v67;
        return (uint64_t *)sub_1CC5FA668(v60 + 16, &v69);
      }
      if (v58 == 3) {
        *((void *)v67 + 1) = 0;
      }
    }
    else if ((v67[1] & 0x7F) == 2 || *((_DWORD *)v67 + 3))
    {
      uint64_t v61 = *((void *)v67 + 2);
      if ((v61 & 4) != 0)
      {
        unint64_t v60 = v61 & 0xFFFFFFFFFFFFFFF8;
        if (v60) {
          goto LABEL_37;
        }
      }
    }
  }
  return result;
}

BOOL sub_1CD01D89C(uint64_t a1, void *a2, llvm *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _DWORD *a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, int a12, unsigned char *a13, const llvm::APInt *a14, uint64_t *a15, char a16)
{
  uint64_t v16 = a2[3];
  uint64_t v17 = *a5;
  uint64_t v18 = *(void *)(*(void *)(*a5 + 40) + 16 * *((unsigned int *)a5 + 2));
  unsigned int v19 = *(_DWORD *)(*(void *)a7 + 76);
  *a13 = 0;
  uint64_t v20 = v18 >> 3;
  int v21 = 15 << (4 * (v18 & 7));
  int v22 = v21 & *(_DWORD *)(v16 + 92 * v19 + 4 * v20 + 171588);
  if (!v22) {
    return v22 != 0;
  }
  unsigned int v27 = (v19 >> 1) & 2 | v19 & 0xFFFFFFF9 | (4 * ((v19 >> 1) & 1));
  if ((*(_DWORD *)(v16 + 92 * v27 + 4 * v20 + 171588) & (11 << (4 * (v18 & 7)))) == 0)
  {
    long long v94 = *(_OWORD *)a5;
    int v28 = *((_DWORD *)a6 + 2);
    *a5 = *a6;
    *((_DWORD *)a5 + 2) = v28;
    *a6 = v94;
    *((_DWORD *)a6 + 2) = DWORD2(v94);
    *(void *)a7 = sub_1CD7EE368(a2, v27);
    a7[2] = v29;
    return v22 != 0;
  }
  int v91 = 11 << (4 * (v18 & 7));
  unsigned int v30 = sub_1CD7E9F74(v19, v18, 0);
  unsigned int v31 = v30;
  int v32 = *(_DWORD *)(v16 + 92 * v30 + 4 * v20 + 171588);
  int v33 = v32 & v91;
  if ((v32 & v91) != 0)
  {
    unsigned int v31 = (v30 >> 1) & 2 | v30 & 0xFFFFFFF9 | (4 * ((v30 >> 1) & 1));
    int v32 = *(_DWORD *)(v16 + 92 * v31 + 4 * v20 + 171588);
  }
  if ((v32 & v91) == 0)
  {
    int v34 = v33;
    *(void *)a7 = sub_1CD7EE368(a2, v31);
    a7[2] = v35;
    *a13 = 1;
    if (v34)
    {
      long long v95 = *(_OWORD *)a5;
      int v36 = *((_DWORD *)a6 + 2);
      *a5 = *a6;
      *((_DWORD *)a5 + 2) = v36;
      *a6 = v95;
      *((_DWORD *)a6 + 2) = DWORD2(v95);
    }
    return v22 != 0;
  }
  int v37 = 171;
  unsigned int v38 = 1;
  int v39 = 1;
  switch(v19)
  {
    case 6u:
    case 9u:
      uint64_t v59 = 736;
      if ((v19 & 8) == 0) {
        uint64_t v59 = 644;
      }
      if ((*(_DWORD *)(v16 + v59 + 4 * v20 + 171588) & v21) == 0) {
        goto LABEL_11;
      }
      uint64_t v60 = v16 + 4 * v20;
      if ((*(_DWORD *)(v60 + 171772) & v21) != 0 && (*(_DWORD *)(v60 + 171956) & v21) != 0) {
        goto LABEL_11;
      }
      *a13 = (v19 & 8) >> 3;
      unsigned int v38 = 2;
      int v39 = 4;
      int v37 = 172;
      goto LABEL_18;
    case 7u:
      goto LABEL_31;
    case 8u:
      if ((*(_DWORD *)(v16 + 4 * v20 + 172876) & v21) != 0)
      {
        *a13 = 1;
        int v37 = 171;
      }
      else
      {
        int v37 = 172;
        unsigned int v38 = 14;
        int v39 = 14;
      }
      goto LABEL_31;
    default:
LABEL_11:
      if ((v19 & 8) != 0) {
        int v39 = 8;
      }
      else {
        int v39 = 7;
      }
      if ((v19 & 8) != 0) {
        int v37 = 172;
      }
      else {
        int v37 = 171;
      }
      unsigned int v38 = v19 & 7 | 0x10;
LABEL_18:
      if (v19 - 9 > 0xFFFFFFFD)
      {
LABEL_31:
        unsigned int v87 = v39;
        unsigned int v85 = v37;
        uint64_t v61 = a5[1];
        if (!a11)
        {
          uint64_t v46 = a14;
          uint64_t v62 = v17;
          uint64_t v63 = v17;
          unint64_t v43 = a15;
          uint64_t v88 = sub_1CD3DC614(a2, a14, a3, a4, v62, v61, v63, v61, v38, *a15, a15[1], HIDWORD(a15[1]), a16);
          unsigned int v45 = v64;
          uint64_t v47 = sub_1CD3DC614(a2, a14, a3, a4, *a6, a6[1], *a6, a6[1], v87, *a15, a15[1], HIDWORD(a15[1]), a16);
          goto LABEL_33;
        }
        uint64_t v66 = sub_1CD7EE368(a2, v38);
        uint64_t v46 = a14;
        uint64_t v88 = sub_1CD7F6564(a2, (const char *)0x16D, a14, a3, a4, v17, v61, v68, v17, v61, v66, v67, a9, a10, a11, a12);
        unsigned int v45 = v69;
        uint64_t v70 = *a6;
        uint64_t v71 = a6[1];
        uint64_t v82 = sub_1CD7EE368(a2, v87);
        int v58 = sub_1CD7F6564(a2, (const char *)0x16D, a14, a3, a4, v70, v71, v73, v70, v71, v82, v72, a9, a10, a11, a12);
      }
      else
      {
        unsigned int v86 = v39;
        unsigned int v85 = v37;
        uint64_t v40 = *a6;
        uint64_t v41 = a6[1];
        if (!a11)
        {
          uint64_t v42 = v17;
          unint64_t v43 = a15;
          uint64_t v88 = sub_1CD3DC614(a2, a14, a3, a4, v42, a5[1], *a6, v41, v38, *a15, a15[1], HIDWORD(a15[1]), a16);
          unsigned int v45 = v44;
          uint64_t v46 = a14;
          uint64_t v47 = sub_1CD3DC614(a2, a14, a3, a4, *a5, a5[1], *a6, a6[1], v86, *a15, a15[1], HIDWORD(a15[1]), a16);
LABEL_33:
          uint64_t v65 = (uint64_t)v47;
          goto LABEL_36;
        }
        uint64_t v89 = a5[1];
        uint64_t v50 = sub_1CD7EE368(a2, v38);
        uint64_t v88 = sub_1CD7F6564(a2, (const char *)0x16D, a14, a3, a4, v17, v89, v52, v40, v41, v50, v51, a9, a10, a11, a12);
        unsigned int v45 = v53;
        uint64_t v83 = a5[1];
        uint64_t v84 = *a5;
        uint64_t v55 = *a6;
        uint64_t v54 = a6[1];
        uint64_t v81 = sub_1CD7EE368(a2, v86);
        uint64_t v46 = a14;
        int v58 = sub_1CD7F6564(a2, (const char *)0x16D, a14, a3, a4, v84, v83, v57, v55, v54, v81, v56, a9, a10, a11, a12);
      }
      uint64_t v65 = (uint64_t)v58;
      unint64_t v43 = a15;
LABEL_36:
      uint64_t v74 = v48;
      if (*v43)
      {
        uint64_t v75 = a2[104];
        if (v75) {
          LOWORD(v75) = *(_WORD *)(v75 + 8);
        }
        *unint64_t v43 = (uint64_t)sub_1CCFDED5C((uint64_t)a2, 2, v46, (llvm *)1, 0, (uint64_t)v88, 1, v49, v65, 1, v75);
        *((_DWORD *)v43 + 2) = v76;
      }
      if (a11)
      {
        if (v85 == 172) {
          uint64_t v80 = 339;
        }
        else {
          uint64_t v80 = 335;
        }
        uint64_t v78 = sub_1CD7EBE80(a2, (const char *)v80, v46, a3, a4, (uint64_t)v88, v45, v49, v65, v74, a9, a10, a11, a12);
      }
      else
      {
        uint64_t v77 = a2[104];
        if (v77) {
          LOWORD(v77) = *(_WORD *)(v77 + 8);
        }
        uint64_t v78 = sub_1CCFDED5C((uint64_t)a2, v85, v46, a3, a4, (uint64_t)v88, v45, v49, v65, v74, v77);
      }
      *a5 = (uint64_t)v78;
      *((_DWORD *)a5 + 2) = v79;
      *a6 = 0;
      *((_DWORD *)a6 + 2) = 0;
      *(void *)a7 = 0;
      a7[2] = 0;
      return v22 != 0;
  }
}

uint64_t sub_1CD01DF5C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  uint64_t v14 = sub_1CCFD8140(a2, a3, *(llvm::APInt **)a1, 0, 0);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 80);
    uint64_t v16 = *(unsigned int *)(v15 + 32);
    if (v16 <= 0x40)
    {
      if (*(void *)(v15 + 24) != 1) {
        goto LABEL_4;
      }
LABEL_17:
      uint64_t v28 = *(void *)(a1 + 8);
      *(void *)uint64_t v28 = a4;
      *(_DWORD *)(v28 + 8) = a5;
LABEL_25:
      uint64_t v34 = *(void *)(a1 + 16);
      *(void *)uint64_t v34 = a6;
LABEL_33:
      *(_DWORD *)(v34 + 8) = a7;
      return 1;
    }
    int v23 = 0;
    int64_t v24 = (unint64_t)(v16 + 63) >> 6;
    do
    {
      BOOL v25 = v24-- < 1;
      if (v25) {
        break;
      }
      unint64_t v26 = *(void *)(*(void *)(v15 + 24) + 8 * v24);
      v23 += __clz(v26);
    }
    while (!v26);
    int v27 = v16 | 0xFFFFFFC0;
    if ((v16 & 0x3F) == 0) {
      int v27 = 0;
    }
    if (v23 + v27 == v16 - 1) {
      goto LABEL_17;
    }
  }
LABEL_4:
  uint64_t v17 = sub_1CCFD8140(a4, a5, *(llvm::APInt **)a1, 0, 0);
  if (!v17) {
    goto LABEL_7;
  }
  uint64_t v18 = *(void *)(v17 + 80);
  uint64_t v19 = *(unsigned int *)(v18 + 32);
  if (v19 <= 0x40)
  {
    if (*(void *)(v18 + 24) != 1) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
  int v29 = 0;
  int64_t v30 = (unint64_t)(v19 + 63) >> 6;
  do
  {
    BOOL v25 = v30-- < 1;
    if (v25) {
      break;
    }
    unint64_t v31 = *(void *)(*(void *)(v18 + 24) + 8 * v30);
    v29 += __clz(v31);
  }
  while (!v31);
  int v32 = v19 | 0xFFFFFFC0;
  if ((v19 & 0x3F) == 0) {
    int v32 = 0;
  }
  if (v29 + v32 == v19 - 1)
  {
LABEL_24:
    uint64_t v33 = *(void *)(a1 + 8);
    *(void *)uint64_t v33 = a2;
    *(_DWORD *)(v33 + 8) = a3;
    goto LABEL_25;
  }
LABEL_7:
  uint64_t result = sub_1CCFD8140(a6, a7, *(llvm::APInt **)a1, 0, 0);
  if (!result) {
    return result;
  }
  uint64_t v21 = *(void *)(result + 80);
  uint64_t v22 = *(unsigned int *)(v21 + 32);
  if (v22 <= 0x40)
  {
    if (*(void *)(v21 + 24) != 1) {
      return 0;
    }
    goto LABEL_32;
  }
  int v35 = 0;
  int64_t v36 = (unint64_t)(v22 + 63) >> 6;
  do
  {
    BOOL v25 = v36-- < 1;
    if (v25) {
      break;
    }
    unint64_t v37 = *(void *)(*(void *)(v21 + 24) + 8 * v36);
    v35 += __clz(v37);
  }
  while (!v37);
  uint64_t result = 0;
  int v38 = v22 | 0xFFFFFFC0;
  if ((v22 & 0x3F) == 0) {
    int v38 = 0;
  }
  if (v35 + v38 == v22 - 1)
  {
LABEL_32:
    uint64_t v39 = *(void *)(a1 + 8);
    *(void *)uint64_t v39 = a2;
    *(_DWORD *)(v39 + 8) = a3;
    uint64_t v34 = *(void *)(a1 + 16);
    *(void *)uint64_t v34 = a4;
    a7 = a5;
    goto LABEL_33;
  }
  return result;
}

void sub_1CD01E178()
{
}

__n128 sub_1CD01E18C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1F2642FB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_1CD01E1F0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2642FB0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CD01E238(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 80);
  uint64_t v4 = *(unsigned int *)(v3 + 32);
  if (v4 <= 0x40)
  {
    unint64_t v5 = *(void *)(v3 + 24);
    if (!v5) {
      return 0;
    }
    unsigned int v44 = *(_DWORD *)(v3 + 32);
    unint64_t __src = (void *)v5;
    unsigned int v12 = __clz(__rbit64(v5));
    if (v4 >= v12) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v4;
    }
    if (v13)
    {
      uint64_t v14 = (uint64_t)(v5 << -(char)v4) >> -(char)v4;
      if (v4 <= v12) {
        char v15 = 63;
      }
      else {
        char v15 = v13;
      }
      unint64_t __src = (void *)((v14 >> v15) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v4));
      **(unsigned char **)(a1 + 8) = 1;
      unsigned int v42 = v4;
    }
    else
    {
      unsigned int v42 = v4;
    }
    uint64_t v16 = __src;
    uint64_t v41 = __src;
    uint64_t v17 = 0;
    unsigned int v18 = 1;
    while (1)
    {
      llvm::APInt::operator*((uint64_t)&__src, &v41, (uint64_t)&v45);
      if (v18 >= 0x41 && v17) {
        MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
      }
      uint64_t v17 = v45;
      unsigned int v18 = v46;
      uint64_t v19 = v45;
      if (v46 >= 0x41)
      {
        int v20 = 0;
        int64_t v21 = ((unint64_t)v46 + 63) >> 6;
        do
        {
          BOOL v9 = v21-- < 1;
          if (v9) {
            break;
          }
          unint64_t v22 = v45[v21];
          v20 += __clz(v22);
        }
        while (!v22);
        unsigned int v23 = v46 | 0xFFFFFFC0;
        if ((v46 & 0x3F) == 0) {
          unsigned int v23 = 0;
        }
        if (v46 - (v23 + v20) >= 0x41) {
          goto LABEL_34;
        }
        uint64_t v19 = (void *)*v45;
      }
      if (v19 == (void *)1)
      {
        uint64_t v27 = *(void *)(a1 + 16);
        int v29 = sub_1CD7EBF14(*(void *)(a1 + 24), v13, *(const llvm::APInt **)(a1 + 32), **(llvm ***)(a1 + 40), *(void *)(*(void *)(a1 + 40) + 8), 0, 0);
        unsigned int v30 = *(_DWORD *)(v27 + 8);
        if (v30 >= *(_DWORD *)(v27 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v31 = (uint64_t **)(*(void *)v27 + 16 * v30);
        long long *v31 = v29;
        v31[1] = v28;
        ++*(_DWORD *)(v27 + 8);
        uint64_t v32 = *(void *)(a1 + 48);
        uint64_t v34 = sub_1CD7EBB14(*(void *)(a1 + 24), (llvm::LLVMContext *)&v41, *(const llvm::APInt **)(a1 + 32), **(void **)(a1 + 56), *(void *)(*(void *)(a1 + 56) + 8), 0, 0);
        unsigned int v35 = *(_DWORD *)(v32 + 8);
        if (v35 >= *(_DWORD *)(v32 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int64_t v36 = (uint64_t *)(*(void *)v32 + 16 * v35);
        *int64_t v36 = v34;
        v36[1] = v33;
        ++*(_DWORD *)(v32 + 8);
        if (v42 >= 0x41 && v41) {
          MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
        }
        if (v18 >= 0x41 && v17) {
          MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
        }
        if (v44 >= 0x41 && __src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        return 1;
      }
LABEL_34:
      unsigned int v24 = v44;
      unsigned int v38 = v44;
      if (v44 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v37);
      }
      unint64_t v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
      if (!v44) {
        LOBYTE(v25) = 0;
      }
      unint64_t v37 = v25 & 2;
      unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
      if (!v44) {
        unint64_t v26 = 0;
      }
      unint64_t v37 = v26 & (v37 - (void)v45);
      unsigned int v40 = v44;
      unint64_t v39 = v37;
      unsigned int v38 = 0;
      llvm::APInt::operator*((uint64_t)&v41, &v39, (uint64_t)&v45);
      if (v4 >= 0x41 && v16) {
        MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
      }
      uint64_t v16 = v45;
      uint64_t v41 = v45;
      LODWORD(v4) = v46;
      unsigned int v42 = v46;
      if (v24 >= 0x41)
      {
        if (v39) {
          MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
        }
      }
    }
  }
  int v7 = 0;
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  do
  {
    BOOL v9 = v8-- < 1;
    if (v9) {
      break;
    }
    unint64_t v10 = *(void *)(*(void *)(v3 + 24) + 8 * v8);
    v7 += __clz(v10);
  }
  while (!v10);
  uint64_t result = 0;
  int v11 = v4 | 0xFFFFFFC0;
  if ((v4 & 0x3F) == 0) {
    int v11 = 0;
  }
  if (v7 + v11 != v4)
  {
    unsigned int v44 = *(_DWORD *)(v3 + 32);
    operator new[]();
  }
  return result;
}

uint64_t sub_1CD01E724(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1CD01E7C0()
{
}

_DWORD *sub_1CD01E7D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F2642FF8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CD01E820(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F2642FF8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1CD01E850(uint64_t a1, uint64_t a2)
{
  return !*(void *)a2
      || llvm::APInt::urem((uint64_t **)(*(void *)(*(void *)a2 + 80) + 24), *(unsigned int *)(a1 + 8)) != 0;
}

uint64_t sub_1CD01E890(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = ((char *)a1[1] - (char *)*a1) >> 7;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 57) {
    abort();
  }
  uint64_t v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 6 > v3) {
    unint64_t v3 = v6 >> 6;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 57) {
      sub_1CB833614();
    }
    int64_t v8 = (char *)operator new(v7 << 7);
  }
  else
  {
    int64_t v8 = 0;
  }
  uint64_t v9 = (uint64_t)&v8[128 * v2];
  unint64_t v10 = (uint64_t *)&v8[128 * v7];
  sub_1CD01E99C(v9, a2);
  uint64_t v11 = v9 + 128;
  unsigned int v13 = *a1;
  unsigned int v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = (uint64_t *)v9;
    a1[1] = (uint64_t *)v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v9 -= 128;
      v12 -= 16;
      sub_1CD616DE4(v9, v12);
    }
    while (v12 != v13);
    unsigned int v12 = *a1;
    uint64_t v14 = (uint64_t)a1[1];
    *a1 = (uint64_t *)v9;
    a1[1] = (uint64_t *)v11;
    a1[2] = v10;
    while ((uint64_t *)v14 != v12)
      uint64_t v14 = sub_1CD50E94C(v14 - 128);
  }
  if (v12) {
    operator delete(v12);
  }
  return v11;
}

void sub_1CD01E99C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[4];
  long long v3 = *((_OWORD *)a2 + 1);
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  char v11 = *((unsigned char *)a2 + 40);
  char v4 = v11;
  uint64_t v5 = a2[8];
  long long v6 = *((_OWORD *)a2 + 3);
  a2[7] = 0;
  a2[8] = 0;
  a2[6] = 0;
  int v13 = *((_DWORD *)a2 + 18);
  int v7 = v13;
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
  *(_DWORD *)(a1 + 8) = v9;
  *(void *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v2;
  memset(v10, 0, sizeof(v10));
  *(unsigned char *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = v5;
  memset(v12, 0, sizeof(v12));
  *(_DWORD *)(a1 + 72) = v7;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 6;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 1;
  uint64_t v14 = (void **)v12;
  sub_1CC1E4230(&v14);
  uint64_t v14 = (void **)v10;
  sub_1CB8338B8(&v14);
}

void sub_1CD01EA84()
{
}

__n128 sub_1CD01EA98(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_1F2643040;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1CD01EAFC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2643040;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CD01EB44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 80);
  long long v4 = (llvm::APInt *)(v3 + 24);
  uint64_t v5 = *(unsigned int *)(v3 + 32);
  if (v5 <= 0x40)
  {
    if (!*(void *)v4) {
      return 0;
    }
LABEL_10:
    llvm::SignedDivisionByConstantInfo::get((llvm::SignedDivisionByConstantInfo *)(v3 + 24), (uint64_t)&v56);
    uint64_t v12 = *(unsigned int *)(v3 + 32);
    if (v12 > 0x40)
    {
      int v15 = 0;
      int64_t v16 = (unint64_t)(v12 + 63) >> 6;
      uint64_t v17 = v16;
      do
      {
        BOOL v9 = v17-- < 1;
        if (v9) {
          break;
        }
        unint64_t v18 = *(void *)(*(void *)v4 + 8 * v17);
        v15 += __clz(v18);
      }
      while (!v18);
      if ((v12 & 0x3F) != 0) {
        int v19 = v12 | 0xFFFFFFC0;
      }
      else {
        int v19 = 0;
      }
      unsigned int v14 = v12 - 1;
      if (v15 + v19 == v12 - 1)
      {
        int v13 = *(uint64_t **)v4;
      }
      else
      {
        int v21 = llvm::APInt::countTrailingOnesSlowCase(v4);
        int v13 = *(uint64_t **)v4;
        if (v21 != v12)
        {
          uint64_t v24 = v14 >> 6;
          if (((unint64_t)v13[v24] >> v14)) {
            goto LABEL_42;
          }
          int v25 = 0;
          do
          {
            BOOL v9 = v16-- < 1;
            if (v9) {
              break;
            }
            unint64_t v26 = v13[v16];
            v25 += __clz(v26);
          }
          while (!v26);
          if (v25 + v19 == v12) {
            goto LABEL_42;
          }
          goto LABEL_37;
        }
      }
      uint64_t v20 = *v13;
    }
    else
    {
      int v13 = *(uint64_t **)v4;
      if (v12 && v13 != (uint64_t *)1 && v13 != (uint64_t *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v12))
      {
        unsigned int v14 = v12 - 1;
        if ((((unint64_t)v13 >> (v12 - 1)) & 1) != 0 || !v13) {
          goto LABEL_43;
        }
LABEL_37:
        unsigned int v27 = v57 - 1;
        uint64_t v28 = &v56;
        if (v57 >= 0x41) {
          uint64_t v28 = (unint64_t *)(v56 + 8 * (v27 >> 6));
        }
        if ((*v28 >> v27))
        {
          uint64_t v23 = -1;
          uint64_t v20 = 1;
          goto LABEL_54;
        }
        if (v12 < 0x41)
        {
LABEL_43:
          if ((((unint64_t)v13 >> v14) & 1) == 0)
          {
LABEL_44:
            uint64_t v20 = 0;
LABEL_52:
            uint64_t v23 = -1;
LABEL_54:
            uint64_t v32 = *(void *)(a1 + 8);
            uint64_t v33 = sub_1CD7EBB14(*(void *)(a1 + 16), (llvm::LLVMContext *)&v56, *(const llvm::APInt **)(a1 + 24), **(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), 0, 0);
            unsigned int v35 = *(_DWORD *)(v32 + 8);
            if (v35 >= *(_DWORD *)(v32 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int64_t v36 = (uint64_t *)(*(void *)v32 + 16 * v35);
            *int64_t v36 = v33;
            v36[1] = v34;
            ++*(_DWORD *)(v32 + 8);
            uint64_t v37 = *(void *)(a1 + 40);
            unint64_t v39 = sub_1CD7EBF14(*(void *)(a1 + 16), v20, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), 0, 0);
            unsigned int v40 = *(_DWORD *)(v37 + 8);
            if (v40 >= *(_DWORD *)(v37 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v41 = (uint64_t **)(*(void *)v37 + 16 * v40);
            *uint64_t v41 = v39;
            v41[1] = v38;
            ++*(_DWORD *)(v37 + 8);
            uint64_t v42 = *(void *)(a1 + 48);
            unsigned int v44 = sub_1CD7EBF14(*(void *)(a1 + 16), v58, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 56), *(void *)(*(void *)(a1 + 56) + 8), 0, 0);
            unsigned int v45 = *(_DWORD *)(v42 + 8);
            if (v45 >= *(_DWORD *)(v42 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v46 = (uint64_t **)(*(void *)v42 + 16 * v45);
            *unsigned int v46 = v44;
            v46[1] = v43;
            ++*(_DWORD *)(v42 + 8);
            uint64_t v47 = *(void *)(a1 + 64);
            uint64_t v49 = sub_1CD7EBF14(*(void *)(a1 + 16), v23, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), 0, 0);
            unsigned int v50 = *(_DWORD *)(v47 + 8);
            if (v50 >= *(_DWORD *)(v47 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v51 = (uint64_t **)(*(void *)v47 + 16 * v50);
            uint64_t *v51 = v49;
            v51[1] = v48;
            ++*(_DWORD *)(v47 + 8);
            if (v57 >= 0x41)
            {
              if (v56) {
                MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
              }
            }
            return 1;
          }
          unsigned int v29 = v57 - 1;
          if (v57 > 0x40)
          {
            if ((*(void *)(v56 + 8 * (v29 >> 6)) >> v29)) {
              goto LABEL_44;
            }
            int v52 = 0;
            int64_t v53 = ((unint64_t)v57 + 63) >> 6;
            do
            {
              BOOL v9 = v53-- < 1;
              if (v9) {
                break;
              }
              unint64_t v54 = *(void *)(v56 + 8 * v53);
              v52 += __clz(v54);
            }
            while (!v54);
            unsigned int v55 = v57 | 0xFFFFFFC0;
            if ((v57 & 0x3F) == 0) {
              unsigned int v55 = 0;
            }
            BOOL v30 = v52 + v55 == v57;
          }
          else
          {
            if ((v56 >> v29)) {
              goto LABEL_44;
            }
            BOOL v30 = v56 == 0;
          }
          unsigned int v31 = v30;
          uint64_t v20 = v31 - 1;
          goto LABEL_52;
        }
        uint64_t v24 = v14 >> 6;
LABEL_42:
        int v13 = (uint64_t *)v13[v24];
        goto LABEL_43;
      }
      uint64_t v20 = (uint64_t)((void)v13 << (64 - v12)) >> (64 - v12);
    }
    uint64_t v22 = v57;
    if (v57 > 0x40)
    {
      *(void *)unint64_t v56 = 0;
      bzero((void *)(v56 + 8), (((unint64_t)(v22 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      unint64_t v56 = 0;
    }
    uint64_t v23 = 0;
    unsigned int v58 = 0;
    uint64_t v20 = (int)v20;
    goto LABEL_54;
  }
  int v7 = 0;
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  do
  {
    BOOL v9 = v8-- < 1;
    if (v9) {
      break;
    }
    unint64_t v10 = *(void *)(*(void *)v4 + 8 * v8);
    v7 += __clz(v10);
  }
  while (!v10);
  uint64_t result = 0;
  int v11 = v5 | 0xFFFFFFC0;
  if ((v5 & 0x3F) == 0) {
    int v11 = 0;
  }
  if (v7 + v11 != v5) {
    goto LABEL_10;
  }
  return result;
}

void sub_1CD01EFF0()
{
}

__n128 sub_1CD01F004(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_1F2643088;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CD01F070(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2643088;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_1CD01F0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 80);
  long long v4 = (unint64_t *)(v3 + 24);
  uint64_t v5 = *(unsigned int *)(v3 + 32);
  if (v5 <= 0x40)
  {
    if (!*v4) {
      return 0;
    }
LABEL_10:
    llvm::UnsignedDivisonByConstantInfo::get((llvm::UnsignedDivisonByConstantInfo *)(v3 + 24), 0, (uint64_t)&__src);
    if ((_BYTE)v53)
    {
      unsigned int v12 = *(_DWORD *)(v3 + 32);
      if (v12 > 0x40)
      {
        if ((*(unsigned char *)*v4 & 1) == 0)
        {
          llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v3 + 24));
          unsigned int v47 = v12;
          operator new[]();
        }
      }
      else
      {
        unint64_t v13 = *v4;
        if ((*v4 & 1) == 0)
        {
          unsigned int v14 = __clz(__rbit64(v13));
          if (v12 >= v14) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = v12;
          }
          unsigned int v47 = *(_DWORD *)(v3 + 32);
          if (v12 == v15) {
            uint64_t v46 = 0;
          }
          else {
            uint64_t v46 = v13 >> v15;
          }
          llvm::UnsignedDivisonByConstantInfo::get((llvm::UnsignedDivisonByConstantInfo *)&v46, (const llvm::APInt *)v15, (uint64_t)&v48);
          if (v52 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          unint64_t __src = v48;
          unsigned int v52 = v49;
          unsigned int v49 = 0;
          uint64_t v53 = v50;
          if (v47 >= 0x41 && v46) {
            MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
          }
          uint64_t v15 = v15;
LABEL_28:
          unsigned int v49 = v52;
          if (v52 > 0x40) {
            operator new[]();
          }
          unsigned int v48 = __src;
          if ((_BYTE)v53)
          {
            uint64_t v16 = *(unsigned int *)(v3 + 32);
            if (v16 > 0x40)
            {
              int v20 = 0;
              int64_t v21 = (unint64_t)(v16 + 63) >> 6;
              do
              {
                BOOL v9 = v21-- < 1;
                if (v9) {
                  break;
                }
                unint64_t v22 = *(void *)(*v4 + 8 * v21);
                v20 += __clz(v22);
              }
              while (!v22);
              int v23 = v16 | 0xFFFFFFC0;
              if ((v16 & 0x3F) == 0) {
                int v23 = 0;
              }
              if (v20 + v23 != v16 - 1) {
                goto LABEL_34;
              }
            }
            else if (*v4 != 1)
            {
LABEL_34:
              char v17 = 0;
              unsigned int v18 = HIDWORD(v53) - 1;
              char v19 = 1;
LABEL_42:
              uint64_t v24 = *(void *)(a1 + 8);
              unint64_t v26 = sub_1CD7EBF14(*(void *)(a1 + 16), v15, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), 0, 0);
              unsigned int v27 = *(_DWORD *)(v24 + 8);
              if (v27 >= *(_DWORD *)(v24 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v28 = (uint64_t **)(*(void *)v24 + 16 * v27);
              *uint64_t v28 = v26;
              v28[1] = v25;
              ++*(_DWORD *)(v24 + 8);
              uint64_t v29 = *(void *)(a1 + 40);
              uint64_t v31 = sub_1CD7EBB14(*(void *)(a1 + 16), (llvm::LLVMContext *)&v48, *(const llvm::APInt **)(a1 + 24), **(void **)(a1 + 48), *(void *)(*(void *)(a1 + 48) + 8), 0, 0);
              unsigned int v32 = *(_DWORD *)(v29 + 8);
              if (v32 >= *(_DWORD *)(v29 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v33 = (uint64_t *)(*(void *)v29 + 16 * v32);
              uint64_t *v33 = v31;
              v33[1] = v30;
              ++*(_DWORD *)(v29 + 8);
              uint64_t v34 = *(void *)(a1 + 16);
              uint64_t v35 = *(void *)(a1 + 56);
              unsigned int v36 = **(_DWORD **)(a1 + 64);
              if (v17)
              {
                unsigned int v47 = **(_DWORD **)(a1 + 64);
                if (v36 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v46);
                }
                uint64_t v46 = 0;
              }
              else
              {
                unsigned int v47 = **(_DWORD **)(a1 + 64);
                if (v36 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v46);
                }
                uint64_t v46 = 1 << (v36 - 1);
              }
              uint64_t v38 = sub_1CD7EBB14(v34, (llvm::LLVMContext *)&v46, *(const llvm::APInt **)(a1 + 24), **(void **)(a1 + 48), *(void *)(*(void *)(a1 + 48) + 8), 0, 0);
              unsigned int v39 = *(_DWORD *)(v35 + 8);
              if (v39 >= *(_DWORD *)(v35 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v40 = (uint64_t *)(*(void *)v35 + 16 * v39);
              *unsigned int v40 = v38;
              v40[1] = v37;
              ++*(_DWORD *)(v35 + 8);
              if (v47 >= 0x41 && v46) {
                MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
              }
              uint64_t v41 = *(void *)(a1 + 72);
              unint64_t v43 = sub_1CD7EBF14(*(void *)(a1 + 16), v18, *(const llvm::APInt **)(a1 + 24), **(llvm ***)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), 0, 0);
              unsigned int v44 = *(_DWORD *)(v41 + 8);
              if (v44 >= *(_DWORD *)(v41 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v45 = (uint64_t **)(*(void *)v41 + 16 * v44);
              *unsigned int v45 = v43;
              v45[1] = v42;
              ++*(_DWORD *)(v41 + 8);
              **(unsigned char **)(a1 + 80) |= v19;
              if (v49 >= 0x41 && v48) {
                MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
              }
              if (v52 >= 0x41)
              {
                if (__src) {
                  MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                }
              }
              return 1;
            }
          }
          char v19 = 0;
          char v17 = 1;
          unsigned int v18 = HIDWORD(v53);
          goto LABEL_42;
        }
      }
    }
    uint64_t v15 = 0;
    goto LABEL_28;
  }
  int v7 = 0;
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  do
  {
    BOOL v9 = v8-- < 1;
    if (v9) {
      break;
    }
    unint64_t v10 = *(void *)(*v4 + 8 * v8);
    v7 += __clz(v10);
  }
  while (!v10);
  uint64_t result = 0;
  int v11 = v5 | 0xFFFFFFC0;
  if ((v5 & 0x3F) == 0) {
    int v11 = 0;
  }
  if (v7 + v11 != v5) {
    goto LABEL_10;
  }
  return result;
}

void sub_1CD01F660()
{
}

__n128 sub_1CD01F674(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x78uLL);
  *(void *)uint64_t v2 = &unk_1F26430D0;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1CD01F6F0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26430D0;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t sub_1CD01F750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)a2 + 80);
  long long v5 = (unint64_t *)(v4 + 24);
  uint64_t v6 = *(unsigned int *)(v4 + 32);
  if (v6 > 0x40)
  {
    int v8 = 0;
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    do
    {
      BOOL v43 = v9-- < 1;
      if (v43) {
        break;
      }
      unint64_t v10 = *(void *)(*v5 + 8 * v9);
      v8 += __clz(v10);
    }
    while (!v10);
    uint64_t result = 0;
    int v11 = v6 | 0xFFFFFFC0;
    if ((v6 & 0x3F) == 0) {
      int v11 = 0;
    }
    if (v8 + v11 == v6) {
      return result;
    }
  }
  else if (!*v5)
  {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)a3 + 80);
  uint64_t v13 = *(unsigned int *)(v12 + 32);
  if (v13 > 0x40)
  {
    int v15 = 0;
    int64_t v16 = (unint64_t)(v13 + 63) >> 6;
    do
    {
      BOOL v43 = v16-- < 1;
      if (v43) {
        break;
      }
      unint64_t v17 = *(void *)(*(void *)(v12 + 24) + 8 * v16);
      v15 += __clz(v17);
    }
    while (!v17);
    int v18 = v13 | 0xFFFFFFC0;
    if ((v13 & 0x3F) == 0) {
      int v18 = 0;
    }
    BOOL v14 = v15 + v18 == v13;
  }
  else
  {
    BOOL v14 = *(void *)(v12 + 24) == 0;
  }
  char v19 = v14;
  int v20 = *(char **)(a1 + 8);
  if (!*v20) {
    char v19 = 0;
  }
  *int v20 = v19;
  if (v6 > 0x40)
  {
    int64_t v67 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v68 = 8 * v67;
    do
    {
      if (!v68)
      {
        int v71 = 0;
        goto LABEL_122;
      }
      unint64_t v69 = *(void *)(*v5 - 8 + v68);
      unint64_t v70 = *(void *)(*(void *)(v12 + 24) - 8 + v68);
      v68 -= 8;
    }
    while (v69 == v70);
    if (v69 > v70) {
      int v71 = 1;
    }
    else {
      int v71 = -1;
    }
LABEL_122:
    int v72 = 0;
    BOOL v21 = v71 < 1;
    **(unsigned char **)(a1 + 16) |= v21;
    do
    {
      BOOL v43 = v67-- < 1;
      if (v43) {
        break;
      }
      unint64_t v73 = *(void *)(*v5 + 8 * v67);
      v72 += __clz(v73);
    }
    while (!v73);
    int v74 = v6 | 0xFFFFFFC0;
    if ((v6 & 0x3F) == 0) {
      int v74 = 0;
    }
    BOOL v22 = v72 + v74 == v6 - 1;
  }
  else
  {
    BOOL v21 = *v5 <= *(void *)(v12 + 24);
    **(unsigned char **)(a1 + 16) |= v21;
    BOOL v22 = *v5 == 1;
  }
  int v23 = v22;
  int v24 = v23 | v21;
  **(unsigned char **)(a1 + 24) |= v23 | v21;
  **(unsigned char **)(a1 + 32) &= v23 | v21;
  if (v13 > 0x40)
  {
    int v25 = 0;
    int64_t v26 = (unint64_t)(v13 + 63) >> 6;
    do
    {
      BOOL v43 = v26-- < 1;
      if (v43) {
        break;
      }
      unint64_t v27 = *(void *)(*(void *)(v12 + 24) + 8 * v26);
      v25 += __clz(v27);
    }
    while (!v27);
    int v28 = v13 | 0xFFFFFFC0;
    if ((v13 & 0x3F) == 0) {
      int v28 = 0;
    }
    if (v25 + v28 == v13) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  if (*(void *)(v12 + 24))
  {
LABEL_37:
    uint64_t v29 = *(unsigned char **)(a1 + 40);
    if (*v29) {
      char v30 = v24;
    }
    else {
      char v30 = 0;
    }
    *uint64_t v29 = v30;
  }
LABEL_41:
  if (v6 > 0x40)
  {
    llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v4 + 24));
    unsigned int v88 = v6;
    operator new[]();
  }
  unint64_t v31 = *v5;
  unsigned int v32 = __clz(__rbit64(*v5));
  unsigned int v88 = v6;
  if (v6 <= v32)
  {
    unint64_t __src = 0;
    unsigned int v32 = v6;
  }
  else
  {
    unint64_t __src = v31 >> v32;
  }
  **(unsigned char **)(a1 + 48) |= v32 != 0;
  BOOL v33 = __src == 1;
  uint64_t v34 = *(BOOL **)(a1 + 56);
  if (!*v34) {
    BOOL v33 = 0;
  }
  *uint64_t v34 = v33;
  unsigned int v35 = *(_DWORD *)(v4 + 32);
  if (v35 + 1 > 0x40)
  {
    if (v6 != v35 + 1) {
      operator new[]();
    }
    sub_1CD0463BC((uint64_t)&v81, (uint64_t)&__src);
    unsigned int v80 = v35 + 1;
    llvm::APInt::initSlowCase((llvm::APInt *)&v79);
  }
  unsigned int v82 = v35 + 1;
  if (v35 == -1) {
    unint64_t v36 = 0;
  }
  else {
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v35;
  }
  unint64_t v81 = v36 & __src;
  unsigned int v80 = v35 + 1;
  uint64_t v79 = 1 << v35;
  llvm::APInt::multiplicativeInverse((llvm::APInt *)&v81, (const llvm::APInt *)&v79, (uint64_t)&v83);
  if (v35 > 0x40)
  {
    if (v84 != v35) {
      operator new[]();
    }
    sub_1CD0463BC((uint64_t)&v85, (uint64_t)&v83);
  }
  else
  {
    if (v84 >= 0x41) {
      uint64_t v38 = v83;
    }
    else {
      uint64_t v38 = (uint64_t *)&v83;
    }
    uint64_t v39 = *v38;
    unsigned int v86 = v35;
    if (v35) {
      unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v35;
    }
    else {
      unint64_t v40 = 0;
    }
    unsigned int v85 = (void *)(v40 & v39);
  }
  if (v84 >= 0x41 && v83) {
    MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
  }
  if (v80 >= 0x41 && v79) {
    MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
  }
  if (v82 >= 0x41 && v81) {
    MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
  }
  unsigned int v84 = 1;
  uint64_t v83 = 0;
  unsigned int v82 = 1;
  unint64_t v81 = 0;
  unsigned int v80 = v35;
  if (v35 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v79);
  }
  if (v35) {
    unint64_t v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v35;
  }
  else {
    unint64_t v41 = 0;
  }
  uint64_t v79 = v41;
  llvm::APInt::udivrem((llvm::APInt *)&v79, (const llvm::APInt *)v5, (const llvm::APInt *)&v83, (llvm::APInt *)&v81, v37);
  if (v80 >= 0x41 && v79) {
    MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
  }
  uint64_t v42 = *(unsigned int *)(v12 + 32);
  if (v42 > 0x40)
  {
    unint64_t v75 = ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8;
    while (v75)
    {
      unint64_t v76 = *(void *)(*(void *)(v12 + 24) - 8 + v75);
      unint64_t v77 = *(void *)(v81 - 8 + v75);
      v75 -= 8;
      BOOL v43 = v76 > v77;
      if (v76 != v77) {
        goto LABEL_73;
      }
    }
  }
  else
  {
    BOOL v43 = *(void *)(v12 + 24) > v81;
LABEL_73:
    if (v43) {
      llvm::APInt::operator-=((uint64_t)&v83, 1uLL);
    }
  }
  if (v24)
  {
    uint64_t v44 = v86;
    if (v86 > 0x40)
    {
      *unsigned int v85 = 0;
      bzero(v85 + 1, (((unint64_t)(v44 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      unsigned int v85 = 0;
    }
    uint64_t v45 = v84;
    if (v84 > 0x40)
    {
      *uint64_t v83 = -1;
      bzero(v83 + 1, (((unint64_t)(v45 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      if (v84) {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v84;
      }
      else {
        unint64_t v46 = 0;
      }
      uint64_t v83 = (uint64_t *)v46;
    }
    unsigned int v32 = -1;
  }
  uint64_t v47 = *(void *)(a1 + 64);
  uint64_t v49 = sub_1CD7EBB14(*(void *)(a1 + 72), (llvm::LLVMContext *)&v85, *(const llvm::APInt **)(a1 + 80), **(void **)(a1 + 88), *(void *)(*(void *)(a1 + 88) + 8), 0, 0);
  unsigned int v50 = *(_DWORD *)(v47 + 8);
  if (v50 >= *(_DWORD *)(v47 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v51 = (uint64_t *)(*(void *)v47 + 16 * v50);
  uint64_t *v51 = v49;
  v51[1] = v48;
  ++*(_DWORD *)(v47 + 8);
  uint64_t v52 = *(void *)(a1 + 72);
  uint64_t v54 = *(void *)(a1 + 96);
  uint64_t v53 = *(unsigned __int8 **)(a1 + 104);
  if (*v53) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200(v53);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v53);
  }
  if (v56 == 1)
  {
    unsigned int v78 = ExtendedSizeInBits;
    unsigned int ExtendedSizeInBits = v78;
  }
  unsigned int v80 = ExtendedSizeInBits;
  if (ExtendedSizeInBits > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v79);
  }
  if (ExtendedSizeInBits) {
    unint64_t v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)ExtendedSizeInBits;
  }
  else {
    LODWORD(v57) = 0;
  }
  uint64_t v79 = v57 & v32;
  uint64_t v59 = sub_1CD7EBB14(v52, (llvm::LLVMContext *)&v79, *(const llvm::APInt **)(a1 + 80), **(void **)(a1 + 104), *(void *)(*(void *)(a1 + 104) + 8), 0, 0);
  unsigned int v60 = *(_DWORD *)(v54 + 8);
  if (v60 >= *(_DWORD *)(v54 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v61 = (uint64_t *)(*(void *)v54 + 16 * v60);
  uint64_t *v61 = v59;
  v61[1] = v58;
  ++*(_DWORD *)(v54 + 8);
  if (v80 >= 0x41 && v79) {
    MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
  }
  uint64_t v62 = *(void *)(a1 + 112);
  uint64_t v64 = sub_1CD7EBB14(*(void *)(a1 + 72), (llvm::LLVMContext *)&v83, *(const llvm::APInt **)(a1 + 80), **(void **)(a1 + 88), *(void *)(*(void *)(a1 + 88) + 8), 0, 0);
  unsigned int v65 = *(_DWORD *)(v62 + 8);
  if (v65 >= *(_DWORD *)(v62 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v66 = (uint64_t *)(*(void *)v62 + 16 * v65);
  *uint64_t v66 = v64;
  v66[1] = v63;
  ++*(_DWORD *)(v62 + 8);
  if (v82 >= 0x41 && v81) {
    MEMORY[0x1D25D9CB0](v81, 0x1000C8000313F17);
  }
  if (v84 >= 0x41 && v83) {
    MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
  }
  if (v86 >= 0x41 && v85) {
    MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
  }
  if (v88 >= 0x41)
  {
    if (__src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  return 1;
}

void sub_1CD020164()
{
}

__n128 sub_1CD020178(uint64_t a1)
{
  long long v2 = (char *)operator new(0x78uLL);
  *(void *)long long v2 = &unk_1F2643160;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1CD0201F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2643160;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t sub_1CD020254(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 80);
  uint64_t v4 = *(unsigned int *)(v3 + 32);
  if (v4 <= 0x40)
  {
    unint64_t v5 = *(void *)(v3 + 24);
    if (!v5) {
      return 0;
    }
    unsigned int v104 = *(_DWORD *)(v3 + 32);
    uint64_t v103 = (void *)v5;
    if (((unint64_t)v103 >> (v4 - 1)))
    {
      if (v4) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
      }
      else {
        unint64_t v12 = 0;
      }
      uint64_t v103 = (void *)(v12 & ~v5);
      llvm::APInt::operator++((uint64_t)&v103);
      LODWORD(v4) = v104;
    }
    if (v4 >= 0x41)
    {
      int v73 = v4 - 1;
      BOOL v74 = ((*((void *)v103 + ((v4 - 1) >> 6)) >> (v4 - 1)) & 1) != 0
         && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v103) == v73;
      int v75 = 0;
      **(unsigned char **)(a1 + 8) |= v74;
      int64_t v76 = ((unint64_t)v4 + 63) >> 6;
      uint64_t v77 = v76;
      do
      {
        BOOL v9 = v77-- < 1;
        if (v9) {
          break;
        }
        unint64_t v78 = *((void *)v103 + v77);
        v75 += __clz(v78);
      }
      while (!v78);
      int v79 = 0;
      int v80 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0) {
        int v80 = 0;
      }
      **(unsigned char **)(a1 + 16) |= v75 + v80 == v73;
      do
      {
        BOOL v9 = v76-- < 1;
        if (v9) {
          break;
        }
        unint64_t v81 = *((void *)v103 + v76);
        v79 += __clz(v81);
      }
      while (!v81);
      unsigned int v82 = *(BOOL **)(a1 + 24);
      BOOL v84 = v79 + v80 == v73 && *v82;
      *unsigned int v82 = v84;
      llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v103);
      unsigned int v102 = v4;
      operator new[]();
    }
    **(unsigned char **)(a1 + 8) |= v103 == (void *)(1 << (v4 - 1));
    **(unsigned char **)(a1 + 16) |= v103 == (void *)1;
    uint64_t v13 = *(BOOL **)(a1 + 24);
    BOOL v15 = v103 == (void *)1 && *v13;
    *uint64_t v13 = v15;
    unsigned int v16 = __clz(__rbit64((unint64_t)v103));
    if (v4 >= v16) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v4;
    }
    unsigned int v102 = v4;
    if (v4 == v17) {
      unint64_t v101 = 0;
    }
    else {
      unint64_t v101 = (unint64_t)v103 >> v17;
    }
    unsigned int v18 = v104;
    if (v104 > 0x40)
    {
      if ((*((void *)v103 + ((v104 - 1) >> 6)) >> (v104 - 1)))
      {
        unsigned int v85 = v104 - 1;
        if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v103) == v85)
        {
LABEL_32:
          if (v102 > 0x40)
          {
            int v20 = 0;
            int64_t v21 = ((unint64_t)v102 + 63) >> 6;
            do
            {
              BOOL v9 = v21-- < 1;
              if (v9) {
                break;
              }
              unint64_t v22 = *(void *)(v101 + 8 * v21);
              v20 += __clz(v22);
            }
            while (!v22);
            if ((v102 & 0x3F) != 0) {
              unsigned int v23 = v102 | 0xFFFFFFC0;
            }
            else {
              unsigned int v23 = 0;
            }
            BOOL v19 = v20 + v23 == v102 - 1;
          }
          else
          {
            BOOL v19 = v101 == 1;
          }
          char v24 = v19;
          int v25 = *(char **)(a1 + 40);
          if (!*v25) {
            char v24 = 0;
          }
          *int v25 = v24;
          if (v18 + 1 > 0x40)
          {
            if (v102 != v18 + 1) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&__src, (uint64_t)&v101);
            unsigned int v96 = v18 + 1;
            llvm::APInt::initSlowCase((llvm::APInt *)&v95);
          }
          unsigned int v98 = v18 + 1;
          if (v18 == -1) {
            unint64_t v26 = 0;
          }
          else {
            unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v18;
          }
          unint64_t __src = (void *)(v26 & v101);
          unsigned int v96 = v18 + 1;
          uint64_t v95 = 1 << v18;
          llvm::APInt::multiplicativeInverse((llvm::APInt *)&__src, (const llvm::APInt *)&v95, (uint64_t)&v105);
          if (v18 > 0x40)
          {
            if (v106 != v18) {
              operator new[]();
            }
            sub_1CD0463BC((uint64_t)&v99, (uint64_t)&v105);
          }
          else
          {
            if (v106 >= 0x41) {
              unint64_t v27 = (uint64_t *)v105;
            }
            else {
              unint64_t v27 = &v105;
            }
            uint64_t v28 = *v27;
            unsigned int v100 = v18;
            if (v18) {
              unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
            }
            else {
              unint64_t v29 = 0;
            }
            uint64_t v99 = (void *)(v29 & v28);
          }
          if (v106 >= 0x41 && v105) {
            MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
          }
          if (v96 >= 0x41 && v95) {
            MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
          }
          if (v98 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          unsigned int v106 = v18;
          if (v18 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v105);
          }
          if (v18) {
            unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
          }
          else {
            unint64_t v30 = 0;
          }
          uint64_t v105 = v30 & ~(1 << (v18 - 1));
          llvm::APInt::udiv((uint64_t)&v105, (const llvm::APInt *)&v101, (uint64_t)&__src);
          if (v106 >= 0x41 && v105) {
            MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
          }
          unsigned int v106 = v98;
          if (v98 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v105);
          }
          uint64_t v105 = 0;
          if (v17 != v98)
          {
            if (v17 > 0x3F) {
              llvm::APInt::setBitsSlowCase(&v105, v17, v98);
            }
            else {
              v105 |= 0xFFFFFFFFFFFFFFFFLL >> (v17 - v98) << v17;
            }
          }
          if (v98 > 0x40)
          {
            uint64_t v87 = 0;
            unsigned int v88 = (char *)__src;
            uint64_t v89 = v105;
            unint64_t v90 = (((unint64_t)v98 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              *(void *)&v88[v87] &= *(void *)(v89 + v87);
              v87 += 8;
            }
            while (v90 != v87);
          }
          else
          {
            unint64_t __src = (void *)((unint64_t)__src & v105);
          }
          if (v104 > 0x40)
          {
            if ((*((void *)v103 + ((v104 - 1) >> 6)) >> (v104 - 1)))
            {
              unsigned int v86 = v104 - 1;
              if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v103) == v86)
              {
LABEL_89:
                if (v98 > 0x40) {
                  operator new[]();
                }
                uint64_t v37 = 2 * (void)__src;
                uint64_t v94 = 2 * (void)__src;
                unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v98;
                if (!v98) {
                  unint64_t v38 = 0;
                }
                uint64_t v94 = v37 & v38;
                unsigned int v96 = v98;
                uint64_t v95 = v37 & v38;
                unsigned int v93 = v18;
                uint64_t v92 = 1 << v17;
                llvm::APInt::udiv((uint64_t)&v95, (const llvm::APInt *)&v92, (uint64_t)&v105);
                if (v93 >= 0x41 && v92) {
                  MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
                }
                if (v96 >= 0x41 && v95) {
                  MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
                }
                if (v104 > 0x40)
                {
                  int v39 = 0;
                  int64_t v40 = ((unint64_t)v104 + 63) >> 6;
                  do
                  {
                    BOOL v9 = v40-- < 1;
                    if (v9) {
                      break;
                    }
                    unint64_t v41 = *((void *)v103 + v40);
                    v39 += __clz(v41);
                  }
                  while (!v41);
                  unsigned int v42 = v104 | 0xFFFFFFC0;
                  if ((v104 & 0x3F) == 0) {
                    unsigned int v42 = 0;
                  }
                  if (v39 + v42 != v104 - 1) {
                    goto LABEL_123;
                  }
                }
                else if (v103 != (void *)1)
                {
LABEL_123:
                  uint64_t v48 = *(void *)(a1 + 56);
                  uint64_t v50 = sub_1CD7EBB14(*(void *)(a1 + 64), (llvm::LLVMContext *)&v99, *(const llvm::APInt **)(a1 + 72), **(void **)(a1 + 80), *(void *)(*(void *)(a1 + 80) + 8), 0, 0);
                  unsigned int v51 = *(_DWORD *)(v48 + 8);
                  if (v51 >= *(_DWORD *)(v48 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v52 = (uint64_t *)(*(void *)v48 + 16 * v51);
                  *uint64_t v52 = v50;
                  v52[1] = v49;
                  ++*(_DWORD *)(v48 + 8);
                  uint64_t v53 = *(void *)(a1 + 88);
                  uint64_t v55 = sub_1CD7EBB14(*(void *)(a1 + 64), (llvm::LLVMContext *)&__src, *(const llvm::APInt **)(a1 + 72), **(void **)(a1 + 80), *(void *)(*(void *)(a1 + 80) + 8), 0, 0);
                  unsigned int v56 = *(_DWORD *)(v53 + 8);
                  if (v56 >= *(_DWORD *)(v53 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unint64_t v57 = (uint64_t *)(*(void *)v53 + 16 * v56);
                  *unint64_t v57 = v55;
                  v57[1] = v54;
                  ++*(_DWORD *)(v53 + 8);
                  uint64_t v58 = *(void *)(a1 + 64);
                  uint64_t v60 = *(void *)(a1 + 96);
                  uint64_t v59 = *(unsigned __int8 **)(a1 + 104);
                  if (*v59) {
                    unsigned int ExtendedSizeInBits = sub_1CB87E200(v59);
                  }
                  else {
                    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v59);
                  }
                  if (v62 == 1)
                  {
                    unsigned int v91 = ExtendedSizeInBits;
                    unsigned int ExtendedSizeInBits = v91;
                  }
                  unsigned int v96 = ExtendedSizeInBits;
                  if (ExtendedSizeInBits > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v95);
                  }
                  if (ExtendedSizeInBits) {
                    unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> -(char)ExtendedSizeInBits;
                  }
                  else {
                    LODWORD(v63) = 0;
                  }
                  uint64_t v95 = v63 & v17;
                  uint64_t v65 = sub_1CD7EBB14(v58, (llvm::LLVMContext *)&v95, *(const llvm::APInt **)(a1 + 72), **(void **)(a1 + 104), *(void *)(*(void *)(a1 + 104) + 8), 0, 0);
                  unsigned int v66 = *(_DWORD *)(v60 + 8);
                  if (v66 >= *(_DWORD *)(v60 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int64_t v67 = (uint64_t *)(*(void *)v60 + 16 * v66);
                  *int64_t v67 = v65;
                  v67[1] = v64;
                  ++*(_DWORD *)(v60 + 8);
                  if (v96 >= 0x41 && v95) {
                    MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
                  }
                  uint64_t v68 = *(void *)(a1 + 112);
                  uint64_t v70 = sub_1CD7EBB14(*(void *)(a1 + 64), (llvm::LLVMContext *)&v105, *(const llvm::APInt **)(a1 + 72), **(void **)(a1 + 80), *(void *)(*(void *)(a1 + 80) + 8), 0, 0);
                  unsigned int v71 = *(_DWORD *)(v68 + 8);
                  if (v71 >= *(_DWORD *)(v68 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v72 = (uint64_t *)(*(void *)v68 + 16 * v71);
                  *int v72 = v70;
                  v72[1] = v69;
                  ++*(_DWORD *)(v68 + 8);
                  if (v106 >= 0x41 && v105) {
                    MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
                  }
                  if (v98 >= 0x41 && __src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
                  if (v100 >= 0x41 && v99) {
                    MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
                  }
                  if (v102 >= 0x41 && v101) {
                    MEMORY[0x1D25D9CB0](v101, 0x1000C8000313F17);
                  }
                  if (v104 >= 0x41)
                  {
                    if (v103) {
                      MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
                    }
                  }
                  return 1;
                }
                uint64_t v43 = v100;
                if (v100 > 0x40)
                {
                  void *v99 = 0;
                  bzero(v99 + 1, (((unint64_t)(v43 + 63) >> 3) - 8) & 0xFFFFFFF8);
                }
                else
                {
                  uint64_t v99 = 0;
                }
                uint64_t v44 = v98;
                if (v98 > 0x40)
                {
                  *(void *)unint64_t __src = -1;
                  bzero((char *)__src + 8, (((unint64_t)(v44 + 63) >> 3) - 8) & 0xFFFFFFF8);
                }
                else
                {
                  if (v98) {
                    uint64_t v45 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v98);
                  }
                  else {
                    uint64_t v45 = 0;
                  }
                  unint64_t __src = v45;
                }
                uint64_t v46 = v106;
                if (v106 > 0x40)
                {
                  *(void *)uint64_t v105 = -1;
                  bzero((void *)(v105 + 8), (((unint64_t)(v46 + 63) >> 3) - 8) & 0xFFFFFFF8);
                }
                else
                {
                  if (v106) {
                    unint64_t v47 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
                  }
                  else {
                    unint64_t v47 = 0;
                  }
                  uint64_t v105 = v47;
                }
                unsigned int v17 = -1;
                goto LABEL_123;
              }
            }
          }
          else if (v103 == (void *)(1 << (v104 - 1)))
          {
            goto LABEL_89;
          }
          if (v98 >= 0x41)
          {
            int v32 = 0;
            p_src = __src;
            int64_t v33 = ((unint64_t)v98 + 63) >> 6;
            do
            {
              BOOL v9 = v33-- < 1;
              if (v9) {
                break;
              }
              unint64_t v34 = *((void *)__src + v33);
              v32 += __clz(v34);
            }
            while (!v34);
            unsigned int v35 = v98 | 0xFFFFFFC0;
            if ((v98 & 0x3F) == 0) {
              unsigned int v35 = 0;
            }
            if (v98 - v32 - v35 > 0x40)
            {
              BOOL v36 = 1;
              goto LABEL_88;
            }
          }
          else
          {
            p_src = &__src;
          }
          BOOL v36 = *p_src != 0;
LABEL_88:
          **(unsigned char **)(a1 + 48) |= v36;
          goto LABEL_89;
        }
      }
    }
    else if (v103 == (void *)(1 << (v104 - 1)))
    {
      goto LABEL_32;
    }
    **(unsigned char **)(a1 + 32) |= v17 != 0;
    goto LABEL_32;
  }
  int v7 = 0;
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  do
  {
    BOOL v9 = v8-- < 1;
    if (v9) {
      break;
    }
    unint64_t v10 = *(void *)(*(void *)(v3 + 24) + 8 * v8);
    v7 += __clz(v10);
  }
  while (!v10);
  uint64_t result = 0;
  int v11 = v4 | 0xFFFFFFC0;
  if ((v4 & 0x3F) == 0) {
    int v11 = 0;
  }
  if (v7 + v11 != v4)
  {
    unsigned int v104 = *(_DWORD *)(v3 + 32);
    operator new[]();
  }
  return result;
}

const char *llvm_blake3_version()
{
  return "1.3.1";
}

double llvm_blake3_hasher_init_keyed(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v2;
  *(_OWORD *)(a1 + 48) = v3;
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_WORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 138) = 16;
  *(unsigned char *)(a1 + 144) = 0;
  return result;
}

double llvm_blake3_hasher_init_derive_key_raw(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v8[0] = xmmword_1CFB2DE9C;
  v8[1] = unk_1CFB2DEAC;
  memset((char *)&v8[8] + 8, 0, 376);
  void v8[2] = xmmword_1CFB2DE9C;
  v8[3] = unk_1CFB2DEAC;
  memset(&v8[4], 0, 74);
  BYTE10(v8[8]) = 32;
  llvm_blake3_hasher_update((uint64_t)v8, a2, a3, (__n128)xmmword_1CFB2DE9C);
  llvm_blake3_hasher_finalize_seek((unsigned __int8 *)v8, 0, (char *)v7, 0x20uLL);
  long long v4 = v7[0];
  long long v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_WORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 138) = 64;
  *(unsigned char *)(a1 + 144) = 0;
  return result;
}

double llvm_blake3_hasher_init_derive_key(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);

  return llvm_blake3_hasher_init_derive_key_raw(a1, (int *)__s, v4);
}

double llvm_blake3_hasher_reset(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(a1 + 48) = v1;
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_WORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  return result;
}

uint64_t sub_1CD0212F0(uint64_t a1, unint64_t a2, const float *a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (a2 <= 0x1000)
  {
    memset(v54, 0, sizeof(v54));
    unint64_t v18 = 0;
    if (a2 < 0x400)
    {
      unint64_t v17 = 0;
      unint64_t v22 = a2;
    }
    else
    {
      unint64_t v19 = (a2 - 1024) >> 10;
      unint64_t v20 = v19 + 1;
      int64_t v21 = v54;
      do
      {
        *v21++ = a1 + v18;
        v18 += 1024;
        --v20;
      }
      while (v20);
      unint64_t v17 = v19 + 1;
      unint64_t v22 = a2 - v18;
    }
    sub_1CD81E0EC((int *)v54, v17, 16, a3, a4, 1u, a5, 1, 2, (int64x2_t *)a6);
    if (v18 < a2)
    {
      long long v29 = *(_OWORD *)a3;
      long long v30 = *((_OWORD *)a3 + 1);
      uint64_t v48 = 0;
      long long v43 = v29;
      long long v44 = v30;
      BYTE2(v48) = a5;
      memset(&v45[8], 0, 32);
      long long v46 = 0u;
      long long v47 = 0u;
      unint64_t v31 = (int *)(a1 + v18);
      *(void *)uint64_t v45 = v17 + a4;
      if (v22 < 0x41)
      {
        uint64_t v33 = 0;
      }
      else
      {
        char v32 = 0;
        do
        {
          sub_1CD81C36C((int *)&v43, v31, 64, *(uint64_t *)v45, BYTE2(v48) | (v32 == 0));
          char v32 = ++BYTE1(v48);
          v31 += 16;
          v22 -= 64;
        }
        while (v22 > 0x40);
        uint64_t v33 = v48;
      }
      if (64 - v33 >= v22) {
        size_t v38 = v22;
      }
      else {
        size_t v38 = 64 - v33;
      }
      memcpy(&v45[v33 + 8], v31, v38);
      long long v49 = v43;
      long long v50 = v44;
      v52[0] = *(_OWORD *)&v45[8];
      v52[1] = *(_OWORD *)&v45[24];
      v52[2] = v46;
      v52[3] = v47;
      LOBYTE(v48) = v48 + v38;
      uint64_t v53 = v48;
      uint64_t v51 = *(void *)v45;
      *(_DWORD *)((char *)&v53 + 1) = (BYTE2(v48) | (BYTE1(v48) == 0)) | 2;
      uint64_t v39 = a6 + 32 * v17;
      *(_OWORD *)uint64_t v55 = v43;
      *(_OWORD *)&v55[16] = v44;
      sub_1CD81C36C((int *)v55, (int *)v52, v48, *(uint64_t *)v45, *(int *)((char *)&v53 + 1));
      int v40 = *(_DWORD *)&v55[4];
      *(_DWORD *)uint64_t v39 = *(_DWORD *)v55;
      *(_DWORD *)(v39 + 4) = v40;
      *(_OWORD *)(v39 + 8) = *(_OWORD *)&v55[8];
      int v41 = *(_DWORD *)&v55[28];
      *(_DWORD *)(v39 + 24) = *(_DWORD *)&v55[24];
      *(_DWORD *)(v39 + 28) = v41;
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v12 = a1 + (1024 << (__clz(((a2 - 1) >> 10) | 1) ^ 0x3Fu));
    uint64_t v13 = sub_1CD0212F0(a1);
    uint64_t v14 = sub_1CD0212F0(v12);
    if (v13 == 1)
    {
      long long v15 = v44;
      *(_OWORD *)a6 = v43;
      *(_OWORD *)(a6 + 16) = v15;
      long long v16 = *(_OWORD *)&v45[16];
      *(_OWORD *)(a6 + 32) = *(_OWORD *)v45;
      *(_OWORD *)(a6 + 48) = v16;
      return 2;
    }
    unint64_t v23 = v14 + v13;
    long long v49 = 0u;
    long long v50 = 0u;
    if ((unint64_t)(v14 + v13) < 2)
    {
      unint64_t v17 = 0;
      unint64_t v26 = 0;
    }
    else
    {
      unint64_t v24 = (unint64_t)(v14 + v13 - 2) >> 1;
      unint64_t v25 = v24 + 1;
      unint64_t v26 = 2 * v24 + 2;
      unint64_t v27 = &v49;
      uint64_t v28 = &v43;
      do
      {
        *(void *)unint64_t v27 = v28;
        unint64_t v27 = (long long *)((char *)v27 + 8);
        v28 += 4;
        --v25;
      }
      while (v25);
      unint64_t v17 = v24 + 1;
    }
    sub_1CD81E0EC((int *)&v49, v17, 1, a3, 0, 0, a5 | 4, 0, 0, (int64x2_t *)a6);
    if (v26 < v23)
    {
      unint64_t v34 = &v43 + 4 * v17;
      long long v35 = *v34;
      long long v36 = v34[1];
      uint64_t v37 = (_OWORD *)(a6 + 32 * v17);
      *uint64_t v37 = v35;
      v37[1] = v36;
LABEL_26:
      ++v17;
    }
  }
  return v17;
}

uint64_t llvm::AArch64::getDefaultFPU(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0x100000016;
  if (a2 != 7)
  {
    switch(a2)
    {
      case 9:
        if (*(void *)a1 == 0x782D786574726F63 && *(unsigned char *)(a1 + 8) == 49)
        {
          BOOL v5 = 0;
          int v7 = 0;
          int v9 = 0;
          int v8 = 1;
          goto LABEL_132;
        }
        BOOL v5 = 0;
        BOOL v11 = *(void *)a1 == 0x782D786574726F63 && *(unsigned char *)(a1 + 8) == 50;
        int v8 = 1;
        if (!v11)
        {
          uint64_t v6 = 0;
          int v12 = 0;
          goto LABEL_139;
        }
        uint64_t v6 = 0x100000015;
        int v7 = 0;
        int v9 = 0;
        goto LABEL_141;
      case 10:
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13363) {
          goto LABEL_130;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13619) {
          goto LABEL_130;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13109) {
          goto LABEL_130;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13621) {
          goto LABEL_130;
        }
        BOOL v18 = *(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14133;
        if (v18
          || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v19 = *(unsigned __int16 *)(a1 + 8) == 13622) : (BOOL v19 = 0),
              v19
           || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v20 = *(unsigned __int16 *)(a1 + 8) == 12855) : (BOOL v20 = 0),
               v20
            || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v21 = *(unsigned __int16 *)(a1 + 8) == 13111) : (BOOL v21 = 0),
                v21
             || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v22 = *(unsigned __int16 *)(a1 + 8) == 13623) : (BOOL v22 = 0),
                 v22
              || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v23 = *(unsigned __int16 *)(a1 + 8) == 13879) : (BOOL v23 = 0),
                  v23
               || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v24 = *(unsigned __int16 *)(a1 + 8) == 14135) : (BOOL v24 = 0),
                   v24
                || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v25 = *(unsigned __int16 *)(a1 + 8) == 14391) : (BOOL v25 = 0),
                    v25))))))))
        {
LABEL_130:
          BOOL v5 = 0;
          int v12 = 0;
          int v8 = 0;
          goto LABEL_138;
        }
        if (*(void *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 12856)
        {
          BOOL v5 = 0;
          int v7 = 0;
          int v9 = 0;
          int v8 = 0;
        }
        else
        {
          BOOL v5 = 0;
          if (*(void *)a1 != 0x782D786574726F63 || *(_WORD *)(a1 + 8) != 25393)
          {
            uint64_t v6 = 0;
            int v12 = 0;
            int v8 = 0;
            goto LABEL_139;
          }
          int v7 = 0;
          int v9 = 0;
          int v8 = 0;
        }
LABEL_132:
        uint64_t v6 = 0x100000016;
        goto LABEL_141;
      case 11:
        BOOL v28 = *(void *)a1 == 0x612D786574726F63 && *(void *)(a1 + 3) == 0x303135612D786574;
        BOOL v5 = !v28;
        uint64_t v6 = 0x100000015;
        if (v28) {
          goto LABEL_94;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(void *)(a1 + 3) == 0x633837612D786574)
        {
          BOOL v5 = 0;
          int v8 = 0;
          int v12 = 1;
          goto LABEL_138;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(void *)(a1 + 3) == 0x303137612D786574)
        {
          BOOL v5 = 0;
        }
        else
        {
          uint64_t v6 = 0;
LABEL_94:
          if (v5)
          {
            if ((*(void *)a1 != 0x65737265766F656ELL || *(void *)(a1 + 3) != 0x31652D6573726576)
              && (*(void *)a1 != 0x65737265766F656ELL || *(void *)(a1 + 3) != 0x316E2D6573726576)
              && (*(void *)a1 != 0x65737265766F656ELL || *(void *)(a1 + 3) != 0x326E2D6573726576))
            {
              BOOL v34 = *(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 3) == 0x31762D6573726576;
              int v12 = 1;
              if (!v34)
              {
                BOOL v5 = 0;
                int v8 = 0;
                goto LABEL_139;
              }
            }
            BOOL v5 = 1;
LABEL_135:
            uint64_t v6 = 0x100000016;
            goto LABEL_9;
          }
        }
        int v8 = 0;
        int v12 = 1;
        goto LABEL_139;
      case 12:
        int v12 = 0;
        if (*(void *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869430)
        {
          int v8 = 0;
          BOOL v5 = 1;
LABEL_138:
          uint64_t v6 = 0x100000016;
        }
        else
        {
          BOOL v36 = *(void *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869687;
          BOOL v5 = 1;
          if (!v36)
          {
            uint64_t v6 = 0;
            BOOL v37 = 0;
            int v9 = 0;
            int v7 = 1;
            goto LABEL_217;
          }
          uint64_t v6 = 0x100000016;
          int v8 = 0;
        }
LABEL_139:
        int v7 = v5;
        int v9 = v12;
        goto LABEL_140;
      case 15:
        BOOL v5 = 0;
        if (*(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 7) == 0x6276743231352D65) {
          goto LABEL_135;
        }
        uint64_t v6 = 0;
        int v7 = 0;
        int v9 = 0;
        int v8 = 0;
        goto LABEL_141;
      default:
        BOOL v5 = a2 == 8;
        if (a2 != 8)
        {
          int v7 = 0;
          int v9 = 0;
          int v8 = 0;
          uint64_t v6 = 0;
          goto LABEL_141;
        }
        if (*(void *)a1 == 0x37612D656C707061) {
          goto LABEL_260;
        }
        int v7 = 0;
        int v9 = 0;
        int v8 = 0;
        uint64_t v6 = 0;
        BOOL v5 = 1;
        goto LABEL_141;
    }
  }
  if (*(_DWORD *)a1 == 1701733735 && *(_DWORD *)(a1 + 3) == 1667854949) {
    return LODWORD((&off_1E684F9F8)[9 * a3 + 6]);
  }
  BOOL v5 = 0;
  if (*(_DWORD *)a1 ^ 0x6C637963 | *(_DWORD *)(a1 + 3) ^ 0x656E6F6C) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 0x100000016;
  }
LABEL_9:
  int v7 = 0;
  int v8 = 0;
  int v9 = v5;
LABEL_140:
  BOOL v5 = 0;
LABEL_141:
  uint64_t v39 = v6 & 0x100000000;
  BOOL v37 = (v6 & 0xFF00000000) == 0 && v5;
  BOOL v5 = (v6 & 0xFF00000000) == 0;
  if (v37 && (*(void *)a1 == 0x38612D656C707061 || *(void *)a1 == 0x39612D656C707061)) {
    goto LABEL_260;
  }
  int v40 = v39 ? 0 : v8;
  if (v40 == 1)
  {
    if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 48) {
      goto LABEL_260;
    }
    if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 49) {
      goto LABEL_260;
    }
    if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 50) {
      goto LABEL_260;
    }
    if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 51) {
      goto LABEL_260;
    }
    if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 52) {
      goto LABEL_260;
    }
    if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 53) {
      goto LABEL_260;
    }
    if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 54) {
      goto LABEL_260;
    }
  }
  if (v37
    && (*(void *)a1 == 0x316D2D656C707061
     || *(void *)a1 == 0x326D2D656C707061
     || *(void *)a1 == 0x34732D656C707061
     || *(void *)a1 == 0x35732D656C707061))
  {
    goto LABEL_260;
  }
  if (v40)
  {
    if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 51) {
      goto LABEL_260;
    }
    if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 52) {
      goto LABEL_260;
    }
    if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 53) {
      goto LABEL_260;
    }
  }
  if (a2 != 6 || v39)
  {
    if (a2 != 7 || v39)
    {
      int v12 = 0;
      if (a2 != 4 || v39) {
        goto LABEL_217;
      }
      if (*(_DWORD *)a1 == 1870230123) {
        goto LABEL_260;
      }
    }
    else if (*(_DWORD *)a1 == 1752195443 && *(_DWORD *)(a1 + 3) == 1634888040)
    {
      goto LABEL_260;
    }
    int v12 = 0;
  }
  else
  {
    if (*(_DWORD *)a1 == 1802264934 && *(_WORD *)(a1 + 4) == 29295) {
      goto LABEL_260;
    }
    int v12 = 1;
  }
  BOOL v5 = 1;
LABEL_217:
  if (v7 && v5 && *(void *)a1 == 0x787265646E756874 && *(_DWORD *)(a1 + 8) == 960066610) {
    goto LABEL_260;
  }
  char v54 = !v5;
  if (a2 != 13) {
    char v54 = 1;
  }
  if ((v54 & 1) == 0 && *(void *)a1 == 0x787265646E756874 && *(void *)(a1 + 5) == 0x3031317433787265) {
    goto LABEL_260;
  }
  if (v37 && *(void *)a1 == 0x787265646E756874) {
    goto LABEL_260;
  }
  if ((v9 & v5) == 1)
  {
    if (*(void *)a1 == 0x787265646E756874 && *(void *)(a1 + 3) == 0x383874787265646ELL) {
      goto LABEL_260;
    }
    if (*(void *)a1 == 0x787265646E756874 && *(void *)(a1 + 3) == 0x313874787265646ELL) {
      goto LABEL_260;
    }
    if (*(void *)a1 == 0x787265646E756874 && *(void *)(a1 + 3) == 0x333874787265646ELL) {
      goto LABEL_260;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)a1 == 829846388 && *(_WORD *)(a1 + 4) == 12337) {
      goto LABEL_260;
    }
    int v60 = *(_DWORD *)a1 ^ 0x6D726163;
    int v61 = *(unsigned __int16 *)(a1 + 4) ^ 0x6C65;
    goto LABEL_257;
  }
  char v62 = !v5;
  if (a2 == 5) {
    char v63 = v62;
  }
  else {
    char v63 = 1;
  }
  if ((v63 & 1) == 0)
  {
    int v60 = *(_DWORD *)a1 ^ 0x66343661;
    int v61 = *(unsigned __int8 *)(a1 + 4) ^ 0x78;
LABEL_257:
    BOOL v64 = (v60 | v61) == 0;
    goto LABEL_258;
  }
  if (a2 == 7) {
    char v65 = v62;
  }
  else {
    char v65 = 1;
  }
  if ((v65 & 1) == 0)
  {
    BOOL v64 = (*(_DWORD *)a1 ^ 0x61766E69 | *(_DWORD *)(a1 + 3) ^ 0x64696C61) == 0;
    uint64_t v3 = 0x100000000;
LABEL_258:
    if (!v64) {
      uint64_t v3 = v6;
    }
    goto LABEL_260;
  }
  uint64_t v3 = v6;
LABEL_260:
  if ((v3 & 0xFF00000000) != 0) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t llvm::AArch64::getDefaultExtensions(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a2 != 7)
  {
    int v8 = 0;
    switch(a2)
    {
      case 4:
        uint64_t v6 = 0;
        if (*(_DWORD *)a1 == 1870230123) {
          goto LABEL_244;
        }
        LOBYTE(v9) = 1;
        uint64_t v10 = 0;
        goto LABEL_240;
      case 6:
        if (*(_DWORD *)a1 == 1802264934 && *(_WORD *)(a1 + 4) == 29295) {
          goto LABEL_224;
        }
        if (*(_DWORD *)a1 == 829846388 && *(_WORD *)(a1 + 4) == 12337)
        {
          uint64_t v26 = 254;
          uint64_t v6 = 136448;
          return v26 | v6;
        }
        if (*(_DWORD *)a1 != 1836212579 || *(_WORD *)(a1 + 4) != 27749) {
          return 0;
        }
        goto LABEL_246;
      case 8:
        switch(*(void *)a1)
        {
          case 0x37612D656C707061:
          case 0x38612D656C707061:
          case 0x39612D656C707061:
            uint64_t v6 = 0;
            uint64_t v26 = 29;
            return v26 | v6;
          case 0x316D2D656C707061:
            uint64_t v6 = 154880;
            goto LABEL_260;
          case 0x326D2D656C707061:
            uint64_t v6 = 1610874112;
            goto LABEL_260;
        }
        if (*(void *)a1 != 0x34732D656C707061 && *(void *)a1 != 0x35732D656C707061)
        {
          int v8 = 1;
          goto LABEL_195;
        }
        goto LABEL_255;
      case 9:
        uint64_t v6 = 1056000;
        if (*(void *)a1 == 0x782D786574726F63 && *(unsigned char *)(a1 + 8) == 49) {
          goto LABEL_250;
        }
        if (*(void *)a1 == 0x782D786574726F63 && *(unsigned char *)(a1 + 8) == 50)
        {
          uint64_t v6 = 0x868BA1F00;
          goto LABEL_252;
        }
        if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 48)
        {
LABEL_224:
          uint64_t v26 = 30;
          uint64_t v6 = 4096;
          return v26 | v6;
        }
        if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 49)
        {
LABEL_246:
          uint64_t v26 = 190;
          goto LABEL_254;
        }
        if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 50)
        {
LABEL_255:
          uint64_t v26 = 190;
          goto LABEL_256;
        }
        BOOL v19 = *(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 51;
        uint64_t v6 = 154880;
        if (v19) {
          goto LABEL_260;
        }
        if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 52) {
          goto LABEL_260;
        }
        uint64_t v6 = 1610874112;
        if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 53) {
          goto LABEL_260;
        }
        if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 54) {
          goto LABEL_260;
        }
        if (*(void *)a1 != 0x6D2D736F6E797865 || *(unsigned char *)(a1 + 8) != 51)
        {
          BOOL v24 = *(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 52;
          if (v24 || (*(void *)a1 == 0x6D2D736F6E797865 ? (BOOL v25 = *(unsigned char *)(a1 + 8) == 53) : (BOOL v25 = 0), v25))
          {
            uint64_t v26 = 190;
            uint64_t v6 = 5376;
            return v26 | v6;
          }
LABEL_194:
          int v8 = 0;
LABEL_195:
          if (a2 != 13
            || (*(void *)a1 == 0x787265646E756874 ? (BOOL v53 = *(void *)(a1 + 5) == 0x3031317433787265) : (BOOL v53 = 0),
                !v53))
          {
            if (!v8)
            {
              uint64_t v6 = 0;
              goto LABEL_206;
            }
            uint64_t v6 = 0;
            if (*(void *)a1 != 0x787265646E756874) {
              goto LABEL_206;
            }
            goto LABEL_244;
          }
          uint64_t v26 = 159;
LABEL_256:
          uint64_t v6 = 6400;
          return v26 | v6;
        }
        goto LABEL_243;
      case 10:
        BOOL v27 = *(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13363;
        if (v27
          || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v28 = *(unsigned __int16 *)(a1 + 8) == 13619) : (BOOL v28 = 0),
              v28
           || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v29 = *(unsigned __int16 *)(a1 + 8) == 13109) : (BOOL v29 = 0), v29)))
        {
          uint64_t v6 = 0;
          LOBYTE(v9) = 0;
          uint64_t v10 = 30;
          goto LABEL_240;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13621) {
          goto LABEL_257;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14133) {
          goto LABEL_243;
        }
        uint64_t v6 = 1056000;
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13622) {
          goto LABEL_260;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12855) {
          goto LABEL_243;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13111) {
          goto LABEL_243;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13623)
        {
LABEL_257:
          uint64_t v26 = 190;
          uint64_t v6 = 7424;
          return v26 | v6;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13879) {
          goto LABEL_260;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14135) {
          goto LABEL_260;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14391) {
          goto LABEL_250;
        }
        if (*(void *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 12856)
        {
          uint64_t v6 = 3284224;
          uint64_t v26 = 186;
          return v26 | v6;
        }
        if (*(void *)a1 != 0x782D786574726F63 || *(_WORD *)(a1 + 8) != 25393)
        {
          int v41 = 0;
          uint64_t v6 = 0;
          uint64_t v10 = 0;
          goto LABEL_175;
        }
        uint64_t v6 = 0x800101D00;
        goto LABEL_250;
      case 11:
        if (*(void *)a1 != 0x612D786574726F63 || *(void *)(a1 + 3) != 0x303135612D786574)
        {
          if (*(void *)a1 == 0x612D786574726F63 && *(void *)(a1 + 3) == 0x633837612D786574)
          {
            uint64_t v6 = 0x1800121D00;
          }
          else
          {
            if (*(void *)a1 == 0x612D786574726F63 && *(void *)(a1 + 3) == 0x303137612D786574)
            {
              uint64_t v6 = 0x1868AA1F00;
LABEL_252:
              uint64_t v26 = 154;
              return v26 | v6;
            }
            uint64_t v6 = 1056000;
            if (*(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 3) == 0x31652D6573726576)
            {
LABEL_260:
              uint64_t v26 = 190;
              return v26 | v6;
            }
            if (*(void *)a1 != 0x65737265766F656ELL || *(void *)(a1 + 3) != 0x316E2D6573726576)
            {
              if (*(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 3) == 0x326E2D6573726576)
              {
                uint64_t v26 = 190;
                uint64_t v6 = 1756897024;
                return v26 | v6;
              }
              if (*(void *)a1 != 0x65737265766F656ELL || *(void *)(a1 + 3) != 0x31762D6573726576)
              {
                uint64_t v6 = 0;
                uint64_t v10 = 0;
                int v41 = 1;
LABEL_175:
                int v9 = 1;
                if (!v41) {
                  goto LABEL_240;
                }
                goto LABEL_227;
              }
LABEL_225:
              uint64_t v6 = 1612062464;
            }
          }
LABEL_250:
          uint64_t v26 = 254;
          return v26 | v6;
        }
        int v9 = 0;
        uint64_t v6 = 0x868BA1F00;
        uint64_t v10 = 154;
LABEL_227:
        if (v9)
        {
          BOOL v56 = *(void *)a1 == 0x787265646E756874 && *(void *)(a1 + 3) == 0x383874787265646ELL;
          if (v56
            || (*(void *)a1 == 0x787265646E756874 ? (BOOL v57 = *(void *)(a1 + 3) == 0x313874787265646ELL) : (BOOL v57 = 0),
                v57
             || (*(void *)a1 == 0x787265646E756874 ? (BOOL v58 = *(void *)(a1 + 3) == 0x333874787265646ELL) : (BOOL v58 = 0),
                 v58)))
          {
LABEL_243:
            uint64_t v6 = 0;
LABEL_244:
            uint64_t v26 = 30;
            return v26 | v6;
          }
        }
LABEL_240:
        if (v9) {
          return 0;
        }
        return v10 | v6 & 0xFFFFFFF00;
      case 12:
        uint64_t v6 = 1056000;
        if (*(void *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869430) {
          goto LABEL_260;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869687) {
          goto LABEL_260;
        }
        if (*(void *)a1 != 0x787265646E756874 || *(_DWORD *)(a1 + 8) != 960066610)
        {
          uint64_t v6 = 0;
          goto LABEL_213;
        }
        uint64_t v26 = 31;
LABEL_254:
        uint64_t v6 = 4352;
        return v26 | v6;
      case 15:
        if (*(void *)a1 != 0x65737265766F656ELL || *(void *)(a1 + 7) != 0x6276743231352D65) {
          goto LABEL_194;
        }
        goto LABEL_225;
      default:
        goto LABEL_195;
    }
  }
  if (*(_DWORD *)a1 == 1701733735 && *(_DWORD *)(a1 + 3) == 1667854949) {
    return (uint64_t)(&off_1E684F9F8)[9 * a3 + 7];
  }
  int v4 = *(_DWORD *)a1 ^ 0x6C637963 | *(_DWORD *)(a1 + 3) ^ 0x656E6F6C;
  BOOL v5 = v4 != 0;
  uint64_t v6 = 29;
  if (!v4) {
    goto LABEL_214;
  }
  uint64_t v6 = 0;
  if (*(_DWORD *)a1 != 1752195443 || *(_DWORD *)(a1 + 3) != 1634888040)
  {
LABEL_206:
    if (a2 == 5)
    {
      if (*(_DWORD *)a1 != 1714697825 || *(unsigned char *)(a1 + 4) != 120) {
        return 0;
      }
      uint64_t v26 = 190;
      uint64_t v6 = 4864;
      return v26 | v6;
    }
LABEL_213:
    BOOL v5 = 1;
LABEL_214:
    if (a2 != 7 || !v5)
    {
      if (!v5) {
        return v6;
      }
      return 0;
    }
    if (*(_DWORD *)a1 != 1635151465 || *(_DWORD *)(a1 + 3) != 1684630625) {
      return 0;
    }
    uint64_t v6 = 0;
    uint64_t v26 = 1;
    return v26 | v6;
  }
  return 6622;
}

uint64_t llvm::AArch64::getCPUArchKind(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0x100000003;
  if (a2 == 7)
  {
    if (*(_DWORD *)a1 == 1701733735 && *(_DWORD *)(a1 + 3) == 1667854949) {
      return 1;
    }
    LOBYTE(v4) = 0;
    uint64_t v5 = 0x100000001;
    if (*(_DWORD *)a1 ^ 0x6C637963 | *(_DWORD *)(a1 + 3) ^ 0x656E6F6C) {
      uint64_t v5 = 0;
    }
LABEL_8:
    int v6 = 0;
    int v7 = 0;
    char v8 = v4;
LABEL_147:
    LODWORD(v4) = 0;
    goto LABEL_148;
  }
  switch(a2)
  {
    case 9:
      if (*(void *)a1 == 0x782D786574726F63 && *(unsigned char *)(a1 + 8) == 49)
      {
        int v12 = 0;
        BOOL v34 = 0;
        char v8 = 0;
        int v6 = 0;
        LOBYTE(v4) = 0;
        int v7 = 1;
        uint64_t v5 = 0x100000003;
        goto LABEL_153;
      }
      LODWORD(v4) = 0;
      BOOL v10 = *(void *)a1 == 0x782D786574726F63 && *(unsigned char *)(a1 + 8) == 50;
      int v7 = 1;
      if (!v10)
      {
        unint64_t v11 = 0;
        LOBYTE(v12) = 0;
        goto LABEL_146;
      }
      uint64_t v5 = 0x10000000ALL;
      int v6 = 0;
      char v8 = 0;
      goto LABEL_148;
    case 10:
      if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13363) {
        goto LABEL_113;
      }
      if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13619) {
        goto LABEL_113;
      }
      if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13109) {
        goto LABEL_113;
      }
      if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13621)
      {
        LODWORD(v4) = 0;
        LOBYTE(v12) = 0;
        int v7 = 0;
LABEL_145:
        unint64_t v11 = 0x100000003;
        goto LABEL_146;
      }
      if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14133) {
        goto LABEL_113;
      }
      unint64_t v11 = 0x100000003;
      uint64_t v19 = *(void *)a1 ^ 0x612D786574726F63 | *(unsigned __int16 *)(a1 + 8) ^ 0x3536;
      if (v19) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = 0x100000003;
      }
      if (!v19) {
        goto LABEL_72;
      }
      BOOL v21 = *(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12855;
      if (v21
        || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v22 = *(unsigned __int16 *)(a1 + 8) == 13111) : (BOOL v22 = 0), v22))
      {
LABEL_113:
        LODWORD(v4) = 0;
        LOBYTE(v12) = 0;
        int v7 = 0;
        unint64_t v11 = 0x100000001;
        goto LABEL_146;
      }
      if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13623) {
        goto LABEL_295;
      }
      if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13879) {
        goto LABEL_295;
      }
      if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14135) {
        goto LABEL_295;
      }
      if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14391) {
        goto LABEL_295;
      }
      BOOL v27 = *(void *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 12856;
      unint64_t v11 = v20;
      if (v27)
      {
        int v12 = 0;
        BOOL v34 = 0;
        int v7 = 0;
        char v8 = 0;
        int v6 = 0;
        LOBYTE(v4) = 0;
        uint64_t v5 = 0x10000000ELL;
        goto LABEL_153;
      }
LABEL_72:
      unint64_t v4 = HIDWORD(v11);
      if (HIDWORD(v11))
      {
LABEL_295:
        LODWORD(v4) = 0;
        LOBYTE(v12) = 0;
LABEL_296:
        int v7 = 0;
        goto LABEL_146;
      }
      LOBYTE(v12) = 0;
      int v7 = 0;
      int v6 = 0;
      char v8 = 0;
      BOOL v28 = *(void *)a1 == 0x782D786574726F63 && *(_WORD *)(a1 + 8) == 25393;
      uint64_t v5 = 0x100000003;
      if (!v28)
      {
LABEL_146:
        int v6 = v4;
        char v8 = v12;
        uint64_t v5 = v11;
        goto LABEL_147;
      }
LABEL_148:
      int v12 = 0;
      BOOL v34 = (v5 & 0x300000000) == 0;
      if (v4 && (v5 & 0x300000000) == 0)
      {
        if (*(void *)a1 == 0x38612D656C707061 || (int v12 = 1, *(void *)a1 == 0x39612D656C707061))
        {
          uint64_t v5 = 0x100000001;
          LOBYTE(v4) = 1;
LABEL_220:
          BOOL v51 = a2 == 6;
          goto LABEL_221;
        }
        BOOL v34 = 1;
      }
LABEL_153:
      int v40 = v7 & v34;
      if (v40 == 1)
      {
        if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 48)
        {
LABEL_210:
          uint64_t v5 = 0x100000001;
          goto LABEL_220;
        }
        if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 49)
        {
          uint64_t v5 = 0x100000003;
          goto LABEL_220;
        }
        if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 50)
        {
          uint64_t v5 = 0x100000004;
          goto LABEL_220;
        }
        if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 51)
        {
          uint64_t v5 = 0x100000005;
          goto LABEL_220;
        }
        if (*(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 52) {
          goto LABEL_211;
        }
        BOOL v46 = *(void *)a1 == 0x31612D656C707061 && *(unsigned char *)(a1 + 8) == 53;
        if (v46 || (*(void *)a1 == 0x31612D656C707061 ? (BOOL v47 = *(unsigned char *)(a1 + 8) == 54) : (BOOL v47 = 0), v47))
        {
          uint64_t v5 = 0x100000007;
          goto LABEL_220;
        }
      }
      if (!v12) {
        goto LABEL_187;
      }
      switch(*(void *)a1)
      {
        case 0x316D2D656C707061:
LABEL_211:
          uint64_t v5 = 0x100000006;
          goto LABEL_220;
        case 0x326D2D656C707061:
          uint64_t v5 = 0x100000007;
LABEL_217:
          BOOL v51 = a2 == 6;
          LOBYTE(v4) = 1;
          goto LABEL_221;
        case 0x34732D656C707061:
          uint64_t v5 = 0x100000004;
          goto LABEL_217;
        case 0x35732D656C707061:
          uint64_t v5 = 0x100000004;
          goto LABEL_220;
      }
LABEL_187:
      if (!v40) {
        goto LABEL_200;
      }
      if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 51) {
        goto LABEL_210;
      }
      if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 52) {
        goto LABEL_291;
      }
      if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 53) {
        goto LABEL_291;
      }
LABEL_200:
      BOOL v51 = a2 == 6;
      if (a2 == 6 && v34)
      {
        if (*(_DWORD *)a1 != 1802264934 || *(_WORD *)(a1 + 4) != 29295)
        {
          BOOL v51 = 1;
          goto LABEL_232;
        }
LABEL_287:
        uint64_t v2 = 0x100000001;
        goto LABEL_291;
      }
LABEL_221:
      uint64_t v54 = v5 & 0x100000000;
      if (a2 != 7 || v54)
      {
        if (a2 != 4 || v54 || *(_DWORD *)a1 != 1870230123) {
          goto LABEL_232;
        }
        goto LABEL_287;
      }
      if (*(_DWORD *)a1 == 1752195443 && *(_DWORD *)(a1 + 3) == 1634888040)
      {
LABEL_288:
        uint64_t v2 = 0x100000004;
        goto LABEL_291;
      }
LABEL_232:
      uint64_t v56 = v5 & 0x100000000;
      if (!v6
        || v56
        || (*(void *)a1 == 0x787265646E756874 ? (BOOL v57 = *(_DWORD *)(a1 + 8) == 960066610) : (BOOL v57 = 0), !v57))
      {
        if (a2 != 13
          || v56
          || (*(void *)a1 == 0x787265646E756874 ? (BOOL v58 = *(void *)(a1 + 5) == 0x3031317433787265) : (BOOL v58 = 0),
              !v58))
        {
          char v59 = v4 ^ 1;
          if (v56) {
            char v59 = 1;
          }
          if ((v59 & 1) != 0 || *(void *)a1 != 0x787265646E756874)
          {
            char v60 = v8 ^ 1;
            if (v56) {
              char v60 = 1;
            }
            if ((v60 & 1) != 0
              || (*(void *)a1 == 0x787265646E756874
                ? (BOOL v61 = *(void *)(a1 + 3) == 0x383874787265646ELL)
                : (BOOL v61 = 0),
                  !v61
               && (*(void *)a1 == 0x787265646E756874
                 ? (BOOL v62 = *(void *)(a1 + 3) == 0x313874787265646ELL)
                 : (BOOL v62 = 0),
                   !v62
                && (*(void *)a1 == 0x787265646E756874
                  ? (BOOL v63 = *(void *)(a1 + 3) == 0x333874787265646ELL)
                  : (BOOL v63 = 0),
                    !v63))))
            {
              if (v56) {
                BOOL v64 = 0;
              }
              else {
                BOOL v64 = v51;
              }
              if (!v64
                || (*(_DWORD *)a1 == 829846388 ? (BOOL v65 = *(unsigned __int16 *)(a1 + 4) == 12337) : (BOOL v65 = 0), !v65))
              {
                if (a2 != 5
                  || v56
                  || (*(_DWORD *)a1 == 1714697825 ? (BOOL v66 = *(unsigned char *)(a1 + 4) == 120) : (BOOL v66 = 0), !v66))
                {
                  if (!v64
                    || (*(_DWORD *)a1 == 1836212579 ? (BOOL v67 = *(unsigned __int16 *)(a1 + 4) == 27749) : (BOOL v67 = 0), !v67))
                  {
                    if (a2 != 7 || v56)
                    {
                      uint64_t v2 = v5;
                    }
                    else
                    {
                      uint64_t v2 = 0x100000000;
                      if (*(_DWORD *)a1 ^ 0x61766E69 | *(_DWORD *)(a1 + 3) ^ 0x64696C61) {
                        uint64_t v2 = v5;
                      }
                    }
                  }
                }
              }
              goto LABEL_291;
            }
          }
          goto LABEL_287;
        }
        goto LABEL_288;
      }
      uint64_t v2 = 0x100000002;
LABEL_291:
      if ((v2 & 0xFF00000000) != 0) {
        return v2;
      }
      else {
        return 0;
      }
    case 11:
      BOOL v29 = *(void *)a1 == 0x612D786574726F63 && *(void *)(a1 + 3) == 0x303135612D786574;
      LODWORD(v4) = !v29;
      if (v29)
      {
        unint64_t v11 = 0x10000000ALL;
      }
      else
      {
        if (*(void *)a1 == 0x612D786574726F63 && *(void *)(a1 + 3) == 0x633837612D786574)
        {
          LODWORD(v4) = 0;
          int v7 = 0;
          LOBYTE(v12) = 1;
          goto LABEL_145;
        }
        if (*(void *)a1 == 0x612D786574726F63 && *(void *)(a1 + 3) == 0x303137612D786574)
        {
          LODWORD(v4) = 0;
          int v7 = 0;
          unint64_t v11 = 0x10000000ALL;
          goto LABEL_143;
        }
        unint64_t v11 = 0;
      }
      if (v4)
      {
        BOOL v36 = *(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 3) == 0x31652D6573726576;
        if (v36
          || (*(void *)a1 == 0x65737265766F656ELL ? (BOOL v37 = *(void *)(a1 + 3) == 0x316E2D6573726576) : (BOOL v37 = 0),
              v37))
        {
          LODWORD(v4) = 0;
          int v6 = 0;
          int v7 = 0;
          char v8 = 1;
          uint64_t v5 = 0x100000003;
          goto LABEL_148;
        }
        if (*(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 3) == 0x326E2D6573726576)
        {
          LODWORD(v4) = 0;
          int v6 = 0;
          int v7 = 0;
          uint64_t v5 = 0x100000006;
          char v8 = 1;
          goto LABEL_148;
        }
        BOOL v39 = *(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 3) == 0x31762D6573726576;
        LOBYTE(v12) = 1;
        if (!v39)
        {
          LODWORD(v4) = 0;
          goto LABEL_296;
        }
        uint64_t v5 = 0x100000005;
        LOBYTE(v4) = 1;
        goto LABEL_8;
      }
      int v7 = 0;
LABEL_143:
      LOBYTE(v12) = 1;
      goto LABEL_146;
    case 12:
      int v12 = 0;
      if (*(void *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869430)
      {
        int v7 = 0;
        LODWORD(v4) = 1;
        goto LABEL_145;
      }
      BOOL v33 = *(void *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869687;
      BOOL v34 = 1;
      if (!v33)
      {
        uint64_t v5 = 0;
        int v7 = 0;
        char v8 = 0;
        int v6 = 1;
        LOBYTE(v4) = 0;
        goto LABEL_153;
      }
      unint64_t v11 = 0x100000003;
      LODWORD(v4) = 1;
      int v7 = 0;
      goto LABEL_146;
    case 15:
      LODWORD(v4) = 0;
      if (*(void *)a1 != 0x65737265766F656ELL || *(void *)(a1 + 7) != 0x6276743231352D65)
      {
        uint64_t v5 = 0;
        int v6 = 0;
        char v8 = 0;
        int v7 = 0;
        goto LABEL_148;
      }
      uint64_t v5 = 0x100000005;
      goto LABEL_8;
    default:
      LODWORD(v4) = a2 == 8;
      int v6 = 0;
      if (a2 != 8)
      {
        char v8 = 0;
        int v7 = 0;
        uint64_t v5 = 0;
        goto LABEL_148;
      }
      LODWORD(v4) = 1;
      if (*(void *)a1 != 0x37612D656C707061)
      {
        uint64_t v5 = 0;
        char v8 = 0;
        int v7 = 0;
        goto LABEL_148;
      }
      uint64_t v5 = 0x100000001;
      char v8 = 0;
      goto LABEL_220;
  }
}

BOOL llvm::AArch64::getExtensionFeatures(uint64_t a1, char **a2)
{
  if (a1)
  {
    if ((a1 & 2) != 0)
    {
      uint64_t v5 = a2[1];
      unint64_t v4 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v4)
      {
        int v7 = *a2;
        uint64_t v8 = (v5 - *a2) >> 4;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v10 = v4 - (void)v7;
        if (v10 >> 3 > v9) {
          unint64_t v9 = v10 >> 3;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          if (v11 >> 60) {
            goto LABEL_821;
          }
          int v12 = (char *)operator new(16 * v11);
        }
        else
        {
          int v12 = 0;
        }
        uint64_t v13 = &v12[16 * v8];
        *(void *)uint64_t v13 = "+crc";
        *((void *)v13 + 1) = 4;
        int v6 = v13 + 16;
        if (v5 != v7)
        {
          do
          {
            *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
            v13 -= 16;
            v5 -= 16;
          }
          while (v5 != v7);
          uint64_t v5 = *a2;
        }
        *a2 = v13;
        a2[1] = v6;
        a2[2] = &v12[16 * v11];
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        *(void *)uint64_t v5 = "+crc";
        *((void *)v5 + 1) = 4;
        int v6 = v5 + 16;
      }
      a2[1] = v6;
    }
    if ((a1 & 0x100) != 0)
    {
      long long v15 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v14)
      {
        unint64_t v17 = *a2;
        uint64_t v18 = (v15 - *a2) >> 4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v20 = v14 - (void)v17;
        if (v20 >> 3 > v19) {
          unint64_t v19 = v20 >> 3;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 60) {
            goto LABEL_821;
          }
          BOOL v22 = (char *)operator new(16 * v21);
        }
        else
        {
          BOOL v22 = 0;
        }
        BOOL v23 = &v22[16 * v18];
        *(void *)BOOL v23 = "+lse";
        *((void *)v23 + 1) = 4;
        long long v16 = v23 + 16;
        if (v15 != v17)
        {
          do
          {
            *((_OWORD *)v23 - 1) = *((_OWORD *)v15 - 1);
            v23 -= 16;
            v15 -= 16;
          }
          while (v15 != v17);
          long long v15 = *a2;
        }
        *a2 = v23;
        a2[1] = v16;
        a2[2] = &v22[16 * v21];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(void *)long long v15 = "+lse";
        *((void *)v15 + 1) = 4;
        long long v16 = v15 + 16;
      }
      a2[1] = v16;
    }
    if ((a1 & 0x1000) != 0)
    {
      BOOL v25 = a2[1];
      unint64_t v24 = (unint64_t)a2[2];
      if ((unint64_t)v25 >= v24)
      {
        BOOL v27 = *a2;
        uint64_t v28 = (v25 - *a2) >> 4;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v30 = v24 - (void)v27;
        if (v30 >> 3 > v29) {
          unint64_t v29 = v30 >> 3;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          if (v31 >> 60) {
            goto LABEL_821;
          }
          char v32 = (char *)operator new(16 * v31);
        }
        else
        {
          char v32 = 0;
        }
        BOOL v33 = &v32[16 * v28];
        *(void *)BOOL v33 = "+rdm";
        *((void *)v33 + 1) = 4;
        uint64_t v26 = v33 + 16;
        if (v25 != v27)
        {
          do
          {
            *((_OWORD *)v33 - 1) = *((_OWORD *)v25 - 1);
            v33 -= 16;
            v25 -= 16;
          }
          while (v25 != v27);
          BOOL v25 = *a2;
        }
        *a2 = v33;
        a2[1] = v26;
        a2[2] = &v32[16 * v31];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(void *)BOOL v25 = "+rdm";
        *((void *)v25 + 1) = 4;
        uint64_t v26 = v25 + 16;
      }
      a2[1] = v26;
    }
    if ((a1 & 4) != 0)
    {
      long long v35 = a2[1];
      unint64_t v34 = (unint64_t)a2[2];
      if ((unint64_t)v35 >= v34)
      {
        BOOL v37 = *a2;
        uint64_t v38 = (v35 - *a2) >> 4;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 3 > v39) {
          unint64_t v39 = v40 >> 3;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          if (v41 >> 60) {
            goto LABEL_821;
          }
          unsigned int v42 = (char *)operator new(16 * v41);
        }
        else
        {
          unsigned int v42 = 0;
        }
        long long v43 = &v42[16 * v38];
        *(void *)long long v43 = "+crypto";
        *((void *)v43 + 1) = 7;
        BOOL v36 = v43 + 16;
        if (v35 != v37)
        {
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v35 - 1);
            v43 -= 16;
            v35 -= 16;
          }
          while (v35 != v37);
          long long v35 = *a2;
        }
        *a2 = v43;
        a2[1] = v36;
        a2[2] = &v42[16 * v41];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(void *)long long v35 = "+crypto";
        *((void *)v35 + 1) = 7;
        BOOL v36 = v35 + 16;
      }
      a2[1] = v36;
    }
    if ((a1 & 0x2000) != 0)
    {
      uint64_t v45 = a2[1];
      unint64_t v44 = (unint64_t)a2[2];
      if ((unint64_t)v45 >= v44)
      {
        BOOL v47 = *a2;
        uint64_t v48 = (v45 - *a2) >> 4;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v50 = v44 - (void)v47;
        if (v50 >> 3 > v49) {
          unint64_t v49 = v50 >> 3;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51)
        {
          if (v51 >> 60) {
            goto LABEL_821;
          }
          uint64_t v52 = (char *)operator new(16 * v51);
        }
        else
        {
          uint64_t v52 = 0;
        }
        BOOL v53 = &v52[16 * v48];
        *(void *)BOOL v53 = "+sm4";
        *((void *)v53 + 1) = 4;
        BOOL v46 = v53 + 16;
        if (v45 != v47)
        {
          do
          {
            *((_OWORD *)v53 - 1) = *((_OWORD *)v45 - 1);
            v53 -= 16;
            v45 -= 16;
          }
          while (v45 != v47);
          uint64_t v45 = *a2;
        }
        *a2 = v53;
        a2[1] = v46;
        a2[2] = &v52[16 * v51];
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *(void *)uint64_t v45 = "+sm4";
        *((void *)v45 + 1) = 4;
        BOOL v46 = v45 + 16;
      }
      a2[1] = v46;
    }
    if ((a1 & 0x4000) != 0)
    {
      uint64_t v55 = a2[1];
      unint64_t v54 = (unint64_t)a2[2];
      if ((unint64_t)v55 >= v54)
      {
        BOOL v57 = *a2;
        uint64_t v58 = (v55 - *a2) >> 4;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v60 = v54 - (void)v57;
        if (v60 >> 3 > v59) {
          unint64_t v59 = v60 >> 3;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          if (v61 >> 60) {
            goto LABEL_821;
          }
          BOOL v62 = (char *)operator new(16 * v61);
        }
        else
        {
          BOOL v62 = 0;
        }
        BOOL v63 = &v62[16 * v58];
        *(void *)BOOL v63 = "+sha3";
        *((void *)v63 + 1) = 5;
        uint64_t v56 = v63 + 16;
        if (v55 != v57)
        {
          do
          {
            *((_OWORD *)v63 - 1) = *((_OWORD *)v55 - 1);
            v63 -= 16;
            v55 -= 16;
          }
          while (v55 != v57);
          uint64_t v55 = *a2;
        }
        *a2 = v63;
        a2[1] = v56;
        a2[2] = &v62[16 * v61];
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        *(void *)uint64_t v55 = "+sha3";
        *((void *)v55 + 1) = 5;
        uint64_t v56 = v55 + 16;
      }
      a2[1] = v56;
    }
    if ((a1 & 0x8000) != 0)
    {
      BOOL v65 = a2[1];
      unint64_t v64 = (unint64_t)a2[2];
      if ((unint64_t)v65 >= v64)
      {
        BOOL v67 = *a2;
        uint64_t v68 = (v65 - *a2) >> 4;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v70 = v64 - (void)v67;
        if (v70 >> 3 > v69) {
          unint64_t v69 = v70 >> 3;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v71 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v69;
        }
        if (v71)
        {
          if (v71 >> 60) {
            goto LABEL_821;
          }
          int v72 = (char *)operator new(16 * v71);
        }
        else
        {
          int v72 = 0;
        }
        int v73 = &v72[16 * v68];
        *(void *)int v73 = "+sha2";
        *((void *)v73 + 1) = 5;
        BOOL v66 = v73 + 16;
        if (v65 != v67)
        {
          do
          {
            *((_OWORD *)v73 - 1) = *((_OWORD *)v65 - 1);
            v73 -= 16;
            v65 -= 16;
          }
          while (v65 != v67);
          BOOL v65 = *a2;
        }
        *a2 = v73;
        a2[1] = v66;
        a2[2] = &v72[16 * v71];
        if (v65) {
          operator delete(v65);
        }
      }
      else
      {
        *(void *)BOOL v65 = "+sha2";
        *((void *)v65 + 1) = 5;
        BOOL v66 = v65 + 16;
      }
      a2[1] = v66;
    }
    if ((a1 & 0x10000) != 0)
    {
      int v75 = a2[1];
      unint64_t v74 = (unint64_t)a2[2];
      if ((unint64_t)v75 >= v74)
      {
        uint64_t v77 = *a2;
        uint64_t v78 = (v75 - *a2) >> 4;
        unint64_t v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v80 = v74 - (void)v77;
        if (v80 >> 3 > v79) {
          unint64_t v79 = v80 >> 3;
        }
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v81 = v79;
        }
        if (v81)
        {
          if (v81 >> 60) {
            goto LABEL_821;
          }
          unsigned int v82 = (char *)operator new(16 * v81);
        }
        else
        {
          unsigned int v82 = 0;
        }
        uint64_t v83 = &v82[16 * v78];
        *(void *)uint64_t v83 = "+aes";
        *((void *)v83 + 1) = 4;
        int64_t v76 = v83 + 16;
        if (v75 != v77)
        {
          do
          {
            *((_OWORD *)v83 - 1) = *((_OWORD *)v75 - 1);
            v83 -= 16;
            v75 -= 16;
          }
          while (v75 != v77);
          int v75 = *a2;
        }
        *a2 = v83;
        a2[1] = v76;
        a2[2] = &v82[16 * v81];
        if (v75) {
          operator delete(v75);
        }
      }
      else
      {
        *(void *)int v75 = "+aes";
        *((void *)v75 + 1) = 4;
        int64_t v76 = v75 + 16;
      }
      a2[1] = v76;
    }
    if ((a1 & 0x400) != 0)
    {
      unsigned int v85 = a2[1];
      unint64_t v84 = (unint64_t)a2[2];
      if ((unint64_t)v85 >= v84)
      {
        uint64_t v87 = *a2;
        uint64_t v88 = (v85 - *a2) >> 4;
        unint64_t v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v90 = v84 - (void)v87;
        if (v90 >> 3 > v89) {
          unint64_t v89 = v90 >> 3;
        }
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v91 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v91 = v89;
        }
        if (v91)
        {
          if (v91 >> 60) {
            goto LABEL_821;
          }
          uint64_t v92 = (char *)operator new(16 * v91);
        }
        else
        {
          uint64_t v92 = 0;
        }
        unsigned int v93 = &v92[16 * v88];
        *(void *)unsigned int v93 = "+dotprod";
        *((void *)v93 + 1) = 8;
        unsigned int v86 = v93 + 16;
        if (v85 != v87)
        {
          do
          {
            *((_OWORD *)v93 - 1) = *((_OWORD *)v85 - 1);
            v93 -= 16;
            v85 -= 16;
          }
          while (v85 != v87);
          unsigned int v85 = *a2;
        }
        *a2 = v93;
        a2[1] = v86;
        a2[2] = &v92[16 * v91];
        if (v85) {
          operator delete(v85);
        }
      }
      else
      {
        *(void *)unsigned int v85 = "+dotprod";
        *((void *)v85 + 1) = 8;
        unsigned int v86 = v85 + 16;
      }
      a2[1] = v86;
    }
    if ((a1 & 8) != 0)
    {
      uint64_t v95 = a2[1];
      unint64_t v94 = (unint64_t)a2[2];
      if ((unint64_t)v95 >= v94)
      {
        uint64_t v97 = *a2;
        uint64_t v98 = (v95 - *a2) >> 4;
        unint64_t v99 = v98 + 1;
        if ((unint64_t)(v98 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v100 = v94 - (void)v97;
        if (v100 >> 3 > v99) {
          unint64_t v99 = v100 >> 3;
        }
        if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v101 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v101 = v99;
        }
        if (v101)
        {
          if (v101 >> 60) {
            goto LABEL_821;
          }
          unsigned int v102 = (char *)operator new(16 * v101);
        }
        else
        {
          unsigned int v102 = 0;
        }
        uint64_t v103 = &v102[16 * v98];
        *(void *)uint64_t v103 = "+fp-armv8";
        *((void *)v103 + 1) = 9;
        unsigned int v96 = v103 + 16;
        if (v95 != v97)
        {
          do
          {
            *((_OWORD *)v103 - 1) = *((_OWORD *)v95 - 1);
            v103 -= 16;
            v95 -= 16;
          }
          while (v95 != v97);
          uint64_t v95 = *a2;
        }
        *a2 = v103;
        a2[1] = v96;
        a2[2] = &v102[16 * v101];
        if (v95) {
          operator delete(v95);
        }
      }
      else
      {
        *(void *)uint64_t v95 = "+fp-armv8";
        *((void *)v95 + 1) = 9;
        unsigned int v96 = v95 + 16;
      }
      a2[1] = v96;
    }
    if ((a1 & 0x10) != 0)
    {
      uint64_t v105 = a2[1];
      unint64_t v104 = (unint64_t)a2[2];
      if ((unint64_t)v105 >= v104)
      {
        uint64_t v107 = *a2;
        uint64_t v108 = (v105 - *a2) >> 4;
        unint64_t v109 = v108 + 1;
        if ((unint64_t)(v108 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v110 = v104 - (void)v107;
        if (v110 >> 3 > v109) {
          unint64_t v109 = v110 >> 3;
        }
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v111 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v111 = v109;
        }
        if (v111)
        {
          if (v111 >> 60) {
            goto LABEL_821;
          }
          uint64_t v112 = (char *)operator new(16 * v111);
        }
        else
        {
          uint64_t v112 = 0;
        }
        uint64_t v113 = &v112[16 * v108];
        *(void *)uint64_t v113 = "+neon";
        *((void *)v113 + 1) = 5;
        unsigned int v106 = v113 + 16;
        if (v105 != v107)
        {
          do
          {
            *((_OWORD *)v113 - 1) = *((_OWORD *)v105 - 1);
            v113 -= 16;
            v105 -= 16;
          }
          while (v105 != v107);
          uint64_t v105 = *a2;
        }
        *a2 = v113;
        a2[1] = v106;
        a2[2] = &v112[16 * v111];
        if (v105) {
          operator delete(v105);
        }
      }
      else
      {
        *(void *)uint64_t v105 = "+neon";
        *((void *)v105 + 1) = 5;
        unsigned int v106 = v105 + 16;
      }
      a2[1] = v106;
    }
    if ((a1 & 0x20) != 0)
    {
      uint64_t v115 = a2[1];
      unint64_t v114 = (unint64_t)a2[2];
      if ((unint64_t)v115 >= v114)
      {
        int v117 = *a2;
        uint64_t v118 = (v115 - *a2) >> 4;
        unint64_t v119 = v118 + 1;
        if ((unint64_t)(v118 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v120 = v114 - (void)v117;
        if (v120 >> 3 > v119) {
          unint64_t v119 = v120 >> 3;
        }
        if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v121 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v121 = v119;
        }
        if (v121)
        {
          if (v121 >> 60) {
            goto LABEL_821;
          }
          uint64_t v122 = (char *)operator new(16 * v121);
        }
        else
        {
          uint64_t v122 = 0;
        }
        __int16 v123 = &v122[16 * v118];
        *(void *)__int16 v123 = "+fullfp16";
        *((void *)v123 + 1) = 9;
        uint64_t v116 = v123 + 16;
        if (v115 != v117)
        {
          do
          {
            *((_OWORD *)v123 - 1) = *((_OWORD *)v115 - 1);
            v123 -= 16;
            v115 -= 16;
          }
          while (v115 != v117);
          uint64_t v115 = *a2;
        }
        *a2 = v123;
        a2[1] = v116;
        a2[2] = &v122[16 * v121];
        if (v115) {
          operator delete(v115);
        }
      }
      else
      {
        *(void *)uint64_t v115 = "+fullfp16";
        *((void *)v115 + 1) = 9;
        uint64_t v116 = v115 + 16;
      }
      a2[1] = v116;
    }
    if ((a1 & 0x20000) != 0)
    {
      uint64_t v125 = a2[1];
      unint64_t v124 = (unint64_t)a2[2];
      if ((unint64_t)v125 >= v124)
      {
        uint64_t v127 = *a2;
        uint64_t v128 = (v125 - *a2) >> 4;
        unint64_t v129 = v128 + 1;
        if ((unint64_t)(v128 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v130 = v124 - (void)v127;
        if (v130 >> 3 > v129) {
          unint64_t v129 = v130 >> 3;
        }
        if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v131 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v131 = v129;
        }
        if (v131)
        {
          if (v131 >> 60) {
            goto LABEL_821;
          }
          uint64_t v132 = (char *)operator new(16 * v131);
        }
        else
        {
          uint64_t v132 = 0;
        }
        unint64_t v133 = &v132[16 * v128];
        *(void *)unint64_t v133 = "+fp16fml";
        *((void *)v133 + 1) = 8;
        uint64_t v126 = v133 + 16;
        if (v125 != v127)
        {
          do
          {
            *((_OWORD *)v133 - 1) = *((_OWORD *)v125 - 1);
            v133 -= 16;
            v125 -= 16;
          }
          while (v125 != v127);
          uint64_t v125 = *a2;
        }
        *a2 = v133;
        a2[1] = v126;
        a2[2] = &v132[16 * v131];
        if (v125) {
          operator delete(v125);
        }
      }
      else
      {
        *(void *)uint64_t v125 = "+fp16fml";
        *((void *)v125 + 1) = 8;
        uint64_t v126 = v125 + 16;
      }
      a2[1] = v126;
    }
    if ((a1 & 0x40) != 0)
    {
      unsigned int v135 = a2[1];
      unint64_t v134 = (unint64_t)a2[2];
      if ((unint64_t)v135 >= v134)
      {
        uint64_t v137 = *a2;
        uint64_t v138 = (v135 - *a2) >> 4;
        unint64_t v139 = v138 + 1;
        if ((unint64_t)(v138 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v140 = v134 - (void)v137;
        if (v140 >> 3 > v139) {
          unint64_t v139 = v140 >> 3;
        }
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v141 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v141 = v139;
        }
        if (v141)
        {
          if (v141 >> 60) {
            goto LABEL_821;
          }
          uint64_t v142 = (char *)operator new(16 * v141);
        }
        else
        {
          uint64_t v142 = 0;
        }
        int v143 = &v142[16 * v138];
        *(void *)int v143 = "+spe";
        *((void *)v143 + 1) = 4;
        int v136 = v143 + 16;
        if (v135 != v137)
        {
          do
          {
            *((_OWORD *)v143 - 1) = *((_OWORD *)v135 - 1);
            v143 -= 16;
            v135 -= 16;
          }
          while (v135 != v137);
          unsigned int v135 = *a2;
        }
        *a2 = v143;
        a2[1] = v136;
        a2[2] = &v142[16 * v141];
        if (v135) {
          operator delete(v135);
        }
      }
      else
      {
        *(void *)unsigned int v135 = "+spe";
        *((void *)v135 + 1) = 4;
        int v136 = v135 + 16;
      }
      a2[1] = v136;
    }
    if ((a1 & 0x80) != 0)
    {
      uint64_t v145 = a2[1];
      unint64_t v144 = (unint64_t)a2[2];
      if ((unint64_t)v145 >= v144)
      {
        int v147 = *a2;
        uint64_t v148 = (v145 - *a2) >> 4;
        unint64_t v149 = v148 + 1;
        if ((unint64_t)(v148 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v150 = v144 - (void)v147;
        if (v150 >> 3 > v149) {
          unint64_t v149 = v150 >> 3;
        }
        if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v151 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v151 = v149;
        }
        if (v151)
        {
          if (v151 >> 60) {
            goto LABEL_821;
          }
          int v152 = (char *)operator new(16 * v151);
        }
        else
        {
          int v152 = 0;
        }
        uint64_t v153 = &v152[16 * v148];
        *(void *)uint64_t v153 = "+ras";
        *((void *)v153 + 1) = 4;
        uint64_t v146 = v153 + 16;
        if (v145 != v147)
        {
          do
          {
            *((_OWORD *)v153 - 1) = *((_OWORD *)v145 - 1);
            v153 -= 16;
            v145 -= 16;
          }
          while (v145 != v147);
          uint64_t v145 = *a2;
        }
        *a2 = v153;
        a2[1] = v146;
        a2[2] = &v152[16 * v151];
        if (v145) {
          operator delete(v145);
        }
      }
      else
      {
        *(void *)uint64_t v145 = "+ras";
        *((void *)v145 + 1) = 4;
        uint64_t v146 = v145 + 16;
      }
      a2[1] = v146;
    }
    if ((a1 & 0x200) != 0)
    {
      uint64_t v155 = a2[1];
      unint64_t v154 = (unint64_t)a2[2];
      if ((unint64_t)v155 >= v154)
      {
        uint64_t v157 = *a2;
        uint64_t v158 = (v155 - *a2) >> 4;
        unint64_t v159 = v158 + 1;
        if ((unint64_t)(v158 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v160 = v154 - (void)v157;
        if (v160 >> 3 > v159) {
          unint64_t v159 = v160 >> 3;
        }
        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v161 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v161 = v159;
        }
        if (v161)
        {
          if (v161 >> 60) {
            goto LABEL_821;
          }
          uint64_t v162 = (char *)operator new(16 * v161);
        }
        else
        {
          uint64_t v162 = 0;
        }
        long long v163 = &v162[16 * v158];
        *(void *)long long v163 = "+sve";
        *((void *)v163 + 1) = 4;
        long long v156 = v163 + 16;
        if (v155 != v157)
        {
          do
          {
            *((_OWORD *)v163 - 1) = *((_OWORD *)v155 - 1);
            v163 -= 16;
            v155 -= 16;
          }
          while (v155 != v157);
          uint64_t v155 = *a2;
        }
        *a2 = v163;
        a2[1] = v156;
        a2[2] = &v162[16 * v161];
        if (v155) {
          operator delete(v155);
        }
      }
      else
      {
        *(void *)uint64_t v155 = "+sve";
        *((void *)v155 + 1) = 4;
        long long v156 = v155 + 16;
      }
      a2[1] = v156;
    }
    if ((a1 & 0x800000) != 0)
    {
      long long v165 = a2[1];
      unint64_t v164 = (unint64_t)a2[2];
      if ((unint64_t)v165 >= v164)
      {
        char v167 = *a2;
        uint64_t v168 = (v165 - *a2) >> 4;
        unint64_t v169 = v168 + 1;
        if ((unint64_t)(v168 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v170 = v164 - (void)v167;
        if (v170 >> 3 > v169) {
          unint64_t v169 = v170 >> 3;
        }
        if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v171 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v171 = v169;
        }
        if (v171)
        {
          if (v171 >> 60) {
            goto LABEL_821;
          }
          int v172 = (char *)operator new(16 * v171);
        }
        else
        {
          int v172 = 0;
        }
        long long v173 = &v172[16 * v168];
        *(void *)long long v173 = "+sve2";
        *((void *)v173 + 1) = 5;
        int v166 = v173 + 16;
        if (v165 != v167)
        {
          do
          {
            *((_OWORD *)v173 - 1) = *((_OWORD *)v165 - 1);
            v173 -= 16;
            v165 -= 16;
          }
          while (v165 != v167);
          long long v165 = *a2;
        }
        *a2 = v173;
        a2[1] = v166;
        a2[2] = &v172[16 * v171];
        if (v165) {
          operator delete(v165);
        }
      }
      else
      {
        *(void *)long long v165 = "+sve2";
        *((void *)v165 + 1) = 5;
        int v166 = v165 + 16;
      }
      a2[1] = v166;
    }
    if ((a1 & 0x1000000) != 0)
    {
      long long v175 = a2[1];
      unint64_t v174 = (unint64_t)a2[2];
      if ((unint64_t)v175 >= v174)
      {
        uint64_t v177 = *a2;
        uint64_t v178 = (v175 - *a2) >> 4;
        unint64_t v179 = v178 + 1;
        if ((unint64_t)(v178 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v180 = v174 - (void)v177;
        if (v180 >> 3 > v179) {
          unint64_t v179 = v180 >> 3;
        }
        if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v181 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v179;
        }
        if (v181)
        {
          if (v181 >> 60) {
            goto LABEL_821;
          }
          uint64_t v182 = (char *)operator new(16 * v181);
        }
        else
        {
          uint64_t v182 = 0;
        }
        uint64_t v183 = &v182[16 * v178];
        *(void *)uint64_t v183 = "+sve2-aes";
        *((void *)v183 + 1) = 9;
        int v176 = v183 + 16;
        if (v175 != v177)
        {
          do
          {
            *((_OWORD *)v183 - 1) = *((_OWORD *)v175 - 1);
            v183 -= 16;
            v175 -= 16;
          }
          while (v175 != v177);
          long long v175 = *a2;
        }
        *a2 = v183;
        a2[1] = v176;
        a2[2] = &v182[16 * v181];
        if (v175) {
          operator delete(v175);
        }
      }
      else
      {
        *(void *)long long v175 = "+sve2-aes";
        *((void *)v175 + 1) = 9;
        int v176 = v175 + 16;
      }
      a2[1] = v176;
    }
    if ((a1 & 0x2000000) != 0)
    {
      uint64_t v185 = a2[1];
      unint64_t v184 = (unint64_t)a2[2];
      if ((unint64_t)v185 >= v184)
      {
        uint64_t v187 = *a2;
        uint64_t v188 = (v185 - *a2) >> 4;
        unint64_t v189 = v188 + 1;
        if ((unint64_t)(v188 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v190 = v184 - (void)v187;
        if (v190 >> 3 > v189) {
          unint64_t v189 = v190 >> 3;
        }
        if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v191 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v191 = v189;
        }
        if (v191)
        {
          if (v191 >> 60) {
            goto LABEL_821;
          }
          unsigned int v192 = (char *)operator new(16 * v191);
        }
        else
        {
          unsigned int v192 = 0;
        }
        uint64_t v193 = &v192[16 * v188];
        *(void *)uint64_t v193 = "+sve2-sm4";
        *((void *)v193 + 1) = 9;
        uint64_t v186 = v193 + 16;
        if (v185 != v187)
        {
          do
          {
            *((_OWORD *)v193 - 1) = *((_OWORD *)v185 - 1);
            v193 -= 16;
            v185 -= 16;
          }
          while (v185 != v187);
          uint64_t v185 = *a2;
        }
        *a2 = v193;
        a2[1] = v186;
        a2[2] = &v192[16 * v191];
        if (v185) {
          operator delete(v185);
        }
      }
      else
      {
        *(void *)uint64_t v185 = "+sve2-sm4";
        *((void *)v185 + 1) = 9;
        uint64_t v186 = v185 + 16;
      }
      a2[1] = v186;
    }
    if ((a1 & 0x4000000) != 0)
    {
      uint64_t v195 = a2[1];
      unint64_t v194 = (unint64_t)a2[2];
      if ((unint64_t)v195 >= v194)
      {
        unint64_t v197 = *a2;
        uint64_t v198 = (v195 - *a2) >> 4;
        unint64_t v199 = v198 + 1;
        if ((unint64_t)(v198 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v200 = v194 - (void)v197;
        if (v200 >> 3 > v199) {
          unint64_t v199 = v200 >> 3;
        }
        if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v201 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v201 = v199;
        }
        if (v201)
        {
          if (v201 >> 60) {
            goto LABEL_821;
          }
          uint64_t v202 = (char *)operator new(16 * v201);
        }
        else
        {
          uint64_t v202 = 0;
        }
        uint64_t v203 = &v202[16 * v198];
        *(void *)uint64_t v203 = "+sve2-sha3";
        *((void *)v203 + 1) = 10;
        uint64_t v196 = v203 + 16;
        if (v195 != v197)
        {
          do
          {
            *((_OWORD *)v203 - 1) = *((_OWORD *)v195 - 1);
            v203 -= 16;
            v195 -= 16;
          }
          while (v195 != v197);
          uint64_t v195 = *a2;
        }
        *a2 = v203;
        a2[1] = v196;
        a2[2] = &v202[16 * v201];
        if (v195) {
          operator delete(v195);
        }
      }
      else
      {
        *(void *)uint64_t v195 = "+sve2-sha3";
        *((void *)v195 + 1) = 10;
        uint64_t v196 = v195 + 16;
      }
      a2[1] = v196;
    }
    if ((a1 & 0x8000000) != 0)
    {
      uint64_t v205 = a2[1];
      unint64_t v204 = (unint64_t)a2[2];
      if ((unint64_t)v205 >= v204)
      {
        int v207 = *a2;
        uint64_t v208 = (v205 - *a2) >> 4;
        unint64_t v209 = v208 + 1;
        if ((unint64_t)(v208 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v210 = v204 - (void)v207;
        if (v210 >> 3 > v209) {
          unint64_t v209 = v210 >> 3;
        }
        if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v211 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v211 = v209;
        }
        if (v211)
        {
          if (v211 >> 60) {
            goto LABEL_821;
          }
          long long v212 = (char *)operator new(16 * v211);
        }
        else
        {
          long long v212 = 0;
        }
        uint64_t v213 = &v212[16 * v208];
        *(void *)uint64_t v213 = "+sve2-bitperm";
        *((void *)v213 + 1) = 13;
        unint64_t v206 = v213 + 16;
        if (v205 != v207)
        {
          do
          {
            *((_OWORD *)v213 - 1) = *((_OWORD *)v205 - 1);
            v213 -= 16;
            v205 -= 16;
          }
          while (v205 != v207);
          uint64_t v205 = *a2;
        }
        *a2 = v213;
        a2[1] = v206;
        a2[2] = &v212[16 * v211];
        if (v205) {
          operator delete(v205);
        }
      }
      else
      {
        *(void *)uint64_t v205 = "+sve2-bitperm";
        *((void *)v205 + 1) = 13;
        unint64_t v206 = v205 + 16;
      }
      a2[1] = v206;
    }
    if ((a1 & 0x800) != 0)
    {
      int v215 = a2[1];
      unint64_t v214 = (unint64_t)a2[2];
      if ((unint64_t)v215 >= v214)
      {
        long long v217 = *a2;
        uint64_t v218 = (v215 - *a2) >> 4;
        unint64_t v219 = v218 + 1;
        if ((unint64_t)(v218 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v220 = v214 - (void)v217;
        if (v220 >> 3 > v219) {
          unint64_t v219 = v220 >> 3;
        }
        if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v221 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v221 = v219;
        }
        if (v221)
        {
          if (v221 >> 60) {
            goto LABEL_821;
          }
          uint64_t v222 = (char *)operator new(16 * v221);
        }
        else
        {
          uint64_t v222 = 0;
        }
        int v223 = &v222[16 * v218];
        *(void *)int v223 = "+rcpc";
        *((void *)v223 + 1) = 5;
        char v216 = v223 + 16;
        if (v215 != v217)
        {
          do
          {
            *((_OWORD *)v223 - 1) = *((_OWORD *)v215 - 1);
            v223 -= 16;
            v215 -= 16;
          }
          while (v215 != v217);
          int v215 = *a2;
        }
        *a2 = v223;
        a2[1] = v216;
        a2[2] = &v222[16 * v221];
        if (v215) {
          operator delete(v215);
        }
      }
      else
      {
        *(void *)int v215 = "+rcpc";
        *((void *)v215 + 1) = 5;
        char v216 = v215 + 16;
      }
      a2[1] = v216;
    }
    if ((a1 & 0x40000) != 0)
    {
      uint64_t v225 = a2[1];
      unint64_t v224 = (unint64_t)a2[2];
      if ((unint64_t)v225 >= v224)
      {
        int v227 = *a2;
        uint64_t v228 = (v225 - *a2) >> 4;
        unint64_t v229 = v228 + 1;
        if ((unint64_t)(v228 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v230 = v224 - (void)v227;
        if (v230 >> 3 > v229) {
          unint64_t v229 = v230 >> 3;
        }
        if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v231 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v231 = v229;
        }
        if (v231)
        {
          if (v231 >> 60) {
            goto LABEL_821;
          }
          uint64_t v232 = (char *)operator new(16 * v231);
        }
        else
        {
          uint64_t v232 = 0;
        }
        int v233 = &v232[16 * v228];
        *(void *)int v233 = "+rand";
        *((void *)v233 + 1) = 5;
        uint64_t v226 = v233 + 16;
        if (v225 != v227)
        {
          do
          {
            *((_OWORD *)v233 - 1) = *((_OWORD *)v225 - 1);
            v233 -= 16;
            v225 -= 16;
          }
          while (v225 != v227);
          uint64_t v225 = *a2;
        }
        *a2 = v233;
        a2[1] = v226;
        a2[2] = &v232[16 * v231];
        if (v225) {
          operator delete(v225);
        }
      }
      else
      {
        *(void *)uint64_t v225 = "+rand";
        *((void *)v225 + 1) = 5;
        uint64_t v226 = v225 + 16;
      }
      a2[1] = v226;
    }
    if ((a1 & 0x80000) != 0)
    {
      uint64_t v235 = a2[1];
      unint64_t v234 = (unint64_t)a2[2];
      if ((unint64_t)v235 >= v234)
      {
        int v237 = *a2;
        uint64_t v238 = (v235 - *a2) >> 4;
        unint64_t v239 = v238 + 1;
        if ((unint64_t)(v238 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v240 = v234 - (void)v237;
        if (v240 >> 3 > v239) {
          unint64_t v239 = v240 >> 3;
        }
        if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v241 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v241 = v239;
        }
        if (v241)
        {
          if (v241 >> 60) {
            goto LABEL_821;
          }
          uint64_t v242 = (char *)operator new(16 * v241);
        }
        else
        {
          uint64_t v242 = 0;
        }
        unsigned int v243 = &v242[16 * v238];
        *(void *)unsigned int v243 = "+mte";
        *((void *)v243 + 1) = 4;
        uint64_t v236 = v243 + 16;
        if (v235 != v237)
        {
          do
          {
            *((_OWORD *)v243 - 1) = *((_OWORD *)v235 - 1);
            v243 -= 16;
            v235 -= 16;
          }
          while (v235 != v237);
          uint64_t v235 = *a2;
        }
        *a2 = v243;
        a2[1] = v236;
        a2[2] = &v242[16 * v241];
        if (v235) {
          operator delete(v235);
        }
      }
      else
      {
        *(void *)uint64_t v235 = "+mte";
        *((void *)v235 + 1) = 4;
        uint64_t v236 = v235 + 16;
      }
      a2[1] = v236;
    }
    if ((a1 & 0x100000) != 0)
    {
      int v245 = a2[1];
      unint64_t v244 = (unint64_t)a2[2];
      if ((unint64_t)v245 >= v244)
      {
        uint64_t v247 = *a2;
        uint64_t v248 = (v245 - *a2) >> 4;
        unint64_t v249 = v248 + 1;
        if ((unint64_t)(v248 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v250 = v244 - (void)v247;
        if (v250 >> 3 > v249) {
          unint64_t v249 = v250 >> 3;
        }
        if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v251 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v251 = v249;
        }
        if (v251)
        {
          if (v251 >> 60) {
            goto LABEL_821;
          }
          unsigned int v252 = (char *)operator new(16 * v251);
        }
        else
        {
          unsigned int v252 = 0;
        }
        unint64_t v253 = &v252[16 * v248];
        *(void *)unint64_t v253 = "+ssbs";
        *((void *)v253 + 1) = 5;
        uint64_t v246 = v253 + 16;
        if (v245 != v247)
        {
          do
          {
            *((_OWORD *)v253 - 1) = *((_OWORD *)v245 - 1);
            v253 -= 16;
            v245 -= 16;
          }
          while (v245 != v247);
          int v245 = *a2;
        }
        *a2 = v253;
        a2[1] = v246;
        a2[2] = &v252[16 * v251];
        if (v245) {
          operator delete(v245);
        }
      }
      else
      {
        *(void *)int v245 = "+ssbs";
        *((void *)v245 + 1) = 5;
        uint64_t v246 = v245 + 16;
      }
      a2[1] = v246;
    }
    if ((a1 & 0x200000) != 0)
    {
      uint64_t v255 = a2[1];
      unint64_t v254 = (unint64_t)a2[2];
      if ((unint64_t)v255 >= v254)
      {
        unsigned int v257 = *a2;
        uint64_t v258 = (v255 - *a2) >> 4;
        unint64_t v259 = v258 + 1;
        if ((unint64_t)(v258 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v260 = v254 - (void)v257;
        if (v260 >> 3 > v259) {
          unint64_t v259 = v260 >> 3;
        }
        if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v261 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v261 = v259;
        }
        if (v261)
        {
          if (v261 >> 60) {
            goto LABEL_821;
          }
          unsigned int v262 = (char *)operator new(16 * v261);
        }
        else
        {
          unsigned int v262 = 0;
        }
        unsigned int v263 = &v262[16 * v258];
        *(void *)unsigned int v263 = "+sb";
        *((void *)v263 + 1) = 3;
        uint64_t v256 = v263 + 16;
        if (v255 != v257)
        {
          do
          {
            *((_OWORD *)v263 - 1) = *((_OWORD *)v255 - 1);
            v263 -= 16;
            v255 -= 16;
          }
          while (v255 != v257);
          uint64_t v255 = *a2;
        }
        *a2 = v263;
        a2[1] = v256;
        a2[2] = &v262[16 * v261];
        if (v255) {
          operator delete(v255);
        }
      }
      else
      {
        *(void *)uint64_t v255 = "+sb";
        *((void *)v255 + 1) = 3;
        uint64_t v256 = v255 + 16;
      }
      a2[1] = v256;
    }
    if ((a1 & 0x400000) != 0)
    {
      int v265 = a2[1];
      unint64_t v264 = (unint64_t)a2[2];
      if ((unint64_t)v265 >= v264)
      {
        int v267 = *a2;
        uint64_t v268 = (v265 - *a2) >> 4;
        unint64_t v269 = v268 + 1;
        if ((unint64_t)(v268 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v270 = v264 - (void)v267;
        if (v270 >> 3 > v269) {
          unint64_t v269 = v270 >> 3;
        }
        if ((unint64_t)v270 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v271 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v271 = v269;
        }
        if (v271)
        {
          if (v271 >> 60) {
            goto LABEL_821;
          }
          int64_t v272 = (char *)operator new(16 * v271);
        }
        else
        {
          int64_t v272 = 0;
        }
        unsigned int v273 = &v272[16 * v268];
        *(void *)unsigned int v273 = "+predres";
        *((void *)v273 + 1) = 8;
        int v266 = v273 + 16;
        if (v265 != v267)
        {
          do
          {
            *((_OWORD *)v273 - 1) = *((_OWORD *)v265 - 1);
            v273 -= 16;
            v265 -= 16;
          }
          while (v265 != v267);
          int v265 = *a2;
        }
        *a2 = v273;
        a2[1] = v266;
        a2[2] = &v272[16 * v271];
        if (v265) {
          operator delete(v265);
        }
      }
      else
      {
        *(void *)int v265 = "+predres";
        *((void *)v265 + 1) = 8;
        int v266 = v265 + 16;
      }
      a2[1] = v266;
    }
    if ((a1 & 0x20000000) != 0)
    {
      uint64_t v275 = a2[1];
      unint64_t v274 = (unint64_t)a2[2];
      if ((unint64_t)v275 >= v274)
      {
        int v277 = *a2;
        uint64_t v278 = (v275 - *a2) >> 4;
        unint64_t v279 = v278 + 1;
        if ((unint64_t)(v278 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v280 = v274 - (void)v277;
        if (v280 >> 3 > v279) {
          unint64_t v279 = v280 >> 3;
        }
        if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v281 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v281 = v279;
        }
        if (v281)
        {
          if (v281 >> 60) {
            goto LABEL_821;
          }
          uint64_t v282 = (char *)operator new(16 * v281);
        }
        else
        {
          uint64_t v282 = 0;
        }
        uint64_t v283 = &v282[16 * v278];
        *(void *)uint64_t v283 = "+bf16";
        *((void *)v283 + 1) = 5;
        unsigned int v276 = v283 + 16;
        if (v275 != v277)
        {
          do
          {
            *((_OWORD *)v283 - 1) = *((_OWORD *)v275 - 1);
            v283 -= 16;
            v275 -= 16;
          }
          while (v275 != v277);
          uint64_t v275 = *a2;
        }
        *a2 = v283;
        a2[1] = v276;
        a2[2] = &v282[16 * v281];
        if (v275) {
          operator delete(v275);
        }
      }
      else
      {
        *(void *)uint64_t v275 = "+bf16";
        *((void *)v275 + 1) = 5;
        unsigned int v276 = v275 + 16;
      }
      a2[1] = v276;
    }
    if ((a1 & 0x40000000) != 0)
    {
      uint64_t v285 = a2[1];
      unint64_t v284 = (unint64_t)a2[2];
      if ((unint64_t)v285 >= v284)
      {
        uint64_t v287 = *a2;
        uint64_t v288 = (v285 - *a2) >> 4;
        unint64_t v289 = v288 + 1;
        if ((unint64_t)(v288 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v290 = v284 - (void)v287;
        if (v290 >> 3 > v289) {
          unint64_t v289 = v290 >> 3;
        }
        if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v291 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v291 = v289;
        }
        if (v291)
        {
          if (v291 >> 60) {
            goto LABEL_821;
          }
          uint64_t v292 = (char *)operator new(16 * v291);
        }
        else
        {
          uint64_t v292 = 0;
        }
        __int16 v293 = &v292[16 * v288];
        *(void *)__int16 v293 = "+i8mm";
        *((void *)v293 + 1) = 5;
        uint64_t v286 = v293 + 16;
        if (v285 != v287)
        {
          do
          {
            *((_OWORD *)v293 - 1) = *((_OWORD *)v285 - 1);
            v293 -= 16;
            v285 -= 16;
          }
          while (v285 != v287);
          uint64_t v285 = *a2;
        }
        *a2 = v293;
        a2[1] = v286;
        a2[2] = &v292[16 * v291];
        if (v285) {
          operator delete(v285);
        }
      }
      else
      {
        *(void *)uint64_t v285 = "+i8mm";
        *((void *)v285 + 1) = 5;
        uint64_t v286 = v285 + 16;
      }
      a2[1] = v286;
    }
    if ((a1 & 0x80000000) != 0)
    {
      uint64_t v295 = a2[1];
      unint64_t v294 = (unint64_t)a2[2];
      if ((unint64_t)v295 >= v294)
      {
        unsigned int v297 = *a2;
        uint64_t v298 = (v295 - *a2) >> 4;
        unint64_t v299 = v298 + 1;
        if ((unint64_t)(v298 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v300 = v294 - (void)v297;
        if (v300 >> 3 > v299) {
          unint64_t v299 = v300 >> 3;
        }
        if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v301 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v301 = v299;
        }
        if (v301)
        {
          if (v301 >> 60) {
            goto LABEL_821;
          }
          uint64_t v302 = (char *)operator new(16 * v301);
        }
        else
        {
          uint64_t v302 = 0;
        }
        uint64_t v303 = &v302[16 * v298];
        *(void *)uint64_t v303 = "+f32mm";
        *((void *)v303 + 1) = 6;
        unsigned int v296 = v303 + 16;
        if (v295 != v297)
        {
          do
          {
            *((_OWORD *)v303 - 1) = *((_OWORD *)v295 - 1);
            v303 -= 16;
            v295 -= 16;
          }
          while (v295 != v297);
          uint64_t v295 = *a2;
        }
        *a2 = v303;
        a2[1] = v296;
        a2[2] = &v302[16 * v301];
        if (v295) {
          operator delete(v295);
        }
      }
      else
      {
        *(void *)uint64_t v295 = "+f32mm";
        *((void *)v295 + 1) = 6;
        unsigned int v296 = v295 + 16;
      }
      a2[1] = v296;
    }
    if ((a1 & 0x100000000) != 0)
    {
      unsigned int v305 = a2[1];
      unint64_t v304 = (unint64_t)a2[2];
      if ((unint64_t)v305 >= v304)
      {
        uint64_t v307 = *a2;
        uint64_t v308 = (v305 - *a2) >> 4;
        unint64_t v309 = v308 + 1;
        if ((unint64_t)(v308 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v310 = v304 - (void)v307;
        if (v310 >> 3 > v309) {
          unint64_t v309 = v310 >> 3;
        }
        if ((unint64_t)v310 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v311 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v311 = v309;
        }
        if (v311)
        {
          if (v311 >> 60) {
            goto LABEL_821;
          }
          unsigned int v312 = (char *)operator new(16 * v311);
        }
        else
        {
          unsigned int v312 = 0;
        }
        unsigned int v313 = &v312[16 * v308];
        *(void *)unsigned int v313 = "+f64mm";
        *((void *)v313 + 1) = 6;
        uint64_t v306 = v313 + 16;
        if (v305 != v307)
        {
          do
          {
            *((_OWORD *)v313 - 1) = *((_OWORD *)v305 - 1);
            v313 -= 16;
            v305 -= 16;
          }
          while (v305 != v307);
          unsigned int v305 = *a2;
        }
        *a2 = v313;
        a2[1] = v306;
        a2[2] = &v312[16 * v311];
        if (v305) {
          operator delete(v305);
        }
      }
      else
      {
        *(void *)unsigned int v305 = "+f64mm";
        *((void *)v305 + 1) = 6;
        uint64_t v306 = v305 + 16;
      }
      a2[1] = v306;
    }
    if ((a1 & 0x10000000) != 0)
    {
      uint64_t v315 = a2[1];
      unint64_t v314 = (unint64_t)a2[2];
      if ((unint64_t)v315 >= v314)
      {
        int v317 = *a2;
        uint64_t v318 = (v315 - *a2) >> 4;
        unint64_t v319 = v318 + 1;
        if ((unint64_t)(v318 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v320 = v314 - (void)v317;
        if (v320 >> 3 > v319) {
          unint64_t v319 = v320 >> 3;
        }
        if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v321 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v321 = v319;
        }
        if (v321)
        {
          if (v321 >> 60) {
            goto LABEL_821;
          }
          uint64_t v322 = (char *)operator new(16 * v321);
        }
        else
        {
          uint64_t v322 = 0;
        }
        unsigned int v323 = &v322[16 * v318];
        *(void *)unsigned int v323 = "+tme";
        *((void *)v323 + 1) = 4;
        __int16 v316 = v323 + 16;
        if (v315 != v317)
        {
          do
          {
            *((_OWORD *)v323 - 1) = *((_OWORD *)v315 - 1);
            v323 -= 16;
            v315 -= 16;
          }
          while (v315 != v317);
          uint64_t v315 = *a2;
        }
        *a2 = v323;
        a2[1] = v316;
        a2[2] = &v322[16 * v321];
        if (v315) {
          operator delete(v315);
        }
      }
      else
      {
        *(void *)uint64_t v315 = "+tme";
        *((void *)v315 + 1) = 4;
        __int16 v316 = v315 + 16;
      }
      a2[1] = v316;
    }
    if ((a1 & 0x200000000) != 0)
    {
      uint64_t v325 = a2[1];
      unint64_t v324 = (unint64_t)a2[2];
      if ((unint64_t)v325 >= v324)
      {
        uint64_t v327 = *a2;
        uint64_t v328 = (v325 - *a2) >> 4;
        unint64_t v329 = v328 + 1;
        if ((unint64_t)(v328 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v330 = v324 - (void)v327;
        if (v330 >> 3 > v329) {
          unint64_t v329 = v330 >> 3;
        }
        if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v331 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v331 = v329;
        }
        if (v331)
        {
          if (v331 >> 60) {
            goto LABEL_821;
          }
          int v332 = (char *)operator new(16 * v331);
        }
        else
        {
          int v332 = 0;
        }
        uint64_t v333 = &v332[16 * v328];
        *(void *)uint64_t v333 = "+ls64";
        *((void *)v333 + 1) = 5;
        __int16 v326 = v333 + 16;
        if (v325 != v327)
        {
          do
          {
            *((_OWORD *)v333 - 1) = *((_OWORD *)v325 - 1);
            v333 -= 16;
            v325 -= 16;
          }
          while (v325 != v327);
          uint64_t v325 = *a2;
        }
        *a2 = v333;
        a2[1] = v326;
        a2[2] = &v332[16 * v331];
        if (v325) {
          operator delete(v325);
        }
      }
      else
      {
        *(void *)uint64_t v325 = "+ls64";
        *((void *)v325 + 1) = 5;
        __int16 v326 = v325 + 16;
      }
      a2[1] = v326;
    }
    if ((a1 & 0x400000000) != 0)
    {
      uint64_t v335 = a2[1];
      unint64_t v334 = (unint64_t)a2[2];
      if ((unint64_t)v335 >= v334)
      {
        unsigned int v337 = *a2;
        uint64_t v338 = (v335 - *a2) >> 4;
        unint64_t v339 = v338 + 1;
        if ((unint64_t)(v338 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v340 = v334 - (void)v337;
        if (v340 >> 3 > v339) {
          unint64_t v339 = v340 >> 3;
        }
        if ((unint64_t)v340 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v341 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v341 = v339;
        }
        if (v341)
        {
          if (v341 >> 60) {
            goto LABEL_821;
          }
          uint64_t v342 = (char *)operator new(16 * v341);
        }
        else
        {
          uint64_t v342 = 0;
        }
        uint64_t v343 = &v342[16 * v338];
        *(void *)uint64_t v343 = "+brbe";
        *((void *)v343 + 1) = 5;
        uint64_t v336 = v343 + 16;
        if (v335 != v337)
        {
          do
          {
            *((_OWORD *)v343 - 1) = *((_OWORD *)v335 - 1);
            v343 -= 16;
            v335 -= 16;
          }
          while (v335 != v337);
          uint64_t v335 = *a2;
        }
        *a2 = v343;
        a2[1] = v336;
        a2[2] = &v342[16 * v341];
        if (v335) {
          operator delete(v335);
        }
      }
      else
      {
        *(void *)uint64_t v335 = "+brbe";
        *((void *)v335 + 1) = 5;
        uint64_t v336 = v335 + 16;
      }
      a2[1] = v336;
    }
    if ((a1 & 0x800000000) != 0)
    {
      int v345 = a2[1];
      unint64_t v344 = (unint64_t)a2[2];
      if ((unint64_t)v345 >= v344)
      {
        uint64_t v347 = *a2;
        uint64_t v348 = (v345 - *a2) >> 4;
        unint64_t v349 = v348 + 1;
        if ((unint64_t)(v348 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v350 = v344 - (void)v347;
        if (v350 >> 3 > v349) {
          unint64_t v349 = v350 >> 3;
        }
        if ((unint64_t)v350 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v351 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v351 = v349;
        }
        if (v351)
        {
          if (v351 >> 60) {
            goto LABEL_821;
          }
          int v352 = (char *)operator new(16 * v351);
        }
        else
        {
          int v352 = 0;
        }
        uint64_t v353 = &v352[16 * v348];
        *(void *)uint64_t v353 = "+pauth";
        *((void *)v353 + 1) = 6;
        uint64_t v346 = v353 + 16;
        if (v345 != v347)
        {
          do
          {
            *((_OWORD *)v353 - 1) = *((_OWORD *)v345 - 1);
            v353 -= 16;
            v345 -= 16;
          }
          while (v345 != v347);
          int v345 = *a2;
        }
        *a2 = v353;
        a2[1] = v346;
        a2[2] = &v352[16 * v351];
        if (v345) {
          operator delete(v345);
        }
      }
      else
      {
        *(void *)int v345 = "+pauth";
        *((void *)v345 + 1) = 6;
        uint64_t v346 = v345 + 16;
      }
      a2[1] = v346;
    }
    if ((a1 & 0x1000000000) != 0)
    {
      uint64_t v355 = a2[1];
      unint64_t v354 = (unint64_t)a2[2];
      if ((unint64_t)v355 >= v354)
      {
        unsigned int v357 = *a2;
        uint64_t v358 = (v355 - *a2) >> 4;
        unint64_t v359 = v358 + 1;
        if ((unint64_t)(v358 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v360 = v354 - (void)v357;
        if (v360 >> 3 > v359) {
          unint64_t v359 = v360 >> 3;
        }
        if ((unint64_t)v360 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v361 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v361 = v359;
        }
        if (v361)
        {
          if (v361 >> 60) {
            goto LABEL_821;
          }
          unint64_t v362 = (char *)operator new(16 * v361);
        }
        else
        {
          unint64_t v362 = 0;
        }
        unint64_t v363 = &v362[16 * v358];
        *(void *)unint64_t v363 = "+flagm";
        *((void *)v363 + 1) = 6;
        uint64_t v356 = v363 + 16;
        if (v355 != v357)
        {
          do
          {
            *((_OWORD *)v363 - 1) = *((_OWORD *)v355 - 1);
            v363 -= 16;
            v355 -= 16;
          }
          while (v355 != v357);
          uint64_t v355 = *a2;
        }
        *a2 = v363;
        a2[1] = v356;
        a2[2] = &v362[16 * v361];
        if (v355) {
          operator delete(v355);
        }
      }
      else
      {
        *(void *)uint64_t v355 = "+flagm";
        *((void *)v355 + 1) = 6;
        uint64_t v356 = v355 + 16;
      }
      a2[1] = v356;
    }
    if ((a1 & 0x2000000000) != 0)
    {
      uint64_t v365 = a2[1];
      unint64_t v364 = (unint64_t)a2[2];
      if ((unint64_t)v365 >= v364)
      {
        unint64_t v367 = *a2;
        uint64_t v368 = (v365 - *a2) >> 4;
        unint64_t v369 = v368 + 1;
        if ((unint64_t)(v368 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v370 = v364 - (void)v367;
        if (v370 >> 3 > v369) {
          unint64_t v369 = v370 >> 3;
        }
        if ((unint64_t)v370 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v371 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v371 = v369;
        }
        if (v371)
        {
          if (v371 >> 60) {
            goto LABEL_821;
          }
          unsigned int v372 = (char *)operator new(16 * v371);
        }
        else
        {
          unsigned int v372 = 0;
        }
        uint64_t v373 = &v372[16 * v368];
        *(void *)uint64_t v373 = "+sme";
        *((void *)v373 + 1) = 4;
        uint64_t v366 = v373 + 16;
        if (v365 != v367)
        {
          do
          {
            *((_OWORD *)v373 - 1) = *((_OWORD *)v365 - 1);
            v373 -= 16;
            v365 -= 16;
          }
          while (v365 != v367);
          uint64_t v365 = *a2;
        }
        *a2 = v373;
        a2[1] = v366;
        a2[2] = &v372[16 * v371];
        if (v365) {
          operator delete(v365);
        }
      }
      else
      {
        *(void *)uint64_t v365 = "+sme";
        *((void *)v365 + 1) = 4;
        uint64_t v366 = v365 + 16;
      }
      a2[1] = v366;
    }
    if ((a1 & 0x4000000000) != 0)
    {
      int v375 = a2[1];
      unint64_t v374 = (unint64_t)a2[2];
      if ((unint64_t)v375 >= v374)
      {
        uint64_t v377 = *a2;
        uint64_t v378 = (v375 - *a2) >> 4;
        unint64_t v379 = v378 + 1;
        if ((unint64_t)(v378 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v380 = v374 - (void)v377;
        if (v380 >> 3 > v379) {
          unint64_t v379 = v380 >> 3;
        }
        if ((unint64_t)v380 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v381 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v381 = v379;
        }
        if (v381)
        {
          if (v381 >> 60) {
            goto LABEL_821;
          }
          BOOL v382 = (char *)operator new(16 * v381);
        }
        else
        {
          BOOL v382 = 0;
        }
        int8x8_t v383 = &v382[16 * v378];
        *(void *)int8x8_t v383 = "+sme-f64";
        *((void *)v383 + 1) = 8;
        uint64_t v376 = v383 + 16;
        if (v375 != v377)
        {
          do
          {
            *((_OWORD *)v383 - 1) = *((_OWORD *)v375 - 1);
            v383 -= 16;
            v375 -= 16;
          }
          while (v375 != v377);
          int v375 = *a2;
        }
        *a2 = v383;
        a2[1] = v376;
        a2[2] = &v382[16 * v381];
        if (v375) {
          operator delete(v375);
        }
      }
      else
      {
        *(void *)int v375 = "+sme-f64";
        *((void *)v375 + 1) = 8;
        uint64_t v376 = v375 + 16;
      }
      a2[1] = v376;
    }
    if ((a1 & 0x8000000000) != 0)
    {
      unsigned int v385 = a2[1];
      unint64_t v384 = (unint64_t)a2[2];
      if ((unint64_t)v385 >= v384)
      {
        unsigned int v387 = *a2;
        uint64_t v388 = (v385 - *a2) >> 4;
        unint64_t v389 = v388 + 1;
        if ((unint64_t)(v388 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v390 = v384 - (void)v387;
        if (v390 >> 3 > v389) {
          unint64_t v389 = v390 >> 3;
        }
        if ((unint64_t)v390 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v391 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v391 = v389;
        }
        if (v391)
        {
          if (v391 >> 60) {
            goto LABEL_821;
          }
          unsigned int v392 = (char *)operator new(16 * v391);
        }
        else
        {
          unsigned int v392 = 0;
        }
        int v393 = &v392[16 * v388];
        *(void *)int v393 = "+sme-i64";
        *((void *)v393 + 1) = 8;
        uint64_t v386 = v393 + 16;
        if (v385 != v387)
        {
          do
          {
            *((_OWORD *)v393 - 1) = *((_OWORD *)v385 - 1);
            v393 -= 16;
            v385 -= 16;
          }
          while (v385 != v387);
          unsigned int v385 = *a2;
        }
        *a2 = v393;
        a2[1] = v386;
        a2[2] = &v392[16 * v391];
        if (v385) {
          operator delete(v385);
        }
      }
      else
      {
        *(void *)unsigned int v385 = "+sme-i64";
        *((void *)v385 + 1) = 8;
        uint64_t v386 = v385 + 16;
      }
      a2[1] = v386;
    }
    if ((a1 & 0x10000000000) != 0)
    {
      unint64_t v395 = a2[1];
      unint64_t v394 = (unint64_t)a2[2];
      if ((unint64_t)v395 >= v394)
      {
        uint64_t v397 = *a2;
        uint64_t v398 = (v395 - *a2) >> 4;
        unint64_t v399 = v398 + 1;
        if ((unint64_t)(v398 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v400 = v394 - (void)v397;
        if (v400 >> 3 > v399) {
          unint64_t v399 = v400 >> 3;
        }
        if ((unint64_t)v400 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v401 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v401 = v399;
        }
        if (v401)
        {
          if (v401 >> 60) {
            goto LABEL_821;
          }
          uint64_t v402 = (char *)operator new(16 * v401);
        }
        else
        {
          uint64_t v402 = 0;
        }
        uint64_t v403 = &v402[16 * v398];
        *(void *)uint64_t v403 = "+hbc";
        *((void *)v403 + 1) = 4;
        uint64_t v396 = v403 + 16;
        if (v395 != v397)
        {
          do
          {
            *((_OWORD *)v403 - 1) = *((_OWORD *)v395 - 1);
            v403 -= 16;
            v395 -= 16;
          }
          while (v395 != v397);
          unint64_t v395 = *a2;
        }
        *a2 = v403;
        a2[1] = v396;
        a2[2] = &v402[16 * v401];
        if (v395) {
          operator delete(v395);
        }
      }
      else
      {
        *(void *)unint64_t v395 = "+hbc";
        *((void *)v395 + 1) = 4;
        uint64_t v396 = v395 + 16;
      }
      a2[1] = v396;
    }
    if ((a1 & 0x20000000000) != 0)
    {
      int v405 = a2[1];
      unint64_t v404 = (unint64_t)a2[2];
      if ((unint64_t)v405 >= v404)
      {
        int v407 = *a2;
        uint64_t v408 = (v405 - *a2) >> 4;
        unint64_t v409 = v408 + 1;
        if ((unint64_t)(v408 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v410 = v404 - (void)v407;
        if (v410 >> 3 > v409) {
          unint64_t v409 = v410 >> 3;
        }
        if ((unint64_t)v410 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v411 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v411 = v409;
        }
        if (v411)
        {
          if (v411 >> 60) {
            goto LABEL_821;
          }
          uint64_t v412 = (char *)operator new(16 * v411);
        }
        else
        {
          uint64_t v412 = 0;
        }
        uint64_t v413 = &v412[16 * v408];
        *(void *)uint64_t v413 = "+mops";
        *((void *)v413 + 1) = 5;
        unsigned int v406 = v413 + 16;
        if (v405 != v407)
        {
          do
          {
            *((_OWORD *)v413 - 1) = *((_OWORD *)v405 - 1);
            v413 -= 16;
            v405 -= 16;
          }
          while (v405 != v407);
          int v405 = *a2;
        }
        *a2 = v413;
        a2[1] = v406;
        a2[2] = &v412[16 * v411];
        if (v405) {
          operator delete(v405);
        }
      }
      else
      {
        *(void *)int v405 = "+mops";
        *((void *)v405 + 1) = 5;
        unsigned int v406 = v405 + 16;
      }
      a2[1] = v406;
    }
    if ((a1 & 0x40000000000) != 0)
    {
      __int16 v415 = a2[1];
      unint64_t v414 = (unint64_t)a2[2];
      if ((unint64_t)v415 >= v414)
      {
        uint64_t v417 = *a2;
        uint64_t v418 = (v415 - *a2) >> 4;
        unint64_t v419 = v418 + 1;
        if ((unint64_t)(v418 + 1) >> 60) {
          goto LABEL_820;
        }
        uint64_t v420 = v414 - (void)v417;
        if (v420 >> 3 > v419) {
          unint64_t v419 = v420 >> 3;
        }
        if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v421 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v421 = v419;
        }
        if (v421)
        {
          if (v421 >> 60) {
            goto LABEL_821;
          }
          uint64_t v422 = (char *)operator new(16 * v421);
        }
        else
        {
          uint64_t v422 = 0;
        }
        uint64_t v423 = &v422[16 * v418];
        *(void *)uint64_t v423 = "+perfmon";
        *((void *)v423 + 1) = 8;
        uint64_t v416 = v423 + 16;
        if (v415 != v417)
        {
          do
          {
            *((_OWORD *)v423 - 1) = *((_OWORD *)v415 - 1);
            v423 -= 16;
            v415 -= 16;
          }
          while (v415 != v417);
          __int16 v415 = *a2;
        }
        *a2 = v423;
        a2[1] = v416;
        a2[2] = &v422[16 * v421];
        if (v415) {
          operator delete(v415);
        }
      }
      else
      {
        *(void *)__int16 v415 = "+perfmon";
        *((void *)v415 + 1) = 8;
        uint64_t v416 = v415 + 16;
      }
      a2[1] = v416;
    }
    if ((a1 & 0x80000000000) != 0)
    {
      unsigned int v425 = a2[1];
      unint64_t v424 = (unint64_t)a2[2];
      if ((unint64_t)v425 < v424)
      {
        *(void *)unsigned int v425 = "+xs";
        *((void *)v425 + 1) = 3;
        unsigned int v426 = v425 + 16;
LABEL_818:
        a2[1] = v426;
        return a1 != 0;
      }
      int v427 = *a2;
      uint64_t v428 = (v425 - *a2) >> 4;
      unint64_t v429 = v428 + 1;
      if (!((unint64_t)(v428 + 1) >> 60))
      {
        uint64_t v430 = v424 - (void)v427;
        if (v430 >> 3 > v429) {
          unint64_t v429 = v430 >> 3;
        }
        if ((unint64_t)v430 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v431 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v431 = v429;
        }
        if (!v431)
        {
          uint64_t v432 = 0;
          goto LABEL_813;
        }
        if (!(v431 >> 60))
        {
          uint64_t v432 = (char *)operator new(16 * v431);
LABEL_813:
          uint64_t v433 = &v432[16 * v428];
          *(void *)uint64_t v433 = "+xs";
          *((void *)v433 + 1) = 3;
          unsigned int v426 = v433 + 16;
          if (v425 != v427)
          {
            do
            {
              *((_OWORD *)v433 - 1) = *((_OWORD *)v425 - 1);
              v433 -= 16;
              v425 -= 16;
            }
            while (v425 != v427);
            unsigned int v425 = *a2;
          }
          *a2 = v433;
          a2[1] = v426;
          a2[2] = &v432[16 * v431];
          if (v425) {
            operator delete(v425);
          }
          goto LABEL_818;
        }
LABEL_821:
        sub_1CB833614();
      }
LABEL_820:
      abort();
    }
  }
  return a1 != 0;
}

char *llvm::AArch64::getArchName(unsigned int a1)
{
  return (&off_1E684F9F8)[9 * a1];
}

char *llvm::AArch64::getCPUAttr(unsigned int a1)
{
  return (&off_1E684F9F8)[9 * a1 + 2];
}

char *llvm::AArch64::getSubArch(unsigned int a1)
{
  return (&off_1E684F9F8)[9 * a1 + 4];
}

uint64_t llvm::AArch64::getArchAttr(unsigned int a1)
{
  return *((unsigned int *)&off_1E684F9F8 + 18 * a1 + 17);
}

char *llvm::AArch64::getArchExtName(llvm::AArch64 *this)
{
  uint64_t v1 = 0;
  while ((&off_1E684FE30)[v1 + 2] != (char *)this)
  {
    v1 += 5;
    if (v1 == 225) {
      return 0;
    }
  }
  return (&off_1E684FE30)[v1];
}

const char *llvm::AArch64::getDefaultCPU(char *a1, unint64_t a2)
{
  int v2 = llvm::AArch64::parseArch(a1, a2);
  if (!v2) {
    return 0;
  }
  int v3 = v2;
  uint64_t v4 = 0;
  double result = "generic";
  while (LODWORD((&off_1E6850538)[v4 + 2]) != v3 || !*((unsigned char *)&off_1E6850538 + 8 * v4 + 20))
  {
    v4 += 4;
    if (v4 == 228) {
      return result;
    }
  }
  return (&off_1E6850538)[v4];
}

uint64_t llvm::AArch64::parseArchExt(void *__s1, size_t __n)
{
  for (uint64_t i = &qword_1E684FE40; ; i += 5)
  {
    uint64_t v5 = i - 2;
    if (__n == *(i - 1) && (!__n || !memcmp(__s1, (const void *)*(i - 2), __n))) {
      break;
    }
    if (v5 + 5 == (uint64_t *)&off_1E6850538) {
      return 0;
    }
  }
  return *i;
}

uint64_t llvm::ARM::parseArch(char *a1, unint64_t a2)
{
  CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, a2);
  ArchSynonyint m = (const void *)llvm::ARM::getArchSynonym((unint64_t)CanonicalArchName, v3);
  size_t v6 = v5;
  uint64_t v7 = -(uint64_t)v5;
  for (uint64_t i = &dword_1E6850C98; ; i += 18)
  {
    size_t v9 = *((void *)i - 7);
    uint64_t v10 = i - 16;
    if (v9 >= v6 && (!v6 || !memcmp((const void *)(*((void *)i - 8) + v9 + v7), ArchSynonym, v6))) {
      break;
    }
    if (v10 + 18 == (int *)off_1E6851828) {
      return 0;
    }
  }
  return *i;
}

char *llvm::ARM::getCanonicalArchName(char *result, unint64_t a2)
{
  uint64_t v18 = result;
  unint64_t v19 = a2;
  if (a2 >= 8)
  {
    if (*(void *)result == 0x32335F34366D7261)
    {
      unint64_t v16 = a2;
      unint64_t v17 = result;
      unint64_t v3 = 8;
      goto LABEL_39;
    }
    goto LABEL_45;
  }
  if (a2 >= 6)
  {
LABEL_45:
    unint64_t v16 = a2;
    unint64_t v17 = result;
    if (*(_DWORD *)result == 913142369 && *((_WORD *)result + 2) == 25908)
    {
      unint64_t v3 = 6;
      goto LABEL_39;
    }
    if (*(_DWORD *)result == 913142369 && result[4] == 52)
    {
LABEL_38:
      unint64_t v3 = 5;
      goto LABEL_39;
    }
    if (a2 >= 0xA && *(void *)result == 0x5F34366863726161 && *((_WORD *)result + 4) == 12851)
    {
      unint64_t v3 = 10;
      goto LABEL_39;
    }
    goto LABEL_21;
  }
  if (a2 != 5)
  {
    if (a2 < 3)
    {
      if (a2 != 2) {
        return result;
      }
      goto LABEL_9;
    }
    if (*(_WORD *)result != 29281 || result[2] != 109)
    {
LABEL_9:
      unint64_t v3 = -1;
      goto LABEL_10;
    }
    goto LABEL_60;
  }
  if (*(_DWORD *)result == 913142369 && result[4] == 52) {
    goto LABEL_37;
  }
LABEL_21:
  if (*(_WORD *)result == 29281 && result[2] == 109)
  {
LABEL_60:
    unint64_t v16 = a2;
    unint64_t v17 = result;
    unint64_t v3 = 3;
    goto LABEL_39;
  }
  if (*(_DWORD *)result == 1836410996 && result[4] == 98)
  {
LABEL_37:
    unint64_t v16 = a2;
    unint64_t v17 = result;
    goto LABEL_38;
  }
  if (a2 < 7) {
    goto LABEL_9;
  }
  unint64_t v16 = a2;
  unint64_t v17 = result;
  if (*(_DWORD *)result == 1668440417 && *(_DWORD *)(result + 3) == 875980899)
  {
    if (llvm::StringRef::find((uint64_t *)&v18, "eb", 2uLL, 0) != -1) {
      return (char *)&unk_1CFC25E02;
    }
    unint64_t v3 = 7;
    if (v16 - 7 >= 3)
    {
      unint64_t v3 = 10;
      if (*(unsigned __int16 *)(v17 + 7) ^ 0x625F | v17[9] ^ 0x65) {
        unint64_t v3 = 7;
      }
    }
LABEL_39:
    if (v16 >= v3) {
      unint64_t v10 = v3;
    }
    else {
      unint64_t v10 = v16;
    }
    a2 = v16;
    if (v16 - v10 >= 2 && *(_WORD *)&v17[v10] == 25189)
    {
      v3 += 2;
      unint64_t v5 = v16;
      double result = v17;
LABEL_63:
      if (v5 >= v3) {
        unint64_t v14 = v3;
      }
      else {
        unint64_t v14 = v5;
      }
      long long v15 = &result[v14];
      uint64_t v18 = &result[v14];
      unint64_t v19 = v5 - v14;
      if (v5 <= v3) {
        return result;
      }
      if ((v5 - v14 < 2
         || *v15 == 118
         && (v15[1] & 0x80000000) == 0
         && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v15[1] + 60) & 0x400) != 0)
        && llvm::StringRef::find((uint64_t *)&v18, "eb", 2uLL, 0) == -1)
      {
        return v15;
      }
      return (char *)&unk_1CFC25E02;
    }
    goto LABEL_43;
  }
  unint64_t v3 = -1;
LABEL_43:
  double result = v17;
LABEL_10:
  unint64_t v4 = a2 - 2;
  if (a2 < a2 - 2) {
    unint64_t v4 = a2;
  }
  if (*(_WORD *)&result[a2 - 2] == 25189) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = a2;
  }
  if (v3 != -1) {
    goto LABEL_63;
  }
  return result;
}

unint64_t llvm::ARM::getArchSynonym(unint64_t result, uint64_t a2)
{
  if (a2 == 4)
  {
    switch(*(_DWORD *)result)
    {
      case 0x6C683676:
        unint64_t v21 = "v6k";
LABEL_93:
        unint64_t v17 = v21;
        unint64_t v18 = (unint64_t)v21 & 0xFFFFFFFFFFFFFF00;
        return v17 | v18;
      case 0x6D733676:
LABEL_150:
        BOOL v22 = "v6-m";
        break;
      case 0x6B7A3676:
LABEL_151:
        BOOL v22 = "v6kz";
        break;
      case 0x6C683776:
LABEL_99:
        BOOL v22 = "v7-a";
        break;
      case 0x6D653776:
        unint64_t v17 = (unint64_t)"v7e-m" & 0xFF;
        unint64_t v18 = (unint64_t)"v7e-m" & 0xFFFFFFFFFFFFFF00;
        return v17 | v18;
      default:
        return result;
    }
LABEL_152:
    unint64_t v17 = v22;
    unint64_t v18 = (unint64_t)v22 & 0xFFFFFFFFFFFFFF00;
    return v17 | v18;
  }
  switch(a2)
  {
    case 2:
      switch(*(_WORD *)result)
      {
        case 0x3576:
          unint64_t v21 = "v5t";
          goto LABEL_93;
        case 0x3776:
          goto LABEL_99;
        case 0x3876:
          goto LABEL_100;
        case 0x3976:
          goto LABEL_157;
      }
      return result;
    case 3:
      if (*(_WORD *)result == 13686 && *(unsigned char *)(result + 2) == 101)
      {
        BOOL v22 = "v5te";
        goto LABEL_152;
      }
      if (*(_WORD *)result == 13942 && *(unsigned char *)(result + 2) == 106)
      {
        unint64_t v17 = (unint64_t)"v6" & 0xFF;
        unint64_t v18 = (unint64_t)"v6" & 0xFFFFFFFFFFFFFF00;
        return v17 | v18;
      }
      if (*(_WORD *)result == 13942 && *(unsigned char *)(result + 2) == 109) {
        goto LABEL_150;
      }
      if (*(_WORD *)result == 13942 && *(unsigned char *)(result + 2) == 122) {
        goto LABEL_151;
      }
      BOOL v27 = *(_WORD *)result == 14198 && *(unsigned char *)(result + 2) == 97;
      unint64_t v17 = (unint64_t)"v7-a" & 0xFF;
      unint64_t v18 = (unint64_t)"v7-a" & 0xFFFFFFFFFFFFFF00;
      if (v27) {
        return v17 | v18;
      }
      if (*(_WORD *)result == 14198 && *(unsigned char *)(result + 2) == 108) {
        return v17 | v18;
      }
      if (*(_WORD *)result == 14198 && *(unsigned char *)(result + 2) == 114)
      {
        BOOL v22 = "v7-r";
        goto LABEL_152;
      }
      if (*(_WORD *)result == 14198 && *(unsigned char *)(result + 2) == 109)
      {
        BOOL v22 = "v7-m";
        goto LABEL_152;
      }
      BOOL v31 = *(_WORD *)result == 14454 && *(unsigned char *)(result + 2) == 97;
      unint64_t v17 = (unint64_t)"v8-a" & 0xFF;
      unint64_t v18 = (unint64_t)"v8-a" & 0xFFFFFFFFFFFFFF00;
      if (v31) {
        return v17 | v18;
      }
      if (*(_WORD *)result == 14454 && *(unsigned char *)(result + 2) == 108) {
        return v17 | v18;
      }
      if (*(_WORD *)result == 14454 && *(unsigned char *)(result + 2) == 114)
      {
        BOOL v22 = "v8-r";
        goto LABEL_152;
      }
      if (*(_WORD *)result == 14710 && *(unsigned char *)(result + 2) == 97)
      {
LABEL_157:
        BOOL v22 = "v9-a";
        goto LABEL_152;
      }
      return result;
    case 5:
      if (*(_DWORD *)result == 762525302 && *(unsigned char *)(result + 4) == 109) {
        goto LABEL_150;
      }
      if (*(_DWORD *)result == 913142369 && *(unsigned char *)(result + 4) == 52) {
        goto LABEL_100;
      }
      if (*(_DWORD *)result == 825112694 && *(unsigned char *)(result + 4) == 97)
      {
        unint64_t v19 = "v8.1-a";
LABEL_87:
        unint64_t v17 = v19;
        unint64_t v18 = (unint64_t)v19 & 0xFFFFFFFFFFFFFF00;
        return v17 | v18;
      }
      if (*(_DWORD *)result == 841889910 && *(unsigned char *)(result + 4) == 97)
      {
        unint64_t v19 = "v8.2-a";
        goto LABEL_87;
      }
      if (*(_DWORD *)result == 858667126 && *(unsigned char *)(result + 4) == 97)
      {
        unint64_t v19 = "v8.3-a";
        goto LABEL_87;
      }
      if (*(_DWORD *)result == 875444342 && *(unsigned char *)(result + 4) == 97)
      {
        unint64_t v19 = "v8.4-a";
        goto LABEL_87;
      }
      if (*(_DWORD *)result == 892221558 && *(unsigned char *)(result + 4) == 97)
      {
        unint64_t v19 = "v8.5-a";
        goto LABEL_87;
      }
      if (*(_DWORD *)result == 908998774 && *(unsigned char *)(result + 4) == 97)
      {
        unint64_t v19 = "v8.6-a";
        goto LABEL_87;
      }
      if (*(_DWORD *)result == 925775990 && *(unsigned char *)(result + 4) == 97)
      {
        unint64_t v19 = "v8.7-a";
        goto LABEL_87;
      }
      if (*(_DWORD *)result == 942553206 && *(unsigned char *)(result + 4) == 97)
      {
        unint64_t v19 = "v8.8-a";
        goto LABEL_87;
      }
      if (*(_DWORD *)result == 825112950 && *(unsigned char *)(result + 4) == 97)
      {
        unint64_t v19 = "v9.1-a";
        goto LABEL_87;
      }
      if (*(_DWORD *)result == 841890166 && *(unsigned char *)(result + 4) == 97)
      {
        unint64_t v19 = "v9.2-a";
        goto LABEL_87;
      }
      if (*(_DWORD *)result == 858667382 && *(unsigned char *)(result + 4) == 97)
      {
        unint64_t v19 = "v9.3-a";
        goto LABEL_87;
      }
      return result;
    case 7:
      if (*(_DWORD *)result != 1668440417 || *(_DWORD *)(result + 3) != 875980899) {
        return result;
      }
LABEL_100:
      BOOL v22 = "v8-a";
      goto LABEL_152;
    case 8:
      if (*(void *)result == 0x657361622E6D3876)
      {
        uint64_t v20 = "v8-m.base";
      }
      else
      {
        if (*(void *)result != 0x6E69616D2E6D3876) {
          return result;
        }
        uint64_t v20 = "v8-m.main";
      }
      unint64_t v17 = v20;
      unint64_t v18 = (unint64_t)v20 & 0xFFFFFFFFFFFFFF00;
      return v17 | v18;
    case 10:
      if (*(void *)result != 0x616D2E6D312E3876 || *(_WORD *)(result + 8) != 28265) {
        return result;
      }
      unint64_t v17 = (unint64_t)"v8.1-m.main" & 0xFF;
      unint64_t v18 = (unint64_t)"v8.1-m.main" & 0xFFFFFFFFFFFFFF00;
      return v17 | v18;
    default:
      return result;
  }
}

uint64_t sub_1CD0265E0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    size_t v7 = *(void *)(a1 + 8);
    if (v7 == a3 && (!v7 || !memcmp(*(const void **)a1, a2, v7)))
    {
      *(void *)(a1 + 16) = a4;
      *(void *)(a1 + 24) = a5;
      *(unsigned char *)(a1 + 32) = 1;
    }
  }
  return a1;
}

unsigned __int16 **sub_1CD02664C(unsigned __int16 **result)
{
  if (!*((unsigned char *)result + 32))
  {
    uint64_t v1 = *result;
    int v2 = result[1];
    if (v2 == (unsigned __int16 *)3)
    {
      int v3 = *v1;
      int v4 = *((unsigned __int8 *)v1 + 2);
      if (v3 == 28774 && v4 == 97) {
        goto LABEL_16;
      }
    }
    else if (v2 == (unsigned __int16 *)4)
    {
      if (*(_DWORD *)v1 == 845508710 || *(_DWORD *)v1 == 862285926) {
        goto LABEL_16;
      }
    }
    else if (v2 == (unsigned __int16 *)8 && *(void *)v1 == 0x6B6369726576616DLL)
    {
LABEL_16:
      result[2] = (unsigned __int16 *)"invalid";
      result[3] = (unsigned __int16 *)7;
      *((unsigned char *)result + 32) = 1;
    }
  }
  return result;
}

BOOL llvm::ARM::getFPUFeatures(unsigned int a1, const char ***a2)
{
  unsigned int v48 = a1 - 1;
  if (a1 - 1 <= 0x16)
  {
    uint64_t v47 = a1;
    int v3 = &(&off_1E68519D8)[4 * a1];
    int v4 = *((_DWORD *)v3 + 5);
    unint64_t v5 = (_DWORD *)v3 + 7;
    size_t v6 = off_1E6851828;
    while (1)
    {
      if (v4 >= *((_DWORD *)v6 + 4) && *v5 <= *((_DWORD *)v6 + 5))
      {
        size_t v7 = *v6;
        if (*v6) {
          size_t v8 = strlen(*v6);
        }
        else {
          size_t v8 = 0;
        }
        unint64_t v10 = a2[1];
        unint64_t v19 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v19)
        {
          unint64_t v21 = *a2;
          uint64_t v22 = ((char *)v10 - (char *)*a2) >> 4;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60) {
LABEL_85:
          }
            abort();
          uint64_t v24 = v19 - (void)v21;
          if (v24 >> 3 > v23) {
            unint64_t v23 = v24 >> 3;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v23;
          }
          if (v15)
          {
            if (v15 >> 60) {
LABEL_86:
            }
              sub_1CB833614();
            unint64_t v16 = (char *)operator new(16 * v15);
          }
          else
          {
            unint64_t v16 = 0;
          }
          unint64_t v17 = (const char **)&v16[16 * v22];
          char *v17 = v7;
          v17[1] = (const char *)v8;
          unint64_t v18 = v17;
          if (v10 != v21)
          {
            do
            {
              *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
              v18 -= 2;
              v10 -= 2;
            }
            while (v10 != v21);
LABEL_39:
            unint64_t v10 = *a2;
          }
LABEL_40:
          uint64_t v20 = v17 + 2;
          *a2 = v18;
          a2[1] = v17 + 2;
          a2[2] = (const char **)&v16[16 * v15];
          if (v10) {
            operator delete(v10);
          }
          goto LABEL_42;
        }
      }
      else
      {
        size_t v7 = v6[1];
        if (v7) {
          size_t v8 = strlen(v6[1]);
        }
        else {
          size_t v8 = 0;
        }
        unint64_t v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          unint64_t v11 = *a2;
          uint64_t v12 = ((char *)v10 - (char *)*a2) >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            goto LABEL_85;
          }
          uint64_t v14 = v9 - (void)v11;
          if (v14 >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            if (v15 >> 60) {
              goto LABEL_86;
            }
            unint64_t v16 = (char *)operator new(16 * v15);
          }
          else
          {
            unint64_t v16 = 0;
          }
          unint64_t v17 = (const char **)&v16[16 * v12];
          char *v17 = v7;
          v17[1] = (const char *)v8;
          unint64_t v18 = v17;
          if (v10 != v11)
          {
            do
            {
              *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
              v18 -= 2;
              v10 -= 2;
            }
            while (v10 != v11);
            goto LABEL_39;
          }
          goto LABEL_40;
        }
      }
      int *v10 = v7;
      v10[1] = (const char *)v8;
      uint64_t v20 = v10 + 2;
LABEL_42:
      a2[1] = v20;
      v6 += 3;
      if (v6 == &off_1E68519D8)
      {
        int v25 = (int)(&off_1E68519D8)[4 * v47 + 3];
        uint64_t v26 = off_1E6851CD8;
        while (1)
        {
          if (v25 >= *((_DWORD *)v26 + 4))
          {
            BOOL v27 = *v26;
            if (*v26) {
              size_t v28 = strlen(*v26);
            }
            else {
              size_t v28 = 0;
            }
            unint64_t v36 = (unint64_t)a2[2];
            if ((unint64_t)v20 >= v36)
            {
              uint64_t v38 = *a2;
              uint64_t v39 = ((char *)v20 - (char *)*a2) >> 4;
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 60) {
                goto LABEL_85;
              }
              uint64_t v41 = v36 - (void)v38;
              if (v41 >> 3 > v40) {
                unint64_t v40 = v41 >> 3;
              }
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v40;
              }
              if (v42)
              {
                if (v42 >> 60) {
                  goto LABEL_86;
                }
                long long v43 = (char *)operator new(16 * v42);
              }
              else
              {
                long long v43 = 0;
              }
              unint64_t v44 = (const char **)&v43[16 * v39];
              uint64_t v45 = &v43[16 * v42];
              uint64_t *v44 = v27;
              v44[1] = (const char *)v28;
              BOOL v37 = v44 + 2;
              if (v20 != v38)
              {
                do
                {
                  *((_OWORD *)v44 - 1) = *((_OWORD *)v20 - 1);
                  v44 -= 2;
                  v20 -= 2;
                }
                while (v20 != v38);
                goto LABEL_79;
              }
LABEL_81:
              *a2 = v44;
              a2[1] = v37;
              a2[2] = (const char **)v45;
LABEL_82:
              operator delete(v20);
              goto LABEL_83;
            }
          }
          else
          {
            BOOL v27 = v26[1];
            if (v27) {
              size_t v28 = strlen(v26[1]);
            }
            else {
              size_t v28 = 0;
            }
            unint64_t v29 = (unint64_t)a2[2];
            if ((unint64_t)v20 >= v29)
            {
              uint64_t v30 = *a2;
              uint64_t v31 = ((char *)v20 - (char *)*a2) >> 4;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 60) {
                goto LABEL_85;
              }
              uint64_t v33 = v29 - (void)v30;
              if (v33 >> 3 > v32) {
                unint64_t v32 = v33 >> 3;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                if (v34 >> 60) {
                  goto LABEL_86;
                }
                long long v35 = (char *)operator new(16 * v34);
              }
              else
              {
                long long v35 = 0;
              }
              unint64_t v44 = (const char **)&v35[16 * v31];
              uint64_t v45 = &v35[16 * v34];
              uint64_t *v44 = v27;
              v44[1] = (const char *)v28;
              BOOL v37 = v44 + 2;
              if (v20 == v30) {
                goto LABEL_81;
              }
              do
              {
                *((_OWORD *)v44 - 1) = *((_OWORD *)v20 - 1);
                v44 -= 2;
                v20 -= 2;
              }
              while (v20 != v30);
LABEL_79:
              uint64_t v20 = *a2;
              *a2 = v44;
              a2[1] = v37;
              a2[2] = (const char **)v45;
              if (!v20) {
                goto LABEL_83;
              }
              goto LABEL_82;
            }
          }
          *uint64_t v20 = v27;
          v20[1] = (const char *)v28;
          BOOL v37 = v20 + 2;
LABEL_83:
          a2[1] = v37;
          v26 += 3;
          uint64_t v20 = v37;
          if (v26 == &off_1E6851D20) {
            return v48 < 0x17;
          }
        }
      }
    }
  }
  return v48 < 0x17;
}

uint64_t llvm::ARM::parseArchISA(unsigned __int16 *a1, unint64_t a2)
{
  if (a2 >= 7)
  {
    if (*(_DWORD *)a1 ^ 0x63726161 | *(_DWORD *)((char *)a1 + 3) ^ 0x34366863) {
      unint64_t v2 = 0;
    }
    else {
      unint64_t v2 = 0x100000003;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }
  if (a2 >= 5 && !HIDWORD(v2) && !(*(_DWORD *)a1 ^ 0x366D7261 | *((unsigned __int8 *)a1 + 4) ^ 0x34)) {
    unint64_t v2 = 0x100000003;
  }
  uint64_t v3 = v2 & 0x100000000;
  if (a2 >= 5 && !v3 && (*(_DWORD *)a1 == 1836410996 ? (BOOL v4 = *((unsigned char *)a1 + 4) == 98) : (BOOL v4 = 0), v4))
  {
    unint64_t v2 = 0x100000002;
  }
  else if (a2 >= 3 && !v3 && !(*a1 ^ 0x7261 | *((unsigned __int8 *)a1 + 2) ^ 0x6D))
  {
    unint64_t v2 = 0x100000001;
  }
  if ((v2 & 0xFF00000000) != 0) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t llvm::ARM::getFPUNeonSupportLevel(llvm::ARM *this)
{
  if (this <= 0x17) {
    return LODWORD((&off_1E68519D8)[4 * this + 3]);
  }
  else {
    return 0;
  }
}

char *llvm::ARM::getFPUName(llvm::ARM *this)
{
  if (this <= 0x17) {
    return (&off_1E68519D8)[4 * this];
  }
  else {
    return 0;
  }
}

uint64_t llvm::ARM::getFPUVersion(llvm::ARM *this)
{
  if (this <= 0x17) {
    return *((unsigned int *)&off_1E68519D8 + 8 * this + 5);
  }
  else {
    return 0;
  }
}

uint64_t llvm::ARM::getFPURestriction(llvm::ARM *this)
{
  if (this <= 0x17) {
    return *((unsigned int *)&off_1E68519D8 + 8 * this + 7);
  }
  else {
    return 0;
  }
}

uint64_t llvm::ARM::getDefaultFPU(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a2 == 7)
  {
    if (*(_DWORD *)a1 == 1701733735 && *(_DWORD *)(a1 + 3) == 1667854949) {
      return LODWORD((&off_1E6850C58)[9 * a3 + 6]);
    }
    int v4 = 0;
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    unint64_t v8 = 0;
LABEL_7:
    BOOL v9 = HIDWORD(v8) == 0;
LABEL_8:
    BOOL v10 = a2 == 10;
    if (a2 == 10 && v9)
    {
      if (*(void *)a1 == 0x696D6474376D7261 && *(_WORD *)(a1 + 8) == 29485) {
        goto LABEL_404;
      }
      uint64_t v12 = v8 & 0x100000000;
      BOOL v10 = 1;
    }
    else
    {
      uint64_t v12 = v8 & 0x100000000;
      if (a2 == 7 && !v12)
      {
        if (*(_DWORD *)a1 == 929919585 && *(_DWORD *)(a1 + 3) == 1949315383) {
          goto LABEL_404;
        }
        if (*(_DWORD *)a1 == 929919585 && *(_DWORD *)(a1 + 3) == 1949315639) {
          goto LABEL_404;
        }
        uint64_t v12 = 0;
      }
    }
    BOOL v15 = v12 == 0;
    if (v12) {
      int v5 = 0;
    }
    if (v5 == 1)
    {
      if (*(_DWORD *)a1 == 963474017) {
        goto LABEL_404;
      }
      BOOL v15 = 1;
    }
    int v16 = v6 & v15;
    if ((v6 & v15) == 1 && *(_DWORD *)a1 == 963474017 && *(_WORD *)(a1 + 4) == 12338) {
      goto LABEL_404;
    }
    BOOL v18 = a2 == 7 && v15;
    if (v18)
    {
      if (*(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949315641) {
        goto LABEL_404;
      }
      if (*(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949446713) {
        goto LABEL_404;
      }
      if (*(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949316153) {
        goto LABEL_404;
      }
    }
    if (v16)
    {
      if (*(_DWORD *)a1 == 859402341 && *(_WORD *)(a1 + 4) == 12849) {
        goto LABEL_404;
      }
    }
    int v23 = v4 & v15;
    if ((v4 & v15) == 1 && *(void *)a1 == 0x6D647430316D7261 && *(unsigned char *)(a1 + 8) == 105) {
      goto LABEL_404;
    }
    BOOL v25 = a2 == 5 && v15;
    if (v25 && *(_DWORD *)a1 == 963474017 && *(unsigned char *)(a1 + 4) == 101) {
      goto LABEL_404;
    }
    if (v23)
    {
      if (*(void *)a1 == 0x2D653634396D7261 && *(unsigned char *)(a1 + 8) == 115) {
        goto LABEL_404;
      }
      if (*(void *)a1 == 0x2D653636396D7261 && *(unsigned char *)(a1 + 8) == 115) {
        goto LABEL_404;
      }
      if (*(void *)a1 == 0x2D653836396D7261 && *(unsigned char *)(a1 + 8) == 115) {
        goto LABEL_404;
      }
    }
    if (v16)
    {
      if (*(_DWORD *)a1 == 829256289 && *(_WORD *)(a1 + 4) == 25904) {
        goto LABEL_404;
      }
    }
    int v31 = v10 && v15;
    if (v31 == 1)
    {
      if (*(void *)a1 == 0x6A653632396D7261 && *(_WORD *)(a1 + 8) == 29485) {
        goto LABEL_404;
      }
      if (*(void *)a1 == 0x6A363331316D7261 && *(_WORD *)(a1 + 8) == 29485) {
        goto LABEL_404;
      }
      BOOL v15 = 1;
    }
    BOOL v34 = a2 == 11 && v15;
    if (v34 && *(void *)a1 == 0x6A363331316D7261 && *(void *)(a1 + 3) == 0x732D666A36333131) {
      goto LABEL_409;
    }
    if (v16)
    {
      if (*(_DWORD *)a1 == 1868787821 && *(_WORD *)(a1 + 4) == 25970) {
        goto LABEL_409;
      }
    }
    if (v34)
    {
      if (*(void *)a1 == 0x6F6E65726F63706DLL && *(void *)(a1 + 3) == 0x7066766F6E65726FLL) {
        goto LABEL_404;
      }
      if (*(void *)a1 == 0x6A363731316D7261 && *(void *)(a1 + 3) == 0x732D7A6A36373131) {
        goto LABEL_404;
      }
    }
    int v39 = v7 & v15;
    if ((v7 & v15) == 1 && *(void *)a1 == 0x6A363731316D7261 && *(_DWORD *)(a1 + 8) == 1932355194) {
      goto LABEL_409;
    }
    if (v34 && *(void *)a1 == 0x74363531316D7261 && *(void *)(a1 + 3) == 0x732D327436353131) {
      goto LABEL_404;
    }
    if (v39)
    {
      if (*(void *)a1 == 0x74363531316D7261 && *(_DWORD *)(a1 + 8) == 1932355122)
      {
LABEL_409:
        uint64_t v45 = 0x100000003;
        goto LABEL_405;
      }
    }
    if (v23)
    {
      if (*(void *)a1 == 0x6D2D786574726F63 && *(unsigned char *)(a1 + 8) == 48) {
        goto LABEL_404;
      }
      int v23 = 1;
    }
  }
  else
  {
    unint64_t v8 = 0;
    int v4 = 0;
    BOOL v9 = 1;
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    switch(a2)
    {
      case 4:
        int v4 = 0;
        int v6 = 0;
        int v7 = 0;
        unint64_t v8 = 0x100000001;
        if (*(_DWORD *)a1 != 946696801) {
          unint64_t v8 = 0;
        }
        int v5 = 1;
        goto LABEL_7;
      case 6:
        int v4 = 0;
        int v5 = 0;
        int v7 = 0;
        unint64_t v8 = 0x100000001;
        if (*(_DWORD *)a1 ^ 0x386D7261 | *(unsigned __int16 *)(a1 + 4) ^ 0x3031) {
          unint64_t v8 = 0;
        }
        int v6 = 1;
        goto LABEL_7;
      case 8:
        if (*(void *)a1 == 0x696D6474376D7261)
        {
          BOOL v34 = 0;
          int v16 = 0;
          int v5 = 0;
          int v48 = 0;
          int v49 = 0;
          BOOL v18 = 0;
          int v23 = 0;
          BOOL v25 = 0;
          int v31 = 0;
          int v39 = 0;
          goto LABEL_173;
        }
        if (*(void *)a1 == 0x696D6474396D7261 || *(void *)a1 == 0x74303230316D7261) {
          goto LABEL_404;
        }
        uint64_t v45 = 0x100000001;
        if (*(void *)a1 != 0x65303230316D7261 && *(void *)a1 != 0x65323230316D7261) {
          uint64_t v45 = 0;
        }
        goto LABEL_405;
      case 9:
        int v5 = 0;
        int v6 = 0;
        int v7 = 0;
        unint64_t v8 = 0x100000001;
        if (*(void *)a1 ^ 0x7261676E6F727473 | *(unsigned __int8 *)(a1 + 8) ^ 0x6DLL) {
          unint64_t v8 = 0;
        }
        int v4 = 1;
        goto LABEL_7;
      case 12:
        int v4 = 0;
        int v5 = 0;
        int v6 = 0;
        unint64_t v8 = 0x100000001;
        if (*(void *)a1 ^ 0x7261676E6F727473 | *(unsigned int *)(a1 + 8) ^ 0x3031316DLL) {
          unint64_t v8 = 0;
        }
        int v7 = 1;
        goto LABEL_7;
      case 13:
        BOOL v46 = *(void *)a1 == 0x7261676E6F727473 && *(void *)(a1 + 5) == 0x303031316D726167;
        if (v46
          || (*(void *)a1 == 0x7261676E6F727473 ? (BOOL v47 = *(void *)(a1 + 5) == 0x303131316D726167) : (BOOL v47 = 0),
              v47))
        {
          BOOL v34 = 0;
          int v16 = 0;
          int v5 = 0;
          int v48 = 0;
          BOOL v18 = 0;
          int v23 = 0;
          BOOL v25 = 0;
          int v31 = 0;
          int v39 = 0;
          int v49 = 1;
LABEL_173:
          unint64_t v8 = 0x100000001;
          if (!v49) {
            break;
          }
        }
        else
        {
          BOOL v34 = 0;
          int v16 = 0;
          int v5 = 0;
          unint64_t v8 = 0;
          BOOL v18 = 0;
          int v23 = 0;
          BOOL v25 = 0;
          int v31 = 0;
          int v39 = 0;
          int v48 = 1;
        }
        if (v48)
        {
          if (*(void *)a1 == 0x6D2D786574726F63 && *(void *)(a1 + 5) == 0x73756C70306D2D78) {
            goto LABEL_404;
          }
        }
        break;
      default:
        goto LABEL_8;
    }
  }
  if (v23)
  {
    if (*(void *)a1 == 0x6D2D786574726F63 && *(unsigned char *)(a1 + 8) == 49) {
      goto LABEL_404;
    }
  }
  if (v25 && *(_DWORD *)a1 == 808477555 && *(unsigned char *)(a1 + 4) == 48) {
    goto LABEL_404;
  }
  uint64_t v45 = 0x100000016;
  if (v23)
  {
    BOOL v53 = *(void *)a1 == 0x612D786574726F63 && *(unsigned char *)(a1 + 8) == 53;
    uint64_t v54 = 0x100000014;
    if (v53) {
      goto LABEL_408;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(unsigned char *)(a1 + 8) == 55) {
      goto LABEL_408;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(unsigned char *)(a1 + 8) == 56)
    {
      uint64_t v45 = 0x100000012;
      goto LABEL_405;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(unsigned char *)(a1 + 8) == 57)
    {
      uint64_t v45 = 0x100000013;
      goto LABEL_405;
    }
  }
  if (v31)
  {
    BOOL v58 = *(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12849;
    if (v58
      || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v59 = *(unsigned __int16 *)(a1 + 8) == 13617) : (BOOL v59 = 0),
          v59
       || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v60 = *(unsigned __int16 *)(a1 + 8) == 14129) : (BOOL v60 = 0), v60)))
    {
      uint64_t v45 = 0x100000014;
      goto LABEL_405;
    }
  }
  if (v25 && *(_DWORD *)a1 == 1767993963 && *(unsigned char *)(a1 + 4) == 116)
  {
    uint64_t v45 = 0x100000014;
    goto LABEL_405;
  }
  if (v23)
  {
    if (*(void *)a1 == 0x722D786574726F63 && *(unsigned char *)(a1 + 8) == 52) {
      goto LABEL_404;
    }
  }
  if (v31)
  {
    if (*(void *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 26164)
    {
LABEL_411:
      uint64_t v45 = 0x100000006;
      goto LABEL_405;
    }
  }
  if (v23)
  {
    if (*(void *)a1 != 0x722D786574726F63 || *(unsigned char *)(a1 + 8) != 53)
    {
      BOOL v65 = *(void *)a1 == 0x722D786574726F63 && *(unsigned char *)(a1 + 8) == 55;
      uint64_t v54 = 0x100000007;
      if (!v65 && (*(void *)a1 != 0x722D786574726F63 || *(unsigned char *)(a1 + 8) != 56)) {
        goto LABEL_247;
      }
LABEL_408:
      uint64_t v45 = v54;
      goto LABEL_405;
    }
    goto LABEL_411;
  }
LABEL_247:
  if (v31)
  {
    if (*(void *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 12853)
    {
LABEL_416:
      uint64_t v45 = 0x100000015;
      goto LABEL_405;
    }
  }
  if (v25 && *(_DWORD *)a1 == 808674163 && *(unsigned char *)(a1 + 4) == 48) {
    goto LABEL_404;
  }
  if (v23)
  {
    if (*(void *)a1 == 0x6D2D786574726F63 && *(unsigned char *)(a1 + 8) == 51) {
      goto LABEL_404;
    }
    if (*(void *)a1 == 0x6D2D786574726F63 && *(unsigned char *)(a1 + 8) == 52)
    {
      uint64_t v45 = 0x10000000CLL;
      goto LABEL_405;
    }
    if (*(void *)a1 == 0x6D2D786574726F63 && *(unsigned char *)(a1 + 8) == 55)
    {
      uint64_t v45 = 0x10000000DLL;
      goto LABEL_405;
    }
  }
  if (!v31) {
    goto LABEL_279;
  }
  if (*(void *)a1 == 0x6D2D786574726F63 && *(_WORD *)(a1 + 8) == 13106)
  {
LABEL_404:
    uint64_t v45 = 0x100000001;
    goto LABEL_405;
  }
  if (*(void *)a1 == 0x6D2D786574726F63 && *(_WORD *)(a1 + 8) == 13107) {
    goto LABEL_417;
  }
LABEL_279:
  if (v34 && *(void *)a1 == 0x6D2D786574726F63 && *(void *)(a1 + 3) == 0x7035336D2D786574)
  {
LABEL_417:
    uint64_t v45 = 0x10000000ELL;
    goto LABEL_405;
  }
  if (!v31)
  {
LABEL_325:
    if (v39)
    {
      if (*(void *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869687) {
        goto LABEL_405;
      }
    }
    if (v31)
    {
      if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14135) {
        goto LABEL_405;
      }
      if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14391) {
        goto LABEL_405;
      }
    }
    if (!v34) {
      goto LABEL_390;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(void *)(a1 + 3) == 0x633837612D786574) {
      goto LABEL_405;
    }
    if (*(void *)a1 != 0x612D786574726F63 || *(void *)(a1 + 3) != 0x303137612D786574)
    {
LABEL_390:
      if (v23)
      {
        if (*(void *)a1 == 0x782D786574726F63 && *(unsigned char *)(a1 + 8) == 49) {
          goto LABEL_405;
        }
      }
      if (v31)
      {
        if (*(void *)a1 == 0x782D786574726F63 && *(_WORD *)(a1 + 8) == 25393) {
          goto LABEL_405;
        }
      }
      if (v34)
      {
        if (*(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 3) == 0x316E2D6573726576) {
          goto LABEL_405;
        }
        if (*(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 3) == 0x326E2D6573726576) {
          goto LABEL_405;
        }
        if (*(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 3) == 0x31762D6573726576) {
          goto LABEL_405;
        }
      }
      if (v18 && *(_DWORD *)a1 == 1818458467 && *(_DWORD *)(a1 + 3) == 1701736300) {
        goto LABEL_405;
      }
      if (v23)
      {
        if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 51) {
          goto LABEL_405;
        }
        if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 52) {
          goto LABEL_405;
        }
        if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 53) {
          goto LABEL_405;
        }
      }
      if (v5 && *(_DWORD *)a1 == 1870230123) {
        goto LABEL_405;
      }
      if (!v16
        || (*(_DWORD *)a1 == 1835890537 ? (BOOL v99 = *(unsigned __int16 *)(a1 + 4) == 29816) : (BOOL v99 = 0),
            !v99 && (*(_DWORD *)a1 == 1633907576 ? (BOOL v100 = *(unsigned __int16 *)(a1 + 4) == 25964) : (BOOL v100 = 0), !v100)))
      {
        if (v25)
        {
          if (*(_DWORD *)a1 ^ 0x66697773 | *(unsigned __int8 *)(a1 + 4) ^ 0x74) {
            uint64_t v45 = v8;
          }
          else {
            uint64_t v45 = 0x100000014;
          }
        }
        else if (v18)
        {
          if (*(_DWORD *)a1 ^ 0x61766E69 | *(_DWORD *)(a1 + 3) ^ 0x64696C61) {
            uint64_t v45 = v8;
          }
          else {
            uint64_t v45 = 0x100000000;
          }
        }
        else
        {
          uint64_t v45 = v8;
        }
        goto LABEL_405;
      }
      goto LABEL_404;
    }
    goto LABEL_416;
  }
  if (*(void *)a1 != 0x6D2D786574726F63 || *(_WORD *)(a1 + 8) != 13621)
  {
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12851) {
      goto LABEL_405;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13619) {
      goto LABEL_405;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13109) {
      goto LABEL_405;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13621) {
      goto LABEL_405;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14133) {
      goto LABEL_405;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12855) {
      goto LABEL_405;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13111) {
      goto LABEL_405;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13623) {
      goto LABEL_405;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13879) {
      goto LABEL_405;
    }
    goto LABEL_325;
  }
  uint64_t v45 = 0x100000010;
LABEL_405:
  if ((v45 & 0xFF00000000) != 0) {
    return v45;
  }
  else {
    return 0;
  }
}

char *llvm::ARM::getDefaultExtensions(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a2 == 7)
  {
    if (*(_DWORD *)a1 == 1701733735 && *(_DWORD *)(a1 + 3) == 1667854949) {
      return (&off_1E6850C58)[9 * a3 + 7];
    }
    int v4 = 0;
    char v5 = 0;
    char v6 = 0;
    char v7 = 0;
    BOOL v8 = 0;
LABEL_7:
    int v9 = !v8;
LABEL_8:
    BOOL v10 = a2 == 10;
    if (a2 == 10 && v9)
    {
      BOOL v8 = *(void *)a1 == 0x696D6474376D7261 && *(_WORD *)(a1 + 8) == 29485;
      BOOL v10 = 1;
    }
    else
    {
      char v12 = v9 ^ 1;
      if (a2 != 7) {
        char v12 = 1;
      }
      if ((v12 & 1) == 0) {
        BOOL v8 = *(_DWORD *)a1 == 929919585 && *(_DWORD *)(a1 + 3) == 1949315383;
      }
      if (a2 == 7 && !v8) {
        BOOL v8 = *(_DWORD *)a1 == 929919585 && *(_DWORD *)(a1 + 3) == 1949315639;
      }
    }
    char v15 = v5 ^ 1;
    if (v8) {
      char v15 = 1;
    }
    if ((v15 & 1) == 0)
    {
      BOOL v8 = *(_DWORD *)a1 == 963474017;
      char v5 = 1;
    }
    char v16 = v6 ^ 1;
    if (v8) {
      char v16 = 1;
    }
    if ((v16 & 1) == 0) {
      BOOL v8 = *(_DWORD *)a1 == 963474017 && *(_WORD *)(a1 + 4) == 12338;
    }
    if (a2 == 7 && !v8) {
      BOOL v8 = *(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949315641;
    }
    if (a2 == 7 && !v8) {
      BOOL v8 = *(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949446713;
    }
    if (a2 == 7 && !v8) {
      BOOL v8 = *(_DWORD *)a1 == 963474017 && *(_DWORD *)(a1 + 3) == 1949316153;
    }
    char v21 = v6 ^ 1;
    if (v8) {
      char v21 = 1;
    }
    if ((v21 & 1) == 0) {
      BOOL v8 = *(_DWORD *)a1 == 859402341 && *(_WORD *)(a1 + 4) == 12849;
    }
    char v23 = v4 ^ 1;
    if (v8) {
      char v23 = 1;
    }
    if ((v23 & 1) == 0) {
      BOOL v8 = *(void *)a1 == 0x6D647430316D7261 && *(unsigned char *)(a1 + 8) == 105;
    }
    uint64_t v25 = 0;
    BOOL v26 = a2 == 5;
    if (a2 == 5 && !v8)
    {
      BOOL v8 = *(_DWORD *)a1 == 963474017 && *(unsigned char *)(a1 + 4) == 101;
      uint64_t v25 = 4 * v8;
      BOOL v26 = 1;
    }
    char v28 = v4 ^ 1;
    if (v8) {
      char v29 = 1;
    }
    else {
      char v29 = v4 ^ 1;
    }
    if ((v29 & 1) == 0)
    {
      LOBYTE(v8) = *(void *)a1 == 0x2D653634396D7261 && *(unsigned char *)(a1 + 8) == 115;
      if (v8) {
        uint64_t v25 = 4;
      }
    }
    if (v8) {
      char v28 = 1;
    }
    if ((v28 & 1) == 0)
    {
      LOBYTE(v8) = *(void *)a1 == 0x2D653636396D7261 && *(unsigned char *)(a1 + 8) == 115;
      if (v8) {
        uint64_t v25 = 4;
      }
    }
    char v30 = v4 ^ 1;
    if (v8) {
      char v30 = 1;
    }
    if ((v30 & 1) == 0)
    {
      LOBYTE(v8) = *(void *)a1 == 0x2D653836396D7261 && *(unsigned char *)(a1 + 8) == 115;
      if (v8) {
        uint64_t v25 = 4;
      }
    }
    char v31 = v6 ^ 1;
    if (v8) {
      char v31 = 1;
    }
    if ((v31 & 1) == 0)
    {
      LOBYTE(v8) = *(_DWORD *)a1 == 829256289 && *(_WORD *)(a1 + 4) == 25904;
      if (v8) {
        uint64_t v25 = 4;
      }
    }
    char v32 = !v10;
    char v33 = v8 || !v10;
    if ((v33 & 1) == 0)
    {
      LOBYTE(v8) = *(void *)a1 == 0x6A653632396D7261 && *(_WORD *)(a1 + 8) == 29485;
      if (v8) {
        uint64_t v25 = 4;
      }
    }
    if (v8) {
      char v32 = 1;
    }
    if (v32)
    {
      char v34 = 0;
    }
    else
    {
      char v34 = 0;
      LOBYTE(v8) = *(void *)a1 == 0x6A363331316D7261 && *(_WORD *)(a1 + 8) == 29485;
      if (v8) {
        uint64_t v25 = 4;
      }
      BOOL v10 = 1;
    }
  }
  else
  {
    BOOL v8 = 0;
    int v9 = 1;
    int v4 = 0;
    char v5 = 0;
    char v6 = 0;
    char v7 = 0;
    switch(a2)
    {
      case 4:
        int v4 = 0;
        char v6 = 0;
        char v7 = 0;
        BOOL v8 = *(_DWORD *)a1 == 946696801;
        char v5 = 1;
        goto LABEL_7;
      case 6:
        int v4 = 0;
        char v5 = 0;
        char v7 = 0;
        BOOL v8 = *(_DWORD *)a1 == 946696801 && *(_WORD *)(a1 + 4) == 12337;
        char v6 = 1;
        goto LABEL_7;
      case 8:
        if (*(void *)a1 == 0x696D6474376D7261 || *(void *)a1 == 0x696D6474396D7261)
        {
          char v34 = 0;
          goto LABEL_173;
        }
        LOBYTE(v8) = *(void *)a1 == 0x74303230316D7261;
        if (*(void *)a1 == 0x74303230316D7261)
        {
          uint64_t v25 = 0;
        }
        else
        {
          LOBYTE(v8) = *(void *)a1 == 0x65303230316D7261;
          uint64_t v25 = 4 * v8;
        }
        BOOL v10 = 0;
        char v7 = 0;
        char v6 = 0;
        char v5 = 0;
        int v4 = 0;
        char v34 = 0;
        BOOL v26 = 0;
        if (!v8)
        {
          LOBYTE(v8) = *(void *)a1 == 0x65323230316D7261;
          if (*(void *)a1 == 0x65323230316D7261) {
            uint64_t v25 = 4;
          }
        }
        break;
      case 9:
        char v5 = 0;
        char v6 = 0;
        char v7 = 0;
        BOOL v8 = *(void *)a1 == 0x7261676E6F727473 && *(unsigned char *)(a1 + 8) == 109;
        int v4 = 1;
        goto LABEL_7;
      case 12:
        int v4 = 0;
        char v5 = 0;
        char v6 = 0;
        BOOL v8 = *(void *)a1 == 0x7261676E6F727473 && *(_DWORD *)(a1 + 8) == 808530285;
        char v7 = 1;
        goto LABEL_7;
      case 13:
        if (*(void *)a1 == 0x7261676E6F727473 && *(void *)(a1 + 5) == 0x303031316D726167)
        {
          char v34 = 1;
LABEL_173:
          LOBYTE(v8) = 1;
        }
        else
        {
          LOBYTE(v8) = *(void *)a1 == 0x7261676E6F727473 && *(void *)(a1 + 5) == 0x303131316D726167;
          char v34 = 1;
        }
        BOOL v10 = 0;
        char v7 = 0;
        char v6 = 0;
        char v5 = 0;
        int v4 = 0;
        BOOL v26 = 0;
        uint64_t v25 = 0;
        break;
      default:
        goto LABEL_8;
    }
  }
  if (a2 == 11 && !v8)
  {
    LOBYTE(v8) = *(void *)a1 == 0x6A363331316D7261 && *(void *)(a1 + 3) == 0x732D666A36333131;
    if (v8) {
      uint64_t v25 = 4;
    }
  }
  char v41 = v6 ^ 1;
  if (v8) {
    char v41 = 1;
  }
  if ((v41 & 1) == 0)
  {
    LOBYTE(v8) = *(_DWORD *)a1 == 1868787821 && *(_WORD *)(a1 + 4) == 25970;
    if (v8) {
      uint64_t v25 = 4;
    }
  }
  if (a2 == 11 && !v8)
  {
    LOBYTE(v8) = *(void *)a1 == 0x6F6E65726F63706DLL && *(void *)(a1 + 3) == 0x7066766F6E65726FLL;
    if (v8) {
      uint64_t v25 = 4;
    }
  }
  if (a2 == 11 && !v8)
  {
    LOBYTE(v8) = *(void *)a1 == 0x6A363731316D7261 && *(void *)(a1 + 3) == 0x732D7A6A36373131;
    if (v8) {
      uint64_t v25 = 5;
    }
  }
  char v42 = v7 ^ 1;
  if (v8) {
    char v42 = 1;
  }
  if ((v42 & 1) == 0)
  {
    LOBYTE(v8) = *(void *)a1 == 0x6A363731316D7261 && *(_DWORD *)(a1 + 8) == 1932355194;
    if (v8) {
      uint64_t v25 = 5;
    }
  }
  if (a2 == 11 && !v8)
  {
    LOBYTE(v8) = *(void *)a1 == 0x74363531316D7261 && *(void *)(a1 + 3) == 0x732D327436353131;
    if (v8) {
      uint64_t v25 = 4;
    }
  }
  char v43 = v7 ^ 1;
  if (v8) {
    char v43 = 1;
  }
  if ((v43 & 1) == 0)
  {
    LOBYTE(v8) = *(void *)a1 == 0x74363531316D7261 && *(_DWORD *)(a1 + 8) == 1932355122;
    if (v8) {
      uint64_t v25 = 4;
    }
  }
  char v44 = v4 ^ 1;
  if (v8) {
    char v44 = 1;
  }
  if ((v44 & 1) == 0)
  {
    LOBYTE(v8) = *(void *)a1 == 0x6D2D786574726F63 && *(unsigned char *)(a1 + 8) == 48;
    if (v8) {
      uint64_t v25 = 0;
    }
  }
  char v45 = v34 ^ 1;
  if (v8) {
    char v45 = 1;
  }
  if ((v45 & 1) == 0)
  {
    LOBYTE(v8) = *(void *)a1 == 0x6D2D786574726F63 && *(void *)(a1 + 5) == 0x73756C70306D2D78;
    if (v8) {
      uint64_t v25 = 0;
    }
  }
  char v46 = v4 ^ 1;
  if (v8) {
    char v46 = 1;
  }
  if ((v46 & 1) == 0)
  {
    LOBYTE(v8) = *(void *)a1 == 0x6D2D786574726F63 && *(unsigned char *)(a1 + 8) == 49;
    if (v8) {
      uint64_t v25 = 0;
    }
  }
  char v47 = !v26;
  if (v8) {
    char v47 = 1;
  }
  if ((v47 & 1) == 0)
  {
    LOBYTE(v8) = *(_DWORD *)a1 == 808477555 && *(unsigned char *)(a1 + 4) == 48;
    if (v8) {
      uint64_t v25 = 0;
    }
  }
  if (v8) {
    int v4 = 0;
  }
  if (v4 == 1)
  {
    if (*(void *)a1 != 0x612D786574726F63 || *(unsigned char *)(a1 + 8) != 53)
    {
      if (*(void *)a1 == 0x612D786574726F63 && *(unsigned char *)(a1 + 8) == 55) {
        goto LABEL_427;
      }
      if (*(void *)a1 == 0x612D786574726F63 && *(unsigned char *)(a1 + 8) == 56)
      {
        uint64_t v94 = 0;
        goto LABEL_432;
      }
      if (*(void *)a1 != 0x612D786574726F63 || *(unsigned char *)(a1 + 8) != 57) {
        goto LABEL_245;
      }
    }
    uint64_t v94 = 64;
LABEL_432:
    uint64_t v95 = 1280;
    return (char *)(v94 | v95);
  }
LABEL_245:
  BOOL v52 = !v8 && v10;
  if (v52)
  {
    BOOL v53 = *(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12849;
    if (v53
      || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v54 = *(unsigned __int16 *)(a1 + 8) == 13617) : (BOOL v54 = 0),
          v54
       || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v55 = *(unsigned __int16 *)(a1 + 8) == 14129) : (BOOL v55 = 0), v55)))
    {
LABEL_427:
      uint64_t v94 = 112;
LABEL_428:
      uint64_t v95 = 1792;
      return (char *)(v94 | v95);
    }
  }
  BOOL v56 = !v8 && v26;
  if (v56 && *(_DWORD *)a1 == 1767993963 && *(unsigned char *)(a1 + 4) == 116)
  {
LABEL_490:
    uint64_t v94 = 48;
    goto LABEL_491;
  }
  if (v4)
  {
    if (*(void *)a1 == 0x722D786574726F63 && *(unsigned char *)(a1 + 8) == 52) {
      goto LABEL_430;
    }
  }
  if (v52 && *(void *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 26164) {
    goto LABEL_430;
  }
  if (v4)
  {
    BOOL v60 = *(void *)a1 == 0x722D786574726F63 && *(unsigned char *)(a1 + 8) == 53;
    if (v60
      || (*(void *)a1 == 0x722D786574726F63 ? (BOOL v61 = *(unsigned char *)(a1 + 8) == 55) : (BOOL v61 = 0),
          v61 || (*(void *)a1 == 0x722D786574726F63 ? (BOOL v62 = *(unsigned char *)(a1 + 8) == 56) : (BOOL v62 = 0), v62)))
    {
      uint64_t v94 = 112;
      goto LABEL_491;
    }
  }
  if (v52 && *(void *)a1 == 0x722D786574726F63 && *(_WORD *)(a1 + 8) == 12853)
  {
    uint64_t v94 = 115;
    uint64_t v95 = 1536;
    return (char *)(v94 | v95);
  }
  if (v56 && *(_DWORD *)a1 == 808674163 && *(unsigned char *)(a1 + 4) == 48) {
    goto LABEL_434;
  }
  if (v4)
  {
    if (*(void *)a1 == 0x6D2D786574726F63 && *(unsigned char *)(a1 + 8) == 51) {
      goto LABEL_434;
    }
    BOOL v66 = *(void *)a1 == 0x6D2D786574726F63 && *(unsigned char *)(a1 + 8) == 52;
    if (v66 || (*(void *)a1 == 0x6D2D786574726F63 ? (BOOL v67 = *(unsigned char *)(a1 + 8) == 55) : (BOOL v67 = 0), v67))
    {
LABEL_430:
      uint64_t v94 = 17;
LABEL_491:
      uint64_t v95 = 1024;
      return (char *)(v94 | v95);
    }
  }
  if (!v52) {
    goto LABEL_324;
  }
  if (*(void *)a1 == 0x6D2D786574726F63 && *(_WORD *)(a1 + 8) == 13106)
  {
LABEL_434:
    uint64_t v95 = 0;
    uint64_t v94 = 17;
    return (char *)(v94 | v95);
  }
  if (*(void *)a1 == 0x6D2D786574726F63 && *(_WORD *)(a1 + 8) == 13107) {
    goto LABEL_441;
  }
LABEL_324:
  BOOL v70 = !v8 && a2 == 11;
  int v71 = v70;
  if (v70 && *(void *)a1 == 0x6D2D786574726F63 && *(void *)(a1 + 3) == 0x7035336D2D786574)
  {
LABEL_441:
    uint64_t v94 = 16;
    goto LABEL_491;
  }
  if (v52)
  {
    if (*(void *)a1 == 0x6D2D786574726F63 && *(_WORD *)(a1 + 8) == 13621)
    {
      uint64_t v94 = 152;
      uint64_t v95 = 531456;
      return (char *)(v94 | v95);
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 12851) {
      goto LABEL_494;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13619) {
      goto LABEL_494;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13109) {
      goto LABEL_494;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13621)
    {
LABEL_493:
      uint64_t v94 = 114;
      uint64_t v95 = 16128;
      return (char *)(v94 | v95);
    }
    BOOL v78 = *(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14133;
    if (v78
      || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v79 = *(unsigned __int16 *)(a1 + 8) == 12855) : (BOOL v79 = 0),
          v79
       || (*(void *)a1 == 0x612D786574726F63 ? (BOOL v80 = *(unsigned __int16 *)(a1 + 8) == 13111) : (BOOL v80 = 0), v80)))
    {
LABEL_494:
      uint64_t v94 = 114;
      goto LABEL_428;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13623) {
      goto LABEL_493;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 13879) {
      goto LABEL_493;
    }
  }
  char v83 = v7 ^ 1;
  if (v8) {
    char v83 = 1;
  }
  if ((v83 & 1) == 0 && *(void *)a1 == 0x612D786574726F63 && *(_DWORD *)(a1 + 8) == 1700869687) {
    goto LABEL_493;
  }
  if (v52)
  {
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14135) {
      goto LABEL_493;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(_WORD *)(a1 + 8) == 14391) {
      goto LABEL_493;
    }
  }
  if (v71)
  {
    if (*(void *)a1 == 0x612D786574726F63 && *(void *)(a1 + 3) == 0x633837612D786574) {
      goto LABEL_493;
    }
    if (*(void *)a1 == 0x612D786574726F63 && *(void *)(a1 + 3) == 0x303137612D786574)
    {
      uint64_t v95 = 3356416;
      goto LABEL_497;
    }
  }
  if (v4)
  {
    if (*(void *)a1 == 0x782D786574726F63 && *(unsigned char *)(a1 + 8) == 49) {
      goto LABEL_493;
    }
  }
  if (v52 && *(void *)a1 == 0x782D786574726F63 && *(_WORD *)(a1 + 8) == 25393) {
    goto LABEL_493;
  }
  if (v71)
  {
    if (*(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 3) == 0x316E2D6573726576) {
      goto LABEL_493;
    }
    if (*(void *)a1 != 0x65737265766F656ELL || *(void *)(a1 + 3) != 0x326E2D6573726576)
    {
      if (*(void *)a1 == 0x65737265766F656ELL && *(void *)(a1 + 3) == 0x31762D6573726576)
      {
        uint64_t v94 = 114;
        uint64_t v95 = 1064704;
        return (char *)(v94 | v95);
      }
      goto LABEL_449;
    }
    uint64_t v95 = 3290880;
LABEL_497:
    uint64_t v94 = 114;
    return (char *)(v94 | v95);
  }
  if (a2 == 7 && !v8 && *(_DWORD *)a1 == 1818458467 && *(_DWORD *)(a1 + 3) == 1701736300) {
    goto LABEL_494;
  }
LABEL_449:
  if (!v4) {
    goto LABEL_462;
  }
  if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 51) {
    goto LABEL_494;
  }
  if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 52) {
    goto LABEL_493;
  }
  if (*(void *)a1 == 0x6D2D736F6E797865 && *(unsigned char *)(a1 + 8) == 53) {
    goto LABEL_493;
  }
LABEL_462:
  char v100 = v5 ^ 1;
  if (v8) {
    char v100 = 1;
  }
  if ((v100 & 1) == 0 && *(_DWORD *)a1 == 1870230123) {
    goto LABEL_494;
  }
  char v101 = v6 ^ 1;
  if (v8) {
    char v101 = 1;
  }
  if ((v101 & 1) == 0)
  {
    BOOL v102 = *(_DWORD *)a1 == 1835890537 && *(_WORD *)(a1 + 4) == 29816;
    if (v102 || (*(_DWORD *)a1 == 1633907576 ? (BOOL v103 = *(unsigned __int16 *)(a1 + 4) == 25964) : (BOOL v103 = 0), v103))
    {
LABEL_489:
      uint64_t v95 = 0;
      uint64_t v94 = 1;
      return (char *)(v94 | v95);
    }
  }
  if (v56 && *(_DWORD *)a1 == 1718187891 && *(unsigned char *)(a1 + 4) == 116) {
    goto LABEL_490;
  }
  if (a2 == 7 && !v8)
  {
    if (*(_DWORD *)a1 != 1635151465 || *(_DWORD *)(a1 + 3) != 1684630625) {
      return 0;
    }
    goto LABEL_489;
  }
  if (v8) {
    return (char *)(v8 | (unint64_t)(v25 << 8));
  }
  return 0;
}

BOOL llvm::ARM::getHWDivFeatures(uint64_t a1, const char ***a2)
{
  if (a1)
  {
    char v5 = a2[1];
    unint64_t v4 = (unint64_t)a2[2];
    if ((a1 & 0x20) != 0)
    {
      if ((unint64_t)v5 < v4)
      {
        char v6 = "+hwdiv-arm";
        goto LABEL_7;
      }
      uint64_t v14 = *a2;
      uint64_t v15 = ((char *)v5 - (char *)*a2) >> 4;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60) {
        goto LABEL_73;
      }
      uint64_t v17 = v4 - (void)v14;
      if (v17 >> 3 > v16) {
        unint64_t v16 = v17 >> 3;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 60) {
          goto LABEL_74;
        }
        unint64_t v19 = (char *)operator new(16 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      uint64_t v20 = &v19[16 * v15];
      char v21 = &v19[16 * v18];
      *(void *)uint64_t v20 = "+hwdiv-arm";
      *((void *)v20 + 1) = 10;
      char v7 = (const char **)(v20 + 16);
      if (v5 != v14)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v5 - 1);
          v20 -= 16;
          v5 -= 2;
        }
        while (v5 != v14);
        goto LABEL_33;
      }
    }
    else
    {
      if ((unint64_t)v5 < v4)
      {
        char v6 = "-hwdiv-arm";
LABEL_7:
        _DWORD *v5 = v6;
        v5[1] = (const char *)10;
        char v7 = v5 + 2;
        goto LABEL_36;
      }
      BOOL v8 = *a2;
      uint64_t v9 = ((char *)v5 - (char *)*a2) >> 4;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60) {
        goto LABEL_73;
      }
      uint64_t v11 = v4 - (void)v8;
      if (v11 >> 3 > v10) {
        unint64_t v10 = v11 >> 3;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 60) {
          goto LABEL_74;
        }
        unint64_t v13 = (char *)operator new(16 * v12);
      }
      else
      {
        unint64_t v13 = 0;
      }
      uint64_t v20 = &v13[16 * v9];
      char v21 = &v13[16 * v12];
      *(void *)uint64_t v20 = "-hwdiv-arm";
      *((void *)v20 + 1) = 10;
      char v7 = (const char **)(v20 + 16);
      if (v5 != v8)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v5 - 1);
          v20 -= 16;
          v5 -= 2;
        }
        while (v5 != v8);
LABEL_33:
        char v5 = *a2;
      }
    }
    *a2 = (const char **)v20;
    a2[1] = v7;
    a2[2] = (const char **)v21;
    if (v5) {
      operator delete(v5);
    }
LABEL_36:
    a2[1] = v7;
    unint64_t v22 = (unint64_t)a2[2];
    if ((a1 & 0x10) != 0)
    {
      if ((unint64_t)v7 < v22)
      {
        char v23 = "+hwdiv";
        goto LABEL_41;
      }
      char v31 = *a2;
      uint64_t v32 = ((char *)v7 - (char *)*a2) >> 4;
      unint64_t v33 = v32 + 1;
      if (!((unint64_t)(v32 + 1) >> 60))
      {
        uint64_t v34 = v22 - (void)v31;
        if (v34 >> 3 > v33) {
          unint64_t v33 = v34 >> 3;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 60) {
            goto LABEL_74;
          }
          unint64_t v36 = (char *)operator new(16 * v35);
        }
        else
        {
          unint64_t v36 = 0;
        }
        BOOL v37 = &v36[16 * v32];
        uint64_t v38 = &v36[16 * v35];
        *(void *)BOOL v37 = "+hwdiv";
        *((void *)v37 + 1) = 6;
        uint64_t v24 = (const char **)(v37 + 16);
        if (v7 != v31)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v7 - 1);
            v37 -= 16;
            v7 -= 2;
          }
          while (v7 != v31);
LABEL_67:
          char v7 = *a2;
          *a2 = (const char **)v37;
          a2[1] = v24;
          a2[2] = (const char **)v38;
          if (!v7) {
            goto LABEL_71;
          }
          goto LABEL_70;
        }
LABEL_69:
        *a2 = (const char **)v37;
        a2[1] = v24;
        a2[2] = (const char **)v38;
LABEL_70:
        operator delete(v7);
        goto LABEL_71;
      }
    }
    else
    {
      if ((unint64_t)v7 < v22)
      {
        char v23 = "-hwdiv";
LABEL_41:
        const char *v7 = v23;
        v7[1] = (const char *)6;
        uint64_t v24 = v7 + 2;
LABEL_71:
        a2[1] = v24;
        return a1 != 0;
      }
      uint64_t v25 = *a2;
      uint64_t v26 = ((char *)v7 - (char *)*a2) >> 4;
      unint64_t v27 = v26 + 1;
      if (!((unint64_t)(v26 + 1) >> 60))
      {
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 3 > v27) {
          unint64_t v27 = v28 >> 3;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (!v29)
        {
          char v30 = 0;
LABEL_61:
          BOOL v37 = &v30[16 * v26];
          uint64_t v38 = &v30[16 * v29];
          *(void *)BOOL v37 = "-hwdiv";
          *((void *)v37 + 1) = 6;
          uint64_t v24 = (const char **)(v37 + 16);
          if (v7 != v25)
          {
            do
            {
              *((_OWORD *)v37 - 1) = *((_OWORD *)v7 - 1);
              v37 -= 16;
              v7 -= 2;
            }
            while (v7 != v25);
            goto LABEL_67;
          }
          goto LABEL_69;
        }
        if (!(v29 >> 60))
        {
          char v30 = (char *)operator new(16 * v29);
          goto LABEL_61;
        }
LABEL_74:
        sub_1CB833614();
      }
    }
LABEL_73:
    abort();
  }
  return a1 != 0;
}

uint64_t llvm::ARM::getArchAttr(unsigned int a1)
{
  return *((unsigned int *)&off_1E6850C58 + 18 * a1 + 17);
}

char *llvm::ARM::getArchExtName(llvm::ARM *this)
{
  uint64_t v1 = 0;
  while ((&off_1E6851D20)[v1 + 2] != (char *)this)
  {
    v1 += 5;
    if (v1 == 190) {
      return 0;
    }
  }
  return (&off_1E6851D20)[v1];
}

char *llvm::ARM::getArchExtFeature(char *__s1, size_t __n)
{
  size_t v2 = __n;
  uint64_t v3 = __s1;
  if (__n >= 2)
  {
    int v5 = *(unsigned __int16 *)__s1;
    BOOL v4 = v5 == 28526;
    if (v5 == 28526)
    {
      size_t v2 = __n - 2;
      uint64_t v3 = __s1 + 2;
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    char v7 = &(&off_1E6851D20)[v6];
    if ((&off_1E6851D20)[v6 + 3])
    {
      if ((char *)v2 == v7[1] && (!v2 || !memcmp(v3, *v7, v2))) {
        break;
      }
    }
    v6 += 5;
    if (v6 == 190) {
      return 0;
    }
  }
  uint64_t v9 = &(&off_1E6851D20)[v6];
  uint64_t v10 = 3;
  if (v4) {
    uint64_t v10 = 4;
  }
  BOOL v8 = v9[v10];
  if (v8) {
    strlen(v9[v10]);
  }
  return v8;
}

uint64_t llvm::ARM::parseArchExt(void *__s1, size_t __n)
{
  for (uint64_t i = &qword_1E6851D30; ; i += 5)
  {
    int v5 = i - 2;
    if (__n == *(i - 1) && (!__n || !memcmp(__s1, (const void *)*(i - 2), __n))) {
      break;
    }
    if (v5 + 5 == (uint64_t *)&off_1E6852310) {
      return 0;
    }
  }
  return *i;
}

void llvm::AMDGPU::HSAMD::fromString(uint64_t a1, uint64_t a2)
{
  v2[39] = *MEMORY[0x1E4F143B8];
  llvm::yaml::Input::Input((uint64_t)v2, a1, a2, 0);
}

uint64_t llvm::AMDGPU::HSAMD::toString(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  BOOL v4 = &unk_1F2646F30;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v13[1] = 0;
  v13[2] = &v4;
  uint64_t v12 = a2;
  v13[0] = &unk_1F2646940;
  int v14 = 0x7FFFFFFF;
  uint64_t v15 = v17;
  uint64_t v16 = 0x800000000;
  memset(&v17[32], 0, 48);
  llvm::yaml::Output::beginDocuments((llvm::yaml::Output *)v13);
  (*(void (**)(void *))(v13[0] + 104))(v13);
  sub_1CD0294E4((llvm::yaml::IO *)v13, a1);
  (*(void (**)(void *))(v13[0] + 112))(v13);
  llvm::yaml::Output::output((uint64_t)v13, "\n...\n", 5uLL);
  std::system_category();
  v13[0] = &unk_1F2646940;
  if (v15 != v17) {
    free(v15);
  }
  BOOL v4 = &unk_1F2646B98;
  if (v11 == 1 && v6) {
    MEMORY[0x1D25D9CB0](v6, 0x1000C8077774924);
  }
  return 0;
}

uint64_t sub_1CD0294E4(llvm::yaml::IO *a1, uint64_t a2)
{
  v177.__r_.__value_.__r.__words[0] = 0;
  LOBYTE(v176) = 0;
  if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t, void, std::string **, std::string *))(*(void *)a1 + 120))(a1, "Version", 1, 0, &v176, &v177))
  {
    sub_1CD02BC38(a1, a2);
    (*(void (**)(llvm::yaml::IO *, std::string::size_type))(*(void *)a1 + 128))(a1, v177.__r_.__value_.__r.__words[0]);
  }
  memset(&v177, 0, sizeof(v177));
  int v176 = 0;
  LOBYTE(v174) = 0;
  int v4 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
  uint64_t v5 = 0;
  if (v4)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 32);
    std::string::size_type v8 = v177.__r_.__value_.__r.__words[0];
    if (v6 - v7 != v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0])
    {
LABEL_24:
      uint64_t v5 = 0;
      goto LABEL_25;
    }
    if (v7 != v6)
    {
      while (1)
      {
        char v9 = *(unsigned char *)(v7 + 23);
        uint64_t v10 = v9 & 0x7F;
        if (v9 >= 0) {
          uint64_t v11 = v9 & 0x7F;
        }
        else {
          uint64_t v11 = *(void *)(v7 + 8);
        }
        char v12 = *(unsigned char *)(v8 + 23);
        int v13 = v12;
        uint64_t v14 = v12 & 0x7F;
        if (v13 < 0) {
          uint64_t v14 = *(void *)(v8 + 8);
        }
        if (v11 != v14) {
          goto LABEL_24;
        }
        if (v13 >= 0) {
          uint64_t v15 = (unsigned __int8 *)v8;
        }
        else {
          uint64_t v15 = *(unsigned __int8 **)v8;
        }
        if ((*(unsigned char *)(v7 + 23) & 0x80) != 0)
        {
          if (memcmp(*(const void **)v7, v15, *(void *)(v7 + 8))) {
            goto LABEL_24;
          }
        }
        else if ((v9 & 0x7F) != 0)
        {
          uint64_t v16 = 0;
          while (*(unsigned __int8 *)(v7 + v16) == v15[v16])
          {
            if (v10 == ++v16) {
              goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v7 += 24;
        v8 += 24;
        uint64_t v5 = 1;
        if (v7 == v6) {
          goto LABEL_25;
        }
      }
    }
    uint64_t v5 = 1;
  }
LABEL_25:
  if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, void, uint64_t, uint64_t *, std::string **))(*(void *)a1 + 120))(a1, "Printf", 0, v5, &v174, &v176))
  {
    sub_1CD673398(a1, (int64x2_t *)(a2 + 24));
    (*(void (**)(llvm::yaml::IO *, std::string *))(*(void *)a1 + 128))(a1, v176);
  }
  else if ((std::string *)(a2 + 24) != &v177 && (_BYTE)v174)
  {
    sub_1CBF4C3C4(a2 + 24, (std::string *)v177.__r_.__value_.__l.__data_, (std::string *)v177.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0]) >> 3));
  }
  int v176 = &v177;
  sub_1CB8338B8((void ***)&v176);
  if (*(void *)(a2 + 48) != *(void *)(a2 + 56)
    || (uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1), (result & 1) == 0))
  {
    uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 56))(a1);
    if (!result || *(void *)(a2 + 48) != *(void *)(a2 + 56))
    {
      uint64_t v171 = 0;
      char v170 = 0;
      uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, const char *, void, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, "Kernels", 0, 0, &v170, &v171);
      if (result)
      {
        LODWORD(v18) = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 24))(a1);
        if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
          LODWORD(v18) = 954437177 * ((*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 5);
        }
        if (v18)
        {
          unint64_t v19 = 0;
          uint64_t v18 = v18;
          uint64_t v168 = v18;
          unint64_t v169 = (void *)a2;
          do
          {
            uint64_t v172 = 0;
            if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(void *)a1 + 32))(a1, v19, &v172))
            {
              uint64_t v20 = *(void ***)(a2 + 48);
              char v21 = *(void ***)(a2 + 56);
              unint64_t v22 = 0x8E38E38E38E38E39 * (((char *)v21 - (char *)v20) >> 5);
              if (v22 <= v19)
              {
                unint64_t v23 = v19 + 1;
                unint64_t v24 = v19 + 1 - v22;
                uint64_t v25 = v169[8];
                if (0x8E38E38E38E38E39 * ((v25 - (uint64_t)v21) >> 5) >= v24)
                {
                  unint64_t v36 = &v21[36 * v24];
                  do
                  {
                    *((_OWORD *)v21 + 16) = 0uLL;
                    *((_OWORD *)v21 + 17) = 0uLL;
                    *((_OWORD *)v21 + 14) = 0uLL;
                    *((_OWORD *)v21 + 15) = 0uLL;
                    *((_OWORD *)v21 + 12) = 0uLL;
                    *((_OWORD *)v21 + 13) = 0uLL;
                    *((_OWORD *)v21 + 10) = 0uLL;
                    *((_OWORD *)v21 + 11) = 0uLL;
                    *((_OWORD *)v21 + 8) = 0uLL;
                    *((_OWORD *)v21 + 9) = 0uLL;
                    *((_OWORD *)v21 + 6) = 0uLL;
                    *((_OWORD *)v21 + 7) = 0uLL;
                    *((_OWORD *)v21 + 4) = 0uLL;
                    *((_OWORD *)v21 + 5) = 0uLL;
                    *((_OWORD *)v21 + 2) = 0uLL;
                    *((_OWORD *)v21 + 3) = 0uLL;
                    *(_OWORD *)char v21 = 0uLL;
                    *((_OWORD *)v21 + 1) = 0uLL;
                    BOOL v37 = (_DWORD *)((char *)v21 + 282);
                    *((_WORD *)v21 + 143) = -1;
                    v21 += 36;
                    *BOOL v37 = -1;
                  }
                  while (v21 != v36);
                  unint64_t v35 = v169;
                  v169[7] = v36;
                }
                else
                {
                  unint64_t v26 = 0x8E38E38E38E38E39 * ((v25 - (uint64_t)v20) >> 5);
                  uint64_t v27 = 2 * v26;
                  if (2 * v26 <= v23) {
                    uint64_t v27 = v19 + 1;
                  }
                  if (v26 >= 0x71C71C71C71C71) {
                    unint64_t v28 = 0xE38E38E38E38E3;
                  }
                  else {
                    unint64_t v28 = v27;
                  }
                  if (v28 > 0xE38E38E38E38E3) {
LABEL_308:
                  }
                    sub_1CB833614();
                  unint64_t v29 = (char *)operator new(288 * v28);
                  char v30 = &v29[32 * (((char *)v21 - (char *)v20) >> 5)];
                  char v31 = &v29[288 * v23];
                  uint64_t v32 = v30;
                  do
                  {
                    *((_OWORD *)v32 + 16) = 0uLL;
                    *((_OWORD *)v32 + 17) = 0uLL;
                    *((_OWORD *)v32 + 14) = 0uLL;
                    *((_OWORD *)v32 + 15) = 0uLL;
                    *((_OWORD *)v32 + 12) = 0uLL;
                    *((_OWORD *)v32 + 13) = 0uLL;
                    *((_OWORD *)v32 + 10) = 0uLL;
                    *((_OWORD *)v32 + 11) = 0uLL;
                    *((_OWORD *)v32 + 8) = 0uLL;
                    *((_OWORD *)v32 + 9) = 0uLL;
                    *((_OWORD *)v32 + 6) = 0uLL;
                    *((_OWORD *)v32 + 7) = 0uLL;
                    *((_OWORD *)v32 + 4) = 0uLL;
                    *((_OWORD *)v32 + 5) = 0uLL;
                    *((_OWORD *)v32 + 2) = 0uLL;
                    *((_OWORD *)v32 + 3) = 0uLL;
                    *(_OWORD *)uint64_t v32 = 0uLL;
                    *((_OWORD *)v32 + 1) = 0uLL;
                    unint64_t v33 = v32 + 282;
                    *((_WORD *)v32 + 143) = -1;
                    v32 += 288;
                    _DWORD *v33 = -1;
                  }
                  while (v32 != v31);
                  uint64_t v34 = &v29[288 * v28];
                  if (v21 == v20)
                  {
                    unint64_t v35 = v169;
                    v169[6] = v30;
                    v169[7] = v31;
                    v169[8] = v34;
                  }
                  else
                  {
                    uint64_t v38 = 0;
                    do
                    {
                      int v39 = &v30[v38 * 8];
                      unint64_t v40 = &v21[v38];
                      uint64_t v41 = (uint64_t)&v30[v38 * 8 - 288];
                      uint64_t v42 = (uint64_t)&v21[v38 - 36];
                      long long v43 = *(_OWORD *)v42;
                      *(void *)(v41 + 16) = v21[v38 - 34];
                      *(_OWORD *)uint64_t v41 = v43;
                      *(void *)(v42 + 8) = 0;
                      *(void *)(v42 + 16) = 0;
                      char v44 = &v21[v38 - 33];
                      long long v45 = *(_OWORD *)v44;
                      char v46 = v21[v38 - 31];
                      *(void *)uint64_t v42 = 0;
                      *((void *)v39 - 31) = v46;
                      *(_OWORD *)&v30[v38 * 8 - 264] = v45;
                      *(v40 - 32) = 0;
                      *(v40 - 31) = 0;
                      uint64_t *v44 = 0;
                      long long v47 = *(_OWORD *)&v21[v38 - 30];
                      *((void *)v39 - 28) = v21[v38 - 28];
                      *((_OWORD *)v39 - 15) = v47;
                      *(v40 - 29) = 0;
                      *(v40 - 28) = 0;
                      *(v40 - 30) = 0;
                      *(_OWORD *)(v39 - 216) = *(_OWORD *)&v21[v38 - 27];
                      *((void *)v39 - 25) = v21[v38 - 25];
                      *(v40 - 27) = 0;
                      *(v40 - 26) = 0;
                      *(v40 - 25) = 0;
                      *((_OWORD *)v39 - 12) = *(_OWORD *)&v21[v38 - 24];
                      *((void *)v39 - 22) = v21[v38 - 22];
                      *(v40 - 24) = 0;
                      *(v40 - 23) = 0;
                      *(v40 - 22) = 0;
                      *(_OWORD *)(v39 - 168) = *(_OWORD *)&v21[v38 - 21];
                      *((void *)v39 - 19) = v21[v38 - 19];
                      *(v40 - 21) = 0;
                      *(v40 - 20) = 0;
                      *(v40 - 19) = 0;
                      long long v48 = *(_OWORD *)&v21[v38 - 18];
                      *((void *)v39 - 16) = v21[v38 - 16];
                      *((_OWORD *)v39 - 9) = v48;
                      *(v40 - 17) = 0;
                      *(v40 - 16) = 0;
                      long long v49 = *(_OWORD *)&v21[v38 - 15];
                      uint64_t v50 = v21[v38 - 13];
                      *(v40 - 18) = 0;
                      *((void *)v39 - 13) = v50;
                      *(_OWORD *)(v39 - 120) = v49;
                      *(v40 - 14) = 0;
                      *(v40 - 13) = 0;
                      long long v51 = *(_OWORD *)&v21[v38 - 12];
                      *(v40 - 15) = 0;
                      *((_OWORD *)v39 - 6) = v51;
                      *((void *)v39 - 10) = v21[v38 - 10];
                      *(v40 - 12) = 0;
                      *(v40 - 11) = 0;
                      *(v40 - 10) = 0;
                      long long v52 = *(_OWORD *)&v21[v38 - 9];
                      long long v53 = *(_OWORD *)&v21[v38 - 7];
                      *((void *)v39 - 5) = v21[v38 - 5];
                      *(_OWORD *)(v39 - 56) = v53;
                      *(_OWORD *)(v39 - 72) = v52;
                      *((_OWORD *)v39 - 2) = *(_OWORD *)&v21[v38 - 4];
                      *((void *)v39 - 2) = v21[v38 - 2];
                      *(v40 - 4) = 0;
                      *(v40 - 3) = 0;
                      *(v40 - 2) = 0;
                      *((void *)v39 - 1) = v21[v38 - 1];
                      v38 -= 36;
                    }
                    while (&v21[v38] != v20);
                    unint64_t v35 = v169;
                    char v21 = (void **)v169[6];
                    BOOL v54 = (void **)v169[7];
                    v169[6] = &v30[v38 * 8];
                    v169[7] = v31;
                    v169[8] = v34;
                    if (v54 != v21)
                    {
                      do
                      {
                        BOOL v55 = *(v54 - 4);
                        if (v55)
                        {
                          *(v54 - 3) = v55;
                          operator delete(v55);
                        }
                        BOOL v56 = (void **)*(v54 - 12);
                        if (v56)
                        {
                          BOOL v57 = (void **)*(v54 - 11);
                          BOOL v58 = *(v54 - 12);
                          if (v57 != v56)
                          {
                            do
                            {
                              if (*((char *)v57 - 33) < 0) {
                                operator delete(*(v57 - 7));
                              }
                              if (*((char *)v57 - 57) < 0) {
                                operator delete(*(v57 - 10));
                              }
                              v57 -= 10;
                            }
                            while (v57 != v56);
                            BOOL v58 = *(v54 - 12);
                          }
                          *(v54 - 11) = v56;
                          operator delete(v58);
                        }
                        if (*((char *)v54 - 97) < 0) {
                          operator delete(*(v54 - 15));
                        }
                        if (*((char *)v54 - 121) < 0) {
                          operator delete(*(v54 - 18));
                        }
                        BOOL v59 = *(v54 - 21);
                        if (v59)
                        {
                          *(v54 - 20) = v59;
                          operator delete(v59);
                        }
                        BOOL v60 = *(v54 - 24);
                        if (v60)
                        {
                          *(v54 - 23) = v60;
                          operator delete(v60);
                        }
                        BOOL v61 = *(v54 - 27);
                        if (v61)
                        {
                          *(v54 - 26) = v61;
                          operator delete(v61);
                        }
                        if (*((char *)v54 - 217) < 0) {
                          operator delete(*(v54 - 30));
                        }
                        if (*((char *)v54 - 241) < 0) {
                          operator delete(*(v54 - 33));
                        }
                        BOOL v62 = v54 - 36;
                        if (*((char *)v54 - 265) < 0) {
                          operator delete(*v62);
                        }
                        v54 -= 36;
                      }
                      while (v62 != v21);
                    }
                  }
                  if (v21) {
                    operator delete(v21);
                  }
                }
                uint64_t v20 = (void **)v35[6];
              }
              uint64_t v63 = (uint64_t)&v20[36 * v19];
              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 104))(a1);
              sub_1CD67275C(a1, (uint64_t)"Name", v63, 1);
              sub_1CD67275C(a1, (uint64_t)"SymbolName", v63 + 24, 1);
              memset(&v177, 0, sizeof(v177));
              sub_1CD02BDC0(a1, (uint64_t)"Language", v63 + 48, &v177);
              if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v177.__r_.__value_.__l.__data_);
              }
              memset(&v177, 0, sizeof(v177));
              sub_1CD02BF68(a1, (uint64_t)"LanguageVersion", (uint64_t)&v20[36 * v19 + 9], (uint64_t)&v177);
              if (v177.__r_.__value_.__r.__words[0])
              {
                v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
                operator delete(v177.__r_.__value_.__l.__data_);
              }
              unint64_t v64 = &v20[36 * v19];
              BOOL v65 = v64[12];
              BOOL v66 = v64[13];
              uint64_t v67 = (uint64_t)(v64 + 12);
              if (v65 != v66 || v20[36 * v19 + 15] != v20[36 * v19 + 16]) {
                goto LABEL_103;
              }
              char v68 = *(unsigned char *)(v63 + 167);
              int v69 = v68;
              BOOL v70 = (void *)(v68 & 0x7F);
              if (v69 < 0) {
                BOOL v70 = v20[36 * v19 + 19];
              }
              if (v70) {
                goto LABEL_103;
              }
              char v71 = *(unsigned char *)(v63 + 191);
              int v72 = v71;
              int v73 = (void *)(v71 & 0x7F);
              if (v72 < 0) {
                int v73 = v20[36 * v19 + 22];
              }
              if (v73 || ((*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1) & 1) == 0)
              {
LABEL_103:
                int v176 = 0;
                char v175 = 0;
                if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, void, void, char *, std::string **))(*(void *)a1 + 120))(a1, "Attrs", 0, 0, &v175, &v176))
                {
                  (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 104))(a1);
                  memset(&v177, 0, sizeof(v177));
                  sub_1CD02BF68(a1, (uint64_t)"ReqdWorkGroupSize", v67, (uint64_t)&v177);
                  if (v177.__r_.__value_.__r.__words[0])
                  {
                    v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
                    operator delete(v177.__r_.__value_.__l.__data_);
                  }
                  memset(&v177, 0, sizeof(v177));
                  sub_1CD02BF68(a1, (uint64_t)"WorkGroupSizeHint", (uint64_t)&v20[36 * v19 + 15], (uint64_t)&v177);
                  if (v177.__r_.__value_.__r.__words[0])
                  {
                    v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
                    operator delete(v177.__r_.__value_.__l.__data_);
                  }
                  memset(&v177, 0, sizeof(v177));
                  sub_1CD02BDC0(a1, (uint64_t)"VecTypeHint", (uint64_t)&v20[36 * v19 + 18], &v177);
                  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v177.__r_.__value_.__l.__data_);
                  }
                  memset(&v177, 0, sizeof(v177));
                  sub_1CD02BDC0(a1, (uint64_t)"RuntimeHandle", (uint64_t)&v20[36 * v19 + 21], &v177);
                  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v177.__r_.__value_.__l.__data_);
                  }
                  (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 112))(a1);
                  (*(void (**)(llvm::yaml::IO *, std::string *))(*(void *)a1 + 128))(a1, v176);
                }
              }
              unint64_t v74 = &v20[36 * v19];
              int64_t v76 = v74[24];
              int v75 = v74 + 24;
              uint64_t v77 = v75 + 1;
              if ((v76 != v75[1] || ((*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1) & 1) == 0)
                && (!(*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 56))(a1) || *v75 != *v77))
              {
                uint64_t v174 = 0;
                char v173 = 0;
                if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, void, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, "Args", 0, 0, &v173, &v174))
                {
                  LODWORD(v78) = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 24))(a1);
                  char v167 = v75 + 1;
                  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
                    LODWORD(v78) = -858993459 * ((unint64_t)((unsigned char *)*v77 - (unsigned char *)*v75) >> 4);
                  }
                  if (v78)
                  {
                    unint64_t v79 = 0;
                    uint64_t v78 = v78;
                    unint64_t v164 = (char **)&v20[36 * v19 + 26];
                    uint64_t v165 = v78;
                    int v166 = v75;
                    do
                    {
                      int v176 = 0;
                      if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, std::string **))(*(void *)a1 + 32))(a1, v79, &v176))
                      {
                        BOOL v80 = (void **)*v167;
                        unint64_t v81 = (void **)*v75;
                        unint64_t v82 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)*v167 - (unsigned char *)v81) >> 4);
                        if (v82 <= v79)
                        {
                          unint64_t v83 = v79 + 1 - v82;
                          if (0xCCCCCCCCCCCCCCCDLL * ((*v164 - (char *)v80) >> 4) >= v83)
                          {
                            uint64_t v95 = (char *)&v80[10 * v83];
                            do
                            {
                              *((_OWORD *)v80 + 3) = 0uLL;
                              *((_OWORD *)v80 + 4) = 0uLL;
                              *((_OWORD *)v80 + 1) = 0uLL;
                              *((_OWORD *)v80 + 2) = 0uLL;
                              *(_OWORD *)BOOL v80 = 0uLL;
                              *((unsigned char *)v80 + 60) = -1;
                              *((_WORD *)v80 + 34) = -1;
                              *((unsigned char *)v80 + 70) = -1;
                              v80 += 10;
                            }
                            while (v80 != (void **)v95);
                            uint64_t v90 = v166;
                            *char v167 = v95;
                          }
                          else
                          {
                            unint64_t v84 = 0x999999999999999ALL * ((*v164 - (char *)v81) >> 4);
                            if (v84 <= v79 + 1) {
                              unint64_t v84 = v79 + 1;
                            }
                            if (0xCCCCCCCCCCCCCCCDLL * ((*v164 - (char *)v81) >> 4) >= 0x199999999999999) {
                              unint64_t v84 = 0x333333333333333;
                            }
                            if (v84 > 0x333333333333333) {
                              goto LABEL_308;
                            }
                            unint64_t v163 = v84;
                            unsigned int v85 = (char *)operator new(80 * v84);
                            unsigned int v86 = &v85[80 * v82];
                            uint64_t v87 = &v85[80 * v79 + 80];
                            uint64_t v88 = v86;
                            do
                            {
                              *((_OWORD *)v88 + 3) = 0uLL;
                              *((_OWORD *)v88 + 4) = 0uLL;
                              *((_OWORD *)v88 + 1) = 0uLL;
                              *((_OWORD *)v88 + 2) = 0uLL;
                              *(_OWORD *)uint64_t v88 = 0uLL;
                              v88[60] = -1;
                              *((_WORD *)v88 + 34) = -1;
                              v88[70] = -1;
                              v88 += 80;
                            }
                            while (v88 != v87);
                            unint64_t v89 = &v85[80 * v163];
                            if (v80 == v81)
                            {
                              uint64_t v90 = v166;
                              *int v166 = v86;
                              *char v167 = v87;
                              *unint64_t v164 = v89;
                            }
                            else
                            {
                              do
                              {
                                long long v91 = *((_OWORD *)v80 - 5);
                                *((void *)v86 - 8) = *(v80 - 8);
                                *((_OWORD *)v86 - 5) = v91;
                                *(v80 - 9) = 0;
                                *(v80 - 8) = 0;
                                *(v80 - 10) = 0;
                                long long v92 = *(_OWORD *)(v80 - 7);
                                *((void *)v86 - 5) = *(v80 - 5);
                                *(_OWORD *)(v86 - 56) = v92;
                                *(v80 - 6) = 0;
                                *(v80 - 5) = 0;
                                *(v80 - 7) = 0;
                                long long v93 = *((_OWORD *)v80 - 2);
                                *(_OWORD *)(v86 - 21) = *(_OWORD *)((char *)v80 - 21);
                                *((_OWORD *)v86 - 2) = v93;
                                v86 -= 80;
                                v80 -= 10;
                              }
                              while (v80 != v81);
                              uint64_t v90 = v166;
                              BOOL v80 = (void **)*v166;
                              uint64_t v94 = (void **)*v167;
                              *int v166 = v86;
                              *char v167 = v87;
                              *unint64_t v164 = v89;
                              while (v94 != v80)
                              {
                                if (*((char *)v94 - 33) < 0) {
                                  operator delete(*(v94 - 7));
                                }
                                if (*((char *)v94 - 57) < 0) {
                                  operator delete(*(v94 - 10));
                                }
                                v94 -= 10;
                              }
                            }
                            if (v80) {
                              operator delete(v80);
                            }
                          }
                          unint64_t v81 = (void **)*v90;
                        }
                        (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 104))(a1);
                        memset(&v177, 0, sizeof(v177));
                        sub_1CD02BDC0(a1, (uint64_t)"Name", (uint64_t)&v81[10 * v79], &v177);
                        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v177.__r_.__value_.__l.__data_);
                        }
                        memset(&v177, 0, sizeof(v177));
                        sub_1CD02BDC0(a1, (uint64_t)"TypeName", (uint64_t)&v81[10 * v79 + 3], &v177);
                        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v177.__r_.__value_.__l.__data_);
                        }
                        unsigned int v96 = &v81[10 * v79];
                        sub_1CD3EDEB8(a1, (uint64_t)"Size", (unsigned int *)v96 + 12, 1);
                        sub_1CD3EDEB8(a1, (uint64_t)"Align", (unsigned int *)v96 + 14, 1);
                        v177.__r_.__value_.__r.__words[0] = 0;
                        char v175 = 0;
                        if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t, void, char *, std::string *))(*(void *)a1 + 120))(a1, "ValueKind", 1, 0, &v175, &v177))
                        {
                          (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 160))(a1);
                          unsigned int v97 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          int v99 = *((unsigned __int8 *)v96 + 60);
                          uint64_t v98 = (char *)v96 + 60;
                          if (v99) {
                            uint64_t v100 = 0;
                          }
                          else {
                            uint64_t v100 = v97;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "ByValue", v100))
                          {
                            *uint64_t v98 = 0;
                          }
                          unsigned int v101 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 1) {
                            uint64_t v102 = v101;
                          }
                          else {
                            uint64_t v102 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "GlobalBuffer", v102))
                          {
                            *uint64_t v98 = 1;
                          }
                          unsigned int v103 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 2) {
                            uint64_t v104 = v103;
                          }
                          else {
                            uint64_t v104 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "DynamicSharedPointer", v104))
                          {
                            *uint64_t v98 = 2;
                          }
                          unsigned int v105 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 3) {
                            uint64_t v106 = v105;
                          }
                          else {
                            uint64_t v106 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Sampler", v106))
                          {
                            *uint64_t v98 = 3;
                          }
                          unsigned int v107 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 4) {
                            uint64_t v108 = v107;
                          }
                          else {
                            uint64_t v108 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Image", v108))
                          {
                            *uint64_t v98 = 4;
                          }
                          unsigned int v109 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 5) {
                            uint64_t v110 = v109;
                          }
                          else {
                            uint64_t v110 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Pipe", v110))
                          {
                            *uint64_t v98 = 5;
                          }
                          unsigned int v111 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 6) {
                            uint64_t v112 = v111;
                          }
                          else {
                            uint64_t v112 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Queue", v112))
                          {
                            *uint64_t v98 = 6;
                          }
                          unsigned int v113 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 7) {
                            uint64_t v114 = v113;
                          }
                          else {
                            uint64_t v114 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "HiddenGlobalOffsetX", v114))
                          {
                            *uint64_t v98 = 7;
                          }
                          unsigned int v115 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 8) {
                            uint64_t v116 = v115;
                          }
                          else {
                            uint64_t v116 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "HiddenGlobalOffsetY", v116))
                          {
                            *uint64_t v98 = 8;
                          }
                          unsigned int v117 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 9) {
                            uint64_t v118 = v117;
                          }
                          else {
                            uint64_t v118 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "HiddenGlobalOffsetZ", v118))
                          {
                            *uint64_t v98 = 9;
                          }
                          unsigned int v119 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 10) {
                            uint64_t v120 = v119;
                          }
                          else {
                            uint64_t v120 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "HiddenNone", v120))
                          {
                            *uint64_t v98 = 10;
                          }
                          unsigned int v121 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 11) {
                            uint64_t v122 = v121;
                          }
                          else {
                            uint64_t v122 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "HiddenPrintfBuffer", v122))
                          {
                            *uint64_t v98 = 11;
                          }
                          unsigned int v123 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 15) {
                            uint64_t v124 = v123;
                          }
                          else {
                            uint64_t v124 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "HiddenHostcallBuffer", v124))
                          {
                            *uint64_t v98 = 15;
                          }
                          unsigned int v125 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 12) {
                            uint64_t v126 = v125;
                          }
                          else {
                            uint64_t v126 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "HiddenDefaultQueue", v126))
                          {
                            *uint64_t v98 = 12;
                          }
                          unsigned int v127 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 13) {
                            uint64_t v128 = v127;
                          }
                          else {
                            uint64_t v128 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "HiddenCompletionAction", v128))
                          {
                            *uint64_t v98 = 13;
                          }
                          unsigned int v129 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v98 == 14) {
                            uint64_t v130 = v129;
                          }
                          else {
                            uint64_t v130 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "HiddenMultiGridSyncArg", v130))
                          {
                            *uint64_t v98 = 14;
                          }
                          (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 184))(a1);
                          (*(void (**)(llvm::yaml::IO *, std::string::size_type))(*(void *)a1 + 128))(a1, v177.__r_.__value_.__r.__words[0]);
                        }
                        char v175 = 1;
                        uint64_t v131 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                        if (((*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1) & 1) == 0)
                        {
                          v177.__r_.__value_.__r.__words[0] = 0;
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, void, uint64_t, char *, std::string *))(*(void *)a1 + 120))(a1, "ValueType", 0, v131, &v175, &v177))
                          {
                            if ((*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
                              goto LABEL_240;
                            }
                            uint64_t v132 = *((void *)a1 + 37);
                            if (!v132) {
                              goto LABEL_240;
                            }
                            uint64_t v152 = *(void *)(v132 + 8);
                            if (!v152 || *(_DWORD *)(v152 + 32) != 1) {
                              goto LABEL_240;
                            }
                            uint64_t v153 = *(int **)(v152 + 72);
                            unint64_t v154 = *(void *)(v152 + 80);
                            unint64_t v155 = v154;
                            do
                            {
                              unint64_t v156 = v155;
                              if (!v155) {
                                break;
                              }
                              --v155;
                            }
                            while (*((unsigned char *)v153 + v156 - 1) == 32);
                            if (v156 < v154) {
                              unint64_t v154 = v156;
                            }
                            if (v154 != 6
                              || ((int v157 = *v153, v158 = *((unsigned __int16 *)v153 + 2), v157 == 1852796476)
                                ? (BOOL v159 = v158 == 15973)
                                : (BOOL v159 = 0),
                                  !v159))
                            {
LABEL_240:
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 160))(a1);
                              uint64_t v133 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Struct", v133);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, void))(*(void *)a1 + 168))(a1, "I8", 0);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, void))(*(void *)a1 + 168))(a1, "U8", 0);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, void))(*(void *)a1 + 168))(a1, "I16", 0);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, void))(*(void *)a1 + 168))(a1, "U16", 0);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, void))(*(void *)a1 + 168))(a1, "F16", 0);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, void))(*(void *)a1 + 168))(a1, "I32", 0);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, void))(*(void *)a1 + 168))(a1, "U32", 0);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, void))(*(void *)a1 + 168))(a1, "F32", 0);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, void))(*(void *)a1 + 168))(a1, "I64", 0);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, void))(*(void *)a1 + 168))(a1, "U64", 0);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                              (*(void (**)(llvm::yaml::IO *, const char *, void))(*(void *)a1 + 168))(a1, "F64", 0);
                              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 184))(a1);
                            }
                            (*(void (**)(llvm::yaml::IO *, std::string::size_type))(*(void *)a1 + 128))(a1, v177.__r_.__value_.__r.__words[0]);
                          }
                        }
                        unint64_t v134 = &v81[10 * v79];
                        LODWORD(v177.__r_.__value_.__l.__data_) = 0;
                        sub_1CD561FC4(a1, (uint64_t)"PointeeAlign", (unsigned int *)v134 + 16, (unsigned int *)&v177, 0);
                        v177.__r_.__value_.__r.__words[0] = 0;
                        char v175 = 0;
                        unsigned int v135 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                        int v137 = *((unsigned __int8 *)v134 + 68);
                        int v136 = (char *)v134 + 68;
                        if (v137 == 255) {
                          uint64_t v138 = v135;
                        }
                        else {
                          uint64_t v138 = 0;
                        }
                        if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, void, uint64_t, char *, std::string *))(*(void *)a1 + 120))(a1, "AddrSpaceQual", 0, v138, &v175, &v177))
                        {
                          (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 160))(a1);
                          unsigned int v139 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v136) {
                            uint64_t v140 = 0;
                          }
                          else {
                            uint64_t v140 = v139;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Private", v140))
                          {
                            unsigned char *v136 = 0;
                          }
                          unsigned int v141 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v136 == 1) {
                            uint64_t v142 = v141;
                          }
                          else {
                            uint64_t v142 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Global", v142))
                          {
                            unsigned char *v136 = 1;
                          }
                          unsigned int v143 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v136 == 2) {
                            uint64_t v144 = v143;
                          }
                          else {
                            uint64_t v144 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Constant", v144))
                          {
                            unsigned char *v136 = 2;
                          }
                          unsigned int v145 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v136 == 3) {
                            uint64_t v146 = v145;
                          }
                          else {
                            uint64_t v146 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Local", v146))
                          {
                            unsigned char *v136 = 3;
                          }
                          unsigned int v147 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v136 == 4) {
                            uint64_t v148 = v147;
                          }
                          else {
                            uint64_t v148 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Generic", v148))
                          {
                            unsigned char *v136 = 4;
                          }
                          unsigned int v149 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
                          if (*v136 == 5) {
                            uint64_t v150 = v149;
                          }
                          else {
                            uint64_t v150 = 0;
                          }
                          if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Region", v150))
                          {
                            unsigned char *v136 = 5;
                          }
                          (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 184))(a1);
                          (*(void (**)(llvm::yaml::IO *, std::string::size_type))(*(void *)a1 + 128))(a1, v177.__r_.__value_.__r.__words[0]);
                        }
                        else if (v175)
                        {
                          unsigned char *v136 = -1;
                        }
                        unint64_t v151 = &v81[10 * v79];
                        v177.__r_.__value_.__s.__data_[0] = -1;
                        sub_1CD02C0AC((uint64_t)a1, (uint64_t)"AccQual", (unsigned char *)v151 + 69, &v177);
                        v177.__r_.__value_.__s.__data_[0] = -1;
                        sub_1CD02C0AC((uint64_t)a1, (uint64_t)"ActualAccQual", (unsigned char *)v151 + 70, &v177);
                        char v175 = 0;
                        sub_1CD55FA64(a1, (uint64_t)"IsConst", (unsigned char *)v151 + 71, &v175, 0);
                        char v175 = 0;
                        sub_1CD55FA64(a1, (uint64_t)"IsRestrict", (unsigned char *)v151 + 72, &v175, 0);
                        char v175 = 0;
                        sub_1CD55FA64(a1, (uint64_t)"IsVolatile", (unsigned char *)v151 + 73, &v175, 0);
                        char v175 = 0;
                        sub_1CD55FA64(a1, (uint64_t)"IsPipe", (unsigned char *)v151 + 74, &v175, 0);
                        (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 112))(a1);
                        (*(void (**)(llvm::yaml::IO *, std::string *))(*(void *)a1 + 40))(a1, v176);
                        uint64_t v78 = v165;
                        int v75 = v166;
                      }
                      ++v79;
                    }
                    while (v79 != v78);
                  }
                  (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 48))(a1);
                  (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v174);
                }
              }
              v177.__r_.__value_.__r.__words[0] = 0;
              char v175 = 0;
              if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, void, void, char *, std::string *))(*(void *)a1 + 120))(a1, "CodeProps", 0, 0, &v175, &v177))
              {
                uint64_t v162 = &v20[36 * v19];
                (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 104))(a1);
                sub_1CD563C30(a1, (uint64_t)"KernargSegmentSize", (unint64_t *)v162 + 27, 1);
                sub_1CD3EDEB8(a1, (uint64_t)"GroupSegmentFixedSize", (unsigned int *)v162 + 56, 1);
                sub_1CD3EDEB8(a1, (uint64_t)"PrivateSegmentFixedSize", (unsigned int *)v162 + 57, 1);
                sub_1CD3EDEB8(a1, (uint64_t)"KernargSegmentAlign", (unsigned int *)v162 + 58, 1);
                sub_1CD3EDEB8(a1, (uint64_t)"WavefrontSize", (unsigned int *)v162 + 59, 1);
                LOWORD(v176) = 0;
                sub_1CD02C3AC(a1, (uint64_t)"NumSGPRs", (unsigned __int16 *)v162 + 120, (unsigned __int16 *)&v176);
                LOWORD(v176) = 0;
                sub_1CD02C3AC(a1, (uint64_t)"NumVGPRs", (unsigned __int16 *)v162 + 121, (unsigned __int16 *)&v176);
                LODWORD(v176) = 0;
                sub_1CD561FC4(a1, (uint64_t)"MaxFlatWorkGroupSize", (unsigned int *)v162 + 61, (unsigned int *)&v176, 0);
                LOBYTE(v174) = 0;
                sub_1CD55FA64(a1, (uint64_t)"IsDynamicCallStack", (unsigned char *)v162 + 248, &v174, 0);
                LOBYTE(v174) = 0;
                sub_1CD55FA64(a1, (uint64_t)"IsXNACKEnabled", (unsigned char *)v162 + 249, &v174, 0);
                LOWORD(v176) = 0;
                sub_1CD02C3AC(a1, (uint64_t)"NumSpilledSGPRs", (unsigned __int16 *)v162 + 125, (unsigned __int16 *)&v176);
                LOWORD(v176) = 0;
                sub_1CD02C3AC(a1, (uint64_t)"NumSpilledVGPRs", (unsigned __int16 *)v162 + 126, (unsigned __int16 *)&v176);
                (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 112))(a1);
                (*(void (**)(llvm::yaml::IO *, std::string::size_type))(*(void *)a1 + 128))(a1, v177.__r_.__value_.__r.__words[0]);
              }
              uint64_t v160 = &v20[36 * v19];
              if (v160[32] != v160[33]
                || ((*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1) & 1) == 0)
              {
                int v176 = 0;
                char v175 = 0;
                if ((*(unsigned int (**)(llvm::yaml::IO *, const char *, void, void, char *, std::string **))(*(void *)a1 + 120))(a1, "DebugProps", 0, 0, &v175, &v176))
                {
                  (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 104))(a1);
                  memset(&v177, 0, sizeof(v177));
                  sub_1CD02BF68(a1, (uint64_t)"DebuggerABIVersion", (uint64_t)(v160 + 32), (uint64_t)&v177);
                  if (v177.__r_.__value_.__r.__words[0])
                  {
                    v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
                    operator delete(v177.__r_.__value_.__l.__data_);
                  }
                  unint64_t v161 = (unsigned __int16 *)&v20[36 * v19];
                  LOWORD(v177.__r_.__value_.__l.__data_) = 0;
                  sub_1CD02C3AC(a1, (uint64_t)"ReservedNumVGPRs", v161 + 140, (unsigned __int16 *)&v177);
                  LOWORD(v177.__r_.__value_.__l.__data_) = -1;
                  sub_1CD02C3AC(a1, (uint64_t)"ReservedFirstVGPR", v161 + 141, (unsigned __int16 *)&v177);
                  LOWORD(v177.__r_.__value_.__l.__data_) = -1;
                  sub_1CD02C3AC(a1, (uint64_t)"PrivateSegmentBufferSGPR", v161 + 142, (unsigned __int16 *)&v177);
                  LOWORD(v177.__r_.__value_.__l.__data_) = -1;
                  sub_1CD02C3AC(a1, (uint64_t)"WavefrontPrivateSegmentOffsetSGPR", v161 + 143, (unsigned __int16 *)&v177);
                  (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 112))(a1);
                  (*(void (**)(llvm::yaml::IO *, std::string *))(*(void *)a1 + 128))(a1, v176);
                }
              }
              (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 112))(a1);
              (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 40))(a1, v172);
              uint64_t v18 = v168;
              a2 = (uint64_t)v169;
            }
            ++v19;
          }
          while (v19 != v18);
        }
        (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 48))(a1);
        return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v171);
      }
    }
  }
  return result;
}

uint64_t sub_1CD02BC38(llvm::yaml::IO *a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 64))(a1);
  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
    uint64_t v5 = ((*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = 0;
      if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(void *)a1 + 72))(a1, i, &v10))
      {
        uint64_t v7 = *(char **)a2;
        unint64_t v8 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
        if (v8 <= i)
        {
          sub_1CBF2A8C4((char **)a2, i - v8 + 1);
          uint64_t v7 = *(char **)a2;
        }
        sub_1CD3EDF78(a1, (unsigned int *)&v7[4 * i]);
        (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 80))(a1, v10);
      }
    }
  }
  return (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 88))(a1);
}

std::string *sub_1CD02BDC0(llvm::yaml::IO *a1, uint64_t a2, uint64_t a3, const std::string *a4)
{
  uint64_t v26 = 0;
  char v25 = 0;
  int v8 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
  BOOL v9 = 0;
  if (v8)
  {
    char v10 = *(unsigned char *)(a3 + 23);
    if (v10 >= 0) {
      uint64_t v11 = v10 & 0x7F;
    }
    else {
      uint64_t v11 = *(void *)(a3 + 8);
    }
    signed __int8 v12 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    int v13 = v12;
    std::string::size_type size = v12 & 0x7F;
    if (v13 < 0) {
      std::string::size_type size = a4->__r_.__value_.__l.__size_;
    }
    if (v11 == size)
    {
      if (v13 >= 0) {
        uint64_t v15 = a4;
      }
      else {
        uint64_t v15 = (const std::string *)a4->__r_.__value_.__r.__words[0];
      }
      if ((*(unsigned char *)(a3 + 23) & 0x80) != 0)
      {
        BOOL v9 = memcmp(*(const void **)a3, v15, *(void *)(a3 + 8)) == 0;
      }
      else if ((v10 & 0x7F) != 0)
      {
        uint64_t v16 = (v10 & 0x7F) - 1;
        uint64_t v17 = (unsigned __int8 *)a3;
        do
        {
          int v19 = *v17++;
          int v18 = v19;
          int v21 = v15->__r_.__value_.__s.__data_[0];
          uint64_t v15 = (const std::string *)((char *)v15 + 1);
          int v20 = v21;
          BOOL v23 = v16-- != 0;
          BOOL v9 = v18 == v20;
        }
        while (v18 == v20 && v23);
      }
      else
      {
        BOOL v9 = 1;
      }
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  uint64_t result = (std::string *)(*(uint64_t (**)(llvm::yaml::IO *, uint64_t, void, BOOL, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, 0, v9, &v25, &v26);
  if (result)
  {
    sub_1CD67281C(a1, a3);
    return (std::string *)(*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v26);
  }
  else if (v25)
  {
    return std::string::operator=((std::string *)a3, a4);
  }
  return result;
}

void *sub_1CD02BF68(llvm::yaml::IO *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v9 = (*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)
    && (size_t v8 = *(void *)(a3 + 8) - *(void *)a3, v8 == *(void *)(a4 + 8) - *(void *)a4)
    && memcmp(*(const void **)a3, *(const void **)a4, v8) == 0;
  uint64_t v12 = 0;
  char v11 = 0;
  uint64_t result = (void *)(*(uint64_t (**)(llvm::yaml::IO *, uint64_t, void, BOOL, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, 0, v9, &v11, &v12);
  if (result)
  {
    sub_1CD02BC38(a1, a3);
    return (void *)(*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v12);
  }
  else if (a3 != a4)
  {
    if (v11) {
      return sub_1CC19E0C8((void *)a3, *(char **)a4, *(char **)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
    }
  }
  return result;
}

uint64_t sub_1CD02C0AC(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t v20 = 0;
  char v19 = 0;
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*a3 == *a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, 0, v9, &v19, &v20);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
    unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (*a3) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 168))(a1, "Default", v12)) {
      *a3 = 0;
    }
    unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (*a3 == 1) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 168))(a1, "ReadOnly", v14)) {
      *a3 = 1;
    }
    unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (*a3 == 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 168))(a1, "WriteOnly", v16)) {
      *a3 = 2;
    }
    unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (*a3 == 3) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 168))(a1, "ReadWrite", v18)) {
      *a3 = 3;
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v20);
  }
  else if (v19)
  {
    *a3 = *a4;
  }
  return result;
}

uint64_t sub_1CD02C3AC(llvm::yaml::IO *a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v12 = 0;
  char v11 = 0;
  unsigned int v8 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
  if (*a3 == *a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, uint64_t, void, uint64_t, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, 0, v9, &v11, &v12);
  if (result)
  {
    sub_1CD5645A4(a1, a3);
    return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v12);
  }
  else if (v11)
  {
    *a3 = *a4;
  }
  return result;
}

void *llvm::APFixedPoint::convert@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v33 = v8;
  if (v8 > 0x40) {
    operator new[]();
  }
  unint64_t __src = *(void **)a1;
  unsigned __int8 v34 = *(unsigned char *)(a1 + 12);
  unsigned int v9 = *a2;
  unsigned int v10 = HIWORD(*a2) & 0x1FFF;
  unsigned int v11 = *(_WORD *)(a1 + 18) & 0x1FFF;
  if (a3) {
    *a3 = 0;
  }
  if (v10 <= v11)
  {
    sub_1CD820918((llvm::APInt *)&__src, (*(_WORD *)(a1 + 18) & 0x1FFF) - v10);
  }
  else
  {
    sub_1CC19F124((uint64_t)&__src, v8 + v10 - (*(_WORD *)(a1 + 18) & 0x1FFF), (uint64_t)&v36);
    if (v33 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    unint64_t __src = v36;
    unsigned int v33 = v37;
    unsigned __int8 v34 = v38;
    unsigned int v12 = v10 - (*(_WORD *)(a1 + 18) & 0x1FFF);
    if (v37 > 0x40)
    {
      llvm::APInt::shlSlowCase((llvm::APInt *)&__src, v12);
    }
    else
    {
      uint64_t v13 = (void)v36 << v12;
      if (v37 == v12) {
        uint64_t v13 = 0;
      }
      if (v37) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v37;
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t __src = (void *)(v14 & v13);
    }
  }
  int v15 = HIWORD(*a2) & 0x1FFF;
  if ((*a2 & 0xA0000000) != 0) {
    int v16 = ~v15;
  }
  else {
    int v16 = -v15;
  }
  unsigned int v17 = v10 + (unsigned __int16)*a2 + v16;
  if (v33 >= v17) {
    char v18 = v10 + *a2 + v16;
  }
  else {
    char v18 = v33;
  }
  char v31 = a3;
  if (v33 > 0x40) {
    operator new[]();
  }
  if (v33 <= v17)
  {
    unint64_t v19 = 0;
    unint64_t v20 = 0;
  }
  else
  {
    unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> (v18 - v33) << v18;
    unint64_t v20 = v19;
  }
  int v21 = __src;
  if ((v20 & (unint64_t)__src) != v20 && (v20 & (unint64_t)__src) != 0)
  {
    if ((*((unsigned char *)a2 + 3) & 0x40) != 0)
    {
      if (!v34 && (((unint64_t)__src >> (v33 - 1)) & 1) != 0)
      {
        unsigned int v23 = v33;
      }
      else
      {
        if (v33) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
        }
        else {
          unint64_t v22 = 0;
        }
        unint64_t v20 = v22 & ~v20;
        unsigned int v23 = v33;
      }
      unint64_t __src = (void *)v20;
      unsigned int v33 = v23;
      int v21 = (void *)v20;
    }
    else if (v31)
    {
      unsigned char *v31 = 1;
    }
  }
  int v24 = v34;
  if (!(*a2 & 0x20000000 | v34))
  {
    uint64_t v25 = v33;
    p_src = (void **)&v21[(v33 - 1) >> 6];
    if (v33 < 0x41) {
      p_src = &__src;
    }
    if ((((unint64_t)*p_src >> (v33 - 1)) & 1) == 0) {
      goto LABEL_47;
    }
    if ((*a2 & 0x40000000) == 0)
    {
      if (v31) {
        unsigned char *v31 = 1;
      }
      goto LABEL_47;
    }
    if (v33 <= 0x40)
    {
      unint64_t __src = 0;
      goto LABEL_47;
    }
    *int v21 = 0;
    bzero((char *)__src + 8, (((unint64_t)(v25 + 63) >> 3) - 8) & 0xFFFFFFF8);
    int v24 = v34;
  }
  if (v24)
  {
    uint64_t v27 = &v36;
    llvm::APInt::zextOrTrunc((uint64_t *)&__src, (unsigned __int16)v9, (uint64_t)&v36);
    goto LABEL_51;
  }
LABEL_47:
  uint64_t v27 = (void **)v35;
  llvm::APInt::sextOrTrunc((uint64_t)&__src, (unsigned __int16)v9, (uint64_t)v35);
LABEL_51:
  unsigned int v28 = *((_DWORD *)v27 + 2);
  unint64_t v29 = *v27;
  if (v33 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  unint64_t __src = v29;
  unsigned int v33 = v28;
  unsigned __int8 v34 = (*a2 & 0x20000000) == 0;
  sub_1CD823480(a4, (uint64_t *)&__src, a2);
  uint64_t result = (void *)v19;
  if (v33 >= 0x41)
  {
    uint64_t result = __src;
    if (__src) {
      return (void *)MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::APFixedPoint::compare(uint64_t a1, uint64_t a2)
{
  sub_1CD820984((uint64_t)&__src, (uint64_t *)a1);
  sub_1CD820984((uint64_t)&v34, (uint64_t *)a2);
  int v4 = *(unsigned __int8 *)(a1 + 12);
  int v5 = v36;
  unsigned int v6 = *(_WORD *)(a2 + 18) & 0x1FFF;
  unsigned int v7 = v35;
  if (*(_DWORD *)(a1 + 8) > v35) {
    unsigned int v7 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v8 = *(_WORD *)(a1 + 18) & 0x1FFF;
  unsigned int v9 = v6 - v8;
  BOOL v10 = v8 >= v6;
  unsigned int v11 = v8 - v6;
  if (!v10) {
    unsigned int v11 = v9;
  }
  unsigned int v12 = v11 + v7;
  if (v39) {
    llvm::APInt::zextOrTrunc((uint64_t *)&__src, v12, (uint64_t)&v40);
  }
  else {
    llvm::APInt::sextOrTrunc((uint64_t)&__src, v12, (uint64_t)&v40);
  }
  unsigned int v13 = v41;
  char v14 = v39;
  int v15 = v40;
  if (v38 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  unint64_t __src = v15;
  unsigned int v38 = v13;
  char v39 = v14;
  if (v36) {
    llvm::APInt::zextOrTrunc((uint64_t *)&v34, v12, (uint64_t)&v40);
  }
  else {
    llvm::APInt::sextOrTrunc((uint64_t)&v34, v12, (uint64_t)&v40);
  }
  unsigned int v16 = v41;
  unsigned __int8 v17 = v36;
  char v18 = v40;
  if (v35 >= 0x41 && v34) {
    MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
  }
  unsigned __int8 v34 = v18;
  unsigned int v35 = v16;
  unsigned __int8 v36 = v17;
  unsigned int v19 = *(_WORD *)(a1 + 18) & 0x1FFF;
  if (v19 <= v6) {
    int v20 = v6;
  }
  else {
    int v20 = *(_WORD *)(a1 + 18) & 0x1FFF;
  }
  unsigned int v21 = v20 - v19;
  if (v38 > 0x40) {
    operator new[]();
  }
  uint64_t v22 = (void)__src << v21;
  if (v38 == v21) {
    uint64_t v22 = 0;
  }
  if (v38) {
    unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v38;
  }
  else {
    unint64_t v23 = 0;
  }
  unint64_t __src = (void *)(v23 & v22);
  unsigned int v24 = v20 - v6;
  if (v35 > 0x40) {
    operator new[]();
  }
  uint64_t v25 = (void)v34 << v24;
  if (v35 == v24) {
    uint64_t v25 = 0;
  }
  if (v35) {
    unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v35;
  }
  else {
    unint64_t v26 = 0;
  }
  unint64_t v33 = v26 & v25;
  BOOL v27 = v4 != 0;
  unsigned __int8 v34 = (void *)v33;
  if (!(v5 | v4))
  {
    uint64_t v29 = -(uint64_t)v38;
    uint64_t v30 = (uint64_t)((void)__src << v29) >> v29;
    uint64_t v31 = (uint64_t)(v33 << v29) >> v29;
    if (v30 >= v31) {
      return v30 > v31;
    }
    return 0xFFFFFFFFLL;
  }
  if (!v4 || !v5)
  {
    if (!v5) {
      BOOL v27 = 1;
    }
    if (!v27)
    {
      if ((((unint64_t)__src >> (v38 - 1)) & 1) == 0 && v33 <= (unint64_t)__src) {
        return v33 < (unint64_t)__src;
      }
      return 0xFFFFFFFFLL;
    }
    if (((unint64_t)v34 >> (v35 - 1))) {
      return 1;
    }
  }
  if ((unint64_t)__src < v33) {
    return 0xFFFFFFFFLL;
  }
  return (unint64_t)__src > v33;
}

uint64_t sub_1CD02D078(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 0x40) {
    operator new[]();
  }
  uint64_t v4 = *(void *)a2 << a3;
  if (v3 == a3) {
    uint64_t v4 = 0;
  }
  unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
  if (!v3) {
    unint64_t v5 = 0;
  }
  unint64_t v6 = v5 & v4;
  char v7 = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(result + 8) = v3;
  *(void *)uint64_t result = v6;
  *(unsigned char *)(result + 12) = v7;
  return result;
}

BOOL sub_1CD02D148(uint64_t a1)
{
  unsigned int v5 = 64;
  uint64_t v4 = 0;
  char v6 = 0;
  int v1 = sub_1CC19EE98(a1, (uint64_t)&v4);
  if (v5 >= 0x41 && v4)
  {
    int v3 = v1;
    MEMORY[0x1D25D9CB0](v4, 0x1000C8000313F17);
    int v1 = v3;
  }
  return v1 != 0;
}

uint64_t llvm::APFixedPoint::convertToInt@<X0>(llvm::APFixedPoint *this@<X0>, BOOL *a2@<X3>, uint64_t a3@<X1>, int a4@<W2>, uint64_t a5@<X8>)
{
  sub_1CD822C1C((uint64_t)&v49, (uint64_t)this);
  unsigned int v10 = *((unsigned __int16 *)this + 8);
  sub_1CCA2FDC8(a3, a4 ^ 1, (uint64_t)&v46);
  sub_1CCA2FE3C(a3, a4 ^ 1, (uint64_t)&v43);
  if (v10 >= a3)
  {
    if (v10 > a3)
    {
      sub_1CC19F124((uint64_t)&v46, v10, (uint64_t)&v52);
      if (v47 >= 0x41 && v46) {
        MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
      }
      unint64_t v46 = v52;
      unsigned int v47 = v53;
      char v48 = v54;
      sub_1CC19F124((uint64_t)&v43, v10, (uint64_t)&v52);
      if (v44 >= 0x41 && v43) {
        MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
      }
      unint64_t v43 = v52;
      unsigned int v44 = v53;
      char v45 = v54;
    }
  }
  else
  {
    sub_1CC19F124((uint64_t)&v49, a3, (uint64_t)&v52);
    if (v50 >= 0x41 && v49) {
      MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
    }
    unint64_t v49 = v52;
    unsigned int v50 = v53;
    char v51 = v54;
  }
  if (a2)
  {
    if (!v51 && (a4 & 1) == 0)
    {
      unsigned int v11 = (unint64_t *)(v49 + 8 * ((v50 - 1) >> 6));
      if (v50 < 0x41) {
        unsigned int v11 = &v49;
      }
      if (((*v11 >> (v50 - 1)) & 1) == 0)
      {
        if (v50 <= 0x40)
        {
          BOOL v12 = v43 < v49;
LABEL_37:
          *a2 = v12;
          goto LABEL_38;
        }
        unint64_t v34 = (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8;
        while (v34)
        {
          unint64_t v35 = *(void *)(v49 - 8 + v34);
          unint64_t v36 = *(void *)(v43 - 8 + v34);
          v34 -= 8;
          BOOL v13 = v35 > v36;
          if (v35 != v36) {
            goto LABEL_26;
          }
        }
LABEL_92:
        BOOL v12 = 0;
        goto LABEL_37;
      }
LABEL_36:
      BOOL v12 = 1;
      goto LABEL_37;
    }
    if (v51 && a4)
    {
      if (v50 <= 0x40)
      {
        BOOL v13 = v49 > v43;
LABEL_26:
        BOOL v12 = v13;
        goto LABEL_37;
      }
      unint64_t v31 = (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8;
      while (v31)
      {
        unint64_t v32 = *(void *)(v49 - 8 + v31);
        unint64_t v33 = *(void *)(v43 - 8 + v31);
        v31 -= 8;
        BOOL v13 = v32 > v33;
        if (v32 != v33) {
          goto LABEL_26;
        }
      }
      goto LABEL_92;
    }
    if (v51)
    {
      if (v50 > 0x40)
      {
        uint64_t v14 = 8 * (((unint64_t)v50 + 63) >> 6);
        unint64_t v37 = v49 - 8;
        uint64_t v38 = v14;
        do
        {
          if (!v38) {
            goto LABEL_87;
          }
          unint64_t v39 = *(void *)(v37 + v38);
          unint64_t v40 = *(void *)(v46 - 8 + v38);
          v38 -= 8;
        }
        while (v39 == v40);
        if (v39 <= v40) {
          goto LABEL_36;
        }
LABEL_87:
        while (v14)
        {
          unint64_t v41 = *(void *)(v37 + v14);
          unint64_t v42 = *(void *)(v43 - 8 + v14);
          v14 -= 8;
          BOOL v30 = v41 > v42;
          if (v41 != v42) {
            goto LABEL_89;
          }
        }
      }
      else
      {
        if (v49 < v46) {
          goto LABEL_36;
        }
        LODWORD(v14) = v49 > v43;
        if (v49 < v43) {
          LODWORD(v14) = -1;
        }
      }
    }
    else if (v50 > 0x40)
    {
      uint64_t v19 = *(void *)(v49 + 8 * ((v50 - 1) >> 6)) & (1 << (v50 - 1));
      unsigned int v20 = v47 - 1;
      unsigned int v21 = &v46;
      if (v47 >= 0x41) {
        unsigned int v21 = (unint64_t *)(v46 + 8 * (v20 >> 6));
      }
      if ((v19 != 0) == ((*v21 >> v20) & 1))
      {
        unint64_t v24 = (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8;
        while (v24)
        {
          unint64_t v25 = *(void *)(v49 - 8 + v24);
          unint64_t v26 = *(void *)(v46 - 8 + v24);
          v24 -= 8;
          if (v25 != v26)
          {
            if (v25 <= v26) {
              goto LABEL_36;
            }
            break;
          }
        }
      }
      else if (v19)
      {
        goto LABEL_36;
      }
      unsigned int v22 = v44 - 1;
      unint64_t v23 = &v43;
      if (v44 >= 0x41) {
        unint64_t v23 = (unint64_t *)(v43 + 8 * (v22 >> 6));
      }
      if ((v19 != 0) == ((*v23 >> v22) & 1))
      {
        unint64_t v27 = (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v27)
          {
            LODWORD(v14) = 0;
            goto LABEL_54;
          }
          unint64_t v28 = *(void *)(v49 - 8 + v27);
          unint64_t v29 = *(void *)(v43 - 8 + v27);
          v27 -= 8;
          BOOL v30 = v28 > v29;
        }
        while (v28 == v29);
LABEL_89:
        if (v30) {
          LODWORD(v14) = 1;
        }
        else {
          LODWORD(v14) = -1;
        }
      }
      else if (v19)
      {
        LODWORD(v14) = -1;
      }
      else
      {
        LODWORD(v14) = 1;
      }
    }
    else
    {
      uint64_t v15 = (uint64_t)(v49 << -(char)v50) >> -(char)v50;
      if (v15 < (uint64_t)(v46 << -(char)v50) >> -(char)v50) {
        goto LABEL_36;
      }
      uint64_t v14 = (uint64_t)(v43 << (64 - v50)) >> (64 - v50);
      BOOL v13 = v15 < v14;
      LODWORD(v14) = v15 > v14;
      if (v13) {
        LODWORD(v14) = -1;
      }
    }
LABEL_54:
    BOOL v12 = (int)v14 > 0;
    goto LABEL_37;
  }
LABEL_38:
  char v51 = a4 ^ 1;
  if (a4) {
    uint64_t result = llvm::APInt::sextOrTrunc((uint64_t)&v49, a3, (uint64_t)&v52);
  }
  else {
    uint64_t result = (uint64_t)llvm::APInt::zextOrTrunc((uint64_t *)&v49, a3, (uint64_t)&v52);
  }
  char v17 = v51;
  unint64_t v18 = v52;
  *(_DWORD *)(a5 + 8) = v53;
  *(void *)a5 = v18;
  *(unsigned char *)(a5 + 12) = v17;
  if (v44 >= 0x41)
  {
    uint64_t result = v43;
    if (v43) {
      uint64_t result = MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
    }
  }
  if (v47 >= 0x41)
  {
    uint64_t result = v46;
    if (v46) {
      uint64_t result = MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
    }
  }
  if (v50 >= 0x41)
  {
    uint64_t result = v49;
    if (v49) {
      return MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::APFloatBase::EnumToSemantics(int a1)
{
  return (uint64_t)*(&off_1E6852F00 + a1);
}

void *llvm::APFloatBase::IEEEhalf(llvm::APFloatBase *this)
{
  return &unk_1CFB2E2E0;
}

void *llvm::APFloatBase::BFloat(llvm::APFloatBase *this)
{
  return &unk_1CFB2E2F4;
}

void *llvm::APFloatBase::IEEEsingle(llvm::APFloatBase *this)
{
  return &unk_1CFB2E308;
}

void *llvm::APFloatBase::IEEEdouble(llvm::APFloatBase *this)
{
  return &unk_1CFB2E31C;
}

void *llvm::APFloatBase::IEEEquad(llvm::APFloatBase *this)
{
  return &unk_1CFB2E330;
}

void *llvm::APFloatBase::PPCDoubleDouble(llvm::APFloatBase *this)
{
  return &unk_1CFB2E344;
}

void *llvm::APFloatBase::Float8E5M2(llvm::APFloatBase *this)
{
  return &unk_1CFB2E358;
}

void *llvm::APFloatBase::Float8E4M3FN(llvm::APFloatBase *this)
{
  return &unk_1CFB2E36C;
}

void *llvm::APFloatBase::x87DoubleExtended(llvm::APFloatBase *this)
{
  return &unk_1CFB2E380;
}

uint64_t llvm::APFloatBase::SemanticsToEnum(void *a1)
{
  if (a1 == &unk_1CFB2E2E0) {
    return 0;
  }
  if (a1 == &unk_1CFB2E2F4) {
    return 1;
  }
  if (a1 == &unk_1CFB2E308) {
    return 2;
  }
  if (a1 == &unk_1CFB2E31C) {
    return 3;
  }
  if (a1 == &unk_1CFB2E330) {
    return 4;
  }
  if (a1 == &unk_1CFB2E344) {
    return 5;
  }
  if (a1 == &unk_1CFB2E358) {
    return 6;
  }
  if (a1 == &unk_1CFB2E36C) {
    return 7;
  }
  return 8;
}

void *llvm::APFloatBase::Bogus(llvm::APFloatBase *this)
{
  return &unk_1CFB2E394;
}

uint64_t llvm::APFloatBase::semanticsPrecision(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void *llvm::detail::IEEEFloat::initialize(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  return result;
}

void *llvm::detail::IEEEFloat::freeSignificand(void *this)
{
  if ((*(_DWORD *)(*this + 8) - 64) <= 0xFFFFFF7F)
  {
    this = (void *)this[1];
    if (this) {
      JUMPOUT(0x1D25D9CB0);
    }
  }
  return this;
}

uint64_t llvm::detail::IEEEFloat::assign(uint64_t this, const llvm::detail::IEEEFloat *a2)
{
  char v2 = *(unsigned char *)(this + 20) & 0xF7 | *((unsigned char *)a2 + 20) & 8;
  *(unsigned char *)(this + 20) = v2;
  char v3 = *((unsigned char *)a2 + 20);
  int v4 = v3 & 7;
  *(unsigned char *)(this + 20) = v2 & 0xF8 | v3 & 7;
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  BOOL v6 = (v3 & 6) != 0 && v4 != 3;
  if (v4 == 1 || v6)
  {
    uint64_t v8 = *(void *)this;
    this += 8;
    uint64_t v9 = *(unsigned int *)(v8 + 8);
    if ((v9 - 64) <= 0xFFFFFF7F) {
      this = *(void *)this;
    }
    unsigned int v10 = *(_DWORD *)(*(void *)a2 + 8) - 64;
    BOOL v13 = (uint64_t *)*((void *)a2 + 1);
    unsigned int v11 = (char *)a2 + 8;
    BOOL v12 = v13;
    if (v10 >= 0xFFFFFF80) {
      uint64_t v14 = (uint64_t *)v11;
    }
    else {
      uint64_t v14 = v12;
    }
    if (v9 <= 0xFFFFFFBF)
    {
      unint64_t v15 = (unint64_t)(v9 + 64) >> 6;
      do
      {
        uint64_t v16 = *v14++;
        *(void *)this = v16;
        this += 8;
        --v15;
      }
      while (v15);
    }
  }
  return this;
}

uint64_t *llvm::detail::IEEEFloat::copySignificand(llvm::detail::IEEEFloat *this, uint64_t **a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t result = (uint64_t *)((char *)this + 8);
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if ((v4 - 64) <= 0xFFFFFF7F) {
    uint64_t result = (uint64_t *)*result;
  }
  unsigned int v5 = *((_DWORD *)*a2 + 2) - 64;
  uint64_t v8 = a2[1];
  BOOL v6 = (char *)(a2 + 1);
  char v7 = v8;
  if (v5 >= 0xFFFFFF80) {
    uint64_t v9 = (uint64_t *)v6;
  }
  else {
    uint64_t v9 = v7;
  }
  if (v4 <= 0xFFFFFFBF)
  {
    unint64_t v10 = (unint64_t)(v4 + 64) >> 6;
    do
    {
      uint64_t v11 = *v9++;
      *result++ = v11;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::significandParts(llvm::detail::IEEEFloat *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t result = (uint64_t)this + 8;
  if ((*(_DWORD *)(v2 + 8) - 64) <= 0xFFFFFF7F) {
    return *(void *)result;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  uint64_t result = (uint64_t)this + 8;
  if ((*(_DWORD *)(v2 + 8) - 64) <= 0xFFFFFF7F) {
    return *(void *)result;
  }
  return result;
}

unsigned char *llvm::detail::IEEEFloat::makeNaN(unsigned char *this, int a2, int a3, const llvm::APInt *a4)
{
  if (a3) {
    char v4 = 9;
  }
  else {
    char v4 = 1;
  }
  this[20] = this[20] & 0xF0 | v4;
  uint64_t v5 = *(void *)this;
  int v6 = *(_DWORD *)(*(void *)this + 16);
  int v7 = **(_DWORD **)this;
  if (v6 != 1) {
    ++v7;
  }
  *((_DWORD *)this + 4) = v7;
  unsigned int v8 = *(_DWORD *)(v5 + 8);
  uint64_t v9 = this + 8;
  if (v8 - 64 <= 0xFFFFFF7F) {
    uint64_t v9 = (void *)*v9;
  }
  unsigned int v10 = v8 + 64;
  unint64_t v11 = (v8 + 64) >> 6;
  unsigned int v12 = 1;
  int v55 = 1;
  uint64_t v54 = 0;
  if (v6 == 1)
  {
    unint64_t v46 = this;
    unsigned int v50 = v9;
    unint64_t v42 = v10 >> 6;
    unsigned int v33 = v8;
    unsigned int v38 = v8 + 64;
    sub_1CB8F1EEC((uint64_t)&v52, v8 - 1, -1);
    unsigned int v10 = v38;
    unsigned int v8 = v33;
    unint64_t v11 = v42;
    this = v46;
    uint64_t v9 = v50;
    uint64_t v13 = v52;
    a2 = 0;
    uint64_t v54 = v52;
    unsigned int v12 = v53;
    int v55 = v53;
    a4 = (const llvm::APInt *)&v54;
    unsigned int v16 = v53;
    goto LABEL_19;
  }
  if (a4)
  {
    uint64_t v13 = 0;
    unsigned int v16 = *((_DWORD *)a4 + 2);
LABEL_19:
    unint64_t v17 = ((unint64_t)v16 + 63) >> 6;
    if (v11 > v17)
    {
      void *v9 = 0;
      if (v10 >= 0x80)
      {
        unsigned int v39 = v12;
        unint64_t v43 = v11;
        unsigned int v47 = this;
        unsigned int v34 = v8;
        char v51 = v9;
        uint64_t v36 = v13;
        int v30 = a2;
        unint64_t v27 = ((unint64_t)v16 + 63) >> 6;
        unint64_t v28 = a4;
        unsigned int v26 = v16;
        bzero(v9 + 1, 8 * (v11 - 2) + 8);
        LODWORD(v17) = v27;
        a4 = v28;
        unsigned int v16 = v26;
        a2 = v30;
        unsigned int v8 = v34;
        unint64_t v11 = v43;
        this = v47;
        unsigned int v12 = v39;
        uint64_t v13 = v36;
        uint64_t v9 = v51;
      }
    }
    if (v16 >= 0x41) {
      a4 = *(const llvm::APInt **)a4;
    }
    if (v11 >= v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = v11;
    }
    if (v18)
    {
      uint64_t v19 = v9;
      do
      {
        uint64_t v20 = *(void *)a4;
        a4 = (const llvm::APInt *)((char *)a4 + 8);
        *v19++ = v20;
        --v18;
      }
      while (v18);
    }
    unsigned int v15 = *(_DWORD *)(*(void *)this + 8);
    unsigned int v21 = (v15 - 1) >> 6;
    v9[v21] &= ~(-1 << (v15 - 1));
    for (unsigned int i = v21 + 1; v11 != i; ++i)
      v9[i] = 0;
    unint64_t v14 = v15 - 2;
    if (!a2) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
  void *v9 = 0;
  if (v10 >= 0x80)
  {
    char v45 = this;
    unint64_t v49 = v9;
    char v29 = a2;
    unsigned int v32 = v8;
    unint64_t v41 = (v8 + 64) >> 6;
    bzero(v9 + 1, 8 * (v11 - 2) + 8);
    LOBYTE(a2) = v29;
    unsigned int v8 = v32;
    unint64_t v11 = v41;
    this = v45;
    uint64_t v9 = v49;
  }
  uint64_t v13 = 0;
  unint64_t v14 = v8 - 2;
  unsigned int v12 = 1;
  unsigned int v15 = v8;
  if ((a2 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_30:
  unint64_t v40 = v11;
  unsigned int v44 = this;
  unsigned int v31 = v15;
  uint64_t v35 = v13;
  unsigned int v37 = v12;
  char v48 = v9;
  unsigned int v23 = v8;
  llvm::APInt::tcClearBit((uint64_t)v9, (unint64_t *)v14);
  if (v23 > 0xFFFFFFBF)
  {
LABEL_31:
    unsigned int v15 = v31;
    LODWORD(v14) = v31 - 3;
    this = v44;
    uint64_t v9 = v48;
    uint64_t v13 = v35;
    unsigned int v12 = v37;
LABEL_13:
    v9[v14 >> 6] |= 1 << v14;
    goto LABEL_14;
  }
  unint64_t v24 = *v48;
  if (!*v48)
  {
    while (v40 - 1 != v24)
    {
      if (v48[++v24])
      {
        if (v24 >= v40) {
          goto LABEL_31;
        }
        goto LABEL_36;
      }
    }
    goto LABEL_31;
  }
LABEL_36:
  this = v44;
  uint64_t v9 = v48;
  uint64_t v13 = v35;
  unsigned int v12 = v37;
  unsigned int v15 = v31;
LABEL_14:
  if (*(_UNKNOWN **)this == &unk_1CFB2E380) {
    v9[(v15 - 1) >> 6] |= 1 << (v15 - 1);
  }
  if (v12 >= 0x41)
  {
    if (v13) {
      return (unsigned char *)MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
    }
  }
  return this;
}

uint64_t llvm::detail::IEEEFloat::exponentNaN(unsigned int **this)
{
  unsigned int v1 = **this;
  if ((*this)[4] == 1) {
    return v1;
  }
  else {
    return v1 + 1;
  }
}

void *llvm::detail::IEEEFloat::operator=(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = *a2;
    if (*result != *a2)
    {
      if ((*(_DWORD *)(*result + 8) - 64) <= 0xFFFFFF7F)
      {
        uint64_t v18 = result[1];
        if (v18)
        {
          uint64_t v19 = a2;
          uint64_t v20 = result;
          MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
          a2 = v19;
          uint64_t result = v20;
          uint64_t v2 = *v19;
        }
      }
      *uint64_t result = v2;
      if ((*(_DWORD *)(v2 + 8) + 64) >= 0x80) {
        operator new[]();
      }
    }
    char v3 = *((unsigned char *)result + 20) & 0xF7 | *((unsigned char *)a2 + 20) & 8;
    *((unsigned char *)result + 20) = v3;
    char v4 = *((unsigned char *)a2 + 20);
    int v5 = v4 & 7;
    *((unsigned char *)result + 20) = v3 & 0xF8 | v4 & 7;
    *((_DWORD *)result + 4) = *((_DWORD *)a2 + 4);
    BOOL v7 = (v4 & 6) != 0 && v5 != 3;
    if (v5 == 1 || v7)
    {
      uint64_t v9 = result + 1;
      uint64_t v10 = *(unsigned int *)(*result + 8);
      if ((v10 - 64) <= 0xFFFFFF7F) {
        uint64_t v9 = (void *)*v9;
      }
      unsigned int v11 = *(_DWORD *)(*a2 + 8) - 64;
      unint64_t v14 = (uint64_t *)a2[1];
      unsigned int v12 = a2 + 1;
      uint64_t v13 = v14;
      if (v11 >= 0xFFFFFF80) {
        unsigned int v15 = v12;
      }
      else {
        unsigned int v15 = v13;
      }
      if (v10 <= 0xFFFFFFBF)
      {
        unint64_t v16 = (unint64_t)(v10 + 64) >> 6;
        do
        {
          uint64_t v17 = *v15++;
          *v9++ = v17;
          --v16;
        }
        while (v16);
      }
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::operator=(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)result + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t v3 = *(void *)(result + 8);
    if (v3)
    {
      uint64_t v4 = a2;
      uint64_t v5 = result;
      MEMORY[0x1D25D9CB0](v3, 0x1000C8000313F17);
      a2 = v4;
      uint64_t result = v5;
    }
  }
  *(void *)uint64_t result = *(void *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  char v2 = *(unsigned char *)(result + 20) & 0xF8 | *(unsigned char *)(a2 + 20) & 7;
  *(unsigned char *)(result + 20) = v2;
  *(unsigned char *)(result + 20) = v2 & 0xF7 | *(unsigned char *)(a2 + 20) & 8;
  *(void *)a2 = &unk_1CFB2E394;
  return result;
}

BOOL llvm::detail::IEEEFloat::isDenormal(llvm::detail::IEEEFloat *this)
{
  BOOL v1 = (*((unsigned char *)this + 20) & 6) == 0 || (*((unsigned char *)this + 20) & 7) == 3;
  if (v1 || *((_DWORD *)this + 4) != *(_DWORD *)(*(void *)this + 4)) {
    return 0;
  }
  int v3 = *(_DWORD *)(*(void *)this + 8);
  uint64_t v4 = (void *)((char *)this + 8);
  if ((v3 - 64) <= 0xFFFFFF7F) {
    uint64_t v4 = (void *)*v4;
  }
  return ((v4[(v3 - 1) >> 6] >> (v3 - 1)) & 1) == 0;
}

uint64_t llvm::detail::IEEEFloat::significandMSB(llvm::detail::IEEEFloat *this)
{
  uint64_t v2 = *(void *)this;
  BOOL v1 = (void *)((char *)this + 8);
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 - 64) <= 0xFFFFFF7F) {
    BOOL v1 = (void *)*v1;
  }
  unsigned int v4 = (v3 + 64) >> 6;
  int v5 = 64 - (v4 << 6);
  unsigned int v6 = v4 - 1;
  while (1)
  {
    unint64_t v7 = v1[v6];
    if (v7) {
      break;
    }
    v5 += 64;
    if (--v6 == -1) {
      return 0xFFFFFFFFLL;
    }
  }
  return (__clz(v7) - v5) ^ 0x3F;
}

BOOL llvm::detail::IEEEFloat::isSignificandAllOnes(llvm::detail::IEEEFloat *this)
{
  uint64_t v2 = *(void *)this;
  BOOL v1 = (uint64_t *)((char *)this + 8);
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 - 64) <= 0xFFFFFF7F) {
    BOOL v1 = (uint64_t *)*v1;
  }
  unsigned int v4 = v3 + 63;
  uint64_t v5 = (v4 >> 6) - 1;
  if (v4 >> 6 == 1)
  {
    uint64_t v5 = 0;
    return (v1[v5] | (-1 << v4)) == -1;
  }
  else
  {
    uint64_t v7 = (v4 >> 6) - 1;
    unsigned int v8 = v1;
    while (1)
    {
      uint64_t v9 = *v8++;
      if (v9 != -1) {
        break;
      }
      if (!--v7) {
        return (v1[v5] | (-1 << v4)) == -1;
      }
    }
    return 0;
  }
}

BOOL llvm::detail::IEEEFloat::isLargest(llvm::detail::IEEEFloat *this)
{
  BOOL v1 = *(_DWORD **)this;
  BOOL v3 = (*((unsigned char *)this + 20) & 6) != 0 && (*((unsigned char *)this + 20) & 7) != 3;
  if (*(_DWORD *)(*(void *)this + 16) == 1)
  {
    if (!v3 || *((_DWORD *)this + 4) != *v1) {
      return 0;
    }
    return llvm::detail::IEEEFloat::isSignificandAllOnesExceptLSB(this);
  }
  else
  {
    if (!v3 || *((_DWORD *)this + 4) != *v1) {
      return 0;
    }
    return llvm::detail::IEEEFloat::isSignificandAllOnes(this);
  }
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(uint64_t this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v2 = *(void *)a2;
  *(void *)this = *(void *)a2;
  if ((*(_DWORD *)(v2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  char v3 = *(unsigned char *)(this + 20) & 0xF7 | *((unsigned char *)a2 + 20) & 8;
  *(unsigned char *)(this + 20) = v3;
  char v4 = *((unsigned char *)a2 + 20);
  int v5 = v4 & 7;
  *(unsigned char *)(this + 20) = v3 & 0xF8 | v4 & 7;
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  BOOL v7 = (v4 & 6) != 0 && v5 != 3;
  if (v5 == 1 || v7)
  {
    uint64_t v9 = (void *)(this + 8);
    uint64_t v10 = *(unsigned int *)(*(void *)this + 8);
    if ((v10 - 64) <= 0xFFFFFF7F) {
      uint64_t v9 = (void *)*v9;
    }
    unsigned int v11 = *(_DWORD *)(*(void *)a2 + 8) - 64;
    unint64_t v14 = (uint64_t *)*((void *)a2 + 1);
    unsigned int v12 = (char *)a2 + 8;
    uint64_t v13 = v14;
    if (v11 >= 0xFFFFFF80) {
      unsigned int v15 = (uint64_t *)v12;
    }
    else {
      unsigned int v15 = v13;
    }
    if (v10 <= 0xFFFFFFBF)
    {
      unint64_t v16 = (unint64_t)(v10 + 64) >> 6;
      do
      {
        uint64_t v17 = *v15++;
        *v9++ = v17;
        --v16;
      }
      while (v16);
    }
  }
  return this;
}

{
  uint64_t v2;
  char v3;
  char v4;
  int v5;
  BOOL v7;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;

  uint64_t v2 = *(void *)a2;
  *(void *)this = *(void *)a2;
  if ((*(_DWORD *)(v2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  char v3 = *(unsigned char *)(this + 20) & 0xF7 | *((unsigned char *)a2 + 20) & 8;
  *(unsigned char *)(this + 20) = v3;
  char v4 = *((unsigned char *)a2 + 20);
  int v5 = v4 & 7;
  *(unsigned char *)(this + 20) = v3 & 0xF8 | v4 & 7;
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  BOOL v7 = (v4 & 6) != 0 && v5 != 3;
  if (v5 == 1 || v7)
  {
    uint64_t v9 = (void *)(this + 8);
    uint64_t v10 = *(unsigned int *)(*(void *)this + 8);
    if ((v10 - 64) <= 0xFFFFFF7F) {
      uint64_t v9 = (void *)*v9;
    }
    unsigned int v11 = *(_DWORD *)(*(void *)a2 + 8) - 64;
    unint64_t v14 = (uint64_t *)*((void *)a2 + 1);
    unsigned int v12 = (char *)a2 + 8;
    uint64_t v13 = v14;
    if (v11 >= 0xFFFFFF80) {
      unsigned int v15 = (uint64_t *)v12;
    }
    else {
      unsigned int v15 = v13;
    }
    if (v10 <= 0xFFFFFFBF)
    {
      unint64_t v16 = (unint64_t)(v10 + 64) >> 6;
      do
      {
        uint64_t v17 = *v15++;
        *v9++ = v17;
        --v16;
      }
      while (v16);
    }
  }
  return this;
}

uint64_t llvm::detail::IEEEFloat::roundToIntegral(unsigned char *a1, int a2)
{
  int v3 = a1[20] & 7;
  if (v3 == 1)
  {
    if (*(_DWORD *)(*(void *)a1 + 16) == 1) {
      return 0;
    }
    int v4 = *(_DWORD *)(*(void *)a1 + 8);
    unsigned int v5 = v4 - 64;
    unsigned int v6 = a1 + 8;
    BOOL v7 = a1 + 8;
    if ((v4 - 64) <= 0xFFFFFF7F) {
      BOOL v7 = (void *)*v6;
    }
    char v8 = v4 - 2;
    uint64_t v9 = (v4 - 2) >> 6;
    if ((v7[v9] & (1 << v8)) != 0) {
      return 0;
    }
    if (v5 <= 0xFFFFFF7F) {
      unsigned int v6 = (void *)*v6;
    }
    v6[v9] |= 1 << v8;
    return 1;
  }
  else
  {
    if (v3 == 3 || v3 == 0) {
      return 0;
    }
    uint64_t v13 = *(void *)a1;
    unint64_t v14 = *(unsigned int *)(*(void *)a1 + 8);
    if (*((_DWORD *)a1 + 4) + 1 >= (int)v14) {
      return 0;
    }
    unint64_t v16 = v14 | (v14 >> 1) | ((v14 | (v14 >> 1)) >> 2);
    unint64_t v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    unint64_t v18 = v17 | (v17 >> 16);
    int v19 = v18 + 1;
    unsigned int v32 = v18 + 1;
    if ((v18 + 1) > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v31);
    }
    unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v18;
    if (!v19) {
      LOBYTE(v20) = 0;
    }
    unint64_t v21 = (v20 & 1) << (v14 - 1);
    if (v19 == v14 - 1) {
      unint64_t v21 = 0;
    }
    if (v19) {
      unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
    }
    else {
      unint64_t v22 = 0;
    }
    unint64_t v31 = v22 & v21;
    uint64_t v27 = v13;
    if ((v14 + 64) >= 0x80) {
      operator new[]();
    }
    char v30 = 3;
    int v29 = *(_DWORD *)(v13 + 4) - 1;
    int v23 = *(_DWORD *)(v13 + 8);
    if ((v23 - 64) < 0xFFFFFF80)
    {
      *(void *)a1 = 0;
      bzero(a1 + 8, 8 * (((v23 + 64) >> 6) - 2) + 8);
    }
    else
    {
      uint64_t v28 = 0;
    }
    llvm::detail::IEEEFloat::convertFromAPInt((llvm::detail::IEEEFloat *)&v27, (uint64_t)&v31, 0, 1);
    unsigned int v24 = a1[20];
    char v30 = v30 & 0xF7 | v24 & 8;
    int v25 = (v24 >> 3) & 1;
    uint64_t v10 = llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)&v27, a2, 0);
    llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)&v27, a2, 1);
    char v26 = a1[20];
    if (v25 != (v26 & 8) >> 3) {
      a1[20] = v26 ^ 8;
    }
    if ((*(_DWORD *)(v27 + 8) - 64) <= 0xFFFFFF7F && v28) {
      MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
    }
    if (v32 >= 0x41 && v31) {
      MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    }
  }
  return v10;
}

uint64_t llvm::detail::IEEEFloat::compare(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  unsigned int v3 = *((unsigned __int8 *)this + 20);
  unsigned int v4 = *((unsigned __int8 *)a2 + 20);
  uint64_t result = 3;
  switch(4 * (v3 & 7) + (v4 & 7))
  {
    case 1u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 9u:
    case 0xDu:
      return result;
    case 2u:
    case 3u:
    case 0xBu:
      uint64_t result = ~(v3 >> 2) & 2;
      break;
    case 8u:
    case 0xCu:
    case 0xEu:
      uint64_t result = (v4 >> 2) & 2;
      break;
    case 0xAu:
      int v6 = (v3 >> 3) & 1;
      if (v6 == ((v4 >> 3) & 1))
      {
        LODWORD(result) = llvm::detail::IEEEFloat::compareAbsoluteValue(this, a2);
        if (result == 2) {
          unsigned int v7 = 0;
        }
        else {
          unsigned int v7 = result;
        }
        if (result) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = 2;
        }
        if ((v3 & 8) != 0) {
          uint64_t result = v8;
        }
        else {
          uint64_t result = result;
        }
      }
      else
      {
        uint64_t result = (2 * v6) ^ 2u;
      }
      break;
    case 0xFu:
      uint64_t result = 1;
      break;
    default:
      int v9 = (v3 >> 3) & 1;
      BOOL v10 = v9 == ((v4 >> 3) & 1);
      unsigned int v11 = (2 * v9) ^ 2;
      if (v10) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = v11;
      }
      break;
  }
  return result;
}

void llvm::detail::IEEEFloat::~IEEEFloat(llvm::detail::IEEEFloat *this)
{
  if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      MEMORY[0x1D25D9CB0](v1, 0x1000C8000313F17);
    }
  }
}

{
  uint64_t v1;

  if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      MEMORY[0x1D25D9CB0](v1, 0x1000C8000313F17);
    }
  }
}

BOOL llvm::detail::IEEEFloat::bitwiseIsEqual(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  if (this == a2) {
    return 1;
  }
  if (*(void *)this != *(void *)a2) {
    return 0;
  }
  int v2 = *((unsigned __int8 *)this + 20);
  int v3 = v2 & 7;
  int v4 = *((unsigned __int8 *)a2 + 20);
  if (v3 != (v4 & 7) || ((v4 ^ v2) & 8) != 0) {
    return 0;
  }
  if (v3 == 3 || v3 == 0) {
    return 1;
  }
  if ((v2 & 6) != 0 && v3 != 3 && *((_DWORD *)this + 4) != *((_DWORD *)a2 + 4)) {
    return 0;
  }
  int v6 = *(_DWORD *)(*(void *)this + 8);
  unsigned int v7 = v6 - 64;
  unsigned int v8 = (void *)((char *)this + 8);
  if ((v6 - 64) <= 0xFFFFFF7F) {
    unsigned int v8 = (void *)*v8;
  }
  unsigned int v9 = v6 + 64;
  unsigned int v12 = (char *)*((void *)a2 + 1);
  BOOL v10 = (char *)a2 + 8;
  unsigned int v11 = v12;
  if (v7 < 0xFFFFFF80) {
    BOOL v10 = v11;
  }
  return memcmp(v8, v10, (v9 >> 3) & 0x1FFFFFF8) == 0;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF0 | 2;
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 - 64) < 0xFFFFFF80)
  {
    unsigned int v7 = (void *)*((void *)this + 1);
    void *v7 = 0;
    uint64_t v9 = a3;
    bzero(v7 + 1, 8 * (((v4 + 64) >> 6) - 2) + 8);
    a3 = v9;
    *((_DWORD *)this + 4) = *(_DWORD *)(a2 + 8) - 1;
    unsigned int v5 = (void *)*((void *)this + 1);
  }
  else
  {
    unsigned int v5 = (void *)((char *)this + 8);
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = *(_DWORD *)(a2 + 8) - 1;
  }
  void *v5 = a3;
  llvm::detail::IEEEFloat::normalize(this, 1, 0);
  return this;
}

{
  int v4;
  void *v5;
  void *v7;
  uint64_t v9;

  *(void *)this = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF0 | 2;
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 - 64) < 0xFFFFFF80)
  {
    unsigned int v7 = (void *)*((void *)this + 1);
    void *v7 = 0;
    uint64_t v9 = a3;
    bzero(v7 + 1, 8 * (((v4 + 64) >> 6) - 2) + 8);
    a3 = v9;
    *((_DWORD *)this + 4) = *(_DWORD *)(a2 + 8) - 1;
    unsigned int v5 = (void *)*((void *)this + 1);
  }
  else
  {
    unsigned int v5 = (void *)((char *)this + 8);
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = *(_DWORD *)(a2 + 8) - 1;
  }
  void *v5 = a3;
  llvm::detail::IEEEFloat::normalize(this, 1, 0);
  return this;
}

void llvm::detail::IEEEFloat::zeroSignificand(llvm::detail::IEEEFloat *this)
{
  int v1 = *(_DWORD *)(*(void *)this + 8);
  if ((v1 - 64) >= 0xFFFFFF80)
  {
    *((void *)this + 1) = 0;
  }
  else
  {
    int v2 = (void *)*((void *)this + 1);
    void *v2 = 0;
    bzero(v2 + 1, 8 * (((v1 + 64) >> 6) - 2) + 8);
  }
}

uint64_t llvm::detail::IEEEFloat::normalize(llvm::detail::IEEEFloat *this, int a2, int a3)
{
  if ((*((unsigned char *)this + 20) & 6) == 0 || (*((unsigned char *)this + 20) & 7) == 3) {
    return 0;
  }
  unsigned int v8 = (char *)this + 8;
  uint64_t v9 = *(_DWORD **)this;
  int v10 = *(_DWORD *)(*(void *)this + 8);
  unsigned int v11 = v10 - 64;
  unsigned int v12 = (char *)this + 8;
  if ((v10 - 64) <= 0xFFFFFF7F) {
    unsigned int v12 = *(char **)v8;
  }
  uint64_t v13 = (v10 + 64) >> 6;
  int v14 = 64 - (v13 << 6);
  int v15 = v13 - 1;
  while (1)
  {
    unint64_t v16 = *(void *)&v12[8 * v15];
    if (v16) {
      break;
    }
    v14 += 64;
    if (--v15 == -1) {
      goto LABEL_15;
    }
  }
  int v17 = (__clz(v16) - v14) ^ 0x3F;
  unsigned int v18 = v17 + 1;
  if (v17 == -1)
  {
LABEL_15:
    unsigned int v18 = 0;
  }
  else
  {
    unsigned int v24 = v18 - v10;
    int v25 = *((_DWORD *)this + 4);
    if ((signed int)(v25 + v24) > *v9)
    {
LABEL_31:
      return llvm::detail::IEEEFloat::handleOverflow((_DWORD **)this, a2);
    }
    signed int v26 = v9[1];
    if ((int)(v25 + v24) >= v26) {
      unsigned int v27 = v24;
    }
    else {
      unsigned int v27 = v26 - v25;
    }
    if ((v27 & 0x80000000) != 0)
    {
      unsigned int v36 = -v27;
      if (v11 <= 0xFFFFFF7F) {
        unsigned int v8 = *(char **)v8;
      }
      if (v36 >> 6 >= v13) {
        unsigned int v37 = v13;
      }
      else {
        unsigned int v37 = v36 >> 6;
      }
      char v38 = v36 & 0x3F;
      if ((v36 & 0x3F) != 0)
      {
        if (v36 >> 6 < v13)
        {
          unint64_t v39 = *(void *)&v8[8 * (v13 - 1 - v37)] << v38;
          unint64_t v40 = (unint64_t *)&v8[8 * v13 - 8];
          *unint64_t v40 = v39;
          if ((int)v13 - 1 > v37)
          {
            BOOL v56 = (unint64_t *)&v8[8 * (v13 - 2)];
            BOOL v57 = (unint64_t *)&v8[8 * v13 - 16 + -8 * v37];
            do
            {
              unint64_t v58 = *v57--;
              *unint64_t v40 = (v58 >> (64 - v38)) | v39;
              unint64_t v40 = v56;
              unint64_t v39 = *(void *)&v8[8 * (-2 - v37) + 8 * v13] << v38;
              *v56-- = v39;
              unsigned int v59 = v13 - 2;
              LODWORD(v13) = v13 - 1;
            }
            while (v37 < v59);
          }
        }
      }
      else
      {
        memmove(&v8[8 * v37], v8, 8 * (v13 - v37));
      }
      bzero(v8, 8 * v37);
      uint64_t result = 0;
      *((_DWORD *)this + 4) += v27;
      return result;
    }
    if (v27)
    {
      *((_DWORD *)this + 4) = v27 + v25;
      uint64_t v28 = (unint64_t *)((char *)this + 8);
      if (v11 <= 0xFFFFFF7F) {
        uint64_t v28 = *(unint64_t **)v8;
      }
      int v29 = sub_1CD0331C0(v28, v13, v27);
      if (v27 >> 6 >= v13) {
        unsigned int v30 = v13;
      }
      else {
        unsigned int v30 = v27 >> 6;
      }
      uint64_t v31 = v13 - v30;
      char v32 = v27 & 0x3F;
      if ((v27 & 0x3F) != 0)
      {
        if (v27 >> 6 < v13)
        {
          unint64_t v33 = v28[v30] >> v32;
          *uint64_t v28 = v33;
          if (v31 != 1)
          {
            uint64_t v60 = 1 - v31;
            BOOL v61 = v28 + 1;
            unsigned int v62 = v30 + 1;
            do
            {
              *(v61 - 1) = (v28[v62] << (64 - v32)) | v33;
              unint64_t v33 = v28[v62] >> v32;
              *v61++ = v33;
              ++v62;
              BOOL v42 = __CFADD__(v60++, 1);
            }
            while (!v42);
          }
        }
      }
      else
      {
        memmove(v28, &v28[v30], (8 * v31));
        LODWORD(v31) = v13 - v30;
      }
      bzero(&v28[v31], 8 * v30);
      if (v29 == 2) {
        int v34 = 3;
      }
      else {
        int v34 = v29;
      }
      if (v29) {
        int v35 = v34;
      }
      else {
        int v35 = 1;
      }
      if (a3) {
        a3 = v35;
      }
      else {
        a3 = v29;
      }
      if (v18 >= v27) {
        v18 -= v27;
      }
      else {
        unsigned int v18 = 0;
      }
      uint64_t v9 = *(_DWORD **)this;
    }
  }
  int v19 = v9[4];
  if (v19 == 1 && *((_DWORD *)this + 4) == *v9 && llvm::detail::IEEEFloat::isSignificandAllOnes(this)) {
    goto LABEL_31;
  }
  if (!a3)
  {
    if (v18) {
      return 0;
    }
    uint64_t result = 0;
    *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF8 | 3;
    return result;
  }
  if (a2 == 1)
  {
    if (a3 == 2)
    {
      if ((*((unsigned char *)this + 20) & 7) != 3)
      {
        unint64_t v20 = v8;
        if ((v9[2] - 64) <= 0xFFFFFF7F) {
          unint64_t v20 = *(char **)v8;
        }
        if (*v20) {
          goto LABEL_26;
        }
      }
    }
    else if (a3 == 3)
    {
      goto LABEL_26;
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
        __break(1u);
        break;
      case 2:
        if ((*((unsigned char *)this + 20) & 8) != 0) {
          goto LABEL_101;
        }
        goto LABEL_26;
      case 3:
        if ((*((unsigned char *)this + 20) & 8) == 0) {
          goto LABEL_101;
        }
        goto LABEL_26;
      case 4:
        break;
      default:
        goto LABEL_101;
    }
    if ((a3 & 0xFFFFFFFE) == 2)
    {
LABEL_26:
      if (!v18) {
        *((_DWORD *)this + 4) = v9[1];
      }
      uint64_t v21 = v9[2];
      unsigned int v22 = v21 - 64;
      if ((v21 - 64) > 0xFFFFFF7F)
      {
        int v23 = v8;
        if (v21 > 0xFFFFFFBF)
        {
          char v41 = 1;
          goto LABEL_81;
        }
      }
      else
      {
        int v23 = *(char **)v8;
      }
      BOOL v42 = __CFADD__((*(void *)v23)++, 1);
      if (v42)
      {
        unint64_t v43 = v23 + 8;
        unint64_t v44 = ((unint64_t)(v21 + 64) >> 6) - 1;
        do
        {
          if (!v44) {
            break;
          }
          --v44;
          BOOL v42 = __CFADD__((*v43++)++, 1);
        }
        while (v42);
      }
      if (v22 <= 0xFFFFFF7F)
      {
        char v41 = 0;
        char v45 = *(char **)v8;
LABEL_82:
        uint64_t v46 = (v21 + 64) >> 6;
        int v47 = 64 - (v46 << 6);
        int v48 = v46 - 1;
        while (1)
        {
          unint64_t v49 = *(void *)&v45[8 * v48];
          if (v49) {
            break;
          }
          v47 += 64;
          if (--v48 == -1)
          {
            int v50 = -1;
            goto LABEL_87;
          }
        }
        int v50 = (__clz(v49) - v47) ^ 0x3F;
LABEL_87:
        if (v50 == v21)
        {
          int v51 = *((_DWORD *)this + 4);
          if (v51 == *v9)
          {
            *((unsigned char *)this + 20) &= 0xF8u;
            return 20;
          }
          *((_DWORD *)this + 4) = v51 + 1;
          if (v22 <= 0xFFFFFF7F)
          {
            unsigned int v8 = *(char **)v8;
            if (v41) {
              return 16;
            }
          }
          else if (v41)
          {
            return 16;
          }
          uint64_t v52 = *(void *)v8 >> 1;
          *(void *)unsigned int v8 = v52;
          if (v46 != 1)
          {
            uint64_t v53 = 0;
            uint64_t v54 = v46 - 1;
            uint64_t result = 16;
            do
            {
              int v55 = (uint64_t *)&v8[8 * v53];
              *int v55 = v52 | (*(void *)&v8[8 * (v53 + 1)] << 63);
              uint64_t v52 = *(void *)&v8[8 * (v53 + 1)] >> 1;
              v55[1] = v52;
              ++v53;
            }
            while (v54 != v53);
            return result;
          }
          return 16;
        }
        unsigned int v18 = v50 + 1;
        if (v19 == 1 && *((_DWORD *)this + 4) == *v9 && llvm::detail::IEEEFloat::isSignificandAllOnes(this)) {
          goto LABEL_31;
        }
        goto LABEL_101;
      }
      char v41 = 0;
LABEL_81:
      char v45 = v8;
      goto LABEL_82;
    }
  }
LABEL_101:
  if (v18 == v9[2]) {
    return 16;
  }
  if (!v18) {
    *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF8 | 3;
  }
  return 24;
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  *(unsigned char *)(result + 20) = *(unsigned char *)(result + 20) & 0xF0 | 3;
  int v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 4) - 1;
  if ((v2 - 64) < 0xFFFFFF80)
  {
    int v3 = *(void **)(result + 8);
    *int v3 = 0;
    uint64_t v4 = result;
    bzero(v3 + 1, 8 * (((v2 + 64) >> 6) - 2) + 8);
    return v4;
  }
  else
  {
    *(void *)(result + 8) = 0;
  }
  return result;
}

{
  int v2;
  void *v3;
  uint64_t v4;

  *(void *)uint64_t result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  *(unsigned char *)(result + 20) = *(unsigned char *)(result + 20) & 0xF0 | 3;
  int v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 4) - 1;
  if ((v2 - 64) < 0xFFFFFF80)
  {
    int v3 = *(void **)(result + 8);
    *int v3 = 0;
    uint64_t v4 = result;
    bzero(v3 + 1, 8 * (((v2 + 64) >> 6) - 2) + 8);
    return v4;
  }
  else
  {
    *(void *)(result + 8) = 0;
  }
  return result;
}

{
  int v2;
  void *v3;
  uint64_t v4;

  *(void *)uint64_t result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  *(unsigned char *)(result + 20) = *(unsigned char *)(result + 20) & 0xF0 | 3;
  int v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 4) - 1;
  if ((v2 - 64) < 0xFFFFFF80)
  {
    int v3 = *(void **)(result + 8);
    *int v3 = 0;
    uint64_t v4 = result;
    bzero(v3 + 1, 8 * (((v2 + 64) >> 6) - 2) + 8);
    return v4;
  }
  else
  {
    *(void *)(result + 8) = 0;
  }
  return result;
}

{
  int v2;
  void *v3;
  uint64_t v4;

  *(void *)uint64_t result = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  *(unsigned char *)(result + 20) = *(unsigned char *)(result + 20) & 0xF0 | 3;
  int v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 4) - 1;
  if ((v2 - 64) < 0xFFFFFF80)
  {
    int v3 = *(void **)(result + 8);
    *int v3 = 0;
    uint64_t v4 = result;
    bzero(v3 + 1, 8 * (((v2 + 64) >> 6) - 2) + 8);
    return v4;
  }
  else
  {
    *(void *)(result + 8) = 0;
  }
  return result;
}

{
  char v2;

  *(void *)uint64_t result = &unk_1CFB2E394;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  int v2 = *(unsigned char *)(result + 20) & 0xF8 | *(unsigned char *)(a2 + 20) & 7;
  *(unsigned char *)(result + 20) = v2;
  *(unsigned char *)(result + 20) = v2 & 0xF7 | *(unsigned char *)(a2 + 20) & 8;
  *(void *)a2 = &unk_1CFB2E394;
  return result;
}

{
  char v2;

  *(void *)uint64_t result = &unk_1CFB2E394;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  int v2 = *(unsigned char *)(result + 20) & 0xF8 | *(unsigned char *)(a2 + 20) & 7;
  *(unsigned char *)(result + 20) = v2;
  *(unsigned char *)(result + 20) = v2 & 0xF7 | *(unsigned char *)(a2 + 20) & 8;
  *(void *)a2 = &unk_1CFB2E394;
  return result;
}

void llvm::detail::IEEEFloat::makeZero(llvm::detail::IEEEFloat *this, int a2)
{
  if (a2) {
    char v2 = 11;
  }
  else {
    char v2 = 3;
  }
  *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF0 | v2;
  int v3 = *(_DWORD *)(*(void *)this + 8);
  *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)this + 4) - 1;
  if ((v3 - 64) < 0xFFFFFF80)
  {
    uint64_t v4 = (void *)*((void *)this + 1);
    void *v4 = 0;
    bzero(v4 + 1, 8 * (((v3 + 64) >> 6) - 2) + 8);
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

uint64_t *llvm::detail::IEEEFloat::incrementSignificand(llvm::detail::IEEEFloat *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t result = (uint64_t *)((char *)this + 8);
  uint64_t v3 = *(unsigned int *)(v2 + 8);
  if ((v3 - 64) > 0xFFFFFF7F)
  {
    if (v3 > 0xFFFFFFBF) {
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t *)*result;
  }
  BOOL v4 = __CFADD__((*result)++, 1);
  if (v4)
  {
    unint64_t v5 = (unint64_t)(v3 + 64) >> 6;
    int v6 = result + 1;
    unint64_t v7 = v5 - 1;
    do
    {
      if (!v7) {
        break;
      }
      --v7;
      BOOL v4 = __CFADD__((*v6++)++, 1);
    }
    while (v4);
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::addSignificand(llvm::detail::IEEEFloat *this, uint64_t **a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = (unint64_t *)((char *)this + 8);
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if ((v4 - 64) <= 0xFFFFFF7F) {
    uint64_t v2 = (unint64_t *)*v2;
  }
  unsigned int v5 = *((_DWORD *)*a2 + 2) - 64;
  unsigned int v8 = a2[1];
  int v6 = (char *)(a2 + 1);
  unint64_t v7 = v8;
  if (v5 >= 0xFFFFFF80) {
    unint64_t v7 = (uint64_t *)v6;
  }
  if (v4 > 0xFFFFFFBF) {
    return 0;
  }
  uint64_t v9 = 0;
  unint64_t v10 = (unint64_t)(v4 + 64) >> 6;
  do
  {
    uint64_t v11 = *v7++;
    unint64_t v12 = v11 + *v2;
    BOOL v13 = v12 + 1 <= *v2;
    if (v9)
    {
      ++v12;
      uint64_t v9 = v13;
    }
    else
    {
      uint64_t v9 = v12 < *v2;
    }
    *v2++ = v12;
    --v10;
  }
  while (v10);
  return v9;
}

uint64_t llvm::detail::IEEEFloat::subtractSignificand(llvm::detail::IEEEFloat *this, unint64_t **a2, uint64_t a3)
{
  uint64_t v4 = *(void *)this;
  uint64_t v3 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = *(unsigned int *)(v4 + 8);
  if ((v5 - 64) <= 0xFFFFFF7F) {
    uint64_t v3 = (unint64_t *)*v3;
  }
  unsigned int v6 = *((_DWORD *)*a2 + 2) - 64;
  uint64_t v9 = a2[1];
  unint64_t v7 = (char *)(a2 + 1);
  unsigned int v8 = v9;
  if (v6 >= 0xFFFFFF80) {
    unint64_t v10 = (unint64_t *)v7;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v5 <= 0xFFFFFFBF)
  {
    unint64_t v11 = (unint64_t)(v5 + 64) >> 6;
    do
    {
      unint64_t v12 = *v10++;
      unint64_t v13 = *v3 - v12;
      BOOL v14 = *v3 < v12;
      unint64_t v15 = *v3 + ~v12;
      if (a3)
      {
        a3 = v15 >= *v3;
      }
      else
      {
        unint64_t v15 = v13;
        a3 = v14;
      }
      *v3++ = v15;
      --v11;
    }
    while (v11);
  }
  return a3;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  v91[3] = *MEMORY[0x1E4F143B8];
  unsigned int v6 = (long long *)*a1;
  int v7 = *(_DWORD *)(*a1 + 8);
  int v8 = 2 * v7;
  uint64_t v9 = (2 * v7 + 64) >> 6;
  unsigned int v80 = 2 * v7 + 64;
  if (v80 >= 0x140) {
    operator new[]();
  }
  unint64_t v10 = a1 + 1;
  unint64_t v81 = (unint64_t **)(a1 + 1);
  if ((v7 - 64) <= 0xFFFFFF7F) {
    unint64_t v10 = *v81;
  }
  unsigned int v79 = *(_DWORD *)(*a1 + 8);
  int v11 = (2 * v7) | 1;
  uint64_t v12 = (v7 + 64) >> 6;
  if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
    unint64_t v13 = (unint64_t *)(a2 + 8);
  }
  else {
    unint64_t v13 = *(unint64_t **)(a2 + 8);
  }
  llvm::APInt::tcFullMultiply((llvm::APInt *)v90, v10, v13, (const unint64_t *)((*(_DWORD *)(*a1 + 8) + 64) >> 6), (const unint64_t *)((*(_DWORD *)(*a1 + 8) + 64) >> 6));
  int v15 = 64 - (v9 << 6);
  int v16 = v9 - 1;
  while (1)
  {
    unint64_t v17 = v90[v16];
    if (v17) {
      break;
    }
    v15 += 64;
    if (--v16 == -1)
    {
      unsigned int v18 = v6;
      int v19 = -1;
      goto LABEL_13;
    }
  }
  unsigned int v18 = v6;
  int v19 = (__clz(v17) - v15) ^ 0x3F;
LABEL_13:
  unsigned int v20 = v19 + 1;
  int v21 = *(_DWORD *)(a2 + 16) + *((_DWORD *)a1 + 4) + 2;
  *((_DWORD *)a1 + 4) = v21;
  if ((*(unsigned char *)(a3 + 20) & 7) == 3)
  {
    uint64_t v22 = 0;
    goto LABEL_58;
  }
  uint64_t v78 = *v81;
  unsigned int v23 = v8 - v20;
  unsigned int v24 = v18;
  if (v23)
  {
    if (v23 >> 6 >= v9) {
      unsigned int v25 = v9;
    }
    else {
      unsigned int v25 = v23 >> 6;
    }
    char v26 = v23 & 0x3F;
    if ((v23 & 0x3F) != 0)
    {
      if (v23 >> 6 < v9)
      {
        unsigned int v27 = v9 - 1;
        unint64_t v28 = v90[v9 - 1 - v25] << v26;
        int v29 = &v90[v9 - 1];
        *int v29 = v28;
        if ((int)v9 - 1 > v25)
        {
          uint64_t v67 = &v90[(v9 - 2)];
          char v68 = (unint64_t *)&v87 + v9 - v25 + 1;
          do
          {
            unint64_t v69 = *v68--;
            *int v29 = (v69 >> (64 - v26)) | v28;
            --v27;
            int v29 = v67;
            unint64_t v28 = v90[v27 - v25] << v26;
            *v67-- = v28;
          }
          while (v25 < v27);
        }
      }
    }
    else
    {
      unsigned int v77 = v25;
      memmove(&v90[v25], v90, 8 * (v9 - v25));
      unsigned int v25 = v77;
    }
    bzero(v90, 8 * v25);
    *((_DWORD *)a1 + 4) = v21 - v23;
  }
  int v30 = *((_DWORD *)v24 + 4);
  long long v87 = *v24;
  int v88 = v30;
  DWORD2(v87) = v11;
  uint64_t v31 = v90;
  if (v9 == 1) {
    uint64_t v31 = (unint64_t *)v90[0];
  }
  *a1 = (unint64_t)&v87;
  a1[1] = (unint64_t)v31;
  uint64_t v32 = *(void *)a3;
  uint64_t v83 = v32;
  if ((*(_DWORD *)(v32 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  char v33 = *(unsigned char *)(a3 + 20);
  int v34 = v33 & 7;
  char v86 = v33 & 0xF;
  int v85 = *(_DWORD *)(a3 + 16);
  BOOL v36 = (v33 & 6) != 0 && v34 != 3;
  if (v34 == 1 || v36)
  {
    uint64_t v37 = *(unsigned int *)(v32 + 8);
    char v38 = (v37 - 64) <= 0xFFFFFF7F ? v14 : &v84;
    unsigned int v39 = *(_DWORD *)(*(void *)a3 + 8) - 64;
    uint64_t v42 = *(void *)(a3 + 8);
    uint64_t v41 = a3 + 8;
    uint64_t v40 = v42;
    unint64_t v43 = (uint64_t *)(v39 >= 0xFFFFFF80 ? v41 : v40);
    if (v37 <= 0xFFFFFFBF)
    {
      unint64_t v44 = (unint64_t)(v37 + 64) >> 6;
      do
      {
        uint64_t v45 = *v43++;
        *v38++ = v45;
        --v44;
      }
      while (v44);
    }
  }
  llvm::detail::IEEEFloat::convert(&v83, (uint64_t)&v87, 0, &v89);
  ++v85;
  uint64_t v46 = *(unsigned int *)(v83 + 8);
  if ((v46 - 64) <= 0xFFFFFF7F)
  {
    int v47 = v84;
  }
  else
  {
    if (v46 > 0xFFFFFFBF) {
      goto LABEL_47;
    }
    int v47 = &v84;
  }
  unint64_t v48 = (unint64_t)(v46 + 64) >> 6;
  uint64_t v49 = *v47 >> 1;
  *int v47 = v49;
  if (v48 != 1)
  {
    uint64_t v70 = 0;
    unint64_t v71 = v48 - 1;
    do
    {
      int v72 = &v47[v70];
      *int v72 = v49 | (v47[(v70 + 1)] << 63);
      uint64_t v49 = v47[(v70 + 1)] >> 1;
      v72[1] = v49;
      ++v70;
    }
    while (v71 != v70);
  }
LABEL_47:
  uint64_t v22 = llvm::detail::IEEEFloat::addOrSubtractSignificand((unint64_t **)a1, (const llvm::detail::IEEEFloat *)&v83, 0);
  int v50 = v9 - 1;
  if (v9 == 1) {
    v90[0] = (unint64_t)*v81;
  }
  *a1 = (unint64_t)v24;
  a1[1] = (unint64_t)v78;
  int v51 = 64 - (v9 << 6);
  while (1)
  {
    unint64_t v52 = v90[v50];
    if (v52) {
      break;
    }
    v51 += 64;
    if (--v50 == -1)
    {
      unsigned int v20 = 0;
      goto LABEL_54;
    }
  }
  unsigned int v20 = ((__clz(v52) - v51) ^ 0x3F) + 1;
LABEL_54:
  if ((*(_DWORD *)(v83 + 8) - 64) <= 0xFFFFFF7F && v84) {
    MEMORY[0x1D25D9CB0](v84, 0x1000C8000313F17);
  }
  int v21 = *((_DWORD *)a1 + 4);
LABEL_58:
  unsigned int v53 = v21 + ~v79;
  *((_DWORD *)a1 + 4) = v53;
  unsigned int v54 = v20 - v79;
  if (v20 > v79)
  {
    int v82 = v22;
    unsigned int v55 = v20 + 63;
    unsigned int v56 = (v20 + 63) >> 6;
    unsigned int v57 = sub_1CD0331C0(v90, v56, v20 - v79);
    if (v54 >> 6 >= v55 >> 6) {
      unsigned int v58 = v56;
    }
    else {
      unsigned int v58 = v54 >> 6;
    }
    uint64_t v59 = v56 - v58;
    char v60 = v54 & 0x3F;
    if ((v54 & 0x3F) != 0)
    {
      if (v54 >> 6 < v56)
      {
        unint64_t v61 = v90[v58] >> v60;
        v90[0] = v61;
        if (v59 != 1)
        {
          uint64_t v73 = 1 - v59;
          unint64_t v74 = v91;
          unsigned int v75 = v58 + 1;
          do
          {
            *(v74 - 1) = (v90[v75] << (64 - v60)) | v61;
            unint64_t v61 = v90[v75] >> v60;
            *v74++ = v61;
            ++v75;
          }
          while (!__CFADD__(v73++, 1));
        }
      }
    }
    else
    {
      memmove(v90, &v90[v58], (8 * v59));
    }
    bzero(&v90[v59], 8 * v58);
    if (v57 == 2) {
      int v62 = 3;
    }
    else {
      int v62 = v57;
    }
    if (v57) {
      unsigned int v63 = v62;
    }
    else {
      unsigned int v63 = 1;
    }
    if (v82) {
      uint64_t v22 = v63;
    }
    else {
      uint64_t v22 = v57;
    }
    *((_DWORD *)a1 + 4) = v54 + v53;
  }
  if (v79 <= 0xFFFFFFBF)
  {
    unint64_t v64 = v90;
    do
    {
      unint64_t v65 = *v64++;
      *v10++ = v65;
      --v12;
    }
    while (v12);
  }
  return v22;
}

uint64_t llvm::detail::IEEEFloat::convert(uint64_t *a1, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = *a1;
  int v7 = *((unsigned char *)a1 + 20) & 7;
  uint64_t v95 = *a1;
  if (v7 == 1)
  {
    if (*(_DWORD *)(v6 + 16) == 1)
    {
      uint64_t v32 = 0;
    }
    else
    {
      int v55 = *(_DWORD *)(v6 + 8);
      unsigned int v56 = a1 + 1;
      if ((v55 - 64) <= 0xFFFFFF7F) {
        unsigned int v56 = (void *)*v56;
      }
      uint64_t v32 = ((v56[(v55 - 2) >> 6] >> (v55 - 2)) & 1) == 0;
    }
    char v31 = 0;
    int v8 = *(_DWORD *)(a2 + 8);
    unsigned int v96 = (_DWORD *)(a2 + 8);
    int v57 = *(_DWORD *)(v6 + 8);
    unsigned int v11 = (v57 + 64) >> 6;
    int v12 = v8 - v57;
    if ((_UNKNOWN *)a2 == &unk_1CFB2E380 || (_UNKNOWN *)v6 != &unk_1CFB2E380)
    {
LABEL_83:
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_45;
      }
      if ((*((unsigned char *)a1 + 20) & 6) != 0)
      {
        unsigned int v58 = v57 - 64;
        uint64_t v59 = a1 + 1;
        if ((v57 - 64) <= 0xFFFFFF7F) {
          uint64_t v59 = (void *)*v59;
        }
        int v60 = 64 - (v11 << 6);
        unsigned int v61 = v11 - 1;
        int v99 = a3;
        do
        {
          unint64_t v62 = v59[v61];
          if (v62)
          {
            int v63 = (__clz(v62) - v60) ^ 0x3F;
            goto LABEL_90;
          }
          v60 += 64;
          --v61;
        }
        while (v61 != -1);
        int v63 = -1;
LABEL_90:
        int v64 = v63 + 1 - v57;
        int v65 = *((_DWORD *)a1 + 4);
        uint64_t v98 = a2;
        int v66 = *(_DWORD *)(a2 + 4);
        if (v64 + v65 < v66) {
          int v64 = v66 - v65;
        }
        if (v64 <= v12) {
          int v64 = v8 - v57;
        }
        uint64_t v100 = a4;
        if (v64 < 0)
        {
          v12 -= v64;
        }
        else
        {
          if (v63 + 1 > v57 - v8) {
            goto LABEL_96;
          }
          int v64 = v63 + v12;
          int v12 = -v63;
        }
        *((_DWORD *)a1 + 4) = v64 + v65;
        if ((v12 & 0x80000000) == 0) {
          goto LABEL_139;
        }
      }
      else
      {
        uint64_t v98 = a2;
        int v99 = a3;
        uint64_t v100 = a4;
        if (*(_DWORD *)(v95 + 16) == 1) {
          goto LABEL_139;
        }
        unsigned int v58 = v57 - 64;
      }
LABEL_96:
      uint64_t v22 = (unint64_t *)(a1 + 1);
      if (v58 <= 0xFFFFFF7F) {
        uint64_t v22 = (unint64_t *)*v22;
      }
      int v97 = v8;
      unsigned int v67 = -v12;
      int v68 = sub_1CD0331C0(v22, (v57 + 64) >> 6, -v12);
      int v25 = v68;
      if (v12)
      {
        unsigned int v69 = v67 >> 6;
        if (v67 >> 6 >= v11) {
          unsigned int v26 = (v57 + 64) >> 6;
        }
        else {
          unsigned int v26 = v67 >> 6;
        }
        uint64_t v27 = v11 - v26;
        int v70 = -v12 & 0x3F;
        if (v70)
        {
          if (v69 >= v11)
          {
            int v30 = v68;
          }
          else
          {
            int v30 = v68;
            unint64_t v71 = v22[v26] >> v70;
            *uint64_t v22 = v71;
            if (v27 != 1)
            {
              uint64_t v72 = 0;
              unint64_t v73 = (unint64_t)-v12 >> 6;
              if (v73 >= (unint64_t)(v57 + 64) >> 6) {
                unint64_t v73 = (unint64_t)(v57 + 64) >> 6;
              }
              int v74 = v73 + 1;
              do
              {
                unsigned int v75 = &v22[v72];
                *unsigned int v75 = (v22[(v74 + v72)] << (64 - v70)) | v71;
                unint64_t v71 = v22[(v74 + v72)] >> v70;
                v75[1] = v71;
                ++v72;
              }
              while (v27 - 1 != v72);
            }
          }
          goto LABEL_29;
        }
        int v30 = v68;
        goto LABEL_74;
      }
      uint64_t v4 = v100;
      a3 = v99;
      int v8 = v97;
      goto LABEL_67;
    }
    if ((v57 - 64) > 0xFFFFFF7F)
    {
      uint64_t v94 = a1[1];
      if ((v94 & 0x8000000000000000) == 0) {
        goto LABEL_169;
      }
    }
    else
    {
      uint64_t v94 = *(void *)a1[1];
      if ((v94 & 0x8000000000000000) == 0) {
        goto LABEL_169;
      }
    }
    if ((v94 & 0x4000000000000000) != 0)
    {
      char v31 = 0;
      goto LABEL_83;
    }
LABEL_169:
    char v31 = 1;
    goto LABEL_83;
  }
  int v8 = *(_DWORD *)(a2 + 8);
  unsigned int v96 = (_DWORD *)(a2 + 8);
  int v9 = *(_DWORD *)(v6 + 8);
  unint64_t v10 = (v9 + 64);
  unsigned int v11 = v10 >> 6;
  int v12 = v8 - v9;
  if (v8 - v9 >= 0 || ((*((unsigned char *)a1 + 20) & 6) != 0 ? (BOOL v13 = v7 == 3) : (BOOL v13 = 1), v13))
  {
    char v31 = 0;
    uint64_t v32 = 0;
LABEL_45:
    int v25 = 0;
    goto LABEL_30;
  }
  BOOL v14 = a1 + 1;
  if ((v9 - 64) <= 0xFFFFFF7F) {
    BOOL v14 = (void *)*v14;
  }
  int v15 = 64 - (v11 << 6);
  unsigned int v16 = v11 - 1;
  int v99 = a3;
  do
  {
    unint64_t v17 = v14[v16];
    if (v17)
    {
      int v18 = (__clz(v17) - v15) ^ 0x3F;
      goto LABEL_12;
    }
    v15 += 64;
    --v16;
  }
  while (v16 != -1);
  int v18 = -1;
LABEL_12:
  int v19 = v18 + 1 - v9;
  int v20 = *((_DWORD *)a1 + 4);
  uint64_t v98 = a2;
  int v21 = *(_DWORD *)(a2 + 4);
  if (v19 + v20 < v21) {
    int v19 = v21 - v20;
  }
  if (v19 <= v12) {
    int v19 = v8 - v9;
  }
  uint64_t v100 = a4;
  if (v19 < 0)
  {
    v12 -= v19;
  }
  else
  {
    if (v18 + 1 > v9 - v8)
    {
LABEL_18:
      uint64_t v22 = (unint64_t *)(a1 + 1);
      if ((v9 - 64) <= 0xFFFFFF7F) {
        uint64_t v22 = (unint64_t *)*v22;
      }
      unint64_t v23 = -v12;
      int v24 = sub_1CD0331C0(v22, v10 >> 6, -v12);
      int v25 = v24;
      if (v12)
      {
        int v97 = v8;
        if (v23 >> 6 >= v11) {
          unsigned int v26 = v10 >> 6;
        }
        else {
          unsigned int v26 = v23 >> 6;
        }
        uint64_t v27 = v11 - v26;
        char v28 = -(char)v12 & 0x3F;
        if (v28)
        {
          if (v23 >> 6 >= v11 || (v29 = v22[v26] >> v28, *uint64_t v22 = v29, v27 == 1))
          {
            int v30 = v24;
          }
          else
          {
            int v30 = v24;
            uint64_t v51 = 0;
            unint64_t v52 = v23 >> 6;
            if (v23 >> 6 >= v10 >> 6) {
              unint64_t v52 = v10 >> 6;
            }
            int v53 = v52 + 1;
            do
            {
              unsigned int v54 = &v22[v51];
              unint64_t *v54 = (v22[(v53 + v51)] << (64 - v28)) | v29;
              unint64_t v29 = v22[(v53 + v51)] >> v28;
              v54[1] = v29;
              ++v51;
            }
            while (v27 - 1 != v51);
          }
          char v31 = 0;
          uint64_t v32 = 0;
          goto LABEL_29;
        }
        int v30 = v24;
        char v31 = 0;
        uint64_t v32 = 0;
LABEL_74:
        memmove(v22, &v22[v26], (8 * v27));
LABEL_29:
        bzero(&v22[v27], 8 * v26);
        uint64_t v4 = v100;
        a3 = v99;
        int v8 = v97;
        a2 = v98;
        int v25 = v30;
        goto LABEL_30;
      }
      char v31 = 0;
      uint64_t v32 = 0;
      goto LABEL_66;
    }
    int v19 = v18 + v12;
    int v12 = -v18;
  }
  *((_DWORD *)a1 + 4) = v19 + v20;
  if (v12 < 0) {
    goto LABEL_18;
  }
  char v31 = 0;
  uint64_t v32 = 0;
LABEL_139:
  int v25 = 0;
LABEL_66:
  uint64_t v4 = v100;
  a3 = v99;
LABEL_67:
  a2 = v98;
LABEL_30:
  uint64_t v33 = (v8 + 64) >> 6;
  if (v33 > v11) {
    operator new[]();
  }
  if (v33 == 1 && v11 != 1)
  {
    int v84 = v25;
    uint64_t v85 = a2;
    int v86 = a3;
    int v87 = *((unsigned char *)a1 + 20) & 7;
    BOOL v89 = (*((unsigned char *)a1 + 20) & 6) != 0 && v87 != 3;
    unsigned int v90 = *(_DWORD *)(*a1 + 8) - 64;
    if (v87 == 1 || v89)
    {
      long long v92 = a1 + 1;
      if (v90 <= 0xFFFFFF7F) {
        long long v92 = (void *)*v92;
      }
      long long v91 = (void *)*v92;
    }
    else
    {
      long long v91 = 0;
    }
    if (v90 <= 0xFFFFFF7F)
    {
      uint64_t v93 = a1[1];
      if (v93) {
        MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
      }
    }
    a1[1] = (uint64_t)v91;
    a3 = v86;
    a2 = v85;
    int v25 = v84;
  }
  *a1 = a2;
  unsigned int v35 = *((unsigned __int8 *)a1 + 20);
  if (v12 >= 1)
  {
    int v38 = v35 & 7;
    BOOL v39 = (v35 & 6) == 0 || v38 == 3;
    BOOL v40 = !v39;
    if (v38 == 1 || v40)
    {
      uint64_t v42 = a1 + 1;
      if ((*v96 - 64) <= 0xFFFFFF7F) {
        uint64_t v42 = (void *)*v42;
      }
      unsigned int v43 = v12 >> 6;
      if (v12 >> 6 >= v33) {
        unsigned int v44 = v33;
      }
      else {
        unsigned int v44 = v12 >> 6;
      }
      int v45 = v25;
      char v46 = v12 & 0x3F;
      if ((v12 & 0x3F) != 0)
      {
        int v47 = a3;
        if (v43 < v33)
        {
          unsigned int v48 = v33 - 1;
          unint64_t v49 = v42[v33 - 1 - v44] << v46;
          int v50 = &v42[v33 - 1];
          *int v50 = v49;
          if ((int)v33 - 1 > v44)
          {
            int64_t v76 = &v42[(v33 - 2)];
            unsigned int v77 = &v42[v33 - v44 - 2];
            do
            {
              unint64_t v78 = *v77--;
              *int v50 = (v78 >> (64 - v46)) | v49;
              --v48;
              int v50 = v76;
              unint64_t v49 = v42[v48 - v44] << v46;
              *v76-- = v49;
            }
            while (v44 < v48);
          }
        }
      }
      else
      {
        int v47 = a3;
        memmove(&v42[v44], v42, 8 * (v33 - v44));
      }
      bzero(v42, 8 * v44);
      unsigned int v35 = *((unsigned __int8 *)a1 + 20);
      a3 = v47;
      int v25 = v45;
    }
  }
  int v36 = v35 & 7;
  if ((v35 & 6) != 0 && v36 != 3)
  {
    uint64_t v32 = llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)a1, a3, v25);
    unsigned char *v4 = v32 != 0;
    return v32;
  }
  if ((v35 & 7) == 0)
  {
    if (*(_DWORD *)(*a1 + 16) == 1)
    {
      llvm::detail::IEEEFloat::makeNaN(a1, 0, (v35 >> 3) & 1, 0);
      unsigned char *v4 = 1;
      return 16;
    }
    goto LABEL_43;
  }
  if (v36 != 1)
  {
LABEL_43:
    uint64_t v32 = 0;
    unsigned char *v4 = 0;
    return v32;
  }
  uint64_t v79 = *a1;
  if (*(_DWORD *)(*a1 + 16) == 1)
  {
    unsigned char *v4 = *(_DWORD *)(v95 + 16) != 1;
    llvm::detail::IEEEFloat::makeNaN(a1, 0, (*((unsigned __int8 *)a1 + 20) >> 3) & 1, 0);
  }
  else
  {
    if (v25) {
      char v80 = 1;
    }
    else {
      char v80 = v31;
    }
    unsigned char *v4 = v80;
    if ((_UNKNOWN *)v79 == &unk_1CFB2E380) {
      char v81 = v31;
    }
    else {
      char v81 = 1;
    }
    if ((v81 & 1) == 0) {
      *(void *)a1[1] |= 0x8000000000000000;
    }
    if (v32)
    {
      int v82 = *(_DWORD *)(v79 + 8);
      uint64_t v83 = a1 + 1;
      if ((v82 - 64) <= 0xFFFFFF7F) {
        uint64_t v83 = (void *)*v83;
      }
      uint64_t v32 = 1;
      v83[(v82 - 2) >> 6] |= 1 << (v82 - 2);
    }
  }
  return v32;
}

uint64_t llvm::detail::IEEEFloat::shiftSignificandRight(llvm::detail::IEEEFloat *this, unsigned int a2)
{
  *((_DWORD *)this + 4) += a2;
  int v3 = *(_DWORD *)(*(void *)this + 8);
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  if ((v3 - 64) <= 0xFFFFFF7F) {
    uint64_t v4 = (unint64_t *)*v4;
  }
  unsigned int v5 = (v3 + 64) >> 6;
  uint64_t v6 = sub_1CD0331C0(v4, v5, a2);
  if (a2)
  {
    if (a2 >> 6 >= v5) {
      unsigned int v7 = v5;
    }
    else {
      unsigned int v7 = a2 >> 6;
    }
    uint64_t v8 = v5 - v7;
    char v9 = a2 & 0x3F;
    if ((a2 & 0x3F) != 0)
    {
      if (a2 >> 6 < v5)
      {
        unint64_t v10 = v4[v7] >> v9;
        unint64_t *v4 = v10;
        if (v8 != 1)
        {
          uint64_t v12 = 1 - v8;
          BOOL v13 = v4 + 1;
          unsigned int v14 = v7 + 1;
          do
          {
            *(v13 - 1) = (v4[v14] << (64 - v9)) | v10;
            unint64_t v10 = v4[v14] >> v9;
            *v13++ = v10;
            ++v14;
          }
          while (!__CFADD__(v12++, 1));
        }
      }
    }
    else
    {
      memmove(v4, &v4[v7], (8 * v8));
    }
    bzero(&v4[v8], 8 * v7);
  }
  return v6;
}

uint64_t llvm::detail::IEEEFloat::addOrSubtractSignificand(unint64_t **this, const llvm::detail::IEEEFloat *a2, unsigned __int8 a3)
{
  unsigned int v5 = (int *)(this + 2);
  int v6 = *((_DWORD *)this + 4);
  unsigned __int8 v7 = *((unsigned char *)a2 + 20);
  int v8 = *((_DWORD *)a2 + 4);
  int v9 = v6 - v8;
  if ((((((v7 ^ *((unsigned char *)this + 20)) & 8) == 0) ^ a3) & 1) == 0)
  {
    uint64_t v10 = *(void *)a2;
    unsigned int v109 = (uint64_t *)v10;
    if ((*(_DWORD *)(v10 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    int v11 = v7 & 7;
    char v112 = v7 & 0xF;
    int v111 = v8;
    BOOL v13 = (v7 & 6) != 0 && v11 != 3;
    if (v11 == 1 || v13)
    {
      uint64_t v15 = *(unsigned int *)(v10 + 8);
      unsigned int v16 = (llvm::detail::IEEEFloat *)((v15 - 64) <= 0xFFFFFF7F ? this : &v110);
      unint64_t v17 = (*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80
          ? (const llvm::detail::IEEEFloat *)((char *)a2 + 8)
          : (const llvm::detail::IEEEFloat *)*((void *)a2 + 1);
      if (v15 <= 0xFFFFFFBF)
      {
        unint64_t v18 = (unint64_t)(v15 + 64) >> 6;
        do
        {
          uint64_t v19 = *(void *)v17;
          unint64_t v17 = (const llvm::detail::IEEEFloat *)((char *)v17 + 8);
          *(void *)unsigned int v16 = v19;
          unsigned int v16 = (llvm::detail::IEEEFloat *)((char *)v16 + 8);
          --v18;
        }
        while (v18);
      }
    }
    if (v6 == v8)
    {
      unsigned int v20 = 0;
LABEL_53:
      int v44 = llvm::detail::IEEEFloat::compareAbsoluteValue((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v109);
      uint64_t v45 = v20 != 0;
      if (v44)
      {
        llvm::detail::IEEEFloat::subtractSignificand((llvm::detail::IEEEFloat *)this, (unint64_t **)&v109, v45);
        char v46 = v109;
      }
      else
      {
        int v50 = v110;
        uint64_t v51 = *((unsigned int *)v109 + 2);
        unint64_t v52 = (uint64_t *)&v110;
        if ((v51 - 64) >= 0xFFFFFF80) {
          int v50 = (unint64_t *)&v110;
        }
        unsigned int v53 = *((_DWORD *)*this + 2);
        unsigned int v54 = v53 - 64;
        int v55 = this + 1;
        unsigned int v56 = this[1];
        if (v53 - 64 >= 0xFFFFFF80) {
          unsigned int v56 = (unint64_t *)(this + 1);
        }
        if (v51 <= 0xFFFFFFBF)
        {
          unint64_t v57 = (unint64_t)(v51 + 64) >> 6;
          do
          {
            unint64_t v58 = *v56++;
            unint64_t v59 = *v50 - v58;
            BOOL v60 = *v50 < v58;
            unint64_t v61 = *v50 + ~v58;
            if (v45)
            {
              uint64_t v45 = v61 >= *v50;
            }
            else
            {
              unint64_t v61 = v59;
              uint64_t v45 = v60;
            }
            *v50++ = v61;
            --v57;
          }
          while (v57);
          unsigned int v53 = *((_DWORD *)*this + 2);
          unsigned int v54 = v53 - 64;
        }
        if (v54 <= 0xFFFFFF7F) {
          int v55 = (void *)*v55;
        }
        char v46 = v109;
        if ((*((_DWORD *)v109 + 2) - 64) < 0xFFFFFF80) {
          unint64_t v52 = (uint64_t *)v110;
        }
        if (v53 <= 0xFFFFFFBF)
        {
          uint64_t v62 = (v53 + 64) >> 6;
          do
          {
            uint64_t v63 = *v52++;
            *v55++ = v63;
            --v62;
          }
          while (v62);
        }
        *((unsigned char *)this + 20) ^= 8u;
      }
      if (v20 == 3) {
        unsigned int v47 = 1;
      }
      else {
        unsigned int v47 = v20;
      }
      if (v20 == 1) {
        uint64_t v25 = 3;
      }
      else {
        uint64_t v25 = v47;
      }
      int v48 = *((_DWORD *)v46 + 2);
LABEL_62:
      if ((v48 - 64) <= 0xFFFFFF7F && v110) {
        MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
      }
      return v25;
    }
    unsigned int v30 = v9 - 1;
    if (v9 < 1)
    {
      unsigned int v31 = ~v9;
      *((_DWORD *)this + 4) += ~v9;
      int v32 = *((_DWORD *)*this + 2);
      uint64_t v33 = (unint64_t *)(this + 1);
      if ((v32 - 64) <= 0xFFFFFF7F) {
        uint64_t v33 = (unint64_t *)*v33;
      }
      unsigned int v5 = &v111;
      unsigned int v34 = (v32 + 64) >> 6;
      unsigned int v20 = sub_1CD0331C0(v33, v34, ~v9);
      if (v9 != -1)
      {
        if (v31 >> 6 >= v34) {
          unsigned int v35 = v34;
        }
        else {
          unsigned int v35 = v31 >> 6;
        }
        uint64_t v36 = v34 - v35;
        char v37 = v31 & 0x3F;
        if ((v31 & 0x3F) != 0)
        {
          if (v31 >> 6 < v34)
          {
            unint64_t v38 = v33[v35] >> v37;
            unint64_t *v33 = v38;
            if (v36 != 1)
            {
              uint64_t v100 = 1 - v36;
              unsigned int v101 = v33 + 1;
              unsigned int v102 = v35 + 1;
              do
              {
                *(v101 - 1) = (v33[v102] << (64 - v37)) | v38;
                unint64_t v38 = v33[v102] >> v37;
                *v101++ = v38;
                ++v102;
                BOOL v99 = __CFADD__(v100++, 1);
              }
              while (!v99);
            }
          }
        }
        else
        {
          memmove(v33, &v33[v35], (8 * v36));
        }
        bzero(&v33[v36], 8 * v35);
      }
      uint64_t v39 = *(unsigned int *)(v10 + 8);
      if ((v39 - 64) >= 0xFFFFFF80) {
        BOOL v40 = &v110;
      }
      else {
        BOOL v40 = v110;
      }
      if (v39 <= 0xFFFFFFBF)
      {
        unint64_t v41 = (unint64_t)(v39 + 64) >> 6;
        uint64_t v42 = &v40[v41 - 1];
        uint64_t v43 = 2 * *v42;
        *uint64_t v42 = v43;
        if (v41 != 1)
        {
          unint64_t v94 = v41 - 2;
          do
          {
            *uint64_t v42 = v43 | (v40[v94] >> 63);
            uint64_t v42 = &v40[v94];
            uint64_t v43 = 2 * *v42;
            *uint64_t v42 = v43;
          }
          while ((unint64_t)v94--);
        }
      }
      goto LABEL_52;
    }
    int v111 = v8 + v30;
    int v80 = *(_DWORD *)(v10 + 8);
    if ((v80 - 64) <= 0xFFFFFF7F) {
      char v81 = v110;
    }
    else {
      char v81 = (unint64_t *)&v110;
    }
    unsigned int v82 = (v80 + 64) >> 6;
    unsigned int v20 = sub_1CD0331C0(v81, v82, v30);
    if (v30)
    {
      if (v30 >> 6 >= v82) {
        unsigned int v83 = v82;
      }
      else {
        unsigned int v83 = v30 >> 6;
      }
      uint64_t v84 = v82 - v83;
      char v85 = v30 & 0x3F;
      if ((v30 & 0x3F) != 0)
      {
        if (v30 >> 6 < v82)
        {
          unint64_t v86 = v81[v83] >> v85;
          *char v81 = v86;
          if (v84 != 1)
          {
            uint64_t v106 = 1 - v84;
            unsigned int v107 = v81 + 1;
            unsigned int v108 = v83 + 1;
            do
            {
              *(v107 - 1) = (v81[v108] << (64 - v85)) | v86;
              unint64_t v86 = v81[v108] >> v85;
              *v107++ = v86;
              ++v108;
              BOOL v99 = __CFADD__(v106++, 1);
            }
            while (!v99);
          }
        }
      }
      else
      {
        memmove(v81, &v81[v83], (8 * v84));
      }
      bzero(&v81[v84], 8 * v83);
    }
    int v87 = this + 1;
    unsigned int v88 = *((_DWORD *)*this + 2);
    if (v88 - 64 <= 0xFFFFFF7F)
    {
      int v87 = (void *)*v87;
    }
    else if (v88 > 0xFFFFFFBF)
    {
LABEL_52:
      --*v5;
      goto LABEL_53;
    }
    uint64_t v89 = (v88 + 64) >> 6;
    uint64_t v90 = 2 * v87[(v89 - 1)];
    long long v91 = &v87[v89 - 1];
    *long long v91 = v90;
    if (v89 != 1)
    {
      uint64_t v92 = v89 - 2;
      do
      {
        *long long v91 = v90 | (v87[v92] >> 63);
        long long v91 = &v87[v92];
        uint64_t v90 = 2 * *v91;
        *long long v91 = v90;
      }
      while ((unint64_t)v92--);
    }
    goto LABEL_52;
  }
  if (v9 >= 1)
  {
    unsigned int v109 = *(uint64_t **)a2;
    unsigned int v64 = *((_DWORD *)v109 + 2);
    if (v64 + 64 >= 0x80) {
      operator new[]();
    }
    int v65 = v7 & 7;
    char v112 = v7 & 0xF;
    BOOL v67 = (v7 & 6) != 0 && v65 != 3;
    unsigned int v68 = v64 - 64;
    if (v65 == 1 || v67)
    {
      unsigned int v69 = (unint64_t *)&v110;
      if (v68 <= 0xFFFFFF7F) {
        int v70 = (llvm::detail::IEEEFloat *)this;
      }
      else {
        int v70 = (llvm::detail::IEEEFloat *)&v110;
      }
      if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
        unint64_t v71 = (uint64_t *)((char *)a2 + 8);
      }
      else {
        unint64_t v71 = (uint64_t *)*((void *)a2 + 1);
      }
      if (v64 >= 0xFFFFFFC0)
      {
        int v111 = v6;
        goto LABEL_103;
      }
      uint64_t v72 = (v64 + 64) >> 6;
      do
      {
        uint64_t v73 = *v71++;
        *(void *)int v70 = v73;
        int v70 = (llvm::detail::IEEEFloat *)((char *)v70 + 8);
        --v72;
      }
      while (v72);
    }
    int v111 = v6;
    if (v68 <= 0xFFFFFF7F) {
      unsigned int v69 = v110;
    }
    else {
      unsigned int v69 = (unint64_t *)&v110;
    }
LABEL_103:
    unsigned int v74 = v64 + 64;
    unsigned int v75 = (v64 + 64) >> 6;
    uint64_t v25 = sub_1CD0331C0(v69, v75, v6 - v8);
    if (v9 >> 6 >= v74 >> 6) {
      unsigned int v76 = v75;
    }
    else {
      unsigned int v76 = v9 >> 6;
    }
    uint64_t v77 = v75 - v76;
    char v78 = v9 & 0x3F;
    if ((v9 & 0x3F) != 0)
    {
      if (v9 >> 6 < v75)
      {
        unint64_t v79 = v69[v76] >> v78;
        *unsigned int v69 = v79;
        if (v77 != 1)
        {
          uint64_t v103 = 1 - v77;
          uint64_t v104 = v69 + 1;
          unsigned int v105 = v76 + 1;
          do
          {
            *(v104 - 1) = (v69[v105] << (64 - v78)) | v79;
            unint64_t v79 = v69[v105] >> v78;
            *v104++ = v79;
            ++v105;
            BOOL v99 = __CFADD__(v103++, 1);
          }
          while (!v99);
        }
      }
    }
    else
    {
      memmove(v69, &v69[v76], (8 * v77));
    }
    bzero(&v69[v77], 8 * v76);
    llvm::detail::IEEEFloat::addSignificand((llvm::detail::IEEEFloat *)this, &v109);
    int v48 = *((_DWORD *)v109 + 2);
    goto LABEL_62;
  }
  unsigned int v21 = v8 - v6;
  *((_DWORD *)this + 4) = v8;
  int v22 = *((_DWORD *)*this + 2);
  unint64_t v23 = (unint64_t *)(this + 1);
  if ((v22 - 64) <= 0xFFFFFF7F) {
    unint64_t v23 = (unint64_t *)*v23;
  }
  unsigned int v24 = (v22 + 64) >> 6;
  uint64_t v25 = sub_1CD0331C0(v23, v24, v21);
  if (v6 != v8)
  {
    if (v21 >> 6 >= v24) {
      unsigned int v26 = v24;
    }
    else {
      unsigned int v26 = v21 >> 6;
    }
    uint64_t v27 = v24 - v26;
    char v28 = v21 & 0x3F;
    if ((v21 & 0x3F) != 0)
    {
      if (v21 >> 6 < v24)
      {
        unint64_t v29 = v23[v26] >> v28;
        unint64_t *v23 = v29;
        if (v27 != 1)
        {
          uint64_t v96 = 1 - v27;
          int v97 = v23 + 1;
          unsigned int v98 = v26 + 1;
          do
          {
            *(v97 - 1) = (v23[v98] << (64 - v28)) | v29;
            unint64_t v29 = v23[v98] >> v28;
            *v97++ = v29;
            ++v98;
            BOOL v99 = __CFADD__(v96++, 1);
          }
          while (!v99);
        }
      }
    }
    else
    {
      memmove(v23, &v23[v26], (8 * v27));
    }
    bzero(&v23[v27], 8 * v26);
  }
  llvm::detail::IEEEFloat::addSignificand((llvm::detail::IEEEFloat *)this, (uint64_t **)a2);
  return v25;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  unint64_t v2 = *(void *)this;
  unint64_t v9 = v2;
  int v3 = *(_DWORD *)(v2 + 8);
  unint64_t v4 = (v3 + 64);
  if (v4 >= 0x80) {
    operator new[]();
  }
  char v12 = 3;
  int v11 = *(_DWORD *)(v2 + 4) - 1;
  if ((v3 - 64) < 0xFFFFFF80)
  {
    *(void *)unint64_t v4 = 0;
    unsigned __int8 v7 = a2;
    int v8 = this;
    bzero((void *)(v4 + 8), 8 * (((v3 + 64) >> 6) - 2) + 8);
    a2 = v7;
    this = v8;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t result = llvm::detail::IEEEFloat::multiplySignificand((unint64_t *)this, (uint64_t)a2, (uint64_t)&v9);
  if ((*(_DWORD *)(v2 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v10)
    {
      uint64_t v6 = result;
      MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
      return v6;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::divideSignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  unint64_t v2 = this;
  v68[4] = *MEMORY[0x1E4F143B8];
  int v3 = (void *)((char *)this + 8);
  unsigned int v4 = *(_DWORD *)(*(void *)this + 8);
  if (v4 - 64 <= 0xFFFFFF7F) {
    int v3 = (void *)*v3;
  }
  if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
    unsigned int v5 = (char *)a2 + 8;
  }
  else {
    unsigned int v5 = (char *)*((void *)a2 + 1);
  }
  unsigned int v6 = v4 + 64;
  unint64_t v7 = (v4 + 64) >> 6;
  if (v4 + 64 >= 0xC0)
  {
    BOOL v67 = (unint64_t *)(v6 >> 6);
    operator new[]();
  }
  int v8 = (llvm::APInt *)&v68[v7];
  if (v4 > 0xFFFFFFBF)
  {
    unsigned int v12 = *(_DWORD *)(*(void *)this + 8);
  }
  else
  {
    unint64_t v9 = 0;
    if (v7 <= 1) {
      unsigned int v10 = 1;
    }
    else {
      unsigned int v10 = (v4 + 64) >> 6;
    }
    uint64_t v11 = 8 * v10;
    do
    {
      v68[v9 / 8] = v3[v9 / 8];
      *(void *)((char *)v8 + v9) = *(void *)&v5[v9];
      v3[v9 / 8] = 0;
      v9 += 8;
    }
    while (v11 != v9);
    unsigned int v12 = *(_DWORD *)(*(void *)this + 8);
  }
  int v13 = *((_DWORD *)this + 4) - *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 4) = v13;
  int v14 = 64 - (v7 << 6);
  int v15 = v7 - 1;
  unsigned int v16 = v7 - 1;
  do
  {
    unint64_t v17 = *((void *)v8 + v16);
    if (v17)
    {
      int v18 = (__clz(v17) - v14) ^ 0xFFFFFFC0;
      goto LABEL_18;
    }
    v14 += 64;
    --v16;
  }
  while (v16 != -1);
  int v18 = 0;
LABEL_18:
  unsigned int v19 = v12 + v18;
  if (v12 + v18)
  {
    *((_DWORD *)this + 4) = v19 + v13;
    unint64_t v57 = (llvm::APInt *)&v68[v7];
    BOOL v67 = (unint64_t *)((v4 + 64) >> 6);
    unint64_t v61 = v3;
    unsigned int v63 = v4;
    unsigned int v65 = v4 + 64;
    unsigned int v55 = v12;
    int v54 = v7 - 1;
    llvm::APInt::tcShiftLeft(v8, (unint64_t *)v7, v19);
    int v15 = v54;
    unsigned int v12 = v55;
    int v8 = v57;
    unint64_t v2 = this;
    int v3 = v61;
    unsigned int v4 = v63;
    unsigned int v6 = v65;
    unint64_t v7 = (unint64_t)v67;
  }
  int v20 = 64 - (v7 << 6);
  do
  {
    unint64_t v21 = v68[v15];
    if (v21)
    {
      int v22 = (__clz(v21) - v20) ^ 0xFFFFFFC0;
      goto LABEL_23;
    }
    v20 += 64;
    --v15;
  }
  while (v15 != -1);
  int v22 = 0;
LABEL_23:
  unsigned int v23 = v12 + v22;
  if (v12 + v22)
  {
    *((_DWORD *)v2 + 4) -= v23;
    unint64_t v58 = v8;
    BOOL v67 = (unint64_t *)v7;
    BOOL v60 = v2;
    uint64_t v62 = v3;
    unsigned int v64 = v4;
    unsigned int v66 = v6;
    unsigned int v56 = v12;
    llvm::APInt::tcShiftLeft((llvm::APInt *)v68, (unint64_t *)v7, v23);
    unsigned int v12 = v56;
    int v8 = v58;
    unint64_t v2 = v60;
    int v3 = v62;
    unsigned int v4 = v64;
    unsigned int v6 = v66;
    unint64_t v7 = (unint64_t)v67;
  }
  unsigned int v24 = (char *)v8 - 8;
  uint64_t v25 = v7;
  while (v25 * 8)
  {
    unint64_t v26 = v68[v25 - 1];
    unint64_t v27 = *(void *)&v24[v25 * 8];
    --v25;
    if (v26 != v27)
    {
      if (v26 <= v27)
      {
        --*((_DWORD *)v2 + 4);
        if (v4 <= 0xFFFFFFBF)
        {
          uint64_t v28 = 2 * v68[(v7 - 1)];
          unint64_t v29 = &v68[v7 - 1];
          *unint64_t v29 = v28;
          if (v7 != 1)
          {
            unint64_t v52 = v7 - 2;
            do
            {
              *unint64_t v29 = v28 | (v68[v52] >> 63);
              unint64_t v29 = &v68[v52];
              uint64_t v28 = 2 * *v29;
              *unint64_t v29 = v28;
            }
            while ((unint64_t)v52--);
          }
        }
      }
      break;
    }
  }
  unint64_t v30 = v7;
  if (!v12) {
    goto LABEL_51;
  }
  do
  {
    unint64_t v31 = v7;
    while (v31 * 8)
    {
      unint64_t v32 = v68[v31 - 1];
      unint64_t v33 = *(void *)&v24[v31 * 8];
      --v31;
      if (v32 != v33)
      {
        if (v32 <= v33)
        {
          --v12;
          goto LABEL_37;
        }
        break;
      }
    }
    if (v4 <= 0xFFFFFFBF)
    {
      uint64_t v35 = 0;
      uint64_t v36 = v68;
      char v37 = v8;
      unint64_t v38 = v7;
      do
      {
        unint64_t v39 = *(void *)v37;
        char v37 = (llvm::APInt *)((char *)v37 + 8);
        unint64_t v40 = *v36 - v39;
        BOOL v41 = *v36 < v39;
        unint64_t v42 = *v36 + ~v39;
        if (v35)
        {
          uint64_t v35 = v42 >= *v36;
        }
        else
        {
          unint64_t v42 = v40;
          uint64_t v35 = v41;
        }
        *v36++ = v42;
        --v38;
      }
      while (v38);
    }
    --v12;
    v3[v12 >> 6] |= 1 << v12;
LABEL_37:
    if (v4 <= 0xFFFFFFBF)
    {
      uint64_t v34 = 2 * v68[(v7 - 1)];
      v68[v7 - 1] = v34;
      if (v7 != 1)
      {
        unint64_t v43 = v7 - 2;
        int v44 = &v68[v7 - 1];
        do
        {
          uint64_t *v44 = v34 | (v68[v43] >> 63);
          int v44 = &v68[v43];
          uint64_t v34 = 2 * *v44;
          uint64_t *v44 = v34;
        }
        while ((unint64_t)v43--);
      }
    }
  }
  while (v12);
  do
  {
LABEL_51:
    if (!(v30 * 8))
    {
      uint64_t v48 = 2;
      goto LABEL_57;
    }
    unint64_t v46 = v68[v30 - 1];
    unint64_t v47 = *(void *)&v24[v30 * 8];
    --v30;
  }
  while (v46 == v47);
  if (v46 > v47)
  {
    uint64_t v48 = 3;
  }
  else
  {
    if (v4 > 0xFFFFFFBF) {
      return 0;
    }
    unint64_t v50 = v68[0];
    if (v68[0])
    {
      uint64_t v48 = 1;
    }
    else
    {
      while (v7 - 1 != v50)
      {
        if (v68[++v50]) {
          goto LABEL_66;
        }
      }
      unint64_t v50 = v7;
LABEL_66:
      uint64_t v48 = v50 < v7;
    }
  }
LABEL_57:
  if (v6 >= 0xC0)
  {
    LODWORD(v67) = v48;
    MEMORY[0x1D25D9CB0]();
    return v67;
  }
  return v48;
}

uint64_t llvm::detail::IEEEFloat::significandLSB(llvm::detail::IEEEFloat *this)
{
  uint64_t v2 = *(void *)this;
  int v1 = (unint64_t *)((char *)this + 8);
  uint64_t v3 = *(unsigned int *)(v2 + 8);
  if ((v3 - 64) > 0xFFFFFF7F)
  {
    if (v3 > 0xFFFFFFBF) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    int v1 = (unint64_t *)*v1;
  }
  int v4 = 0;
  unint64_t v5 = (unint64_t)(v3 + 64) >> 6;
  while (1)
  {
    unint64_t v7 = *v1++;
    unint64_t v6 = v7;
    if (v7) {
      break;
    }
    v4 -= 64;
    if (!--v5) {
      return 0xFFFFFFFFLL;
    }
  }
  return __clz(__rbit64(v6)) - v4;
}

void llvm::detail::IEEEFloat::shiftSignificandLeft(llvm::detail::IEEEFloat *this, unsigned int a2)
{
  if (a2)
  {
    int v4 = (void *)((char *)this + 8);
    int v5 = *(_DWORD *)(*(void *)this + 8);
    uint64_t v6 = (v5 + 64) >> 6;
    if ((v5 - 64) <= 0xFFFFFF7F) {
      int v4 = (void *)*v4;
    }
    if (a2 >> 6 >= v6) {
      unsigned int v7 = (v5 + 64) >> 6;
    }
    else {
      unsigned int v7 = a2 >> 6;
    }
    char v8 = a2 & 0x3F;
    if ((a2 & 0x3F) != 0)
    {
      if (a2 >> 6 < v6)
      {
        unsigned int v9 = v6 - 1;
        unint64_t v10 = v4[v6 - 1 - v7] << v8;
        uint64_t v11 = &v4[v6 - 1];
        unint64_t *v11 = v10;
        if ((int)v6 - 1 > v7)
        {
          unsigned int v12 = &v4[(v6 - 2)];
          int v13 = &v4[v6 - v7 - 2];
          do
          {
            unint64_t v14 = *v13--;
            unint64_t *v11 = (v14 >> (64 - v8)) | v10;
            --v9;
            uint64_t v11 = v12;
            unint64_t v10 = v4[v9 - v7] << v8;
            *v12-- = v10;
          }
          while (v7 < v9);
        }
      }
    }
    else
    {
      unsigned int v16 = v4;
      unsigned int v15 = v7;
      memmove(&v4[v7], v4, 8 * (v6 - v7));
      unsigned int v7 = v15;
      int v4 = v16;
    }
    bzero(v4, 8 * v7);
    *((_DWORD *)this + 4) -= a2;
  }
}

uint64_t llvm::detail::IEEEFloat::compareAbsoluteValue(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  int v2 = *((_DWORD *)this + 4) - *((_DWORD *)a2 + 4);
  if (v2)
  {
    if (v2 < 1) {
      return v2 >= 0;
    }
    else {
      return 2;
    }
  }
  else
  {
    uint64_t v4 = *(void *)this;
    uint64_t v3 = (void *)((char *)this + 8);
    int v5 = *(_DWORD *)(v4 + 8);
    if ((v5 - 64) <= 0xFFFFFF7F) {
      uint64_t v3 = (void *)*v3;
    }
    unsigned int v6 = *(_DWORD *)(*(void *)a2 + 8) - 64;
    unsigned int v9 = (char *)*((void *)a2 + 1);
    unsigned int v7 = (char *)a2 + 8;
    char v8 = v9;
    if (v6 >= 0xFFFFFF80) {
      unint64_t v10 = v7;
    }
    else {
      unint64_t v10 = v8;
    }
    unsigned int v11 = (v5 + 64) >> 6;
    unsigned int v12 = v10 - 8;
    for (uint64_t i = 8 * v11; ; i -= 8)
    {
      uint64_t v14 = i;
      if (!i) {
        break;
      }
      unint64_t v15 = v3[(unint64_t)i / 8 - 1];
      unint64_t v16 = *(void *)&v12[i];
      if (v15 != v16)
      {
        if (v15 > v16) {
          return 2;
        }
        return v14 == 0;
      }
    }
    return v14 == 0;
  }
}

uint64_t llvm::detail::IEEEFloat::handleOverflow(_DWORD **a1, int a2)
{
  switch(a2)
  {
    case 1:
LABEL_2:
      unsigned int v2 = *((unsigned __int8 *)a1 + 20);
      if ((*a1)[4] == 1) {
        llvm::detail::IEEEFloat::makeNaN(a1, 0, (v2 >> 3) & 1, 0);
      }
      else {
        *((unsigned char *)a1 + 20) = v2 & 0xF8;
      }
      return 20;
    case 2:
      char v4 = *((unsigned char *)a1 + 20);
      if ((v4 & 8) == 0) {
        goto LABEL_2;
      }
      break;
    case 3:
      char v4 = *((unsigned char *)a1 + 20);
      if ((v4 & 8) != 0) {
        goto LABEL_2;
      }
      break;
    case 4:
      goto LABEL_2;
    default:
      char v4 = *((unsigned char *)a1 + 20);
      break;
  }
  *((unsigned char *)a1 + 20) = v4 & 0xF8 | 2;
  uint64_t v5 = (uint64_t)*a1;
  *((_DWORD *)a1 + 4) = **a1;
  unsigned int v6 = *(_DWORD *)(v5 + 8);
  unsigned int v7 = a1 + 1;
  unsigned int v8 = v6 - 64;
  if (v6 >= 0x40)
  {
    unint64_t v10 = a1 + 1;
    if (v8 <= 0xFFFFFF7F) {
      unint64_t v10 = (void *)*v7;
    }
    unsigned int v13 = v6 - 65;
    if (v6 >= 0x41)
    {
      memset(v10, 255, 8 * (v13 >> 6) + 8);
      unsigned int v9 = (v13 >> 6) + 1;
      unsigned int v11 = v8 - (v13 & 0xFFFFFFC0);
      goto LABEL_12;
    }
    unsigned int v9 = 0;
  }
  else
  {
    unsigned int v9 = 0;
    unint64_t v10 = a1 + 1;
  }
  unsigned int v11 = *(_DWORD *)(v5 + 8);
LABEL_12:
  unsigned int v12 = (v6 + 64) >> 6;
  if (v11) {
    v10[v9++] = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  }
  if (v9 < v12) {
    bzero(&v10[v9], 8 * (v12 + ~v9) + 8);
  }
  if (*(_DWORD *)(v5 + 16) == 1)
  {
    if (v8 <= 0xFFFFFF7F) {
      unsigned int v7 = (void *)*v7;
    }
    llvm::APInt::tcClearBit((uint64_t)v7, 0);
  }
  return 16;
}

uint64_t llvm::detail::IEEEFloat::roundAwayFromZero(uint64_t *a1, int a2, int a3, unsigned int a4)
{
  if (a2 == 1)
  {
    if (a3 == 2)
    {
      if ((*((unsigned char *)a1 + 20) & 7) != 3)
      {
        uint64_t v5 = *a1;
        char v4 = a1 + 1;
        if ((*(_DWORD *)(v5 + 8) - 64) <= 0xFFFFFF7F) {
          char v4 = (void *)*v4;
        }
        return (v4[a4 >> 6] >> a4) & 1;
      }
    }
    else if (a3 == 3)
    {
      return 1;
    }
    return 0;
  }
  uint64_t v6 = 0;
  switch(a2)
  {
    case 1:
      __break(1u);
      goto LABEL_18;
    case 2:
      BOOL v8 = (*((unsigned char *)a1 + 20) & 8) == 0;
      goto LABEL_14;
    case 3:
      return (*((unsigned __int8 *)a1 + 20) >> 3) & 1;
    case 4:
LABEL_18:
      BOOL v8 = (a3 & 0xFFFFFFFE) == 2;
LABEL_14:
      uint64_t v6 = v8;
      break;
    default:
      return v6;
  }
  return v6;
}

uint64_t llvm::detail::IEEEFloat::addOrSubtractSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2, int a3)
{
  LOBYTE(v3) = *((unsigned char *)this + 20);
  unsigned __int8 v4 = *((unsigned char *)a2 + 20);
  uint64_t v5 = 0;
  switch(4 * (v3 & 7) + (v4 & 7))
  {
    case 1:
    case 9:
    case 0xDLL:
      char v20 = v4 & 8 | v3 & 0xF7;
      *((unsigned char *)this + 20) = v20;
      char v21 = *((unsigned char *)a2 + 20);
      int v22 = v21 & 7;
      LOBYTE(v3) = v20 & 0xF8 | v21 & 7;
      *((unsigned char *)this + 20) = v3;
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
      BOOL v24 = (v21 & 6) != 0 && v22 != 3;
      if (v22 == 1 || v24)
      {
        unint64_t v26 = (void *)((char *)this + 8);
        uint64_t v27 = *(unsigned int *)(*(void *)this + 8);
        if ((v27 - 64) <= 0xFFFFFF7F) {
          unint64_t v26 = (void *)*v26;
        }
        if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
          uint64_t v28 = (uint64_t *)((char *)a2 + 8);
        }
        else {
          uint64_t v28 = (uint64_t *)*((void *)a2 + 1);
        }
        if (v27 <= 0xFFFFFFBF)
        {
          unint64_t v29 = (unint64_t)(v27 + 64) >> 6;
          do
          {
            uint64_t v30 = *v28++;
            *v26++ = v30;
            --v29;
          }
          while (v29);
          uint64_t v3 = *((unsigned __int8 *)this + 20);
        }
      }
      goto LABEL_47;
    case 2:
    case 3:
    case 0xBLL:
    case 0xFLL:
      return v5;
    case 4:
    case 5:
    case 6:
    case 7:
LABEL_47:
      if ((v3 & 7) != 1 || *(_DWORD *)(*(void *)this + 16) == 1) {
        goto LABEL_58;
      }
      int v31 = *(_DWORD *)(*(void *)this + 8);
      unsigned int v32 = v31 - 64;
      unint64_t v33 = (char *)this + 8;
      uint64_t v34 = (char *)this + 8;
      if ((v31 - 64) <= 0xFFFFFF7F) {
        uint64_t v34 = *(char **)v33;
      }
      char v35 = v31 - 2;
      uint64_t v36 = (v31 - 2) >> 6;
      if ((*(void *)&v34[8 * v36] & (1 << v35)) != 0)
      {
LABEL_58:
        if ((*((unsigned char *)a2 + 20) & 7) != 1 || *(_DWORD *)(*(void *)a2 + 16) == 1)
        {
          return 0;
        }
        else
        {
          int v37 = *(_DWORD *)(*(void *)a2 + 8);
          unint64_t v38 = (void *)((char *)a2 + 8);
          if ((v37 - 64) <= 0xFFFFFF7F) {
            unint64_t v38 = (void *)*v38;
          }
          return ((v38[(v37 - 2) >> 6] >> (v37 - 2)) & 1) == 0;
        }
      }
      else
      {
        if (v32 <= 0xFFFFFF7F) {
          unint64_t v33 = *(char **)v33;
        }
        *(void *)&v33[8 * v36] |= 1 << v35;
        return 1;
      }
    case 8:
    case 0xCLL:
      uint64_t v5 = 0;
      *((unsigned char *)this + 20) = v3 & 0xF8;
      if (a3 != (*((unsigned char *)a2 + 20) & 8) >> 3) {
        char v18 = 8;
      }
      else {
        char v18 = 0;
      }
      char v19 = v3 & 0xF0;
      goto LABEL_27;
    case 0xALL:
      return 2;
    case 0xELL:
      char v7 = v4 & 8 | v3 & 0xF7;
      *((unsigned char *)this + 20) = v7;
      char v8 = *((unsigned char *)a2 + 20);
      int v9 = v8 & 7;
      LOBYTE(v3) = v7 & 0xF8 | v8 & 7;
      *((unsigned char *)this + 20) = v3;
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
      BOOL v11 = (v8 & 6) != 0 && v9 != 3;
      if (v9 == 1 || v11)
      {
        unsigned int v13 = (void *)((char *)this + 8);
        uint64_t v14 = *(unsigned int *)(*(void *)this + 8);
        if ((v14 - 64) <= 0xFFFFFF7F) {
          unsigned int v13 = (void *)*v13;
        }
        if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
          unint64_t v15 = (uint64_t *)((char *)a2 + 8);
        }
        else {
          unint64_t v15 = (uint64_t *)*((void *)a2 + 1);
        }
        if (v14 <= 0xFFFFFFBF)
        {
          unint64_t v16 = (unint64_t)(v14 + 64) >> 6;
          do
          {
            uint64_t v17 = *v15++;
            *v13++ = v17;
            --v16;
          }
          while (v16);
          uint64_t v3 = *((unsigned __int8 *)this + 20);
        }
      }
      uint64_t v5 = 0;
      if (a3 != (*((unsigned char *)a2 + 20) & 8) >> 3) {
        char v18 = 8;
      }
      else {
        char v18 = 0;
      }
      char v19 = v3 & 0xF7;
LABEL_27:
      *((unsigned char *)this + 20) = v18 | v19;
      return v5;
    default:
      if (((((v4 ^ v3) & 8) == 0) ^ a3)) {
        return 0;
      }
      llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
      return 1;
  }
}

BOOL llvm::detail::IEEEFloat::isSignaling(llvm::detail::IEEEFloat *this)
{
  if ((*((unsigned char *)this + 20) & 7) != 1 || *(_DWORD *)(*(void *)this + 16) == 1) {
    return 0;
  }
  int v2 = *(_DWORD *)(*(void *)this + 8);
  uint64_t v3 = (void *)((char *)this + 8);
  if ((v2 - 64) <= 0xFFFFFF7F) {
    uint64_t v3 = (void *)*v3;
  }
  return ((v3[(v2 - 2) >> 6] >> (v2 - 2)) & 1) == 0;
}

void *llvm::detail::IEEEFloat::makeQuiet(void *this)
{
  if (*(_DWORD *)(*this + 16) != 1)
  {
    int v1 = *(_DWORD *)(*this + 8);
    int v2 = this + 1;
    if ((v1 - 64) <= 0xFFFFFF7F) {
      int v2 = (void *)*v2;
    }
    v2[(v1 - 2) >> 6] |= 1 << (v1 - 2);
  }
  return this;
}

BOOL llvm::detail::IEEEFloat::multiplySpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  LOBYTE(v2) = *((unsigned char *)this + 20);
  uint64_t v3 = (void *)*((unsigned __int8 *)a2 + 20);
  uint64_t v4 = v3 & 7;
  int v5 = 4 * (v2 & 7) + v4;
  if (v5 == 10) {
    return 0;
  }
  switch(v5)
  {
    case 1:
    case 9:
    case 13:
      char v9 = v3 & 8 | v2 & 0xF7;
      *((unsigned char *)this + 20) = v9;
      char v10 = *((unsigned char *)a2 + 20);
      int v11 = v10 & 7;
      LOBYTE(v2) = v9 & 0xF8 | v10 & 7;
      *((unsigned char *)this + 20) = v2;
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
      BOOL v13 = (v10 & 6) != 0 && v11 != 3;
      if (v11 != 1 && !v13) {
        goto LABEL_27;
      }
      uint64_t v3 = (void *)((char *)this + 8);
      uint64_t v4 = *(unsigned int *)(*(void *)this + 8);
      if ((v4 - 64) <= 0xFFFFFF7F) {
        goto LABEL_43;
      }
      goto LABEL_20;
    case 3:
    case 12:
      llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
      goto LABEL_8;
    case 4:
    case 5:
    case 6:
    case 7:
      goto LABEL_28;
    case 10:
      __break(1u);
LABEL_43:
      uint64_t v3 = (void *)*v3;
LABEL_20:
      if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
        unint64_t v15 = (uint64_t *)((char *)a2 + 8);
      }
      else {
        unint64_t v15 = (uint64_t *)*((void *)a2 + 1);
      }
      if (v4 <= 0xFFFFFFBF)
      {
        unint64_t v16 = (unint64_t)(v4 + 64) >> 6;
        do
        {
          uint64_t v17 = *v15++;
          *v3++ = v17;
          --v16;
        }
        while (v16);
        uint64_t v2 = *((unsigned __int8 *)this + 20);
      }
LABEL_27:
      LOBYTE(v2) = v2 & 0xF7;
      *((unsigned char *)this + 20) = v2;
      LOBYTE(v3) = *((unsigned char *)a2 + 20);
LABEL_28:
      *((unsigned char *)this + 20) = v3 & 8 ^ v2;
      if ((v2 & 7) != 1 || *(_DWORD *)(*(void *)this + 16) == 1) {
        goto LABEL_30;
      }
      int v20 = *(_DWORD *)(*(void *)this + 8);
      unsigned int v21 = v20 - 64;
      int v22 = (char *)this + 8;
      unsigned int v23 = (char *)this + 8;
      if ((v20 - 64) <= 0xFFFFFF7F) {
        unsigned int v23 = *(char **)v22;
      }
      char v24 = v20 - 2;
      uint64_t v25 = (v20 - 2) >> 6;
      if ((*(void *)&v23[8 * v25] & (1 << v24)) != 0)
      {
LABEL_30:
        if ((*((unsigned char *)a2 + 20) & 7) != 1 || *(_DWORD *)(*(void *)a2 + 16) == 1) {
          return 0;
        }
        int v18 = *(_DWORD *)(*(void *)a2 + 8);
        char v19 = (void *)((char *)a2 + 8);
        if ((v18 - 64) <= 0xFFFFFF7F) {
          char v19 = (void *)*v19;
        }
        BOOL v6 = ((v19[(v18 - 2) >> 6] >> (v18 - 2)) & 1) == 0;
      }
      else
      {
        if (v21 <= 0xFFFFFF7F) {
          int v22 = *(char **)v22;
        }
        *(void *)&v22[8 * v25] |= 1 << v24;
LABEL_8:
        BOOL v6 = 1;
      }
      break;
    case 11:
    case 14:
    case 15:
      BOOL v6 = 0;
      char v8 = v2 & 0xF8 | 3;
      goto LABEL_6;
    default:
      BOOL v6 = 0;
      char v8 = v2 & 0xF8;
LABEL_6:
      *((unsigned char *)this + 20) = v8;
      return v6;
  }
  return v6;
}

uint64_t llvm::detail::IEEEFloat::divideSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t result = 0;
  unsigned int v4 = *((unsigned __int8 *)this + 20);
  char v5 = *((unsigned char *)a2 + 20);
  int v6 = 4 * (v4 & 7) + (v5 & 7);
  if (v6 != 10)
  {
    switch(v6)
    {
      case 1:
      case 9:
      case 13:
        llvm::detail::IEEEFloat::assign((uint64_t)this, a2);
        LOBYTE(v4) = *((unsigned char *)this + 20) & 0xF7;
        *((unsigned char *)this + 20) = v4;
        char v5 = *((unsigned char *)a2 + 20);
        goto LABEL_10;
      case 2:
      case 3:
      case 12:
      case 14:
        return result;
      case 4:
      case 5:
      case 6:
      case 7:
LABEL_10:
        *((unsigned char *)this + 20) = v5 & 8 ^ v4;
        if ((v4 & 7) != 1 || *(_DWORD *)(*(void *)this + 16) == 1) {
          goto LABEL_21;
        }
        int v8 = *(_DWORD *)(*(void *)this + 8);
        unsigned int v9 = v8 - 64;
        char v10 = (char *)this + 8;
        int v11 = (char *)this + 8;
        if ((v8 - 64) <= 0xFFFFFF7F) {
          int v11 = *(char **)v10;
        }
        char v12 = v8 - 2;
        uint64_t v13 = (v8 - 2) >> 6;
        if ((*(void *)&v11[8 * v13] & (1 << v12)) != 0)
        {
LABEL_21:
          if ((*((unsigned char *)a2 + 20) & 7) != 1 || *(_DWORD *)(*(void *)a2 + 16) == 1)
          {
            uint64_t result = 0;
          }
          else
          {
            int v14 = *(_DWORD *)(*(void *)a2 + 8);
            unint64_t v15 = (void *)((char *)a2 + 8);
            if ((v14 - 64) <= 0xFFFFFF7F) {
              unint64_t v15 = (void *)*v15;
            }
            uint64_t result = ((v15[(v14 - 2) >> 6] >> (v14 - 2)) & 1) == 0;
          }
        }
        else
        {
          if (v9 <= 0xFFFFFF7F) {
            char v10 = *(char **)v10;
          }
          *(void *)&v10[8 * v13] |= 1 << v12;
LABEL_5:
          uint64_t result = 1;
        }
        break;
      case 8:
        uint64_t result = 0;
        *((unsigned char *)this + 20) = v4 & 0xF8 | 3;
        return result;
      case 10:
        __break(1u);
        goto LABEL_26;
      case 11:
        if (*(_DWORD *)(*(void *)this + 16) == 1) {
LABEL_26:
        }
          llvm::detail::IEEEFloat::makeNaN(this, 0, (v4 >> 3) & 1, 0);
        else {
          *((unsigned char *)this + 20) = v4 & 0xF8;
        }
        return 2;
      default:
        llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
        goto LABEL_5;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::changeSign(uint64_t this)
{
  *(unsigned char *)(this + 20) ^= 8u;
  return this;
}

uint64_t llvm::detail::IEEEFloat::addOrSubtract(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3, int a4)
{
  uint64_t result = llvm::detail::IEEEFloat::addOrSubtractSpecials(a1, a2, a4);
  if (result == 2)
  {
    int v9 = llvm::detail::IEEEFloat::addOrSubtractSignificand((unint64_t **)a1, a2, a4);
    uint64_t result = llvm::detail::IEEEFloat::normalize(a1, a3, v9);
  }
  char v10 = *((unsigned char *)a1 + 20);
  if ((v10 & 7) == 3)
  {
    char v11 = *((unsigned char *)a2 + 20);
    if ((v11 & 7) != 3 || a4 != ((v11 ^ v10) & 8) >> 3) {
      *((unsigned char *)a1 + 20) = v10 & 0xF7 | (8 * (a3 == 3));
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::add(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  return llvm::detail::IEEEFloat::addOrSubtract(a1, a2, a3, 0);
}

uint64_t llvm::detail::IEEEFloat::subtract(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  return llvm::detail::IEEEFloat::addOrSubtract(a1, a2, a3, 1);
}

uint64_t llvm::detail::IEEEFloat::multiply(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  *((unsigned char *)a1 + 20) ^= *((unsigned char *)a2 + 20) & 8;
  uint64_t result = llvm::detail::IEEEFloat::multiplySpecials(a1, a2);
  if ((*((unsigned char *)a1 + 20) & 6) != 0 && (*((unsigned char *)a1 + 20) & 7) != 3)
  {
    int v8 = llvm::detail::IEEEFloat::multiplySignificand(a1, a2);
    LODWORD(result) = llvm::detail::IEEEFloat::normalize(a1, a3, v8);
    if (v8) {
      return result | 0x10;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::divide(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  *((unsigned char *)a1 + 20) ^= *((unsigned char *)a2 + 20) & 8;
  uint64_t result = llvm::detail::IEEEFloat::divideSpecials(a1, a2);
  if ((*((unsigned char *)a1 + 20) & 6) != 0 && (*((unsigned char *)a1 + 20) & 7) != 3)
  {
    int v8 = llvm::detail::IEEEFloat::divideSignificand(a1, a2);
    LODWORD(result) = llvm::detail::IEEEFloat::normalize(a1, a3, v8);
    if (v8) {
      return result | 0x10;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t llvm::detail::ilogb(llvm::detail *this, const llvm::detail::IEEEFloat *a2)
{
  int v2 = *((unsigned char *)this + 20) & 7;
  if (v2 == 3) {
    return 2147483649;
  }
  if ((*((unsigned char *)this + 20) & 7) == 0) {
    return 0x7FFFFFFFLL;
  }
  if (v2 == 1) {
    return 0x80000000;
  }
  if (!llvm::detail::IEEEFloat::isDenormal(this)) {
    return *((unsigned int *)this + 4);
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v7, this);
  int v5 = *(_DWORD *)(*(void *)this + 8) - 1;
  v9 += v5;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v7, 1, 0);
  uint64_t v6 = (v9 - v5);
  if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v8) {
      MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
    }
  }
  return v6;
}

uint64_t llvm::detail::IEEEFloat::fusedMultiplyAdd(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2, const llvm::detail::IEEEFloat *a3, int a4)
{
  char v7 = *((unsigned char *)this + 20);
  *((unsigned char *)this + 20) = *((unsigned char *)a2 + 20) & 8 ^ v7;
  int v8 = v7 & 6;
  int v9 = v7 & 7;
  if (v8) {
    BOOL v10 = v9 == 3;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10
    || ((*((unsigned char *)a2 + 20) & 6) != 0 ? (BOOL v12 = (*((unsigned char *)a2 + 20) & 7) == 3) : (BOOL v12 = 1),
        v12 || (char v13 = *((unsigned char *)a3 + 20), (v13 & 6) == 0)))
  {
    if (llvm::detail::IEEEFloat::multiplySpecials(this, a2))
    {
      return 1;
    }
    else
    {
      return llvm::detail::IEEEFloat::addOrSubtract(this, a3, a4, 0);
    }
  }
  else
  {
    uint64_t v14 = *(void *)a3;
    uint64_t v24 = v14;
    if ((*(_DWORD *)(v14 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    int v15 = v13 & 7;
    char v27 = v13 & 0xF;
    int v26 = *((_DWORD *)a3 + 4);
    if (v15 != 3)
    {
      uint64_t v16 = *(unsigned int *)(v14 + 8);
      uint64_t v17 = (v16 - 64) <= 0xFFFFFF7F ? this : (llvm::detail::IEEEFloat *)&v25;
      int v18 = (*(_DWORD *)(*(void *)a3 + 8) - 64) >= 0xFFFFFF80
          ? (uint64_t *)((char *)a3 + 8)
          : (uint64_t *)*((void *)a3 + 1);
      if (v16 <= 0xFFFFFFBF)
      {
        unint64_t v19 = (unint64_t)(v16 + 64) >> 6;
        do
        {
          uint64_t v20 = *v18++;
          *(void *)uint64_t v17 = v20;
          uint64_t v17 = (llvm::detail::IEEEFloat *)((char *)v17 + 8);
          --v19;
        }
        while (v19);
      }
    }
    int v21 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t *)this, (uint64_t)a2, (uint64_t)&v24);
    if ((*(_DWORD *)(v14 + 8) - 64) <= 0xFFFFFF7F && v25) {
      MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
    }
    LODWORD(result) = llvm::detail::IEEEFloat::normalize(this, a4, v21);
    if (v21) {
      uint64_t result = result | 0x10;
    }
    else {
      uint64_t result = result;
    }
    int v22 = *((unsigned __int8 *)this + 20);
    if ((v22 & 7) == 3 && (result & 8) == 0 && ((*((unsigned __int8 *)a3 + 20) ^ v22) & 8) != 0) {
      *((unsigned char *)this + 20) = v22 & 0xF7 | (8 * (a4 == 3));
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::convertFromAPInt(llvm::detail::IEEEFloat *this, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  unint64_t v7 = (unint64_t)(v6 + 63) >> 6;
  unsigned int v49 = *(_DWORD *)(a2 + 8);
  if (v6 > 0x40) {
    operator new[]();
  }
  unint64_t v8 = *(void *)a2;
  unint64_t v48 = *(void *)a2;
  char v9 = *((unsigned char *)this + 20);
  *((unsigned char *)this + 20) = v9 & 0xF7;
  if (a3 && ((v48 >> (v6 - 1)) & 1) != 0)
  {
    *((unsigned char *)this + 20) = v9 | 8;
    unsigned int v47 = v6;
    unint64_t v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!v6) {
      unint64_t v38 = 0;
    }
    unint64_t v46 = (unint64_t *)(v38 & ~v8);
    llvm::APInt::operator++((uint64_t)&v46);
    unsigned int v10 = v47;
    unsigned int v47 = 0;
    unint64_t v48 = (unint64_t)v46;
    unsigned int v49 = v10;
    unint64_t v8 = (unint64_t)v46;
  }
  else
  {
    unsigned int v10 = v6;
  }
  if (v10 < 0x41) {
    unint64_t v8 = (unint64_t)&v48;
  }
  *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF8 | 2;
  int v11 = 64 - (v7 << 6);
  unsigned int v12 = v7 - 1;
  do
  {
    unint64_t v13 = *(void *)(v8 + 8 * v12);
    if (v13)
    {
      unsigned int v14 = (__clz(v13) - v11) ^ 0x3F;
      goto LABEL_9;
    }
    v11 += 64;
    --v12;
  }
  while (v12 != -1);
  unsigned int v14 = -1;
LABEL_9:
  unsigned int v15 = v14 + 1;
  uint64_t v16 = (void *)((char *)this + 8);
  unsigned int v17 = *(_DWORD *)(*(void *)this + 8);
  if (v17 - 64 <= 0xFFFFFF7F) {
    uint64_t v16 = (void *)*v16;
  }
  unsigned int v18 = (v17 + 64) >> 6;
  if (v15 < v17)
  {
    *((_DWORD *)this + 4) = v17 - 1;
    unsigned int v19 = v14 + 64;
    LODWORD(v20) = (v14 + 64) >> 6;
    if (v14 <= 0xFFFFFFBF)
    {
      if (v20 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v20;
      }
      int v22 = (uint64_t *)v8;
      unsigned int v23 = v16;
      do
      {
        uint64_t v24 = *v22++;
        *v23++ = v24;
        --v21;
      }
      while (v21);
    }
    unsigned int v25 = v19 & 0xFFFFFFC0;
    if ((v19 & 0xFFFFFFC0) < v15)
    {
      int v27 = v20 - 1;
      unint64_t v28 = *(void *)(v8 + 8 * v20) & (0xFFFFFFFFFFFFFFFFLL >> (v25
                                                                                - v14
                                                                                + 63)) | v16[(v20 - 1)];
    }
    else
    {
      if (v25 <= v15) {
        goto LABEL_23;
      }
      char v26 = v15 & 0x3F;
      if ((v15 & 0x3F) == 0) {
        goto LABEL_23;
      }
      int v27 = v20 - 1;
      unint64_t v28 = v16[(v20 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -v26);
    }
    v16[v27] = v28;
LABEL_23:
    int v29 = 0;
    goto LABEL_24;
  }
  *((_DWORD *)this + 4) = v14;
  unsigned int v32 = v15 - v17;
  int v29 = sub_1CD0331C0((unint64_t *)v8, v7, v15 - v17);
  unsigned int v19 = v17 + 63;
  uint64_t v20 = (v17 + 63) >> 6;
  unsigned int v33 = v32 >> 6;
  if (v17 != 0 && v17 < 0xFFFFFFC1)
  {
    unint64_t v39 = 0;
    if (v20 <= 1) {
      unsigned int v40 = 1;
    }
    else {
      unsigned int v40 = (v17 + 63) >> 6;
    }
    uint64_t v41 = 8 * v40;
    do
    {
      v16[v39 / 8] = *(void *)(v8 + 8 * v33 + v39);
      v39 += 8;
    }
    while (v41 != v39);
    int v34 = v32 & 0x3F;
    if ((v32 & 0x3F) != 0)
    {
      uint64_t v42 = *v16 >> v34;
      void *v16 = v42;
      if (v20 != 1)
      {
        uint64_t v43 = 0;
        do
        {
          int v44 = &v16[v43];
          uint64_t *v44 = (v16[(v43 + 1)] << (64 - v34)) | v42;
          uint64_t v42 = v16[(v43 + 1)] >> v34;
          v44[1] = v42;
          ++v43;
        }
        while (v20 - 1 != v43);
      }
    }
  }
  else
  {
    int v34 = v32 & 0x3F;
  }
  unsigned int v35 = (v19 & 0xFFFFFFC0) - v34;
  if (v35 < v17)
  {
    unint64_t v45 = (*(void *)(v8 + 8 * (v33 + v20)) & (0xFFFFFFFFFFFFFFFFLL >> (v35
                                                                                       - v17))) << v35;
    int v36 = v20 - 1;
    unint64_t v37 = v45 | v16[(v20 - 1)];
    goto LABEL_34;
  }
  if (v35 > v17 && (v17 & 0x3F) != 0)
  {
    int v36 = v20 - 1;
    unint64_t v37 = v16[(v20 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -(v17 & 0x3F));
LABEL_34:
    v16[v36] = v37;
  }
LABEL_24:
  if (v20 < v18) {
    bzero((char *)v16 + ((v19 >> 3) & 0x1FFFFFF8), 8 * (v18 + ~v20) + 8);
  }
  uint64_t v30 = llvm::detail::IEEEFloat::normalize(this, a4, v29);
  if (v10 >= 0x41 && v48) {
    MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
  }
  return v30;
}

uint64_t llvm::detail::IEEEFloat::convertToSignExtendedInteger(uint64_t a1, uint64_t *__src, uint64_t a3, unsigned int a4, int a5, int a6, unsigned char *a7)
{
  *a7 = 0;
  unsigned int v7 = *(unsigned char *)(a1 + 20) & 7;
  if (v7 < 2) {
    return 1;
  }
  unsigned int v14 = a4 + 63;
  uint64_t v15 = (a4 + 63) >> 6;
  if (v7 == 3)
  {
    void *__src = 0;
    if (v14 >= 0x80) {
      bzero(__src + 1, 8 * (v15 - 2) + 8);
    }
    LOBYTE(v16) = ((*(unsigned __int8 *)(a1 + 20) >> 3) & 1) == 0;
    goto LABEL_7;
  }
  int v17 = a5;
  unsigned int v18 = (unint64_t **)(a1 + 8);
  unsigned int v19 = *(_DWORD *)(*(void *)a1 + 8);
  unsigned int v20 = v19 - 64;
  uint64_t v21 = (unint64_t *)(a1 + 8);
  if (v19 - 64 <= 0xFFFFFF7F) {
    uint64_t v21 = *v18;
  }
  uint64_t v22 = *(unsigned int *)(a1 + 16);
  if ((v22 & 0x80000000) == 0)
  {
    if (v22 >= a4) {
      return 1;
    }
    unsigned int v23 = v22 + 1;
    if (v19 > (int)v22 + 1)
    {
      int v92 = v17;
      uint64_t v24 = 0;
      unsigned int v25 = v19 - v23;
      unsigned int v26 = v22 + 64;
      unint64_t v27 = (unint64_t)(v22 + 64) >> 6;
      unsigned int v28 = (v19 - v23) >> 6;
      do
      {
        __src[v24] = v21[v28 + v24];
        ++v24;
      }
      while (v27 != v24);
      int v29 = v25 & 0x3F;
      if ((v25 & 0x3F) != 0)
      {
        unint64_t v30 = (unint64_t)*__src >> v29;
        void *__src = v30;
        if (v27 != 1)
        {
          uint64_t v83 = 0;
          do
          {
            uint64_t v84 = &__src[v83];
            *uint64_t v84 = (__src[(v83 + 1)] << (64 - v29)) | v30;
            unint64_t v30 = (unint64_t)__src[(v83 + 1)] >> v29;
            v84[1] = v30;
            ++v83;
          }
          while (v27 - 1 != v83);
        }
      }
      unsigned int v31 = (v26 & 0xFFFFFFC0) - v29;
      if (v31 <= v22)
      {
        unint64_t v85 = (v21[v28 + v27] & (0xFFFFFFFFFFFFFFFFLL >> (v31 - v22 + 63))) << v31;
        int v32 = v27 - 1;
        unint64_t v33 = v85 | __src[(v27 - 1)];
      }
      else
      {
        if (v31 <= v23 || (v23 & 0x3F) == 0)
        {
LABEL_22:
          if (v27 < v15)
          {
            uint64_t v88 = v14 >> 6;
            uint64_t v90 = v21;
            unsigned int v34 = v14;
            unsigned int v35 = v19 - v23;
            bzero((char *)__src + ((v26 >> 3) & 0x1FFFFFF8), 8 * (v15 + ~v27) + 8);
            unsigned int v25 = v35;
            unsigned int v20 = v19 - 64;
            uint64_t v15 = v88;
            uint64_t v21 = v90;
            unsigned int v14 = v34;
          }
          goto LABEL_27;
        }
        int v32 = v27 - 1;
        unint64_t v33 = __src[(v27 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -(v23 & 0x3F));
      }
      __src[v32] = v33;
      goto LABEL_22;
    }
    unsigned int v46 = v19 + 63;
    unsigned int v47 = (v19 + 63) >> 6;
    if (v19 + 63 >= 0x40)
    {
      if (v47 <= 1) {
        uint64_t v48 = 1;
      }
      else {
        uint64_t v48 = v47;
      }
      unsigned int v49 = v21;
      unint64_t v50 = __src;
      do
      {
        uint64_t v51 = *v49++;
        *v50++ = v51;
        --v48;
      }
      while (v48);
    }
    unsigned int v52 = v46 & 0xFFFFFFC0;
    if ((v46 & 0xFFFFFFC0) < v19)
    {
      unsigned int v53 = v47 - 1;
      unint64_t v54 = v21[v47] & (0xFFFFFFFFFFFFFFFFLL >> (v52 - v19)) | __src[v47 - 1];
    }
    else
    {
      if (v52 <= v19 || (v19 & 0x3F) == 0) {
        goto LABEL_55;
      }
      unsigned int v53 = v47 - 1;
      unint64_t v54 = __src[v47 - 1] & (0xFFFFFFFFFFFFFFFFLL >> -(v19 & 0x3F));
    }
    __src[v53] = v54;
LABEL_55:
    if (v47 < v15)
    {
      uint64_t v81 = v14 >> 6;
      unsigned int v82 = v14;
      bzero((char *)__src + ((v46 >> 3) & 0x1FFFFFF8), 8 * (v15 + ~v47) + 8);
      unsigned int v23 = v22 + 1;
      unsigned int v14 = v82;
      uint64_t v15 = v81;
    }
    if (v23 == v19)
    {
      int v16 = 1;
    }
    else
    {
      unsigned int v55 = (v23 - v19) >> 6;
      if (v55 >= v15) {
        unsigned int v56 = v15;
      }
      else {
        unsigned int v56 = (v23 - v19) >> 6;
      }
      unsigned int v57 = v14;
      char v58 = (v23 - v19) & 0x3F;
      if (v58)
      {
        if (v55 < v15)
        {
          unsigned int v59 = v15 - 1;
          uint64_t v60 = __src[v15 - 1 - v56] << v58;
          unint64_t v61 = &__src[v15 - 1];
          uint64_t *v61 = v60;
          if ((int)v15 - 1 > v56)
          {
            char v78 = &__src[(v15 - 2)];
            unint64_t v79 = &__src[v15 - v56 - 2];
            do
            {
              unint64_t v80 = *v79--;
              uint64_t *v61 = (v80 >> (64 - v58)) | v60;
              --v59;
              unint64_t v61 = v78;
              uint64_t v60 = __src[v59 - v56] << v58;
              *v78-- = v60;
            }
            while (v56 < v59);
          }
        }
      }
      else
      {
        uint64_t v86 = v15;
        memmove(&__src[v56], __src, 8 * (v15 - v56));
        uint64_t v15 = v86;
      }
      uint64_t v62 = v15;
      bzero(__src, 8 * v56);
      uint64_t v15 = v62;
      int v16 = 1;
      unsigned int v14 = v57;
    }
    goto LABEL_69;
  }
  int v92 = a5;
  void *__src = 0;
  if (v14 >= 0x80)
  {
    uint64_t v89 = v14 >> 6;
    long long v91 = v21;
    unsigned int v87 = v14;
    bzero(__src + 1, 8 * (v15 - 2) + 8);
    unsigned int v20 = v19 - 64;
    uint64_t v15 = v89;
    uint64_t v21 = v91;
    unsigned int v14 = v87;
  }
  unsigned int v25 = v19 + ~v22;
LABEL_27:
  if (!v25)
  {
    int v16 = 1;
LABEL_68:
    int v17 = v92;
    goto LABEL_69;
  }
  unsigned int v36 = v20;
  unsigned int v37 = v14;
  unint64_t v38 = v15;
  unsigned int v39 = (v19 + 64) >> 6;
  unsigned int v40 = v25;
  unsigned int v41 = sub_1CD0331C0(v21, v39, v25);
  if (!v41)
  {
    int v16 = 1;
    uint64_t v15 = v38;
    unsigned int v14 = v37;
    goto LABEL_68;
  }
  uint64_t v15 = v38;
  unsigned int v14 = v37;
  if (a6 != 1)
  {
    int v16 = 0;
    int v17 = v92;
    switch(a6)
    {
      case 1:
        __break(1u);
        break;
      case 2:
        if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
          goto LABEL_67;
        }
        goto LABEL_35;
      case 3:
        if ((*(unsigned char *)(a1 + 20) & 8) == 0) {
          goto LABEL_67;
        }
        goto LABEL_35;
      case 4:
        break;
      default:
        goto LABEL_69;
    }
    if (v41 >= 2) {
      goto LABEL_35;
    }
    goto LABEL_67;
  }
  if (v41 == 2)
  {
    if ((*(unsigned char *)(a1 + 20) & 7) != 3)
    {
      if (v36 <= 0xFFFFFF7F) {
        unsigned int v18 = (unint64_t **)*v18;
      }
      if (((unint64_t)v18[v40 >> 6] >> v40)) {
        goto LABEL_35;
      }
    }
    goto LABEL_67;
  }
  if (v41 != 3)
  {
LABEL_67:
    int v16 = 0;
    goto LABEL_68;
  }
LABEL_35:
  if (v37 < 0x40) {
    return 1;
  }
  BOOL v42 = __CFADD__((*__src)++, 1);
  int v17 = v92;
  if (v42)
  {
    unint64_t v43 = 0;
    int v44 = (char *)(__src + 1);
    while (v38 - 1 != v43)
    {
      uint64_t v45 = *(void *)&v44[8 * v43];
      *(void *)&v44[8 * v43++] = v45 + 1;
      if (v45 != -1)
      {
        if (v43 >= v38) {
          return 1;
        }
        goto LABEL_42;
      }
    }
    return 1;
  }
LABEL_42:
  int v16 = 0;
LABEL_69:
  int v63 = 64 - (v15 << 6);
  int v64 = v15 - 1;
  while (1)
  {
    unint64_t v65 = __src[v64];
    if (v65) {
      break;
    }
    v63 += 64;
    if (--v64 == -1)
    {
      int v66 = -1;
      goto LABEL_74;
    }
  }
  int v66 = (__clz(v65) - v63) ^ 0x3F;
LABEL_74:
  unsigned int v67 = v66 + 1;
  if ((*(unsigned char *)(a1 + 20) & 8) == 0)
  {
    if (v67 < (v17 ^ 1) + a4)
    {
      uint64_t result = 16;
    }
    else
    {
      int v16 = 0;
      uint64_t result = 1;
    }
    if (v16 == 1) {
      goto LABEL_7;
    }
    return result;
  }
  if ((v17 & 1) == 0)
  {
    if (v66 == -1) {
      goto LABEL_93;
    }
    return 1;
  }
  if (v67 == a4)
  {
    if (v14 < 0x40)
    {
LABEL_86:
      int v72 = -1;
    }
    else
    {
      uint64_t v68 = 0;
      unsigned int v69 = (unint64_t *)__src;
      while (1)
      {
        unint64_t v71 = *v69++;
        unint64_t v70 = v71;
        if (v71) {
          break;
        }
        v68 -= 64;
        if (!(((unint64_t)v15 << 6) + v68)) {
          goto LABEL_86;
        }
      }
      int v72 = __clz(__rbit64(v70)) - v68;
    }
    if (v72 != v66) {
      return 1;
    }
    goto LABEL_93;
  }
  if (v67 > a4) {
    return 1;
  }
LABEL_93:
  if (v14 >= 0x40)
  {
    uint64_t v73 = __src;
    uint64_t v74 = v15;
    do
    {
      *uint64_t v73 = ~*v73;
      ++v73;
      --v74;
    }
    while (v74);
    uint64_t v75 = v15 - 1;
    do
    {
      uint64_t v76 = *__src + 1;
      *__src++ = v76;
      if (v76) {
        BOOL v77 = 1;
      }
      else {
        BOOL v77 = v75 == 0;
      }
      --v75;
    }
    while (!v77);
  }
  if (v16)
  {
    LOBYTE(v16) = 1;
LABEL_7:
    uint64_t result = 0;
    *a7 = v16;
    return result;
  }
  return 16;
}

uint64_t sub_1CD0331C0(unint64_t *a1, unsigned int a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = 0;
  unsigned int v4 = a1;
  while (1)
  {
    unint64_t v6 = *v4++;
    unint64_t v5 = v6;
    if (v6) {
      break;
    }
    v3 -= 64;
    if (!(((unint64_t)a2 << 6) + v3)) {
      return 0;
    }
  }
  int v7 = __clz(__rbit64(v5));
  if (v7 - (int)v3 >= a3) {
    return 0;
  }
  if (v7 - a3 + 1 == v3) {
    return 2;
  }
  if (a3 <= a2 << 6 && ((a1[(a3 - 1) >> 6] >> (a3 - 1)) & 1) != 0) {
    return 3;
  }
  return 1;
}

uint64_t llvm::detail::IEEEFloat::convertToInteger(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, int a5, int a6, unsigned char *a7)
{
  uint64_t result = llvm::detail::IEEEFloat::convertToSignExtendedInteger(a1, a2, a3, a4, a5, a6, a7);
  if (result == 1)
  {
    unint64_t v12 = (a4 + 63) >> 6;
    if ((*(unsigned char *)(a1 + 20) & 7) == 1)
    {
      unsigned int v15 = 0;
    }
    else
    {
      if ((*(unsigned char *)(a1 + 20) & 8) != 0)
      {
        unsigned int v15 = 0;
        unsigned int v13 = a5;
      }
      else
      {
        unsigned int v13 = a4 - a5;
        unsigned int v14 = a4 - a5 - 65;
        if (a4 - a5 >= 0x41)
        {
          unsigned int v18 = v14 >> 6;
          unsigned int v19 = v13 - 65;
          memset(a2, 255, 8 * (v14 >> 6) + 8);
          unint64_t v12 = (a4 + 63) >> 6;
          uint64_t result = 1;
          unsigned int v15 = v18 + 1;
          unsigned int v13 = a4 - a5 - (v19 & 0xFFFFFFC0) - 64;
        }
        else
        {
          unsigned int v15 = 0;
        }
      }
      if (v13) {
        a2[v15++] = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
      }
    }
    if (v15 < v12)
    {
      unsigned int v20 = v12;
      unsigned int v21 = result;
      bzero(&a2[v15], 8 * (v12 + ~v15) + 8);
      unint64_t v12 = v20;
      uint64_t result = v21;
    }
    if ((*(unsigned char *)(a1 + 20) & 8) != 0)
    {
      if (a5)
      {
        unsigned int v16 = a4 - 1;
        uint64_t v17 = result;
        llvm::APInt::tcShiftLeft((llvm::APInt *)a2, (unint64_t *)v12, v16);
        return v17;
      }
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::convertFromUnsignedParts(llvm::detail::IEEEFloat *this, unint64_t *a2, unsigned int a3, int a4)
{
  *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF8 | 2;
  int v7 = 64 - (a3 << 6);
  unsigned int v8 = a3 - 1;
  do
  {
    unint64_t v9 = a2[v8];
    if (v9)
    {
      unsigned int v10 = (__clz(v9) - v7) ^ 0x3F;
      goto LABEL_4;
    }
    v7 += 64;
    --v8;
  }
  while (v8 != -1);
  unsigned int v10 = -1;
LABEL_4:
  unsigned int v11 = v10 + 1;
  unint64_t v12 = (void *)((char *)this + 8);
  unsigned int v13 = *(_DWORD *)(*(void *)this + 8);
  if (v13 - 64 <= 0xFFFFFF7F) {
    unint64_t v12 = (void *)*v12;
  }
  unsigned int v14 = (v13 + 64) >> 6;
  unsigned int v15 = v11 - v13;
  if (v11 < v13)
  {
    *((_DWORD *)this + 4) = v13 - 1;
    unsigned int v16 = v10 + 64;
    LODWORD(v17) = (v10 + 64) >> 6;
    if (v10 <= 0xFFFFFFBF)
    {
      if (v17 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v17;
      }
      unsigned int v19 = a2;
      unsigned int v20 = v12;
      do
      {
        uint64_t v21 = *v19++;
        *v20++ = v21;
        --v18;
      }
      while (v18);
    }
    unsigned int v22 = v16 & 0xFFFFFFC0;
    if ((v16 & 0xFFFFFFC0) < v11)
    {
      int v24 = v17 - 1;
      unint64_t v25 = a2[v17] & (0xFFFFFFFFFFFFFFFFLL >> (v22 - v10 + 63)) | v12[(v17 - 1)];
    }
    else
    {
      if (v22 <= v11) {
        goto LABEL_18;
      }
      char v23 = v11 & 0x3F;
      if ((v11 & 0x3F) == 0) {
        goto LABEL_18;
      }
      int v24 = v17 - 1;
      unint64_t v25 = v12[(v17 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -v23);
    }
    v12[v24] = v25;
LABEL_18:
    int v26 = 0;
    goto LABEL_19;
  }
  *((_DWORD *)this + 4) = v10;
  int v26 = sub_1CD0331C0(a2, a3, v11 - v13);
  unsigned int v16 = v13 + 63;
  uint64_t v17 = (v13 + 63) >> 6;
  unsigned int v28 = v15 >> 6;
  if (v13 != 0 && v13 < 0xFFFFFFC1)
  {
    unint64_t v33 = 0;
    if (v17 <= 1) {
      unsigned int v34 = 1;
    }
    else {
      unsigned int v34 = (v13 + 63) >> 6;
    }
    uint64_t v35 = 8 * v34;
    do
    {
      v12[v33 / 8] = a2[v28 + v33 / 8];
      v33 += 8;
    }
    while (v35 != v33);
    int v29 = v15 & 0x3F;
    if ((v15 & 0x3F) != 0 && v17 == 1)
    {
      *v12 >>= v29;
    }
    else if ((v15 & 0x3F) != 0)
    {
      uint64_t v36 = *v12 >> v29;
      void *v12 = v36;
      if (v17 != 1)
      {
        uint64_t v37 = 0;
        do
        {
          unint64_t v38 = &v12[v37++];
          uint64_t *v38 = (v12[v37] << (64 - v29)) | v36;
          uint64_t v36 = v12[v37] >> v29;
          v38[1] = v36;
        }
        while (v17 - 1 != v37);
      }
    }
  }
  else
  {
    int v29 = v15 & 0x3F;
  }
  unsigned int v30 = (v16 & 0xFFFFFFC0) - v29;
  if (v30 < v13)
  {
    unint64_t v39 = (a2[v28 + v17] & (0xFFFFFFFFFFFFFFFFLL >> (v30 - v13))) << v30;
    int v31 = v17 - 1;
    unint64_t v32 = v39 | v12[(v17 - 1)];
    goto LABEL_30;
  }
  if (v30 > v13 && (v13 & 0x3F) != 0)
  {
    int v31 = v17 - 1;
    unint64_t v32 = v12[(v17 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F));
LABEL_30:
    v12[v31] = v32;
  }
LABEL_19:
  if (v17 < v14) {
    bzero((char *)v12 + ((v16 >> 3) & 0x1FFFFFF8), 8 * (v14 + ~v17) + 8);
  }

  return llvm::detail::IEEEFloat::normalize(this, a4, v26);
}

uint64_t llvm::detail::IEEEFloat::convertFromSignExtendedInteger(llvm::detail::IEEEFloat *this, unint64_t *a2, unsigned int a3, int a4, int a5)
{
  if (a4 && (a2[(a3 - 1) & 0x3FFFFFF] & 0x8000000000000000) != 0)
  {
    *((unsigned char *)this + 20) |= 8u;
    operator new[]();
  }
  *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF0 | 2;
  int v8 = 64 - (a3 << 6);
  unsigned int v9 = a3 - 1;
  while (1)
  {
    unint64_t v10 = a2[v9];
    if (v10) {
      break;
    }
    v8 += 64;
    if (--v9 == -1)
    {
      unsigned int v11 = -1;
      goto LABEL_8;
    }
  }
  unsigned int v11 = (__clz(v10) - v8) ^ 0x3F;
LABEL_8:
  unsigned int v12 = v11 + 1;
  unsigned int v13 = (void *)((char *)this + 8);
  unsigned int v14 = *(_DWORD *)(*(void *)this + 8);
  if (v14 - 64 <= 0xFFFFFF7F) {
    unsigned int v13 = (void *)*v13;
  }
  unsigned int v15 = (v14 + 64) >> 6;
  if (v12 < v14)
  {
    *((_DWORD *)this + 4) = v14 - 1;
    unsigned int v16 = v11 + 64;
    LODWORD(v17) = (v11 + 64) >> 6;
    if (v11 <= 0xFFFFFFBF)
    {
      if (v17 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v17;
      }
      unsigned int v19 = a2;
      unsigned int v20 = v13;
      do
      {
        uint64_t v21 = *v19++;
        *v20++ = v21;
        --v18;
      }
      while (v18);
    }
    unsigned int v22 = v16 & 0xFFFFFFC0;
    if ((v16 & 0xFFFFFFC0) < v12)
    {
      int v24 = v17 - 1;
      unint64_t v25 = a2[v17] & (0xFFFFFFFFFFFFFFFFLL >> (v22 - v11 + 63)) | v13[(v17 - 1)];
    }
    else
    {
      if (v22 <= v12) {
        goto LABEL_22;
      }
      char v23 = v12 & 0x3F;
      if ((v12 & 0x3F) == 0) {
        goto LABEL_22;
      }
      int v24 = v17 - 1;
      unint64_t v25 = v13[(v17 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -v23);
    }
    v13[v24] = v25;
LABEL_22:
    int v26 = 0;
    goto LABEL_23;
  }
  *((_DWORD *)this + 4) = v11;
  unsigned int v28 = v12 - v14;
  int v26 = sub_1CD0331C0(a2, a3, v12 - v14);
  unsigned int v16 = v14 + 63;
  uint64_t v17 = (v14 + 63) >> 6;
  unsigned int v29 = v28 >> 6;
  if (v14 != 0 && v14 < 0xFFFFFFC1)
  {
    unint64_t v31 = 0;
    if (v17 <= 1) {
      unsigned int v32 = 1;
    }
    else {
      unsigned int v32 = (v14 + 63) >> 6;
    }
    uint64_t v33 = 8 * v32;
    do
    {
      v13[v31 / 8] = a2[v29 + v31 / 8];
      v31 += 8;
    }
    while (v33 != v31);
    int v30 = v28 & 0x3F;
    if ((v28 & 0x3F) != 0)
    {
      uint64_t v34 = *v13 >> v30;
      *unsigned int v13 = v34;
      if (v17 != 1)
      {
        uint64_t v38 = 0;
        do
        {
          unint64_t v39 = &v13[v38];
          *unint64_t v39 = (v13[(v38 + 1)] << (64 - v30)) | v34;
          uint64_t v34 = v13[(v38 + 1)] >> v30;
          v39[1] = v34;
          ++v38;
        }
        while (v17 - 1 != v38);
      }
    }
  }
  else
  {
    int v30 = v28 & 0x3F;
  }
  unsigned int v35 = (v16 & 0xFFFFFFC0) - v30;
  if (v35 < v14)
  {
    unint64_t v40 = (a2[v29 + v17] & (0xFFFFFFFFFFFFFFFFLL >> (v35 - v14))) << v35;
    int v36 = v17 - 1;
    unint64_t v37 = v40 | v13[(v17 - 1)];
    goto LABEL_42;
  }
  if (v35 > v14 && (v14 & 0x3F) != 0)
  {
    int v36 = v17 - 1;
    unint64_t v37 = v13[(v17 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -(v14 & 0x3F));
LABEL_42:
    v13[v36] = v37;
  }
LABEL_23:
  if (v17 < v15) {
    bzero((char *)v13 + ((v16 >> 3) & 0x1FFFFFF8), 8 * (v15 + ~v17) + 8);
  }

  return llvm::detail::IEEEFloat::normalize(this, a5, v26);
}

uint64_t llvm::detail::IEEEFloat::convertFromZeroExtendedInteger(llvm::detail::IEEEFloat *a1, uint64_t *a2, unsigned int a3, char a4, int a5)
{
  unsigned int v10 = (a3 + 63) >> 6;
  unsigned int v54 = a3;
  llvm::APInt::initFromArray((uint64_t)&__src, a2);
  char v11 = *((unsigned char *)a1 + 20);
  *((unsigned char *)a1 + 20) = v11 & 0xF7;
  if (a4)
  {
    unsigned int v12 = v54;
    if (((unint64_t)a2[(a3 - 1) >> 6] >> (a3 - 1)))
    {
      *((unsigned char *)a1 + 20) = v11 | 8;
      unsigned int v52 = v12;
      if (v12 > 0x40) {
        operator new[]();
      }
      unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
      if (!v12) {
        unint64_t v13 = 0;
      }
      uint64_t v51 = (unint64_t *)(v13 & ~(unint64_t)__src);
      llvm::APInt::operator++((uint64_t)&v51);
      unsigned int v14 = v52;
      unsigned int v15 = v51;
      unsigned int v52 = 0;
      unint64_t __src = v51;
      unsigned int v54 = v14;
      goto LABEL_11;
    }
    unsigned int v14 = v54;
  }
  else
  {
    unsigned int v14 = v54;
  }
  unsigned int v15 = (unint64_t *)__src;
LABEL_11:
  if (v14 >= 0x41) {
    p_src = v15;
  }
  else {
    p_src = (unint64_t *)&__src;
  }
  *((unsigned char *)a1 + 20) = *((unsigned char *)a1 + 20) & 0xF8 | 2;
  int v17 = 64 - (v10 << 6);
  unsigned int v18 = v10 - 1;
  while (1)
  {
    unint64_t v19 = p_src[v18];
    if (v19) {
      break;
    }
    v17 += 64;
    if (--v18 == -1)
    {
      unsigned int v20 = -1;
      goto LABEL_19;
    }
  }
  unsigned int v20 = (__clz(v19) - v17) ^ 0x3F;
LABEL_19:
  unsigned int v21 = v20 + 1;
  unsigned int v22 = (void *)((char *)a1 + 8);
  unsigned int v23 = *(_DWORD *)(*(void *)a1 + 8);
  if (v23 - 64 <= 0xFFFFFF7F) {
    unsigned int v22 = (void *)*v22;
  }
  unsigned int v24 = (v23 + 64) >> 6;
  if (v21 < v23)
  {
    *((_DWORD *)a1 + 4) = v23 - 1;
    unsigned int v25 = v20 + 64;
    LODWORD(v26) = (v20 + 64) >> 6;
    if (v20 <= 0xFFFFFFBF)
    {
      if (v26 <= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = v26;
      }
      unsigned int v28 = p_src;
      unsigned int v29 = v22;
      do
      {
        uint64_t v30 = *v28++;
        *v29++ = v30;
        --v27;
      }
      while (v27);
    }
    unsigned int v31 = v25 & 0xFFFFFFC0;
    if ((v25 & 0xFFFFFFC0) < v21)
    {
      int v33 = v26 - 1;
      unint64_t v34 = p_src[v26] & (0xFFFFFFFFFFFFFFFFLL >> (v31 - v20 + 63)) | v22[(v26 - 1)];
    }
    else
    {
      if (v31 <= v21) {
        goto LABEL_33;
      }
      char v32 = v21 & 0x3F;
      if ((v21 & 0x3F) == 0) {
        goto LABEL_33;
      }
      int v33 = v26 - 1;
      unint64_t v34 = v22[(v26 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -v32);
    }
    v22[v33] = v34;
LABEL_33:
    int v35 = 0;
    goto LABEL_34;
  }
  *((_DWORD *)a1 + 4) = v20;
  unsigned int v38 = v21 - v23;
  int v35 = sub_1CD0331C0(p_src, v10, v21 - v23);
  unsigned int v25 = v23 + 63;
  uint64_t v26 = (v23 + 63) >> 6;
  unsigned int v39 = v38 >> 6;
  if (v23 != 0 && v23 < 0xFFFFFFC1)
  {
    unint64_t v41 = 0;
    if (v26 <= 1) {
      unsigned int v42 = 1;
    }
    else {
      unsigned int v42 = (v23 + 63) >> 6;
    }
    uint64_t v43 = 8 * v42;
    do
    {
      v22[v41 / 8] = p_src[v39 + v41 / 8];
      v41 += 8;
    }
    while (v43 != v41);
    int v40 = v38 & 0x3F;
    if ((v38 & 0x3F) != 0)
    {
      uint64_t v44 = *v22 >> v40;
      *unsigned int v22 = v44;
      if (v26 != 1)
      {
        uint64_t v48 = 0;
        do
        {
          unsigned int v49 = &v22[v48];
          *unsigned int v49 = (v22[(v48 + 1)] << (64 - v40)) | v44;
          uint64_t v44 = v22[(v48 + 1)] >> v40;
          v49[1] = v44;
          ++v48;
        }
        while (v26 - 1 != v48);
      }
    }
  }
  else
  {
    int v40 = v38 & 0x3F;
  }
  unsigned int v45 = (v25 & 0xFFFFFFC0) - v40;
  if (v45 < v23)
  {
    unint64_t v50 = (p_src[v39 + v26] & (0xFFFFFFFFFFFFFFFFLL >> (v45 - v23))) << v45;
    int v46 = v26 - 1;
    unint64_t v47 = v50 | v22[(v26 - 1)];
    goto LABEL_53;
  }
  if (v45 > v23 && (v23 & 0x3F) != 0)
  {
    int v46 = v26 - 1;
    unint64_t v47 = v22[(v26 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -(v23 & 0x3F));
LABEL_53:
    v22[v46] = v47;
  }
LABEL_34:
  if (v26 < v24) {
    bzero((char *)v22 + ((v25 >> 3) & 0x1FFFFFF8), 8 * (v24 + ~v26) + 8);
  }
  uint64_t v36 = llvm::detail::IEEEFloat::normalize(a1, a5, v35);
  if (v14 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  return v36;
}

llvm *llvm::detail::IEEEFloat::convertFromHexadecimalString@<X0>(llvm::detail::IEEEFloat *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)a1 + 20) = *((unsigned char *)a1 + 20) & 0xF8 | 2;
  int v10 = *(_DWORD *)(*(void *)a1 + 8);
  if ((v10 - 64) < 0xFFFFFF80)
  {
    int v35 = (void *)*((void *)a1 + 1);
    *int v35 = 0;
    bzero(v35 + 1, 8 * (((v10 + 64) >> 6) - 2) + 8);
    *((_DWORD *)a1 + 4) = 0;
    unsigned int v12 = (int *)((char *)a1 + 16);
    char v11 = (char *)*((void *)a1 + 1);
  }
  else
  {
    char v11 = (char *)a1 + 8;
    *((_DWORD *)a1 + 4) = 0;
    unsigned int v12 = (int *)((char *)a1 + 16);
    *((void *)a1 + 1) = 0;
  }
  unint64_t v13 = &a2[a3];
  int v40 = 0;
  uint64_t result = sub_1CD03459C((llvm *)&v43, a2, v13, &v40);
  unsigned int v15 = v43;
  if (v44)
  {
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v15;
  }
  else
  {
    if (v43 == v13) {
      goto LABEL_39;
    }
    char v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = (v10 & 0xFFFFFFC0) + 64;
    unint64_t v19 = v40;
    unsigned int v20 = v43;
    while (1)
    {
      uint64_t v21 = 0;
      unsigned int v22 = v20;
      while (1)
      {
        uint64_t result = (llvm *)&v20[v21];
        uint64_t v23 = v20[v21];
        if (v23 != 46) {
          break;
        }
        if (v19 != v13)
        {
          int v33 = "String contains multiple dots";
          goto LABEL_40;
        }
        unint64_t v19 = v22++;
        int v40 = &v20[v21++];
        if (&v20[v21] == v13) {
          goto LABEL_39;
        }
      }
      uint64_t v24 = word_1CFAC4A4C[v23];
      if (v24 == -1) {
        break;
      }
      v20 += v21 + 1;
      if (v18)
      {
        v18 -= 4;
        *(void *)&v11[8 * (v18 >> 6)] |= v24 << v18;
      }
      else
      {
        if ((v16 & 1) == 0)
        {
          if ((unint64_t)(v23 - 57) > 0xFFFFFFFFFFFFFFF6)
          {
            if ((v24 & 0xFFFFFFF7) != 0)
            {
              unint64_t v17 = v17 & 0xFFFFFFFF00000000 | 1;
            }
            else
            {
              uint64_t v36 = v20;
              if (v20 == v13)
              {
LABEL_65:
                int v33 = "Invalid trailing hexadecimal fraction!";
LABEL_40:
                unint64_t v41 = v33;
                __int16 v42 = 259;
                llvm::inconvertibleErrorCode(result);
                operator new();
              }
              while (1)
              {
                uint64_t v37 = *v36;
                if (v37 != 48 && v37 != 46) {
                  break;
                }
                if (++v36 == v13) {
                  goto LABEL_65;
                }
              }
              unint64_t v38 = v17 & 0xFFFFFFFF00000000;
              if (word_1CFAC4A4C[v37] == -1)
              {
                unint64_t v17 = v38 | (2 * (v23 != 48));
              }
              else
              {
                uint64_t v39 = 3;
                if (v23 == 48) {
                  uint64_t v39 = 1;
                }
                unint64_t v17 = v39 | v38;
              }
            }
          }
          else
          {
            unint64_t v17 = v17 & 0xFFFFFFFF00000000 | 3;
          }
        }
        unsigned int v18 = 0;
        char v16 = 1;
      }
      if (v20 == v13) {
        goto LABEL_39;
      }
    }
    unsigned int v25 = &v20[v21];
    if (&v20[v21] == v13)
    {
LABEL_39:
      int v33 = "Hex strings require an exponent";
      goto LABEL_40;
    }
    if (v23 != 112 && v23 != 80)
    {
      int v33 = "Invalid character in significand";
      goto LABEL_40;
    }
    if (v25 == a2 || v19 != v13 && !&v20[v21 + ~(unint64_t)a2])
    {
      int v33 = "Significand has no digits";
      goto LABEL_40;
    }
    if (v25 != v15)
    {
      if (v19 == v13)
      {
        int v40 = &v20[v21];
        LODWORD(v19) = v20 + v21;
      }
      uint64_t v26 = &v20[v21 + 1];
      if (v26 == v13 || ((v27 = *v26, v27 == 43) || v27 == 45) && (uint64_t v26 = &v20[v21 + 2], v26 == v13))
      {
        unint64_t v34 = "Exponent has no digits";
        goto LABEL_48;
      }
      if (v26 != v13)
      {
        int v28 = 0;
        while (1)
        {
          unsigned int v29 = (char)*v26 - 48;
          if (v29 > 9) {
            break;
          }
          int v28 = v29 + 10 * v28;
          if (v28 >= 0x8000) {
            goto LABEL_43;
          }
          if (++v26 == v13) {
            goto LABEL_29;
          }
        }
        unint64_t v34 = "Invalid character in exponent";
LABEL_48:
        unint64_t v41 = v34;
        __int16 v42 = 259;
        llvm::inconvertibleErrorCode(result);
        operator new();
      }
      int v28 = 0;
LABEL_29:
      unsigned int v30 = *(_DWORD *)(*(void *)a1 + 8)
          - (v10 & 0xFFFFFFC0)
          + 4 * (v19 - v15 + ((v19 - v15) >> 31))
          - 65;
      if (v30 != (__int16)v30 || (v27 != 45 ? (v31 = v28) : (v31 = -v28), int v32 = v31 + v30, v32 != (__int16)v32))
      {
LABEL_43:
        if (v27 == 45) {
          int v32 = -32768;
        }
        else {
          int v32 = 0x7FFF;
        }
      }
      int *v12 = v32;
    }
    uint64_t result = (llvm *)llvm::detail::IEEEFloat::normalize(a1, a4, v17);
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = result;
  }
  return result;
}

llvm *sub_1CD03459C(llvm *result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 **a4)
{
  *a4 = a3;
  if (a2 != a3)
  {
    int64_t v4 = a3 - a2;
    while (1)
    {
      int v5 = *a2;
      if (v5 != 48) {
        break;
      }
      if (++a2 == a3) {
        goto LABEL_5;
      }
    }
    if (v5 == 46)
    {
      *a4 = a2;
      if (v4 == 1)
      {
        int v8 = "Significand has no digits";
        __int16 v9 = 259;
        llvm::inconvertibleErrorCode(result);
        operator new();
      }
      unint64_t v6 = a2 + 1;
      while (v6 != a3)
      {
        int v7 = *v6++;
        if (v7 != 48)
        {
          a2 = v6 - 1;
          goto LABEL_13;
        }
      }
LABEL_5:
      a2 = a3;
    }
  }
LABEL_13:
  *((unsigned char *)result + 8) &= ~1u;
  *(void *)uint64_t result = a2;
  return result;
}

void sub_1CD0346C0(llvm *a1)
{
}

uint64_t llvm::detail::IEEEFloat::roundSignificandWithExponent()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  unsigned int v149 = v4;
  int v5 = v1;
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  long long v157 = xmmword_1CFB2E2D0;
  int v158 = 0;
  int v151 = v3;
  BOOL v7 = v3 == 1 || v3 == 4;
  BOOL v155 = v7;
  unint64_t v156 = (llvm::detail::IEEEFloat *)v0;
  unsigned int v8 = (*(_DWORD *)(*(void *)v0 + 8) + 74) >> 6;
  unsigned int v147 = v2;
  if (v2 >= 0) {
    unsigned int v9 = v2;
  }
  else {
    unsigned int v9 = -v2;
  }
  uint64_t v168 = 390625;
  memset(v167, 0, sizeof(v167));
  long long v166 = 0u;
  long long v165 = 0u;
  uint64_t v10 = 1;
  int v164 = 1;
  v159[0] = qword_1CFB2E3C8[v9 & 7];
  uint64_t v152 = v1;
  if (v9 < 8) {
    goto LABEL_30;
  }
  unsigned int v11 = v9 >> 3;
  unsigned int v12 = v159;
  unint64_t v13 = (llvm::APInt *)&v160;
  unsigned int v14 = (llvm::APInt *)&v168;
  unsigned int v15 = -1;
  char v16 = &v164;
  do
  {
    unint64_t v17 = *v16;
    if (v17)
    {
      if ((v11 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      unint64_t v19 = (const unint64_t *)*(&v164 + v15);
      llvm::APInt::tcFullMultiply(v14, (unint64_t *)v14 - (void)v19, (unint64_t *)v14 - (void)v19, v19, v19);
      unsigned int v20 = 2 * v19 - 1;
      if (*((void *)v14 + v20)) {
        unint64_t v17 = (2 * v19);
      }
      else {
        unint64_t v17 = v20;
      }
      int *v16 = v17;
      if ((v11 & 1) == 0)
      {
LABEL_14:
        unsigned int v18 = v12;
        goto LABEL_23;
      }
    }
    llvm::APInt::tcFullMultiply(v13, v12, (unint64_t *)v14, (const unint64_t *)v10, (const unint64_t *)v17);
    unsigned int v21 = v17 + v10 - 1;
    if (*((void *)v13 + v21)) {
      uint64_t v10 = (v17 + v10);
    }
    else {
      uint64_t v10 = v21;
    }
    unsigned int v18 = (unint64_t *)v13;
    unint64_t v13 = (llvm::APInt *)v12;
    unsigned int v12 = v18;
LABEL_23:
    unsigned int v14 = (llvm::APInt *)((char *)v14 + 8 * v17);
    ++v15;
    ++v16;
    BOOL v22 = v11 >= 2;
    v11 >>= 1;
  }
  while (v22);
  if (v18 == v159)
  {
    int v5 = v152;
  }
  else
  {
    int v5 = v152;
    if (v10)
    {
      uint64_t v23 = v10;
      uint64_t v24 = v159;
      do
      {
        unint64_t v25 = *v18++;
        *v24++ = v25;
        --v23;
      }
      while (v23);
    }
  }
LABEL_30:
  int v154 = v10 - 1;
  unsigned int v148 = v10;
  int v153 = 64 - (v10 << 6);
  uint64_t v26 = v147;
  while (2)
  {
    DWORD2(v157) = (v8 << 6) - 1;
    int v27 = *(_DWORD *)(*(void *)v156 + 8);
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v168, (uint64_t)&v157);
    char v171 = *((unsigned char *)v156 + 20) & 8 | v171 & 0xF0 | 3;
    int v28 = v169;
    int v170 = *(_DWORD *)(v168 + 4) - 1;
    int v29 = *(_DWORD *)(v168 + 8);
    unsigned int v30 = v29 - 64;
    int v31 = &v169;
    if ((v29 - 64) < 0xFFFFFF80) {
      int v31 = v169;
    }
    unsigned int v32 = v29 + 64;
    void *v31 = 0;
    if (v32 >= 0x80)
    {
      unsigned int v143 = v32 >> 6;
      uint64_t v144 = (int *)(v28 + 1);
      if (v30 >= 0xFFFFFF80) {
        unsigned int v145 = &v170;
      }
      else {
        unsigned int v145 = v144;
      }
      bzero(v145, 8 * (v143 - 2) + 8);
    }
    unsigned int v33 = (v8 << 6) - 1 - v27;
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v160, (uint64_t)&v157);
    char v171 = v171 & 0xF8 | 2;
    unsigned int v34 = v149 - 1;
    int v35 = 64 - (v149 << 6);
    while (1)
    {
      unint64_t v36 = v5[v34];
      if (v36) {
        break;
      }
      v35 += 64;
      if (--v34 == -1)
      {
        unsigned int v37 = -1;
        goto LABEL_39;
      }
    }
    unsigned int v37 = (__clz(v36) - v35) ^ 0x3F;
LABEL_39:
    unsigned int v38 = *(_DWORD *)(v168 + 8);
    uint64_t v39 = &v169;
    if (v38 - 64 <= 0xFFFFFF7F) {
      uint64_t v39 = v169;
    }
    unsigned int v40 = v37 + 1;
    unsigned int v41 = (v38 + 64) >> 6;
    if (v37 + 1 >= v38)
    {
      int v170 = v37;
      unsigned int v115 = v40 - v38;
      int v52 = sub_1CD0331C0(v5, v149, v40 - v38);
      unsigned int v42 = v38 + 63;
      uint64_t v43 = (v38 + 63) >> 6;
      unsigned int v116 = v115 >> 6;
      if (v38 != 0 && v38 < 0xFFFFFFC1)
      {
        unint64_t v121 = 0;
        if (v43 <= 1) {
          unsigned int v122 = 1;
        }
        else {
          unsigned int v122 = (v38 + 63) >> 6;
        }
        uint64_t v123 = 8 * v122;
        do
        {
          v39[v121 / 8] = v5[v116 + v121 / 8];
          v121 += 8;
        }
        while (v123 != v121);
        int v117 = v115 & 0x3F;
        if ((v115 & 0x3F) != 0)
        {
          uint64_t v124 = *v39 >> v117;
          *uint64_t v39 = v124;
          if (v43 != 1)
          {
            uint64_t v137 = 0;
            do
            {
              uint64_t v138 = &v39[v137];
              *uint64_t v138 = (v39[(v137 + 1)] << (64 - v117)) | v124;
              uint64_t v124 = v39[(v137 + 1)] >> v117;
              v138[1] = v124;
              ++v137;
            }
            while (v43 - 1 != v137);
          }
        }
      }
      else
      {
        int v117 = v115 & 0x3F;
      }
      unsigned int v125 = (v42 & 0xFFFFFFC0) - v117;
      if (v125 < v38)
      {
        unint64_t v141 = (v5[v116 + v43] & (0xFFFFFFFFFFFFFFFFLL >> (v125 - v38))) << v125;
        int v126 = v43 - 1;
        unint64_t v127 = v141 | v39[(v43 - 1)];
      }
      else
      {
        if (v125 <= v38 || (v38 & 0x3F) == 0) {
          goto LABEL_54;
        }
        int v126 = v43 - 1;
        unint64_t v127 = v39[(v43 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -(v38 & 0x3F));
      }
      v39[v126] = v127;
    }
    else
    {
      int v170 = v38 - 1;
      unsigned int v42 = v37 + 64;
      LODWORD(v43) = (v37 + 64) >> 6;
      if (v37 <= 0xFFFFFFBF)
      {
        if (v43 <= 1) {
          uint64_t v44 = 1;
        }
        else {
          uint64_t v44 = v43;
        }
        uint64_t v45 = v5;
        int v46 = v39;
        do
        {
          uint64_t v47 = *v45++;
          *v46++ = v47;
          --v44;
        }
        while (v44);
      }
      unsigned int v48 = v42 & 0xFFFFFFC0;
      if ((v42 & 0xFFFFFFC0) < v40)
      {
        int v50 = v43 - 1;
        unint64_t v51 = v5[v43] & (0xFFFFFFFFFFFFFFFFLL >> (v48 - v37 + 63)) | v39[(v43 - 1)];
LABEL_52:
        v39[v50] = v51;
      }
      else if (v48 > v40)
      {
        char v49 = v40 & 0x3F;
        if ((v40 & 0x3F) != 0)
        {
          int v50 = v43 - 1;
          unint64_t v51 = v39[(v43 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -v49);
          goto LABEL_52;
        }
      }
      int v52 = 0;
    }
LABEL_54:
    if (v43 < v41) {
      bzero((char *)v39 + ((v42 >> 3) & 0x1FFFFFF8), 8 * (v41 + ~v43) + 8);
    }
    int v53 = llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v168, 1, v52);
    char v163 = v163 & 0xF8 | 2;
    int v54 = v154;
    int v55 = v153;
    while (1)
    {
      unint64_t v56 = v159[v54];
      if (v56) {
        break;
      }
      v55 += 64;
      if (--v54 == -1)
      {
        unsigned int v57 = -1;
        goto LABEL_61;
      }
    }
    unsigned int v57 = (__clz(v56) - v55) ^ 0x3F;
LABEL_61:
    unsigned int v58 = *(_DWORD *)(v160 + 8);
    unsigned int v59 = &v161;
    if (v58 - 64 <= 0xFFFFFF7F) {
      unsigned int v59 = v161;
    }
    unsigned int v60 = v57 + 1;
    unsigned int v61 = (v58 + 64) >> 6;
    if (v57 + 1 >= v58)
    {
      unsigned int v162 = v57;
      unsigned int v118 = v60 - v58;
      int v72 = sub_1CD0331C0(v159, v148, v60 - v58);
      unsigned int v62 = v58 + 63;
      uint64_t v63 = (v58 + 63) >> 6;
      unsigned int v119 = v118 >> 6;
      if (v58 != 0 && v58 < 0xFFFFFFC1)
      {
        unint64_t v128 = 0;
        if (v63 <= 1) {
          unsigned int v129 = 1;
        }
        else {
          unsigned int v129 = (v58 + 63) >> 6;
        }
        uint64_t v130 = 8 * v129;
        do
        {
          v59[v128 / 8] = v159[v119 + v128 / 8];
          v128 += 8;
        }
        while (v130 != v128);
        int v120 = v118 & 0x3F;
        if ((v118 & 0x3F) != 0)
        {
          uint64_t v131 = *v59 >> v120;
          *unsigned int v59 = v131;
          if (v63 != 1)
          {
            uint64_t v139 = 0;
            do
            {
              uint64_t v140 = &v59[v139];
              *uint64_t v140 = (v59[(v139 + 1)] << (64 - v120)) | v131;
              uint64_t v131 = v59[(v139 + 1)] >> v120;
              v140[1] = v131;
              ++v139;
            }
            while (v63 - 1 != v139);
          }
        }
      }
      else
      {
        int v120 = v118 & 0x3F;
      }
      unsigned int v132 = (v62 & 0xFFFFFFC0) - v120;
      if (v132 < v58)
      {
        unint64_t v142 = (v159[v119 + v63] & (0xFFFFFFFFFFFFFFFFLL >> (v132 - v58))) << v132;
        int v133 = v63 - 1;
        unint64_t v134 = v142 | v59[(v63 - 1)];
      }
      else
      {
        if (v132 <= v58 || (v58 & 0x3F) == 0) {
          goto LABEL_76;
        }
        int v133 = v63 - 1;
        unint64_t v134 = v59[(v63 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -(v58 & 0x3F));
      }
      v59[v133] = v134;
      goto LABEL_76;
    }
    unsigned int v162 = v58 - 1;
    unsigned int v62 = v57 + 64;
    LODWORD(v63) = (v57 + 64) >> 6;
    if (v57 <= 0xFFFFFFBF)
    {
      if (v63 <= 1) {
        uint64_t v64 = 1;
      }
      else {
        uint64_t v64 = v63;
      }
      unint64_t v65 = v159;
      int v66 = v59;
      do
      {
        uint64_t v67 = *v65++;
        *v66++ = v67;
        --v64;
      }
      while (v64);
    }
    unsigned int v68 = v62 & 0xFFFFFFC0;
    if ((v62 & 0xFFFFFFC0) < v60)
    {
      int v70 = v63 - 1;
      unint64_t v71 = v159[v63] & (0xFFFFFFFFFFFFFFFFLL >> (v68 - v57 + 63)) | v59[(v63 - 1)];
LABEL_74:
      v59[v70] = v71;
    }
    else if (v68 > v60)
    {
      char v69 = v60 & 0x3F;
      if ((v60 & 0x3F) != 0)
      {
        int v70 = v63 - 1;
        unint64_t v71 = v59[(v63 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -v69);
        goto LABEL_74;
      }
    }
    int v72 = 0;
LABEL_76:
    if (v63 < v61) {
      bzero((char *)v59 + ((v62 >> 3) & 0x1FFFFFF8), 8 * (v61 + ~v63) + 8);
    }
    int v73 = llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v160, 1, v72);
    v170 += v26;
    if ((v26 & 0x80000000) != 0)
    {
      int v74 = llvm::detail::IEEEFloat::divideSignificand((llvm::detail::IEEEFloat *)&v168, (const llvm::detail::IEEEFloat *)&v160);
      int v77 = *(_DWORD *)(*(void *)v156 + 4);
      unsigned int v76 = v33;
      int v78 = v77 - v170;
      if (v77 > v170)
      {
        unsigned int v76 = v78 + v33;
        if (v78 + v33 >= DWORD2(v157)) {
          unsigned int v33 = DWORD2(v157);
        }
        else {
          v33 += v78;
        }
      }
      int v75 = 2 * ((v73 | v74) != 0);
    }
    else
    {
      int v74 = llvm::detail::IEEEFloat::multiplySignificand((llvm::detail::IEEEFloat *)&v168, (const llvm::detail::IEEEFloat *)&v160);
      int v75 = v73 != 0;
      unsigned int v76 = v33;
    }
    BOOL v79 = v74 != 0;
    if (v53) {
      ++v75;
    }
    unsigned int v80 = 2 * v79;
    unsigned int v81 = v79 | (2 * v75);
    if (v75) {
      unint64_t v82 = v81;
    }
    else {
      unint64_t v82 = v80;
    }
    int v83 = *(_DWORD *)(v168 + 8);
    uint64_t v84 = (uint64_t *)&v169;
    if ((v83 - 64) < 0xFFFFFF80) {
      uint64_t v84 = v169;
    }
    unsigned int v85 = (v33 - 1) >> 6;
    unint64_t v86 = v84[v85] & (0xFFFFFFFFFFFFFFFFLL >> ((v33 - 1) & 0x3F ^ 0x3F));
    uint64_t v87 = 1 << (v33 - 1);
    if (!v155) {
      uint64_t v87 = 0;
    }
    if (v33 - 1 > 0x3F)
    {
      if (v86 == v87)
      {
        unsigned int v89 = v85 - 1;
        while (v89)
        {
          if (v84[v89--]) {
            goto LABEL_107;
          }
        }
        uint64_t v88 = *v84;
      }
      else if (v86 == v87 - 1)
      {
        unsigned int v91 = v85 - 1;
        while (v91)
        {
          uint64_t v92 = v84[v91--];
          if (v92 != -1) {
            goto LABEL_107;
          }
        }
        uint64_t v88 = -*v84;
      }
      else
      {
LABEL_107:
        uint64_t v88 = -1;
      }
    }
    else
    {
      uint64_t v88 = v86 - v87;
      if ((uint64_t)(v86 - v87) < 0) {
        uint64_t v88 = v87 - v86;
      }
    }
    unint64_t v93 = 2 * v88;
    if (2 * v88 >= v82)
    {
      uint64_t v94 = v26;
      int v95 = *(_DWORD *)(*(void *)v156 + 8);
      uint64_t v96 = (void *)((char *)v156 + 8);
      if ((v95 - 64) <= 0xFFFFFF7F) {
        uint64_t v96 = (void *)*((void *)v156 + 1);
      }
      int v97 = DWORD2(v157);
      unsigned int v98 = DWORD2(v157) - v33;
      unsigned int v99 = DWORD2(v157) - v33 + 63;
      uint64_t v100 = v99 >> 6;
      unsigned int v101 = v33 >> 6;
      if (v99 != 63 && DWORD2(v157) - v33 < 0xFFFFFFC1)
      {
        unint64_t v103 = 0;
        if (v100 <= 1) {
          unsigned int v104 = 1;
        }
        else {
          unsigned int v104 = v99 >> 6;
        }
        uint64_t v105 = 8 * v104;
        do
        {
          v96[v103 / 8] = v84[v101 + v103 / 8];
          v103 += 8;
        }
        while (v105 != v103);
        int v102 = v33 & 0x3F;
        if ((v33 & 0x3F) != 0)
        {
          uint64_t v106 = *v96 >> v102;
          *uint64_t v96 = v106;
          if (v100 != 1)
          {
            uint64_t v135 = 0;
            do
            {
              int v136 = &v96[v135];
              uint64_t *v136 = (v96[(v135 + 1)] << (64 - v102)) | v106;
              uint64_t v106 = v96[(v135 + 1)] >> v102;
              v136[1] = v106;
              ++v135;
            }
            while (v100 - 1 != v135);
          }
        }
      }
      else
      {
        int v102 = v33 & 0x3F;
      }
      unsigned int v107 = (v99 & 0xFFFFFFC0) - v102;
      char v108 = v107 - v98;
      if (v107 < v98)
      {
        int v110 = v100 - 1;
        unint64_t v111 = ((v84[v100 + v101] & (0xFFFFFFFFFFFFFFFFLL >> v108)) << v107) | v96[(v100 - 1)];
LABEL_126:
        v96[v110] = v111;
      }
      else if (v107 > v98)
      {
        char v109 = v98 & 0x3F;
        if ((v98 & 0x3F) != 0)
        {
          int v110 = v100 - 1;
          unint64_t v111 = v96[(v100 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -v109);
          goto LABEL_126;
        }
      }
      unsigned int v112 = (v95 + 64) >> 6;
      if (v100 < v112) {
        bzero((char *)v96 + ((v99 >> 3) & 0x1FFFFFF8), 8 * (v112 + ~v100) + 8);
      }
      *((_DWORD *)v156 + 4) = v95 + v33 - v97 + v170;
      if ((v83 - 64) >= 0xFFFFFF80) {
        unsigned int v113 = (unint64_t *)&v169;
      }
      else {
        unsigned int v113 = v169;
      }
      int v114 = sub_1CD0331C0(v113, (v83 + 64) >> 6, v76);
      unsigned int v150 = llvm::detail::IEEEFloat::normalize(v156, v151, v114);
      uint64_t v26 = v94;
      int v5 = v152;
    }
    if ((*(_DWORD *)(v160 + 8) - 64) <= 0xFFFFFF7F && v161) {
      MEMORY[0x1D25D9CB0](v161, 0x1000C8000313F17);
    }
    if ((*(_DWORD *)(v168 + 8) - 64) <= 0xFFFFFF7F && v169) {
      MEMORY[0x1D25D9CB0](v169, 0x1000C8000313F17);
    }
    v8 *= 2;
    if (v93 < v82) {
      continue;
    }
    return v150;
  }
}