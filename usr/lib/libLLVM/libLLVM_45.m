uint64_t sub_1CCE30BFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;

  v2 = *(void *)(a1 + 288);
  if (v2)
  {
    v3 = *(void *)(a1 + 296);
    v4 = *(void **)(a1 + 288);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 168);
        if ((void *)(v3 - 152) != v5) {
          free(v5);
        }
        v3 -= 176;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 288);
    }
    *(void *)(a1 + 296) = v2;
    operator delete(v4);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 264), 8);
  v6 = *(void **)(a1 + 120);
  if (v6 != (void *)(a1 + 136)) {
    free(v6);
  }
  if (*(unsigned char *)(a1 + 104))
  {
    sub_1CC009394(a1 + 80);
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 80), 8);
    *(unsigned char *)(a1 + 104) = 0;
  }
  v7 = *(_DWORD *)(a1 + 72);
  v8 = *(void **)(a1 + 56);
  if (v7)
  {
    v9 = &v8[7 * v7];
    do
    {
      v10 = v8[3];
      if (v10 != -8192 && v10 != -4096 && v10 != 0)
      {
        v12 = v8[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)v12 = v8[2];
        v13 = (unint64_t *)v8[2];
        if (v13)
        {
          *v13 = *v13 & 7 | v12;
        }
        else
        {
          v14 = v8[3];
          v15 = ***(int32x2_t ****)v14;
          v16 = (unint64_t)v15[303];
          if (v16 <= v12)
          {
            v17 = v15[305].u32[0];
            if (v16 + 16 * v17 > v12)
            {
              v18 = v17 - 1;
              LODWORD(v19) = v18 & ((v14 >> 4) ^ (v14 >> 9));
              v20 = (uint64_t *)(v16 + 16 * v19);
              v21 = *v20;
              if (v14 == *v20)
              {
LABEL_30:
                *v20 = -8192;
                v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                v14 = v8[3];
              }
              else
              {
                v22 = 1;
                while (v21 != -4096)
                {
                  v23 = v19 + v22++;
                  v19 = v23 & v18;
                  v21 = *(void *)(v16 + 16 * v19);
                  if (v14 == v21)
                  {
                    v20 = (uint64_t *)(v16 + 16 * v19);
                    goto LABEL_30;
                  }
                }
              }
              *(unsigned char *)(v14 + 17) &= ~1u;
            }
          }
        }
      }
      v8 += 7;
    }
    while (v8 != v9);
    v8 = *(void **)(a1 + 56);
  }
  MEMORY[0x1D25D9CD0](v8, 8);
  return a1;
}

void sub_1CCE30FE8(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, a2);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CCE310A0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF6D00;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F263FBC0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF6D08, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE30FE8;
    v5[1] = &PassRegistry;
    v4 = v5;
    std::__call_once(&qword_1EBCF6D08, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCE31150()
{
}

uint64_t sub_1CCE311EC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF6D01;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F263FC60;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF6D10, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE31150;
    v5[1] = &PassRegistry;
    v4 = v5;
    std::__call_once(&qword_1EBCF6D10, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t *sub_1CCE3129C(uint64_t *result)
{
  result[1] = 0;
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = *result;
    uint64_t v3 = 56 * v1;
    v4 = (void *)(*result + 16);
    do
    {
      *(v4 - 1) = 2;
      void *v4 = 0;
      v4[1] = -4096;
      v4[2] = 0;
      *(v4 - 2) = &unk_1F263FB98;
      v4 += 7;
      v2 += 56;
      v3 -= 56;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1CCE312F8(void *a1)
{
  uint64_t v1 = a1[1];
  unint64_t v33 = v1 & 6;
  v34 = 0;
  uint64_t v2 = (void ***)a1[3];
  v35 = v2;
  if (v2 != (void ***)-8192 && v2 != (void ***)-4096 && v2 != 0)
  {
    v34 = *(unint64_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(v1 & 0xFFFFFFFFFFFFFFF8) = &v33;
    unint64_t v33 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (v34) {
      unint64_t *v34 = *v34 & 7 | (unint64_t)&v34;
    }
  }
  uint64_t v4 = a1[4];
  uint64_t v36 = v4;
  v37 = 0;
  uint64_t result = sub_1CCE317CC(*(void *)v4, *(_DWORD *)(v4 + 16), (uint64_t)v35, &v37);
  if (result)
  {
    v6 = v37;
    uint64_t v7 = v37[3];
    if (v7 != -8192)
    {
      if (v7 != -4096 && v7 != 0)
      {
        unint64_t v21 = v37[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v21 = v37[2];
        v22 = (unint64_t *)v6[2];
        if (v22)
        {
          unint64_t *v22 = *v22 & 7 | v21;
        }
        else
        {
          uint64_t v23 = v6[3];
          v24 = ***(int32x2_t ****)v23;
          unint64_t v25 = (unint64_t)v24[303];
          if (v25 <= v21)
          {
            uint64_t v26 = v24[305].u32[0];
            if (v25 + 16 * v26 > v21)
            {
              unsigned int v27 = v26 - 1;
              LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
              v29 = (uint64_t *)(v25 + 16 * v28);
              uint64_t v30 = *v29;
              if (v23 == *v29)
              {
LABEL_42:
                uint64_t *v29 = -8192;
                v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v23 = v6[3];
              }
              else
              {
                int v31 = 1;
                while (v30 != -4096)
                {
                  int v32 = v28 + v31++;
                  uint64_t v28 = v32 & v27;
                  uint64_t v30 = *(void *)(v25 + 16 * v28);
                  if (v23 == v30)
                  {
                    v29 = (uint64_t *)(v25 + 16 * v28);
                    goto LABEL_42;
                  }
                }
              }
              *(unsigned char *)(v23 + 17) &= ~1u;
            }
          }
        }
      }
      v6[3] = -8192;
    }
    v6[4] = 0;
    *(int32x2_t *)(v4 + 8) = vadd_s32(*(int32x2_t *)(v4 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v35 != (void ***)-8192 && v35 != (void ***)-4096 && v35 != 0)
  {
    unint64_t v10 = v33 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v33 & 0xFFFFFFFFFFFFFFF8) = v34;
    if (v34)
    {
      unint64_t *v34 = *v34 & 7 | v10;
    }
    else
    {
      v11 = v35;
      v12 = (int32x2_t *)***v35;
      unint64_t v13 = (unint64_t)v12[303];
      if (v13 <= v10)
      {
        uint64_t v14 = v12[305].u32[0];
        if (v13 + 16 * v14 > v10)
        {
          unsigned int v15 = v14 - 1;
          LODWORD(v16) = v15 & ((v35 >> 4) ^ (v35 >> 9));
          v17 = (void *)(v13 + 16 * v16);
          v18 = (void ***)*v17;
          if (v35 == (void ***)*v17)
          {
LABEL_32:
            void *v17 = -8192;
            v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
            v11 = v35;
          }
          else
          {
            int v19 = 1;
            while (v18 != (void ***)-4096)
            {
              int v20 = v16 + v19++;
              uint64_t v16 = v20 & v15;
              v18 = *(void ****)(v13 + 16 * v16);
              if (v35 == v18)
              {
                v17 = (void *)(v13 + 16 * v16);
                goto LABEL_32;
              }
            }
          }
          *((unsigned char *)v11 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CCE315B4(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v26 = v3 & 6;
  unsigned int v27 = 0;
  uint64_t v4 = (void ***)a1[3];
  uint64_t v28 = v4;
  if (v4 != (void ***)-8192 && v4 != (void ***)-4096 && v4 != 0)
  {
    unsigned int v27 = *(unint64_t **)(v3 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(v3 & 0xFFFFFFFFFFFFFFF8) = &v26;
    unint64_t v26 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (v27) {
      *unsigned int v27 = *v27 & 7 | (unint64_t)&v27;
    }
  }
  uint64_t v6 = a1[4];
  unint64_t v25 = &unk_1F263FB98;
  uint64_t v29 = v6;
  v23[0] = 0;
  uint64_t result = sub_1CCE317CC(*(void *)v6, *(_DWORD *)(v6 + 16), (uint64_t)v28, v23);
  if (result)
  {
    uint64_t v8 = v23[0];
    uint64_t v9 = *(void *)v6;
    unsigned int v10 = *(_DWORD *)(v6 + 16);
  }
  else
  {
    uint64_t v9 = *(void *)v6;
    unsigned int v10 = *(_DWORD *)(v6 + 16);
    uint64_t v8 = *(void *)v6 + 56 * v10;
  }
  if (v9 + 56 * v10 != v8)
  {
    v23[1] = *(void *)(v8 + 40);
    int v24 = *(_DWORD *)(v8 + 48);
    sub_1CCE31864((int32x2_t *)v6, (void *)v8);
    v23[0] = a2;
    uint64_t result = sub_1CCE3196C((uint64_t)v22, v29, (uint64_t)v23);
  }
  if (v28 != (void ***)-8192 && v28 != (void ***)-4096 && v28)
  {
    unint64_t v11 = v26 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v26 & 0xFFFFFFFFFFFFFFF8) = v27;
    if (v27)
    {
      *unsigned int v27 = *v27 & 7 | v11;
    }
    else
    {
      v12 = v28;
      unint64_t v13 = (int32x2_t *)***v28;
      unint64_t v14 = (unint64_t)v13[303];
      if (v14 <= v11)
      {
        uint64_t v15 = v13[305].u32[0];
        if (v14 + 16 * v15 > v11)
        {
          unsigned int v16 = v15 - 1;
          LODWORD(v17) = v16 & ((v28 >> 4) ^ (v28 >> 9));
          v18 = (void *)(v14 + 16 * v17);
          int v19 = (void ***)*v18;
          if (v28 == (void ***)*v18)
          {
LABEL_24:
            void *v18 = -8192;
            v13[304] = vadd_s32(v13[304], (int32x2_t)0x1FFFFFFFFLL);
            v12 = v28;
          }
          else
          {
            int v20 = 1;
            while (v19 != (void ***)-4096)
            {
              int v21 = v17 + v20++;
              uint64_t v17 = v21 & v16;
              int v19 = *(void ****)(v14 + 16 * v17);
              if (v28 == v19)
              {
                v18 = (void *)(v14 + 16 * v17);
                goto LABEL_24;
              }
            }
          }
          *((unsigned char *)v12 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CCE317CC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = a1 + 56 * v5;
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = a1 + 56 * (v13 & v4);
        uint64_t v7 = *(void *)(v6 + 24);
        uint64_t v8 = 1;
        if (v7 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

int32x2_t sub_1CCE31864(int32x2_t *a1, void *a2)
{
  uint64_t v2 = a2[3];
  if (v2 != -8192)
  {
    if (v2 != -4096 && v2 != 0)
    {
      unint64_t v5 = a2[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v5 = a2[2];
      uint64_t v6 = (unint64_t *)a2[2];
      if (v6)
      {
        unint64_t *v6 = *v6 & 7 | v5;
      }
      else
      {
        uint64_t v7 = a2[3];
        uint64_t v8 = ***(int32x2_t ****)v7;
        unint64_t v9 = (unint64_t)v8[303];
        if (v9 <= v5)
        {
          uint64_t v10 = v8[305].u32[0];
          if (v9 + 16 * v10 > v5)
          {
            unsigned int v11 = v10 - 1;
            LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
            unsigned int v13 = (uint64_t *)(v9 + 16 * v12);
            uint64_t v14 = *v13;
            if (v7 == *v13)
            {
LABEL_17:
              *unsigned int v13 = -8192;
              v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v7 = a2[3];
            }
            else
            {
              int v15 = 1;
              while (v14 != -4096)
              {
                int v16 = v12 + v15++;
                uint64_t v12 = v16 & v11;
                uint64_t v14 = *(void *)(v9 + 16 * v12);
                if (v7 == v14)
                {
                  unsigned int v13 = (uint64_t *)(v9 + 16 * v12);
                  goto LABEL_17;
                }
              }
            }
            *(unsigned char *)(v7 + 17) &= ~1u;
          }
        }
      }
    }
    a2[3] = -8192;
  }
  a2[4] = 0;
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t sub_1CCE3196C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  uint64_t v7 = 2;
  uint64_t v58 = 2;
  v59 = 0;
  v60 = (int32x2_t ****)v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v58);
    uint64_t v7 = v58;
    uint64_t v6 = (uint64_t)v60;
  }
  uint64_t v61 = a2;
  unint64_t v63 = v7 & 6;
  v64 = 0;
  v65 = (int32x2_t ****)v6;
  if (v6 == -8192 || v6 == -4096)
  {
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v9 = a2;
    if (v6)
    {
      v64 = *(unint64_t **)(v7 & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v7 & 0xFFFFFFFFFFFFFFF8) = &v63;
      unint64_t v63 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (v64) {
        unint64_t *v64 = *v64 & 7 | (unint64_t)&v64;
      }
      uint64_t v9 = v61;
      uint64_t v6 = (uint64_t)v65;
    }
  }
  v62 = &unk_1F263FB98;
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v66 = v9;
  uint64_t v67 = v10;
  int v68 = *(_DWORD *)(a3 + 16);
  uint64_t v69 = 0;
  uint64_t result = sub_1CCE317CC(*(void *)a2, *(_DWORD *)(a2 + 16), v6, &v69);
  uint64_t v12 = v69;
  if (result)
  {
    char v13 = 0;
  }
  else
  {
    uint64_t result = sub_1CCE31E24(a2, (uint64_t)&v62, v69);
    uint64_t v12 = result;
    uint64_t v14 = *(int32x2_t *****)(result + 24);
    int v15 = v65;
    if (v14 != v65)
    {
      if (v14 != (int32x2_t ****)-4096 && v14 && v14 != (int32x2_t ****)-8192)
      {
        unint64_t v34 = *(void *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v34 = *(void *)(result + 16);
        v35 = *(unint64_t **)(result + 16);
        if (v35)
        {
          unint64_t *v35 = *v35 & 7 | v34;
        }
        else
        {
          uint64_t v36 = *(void *)(result + 24);
          v37 = ***(int32x2_t ****)v36;
          unint64_t v38 = (unint64_t)v37[303];
          if (v38 <= v34)
          {
            uint64_t v39 = v37[305].u32[0];
            if (v38 + 16 * v39 > v34)
            {
              unsigned int v40 = v39 - 1;
              LODWORD(v41) = v40 & ((v36 >> 4) ^ (v36 >> 9));
              v42 = (uint64_t *)(v38 + 16 * v41);
              uint64_t v43 = *v42;
              if (v36 == *v42)
              {
LABEL_49:
                uint64_t *v42 = -8192;
                v37[304] = vadd_s32(v37[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v36 = *(void *)(result + 24);
              }
              else
              {
                int v44 = 1;
                while (v43 != -4096)
                {
                  int v45 = v41 + v44++;
                  uint64_t v41 = v45 & v40;
                  uint64_t v43 = *(void *)(v38 + 16 * v41);
                  if (v36 == v43)
                  {
                    v42 = (uint64_t *)(v38 + 16 * v41);
                    goto LABEL_49;
                  }
                }
              }
              *(unsigned char *)(v36 + 17) &= ~1u;
            }
          }
        }
        int v15 = v65;
      }
      *(void *)(result + 24) = v15;
      if (v15 != (int32x2_t ****)-4096 && v15 != (int32x2_t ****)-8192 && v15 != 0)
      {
        unint64_t v17 = v63;
        v18 = (void *)(v63 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(result + 16) = *(void *)(v63 & 0xFFFFFFFFFFFFFFF8);
        void *v18 = result + 8;
        *(void *)(result + 8) = v17 & 0xFFFFFFFFFFFFFFF8 | *(void *)(result + 8) & 7;
        int v19 = *(uint64_t **)(result + 16);
        if (v19) {
          *int v19 = *v19 & 7 | (result + 16);
        }
      }
    }
    *(void *)(result + 32) = v66;
    uint64_t v20 = v67;
    *(_DWORD *)(result + 48) = v68;
    *(void *)(result + 40) = v20;
    char v13 = 1;
  }
  uint64_t v21 = *(void *)a2;
  unsigned int v22 = *(_DWORD *)(a2 + 16);
  if (v65 != (int32x2_t ****)-8192 && v65 != (int32x2_t ****)-4096 && v65)
  {
    unint64_t v23 = v63 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v63 & 0xFFFFFFFFFFFFFFF8) = v64;
    if (v64)
    {
      unint64_t *v64 = *v64 & 7 | v23;
    }
    else
    {
      int v24 = v65;
      unint64_t v25 = ***v65;
      unint64_t v26 = (unint64_t)v25[303];
      if (v26 <= v23)
      {
        uint64_t v27 = v25[305].u32[0];
        if (v26 + 16 * v27 > v23)
        {
          unsigned int v28 = v27 - 1;
          LODWORD(v29) = v28 & ((v65 >> 4) ^ (v65 >> 9));
          uint64_t v30 = (int32x2_t *****)(v26 + 16 * v29);
          int v31 = *v30;
          if (v65 == *v30)
          {
LABEL_37:
            *uint64_t v30 = (int32x2_t ****)-8192;
            v25[304] = vadd_s32(v25[304], (int32x2_t)0x1FFFFFFFFLL);
            int v24 = v65;
          }
          else
          {
            int v32 = 1;
            while (v31 != (int32x2_t ****)-4096)
            {
              int v33 = v29 + v32++;
              uint64_t v29 = v33 & v28;
              int v31 = *(int32x2_t *****)(v26 + 16 * v29);
              if (v65 == v31)
              {
                uint64_t v30 = (int32x2_t *****)(v26 + 16 * v29);
                goto LABEL_37;
              }
            }
          }
          *((unsigned char *)v24 + 17) &= ~1u;
        }
      }
    }
  }
  if (v60 != (int32x2_t ****)-8192 && v60 != (int32x2_t ****)-4096 && v60 != 0)
  {
    unint64_t v47 = v58 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v58 & 0xFFFFFFFFFFFFFFF8) = v59;
    if (v59)
    {
      unint64_t *v59 = *v59 & 7 | v47;
    }
    else
    {
      v48 = v60;
      v49 = ***v60;
      unint64_t v50 = (unint64_t)v49[303];
      if (v50 <= v47)
      {
        uint64_t v51 = v49[305].u32[0];
        if (v50 + 16 * v51 > v47)
        {
          unsigned int v52 = v51 - 1;
          LODWORD(v53) = v52 & ((v60 >> 4) ^ (v60 >> 9));
          v54 = (int32x2_t *****)(v50 + 16 * v53);
          v55 = *v54;
          if (v60 == *v54)
          {
LABEL_67:
            *v54 = (int32x2_t ****)-8192;
            v49[304] = vadd_s32(v49[304], (int32x2_t)0x1FFFFFFFFLL);
            v48 = v60;
          }
          else
          {
            int v56 = 1;
            while (v55 != (int32x2_t ****)-4096)
            {
              int v57 = v53 + v56++;
              uint64_t v53 = v57 & v52;
              v55 = *(int32x2_t *****)(v50 + 16 * v53);
              if (v60 == v55)
              {
                v54 = (int32x2_t *****)(v50 + 16 * v53);
                goto LABEL_67;
              }
            }
          }
          *((unsigned char *)v48 + 17) &= ~1u;
        }
      }
    }
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v21 + 56 * v22;
  *(unsigned char *)(a1 + 16) = v13;
  return result;
}

uint64_t sub_1CCE31E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v75 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  *(void *)a1 = operator new(56 * v13, (std::align_val_t)8uLL);
  if (v9)
  {
    sub_1CCE3129C((uint64_t *)a1);
    uint64_t v82 = 2;
    v83 = 0;
    uint64_t v84 = -4096;
    uint64_t v85 = 0;
    uint64_t v80 = 0;
    v81 = &unk_1F263FB98;
    uint64_t v77 = 2;
    v78 = 0;
    uint64_t v79 = -8192;
    v76[1] = &unk_1F263FB98;
    if (v6)
    {
      uint64_t v14 = v9 + 56 * v6;
      uint64_t v15 = v9;
      do
      {
        uint64_t v16 = *(void *)(v15 + 24);
        if (v16 != v84 && v16 != v79)
        {
          v76[0] = 0;
          sub_1CCE317CC(*(void *)a1, *(_DWORD *)(a1 + 16), v16, v76);
          uint64_t v18 = v76[0];
          uint64_t v19 = *(void *)(v76[0] + 24);
          uint64_t v20 = *(void *)(v15 + 24);
          if (v19 != v20)
          {
            BOOL v21 = v19 == -4096 || v19 == 0;
            if (!v21 && v19 != -8192)
            {
              unint64_t v39 = *(void *)(v76[0] + 8) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v39 = *(void *)(v76[0] + 16);
              unsigned int v40 = *(unint64_t **)(v18 + 16);
              if (v40)
              {
                *unsigned int v40 = *v40 & 7 | v39;
              }
              else
              {
                uint64_t v41 = *(void *)(v18 + 24);
                v42 = ***(int32x2_t ****)v41;
                unint64_t v43 = (unint64_t)v42[303];
                if (v43 <= v39)
                {
                  uint64_t v44 = v42[305].u32[0];
                  if (v43 + 16 * v44 > v39)
                  {
                    unsigned int v45 = v44 - 1;
                    LODWORD(v46) = v45 & ((v41 >> 4) ^ (v41 >> 9));
                    unint64_t v47 = (uint64_t *)(v43 + 16 * v46);
                    uint64_t v48 = *v47;
                    if (v41 == *v47)
                    {
LABEL_58:
                      *unint64_t v47 = -8192;
                      v42[304] = vadd_s32(v42[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v41 = *(void *)(v18 + 24);
                    }
                    else
                    {
                      int v49 = 1;
                      while (v48 != -4096)
                      {
                        int v50 = v46 + v49++;
                        uint64_t v46 = v50 & v45;
                        uint64_t v48 = *(void *)(v43 + 16 * v46);
                        if (v41 == v48)
                        {
                          unint64_t v47 = (uint64_t *)(v43 + 16 * v46);
                          goto LABEL_58;
                        }
                      }
                    }
                    *(unsigned char *)(v41 + 17) &= ~1u;
                  }
                }
              }
              uint64_t v20 = *(void *)(v15 + 24);
            }
            *(void *)(v18 + 24) = v20;
            if (v20 != -4096 && v20 != -8192 && v20 != 0)
            {
              uint64_t v23 = *(void *)(v15 + 8);
              *(void *)(v18 + 16) = *(void *)(v23 & 0xFFFFFFFFFFFFFFF8);
              *(void *)(v23 & 0xFFFFFFFFFFFFFFF8) = v18 + 8;
              *(void *)(v18 + 8) = v23 & 0xFFFFFFFFFFFFFFF8 | *(void *)(v18 + 8) & 7;
              int v24 = *(uint64_t **)(v18 + 16);
              if (v24) {
                uint64_t *v24 = *v24 & 7 | (v18 + 16);
              }
            }
          }
          *(void *)(v18 + 32) = *(void *)(v15 + 32);
          uint64_t v25 = *(void *)(v15 + 40);
          *(_DWORD *)(v18 + 48) = *(_DWORD *)(v15 + 48);
          *(void *)(v18 + 40) = v25;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v16 = *(void *)(v15 + 24);
        }
        if (v16 != -8192 && v16 != -4096 && v16 != 0)
        {
          unint64_t v27 = *(void *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v27 = *(void *)(v15 + 16);
          unsigned int v28 = *(unint64_t **)(v15 + 16);
          if (v28)
          {
            *unsigned int v28 = *v28 & 7 | v27;
          }
          else
          {
            uint64_t v29 = *(void *)(v15 + 24);
            uint64_t v30 = ***(int32x2_t ****)v29;
            unint64_t v31 = (unint64_t)v30[303];
            if (v31 <= v27)
            {
              uint64_t v32 = v30[305].u32[0];
              if (v31 + 16 * v32 > v27)
              {
                unsigned int v33 = v32 - 1;
                LODWORD(v34) = v33 & ((v29 >> 4) ^ (v29 >> 9));
                v35 = (uint64_t *)(v31 + 16 * v34);
                uint64_t v36 = *v35;
                if (v29 == *v35)
                {
LABEL_47:
                  uint64_t *v35 = -8192;
                  v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v29 = *(void *)(v15 + 24);
                }
                else
                {
                  int v37 = 1;
                  while (v36 != -4096)
                  {
                    int v38 = v34 + v37++;
                    uint64_t v34 = v38 & v33;
                    uint64_t v36 = *(void *)(v31 + 16 * v34);
                    if (v29 == v36)
                    {
                      v35 = (uint64_t *)(v31 + 16 * v34);
                      goto LABEL_47;
                    }
                  }
                }
                *(unsigned char *)(v29 + 17) &= ~1u;
              }
            }
          }
        }
        v15 += 56;
      }
      while (v15 != v14);
      if (v79 != -8192 && v79 != -4096 && v79 != 0)
      {
        unint64_t v64 = v77 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v77 & 0xFFFFFFFFFFFFFFF8) = v78;
        if (v78)
        {
          unint64_t *v78 = *v78 & 7 | v64;
        }
        else
        {
          uint64_t v65 = v79;
          uint64_t v66 = ***(int32x2_t ****)v79;
          unint64_t v67 = (unint64_t)v66[303];
          if (v67 <= v64)
          {
            uint64_t v68 = v66[305].u32[0];
            if (v67 + 16 * v68 > v64)
            {
              unsigned int v69 = v68 - 1;
              LODWORD(v70) = v69 & ((v79 >> 4) ^ (v79 >> 9));
              v71 = (uint64_t *)(v67 + 16 * v70);
              uint64_t v72 = *v71;
              if (v79 == *v71)
              {
LABEL_96:
                uint64_t *v71 = -8192;
                v66[304] = vadd_s32(v66[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v65 = v79;
              }
              else
              {
                int v73 = 1;
                while (v72 != -4096)
                {
                  int v74 = v70 + v73++;
                  uint64_t v70 = v74 & v69;
                  uint64_t v72 = *(void *)(v67 + 16 * v70);
                  if (v79 == v72)
                  {
                    v71 = (uint64_t *)(v67 + 16 * v70);
                    goto LABEL_96;
                  }
                }
              }
              *(unsigned char *)(v65 + 17) &= ~1u;
            }
          }
        }
      }
    }
    if (v84 != -8192 && v84 != -4096 && v84 != 0)
    {
      unint64_t v53 = v82 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v82 & 0xFFFFFFFFFFFFFFF8) = v83;
      if (v83)
      {
        unint64_t *v83 = *v83 & 7 | v53;
      }
      else
      {
        uint64_t v54 = v84;
        v55 = ***(int32x2_t ****)v84;
        unint64_t v56 = (unint64_t)v55[303];
        if (v56 <= v53)
        {
          uint64_t v57 = v55[305].u32[0];
          if (v56 + 16 * v57 > v53)
          {
            unsigned int v58 = v57 - 1;
            LODWORD(v59) = v58 & ((v84 >> 4) ^ (v84 >> 9));
            v60 = (uint64_t *)(v56 + 16 * v59);
            uint64_t v61 = *v60;
            if (v84 == *v60)
            {
LABEL_86:
              uint64_t *v60 = -8192;
              v55[304] = vadd_s32(v55[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v54 = v84;
            }
            else
            {
              int v62 = 1;
              while (v61 != -4096)
              {
                int v63 = v59 + v62++;
                uint64_t v59 = v63 & v58;
                uint64_t v61 = *(void *)(v56 + 16 * v59);
                if (v84 == v61)
                {
                  v60 = (uint64_t *)(v56 + 16 * v59);
                  goto LABEL_86;
                }
              }
            }
            *(unsigned char *)(v54 + 17) &= ~1u;
          }
        }
      }
    }
    MEMORY[0x1D25D9CD0](v9, 8);
  }
  else
  {
    sub_1CCE3129C((uint64_t *)a1);
  }
  sub_1CCE317CC(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v75);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v75;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CCE32414(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(unsigned __int8 *)(a2 + 16) - 11 < 2) {
    return 0;
  }
  uint64_t result = sub_1CCE325A8(a2);
  if (!result) {
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v9 = a1 + 56;
  v13[0] = 0;
  if (sub_1CCE317CC(v10, *(_DWORD *)(v9 + 16), a2, v13)
    && v13[0] != *(void *)v9 + 56 * *(unsigned int *)(v9 + 16))
  {
    return 0;
  }
  v13[0] = a2;
  v13[1] = a3;
  int v14 = a4;
  sub_1CCE3196C((uint64_t)&v12, v9, (uint64_t)v13);
  return 1;
}

BOOL sub_1CCE324C8(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_1CCE32538(a1, a2);
  if (result)
  {
    BOOL result = 0;
    if (a2)
    {
      if (*(unsigned char *)(a2 + 16) == 84)
      {
        uint64_t v5 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 40));
        if (v5)
        {
          **(void **)(a1 + 48) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_1CCE32538(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_1CC062C2C(a1, a2);
  if (result)
  {
    BOOL result = 0;
    if (a2)
    {
      if (*(unsigned char *)(a2 + 16) == 84)
      {
        uint64_t v5 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 24));
        if (v5)
        {
          **(void **)(a1 + 32) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CCE325A8(uint64_t a1)
{
  uint64_t v1 = 0;
  if (a1)
  {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
    if (v2 >= 0x1C)
    {
      if (v2 == 84)
      {
        uint64_t v3 = *(void *)(a1 - 32);
        if (v3
          && !*(unsigned char *)(v3 + 16)
          && *(void *)(v3 + 24) == *(void *)(a1 + 72)
          && (*(unsigned char *)(v3 + 33) & 0x20) != 0)
        {
          return (*(_DWORD *)(v3 + 36) & 0xFFFFFFFC) == 188;
        }
      }
      else if (v2 - 40 < 7)
      {
        return 1;
      }
      return (v2 & 0xFE) == 60;
    }
  }
  return v1;
}

uint64_t sub_1CCE32624(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1CC9F99A8(a1, a2);
  if (result)
  {
    uint64_t result = 0;
    if (a2)
    {
      if (*(unsigned char *)(a2 + 16) == 84)
      {
        uint64_t v5 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 40));
        if (v5)
        {
          **(void **)(a1 + 48) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_1CCE32694(uint64_t a1, uint64_t a2, llvm::PoisonValue **a3, uint64_t a4, uint64_t a5)
{
  unsigned int v6 = a3;
  v46[16] = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)*a3 + 2) & 0xFE) == 0x12) {
    uint64_t v8 = *a3;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(a2 + 264);
  uint64_t v10 = *(unsigned int *)(a2 + 280);
  if (!v10)
  {
LABEL_10:
    uint64_t v12 = v9 + 16 * v10;
    goto LABEL_11;
  }
  LODWORD(v11) = (v10 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v12 = v9 + 16 * v11;
  unsigned int v13 = *(llvm::PoisonValue ***)v12;
  if (*(llvm::PoisonValue ***)v12 != a3)
  {
    int v14 = 1;
    while (v13 != (llvm::PoisonValue **)-4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      unsigned int v13 = *(llvm::PoisonValue ***)(v9 + 16 * v11);
      if (v13 == a3)
      {
        uint64_t v12 = v9 + 16 * v11;
        goto LABEL_11;
      }
    }
    goto LABEL_10;
  }
LABEL_11:
  if (v12 == v9 + 16 * v10) {
    goto LABEL_25;
  }
  unsigned int v16 = *(_DWORD *)(v12 + 8);
  uint64_t v17 = *(void *)(a2 + 288);
  if (v17 + 176 * v16 == *(void *)(a2 + 296)) {
    goto LABEL_25;
  }
  uint64_t v18 = v17 + 176 * v16;
  uint64_t v19 = (llvm::PoisonValue ****)(v18 + 8);
  int v20 = *(_DWORD *)a4;
  if (*(unsigned char *)(v18 + 168))
  {
    if (v20 == *((_DWORD *)***v19 + 8))
    {
      BOOL v21 = (_DWORD *)(v17 + 176 * v16 + 16);
      goto LABEL_18;
    }
  }
  else if (v20 == *(_DWORD *)(v17 + 176 * v16 + 16))
  {
    BOOL v21 = (_DWORD *)((char *)***v19 + 32);
LABEL_18:
    if (*(_DWORD *)(a4 + 4) == *v21)
    {
      *(void *)a1 = a1 + 16;
      *(void *)(a1 + 8) = 0x1000000000;
      if (*(_DWORD *)(v17 + 176 * v16 + 16)) {
        sub_1CBB08064(a1, (uint64_t)v19);
      }
      uint64_t v22 = v17 + 176 * v16;
      long long v23 = *(_OWORD *)(v22 + 152);
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(v22 + 168);
      *(_OWORD *)(a1 + 144) = v23;
      return;
    }
  }
  uint64_t v24 = *(unsigned int *)(v17 + 176 * v16 + 16);
  if (v24 == 1) {
    unsigned int v6 = **v19;
  }
  else {
    unsigned int v6 = (llvm::PoisonValue **)llvm::concatenateVectors(a5, *v19, v24);
  }
LABEL_25:
  uint64_t v44 = v46;
  uint64_t v45 = 0x1000000000;
  if (*((_DWORD *)v8 + 8))
  {
    uint64_t v25 = 0;
    int v26 = *(unsigned __int8 *)(a4 + 8);
    int v28 = *(_DWORD *)a4;
    int v27 = *(_DWORD *)(a4 + 4);
    do
    {
      if (v26) {
        int v29 = v28;
      }
      else {
        int v29 = v27;
      }
      llvm::createSequentialMask(v25, v29, 0, (uint64_t)&v41);
      uint64_t v30 = v41;
      unint64_t v31 = (llvm::Type *)v42;
      unint64_t v39 = "split";
      __int16 v40 = 259;
      unsigned int v33 = llvm::PoisonValue::get(*v6, v32);
      uint64_t v34 = sub_1CB935A74(a5, (uint64_t)v6, (uint64_t)v33, v30, v31, (uint64_t)&v39);
      if (v41 != &v43) {
        free(v41);
      }
      if (v45 >= (unint64_t)HIDWORD(v45)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v44 + v45) = v34;
      uint64_t v35 = (v45 + 1);
      LODWORD(v45) = v45 + 1;
      int v26 = *(unsigned __int8 *)(a4 + 8);
      int v28 = *(_DWORD *)a4;
      int v27 = *(_DWORD *)(a4 + 4);
      if (*(unsigned char *)(a4 + 8)) {
        int v36 = *(_DWORD *)a4;
      }
      else {
        int v36 = *(_DWORD *)(a4 + 4);
      }
      uint64_t v25 = (v36 + v25);
    }
    while (v25 < *((_DWORD *)v8 + 8));
    int v37 = v44;
  }
  else
  {
    uint64_t v35 = 0;
    int v37 = v46;
  }
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x1000000000;
  sub_1CC188254((unsigned int *)a1, v37, &v37[8 * v35]);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = dword_1EBCF6F18 == 0;
  if (v44 != v46) {
    free(v44);
  }
}

uint64_t sub_1CCE329F0(uint64_t a1, unsigned int a2, unsigned int a3, llvm::FixedVectorType *this)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x1000000000;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  BOOL v5 = dword_1EBCF6F18 == 0;
  *(unsigned char *)(a1 + 160) = dword_1EBCF6F18 == 0;
  if (v5) {
    unsigned int v6 = a3;
  }
  else {
    unsigned int v6 = a2;
  }
  for (; v6; --v6)
  {
    if (*(unsigned char *)(a1 + 160)) {
      unint64_t v10 = a2;
    }
    else {
      unint64_t v10 = a3;
    }
    llvm::FixedVectorType::get(this, (llvm::Type *)v10);
    unsigned int v13 = llvm::UndefValue::get(v11, v12);
    unint64_t v14 = *(unsigned int *)(a1 + 8);
    if (v14 >= *(unsigned int *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a1 + 8 * v14) = v13;
    ++*(_DWORD *)(a1 + 8);
  }
  return a1;
}

unint64_t sub_1CCE32AD0(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, unsigned int a8)
{
  unint64_t v12 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 16) + 696))(**(void **)(a1 + 16), 1);
  unsigned int v13 = (uint64_t *)**a2;
  uint64_t v14 = *v13;
  int v15 = *(unsigned __int8 **)(*v13 + 24);
  unint64_t result = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v15);
  unint64_t v17 = v12 / result;
  if ((v12 / result) <= 1) {
    LODWORD(v17) = 1;
  }
  unsigned int v62 = v17;
  if (*((unsigned char *)a2 + 160)) {
    uint64_t v18 = (unsigned int *)(v14 + 32);
  }
  else {
    uint64_t v18 = (unsigned int *)(a2 + 1);
  }
  uint64_t v19 = *v18;
  if (*((unsigned char *)a2 + 160)) {
    int v20 = (unsigned int *)(a2 + 1);
  }
  else {
    int v20 = (unsigned int *)(v14 + 32);
  }
  int v21 = *v20;
  unsigned int v81 = a8;
  uint64_t v78 = a3;
  uint64_t v65 = v19;
  uint64_t v66 = a2;
  uint64_t v64 = *v20;
  if (*(unsigned char *)(a3 + 160))
  {
    int v73 = *(_DWORD *)(a3 + 8);
    unsigned int v67 = v15[8];
    int v84 = 0;
    *(_DWORD *)(a5 + 96) = a8;
    if (v21)
    {
      *(void *)uint64_t v75 = 0;
      do
      {
        if (v19)
        {
          unsigned int v22 = 0;
          int v69 = *(unsigned __int8 *)((*v66)[*(void *)v75] + 16);
          uint64_t v23 = v62;
          do
          {
            uint64_t v24 = v23;
            do
            {
              uint64_t v23 = v24;
              unsigned int v25 = v24 + v22;
              uint64_t v24 = v24 >> 1;
            }
            while (v25 > v19);
            if (a6) {
              int v26 = (llvm::PoisonValue **)sub_1CCE33738((uint64_t)*v66, *((unsigned char *)v66 + 160), v22, v75[0], v23, a5);
            }
            else {
              int v26 = 0;
            }
            if (v73)
            {
              unsigned int v27 = 0;
              unsigned int v71 = v22;
              do
              {
                int v29 = (uint64_t *)sub_1CCE33738(*(void *)a3, *(unsigned char *)(a3 + 160), v22, v27, v23, a5);
                if (a7) {
                  unsigned int v30 = v27;
                }
                else {
                  unsigned int v30 = v75[0];
                }
                unint64_t v31 = *(unsigned __int8 **)(*(void *)a4 + 8 * v30);
                if (a7) {
                  uint64_t v32 = v75[0];
                }
                else {
                  uint64_t v32 = v27;
                }
                __int16 v83 = 257;
                uint64_t v33 = **(void **)(a5 + 64);
                uint64_t v34 = *(llvm::ConstantInt **)(v33 + 1984);
                unint64_t v35 = *(unsigned int *)(v33 + 1992);
                unsigned int v86 = v35 >> 8;
                if (v35 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v35 <= 0xFF) {
                  unint64_t v36 = 0;
                }
                else {
                  unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v35) + 63);
                }
                unint64_t v85 = v36 & v32;
                int v37 = (unsigned __int8 *)llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v85, v28);
                if (v86 >= 0x41 && v85) {
                  MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
                }
                int v38 = (unsigned __int8 *)sub_1CB8445F4(a5, v31, v37, (uint64_t)v82);
                v82[0] = "splat";
                __int16 v83 = 259;
                VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(a5, (llvm::Type *)v23, v38, (uint64_t)v82);
                if (v27) {
                  BOOL v40 = 0;
                }
                else {
                  BOOL v40 = v69 == 13;
                }
                if (v40) {
                  uint64_t v41 = 0;
                }
                else {
                  uint64_t v41 = v26;
                }
                int v26 = (llvm::PoisonValue **)sub_1CCE33820(a1, v41, v29, (uint64_t)VectorSplat, v67 < 7, (uint64_t *)a5, (v81 >> 5) & 1, &v84);
                ++v27;
                unsigned int v22 = v71;
                a3 = v78;
              }
              while (v73 != v27);
            }
            unint64_t result = (unint64_t)sub_1CCE33A28((*v66)[*(void *)v75], v22, v26, a5);
            (*v66)[*(void *)v75] = result;
            unsigned int v22 = v25;
            LODWORD(v19) = v65;
          }
          while (v25 < v65);
        }
        ++*(void *)v75;
      }
      while (*(void *)v75 != v64);
    }
  }
  else
  {
    int v72 = *(_DWORD *)(***(void ***)a3 + 32);
    unsigned int v68 = v15[8];
    int v84 = 0;
    *(_DWORD *)(a5 + 96) = a8;
    if (v19)
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (v64)
        {
          unsigned int v42 = 0;
          int v70 = *(unsigned __int8 *)((*v66)[i] + 16);
          uint64_t v43 = v62;
          do
          {
            uint64_t v44 = v43;
            do
            {
              uint64_t v43 = v44;
              unsigned int v45 = v44 + v42;
              uint64_t v44 = v44 >> 1;
            }
            while (v45 > v64);
            if (v72)
            {
              unsigned int v46 = 0;
              unint64_t v47 = 0;
              do
              {
                uint64_t v48 = sub_1CCE33738(*(void *)a4, *(unsigned char *)(a4 + 160), v46, v42, v43, a5);
                if (a7) {
                  unsigned int v50 = v46;
                }
                else {
                  unsigned int v50 = i;
                }
                uint64_t v51 = *(unsigned __int8 **)(*(void *)a3 + 8 * v50);
                if (a7) {
                  uint64_t v52 = i;
                }
                else {
                  uint64_t v52 = v46;
                }
                __int16 v83 = 257;
                uint64_t v53 = **(void **)(a5 + 64);
                uint64_t v54 = *(llvm::ConstantInt **)(v53 + 1984);
                unint64_t v55 = *(unsigned int *)(v53 + 1992);
                unsigned int v86 = v55 >> 8;
                uint64_t v76 = (uint64_t)v48;
                if (v55 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v55 <= 0xFF) {
                  unint64_t v56 = 0;
                }
                else {
                  unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v55) + 63);
                }
                unint64_t v85 = v56 & v52;
                uint64_t v57 = (unsigned __int8 *)llvm::ConstantInt::get(v54, (llvm::LLVMContext *)&v85, v49);
                if (v86 >= 0x41 && v85) {
                  MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
                }
                unsigned int v58 = (unsigned __int8 *)sub_1CB8445F4(a5, v51, v57, (uint64_t)v82);
                v82[0] = "splat";
                __int16 v83 = 259;
                uint64_t v59 = (uint64_t *)llvm::IRBuilderBase::CreateVectorSplat(a5, (llvm::Type *)v43, v58, (uint64_t)v82);
                if (v46) {
                  BOOL v60 = 0;
                }
                else {
                  BOOL v60 = v70 == 13;
                }
                if (v60) {
                  uint64_t v61 = 0;
                }
                else {
                  uint64_t v61 = v47;
                }
                unint64_t v47 = (llvm::PoisonValue **)sub_1CCE33820(a1, v61, v59, v76, v68 < 7, (uint64_t *)a5, (v81 >> 5) & 1, &v84);
                ++v46;
                a3 = v78;
              }
              while (v72 != v46);
            }
            else
            {
              unint64_t v47 = 0;
            }
            unint64_t result = (unint64_t)sub_1CCE33A28((*v66)[i], v42, v47, a5);
            (*v66)[i] = result;
            unsigned int v42 = v45;
            uint64_t v19 = v65;
          }
          while (v45 < v64);
        }
      }
    }
  }
  *((_DWORD *)v66 + 38) += v84;
  return result;
}

uint64_t sub_1CCE33144(uint64_t a1)
{
  int v2 = sub_1CB845E74(a1);
  if (v2)
  {
    if (*(unsigned __int8 *)(a1 + 17) >> 1 == 127) {
      int v2 = -1;
    }
    else {
      int v2 = *(unsigned __int8 *)(a1 + 17) >> 1;
    }
  }
  return v2 & 0xFFFFFFDF | (32 * ((byte_1EBCF6E58 | v2 & 0x20) != 0));
}

void sub_1CCE33198(uint64_t a1, uint64_t a2, unsigned char **a3, uint64_t a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1 + 264;
  uint64_t v49 = a2;
  unsigned int v50 = v52;
  uint64_t v51 = 0x1000000000;
  if (*((_DWORD *)a3 + 2))
  {
    sub_1CBB08064((uint64_t)&v50, (uint64_t)a3);
    uint64_t v8 = v49;
    unsigned int v9 = v51;
  }
  else
  {
    unsigned int v9 = 0;
    uint64_t v8 = a2;
  }
  long long v53 = *((_OWORD *)a3 + 9);
  char v54 = *((unsigned char *)a3 + 160);
  uint64_t v55 = v8;
  unint64_t v56 = v58;
  unint64_t v57 = 0x1000000000;
  if (v9)
  {
    if (v50 == v52)
    {
      if (v9 >= 0x11) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v58, v52, 8 * v9);
      LODWORD(v57) = v9;
      uint64_t v8 = v55;
    }
    else
    {
      unint64_t v56 = v50;
      unint64_t v57 = __PAIR64__(HIDWORD(v51), v9);
      unsigned int v50 = v52;
      HIDWORD(v51) = 0;
    }
    LODWORD(v51) = 0;
  }
  long long v59 = v53;
  char v60 = v54;
  uint64_t v42 = v8;
  int v43 = 0;
  sub_1CC6125EC(v7, &v42, &v43, (uint64_t)&__p);
  if ((_BYTE)v46)
  {
    uint64_t v10 = *(void *)(a1 + 288);
    unint64_t v11 = *(void *)(a1 + 296);
    uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v10) >> 4);
    *((_DWORD *)__p + 2) = v12;
    unint64_t v13 = *(void *)(a1 + 304);
    if (v11 >= v13)
    {
      if ((unint64_t)(v12 + 1) > 0x1745D1745D1745DLL) {
        abort();
      }
      unint64_t v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - v10) >> 4);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= v12 + 1) {
        uint64_t v18 = v12 + 1;
      }
      if (v17 >= 0xBA2E8BA2E8BA2ELL) {
        unint64_t v19 = 0x1745D1745D1745DLL;
      }
      else {
        unint64_t v19 = v18;
      }
      uint64_t v48 = a1 + 304;
      if (v19)
      {
        if (v19 > 0x1745D1745D1745DLL) {
          sub_1CB833614();
        }
        int v20 = (char *)operator new(176 * v19);
      }
      else
      {
        int v20 = 0;
      }
      int v21 = (uint64_t *)(a1 + 288);
      unsigned int v22 = &v20[176 * v12];
      __p = v20;
      unsigned int v45 = v22;
      unsigned int v46 = v22;
      unint64_t v47 = &v20[176 * v19];
      *(void *)unsigned int v22 = v55;
      *((void *)v22 + 1) = v22 + 24;
      *((void *)v22 + 2) = 0x1000000000;
      int v23 = v57;
      if (v22 + 8 != (char *)&v56 && v57 != 0)
      {
        if (v56 == v58)
        {
          if (v57 >= 0x11)
          {
            *((_DWORD *)v22 + 4) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v22 + 24, v58, 8 * v57);
          *((_DWORD *)v22 + 4) = v23;
          unsigned int v22 = v46;
          int v21 = (uint64_t *)(a1 + 288);
        }
        else
        {
          *((void *)v22 + 1) = v56;
          int v40 = HIDWORD(v57);
          *((_DWORD *)v22 + 4) = v23;
          *((_DWORD *)v22 + 5) = v40;
          unint64_t v56 = v58;
          HIDWORD(v57) = 0;
        }
        LODWORD(v57) = 0;
      }
      unsigned int v25 = &v20[176 * v12];
      *(_OWORD *)(v25 + 152) = v59;
      v25[168] = v60;
      unsigned int v46 = v22 + 176;
      sub_1CCE33D24(v21, &__p);
      unint64_t v16 = *(void *)(a1 + 296);
      int v26 = v45;
      for (uint64_t i = v46; i != v26; i -= 176)
      {
        int v28 = (char *)*((void *)i - 21);
        if (i - 152 != v28) {
          free(v28);
        }
      }
      if (__p) {
        operator delete(__p);
      }
    }
    else
    {
      *(void *)unint64_t v11 = v55;
      *(void *)(v11 + 8) = v11 + 24;
      *(void *)(v11 + 16) = 0x1000000000;
      if ((uint64_t *)v11 != &v55)
      {
        int v14 = v57;
        if (v57)
        {
          if (v56 == v58)
          {
            if (v57 >= 0x11) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v11 + 24), v58, 8 * v57);
            *(_DWORD *)(v11 + 16) = v14;
          }
          else
          {
            *(void *)(v11 + 8) = v56;
            *(_DWORD *)(v11 + 16) = v14;
            *(_DWORD *)(v11 + 20) = HIDWORD(v57);
            unint64_t v56 = v58;
            HIDWORD(v57) = 0;
          }
          LODWORD(v57) = 0;
        }
      }
      long long v15 = v59;
      *(unsigned char *)(v11 + 168) = v60;
      *(_OWORD *)(v11 + 152) = v15;
      unint64_t v16 = v11 + 176;
    }
    *(void *)(a1 + 296) = v16;
  }
  if (v56 != v58) {
    free(v56);
  }
  if (v50 != v52) {
    free(v50);
  }
  unsigned int v29 = *(_DWORD *)(a1 + 128);
  if (v29 >= *(_DWORD *)(a1 + 132)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 120) + 8 * v29) = a2;
  ++*(_DWORD *)(a1 + 128);
  uint64_t v30 = *(void *)(a2 + 8);
  if (v30)
  {
    uint64_t v31 = 0;
    do
    {
      uint64_t v32 = v30;
      uint64_t v33 = (void *)(v30 + 8);
      uint64_t v30 = *(void *)(v30 + 8);
      uint64_t v34 = v33[2];
      uint64_t v55 = 0;
      if (sub_1CCE317CC(*(void *)(a1 + 56), *(_DWORD *)(a1 + 72), v34, &v55)) {
        BOOL v35 = v55 == *(void *)(a1 + 56) + 56 * *(unsigned int *)(a1 + 72);
      }
      else {
        BOOL v35 = 1;
      }
      if (v35)
      {
        if (!v31)
        {
          uint64_t v36 = *((unsigned int *)a3 + 2);
          if (v36 == 1) {
            uint64_t v31 = *(void *)*a3;
          }
          else {
            uint64_t v31 = llvm::concatenateVectors(a4, *a3, v36);
          }
        }
        if (*(void *)v32)
        {
          **(void **)(v32 + 16) = *(void *)(v32 + 8);
          uint64_t v37 = *(void *)(v32 + 8);
          if (v37) {
            *(void *)(v37 + 16) = *(void *)(v32 + 16);
          }
        }
        *(void *)uint64_t v32 = v31;
        if (v31)
        {
          int v38 = (void *)(v31 + 8);
          uint64_t v39 = *(void *)(v31 + 8);
          *uint64_t v33 = v39;
          if (v39) {
            *(void *)(v39 + 16) = v33;
          }
          *(void *)(v32 + 16) = v38;
          *int v38 = v32;
        }
      }
    }
    while (v30);
  }
}

llvm::Instruction *sub_1CCE33738(uint64_t a1, char a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6)
{
  v20[8] = *MEMORY[0x1E4F143B8];
  if (a2) {
    unsigned int v7 = a4;
  }
  else {
    unsigned int v7 = a3;
  }
  if (a2) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = a4;
  }
  unsigned int v9 = *(llvm::PoisonValue ***)(a1 + 8 * v7);
  llvm::createSequentialMask(v8, a5, 0, (uint64_t)&v18);
  uint64_t v10 = v18;
  unint64_t v11 = (llvm::Type *)v19;
  unint64_t v16 = "block";
  __int16 v17 = 259;
  unint64_t v13 = llvm::PoisonValue::get(*v9, v12);
  int v14 = sub_1CB935A74(a6, (uint64_t)v9, (uint64_t)v13, v10, v11, (uint64_t)&v16);
  if (v18 != v20) {
    free(v18);
  }
  return v14;
}

llvm::Instruction *sub_1CCE33820(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, int a5, uint64_t *a6, int a7, _DWORD *a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *a8 += sub_1CCE33C80(a1, *a3);
  if (a2)
  {
    if (a5)
    {
      if (a7)
      {
        unint64_t v16 = *(uint64_t ***)(*(void *)a1 + 40);
        v22[0] = *a3;
        uint64_t Declaration = llvm::Intrinsic::getDeclaration(v16, 143, (uint64_t)v22, 1);
        if (Declaration) {
          uint64_t v18 = *(uint64_t ***)(Declaration + 24);
        }
        else {
          uint64_t v18 = 0;
        }
        v24[0] = (uint64_t)a3;
        v24[1] = a4;
        v24[2] = (uint64_t)a2;
        __int16 v23 = 257;
        return (llvm::Instruction *)sub_1CB845BAC(a6, v18, (uint64_t **)Declaration, v24, 3, (uint64_t)v22, 0);
      }
      else
      {
        *a8 += sub_1CCE33C80(a1, *a3);
        __int16 v23 = 257;
        uint64_t v21 = sub_1CB843C88((uint64_t)a6, (uint64_t)a3, a4, (uint64_t)v22, 0);
        __int16 v23 = 257;
        return (llvm::Instruction *)sub_1CC52C04C((uint64_t)a6, (uint64_t)a2, v21, (uint64_t)v22, 0);
      }
    }
    else
    {
      *a8 += sub_1CCE33C80(a1, *a3);
      __int16 v23 = 257;
      int v20 = sub_1CC09A1EC((uint64_t)a6, (uint64_t)a3, a4, (uint64_t)v22, 0, 0);
      __int16 v23 = 257;
      return sub_1CB844A3C((uint64_t)a6, a2, (uint64_t)v20, (uint64_t)v22, 0, 0);
    }
  }
  else if (a5)
  {
    __int16 v23 = 257;
    return (llvm::Instruction *)sub_1CB843C88((uint64_t)a6, (uint64_t)a3, a4, (uint64_t)v22, 0);
  }
  else
  {
    __int16 v25 = 257;
    return sub_1CC09A1EC((uint64_t)a6, (uint64_t)a3, a4, (uint64_t)v24, 0, 0);
  }
}

llvm::Instruction *sub_1CCE33A28(uint64_t a1, unsigned int a2, llvm::PoisonValue **a3, uint64_t a4)
{
  v25[8] = *MEMORY[0x1E4F143B8];
  int v8 = *((_DWORD *)*a3 + 8);
  llvm::createSequentialMask(0, v8, *(_DWORD *)(*(void *)a1 + 32) - v8, (uint64_t)&v23);
  unsigned int v9 = v23;
  uint64_t v10 = (llvm::Type *)v24;
  __int16 v22 = 257;
  uint64_t v12 = llvm::PoisonValue::get(*a3, v11);
  unint64_t v13 = sub_1CB935A74(a4, (uint64_t)a3, (uint64_t)v12, v9, v10, (uint64_t)v21);
  if (v23 != v25) {
    free(v23);
  }
  __int16 v23 = v25;
  uint64_t v24 = 0x1000000000;
  unsigned int v14 = 0;
  if (a2)
  {
    int v15 = 0;
    do
    {
      if (v14 >= HIDWORD(v24)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v23 + v14) = v15;
      unsigned int v14 = v24 + 1;
      LODWORD(v24) = v24 + 1;
      ++v15;
    }
    while (a2 != v15);
  }
  unsigned int v16 = *(_DWORD *)(*(void *)a1 + 32);
  unsigned int v17 = v8 + a2;
  if (v8 + a2 > a2)
  {
    int v18 = *(_DWORD *)(*(void *)a1 + 32);
    do
    {
      if (v14 >= HIDWORD(v24)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v23 + v14) = v18;
      unsigned int v14 = v24 + 1;
      LODWORD(v24) = v24 + 1;
      ++v18;
      --v8;
    }
    while (v8);
    a2 = v17;
  }
  if (a2 < v16)
  {
    do
    {
      if (v14 >= HIDWORD(v24)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v23 + v14) = a2;
      unsigned int v14 = v24 + 1;
      LODWORD(v24) = v24 + 1;
      ++a2;
    }
    while (v16 != a2);
  }
  __int16 v22 = 257;
  unsigned int v19 = sub_1CB935A74(a4, a1, (uint64_t)v13, v23, (llvm::Type *)v14, (uint64_t)v21);
  if (v23 != v25) {
    free(v23);
  }
  return v19;
}

unsigned int sub_1CCE33C80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (llvm::Type *)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    uint64_t v3 = **(llvm::Type ***)(a2 + 16);
  }
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  double v5 = (double)(llvm::Type::getPrimitiveSizeInBits(v3) * v4);
  return vcvtpd_u64_f64(v5 / (double)(unint64_t)(*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 696))());
}

uint64_t *sub_1CCE33D24(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v4 + v7;
      uint64_t v9 = v6 + v7;
      *(void *)(v9 - 176) = *(void *)(v4 + v7 - 176);
      uint64_t v10 = (void *)(v6 + v7 - 152);
      *(void *)(v6 + v7 - 168) = v10;
      unint64_t result = (uint64_t *)(v6 + v7 - 168);
      *(void *)(v9 - 160) = 0x1000000000;
      unsigned int v11 = *(_DWORD *)(v4 + v7 - 160);
      if (v11) {
        BOOL v12 = v9 == v8;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12)
      {
        unint64_t v13 = *(const void **)(v8 - 168);
        if ((const void *)(v8 - 152) == v13)
        {
          if (v11 >= 0x11) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t result = (uint64_t *)memcpy(v10, v13, 8 * *(unsigned int *)(v4 + v7 - 160));
          *(_DWORD *)(v9 - 160) = v11;
        }
        else
        {
          *(void *)(v9 - 168) = v13;
          int v15 = *(_DWORD *)(v4 + v7 - 156);
          *(_DWORD *)(v9 - 160) = v11;
          *(_DWORD *)(v9 - 156) = v15;
          *(void *)(v8 - 168) = v8 - 152;
          *(_DWORD *)(v4 + v7 - 156) = 0;
        }
        *(_DWORD *)(v8 - 160) = 0;
      }
      long long v14 = *(_OWORD *)(v8 - 24);
      *(unsigned char *)(v9 - 8) = *(unsigned char *)(v8 - 8);
      *(_OWORD *)(v9 - 24) = v14;
      v7 -= 176;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v16 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v16;
  uint64_t v17 = v3[1];
  v3[1] = a2[2];
  a2[2] = v17;
  uint64_t v18 = v3[2];
  v3[2] = a2[3];
  a2[3] = v18;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CCE33E9C(uint64_t result, const llvm::Instruction **a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v11 = (const llvm::Instruction **)result;
  while (2)
  {
    uint64_t v80 = a2 - 1;
    BOOL v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *(a2 - 1), *v11);
                if (result)
                {
                  int v40 = *v11;
                  *unsigned int v11 = *(a2 - 1);
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                unint64_t result = sub_1CCE3476C(v11, v11 + 1, v80, a3);
                break;
              case 4:
                unint64_t result = sub_1CCE34A34(v11, v11 + 1, v11 + 2, v80, a3);
                break;
              case 5:
                unint64_t result = sub_1CCE34680(v11, v11 + 1, v11 + 2, v11 + 3, v80, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            uint64_t v41 = v11 + 1;
            BOOL v43 = v11 == a2 || v41 == a2;
            if (a5)
            {
              if (!v43)
              {
                uint64_t v44 = 0;
                unsigned int v45 = v11;
                do
                {
                  unint64_t v47 = *v45;
                  unsigned int v46 = v45[1];
                  unsigned int v45 = v41;
                  unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v46, v47);
                  if (result)
                  {
                    uint64_t v48 = *v45;
                    uint64_t v49 = v44;
                    while (1)
                    {
                      *(const llvm::Instruction **)((char *)v11 + v49 + 8) = *(const llvm::Instruction **)((char *)v11 + v49);
                      if (!v49) {
                        break;
                      }
                      unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v48, *(const llvm::Instruction **)((char *)v11 + v49 - 8));
                      v49 -= 8;
                      if ((result & 1) == 0)
                      {
                        unsigned int v50 = (const llvm::Instruction **)((char *)v11 + v49 + 8);
                        goto LABEL_79;
                      }
                    }
                    unsigned int v50 = v11;
LABEL_79:
                    *unsigned int v50 = v48;
                  }
                  uint64_t v41 = v45 + 1;
                  v44 += 8;
                }
                while (v45 + 1 != a2);
              }
            }
            else if (!v43)
            {
              do
              {
                int v74 = *v11;
                int v73 = v11[1];
                unsigned int v11 = v41;
                unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v73, v74);
                if (result)
                {
                  uint64_t v75 = *v11;
                  uint64_t v76 = v11;
                  do
                  {
                    uint64_t v77 = v76;
                    uint64_t v78 = *--v76;
                    *uint64_t v77 = v78;
                    unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v75, *(v77 - 2));
                  }
                  while ((result & 1) != 0);
                  *uint64_t v76 = v75;
                }
                uint64_t v41 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v51 = (unint64_t)(v14 - 2) >> 1;
              uint64_t v79 = a2;
              int64_t v81 = v51;
              do
              {
                int64_t v52 = v51;
                if (v81 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  char v54 = &v11[v53];
                  if (2 * v51 + 2 < v14
                    && llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *v54, v54[1]))
                  {
                    ++v54;
                    uint64_t v53 = 2 * v52 + 2;
                  }
                  uint64_t v55 = &v11[v52];
                  unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *v54, *v55);
                  if ((result & 1) == 0)
                  {
                    unint64_t v56 = *v55;
                    do
                    {
                      unint64_t v57 = v54;
                      int32x2_t *v55 = *v54;
                      if (v81 < v53) {
                        break;
                      }
                      uint64_t v58 = (2 * v53) | 1;
                      char v54 = &v11[v58];
                      uint64_t v59 = 2 * v53 + 2;
                      if (v59 < v14
                        && llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *v54, v54[1]))
                      {
                        ++v54;
                        uint64_t v58 = v59;
                      }
                      unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *v54, v56);
                      uint64_t v55 = v57;
                      uint64_t v53 = v58;
                    }
                    while (!result);
                    *unint64_t v57 = v56;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              char v60 = v79;
              do
              {
                uint64_t v61 = v60;
                uint64_t v62 = 0;
                uint64_t v82 = *v11;
                int v63 = v11;
                do
                {
                  uint64_t v64 = &v63[v62 + 1];
                  uint64_t v65 = (2 * v62) | 1;
                  uint64_t v66 = 2 * v62 + 2;
                  if (v66 < v14)
                  {
                    unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *v64, v63[v62 + 2]);
                    if (result)
                    {
                      ++v64;
                      uint64_t v65 = v66;
                    }
                  }
                  *int v63 = *v64;
                  int v63 = v64;
                  uint64_t v62 = v65;
                }
                while (v65 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                char v60 = v61 - 1;
                if (v64 == v61 - 1)
                {
                  unint64_t *v64 = v82;
                }
                else
                {
                  unint64_t *v64 = *v60;
                  uint64_t *v60 = v82;
                  uint64_t v67 = (char *)v64 - (char *)v11 + 8;
                  if (v67 >= 9)
                  {
                    unint64_t v68 = (((unint64_t)v67 >> 3) - 2) >> 1;
                    int v69 = &v11[v68];
                    unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *v69, *v64);
                    if (result)
                    {
                      int v70 = *v64;
                      do
                      {
                        unsigned int v71 = v69;
                        unint64_t *v64 = *v69;
                        if (!v68) {
                          break;
                        }
                        unint64_t v68 = (v68 - 1) >> 1;
                        int v69 = &v11[v68];
                        unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *v69, v70);
                        uint64_t v64 = v71;
                      }
                      while ((result & 1) != 0);
                      uint64_t *v71 = v70;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v11[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1CCE3476C(v16, v11, v80, a3);
          }
          else
          {
            sub_1CCE3476C(v11, v16, v80, a3);
            sub_1CCE3476C(v11 + 1, v16 - 1, a2 - 2, a3);
            sub_1CCE3476C(v11 + 2, &v11[v15 + 1], a2 - 3, a3);
            sub_1CCE3476C(v16 - 1, v16, &v11[v15 + 1], a3);
            uint64_t v17 = *v11;
            *unsigned int v11 = *v16;
            *uint64_t v16 = v17;
          }
          --a4;
          if ((a5 & 1) != 0
            || (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *(v11 - 1), *v11) & 1) != 0)
          {
            break;
          }
          uint64_t v31 = *v11;
          unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *v11, *v80);
          if (result)
          {
            BOOL v12 = v11;
            do
            {
              uint64_t v32 = v12[1];
              ++v12;
              unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v33 = v11 + 1;
            do
            {
              BOOL v12 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
              unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v31, *v12);
            }
            while (!result);
          }
          uint64_t v34 = a2;
          if (v12 < a2)
          {
            uint64_t v34 = a2;
            do
            {
              BOOL v35 = *--v34;
              unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v12 < v34)
          {
            uint64_t v36 = *v12;
            void *v12 = *v34;
            llvm::ConstantInt *v34 = v36;
            do
            {
              uint64_t v37 = v12[1];
              ++v12;
            }
            while (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v31, v37));
            do
            {
              int v38 = *--v34;
              unint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v31, v38);
            }
            while ((result & 1) != 0);
          }
          uint64_t v39 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *unsigned int v11 = *v39;
          }
          a5 = 0;
          *uint64_t v39 = v31;
        }
        uint64_t v18 = 0;
        unsigned int v19 = *v11;
        do
          char v20 = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v11[++v18], v19);
        while ((v20 & 1) != 0);
        uint64_t v21 = &v11[v18];
        __int16 v22 = a2;
        if (v18 == 1)
        {
          __int16 v22 = a2;
          do
          {
            if (v21 >= v22) {
              break;
            }
            uint64_t v24 = *--v22;
          }
          while ((llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v24, v19) & 1) == 0);
        }
        else
        {
          do
            __int16 v23 = *--v22;
          while (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v23, v19));
        }
        BOOL v12 = &v11[v18];
        if (v21 < v22)
        {
          __int16 v25 = v22;
          do
          {
            uint64_t v26 = *v12;
            void *v12 = *v25;
            *__int16 v25 = v26;
            do
            {
              unsigned int v27 = v12[1];
              ++v12;
            }
            while ((llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v27, v19) & 1) != 0);
            do
              int v28 = *--v25;
            while (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v28, v19));
          }
          while (v12 < v25);
        }
        unsigned int v29 = v12 - 1;
        if (v12 - 1 != v11) {
          *unsigned int v11 = *v29;
        }
        uint64_t *v29 = v19;
        if (v21 >= v22) {
          break;
        }
LABEL_31:
        unint64_t result = sub_1CCE33E9C(v11, v12 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v30 = sub_1CCE34860(v11, v12 - 1, a3);
      unint64_t result = sub_1CCE34860(v12, a2, a3);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_31;
      }
    }
    a2 = v12 - 1;
    if (!v30) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CCE34680(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, const llvm::Value **a4, const llvm::Value **a5, uint64_t a6)
{
  sub_1CCE34A34(a1, a2, a3, a4, a6);
  uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a6 + 32), *a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a6 + 32), *a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a6 + 32), *a3, *a2);
      if (result)
      {
        unint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a6 + 32), *a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CCE3476C(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, uint64_t a4)
{
  char v8 = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a4 + 32), *a2, *a1);
  uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a4 + 32), *a3, *a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a4 + 32), *a3, v10);
      if (result)
      {
        uint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    unsigned int v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a4 + 32), *a2, *a1);
    if (result)
    {
      BOOL v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_1CCE34860(const llvm::Instruction **a1, const llvm::Instruction **a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *(a2 - 1), *a1))
      {
        char v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1CCE3476C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CCE34A34(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CCE34680(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      sub_1CCE3476C(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), *v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        *(const llvm::Instruction **)((char *)a1 + v14 + 24) = *(const llvm::Instruction **)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        char v15 = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a3 + 32), v13, *(const llvm::Instruction **)((char *)a1 + v14 + 8));
        v14 -= 8;
        if ((v15 & 1) == 0)
        {
          uint64_t v16 = (const llvm::Instruction **)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1CCE34A34(const llvm::Instruction **a1, const llvm::Value **a2, const llvm::Value **a3, const llvm::Value **a4, uint64_t a5)
{
  sub_1CCE3476C(a1, a2, a3, a5);
  uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a5 + 32), *a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a5 + 32), *a3, *a2);
    if (result)
    {
      int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(void *)a5 + 32), *a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1CCE34AF4(void *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  v123[8] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a3 - 32);
  uint64_t v9 = sub_1CB83544C(*(void *)(*(void *)(*(void *)(a3 + 40) + 56) + 40) + 272, **(void **)(a3 - 64));
  uint64_t v10 = -2;
  if (v11 == 1) {
    unint64_t v12 = -2;
  }
  else {
    unint64_t v12 = (unint64_t)(v9 + 7) >> 3;
  }
  llvm::Instruction::getAAMetadata((uint64_t ***)a3, v114);
  v113[0] = v8;
  v113[1] = v12;
  uint64_t v13 = *(a2 - 4);
  uint64_t v14 = sub_1CB83544C(*(void *)(*(void *)(a2[5] + 56) + 40) + 272, *a2);
  if (v15 == 1) {
    unint64_t v16 = -2;
  }
  else {
    unint64_t v16 = (unint64_t)(v14 + 7) >> 3;
  }
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v112);
  v111[0] = v13;
  v111[1] = v16;
  if (llvm::AAResults::alias(a1[3], (uint64_t)v111, (uint64_t)v113))
  {
    uint64_t v20 = a4[5];
    v116 = v118;
    uint64_t v117 = 0x400000000;
    uint64_t v18 = v20 + 40;
    uint64_t v21 = *(void *)(v20 + 40);
    __int16 v22 = (llvm *)v20;
    v108 = a1;
    if (v21 == v20 + 40) {
      goto LABEL_47;
    }
    if (v21) {
      uint64_t v23 = v21 - 24;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = *(unsigned __int8 *)(v23 + 16);
    if (v24 != 30)
    {
      unsigned int v104 = 2;
      __int16 v22 = (llvm *)v20;
      switch(*(unsigned char *)(v23 + 16))
      {
        case 0x1E:
LABEL_133:
          __break(1u);
          uint64_t v105 = v18 - 32 * (void)v17;
          uint64_t v37 = v105 + 32 * v24;
          if (*(void *)v37)
          {
            **(void **)(v37 + 16) = *(void *)(v37 + 8);
            uint64_t v81 = *(void *)(v37 + 8);
            if (v81) {
              *(void *)(v81 + 16) = *(void *)(v37 + 16);
            }
          }
          *(void *)uint64_t v37 = a1;
          if (a1)
          {
            uint64_t v40 = a1[1];
            uint64_t v39 = a1 + 1;
            uint64_t v38 = v40;
            uint64_t v41 = v105 + 32 * v24;
            *(void *)(v41 + 8) = v40;
            if (v40) {
              *(void *)(v38 + 16) = v41 + 8;
            }
            *(void *)(v41 + 16) = v39;
            *uint64_t v39 = v37;
          }
          int v42 = *(_DWORD *)(v18 + 20);
          uint64_t v43 = v42 & 0x7FFFFFF;
          if ((v42 & 0x40000000) != 0) {
            uint64_t v44 = *(void *)(v18 - 8);
          }
          else {
            uint64_t v44 = v18 - 32 * v43;
          }
          uint64_t v45 = *(unsigned int *)(v18 + 60);
          *(void *)(v44 + 32 * v45 + 8 * (v43 - 1)) = v20;
          uint64_t v46 = *(a2 - 4);
          int v47 = *(_DWORD *)(v18 + 20);
          if ((v47 & 0x7FFFFFF) == v45)
          {
            unsigned int v84 = v45 + (v45 >> 1);
            if (v84 <= 2) {
              uint64_t v85 = 2;
            }
            else {
              uint64_t v85 = v84;
            }
            *(_DWORD *)(v18 + 60) = v85;
            if ((v47 & 0x40000000) != 0) {
              unsigned int v86 = *(uint64_t **)(v18 - 8);
            }
            else {
              unsigned int v86 = (uint64_t *)(v18 - 32 * v45);
            }
            v87 = operator new(40 * v85);
            *(void *)(v18 - 8) = v87;
            v88 = v87;
            do
            {
              void *v88 = 0;
              v88[1] = 0;
              v88[2] = 0;
              v88[3] = v18;
              v88 += 4;
            }
            while (v88 != &v87[4 * v85]);
            int v89 = *(_DWORD *)(v18 + 20);
            if ((v89 & 0x40000000) != 0) {
              uint64_t v90 = (uint64_t)v87;
            }
            else {
              uint64_t v90 = v18 - 32 * (v89 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)&v119, v86, &v86[4 * v45], v90);
            if (v45)
            {
              memmove((void *)(v90 + 32 * v85), &v86[4 * v45], 8 * v45);
              uint64_t v91 = 4 * v45;
              do
              {
                v92 = &v86[v91];
                if (v86[v91 - 4])
                {
                  *(void *)*(v92 - 2) = *(v92 - 3);
                  uint64_t v93 = *(v92 - 3);
                  if (v93) {
                    *(void *)(v93 + 16) = *(v92 - 2);
                  }
                }
                v91 -= 4;
              }
              while (v91 * 8);
            }
            operator delete(v86);
            int v47 = *(_DWORD *)(v18 + 20);
            uint64_t v10 = v107;
          }
          uint64_t v48 = (v47 + 1) & 0x7FFFFFF;
          *(_DWORD *)(v18 + 20) = v47 & 0xF8000000 | (v47 + 1) & 0x7FFFFFF;
          uint64_t v49 = (v48 - 1);
          if ((v47 & 0x40000000) != 0) {
            uint64_t v50 = *(void *)(v18 - 8);
          }
          else {
            uint64_t v50 = v18 - 32 * v48;
          }
          uint64_t v51 = v50 + 32 * v49;
          if (*(void *)v51)
          {
            **(void **)(v51 + 16) = *(void *)(v51 + 8);
            uint64_t v82 = *(void *)(v51 + 8);
            if (v82) {
              *(void *)(v82 + 16) = *(void *)(v51 + 16);
            }
          }
          *(void *)uint64_t v51 = v46;
          if (v46)
          {
            uint64_t v54 = *(void *)(v46 + 8);
            uint64_t v53 = (void *)(v46 + 8);
            uint64_t v52 = v54;
            uint64_t v55 = v50 + 32 * v49;
            *(void *)(v55 + 8) = v54;
            if (v54) {
              *(void *)(v52 + 16) = v55 + 8;
            }
            *(void *)(v55 + 16) = v53;
            *uint64_t v53 = v51;
          }
          int v56 = *(_DWORD *)(v18 + 20);
          uint64_t v57 = v56 & 0x7FFFFFF;
          if ((v56 & 0x40000000) != 0) {
            uint64_t v58 = *(void *)(v18 - 8);
          }
          else {
            uint64_t v58 = v18 - 32 * v57;
          }
          uint64_t v59 = *(unsigned int *)(v18 + 60);
          *(void *)(v58 + 32 * v59 + 8 * (v57 - 1)) = v10;
          int v60 = *(_DWORD *)(v18 + 20);
          if ((v60 & 0x7FFFFFF) == v59)
          {
            unsigned int v94 = v59 + (v59 >> 1);
            if (v94 <= 2) {
              uint64_t v95 = 2;
            }
            else {
              uint64_t v95 = v94;
            }
            *(_DWORD *)(v18 + 60) = v95;
            if ((v60 & 0x40000000) != 0) {
              v96 = *(uint64_t **)(v18 - 8);
            }
            else {
              v96 = (uint64_t *)(v18 - 32 * v59);
            }
            v97 = operator new(40 * v95);
            *(void *)(v18 - 8) = v97;
            v98 = v97;
            do
            {
              void *v98 = 0;
              v98[1] = 0;
              v98[2] = 0;
              v98[3] = v18;
              v98 += 4;
            }
            while (v98 != &v97[4 * v95]);
            int v99 = *(_DWORD *)(v18 + 20);
            if ((v99 & 0x40000000) != 0) {
              uint64_t v100 = (uint64_t)v97;
            }
            else {
              uint64_t v100 = v18 - 32 * (v99 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)&v119, v96, &v96[4 * v59], v100);
            if (v59)
            {
              memmove((void *)(v100 + 32 * v95), &v96[4 * v59], 8 * v59);
              uint64_t v101 = 4 * v59;
              do
              {
                v102 = &v96[v101];
                if (v96[v101 - 4])
                {
                  *(void *)*(v102 - 2) = *(v102 - 3);
                  uint64_t v103 = *(v102 - 3);
                  if (v103) {
                    *(void *)(v103 + 16) = *(v102 - 2);
                  }
                }
                v101 -= 4;
              }
              while (v101 * 8);
            }
            operator delete(v96);
            int v60 = *(_DWORD *)(v18 + 20);
            uint64_t v10 = v107;
          }
          uint64_t v61 = (v60 + 1) & 0x7FFFFFF;
          *(_DWORD *)(v18 + 20) = v60 & 0xF8000000 | (v60 + 1) & 0x7FFFFFF;
          uint64_t v62 = (v61 - 1);
          if ((v60 & 0x40000000) != 0) {
            uint64_t v63 = *(void *)(v18 - 8);
          }
          else {
            uint64_t v63 = v18 - 32 * v61;
          }
          uint64_t v64 = v63 + 32 * v62;
          if (*(void *)v64)
          {
            **(void **)(v64 + 16) = *(void *)(v64 + 8);
            uint64_t v83 = *(void *)(v64 + 8);
            if (v83) {
              *(void *)(v83 + 16) = *(void *)(v64 + 16);
            }
          }
          *(void *)uint64_t v64 = a4;
          if (a4)
          {
            uint64_t v67 = a4[1];
            uint64_t v66 = a4 + 1;
            uint64_t v65 = v67;
            uint64_t v68 = v63 + 32 * v62;
            *(void *)(v68 + 8) = v67;
            if (v67) {
              *(void *)(v65 + 16) = v68 + 8;
            }
            *(void *)(v68 + 16) = v66;
            *uint64_t v66 = v64;
          }
          int v69 = *(_DWORD *)(v18 + 20);
          uint64_t v70 = v69 & 0x7FFFFFF;
          if ((v69 & 0x40000000) != 0) {
            uint64_t v71 = *(void *)(v18 - 8);
          }
          else {
            uint64_t v71 = v18 - 32 * v70;
          }
          *(void *)(v71 + 32 * *(unsigned int *)(v18 + 60) + 8 * (v70 - 1)) = v109;
          if (v117 >= HIDWORD(v117)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v72 = (char *)v116 + 16 * v117;
          *int v72 = v20;
          v72[1] = v10 & 0xFFFFFFFFFFFFFFFBLL;
          unsigned int v73 = v117 + 1;
          LODWORD(v117) = v73;
          unint64_t v74 = (unint64_t)v110 & 0xFFFFFFFFFFFFFFFBLL;
          if (v73 >= HIDWORD(v117)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v75 = (char *)v116 + 16 * v73;
          *uint64_t v75 = v20;
          v75[1] = v74;
          unsigned int v76 = v117 + 1;
          LODWORD(v117) = v76;
          if (v76 >= HIDWORD(v117)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v77 = (uint64_t *)((char *)v116 + 16 * v76);
          *uint64_t v77 = v10;
          v77[1] = v109 & 0xFFFFFFFFFFFFFFFBLL;
          unsigned int v78 = v117 + 1;
          LODWORD(v117) = v78;
          if (v78 >= HIDWORD(v117)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v79 = (uint64_t *)((char *)v116 + 16 * v78);
          *uint64_t v79 = v10;
          v79[1] = v74;
          LODWORD(v117) = v117 + 1;
          uint64_t v80 = v108[4];
          sub_1CBFEBC30((uint64_t)&v119, (unint64_t *)v116, v117, 1u);
          llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v80, (uint64_t)&v119, 0);
          if (v122 != v123) {
            free(v122);
          }
          sub_1CBFEECCC((uint64_t)&v121);
          sub_1CBFEECCC((uint64_t)&v119);
          if (v115 != v106) {
            free(v115);
          }
          if (v116 != v118) {
            free(v116);
          }
          return v18;
        case 0x1F:
          unsigned int v104 = (*(_DWORD *)(v23 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_127;
        case 0x20:
        case 0x26:
          unsigned int v104 = (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_127;
        case 0x21:
          goto LABEL_19;
        case 0x24:
          unsigned int v104 = *(_WORD *)(v23 + 18) & 1;
          goto LABEL_127;
        case 0x25:
          unsigned int v104 = 1;
          goto LABEL_19;
        case 0x27:
          unsigned int v104 = *(_DWORD *)(v23 + 80) + 1;
LABEL_127:
          __int16 v22 = (llvm *)v20;
          if (!v104) {
            goto LABEL_47;
          }
          goto LABEL_19;
        default:
          goto LABEL_47;
      }
    }
    if ((*(_DWORD *)(v23 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v104 = 2;
    }
    else {
      unsigned int v104 = 1;
    }
LABEL_19:
    v110 = (llvm::BasicBlock *)(v20 + 40);
    uint64_t v10 = 0;
    uint64_t v24 = 0;
    a1 = 0;
    uint64_t v25 = v23 - 64;
    uint64_t v18 = v104;
    while (1)
    {
      int v26 = *(unsigned __int8 *)(v23 + 16);
      if (v26 == 30)
      {
        BOOL v30 = (uint64_t *)(v23 - 32 - 32 * (void)a1);
      }
      else
      {
        uint64_t v29 = (v26 - 31);
        BOOL v30 = (uint64_t *)(v23 - 32);
        switch(v29)
        {
          case 1:
          case 7:
            int v33 = *(_DWORD *)(v23 + 20);
            if ((v33 & 0x40000000) != 0) {
              uint64_t v34 = *(void *)(v23 - 8);
            }
            else {
              uint64_t v34 = v23 - 32 * (v33 & 0x7FFFFFF);
            }
            BOOL v30 = (uint64_t *)(v34 + 32 * (a1 + 1));
            break;
          case 2:
            if (a1) {
              uint64_t v35 = -64;
            }
            else {
              uint64_t v35 = -96;
            }
            BOOL v30 = (uint64_t *)(v23 + v35);
            break;
          case 3:
          case 4:
            goto LABEL_133;
          case 5:
            if ((*(_WORD *)(v23 + 18) & 1) == 0)
            {
              uint64_t v27 = 0;
              goto LABEL_24;
            }
            BOOL v30 = (uint64_t *)(v23 + 32 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF));
            break;
          case 6:
            break;
          case 8:
            if (a1) {
              BOOL v30 = (uint64_t *)(v25 - 32 * *(unsigned int *)(v23 + 80));
            }
            else {
              BOOL v30 = (uint64_t *)(v23 - 64 - 32 * *(unsigned int *)(v23 + 80));
            }
            break;
          default:
            int v31 = *(_DWORD *)(v23 + 20);
            if ((v31 & 0x40000000) != 0) {
              uint64_t v32 = *(void *)(v23 - 8);
            }
            else {
              uint64_t v32 = v23 - 32 * (v31 & 0x7FFFFFF);
            }
            BOOL v30 = (uint64_t *)(v32 + 32 * (v10 & 0xFFFFFFFE) + 32);
            break;
        }
      }
      uint64_t v27 = *v30;
LABEL_24:
      if (v24 >= HIDWORD(v117)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v17 = v116;
      int v28 = (char *)v116 + 16 * v24;
      *int v28 = v20;
      v28[1] = v27 | 4;
      uint64_t v24 = (v117 + 1);
      LODWORD(v117) = v117 + 1;
      a1 = (void *)((char *)a1 + 1);
      v10 += 2;
      v25 += 32;
      if ((void *)v18 == a1)
      {
        __int16 v22 = (llvm *)a4[5];
        a1 = v108;
LABEL_47:
        uint64_t v36 = (llvm::DomTreeUpdater *)a1[5];
        v119 = "alias_cont";
        __int16 v120 = 259;
        sub_1CD126150(v22, (llvm::BasicBlock *)a4, 0, 0, v36, 0, (llvm::Twine *)&v119, 0);
      }
    }
  }
  return *(a2 - 4);
}

void sub_1CCE35FB4(uint64_t a1, uint64_t a2, const llvm::APInt *a3, unsigned __int16 a4, __int16 a5, unint64_t a6, char a7, uint64_t a8, uint64_t a9, unsigned int a10, unsigned int a11, char a12, llvm::PointerType *a13, uint64_t a14)
{
  unint64_t v16 = HIDWORD(a6);
  if (a7) {
    LODWORD(v16) = a6;
  }
  uint64_t v17 = v16;
  uint64_t v18 = **(void **)(a14 + 64);
  unsigned int v19 = *(llvm::ConstantInt **)(v18 + 1984);
  unint64_t v20 = *(unsigned int *)(v18 + 1992);
  unsigned int v49 = v20 >> 8;
  if (v20 >> 8 > 0x40) {
    operator new[]();
  }
  if (v20 <= 0xFF) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v20) + 63);
  }
  uint64_t v48 = (const char *)(v21 & v17);
  __int16 v22 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v48, a3);
  if (v49 >= 0x41 && v48) {
    MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
  }
  __int16 v50 = 257;
  uint64_t v23 = sub_1CC09A1EC(a14, a9, (uint64_t)v22, (uint64_t)&v48, 0, 0);
  __int16 v47 = 257;
  uint64_t v24 = sub_1CB844A3C(a14, v23, a8, (uint64_t)v46, 0, 0);
  uint64_t v25 = (llvm::Type *)(*(_DWORD *)(*(void *)a3 + 8) >> 8);
  int v26 = (llvm::Value *)llvm::PointerType::get(a13, v25);
  __int16 v50 = 257;
  int v28 = (uint64_t *)sub_1CC277FE0(a14, a3, v26, (uint64_t)&v48, v27);
  __int16 v50 = 257;
  uint64_t v29 = sub_1CB930F7C((uint64_t *)a14, (uint64_t)a13, v28, (const char *)v24, (uint64_t)&v48);
  llvm::FixedVectorType::get(a13, (llvm::Type *)(a11 * a10));
  int v31 = v30;
  uint64_t v32 = (llvm::Value *)llvm::PointerType::get(v30, v25);
  uint64_t v48 = "col.cast";
  __int16 v50 = 259;
  uint64_t v35 = sub_1CC277FE0(a14, v29, v32, (uint64_t)&v48, v33);
  uint64_t v36 = **(void **)(a14 + 64);
  uint64_t v37 = *(llvm::ConstantInt **)(v36 + 1984);
  unint64_t v38 = *(unsigned int *)(v36 + 1992);
  unsigned int v49 = v38 >> 8;
  if (v38 >> 8 > 0x40) {
    operator new[]();
  }
  if (v38 <= 0xFF) {
    unint64_t v39 = 0;
  }
  else {
    unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v38) + 63);
  }
  uint64_t v48 = (const char *)(v39 & v17);
  uint64_t v41 = llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v48, v34);
  if (v49 >= 0x41 && v48) {
    MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
  }
  sub_1CCE366F8(a1, a2, *((llvm::FixedVectorType **)v31 + 3), v35, a4, (uint64_t)v41, a5, v40, a10, a11, a12, a14);
}

void sub_1CCE362F0(uint64_t a1, uint64_t a2, const llvm::APInt *a3, unsigned __int16 a4, __int16 a5, unint64_t a6, char a7, uint64_t a8, uint64_t a9, llvm::PointerType *a10, uint64_t a11)
{
  v53[19] = *MEMORY[0x1E4F143B8];
  unint64_t v15 = HIDWORD(a6);
  if (a7) {
    LODWORD(v15) = a6;
  }
  uint64_t v16 = v15;
  uint64_t v17 = **(void **)(a11 + 64);
  uint64_t v18 = *(llvm::ConstantInt **)(v17 + 1984);
  unint64_t v19 = *(unsigned int *)(v17 + 1992);
  unsigned int v47 = v19 >> 8;
  if (v19 >> 8 > 0x40) {
    operator new[]();
  }
  if (v19 <= 0xFF) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v19) + 63);
  }
  uint64_t v46 = (const char *)(v20 & v16);
  unint64_t v21 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v46, a3);
  if (v47 >= 0x41 && v46) {
    MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
  }
  __int16 v48 = 257;
  __int16 v22 = sub_1CC09A1EC(a11, a9, (uint64_t)v21, (uint64_t)&v46, 0, 0);
  __int16 v45 = 257;
  uint64_t v23 = sub_1CB844A3C(a11, v22, a8, (uint64_t)v44, 0, 0);
  uint64_t v24 = (llvm::Type *)(*(_DWORD *)(*(void *)a3 + 8) >> 8);
  uint64_t v25 = (llvm::Value *)llvm::PointerType::get(a10, v24);
  __int16 v48 = 257;
  uint64_t v27 = (uint64_t *)sub_1CC277FE0(a11, a3, v25, (uint64_t)&v46, v26);
  __int16 v48 = 257;
  int v28 = sub_1CB930F7C((uint64_t *)a11, (uint64_t)a10, v27, (const char *)v23, (uint64_t)&v46);
  if (*(unsigned char *)(a2 + 160))
  {
    uint64_t v29 = (_DWORD *)(a2 + 8);
    BOOL v30 = (_DWORD *)(***(void ***)a2 + 32);
  }
  else
  {
    BOOL v30 = (_DWORD *)(a2 + 8);
    uint64_t v29 = (_DWORD *)(***(void ***)a2 + 32);
  }
  llvm::FixedVectorType::get(a10, (llvm::Type *)(*v29 * *v30));
  uint64_t v32 = (uint64_t)v31;
  int v33 = (llvm::Value *)llvm::PointerType::get(v31, v24);
  uint64_t v46 = "col.cast";
  __int16 v48 = 259;
  uint64_t v36 = sub_1CC277FE0(a11, v28, v33, (uint64_t)&v46, v34);
  v49[0] = v50;
  v49[1] = (void *)0x1000000000;
  if (*(_DWORD *)(a2 + 8)) {
    sub_1CBB08064((uint64_t)v49, a2);
  }
  v50[8] = *(_OWORD *)(a2 + 144);
  char v51 = *(unsigned char *)(a2 + 160);
  uint64_t v37 = **(void **)(a11 + 64);
  unint64_t v38 = *(llvm::ConstantInt **)(v37 + 1984);
  unint64_t v39 = *(unsigned int *)(v37 + 1992);
  unsigned int v47 = v39 >> 8;
  if (v39 >> 8 > 0x40) {
    operator new[]();
  }
  if (v39 <= 0xFF) {
    unint64_t v40 = 0;
  }
  else {
    unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v39) + 63);
  }
  uint64_t v46 = (const char *)(v40 & v16);
  uint64_t v41 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v46, v35);
  if (v47 >= 0x41 && v46) {
    MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
  }
  sub_1CCE36D44((uint64_t)&v52, a1, v32, (unsigned int *)v49, v36, a4, (uint64_t)v41, a5, a11);
  if (v52 != v53) {
    free(v52);
  }
  if (v49[0] != v50) {
    free(v49[0]);
  }
}

void sub_1CCE366F8(uint64_t a1, uint64_t a2, llvm::FixedVectorType *this, llvm::CastInst *a4, unsigned __int16 a5, uint64_t a6, __int16 a7, int a8, unsigned int a9, unsigned int a10, char a11, uint64_t a12)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (a11) {
    uint64_t v16 = (llvm::Type *)a9;
  }
  else {
    uint64_t v16 = (llvm::Type *)a10;
  }
  if (a11) {
    uint64_t v17 = a10;
  }
  else {
    uint64_t v17 = a9;
  }
  uint64_t v42 = v17;
  llvm::FixedVectorType::get(this, v16);
  uint64_t v41 = v18;
  unint64_t v19 = (llvm::Value *)llvm::PointerType::get(this, (llvm::Type *)(*(_DWORD *)(*(void *)a4 + 8) >> 8));
  v52[8] = 257;
  unint64_t v21 = (uint64_t *)sub_1CC277FE0(a12, a4, v19, (uint64_t)&v50, v20);
  uint64_t v22 = 0;
  __int16 v50 = v52;
  uint64_t v51 = 0x1000000000;
  long long v53 = 0uLL;
  BOOL v54 = dword_1EBCF6F18 == 0;
  do
  {
    uint64_t v23 = *(llvm::Type **)a6;
    if ((*(_DWORD *)(*(void *)a6 + 8) & 0xFE) == 0x12) {
      uint64_t v23 = (llvm::Type *)**((void **)v23 + 2);
    }
    PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v23);
    uint64_t v25 = llvm::IntegerType::get(*(llvm::IntegerType **)(a12 + 64), PrimitiveSizeInBits);
    uint64_t v27 = *(llvm::ConstantInt **)v25;
    unsigned int v28 = *(_DWORD *)(v25 + 8);
    unsigned int v48 = v28 >> 8;
    if (v28 >> 8 > 0x40) {
      operator new[]();
    }
    if (v28 <= 0xFF) {
      unint64_t v29 = 0;
    }
    else {
      unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v28) + 63);
    }
    unsigned int v47 = (const char *)(v29 & v22);
    BOOL v30 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v47, v26);
    if (v48 >= 0x41 && v47) {
      MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
    }
    int v31 = sub_1CCE36AF4(v21, (uint64_t)v30, a6, v16, this, (uint64_t *)a12);
    char v32 = sub_1CCE36C38(a2, v22, a6, this, a5);
    __int16 v45 = "col.load";
    __int16 v46 = 259;
    int v33 = operator new(0x60uLL);
    v33[13] = v33[13] & 0x38000000 | 1;
    uint64_t v34 = (llvm::Instruction *)(v33 + 8);
    *(void *)int v33 = 0;
    *((void *)v33 + 1) = 0;
    *((void *)v33 + 2) = 0;
    *((void *)v33 + 3) = v33 + 8;
    __int16 v49 = 257;
    llvm::LoadInst::LoadInst((llvm::Value *)(v33 + 8), v41, (uint64_t)v31, &v47, a7, v32, 0);
    (*(void (**)(void, llvm::Instruction *, const char **, void, void))(**(void **)(a12 + 80) + 16))(*(void *)(a12 + 80), v34, &v45, *(void *)(a12 + 48), *(void *)(a12 + 56));
    uint64_t v35 = *(unsigned int *)(a12 + 8);
    if (v35)
    {
      uint64_t v36 = *(void *)a12;
      uint64_t v37 = *(void *)a12 + 16 * v35;
      do
      {
        llvm::Instruction::setMetadata(v34, *(_DWORD *)v36, *(llvm::MDNode **)(v36 + 8));
        v36 += 16;
      }
      while (v36 != v37);
    }
    if (v51 >= (unint64_t)HIDWORD(v51)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v50 + v51) = v34;
    LODWORD(v51) = v51 + 1;
    ++v22;
  }
  while (v22 != v42);
  unsigned int v38 = sub_1CCE33C80(a2, **(void **)v50);
  int v39 = v51;
  DWORD1(v53) += v51 * v38;
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x1000000000;
  if (v39) {
    sub_1CBB08064(a1, (uint64_t)&v50);
  }
  *(_OWORD *)(a1 + 144) = v53;
  *(unsigned char *)(a1 + 160) = v54;
  if (v50 != v52) {
    free(v50);
  }
}

llvm::Instruction *sub_1CCE36AF4(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::Type *a4, llvm::FixedVectorType *a5, uint64_t *a6)
{
  uint64_t v9 = a1;
  unsigned int v10 = *(_DWORD *)(*a1 + 8);
  v22[0] = "vec.start";
  __int16 v23 = 259;
  int v11 = sub_1CC09A1EC((uint64_t)a6, a2, a3, (uint64_t)v22, 0, 0);
  if (*((unsigned char *)v11 + 16) != 16) {
    goto LABEL_4;
  }
  uint64_t v12 = *((unsigned int *)v11 + 8);
  if (v12 > 0x40)
  {
    int v17 = 0;
    int64_t v18 = (unint64_t)(v12 + 63) >> 6;
    do
    {
      if (v18-- < 1) {
        break;
      }
      unint64_t v20 = *(void *)(*((void *)v11 + 3) + 8 * v18);
      v17 += __clz(v20);
    }
    while (!v20);
    int v21 = v12 | 0xFFFFFFC0;
    if ((v12 & 0x3F) == 0) {
      int v21 = 0;
    }
    if (v17 + v21 != v12) {
      goto LABEL_4;
    }
  }
  else if (*((void *)v11 + 3))
  {
LABEL_4:
    v22[0] = "vec.gep";
    __int16 v23 = 259;
    uint64_t v9 = (uint64_t *)sub_1CB930F7C(a6, (uint64_t)a5, v9, (const char *)v11, (uint64_t)v22);
  }
  llvm::FixedVectorType::get(a5, a4);
  uint64_t v14 = (llvm::Value *)llvm::PointerType::get(v13, (llvm::Type *)(v10 >> 8));
  v22[0] = "vec.cast";
  __int16 v23 = 259;
  return sub_1CC277FE0((uint64_t)a6, (llvm::CastInst *)v9, v14, (uint64_t)v22, v15);
}

uint64_t sub_1CCE36C38(uint64_t a1, unsigned int a2, uint64_t a3, llvm::Type *a4, uint64_t a5)
{
  uint64_t Alignment = a5;
  if ((a5 & 0xFF00) == 0) {
    uint64_t Alignment = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 8), a4, 1);
  }
  if (a2)
  {
    unint64_t v10 = sub_1CB83544C(*(void *)(a1 + 8), (uint64_t)a4);
    if (a3 && *(unsigned char *)(a3 + 16) == 16)
    {
      uint64_t v12 = (void *)(a3 + 24);
      if (*(_DWORD *)(a3 + 32) >= 0x41u) {
        uint64_t v12 = (void *)*v12;
      }
      unint64_t v13 = *v12 * v10;
      if (v11 == 1) {
      unint64_t v14 = (v13 >> 3) * a2;
      }
    }
    else
    {
      if (v11 == 1)
      {
        unint64_t v16 = v10;
        unint64_t v10 = v16;
      }
      unint64_t v14 = v10 >> 3;
    }
    return 63 - __clz((v14 | (1 << Alignment)) & -(uint64_t)(v14 | (1 << Alignment)));
  }
  return Alignment;
}

void sub_1CCE36D44(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, llvm::CastInst *a5, uint64_t a6, uint64_t a7, __int16 a8, uint64_t a9)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unint64_t v15 = (llvm::Value *)llvm::PointerType::get(*(llvm::PointerType **)(a3 + 24), (llvm::Type *)(*(_DWORD *)(*(void *)a5 + 8) >> 8));
  v42[8] = 257;
  uint64_t v37 = (uint64_t *)sub_1CC277FE0(a9, a5, v15, (uint64_t)&v40, v16);
  int v17 = *(uint64_t ***)a4;
  uint64_t v18 = a4[2];
  if (v18)
  {
    uint64_t v35 = a1;
    uint64_t v36 = *(uint64_t ***)a4;
    uint64_t v19 = 0;
    uint64_t v20 = (unsigned __int16)a6;
    uint64_t v21 = 8 * v18;
    do
    {
      uint64_t v22 = *(llvm::Type **)a7;
      if ((*(_DWORD *)(*(void *)a7 + 8) & 0xFE) == 0x12) {
        uint64_t v22 = (llvm::Type *)**((void **)v22 + 2);
      }
      PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(v22);
      uint64_t v24 = llvm::IntegerType::get(*(llvm::IntegerType **)(a9 + 64), PrimitiveSizeInBits);
      int v26 = *(llvm::ConstantInt **)v24;
      unsigned int v27 = *(_DWORD *)(v24 + 8);
      LODWORD(v41) = v27 >> 8;
      if (v27 >> 8 > 0x40) {
        operator new[]();
      }
      if (v27 <= 0xFF) {
        unint64_t v28 = 0;
      }
      else {
        unint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v27) + 63);
      }
      unint64_t v40 = (void *)(v28 & v19);
      unint64_t v29 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v40, v25);
      if (v41 >= 0x41 && v40) {
        MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
      }
      BOOL v30 = sub_1CCE36AF4(v37, (uint64_t)v29, a7, (llvm::Type *)*(unsigned int *)(***(void ***)a4 + 32), *(llvm::FixedVectorType **)(a3 + 24), (uint64_t *)a9);
      uint64_t v31 = (uint64_t)v36[v19];
      unint64_t v32 = a6 & 0xFFFFFFFFFFFF0000 | sub_1CCE36C38(a2, v19, a7, *(llvm::Type **)(a3 + 24), v20);
      a6 = v32 | 0x100;
      sub_1CC27BF8C((uint64_t *)a9, v31, (uint64_t)v30, v32 | 0x100, a8);
      ++v19;
      v21 -= 8;
    }
    while (v21);
    int v17 = *(uint64_t ***)a4;
    a1 = v35;
  }
  unint64_t v40 = v42;
  uint64_t v41 = 0x1000000000;
  long long v43 = 0uLL;
  BOOL v44 = dword_1EBCF6F18 == 0;
  unsigned int v33 = sub_1CCE33C80(a2, **v17);
  int v34 = v41;
  LODWORD(v43) = v43 + a4[2] * v33;
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x1000000000;
  if (v34) {
    sub_1CBB08064(a1, (uint64_t)&v40);
  }
  *(_OWORD *)(a1 + 144) = v43;
  *(unsigned char *)(a1 + 160) = v44;
  if (v40 != v42) {
    free(v40);
  }
}

void sub_1CCE3705C(uint64_t a1, uint64_t a2, llvm::CastInst *a3, unsigned __int16 a4, uint64_t a5, __int16 a6, uint64_t a7, char a8)
{
  uint64_t v16 = 0;
  v38[1] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = **(void **)a2;
  v30[0] = v31;
  v30[1] = (void *)0x200000000;
  v31[6] = v17;
  v31[7] = &v37;
  v31[8] = v38;
  v31[9] = 0;
  int v32 = 0;
  __int16 v33 = 512;
  char v34 = 7;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = &unk_1F2616E88;
  v38[0] = &unk_1F2617008;
  uint64_t v18 = a2 + 24;
  uint64_t v20 = *(void *)(a2 + 40);
  uint64_t v19 = *(unsigned __int8 **)(a2 + 48);
  v31[4] = v20;
  v31[5] = v18;
  int v26 = v19;
  if (v19)
  {
    llvm::MetadataTracking::track((uint64_t)&v26, v19, 2);
    uint64_t v16 = (uint64_t)v26;
  }
  sub_1CB8461A4((uint64_t)v30, 0, v16);
  if (v26)
  {
    int v22 = *v26;
    if ((v22 - 4) > 0x1E)
    {
      if ((v22 - 3) >= 0xFFFFFFFE) {
        uint64_t v25 = v26;
      }
      else {
        uint64_t v25 = 0;
      }
      if ((v22 - 3) < 0xFFFFFFFE)
      {
        if (v22 == 3) {
          *((void *)v26 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v24 = (unint64_t)(v25 + 8);
    }
    else
    {
      if ((v26[1] & 0x7F) != 2 && !*((_DWORD *)v26 + 3)) {
        goto LABEL_4;
      }
      uint64_t v23 = *((void *)v26 + 2);
      if ((v23 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8;
      if (!v24) {
        goto LABEL_4;
      }
    }
    unsigned int v27 = &v26;
    sub_1CC5FA668(v24 + 16, &v27);
  }
LABEL_4:
  sub_1CCE366F8((uint64_t)v28, a1, *(llvm::FixedVectorType **)(*(void *)a2 + 24), a3, a4, a5, a6, v21, a7, HIDWORD(a7), a8, (uint64_t)v30);
  sub_1CCE33198(a1, a2, (unsigned char **)v28, (uint64_t)v30);
  if (v28[0] != &v29) {
    free(v28[0]);
  }
  if (v30[0] != v31) {
    free(v30[0]);
  }
}

void sub_1CCE37298(uint64_t a1, uint64_t a2, llvm::PoisonValue **a3, llvm::CastInst *a4, unsigned __int16 a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v16 = 0;
  v47[1] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = a9;
  int v28 = a10;
  uint64_t v17 = **(void **)a2;
  v39[0] = v40;
  v39[1] = (void *)0x200000000;
  v40[6] = v17;
  v40[7] = &v46;
  v40[8] = v47;
  v40[9] = 0;
  int v41 = 0;
  __int16 v42 = 512;
  char v43 = 7;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  __int16 v46 = &unk_1F2616E88;
  v47[0] = &unk_1F2617008;
  uint64_t v18 = a2 + 24;
  uint64_t v20 = *(void *)(a2 + 40);
  uint64_t v19 = *(unsigned __int8 **)(a2 + 48);
  v40[4] = v20;
  v40[5] = v18;
  uint64_t v29 = v19;
  if (v19)
  {
    llvm::MetadataTracking::track((uint64_t)&v29, v19, 2);
    uint64_t v16 = (uint64_t)v29;
  }
  sub_1CB8461A4((uint64_t)v39, 0, v16);
  if (v29)
  {
    int v22 = *v29;
    if ((v22 - 4) > 0x1E)
    {
      if ((v22 - 3) >= 0xFFFFFFFE) {
        uint64_t v25 = v29;
      }
      else {
        uint64_t v25 = 0;
      }
      if ((v22 - 3) < 0xFFFFFFFE)
      {
        if (v22 == 3) {
          *((void *)v29 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v24 = (unint64_t)(v25 + 8);
    }
    else
    {
      if ((v29[1] & 0x7F) != 2 && !*((_DWORD *)v29 + 3)) {
        goto LABEL_4;
      }
      uint64_t v23 = *((void *)v29 + 2);
      if ((v23 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8;
      if (!v24) {
        goto LABEL_4;
      }
    }
    uint64_t v35 = &v29;
    sub_1CC5FA668(v24 + 16, &v35);
  }
LABEL_4:
  sub_1CCE32694((uint64_t)&v35, a1, a3, (uint64_t)&v27, (uint64_t)v39);
  int v21 = *a3;
  v30[0] = v31;
  v30[1] = (void *)0x1000000000;
  if (v36) {
    sub_1CBB08064((uint64_t)v30, (uint64_t)&v35);
  }
  v31[8] = v37[8];
  char v32 = v38;
  sub_1CCE36D44((uint64_t)v33, a1, (uint64_t)v21, (unsigned int *)v30, a4, a5, a6, a7, (uint64_t)v39);
  sub_1CCE33198(a1, a2, (unsigned char **)v33, (uint64_t)v39);
  if (v33[0] != &v34) {
    free(v33[0]);
  }
  if (v30[0] != v31) {
    free(v30[0]);
  }
  if (v35 != v37) {
    free(v35);
  }
  if (v39[0] != v40) {
    free(v39[0]);
  }
}

void sub_1CCE37558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a3 + 8;
  if (*(unsigned char *)a3)
  {
    int v9 = 32;
  }
  else
  {
    int v9 = *(_DWORD *)(a3 + 16);
    if (!v9) {
      return;
    }
    uint64_t v8 = *(void *)(a3 + 8);
  }
  int v10 = v9 - 1;
  unsigned int v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v12 = *(void *)(v8 + 8 * v11);
  if (v12 != a2)
  {
    int v13 = 1;
    while (v12 != -4096)
    {
      unsigned int v14 = v11 + v13++;
      unsigned int v11 = v14 & v10;
      uint64_t v12 = *(void *)(v8 + 8 * v11);
      if (v12 == a2) {
        goto LABEL_9;
      }
    }
    return;
  }
LABEL_9:
  uint64_t v36 = a2;
  uint64_t v37 = v41;
  char v38 = v41;
  uint64_t v39 = 2;
  int v40 = 0;
  sub_1CD7785F8((uint64_t)v42, a4, &v36, (uint64_t *)&v37);
  if (v38 != v37) {
    free(v38);
  }
  uint64_t v15 = v42[0];
  uint64_t v16 = *(void *)(v42[0] + 16);
  uint64_t v17 = *(unsigned int *)(v42[0] + 28);
  if (v16 != *(void *)(v42[0] + 8))
  {
    unsigned int v21 = *(_DWORD *)(v42[0] + 24);
    goto LABEL_22;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 8 * v17;
    uint64_t v20 = *(void **)(v42[0] + 16);
    while (*v20 != a1)
    {
      if (*v20 == -2) {
        uint64_t v18 = v20;
      }
      ++v20;
      v19 -= 8;
      if (!v19)
      {
        if (!v18) {
          goto LABEL_19;
        }
        void *v18 = a1;
        --*(_DWORD *)(v15 + 32);
        goto LABEL_43;
      }
    }
    goto LABEL_43;
  }
LABEL_19:
  unsigned int v21 = *(_DWORD *)(v42[0] + 24);
  if (v17 >= v21)
  {
LABEL_22:
    if (3 * v21 <= 4 * ((int)v17 - *(_DWORD *)(v42[0] + 32)))
    {
      if (v21 >= 0x40) {
        v21 *= 2;
      }
      else {
        unsigned int v21 = 128;
      }
    }
    else if (v21 - v17 >= v21 >> 3)
    {
      goto LABEL_24;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v42[0] + 8), v21);
    unsigned int v21 = *(_DWORD *)(v15 + 24);
    uint64_t v16 = *(void *)(v15 + 16);
LABEL_24:
    unsigned int v22 = v21 - 1;
    unsigned int v23 = (v21 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    unint64_t v24 = (void *)(v16 + 8 * v23);
    uint64_t v25 = *v24;
    if (*v24 == -1)
    {
      int v26 = 0;
LABEL_36:
      if (v26) {
        BOOL v30 = v26;
      }
      else {
        BOOL v30 = v24;
      }
      if (*v30 != a1)
      {
        if (*v30 == -2) {
          --*(_DWORD *)(v15 + 32);
        }
        else {
          ++*(_DWORD *)(v15 + 28);
        }
        *BOOL v30 = a1;
      }
    }
    else
    {
      int v26 = 0;
      int v27 = 1;
      while (v25 != a1)
      {
        if (v26) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v25 == -2;
        }
        if (v28) {
          int v26 = v24;
        }
        unsigned int v29 = v23 + v27++;
        unsigned int v23 = v29 & v22;
        unint64_t v24 = (void *)(v16 + 8 * (v29 & v22));
        uint64_t v25 = *v24;
        if (*v24 == -1) {
          goto LABEL_36;
        }
      }
    }
    goto LABEL_43;
  }
  *(_DWORD *)(v42[0] + 28) = v17 + 1;
  *(void *)(v16 + 8 * v17) = a1;
LABEL_43:
  int v31 = *(_DWORD *)(a2 + 20);
  if ((v31 & 0x40000000) != 0)
  {
    __int16 v33 = *(uint64_t **)(a2 - 8);
    uint64_t v32 = v31 & 0x7FFFFFF;
    if (!v32) {
      return;
    }
  }
  else
  {
    uint64_t v32 = v31 & 0x7FFFFFF;
    __int16 v33 = (uint64_t *)(a2 - 32 * v32);
    if (!v32) {
      return;
    }
  }
  uint64_t v34 = 32 * v32;
  do
  {
    uint64_t v35 = *v33;
    v33 += 4;
    sub_1CCE37558(a1, v35, a3, a4);
    v34 -= 32;
  }
  while (v34);
}

void sub_1CCE3780C(int32x4_t *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = a5 + 8;
  if (*(unsigned char *)a5)
  {
    int v13 = 32;
  }
  else
  {
    int v13 = *(_DWORD *)(a5 + 16);
    if (!v13) {
      goto LABEL_46;
    }
    uint64_t v12 = *(void *)(a5 + 8);
  }
  unsigned int v14 = (a3 >> 4) ^ (a3 >> 9);
  int v15 = v13 - 1;
  unsigned int v16 = v15 & v14;
  uint64_t v17 = *(void *)(v12 + 8 * (v15 & v14));
  if (v17 != a3)
  {
    int v18 = 1;
    while (v17 != -4096)
    {
      unsigned int v19 = v16 + v18++;
      unsigned int v16 = v19 & v15;
      uint64_t v17 = *(void *)(v12 + 8 * v16);
      if (v17 == a3) {
        goto LABEL_9;
      }
    }
    goto LABEL_46;
  }
LABEL_9:
  uint64_t v20 = *(void *)(a4 + 8);
  uint64_t v21 = *(unsigned int *)(a4 + 20);
  if (v20 != *(void *)a4)
  {
    unsigned int v25 = *(_DWORD *)(a4 + 16);
    goto LABEL_20;
  }
  if (v21)
  {
    unsigned int v22 = 0;
    uint64_t v23 = 8 * v21;
    unint64_t v24 = *(uint64_t **)(a4 + 8);
    while (*v24 != a3)
    {
      if (*v24 == -2) {
        unsigned int v22 = v24;
      }
      ++v24;
      v23 -= 8;
      if (!v23)
      {
        if (!v22) {
          goto LABEL_17;
        }
        uint64_t *v22 = a3;
        --*(_DWORD *)(a4 + 24);
        goto LABEL_41;
      }
    }
    goto LABEL_46;
  }
LABEL_17:
  unsigned int v25 = *(_DWORD *)(a4 + 16);
  if (v21 >= v25)
  {
LABEL_20:
    if (3 * v25 <= 4 * ((int)v21 - *(_DWORD *)(a4 + 24)))
    {
      if (v25 >= 0x40) {
        v25 *= 2;
      }
      else {
        unsigned int v25 = 128;
      }
    }
    else if (v25 - v21 >= v25 >> 3)
    {
      goto LABEL_22;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, v25);
    unsigned int v25 = *(_DWORD *)(a4 + 16);
    uint64_t v20 = *(void *)(a4 + 8);
LABEL_22:
    unsigned int v26 = v25 - 1;
    unsigned int v27 = (v25 - 1) & v14;
    BOOL v28 = (uint64_t *)(v20 + 8 * v27);
    uint64_t v29 = *v28;
    if (*v28 == -1)
    {
      BOOL v30 = 0;
LABEL_34:
      if (v30) {
        uint64_t v34 = v30;
      }
      else {
        uint64_t v34 = v28;
      }
      if (*v34 != a3)
      {
        if (*v34 == -2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        uint64_t *v34 = a3;
        goto LABEL_41;
      }
    }
    else
    {
      BOOL v30 = 0;
      int v31 = 1;
      while (v29 != a3)
      {
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == -2;
        }
        if (v32) {
          BOOL v30 = v28;
        }
        unsigned int v33 = v27 + v31++;
        unsigned int v27 = v33 & v26;
        BOOL v28 = (uint64_t *)(v20 + 8 * (v33 & v26));
        uint64_t v29 = *v28;
        if (*v28 == -1) {
          goto LABEL_34;
        }
      }
    }
LABEL_46:
    *a1 = 0u;
    a1[1] = 0u;
    return;
  }
  *(_DWORD *)(a4 + 20) = v21 + 1;
  *(void *)(v20 + 8 * v21) = a3;
LABEL_41:
  v47[0].i64[0] = 0;
  if (sub_1CD4A7E9C(*(void *)a6, *(_DWORD *)(a6 + 16), a3, v47)) {
    uint64_t v35 = v47[0].i64[0];
  }
  else {
    uint64_t v35 = *(void *)a6 + 56 * *(unsigned int *)(a6 + 16);
  }
  int8x16_t v36 = *(int8x16_t *)(sub_1CCE37E08(*a2, a3) + 152);
  int8x16_t v37 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(*(_DWORD *)(v35 + 28) - *(_DWORD *)(v35 + 32) == 1)), 0x1FuLL));
  int v38 = *(_DWORD *)(a3 + 20);
  if ((v38 & 0x40000000) != 0)
  {
    int v40 = *(uint64_t **)(a3 - 8);
    uint64_t v39 = v38 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v39 = v38 & 0x7FFFFFF;
    int v40 = (uint64_t *)(a3 - 32 * v39);
  }
  int32x4_t v41 = (int32x4_t)vandq_s8(v36, v37);
  int32x4_t v42 = (int32x4_t)vbicq_s8(v36, v37);
  if (v39)
  {
    uint64_t v43 = 32 * v39;
    do
    {
      int32x4_t v45 = v42;
      int32x4_t v46 = v41;
      uint64_t v44 = *v40;
      v40 += 4;
      sub_1CCE3780C(v47, a2, v44, a4, a5, a6);
      int32x4_t v41 = vaddq_s32(v47[0], v46);
      int32x4_t v42 = vaddq_s32(v47[1], v45);
      v43 -= 32;
    }
    while (v43);
  }
  *a1 = v41;
  a1[1] = v42;
}

uint64_t sub_1CCE37AF0(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL) {
    abort();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v4;
  }
  unsigned int v25 = a1 + 2;
  if (v6 > 0x2E8BA2E8BA2E8BALL) {
    sub_1CB833614();
  }
  uint64_t v9 = 88 * v6;
  int v10 = (char *)operator new(88 * v6);
  unsigned int v11 = &v10[88 * v3];
  __p = v10;
  unsigned int v22 = v11;
  unint64_t v24 = &v10[v9];
  *(void *)unsigned int v11 = *a2;
  *((void *)v11 + 1) = v11 + 24;
  *((void *)v11 + 2) = 0x800000000;
  unsigned int v12 = *(_DWORD *)(a3 + 8);
  if (v11 + 8 != (char *)a3 && v12 != 0)
  {
    unsigned int v14 = *(const void **)a3;
    if (*(void *)a3 == a3 + 16)
    {
      if (v12 >= 9)
      {
        *((_DWORD *)v11 + 4) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v11 + 24, v14, 8 * *(unsigned int *)(a3 + 8));
      *((_DWORD *)v11 + 4) = v12;
    }
    else
    {
      *((void *)v11 + 1) = v14;
      int v20 = *(_DWORD *)(a3 + 12);
      *((_DWORD *)v11 + 4) = v12;
      *((_DWORD *)v11 + 5) = v20;
      *(void *)a3 = a3 + 16;
      *(_DWORD *)(a3 + 12) = 0;
    }
    *(_DWORD *)(a3 + 8) = 0;
  }
  uint64_t v23 = v11 + 88;
  sub_1CD778470(a1, &__p);
  uint64_t v15 = a1[1];
  unsigned int v16 = v22;
  for (uint64_t i = v23; i != v16; i -= 88)
  {
    int v18 = (char *)*((void *)i - 10);
    if (i - 64 != v18) {
      free(v18);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v15;
}

void *sub_1CCE37CE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a2 + 8;
  if (*(_DWORD *)a2)
  {
    int v7 = 32;
    uint64_t v8 = a2 + 8;
  }
  else
  {
    int v7 = *(_DWORD *)(a2 + 16);
    if (!v7)
    {
      int v18 = 0;
      goto LABEL_18;
    }
    uint64_t v8 = *(void *)(a2 + 8);
  }
  int v9 = v7 - 1;
  unsigned int v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
  uint64_t result = (void *)(v8 + 8 * v10);
  uint64_t v12 = *result;
  if (*a3 == *result)
  {
LABEL_13:
    if (*(_DWORD *)a2)
    {
      uint64_t v17 = 32;
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 8);
      uint64_t v17 = *(unsigned int *)(a2 + 16);
    }
    char v21 = 0;
    uint64_t v20 = v6 + 8 * v17;
    goto LABEL_21;
  }
  int v13 = 0;
  int v14 = 1;
  while (v12 != -4096)
  {
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v12 == -8192;
    }
    if (v15) {
      int v13 = result;
    }
    unsigned int v16 = v10 + v14++;
    unsigned int v10 = v16 & v9;
    uint64_t result = (void *)(v8 + 8 * v10);
    uint64_t v12 = *result;
    if (*a3 == *result) {
      goto LABEL_13;
    }
  }
  if (v13) {
    int v18 = v13;
  }
  else {
    int v18 = result;
  }
LABEL_18:
  uint64_t result = sub_1CBAA320C(a2, (uint64_t)a3, a3, v18);
  *uint64_t result = *a3;
  if (*(unsigned char *)a2)
  {
    uint64_t v19 = 32;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v19 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v20 = v6 + 8 * v19;
  char v21 = 1;
LABEL_21:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + 16) = v21;
  return result;
}

uint64_t sub_1CCE37E08(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    BOOL v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        BOOL v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  BOOL v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return a1[4];
  }
  else {
    return a1[3] + 176 * *((unsigned int *)v5 + 2);
  }
}

void sub_1CCE37E90(uint64_t a1, uint64_t a2, int a3, char a4, char a5)
{
  int v7 = a3;
  v223[5] = *MEMORY[0x1E4F143B8];
  sub_1CCE39494((llvm::raw_ostream *)a1, a3);
  v219 = v221;
  uint64_t v220 = 0x800000000;
  if (a5)
  {
    uint64_t v10 = 0;
    goto LABEL_3;
  }
  uint64_t v28 = *(void *)(a1 + 128);
  *(void *)&long long __dst = 0;
  if (sub_1CD4A7E9C(*(void *)v28, *(_DWORD *)(v28 + 16), a2, &__dst)) {
    uint64_t v29 = __dst;
  }
  else {
    uint64_t v29 = *(void *)v28 + 56 * *(unsigned int *)(v28 + 16);
  }
  uint64_t v155 = *(void *)(v29 + 16);
  uint64_t v156 = 24;
  if (v155 == *(void *)(v29 + 8)) {
    uint64_t v156 = 28;
  }
  uint64_t v157 = *(unsigned int *)(v29 + v156);
  if (v157)
  {
    uint64_t v158 = 8 * v157;
    v159 = *(unint64_t **)(v29 + 16);
    while (*v159 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v159;
      v158 -= 8;
      if (!v158) {
        goto LABEL_300;
      }
    }
  }
  else
  {
    v159 = *(unint64_t **)(v29 + 16);
  }
  v160 = (unint64_t *)(v155 + 8 * v157);
  if (v159 != v160)
  {
    unint64_t v161 = *v159;
LABEL_252:
    if (v161 == *(void *)(a1 + 144)) {
      goto LABEL_285;
    }
    v209 = *(unsigned __int8 **)(v161 + 48);
    llvm::MetadataTracking::track((uint64_t)&v209, v209, 2);
    std::to_string(&v207, *((_DWORD *)v209 + 1));
    v162 = std::string::insert(&v207, 0, "shared with remark at line ");
    std::string::size_type v163 = v162->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v208.__r_.__value_.__l.__data_ = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
    v208.__r_.__value_.__r.__words[2] = v163;
    v162->__r_.__value_.__l.__size_ = 0;
    v162->__r_.__value_.__r.__words[2] = 0;
    v162->__r_.__value_.__r.__words[0] = 0;
    v164 = std::string::append(&v208, " column ");
    std::string::size_type v165 = v164->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v165;
    v164->__r_.__value_.__l.__size_ = 0;
    v164->__r_.__value_.__r.__words[2] = 0;
    v164->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v206, *((unsigned __int16 *)v209 + 1));
    v166 = (v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v206
         : (std::string *)v206.__r_.__value_.__r.__words[0];
    std::string::size_type v167 = (v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? *((unsigned char *)&v206.__r_.__value_.__s + 23) & 0x7F
         : v206.__r_.__value_.__l.__size_;
    v168 = std::string::append(&__p, (const std::string::value_type *)v166, v167);
    std::string::size_type v169 = v168->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v222.__r_.__value_.__l.__data_ = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
    v222.__r_.__value_.__r.__words[2] = v169;
    v168->__r_.__value_.__l.__size_ = 0;
    v168->__r_.__value_.__r.__words[2] = 0;
    v168->__r_.__value_.__r.__words[0] = 0;
    v170 = std::string::append(&v222, " (");
    v171 = (const char *)v170->__r_.__value_.__r.__words[2];
    long long __dst = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
    v211 = (char *)v171;
    v170->__r_.__value_.__l.__size_ = 0;
    v170->__r_.__value_.__r.__words[2] = 0;
    v170->__r_.__value_.__r.__words[0] = 0;
    v172 = SHIBYTE(v211) >= 0 ? &__dst : (long long *)__dst;
    size_t v173 = SHIBYTE(v211) >= 0 ? HIBYTE(v211) & 0x7F : *((void *)&__dst + 1);
    *(_DWORD *)(a1 + 104) += v173;
    v174 = *(void **)(a1 + 64);
    if (v173 <= *(void *)(a1 + 56) - (void)v174)
    {
      if (v173)
      {
        memcpy(v174, v172, v173);
        *(void *)(a1 + 64) += v173;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), (const char *)v172, v173);
    }
    if (SHIBYTE(v211) < 0) {
      operator delete((void *)__dst);
    }
    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v222.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v206.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v208.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v207.__r_.__value_.__l.__data_);
    }
    if (!v209) {
      goto LABEL_285;
    }
    int v175 = *v209;
    if ((v175 - 4) > 0x1E)
    {
      if ((v175 - 3) >= 0xFFFFFFFE) {
        v178 = v209;
      }
      else {
        v178 = 0;
      }
      if ((v175 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v179 = (unint64_t)(v178 + 8);
LABEL_294:
        *(void *)&long long __dst = &v209;
        sub_1CC5FA668(v179 + 16, &__dst);
        goto LABEL_285;
      }
      if (v175 == 3) {
        *((void *)v209 + 1) = 0;
      }
    }
    else if ((v209[1] & 0x7F) == 2 || *((_DWORD *)v209 + 3))
    {
      uint64_t v180 = *((void *)v209 + 2);
      if ((v180 & 4) != 0)
      {
        unint64_t v179 = v180 & 0xFFFFFFFFFFFFFFF8;
        if (v179) {
          goto LABEL_294;
        }
      }
    }
LABEL_285:
    v176 = v159 + 1;
    while (v176 != v160)
    {
      unint64_t v177 = *v176++;
      unint64_t v161 = v177;
      if (v177 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v159 = v176 - 1;
        goto LABEL_252;
      }
    }
  }
LABEL_300:
  uint64_t v10 = (*(_DWORD *)(v29 + 28) - *(_DWORD *)(v29 + 32)) > 1;
LABEL_3:
  uint64_t v11 = *(void *)(a1 + 160);
  uint64_t v12 = *(unsigned int *)(a1 + 172);
  if (v11 == *(void *)(a1 + 152))
  {
    if (v12)
    {
      int v13 = 0;
      uint64_t v14 = 8 * v12;
      BOOL v15 = *(uint64_t **)(a1 + 160);
      while (*v15 != a2)
      {
        if (*v15 == -2) {
          int v13 = v15;
        }
        ++v15;
        v14 -= 8;
        if (!v14)
        {
          if (!v13) {
            goto LABEL_11;
          }
          uint64_t v17 = 0;
          *int v13 = a2;
          --*(_DWORD *)(a1 + 176);
          goto LABEL_42;
        }
      }
      goto LABEL_35;
    }
LABEL_11:
    unsigned int v16 = *(_DWORD *)(a1 + 168);
    if (v12 < v16)
    {
      uint64_t v17 = 0;
      *(_DWORD *)(a1 + 172) = v12 + 1;
      *(void *)(v11 + 8 * v12) = a2;
      goto LABEL_42;
    }
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(a1 + 168);
  }
  if (3 * v16 <= 4 * ((int)v12 - *(_DWORD *)(a1 + 176)))
  {
    if (v16 >= 0x40) {
      v16 *= 2;
    }
    else {
      unsigned int v16 = 128;
    }
  }
  else if (v16 - v12 >= v16 >> 3)
  {
    goto LABEL_16;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 152), v16);
  unsigned int v16 = *(_DWORD *)(a1 + 168);
  uint64_t v11 = *(void *)(a1 + 160);
LABEL_16:
  unsigned int v18 = v16 - 1;
  unsigned int v19 = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v20 = (uint64_t *)(v11 + 8 * v19);
  uint64_t v21 = *v20;
  if (*v20 == -1)
  {
    unsigned int v22 = 0;
LABEL_28:
    if (v22) {
      unsigned int v26 = v22;
    }
    else {
      unsigned int v26 = v20;
    }
    if (*v26 != a2)
    {
      if (*v26 == -2) {
        --*(_DWORD *)(a1 + 176);
      }
      else {
        ++*(_DWORD *)(a1 + 172);
      }
      uint64_t v17 = 0;
      *unsigned int v26 = a2;
      goto LABEL_42;
    }
  }
  else
  {
    unsigned int v22 = 0;
    int v23 = 1;
    while (v21 != a2)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -2;
      }
      if (v24) {
        unsigned int v22 = v20;
      }
      unsigned int v25 = v19 + v23++;
      unsigned int v19 = v25 & v18;
      uint64_t v20 = (uint64_t *)(v11 + 8 * (v25 & v18));
      uint64_t v21 = *v20;
      if (*v20 == -1) {
        goto LABEL_28;
      }
    }
  }
LABEL_35:
  if ((a4 & 1) == 0)
  {
    *(_DWORD *)(a1 + 104) += 9;
    uint64_t v27 = *(void *)(a1 + 64);
    if ((unint64_t)(*(void *)(a1 + 56) - v27) > 8)
    {
      *(unsigned char *)(v27 + 8) = 32;
      *(void *)uint64_t v27 = *(void *)"(reused) ";
      *(void *)(a1 + 64) += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), "(reused) ", 9uLL);
    }
  }
  uint64_t v17 = 1;
LABEL_42:
  int v30 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v30 != 84)
  {
    if (v30 == 77)
    {
      *(_DWORD *)(a1 + 104) += 6;
      uint64_t v36 = *(void *)(a1 + 64);
      if ((unint64_t)(*(void *)(a1 + 56) - v36) > 5)
      {
        *(_WORD *)(v36 + 4) = 30825;
        *(_DWORD *)uint64_t v36 = 1920229741;
        *(void *)(a1 + 64) += 6;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), "matrix", 6uLL);
      }
      goto LABEL_227;
    }
    int v37 = *(_DWORD *)(a2 + 20);
    if ((v37 & 0x40000000) != 0)
    {
      uint64_t v39 = *(char **)(a2 - 8);
      uint64_t v38 = v37 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v38 = v37 & 0x7FFFFFF;
      uint64_t v39 = (char *)(a2 - 32 * v38);
    }
    sub_1CCE39560((uint64_t)&v219, v39, &v39[32 * v38]);
    OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(a2 + 16) - 28));
    size_t v57 = strlen(OpcodeName);
    if (v57 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_365;
    }
    size_t v58 = v57;
    if (v57 >= 0x17)
    {
      uint64_t v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17) {
        uint64_t v60 = v57 | 7;
      }
      uint64_t v61 = v60 + 1;
      p_dst = (long long *)operator new(v60 + 1);
      *((void *)&__dst + 1) = v58;
      v211 = (char *)(v61 | 0x8000000000000000);
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v211) = v57;
      p_dst = &__dst;
      if (!v57) {
        goto LABEL_82;
      }
    }
    memmove(p_dst, OpcodeName, v58);
LABEL_82:
    *((unsigned char *)p_dst + v58) = 0;
    if (SHIBYTE(v211) >= 0) {
      uint64_t v62 = &__dst;
    }
    else {
      uint64_t v62 = (long long *)__dst;
    }
    if (SHIBYTE(v211) >= 0) {
      size_t v63 = HIBYTE(v211) & 0x7F;
    }
    else {
      size_t v63 = *((void *)&__dst + 1);
    }
    *(_DWORD *)(a1 + 104) += v63;
    uint64_t v64 = *(void **)(a1 + 64);
    if (v63 <= *(void *)(a1 + 56) - (void)v64)
    {
      if (v63)
      {
        memcpy(v64, v62, v63);
        *(void *)(a1 + 64) += v63;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), (const char *)v62, v63);
    }
    if (SHIBYTE(v211) < 0) {
      operator delete((void *)__dst);
    }
    goto LABEL_94;
  }
  int v31 = *(uint64_t ****)(a2 - 32);
  if (!v31 || *((unsigned char *)v31 + 16) || v31[3] != *(uint64_t ***)(a2 + 72))
  {
    *(_DWORD *)(a1 + 104) += 14;
    BOOL v32 = *(void **)(a1 + 64);
    if (*(void *)(a1 + 56) - (void)v32 <= 0xDuLL)
    {
      unsigned int v33 = (llvm::raw_ostream *)(a1 + 32);
      uint64_t v34 = "<no called fn>";
      size_t v35 = 14;
LABEL_49:
      llvm::raw_ostream::write(v33, v34, v35);
      goto LABEL_57;
    }
    qmemcpy(v32, "<no called fn>", 14);
    uint64_t v40 = *(void *)(a1 + 64) + 14;
    goto LABEL_56;
  }
  if ((*((unsigned char *)v31 + 23) & 0x10) == 0)
  {
    size_t v183 = 0;
    uint64_t v34 = &byte_1CFBCE98E;
    goto LABEL_309;
  }
  uint64_t v147 = ***v31;
  uint64_t v148 = *(void *)(v147 + 152);
  uint64_t v149 = *(unsigned int *)(v147 + 168);
  if (!v149) {
    goto LABEL_303;
  }
  LODWORD(v150) = (v149 - 1) & ((v31 >> 4) ^ (v31 >> 9));
  v151 = (uint64_t ****)(v148 + 16 * v150);
  v152 = *v151;
  if (*v151 != v31)
  {
    int v153 = 1;
    while (v152 != (uint64_t ***)-4096)
    {
      int v154 = v150 + v153++;
      uint64_t v150 = v154 & (v149 - 1);
      v152 = *(uint64_t ****)(v148 + 16 * v150);
      if (v152 == v31)
      {
        v151 = (uint64_t ****)(v148 + 16 * v150);
        goto LABEL_304;
      }
    }
LABEL_303:
    v151 = (uint64_t ****)(v148 + 16 * v149);
  }
LABEL_304:
  v182 = v151[1];
  unint64_t v184 = (unint64_t)*v182;
  uint64_t v34 = (char *)(v182 + 2);
  size_t v183 = v184;
  if (v184 >= 0xB && *(void *)v34 == 0x74616D2E6D766C6CLL && *(void *)(v34 + 3) == 0x78697274616D2E6DLL)
  {
    uint64_t v187 = *((unsigned int *)v31 + 9);
    v188 = off_1E6830B58[v187];
    if (v188) {
      size_t v189 = strlen(off_1E6830B58[v187]);
    }
    else {
      size_t v189 = 0;
    }
    uint64_t v190 = 12;
    if (v189 < 0xC) {
      uint64_t v190 = v189;
    }
    v191 = &v188[v190];
    size_t v192 = v189 - v190;
    *(_DWORD *)(a1 + 104) += v189 - v190;
    v193 = *(unsigned char **)(a1 + 64);
    if (v189 - v190 <= *(void *)(a1 + 56) - (void)v193)
    {
      if (v189 >= 0xD)
      {
        memcpy(v193, v191, v192);
        v193 = (unsigned char *)(*(void *)(a1 + 64) + v192);
        *(void *)(a1 + 64) = v193;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), v191, v192);
      v193 = *(unsigned char **)(a1 + 64);
    }
    ++*(_DWORD *)(a1 + 104);
    if (*(unsigned char **)(a1 + 56) == v193)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), ".", 1uLL);
    }
    else
    {
      unsigned char *v193 = 46;
      ++*(void *)(a1 + 64);
    }
    memset(&v222, 0, sizeof(v222));
    DWORD2(__dst) = 0;
    char v214 = 0;
    uint64_t v215 = 0;
    p_p = &v222;
    int v216 = 0;
    *(void *)&long long __dst = &unk_1F2646F30;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    switch(*(_DWORD *)(*(void *)(a2 - 32) + 36))
    {
      case 0xBD:
        sub_1CCE395F4(*(uint64_t **)(a1 + 120), *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (llvm::raw_ostream *)&__dst);
        if (v212 == v213) {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, ".", 1uLL);
        }
        else {
          *v213++ = 46;
        }
        uint64_t v196 = **(void **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        goto LABEL_344;
      case 0xBE:
        sub_1CCE395F4(*(uint64_t **)(a1 + 120), *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (llvm::raw_ostream *)&__dst);
        if (v212 == v213) {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, ".", 1uLL);
        }
        else {
          *v213++ = 46;
        }
        uint64_t v195 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
        goto LABEL_340;
      case 0xBF:
        uint64_t v195 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
LABEL_340:
        v194 = *(uint64_t **)(a1 + 120);
        goto LABEL_341;
      default:
        v194 = *(uint64_t **)(a1 + 120);
        uint64_t v195 = a2;
LABEL_341:
        sub_1CCE395F4(v194, v195, (llvm::raw_ostream *)&__dst);
        if (v212 == v213) {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, ".", 1uLL);
        }
        else {
          *v213++ = 46;
        }
        uint64_t v196 = *(void *)a2;
LABEL_344:
        if ((*(_DWORD *)(v196 + 8) & 0xFE) == 0x12) {
          uint64_t v196 = **(void **)(v196 + 16);
        }
        llvm::Type::print((llvm::Type *)v196, (llvm::raw_ostream *)&__dst, 0, 0);
        if (v213 != v211)
        {
          v213 = v211;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&__dst, v211);
        }
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v197 = &v222;
        }
        else {
          v197 = (std::string *)v222.__r_.__value_.__r.__words[0];
        }
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = *((unsigned char *)&v222.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t size = v222.__r_.__value_.__l.__size_;
        }
        *(_DWORD *)(a1 + 104) += size;
        v199 = *(void **)(a1 + 64);
        if (size <= *(void *)(a1 + 56) - (void)v199)
        {
          if (size)
          {
            memcpy(v199, v197, size);
            *(void *)(a1 + 64) += size;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), (const char *)v197, size);
        }
        *(void *)&long long __dst = &unk_1F2646B98;
        if (v216 == 1 && v211) {
          MEMORY[0x1D25D9CB0](v211, 0x1000C8077774924);
        }
        if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v222.__r_.__value_.__l.__data_);
        }
        break;
    }
    goto LABEL_57;
  }
LABEL_309:
  *(_DWORD *)(a1 + 104) += v183;
  v186 = *(void **)(a1 + 64);
  if (v183 > *(void *)(a1 + 56) - (void)v186)
  {
    unsigned int v33 = (llvm::raw_ostream *)(a1 + 32);
    size_t v35 = v183;
    goto LABEL_49;
  }
  if (v183)
  {
    memcpy(v186, v34, v183);
    uint64_t v40 = *(void *)(a1 + 64) + v183;
LABEL_56:
    *(void *)(a1 + 64) = v40;
  }
LABEL_57:
  unsigned int v204 = v10;
  int v41 = *(_DWORD *)(a2 + 20);
  uint64_t v42 = v41 & 0x7FFFFFF;
  uint64_t v43 = (void *)(a2 - 32 * v42);
  int v44 = *(unsigned __int8 *)(a2 + 16);
  int v203 = v7;
  if (v44 == 84)
  {
    uint64_t v45 = 0;
  }
  else if (v44 == 39)
  {
    uint64_t v45 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v45 = 2;
  }
  if (v41 < 0 && (uint64_t v200 = *(v43 - 1), (v200 & 0xFFFFFFFF0) != 0)) {
    uint64_t v46 = (*((_DWORD *)v43 - 3) - *(_DWORD *)((char *)v43 - v200));
  }
  else {
    uint64_t v46 = 0;
  }
  uint64_t v47 = *(void *)(a2 - 32);
  if (v47
    && !*(unsigned char *)(v47 + 16)
    && *(void *)(v47 + 24) == *(void *)(a2 + 72)
    && (*(unsigned char *)(v47 + 33) & 0x20) != 0)
  {
    uint64_t v48 = v17;
    int v181 = *(_DWORD *)(v47 + 36) - 188;
    if (v181 <= 3)
    {
      uint64_t v49 = qword_1CFB2D0F0[v181];
      goto LABEL_67;
    }
  }
  else
  {
    uint64_t v48 = v17;
  }
  uint64_t v49 = 0;
LABEL_67:
  uint64_t v50 = a2 - 32 * v45 - 32 * v46 - 32 + 32 * v49;
  unint64_t v51 = v50 - (void)v43;
  int v52 = v220;
  if ((unint64_t)v220 + ((v50 - (uint64_t)v43) >> 5) > HIDWORD(v220)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v43 != (void *)v50)
  {
    long long v53 = &v219[8 * v220];
    uint64_t v54 = 32 * v49 + 32 * v42 - 32 * v45 - 32 * v46 - 32;
    do
    {
      uint64_t v55 = *v43;
      v43 += 4;
      *(void *)long long v53 = v55;
      v53 += 8;
      v54 -= 32;
    }
    while (v54);
  }
  LODWORD(v220) = v52 + (v51 >> 5);
  uint64_t v10 = v204;
  uint64_t v17 = v48;
  int v7 = v203;
LABEL_94:
  HIBYTE(v211) = 1;
  LOWORD(__dst) = 40;
  ++*(_DWORD *)(a1 + 104);
  uint64_t v65 = *(unsigned char **)(a1 + 64);
  if (*(unsigned char **)(a1 + 56) == v65)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), (const char *)&__dst, 1uLL);
  }
  else
  {
    *uint64_t v65 = 40;
    ++*(void *)(a1 + 64);
  }
  if (SHIBYTE(v211) < 0) {
    operator delete((void *)__dst);
  }
  unint64_t v66 = 1;
  if (a2 && *(unsigned char *)(a2 + 16) == 84)
  {
    uint64_t v67 = *(void *)(a2 - 32);
    if (v67 && !*(unsigned char *)(v67 + 16) && *(void *)(v67 + 24) == *(void *)(a2 + 72))
    {
      if (*(_DWORD *)(v67 + 36) == 188) {
        unint64_t v66 = 2;
      }
      else {
        unint64_t v66 = 1;
      }
    }
    else
    {
      unint64_t v66 = 1;
    }
  }
  if (!v220) {
    goto LABEL_224;
  }
  uint64_t v68 = v219;
  v205 = &v219[8 * v220];
  uint64_t v69 = (v7 + 1);
  unint64_t v202 = v66;
  do
  {
    uint64_t v70 = *(unsigned __int8 **)v68;
    if (v66 < v220)
    {
      uint64_t v71 = *(unsigned char **)(a1 + 64);
      if (*(unsigned char **)(a1 + 56) == v71)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), "\n", 1uLL);
      }
      else
      {
        unsigned char *v71 = 10;
        ++*(void *)(a1 + 64);
      }
      *(_DWORD *)(a1 + 104) = 0;
    }
    sub_1CCE39494((llvm::raw_ostream *)a1, v69);
    uint64_t v72 = *(void *)(a1 + 136);
    uint64_t v73 = v72 + 8;
    if (*(unsigned char *)v72)
    {
      int v74 = 32;
      goto LABEL_115;
    }
    int v74 = *(_DWORD *)(v72 + 16);
    if (v74)
    {
      uint64_t v73 = *(void *)(v72 + 8);
LABEL_115:
      int v75 = v74 - 1;
      unsigned int v76 = v75 & ((v70 >> 4) ^ (v70 >> 9));
      uint64_t v77 = *(unsigned __int8 **)(v73 + 8 * v76);
      if (v70 == v77)
      {
LABEL_119:
        sub_1CCE37E90(a1, v70, v69, v17, v10);
        goto LABEL_169;
      }
      int v78 = 1;
      while (v77 != (unsigned __int8 *)-4096)
      {
        unsigned int v79 = v76 + v78++;
        unsigned int v76 = v79 & v75;
        uint64_t v77 = *(unsigned __int8 **)(v73 + 8 * v76);
        if (v70 == v77) {
          goto LABEL_119;
        }
      }
    }
    uint64_t v80 = v70;
    while (1)
    {
      UnderlyingObject = (llvm *)v80;
      int v82 = v80[16];
      if (!UnderlyingObject || (v82 - 62) <= 0xFFFFFFFD) {
        break;
      }
      uint64_t v83 = -1;
LABEL_127:
      uint64_t v80 = (unsigned __int8 *)*((void *)UnderlyingObject + 4 * v83);
      if (!v80) {
        goto LABEL_128;
      }
    }
    if (UnderlyingObject && v82 == 62)
    {
      uint64_t v83 = -(uint64_t)(*((_DWORD *)UnderlyingObject + 5) & 0x7FFFFFF);
      goto LABEL_127;
    }
LABEL_128:
    int v84 = *(unsigned __int8 *)(*(void *)UnderlyingObject + 8);
    if (v84 == 15)
    {
      UnderlyingObject = llvm::getUnderlyingObject(UnderlyingObject, (const llvm::Value *)6);
      int v84 = *(unsigned __int8 *)(*(void *)UnderlyingObject + 8);
    }
    if (v84 != 15)
    {
      memset(&__p, 0, sizeof(__p));
      DWORD2(__dst) = 0;
      char v214 = 0;
      uint64_t v215 = 0;
      *(void *)&long long __dst = &unk_1F2646F30;
      p_p = &__p;
      int v216 = 0;
      v212 = 0;
      v213 = 0;
      v211 = 0;
      unsigned int v120 = *((unsigned __int8 *)UnderlyingObject + 16);
      if (v120 == 16)
      {
        v222.__r_.__value_.__r.__words[0] = (std::string::size_type)v223;
        *(_OWORD *)&v222.__r_.__value_.__r.__words[1] = xmmword_1CDB15B30;
        llvm::APInt::toString((unsigned int *)UnderlyingObject + 6, &v222, 0xAu, 1, 0);
        llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, v222.__r_.__value_.__l.__data_, v222.__r_.__value_.__l.__size_);
        if (v222.__r_.__value_.__l.__data_ != (std::string::pointer)v223) {
          free(v222.__r_.__value_.__l.__data_);
        }
LABEL_197:
        if (v213 != v211)
        {
          v213 = v211;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&__dst, v211);
        }
        v131 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v131 = &__p;
        }
        std::string::size_type v132 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v132 = __p.__r_.__value_.__l.__size_;
        }
        v208.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
        v208.__r_.__value_.__l.__size_ = v132;
        uint64_t v133 = sub_1CD5A69D0(&v208, " \t\n\v\f\r", 6);
        if (v134 <= 0x7FFFFFFFFFFFFFF7)
        {
          v135 = (const void *)v133;
          std::string::size_type v136 = v134;
          if (v134 >= 0x17)
          {
            uint64_t v138 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v134 | 7) != 0x17) {
              uint64_t v138 = v134 | 7;
            }
            unsigned int v201 = v17;
            uint64_t v139 = v10;
            uint64_t v140 = v138 + 1;
            v137 = operator new(v138 + 1);
            unint64_t v141 = v140 | 0x8000000000000000;
            uint64_t v10 = v139;
            uint64_t v17 = v201;
            v222.__r_.__value_.__l.__size_ = v136;
            v222.__r_.__value_.__r.__words[2] = v141;
            v222.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
          }
          else
          {
            *((unsigned char *)&v222.__r_.__value_.__s + 23) = v134;
            v137 = &v222;
            if (!v134) {
              goto LABEL_211;
            }
          }
          memmove(v137, v135, v136);
LABEL_211:
          unint64_t v66 = v202;
          *((unsigned char *)v137 + v136) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v222;
          BOOL v142 = (v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          std::string::size_type v143 = v222.__r_.__value_.__r.__words[0];
          if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v144 = HIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x7F;
          }
          else {
            std::string::size_type v144 = __p.__r_.__value_.__l.__size_;
          }
          *(_DWORD *)(a1 + 104) += v144;
          if (v142) {
            v145 = (std::string *)v143;
          }
          else {
            v145 = &__p;
          }
          llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), (const char *)v145, v144);
          *(void *)&long long __dst = &unk_1F2646B98;
          if (v216 == 1 && v211) {
            MEMORY[0x1D25D9CB0](v211, 0x1000C8077774924);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_169;
        }
LABEL_365:
        abort();
      }
      if (v120 <= 0x14)
      {
        uint64_t v121 = "constant";
        size_t v122 = 8;
LABEL_196:
        llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, v121, v122);
        goto LABEL_197;
      }
      uint64_t v123 = *(void *)(a1 + 136);
      uint64_t v124 = v123 + 8;
      if (*(unsigned char *)v123)
      {
        int v125 = 32;
LABEL_189:
        int v126 = v125 - 1;
        unsigned int v127 = v126 & ((UnderlyingObject >> 4) ^ (UnderlyingObject >> 9));
        v128 = *(llvm **)(v124 + 8 * v127);
        if (UnderlyingObject != v128)
        {
          int v129 = 1;
          while (v128 != (llvm *)-4096)
          {
            unsigned int v130 = v127 + v129++;
            unsigned int v127 = v130 & v126;
            v128 = *(llvm **)(v124 + 8 * v127);
            if (UnderlyingObject == v128) {
              goto LABEL_193;
            }
          }
          goto LABEL_194;
        }
LABEL_193:
        uint64_t v121 = "matrix";
      }
      else
      {
        int v125 = *(_DWORD *)(v123 + 16);
        if (v125)
        {
          uint64_t v124 = *(void *)(v123 + 8);
          goto LABEL_189;
        }
LABEL_194:
        uint64_t v121 = "scalar";
      }
      size_t v122 = 6;
      goto LABEL_196;
    }
    uint64_t v85 = *(void *)(a1 + 64);
    unint64_t v86 = *(void *)(a1 + 56) - v85;
    if (*((unsigned char *)UnderlyingObject + 16) == 59)
    {
      if (v86 > 9)
      {
        *(_WORD *)(v85 + 8) = 29284;
        *(void *)uint64_t v85 = *(void *)"stack addr";
        *(void *)(a1 + 64) += 10;
        int v87 = 10;
      }
      else
      {
        int v87 = 10;
        llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), "stack addr", 0xAuLL);
      }
    }
    else if (v86 > 3)
    {
      *(_DWORD *)uint64_t v85 = 1919181921;
      *(void *)(a1 + 64) += 4;
      int v87 = 4;
    }
    else
    {
      int v87 = 4;
      llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), "addr", 4uLL);
    }
    *(_DWORD *)(a1 + 104) += v87;
    if ((*((unsigned char *)UnderlyingObject + 23) & 0x10) != 0)
    {
      uint64_t v88 = ***(void ***)UnderlyingObject;
      uint64_t v89 = *(void *)(v88 + 152);
      uint64_t v90 = *(unsigned int *)(v88 + 168);
      if (!v90) {
        goto LABEL_143;
      }
      LODWORD(v91) = (v90 - 1) & ((UnderlyingObject >> 4) ^ (UnderlyingObject >> 9));
      uint64_t v92 = v89 + 16 * v91;
      uint64_t v93 = *(llvm **)v92;
      if (*(llvm **)v92 != UnderlyingObject)
      {
        int v94 = 1;
        while (v93 != (llvm *)-4096)
        {
          int v95 = v91 + v94++;
          uint64_t v91 = v95 & (v90 - 1);
          uint64_t v93 = *(llvm **)(v89 + 16 * v91);
          if (v93 == UnderlyingObject)
          {
            uint64_t v92 = v89 + 16 * v91;
            goto LABEL_144;
          }
        }
LABEL_143:
        uint64_t v92 = v89 + 16 * v90;
      }
LABEL_144:
      if (**(void **)(v92 + 8))
      {
        v96 = *(_WORD **)(a1 + 64);
        if (*(void *)(a1 + 56) - (void)v96 > 1uLL)
        {
          _WORD *v96 = 9504;
          *(void *)(a1 + 64) += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), " %", 2uLL);
        }
        if ((*((unsigned char *)UnderlyingObject + 23) & 0x10) != 0)
        {
          uint64_t v97 = ***(void ***)UnderlyingObject;
          uint64_t v98 = *(void *)(v97 + 152);
          uint64_t v99 = *(unsigned int *)(v97 + 168);
          if (!v99) {
            goto LABEL_154;
          }
          LODWORD(v100) = (v99 - 1) & ((UnderlyingObject >> 4) ^ (UnderlyingObject >> 9));
          uint64_t v101 = (llvm **)(v98 + 16 * v100);
          v102 = *v101;
          if (*v101 != UnderlyingObject)
          {
            int v103 = 1;
            while (v102 != (llvm *)-4096)
            {
              int v104 = v100 + v103++;
              uint64_t v100 = v104 & (v99 - 1);
              v102 = *(llvm **)(v98 + 16 * v100);
              if (v102 == UnderlyingObject)
              {
                uint64_t v101 = (llvm **)(v98 + 16 * v100);
                goto LABEL_155;
              }
            }
LABEL_154:
            uint64_t v101 = (llvm **)(v98 + 16 * v99);
          }
LABEL_155:
          uint64_t v105 = (size_t *)v101[1];
          size_t v108 = *v105;
          v106 = v105 + 2;
          size_t v107 = v108;
          uint64_t v109 = *(void **)(a1 + 64);
          if (v108 <= *(void *)(a1 + 56) - (void)v109)
          {
            if (v107)
            {
              memcpy(v109, v106, v107);
              *(void *)(a1 + 64) += v107;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), (const char *)v106, v107);
          }
        }
        if ((*((unsigned char *)UnderlyingObject + 23) & 0x10) != 0)
        {
          uint64_t v110 = ***(void ***)UnderlyingObject;
          uint64_t v111 = *(void *)(v110 + 152);
          uint64_t v112 = *(unsigned int *)(v110 + 168);
          if (!v112) {
            goto LABEL_166;
          }
          LODWORD(v113) = (v112 - 1) & ((UnderlyingObject >> 4) ^ (UnderlyingObject >> 9));
          uint64_t v114 = v111 + 16 * v113;
          v115 = *(llvm **)v114;
          if (*(llvm **)v114 != UnderlyingObject)
          {
            int v116 = 1;
            while (v115 != (llvm *)-4096)
            {
              int v117 = v113 + v116++;
              uint64_t v113 = v117 & (v112 - 1);
              v115 = *(llvm **)(v111 + 16 * v113);
              if (v115 == UnderlyingObject)
              {
                uint64_t v114 = v111 + 16 * v113;
                goto LABEL_167;
              }
            }
LABEL_166:
            uint64_t v114 = v111 + 16 * v112;
          }
LABEL_167:
          uint64_t v118 = **(void **)(v114 + 8);
        }
        else
        {
          LODWORD(v118) = 0;
        }
        *(_DWORD *)(a1 + 104) += v118 + 2;
      }
    }
LABEL_169:
    if (v70 != *(unsigned __int8 **)&v219[8 * v220 - 8])
    {
      *(_DWORD *)(a1 + 104) += 2;
      v119 = *(_WORD **)(a1 + 64);
      if (*(void *)(a1 + 56) - (void)v119 > 1uLL)
      {
        _WORD *v119 = 8236;
        *(void *)(a1 + 64) += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), ", ", 2uLL);
      }
    }
    v68 += 8;
  }
  while (v68 != v205);
LABEL_224:
  ++*(_DWORD *)(a1 + 104);
  v146 = *(unsigned char **)(a1 + 64);
  if (*(unsigned char **)(a1 + 56) == v146)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 32), ")", 1uLL);
  }
  else
  {
    unsigned char *v146 = 41;
    ++*(void *)(a1 + 64);
  }
LABEL_227:
  if (v219 != v221) {
    free(v219);
  }
}

llvm::raw_ostream *sub_1CCE39494(llvm::raw_ostream *result, int a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *((_DWORD *)result + 26);
  if (v4 >= *(_DWORD *)result)
  {
    BOOL v5 = (unsigned char *)*((void *)result + 8);
    if (*((unsigned char **)result + 7) == v5)
    {
      uint64_t result = llvm::raw_ostream::write((llvm::raw_ostream *)((char *)result + 32), "\n", 1uLL);
    }
    else
    {
      *BOOL v5 = 10;
      ++*((void *)result + 8);
    }
  }
  else if (v4)
  {
    return result;
  }
  *((_DWORD *)v3 + 26) = a2;
  if (a2)
  {
    uint64_t result = (llvm::raw_ostream *)((char *)v3 + 32);
    do
    {
      uint64_t v6 = (unsigned char *)*((void *)v3 + 8);
      if (*((unsigned char **)v3 + 7) == v6)
      {
        uint64_t result = llvm::raw_ostream::write(result, " ", 1uLL);
      }
      else
      {
        unsigned char *v6 = 32;
        ++*((void *)v3 + 8);
      }
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_1CCE39560(uint64_t result, char *a2, char *a3)
{
  unint64_t v3 = a3 - a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    BOOL v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)a2;
      a2 += 32;
      *v5++ = v6;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + (v3 >> 5);
  return result;
}

llvm::raw_ostream *sub_1CCE395F4(uint64_t *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t result = (llvm::raw_ostream *)sub_1CCE37E08(a1, a2);
  if ((llvm::raw_ostream *)a1[4] == result)
  {
    int v8 = (_DWORD *)*((void *)a3 + 4);
    if (*((void *)a3 + 3) - (void)v8 > 6uLL)
    {
      *(_DWORD *)((char *)v8 + 3) = 1853321070;
      *int v8 = 1852534389;
      *((void *)a3 + 4) += 7;
    }
    else
    {
      return llvm::raw_ostream::write(a3, "unknown", 7uLL);
    }
  }
  else
  {
    uint64_t v6 = result;
    if (*((unsigned char *)result + 168)) {
      int v7 = (unsigned int *)(***((void ***)result + 1) + 32);
    }
    else {
      int v7 = (unsigned int *)((char *)result + 16);
    }
    sub_1CD098D14(a3, *v7, 0, 0, 0);
    int v9 = (unsigned char *)*((void *)a3 + 4);
    if (*((unsigned char **)a3 + 3) == v9)
    {
      llvm::raw_ostream::write(a3, "x", 1uLL);
    }
    else
    {
      *int v9 = 120;
      ++*((void *)a3 + 4);
    }
    if (*((unsigned char *)v6 + 168)) {
      uint64_t v10 = (unsigned int *)((char *)v6 + 16);
    }
    else {
      uint64_t v10 = (unsigned int *)(***((void ***)v6 + 1) + 32);
    }
    unint64_t v11 = *v10;
    return sub_1CD098D14(a3, v11, 0, 0, 0);
  }
  return result;
}

void sub_1CCE3975C()
{
}

void sub_1CCE3979C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE397D4(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CCE39894(uint64_t a1, const Function *a2)
{
  v34[39] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(char **)v5 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  int v8 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::TargetTransformInfoWrapperPass::ID);
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(v8, a2);
  uint64_t v10 = *(uint64_t **)(a1 + 8);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_9:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::OptimizationRemarkEmitterWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_9;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  BOOL v15 = *(uint64_t **)(a1 + 8);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (v16 == v17)
  {
LABEL_14:
    uint64_t v18 = 0;
  }
  else
  {
    while (*(char **)v16 != llvm::AAResultsWrapperPass::ID)
    {
      v16 += 16;
      if (v16 == v17) {
        goto LABEL_14;
      }
    }
    uint64_t v18 = *(void *)(v16 + 8);
  }
  uint64_t v19 = *(void *)(v14 + 32);
  uint64_t v20 = *(void *)((*(uint64_t (**)(uint64_t, char *))(*(void *)v18 + 96))(v18, llvm::AAResultsWrapperPass::ID)+ 32);
  uint64_t v21 = *(uint64_t **)(a1 + 8);
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  if (v22 == v23)
  {
LABEL_19:
    uint64_t v24 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v22 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v22 += 16;
      if (v22 == v23) {
        goto LABEL_19;
      }
    }
    uint64_t v24 = *(void *)(v22 + 8);
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v24 + 96))(v24, &llvm::DominatorTreeWrapperPass::ID);
  unsigned int v26 = *(uint64_t **)(a1 + 8);
  uint64_t v27 = *v26;
  uint64_t v28 = v26[1];
  if (v27 == v28)
  {
LABEL_24:
    uint64_t v29 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v27 != &llvm::LoopInfoWrapperPass::ID)
    {
      v27 += 16;
      if (v27 == v28) {
        goto LABEL_24;
      }
    }
    uint64_t v29 = *(void *)(v27 + 8);
  }
  uint64_t v30 = v25 + 32;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v29 + 96))(v29, &llvm::LoopInfoWrapperPass::ID);
  sub_1CCE2832C((uint64_t)v34, (uint64_t)a2, (uint64_t)TTI, v20, v30, v31 + 32, v19);
  uint64_t v32 = sub_1CCE283B8((uint64_t)v34);
  sub_1CCE30BFC((uint64_t)v34);
  return v32;
}

void sub_1CCE39B5C()
{
}

void sub_1CCE39B9C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE39BD4(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CCE39C3C(uint64_t a1, const Function *a2)
{
  v11[39] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(char **)v4 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, llvm::TargetTransformInfoWrapperPass::ID);
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(v7, a2);
  sub_1CCE2832C((uint64_t)v11, (uint64_t)a2, (uint64_t)TTI, 0, 0, 0, 0);
  uint64_t v9 = sub_1CCE283B8((uint64_t)v11);
  sub_1CCE30BFC((uint64_t)v11);
  return v9;
}

uint64_t sub_1CCE39D38()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  LOBYTE(v2) = 1;
  *(void *)&long long v1 = &v2;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable/disable fusing matrix instructions.";
  v4.n128_u64[1] = 42;
  sub_1CBA9E5B0((llvm::cl::Option *)&FuseMatrix, "fuse-matrix", (unsigned char **)&v1, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &FuseMatrix, &dword_1CB82C000);
  int v2 = 1;
  LODWORD(v3) = 4;
  *(void *)&long long v1 = &v3;
  v4.n128_u64[0] = (unint64_t)"Tile size for matrix instruction fusion using square-shaped tiles.";
  v4.n128_u64[1] = 66;
  sub_1CBF7A9F8((uint64_t)&TileSize, "fuse-matrix-tile-size", (int **)&v1, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &TileSize, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  *(void *)&long long v1 = &v2;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Generate loop nest for tiling.";
  v4.n128_u64[1] = 30;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCF6D18, "fuse-matrix-use-loops", (unsigned char **)&v1, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF6D18, &dword_1CB82C000);
  LOBYTE(v2) = 0;
  *(void *)&long long v1 = &v2;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Force matrix instruction fusion even if not profitable.";
  v4.n128_u64[1] = 55;
  sub_1CBA9E5B0((llvm::cl::Option *)&ForceFusion, "force-fuse-matrix", (unsigned char **)&v1, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &ForceFusion, &dword_1CB82C000);
  LOBYTE(v2) = 1;
  *(void *)&long long v1 = &v2;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Allow the use of FMAs if available and profitable. This may result in different res"
                                     "ults, due to less rounding error.";
  v4.n128_u64[1] = 116;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCF6DD8, "matrix-allow-contract", (unsigned char **)&v1, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF6DD8, &dword_1CB82C000);
  int v2 = 0;
  *(void *)&long long v1 = "Sets the default matrix layout";
  *((void *)&v1 + 1) = 30;
  unint64_t v3 = &v2;
  v4.n128_u64[0] = (unint64_t)v5;
  v5[0] = "column-major";
  v5[1] = 12;
  int v6 = 0;
  uint64_t v7 = "Use column-major layout";
  uint64_t v8 = 23;
  uint64_t v9 = "row-major";
  uint64_t v10 = 9;
  int v11 = 1;
  uint64_t v12 = "Use row-major layout";
  uint64_t v13 = 20;
  v4.n128_u64[1] = 0x400000002;
  sub_1CD7786B0(&v3, &v1, (uint64_t)&v4);
  if ((void *)v4.n128_u64[0] != v5) {
    free((void *)v4.n128_u64[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1CD77785C, qword_1EBCF6E98, &dword_1CB82C000);
}

void sub_1CCE3A014()
{
}

void llvm::createLowerWidenableConditionPass(llvm *this)
{
}

uint64_t sub_1CCE3A0EC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF70F0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F263FD48;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF70F8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE3A014;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCF70F8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

BOOL sub_1CCE3A19C(uint64_t a1)
{
  v34[8] = *MEMORY[0x1E4F143B8];
  long long v1 = *(uint64_t **)(*(void *)(a1 + 40) + 112);
  unsigned int v2 = *((_DWORD *)v1 + 8);
  if (v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  if (v2 <= 0x24) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = 37;
  }
  uint64_t v5 = *((unsigned int *)v1 + 2);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  do
    int v7 = 33 * v7 + aLlvmExperiment_58[v6++];
  while (v4 != v6);
  uint64_t v8 = *v1;
  uint64_t v9 = *v1 + 8 * v5 + 8;
  int v10 = 1;
  int v11 = v7;
  while (1)
  {
    uint64_t v12 = v11 & (v5 - 1);
    uint64_t v13 = *(void **)(v8 + 8 * v12);
    if (v13 != (void *)-8)
    {
      if (!v13) {
        return 0;
      }
      if (*(_DWORD *)(v9 + 4 * v12) == v7
        && v4 == *v13
        && !memcmp("llvm.experimental.widenable.condition", (char *)v13 + *((unsigned int *)v1 + 5), v4))
      {
        break;
      }
    }
    int v11 = v10 + v12;
    ++v10;
  }
  if (v12 == -1) {
    return 0;
  }
  if ((int)v12 == v5) {
    return 0;
  }
  uint64_t v15 = *(void *)(*(void *)(v8 + 8 * (int)v12) + 8);
  if (!v15) {
    return 0;
  }
  if (*(unsigned char *)(v15 + 16)) {
    return 0;
  }
  uint64_t v18 = *(void *)(v15 + 8);
  if (!v18) {
    return 0;
  }
  unsigned int v19 = 0;
  uint64_t v32 = v34;
  uint64_t v33 = 0x800000000;
  do
  {
    uint64_t v20 = *(void *)(v18 + 24);
    if (v20 && *(unsigned char *)(v20 + 16) == 84 && *(void *)(*(void *)(v20 + 40) + 56) == a1)
    {
      if (v19 >= HIDWORD(v33)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v32 + v19) = v20;
      unsigned int v19 = v33 + 1;
      LODWORD(v33) = v33 + 1;
    }
    uint64_t v18 = *(void *)(v18 + 8);
  }
  while (v18);
  BOOL v16 = v19 != 0;
  if (v19)
  {
    uint64_t v21 = *(llvm::ValueAsMetadata **)v32;
    uint64_t v22 = ***(uint64_t ****)v32;
    uint64_t v23 = *v22;
    uint64_t v24 = *(llvm::Value **)(*v22 + 1560);
    if (!v24)
    {
      uint64_t v25 = *(llvm::ConstantInt **)(v23 + 1888);
      unsigned int v26 = *(_DWORD *)(v23 + 1896);
      unsigned int v31 = v26 >> 8;
      if (v26 >> 8 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v30);
      }
      if (v26 <= 0xFF) {
        char v27 = 0;
      }
      else {
        char v27 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v26);
      }
      uint64_t v30 = v27 & 1;
      uint64_t v24 = (llvm::Value *)llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v30, v14);
      if (v31 >= 0x41 && v30)
      {
        uint64_t v28 = v24;
        MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
        uint64_t v24 = v28;
      }
      *(void *)(v23 + 1560) = v24;
    }
    llvm::Value::doRAUW(v21, v24, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (v32 != v34) {
    free(v32);
  }
  return v16;
}

void sub_1CCE3A4C0()
{
}

void sub_1CCE3A500(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CCE3A538(uint64_t a1, uint64_t a2)
{
  return sub_1CCE3A19C(a2);
}

void sub_1CCE3A540()
{
}

uint64_t sub_1CCE3A5DC(void *a1)
{
  v34[8] = *MEMORY[0x1E4F143B8];
  long long v1 = *(uint64_t **)(a1[5] + 112);
  unsigned int v2 = *((_DWORD *)v1 + 8);
  if (v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  if (v2 <= 0x16) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = 23;
  }
  uint64_t v5 = *((unsigned int *)v1 + 2);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  do
    int v7 = 33 * v7 + aLlvmExperiment_45[v6++];
  while (v4 != v6);
  uint64_t v8 = *v1;
  uint64_t v9 = *v1 + 8 * v5 + 8;
  int v10 = 1;
  int v11 = v7;
  while (1)
  {
    uint64_t v12 = v11 & (v5 - 1);
    uint64_t v13 = *(void **)(v8 + 8 * v12);
    if (v13 != (void *)-8)
    {
      if (!v13) {
        return 0;
      }
      if (*(_DWORD *)(v9 + 4 * v12) == v7
        && v4 == *v13
        && !memcmp("llvm.experimental.guard", (char *)v13 + *((unsigned int *)v1 + 5), v4))
      {
        break;
      }
    }
    int v11 = v10 + v12;
    ++v10;
  }
  if (v12 == -1) {
    return 0;
  }
  if ((int)v12 == v5) {
    return 0;
  }
  uint64_t v14 = *(void *)(*(void *)(v8 + 8 * (int)v12) + 8);
  if (!v14 || *(unsigned char *)(v14 + 16) || !*(void *)(v14 + 8)) {
    return 0;
  }
  uint64_t v32 = v34;
  uint64_t v33 = 0x800000000;
  uint64_t v17 = a1 + 9;
  for (uint64_t i = (void *)a1[10]; ; uint64_t i = (void *)i[1])
  {
    if (i == v17) {
      goto LABEL_56;
    }
    unsigned int v19 = i - 3;
    if (!i) {
      unsigned int v19 = 0;
    }
    uint64_t v20 = v19 + 5;
    uint64_t v21 = (void *)v19[6];
    if (v21 != v20) {
      break;
    }
  }
  unsigned int v22 = 0;
  do
  {
    if (v21) {
      uint64_t v23 = v21 - 3;
    }
    else {
      uint64_t v23 = 0;
    }
    if (v21)
    {
      if (*((unsigned char *)v23 + 16) == 84)
      {
        uint64_t v27 = *(v23 - 4);
        if (v27)
        {
          if (!*(unsigned char *)(v27 + 16) && *(void *)(v27 + 24) == v23[9] && *(_DWORD *)(v27 + 36) == 125)
          {
            if (v22 >= HIDWORD(v33)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v32 + v22) = v23;
            unsigned int v22 = v33 + 1;
            LODWORD(v33) = v33 + 1;
          }
        }
      }
    }
    uint64_t v21 = (void *)v21[1];
    uint64_t v24 = i - 3;
    if (!i) {
      uint64_t v24 = 0;
    }
    uint64_t v25 = v24 + 5;
    while (v21 == v25)
    {
      uint64_t i = (void *)i[1];
      if (i == v17) {
        goto LABEL_53;
      }
      unsigned int v26 = i - 3;
      if (!i) {
        unsigned int v26 = 0;
      }
      uint64_t v25 = v26 + 5;
      uint64_t v21 = (void *)v26[6];
    }
  }
  while (i != v17);
LABEL_53:
  if (!v22)
  {
LABEL_56:
    uint64_t v15 = 0;
    goto LABEL_57;
  }
  uint64_t v28 = (uint64_t **)a1[5];
  uint64_t v31 = **(void **)(a1[3] + 16);
  uint64_t v15 = 1;
  uint64_t Declaration = (llvm *)llvm::Intrinsic::getDeclaration(v28, 119, (uint64_t)&v31, 1);
  *((_WORD *)Declaration + 9) = *((_WORD *)Declaration + 9) & 0xC00F | *(_WORD *)(v14 + 18) & 0x3FF0;
  if (v33) {
    llvm::makeGuardControlFlowExplicit(Declaration, *(llvm::Function **)v32, (llvm::CallInst *)1);
  }
LABEL_57:
  if (v32 != v34) {
    free(v32);
  }
  return v15;
}

void sub_1CCE3A948()
{
}

void sub_1CCE3AA14(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCE3AA4C(uint64_t a1, void *a2)
{
  return sub_1CCE3A5DC(a2);
}

uint64_t sub_1CCE3AA54(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF71D0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F263FE88;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF71D8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE3AB10;
    v5[1] = &PassRegistry;
    size_t v4 = v5;
    std::__call_once(&qword_1EBCF71D8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCE3AB10(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v3);
  llvm::initializeMemorySSAWrapperPassPass(a1, v4);
  operator new();
}

void llvm::MemCpyOptPass::eraseInstruction(llvm::MemCpyOptPass *this, llvm::Instruction *a2)
{
  unsigned int v2 = (int32x2_t **)*((void *)this + 5);
  __int32 v3 = (*v2)[5].i32[0];
  if (v3)
  {
    int32x2_t v4 = (*v2)[3];
    __int32 v5 = v3 - 1;
    uint64_t v6 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v7 = *(llvm::Instruction **)(*(void *)&v4 + 16 * v6);
    if (v7 == a2)
    {
LABEL_6:
      int v10 = *(llvm::MemoryAccess **)(*(void *)&v4 + 16 * v6 + 8);
      if (v10) {
        llvm::MemorySSAUpdater::removeMemoryAccess(v2, v10, 0);
      }
    }
    else
    {
      int v8 = 1;
      while (v7 != (llvm::Instruction *)-4096)
      {
        int v9 = v6 + v8++;
        uint64_t v6 = v9 & v5;
        int v7 = *(llvm::Instruction **)(*(void *)&v4 + 16 * v6);
        if (v7 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
}

uint64_t llvm::MemCpyOptPass::tryMergingIntoMemset(llvm::MemCpyOptPass *this, llvm::Instruction *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v140 = a3;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40);
  int v8 = (const llvm::Value *)(v7 + 272);
  if (a2)
  {
    if (*((unsigned char *)a2 + 16) == 61)
    {
      sub_1CB83544C(v7 + 272, **((void **)a2 - 8));
      if (v9 == 1) {
        return 0;
      }
    }
  }
  v160 = v162;
  uint64_t v161 = 0x800000000;
  uint64_t v163 = v7 + 272;
  int v10 = (char *)a2 + 24;
  if (!a2) {
    int v10 = 0;
  }
  uint64_t v11 = *((void *)v10 + 1);
  uint64_t v12 = v11 - 24;
  BOOL v13 = v11 == 0;
  uint64_t v14 = v11 ? v11 - 24 : 0;
  int v17 = *(unsigned __int8 *)(v14 + 16);
  BOOL v16 = (unsigned __int8 *)(v14 + 16);
  unsigned __int8 v15 = v17;
  if ((v17 - 29) < 0xB) {
    return 0;
  }
  std::string::size_type v136 = v162;
  uint64_t v137 = v7;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  while (1)
  {
    uint64_t v18 = **((void **)this + 5);
    int v19 = *(_DWORD *)(v18 + 40);
    if (v19)
    {
      uint64_t v20 = *(void *)(v18 + 24);
      unsigned int v21 = v19 - 1;
      uint64_t v22 = (v19 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      uint64_t v23 = *(void *)(v20 + 16 * v22);
      if (v12 == v23)
      {
LABEL_16:
        uint64_t v26 = *(void *)(v20 + 16 * v22 + 8);
        if (v26)
        {
          if (*(unsigned char *)(v26 + 16) == 26) {
            uint64_t v27 = (llvm::MemoryAccess *)v26;
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v28 = v139;
          if (v27) {
            uint64_t v28 = v27;
          }
          uint64_t v138 = v26;
          uint64_t v139 = v28;
        }
      }
      else
      {
        int v24 = 1;
        while (v23 != -4096)
        {
          int v25 = v22 + v24++;
          uint64_t v22 = v25 & v21;
          uint64_t v23 = *(void *)(v20 + 16 * v22);
          if (v12 == v23) {
            goto LABEL_16;
          }
        }
      }
    }
    unsigned int v29 = v15 - 33;
    if (v29 <= 0x33 && ((1 << v29) & 0x8000000000041) != 0 && !v13)
    {
      uint64_t v30 = *(void *)(v12 + 64);
      if (v30)
      {
        if ((*(unsigned char *)(v30 + 13) & 8) != 0) {
          goto LABEL_94;
        }
      }
      LODWORD(v145[0]) = 7;
      if ((!sub_1CC5CB59C(v12, (__int32 *)v145, 1uLL)
         || (uint64_t v67 = *(void *)(v12 - 32)) != 0
         && !*(unsigned char *)(v67 + 16)
         && *(void *)(v67 + 24) == *(void *)(v12 + 72)
         && *(_DWORD *)(v67 + 36) == 7)
        && (llvm::CallBase::hasFnAttrOnCalledFunction(v12, 11) & 1) != 0)
      {
        goto LABEL_94;
      }
    }
    int v31 = *v16;
    if (v31 == 61) {
      goto LABEL_33;
    }
    if (!sub_1CC5818F8(v12)) {
      break;
    }
    int v31 = *v16;
LABEL_33:
    BOOL v45 = v31 == 61;
    BOOL v32 = v31 != 61;
    if (v45) {
      uint64_t v33 = v12;
    }
    else {
      uint64_t v33 = 0;
    }
    if (v13 || v32)
    {
      uint64_t v34 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
      uint64_t v35 = *(void *)(v34 + 96);
      uint64_t v36 = *(unsigned int *)(v35 + 32);
      if (v36 > 0x40)
      {
        int v53 = 0;
        int64_t v54 = (unint64_t)(v36 + 63) >> 6;
        do
        {
          BOOL v86 = v54-- < 1;
          if (v86) {
            break;
          }
          unint64_t v55 = *(void *)(*(void *)(v35 + 24) + 8 * v54);
          v53 += __clz(v55);
        }
        while (!v55);
        int v56 = v36 | 0xFFFFFFC0;
        if ((v36 & 0x3F) == 0) {
          int v56 = 0;
        }
        if (v53 + v56 != v36) {
          goto LABEL_119;
        }
      }
      else if (*(void *)(v35 + 24))
      {
        goto LABEL_119;
      }
      if (a4 != *(llvm::Value **)(v34 + 32)) {
        goto LABEL_119;
      }
      if (*(unsigned char *)(*(void *)(v34 + 64) + 16) != 16) {
        goto LABEL_119;
      }
      size_t v57 = llvm::Value::stripPointerCasts(*(llvm::Value **)v34);
      unint64_t isPointerOffset = llvm::isPointerOffset(v140, v57, v8, v58);
      if (!v60) {
        goto LABEL_119;
      }
      sub_1CCE3B988((uint64_t)&v160, isPointerOffset, v12);
    }
    else
    {
      int v37 = *(unsigned __int8 *)(v33 + 16);
      if (v37 == 60 || v37 == 61)
      {
        __int16 v38 = *(_WORD *)(v33 + 18);
        if (v38 & 0x380) != 0 || (v38) {
          goto LABEL_119;
        }
      }
      else if (v37 - 63) < 3 || (*(_WORD *)(v33 + 18))
      {
        goto LABEL_119;
      }
      uint64_t v39 = *(uint64_t **)(v33 - 64);
      uint64_t v40 = *v39;
      if ((*(_DWORD *)(*v39 + 8) & 0xFE) == 0x12) {
        uint64_t v40 = **(void **)(v40 + 16);
      }
      if (sub_1CBFB72C8((uint64_t)v8, v40)) {
        goto LABEL_119;
      }
      sub_1CB83544C((uint64_t)v8, *v39);
      if (v42 == 1) {
        goto LABEL_119;
      }
      uint64_t v43 = llvm::isBytewiseValue((llvm *)v39, v8, v41);
      BOOL v45 = *((unsigned __int8 *)a4 + 16) - 11 >= 2 || v43 == 0;
      if (!v45) {
        a4 = v43;
      }
      if (a4 != v43) {
        goto LABEL_119;
      }
      uint64_t v46 = v43;
      unint64_t v47 = llvm::isPointerOffset(v140, *(const llvm::Value **)(v33 - 32), v8, v44);
      if (!v48)
      {
        a4 = v46;
        goto LABEL_119;
      }
      uint64_t v49 = v47;
      uint64_t v50 = sub_1CB83544C(v163, **(void **)(v33 - 64));
      sub_1CCE41990((uint64_t)&v160, v49, (unint64_t)(v50 + 7) >> 3, *(void *)(v33 - 32), 1 << ((unint64_t)*(unsigned __int16 *)(v33 + 18) >> 1), v33);
      a4 = v46;
    }
LABEL_94:
    uint64_t v11 = *(void *)(v11 + 8);
    uint64_t v12 = v11 - 24;
    BOOL v13 = v11 == 0;
    if (v11) {
      uint64_t v65 = v11 - 24;
    }
    else {
      uint64_t v65 = 0;
    }
    int v66 = *(unsigned __int8 *)(v65 + 16);
    BOOL v16 = (unsigned __int8 *)(v65 + 16);
    unsigned __int8 v15 = v66;
    if ((v66 - 29) <= 0xA) {
      goto LABEL_119;
    }
  }
  int v51 = *(unsigned __int8 *)(v12 + 16);
  uint64_t v52 = (v51 - 33);
  if (v52 > 0x37) {
    goto LABEL_82;
  }
  if (((1 << (v51 - 33)) & 0x8000000000041) == 0)
  {
    if (v52 != 27)
    {
      if (((1 << (v51 - 33)) & 0x808001D0000010) != 0) {
        goto LABEL_119;
      }
LABEL_82:
      uint64_t v63 = (v51 - 33);
      if (v63 <= 0x37)
      {
        if (((1 << v63) & 0x8000000000041) != 0)
        {
          uint64_t v64 = *(void *)(v12 + 64);
          if (!v64 || (*(unsigned char *)(v64 + 20) & 4) == 0 && (*(unsigned char *)(v64 + 17) & 0x10) == 0)
          {
            LODWORD(v145[0]) = 7;
            if (sub_1CC5CB59C(v12, (__int32 *)v145, 1uLL))
            {
              uint64_t v68 = *(void *)(v12 - 32);
              if (!v68
                || *(unsigned char *)(v68 + 16)
                || *(void *)(v68 + 24) != *(void *)(v12 + 72)
                || *(_DWORD *)(v68 + 36) != 7)
              {
                goto LABEL_119;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v12, 66) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v12, 44) & 1) == 0)
            {
              goto LABEL_119;
            }
          }
        }
        else if (((1 << v63) & 0x808001C8000010) != 0 || v63 == 28 && (*(_WORD *)(v12 + 18) & 0x301) != 0)
        {
          goto LABEL_119;
        }
      }
      goto LABEL_94;
    }
    if ((*(_WORD *)(v12 + 18) & 0x301) != 0) {
      goto LABEL_119;
    }
LABEL_81:
    int v51 = *(unsigned __int8 *)(v12 + 16);
    goto LABEL_82;
  }
  uint64_t v61 = *(void *)(v12 + 64);
  if (v61 && (*(unsigned char *)(v61 + 17) & 0x30) != 0) {
    goto LABEL_81;
  }
  int v62 = *(_DWORD *)(v12 + 20);
  if ((v62 & 0x80000000) == 0
    || (uint64_t v69 = v12 - 32 * (v62 & 0x7FFFFFF), v72 = *(void *)(v69 - 8), v70 = v69 - 8, (v71 = v72) == 0))
  {
LABEL_77:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v12, 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction(v12, 44))
    {
      goto LABEL_119;
    }
    goto LABEL_81;
  }
  uint64_t v73 = -v71;
  while (1)
  {
    unsigned int v74 = *(_DWORD *)(*(void *)(v70 + v73) + 8);
    BOOL v86 = v74 > 7;
    int v75 = (1 << v74) & 0x83;
    if (v86 || v75 == 0) {
      break;
    }
    v73 += 16;
    if (!v73) {
      goto LABEL_77;
    }
  }
LABEL_119:
  if (v161)
  {
    if (a2 && *((unsigned char *)a2 + 16) == 61)
    {
      uint64_t v77 = sub_1CB83544C(v163, **((void **)a2 - 8));
      sub_1CCE41990((uint64_t)&v160, 0, (unint64_t)(v77 + 7) >> 3, *((void *)a2 - 4), 1 << ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1), (uint64_t)a2);
    }
    else
    {
      sub_1CCE3B988((uint64_t)&v160, 0, (uint64_t)a2);
    }
    int v78 = v139;
    uint64_t v79 = 0;
    uint64_t v80 = **(void **)v12;
    uint64_t v140 = (llvm *)v146;
    v145[0] = v146;
    v145[1] = (void *)0x200000000;
    uint64_t v149 = v80;
    uint64_t v150 = &v158;
    v151 = &v159;
    uint64_t v152 = 0;
    int v153 = 0;
    __int16 v154 = 512;
    char v155 = 7;
    uint64_t v147 = 0;
    uint64_t v148 = 0;
    uint64_t v156 = 0;
    uint64_t v157 = 0;
    uint64_t v158 = &unk_1F2616E88;
    v159 = &unk_1F2617008;
    uint64_t v147 = *(void *)(v12 + 40);
    uint64_t v148 = v12 + 24;
    uint64_t v81 = *(unsigned __int8 **)(v12 + 48);
    BOOL v142 = v81;
    if (v81)
    {
      llvm::MetadataTracking::track((uint64_t)&v142, v81, 2);
      uint64_t v79 = (uint64_t)v142;
    }
    sub_1CB8461A4((uint64_t)v145, 0, v79);
    if (v142)
    {
      int v130 = *v142;
      if ((v130 - 4) > 0x1E)
      {
        if ((v130 - 3) >= 0xFFFFFFFE) {
          uint64_t v133 = v142;
        }
        else {
          uint64_t v133 = 0;
        }
        if ((v130 - 3) < 0xFFFFFFFE)
        {
          if (v130 == 3) {
            *((void *)v142 + 1) = 0;
          }
          goto LABEL_128;
        }
        unint64_t v132 = (unint64_t)(v133 + 8);
      }
      else
      {
        if ((v142[1] & 0x7F) != 2 && !*((_DWORD *)v142 + 3)) {
          goto LABEL_128;
        }
        uint64_t v131 = *((void *)v142 + 2);
        if ((v131 & 4) == 0) {
          goto LABEL_128;
        }
        unint64_t v132 = v131 & 0xFFFFFFFFFFFFFFF8;
        if (!v132) {
          goto LABEL_128;
        }
      }
      std::string::size_type v143 = &v142;
      sub_1CC5FA668(v132 + 16, &v143);
    }
LABEL_128:
    if (v161)
    {
      uint64_t v83 = (unsigned int *)v160;
      while (1)
      {
        uint64_t v84 = v83[10];
        if (v84 != 1)
        {
          uint64_t v85 = *((void *)v83 + 1) - *(void *)v83;
          BOOL v86 = v84 <= 3 && v85 <= 15;
          if (!v86) {
            break;
          }
          if (v84 >= 2)
          {
            uint64_t v87 = *((void *)v83 + 4);
            uint64_t v88 = 8 * v84;
            do
            {
              if (*(unsigned char *)(*(void *)v87 + 16) != 61) {
                goto LABEL_148;
              }
              v87 += 8;
              v88 -= 8;
            }
            while (v88);
            if (v84 != 2)
            {
              uint64_t v89 = *(unsigned __int8 **)(v137 + 304);
              unint64_t v90 = *(void *)(v137 + 312);
              if (v90 >= 2)
              {
                int v116 = v89 + 1;
                unsigned __int8 v115 = *v89;
                unint64_t v117 = v90 - 1;
                uint64_t v91 = *(unsigned __int8 **)(v137 + 304);
                uint64_t v118 = v89 + 1;
                do
                {
                  unsigned int v120 = *v118++;
                  unsigned __int8 v119 = v120;
                  BOOL v121 = v115 >= v120;
                  if (v115 <= v120) {
                    unsigned __int8 v115 = v119;
                  }
                  if (!v121) {
                    uint64_t v91 = v116;
                  }
                  int v116 = v118;
                  --v117;
                }
                while (v117);
              }
              else
              {
                uint64_t v91 = *(unsigned __int8 **)(v137 + 304);
              }
              unsigned int v92 = v91 == &v89[v90] || *v91 <= 7u ? 1 : *v91 >> 3;
              if (v84 > v85 % v92 + v85 / v92) {
                break;
              }
            }
          }
        }
        v83 += 44;
        if (v83 == (unsigned int *)((char *)v160 + 176 * v161)) {
          goto LABEL_208;
        }
      }
LABEL_148:
      uint64_t v139 = v78;
      uint64_t v93 = (llvm::Value *)*((void *)v83 + 2);
      unint64_t v94 = v83[6];
      unint64_t v95 = __clz(v94) ^ 0x13F;
      if (v94) {
        __int16 v96 = v95;
      }
      else {
        __int16 v96 = 0;
      }
      uint64_t v97 = *(llvm::ConstantInt **)(*(void *)v149 + 1984);
      unint64_t v98 = *(unsigned int *)(*(void *)v149 + 1992);
      unsigned int v144 = *(_DWORD *)(*(void *)v149 + 1992) >> 8;
      uint64_t v99 = (v98 >> 8) + 63;
      if (v98 >> 8 > 0x40)
      {
        uint64_t v135 = ~v99;
        size_t v134 = (v99 >> 3) & 0x3FFFF8;
        operator new[]();
      }
      if (v98 <= 0xFF) {
        unint64_t v100 = 0;
      }
      else {
        unint64_t v100 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v99;
      }
      std::string::size_type v143 = (unsigned __int8 **)(v100 & v85);
      uint64_t v101 = llvm::ConstantInt::get(v97, (llvm::LLVMContext *)&v143, v82);
      if (v144 >= 0x41 && v143) {
        MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
      }
      MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)v145, v93, (uint64_t)a4, v101, v96, 0, 0, 0, 0);
      uint64_t v104 = v138;
      int v103 = v139;
      if (v83[10])
      {
        uint64_t v105 = *(unsigned __int8 **)(**((void **)v83 + 4) + 48);
        unint64_t v141 = v105;
        if (v105) {
          llvm::MetadataTracking::track((uint64_t)&v141, v105, 2);
        }
        v106 = (unsigned __int8 **)(MemSet + 6);
        if (&v141 == (unsigned __int8 **)(MemSet + 6))
        {
          if (!v141) {
            goto LABEL_163;
          }
          int v122 = *v141;
          if ((v122 - 4) > 0x1E)
          {
            if ((v122 - 3) >= 0xFFFFFFFE) {
              int v125 = v141;
            }
            else {
              int v125 = 0;
            }
            if ((v122 - 3) < 0xFFFFFFFE)
            {
              uint64_t v104 = v138;
              int v103 = v139;
              if (v122 == 3) {
                *((void *)v141 + 1) = 0;
              }
              goto LABEL_163;
            }
            unint64_t v124 = (unint64_t)(v125 + 8);
          }
          else
          {
            uint64_t v104 = v138;
            int v103 = v139;
            if ((v141[1] & 0x7F) != 2 && !*((_DWORD *)v141 + 3)) {
              goto LABEL_163;
            }
            uint64_t v123 = *((void *)v141 + 2);
            if ((v123 & 4) == 0) {
              goto LABEL_163;
            }
            unint64_t v124 = v123 & 0xFFFFFFFFFFFFFFF8;
            if (!v124) {
              goto LABEL_163;
            }
          }
          std::string::size_type v143 = &v141;
          sub_1CC5FA668(v124 + 16, &v143);
          uint64_t v104 = v138;
          int v103 = v139;
          goto LABEL_163;
        }
        size_t v107 = *v106;
        if (!*v106) {
          goto LABEL_161;
        }
        int v111 = *v107;
        if ((v111 - 4) <= 0x1E)
        {
          if ((v107[1] & 0x7F) != 2 && !*((_DWORD *)v107 + 3)) {
            goto LABEL_161;
          }
          uint64_t v112 = *((void *)v107 + 2);
          if ((v112 & 4) == 0) {
            goto LABEL_161;
          }
          unint64_t v113 = v112 & 0xFFFFFFFFFFFFFFF8;
          if (!v113) {
            goto LABEL_161;
          }
          goto LABEL_180;
        }
        if ((v111 - 3) >= 0xFFFFFFFE) {
          uint64_t v114 = *v106;
        }
        else {
          uint64_t v114 = 0;
        }
        if ((v111 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v113 = (unint64_t)(v114 + 8);
LABEL_180:
          std::string::size_type v143 = (unsigned __int8 **)(MemSet + 6);
          sub_1CC5FA668(v113 + 16, &v143);
          goto LABEL_161;
        }
        if (v111 == 3) {
          *((void *)v107 + 1) = 0;
        }
LABEL_161:
        size_t v108 = v141;
        const void *v106 = v141;
        if (v108)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v141, v108, (uint64_t)(MemSet + 6));
          unint64_t v141 = 0;
        }
      }
LABEL_163:
      uint64_t v109 = (uint64_t **)*((void *)this + 5);
      if (*(void *)(v104 + 72) == v12) {
        MemoryAccessBefore = llvm::MemorySSAUpdater::createMemoryAccessBefore(v109, (uint64_t)MemSet, (uint64_t)v103, v104);
      }
      else {
        MemoryAccessBefore = llvm::MemorySSAUpdater::createMemoryAccessAfter(v109, (llvm::Instruction *)MemSet, v103, (const llvm::BasicBlock **)v104);
      }
      llvm::MemorySSAUpdater::insertDef(*((llvm::MemorySSAUpdater **)this + 5), (llvm::MemoryDef *)MemoryAccessBefore);
    }
LABEL_208:
    if (v145[0] != v140) {
      free(v145[0]);
    }
    int v126 = (char *)v160;
    if (v161)
    {
      uint64_t v127 = 176 * v161;
      do
      {
        v128 = *(char **)&v126[v127 - 144];
        if (&v126[v127 - 128] != v128) {
          free(v128);
        }
        v127 -= 176;
      }
      while (v127);
      goto LABEL_215;
    }
  }
  else
  {
LABEL_215:
    int v126 = (char *)v160;
  }
  if (v126 != v136) {
    free(v126);
  }
  return 0;
}

void sub_1CCE3B988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = (uint64_t *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u) {
    int v8 = (uint64_t *)*v8;
  }
  uint64_t v9 = *v8;
  int v10 = llvm::Value::stripPointerCasts(*(llvm::Value **)v6);
  uint64_t v11 = *(void *)(a3 + 64);
  if (v11
    && *(_DWORD *)(v11 + 8) >= 3u
    && (uint64_t v12 = *(llvm::AttributeSetNode **)(v11 + 56)) != 0
    && (unsigned __int16 Alignment = llvm::AttributeSetNode::getAlignment(v12), Alignment > 0xFFu))
  {
    uint64_t v14 = 1 << Alignment;
  }
  else
  {
    LODWORD(v14) = 0;
  }

  sub_1CCE41990(a1, a2, v9, (uint64_t)v10, v14, a3);
}

uint64_t llvm::MemCpyOptPass::moveUp(llvm::MemCpyOptPass *this, llvm::StoreInst *a2, llvm::Instruction *a3, const llvm::LoadInst *a4)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)a2 - 4);
  uint64_t v9 = sub_1CB83544C(*(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40) + 272, **((void **)a2 - 8));
  if (v10 == 1) {
    unint64_t v11 = -2;
  }
  else {
    unint64_t v11 = (unint64_t)(v9 + 7) >> 3;
  }
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, &v113);
  *(void *)&long long v112 = v8;
  *((void *)&v112 + 1) = v11;
  uint64_t v12 = *((void *)this + 1);
  *(_OWORD *)int v122 = v112;
  long long v123 = v113;
  long long v124 = v114;
  LOBYTE(v125) = 1;
  *(void *)&long long v129 = 1;
  uint64_t v13 = 8;
  do
  {
    uint64_t v14 = (char *)&v129 + v13;
    *(_OWORD *)uint64_t v14 = xmmword_1CFAC3060;
    *((_OWORD *)v14 + 1) = xmmword_1CFAC3060;
    v13 += 40;
  }
  while (v14 + 40 != (char *)&v132);
  unint64_t v132 = &v137;
  uint64_t v133 = 0;
  size_t v134 = v136;
  uint64_t v135 = 0x400000000;
  uint64_t v137 = &unk_1F2600DB8;
  uint64_t v138 = 1;
  for (uint64_t i = 504; i != 632; i += 16)
    *(void *)((char *)&v129 + i) = -4096;
  char ModRefInfo = llvm::AAResults::getModRefInfo(v12, a3, (long long *)v122, (uint64_t)&v129);
  if ((v138 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v139, 8);
  }
  if (v134 != v136) {
    free(v134);
  }
  if ((v129 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)&v129 + 1), 8);
  }
  if ((ModRefInfo & 3) != 0) {
    return 0;
  }
  uint64_t v109 = 0;
  int32x2_t v110 = 0;
  int v111 = 0;
  uint64_t v18 = *((void *)a2 - 4);
  if (*(unsigned __int8 *)(v18 + 16) <= 0x1Bu) {
    uint64_t v18 = 0;
  }
  v122[0] = (void *)v18;
  if (v18 && *(void *)(v18 + 40) == *((void *)a2 + 5)) {
    sub_1CD50F67C((uint64_t)&v109, v122, (uint64_t)&v129);
  }
  int v126 = v128;
  v128[0] = a2;
  uint64_t v127 = 0x800000001;
  long long v123 = v112;
  long long v124 = v113;
  long long v125 = v114;
  v122[0] = &v123;
  v122[1] = (void *)0x800000001;
  unsigned __int8 v119 = v121;
  uint64_t v120 = 0x800000000;
  uint64_t v19 = *((void *)a4 - 4);
  uint64_t v20 = sub_1CB83544C(*(void *)(*(void *)(*((void *)a4 + 5) + 56) + 40) + 272, *(void *)a4);
  if (v21 == 1) {
    unint64_t v22 = -2;
  }
  else {
    unint64_t v22 = (unint64_t)(v20 + 7) >> 3;
  }
  llvm::Instruction::getAAMetadata((uint64_t ***)a4, v108);
  *(void *)&long long v107 = v19;
  *((void *)&v107 + 1) = v22;
  uint64_t v105 = a3;
  uint64_t v23 = (llvm::Instruction *)*((void *)a2 + 3);
  int v103 = (llvm::Instruction *)((char *)a3 + 24);
  if (v23 != (llvm::Instruction *)((char *)a3 + 24))
  {
    do
    {
      uint64_t v104 = (llvm::Instruction **)v23;
      if (v23) {
        uint64_t v24 = (uint64_t)v23 - 24;
      }
      else {
        uint64_t v24 = 0;
      }
      int v25 = *(unsigned __int8 *)(v24 + 16);
      v102 = (llvm::Instruction *)((char *)v23 - 24);
      if (v25 != 84)
      {
        uint64_t v17 = 0;
        switch(*(unsigned char *)(v24 + 16))
        {
          case 0x1D:
          case 0x22:
          case 0x23:
            goto LABEL_157;
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x25:
            goto LABEL_33;
          case 0x24:
          case 0x26:
            if ((*(_WORD *)(v24 + 18) & 1) == 0) {
              goto LABEL_124;
            }
            goto LABEL_33;
          default:
            if (v25 != 80) {
              goto LABEL_33;
            }
            PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(void *)(v24 + 40)
                                                                                               + 56));
            if (llvm::classifyEHPersonality(PersonalityFn, v68) != 10) {
              goto LABEL_124;
            }
            goto LABEL_34;
        }
      }
      uint64_t v55 = *(void *)(v24 + 64);
      if ((!v55 || (*(unsigned char *)(v55 + 16) & 0x20) == 0)
        && !llvm::CallBase::hasFnAttrOnCalledFunction(v24, 37))
      {
LABEL_124:
        uint64_t v17 = 0;
        goto LABEL_157;
      }
LABEL_33:
      if (!llvm::Instruction::willReturn((llvm::Instruction *)v24)) {
        goto LABEL_124;
      }
LABEL_34:
      uint64_t v26 = *((void *)this + 1);
      LOBYTE(v115) = 0;
      char v118 = 0;
      uint64_t v27 = 8;
      *(void *)&long long v129 = 1;
      do
      {
        uint64_t v28 = (char *)&v129 + v27;
        *(_OWORD *)uint64_t v28 = xmmword_1CFAC3060;
        *((_OWORD *)v28 + 1) = xmmword_1CFAC3060;
        v27 += 40;
      }
      while (v28 + 40 != (char *)&v132);
      unint64_t v132 = &v137;
      uint64_t v133 = 0;
      size_t v134 = v136;
      uint64_t v135 = 0x400000000;
      uint64_t v137 = &unk_1F2600DB8;
      uint64_t v29 = 504;
      uint64_t v138 = 1;
      do
      {
        *(void *)((char *)&v129 + v29) = -4096;
        v29 += 16;
      }
      while (v29 != 632);
      char v30 = llvm::AAResults::getModRefInfo(v26, (llvm::Instruction *)v24, &v115, (uint64_t)&v129);
      if ((v138 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v139, 8);
      }
      if (v134 != v136) {
        free(v134);
      }
      if ((v129 & 1) == 0) {
        MEMORY[0x1D25D9CD0](*((void *)&v129 + 1), 8);
      }
      if (v111)
      {
        LODWORD(v31) = (v111 - 1) & ((v24 >> 4) ^ (v24 >> 9));
        BOOL v32 = (uint64_t *)(v109 + 8 * v31);
        uint64_t v33 = *v32;
        if (v24 == *v32)
        {
LABEL_46:
          *BOOL v32 = -8192;
          int32x2_t v110 = vadd_s32(v110, (int32x2_t)0x1FFFFFFFFLL);
          goto LABEL_47;
        }
        int v56 = 1;
        while (v33 != -4096)
        {
          int v57 = v31 + v56++;
          uint64_t v31 = v57 & (v111 - 1);
          uint64_t v33 = *(void *)(v109 + 8 * v31);
          if (v24 == v33)
          {
            BOOL v32 = (uint64_t *)(v109 + 8 * v31);
            goto LABEL_46;
          }
        }
      }
      if ((v30 & 3) == 0) {
        goto LABEL_118;
      }
      if (LODWORD(v122[1]))
      {
        size_t v58 = (long long *)v122[0];
        uint64_t v59 = (long long *)((char *)v122[0] + 48 * LODWORD(v122[1]));
        while (1)
        {
          uint64_t v60 = *((void *)this + 1);
          long long v115 = *v58;
          long long v116 = v58[1];
          long long v117 = v58[2];
          char v118 = 1;
          *(void *)&long long v129 = 1;
          uint64_t v61 = 8;
          do
          {
            int v62 = (char *)&v129 + v61;
            *(_OWORD *)int v62 = xmmword_1CFAC3060;
            *((_OWORD *)v62 + 1) = xmmword_1CFAC3060;
            v61 += 40;
          }
          while (v62 + 40 != (char *)&v132);
          unint64_t v132 = &v137;
          uint64_t v133 = 0;
          size_t v134 = v136;
          uint64_t v135 = 0x400000000;
          uint64_t v137 = &unk_1F2600DB8;
          uint64_t v63 = 504;
          uint64_t v138 = 1;
          do
          {
            *(void *)((char *)&v129 + v63) = -4096;
            v63 += 16;
          }
          while (v63 != 632);
          char v64 = llvm::AAResults::getModRefInfo(v60, (llvm::Instruction *)v24, &v115, (uint64_t)&v129);
          if ((v138 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v139, 8);
          }
          if (v134 != v136) {
            free(v134);
          }
          if ((v129 & 1) == 0) {
            MEMORY[0x1D25D9CD0](*((void *)&v129 + 1), 8);
          }
          if ((v64 & 3) != 0) {
            break;
          }
          v58 += 3;
          if (v58 == v59) {
            goto LABEL_114;
          }
        }
      }
      else
      {
LABEL_114:
        if (!v120) {
          goto LABEL_118;
        }
        uint64_t v65 = (const llvm::CallBase **)v119;
        uint64_t v66 = 8 * v120;
        while ((llvm::AAResults::getModRefInfo(*((llvm::AAResults **)this + 1), (uint64_t ***)v24, *v65) & 3) == 0)
        {
          ++v65;
          v66 -= 8;
          if (!v66) {
            goto LABEL_118;
          }
        }
      }
LABEL_47:
      if ((v30 & 3) != 0)
      {
        uint64_t v34 = *((void *)this + 1);
        long long v115 = v107;
        long long v116 = v108[0];
        long long v117 = v108[1];
        char v118 = 1;
        *(void *)&long long v129 = 1;
        uint64_t v35 = 8;
        do
        {
          uint64_t v36 = (char *)&v129 + v35;
          *(_OWORD *)uint64_t v36 = xmmword_1CFAC3060;
          *((_OWORD *)v36 + 1) = xmmword_1CFAC3060;
          v35 += 40;
        }
        while (v36 + 40 != (char *)&v132);
        unint64_t v132 = &v137;
        uint64_t v133 = 0;
        size_t v134 = v136;
        uint64_t v135 = 0x400000000;
        uint64_t v137 = &unk_1F2600DB8;
        uint64_t v37 = 504;
        uint64_t v138 = 1;
        do
        {
          *(void *)((char *)&v129 + v37) = -4096;
          v37 += 16;
        }
        while (v37 != 632);
        char v38 = llvm::AAResults::getModRefInfo(v34, (llvm::Instruction *)v24, &v115, (uint64_t)&v129);
        if ((v138 & 1) == 0) {
          MEMORY[0x1D25D9CD0](v139, 8);
        }
        if (v134 != v136) {
          free(v134);
        }
        if (v129)
        {
          if ((v38 & 2) != 0) {
            goto LABEL_124;
          }
        }
        else
        {
          MEMORY[0x1D25D9CD0](*((void *)&v129 + 1), 8);
          if ((v38 & 2) != 0) {
            goto LABEL_124;
          }
        }
        uint64_t v17 = 0;
        unsigned int v39 = *(unsigned __int8 *)(v24 + 16) - 33;
        if (v39 > 0x37) {
          goto LABEL_157;
        }
        if (((1 << v39) & 0x8000000000041) != 0)
        {
          if ((llvm::AAResults::getModRefInfo(*((llvm::AAResults **)this + 1), (uint64_t ***)a3, v102) & 3) != 0) {
            goto LABEL_124;
          }
          if (v120 >= (unint64_t)HIDWORD(v120)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v119 + v120) = v102;
          LODWORD(v120) = v120 + 1;
        }
        else
        {
          if (((1 << v39) & 0x80000018000000) == 0) {
            goto LABEL_157;
          }
          llvm::MemoryLocation::getOrNone((uint64_t ***)v24, (uint64_t)&v129);
          v106[1] = v130;
          v106[2] = v131;
          v106[0] = v129;
          uint64_t v40 = *((void *)this + 1);
          long long v115 = v129;
          long long v116 = v130;
          long long v117 = v131;
          char v118 = 1;
          uint64_t v41 = 8;
          *(void *)&long long v129 = 1;
          do
          {
            int v42 = (char *)&v129 + v41;
            *(_OWORD *)int v42 = xmmword_1CFAC3060;
            *((_OWORD *)v42 + 1) = xmmword_1CFAC3060;
            v41 += 40;
          }
          while (v42 + 40 != (char *)&v132);
          unint64_t v132 = &v137;
          uint64_t v133 = 0;
          size_t v134 = v136;
          uint64_t v135 = 0x400000000;
          uint64_t v137 = &unk_1F2600DB8;
          uint64_t v43 = 504;
          uint64_t v138 = 1;
          do
          {
            *(void *)((char *)&v129 + v43) = -4096;
            v43 += 16;
          }
          while (v43 != 632);
          char v44 = llvm::AAResults::getModRefInfo(v40, a3, &v115, (uint64_t)&v129);
          if ((v138 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v139, 8);
          }
          if (v134 != v136) {
            free(v134);
          }
          if ((v129 & 1) == 0) {
            MEMORY[0x1D25D9CD0](*((void *)&v129 + 1), 8);
          }
          if ((v44 & 3) != 0) {
            goto LABEL_124;
          }
          BOOL v45 = (_OWORD *)sub_1CD58643C((uint64_t)v122, (unint64_t)v106, 1);
          uint64_t v46 = (char *)v122[0] + 48 * LODWORD(v122[1]);
          long long v48 = v45[1];
          long long v47 = v45[2];
          *uint64_t v46 = *v45;
          v46[1] = v48;
          v46[2] = v47;
          ++LODWORD(v122[1]);
        }
      }
      if (v127 >= (unint64_t)HIDWORD(v127)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v126 + v127) = v24;
      LODWORD(v127) = v127 + 1;
      uint64_t v49 = *(_DWORD *)(v24 + 20) & 0x7FFFFFF;
      if (v49)
      {
        uint64_t v50 = 0;
        uint64_t v51 = 32 * v49;
        do
        {
          *(void *)&long long v115 = 0;
          int v52 = *(_DWORD *)(v24 + 20);
          if ((v52 & 0x40000000) != 0) {
            uint64_t v53 = *(void *)(v24 - 8);
          }
          else {
            uint64_t v53 = v24 - 32 * (v52 & 0x7FFFFFF);
          }
          uint64_t v54 = *(void *)(v53 + v50);
          if (*(unsigned __int8 *)(v54 + 16) <= 0x1Bu) {
            uint64_t v54 = 0;
          }
          *(void *)&long long v115 = v54;
          if (v54 && *(void *)(v54 + 40) == *((void *)a2 + 5))
          {
            if ((llvm::Instruction *)v54 == a3) {
              goto LABEL_124;
            }
            sub_1CD50F67C((uint64_t)&v109, &v115, (uint64_t)&v129);
          }
          v50 += 32;
        }
        while (v51 != v50);
      }
LABEL_118:
      uint64_t v23 = *v104;
    }
    while (*v104 != v103);
  }
  uint64_t v69 = **((void **)this + 5);
  uint64_t v70 = *(void *)(v69 + 24);
  int v71 = *(_DWORD *)(v69 + 40);
  if (v71)
  {
    uint64_t v72 = (v71 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v73 = *(llvm::Instruction **)(v70 + 16 * v72);
    if (v73 == a3)
    {
LABEL_130:
      uint64_t v76 = *(void *)(v70 + 16 * v72 + 8);
      if (v76)
      {
        uint64_t v77 = *(void *)(v76 + 32);
        if (v77) {
          uint64_t v78 = v77 - 32;
        }
        else {
          uint64_t v78 = 0;
        }
        goto LABEL_146;
      }
    }
    else
    {
      int v74 = 1;
      while (v73 != (llvm::Instruction *)-4096)
      {
        int v75 = v72 + v74++;
        uint64_t v72 = v75 & (v71 - 1);
        uint64_t v73 = *(llvm::Instruction **)(v70 + 16 * v72);
        if (v73 == a3) {
          goto LABEL_130;
        }
      }
    }
  }
  uint64_t v79 = (void *)*((void *)a4 + 3);
  uint64_t v80 = *(void **)v103;
  if (*(void **)v103 != v79)
  {
    unsigned int v81 = v71 - 1;
    do
    {
      int v82 = v80 - 3;
      if (!v80) {
        int v82 = 0;
      }
      if (v71)
      {
        uint64_t v83 = ((v82 >> 4) ^ (v82 >> 9)) & v81;
        uint64_t v84 = *(void **)(v70 + 16 * v83);
        if (v82 == v84)
        {
LABEL_143:
          uint64_t v78 = *(void *)(v70 + 16 * v83 + 8);
          if (v78) {
            goto LABEL_146;
          }
        }
        else
        {
          int v85 = 1;
          while (v84 != (void *)-4096)
          {
            int v86 = v83 + v85++;
            uint64_t v83 = v86 & v81;
            uint64_t v84 = *(void **)(v70 + 16 * v83);
            if (v82 == v84) {
              goto LABEL_143;
            }
          }
        }
      }
      uint64_t v80 = (void *)*v80;
    }
    while (v80 != v79);
  }
  uint64_t v78 = 0;
LABEL_146:
  if (v127)
  {
    uint64_t v87 = (char *)v126;
    uint64_t v88 = (char *)v126 + 8 * v127;
    do
    {
      unint64_t v90 = (llvm::Instruction *)*((void *)v88 - 1);
      v88 -= 8;
      uint64_t v89 = v90;
      llvm::Instruction::moveBefore(v90, v105);
      uint64_t v91 = *((void *)this + 5);
      int v92 = *(_DWORD *)(*(void *)v91 + 40);
      if (v92)
      {
        uint64_t v93 = *(void *)(*(void *)v91 + 24);
        unsigned int v94 = v92 - 1;
        uint64_t v95 = (v92 - 1) & ((v89 >> 4) ^ (v89 >> 9));
        __int16 v96 = *(llvm::Instruction **)(v93 + 16 * v95);
        if (v89 == v96)
        {
LABEL_153:
          uint64_t v99 = v93 + 16 * v95;
          uint64_t v100 = *(void *)(v99 + 8);
          if (v100)
          {
            sub_1CC0BBCCC(v91, *(void *)(v99 + 8), *(const llvm::BasicBlock **)(v78 + 64), *(void **)(v78 + 40));
            uint64_t v78 = v100;
          }
        }
        else
        {
          int v97 = 1;
          while (v96 != (llvm::Instruction *)-4096)
          {
            int v98 = v95 + v97++;
            uint64_t v95 = v98 & v94;
            __int16 v96 = *(llvm::Instruction **)(v93 + 16 * v95);
            if (v89 == v96) {
              goto LABEL_153;
            }
          }
        }
      }
    }
    while (v88 != v87);
  }
  uint64_t v17 = 1;
LABEL_157:
  if (v119 != v121) {
    free(v119);
  }
  if (v122[0] != &v123) {
    free(v122[0]);
  }
  if (v126 != v128) {
    free(v126);
  }
  MEMORY[0x1D25D9CD0](v109, 8);
  return v17;
}

llvm::Value *llvm::MemCpyOptPass::processStore(llvm::MemCpyOptPass *a1, llvm::Instruction *a2, void *a3)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  int v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 == 60 || v6 == 61)
  {
    __int16 v7 = *((_WORD *)a2 + 9);
    if (v7 & 0x380) != 0 || (v7) {
      return 0;
    }
  }
  else if (v6 - 63) < 3 || (*((_WORD *)a2 + 9))
  {
    return 0;
  }
  if ((*((unsigned char *)a2 + 23) & 0x20) != 0)
  {
    uint64_t v8 = ***(void ***)a2;
    uint64_t v133 = a2;
    int v9 = *(_DWORD *)(v8 + 2496);
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 2480);
      int v11 = v9 - 1;
      unsigned int v12 = v11 & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v13 = (llvm::Instruction **)(v10 + 40 * v12);
      uint64_t v14 = *v13;
      if (*v13 == a2)
      {
LABEL_15:
        uint64_t v19 = *((unsigned int *)v13 + 4);
        if (v19)
        {
          uint64_t v20 = (void *)((char *)v13[1] + 8);
          uint64_t v21 = 16 * v19;
          while (*((_DWORD *)v20 - 2) != 9)
          {
            v20 += 2;
            v21 -= 16;
            if (!v21) {
              goto LABEL_19;
            }
          }
          if (*v20) {
            return 0;
          }
        }
        goto LABEL_19;
      }
      unsigned __int8 v15 = 0;
      int v16 = 1;
      while (v14 != (llvm::Instruction *)-4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == (llvm::Instruction *)-8192;
        }
        if (v17) {
          unsigned __int8 v15 = v13;
        }
        unsigned int v18 = v12 + v16++;
        unsigned int v12 = v18 & v11;
        uint64_t v13 = (llvm::Instruction **)(v10 + 40 * v12);
        uint64_t v14 = *v13;
        if (*v13 == a2) {
          goto LABEL_15;
        }
      }
      if (v15) {
        BOOL v45 = v15;
      }
      else {
        BOOL v45 = v13;
      }
    }
    else
    {
      BOOL v45 = 0;
    }
    uint64_t v13 = (llvm::Instruction **)sub_1CC609054(v8 + 2480, (uint64_t)&v133, (uint64_t *)&v133, v45);
    uint64_t v46 = (llvm::Instruction *)v133;
    v13[3] = 0;
    v13[4] = 0;
    *uint64_t v13 = v46;
    v13[1] = (llvm::Instruction *)(v13 + 3);
    void v13[2] = (llvm::Instruction *)0x100000000;
    goto LABEL_15;
  }
LABEL_19:
  unint64_t v22 = (llvm::Value *)(*(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40) + 272);
  uint64_t v23 = (llvm::Instruction *)*((void *)a2 - 8);
  uint64_t v24 = *(void *)v23;
  if ((*(_DWORD *)(*(void *)v23 + 8) & 0xFE) == 0x12) {
    uint64_t v24 = **(void **)(v24 + 16);
  }
  if (sub_1CBFB72C8(*(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40) + 272, v24)) {
    return 0;
  }
  if (*((unsigned char *)v23 + 16) == 60) {
    uint64_t v27 = v23;
  }
  else {
    uint64_t v27 = 0;
  }
  long long v129 = v27;
  if (v27)
  {
    int v28 = *((unsigned __int8 *)v27 + 16);
    if (v28 == 60 || v28 == 61)
    {
      __int16 v29 = *((_WORD *)v27 + 9);
      if (v29 & 0x380) != 0 || (v29) {
        goto LABEL_97;
      }
    }
    else if (v28 - 63) < 3 || (*((_WORD *)v27 + 9))
    {
      goto LABEL_97;
    }
    uint64_t v30 = *((void *)v27 + 1);
    if (!v30) {
      goto LABEL_97;
    }
    if (*(void *)(v30 + 8)) {
      goto LABEL_97;
    }
    uint64_t v31 = (void *)*((void *)v27 + 5);
    if (v31 != *((void **)a2 + 5)) {
      goto LABEL_97;
    }
    if ((*(_DWORD *)(*(void *)v27 + 8) & 0xFE) != 0x10) {
      goto LABEL_81;
    }
    if (!byte_1EBCF7190)
    {
      uint64_t v47 = *(void *)(*(void *)(*(void *)a1 + 8) + 40);
      if ((v47 & 4) != 0) {
        goto LABEL_81;
      }
      unsigned int v48 = *(unsigned __int8 *)(**(void **)a1 + 80);
      if (v48 < 0x40 || (v47 & 8) != 0 || (v48 & 0x30) == 0) {
        goto LABEL_81;
      }
    }
    uint64_t v32 = *((void *)v27 - 4);
    uint64_t v124 = *(void *)v27;
    uint64_t v33 = sub_1CB83544C(*(void *)(v31[7] + 40) + 272, *(void *)v27);
    if (v34 == 1) {
      unint64_t v35 = -2;
    }
    else {
      unint64_t v35 = (unint64_t)(v33 + 7) >> 3;
    }
    llvm::Instruction::getAAMetadata((uint64_t ***)v27, v128);
    *(void *)&long long v127 = v32;
    *((void *)&v127 + 1) = v35;
    uint64_t v36 = (void *)*((void *)v129 + 4);
    uint64_t v37 = a2;
    if (v36 != (void *)((char *)a2 + 24))
    {
      long long v38 = xmmword_1CFAC3060;
      do
      {
        uint64_t v39 = *((void *)a1 + 1);
        v125[0] = v127;
        v125[1] = v128[0];
        v125[2] = v128[1];
        char v126 = 1;
        uint64_t v133 = (void *)1;
        uint64_t v40 = 8;
        do
        {
          uint64_t v41 = (char *)&v133 + v40;
          *(_OWORD *)uint64_t v41 = v38;
          *((_OWORD *)v41 + 1) = v38;
          v40 += 40;
        }
        while (v41 + 40 != (char *)v149);
        v149[0] = &v153;
        v149[1] = 0;
        uint64_t v150 = v152;
        uint64_t v151 = 0x400000000;
        int v153 = &unk_1F2600DB8;
        uint64_t v42 = 504;
        uint64_t v154 = 1;
        do
        {
          *(void **)((char *)&v133 + v42) = (void *)-4096;
          v42 += 16;
        }
        while (v42 != 632);
        if (v36) {
          uint64_t v43 = (llvm::Instruction *)(v36 - 3);
        }
        else {
          uint64_t v43 = 0;
        }
        char ModRefInfo = llvm::AAResults::getModRefInfo(v39, v43, v125, (uint64_t)&v133);
        if ((v154 & 1) == 0)
        {
          char v122 = ModRefInfo;
          MEMORY[0x1D25D9CD0](v155, 8);
          char ModRefInfo = v122;
        }
        long long v38 = xmmword_1CFAC3060;
        if (v150 != v152)
        {
          char v123 = ModRefInfo;
          free(v150);
          long long v38 = xmmword_1CFAC3060;
          char ModRefInfo = v123;
        }
        if (v133)
        {
          if ((ModRefInfo & 2) != 0) {
            goto LABEL_77;
          }
        }
        else
        {
          char v121 = ModRefInfo;
          MEMORY[0x1D25D9CD0](v134, 8);
          long long v38 = xmmword_1CFAC3060;
          if ((v121 & 2) != 0) {
            goto LABEL_77;
          }
        }
        uint64_t v36 = (void *)v36[1];
      }
      while (v36 != (void *)((char *)a2 + 24));
      uint64_t v43 = a2;
LABEL_77:
      if (!v43 || (uint64_t v37 = a2, v43 != a2) && (uint64_t v37 = v43, !llvm::MemCpyOptPass::moveUp(a1, a2, v43, v129)))
      {
        uint64_t v23 = v129;
LABEL_81:
        uint64_t v49 = llvm::Value::stripPointerCasts(*((llvm::Value **)a2 - 4));
        uint64_t v50 = llvm::Value::stripPointerCasts(*((llvm::Value **)v129 - 4));
        unint64_t v52 = (unint64_t)(sub_1CB83544C((uint64_t)v22, **((void **)a2 - 8)) + 7) >> 3;
        unsigned int v53 = __clz(1 << ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1)) ^ 0x3F;
        unsigned int v54 = __clz(1 << ((unint64_t)*((unsigned __int16 *)v129 + 9) >> 1)) ^ 0x3F;
        if (v54 >= v53) {
          unsigned __int8 v55 = v53;
        }
        else {
          unsigned __int8 v55 = v54;
        }
        v131[0] = &unk_1F263FF28;
        v131[1] = a1;
        v131[2] = &v129;
        unint64_t v132 = v131;
        int v56 = llvm::MemCpyOptPass::performCallSlotOptzn((uint64_t)a1, v23, (uint64_t)a2, (uint64_t)v49, (uint64_t)v50, v52, v51 == 1, v55, (uint64_t)v131);
        if (v132 == v131)
        {
          (*(void (**)(void *))(v131[0] + 32))(v131);
        }
        else if (v132)
        {
          (*(void (**)(void))(*v132 + 40))();
        }
        if (v56)
        {
          int v57 = (int32x2_t **)*((void *)a1 + 5);
          __int32 v58 = (*v57)[5].i32[0];
          if (v58)
          {
            int32x2_t v59 = (*v57)[3];
            __int32 v60 = v58 - 1;
            uint64_t v61 = (v58 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            int v62 = *(llvm::Instruction **)(*(void *)&v59 + 16 * v61);
            if (v62 == a2)
            {
LABEL_94:
              uint64_t v65 = *(llvm::MemoryAccess **)(*(void *)&v59 + 16 * v61 + 8);
              if (v65) {
                llvm::MemorySSAUpdater::removeMemoryAccess(v57, v65, 0);
              }
            }
            else
            {
              int v63 = 1;
              while (v62 != (llvm::Instruction *)-4096)
              {
                int v64 = v61 + v63++;
                uint64_t v61 = v64 & v60;
                int v62 = *(llvm::Instruction **)(*(void *)&v59 + 16 * v61);
                if (v62 == a2) {
                  goto LABEL_94;
                }
              }
            }
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        goto LABEL_97;
      }
    }
    char v89 = llvm::AAResults::getModRefInfo(*((llvm::AAResults **)a1 + 1), a2, (const llvm::MemoryLocation *)&v127);
    uint64_t v91 = sub_1CB83544C((uint64_t)v22, v124);
    if (v90 == 1) {
    uint64_t v92 = 0;
    }
    unint64_t v93 = v91 + 7;
    uint64_t v94 = **(void **)v37;
    uint64_t v133 = v135;
    uint64_t v134 = 0x200000000;
    uint64_t v138 = v94;
    uint64_t v139 = &v147;
    uint64_t v140 = v148;
    uint64_t v141 = 0;
    int v142 = 0;
    __int16 v143 = 512;
    char v144 = 7;
    std::string::size_type v136 = 0;
    uint64_t v137 = 0;
    uint64_t v145 = 0;
    uint64_t v146 = 0;
    uint64_t v147 = &unk_1F2616E88;
    v148[0] = &unk_1F2617008;
    std::string::size_type v136 = (void *)*((void *)v37 + 5);
    uint64_t v137 = (void **)((char *)v37 + 24);
    uint64_t v95 = (unsigned __int8 *)*((void *)v37 + 6);
    long long v130 = v95;
    if (v95)
    {
      llvm::MetadataTracking::track((uint64_t)&v130, v95, 2);
      uint64_t v92 = (uint64_t)v130;
    }
    __int16 v96 = (llvm::IntegerType *)(v93 >> 3);
    sub_1CB8461A4((uint64_t)&v133, 0, v92);
    if (!v130)
    {
LABEL_133:
      int v97 = (llvm::Value *)*((void *)a2 - 4);
      int v98 = (llvm::Value *)*((void *)v129 - 4);
      unint64_t v99 = ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1) & 0x3F | 0x100;
      unint64_t v100 = ((unint64_t)*((unsigned __int16 *)v129 + 9) >> 1) & 0x3F | 0x100;
      if ((v89 & 2) != 0) {
        uint64_t v101 = sub_1CD778E8C((uint64_t)&v133, v97, v99, v98, v100, v96);
      }
      else {
        uint64_t v101 = sub_1CD778F14((uint64_t)&v133, v97, v99, v98, v100, v96);
      }
      uint64_t v105 = (llvm::Instruction *)v101;
      v106 = (uint64_t **)*((void *)a1 + 5);
      int v107 = *((_DWORD *)*v106 + 10);
      if (v107)
      {
        uint64_t v108 = (*v106)[3];
        unsigned int v109 = v107 - 1;
        uint64_t v110 = (v107 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        int v111 = *(llvm::Instruction **)(v108 + 16 * v110);
        if (v111 == a2)
        {
LABEL_147:
          long long v114 = *(llvm::MemoryAccess **)(v108 + 16 * v110 + 8);
          goto LABEL_149;
        }
        int v112 = 1;
        while (v111 != (llvm::Instruction *)-4096)
        {
          int v113 = v110 + v112++;
          uint64_t v110 = v113 & v109;
          int v111 = *(llvm::Instruction **)(v108 + 16 * v110);
          if (v111 == a2) {
            goto LABEL_147;
          }
        }
      }
      long long v114 = 0;
LABEL_149:
      MemoryAccessAfter = llvm::MemorySSAUpdater::createMemoryAccessAfter(v106, v105, v114, (const llvm::BasicBlock **)v114);
      llvm::MemorySSAUpdater::insertDef(*((llvm::MemorySSAUpdater **)a1 + 5), (llvm::MemoryDef *)MemoryAccessAfter);
    }
    int v117 = *v130;
    if ((v117 - 4) > 0x1E)
    {
      if ((v117 - 3) >= 0xFFFFFFFE) {
        uint64_t v120 = v130;
      }
      else {
        uint64_t v120 = 0;
      }
      if ((v117 - 3) < 0xFFFFFFFE)
      {
        if (v117 == 3) {
          *((void *)v130 + 1) = 0;
        }
        goto LABEL_133;
      }
      unint64_t v119 = (unint64_t)(v120 + 8);
    }
    else
    {
      if ((v130[1] & 0x7F) != 2 && !*((_DWORD *)v130 + 3)) {
        goto LABEL_133;
      }
      uint64_t v118 = *((void *)v130 + 2);
      if ((v118 & 4) == 0) {
        goto LABEL_133;
      }
      unint64_t v119 = v118 & 0xFFFFFFFFFFFFFFF8;
      if (!v119) {
        goto LABEL_133;
      }
    }
    *(void *)&v125[0] = &v130;
    sub_1CC5FA668(v119 + 16, v125);
    goto LABEL_133;
  }
LABEL_97:
  if ((*(unsigned char *)(*(void *)(*(void *)a1 + 8) + 40) & 0x40) != 0)
  {
    if (byte_1EBCF7190) {
      goto LABEL_104;
    }
    return 0;
  }
  if ((*(unsigned char *)(**(void **)a1 + 81) & 0x30) == 0 && byte_1EBCF7190 == 0) {
    return 0;
  }
LABEL_104:
  uint64_t v67 = (llvm *)*((void *)a2 - 8);
  uint64_t result = llvm::isBytewiseValue(v67, v22, v25);
  if (result)
  {
    uint64_t v68 = (uint64_t)result;
    uint64_t v69 = llvm::MemCpyOptPass::tryMergingIntoMemset(a1, a2, *((llvm::Value **)a2 - 4), result);
    if (v69)
    {
      *a3 = v69 + 24;
      return (llvm::Value *)1;
    }
    if ((*(_DWORD *)(*(void *)v67 + 8) & 0xFE) != 0x10) {
      return 0;
    }
    unint64_t v71 = sub_1CB83544C((uint64_t)v22, *(void *)v67) + 7;
    if (v70 == 1) {
    uint64_t v72 = 0;
    }
    uint64_t v73 = (llvm::IntegerType *)(v71 >> 3);
    uint64_t v74 = **(void **)a2;
    uint64_t v133 = v135;
    uint64_t v134 = 0x200000000;
    uint64_t v138 = v74;
    uint64_t v139 = &v147;
    uint64_t v140 = v148;
    uint64_t v141 = 0;
    int v142 = 0;
    __int16 v143 = 512;
    char v144 = 7;
    uint64_t v145 = 0;
    uint64_t v146 = 0;
    uint64_t v147 = &unk_1F2616E88;
    v148[0] = &unk_1F2617008;
    int v75 = (unsigned __int8 *)*((void *)a2 + 6);
    std::string::size_type v136 = (void *)*((void *)a2 + 5);
    uint64_t v137 = (void **)((char *)a2 + 24);
    *(void *)&long long v127 = v75;
    if (v75)
    {
      llvm::MetadataTracking::track((uint64_t)&v127, v75, 2);
      uint64_t v72 = v127;
    }
    sub_1CB8461A4((uint64_t)&v133, 0, v72);
    if (!(void)v127)
    {
LABEL_113:
      uint64_t v76 = sub_1CD778E10((uint64_t)&v133, *((llvm::Value **)a2 - 4), v68, v73, (*((_WORD *)a2 + 9) >> 1) & 0x3F | 0x100u);
      uint64_t v77 = *((void *)a1 + 4);
      int v78 = *(_DWORD *)(v77 + 40);
      if (v78)
      {
        uint64_t v79 = *(void *)(v77 + 24);
        unsigned int v80 = v78 - 1;
        uint64_t v81 = (v78 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        int v82 = *(llvm::Instruction **)(v79 + 16 * v81);
        if (v82 == a2)
        {
LABEL_118:
          uint64_t v85 = *(void *)(v79 + 16 * v81 + 8);
          goto LABEL_120;
        }
        int v83 = 1;
        while (v82 != (llvm::Instruction *)-4096)
        {
          int v84 = v81 + v83++;
          uint64_t v81 = v84 & v80;
          int v82 = *(llvm::Instruction **)(v79 + 16 * v81);
          if (v82 == a2) {
            goto LABEL_118;
          }
        }
      }
      uint64_t v85 = 0;
LABEL_120:
      if (*(unsigned char *)(v85 + 16) == 25) {
        uint64_t v86 = v85;
      }
      else {
        uint64_t v86 = 0;
      }
      if (v86) {
        uint64_t v87 = (uint64_t *)(v86 - 32);
      }
      else {
        uint64_t v87 = (uint64_t *)(v85 - 64);
      }
      MemoryAccessBefore = llvm::MemorySSAUpdater::createMemoryAccessBefore(*((uint64_t ***)a1 + 5), (uint64_t)v76, *v87, v85);
      llvm::MemorySSAUpdater::insertDef(*((llvm::MemorySSAUpdater **)a1 + 5), (llvm::MemoryDef *)MemoryAccessBefore);
    }
    int v102 = *(unsigned __int8 *)v127;
    if ((v102 - 4) > 0x1E)
    {
      if ((v102 - 3) >= 0xFFFFFFFE) {
        uint64_t v116 = v127;
      }
      else {
        uint64_t v116 = 0;
      }
      if ((v102 - 3) < 0xFFFFFFFE)
      {
        if (v102 == 3) {
          *(void *)(v127 + 8) = 0;
        }
        goto LABEL_113;
      }
      unint64_t v104 = v116 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v127 + 1) & 0x7F) != 2 && !*(_DWORD *)(v127 + 12)) {
        goto LABEL_113;
      }
      uint64_t v103 = *(void *)(v127 + 16);
      if ((v103 & 4) == 0) {
        goto LABEL_113;
      }
      unint64_t v104 = v103 & 0xFFFFFFFFFFFFFFF8;
      if (!v104) {
        goto LABEL_113;
      }
    }
    *(void *)&v125[0] = &v127;
    sub_1CC5FA668(v104 + 16, v125);
    goto LABEL_113;
  }
  return result;
}

uint64_t llvm::MemCpyOptPass::performCallSlotOptzn(uint64_t a1, llvm::Instruction *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7, unsigned __int8 a8, uint64_t a9)
{
  uint64_t v210 = *MEMORY[0x1E4F143B8];
  if (a7 == 1) {
    return 0;
  }
  uint64_t v9 = 0;
  if (!a5) {
    return v9;
  }
  if (*(unsigned char *)(a5 + 16) != 59) {
    return v9;
  }
  uint64_t v9 = 0;
  uint64_t v11 = *(void *)(a5 - 32);
  if (!v11 || *(unsigned char *)(v11 + 16) != 16) {
    return v9;
  }
  int v16 = (llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40) + 272);
  BOOL v17 = *(llvm::Type **)(a5 + 64);
  unint64_t v18 = (unint64_t)(sub_1CB83544C((uint64_t)v16, (uint64_t)v17) + 7) >> 3;
  BOOL v20 = v19 == 1;
  uint64_t v183 = (uint64_t)v16;
  char Alignment = llvm::DataLayout::getAlignment(v16, v17, 1);
  uint64_t v23 = (void *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u) {
    uint64_t v23 = (void *)*v23;
  }
  unint64_t v24 = *v23 * (((1 << Alignment) + v18 - 1) & -(1 << Alignment));
  if (v20) {
    goto LABEL_238;
  }
  while (1)
  {
    if (a6 < v24) {
      return 0;
    }
    uint64_t v25 = *(void *)(a9 + 24);
    if (v25) {
      break;
    }
    sub_1CB920400();
LABEL_238:
  }
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 48))(v25);
  if (!v26) {
    return 0;
  }
  uint64_t v27 = (llvm::Instruction *)v26;
  uint64_t v28 = *(void *)(v26 - 32);
  if (v28)
  {
    if (!*(unsigned char *)(v28 + 16)
      && *(void *)(v28 + 24) == *(void *)(v26 + 72)
      && (*(unsigned char *)(v28 + 33) & 0x20) != 0
      && *(_DWORD *)(v28 + 36) == 168)
    {
      return 0;
    }
  }
  if (*(void *)(v26 + 40) != *(void *)(a3 + 40)) {
    return 0;
  }
  unint64_t v179 = v24;
  uint64_t v180 = v26 - 32;
  if (*(unsigned char *)(a3 + 16) == 61)
  {
    llvm::MemoryLocation::getOrNone((uint64_t ***)a3, (uint64_t)&v199);
    long long v193 = v199;
    long long v194 = v200;
    long long v195 = v201[0];
  }
  else
  {
    llvm::MemoryLocation::getForArgument(a3, 0, 0, (uint64_t)&v193);
  }
  uint64_t v187 = *(void *)(a1 + 8);
  long long v190 = v193;
  long long v191 = v194;
  long long v192 = v195;
  uint64_t v29 = *(void *)(a1 + 32);
  uint64_t v30 = *(void *)(v29 + 24);
  int v31 = *(_DWORD *)(v29 + 40) - 1;
  uint64_t v32 = v31 & ((v27 >> 4) ^ (v27 >> 9));
  uint64_t v33 = *(llvm::Instruction **)(v30 + 16 * v32);
  if (v27 == v33)
  {
LABEL_27:
    uint64_t v36 = *(void *)(v30 + 16 * v32 + 8);
  }
  else
  {
    int v34 = 1;
    while (v33 != (llvm::Instruction *)-4096)
    {
      int v35 = v32 + v34++;
      uint64_t v32 = v35 & v31;
      uint64_t v33 = *(llvm::Instruction **)(v30 + 16 * v32);
      if (v27 == v33) {
        goto LABEL_27;
      }
    }
    uint64_t v36 = 0;
  }
  uint64_t v37 = v31 & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v38 = *(void *)(v30 + 16 * v37);
  v182 = v27;
  int v181 = (llvm::Instruction *)a3;
  if (v38 == a3)
  {
LABEL_33:
    uint64_t v41 = *(void *)(v30 + 16 * v37 + 8);
  }
  else
  {
    int v39 = 1;
    while (v38 != -4096)
    {
      int v40 = v37 + v39++;
      uint64_t v37 = v40 & v31;
      uint64_t v38 = *(void *)(v30 + 16 * v37);
      if (v38 == a3) {
        goto LABEL_33;
      }
    }
    uint64_t v41 = 0;
  }
  uint64_t v42 = v41 + 32;
  uint64_t v43 = *(void *)(v36 + 40);
  if (v43 != v42)
  {
    uint64_t v44 = v42;
    long long v45 = xmmword_1CFAC3060;
    do
    {
      uint64_t v46 = v43 - 32;
      if (!v43) {
        uint64_t v46 = 0;
      }
      uint64_t v47 = *(llvm::Instruction **)(v46 + 72);
      long long v196 = v190;
      v197[0] = v191;
      v197[1] = v192;
      char v198 = 1;
      *(void *)&long long v199 = 1;
      uint64_t v48 = 8;
      do
      {
        uint64_t v49 = (char *)&v199 + v48;
        *(_OWORD *)uint64_t v49 = v45;
        *((_OWORD *)v49 + 1) = v45;
        v48 += 40;
      }
      while (v49 + 40 != (char *)&v202);
      unint64_t v202 = &v207;
      uint64_t v203 = 0;
      unsigned int v204 = v206;
      uint64_t v205 = 0x400000000;
      std::string v207 = &unk_1F2600DB8;
      uint64_t v50 = 504;
      uint64_t v208 = 1;
      do
      {
        *(void *)((char *)&v199 + v50) = -4096;
        v50 += 16;
      }
      while (v50 != 632);
      char ModRefInfo = llvm::AAResults::getModRefInfo(v187, v47, &v196, (uint64_t)&v199);
      if ((v208 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v209, 8);
      }
      long long v45 = xmmword_1CFAC3060;
      if (v204 != v206)
      {
        free(v204);
        long long v45 = xmmword_1CFAC3060;
      }
      if ((v199 & 1) == 0)
      {
        MEMORY[0x1D25D9CD0](*((void *)&v199 + 1), 8);
        long long v45 = xmmword_1CFAC3060;
      }
      if ((ModRefInfo & 3) != 0) {
        return 0;
      }
      uint64_t v43 = *(void *)(v43 + 8);
    }
    while (v43 != v44);
  }
  unint64_t v52 = *(unsigned __int8 **)(a1 + 24);
  DWORD2(v196) = 64;
  *(void *)&long long v196 = a6;
  *(void *)&long long v199 = v201;
  *((void *)&v199 + 1) = v201;
  *(void *)&long long v200 = 32;
  DWORD2(v200) = 0;
  int v53 = sub_1CC06D628(a4, 0, (uint64_t)&v196, v183, (uint64_t *)v182, v52, 0, (uint64_t)&v199, 16);
  if (*((void *)&v199 + 1) != (void)v199) {
    free(*((void **)&v199 + 1));
  }
  if (DWORD2(v196) >= 0x41 && (void)v196) {
    MEMORY[0x1D25D9CB0](v196, 0x1000C8000313F17);
  }
  if (!v53) {
    return 0;
  }
  if (sub_1CCE3E680((llvm *)a4, (uint64_t)v182, a3)) {
    return 0;
  }
  unsigned int v54 = *(_WORD *)(a5 + 18) & 0x3F;
  if (a8 < v54 && *(unsigned char *)(a4 + 16) != 59) {
    return 0;
  }
  uint64_t v55 = *(void *)(a5 + 8);
  *(void *)&long long v196 = v197;
  *((void *)&v196 + 1) = 0x800000000;
  if (v55)
  {
    unint64_t v56 = -1;
    uint64_t v57 = v55;
    do
    {
      uint64_t v57 = *(void *)(v57 + 8);
      ++v56;
    }
    while (v57);
    unsigned int v58 = v56 + 1;
    if (v56 >= 8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int32x2_t v59 = v197;
    do
    {
      *v59++ = *(void *)(v55 + 24);
      uint64_t v55 = *(void *)(v55 + 8);
    }
    while (v55);
  }
  else
  {
    unsigned int v58 = 0;
  }
  unsigned int v60 = v58;
  DWORD2(v196) = v58;
  while (v60)
  {
    uint64_t v61 = v196;
    int v62 = *(llvm::Instruction **)(v196 + 8 * v60-- - 8);
    DWORD2(v196) = v60;
    int v63 = *((unsigned __int8 *)v62 + 16);
    if ((v63 - 77) < 2) {
      goto LABEL_73;
    }
    if (v63 == 84)
    {
      uint64_t v64 = *((void *)v62 - 4);
      if (v64
        && !*(unsigned char *)(v64 + 16)
        && *(void *)(v64 + 24) == *((void *)v62 + 9)
        && (*(unsigned char *)(v64 + 33) & 0x20) != 0
        && llvm::Instruction::isLifetimeStartOrEnd(v62))
      {
        continue;
      }
    }
    else if (v63 == 62)
    {
      if ((llvm::GetElementPtrInst::hasAllZeroIndices(v62) & 1) == 0) {
        goto LABEL_233;
      }
LABEL_73:
      sub_1CC13E4CC((uint64_t)&v196, v61 + 8 * v60, *((void *)v62 + 1), 0);
      unsigned int v60 = DWORD2(v196);
      continue;
    }
    if (v62 != a2 && v62 != v182) {
      goto LABEL_233;
    }
  }
  int v66 = *((_DWORD *)v182 + 5);
  uint64_t v67 = v66 & 0x7FFFFFF;
  int v68 = *((unsigned __int8 *)v182 + 16);
  if (v68 == 84)
  {
    uint64_t v69 = 0;
  }
  else if (v68 == 39)
  {
    uint64_t v69 = (*((_DWORD *)v182 + 20) + 1);
  }
  else
  {
    uint64_t v69 = 2;
  }
  uint64_t v70 = (llvm::Instruction *)((char *)v182 - 32 * v67);
  if (v66 < 0)
  {
    uint64_t v176 = *((void *)v70 - 1);
    if ((v176 & 0xFFFFFFFF0) != 0) {
      uint64_t v71 = (*((_DWORD *)v70 - 3) - *(_DWORD *)((char *)v70 - v176));
    }
    else {
      uint64_t v71 = 0;
    }
  }
  else
  {
    uint64_t v71 = 0;
  }
  uint64_t v72 = v182;
  if (v70 != (llvm::Instruction *)((char *)v182 + -32 * v71 + -32 * v69 - 32))
  {
    unint64_t v73 = (32 * v69 + 32 * v71) ^ 0xFFFFFFFFFFFFFFE0;
    uint64_t v74 = -32 * v67;
    while (llvm::Value::stripPointerCasts(*(llvm::Value **)((char *)v182 + v74)) != (llvm::Value *)a5
         || sub_1CBF5BC2C((uint64_t)v182, (v74 + 32 * (unint64_t)(*((_DWORD *)v182 + 5) & 0x7FFFFFF)) >> 5, 22))
    {
      v74 += 32;
      if (v73 == v74) {
        goto LABEL_94;
      }
    }
    UnderlyingObject = llvm::getUnderlyingObject((llvm *)a4, (const llvm::Value *)6);
    if (!llvm::isIdentifiedFunctionLocal(UnderlyingObject, v98))
    {
LABEL_233:
      uint64_t v9 = 0;
      goto LABEL_234;
    }
    uint64_t v9 = 0;
    if (llvm::PointerMayBeCapturedBefore(UnderlyingObject, (const llvm::Value *)1, 1, (uint64_t)v182, *(const llvm::Instruction **)(a1 + 24), (const llvm::DominatorTree *)1, 0, 0, v177))goto LABEL_234; {
    if (v179 <= 0x7FFFFFFFFFFFFFFBLL)
    }
      uint64_t v99 = v179;
    else {
      uint64_t v99 = -2;
    }
    uint64_t v100 = *((void *)v182 + 4);
    uint64_t v101 = *((void *)v182 + 5) + 40;
    if (v100 != v101)
    {
      int v102 = v206;
      long long v103 = xmmword_1CFAC3060;
      do
      {
        uint64_t v104 = v100 - 24;
        if (v100) {
          uint64_t v105 = v100 - 24;
        }
        else {
          uint64_t v105 = 0;
        }
        int v106 = *(unsigned __int8 *)(v105 + 16);
        if (v106 == 84)
        {
          uint64_t v107 = *(void *)(v105 - 32);
          if (v107)
          {
            if (!*(unsigned char *)(v107 + 16)
              && *(void *)(v107 + 24) == *(void *)(v105 + 72)
              && (*(unsigned char *)(v107 + 33) & 0x20) != 0
              && *(_DWORD *)(*(void *)(v100 - 56) + 36) == 167)
            {
              v178 = v102;
              uint64_t v108 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v104
                                                                    - 32 * (*(_DWORD *)(v100 - 4) & 0x7FFFFFF)
                                                                    + 32));
              long long v103 = xmmword_1CFAC3060;
              int v102 = v178;
              if (v108 == (llvm::Value *)a5)
              {
                uint64_t v109 = *(void *)(v104 - 32 * (*(_DWORD *)(v100 - 4) & 0x7FFFFFF));
                uint64_t v110 = (unint64_t *)(v109 + 24);
                uint64_t v111 = *(unsigned int *)(v109 + 32);
                if (v111 >= 0x41)
                {
                  int v112 = 0;
                  int64_t v113 = (unint64_t)(v111 + 63) >> 6;
                  do
                  {
                    if (v113-- < 1) {
                      break;
                    }
                    unint64_t v115 = *(void *)(*v110 + 8 * v113);
                    v112 += __clz(v115);
                  }
                  while (!v115);
                  int v116 = v111 | 0xFFFFFFC0;
                  if ((v111 & 0x3F) == 0) {
                    int v116 = 0;
                  }
                  uint64_t v72 = v182;
                  if ((v111 - v112 - v116) > 0x40) {
                    break;
                  }
                  uint64_t v110 = (unint64_t *)*v110;
                }
                uint64_t v72 = v182;
                int v102 = v178;
                long long v103 = xmmword_1CFAC3060;
                if (*v110 >= v179) {
                  break;
                }
              }
            }
          }
          int v106 = *(unsigned __int8 *)(v105 + 16);
        }
        if (v106 == 29) {
          break;
        }
        if ((llvm::Instruction *)v105 != a2)
        {
          uint64_t v117 = *(void *)(a1 + 8);
          *(void *)&v188[0] = a5;
          *((void *)&v188[0] + 1) = v99;
          memset(&v188[1], 0, 32);
          char v189 = 1;
          uint64_t v118 = 8;
          *(void *)&long long v199 = 1;
          do
          {
            unint64_t v119 = (char *)&v199 + v118;
            *(_OWORD *)unint64_t v119 = v103;
            *((_OWORD *)v119 + 1) = v103;
            v118 += 40;
          }
          while (v119 + 40 != (char *)&v202);
          unint64_t v202 = &v207;
          uint64_t v203 = 0;
          uint64_t v120 = v102;
          unsigned int v204 = v102;
          uint64_t v205 = 0x400000000;
          std::string v207 = &unk_1F2600DB8;
          uint64_t v121 = 504;
          uint64_t v208 = 1;
          do
          {
            *(void *)((char *)&v199 + v121) = -4096;
            v121 += 16;
          }
          while (v121 != 632);
          char v122 = llvm::AAResults::getModRefInfo(v117, (llvm::Instruction *)v105, v188, (uint64_t)&v199);
          if ((v208 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v209, 8);
          }
          int v102 = v120;
          long long v103 = xmmword_1CFAC3060;
          if (v204 != v120)
          {
            free(v204);
            long long v103 = xmmword_1CFAC3060;
            int v102 = v120;
          }
          if ((v199 & 1) == 0)
          {
            MEMORY[0x1D25D9CD0](*((void *)&v199 + 1), 8);
            long long v103 = xmmword_1CFAC3060;
            int v102 = v120;
          }
          if ((v122 & 3) != 0 || *(unsigned __int8 *)(v105 + 16) - 40 > 0xFFFFFFF4) {
            goto LABEL_233;
          }
        }
        uint64_t v100 = *(void *)(v100 + 8);
      }
      while (v100 != v101);
    }
  }
LABEL_94:
  int v75 = (llvm::CastInst *)a4;
  uint64_t v76 = a1;
  if ((llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 24), (const llvm::Value *)a4, v72) & 1) == 0)
  {
    uint64_t v9 = 0;
    if (!a4 || *(unsigned char *)(a4 + 16) != 62) {
      goto LABEL_234;
    }
    uint64_t v94 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
    uint64_t v95 = (const llvm::Value **)(a4 - 32 * v94);
    if (v94 != 1)
    {
      unsigned int v96 = 1;
      while (*((unsigned char *)v95[4 * v96] + 16) == 16)
      {
        if (v94 == ++v96) {
          goto LABEL_131;
        }
      }
      goto LABEL_233;
    }
LABEL_131:
    if (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 24), *v95, v72)) {
      goto LABEL_233;
    }
    llvm::Instruction::moveBefore((llvm::Instruction *)a4, v72);
    uint64_t v76 = a1;
  }
  uint64_t v77 = *(llvm::AAResults **)(v76 + 8);
  if (v179 <= 0x7FFFFFFFFFFFFFFBLL) {
    uint64_t v78 = v179;
  }
  else {
    uint64_t v78 = -2;
  }
  *(void *)&long long v199 = a4;
  *((void *)&v199 + 1) = v78;
  long long v200 = 0u;
  v201[0] = 0u;
  char v79 = llvm::AAResults::getModRefInfo(v77, v72, (const llvm::MemoryLocation *)&v199);
  if ((v79 & 3) != 0)
  {
    uint64_t v174 = *(void *)(v76 + 8);
    uint64_t v175 = *(void *)(v76 + 24);
    *(void *)&long long v199 = a4;
    *((void *)&v199 + 1) = v78;
    long long v200 = 0u;
    v201[0] = 0u;
    char v79 = sub_1CD779518(v174, (uint64_t)v72, (llvm **)&v199, v175);
  }
  if ((v79 & 3) != 0) {
    goto LABEL_233;
  }
  unsigned int v80 = *(_DWORD *)(*(void *)a5 + 8);
  if ((v80 & 0xFE) == 0x12) {
    unsigned int v80 = *(_DWORD *)(**(void **)(*(void *)a5 + 16) + 8);
  }
  int v81 = *(_DWORD *)(*(void *)a4 + 8);
  uint64_t v82 = v180;
  if ((v81 & 0xFE) == 0x12) {
    int v81 = *(_DWORD *)(**(void **)(*(void *)a4 + 16) + 8);
  }
  if ((v81 ^ v80) > 0xFF) {
    goto LABEL_233;
  }
  unint64_t v83 = 0;
  int v84 = (char *)v72 - 8;
  while (1)
  {
    int v85 = *((unsigned __int8 *)v182 + 16);
    if (v85 == 84)
    {
      uint64_t v86 = 0;
    }
    else
    {
      uint64_t v86 = v85 == 39 ? (*((_DWORD *)v182 + 20) + 1) : 2;
      int v75 = (llvm::CastInst *)a4;
      uint64_t v82 = v180;
    }
    int v87 = *((_DWORD *)v182 + 5);
    if (v87 < 0 && (uint64_t v93 = v87 & 0x7FFFFFF, (*(void *)&v84[-32 * v93] & 0xFFFFFFFF0) != 0))
    {
      uint64_t v89 = -v93;
      int v88 = *((_DWORD *)v182 - 8 * v93 - 3) - *(_DWORD *)((char *)v182 - *((void *)v182 - 4 * v93 - 1) + -32 * v93);
    }
    else
    {
      int v88 = 0;
      uint64_t v89 = -(uint64_t)(v87 & 0x7FFFFFF);
    }
    if (v83 >= ((v82
                              - 32 * v86
                              + 32 * (unint64_t)-v88
                              - ((unint64_t)v182
                               + 32 * v89)) >> 5))
      break;
    if (llvm::Value::stripPointerCasts(*((llvm::Value **)v72 + 4 * v89)) == (llvm::Value *)a5)
    {
      unsigned int v90 = *(_DWORD *)(*(void *)a5 + 8);
      if ((v90 & 0xFE) == 0x12) {
        unsigned int v90 = *(_DWORD *)(**(void **)(*(void *)a5 + 16) + 8);
      }
      uint64_t v91 = **((void **)v72 - 4 * (*((_DWORD *)v182 + 5) & 0x7FFFFFF));
      int v92 = *(_DWORD *)(v91 + 8);
      if ((v92 & 0xFE) == 0x12) {
        int v92 = *(_DWORD *)(**(void **)(v91 + 16) + 8);
      }
      if ((v92 ^ v90) > 0xFF) {
        goto LABEL_233;
      }
    }
    ++v83;
    uint64_t v72 = (const llvm::Instruction *)((char *)v72 + 32);
    uint64_t v82 = v180;
  }
  unint64_t v123 = 0;
  char v124 = 0;
  unsigned int v125 = (v75 >> 4) ^ (v75 >> 9);
  while (1)
  {
    if (v85 == 84)
    {
      uint64_t v126 = 0;
    }
    else
    {
      uint64_t v126 = v85 == 39 ? (*((_DWORD *)v182 + 20) + 1) : 2;
      int v75 = (llvm::CastInst *)a4;
      uint64_t v82 = v180;
    }
    int v127 = *((_DWORD *)v182 + 5);
    if (v127 < 0 && (uint64_t v173 = v127 & 0x7FFFFFF, (*(void *)&v84[-32 * v173] & 0xFFFFFFFF0) != 0))
    {
      uint64_t v129 = -v173;
      int v128 = *((_DWORD *)v182 - 8 * v173 - 3)
           - *(_DWORD *)((char *)v182 - *((void *)v182 - 4 * v173 - 1) + -32 * v173);
    }
    else
    {
      int v128 = 0;
      uint64_t v129 = -(uint64_t)(v127 & 0x7FFFFFF);
    }
    uint64_t v130 = v82 - 32 * v126 + 32 * -v128;
    long long v131 = (char *)v182 + 32 * v129;
    if (v123 >= ((unint64_t)(v130 - (void)v131) >> 5)) {
      break;
    }
    if (llvm::Value::stripPointerCasts(*(llvm::Value **)&v131[32 * v123]) != (llvm::Value *)a5) {
      goto LABEL_218;
    }
    uint64_t v133 = *(llvm::Value **)a5;
    PointerCast = v75;
    if (*(void *)a5 != *(void *)v75)
    {
      if ((*((unsigned char *)v75 + 23) & 0x10) != 0)
      {
        uint64_t v135 = ***(void ***)v75;
        uint64_t v136 = *(void *)(v135 + 152);
        uint64_t v137 = *(unsigned int *)(v135 + 168);
        if (!v137) {
          goto LABEL_191;
        }
        LODWORD(v138) = (v137 - 1) & v125;
        uint64_t v139 = (llvm::CastInst **)(v136 + 16 * v138);
        uint64_t v140 = *v139;
        if (*v139 != v75)
        {
          int v141 = 1;
          while (v140 != (llvm::CastInst *)-4096)
          {
            int v142 = v138 + v141++;
            uint64_t v138 = v142 & (v137 - 1);
            uint64_t v140 = *(llvm::CastInst **)(v136 + 16 * v138);
            if (v140 == v75)
            {
              uint64_t v139 = (llvm::CastInst **)(v136 + 16 * v138);
              goto LABEL_192;
            }
          }
LABEL_191:
          uint64_t v139 = (llvm::CastInst **)(v136 + 16 * v137);
        }
LABEL_192:
        __int16 v143 = v139[1];
        uint64_t v146 = *(void *)v143;
        uint64_t v145 = (char *)v143 + 16;
        uint64_t v144 = v146;
      }
      else
      {
        uint64_t v144 = 0;
        uint64_t v145 = &byte_1CFBCE98E;
      }
      LOWORD(v201[0]) = 261;
      *(void *)&long long v199 = v145;
      *((void *)&v199 + 1) = v144;
      PointerCast = llvm::CastInst::CreatePointerCast(v75, v133, (const char **)&v199, v182, v132);
    }
    uint64_t v147 = (uint64_t)v182 + 32 * v123 + -32 * (*((_DWORD *)v182 + 5) & 0x7FFFFFF);
    uint64_t v148 = **(llvm::Value ***)v147;
    if (v148 == *(llvm::Value **)PointerCast)
    {
      uint64_t v157 = (void *)(v147 + 8);
      uint64_t v158 = (uint64_t **)(v147 + 16);
      **(void **)(v147 + 16) = *(void *)(v147 + 8);
      uint64_t v159 = *(void *)(v147 + 8);
      if (v159) {
        *(void *)(v159 + 16) = *v158;
      }
      *(void *)uint64_t v147 = PointerCast;
      uint64_t v162 = *((void *)PointerCast + 1);
      v160 = (uint64_t *)((char *)PointerCast + 8);
      uint64_t v161 = v162;
      *uint64_t v157 = v162;
      if (v162) {
        *(void *)(v161 + 16) = v157;
      }
      *uint64_t v158 = v160;
      goto LABEL_216;
    }
    if ((*((unsigned char *)PointerCast + 23) & 0x10) != 0)
    {
      uint64_t v149 = ***(void ***)PointerCast;
      uint64_t v150 = *(void *)(v149 + 152);
      uint64_t v151 = *(unsigned int *)(v149 + 168);
      if (!v151) {
        goto LABEL_207;
      }
      LODWORD(v152) = (v151 - 1) & ((PointerCast >> 4) ^ (PointerCast >> 9));
      int v153 = (llvm::Value **)(v150 + 16 * v152);
      uint64_t v154 = *v153;
      if (*v153 != PointerCast)
      {
        int v155 = 1;
        while (v154 != (llvm::Value *)-4096)
        {
          int v156 = v152 + v155++;
          uint64_t v152 = v156 & (v151 - 1);
          uint64_t v154 = *(llvm::Value **)(v150 + 16 * v152);
          if (v154 == PointerCast)
          {
            int v153 = (llvm::Value **)(v150 + 16 * v152);
            goto LABEL_208;
          }
        }
LABEL_207:
        int v153 = (llvm::Value **)(v150 + 16 * v151);
      }
LABEL_208:
      uint64_t v163 = v153[1];
      uint64_t v166 = *(void *)v163;
      std::string::size_type v165 = (char *)v163 + 16;
      uint64_t v164 = v166;
      goto LABEL_209;
    }
    uint64_t v164 = 0;
    std::string::size_type v165 = &byte_1CFBCE98E;
LABEL_209:
    LOWORD(v201[0]) = 261;
    *(void *)&long long v199 = v165;
    *((void *)&v199 + 1) = v164;
    std::string::size_type v167 = llvm::CastInst::CreatePointerCast(PointerCast, v148, (const char **)&v199, v182, v132);
    v168 = (char *)v182 - 32 * (*((_DWORD *)v182 + 5) & 0x7FFFFFF);
    uint64_t v147 = (uint64_t)&v168[32 * v123];
    if (*(void *)v147)
    {
      **(void **)(v147 + 16) = *(void *)(v147 + 8);
      uint64_t v169 = *(void *)(v147 + 8);
      if (v169) {
        *(void *)(v169 + 16) = *(void *)(v147 + 16);
      }
    }
    *(void *)uint64_t v147 = v167;
    if (!v167) {
      goto LABEL_217;
    }
    uint64_t v171 = *((void *)v167 + 1);
    v160 = (uint64_t *)((char *)v167 + 8);
    uint64_t v170 = v171;
    v172 = &v168[32 * v123];
    *((void *)v172 + 1) = v171;
    if (v171) {
      *(void *)(v170 + 16) = v172 + 8;
    }
    *((void *)v172 + 2) = v160;
LABEL_216:
    uint64_t *v160 = v147;
LABEL_217:
    char v124 = 1;
LABEL_218:
    ++v123;
    LOBYTE(v85) = *((unsigned char *)v182 + 16);
    uint64_t v82 = v180;
  }
  if ((v124 & 1) == 0) {
    goto LABEL_233;
  }
  if (a8 < v54) {
    *(_WORD *)(a4 + 18) = *(_WORD *)(a4 + 18) & 0xFFC0 | v54;
  }
  LODWORD(v200) = 25;
  long long v199 = xmmword_1CFB2D110;
  llvm::combineMetadata(v182, a2, (unsigned int *)&v199, 5, 1);
  if (v181 != a2) {
    llvm::combineMetadata(v182, v181, (unsigned int *)&v199, 5, 1);
  }
  uint64_t v9 = 1;
LABEL_234:
  if ((_OWORD *)v196 != v197) {
    free((void *)v196);
  }
  return v9;
}

uint64_t llvm::MemCpyOptPass::processMemSet(llvm::MemCpyOptPass *a1, llvm::Instruction *a2, void *a3)
{
  __int32 v3 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  if (*(unsigned char *)(*((void *)v3 + 8) + 16) != 16) {
    return 0;
  }
  uint64_t v7 = *((void *)v3 + 12);
  uint64_t v8 = *(unsigned int *)(v7 + 32);
  if (v8 <= 0x40)
  {
    if (*(void *)(v7 + 24)) {
      return 0;
    }
    goto LABEL_12;
  }
  int v10 = 0;
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  do
  {
    if (v11-- < 1) {
      break;
    }
    unint64_t v13 = *(void *)(*(void *)(v7 + 24) + 8 * v11);
    v10 += __clz(v13);
  }
  while (!v13);
  uint64_t result = 0;
  int v14 = v8 | 0xFFFFFFC0;
  if ((v8 & 0x3F) == 0) {
    int v14 = 0;
  }
  if (v10 + v14 == v8)
  {
LABEL_12:
    unsigned __int8 v15 = llvm::Value::stripPointerCasts(*(llvm::Value **)v3);
    uint64_t result = llvm::MemCpyOptPass::tryMergingIntoMemset(a1, a2, v15, ((llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4]);
    if (result)
    {
      *a3 = result + 24;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1CCE3E680(llvm *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 112);
  if (v5 && (*(unsigned char *)(v5 + 16) & 0x20) != 0) {
    return 0;
  }
  char v14 = 0;
  UnderlyingObject = llvm::getUnderlyingObject(a1, (const llvm::Value *)6);
  if (!llvm::isNotVisibleOnUnwind(UnderlyingObject, (const llvm::Value *)&v14, v7) || (uint64_t result = 0, v14))
  {
    if (a2 != a3)
    {
      uint64_t v9 = a3 + 24;
      uint64_t v10 = a2 + 24;
      while (1)
      {
        if (v10) {
          uint64_t v11 = v10 - 24;
        }
        else {
          uint64_t v11 = 0;
        }
        int v12 = *(unsigned __int8 *)(v11 + 16);
        if (v10 && v12 == 84)
        {
          uint64_t v13 = *(void *)(v11 + 64);
          if ((!v13 || (*(unsigned char *)(v13 + 16) & 0x20) == 0)
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v11, 37))
          {
            return 1;
          }
        }
        else if (v10 && v12 == 36 || v10 && v12 == 38)
        {
          if ((*(_WORD *)(v11 + 18) & 1) == 0) {
            return 1;
          }
        }
        else if (v12 == 34)
        {
          return 1;
        }
        uint64_t v10 = *(void *)(v10 + 8);
        if (v10 == v9) {
          return 0;
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_1CCE3E778(llvm::MemorySSA *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a5 + 16) == 25)
  {
    if (*(void *)(a4 + 64) == *(void *)(a5 + 64))
    {
      uint64_t v14 = *(void *)(a4 + 40);
      uint64_t v15 = a5 + 32;
      long long v24 = *a3;
      long long v25 = a3[1];
      long long v26 = a3[2];
      if (v14 != a5 + 32)
      {
        long long v17 = xmmword_1CFAC3060;
        do
        {
          uint64_t v18 = v14 - 32;
          if (!v14) {
            uint64_t v18 = 0;
          }
          if (*(unsigned char *)(v18 + 16) != 25)
          {
            int v19 = *(llvm::Instruction **)(v18 + 72);
            v27[0] = v24;
            v27[1] = v25;
            v27[2] = v26;
            char v28 = 1;
            v29[0] = 1;
            uint64_t v20 = 1;
            do
            {
              uint64_t v21 = &v29[v20];
              *(_OWORD *)uint64_t v21 = v17;
              *((_OWORD *)v21 + 1) = v17;
              v20 += 5;
            }
            while (v21 + 5 != v30);
            v30[0] = &v34;
            v30[1] = 0;
            int v31 = v33;
            uint64_t v32 = 0x400000000;
            int v34 = &unk_1F2600DB8;
            uint64_t v22 = 63;
            uint64_t v35 = 1;
            do
            {
              v29[v22] = -4096;
              v22 += 2;
            }
            while (v22 != 79);
            char ModRefInfo = llvm::AAResults::getModRefInfo(a2, v19, v27, (uint64_t)v29);
            if ((v35 & 1) == 0) {
              MEMORY[0x1D25D9CD0](v36, 8);
            }
            long long v17 = xmmword_1CFAC3060;
            if (v31 != v33)
            {
              free(v31);
              long long v17 = xmmword_1CFAC3060;
            }
            if (v29[0])
            {
              if ((ModRefInfo & 2) != 0) {
                return 1;
              }
            }
            else
            {
              MEMORY[0x1D25D9CD0](v29[1], 8);
              long long v17 = xmmword_1CFAC3060;
              if ((ModRefInfo & 2) != 0) {
                return 1;
              }
            }
          }
          uint64_t v14 = *(void *)(v14 + 8);
        }
        while (v14 != v15);
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t WalkerImpl = llvm::MemorySSA::getWalkerImpl(a1);
    if (*(unsigned char *)(a5 + 16) == 25) {
      uint64_t v11 = a5;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11) {
      int v12 = (void *)(v11 - 32);
    }
    else {
      int v12 = (void *)(a5 - 64);
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, long long *))(*(void *)WalkerImpl + 24))(WalkerImpl, *v12, a3);
    return !llvm::MemorySSA::dominates(a1, v13, a4);
  }
}

uint64_t llvm::MemCpyOptPass::processMemSetMemCpyDependence(uint64_t a1, const llvm::CallBase *a2, uint64_t a3)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
  uint64_t v8 = llvm::Value::stripPointerCasts(*((llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
  int v116 = v7;
  uint64_t v117 = 1;
  memset(v118, 0, sizeof(v118));
  *(void *)&long long v112 = v8;
  *((void *)&v112 + 1) = 1;
  long long v113 = 0u;
  long long v114 = 0u;
  if (llvm::AAResults::alias(v6, (uint64_t)&v116, (uint64_t)&v112) != 3) {
    return 0;
  }
  uint64_t v9 = *(llvm::AAResults **)(a1 + 8);
  llvm::MemoryLocation::getForArgument((uint64_t)a2, 1u, 0, (uint64_t)&v116);
  if ((llvm::AAResults::getModRefInfo(v9, a2, (const llvm::MemoryLocation *)&v116) & 2) != 0) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  llvm::MemoryLocation::getForArgument(a3, 0, 0, (uint64_t)v111);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(v11 + 24);
  int v13 = *(_DWORD *)(v11 + 40) - 1;
  uint64_t v14 = v13 & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v15 = *(void *)(v12 + 16 * v14);
  if (v15 == a3)
  {
LABEL_7:
    uint64_t v18 = *(void *)(v12 + 16 * v14 + 8);
  }
  else
  {
    int v16 = 1;
    while (v15 != -4096)
    {
      int v17 = v14 + v16++;
      uint64_t v14 = v17 & v13;
      uint64_t v15 = *(void *)(v12 + 16 * v14);
      if (v15 == a3) {
        goto LABEL_7;
      }
    }
    uint64_t v18 = 0;
  }
  uint64_t v19 = v13 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v20 = *(const llvm::CallBase **)(v12 + 16 * v19);
  uint64_t v106 = (uint64_t)a2;
  uint64_t v107 = a3;
  unsigned int v105 = (a2 >> 4) ^ (a2 >> 9);
  if (v20 == a2)
  {
LABEL_13:
    uint64_t v23 = *(void *)(v12 + 16 * v19 + 8);
  }
  else
  {
    int v21 = 1;
    while (v20 != (const llvm::CallBase *)-4096)
    {
      int v22 = v19 + v21++;
      uint64_t v19 = v22 & v13;
      uint64_t v20 = *(const llvm::CallBase **)(v12 + 16 * v19);
      if (v20 == a2) {
        goto LABEL_13;
      }
    }
    uint64_t v23 = 0;
  }
  uint64_t v24 = v23 + 32;
  uint64_t v25 = *(void *)(v18 + 40);
  if (v25 != v23 + 32)
  {
    long long v26 = xmmword_1CFAC3060;
    do
    {
      uint64_t v27 = v25 - 32;
      if (!v25) {
        uint64_t v27 = 0;
      }
      char v28 = *(llvm::Instruction **)(v27 + 72);
      long long v112 = v111[0];
      long long v113 = v111[1];
      long long v114 = v111[2];
      char v115 = 1;
      int v116 = (void *)1;
      uint64_t v29 = 8;
      do
      {
        uint64_t v30 = (char *)&v116 + v29;
        *(_OWORD *)uint64_t v30 = v26;
        *((_OWORD *)v30 + 1) = v26;
        v29 += 40;
      }
      while (v30 + 40 != (char *)v132);
      v132[0] = &v136;
      v132[1] = 0;
      uint64_t v133 = v135;
      uint64_t v134 = 0x400000000;
      uint64_t v136 = &unk_1F2600DB8;
      uint64_t v31 = 504;
      uint64_t v137 = 1;
      do
      {
        *(void **)((char *)&v116 + v31) = (void *)-4096;
        v31 += 16;
      }
      while (v31 != 632);
      char ModRefInfo = llvm::AAResults::getModRefInfo(v10, v28, &v112, (uint64_t)&v116);
      if ((v137 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v138, 8);
      }
      long long v26 = xmmword_1CFAC3060;
      if (v133 != v135)
      {
        free(v133);
        long long v26 = xmmword_1CFAC3060;
      }
      if ((v116 & 1) == 0)
      {
        MEMORY[0x1D25D9CD0](v117, 8);
        long long v26 = xmmword_1CFAC3060;
      }
      if ((ModRefInfo & 3) != 0) {
        return 0;
      }
      uint64_t v25 = *(void *)(v25 + 8);
    }
    while (v25 != v24);
  }
  int v34 = (llvm::CastInst **)(v106 - 32 * (*(_DWORD *)(v106 + 20) & 0x7FFFFFF));
  uint64_t v35 = *v34;
  uint64_t v36 = *(unsigned __int8 **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64);
  uint64_t v37 = v34[8];
  int v38 = sub_1CCE3E680(*v34, a3, v106);
  if ((v38 & 1) == 0)
  {
    if (v36 == (unsigned __int8 *)v37)
    {
      int v39 = *(int32x2_t ***)(a1 + 40);
      __int32 v40 = (*v39)[5].i32[0];
      if (v40)
      {
        int32x2_t v41 = (*v39)[3];
        __int32 v42 = v40 - 1;
        uint64_t v43 = (v40 - 1) & ((a3 >> 4) ^ (a3 >> 9));
        uint64_t v44 = *(void *)(*(void *)&v41 + 16 * v43);
        if (v44 == a3)
        {
LABEL_40:
          uint64_t v47 = *(llvm::MemoryAccess **)(*(void *)&v41 + 16 * v43 + 8);
          if (v47) {
            llvm::MemorySSAUpdater::removeMemoryAccess(v39, v47, 0);
          }
        }
        else
        {
          int v45 = 1;
          while (v44 != -4096)
          {
            int v46 = v43 + v45++;
            uint64_t v43 = v46 & v42;
            uint64_t v44 = *(void *)(*(void *)&v41 + 16 * v43);
            if (v44 == a3) {
              goto LABEL_40;
            }
          }
        }
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    uint64_t v48 = *(void *)(a3 + 64);
    if (v48
      && *(_DWORD *)(v48 + 8) >= 3u
      && (uint64_t v49 = *(llvm::AttributeSetNode **)(v48 + 56)) != 0
      && (unsigned __int16 Alignment = llvm::AttributeSetNode::getAlignment(v49), Alignment > 0xFFu))
    {
      uint64_t v51 = 1 << Alignment;
    }
    else
    {
      LODWORD(v51) = 0;
    }
    uint64_t v52 = *(void *)(v106 + 64);
    if (v52
      && *(_DWORD *)(v52 + 8) >= 3u
      && (int v53 = *(llvm::AttributeSetNode **)(v52 + 56)) != 0
      && (unsigned __int16 v54 = llvm::AttributeSetNode::getAlignment(v53), v54 > 0xFFu))
    {
      uint64_t v55 = 1 << v54;
    }
    else
    {
      LODWORD(v55) = 0;
    }
    if (v51 > v55) {
      LODWORD(v55) = v51;
    }
    if (v55 < 2 || (*((unsigned char *)v37 + 16) == 16 ? (BOOL v56 = v37 == 0) : (BOOL v56 = 1), v56))
    {
      unint64_t v57 = 1;
    }
    else
    {
      unsigned int v58 = (void *)((char *)v37 + 24);
      if (*((_DWORD *)v37 + 8) >= 0x41u) {
        unsigned int v58 = (void *)*v58;
      }
      unint64_t v57 = -(*(_DWORD *)v58 | v55) & (*(_DWORD *)v58 | v55);
    }
    uint64_t v59 = 0;
    unsigned int v60 = **(void ***)v106;
    int v116 = v118;
    uint64_t v117 = 0x200000000;
    uint64_t v121 = v60;
    char v122 = &v130;
    unint64_t v123 = &v131;
    uint64_t v124 = 0;
    int v125 = 0;
    __int16 v126 = 512;
    char v127 = 7;
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v130 = &unk_1F2616E88;
    long long v131 = &unk_1F2617008;
    uint64_t v61 = *(unsigned __int8 **)(v106 + 48);
    uint64_t v119 = *(void *)(v106 + 40);
    uint64_t v120 = v106 + 24;
    v109[0] = v61;
    if (v61)
    {
      llvm::MetadataTracking::track((uint64_t)v109, v61, 2);
      uint64_t v59 = v109[0];
    }
    sub_1CB8461A4((uint64_t)&v116, 0, v59);
    if (!v109[0])
    {
LABEL_69:
      uint64_t v62 = *(void *)v36;
      uint64_t v63 = *(void *)v37;
      if (*(void *)v36 == *(void *)v37) {
        goto LABEL_79;
      }
      if (*(_DWORD *)(v62 + 8) >> 8 <= *(_DWORD *)(v63 + 8) >> 8)
      {
        __int16 v110 = 257;
        if (v36[16] > 0x14u)
        {
          unint64_t v64 = v57;
          LOWORD(v114) = 257;
          uint64_t v36 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v36, v63, (const char **)&v112, 0);
          (*((void (**)(void **, unsigned __int8 *, void *, uint64_t, uint64_t))*v123 + 2))(v123, v36, v109, v119, v120);
          if (v117)
          {
            long long v103 = (llvm::MDNode **)v116;
            uint64_t v104 = (llvm::MDNode **)((char *)v116 + 16 * v117);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v36, *(_DWORD *)v103, v103[1]);
              v103 += 2;
            }
            while (v103 != v104);
          }
          goto LABEL_78;
        }
        uint64_t v96 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v122 + 28))(v122, 39, v36, v63);
        uint64_t v36 = (unsigned __int8 *)v96;
        if (v96 && *(unsigned __int8 *)(v96 + 16) >= 0x1Cu)
        {
          unint64_t v64 = v57;
          (*((void (**)(void **, uint64_t, void *, uint64_t, uint64_t))*v123 + 2))(v123, v96, v109, v119, v120);
          if (v117)
          {
            int v97 = (llvm::MDNode **)v116;
            int v98 = (llvm::MDNode **)((char *)v116 + 16 * v117);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v36, *(_DWORD *)v97, v97[1]);
              v97 += 2;
            }
            while (v97 != v98);
          }
          goto LABEL_78;
        }
      }
      else
      {
        __int16 v110 = 257;
        if (*((unsigned __int8 *)v37 + 16) > 0x14u)
        {
          unint64_t v64 = v57;
          LOWORD(v114) = 257;
          uint64_t v37 = llvm::CastInst::Create(39, (uint64_t)v37, v62, (const char **)&v112, 0);
          (*((void (**)(void **, llvm::Value *, void *, uint64_t, uint64_t))*v123 + 2))(v123, v37, v109, v119, v120);
          if (v117)
          {
            uint64_t v65 = (llvm::MDNode **)v116;
            int v66 = (llvm::MDNode **)((char *)v116 + 16 * v117);
            do
            {
              llvm::Instruction::setMetadata(v37, *(_DWORD *)v65, v65[1]);
              v65 += 2;
            }
            while (v65 != v66);
          }
LABEL_78:
          unint64_t v57 = v64;
          goto LABEL_79;
        }
        uint64_t v93 = (*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v122 + 28))(v122, 39, v37, v62);
        uint64_t v37 = (llvm::Value *)v93;
        if (v93 && *(unsigned __int8 *)(v93 + 16) >= 0x1Cu)
        {
          unint64_t v64 = v57;
          (*((void (**)(void **, uint64_t, void *, uint64_t, uint64_t))*v123 + 2))(v123, v93, v109, v119, v120);
          if (v117)
          {
            uint64_t v94 = (llvm::MDNode **)v116;
            uint64_t v95 = (llvm::MDNode **)((char *)v116 + 16 * v117);
            do
            {
              llvm::Instruction::setMetadata(v37, *(_DWORD *)v94, v94[1]);
              v94 += 2;
            }
            while (v94 != v95);
          }
          goto LABEL_78;
        }
      }
LABEL_79:
      LOWORD(v114) = 257;
      uint64_t v108 = sub_1CB845F20((uint64_t)&v116, 37, v36, (uint64_t)v37, (uint64_t)&v112);
      LOWORD(v114) = 257;
      uint64_t v67 = sub_1CB84494C((uint64_t)&v116, (uint64_t)v36, (uint64_t)v37, (uint64_t)&v112, 0, 0);
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v36, v68, v69);
      LOWORD(v114) = 257;
      Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v116, v108, NullValue, v67, (const llvm::Twine *)&v112, 0);
      unsigned int v72 = *(_DWORD *)(*(void *)v35 + 8);
      if ((v72 & 0xFE) == 0x12) {
        unsigned int v72 = *(_DWORD *)(**(void **)(*(void *)v35 + 16) + 8);
      }
      unint64_t v73 = (llvm::PointerType *)(*v121 + 1912);
      uint64_t v74 = (llvm::Value *)llvm::PointerType::get(v73, (llvm::Type *)(v72 >> 8));
      LOWORD(v114) = 257;
      uint64_t v76 = (uint64_t *)sub_1CC277FE0((uint64_t)&v116, v35, v74, (uint64_t)&v112, v75);
      __int16 v110 = 257;
      uint64_t v77 = sub_1CB930F7C((uint64_t *)&v116, (uint64_t)v73, v76, (const char *)v37, (uint64_t)v109);
      unint64_t v78 = __clz(v57) ^ 0x13F;
      if (v57) {
        __int16 v79 = v78;
      }
      else {
        __int16 v79 = 0;
      }
      MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)&v116, v77, *(void *)(v107 - 32 * (*(_DWORD *)(v107 + 20) & 0x7FFFFFF) + 32), Select, v79, 0, 0, 0, 0);
      int v81 = *(uint64_t ***)(a1 + 40);
      int v82 = *((_DWORD *)*v81 + 10);
      if (v82)
      {
        uint64_t v83 = (*v81)[3];
        unsigned int v84 = v82 - 1;
        uint64_t v85 = (v82 - 1) & v105;
        uint64_t v86 = *(void *)(v83 + 16 * v85);
        if (v86 == v106)
        {
LABEL_89:
          uint64_t v89 = *(void *)(v83 + 16 * v85 + 8);
          goto LABEL_91;
        }
        int v87 = 1;
        while (v86 != -4096)
        {
          int v88 = v85 + v87++;
          uint64_t v85 = v88 & v84;
          uint64_t v86 = *(void *)(v83 + 16 * v85);
          if (v86 == v106) {
            goto LABEL_89;
          }
        }
      }
      uint64_t v89 = 0;
LABEL_91:
      if (*(unsigned char *)(v89 + 16) == 25) {
        uint64_t v90 = v89;
      }
      else {
        uint64_t v90 = 0;
      }
      if (v90) {
        uint64_t v91 = (uint64_t *)(v90 - 32);
      }
      else {
        uint64_t v91 = (uint64_t *)(v89 - 64);
      }
      MemoryAccessBefore = llvm::MemorySSAUpdater::createMemoryAccessBefore(v81, (uint64_t)MemSet, *v91, v89);
      llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(a1 + 40), (llvm::MemoryDef *)MemoryAccessBefore);
    }
    int v99 = *(unsigned __int8 *)v109[0];
    if ((v99 - 4) > 0x1E)
    {
      if ((v99 - 3) >= 0xFFFFFFFE) {
        uint64_t v102 = v109[0];
      }
      else {
        uint64_t v102 = 0;
      }
      if ((v99 - 3) < 0xFFFFFFFE)
      {
        if (v99 == 3) {
          *(void *)(v109[0] + 8) = 0;
        }
        goto LABEL_69;
      }
      unint64_t v101 = v102 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v109[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v109[0] + 12)) {
        goto LABEL_69;
      }
      uint64_t v100 = *(void *)(v109[0] + 16);
      if ((v100 & 4) == 0) {
        goto LABEL_69;
      }
      unint64_t v101 = v100 & 0xFFFFFFFFFFFFFFF8;
      if (!v101) {
        goto LABEL_69;
      }
    }
    *(void *)&long long v112 = v109;
    sub_1CC5FA668(v101 + 16, &v112);
    goto LABEL_69;
  }
  return v38 ^ 1u;
}

uint64_t llvm::MemCpyOptPass::performMemCpyToMemSetOptzn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v77[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
  uint64_t v62 = *(void **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
  uint64_t v63 = 1;
  memset(v64, 0, sizeof(v64));
  v58[0] = v7;
  v58[1] = 1;
  long long v59 = 0u;
  long long v60 = 0u;
  if (llvm::AAResults::alias(v6, (uint64_t)&v62, (uint64_t)v58) != 3) {
    return 0;
  }
  uint64_t v8 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64);
  uint64_t v9 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
  if (v8 == v9) {
    goto LABEL_39;
  }
  if (v8) {
    BOOL v10 = *(unsigned char *)(v8 + 16) == 16;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10 && v9 && *(unsigned char *)(v9 + 16) == 16)
  {
    uint64_t v12 = (void *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u) {
      uint64_t v12 = (void *)*v12;
    }
    int v13 = (void *)*v12;
    uint64_t v14 = (void *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u) {
      uint64_t v14 = (void *)*v14;
    }
    if ((unint64_t)v13 <= *v14)
    {
      uint64_t v8 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
      goto LABEL_39;
    }
    llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)&v62);
    uint64_t v15 = *(void *)(a1 + 32);
    int v16 = *(_DWORD *)(v15 + 40);
    if (v16)
    {
      uint64_t v17 = *(void *)(v15 + 24);
      unsigned int v18 = v16 - 1;
      uint64_t v19 = (v16 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      uint64_t v20 = *(void *)(v17 + 16 * v19);
      if (v20 == a3)
      {
LABEL_23:
        uint64_t v23 = *(void *)(v17 + 16 * v19 + 8);
        goto LABEL_25;
      }
      int v21 = 1;
      while (v20 != -4096)
      {
        int v22 = v19 + v21++;
        uint64_t v19 = v22 & v18;
        uint64_t v20 = *(void *)(v17 + 16 * v19);
        if (v20 == a3) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v23 = 0;
LABEL_25:
    uint64_t WalkerImpl = llvm::MemorySSA::getWalkerImpl((llvm::MemorySSA *)v15);
    if (*(unsigned char *)(v23 + 16) == 25) {
      uint64_t v25 = v23;
    }
    else {
      uint64_t v25 = 0;
    }
    if (v25) {
      long long v26 = (void *)(v25 - 32);
    }
    else {
      long long v26 = (void *)(v23 - 64);
    }
    uint64_t v27 = (*(uint64_t (**)(uint64_t, void, void **))(*(void *)WalkerImpl + 24))(WalkerImpl, *v26, &v62);
    if (v27) {
      BOOL v28 = *(unsigned char *)(v27 + 16) == 26;
    }
    else {
      BOOL v28 = 0;
    }
    if (!v28) {
      return 0;
    }
    uint64_t v29 = v27;
    uint64_t v30 = *(void *)(a1 + 32);
    uint64_t v31 = *(void *)(a1 + 8);
    uint64_t v32 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
    if (!sub_1CCE3FA2C(*(void *)(v30 + 96), v31, v32, v29, v9)) {
      return 0;
    }
LABEL_39:
    uint64_t v34 = 0;
    uint64_t v35 = **(void **)a2;
    uint64_t v63 = 0x200000000;
    uint64_t v67 = v35;
    int v68 = &v76;
    uint64_t v69 = v77;
    uint64_t v70 = 0;
    int v71 = 0;
    __int16 v72 = 512;
    char v73 = 7;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = &unk_1F2616E88;
    v77[0] = &unk_1F2617008;
    uint64_t v36 = *(unsigned __int8 **)(a2 + 48);
    uint64_t v65 = *(void *)(a2 + 40);
    uint64_t v66 = a2 + 24;
    uint64_t v61 = v36;
    uint64_t v62 = v64;
    if (v36)
    {
      llvm::MetadataTracking::track((uint64_t)&v61, v36, 2);
      uint64_t v34 = (uint64_t)v61;
    }
    sub_1CB8461A4((uint64_t)&v62, 0, v34);
    if (!v61)
    {
LABEL_42:
      uint64_t v37 = *(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      uint64_t v38 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
      uint64_t v39 = *(void *)(a2 + 64);
      if (v39
        && *(_DWORD *)(v39 + 8) >= 3u
        && (__int32 v40 = *(llvm::AttributeSetNode **)(v39 + 56)) != 0
        && (unsigned __int16 Alignment = llvm::AttributeSetNode::getAlignment(v40), Alignment >= 0x100u)
        && Alignment < 0x20u)
      {
        unint64_t v42 = __clz(__rbit64((1 << Alignment))) | 0x100;
      }
      else
      {
        LOWORD(v42) = 0;
      }
      MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)&v62, v37, v38, (uint64_t *)v8, v42, 0, 0, 0, 0);
      uint64_t v44 = *(uint64_t ***)(a1 + 40);
      int v45 = *((_DWORD *)*v44 + 10);
      if (v45)
      {
        uint64_t v46 = (*v44)[3];
        unsigned int v47 = v45 - 1;
        uint64_t v48 = (v45 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        uint64_t v49 = *(void *)(v46 + 16 * v48);
        if (v49 == a2)
        {
LABEL_53:
          uint64_t v52 = *(llvm::MemoryAccess **)(v46 + 16 * v48 + 8);
          goto LABEL_55;
        }
        int v50 = 1;
        while (v49 != -4096)
        {
          int v51 = v48 + v50++;
          uint64_t v48 = v51 & v47;
          uint64_t v49 = *(void *)(v46 + 16 * v48);
          if (v49 == a2) {
            goto LABEL_53;
          }
        }
      }
      uint64_t v52 = 0;
LABEL_55:
      MemoryAccessAfter = llvm::MemorySSAUpdater::createMemoryAccessAfter(v44, (llvm::Instruction *)MemSet, v52, (const llvm::BasicBlock **)v52);
      llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(a1 + 40), (llvm::MemoryDef *)MemoryAccessAfter);
    }
    int v54 = *v61;
    if ((v54 - 4) > 0x1E)
    {
      if ((v54 - 3) >= 0xFFFFFFFE) {
        unint64_t v57 = v61;
      }
      else {
        unint64_t v57 = 0;
      }
      if ((v54 - 3) < 0xFFFFFFFE)
      {
        if (v54 == 3) {
          *((void *)v61 + 1) = 0;
        }
        goto LABEL_42;
      }
      unint64_t v56 = (unint64_t)(v57 + 8);
    }
    else
    {
      if ((v61[1] & 0x7F) != 2 && !*((_DWORD *)v61 + 3)) {
        goto LABEL_42;
      }
      uint64_t v55 = *((void *)v61 + 2);
      if ((v55 & 4) == 0) {
        goto LABEL_42;
      }
      unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8;
      if (!v56) {
        goto LABEL_42;
      }
    }
    v58[0] = &v61;
    sub_1CC5FA668(v56 + 16, v58);
    goto LABEL_42;
  }
  return 0;
}

BOOL sub_1CCE3FA2C(uint64_t a1, uint64_t a2, llvm *this, uint64_t a4, uint64_t a5)
{
  if (a1 == a4) {
    return *((unsigned char *)llvm::getUnderlyingObject(this, (const llvm::Value *)6) + 16) == 59;
  }
  uint64_t v6 = *(void *)(a4 + 72);
  if (!v6) {
    return 0;
  }
  if (*(unsigned char *)(v6 + 16) != 84) {
    return 0;
  }
  uint64_t v7 = *(void *)(v6 - 32);
  if (!v7
    || *(unsigned char *)(v7 + 16)
    || *(void *)(v7 + 24) != *(void *)(v6 + 72)
    || (*(unsigned char *)(v7 + 33) & 0x20) == 0
    || *(_DWORD *)(v7 + 36) != 168)
  {
    return 0;
  }
  uint64_t v9 = (uint64_t *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
  uint64_t v10 = *v9;
  if (a5)
  {
    if (*(unsigned char *)(a5 + 16) == 16)
    {
      uint64_t v11 = v9[4];
      uint64_t v23 = this;
      uint64_t v24 = 1;
      long long v25 = 0u;
      long long v26 = 0u;
      v20[0] = v11;
      v20[1] = 1;
      long long v21 = 0u;
      long long v22 = 0u;
      if (llvm::AAResults::alias(a2, (uint64_t)&v23, (uint64_t)v20) == 3)
      {
        uint64_t v12 = (void *)(v10 + 24);
        if (*(_DWORD *)(v10 + 32) >= 0x41u) {
          uint64_t v12 = (void *)*v12;
        }
        int v13 = (void *)*v12;
        uint64_t v14 = (void *)(a5 + 24);
        if (*(_DWORD *)(a5 + 32) >= 0x41u) {
          uint64_t v14 = (void *)*v14;
        }
        if ((unint64_t)v13 >= *v14) {
          return 1;
        }
      }
    }
  }
  UnderlyingObject = llvm::getUnderlyingObject(this, (const llvm::Value *)6);
  BOOL result = 0;
  if (UnderlyingObject && *((unsigned char *)UnderlyingObject + 16) == 59)
  {
    if (llvm::getUnderlyingObject(*(llvm **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32), (const llvm::Value *)6) == UnderlyingObject)
    {
      llvm::AllocaInst::getAllocationSizeInBits((llvm::Type **)UnderlyingObject, (const llvm::DataLayout *)(*(void *)(*(void *)(*((void *)UnderlyingObject + 5) + 56) + 40) + 272), (uint64_t)&v23);
      if ((_BYTE)v25)
      {
        if (v24 == 1) {
        unsigned int v18 = *(_DWORD *)(v10 + 32);
        }
        if (v18 > 0x40) {
          operator new[]();
        }
        unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
        if (!v18) {
          unint64_t v19 = 0;
        }
        if ((llvm *)(v19 & (8 * *(void *)(v10 + 24))) == v23) {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::MemCpyOptPass::processMemCpy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v126[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  uint64_t v7 = *(void *)(v6 + 96);
  uint64_t v8 = *(unsigned int *)(v7 + 32);
  if (v8 > 0x40)
  {
    int v9 = 0;
    int64_t v10 = (unint64_t)(v8 + 63) >> 6;
    do
    {
      if (v10-- < 1) {
        break;
      }
      unint64_t v12 = *(void *)(*(void *)(v7 + 24) + 8 * v10);
      v9 += __clz(v12);
    }
    while (!v12);
    uint64_t result = 0;
    int v14 = v8 | 0xFFFFFFC0;
    if ((v8 & 0x3F) == 0) {
      int v14 = 0;
    }
    if (v9 + v14 != v8) {
      return result;
    }
  }
  else if (*(void *)(v7 + 24))
  {
    return 0;
  }
  uint64_t v15 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v6 + 32));
  if (v15 == llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))))
  {
    *(void *)a3 = *(void *)(*(void *)a3 + 8);
    unint64_t v42 = *(int32x2_t ***)(a1 + 40);
    __int32 v43 = (*v42)[5].i32[0];
    if (!v43) {
      goto LABEL_108;
    }
    int32x2_t v44 = (*v42)[3];
    __int32 v45 = v43 - 1;
    uint64_t v46 = (v43 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v47 = *(void *)(*(void *)&v44 + 16 * v46);
    if (v47 == a2) {
      goto LABEL_106;
    }
    int v48 = 1;
    while (v47 != -4096)
    {
      int v49 = v46 + v48++;
      uint64_t v46 = v49 & v45;
      uint64_t v47 = *(void *)(*(void *)&v44 + 16 * v46);
      if (v47 == a2) {
        goto LABEL_106;
      }
    }
LABEL_108:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  int v16 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
  if (v16) {
    BOOL v17 = *((unsigned char *)v16 + 16) == 3;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    unsigned int v18 = v16;
    if ((*((unsigned char *)v16 + 80) & 1) != 0
      && (*((_DWORD *)v16 + 5) & 0x7FFFFFF) != 0
      && (llvm::GlobalValue::isInterposable(v16) & 1) == 0
      && (*((unsigned char *)v18 + 80) & 2) == 0)
    {
      uint64_t v20 = llvm::isBytewiseValue(*((llvm **)v18 - 4), (llvm::Value *)(*(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40) + 272), v19);
      if (v20)
      {
        uint64_t v88 = (uint64_t)v20;
        uint64_t v89 = 0;
        uint64_t v90 = **(void **)a2;
        v118[0] = v119;
        v118[1] = (void *)0x200000000;
        v119[6] = v90;
        v119[7] = &v125;
        v119[8] = v126;
        v119[9] = 0;
        int v120 = 0;
        __int16 v121 = 512;
        char v122 = 7;
        uint64_t v123 = 0;
        uint64_t v124 = 0;
        int v125 = &unk_1F2616E88;
        v126[0] = &unk_1F2617008;
        uint64_t v91 = *(unsigned __int8 **)(a2 + 48);
        v119[4] = *(void *)(a2 + 40);
        v119[5] = a2 + 24;
        char v115 = v91;
        if (v91)
        {
          llvm::MetadataTracking::track((uint64_t)&v115, v91, 2);
          uint64_t v89 = (uint64_t)v115;
        }
        sub_1CB8461A4((uint64_t)v118, 0, v89);
        if (!v115)
        {
LABEL_115:
          uint64_t v92 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
          uint64_t v93 = *(llvm::Value **)v92;
          uint64_t v94 = *(uint64_t **)(v92 + 64);
          uint64_t v95 = *(void *)(a2 + 64);
          if (v95
            && *(_DWORD *)(v95 + 8) >= 3u
            && (uint64_t v96 = *(llvm::AttributeSetNode **)(v95 + 56)) != 0
            && (unsigned __int16 Alignment = llvm::AttributeSetNode::getAlignment(v96), Alignment >= 0x100u)
            && Alignment < 0x20u)
          {
            unint64_t v98 = __clz(__rbit64((1 << Alignment))) | 0x100;
          }
          else
          {
            LOWORD(v98) = 0;
          }
          MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)v118, v93, v88, v94, v98, 0, 0, 0, 0);
          uint64_t v100 = *(uint64_t ***)(a1 + 40);
          int v101 = *((_DWORD *)*v100 + 10);
          if (v101)
          {
            uint64_t v102 = (*v100)[3];
            unsigned int v103 = v101 - 1;
            uint64_t v104 = (v101 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            uint64_t v105 = *(void *)(v102 + 16 * v104);
            if (v105 == a2)
            {
LABEL_126:
              uint64_t v108 = *(llvm::MemoryAccess **)(v102 + 16 * v104 + 8);
              goto LABEL_128;
            }
            int v106 = 1;
            while (v105 != -4096)
            {
              int v107 = v104 + v106++;
              uint64_t v104 = v107 & v103;
              uint64_t v105 = *(void *)(v102 + 16 * v104);
              if (v105 == a2) {
                goto LABEL_126;
              }
            }
          }
          uint64_t v108 = 0;
LABEL_128:
          MemoryAccessAfter = llvm::MemorySSAUpdater::createMemoryAccessAfter(v100, (llvm::Instruction *)MemSet, v108, (const llvm::BasicBlock **)v108);
          llvm::MemorySSAUpdater::insertDef(*(llvm::MemorySSAUpdater **)(a1 + 40), (llvm::MemoryDef *)MemoryAccessAfter);
        }
        int v110 = *v115;
        if ((v110 - 4) > 0x1E)
        {
          if ((v110 - 3) >= 0xFFFFFFFE) {
            long long v113 = v115;
          }
          else {
            long long v113 = 0;
          }
          if ((v110 - 3) < 0xFFFFFFFE)
          {
            if (v110 == 3) {
              *((void *)v115 + 1) = 0;
            }
            goto LABEL_115;
          }
          unint64_t v112 = (unint64_t)(v113 + 8);
        }
        else
        {
          if ((v115[1] & 0x7F) != 2 && !*((_DWORD *)v115 + 3)) {
            goto LABEL_115;
          }
          uint64_t v111 = *((void *)v115 + 2);
          if ((v111 & 4) == 0) {
            goto LABEL_115;
          }
          unint64_t v112 = v111 & 0xFFFFFFFFFFFFFFF8;
          if (!v112) {
            goto LABEL_115;
          }
        }
        v114[0] = &v115;
        sub_1CC5FA668(v112 + 16, v114);
        goto LABEL_115;
      }
    }
  }
  uint64_t v21 = *(void *)(a1 + 32);
  int v22 = *(_DWORD *)(v21 + 40);
  if (v22)
  {
    uint64_t v23 = *(void *)(v21 + 24);
    unsigned int v24 = v22 - 1;
    uint64_t v25 = (v22 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v26 = *(void *)(v23 + 16 * v25);
    if (v26 == a2)
    {
LABEL_26:
      uint64_t v29 = *(void *)(v23 + 16 * v25 + 8);
      goto LABEL_28;
    }
    int v27 = 1;
    while (v26 != -4096)
    {
      int v28 = v25 + v27++;
      uint64_t v25 = v28 & v24;
      uint64_t v26 = *(void *)(v23 + 16 * v25);
      if (v26 == a2) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v29 = 0;
LABEL_28:
  if (*(unsigned char *)(v29 + 16) == 25) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = (uint64_t *)(v29 - 64);
  if (v30) {
    uint64_t v31 = (uint64_t *)(v30 - 32);
  }
  uint64_t v32 = *v31;
  llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)v118);
  uint64_t WalkerImpl = llvm::MemorySSA::getWalkerImpl(*(llvm::MemorySSA **)(a1 + 32));
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)WalkerImpl + 24))(WalkerImpl, v32, v118);
  if (v34) {
    BOOL v35 = *(unsigned char *)(v34 + 16) == 26;
  }
  else {
    BOOL v35 = 0;
  }
  if (v35)
  {
    uint64_t v36 = v34;
    uint64_t v37 = *(void *)(v34 + 72);
    if (v37)
    {
      if (sub_1CC5818F8(*(void *)(v34 + 72))
        && *(void *)(v36 + 64) == *(void *)(a2 + 40)
        && (llvm::MemCpyOptPass::processMemSetMemCpyDependence(a1, (const llvm::CallBase *)a2, v37) & 1) != 0)
      {
        return 1;
      }
    }
  }
  uint64_t v38 = llvm::MemorySSA::getWalkerImpl(*(llvm::MemorySSA **)(a1 + 32));
  double v39 = llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)v114);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, void *, double))(*(void *)v38 + 24))(v38, v32, v114, v39);
  if (v40) {
    BOOL v41 = *(unsigned char *)(v40 + 16) == 26;
  }
  else {
    BOOL v41 = 0;
  }
  if (!v41) {
    return 0;
  }
  uint64_t v50 = v40;
  uint64_t v51 = *(void *)(v40 + 72);
  if (!v51) {
    goto LABEL_100;
  }
  uint64_t v52 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  uint64_t v53 = *(void *)(v52 + 64);
  if (v53) {
    BOOL v54 = *(unsigned char *)(v53 + 16) == 16;
  }
  else {
    BOOL v54 = 0;
  }
  if (v54 && *(unsigned char *)(v51 + 16) == 84)
  {
    uint64_t v55 = *(void *)(a2 + 64);
    if (v55 && (unsigned int v56 = *(_DWORD *)(v55 + 8), v56 >= 3))
    {
      unint64_t v57 = *(llvm::AttributeSetNode **)(v55 + 56);
      if (v57)
      {
        LOWORD(v57) = llvm::AttributeSetNode::getAlignment(v57);
        int v58 = BYTE1(v57);
      }
      else
      {
        int v58 = 0;
      }
      unsigned int v62 = v57 | (v58 << 8);
      if (v62 <= 0x100) {
        unsigned __int8 v59 = 0;
      }
      else {
        unsigned __int8 v59 = v62;
      }
      if (v56 >= 4)
      {
        uint64_t v61 = *(llvm::AttributeSetNode **)(v55 + 64);
        if (v61)
        {
          LOWORD(v61) = llvm::AttributeSetNode::getAlignment(v61);
          int v60 = BYTE1(v61);
        }
        else
        {
          int v60 = 0;
        }
LABEL_74:
        unsigned int v63 = v61 | (v60 << 8);
        if (v63 <= 0x100) {
          LOBYTE(v63) = 0;
        }
        if (v63 < v59) {
          unsigned __int8 v59 = v63;
        }
        unint64_t v64 = llvm::Value::stripPointerCasts(*(llvm::Value **)v52);
        uint64_t v65 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
        uint64_t v66 = (unint64_t *)(v53 + 24);
        if (*(_DWORD *)(v53 + 32) >= 0x41u) {
          uint64_t v66 = (unint64_t *)*v66;
        }
        unint64_t v67 = *v66;
        v116[0] = &unk_1F263FF70;
        v116[1] = v51;
        uint64_t v117 = v116;
        int v68 = llvm::MemCpyOptPass::performCallSlotOptzn(a1, (llvm::Instruction *)a2, a2, (uint64_t)v64, (uint64_t)v65, v67, 0, v59, (uint64_t)v116);
        if (v117 == v116)
        {
          (*(void (**)(void *))(v116[0] + 32))(v116);
        }
        else if (v117)
        {
          (*(void (**)(void))(*v117 + 40))();
        }
        if (v68)
        {
          unint64_t v42 = *(int32x2_t ***)(a1 + 40);
          __int32 v69 = (*v42)[5].i32[0];
          if (!v69) {
            goto LABEL_108;
          }
          int32x2_t v44 = (*v42)[3];
          __int32 v70 = v69 - 1;
          uint64_t v46 = (v69 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          uint64_t v71 = *(void *)(*(void *)&v44 + 16 * v46);
          if (v71 != a2)
          {
            int v72 = 1;
            while (v71 != -4096)
            {
              int v73 = v46 + v72++;
              uint64_t v46 = v73 & v70;
              uint64_t v71 = *(void *)(*(void *)&v44 + 16 * v46);
              if (v71 == a2) {
                goto LABEL_106;
              }
            }
            goto LABEL_108;
          }
LABEL_106:
          int v87 = *(llvm::MemoryAccess **)(*(void *)&v44 + 16 * v46 + 8);
          if (v87) {
            llvm::MemorySSAUpdater::removeMemoryAccess(v42, v87, 0);
          }
          goto LABEL_108;
        }
        goto LABEL_91;
      }
    }
    else
    {
      unsigned __int8 v59 = 0;
    }
    int v60 = 0;
    LOBYTE(v61) = 0;
    goto LABEL_74;
  }
LABEL_91:
  if (sub_1CC581858(v51)) {
    return llvm::MemCpyOptPass::processMemCpyMemCpyDependence(a1, (_DWORD *)a2, (_DWORD *)v51);
  }
  if (sub_1CC5818F8(v51) && llvm::MemCpyOptPass::performMemCpyToMemSetOptzn(a1, a2, v51))
  {
    unint64_t v42 = *(int32x2_t ***)(a1 + 40);
    __int32 v74 = (*v42)[5].i32[0];
    if (!v74) {
      goto LABEL_108;
    }
    int32x2_t v44 = (*v42)[3];
    __int32 v75 = v74 - 1;
    uint64_t v46 = (v74 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v76 = *(void *)(*(void *)&v44 + 16 * v46);
    if (v76 == a2) {
      goto LABEL_106;
    }
    int v77 = 1;
    while (v76 != -4096)
    {
      int v78 = v46 + v77++;
      uint64_t v46 = v78 & v75;
      uint64_t v76 = *(void *)(*(void *)&v44 + 16 * v46);
      if (v76 == a2) {
        goto LABEL_106;
      }
    }
    goto LABEL_108;
  }
LABEL_100:
  uint64_t v79 = *(void *)(a1 + 32);
  uint64_t v80 = *(void *)(a1 + 8);
  int v81 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t result = sub_1CCE3FA2C(*(void *)(v79 + 96), v80, v81, v50, *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64));
  if (result)
  {
    unint64_t v42 = *(int32x2_t ***)(a1 + 40);
    __int32 v82 = (*v42)[5].i32[0];
    if (!v82) {
      goto LABEL_108;
    }
    int32x2_t v44 = (*v42)[3];
    __int32 v83 = v82 - 1;
    uint64_t v46 = (v82 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v84 = *(void *)(*(void *)&v44 + 16 * v46);
    if (v84 == a2) {
      goto LABEL_106;
    }
    int v85 = 1;
    while (v84 != -4096)
    {
      int v86 = v46 + v85++;
      uint64_t v46 = v86 & v83;
      uint64_t v84 = *(void *)(*(void *)&v44 + 16 * v46);
      if (v84 == a2) {
        goto LABEL_106;
      }
    }
    goto LABEL_108;
  }
  return result;
}

BOOL llvm::MemCpyOptPass::processByValArgument(llvm::MemCpyOptPass *this, llvm::CallBase *a2, unsigned int a3)
{
  uint64_t v6 = (llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40) + 272);
  uint64_t v7 = (llvm::Value *)*((void *)a2 + 4 * a3 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  uint64_t v8 = (llvm::Type *)sub_1CD49471C((uint64_t)a2, a3);
  unint64_t v9 = (unint64_t)(sub_1CB83544C((uint64_t)v6, (uint64_t)v8) + 7) >> 3;
  BOOL v11 = v10 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v6, v8, 1);
  unint64_t v13 = ((1 << Alignment) + v9 - 1) & -(1 << Alignment);
  uint64_t v14 = -2;
  if (!v11 && v13 <= 0x7FFFFFFFFFFFFFFBLL) {
    uint64_t v14 = ((1 << Alignment) + v9 - 1) & -(1 << Alignment);
  }
  v102[0] = v7;
  v102[1] = v14;
  long long v103 = 0u;
  long long v104 = 0u;
  uint64_t v15 = *((void *)this + 4);
  int v16 = *(_DWORD *)(v15 + 40);
  if (!v16) {
    return 0;
  }
  uint64_t v17 = *(void *)(v15 + 24);
  unsigned int v18 = (a2 >> 4) ^ (a2 >> 9);
  unsigned int v19 = v16 - 1;
  uint64_t v20 = (v16 - 1) & v18;
  uint64_t v21 = *(llvm::CallBase **)(v17 + 16 * v20);
  if (v21 != a2)
  {
    int v22 = 1;
    while (v21 != (llvm::CallBase *)-4096)
    {
      int v23 = v20 + v22++;
      uint64_t v20 = v23 & v19;
      uint64_t v21 = *(llvm::CallBase **)(v17 + 16 * v20);
      if (v21 == a2) {
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  uint64_t v24 = *(void *)(v17 + 16 * v20 + 8);
  if (!v24) {
    return 0;
  }
  uint64_t WalkerImpl = llvm::MemorySSA::getWalkerImpl((llvm::MemorySSA *)v15);
  uint64_t v26 = *(unsigned char *)(v24 + 16) == 25 ? v24 : 0;
  int v27 = (void *)(v26 ? v26 - 32 : v24 - 64);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, void, void *))(*(void *)WalkerImpl + 24))(WalkerImpl, *v27, v102);
  if (!v28 || *(unsigned char *)(v28 + 16) != 26) {
    return 0;
  }
  uint64_t v30 = *(void *)(v28 + 72);
  if (!v30) {
    return 0;
  }
  BOOL result = sub_1CC581858(*(void *)(v28 + 72));
  if (!result) {
    return result;
  }
  uint64_t v32 = *(void *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF) + 96);
  uint64_t v33 = *(unsigned int *)(v32 + 32);
  if (v33 > 0x40)
  {
    int v34 = 0;
    int64_t v35 = (unint64_t)(v33 + 63) >> 6;
    do
    {
      if (v35-- < 1) {
        break;
      }
      unint64_t v37 = *(void *)(*(void *)(v32 + 24) + 8 * v35);
      v34 += __clz(v37);
    }
    while (!v37);
    BOOL result = 0;
    int v38 = v33 | 0xFFFFFFC0;
    if ((v33 & 0x3F) == 0) {
      int v38 = 0;
    }
    if (v34 + v38 != v33) {
      return result;
    }
  }
  else if (*(void *)(v32 + 24))
  {
    return 0;
  }
  double v39 = llvm::Value::stripPointerCasts(v7);
  if (v39 != llvm::Value::stripPointerCasts(*(llvm::Value **)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF)))) {
    return 0;
  }
  uint64_t v40 = *(_DWORD *)(v30 + 20) & 0x7FFFFFF;
  uint64_t v41 = v30 - 32 * v40;
  uint64_t v42 = *(void *)(v41 + 64);
  if (!v42 || *(unsigned char *)(v42 + 16) != 16) {
    return 0;
  }
  int32x2_t v44 = (unint64_t *)(v42 + 24);
  if (*(_DWORD *)(v42 + 32) >= 0x41u) {
    int32x2_t v44 = (unint64_t *)*v44;
  }
  BOOL result = 0;
  if (!v11 && *v44 >= v13)
  {
    uint64_t v45 = *((void *)a2 + 8);
    if (v45)
    {
      if (a3 + 2 < *(_DWORD *)(v45 + 8))
      {
        uint64_t v46 = *(_DWORD *)(v30 + 20) & 0x7FFFFFF;
        uint64_t v47 = *(llvm::AttributeSetNode **)(v45 + 8 * (a3 + 2) + 40);
        if (v47)
        {
          __int16 v48 = llvm::AttributeSetNode::getAlignment(v47);
          unsigned __int8 v49 = v48;
          LODWORD(v45) = HIBYTE(v48);
        }
        else
        {
          LODWORD(v45) = 0;
          unsigned __int8 v49 = 0;
        }
        uint64_t v40 = v46;
LABEL_50:
        unsigned int v50 = v49 | (v45 << 8);
        if (v50 < 0x100) {
          return 0;
        }
        __int16 v97 = v50;
        uint64_t v51 = *(void *)(v30 + 64);
        if (v51
          && *(_DWORD *)(v51 + 8) >= 4u
          && (uint64_t v52 = *(llvm::AttributeSetNode **)(v51 + 64)) != 0
          && (uint64_t v53 = v40, v54 = llvm::AttributeSetNode::getAlignment(v52), v54 >= 0x100u)
          && v49 <= v54)
        {
          uint64_t v55 = -v53;
        }
        else
        {
          unsigned int v56 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v41 + 32));
          if (v49 > llvm::getOrEnforceKnownAlignment((uint64_t)v56, v97, (unsigned __int8 *)v6, a2, *((const llvm::DataLayout **)this + 2), *((const llvm::DataLayout **)this + 3)))return 0; {
          uint64_t v55 = -(uint64_t)(*(_DWORD *)(v30 + 20) & 0x7FFFFFF);
          }
        }
        unint64_t v57 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v30 + 32 * v55 + 32));
        unsigned int v58 = *(_DWORD *)(*(void *)v57 + 8);
        if ((v58 & 0xFE) == 0x12) {
          unsigned int v58 = *(_DWORD *)(**(void **)(*(void *)v57 + 16) + 8);
        }
        int v59 = *(_DWORD *)(*(void *)v7 + 8);
        if ((v59 & 0xFE) == 0x12) {
          int v59 = *(_DWORD *)(**(void **)(*(void *)v7 + 16) + 8);
        }
        if ((v59 ^ v58) > 0xFF) {
          return 0;
        }
        int v60 = (llvm::MemorySSA *)*((void *)this + 4);
        uint64_t v61 = *((void *)this + 1);
        llvm::MemoryLocation::getForArgument(v30, 1u, 0, (uint64_t)v101);
        uint64_t v62 = *((void *)this + 4);
        int v63 = *(_DWORD *)(v62 + 40);
        if (v63)
        {
          uint64_t v64 = *(void *)(v62 + 24);
          unsigned int v65 = v63 - 1;
          uint64_t v66 = v65 & ((v30 >> 4) ^ (v30 >> 9));
          uint64_t v67 = *(void *)(v64 + 16 * v66);
          if (v30 == v67)
          {
LABEL_69:
            uint64_t v70 = *(void *)(v64 + 16 * v66 + 8);
          }
          else
          {
            int v68 = 1;
            while (v67 != -4096)
            {
              int v69 = v66 + v68++;
              uint64_t v66 = v69 & v65;
              uint64_t v67 = *(void *)(v64 + 16 * v66);
              if (v30 == v67) {
                goto LABEL_69;
              }
            }
            uint64_t v70 = 0;
          }
          uint64_t v71 = v65 & v18;
          int v72 = *(llvm::CallBase **)(v64 + 16 * v71);
          if (v72 == a2)
          {
LABEL_75:
            uint64_t v75 = *(void *)(v64 + 16 * v71 + 8);
            goto LABEL_78;
          }
          int v73 = 1;
          while (v72 != (llvm::CallBase *)-4096)
          {
            int v74 = v71 + v73++;
            uint64_t v71 = v74 & v65;
            int v72 = *(llvm::CallBase **)(v64 + 16 * v71);
            if (v72 == a2) {
              goto LABEL_75;
            }
          }
        }
        else
        {
          uint64_t v70 = 0;
        }
        uint64_t v75 = 0;
LABEL_78:
        if (!sub_1CCE3E778(v60, v61, v101, v70, v75))
        {
          uint64_t v76 = a3;
          int v77 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF) + 32));
          if (*(void *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v30
                                                                         - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF)
                                                                         + 32)) == *(void *)v7)
          {
LABEL_85:
            int v86 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
            int v87 = &v86[32 * v76];
            if (*(void *)v87)
            {
              **((void **)v87 + 2) = *((void *)v87 + 1);
              uint64_t v88 = *((void *)v87 + 1);
              if (v88) {
                *(void *)(v88 + 16) = *((void *)v87 + 2);
              }
            }
            *(void *)int v87 = v77;
            if (v77)
            {
              uint64_t v91 = *((void *)v77 + 1);
              uint64_t v90 = (char **)((char *)v77 + 8);
              uint64_t v89 = v91;
              uint64_t v92 = &v86[32 * v76];
              *((void *)v92 + 1) = v91;
              if (v91) {
                *(void *)(v89 + 16) = v92 + 8;
              }
              *((void *)v92 + 2) = v90;
              *uint64_t v90 = v87;
            }
            return 1;
          }
          int v78 = (char *)operator new(0x60uLL);
          int v77 = (llvm::Value *)(v78 + 32);
          *((_DWORD *)v78 + 13) = *((_DWORD *)v78 + 13) & 0x38000000 | 1;
          *(void *)int v78 = 0;
          *((void *)v78 + 1) = 0;
          *((void *)v78 + 2) = 0;
          *((void *)v78 + 3) = v78 + 32;
          uint64_t v79 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF) + 32));
          uint64_t v80 = *(llvm::Type **)v7;
          v99[0] = "tmpcast";
          __int16 v100 = 259;
          llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v78 + 32), v79, v80, v99, a2);
          int v81 = *(unsigned __int8 **)(v30 + 48);
          unint64_t v98 = v81;
          if (v81) {
            llvm::MetadataTracking::track((uint64_t)&v98, v81, 2);
          }
          uint64_t v84 = (unsigned __int8 *)*((void *)v78 + 10);
          __int32 v83 = v78 + 80;
          __int32 v82 = v84;
          if (!v84)
          {
LABEL_83:
            int v85 = v98;
            *(void *)__int32 v83 = v98;
            if (v85) {
              llvm::MetadataTracking::retrack((uint64_t)&v98, v85, (uint64_t)v83);
            }
            goto LABEL_85;
          }
          int v93 = *v82;
          if ((v93 - 4) > 0x1E)
          {
            if ((v93 - 3) >= 0xFFFFFFFE) {
              uint64_t v96 = v82;
            }
            else {
              uint64_t v96 = 0;
            }
            if ((v93 - 3) < 0xFFFFFFFE)
            {
              if (v93 == 3) {
                *((void *)v82 + 1) = 0;
              }
              goto LABEL_83;
            }
            unint64_t v95 = (unint64_t)(v96 + 8);
          }
          else
          {
            if ((v82[1] & 0x7F) != 2 && !*((_DWORD *)v82 + 3)) {
              goto LABEL_83;
            }
            uint64_t v94 = *((void *)v82 + 2);
            if ((v94 & 4) == 0) {
              goto LABEL_83;
            }
            unint64_t v95 = v94 & 0xFFFFFFFFFFFFFFF8;
            if (!v95) {
              goto LABEL_83;
            }
          }
          v99[0] = v83;
          sub_1CC5FA668(v95 + 16, v99);
          goto LABEL_83;
        }
        return 0;
      }
      LODWORD(v45) = 0;
    }
    unsigned __int8 v49 = 0;
    goto LABEL_50;
  }
  return result;
}

uint64_t llvm::MemCpyOptPass::iterateOnFunction(llvm::MemCpyOptPass *this, llvm::Function **a2)
{
  if (a2[10] != (llvm::Function *)(a2 + 9)) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  }
  return 0;
}

void llvm::MemCpyOptPass::run()
{
}

uint64_t llvm::MemCpyOptPass::runImpl(llvm::MemCpyOptPass *this, llvm::Function **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v10 = 0;
  v26[2] = *(void **)MEMORY[0x1E4F143B8];
  *(void *)this = a3;
  *((void *)this + 1) = a4;
  *((void *)this + 2) = a5;
  *((void *)this + 3) = a6;
  uint64_t v14 = a7;
  v15[0] = (char *)&v16;
  v15[1] = (char *)0x1000000000;
  uint64_t v17 = v21;
  unsigned int v18 = v21;
  uint64_t v19 = 8;
  int v20 = 0;
  int v22 = v24;
  uint64_t v23 = 0x800000000;
  uint64_t v25 = v26;
  v26[1] = 0;
  v26[0] = 0;
  *((void *)this + 4) = a7;
  *((void *)this + 5) = &v14;
  do
  {
    char v11 = v10;
    char v12 = llvm::MemCpyOptPass::iterateOnFunction(this, a2);
    char v10 = 1;
  }
  while ((v12 & 1) != 0);
  if (llvm::VerifyMemorySSA) {
    llvm::MemorySSA::verifyMemorySSA(a7, 0);
  }
  sub_1CD3C5048((uint64_t)&v25, v26[0]);
  if (v22 != v24) {
    free(v22);
  }
  if (v18 != v17) {
    free(v18);
  }
  sub_1CC0BD0FC(v15);
  return v11 & 1;
}

void sub_1CCE412E8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE41320(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);

  sub_1CB843600(a2, v3, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t sub_1CCE41440(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2) & 1) == 0)
  {
    uint64_t v5 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (v6 == v7)
    {
LABEL_6:
      uint64_t v8 = 0;
    }
    else
    {
      while (*(char **)v6 != llvm::TargetLibraryInfoWrapperPass::ID)
      {
        v6 += 16;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v8 = *(void *)(v6 + 8);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 96))(v8, llvm::TargetLibraryInfoWrapperPass::ID);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v10 = v9 + 32;
    if (!*(unsigned char *)(v9 + 232))
    {
      uint64_t v11 = *(void *)(a2 + 40) + 216;
      __int16 v23 = 260;
      v22[0] = v11;
      llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v22);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      int v35 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      *(void *)&long long v12 = -1;
      *((void *)&v12 + 1) = -1;
      *(_OWORD *)__src = v12;
      long long v27 = v12;
      long long v28 = v12;
      long long v29 = v12;
      long long v30 = v12;
      long long v31 = v12;
      *(_OWORD *)uint64_t v32 = v12;
      *(void *)&v32[13] = -1;
      sub_1CC153974((uint64_t)__src, (int *)__p);
      sub_1CD4D04B8(v10, (uint64_t)__src);
      sub_1CD4CFA4C((uint64_t *)__src);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1CC1569E8(__src, v10);
  }
  return 0;
}

void sub_1CCE41954()
{
}

void sub_1CCE41990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6 = a6;
  int v7 = a5;
  uint64_t v8 = a4;
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a3 + a2;
  long long v12 = *(char **)a1;
  int v13 = *(_DWORD *)(a1 + 8);
  if (v13)
  {
    uint64_t v14 = *(char **)a1;
    unint64_t v15 = *(unsigned int *)(a1 + 8);
    do
    {
      unint64_t v16 = v15 >> 1;
      uint64_t v17 = &v14[176 * (v15 >> 1)];
      uint64_t v18 = *((void *)v17 + 1);
      uint64_t v19 = v17 + 176;
      v15 += ~(v15 >> 1);
      if (v18 < a2) {
        uint64_t v14 = v19;
      }
      else {
        unint64_t v15 = v16;
      }
    }
    while (v15);
  }
  else
  {
    uint64_t v14 = *(char **)a1;
  }
  uint64_t v88 = a3 + a2;
  if (v14 == &v12[176 * v13])
  {
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    v91[1] = (void *)0x1000000000;
    long long v89 = 0u;
    v91[0] = &v92;
    uint64_t v39 = sub_1CCE42250((char **)a1, (unint64_t)&v89);
    uint64_t v40 = *(void *)a1 + 176 * *(unsigned int *)(a1 + 8);
    long long v41 = *(_OWORD *)v39;
    *(_OWORD *)(v40 + 12) = *(_OWORD *)(v39 + 12);
    *(_OWORD *)uint64_t v40 = v41;
    uint64_t v42 = (void *)(v40 + 48);
    *(void *)(v40 + 40) = 0x1000000000;
    *(void *)(v40 + 32) = v40 + 48;
    uint64_t v43 = v40 + 32;
    unsigned int v44 = *((_DWORD *)v39 + 10);
    if (v44 && (char *)v43 != v39 + 32)
    {
      uint64_t v45 = (char *)*((void *)v39 + 4);
      if (v45 == v39 + 48)
      {
        if (v44 >= 0x11)
        {
          *(_DWORD *)(v43 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v11 = v88;
        memcpy(v42, v45, 8 * *((unsigned int *)v39 + 10));
        *(_DWORD *)(v43 + 8) = v44;
      }
      else
      {
        if (v42 != (void *)(v43 + 16))
        {
          free(v42);
          uint64_t v45 = (char *)*((void *)v39 + 4);
          unsigned int v44 = *((_DWORD *)v39 + 10);
        }
        *(void *)uint64_t v43 = v45;
        *(_DWORD *)(v43 + 8) = v44;
        *(_DWORD *)(v43 + 12) = *((_DWORD *)v39 + 11);
        *((void *)v39 + 4) = v39 + 48;
        *((_DWORD *)v39 + 11) = 0;
        uint64_t v11 = v88;
      }
      *((_DWORD *)v39 + 10) = 0;
    }
    unsigned int v46 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v46;
    unint64_t v23 = *(void *)a1 + 176 * v46 - 176;
    goto LABEL_62;
  }
  if (v11 < *(void *)v14)
  {
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    v91[1] = (void *)0x1000000000;
    long long v89 = 0u;
    uint64_t v20 = v14 - v12;
    uint64_t v21 = v20 >> 4;
    v91[0] = &v92;
    int v22 = sub_1CCE42250((char **)a1, (unint64_t)&v89);
    unint64_t v23 = *(void *)a1 + v20;
    uint64_t v84 = *(char **)a1;
    uint64_t v24 = *(void *)a1 + 176 * *(unsigned int *)(a1 + 8);
    *(_OWORD *)(v24 + 12) = *(_OWORD *)(v24 - 164);
    *(_OWORD *)uint64_t v24 = *(_OWORD *)(v24 - 176);
    *(void *)(v24 + 32) = v24 + 48;
    char v25 = (void *)(v24 + 32);
    *(void *)(v24 + 40) = 0x1000000000;
    unsigned int v26 = *(_DWORD *)(v24 - 136);
    if (v26 && v25 != (void *)(v24 - 144))
    {
      long long v27 = *(const void **)(v24 - 144);
      if (v27 == (const void *)(v24 - 128))
      {
        if (v26 >= 0x11)
        {
          *(_DWORD *)(v24 + 40) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(v24 + 48), v27, 8 * *(unsigned int *)(v24 - 136));
        *(_DWORD *)(v24 + 40) = v26;
      }
      else
      {
        *char v25 = v27;
        int v83 = *(_DWORD *)(v24 - 132);
        *(_DWORD *)(v24 + 40) = v26;
        *(_DWORD *)(v24 + 44) = v83;
        *(void *)(v24 - 144) = v24 - 128;
        *(_DWORD *)(v24 - 132) = 0;
      }
      *(_DWORD *)(v24 - 136) = 0;
    }
    long long v28 = *(char **)a1;
    unsigned int v29 = *(_DWORD *)(a1 + 8);
    uint64_t v30 = *(void *)a1 + 176 * v29 - 176;
    if (v30 != v23)
    {
      do
      {
        *(_OWORD *)uint64_t v30 = *(_OWORD *)(v30 - 176);
        *(_OWORD *)(v30 + 12) = *(_OWORD *)(v30 - 164);
        long long v31 = *(const void **)(v30 - 144);
        if ((const void *)(v30 - 128) == v31)
        {
          uint64_t v32 = (void **)(v30 + 32);
          uint64_t v34 = (_DWORD *)(v30 - 136);
          uint64_t v33 = *(unsigned int *)(v30 - 136);
          uint64_t v35 = *(unsigned int *)(v30 + 40);
          if (v35 >= v33)
          {
            if (v33) {
              memmove(*v32, v31, 8 * v33);
            }
          }
          else
          {
            if (*(_DWORD *)(v30 + 44) < v33)
            {
              *(_DWORD *)(v30 + 40) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v35) {
              memmove(*v32, v31, 8 * v35);
            }
            else {
              uint64_t v35 = 0;
            }
            uint64_t v36 = *v34;
            if (v35 != v36) {
              memcpy((void *)(*(void *)(v30 + 32) + 8 * v35), (const void *)(*(void *)(v30 - 144) + 8 * v35), 8 * v36 - 8 * v35);
            }
          }
          *(_DWORD *)(v30 + 40) = v33;
        }
        else
        {
          long long v37 = *(void **)(v30 + 32);
          if ((void *)(v30 + 48) != v37)
          {
            free(v37);
            long long v31 = *(const void **)(v30 - 144);
          }
          uint64_t v34 = (_DWORD *)(v30 - 136);
          uint64_t v38 = *(void *)(v30 - 136);
          *(void *)(v30 + 32) = v31;
          *(void *)(v30 + 40) = v38;
          *(void *)(v30 - 144) = v30 - 128;
          *(_DWORD *)(v30 - 132) = 0;
        }
        v30 -= 176;
        _DWORD *v34 = 0;
      }
      while (v30 != v23);
      unsigned int v29 = *(_DWORD *)(a1 + 8);
      long long v28 = *(char **)a1;
    }
    unsigned int v49 = v29 + 1;
    *(_DWORD *)(a1 + 8) = v49;
    unsigned int v50 = &v28[176 * v49];
    BOOL v52 = (unint64_t)v22 >= v23 && v22 < v50;
    uint64_t v53 = &v22[176 * v52];
    long long v54 = *(_OWORD *)v53;
    *(_OWORD *)(v23 + 12) = *(_OWORD *)(v53 + 12);
    *(_OWORD *)unint64_t v23 = v54;
    uint64_t v55 = &v84[16 * v21];
    if (v55 == v53)
    {
      uint64_t v11 = v88;
      uint64_t v6 = a6;
      int v7 = a5;
    }
    else
    {
      unsigned int v56 = v55 + 32;
      unint64_t v57 = v53 + 32;
      int v59 = v53 + 48;
      unsigned int v58 = (char *)*((void *)v53 + 4);
      uint64_t v6 = a6;
      int v7 = a5;
      if (v58 == v53 + 48)
      {
        int v60 = v53 + 40;
        uint64_t v61 = *((unsigned int *)v53 + 10);
        uint64_t v62 = *((unsigned int *)v55 + 10);
        if (v62 >= v61)
        {
          if (v61) {
            memmove(*(void **)v56, v58, 8 * v61);
          }
        }
        else
        {
          if (*((_DWORD *)v55 + 11) < v61)
          {
            *((_DWORD *)v55 + 10) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v62) {
            memmove(*(void **)v56, v58, 8 * v62);
          }
          else {
            uint64_t v62 = 0;
          }
          uint64_t v63 = *v60;
          if (v62 != v63) {
            memcpy((void *)(*(void *)v56 + 8 * v62), (const void *)(*(void *)v57 + 8 * v62), *(void *)v57 + 8 * v63 - (*(void *)v57 + 8 * v62));
          }
        }
        *((_DWORD *)v56 + 2) = v61;
      }
      else
      {
        if (*((char **)v55 + 4) != v55 + 48)
        {
          free(*(void **)v56);
          unsigned int v58 = *(char **)v57;
        }
        *(void *)unsigned int v56 = v58;
        int v60 = v57 + 8;
        *((void *)v56 + 1) = *((void *)v57 + 1);
        *(void *)unint64_t v57 = v59;
        *((_DWORD *)v57 + 3) = 0;
      }
      uint64_t v11 = v88;
      _DWORD *v60 = 0;
    }
    uint64_t v8 = a4;
LABEL_62:
    if (v91[0] != &v92) {
      free(v91[0]);
    }
    *(void *)unint64_t v23 = a2;
    *(void *)(v23 + 8) = v11;
    *(void *)(v23 + 16) = v8;
    *(_DWORD *)(v23 + 24) = v7;
    unsigned int v64 = *(_DWORD *)(v23 + 40);
    if (v64 >= *(_DWORD *)(v23 + 44)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v23 + 32) + 8 * v64) = v6;
    ++*(_DWORD *)(v23 + 40);
    return;
  }
  unsigned int v47 = *((_DWORD *)v14 + 10);
  if (v47 >= *((_DWORD *)v14 + 11)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)v14 + 4) + 8 * v47) = a6;
  ++*((_DWORD *)v14 + 10);
  if (*(void *)v14 <= a2)
  {
    uint64_t v48 = *((void *)v14 + 1);
    if (v48 >= v11) {
      return;
    }
  }
  else
  {
    *(void *)uint64_t v14 = a2;
    *((void *)v14 + 2) = a4;
    *((_DWORD *)v14 + 6) = a5;
    uint64_t v48 = *((void *)v14 + 1);
  }
  if (v11 > v48)
  {
    *((void *)v14 + 1) = v11;
    unsigned int v65 = v14 + 176;
    if (v14 + 176 != (char *)(*(void *)a1 + 176 * *(unsigned int *)(a1 + 8)))
    {
      do
      {
        if (v11 < *(void *)v65) {
          break;
        }
        sub_1CBFCBB74((unsigned int *)v14 + 8, *((unsigned char **)v14 + 26), (unsigned char *)(*((void *)v14 + 26) + 8 * *((unsigned int *)v14 + 54)));
        uint64_t v66 = *((void *)v14 + 23);
        if (v66 > *((void *)v14 + 1)) {
          *((void *)v14 + 1) = v66;
        }
        uint64_t v67 = *(char **)a1;
        unsigned int v68 = *(_DWORD *)(a1 + 8);
        uint64_t v69 = *(void *)a1 + 176 * v68;
        if (v14 + 352 != (char *)v69)
        {
          uint64_t v70 = v14 + 400;
          uint64_t v71 = v14 + 176;
          do
          {
            *(v70 - 14) = *(v70 - 3);
            *(_OWORD *)((char *)v70 - 212) = *(_OWORD *)((char *)v70 - 36);
            int v72 = (_OWORD *)*((void *)v70 - 2);
            if (v70 == v72)
            {
              int v73 = (void **)(v70 - 12);
              uint64_t v75 = (_DWORD *)v70 - 2;
              uint64_t v74 = *((unsigned int *)v70 - 2);
              uint64_t v76 = *((unsigned int *)v70 - 46);
              if (v76 >= v74)
              {
                if (v74) {
                  memmove(*v73, v72, 8 * v74);
                }
              }
              else
              {
                if (*((_DWORD *)v70 - 45) < v74)
                {
                  *((_DWORD *)v70 - 46) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v76) {
                  memmove(*v73, v72, 8 * v76);
                }
                else {
                  uint64_t v76 = 0;
                }
                uint64_t v77 = *v75;
                if (v76 != v77) {
                  memcpy((void *)(*((void *)v70 - 24) + 8 * v76), (const void *)(*((void *)v70 - 2) + 8 * v76), 8 * v77 - 8 * v76);
                }
              }
              *((_DWORD *)v70 - 46) = v74;
            }
            else
            {
              uint64_t v79 = (char *)*((void *)v70 - 24);
              if (v70 - 11 != (_OWORD *)v79)
              {
                free(v79);
                int v72 = (_OWORD *)*((void *)v70 - 2);
              }
              *((void *)v70 - 24) = v72;
              uint64_t v75 = v71 + 216;
              *((void *)v70 - 23) = *((void *)v70 - 1);
              *((void *)v70 - 2) = v70;
              *((_DWORD *)v70 - 1) = 0;
            }
            *uint64_t v75 = 0;
            v71 += 176;
            int v78 = (char *)(v70 + 8);
            v70 += 11;
          }
          while (v78 != (char *)v69);
          unsigned int v68 = *(_DWORD *)(a1 + 8);
          uint64_t v67 = *(char **)a1;
          uint64_t v11 = v88;
        }
        unsigned int v80 = v68 - 1;
        *(_DWORD *)(a1 + 8) = v80;
        int v81 = &v67[176 * v80];
        __int32 v82 = (char *)*((void *)v81 + 4);
        if (v82 != v81 + 48)
        {
          free(v82);
          uint64_t v67 = *(char **)a1;
          unsigned int v80 = *(_DWORD *)(a1 + 8);
        }
      }
      while (v65 != &v67[176 * v80]);
    }
  }
}

char *sub_1CCE42250(char **a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v4 >= v3)
  {
    unint64_t v7 = v4 + 1;
    BOOL v9 = (unint64_t)*a1 <= a2 && (unint64_t)&(*a1)[176 * v4] > a2;
    if (v9) {
      uint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2 - (void)*a1) >> 4);
    }
    else {
      uint64_t v10 = -1;
    }
    if (v4 == -1) {
      sub_1CD0A88F0(v7);
    }
    if (v3 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v11 = (2 * v3) | 1;
    if (v11 <= v7) {
      unint64_t v11 = v4 + 1;
    }
    if (v11 >= 0xFFFFFFFF) {
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    int v13 = (char *)malloc_type_malloc(176 * v12, 0x4065EBACuLL);
    if (!v13) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v14 = v13;
    unint64_t v15 = *a1;
    unsigned int v16 = *((_DWORD *)a1 + 2);
    if (v16)
    {
      uint64_t v30 = v10;
      BOOL v31 = v9;
      uint64_t v17 = 0;
      uint64_t v18 = 176 * v16;
      do
      {
        uint64_t v19 = &v14[v17];
        uint64_t v20 = &v15[v17];
        long long v21 = *(_OWORD *)&v15[v17];
        *(_OWORD *)(v19 + 12) = *(_OWORD *)&v15[v17 + 12];
        *(_OWORD *)uint64_t v19 = v21;
        int v22 = &v14[v17 + 48];
        *(void *)&v14[v17 + 32] = v22;
        *((void *)v19 + 5) = 0x1000000000;
        unsigned int v23 = *(_DWORD *)&v15[v17 + 40];
        if (v23) {
          BOOL v24 = v20 == v19;
        }
        else {
          BOOL v24 = 1;
        }
        if (!v24)
        {
          char v25 = (char *)*((void *)v20 + 4);
          if (v20 + 48 == v25)
          {
            if (v23 >= 0x11) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v22, v25, 8 * *(unsigned int *)&v15[v17 + 40]);
            *((_DWORD *)v19 + 10) = v23;
          }
          else
          {
            *((void *)v19 + 4) = v25;
            int v26 = *(_DWORD *)&v15[v17 + 44];
            *((_DWORD *)v19 + 10) = v23;
            *((_DWORD *)v19 + 11) = v26;
            *((void *)v20 + 4) = v20 + 48;
            *(_DWORD *)&v15[v17 + 44] = 0;
          }
          *((_DWORD *)v20 + 10) = 0;
        }
        v17 += 176;
      }
      while (v18 != v17);
      unint64_t v15 = *a1;
      unsigned int v27 = *((_DWORD *)a1 + 2);
      if (v27)
      {
        uint64_t v28 = 176 * v27;
        uint64_t v10 = v30;
        do
        {
          unsigned int v29 = *(char **)&v15[v28 - 144];
          if (&v15[v28 - 128] != v29) {
            free(v29);
          }
          v28 -= 176;
        }
        while (v28);
        unint64_t v15 = *a1;
        BOOL v9 = v31;
      }
      else
      {
        BOOL v9 = v31;
        uint64_t v10 = v30;
      }
    }
    if (v15 != (char *)(a1 + 2)) {
      free(v15);
    }
    *a1 = v14;
    *((_DWORD *)a1 + 3) = v12;
    if (v9) {
      return &v14[176 * v10];
    }
  }
  return (char *)v2;
}

void sub_1CCE424C4()
{
}

__n128 sub_1CCE424D8(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1F263FF28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCE42524(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F263FF28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CCE42554(uint64_t a1)
{
  uint64_t WalkerImpl = (void *)llvm::MemorySSA::getWalkerImpl(*(llvm::MemorySSA **)(*(void *)(a1 + 8) + 32));
  uint64_t v3 = sub_1CCD4E10C(WalkerImpl, **(void **)(a1 + 16));
  if (v3) {
    BOOL v4 = *(unsigned __int8 *)(v3 + 16) - 27 >= 0xFFFFFFFE;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v3 + 72);
  if (!v5) {
    return 0;
  }
  if (*(unsigned char *)(v5 + 16) == 84) {
    return *(void *)(v3 + 72);
  }
  return 0;
}

void sub_1CCE425C0()
{
}

void *sub_1CCE425D4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F263FF70;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCE4261C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F263FF70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CCE42648(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1CCE42650()
{
  char v4 = 0;
  uint64_t v5 = &v4;
  int v2 = 1;
  int v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable memcpyopt even when libcalls are disabled";
  v1.n128_u64[1] = 48;
  sub_1CD462280((llvm::cl::Option *)&unk_1EBCF7110, "enable-memcpyopt-without-libcalls", &v5, &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF7110, &dword_1CB82C000);
}

void sub_1CCE426E0(llvm *a1)
{
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  operator new();
}

uint64_t sub_1CCE42790(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF71E0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F263FFB8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF71E8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE426E0;
    v5[1] = &PassRegistry;
    char v4 = v5;
    std::__call_once(&qword_1EBCF71E8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CCE42840(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v311 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 112);
  if (v9) {
    BOOL v10 = (*(unsigned char *)(v9 + 17) & 4) != 0 || *(char *)(v9 + 13) < 0;
  }
  else {
    BOOL v10 = 0;
  }
  (*(void (**)(void **__return_ptr, uint64_t, BOOL, uint64_t))(*(void *)a3 + 560))(&__s1, a3, v10, 1);
  int v11 = (int)__s1;
  if (*(unsigned char **)v289 != &v289[16]) {
    free(*(void **)v289);
  }
  if (v11 && (*(unsigned char *)(a2[1] + 40) & 2) == 0 && (*(unsigned char *)(*a2 + 80) & 0xC) != 0)
  {
    v256[0] = v257;
    v256[1] = 0x1000000000;
    v257[33] = 0;
    v257[32] = 0;
    v257[34] = a5;
    v257[35] = 0;
    char v258 = 0;
    v259 = v263;
    v260 = v263;
    uint64_t v261 = 8;
    int v262 = 0;
    uint64_t v12 = a1 + 72;
    memset(&v263[64], 0, 24);
    __int16 v264 = 0;
    uint64_t v13 = *(void *)(*(void *)(a1 + 80) + 8);
    if (v13 != a1 + 72)
    {
      int v14 = 0;
      int64x2_t v238 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v240 = a1 + 72;
      while (1)
      {
        uint64_t v15 = v13 - 24;
        if (!v13) {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(void *)(v15 + 48);
        uint64_t v17 = v16 - 24;
        if (!v16) {
          uint64_t v17 = 0;
        }
        int v18 = *(unsigned __int8 *)(v17 + 16);
        if (v18 == 83) {
          uint64_t v19 = v17;
        }
        else {
          uint64_t v19 = 0;
        }
        if (!v16 || v18 != 83) {
          goto LABEL_41;
        }
        int v20 = *(_DWORD *)(v19 + 20);
        if ((v20 & 0x7FFFFFE) != 0)
        {
          uint64_t v21 = v20 & 0x7FFFFFF;
          if ((v20 & 0x7FFFFFF) != 0) {
            break;
          }
        }
LABEL_39:
        LODWORD(v24) = 0;
LABEL_40:
        v14 |= v24;
LABEL_41:
        uint64_t v13 = *(void *)(v13 + 8);
        if (v13 == v12) {
          goto LABEL_408;
        }
      }
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      BOOL v24 = 0;
      uint64_t v25 = 32 * v21;
      uint64_t v26 = v19 - 32 * v21;
      do
      {
        uint64_t v27 = v26;
        if ((v20 & 0x40000000) != 0) {
          uint64_t v27 = *(void *)(v19 - 8);
        }
        if (*(unsigned char *)(*(void *)(v27 + v23) + 16) != 16)
        {
          if (v24) {
            goto LABEL_39;
          }
          if ((v20 & 0x40000000) != 0)
          {
            uint64_t v30 = *(void *)(v19 - 8);
            uint64_t v31 = *(void *)(v30 + v23);
            if (*(unsigned char *)(v31 + 16) != 81) {
              goto LABEL_39;
            }
            BOOL v24 = *(llvm::BasicBlock **)(v31 + 40);
            uint64_t v29 = v30 + 32 * *(unsigned int *)(v19 + 60);
          }
          else
          {
            uint64_t v28 = *(void *)(v26 + v23);
            if (*(unsigned char *)(v28 + 16) != 81) {
              goto LABEL_39;
            }
            BOOL v24 = *(llvm::BasicBlock **)(v28 + 40);
            uint64_t v29 = v26 + 32 * *(unsigned int *)(v19 + 60);
          }
          if (v24 != *(llvm::BasicBlock **)(v29 + v22)) {
            goto LABEL_39;
          }
        }
        v23 += 32;
        v22 += 8;
      }
      while (v25 != v23);
      if (!v24) {
        goto LABEL_40;
      }
      if (llvm::BasicBlock::getSingleSuccessor(v24) != *(void *)(v19 + 40))
      {
        LODWORD(v24) = 0;
LABEL_345:
        uint64_t v12 = v240;
        goto LABEL_40;
      }
      int v236 = v14;
      uint64_t v32 = *(_DWORD *)(v19 + 20) & 0x7FFFFFF;
      v239 = operator new(8 * v32);
      bzero(v239, 8 * v32);
      if (v32 >= 2)
      {
        uint64_t v128 = v32;
        while ((*((_WORD *)v24 + 9) & 0x7FFF) == 0)
        {
          v239[v128 - 1] = v24;
          uint64_t SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v24);
          BOOL v24 = (llvm::BasicBlock *)SinglePredecessor;
          if (!SinglePredecessor) {
            goto LABEL_256;
          }
          int v130 = *(_DWORD *)(v19 + 20);
          uint64_t v131 = v130 & 0x7FFFFFF;
          if ((v130 & 0x7FFFFFF) == 0) {
            break;
          }
          uint64_t v132 = v19 - 32 * v131;
          uint64_t v133 = 32 * *(unsigned int *)(v19 + 60);
          while (1)
          {
            uint64_t v134 = v132;
            if ((v130 & 0x40000000) != 0) {
              uint64_t v134 = *(void *)(v19 - 8);
            }
            if (*(void *)(v134 + v133) == SinglePredecessor) {
              break;
            }
            v133 += 8;
            if (!--v131) {
              goto LABEL_255;
            }
          }
          BOOL v47 = v128-- < 3;
          if (v47) {
            goto LABEL_44;
          }
        }
LABEL_255:
        LODWORD(v24) = 0;
LABEL_256:
        int v14 = v236;
        goto LABEL_344;
      }
LABEL_44:
      void *v239 = v24;
      uint64_t v33 = &v239[v32];
      v252 = 0;
      v253 = 0;
      uint64_t v254 = 0;
      int v248 = 1;
      uint64_t v249 = 0;
      uint64_t v250 = 0;
      uint64_t v34 = v239;
      int v251 = 0;
      uint64_t v223 = a4;
      v235 = a2;
      while (1)
      {
        uint64_t v35 = (void *)*v34;
        uint64_t v36 = sub_1CBF73380(v19, *v34);
        long long v37 = (void *)v35[5];
        if (v37 == v35 + 5) {
          goto LABEL_258;
        }
        uint64_t v38 = v37 ? (uint64_t)(v37 - 3) : 0;
        unsigned int v39 = *(unsigned __int8 *)(v38 + 16) - 40;
        uint64_t v40 = v39 >= 0xFFFFFFF5 ? v38 : 0;
        if (!v37) {
          goto LABEL_258;
        }
        BOOL v41 = *(unsigned char *)(v40 + 16) == 30 && v39 >= 0xFFFFFFF5;
        if (!v41) {
          goto LABEL_258;
        }
        uint64_t v42 = v36;
        if ((*(_DWORD *)(v40 + 20) & 0x7FFFFFF) == 1)
        {
          int v43 = 32;
        }
        else
        {
          uint64_t v44 = *(unsigned int *)(v36 + 32);
          if (v44 > 0x40)
          {
            int v45 = 0;
            int64_t v46 = (unint64_t)(v44 + 63) >> 6;
            do
            {
              BOOL v47 = v46-- < 1;
              if (v47) {
                break;
              }
              unint64_t v48 = *(void *)(*(void *)(v36 + 24) + 8 * v46);
              v45 += __clz(v48);
            }
            while (!v48);
            int v49 = v44 | 0xFFFFFFC0;
            if ((v44 & 0x3F) == 0) {
              int v49 = 0;
            }
            if (v45 + v49 != v44) {
              goto LABEL_258;
            }
          }
          else if (*(void *)(v36 + 24))
          {
            goto LABEL_258;
          }
          uint64_t v42 = *(void *)(v40 - 96);
          if (*(void *)(v40 - 64) == *(void *)(v19 + 40)) {
            int v43 = 32;
          }
          else {
            int v43 = 33;
          }
        }
        if (!v42 || *(unsigned char *)(v42 + 16) != 81) {
          goto LABEL_258;
        }
        uint64_t v50 = *(void *)(v42 + 8);
        if (!v50 || *(void *)(v50 + 8) || v43 != (*(_WORD *)(v42 + 18) & 0x3F))
        {
          v237 &= 0xFFFFFFFFFFFFFF00;
LABEL_258:
          int v14 = v236;
LABEL_259:
          uint64_t v135 = 0;
          uint64_t v136 = 0;
          goto LABEL_260;
        }
        v51.n128_f64[0] = sub_1CCE4586C((uint64_t)&__s1, *(llvm::Instruction **)(v42 - 64), &v248);
        unsigned int v52 = *(_DWORD *)&v289[8];
        v246 = (llvm::BasicBlock *)v34;
        if (*(_DWORD *)&v289[8]) {
          break;
        }
        int v59 = 0;
        v237 &= 0xFFFFFFFFFFFFFF00;
LABEL_98:
        if (v290.i32[0] >= 0x41u && *(void *)&v289[16]) {
          MEMORY[0x1D25D9CB0](*(void *)&v289[16], 0x1000C8000313F17, v51);
        }
        if (!v59) {
          goto LABEL_258;
        }
        __s1 = v230;
        *(void *)v289 = v232;
        *(void *)&v289[8] = v234;
        *(void *)&v289[16] = v40;
        sub_1CD779800((uint64_t)&v284, &__s1, 4);
        if (v237)
        {
          unint64_t v255 = v237;
          sub_1CD7798B8((uint64_t)&__s1, (uint64_t)&v284, &v255);
        }
        if (v224)
        {
          unint64_t v255 = (unint64_t)v224;
          sub_1CD7798B8((uint64_t)&__s1, (uint64_t)&v284, &v255);
        }
        *(void *)v282 = 1;
        *(int64x2_t *)&v282[8] = v238;
        *(int64x2_t *)&v282[24] = v238;
        *(int64x2_t *)&v282[40] = v238;
        int64x2_t v283 = v238;
        sub_1CD77997C((uint64_t)v282, &v284);
        __s1 = v35;
        *(void *)v289 = 1;
        *(int64x2_t *)&v289[8] = v238;
        int64x2_t v290 = v238;
        int64x2_t v291 = v238;
        int64x2_t v292 = v238;
        sub_1CD65E534((unsigned int *)v289, (unsigned int *)v282);
        LOBYTE(v293) = 0;
        HIDWORD(v293) = 0;
        *(void *)&long long v294 = v237;
        *((void *)&v294 + 1) = v230;
        int v295 = v228;
        LODWORD(v297) = v231;
        uint64_t v296 = v227;
        *(void *)&long long v298 = v224;
        *((void *)&v298 + 1) = v232;
        int v299 = v226;
        unsigned int v301 = v233;
        uint64_t v300 = v229;
        *(void *)&long long v302 = v225;
        *((void *)&v302 + 1) = v234;
        v265 = __s1;
        uint64_t v266 = 1;
        int64x2_t v267 = v238;
        int64x2_t v268 = v238;
        int64x2_t v269 = v238;
        int64x2_t v270 = v238;
        sub_1CD65E534((unsigned int *)&v266, (unsigned int *)v289);
        long long v272 = v294;
        int v273 = v295;
        unsigned int v275 = v297;
        uint64_t v271 = v293;
        uint64_t v274 = v296;
        long long v276 = v298;
        int v277 = v299;
        unsigned int v279 = v301;
        uint64_t v278 = v300;
        LODWORD(v297) = 0;
        unsigned int v301 = 0;
        long long v280 = v302;
        char v281 = 1;
        if ((v289[0] & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)&v289[8], 8);
        }
        int v14 = v236;
        if ((v282[0] & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)&v282[8], 8);
        }
        if ((v284 & 1) == 0) {
          MEMORY[0x1D25D9CD0](*((void *)&v284 + 1), 8);
        }
        if (!v281) {
          goto LABEL_346;
        }
        uint64_t v63 = (char *)v265 + 40;
        for (uint64_t i = *((void *)v265 + 6); ; uint64_t i = *(void *)(i + 8))
        {
          if ((char *)i == v63)
          {
            int v66 = 0;
            uint64_t v67 = v252;
            unsigned int v68 = v253;
LABEL_120:
            uint64_t v69 = v246;
            HIDWORD(v271) = -373475417 * ((unint64_t)((char *)v68 - (char *)v67) >> 3);
            sub_1CCE45D4C((void **)&v252, (uint64_t *)&v265);
            goto LABEL_121;
          }
          unsigned int v65 = (void *)(i - 24);
          if (!i) {
            unsigned int v65 = 0;
          }
          __s1 = v65;
          *(void *)&long long v284 = 0;
          if ((sub_1CD4AC5C0((uint64_t)&v266, &__s1, &v284) & 1) == 0) {
            break;
          }
        }
        uint64_t v67 = v252;
        if (v252 != v253)
        {
          int v66 = 1;
          goto LABEL_136;
        }
        uint64_t v70 = (char *)v265 + 40;
        uint64_t v71 = (char *)*((void *)v265 + 6);
        if (v71 == (char *)v265 + 40)
        {
          unsigned int v68 = v252;
LABEL_229:
          LOBYTE(v271) = 1;
          int v66 = 3;
          goto LABEL_120;
        }
        while (2)
        {
          if (v71) {
            uint64_t v72 = (uint64_t)(v71 - 24);
          }
          else {
            uint64_t v72 = 0;
          }
          __s1 = (void *)v72;
          *(void *)&long long v284 = 0;
          if (sub_1CD4AC5C0((uint64_t)&v266, &__s1, &v284)) {
            goto LABEL_162;
          }
          uint64_t v73 = *(unsigned __int8 *)(v72 + 16) - 33;
          if (v73 > 0x37) {
            goto LABEL_146;
          }
          if (((1 << (*(unsigned char *)(v72 + 16) - 33)) & 0x8000000000041) != 0)
          {
            uint64_t v82 = *(void *)(v72 + 64);
            if (!v82 || (*(unsigned char *)(v82 + 17) & 0x30) == 0)
            {
              int v83 = *(_DWORD *)(v72 + 20);
              if (v83 < 0)
              {
                uint64_t v114 = v72 - 32 * (v83 & 0x7FFFFFF);
                uint64_t v117 = *(void *)(v114 - 8);
                uint64_t v115 = v114 - 8;
                uint64_t v116 = v117;
                if (v117)
                {
                  uint64_t v118 = -v116;
                  do
                  {
                    unsigned int v119 = *(_DWORD *)(*(void *)(v115 + v118) + 8);
                    BOOL v47 = v119 > 7;
                    int v120 = (1 << v119) & 0x83;
                    if (v47 || v120 == 0) {
                      goto LABEL_171;
                    }
                    v118 += 16;
                  }
                  while (v118);
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v72, 45) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction(v72, 44) & 1) == 0)
              {
                goto LABEL_171;
              }
            }
LABEL_146:
            int v74 = *(_DWORD *)(v72 + 20);
            if ((v74 & 0x40000000) != 0)
            {
              uint64_t v76 = *(uint64_t **)(v72 - 8);
              uint64_t v75 = v74 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v75 = v74 & 0x7FFFFFF;
              uint64_t v76 = (uint64_t *)(v72 - 32 * v75);
            }
            if (v75)
            {
              uint64_t v77 = 32 * v75;
              while (1)
              {
                if (*v76 && *(unsigned __int8 *)(*v76 + 16) >= 0x1Cu)
                {
                  uint64_t v79 = sub_1CD691908((uint64_t)&v266, *v76);
                  unsigned int v80 = &v267;
                  if (v266)
                  {
                    unsigned int v81 = 8;
                  }
                  else
                  {
                    unsigned int v80 = (int64x2_t *)v267.i64[0];
                    unsigned int v81 = v267.u32[2];
                  }
                  if ((int64x2_t *)((char *)v80 + 8 * v81) != (int64x2_t *)v79) {
                    break;
                  }
                }
                v76 += 4;
                v77 -= 32;
                if (!v77) {
                  goto LABEL_162;
                }
              }
LABEL_240:
              int v66 = 3;
              int v14 = v236;
              goto LABEL_136;
            }
LABEL_162:
            uint64_t v71 = (char *)*((void *)v71 + 1);
            if (v71 == v70)
            {
              uint64_t v67 = v252;
              unsigned int v68 = v253;
              int v14 = v236;
              goto LABEL_229;
            }
            continue;
          }
          break;
        }
        if (v73 == 27)
        {
          if ((*(_WORD *)(v72 + 18) & 0x301) == 0) {
            goto LABEL_146;
          }
        }
        else if (((1 << (*(unsigned char *)(v72 + 16) - 33)) & 0x808001D0000010) == 0)
        {
          goto LABEL_146;
        }
LABEL_171:
        __pa = v33;
        uint64_t v84 = *((void *)&v272 + 1);
        uint64_t v85 = *(void *)(v72 + 40);
        uint64_t v86 = *(void *)(*((void *)&v272 + 1) + 40);
        if (v85 == v86)
        {
          int v87 = *(__int16 *)(v85 + 18);
          if ((v87 & 0x80000000) == 0)
          {
            uint64_t v108 = *(void *)(v85 + 48);
            if (v108 != v85 + 40)
            {
              int v109 = 0;
              do
              {
                uint64_t v110 = v108 - 24;
                if (!v108) {
                  uint64_t v110 = 0;
                }
                *(_DWORD *)(v110 + 56) = v109++;
                uint64_t v108 = *(void *)(v108 + 8);
              }
              while (v108 != v85 + 40);
            }
            *(_WORD *)(v85 + 18) = v87 | 0x8000;
          }
          if (*(_DWORD *)(v72 + 56) < *(_DWORD *)(v84 + 56))
          {
LABEL_187:
            uint64_t v96 = *((void *)&v276 + 1);
            uint64_t v97 = *(void *)(v72 + 40);
            uint64_t v98 = *(void *)(*((void *)&v276 + 1) + 40);
            if (v97 != v98) {
              goto LABEL_191;
            }
            int v99 = *(__int16 *)(v97 + 18);
            if ((v99 & 0x80000000) == 0)
            {
              uint64_t v111 = *(void *)(v97 + 48);
              if (v111 != v97 + 40)
              {
                int v112 = 0;
                do
                {
                  uint64_t v113 = v111 - 24;
                  if (!v111) {
                    uint64_t v113 = 0;
                  }
                  *(_DWORD *)(v113 + 56) = v112++;
                  uint64_t v111 = *(void *)(v111 + 8);
                }
                while (v111 != v97 + 40);
              }
              *(_WORD *)(v97 + 18) = v99 | 0x8000;
            }
            if (*(_DWORD *)(v72 + 56) < *(_DWORD *)(v96 + 56))
            {
              uint64_t v33 = __pa;
            }
            else
            {
LABEL_191:
              uint64_t v100 = *(void *)(v96 - 32);
              uint64_t v101 = sub_1CB83544C(*(void *)(*(void *)(v98 + 56) + 40) + 272, *(void *)v96);
              if (v102 == 1) {
                unint64_t v103 = -2;
              }
              else {
                unint64_t v103 = (unint64_t)(v101 + 7) >> 3;
              }
              llvm::Instruction::getAAMetadata((uint64_t ***)v96, &v282[16]);
              *(void *)v282 = v100;
              *(void *)&v282[8] = v103;
              long long v286 = *(_OWORD *)&v282[32];
              long long v285 = *(_OWORD *)&v282[16];
              long long v284 = *(_OWORD *)v282;
              char v287 = 1;
              __s1 = (void *)1;
              uint64_t v104 = 8;
              do
              {
                uint64_t v105 = &v289[v104 - 8];
                *(_OWORD *)uint64_t v105 = xmmword_1CFAC3060;
                *((_OWORD *)v105 + 1) = xmmword_1CFAC3060;
                v104 += 40;
              }
              while (v105 + 40 != (unsigned char *)&v303);
              v303 = &v308;
              uint64_t v304 = 0;
              v305 = v307;
              uint64_t v306 = 0x400000000;
              v308 = &unk_1F2600DB8;
              uint64_t v106 = 504;
              uint64_t v309 = 1;
              do
              {
                *(void *)&v289[v106 - 8] = -4096;
                v106 += 16;
              }
              while (v106 != 632);
              char ModRefInfo = llvm::AAResults::getModRefInfo(a4, (llvm::Instruction *)v72, &v284, (uint64_t)&__s1);
              if ((v309 & 1) == 0) {
                MEMORY[0x1D25D9CD0](v310, 8);
              }
              if (v305 != v307) {
                free(v305);
              }
              if ((__s1 & 1) == 0) {
                MEMORY[0x1D25D9CD0](*(void *)v289, 8);
              }
              uint64_t v33 = __pa;
              if ((ModRefInfo & 2) != 0) {
                goto LABEL_240;
              }
            }
            goto LABEL_146;
          }
        }
        uint64_t v88 = *(void *)(v84 - 32);
        uint64_t v89 = sub_1CB83544C(*(void *)(*(void *)(v86 + 56) + 40) + 272, *(void *)v84);
        if (v90 == 1) {
          unint64_t v91 = -2;
        }
        else {
          unint64_t v91 = (unint64_t)(v89 + 7) >> 3;
        }
        llvm::Instruction::getAAMetadata((uint64_t ***)v84, &v282[16]);
        *(void *)v282 = v88;
        *(void *)&v282[8] = v91;
        long long v286 = *(_OWORD *)&v282[32];
        long long v285 = *(_OWORD *)&v282[16];
        long long v284 = *(_OWORD *)v282;
        char v287 = 1;
        __s1 = (void *)1;
        uint64_t v92 = 8;
        do
        {
          long long v93 = &v289[v92 - 8];
          *(_OWORD *)long long v93 = xmmword_1CFAC3060;
          *((_OWORD *)v93 + 1) = xmmword_1CFAC3060;
          v92 += 40;
        }
        while (v93 + 40 != (unsigned char *)&v303);
        v303 = &v308;
        uint64_t v304 = 0;
        v305 = v307;
        uint64_t v306 = 0x400000000;
        v308 = &unk_1F2600DB8;
        uint64_t v94 = 504;
        uint64_t v309 = 1;
        do
        {
          *(void *)&v289[v94 - 8] = -4096;
          v94 += 16;
        }
        while (v94 != 632);
        char v95 = llvm::AAResults::getModRefInfo(a4, (llvm::Instruction *)v72, &v284, (uint64_t)&__s1);
        if ((v309 & 1) == 0) {
          MEMORY[0x1D25D9CD0](v310, 8);
        }
        if (v305 != v307) {
          free(v305);
        }
        if (__s1)
        {
          if ((v95 & 2) != 0) {
            goto LABEL_241;
          }
          goto LABEL_187;
        }
        MEMORY[0x1D25D9CD0](*(void *)v289, 8);
        if ((v95 & 2) == 0) {
          goto LABEL_187;
        }
LABEL_241:
        int v66 = 3;
        int v14 = v236;
        uint64_t v33 = __pa;
LABEL_136:
        uint64_t v69 = v246;
LABEL_121:
        if (v281)
        {
          if (v279 >= 0x41 && v278) {
            MEMORY[0x1D25D9CB0](v278, 0x1000C8000313F17);
          }
          if (v275 >= 0x41 && v274) {
            MEMORY[0x1D25D9CB0](v274, 0x1000C8000313F17);
          }
          if ((v266 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v267.i64[0], 8);
          }
        }
        if (v66 != 3 && v66)
        {
LABEL_346:
          unsigned int v231 = 0;
          unsigned int v233 = 0;
          goto LABEL_259;
        }
        unsigned int v231 = 0;
        unsigned int v233 = 0;
        uint64_t v34 = (uint64_t *)((char *)v69 + 8);
        if (v34 == v33)
        {
          if (v252 == v253)
          {
            unsigned int v231 = 0;
            unsigned int v233 = 0;
            uint64_t v135 = 0;
            uint64_t v136 = 0;
          }
          else
          {
            sub_1CCE460B8((uint64_t)v252, v253, 126 - 2 * __clz(0xD37A6F4DE9BD37A7 * (v253 - v252)), 1);
            unsigned int v204 = v252;
            v247 = (llvm::BasicBlock *)v253;
            if (v252 != v253)
            {
              uint64_t v205 = 0;
              v241 = 0;
              uint64_t v135 = 0;
              std::string v206 = 0;
              while (1)
              {
                if (v205)
                {
                  std::string v207 = v205[1];
                  if (*(v207 - 20) == *((_DWORD *)v204 + 26) && *(v207 - 10) == *((_DWORD *)v204 + 36)) {
                    break;
                  }
                }
LABEL_378:
                if (v135 >= v206)
                {
                  unint64_t v213 = 0xAAAAAAAAAAAAAAABLL * ((v135 - v241) >> 3) + 1;
                  if (v213 > 0xAAAAAAAAAAAAAAALL) {
                    abort();
                  }
                  if (0x5555555555555556 * ((v206 - v241) >> 3) > v213) {
                    unint64_t v213 = 0x5555555555555556 * ((v206 - v241) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((v206 - v241) >> 3) >= 0x555555555555555) {
                    unint64_t v213 = 0xAAAAAAAAAAAAAAALL;
                  }
                  if (v213 > 0xAAAAAAAAAAAAAAALL) {
                    sub_1CB833614();
                  }
                  uint64_t v214 = 3 * v213;
                  uint64_t v215 = (char *)operator new(24 * v213);
                  int v216 = &v215[8 * ((v135 - v241) >> 3)];
                  *((void *)v216 + 1) = 0;
                  *((void *)v216 + 2) = 0;
                  *(void *)int v216 = 0;
                  if (v135 == v241)
                  {
                    v218 = &v215[8 * ((v135 - v241) >> 3)];
                  }
                  else
                  {
                    v217 = v135;
                    v218 = &v215[8 * ((v135 - v241) >> 3)];
                    do
                    {
                      *((void *)v218 - 3) = 0;
                      *((void *)v218 - 2) = 0;
                      v218 -= 24;
                      *((void *)v218 + 2) = 0;
                      long long v219 = *(_OWORD *)(v217 - 24);
                      v217 -= 24;
                      *(_OWORD *)v218 = v219;
                      *((void *)v218 + 2) = *((void *)v217 + 2);
                      *(void *)v217 = 0;
                      *((void *)v217 + 1) = 0;
                      *((void *)v217 + 2) = 0;
                    }
                    while (v217 != v241);
                    do
                    {
                      v135 -= 24;
                      sub_1CCE457AC((void **)v135);
                    }
                    while (v135 != v241);
                  }
                  std::string v206 = &v215[8 * v214];
                  uint64_t v135 = v216 + 24;
                  if (v241) {
                    operator delete(v241);
                  }
                  v241 = v218;
                }
                else
                {
                  *(void *)uint64_t v135 = 0;
                  *((void *)v135 + 1) = 0;
                  *((void *)v135 + 2) = 0;
                  v135 += 24;
                }
                uint64_t v205 = (void **)(v135 - 24);
LABEL_396:
                sub_1CCE45D4C(v205, v204);
                v204 += 23;
                if (v204 == (uint64_t *)v247) {
                  goto LABEL_400;
                }
              }
              *(_DWORD *)v289 = *(v207 - 16);
              if (*(_DWORD *)v289 > 0x40u) {
                operator new[]();
              }
              __s1 = (void *)*((void *)v207 - 9);
              llvm::APInt::operator+=((uint64_t)&__s1, (uint64_t)(*(v207 - 4) + ((int)*(v207 - 4) < 0 ? 7 : 0)) >> 3);
              uint64_t v208 = *(unsigned int *)v289;
              uint64_t v209 = __s1;
              *(_DWORD *)v289 = 0;
              if (v208 > 0x40)
              {
                if (!memcmp(__s1, (const void *)v204[14], ((unint64_t)(v208 + 63) >> 3) & 0x3FFFFFF8)) {
                  goto LABEL_361;
                }
                BOOL v210 = 0;
                a4 = v223;
              }
              else
              {
                if (__s1 != (void *)v204[14])
                {
                  BOOL v210 = 0;
                  a4 = v223;
                  goto LABEL_374;
                }
LABEL_361:
                LODWORD(v266) = *(v207 - 6);
                if (v266 > 0x40) {
                  operator new[]();
                }
                v265 = (void *)*((void *)v207 - 4);
                llvm::APInt::operator+=((uint64_t)&v265, (uint64_t)(*(v207 - 4) + ((int)*(v207 - 4) < 0 ? 7 : 0)) >> 3);
                uint64_t v211 = v266;
                v212 = v265;
                LODWORD(v266) = 0;
                if (v211 > 0x40)
                {
                  BOOL v210 = memcmp(v265, (const void *)v204[19], ((unint64_t)(v211 + 63) >> 3) & 0x3FFFFFF8) == 0;
                  if (v212)
                  {
                    MEMORY[0x1D25D9CB0](v212, 0x1000C8000313F17);
                    if (v266 >= 0x41)
                    {
                      if (v265) {
                        MEMORY[0x1D25D9CB0](v265, 0x1000C8000313F17);
                      }
                    }
                  }
                }
                else
                {
                  BOOL v210 = v265 == (void *)v204[19];
                }
                BOOL v41 = v208 >= 0x41;
                a4 = v223;
                if (!v41)
                {
LABEL_374:
                  if (*(_DWORD *)v289 >= 0x41u && __s1) {
                    MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                  }
                  if (v210) {
                    goto LABEL_396;
                  }
                  goto LABEL_378;
                }
              }
              if (v209) {
                MEMORY[0x1D25D9CB0](v209, 0x1000C8000313F17);
              }
              goto LABEL_374;
            }
            uint64_t v135 = 0;
            v241 = 0;
LABEL_400:
            uint64_t v136 = v241;
            unint64_t v220 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v135 - v241) >> 3));
            if (v135 == v241) {
              uint64_t v221 = 0;
            }
            else {
              uint64_t v221 = v220;
            }
            sub_1CCE4DDB4((uint64_t)v241, (uint64_t *)v135, v221, 1);
            unsigned int v231 = 0;
            unsigned int v233 = 0;
          }
          int v14 = v236;
LABEL_260:
          MEMORY[0x1D25D9CD0](v249, 8);
          sub_1CCE457AC((void **)&v252);
          for (j = v136; j != v135; j += 24)
          {
            if (0xD37A6F4DE9BD37A7 * ((uint64_t)(*((void *)j + 1) - *(void *)j) >> 3) >= 2)
            {
              uint64_t v138 = (uint64_t ****)*((void *)v135 - 3);
              uint64_t v139 = (uint64_t ****)*((void *)v135 - 2);
              uint64_t v140 = ((char *)v139 - (char *)v138) / 184;
              __s1 = &v289[16];
              *(_OWORD *)v289 = xmmword_1CDB15990;
              int __pb = v140;
              if ((char *)v139 - (char *)v138 == 184)
              {
                int v141 = *v138;
                if ((*((unsigned char *)*v138 + 23) & 0x10) != 0)
                {
                  uint64_t v142 = ***v141;
                  uint64_t v143 = *(void *)(v142 + 152);
                  uint64_t v144 = *(unsigned int *)(v142 + 168);
                  if (v144)
                  {
                    LODWORD(v145) = (v144 - 1) & ((v141 >> 4) ^ (v141 >> 9));
                    uint64_t v146 = (uint64_t ****)(v143 + 16 * v145);
                    uint64_t v147 = *v146;
                    if (*v146 != v141)
                    {
                      int v148 = 1;
                      do
                      {
                        if (v147 == (uint64_t ***)-4096) {
                          goto LABEL_297;
                        }
                        int v149 = v145 + v148++;
                        uint64_t v145 = v149 & (v144 - 1);
                        uint64_t v147 = *(uint64_t ****)(v143 + 16 * v145);
                      }
                      while (v147 != v141);
                      uint64_t v146 = (uint64_t ****)(v143 + 16 * v145);
                    }
                  }
                  else
                  {
LABEL_297:
                    uint64_t v146 = (uint64_t ****)(v143 + 16 * v144);
                  }
                  uint64_t v173 = v146[1];
                  uint64_t v174 = (uint64_t)*v173;
                  v172 = (char *)(v173 + 2);
                  uint64_t v171 = v174;
                }
                else
                {
                  uint64_t v171 = 0;
                  v172 = &byte_1CFBCE98E;
                }
              }
              else
              {
                if (v139 == v138) {
                  goto LABEL_296;
                }
                int v150 = 0;
                uint64_t v151 = v138;
                do
                {
                  uint64_t v152 = *v151;
                  if ((*((unsigned char *)*v151 + 23) & 0x10) != 0)
                  {
                    uint64_t v153 = ***v152;
                    uint64_t v154 = *(void *)(v153 + 152);
                    uint64_t v155 = *(unsigned int *)(v153 + 168);
                    if (v155)
                    {
                      LODWORD(v156) = (v155 - 1) & ((v152 >> 4) ^ (v152 >> 9));
                      uint64_t v157 = v154 + 16 * v156;
                      uint64_t v158 = *(uint64_t ****)v157;
                      if (*(uint64_t ****)v157 != v152)
                      {
                        int v159 = 1;
                        do
                        {
                          if (v158 == (uint64_t ***)-4096) {
                            goto LABEL_281;
                          }
                          int v160 = v156 + v159++;
                          uint64_t v156 = v160 & (v155 - 1);
                          uint64_t v158 = *(uint64_t ****)(v154 + 16 * v156);
                        }
                        while (v158 != v152);
                        uint64_t v157 = v154 + 16 * v156;
                      }
                    }
                    else
                    {
LABEL_281:
                      uint64_t v157 = v154 + 16 * v155;
                    }
                    uint64_t v161 = **(void **)(v157 + 8);
                  }
                  else
                  {
                    LODWORD(v161) = 0;
                  }
                  v150 += v161;
                  v151 += 23;
                }
                while (v151 != &v138[23 * v140]);
                if (!v150)
                {
LABEL_296:
                  uint64_t v171 = 0;
                  v172 = "";
                }
                else
                {
                  if ((unint64_t)(v140 + v150 - 1) >= 0x11) {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  }
                  uint64_t v162 = *v138;
                  if ((*((unsigned char *)*v138 + 23) & 0x10) != 0)
                  {
                    uint64_t v163 = ***v162;
                    uint64_t v164 = *(void *)(v163 + 152);
                    uint64_t v165 = *(unsigned int *)(v163 + 168);
                    if (v165)
                    {
                      LODWORD(v166) = (v165 - 1) & ((v162 >> 4) ^ (v162 >> 9));
                      std::string::size_type v167 = (uint64_t ****)(v164 + 16 * v166);
                      v168 = *v167;
                      if (*v167 != v162)
                      {
                        int v169 = 1;
                        do
                        {
                          if (v168 == (uint64_t ***)-4096) {
                            goto LABEL_299;
                          }
                          int v170 = v166 + v169++;
                          uint64_t v166 = v170 & (v165 - 1);
                          v168 = *(uint64_t ****)(v164 + 16 * v166);
                        }
                        while (v168 != v162);
                        std::string::size_type v167 = (uint64_t ****)(v164 + 16 * v166);
                      }
                    }
                    else
                    {
LABEL_299:
                      std::string::size_type v167 = (uint64_t ****)(v164 + 16 * v165);
                    }
                    uint64_t v175 = v167[1];
                    size_t v178 = (size_t)*v175;
                    unint64_t v177 = (char *)(v175 + 2);
                    size_t v176 = v178;
                  }
                  else
                  {
                    size_t v176 = 0;
                    unint64_t v177 = &byte_1CFBCE98E;
                  }
                  uint64_t v179 = *(void *)v289;
                  if (*(void *)&v289[8] < *(void *)v289 + v176) {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  }
                  if (v176)
                  {
                    memcpy((char *)__s1 + *(void *)v289, v177, v176);
                    uint64_t v179 = *(void *)v289;
                  }
                  uint64_t v171 = v179 + v176;
                  *(void *)v289 = v171;
                  if (__pb >= 2)
                  {
                    for (uint64_t k = 1; k != __pb; ++k)
                    {
                      int v181 = v138[23 * k];
                      if ((*((unsigned char *)v181 + 23) & 0x10) != 0)
                      {
                        uint64_t v182 = ***v181;
                        uint64_t v183 = *(void *)(v182 + 152);
                        uint64_t v184 = *(unsigned int *)(v182 + 168);
                        unsigned int v185 = v181 >> 4;
                        if (v184)
                        {
                          LODWORD(v186) = (v184 - 1) & (v185 ^ (v181 >> 9));
                          uint64_t v187 = v183 + 16 * v186;
                          v188 = *(uint64_t ****)v187;
                          if (*(uint64_t ****)v187 != v181)
                          {
                            int v189 = 1;
                            do
                            {
                              if (v188 == (uint64_t ***)-4096) {
                                goto LABEL_313;
                              }
                              int v190 = v186 + v189++;
                              uint64_t v186 = v190 & (v184 - 1);
                              v188 = *(uint64_t ****)(v183 + 16 * v186);
                            }
                            while (v188 != v181);
                            uint64_t v187 = v183 + 16 * v186;
                          }
                        }
                        else
                        {
LABEL_313:
                          uint64_t v187 = v183 + 16 * v184;
                        }
                        if (**(void **)(v187 + 8))
                        {
                          if (*(void *)&v289[8] < (unint64_t)(v171 + 1)) {
                            llvm::SmallVectorBase<unsigned long long>::grow_pod();
                          }
                          *((unsigned char *)__s1 + v171) = 43;
                          uint64_t v191 = ++*(void *)v289;
                          if ((*((unsigned char *)v181 + 23) & 0x10) != 0)
                          {
                            uint64_t v192 = ***v181;
                            uint64_t v193 = *(void *)(v192 + 152);
                            uint64_t v194 = *(unsigned int *)(v192 + 168);
                            if (v194)
                            {
                              LODWORD(v195) = (v194 - 1) & (v185 ^ (v181 >> 9));
                              long long v196 = (uint64_t ****)(v193 + 16 * v195);
                              v197 = *v196;
                              if (*v196 != v181)
                              {
                                int v198 = 1;
                                do
                                {
                                  if (v197 == (uint64_t ***)-4096) {
                                    goto LABEL_324;
                                  }
                                  int v199 = v195 + v198++;
                                  uint64_t v195 = v199 & (v194 - 1);
                                  v197 = *(uint64_t ****)(v193 + 16 * v195);
                                }
                                while (v197 != v181);
                                long long v196 = (uint64_t ****)(v193 + 16 * v195);
                              }
                            }
                            else
                            {
LABEL_324:
                              long long v196 = (uint64_t ****)(v193 + 16 * v194);
                            }
                            long long v200 = v196[1];
                            size_t v203 = (size_t)*v200;
                            unint64_t v202 = (char *)(v200 + 2);
                            size_t v201 = v203;
                          }
                          else
                          {
                            size_t v201 = 0;
                            unint64_t v202 = &byte_1CFBCE98E;
                          }
                          if (*(void *)&v289[8] < v201 + v191) {
                            llvm::SmallVectorBase<unsigned long long>::grow_pod();
                          }
                          if (v201)
                          {
                            memcpy((char *)__s1 + v191, v202, v201);
                            uint64_t v191 = *(void *)v289;
                          }
                          uint64_t v171 = v191 + v201;
                          *(void *)v289 = v171;
                        }
                      }
                    }
                  }
                  v172 = (char *)__s1;
                }
              }
              v290.i64[1] = (uint64_t)v172;
              v291.i64[0] = v171;
              v268.i16[0] = 261;
              v265 = v172;
              uint64_t v266 = v171;
              operator new();
            }
          }
          LODWORD(v24) = 0;
          if (v136)
          {
            while (v135 != v136)
            {
              v135 -= 24;
              sub_1CCE457AC((void **)v135);
            }
            operator delete(v136);
          }
          a2 = v235;
LABEL_344:
          operator delete(v239);
          goto LABEL_345;
        }
      }
      v51.n128_f64[0] = sub_1CCE4586C((uint64_t)&v284, *(llvm::Instruction **)(v42 - 32), &v248);
      unsigned int v53 = v285;
      if (!v285)
      {
        v237 &= 0xFFFFFFFFFFFFFF00;
        if (v286 < 0x41)
        {
          int v59 = 0;
          unsigned int v52 = v226;
          uint64_t v42 = v234;
        }
        else
        {
          if (*((void *)&v285 + 1)) {
            MEMORY[0x1D25D9CB0](*((void *)&v285 + 1), 0x1000C8000313F17, v51.n128_f64[0]);
          }
          int v59 = 0;
          unsigned int v52 = v226;
          uint64_t v42 = v234;
        }
        unsigned int v60 = v228;
        uint64_t v61 = v227;
        goto LABEL_97;
      }
      uint64_t v54 = *(void *)(*(void *)(*(void *)(v42 + 40) + 56) + 40) + 272;
      v224 = __s1;
      v232 = *(void **)v289;
      unsigned int v233 = v290.i32[0];
      uint64_t v229 = *(void *)&v289[16];
      v290.i32[0] = 0;
      long long v242 = v284;
      std::string __p = v33;
      uint64_t v55 = v286;
      uint64_t v56 = *((void *)&v285 + 1);
      LODWORD(v286) = 0;
      unsigned int v58 = sub_1CB83544C(v54, **(void **)(v42 - 64));
      if (v57 == 1) {
      unint64_t v225 = v225 & 0xFFFFFFFF00000000 | v58;
      }
      if (v53 == v52)
      {
        if (v55 > 0x40)
        {
          unsigned int v122 = v233 - 1;
          uint64_t v123 = v229;
          if (v233 >= 0x41) {
            uint64_t v123 = *(void *)(v229 + 8 * (v122 >> 6));
          }
          uint64_t v124 = *(void *)(v56 + 8 * ((v55 - 1) >> 6)) & (1 << (v55 - 1));
          if ((v124 != 0) == ((v123 & (1 << v122)) != 0))
          {
            unint64_t v125 = ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8;
            while (v125)
            {
              unint64_t v126 = *(void *)(v56 - 8 + v125);
              unint64_t v127 = *(void *)(v229 - 8 + v125);
              v125 -= 8;
              if (v126 != v127)
              {
                if (v126 <= v127) {
                  goto LABEL_91;
                }
                goto LABEL_84;
              }
            }
            goto LABEL_84;
          }
          if (!v124)
          {
LABEL_84:
            int v59 = 1;
            unsigned int v60 = v52;
            unint64_t v237 = (unint64_t)v224;
LABEL_95:
            uint64_t v62 = v232;
            uint64_t v61 = v229;
            unsigned int v231 = v233;
            v232 = (void *)*((void *)&v242 + 1);
            v224 = (void *)v242;
            uint64_t v229 = v56;
            v230 = v62;
            unsigned int v233 = v55;
            goto LABEL_96;
          }
        }
        else if (v56 << -(char)v55 >> -(char)v55 >= v229 << -(char)v55 >> -(char)v55)
        {
          goto LABEL_84;
        }
      }
      else if (v53 >= v52)
      {
        int v59 = 1;
        unsigned int v60 = v52;
        unint64_t v237 = (unint64_t)v224;
        unsigned int v52 = v53;
        goto LABEL_95;
      }
LABEL_91:
      int v59 = 1;
      unsigned int v60 = v53;
      v230 = (void *)*((void *)&v242 + 1);
      unint64_t v237 = v242;
      uint64_t v61 = v56;
      unsigned int v231 = v55;
LABEL_96:
      a4 = v223;
      uint64_t v33 = __p;
LABEL_97:
      uint64_t v227 = v61;
      int v228 = v60;
      uint64_t v234 = v42;
      int v226 = v52;
      goto LABEL_98;
    }
    LOBYTE(v14) = 0;
LABEL_408:
    sub_1CC2930C0((uint64_t)v256);
  }
  else
  {
    LOBYTE(v14) = 0;
  }
  return v14 & 1;
}

void sub_1CCE45218()
{
}

void sub_1CCE45258(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE45290(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CCE45320(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2) & 1) == 0)
  {
    uint64_t v5 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (v6 == v7)
    {
LABEL_6:
      uint64_t v8 = 0;
    }
    else
    {
      while (*(char **)v6 != llvm::TargetLibraryInfoWrapperPass::ID)
      {
        v6 += 16;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v8 = *(void *)(v6 + 8);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 96))(v8, llvm::TargetLibraryInfoWrapperPass::ID);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v10 = v9 + 32;
    if (!*(unsigned char *)(v9 + 232))
    {
      uint64_t v11 = *(void *)(a2 + 40) + 216;
      __int16 v23 = 260;
      v22[0] = v11;
      llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v22);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      int v35 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      *(void *)&long long v12 = -1;
      *((void *)&v12 + 1) = -1;
      *(_OWORD *)__src = v12;
      long long v27 = v12;
      long long v28 = v12;
      long long v29 = v12;
      long long v30 = v12;
      long long v31 = v12;
      *(_OWORD *)uint64_t v32 = v12;
      *(void *)&v32[13] = -1;
      sub_1CC153974((uint64_t)__src, (int *)__p);
      sub_1CD4D04B8(v10, (uint64_t)__src);
      sub_1CD4CFA4C((uint64_t *)__src);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1CC1569E8(__src, v10);
  }
  return 0;
}

void **sub_1CCE457AC(void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_DWORD *)v3 - 6) >= 0x41u)
        {
          uint64_t v5 = *((void *)v3 - 4);
          if (v5) {
            MEMORY[0x1D25D9CB0](v5, 0x1000C8000313F17);
          }
        }
        if (*((_DWORD *)v3 - 16) >= 0x41u)
        {
          uint64_t v6 = *((void *)v3 - 9);
          if (v6) {
            MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
          }
        }
        if ((*(v3 - 176) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*((void *)v3 - 21), 8);
        }
        v3 -= 184;
      }
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double sub_1CCE4586C(uint64_t a1, llvm::Instruction *this, _DWORD *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!this) {
    goto LABEL_42;
  }
  if (*((unsigned char *)this + 16) != 60) {
    goto LABEL_42;
  }
  uint64_t v6 = (const llvm::BasicBlock *)*((void *)this + 5);
  if (llvm::Instruction::isUsedOutsideOfBlock(this, v6) || (*((_WORD *)this + 9) & 0x381) != 0) {
    goto LABEL_42;
  }
  uint64_t v7 = (unsigned char *)*((void *)this - 4);
  unsigned int v8 = *(_DWORD *)(*(void *)v7 + 8);
  if ((v8 & 0xFE) == 0x12) {
    unsigned int v8 = *(_DWORD *)(**(void **)(*(void *)v7 + 16) + 8);
  }
  if (v8 >= 0x100
    || (uint64_t v9 = *(void *)(*((void *)v6 + 7) + 40),
        uint64_t v10 = (llvm::DataLayout *)(v9 + 272),
        (llvm::isDereferenceableAndAlignedPointer(*((void *)this - 4), *(void *)this, 0, v9 + 272, 0, 0, 0) & 1) == 0))
  {
LABEL_42:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 32) = 1;
    return result;
  }
  unsigned int v11 = *(_DWORD *)(*(void *)v7 + 8);
  if ((v11 & 0xFE) == 0x12) {
    unsigned int v11 = *(_DWORD *)(**(void **)(*(void *)v7 + 16) + 8);
  }
  if (v11 < 0x100) {
    goto LABEL_20;
  }
  unsigned int v12 = v11 >> 8;
  uint64_t v13 = *(unsigned int *)(v9 + 512);
  uint64_t v14 = *(void *)(v9 + 504);
  if (v13)
  {
    uint64_t v14 = *(void *)(v9 + 504);
    unint64_t v15 = *(unsigned int *)(v9 + 512);
    do
    {
      unint64_t v16 = v15 >> 1;
      uint64_t v17 = v14 + 16 * (v15 >> 1);
      unsigned int v18 = *(_DWORD *)(v17 + 8);
      uint64_t v19 = v17 + 16;
      v15 += ~(v15 >> 1);
      if (v18 < v12) {
        uint64_t v14 = v19;
      }
      else {
        unint64_t v15 = v16;
      }
    }
    while (v15);
  }
  if (v14 == *(void *)(v9 + 504) + 16 * v13 || *(_DWORD *)(v14 + 8) != v12) {
LABEL_20:
  }
    uint64_t v14 = *(void *)(v9 + 504);
  unsigned int v38 = *(_DWORD *)(v14 + 4);
  if (v38 > 0x40) {
    operator new[]();
  }
  __src = 0;
  if (v7[16] == 62) {
    uint64_t v20 = v7;
  }
  else {
    uint64_t v20 = 0;
  }
  if (!v20) {
    goto LABEL_47;
  }
  if (!llvm::Instruction::isUsedOutsideOfBlock((llvm::Instruction *)v20, *((const llvm::BasicBlock **)this + 5)))
  {
    int v22 = *((_DWORD *)v20 + 5);
    if ((v22 & 0x40000000) != 0)
    {
      BOOL v24 = (unsigned char *)*((void *)v20 - 1);
      uint64_t v23 = v22 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v23 = v22 & 0x7FFFFFF;
      BOOL v24 = &v20[-32 * v23];
    }
    uint64_t v40 = v42;
    uint64_t v41 = 0x600000000;
    unint64_t v25 = 32 * v23 - 32;
    if (v25 >= 0xC1) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v26 = (llvm::Constant **)v42;
    if (v23 != 1)
    {
      long long v27 = (uint64_t *)(v24 + 32);
      long long v28 = v42;
      unint64_t v29 = v25;
      do
      {
        uint64_t v30 = *v27;
        v27 += 4;
        *v28++ = v30;
        v29 -= 32;
      }
      while (v29);
      uint64_t v26 = (llvm::Constant **)v40;
    }
    LODWORD(v41) = v25 >> 5;
    uint64_t v31 = 24;
    if (v20[16] == 62) {
      uint64_t v31 = 64;
    }
    char v32 = llvm::GEPOperator::accumulateConstantOffset(*(void *)&v20[v31], v26, (v25 >> 5), v10, (llvm::APInt *)&__src, 0, v21);
    if (v40 == v42)
    {
      if ((v32 & 1) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      free(v40);
      if ((v32 & 1) == 0) {
        goto LABEL_38;
      }
    }
    uint64_t v7 = *(unsigned char **)&v20[-32 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF)];
LABEL_47:
    uint64_t v39 = v7;
    sub_1CD5092D4((uint64_t)&v40, (uint64_t)(a3 + 2), &v39, a3);
    if (v42[0]) {
      ++*a3;
    }
    int v34 = *((_DWORD *)v40 + 2);
    unsigned int v35 = v38;
    if (v38 > 0x40) {
      operator new[]();
    }
    long long v36 = __src;
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = this;
    *(_DWORD *)(a1 + 16) = v34;
    *(_DWORD *)(a1 + 32) = v35;
    *(void *)(a1 + 24) = v36;
    goto LABEL_39;
  }
LABEL_38:
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1;
LABEL_39:
  if (v38 >= 0x41)
  {
    if (__src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CCE45CD0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    if (*(_DWORD *)(a1 + 32) >= 0x41u)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      if (v4) {
        MEMORY[0x1D25D9CB0](v4, 0x1000C8000313F17);
      }
    }
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
  }
  return a1;
}

void sub_1CCE45D4C(void **a1, uint64_t *a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v5 >= v4)
  {
    unint64_t v11 = 0xD37A6F4DE9BD37A7 * ((v5 - (unsigned char *)*a1) >> 3);
    if (v11 + 1 > 0x1642C8590B21642) {
      abort();
    }
    unint64_t v12 = 0xD37A6F4DE9BD37A7 * ((v4 - (unsigned char *)*a1) >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11 + 1) {
      uint64_t v13 = v11 + 1;
    }
    if (v12 >= 0xB21642C8590B21) {
      unint64_t v14 = 0x1642C8590B21642;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      if (v14 > 0x1642C8590B21642) {
        sub_1CB833614();
      }
      unint64_t v15 = (char *)operator new(184 * v14);
    }
    else
    {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[184 * v11];
    *(void *)unint64_t v16 = *a2;
    *((void *)v16 + 1) = 1;
    int64x2_t v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *((int64x2_t *)v16 + 1) = v17;
    *((int64x2_t *)v16 + 2) = v17;
    *((int64x2_t *)v16 + 3) = v17;
    *((int64x2_t *)v16 + 4) = v17;
    int64x2_t v31 = v17;
    unsigned int v18 = &v15[184 * v14];
    sub_1CD65E534((unsigned int *)v16 + 2, (unsigned int *)a2 + 2);
    *((void *)v16 + 10) = a2[10];
    *(_OWORD *)(v16 + 88) = *(_OWORD *)(a2 + 11);
    *((_DWORD *)v16 + 26) = *((_DWORD *)a2 + 26);
    *((_DWORD *)v16 + 30) = *((_DWORD *)a2 + 30);
    *((void *)v16 + 14) = a2[14];
    *((_DWORD *)a2 + 30) = 0;
    *((_OWORD *)v16 + 8) = *((_OWORD *)a2 + 8);
    *((_DWORD *)v16 + 36) = *((_DWORD *)a2 + 36);
    *((_DWORD *)v16 + 40) = *((_DWORD *)a2 + 40);
    *((void *)v16 + 19) = a2[19];
    *((_DWORD *)a2 + 40) = 0;
    *(_OWORD *)(v16 + 168) = *(_OWORD *)(a2 + 21);
    uint64_t v10 = v16 + 184;
    uint64_t v20 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    if (v19 == *a1)
    {
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v18;
    }
    else
    {
      uint64_t v21 = 0;
      do
      {
        int v22 = &v19[v21];
        uint64_t v23 = *(void *)&v19[v21 - 184];
        *(void *)&v16[v21 - 176] = 1;
        uint64_t v24 = (uint64_t)&v16[v21 - 176];
        *(void *)(v24 - 8) = v23;
        *(int64x2_t *)(v24 + 8) = v31;
        *(int64x2_t *)(v24 + 24) = v31;
        *(int64x2_t *)(v24 + 40) = v31;
        *(int64x2_t *)(v24 + 56) = v31;
        sub_1CD65E534((unsigned int *)v24, (unsigned int *)&v19[v21 - 176]);
        *(void *)&v16[v21 - 104] = *(void *)&v19[v21 - 104];
        long long v25 = *(_OWORD *)&v19[v21 - 96];
        *(_DWORD *)&v16[v21 - 80] = *(_DWORD *)&v19[v21 - 80];
        *(_OWORD *)&v16[v21 - 96] = v25;
        *(_DWORD *)&v16[v21 - 64] = *(_DWORD *)&v19[v21 - 64];
        *(void *)&v16[v21 - 72] = *(void *)&v19[v21 - 72];
        long long v26 = *(_OWORD *)&v19[v21 - 56];
        int v27 = *(_DWORD *)&v19[v21 - 40];
        *((_DWORD *)v22 - 16) = 0;
        *(_DWORD *)&v16[v21 - 40] = v27;
        *(_OWORD *)&v16[v21 - 56] = v26;
        *(_DWORD *)&v16[v21 - 24] = *(_DWORD *)&v19[v21 - 24];
        *(void *)&v16[v21 - 32] = *(void *)&v19[v21 - 32];
        *((_DWORD *)v22 - 6) = 0;
        *(_OWORD *)&v16[v21 - 16] = *(_OWORD *)&v19[v21 - 16];
        v21 -= 184;
      }
      while (&v19[v21] != v20);
      uint64_t v19 = (char *)*a1;
      long long v28 = (char *)a1[1];
      *a1 = &v16[v21];
      a1[1] = v10;
      a1[2] = v18;
      while (v28 != v19)
      {
        if (*((_DWORD *)v28 - 6) >= 0x41u)
        {
          uint64_t v29 = *((void *)v28 - 4);
          if (v29) {
            MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
          }
        }
        if (*((_DWORD *)v28 - 16) >= 0x41u)
        {
          uint64_t v30 = *((void *)v28 - 9);
          if (v30) {
            MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
          }
        }
        if ((*(v28 - 176) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*((void *)v28 - 21), 8);
        }
        v28 -= 184;
      }
    }
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *((void *)v5 + 1) = 1;
    int64x2_t v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *(void *)uint64_t v5 = v6;
    *((int64x2_t *)v5 + 1) = v7;
    *((int64x2_t *)v5 + 2) = v7;
    *((int64x2_t *)v5 + 3) = v7;
    *((int64x2_t *)v5 + 4) = v7;
    sub_1CD65E534((unsigned int *)v5 + 2, (unsigned int *)a2 + 2);
    *((void *)v5 + 10) = a2[10];
    long long v8 = *(_OWORD *)(a2 + 11);
    *((_DWORD *)v5 + 26) = *((_DWORD *)a2 + 26);
    *(_OWORD *)(v5 + 88) = v8;
    *((_DWORD *)v5 + 30) = *((_DWORD *)a2 + 30);
    *((void *)v5 + 14) = a2[14];
    *((_DWORD *)a2 + 30) = 0;
    long long v9 = *((_OWORD *)a2 + 8);
    *((_DWORD *)v5 + 36) = *((_DWORD *)a2 + 36);
    *((_OWORD *)v5 + 8) = v9;
    *((_DWORD *)v5 + 40) = *((_DWORD *)a2 + 40);
    *((void *)v5 + 19) = a2[19];
    *((_DWORD *)a2 + 40) = 0;
    *(_OWORD *)(v5 + 168) = *(_OWORD *)(a2 + 21);
    uint64_t v10 = v5 + 184;
  }
  a1[1] = v10;
}

uint64_t sub_1CCE460B8(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v862 = result;
  uint64_t v917 = *MEMORY[0x1E4F143B8];
  int64x2_t v852 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
LABEL_2:
  v853 = a2 - 23;
  uint64_t v850 = (uint64_t)(a2 - 69);
  uint64_t v851 = (uint64_t)(a2 - 46);
  v844 = a2 - 4;
  v845 = a2 - 9;
  uint64_t v6 = (uint64_t *)v862;
  unint64_t v860 = (unint64_t)a2;
  while (1)
  {
    uint64_t v7 = (uint64_t)v6;
    uint64_t v8 = (char *)a2 - (char *)v6;
    uint64_t v9 = 0xD37A6F4DE9BD37A7 * (a2 - v6);
    uint64_t v862 = v7;
    if (v5 || !v4) {
      break;
    }
    if (v8 <= 4415)
    {
      if (a4)
      {
        if ((uint64_t *)v7 == a2) {
          return result;
        }
        uint64_t v669 = v7 + 184;
        if ((uint64_t *)(v7 + 184) == a2) {
          return result;
        }
        int64x2_t v883 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        while (1)
        {
          uint64_t v670 = v7;
          uint64_t v7 = v669;
          unsigned int v671 = *(_DWORD *)(v670 + 288);
          unsigned int v672 = *(_DWORD *)(v670 + 104);
          if (v671 == v672)
          {
            v673 = (uint64_t *)(v670 + 296);
            v674 = (uint64_t *)(v670 + 112);
            uint64_t v675 = *(unsigned int *)(v670 + 304);
            if (v675 > 0x40)
            {
              uint64_t v676 = *(void *)(v670 + 296);
              uint64_t v720 = *(void *)(v676 + 8 * ((v675 - 1) >> 6)) & (1 << (v675 - 1));
              unsigned int v678 = *(_DWORD *)(v670 + 120);
              unsigned int v721 = v678 - 1;
              uint64_t v677 = *(void *)(v670 + 112);
              if (v678 >= 0x41) {
                v674 = (uint64_t *)(v677 + 8 * (v721 >> 6));
              }
              if ((v720 != 0) == (((unint64_t)*v674 >> v721) & 1))
              {
                unint64_t v722 = ((unint64_t)(v675 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v722) {
                    goto LABEL_1036;
                  }
                  unint64_t v723 = *(void *)(v676 + v722 - 8);
                  unint64_t v724 = *(void *)(v677 + v722 - 8);
                  v722 -= 8;
                }
                while (v723 == v724);
                if (v723 <= v724) {
                  goto LABEL_1044;
                }
              }
              else if (v720)
              {
                goto LABEL_1044;
              }
            }
            else
            {
              uint64_t v676 = *v673;
              uint64_t v677 = *v674;
              if (*v673 << -(char)v675 >> -(char)v675 < *v674 << -(char)v675 >> -(char)v675) {
                goto LABEL_1044;
              }
              unsigned int v678 = *(_DWORD *)(v670 + 120);
            }
LABEL_1036:
            if (v678 > 0x40)
            {
              uint64_t v731 = *(void *)(v677 + 8 * ((v678 - 1) >> 6)) & (1 << (v678 - 1));
              unsigned int v732 = v675 - 1;
              if (v675 >= 0x41) {
                v673 = (uint64_t *)(v676 + 8 * (v732 >> 6));
              }
              if ((v731 != 0) == (((unint64_t)*v673 >> v732) & 1))
              {
                uint64_t v739 = v676 - 8;
                unint64_t v740 = (((unint64_t)v678 + 63) >> 3) & 0x3FFFFFF8;
                uint64_t v741 = v677 - 8;
                while (v740)
                {
                  unint64_t v742 = *(void *)(v741 + v740);
                  unint64_t v743 = *(void *)(v739 + v740);
                  v740 -= 8;
                  if (v742 != v743)
                  {
                    if (v742 <= v743) {
                      goto LABEL_1108;
                    }
                    break;
                  }
                }
              }
              else if (v731)
              {
                goto LABEL_1108;
              }
            }
            else if (v677 << -(char)v678 >> -(char)v678 < v676 << -(char)v678 >> -(char)v678)
            {
              goto LABEL_1108;
            }
          }
          else
          {
            if (v671 < v672) {
              goto LABEL_1044;
            }
            if (v672 < v671) {
              goto LABEL_1108;
            }
          }
          unsigned int v679 = *(_DWORD *)(v670 + 328);
          unsigned int v680 = *(_DWORD *)(v670 + 144);
          if (v679 != v680)
          {
            if (v679 >= v680) {
              goto LABEL_1108;
            }
            goto LABEL_1044;
          }
          uint64_t v681 = *(unsigned int *)(v670 + 344);
          if (v681 <= 0x40)
          {
            if ((uint64_t)(*(void *)(v670 + 336) << -(char)v681) >> -(char)v681 >= (uint64_t)(*(void *)(v670 + 152) << -(char)v681) >> -(char)v681) {
              goto LABEL_1108;
            }
            goto LABEL_1044;
          }
          v725 = (void *)(v670 + 152);
          uint64_t v726 = *(void *)(v670 + 336);
          uint64_t v727 = *(void *)(v726 + 8 * ((v681 - 1) >> 6)) & (1 << (v681 - 1));
          unsigned int v728 = *(_DWORD *)(v670 + 160);
          unsigned int v729 = v728 - 1;
          uint64_t v730 = *(void *)(v670 + 152);
          if (v728 >= 0x41) {
            v725 = (void *)(v730 + 8 * (v729 >> 6));
          }
          if ((v727 != 0) != ((*v725 >> v729) & 1)) {
            break;
          }
          unint64_t v733 = v681 + 63;
          uint64_t v734 = v730 - 8;
          uint64_t v735 = (v733 >> 3) & 0x3FFFFFF8;
          uint64_t v736 = v726 - 8;
          do
          {
            if (!v735) {
              goto LABEL_1108;
            }
            unint64_t v737 = *(void *)(v736 + v735);
            unint64_t v738 = *(void *)(v734 + v735);
            v735 -= 8;
          }
          while (v737 == v738);
          if (v737 <= v738) {
            goto LABEL_1044;
          }
LABEL_1108:
          uint64_t v669 = v7 + 184;
          if (v7 + 184 == v860) {
            return result;
          }
        }
        if (!v727) {
          goto LABEL_1108;
        }
LABEL_1044:
        uint64_t v901 = *(void *)v7;
        uint64_t v902 = 1;
        int64x2_t v903 = v883;
        int64x2_t v904 = v883;
        int64x2_t v905 = v883;
        int64x2_t v906 = v883;
        sub_1CD65E534((unsigned int *)&v902, (unsigned int *)(v670 + 192));
        uint64_t v682 = *(void *)(v670 + 264);
        long long v908 = *(_OWORD *)(v670 + 272);
        unsigned int v909 = *(_DWORD *)(v670 + 288);
        unsigned int v911 = *(_DWORD *)(v670 + 304);
        uint64_t v683 = *(void *)(v670 + 296);
        uint64_t v907 = v682;
        uint64_t v910 = v683;
        *(_DWORD *)(v670 + 304) = 0;
        long long v912 = *(_OWORD *)(v670 + 312);
        unsigned int v913 = *(_DWORD *)(v670 + 328);
        unsigned int v915 = *(_DWORD *)(v670 + 344);
        uint64_t v914 = *(void *)(v670 + 336);
        *(_DWORD *)(v670 + 344) = 0;
        uint64_t v684 = v7;
        long long v916 = *(_OWORD *)(v670 + 352);
        while (1)
        {
LABEL_1045:
          uint64_t v685 = v684;
          uint64_t v684 = v670;
          *(void *)uint64_t v685 = *(void *)v670;
          uint64_t v686 = v670 + 8;
          sub_1CD65E4C8(v685 + 8, (unsigned int *)(v670 + 8));
          *(void *)(v685 + 80) = *(void *)(v670 + 80);
          v687 = (void *)(v670 + 88);
          sub_1CCE45CD0(v685 + 88, v670 + 88);
          v688 = (void *)(v670 + 128);
          sub_1CCE45CD0(v685 + 128, v670 + 128);
          *(_OWORD *)(v685 + 168) = *(_OWORD *)(v670 + 168);
          uint64_t v689 = v862;
          if (v684 == v862)
          {
LABEL_1091:
            v718 = (_OWORD *)(v684 + 168);
            *(void *)uint64_t v689 = v901;
            double result = sub_1CD65E4C8(v686, (unsigned int *)&v902);
            *(void *)(v689 + 80) = v907;
            if ((uint64_t *)v689 == &v901)
            {
              unsigned int v719 = v915;
              _OWORD *v718 = v916;
              if (v719 >= 0x41)
              {
                double result = v914;
                if (v914) {
                  double result = MEMORY[0x1D25D9CB0](v914, 0x1000C8000313F17);
                }
              }
            }
            else
            {
              void *v687 = v908;
              *(void *)(v689 + 96) = *((void *)&v908 + 1);
              *(_DWORD *)(v689 + 104) = v909;
              if (*(_DWORD *)(v689 + 120) >= 0x41u)
              {
                double result = *(void *)(v689 + 112);
                if (result) {
                  double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                }
              }
              *(void *)(v689 + 112) = v910;
              *(_DWORD *)(v689 + 120) = v911;
              unsigned int v911 = 0;
              void *v688 = v912;
              *(void *)(v689 + 136) = *((void *)&v912 + 1);
              *(_DWORD *)(v689 + 144) = v913;
              if (*(_DWORD *)(v689 + 160) >= 0x41u)
              {
                double result = *(void *)(v689 + 152);
                if (result) {
                  double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                }
              }
              *(void *)(v689 + 152) = v914;
              *(_DWORD *)(v689 + 160) = v915;
              unsigned int v915 = 0;
              _OWORD *v718 = v916;
            }
            if (v911 >= 0x41)
            {
              double result = v910;
              if (v910) {
                double result = MEMORY[0x1D25D9CB0](v910, 0x1000C8000313F17);
              }
            }
            if ((v902 & 1) == 0) {
              double result = MEMORY[0x1D25D9CD0](v903.i64[0], 8);
            }
            goto LABEL_1108;
          }
          uint64_t v670 = v684 - 184;
          unsigned int v690 = *(_DWORD *)(v684 - 80);
          if (v909 == v690)
          {
            v691 = (uint64_t *)(v684 - 72);
            if (v911 > 0x40)
            {
              uint64_t v692 = v910;
              uint64_t v697 = *(void *)(v910 + 8 * ((v911 - 1) >> 6)) & (1 << (v911 - 1));
              unsigned int v694 = *(_DWORD *)(v684 - 64);
              unsigned int v698 = v694 - 1;
              uint64_t v693 = *(void *)(v684 - 72);
              if (v694 >= 0x41) {
                v691 = (uint64_t *)(v693 + 8 * (v698 >> 6));
              }
              if ((v697 != 0) == (((unint64_t)*v691 >> v698) & 1))
              {
                unint64_t v699 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                while (v699)
                {
                  unint64_t v700 = *(void *)(v910 + v699 - 8);
                  unint64_t v701 = *(void *)(v693 + v699 - 8);
                  v699 -= 8;
                  if (v700 != v701)
                  {
                    if (v700 <= v701) {
                      goto LABEL_1045;
                    }
                    break;
                  }
                }
              }
              else if (v697)
              {
                continue;
              }
            }
            else
            {
              uint64_t v692 = v910;
              uint64_t v693 = *v691;
              if (v910 << -(char)v911 >> -(char)v911 < *v691 << -(char)v911 >> -(char)v911) {
                continue;
              }
              unsigned int v694 = *(_DWORD *)(v684 - 64);
            }
            if (v694 > 0x40)
            {
              uint64_t v706 = *(void *)(v693 + 8 * ((v694 - 1) >> 6)) & (1 << (v694 - 1));
              unsigned int v707 = v911 - 1;
              v708 = &v910;
              if (v911 >= 0x41) {
                v708 = (uint64_t *)(v692 + 8 * (v707 >> 6));
              }
              if ((v706 != 0) == (((unint64_t)*v708 >> v707) & 1))
              {
                uint64_t v713 = v692 - 8;
                unint64_t v714 = (((unint64_t)v694 + 63) >> 3) & 0x3FFFFFF8;
                uint64_t v715 = v693 - 8;
                while (v714)
                {
                  unint64_t v716 = *(void *)(v715 + v714);
                  unint64_t v717 = *(void *)(v713 + v714);
                  v714 -= 8;
                  if (v716 != v717)
                  {
                    if (v716 > v717) {
                      break;
                    }
                    goto LABEL_1090;
                  }
                }
              }
              else if (v706)
              {
                goto LABEL_1090;
              }
            }
            else if (v693 << -(char)v694 >> -(char)v694 < v692 << -(char)v694 >> -(char)v694)
            {
              goto LABEL_1090;
            }
          }
          else
          {
            if (v909 < v690) {
              continue;
            }
            if (v690 < v909) {
              goto LABEL_1090;
            }
          }
          unsigned int v695 = *(_DWORD *)(v684 - 40);
          if (v913 == v695)
          {
            v696 = (void *)(v684 - 32);
            if (v915 > 0x40)
            {
              uint64_t v702 = *(void *)(v914 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
              unsigned int v703 = *(_DWORD *)(v684 - 24);
              unsigned int v704 = v703 - 1;
              uint64_t v705 = *(void *)(v684 - 32);
              if (v703 >= 0x41) {
                v696 = (void *)(v705 + 8 * (v704 >> 6));
              }
              if ((v702 != 0) == ((*v696 >> v704) & 1))
              {
                uint64_t v709 = v705 - 8;
                unint64_t v710 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
                while (v710)
                {
                  unint64_t v711 = *(void *)(v914 - 8 + v710);
                  unint64_t v712 = *(void *)(v709 + v710);
                  v710 -= 8;
                  if (v711 != v712)
                  {
                    if (v711 <= v712) {
                      goto LABEL_1045;
                    }
                    break;
                  }
                }
LABEL_1090:
                uint64_t v689 = v684;
                goto LABEL_1091;
              }
              if (!v702) {
                goto LABEL_1090;
              }
            }
            else if (v914 << -(uint64_t)v915 >> -(uint64_t)v915 >= (uint64_t)(*v696 << -(uint64_t)v915) >> -(uint64_t)v915)
            {
              goto LABEL_1090;
            }
          }
          else if (v913 >= v695)
          {
            goto LABEL_1090;
          }
        }
      }
      if ((uint64_t *)v7 == a2) {
        return result;
      }
      uint64_t v744 = v7 + 184;
      if ((uint64_t *)(v7 + 184) == a2) {
        return result;
      }
      int64x2_t v884 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      while (1)
      {
        uint64_t v745 = v862;
        uint64_t v862 = v744;
        unsigned int v746 = *(_DWORD *)(v745 + 288);
        unsigned int v747 = *(_DWORD *)(v745 + 104);
        if (v746 == v747)
        {
          v748 = (uint64_t *)(v745 + 296);
          v749 = (uint64_t *)(v745 + 112);
          uint64_t v750 = *(unsigned int *)(v745 + 304);
          if (v750 > 0x40)
          {
            uint64_t v751 = *(void *)(v745 + 296);
            uint64_t v792 = *(void *)(v751 + 8 * ((v750 - 1) >> 6)) & (1 << (v750 - 1));
            unsigned int v753 = *(_DWORD *)(v745 + 120);
            unsigned int v793 = v753 - 1;
            uint64_t v752 = *(void *)(v745 + 112);
            if (v753 >= 0x41) {
              v749 = (uint64_t *)(v752 + 8 * (v793 >> 6));
            }
            if ((v792 != 0) == (((unint64_t)*v749 >> v793) & 1))
            {
              unint64_t v794 = ((unint64_t)(v750 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                if (!v794) {
                  goto LABEL_1149;
                }
                unint64_t v795 = *(void *)(v751 + v794 - 8);
                unint64_t v796 = *(void *)(v752 + v794 - 8);
                v794 -= 8;
              }
              while (v795 == v796);
              if (v795 <= v796) {
                goto LABEL_1157;
              }
            }
            else if (v792)
            {
              goto LABEL_1157;
            }
          }
          else
          {
            uint64_t v751 = *v748;
            uint64_t v752 = *v749;
            if (*v748 << -(char)v750 >> -(char)v750 < *v749 << -(char)v750 >> -(char)v750) {
              goto LABEL_1157;
            }
            unsigned int v753 = *(_DWORD *)(v745 + 120);
          }
LABEL_1149:
          if (v753 > 0x40)
          {
            uint64_t v803 = *(void *)(v752 + 8 * ((v753 - 1) >> 6)) & (1 << (v753 - 1));
            unsigned int v804 = v750 - 1;
            if (v750 >= 0x41) {
              v748 = (uint64_t *)(v751 + 8 * (v804 >> 6));
            }
            if ((v803 != 0) == (((unint64_t)*v748 >> v804) & 1))
            {
              uint64_t v811 = v751 - 8;
              unint64_t v812 = (((unint64_t)v753 + 63) >> 3) & 0x3FFFFFF8;
              uint64_t v813 = v752 - 8;
              while (v812)
              {
                unint64_t v814 = *(void *)(v813 + v812);
                unint64_t v815 = *(void *)(v811 + v812);
                v812 -= 8;
                if (v814 != v815)
                {
                  if (v814 <= v815) {
                    goto LABEL_1219;
                  }
                  break;
                }
              }
            }
            else if (v803)
            {
              goto LABEL_1219;
            }
          }
          else if (v752 << -(char)v753 >> -(char)v753 < v751 << -(char)v753 >> -(char)v753)
          {
            goto LABEL_1219;
          }
        }
        else
        {
          if (v746 < v747) {
            goto LABEL_1157;
          }
          if (v747 < v746) {
            goto LABEL_1219;
          }
        }
        unsigned int v754 = *(_DWORD *)(v745 + 328);
        unsigned int v755 = *(_DWORD *)(v745 + 144);
        if (v754 != v755)
        {
          if (v754 >= v755) {
            goto LABEL_1219;
          }
          goto LABEL_1157;
        }
        uint64_t v756 = *(unsigned int *)(v745 + 344);
        if (v756 <= 0x40)
        {
          if ((uint64_t)(*(void *)(v745 + 336) << -(char)v756) >> -(char)v756 >= (uint64_t)(*(void *)(v745 + 152) << -(char)v756) >> -(char)v756) {
            goto LABEL_1219;
          }
          goto LABEL_1157;
        }
        v797 = (void *)(v745 + 152);
        uint64_t v798 = *(void *)(v745 + 336);
        uint64_t v799 = *(void *)(v798 + 8 * ((v756 - 1) >> 6)) & (1 << (v756 - 1));
        unsigned int v800 = *(_DWORD *)(v745 + 160);
        unsigned int v801 = v800 - 1;
        uint64_t v802 = *(void *)(v745 + 152);
        if (v800 >= 0x41) {
          v797 = (void *)(v802 + 8 * (v801 >> 6));
        }
        if ((v799 != 0) != ((*v797 >> v801) & 1)) {
          break;
        }
        unint64_t v805 = v756 + 63;
        uint64_t v806 = v802 - 8;
        uint64_t v807 = (v805 >> 3) & 0x3FFFFFF8;
        uint64_t v808 = v798 - 8;
        do
        {
          if (!v807) {
            goto LABEL_1219;
          }
          unint64_t v809 = *(void *)(v808 + v807);
          unint64_t v810 = *(void *)(v806 + v807);
          v807 -= 8;
        }
        while (v809 == v810);
        if (v809 <= v810) {
          goto LABEL_1157;
        }
LABEL_1219:
        uint64_t v744 = v862 + 184;
        if (v862 + 184 == v860) {
          return result;
        }
      }
      if (!v799) {
        goto LABEL_1219;
      }
LABEL_1157:
      uint64_t v757 = v862;
      uint64_t v901 = *(void *)v862;
      uint64_t v902 = 1;
      int64x2_t v903 = v884;
      int64x2_t v904 = v884;
      int64x2_t v905 = v884;
      int64x2_t v906 = v884;
      sub_1CD65E534((unsigned int *)&v902, (unsigned int *)(v745 + 192));
      uint64_t v758 = *(void *)(v745 + 264);
      long long v908 = *(_OWORD *)(v745 + 272);
      unsigned int v909 = *(_DWORD *)(v745 + 288);
      unsigned int v911 = *(_DWORD *)(v745 + 304);
      uint64_t v759 = *(void *)(v745 + 296);
      uint64_t v907 = v758;
      uint64_t v910 = v759;
      *(_DWORD *)(v745 + 304) = 0;
      long long v912 = *(_OWORD *)(v745 + 312);
      unsigned int v913 = *(_DWORD *)(v745 + 328);
      unsigned int v915 = *(_DWORD *)(v745 + 344);
      uint64_t v914 = *(void *)(v745 + 336);
      *(_DWORD *)(v745 + 344) = 0;
      long long v916 = *(_OWORD *)(v745 + 352);
      while (1)
      {
LABEL_1158:
        uint64_t v760 = v757;
        uint64_t v757 = v745;
        *(void *)uint64_t v760 = *(void *)v745;
        uint64_t v761 = v745 + 8;
        sub_1CD65E4C8(v760 + 8, (unsigned int *)(v745 + 8));
        *(void *)(v760 + 80) = *(void *)(v745 + 80);
        sub_1CCE45CD0(v760 + 88, v745 + 88);
        sub_1CCE45CD0(v760 + 128, v745 + 128);
        *(_OWORD *)(v760 + 168) = *(_OWORD *)(v745 + 168);
        v745 -= 184;
        unsigned int v762 = *(_DWORD *)(v757 - 80);
        if (v909 == v762)
        {
          v763 = (uint64_t *)(v757 - 72);
          if (v911 > 0x40)
          {
            uint64_t v764 = v910;
            uint64_t v769 = *(void *)(v910 + 8 * ((v911 - 1) >> 6)) & (1 << (v911 - 1));
            unsigned int v766 = *(_DWORD *)(v757 - 64);
            unsigned int v770 = v766 - 1;
            uint64_t v765 = *(void *)(v757 - 72);
            if (v766 >= 0x41) {
              v763 = (uint64_t *)(v765 + 8 * (v770 >> 6));
            }
            if ((v769 != 0) == (((unint64_t)*v763 >> v770) & 1))
            {
              unint64_t v771 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
              while (v771)
              {
                unint64_t v772 = *(void *)(v910 + v771 - 8);
                unint64_t v773 = *(void *)(v765 + v771 - 8);
                v771 -= 8;
                if (v772 != v773)
                {
                  if (v772 <= v773) {
                    goto LABEL_1158;
                  }
                  break;
                }
              }
            }
            else if (v769)
            {
              continue;
            }
          }
          else
          {
            uint64_t v764 = v910;
            uint64_t v765 = *v763;
            if (v910 << -(char)v911 >> -(char)v911 < *v763 << -(char)v911 >> -(char)v911) {
              continue;
            }
            unsigned int v766 = *(_DWORD *)(v757 - 64);
          }
          if (v766 > 0x40)
          {
            uint64_t v778 = *(void *)(v765 + 8 * ((v766 - 1) >> 6)) & (1 << (v766 - 1));
            unsigned int v779 = v911 - 1;
            v780 = &v910;
            if (v911 >= 0x41) {
              v780 = (uint64_t *)(v764 + 8 * (v779 >> 6));
            }
            if ((v778 != 0) == (((unint64_t)*v780 >> v779) & 1))
            {
              uint64_t v785 = v764 - 8;
              unint64_t v786 = (((unint64_t)v766 + 63) >> 3) & 0x3FFFFFF8;
              uint64_t v787 = v765 - 8;
              while (v786)
              {
                unint64_t v788 = *(void *)(v787 + v786);
                unint64_t v789 = *(void *)(v785 + v786);
                v786 -= 8;
                if (v788 != v789)
                {
                  if (v788 > v789) {
                    break;
                  }
                  goto LABEL_1202;
                }
              }
            }
            else if (v778)
            {
              goto LABEL_1202;
            }
          }
          else if (v765 << -(char)v766 >> -(char)v766 < v764 << -(char)v766 >> -(char)v766)
          {
            goto LABEL_1202;
          }
        }
        else
        {
          if (v909 < v762) {
            continue;
          }
          if (v762 < v909) {
            goto LABEL_1202;
          }
        }
        unsigned int v767 = *(_DWORD *)(v757 - 40);
        if (v913 == v767)
        {
          v768 = (void *)(v757 - 32);
          if (v915 > 0x40)
          {
            uint64_t v774 = *(void *)(v914 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
            unsigned int v775 = *(_DWORD *)(v757 - 24);
            unsigned int v776 = v775 - 1;
            uint64_t v777 = *(void *)(v757 - 32);
            if (v775 >= 0x41) {
              v768 = (void *)(v777 + 8 * (v776 >> 6));
            }
            if ((v774 != 0) == ((*v768 >> v776) & 1))
            {
              uint64_t v781 = v777 - 8;
              unint64_t v782 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
              while (v782)
              {
                unint64_t v783 = *(void *)(v914 - 8 + v782);
                unint64_t v784 = *(void *)(v781 + v782);
                v782 -= 8;
                if (v783 != v784)
                {
                  if (v783 <= v784) {
                    goto LABEL_1158;
                  }
                  break;
                }
              }
LABEL_1202:
              v790 = (_OWORD *)(v757 + 168);
              *(void *)uint64_t v757 = v901;
              double result = sub_1CD65E4C8(v761, (unsigned int *)&v902);
              *(void *)(v757 + 80) = v907;
              if ((uint64_t *)v757 == &v901)
              {
                unsigned int v791 = v915;
                _OWORD *v790 = v916;
                if (v791 >= 0x41)
                {
                  double result = v914;
                  if (v914) {
                    double result = MEMORY[0x1D25D9CB0](v914, 0x1000C8000313F17);
                  }
                }
              }
              else
              {
                *(_OWORD *)(v757 + 88) = v908;
                *(_DWORD *)(v757 + 104) = v909;
                if (*(_DWORD *)(v757 + 120) >= 0x41u)
                {
                  double result = *(void *)(v757 + 112);
                  if (result) {
                    double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  }
                }
                *(void *)(v757 + 112) = v910;
                *(_DWORD *)(v757 + 120) = v911;
                unsigned int v911 = 0;
                *(_OWORD *)(v757 + 128) = v912;
                *(_DWORD *)(v757 + 144) = v913;
                if (*(_DWORD *)(v757 + 160) >= 0x41u)
                {
                  double result = *(void *)(v757 + 152);
                  if (result) {
                    double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                  }
                }
                *(void *)(v757 + 152) = v914;
                *(_DWORD *)(v757 + 160) = v915;
                unsigned int v915 = 0;
                _OWORD *v790 = v916;
              }
              if (v911 >= 0x41)
              {
                double result = v910;
                if (v910) {
                  double result = MEMORY[0x1D25D9CB0](v910, 0x1000C8000313F17);
                }
              }
              if ((v902 & 1) == 0) {
                double result = MEMORY[0x1D25D9CD0](v903.i64[0], 8);
              }
              goto LABEL_1219;
            }
            if (!v774) {
              goto LABEL_1202;
            }
          }
          else if (v914 << -(uint64_t)v915 >> -(uint64_t)v915 >= (uint64_t)(*v768 << -(uint64_t)v915) >> -(uint64_t)v915)
          {
            goto LABEL_1202;
          }
        }
        else if (v913 >= v767)
        {
          goto LABEL_1202;
        }
      }
    }
    if (!a3)
    {
      if ((uint64_t *)v7 == a2) {
        return result;
      }
      int64_t v356 = (unint64_t)(v9 - 2) >> 1;
      v357 = &v916;
      int64x2_t v871 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      int64_t v358 = v356;
      uint64_t v359 = v7;
LABEL_609:
      int64_t v360 = v358;
      if (v356 < v358) {
        goto LABEL_758;
      }
      uint64_t v361 = (2 * v358) | 1;
      uint64_t v362 = v359 + 184 * v361;
      if (2 * v358 + 2 >= v9) {
        goto LABEL_620;
      }
      unsigned int v363 = *(_DWORD *)(v359 + 184 * v361 + 104);
      unsigned int v364 = *(_DWORD *)(v362 + 288);
      if (v363 == v364)
      {
        uint64_t v365 = v359 + 184 * v361;
        v366 = (uint64_t *)(v365 + 112);
        v367 = (uint64_t *)(v362 + 296);
        uint64_t v368 = *(unsigned int *)(v365 + 120);
        if (v368 <= 0x40)
        {
          uint64_t v369 = *v366;
          uint64_t v370 = *v367;
          if (*v366 << -(char)v368 >> -(char)v368 >= *v367 << -(char)v368 >> -(char)v368)
          {
            unsigned int v371 = *(_DWORD *)(v362 + 304);
            goto LABEL_615;
          }
LABEL_619:
          v362 += 184;
          uint64_t v361 = 2 * v358 + 2;
LABEL_620:
          unsigned int v372 = *(_DWORD *)(v362 + 104);
          unsigned int v373 = *(_DWORD *)(v359 + 184 * v360 + 104);
          if (v372 == v373)
          {
            v374 = (uint64_t *)(v362 + 112);
            v375 = (uint64_t *)(v359 + 184 * v360 + 112);
            uint64_t v376 = *(unsigned int *)(v362 + 120);
            if (v376 > 0x40)
            {
              uint64_t v377 = *v374;
              uint64_t v475 = *(void *)(*v374 + 8 * ((v376 - 1) >> 6)) & (1 << (v376 - 1));
              unsigned int v379 = *(_DWORD *)(v359 + 184 * v360 + 120);
              unsigned int v476 = v379 - 1;
              uint64_t v378 = *v375;
              if (v379 >= 0x41) {
                v375 = (uint64_t *)(*v375 + 8 * (v476 >> 6));
              }
              if ((v475 != 0) == (((unint64_t)*v375 >> v476) & 1))
              {
                unint64_t v479 = ((unint64_t)(v376 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v479) {
                    goto LABEL_624;
                  }
                  unint64_t v480 = *(void *)(v377 + v479 - 8);
                  unint64_t v481 = *(void *)(v378 + v479 - 8);
                  v479 -= 8;
                }
                while (v480 == v481);
                if (v480 <= v481) {
                  goto LABEL_758;
                }
              }
              else if (v475)
              {
                goto LABEL_758;
              }
            }
            else
            {
              uint64_t v377 = *v374;
              uint64_t v378 = *v375;
              if (*v374 << -(char)v376 >> -(char)v376 < *v375 << -(char)v376 >> -(char)v376) {
                goto LABEL_758;
              }
              unsigned int v379 = *(_DWORD *)(v359 + 184 * v360 + 120);
            }
LABEL_624:
            if (v379 > 0x40)
            {
              uint64_t v487 = *(void *)(v378 + 8 * ((v379 - 1) >> 6)) & (1 << (v379 - 1));
              unsigned int v488 = v376 - 1;
              if (v376 >= 0x41) {
                v374 = (uint64_t *)(v377 + 8 * (v488 >> 6));
              }
              if ((v487 != 0) == (((unint64_t)*v374 >> v488) & 1))
              {
                uint64_t v500 = v377 - 8;
                unint64_t v501 = (((unint64_t)v379 + 63) >> 3) & 0x3FFFFFF8;
                uint64_t v502 = v378 - 8;
                do
                {
                  if (!v501) {
                    goto LABEL_629;
                  }
                  unint64_t v503 = *(void *)(v502 + v501);
                  unint64_t v504 = *(void *)(v500 + v501);
                  v501 -= 8;
                }
                while (v503 == v504);
                if (v503 <= v504) {
                  goto LABEL_632;
                }
              }
              else if (v487)
              {
                goto LABEL_632;
              }
LABEL_629:
              unsigned int v380 = *(_DWORD *)(v362 + 144);
              unsigned int v381 = *(_DWORD *)(v359 + 184 * v360 + 144);
              if (v380 == v381)
              {
                v382 = (uint64_t *)(v359 + 184 * v360 + 152);
                uint64_t v383 = *(unsigned int *)(v362 + 160);
                if (v383 > 0x40)
                {
                  uint64_t v482 = *(void *)(v362 + 152);
                  uint64_t v483 = *(void *)(v482 + 8 * ((v383 - 1) >> 6)) & (1 << (v383 - 1));
                  unsigned int v484 = *(_DWORD *)(v359 + 184 * v360 + 160);
                  unsigned int v485 = v484 - 1;
                  uint64_t v486 = *v382;
                  if (v484 >= 0x41) {
                    v382 = (uint64_t *)(*v382 + 8 * (v485 >> 6));
                  }
                  if ((v483 != 0) == (((unint64_t)*v382 >> v485) & 1))
                  {
                    unint64_t v494 = v383 + 63;
                    uint64_t v495 = v486 - 8;
                    uint64_t v496 = (v494 >> 3) & 0x3FFFFFF8;
                    uint64_t v497 = v482 - 8;
                    do
                    {
                      if (!v496) {
                        goto LABEL_632;
                      }
                      unint64_t v498 = *(void *)(v497 + v496);
                      unint64_t v499 = *(void *)(v495 + v496);
                      v496 -= 8;
                    }
                    while (v498 == v499);
                    if (v498 <= v499) {
                      goto LABEL_758;
                    }
                  }
                  else if (v483)
                  {
                    goto LABEL_758;
                  }
                }
                else if ((uint64_t)(*(void *)(v362 + 152) << -(char)v383) >> -(char)v383 < *v382 << -(char)v383 >> -(char)v383)
                {
                  goto LABEL_758;
                }
              }
              else if (v380 < v381)
              {
                goto LABEL_758;
              }
              goto LABEL_632;
            }
            if (v378 << -(char)v379 >> -(char)v379 >= v377 << -(char)v379 >> -(char)v379) {
              goto LABEL_629;
            }
          }
          else
          {
            if (v372 < v373) {
              goto LABEL_758;
            }
            if (v373 >= v372) {
              goto LABEL_629;
            }
          }
LABEL_632:
          uint64_t v384 = v359 + 184 * v360;
          uint64_t v901 = *(void *)v384;
          uint64_t v902 = 1;
          int64x2_t v903 = v871;
          int64x2_t v904 = v871;
          int64x2_t v905 = v871;
          int64x2_t v906 = v871;
          sub_1CD65E534((unsigned int *)&v902, (unsigned int *)(v384 + 8));
          uint64_t v907 = *(void *)(v384 + 80);
          long long v385 = *(_OWORD *)(v384 + 88);
          unsigned int v909 = *(_DWORD *)(v384 + 104);
          long long v908 = v385;
          unsigned int v911 = *(_DWORD *)(v384 + 120);
          uint64_t v910 = *(void *)(v384 + 112);
          *(_DWORD *)(v384 + 120) = 0;
          long long v386 = *(_OWORD *)(v384 + 128);
          unsigned int v913 = *(_DWORD *)(v384 + 144);
          long long v912 = v386;
          unsigned int v915 = *(_DWORD *)(v384 + 160);
          uint64_t v914 = *(void *)(v384 + 152);
          *(_DWORD *)(v384 + 160) = 0;
          v387 = v357;
          long long *v357 = *(_OWORD *)(v384 + 168);
          while (1)
          {
LABEL_633:
            uint64_t v388 = v362;
            *(void *)uint64_t v384 = *(void *)v362;
            uint64_t v389 = v362 + 8;
            sub_1CD65E4C8(v384 + 8, (unsigned int *)(v362 + 8));
            *(void *)(v384 + 80) = *(void *)(v362 + 80);
            sub_1CCE45CD0(v384 + 88, v362 + 88);
            sub_1CCE45CD0(v384 + 128, v362 + 128);
            *(_OWORD *)(v384 + 168) = *(_OWORD *)(v362 + 168);
            if (v356 < v361)
            {
LABEL_732:
              v461 = (long long *)(v388 + 168);
              *(void *)uint64_t v388 = v901;
              sub_1CD65E4C8(v389, (unsigned int *)&v902);
              *(void *)(v388 + 80) = v907;
              if ((uint64_t *)v388 == &v901)
              {
                unsigned int v474 = v915;
                v357 = v387;
                long long *v461 = *v387;
                if (v474 >= 0x41 && v914) {
                  MEMORY[0x1D25D9CB0](v914, 0x1000C8000313F17);
                }
              }
              else
              {
                *(_OWORD *)(v388 + 88) = v908;
                *(_DWORD *)(v388 + 104) = v909;
                v357 = v387;
                if (*(_DWORD *)(v388 + 120) >= 0x41u)
                {
                  uint64_t v462 = *(void *)(v388 + 112);
                  if (v462) {
                    MEMORY[0x1D25D9CB0](v462, 0x1000C8000313F17);
                  }
                }
                *(void *)(v388 + 112) = v910;
                *(_DWORD *)(v388 + 120) = v911;
                unsigned int v911 = 0;
                *(_OWORD *)(v388 + 128) = v912;
                *(_DWORD *)(v388 + 144) = v913;
                if (*(_DWORD *)(v388 + 160) >= 0x41u)
                {
                  uint64_t v463 = *(void *)(v388 + 152);
                  if (v463) {
                    MEMORY[0x1D25D9CB0](v463, 0x1000C8000313F17);
                  }
                }
                *(void *)(v388 + 152) = v914;
                *(_DWORD *)(v388 + 160) = v915;
                unsigned int v915 = 0;
                long long *v461 = *v387;
              }
              uint64_t v359 = v862;
              if (v911 >= 0x41 && v910) {
                MEMORY[0x1D25D9CB0](v910, 0x1000C8000313F17);
              }
              if ((v902 & 1) == 0) {
                MEMORY[0x1D25D9CD0](v903.i64[0], 8);
              }
LABEL_758:
              int64_t v358 = v360 - 1;
              if (v360) {
                goto LABEL_609;
              }
              v521 = (unsigned int *)(v359 + 8);
              uint64_t v856 = v359 + 128;
              uint64_t v857 = v359 + 88;
              v854 = (unsigned int *)(v359 + 8);
              v855 = (long long *)(v359 + 168);
              int64x2_t v858 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
              unint64_t v522 = v860;
              while (2)
              {
                unint64_t v861 = v522;
                uint64_t v523 = v862;
                uint64_t v885 = *(void *)v862;
                uint64_t v886 = 1;
                int64x2_t v887 = v858;
                int64x2_t v888 = v858;
                int64x2_t v889 = v858;
                int64x2_t v890 = v858;
                sub_1CD65E534((unsigned int *)&v886, v521);
                uint64_t v524 = 0;
                uint64_t v525 = *(void *)(v862 + 80);
                long long v526 = *(_OWORD *)v857;
                int v893 = *(_DWORD *)(v857 + 16);
                long long v892 = v526;
                unsigned int v895 = *(_DWORD *)(v862 + 120);
                uint64_t v527 = *(void *)(v862 + 112);
                uint64_t v891 = v525;
                uint64_t v894 = v527;
                *(_DWORD *)(v862 + 120) = 0;
                long long v528 = *(_OWORD *)v856;
                int v897 = *(_DWORD *)(v856 + 16);
                long long v896 = v528;
                unsigned int v899 = *(_DWORD *)(v862 + 160);
                uint64_t v898 = *(void *)(v862 + 152);
                *(_DWORD *)(v862 + 160) = 0;
                long long v900 = *v855;
LABEL_825:
                uint64_t v529 = v523;
                uint64_t v530 = v524 + 1;
                v523 += 184 * (v524 + 1);
                uint64_t v531 = 2 * v524;
                uint64_t v524 = (2 * v524) | 1;
                uint64_t v532 = v531 + 2;
                if (v532 >= v9) {
                  goto LABEL_835;
                }
                unsigned int v533 = *(_DWORD *)(v529 + 184 * v530 + 104);
                unsigned int v534 = *(_DWORD *)(v523 + 288);
                if (v533 == v534)
                {
                  uint64_t v535 = v529 + 184 * v530;
                  v536 = (uint64_t *)(v535 + 112);
                  v537 = (uint64_t *)(v523 + 296);
                  uint64_t v538 = *(unsigned int *)(v535 + 120);
                  if (v538 <= 0x40)
                  {
                    uint64_t v539 = *v536;
                    uint64_t v540 = *v537;
                    if (*v536 << -(char)v538 >> -(char)v538 >= *v537 << -(char)v538 >> -(char)v538)
                    {
                      unsigned int v541 = *(_DWORD *)(v523 + 304);
                      goto LABEL_830;
                    }
LABEL_834:
                    v523 += 184;
                    uint64_t v524 = v532;
                    goto LABEL_835;
                  }
                  uint64_t v539 = *v536;
                  uint64_t v552 = *(void *)(*v536 + 8 * ((v538 - 1) >> 6)) & (1 << (v538 - 1));
                  unsigned int v541 = *(_DWORD *)(v523 + 304);
                  unsigned int v553 = v541 - 1;
                  uint64_t v540 = *(void *)(v523 + 296);
                  if (v541 >= 0x41) {
                    v537 = (uint64_t *)(v540 + 8 * (v553 >> 6));
                  }
                  if ((v552 != 0) == (((unint64_t)*v537 >> v553) & 1))
                  {
                    unint64_t v554 = ((unint64_t)(v538 + 63) >> 3) & 0x3FFFFFF8;
                    while (v554)
                    {
                      unint64_t v555 = *(void *)(v539 + v554 - 8);
                      unint64_t v556 = *(void *)(v540 + v554 - 8);
                      v554 -= 8;
                      if (v555 != v556)
                      {
                        if (v555 <= v556) {
                          goto LABEL_834;
                        }
                        break;
                      }
                    }
                  }
                  else if (v552)
                  {
                    goto LABEL_834;
                  }
LABEL_830:
                  if (v541 > 0x40)
                  {
                    uint64_t v557 = *(void *)(v540 + 8 * ((v541 - 1) >> 6)) & (1 << (v541 - 1));
                    unsigned int v558 = v538 - 1;
                    if (v538 >= 0x41) {
                      v536 = (uint64_t *)(v539 + 8 * (v558 >> 6));
                    }
                    if ((v557 != 0) == (((unint64_t)*v536 >> v558) & 1))
                    {
                      uint64_t v564 = v539 - 8;
                      unint64_t v565 = (((unint64_t)v541 + 63) >> 3) & 0x3FFFFFF8;
                      uint64_t v566 = v540 - 8;
                      while (v565)
                      {
                        unint64_t v567 = *(void *)(v566 + v565);
                        unint64_t v568 = *(void *)(v564 + v565);
                        v565 -= 8;
                        if (v567 != v568)
                        {
                          if (v567 <= v568) {
                            goto LABEL_835;
                          }
                          break;
                        }
                      }
                    }
                    else if (v557)
                    {
                      goto LABEL_835;
                    }
                  }
                  else if (v540 << -(char)v541 >> -(char)v541 < v539 << -(char)v541 >> -(char)v541)
                  {
                    goto LABEL_835;
                  }
                }
                else
                {
                  if (v533 < v534) {
                    goto LABEL_834;
                  }
                  if (v534 < v533) {
                    goto LABEL_835;
                  }
                }
                unsigned int v542 = *(_DWORD *)(v529 + 184 * v530 + 144);
                unsigned int v543 = *(_DWORD *)(v523 + 328);
                if (v542 == v543)
                {
                  uint64_t v544 = v529 + 184 * v530;
                  v545 = (uint64_t *)(v544 + 152);
                  v546 = (void *)(v523 + 336);
                  uint64_t v547 = *(unsigned int *)(v544 + 160);
                  if (v547 > 0x40)
                  {
                    uint64_t v559 = *v545;
                    uint64_t v560 = *(void *)(v559 + 8 * ((v547 - 1) >> 6)) & (1 << (v547 - 1));
                    unsigned int v561 = *(_DWORD *)(v523 + 344);
                    unsigned int v562 = v561 - 1;
                    uint64_t v563 = *(void *)(v523 + 336);
                    if (v561 >= 0x41) {
                      v546 = (void *)(v563 + 8 * (v562 >> 6));
                    }
                    if ((v560 != 0) == ((*v546 >> v562) & 1))
                    {
                      unint64_t v569 = v547 + 63;
                      uint64_t v570 = v563 - 8;
                      uint64_t v571 = (v569 >> 3) & 0x3FFFFFF8;
                      uint64_t v572 = v559 - 8;
                      while (v571)
                      {
                        unint64_t v573 = *(void *)(v572 + v571);
                        unint64_t v574 = *(void *)(v570 + v571);
                        v571 -= 8;
                        if (v573 != v574)
                        {
                          if (v573 > v574) {
                            int v551 = 1;
                          }
                          else {
                            int v551 = -1;
                          }
                          goto LABEL_843;
                        }
                      }
                      goto LABEL_835;
                    }
                    if (v560) {
                      int v551 = -1;
                    }
                    else {
                      int v551 = 1;
                    }
                  }
                  else
                  {
                    uint64_t v548 = -v547;
                    uint64_t v549 = *v545 << v548 >> v548;
                    uint64_t v550 = (uint64_t)(*v546 << v548) >> v548;
                    BOOL v79 = v549 < v550;
                    int v551 = v549 > v550;
                    if (v79) {
                      int v551 = -1;
                    }
                  }
LABEL_843:
                  if (v551 < 0) {
                    goto LABEL_834;
                  }
                }
                else if (v542 < v543)
                {
                  goto LABEL_834;
                }
LABEL_835:
                *(void *)uint64_t v529 = *(void *)v523;
                sub_1CD65E4C8(v529 + 8, (unsigned int *)(v523 + 8));
                *(void *)(v529 + 80) = *(void *)(v523 + 80);
                sub_1CCE45CD0(v529 + 88, v523 + 88);
                sub_1CCE45CD0(v529 + 128, v523 + 128);
                *(_OWORD *)(v529 + 168) = *(_OWORD *)(v523 + 168);
                if (v524 > (uint64_t)((unint64_t)(v9 - 2) >> 1))
                {
                  v575 = (long long *)(v523 + 168);
                  if (v523 == v861 - 184)
                  {
                    *(void *)uint64_t v523 = v885;
                    double result = sub_1CD65E4C8(v523 + 8, (unsigned int *)&v886);
                    *(void *)(v523 + 80) = v891;
                    if ((uint64_t *)v523 != &v885)
                    {
                      *(_OWORD *)(v523 + 88) = v892;
                      *(_DWORD *)(v523 + 104) = v893;
                      if (*(_DWORD *)(v523 + 120) >= 0x41u)
                      {
                        double result = *(void *)(v523 + 112);
                        if (result) {
                          double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                        }
                      }
                      *(void *)(v523 + 112) = v894;
                      *(_DWORD *)(v523 + 120) = v895;
                      unsigned int v895 = 0;
                      *(_OWORD *)(v523 + 128) = v896;
                      *(_DWORD *)(v523 + 144) = v897;
                      if (*(_DWORD *)(v523 + 160) >= 0x41u)
                      {
                        double result = *(void *)(v523 + 152);
                        if (result) {
                          double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                        }
                      }
                      *(void *)(v523 + 152) = v898;
                      *(_DWORD *)(v523 + 160) = v899;
                      unsigned int v899 = 0;
                    }
                    long long *v575 = v900;
                  }
                  else
                  {
                    *(void *)uint64_t v523 = *(void *)(v861 - 184);
                    sub_1CD65E4C8(v523 + 8, (unsigned int *)(v861 - 176));
                    *(void *)(v523 + 80) = *(void *)(v861 - 104);
                    sub_1CCE45CD0(v523 + 88, v861 - 96);
                    sub_1CCE45CD0(v523 + 128, v861 - 56);
                    long long *v575 = *(_OWORD *)(v861 - 16);
                    *(void *)(v861 - 184) = v885;
                    double result = sub_1CD65E4C8(v861 - 176, (unsigned int *)&v886);
                    unint64_t v576 = v861;
                    *(void *)(v861 - 104) = v891;
                    if ((long long *)(v861 - 96) != &v892)
                    {
                      *(_OWORD *)(v861 - 96) = v892;
                      *(_DWORD *)(v861 - 80) = v893;
                      if (*(_DWORD *)(v861 - 64) >= 0x41u)
                      {
                        double result = *(void *)(v861 - 72);
                        if (result)
                        {
                          double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                          unint64_t v576 = v861;
                        }
                      }
                      *(void *)(v576 - 72) = v894;
                      *(_DWORD *)(v576 - 64) = v895;
                      unsigned int v895 = 0;
                    }
                    v521 = v854;
                    if ((long long *)(v861 - 56) != &v896)
                    {
                      *(_OWORD *)(v576 - 56) = v896;
                      *(_DWORD *)(v576 - 40) = v897;
                      if (*(_DWORD *)(v576 - 24) >= 0x41u)
                      {
                        double result = *(void *)(v576 - 32);
                        if (result)
                        {
                          double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                          unint64_t v576 = v861;
                        }
                      }
                      *(void *)(v576 - 32) = v898;
                      *(_DWORD *)(v576 - 24) = v899;
                      unsigned int v899 = 0;
                    }
                    *(_OWORD *)(v576 - 16) = v900;
                    uint64_t v577 = v523 + 184 - v862;
                    if (v577 >= 185)
                    {
                      unint64_t v578 = (v577 / 0xB8uLL - 2) >> 1;
                      unsigned int v579 = *(_DWORD *)(v862 + 184 * v578 + 104);
                      unsigned int v580 = *(_DWORD *)(v523 + 104);
                      if (v579 == v580)
                      {
                        unint64_t v581 = v862 + 184 * v578;
                        v582 = (uint64_t *)(v581 + 112);
                        v583 = (uint64_t *)(v523 + 112);
                        uint64_t v584 = *(unsigned int *)(v581 + 120);
                        if (v584 <= 0x40)
                        {
                          uint64_t v585 = *v582;
                          uint64_t v586 = *v583;
                          if (*v582 << -(char)v584 >> -(char)v584 >= *v583 << -(char)v584 >> -(char)v584)
                          {
                            unsigned int v587 = *(_DWORD *)(v523 + 120);
                            goto LABEL_905;
                          }
LABEL_913:
                          uint64_t v901 = *(void *)v523;
                          uint64_t v902 = 1;
                          int64x2_t v903 = v858;
                          int64x2_t v904 = v858;
                          int64x2_t v905 = v858;
                          int64x2_t v906 = v858;
                          sub_1CD65E534((unsigned int *)&v902, (unsigned int *)(v523 + 8));
                          uint64_t v594 = *(void *)(v523 + 80);
                          long long v595 = *(_OWORD *)(v523 + 88);
                          unsigned int v909 = *(_DWORD *)(v523 + 104);
                          long long v908 = v595;
                          unsigned int v911 = *(_DWORD *)(v523 + 120);
                          uint64_t v596 = *(void *)(v523 + 112);
                          uint64_t v907 = v594;
                          uint64_t v910 = v596;
                          *(_DWORD *)(v523 + 120) = 0;
                          long long v597 = *(_OWORD *)(v523 + 128);
                          unsigned int v913 = *(_DWORD *)(v523 + 144);
                          long long v912 = v597;
                          unsigned int v915 = *(_DWORD *)(v523 + 160);
                          uint64_t v914 = *(void *)(v523 + 152);
                          *(_DWORD *)(v523 + 160) = 0;
                          long long v916 = *v575;
                          while (1)
                          {
LABEL_914:
                            unint64_t v598 = v578;
                            uint64_t v599 = v523;
                            uint64_t v523 = v862 + 184 * v598;
                            *(void *)uint64_t v599 = *(void *)v523;
                            sub_1CD65E4C8(v599 + 8, (unsigned int *)(v523 + 8));
                            *(void *)(v599 + 80) = *(void *)(v523 + 80);
                            sub_1CCE45CD0(v599 + 88, v523 + 88);
                            sub_1CCE45CD0(v599 + 128, v523 + 128);
                            *(_OWORD *)(v599 + 168) = *(_OWORD *)(v523 + 168);
                            if (!v598)
                            {
LABEL_959:
                              *(void *)uint64_t v523 = v901;
                              double result = sub_1CD65E4C8(v523 + 8, (unsigned int *)&v902);
                              *(void *)(v523 + 80) = v907;
                              if ((uint64_t *)v523 != &v901)
                              {
                                *(_OWORD *)(v523 + 88) = v908;
                                uint64_t v631 = v862 + 184 * v598;
                                unsigned int v633 = *(_DWORD *)(v631 + 120);
                                v632 = (unsigned int *)(v631 + 120);
                                *(v632 - 4) = v909;
                                v634 = (uint64_t *)(v632 - 2);
                                if (v633 >= 0x41)
                                {
                                  double result = *v634;
                                  if (*v634) {
                                    double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                                  }
                                }
                                uint64_t *v634 = v910;
                                unsigned int *v632 = v911;
                                unsigned int v911 = 0;
                                *(_OWORD *)(v523 + 128) = v912;
                                uint64_t v635 = v862 + 184 * v598;
                                unsigned int v637 = *(_DWORD *)(v635 + 160);
                                v636 = (unsigned int *)(v635 + 160);
                                *(v636 - 4) = v913;
                                v638 = (uint64_t *)(v636 - 2);
                                if (v637 >= 0x41)
                                {
                                  double result = *v638;
                                  if (*v638) {
                                    double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
                                  }
                                }
                                uint64_t *v638 = v914;
                                unsigned int *v636 = v915;
                                unsigned int v915 = 0;
                              }
                              *(_OWORD *)(v523 + 168) = v916;
                              if (v915 >= 0x41)
                              {
                                double result = v914;
                                if (v914) {
                                  double result = MEMORY[0x1D25D9CB0](v914, 0x1000C8000313F17);
                                }
                              }
                              v521 = v854;
                              if (v911 >= 0x41)
                              {
                                double result = v910;
                                if (v910) {
                                  double result = MEMORY[0x1D25D9CB0](v910, 0x1000C8000313F17);
                                }
                              }
                              if ((v902 & 1) == 0) {
                                double result = MEMORY[0x1D25D9CD0](v903.i64[0], 8);
                              }
                              goto LABEL_976;
                            }
                            unint64_t v578 = (v598 - 1) >> 1;
                            unsigned int v600 = *(_DWORD *)(v862 + 184 * v578 + 104);
                            if (v600 == v909)
                            {
                              unint64_t v601 = v862 + 184 * v578;
                              v602 = (uint64_t *)(v601 + 112);
                              uint64_t v603 = *(unsigned int *)(v601 + 120);
                              if (v603 > 0x40)
                              {
                                uint64_t v604 = *v602;
                                uint64_t v611 = *(void *)(*v602 + 8 * ((v603 - 1) >> 6)) & (1 << (v603 - 1));
                                unsigned int v606 = v911;
                                uint64_t v605 = v910;
                                v612 = (uint64_t *)(v910 + 8 * ((v911 - 1) >> 6));
                                if (v911 < 0x41) {
                                  v612 = &v910;
                                }
                                if ((v611 != 0) == (((unint64_t)*v612 >> (v911 - 1)) & 1))
                                {
                                  unint64_t v613 = ((unint64_t)(v603 + 63) >> 3) & 0x3FFFFFF8;
                                  while (v613)
                                  {
                                    unint64_t v614 = *(void *)(v604 + v613 - 8);
                                    unint64_t v615 = *(void *)(v910 + v613 - 8);
                                    v613 -= 8;
                                    if (v614 != v615)
                                    {
                                      if (v614 <= v615) {
                                        goto LABEL_914;
                                      }
                                      break;
                                    }
                                  }
                                }
                                else if (v611)
                                {
                                  continue;
                                }
                              }
                              else
                              {
                                uint64_t v604 = *v602;
                                uint64_t v605 = v910;
                                if (*v602 << -(char)v603 >> -(char)v603 < v910 << -(char)v603 >> -(char)v603) {
                                  continue;
                                }
                                unsigned int v606 = v911;
                              }
                              if (v606 > 0x40)
                              {
                                uint64_t v620 = *(void *)(v605 + 8 * ((v606 - 1) >> 6)) & (1 << (v606 - 1));
                                unsigned int v621 = v603 - 1;
                                if (v603 >= 0x41) {
                                  v602 = (uint64_t *)(v604 + 8 * (v621 >> 6));
                                }
                                if ((v620 != 0) == (((unint64_t)*v602 >> v621) & 1))
                                {
                                  uint64_t v626 = v604 - 8;
                                  unint64_t v627 = (((unint64_t)v606 + 63) >> 3) & 0x3FFFFFF8;
                                  uint64_t v628 = v605 - 8;
                                  while (v627)
                                  {
                                    unint64_t v629 = *(void *)(v628 + v627);
                                    unint64_t v630 = *(void *)(v626 + v627);
                                    v627 -= 8;
                                    if (v629 != v630)
                                    {
                                      if (v629 > v630) {
                                        break;
                                      }
                                      goto LABEL_959;
                                    }
                                  }
                                }
                                else if (v620)
                                {
                                  goto LABEL_959;
                                }
                              }
                              else if (v605 << -(char)v606 >> -(char)v606 < v604 << -(char)v606 >> -(char)v606)
                              {
                                goto LABEL_959;
                              }
                            }
                            else
                            {
                              if (v600 < v909) {
                                continue;
                              }
                              if (v909 < v600) {
                                goto LABEL_959;
                              }
                            }
                            unsigned int v607 = *(_DWORD *)(v862 + 184 * v578 + 144);
                            if (v607 == v913)
                            {
                              unint64_t v608 = v862 + 184 * v578;
                              v609 = (uint64_t *)(v608 + 152);
                              uint64_t v610 = *(unsigned int *)(v608 + 160);
                              if (v610 > 0x40)
                              {
                                uint64_t v616 = *v609;
                                uint64_t v617 = *(void *)(v616 + 8 * ((v610 - 1) >> 6)) & (1 << (v610 - 1));
                                unsigned int v618 = v915 - 1;
                                v619 = &v914;
                                if (v915 >= 0x41) {
                                  v619 = (uint64_t *)(v914 + 8 * (v618 >> 6));
                                }
                                if ((v617 != 0) == (((unint64_t)*v619 >> v618) & 1))
                                {
                                  unint64_t v622 = ((unint64_t)(v610 + 63) >> 3) & 0x3FFFFFF8;
                                  uint64_t v623 = v616 - 8;
                                  while (v622)
                                  {
                                    unint64_t v624 = *(void *)(v623 + v622);
                                    unint64_t v625 = *(void *)(v914 - 8 + v622);
                                    v622 -= 8;
                                    if (v624 != v625)
                                    {
                                      if (v624 <= v625) {
                                        goto LABEL_914;
                                      }
                                      goto LABEL_959;
                                    }
                                  }
                                  goto LABEL_959;
                                }
                                if (!v617) {
                                  goto LABEL_959;
                                }
                              }
                              else if (*v609 << -(char)v610 >> -(char)v610 >= v914 << -(char)v610 >> -(char)v610)
                              {
                                goto LABEL_959;
                              }
                            }
                            else if (v607 >= v913)
                            {
                              goto LABEL_959;
                            }
                          }
                        }
                        uint64_t v585 = *v582;
                        uint64_t v639 = *(void *)(*v582 + 8 * ((v584 - 1) >> 6)) & (1 << (v584 - 1));
                        unsigned int v587 = *(_DWORD *)(v523 + 120);
                        unsigned int v640 = v587 - 1;
                        uint64_t v586 = *(void *)(v523 + 112);
                        if (v587 >= 0x41) {
                          v583 = (uint64_t *)(v586 + 8 * (v640 >> 6));
                        }
                        if ((v639 != 0) != (((unint64_t)*v583 >> v640) & 1))
                        {
                          if (!v639) {
                            goto LABEL_905;
                          }
                          goto LABEL_913;
                        }
                        unint64_t v641 = ((unint64_t)(v584 + 63) >> 3) & 0x3FFFFFF8;
                        do
                        {
                          if (!v641) {
                            goto LABEL_905;
                          }
                          unint64_t v642 = *(void *)(v585 + v641 - 8);
                          unint64_t v643 = *(void *)(v586 + v641 - 8);
                          v641 -= 8;
                        }
                        while (v642 == v643);
                        if (v642 <= v643) {
                          goto LABEL_913;
                        }
LABEL_905:
                        if (v587 > 0x40)
                        {
                          uint64_t v649 = *(void *)(v586 + 8 * ((v587 - 1) >> 6)) & (1 << (v587 - 1));
                          unsigned int v650 = v584 - 1;
                          if (v584 >= 0x41) {
                            v582 = (uint64_t *)(v585 + 8 * (v650 >> 6));
                          }
                          if ((v649 != 0) == (((unint64_t)*v582 >> v650) & 1))
                          {
                            uint64_t v657 = v585 - 8;
                            unint64_t v658 = (((unint64_t)v587 + 63) >> 3) & 0x3FFFFFF8;
                            uint64_t v659 = v586 - 8;
                            do
                            {
                              if (!v658) {
                                goto LABEL_910;
                              }
                              unint64_t v660 = *(void *)(v659 + v658);
                              unint64_t v661 = *(void *)(v657 + v658);
                              v658 -= 8;
                            }
                            while (v660 == v661);
                            if (v660 <= v661) {
                              goto LABEL_976;
                            }
                          }
                          else if (v649)
                          {
                            goto LABEL_976;
                          }
                        }
                        else if (v586 << -(char)v587 >> -(char)v587 < v585 << -(char)v587 >> -(char)v587)
                        {
                          goto LABEL_976;
                        }
                      }
                      else
                      {
                        if (v579 < v580) {
                          goto LABEL_913;
                        }
                        if (v580 < v579) {
                          goto LABEL_976;
                        }
                      }
LABEL_910:
                      unsigned int v588 = *(_DWORD *)(v862 + 184 * v578 + 144);
                      unsigned int v589 = *(_DWORD *)(v523 + 144);
                      if (v588 == v589)
                      {
                        unint64_t v590 = v862 + 184 * v578;
                        v591 = (uint64_t *)(v590 + 152);
                        v592 = (void *)(v523 + 152);
                        uint64_t v593 = *(unsigned int *)(v590 + 160);
                        if (v593 > 0x40)
                        {
                          uint64_t v644 = *v591;
                          uint64_t v645 = *(void *)(v644 + 8 * ((v593 - 1) >> 6)) & (1 << (v593 - 1));
                          unsigned int v646 = *(_DWORD *)(v523 + 160);
                          unsigned int v647 = v646 - 1;
                          uint64_t v648 = *(void *)(v523 + 152);
                          if (v646 >= 0x41) {
                            v592 = (void *)(v648 + 8 * (v647 >> 6));
                          }
                          if ((v645 != 0) == ((*v592 >> v647) & 1))
                          {
                            unint64_t v651 = v593 + 63;
                            uint64_t v652 = v648 - 8;
                            uint64_t v653 = (v651 >> 3) & 0x3FFFFFF8;
                            uint64_t v654 = v644 - 8;
                            do
                            {
                              if (!v653) {
                                goto LABEL_976;
                              }
                              unint64_t v655 = *(void *)(v654 + v653);
                              unint64_t v656 = *(void *)(v652 + v653);
                              v653 -= 8;
                            }
                            while (v655 == v656);
                            if (v655 > v656) {
                              goto LABEL_976;
                            }
                          }
                          else if (!v645)
                          {
                            goto LABEL_976;
                          }
                        }
                        else if (*v591 << -(char)v593 >> -(char)v593 >= (uint64_t)(*v592 << -(char)v593) >> -(char)v593)
                        {
                          goto LABEL_976;
                        }
                      }
                      else if (v588 >= v589)
                      {
                        goto LABEL_976;
                      }
                      goto LABEL_913;
                    }
                  }
LABEL_976:
                  if (v899 >= 0x41)
                  {
                    double result = v898;
                    if (v898) {
                      double result = MEMORY[0x1D25D9CB0](v898, 0x1000C8000313F17);
                    }
                  }
                  if (v895 >= 0x41)
                  {
                    double result = v894;
                    if (v894) {
                      double result = MEMORY[0x1D25D9CB0](v894, 0x1000C8000313F17);
                    }
                  }
                  if ((v886 & 1) == 0) {
                    double result = MEMORY[0x1D25D9CD0](v887.i64[0], 8);
                  }
                  unint64_t v522 = v861 - 184;
                  BOOL v79 = v9-- <= 2;
                  if (v79) {
                    return result;
                  }
                  continue;
                }
                goto LABEL_825;
              }
            }
            uint64_t v390 = (2 * v361) | 1;
            uint64_t v362 = v862 + 184 * v390;
            if (2 * v361 + 2 >= v9) {
              goto LABEL_644;
            }
            unsigned int v391 = *(_DWORD *)(v862 + 184 * v390 + 104);
            unsigned int v392 = *(_DWORD *)(v362 + 288);
            if (v391 == v392)
            {
              uint64_t v393 = v862 + 184 * v390;
              v394 = (uint64_t *)(v393 + 112);
              v395 = (uint64_t *)(v362 + 296);
              uint64_t v396 = *(unsigned int *)(v393 + 120);
              if (v396 > 0x40)
              {
                uint64_t v397 = *v394;
                uint64_t v420 = *(void *)(*v394 + 8 * ((v396 - 1) >> 6)) & (1 << (v396 - 1));
                unsigned int v399 = *(_DWORD *)(v362 + 304);
                unsigned int v421 = v399 - 1;
                uint64_t v398 = *(void *)(v362 + 296);
                if (v399 >= 0x41) {
                  v395 = (uint64_t *)(v398 + 8 * (v421 >> 6));
                }
                if ((v420 != 0) == (((unint64_t)*v395 >> v421) & 1))
                {
                  unint64_t v431 = ((unint64_t)(v396 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v431) {
                      goto LABEL_639;
                    }
                    unint64_t v432 = *(void *)(v397 + v431 - 8);
                    unint64_t v433 = *(void *)(v398 + v431 - 8);
                    v431 -= 8;
                  }
                  while (v432 == v433);
                  if (v432 <= v433)
                  {
LABEL_643:
                    v362 += 184;
                    uint64_t v390 = 2 * v361 + 2;
                    goto LABEL_644;
                  }
                }
                else if (v420)
                {
                  goto LABEL_643;
                }
              }
              else
              {
                uint64_t v397 = *v394;
                uint64_t v398 = *v395;
                if (*v394 << -(char)v396 >> -(char)v396 < *v395 << -(char)v396 >> -(char)v396) {
                  goto LABEL_643;
                }
                unsigned int v399 = *(_DWORD *)(v362 + 304);
              }
LABEL_639:
              if (v399 > 0x40)
              {
                uint64_t v434 = *(void *)(v398 + 8 * ((v399 - 1) >> 6)) & (1 << (v399 - 1));
                unsigned int v435 = v396 - 1;
                if (v396 >= 0x41) {
                  v394 = (uint64_t *)(v397 + 8 * (v435 >> 6));
                }
                if ((v434 != 0) == (((unint64_t)*v394 >> v435) & 1))
                {
                  uint64_t v450 = v397 - 8;
                  unint64_t v451 = (((unint64_t)v399 + 63) >> 3) & 0x3FFFFFF8;
                  uint64_t v452 = v398 - 8;
                  do
                  {
                    if (!v451) {
                      goto LABEL_660;
                    }
                    unint64_t v453 = *(void *)(v452 + v451);
                    unint64_t v454 = *(void *)(v450 + v451);
                    v451 -= 8;
                  }
                  while (v453 == v454);
                  if (v453 <= v454) {
                    goto LABEL_644;
                  }
                }
                else if (v434)
                {
                  goto LABEL_644;
                }
              }
              else if (v398 << -(char)v399 >> -(char)v399 < v397 << -(char)v399 >> -(char)v399)
              {
                goto LABEL_644;
              }
            }
            else
            {
              if (v391 < v392) {
                goto LABEL_643;
              }
              if (v392 < v391) {
                goto LABEL_644;
              }
            }
LABEL_660:
            unsigned int v408 = *(_DWORD *)(v862 + 184 * v390 + 144);
            unsigned int v409 = *(_DWORD *)(v362 + 328);
            if (v408 == v409)
            {
              uint64_t v410 = v862 + 184 * v390;
              v411 = (uint64_t *)(v410 + 152);
              v412 = (void *)(v362 + 336);
              uint64_t v413 = *(unsigned int *)(v410 + 160);
              if (v413 > 0x40)
              {
                uint64_t v445 = *v411;
                uint64_t v446 = *(void *)(v445 + 8 * ((v413 - 1) >> 6)) & (1 << (v413 - 1));
                unsigned int v447 = *(_DWORD *)(v362 + 344);
                unsigned int v448 = v447 - 1;
                uint64_t v449 = *(void *)(v362 + 336);
                if (v447 >= 0x41) {
                  v412 = (void *)(v449 + 8 * (v448 >> 6));
                }
                if ((v446 != 0) == ((*v412 >> v448) & 1))
                {
                  unint64_t v455 = v413 + 63;
                  uint64_t v456 = v449 - 8;
                  uint64_t v457 = (v455 >> 3) & 0x3FFFFFF8;
                  uint64_t v458 = v445 - 8;
                  do
                  {
                    if (!v457) {
                      goto LABEL_644;
                    }
                    unint64_t v459 = *(void *)(v458 + v457);
                    unint64_t v460 = *(void *)(v456 + v457);
                    v457 -= 8;
                  }
                  while (v459 == v460);
                  if (v459 > v460) {
                    int v417 = 1;
                  }
                  else {
                    int v417 = -1;
                  }
                }
                else if (v446)
                {
                  int v417 = -1;
                }
                else
                {
                  int v417 = 1;
                }
              }
              else
              {
                uint64_t v414 = -v413;
                uint64_t v415 = *v411 << v414 >> v414;
                uint64_t v416 = (uint64_t)(*v412 << v414) >> v414;
                BOOL v79 = v415 < v416;
                int v417 = v415 > v416;
                if (v79) {
                  int v417 = -1;
                }
              }
              if (v417 < 0) {
                goto LABEL_643;
              }
            }
            else if (v408 < v409)
            {
              goto LABEL_643;
            }
LABEL_644:
            unsigned int v400 = *(_DWORD *)(v362 + 104);
            if (v400 == v909)
            {
              v401 = (uint64_t *)(v362 + 112);
              uint64_t v402 = *(unsigned int *)(v362 + 120);
              if (v402 > 0x40)
              {
                uint64_t v403 = *v401;
                uint64_t v418 = *(void *)(*v401 + 8 * ((v402 - 1) >> 6)) & (1 << (v402 - 1));
                unsigned int v405 = v911;
                uint64_t v404 = v910;
                v419 = (uint64_t *)(v910 + 8 * ((v911 - 1) >> 6));
                if (v911 < 0x41) {
                  v419 = &v910;
                }
                if ((v418 != 0) == (((unint64_t)*v419 >> (v911 - 1)) & 1))
                {
                  unint64_t v422 = ((unint64_t)(v402 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v422) {
                      goto LABEL_648;
                    }
                    unint64_t v423 = *(void *)(v403 + v422 - 8);
                    unint64_t v424 = *(void *)(v910 + v422 - 8);
                    v422 -= 8;
                  }
                  while (v423 == v424);
                  if (v423 <= v424) {
                    goto LABEL_732;
                  }
                }
                else if (v418)
                {
                  goto LABEL_732;
                }
              }
              else
              {
                uint64_t v403 = *v401;
                uint64_t v404 = v910;
                if (*v401 << -(char)v402 >> -(char)v402 < v910 << -(char)v402 >> -(char)v402) {
                  goto LABEL_732;
                }
                unsigned int v405 = v911;
              }
LABEL_648:
              if (v405 > 0x40)
              {
                uint64_t v429 = *(void *)(v404 + 8 * ((v405 - 1) >> 6)) & (1 << (v405 - 1));
                unsigned int v430 = v402 - 1;
                if (v402 >= 0x41) {
                  v401 = (uint64_t *)(v403 + 8 * (v430 >> 6));
                }
                if ((v429 != 0) == (((unint64_t)*v401 >> v430) & 1))
                {
                  uint64_t v440 = v403 - 8;
                  unint64_t v441 = (((unint64_t)v405 + 63) >> 3) & 0x3FFFFFF8;
                  uint64_t v442 = v404 - 8;
                  do
                  {
                    if (!v441) {
                      goto LABEL_653;
                    }
                    unint64_t v443 = *(void *)(v442 + v441);
                    unint64_t v444 = *(void *)(v440 + v441);
                    v441 -= 8;
                  }
                  while (v443 == v444);
                  uint64_t v384 = v388;
                  uint64_t v361 = v390;
                  if (v443 <= v444) {
                    continue;
                  }
                }
                else
                {
                  uint64_t v384 = v388;
                  uint64_t v361 = v390;
                  if (v429) {
                    continue;
                  }
                }
              }
              else
              {
                uint64_t v384 = v388;
                uint64_t v361 = v390;
                if (v404 << -(char)v405 >> -(char)v405 < v403 << -(char)v405 >> -(char)v405) {
                  continue;
                }
              }
            }
            else
            {
              if (v400 < v909) {
                goto LABEL_732;
              }
              uint64_t v384 = v388;
              uint64_t v361 = v390;
              if (v909 < v400) {
                continue;
              }
            }
LABEL_653:
            unsigned int v406 = *(_DWORD *)(v362 + 144);
            if (v406 == v913)
            {
              uint64_t v407 = *(unsigned int *)(v362 + 160);
              if (v407 > 0x40)
              {
                uint64_t v425 = *(void *)(v362 + 152);
                uint64_t v426 = *(void *)(v425 + 8 * ((v407 - 1) >> 6)) & (1 << (v407 - 1));
                unsigned int v427 = v915 - 1;
                v428 = &v914;
                if (v915 >= 0x41) {
                  v428 = (uint64_t *)(v914 + 8 * (v427 >> 6));
                }
                if ((v426 != 0) == (((unint64_t)*v428 >> v427) & 1))
                {
                  unint64_t v436 = ((unint64_t)(v407 + 63) >> 3) & 0x3FFFFFF8;
                  uint64_t v437 = v425 - 8;
                  do
                  {
                    if (!v436)
                    {
                      uint64_t v384 = v388;
                      uint64_t v361 = v390;
                      goto LABEL_633;
                    }
                    unint64_t v438 = *(void *)(v437 + v436);
                    unint64_t v439 = *(void *)(v914 - 8 + v436);
                    v436 -= 8;
                  }
                  while (v438 == v439);
                  uint64_t v384 = v388;
                  uint64_t v361 = v390;
                  if (v438 <= v439) {
                    goto LABEL_732;
                  }
                }
                else
                {
                  uint64_t v384 = v388;
                  uint64_t v361 = v390;
                  if (v426) {
                    goto LABEL_732;
                  }
                }
              }
              else
              {
                uint64_t v384 = v388;
                uint64_t v361 = v390;
                if ((uint64_t)(*(void *)(v362 + 152) << -(char)v407) >> -(char)v407 < v914 << -(char)v407 >> -(char)v407) {
                  goto LABEL_732;
                }
              }
            }
            else
            {
              uint64_t v384 = v388;
              uint64_t v361 = v390;
              if (v406 < v913) {
                goto LABEL_732;
              }
            }
          }
        }
        uint64_t v369 = *v366;
        uint64_t v477 = *(void *)(*v366 + 8 * ((v368 - 1) >> 6)) & (1 << (v368 - 1));
        unsigned int v371 = *(_DWORD *)(v362 + 304);
        unsigned int v478 = v371 - 1;
        uint64_t v370 = *(void *)(v362 + 296);
        if (v371 >= 0x41) {
          v367 = (uint64_t *)(v370 + 8 * (v478 >> 6));
        }
        if ((v477 != 0) == (((unint64_t)*v367 >> v478) & 1))
        {
          unint64_t v489 = ((unint64_t)(v368 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v489) {
              goto LABEL_615;
            }
            unint64_t v490 = *(void *)(v369 + v489 - 8);
            unint64_t v491 = *(void *)(v370 + v489 - 8);
            v489 -= 8;
          }
          while (v490 == v491);
          if (v490 <= v491) {
            goto LABEL_619;
          }
        }
        else if (v477)
        {
          goto LABEL_619;
        }
LABEL_615:
        if (v371 > 0x40)
        {
          uint64_t v492 = *(void *)(v370 + 8 * ((v371 - 1) >> 6)) & (1 << (v371 - 1));
          unsigned int v493 = v368 - 1;
          if (v368 >= 0x41) {
            v366 = (uint64_t *)(v369 + 8 * (v493 >> 6));
          }
          if ((v492 != 0) == (((unint64_t)*v366 >> v493) & 1))
          {
            uint64_t v510 = v369 - 8;
            unint64_t v511 = (((unint64_t)v371 + 63) >> 3) & 0x3FFFFFF8;
            uint64_t v512 = v370 - 8;
            do
            {
              if (!v511) {
                goto LABEL_743;
              }
              unint64_t v513 = *(void *)(v512 + v511);
              unint64_t v514 = *(void *)(v510 + v511);
              v511 -= 8;
            }
            while (v513 == v514);
            if (v513 <= v514) {
              goto LABEL_620;
            }
          }
          else if (v492)
          {
            goto LABEL_620;
          }
        }
        else if (v370 << -(char)v371 >> -(char)v371 < v369 << -(char)v371 >> -(char)v371)
        {
          goto LABEL_620;
        }
      }
      else
      {
        if (v363 < v364) {
          goto LABEL_619;
        }
        if (v364 < v363) {
          goto LABEL_620;
        }
      }
LABEL_743:
      unsigned int v464 = *(_DWORD *)(v359 + 184 * v361 + 144);
      unsigned int v465 = *(_DWORD *)(v362 + 328);
      if (v464 == v465)
      {
        uint64_t v466 = v359 + 184 * v361;
        v467 = (uint64_t *)(v466 + 152);
        v468 = (void *)(v362 + 336);
        uint64_t v469 = *(unsigned int *)(v466 + 160);
        if (v469 > 0x40)
        {
          uint64_t v505 = *v467;
          uint64_t v506 = *(void *)(v505 + 8 * ((v469 - 1) >> 6)) & (1 << (v469 - 1));
          unsigned int v507 = *(_DWORD *)(v362 + 344);
          unsigned int v508 = v507 - 1;
          uint64_t v509 = *(void *)(v362 + 336);
          if (v507 >= 0x41) {
            v468 = (void *)(v509 + 8 * (v508 >> 6));
          }
          if ((v506 != 0) == ((*v468 >> v508) & 1))
          {
            unint64_t v515 = v469 + 63;
            uint64_t v516 = v509 - 8;
            uint64_t v517 = (v515 >> 3) & 0x3FFFFFF8;
            uint64_t v518 = v505 - 8;
            do
            {
              if (!v517) {
                goto LABEL_620;
              }
              unint64_t v519 = *(void *)(v518 + v517);
              unint64_t v520 = *(void *)(v516 + v517);
              v517 -= 8;
            }
            while (v519 == v520);
            if (v519 > v520) {
              int v473 = 1;
            }
            else {
              int v473 = -1;
            }
          }
          else if (v506)
          {
            int v473 = -1;
          }
          else
          {
            int v473 = 1;
          }
        }
        else
        {
          uint64_t v470 = -v469;
          uint64_t v471 = *v467 << v470 >> v470;
          uint64_t v472 = (uint64_t)(*v468 << v470) >> v470;
          BOOL v79 = v471 < v472;
          int v473 = v471 > v472;
          if (v79) {
            int v473 = -1;
          }
        }
        if (v473 < 0) {
          goto LABEL_619;
        }
      }
      else if (v464 < v465)
      {
        goto LABEL_619;
      }
      goto LABEL_620;
    }
    if ((unint64_t)v8 >= 0x5C01)
    {
      sub_1CCE4BB84(v7, v7 + 184 * ((unint64_t)v9 >> 1), (uint64_t)v853);
      uint64_t v10 = 184 * ((unint64_t)v9 >> 1);
      sub_1CCE4BB84(v7 + 184, v10 + v7 - 184, v851);
      sub_1CCE4BB84(v7 + 368, v7 + 184 + v10, v850);
      sub_1CCE4BB84(v10 + v7 - 184, v7 + v10, v7 + 184 + v10);
      sub_1CCE4D36C((uint64_t *)v7, (uint64_t *)(v7 + v10));
    }
    else
    {
      sub_1CCE4BB84(v7 + 184 * ((unint64_t)v9 >> 1), v7, (uint64_t)v853);
    }
    --a3;
    if (a4) {
      goto LABEL_31;
    }
    unsigned int v11 = *(_DWORD *)(v7 - 80);
    unsigned int v12 = *(_DWORD *)(v7 + 104);
    if (v11 != v12)
    {
      if (v11 < v12) {
        goto LABEL_31;
      }
      if (v12 < v11) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
    uint64_t v13 = (uint64_t *)(v7 - 72);
    unint64_t v14 = (uint64_t *)(v7 + 112);
    uint64_t v15 = *(unsigned int *)(v7 - 64);
    if (v15 > 0x40)
    {
      uint64_t v16 = *(void *)(v7 - 72);
      uint64_t v204 = *(void *)(v16 + 8 * ((v15 - 1) >> 6)) & (1 << (v15 - 1));
      unsigned int v18 = *(_DWORD *)(v7 + 120);
      unsigned int v205 = v18 - 1;
      uint64_t v17 = *(void *)(v7 + 112);
      if (v18 >= 0x41) {
        unint64_t v14 = (uint64_t *)(v17 + 8 * (v205 >> 6));
      }
      if ((v204 != 0) == (((unint64_t)*v14 >> v205) & 1))
      {
        unint64_t v314 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v314) {
            goto LABEL_15;
          }
          unint64_t v315 = *(void *)(v16 + v314 - 8);
          unint64_t v316 = *(void *)(v17 + v314 - 8);
          v314 -= 8;
        }
        while (v315 == v316);
        if (v315 <= v316) {
          goto LABEL_31;
        }
      }
      else if (v204)
      {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v16 = *v13;
      uint64_t v17 = *v14;
      if (*v13 << -(char)v15 >> -(char)v15 < *v14 << -(char)v15 >> -(char)v15) {
        goto LABEL_31;
      }
      unsigned int v18 = *(_DWORD *)(v7 + 120);
    }
LABEL_15:
    if (v18 <= 0x40)
    {
      if (v17 << -(char)v18 >> -(char)v18 < v16 << -(char)v18 >> -(char)v18) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
    uint64_t v323 = *(void *)(v17 + 8 * ((v18 - 1) >> 6)) & (1 << (v18 - 1));
    unsigned int v324 = v15 - 1;
    if (v15 >= 0x41) {
      uint64_t v13 = (uint64_t *)(v16 + 8 * (v324 >> 6));
    }
    if ((v323 != 0) == (((unint64_t)*v13 >> v324) & 1))
    {
      uint64_t v333 = v16 - 8;
      unint64_t v334 = (((unint64_t)v18 + 63) >> 3) & 0x3FFFFFF8;
      uint64_t v335 = v17 - 8;
      do
      {
        if (!v334) {
          goto LABEL_20;
        }
        unint64_t v336 = *(void *)(v335 + v334);
        unint64_t v337 = *(void *)(v333 + v334);
        v334 -= 8;
      }
      while (v336 == v337);
      if (v336 > v337) {
        goto LABEL_20;
      }
LABEL_23:
      uint64_t v901 = *(void *)v7;
      uint64_t v902 = 1;
      int64x2_t v903 = v852;
      int64x2_t v904 = v852;
      int64x2_t v905 = v852;
      int64x2_t v906 = v852;
      sub_1CD65E534((unsigned int *)&v902, (unsigned int *)(v7 + 8));
      uint64_t v22 = *(void *)(v7 + 80);
      long long v23 = *(_OWORD *)(v7 + 88);
      unsigned int v909 = *(_DWORD *)(v7 + 104);
      long long v908 = v23;
      unsigned int v911 = *(_DWORD *)(v7 + 120);
      uint64_t v24 = *(void *)(v7 + 112);
      uint64_t v907 = v22;
      uint64_t v910 = v24;
      *(_DWORD *)(v7 + 120) = 0;
      long long v25 = *(_OWORD *)(v7 + 128);
      unsigned int v913 = *(_DWORD *)(v7 + 144);
      long long v912 = v25;
      unsigned int v915 = *(_DWORD *)(v7 + 160);
      uint64_t v26 = *(void *)(v7 + 152);
      uint64_t v914 = v26;
      *(_DWORD *)(v7 + 160) = 0;
      long long v916 = *(_OWORD *)(v7 + 168);
      unsigned int v27 = *(_DWORD *)(v860 - 80);
      uint64_t v848 = v7 + 8;
      if (v909 == v27)
      {
        if (v911 > 0x40)
        {
          uint64_t v325 = *(void *)(v24 + 8 * ((v911 - 1) >> 6)) & (1 << (v911 - 1));
          unsigned int v29 = *(_DWORD *)(v860 - 64);
          uint64_t v28 = *(void *)(v860 - 72);
          v326 = (uint64_t *)(v28 + 8 * ((v29 - 1) >> 6));
          if (v29 < 0x41) {
            v326 = v845;
          }
          if ((v325 != 0) == (((unint64_t)*v326 >> (v29 - 1)) & 1))
          {
            unint64_t v338 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              if (!v338) {
                goto LABEL_27;
              }
              unint64_t v339 = *(void *)(v24 - 8 + v338);
              unint64_t v340 = *(void *)(v28 + v338 - 8);
              v338 -= 8;
            }
            while (v339 == v340);
            if (v339 > v340) {
              goto LABEL_27;
            }
          }
          else if (!v325)
          {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v28 = *v845;
          if (v24 << -(char)v911 >> -(char)v911 >= *v845 << -(char)v911 >> -(char)v911)
          {
            unsigned int v29 = *(_DWORD *)(v860 - 64);
LABEL_27:
            if (v29 <= 0x40)
            {
              if (v28 << -(char)v29 >> -(char)v29 < v24 << -(char)v29 >> -(char)v29) {
                goto LABEL_345;
              }
              goto LABEL_334;
            }
            uint64_t v341 = *(void *)(v28 + 8 * ((v29 - 1) >> 6)) & (1 << (v29 - 1));
            unsigned int v342 = v911 - 1;
            if (v911 >= 0x41) {
              v343 = (uint64_t *)(v24 + 8 * (v342 >> 6));
            }
            else {
              v343 = &v910;
            }
            if ((v341 != 0) == (((unint64_t)*v343 >> v342) & 1))
            {
              unint64_t v349 = (((unint64_t)v29 + 63) >> 3) & 0x3FFFFFF8;
              uint64_t v350 = v28 - 8;
              do
              {
                if (!v349) {
                  goto LABEL_334;
                }
                unint64_t v351 = *(void *)(v350 + v349);
                unint64_t v352 = *(void *)(v24 - 8 + v349);
                v349 -= 8;
              }
              while (v351 == v352);
              if (v351 > v352) {
                goto LABEL_334;
              }
LABEL_345:
              uint64_t v6 = (uint64_t *)(v7 + 184);
              if (v7 + 184 >= v860) {
                goto LABEL_394;
              }
              uint64_t v206 = 1 << (v911 - 1);
              if (v911 >= 0x41) {
                std::string v207 = (uint64_t *)(v24 + 8 * ((v911 - 1) >> 6));
              }
              else {
                std::string v207 = &v910;
              }
              uint64_t v208 = v24 - 8;
              uint64_t v209 = (uint64_t *)v7;
              while (1)
              {
                BOOL v210 = v209;
                uint64_t v209 = v6;
                unsigned int v211 = *((_DWORD *)v210 + 72);
                if (v909 == v211)
                {
                  v212 = v210 + 37;
                  if (v911 > 0x40)
                  {
                    uint64_t v866 = *(void *)(v24 + 8 * ((v911 - 1) >> 6)) & v206;
                    unsigned int v214 = *((_DWORD *)v210 + 76);
                    uint64_t v213 = v210[37];
                    if (v214 >= 0x41) {
                      v212 = (uint64_t *)(v213 + 8 * ((v214 - 1) >> 6));
                    }
                    char v217 = (v866 != 0) ^ ((unint64_t)*v212 >> (v214 - 1));
                    unint64_t v218 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                    if (v217)
                    {
                      if (v866) {
                        goto LABEL_393;
                      }
                    }
                    else
                    {
                      while (v218)
                      {
                        unint64_t v875 = *(void *)(v208 + v218);
                        unint64_t v867 = *(void *)(v213 + v218 - 8);
                        v218 -= 8;
                        if (v875 != v867)
                        {
                          if (v875 <= v867) {
                            goto LABEL_393;
                          }
                          break;
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v213 = *v212;
                    if (v24 << -(uint64_t)v911 >> -(uint64_t)v911 < *v212 << (64 - v911) >> (64 - v911)) {
                      goto LABEL_393;
                    }
                    unsigned int v214 = *((_DWORD *)v210 + 76);
                  }
                  if (v214 > 0x40)
                  {
                    uint64_t v881 = *(void *)(v213 + 8 * ((v214 - 1) >> 6)) & (1 << (v214 - 1));
                    if ((v881 != 0) == ((*v207 & v206) != 0))
                    {
                      unint64_t v226 = (((unint64_t)v214 + 63) >> 3) & 0x3FFFFFF8;
                      uint64_t v227 = v213 - 8;
                      while (v226)
                      {
                        unint64_t v228 = *(void *)(v227 + v226);
                        unint64_t v229 = *(void *)(v208 + v226);
                        v226 -= 8;
                        if (v228 != v229)
                        {
                          if (v228 <= v229) {
                            goto LABEL_364;
                          }
                          break;
                        }
                      }
                    }
                    else if (v881)
                    {
                      goto LABEL_364;
                    }
                  }
                  else if (v213 << -(char)v214 >> -(char)v214 < v24 << -(char)v214 >> -(char)v214)
                  {
                    goto LABEL_364;
                  }
                }
                else
                {
                  if (v909 < v211) {
                    goto LABEL_393;
                  }
                  if (v211 < v909) {
                    goto LABEL_364;
                  }
                }
                unsigned int v215 = *((_DWORD *)v210 + 82);
                if (v913 == v215)
                {
                  int v216 = v210 + 42;
                  if (v915 > 0x40)
                  {
                    uint64_t v876 = *(void *)(v26 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
                    unsigned int v219 = *((_DWORD *)v210 + 86);
                    unsigned int v220 = v219 - 1;
                    uint64_t v221 = v210[42];
                    if (v219 >= 0x41) {
                      int v216 = (void *)(v221 + 8 * (v220 >> 6));
                    }
                    if (((v876 != 0) ^ (*v216 >> v220)))
                    {
                      if (v876)
                      {
LABEL_393:
                        uint64_t v6 = v209;
                        goto LABEL_394;
                      }
                    }
                    else
                    {
                      uint64_t v222 = v221 - 8;
                      unint64_t v223 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
                      while (v223)
                      {
                        unint64_t v224 = *(void *)(v26 - 8 + v223);
                        unint64_t v225 = *(void *)(v222 + v223);
                        v223 -= 8;
                        if (v224 != v225)
                        {
                          if (v224 <= v225) {
                            goto LABEL_393;
                          }
                          break;
                        }
                      }
                    }
                  }
                  else if (v26 << -(uint64_t)v915 >> -(uint64_t)v915 < (uint64_t)(*v216 << (64 - v915)) >> (64 - v915))
                  {
                    goto LABEL_393;
                  }
                }
                else if (v913 < v215)
                {
                  goto LABEL_393;
                }
LABEL_364:
                uint64_t v6 = v209 + 23;
                if ((unint64_t)(v209 + 23) >= v860) {
                  goto LABEL_394;
                }
              }
            }
            if (v341) {
              goto LABEL_345;
            }
LABEL_334:
            unsigned int v203 = *(_DWORD *)(v860 - 40);
            if (v913 == v203)
            {
              if (v915 > 0x40)
              {
                uint64_t v344 = *(void *)(v26 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
                unsigned int v345 = *(_DWORD *)(v860 - 24);
                unsigned int v346 = v345 - 1;
                uint64_t v347 = *(void *)(v860 - 32);
                BOOL v4 = v345 >= 0x41;
                v348 = v844;
                if (v4) {
                  v348 = (uint64_t *)(v347 + 8 * (v346 >> 6));
                }
                if ((v344 != 0) == (((unint64_t)*v348 >> v346) & 1))
                {
                  unint64_t v353 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v353) {
                      goto LABEL_345;
                    }
                    unint64_t v354 = *(void *)(v26 - 8 + v353);
                    unint64_t v355 = *(void *)(v347 - 8 + v353);
                    v353 -= 8;
                  }
                  while (v354 == v355);
                  if (v354 > v355) {
                    goto LABEL_345;
                  }
                }
                else if (!v344)
                {
                  goto LABEL_345;
                }
              }
              else if (v26 << -(uint64_t)v915 >> -(uint64_t)v915 >= *v844 << -(uint64_t)v915 >> -(uint64_t)v915)
              {
                goto LABEL_345;
              }
            }
            else if (v913 >= v203)
            {
              goto LABEL_345;
            }
          }
        }
      }
      else if (v909 >= v27)
      {
        if (v27 < v909) {
          goto LABEL_345;
        }
        goto LABEL_334;
      }
      uint64_t v180 = 1 << (v911 - 1);
      if (v911 >= 0x41) {
        int v181 = (uint64_t *)(v24 + 8 * ((v911 - 1) >> 6));
      }
      else {
        int v181 = &v910;
      }
      uint64_t v6 = (uint64_t *)v7;
      uint64_t v182 = v24 - 8;
      do
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                while (1)
                {
LABEL_291:
                  while (1)
                  {
                    uint64_t v183 = v6;
                    v6 += 23;
                    unsigned int v184 = *((_DWORD *)v183 + 72);
                    if (v909 == v184) {
                      break;
                    }
                    if (v909 < v184) {
                      goto LABEL_394;
                    }
                    if (v184 >= v909) {
                      goto LABEL_300;
                    }
                  }
                  unsigned int v185 = v183 + 37;
                  if (v911 > 0x40)
                  {
                    uint64_t v864 = *(void *)(v24 + 8 * ((v911 - 1) >> 6)) & v180;
                    unsigned int v187 = *((_DWORD *)v183 + 76);
                    uint64_t v186 = v183[37];
                    if (v187 >= 0x41) {
                      unsigned int v185 = (uint64_t *)(v186 + 8 * ((v187 - 1) >> 6));
                    }
                    char v190 = (v864 != 0) ^ ((unint64_t)*v185 >> (v187 - 1));
                    unint64_t v191 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                    if (v190)
                    {
                      if (v864) {
                        goto LABEL_394;
                      }
                    }
                    else
                    {
                      while (v191)
                      {
                        unint64_t v873 = *(void *)(v182 + v191);
                        unint64_t v865 = *(void *)(v186 + v191 - 8);
                        v191 -= 8;
                        if (v873 != v865)
                        {
                          if (v873 <= v865) {
                            goto LABEL_394;
                          }
                          break;
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v186 = *v185;
                    if (v24 << -(uint64_t)v911 >> -(uint64_t)v911 < *v185 << (64 - v911) >> (64 - v911)) {
                      goto LABEL_394;
                    }
                    unsigned int v187 = *((_DWORD *)v183 + 76);
                  }
                  if (v187 > 0x40) {
                    break;
                  }
                  if (v186 << -(char)v187 >> -(char)v187 >= v24 << -(char)v187 >> -(char)v187) {
                    goto LABEL_300;
                  }
                }
                uint64_t v880 = *(void *)(v186 + 8 * ((v187 - 1) >> 6)) & (1 << (v187 - 1));
                if ((v880 != 0) == ((*v181 & v180) != 0)) {
                  break;
                }
                if (!v880) {
                  goto LABEL_300;
                }
              }
              unint64_t v199 = (((unint64_t)v187 + 63) >> 3) & 0x3FFFFFF8;
              uint64_t v200 = v186 - 8;
              while (v199)
              {
                unint64_t v201 = *(void *)(v200 + v199);
                unint64_t v202 = *(void *)(v182 + v199);
                v199 -= 8;
                if (v201 != v202)
                {
                  if (v201 <= v202) {
                    goto LABEL_291;
                  }
                  break;
                }
              }
LABEL_300:
              unsigned int v188 = *((_DWORD *)v183 + 82);
              if (v913 == v188) {
                break;
              }
              if (v913 < v188) {
                goto LABEL_394;
              }
            }
            int v189 = v183 + 42;
            if (v915 > 0x40) {
              break;
            }
            if (v26 << -(uint64_t)v915 >> -(uint64_t)v915 < (uint64_t)(*v189 << (64 - v915)) >> (64 - v915)) {
              goto LABEL_394;
            }
          }
          uint64_t v874 = *(void *)(v26 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
          unsigned int v192 = *((_DWORD *)v183 + 86);
          unsigned int v193 = v192 - 1;
          uint64_t v194 = v183[42];
          if (v192 >= 0x41) {
            int v189 = (void *)(v194 + 8 * (v193 >> 6));
          }
          if (((v874 != 0) ^ (*v189 >> v193))) {
            break;
          }
          uint64_t v195 = v194 - 8;
          unint64_t v196 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
          while (v196)
          {
            unint64_t v197 = *(void *)(v26 - 8 + v196);
            unint64_t v198 = *(void *)(v195 + v196);
            v196 -= 8;
            if (v197 != v198)
            {
              if (v197 <= v198) {
                goto LABEL_394;
              }
              goto LABEL_291;
            }
          }
        }
      }
      while (!v874);
LABEL_394:
      v230 = (uint64_t *)v860;
      if ((unint64_t)v6 >= v860) {
        goto LABEL_527;
      }
      uint64_t v231 = 1 << (v911 - 1);
      if (v911 >= 0x41) {
        v232 = (uint64_t *)(v24 + 8 * ((v911 - 1) >> 6));
      }
      else {
        v232 = &v910;
      }
      uint64_t v233 = v24 - 8;
      v230 = (uint64_t *)v860;
      while (2)
      {
        uint64_t v234 = v230;
        v230 -= 23;
        BOOL v235 = v909 >= v27;
        if (v909 != v27) {
          goto LABEL_409;
        }
        int v236 = v234 - 9;
        if (v911 <= 0x40)
        {
          uint64_t v237 = *v236;
          if (v24 << -(uint64_t)v911 >> -(uint64_t)v911 >= *v236 << (64 - v911) >> (64
                                                                                                  - v911))
          {
            unsigned int v238 = *((_DWORD *)v234 - 16);
            goto LABEL_403;
          }
LABEL_410:
          unsigned int v27 = *((_DWORD *)v234 - 66);
          continue;
        }
        break;
      }
      uint64_t v868 = *(void *)(v24 + 8 * ((v911 - 1) >> 6)) & v231;
      unsigned int v238 = *((_DWORD *)v234 - 16);
      uint64_t v237 = *(v234 - 9);
      uint64_t v240 = (uint64_t *)(v237 + 8 * ((v238 - 1) >> 6));
      if (v238 < 0x41) {
        uint64_t v240 = v234 - 9;
      }
      unint64_t v241 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
      if (((v868 != 0) ^ ((unint64_t)*v240 >> (v238 - 1))))
      {
        if (v868) {
          goto LABEL_410;
        }
      }
      else
      {
        while (v241)
        {
          unint64_t v242 = *(void *)(v233 + v241);
          unint64_t v243 = *(void *)(v237 + v241 - 8);
          v241 -= 8;
          if (v242 != v243)
          {
            if (v242 <= v243) {
              goto LABEL_410;
            }
            break;
          }
        }
      }
LABEL_403:
      if (v238 > 0x40)
      {
        uint64_t v244 = *(void *)(v237 + 8 * ((v238 - 1) >> 6)) & (1 << (v238 - 1));
        if ((v244 != 0) == ((*v232 & v231) != 0))
        {
          unint64_t v245 = (((unint64_t)v238 + 63) >> 3) & 0x3FFFFFF8;
          uint64_t v246 = v237 - 8;
          while (v245)
          {
            unint64_t v247 = *(void *)(v246 + v245);
            unint64_t v248 = *(void *)(v233 + v245);
            v245 -= 8;
            if (v247 != v248)
            {
              if (v247 <= v248) {
                goto LABEL_527;
              }
              break;
            }
          }
        }
        else if (v244)
        {
          goto LABEL_527;
        }
      }
      else if (v237 << -(char)v238 >> -(char)v238 < v24 << -(char)v238 >> -(char)v238)
      {
        goto LABEL_527;
      }
      unsigned int v239 = *((_DWORD *)v234 - 10);
      BOOL v235 = v913 >= v239;
      if (v913 != v239)
      {
LABEL_409:
        if (v235) {
          goto LABEL_527;
        }
        goto LABEL_410;
      }
      if (v915 <= 0x40)
      {
        if (v26 << -(uint64_t)v915 >> -(uint64_t)v915 >= *(v234 - 4) << (64 - v915) >> (64 - v915)) {
          goto LABEL_527;
        }
        goto LABEL_410;
      }
      v877 = v232;
      uint64_t v869 = *(void *)(v26 + 8 * ((v915 - 1) >> 6)) & (1 << (v915 - 1));
      unsigned int v249 = *((_DWORD *)v234 - 6);
      uint64_t v250 = *(v234 - 4);
      int v251 = (uint64_t *)(v250 + 8 * ((v249 - 1) >> 6));
      if (v249 < 0x41) {
        int v251 = v234 - 4;
      }
      if (((v869 != 0) ^ ((unint64_t)*v251 >> (v249 - 1))))
      {
        v232 = v877;
        if (!v869) {
          goto LABEL_527;
        }
        goto LABEL_410;
      }
      unint64_t v252 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v252) {
          goto LABEL_527;
        }
        unint64_t v253 = *(void *)(v26 - 8 + v252);
        unint64_t v254 = *(void *)(v250 - 8 + v252);
        v252 -= 8;
      }
      while (v253 == v254);
      v232 = v877;
      if (v253 <= v254) {
        goto LABEL_410;
      }
LABEL_527:
      if (v6 < v230)
      {
        sub_1CCE4D36C(v6, v230);
        unint64_t v255 = (void *)(v910 + 8 * ((v911 - 1) >> 6));
        uint64_t v256 = 1 << (v911 - 1);
        char v257 = 64 - v911;
        uint64_t v258 = v910 << -(uint64_t)v911 >> -(uint64_t)v911;
        if (v911 >= 0x41) {
          v259 = (uint64_t *)(v910 + 8 * ((v911 - 1) >> 6));
        }
        else {
          v259 = &v910;
        }
        v870 = v259;
        uint64_t v882 = (v915 - 1) >> 6;
        uint64_t v878 = 1 << (v915 - 1);
        char v260 = 64 - v915;
        uint64_t v261 = v914 << -(uint64_t)v915 >> -(uint64_t)v915;
        uint64_t v262 = v910 - 8;
        uint64_t v263 = v914 - 8;
        while (1)
        {
          while (1)
          {
LABEL_443:
            while (1)
            {
              __int16 v264 = v6;
              v6 += 23;
              unsigned int v265 = *((_DWORD *)v264 + 72);
              if (v909 == v265) {
                break;
              }
              if (v909 < v265) {
                goto LABEL_515;
              }
              if (v265 >= v909) {
                goto LABEL_452;
              }
            }
            uint64_t v266 = v264 + 37;
            if (v911 > 0x40)
            {
              unsigned int v268 = *((_DWORD *)v264 + 76);
              unsigned int v271 = v268 - 1;
              uint64_t v267 = v264[37];
              if (v268 >= 0x41) {
                uint64_t v266 = (uint64_t *)(v267 + 8 * (v271 >> 6));
              }
              char v272 = ((*v255 & v256) != 0) ^ ((unint64_t)*v266 >> v271);
              unint64_t v273 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
              if (v272)
              {
                if ((*v255 & v256) != 0) {
                  goto LABEL_515;
                }
              }
              else
              {
                do
                {
                  if (!v273) {
                    goto LABEL_447;
                  }
                  unint64_t v274 = *(void *)(v262 + v273);
                  unint64_t v275 = *(void *)(v267 + v273 - 8);
                  v273 -= 8;
                }
                while (v274 == v275);
                if (v274 <= v275) {
                  goto LABEL_515;
                }
              }
            }
            else
            {
              uint64_t v267 = *v266;
              if (v258 < *v266 << v257 >> v257) {
                goto LABEL_515;
              }
              unsigned int v268 = *((_DWORD *)v264 + 76);
            }
LABEL_447:
            if (v268 > 0x40) {
              break;
            }
            if (v267 << -(char)v268 >> -(char)v268 >= v910 << -(char)v268 >> -(char)v268) {
              goto LABEL_452;
            }
          }
          uint64_t v280 = *(void *)(v267 + 8 * ((v268 - 1) >> 6)) & (1 << (v268 - 1));
          if ((v280 != 0) == ((*v870 & v256) != 0))
          {
            unint64_t v285 = (((unint64_t)v268 + 63) >> 3) & 0x3FFFFFF8;
            uint64_t v286 = v267 - 8;
            do
            {
              if (!v285) {
                goto LABEL_452;
              }
              unint64_t v287 = *(void *)(v286 + v285);
              unint64_t v288 = *(void *)(v262 + v285);
              v285 -= 8;
            }
            while (v287 == v288);
            if (v287 > v288) {
              goto LABEL_452;
            }
          }
          else if (!v280)
          {
LABEL_452:
            unsigned int v269 = *((_DWORD *)v264 + 82);
            if (v913 == v269)
            {
              int64x2_t v270 = v264 + 42;
              if (v915 > 0x40)
              {
                uint64_t v276 = *(void *)(v914 + 8 * v882) & v878;
                unsigned int v277 = *((_DWORD *)v264 + 86);
                uint64_t v278 = v264[42];
                unsigned int v279 = (void *)(v278 + 8 * ((v277 - 1) >> 6));
                if (v277 < 0x41) {
                  unsigned int v279 = v270;
                }
                if (((v276 != 0) ^ (*v279 >> (v277 - 1))))
                {
                  if (v276)
                  {
                    while (1)
                    {
                      while (1)
                      {
LABEL_515:
                        while (1)
                        {
                          uint64_t v309 = v230;
                          v230 -= 23;
                          unsigned int v310 = *((_DWORD *)v309 - 20);
                          if (v909 == v310) {
                            break;
                          }
                          if (v909 >= v310)
                          {
                            if (v310 < v909) {
                              goto LABEL_527;
                            }
                            goto LABEL_524;
                          }
                        }
                        uint64_t v311 = v309 - 9;
                        if (v911 <= 0x40) {
                          break;
                        }
                        unsigned int v289 = *((_DWORD *)v309 - 16);
                        uint64_t v290 = *(v309 - 9);
                        int64x2_t v291 = (uint64_t *)(v290 + 8 * ((v289 - 1) >> 6));
                        if (v289 < 0x41) {
                          int64x2_t v291 = v309 - 9;
                        }
                        unint64_t v292 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                        if (((((*v255 & v256) != 0) ^ ((unint64_t)*v291 >> (v289
                                                                                                - 1))) & 1) != 0)
                        {
                          if ((*v255 & v256) == 0) {
                            goto LABEL_519;
                          }
                        }
                        else
                        {
                          while (v292)
                          {
                            unint64_t v293 = *(void *)(v262 + v292);
                            unint64_t v294 = *(void *)(v290 + v292 - 8);
                            v292 -= 8;
                            if (v293 != v294)
                            {
                              if (v293 <= v294) {
                                goto LABEL_515;
                              }
                              break;
                            }
                          }
LABEL_519:
                          if (v289 > 0x40)
                          {
                            uint64_t v300 = *(void *)(v290 + 8 * ((v289 - 1) >> 6)) & (1 << (v289 - 1));
                            if ((v300 != 0) == ((*v870 & v256) != 0))
                            {
                              unint64_t v305 = (((unint64_t)v289 + 63) >> 3) & 0x3FFFFFF8;
                              uint64_t v306 = v290 - 8;
                              while (v305)
                              {
                                unint64_t v307 = *(void *)(v306 + v305);
                                unint64_t v308 = *(void *)(v262 + v305);
                                v305 -= 8;
                                if (v307 != v308)
                                {
                                  if (v307 <= v308) {
                                    goto LABEL_527;
                                  }
                                  break;
                                }
                              }
                            }
                            else if (v300)
                            {
                              goto LABEL_527;
                            }
                          }
                          else if (v290 << -(char)v289 >> -(char)v289 < v910 << -(char)v289 >> -(char)v289)
                          {
                            goto LABEL_527;
                          }
LABEL_524:
                          unsigned int v312 = *((_DWORD *)v309 - 10);
                          if (v913 == v312)
                          {
                            v313 = v309 - 4;
                            if (v915 > 0x40)
                            {
                              uint64_t v295 = *(void *)(v914 + 8 * v882) & v878;
                              unsigned int v296 = *((_DWORD *)v309 - 6);
                              unsigned int v297 = v296 - 1;
                              uint64_t v298 = *(v309 - 4);
                              if (v296 >= 0x41) {
                                int v299 = (uint64_t *)(v298 + 8 * (v297 >> 6));
                              }
                              else {
                                int v299 = v313;
                              }
                              if ((((v295 != 0) ^ ((unint64_t)*v299 >> v297)) & 1) == 0)
                              {
                                uint64_t v301 = v298 - 8;
                                unint64_t v302 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
                                while (v302)
                                {
                                  unint64_t v303 = *(void *)(v263 + v302);
                                  unint64_t v304 = *(void *)(v301 + v302);
                                  v302 -= 8;
                                  if (v303 != v304)
                                  {
                                    if (v303 <= v304) {
                                      goto LABEL_515;
                                    }
                                    goto LABEL_527;
                                  }
                                }
                                goto LABEL_527;
                              }
                              if (!v295) {
                                goto LABEL_527;
                              }
                            }
                            else if (v261 >= *v313 << v260 >> v260)
                            {
                              goto LABEL_527;
                            }
                          }
                          else if (v913 >= v312)
                          {
                            goto LABEL_527;
                          }
                        }
                      }
                      uint64_t v290 = *v311;
                      if (v258 >= *v311 << v257 >> v257)
                      {
                        unsigned int v289 = *((_DWORD *)v309 - 16);
                        goto LABEL_519;
                      }
                    }
                  }
                }
                else
                {
                  uint64_t v281 = v278 - 8;
                  unint64_t v282 = (((unint64_t)v915 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v282) {
                      goto LABEL_443;
                    }
                    unint64_t v283 = *(void *)(v263 + v282);
                    unint64_t v284 = *(void *)(v281 + v282);
                    v282 -= 8;
                  }
                  while (v283 == v284);
                  if (v283 <= v284) {
                    goto LABEL_515;
                  }
                }
              }
              else if (v261 < (uint64_t)(*v270 << v260) >> v260)
              {
                goto LABEL_515;
              }
            }
            else if (v913 < v269)
            {
              goto LABEL_515;
            }
          }
        }
      }
      if (v6 - 23 != (uint64_t *)v862)
      {
        *(void *)uint64_t v862 = *(v6 - 23);
        sub_1CD65E4C8(v848, (unsigned int *)v6 - 44);
        *(void *)(v862 + 80) = *(v6 - 13);
        sub_1CCE45CD0(v862 + 88, (uint64_t)(v6 - 12));
        sub_1CCE45CD0(v862 + 128, (uint64_t)(v6 - 7));
        *(_OWORD *)(v862 + 168) = *((_OWORD *)v6 - 1);
      }
      *(v6 - 23) = v901;
      double result = sub_1CD65E4C8((uint64_t)(v6 - 22), (unsigned int *)&v902);
      *(v6 - 13) = v907;
      if (v6 - 12 != (uint64_t *)&v908)
      {
        *((_OWORD *)v6 - 6) = v908;
        *((_DWORD *)v6 - 20) = v909;
        if (*((_DWORD *)v6 - 16) >= 0x41u)
        {
          double result = *(v6 - 9);
          if (result) {
            double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          }
        }
        *(v6 - 9) = v910;
        *((_DWORD *)v6 - 16) = v911;
        unsigned int v911 = 0;
      }
      if (v6 - 7 != (uint64_t *)&v912)
      {
        *(_OWORD *)(v6 - 7) = v912;
        *((_DWORD *)v6 - 10) = v913;
        if (*((_DWORD *)v6 - 6) >= 0x41u)
        {
          double result = *(v6 - 4);
          if (result) {
            double result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
          }
        }
        *(v6 - 4) = v914;
        *((_DWORD *)v6 - 6) = v915;
        unsigned int v915 = 0;
      }
      *((_OWORD *)v6 - 1) = v916;
      if (v915 >= 0x41)
      {
        double result = v914;
        if (v914) {
          double result = MEMORY[0x1D25D9CB0](v914, 0x1000C8000313F17);
        }
      }
      BOOL v4 = v911 >= 0x41;
      BOOL v5 = v911 == 65;
      if (v911 >= 0x41)
      {
        double result = v910;
        if (v910) {
          double result = MEMORY[0x1D25D9CB0](v910, 0x1000C8000313F17);
        }
      }
      if ((v902 & 1) == 0) {
        double result = MEMORY[0x1D25D9CD0](v903.i64[0], 8);
      }
      a4 = 0;
      a2 = (uint64_t *)v860;
    }
    else
    {
      if (v323) {
        goto LABEL_23;
      }
LABEL_20:
      unsigned int v19 = *(_DWORD *)(v7 - 40);
      unsigned int v20 = *(_DWORD *)(v7 + 144);
      if (v19 == v20)
      {
        uint64_t v21 = *(unsigned int *)(v7 - 24);
        if (v21 <= 0x40)
        {
          if ((uint64_t)(*(void *)(v7 - 32) << -(char)v21) >> -(char)v21 >= (uint64_t)(*(void *)(v7 + 152) << -(char)v21) >> -(char)v21) {
            goto LABEL_23;
          }
          goto LABEL_31;
        }
        v317 = (void *)(v7 + 152);
        uint64_t v318 = *(void *)(v7 - 32);
        uint64_t v319 = *(void *)(v318 + 8 * ((v21 - 1) >> 6)) & (1 << (v21 - 1));
        unsigned int v320 = *(_DWORD *)(v7 + 160);
        unsigned int v321 = v320 - 1;
        uint64_t v322 = *(void *)(v7 + 152);
        if (v320 >= 0x41) {
          v317 = (void *)(v322 + 8 * (v321 >> 6));
        }
        if ((v319 != 0) == ((*v317 >> v321) & 1))
        {
          unint64_t v327 = v21 + 63;
          uint64_t v328 = v322 - 8;
          uint64_t v329 = (v327 >> 3) & 0x3FFFFFF8;
          uint64_t v330 = v318 - 8;
          do
          {
            if (!v329) {
              goto LABEL_23;
            }
            unint64_t v331 = *(void *)(v330 + v329);
            unint64_t v332 = *(void *)(v328 + v329);
            v329 -= 8;
          }
          while (v331 == v332);
          if (v331 > v332) {
            goto LABEL_23;
          }
        }
        else if (!v319)
        {
          goto LABEL_23;
        }
      }
      else if (v19 >= v20)
      {
        goto LABEL_23;
      }
LABEL_31:
      uint64_t v901 = *(void *)v7;
      uint64_t v902 = 1;
      int64x2_t v903 = v852;
      int64x2_t v904 = v852;
      int64x2_t v905 = v852;
      int64x2_t v906 = v852;
      uint64_t v863 = v7 + 8;
      sub_1CD65E534((unsigned int *)&v902, (unsigned int *)(v7 + 8));
      uint64_t v30 = *(void *)(v7 + 80);
      long long v31 = *(_OWORD *)(v7 + 88);
      unsigned int v909 = *(_DWORD *)(v7 + 104);
      long long v908 = v31;
      unsigned int v911 = *(_DWORD *)(v7 + 120);
      uint64_t v32 = *(void *)(v7 + 112);
      uint64_t v907 = v30;
      uint64_t v910 = v32;
      *(_DWORD *)(v7 + 120) = 0;
      uint64_t v847 = v7 + 128;
      uint64_t v849 = v7 + 88;
      long long v33 = *(_OWORD *)(v7 + 128);
      unsigned int v913 = *(_DWORD *)(v7 + 144);
      long long v912 = v33;
      unsigned int v915 = *(_DWORD *)(v7 + 160);
      uint64_t v34 = *(void *)(v7 + 152);
      uint64_t v914 = v34;
      *(_DWORD *)(v7 + 160) = 0;
      v846 = (_OWORD *)(v7 + 168);
      unsigned int v35 = v911 - 1;
      long long v36 = (void *)(v32 + 8 * ((v911 - 1) >> 6));
      if (v911 >= 0x41) {
        long long v37 = (uint64_t *)(v32 + 8 * (v35 >> 6));
      }
      else {
        long long v37 = &v910;
      }
      uint64_t v38 = 1 << v35;
      char v39 = 64 - v911;
      uint64_t v40 = v32 << -(char)v911 >> -(char)v911;
      unsigned int v41 = v915 - 1;
      long long v916 = *(_OWORD *)(v7 + 168);
      uint64_t v42 = &v914;
      if (v915 >= 0x41) {
        uint64_t v42 = (uint64_t *)(v34 + 8 * (v41 >> 6));
      }
      uint64_t v43 = 1 << v41;
      uint64_t v44 = v32 - 8;
      uint64_t v45 = v34 - 8;
      int64_t v46 = (uint64_t *)v7;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
LABEL_37:
                while (1)
                {
                  BOOL v47 = v46;
                  v46 += 23;
                  unsigned int v48 = *((_DWORD *)v47 + 72);
                  if (v48 == v909) {
                    break;
                  }
                  if (v48 >= v909)
                  {
                    if (v909 < v48) {
                      goto LABEL_77;
                    }
                    goto LABEL_46;
                  }
                }
                int v49 = v47 + 37;
                uint64_t v50 = *((unsigned int *)v47 + 76);
                if (v50 > 0x40) {
                  break;
                }
                uint64_t v53 = *v49;
                if (*v49 << -(char)v50 >> -(char)v50 >= v32 << -(char)v50 >> -(char)v50) {
                  goto LABEL_41;
                }
              }
              uint64_t v53 = *v49;
              uint64_t v54 = *(void *)(*v49 + 8 * ((v50 - 1) >> 6)) & (1 << (v50 - 1));
              if ((v54 != 0) == ((v38 & *v37) != 0)) {
                break;
              }
              if (!v54) {
                goto LABEL_41;
              }
            }
            unint64_t v55 = ((unint64_t)(v50 + 63) >> 3) & 0x3FFFFFF8;
            while (v55)
            {
              unint64_t v56 = *(void *)(v53 + v55 - 8);
              unint64_t v57 = *(void *)(v44 + v55);
              v55 -= 8;
              if (v56 != v57)
              {
                if (v56 <= v57) {
                  goto LABEL_37;
                }
                break;
              }
            }
LABEL_41:
            if (v911 > 0x40)
            {
              unsigned int v60 = v50 - 1;
              if (v50 >= 0x41) {
                int v49 = (uint64_t *)(v53 + 8 * (v60 >> 6));
              }
              if ((((*v36 & v38) != 0) ^ ((unint64_t)*v49 >> v60)))
              {
                if ((*v36 & v38) != 0) {
                  goto LABEL_77;
                }
              }
              else
              {
                uint64_t v65 = v53 - 8;
                unint64_t v66 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                while (v66)
                {
                  unint64_t v67 = *(void *)(v44 + v66);
                  unint64_t v68 = *(void *)(v65 + v66);
                  v66 -= 8;
                  if (v67 != v68)
                  {
                    if (v67 > v68) {
                      break;
                    }
                    goto LABEL_77;
                  }
                }
              }
            }
            else if (v40 < v53 << v39 >> v39)
            {
              goto LABEL_77;
            }
LABEL_46:
            unsigned int v51 = *((_DWORD *)v47 + 82);
            if (v51 == v913) {
              break;
            }
            if (v51 >= v913) {
              goto LABEL_77;
            }
          }
          uint64_t v52 = *((unsigned int *)v47 + 86);
          if (v52 > 0x40) {
            break;
          }
          if (v47[42] << -(char)v52 >> -(char)v52 >= v34 << -(char)v52 >> -(char)v52) {
            goto LABEL_77;
          }
        }
        uint64_t v58 = v47[42];
        uint64_t v59 = *(void *)(v58 + 8 * ((v52 - 1) >> 6)) & (1 << (v52 - 1));
        if ((v59 != 0) == ((v43 & *v42) != 0)) {
          break;
        }
        if (!v59) {
          goto LABEL_77;
        }
      }
      unint64_t v61 = ((unint64_t)(v52 + 63) >> 3) & 0x3FFFFFF8;
      uint64_t v62 = v58 - 8;
      while (v61)
      {
        unint64_t v63 = *(void *)(v62 + v61);
        unint64_t v64 = *(void *)(v45 + v61);
        v61 -= 8;
        if (v63 != v64)
        {
          if (v63 <= v64) {
            goto LABEL_37;
          }
          break;
        }
      }
LABEL_77:
      if (v47 != (uint64_t *)v862)
      {
        uint64_t v98 = (uint64_t *)v860;
        while (1)
        {
          while (1)
          {
LABEL_133:
            while (1)
            {
              int v99 = v98;
              v98 -= 23;
              unsigned int v100 = *((_DWORD *)v99 - 20);
              if (v100 == v909) {
                break;
              }
              if (v100 < v909) {
                goto LABEL_175;
              }
              if (v909 >= v100) {
                goto LABEL_142;
              }
            }
            uint64_t v71 = v98;
            uint64_t v101 = v99 - 9;
            uint64_t v102 = *((unsigned int *)v99 - 16);
            if (v102 <= 0x40)
            {
              uint64_t v105 = *v101;
              if (*v101 << -(char)v102 >> -(char)v102 < v32 << -(char)v102 >> -(char)v102) {
                goto LABEL_174;
              }
            }
            else
            {
              uint64_t v105 = *v101;
              uint64_t v106 = *(void *)(*v101 + 8 * ((v102 - 1) >> 6)) & (1 << (v102 - 1));
              if ((v106 != 0) == ((v38 & *v37) != 0))
              {
                unint64_t v107 = ((unint64_t)(v102 + 63) >> 3) & 0x3FFFFFF8;
                while (v107)
                {
                  unint64_t v108 = *(void *)(v105 + v107 - 8);
                  unint64_t v109 = *(void *)(v44 + v107);
                  v107 -= 8;
                  if (v108 != v109)
                  {
                    if (v108 <= v109) {
                      goto LABEL_174;
                    }
                    break;
                  }
                }
              }
              else if (v106)
              {
                goto LABEL_175;
              }
            }
            if (v911 > 0x40) {
              break;
            }
            if (v40 >= v105 << v39 >> v39) {
              goto LABEL_142;
            }
          }
          unsigned int v112 = v102 - 1;
          if (v102 >= 0x41) {
            uint64_t v101 = (uint64_t *)(v105 + 8 * (v112 >> 6));
          }
          if (((((*v36 & v38) != 0) ^ ((unint64_t)*v101 >> v112)) & 1) == 0)
          {
            uint64_t v117 = v105 - 8;
            unint64_t v118 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
            while (v118)
            {
              unint64_t v119 = *(void *)(v44 + v118);
              unint64_t v120 = *(void *)(v117 + v118);
              v118 -= 8;
              if (v119 != v120)
              {
                if (v119 <= v120) {
                  goto LABEL_133;
                }
                goto LABEL_142;
              }
            }
            goto LABEL_142;
          }
          if ((*v36 & v38) == 0)
          {
LABEL_142:
            unsigned int v103 = *((_DWORD *)v99 - 10);
            if (v103 == v913)
            {
              uint64_t v104 = *((unsigned int *)v99 - 6);
              if (v104 > 0x40)
              {
                uint64_t v110 = *(v99 - 4);
                uint64_t v111 = *(void *)(v110 + 8 * ((v104 - 1) >> 6)) & (1 << (v104 - 1));
                if ((v111 != 0) == ((v43 & *v42) != 0))
                {
                  unint64_t v113 = ((unint64_t)(v104 + 63) >> 3) & 0x3FFFFFF8;
                  uint64_t v114 = v110 - 8;
                  while (v113)
                  {
                    unint64_t v115 = *(void *)(v114 + v113);
                    unint64_t v116 = *(void *)(v45 + v113);
                    v113 -= 8;
                    if (v115 != v116)
                    {
                      if (v115 <= v116) {
                        goto LABEL_175;
                      }
                      goto LABEL_133;
                    }
                  }
                }
                else if (v111)
                {
                  goto LABEL_175;
                }
              }
              else if (*(v99 - 4) << -(char)v104 >> -(char)v104 < v34 << -(char)v104 >> -(char)v104)
              {
                goto LABEL_175;
              }
            }
            else if (v103 < v913)
            {
              goto LABEL_175;
            }
          }
        }
      }
      uint64_t v98 = (uint64_t *)v860;
      if ((unint64_t)v46 >= v860) {
        goto LABEL_175;
      }
      unint64_t v69 = v860;
      while (1)
      {
        uint64_t v98 = (uint64_t *)(v69 - 184);
        unsigned int v70 = *(_DWORD *)(v69 - 80);
        if (v70 == v909) {
          break;
        }
        if (v70 < v909) {
          goto LABEL_175;
        }
        if (v909 < v70) {
          goto LABEL_96;
        }
LABEL_90:
        unsigned int v74 = *(_DWORD *)(v69 - 40);
        if (v74 == v913)
        {
          uint64_t v75 = *(unsigned int *)(v69 - 24);
          if (v75 > 0x40)
          {
            uint64_t v87 = *(void *)(v69 - 32);
            uint64_t v88 = *(void *)(v87 + 8 * ((v75 - 1) >> 6)) & (1 << (v75 - 1));
            if ((v88 != 0) == ((v43 & *v42) != 0))
            {
              unint64_t v90 = ((unint64_t)(v75 + 63) >> 3) & 0x3FFFFFF8;
              uint64_t v91 = v87 - 8;
              do
              {
                if (!v90)
                {
                  int v80 = 0;
                  goto LABEL_95;
                }
                unint64_t v92 = *(void *)(v91 + v90);
                unint64_t v93 = *(void *)(v45 + v90);
                v90 -= 8;
              }
              while (v92 == v93);
              if (v92 > v93) {
                int v80 = 1;
              }
              else {
                int v80 = -1;
              }
            }
            else if (v88)
            {
              int v80 = -1;
            }
            else
            {
              int v80 = 1;
            }
          }
          else
          {
            uint64_t v76 = -v75;
            uint64_t v77 = (uint64_t)(*(void *)(v69 - 32) << v76) >> v76;
            uint64_t v78 = v34 << v76 >> v76;
            BOOL v79 = v77 < v78;
            int v80 = v77 > v78;
            if (v79) {
              int v80 = -1;
            }
          }
LABEL_95:
          if (v80 < 0) {
            goto LABEL_175;
          }
LABEL_96:
          unint64_t v69 = (unint64_t)v98;
          if (v46 >= v98) {
            goto LABEL_175;
          }
          continue;
        }
        BOOL v81 = v74 < v913 || v46 >= v98;
        unint64_t v69 = (unint64_t)v98;
        if (v81) {
          goto LABEL_175;
        }
      }
      uint64_t v71 = (uint64_t *)(v69 - 184);
      uint64_t v72 = (uint64_t *)(v69 - 72);
      uint64_t v73 = *(unsigned int *)(v69 - 64);
      if (v73 > 0x40)
      {
        uint64_t v82 = *v72;
        uint64_t v83 = *(void *)(*v72 + 8 * ((v73 - 1) >> 6)) & (1 << (v73 - 1));
        if ((v83 != 0) == ((v38 & *v37) != 0))
        {
          unint64_t v84 = ((unint64_t)(v73 + 63) >> 3) & 0x3FFFFFF8;
          while (v84)
          {
            unint64_t v85 = *(void *)(v82 + v84 - 8);
            unint64_t v86 = *(void *)(v44 + v84);
            v84 -= 8;
            if (v85 != v86)
            {
              if (v85 <= v86) {
                goto LABEL_174;
              }
              break;
            }
          }
        }
        else if (v83)
        {
          goto LABEL_175;
        }
LABEL_85:
        if (v911 > 0x40)
        {
          unsigned int v89 = v73 - 1;
          if (v73 >= 0x41) {
            uint64_t v72 = (uint64_t *)(v82 + 8 * (v89 >> 6));
          }
          if ((((*v36 & v38) != 0) ^ ((unint64_t)*v72 >> v89)))
          {
            uint64_t v98 = (uint64_t *)(v69 - 184);
            if ((*v36 & v38) != 0) {
              goto LABEL_96;
            }
          }
          else
          {
            uint64_t v94 = v82 - 8;
            unint64_t v95 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
            uint64_t v98 = (uint64_t *)(v69 - 184);
            while (v95)
            {
              unint64_t v96 = *(void *)(v44 + v95);
              unint64_t v97 = *(void *)(v94 + v95);
              v95 -= 8;
              if (v96 != v97)
              {
                if (v96 <= v97) {
                  goto LABEL_96;
                }
                goto LABEL_90;
              }
            }
          }
        }
        else if (v40 < v82 << v39 >> v39)
        {
          goto LABEL_96;
        }
        goto LABEL_90;
      }
      uint64_t v82 = *v72;
      if (*v72 << -(char)v73 >> -(char)v73 >= v32 << -(char)v73 >> -(char)v73) {
        goto LABEL_85;
      }
LABEL_174:
      uint64_t v98 = v71;
LABEL_175:
      v872 = v98;
      uint64_t v6 = v46;
      if (v46 >= v98) {
        goto LABEL_262;
      }
      __int16 v121 = v98;
      while (2)
      {
        sub_1CCE4D36C(v6, v121);
        unsigned int v122 = v911 - 1;
        uint64_t v123 = (void *)(v910 + 8 * ((v911 - 1) >> 6));
        if (v911 >= 0x41) {
          uint64_t v124 = (uint64_t *)(v910 + 8 * (v122 >> 6));
        }
        else {
          uint64_t v124 = &v910;
        }
        uint64_t v125 = 1 << v122;
        char v126 = 64 - v911;
        uint64_t v127 = v910 << -(char)v911 >> -(char)v911;
        unsigned int v128 = v915 - 1;
        uint64_t v129 = &v914;
        if (v915 >= 0x41) {
          uint64_t v129 = (uint64_t *)(v914 + 8 * (v128 >> 6));
        }
        uint64_t v130 = 1 << v128;
        uint64_t v131 = v910 - 8;
        uint64_t v132 = v914 - 8;
        do
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
LABEL_183:
                uint64_t v133 = v6;
                v6 += 23;
                unsigned int v134 = *((_DWORD *)v133 + 72);
                if (v134 == v909)
                {
                  uint64_t v135 = v133 + 37;
                  uint64_t v136 = *((unsigned int *)v133 + 76);
                  if (v136 > 0x40)
                  {
                    uint64_t v137 = *v135;
                    uint64_t v140 = *(void *)(*v135 + 8 * ((v136 - 1) >> 6)) & (1 << (v136
                                                                                               - 1));
                    if ((v140 != 0) == ((v125 & *v124) != 0))
                    {
                      unint64_t v141 = ((unint64_t)(v136 + 63) >> 3) & 0x3FFFFFF8;
                      while (v141)
                      {
                        unint64_t v142 = *(void *)(v137 + v141 - 8);
                        unint64_t v143 = *(void *)(v131 + v141);
                        v141 -= 8;
                        if (v142 != v143)
                        {
                          if (v142 <= v143) {
                            goto LABEL_183;
                          }
                          break;
                        }
                      }
                    }
                    else if (v140)
                    {
                      continue;
                    }
                  }
                  else
                  {
                    uint64_t v137 = *v135;
                    if (*v135 << -(char)v136 >> -(char)v136 < v910 << -(char)v136 >> -(char)v136) {
                      continue;
                    }
                  }
                  if (v911 > 0x40)
                  {
                    unsigned int v146 = v136 - 1;
                    if (v136 >= 0x41) {
                      uint64_t v135 = (uint64_t *)(v137 + 8 * (v146 >> 6));
                    }
                    if ((((*v123 & v125) != 0) ^ ((unint64_t)*v135 >> v146)))
                    {
                      if ((*v123 & v125) != 0) {
                        goto LABEL_250;
                      }
                    }
                    else
                    {
                      uint64_t v151 = v137 - 8;
                      unint64_t v152 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                      while (v152)
                      {
                        unint64_t v153 = *(void *)(v131 + v152);
                        unint64_t v154 = *(void *)(v151 + v152);
                        v152 -= 8;
                        if (v153 != v154)
                        {
                          if (v153 <= v154) {
                            goto LABEL_250;
                          }
                          break;
                        }
                      }
                    }
                  }
                  else if (v127 < v137 << v126 >> v126)
                  {
                    goto LABEL_250;
                  }
                }
                else
                {
                  if (v134 < v909) {
                    continue;
                  }
                  if (v909 < v134) {
                    goto LABEL_250;
                  }
                }
                unsigned int v138 = *((_DWORD *)v133 + 82);
                if (v138 == v913) {
                  break;
                }
                if (v138 >= v913) {
                  goto LABEL_250;
                }
              }
              uint64_t v139 = *((unsigned int *)v133 + 86);
              if (v139 > 0x40) {
                break;
              }
              if (v133[42] << -(char)v139 >> -(char)v139 >= v914 << -(char)v139 >> -(char)v139) {
                goto LABEL_250;
              }
            }
            uint64_t v144 = v133[42];
            uint64_t v145 = *(void *)(v144 + 8 * ((v139 - 1) >> 6)) & (1 << (v139 - 1));
            if ((v145 != 0) == ((v130 & *v129) != 0)) {
              break;
            }
            if (!v145) {
              goto LABEL_250;
            }
          }
          unint64_t v147 = ((unint64_t)(v139 + 63) >> 3) & 0x3FFFFFF8;
          uint64_t v148 = v144 - 8;
          do
          {
            if (!v147) {
              goto LABEL_250;
            }
            unint64_t v149 = *(void *)(v148 + v147);
            unint64_t v150 = *(void *)(v132 + v147);
            v147 -= 8;
          }
          while (v149 == v150);
        }
        while (v149 <= v150);
LABEL_250:
        while (2)
        {
          while (2)
          {
            while (2)
            {
              while (2)
              {
                while (1)
                {
                  v172 = v121;
                  v121 -= 23;
                  unsigned int v173 = *((_DWORD *)v172 - 20);
                  if (v173 == v909) {
                    break;
                  }
                  if (v173 < v909) {
                    goto LABEL_261;
                  }
                  if (v909 >= v173) {
                    goto LABEL_258;
                  }
                }
                uint64_t v163 = v172 - 9;
                uint64_t v174 = *((unsigned int *)v172 - 16);
                if (v174 > 0x40)
                {
                  uint64_t v155 = *v163;
                  uint64_t v156 = *(void *)(*v163 + 8 * ((v174 - 1) >> 6)) & (1 << (v174 - 1));
                  if ((v156 != 0) == ((v125 & *v124) != 0))
                  {
                    unint64_t v157 = ((unint64_t)(v174 + 63) >> 3) & 0x3FFFFFF8;
                    while (v157)
                    {
                      unint64_t v158 = *(void *)(v155 + v157 - 8);
                      unint64_t v159 = *(void *)(v131 + v157);
                      v157 -= 8;
                      if (v158 != v159)
                      {
                        if (v158 <= v159) {
                          goto LABEL_261;
                        }
                        break;
                      }
                    }
                  }
                  else if (v156)
                  {
                    goto LABEL_261;
                  }
                }
                else
                {
                  uint64_t v155 = *v163;
                  if (*v163 << -(char)v174 >> -(char)v174 < v910 << -(char)v174 >> -(char)v174) {
                    goto LABEL_261;
                  }
                }
                if (v911 > 0x40)
                {
                  unsigned int v162 = v174 - 1;
                  if (v174 >= 0x41) {
                    uint64_t v163 = (uint64_t *)(v155 + 8 * (v162 >> 6));
                  }
                  if ((((*v123 & v125) != 0) ^ ((unint64_t)*v163 >> v162)))
                  {
                    if ((*v123 & v125) != 0) {
                      continue;
                    }
                  }
                  else
                  {
                    uint64_t v168 = v155 - 8;
                    unint64_t v169 = (((unint64_t)v911 + 63) >> 3) & 0x3FFFFFF8;
                    while (v169)
                    {
                      unint64_t v170 = *(void *)(v131 + v169);
                      unint64_t v171 = *(void *)(v168 + v169);
                      v169 -= 8;
                      if (v170 != v171)
                      {
                        if (v170 > v171) {
                          goto LABEL_258;
                        }
                        goto LABEL_250;
                      }
                    }
                  }
                }
                else if (v127 < v155 << v126 >> v126)
                {
                  continue;
                }
                break;
              }
LABEL_258:
              unsigned int v175 = *((_DWORD *)v172 - 10);
              if (v175 != v913)
              {
                if (v175 < v913) {
                  goto LABEL_261;
                }
                continue;
              }
              break;
            }
            uint64_t v176 = *((unsigned int *)v172 - 6);
            if (v176 > 0x40)
            {
              uint64_t v160 = *(v172 - 4);
              uint64_t v161 = *(void *)(v160 + 8 * ((v176 - 1) >> 6)) & (1 << (v176 - 1));
              if ((v161 != 0) == ((v130 & *v129) != 0))
              {
                unint64_t v164 = ((unint64_t)(v176 + 63) >> 3) & 0x3FFFFFF8;
                uint64_t v165 = v160 - 8;
                while (v164)
                {
                  unint64_t v166 = *(void *)(v165 + v164);
                  unint64_t v167 = *(void *)(v132 + v164);
                  v164 -= 8;
                  if (v166 != v167)
                  {
                    if (v166 <= v167) {
                      goto LABEL_261;
                    }
                    goto LABEL_250;
                  }
                }
              }
              else if (v161)
              {
                goto LABEL_261;
              }
              continue;
            }
            break;
          }
          if (*(v172 - 4) << -(char)v176 >> -(char)v176 >= v914 << -(char)v176 >> -(char)v176) {
            continue;
          }
          break;
        }
LABEL_261:
        if (v6 < v121) {
          continue;
        }
        break;
      }
LABEL_262:
      if (v6 - 23 != (uint64_t *)v862)
      {
        *(void *)uint64_t v862 = *(v6 - 23);
        sub_1CD65E4C8(v863, (unsigned int *)v6 - 44);
        *(void *)(v862 + 80) = *(v6 - 13);
        sub_1CCE45CD0(v849, (uint64_t)(v6 - 12));
        sub_1CCE45CD0(v847, (uint64_t)(v6 - 7));
        _OWORD *v846 = *((_OWORD *)v6 - 1);
      }
      *(v6 - 23) = v901;
      sub_1CD65E4C8((uint64_t)(v6 - 22), (unsigned int *)&v902);
      *(v6 - 13) = v907;
      if (v6 - 12 != (uint64_t *)&v908)
      {
        *((_OWORD *)v6 - 6) = v908;
        *((_DWORD *)v6 - 20) = v909;
        if (*((_DWORD *)v6 - 16) >= 0x41u)
        {
          uint64_t v177 = *(v6 - 9);
          if (v177) {
            MEMORY[0x1D25D9CB0](v177, 0x1000C8000313F17);
          }
        }
        *(v6 - 9) = v910;
        *((_DWORD *)v6 - 16) = v911;
        unsigned int v911 = 0;
      }
      if (v6 - 7 != (uint64_t *)&v912)
      {
        *(_OWORD *)(v6 - 7) = v912;
        *((_DWORD *)v6 - 10) = v913;
        if (*((_DWORD *)v6 - 6) >= 0x41u)
        {
          uint64_t v178 = *(v6 - 4);
          if (v178) {
            MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
          }
        }
        *(v6 - 4) = v914;
        *((_DWORD *)v6 - 6) = v915;
        unsigned int v915 = 0;
      }
      *((_OWORD *)v6 - 1) = v916;
      if (v915 >= 0x41 && v914) {
        MEMORY[0x1D25D9CB0](v914, 0x1000C8000313F17);
      }
      if (v911 >= 0x41 && v910) {
        MEMORY[0x1D25D9CB0](v910, 0x1000C8000313F17);
      }
      if ((v902 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v903.i64[0], 8);
      }
      if (v46 < v872)
      {
LABEL_285:
        double result = sub_1CCE460B8(v862, v6 - 23, a3, a4 & 1);
        a2 = (uint64_t *)v860;
        a4 = 0;
      }
      else
      {
        BOOL v179 = sub_1CCE4C810(v862, (uint64_t)(v6 - 23));
        double result = sub_1CCE4C810((uint64_t)v6, v860);
        if (result)
        {
          a2 = v6 - 23;
          if (v179) {
            return result;
          }
          goto LABEL_2;
        }
        a2 = (uint64_t *)v860;
        if (!v179) {
          goto LABEL_285;
        }
      }
    }
  }
  switch(v9)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v662 = *((_DWORD *)a2 - 20);
      unsigned int v663 = *(_DWORD *)(v7 + 104);
      if (v662 == v663)
      {
        v664 = (uint64_t *)(v7 + 112);
        uint64_t v665 = *((unsigned int *)a2 - 16);
        if (v665 <= 0x40)
        {
          uint64_t v666 = *v845;
          uint64_t v667 = *v664;
          if (*v845 << -(char)v665 >> -(char)v665 >= *v664 << -(char)v665 >> -(char)v665)
          {
            unsigned int v668 = *(_DWORD *)(v7 + 120);
            goto LABEL_1022;
          }
          return sub_1CCE4D36C((uint64_t *)v7, v853);
        }
        uint64_t v666 = *v845;
        uint64_t v820 = *(void *)(*v845 + 8 * ((v665 - 1) >> 6)) & (1 << (v665 - 1));
        unsigned int v668 = *(_DWORD *)(v7 + 120);
        unsigned int v821 = v668 - 1;
        uint64_t v667 = *(void *)(v7 + 112);
        if (v668 >= 0x41) {
          v664 = (uint64_t *)(v667 + 8 * (v821 >> 6));
        }
        if ((v820 != 0) != (((unint64_t)*v664 >> v821) & 1))
        {
          a2 = (uint64_t *)v860;
          if (!v820) {
            goto LABEL_1022;
          }
          return sub_1CCE4D36C((uint64_t *)v7, v853);
        }
        unint64_t v822 = ((unint64_t)(v665 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v822)
          {
            a2 = (uint64_t *)v860;
            goto LABEL_1022;
          }
          unint64_t v823 = *(void *)(v666 + v822 - 8);
          unint64_t v824 = *(void *)(v667 + v822 - 8);
          v822 -= 8;
        }
        while (v823 == v824);
        a2 = (uint64_t *)v860;
        if (v823 <= v824) {
          return sub_1CCE4D36C((uint64_t *)v7, v853);
        }
LABEL_1022:
        if (v668 > 0x40)
        {
          uint64_t v825 = *(void *)(v667 + 8 * ((v668 - 1) >> 6)) & (1 << (v668 - 1));
          unsigned int v826 = v665 - 1;
          BOOL v4 = v665 >= 0x41;
          v827 = v845;
          if (v4) {
            v827 = (uint64_t *)(v666 + 8 * (v826 >> 6));
          }
          if ((v825 != 0) == (((unint64_t)*v827 >> v826) & 1))
          {
            uint64_t v833 = v666 - 8;
            unint64_t v834 = (((unint64_t)v668 + 63) >> 3) & 0x3FFFFFF8;
            uint64_t v835 = v667 - 8;
            a2 = (uint64_t *)v860;
            do
            {
              if (!v834) {
                goto LABEL_1252;
              }
              unint64_t v836 = *(void *)(v835 + v834);
              unint64_t v837 = *(void *)(v833 + v834);
              v834 -= 8;
            }
            while (v836 == v837);
            if (v836 <= v837) {
              return result;
            }
          }
          else
          {
            a2 = (uint64_t *)v860;
            if (v825) {
              return result;
            }
          }
        }
        else if (v667 << -(char)v668 >> -(char)v668 < v666 << -(char)v668 >> -(char)v668)
        {
          return result;
        }
      }
      else
      {
        if (v662 < v663) {
          return sub_1CCE4D36C((uint64_t *)v7, v853);
        }
        if (v663 < v662) {
          return result;
        }
      }
LABEL_1252:
      unsigned int v816 = *((_DWORD *)a2 - 10);
      unsigned int v817 = *(_DWORD *)(v7 + 144);
      if (v816 == v817)
      {
        v818 = (void *)(v7 + 152);
        uint64_t v819 = *((unsigned int *)a2 - 6);
        if (v819 > 0x40)
        {
          uint64_t v828 = *(a2 - 4);
          uint64_t v829 = *(void *)(v828 + 8 * ((v819 - 1) >> 6)) & (1 << (v819 - 1));
          unsigned int v830 = *(_DWORD *)(v7 + 160);
          unsigned int v831 = v830 - 1;
          uint64_t v832 = *(void *)(v7 + 152);
          if (v830 >= 0x41) {
            v818 = (void *)(v832 + 8 * (v831 >> 6));
          }
          if ((v829 != 0) == ((*v818 >> v831) & 1))
          {
            unint64_t v838 = v819 + 63;
            uint64_t v839 = v832 - 8;
            uint64_t v840 = (v838 >> 3) & 0x3FFFFFF8;
            uint64_t v841 = v828 - 8;
            do
            {
              if (!v840) {
                return result;
              }
              unint64_t v842 = *(void *)(v841 + v840);
              unint64_t v843 = *(void *)(v839 + v840);
              v840 -= 8;
            }
            while (v842 == v843);
            if (v842 <= v843) {
              return sub_1CCE4D36C((uint64_t *)v7, v853);
            }
          }
          else if (v829)
          {
            return sub_1CCE4D36C((uint64_t *)v7, v853);
          }
        }
        else if (*(a2 - 4) << -(char)v819 >> -(char)v819 < (uint64_t)(*v818 << -(char)v819) >> -(char)v819)
        {
          return sub_1CCE4D36C((uint64_t *)v7, v853);
        }
      }
      else if (v816 < v817)
      {
        return sub_1CCE4D36C((uint64_t *)v7, v853);
      }
      break;
    case 3:
      return sub_1CCE4BB84(v7, v7 + 184, (uint64_t)v853);
    case 4:
      return sub_1CCE4D5FC(v7, v7 + 184, v7 + 368, (uint64_t)v853);
    case 5:
      return sub_1CCE4B144(v7, v7 + 184, v7 + 368, v7 + 552, (uint64_t)v853);
    default:
      JUMPOUT(0);
  }
  return result;
}

uint64_t sub_1CCE4B144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1CCE4D5FC(a1, a2, a3, a4);
  unsigned int v11 = *(_DWORD *)(a5 + 104);
  unsigned int v12 = *(_DWORD *)(a4 + 104);
  if (v11 == v12)
  {
    uint64_t v13 = (uint64_t *)(a5 + 112);
    unint64_t v14 = (uint64_t *)(a4 + 112);
    uint64_t v15 = *(unsigned int *)(a5 + 120);
    if (v15 > 0x40)
    {
      uint64_t v16 = *v13;
      uint64_t v59 = *(void *)(*v13 + 8 * ((v15 - 1) >> 6)) & (1 << (v15 - 1));
      unsigned int v18 = *(_DWORD *)(a4 + 120);
      unsigned int v60 = v18 - 1;
      uint64_t v17 = *(void *)(a4 + 112);
      if (v18 >= 0x41) {
        unint64_t v14 = (uint64_t *)(v17 + 8 * (v60 >> 6));
      }
      if ((v59 != 0) == (((unint64_t)*v14 >> v60) & 1))
      {
        unint64_t v67 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
        while (v67)
        {
          unint64_t v68 = *(void *)(v16 + v67 - 8);
          unint64_t v69 = *(void *)(v17 + v67 - 8);
          v67 -= 8;
          if (v68 != v69)
          {
            if (v68 <= v69) {
              goto LABEL_9;
            }
            break;
          }
        }
      }
      else if (v59)
      {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v16 = *v13;
      uint64_t v17 = *v14;
      if (*v13 << -(char)v15 >> -(char)v15 < *v14 << -(char)v15 >> -(char)v15) {
        goto LABEL_9;
      }
      unsigned int v18 = *(_DWORD *)(a4 + 120);
    }
    if (v18 > 0x40)
    {
      uint64_t v73 = *(void *)(v17 + 8 * ((v18 - 1) >> 6)) & (1 << (v18 - 1));
      unsigned int v74 = v15 - 1;
      if (v15 >= 0x41) {
        uint64_t v13 = (uint64_t *)(v16 + 8 * (v74 >> 6));
      }
      if ((v73 != 0) == (((unint64_t)*v13 >> v74) & 1))
      {
        uint64_t v97 = v16 - 8;
        unint64_t v98 = (((unint64_t)v18 + 63) >> 3) & 0x3FFFFFF8;
        uint64_t v99 = v17 - 8;
        while (v98)
        {
          unint64_t v100 = *(void *)(v99 + v98);
          unint64_t v101 = *(void *)(v97 + v98);
          v98 -= 8;
          if (v100 != v101)
          {
            if (v100 <= v101) {
              return result;
            }
            break;
          }
        }
      }
      else if (v73)
      {
        return result;
      }
    }
    else if (v17 << -(char)v18 >> -(char)v18 < v16 << -(char)v18 >> -(char)v18)
    {
      return result;
    }
  }
  else
  {
    if (v11 < v12) {
      goto LABEL_9;
    }
    if (v12 < v11) {
      return result;
    }
  }
  unsigned int v43 = *(_DWORD *)(a5 + 144);
  unsigned int v44 = *(_DWORD *)(a4 + 144);
  if (v43 == v44)
  {
    uint64_t v45 = (void *)(a4 + 152);
    uint64_t v46 = *(unsigned int *)(a5 + 160);
    if (v46 > 0x40)
    {
      uint64_t v80 = *(void *)(a5 + 152);
      uint64_t v81 = *(void *)(v80 + 8 * ((v46 - 1) >> 6)) & (1 << (v46 - 1));
      unsigned int v82 = *(_DWORD *)(a4 + 160);
      unsigned int v83 = v82 - 1;
      uint64_t v84 = *(void *)(a4 + 152);
      if (v82 >= 0x41) {
        uint64_t v45 = (void *)(v84 + 8 * (v83 >> 6));
      }
      if ((v81 != 0) == ((*v45 >> v83) & 1))
      {
        unint64_t v117 = v46 + 63;
        uint64_t v118 = v84 - 8;
        uint64_t v119 = (v117 >> 3) & 0x3FFFFFF8;
        uint64_t v120 = v80 - 8;
        while (v119)
        {
          unint64_t v121 = *(void *)(v120 + v119);
          unint64_t v122 = *(void *)(v118 + v119);
          v119 -= 8;
          if (v121 != v122)
          {
            if (v121 <= v122) {
              goto LABEL_9;
            }
            return result;
          }
        }
        return result;
      }
      if (!v81) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(a5 + 152) << -(char)v46) >> -(char)v46 >= (uint64_t)(*v45 << -(char)v46) >> -(char)v46)
    {
      return result;
    }
  }
  else if (v43 >= v44)
  {
    return result;
  }
LABEL_9:
  uint64_t result = sub_1CCE4D36C((uint64_t *)a4, (uint64_t *)a5);
  unsigned int v19 = *(_DWORD *)(a4 + 104);
  unsigned int v20 = *(_DWORD *)(a3 + 104);
  if (v19 == v20)
  {
    uint64_t v21 = (uint64_t *)(a4 + 112);
    uint64_t v22 = (uint64_t *)(a3 + 112);
    uint64_t v23 = *(unsigned int *)(a4 + 120);
    if (v23 > 0x40)
    {
      uint64_t v24 = *v21;
      uint64_t v61 = *(void *)(*v21 + 8 * ((v23 - 1) >> 6)) & (1 << (v23 - 1));
      unsigned int v26 = *(_DWORD *)(a3 + 120);
      unsigned int v62 = v26 - 1;
      uint64_t v25 = *(void *)(a3 + 112);
      if (v26 >= 0x41) {
        uint64_t v22 = (uint64_t *)(v25 + 8 * (v62 >> 6));
      }
      if ((v61 != 0) == (((unint64_t)*v22 >> v62) & 1))
      {
        unint64_t v70 = ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8;
        while (v70)
        {
          unint64_t v71 = *(void *)(v24 + v70 - 8);
          unint64_t v72 = *(void *)(v25 + v70 - 8);
          v70 -= 8;
          if (v71 != v72)
          {
            if (v71 <= v72) {
              goto LABEL_17;
            }
            break;
          }
        }
      }
      else if (v61)
      {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v24 = *v21;
      uint64_t v25 = *v22;
      if (*v21 << -(char)v23 >> -(char)v23 < *v22 << -(char)v23 >> -(char)v23) {
        goto LABEL_17;
      }
      unsigned int v26 = *(_DWORD *)(a3 + 120);
    }
    if (v26 > 0x40)
    {
      uint64_t v78 = *(void *)(v25 + 8 * ((v26 - 1) >> 6)) & (1 << (v26 - 1));
      unsigned int v79 = v23 - 1;
      if (v23 >= 0x41) {
        uint64_t v21 = (uint64_t *)(v24 + 8 * (v79 >> 6));
      }
      if ((v78 != 0) == (((unint64_t)*v21 >> v79) & 1))
      {
        uint64_t v107 = v24 - 8;
        unint64_t v108 = (((unint64_t)v26 + 63) >> 3) & 0x3FFFFFF8;
        uint64_t v109 = v25 - 8;
        while (v108)
        {
          unint64_t v110 = *(void *)(v109 + v108);
          unint64_t v111 = *(void *)(v107 + v108);
          v108 -= 8;
          if (v110 != v111)
          {
            if (v110 <= v111) {
              return result;
            }
            break;
          }
        }
      }
      else if (v78)
      {
        return result;
      }
    }
    else if (v25 << -(char)v26 >> -(char)v26 < v24 << -(char)v26 >> -(char)v26)
    {
      return result;
    }
  }
  else
  {
    if (v19 < v20) {
      goto LABEL_17;
    }
    if (v20 < v19) {
      return result;
    }
  }
  unsigned int v47 = *(_DWORD *)(a4 + 144);
  unsigned int v48 = *(_DWORD *)(a3 + 144);
  if (v47 == v48)
  {
    int v49 = (void *)(a3 + 152);
    uint64_t v50 = *(unsigned int *)(a4 + 160);
    if (v50 > 0x40)
    {
      uint64_t v90 = *(void *)(a4 + 152);
      uint64_t v91 = *(void *)(v90 + 8 * ((v50 - 1) >> 6)) & (1 << (v50 - 1));
      unsigned int v92 = *(_DWORD *)(a3 + 160);
      unsigned int v93 = v92 - 1;
      uint64_t v94 = *(void *)(a3 + 152);
      if (v92 >= 0x41) {
        int v49 = (void *)(v94 + 8 * (v93 >> 6));
      }
      if ((v91 != 0) == ((*v49 >> v93) & 1))
      {
        unint64_t v128 = v50 + 63;
        uint64_t v129 = v94 - 8;
        uint64_t v130 = (v128 >> 3) & 0x3FFFFFF8;
        uint64_t v131 = v90 - 8;
        while (v130)
        {
          unint64_t v132 = *(void *)(v131 + v130);
          unint64_t v133 = *(void *)(v129 + v130);
          v130 -= 8;
          if (v132 != v133)
          {
            if (v132 <= v133) {
              goto LABEL_17;
            }
            return result;
          }
        }
        return result;
      }
      if (!v91) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(a4 + 152) << -(char)v50) >> -(char)v50 >= (uint64_t)(*v49 << -(char)v50) >> -(char)v50)
    {
      return result;
    }
  }
  else if (v47 >= v48)
  {
    return result;
  }
LABEL_17:
  uint64_t result = sub_1CCE4D36C((uint64_t *)a3, (uint64_t *)a4);
  unsigned int v27 = *(_DWORD *)(a3 + 104);
  unsigned int v28 = *(_DWORD *)(a2 + 104);
  if (v27 == v28)
  {
    unsigned int v29 = (uint64_t *)(a3 + 112);
    uint64_t v30 = (uint64_t *)(a2 + 112);
    uint64_t v31 = *(unsigned int *)(a3 + 120);
    if (v31 > 0x40)
    {
      uint64_t v32 = *v29;
      uint64_t v63 = *(void *)(*v29 + 8 * ((v31 - 1) >> 6)) & (1 << (v31 - 1));
      unsigned int v34 = *(_DWORD *)(a2 + 120);
      unsigned int v64 = v34 - 1;
      uint64_t v33 = *(void *)(a2 + 112);
      if (v34 >= 0x41) {
        uint64_t v30 = (uint64_t *)(v33 + 8 * (v64 >> 6));
      }
      if ((v63 != 0) == (((unint64_t)*v30 >> v64) & 1))
      {
        unint64_t v75 = ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8;
        while (v75)
        {
          unint64_t v76 = *(void *)(v32 + v75 - 8);
          unint64_t v77 = *(void *)(v33 + v75 - 8);
          v75 -= 8;
          if (v76 != v77)
          {
            if (v76 <= v77) {
              goto LABEL_25;
            }
            break;
          }
        }
      }
      else if (v63)
      {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v32 = *v29;
      uint64_t v33 = *v30;
      if (*v29 << -(char)v31 >> -(char)v31 < *v30 << -(char)v31 >> -(char)v31) {
        goto LABEL_25;
      }
      unsigned int v34 = *(_DWORD *)(a2 + 120);
    }
    if (v34 > 0x40)
    {
      uint64_t v88 = *(void *)(v33 + 8 * ((v34 - 1) >> 6)) & (1 << (v34 - 1));
      unsigned int v89 = v31 - 1;
      if (v31 >= 0x41) {
        unsigned int v29 = (uint64_t *)(v32 + 8 * (v89 >> 6));
      }
      if ((v88 != 0) == (((unint64_t)*v29 >> v89) & 1))
      {
        uint64_t v123 = v32 - 8;
        unint64_t v124 = (((unint64_t)v34 + 63) >> 3) & 0x3FFFFFF8;
        uint64_t v125 = v33 - 8;
        while (v124)
        {
          unint64_t v126 = *(void *)(v125 + v124);
          unint64_t v127 = *(void *)(v123 + v124);
          v124 -= 8;
          if (v126 != v127)
          {
            if (v126 <= v127) {
              return result;
            }
            break;
          }
        }
      }
      else if (v88)
      {
        return result;
      }
    }
    else if (v33 << -(char)v34 >> -(char)v34 < v32 << -(char)v34 >> -(char)v34)
    {
      return result;
    }
  }
  else
  {
    if (v27 < v28) {
      goto LABEL_25;
    }
    if (v28 < v27) {
      return result;
    }
  }
  unsigned int v51 = *(_DWORD *)(a3 + 144);
  unsigned int v52 = *(_DWORD *)(a2 + 144);
  if (v51 == v52)
  {
    uint64_t v53 = (void *)(a2 + 152);
    uint64_t v54 = *(unsigned int *)(a3 + 160);
    if (v54 > 0x40)
    {
      uint64_t v102 = *(void *)(a3 + 152);
      uint64_t v103 = *(void *)(v102 + 8 * ((v54 - 1) >> 6)) & (1 << (v54 - 1));
      unsigned int v104 = *(_DWORD *)(a2 + 160);
      unsigned int v105 = v104 - 1;
      uint64_t v106 = *(void *)(a2 + 152);
      if (v104 >= 0x41) {
        uint64_t v53 = (void *)(v106 + 8 * (v105 >> 6));
      }
      if ((v103 != 0) == ((*v53 >> v105) & 1))
      {
        unint64_t v139 = v54 + 63;
        uint64_t v140 = v106 - 8;
        uint64_t v141 = (v139 >> 3) & 0x3FFFFFF8;
        uint64_t v142 = v102 - 8;
        while (v141)
        {
          unint64_t v143 = *(void *)(v142 + v141);
          unint64_t v144 = *(void *)(v140 + v141);
          v141 -= 8;
          if (v143 != v144)
          {
            if (v143 <= v144) {
              goto LABEL_25;
            }
            return result;
          }
        }
        return result;
      }
      if (!v103) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(a3 + 152) << -(char)v54) >> -(char)v54 >= (uint64_t)(*v53 << -(char)v54) >> -(char)v54)
    {
      return result;
    }
  }
  else if (v51 >= v52)
  {
    return result;
  }
LABEL_25:
  uint64_t result = sub_1CCE4D36C((uint64_t *)a2, (uint64_t *)a3);
  unsigned int v35 = *(_DWORD *)(a2 + 104);
  unsigned int v36 = *(_DWORD *)(a1 + 104);
  if (v35 == v36)
  {
    long long v37 = (uint64_t *)(a2 + 112);
    uint64_t v38 = (uint64_t *)(a1 + 112);
    uint64_t v39 = *(unsigned int *)(a2 + 120);
    if (v39 > 0x40)
    {
      uint64_t v40 = *v37;
      uint64_t v65 = *(void *)(*v37 + 8 * ((v39 - 1) >> 6)) & (1 << (v39 - 1));
      unsigned int v42 = *(_DWORD *)(a1 + 120);
      unsigned int v66 = v42 - 1;
      uint64_t v41 = *(void *)(a1 + 112);
      if (v42 >= 0x41) {
        uint64_t v38 = (uint64_t *)(v41 + 8 * (v66 >> 6));
      }
      if ((v65 != 0) == (((unint64_t)*v38 >> v66) & 1))
      {
        unint64_t v85 = ((unint64_t)(v39 + 63) >> 3) & 0x3FFFFFF8;
        while (v85)
        {
          unint64_t v86 = *(void *)(v40 + v85 - 8);
          unint64_t v87 = *(void *)(v41 + v85 - 8);
          v85 -= 8;
          if (v86 != v87)
          {
            if (v86 <= v87) {
              goto LABEL_38;
            }
            break;
          }
        }
      }
      else if (v65)
      {
        goto LABEL_38;
      }
LABEL_29:
      if (v42 > 0x40)
      {
        uint64_t v95 = *(void *)(v41 + 8 * ((v42 - 1) >> 6)) & (1 << (v42 - 1));
        unsigned int v96 = v39 - 1;
        if (v39 >= 0x41) {
          long long v37 = (uint64_t *)(v40 + 8 * (v96 >> 6));
        }
        if ((v95 != 0) == (((unint64_t)*v37 >> v96) & 1))
        {
          uint64_t v134 = v40 - 8;
          unint64_t v135 = (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8;
          uint64_t v136 = v41 - 8;
          while (v135)
          {
            unint64_t v137 = *(void *)(v136 + v135);
            unint64_t v138 = *(void *)(v134 + v135);
            v135 -= 8;
            if (v137 != v138)
            {
              if (v137 <= v138) {
                return result;
              }
              goto LABEL_52;
            }
          }
        }
        else if (v95)
        {
          return result;
        }
      }
      else if (v41 << -(char)v42 >> -(char)v42 < v40 << -(char)v42 >> -(char)v42)
      {
        return result;
      }
      goto LABEL_52;
    }
    uint64_t v40 = *v37;
    uint64_t v41 = *v38;
    if (*v37 << -(char)v39 >> -(char)v39 >= *v38 << -(char)v39 >> -(char)v39)
    {
      unsigned int v42 = *(_DWORD *)(a1 + 120);
      goto LABEL_29;
    }
LABEL_38:
    return sub_1CCE4D36C((uint64_t *)a1, (uint64_t *)a2);
  }
  if (v35 < v36) {
    goto LABEL_38;
  }
  if (v36 < v35) {
    return result;
  }
LABEL_52:
  unsigned int v55 = *(_DWORD *)(a2 + 144);
  unsigned int v56 = *(_DWORD *)(a1 + 144);
  if (v55 != v56)
  {
    if (v55 >= v56) {
      return result;
    }
    goto LABEL_38;
  }
  unint64_t v57 = (void *)(a1 + 152);
  uint64_t v58 = *(unsigned int *)(a2 + 160);
  if (v58 <= 0x40)
  {
    if ((uint64_t)(*(void *)(a2 + 152) << -(char)v58) >> -(char)v58 >= (uint64_t)(*v57 << -(char)v58) >> -(char)v58) {
      return result;
    }
    goto LABEL_38;
  }
  uint64_t v112 = *(void *)(a2 + 152);
  uint64_t v113 = *(void *)(v112 + 8 * ((v58 - 1) >> 6)) & (1 << (v58 - 1));
  unsigned int v114 = *(_DWORD *)(a1 + 160);
  unsigned int v115 = v114 - 1;
  uint64_t v116 = *(void *)(a1 + 152);
  if (v114 >= 0x41) {
    unint64_t v57 = (void *)(v116 + 8 * (v115 >> 6));
  }
  if ((v113 != 0) != ((*v57 >> v115) & 1))
  {
    if (!v113) {
      return result;
    }
    goto LABEL_38;
  }
  unint64_t v145 = v58 + 63;
  uint64_t v146 = v116 - 8;
  uint64_t v147 = (v145 >> 3) & 0x3FFFFFF8;
  uint64_t v148 = v112 - 8;
  while (v147)
  {
    unint64_t v149 = *(void *)(v148 + v147);
    unint64_t v150 = *(void *)(v146 + v147);
    v147 -= 8;
    if (v149 != v150)
    {
      if (v149 <= v150) {
        goto LABEL_38;
      }
      return result;
    }
  }
  return result;
}

uint64_t sub_1CCE4BB84(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(a2 + 104);
  unsigned int v7 = *(_DWORD *)(result + 104);
  if (v6 == v7)
  {
    uint64_t v8 = (uint64_t *)(a2 + 112);
    uint64_t v9 = (uint64_t *)(result + 112);
    uint64_t v10 = *(unsigned int *)(a2 + 120);
    if (v10 > 0x40)
    {
      uint64_t v11 = *v8;
      uint64_t v66 = *(void *)(*v8 + 8 * ((v10 - 1) >> 6)) & (1 << (v10 - 1));
      unsigned int v13 = *(_DWORD *)(result + 120);
      unsigned int v67 = v13 - 1;
      uint64_t v12 = *(void *)(result + 112);
      uint64_t result = v12 + 8 * ((v13 - 1) >> 6);
      if (v13 >= 0x41) {
        uint64_t v9 = (uint64_t *)(v12 + 8 * (v67 >> 6));
      }
      if ((v66 != 0) == (((unint64_t)*v9 >> v67) & 1))
      {
        unint64_t v70 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
        while (v70)
        {
          unint64_t v71 = *(void *)(v11 + v70 - 8);
          unint64_t v72 = *(void *)(v12 + v70 - 8);
          v70 -= 8;
          if (v71 != v72)
          {
            if (v71 <= v72) {
              goto LABEL_9;
            }
            break;
          }
        }
      }
      else if (v66)
      {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v11 = *v8;
      uint64_t v12 = *v9;
      if (*v8 << -(char)v10 >> -(char)v10 < *v9 << -(char)v10 >> -(char)v10) {
        goto LABEL_9;
      }
      unsigned int v13 = *(_DWORD *)(result + 120);
    }
    if (v13 > 0x40)
    {
      uint64_t v78 = *(void *)(v12 + 8 * ((v13 - 1) >> 6)) & (1 << (v13 - 1));
      unsigned int v79 = v10 - 1;
      if (v10 >= 0x41) {
        uint64_t v8 = (uint64_t *)(v11 + 8 * (v79 >> 6));
      }
      if ((v78 != 0) == (((unint64_t)*v8 >> v79) & 1))
      {
        uint64_t v99 = v11 - 8;
        unint64_t v100 = (((unint64_t)v13 + 63) >> 3) & 0x3FFFFFF8;
        uint64_t v101 = v12 - 8;
        while (v100)
        {
          unint64_t v102 = *(void *)(v101 + v100);
          unint64_t v103 = *(void *)(v99 + v100);
          v100 -= 8;
          if (v102 != v103)
          {
            if (v102 <= v103) {
              goto LABEL_29;
            }
            break;
          }
        }
      }
      else if (v78)
      {
        goto LABEL_29;
      }
    }
    else if (v12 << -(char)v13 >> -(char)v13 < v11 << -(char)v13 >> -(char)v13)
    {
      goto LABEL_29;
    }
  }
  else
  {
    if (v6 < v7) {
      goto LABEL_9;
    }
    if (v7 < v6) {
      goto LABEL_29;
    }
  }
  unsigned int v22 = *(_DWORD *)(a2 + 144);
  unsigned int v23 = *(_DWORD *)(v5 + 144);
  if (v22 != v23)
  {
    if (v22 >= v23) {
      goto LABEL_29;
    }
    goto LABEL_9;
  }
  uint64_t v24 = (void *)(v5 + 152);
  uint64_t v25 = *(unsigned int *)(a2 + 160);
  if (v25 <= 0x40)
  {
    if ((uint64_t)(*(void *)(a2 + 152) << -(char)v25) >> -(char)v25 >= (uint64_t)(*v24 << -(char)v25) >> -(char)v25) {
      goto LABEL_29;
    }
LABEL_9:
    unsigned int v14 = *(_DWORD *)(a3 + 104);
    if (v14 == v6)
    {
      uint64_t v15 = (uint64_t *)(a3 + 112);
      uint64_t v16 = (uint64_t *)(a2 + 112);
      uint64_t v17 = *(unsigned int *)(a3 + 120);
      if (v17 > 0x40)
      {
        uint64_t v18 = *v15;
        uint64_t v68 = *(void *)(*v15 + 8 * ((v17 - 1) >> 6)) & (1 << (v17 - 1));
        unsigned int v20 = *(_DWORD *)(a2 + 120);
        unsigned int v69 = v20 - 1;
        uint64_t v19 = *(void *)(a2 + 112);
        if (v20 >= 0x41) {
          uint64_t v16 = (uint64_t *)(v19 + 8 * (v69 >> 6));
        }
        if ((v68 != 0) == (((unint64_t)*v16 >> v69) & 1))
        {
          unint64_t v75 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
          while (v75)
          {
            unint64_t v76 = *(void *)(v18 + v75 - 8);
            unint64_t v77 = *(void *)(v19 + v75 - 8);
            v75 -= 8;
            if (v76 != v77)
            {
              if (v76 <= v77) {
                goto LABEL_17;
              }
              break;
            }
          }
        }
        else if (v68)
        {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v18 = *v15;
        uint64_t v19 = *v16;
        if (*v15 << -(char)v17 >> -(char)v17 < *v16 << -(char)v17 >> -(char)v17) {
          goto LABEL_17;
        }
        unsigned int v20 = *(_DWORD *)(a2 + 120);
      }
      if (v20 > 0x40)
      {
        uint64_t v84 = *(void *)(v19 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
        unsigned int v85 = v17 - 1;
        if (v17 >= 0x41) {
          uint64_t v15 = (uint64_t *)(v18 + 8 * (v85 >> 6));
        }
        if ((v84 != 0) == (((unint64_t)*v15 >> v85) & 1))
        {
          uint64_t v112 = v18 - 8;
          unint64_t v113 = (((unint64_t)v20 + 63) >> 3) & 0x3FFFFFF8;
          uint64_t v114 = v19 - 8;
          while (v113)
          {
            unint64_t v115 = *(void *)(v114 + v113);
            unint64_t v116 = *(void *)(v112 + v113);
            v113 -= 8;
            if (v115 != v116)
            {
              if (v115 <= v116) {
                goto LABEL_52;
              }
              break;
            }
          }
        }
        else if (v84)
        {
          goto LABEL_52;
        }
      }
      else if (v19 << -(char)v20 >> -(char)v20 < v18 << -(char)v20 >> -(char)v20)
      {
        goto LABEL_52;
      }
    }
    else
    {
      if (v14 < v6) {
        goto LABEL_17;
      }
      if (v6 < v14) {
        goto LABEL_52;
      }
    }
    unsigned int v26 = *(_DWORD *)(a3 + 144);
    unsigned int v27 = *(_DWORD *)(a2 + 144);
    if (v26 != v27)
    {
      if (v26 >= v27) {
        goto LABEL_52;
      }
      goto LABEL_17;
    }
    unsigned int v28 = (void *)(a2 + 152);
    uint64_t v29 = *(unsigned int *)(a3 + 160);
    if (v29 <= 0x40)
    {
      if ((uint64_t)(*(void *)(a3 + 152) << -(char)v29) >> -(char)v29 >= (uint64_t)(*v28 << -(char)v29) >> -(char)v29) {
        goto LABEL_52;
      }
LABEL_17:
      uint64_t v21 = (uint64_t *)v5;
LABEL_61:
      uint64_t v45 = (uint64_t *)a3;
      goto LABEL_62;
    }
    uint64_t v91 = *(void *)(a3 + 152);
    uint64_t v92 = *(void *)(v91 + 8 * ((v29 - 1) >> 6)) & (1 << (v29 - 1));
    unsigned int v93 = *(_DWORD *)(a2 + 160);
    unsigned int v94 = v93 - 1;
    uint64_t v95 = *(void *)(a2 + 152);
    if (v93 >= 0x41) {
      unsigned int v28 = (void *)(v95 + 8 * (v94 >> 6));
    }
    if ((v92 != 0) != ((*v28 >> v94) & 1))
    {
      if (!v92) {
        goto LABEL_52;
      }
      goto LABEL_17;
    }
    unint64_t v132 = v29 + 63;
    uint64_t v133 = v95 - 8;
    uint64_t v134 = (v132 >> 3) & 0x3FFFFFF8;
    uint64_t v135 = v91 - 8;
    while (v134)
    {
      unint64_t v136 = *(void *)(v135 + v134);
      unint64_t v137 = *(void *)(v133 + v134);
      v134 -= 8;
      if (v136 != v137)
      {
        if (v136 <= v137) {
          goto LABEL_17;
        }
        break;
      }
    }
LABEL_52:
    uint64_t result = sub_1CCE4D36C((uint64_t *)v5, (uint64_t *)a2);
    unsigned int v50 = *(_DWORD *)(a3 + 104);
    unsigned int v51 = *(_DWORD *)(a2 + 104);
    if (v50 == v51)
    {
      unsigned int v52 = (uint64_t *)(a3 + 112);
      uint64_t v53 = (uint64_t *)(a2 + 112);
      uint64_t v54 = *(unsigned int *)(a3 + 120);
      if (v54 > 0x40)
      {
        uint64_t v55 = *v52;
        uint64_t v82 = *(void *)(*v52 + 8 * ((v54 - 1) >> 6)) & (1 << (v54 - 1));
        unsigned int v57 = *(_DWORD *)(a2 + 120);
        unsigned int v83 = v57 - 1;
        uint64_t v56 = *(void *)(a2 + 112);
        if (v57 >= 0x41) {
          uint64_t v53 = (uint64_t *)(v56 + 8 * (v83 >> 6));
        }
        if ((v82 != 0) == (((unint64_t)*v53 >> v83) & 1))
        {
          unint64_t v107 = ((unint64_t)(v54 + 63) >> 3) & 0x3FFFFFF8;
          while (v107)
          {
            unint64_t v108 = *(void *)(v55 + v107 - 8);
            unint64_t v109 = *(void *)(v56 + v107 - 8);
            v107 -= 8;
            if (v108 != v109)
            {
              if (v108 <= v109) {
                goto LABEL_60;
              }
              break;
            }
          }
        }
        else if (v82)
        {
          goto LABEL_60;
        }
LABEL_56:
        if (v57 > 0x40)
        {
          uint64_t v125 = *(void *)(v56 + 8 * ((v57 - 1) >> 6)) & (1 << (v57 - 1));
          unsigned int v126 = v54 - 1;
          if (v54 >= 0x41) {
            unsigned int v52 = (uint64_t *)(v55 + 8 * (v126 >> 6));
          }
          if ((v125 != 0) == (((unint64_t)*v52 >> v126) & 1))
          {
            uint64_t v158 = v55 - 8;
            unint64_t v159 = (((unint64_t)v57 + 63) >> 3) & 0x3FFFFFF8;
            uint64_t v160 = v56 - 8;
            while (v159)
            {
              unint64_t v161 = *(void *)(v160 + v159);
              unint64_t v162 = *(void *)(v158 + v159);
              v159 -= 8;
              if (v161 != v162)
              {
                if (v161 <= v162) {
                  return result;
                }
                break;
              }
            }
          }
          else if (v125)
          {
            return result;
          }
        }
        else if (v56 << -(char)v57 >> -(char)v57 < v55 << -(char)v57 >> -(char)v57)
        {
          return result;
        }
LABEL_71:
        unsigned int v62 = *(_DWORD *)(a3 + 144);
        unsigned int v63 = *(_DWORD *)(a2 + 144);
        if (v62 == v63)
        {
          unsigned int v64 = (void *)(a2 + 152);
          uint64_t v65 = *(unsigned int *)(a3 + 160);
          if (v65 > 0x40)
          {
            uint64_t v143 = *(void *)(a3 + 152);
            uint64_t v144 = *(void *)(v143 + 8 * ((v65 - 1) >> 6)) & (1 << (v65 - 1));
            unsigned int v145 = *(_DWORD *)(a2 + 160);
            unsigned int v146 = v145 - 1;
            uint64_t v147 = *(void *)(a2 + 152);
            if (v145 >= 0x41) {
              unsigned int v64 = (void *)(v147 + 8 * (v146 >> 6));
            }
            if ((v144 != 0) == ((*v64 >> v146) & 1))
            {
              unint64_t v175 = v65 + 63;
              uint64_t v176 = v147 - 8;
              uint64_t v177 = (v175 >> 3) & 0x3FFFFFF8;
              uint64_t v178 = v143 - 8;
              while (v177)
              {
                unint64_t v179 = *(void *)(v178 + v177);
                unint64_t v180 = *(void *)(v176 + v177);
                v177 -= 8;
                if (v179 != v180)
                {
                  if (v179 <= v180) {
                    goto LABEL_60;
                  }
                  return result;
                }
              }
              return result;
            }
            if (!v144) {
              return result;
            }
          }
          else if ((uint64_t)(*(void *)(a3 + 152) << -(char)v65) >> -(char)v65 >= (uint64_t)(*v64 << -(char)v65) >> -(char)v65)
          {
            return result;
          }
        }
        else if (v62 >= v63)
        {
          return result;
        }
        goto LABEL_60;
      }
      uint64_t v55 = *v52;
      uint64_t v56 = *v53;
      if (*v52 << -(char)v54 >> -(char)v54 >= *v53 << -(char)v54 >> -(char)v54)
      {
        unsigned int v57 = *(_DWORD *)(a2 + 120);
        goto LABEL_56;
      }
    }
    else if (v50 >= v51)
    {
      if (v51 < v50) {
        return result;
      }
      goto LABEL_71;
    }
LABEL_60:
    uint64_t v21 = (uint64_t *)a2;
    goto LABEL_61;
  }
  uint64_t v86 = *(void *)(a2 + 152);
  uint64_t v87 = *(void *)(v86 + 8 * ((v25 - 1) >> 6)) & (1 << (v25 - 1));
  unsigned int v88 = *(_DWORD *)(v5 + 160);
  unsigned int v89 = v88 - 1;
  uint64_t v90 = *(void *)(v5 + 152);
  if (v88 >= 0x41) {
    uint64_t v24 = (void *)(v90 + 8 * (v89 >> 6));
  }
  if ((v87 != 0) != ((*v24 >> v89) & 1))
  {
    if (!v87) {
      goto LABEL_29;
    }
    goto LABEL_9;
  }
  unint64_t v117 = v25 + 63;
  uint64_t v118 = v90 - 8;
  uint64_t v119 = (v117 >> 3) & 0x3FFFFFF8;
  uint64_t v120 = v86 - 8;
  while (v119)
  {
    unint64_t v121 = *(void *)(v120 + v119);
    unint64_t v122 = *(void *)(v118 + v119);
    v119 -= 8;
    if (v121 != v122)
    {
      if (v121 <= v122) {
        goto LABEL_9;
      }
      break;
    }
  }
LABEL_29:
  unsigned int v30 = *(_DWORD *)(a3 + 104);
  if (v30 == v6)
  {
    uint64_t v31 = (uint64_t *)(a3 + 112);
    uint64_t v32 = (uint64_t *)(a2 + 112);
    uint64_t v33 = *(unsigned int *)(a3 + 120);
    if (v33 > 0x40)
    {
      uint64_t v34 = *v31;
      uint64_t v73 = *(void *)(*v31 + 8 * ((v33 - 1) >> 6)) & (1 << (v33 - 1));
      unsigned int v36 = *(_DWORD *)(a2 + 120);
      unsigned int v74 = v36 - 1;
      uint64_t v35 = *(void *)(a2 + 112);
      if (v36 >= 0x41) {
        uint64_t v32 = (uint64_t *)(v35 + 8 * (v74 >> 6));
      }
      if ((v73 != 0) == (((unint64_t)*v32 >> v74) & 1))
      {
        unint64_t v96 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
        while (v96)
        {
          unint64_t v97 = *(void *)(v34 + v96 - 8);
          unint64_t v98 = *(void *)(v35 + v96 - 8);
          v96 -= 8;
          if (v97 != v98)
          {
            if (v97 <= v98) {
              goto LABEL_37;
            }
            break;
          }
        }
      }
      else if (v73)
      {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v34 = *v31;
      uint64_t v35 = *v32;
      if (*v31 << -(char)v33 >> -(char)v33 < *v32 << -(char)v33 >> -(char)v33) {
        goto LABEL_37;
      }
      unsigned int v36 = *(_DWORD *)(a2 + 120);
    }
    if (v36 > 0x40)
    {
      uint64_t v110 = *(void *)(v35 + 8 * ((v36 - 1) >> 6)) & (1 << (v36 - 1));
      unsigned int v111 = v33 - 1;
      if (v33 >= 0x41) {
        uint64_t v31 = (uint64_t *)(v34 + 8 * (v111 >> 6));
      }
      if ((v110 != 0) == (((unint64_t)*v31 >> v111) & 1))
      {
        uint64_t v148 = v34 - 8;
        unint64_t v149 = (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8;
        uint64_t v150 = v35 - 8;
        while (v149)
        {
          unint64_t v151 = *(void *)(v150 + v149);
          unint64_t v152 = *(void *)(v148 + v149);
          v149 -= 8;
          if (v151 != v152)
          {
            if (v151 <= v152) {
              return result;
            }
            break;
          }
        }
      }
      else if (v110)
      {
        return result;
      }
    }
    else if (v35 << -(char)v36 >> -(char)v36 < v34 << -(char)v36 >> -(char)v36)
    {
      return result;
    }
  }
  else
  {
    if (v30 < v6) {
      goto LABEL_37;
    }
    if (v6 < v30) {
      return result;
    }
  }
  unsigned int v46 = *(_DWORD *)(a3 + 144);
  unsigned int v47 = *(_DWORD *)(a2 + 144);
  if (v46 == v47)
  {
    unsigned int v48 = (void *)(a2 + 152);
    uint64_t v49 = *(unsigned int *)(a3 + 160);
    if (v49 > 0x40)
    {
      uint64_t v127 = *(void *)(a3 + 152);
      uint64_t v128 = *(void *)(v127 + 8 * ((v49 - 1) >> 6)) & (1 << (v49 - 1));
      unsigned int v129 = *(_DWORD *)(a2 + 160);
      unsigned int v130 = v129 - 1;
      uint64_t v131 = *(void *)(a2 + 152);
      if (v129 >= 0x41) {
        unsigned int v48 = (void *)(v131 + 8 * (v130 >> 6));
      }
      if ((v128 != 0) == ((*v48 >> v130) & 1))
      {
        unint64_t v163 = v49 + 63;
        uint64_t v164 = v131 - 8;
        uint64_t v165 = (v163 >> 3) & 0x3FFFFFF8;
        uint64_t v166 = v127 - 8;
        while (v165)
        {
          unint64_t v167 = *(void *)(v166 + v165);
          unint64_t v168 = *(void *)(v164 + v165);
          v165 -= 8;
          if (v167 != v168)
          {
            if (v167 <= v168) {
              goto LABEL_37;
            }
            return result;
          }
        }
        return result;
      }
      if (!v128) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(a3 + 152) << -(char)v49) >> -(char)v49 >= (uint64_t)(*v48 << -(char)v49) >> -(char)v49)
    {
      return result;
    }
  }
  else if (v46 >= v47)
  {
    return result;
  }
LABEL_37:
  uint64_t result = sub_1CCE4D36C((uint64_t *)a2, (uint64_t *)a3);
  unsigned int v37 = *(_DWORD *)(a2 + 104);
  unsigned int v38 = *(_DWORD *)(v5 + 104);
  if (v37 == v38)
  {
    uint64_t v39 = (uint64_t *)(a2 + 112);
    uint64_t v40 = (uint64_t *)(v5 + 112);
    uint64_t v41 = *(unsigned int *)(a2 + 120);
    if (v41 > 0x40)
    {
      uint64_t v42 = *v39;
      uint64_t v80 = *(void *)(*v39 + 8 * ((v41 - 1) >> 6)) & (1 << (v41 - 1));
      unsigned int v44 = *(_DWORD *)(v5 + 120);
      unsigned int v81 = v44 - 1;
      uint64_t v43 = *(void *)(v5 + 112);
      if (v44 >= 0x41) {
        uint64_t v40 = (uint64_t *)(v43 + 8 * (v81 >> 6));
      }
      if ((v80 != 0) == (((unint64_t)*v40 >> v81) & 1))
      {
        unint64_t v104 = ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8;
        while (v104)
        {
          unint64_t v105 = *(void *)(v42 + v104 - 8);
          unint64_t v106 = *(void *)(v43 + v104 - 8);
          v104 -= 8;
          if (v105 != v106)
          {
            if (v105 <= v106) {
              goto LABEL_45;
            }
            break;
          }
        }
      }
      else if (v80)
      {
        goto LABEL_45;
      }
LABEL_41:
      if (v44 > 0x40)
      {
        uint64_t v123 = *(void *)(v43 + 8 * ((v44 - 1) >> 6)) & (1 << (v44 - 1));
        unsigned int v124 = v41 - 1;
        if (v41 >= 0x41) {
          uint64_t v39 = (uint64_t *)(v42 + 8 * (v124 >> 6));
        }
        if ((v123 != 0) == (((unint64_t)*v39 >> v124) & 1))
        {
          uint64_t v153 = v42 - 8;
          unint64_t v154 = (((unint64_t)v44 + 63) >> 3) & 0x3FFFFFF8;
          uint64_t v155 = v43 - 8;
          while (v154)
          {
            unint64_t v156 = *(void *)(v155 + v154);
            unint64_t v157 = *(void *)(v153 + v154);
            v154 -= 8;
            if (v156 != v157)
            {
              if (v156 <= v157) {
                return result;
              }
              goto LABEL_66;
            }
          }
        }
        else if (v123)
        {
          return result;
        }
      }
      else if (v43 << -(char)v44 >> -(char)v44 < v42 << -(char)v44 >> -(char)v44)
      {
        return result;
      }
      goto LABEL_66;
    }
    uint64_t v42 = *v39;
    uint64_t v43 = *v40;
    if (*v39 << -(char)v41 >> -(char)v41 >= *v40 << -(char)v41 >> -(char)v41)
    {
      unsigned int v44 = *(_DWORD *)(v5 + 120);
      goto LABEL_41;
    }
LABEL_45:
    uint64_t v21 = (uint64_t *)v5;
    uint64_t v45 = (uint64_t *)a2;
LABEL_62:
    return sub_1CCE4D36C(v21, v45);
  }
  if (v37 < v38) {
    goto LABEL_45;
  }
  if (v38 < v37) {
    return result;
  }
LABEL_66:
  unsigned int v58 = *(_DWORD *)(a2 + 144);
  unsigned int v59 = *(_DWORD *)(v5 + 144);
  if (v58 != v59)
  {
    if (v58 >= v59) {
      return result;
    }
    goto LABEL_45;
  }
  unsigned int v60 = (void *)(v5 + 152);
  uint64_t v61 = *(unsigned int *)(a2 + 160);
  if (v61 <= 0x40)
  {
    if ((uint64_t)(*(void *)(a2 + 152) << -(char)v61) >> -(char)v61 >= (uint64_t)(*v60 << -(char)v61) >> -(char)v61) {
      return result;
    }
    goto LABEL_45;
  }
  uint64_t v138 = *(void *)(a2 + 152);
  uint64_t v139 = *(void *)(v138 + 8 * ((v61 - 1) >> 6)) & (1 << (v61 - 1));
  unsigned int v140 = *(_DWORD *)(v5 + 160);
  unsigned int v141 = v140 - 1;
  uint64_t v142 = *(void *)(v5 + 152);
  if (v140 >= 0x41) {
    unsigned int v60 = (void *)(v142 + 8 * (v141 >> 6));
  }
  if ((v139 != 0) != ((*v60 >> v141) & 1))
  {
    if (!v139) {
      return result;
    }
    goto LABEL_45;
  }
  unint64_t v169 = v61 + 63;
  uint64_t v170 = v142 - 8;
  uint64_t v171 = (v169 >> 3) & 0x3FFFFFF8;
  uint64_t v172 = v138 - 8;
  while (v171)
  {
    unint64_t v173 = *(void *)(v172 + v171);
    unint64_t v174 = *(void *)(v170 + v171);
    v171 -= 8;
    if (v173 != v174)
    {
      if (v173 <= v174) {
        goto LABEL_45;
      }
      return result;
    }
  }
  return result;
}

BOOL sub_1CCE4C810(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xD37A6F4DE9BD37A7 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v6 = *(_DWORD *)(a2 - 80);
      unsigned int v7 = *(_DWORD *)(a1 + 104);
      if (v6 == v7)
      {
        uint64_t v8 = (uint64_t *)(a2 - 72);
        uint64_t v9 = (uint64_t *)(a1 + 112);
        uint64_t v10 = *(unsigned int *)(a2 - 64);
        if (v10 > 0x40)
        {
          uint64_t v11 = *v8;
          uint64_t v99 = *(void *)(*v8 + 8 * ((v10 - 1) >> 6)) & (1 << (v10 - 1));
          unsigned int v13 = *(_DWORD *)(a1 + 120);
          unsigned int v100 = v13 - 1;
          uint64_t v12 = *(void *)(a1 + 112);
          if (v13 >= 0x41) {
            uint64_t v9 = (uint64_t *)(v12 + 8 * (v100 >> 6));
          }
          if ((v99 != 0) == (((unint64_t)*v9 >> v100) & 1))
          {
            unint64_t v101 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              if (!v101) {
                goto LABEL_6;
              }
              unint64_t v102 = *(void *)(v11 + v101 - 8);
              unint64_t v103 = *(void *)(v12 + v101 - 8);
              v101 -= 8;
            }
            while (v102 == v103);
            if (v102 <= v103) {
              goto LABEL_126;
            }
          }
          else if (v99)
          {
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t v11 = *v8;
          uint64_t v12 = *v9;
          if (*v8 << -(char)v10 >> -(char)v10 < *v9 << -(char)v10 >> -(char)v10) {
            goto LABEL_126;
          }
          unsigned int v13 = *(_DWORD *)(a1 + 120);
        }
LABEL_6:
        if (v13 > 0x40)
        {
          uint64_t v104 = *(void *)(v12 + 8 * ((v13 - 1) >> 6)) & (1 << (v13 - 1));
          unsigned int v105 = v10 - 1;
          if (v10 >= 0x41) {
            uint64_t v8 = (uint64_t *)(v11 + 8 * (v105 >> 6));
          }
          if ((v104 != 0) == (((unint64_t)*v8 >> v105) & 1))
          {
            uint64_t v111 = v11 - 8;
            unint64_t v112 = (((unint64_t)v13 + 63) >> 3) & 0x3FFFFFF8;
            uint64_t v113 = v12 - 8;
            do
            {
              if (!v112) {
                goto LABEL_130;
              }
              unint64_t v114 = *(void *)(v113 + v112);
              unint64_t v115 = *(void *)(v111 + v112);
              v112 -= 8;
            }
            while (v114 == v115);
            if (v114 <= v115) {
              return 1;
            }
          }
          else if (v104)
          {
            return 1;
          }
        }
        else if (v12 << -(char)v13 >> -(char)v13 < v11 << -(char)v13 >> -(char)v13)
        {
          return 1;
        }
LABEL_130:
        unsigned int v95 = *(_DWORD *)(a2 - 40);
        unsigned int v96 = *(_DWORD *)(a1 + 144);
        if (v95 == v96)
        {
          unint64_t v97 = (void *)(a1 + 152);
          uint64_t v98 = *(unsigned int *)(a2 - 24);
          if (v98 > 0x40)
          {
            uint64_t v106 = *(void *)(a2 - 32);
            uint64_t v107 = *(void *)(v106 + 8 * ((v98 - 1) >> 6)) & (1 << (v98 - 1));
            unsigned int v108 = *(_DWORD *)(a1 + 160);
            unsigned int v109 = v108 - 1;
            uint64_t v110 = *(void *)(a1 + 152);
            if (v108 >= 0x41) {
              unint64_t v97 = (void *)(v110 + 8 * (v109 >> 6));
            }
            if ((v107 != 0) == ((*v97 >> v109) & 1))
            {
              unint64_t v116 = v98 + 63;
              uint64_t v117 = v110 - 8;
              uint64_t v118 = (v116 >> 3) & 0x3FFFFFF8;
              uint64_t v119 = v106 - 8;
              do
              {
                if (!v118) {
                  return 1;
                }
                unint64_t v120 = *(void *)(v119 + v118);
                unint64_t v121 = *(void *)(v117 + v118);
                v118 -= 8;
              }
              while (v120 == v121);
              if (v120 > v121) {
                return 1;
              }
            }
            else if (!v107)
            {
              return 1;
            }
          }
          else if ((uint64_t)(*(void *)(a2 - 32) << -(char)v98) >> -(char)v98 >= (uint64_t)(*v97 << -(char)v98) >> -(char)v98)
          {
            return 1;
          }
        }
        else if (v95 >= v96)
        {
          return 1;
        }
LABEL_126:
        sub_1CCE4D36C((uint64_t *)a1, (uint64_t *)(a2 - 184));
        return 1;
      }
      if (v6 < v7) {
        goto LABEL_126;
      }
      if (v7 >= v6) {
        goto LABEL_130;
      }
      return result;
    case 3uLL:
      sub_1CCE4BB84(a1, a1 + 184, a2 - 184);
      return 1;
    case 4uLL:
      sub_1CCE4D5FC(a1, a1 + 184, a1 + 368, a2 - 184);
      return 1;
    case 5uLL:
      sub_1CCE4B144(a1, a1 + 184, a1 + 368, a1 + 552, a2 - 184);
      return 1;
    default:
      uint64_t v14 = a1 + 368;
      sub_1CCE4BB84(a1, a1 + 184, a1 + 368);
      uint64_t v15 = a1 + 552;
      if (a1 + 552 == v2) {
        return 1;
      }
      int v16 = 0;
      uint64_t v17 = (unsigned int *)&v125;
      int64x2_t v123 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v122 = v2;
      while (1)
      {
        unsigned int v18 = *(_DWORD *)(v15 + 104);
        unsigned int v19 = *(_DWORD *)(v14 + 104);
        if (v18 == v19)
        {
          unsigned int v20 = (uint64_t *)(v15 + 112);
          uint64_t v21 = (uint64_t *)(v14 + 112);
          uint64_t v22 = *(unsigned int *)(v15 + 120);
          if (v22 > 0x40)
          {
            uint64_t v23 = *v20;
            uint64_t v72 = *(void *)(*v20 + 8 * ((v22 - 1) >> 6)) & (1 << (v22 - 1));
            unsigned int v25 = *(_DWORD *)(v14 + 120);
            unsigned int v73 = v25 - 1;
            uint64_t v24 = *(void *)(v14 + 112);
            if (v25 >= 0x41) {
              uint64_t v21 = (uint64_t *)(v24 + 8 * (v73 >> 6));
            }
            if ((v72 != 0) == (((unint64_t)*v21 >> v73) & 1))
            {
              unint64_t v74 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                if (!v74) {
                  goto LABEL_15;
                }
                unint64_t v75 = *(void *)(v23 + v74 - 8);
                unint64_t v76 = *(void *)(v24 + v74 - 8);
                v74 -= 8;
              }
              while (v75 == v76);
              if (v75 <= v76) {
                goto LABEL_23;
              }
            }
            else if (v72)
            {
              goto LABEL_23;
            }
          }
          else
          {
            uint64_t v23 = *v20;
            uint64_t v24 = *v21;
            if (*v20 << -(char)v22 >> -(char)v22 < *v21 << -(char)v22 >> -(char)v22) {
              goto LABEL_23;
            }
            unsigned int v25 = *(_DWORD *)(v14 + 120);
          }
LABEL_15:
          if (v25 > 0x40)
          {
            uint64_t v82 = *(void *)(v24 + 8 * ((v25 - 1) >> 6)) & (1 << (v25 - 1));
            unsigned int v83 = v22 - 1;
            if (v22 >= 0x41) {
              unsigned int v20 = (uint64_t *)(v23 + 8 * (v83 >> 6));
            }
            if ((v82 != 0) == (((unint64_t)*v20 >> v83) & 1))
            {
              uint64_t v90 = v23 - 8;
              unint64_t v91 = (((unint64_t)v25 + 63) >> 3) & 0x3FFFFFF8;
              uint64_t v92 = v24 - 8;
              while (v91)
              {
                unint64_t v93 = *(void *)(v92 + v91);
                unint64_t v94 = *(void *)(v90 + v91);
                v91 -= 8;
                if (v93 != v94)
                {
                  if (v93 <= v94) {
                    goto LABEL_89;
                  }
                  break;
                }
              }
            }
            else if (v82)
            {
              goto LABEL_89;
            }
          }
          else if (v24 << -(char)v25 >> -(char)v25 < v23 << -(char)v25 >> -(char)v25)
          {
            goto LABEL_89;
          }
        }
        else
        {
          if (v18 < v19) {
            goto LABEL_23;
          }
          if (v19 < v18) {
            goto LABEL_89;
          }
        }
        unsigned int v26 = *(_DWORD *)(v15 + 144);
        unsigned int v27 = *(_DWORD *)(v14 + 144);
        if (v26 != v27)
        {
          if (v26 >= v27) {
            goto LABEL_89;
          }
          goto LABEL_23;
        }
        unsigned int v28 = (void *)(v14 + 152);
        uint64_t v29 = *(unsigned int *)(v15 + 160);
        if (v29 <= 0x40)
        {
          if ((uint64_t)(*(void *)(v15 + 152) << -(char)v29) >> -(char)v29 >= (uint64_t)(*v28 << -(char)v29) >> -(char)v29) {
            goto LABEL_89;
          }
          goto LABEL_23;
        }
        uint64_t v77 = *(void *)(v15 + 152);
        uint64_t v78 = *(void *)(v77 + 8 * ((v29 - 1) >> 6)) & (1 << (v29 - 1));
        unsigned int v79 = *(_DWORD *)(v14 + 160);
        unsigned int v80 = v79 - 1;
        uint64_t v81 = *(void *)(v14 + 152);
        if (v79 >= 0x41) {
          unsigned int v28 = (void *)(v81 + 8 * (v80 >> 6));
        }
        if ((v78 != 0) != ((*v28 >> v80) & 1)) {
          break;
        }
        unint64_t v84 = v29 + 63;
        uint64_t v85 = v81 - 8;
        uint64_t v86 = (v84 >> 3) & 0x3FFFFFF8;
        uint64_t v87 = v77 - 8;
        do
        {
          if (!v86) {
            goto LABEL_89;
          }
          unint64_t v88 = *(void *)(v87 + v86);
          unint64_t v89 = *(void *)(v85 + v86);
          v86 -= 8;
        }
        while (v88 == v89);
        if (v88 <= v89) {
          goto LABEL_23;
        }
LABEL_89:
        uint64_t v14 = v15;
        v15 += 184;
        if (v15 == v2) {
          return 1;
        }
      }
      if (!v78) {
        goto LABEL_89;
      }
LABEL_23:
      uint64_t v124 = *(void *)v15;
      uint64_t v125 = 1;
      int64x2_t v126 = v123;
      int64x2_t v127 = v123;
      int64x2_t v128 = v123;
      int64x2_t v129 = v123;
      unsigned int v30 = v17;
      sub_1CD65E534(v17, (unsigned int *)(v15 + 8));
      uint64_t v31 = *(void *)(v15 + 80);
      long long v131 = *(_OWORD *)(v15 + 88);
      unsigned int v132 = *(_DWORD *)(v15 + 104);
      unsigned int v134 = *(_DWORD *)(v15 + 120);
      uint64_t v32 = *(void *)(v15 + 112);
      uint64_t v130 = v31;
      uint64_t v133 = v32;
      *(_DWORD *)(v15 + 120) = 0;
      long long v135 = *(_OWORD *)(v15 + 128);
      unsigned int v136 = *(_DWORD *)(v15 + 144);
      unsigned int v138 = *(_DWORD *)(v15 + 160);
      uint64_t v137 = *(void *)(v15 + 152);
      *(_DWORD *)(v15 + 160) = 0;
      uint64_t v33 = v15;
      long long v139 = *(_OWORD *)(v15 + 168);
      break;
  }
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_24:
        uint64_t v34 = v33;
        uint64_t v33 = v14;
        *(void *)uint64_t v34 = *(void *)v14;
        uint64_t v35 = v14 + 8;
        sub_1CD65E4C8(v34 + 8, (unsigned int *)(v14 + 8));
        *(void *)(v34 + 80) = *(void *)(v14 + 80);
        unsigned int v36 = (void *)(v14 + 88);
        sub_1CCE45CD0(v34 + 88, v14 + 88);
        unsigned int v37 = (void *)(v14 + 128);
        sub_1CCE45CD0(v34 + 128, v14 + 128);
        *(_OWORD *)(v34 + 168) = *(_OWORD *)(v14 + 168);
        if (v14 == a1)
        {
          uint64_t v66 = a1;
LABEL_70:
          unsigned int v67 = (_OWORD *)(v33 + 168);
          *(void *)uint64_t v66 = v124;
          uint64_t v68 = v35;
          uint64_t v17 = v30;
          sub_1CD65E4C8(v68, v30);
          *(void *)(v66 + 80) = v130;
          if ((uint64_t *)v66 == &v124)
          {
            unsigned int v71 = v138;
            uint64_t v2 = v122;
            *unsigned int v67 = v139;
            if (v71 >= 0x41 && v137) {
              MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
            }
          }
          else
          {
            *unsigned int v36 = v131;
            *(void *)(v66 + 96) = *((void *)&v131 + 1);
            *(_DWORD *)(v66 + 104) = v132;
            uint64_t v2 = v122;
            if (*(_DWORD *)(v66 + 120) >= 0x41u)
            {
              uint64_t v69 = *(void *)(v66 + 112);
              if (v69) {
                MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
              }
            }
            *(void *)(v66 + 112) = v133;
            *(_DWORD *)(v66 + 120) = v134;
            unsigned int v134 = 0;
            void *v37 = v135;
            *(void *)(v66 + 136) = *((void *)&v135 + 1);
            *(_DWORD *)(v66 + 144) = v136;
            if (*(_DWORD *)(v66 + 160) >= 0x41u)
            {
              uint64_t v70 = *(void *)(v66 + 152);
              if (v70) {
                MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
              }
            }
            *(void *)(v66 + 152) = v137;
            *(_DWORD *)(v66 + 160) = v138;
            unsigned int v138 = 0;
            *unsigned int v67 = v139;
          }
          if (v134 >= 0x41 && v133) {
            MEMORY[0x1D25D9CB0](v133, 0x1000C8000313F17);
          }
          if ((v125 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v126.i64[0], 8);
          }
          if (++v16 == 8) {
            return v15 + 184 == v2;
          }
          goto LABEL_89;
        }
        v14 -= 184;
        unsigned int v38 = *(_DWORD *)(v33 - 80);
        if (v132 == v38) {
          break;
        }
        if (v132 >= v38)
        {
          if (v38 < v132) {
            goto LABEL_69;
          }
LABEL_34:
          unsigned int v43 = *(_DWORD *)(v33 - 40);
          if (v136 == v43)
          {
            unsigned int v44 = (void *)(v33 - 32);
            if (v138 > 0x40)
            {
              uint64_t v50 = *(void *)(v137 + 8 * ((v138 - 1) >> 6)) & (1 << (v138 - 1));
              unsigned int v51 = *(_DWORD *)(v33 - 24);
              unsigned int v52 = v51 - 1;
              uint64_t v53 = *(void *)(v33 - 32);
              if (v51 >= 0x41) {
                unsigned int v44 = (void *)(v53 + 8 * (v52 >> 6));
              }
              if ((v50 != 0) == ((*v44 >> v52) & 1))
              {
                uint64_t v57 = v53 - 8;
                unint64_t v58 = (((unint64_t)v138 + 63) >> 3) & 0x3FFFFFF8;
                while (v58)
                {
                  unint64_t v59 = *(void *)(v137 - 8 + v58);
                  unint64_t v60 = *(void *)(v57 + v58);
                  v58 -= 8;
                  if (v59 != v60)
                  {
                    if (v59 <= v60) {
                      goto LABEL_24;
                    }
                    break;
                  }
                }
LABEL_69:
                uint64_t v66 = v33;
                goto LABEL_70;
              }
              if (!v50) {
                goto LABEL_69;
              }
            }
            else if (v137 << -(uint64_t)v138 >> -(uint64_t)v138 >= (uint64_t)(*v44 << -(uint64_t)v138) >> -(uint64_t)v138)
            {
              goto LABEL_69;
            }
          }
          else if (v136 >= v43)
          {
            goto LABEL_69;
          }
        }
      }
      uint64_t v39 = (uint64_t *)(v33 - 72);
      if (v134 > 0x40) {
        break;
      }
      uint64_t v40 = v133;
      uint64_t v41 = *v39;
      if (v133 << -(char)v134 >> -(char)v134 >= *v39 << -(char)v134 >> -(char)v134)
      {
        unsigned int v42 = *(_DWORD *)(v33 - 64);
        goto LABEL_29;
      }
    }
    uint64_t v40 = v133;
    uint64_t v45 = *(void *)(v133 + 8 * ((v134 - 1) >> 6)) & (1 << (v134 - 1));
    unsigned int v42 = *(_DWORD *)(v33 - 64);
    unsigned int v46 = v42 - 1;
    uint64_t v41 = *(void *)(v33 - 72);
    if (v42 >= 0x41) {
      uint64_t v39 = (uint64_t *)(v41 + 8 * (v46 >> 6));
    }
    if ((v45 != 0) == (((unint64_t)*v39 >> v46) & 1))
    {
      unint64_t v47 = (((unint64_t)v134 + 63) >> 3) & 0x3FFFFFF8;
      while (v47)
      {
        unint64_t v48 = *(void *)(v133 + v47 - 8);
        unint64_t v49 = *(void *)(v41 + v47 - 8);
        v47 -= 8;
        if (v48 != v49)
        {
          if (v48 <= v49) {
            goto LABEL_24;
          }
          break;
        }
      }
LABEL_29:
      if (v42 > 0x40)
      {
        uint64_t v54 = *(void *)(v41 + 8 * ((v42 - 1) >> 6)) & (1 << (v42 - 1));
        unsigned int v55 = v134 - 1;
        uint64_t v56 = &v133;
        if (v134 >= 0x41) {
          uint64_t v56 = (uint64_t *)(v40 + 8 * (v55 >> 6));
        }
        if ((v54 != 0) == (((unint64_t)*v56 >> v55) & 1))
        {
          uint64_t v61 = v40 - 8;
          unint64_t v62 = (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8;
          uint64_t v63 = v41 - 8;
          while (v62)
          {
            unint64_t v64 = *(void *)(v63 + v62);
            unint64_t v65 = *(void *)(v61 + v62);
            v62 -= 8;
            if (v64 != v65)
            {
              if (v64 > v65) {
                goto LABEL_34;
              }
              goto LABEL_69;
            }
          }
        }
        else if (v54)
        {
          goto LABEL_69;
        }
      }
      else if (v41 << -(char)v42 >> -(char)v42 < v40 << -(char)v42 >> -(char)v42)
      {
        goto LABEL_69;
      }
      goto LABEL_34;
    }
    if (!v45) {
      goto LABEL_29;
    }
  }
}

uint64_t sub_1CCE4D36C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  uint64_t v10 = 1;
  int64x2_t v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v12 = v11;
  int64x2_t v13 = v11;
  int64x2_t v14 = v11;
  uint64_t v4 = (uint64_t)(a1 + 1);
  sub_1CD65E534((unsigned int *)&v10, (unsigned int *)a1 + 2);
  uint64_t v15 = a1[10];
  long long v16 = *(_OWORD *)(a1 + 11);
  int v17 = *((_DWORD *)a1 + 26);
  unsigned int v19 = *((_DWORD *)a1 + 30);
  uint64_t v18 = a1[14];
  *((_DWORD *)a1 + 30) = 0;
  long long v20 = *((_OWORD *)a1 + 8);
  int v21 = *((_DWORD *)a1 + 36);
  unsigned int v23 = *((_DWORD *)a1 + 40);
  uint64_t v22 = a1[19];
  *((_DWORD *)a1 + 40) = 0;
  long long v5 = *(_OWORD *)(a1 + 21);
  *a1 = *a2;
  long long v24 = v5;
  sub_1CD65E4C8(v4, (unsigned int *)a2 + 2);
  a1[10] = a2[10];
  sub_1CCE45CD0((uint64_t)(a1 + 11), (uint64_t)(a2 + 11));
  sub_1CCE45CD0((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  unsigned int v6 = a2 + 21;
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
  *a2 = v9;
  uint64_t result = sub_1CD65E4C8((uint64_t)(a2 + 1), (unsigned int *)&v10);
  a2[10] = v15;
  if (&v9 == a2)
  {
    unsigned int v8 = v23;
    _OWORD *v6 = v24;
    if (v8 >= 0x41)
    {
      uint64_t result = v22;
      if (v22) {
        uint64_t result = MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *(_OWORD *)(a2 + 11) = v16;
    *((_DWORD *)a2 + 26) = v17;
    if (*((_DWORD *)a2 + 30) >= 0x41u)
    {
      uint64_t result = a2[14];
      if (result) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    a2[14] = v18;
    *((_DWORD *)a2 + 30) = v19;
    unsigned int v19 = 0;
    *((_OWORD *)a2 + 8) = v20;
    *((_DWORD *)a2 + 36) = v21;
    if (*((_DWORD *)a2 + 40) >= 0x41u)
    {
      uint64_t result = a2[19];
      if (result) {
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
      }
    }
    a2[19] = v22;
    *((_DWORD *)a2 + 40) = v23;
    unsigned int v23 = 0;
    _OWORD *v6 = v24;
  }
  if (v19 >= 0x41)
  {
    uint64_t result = v18;
    if (v18) {
      uint64_t result = MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
    }
  }
  if ((v10 & 1) == 0) {
    return MEMORY[0x1D25D9CD0](v11.i64[0], 8);
  }
  return result;
}

uint64_t sub_1CCE4D5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1CCE4BB84(a1, a2, a3);
  unsigned int v9 = *(_DWORD *)(a4 + 104);
  unsigned int v10 = *(_DWORD *)(a3 + 104);
  if (v9 == v10)
  {
    int64x2_t v11 = (uint64_t *)(a4 + 112);
    int64x2_t v12 = (uint64_t *)(a3 + 112);
    uint64_t v13 = *(unsigned int *)(a4 + 120);
    if (v13 > 0x40)
    {
      uint64_t v14 = *v11;
      uint64_t v45 = *(void *)(*v11 + 8 * ((v13 - 1) >> 6)) & (1 << (v13 - 1));
      unsigned int v16 = *(_DWORD *)(a3 + 120);
      unsigned int v46 = v16 - 1;
      uint64_t v15 = *(void *)(a3 + 112);
      if (v16 >= 0x41) {
        int64x2_t v12 = (uint64_t *)(v15 + 8 * (v46 >> 6));
      }
      if ((v45 != 0) == (((unint64_t)*v12 >> v46) & 1))
      {
        unint64_t v51 = ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8;
        while (v51)
        {
          unint64_t v52 = *(void *)(v14 + v51 - 8);
          unint64_t v53 = *(void *)(v15 + v51 - 8);
          v51 -= 8;
          if (v52 != v53)
          {
            if (v52 <= v53) {
              goto LABEL_9;
            }
            break;
          }
        }
      }
      else if (v45)
      {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v14 = *v11;
      uint64_t v15 = *v12;
      if (*v11 << -(char)v13 >> -(char)v13 < *v12 << -(char)v13 >> -(char)v13) {
        goto LABEL_9;
      }
      unsigned int v16 = *(_DWORD *)(a3 + 120);
    }
    if (v16 > 0x40)
    {
      uint64_t v57 = *(void *)(v15 + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
      unsigned int v58 = v13 - 1;
      if (v13 >= 0x41) {
        int64x2_t v11 = (uint64_t *)(v14 + 8 * (v58 >> 6));
      }
      if ((v57 != 0) == (((unint64_t)*v11 >> v58) & 1))
      {
        uint64_t v76 = v14 - 8;
        unint64_t v77 = (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8;
        uint64_t v78 = v15 - 8;
        while (v77)
        {
          unint64_t v79 = *(void *)(v78 + v77);
          unint64_t v80 = *(void *)(v76 + v77);
          v77 -= 8;
          if (v79 != v80)
          {
            if (v79 <= v80) {
              return result;
            }
            break;
          }
        }
      }
      else if (v57)
      {
        return result;
      }
    }
    else if (v15 << -(char)v16 >> -(char)v16 < v14 << -(char)v16 >> -(char)v16)
    {
      return result;
    }
  }
  else
  {
    if (v9 < v10) {
      goto LABEL_9;
    }
    if (v10 < v9) {
      return result;
    }
  }
  unsigned int v33 = *(_DWORD *)(a4 + 144);
  unsigned int v34 = *(_DWORD *)(a3 + 144);
  if (v33 == v34)
  {
    uint64_t v35 = (void *)(a3 + 152);
    uint64_t v36 = *(unsigned int *)(a4 + 160);
    if (v36 > 0x40)
    {
      uint64_t v64 = *(void *)(a4 + 152);
      uint64_t v65 = *(void *)(v64 + 8 * ((v36 - 1) >> 6)) & (1 << (v36 - 1));
      unsigned int v66 = *(_DWORD *)(a3 + 160);
      unsigned int v67 = v66 - 1;
      uint64_t v68 = *(void *)(a3 + 152);
      if (v66 >= 0x41) {
        uint64_t v35 = (void *)(v68 + 8 * (v67 >> 6));
      }
      if ((v65 != 0) == ((*v35 >> v67) & 1))
      {
        unint64_t v91 = v36 + 63;
        uint64_t v92 = v68 - 8;
        uint64_t v93 = (v91 >> 3) & 0x3FFFFFF8;
        uint64_t v94 = v64 - 8;
        while (v93)
        {
          unint64_t v95 = *(void *)(v94 + v93);
          unint64_t v96 = *(void *)(v92 + v93);
          v93 -= 8;
          if (v95 != v96)
          {
            if (v95 <= v96) {
              goto LABEL_9;
            }
            return result;
          }
        }
        return result;
      }
      if (!v65) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(a4 + 152) << -(char)v36) >> -(char)v36 >= (uint64_t)(*v35 << -(char)v36) >> -(char)v36)
    {
      return result;
    }
  }
  else if (v33 >= v34)
  {
    return result;
  }
LABEL_9:
  uint64_t result = sub_1CCE4D36C((uint64_t *)a3, (uint64_t *)a4);
  unsigned int v17 = *(_DWORD *)(a3 + 104);
  unsigned int v18 = *(_DWORD *)(a2 + 104);
  if (v17 == v18)
  {
    unsigned int v19 = (uint64_t *)(a3 + 112);
    long long v20 = (uint64_t *)(a2 + 112);
    uint64_t v21 = *(unsigned int *)(a3 + 120);
    if (v21 > 0x40)
    {
      uint64_t v22 = *v19;
      uint64_t v47 = *(void *)(*v19 + 8 * ((v21 - 1) >> 6)) & (1 << (v21 - 1));
      unsigned int v24 = *(_DWORD *)(a2 + 120);
      unsigned int v48 = v24 - 1;
      uint64_t v23 = *(void *)(a2 + 112);
      if (v24 >= 0x41) {
        long long v20 = (uint64_t *)(v23 + 8 * (v48 >> 6));
      }
      if ((v47 != 0) == (((unint64_t)*v20 >> v48) & 1))
      {
        unint64_t v54 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
        while (v54)
        {
          unint64_t v55 = *(void *)(v22 + v54 - 8);
          unint64_t v56 = *(void *)(v23 + v54 - 8);
          v54 -= 8;
          if (v55 != v56)
          {
            if (v55 <= v56) {
              goto LABEL_17;
            }
            break;
          }
        }
      }
      else if (v47)
      {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v22 = *v19;
      uint64_t v23 = *v20;
      if (*v19 << -(char)v21 >> -(char)v21 < *v20 << -(char)v21 >> -(char)v21) {
        goto LABEL_17;
      }
      unsigned int v24 = *(_DWORD *)(a2 + 120);
    }
    if (v24 > 0x40)
    {
      uint64_t v62 = *(void *)(v23 + 8 * ((v24 - 1) >> 6)) & (1 << (v24 - 1));
      unsigned int v63 = v21 - 1;
      if (v21 >= 0x41) {
        unsigned int v19 = (uint64_t *)(v22 + 8 * (v63 >> 6));
      }
      if ((v62 != 0) == (((unint64_t)*v19 >> v63) & 1))
      {
        uint64_t v86 = v22 - 8;
        unint64_t v87 = (((unint64_t)v24 + 63) >> 3) & 0x3FFFFFF8;
        uint64_t v88 = v23 - 8;
        while (v87)
        {
          unint64_t v89 = *(void *)(v88 + v87);
          unint64_t v90 = *(void *)(v86 + v87);
          v87 -= 8;
          if (v89 != v90)
          {
            if (v89 <= v90) {
              return result;
            }
            break;
          }
        }
      }
      else if (v62)
      {
        return result;
      }
    }
    else if (v23 << -(char)v24 >> -(char)v24 < v22 << -(char)v24 >> -(char)v24)
    {
      return result;
    }
  }
  else
  {
    if (v17 < v18) {
      goto LABEL_17;
    }
    if (v18 < v17) {
      return result;
    }
  }
  unsigned int v37 = *(_DWORD *)(a3 + 144);
  unsigned int v38 = *(_DWORD *)(a2 + 144);
  if (v37 == v38)
  {
    uint64_t v39 = (void *)(a2 + 152);
    uint64_t v40 = *(unsigned int *)(a3 + 160);
    if (v40 > 0x40)
    {
      uint64_t v71 = *(void *)(a3 + 152);
      uint64_t v72 = *(void *)(v71 + 8 * ((v40 - 1) >> 6)) & (1 << (v40 - 1));
      unsigned int v73 = *(_DWORD *)(a2 + 160);
      unsigned int v74 = v73 - 1;
      uint64_t v75 = *(void *)(a2 + 152);
      if (v73 >= 0x41) {
        uint64_t v39 = (void *)(v75 + 8 * (v74 >> 6));
      }
      if ((v72 != 0) == ((*v39 >> v74) & 1))
      {
        unint64_t v102 = v40 + 63;
        uint64_t v103 = v75 - 8;
        uint64_t v104 = (v102 >> 3) & 0x3FFFFFF8;
        uint64_t v105 = v71 - 8;
        while (v104)
        {
          unint64_t v106 = *(void *)(v105 + v104);
          unint64_t v107 = *(void *)(v103 + v104);
          v104 -= 8;
          if (v106 != v107)
          {
            if (v106 <= v107) {
              goto LABEL_17;
            }
            return result;
          }
        }
        return result;
      }
      if (!v72) {
        return result;
      }
    }
    else if ((uint64_t)(*(void *)(a3 + 152) << -(char)v40) >> -(char)v40 >= (uint64_t)(*v39 << -(char)v40) >> -(char)v40)
    {
      return result;
    }
  }
  else if (v37 >= v38)
  {
    return result;
  }
LABEL_17:
  uint64_t result = sub_1CCE4D36C((uint64_t *)a2, (uint64_t *)a3);
  unsigned int v25 = *(_DWORD *)(a2 + 104);
  unsigned int v26 = *(_DWORD *)(a1 + 104);
  if (v25 == v26)
  {
    unsigned int v27 = (uint64_t *)(a2 + 112);
    unsigned int v28 = (uint64_t *)(a1 + 112);
    uint64_t v29 = *(unsigned int *)(a2 + 120);
    if (v29 > 0x40)
    {
      uint64_t v30 = *v27;
      uint64_t v49 = *(void *)(*v27 + 8 * ((v29 - 1) >> 6)) & (1 << (v29 - 1));
      unsigned int v32 = *(_DWORD *)(a1 + 120);
      unsigned int v50 = v32 - 1;
      uint64_t v31 = *(void *)(a1 + 112);
      if (v32 >= 0x41) {
        unsigned int v28 = (uint64_t *)(v31 + 8 * (v50 >> 6));
      }
      if ((v49 != 0) == (((unint64_t)*v28 >> v50) & 1))
      {
        unint64_t v59 = ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8;
        while (v59)
        {
          unint64_t v60 = *(void *)(v30 + v59 - 8);
          unint64_t v61 = *(void *)(v31 + v59 - 8);
          v59 -= 8;
          if (v60 != v61)
          {
            if (v60 <= v61) {
              goto LABEL_25;
            }
            break;
          }
        }
      }
      else if (v49)
      {
        goto LABEL_25;
      }
LABEL_21:
      if (v32 > 0x40)
      {
        uint64_t v69 = *(void *)(v31 + 8 * ((v32 - 1) >> 6)) & (1 << (v32 - 1));
        unsigned int v70 = v29 - 1;
        if (v29 >= 0x41) {
          unsigned int v27 = (uint64_t *)(v30 + 8 * (v70 >> 6));
        }
        if ((v69 != 0) == (((unint64_t)*v27 >> v70) & 1))
        {
          uint64_t v97 = v30 - 8;
          unint64_t v98 = (((unint64_t)v32 + 63) >> 3) & 0x3FFFFFF8;
          uint64_t v99 = v31 - 8;
          while (v98)
          {
            unint64_t v100 = *(void *)(v99 + v98);
            unint64_t v101 = *(void *)(v97 + v98);
            v98 -= 8;
            if (v100 != v101)
            {
              if (v100 <= v101) {
                return result;
              }
              goto LABEL_39;
            }
          }
        }
        else if (v69)
        {
          return result;
        }
      }
      else if (v31 << -(char)v32 >> -(char)v32 < v30 << -(char)v32 >> -(char)v32)
      {
        return result;
      }
      goto LABEL_39;
    }
    uint64_t v30 = *v27;
    uint64_t v31 = *v28;
    if (*v27 << -(char)v29 >> -(char)v29 >= *v28 << -(char)v29 >> -(char)v29)
    {
      unsigned int v32 = *(_DWORD *)(a1 + 120);
      goto LABEL_21;
    }
LABEL_25:
    return sub_1CCE4D36C((uint64_t *)a1, (uint64_t *)a2);
  }
  if (v25 < v26) {
    goto LABEL_25;
  }
  if (v26 < v25) {
    return result;
  }
LABEL_39:
  unsigned int v41 = *(_DWORD *)(a2 + 144);
  unsigned int v42 = *(_DWORD *)(a1 + 144);
  if (v41 != v42)
  {
    if (v41 >= v42) {
      return result;
    }
    goto LABEL_25;
  }
  unsigned int v43 = (void *)(a1 + 152);
  uint64_t v44 = *(unsigned int *)(a2 + 160);
  if (v44 <= 0x40)
  {
    if ((uint64_t)(*(void *)(a2 + 152) << -(char)v44) >> -(char)v44 >= (uint64_t)(*v43 << -(char)v44) >> -(char)v44) {
      return result;
    }
    goto LABEL_25;
  }
  uint64_t v81 = *(void *)(a2 + 152);
  uint64_t v82 = *(void *)(v81 + 8 * ((v44 - 1) >> 6)) & (1 << (v44 - 1));
  unsigned int v83 = *(_DWORD *)(a1 + 160);
  unsigned int v84 = v83 - 1;
  uint64_t v85 = *(void *)(a1 + 152);
  if (v83 >= 0x41) {
    unsigned int v43 = (void *)(v85 + 8 * (v84 >> 6));
  }
  if ((v82 != 0) != ((*v43 >> v84) & 1))
  {
    if (!v82) {
      return result;
    }
    goto LABEL_25;
  }
  unint64_t v108 = v44 + 63;
  uint64_t v109 = v85 - 8;
  uint64_t v110 = (v108 >> 3) & 0x3FFFFFF8;
  uint64_t v111 = v81 - 8;
  while (v110)
  {
    unint64_t v112 = *(void *)(v111 + v110);
    unint64_t v113 = *(void *)(v109 + v110);
    v110 -= 8;
    if (v112 != v113)
    {
      if (v112 <= v113) {
        goto LABEL_25;
      }
      return result;
    }
  }
  return result;
}

uint64_t sub_1CCE4DDB4(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unsigned int v9 = (uint64_t *)result;
  while (2)
  {
    unsigned int v214 = a2 - 3;
    unsigned int v10 = v9;
    while (1)
    {
      while (1)
      {
        unsigned int v9 = v10;
        uint64_t v11 = (char *)a2 - (char *)v10;
        uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
        if (!(!v5 & v4))
        {
          switch(v12)
          {
            case 0:
            case 1:
              return result;
            case 2:
              uint64_t v112 = *(a2 - 3);
              uint64_t v113 = *(a2 - 2);
              unsigned int v114 = -1;
              if (v112 != v113)
              {
                uint64_t v115 = *(a2 - 3);
                do
                {
                  if (*(_DWORD *)(v115 + 84) < v114) {
                    unsigned int v114 = *(_DWORD *)(v115 + 84);
                  }
                  v115 += 184;
                }
                while (v115 != v113);
              }
              uint64_t v116 = *v9;
              uint64_t v117 = v9[1];
              unsigned int v118 = -1;
              if (*v9 != v117)
              {
                uint64_t v119 = *v9;
                do
                {
                  if (*(_DWORD *)(v119 + 84) < v118) {
                    unsigned int v118 = *(_DWORD *)(v119 + 84);
                  }
                  v119 += 184;
                }
                while (v119 != v117);
              }
              if (v114 < v118)
              {
                *unsigned int v9 = v112;
                *(a2 - 3) = v116;
                uint64_t v120 = v9[1];
                v9[1] = *(a2 - 2);
                *(a2 - 2) = v120;
                uint64_t v121 = v9[2];
                v9[2] = *(a2 - 1);
                *(a2 - 1) = v121;
              }
              break;
            case 3:
              uint64_t result = (uint64_t)sub_1CCE4F29C(v9, v9 + 3, v214);
              break;
            case 4:
              uint64_t result = (uint64_t)sub_1CCE4F818(v9, v9 + 3, v9 + 6, v214);
              break;
            case 5:
              uint64_t result = (uint64_t)sub_1CCE4F038(v9, v9 + 3, v9 + 6, v9 + 9, v214);
              break;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v11 <= 575)
        {
          if (a4)
          {
            if (v9 != a2)
            {
              uint64_t v122 = v9 + 3;
              if (v9 + 3 != a2)
              {
                int64x2_t v123 = v9;
                do
                {
                  uint64_t v124 = v122;
                  uint64_t v125 = v123[4];
                  unsigned int v126 = -1;
                  if (v123[3] != v125)
                  {
                    uint64_t v127 = v123[3];
                    do
                    {
                      if (*(_DWORD *)(v127 + 84) < v126) {
                        unsigned int v126 = *(_DWORD *)(v127 + 84);
                      }
                      v127 += 184;
                    }
                    while (v127 != v125);
                  }
                  uint64_t v128 = *v123;
                  unsigned int v129 = -1;
                  while (v128 != v123[1])
                  {
                    if (*(_DWORD *)(v128 + 84) < v129) {
                      unsigned int v129 = *(_DWORD *)(v128 + 84);
                    }
                    v128 += 184;
                  }
                  if (v126 < v129)
                  {
                    *(void *)&long long v217 = v123[3];
                    *((void *)&v217 + 1) = v125;
                    uint64_t v218 = v123[5];
                    v123[4] = 0;
                    v123[5] = 0;
                    uint64_t *v122 = 0;
                    uint64_t v130 = *v123;
                    while (1)
                    {
                      long long v131 = v122;
                      uint64_t v122 = v123;
                      uint64_t v132 = v123[1];
                      uint64_t *v131 = v130;
                      v131[1] = v132;
                      v131[2] = v122[2];
                      uint64_t *v122 = 0;
                      v122[1] = 0;
                      v122[2] = 0;
                      uint64_t v133 = *((void *)&v217 + 1);
                      if (v122 == v9) {
                        break;
                      }
                      unsigned int v134 = -1;
                      if ((void)v217 != *((void *)&v217 + 1))
                      {
                        uint64_t v135 = v217;
                        do
                        {
                          if (*(_DWORD *)(v135 + 84) < v134) {
                            unsigned int v134 = *(_DWORD *)(v135 + 84);
                          }
                          v135 += 184;
                        }
                        while (v135 != *((void *)&v217 + 1));
                      }
                      uint64_t v130 = *(v122 - 3);
                      uint64_t v136 = *(v122 - 2);
                      unsigned int v137 = -1;
                      if (v130 != v136)
                      {
                        uint64_t v138 = *(v122 - 3);
                        do
                        {
                          if (*(_DWORD *)(v138 + 84) < v137) {
                            unsigned int v137 = *(_DWORD *)(v138 + 84);
                          }
                          v138 += 184;
                        }
                        while (v138 != v136);
                      }
                      int64x2_t v123 = v122 - 3;
                      if (v134 >= v137) {
                        goto LABEL_275;
                      }
                    }
                    uint64_t v122 = v9;
LABEL_275:
                    uint64_t *v122 = v217;
                    v122[1] = v133;
                    v122[2] = v218;
                    long long v217 = 0uLL;
                    uint64_t v218 = 0;
                    uint64_t result = (uint64_t)sub_1CCE457AC((void **)&v217);
                  }
                  uint64_t v122 = v124 + 3;
                  int64x2_t v123 = v124;
                }
                while (v124 + 3 != a2);
              }
            }
          }
          else if (v9 != a2)
          {
            unint64_t v198 = v9 + 3;
            while (v198 != a2)
            {
              unint64_t v199 = v198;
              uint64_t v200 = v9[4];
              unsigned int v201 = -1;
              if (v9[3] != v200)
              {
                uint64_t v202 = v9[3];
                do
                {
                  if (*(_DWORD *)(v202 + 84) < v201) {
                    unsigned int v201 = *(_DWORD *)(v202 + 84);
                  }
                  v202 += 184;
                }
                while (v202 != v200);
              }
              uint64_t v203 = *v9;
              unsigned int v204 = -1;
              while (v203 != v9[1])
              {
                if (*(_DWORD *)(v203 + 84) < v204) {
                  unsigned int v204 = *(_DWORD *)(v203 + 84);
                }
                v203 += 184;
              }
              if (v201 < v204)
              {
                *(void *)&long long v217 = v9[3];
                *((void *)&v217 + 1) = v200;
                uint64_t v218 = v9[5];
                v9[4] = 0;
                v9[5] = 0;
                *unint64_t v198 = 0;
                uint64_t v205 = *v9;
                do
                {
                  uint64_t v206 = v198;
                  unint64_t v198 = v9;
                  uint64_t v207 = v9[1];
                  *uint64_t v206 = v205;
                  v206[1] = v207;
                  v206[2] = v9[2];
                  *unsigned int v9 = 0;
                  v9[1] = 0;
                  v9[2] = 0;
                  uint64_t v208 = *((void *)&v217 + 1);
                  unsigned int v209 = -1;
                  if ((void)v217 != *((void *)&v217 + 1))
                  {
                    uint64_t v210 = v217;
                    do
                    {
                      if (*(_DWORD *)(v210 + 84) < v209) {
                        unsigned int v209 = *(_DWORD *)(v210 + 84);
                      }
                      v210 += 184;
                    }
                    while (v210 != *((void *)&v217 + 1));
                  }
                  uint64_t v205 = *(v9 - 3);
                  uint64_t v211 = *(v9 - 2);
                  unsigned int v212 = -1;
                  if (v205 != v211)
                  {
                    uint64_t v213 = *(v9 - 3);
                    do
                    {
                      if (*(_DWORD *)(v213 + 84) < v212) {
                        unsigned int v212 = *(_DWORD *)(v213 + 84);
                      }
                      v213 += 184;
                    }
                    while (v213 != v211);
                  }
                  v9 -= 3;
                }
                while (v209 < v212);
                *unint64_t v198 = v217;
                v198[1] = v208;
                v198[2] = v218;
                long long v217 = 0uLL;
                uint64_t v218 = 0;
                uint64_t result = (uint64_t)sub_1CCE457AC((void **)&v217);
              }
              unint64_t v198 = v199 + 3;
              unsigned int v9 = v199;
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            int64_t v139 = (unint64_t)(v12 - 2) >> 1;
            int64_t v140 = v139;
            do
            {
              int64_t v141 = v140;
              if (v139 >= v140)
              {
                uint64_t v142 = (2 * v140) | 1;
                uint64_t v143 = &v9[3 * v142];
                if (2 * v141 + 2 < v12)
                {
                  uint64_t v144 = *v143;
                  unsigned int v145 = -1;
                  while (v144 != v9[3 * v142 + 1])
                  {
                    if (*(_DWORD *)(v144 + 84) < v145) {
                      unsigned int v145 = *(_DWORD *)(v144 + 84);
                    }
                    v144 += 184;
                  }
                  uint64_t v146 = v143[3];
                  unsigned int v147 = -1;
                  while (v146 != v143[4])
                  {
                    if (*(_DWORD *)(v146 + 84) < v147) {
                      unsigned int v147 = *(_DWORD *)(v146 + 84);
                    }
                    v146 += 184;
                  }
                  if (v145 < v147)
                  {
                    v143 += 3;
                    uint64_t v142 = 2 * v141 + 2;
                  }
                }
                uint64_t v148 = *v143;
                unsigned int v149 = -1;
                while (v148 != v143[1])
                {
                  if (*(_DWORD *)(v148 + 84) < v149) {
                    unsigned int v149 = *(_DWORD *)(v148 + 84);
                  }
                  v148 += 184;
                }
                uint64_t v150 = &v9[3 * v141];
                uint64_t v151 = v150[1];
                unsigned int v152 = -1;
                if (*v150 != v151)
                {
                  uint64_t v153 = *v150;
                  do
                  {
                    if (*(_DWORD *)(v153 + 84) < v152) {
                      unsigned int v152 = *(_DWORD *)(v153 + 84);
                    }
                    v153 += 184;
                  }
                  while (v153 != v151);
                }
                if (v149 >= v152)
                {
                  *(void *)&long long v217 = *v150;
                  *((void *)&v217 + 1) = v151;
                  uint64_t v218 = v9[3 * v141 + 2];
                  *uint64_t v150 = 0;
                  v150[1] = 0;
                  v150[2] = 0;
                  uint64_t v155 = *v143;
                  uint64_t v154 = v143[1];
                  while (1)
                  {
                    unint64_t v156 = v143;
                    *uint64_t v150 = v155;
                    v150[1] = v154;
                    v150[2] = v143[2];
                    *uint64_t v143 = 0;
                    v143[1] = 0;
                    v143[2] = 0;
                    if (v139 < v142) {
                      break;
                    }
                    uint64_t v157 = (2 * v142) | 1;
                    uint64_t v143 = &v9[3 * v157];
                    uint64_t v142 = 2 * v142 + 2;
                    if (v142 < v12)
                    {
                      uint64_t v158 = *v143;
                      unsigned int v159 = -1;
                      while (v158 != v9[3 * v157 + 1])
                      {
                        if (*(_DWORD *)(v158 + 84) < v159) {
                          unsigned int v159 = *(_DWORD *)(v158 + 84);
                        }
                        v158 += 184;
                      }
                      uint64_t v160 = v143[3];
                      unsigned int v161 = -1;
                      while (v160 != v143[4])
                      {
                        if (*(_DWORD *)(v160 + 84) < v161) {
                          unsigned int v161 = *(_DWORD *)(v160 + 84);
                        }
                        v160 += 184;
                      }
                      if (v159 >= v161) {
                        uint64_t v142 = v157;
                      }
                      else {
                        v143 += 3;
                      }
                    }
                    else
                    {
                      uint64_t v142 = v157;
                    }
                    uint64_t v155 = *v143;
                    uint64_t v154 = v143[1];
                    unsigned int v162 = -1;
                    if (*v143 != v154)
                    {
                      uint64_t v163 = *v143;
                      do
                      {
                        if (*(_DWORD *)(v163 + 84) < v162) {
                          unsigned int v162 = *(_DWORD *)(v163 + 84);
                        }
                        v163 += 184;
                      }
                      while (v163 != v154);
                    }
                    uint64_t v166 = *((void *)&v217 + 1);
                    uint64_t v167 = v217;
                    unsigned int v164 = -1;
                    if ((void)v217 != *((void *)&v217 + 1))
                    {
                      uint64_t v165 = v217;
                      do
                      {
                        if (*(_DWORD *)(v165 + 84) < v164) {
                          unsigned int v164 = *(_DWORD *)(v165 + 84);
                        }
                        v165 += 184;
                      }
                      while (v165 != *((void *)&v217 + 1));
                    }
                    uint64_t v150 = v156;
                    if (v162 < v164) {
                      goto LABEL_334;
                    }
                  }
                  uint64_t v166 = *((void *)&v217 + 1);
                  uint64_t v167 = v217;
LABEL_334:
                  *unint64_t v156 = v167;
                  v156[1] = v166;
                  v156[2] = v218;
                  long long v217 = 0uLL;
                  uint64_t v218 = 0;
                  sub_1CCE457AC((void **)&v217);
                }
              }
              int64_t v140 = v141 - 1;
            }
            while (v141);
            do
            {
              uint64_t v168 = 0;
              unint64_t v169 = a2;
              long long v215 = 0uLL;
              uint64_t v216 = 0;
              long long v215 = *(_OWORD *)v9;
              uint64_t v216 = v9[2];
              *unsigned int v9 = 0;
              v9[1] = 0;
              v9[2] = 0;
              uint64_t v170 = v9;
              do
              {
                uint64_t v171 = v168 + 1;
                uint64_t v172 = (char *)&v170[3 * v168 + 3];
                uint64_t v173 = (2 * v168) | 1;
                uint64_t v174 = 2 * v168 + 2;
                if (v174 < v12)
                {
                  uint64_t v175 = *(void *)v172;
                  uint64_t v176 = v170[3 * v171 + 1];
                  unsigned int v177 = -1;
                  while (v175 != v176)
                  {
                    if (*(_DWORD *)(v175 + 84) < v177) {
                      unsigned int v177 = *(_DWORD *)(v175 + 84);
                    }
                    v175 += 184;
                  }
                  uint64_t v178 = *((void *)v172 + 3);
                  unsigned int v179 = -1;
                  while (v178 != *((void *)v172 + 4))
                  {
                    if (*(_DWORD *)(v178 + 84) < v179) {
                      unsigned int v179 = *(_DWORD *)(v178 + 84);
                    }
                    v178 += 184;
                  }
                  if (v177 < v179)
                  {
                    v172 += 24;
                    uint64_t v173 = v174;
                  }
                }
                *(_OWORD *)uint64_t v170 = *(_OWORD *)v172;
                v170[2] = *((void *)v172 + 2);
                *(void *)uint64_t v172 = 0;
                *((void *)v172 + 1) = 0;
                *((void *)v172 + 2) = 0;
                uint64_t v170 = (uint64_t *)v172;
                uint64_t v168 = v173;
              }
              while (v173 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              a2 -= 3;
              if (v172 == (char *)(v169 - 3))
              {
                *(_OWORD *)uint64_t v172 = v215;
                *((void *)v172 + 2) = v216;
                long long v215 = 0uLL;
                uint64_t v216 = 0;
              }
              else
              {
                *(_OWORD *)uint64_t v172 = *(_OWORD *)(v169 - 3);
                *((void *)v172 + 2) = *(v169 - 1);
                *a2 = 0;
                *(v169 - 2) = 0;
                *(v169 - 1) = 0;
                *(_OWORD *)(v169 - 3) = v215;
                *(v169 - 1) = v216;
                long long v215 = 0uLL;
                uint64_t v216 = 0;
                uint64_t v180 = v172 - (char *)v9 + 24;
                if (v180 >= 25)
                {
                  unint64_t v181 = (v180 / 0x18uLL - 2) >> 1;
                  uint64_t v182 = &v9[3 * v181];
                  uint64_t v183 = *v182;
                  unsigned int v184 = -1;
                  while (v183 != v182[1])
                  {
                    if (*(_DWORD *)(v183 + 84) < v184) {
                      unsigned int v184 = *(_DWORD *)(v183 + 84);
                    }
                    v183 += 184;
                  }
                  uint64_t v185 = *(void *)v172;
                  unsigned int v186 = -1;
                  while (v185 != *((void *)v172 + 1))
                  {
                    if (*(_DWORD *)(v185 + 84) < v186) {
                      unsigned int v186 = *(_DWORD *)(v185 + 84);
                    }
                    v185 += 184;
                  }
                  if (v184 < v186)
                  {
                    long long v217 = 0uLL;
                    uint64_t v218 = 0;
                    long long v217 = *(_OWORD *)v172;
                    uint64_t v218 = *((void *)v172 + 2);
                    *(void *)uint64_t v172 = 0;
                    *((void *)v172 + 1) = 0;
                    *((void *)v172 + 2) = 0;
                    uint64_t v187 = *v182;
                    while (1)
                    {
                      unsigned int v188 = v182;
                      uint64_t v189 = v182[1];
                      *(void *)uint64_t v172 = v187;
                      *((void *)v172 + 1) = v189;
                      *((void *)v172 + 2) = v188[2];
                      uint64_t *v188 = 0;
                      v188[1] = 0;
                      v188[2] = 0;
                      if (!v181) {
                        break;
                      }
                      unint64_t v181 = (v181 - 1) >> 1;
                      uint64_t v182 = &v9[3 * v181];
                      uint64_t v187 = *v182;
                      uint64_t v190 = v182[1];
                      unsigned int v191 = -1;
                      if (*v182 != v190)
                      {
                        uint64_t v192 = *v182;
                        do
                        {
                          if (*(_DWORD *)(v192 + 84) < v191) {
                            unsigned int v191 = *(_DWORD *)(v192 + 84);
                          }
                          v192 += 184;
                        }
                        while (v192 != v190);
                      }
                      uint64_t v193 = *((void *)&v217 + 1);
                      uint64_t v194 = v217;
                      unsigned int v195 = -1;
                      if ((void)v217 != *((void *)&v217 + 1))
                      {
                        uint64_t v196 = v217;
                        do
                        {
                          if (*(_DWORD *)(v196 + 84) < v195) {
                            unsigned int v195 = *(_DWORD *)(v196 + 84);
                          }
                          v196 += 184;
                        }
                        while (v196 != *((void *)&v217 + 1));
                      }
                      uint64_t v172 = (char *)v188;
                      if (v191 >= v195) {
                        goto LABEL_380;
                      }
                    }
                    uint64_t v193 = *((void *)&v217 + 1);
                    uint64_t v194 = v217;
LABEL_380:
                    uint64_t *v188 = v194;
                    v188[1] = v193;
                    v188[2] = v218;
                    long long v217 = 0uLL;
                    uint64_t v218 = 0;
                    sub_1CCE457AC((void **)&v217);
                  }
                }
              }
              uint64_t result = (uint64_t)sub_1CCE457AC((void **)&v215);
            }
            while (v12-- > 2);
          }
          return result;
        }
        unint64_t v13 = (unint64_t)v12 >> 1;
        uint64_t v14 = &v9[3 * ((unint64_t)v12 >> 1)];
        if ((unint64_t)v11 < 0xC01)
        {
          sub_1CCE4F29C(v14, v9, v214);
        }
        else
        {
          sub_1CCE4F29C(v9, v14, v214);
          uint64_t v15 = 3 * v13;
          unsigned int v16 = &v9[v15];
          sub_1CCE4F29C(v9 + 3, v16 - 3, a2 - 6);
          sub_1CCE4F29C(v9 + 6, &v9[v15 + 3], a2 - 9);
          sub_1CCE4F29C(v16 - 3, v14, &v9[v15 + 3]);
          long long v17 = *(_OWORD *)v9;
          *(_OWORD *)unsigned int v9 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = v17;
          uint64_t v18 = v9[2];
          v9[2] = v16[2];
          v16[2] = v18;
        }
        --a3;
        if (a4) {
          break;
        }
        uint64_t v19 = *(v9 - 3);
        unsigned int v20 = -1;
        while (v19 != *(v9 - 2))
        {
          if (*(_DWORD *)(v19 + 84) < v20) {
            unsigned int v20 = *(_DWORD *)(v19 + 84);
          }
          v19 += 184;
        }
        uint64_t v21 = *v9;
        unsigned int v22 = -1;
        while (v21 != v9[1])
        {
          if (*(_DWORD *)(v21 + 84) < v22) {
            unsigned int v22 = *(_DWORD *)(v21 + 84);
          }
          v21 += 184;
        }
        if (v20 < v22) {
          break;
        }
        long long v217 = 0uLL;
        uint64_t v218 = 0;
        long long v217 = *(_OWORD *)v9;
        uint64_t v218 = v9[2];
        *unsigned int v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        uint64_t v69 = *((void *)&v217 + 1);
        uint64_t v68 = v217;
        unsigned int v70 = -1;
        if ((void)v217 != *((void *)&v217 + 1))
        {
          uint64_t v71 = v217;
          do
          {
            if (*(_DWORD *)(v71 + 84) < v70) {
              unsigned int v70 = *(_DWORD *)(v71 + 84);
            }
            v71 += 184;
          }
          while (v71 != *((void *)&v217 + 1));
        }
        uint64_t v72 = *(a2 - 3);
        unsigned int v73 = -1;
        while (v72 != *(a2 - 2))
        {
          if (*(_DWORD *)(v72 + 84) < v73) {
            unsigned int v73 = *(_DWORD *)(v72 + 84);
          }
          v72 += 184;
        }
        unsigned int v74 = v9;
        if (v70 >= v73)
        {
          do
          {
            unsigned int v10 = v74 + 3;
            if (v74 + 3 >= a2) {
              break;
            }
            unsigned int v79 = -1;
            if ((void)v217 != *((void *)&v217 + 1))
            {
              uint64_t v80 = v217;
              do
              {
                if (*(_DWORD *)(v80 + 84) < v79) {
                  unsigned int v79 = *(_DWORD *)(v80 + 84);
                }
                v80 += 184;
              }
              while (v80 != *((void *)&v217 + 1));
            }
            uint64_t v82 = v74[3];
            uint64_t v81 = v74[4];
            unsigned int v83 = -1;
            while (v82 != v81)
            {
              if (*(_DWORD *)(v82 + 84) < v83) {
                unsigned int v83 = *(_DWORD *)(v82 + 84);
              }
              v82 += 184;
            }
            unsigned int v74 = v10;
          }
          while (v79 >= v83);
        }
        else
        {
          unsigned int v10 = v9;
          do
          {
            unsigned int v75 = -1;
            if ((void)v217 != *((void *)&v217 + 1))
            {
              uint64_t v76 = v217;
              do
              {
                if (*(_DWORD *)(v76 + 84) < v75) {
                  unsigned int v75 = *(_DWORD *)(v76 + 84);
                }
                v76 += 184;
              }
              while (v76 != *((void *)&v217 + 1));
            }
            uint64_t v77 = v10[3];
            unsigned int v78 = -1;
            while (v77 != v10[4])
            {
              if (*(_DWORD *)(v77 + 84) < v78) {
                unsigned int v78 = *(_DWORD *)(v77 + 84);
              }
              v77 += 184;
            }
            v10 += 3;
          }
          while (v75 >= v78);
        }
        unsigned int v84 = a2;
        if (v10 < a2)
        {
          unsigned int v84 = a2;
          do
          {
            unsigned int v85 = -1;
            if ((void)v217 != *((void *)&v217 + 1))
            {
              uint64_t v86 = v217;
              do
              {
                if (*(_DWORD *)(v86 + 84) < v85) {
                  unsigned int v85 = *(_DWORD *)(v86 + 84);
                }
                v86 += 184;
              }
              while (v86 != *((void *)&v217 + 1));
            }
            uint64_t v87 = *(v84 - 3);
            unsigned int v88 = -1;
            while (v87 != *(v84 - 2))
            {
              if (*(_DWORD *)(v87 + 84) < v88) {
                unsigned int v88 = *(_DWORD *)(v87 + 84);
              }
              v87 += 184;
            }
            v84 -= 3;
          }
          while (v85 < v88);
        }
        if (v10 >= v84)
        {
          uint64_t v103 = 0;
        }
        else
        {
          uint64_t v89 = *v10;
          uint64_t v90 = *v84;
          do
          {
            *unsigned int v10 = v90;
            *unsigned int v84 = v89;
            uint64_t v91 = v10[1];
            v10[1] = v84[1];
            v84[1] = v91;
            uint64_t v92 = v10[2];
            v10[2] = v84[2];
            v84[2] = v92;
            uint64_t v69 = *((void *)&v217 + 1);
            uint64_t v68 = v217;
            do
            {
              unsigned int v93 = -1;
              if ((void)v217 != *((void *)&v217 + 1))
              {
                uint64_t v94 = v217;
                do
                {
                  if (*(_DWORD *)(v94 + 84) < v93) {
                    unsigned int v93 = *(_DWORD *)(v94 + 84);
                  }
                  v94 += 184;
                }
                while (v94 != *((void *)&v217 + 1));
              }
              uint64_t v89 = v10[3];
              uint64_t v95 = v10[4];
              unsigned int v96 = -1;
              if (v89 != v95)
              {
                uint64_t v97 = v10[3];
                do
                {
                  if (*(_DWORD *)(v97 + 84) < v96) {
                    unsigned int v96 = *(_DWORD *)(v97 + 84);
                  }
                  v97 += 184;
                }
                while (v97 != v95);
              }
              v10 += 3;
            }
            while (v93 >= v96);
            do
            {
              unsigned int v98 = -1;
              if ((void)v217 != *((void *)&v217 + 1))
              {
                uint64_t v99 = v217;
                do
                {
                  if (*(_DWORD *)(v99 + 84) < v98) {
                    unsigned int v98 = *(_DWORD *)(v99 + 84);
                  }
                  v99 += 184;
                }
                while (v99 != *((void *)&v217 + 1));
              }
              uint64_t v90 = *(v84 - 3);
              uint64_t v100 = *(v84 - 2);
              unsigned int v101 = -1;
              if (v90 != v100)
              {
                uint64_t v102 = *(v84 - 3);
                do
                {
                  if (*(_DWORD *)(v102 + 84) < v101) {
                    unsigned int v101 = *(_DWORD *)(v102 + 84);
                  }
                  v102 += 184;
                }
                while (v102 != v100);
              }
              v84 -= 3;
            }
            while (v98 < v101);
          }
          while (v10 < v84);
          uint64_t v103 = *v9;
        }
        if (v10 - 3 == v9)
        {
          if (!v103) {
            goto LABEL_227;
          }
          uint64_t v108 = *(v10 - 2);
          uint64_t v109 = (void *)v103;
          if (v108 != v103)
          {
            do
            {
              if (*(_DWORD *)(v108 - 24) >= 0x41u)
              {
                uint64_t v110 = *(void *)(v108 - 32);
                if (v110) {
                  MEMORY[0x1D25D9CB0](v110, 0x1000C8000313F17);
                }
              }
              if (*(_DWORD *)(v108 - 64) >= 0x41u)
              {
                uint64_t v111 = *(void *)(v108 - 72);
                if (v111) {
                  MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
                }
              }
              if ((*(unsigned char *)(v108 - 176) & 1) == 0) {
                MEMORY[0x1D25D9CD0](*(void *)(v108 - 168), 8);
              }
              v108 -= 184;
            }
            while (v108 != v103);
            uint64_t v109 = (void *)*v9;
          }
          *(v10 - 2) = v103;
          operator delete(v109);
        }
        else
        {
          if (v103)
          {
            uint64_t v104 = v9[1];
            uint64_t v105 = (void *)v103;
            if (v104 != v103)
            {
              do
              {
                if (*(_DWORD *)(v104 - 24) >= 0x41u)
                {
                  uint64_t v106 = *(void *)(v104 - 32);
                  if (v106) {
                    MEMORY[0x1D25D9CB0](v106, 0x1000C8000313F17);
                  }
                }
                if (*(_DWORD *)(v104 - 64) >= 0x41u)
                {
                  uint64_t v107 = *(void *)(v104 - 72);
                  if (v107) {
                    MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
                  }
                }
                if ((*(unsigned char *)(v104 - 176) & 1) == 0) {
                  MEMORY[0x1D25D9CD0](*(void *)(v104 - 168), 8);
                }
                v104 -= 184;
              }
              while (v104 != v103);
              uint64_t v105 = (void *)*v9;
            }
            v9[1] = v103;
            operator delete(v105);
            *unsigned int v9 = 0;
            v9[1] = 0;
            v9[2] = 0;
          }
          *(_OWORD *)unsigned int v9 = *(_OWORD *)(v10 - 3);
          v9[2] = *(v10 - 1);
        }
        *(v10 - 3) = 0;
        *(v10 - 2) = 0;
        *(v10 - 1) = 0;
        uint64_t v69 = *((void *)&v217 + 1);
        uint64_t v68 = v217;
LABEL_227:
        *(v10 - 3) = v68;
        *(v10 - 2) = v69;
        *(v10 - 1) = v218;
        long long v217 = 0uLL;
        uint64_t v218 = 0;
        uint64_t result = (uint64_t)sub_1CCE457AC((void **)&v217);
        a4 = 0;
      }
      long long v217 = 0uLL;
      uint64_t v218 = 0;
      long long v217 = *(_OWORD *)v9;
      uint64_t v218 = v9[2];
      *unsigned int v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      uint64_t v24 = *((void *)&v217 + 1);
      uint64_t v23 = v217;
      unsigned int v25 = v9;
      do
      {
        unsigned int v26 = v25;
        uint64_t v27 = v25[3];
        uint64_t v28 = v25[4];
        v25 += 3;
        unsigned int v29 = -1;
        if (v27 != v28)
        {
          uint64_t v30 = v27;
          do
          {
            if (*(_DWORD *)(v30 + 84) < v29) {
              unsigned int v29 = *(_DWORD *)(v30 + 84);
            }
            v30 += 184;
          }
          while (v30 != v28);
        }
        unsigned int v31 = -1;
        if ((void)v217 != *((void *)&v217 + 1))
        {
          uint64_t v32 = v217;
          do
          {
            if (*(_DWORD *)(v32 + 84) < v31) {
              unsigned int v31 = *(_DWORD *)(v32 + 84);
            }
            v32 += 184;
          }
          while (v32 != *((void *)&v217 + 1));
        }
      }
      while (v29 < v31);
      unsigned int v33 = a2;
      if (v26 == v9)
      {
        unsigned int v33 = a2;
        do
        {
          if (v25 >= v33) {
            break;
          }
          uint64_t v39 = *(v33 - 3);
          uint64_t v40 = *(v33 - 2);
          v33 -= 3;
          unsigned int v41 = -1;
          while (v39 != v40)
          {
            if (*(_DWORD *)(v39 + 84) < v41) {
              unsigned int v41 = *(_DWORD *)(v39 + 84);
            }
            v39 += 184;
          }
          unsigned int v42 = -1;
          if ((void)v217 != *((void *)&v217 + 1))
          {
            uint64_t v43 = v217;
            do
            {
              if (*(_DWORD *)(v43 + 84) < v42) {
                unsigned int v42 = *(_DWORD *)(v43 + 84);
              }
              v43 += 184;
            }
            while (v43 != *((void *)&v217 + 1));
          }
        }
        while (v41 >= v42);
      }
      else
      {
        do
        {
          uint64_t v34 = *(v33 - 3);
          uint64_t v35 = *(v33 - 2);
          v33 -= 3;
          unsigned int v36 = -1;
          while (v34 != v35)
          {
            if (*(_DWORD *)(v34 + 84) < v36) {
              unsigned int v36 = *(_DWORD *)(v34 + 84);
            }
            v34 += 184;
          }
          unsigned int v37 = -1;
          if ((void)v217 != *((void *)&v217 + 1))
          {
            uint64_t v38 = v217;
            do
            {
              if (*(_DWORD *)(v38 + 84) < v37) {
                unsigned int v37 = *(_DWORD *)(v38 + 84);
              }
              v38 += 184;
            }
            while (v38 != *((void *)&v217 + 1));
          }
        }
        while (v36 >= v37);
      }
      if (v25 >= v33)
      {
        uint64_t v58 = 0;
        unsigned int v10 = v25;
      }
      else
      {
        uint64_t v44 = *v33;
        unsigned int v10 = v25;
        uint64_t v45 = v33;
        do
        {
          *unsigned int v10 = v44;
          *uint64_t v45 = v27;
          uint64_t v46 = v10[1];
          v10[1] = v45[1];
          v45[1] = v46;
          uint64_t v47 = v10[2];
          v10[2] = v45[2];
          v45[2] = v47;
          uint64_t v24 = *((void *)&v217 + 1);
          uint64_t v23 = v217;
          do
          {
            uint64_t v27 = v10[3];
            uint64_t v48 = v10[4];
            v10 += 3;
            unsigned int v49 = -1;
            if (v27 != v48)
            {
              uint64_t v50 = v27;
              do
              {
                if (*(_DWORD *)(v50 + 84) < v49) {
                  unsigned int v49 = *(_DWORD *)(v50 + 84);
                }
                v50 += 184;
              }
              while (v50 != v48);
            }
            unsigned int v51 = -1;
            if ((void)v217 != *((void *)&v217 + 1))
            {
              uint64_t v52 = v217;
              do
              {
                if (*(_DWORD *)(v52 + 84) < v51) {
                  unsigned int v51 = *(_DWORD *)(v52 + 84);
                }
                v52 += 184;
              }
              while (v52 != *((void *)&v217 + 1));
            }
          }
          while (v49 < v51);
          do
          {
            uint64_t v44 = *(v45 - 3);
            uint64_t v53 = *(v45 - 2);
            v45 -= 3;
            unsigned int v54 = -1;
            if (v44 != v53)
            {
              uint64_t v55 = v44;
              do
              {
                if (*(_DWORD *)(v55 + 84) < v54) {
                  unsigned int v54 = *(_DWORD *)(v55 + 84);
                }
                v55 += 184;
              }
              while (v55 != v53);
            }
            unsigned int v56 = -1;
            if ((void)v217 != *((void *)&v217 + 1))
            {
              uint64_t v57 = v217;
              do
              {
                if (*(_DWORD *)(v57 + 84) < v56) {
                  unsigned int v56 = *(_DWORD *)(v57 + 84);
                }
                v57 += 184;
              }
              while (v57 != *((void *)&v217 + 1));
            }
          }
          while (v54 >= v56);
        }
        while (v10 < v45);
        uint64_t v58 = *v9;
      }
      if (v10 - 3 == v9)
      {
        if (!v58) {
          goto LABEL_117;
        }
        uint64_t v63 = *(v10 - 2);
        uint64_t v64 = (void *)v58;
        if (v63 != v58)
        {
          do
          {
            if (*(_DWORD *)(v63 - 24) >= 0x41u)
            {
              uint64_t v65 = *(void *)(v63 - 32);
              if (v65) {
                MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
              }
            }
            if (*(_DWORD *)(v63 - 64) >= 0x41u)
            {
              uint64_t v66 = *(void *)(v63 - 72);
              if (v66) {
                MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
              }
            }
            if ((*(unsigned char *)(v63 - 176) & 1) == 0) {
              MEMORY[0x1D25D9CD0](*(void *)(v63 - 168), 8);
            }
            v63 -= 184;
          }
          while (v63 != v58);
          uint64_t v64 = (void *)*v9;
        }
        *(v10 - 2) = v58;
        operator delete(v64);
      }
      else
      {
        if (v58)
        {
          uint64_t v59 = v9[1];
          unint64_t v60 = (void *)v58;
          if (v59 != v58)
          {
            do
            {
              if (*(_DWORD *)(v59 - 24) >= 0x41u)
              {
                uint64_t v61 = *(void *)(v59 - 32);
                if (v61) {
                  MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
                }
              }
              if (*(_DWORD *)(v59 - 64) >= 0x41u)
              {
                uint64_t v62 = *(void *)(v59 - 72);
                if (v62) {
                  MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
                }
              }
              if ((*(unsigned char *)(v59 - 176) & 1) == 0) {
                MEMORY[0x1D25D9CD0](*(void *)(v59 - 168), 8);
              }
              v59 -= 184;
            }
            while (v59 != v58);
            unint64_t v60 = (void *)*v9;
          }
          v9[1] = v58;
          operator delete(v60);
          *unsigned int v9 = 0;
          v9[1] = 0;
          v9[2] = 0;
        }
        *(_OWORD *)unsigned int v9 = *(_OWORD *)(v10 - 3);
        v9[2] = *(v10 - 1);
      }
      *(v10 - 3) = 0;
      *(v10 - 2) = 0;
      *(v10 - 1) = 0;
      uint64_t v24 = *((void *)&v217 + 1);
      uint64_t v23 = v217;
LABEL_117:
      *(v10 - 3) = v23;
      *(v10 - 2) = v24;
      *(v10 - 1) = v218;
      long long v217 = 0uLL;
      uint64_t v218 = 0;
      sub_1CCE457AC((void **)&v217);
      if (v25 < v33) {
        goto LABEL_120;
      }
      BOOL v67 = sub_1CCE4F534(v9, v10 - 3);
      uint64_t result = sub_1CCE4F534(v10, a2);
      if (result) {
        break;
      }
      if (!v67)
      {
LABEL_120:
        uint64_t result = sub_1CCE4DDB4(v9, v10 - 3, a3, a4 & 1);
        a4 = 0;
      }
    }
    a2 = v10 - 3;
    if (!v67) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CCE4F038(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_1CCE4F818(a1, a2, a3, a4);
  uint64_t v11 = a5[1];
  unsigned int v12 = -1;
  if (*a5 != v11)
  {
    uint64_t v13 = *a5;
    do
    {
      if (*(_DWORD *)(v13 + 84) < v12) {
        unsigned int v12 = *(_DWORD *)(v13 + 84);
      }
      v13 += 184;
    }
    while (v13 != v11);
  }
  uint64_t v14 = *a4;
  uint64_t v15 = a4[1];
  unsigned int v16 = -1;
  if (*a4 != v15)
  {
    uint64_t v17 = *a4;
    do
    {
      if (*(_DWORD *)(v17 + 84) < v16) {
        unsigned int v16 = *(_DWORD *)(v17 + 84);
      }
      v17 += 184;
    }
    while (v17 != v15);
  }
  if (v12 < v16)
  {
    *a4 = *a5;
    *a5 = v14;
    uint64_t v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    uint64_t v19 = a4[2];
    a4[2] = a5[2];
    a5[2] = v19;
    uint64_t v20 = a4[1];
    unsigned int v21 = -1;
    if (*a4 != v20)
    {
      uint64_t v22 = *a4;
      do
      {
        if (*(_DWORD *)(v22 + 84) < v21) {
          unsigned int v21 = *(_DWORD *)(v22 + 84);
        }
        v22 += 184;
      }
      while (v22 != v20);
    }
    uint64_t v23 = *a3;
    uint64_t v24 = a3[1];
    unsigned int v25 = -1;
    if (*a3 != v24)
    {
      uint64_t v26 = *a3;
      do
      {
        if (*(_DWORD *)(v26 + 84) < v25) {
          unsigned int v25 = *(_DWORD *)(v26 + 84);
        }
        v26 += 184;
      }
      while (v26 != v24);
    }
    if (v21 < v25)
    {
      *a3 = *a4;
      *a4 = v23;
      uint64_t v27 = a3[1];
      a3[1] = a4[1];
      a4[1] = v27;
      uint64_t v28 = a3[2];
      a3[2] = a4[2];
      a4[2] = v28;
      uint64_t v29 = a3[1];
      unsigned int v30 = -1;
      if (*a3 != v29)
      {
        uint64_t v31 = *a3;
        do
        {
          if (*(_DWORD *)(v31 + 84) < v30) {
            unsigned int v30 = *(_DWORD *)(v31 + 84);
          }
          v31 += 184;
        }
        while (v31 != v29);
      }
      uint64_t v32 = *a2;
      uint64_t v33 = a2[1];
      unsigned int v34 = -1;
      if (*a2 != v33)
      {
        uint64_t v35 = *a2;
        do
        {
          if (*(_DWORD *)(v35 + 84) < v34) {
            unsigned int v34 = *(_DWORD *)(v35 + 84);
          }
          v35 += 184;
        }
        while (v35 != v33);
      }
      if (v30 < v34)
      {
        *a2 = *a3;
        *a3 = v32;
        uint64_t v36 = a2[1];
        a2[1] = a3[1];
        a3[1] = v36;
        uint64_t v37 = a2[2];
        a2[2] = a3[2];
        a3[2] = v37;
        uint64_t v38 = a2[1];
        unsigned int v39 = -1;
        if (*a2 != v38)
        {
          uint64_t v40 = *a2;
          do
          {
            if (*(_DWORD *)(v40 + 84) < v39) {
              unsigned int v39 = *(_DWORD *)(v40 + 84);
            }
            v40 += 184;
          }
          while (v40 != v38);
        }
        uint64_t v41 = *a1;
        uint64_t v42 = a1[1];
        unsigned int v43 = -1;
        if (*a1 != v42)
        {
          uint64_t v44 = *a1;
          do
          {
            if (*(_DWORD *)(v44 + 84) < v43) {
              unsigned int v43 = *(_DWORD *)(v44 + 84);
            }
            v44 += 184;
          }
          while (v44 != v42);
        }
        if (v39 < v43)
        {
          *a1 = *a2;
          *a2 = v41;
          uint64_t v45 = a1[1];
          a1[1] = a2[1];
          a2[1] = v45;
          uint64_t v46 = a1[2];
          a1[2] = a2[2];
          a2[2] = v46;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CCE4F29C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unsigned int v5 = -1;
  if (*a2 != v4)
  {
    uint64_t v6 = *a2;
    do
    {
      if (*(_DWORD *)(v6 + 84) < v5) {
        unsigned int v5 = *(_DWORD *)(v6 + 84);
      }
      v6 += 184;
    }
    while (v6 != v4);
  }
  uint64_t v8 = *result;
  uint64_t v7 = result[1];
  unsigned int v9 = -1;
  if (*result != v7)
  {
    uint64_t v10 = *result;
    do
    {
      if (*(_DWORD *)(v10 + 84) < v9) {
        unsigned int v9 = *(_DWORD *)(v10 + 84);
      }
      v10 += 184;
    }
    while (v10 != v7);
  }
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  if (v5 >= v9)
  {
    unsigned int v19 = -1;
    if (v11 != v12)
    {
      uint64_t v20 = *a3;
      do
      {
        if (*(_DWORD *)(v20 + 84) < v19) {
          unsigned int v19 = *(_DWORD *)(v20 + 84);
        }
        v20 += 184;
      }
      while (v20 != v12);
    }
    unsigned int v21 = -1;
    if (v3 != v4)
    {
      uint64_t v22 = *a2;
      do
      {
        if (*(_DWORD *)(v22 + 84) < v21) {
          unsigned int v21 = *(_DWORD *)(v22 + 84);
        }
        v22 += 184;
      }
      while (v22 != v4);
    }
    if (v19 < v21)
    {
      *a2 = v11;
      *a3 = v3;
      uint64_t v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      unsigned int v25 = a2 + 2;
      uint64_t v24 = a2[2];
      a2[2] = a3[2];
      a3[2] = v24;
      uint64_t v26 = a2[1];
      unsigned int v27 = -1;
      if (*a2 != v26)
      {
        uint64_t v28 = *a2;
        do
        {
          if (*(_DWORD *)(v28 + 84) < v27) {
            unsigned int v27 = *(_DWORD *)(v28 + 84);
          }
          v28 += 184;
        }
        while (v28 != v26);
      }
      uint64_t v29 = *result;
      uint64_t v30 = result[1];
      unsigned int v31 = -1;
      if (*result != v30)
      {
        uint64_t v32 = *result;
        do
        {
          if (*(_DWORD *)(v32 + 84) < v31) {
            unsigned int v31 = *(_DWORD *)(v32 + 84);
          }
          v32 += 184;
        }
        while (v32 != v30);
      }
      if (v27 < v31)
      {
        *uint64_t result = *a2;
        *a2 = v29;
        uint64_t v33 = result[1];
        result[1] = a2[1];
        a2[1] = v33;
        uint64_t v17 = result + 2;
LABEL_60:
        uint64_t v43 = *v17;
        uint64_t *v17 = *v25;
        *unsigned int v25 = v43;
      }
    }
  }
  else
  {
    unsigned int v13 = -1;
    if (v11 != v12)
    {
      uint64_t v14 = *a3;
      do
      {
        if (*(_DWORD *)(v14 + 84) < v13) {
          unsigned int v13 = *(_DWORD *)(v14 + 84);
        }
        v14 += 184;
      }
      while (v14 != v12);
    }
    unsigned int v15 = -1;
    if (v3 != v4)
    {
      uint64_t v16 = *a2;
      do
      {
        if (*(_DWORD *)(v16 + 84) < v15) {
          unsigned int v15 = *(_DWORD *)(v16 + 84);
        }
        v16 += 184;
      }
      while (v16 != v4);
    }
    if (v13 < v15)
    {
      uint64_t v17 = result + 2;
      *uint64_t result = v11;
      *a3 = v8;
      uint64_t v18 = result[1];
      result[1] = a3[1];
LABEL_59:
      a3[1] = v18;
      unsigned int v25 = a3 + 2;
      goto LABEL_60;
    }
    *uint64_t result = v3;
    *a2 = v8;
    uint64_t v34 = result[1];
    result[1] = a2[1];
    a2[1] = v34;
    uint64_t v17 = a2 + 2;
    uint64_t v35 = result[2];
    result[2] = a2[2];
    a2[2] = v35;
    uint64_t v36 = a3[1];
    unsigned int v37 = -1;
    if (*a3 != v36)
    {
      uint64_t v38 = *a3;
      do
      {
        if (*(_DWORD *)(v38 + 84) < v37) {
          unsigned int v37 = *(_DWORD *)(v38 + 84);
        }
        v38 += 184;
      }
      while (v38 != v36);
    }
    uint64_t v39 = *a2;
    uint64_t v40 = a2[1];
    unsigned int v41 = -1;
    if (*a2 != v40)
    {
      uint64_t v42 = *a2;
      do
      {
        if (*(_DWORD *)(v42 + 84) < v41) {
          unsigned int v41 = *(_DWORD *)(v42 + 84);
        }
        v42 += 184;
      }
      while (v42 != v40);
    }
    if (v37 < v41)
    {
      *a2 = *a3;
      *a3 = v39;
      uint64_t v18 = a2[1];
      a2[1] = a3[1];
      goto LABEL_59;
    }
  }
  return result;
}

BOOL sub_1CCE4F534(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = *(a2 - 3);
      uint64_t v7 = *(a2 - 2);
      unsigned int v8 = -1;
      if (v6 != v7)
      {
        uint64_t v9 = *(a2 - 3);
        do
        {
          if (*(_DWORD *)(v9 + 84) < v8) {
            unsigned int v8 = *(_DWORD *)(v9 + 84);
          }
          v9 += 184;
        }
        while (v9 != v7);
      }
      uint64_t v10 = *a1;
      uint64_t v11 = a1[1];
      unsigned int v12 = -1;
      if (*a1 != v11)
      {
        uint64_t v13 = *a1;
        do
        {
          if (*(_DWORD *)(v13 + 84) < v12) {
            unsigned int v12 = *(_DWORD *)(v13 + 84);
          }
          v13 += 184;
        }
        while (v13 != v11);
      }
      if (v8 < v12)
      {
        *a1 = v6;
        *(a2 - 3) = v10;
        uint64_t v14 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v14;
        uint64_t v15 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v15;
      }
      return 1;
    case 3uLL:
      sub_1CCE4F29C(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_1CCE4F818(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_1CCE4F038(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      uint64_t v16 = a1 + 6;
      sub_1CCE4F29C(a1, a1 + 3, a1 + 6);
      uint64_t v17 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      int v18 = 0;
      break;
  }
  while (1)
  {
    unsigned int v19 = (_DWORD *)v17[1];
    unsigned int v20 = -1;
    if ((_DWORD *)*v17 != v19)
    {
      unsigned int v21 = (_DWORD *)*v17;
      do
      {
        if (v21[21] < v20) {
          unsigned int v20 = v21[21];
        }
        v21 += 46;
      }
      while (v21 != v19);
    }
    uint64_t v22 = *v16;
    unsigned int v23 = -1;
    while (v22 != v16[1])
    {
      if (*(_DWORD *)(v22 + 84) < v23) {
        unsigned int v23 = *(_DWORD *)(v22 + 84);
      }
      v22 += 184;
    }
    if (v20 < v23)
    {
      uint64_t v33 = (_DWORD *)*v17;
      uint64_t v34 = v19;
      uint64_t v35 = v17[2];
      uint64_t *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
      uint64_t v24 = *v16;
      unsigned int v25 = v17;
      while (1)
      {
        uint64_t v26 = v16[1];
        *unsigned int v25 = v24;
        v25[1] = v26;
        v25[2] = v16[2];
        *uint64_t v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        uint64_t v27 = (uint64_t)v34;
        if (v16 == a1) {
          break;
        }
        unsigned int v25 = v16;
        unsigned int v28 = -1;
        if (v33 != v34)
        {
          uint64_t v29 = v33;
          do
          {
            if (v29[21] < v28) {
              unsigned int v28 = v29[21];
            }
            v29 += 46;
          }
          while (v29 != v34);
        }
        uint64_t v24 = *(v16 - 3);
        uint64_t v30 = *(v16 - 2);
        unsigned int v31 = -1;
        if (v24 != v30)
        {
          uint64_t v32 = *(v16 - 3);
          do
          {
            if (*(_DWORD *)(v32 + 84) < v31) {
              unsigned int v31 = *(_DWORD *)(v32 + 84);
            }
            v32 += 184;
          }
          while (v32 != v30);
        }
        v16 -= 3;
        if (v28 >= v31) {
          goto LABEL_42;
        }
      }
      unsigned int v25 = a1;
LABEL_42:
      *unsigned int v25 = (uint64_t)v33;
      v25[1] = v27;
      v25[2] = v35;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      ++v18;
      sub_1CCE457AC((void **)&v33);
      if (v18 == 8) {
        return v17 + 3 == a2;
      }
    }
    uint64_t v16 = v17;
    v17 += 3;
    if (v17 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CCE4F818(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CCE4F29C(a1, a2, a3);
  uint64_t v9 = a4[1];
  unsigned int v10 = -1;
  if (*a4 != v9)
  {
    uint64_t v11 = *a4;
    do
    {
      if (*(_DWORD *)(v11 + 84) < v10) {
        unsigned int v10 = *(_DWORD *)(v11 + 84);
      }
      v11 += 184;
    }
    while (v11 != v9);
  }
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  unsigned int v14 = -1;
  if (*a3 != v13)
  {
    uint64_t v15 = *a3;
    do
    {
      if (*(_DWORD *)(v15 + 84) < v14) {
        unsigned int v14 = *(_DWORD *)(v15 + 84);
      }
      v15 += 184;
    }
    while (v15 != v13);
  }
  if (v10 < v14)
  {
    *a3 = *a4;
    *a4 = v12;
    uint64_t v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    uint64_t v17 = a3[2];
    a3[2] = a4[2];
    a4[2] = v17;
    uint64_t v18 = a3[1];
    unsigned int v19 = -1;
    if (*a3 != v18)
    {
      uint64_t v20 = *a3;
      do
      {
        if (*(_DWORD *)(v20 + 84) < v19) {
          unsigned int v19 = *(_DWORD *)(v20 + 84);
        }
        v20 += 184;
      }
      while (v20 != v18);
    }
    uint64_t v21 = *a2;
    uint64_t v22 = a2[1];
    unsigned int v23 = -1;
    if (*a2 != v22)
    {
      uint64_t v24 = *a2;
      do
      {
        if (*(_DWORD *)(v24 + 84) < v23) {
          unsigned int v23 = *(_DWORD *)(v24 + 84);
        }
        v24 += 184;
      }
      while (v24 != v22);
    }
    if (v19 < v23)
    {
      *a2 = *a3;
      *a3 = v21;
      uint64_t v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      uint64_t v26 = a2[2];
      a2[2] = a3[2];
      a3[2] = v26;
      uint64_t v27 = a2[1];
      unsigned int v28 = -1;
      if (*a2 != v27)
      {
        uint64_t v29 = *a2;
        do
        {
          if (*(_DWORD *)(v29 + 84) < v28) {
            unsigned int v28 = *(_DWORD *)(v29 + 84);
          }
          v29 += 184;
        }
        while (v29 != v27);
      }
      uint64_t v30 = *a1;
      uint64_t v31 = a1[1];
      unsigned int v32 = -1;
      if (*a1 != v31)
      {
        uint64_t v33 = *a1;
        do
        {
          if (*(_DWORD *)(v33 + 84) < v32) {
            unsigned int v32 = *(_DWORD *)(v33 + 84);
          }
          v33 += 184;
        }
        while (v33 != v31);
      }
      if (v28 < v32)
      {
        *a1 = *a2;
        *a2 = v30;
        uint64_t v34 = a1[1];
        a1[1] = a2[1];
        a2[1] = v34;
        uint64_t v35 = a1[2];
        a1[2] = a2[2];
        a2[2] = v35;
      }
    }
  }
  return result;
}

uint64_t sub_1CCE4F9E8(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF71F0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2640058;
  *(unsigned char *)(a1 + 28) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF71F8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CCE4FA9C;
    v6[1] = &PassRegistry;
    unsigned int v5 = v6;
    std::__call_once(&qword_1EBCF71F8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCE4FA9C(llvm *a1, llvm::PassRegistry *a2)
{
}

void llvm::MergedLoadStoreMotionPass::run(char *a1)
{
  char v1 = *a1;
  uint64_t v2 = 0;
  int v3 = 250;
  char v4 = v1;
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

uint64_t sub_1CCE4FC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v231 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a3;
  uint64_t v3 = a2 + 72;
  uint64_t v4 = *(void *)(a2 + 80);
  if (v4 == a2 + 72)
  {
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  int v5 = 0;
  uint64_t v6 = &v220;
  uint64_t v7 = &v223;
  unsigned int v8 = &v217;
  uint64_t v9 = &v226;
  do
  {
    uint64_t v11 = (void *)(v4 + 16);
    unsigned int v10 = *(void **)(v4 + 16);
    uint64_t v4 = *(void *)(v4 + 8);
    if (v10 == v11) {
      continue;
    }
    uint64_t v12 = v10 - 3;
    if (!v10) {
      uint64_t v12 = 0;
    }
    unsigned int v13 = *((unsigned __int8 *)v12 + 16) - 40;
    if (v13 < 0xFFFFFFF5) {
      uint64_t v12 = 0;
    }
    if (!v10) {
      continue;
    }
    if (*((unsigned char *)v12 + 16) != 30 || v13 < 0xFFFFFFF5) {
      continue;
    }
    if ((*((_DWORD *)v12 + 5) & 0x7FFFFFF) != 3) {
      continue;
    }
    uint64_t v15 = (llvm::BasicBlock *)*(v12 - 4);
    uint64_t v16 = (llvm::BasicBlock *)*(v12 - 8);
    if (!llvm::BasicBlock::getSinglePredecessor(v15) || !llvm::BasicBlock::getSinglePredecessor(v16)) {
      continue;
    }
    uint64_t SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v15);
    uint64_t v18 = llvm::BasicBlock::getSingleSuccessor(v16);
    BOOL v19 = !SingleSuccessor || v18 == 0;
    if (v19 || SingleSuccessor != v18) {
      continue;
    }
    uint64_t v21 = (void *)*v11;
    if ((void *)*v11 == v11)
    {
      uint64_t v22 = 0;
    }
    else
    {
      if (v21) {
        uint64_t v22 = v21 - 3;
      }
      else {
        uint64_t v22 = 0;
      }
      if (*((unsigned __int8 *)v22 + 16) - 29 >= 0xB) {
        uint64_t v22 = 0;
      }
    }
    if (*((unsigned char *)v22 + 16) == 30)
    {
LABEL_34:
      unsigned int v23 = (llvm::BasicBlock **)(v22 - 4);
    }
    else
    {
      switch(*((unsigned char *)v22 + 16))
      {
        case '!':
          unsigned int v23 = (llvm::BasicBlock **)(v22 - 12);
          break;
        case '""':
        case '#':
LABEL_316:
          __break(1u);
          JUMPOUT(0x1CCE50E8CLL);
        case '$':
          if ((*((_WORD *)v22 + 9) & 1) == 0)
          {
            uint64_t v24 = 0;
            goto LABEL_36;
          }
          int v179 = *((_DWORD *)v22 + 5);
LABEL_311:
          uint64_t v180 = &v22[-4 * (v179 & 0x7FFFFFF)];
LABEL_288:
          unsigned int v23 = (llvm::BasicBlock **)(v180 + 4);
          break;
        case '%':
          goto LABEL_34;
        case '\'':
          unsigned int v23 = (llvm::BasicBlock **)&v22[-4 * *((unsigned int *)v22 + 20) - 8];
          break;
        default:
          int v179 = *((_DWORD *)v22 + 5);
          if ((v179 & 0x40000000) == 0) {
            goto LABEL_311;
          }
          uint64_t v180 = (void *)*(v22 - 1);
          goto LABEL_288;
      }
    }
    uint64_t v24 = *v23;
LABEL_36:
    unsigned int v209 = (llvm::BasicBlock *)llvm::BasicBlock::getSingleSuccessor(v24);
    uint64_t v25 = (void *)*v11;
    if ((void *)*v11 == v11)
    {
      uint64_t v26 = 0;
    }
    else
    {
      if (v25) {
        uint64_t v26 = v25 - 3;
      }
      else {
        uint64_t v26 = 0;
      }
      if (*((unsigned __int8 *)v26 + 16) - 29 >= 0xB) {
        uint64_t v26 = 0;
      }
    }
    if (*((unsigned char *)v26 + 16) == 30)
    {
      uint64_t v27 = (llvm::BasicBlock **)(v26 - 4);
LABEL_46:
      unsigned int v28 = (llvm::BasicBlock **)(v26 - 8);
    }
    else
    {
      switch(*((unsigned char *)v26 + 16))
      {
        case ' ':
        case '&':
          int v183 = *((_DWORD *)v26 + 5);
          if ((v183 & 0x40000000) != 0) {
            unsigned int v184 = (void *)*(v26 - 1);
          }
          else {
            unsigned int v184 = &v26[-4 * (v183 & 0x7FFFFFF)];
          }
          uint64_t v27 = (llvm::BasicBlock **)(v184 + 4);
          unsigned int v28 = (llvm::BasicBlock **)(v184 + 8);
          break;
        case '!':
          uint64_t v27 = (llvm::BasicBlock **)(v26 - 12);
          goto LABEL_46;
        case '""':
        case '#':
          goto LABEL_316;
        case '$':
          if ((*((_WORD *)v26 + 9) & 1) == 0) {
            continue;
          }
          uint64_t v27 = (llvm::BasicBlock **)&v26[-4 * (*((_DWORD *)v26 + 5) & 0x7FFFFFF) + 4];
LABEL_307:
          unsigned int v28 = v27;
          break;
        case '%':
          uint64_t v27 = (llvm::BasicBlock **)(v26 - 4);
          goto LABEL_307;
        case '\'':
          uint64_t v185 = &v26[-4 * *((unsigned int *)v26 + 20)];
          unsigned int v28 = (llvm::BasicBlock **)(v185 - 4);
          uint64_t v27 = (llvm::BasicBlock **)(v185 - 8);
          break;
        default:
          int v181 = *((_DWORD *)v26 + 5);
          if ((v181 & 0x40000000) != 0) {
            uint64_t v182 = (void *)*(v26 - 1);
          }
          else {
            uint64_t v182 = &v26[-4 * (v181 & 0x7FFFFFF)];
          }
          uint64_t v27 = (llvm::BasicBlock **)(v182 + 4);
          unsigned int v28 = (llvm::BasicBlock **)(v182 + 12);
          break;
      }
    }
    uint64_t v29 = *v27;
    uint64_t v30 = *v28;
    if (*v27 == *v28 || !*(unsigned char *)(a1 + 12) && llvm::BasicBlock::hasNPredecessorsOrMore(v209, 3)) {
      continue;
    }
    llvm::BasicBlock::instructionsWithoutDebug(v30, 1, (uint64_t)&v222);
    long long v219 = v222;
    if (v224)
    {
      if (v224 == v7)
      {
        uint64_t v221 = (uint64_t)v6;
        (*(void (**)(uint64_t *, uint64_t *))(v223 + 24))(v7, v6);
      }
      else
      {
        uint64_t v221 = (*(uint64_t (**)(void))(*v224 + 16))();
      }
    }
    else
    {
      uint64_t v221 = 0;
    }
    long long v216 = v225;
    if (v227)
    {
      if (v227 == v9)
      {
        uint64_t v218 = (uint64_t)v8;
        (*(void (**)(uint64_t *, uint64_t *))(v226 + 24))(v9, v8);
      }
      else
      {
        uint64_t v218 = (*(uint64_t (**)(void))(*v227 + 16))();
      }
    }
    else
    {
      uint64_t v218 = 0;
    }
    int v206 = sub_1CCDD0E64(&v219, &v216);
    if ((uint64_t *)v218 == v8)
    {
      (*(void (**)(uint64_t *))(v217 + 32))(v8);
    }
    else if (v218)
    {
      (*(void (**)(void))(*(void *)v218 + 40))();
    }
    int v204 = v5;
    uint64_t v203 = v6;
    uint64_t v200 = v9;
    if ((uint64_t *)v221 == v6)
    {
      (*(void (**)(uint64_t *))(v220 + 32))(v6);
    }
    else if (v221)
    {
      (*(void (**)(void))(*(void *)v221 + 40))();
    }
    unsigned int v201 = v8;
    uint64_t v202 = v7;
    unsigned int v32 = (void *)((char *)v29 + 40);
    uint64_t v31 = (void *)*((void *)v29 + 5);
    if (v31 == (void *)((char *)v29 + 40)) {
      goto LABEL_279;
    }
    unint64_t v197 = v30;
    unint64_t v198 = v29;
    int v210 = 0;
    uint64_t v33 = (void **)((char *)v30 + 40);
    uint64_t v205 = (void *)((char *)v29 + 40);
    while (1)
    {
      uint64_t v34 = v31;
      BOOL v19 = v31 == 0;
      uint64_t v35 = v31 - 3;
      uint64_t v31 = (void *)*v31;
      if (v19) {
        uint64_t v35 = 0;
      }
      int v36 = *((unsigned __int8 *)v35 + 16);
      if (v36 == 61) {
        uint64_t v37 = (uint64_t)v35;
      }
      else {
        uint64_t v37 = 0;
      }
      if (!v34 || v36 != 61) {
        goto LABEL_121;
      }
      int v38 = *(unsigned __int8 *)(v37 + 16);
      if (v38 == 60 || v38 == 61)
      {
        __int16 v39 = *(_WORD *)(v37 + 18);
        if (v39 & 0x380) != 0 || (v39) {
          goto LABEL_121;
        }
      }
      else if (v38 - 63) < 3 || (*(_WORD *)(v37 + 18))
      {
        goto LABEL_121;
      }
      if (++v210 * v206 >= *(_DWORD *)(a1 + 8)) {
        goto LABEL_279;
      }
      uint64_t v40 = *v33;
      if (*v33 != v33) {
        break;
      }
LABEL_120:
      unsigned int v32 = v205;
LABEL_121:
      if (v31 == v32) {
        goto LABEL_279;
      }
    }
    uint64_t v207 = *(void *)(v37 + 40);
    while (1)
    {
      unsigned int v41 = v40 - 3;
      if (!v40) {
        unsigned int v41 = 0;
      }
      int v42 = *((unsigned __int8 *)v41 + 16);
      uint64_t v43 = v42 == 61 ? (uint64_t)v41 : 0;
      if (v40 && v42 == 61)
      {
        uint64_t v44 = *(void *)(v37 - 32);
        uint64_t v45 = sub_1CB83544C(*(void *)(*(void *)(*(void *)(v37 + 40) + 56) + 40) + 272, **(void **)(v37 - 64));
        unint64_t v47 = v46 == 1 ? -2 : (unint64_t)(v45 + 7) >> 3;
        llvm::Instruction::getAAMetadata((uint64_t ***)v37, &v229);
        *(void *)&long long v228 = v44;
        *((void *)&v228 + 1) = v47;
        uint64_t v48 = *(void *)(v43 - 32);
        uint64_t v49 = sub_1CB83544C(*(void *)(*(void *)(*(void *)(v43 + 40) + 56) + 40) + 272, **(void **)(v43 - 64));
        unint64_t v51 = v50 == 1 ? -2 : (unint64_t)(v49 + 7) >> 3;
        llvm::Instruction::getAAMetadata((uint64_t ***)v43, v215);
        *(void *)&long long v214 = v48;
        *((void *)&v214 + 1) = v51;
        if (llvm::AAResults::alias(*(void *)a1, (uint64_t)&v228, (uint64_t)&v214) == 3)
        {
          if (llvm::Instruction::isSameOperationAs((llvm::Instruction *)v37, (const llvm::Instruction *)v43, 0))
          {
            uint64_t v52 = *(void *)(v43 + 32);
            BOOL v53 = !v52 || v52 == *(void *)(v43 + 40) + 40;
            uint64_t v54 = v53 ? 0 : v52 - 24;
            uint64_t v55 = *v33 ? (uint64_t)(*v33 - 3) : 0;
            v213[0] = v214;
            v213[1] = v215[0];
            v213[2] = v215[1];
            if (!sub_1CCE510AC((uint64_t *)a1, v54, v55, v213))
            {
              uint64_t v56 = *(void *)(v37 + 32);
              BOOL v57 = !v56 || v56 == *(void *)(v37 + 40) + 40;
              uint64_t v58 = v57 ? 0 : v56 - 24;
              uint64_t v59 = *(void *)(v207 + 40);
              uint64_t v60 = v59 ? v59 - 24 : 0;
              v212[0] = v228;
              v212[1] = v229;
              v212[2] = v230;
              if (!sub_1CCE510AC((uint64_t *)a1, v58, v60, v212)) {
                break;
              }
            }
          }
        }
      }
      uint64_t v40 = (void *)*v40;
      if (v40 == v33) {
        goto LABEL_120;
      }
    }
    if (*(unsigned __int8 *)(*(void *)(v37 - 32) + 16) <= 0x1Bu) {
      uint64_t v61 = 0;
    }
    else {
      uint64_t v61 = *(void *)(v37 - 32);
    }
    if (*(unsigned __int8 *)(*(void *)(v43 - 32) + 16) <= 0x1Bu) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(v43 - 32);
    }
    if (v61)
    {
      if (v62)
      {
        if (llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v61, (const llvm::Instruction *)v62))
        {
          if ((*(unsigned __int8 *)(v62 + 17) ^ *(unsigned __int8 *)(v61 + 17)) <= 1)
          {
            uint64_t v63 = *(void *)(v61 + 8);
            if (v63)
            {
              if (!*(void *)(v63 + 8) && *(void *)(v61 + 40) == *(void *)(v37 + 40))
              {
                uint64_t v64 = *(void *)(v62 + 8);
                if (v64)
                {
                  if (!*(void *)(v64 + 8)
                    && *(void *)(v62 + 40) == *(void *)(v43 + 40)
                    && *(unsigned char *)(v61 + 16) == 62)
                  {
                    uint64_t v199 = (uint64_t)v209;
                    if (!llvm::BasicBlock::hasNPredecessorsOrMore(v209, 3)
                      || (*(void *)&long long v228 = v198,
                          *((void *)&v228 + 1) = v197,
                          (uint64_t v199 = sub_1CD1271B8((uint64_t **)v209, (int)&v228, 2, ".sink.split", 0, 0, 0, 0, 0)) != 0))
                    {
                      if (*(unsigned __int8 *)(*(void *)(v37 - 32) + 16) <= 0x1Bu) {
                        uint64_t v65 = 0;
                      }
                      else {
                        uint64_t v65 = *(llvm::Instruction **)(v37 - 32);
                      }
                      uint64_t v66 = v199 + 40;
                      for (uint64_t i = *(void *)(v199 + 48); ; uint64_t i = *(void *)(i + 8))
                      {
                        if (i == v66) {
                          goto LABEL_161;
                        }
                        uint64_t v68 = i - 24;
                        if (!i) {
                          uint64_t v68 = 0;
                        }
                        if (*(unsigned char *)(v68 + 16) != 83) {
                          break;
                        }
                      }
                      unsigned int v69 = *(unsigned __int8 *)(i - 8) - 38;
                      BOOL v70 = v69 > 0x38;
                      uint64_t v71 = (1 << v69) & 0x100060000000001;
                      if (v70 || v71 == 0) {
                        uint64_t v66 = i;
                      }
                      else {
                        uint64_t v66 = *(void *)(i + 8);
                      }
LABEL_161:
                      llvm::Instruction::andIRFlags(v37, v43);
                      llvm::Instruction::dropUnknownNonDebugMetadata(v37, 0, 0);
                      unsigned int v73 = llvm::Instruction::clone((llvm::Instruction *)v37);
                      unsigned int v74 = (llvm::Value *)llvm::Instruction::clone(v65);
                      if (v66) {
                        uint64_t v75 = v66 - 24;
                      }
                      else {
                        uint64_t v75 = 0;
                      }
                      uint64_t v76 = *(void *)(v75 + 40);
                      v73[5] = v76;
                      __int16 v77 = *(_WORD *)(v76 + 18) & 0x7FFF;
                      *(_WORD *)(v76 + 18) = v77;
                      if ((*((unsigned char *)v73 + 23) & 0x10) != 0)
                      {
                        uint64_t v135 = *(void *)(v76 + 56);
                        if (v135)
                        {
                          uint64_t v136 = *(llvm::ValueSymbolTable **)(v135 + 104);
                          if (v136)
                          {
                            llvm::ValueSymbolTable::reinsertValue(v136, (llvm::Value *)v73);
                            uint64_t v76 = v73[5];
                            __int16 v77 = *(_WORD *)(v76 + 18);
                          }
                        }
                      }
                      uint64_t v79 = *(void *)(v75 + 24);
                      unsigned int v78 = (uint64_t **)(v75 + 24);
                      unsigned int v195 = v73;
                      v73[3] = v79;
                      v73[4] = (uint64_t)v78;
                      uint64_t v80 = v73 + 3;
                      *(void *)(v79 + 8) = v80;
                      char *v78 = v80;
                      *((void *)v74 + 5) = v76;
                      *(_WORD *)(v76 + 18) = v77 & 0x7FFF;
                      if ((*((unsigned char *)v74 + 23) & 0x10) != 0)
                      {
                        uint64_t v137 = *(void *)(v76 + 56);
                        if (v137)
                        {
                          uint64_t v138 = *(llvm::ValueSymbolTable **)(v137 + 104);
                          if (v138) {
                            llvm::ValueSymbolTable::reinsertValue(v138, v74);
                          }
                        }
                      }
                      uint64_t v81 = *v80;
                      *((void *)v74 + 3) = *v80;
                      *((void *)v74 + 4) = v80;
                      *(void *)(v81 + 8) = (char *)v74 + 24;
                      *uint64_t v80 = (uint64_t)v74 + 24;
                      uint64_t v82 = *(uint64_t **)(v37 - 64);
                      unsigned int v83 = *(uint64_t ****)(v43 - 64);
                      if (v82 != (uint64_t *)v83)
                      {
                        uint64_t v194 = *(void *)(v43 - 64);
                        if ((*((unsigned char *)v83 + 23) & 0x10) != 0)
                        {
                          uint64_t v84 = ***v83;
                          uint64_t v85 = *(void *)(v84 + 152);
                          uint64_t v86 = *(unsigned int *)(v84 + 168);
                          if (v86)
                          {
                            LODWORD(v87) = (v86 - 1) & ((v83 >> 4) ^ (v83 >> 9));
                            unsigned int v88 = (uint64_t ****)(v85 + 16 * v87);
                            uint64_t v89 = *v88;
                            if (*v88 != v83)
                            {
                              int v90 = 1;
                              do
                              {
                                if (v89 == (uint64_t ***)-4096) {
                                  goto LABEL_174;
                                }
                                int v91 = v87 + v90++;
                                uint64_t v87 = v91 & (v86 - 1);
                                uint64_t v89 = *(uint64_t ****)(v85 + 16 * v87);
                              }
                              while (v89 != v83);
                              unsigned int v88 = (uint64_t ****)(v85 + 16 * v87);
                            }
                          }
                          else
                          {
LABEL_174:
                            unsigned int v88 = (uint64_t ****)(v85 + 16 * v86);
                          }
                          uint64_t v92 = v88[1];
                          uint64_t v95 = *v92;
                          uint64_t v94 = (char *)(v92 + 2);
                          unsigned int v93 = v95;
                        }
                        else
                        {
                          unsigned int v93 = 0;
                          uint64_t v94 = &byte_1CFBCE98E;
                        }
                        unsigned int v191 = *(void **)(v37 - 64);
                        uint64_t v96 = *v82;
                        LOWORD(v230) = 773;
                        *(void *)&long long v228 = v94;
                        *((void *)&v228 + 1) = v93;
                        *(void *)&long long v229 = ".sink";
                        uint64_t v97 = *(uint64_t **)(v199 + 48);
                        unsigned int v98 = operator new(0x48uLL);
                        v98[1] = v96;
                        uint64_t v99 = (llvm::Value *)(v98 + 1);
                        void *v98 = 0;
                        v98[2] = 0;
                        uint64_t v193 = v98 + 2;
                        v98[3] = 0x4000000000000053;
                        *((_OWORD *)v98 + 2) = 0u;
                        uint64_t v100 = (char *)(v98 + 4);
                        *((_OWORD *)v98 + 3) = 0u;
                        *((_DWORD *)v98 + 16) = 0;
                        uint64_t v196 = (llvm::Instruction *)(v98 + 1);
                        if (v97)
                        {
                          uint64_t v160 = v97[2];
                          v98[6] = v160;
                          *(_WORD *)(v160 + 18) &= ~0x8000u;
                          unsigned int v161 = v98;
                          if ((*((unsigned char *)v98 + 31) & 0x10) != 0)
                          {
                            uint64_t v171 = *(void *)(v160 + 56);
                            if (v171)
                            {
                              uint64_t v172 = *(llvm::ValueSymbolTable **)(v171 + 104);
                              if (v172)
                              {
                                llvm::ValueSymbolTable::reinsertValue(v172, v99);
                                uint64_t v99 = v196;
                              }
                            }
                          }
                          uint64_t v162 = *v97;
                          v161[4] = *v97;
                          v161[5] = v97;
                          *(void *)(v162 + 8) = v100;
                          uint64_t *v97 = (uint64_t)v100;
                          unsigned int v98 = v161;
                        }
                        uint64_t v208 = v98;
                        *((_DWORD *)v98 + 17) = 2;
                        llvm::Value::setNameImpl(v99, (const char **)&v228);
                        unsigned int v101 = v208;
                        if (!*((unsigned char *)v208 + 24))
                        {
                          if ((*((unsigned char *)v208 + 31) & 0x10) == 0) {
                            goto LABEL_271;
                          }
                          uint64_t v163 = ***(void ***)v196;
                          uint64_t v164 = *(void *)(v163 + 152);
                          uint64_t v165 = *(unsigned int *)(v163 + 168);
                          if (v165)
                          {
                            LODWORD(v166) = (v165 - 1) & ((v196 >> 4) ^ (v196 >> 9));
                            uint64_t v167 = (llvm::Instruction **)(v164 + 16 * v166);
                            uint64_t v168 = *v167;
                            if (*v167 != v196)
                            {
                              int v169 = 1;
                              do
                              {
                                if (v168 == (llvm::Instruction *)-4096) {
                                  goto LABEL_263;
                                }
                                int v170 = v166 + v169++;
                                uint64_t v166 = v170 & (v165 - 1);
                                uint64_t v168 = *(llvm::Instruction **)(v164 + 16 * v166);
                              }
                              while (v168 != v196);
                              uint64_t v167 = (llvm::Instruction **)(v164 + 16 * v166);
                            }
                          }
                          else
                          {
LABEL_263:
                            uint64_t v167 = (llvm::Instruction **)(v164 + 16 * v165);
                          }
                          uint64_t v173 = v167[1];
                          unint64_t v176 = *(void *)v173;
                          uint64_t v174 = (char *)v173 + 16;
                          unint64_t v175 = v176;
                          if (v176 >= 5
                            && (*(_DWORD *)v174 == *(_DWORD *)"llvm." ? (BOOL v177 = v174[4] == aLlvm_1[4]) : (BOOL v177 = 0), v177))
                          {
                            *((_DWORD *)v208 + 10) |= 0x2000u;
                            int v178 = llvm::Function::lookupIntrinsicID(v174, v175);
                          }
                          else
                          {
LABEL_271:
                            int v178 = 0;
                            *((_DWORD *)v208 + 10) &= ~0x2000u;
                          }
                          unsigned int v101 = v208;
                          *((_DWORD *)v208 + 11) = v178;
                        }
                        uint64_t v102 = *((unsigned int *)v101 + 17);
                        uint64_t v103 = v101;
                        uint64_t v104 = operator new(40 * v102);
                        *uint64_t v103 = v104;
                        if (v102)
                        {
                          uint64_t v105 = &v104[4 * v102];
                          do
                          {
                            *uint64_t v104 = 0;
                            v104[1] = 0;
                            v104[2] = 0;
                            v104[3] = v196;
                            v104 += 4;
                          }
                          while (v104 != v105);
                        }
                        llvm::Instruction::applyMergedLocation(v196, *(const llvm::DILocation **)(v37 + 48), *(const llvm::DILocation **)(v43 + 48));
                        uint64_t v106 = *(void *)(v37 + 40);
                        uint64_t v107 = (char **)v208;
                        int v108 = *((_DWORD *)v208 + 7);
                        uint64_t v109 = v108 & 0x7FFFFFF;
                        if ((v108 & 0x7FFFFFF) == *((_DWORD *)v208 + 17))
                        {
                          LODWORD(v141) = v109 + (v109 >> 1);
                          if (v141 <= 2) {
                            uint64_t v141 = 2;
                          }
                          else {
                            uint64_t v141 = v141;
                          }
                          uint64_t v188 = v141;
                          *((_DWORD *)v208 + 17) = v141;
                          if ((v108 & 0x40000000) != 0) {
                            uint64_t v142 = (uint64_t *)*v208;
                          }
                          else {
                            uint64_t v142 = (uint64_t *)((char *)v196 - 32 * v109);
                          }
                          std::string __p = v142;
                          uint64_t v143 = operator new(40 * v141);
                          *uint64_t v208 = v143;
                          uint64_t v144 = v143;
                          do
                          {
                            *uint64_t v144 = 0;
                            v144[1] = 0;
                            v144[2] = 0;
                            v144[3] = v196;
                            v144 += 4;
                          }
                          while (v144 != &v143[4 * v188]);
                          int v145 = *((_DWORD *)v208 + 7);
                          if ((v145 & 0x40000000) != 0) {
                            uint64_t v146 = (uint64_t)v143;
                          }
                          else {
                            uint64_t v146 = (uint64_t)v196 - 32 * (v145 & 0x7FFFFFF);
                          }
                          uint64_t v187 = v146;
                          sub_1CC5E4108((uint64_t)&v228, __p, &__p[4 * v109], v146);
                          if (v109)
                          {
                            memmove((void *)(v187 + 32 * v188), &__p[4 * v109], 8 * v109);
                            uint64_t v147 = 4 * v109;
                            do
                            {
                              uint64_t v148 = &__p[v147];
                              if (__p[v147 - 4])
                              {
                                *(void *)*(v148 - 2) = *(v148 - 3);
                                uint64_t v149 = *(v148 - 3);
                                if (v149) {
                                  *(void *)(v149 + 16) = *(v148 - 2);
                                }
                              }
                              v147 -= 4;
                            }
                            while (v147 * 8);
                          }
                          operator delete(__p);
                          uint64_t v107 = (char **)v208;
                          int v108 = *((_DWORD *)v208 + 7);
                        }
                        uint64_t v110 = (v108 + 1) & 0x7FFFFFF;
                        *((_DWORD *)v107 + 7) = v108 & 0xF8000000 | (v108 + 1) & 0x7FFFFFF;
                        if ((v108 & 0x40000000) != 0) {
                          uint64_t v111 = *v107;
                        }
                        else {
                          uint64_t v111 = (char *)v196 - 32 * v110;
                        }
                        uint64_t v112 = (v110 - 1);
                        uint64_t v113 = &v111[32 * v112];
                        if (*(void *)v113)
                        {
                          **((void **)v113 + 2) = *((void *)v113 + 1);
                          uint64_t v139 = *((void *)v113 + 1);
                          if (v139) {
                            *(void *)(v139 + 16) = *((void *)v113 + 2);
                          }
                        }
                        *(void *)uint64_t v113 = v191;
                        uint64_t v115 = (char **)(v191 + 1);
                        uint64_t v114 = v191[1];
                        *((void *)v113 + 1) = v114;
                        if (v114) {
                          *(void *)(v114 + 16) = v113 + 8;
                        }
                        *(void *)&v111[32 * v112 + 16] = v115;
                        unsigned __int8 *v115 = v113;
                        int v116 = *((_DWORD *)v107 + 7);
                        uint64_t v117 = v116 & 0x7FFFFFF;
                        if ((v116 & 0x40000000) != 0) {
                          unsigned int v118 = *v107;
                        }
                        else {
                          unsigned int v118 = (char *)v196 - 32 * v117;
                        }
                        uint64_t v119 = *((unsigned int *)v107 + 17);
                        *(void *)&v118[32 * v119 + 8 * (v117 - 1)] = v106;
                        uint64_t v120 = *(void *)(v43 + 40);
                        int v121 = *((_DWORD *)v107 + 7);
                        if ((v121 & 0x7FFFFFF) == v119)
                        {
                          unsigned int v150 = v119 + (v119 >> 1);
                          if (v150 <= 2) {
                            uint64_t v151 = 2;
                          }
                          else {
                            uint64_t v151 = v150;
                          }
                          *((_DWORD *)v107 + 17) = v151;
                          if ((v121 & 0x40000000) != 0) {
                            unsigned int v152 = (uint64_t *)*v107;
                          }
                          else {
                            unsigned int v152 = (uint64_t *)((char *)v196 - 32 * v119);
                          }
                          uint64_t v192 = v152;
                          uint64_t v153 = operator new(40 * v151);
                          *uint64_t v208 = v153;
                          uint64_t v154 = v153;
                          do
                          {
                            *uint64_t v154 = 0;
                            v154[1] = 0;
                            v154[2] = 0;
                            v154[3] = v196;
                            v154 += 4;
                          }
                          while (v154 != &v153[4 * v151]);
                          int v155 = *((_DWORD *)v208 + 7);
                          if ((v155 & 0x40000000) != 0) {
                            uint64_t v156 = (uint64_t)v153;
                          }
                          else {
                            uint64_t v156 = (uint64_t)v196 - 32 * (v155 & 0x7FFFFFF);
                          }
                          uint64_t v189 = v156;
                          sub_1CC5E4108((uint64_t)&v228, v192, &v192[4 * v119], v156);
                          if (v119)
                          {
                            memmove((void *)(v189 + 32 * v151), &v192[4 * v119], 8 * v119);
                            uint64_t v157 = 4 * v119;
                            do
                            {
                              uint64_t v158 = &v192[v157];
                              if (v192[v157 - 4])
                              {
                                *(void *)*(v158 - 2) = *(v158 - 3);
                                uint64_t v159 = *(v158 - 3);
                                if (v159) {
                                  *(void *)(v159 + 16) = *(v158 - 2);
                                }
                              }
                              v157 -= 4;
                            }
                            while (v157 * 8);
                          }
                          operator delete(v192);
                          uint64_t v107 = (char **)v208;
                          int v121 = *((_DWORD *)v208 + 7);
                        }
                        uint64_t v122 = (v121 + 1) & 0x7FFFFFF;
                        *((_DWORD *)v107 + 7) = v121 & 0xF8000000 | (v121 + 1) & 0x7FFFFFF;
                        if ((v121 & 0x40000000) != 0) {
                          int64x2_t v123 = *v107;
                        }
                        else {
                          int64x2_t v123 = (char *)v196 - 32 * v122;
                        }
                        uint64_t v124 = (v122 - 1);
                        uint64_t v125 = &v123[32 * v124];
                        if (*(void *)v125)
                        {
                          **((void **)v125 + 2) = *((void *)v125 + 1);
                          uint64_t v140 = *((void *)v125 + 1);
                          if (v140) {
                            *(void *)(v140 + 16) = *((void *)v125 + 2);
                          }
                        }
                        *(void *)uint64_t v125 = v194;
                        if (v194)
                        {
                          uint64_t v127 = (char **)(v194 + 8);
                          uint64_t v126 = *(void *)(v194 + 8);
                          uint64_t v128 = &v123[32 * v124];
                          *((void *)v128 + 1) = v126;
                          if (v126) {
                            *(void *)(v126 + 16) = v128 + 8;
                          }
                          *((void *)v128 + 2) = v127;
                          *uint64_t v127 = v125;
                        }
                        int v129 = *((_DWORD *)v107 + 7);
                        uint64_t v130 = v129 & 0x7FFFFFF;
                        if ((v129 & 0x40000000) != 0)
                        {
                          long long v131 = *v107;
                          uint64_t v132 = v196;
                        }
                        else
                        {
                          uint64_t v132 = v196;
                          long long v131 = (char *)v196 - 32 * v130;
                        }
                        *(void *)&v131[32 * *((unsigned int *)v107 + 17) + 8 * (v130 - 1)] = v120;
                        if (*(v195 - 8))
                        {
                          *(void *)*(v195 - 6) = *(v195 - 7);
                          uint64_t v133 = *(v195 - 7);
                          if (v133) {
                            *(void *)(v133 + 16) = *(v195 - 6);
                          }
                        }
                        *(v195 - 8) = (uint64_t)v132;
                        uint64_t v134 = *v193;
                        *(v195 - 7) = *v193;
                        if (v134) {
                          *(void *)(v134 + 16) = v195 - 7;
                        }
                        *(v195 - 6) = (uint64_t)v193;
                        uint64_t *v193 = (uint64_t)(v195 - 8);
                      }
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_279:
    uint64_t v9 = v200;
    if (v227 == v200)
    {
      (*(void (**)(uint64_t *))(v226 + 32))(v200);
      int v5 = v204;
      uint64_t v7 = v202;
      uint64_t v6 = v203;
    }
    else
    {
      int v5 = v204;
      uint64_t v7 = v202;
      uint64_t v6 = v203;
      if (v227) {
        (*(void (**)(void))(*v227 + 40))();
      }
    }
    unsigned int v8 = v201;
    if (v224 == v7)
    {
      (*(void (**)(uint64_t *))(v223 + 32))(v7);
    }
    else if (v224)
    {
      (*(void (**)(void))(*v224 + 40))();
    }
  }
  while (v4 != v3);
  return v5 & 1;
}

void sub_1CCE50ED8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE50F10(llvm::PassRegistry *a1, uint64_t a2)
{
  if (!*((unsigned char *)a1 + 28))
  {
    v4[0] = &unk_1F2617E40;
    v4[1] = a2 + 112;
    atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
    llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v4);
  }
  sub_1CB843600(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1CCE50FA4(uint64_t a1, llvm::LLVMContextImpl ****a2)
{
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2)) {
    return 0;
  }
  char v5 = *(unsigned char *)(a1 + 28);
  uint64_t v11 = 0;
  int v12 = 250;
  char v13 = v5;
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_6:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(char **)v7 != llvm::AAResultsWrapperPass::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_6;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v9 + 96))(v9, llvm::AAResultsWrapperPass::ID);
  return sub_1CCE4FC44((uint64_t)&v11, (uint64_t)a2, *(void *)(v10 + 32));
}

void sub_1CCE5106C()
{
}

BOOL sub_1CCE510AC(uint64_t *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a2 != a3)
  {
    uint64_t v8 = a3 + 24;
    uint64_t v9 = a2 + 24;
    do
    {
      if (v9) {
        uint64_t v10 = v9 - 24;
      }
      else {
        uint64_t v10 = 0;
      }
      int v11 = *(unsigned __int8 *)(v10 + 16);
      if (v9 && v11 == 84)
      {
        uint64_t v12 = *(void *)(v10 + 64);
        if ((!v12 || (*(unsigned char *)(v12 + 16) & 0x20) == 0)
          && !llvm::CallBase::hasFnAttrOnCalledFunction(v10, 37))
        {
          return 1;
        }
      }
      else if (v9 && v11 == 36 || v9 && v11 == 38)
      {
        if ((*(_WORD *)(v10 + 18) & 1) == 0) {
          return 1;
        }
      }
      else if (v11 == 34)
      {
        return 1;
      }
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9 != v8);
  }
  uint64_t v14 = *a1;

  return llvm::AAResults::canInstructionRangeModRef(v14, a2, a3, a4, 7);
}

void sub_1CCE511A8(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CCE51268(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF7200;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F26400F8;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF7208, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE511A8;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCF7208, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t llvm::NaryReassociatePass::runImpl(llvm::NaryReassociatePass *a1, llvm::Function *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8 = 0;
  *((void *)a1 + 2) = a4;
  *((void *)a1 + 3) = a5;
  *((void *)a1 + 4) = a6;
  *((void *)a1 + 5) = a7;
  uint64_t v9 = *((void *)a2 + 5) + 272;
  *(void *)a1 = a3;
  *((void *)a1 + 1) = v9;
  do
  {
    char v10 = v8;
    char v11 = llvm::NaryReassociatePass::doOneIteration(a1, a2);
    char v8 = 1;
  }
  while ((v11 & 1) != 0);
  return v10 & 1;
}

void sub_1CCE51370(unsigned int *a1, char *a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = *(void *)a1;
  if (v4 >= a1[3])
  {
    unint64_t v13 = v4 + 1;
    unint64_t v14 = v5 + 24 * v4;
    if (v5 <= (unint64_t)a2 && v14 > (unint64_t)a2)
    {
      uint64_t v16 = &a2[-v5];
      sub_1CC261F80(a1, v13);
      unint64_t v5 = *(void *)a1;
      a2 = &v16[*(void *)a1];
    }
    else
    {
      sub_1CC261F80(a1, v13);
      unint64_t v5 = *(void *)a1;
    }
  }
  unsigned int v6 = a1[2];
  uint64_t v7 = (unint64_t *)(v5 + 24 * v6);
  *uint64_t v7 = 6;
  v7[1] = 0;
  unint64_t v8 = (unint64_t)(v7 + 1);
  unint64_t v9 = *((void *)a2 + 2);
  v7[2] = v9;
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
  {
    unint64_t v11 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    v7[1] = *(void *)v11;
    *(void *)unint64_t v11 = v7;
    *uint64_t v7 = v11 | 6;
    uint64_t v12 = (uint64_t *)v7[1];
    if (v12) {
      uint64_t *v12 = *v12 & 7 | v8;
    }
  }
  a1[2] = v6 + 1;
}

int32x2_t ****llvm::NaryReassociatePass::tryReassociateGEPAtIndex(const llvm::Value **this, llvm::GetElementPtrInst *a2, unsigned int a3, llvm::Type *a4)
{
  uint64_t v8 = *((void *)a2 + 4 * a3 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4);
  int v9 = *(unsigned __int8 *)(v8 + 16);
  if (v8 && v9 == 68)
  {
    char v10 = (uint64_t *)(v8 - 32);
LABEL_4:
    uint64_t v8 = *v10;
    goto LABEL_7;
  }
  if (v8)
  {
    if (v9 == 67)
    {
      char v10 = (uint64_t *)(v8 - 32);
      if (llvm::isKnownNonNegative(*(llvm **)(v8 - 32), this[1], 0, *this, a2, this[2], (const llvm::DominatorTree *)1))goto LABEL_4; {
    }
      }
  }
LABEL_7:
  int v11 = *(unsigned __int8 *)(v8 + 16);
  if (v11 == 5)
  {
    if (*(_WORD *)(v8 + 18) == 13) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v11 != 41) {
    return 0;
  }
LABEL_13:
  unint64_t v13 = this[1];
  unsigned int v14 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v14 & 0xFE) == 0x12) {
    unsigned int v14 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v14 < 0x100) {
    goto LABEL_24;
  }
  unsigned int v15 = v14 >> 8;
  uint64_t v16 = *((unsigned int *)v13 + 60);
  uint64_t v17 = *((void *)v13 + 29);
  if (v16)
  {
    uint64_t v17 = *((void *)v13 + 29);
    unint64_t v18 = *((unsigned int *)v13 + 60);
    do
    {
      unint64_t v19 = v18 >> 1;
      uint64_t v20 = v17 + 16 * (v18 >> 1);
      unsigned int v21 = *(_DWORD *)(v20 + 8);
      uint64_t v22 = v20 + 16;
      v18 += ~(v18 >> 1);
      if (v21 < v15) {
        uint64_t v17 = v22;
      }
      else {
        unint64_t v18 = v19;
      }
    }
    while (v18);
  }
  if (v17 == *((void *)v13 + 29) + 16 * v16 || *(_DWORD *)(v17 + 8) != v15) {
LABEL_24:
  }
    uint64_t v17 = *((void *)v13 + 29);
  if (*(_DWORD *)(v17 + 4) > *(_DWORD *)(*(void *)v8 + 8) >> 8
    && llvm::computeOverflowForSignedAdd(v8, v13, (uint64_t)*this, a2, (uint64_t)this[2]) != 3)
  {
    return 0;
  }
  int v23 = *(_DWORD *)(v8 + 20);
  if ((v23 & 0x40000000) != 0) {
    uint64_t v24 = *(llvm::Value ***)(v8 - 8);
  }
  else {
    uint64_t v24 = (llvm::Value **)(v8 - 32 * (v23 & 0x7FFFFFF));
  }
  uint64_t v25 = *v24;
  uint64_t v26 = v24[4];
  BOOL result = llvm::NaryReassociatePass::tryReassociateGEPAtIndex((llvm::NaryReassociatePass *)this, a2, a3, *v24, v26, a4);
  if (!result)
  {
    if (v25 != v26) {
      return llvm::NaryReassociatePass::tryReassociateGEPAtIndex((llvm::NaryReassociatePass *)this, a2, a3, v26, v25, a4);
    }
    return 0;
  }
  return result;
}

BOOL llvm::NaryReassociatePass::requiresSignExtension(llvm::NaryReassociatePass *this, llvm::Value *a2, llvm::GetElementPtrInst *a3)
{
  uint64_t v3 = *((void *)this + 1);
  unsigned int v4 = *(_DWORD *)(*(void *)a3 + 8);
  if ((v4 & 0xFE) == 0x12) {
    unsigned int v4 = *(_DWORD *)(**(void **)(*(void *)a3 + 16) + 8);
  }
  uint64_t v5 = *(void *)(v3 + 232);
  if (v4 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v6 = v4 >> 8;
  unint64_t v7 = *(unsigned int *)(v3 + 240);
  uint64_t v8 = *(void *)(v3 + 232);
  if (v7)
  {
    uint64_t v8 = v5;
    unint64_t v9 = v7;
    do
    {
      unint64_t v10 = v9 >> 1;
      uint64_t v11 = v8 + 16 * (v9 >> 1);
      unsigned int v12 = *(_DWORD *)(v11 + 8);
      uint64_t v13 = v11 + 16;
      v9 += ~(v9 >> 1);
      if (v12 < v6) {
        uint64_t v8 = v13;
      }
      else {
        unint64_t v9 = v10;
      }
    }
    while (v9);
  }
  if (v8 == v5 + 16 * v7 || *(_DWORD *)(v8 + 8) != v6) {
LABEL_12:
  }
    uint64_t v8 = v5;
  return *(_DWORD *)(v8 + 4) > *(_DWORD *)(*(void *)a2 + 8) >> 8;
}

uint64_t llvm::NaryReassociatePass::findClosestMatchingDominator(llvm::NaryReassociatePass *this, const llvm::SCEV *a2, llvm::Instruction *a3)
{
  uint64_t v28 = 0;
  int v5 = sub_1CD4A8B14(*((void *)this + 6), *((_DWORD *)this + 16), (uint64_t)a2, &v28);
  uint64_t v6 = 0;
  uint64_t v7 = v28;
  if (v5) {
    BOOL v8 = v28 == *((void *)this + 6) + 72 * *((unsigned int *)this + 16);
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    unsigned int v9 = *(_DWORD *)(v28 + 16);
    while (v9)
    {
      uint64_t v10 = *(void *)(v7 + 8);
      uint64_t v11 = v10 + 24 * v9;
      uint64_t v6 = *(void *)(v11 - 8);
      if (v6)
      {
        if (llvm::DominatorTree::dominates(*((llvm::DominatorTree **)this + 2), *(const llvm::Value **)(v11 - 8), a3)) {
          return v6;
        }
        unsigned int v9 = *(_DWORD *)(v7 + 16);
        uint64_t v10 = *(void *)(v7 + 8);
      }
      *(_DWORD *)(v7 + 16) = --v9;
      unsigned int v12 = (void *)(v10 + 24 * v9);
      uint64_t v13 = v12[2];
      if (v13 != -8192 && v13 != -4096 && v13 != 0)
      {
        unint64_t v15 = *v12 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v15 = v12[1];
        uint64_t v16 = (unint64_t *)v12[1];
        if (v16)
        {
          *uint64_t v16 = *v16 & 7 | v15;
        }
        else
        {
          uint64_t v17 = v12[2];
          unint64_t v18 = ***(int32x2_t ****)v17;
          unint64_t v19 = (unint64_t)v18[303];
          if (v19 <= v15)
          {
            uint64_t v20 = v18[305].u32[0];
            if (v19 + 16 * v20 > v15)
            {
              unsigned int v21 = v20 - 1;
              LODWORD(v22) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
              int v23 = (uint64_t *)(v19 + 16 * v22);
              uint64_t v24 = *v23;
              if (v17 == *v23)
              {
LABEL_25:
                *int v23 = -8192;
                v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v17 = v12[2];
              }
              else
              {
                int v25 = 1;
                while (v24 != -4096)
                {
                  int v26 = v22 + v25++;
                  uint64_t v22 = v26 & v21;
                  uint64_t v24 = *(void *)(v19 + 16 * v22);
                  if (v17 == v24)
                  {
                    int v23 = (uint64_t *)(v19 + 16 * v22);
                    goto LABEL_25;
                  }
                }
              }
              *(unsigned char *)(v17 + 17) &= ~1u;
              unsigned int v9 = *(_DWORD *)(v7 + 16);
            }
          }
        }
      }
    }
    return 0;
  }
  return v6;
}

void sub_1CCE518B4()
{
}

void sub_1CCE518F0(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F26400F8;
  sub_1CD719DF8(a1 + 10);

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CCE51944(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F26400F8;
  sub_1CD719DF8(a1 + 10);
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCE519AC()
{
  return 0;
}

void sub_1CCE519B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::ScalarEvolutionWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  v6[0] = &unk_1F2617E40;
  v6[1] = v3;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v4);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
}

uint64_t sub_1CCE51ABC(llvm::FunctionPass *a1, llvm::Function *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2) & 1) == 0)
  {
    unsigned int v4 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    if (v5 == v6)
    {
LABEL_6:
      uint64_t v7 = 0;
    }
    else
    {
      while (*(char **)v5 != llvm::AssumptionCacheTracker::ID)
      {
        v5 += 16;
        if (v5 == v6) {
          goto LABEL_6;
        }
      }
      uint64_t v7 = *(void *)(v5 + 8);
    }
    BOOL v8 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::AssumptionCacheTracker::ID);
    llvm::AssumptionCacheTracker::getAssumptionCache(v8, a2);
    unsigned int v9 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v10 == v11)
    {
LABEL_11:
      uint64_t v12 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v10 != &llvm::DominatorTreeWrapperPass::ID)
      {
        v10 += 16;
        if (v10 == v11) {
          goto LABEL_11;
        }
      }
      uint64_t v12 = *(void *)(v10 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::DominatorTreeWrapperPass::ID);
    uint64_t v13 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (v14 == v15)
    {
LABEL_16:
      uint64_t v16 = 0;
    }
    else
    {
      while (*(char **)v14 != llvm::ScalarEvolutionWrapperPass::ID)
      {
        v14 += 16;
        if (v14 == v15) {
          goto LABEL_16;
        }
      }
      uint64_t v16 = *(void *)(v14 + 8);
    }
    (*(void (**)(uint64_t, char *))(*(void *)v16 + 96))(v16, llvm::ScalarEvolutionWrapperPass::ID);
    uint64_t v17 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    if (v18 == v19)
    {
LABEL_21:
      uint64_t v20 = 0;
    }
    else
    {
      while (*(char **)v18 != llvm::TargetLibraryInfoWrapperPass::ID)
      {
        v18 += 16;
        if (v18 == v19) {
          goto LABEL_21;
        }
      }
      uint64_t v20 = *(void *)(v18 + 8);
    }
    uint64_t v21 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v20 + 96))(v20, llvm::TargetLibraryInfoWrapperPass::ID);
    uint64_t v22 = v21 + 32;
    if (!*(unsigned char *)(v21 + 232))
    {
      uint64_t v24 = *((void *)a2 + 5) + 216;
      __int16 v27 = 260;
      v26[0] = v24;
      llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v26);
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      int v39 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      *(void *)&long long v25 = -1;
      *((void *)&v25 + 1) = -1;
      *(_OWORD *)__src = v25;
      long long v31 = v25;
      long long v32 = v25;
      long long v33 = v25;
      long long v34 = v25;
      long long v35 = v25;
      *(_OWORD *)int v36 = v25;
      *(void *)&v36[13] = -1;
      sub_1CC153974((uint64_t)__src, (int *)__p);
      sub_1CD4D04B8(v22, (uint64_t)__src);
      sub_1CD4CFA4C((uint64_t *)__src);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1CC1569E8(__src, v22);
  }
  return 0;
}

void sub_1CCE51FFC()
{
}

void *sub_1CCE52010(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F2640198;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCE52058(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2640198;
  a2[1] = v2;
  return result;
}

void sub_1CCE52084(uint64_t a1, llvm::Value **a2)
{
}

uint64_t sub_1CCE52094(void **a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 41)
  {
    uint64_t v4 = *(void *)(a2 - 64);
    if (v4 && (**a1 = v4, (uint64_t v5 = *(void *)(a2 - 32)) != 0))
    {
      *a1[1] = v5;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (v3 == 5)
    {
      if (*(_WORD *)(a2 + 18) == 13)
      {
        uint64_t v2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v2)
        {
          **a1 = v2;
          uint64_t v2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
          if (v2)
          {
            *a1[1] = v2;
            LOBYTE(v2) = 1;
          }
        }
      }
      else
      {
        LOBYTE(v2) = 0;
      }
    }
    return (v3 == 5) & v2;
  }
}

uint64_t sub_1CCE52138(void **a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 45)
  {
    uint64_t v4 = *(void *)(a2 - 64);
    if (v4 && (**a1 = v4, (uint64_t v5 = *(void *)(a2 - 32)) != 0))
    {
      *a1[1] = v5;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (v3 == 5)
    {
      if (*(_WORD *)(a2 + 18) == 17)
      {
        uint64_t v2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v2)
        {
          **a1 = v2;
          uint64_t v2 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
          if (v2)
          {
            *a1[1] = v2;
            LOBYTE(v2) = 1;
          }
        }
      }
      else
      {
        LOBYTE(v2) = 0;
      }
    }
    return (v3 == 5) & v2;
  }
}

void llvm::GVNExpression::Expression::~Expression(llvm::GVNExpression::Expression *this)
{
}

void sub_1CCE5220C(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeMemorySSAWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v4);
  operator new();
}

uint64_t sub_1CCE522D4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF7210;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F26403A8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)qword_1EBCF7220, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE5220C;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(qword_1EBCF7220, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCE52384(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a5;
  a1[3] = a6;
  a1[4] = a7;
  a1[5] = 0;
  a1[6] = a4;
  a1[7] = a8;
  operator new();
}

void sub_1CCE52648(uint64_t a1)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  LODWORD(v115) = dword_1EBCF7214;
  atomic_ullong v2 = llvm::DebugCounter::instance((llvm::DebugCounter *)a1);
  int v3 = (llvm::DebugCounter *)sub_1CBF64FEC(v2, &v115);
  if (*((unsigned char *)v3 + 32))
  {
    int v4 = dword_1EBCF7214;
    atomic_ullong v5 = llvm::DebugCounter::instance(v3);
    *(void *)(a1 + 2600) = *((void *)sub_1CD77D188(*(void *)v5, *(_DWORD *)(v5 + 16), v4) + 1);
  }
  *(_DWORD *)(a1 + 1312) = *(void *)(*(void *)a1 + 96);
  *(void *)(a1 + 40) = llvm::MemorySSA::getWalkerImpl(*(llvm::MemorySSA **)(a1 + 32));
  *(void *)(a1 + 152) += 24;
  uint64_t v6 = *(void *)(a1 + 72);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 24 > *(void *)(a1 + 80) - v6)
  {
    unsigned int v87 = *(_DWORD *)(a1 + 96) >> 7;
    if (v87 >= 0x1E) {
      LOBYTE(v87) = 30;
    }
    uint64_t v88 = 4096 << v87;
    uint64_t v7 = operator new(4096 << v87, (std::align_val_t)8uLL);
    unsigned int v89 = *(_DWORD *)(a1 + 96);
    if (v89 >= *(_DWORD *)(a1 + 100)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 88) + 8 * v89) = v7;
    ++*(_DWORD *)(a1 + 96);
    *(void *)(a1 + 80) = (char *)v7 + v88;
  }
  else
  {
    uint64_t v7 = (void *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)(a1 + 72) = v7 + 3;
  v7[1] = 0xFFFFFFFD00000003;
  v7[2] = 0;
  *uint64_t v7 = &unk_1F2640448;
  *(void *)(a1 + 1864) = v7;
  sub_1CD77D124(a1 + 2232);
  uint64_t v115 = *(void **)a1;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  unsigned int v93 = 0;
  sub_1CC86D39C((char **)&v93, (uint64_t)&v115);
  unsigned int v9 = (char *)v93;
  BOOL v8 = v94;
  if (v94 != v93)
  {
    int v10 = 0;
    do
    {
      uint64_t v12 = *((void *)v8 - 1);
      v8 -= 8;
      uint64_t v11 = v12;
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = *(void *)(v13 + 24);
      uint64_t v15 = *(unsigned int *)(v13 + 40);
      if (v15)
      {
        LODWORD(v16) = ((v11 >> 4) ^ (v11 >> 9)) & (v15 - 1);
        uint64_t v17 = (uint64_t *)(v14 + 16 * v16);
        uint64_t v18 = *v17;
        if (v11 != *v17)
        {
          int v19 = 1;
          do
          {
            if (v18 == -4096) {
              goto LABEL_13;
            }
            int v20 = v16 + v19++;
            uint64_t v16 = v20 & (v15 - 1);
            uint64_t v18 = *(void *)(v14 + 16 * v16);
          }
          while (v11 != v18);
          uint64_t v17 = (uint64_t *)(v14 + 16 * v16);
        }
      }
      else
      {
LABEL_13:
        uint64_t v17 = (uint64_t *)(v14 + 16 * v15);
      }
      if (v17 == (uint64_t *)(v14 + 16 * v15)) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = (void *)v17[1];
      }
      uint64_t v115 = v21;
      *((_DWORD *)sub_1CD40EB18(a1 + 1320, (uint64_t *)&v115) + 2) = ++v10;
    }
    while (v8 != v9);
    int v23 = (char *)v93;
    uint64_t v22 = v94;
    if (v94 != v93)
    {
      do
      {
        uint64_t v25 = *((void *)v22 - 1);
        v22 -= 8;
        uint64_t v24 = v25;
        uint64_t v26 = *(void *)(a1 + 8);
        uint64_t v27 = *(void *)(v26 + 24);
        uint64_t v28 = *(unsigned int *)(v26 + 40);
        if (v28)
        {
          LODWORD(v29) = ((v24 >> 4) ^ (v24 >> 9)) & (v28 - 1);
          uint64_t v30 = (uint64_t *)(v27 + 16 * v29);
          uint64_t v31 = *v30;
          if (v24 != *v30)
          {
            int v32 = 1;
            do
            {
              if (v31 == -4096) {
                goto LABEL_25;
              }
              int v33 = v29 + v32++;
              uint64_t v29 = v33 & (v28 - 1);
              uint64_t v31 = *(void *)(v27 + 16 * v29);
            }
            while (v24 != v31);
            uint64_t v30 = (uint64_t *)(v27 + 16 * v29);
          }
        }
        else
        {
LABEL_25:
          uint64_t v30 = (uint64_t *)(v27 + 16 * v28);
        }
        if (v30 == (uint64_t *)(v27 + 16 * v28)) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = v30[1];
        }
        unint64_t v35 = *(unsigned int *)(v34 + 32);
        if (v35 >= 2)
        {
          uint64_t v36 = *(void *)(v34 + 24);
          uint64_t v115 = (void *)a1;
          sub_1CCE5A628(v36, (uint64_t *)(v36 + 8 * v35), &v115, 126 - 2 * __clz(v35), 1);
        }
      }
      while (v22 != v23);
    }
  }
  __base[0] = *(void **)(*(void *)(a1 + 8) + 48);
  sub_1CC076464((uint64_t *)__base, (uint64_t)&v115);
  uint64_t v37 = v103;
  __base[0] = v103;
  uint64_t v38 = __src;
  if (__src == v115)
  {
    __base[1] = v103;
    int v39 = __src;
  }
  else
  {
    unsigned int v85 = v117;
    uint64_t v37 = malloc_type_malloc(8 * v117, 0x4065EBACuLL);
    if (!v37)
    {
      if (v85) {
        goto LABEL_154;
      }
      uint64_t v37 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v37) {
        goto LABEL_154;
      }
    }
    __base[1] = v37;
    int v39 = v115;
    uint64_t v38 = __src;
  }
  unsigned int v40 = v118;
  unsigned int v100 = v117;
  if (v38 == v39) {
    unsigned int v41 = v118;
  }
  else {
    unsigned int v41 = v117;
  }
  if (v41)
  {
    memmove(v37, v38, 8 * v41);
    unsigned int v40 = v118;
  }
  unsigned int v101 = v40;
  int v102 = v119;
  uint64_t v106 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  sub_1CBF340A8(&v104, v120, v121, 0xAAAAAAAAAAAAAAABLL * ((v121 - (unsigned char *)v120) >> 3));
  long long v42 = v111;
  v107[0] = v111;
  uint64_t v43 = v123;
  if (v123 == v122)
  {
    v107[1] = v111;
    uint64_t v44 = v123;
    goto LABEL_41;
  }
  unsigned int v86 = v124;
  long long v42 = malloc_type_malloc(8 * v124, 0x4065EBACuLL);
  if (v42 || !v86 && (long long v42 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v107[1] = v42;
    uint64_t v44 = v122;
    uint64_t v43 = v123;
LABEL_41:
    unsigned int v45 = v125;
    unsigned int v108 = v124;
    if (v43 == v44) {
      unsigned int v46 = v125;
    }
    else {
      unsigned int v46 = v124;
    }
    if (v46)
    {
      memmove(v42, v43, 8 * v46);
      unsigned int v45 = v125;
    }
    unsigned int v109 = v45;
    int v110 = v126;
    uint64_t v114 = 0;
    std::string __p = 0;
    uint64_t v113 = 0;
    sub_1CBF340A8(&__p, v127, v128, 0xAAAAAAAAAAAAAAABLL * ((v128 - (unsigned char *)v127) >> 3));
    uint64_t v92 = a1 + 2208;
    int v91 = (_DWORD *)(a1 + 2524);
    int v90 = (unsigned int *)(a1 + 2520);
    uint64_t v47 = 1;
LABEL_47:
    if (v105 - (unsigned char *)v104 == v113 - (unsigned char *)__p)
    {
      if (v104 == v105)
      {
LABEL_123:
        if (__p)
        {
          uint64_t v113 = __p;
          operator delete(__p);
        }
        if (v107[1] != v107[0]) {
          free(v107[1]);
        }
        if (v104)
        {
          uint64_t v105 = (char *)v104;
          operator delete(v104);
        }
        if (__base[1] != __base[0]) {
          free(__base[1]);
        }
        if (v127)
        {
          uint64_t v128 = v127;
          operator delete(v127);
        }
        if (v123 != v122) {
          free(v123);
        }
        if (v120)
        {
          int v121 = v120;
          operator delete(v120);
        }
        if (__src != v115) {
          free(__src);
        }
        *(_DWORD *)(a1 + 1376) = 0;
        sub_1CCE5B860();
      }
      uint64_t v48 = (char *)__p + 8;
      uint64_t v49 = (char *)v104 + 8;
      while (1)
      {
        int v50 = v49 - 8;
        if (*((void *)v49 - 1) != *((void *)v48 - 1)) {
          break;
        }
        int v51 = v48[8];
        if (v49[8]) {
          BOOL v52 = v51 == 0;
        }
        else {
          BOOL v52 = 1;
        }
        if (v52)
        {
          if ((v49[8] == 0) == (v51 != 0)) {
            break;
          }
        }
        else if (*(void *)v49 != *(void *)v48)
        {
          break;
        }
        v48 += 24;
        v49 += 24;
        if (v50 + 24 == v105) {
          goto LABEL_123;
        }
      }
    }
    uint64_t v53 = **((void **)v105 - 3);
    uint64_t v98 = v53;
    uint64_t v54 = *(void *)(a1 + 32);
    int v55 = *(_DWORD *)(v54 + 40);
    uint64_t v56 = v47;
    if (v55)
    {
      uint64_t v57 = *(void *)(v54 + 24);
      unsigned int v58 = v55 - 1;
      uint64_t v59 = (v55 - 1) & ((v53 >> 4) ^ (v53 >> 9));
      uint64_t v60 = *(void *)(v57 + 16 * v59);
      if (v53 == v60)
      {
LABEL_66:
        uint64_t v63 = v57 + 16 * v59;
        uint64_t v64 = *(void *)(v63 + 8);
        uint64_t v56 = v47;
        if (v64)
        {
          uint64_t v96 = *(void *)(v63 + 8);
          *((_DWORD *)sub_1CC220A0C(v92, &v96) + 2) = v47;
          uint64_t v65 = *(unsigned int *)(a1 + 2240);
          if (v65 >= *(_DWORD *)(a1 + 2244)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 2232) + 8 * v65) = v64;
          uint64_t v56 = (v47 + 1);
          *(_DWORD *)(a1 + 2240) = v65 + 1;
        }
      }
      else
      {
        int v61 = 1;
        while (v60 != -4096)
        {
          int v62 = v59 + v61++;
          uint64_t v59 = v62 & v58;
          uint64_t v60 = *(void *)(v57 + 16 * v59);
          if (v53 == v60) {
            goto LABEL_66;
          }
        }
        uint64_t v56 = v47;
      }
    }
    for (uint64_t i = *(void *)(v53 + 48); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == v53 + 40)
      {
        uint64_t v96 = v53;
        unint64_t v97 = v47 | (unint64_t)(v56 << 32);
        sub_1CD77D520((uint64_t)&v98, a1 + 2160, &v96, &v97);
        sub_1CBFE66A8((llvm::SmallPtrSetImplBase *)__base);
        uint64_t v47 = v56;
        goto LABEL_47;
      }
      if (i) {
        uint64_t v67 = i - 24;
      }
      else {
        uint64_t v67 = 0;
      }
      if (*(void *)(v67 + 8) || !llvm::wouldInstructionBeTriviallyDead(v67, *(uint64_t **)(a1 + 16)))
      {
        if (*(unsigned char *)(v67 + 16) == 83)
        {
          uint64_t v75 = sub_1CD77D208(a1 + 1696, &v98);
          sub_1CBF7C6A8(v75 + 1, v56);
        }
        uint64_t v96 = v67;
        *((_DWORD *)sub_1CC220A0C(v92, &v96) + 2) = v56;
        uint64_t v68 = *(unsigned int *)(a1 + 2240);
        if (v68 >= *(_DWORD *)(a1 + 2244)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 2232) + 8 * v68) = v67;
        *(_DWORD *)(a1 + 2240) = v68 + 1;
        uint64_t v56 = (v56 + 1);
        continue;
      }
      uint64_t v96 = v67;
      *((_DWORD *)sub_1CC220A0C(v92, &v96) + 2) = 0;
      uint64_t v69 = *(void *)(a1 + 2512);
      uint64_t v70 = *(unsigned int *)(a1 + 2524);
      if (v69 == *(void *)(a1 + 2504))
      {
        if (v70)
        {
          uint64_t v71 = 0;
          uint64_t v72 = 8 * v70;
          unsigned int v73 = *(uint64_t **)(a1 + 2512);
          do
          {
            if (*v73 == v67) {
              goto LABEL_80;
            }
            if (*v73 == -2) {
              uint64_t v71 = v73;
            }
            ++v73;
            v72 -= 8;
          }
          while (v72);
          if (v71)
          {
            uint64_t *v71 = v67;
            --*(_DWORD *)(a1 + 2528);
            continue;
          }
        }
        unsigned int v74 = *v90;
        if (v70 < *v90)
        {
          *int v91 = v70 + 1;
          *(void *)(v69 + 8 * v70) = v67;
          continue;
        }
      }
      else
      {
        unsigned int v74 = *v90;
      }
      if (3 * v74 <= 4 * ((int)v70 - *(_DWORD *)(a1 + 2528)))
      {
        if (v74 >= 0x40) {
          v74 *= 2;
        }
        else {
          unsigned int v74 = 128;
        }
      }
      else if (v74 - v70 >= v74 >> 3)
      {
        goto LABEL_95;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 2504), v74);
      unsigned int v74 = *(_DWORD *)(a1 + 2520);
      uint64_t v69 = *(void *)(a1 + 2512);
LABEL_95:
      unsigned int v76 = v74 - 1;
      unsigned int v77 = (v74 - 1) & ((v67 >> 4) ^ (v67 >> 9));
      unsigned int v78 = (uint64_t *)(v69 + 8 * v77);
      uint64_t v79 = *v78;
      if (*v78 == -1)
      {
        uint64_t v80 = 0;
LABEL_107:
        if (v80) {
          uint64_t v84 = v80;
        }
        else {
          uint64_t v84 = v78;
        }
        if (*v84 != v67)
        {
          if (*v84 == -2) {
            --*(_DWORD *)(a1 + 2528);
          }
          else {
            ++*v91;
          }
          *uint64_t v84 = v67;
        }
      }
      else
      {
        uint64_t v80 = 0;
        int v81 = 1;
        while (v79 != v67)
        {
          if (v80) {
            BOOL v82 = 0;
          }
          else {
            BOOL v82 = v79 == -2;
          }
          if (v82) {
            uint64_t v80 = v78;
          }
          unsigned int v83 = v77 + v81++;
          unsigned int v77 = v83 & v76;
          unsigned int v78 = (uint64_t *)(v69 + 8 * (v83 & v76));
          uint64_t v79 = *v78;
          if (*v78 == -1) {
            goto LABEL_107;
          }
        }
      }
LABEL_80:
      ;
    }
  }
LABEL_154:
  llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
}

uint64_t sub_1CCE59C44(uint64_t a1)
{
  atomic_ullong v2 = *(void **)(a1 + 2512);
  if (v2 != *(void **)(a1 + 2504)) {
    free(v2);
  }
  int v3 = *(void **)(a1 + 2232);
  if (v3 != (void *)(a1 + 2248)) {
    free(v3);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 2208), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 2184), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 2160), 8);
  int v4 = *(void **)(a1 + 2088);
  if (v4 != (void *)(a1 + 2104)) {
    free(v4);
  }
  atomic_ullong v5 = *(void **)(a1 + 2000);
  if (v5 != *(void **)(a1 + 1992)) {
    free(v5);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1968), 8);
  uint64_t v6 = *(void **)(a1 + 1880);
  if (v6 != *(void **)(a1 + 1872)) {
    free(v6);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1840), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1816), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1792), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1768), 8);
  sub_1CD77E78C((unsigned int *)(a1 + 1744));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1744), 8);
  sub_1CD77E78C((unsigned int *)(a1 + 1720));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1720), 8);
  sub_1CD77EB14((_DWORD *)(a1 + 1696));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1696), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1672), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1648), 8);
  sub_1CD77E8A8((unsigned int *)(a1 + 1624));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1624), 8);
  sub_1CD77E78C((unsigned int *)(a1 + 1600));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1600), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1576), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1552), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1528), 8);
  uint64_t v7 = *(void **)(a1 + 1440);
  if (v7 != *(void **)(a1 + 1432)) {
    free(v7);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1408), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1384), 8);
  BOOL v8 = *(void **)(a1 + 1352);
  if (v8)
  {
    *(void *)(a1 + 1360) = v8;
    operator delete(v8);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1320), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1240), 8);
  sub_1CD77EBB4((char **)(a1 + 456));
  unsigned int v9 = *(void **)(a1 + 376);
  if (v9 != (void *)(a1 + 392)) {
    free(v9);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 352), 8);
  int v10 = *(void **)(a1 + 264);
  if (v10 != *(void **)(a1 + 256)) {
    free(v10);
  }
  uint64_t v11 = *(void **)(a1 + 168);
  if (v11 != (void *)(a1 + 184)) {
    free(v11);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 96);
  if (v12)
  {
    uint64_t v13 = *(uint64_t **)(a1 + 88);
    uint64_t v14 = 8 * v12;
    do
    {
      uint64_t v15 = *v13++;
      MEMORY[0x1D25D9CD0](v15, 8);
      v14 -= 8;
    }
    while (v14);
  }
  uint64_t v16 = *(uint64_t **)(a1 + 136);
  uint64_t v17 = *(unsigned int *)(a1 + 144);
  if (v17)
  {
    uint64_t v21 = 16 * v17;
    do
    {
      uint64_t v22 = *v16;
      v16 += 2;
      MEMORY[0x1D25D9CD0](v22, 8);
      v21 -= 16;
    }
    while (v21);
    uint64_t v16 = *(uint64_t **)(a1 + 136);
  }
  if (v16 != (uint64_t *)(a1 + 152)) {
    free(v16);
  }
  uint64_t v18 = *(void **)(a1 + 88);
  if (v18 != (void *)(a1 + 104)) {
    free(v18);
  }
  int v19 = *(llvm::PredicateInfo **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v19)
  {
    llvm::PredicateInfo::~PredicateInfo(v19);
    MEMORY[0x1D25D9CE0]();
  }
  return a1;
}

void sub_1CCE59F18()
{
}

void sub_1CCE59F58(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE59F90(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1CCE5A050(llvm::FunctionPass *a1, llvm::Function *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2) & 1) == 0)
  {
    int v4 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    if (v5 == v6)
    {
LABEL_6:
      uint64_t v7 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v5 != &llvm::DominatorTreeWrapperPass::ID)
      {
        v5 += 16;
        if (v5 == v6) {
          goto LABEL_6;
        }
      }
      uint64_t v7 = *(void *)(v5 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::DominatorTreeWrapperPass::ID);
    BOOL v8 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (v9 == v10)
    {
LABEL_11:
      uint64_t v11 = 0;
    }
    else
    {
      while (*(char **)v9 != llvm::AssumptionCacheTracker::ID)
      {
        v9 += 16;
        if (v9 == v10) {
          goto LABEL_11;
        }
      }
      uint64_t v11 = *(void *)(v9 + 8);
    }
    uint64_t v12 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v11 + 96))(v11, llvm::AssumptionCacheTracker::ID);
    llvm::AssumptionCacheTracker::getAssumptionCache(v12, a2);
    uint64_t v13 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (v14 == v15)
    {
LABEL_16:
      uint64_t v16 = 0;
    }
    else
    {
      while (*(char **)v14 != llvm::TargetLibraryInfoWrapperPass::ID)
      {
        v14 += 16;
        if (v14 == v15) {
          goto LABEL_16;
        }
      }
      uint64_t v16 = *(void *)(v14 + 8);
    }
    uint64_t v17 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v16 + 96))(v16, llvm::TargetLibraryInfoWrapperPass::ID);
    uint64_t v18 = v17 + 32;
    if (!*(unsigned char *)(v17 + 232))
    {
      uint64_t v20 = *((void *)a2 + 5) + 216;
      __int16 v23 = 260;
      v22[0] = v20;
      llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v22);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      int v35 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      *(void *)&long long v21 = -1;
      *((void *)&v21 + 1) = -1;
      *(_OWORD *)__src = v21;
      long long v27 = v21;
      long long v28 = v21;
      long long v29 = v21;
      long long v30 = v21;
      long long v31 = v21;
      *(_OWORD *)int v32 = v21;
      *(void *)&v32[13] = -1;
      sub_1CC153974((uint64_t)__src, (int *)__p);
      sub_1CD4D04B8(v18, (uint64_t)__src);
      sub_1CD4CFA4C((uint64_t *)__src);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1CC1569E8(__src, v18);
  }
  return 0;
}

_DWORD *sub_1CCE5A58C(_DWORD *result, int a2)
{
  atomic_ullong v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    BOOL result = operator new(56 * v4, (std::align_val_t)8uLL);
    *(void *)atomic_ullong v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 56 * v5;
      do
      {
        *(void *)BOOL result = -8;
        result += 14;
        v6 -= 56;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)BOOL result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1CCE5A628(uint64_t result, uint64_t *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
  while (2)
  {
    uint64_t v137 = a2 - 1;
    uint64_t v11 = v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v12 = v11;
          uint64_t v13 = (char *)a2 - (char *)v11;
          uint64_t v14 = a2 - v11;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v133 = *(a2 - 1);
                uint64_t v144 = *v12;
                uint64_t v145 = v133;
                uint64_t v134 = *a3 + 1320;
                unsigned int v135 = *((_DWORD *)sub_1CD40EB18(v134, &v145) + 2);
                BOOL result = (uint64_t)sub_1CD40EB18(v134, &v144);
                if (v135 < *(_DWORD *)(result + 8))
                {
                  uint64_t v136 = *v12;
                  uint64_t *v12 = *(a2 - 1);
                  *(a2 - 1) = v136;
                }
                break;
              case 3:
                BOOL result = (uint64_t)sub_1CCE5B318(v12, v12 + 1, v137, a3);
                break;
              case 4:
                BOOL result = (uint64_t)sub_1CCE5B720(v12, v12 + 1, v12 + 2, v137, a3);
                break;
              case 5:
                BOOL result = (uint64_t)sub_1CCE5B188(v12, v12 + 1, v12 + 2, v12 + 3, v137, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          uint64_t v143 = v12;
          if (v13 <= 191)
          {
            uint64_t v65 = v12 + 1;
            BOOL v67 = v12 == a2 || v65 == a2;
            if (a5)
            {
              if (!v67)
              {
                uint64_t v68 = 0;
                uint64_t v69 = v12;
                do
                {
                  uint64_t v71 = *v69;
                  uint64_t v70 = v69[1];
                  uint64_t v69 = v65;
                  uint64_t v144 = v71;
                  uint64_t v145 = v70;
                  uint64_t v72 = *a3 + 1320;
                  unsigned int v73 = *((_DWORD *)sub_1CD40EB18(v72, &v145) + 2);
                  BOOL result = (uint64_t)sub_1CD40EB18(v72, &v144);
                  if (v73 < *(_DWORD *)(result + 8))
                  {
                    uint64_t v74 = *v69;
                    uint64_t v75 = v68;
                    while (1)
                    {
                      *(uint64_t *)((char *)v12 + v75 + 8) = *(uint64_t *)((char *)v12 + v75);
                      if (!v75) {
                        break;
                      }
                      uint64_t v144 = *(uint64_t *)((char *)v12 + v75 - 8);
                      uint64_t v145 = v74;
                      uint64_t v76 = *a3 + 1320;
                      unsigned int v77 = a2;
                      unsigned int v78 = *((_DWORD *)sub_1CD40EB18(v76, &v145) + 2);
                      BOOL result = (uint64_t)sub_1CD40EB18(v76, &v144);
                      v75 -= 8;
                      BOOL v5 = v78 >= *(_DWORD *)(result + 8);
                      a2 = v77;
                      uint64_t v12 = v143;
                      if (v5)
                      {
                        uint64_t v79 = (uint64_t *)((char *)v143 + v75 + 8);
                        goto LABEL_78;
                      }
                    }
                    uint64_t v79 = v12;
LABEL_78:
                    *uint64_t v79 = v74;
                  }
                  uint64_t v65 = v69 + 1;
                  v68 += 8;
                }
                while (v69 + 1 != a2);
              }
            }
            else if (!v67)
            {
              do
              {
                uint64_t v124 = *v12;
                uint64_t v123 = v12[1];
                uint64_t v12 = v65;
                uint64_t v144 = v124;
                uint64_t v145 = v123;
                uint64_t v125 = *a3 + 1320;
                unsigned int v126 = *((_DWORD *)sub_1CD40EB18(v125, &v145) + 2);
                BOOL result = (uint64_t)sub_1CD40EB18(v125, &v144);
                if (v126 < *(_DWORD *)(result + 8))
                {
                  uint64_t v127 = *v12;
                  uint64_t v128 = v12;
                  do
                  {
                    uint64_t v129 = v128;
                    uint64_t v130 = *--v128;
                    *uint64_t v129 = v130;
                    uint64_t v144 = *(v129 - 2);
                    uint64_t v145 = v127;
                    uint64_t v131 = *a3 + 1320;
                    unsigned int v132 = *((_DWORD *)sub_1CD40EB18(v131, &v145) + 2);
                    BOOL result = (uint64_t)sub_1CD40EB18(v131, &v144);
                  }
                  while (v132 < *(_DWORD *)(result + 8));
                  uint64_t *v128 = v127;
                }
                uint64_t v65 = v12 + 1;
              }
              while (v12 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v80 = (unint64_t)(v14 - 2) >> 1;
              int64_t v81 = v80;
              uint64_t v138 = a2;
              do
              {
                int64_t v82 = v81;
                if (v80 >= v81)
                {
                  uint64_t v83 = (2 * v81) | 1;
                  uint64_t v84 = &v143[v83];
                  if (2 * v81 + 2 < v14)
                  {
                    uint64_t v85 = *v84;
                    uint64_t v144 = v84[1];
                    uint64_t v145 = v85;
                    uint64_t v86 = *a3 + 1320;
                    unsigned int v87 = *((_DWORD *)sub_1CD40EB18(v86, &v145) + 2);
                    if (v87 < *((_DWORD *)sub_1CD40EB18(v86, &v144) + 2))
                    {
                      ++v84;
                      uint64_t v83 = 2 * v82 + 2;
                    }
                  }
                  uint64_t v88 = &v143[v82];
                  unsigned int v89 = v84;
                  uint64_t v90 = *v84;
                  uint64_t v144 = *v88;
                  uint64_t v145 = v90;
                  uint64_t v91 = *a3 + 1320;
                  unsigned int v92 = *((_DWORD *)sub_1CD40EB18(v91, &v145) + 2);
                  BOOL result = (uint64_t)sub_1CD40EB18(v91, &v144);
                  BOOL v5 = v92 >= *(_DWORD *)(result + 8);
                  a2 = v138;
                  if (v5)
                  {
                    uint64_t v141 = *v88;
                    do
                    {
                      unsigned int v93 = v89;
                      uint64_t *v88 = *v89;
                      if (v80 < v83) {
                        break;
                      }
                      uint64_t v94 = 2 * v83;
                      uint64_t v83 = (2 * v83) | 1;
                      unsigned int v89 = &v143[v83];
                      uint64_t v95 = v94 + 2;
                      if (v94 + 2 < v14)
                      {
                        uint64_t v96 = *v89;
                        uint64_t v144 = v89[1];
                        uint64_t v145 = v96;
                        uint64_t v97 = *a3 + 1320;
                        unsigned int v98 = *((_DWORD *)sub_1CD40EB18(v97, &v145) + 2);
                        if (v98 < *((_DWORD *)sub_1CD40EB18(v97, &v144) + 2))
                        {
                          ++v89;
                          uint64_t v83 = v95;
                        }
                      }
                      uint64_t v99 = *v89;
                      uint64_t v144 = v141;
                      uint64_t v145 = v99;
                      uint64_t v100 = *a3 + 1320;
                      unsigned int v101 = *((_DWORD *)sub_1CD40EB18(v100, &v145) + 2);
                      BOOL result = (uint64_t)sub_1CD40EB18(v100, &v144);
                      uint64_t v88 = v93;
                      BOOL v5 = v101 >= *(_DWORD *)(result + 8);
                      a2 = v138;
                    }
                    while (v5);
                    *unsigned int v93 = v141;
                  }
                }
                int64_t v81 = v82 - 1;
              }
              while (v82);
              int v102 = v143;
              do
              {
                uint64_t v103 = 0;
                uint64_t v139 = a2;
                uint64_t v142 = *v102;
                uint64_t v104 = v102;
                do
                {
                  uint64_t v105 = &v104[v103 + 1];
                  uint64_t v106 = (2 * v103) | 1;
                  uint64_t v107 = 2 * v103 + 2;
                  if (v107 < v14)
                  {
                    uint64_t v108 = *v105;
                    uint64_t v144 = v105[1];
                    uint64_t v145 = v108;
                    uint64_t v109 = *a3 + 1320;
                    unsigned int v110 = *((_DWORD *)sub_1CD40EB18(v109, &v145) + 2);
                    BOOL result = (uint64_t)sub_1CD40EB18(v109, &v144);
                    int v102 = v143;
                    if (v110 < *(_DWORD *)(result + 8))
                    {
                      ++v105;
                      uint64_t v106 = v107;
                    }
                  }
                  *uint64_t v104 = *v105;
                  uint64_t v104 = v105;
                  uint64_t v103 = v106;
                }
                while (v106 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                a2 = v139 - 1;
                if (v105 == v139 - 1)
                {
                  *uint64_t v105 = v142;
                }
                else
                {
                  *uint64_t v105 = *a2;
                  *a2 = v142;
                  uint64_t v111 = (char *)v105 - (char *)v102 + 8;
                  if (v111 >= 9)
                  {
                    unint64_t v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                    uint64_t v113 = &v102[v112];
                    uint64_t v114 = *v113;
                    uint64_t v144 = *v105;
                    uint64_t v145 = v114;
                    uint64_t v115 = *a3 + 1320;
                    unsigned int v116 = *((_DWORD *)sub_1CD40EB18(v115, &v145) + 2);
                    BOOL result = (uint64_t)sub_1CD40EB18(v115, &v144);
                    int v102 = v143;
                    if (v116 < *(_DWORD *)(result + 8))
                    {
                      uint64_t v117 = *v105;
                      do
                      {
                        unsigned int v118 = v113;
                        *uint64_t v105 = *v113;
                        if (!v112) {
                          break;
                        }
                        unint64_t v112 = (v112 - 1) >> 1;
                        uint64_t v113 = &v102[v112];
                        uint64_t v119 = *v113;
                        uint64_t v144 = v117;
                        uint64_t v145 = v119;
                        uint64_t v120 = *a3 + 1320;
                        unsigned int v121 = *((_DWORD *)sub_1CD40EB18(v120, &v145) + 2);
                        BOOL result = (uint64_t)sub_1CD40EB18(v120, &v144);
                        uint64_t v105 = v118;
                        int v102 = v143;
                      }
                      while (v121 < *(_DWORD *)(result + 8));
                      *unsigned int v118 = v117;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1CCE5B318(v16, v12, v137, a3);
          }
          else
          {
            sub_1CCE5B318(v12, v16, v137, a3);
            sub_1CCE5B318(v12 + 1, v16 - 1, a2 - 2, a3);
            sub_1CCE5B318(v12 + 2, &v12[v15 + 1], a2 - 3, a3);
            sub_1CCE5B318(v16 - 1, v16, &v12[v15 + 1], a3);
            uint64_t v17 = *v12;
            uint64_t *v12 = *v16;
            *uint64_t v16 = v17;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v41 = *(v12 - 1);
          uint64_t v144 = *v12;
          uint64_t v145 = v41;
          uint64_t v42 = *a3 + 1320;
          unsigned int v43 = *((_DWORD *)sub_1CD40EB18(v42, &v145) + 2);
          if (v43 < *((_DWORD *)sub_1CD40EB18(v42, &v144) + 2)) {
            break;
          }
          uint64_t v44 = *v12;
          uint64_t v144 = *v137;
          uint64_t v145 = v44;
          uint64_t v45 = *a3 + 1320;
          unsigned int v46 = *((_DWORD *)sub_1CD40EB18(v45, &v145) + 2);
          BOOL result = (uint64_t)sub_1CD40EB18(v45, &v144);
          if (v46 >= *(_DWORD *)(result + 8))
          {
            int v62 = v12 + 1;
            do
            {
              uint64_t v11 = v62;
              if (v62 >= a2) {
                break;
              }
              ++v62;
              uint64_t v144 = *v11;
              uint64_t v145 = v44;
              uint64_t v63 = *a3 + 1320;
              unsigned int v64 = *((_DWORD *)sub_1CD40EB18(v63, &v145) + 2);
              BOOL result = (uint64_t)sub_1CD40EB18(v63, &v144);
            }
            while (v64 >= *(_DWORD *)(result + 8));
          }
          else
          {
            uint64_t v11 = v12;
            do
            {
              uint64_t v47 = v11[1];
              ++v11;
              uint64_t v144 = v47;
              uint64_t v145 = v44;
              uint64_t v48 = *a3 + 1320;
              unsigned int v49 = *((_DWORD *)sub_1CD40EB18(v48, &v145) + 2);
              BOOL result = (uint64_t)sub_1CD40EB18(v48, &v144);
            }
            while (v49 >= *(_DWORD *)(result + 8));
          }
          int v50 = a2;
          if (v11 < a2)
          {
            int v50 = a2;
            do
            {
              uint64_t v51 = *--v50;
              uint64_t v144 = v51;
              uint64_t v145 = v44;
              uint64_t v52 = *a3 + 1320;
              unsigned int v53 = *((_DWORD *)sub_1CD40EB18(v52, &v145) + 2);
              BOOL result = (uint64_t)sub_1CD40EB18(v52, &v144);
            }
            while (v53 < *(_DWORD *)(result + 8));
          }
          while (v11 < v50)
          {
            uint64_t v54 = *v11;
            *uint64_t v11 = *v50;
            *int v50 = v54;
            do
            {
              uint64_t v55 = v11[1];
              ++v11;
              uint64_t v144 = v55;
              uint64_t v145 = v44;
              uint64_t v56 = *a3 + 1320;
              unsigned int v57 = *((_DWORD *)sub_1CD40EB18(v56, &v145) + 2);
            }
            while (v57 >= *((_DWORD *)sub_1CD40EB18(v56, &v144) + 2));
            do
            {
              uint64_t v58 = *--v50;
              uint64_t v144 = v58;
              uint64_t v145 = v44;
              uint64_t v59 = *a3 + 1320;
              unsigned int v60 = *((_DWORD *)sub_1CD40EB18(v59, &v145) + 2);
              BOOL result = (uint64_t)sub_1CD40EB18(v59, &v144);
            }
            while (v60 < *(_DWORD *)(result + 8));
          }
          int v61 = v11 - 1;
          BOOL v5 = v11 - 1 >= v143;
          BOOL v6 = v11 - 1 == v143;
          if (v11 - 1 != v143) {
            *uint64_t v143 = *v61;
          }
          a5 = 0;
          *int v61 = v44;
        }
        uint64_t v18 = 0;
        uint64_t v19 = *v12;
        do
        {
          uint64_t v20 = v12[v18 + 1];
          uint64_t v144 = v19;
          uint64_t v145 = v20;
          uint64_t v21 = *a3 + 1320;
          unsigned int v22 = *((_DWORD *)sub_1CD40EB18(v21, &v145) + 2);
          ++v18;
        }
        while (v22 < *((_DWORD *)sub_1CD40EB18(v21, &v144) + 2));
        __int16 v23 = &v12[v18];
        uint64_t v24 = a2;
        if (v18 == 1)
        {
          uint64_t v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            uint64_t v38 = *--v24;
            uint64_t v144 = v19;
            uint64_t v145 = v38;
            uint64_t v39 = *a3 + 1320;
            unsigned int v40 = *((_DWORD *)sub_1CD40EB18(v39, &v145) + 2);
          }
          while (v40 >= *((_DWORD *)sub_1CD40EB18(v39, &v144) + 2));
        }
        else
        {
          do
          {
            uint64_t v25 = *--v24;
            uint64_t v144 = v19;
            uint64_t v145 = v25;
            uint64_t v26 = *a3 + 1320;
            unsigned int v27 = *((_DWORD *)sub_1CD40EB18(v26, &v145) + 2);
          }
          while (v27 >= *((_DWORD *)sub_1CD40EB18(v26, &v144) + 2));
        }
        uint64_t v11 = v23;
        if (v23 < v24)
        {
          long long v28 = v24;
          do
          {
            uint64_t v29 = *v11;
            *uint64_t v11 = *v28;
            *long long v28 = v29;
            do
            {
              uint64_t v30 = v11[1];
              ++v11;
              uint64_t v144 = v19;
              uint64_t v145 = v30;
              uint64_t v31 = *a3 + 1320;
              unsigned int v32 = *((_DWORD *)sub_1CD40EB18(v31, &v145) + 2);
            }
            while (v32 < *((_DWORD *)sub_1CD40EB18(v31, &v144) + 2));
            do
            {
              uint64_t v33 = *--v28;
              uint64_t v144 = v19;
              uint64_t v145 = v33;
              uint64_t v34 = *a3 + 1320;
              unsigned int v35 = *((_DWORD *)sub_1CD40EB18(v34, &v145) + 2);
            }
            while (v35 >= *((_DWORD *)sub_1CD40EB18(v34, &v144) + 2));
          }
          while (v11 < v28);
        }
        long long v36 = v11 - 1;
        uint64_t v10 = v143;
        if (v11 - 1 != v143) {
          *uint64_t v143 = *v36;
        }
        *long long v36 = v19;
        if (v23 >= v24) {
          break;
        }
LABEL_26:
        BOOL result = sub_1CCE5A628(v143, v11 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v37 = sub_1CCE5B4D0(v143, v11 - 1, a3);
      BOOL result = sub_1CCE5B4D0(v11, a2, a3);
      if (result) {
        break;
      }
      if (!v37) {
        goto LABEL_26;
      }
    }
    a2 = v11 - 1;
    if (!v37) {
      continue;
    }
    return result;
  }
}

void *sub_1CCE5B188(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  sub_1CCE5B720(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v29 = *a4;
  uint64_t v30 = v12;
  uint64_t v13 = *a6 + 1320;
  unsigned int v14 = *((_DWORD *)sub_1CD40EB18(v13, &v30) + 2);
  BOOL result = sub_1CD40EB18(v13, &v29);
  if (v14 < *((_DWORD *)result + 2))
  {
    uint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    uint64_t v17 = *a4;
    uint64_t v29 = *a3;
    uint64_t v30 = v17;
    uint64_t v18 = *a6 + 1320;
    unsigned int v19 = *((_DWORD *)sub_1CD40EB18(v18, &v30) + 2);
    BOOL result = sub_1CD40EB18(v18, &v29);
    if (v19 < *((_DWORD *)result + 2))
    {
      uint64_t v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      uint64_t v21 = *a3;
      uint64_t v29 = *a2;
      uint64_t v30 = v21;
      uint64_t v22 = *a6 + 1320;
      unsigned int v23 = *((_DWORD *)sub_1CD40EB18(v22, &v30) + 2);
      BOOL result = sub_1CD40EB18(v22, &v29);
      if (v23 < *((_DWORD *)result + 2))
      {
        uint64_t v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        uint64_t v25 = *a2;
        uint64_t v29 = *a1;
        uint64_t v30 = v25;
        uint64_t v26 = *a6 + 1320;
        unsigned int v27 = *((_DWORD *)sub_1CD40EB18(v26, &v30) + 2);
        BOOL result = sub_1CD40EB18(v26, &v29);
        if (v27 < *((_DWORD *)result + 2))
        {
          uint64_t v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

void *sub_1CCE5B318(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = *a2;
  uint64_t v27 = *a1;
  uint64_t v28 = v8;
  uint64_t v9 = *a4 + 1320;
  unsigned int v10 = *((_DWORD *)sub_1CD40EB18(v9, &v28) + 2);
  uint64_t v11 = sub_1CD40EB18(v9, &v27);
  uint64_t v12 = *a3;
  if (v10 >= *((_DWORD *)v11 + 2))
  {
    uint64_t v27 = *a2;
    uint64_t v28 = v12;
    uint64_t v17 = *a4 + 1320;
    unsigned int v18 = *((_DWORD *)sub_1CD40EB18(v17, &v28) + 2);
    BOOL result = sub_1CD40EB18(v17, &v27);
    if (v18 < *((_DWORD *)result + 2))
    {
      uint64_t v22 = *a2;
      *a2 = *a3;
      *a3 = v22;
      uint64_t v23 = *a2;
      uint64_t v27 = *a1;
      uint64_t v28 = v23;
      uint64_t v24 = *a4 + 1320;
      unsigned int v25 = *((_DWORD *)sub_1CD40EB18(v24, &v28) + 2);
      BOOL result = sub_1CD40EB18(v24, &v27);
      if (v25 < *((_DWORD *)result + 2))
      {
        uint64_t v26 = *a1;
        *a1 = *a2;
        *a2 = v26;
      }
    }
  }
  else
  {
    uint64_t v27 = *a2;
    uint64_t v28 = v12;
    uint64_t v13 = *a4 + 1320;
    unsigned int v14 = *((_DWORD *)sub_1CD40EB18(v13, &v28) + 2);
    BOOL result = sub_1CD40EB18(v13, &v27);
    uint64_t v16 = *a1;
    if (v14 < *((_DWORD *)result + 2))
    {
      *a1 = *a3;
LABEL_4:
      *a3 = v16;
      return result;
    }
    *a1 = *a2;
    *a2 = v16;
    uint64_t v19 = *a3;
    uint64_t v27 = v16;
    uint64_t v28 = v19;
    uint64_t v20 = *a4 + 1320;
    unsigned int v21 = *((_DWORD *)sub_1CD40EB18(v20, &v28) + 2);
    BOOL result = sub_1CD40EB18(v20, &v27);
    if (v21 < *((_DWORD *)result + 2))
    {
      uint64_t v16 = *a2;
      *a2 = *a3;
      goto LABEL_4;
    }
  }
  return result;
}

BOOL sub_1CCE5B4D0(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v20 = *(a2 - 1);
      uint64_t v24 = *a1;
      uint64_t v25 = v20;
      uint64_t v21 = *a3 + 1320;
      unsigned int v22 = *((_DWORD *)sub_1CD40EB18(v21, &v25) + 2);
      if (v22 < *((_DWORD *)sub_1CD40EB18(v21, &v24) + 2))
      {
        uint64_t v23 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      sub_1CCE5B318(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CCE5B720(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CCE5B188(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_1CCE5B318(a1, a1 + 1, a1 + 2, a3);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v24 = *v8;
    uint64_t v25 = v12;
    uint64_t v13 = *a3 + 1320;
    unsigned int v14 = *((_DWORD *)sub_1CD40EB18(v13, &v25) + 2);
    if (v14 < *((_DWORD *)sub_1CD40EB18(v13, &v24) + 2))
    {
      uint64_t v15 = *v9;
      uint64_t v16 = v10;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v16 + 24) = *(uint64_t *)((char *)a1 + v16 + 16);
        if (v16 == -16) {
          break;
        }
        uint64_t v24 = *(uint64_t *)((char *)a1 + v16 + 8);
        uint64_t v25 = v15;
        uint64_t v17 = *a3 + 1320;
        unsigned int v18 = *((_DWORD *)sub_1CD40EB18(v17, &v25) + 2);
        v16 -= 8;
        if (v18 >= *((_DWORD *)sub_1CD40EB18(v17, &v24) + 2))
        {
          uint64_t v19 = (uint64_t *)((char *)a1 + v16 + 24);
          goto LABEL_11;
        }
      }
      uint64_t v19 = a1;
LABEL_11:
      *uint64_t v19 = v15;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    BOOL result = 1;
    if (++v9 == a2) {
      return result;
    }
  }
}

void *sub_1CCE5B720(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  sub_1CCE5B318(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v23 = *a3;
  uint64_t v24 = v10;
  uint64_t v11 = *a5 + 1320;
  unsigned int v12 = *((_DWORD *)sub_1CD40EB18(v11, &v24) + 2);
  BOOL result = sub_1CD40EB18(v11, &v23);
  if (v12 < *((_DWORD *)result + 2))
  {
    uint64_t v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    uint64_t v15 = *a3;
    uint64_t v23 = *a2;
    uint64_t v24 = v15;
    uint64_t v16 = *a5 + 1320;
    unsigned int v17 = *((_DWORD *)sub_1CD40EB18(v16, &v24) + 2);
    BOOL result = sub_1CD40EB18(v16, &v23);
    if (v17 < *((_DWORD *)result + 2))
    {
      uint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t v19 = *a2;
      uint64_t v23 = *a1;
      uint64_t v24 = v19;
      uint64_t v20 = *a5 + 1320;
      unsigned int v21 = *((_DWORD *)sub_1CD40EB18(v20, &v24) + 2);
      BOOL result = sub_1CD40EB18(v20, &v23);
      if (v21 < *((_DWORD *)result + 2))
      {
        uint64_t v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

void sub_1CCE5B860()
{
}

uint64_t *sub_1CCE5B9D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  BOOL v5 = v9;
  if (v4) {
    return v5 + 1;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1CC3272DC(a1, v7);
    uint64_t v9 = 0;
    sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    BOOL v5 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v5 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *BOOL v5 = *a2;
  v5[1] = 0;
  return v5 + 1;
}

void *sub_1CCE5BAAC(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CCE5BB60(a1, v6);
  uint64_t v8 = 0;
  sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CCE5BB60(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *BOOL result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = (_DWORD *)(v4 + 8);
      do
      {
        uint64_t v14 = *((void *)v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          uint64_t v15 = v18;
          uint64_t *v18 = v14;
          *((_DWORD *)v15 + 2) = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 4;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      *BOOL result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

void *sub_1CCE5BCB0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *BOOL result = -8;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = (uint64_t *)v4;
      do
      {
        if (*v13 != -8 && *v13 != 0x7FFFFFFF0)
        {
          uint64_t v18 = 0;
          sub_1CCE5BE08(*(void *)a1, *(_DWORD *)(a1 + 16), v13, &v18);
          uint64_t v15 = v18;
          uint64_t *v18 = *v13;
          v15[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      *BOOL result = -8;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1CCE5BE08(uint64_t a1, int a2, uint64_t *a3, uint64_t **a4)
{
  if (a2)
  {
    uint64_t v9 = a1;
    uint64_t v10 = (void *)*a3;
    LODWORD(a1) = *(_DWORD *)(*a3 + 16);
    if (!a1)
    {
      a1 = (*(uint64_t (**)(uint64_t))(*v10 + 32))(*a3);
      v10[2] = a1;
      uint64_t v10 = (void *)*a3;
    }
    int v11 = a2 - 1;
    unsigned int v12 = (a2 - 1) & a1;
    unint64_t v5 = (uint64_t *)(v9 + 16 * v12);
    if (sub_1CD77D5BC((uint64_t)v10, *v5))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      while (*v5 != -8)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = *v5 == 0x7FFFFFFF0;
        }
        if (v15) {
          uint64_t v13 = v5;
        }
        int v16 = v14 + 1;
        unsigned int v12 = (v12 + v14) & v11;
        unint64_t v5 = (uint64_t *)(v9 + 16 * v12);
        int v17 = sub_1CD77D5BC(*a3, *v5);
        uint64_t result = 1;
        int v14 = v16;
        if (v17) {
          goto LABEL_3;
        }
      }
      uint64_t result = 0;
      if (v13) {
        unint64_t v5 = v13;
      }
    }
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t result = 0;
  }
LABEL_3:
  *a4 = v5;
  return result;
}

uint64_t sub_1CCE5BF28(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v2 >= 0x1C)
  {
    uint64_t result = *(void *)(a2 + 40);
    if (!result)
    {
      uint64_t v7 = 0;
      int v5 = sub_1CD40EA84(*(void *)(a1 + 1552), *(_DWORD *)(a1 + 1568), a2, &v7);
      uint64_t result = 0;
      if (v5) {
        return *(void *)(v7 + 8);
      }
    }
  }
  else
  {
    if (v2 == 27) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = 0;
    }
    return *(void *)(v6 + 64);
  }
  return result;
}

uint64_t sub_1CCE5BF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = 0;
  int v6 = sub_1CBB0BF40(*(void *)(a1 + 1768), *(_DWORD *)(a1 + 1784), a2, &v41);
  uint64_t v7 = v41;
  if (v6) {
    BOOL v8 = v41 == *(void *)(a1 + 1768) + 16 * *(unsigned int *)(a1 + 1784);
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 0;
  }
  uint64_t v9 = *(void *)(v41 + 8);
  if (v9 == a3) {
    return 0;
  }
  if (a2 && *(unsigned char *)(a2 + 16) == 27)
  {
    uint64_t v11 = *(void *)(v9 + 120);
    uint64_t v10 = *(void *)(v9 + 128);
    if (v10 == v11)
    {
      uint64_t v12 = *(unsigned int *)(v9 + 140);
      uint64_t v13 = (void *)(v10 + 8 * v12);
      if (v12)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 8 * v12;
        while (*(void *)(v10 + v14) != a2)
        {
          v14 += 8;
          if (v15 == v14) {
            goto LABEL_27;
          }
        }
        uint64_t v13 = (void *)(v10 + v14);
      }
LABEL_27:
      uint64_t v11 = *(void *)(v9 + 128);
    }
    else
    {
      uint64_t v17 = *(unsigned int *)(v9 + 136);
      int v18 = v17 - 1;
      unsigned int v19 = (v17 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v13 = (void *)(v10 + 8 * v19);
      uint64_t v20 = *v13;
      if (*v13 == -1)
      {
        unsigned int v21 = 0;
LABEL_71:
        if (v21) {
          uint64_t v13 = v21;
        }
        if (*v13 != a2) {
          uint64_t v13 = (void *)(v10 + 8 * v17);
        }
      }
      else
      {
        unsigned int v21 = 0;
        int v22 = 1;
        while (v20 != a2)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v20 == -2;
          }
          if (v23) {
            unsigned int v21 = v13;
          }
          unsigned int v24 = v19 + v22++;
          unsigned int v19 = v24 & v18;
          uint64_t v13 = (void *)(v10 + 8 * (v24 & v18));
          uint64_t v20 = *v13;
          if (*v13 == -1) {
            goto LABEL_71;
          }
        }
      }
    }
    BOOL v8 = v10 == v11;
    uint64_t v25 = 136;
    if (v8) {
      uint64_t v25 = 140;
    }
    if (v13 != (void *)(v10 + 8 * *(unsigned int *)(v9 + v25)))
    {
      *uint64_t v13 = -2;
      ++*(_DWORD *)(v9 + 144);
    }
    uint64_t v26 = *(void *)(a3 + 128);
    uint64_t v27 = *(unsigned int *)(a3 + 140);
    if (v26 == *(void *)(a3 + 120))
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 8 * v27;
        uint64_t v30 = *(uint64_t **)(a3 + 128);
        while (*v30 != a2)
        {
          if (*v30 == -2) {
            uint64_t v28 = v30;
          }
          ++v30;
          v29 -= 8;
          if (!v29)
          {
            if (!v28) {
              goto LABEL_40;
            }
            *uint64_t v28 = a2;
            --*(_DWORD *)(a3 + 144);
            goto LABEL_64;
          }
        }
        goto LABEL_64;
      }
LABEL_40:
      unsigned int v31 = *(_DWORD *)(a3 + 136);
      if (v27 < v31)
      {
        *(_DWORD *)(a3 + 140) = v27 + 1;
        *(void *)(v26 + 8 * v27) = a2;
LABEL_64:
        if (*(void *)(v9 + 40) == a2)
        {
          if (*(_DWORD *)(v9 + 168) || *(_DWORD *)(v9 + 140) != *(_DWORD *)(v9 + 144))
          {
            *(void *)(v9 + 40) = sub_1CCE5C5BC(a1, v9);
            sub_1CCE5C870(a1, v9);
          }
          else
          {
            *(void *)(v9 + 40) = 0;
          }
        }
        goto LABEL_69;
      }
    }
    else
    {
      unsigned int v31 = *(_DWORD *)(a3 + 136);
    }
    if (3 * v31 <= 4 * ((int)v27 - *(_DWORD *)(a3 + 144)))
    {
      if (v31 >= 0x40) {
        v31 *= 2;
      }
      else {
        unsigned int v31 = 128;
      }
    }
    else if (v31 - v27 >= v31 >> 3)
    {
      goto LABEL_45;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a3 + 120), v31);
    unsigned int v31 = *(_DWORD *)(a3 + 136);
    uint64_t v26 = *(void *)(a3 + 128);
LABEL_45:
    unsigned int v32 = v31 - 1;
    unsigned int v33 = (v31 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v34 = (uint64_t *)(v26 + 8 * v33);
    uint64_t v35 = *v34;
    if (*v34 == -1)
    {
      long long v36 = 0;
LABEL_57:
      if (v36) {
        unsigned int v40 = v36;
      }
      else {
        unsigned int v40 = v34;
      }
      if (*v40 != a2)
      {
        if (*v40 == -2) {
          --*(_DWORD *)(a3 + 144);
        }
        else {
          ++*(_DWORD *)(a3 + 140);
        }
        *unsigned int v40 = a2;
      }
    }
    else
    {
      long long v36 = 0;
      int v37 = 1;
      while (v35 != a2)
      {
        if (v36) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = v35 == -2;
        }
        if (v38) {
          long long v36 = v34;
        }
        unsigned int v39 = v33 + v37++;
        unsigned int v33 = v39 & v32;
        uint64_t v34 = (uint64_t *)(v26 + 8 * (v39 & v32));
        uint64_t v35 = *v34;
        if (*v34 == -1) {
          goto LABEL_57;
        }
      }
    }
    goto LABEL_64;
  }
LABEL_69:
  *(void *)(v7 + 8) = a3;
  return 1;
}

int32x2_t sub_1CCE5C2D8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) != 25)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 2088);
      do
      {
        unsigned int v6 = sub_1CCE5C9E8(a1, *(void *)(v4 + 24));
        *(void *)(v5 + 8 * (v6 >> 6)) |= 1 << v6;
        uint64_t v4 = *(void *)(v4 + 8);
      }
      while (v4);
    }
    BOOL v23 = 0;
    int v7 = sub_1CD4A7E9C(*(void *)(a1 + 1744), *(_DWORD *)(a1 + 1760), a2, &v23);
    uint64_t v9 = v23;
    if (v7 && v23 != (void *)(*(void *)(a1 + 1744) + 56 * *(unsigned int *)(a1 + 1760)))
    {
      uint64_t v12 = (char *)v23[1];
      uint64_t v11 = (char *)v23[2];
      uint64_t v13 = 24;
      if (v11 == v12) {
        uint64_t v13 = 28;
      }
      uint64_t v14 = *(unsigned int *)((char *)v23 + v13);
      uint64_t v15 = (uint64_t *)v23[2];
      if (v14)
      {
        uint64_t v16 = 8 * v14;
        uint64_t v15 = (uint64_t *)v23[2];
        while ((unint64_t)*v15 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v15;
          v16 -= 8;
          if (!v16) {
            goto LABEL_23;
          }
        }
      }
      uint64_t v17 = &v11[8 * v14];
      if (v15 != (uint64_t *)v17)
      {
        uint64_t v18 = *(void *)(a1 + 2088);
        uint64_t v19 = *v15;
LABEL_19:
        unsigned int v20 = sub_1CCE5C9E8(a1, v19);
        *(void *)(v18 + 8 * (v20 >> 6)) |= 1 << v20;
        unsigned int v21 = (unint64_t *)(v15 + 1);
        while (v21 != (unint64_t *)v17)
        {
          unint64_t v22 = *v21++;
          uint64_t v19 = v22;
          if (v22 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v15 = (uint64_t *)(v21 - 1);
            goto LABEL_19;
          }
        }
      }
LABEL_23:
      if (v11 != v12) {
        free(v11);
      }
      *uint64_t v9 = -8192;
      int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 1752), (int32x2_t)0x1FFFFFFFFLL);
      *(int32x2_t *)(a1 + 1752) = result;
    }
  }
  return result;
}

uint64_t sub_1CCE5C460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  sub_1CBB0BF40(*(void *)(a1 + 1768), *(_DWORD *)(a1 + 1784), a2, &v4);
  uint64_t result = *(void *)(v4 + 8);
  if (*(void *)(result + 40) != a2) {
    sub_1CCE5B860();
  }
  return result;
}

uint64_t sub_1CCE5C4CC(uint64_t result)
{
  char v1 = *(uint64_t **)result;
  unsigned int v2 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *v1;
      uint64_t v5 = *(uint64_t **)(v3 + 16);
      uint64_t v6 = *v5;
      if (*v1 != *v5)
      {
        uint64_t v7 = *(void *)(v3 + 24);
        uint64_t v13 = 0;
        uint64_t result = sub_1CBB0BF40(*(void *)(v7 + 1768), *(_DWORD *)(v7 + 1784), v4, &v13);
        uint64_t v8 = 0;
        if (result) {
          uint64_t v8 = *(void *)(v13 + 8);
        }
        if (v8 != *(void *)(v7 + 1344))
        {
          int v9 = *(_DWORD *)(v6 + 20);
          if ((v9 & 0x40000000) != 0) {
            uint64_t v10 = *(void *)(v6 - 8);
          }
          else {
            uint64_t v10 = v6 - 32 * (v9 & 0x7FFFFFF);
          }
          uint64_t v11 = **(void **)(v3 + 32);
          v12[0] = *(void *)(v10
                             + 32 * *(unsigned int *)(v6 + 76)
                             + 8 * (((unint64_t)v1 - v10) >> 5));
          v12[1] = v11;
          uint64_t v13 = 0;
          uint64_t result = sub_1CCDB497C((uint64_t *)(v7 + 1968), v12, &v13);
          if (result) {
            return result;
          }
          char v1 = *(uint64_t **)v3;
          unsigned int v2 = *(uint64_t **)(v3 + 8);
        }
      }
      v1 += 4;
      *(void *)uint64_t v3 = v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1CCE5C5BC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 168))
  {
    uint64_t v3 = *(void *)(a2 + 16);
    if (v3 && *(unsigned char *)(v3 + 16) == 61)
    {
      uint64_t v4 = *(void *)(a2 + 16);
LABEL_63:
      return sub_1CCE5C938(a1, v4);
    }
    uint64_t v5 = *(void *)(a2 + 64);
    if (v5 == *(void *)(a2 + 56)) {
      uint64_t v6 = (unsigned int *)(a2 + 76);
    }
    else {
      uint64_t v6 = (unsigned int *)(a2 + 72);
    }
    uint64_t v7 = *v6;
    if (v7)
    {
      uint64_t v8 = 8 * v7;
      int v9 = *(unint64_t **)(a2 + 64);
      while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v9;
        v8 -= 8;
        if (!v8) {
          goto LABEL_62;
        }
      }
    }
    else
    {
      int v9 = *(unint64_t **)(a2 + 64);
    }
    uint64_t v17 = (unint64_t *)(v5 + 8 * v7);
    if (v9 == v17) {
      goto LABEL_62;
    }
    unint64_t v18 = *v9;
LABEL_30:
    if (*(unsigned char *)(v18 + 16) != 61)
    {
      while (1)
      {
        if (++v9 == v17) {
          goto LABEL_62;
        }
        unint64_t v18 = *v9;
        if (*v9 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_30;
        }
      }
    }
    if (v9 == v17)
    {
LABEL_62:
      uint64_t v4 = 0;
      goto LABEL_63;
    }
    uint64_t v4 = 0;
    uint64_t v24 = *(void *)(a1 + 2208);
    int v25 = *(_DWORD *)(a1 + 2224);
    unsigned int v26 = v25 - 1;
    unsigned int v27 = -1;
LABEL_44:
    if (v25)
    {
      uint64_t v28 = ((v18 >> 4) ^ (v18 >> 9)) & v26;
      uint64_t v29 = *(void *)(v24 + 16 * v28);
      if (v18 == v29)
      {
LABEL_49:
        unsigned int v32 = *(_DWORD *)(v24 + 16 * v28 + 8);
        goto LABEL_51;
      }
      int v30 = 1;
      while (v29 != -4096)
      {
        int v31 = v28 + v30++;
        uint64_t v28 = v31 & v26;
        uint64_t v29 = *(void *)(v24 + 16 * v28);
        if (v18 == v29) {
          goto LABEL_49;
        }
      }
    }
    unsigned int v32 = 0;
LABEL_51:
    if (v32 < v27)
    {
      uint64_t v4 = v18;
      unsigned int v27 = v32;
    }
    unsigned int v33 = v9 + 1;
    uint64_t v34 = v9 + 2;
    while (v33 != v17)
    {
      uint64_t v35 = v34;
      unint64_t v36 = *v33++;
      unint64_t v18 = v36;
      ++v34;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v9 = v33 - 1;
        if (*(unsigned char *)(v18 + 16) == 61) {
          goto LABEL_44;
        }
        while (v35 != v17)
        {
          unint64_t v18 = *v35;
          if (*v35 < 0xFFFFFFFFFFFFFFFELL && *(unsigned char *)(v18 + 16) == 61)
          {
            int v9 = v35;
            goto LABEL_44;
          }
          ++v35;
        }
        goto LABEL_63;
      }
    }
    goto LABEL_63;
  }
  uint64_t v10 = *(uint64_t **)(a2 + 128);
  uint64_t v11 = 136;
  if (v10 == *(uint64_t **)(a2 + 120)) {
    uint64_t v11 = 140;
  }
  uint64_t v12 = *(unsigned int *)(a2 + v11);
  uint64_t v13 = &v10[v12];
  if (*(_DWORD *)(a2 + 140) - *(_DWORD *)(a2 + 144) == 1)
  {
    if (v12)
    {
      uint64_t v14 = 8 * v12;
      while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v10;
        v14 -= 8;
        if (!v14)
        {
          uint64_t v10 = v13;
          return *v10;
        }
      }
    }
    return *v10;
  }
  else
  {
    if (v12)
    {
      uint64_t v16 = 8 * v12;
      while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v10;
        v16 -= 8;
        if (!v16) {
          return 0;
        }
      }
    }
    if (v10 == v13)
    {
      return 0;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v19 = *v10;
      unsigned int v20 = -1;
LABEL_36:
      unsigned int v21 = sub_1CCE5C9E8(a1, v19);
      if (v21 < v20)
      {
        uint64_t v15 = v19;
        unsigned int v20 = v21;
      }
      unint64_t v22 = (unint64_t *)(v10 + 1);
      while (v22 != (unint64_t *)v13)
      {
        unint64_t v23 = *v22++;
        uint64_t v19 = v23;
        if (v23 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v10 = (uint64_t *)(v22 - 1);
          goto LABEL_36;
        }
      }
    }
  }
  return v15;
}

uint64_t sub_1CCE5C870(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 128);
  uint64_t v4 = 136;
  if (v3 == *(void *)(a2 + 120)) {
    uint64_t v4 = 140;
  }
  uint64_t v5 = *(unsigned int *)(a2 + v4);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    for (uint64_t i = *(uint64_t **)(a2 + 128); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v6 -= 8;
      if (!v6) {
        return result;
      }
    }
  }
  else
  {
    uint64_t i = *(uint64_t **)(a2 + 128);
  }
  uint64_t v8 = (void *)(v3 + 8 * v5);
  if (i != v8)
  {
    uint64_t v9 = *(void *)(result + 2088);
    uint64_t v10 = *i;
LABEL_11:
    uint64_t result = sub_1CCE5C9E8(v2, v10);
    *(void *)(v9 + 8 * (result >> 6)) |= 1 << result;
    uint64_t v11 = (unint64_t *)(i + 1);
    while (v11 != v8)
    {
      unint64_t v12 = *v11++;
      uint64_t v10 = v12;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t i = (uint64_t *)(v11 - 1);
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t sub_1CCE5C938(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 24);
    unsigned int v5 = v3 - 1;
    uint64_t v6 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = *(void *)(v4 + 16 * v6);
    if (v7 == a2)
    {
LABEL_6:
      uint64_t v10 = *(void *)(v4 + 16 * v6 + 8);
      if (v10) {
        return v10;
      }
    }
    else
    {
      int v8 = 1;
      while (v7 != -4096)
      {
        int v9 = v6 + v8++;
        uint64_t v6 = v9 & v5;
        uint64_t v7 = *(void *)(v4 + 16 * v6);
        if (v7 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  uint64_t v13 = 0;
  int v11 = sub_1CD40EA84(*(void *)(a1 + 1648), *(_DWORD *)(a1 + 1664), a2, &v13);
  uint64_t v10 = 0;
  if (v11) {
    return *(void *)(v13 + 8);
  }
  return v10;
}

uint64_t sub_1CCE5C9E8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 16) - 25 > 1)
  {
    int v11 = *(_DWORD *)(a1 + 2224);
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 2208);
      unsigned int v13 = v11 - 1;
      uint64_t v14 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v15 = *(void *)(v12 + 16 * v14);
      if (v15 != a2)
      {
        int v16 = 1;
        while (v15 != -4096)
        {
          int v17 = v14 + v16++;
          uint64_t v14 = v17 & v13;
          uint64_t v15 = *(void *)(v12 + 16 * v14);
          if (v15 == a2) {
            goto LABEL_13;
          }
        }
        return 0;
      }
LABEL_13:
      uint64_t v10 = v12 + 16 * v14;
      return *(unsigned int *)(v10 + 8);
    }
  }
  else
  {
    int v2 = *(_DWORD *)(a1 + 2224);
    if (v2)
    {
      uint64_t v3 = *(void *)(a2 + 72);
      uint64_t v4 = *(void *)(a1 + 2208);
      unsigned int v5 = v2 - 1;
      uint64_t v6 = ((v3 >> 4) ^ (v3 >> 9)) & (v2 - 1);
      uint64_t v7 = *(void *)(v4 + 16 * v6);
      if (v3 != v7)
      {
        int v8 = 1;
        while (v7 != -4096)
        {
          int v9 = v6 + v8++;
          uint64_t v6 = v9 & v5;
          uint64_t v7 = *(void *)(v4 + 16 * v6);
          if (v3 == v7) {
            goto LABEL_7;
          }
        }
        return 0;
      }
LABEL_7:
      uint64_t v10 = v4 + 16 * v6;
      return *(unsigned int *)(v10 + 8);
    }
  }
  return 0;
}

void sub_1CCE5CAC0(unint64_t *a1, uint64_t a2, uint64_t ***a3)
{
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *((unsigned __int8 *)a3 + 16);
  if (a3 && v7 <= 0x14)
  {
    *(void *)(a2 + 152) += 32;
    uint64_t v8 = *(void *)(a2 + 72);
    if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 32 > *(void *)(a2 + 80) - v8)
    {
      unsigned int v57 = *(_DWORD *)(a2 + 96) >> 7;
      if (v57 >= 0x1E) {
        LOBYTE(v57) = 30;
      }
      uint64_t v58 = 4096 << v57;
      uint64_t v3 = (uint64_t)operator new(4096 << v57, (std::align_val_t)8uLL);
      unsigned int v59 = *(_DWORD *)(a2 + 96);
      if (v59 >= *(_DWORD *)(a2 + 100)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a2 + 88) + 8 * v59) = v3;
      ++*(_DWORD *)(a2 + 96);
      *(void *)(a2 + 80) = v3 + v58;
      unsigned int v7 = *((unsigned __int8 *)a3 + 16);
    }
    else
    {
      uint64_t v3 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a2 + 72) = v3 + 32;
    *(_DWORD *)(v3 + 8) = 1;
    *(void *)(v3 + 16) = 0;
    int v9 = &unk_1F2640488;
LABEL_6:
    *(void *)uint64_t v3 = v9;
    *(void *)(v3 + 24) = a3;
    goto LABEL_7;
  }
  switch(*((unsigned char *)a3 + 16))
  {
    case 3:
    case 0x15:
      *(void *)(a2 + 152) += 32;
      uint64_t v10 = *(void *)(a2 + 72);
      if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 32 > *(void *)(a2 + 80) - v10)
      {
        unsigned int v132 = *(_DWORD *)(a2 + 96) >> 7;
        if (v132 >= 0x1E) {
          LOBYTE(v132) = 30;
        }
        uint64_t v133 = 4096 << v132;
        uint64_t v3 = (uint64_t)operator new(4096 << v132, (std::align_val_t)8uLL);
        unsigned int v134 = *(_DWORD *)(a2 + 96);
        if (v134 >= *(_DWORD *)(a2 + 100)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a2 + 88) + 8 * v134) = v3;
        ++*(_DWORD *)(a2 + 96);
        *(void *)(a2 + 80) = v3 + v133;
        unsigned int v7 = *((unsigned __int8 *)a3 + 16);
      }
      else
      {
        uint64_t v3 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(a2 + 72) = v3 + 32;
      *(_DWORD *)(v3 + 8) = 2;
      *(void *)(v3 + 16) = 0;
      int v9 = &unk_1F26404C8;
      goto LABEL_6;
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x55:
    case 0x59:
    case 0x5A:
      sub_1CCE60778(a1, a2, (uint64_t)a3);
      return;
    case 0x3C:
      if ((*((_WORD *)a3 + 9) & 0x381) != 0)
      {
        uint64_t v3 = 0;
        goto LABEL_8;
      }
      uint64_t v71 = sub_1CCE60C84(a2, (uint64_t)*(a3 - 4));
      if (*((unsigned __int8 *)v71 + 16) - 11 <= 1)
      {
        unsigned int v73 = (llvm::Value ***)*a3;
LABEL_93:
        uint64_t ConstantStoreValueForLoad = (uint64_t)llvm::PoisonValue::get((llvm::PoisonValue *)v73, v72);
        goto LABEL_94;
      }
      uint64_t v90 = (llvm::Type *)v71;
      uint64_t v91 = sub_1CCE5C938(a2, (uint64_t)a3);
      uint64_t v92 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), v91);
      uint64_t v94 = v92;
      if (*(void *)(*(void *)(a2 + 32) + 96) == v92) {
        goto LABEL_133;
      }
      BOOL v95 = v92 && *(unsigned char *)(v92 + 16) == 26;
      if (!v95) {
        goto LABEL_133;
      }
      uint64_t v117 = *(void *)(v92 + 72);
      uint64_t v118 = *(void *)(v117 + 40);
      uint64_t v119 = *(void *)(a2 + 2000);
      uint64_t v120 = *(void *)(a2 + 1992);
      if (v119 == v120)
      {
        uint64_t v121 = *(unsigned int *)(a2 + 2012);
        uint64_t v122 = (void *)(v119 + 8 * v121);
        if (v121)
        {
          uint64_t v123 = 0;
          uint64_t v124 = 8 * v121;
          while (*(void *)(v119 + v123) != v118)
          {
            v123 += 8;
            if (v124 == v123) {
              goto LABEL_194;
            }
          }
          uint64_t v122 = (void *)(v119 + v123);
        }
LABEL_194:
        uint64_t v120 = *(void *)(a2 + 2000);
      }
      else
      {
        uint64_t v135 = *(unsigned int *)(a2 + 2008);
        int v136 = v135 - 1;
        unsigned int v137 = (v135 - 1) & ((v118 >> 4) ^ (v118 >> 9));
        uint64_t v122 = (void *)(v119 + 8 * v137);
        uint64_t v138 = *v122;
        if (*v122 == -1)
        {
          uint64_t v139 = 0;
LABEL_231:
          if (v139) {
            uint64_t v122 = v139;
          }
          if (*v122 != v118) {
            uint64_t v122 = (void *)(v119 + 8 * v135);
          }
        }
        else
        {
          uint64_t v139 = 0;
          int v140 = 1;
          while (v138 != v118)
          {
            if (v139) {
              BOOL v141 = 0;
            }
            else {
              BOOL v141 = v138 == -2;
            }
            if (v141) {
              uint64_t v139 = v122;
            }
            unsigned int v142 = v137 + v140++;
            unsigned int v137 = v142 & v136;
            uint64_t v122 = (void *)(v119 + 8 * (v142 & v136));
            uint64_t v138 = *v122;
            if (*v122 == -1) {
              goto LABEL_231;
            }
          }
        }
      }
      BOOL v95 = v119 == v120;
      uint64_t v146 = 2008;
      if (v95) {
        uint64_t v146 = 2012;
      }
      uint64_t v147 = (llvm::IntegerType **)*a3;
      if (v122 == (void *)(v119 + 8 * *(unsigned int *)(a2 + v146)))
      {
        unsigned int v73 = (llvm::Value ***)*a3;
        goto LABEL_93;
      }
      int v148 = *(unsigned __int8 *)(v117 + 16);
      if (v117 && v148 == 61)
      {
        int v149 = *((unsigned __int8 *)a3 + 16);
        if ((v149 - 60) >= 2)
        {
          if ((v149 - 63) < 3)
          {
LABEL_202:
            if ((*(_WORD *)(v117 + 18) & 0x380) == 0) {
              goto LABEL_133;
            }
          }
        }
        else if ((*((_WORD *)a3 + 9) & 0x380) != 0)
        {
          goto LABEL_202;
        }
        if (**(llvm::IntegerType ****)(v117 - 64) == v147) {
          goto LABEL_133;
        }
        uint64_t v150 = llvm::VNCoercion::analyzeLoadFromClobberingStore((llvm::Value ***)*a3, v90, *(llvm::Value **)(v94 + 72), *(llvm::StoreInst **)(a2 + 56), v93);
        if ((v150 & 0x80000000) == 0)
        {
          uint64_t v151 = (llvm::Constant *)v150;
          unsigned int v152 = (unsigned __int8 *)sub_1CCE60C84(a2, *(void *)(v117 - 64));
          if (v152)
          {
            if (v152[16] <= 0x14u)
            {
              uint64_t ConstantStoreValueForLoad = llvm::VNCoercion::getConstantStoreValueForLoad((llvm::VNCoercion *)v152, v151, (uint64_t)v147, *(llvm::Type **)(a2 + 56), v153);
              goto LABEL_94;
            }
          }
        }
        goto LABEL_221;
      }
      if (v117 && v148 == 60)
      {
        int v154 = *((unsigned __int8 *)a3 + 16);
        if ((v154 - 60) >= 2)
        {
          if ((v154 - 63) >= 3) {
            goto LABEL_214;
          }
        }
        else if ((*((_WORD *)a3 + 9) & 0x380) == 0)
        {
          goto LABEL_214;
        }
        if ((*(_WORD *)(v117 + 18) & 0x380) == 0) {
          goto LABEL_133;
        }
LABEL_214:
        uint64_t v155 = llvm::VNCoercion::analyzeLoadFromClobberingLoad((llvm::Value ***)*a3, v90, *(llvm::Value **)(v94 + 72), *(llvm::LoadInst **)(a2 + 56), v93);
        if ((v155 & 0x80000000) != 0) {
          goto LABEL_221;
        }
        uint64_t v156 = (llvm::Constant *)v155;
        uint64_t v157 = (unsigned __int8 *)sub_1CCE60C84(a2, v117);
        if (!v157) {
          goto LABEL_221;
        }
        if (v157[16] > 0x14u) {
          goto LABEL_221;
        }
        uint64_t ConstantLoadValueForLoad = llvm::VNCoercion::getConstantLoadValueForLoad((llvm::VNCoercion *)v157, v156, (uint64_t)v147, *(llvm::Type **)(a2 + 56), v158);
        if (!ConstantLoadValueForLoad) {
          goto LABEL_221;
        }
LABEL_309:
        uint64_t v209 = ConstantLoadValueForLoad;
        *(void *)(a2 + 152) += 32;
        uint64_t v210 = *(void *)(a2 + 72);
        if (((v210 + 7) & 0xFFFFFFFFFFFFFFF8) - v210 + 32 > *(void *)(a2 + 80) - v210)
        {
          unsigned int v214 = *(_DWORD *)(a2 + 96) >> 7;
          if (v214 >= 0x1E) {
            LOBYTE(v214) = 30;
          }
          uint64_t v215 = 4096 << v214;
          uint64_t v3 = (uint64_t)operator new(4096 << v214, (std::align_val_t)8uLL);
          unsigned int v216 = *(_DWORD *)(a2 + 96);
          if (v216 >= *(_DWORD *)(a2 + 100)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a2 + 88) + 8 * v216) = v3;
          ++*(_DWORD *)(a2 + 96);
          *(void *)(a2 + 80) = v3 + v215;
        }
        else
        {
          uint64_t v3 = (v210 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(a2 + 72) = v3 + 32;
        *(_DWORD *)(v3 + 8) = 1;
        *(void *)(v3 + 16) = 0;
        *(void *)(v3 + 24) = v209;
        *(void *)uint64_t v3 = &unk_1F2640488;
        unsigned int v7 = *(unsigned __int8 *)(v209 + 16);
        goto LABEL_7;
      }
      if (sub_1CBFB3AB0(*(void *)(v94 + 72)))
      {
        unsigned int v160 = llvm::VNCoercion::analyzeLoadFromClobberingMemInst((uint64_t)v147, v90, v117, *(void *)(a2 + 56));
        if ((v160 & 0x80000000) == 0)
        {
          uint64_t ConstantLoadValueForLoad = llvm::VNCoercion::getConstantMemInstValueForLoad(v117, v160, v147, *(llvm::DataLayout **)(a2 + 56));
          if (ConstantLoadValueForLoad) {
            goto LABEL_309;
          }
        }
      }
LABEL_221:
      if (sub_1CCE60C84(a2, v117) == (llvm::PoisonValue **)v90) {
        goto LABEL_223;
      }
      uint64_t v162 = *(void *)(a2 + 24);
      uint64_t v250 = v90;
      uint64_t v251 = 1;
      memset(v252, 0, 32);
      uint64_t v246 = (uint64_t *)v117;
      uint64_t v247 = 1;
      long long v248 = 0u;
      long long v249 = 0u;
      if (llvm::AAResults::alias(v162, (uint64_t)&v250, (uint64_t)&v246) == 3)
      {
LABEL_223:
        int v163 = *(unsigned __int8 *)(v117 + 16);
        if (v163 != 84)
        {
          if (v163 == 59)
          {
LABEL_225:
            uint64_t ConstantStoreValueForLoad = (uint64_t)llvm::UndefValue::get((llvm::UndefValue *)v147, v161);
LABEL_94:
            uint64_t v75 = (void *)ConstantStoreValueForLoad;
LABEL_282:
            *(void *)(a2 + 152) += 32;
            uint64_t v194 = *(void *)(a2 + 72);
            if (((v194 + 7) & 0xFFFFFFFFFFFFFFF8) - v194 + 32 > *(void *)(a2 + 80) - v194)
            {
              unsigned int v195 = *(_DWORD *)(a2 + 96) >> 7;
              if (v195 >= 0x1E) {
                LOBYTE(v195) = 30;
              }
              uint64_t v196 = 4096 << v195;
              uint64_t v3 = (uint64_t)operator new(4096 << v195, (std::align_val_t)8uLL);
              unsigned int v197 = *(_DWORD *)(a2 + 96);
              if (v197 >= *(_DWORD *)(a2 + 100)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(a2 + 88) + 8 * v197) = v3;
              ++*(_DWORD *)(a2 + 96);
              *(void *)(a2 + 80) = v3 + v196;
            }
            else
            {
              uint64_t v3 = (v194 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)(a2 + 72) = v3 + 32;
            *(_DWORD *)(v3 + 8) = 1;
            *(void *)(v3 + 16) = 0;
            *(void *)(v3 + 24) = v75;
            *(void *)uint64_t v3 = &unk_1F2640488;
            unsigned int v7 = *((unsigned __int8 *)v75 + 16);
            goto LABEL_7;
          }
LABEL_239:
          if (byte_1EBD04470) {
            int v168 = 59;
          }
          else {
            int v168 = 63;
          }
          sub_1CC095244(v117, v168, *(uint64_t **)(a2 + 16), &v250);
          if (BYTE8(v252[0]))
          {
            InitialValueOfAllocation = llvm::getInitialValueOfAllocation(v117, *(uint64_t **)(a2 + 16), (llvm::UndefValue *)v147);
            if (InitialValueOfAllocation)
            {
              int v170 = InitialValueOfAllocation;
              *(void *)(a2 + 152) += 32;
              uint64_t v171 = *(void *)(a2 + 72);
              if (((v171 + 7) & 0xFFFFFFFFFFFFFFF8) - v171 + 32 > *(void *)(a2 + 80) - v171)
              {
                unsigned int v211 = *(_DWORD *)(a2 + 96) >> 7;
                if (v211 >= 0x1E) {
                  LOBYTE(v211) = 30;
                }
                uint64_t v212 = 4096 << v211;
                uint64_t v3 = (uint64_t)operator new(4096 << v211, (std::align_val_t)8uLL);
                unsigned int v213 = *(_DWORD *)(a2 + 96);
                if (v213 >= *(_DWORD *)(a2 + 100)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(a2 + 88) + 8 * v213) = v3;
                ++*(_DWORD *)(a2 + 96);
                *(void *)(a2 + 80) = v3 + v212;
              }
              else
              {
                uint64_t v3 = (v171 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              *(void *)(a2 + 72) = v3 + 32;
              *(_DWORD *)(v3 + 8) = 1;
              *(void *)(v3 + 16) = 0;
              *(void *)(v3 + 24) = v170;
              *(void *)uint64_t v3 = &unk_1F2640488;
              unsigned int v7 = *((unsigned __int8 *)v170 + 16);
LABEL_7:
              *(_DWORD *)(v3 + 12) = v7;
              goto LABEL_8;
            }
          }
          goto LABEL_133;
        }
        uint64_t v167 = *(void *)(v117 - 32);
        if (!v167
          || *(unsigned char *)(v167 + 16)
          || *(void *)(v167 + 24) != *(void *)(v117 + 72)
          || (*(unsigned char *)(v167 + 33) & 0x20) == 0)
        {
          goto LABEL_239;
        }
        if (*(_DWORD *)(v167 + 36) == 168) {
          goto LABEL_225;
        }
      }
LABEL_133:
      uint64_t v96 = (llvm::Value ***)*a3;
      *(void *)(a2 + 152) += 64;
      uint64_t v97 = *(void *)(a2 + 72);
      uint64_t v98 = *(void *)(a2 + 80);
      if (((v97 + 7) & 0xFFFFFFFFFFFFFFF8) - v97 + 64 > v98 - v97)
      {
        unsigned int v172 = *(_DWORD *)(a2 + 96) >> 7;
        if (v172 >= 0x1E) {
          LOBYTE(v172) = 30;
        }
        uint64_t v173 = 4096 << v172;
        uint64_t v3 = (uint64_t)operator new(4096 << v172, (std::align_val_t)8uLL);
        unsigned int v174 = *(_DWORD *)(a2 + 96);
        if (v174 >= *(_DWORD *)(a2 + 100)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a2 + 88) + 8 * v174) = v3;
        ++*(_DWORD *)(a2 + 96);
        uint64_t v98 = v3 + v173;
        *(void *)(a2 + 80) = v98;
      }
      else
      {
        uint64_t v3 = (v97 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(a2 + 72) = v3 + 64;
      uint64_t v250 = 0;
      sub_1CBB0BF40(*(void *)(a2 + 1768), *(_DWORD *)(a2 + 1784), v94, &v250);
      uint64_t v99 = *(void *)(*((void *)v250 + 1) + 40);
      *(void *)(v3 + 8) = 0xFFFFFFFD0000000BLL;
      *(void *)(v3 + 16) = 0;
      *(void *)(v3 + 24) = 0;
      *(void *)(v3 + 32) = 1;
      *(void *)(v3 + 40) = 0;
      *(void *)(v3 + 48) = v99;
      *(void *)uint64_t v3 = &unk_1F26402A0;
      *(void *)(v3 + 56) = a3;
      if (*(_DWORD *)(a2 + 176) && (uint64_t v100 = *(void **)(a2 + 168), (v101 = (void *)*v100) != 0))
      {
        int v102 = 0;
        *uint64_t v100 = *v101;
      }
      else
      {
        *(void *)(a2 + 152) += 8;
        if (((v3 + 71) & 0xFFFFFFFFFFFFFFF8) - (v3 + 64) + 8 > v98 - (v3 + 64))
        {
          unsigned int v200 = *(_DWORD *)(a2 + 96) >> 7;
          if (v200 >= 0x1E) {
            LOBYTE(v200) = 30;
          }
          uint64_t v201 = 4096 << v200;
          unsigned int v101 = operator new(4096 << v200, (std::align_val_t)8uLL);
          unsigned int v202 = *(_DWORD *)(a2 + 96);
          if (v202 >= *(_DWORD *)(a2 + 100)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a2 + 88) + 8 * v202) = v101;
          ++*(_DWORD *)(a2 + 96);
          *(void *)(a2 + 72) = v101 + 1;
          *(void *)(a2 + 80) = (char *)v101 + v201;
          int v102 = *(_DWORD *)(v3 + 36);
        }
        else
        {
          int v102 = 0;
          unsigned int v101 = (void *)((v3 + 71) & 0xFFFFFFFFFFFFFFF8);
          *(void *)(a2 + 72) = v101 + 1;
        }
      }
      *(void *)(v3 + 24) = v101;
      *(void *)(v3 + 40) = v96;
      *(_DWORD *)(v3 + 12) = 0;
      *(_DWORD *)(v3 + 36) = v102 + 1;
      v101[v102] = v90;
      uint64_t v103 = *(void *)(v3 + 48);
      if (v103 != v94) {
        sub_1CCE64028(a2, v103, v91);
      }
LABEL_8:
      a1[2] = 0;
      *a1 = v3;
LABEL_9:
      a1[1] = 0;
      return;
    case 0x3D:
      uint64_t v34 = sub_1CCE5C938(a2, (uint64_t)a3);
      uint64_t v35 = v34;
      if (*(unsigned char *)(v34 + 16) == 25) {
        uint64_t v36 = v34;
      }
      else {
        uint64_t v36 = 0;
      }
      int v37 = (void *)(v34 - 64);
      if (v36) {
        BOOL v38 = (uint64_t *)(v36 - 32);
      }
      else {
        BOOL v38 = (uint64_t *)(v34 - 64);
      }
      if (byte_1EBCF72A8) {
        uint64_t v39 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), v34);
      }
      else {
        uint64_t v39 = *v38;
      }
      uint64_t v250 = 0;
      sub_1CBB0BF40(*(void *)(a2 + 1768), *(_DWORD *)(a2 + 1784), v39, &v250);
      uint64_t v76 = *(void *)(*((void *)v250 + 1) + 40);
      if (*(unsigned char *)(v35 + 16) == 25) {
        uint64_t v77 = v35;
      }
      else {
        uint64_t v77 = 0;
      }
      if (v77) {
        unsigned int v78 = (void *)(v77 - 32);
      }
      else {
        unsigned int v78 = v37;
      }
      if (v76 != *v78) {
        sub_1CCE64028(a2, *(void *)(*((void *)v250 + 1) + 40), v35);
      }
      if (v76 == v35) {
        uint64_t v76 = *(void *)(*(void *)(a2 + 32) + 96);
      }
      int v79 = *((unsigned __int8 *)a3 + 16);
      if (v79 == 60 || v79 == 61)
      {
        __int16 v80 = *((_WORD *)a3 + 9);
        if (v80 & 0x380) != 0 || (v80) {
          goto LABEL_123;
        }
      }
      else if (v79 - 63) < 3 || (*((_WORD *)a3 + 9))
      {
        goto LABEL_123;
      }
      uint64_t v3 = sub_1CCE641C0(a2, (uint64_t)a3, v76);
      uint64_t v250 = (void *)v3;
      uint64_t v246 = 0;
      if (sub_1CCE5BE08(*(void *)(a2 + 1840), *(_DWORD *)(a2 + 1856), (uint64_t *)&v250, &v246))
      {
        uint64_t v81 = v246[1];
        if (v81)
        {
          if (*(void *)(v81 + 32) == *(void *)(v3 + 64)) {
            goto LABEL_8;
          }
        }
      }
      uint64_t v82 = *(void *)(v3 + 64);
      if (v82
        && *(unsigned char *)(v82 + 16) == 60
        && sub_1CCE60C84(a2, *(void *)(v82 - 32)) == **(llvm::PoisonValue ****)(v3 + 24))
      {
        uint64_t v83 = sub_1CCE5C938(a2, v82);
        uint64_t v84 = *(unsigned char *)(v83 + 16) == 25 ? v83 : 0;
        uint64_t v85 = (uint64_t *)(v84 ? v84 - 32 : v83 - 64);
        uint64_t v86 = *v85;
        uint64_t v250 = 0;
        sub_1CBB0BF40(*(void *)(a2 + 1768), *(_DWORD *)(a2 + 1784), v86, &v250);
        if (*(void *)(*((void *)v250 + 1) + 40) == v76) {
          goto LABEL_8;
        }
      }
      sub_1CD77DB20(*(void **)(v3 + 24), *(_DWORD *)(v3 + 32), a2 + 168);
LABEL_123:
      uint64_t v3 = sub_1CCE641C0(a2, (uint64_t)a3, v35);
      goto LABEL_8;
    case 0x51:
    case 0x52:
      unint64_t v22 = sub_1CCE60C84(a2, (uint64_t)*(a3 - 8));
      unint64_t v23 = sub_1CCE60C84(a2, (uint64_t)*(a3 - 4));
      __int16 v24 = *((_WORD *)a3 + 9);
      uint64_t v25 = sub_1CCE60FA8(a2, (uint64_t)v22);
      unsigned int v26 = sub_1CCE60FA8(a2, (uint64_t)v23);
      uint64_t v27 = v24 & 0x3F;
      if (v26 < v25 || v23 < v22 && v25 >= v26)
      {
        uint64_t v28 = (uint64_t)v22;
        switch(v27)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 10:
          case 11:
          case 12:
          case 13:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
            uint64_t v28 = (uint64_t)v22;
            goto LABEL_252;
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
            __break(1u);
            goto LABEL_358;
          default:
            goto LABEL_252;
        }
      }
      uint64_t v28 = (uint64_t)v23;
      unint64_t v23 = v22;
LABEL_252:
      uint64_t v175 = *(void *)(a2 + 64) + 24;
      uint64_t v250 = a3;
      uint64_t v246 = 0;
      if (sub_1CBA0E618(v175, &v250, &v246))
      {
        uint64_t v177 = v246[1];
        if (v177)
        {
          if (*(_DWORD *)(v177 + 24) == 1) {
            goto LABEL_260;
          }
        }
      }
      if (v23 != (llvm::PoisonValue **)v28) {
        goto LABEL_256;
      }
      unsigned int v181 = *((_WORD *)a3 + 9) & 0x3F;
      if (v181 > 0x29) {
        goto LABEL_256;
      }
      if (((1 << v181) & 0x2A90000AA00) != 0)
      {
LABEL_260:
        uint64_t v182 = (llvm::Value ***)*a3;
        int v183 = **a3;
        uint64_t v184 = *v183;
        uint64_t v75 = *(void **)(*v183 + 1560);
        if (!v75)
        {
          uint64_t v185 = *(llvm::ConstantInt **)(v184 + 1888);
          unsigned int v186 = *(_DWORD *)(v184 + 1896);
          LODWORD(v251) = v186 >> 8;
          if (v186 >> 8 > 0x40) {
            operator new[]();
          }
          if (v186 <= 0xFF) {
            LOBYTE(v187) = 0;
          }
          else {
            unint64_t v187 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v186) + 63);
          }
          uint64_t v250 = (void *)(v187 & 1);
          uint64_t v75 = llvm::ConstantInt::get(v185, (llvm::LLVMContext *)&v250, v176);
          if (v251 >= 0x41 && v250) {
            MEMORY[0x1D25D9CB0](v250, 0x1000C8000313F17);
          }
          *(void *)(v184 + 1560) = v75;
        }
      }
      else
      {
        if (((1 << v181) & 0x15600000055) == 0)
        {
LABEL_256:
          int v178 = *((_DWORD *)a3 + 5);
          if ((v178 & 0x40000000) != 0)
          {
            uint64_t v180 = (void **)*(a3 - 1);
            uint64_t v179 = v178 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v179 = v178 & 0x7FFFFFF;
            uint64_t v180 = (void **)&a3[-4 * v179];
          }
          if (v179)
          {
            uint64_t v188 = 32 * v179;
            do
            {
              uint64_t v189 = *(void *)(a2 + 64) + 24;
              uint64_t v250 = *v180;
              uint64_t v246 = 0;
              if (sub_1CBA0E618(v189, &v250, &v246))
              {
                uint64_t v190 = v246[1];
                if (v190)
                {
                  if (!*(_DWORD *)(v190 + 24) && v190 != 0)
                  {
                    sub_1CCE5BF28(a2, (uint64_t)a3);
                    llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
                  }
                }
              }
              v180 += 4;
              v188 -= 32;
            }
            while (v188);
          }
          sub_1CCE60778(a1, a2, (uint64_t)a3);
          return;
        }
        uint64_t v182 = (llvm::Value ***)*a3;
        uint64_t v192 = **a3;
        uint64_t v193 = *v192;
        uint64_t v75 = *(void **)(*v192 + 1568);
        if (!v75)
        {
          unint64_t v198 = *(llvm::ConstantInt **)(v193 + 1888);
          unsigned int v199 = *(_DWORD *)(v193 + 1896);
          LODWORD(v251) = v199 >> 8;
          if (v199 >> 8 > 0x40) {
            operator new[]();
          }
          uint64_t v250 = 0;
          uint64_t v75 = llvm::ConstantInt::get(v198, (llvm::LLVMContext *)&v250, v176);
          if (v251 >= 0x41 && v250) {
            MEMORY[0x1D25D9CB0](v250, 0x1000C8000313F17);
          }
          *(void *)(v193 + 1568) = v75;
        }
      }
      if ((v182[1] & 0xFE) != 0x12) {
        goto LABEL_282;
      }
      uint64_t ConstantStoreValueForLoad = (uint64_t)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v182 + 8) | ((unint64_t)(*((_DWORD *)v182 + 2) == 19) << 32)), (uint64_t)v75);
      goto LABEL_94;
    case 0x53:
      uint64_t v250 = v252;
      uint64_t v251 = 0x300000000;
      int v40 = *((_DWORD *)a3 + 5);
      unint64_t v41 = v40 & 0x7FFFFFF;
      if ((v40 & 0x7FFFFFF) != 0)
      {
        uint64_t v42 = 0;
        LODWORD(v43) = 0;
        unint64_t v44 = 0;
        do
        {
          if ((v40 & 0x40000000) != 0) {
            uint64_t v45 = (uint64_t ***)*(a3 - 1);
          }
          else {
            uint64_t v45 = &a3[-4 * v41];
          }
          unsigned int v46 = (&v45[4 * *((unsigned int *)a3 + 15)])[v44];
          if (v43 >= HIDWORD(v251)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v47 = (char *)v250 + 16 * v43;
          *uint64_t v47 = v45[v42];
          v47[1] = v46;
          unint64_t v43 = (v251 + 1);
          LODWORD(v251) = v251 + 1;
          ++v44;
          int v40 = *((_DWORD *)a3 + 5);
          unint64_t v41 = v40 & 0x7FFFFFF;
          v42 += 4;
        }
        while (v44 < v41);
        unsigned int v60 = v250;
        int v61 = (uint64_t *)((char *)v250 + 16 * v43);
        uint64_t v246 = (uint64_t *)a2;
        if (v43)
        {
          uint64_t v62 = 126 - 2 * __clz(v43);
          goto LABEL_126;
        }
      }
      else
      {
        uint64_t v246 = (uint64_t *)a2;
        int v61 = (uint64_t *)v252;
        unsigned int v60 = v252;
      }
      uint64_t v62 = 0;
LABEL_126:
      sub_1CCE613B0((uint64_t)v60, v61, &v246, v62, 1);
      unsigned int v87 = (void **)v250;
      uint64_t v88 = v251;
      uint64_t v89 = sub_1CCE5BF28(a2, (uint64_t)a3);
      uint64_t v3 = sub_1CCE600F8(a2, v87, v88, (const llvm::Instruction *)a3, v89);
      if (v250 != v252) {
        free(v250);
      }
      goto LABEL_8;
    case 0x54:
      uint64_t v29 = (uint64_t)*(a3 - 4);
      if (!v29 || *(unsigned char *)(v29 + 16) || *(uint64_t ***)(v29 + 24) != a3[9] || (*(unsigned char *)(v29 + 33) & 0x20) == 0) {
        goto LABEL_44;
      }
      int v30 = a3[8];
      if (v30 && (*((unsigned char *)v30 + 29) & 0x40) != 0)
      {
        uint64_t v217 = *((unsigned int *)v30 + 2);
        if (v217)
        {
          uint64_t v218 = v30 + 5;
          int v219 = -1;
          while (!*v218 || (*(unsigned char *)(*v218 + 17) & 0x40) == 0)
          {
            ++v219;
            ++v218;
            if (!--v217) {
              goto LABEL_350;
            }
          }
LABEL_351:
          uint64_t v25 = (uint64_t)(&a3[4 * (v219 - 1)])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
          if (!v25)
          {
LABEL_44:
            if (llvm::AAResults::getModRefBehavior(*(void *)(a2 + 24), (uint64_t)a3) != 4)
            {
              if ((llvm::AAResults::getModRefBehavior(*(void *)(a2 + 24), (uint64_t)a3) & 2) != 0)
              {
LABEL_90:
                *a1 = 0;
                a1[1] = 0;
                a1[2] = 0;
                return;
              }
              uint64_t v63 = *(void *)(a2 + 32);
              int v64 = *(_DWORD *)(v63 + 40);
              if (v64)
              {
                uint64_t v65 = *(void *)(v63 + 24);
                unsigned int v66 = v64 - 1;
                uint64_t v67 = (v64 - 1) & ((a3 >> 4) ^ (a3 >> 9));
                uint64_t v68 = *(uint64_t ****)(v65 + 16 * v67);
                if (v68 == a3)
                {
LABEL_88:
                  if (*(void *)(v65 + 16 * v67 + 8))
                  {
                    uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40));
                    goto LABEL_46;
                  }
                }
                else
                {
                  int v69 = 1;
                  while (v68 != (uint64_t ***)-4096)
                  {
                    int v70 = v67 + v69++;
                    uint64_t v67 = v70 & v66;
                    uint64_t v68 = *(uint64_t ****)(v65 + 16 * v67);
                    if (v68 == a3) {
                      goto LABEL_88;
                    }
                  }
                }
              }
            }
            uint64_t v32 = *(void *)(*(void *)(a2 + 1344) + 40);
LABEL_46:
            unint64_t v33 = (unint64_t)sub_1CCE63EF0(a2, (uint64_t)a3, v32);
LABEL_47:
            a1[2] = 0;
            *a1 = v33;
            goto LABEL_9;
          }
          if (*(_DWORD *)(v29 + 36) != 281
            || (uint64_t v222 = *(void *)(a2 + 64) + 24, v250 = a3, v246 = 0, (sub_1CBA0E618(v222, &v250, &v246) & 1) == 0)
            || (uint64_t v28 = v246[1]) == 0
            || (llvm::PredicateBase::getConstraint((_DWORD *)v246[1], v223, (uint64_t)&v246), !(_BYTE)v248))
          {
LABEL_356:
            unint64_t v33 = sub_1CCE610DC(a2, v25);
            goto LABEL_47;
          }
LABEL_358:
          int v243 = (int)v246;
          uint64_t v224 = (uint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
          uint64_t v225 = v247;
          uint64_t v226 = sub_1CCE60C84(a2, v224);
          uint64_t v242 = v225;
          uint64_t v227 = sub_1CCE60C84(a2, v225);
          uint64_t v250 = 0;
          if (sub_1CD40EA84(*(void *)(a2 + 2184), *(_DWORD *)(a2 + 2200), (uint64_t)a3, &v250)) {
            long long v228 = v250;
          }
          else {
            long long v228 = (void *)(*(void *)(a2 + 2184) + 16 * *(unsigned int *)(a2 + 2200));
          }
          unsigned int v229 = sub_1CCE60FA8(a2, (uint64_t)v226);
          unsigned int v230 = sub_1CCE60FA8(a2, (uint64_t)v227);
          if (v230 >= v229)
          {
            uint64_t v231 = *(void *)(a2 + 2184);
            uint64_t v232 = *(unsigned int *)(a2 + 2200);
            if (v227 >= v226 || v229 < v230)
            {
              if (v228 != (void *)(v231 + 16 * v232))
              {
                uint64_t v233 = (llvm::PoisonValue **)v228[1];
                if (v233)
                {
                  if (v233 == v227) {
                    goto LABEL_367;
                  }
                  v228[1] = 0;
                }
              }
              uint64_t v227 = v226;
              uint64_t v242 = v224;
              goto LABEL_374;
            }
          }
          else
          {
            uint64_t v231 = *(void *)(a2 + 2184);
            LODWORD(v232) = *(_DWORD *)(a2 + 2200);
          }
          if (v228 == (void *)(v231 + 16 * v232))
          {
            uint64_t v244 = a3;
            unint64_t v245 = v227;
            sub_1CD4729F8((uint64_t)&v250, a2 + 2184, (uint64_t *)&v244, &v245);
          }
          else
          {
            v228[1] = v227;
          }
LABEL_367:
          if (((1 << v243) & 0x3FC00003C3CLL) != 0) {
            goto LABEL_356;
          }
LABEL_374:
          if (v243 == 32)
          {
            unint64_t v235 = sub_1CCE610DC(a2, (uint64_t)v227);
            *a1 = v235;
            a1[1] = v242;
            a1[2] = v28;
            if (v235) {
              return;
            }
          }
          else if (v243 == 1 && *((unsigned char *)v227 + 16) == 17)
          {
            uint64_t v234 = v227[4] == (llvm::PoisonValue *)&unk_1CFB2E344 ? v227[5] : (llvm::PoisonValue *)(v227 + 3);
            if ((*((unsigned char *)v234 + 28) & 7) != 3)
            {
              *(void *)(a2 + 152) += 32;
              uint64_t v236 = *(void *)(a2 + 72);
              if (((v236 + 7) & 0xFFFFFFFFFFFFFFF8) - v236 + 32 > *(void *)(a2 + 80) - v236)
              {
                unsigned int v239 = *(_DWORD *)(a2 + 96) >> 7;
                if (v239 >= 0x1E) {
                  LOBYTE(v239) = 30;
                }
                uint64_t v240 = 4096 << v239;
                unint64_t v237 = (unint64_t)operator new(4096 << v239, (std::align_val_t)8uLL);
                unsigned int v241 = *(_DWORD *)(a2 + 96);
                if (v241 >= *(_DWORD *)(a2 + 100)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(a2 + 88) + 8 * v241) = v237;
                ++*(_DWORD *)(a2 + 96);
                *(void *)(a2 + 80) = v237 + v240;
                int v238 = *((unsigned __int8 *)v227 + 16);
              }
              else
              {
                unint64_t v237 = (v236 + 7) & 0xFFFFFFFFFFFFFFF8;
                int v238 = 17;
              }
              *(void *)(a2 + 72) = v237 + 32;
              *(_DWORD *)(v237 + 8) = 1;
              *(_DWORD *)(v237 + 12) = v238;
              *(void *)(v237 + 16) = 0;
              *(void *)(v237 + 24) = v227;
              *(void *)unint64_t v237 = &unk_1F2640488;
              *a1 = v237;
              a1[1] = v242;
              a1[2] = v28;
              return;
            }
          }
          goto LABEL_356;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(v29 + 112);
        if (!v31 || (*(unsigned char *)(v31 + 29) & 0x40) == 0) {
          goto LABEL_44;
        }
        uint64_t v220 = *(unsigned int *)(v31 + 8);
        if (v220)
        {
          uint64_t v221 = v31 + 40;
          int v219 = -1;
          while (!*(void *)v221 || (*(unsigned char *)(*(void *)v221 + 17) & 0x40) == 0)
          {
            ++v219;
            v221 += 8;
            if (!--v220) {
              goto LABEL_350;
            }
          }
          goto LABEL_351;
        }
      }
LABEL_350:
      int v219 = 0;
      goto LABEL_351;
    case 0x5C:
    case 0x5D:
      if (a3
        && v7 == 92
        && (uint64_t v3 = (uint64_t)*(a3 - 4), v11 = sub_1CC062BC4(v3), v3)
        && v11
        && *((_DWORD *)a3 + 18) == 1
        && !*(_DWORD *)a3[8])
      {
        int v104 = 13;
        if (((1 << (*(unsigned char *)(*(void *)(v3 - 32) + 36) - 6)) & 0xC000000003) == 0)
        {
          if (((1 << (*(unsigned char *)(*(void *)(v3 - 32) + 36) - 6)) & 0x6000000600000) != 0) {
            int v104 = 15;
          }
          else {
            int v104 = 17;
          }
        }
        uint64_t v105 = (llvm::Value ***)*a3;
        uint64_t v106 = (unint64_t *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
        unint64_t v107 = *v106;
        unint64_t v108 = v106[4];
        *(void *)(a2 + 152) += 48;
        uint64_t v110 = *(void *)(a2 + 72);
        uint64_t v109 = *(void *)(a2 + 80);
        if (((v110 + 7) & 0xFFFFFFFFFFFFFFF8) - v110 + 48 > v109 - v110)
        {
          unsigned int v203 = *(_DWORD *)(a2 + 96) >> 7;
          if (v203 >= 0x1E) {
            LOBYTE(v203) = 30;
          }
          uint64_t v204 = 4096 << v203;
          uint64_t v3 = (uint64_t)operator new(4096 << v203, (std::align_val_t)8uLL);
          unsigned int v205 = *(_DWORD *)(a2 + 96);
          if (v205 >= *(_DWORD *)(a2 + 100)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a2 + 88) + 8 * v205) = v3;
          ++*(_DWORD *)(a2 + 96);
          uint64_t v109 = v3 + v204;
          *(void *)(a2 + 80) = v3 + v204;
        }
        else
        {
          uint64_t v3 = (v110 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(a2 + 72) = v3 + 48;
        *(_DWORD *)(v3 + 8) = 6;
        *(_DWORD *)(v3 + 12) = v104;
        *(void *)(v3 + 16) = 0;
        *(void *)(v3 + 24) = 0;
        *(void *)uint64_t v3 = &unk_1F2640220;
        *(void *)(v3 + 32) = 2;
        *(void *)(v3 + 40) = v105;
        if (*(_DWORD *)(a2 + 176) >= 2u && (uint64_t v111 = *(void *)(a2 + 168), (v112 = *(void **)(v111 + 8)) != 0))
        {
          *(void *)(v111 + 8) = *v112;
        }
        else
        {
          *(void *)(a2 + 152) += 16;
          if (((v3 + 55) & 0xFFFFFFFFFFFFFFF8) - (v3 + 48) + 16 > v109 - (v3 + 48))
          {
            unsigned int v206 = *(_DWORD *)(a2 + 96) >> 7;
            if (v206 >= 0x1E) {
              LOBYTE(v206) = 30;
            }
            uint64_t v207 = 4096 << v206;
            unint64_t v112 = operator new(4096 << v206, (std::align_val_t)8uLL);
            unsigned int v208 = *(_DWORD *)(a2 + 96);
            if (v208 >= *(_DWORD *)(a2 + 100)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a2 + 88) + 8 * v208) = v112;
            ++*(_DWORD *)(a2 + 96);
            *(void *)(a2 + 72) = v112 + 2;
            *(void *)(a2 + 80) = (char *)v112 + v207;
          }
          else
          {
            unint64_t v112 = (void *)((v3 + 55) & 0xFFFFFFFFFFFFFFF8);
            *(void *)(a2 + 72) = v112 + 2;
          }
        }
        *(void *)(v3 + 24) = v112;
        if ((v104 == 17 || v104 == 13)
          && ((unsigned int v113 = sub_1CCE60FA8(a2, v107), v114 = sub_1CCE60FA8(a2, v108), v114 < v113)
           || (v113 >= v114 ? (BOOL v115 = v108 >= v107) : (BOOL v115 = 1), !v115)))
        {
          uint64_t v116 = v108;
        }
        else
        {
          uint64_t v116 = v107;
          unint64_t v107 = v108;
        }
        uint64_t v125 = sub_1CCE60C84(a2, v116);
        uint64_t v126 = *(void *)(v3 + 24);
        uint64_t v127 = *(unsigned int *)(v3 + 36);
        *(_DWORD *)(v3 + 36) = v127 + 1;
        *(void *)(v126 + 8 * v127) = v125;
        uint64_t v128 = sub_1CCE60C84(a2, v107);
        uint64_t v129 = *(void *)(v3 + 24);
        uint64_t v130 = *(unsigned int *)(v3 + 36);
        *(_DWORD *)(v3 + 36) = v130 + 1;
        *(void *)(v129 + 8 * v130) = v128;
        uint64_t v131 = sub_1CC03A350(v104, **(llvm ***)(v3 + 24), *(llvm::Constant **)(*(void *)(v3 + 24) + 8), (const llvm::DataLayout *)(a2 + 1264), (llvm::DSOLocalEquivalent **)3);
        sub_1CCE60CF8((unint64_t *)&v250, a2, v3, (uint64_t)a3, (uint64_t)v131);
        if (v250)
        {
          sub_1CCE5EFA8(a2, (uint64_t)&v250, (uint64_t)a3);
          uint64_t v3 = (uint64_t)v250;
        }
      }
      else
      {
        int v12 = *((unsigned __int8 *)a3 + 16);
        if (a3 && v12 == 93)
        {
          uint64_t v13 = *(void *)(a2 + 72);
          *(void *)(a2 + 152) += 64;
          if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 64 > *(void *)(a2 + 80) - v13)
          {
            unsigned int v143 = *(_DWORD *)(a2 + 96) >> 7;
            if (v143 >= 0x1E) {
              LOBYTE(v143) = 30;
            }
            uint64_t v144 = 4096 << v143;
            uint64_t v3 = (uint64_t)operator new(4096 << v143, (std::align_val_t)8uLL);
            unsigned int v145 = *(_DWORD *)(a2 + 96);
            if (v145 >= *(_DWORD *)(a2 + 100)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a2 + 88) + 8 * v145) = v3;
            ++*(_DWORD *)(a2 + 96);
            *(void *)(a2 + 80) = v3 + v144;
          }
          else
          {
            uint64_t v3 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(a2 + 72) = v3 + 64;
          unsigned int v14 = *((_DWORD *)a3 + 5) & 0x7FFFFFF;
          unsigned int v15 = *((_DWORD *)a3 + 18);
          *(void *)(v3 + 8) = 0xFFFFFFFD00000007;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
          *(void *)(v3 + 32) = v14;
          *(void *)(v3 + 40) = 0;
          *(void *)uint64_t v3 = &unk_1F2640320;
          *(void *)(v3 + 48) = v15;
          *(void *)(v3 + 56) = 0;
          sub_1CCE612B0(a2, (uint64_t)a3, v3);
          uint64_t v16 = sub_1CB906F34((uint64_t *)(a2 + 72), 4 * *(unsigned int *)(v3 + 48), 2);
          *(void *)(v3 + 56) = v16;
          uint64_t v17 = *((unsigned int *)a3 + 18);
          if (v17)
          {
            unint64_t v18 = (int *)a3[8];
            uint64_t v19 = 4 * v17;
            do
            {
              int v20 = *v18++;
              uint64_t v21 = *(unsigned int *)(v3 + 52);
              *(_DWORD *)(v3 + 52) = v21 + 1;
              *(_DWORD *)(v16 + 4 * v21) = v20;
              v19 -= 4;
            }
            while (v19);
          }
        }
        else if (a3 && v12 == 92)
        {
          uint64_t v48 = *(void *)(a2 + 72);
          *(void *)(a2 + 152) += 64;
          if (((v48 + 7) & 0xFFFFFFFFFFFFFFF8) - v48 + 64 > *(void *)(a2 + 80) - v48)
          {
            unsigned int v164 = *(_DWORD *)(a2 + 96) >> 7;
            if (v164 >= 0x1E) {
              LOBYTE(v164) = 30;
            }
            uint64_t v165 = 4096 << v164;
            uint64_t v3 = (uint64_t)operator new(4096 << v164, (std::align_val_t)8uLL);
            unsigned int v166 = *(_DWORD *)(a2 + 96);
            if (v166 >= *(_DWORD *)(a2 + 100)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a2 + 88) + 8 * v166) = v3;
            ++*(_DWORD *)(a2 + 96);
            *(void *)(a2 + 80) = v3 + v165;
          }
          else
          {
            uint64_t v3 = (v48 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(a2 + 72) = v3 + 64;
          unsigned int v49 = *((_DWORD *)a3 + 5) & 0x7FFFFFF;
          unsigned int v50 = *((_DWORD *)a3 + 18);
          *(void *)(v3 + 8) = 0xFFFFFFFD00000007;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
          *(void *)(v3 + 32) = v49;
          *(void *)(v3 + 40) = 0;
          *(void *)uint64_t v3 = &unk_1F2640320;
          *(void *)(v3 + 48) = v50;
          *(void *)(v3 + 56) = 0;
          sub_1CCE612B0(a2, (uint64_t)a3, v3);
          uint64_t v51 = sub_1CB906F34((uint64_t *)(a2 + 72), 4 * *(unsigned int *)(v3 + 48), 2);
          *(void *)(v3 + 56) = v51;
          uint64_t v52 = *((unsigned int *)a3 + 18);
          if (v52)
          {
            unsigned int v53 = (int *)a3[8];
            uint64_t v54 = 4 * v52;
            do
            {
              int v55 = *v53++;
              uint64_t v56 = *(unsigned int *)(v3 + 52);
              *(_DWORD *)(v3 + 52) = v56 + 1;
              *(_DWORD *)(v51 + 4 * v56) = v55;
              v54 -= 4;
            }
            while (v54);
          }
        }
      }
      goto LABEL_8;
    default:
      goto LABEL_90;
  }
}

void sub_1CCE5EFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6) {
    BOOL v7 = v6 == a3;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    sub_1CCE643F8(a1, v6, a3);
  }
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *(void *)(a2 + 16);
  if (!v8) {
    goto LABEL_9;
  }
  int v9 = *(_DWORD *)(v8 + 24);
  if (v9 != 1)
  {
    if (v9) {
      goto LABEL_9;
    }
    uint64_t v10 = sub_1CD4D60C0(a1 + 1720, (uint64_t *)(v8 + 48));
    uint64_t v11 = v10[2];
    uint64_t v12 = *((unsigned int *)v10 + 7);
    if (v11 == v10[1])
    {
      if (v12)
      {
        uint64_t v13 = 0;
        uint64_t v17 = 8 * v12;
        unint64_t v18 = (uint64_t *)v10[2];
        while (*v18 != a3)
        {
          if (*v18 == -2) {
            uint64_t v13 = v18;
          }
          ++v18;
          v17 -= 8;
          if (!v17)
          {
            if (v13) {
              goto LABEL_66;
            }
            goto LABEL_28;
          }
        }
        goto LABEL_9;
      }
LABEL_28:
      unsigned int v19 = *((_DWORD *)v10 + 6);
      if (v12 < v19)
      {
LABEL_29:
        *((_DWORD *)v10 + 7) = v12 + 1;
        *(void *)(v11 + 8 * v12) = a3;
        goto LABEL_9;
      }
    }
    else
    {
      unsigned int v19 = *((_DWORD *)v10 + 6);
    }
    if (3 * v19 <= 4 * ((int)v12 - *((_DWORD *)v10 + 8)))
    {
      if (v19 >= 0x40) {
        v19 *= 2;
      }
      else {
        unsigned int v19 = 128;
      }
    }
    else if (v19 - v12 >= v19 >> 3)
    {
      goto LABEL_47;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v10 + 1), v19);
    unsigned int v19 = *((_DWORD *)v10 + 6);
    uint64_t v11 = v10[2];
LABEL_47:
    unsigned int v28 = v19 - 1;
    unsigned int v29 = (v19 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    unint64_t v22 = (uint64_t *)(v11 + 8 * v29);
    uint64_t v30 = *v22;
    if (*v22 != -1)
    {
      __int16 v24 = 0;
      int v31 = 1;
      while (v30 != a3)
      {
        if (v24) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v30 == -2;
        }
        if (v32) {
          __int16 v24 = v22;
        }
        unsigned int v33 = v29 + v31++;
        unsigned int v29 = v33 & v28;
        unint64_t v22 = (uint64_t *)(v11 + 8 * (v33 & v28));
        uint64_t v30 = *v22;
        if (*v22 == -1) {
          goto LABEL_59;
        }
      }
      goto LABEL_9;
    }
    goto LABEL_58;
  }
  uint64_t v10 = sub_1CD4D60C0(a1 + 1720, (uint64_t *)(v8 + 48));
  uint64_t v11 = v10[2];
  uint64_t v12 = *((unsigned int *)v10 + 7);
  if (v11 == v10[1])
  {
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 8 * v12;
      unsigned int v15 = (uint64_t *)v10[2];
      while (*v15 != a3)
      {
        if (*v15 == -2) {
          uint64_t v13 = v15;
        }
        ++v15;
        v14 -= 8;
        if (!v14)
        {
          if (!v13) {
            goto LABEL_18;
          }
LABEL_66:
          *uint64_t v13 = a3;
          --*((_DWORD *)v10 + 8);
          goto LABEL_9;
        }
      }
      goto LABEL_9;
    }
LABEL_18:
    unsigned int v16 = *((_DWORD *)v10 + 6);
    if (v12 < v16) {
      goto LABEL_29;
    }
  }
  else
  {
    unsigned int v16 = *((_DWORD *)v10 + 6);
  }
  if (3 * v16 <= 4 * ((int)v12 - *((_DWORD *)v10 + 8)))
  {
    if (v16 >= 0x40) {
      v16 *= 2;
    }
    else {
      unsigned int v16 = 128;
    }
    goto LABEL_71;
  }
  if (v16 - v12 < v16 >> 3)
  {
LABEL_71:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v10 + 1), v16);
    unsigned int v16 = *((_DWORD *)v10 + 6);
    uint64_t v11 = v10[2];
  }
  unsigned int v20 = v16 - 1;
  unsigned int v21 = (v16 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  unint64_t v22 = (uint64_t *)(v11 + 8 * v21);
  uint64_t v23 = *v22;
  if (*v22 == -1)
  {
LABEL_58:
    __int16 v24 = 0;
LABEL_59:
    if (v24) {
      uint64_t v34 = v24;
    }
    else {
      uint64_t v34 = v22;
    }
    if (*v34 != a3)
    {
      if (*v34 == -2) {
        --*((_DWORD *)v10 + 8);
      }
      else {
        ++*((_DWORD *)v10 + 7);
      }
      uint64_t *v34 = a3;
    }
    goto LABEL_9;
  }
  __int16 v24 = 0;
  int v25 = 1;
  while (v23 != a3)
  {
    if (v24) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v23 == -2;
    }
    if (v26) {
      __int16 v24 = v22;
    }
    unsigned int v27 = v21 + v25++;
    unsigned int v21 = v27 & v20;
    unint64_t v22 = (uint64_t *)(v11 + 8 * (v27 & v20));
    uint64_t v23 = *v22;
    if (*v22 == -1) {
      goto LABEL_59;
    }
  }
LABEL_9:
  *(void *)(a2 + 16) = 0;
}

void *sub_1CCE5F290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 1384);
  int v7 = *(_DWORD *)(a1 + 1400);
  uint64_t v8 = sub_1CCE61078(v6, v7, a2);
  int v9 = *(_DWORD *)(a3 + 8);
  if (a3 && v9 == 2)
  {
    uint64_t v10 = sub_1CCE61078(v6, v7, *(void *)(a3 + 24));
    if (v10) {
      goto LABEL_14;
    }
LABEL_7:
    v177[0] = (uint64_t *)a3;
    v177[1] = 0;
    int v178 = 0;
    char v11 = sub_1CCE5BE08(*(void *)(a1 + 1840), *(_DWORD *)(a1 + 1856), (uint64_t *)v177, &v178);
    uint64_t v12 = v178;
    if (v11)
    {
      uint64_t v10 = v178[1];
      goto LABEL_14;
    }
    int v13 = *(_DWORD *)(a1 + 1848);
    unsigned int v14 = *(_DWORD *)(a1 + 1856);
    if (4 * v13 + 4 >= 3 * v14)
    {
      v14 *= 2;
    }
    else if (v14 + ~v13 - *(_DWORD *)(a1 + 1852) > v14 >> 3)
    {
      goto LABEL_11;
    }
    sub_1CCE5BCB0(a1 + 1840, v14);
    int v178 = 0;
    sub_1CCE5BE08(*(void *)(a1 + 1840), *(_DWORD *)(a1 + 1856), (uint64_t *)v177, &v178);
    uint64_t v12 = v178;
LABEL_11:
    ++*(_DWORD *)(a1 + 1848);
    if (*v12 != -8) {
      --*(_DWORD *)(a1 + 1852);
    }
    uint64_t *v12 = a3;
    v12[1] = 0;
    sub_1CCE5B860();
  }
  if (v9 != 3) {
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(a1 + 1344);
  if (!v10) {
    goto LABEL_7;
  }
LABEL_14:
  uint64_t v15 = *(void *)(a1 + 1880);
  uint64_t v16 = *(void *)(a1 + 1872);
  if (v15 == v16)
  {
    uint64_t v17 = *(unsigned int *)(a1 + 1892);
    unint64_t v18 = (void *)(v15 + 8 * v17);
    if (v17)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 8 * v17;
      while (*(void *)(v15 + v19) != a2)
      {
        v19 += 8;
        if (v20 == v19) {
          goto LABEL_32;
        }
      }
      unint64_t v18 = (void *)(v15 + v19);
    }
LABEL_32:
    uint64_t v16 = *(void *)(a1 + 1880);
  }
  else
  {
    uint64_t v21 = *(unsigned int *)(a1 + 1888);
    int v22 = v21 - 1;
    unsigned int v23 = (v21 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v18 = (void *)(v15 + 8 * v23);
    uint64_t v24 = *v18;
    if (*v18 == -1)
    {
      int v25 = 0;
LABEL_89:
      if (v25) {
        unint64_t v18 = v25;
      }
      if (*v18 != a2) {
        unint64_t v18 = (void *)(v15 + 8 * v21);
      }
    }
    else
    {
      int v25 = 0;
      int v26 = 1;
      while (v24 != a2)
      {
        if (v25) {
          BOOL v27 = 0;
        }
        else {
          BOOL v27 = v24 == -2;
        }
        if (v27) {
          int v25 = v18;
        }
        unsigned int v28 = v23 + v26++;
        unsigned int v23 = v28 & v22;
        unint64_t v18 = (void *)(v15 + 8 * (v28 & v22));
        uint64_t v24 = *v18;
        if (*v18 == -1) {
          goto LABEL_89;
        }
      }
    }
  }
  BOOL v27 = v15 == v16;
  uint64_t v29 = 1888;
  if (v27) {
    uint64_t v29 = 1892;
  }
  if (v18 == (void *)(v15 + 8 * *(unsigned int *)(a1 + v29)))
  {
    if (v8 == v10) {
      goto LABEL_282;
    }
  }
  else
  {
    void *v18 = -2;
    ++*(_DWORD *)(a1 + 1896);
    if (v8 == v10) {
      goto LABEL_206;
    }
  }
  if (*(void *)(v8 + 16) == a2)
  {
    *(void *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 24) = -1;
  }
  uint64_t v31 = *(void *)(v8 + 56);
  uint64_t v30 = *(void *)(v8 + 64);
  if (v30 == v31)
  {
    uint64_t v32 = *(unsigned int *)(v8 + 76);
    unsigned int v33 = (void *)(v30 + 8 * v32);
    if (v32)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 8 * v32;
      while (*(void *)(v30 + v34) != a2)
      {
        v34 += 8;
        if (v35 == v34) {
          goto LABEL_59;
        }
      }
      unsigned int v33 = (void *)(v30 + v34);
    }
LABEL_59:
    uint64_t v31 = *(void *)(v8 + 64);
  }
  else
  {
    uint64_t v36 = *(unsigned int *)(v8 + 72);
    int v37 = v36 - 1;
    unsigned int v38 = (v36 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v33 = (void *)(v30 + 8 * v38);
    uint64_t v39 = *v33;
    if (*v33 == -1)
    {
      int v40 = 0;
LABEL_165:
      if (v40) {
        unsigned int v33 = v40;
      }
      if (*v33 != a2) {
        unsigned int v33 = (void *)(v30 + 8 * v36);
      }
    }
    else
    {
      int v40 = 0;
      int v41 = 1;
      while (v39 != a2)
      {
        if (v40) {
          BOOL v42 = 0;
        }
        else {
          BOOL v42 = v39 == -2;
        }
        if (v42) {
          int v40 = v33;
        }
        unsigned int v43 = v38 + v41++;
        unsigned int v38 = v43 & v37;
        unsigned int v33 = (void *)(v30 + 8 * (v43 & v37));
        uint64_t v39 = *v33;
        if (*v33 == -1) {
          goto LABEL_165;
        }
      }
    }
  }
  BOOL v27 = v30 == v31;
  uint64_t v44 = 72;
  if (v27) {
    uint64_t v44 = 76;
  }
  if (v33 != (void *)(v30 + 8 * *(unsigned int *)(v8 + v44)))
  {
    *unsigned int v33 = -2;
    ++*(_DWORD *)(v8 + 80);
  }
  uint64_t v45 = *(void *)(v10 + 64);
  uint64_t v46 = *(unsigned int *)(v10 + 76);
  if (v45 != *(void *)(v10 + 56))
  {
    unsigned int v50 = *(_DWORD *)(v10 + 72);
    goto LABEL_75;
  }
  if (!v46)
  {
LABEL_72:
    unsigned int v50 = *(_DWORD *)(v10 + 72);
    if (v46 < v50)
    {
      *(_DWORD *)(v10 + 76) = v46 + 1;
      *(void *)(v45 + 8 * v46) = a2;
      goto LABEL_101;
    }
LABEL_75:
    if (3 * v50 <= 4 * ((int)v46 - *(_DWORD *)(v10 + 80)))
    {
      if (v50 >= 0x40) {
        v50 *= 2;
      }
      else {
        unsigned int v50 = 128;
      }
    }
    else if (v50 - v46 >= v50 >> 3)
    {
      goto LABEL_77;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v10 + 56), v50);
    unsigned int v50 = *(_DWORD *)(v10 + 72);
    uint64_t v45 = *(void *)(v10 + 64);
LABEL_77:
    unsigned int v51 = v50 - 1;
    unsigned int v52 = (v50 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v53 = (uint64_t *)(v45 + 8 * v52);
    uint64_t v54 = *v53;
    if (*v53 == -1)
    {
      int v55 = 0;
LABEL_94:
      if (v55) {
        unsigned int v59 = v55;
      }
      else {
        unsigned int v59 = v53;
      }
      if (*v59 != a2)
      {
        if (*v59 == -2) {
          --*(_DWORD *)(v10 + 80);
        }
        else {
          ++*(_DWORD *)(v10 + 76);
        }
        uint64_t *v59 = a2;
      }
    }
    else
    {
      int v55 = 0;
      int v56 = 1;
      while (v54 != a2)
      {
        if (v55) {
          BOOL v57 = 0;
        }
        else {
          BOOL v57 = v54 == -2;
        }
        if (v57) {
          int v55 = v53;
        }
        unsigned int v58 = v52 + v56++;
        unsigned int v52 = v58 & v51;
        unsigned int v53 = (uint64_t *)(v45 + 8 * (v58 & v51));
        uint64_t v54 = *v53;
        if (*v53 == -1) {
          goto LABEL_94;
        }
      }
    }
    goto LABEL_101;
  }
  uint64_t v47 = 0;
  uint64_t v48 = 8 * v46;
  unsigned int v49 = *(uint64_t **)(v10 + 64);
  while (*v49 != a2)
  {
    if (*v49 == -2) {
      uint64_t v47 = v49;
    }
    ++v49;
    v48 -= 8;
    if (!v48)
    {
      if (!v47) {
        goto LABEL_72;
      }
      *uint64_t v47 = a2;
      --*(_DWORD *)(v10 + 80);
      break;
    }
  }
LABEL_101:
  if (*(void *)(v10 + 8) == a2) {
    goto LABEL_111;
  }
  int v60 = *(_DWORD *)(a1 + 2224);
  if (v60)
  {
    uint64_t v61 = *(void *)(a1 + 2208);
    unsigned int v62 = v60 - 1;
    uint64_t v63 = (v60 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v64 = *(void *)(v61 + 16 * v63);
    if (v64 == a2)
    {
LABEL_107:
      unsigned int v67 = *(_DWORD *)(v61 + 16 * v63 + 8);
      goto LABEL_109;
    }
    int v65 = 1;
    while (v64 != -4096)
    {
      int v66 = v63 + v65++;
      uint64_t v63 = v66 & v62;
      uint64_t v64 = *(void *)(v61 + 16 * v63);
      if (v64 == a2) {
        goto LABEL_107;
      }
    }
  }
  unsigned int v67 = 0;
LABEL_109:
  if (*(_DWORD *)(v10 + 24) > v67)
  {
    *(void *)(v10 + 16) = a2;
    *(_DWORD *)(v10 + 24) = v67;
  }
LABEL_111:
  if (*(unsigned char *)(a2 + 16) == 61)
  {
    --*(_DWORD *)(v8 + 168);
    LODWORD(v68) = *(_DWORD *)(v10 + 168);
    if (!v68)
    {
      uint64_t v68 = *(void *)(v10 + 32);
      if (v68)
      {
        LODWORD(v68) = 0;
      }
      else if (a3 && *(_DWORD *)(a3 + 8) == 12)
      {
        *(void *)(v10 + 32) = *(void *)(a3 + 64);
        sub_1CCE64B00(a1, v10);
        *(void *)(v10 + 8) = a2;
        LODWORD(v68) = *(_DWORD *)(v10 + 168);
      }
    }
    *(_DWORD *)(v10 + 168) = v68 + 1;
  }
  uint64_t v69 = sub_1CCE5C938(a1, a2);
  if (v69)
  {
    uint64_t v70 = v69;
    if (*(unsigned char *)(v69 + 16) == 26)
    {
      if (!*(void *)(v10 + 40))
      {
        *(void *)(v10 + 40) = v69;
        sub_1CCE5C870(a1, v10);
      }
      sub_1CCE5BF9C(a1, v70, v10);
      if (*(void *)(v8 + 40) == v70)
      {
        if (*(_DWORD *)(v8 + 168) || *(_DWORD *)(v8 + 140) != *(_DWORD *)(v8 + 144))
        {
          *(void *)(v8 + 40) = sub_1CCE5C5BC(a1, v8);
          sub_1CCE5C870(a1, v8);
        }
        else
        {
          *(void *)(v8 + 40) = 0;
        }
      }
    }
  }
  v177[0] = (uint64_t *)a2;
  *sub_1CC4EB4AC(a1 + 1384, (uint64_t *)v177) = v10;
  unsigned int v71 = *(_DWORD *)(v8 + 76);
  unsigned int v72 = v71 - *(_DWORD *)(v8 + 80);
  if (v72 || *(void *)(a1 + 1344) == v8)
  {
    if (*(void *)(v8 + 8) != a2) {
      goto LABEL_179;
    }
    if (!*(_DWORD *)(v8 + 168) && *(void *)(v8 + 32)) {
      *(void *)(v8 + 32) = 0;
    }
    if (v72 == 1 || *(void *)(a1 + 1344) == v8)
    {
      uint64_t v92 = *(unint64_t **)(v8 + 64);
      uint64_t v93 = 72;
      if (v92 == *(unint64_t **)(v8 + 56)) {
        uint64_t v93 = 76;
      }
      uint64_t v94 = *(unsigned int *)(v8 + v93);
      if (v94)
      {
        uint64_t v95 = 8 * v94;
        uint64_t v96 = &v92[v94];
        while (*v92 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v92;
          v95 -= 8;
          if (!v95)
          {
            uint64_t v92 = v96;
            break;
          }
        }
      }
      unint64_t v73 = *v92;
      goto LABEL_178;
    }
    unint64_t v73 = *(void *)(v8 + 16);
    if (!v73)
    {
      uint64_t v74 = *(void *)(v8 + 64);
      if (v74 == *(void *)(v8 + 56)) {
        uint64_t v75 = v71;
      }
      else {
        uint64_t v75 = *(unsigned int *)(v8 + 72);
      }
      if (v75)
      {
        uint64_t v76 = 8 * v75;
        uint64_t v77 = *(unint64_t **)(v8 + 64);
        while (*v77 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v77;
          v76 -= 8;
          if (!v76) {
            goto LABEL_177;
          }
        }
      }
      else
      {
        uint64_t v77 = *(unint64_t **)(v8 + 64);
      }
      int v79 = (unint64_t *)(v74 + 8 * v75);
      if (v77 != v79)
      {
        unint64_t v73 = 0;
        uint64_t v80 = *(void *)(a1 + 2208);
        int v81 = *(_DWORD *)(a1 + 2224);
        unsigned int v82 = v81 - 1;
        unint64_t v83 = *v77;
        unsigned int v84 = -1;
        if (v81)
        {
LABEL_151:
          uint64_t v85 = ((v83 >> 4) ^ (v83 >> 9)) & v82;
          uint64_t v86 = *(void *)(v80 + 16 * v85);
          if (v83 == v86)
          {
LABEL_155:
            unsigned int v89 = *(_DWORD *)(v80 + 16 * v85 + 8);
            goto LABEL_157;
          }
          int v87 = 1;
          while (v86 != -4096)
          {
            int v88 = v85 + v87++;
            uint64_t v85 = v88 & v82;
            uint64_t v86 = *(void *)(v80 + 16 * v85);
            if (v83 == v86) {
              goto LABEL_155;
            }
          }
        }
LABEL_156:
        unsigned int v89 = 0;
LABEL_157:
        if (v89 < v84)
        {
          unint64_t v73 = v83;
          unsigned int v84 = v89;
        }
        uint64_t v90 = v77 + 1;
        while (v90 != v79)
        {
          unint64_t v91 = *v90++;
          unint64_t v83 = v91;
          if (v91 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v77 = v90 - 1;
            if (v81) {
              goto LABEL_151;
            }
            goto LABEL_156;
          }
        }
        goto LABEL_178;
      }
LABEL_177:
      unint64_t v73 = 0;
    }
LABEL_178:
    *(void *)(v8 + 8) = v73;
    *(void *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 24) = -1;
    sub_1CCE64B00(a1, v8);
    goto LABEL_179;
  }
  if (*(void *)(v8 + 48))
  {
    v177[0] = *(uint64_t **)(v8 + 48);
    unsigned int v78 = sub_1CCE649F8(a1 + 1840, v177);
    if ((uint64_t *)(*(void *)(a1 + 1840) + 16 * *(unsigned int *)(a1 + 1856)) != v78)
    {
      uint64_t *v78 = 0x7FFFFFFF0;
      *(int32x2_t *)(a1 + 1848) = vadd_s32(*(int32x2_t *)(a1 + 1848), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
LABEL_179:
  int v178 = (uint64_t *)a3;
  v177[0] = 0;
  int v97 = sub_1CD77DE98(*(void *)(a1 + 1624), *(_DWORD *)(a1 + 1640), (uint64_t *)&v178, v177);
  uint64_t v98 = v177[0];
  if (v97) {
    BOOL v99 = v177[0] == (uint64_t *)(*(void *)(a1 + 1624) + 56 * *(unsigned int *)(a1 + 1640));
  }
  else {
    BOOL v99 = 1;
  }
  if (v99) {
    goto LABEL_206;
  }
  uint64_t v101 = v177[0][1];
  uint64_t v100 = (char *)v177[0][2];
  uint64_t v102 = 24;
  if (v100 == (char *)v101) {
    uint64_t v102 = 28;
  }
  uint64_t v103 = *(unsigned int *)((char *)v177[0] + v102);
  int v104 = (unint64_t *)v177[0][2];
  if (v103)
  {
    uint64_t v105 = 8 * v103;
    int v104 = (unint64_t *)v177[0][2];
    while (*v104 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v104;
      v105 -= 8;
      if (!v105) {
        goto LABEL_203;
      }
    }
  }
  uint64_t v106 = (unint64_t *)&v100[8 * v103];
  if (v104 != v106)
  {
    uint64_t v107 = *(void *)(a1 + 2208);
    int v108 = *(_DWORD *)(a1 + 2224);
    unsigned int v109 = v108 - 1;
    uint64_t v110 = *(void *)(a1 + 2088);
    unint64_t v111 = *v104;
    if (v108)
    {
LABEL_192:
      uint64_t v112 = ((v111 >> 4) ^ (v111 >> 9)) & v109;
      uint64_t v113 = *(void *)(v107 + 16 * v112);
      if (v111 == v113)
      {
LABEL_196:
        unsigned int v116 = *(_DWORD *)(v107 + 16 * v112 + 8);
        goto LABEL_198;
      }
      int v114 = 1;
      while (v113 != -4096)
      {
        int v115 = v112 + v114++;
        uint64_t v112 = v115 & v109;
        uint64_t v113 = *(void *)(v107 + 16 * v112);
        if (v111 == v113) {
          goto LABEL_196;
        }
      }
    }
LABEL_197:
    unsigned int v116 = 0;
LABEL_198:
    *(void *)(v110 + 8 * (v116 >> 6)) |= 1 << v116;
    uint64_t v117 = v104 + 1;
    while (v117 != v106)
    {
      unint64_t v118 = *v117++;
      unint64_t v111 = v118;
      if (v118 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v104 = v117 - 1;
        if (v108) {
          goto LABEL_192;
        }
        goto LABEL_197;
      }
    }
  }
LABEL_203:
  if (v100 != (char *)v101) {
    free(v100);
  }
  uint64_t *v98 = 0x7FFFFFFF0;
  *(int32x2_t *)(a1 + 1632) = vadd_s32(*(int32x2_t *)(a1 + 1632), (int32x2_t)0x1FFFFFFFFLL);
LABEL_206:
  uint64_t v119 = *(void *)(a2 + 8);
  if (v119)
  {
    uint64_t v120 = *(void *)(a1 + 2208);
    int v121 = *(_DWORD *)(a1 + 2224);
    unsigned int v122 = v121 - 1;
    uint64_t v123 = *(void *)(a1 + 2088);
    while (1)
    {
      if (!v121) {
        goto LABEL_214;
      }
      uint64_t v124 = *(void *)(v119 + 24);
      uint64_t v125 = ((v124 >> 4) ^ (v124 >> 9)) & v122;
      uint64_t v126 = *(void *)(v120 + 16 * v125);
      if (v124 != v126) {
        break;
      }
LABEL_213:
      unsigned int v129 = *(_DWORD *)(v120 + 16 * v125 + 8);
LABEL_215:
      *(void *)(v123 + 8 * (v129 >> 6)) |= 1 << v129;
      uint64_t v119 = *(void *)(v119 + 8);
      if (!v119) {
        goto LABEL_216;
      }
    }
    int v127 = 1;
    while (v126 != -4096)
    {
      int v128 = v125 + v127++;
      uint64_t v125 = v128 & v122;
      uint64_t v126 = *(void *)(v120 + 16 * v125);
      if (v124 == v126) {
        goto LABEL_213;
      }
    }
LABEL_214:
    unsigned int v129 = 0;
    goto LABEL_215;
  }
LABEL_216:
  v177[0] = 0;
  int v130 = sub_1CD4A7E9C(*(void *)(a1 + 1600), *(_DWORD *)(a1 + 1616), a2, v177);
  uint64_t v131 = v177[0];
  if (v130) {
    BOOL v132 = v177[0] == (uint64_t *)(*(void *)(a1 + 1600) + 56 * *(unsigned int *)(a1 + 1616));
  }
  else {
    BOOL v132 = 1;
  }
  if (!v132)
  {
    uint64_t v134 = v177[0][1];
    uint64_t v133 = (char *)v177[0][2];
    uint64_t v135 = 24;
    if (v133 == (char *)v134) {
      uint64_t v135 = 28;
    }
    uint64_t v136 = *(unsigned int *)((char *)v177[0] + v135);
    unsigned int v137 = (unint64_t *)v177[0][2];
    if (v136)
    {
      uint64_t v138 = 8 * v136;
      unsigned int v137 = (unint64_t *)v177[0][2];
      while (*v137 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v137;
        v138 -= 8;
        if (!v138) {
          goto LABEL_240;
        }
      }
    }
    uint64_t v139 = (unint64_t *)&v133[8 * v136];
    if (v137 == v139) {
      goto LABEL_240;
    }
    uint64_t v140 = *(void *)(a1 + 2208);
    int v141 = *(_DWORD *)(a1 + 2224);
    unsigned int v142 = v141 - 1;
    uint64_t v143 = *(void *)(a1 + 2088);
    unint64_t v144 = *v137;
    if (v141)
    {
LABEL_229:
      uint64_t v145 = ((v144 >> 4) ^ (v144 >> 9)) & v142;
      uint64_t v146 = *(void *)(v140 + 16 * v145);
      if (v144 == v146)
      {
LABEL_233:
        unsigned int v149 = *(_DWORD *)(v140 + 16 * v145 + 8);
        goto LABEL_235;
      }
      int v147 = 1;
      while (v146 != -4096)
      {
        int v148 = v145 + v147++;
        uint64_t v145 = v148 & v142;
        uint64_t v146 = *(void *)(v140 + 16 * v145);
        if (v144 == v146) {
          goto LABEL_233;
        }
      }
    }
LABEL_234:
    unsigned int v149 = 0;
LABEL_235:
    *(void *)(v143 + 8 * (v149 >> 6)) |= 1 << v149;
    uint64_t v150 = v137 + 1;
    while (v150 != v139)
    {
      unint64_t v151 = *v150++;
      unint64_t v144 = v151;
      if (v151 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        unsigned int v137 = v150 - 1;
        if (v141) {
          goto LABEL_229;
        }
        goto LABEL_234;
      }
    }
LABEL_240:
    if (v133 != (char *)v134) {
      free(v133);
    }
    uint64_t *v131 = -8192;
    *(int32x2_t *)(a1 + 1608) = vadd_s32(*(int32x2_t *)(a1 + 1608), (int32x2_t)0x1FFFFFFFFLL);
  }
  uint64_t v152 = sub_1CCE5C938(a1, a2);
  if (v152) {
    sub_1CCE5C2D8(a1, v152);
  }
  if (*(unsigned __int8 *)(a2 + 16) - 83 < 0xFFFFFFFE) {
    goto LABEL_271;
  }
  v177[0] = 0;
  if (!sub_1CD4A7E9C(*(void *)(a1 + 1720), *(_DWORD *)(a1 + 1736), a2, v177)) {
    goto LABEL_271;
  }
  uint64_t v153 = v177[0];
  if (v177[0] == (uint64_t *)(*(void *)(a1 + 1720) + 56 * *(unsigned int *)(a1 + 1736))) {
    goto LABEL_271;
  }
  uint64_t v155 = v177[0][1];
  int v154 = (char *)v177[0][2];
  uint64_t v156 = 24;
  if (v154 == (char *)v155) {
    uint64_t v156 = 28;
  }
  uint64_t v157 = *(unsigned int *)((char *)v177[0] + v156);
  uint64_t v158 = (unint64_t *)v177[0][2];
  if (v157)
  {
    uint64_t v159 = 8 * v157;
    uint64_t v158 = (unint64_t *)v177[0][2];
    while (*v158 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v158;
      v159 -= 8;
      if (!v159) {
        goto LABEL_268;
      }
    }
  }
  unsigned int v160 = (unint64_t *)&v154[8 * v157];
  if (v158 != v160)
  {
    uint64_t v161 = *(void *)(a1 + 2208);
    int v162 = *(_DWORD *)(a1 + 2224);
    unsigned int v163 = v162 - 1;
    uint64_t v164 = *(void *)(a1 + 2088);
    unint64_t v165 = *v158;
    if (v162)
    {
LABEL_257:
      uint64_t v166 = ((v165 >> 4) ^ (v165 >> 9)) & v163;
      uint64_t v167 = *(void *)(v161 + 16 * v166);
      if (v165 == v167)
      {
LABEL_261:
        unsigned int v170 = *(_DWORD *)(v161 + 16 * v166 + 8);
        goto LABEL_263;
      }
      int v168 = 1;
      while (v167 != -4096)
      {
        int v169 = v166 + v168++;
        uint64_t v166 = v169 & v163;
        uint64_t v167 = *(void *)(v161 + 16 * v166);
        if (v165 == v167) {
          goto LABEL_261;
        }
      }
    }
LABEL_262:
    unsigned int v170 = 0;
LABEL_263:
    *(void *)(v164 + 8 * (v170 >> 6)) |= 1 << v170;
    uint64_t v171 = v158 + 1;
    while (v171 != v160)
    {
      unint64_t v172 = *v171++;
      unint64_t v165 = v172;
      if (v172 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v158 = v171 - 1;
        if (v162) {
          goto LABEL_257;
        }
        goto LABEL_262;
      }
    }
  }
LABEL_268:
  if (v154 != (char *)v155) {
    free(v154);
  }
  *uint64_t v153 = -8192;
  *(int32x2_t *)(a1 + 1728) = vadd_s32(*(int32x2_t *)(a1 + 1728), (int32x2_t)0x1FFFFFFFFLL);
LABEL_271:
  if (v8 != v10 && *(unsigned char *)(a2 + 16) == 61)
  {
    v177[0] = 0;
    if (sub_1CD40EA84(*(void *)(a1 + 1408), *(_DWORD *)(a1 + 1424), a2, v177))
    {
      uint64_t v173 = v177[0][1];
      if (v173)
      {
        if (*(_DWORD *)(v173 + 8) == 12)
        {
          unsigned int v174 = *(_DWORD *)(a3 + 12);
          if (v174 != *(_DWORD *)(v173 + 12)
            || v174 <= 0xFFFFFFFD
            && ((*(_DWORD *)(a3 + 8) - 11) > 1
             || ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v177[0][1]) & 1) == 0))
          {
            v177[0] = (uint64_t *)v173;
            uint64_t v175 = sub_1CCE649F8(a1 + 1840, v177);
            if ((uint64_t *)(*(void *)(a1 + 1840) + 16 * *(unsigned int *)(a1 + 1856)) != v175)
            {
              *uint64_t v175 = 0x7FFFFFFF0;
              *(int32x2_t *)(a1 + 1848) = vadd_s32(*(int32x2_t *)(a1 + 1848), (int32x2_t)0x1FFFFFFFFLL);
            }
          }
        }
      }
    }
  }
LABEL_282:
  v177[0] = (uint64_t *)a2;
  uint64_t result = sub_1CD467E2C(a1 + 1408, (uint64_t *)v177);
  result[1] = a3;
  return result;
}

unint64_t sub_1CCE600F8(uint64_t __sz, void **a2, uint64_t a3, const llvm::Instruction *a4, uint64_t a5)
{
  char v72 = 0;
  char v71 = 1;
  uint64_t v75 = a5;
  uint64_t v76 = a4;
  uint64_t v10 = (uint64_t *)(__sz + 72);
  uint64_t v9 = *(void *)(__sz + 72);
  *(void *)(__sz + 152) += 56;
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v9 + 56 > *(void *)(__sz + 80) - v9)
  {
    unsigned int v55 = *(_DWORD *)(__sz + 96) >> 7;
    if (v55 >= 0x1E) {
      LOBYTE(v55) = 30;
    }
    uint64_t v56 = 4096 << v55;
    unint64_t v11 = (unint64_t)operator new(4096 << v55, (std::align_val_t)8uLL);
    unsigned int v57 = *(_DWORD *)(__sz + 96);
    if (v57 >= *(_DWORD *)(__sz + 100)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(__sz + 88) + 8 * v57) = v11;
    ++*(_DWORD *)(__sz + 96);
    *(void *)(__sz + 80) = v11 + v56;
    a5 = v75;
  }
  else
  {
    unint64_t v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(__sz + 72) = v11 + 56;
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 32) = a3;
  *(_DWORD *)(v11 + 36) = 0;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = a5;
  *(void *)unint64_t v11 = &unk_1F2640368;
  *(void *)(v11 + 8) = 0xFFFFFFFD00000008;
  unint64_t v12 = 64 - __clz(a3 - 1);
  if (a3) {
    unsigned __int8 v13 = v12;
  }
  else {
    unsigned __int8 v13 = 0;
  }
  uint64_t v70 = __sz + 168;
  *(void *)(v11 + 24) = sub_1CCD6DEF0((uint64_t *)(__sz + 168), v13, v10);
  *(void *)(v11 + 40) = **a2;
  *(_DWORD *)(v11 + 12) = 55;
  unsigned int v14 = (uint64_t *)&a2[2 * a3];
  *(void *)&long long v78 = a2;
  *((void *)&v78 + 1) = v14;
  *(void *)&long long v79 = &v76;
  *((void *)&v79 + 1) = __sz;
  *(void *)&long long v80 = &v75;
  *((void *)&v80 + 1) = &v71;
  int v81 = &v72;
  sub_1CCE6306C((uint64_t **)&v78);
  v77[0] = v14;
  v77[1] = v14;
  void v77[2] = (uint64_t *)&v76;
  v77[3] = (uint64_t *)__sz;
  v77[4] = &v75;
  v77[5] = (uint64_t *)&v71;
  v77[6] = (uint64_t *)&v72;
  sub_1CCE6306C(v77);
  v73[0] = v78;
  v73[1] = v79;
  v73[2] = v80;
  uint64_t v74 = v81;
  uint64_t v16 = v77[0];
  while (1)
  {
    uint64_t v17 = *(void *)&v73[0];
    if (*(uint64_t **)&v73[0] == v16) {
      break;
    }
    unint64_t v18 = sub_1CCE60C84(__sz, **(void **)&v73[0]);
    uint64_t v19 = *(void *)(v11 + 24);
    uint64_t v20 = *(unsigned int *)(v11 + 36);
    *(_DWORD *)(v11 + 36) = v20 + 1;
    *(void *)(v19 + 8 * v20) = v18;
    *(void *)&v73[0] = v17 + 16;
    sub_1CCE6306C((uint64_t **)v73);
  }
  uint64_t v21 = *(void **)(v11 + 24);
  uint64_t v22 = *(unsigned int *)(v11 + 36);
  if (v22)
  {
    int v23 = 0;
    int v24 = 0;
    uint64_t v25 = 8 * v22;
    int v26 = *(uint64_t **)(v11 + 24);
    do
    {
      int v27 = *(unsigned __int8 *)(*v26 + 16);
      if (v27 == 12)
      {
        int v23 = 1;
      }
      else
      {
        if ((v27 - 11) > 1) {
          goto LABEL_18;
        }
        int v24 = 1;
      }
      ++v26;
      v25 -= 8;
    }
    while (v25);
    goto LABEL_26;
  }
  int v24 = 0;
  int v23 = 0;
  int v26 = *(uint64_t **)(v11 + 24);
LABEL_18:
  unsigned int v28 = &v21[v22];
  if (v26 != v28)
  {
    uint64_t v29 = v26 + 1;
    uint64_t v30 = *v26;
    while (v29 != v28)
    {
      int v31 = *(unsigned __int8 *)(*v29 + 16);
      if (v31 == 12)
      {
        int v23 = 1;
      }
      else
      {
        if ((v31 - 11) > 1) {
          break;
        }
        int v24 = 1;
      }
      ++v29;
    }
    uint64_t v33 = *v26;
LABEL_29:
    if (v30 != v33) {
      return v11;
    }
    while (++v26 != v28)
    {
      uint64_t v33 = *v26;
      int v34 = *(unsigned __int8 *)(*v26 + 16);
      if (v34 == 12)
      {
        int v23 = 1;
      }
      else
      {
        if ((v34 - 11) > 1)
        {
          if (v26 != v28) {
            goto LABEL_29;
          }
          break;
        }
        int v24 = 1;
      }
    }
    if (v24)
    {
      if ((sub_1CC16A22C((uint64_t ***)v30, *(void *)(__sz + 48), 0, *(void *)(__sz + 8), 0, 1) & 1) == 0) {
        return v11;
      }
    }
    else if (!v23)
    {
      goto LABEL_57;
    }
    if (v72 && !v71 && *(unsigned __int8 *)(v30 + 16) - 11 >= 2 && !sub_1CCE62DB4(__sz, (uint64_t)a4)) {
      return v11;
    }
    if (v30 && *(unsigned __int8 *)(v30 + 16) >= 0x1Cu)
    {
      uint64_t v38 = sub_1CCE61078(*(void *)(__sz + 1384), *(_DWORD *)(__sz + 1400), v30);
      if (!v38) {
        return v11;
      }
      uint64_t v39 = (void *)v38;
      int v40 = *(unsigned __int8 **)(v38 + 8);
      if (v40[16] >= 0x16u
        && (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(__sz + 8), (const llvm::Value *)v40, a4) & 1) == 0)
      {
        int v41 = (const llvm::Value *)v39[2];
        if (!v41 || (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(__sz + 8), v41, a4) & 1) == 0)
        {
          uint64_t v61 = v39[8];
          if (v61 == v39[7]) {
            unsigned int v62 = (unsigned int *)v39 + 19;
          }
          else {
            unsigned int v62 = (unsigned int *)(v39 + 9);
          }
          uint64_t v63 = *v62;
          if (v63)
          {
            uint64_t v64 = 8 * v63;
            for (uint64_t i = (unint64_t *)v39[8]; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
            {
              v64 -= 8;
              if (!v64) {
                return v11;
              }
            }
          }
          else
          {
            uint64_t i = (unint64_t *)v39[8];
          }
          int v66 = (unint64_t *)(v61 + 8 * v63);
          if (i == v66) {
            return v11;
          }
          unsigned int v67 = (const llvm::Value *)*i;
LABEL_93:
          if ((const llvm::Value *)v39[1] == v67
            || (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(__sz + 8), v67, a4) & 1) == 0)
          {
            uint64_t v68 = i + 1;
            while (v68 != v66)
            {
              unint64_t v69 = *v68++;
              unsigned int v67 = (const llvm::Value *)v69;
              if (v69 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                uint64_t i = v68 - 1;
                goto LABEL_93;
              }
            }
            return v11;
          }
        }
      }
    }
LABEL_57:
    if (*(unsigned __int8 *)(v30 + 16) < 0x1Cu) {
      goto LABEL_72;
    }
    int v42 = *(_DWORD *)(__sz + 2224);
    if (!v42) {
      goto LABEL_72;
    }
    uint64_t v43 = *(void *)(__sz + 2208);
    unsigned int v44 = v42 - 1;
    uint64_t v45 = v44 & ((v30 >> 4) ^ (v30 >> 9));
    uint64_t v46 = *(void *)(v43 + 16 * v45);
    if (v30 == v46)
    {
LABEL_63:
      unsigned int v49 = *(_DWORD *)(v43 + 16 * v45 + 8);
    }
    else
    {
      int v47 = 1;
      while (v46 != -4096)
      {
        int v48 = v45 + v47++;
        uint64_t v45 = v48 & v44;
        uint64_t v46 = *(void *)(v43 + 16 * v45);
        if (v30 == v46) {
          goto LABEL_63;
        }
      }
      unsigned int v49 = 0;
    }
    uint64_t v50 = v44 & ((a4 >> 4) ^ (a4 >> 9));
    unsigned int v51 = *(const llvm::Instruction **)(v43 + 16 * v50);
    if (v51 == a4)
    {
LABEL_69:
      unsigned int v54 = *(_DWORD *)(v43 + 16 * v50 + 8);
    }
    else
    {
      int v52 = 1;
      while (v51 != (const llvm::Instruction *)-4096)
      {
        int v53 = v50 + v52++;
        uint64_t v50 = v53 & v44;
        unsigned int v51 = *(const llvm::Instruction **)(v43 + 16 * v50);
        if (v51 == a4) {
          goto LABEL_69;
        }
      }
      unsigned int v54 = 0;
    }
    if (v49 <= v54)
    {
LABEL_72:
      sub_1CD77DB20(*(void **)(v11 + 24), *(_DWORD *)(v11 + 32), v70);
      return sub_1CCE610DC(__sz, v30);
    }
    return v11;
  }
LABEL_26:
  if (v24)
  {
    uint64_t v32 = (unsigned __int8 *)llvm::UndefValue::get(*(llvm::UndefValue **)a4, v15);
  }
  else
  {
    if (!v23)
    {
      sub_1CD77DB20(v21, *(_DWORD *)(v11 + 32), v70);
      return *(void *)(__sz + 1864);
    }
    uint64_t v32 = (unsigned __int8 *)llvm::PoisonValue::get(*(llvm::PoisonValue **)a4, v15);
  }
  uint64_t v35 = v32;
  *(void *)(__sz + 152) += 32;
  uint64_t v36 = *(void *)(__sz + 72);
  if (((v36 + 7) & 0xFFFFFFFFFFFFFFF8) - v36 + 32 > *(void *)(__sz + 80) - v36)
  {
    unsigned int v58 = *(_DWORD *)(__sz + 96) >> 7;
    if (v58 >= 0x1E) {
      LOBYTE(v58) = 30;
    }
    uint64_t v59 = 4096 << v58;
    unint64_t v11 = (unint64_t)operator new(4096 << v58, (std::align_val_t)8uLL);
    unsigned int v60 = *(_DWORD *)(__sz + 96);
    if (v60 >= *(_DWORD *)(__sz + 100)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(__sz + 88) + 8 * v60) = v11;
    ++*(_DWORD *)(__sz + 96);
    *(void *)(__sz + 80) = v11 + v59;
  }
  else
  {
    unint64_t v11 = (v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *uint64_t v10 = v11 + 32;
  *(_DWORD *)(v11 + 8) = 1;
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = v35;
  *(void *)unint64_t v11 = &unk_1F2640488;
  *(_DWORD *)(v11 + 12) = v35[16];
  return v11;
}

void sub_1CCE60778(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  v39[8] = *(uint64_t **)MEMORY[0x1E4F143B8];
  *(void *)(a2 + 152) += 48;
  uint64_t v6 = *(void *)(a2 + 72);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 48 > *(void *)(a2 + 80) - v6)
  {
    unsigned int v35 = *(_DWORD *)(a2 + 96) >> 7;
    if (v35 >= 0x1E) {
      LOBYTE(v35) = 30;
    }
    uint64_t v36 = 4096 << v35;
    uint64_t v7 = (uint64_t)operator new(4096 << v35, (std::align_val_t)8uLL);
    unsigned int v37 = *(_DWORD *)(a2 + 96);
    if (v37 >= *(_DWORD *)(a2 + 100)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a2 + 88) + 8 * v37) = v7;
    ++*(_DWORD *)(a2 + 96);
    *(void *)(a2 + 80) = v7 + v36;
  }
  else
  {
    uint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a2 + 72) = v7 + 48;
  unsigned int v8 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
  *(void *)(v7 + 8) = 0xFFFFFFFD00000006;
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  *(void *)uint64_t v7 = &unk_1F2640220;
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = 0;
  int v9 = sub_1CCE612B0(a2, a3, v7);
  if (llvm::Instruction::isCommutative((llvm::Instruction *)a3))
  {
    unint64_t v11 = *(uint64_t **)(v7 + 24);
    unint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    unsigned int v14 = sub_1CCE60FA8(a2, *v11);
    unsigned int v15 = sub_1CCE60FA8(a2, v13);
    if (v15 < v14 || (v13 < v12 ? (BOOL v16 = v14 >= v15) : (BOOL v16 = 0), v16))
    {
      *unint64_t v11 = v13;
      v11[1] = v12;
    }
  }
  int v17 = *(unsigned __int8 *)(a3 + 16);
  if ((v17 - 83) >= 0xFFFFFFFE)
  {
    uint64_t v23 = *(_WORD *)(a3 + 18) & 0x3FLL;
    int v24 = *(uint64_t **)(v7 + 24);
    uint64_t v25 = (llvm::ConstantExpr *)*v24;
    int v26 = (unsigned __int8 *)v24[1];
    unsigned int v27 = sub_1CCE60FA8(a2, *v24);
    unsigned int v28 = sub_1CCE60FA8(a2, (uint64_t)v26);
    if (v28 < v27 || (v26 < (unsigned __int8 *)v25 ? (BOOL v29 = v27 >= v28) : (BOOL v29 = 0), v29))
    {
      uint64_t *v24 = (uint64_t)v26;
      v24[1] = (uint64_t)v25;
      uint64_t v23 = dword_1CFB2D1F8[v23];
      uint64_t v30 = *(void *)(v7 + 24);
      uint64_t v25 = *(llvm::ConstantExpr **)v30;
      int v26 = *(unsigned __int8 **)(v30 + 8);
    }
    *(_DWORD *)(v7 + 12) = v23 | ((v17 << 8) - 7168);
    uint64_t v22 = sub_1CC03A634(v23, v25, v26, a2 + 1264, 3);
    goto LABEL_31;
  }
  if (v17 == 85)
  {
    unint64_t v18 = *(uint64_t **)(v7 + 24);
    uint64_t v19 = (unsigned __int8 *)v18[1];
    uint64_t v20 = (unsigned __int8 *)v18[2];
    if (*(unsigned __int8 *)(*v18 + 16) >= 0x15u)
    {
      BOOL v21 = v19 == v20;
      uint64_t v20 = (unsigned __int8 *)v18[1];
      if (!v21)
      {
LABEL_32:
        a1[1] = 0;
        a1[2] = 0;
        *a1 = v7;
        return;
      }
    }
    uint64_t v22 = sub_1CC035B70(*v18, v19, v20, a2 + 1264, 3);
LABEL_31:
    sub_1CCE60CF8(a1, a2, v7, a3, (uint64_t)v22);
    if (*a1) {
      return;
    }
    goto LABEL_32;
  }
  if ((v17 - 41) <= 0x11)
  {
    uint64_t v22 = sub_1CC03A350(*(_DWORD *)(v7 + 12), **(llvm ***)(v7 + 24), *(llvm::Constant **)(*(void *)(v7 + 24) + 8), (const llvm::DataLayout *)(a2 + 1264), (llvm::DSOLocalEquivalent **)3);
    goto LABEL_31;
  }
  if ((v17 - 79) >= 0xFFFFFFF3)
  {
    uint64_t v22 = sub_1CC038B58((llvm *)(v17 - 28), **(void **)(v7 + 24), *(llvm::Constant **)a3, (llvm::Type **)(a2 + 1264), v10);
    goto LABEL_31;
  }
  if (v17 == 62)
  {
    uint64_t v22 = sub_1CC036F6C(*(llvm::Type **)(a3 + 64), **(unsigned __int8 ***)(v7 + 24), (uint64_t *)(*(void *)(v7 + 24) + 8), (8 * *(unsigned int *)(v7 + 36) - 8) >> 3, (*(unsigned __int8 *)(a3 + 17) >> 1) & 1, a2 + 1264);
    goto LABEL_31;
  }
  if (!v9) {
    goto LABEL_32;
  }
  uint64_t v31 = *(unsigned int *)(v7 + 36);
  if (v31)
  {
    LODWORD(v32) = 0;
    uint64_t v33 = *(uint64_t ***)(v7 + 24);
    uint64_t v34 = 8 * v31;
    do
    {
      if (v32 >= 8) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v39[v32] = *v33;
      uint64_t v32 = (v32 + 1);
      ++v33;
      v34 -= 8;
    }
    while (v34);
    int v17 = *(unsigned __int8 *)(a3 + 16);
  }
  else
  {
    uint64_t v32 = 0;
  }
  uint64_t v38 = sub_1CBFB8E50((llvm *)a3, (llvm *)(v17 - 28), v39, v32, *(llvm::Type **)(a2 + 56), *(llvm::DSOLocalEquivalent ***)(a2 + 16));
  if (!v38) {
    goto LABEL_32;
  }
  sub_1CCE60CF8(a1, a2, v7, a3, (uint64_t)v38);
  if (!*a1) {
    goto LABEL_32;
  }
}

unint64_t sub_1CCE60BB4(char *a1, void *__dst, char *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v14 = 0;
  unsigned int v8 = sub_1CC2E96A4(a1, &v14, __dst, (unint64_t)a3, a4);
  uint64_t v15 = v14;
  int v9 = (char *)sub_1CC2E96A4(a1, &v15, v8, (unint64_t)a3, *a5);
  uint64_t v10 = v15;
  if (!v15) {
    return sub_1CBAE06B8(a1, v9 - a1, *((void *)a1 + 15));
  }
  unint64_t v13 = v9;
  if (v9 != a1 && v9 != a3) {
    sub_1CBFFD1E8(a1, v9, a3);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v13[v10 - (void)a1]);
}

llvm::PoisonValue **sub_1CCE60C84(uint64_t a1, uint64_t a2)
{
  int v2 = (llvm::PoisonValue **)a2;
  uint64_t v4 = sub_1CCE61078(*(void *)(a1 + 1384), *(_DWORD *)(a1 + 1400), a2);
  if (!v4) {
    return v2;
  }
  if (v4 != *(void *)(a1 + 1344))
  {
    int v2 = *(llvm::PoisonValue ***)(v4 + 32);
    if (!v2) {
      return *(llvm::PoisonValue ***)(v4 + 8);
    }
    return v2;
  }
  uint64_t v7 = *v2;

  return (llvm::PoisonValue **)llvm::PoisonValue::get(v7, v5);
}

void sub_1CCE60CF8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a5) {
    goto LABEL_11;
  }
  unsigned int v9 = *(unsigned __int8 *)(a5 + 16);
  if (v9 <= 0x14)
  {
    sub_1CD77DB20(*(void **)(a3 + 24), *(_DWORD *)(a3 + 32), a2 + 168);
    *(void *)(a2 + 152) += 32;
    uint64_t v15 = *(void *)(a2 + 72);
    if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 32 > *(void *)(a2 + 80) - v15)
    {
      unsigned int v19 = *(_DWORD *)(a2 + 96) >> 7;
      if (v19 >= 0x1E) {
        LOBYTE(v19) = 30;
      }
      uint64_t v20 = 4096 << v19;
      unint64_t v16 = (unint64_t)operator new(4096 << v19, (std::align_val_t)8uLL);
      unsigned int v21 = *(_DWORD *)(a2 + 96);
      if (v21 >= *(_DWORD *)(a2 + 100)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a2 + 88) + 8 * v21) = v16;
      ++*(_DWORD *)(a2 + 96);
      *(void *)(a2 + 80) = v16 + v20;
    }
    else
    {
      unint64_t v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a2 + 72) = v16 + 32;
    *(_DWORD *)(v16 + 8) = 1;
    *(void *)(v16 + 16) = 0;
    int v17 = &unk_1F2640488;
  }
  else
  {
    if (v9 != 21)
    {
      uint64_t v11 = sub_1CCE61078(*(void *)(a2 + 1384), *(_DWORD *)(a2 + 1400), a5);
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v11 + 8);
        if (v13) {
          BOOL v14 = v13 == a4;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14)
        {
          *a1 = sub_1CCE610DC(a2, v13);
LABEL_12:
          a1[1] = a5;
          a1[2] = 0;
          return;
        }
        if (*(void *)(v11 + 48))
        {
          sub_1CD77DB20(*(void **)(a3 + 24), *(_DWORD *)(a3 + 32), a2 + 168);
          *a1 = *(void *)(v12 + 48);
          goto LABEL_12;
        }
      }
LABEL_11:
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return;
    }
    sub_1CD77DB20(*(void **)(a3 + 24), *(_DWORD *)(a3 + 32), a2 + 168);
    *(void *)(a2 + 152) += 32;
    uint64_t v18 = *(void *)(a2 + 72);
    if (((v18 + 7) & 0xFFFFFFFFFFFFFFF8) - v18 + 32 > *(void *)(a2 + 80) - v18)
    {
      unsigned int v22 = *(_DWORD *)(a2 + 96) >> 7;
      if (v22 >= 0x1E) {
        LOBYTE(v22) = 30;
      }
      uint64_t v23 = 4096 << v22;
      unint64_t v16 = (unint64_t)operator new(4096 << v22, (std::align_val_t)8uLL);
      unsigned int v24 = *(_DWORD *)(a2 + 96);
      if (v24 >= *(_DWORD *)(a2 + 100)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a2 + 88) + 8 * v24) = v16;
      ++*(_DWORD *)(a2 + 96);
      *(void *)(a2 + 80) = v16 + v23;
    }
    else
    {
      unint64_t v16 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a2 + 72) = v16 + 32;
    *(_DWORD *)(v16 + 8) = 2;
    *(void *)(v16 + 16) = 0;
    int v17 = &unk_1F26404C8;
  }
  *(void *)unint64_t v16 = v17;
  *(void *)(v16 + 24) = a5;
  *(_DWORD *)(v16 + 12) = *(unsigned __int8 *)(a5 + 16);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = v16;
}

uint64_t sub_1CCE60FA8(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 5) {
    return 3;
  }
  if (v2 == 12) {
    return 1;
  }
  if (v2 - 11 < 2) {
    return 2;
  }
  if (v2 < 0x15) {
    return 0;
  }
  if (v2 == 21) {
    return (*(_DWORD *)(a2 + 32) + 4);
  }
  int v4 = *(_DWORD *)(a1 + 2224);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 2208);
    unsigned int v6 = v4 - 1;
    uint64_t v7 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = *(void *)(v5 + 16 * v7);
    if (v8 == a2)
    {
LABEL_16:
      int v11 = *(_DWORD *)(v5 + 16 * v7 + 8);
      if (v11) {
        return (v11 + *(_DWORD *)(a1 + 1312) + 5);
      }
    }
    else
    {
      int v9 = 1;
      while (v8 != -4096)
      {
        int v10 = v7 + v9++;
        uint64_t v7 = v10 & v6;
        uint64_t v8 = *(void *)(v5 + 16 * v7);
        if (v8 == a2) {
          goto LABEL_16;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CCE61078(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v4 = *(void *)(a1 + 16 * v3);
    if (v4 == a3) {
      return *(void *)(a1 + 16 * v3 + 8);
    }
    int v6 = 1;
    while (v4 != -4096)
    {
      int v7 = v3 + v6++;
      uint64_t v3 = v7 & (a2 - 1);
      uint64_t v4 = *(void *)(a1 + 16 * v3);
      if (v4 == a3) {
        return *(void *)(a1 + 16 * v3 + 8);
      }
    }
  }
  return 0;
}

unint64_t sub_1CCE610DC(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  *(void *)(a1 + 152) += 32;
  uint64_t v5 = *(void *)(a1 + 72);
  unint64_t v6 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) - v5 + 32;
  unint64_t v7 = *(void *)(a1 + 80) - v5;
  if (a2 && v4 <= 0x14)
  {
    if (v6 > v7)
    {
      unsigned int v11 = *(_DWORD *)(a1 + 96) >> 7;
      if (v11 >= 0x1E) {
        LOBYTE(v11) = 30;
      }
      uint64_t v12 = 4096 << v11;
      unint64_t v8 = (unint64_t)operator new(4096 << v11, (std::align_val_t)8uLL);
      unsigned int v13 = *(_DWORD *)(a1 + 96);
      if (v13 >= *(_DWORD *)(a1 + 100)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 88) + 8 * v13) = v8;
      ++*(_DWORD *)(a1 + 96);
      *(void *)(a1 + 80) = v8 + v12;
      unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
    }
    else
    {
      unint64_t v8 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 72) = v8 + 32;
    *(_DWORD *)(v8 + 8) = 1;
    *(void *)(v8 + 16) = 0;
    int v9 = &unk_1F2640488;
  }
  else
  {
    if (v6 > v7)
    {
      unsigned int v14 = *(_DWORD *)(a1 + 96) >> 7;
      if (v14 >= 0x1E) {
        LOBYTE(v14) = 30;
      }
      uint64_t v15 = 4096 << v14;
      unint64_t v8 = (unint64_t)operator new(4096 << v14, (std::align_val_t)8uLL);
      unsigned int v16 = *(_DWORD *)(a1 + 96);
      if (v16 >= *(_DWORD *)(a1 + 100)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 88) + 8 * v16) = v8;
      ++*(_DWORD *)(a1 + 96);
      *(void *)(a1 + 80) = v8 + v15;
      unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
    }
    else
    {
      unint64_t v8 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 72) = v8 + 32;
    *(_DWORD *)(v8 + 8) = 2;
    *(void *)(v8 + 16) = 0;
    int v9 = &unk_1F26404C8;
  }
  *(void *)unint64_t v8 = v9;
  *(void *)(v8 + 24) = a2;
  *(_DWORD *)(v8 + 12) = v4;
  return v8;
}

uint64_t sub_1CCE612B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 != 62 || a2 == 0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 64;
  }
  *(void *)(a3 + 40) = *(void *)(a2 + v8);
  *(_DWORD *)(a3 + 12) = v6 - 28;
  int v9 = (uint64_t *)(a1 + 168);
  uint64_t v10 = *(unsigned int *)(a3 + 32);
  unint64_t v11 = 64 - __clz(v10 - 1);
  if (v10) {
    unsigned __int8 v12 = v11;
  }
  else {
    unsigned __int8 v12 = 0;
  }
  *(void *)(a3 + 24) = sub_1CCD6DEF0(v9, v12, (uint64_t *)(a1 + 72));
  int v13 = *(_DWORD *)(a2 + 20);
  if ((v13 & 0x40000000) == 0)
  {
    uint64_t v14 = v13 & 0x7FFFFFF;
    uint64_t v15 = (uint64_t *)(a2 - 32 * v14);
    if (v14) {
      goto LABEL_12;
    }
    return 1;
  }
  uint64_t v15 = *(uint64_t **)(a2 - 8);
  uint64_t v14 = v13 & 0x7FFFFFF;
  if (!v14) {
    return 1;
  }
LABEL_12:
  uint64_t v16 = 32 * v14;
  LOBYTE(v17) = 1;
  do
  {
    uint64_t v18 = sub_1CCE60C84(a1, *v15);
    BOOL v17 = v17 && *((unsigned __int8 *)v18 + 16) < 0x15u;
    uint64_t v19 = *(void *)(a3 + 24);
    uint64_t v20 = *(unsigned int *)(a3 + 36);
    *(_DWORD *)(a3 + 36) = v20 + 1;
    *(void *)(v19 + 8 * v20) = v18;
    v15 += 4;
    v16 -= 32;
  }
  while (v16);
  return v17;
}

uint64_t sub_1CCE613B0(uint64_t result, uint64_t *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
  while (2)
  {
    uint64_t v179 = a2 - 4;
    uint64_t v180 = a2 - 2;
    int v178 = a2 - 6;
    unint64_t v11 = v10;
    uint64_t v188 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v10 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          uint64_t v13 = ((char *)a2 - (char *)v11) >> 4;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v171 = (uint64_t *)(*a3 + 2160);
                uint64_t v172 = *(a2 - 1);
                uint64_t v191 = 0;
                uint64_t v192 = v172;
                if (sub_1CD3C8538(v171, &v192, &v191)) {
                  unsigned int v173 = *(_DWORD *)(v191 + 8);
                }
                else {
                  unsigned int v173 = 0;
                }
                uint64_t v174 = v10[1];
                uint64_t v191 = 0;
                uint64_t v192 = v174;
                uint64_t result = sub_1CD3C8538(v171, &v192, &v191);
                if (result) {
                  unsigned int v175 = *(_DWORD *)(v191 + 8);
                }
                else {
                  unsigned int v175 = 0;
                }
                if (v173 < v175)
                {
                  uint64_t v176 = *v10;
                  *uint64_t v10 = *(a2 - 2);
                  *(a2 - 2) = v176;
                  uint64_t v177 = v10[1];
                  v10[1] = *(a2 - 1);
                  *(a2 - 1) = v177;
                }
                break;
              case 3:
                uint64_t result = sub_1CCE625E4(v10, v10 + 2, v180, a3);
                break;
              case 4:
                uint64_t result = sub_1CCE62BC0(v10, v10 + 2, v10 + 4, v180, a3);
                break;
              case 5:
                uint64_t result = sub_1CCE62364(v10, v10 + 2, v10 + 4, v10 + 6, v180, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 383)
          {
            long long v80 = v10 + 2;
            BOOL v82 = v10 == a2 || v80 == a2;
            if (a5)
            {
              if (!v82)
              {
                uint64_t v83 = 0;
                unsigned int v84 = v10;
                do
                {
                  uint64_t v85 = v80;
                  uint64_t v86 = (uint64_t *)(*a3 + 2160);
                  uint64_t v87 = v84[3];
                  uint64_t v191 = 0;
                  uint64_t v192 = v87;
                  if (sub_1CD3C8538(v86, &v192, &v191)) {
                    unsigned int v88 = *(_DWORD *)(v191 + 8);
                  }
                  else {
                    unsigned int v88 = 0;
                  }
                  uint64_t v89 = v84[1];
                  uint64_t v191 = 0;
                  uint64_t v192 = v89;
                  uint64_t result = sub_1CD3C8538(v86, &v192, &v191);
                  if (result) {
                    unsigned int v90 = *(_DWORD *)(v191 + 8);
                  }
                  else {
                    unsigned int v90 = 0;
                  }
                  if (v88 < v90)
                  {
                    uint64_t v91 = *v85;
                    uint64_t v92 = v84[3];
                    uint64_t v93 = v83;
                    while (1)
                    {
                      uint64_t v94 = (char *)v10 + v93;
                      uint64_t v95 = *(uint64_t *)((char *)v10 + v93 + 8);
                      *((void *)v94 + 2) = *(uint64_t *)((char *)v10 + v93);
                      *((void *)v94 + 3) = v95;
                      if (!v93) {
                        break;
                      }
                      uint64_t v96 = a2;
                      int v97 = (uint64_t *)(*a3 + 2160);
                      uint64_t v191 = 0;
                      uint64_t v192 = v92;
                      if (sub_1CD3C8538(v97, &v192, &v191)) {
                        unsigned int v98 = *(_DWORD *)(v191 + 8);
                      }
                      else {
                        unsigned int v98 = 0;
                      }
                      uint64_t v99 = *(uint64_t *)((char *)v10 + v93 - 8);
                      uint64_t v191 = 0;
                      uint64_t v192 = v99;
                      uint64_t result = sub_1CD3C8538(v97, &v192, &v191);
                      if (result) {
                        unsigned int v100 = *(_DWORD *)(v191 + 8);
                      }
                      else {
                        unsigned int v100 = 0;
                      }
                      v93 -= 16;
                      BOOL v5 = v98 >= v100;
                      a2 = v96;
                      if (v5)
                      {
                        uint64_t v101 = (uint64_t *)((char *)v10 + v93 + 16);
                        goto LABEL_157;
                      }
                    }
                    uint64_t v101 = v10;
LABEL_157:
                    *uint64_t v101 = v91;
                    v101[1] = v92;
                  }
                  long long v80 = v85 + 2;
                  v83 += 16;
                  unsigned int v84 = v85;
                }
                while (v85 + 2 != a2);
              }
            }
            else if (!v82)
            {
              int v130 = v10 + 3;
              do
              {
                uint64_t v131 = v80;
                BOOL v132 = (uint64_t *)(*a3 + 2160);
                uint64_t v133 = v10[3];
                uint64_t v191 = 0;
                uint64_t v192 = v133;
                if (sub_1CD3C8538(v132, &v192, &v191)) {
                  unsigned int v134 = *(_DWORD *)(v191 + 8);
                }
                else {
                  unsigned int v134 = 0;
                }
                uint64_t v135 = v10[1];
                uint64_t v191 = 0;
                uint64_t v192 = v135;
                uint64_t result = sub_1CD3C8538(v132, &v192, &v191);
                if (result) {
                  unsigned int v136 = *(_DWORD *)(v191 + 8);
                }
                else {
                  unsigned int v136 = 0;
                }
                if (v134 < v136)
                {
                  uint64_t v137 = *v131;
                  uint64_t v138 = v10[3];
                  uint64_t v139 = v130;
                  do
                  {
                    uint64_t v140 = *(v139 - 2);
                    *(v139 - 1) = *(v139 - 3);
                    *uint64_t v139 = v140;
                    int v141 = (uint64_t *)(*a3 + 2160);
                    uint64_t v191 = 0;
                    uint64_t v192 = v138;
                    if (sub_1CD3C8538(v141, &v192, &v191)) {
                      unsigned int v142 = *(_DWORD *)(v191 + 8);
                    }
                    else {
                      unsigned int v142 = 0;
                    }
                    uint64_t v143 = *(v139 - 4);
                    uint64_t v191 = 0;
                    uint64_t v192 = v143;
                    uint64_t result = sub_1CD3C8538(v141, &v192, &v191);
                    if (result) {
                      unsigned int v144 = *(_DWORD *)(v191 + 8);
                    }
                    else {
                      unsigned int v144 = 0;
                    }
                    v139 -= 2;
                  }
                  while (v142 < v144);
                  *(v139 - 1) = v137;
                  *uint64_t v139 = v138;
                }
                long long v80 = v131 + 2;
                v130 += 2;
                uint64_t v10 = v131;
              }
              while (v131 + 2 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != a2)
            {
              int64_t v102 = (unint64_t)(v13 - 2) >> 1;
              int64_t v103 = v102;
              do
              {
                int64_t v104 = v103;
                if (v102 >= v103)
                {
                  uint64_t v105 = (2 * v103) | 1;
                  uint64_t v106 = &v10[2 * v105];
                  if (2 * v103 + 2 < v13)
                  {
                    uint64_t v107 = (uint64_t *)(*a3 + 2160);
                    uint64_t v108 = v106[1];
                    uint64_t v191 = 0;
                    uint64_t v192 = v108;
                    unsigned int v109 = sub_1CD3C8538(v107, &v192, &v191) ? *(_DWORD *)(v191 + 8) : 0;
                    uint64_t v110 = v106[3];
                    uint64_t v191 = 0;
                    uint64_t v192 = v110;
                    unsigned int v111 = sub_1CD3C8538(v107, &v192, &v191) ? *(_DWORD *)(v191 + 8) : 0;
                    v106 += 2 * (v109 < v111);
                    if (v109 < v111) {
                      uint64_t v105 = 2 * v104 + 2;
                    }
                  }
                  uint64_t v112 = (uint64_t *)(*a3 + 2160);
                  uint64_t v113 = v106[1];
                  uint64_t v191 = 0;
                  uint64_t v192 = v113;
                  if (sub_1CD3C8538(v112, &v192, &v191)) {
                    unsigned int v114 = *(_DWORD *)(v191 + 8);
                  }
                  else {
                    unsigned int v114 = 0;
                  }
                  int v115 = &v10[2 * v104];
                  uint64_t v117 = v115[1];
                  unsigned int v116 = v115 + 1;
                  uint64_t v191 = 0;
                  uint64_t v192 = v117;
                  uint64_t result = sub_1CD3C8538(v112, &v192, &v191);
                  if (result) {
                    unsigned int v118 = *(_DWORD *)(v191 + 8);
                  }
                  else {
                    unsigned int v118 = 0;
                  }
                  BOOL v5 = v114 >= v118;
                  a2 = v188;
                  if (v5)
                  {
                    uint64_t v119 = &v10[2 * v104];
                    uint64_t v183 = *v119;
                    uint64_t v186 = *v116;
                    do
                    {
                      uint64_t v120 = v106;
                      uint64_t *v119 = *v106;
                      v119[1] = v106[1];
                      if (v102 < v105) {
                        break;
                      }
                      uint64_t v121 = (2 * v105) | 1;
                      uint64_t v106 = &v10[2 * v121];
                      uint64_t v105 = 2 * v105 + 2;
                      if (v105 < v13)
                      {
                        unsigned int v122 = (uint64_t *)(*a3 + 2160);
                        uint64_t v123 = v106[1];
                        uint64_t v191 = 0;
                        uint64_t v192 = v123;
                        if (sub_1CD3C8538(v122, &v192, &v191)) {
                          unsigned int v181 = *(_DWORD *)(v191 + 8);
                        }
                        else {
                          unsigned int v181 = 0;
                        }
                        uint64_t v124 = v106[3];
                        uint64_t v191 = 0;
                        uint64_t v192 = v124;
                        if (sub_1CD3C8538(v122, &v192, &v191)) {
                          unsigned int v125 = *(_DWORD *)(v191 + 8);
                        }
                        else {
                          unsigned int v125 = 0;
                        }
                        v106 += 2 * (v181 < v125);
                        if (v181 >= v125) {
                          uint64_t v105 = v121;
                        }
                      }
                      else
                      {
                        uint64_t v105 = v121;
                      }
                      uint64_t v126 = (uint64_t *)(*a3 + 2160);
                      uint64_t v127 = v106[1];
                      uint64_t v191 = 0;
                      uint64_t v192 = v127;
                      unsigned int v128 = sub_1CD3C8538(v126, &v192, &v191) ? *(_DWORD *)(v191 + 8) : 0;
                      uint64_t v191 = 0;
                      uint64_t v192 = v186;
                      uint64_t result = sub_1CD3C8538(v126, &v192, &v191);
                      unsigned int v129 = result ? *(_DWORD *)(v191 + 8) : 0;
                      uint64_t v119 = v120;
                    }
                    while (v128 >= v129);
                    a2 = v188;
                    *uint64_t v120 = v183;
                    v120[1] = v186;
                  }
                }
                int64_t v103 = v104 - 1;
              }
              while (v104);
              do
              {
                uint64_t v156 = 0;
                uint64_t v187 = *v10;
                uint64_t v190 = a2;
                uint64_t v184 = v10[1];
                uint64_t v157 = v10;
                do
                {
                  uint64_t v150 = &v157[2 * v156 + 2];
                  uint64_t v158 = (2 * v156) | 1;
                  uint64_t v159 = 2 * v156 + 2;
                  if (v159 < v13)
                  {
                    unsigned int v160 = (uint64_t *)(*a3 + 2160);
                    uint64_t v161 = v150[1];
                    uint64_t v191 = 0;
                    uint64_t v192 = v161;
                    int v162 = sub_1CD3C8538(v160, &v192, &v191);
                    unsigned int v163 = v162 ? *(_DWORD *)(v191 + 8) : 0;
                    uint64_t v164 = v150[3];
                    uint64_t v191 = 0;
                    uint64_t v192 = v164;
                    uint64_t result = sub_1CD3C8538(v160, &v192, &v191);
                    unsigned int v165 = result ? *(_DWORD *)(v191 + 8) : 0;
                    v150 += 2 * (v163 < v165);
                    if (v163 < v165) {
                      uint64_t v158 = v159;
                    }
                  }
                  *uint64_t v157 = *v150;
                  v157[1] = v150[1];
                  uint64_t v157 = v150;
                  uint64_t v156 = v158;
                }
                while (v158 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
                uint64_t v166 = v190 - 2;
                if (v150 == v190 - 2)
                {
                  *uint64_t v150 = v187;
                  v150[1] = v184;
                }
                else
                {
                  *uint64_t v150 = *(v190 - 2);
                  v150[1] = *(v190 - 1);
                  *(v190 - 2) = v187;
                  *(v190 - 1) = v184;
                  uint64_t v167 = (char *)v150 - (char *)v10 + 16;
                  if (v167 >= 17)
                  {
                    unint64_t v151 = (((unint64_t)v167 >> 4) - 2) >> 1;
                    uint64_t v168 = v10[2 * v151 + 1];
                    int v169 = (uint64_t *)(*a3 + 2160);
                    uint64_t v191 = 0;
                    uint64_t v192 = v168;
                    unsigned int v145 = sub_1CD3C8538(v169, &v192, &v191) ? *(_DWORD *)(v191 + 8) : 0;
                    uint64_t v146 = v150[1];
                    uint64_t v191 = 0;
                    uint64_t v192 = v146;
                    uint64_t result = sub_1CD3C8538(v169, &v192, &v191);
                    unsigned int v147 = result ? *(_DWORD *)(v191 + 8) : 0;
                    if (v145 < v147)
                    {
                      uint64_t v148 = v150[1];
                      uint64_t v189 = *v150;
                      do
                      {
                        unsigned int v149 = v150;
                        uint64_t v150 = &v10[2 * v151];
                        *unsigned int v149 = *v150;
                        v149[1] = v150[1];
                        if (!v151) {
                          break;
                        }
                        unint64_t v151 = (v151 - 1) >> 1;
                        uint64_t v152 = v10[2 * v151 + 1];
                        uint64_t v153 = (uint64_t *)(*a3 + 2160);
                        uint64_t v191 = 0;
                        uint64_t v192 = v152;
                        unsigned int v154 = sub_1CD3C8538(v153, &v192, &v191) ? *(_DWORD *)(v191 + 8) : 0;
                        uint64_t v191 = 0;
                        uint64_t v192 = v148;
                        uint64_t result = sub_1CD3C8538(v153, &v192, &v191);
                        unsigned int v155 = result ? *(_DWORD *)(v191 + 8) : 0;
                      }
                      while (v154 < v155);
                      *uint64_t v150 = v189;
                      v150[1] = v148;
                    }
                  }
                }
                a2 = v166;
              }
              while (v13-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = &v10[2 * ((unint64_t)v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_1CCE625E4(v15, v10, v180, a3);
          }
          else
          {
            sub_1CCE625E4(v10, v15, v180, a3);
            sub_1CCE625E4(v10 + 2, v15 - 2, v179, a3);
            sub_1CCE625E4(v10 + 4, &v10[2 * v14 + 2], v178, a3);
            sub_1CCE625E4(v15 - 2, v15, &v10[2 * v14 + 2], a3);
            long long v16 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v15;
            *(_OWORD *)uint64_t v15 = v16;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v45 = (uint64_t *)(*a3 + 2160);
          uint64_t v46 = *(v10 - 1);
          uint64_t v191 = 0;
          uint64_t v192 = v46;
          unsigned int v47 = sub_1CD3C8538(v45, &v192, &v191) ? *(_DWORD *)(v191 + 8) : 0;
          uint64_t v48 = v10[1];
          uint64_t v191 = 0;
          uint64_t v192 = v48;
          unsigned int v49 = sub_1CD3C8538(v45, &v192, &v191) ? *(_DWORD *)(v191 + 8) : 0;
          if (v47 < v49) {
            break;
          }
          uint64_t v51 = *v10;
          uint64_t v50 = v10[1];
          int v52 = (uint64_t *)(*a3 + 2160);
          uint64_t v191 = 0;
          uint64_t v192 = v50;
          if (sub_1CD3C8538(v52, &v192, &v191)) {
            unsigned int v53 = *(_DWORD *)(v191 + 8);
          }
          else {
            unsigned int v53 = 0;
          }
          uint64_t v54 = *(a2 - 1);
          uint64_t v191 = 0;
          uint64_t v192 = v54;
          uint64_t result = sub_1CD3C8538(v52, &v192, &v191);
          if (result) {
            unsigned int v55 = *(_DWORD *)(v191 + 8);
          }
          else {
            unsigned int v55 = 0;
          }
          if (v53 >= v55)
          {
            uint64_t v75 = v10 + 2;
            do
            {
              unint64_t v11 = v75;
              if (v75 >= a2) {
                break;
              }
              uint64_t v76 = (uint64_t *)(*a3 + 2160);
              uint64_t v191 = 0;
              uint64_t v192 = v50;
              unsigned int v77 = sub_1CD3C8538(v76, &v192, &v191) ? *(_DWORD *)(v191 + 8) : 0;
              uint64_t v78 = v11[1];
              uint64_t v191 = 0;
              uint64_t v192 = v78;
              uint64_t result = sub_1CD3C8538(v76, &v192, &v191);
              unsigned int v79 = result ? *(_DWORD *)(v191 + 8) : 0;
              uint64_t v75 = v11 + 2;
            }
            while (v77 >= v79);
          }
          else
          {
            unint64_t v11 = v10;
            do
            {
              uint64_t v56 = (uint64_t *)(*a3 + 2160);
              uint64_t v191 = 0;
              uint64_t v192 = v50;
              if (sub_1CD3C8538(v56, &v192, &v191)) {
                unsigned int v57 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v57 = 0;
              }
              uint64_t v58 = v11[3];
              uint64_t v191 = 0;
              uint64_t v192 = v58;
              uint64_t result = sub_1CD3C8538(v56, &v192, &v191);
              if (result) {
                unsigned int v59 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v59 = 0;
              }
              v11 += 2;
            }
            while (v57 >= v59);
          }
          unsigned int v60 = a2;
          if (v11 < a2)
          {
            unsigned int v60 = a2;
            do
            {
              uint64_t v61 = (uint64_t *)(*a3 + 2160);
              uint64_t v191 = 0;
              uint64_t v192 = v50;
              if (sub_1CD3C8538(v61, &v192, &v191)) {
                unsigned int v62 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v62 = 0;
              }
              uint64_t v63 = *(v60 - 1);
              uint64_t v191 = 0;
              uint64_t v192 = v63;
              uint64_t result = sub_1CD3C8538(v61, &v192, &v191);
              if (result) {
                unsigned int v64 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v64 = 0;
              }
              v60 -= 2;
            }
            while (v62 < v64);
          }
          while (v11 < v60)
          {
            uint64_t v65 = *v11;
            *unint64_t v11 = *v60;
            uint64_t *v60 = v65;
            uint64_t v66 = v11[1];
            v11[1] = v60[1];
            v60[1] = v66;
            do
            {
              unsigned int v67 = (uint64_t *)(*a3 + 2160);
              uint64_t v191 = 0;
              uint64_t v192 = v50;
              if (sub_1CD3C8538(v67, &v192, &v191)) {
                unsigned int v68 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v68 = 0;
              }
              uint64_t v69 = v11[3];
              uint64_t v191 = 0;
              uint64_t v192 = v69;
              if (sub_1CD3C8538(v67, &v192, &v191)) {
                unsigned int v70 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v70 = 0;
              }
              v11 += 2;
            }
            while (v68 >= v70);
            do
            {
              char v71 = (uint64_t *)(*a3 + 2160);
              uint64_t v191 = 0;
              uint64_t v192 = v50;
              if (sub_1CD3C8538(v71, &v192, &v191)) {
                unsigned int v72 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v72 = 0;
              }
              uint64_t v73 = *(v60 - 1);
              uint64_t v191 = 0;
              uint64_t v192 = v73;
              uint64_t result = sub_1CD3C8538(v71, &v192, &v191);
              if (result) {
                unsigned int v74 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v74 = 0;
              }
              v60 -= 2;
            }
            while (v72 < v74);
          }
          BOOL v5 = v11 - 2 >= v10;
          BOOL v6 = v11 - 2 == v10;
          if (v11 - 2 != v10)
          {
            *uint64_t v10 = *(v11 - 2);
            v10[1] = *(v11 - 1);
          }
          a5 = 0;
          *(v11 - 2) = v51;
          *(v11 - 1) = v50;
        }
        uint64_t v17 = 0;
        uint64_t v18 = v10[1];
        uint64_t v185 = *v10;
        do
        {
          uint64_t v19 = (uint64_t *)(*a3 + 2160);
          uint64_t v20 = v10[v17 + 3];
          uint64_t v191 = 0;
          uint64_t v192 = v20;
          if (sub_1CD3C8538(v19, &v192, &v191)) {
            unsigned int v21 = *(_DWORD *)(v191 + 8);
          }
          else {
            unsigned int v21 = 0;
          }
          uint64_t v191 = 0;
          uint64_t v192 = v18;
          if (sub_1CD3C8538(v19, &v192, &v191)) {
            unsigned int v22 = *(_DWORD *)(v191 + 8);
          }
          else {
            unsigned int v22 = 0;
          }
          v17 += 2;
        }
        while (v21 < v22);
        uint64_t v23 = &v10[v17];
        if (v17 == 2)
        {
          a2 = v188;
          do
          {
            if (v23 >= a2) {
              break;
            }
            int v41 = (uint64_t *)(*a3 + 2160);
            uint64_t v42 = *(a2 - 1);
            uint64_t v191 = 0;
            uint64_t v192 = v42;
            unsigned int v43 = sub_1CD3C8538(v41, &v192, &v191) ? *(_DWORD *)(v191 + 8) : 0;
            uint64_t v191 = 0;
            uint64_t v192 = v18;
            unsigned int v44 = sub_1CD3C8538(v41, &v192, &v191) ? *(_DWORD *)(v191 + 8) : 0;
            a2 -= 2;
          }
          while (v43 >= v44);
        }
        else
        {
          do
          {
            unsigned int v24 = (uint64_t *)(*a3 + 2160);
            uint64_t v25 = *(a2 - 1);
            uint64_t v191 = 0;
            uint64_t v192 = v25;
            if (sub_1CD3C8538(v24, &v192, &v191)) {
              unsigned int v26 = *(_DWORD *)(v191 + 8);
            }
            else {
              unsigned int v26 = 0;
            }
            uint64_t v191 = 0;
            uint64_t v192 = v18;
            if (sub_1CD3C8538(v24, &v192, &v191)) {
              unsigned int v27 = *(_DWORD *)(v191 + 8);
            }
            else {
              unsigned int v27 = 0;
            }
            a2 -= 2;
          }
          while (v26 >= v27);
        }
        uint64_t v28 = a4;
        unint64_t v11 = v23;
        if (v23 < a2)
        {
          BOOL v29 = a2;
          do
          {
            uint64_t v30 = *v11;
            *unint64_t v11 = *v29;
            uint64_t *v29 = v30;
            uint64_t v31 = v11[1];
            v11[1] = v29[1];
            v29[1] = v31;
            do
            {
              uint64_t v32 = (uint64_t *)(*a3 + 2160);
              uint64_t v33 = v11[3];
              uint64_t v191 = 0;
              uint64_t v192 = v33;
              if (sub_1CD3C8538(v32, &v192, &v191)) {
                unsigned int v34 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v34 = 0;
              }
              uint64_t v191 = 0;
              uint64_t v192 = v18;
              if (sub_1CD3C8538(v32, &v192, &v191)) {
                unsigned int v35 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v35 = 0;
              }
              v11 += 2;
            }
            while (v34 < v35);
            do
            {
              uint64_t v36 = (uint64_t *)(*a3 + 2160);
              uint64_t v37 = *(v29 - 1);
              uint64_t v191 = 0;
              uint64_t v192 = v37;
              if (sub_1CD3C8538(v36, &v192, &v191)) {
                unsigned int v38 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v38 = 0;
              }
              uint64_t v191 = 0;
              uint64_t v192 = v18;
              if (sub_1CD3C8538(v36, &v192, &v191)) {
                unsigned int v39 = *(_DWORD *)(v191 + 8);
              }
              else {
                unsigned int v39 = 0;
              }
              v29 -= 2;
            }
            while (v38 >= v39);
          }
          while (v11 < v29);
        }
        if (v11 - 2 != v10)
        {
          *uint64_t v10 = *(v11 - 2);
          v10[1] = *(v11 - 1);
        }
        *(v11 - 2) = v185;
        *(v11 - 1) = v18;
        BOOL v5 = v23 >= a2;
        a2 = v188;
        a4 = v28;
        if (v5) {
          break;
        }
LABEL_51:
        uint64_t result = sub_1CCE613B0(v10, v11 - 2, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v40 = sub_1CCE628D0(v10, v11 - 2, a3);
      uint64_t result = sub_1CCE628D0(v11, v188, a3);
      if (result) {
        break;
      }
      if (!v40) {
        goto LABEL_51;
      }
    }
    a2 = v11 - 2;
    if (!v40) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CCE62364(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  sub_1CCE62BC0(a1, a2, a3, a4, a6);
  uint64_t v12 = (uint64_t *)(*a6 + 2160);
  uint64_t v13 = a5[1];
  uint64_t v41 = 0;
  uint64_t v42 = v13;
  if (sub_1CD3C8538(v12, &v42, &v41)) {
    unsigned int v14 = *(_DWORD *)(v41 + 8);
  }
  else {
    unsigned int v14 = 0;
  }
  uint64_t v15 = a4[1];
  uint64_t v41 = 0;
  uint64_t v42 = v15;
  uint64_t result = sub_1CD3C8538(v12, &v42, &v41);
  if (result) {
    unsigned int v17 = *(_DWORD *)(v41 + 8);
  }
  else {
    unsigned int v17 = 0;
  }
  if (v14 < v17)
  {
    uint64_t v18 = *a4;
    *a4 = *a5;
    *a5 = v18;
    uint64_t v19 = a4[1];
    a4[1] = a5[1];
    a5[1] = v19;
    uint64_t v20 = (uint64_t *)(*a6 + 2160);
    uint64_t v21 = a4[1];
    uint64_t v41 = 0;
    uint64_t v42 = v21;
    unsigned int v22 = sub_1CD3C8538(v20, &v42, &v41) ? *(_DWORD *)(v41 + 8) : 0;
    uint64_t v23 = a3[1];
    uint64_t v41 = 0;
    uint64_t v42 = v23;
    uint64_t result = sub_1CD3C8538(v20, &v42, &v41);
    unsigned int v24 = result ? *(_DWORD *)(v41 + 8) : 0;
    if (v22 < v24)
    {
      uint64_t v25 = *a3;
      *a3 = *a4;
      *a4 = v25;
      uint64_t v26 = a3[1];
      a3[1] = a4[1];
      a4[1] = v26;
      unsigned int v27 = (uint64_t *)(*a6 + 2160);
      uint64_t v28 = a3[1];
      uint64_t v41 = 0;
      uint64_t v42 = v28;
      unsigned int v29 = sub_1CD3C8538(v27, &v42, &v41) ? *(_DWORD *)(v41 + 8) : 0;
      uint64_t v30 = a2[1];
      uint64_t v41 = 0;
      uint64_t v42 = v30;
      uint64_t result = sub_1CD3C8538(v27, &v42, &v41);
      unsigned int v31 = result ? *(_DWORD *)(v41 + 8) : 0;
      if (v29 < v31)
      {
        uint64_t v32 = *a2;
        *a2 = *a3;
        *a3 = v32;
        uint64_t v33 = a2[1];
        a2[1] = a3[1];
        a3[1] = v33;
        unsigned int v34 = (uint64_t *)(*a6 + 2160);
        uint64_t v35 = a2[1];
        uint64_t v41 = 0;
        uint64_t v42 = v35;
        if (sub_1CD3C8538(v34, &v42, &v41)) {
          unsigned int v36 = *(_DWORD *)(v41 + 8);
        }
        else {
          unsigned int v36 = 0;
        }
        uint64_t v37 = a1[1];
        uint64_t v41 = 0;
        uint64_t v42 = v37;
        uint64_t result = sub_1CD3C8538(v34, &v42, &v41);
        if (result) {
          unsigned int v38 = *(_DWORD *)(v41 + 8);
        }
        else {
          unsigned int v38 = 0;
        }
        if (v36 < v38)
        {
          uint64_t v39 = *a1;
          *a1 = *a2;
          *a2 = v39;
          uint64_t v40 = a1[1];
          a1[1] = a2[1];
          a2[1] = v40;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CCE625E4(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  int v9 = a2 + 1;
  uint64_t v8 = a2[1];
  uint64_t v10 = (uint64_t *)(*a4 + 2160);
  uint64_t v41 = 0;
  uint64_t v42 = v8;
  if (sub_1CD3C8538(v10, &v42, &v41)) {
    unsigned int v11 = *(_DWORD *)(v41 + 8);
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v13 = a1 + 1;
  uint64_t v12 = a1[1];
  uint64_t v41 = 0;
  uint64_t v42 = v12;
  if (sub_1CD3C8538(v10, &v42, &v41)) {
    unsigned int v14 = *(_DWORD *)(v41 + 8);
  }
  else {
    unsigned int v14 = 0;
  }
  uint64_t v15 = (uint64_t *)(*a4 + 2160);
  uint64_t v16 = a3[1];
  if (v11 >= v14)
  {
    uint64_t v41 = 0;
    uint64_t v42 = v16;
    if (sub_1CD3C8538(v15, &v42, &v41)) {
      unsigned int v18 = *(_DWORD *)(v41 + 8);
    }
    else {
      unsigned int v18 = 0;
    }
    uint64_t v22 = *v9;
    uint64_t v41 = 0;
    uint64_t v42 = v22;
    uint64_t result = sub_1CD3C8538(v15, &v42, &v41);
    if (result) {
      unsigned int v23 = *(_DWORD *)(v41 + 8);
    }
    else {
      unsigned int v23 = 0;
    }
    if (v18 < v23)
    {
      uint64_t v30 = *a2;
      *a2 = *a3;
      *a3 = v30;
      uint64_t v31 = a2[1];
      a2[1] = a3[1];
      a3[1] = v31;
      uint64_t v32 = (uint64_t *)(*a4 + 2160);
      uint64_t v33 = a2[1];
      uint64_t v41 = 0;
      uint64_t v42 = v33;
      unsigned int v34 = sub_1CD3C8538(v32, &v42, &v41) ? *(_DWORD *)(v41 + 8) : 0;
      uint64_t v37 = *v13;
      uint64_t v41 = 0;
      uint64_t v42 = v37;
      uint64_t result = sub_1CD3C8538(v32, &v42, &v41);
      unsigned int v38 = result ? *(_DWORD *)(v41 + 8) : 0;
      if (v34 < v38)
      {
        uint64_t v40 = *a1;
        *a1 = *a2;
        *a2 = v40;
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v42 = v16;
    if (sub_1CD3C8538(v15, &v42, &v41)) {
      unsigned int v17 = *(_DWORD *)(v41 + 8);
    }
    else {
      unsigned int v17 = 0;
    }
    uint64_t v19 = *v9;
    uint64_t v41 = 0;
    uint64_t v42 = v19;
    uint64_t result = sub_1CD3C8538(v15, &v42, &v41);
    if (result) {
      unsigned int v21 = *(_DWORD *)(v41 + 8);
    }
    else {
      unsigned int v21 = 0;
    }
    uint64_t v24 = *a1;
    if (v17 < v21)
    {
      *a1 = *a3;
      *a3 = v24;
LABEL_21:
      int v9 = a3 + 1;
LABEL_22:
      uint64_t v25 = *v13;
      *uint64_t v13 = *v9;
      *int v9 = v25;
      return result;
    }
    *a1 = *a2;
    *a2 = v24;
    uint64_t v26 = a1[1];
    a1[1] = a2[1];
    a2[1] = v26;
    unsigned int v27 = (uint64_t *)(*a4 + 2160);
    uint64_t v28 = a3[1];
    uint64_t v41 = 0;
    uint64_t v42 = v28;
    if (sub_1CD3C8538(v27, &v42, &v41)) {
      unsigned int v29 = *(_DWORD *)(v41 + 8);
    }
    else {
      unsigned int v29 = 0;
    }
    uint64_t v35 = *v9;
    uint64_t v41 = 0;
    uint64_t v42 = v35;
    uint64_t result = sub_1CD3C8538(v27, &v42, &v41);
    if (result) {
      unsigned int v36 = *(_DWORD *)(v41 + 8);
    }
    else {
      unsigned int v36 = 0;
    }
    if (v29 < v36)
    {
      uint64_t v39 = *a2;
      *a2 = *a3;
      *a3 = v39;
      uint64_t v13 = v9;
      goto LABEL_21;
    }
  }
  return result;
}

BOOL sub_1CCE628D0(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v26 = (uint64_t *)(*a3 + 2160);
      uint64_t v27 = *(a2 - 1);
      uint64_t v34 = 0;
      uint64_t v35 = v27;
      if (sub_1CD3C8538(v26, &v35, &v34)) {
        unsigned int v28 = *(_DWORD *)(v34 + 8);
      }
      else {
        unsigned int v28 = 0;
      }
      uint64_t v29 = a1[1];
      uint64_t v34 = 0;
      uint64_t v35 = v29;
      if (sub_1CD3C8538(v26, &v35, &v34)) {
        unsigned int v30 = *(_DWORD *)(v34 + 8);
      }
      else {
        unsigned int v30 = 0;
      }
      if (v28 < v30)
      {
        uint64_t v31 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v31;
        uint64_t v32 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v32;
      }
      return 1;
    case 3:
      sub_1CCE625E4(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_1CCE62BC0(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_1CCE62364(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v8 = a1 + 4;
      sub_1CCE625E4(a1, a1 + 2, a1 + 4, a3);
      int v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = (uint64_t *)(*a3 + 2160);
    uint64_t v13 = v9[1];
    uint64_t v34 = 0;
    uint64_t v35 = v13;
    unsigned int v14 = sub_1CD3C8538(v12, &v35, &v34) ? *(_DWORD *)(v34 + 8) : 0;
    uint64_t v15 = v8[1];
    uint64_t v34 = 0;
    uint64_t v35 = v15;
    unsigned int v16 = sub_1CD3C8538(v12, &v35, &v34) ? *(_DWORD *)(v34 + 8) : 0;
    if (v14 < v16)
    {
      uint64_t v17 = v9[1];
      uint64_t v33 = *v9;
      uint64_t v18 = v10;
      while (1)
      {
        uint64_t v19 = (char *)a1 + v18;
        uint64_t v20 = *(uint64_t *)((char *)a1 + v18 + 40);
        *((void *)v19 + 6) = *(uint64_t *)((char *)a1 + v18 + 32);
        *((void *)v19 + 7) = v20;
        if (v18 == -32) {
          break;
        }
        unsigned int v21 = (uint64_t *)(*a3 + 2160);
        uint64_t v34 = 0;
        uint64_t v35 = v17;
        if (sub_1CD3C8538(v21, &v35, &v34)) {
          unsigned int v22 = *(_DWORD *)(v34 + 8);
        }
        else {
          unsigned int v22 = 0;
        }
        uint64_t v23 = *(uint64_t *)((char *)a1 + v18 + 24);
        uint64_t v34 = 0;
        uint64_t v35 = v23;
        if (sub_1CD3C8538(v21, &v35, &v34)) {
          unsigned int v24 = *(_DWORD *)(v34 + 8);
        }
        else {
          unsigned int v24 = 0;
        }
        v18 -= 16;
        if (v22 >= v24)
        {
          uint64_t v25 = (uint64_t *)((char *)a1 + v18 + 48);
          goto LABEL_23;
        }
      }
      uint64_t v25 = a1;
LABEL_23:
      *uint64_t v25 = v33;
      v25[1] = v17;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    BOOL result = 1;
    v9 += 2;
    if (v9 == a2) {
      return result;
    }
  }
}

uint64_t sub_1CCE62BC0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  sub_1CCE625E4(a1, a2, a3, a5);
  uint64_t v10 = (uint64_t *)(*a5 + 2160);
  uint64_t v11 = a4[1];
  uint64_t v32 = 0;
  uint64_t v33 = v11;
  if (sub_1CD3C8538(v10, &v33, &v32)) {
    unsigned int v12 = *(_DWORD *)(v32 + 8);
  }
  else {
    unsigned int v12 = 0;
  }
  uint64_t v13 = a3[1];
  uint64_t v32 = 0;
  uint64_t v33 = v13;
  uint64_t result = sub_1CD3C8538(v10, &v33, &v32);
  if (result) {
    unsigned int v15 = *(_DWORD *)(v32 + 8);
  }
  else {
    unsigned int v15 = 0;
  }
  if (v12 < v15)
  {
    uint64_t v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    uint64_t v17 = a3[1];
    a3[1] = a4[1];
    a4[1] = v17;
    uint64_t v18 = (uint64_t *)(*a5 + 2160);
    uint64_t v19 = a3[1];
    uint64_t v32 = 0;
    uint64_t v33 = v19;
    unsigned int v20 = sub_1CD3C8538(v18, &v33, &v32) ? *(_DWORD *)(v32 + 8) : 0;
    uint64_t v21 = a2[1];
    uint64_t v32 = 0;
    uint64_t v33 = v21;
    uint64_t result = sub_1CD3C8538(v18, &v33, &v32);
    unsigned int v22 = result ? *(_DWORD *)(v32 + 8) : 0;
    if (v20 < v22)
    {
      uint64_t v23 = *a2;
      *a2 = *a3;
      *a3 = v23;
      uint64_t v24 = a2[1];
      a2[1] = a3[1];
      a3[1] = v24;
      uint64_t v25 = (uint64_t *)(*a5 + 2160);
      uint64_t v26 = a2[1];
      uint64_t v32 = 0;
      uint64_t v33 = v26;
      if (sub_1CD3C8538(v25, &v33, &v32)) {
        unsigned int v27 = *(_DWORD *)(v32 + 8);
      }
      else {
        unsigned int v27 = 0;
      }
      uint64_t v28 = a1[1];
      uint64_t v32 = 0;
      uint64_t v33 = v28;
      uint64_t result = sub_1CD3C8538(v25, &v33, &v32);
      if (result) {
        unsigned int v29 = *(_DWORD *)(v32 + 8);
      }
      else {
        unsigned int v29 = 0;
      }
      if (v27 < v29)
      {
        uint64_t v30 = *a1;
        *a1 = *a2;
        *a2 = v30;
        uint64_t v31 = a1[1];
        a1[1] = a2[1];
        a2[1] = v31;
      }
    }
  }
  return result;
}

BOOL sub_1CCE62DB4(uint64_t a1, uint64_t a2)
{
  v46[0] = 0;
  if (sub_1CBB0BF40(*(void *)(a1 + 1816), *(_DWORD *)(a1 + 1832), a2, v46))
  {
    int v4 = *(_DWORD *)(v46[0] + 8);
    if (v4) {
      return v4 != 2;
    }
  }
  int v5 = *(_DWORD *)(a1 + 368);
  unsigned int v6 = a2 >> 4;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 352);
    unsigned int v8 = v5 - 1;
    uint64_t v9 = (v5 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v10 = *(void *)(v7 + 16 * v9);
    if (v10 == a2)
    {
LABEL_8:
      if (*(_DWORD *)(v7 + 16 * v9 + 8)) {
        goto LABEL_10;
      }
    }
    else
    {
      int v11 = 1;
      while (v10 != -4096)
      {
        int v12 = v9 + v11++;
        uint64_t v9 = v12 & v8;
        uint64_t v10 = *(void *)(v7 + 16 * v9);
        if (v10 == a2) {
          goto LABEL_8;
        }
      }
    }
  }
  sub_1CCE6345C((int *)(a1 + 248), a2);
LABEL_10:
  uint64_t v13 = a1 + 1816;
  int v14 = *(_DWORD *)(a1 + 1256);
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 1240);
    unsigned int v16 = v14 - 1;
    uint64_t v17 = (v14 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v18 = *(void *)(v15 + 16 * v17);
    if (v18 == a2)
    {
LABEL_15:
      unsigned int v21 = *(_DWORD *)(v15 + 16 * v17 + 8);
      goto LABEL_17;
    }
    int v19 = 1;
    while (v18 != -4096)
    {
      int v20 = v17 + v19++;
      uint64_t v17 = v20 & v16;
      uint64_t v18 = *(void *)(v15 + 16 * v17);
      if (v18 == a2) {
        goto LABEL_15;
      }
    }
  }
  unsigned int v21 = 0;
LABEL_17:
  uint64_t v22 = *(void *)(a1 + 456) + 96 * v21;
  uint64_t v24 = (unsigned int *)(v22 + 20);
  LODWORD(v23) = *(_DWORD *)(v22 + 20);
  if (v23 - *(_DWORD *)(v22 + 24) == 1)
  {
    uint64_t v47 = a2;
    int v48 = 1;
    sub_1CCE63350((uint64_t)v46, v13, (uint64_t)&v47);
    int v4 = 0;
    return v4 != 2;
  }
  uint64_t v26 = *(uint64_t **)v22;
  uint64_t v25 = *(uint64_t **)(v22 + 8);
  unsigned int v29 = *(_DWORD *)(v22 + 16);
  uint64_t v28 = (unsigned int *)(v22 + 16);
  unsigned int v27 = v29;
  if (v25 == v26) {
    uint64_t v23 = v23;
  }
  else {
    uint64_t v23 = v27;
  }
  uint64_t v30 = v25;
  if (v23)
  {
    uint64_t v31 = 8 * v23;
    uint64_t v30 = v25;
    while ((unint64_t)*v30 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v30;
      v31 -= 8;
      if (!v31) {
        goto LABEL_36;
      }
    }
  }
  uint64_t v32 = &v25[v23];
  if (v30 != v32)
  {
    uint64_t v33 = *v30;
LABEL_29:
    if (*(unsigned char *)(v33 + 16) != 83)
    {
      uint64_t v34 = sub_1CCE632F4(v33);
      if (!v34 || *(unsigned char *)(v34 + 16) != 83)
      {
        int v4 = 2;
        goto LABEL_37;
      }
    }
    uint64_t v35 = (unint64_t *)(v30 + 1);
    while (v35 != (unint64_t *)v32)
    {
      unint64_t v36 = *v35++;
      uint64_t v33 = v36;
      if (v36 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v30 = (uint64_t *)(v35 - 1);
        goto LABEL_29;
      }
    }
  }
LABEL_36:
  int v4 = 1;
LABEL_37:
  if (v25 == v26) {
    uint64_t v37 = v24;
  }
  else {
    uint64_t v37 = v28;
  }
  uint64_t v38 = *v37;
  if (v38)
  {
    uint64_t v39 = 8 * v38;
    for (uint64_t i = (unint64_t *)v25; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v39 -= 8;
      if (!v39) {
        return v4 != 2;
      }
    }
  }
  else
  {
    uint64_t i = (unint64_t *)v25;
  }
  uint64_t v41 = (unint64_t *)&v25[v38];
  if (i != v41)
  {
    unint64_t v42 = *i;
    if (*i)
    {
LABEL_48:
      if (*(unsigned char *)(v42 + 16) == 83)
      {
        uint64_t v47 = v42;
        int v48 = v4;
        sub_1CCE63350((uint64_t)v46, v13, (uint64_t)&v47);
      }
    }
LABEL_50:
    unsigned int v43 = i + 1;
    while (v43 != v41)
    {
      unint64_t v44 = *v43++;
      unint64_t v42 = v44;
      if (v44 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t i = v43 - 1;
        if (v42) {
          goto LABEL_48;
        }
        goto LABEL_50;
      }
    }
  }
  return v4 != 2;
}

uint64_t **sub_1CCE6306C(uint64_t **result)
{
  char v1 = *result;
  if (*result != result[1])
  {
    unsigned int v2 = result;
    while (1)
    {
      uint64_t v3 = v1[1];
      uint64_t v4 = (uint64_t)v2[3];
      uint64_t v5 = *v2[2];
      if (!v5
        || *(unsigned char *)(v5 + 16) != 83
        || (uint64_t result = (uint64_t **)*v1, *v1 != v5)
        && (uint64_t result = (uint64_t **)sub_1CCE632F4((uint64_t)result), result != (uint64_t **)v5))
      {
        uint64_t v6 = *v2[4];
        v34[0] = v3;
        v34[1] = v6;
        uint64_t v35 = 0;
        uint64_t result = (uint64_t **)sub_1CCDB497C((uint64_t *)(v4 + 1968), v34, &v35);
        if (result)
        {
          uint64_t v7 = *v1;
          uint64_t result = (uint64_t **)sub_1CCE61078(*(void *)(v4 + 1384), *(_DWORD *)(v4 + 1400), *v1);
          if (result != *(uint64_t ***)(v4 + 1344)) {
            break;
          }
        }
      }
LABEL_15:
      uint64_t v13 = v2[1];
      char v1 = *v2 + 2;
      *unsigned int v2 = v1;
      if (v1 == v13) {
        return result;
      }
    }
    unsigned int v8 = v2[5];
    char v9 = *(unsigned char *)v8;
    if (*(unsigned char *)v8) {
      char v9 = *(unsigned __int8 *)(v7 + 16) < 0x15u;
    }
    *(unsigned char *)unsigned int v8 = v9;
    uint64_t v10 = (BOOL *)v2[6];
    if (*v10 || (uint64_t v11 = *v2[4], v3 == v11))
    {
      BOOL v12 = 1;
      goto LABEL_14;
    }
    uint64_t v14 = *(void *)(v4 + 8);
    uint64_t v15 = *(void *)(v14 + 24);
    uint64_t v16 = *(unsigned int *)(v14 + 40);
    if (v16)
    {
      LODWORD(v17) = (v16 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v18 = (uint64_t *)(v15 + 16 * v17);
      uint64_t v19 = *v18;
      if (v3 == *v18) {
        goto LABEL_24;
      }
      int v20 = 1;
      while (v19 != -4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        uint64_t v19 = *(void *)(v15 + 16 * v17);
        if (v3 == v19)
        {
          uint64_t v18 = (uint64_t *)(v15 + 16 * v17);
          goto LABEL_24;
        }
      }
    }
    uint64_t v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_24:
    if (v18 == (uint64_t *)(v15 + 16 * v16)) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v18[1];
    }
    v34[0] = 0;
    if (sub_1CD40EA84(*(void *)(v4 + 1320), *(_DWORD *)(v4 + 1336), v22, v34)) {
      unsigned int v23 = *(_DWORD *)(v34[0] + 8);
    }
    else {
      unsigned int v23 = 0;
    }
    uint64_t v24 = *(void *)(v4 + 8);
    uint64_t v25 = *(void *)(v24 + 24);
    uint64_t v26 = *(unsigned int *)(v24 + 40);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      uint64_t v28 = (uint64_t *)(v25 + 16 * v27);
      uint64_t v29 = *v28;
      if (v11 == *v28)
      {
LABEL_37:
        if (v28 == (uint64_t *)(v25 + 16 * v26)) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v28[1];
        }
        v34[0] = 0;
        if (sub_1CD40EA84(*(void *)(v4 + 1320), *(_DWORD *)(v4 + 1336), v32, v34)) {
          unsigned int v33 = *(_DWORD *)(v34[0] + 8);
        }
        else {
          unsigned int v33 = 0;
        }
        BOOL v12 = v23 >= v33;
        uint64_t v10 = (BOOL *)v2[6];
LABEL_14:
        *uint64_t v10 = v12;
        uint64_t result = (uint64_t **)sub_1CCE60C84(v4, *v1);
        if (result != (uint64_t **)*v2[2]) {
          return result;
        }
        goto LABEL_15;
      }
      int v30 = 1;
      while (v29 != -4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        uint64_t v29 = *(void *)(v25 + 16 * v27);
        if (v11 == v29)
        {
          uint64_t v28 = (uint64_t *)(v25 + 16 * v27);
          goto LABEL_37;
        }
      }
    }
    uint64_t v28 = (uint64_t *)(v25 + 16 * v26);
    goto LABEL_37;
  }
  return result;
}

uint64_t sub_1CCE632F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 84
    && (uint64_t v1 = *(void *)(a1 - 32)) != 0
    && !*(unsigned char *)(v1 + 16)
    && *(void *)(v1 + 24) == *(void *)(a1 + 72)
    && (*(unsigned char *)(v1 + 33) & 0x20) != 0
    && *(_DWORD *)(v1 + 36) == 281)
  {
    return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1CCE63350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CBB0BF40(*(void *)a2, *(_DWORD *)(a2 + 16), *(void *)a3, &v12);
  uint64_t v7 = v12;
  if (result)
  {
    char v8 = 0;
    goto LABEL_8;
  }
  int v9 = *(_DWORD *)(a2 + 8);
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_10;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    sub_1CCE5BB60(a2, v10);
    uint64_t v12 = 0;
    uint64_t result = sub_1CBB0BF40(*(void *)a2, *(_DWORD *)(a2 + 16), *(void *)a3, &v12);
    uint64_t v7 = v12;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*(void *)v7 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *(void *)uint64_t v7 = *(void *)a3;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(a3 + 8);
  char v8 = 1;
LABEL_8:
  uint64_t v11 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

void *sub_1CCE6345C(int *a1, uint64_t a2)
{
  int v4 = *a1 + 1;
  *a1 = v4;
  uint64_t v5 = (uint64_t)(a1 + 26);
  uint64_t v147 = a2;
  uint64_t result = sub_1CC220A0C((uint64_t)(a1 + 26), &v147);
  *((_DWORD *)result + 2) = v4;
  int v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) != 0)
  {
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v8 = v7 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v8 = v7 & 0x7FFFFFF;
    uint64_t v9 = a2 - 32 * v8;
  }
  unsigned int v146 = *a1;
  unsigned int v10 = a2 >> 4;
  if (v8)
  {
    uint64_t v11 = v9 + 32 * v8;
    do
    {
      uint64_t v12 = *(void *)v9;
      if (*(void *)v9) {
        BOOL v13 = *(unsigned __int8 *)(*(void *)v9 + 16) >= 0x1Cu;
      }
      else {
        BOOL v13 = 0;
      }
      if (!v13) {
        goto LABEL_64;
      }
      int v14 = a1[30];
      if (v14)
      {
        uint64_t v15 = *((void *)a1 + 13);
        unsigned int v16 = v14 - 1;
        uint64_t v17 = (v14 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        uint64_t v18 = *(void *)(v15 + 16 * v17);
        if (v12 == v18)
        {
LABEL_16:
          if (*(_DWORD *)(v15 + 16 * v17 + 8)) {
            goto LABEL_18;
          }
        }
        else
        {
          int v19 = 1;
          while (v18 != -4096)
          {
            int v20 = v17 + v19++;
            uint64_t v17 = v20 & v16;
            uint64_t v18 = *(void *)(v15 + 16 * v17);
            if (v12 == v18) {
              goto LABEL_16;
            }
          }
        }
      }
      uint64_t result = (void *)sub_1CCE6345C(a1);
      uint64_t v12 = *(void *)v9;
LABEL_18:
      uint64_t v22 = *((void *)a1 + 1);
      uint64_t v21 = *((void *)a1 + 2);
      if (v21 == v22)
      {
        uint64_t v23 = a1[7];
        uint64_t v24 = (void *)(v21 + 8 * v23);
        if (v23)
        {
          uint64_t v25 = 0;
          uint64_t v26 = 8 * v23;
          while (*(void *)(v21 + v25) != v12)
          {
            v25 += 8;
            if (v26 == v25) {
              goto LABEL_36;
            }
          }
          uint64_t v24 = (void *)(v21 + v25);
        }
LABEL_36:
        uint64_t v22 = *((void *)a1 + 2);
      }
      else
      {
        uint64_t v27 = a1[6];
        int v28 = v27 - 1;
        unsigned int v29 = (v27 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        uint64_t v24 = (void *)(v21 + 8 * v29);
        uint64_t v30 = *v24;
        if (*v24 == -1)
        {
          int v31 = 0;
LABEL_54:
          if (v31) {
            uint64_t v24 = v31;
          }
          if (*v24 != v12) {
            uint64_t v24 = (void *)(v21 + 8 * v27);
          }
        }
        else
        {
          int v31 = 0;
          int v32 = 1;
          while (v30 != v12)
          {
            if (v31) {
              BOOL v33 = 0;
            }
            else {
              BOOL v33 = v30 == -2;
            }
            if (v33) {
              int v31 = v24;
            }
            unsigned int v34 = v29 + v32++;
            unsigned int v29 = v34 & v28;
            uint64_t v24 = (void *)(v21 + 8 * (v34 & v28));
            uint64_t v30 = *v24;
            if (*v24 == -1) {
              goto LABEL_54;
            }
          }
        }
      }
      if (v21 == v22) {
        uint64_t v35 = (unsigned int *)(a1 + 7);
      }
      else {
        uint64_t v35 = (unsigned int *)(a1 + 6);
      }
      if (v24 != (void *)(v21 + 8 * *v35)) {
        goto LABEL_64;
      }
      int v36 = a1[30];
      if (!v36)
      {
        unsigned int v43 = 0;
LABEL_59:
        unsigned int v48 = 0;
        goto LABEL_60;
      }
      uint64_t v37 = *((void *)a1 + 13);
      unsigned int v38 = v36 - 1;
      uint64_t v39 = v38 & (v10 ^ (a2 >> 9));
      uint64_t v40 = *(void *)(v37 + 16 * v39);
      if (v40 == a2)
      {
LABEL_46:
        unsigned int v43 = *(_DWORD *)(v37 + 16 * v39 + 8);
      }
      else
      {
        int v41 = 1;
        while (v40 != -4096)
        {
          int v42 = v39 + v41++;
          uint64_t v39 = v42 & v38;
          uint64_t v40 = *(void *)(v37 + 16 * v39);
          if (v40 == a2) {
            goto LABEL_46;
          }
        }
        unsigned int v43 = 0;
      }
      uint64_t v44 = ((v12 >> 4) ^ (v12 >> 9)) & v38;
      uint64_t v45 = *(void *)(v37 + 16 * v44);
      if (v12 != v45)
      {
        int v46 = 1;
        while (v45 != -4096)
        {
          int v47 = v44 + v46++;
          uint64_t v44 = v47 & v38;
          uint64_t v45 = *(void *)(v37 + 16 * v44);
          if (v12 == v45) {
            goto LABEL_52;
          }
        }
        goto LABEL_59;
      }
LABEL_52:
      unsigned int v48 = *(_DWORD *)(v37 + 16 * v44 + 8);
LABEL_60:
      if (v48 >= v43) {
        unsigned int v49 = v43;
      }
      else {
        unsigned int v49 = v48;
      }
      uint64_t v147 = a2;
      uint64_t result = sub_1CC220A0C(v5, &v147);
      *((_DWORD *)result + 2) = v49;
LABEL_64:
      v9 += 32;
    }
    while (v9 != v11);
  }
  int v50 = a1[30];
  if (v50)
  {
    uint64_t v51 = *((void *)a1 + 13);
    unsigned int v52 = v50 - 1;
    uint64_t v53 = (v50 - 1) & (v10 ^ (a2 >> 9));
    uint64_t v54 = *(void *)(v51 + 16 * v53);
    if (v54 == a2)
    {
      unsigned int v56 = v146;
LABEL_73:
      int v58 = *(_DWORD *)(v51 + 16 * v53 + 8);
    }
    else
    {
      int v55 = 1;
      unsigned int v56 = v146;
      while (v54 != -4096)
      {
        int v57 = v53 + v55++;
        uint64_t v53 = v57 & v52;
        uint64_t v54 = *(void *)(v51 + 16 * v53);
        if (v54 == a2) {
          goto LABEL_73;
        }
      }
      int v58 = 0;
    }
  }
  else
  {
    int v58 = 0;
    unsigned int v56 = v146;
  }
  if (v58 == v56)
  {
    uint64_t v60 = a1[54];
    sub_1CD77DB94((uint64_t)(a1 + 52), v60 + 1);
    uint64_t v61 = *((void *)a1 + 26) + 96 * a1[54];
    unsigned int v62 = (llvm::SmallPtrSetImplBase *)(v61 - 96);
    uint64_t v63 = *(void *)(v61 - 88);
    uint64_t v64 = *(unsigned int *)(v61 - 76);
    if (v63 == *(void *)(v61 - 96))
    {
      if (v64)
      {
        uint64_t v65 = 0;
        uint64_t v66 = 8 * v64;
        unsigned int v67 = *(uint64_t **)(v61 - 88);
        while (*v67 != a2)
        {
          if (*v67 == -2) {
            uint64_t v65 = v67;
          }
          ++v67;
          v66 -= 8;
          if (!v66)
          {
            if (!v65) {
              goto LABEL_86;
            }
            *uint64_t v65 = a2;
            --*(_DWORD *)(v61 - 72);
            break;
          }
        }
LABEL_111:
        uint64_t v78 = *((void *)a1 + 2);
        uint64_t v79 = a1[7];
        if (v78 == *((void *)a1 + 1))
        {
          if (v79)
          {
            long long v80 = 0;
            uint64_t v81 = 8 * v79;
            BOOL v82 = (uint64_t *)*((void *)a1 + 2);
            while (*v82 != a2)
            {
              if (*v82 == -2) {
                long long v80 = v82;
              }
              ++v82;
              v81 -= 8;
              if (!v81)
              {
                if (!v80) {
                  goto LABEL_119;
                }
                *long long v80 = a2;
                --a1[8];
                break;
              }
            }
LABEL_143:
            uint64_t v147 = a2;
            uint64_t result = sub_1CC220A0C((uint64_t)(a1 + 248), &v147);
            *((_DWORD *)result + 2) = v60;
            unsigned int v93 = a1[34];
            if (!v93) {
              return result;
            }
            while (1)
            {
              uint64_t v94 = *((void *)a1 + 16) + 8 * v93;
              int v95 = a1[30];
              if (v95)
              {
                uint64_t v96 = *(void *)(v94 - 8);
                uint64_t v97 = *((void *)a1 + 13);
                unsigned int v98 = v95 - 1;
                uint64_t v99 = ((v96 >> 4) ^ (v96 >> 9)) & (v95 - 1);
                uint64_t v100 = *(void *)(v97 + 16 * v99);
                if (v96 == v100)
                {
LABEL_149:
                  unsigned int v103 = *(_DWORD *)(v97 + 16 * v99 + 8);
                  goto LABEL_151;
                }
                int v101 = 1;
                while (v100 != -4096)
                {
                  int v102 = v99 + v101++;
                  uint64_t v99 = v102 & v98;
                  uint64_t v100 = *(void *)(v97 + 16 * v99);
                  if (v96 == v100) {
                    goto LABEL_149;
                  }
                }
              }
              unsigned int v103 = 0;
LABEL_151:
              if (v103 < v56) {
                return result;
              }
              uint64_t v147 = 0;
              uint64_t v104 = *(void *)(v94 - 8);
              uint64_t v147 = v104;
              uint64_t v105 = *(void *)(v61 - 88);
              uint64_t v106 = *(unsigned int *)(v61 - 76);
              if (v105 != *(void *)(v61 - 96))
              {
                unsigned int v110 = *(_DWORD *)(v61 - 80);
                goto LABEL_163;
              }
              if (!v106)
              {
LABEL_160:
                unsigned int v110 = *(_DWORD *)(v61 - 80);
                if (v106 < v110)
                {
                  *(_DWORD *)(v61 - 76) = v106 + 1;
                  *(void *)(v105 + 8 * v106) = v104;
                  goto LABEL_184;
                }
LABEL_163:
                if (3 * v110 <= 4 * ((int)v106 - *(_DWORD *)(v61 - 72)))
                {
                  if (v110 >= 0x40) {
                    v110 *= 2;
                  }
                  else {
                    unsigned int v110 = 128;
                  }
                }
                else if (v110 - v106 >= v110 >> 3)
                {
                  goto LABEL_165;
                }
                llvm::SmallPtrSetImplBase::Grow(v62, v110);
                unsigned int v110 = *(_DWORD *)(v61 - 80);
                uint64_t v105 = *(void *)(v61 - 88);
LABEL_165:
                unsigned int v111 = v110 - 1;
                unsigned int v112 = (v110 - 1) & ((v104 >> 4) ^ (v104 >> 9));
                uint64_t v113 = (uint64_t *)(v105 + 8 * v112);
                uint64_t v114 = *v113;
                if (*v113 == -1)
                {
                  int v115 = 0;
LABEL_177:
                  if (v115) {
                    uint64_t v119 = v115;
                  }
                  else {
                    uint64_t v119 = v113;
                  }
                  if (*v119 != v104)
                  {
                    if (*v119 == -2) {
                      --*(_DWORD *)(v61 - 72);
                    }
                    else {
                      ++*(_DWORD *)(v61 - 76);
                    }
                    uint64_t *v119 = v104;
                  }
                }
                else
                {
                  int v115 = 0;
                  int v116 = 1;
                  while (v114 != v104)
                  {
                    if (v115) {
                      BOOL v117 = 0;
                    }
                    else {
                      BOOL v117 = v114 == -2;
                    }
                    if (v117) {
                      int v115 = v113;
                    }
                    unsigned int v118 = v112 + v116++;
                    unsigned int v112 = v118 & v111;
                    uint64_t v113 = (uint64_t *)(v105 + 8 * (v118 & v111));
                    uint64_t v114 = *v113;
                    if (*v113 == -1) {
                      goto LABEL_177;
                    }
                  }
                }
                goto LABEL_184;
              }
              uint64_t v107 = 0;
              uint64_t v108 = 8 * v106;
              unsigned int v109 = *(uint64_t **)(v61 - 88);
              while (*v109 != v104)
              {
                if (*v109 == -2) {
                  uint64_t v107 = v109;
                }
                ++v109;
                v108 -= 8;
                if (!v108)
                {
                  if (!v107) {
                    goto LABEL_160;
                  }
                  *uint64_t v107 = v104;
                  --*(_DWORD *)(v61 - 72);
                  break;
                }
              }
LABEL_184:
              uint64_t v120 = v147;
              uint64_t v121 = *((void *)a1 + 2);
              uint64_t v122 = a1[7];
              if (v121 != *((void *)a1 + 1))
              {
                unsigned int v126 = a1[6];
                goto LABEL_195;
              }
              if (!v122)
              {
LABEL_192:
                unsigned int v126 = a1[6];
                if (v122 < v126)
                {
                  a1[7] = v122 + 1;
                  *(void *)(v121 + 8 * v122) = v120;
                  goto LABEL_216;
                }
LABEL_195:
                if (3 * v126 <= 4 * ((int)v122 - a1[8]))
                {
                  if (v126 >= 0x40) {
                    v126 *= 2;
                  }
                  else {
                    unsigned int v126 = 128;
                  }
                }
                else if (v126 - v122 >= v126 >> 3)
                {
                  goto LABEL_197;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 2), v126);
                unsigned int v126 = a1[6];
                uint64_t v121 = *((void *)a1 + 2);
LABEL_197:
                unsigned int v127 = v126 - 1;
                unsigned int v128 = (v126 - 1) & ((v120 >> 4) ^ (v120 >> 9));
                unsigned int v129 = (uint64_t *)(v121 + 8 * v128);
                uint64_t v130 = *v129;
                if (*v129 == -1)
                {
                  uint64_t v131 = 0;
LABEL_209:
                  if (v131) {
                    uint64_t v135 = v131;
                  }
                  else {
                    uint64_t v135 = v129;
                  }
                  if (*v135 != v120)
                  {
                    if (*v135 == -2) {
                      --a1[8];
                    }
                    else {
                      ++a1[7];
                    }
                    uint64_t *v135 = v120;
                  }
                }
                else
                {
                  uint64_t v131 = 0;
                  int v132 = 1;
                  while (v130 != v120)
                  {
                    if (v131) {
                      BOOL v133 = 0;
                    }
                    else {
                      BOOL v133 = v130 == -2;
                    }
                    if (v133) {
                      uint64_t v131 = v129;
                    }
                    unsigned int v134 = v128 + v132++;
                    unsigned int v128 = v134 & v127;
                    unsigned int v129 = (uint64_t *)(v121 + 8 * (v134 & v127));
                    uint64_t v130 = *v129;
                    if (*v129 == -1) {
                      goto LABEL_209;
                    }
                  }
                }
                goto LABEL_216;
              }
              uint64_t v123 = 0;
              uint64_t v124 = 8 * v122;
              unsigned int v125 = (void *)*((void *)a1 + 2);
              while (*v125 != v147)
              {
                if (*v125 == -2) {
                  uint64_t v123 = v125;
                }
                ++v125;
                v124 -= 8;
                if (!v124)
                {
                  if (!v123) {
                    goto LABEL_192;
                  }
                  *uint64_t v123 = v147;
                  --a1[8];
                  break;
                }
              }
LABEL_216:
              int v136 = a1[252];
              if (!v136)
              {
                unsigned int v145 = 0;
                unsigned int v56 = v146;
LABEL_230:
                uint64_t result = sub_1CC21DC7C((uint64_t)(a1 + 248), (uint64_t)&v147, &v147, v145);
                *uint64_t result = v147;
                *((_DWORD *)result + 2) = 0;
                goto LABEL_231;
              }
              uint64_t v137 = *((void *)a1 + 124);
              int v138 = v136 - 1;
              unsigned int v139 = ((v147 >> 4) ^ (v147 >> 9)) & v138;
              uint64_t result = (void *)(v137 + 16 * v139);
              uint64_t v140 = *result;
              unsigned int v56 = v146;
              if (v147 != *result)
              {
                int v141 = 0;
                int v142 = 1;
                while (v140 != -4096)
                {
                  if (v141) {
                    BOOL v143 = 0;
                  }
                  else {
                    BOOL v143 = v140 == -8192;
                  }
                  if (v143) {
                    int v141 = result;
                  }
                  unsigned int v144 = v139 + v142++;
                  unsigned int v139 = v144 & v138;
                  uint64_t result = (void *)(v137 + 16 * v139);
                  uint64_t v140 = *result;
                  if (v147 == *result) {
                    goto LABEL_231;
                  }
                }
                if (v141) {
                  unsigned int v145 = v141;
                }
                else {
                  unsigned int v145 = result;
                }
                goto LABEL_230;
              }
LABEL_231:
              *((_DWORD *)result + 2) = v60;
              unsigned int v93 = a1[34] - 1;
              a1[34] = v93;
              if (!v93) {
                return result;
              }
            }
          }
LABEL_119:
          unsigned int v83 = a1[6];
          if (v79 < v83)
          {
            a1[7] = v79 + 1;
            *(void *)(v78 + 8 * v79) = a2;
            goto LABEL_143;
          }
        }
        else
        {
          unsigned int v83 = a1[6];
        }
        if (3 * v83 <= 4 * ((int)v79 - a1[8]))
        {
          if (v83 >= 0x40) {
            v83 *= 2;
          }
          else {
            unsigned int v83 = 128;
          }
        }
        else if (v83 - v79 >= v83 >> 3)
        {
          goto LABEL_124;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 2), v83);
        unsigned int v83 = a1[6];
        uint64_t v78 = *((void *)a1 + 2);
LABEL_124:
        unsigned int v84 = v83 - 1;
        unsigned int v85 = (v83 - 1) & (v10 ^ (a2 >> 9));
        uint64_t v86 = (uint64_t *)(v78 + 8 * v85);
        uint64_t v87 = *v86;
        if (*v86 == -1)
        {
          unsigned int v88 = 0;
LABEL_136:
          if (v88) {
            uint64_t v92 = v88;
          }
          else {
            uint64_t v92 = v86;
          }
          if (*v92 != a2)
          {
            if (*v92 == -2) {
              --a1[8];
            }
            else {
              ++a1[7];
            }
            uint64_t *v92 = a2;
          }
        }
        else
        {
          unsigned int v88 = 0;
          int v89 = 1;
          while (v87 != a2)
          {
            if (v88) {
              BOOL v90 = 0;
            }
            else {
              BOOL v90 = v87 == -2;
            }
            if (v90) {
              unsigned int v88 = v86;
            }
            unsigned int v91 = v85 + v89++;
            unsigned int v85 = v91 & v84;
            uint64_t v86 = (uint64_t *)(v78 + 8 * (v91 & v84));
            uint64_t v87 = *v86;
            if (*v86 == -1) {
              goto LABEL_136;
            }
          }
        }
        goto LABEL_143;
      }
LABEL_86:
      unsigned int v68 = *(_DWORD *)(v61 - 80);
      if (v64 < v68)
      {
        *(_DWORD *)(v61 - 76) = v64 + 1;
        *(void *)(v63 + 8 * v64) = a2;
        goto LABEL_111;
      }
    }
    else
    {
      unsigned int v68 = *(_DWORD *)(v61 - 80);
    }
    if (3 * v68 <= 4 * ((int)v64 - *(_DWORD *)(v61 - 72)))
    {
      if (v68 >= 0x40) {
        v68 *= 2;
      }
      else {
        unsigned int v68 = 128;
      }
    }
    else if (v68 - v64 >= v68 >> 3)
    {
      goto LABEL_92;
    }
    llvm::SmallPtrSetImplBase::Grow(v62, v68);
    unsigned int v68 = *(_DWORD *)(v61 - 80);
    uint64_t v63 = *(void *)(v61 - 88);
LABEL_92:
    unsigned int v69 = v68 - 1;
    unsigned int v70 = (v68 - 1) & (v10 ^ (a2 >> 9));
    char v71 = (uint64_t *)(v63 + 8 * v70);
    uint64_t v72 = *v71;
    if (*v71 == -1)
    {
      uint64_t v73 = 0;
LABEL_104:
      if (v73) {
        unsigned int v77 = v73;
      }
      else {
        unsigned int v77 = v71;
      }
      if (*v77 != a2)
      {
        if (*v77 == -2) {
          --*(_DWORD *)(v61 - 72);
        }
        else {
          ++*(_DWORD *)(v61 - 76);
        }
        *unsigned int v77 = a2;
      }
    }
    else
    {
      uint64_t v73 = 0;
      int v74 = 1;
      while (v72 != a2)
      {
        if (v73) {
          BOOL v75 = 0;
        }
        else {
          BOOL v75 = v72 == -2;
        }
        if (v75) {
          uint64_t v73 = v71;
        }
        unsigned int v76 = v70 + v74++;
        unsigned int v70 = v76 & v69;
        char v71 = (uint64_t *)(v63 + 8 * (v76 & v69));
        uint64_t v72 = *v71;
        if (*v71 == -1) {
          goto LABEL_104;
        }
      }
    }
    goto LABEL_111;
  }
  unsigned int v59 = a1[34];
  if (v59 >= a1[35]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*((void *)a1 + 16) + 8 * v59) = a2;
  ++a1[34];
  return result;
}

void *sub_1CCE63EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 152) += 64;
  uint64_t v6 = *(void *)(a1 + 72);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 64 > *(void *)(a1 + 80) - v6)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 96) >> 7;
    if (v10 >= 0x1E) {
      LOBYTE(v10) = 30;
    }
    uint64_t v11 = 4096 << v10;
    int v7 = operator new(4096 << v10, (std::align_val_t)8uLL);
    unsigned int v12 = *(_DWORD *)(a1 + 96);
    if (v12 >= *(_DWORD *)(a1 + 100)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 88) + 8 * v12) = v7;
    ++*(_DWORD *)(a1 + 96);
    *(void *)(a1 + 80) = (char *)v7 + v11;
  }
  else
  {
    int v7 = (void *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)(a1 + 72) = v7 + 8;
  unsigned int v8 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v7[1] = 0xFFFFFFFD0000000ALL;
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v8;
  v7[5] = 0;
  v7[6] = a3;
  *int v7 = &unk_1F2640260;
  v7[7] = a2;
  sub_1CCE612B0(a1, a2, (uint64_t)v7);
  return v7;
}

void sub_1CCE64028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  int v4 = sub_1CD4D60C0(a1 + 1744, &v20);
  uint64_t v5 = v4[2];
  uint64_t v6 = *((unsigned int *)v4 + 7);
  if (v5 != v4[1])
  {
    unsigned int v10 = *((_DWORD *)v4 + 6);
    goto LABEL_12;
  }
  if (!v6)
  {
LABEL_9:
    unsigned int v10 = *((_DWORD *)v4 + 6);
    if (v6 < v10)
    {
      *((_DWORD *)v4 + 7) = v6 + 1;
      *(void *)(v5 + 8 * v6) = a3;
      return;
    }
LABEL_12:
    if (3 * v10 <= 4 * ((int)v6 - *((_DWORD *)v4 + 8)))
    {
      if (v10 >= 0x40) {
        v10 *= 2;
      }
      else {
        unsigned int v10 = 128;
      }
    }
    else if (v10 - v6 >= v10 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v4 + 1), v10);
    unsigned int v10 = *((_DWORD *)v4 + 6);
    uint64_t v5 = v4[2];
LABEL_14:
    unsigned int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    BOOL v13 = (void *)(v5 + 8 * v12);
    uint64_t v14 = *v13;
    if (*v13 == -1)
    {
      uint64_t v15 = 0;
LABEL_26:
      if (v15) {
        int v19 = v15;
      }
      else {
        int v19 = v13;
      }
      if (*v19 != a3)
      {
        if (*v19 == -2) {
          --*((_DWORD *)v4 + 8);
        }
        else {
          ++*((_DWORD *)v4 + 7);
        }
        *int v19 = a3;
      }
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      while (v14 != a3)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -2;
        }
        if (v17) {
          uint64_t v15 = v13;
        }
        unsigned int v18 = v12 + v16++;
        unsigned int v12 = v18 & v11;
        BOOL v13 = (void *)(v5 + 8 * (v18 & v11));
        uint64_t v14 = *v13;
        if (*v13 == -1) {
          goto LABEL_26;
        }
      }
    }
    return;
  }
  int v7 = 0;
  uint64_t v8 = 8 * v6;
  uint64_t v9 = (void *)v4[2];
  while (*v9 != a3)
  {
    if (*v9 == -2) {
      int v7 = v9;
    }
    ++v9;
    v8 -= 8;
    if (!v8)
    {
      if (!v7) {
        goto LABEL_9;
      }
      *int v7 = a3;
      --*((_DWORD *)v4 + 8);
      return;
    }
  }
}

unint64_t sub_1CCE641C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1CCE60C84(a1, *(void *)(a2 - 64));
  *(void *)(a1 + 152) += 72;
  uint64_t v8 = *(void *)(a1 + 72);
  unint64_t v7 = *(void *)(a1 + 80);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 72 > v7 - v8)
  {
    unsigned int v16 = *(_DWORD *)(a1 + 96) >> 7;
    if (v16 >= 0x1E) {
      LOBYTE(v16) = 30;
    }
    uint64_t v17 = 4096 << v16;
    unint64_t v9 = (unint64_t)operator new(4096 << v16, (std::align_val_t)8uLL);
    unsigned int v18 = *(_DWORD *)(a1 + 96);
    if (v18 >= *(_DWORD *)(a1 + 100)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 88) + 8 * v18) = v9;
    ++*(_DWORD *)(a1 + 96);
    unint64_t v7 = v9 + v17;
    *(void *)(a1 + 80) = v9 + v17;
  }
  else
  {
    unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 72) = v9 + 72;
  *(void *)(v9 + 8) = 0xFFFFFFFD0000000CLL;
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = 2;
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 48) = a3;
  *(void *)unint64_t v9 = &unk_1F26402E0;
  *(void *)(v9 + 56) = a2;
  *(void *)(v9 + 64) = v6;
  if (*(_DWORD *)(a1 + 176) >= 2u && (uint64_t v10 = *(void *)(a1 + 168), (v11 = *(void **)(v10 + 8)) != 0))
  {
    *(void *)(v10 + 8) = *v11;
  }
  else
  {
    *(void *)(a1 + 152) += 16;
    if (((v9 + 79) & 0xFFFFFFFFFFFFFFF8) - (v9 + 72) + 16 > v7 - (v9 + 72))
    {
      unsigned int v19 = *(_DWORD *)(a1 + 96) >> 7;
      if (v19 >= 0x1E) {
        LOBYTE(v19) = 30;
      }
      uint64_t v20 = 4096 << v19;
      unsigned int v11 = operator new(4096 << v19, (std::align_val_t)8uLL);
      unsigned int v21 = *(_DWORD *)(a1 + 96);
      if (v21 >= *(_DWORD *)(a1 + 100)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 88) + 8 * v21) = v11;
      ++*(_DWORD *)(a1 + 96);
      *(void *)(a1 + 72) = v11 + 2;
      *(void *)(a1 + 80) = (char *)v11 + v20;
    }
    else
    {
      unsigned int v11 = (void *)((v9 + 79) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a1 + 72) = v11 + 2;
    }
  }
  *(void *)(v9 + 24) = v11;
  *(void *)(v9 + 40) = **(void **)(a2 - 64);
  *(_DWORD *)(v9 + 12) = 0;
  unsigned int v12 = sub_1CCE60C84(a1, *(void *)(a2 - 32));
  uint64_t v13 = *(void *)(v9 + 24);
  uint64_t v14 = *(unsigned int *)(v9 + 36);
  *(_DWORD *)(v9 + 36) = v14 + 1;
  *(void *)(v13 + 8 * v14) = v12;
  return v9;
}

void sub_1CCE643F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu) {
    return;
  }
  int v4 = sub_1CD4D60C0(a1 + 1600, &v20);
  uint64_t v5 = v4[2];
  uint64_t v6 = *((unsigned int *)v4 + 7);
  if (v5 != v4[1])
  {
    unsigned int v10 = *((_DWORD *)v4 + 6);
    goto LABEL_14;
  }
  if (!v6)
  {
LABEL_11:
    unsigned int v10 = *((_DWORD *)v4 + 6);
    if (v6 < v10)
    {
      *((_DWORD *)v4 + 7) = v6 + 1;
      *(void *)(v5 + 8 * v6) = a3;
      return;
    }
LABEL_14:
    if (3 * v10 <= 4 * ((int)v6 - *((_DWORD *)v4 + 8)))
    {
      if (v10 >= 0x40) {
        v10 *= 2;
      }
      else {
        unsigned int v10 = 128;
      }
    }
    else if (v10 - v6 >= v10 >> 3)
    {
      goto LABEL_16;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v4 + 1), v10);
    unsigned int v10 = *((_DWORD *)v4 + 6);
    uint64_t v5 = v4[2];
LABEL_16:
    unsigned int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v13 = (void *)(v5 + 8 * v12);
    uint64_t v14 = *v13;
    if (*v13 == -1)
    {
      uint64_t v15 = 0;
LABEL_28:
      if (v15) {
        unsigned int v19 = v15;
      }
      else {
        unsigned int v19 = v13;
      }
      if (*v19 != a3)
      {
        if (*v19 == -2) {
          --*((_DWORD *)v4 + 8);
        }
        else {
          ++*((_DWORD *)v4 + 7);
        }
        *unsigned int v19 = a3;
      }
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      while (v14 != a3)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -2;
        }
        if (v17) {
          uint64_t v15 = v13;
        }
        unsigned int v18 = v12 + v16++;
        unsigned int v12 = v18 & v11;
        uint64_t v13 = (void *)(v5 + 8 * (v18 & v11));
        uint64_t v14 = *v13;
        if (*v13 == -1) {
          goto LABEL_28;
        }
      }
    }
    return;
  }
  unint64_t v7 = 0;
  uint64_t v8 = 8 * v6;
  unint64_t v9 = (void *)v4[2];
  while (*v9 != a3)
  {
    if (*v9 == -2) {
      unint64_t v7 = v9;
    }
    ++v9;
    v8 -= 8;
    if (!v8)
    {
      if (!v7) {
        goto LABEL_11;
      }
      *unint64_t v7 = a3;
      --*((_DWORD *)v4 + 8);
      return;
    }
  }
}

BOOL sub_1CCE645A0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu) {
    return 1;
  }
  uint64_t v7 = a2;
  v6[0] = 0;
  if (!sub_1CCD38408((uint64_t *)(a1 + 1528), &v7, v6)
    || v6[0] == *(void *)(a1 + 1528) + 16 * *(unsigned int *)(a1 + 1544))
  {
    sub_1CCE5BF28(a1, a2);
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates();
  }
  return *(unsigned char *)(v6[0] + 8) != 0;
}

uint64_t *sub_1CCE649F8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = a1;
    uint64_t v6 = (void *)*a2;
    LODWORD(a1) = *(_DWORD *)(*a2 + 16);
    if (!a1)
    {
      a1 = (*(uint64_t (**)(void))(*v6 + 32))(*a2);
      void v6[2] = a1;
    }
    int v7 = v3 - 1;
    unsigned int v8 = v7 & a1;
    for (int i = 1; ; ++i)
    {
      unsigned int v10 = (uint64_t *)(v2 + 16 * v8);
      uint64_t v11 = *v10;
      if (*v10 != -8 && v11 != 0x7FFFFFFF0)
      {
        if ((*(uint64_t (**)(void))(*(void *)*a2 + 24))()) {
          return v10;
        }
        uint64_t v11 = *v10;
      }
      if (v11 == -8) {
        break;
      }
      unsigned int v13 = v8 + i;
      unsigned int v8 = v13 & v7;
    }
    uint64_t v2 = *(void *)v5;
    uint64_t v14 = *(unsigned int *)(v5 + 16);
  }
  else
  {
    uint64_t v14 = 0;
  }
  return (uint64_t *)(v2 + 16 * v14);
}

void sub_1CCE64B00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v4 = 72;
  if (v3 == *(void *)(a2 + 56)) {
    uint64_t v4 = 76;
  }
  uint64_t v5 = *(unsigned int *)(a2 + v4);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    for (int i = *(unint64_t **)(a2 + 64); *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v6 -= 8;
      if (!v6) {
        return;
      }
    }
  }
  else
  {
    int i = *(unint64_t **)(a2 + 64);
  }
  unsigned int v8 = (unint64_t *)(v3 + 8 * v5);
  if (i != v8)
  {
    unint64_t v9 = *i;
    if (!*i) {
      goto LABEL_20;
    }
LABEL_11:
    if (*(unsigned __int8 *)(v9 + 16) < 0x1Cu)
    {
LABEL_20:
      uint64_t v18 = *(void *)(a1 + 1880);
      uint64_t v19 = *(unsigned int *)(a1 + 1892);
      if (v18 == *(void *)(a1 + 1872))
      {
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 8 * v19;
          uint64_t v22 = *(unint64_t **)(a1 + 1880);
          while (*v22 != v9)
          {
            if (*v22 == -2) {
              uint64_t v20 = v22;
            }
            ++v22;
            v21 -= 8;
            if (!v21)
            {
              if (!v20) {
                goto LABEL_28;
              }
              *uint64_t v20 = v9;
              --*(_DWORD *)(a1 + 1896);
              goto LABEL_52;
            }
          }
          goto LABEL_52;
        }
LABEL_28:
        unsigned int v23 = *(_DWORD *)(a1 + 1888);
        if (v19 < v23)
        {
          *(_DWORD *)(a1 + 1892) = v19 + 1;
          *(void *)(v18 + 8 * v19) = v9;
LABEL_52:
          BOOL v33 = i + 1;
          while (v33 != v8)
          {
            unint64_t v34 = *v33++;
            unint64_t v9 = v34;
            if (v34 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              int i = v33 - 1;
              if (v9) {
                goto LABEL_11;
              }
              goto LABEL_20;
            }
          }
          return;
        }
      }
      else
      {
        unsigned int v23 = *(_DWORD *)(a1 + 1888);
      }
      if (3 * v23 <= 4 * ((int)v19 - *(_DWORD *)(a1 + 1896)))
      {
        if (v23 >= 0x40) {
          v23 *= 2;
        }
        else {
          unsigned int v23 = 128;
        }
      }
      else if (v23 - v19 >= v23 >> 3)
      {
        goto LABEL_33;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 1872), v23);
      unsigned int v23 = *(_DWORD *)(a1 + 1888);
      uint64_t v18 = *(void *)(a1 + 1880);
LABEL_33:
      unsigned int v24 = v23 - 1;
      unsigned int v25 = (v23 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v26 = (unint64_t *)(v18 + 8 * v25);
      unint64_t v27 = *v26;
      if (*v26 == -1)
      {
        int v28 = 0;
LABEL_45:
        if (v28) {
          int v32 = v28;
        }
        else {
          int v32 = v26;
        }
        if (*v32 != v9)
        {
          if (*v32 == -2) {
            --*(_DWORD *)(a1 + 1896);
          }
          else {
            ++*(_DWORD *)(a1 + 1892);
          }
          *int v32 = v9;
        }
      }
      else
      {
        int v28 = 0;
        int v29 = 1;
        while (v27 != v9)
        {
          if (v28) {
            BOOL v30 = 0;
          }
          else {
            BOOL v30 = v27 == -2;
          }
          if (v30) {
            int v28 = v26;
          }
          unsigned int v31 = v25 + v29++;
          unsigned int v25 = v31 & v24;
          uint64_t v26 = (unint64_t *)(v18 + 8 * (v31 & v24));
          unint64_t v27 = *v26;
          if (*v26 == -1) {
            goto LABEL_45;
          }
        }
      }
      goto LABEL_52;
    }
    int v10 = *(_DWORD *)(a1 + 2224);
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 2208);
      unsigned int v12 = v10 - 1;
      uint64_t v13 = (v10 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v14 = *(void *)(v11 + 16 * v13);
      if (v9 == v14)
      {
LABEL_17:
        unsigned int v17 = *(_DWORD *)(v11 + 16 * v13 + 8);
LABEL_19:
        *(void *)(*(void *)(a1 + 2088) + 8 * (v17 >> 6)) |= 1 << v17;
        goto LABEL_20;
      }
      int v15 = 1;
      while (v14 != -4096)
      {
        int v16 = v13 + v15++;
        uint64_t v13 = v16 & v12;
        uint64_t v14 = *(void *)(v11 + 16 * v13);
        if (v9 == v14) {
          goto LABEL_17;
        }
      }
    }
    unsigned int v17 = 0;
    goto LABEL_19;
  }
}

uint64_t sub_1CCE64DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = a3;
  uint64_t v46 = a2;
  int v47 = (void *)a3;
  uint64_t result = sub_1CCDB48F4(a1 + 1968, &v46, (uint64_t)v51);
  if (!(_BYTE)v52) {
    return result;
  }
  uint64_t v6 = *(void *)(a1 + 2000);
  uint64_t v7 = *(unsigned int *)(a1 + 2012);
  if (v6 == *(void *)(a1 + 1992))
  {
    if (v7)
    {
      unsigned int v8 = 0;
      uint64_t v9 = 8 * v7;
      int v10 = *(uint64_t **)(a1 + 2000);
      while (*v10 != a3)
      {
        if (*v10 == -2) {
          unsigned int v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_11;
          }
          *unsigned int v8 = a3;
          --*(_DWORD *)(a1 + 2016);
          goto LABEL_35;
        }
      }
      goto LABEL_41;
    }
LABEL_11:
    unsigned int v11 = *(_DWORD *)(a1 + 2008);
    if (v7 < v11)
    {
      *(_DWORD *)(a1 + 2012) = v7 + 1;
      *(void *)(v6 + 8 * v7) = a3;
      goto LABEL_35;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a1 + 2008);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 2016)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_16;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 1992), v11);
  unsigned int v11 = *(_DWORD *)(a1 + 2008);
  uint64_t v6 = *(void *)(a1 + 2000);
LABEL_16:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    int v16 = 0;
    int v17 = 1;
    while (v15 != a3)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        int v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = (uint64_t *)(v6 + 8 * (v19 & v12));
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_28;
      }
    }
LABEL_41:
    uint64_t v26 = *(void *)(a1 + 32);
    int v27 = *(_DWORD *)(v26 + 40);
    if (v27)
    {
      uint64_t v28 = *(void *)(v26 + 24);
      unsigned int v29 = v27 - 1;
      uint64_t v30 = (v27 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      uint64_t v31 = *(void *)(v28 + 16 * v30);
      if (v31 == a3)
      {
LABEL_46:
        uint64_t v34 = *(void *)(v28 + 16 * v30 + 8);
        if (v34)
        {
          unsigned int v35 = sub_1CCE5C9E8(a1, v34);
          *(void *)(*(void *)(a1 + 2088) + 8 * (v35 >> 6)) |= 1 << v35;
        }
      }
      else
      {
        int v32 = 1;
        while (v31 != -4096)
        {
          int v33 = v30 + v32++;
          uint64_t v30 = v33 & v29;
          uint64_t v31 = *(void *)(v28 + 16 * v30);
          if (v31 == a3) {
            goto LABEL_46;
          }
        }
      }
    }
    int v36 = sub_1CD77D208(a1 + 1696, &v55);
    uint64_t v37 = v36[2];
    v51[1] = v36 + 1;
    uint64_t v52 = v37;
    unint64_t v54 = 0;
    unint64_t v53 = 0xFFFFFFFF00000000;
    LOBYTE(v51[0]) = 0;
    sub_1CC30D2C4((uint64_t)v51);
    uint64_t v38 = v36[2];
    int v47 = v36 + 1;
    uint64_t v48 = v38;
    uint64_t v50 = 0;
    unint64_t v49 = 0xFFFFFFFF00000000;
    LOBYTE(v46) = 1;
    uint64_t result = sub_1CC30D2C4((uint64_t)&v46);
    int v39 = LOBYTE(v51[0]);
    int v40 = v46;
    if (!LOBYTE(v51[0]) || !(_BYTE)v46)
    {
      while (1)
      {
        int v41 = v53;
        if (v39 == v40 && v49 == v53) {
          break;
        }
        *(void *)(*(void *)(a1 + 2088) + (((unint64_t)v53 >> 3) & 0x1FFFFFF8)) |= 1 << v53;
        LODWORD(v53) = v41 + 1;
        v54 >>= 1;
        uint64_t result = sub_1CC30D348((uint64_t)v51);
        int v39 = LOBYTE(v51[0]);
        int v40 = v46;
        if (LOBYTE(v51[0]))
        {
          if ((_BYTE)v46) {
            break;
          }
        }
      }
    }
    return result;
  }
  int v16 = 0;
LABEL_28:
  if (v16) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = v14;
  }
  if (*v20 == a3) {
    goto LABEL_41;
  }
  if (*v20 == -2) {
    --*(_DWORD *)(a1 + 2016);
  }
  else {
    ++*(_DWORD *)(a1 + 2012);
  }
  *uint64_t v20 = a3;
LABEL_35:
  v51[0] = a3;
  uint64_t v46 = 0;
  uint64_t result = sub_1CD3C8538((uint64_t *)(a1 + 2160), v51, &v46);
  unint64_t v21 = 0;
  if (result) {
    unint64_t v21 = *(void *)(v46 + 8);
  }
  unint64_t v22 = HIDWORD(v21);
  if (v21 != HIDWORD(v21))
  {
    unsigned int v23 = v21 >> 6;
    if (v21 >> 6 == HIDWORD(v21) >> 6)
    {
      uint64_t v24 = (1 << SBYTE4(v21)) + (-1 << v21);
      unsigned int v25 = (void *)(*(void *)(a1 + 2088) + 8 * v23);
    }
    else
    {
      uint64_t v42 = *(void *)(a1 + 2088);
      *(void *)(v42 + 8 * v23) |= -1 << v21;
      unsigned int v43 = (v21 + 63) & 0xFFFFFFC0;
      if (v43 + 64 <= HIDWORD(v21))
      {
        do
        {
          *(void *)(v42 + 8 * (v43 >> 6)) = -1;
          unsigned int v44 = v43 + 64;
          unsigned int v45 = v43 + 128;
          v43 += 64;
        }
        while (v45 <= v22);
      }
      else
      {
        unsigned int v44 = (v21 + 63) & 0xFFFFFFC0;
      }
      if (v44 >= v22) {
        return result;
      }
      uint64_t v24 = ~(-1 << v22);
      unsigned int v25 = (void *)(v42 + 8 * (v44 >> 6));
    }
    *v25 |= v24;
  }
  return result;
}

uint64_t sub_1CCE65194(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v4) = a2;
  *(_DWORD *)(result + 8) = v4 + 1;
  uint64_t v5 = *(unsigned int *)(result + 88);
  if (v5 >= *(_DWORD *)(result + 92))
  {
    uint64_t v7 = result + 80;
    return sub_1CD42D360(v7, a3, a4);
  }
  else
  {
    uint64_t v6 = (unsigned int *)(*(void *)(result + 80) + 8 * v5);
    unsigned int *v6 = a3;
    v6[1] = a4;
    *(_DWORD *)(result + 88) = v5 + 1;
  }
  return result;
}

uint64_t sub_1CCE65258(uint64_t a1, uint64_t a2)
{
  if (sub_1CCE65298(a1, a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return sub_1CCE65298(a2, a1);
  }
}

BOOL sub_1CCE65298(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a2 < *(_DWORD *)a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 4);
  int v3 = *(_DWORD *)(a2 + 4);
  if (v2 < v3) {
    return 1;
  }
  if (v3 < v2) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 8);
  if (v4 < v5) {
    return 1;
  }
  if (v5 < v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 16);
  if (v6 < v7) {
    return 1;
  }
  if (v7 < v6) {
    return 0;
  }
  return *(void *)(a1 + 24) < *(void *)(a2 + 24);
}

unint64_t sub_1CCE6531C(uint64_t *a1, uint64_t *a2)
{
  int v2 = a2;
  int v3 = a1;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  int v4 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v6 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v4 = &unk_1EBCBE000;
    int v3 = a1;
    int v2 = a2;
    if (v6)
    {
      unint64_t v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v7;
      __cxa_guard_release(&qword_1EBCBE588);
      int v4 = (void *)&unk_1EBCBE000;
      int v3 = a1;
      int v2 = a2;
    }
  }
  uint64_t v13 = v4[176];
  return sub_1CBFFD088((char *)v10, 0, v10, (char *)v11, v3, v2);
}

uint64_t sub_1CCE65414()
{
  dword_1EBCF7214 = sub_1CBF64200((llvm::DebugCounter *)"newgvn-vn", 9uLL, "Controls which instructions are value numbered", 0x2EuLL);
  dword_1EBCF7218 = sub_1CBF64200((llvm::DebugCounter *)"newgvn-phi", 0xAuLL, "Controls which instructions we create phi of ops for", 0x34uLL);
  char v2 = 0;
  int v3 = &v2;
  int v1 = 1;
  sub_1CD4D2D28((uint64_t)&qword_1EBCF7220[1], "enable-store-refinement", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF7220[1], &dword_1CB82C000);
  char v2 = 1;
  int v3 = &v2;
  int v1 = 1;
  sub_1CD4D2D28((uint64_t)&unk_1EBCF72E8, "enable-phi-of-ops", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF72E8, &dword_1CB82C000);
}

uint64_t sub_1CCE65520(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  v71[1] = *MEMORY[0x1E4F143B8];
  uint64_t v51 = a4;
  v55[0] = 0;
  char v56 = 0;
  if (a4)
  {
    LOBYTE(v57[0]) = 1;
    sub_1CD513098((uint64_t)v55, &v51, (char *)v57);
  }
  uint64_t v7 = a1 + 72;
  uint64_t v8 = *(void *)(a1 + 80);
  if (v8 != a1 + 72)
  {
    unint64_t v49 = a3;
    do
    {
      uint64_t v9 = v8 - 24;
      BOOL v28 = v8 == 0;
      uint64_t v8 = *(void *)(v8 + 8);
      if (v28) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v9;
      }
      for (uint64_t i = *(void *)(v10 + 48); i != v10 + 40; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v12 = i - 24;
        if (!i) {
          uint64_t v12 = 0;
        }
        int v13 = *(unsigned __int8 *)(v12 + 16);
        if (v13 == 84) {
          uint64_t v14 = v12;
        }
        else {
          uint64_t v14 = 0;
        }
        if (!i) {
          continue;
        }
        if (v13 != 84) {
          continue;
        }
        uint64_t v15 = *(void *)(v14 - 32);
        if (!v15 || *(unsigned char *)(v15 + 16) || *(void *)(v15 + 24) != *(void *)(v14 + 72)) {
          continue;
        }
        uint64_t v17 = v14 + 64;
        int v16 = *(unsigned char **)(v14 + 64);
        if (v16 && (v16[14] & 0x10) != 0) {
          goto LABEL_25;
        }
        int hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v14, 20);
        int v16 = *(unsigned char **)(v14 + 64);
        if (!hasFnAttrOnCalledFunction) {
          goto LABEL_28;
        }
        if (v16)
        {
LABEL_25:
          if ((v16[12] & 0x10) != 0) {
            goto LABEL_29;
          }
        }
        if (!llvm::CallBase::hasFnAttrOnCalledFunction(v14, 4)) {
          continue;
        }
        int v16 = *(unsigned char **)v17;
LABEL_28:
        if (v16)
        {
LABEL_29:
          if ((v16[19] & 0x20) != 0) {
            continue;
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v14, 61) & 1) == 0 && (*(_WORD *)(v14 + 18) & 3) != 2)
        {
          unsigned int v50 = 0;
          if ((*(_DWORD *)(v15 + 32) & 0xFu) - 7 >= 2
            && llvm::TargetLibraryInfoImpl::getLibFunc(*a2, (uint64_t ***)v15, &v50)
            && ((*(void *)(a2[1] + (((unint64_t)v50 >> 3) & 0x1FFFFFF8)) >> v50) & 1) == 0
            && v50 - 393 <= 1
            && ((3 << (2 * (v50 & 3))) & *(unsigned __int8 *)(*a2 + ((unint64_t)v50 >> 2))) != 0
            && (*(unsigned int (**)(void, void))(*(void *)*v49 + 616))(*v49, *(void *)v14)
            && (!*(void *)v17 || (*(unsigned char *)(*(void *)v17 + 17) & 0x30) == 0))
          {
            int v19 = *(_DWORD *)(v14 + 20);
            if (v19 < 0)
            {
              uint64_t v20 = v14 - 32 * (v19 & 0x7FFFFFF);
              uint64_t v23 = *(void *)(v20 - 8);
              uint64_t v21 = v20 - 8;
              uint64_t v22 = v23;
              if (v23)
              {
                uint64_t v24 = -v22;
                while (1)
                {
                  unsigned int v25 = *(_DWORD *)(*(void *)(v21 + v24) + 8);
                  BOOL v26 = v25 > 7;
                  int v27 = (1 << v25) & 0x83;
                  BOOL v28 = v26 || v27 == 0;
                  if (v28) {
                    break;
                  }
                  v24 += 16;
                  if (!v24) {
                    goto LABEL_41;
                  }
                }
LABEL_52:
                uint64_t v29 = 0;
                uint64_t v30 = *(void *)(v14 + 32);
                if (v30) {
                  BOOL v31 = v30 == *(void *)(v14 + 40) + 40;
                }
                else {
                  BOOL v31 = 1;
                }
                if (v31) {
                  int v32 = 0;
                }
                else {
                  int v32 = (uint64_t **)(v30 - 24);
                }
                int v33 = (uint64_t *)**v32;
                v57[0] = &v58;
                v57[1] = 0x200000000;
                uint64_t v61 = v33;
                unsigned int v62 = &v70;
                uint64_t v63 = v71;
                uint64_t v64 = 0;
                int v65 = 0;
                __int16 v66 = 512;
                char v67 = 7;
                unsigned int v59 = 0;
                uint64_t v60 = 0;
                uint64_t v68 = 0;
                uint64_t v69 = 0;
                unsigned int v70 = &unk_1F2616E88;
                v71[0] = &unk_1F2617008;
                unsigned int v59 = v32[5];
                uint64_t v60 = v32 + 3;
                uint64_t v34 = (unsigned __int8 *)v32[6];
                unint64_t v54 = v34;
                if (v34)
                {
                  llvm::MetadataTracking::track((uint64_t)&v54, v34, 2);
                  uint64_t v29 = (uint64_t)v54;
                }
                sub_1CB8461A4((uint64_t)v57, 0, v29);
                if (!v54)
                {
LABEL_61:
                  uint64_t v36 = *v61;
                  uint64_t v37 = *(void **)(*v61 + 1560);
                  if (!v37)
                  {
                    unsigned int v45 = *(llvm::ConstantInt **)(v36 + 1888);
                    unsigned int v46 = *(_DWORD *)(v36 + 1896);
                    LODWORD(v53) = v46 >> 8;
                    if (v46 >> 8 > 0x40) {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v52);
                    }
                    if (v46 <= 0xFF) {
                      char v47 = 0;
                    }
                    else {
                      char v47 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v46);
                    }
                    uint64_t v52 = (unsigned __int8 **)(v47 & 1);
                    uint64_t v37 = llvm::ConstantInt::get(v45, (llvm::LLVMContext *)&v52, v35);
                    if (v53 >= 0x41 && v52) {
                      MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
                    }
                    *(void *)(v36 + 1560) = v37;
                  }
                  uint64_t v38 = *(void *)(v14 + 32);
                  if (v38) {
                    BOOL v39 = v38 == *(void *)(v14 + 40) + 40;
                  }
                  else {
                    BOOL v39 = 1;
                  }
                  if (v39) {
                    uint64_t v40 = 0;
                  }
                  else {
                    uint64_t v40 = v38 - 24;
                  }
                  sub_1CD1290BC((uint64_t)v37, v40);
                }
                int v41 = *v54;
                if ((v41 - 4) > 0x1E)
                {
                  if ((v41 - 3) >= 0xFFFFFFFE) {
                    unsigned int v44 = v54;
                  }
                  else {
                    unsigned int v44 = 0;
                  }
                  if ((v41 - 3) < 0xFFFFFFFE)
                  {
                    if (v41 == 3) {
                      *((void *)v54 + 1) = 0;
                    }
                    goto LABEL_61;
                  }
                  unint64_t v43 = (unint64_t)(v44 + 8);
                }
                else
                {
                  if ((v54[1] & 0x7F) != 2 && !*((_DWORD *)v54 + 3)) {
                    goto LABEL_61;
                  }
                  uint64_t v42 = *((void *)v54 + 2);
                  if ((v42 & 4) == 0) {
                    goto LABEL_61;
                  }
                  unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFF8;
                  if (!v43) {
                    goto LABEL_61;
                  }
                }
                uint64_t v52 = &v54;
                sub_1CC5FA668(v43 + 16, &v52);
                goto LABEL_61;
              }
            }
LABEL_41:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v14, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v14, 44) & 1) == 0)
            {
              goto LABEL_52;
            }
          }
        }
      }
    }
    while (v8 != v7);
  }
  if (v56) {
    sub_1CC2930C0((uint64_t)v55);
  }
  return 0;
}

void sub_1CCE66498(uint64_t a1)
{
}

uint64_t sub_1CCE66548(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF73B0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2640548;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF73B8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE66498;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCF73B8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCE665F8()
{
}

void sub_1CCE66638(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE66670(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CCE666D4(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2) & 1) == 0)
  {
    int v5 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (v6 == v7)
    {
LABEL_6:
      uint64_t v8 = 0;
    }
    else
    {
      while (*(char **)v6 != llvm::TargetLibraryInfoWrapperPass::ID)
      {
        v6 += 16;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v8 = *(void *)(v6 + 8);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 96))(v8, llvm::TargetLibraryInfoWrapperPass::ID);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v10 = v9 + 32;
    if (!*(unsigned char *)(v9 + 232))
    {
      uint64_t v11 = *(void *)(a2 + 40) + 216;
      __int16 v23 = 260;
      v22[0] = v11;
      llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v22);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      int v35 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      *(void *)&long long v12 = -1;
      *((void *)&v12 + 1) = -1;
      *(_OWORD *)__src = v12;
      long long v27 = v12;
      long long v28 = v12;
      long long v29 = v12;
      long long v30 = v12;
      long long v31 = v12;
      *(_OWORD *)int v32 = v12;
      *(void *)&v32[13] = -1;
      sub_1CC153974((uint64_t)__src, (int *)__p);
      sub_1CD4D04B8(v10, (uint64_t)__src);
      sub_1CD4CFA4C((uint64_t *)__src);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1CC1569E8(__src, v10);
  }
  return 0;
}

uint64_t sub_1CCE66AE8()
{
  uint64_t result = sub_1CBF64200((llvm::DebugCounter *)"partially-inline-libcalls-transform", 0x23uLL, "Controls transformations in partially-inline-libcalls", 0x35uLL);
  dword_1EBCF73A8 = result;
  return result;
}

void llvm::createPlaceSafepointsPass(llvm *this)
{
}

uint64_t sub_1CCE66B5C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF73C0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F26405E8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF73D0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE66CBC;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCF73D0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCE66C0C(llvm *a1, llvm::PassRegistry *a2)
{
}

void sub_1CCE66CBC()
{
}

void sub_1CCE66D58(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE66D90(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1CCE66DA0(uint64_t a1, llvm::Function *a2)
{
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) == 3)
    {
      BOOL v4 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0;
      goto LABEL_7;
    }
LABEL_5:
    char v5 = 0;
    goto LABEL_10;
  }
  if (*((llvm::Function **)a2 + 9) != (llvm::Function *)((char *)a2 + 72)) {
    goto LABEL_5;
  }
  BOOL v4 = (*((unsigned char *)a2 + 34) & 0x80) == 0;
LABEL_7:
  char v5 = v4;
LABEL_10:
  if ((v5 & 1) != 0 || *((llvm::Function **)a2 + 9) == (llvm::Function *)((char *)a2 + 72)) {
    return 0;
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v6 = ***(void ***)a2;
    uint64_t v7 = *(void *)(v6 + 152);
    uint64_t v8 = *(unsigned int *)(v6 + 168);
    if (v8)
    {
      LODWORD(v9) = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v10 = v7 + 16 * v9;
      uint64_t v11 = *(llvm::Function **)v10;
      if (*(llvm::Function **)v10 == a2)
      {
LABEL_20:
        uint64_t v14 = *(void *)(v10 + 8);
        if (*(void *)v14 == 17)
        {
          uint64_t v15 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          int v17 = *(unsigned __int8 *)(v14 + 32);
          BOOL v18 = v15 == 0x70656661732E6367 && v16 == 0x6C6F705F746E696FLL;
          if (v18 && v17 == 108) {
            return 0;
          }
        }
        goto LABEL_28;
      }
      int v12 = 1;
      while (v11 != (llvm::Function *)-4096)
      {
        int v13 = v9 + v12++;
        uint64_t v9 = v13 & (v8 - 1);
        uint64_t v11 = *(llvm::Function **)(v7 + 16 * v9);
        if (v11 == a2)
        {
          uint64_t v10 = v7 + 16 * v9;
          goto LABEL_20;
        }
      }
    }
    uint64_t v10 = v7 + 16 * v8;
    goto LABEL_20;
  }
LABEL_28:
  if ((*((_WORD *)a2 + 9) & 0x4000) != 0)
  {
    GC = llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)a2, a2);
    char v21 = *((unsigned char *)GC + 23);
    int v22 = v21;
    uint64_t v23 = v21 & 0x7F;
    if (v22 < 0) {
      uint64_t v23 = GC[1];
    }
    if (v23 == 7)
    {
      if (v22 >= 0) {
        long long v30 = (int *)GC;
      }
      else {
        long long v30 = (int *)*GC;
      }
      int v31 = *v30;
      int v27 = *(int *)((char *)v30 + 3);
      BOOL v28 = v31 == 1701998435;
      int v29 = 1919705957;
    }
    else
    {
      if (v23 != 18) {
        return 0;
      }
      if (v22 >= 0) {
        uint64_t v24 = GC;
      }
      else {
        uint64_t v24 = (uint64_t *)*GC;
      }
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      int v27 = *((unsigned __int16 *)v24 + 8);
      BOOL v28 = v25 == 0x696F706574617473 && v26 == 0x706D6178652D746ELL;
      int v29 = 25964;
    }
    if (v28 && v27 == v29)
    {
      uint64_t v34 = *(uint64_t **)(a1 + 8);
      uint64_t v35 = *v34;
      uint64_t v36 = v34[1];
      if (v35 == v36)
      {
LABEL_52:
        uint64_t v37 = 0;
      }
      else
      {
        while (*(char **)v35 != llvm::TargetLibraryInfoWrapperPass::ID)
        {
          v35 += 16;
          if (v35 == v36) {
            goto LABEL_52;
          }
        }
        uint64_t v37 = *(void *)(v35 + 8);
      }
      uint64_t v38 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v37 + 96))(v37, llvm::TargetLibraryInfoWrapperPass::ID);
      sub_1CBF5AC74(v38, (uint64_t)a2);
    }
  }
  return 0;
}

uint64_t sub_1CCE67D68(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF73C1;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2640688;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = a2;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF73C8, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CCE66C0C;
    v6[1] = &PassRegistry;
    char v5 = v6;
    std::__call_once(&qword_1EBCF73C8, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCE67E2C(llvm::Pass *this)
{
  *(void *)this = &unk_1F2640688;
  char v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CCE67E8C(llvm::Pass *this)
{
  *(void *)this = &unk_1F2640688;
  char v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE67F00(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

void sub_1CCE67F74(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)a1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(char **)v5 != llvm::ScalarEvolutionWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  a1[8] = *(void *)((*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  uint64_t v8 = (uint64_t *)a1[1];
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  a1[9] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::DominatorTreeWrapperPass::ID)
        + 32;
  int v12 = (uint64_t *)a1[1];
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (v13 == v14)
  {
LABEL_14:
    uint64_t v15 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v13 != &llvm::LoopInfoWrapperPass::ID)
    {
      v13 += 16;
      if (v13 == v14) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = *(void *)(v13 + 8);
  }
  a1[10] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 96))(v15, &llvm::LoopInfoWrapperPass::ID)
         + 32;
  uint64_t v16 = (uint64_t *)a1[1];
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  if (v17 == v18)
  {
LABEL_19:
    uint64_t v19 = 0;
  }
  else
  {
    while (*(char **)v17 != llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v17 += 16;
      if (v17 == v18) {
        goto LABEL_19;
      }
    }
    uint64_t v19 = *(void *)(v17 + 8);
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v19 + 96))(v19, llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CBF5AC74(v20, a2);
}

void sub_1CCE68188(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t **)(a2 + 8);
  BOOL v4 = *(uint64_t **)(a2 + 16);
  while (v3 != v4)
  {
    uint64_t v5 = *v3++;
    sub_1CCE68188(a1, v5);
  }
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatches();
}

BOOL sub_1CCE68848(uint64_t a1, uint64_t *a2)
{
  if (llvm::callsGCLeafFunction(a1, a2)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 - 32);
  if (!a1 || *(unsigned char *)(a1 + 16) != 84)
  {
    if (!v3 || *(unsigned char *)(v3 + 16)) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (*(unsigned char *)(v3 + 16) == 24) {
    return 0;
  }
  if (!*(unsigned char *)(v3 + 16))
  {
LABEL_9:
    if (*(void *)(v3 + 24) == *(void *)(a1 + 72) && *(_DWORD *)(v3 + 36) == 124) {
      return 0;
    }
  }
LABEL_11:
  if (sub_1CC070820(a1)) {
    return 0;
  }
  return !sub_1CC64B564(a1);
}

char *sub_1CCE688E0(char *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7 = (uint64_t *)result;
LABEL_2:
  uint64_t v849 = a2 - 2;
  uint64_t v850 = a2 - 1;
  v854 = a2;
  uint64_t v848 = a2 - 3;
  uint64_t v8 = v7;
  while (1)
  {
    uint64_t v9 = v8;
    uint64_t v10 = (char *)v854 - (char *)v8;
    uint64_t v11 = v854 - v8;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v373 = *(v854 - 1);
          uint64_t v374 = *v9;
          v375 = *(uint64_t ****)(v373 + 40);
          if ((*((unsigned char *)v375 + 23) & 0x10) != 0)
          {
            uint64_t v376 = ***v375;
            uint64_t v377 = *(void *)(v376 + 152);
            uint64_t v378 = *(unsigned int *)(v376 + 168);
            if (v378)
            {
              LODWORD(v379) = (v378 - 1) & ((v375 >> 4) ^ (v375 >> 9));
              unsigned int v380 = (uint64_t ****)(v377 + 16 * v379);
              unsigned int v381 = *v380;
              if (*v380 != v375)
              {
                int v382 = 1;
                do
                {
                  if (v381 == (uint64_t ***)-4096) {
                    goto LABEL_802;
                  }
                  int v383 = v379 + v382++;
                  uint64_t v379 = v383 & (v378 - 1);
                  unsigned int v381 = *(uint64_t ****)(v377 + 16 * v379);
                }
                while (v381 != v375);
                unsigned int v380 = (uint64_t ****)(v377 + 16 * v379);
              }
            }
            else
            {
LABEL_802:
              unsigned int v380 = (uint64_t ****)(v377 + 16 * v378);
            }
            unsigned int v732 = v380[1];
            size_t v734 = (size_t)*v732;
            uint64_t result = (char *)(v732 + 2);
            size_t v733 = v734;
            goto LABEL_804;
          }
          size_t v733 = 0;
          uint64_t result = &byte_1CFBCE98E;
LABEL_804:
          uint64_t v735 = *(uint64_t ****)(v374 + 40);
          if ((*((unsigned char *)v735 + 23) & 0x10) != 0)
          {
            uint64_t v736 = ***v735;
            uint64_t v737 = *(void *)(v736 + 152);
            uint64_t v738 = *(unsigned int *)(v736 + 168);
            if (v738)
            {
              LODWORD(v739) = (v738 - 1) & ((v735 >> 4) ^ (v735 >> 9));
              unint64_t v740 = (uint64_t ****)(v737 + 16 * v739);
              uint64_t v741 = *v740;
              if (*v740 != v735)
              {
                int v742 = 1;
                do
                {
                  if (v741 == (uint64_t ***)-4096) {
                    goto LABEL_820;
                  }
                  int v743 = v739 + v742++;
                  uint64_t v739 = v743 & (v738 - 1);
                  uint64_t v741 = *(uint64_t ****)(v737 + 16 * v739);
                }
                while (v741 != v735);
                unint64_t v740 = (uint64_t ****)(v737 + 16 * v739);
              }
            }
            else
            {
LABEL_820:
              unint64_t v740 = (uint64_t ****)(v737 + 16 * v738);
            }
            uint64_t v756 = v740[1];
            size_t v759 = (size_t)*v756;
            uint64_t v757 = (char *)(v756 + 2);
            size_t v758 = v759;
            goto LABEL_822;
          }
          size_t v758 = 0;
          uint64_t v757 = &byte_1CFBCE98E;
LABEL_822:
          if (v758 >= v733) {
            size_t v760 = v733;
          }
          else {
            size_t v760 = v758;
          }
          if (v760 && (uint64_t result = (char *)memcmp(result, v757, v760), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v733 >= v758)
          {
            return result;
          }
          *uint64_t v9 = v373;
          *(v854 - 1) = v374;
          return result;
        case 3:
          return sub_1CCE6B3BC(v9, v9 + 1, v850);
        case 4:
          return sub_1CCE6C518(v9, v9 + 1, v9 + 2, v850);
        case 5:
          uint64_t v384 = v9 + 2;
          long long v385 = v9 + 3;
          sub_1CCE6C518(v9, v9 + 1, v9 + 2, v9 + 3);
          uint64_t v386 = *(v854 - 1);
          uint64_t v387 = v9[3];
          uint64_t v388 = *(uint64_t ****)(v386 + 40);
          if ((*((unsigned char *)v388 + 23) & 0x10) != 0)
          {
            uint64_t v389 = ***v388;
            uint64_t v390 = *(void *)(v389 + 152);
            uint64_t v391 = *(unsigned int *)(v389 + 168);
            if (v391)
            {
              LODWORD(v392) = (v391 - 1) & ((v388 >> 4) ^ (v388 >> 9));
              uint64_t v393 = (uint64_t ****)(v390 + 16 * v392);
              v394 = *v393;
              if (*v393 != v388)
              {
                int v395 = 1;
                do
                {
                  if (v394 == (uint64_t ***)-4096) {
                    goto LABEL_811;
                  }
                  int v396 = v392 + v395++;
                  uint64_t v392 = v396 & (v391 - 1);
                  v394 = *(uint64_t ****)(v390 + 16 * v392);
                }
                while (v394 != v388);
                uint64_t v393 = (uint64_t ****)(v390 + 16 * v392);
              }
            }
            else
            {
LABEL_811:
              uint64_t v393 = (uint64_t ****)(v390 + 16 * v391);
            }
            uint64_t v744 = v393[1];
            size_t v746 = (size_t)*v744;
            uint64_t result = (char *)(v744 + 2);
            size_t v745 = v746;
            goto LABEL_813;
          }
          size_t v745 = 0;
          uint64_t result = &byte_1CFBCE98E;
LABEL_813:
          unsigned int v747 = *(uint64_t ****)(v387 + 40);
          if ((*((unsigned char *)v747 + 23) & 0x10) != 0)
          {
            uint64_t v748 = ***v747;
            uint64_t v749 = *(void *)(v748 + 152);
            uint64_t v750 = *(unsigned int *)(v748 + 168);
            if (v750)
            {
              LODWORD(v751) = (v750 - 1) & ((v747 >> 4) ^ (v747 >> 9));
              uint64_t v752 = (uint64_t ****)(v749 + 16 * v751);
              unsigned int v753 = *v752;
              if (*v752 != v747)
              {
                int v754 = 1;
                do
                {
                  if (v753 == (uint64_t ***)-4096) {
                    goto LABEL_831;
                  }
                  int v755 = v751 + v754++;
                  uint64_t v751 = v755 & (v750 - 1);
                  unsigned int v753 = *(uint64_t ****)(v749 + 16 * v751);
                }
                while (v753 != v747);
                uint64_t v752 = (uint64_t ****)(v749 + 16 * v751);
              }
            }
            else
            {
LABEL_831:
              uint64_t v752 = (uint64_t ****)(v749 + 16 * v750);
            }
            uint64_t v761 = v752[1];
            size_t v764 = (size_t)*v761;
            unsigned int v762 = (char *)(v761 + 2);
            size_t v763 = v764;
            goto LABEL_833;
          }
          size_t v763 = 0;
          unsigned int v762 = &byte_1CFBCE98E;
LABEL_833:
          if (v763 >= v745) {
            size_t v765 = v745;
          }
          else {
            size_t v765 = v763;
          }
          if (v765 && (uint64_t result = (char *)memcmp(result, v762, v765), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v745 >= v763)
          {
            return result;
          }
          *long long v385 = v386;
          *(v854 - 1) = v387;
          uint64_t v766 = *v385;
          uint64_t v767 = *v384;
          v768 = *(uint64_t ****)(*v385 + 40);
          if ((*((unsigned char *)v768 + 23) & 0x10) != 0)
          {
            uint64_t v769 = ***v768;
            uint64_t v770 = *(void *)(v769 + 152);
            uint64_t v771 = *(unsigned int *)(v769 + 168);
            if (v771)
            {
              LODWORD(v772) = (v771 - 1) & ((v768 >> 4) ^ (v768 >> 9));
              unint64_t v773 = (uint64_t ****)(v770 + 16 * v772);
              uint64_t v774 = *v773;
              if (*v773 != v768)
              {
                int v775 = 1;
                do
                {
                  if (v774 == (uint64_t ***)-4096) {
                    goto LABEL_848;
                  }
                  int v776 = v772 + v775++;
                  uint64_t v772 = v776 & (v771 - 1);
                  uint64_t v774 = *(uint64_t ****)(v770 + 16 * v772);
                }
                while (v774 != v768);
                unint64_t v773 = (uint64_t ****)(v770 + 16 * v772);
              }
            }
            else
            {
LABEL_848:
              unint64_t v773 = (uint64_t ****)(v770 + 16 * v771);
            }
            uint64_t v777 = v773[1];
            size_t v779 = (size_t)*v777;
            uint64_t result = (char *)(v777 + 2);
            size_t v778 = v779;
            goto LABEL_850;
          }
          size_t v778 = 0;
          uint64_t result = &byte_1CFBCE98E;
LABEL_850:
          v780 = *(uint64_t ****)(v767 + 40);
          if ((*((unsigned char *)v780 + 23) & 0x10) != 0)
          {
            uint64_t v781 = ***v780;
            uint64_t v782 = *(void *)(v781 + 152);
            uint64_t v783 = *(unsigned int *)(v781 + 168);
            if (v783)
            {
              LODWORD(v784) = (v783 - 1) & ((v780 >> 4) ^ (v780 >> 9));
              uint64_t v785 = (uint64_t ****)(v782 + 16 * v784);
              unint64_t v786 = *v785;
              if (*v785 != v780)
              {
                int v787 = 1;
                do
                {
                  if (v786 == (uint64_t ***)-4096) {
                    goto LABEL_857;
                  }
                  int v788 = v784 + v787++;
                  uint64_t v784 = v788 & (v783 - 1);
                  unint64_t v786 = *(uint64_t ****)(v782 + 16 * v784);
                }
                while (v786 != v780);
                uint64_t v785 = (uint64_t ****)(v782 + 16 * v784);
              }
            }
            else
            {
LABEL_857:
              uint64_t v785 = (uint64_t ****)(v782 + 16 * v783);
            }
            unint64_t v789 = v785[1];
            size_t v792 = (size_t)*v789;
            v790 = (char *)(v789 + 2);
            size_t v791 = v792;
            goto LABEL_859;
          }
          size_t v791 = 0;
          v790 = &byte_1CFBCE98E;
LABEL_859:
          if (v791 >= v778) {
            size_t v793 = v778;
          }
          else {
            size_t v793 = v791;
          }
          if (v793 && (uint64_t result = (char *)memcmp(result, v790, v793), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v778 >= v791)
          {
            return result;
          }
          *uint64_t v384 = v766;
          *long long v385 = v767;
          uint64_t v794 = v9[1];
          unint64_t v795 = *(uint64_t ****)(v766 + 40);
          if ((*((unsigned char *)v795 + 23) & 0x10) != 0)
          {
            uint64_t v796 = ***v795;
            uint64_t v797 = *(void *)(v796 + 152);
            uint64_t v798 = *(unsigned int *)(v796 + 168);
            if (v798)
            {
              LODWORD(v799) = (v798 - 1) & ((v795 >> 4) ^ (v795 >> 9));
              unsigned int v800 = (uint64_t ****)(v797 + 16 * v799);
              unsigned int v801 = *v800;
              if (*v800 != v795)
              {
                int v802 = 1;
                do
                {
                  if (v801 == (uint64_t ***)-4096) {
                    goto LABEL_874;
                  }
                  int v803 = v799 + v802++;
                  uint64_t v799 = v803 & (v798 - 1);
                  unsigned int v801 = *(uint64_t ****)(v797 + 16 * v799);
                }
                while (v801 != v795);
                unsigned int v800 = (uint64_t ****)(v797 + 16 * v799);
              }
            }
            else
            {
LABEL_874:
              unsigned int v800 = (uint64_t ****)(v797 + 16 * v798);
            }
            unsigned int v804 = v800[1];
            size_t v806 = (size_t)*v804;
            uint64_t result = (char *)(v804 + 2);
            size_t v805 = v806;
            goto LABEL_876;
          }
          size_t v805 = 0;
          uint64_t result = &byte_1CFBCE98E;
LABEL_876:
          uint64_t v807 = *(uint64_t ****)(v794 + 40);
          if ((*((unsigned char *)v807 + 23) & 0x10) != 0)
          {
            uint64_t v808 = ***v807;
            uint64_t v809 = *(void *)(v808 + 152);
            uint64_t v810 = *(unsigned int *)(v808 + 168);
            if (v810)
            {
              LODWORD(v811) = (v810 - 1) & ((v807 >> 4) ^ (v807 >> 9));
              unint64_t v812 = (uint64_t ****)(v809 + 16 * v811);
              uint64_t v813 = *v812;
              if (*v812 != v807)
              {
                int v814 = 1;
                do
                {
                  if (v813 == (uint64_t ***)-4096) {
                    goto LABEL_883;
                  }
                  int v815 = v811 + v814++;
                  uint64_t v811 = v815 & (v810 - 1);
                  uint64_t v813 = *(uint64_t ****)(v809 + 16 * v811);
                }
                while (v813 != v807);
                unint64_t v812 = (uint64_t ****)(v809 + 16 * v811);
              }
            }
            else
            {
LABEL_883:
              unint64_t v812 = (uint64_t ****)(v809 + 16 * v810);
            }
            unsigned int v816 = v812[1];
            size_t v819 = (size_t)*v816;
            unsigned int v817 = (char *)(v816 + 2);
            size_t v818 = v819;
            goto LABEL_885;
          }
          size_t v818 = 0;
          unsigned int v817 = &byte_1CFBCE98E;
LABEL_885:
          if (v818 >= v805) {
            size_t v820 = v805;
          }
          else {
            size_t v820 = v818;
          }
          if (v820 && (uint64_t result = (char *)memcmp(result, v817, v820), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v805 >= v818)
          {
            return result;
          }
          v9[1] = v766;
          v9[2] = v794;
          uint64_t v821 = *v9;
          unint64_t v822 = *(uint64_t ****)(v766 + 40);
          if ((*((unsigned char *)v822 + 23) & 0x10) != 0)
          {
            uint64_t v823 = ***v822;
            uint64_t v824 = *(void *)(v823 + 152);
            uint64_t v825 = *(unsigned int *)(v823 + 168);
            if (v825)
            {
              LODWORD(v826) = (v825 - 1) & ((v822 >> 4) ^ (v822 >> 9));
              v827 = (uint64_t ****)(v824 + 16 * v826);
              uint64_t v828 = *v827;
              if (*v827 != v822)
              {
                int v829 = 1;
                do
                {
                  if (v828 == (uint64_t ***)-4096) {
                    goto LABEL_904;
                  }
                  int v830 = v826 + v829++;
                  uint64_t v826 = v830 & (v825 - 1);
                  uint64_t v828 = *(uint64_t ****)(v824 + 16 * v826);
                }
                while (v828 != v822);
                v827 = (uint64_t ****)(v824 + 16 * v826);
              }
            }
            else
            {
LABEL_904:
              v827 = (uint64_t ****)(v824 + 16 * v825);
            }
            unsigned int v831 = v827[1];
            size_t v833 = (size_t)*v831;
            uint64_t result = (char *)(v831 + 2);
            size_t v832 = v833;
            goto LABEL_906;
          }
          size_t v832 = 0;
          uint64_t result = &byte_1CFBCE98E;
LABEL_906:
          unint64_t v834 = *(uint64_t ****)(v821 + 40);
          if ((*((unsigned char *)v834 + 23) & 0x10) != 0)
          {
            uint64_t v835 = ***v834;
            uint64_t v836 = *(void *)(v835 + 152);
            uint64_t v837 = *(unsigned int *)(v835 + 168);
            if (v837)
            {
              LODWORD(v838) = (v837 - 1) & ((v834 >> 4) ^ (v834 >> 9));
              uint64_t v839 = (uint64_t ****)(v836 + 16 * v838);
              uint64_t v840 = *v839;
              if (*v839 != v834)
              {
                int v841 = 1;
                do
                {
                  if (v840 == (uint64_t ***)-4096) {
                    goto LABEL_913;
                  }
                  int v842 = v838 + v841++;
                  uint64_t v838 = v842 & (v837 - 1);
                  uint64_t v840 = *(uint64_t ****)(v836 + 16 * v838);
                }
                while (v840 != v834);
                uint64_t v839 = (uint64_t ****)(v836 + 16 * v838);
              }
            }
            else
            {
LABEL_913:
              uint64_t v839 = (uint64_t ****)(v836 + 16 * v837);
            }
            unint64_t v843 = v839[1];
            size_t v846 = (size_t)*v843;
            v844 = (char *)(v843 + 2);
            size_t v845 = v846;
            goto LABEL_915;
          }
          size_t v845 = 0;
          v844 = &byte_1CFBCE98E;
LABEL_915:
          if (v845 >= v832) {
            size_t v847 = v832;
          }
          else {
            size_t v847 = v845;
          }
          if (v847 && (uint64_t result = (char *)memcmp(result, v844, v847), result))
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v832 >= v845)
          {
            return result;
          }
          *uint64_t v9 = v766;
          v9[1] = v821;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    v855 = v9;
    if (v10 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 == v854) {
        return result;
      }
      int64_t v458 = (unint64_t)(v11 - 2) >> 1;
      int64_t v857 = v458;
      do
      {
        int64_t v459 = v458;
        if (v857 >= v458)
        {
          uint64_t v460 = (2 * v458) | 1;
          v461 = &v9[v460];
          uint64_t v462 = v461;
          if (2 * v458 + 2 < v11)
          {
            uint64_t v463 = *(uint64_t ****)(*v461 + 40);
            if ((*((unsigned char *)v463 + 23) & 0x10) != 0)
            {
              uint64_t v464 = ***v463;
              uint64_t v465 = *(void *)(v464 + 152);
              uint64_t v466 = *(unsigned int *)(v464 + 168);
              if (v466)
              {
                LODWORD(v467) = (v466 - 1) & ((v463 >> 4) ^ (v463 >> 9));
                v468 = (uint64_t ****)(v465 + 16 * v467);
                uint64_t v469 = *v468;
                if (*v468 != v463)
                {
                  int v470 = 1;
                  do
                  {
                    if (v469 == (uint64_t ***)-4096) {
                      goto LABEL_508;
                    }
                    int v471 = v467 + v470++;
                    uint64_t v467 = v471 & (v466 - 1);
                    uint64_t v469 = *(uint64_t ****)(v465 + 16 * v467);
                  }
                  while (v469 != v463);
                  v468 = (uint64_t ****)(v465 + 16 * v467);
                }
              }
              else
              {
LABEL_508:
                v468 = (uint64_t ****)(v465 + 16 * v466);
              }
              uint64_t v472 = v468[1];
              size_t v475 = (size_t)*v472;
              int v473 = (char *)(v472 + 2);
              size_t v474 = v475;
            }
            else
            {
              size_t v474 = 0;
              int v473 = &byte_1CFBCE98E;
            }
            uint64_t v462 = v461 + 1;
            unsigned int v476 = *(uint64_t ****)(v461[1] + 40);
            if ((*((unsigned char *)v476 + 23) & 0x10) != 0)
            {
              uint64_t v477 = ***v476;
              uint64_t v478 = *(void *)(v477 + 152);
              uint64_t v479 = *(unsigned int *)(v477 + 168);
              if (v479)
              {
                LODWORD(v480) = (v479 - 1) & ((v476 >> 4) ^ (v476 >> 9));
                unint64_t v481 = (uint64_t ****)(v478 + 16 * v480);
                uint64_t v482 = *v481;
                if (*v481 != v476)
                {
                  int v483 = 1;
                  do
                  {
                    if (v482 == (uint64_t ***)-4096) {
                      goto LABEL_517;
                    }
                    int v484 = v480 + v483++;
                    uint64_t v480 = v484 & (v479 - 1);
                    uint64_t v482 = *(uint64_t ****)(v478 + 16 * v480);
                  }
                  while (v482 != v476);
                  unint64_t v481 = (uint64_t ****)(v478 + 16 * v480);
                }
              }
              else
              {
LABEL_517:
                unint64_t v481 = (uint64_t ****)(v478 + 16 * v479);
              }
              unsigned int v485 = v481[1];
              size_t v488 = (size_t)*v485;
              uint64_t v486 = (char *)(v485 + 2);
              size_t v487 = v488;
            }
            else
            {
              size_t v487 = 0;
              uint64_t v486 = &byte_1CFBCE98E;
            }
            if (v487 >= v474) {
              size_t v489 = v474;
            }
            else {
              size_t v489 = v487;
            }
            if (v489 && (int v490 = memcmp(v473, v486, v489)) != 0)
            {
              int v491 = (v490 >> 31) | 1;
            }
            else
            {
              if (v474 < v487) {
                int v491 = -1;
              }
              else {
                int v491 = 1;
              }
              if (v474 == v487) {
                int v491 = 0;
              }
            }
            uint64_t v9 = v855;
            if (v491 == -1) {
              uint64_t v460 = 2 * v459 + 2;
            }
            else {
              uint64_t v462 = v461;
            }
          }
          uint64_t v492 = &v9[v459];
          uint64_t v493 = *v462;
          uint64_t v494 = *v492;
          uint64_t v495 = *(uint64_t ****)(*v462 + 40);
          if ((*((unsigned char *)v495 + 23) & 0x10) != 0)
          {
            uint64_t v496 = ***v495;
            uint64_t v497 = *(void *)(v496 + 152);
            uint64_t v498 = *(unsigned int *)(v496 + 168);
            if (v498)
            {
              LODWORD(v499) = (v498 - 1) & ((v495 >> 4) ^ (v495 >> 9));
              uint64_t v500 = (uint64_t ****)(v497 + 16 * v499);
              unint64_t v501 = *v500;
              if (*v500 != v495)
              {
                int v502 = 1;
                do
                {
                  if (v501 == (uint64_t ***)-4096) {
                    goto LABEL_540;
                  }
                  int v503 = v499 + v502++;
                  uint64_t v499 = v503 & (v498 - 1);
                  unint64_t v501 = *(uint64_t ****)(v497 + 16 * v499);
                }
                while (v501 != v495);
                uint64_t v500 = (uint64_t ****)(v497 + 16 * v499);
              }
            }
            else
            {
LABEL_540:
              uint64_t v500 = (uint64_t ****)(v497 + 16 * v498);
            }
            unint64_t v504 = v500[1];
            size_t v506 = (size_t)*v504;
            uint64_t result = (char *)(v504 + 2);
            size_t v505 = v506;
          }
          else
          {
            size_t v505 = 0;
            uint64_t result = &byte_1CFBCE98E;
          }
          unsigned int v507 = *(uint64_t ****)(v494 + 40);
          if ((*((unsigned char *)v507 + 23) & 0x10) != 0)
          {
            uint64_t v508 = ***v507;
            uint64_t v509 = *(void *)(v508 + 152);
            uint64_t v510 = *(unsigned int *)(v508 + 168);
            if (v510)
            {
              LODWORD(v511) = (v510 - 1) & ((v507 >> 4) ^ (v507 >> 9));
              uint64_t v512 = (uint64_t ****)(v509 + 16 * v511);
              unint64_t v513 = *v512;
              if (*v512 != v507)
              {
                int v514 = 1;
                do
                {
                  if (v513 == (uint64_t ***)-4096) {
                    goto LABEL_549;
                  }
                  int v515 = v511 + v514++;
                  uint64_t v511 = v515 & (v510 - 1);
                  unint64_t v513 = *(uint64_t ****)(v509 + 16 * v511);
                }
                while (v513 != v507);
                uint64_t v512 = (uint64_t ****)(v509 + 16 * v511);
              }
            }
            else
            {
LABEL_549:
              uint64_t v512 = (uint64_t ****)(v509 + 16 * v510);
            }
            uint64_t v516 = v512[1];
            size_t v519 = (size_t)*v516;
            uint64_t v517 = (char *)(v516 + 2);
            size_t v518 = v519;
          }
          else
          {
            size_t v518 = 0;
            uint64_t v517 = &byte_1CFBCE98E;
          }
          if (v518 >= v505) {
            size_t v520 = v505;
          }
          else {
            size_t v520 = v518;
          }
          if (v520 && (uint64_t result = (char *)memcmp(result, v517, v520), result))
          {
            uint64_t v9 = v855;
            if ((result & 0x80000000) == 0) {
              goto LABEL_560;
            }
          }
          else
          {
            BOOL v4 = v505 >= v518;
            uint64_t v9 = v855;
            if (v4)
            {
              do
              {
LABEL_560:
                v521 = v462;
                *uint64_t v492 = v493;
                if (v857 < v460) {
                  break;
                }
                uint64_t v522 = (2 * v460) | 1;
                uint64_t v462 = &v855[v522];
                uint64_t v523 = 2 * v460 + 2;
                if (v523 < v11)
                {
                  uint64_t v524 = *(uint64_t ****)(*v462 + 40);
                  if ((*((unsigned char *)v524 + 23) & 0x10) != 0)
                  {
                    uint64_t v525 = ***v524;
                    uint64_t v526 = *(void *)(v525 + 152);
                    uint64_t v527 = *(unsigned int *)(v525 + 168);
                    if (v527)
                    {
                      LODWORD(v528) = (v527 - 1) & ((v524 >> 4) ^ (v524 >> 9));
                      uint64_t v529 = (uint64_t ****)(v526 + 16 * v528);
                      uint64_t v530 = *v529;
                      if (*v529 != v524)
                      {
                        int v531 = 1;
                        do
                        {
                          if (v530 == (uint64_t ***)-4096) {
                            goto LABEL_570;
                          }
                          int v532 = v528 + v531++;
                          uint64_t v528 = v532 & (v527 - 1);
                          uint64_t v530 = *(uint64_t ****)(v526 + 16 * v528);
                        }
                        while (v530 != v524);
                        uint64_t v529 = (uint64_t ****)(v526 + 16 * v528);
                      }
                    }
                    else
                    {
LABEL_570:
                      uint64_t v529 = (uint64_t ****)(v526 + 16 * v527);
                    }
                    unsigned int v533 = v529[1];
                    unint64_t v536 = (unint64_t)*v533;
                    unsigned int v534 = (char *)(v533 + 2);
                    unint64_t v535 = v536;
                  }
                  else
                  {
                    unint64_t v535 = 0;
                    unsigned int v534 = &byte_1CFBCE98E;
                  }
                  uint64_t v537 = v462[1];
                  ++v462;
                  uint64_t v538 = *(uint64_t ****)(v537 + 40);
                  if ((*((unsigned char *)v538 + 23) & 0x10) != 0)
                  {
                    uint64_t v539 = ***v538;
                    uint64_t v540 = *(void *)(v539 + 152);
                    uint64_t v541 = *(unsigned int *)(v539 + 168);
                    if (v541)
                    {
                      LODWORD(v542) = (v541 - 1) & ((v538 >> 4) ^ (v538 >> 9));
                      unsigned int v543 = (uint64_t ****)(v540 + 16 * v542);
                      uint64_t v544 = *v543;
                      if (*v543 != v538)
                      {
                        int v545 = 1;
                        do
                        {
                          if (v544 == (uint64_t ***)-4096) {
                            goto LABEL_579;
                          }
                          int v546 = v542 + v545++;
                          uint64_t v542 = v546 & (v541 - 1);
                          uint64_t v544 = *(uint64_t ****)(v540 + 16 * v542);
                        }
                        while (v544 != v538);
                        unsigned int v543 = (uint64_t ****)(v540 + 16 * v542);
                      }
                    }
                    else
                    {
LABEL_579:
                      unsigned int v543 = (uint64_t ****)(v540 + 16 * v541);
                    }
                    uint64_t v547 = v543[1];
                    unint64_t v550 = (unint64_t)*v547;
                    uint64_t v548 = (char *)(v547 + 2);
                    unint64_t v549 = v550;
                  }
                  else
                  {
                    unint64_t v549 = 0;
                    uint64_t v548 = &byte_1CFBCE98E;
                  }
                  size_t v551 = v549 >= v535 ? v535 : v549;
                  if (v551 && (int v552 = memcmp(v534, v548, v551)) != 0)
                  {
                    int v553 = (v552 >> 31) | 1;
                  }
                  else
                  {
                    if (v535 < v549) {
                      int v553 = -1;
                    }
                    else {
                      int v553 = 1;
                    }
                    if (v535 == v549) {
                      int v553 = 0;
                    }
                  }
                  if (v553 == -1)
                  {
                    uint64_t v460 = v523;
                  }
                  else
                  {
                    uint64_t v462 = &v855[v522];
                    uint64_t v460 = v522;
                  }
                }
                else
                {
                  uint64_t v460 = (2 * v460) | 1;
                }
                uint64_t v493 = *v462;
                unint64_t v554 = *(uint64_t ****)(*v462 + 40);
                if ((*((unsigned char *)v554 + 23) & 0x10) != 0)
                {
                  uint64_t v555 = ***v554;
                  uint64_t v556 = *(void *)(v555 + 152);
                  uint64_t v557 = *(unsigned int *)(v555 + 168);
                  if (v557)
                  {
                    LODWORD(v558) = (v557 - 1) & ((v554 >> 4) ^ (v554 >> 9));
                    uint64_t v559 = (uint64_t ****)(v556 + 16 * v558);
                    uint64_t v560 = *v559;
                    if (*v559 != v554)
                    {
                      int v561 = 1;
                      do
                      {
                        if (v560 == (uint64_t ***)-4096) {
                          goto LABEL_602;
                        }
                        int v562 = v558 + v561++;
                        uint64_t v558 = v562 & (v557 - 1);
                        uint64_t v560 = *(uint64_t ****)(v556 + 16 * v558);
                      }
                      while (v560 != v554);
                      uint64_t v559 = (uint64_t ****)(v556 + 16 * v558);
                    }
                  }
                  else
                  {
LABEL_602:
                    uint64_t v559 = (uint64_t ****)(v556 + 16 * v557);
                  }
                  uint64_t v563 = v559[1];
                  unint64_t v565 = (unint64_t)*v563;
                  uint64_t result = (char *)(v563 + 2);
                  unint64_t v564 = v565;
                }
                else
                {
                  unint64_t v564 = 0;
                  uint64_t result = &byte_1CFBCE98E;
                }
                uint64_t v566 = *(uint64_t ****)(v494 + 40);
                if ((*((unsigned char *)v566 + 23) & 0x10) != 0)
                {
                  uint64_t v567 = ***v566;
                  uint64_t v568 = *(void *)(v567 + 152);
                  uint64_t v569 = *(unsigned int *)(v567 + 168);
                  if (v569)
                  {
                    LODWORD(v570) = (v569 - 1) & ((v566 >> 4) ^ (v566 >> 9));
                    uint64_t v571 = (uint64_t ****)(v568 + 16 * v570);
                    uint64_t v572 = *v571;
                    if (*v571 != v566)
                    {
                      int v573 = 1;
                      do
                      {
                        if (v572 == (uint64_t ***)-4096) {
                          goto LABEL_611;
                        }
                        int v574 = v570 + v573++;
                        uint64_t v570 = v574 & (v569 - 1);
                        uint64_t v572 = *(uint64_t ****)(v568 + 16 * v570);
                      }
                      while (v572 != v566);
                      uint64_t v571 = (uint64_t ****)(v568 + 16 * v570);
                    }
                  }
                  else
                  {
LABEL_611:
                    uint64_t v571 = (uint64_t ****)(v568 + 16 * v569);
                  }
                  v575 = v571[1];
                  unint64_t v578 = (unint64_t)*v575;
                  unint64_t v576 = (char *)(v575 + 2);
                  unint64_t v577 = v578;
                }
                else
                {
                  unint64_t v577 = 0;
                  unint64_t v576 = &byte_1CFBCE98E;
                }
                size_t v579 = v577 >= v564 ? v564 : v577;
                if (v579 && (uint64_t result = (char *)memcmp(result, v576, v579), result))
                {
                  int v580 = ((int)result >> 31) | 1;
                }
                else if (v564 == v577)
                {
                  int v580 = 0;
                }
                else
                {
                  if (v564 < v577) {
                    break;
                  }
                  int v580 = 1;
                }
                uint64_t v492 = v521;
              }
              while (v580 != -1);
              uint64_t *v521 = v494;
              uint64_t v9 = v855;
            }
          }
        }
        int64_t v458 = v459 - 1;
      }
      while (v459);
      unint64_t v581 = v854;
LABEL_636:
      v582 = v581;
      uint64_t v583 = 0;
      uint64_t v858 = *v9;
      uint64_t v584 = v9;
      while (1)
      {
        uint64_t v585 = &v584[v583 + 1];
        uint64_t v586 = (2 * v583) | 1;
        uint64_t v587 = 2 * v583 + 2;
        if (v587 < v11) {
          break;
        }
LABEL_669:
        *uint64_t v584 = *v585;
        uint64_t v584 = v585;
        uint64_t v583 = v586;
        if (v586 > (uint64_t)((unint64_t)(v11 - 2) >> 1))
        {
          --v581;
          if (v585 == v582 - 1)
          {
            *uint64_t v585 = v858;
            goto LABEL_734;
          }
          *uint64_t v585 = *v581;
          *unint64_t v581 = v858;
          uint64_t v615 = (char *)v585 - (char *)v855 + 8;
          if (v615 >= 9)
          {
            unint64_t v616 = (((unint64_t)v615 >> 3) - 2) >> 1;
            uint64_t v617 = &v855[v616];
            uint64_t v618 = *v617;
            v619 = *(uint64_t ****)(*v617 + 40);
            if ((*((unsigned char *)v619 + 23) & 0x10) != 0)
            {
              uint64_t v620 = ***v619;
              uint64_t v621 = *(void *)(v620 + 152);
              uint64_t v622 = *(unsigned int *)(v620 + 168);
              if (!v622) {
                goto LABEL_683;
              }
              LODWORD(v623) = (v622 - 1) & ((v619 >> 4) ^ (v619 >> 9));
              unint64_t v624 = (uint64_t ****)(v621 + 16 * v623);
              unint64_t v625 = *v624;
              if (*v624 != v619)
              {
                int v626 = 1;
                while (v625 != (uint64_t ***)-4096)
                {
                  int v627 = v623 + v626++;
                  uint64_t v623 = v627 & (v622 - 1);
                  unint64_t v625 = *(uint64_t ****)(v621 + 16 * v623);
                  if (v625 == v619)
                  {
                    unint64_t v624 = (uint64_t ****)(v621 + 16 * v623);
                    goto LABEL_684;
                  }
                }
LABEL_683:
                unint64_t v624 = (uint64_t ****)(v621 + 16 * v622);
              }
LABEL_684:
              uint64_t v628 = v624[1];
              size_t v630 = (size_t)*v628;
              uint64_t result = (char *)(v628 + 2);
              size_t v629 = v630;
            }
            else
            {
              size_t v629 = 0;
              uint64_t result = &byte_1CFBCE98E;
            }
            uint64_t v631 = *v585;
            v632 = *(uint64_t ****)(*v585 + 40);
            if ((*((unsigned char *)v632 + 23) & 0x10) != 0)
            {
              uint64_t v633 = ***v632;
              uint64_t v634 = *(void *)(v633 + 152);
              uint64_t v635 = *(unsigned int *)(v633 + 168);
              if (!v635) {
                goto LABEL_692;
              }
              LODWORD(v636) = (v635 - 1) & ((v632 >> 4) ^ (v632 >> 9));
              unsigned int v637 = (uint64_t ****)(v634 + 16 * v636);
              v638 = *v637;
              if (*v637 != v632)
              {
                int v639 = 1;
                while (v638 != (uint64_t ***)-4096)
                {
                  int v640 = v636 + v639++;
                  uint64_t v636 = v640 & (v635 - 1);
                  v638 = *(uint64_t ****)(v634 + 16 * v636);
                  if (v638 == v632)
                  {
                    unsigned int v637 = (uint64_t ****)(v634 + 16 * v636);
                    goto LABEL_693;
                  }
                }
LABEL_692:
                unsigned int v637 = (uint64_t ****)(v634 + 16 * v635);
              }
LABEL_693:
              unint64_t v641 = v637[1];
              size_t v644 = (size_t)*v641;
              unint64_t v642 = (char *)(v641 + 2);
              size_t v643 = v644;
            }
            else
            {
              size_t v643 = 0;
              unint64_t v642 = &byte_1CFBCE98E;
            }
            if (v643 >= v629) {
              size_t v645 = v629;
            }
            else {
              size_t v645 = v643;
            }
            if (v645)
            {
              uint64_t result = (char *)memcmp(result, v642, v645);
              if (result)
              {
                if ((result & 0x80000000) == 0) {
                  goto LABEL_734;
                }
LABEL_702:
                while (2)
                {
                  unsigned int v646 = v617;
                  *uint64_t v585 = v618;
                  if (!v616)
                  {
LABEL_733:
                    *unsigned int v646 = v631;
                    goto LABEL_734;
                  }
                  unint64_t v616 = (v616 - 1) >> 1;
                  uint64_t v617 = &v855[v616];
                  uint64_t v618 = *v617;
                  unsigned int v647 = *(uint64_t ****)(*v617 + 40);
                  if ((*((unsigned char *)v647 + 23) & 0x10) != 0)
                  {
                    uint64_t v648 = ***v647;
                    uint64_t v649 = *(void *)(v648 + 152);
                    uint64_t v650 = *(unsigned int *)(v648 + 168);
                    if (!v650) {
                      goto LABEL_710;
                    }
                    LODWORD(v651) = (v650 - 1) & ((v647 >> 4) ^ (v647 >> 9));
                    uint64_t v652 = (uint64_t ****)(v649 + 16 * v651);
                    uint64_t v653 = *v652;
                    if (*v652 != v647)
                    {
                      int v654 = 1;
                      while (v653 != (uint64_t ***)-4096)
                      {
                        int v655 = v651 + v654++;
                        uint64_t v651 = v655 & (v650 - 1);
                        uint64_t v653 = *(uint64_t ****)(v649 + 16 * v651);
                        if (v653 == v647)
                        {
                          uint64_t v652 = (uint64_t ****)(v649 + 16 * v651);
                          goto LABEL_711;
                        }
                      }
LABEL_710:
                      uint64_t v652 = (uint64_t ****)(v649 + 16 * v650);
                    }
LABEL_711:
                    unint64_t v656 = v652[1];
                    size_t v658 = (size_t)*v656;
                    uint64_t result = (char *)(v656 + 2);
                    size_t v657 = v658;
                  }
                  else
                  {
                    size_t v657 = 0;
                    uint64_t result = &byte_1CFBCE98E;
                  }
                  uint64_t v659 = *(uint64_t ****)(v631 + 40);
                  if ((*((unsigned char *)v659 + 23) & 0x10) != 0)
                  {
                    uint64_t v660 = ***v659;
                    uint64_t v661 = *(void *)(v660 + 152);
                    uint64_t v662 = *(unsigned int *)(v660 + 168);
                    if (!v662) {
                      goto LABEL_719;
                    }
                    LODWORD(v663) = (v662 - 1) & ((v659 >> 4) ^ (v659 >> 9));
                    v664 = (uint64_t ****)(v661 + 16 * v663);
                    uint64_t v665 = *v664;
                    if (*v664 != v659)
                    {
                      int v666 = 1;
                      while (v665 != (uint64_t ***)-4096)
                      {
                        int v667 = v663 + v666++;
                        uint64_t v663 = v667 & (v662 - 1);
                        uint64_t v665 = *(uint64_t ****)(v661 + 16 * v663);
                        if (v665 == v659)
                        {
                          v664 = (uint64_t ****)(v661 + 16 * v663);
                          goto LABEL_720;
                        }
                      }
LABEL_719:
                      v664 = (uint64_t ****)(v661 + 16 * v662);
                    }
LABEL_720:
                    unsigned int v668 = v664[1];
                    size_t v671 = (size_t)*v668;
                    uint64_t v669 = (char *)(v668 + 2);
                    size_t v670 = v671;
                  }
                  else
                  {
                    size_t v670 = 0;
                    uint64_t v669 = &byte_1CFBCE98E;
                  }
                  if (v670 >= v657) {
                    size_t v672 = v657;
                  }
                  else {
                    size_t v672 = v670;
                  }
                  if (v672 && (uint64_t result = (char *)memcmp(result, v669, v672), result))
                  {
                    int v673 = ((int)result >> 31) | 1;
                  }
                  else
                  {
                    if (v657 >= v670) {
                      goto LABEL_733;
                    }
                    int v673 = -1;
                  }
                  uint64_t v585 = v646;
                  if (v673 != -1) {
                    goto LABEL_733;
                  }
                  continue;
                }
              }
            }
            if (v629 < v643) {
              goto LABEL_702;
            }
          }
LABEL_734:
          BOOL v674 = v11-- <= 2;
          uint64_t v9 = v855;
          if (v674) {
            return result;
          }
          goto LABEL_636;
        }
      }
      unsigned int v588 = *(uint64_t ****)(*v585 + 40);
      if ((*((unsigned char *)v588 + 23) & 0x10) == 0)
      {
        size_t v598 = 0;
        uint64_t result = &byte_1CFBCE98E;
LABEL_647:
        unsigned int v600 = *(uint64_t ****)(v585[1] + 40);
        if ((*((unsigned char *)v600 + 23) & 0x10) == 0)
        {
          size_t v611 = 0;
          uint64_t v610 = &byte_1CFBCE98E;
          goto LABEL_656;
        }
        uint64_t v601 = ***v600;
        uint64_t v602 = *(void *)(v601 + 152);
        uint64_t v603 = *(unsigned int *)(v601 + 168);
        if (v603)
        {
          LODWORD(v604) = (v603 - 1) & ((v600 >> 4) ^ (v600 >> 9));
          uint64_t v605 = (uint64_t ****)(v602 + 16 * v604);
          unsigned int v606 = *v605;
          if (*v605 == v600)
          {
LABEL_655:
            v609 = v605[1];
            size_t v612 = (size_t)*v609;
            uint64_t v610 = (char *)(v609 + 2);
            size_t v611 = v612;
LABEL_656:
            if (v611 >= v598) {
              size_t v613 = v598;
            }
            else {
              size_t v613 = v611;
            }
            if (v613 && (uint64_t result = (char *)memcmp(result, v610, v613), result))
            {
              int v614 = ((int)result >> 31) | 1;
            }
            else
            {
              if (v598 < v611) {
                int v614 = -1;
              }
              else {
                int v614 = 1;
              }
              if (v598 == v611) {
                int v614 = 0;
              }
            }
            if (v614 == -1)
            {
              ++v585;
              uint64_t v586 = v587;
            }
            goto LABEL_669;
          }
          int v607 = 1;
          while (v606 != (uint64_t ***)-4096)
          {
            int v608 = v604 + v607++;
            uint64_t v604 = v608 & (v603 - 1);
            unsigned int v606 = *(uint64_t ****)(v602 + 16 * v604);
            if (v606 == v600)
            {
              uint64_t v605 = (uint64_t ****)(v602 + 16 * v604);
              goto LABEL_655;
            }
          }
        }
        uint64_t v605 = (uint64_t ****)(v602 + 16 * v603);
        goto LABEL_655;
      }
      uint64_t v589 = ***v588;
      uint64_t v590 = *(void *)(v589 + 152);
      uint64_t v591 = *(unsigned int *)(v589 + 168);
      if (v591)
      {
        LODWORD(v592) = (v591 - 1) & ((v588 >> 4) ^ (v588 >> 9));
        uint64_t v593 = (uint64_t ****)(v590 + 16 * v592);
        uint64_t v594 = *v593;
        if (*v593 == v588)
        {
LABEL_646:
          long long v597 = v593[1];
          size_t v599 = (size_t)*v597;
          uint64_t result = (char *)(v597 + 2);
          size_t v598 = v599;
          goto LABEL_647;
        }
        int v595 = 1;
        while (v594 != (uint64_t ***)-4096)
        {
          int v596 = v592 + v595++;
          uint64_t v592 = v596 & (v591 - 1);
          uint64_t v594 = *(uint64_t ****)(v590 + 16 * v592);
          if (v594 == v588)
          {
            uint64_t v593 = (uint64_t ****)(v590 + 16 * v592);
            goto LABEL_646;
          }
        }
      }
      uint64_t v593 = (uint64_t ****)(v590 + 16 * v591);
      goto LABEL_646;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    uint64_t v13 = &v9[(unint64_t)v11 >> 1];
    if ((unint64_t)v10 < 0x401)
    {
      sub_1CCE6B3BC(v13, v9, v850);
    }
    else
    {
      sub_1CCE6B3BC(v9, v13, v850);
      sub_1CCE6B3BC(v9 + 1, v13 - 1, v849);
      sub_1CCE6B3BC(v9 + 2, &v9[v12 + 1], v848);
      sub_1CCE6B3BC(v13 - 1, v13, &v9[v12 + 1]);
      uint64_t v14 = *v9;
      *uint64_t v9 = *v13;
      *uint64_t v13 = v14;
    }
    uint64_t v15 = *v9;
    uint64_t v853 = a3 - 1;
    uint64_t v856 = *v9;
    if (a4)
    {
      uint64_t v16 = *(uint64_t ****)(v15 + 40);
      int v17 = *((_DWORD *)v16 + 5) & 0x10000000;
LABEL_44:
      unsigned int v55 = (v16 >> 4) ^ (v16 >> 9);
      char v56 = v9;
      do
      {
        int v57 = v56;
        uint64_t v59 = v56[1];
        ++v56;
        uint64_t v58 = v59;
        uint64_t v60 = *(uint64_t ****)(v59 + 40);
        if ((*((unsigned char *)v60 + 23) & 0x10) == 0)
        {
          size_t v71 = 0;
          unsigned int v70 = &byte_1CFBCE98E;
          if (!v17) {
            goto LABEL_73;
          }
LABEL_54:
          uint64_t v73 = ***v16;
          uint64_t v74 = *(void *)(v73 + 152);
          uint64_t v75 = *(unsigned int *)(v73 + 168);
          if (v75)
          {
            LODWORD(v76) = (v75 - 1) & v55;
            unsigned int v77 = (uint64_t ****)(v74 + 16 * v76);
            uint64_t v78 = *v77;
            if (*v77 == v16)
            {
LABEL_61:
              uint64_t v81 = v77[1];
              size_t v84 = (size_t)*v81;
              BOOL v82 = (char *)(v81 + 2);
              size_t v83 = v84;
              goto LABEL_62;
            }
            int v79 = 1;
            while (v78 != (uint64_t ***)-4096)
            {
              int v80 = v76 + v79++;
              uint64_t v76 = v80 & (v75 - 1);
              uint64_t v78 = *(uint64_t ****)(v74 + 16 * v76);
              if (v78 == v16)
              {
                unsigned int v77 = (uint64_t ****)(v74 + 16 * v76);
                goto LABEL_61;
              }
            }
          }
          unsigned int v77 = (uint64_t ****)(v74 + 16 * v75);
          goto LABEL_61;
        }
        uint64_t v61 = ***v60;
        uint64_t v62 = *(void *)(v61 + 152);
        uint64_t v63 = *(unsigned int *)(v61 + 168);
        if (v63)
        {
          LODWORD(v64) = (v63 - 1) & ((v60 >> 4) ^ (v60 >> 9));
          int v65 = (uint64_t ****)(v62 + 16 * v64);
          __int16 v66 = *v65;
          if (*v65 == v60) {
            goto LABEL_53;
          }
          int v67 = 1;
          while (v66 != (uint64_t ***)-4096)
          {
            int v68 = v64 + v67++;
            uint64_t v64 = v68 & (v63 - 1);
            __int16 v66 = *(uint64_t ****)(v62 + 16 * v64);
            if (v66 == v60)
            {
              int v65 = (uint64_t ****)(v62 + 16 * v64);
              goto LABEL_53;
            }
          }
        }
        int v65 = (uint64_t ****)(v62 + 16 * v63);
LABEL_53:
        uint64_t v69 = v65[1];
        size_t v72 = (size_t)*v69;
        unsigned int v70 = (char *)(v69 + 2);
        size_t v71 = v72;
        if (v17) {
          goto LABEL_54;
        }
LABEL_73:
        size_t v83 = 0;
        BOOL v82 = &byte_1CFBCE98E;
LABEL_62:
        if (v83 >= v71) {
          size_t v85 = v71;
        }
        else {
          size_t v85 = v83;
        }
        if (v85 && (int v86 = memcmp(v70, v82, v85)) != 0)
        {
          int v87 = (v86 >> 31) | 1;
        }
        else
        {
          if (v71 >= v83) {
            break;
          }
          int v87 = -1;
        }
      }
      while (v87 == -1);
      unsigned int v88 = v854;
      if (v57 != v855)
      {
        while (1)
        {
          uint64_t v89 = *--v88;
          BOOL v90 = *(uint64_t ****)(v89 + 40);
          if ((*((unsigned char *)v90 + 23) & 0x10) != 0) {
            break;
          }
          size_t v101 = 0;
          uint64_t v100 = &byte_1CFBCE98E;
          if (!v17)
          {
LABEL_105:
            size_t v113 = 0;
            unsigned int v112 = &byte_1CFBCE98E;
            goto LABEL_92;
          }
LABEL_84:
          uint64_t v103 = ***v16;
          uint64_t v104 = *(void *)(v103 + 152);
          uint64_t v105 = *(unsigned int *)(v103 + 168);
          if (!v105) {
            goto LABEL_90;
          }
          LODWORD(v106) = (v105 - 1) & v55;
          uint64_t v107 = (uint64_t ****)(v104 + 16 * v106);
          uint64_t v108 = *v107;
          if (*v107 != v16)
          {
            int v109 = 1;
            while (v108 != (uint64_t ***)-4096)
            {
              int v110 = v106 + v109++;
              uint64_t v106 = v110 & (v105 - 1);
              uint64_t v108 = *(uint64_t ****)(v104 + 16 * v106);
              if (v108 == v16)
              {
                uint64_t v107 = (uint64_t ****)(v104 + 16 * v106);
                goto LABEL_91;
              }
            }
LABEL_90:
            uint64_t v107 = (uint64_t ****)(v104 + 16 * v105);
          }
LABEL_91:
          unsigned int v111 = v107[1];
          size_t v114 = (size_t)*v111;
          unsigned int v112 = (char *)(v111 + 2);
          size_t v113 = v114;
LABEL_92:
          if (v113 >= v101) {
            size_t v115 = v101;
          }
          else {
            size_t v115 = v113;
          }
          if (v115 && (int v116 = memcmp(v100, v112, v115)) != 0)
          {
            int v117 = (v116 >> 31) | 1;
          }
          else if (v101 == v113)
          {
            int v117 = 0;
          }
          else
          {
            if (v101 < v113) {
              goto LABEL_139;
            }
            int v117 = 1;
          }
          if (v117 == -1) {
            goto LABEL_139;
          }
        }
        uint64_t v91 = ***v90;
        uint64_t v92 = *(void *)(v91 + 152);
        uint64_t v93 = *(unsigned int *)(v91 + 168);
        if (v93)
        {
          LODWORD(v94) = (v93 - 1) & ((v90 >> 4) ^ (v90 >> 9));
          int v95 = (uint64_t ****)(v92 + 16 * v94);
          uint64_t v96 = *v95;
          if (*v95 != v90)
          {
            int v97 = 1;
            while (v96 != (uint64_t ***)-4096)
            {
              int v98 = v94 + v97++;
              uint64_t v94 = v98 & (v93 - 1);
              uint64_t v96 = *(uint64_t ****)(v92 + 16 * v94);
              if (v96 == v90)
              {
                int v95 = (uint64_t ****)(v92 + 16 * v94);
                goto LABEL_83;
              }
            }
            goto LABEL_82;
          }
        }
        else
        {
LABEL_82:
          int v95 = (uint64_t ****)(v92 + 16 * v93);
        }
LABEL_83:
        uint64_t v99 = v95[1];
        size_t v102 = (size_t)*v99;
        uint64_t v100 = (char *)(v99 + 2);
        size_t v101 = v102;
        if (!v17) {
          goto LABEL_105;
        }
        goto LABEL_84;
      }
      unsigned int v88 = v854;
      while (2)
      {
        if (v56 < v88)
        {
          uint64_t v118 = *--v88;
          uint64_t v119 = *(uint64_t ****)(v118 + 40);
          if ((*((unsigned char *)v119 + 23) & 0x10) != 0)
          {
            uint64_t v120 = ***v119;
            uint64_t v121 = *(void *)(v120 + 152);
            uint64_t v122 = *(unsigned int *)(v120 + 168);
            if (!v122) {
              goto LABEL_115;
            }
            LODWORD(v123) = (v122 - 1) & ((v119 >> 4) ^ (v119 >> 9));
            uint64_t v124 = (uint64_t ****)(v121 + 16 * v123);
            unsigned int v125 = *v124;
            if (*v124 != v119)
            {
              int v126 = 1;
              while (v125 != (uint64_t ***)-4096)
              {
                int v127 = v123 + v126++;
                uint64_t v123 = v127 & (v122 - 1);
                unsigned int v125 = *(uint64_t ****)(v121 + 16 * v123);
                if (v125 == v119)
                {
                  uint64_t v124 = (uint64_t ****)(v121 + 16 * v123);
                  goto LABEL_116;
                }
              }
LABEL_115:
              uint64_t v124 = (uint64_t ****)(v121 + 16 * v122);
            }
LABEL_116:
            unsigned int v128 = v124[1];
            size_t v131 = (size_t)*v128;
            unsigned int v129 = (char *)(v128 + 2);
            size_t v130 = v131;
            if (v17)
            {
LABEL_117:
              uint64_t v132 = ***v16;
              uint64_t v133 = *(void *)(v132 + 152);
              uint64_t v134 = *(unsigned int *)(v132 + 168);
              if (!v134) {
                goto LABEL_123;
              }
              LODWORD(v135) = (v134 - 1) & v55;
              int v136 = (uint64_t ****)(v133 + 16 * v135);
              uint64_t v137 = *v136;
              if (*v136 != v16)
              {
                int v138 = 1;
                while (v137 != (uint64_t ***)-4096)
                {
                  int v139 = v135 + v138++;
                  uint64_t v135 = v139 & (v134 - 1);
                  uint64_t v137 = *(uint64_t ****)(v133 + 16 * v135);
                  if (v137 == v16)
                  {
                    int v136 = (uint64_t ****)(v133 + 16 * v135);
                    goto LABEL_124;
                  }
                }
LABEL_123:
                int v136 = (uint64_t ****)(v133 + 16 * v134);
              }
LABEL_124:
              uint64_t v140 = v136[1];
              size_t v143 = (size_t)*v140;
              int v141 = (char *)(v140 + 2);
              size_t v142 = v143;
LABEL_125:
              if (v142 >= v130) {
                size_t v144 = v130;
              }
              else {
                size_t v144 = v142;
              }
              if (v144 && (int v145 = memcmp(v129, v141, v144)) != 0)
              {
                int v146 = (v145 >> 31) | 1;
              }
              else if (v130 == v142)
              {
                int v146 = 0;
              }
              else
              {
                if (v130 < v142) {
                  break;
                }
                int v146 = 1;
              }
              if (v146 == -1) {
                break;
              }
              continue;
            }
          }
          else
          {
            size_t v130 = 0;
            unsigned int v129 = &byte_1CFBCE98E;
            if (v17) {
              goto LABEL_117;
            }
          }
          size_t v142 = 0;
          int v141 = &byte_1CFBCE98E;
          goto LABEL_125;
        }
        break;
      }
LABEL_139:
      int64x2_t v852 = v88;
      if (v56 >= v88)
      {
        uint64_t v8 = v56;
        goto LABEL_204;
      }
      uint64_t v147 = v88;
      uint64_t v148 = *v88;
      uint64_t v8 = v56;
      while (2)
      {
        *uint64_t v8 = v148;
        *uint64_t v147 = v58;
        unsigned int v149 = *(uint64_t ****)(v856 + 40);
        int v150 = *((_DWORD *)v149 + 5);
        unsigned int v151 = (v149 >> 4) ^ (v149 >> 9);
        while (2)
        {
          uint64_t v152 = v8[1];
          ++v8;
          uint64_t v58 = v152;
          uint64_t v153 = *(uint64_t ****)(v152 + 40);
          if ((*((unsigned char *)v153 + 23) & 0x10) == 0)
          {
            size_t v164 = 0;
            unsigned int v163 = &byte_1CFBCE98E;
            if ((v150 & 0x10000000) != 0) {
              goto LABEL_151;
            }
LABEL_170:
            size_t v176 = 0;
            unsigned int v175 = &byte_1CFBCE98E;
            goto LABEL_159;
          }
          uint64_t v154 = ***v153;
          uint64_t v155 = *(void *)(v154 + 152);
          uint64_t v156 = *(unsigned int *)(v154 + 168);
          if (!v156) {
            goto LABEL_149;
          }
          LODWORD(v157) = (v156 - 1) & ((v153 >> 4) ^ (v153 >> 9));
          uint64_t v158 = (uint64_t ****)(v155 + 16 * v157);
          uint64_t v159 = *v158;
          if (*v158 != v153)
          {
            int v160 = 1;
            while (v159 != (uint64_t ***)-4096)
            {
              int v161 = v157 + v160++;
              uint64_t v157 = v161 & (v156 - 1);
              uint64_t v159 = *(uint64_t ****)(v155 + 16 * v157);
              if (v159 == v153)
              {
                uint64_t v158 = (uint64_t ****)(v155 + 16 * v157);
                goto LABEL_150;
              }
            }
LABEL_149:
            uint64_t v158 = (uint64_t ****)(v155 + 16 * v156);
          }
LABEL_150:
          int v162 = v158[1];
          size_t v165 = (size_t)*v162;
          unsigned int v163 = (char *)(v162 + 2);
          size_t v164 = v165;
          if ((v150 & 0x10000000) == 0) {
            goto LABEL_170;
          }
LABEL_151:
          uint64_t v166 = ***v149;
          uint64_t v167 = *(void *)(v166 + 152);
          uint64_t v168 = *(unsigned int *)(v166 + 168);
          if (!v168) {
            goto LABEL_157;
          }
          LODWORD(v169) = (v168 - 1) & v151;
          unsigned int v170 = (uint64_t ****)(v167 + 16 * v169);
          uint64_t v171 = *v170;
          if (*v170 != v149)
          {
            int v172 = 1;
            while (v171 != (uint64_t ***)-4096)
            {
              int v173 = v169 + v172++;
              uint64_t v169 = v173 & (v168 - 1);
              uint64_t v171 = *(uint64_t ****)(v167 + 16 * v169);
              if (v171 == v149)
              {
                unsigned int v170 = (uint64_t ****)(v167 + 16 * v169);
                goto LABEL_158;
              }
            }
LABEL_157:
            unsigned int v170 = (uint64_t ****)(v167 + 16 * v168);
          }
LABEL_158:
          uint64_t v174 = v170[1];
          size_t v177 = (size_t)*v174;
          unsigned int v175 = (char *)(v174 + 2);
          size_t v176 = v177;
LABEL_159:
          if (v176 >= v164) {
            size_t v178 = v164;
          }
          else {
            size_t v178 = v176;
          }
          if (v178 && (int v179 = memcmp(v163, v175, v178)) != 0)
          {
            int v180 = (v179 >> 31) | 1;
          }
          else
          {
            if (v164 >= v176) {
              break;
            }
            int v180 = -1;
          }
          if (v180 == -1) {
            continue;
          }
          break;
        }
        while (2)
        {
          uint64_t v185 = *--v147;
          uint64_t v148 = v185;
          uint64_t v186 = *(uint64_t ****)(v185 + 40);
          if ((*((unsigned char *)v186 + 23) & 0x10) == 0)
          {
            size_t v181 = 0;
            uint64_t v182 = &byte_1CFBCE98E;
            if ((v150 & 0x10000000) != 0) {
              goto LABEL_182;
            }
LABEL_172:
            size_t v183 = 0;
            uint64_t v184 = &byte_1CFBCE98E;
            goto LABEL_190;
          }
          uint64_t v187 = ***v186;
          uint64_t v188 = *(void *)(v187 + 152);
          uint64_t v189 = *(unsigned int *)(v187 + 168);
          if (!v189) {
            goto LABEL_180;
          }
          LODWORD(v190) = (v189 - 1) & ((v186 >> 4) ^ (v186 >> 9));
          uint64_t v191 = (uint64_t ****)(v188 + 16 * v190);
          uint64_t v192 = *v191;
          if (*v191 != v186)
          {
            int v193 = 1;
            while (v192 != (uint64_t ***)-4096)
            {
              int v194 = v190 + v193++;
              uint64_t v190 = v194 & (v189 - 1);
              uint64_t v192 = *(uint64_t ****)(v188 + 16 * v190);
              if (v192 == v186)
              {
                uint64_t v191 = (uint64_t ****)(v188 + 16 * v190);
                goto LABEL_181;
              }
            }
LABEL_180:
            uint64_t v191 = (uint64_t ****)(v188 + 16 * v189);
          }
LABEL_181:
          unsigned int v195 = v191[1];
          size_t v196 = (size_t)*v195;
          uint64_t v182 = (char *)(v195 + 2);
          size_t v181 = v196;
          if ((v150 & 0x10000000) == 0) {
            goto LABEL_172;
          }
LABEL_182:
          uint64_t v197 = ***v149;
          uint64_t v198 = *(void *)(v197 + 152);
          uint64_t v199 = *(unsigned int *)(v197 + 168);
          if (!v199) {
            goto LABEL_188;
          }
          LODWORD(v200) = (v199 - 1) & v151;
          uint64_t v201 = (uint64_t ****)(v198 + 16 * v200);
          unsigned int v202 = *v201;
          if (*v201 != v149)
          {
            int v203 = 1;
            while (v202 != (uint64_t ***)-4096)
            {
              int v204 = v200 + v203++;
              uint64_t v200 = v204 & (v199 - 1);
              unsigned int v202 = *(uint64_t ****)(v198 + 16 * v200);
              if (v202 == v149)
              {
                uint64_t v201 = (uint64_t ****)(v198 + 16 * v200);
                goto LABEL_189;
              }
            }
LABEL_188:
            uint64_t v201 = (uint64_t ****)(v198 + 16 * v199);
          }
LABEL_189:
          unsigned int v205 = v201[1];
          size_t v206 = (size_t)*v205;
          uint64_t v184 = (char *)(v205 + 2);
          size_t v183 = v206;
LABEL_190:
          if (v183 >= v181) {
            size_t v207 = v181;
          }
          else {
            size_t v207 = v183;
          }
          if (v207 && (int v208 = memcmp(v182, v184, v207)) != 0)
          {
            int v209 = (v208 >> 31) | 1;
          }
          else if (v181 == v183)
          {
            int v209 = 0;
          }
          else
          {
            if (v181 < v183) {
              break;
            }
            int v209 = 1;
          }
          if (v209 != -1) {
            continue;
          }
          break;
        }
        if (v8 < v147) {
          continue;
        }
        break;
      }
LABEL_204:
      uint64_t v210 = v8 - 1;
      uint64_t v7 = v855;
      if (v8 - 1 != v855) {
        uint64_t *v855 = *v210;
      }
      *uint64_t v210 = v856;
      a3 = v853;
      if (v56 < v852)
      {
LABEL_209:
        uint64_t result = (char *)sub_1CCE688E0(v855, v8 - 1, v853, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v211 = sub_1CCE6BA80(v855, v8 - 1);
        uint64_t result = (char *)sub_1CCE6BA80(v8, v854);
        if (result)
        {
          a2 = v8 - 1;
          if (v211) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v211) {
          goto LABEL_209;
        }
      }
    }
    else
    {
      uint64_t v18 = *(uint64_t ****)(*(v9 - 1) + 40);
      if ((*((unsigned char *)v18 + 23) & 0x10) != 0)
      {
        uint64_t v19 = ***v18;
        uint64_t v20 = *(void *)(v19 + 152);
        uint64_t v21 = *(unsigned int *)(v19 + 168);
        if (v21)
        {
          LODWORD(v22) = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
          uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
          uint64_t v24 = *v23;
          if (*v23 == v18)
          {
LABEL_20:
            int v27 = v23[1];
            size_t v30 = (size_t)*v27;
            BOOL v28 = (char *)(v27 + 2);
            size_t v29 = v30;
            goto LABEL_21;
          }
          int v25 = 1;
          while (v24 != (uint64_t ***)-4096)
          {
            int v26 = v22 + v25++;
            uint64_t v22 = v26 & (v21 - 1);
            uint64_t v24 = *(uint64_t ****)(v20 + 16 * v22);
            if (v24 == v18)
            {
              uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
              goto LABEL_20;
            }
          }
        }
        uint64_t v23 = (uint64_t ****)(v20 + 16 * v21);
        goto LABEL_20;
      }
      size_t v29 = 0;
      BOOL v28 = &byte_1CFBCE98E;
LABEL_21:
      uint64_t v16 = *(uint64_t ****)(v15 + 40);
      int v31 = *((_DWORD *)v16 + 5);
      unsigned int v32 = v16 >> 4;
      if ((v31 & 0x10000000) != 0)
      {
        uint64_t v33 = ***v16;
        uint64_t v34 = *(void *)(v33 + 152);
        uint64_t v35 = *(unsigned int *)(v33 + 168);
        if (v35)
        {
          LODWORD(v36) = (v35 - 1) & (v32 ^ (v16 >> 9));
          uint64_t v37 = (uint64_t ****)(v34 + 16 * v36);
          uint64_t v38 = *v37;
          if (*v37 == v16)
          {
LABEL_29:
            int v41 = v37[1];
            size_t v44 = (size_t)*v41;
            uint64_t v42 = (char *)(v41 + 2);
            size_t v43 = v44;
            goto LABEL_30;
          }
          int v39 = 1;
          while (v38 != (uint64_t ***)-4096)
          {
            int v40 = v36 + v39++;
            uint64_t v36 = v40 & (v35 - 1);
            uint64_t v38 = *(uint64_t ****)(v34 + 16 * v36);
            if (v38 == v16)
            {
              uint64_t v37 = (uint64_t ****)(v34 + 16 * v36);
              goto LABEL_29;
            }
          }
        }
        uint64_t v37 = (uint64_t ****)(v34 + 16 * v35);
        goto LABEL_29;
      }
      size_t v43 = 0;
      uint64_t v42 = &byte_1CFBCE98E;
LABEL_30:
      int v17 = v31 & 0x10000000;
      if (v43 >= v29) {
        size_t v45 = v29;
      }
      else {
        size_t v45 = v43;
      }
      if (v45 && (int v46 = memcmp(v28, v42, v45)) != 0)
      {
        if (v46 < 0) {
          goto LABEL_44;
        }
      }
      else if (v29 < v43)
      {
        goto LABEL_44;
      }
      if (v17)
      {
        uint64_t v47 = ***v16;
        uint64_t v48 = *(void *)(v47 + 152);
        uint64_t v49 = *(unsigned int *)(v47 + 168);
        if (!v49) {
          goto LABEL_212;
        }
        LODWORD(v50) = (v49 - 1) & (v32 ^ (v16 >> 9));
        uint64_t v51 = (uint64_t ****)(v48 + 16 * v50);
        uint64_t v52 = *v51;
        if (*v51 != v16)
        {
          int v53 = 1;
          while (v52 != (uint64_t ***)-4096)
          {
            int v54 = v50 + v53++;
            uint64_t v50 = v54 & (v49 - 1);
            uint64_t v52 = *(uint64_t ****)(v48 + 16 * v50);
            if (v52 == v16)
            {
              uint64_t v51 = (uint64_t ****)(v48 + 16 * v50);
              goto LABEL_213;
            }
          }
LABEL_212:
          uint64_t v51 = (uint64_t ****)(v48 + 16 * v49);
        }
LABEL_213:
        uint64_t v212 = v51[1];
        size_t v214 = (size_t)*v212;
        uint64_t result = (char *)(v212 + 2);
        size_t v213 = v214;
        goto LABEL_214;
      }
      size_t v213 = 0;
      uint64_t result = &byte_1CFBCE98E;
LABEL_214:
      uint64_t v215 = *(uint64_t ****)(*v850 + 40);
      if ((*((unsigned char *)v215 + 23) & 0x10) != 0)
      {
        uint64_t v216 = ***v215;
        uint64_t v217 = *(void *)(v216 + 152);
        uint64_t v218 = *(unsigned int *)(v216 + 168);
        if (!v218) {
          goto LABEL_221;
        }
        LODWORD(v219) = (v218 - 1) & ((v215 >> 4) ^ (v215 >> 9));
        uint64_t v220 = (uint64_t ****)(v217 + 16 * v219);
        uint64_t v221 = *v220;
        if (*v220 != v215)
        {
          int v222 = 1;
          while (v221 != (uint64_t ***)-4096)
          {
            int v223 = v219 + v222++;
            uint64_t v219 = v223 & (v218 - 1);
            uint64_t v221 = *(uint64_t ****)(v217 + 16 * v219);
            if (v221 == v215)
            {
              uint64_t v220 = (uint64_t ****)(v217 + 16 * v219);
              goto LABEL_222;
            }
          }
LABEL_221:
          uint64_t v220 = (uint64_t ****)(v217 + 16 * v218);
        }
LABEL_222:
        uint64_t v224 = v220[1];
        size_t v227 = (size_t)*v224;
        uint64_t v225 = (char *)(v224 + 2);
        size_t v226 = v227;
        goto LABEL_223;
      }
      size_t v226 = 0;
      uint64_t v225 = &byte_1CFBCE98E;
LABEL_223:
      if (v226 >= v213) {
        size_t v228 = v213;
      }
      else {
        size_t v228 = v226;
      }
      if (v228)
      {
        uint64_t result = (char *)memcmp(result, v225, v228);
        if (result)
        {
          if ((result & 0x80000000) == 0) {
            goto LABEL_229;
          }
          goto LABEL_264;
        }
      }
      if (v213 >= v226)
      {
LABEL_229:
        uint64_t v8 = v9;
        while (1)
        {
          if (++v8 >= v854) {
            goto LABEL_297;
          }
          if (v17) {
            break;
          }
          size_t v238 = 0;
          uint64_t result = &byte_1CFBCE98E;
LABEL_240:
          uint64_t v240 = *(uint64_t ****)(*v8 + 40);
          if ((*((unsigned char *)v240 + 23) & 0x10) == 0)
          {
            size_t v251 = 0;
            uint64_t v250 = &byte_1CFBCE98E;
            goto LABEL_249;
          }
          uint64_t v241 = ***v240;
          uint64_t v242 = *(void *)(v241 + 152);
          uint64_t v243 = *(unsigned int *)(v241 + 168);
          if (!v243) {
            goto LABEL_247;
          }
          LODWORD(v244) = (v243 - 1) & ((v240 >> 4) ^ (v240 >> 9));
          unint64_t v245 = (uint64_t ****)(v242 + 16 * v244);
          uint64_t v246 = *v245;
          if (*v245 != v240)
          {
            int v247 = 1;
            while (v246 != (uint64_t ***)-4096)
            {
              int v248 = v244 + v247++;
              uint64_t v244 = v248 & (v243 - 1);
              uint64_t v246 = *(uint64_t ****)(v242 + 16 * v244);
              if (v246 == v240)
              {
                unint64_t v245 = (uint64_t ****)(v242 + 16 * v244);
                goto LABEL_248;
              }
            }
LABEL_247:
            unint64_t v245 = (uint64_t ****)(v242 + 16 * v243);
          }
LABEL_248:
          long long v249 = v245[1];
          size_t v252 = (size_t)*v249;
          uint64_t v250 = (char *)(v249 + 2);
          size_t v251 = v252;
LABEL_249:
          if (v251 >= v238) {
            size_t v253 = v238;
          }
          else {
            size_t v253 = v251;
          }
          if (v253 && (uint64_t result = (char *)memcmp(result, v250, v253), result))
          {
            int v254 = ((int)result >> 31) | 1;
          }
          else if (v238 == v251)
          {
            int v254 = 0;
          }
          else
          {
            if (v238 < v251) {
              goto LABEL_297;
            }
            int v254 = 1;
          }
          if (v254 == -1) {
            goto LABEL_297;
          }
        }
        uint64_t v229 = ***v16;
        uint64_t v230 = *(void *)(v229 + 152);
        uint64_t v231 = *(unsigned int *)(v229 + 168);
        if (v231)
        {
          LODWORD(v232) = (v231 - 1) & (v32 ^ (v16 >> 9));
          uint64_t v233 = (uint64_t ****)(v230 + 16 * v232);
          uint64_t v234 = *v233;
          if (*v233 != v16)
          {
            int v235 = 1;
            while (v234 != (uint64_t ***)-4096)
            {
              int v236 = v232 + v235++;
              uint64_t v232 = v236 & (v231 - 1);
              uint64_t v234 = *(uint64_t ****)(v230 + 16 * v232);
              if (v234 == v16)
              {
                uint64_t v233 = (uint64_t ****)(v230 + 16 * v232);
                goto LABEL_239;
              }
            }
            goto LABEL_238;
          }
        }
        else
        {
LABEL_238:
          uint64_t v233 = (uint64_t ****)(v230 + 16 * v231);
        }
LABEL_239:
        unint64_t v237 = v233[1];
        size_t v239 = (size_t)*v237;
        uint64_t result = (char *)(v237 + 2);
        size_t v238 = v239;
        goto LABEL_240;
      }
LABEL_264:
      uint64_t v8 = v9;
      do
      {
        if (v17)
        {
          uint64_t v255 = ***v16;
          uint64_t v256 = *(void *)(v255 + 152);
          uint64_t v257 = *(unsigned int *)(v255 + 168);
          if (!v257) {
            goto LABEL_272;
          }
          LODWORD(v258) = (v257 - 1) & (v32 ^ (v16 >> 9));
          v259 = (uint64_t ****)(v256 + 16 * v258);
          char v260 = *v259;
          if (*v259 != v16)
          {
            int v261 = 1;
            while (v260 != (uint64_t ***)-4096)
            {
              int v262 = v258 + v261++;
              uint64_t v258 = v262 & (v257 - 1);
              char v260 = *(uint64_t ****)(v256 + 16 * v258);
              if (v260 == v16)
              {
                v259 = (uint64_t ****)(v256 + 16 * v258);
                goto LABEL_273;
              }
            }
LABEL_272:
            v259 = (uint64_t ****)(v256 + 16 * v257);
          }
LABEL_273:
          uint64_t v263 = v259[1];
          size_t v265 = (size_t)*v263;
          uint64_t result = (char *)(v263 + 2);
          size_t v264 = v265;
          goto LABEL_274;
        }
        size_t v264 = 0;
        uint64_t result = &byte_1CFBCE98E;
LABEL_274:
        uint64_t v266 = v8[1];
        ++v8;
        uint64_t v267 = *(uint64_t ****)(v266 + 40);
        if ((*((unsigned char *)v267 + 23) & 0x10) != 0)
        {
          uint64_t v268 = ***v267;
          uint64_t v269 = *(void *)(v268 + 152);
          uint64_t v270 = *(unsigned int *)(v268 + 168);
          if (!v270) {
            goto LABEL_281;
          }
          LODWORD(v271) = (v270 - 1) & ((v267 >> 4) ^ (v267 >> 9));
          char v272 = (uint64_t ****)(v269 + 16 * v271);
          unint64_t v273 = *v272;
          if (*v272 != v267)
          {
            int v274 = 1;
            while (v273 != (uint64_t ***)-4096)
            {
              int v275 = v271 + v274++;
              uint64_t v271 = v275 & (v270 - 1);
              unint64_t v273 = *(uint64_t ****)(v269 + 16 * v271);
              if (v273 == v267)
              {
                char v272 = (uint64_t ****)(v269 + 16 * v271);
                goto LABEL_282;
              }
            }
LABEL_281:
            char v272 = (uint64_t ****)(v269 + 16 * v270);
          }
LABEL_282:
          uint64_t v276 = v272[1];
          size_t v279 = (size_t)*v276;
          unsigned int v277 = (char *)(v276 + 2);
          size_t v278 = v279;
          goto LABEL_283;
        }
        size_t v278 = 0;
        unsigned int v277 = &byte_1CFBCE98E;
LABEL_283:
        if (v278 >= v264) {
          size_t v280 = v264;
        }
        else {
          size_t v280 = v278;
        }
        if (v280 && (uint64_t result = (char *)memcmp(result, v277, v280), result))
        {
          int v281 = ((int)result >> 31) | 1;
        }
        else if (v264 == v278)
        {
          int v281 = 0;
        }
        else
        {
          if (v264 < v278) {
            break;
          }
          int v281 = 1;
        }
      }
      while (v281 != -1);
LABEL_297:
      unint64_t v282 = v854;
      if (v8 < v854)
      {
        unsigned int v283 = v32 ^ (v16 >> 9);
        unint64_t v282 = v854;
        while (!v17)
        {
          size_t v293 = 0;
          uint64_t result = &byte_1CFBCE98E;
LABEL_308:
          uint64_t v295 = *--v282;
          unsigned int v296 = *(uint64_t ****)(v295 + 40);
          if ((*((unsigned char *)v296 + 23) & 0x10) == 0)
          {
            size_t v307 = 0;
            uint64_t v306 = &byte_1CFBCE98E;
            goto LABEL_317;
          }
          uint64_t v297 = ***v296;
          uint64_t v298 = *(void *)(v297 + 152);
          uint64_t v299 = *(unsigned int *)(v297 + 168);
          if (!v299) {
            goto LABEL_315;
          }
          LODWORD(v300) = (v299 - 1) & ((v296 >> 4) ^ (v296 >> 9));
          uint64_t v301 = (uint64_t ****)(v298 + 16 * v300);
          unint64_t v302 = *v301;
          if (*v301 != v296)
          {
            int v303 = 1;
            while (v302 != (uint64_t ***)-4096)
            {
              int v304 = v300 + v303++;
              uint64_t v300 = v304 & (v299 - 1);
              unint64_t v302 = *(uint64_t ****)(v298 + 16 * v300);
              if (v302 == v296)
              {
                uint64_t v301 = (uint64_t ****)(v298 + 16 * v300);
                goto LABEL_316;
              }
            }
LABEL_315:
            uint64_t v301 = (uint64_t ****)(v298 + 16 * v299);
          }
LABEL_316:
          unint64_t v305 = v301[1];
          size_t v308 = (size_t)*v305;
          uint64_t v306 = (char *)(v305 + 2);
          size_t v307 = v308;
LABEL_317:
          if (v307 >= v293) {
            size_t v309 = v293;
          }
          else {
            size_t v309 = v307;
          }
          if (v309 && (uint64_t result = (char *)memcmp(result, v306, v309), result))
          {
            int v310 = ((int)result >> 31) | 1;
          }
          else
          {
            if (v293 >= v307) {
              goto LABEL_329;
            }
            int v310 = -1;
          }
          if (v310 != -1) {
            goto LABEL_329;
          }
        }
        uint64_t v284 = ***v16;
        uint64_t v285 = *(void *)(v284 + 152);
        uint64_t v286 = *(unsigned int *)(v284 + 168);
        if (v286)
        {
          LODWORD(v287) = (v286 - 1) & v283;
          unint64_t v288 = (uint64_t ****)(v285 + 16 * v287);
          unsigned int v289 = *v288;
          if (*v288 != v16)
          {
            int v290 = 1;
            while (v289 != (uint64_t ***)-4096)
            {
              int v291 = v287 + v290++;
              uint64_t v287 = v291 & (v286 - 1);
              unsigned int v289 = *(uint64_t ****)(v285 + 16 * v287);
              if (v289 == v16)
              {
                unint64_t v288 = (uint64_t ****)(v285 + 16 * v287);
                goto LABEL_307;
              }
            }
            goto LABEL_306;
          }
        }
        else
        {
LABEL_306:
          unint64_t v288 = (uint64_t ****)(v285 + 16 * v286);
        }
LABEL_307:
        unint64_t v292 = v288[1];
        size_t v294 = (size_t)*v292;
        uint64_t result = (char *)(v292 + 2);
        size_t v293 = v294;
        goto LABEL_308;
      }
LABEL_329:
      if (v8 >= v282) {
        goto LABEL_394;
      }
      uint64_t v311 = *v8;
      uint64_t v312 = *v282;
      while (2)
      {
        *uint64_t v8 = v312;
        *unint64_t v282 = v311;
        v313 = *(uint64_t ****)(v15 + 40);
        int v314 = *((_DWORD *)v313 + 5);
        unsigned int v315 = (v313 >> 4) ^ (v313 >> 9);
        while (2)
        {
          uint64_t v316 = v8[1];
          ++v8;
          uint64_t v311 = v316;
          if ((v314 & 0x10000000) != 0)
          {
            uint64_t v317 = ***v313;
            uint64_t v318 = *(void *)(v317 + 152);
            uint64_t v319 = *(unsigned int *)(v317 + 168);
            if (!v319) {
              goto LABEL_339;
            }
            LODWORD(v320) = (v319 - 1) & v315;
            unsigned int v321 = (uint64_t ****)(v318 + 16 * v320);
            uint64_t v322 = *v321;
            if (*v321 != v313)
            {
              int v323 = 1;
              while (v322 != (uint64_t ***)-4096)
              {
                int v324 = v320 + v323++;
                uint64_t v320 = v324 & (v319 - 1);
                uint64_t v322 = *(uint64_t ****)(v318 + 16 * v320);
                if (v322 == v313)
                {
                  unsigned int v321 = (uint64_t ****)(v318 + 16 * v320);
                  goto LABEL_340;
                }
              }
LABEL_339:
              unsigned int v321 = (uint64_t ****)(v318 + 16 * v319);
            }
LABEL_340:
            uint64_t v325 = v321[1];
            size_t v328 = (size_t)*v325;
            v326 = (char *)(v325 + 2);
            size_t v327 = v328;
          }
          else
          {
            size_t v327 = 0;
            v326 = &byte_1CFBCE98E;
          }
          uint64_t v329 = *(uint64_t ****)(v311 + 40);
          if ((*((unsigned char *)v329 + 23) & 0x10) != 0)
          {
            uint64_t v330 = ***v329;
            uint64_t v331 = *(void *)(v330 + 152);
            uint64_t v332 = *(unsigned int *)(v330 + 168);
            if (!v332) {
              goto LABEL_348;
            }
            LODWORD(v333) = (v332 - 1) & ((v329 >> 4) ^ (v329 >> 9));
            unint64_t v334 = (uint64_t ****)(v331 + 16 * v333);
            uint64_t v335 = *v334;
            if (*v334 != v329)
            {
              int v336 = 1;
              while (v335 != (uint64_t ***)-4096)
              {
                int v337 = v333 + v336++;
                uint64_t v333 = v337 & (v332 - 1);
                uint64_t v335 = *(uint64_t ****)(v331 + 16 * v333);
                if (v335 == v329)
                {
                  unint64_t v334 = (uint64_t ****)(v331 + 16 * v333);
                  goto LABEL_349;
                }
              }
LABEL_348:
              unint64_t v334 = (uint64_t ****)(v331 + 16 * v332);
            }
LABEL_349:
            unint64_t v338 = v334[1];
            size_t v341 = (size_t)*v338;
            unint64_t v339 = (char *)(v338 + 2);
            size_t v340 = v341;
          }
          else
          {
            size_t v340 = 0;
            unint64_t v339 = &byte_1CFBCE98E;
          }
          if (v340 >= v327) {
            size_t v342 = v327;
          }
          else {
            size_t v342 = v340;
          }
          if (v342 && (int v343 = memcmp(v326, v339, v342)) != 0)
          {
            int v344 = (v343 >> 31) | 1;
          }
          else if (v327 == v340)
          {
            int v344 = 0;
          }
          else
          {
            if (v327 < v340) {
              break;
            }
            int v344 = 1;
          }
          if (v344 != -1) {
            continue;
          }
          break;
        }
        while (2)
        {
          uint64_t v348 = *--v282;
          uint64_t v312 = v348;
          if ((v314 & 0x10000000) != 0)
          {
            uint64_t v349 = ***v313;
            uint64_t v350 = *(void *)(v349 + 152);
            uint64_t v351 = *(unsigned int *)(v349 + 168);
            if (!v351) {
              goto LABEL_373;
            }
            LODWORD(v352) = (v351 - 1) & v315;
            unint64_t v353 = (uint64_t ****)(v350 + 16 * v352);
            unint64_t v354 = *v353;
            if (*v353 != v313)
            {
              int v355 = 1;
              while (v354 != (uint64_t ***)-4096)
              {
                int v356 = v352 + v355++;
                uint64_t v352 = v356 & (v351 - 1);
                unint64_t v354 = *(uint64_t ****)(v350 + 16 * v352);
                if (v354 == v313)
                {
                  unint64_t v353 = (uint64_t ****)(v350 + 16 * v352);
                  goto LABEL_374;
                }
              }
LABEL_373:
              unint64_t v353 = (uint64_t ****)(v350 + 16 * v351);
            }
LABEL_374:
            v357 = v353[1];
            size_t v358 = (size_t)*v357;
            uint64_t result = (char *)(v357 + 2);
            size_t v345 = v358;
          }
          else
          {
            size_t v345 = 0;
            uint64_t result = &byte_1CFBCE98E;
          }
          uint64_t v359 = *(uint64_t ****)(v312 + 40);
          if ((*((unsigned char *)v359 + 23) & 0x10) != 0)
          {
            uint64_t v360 = ***v359;
            uint64_t v361 = *(void *)(v360 + 152);
            uint64_t v362 = *(unsigned int *)(v360 + 168);
            if (!v362) {
              goto LABEL_382;
            }
            LODWORD(v363) = (v362 - 1) & ((v359 >> 4) ^ (v359 >> 9));
            unsigned int v364 = (uint64_t ****)(v361 + 16 * v363);
            uint64_t v365 = *v364;
            if (*v364 != v359)
            {
              int v366 = 1;
              while (v365 != (uint64_t ***)-4096)
              {
                int v367 = v363 + v366++;
                uint64_t v363 = v367 & (v362 - 1);
                uint64_t v365 = *(uint64_t ****)(v361 + 16 * v363);
                if (v365 == v359)
                {
                  unsigned int v364 = (uint64_t ****)(v361 + 16 * v363);
                  goto LABEL_383;
                }
              }
LABEL_382:
              unsigned int v364 = (uint64_t ****)(v361 + 16 * v362);
            }
LABEL_383:
            uint64_t v368 = v364[1];
            size_t v369 = (size_t)*v368;
            uint64_t v347 = (char *)(v368 + 2);
            size_t v346 = v369;
          }
          else
          {
            size_t v346 = 0;
            uint64_t v347 = &byte_1CFBCE98E;
          }
          if (v346 >= v345) {
            size_t v370 = v345;
          }
          else {
            size_t v370 = v346;
          }
          if (v370 && (uint64_t result = (char *)memcmp(result, v347, v370), result))
          {
            int v371 = ((int)result >> 31) | 1;
          }
          else
          {
            if (v345 >= v346) {
              break;
            }
            int v371 = -1;
          }
          if (v371 == -1) {
            continue;
          }
          break;
        }
        if (v8 < v282) {
          continue;
        }
        break;
      }
LABEL_394:
      unsigned int v372 = v8 - 1;
      BOOL v4 = v8 - 1 >= v855;
      BOOL v5 = v8 - 1 == v855;
      if (v8 - 1 != v855) {
        uint64_t *v855 = *v372;
      }
      a4 = 0;
      *unsigned int v372 = v15;
      a3 = v853;
    }
  }
  uint64_t v397 = v9 + 1;
  BOOL v399 = v9 == v854 || v397 == v854;
  if ((a4 & 1) == 0)
  {
    if (v399) {
      return result;
    }
    while (1)
    {
      uint64_t v675 = v9;
      uint64_t v9 = v397;
      uint64_t v676 = v675[1];
      uint64_t v677 = *(uint64_t ****)(v676 + 40);
      if ((*((unsigned char *)v677 + 23) & 0x10) != 0)
      {
        uint64_t v678 = ***v677;
        uint64_t v679 = *(void *)(v678 + 152);
        uint64_t v680 = *(unsigned int *)(v678 + 168);
        if (v680)
        {
          LODWORD(v681) = (v680 - 1) & ((v677 >> 4) ^ (v677 >> 9));
          uint64_t v682 = (uint64_t ****)(v679 + 16 * v681);
          uint64_t v683 = *v682;
          if (*v682 != v677)
          {
            int v684 = 1;
            do
            {
              if (v683 == (uint64_t ***)-4096) {
                goto LABEL_747;
              }
              int v685 = v681 + v684++;
              uint64_t v681 = v685 & (v680 - 1);
              uint64_t v683 = *(uint64_t ****)(v679 + 16 * v681);
            }
            while (v683 != v677);
            uint64_t v682 = (uint64_t ****)(v679 + 16 * v681);
          }
        }
        else
        {
LABEL_747:
          uint64_t v682 = (uint64_t ****)(v679 + 16 * v680);
        }
        uint64_t v686 = v682[1];
        size_t v688 = (size_t)*v686;
        uint64_t result = (char *)(v686 + 2);
        size_t v687 = v688;
      }
      else
      {
        size_t v687 = 0;
        uint64_t result = &byte_1CFBCE98E;
      }
      uint64_t v689 = *v675;
      unsigned int v690 = *(uint64_t ****)(*v675 + 40);
      if ((*((unsigned char *)v690 + 23) & 0x10) != 0)
      {
        uint64_t v691 = ***v690;
        uint64_t v692 = *(void *)(v691 + 152);
        uint64_t v693 = *(unsigned int *)(v691 + 168);
        if (v693)
        {
          LODWORD(v694) = (v693 - 1) & ((v690 >> 4) ^ (v690 >> 9));
          unsigned int v695 = (uint64_t ****)(v692 + 16 * v694);
          v696 = *v695;
          if (*v695 != v690)
          {
            int v697 = 1;
            do
            {
              if (v696 == (uint64_t ***)-4096) {
                goto LABEL_756;
              }
              int v698 = v694 + v697++;
              uint64_t v694 = v698 & (v693 - 1);
              v696 = *(uint64_t ****)(v692 + 16 * v694);
            }
            while (v696 != v690);
            unsigned int v695 = (uint64_t ****)(v692 + 16 * v694);
          }
        }
        else
        {
LABEL_756:
          unsigned int v695 = (uint64_t ****)(v692 + 16 * v693);
        }
        unint64_t v699 = v695[1];
        size_t v702 = (size_t)*v699;
        unint64_t v700 = (char *)(v699 + 2);
        size_t v701 = v702;
      }
      else
      {
        size_t v701 = 0;
        unint64_t v700 = &byte_1CFBCE98E;
      }
      if (v701 >= v687) {
        size_t v703 = v687;
      }
      else {
        size_t v703 = v701;
      }
      if (v703 && (uint64_t result = (char *)memcmp(result, v700, v703), result))
      {
        if ((result & 0x80000000) == 0) {
          goto LABEL_798;
        }
      }
      else if (v687 >= v701)
      {
        goto LABEL_798;
      }
      unsigned int v704 = v9;
      do
      {
        *unsigned int v704 = v689;
        unsigned int v704 = v675;
        uint64_t v705 = *(uint64_t ****)(v676 + 40);
        if ((*((unsigned char *)v705 + 23) & 0x10) != 0)
        {
          uint64_t v706 = ***v705;
          uint64_t v707 = *(void *)(v706 + 152);
          uint64_t v708 = *(unsigned int *)(v706 + 168);
          if (v708)
          {
            LODWORD(v709) = (v708 - 1) & ((v705 >> 4) ^ (v705 >> 9));
            unint64_t v710 = (uint64_t ****)(v707 + 16 * v709);
            unint64_t v711 = *v710;
            if (*v710 != v705)
            {
              int v712 = 1;
              do
              {
                if (v711 == (uint64_t ***)-4096) {
                  goto LABEL_774;
                }
                int v713 = v709 + v712++;
                uint64_t v709 = v713 & (v708 - 1);
                unint64_t v711 = *(uint64_t ****)(v707 + 16 * v709);
              }
              while (v711 != v705);
              unint64_t v710 = (uint64_t ****)(v707 + 16 * v709);
            }
          }
          else
          {
LABEL_774:
            unint64_t v710 = (uint64_t ****)(v707 + 16 * v708);
          }
          unint64_t v714 = v710[1];
          size_t v716 = (size_t)*v714;
          uint64_t result = (char *)(v714 + 2);
          size_t v715 = v716;
        }
        else
        {
          size_t v715 = 0;
          uint64_t result = &byte_1CFBCE98E;
        }
        --v675;
        uint64_t v689 = *(v704 - 1);
        unint64_t v717 = *(uint64_t ****)(v689 + 40);
        if ((*((unsigned char *)v717 + 23) & 0x10) != 0)
        {
          uint64_t v718 = ***v717;
          uint64_t v719 = *(void *)(v718 + 152);
          uint64_t v720 = *(unsigned int *)(v718 + 168);
          if (v720)
          {
            LODWORD(v721) = (v720 - 1) & ((v717 >> 4) ^ (v717 >> 9));
            unint64_t v722 = (uint64_t ****)(v719 + 16 * v721);
            unint64_t v723 = *v722;
            if (*v722 != v717)
            {
              int v724 = 1;
              do
              {
                if (v723 == (uint64_t ***)-4096) {
                  goto LABEL_783;
                }
                int v725 = v721 + v724++;
                uint64_t v721 = v725 & (v720 - 1);
                unint64_t v723 = *(uint64_t ****)(v719 + 16 * v721);
              }
              while (v723 != v717);
              unint64_t v722 = (uint64_t ****)(v719 + 16 * v721);
            }
          }
          else
          {
LABEL_783:
            unint64_t v722 = (uint64_t ****)(v719 + 16 * v720);
          }
          uint64_t v726 = v722[1];
          size_t v729 = (size_t)*v726;
          uint64_t v727 = (char *)(v726 + 2);
          size_t v728 = v729;
        }
        else
        {
          size_t v728 = 0;
          uint64_t v727 = &byte_1CFBCE98E;
        }
        if (v728 >= v715) {
          size_t v730 = v715;
        }
        else {
          size_t v730 = v728;
        }
        if (v730 && (uint64_t result = (char *)memcmp(result, v727, v730), result))
        {
          int v731 = ((int)result >> 31) | 1;
        }
        else
        {
          if (v715 >= v728) {
            break;
          }
          int v731 = -1;
        }
      }
      while (v731 == -1);
      *unsigned int v704 = v676;
LABEL_798:
      uint64_t v397 = v9 + 1;
      if (v9 + 1 == v854) {
        return result;
      }
    }
  }
  if (v399) {
    return result;
  }
  unsigned int v400 = v9;
  while (2)
  {
    v401 = v400;
    unsigned int v400 = v397;
    uint64_t v402 = v401[1];
    uint64_t v403 = *(uint64_t ****)(v402 + 40);
    if ((*((unsigned char *)v403 + 23) & 0x10) != 0)
    {
      uint64_t v404 = ***v403;
      uint64_t v405 = *(void *)(v404 + 152);
      uint64_t v406 = *(unsigned int *)(v404 + 168);
      if (!v406) {
        goto LABEL_439;
      }
      LODWORD(v407) = (v406 - 1) & ((v403 >> 4) ^ (v403 >> 9));
      unsigned int v408 = (uint64_t ****)(v405 + 16 * v407);
      unsigned int v409 = *v408;
      if (*v408 != v403)
      {
        int v410 = 1;
        while (v409 != (uint64_t ***)-4096)
        {
          int v411 = v407 + v410++;
          uint64_t v407 = v411 & (v406 - 1);
          unsigned int v409 = *(uint64_t ****)(v405 + 16 * v407);
          if (v409 == v403)
          {
            unsigned int v408 = (uint64_t ****)(v405 + 16 * v407);
            goto LABEL_440;
          }
        }
LABEL_439:
        unsigned int v408 = (uint64_t ****)(v405 + 16 * v406);
      }
LABEL_440:
      v412 = v408[1];
      size_t v414 = (size_t)*v412;
      uint64_t result = (char *)(v412 + 2);
      size_t v413 = v414;
    }
    else
    {
      size_t v413 = 0;
      uint64_t result = &byte_1CFBCE98E;
    }
    uint64_t v415 = *v401;
    uint64_t v416 = *(uint64_t ****)(*v401 + 40);
    if ((*((unsigned char *)v416 + 23) & 0x10) != 0)
    {
      uint64_t v417 = ***v416;
      uint64_t v418 = *(void *)(v417 + 152);
      uint64_t v419 = *(unsigned int *)(v417 + 168);
      if (!v419) {
        goto LABEL_448;
      }
      LODWORD(v420) = (v419 - 1) & ((v416 >> 4) ^ (v416 >> 9));
      unsigned int v421 = (uint64_t ****)(v418 + 16 * v420);
      unint64_t v422 = *v421;
      if (*v421 != v416)
      {
        int v423 = 1;
        while (v422 != (uint64_t ***)-4096)
        {
          int v424 = v420 + v423++;
          uint64_t v420 = v424 & (v419 - 1);
          unint64_t v422 = *(uint64_t ****)(v418 + 16 * v420);
          if (v422 == v416)
          {
            unsigned int v421 = (uint64_t ****)(v418 + 16 * v420);
            goto LABEL_449;
          }
        }
LABEL_448:
        unsigned int v421 = (uint64_t ****)(v418 + 16 * v419);
      }
LABEL_449:
      uint64_t v425 = v421[1];
      size_t v428 = (size_t)*v425;
      uint64_t v426 = (char *)(v425 + 2);
      size_t v427 = v428;
    }
    else
    {
      size_t v427 = 0;
      uint64_t v426 = &byte_1CFBCE98E;
    }
    if (v427 >= v413) {
      size_t v429 = v413;
    }
    else {
      size_t v429 = v427;
    }
    if (v429 && (uint64_t result = (char *)memcmp(result, v426, v429), result))
    {
      if ((result & 0x80000000) == 0) {
        goto LABEL_493;
      }
    }
    else if (v413 >= v427)
    {
      goto LABEL_493;
    }
    unsigned int v430 = v400;
    while (2)
    {
      *unsigned int v430 = v415;
      if (v401 == v9)
      {
        unsigned int v430 = v9;
        goto LABEL_492;
      }
      unsigned int v430 = v401;
      unint64_t v431 = *(uint64_t ****)(v402 + 40);
      if ((*((unsigned char *)v431 + 23) & 0x10) != 0)
      {
        uint64_t v432 = ***v431;
        uint64_t v433 = *(void *)(v432 + 152);
        uint64_t v434 = *(unsigned int *)(v432 + 168);
        if (!v434) {
          goto LABEL_467;
        }
        LODWORD(v435) = (v434 - 1) & ((v431 >> 4) ^ (v431 >> 9));
        unint64_t v436 = (uint64_t ****)(v433 + 16 * v435);
        uint64_t v437 = *v436;
        if (*v436 != v431)
        {
          int v438 = 1;
          while (v437 != (uint64_t ***)-4096)
          {
            int v439 = v435 + v438++;
            uint64_t v435 = v439 & (v434 - 1);
            uint64_t v437 = *(uint64_t ****)(v433 + 16 * v435);
            if (v437 == v431)
            {
              unint64_t v436 = (uint64_t ****)(v433 + 16 * v435);
              goto LABEL_468;
            }
          }
LABEL_467:
          unint64_t v436 = (uint64_t ****)(v433 + 16 * v434);
        }
LABEL_468:
        uint64_t v440 = v436[1];
        size_t v442 = (size_t)*v440;
        uint64_t result = (char *)(v440 + 2);
        size_t v441 = v442;
      }
      else
      {
        size_t v441 = 0;
        uint64_t result = &byte_1CFBCE98E;
      }
      --v401;
      uint64_t v415 = *(v430 - 1);
      unint64_t v443 = *(uint64_t ****)(v415 + 40);
      if ((*((unsigned char *)v443 + 23) & 0x10) != 0)
      {
        uint64_t v444 = ***v443;
        uint64_t v445 = *(void *)(v444 + 152);
        uint64_t v446 = *(unsigned int *)(v444 + 168);
        if (!v446) {
          goto LABEL_476;
        }
        LODWORD(v447) = (v446 - 1) & ((v443 >> 4) ^ (v443 >> 9));
        unsigned int v448 = (uint64_t ****)(v445 + 16 * v447);
        uint64_t v449 = *v448;
        if (*v448 != v443)
        {
          int v450 = 1;
          while (v449 != (uint64_t ***)-4096)
          {
            int v451 = v447 + v450++;
            uint64_t v447 = v451 & (v446 - 1);
            uint64_t v449 = *(uint64_t ****)(v445 + 16 * v447);
            if (v449 == v443)
            {
              unsigned int v448 = (uint64_t ****)(v445 + 16 * v447);
              goto LABEL_477;
            }
          }
LABEL_476:
          unsigned int v448 = (uint64_t ****)(v445 + 16 * v446);
        }
LABEL_477:
        uint64_t v452 = v448[1];
        size_t v455 = (size_t)*v452;
        unint64_t v453 = (char *)(v452 + 2);
        size_t v454 = v455;
      }
      else
      {
        size_t v454 = 0;
        unint64_t v453 = &byte_1CFBCE98E;
      }
      if (v454 >= v441) {
        size_t v456 = v441;
      }
      else {
        size_t v456 = v454;
      }
      if (v456)
      {
        uint64_t result = (char *)memcmp(result, v453, v456);
        if (result)
        {
          int v457 = ((int)result >> 31) | 1;
          goto LABEL_486;
        }
      }
      if (v441 < v454)
      {
        int v457 = -1;
LABEL_486:
        uint64_t v9 = v855;
        if (v457 != -1) {
          goto LABEL_492;
        }
        continue;
      }
      break;
    }
    uint64_t v9 = v855;
LABEL_492:
    *unsigned int v430 = v402;
LABEL_493:
    uint64_t v397 = v400 + 1;
    if (v400 + 1 != v854) {
      continue;
    }
    return result;
  }
}

char *sub_1CCE6B3BC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v4 = a2;
  BOOL v5 = a1;
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  uint64_t v8 = *(uint64_t ****)(*a2 + 40);
  int v9 = *((_DWORD *)v8 + 5);
  unsigned int v10 = v8 >> 4;
  if ((v9 & 0x10000000) != 0)
  {
    uint64_t v11 = ***v8;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & (v10 ^ (v8 >> 9));
      uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v8)
      {
LABEL_9:
        uint64_t v19 = v15[1];
        size_t v22 = (size_t)*v19;
        uint64_t v20 = (char *)(v19 + 2);
        size_t v21 = v22;
        goto LABEL_10;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v8)
        {
          uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_9;
        }
      }
    }
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_9;
  }
  size_t v21 = 0;
  uint64_t v20 = &byte_1CFBCE98E;
LABEL_10:
  uint64_t v23 = *(uint64_t ****)(v7 + 40);
  if ((*((unsigned char *)v23 + 23) & 0x10) != 0)
  {
    uint64_t v24 = ***v23;
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(unsigned int *)(v24 + 168);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      BOOL v28 = (uint64_t ****)(v25 + 16 * v27);
      size_t v29 = *v28;
      if (*v28 == v23)
      {
LABEL_18:
        unsigned int v32 = v28[1];
        size_t v35 = (size_t)*v32;
        uint64_t v33 = (char *)(v32 + 2);
        size_t v34 = v35;
        goto LABEL_19;
      }
      int v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        size_t v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v23)
        {
          BOOL v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_18;
        }
      }
    }
    BOOL v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_18;
  }
  size_t v34 = 0;
  uint64_t v33 = &byte_1CFBCE98E;
LABEL_19:
  if (v34 >= v21) {
    size_t v36 = v21;
  }
  else {
    size_t v36 = v34;
  }
  if (v36)
  {
    int v37 = memcmp(v20, v33, v36);
    if (v37)
    {
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_25;
      }
LABEL_33:
      uint64_t v48 = *a3;
      uint64_t v49 = *(uint64_t ****)(*a3 + 40);
      if ((*((unsigned char *)v49 + 23) & 0x10) == 0)
      {
        size_t v85 = 0;
        uint64_t result = &byte_1CFBCE98E;
        if ((v9 & 0x10000000) != 0)
        {
LABEL_67:
          uint64_t v87 = ***v8;
          uint64_t v88 = *(void *)(v87 + 152);
          uint64_t v89 = *(unsigned int *)(v87 + 168);
          if (v89)
          {
            LODWORD(v90) = (v89 - 1) & (v10 ^ (v8 >> 9));
            uint64_t v91 = (uint64_t ****)(v88 + 16 * v90);
            uint64_t v92 = *v91;
            if (*v91 == v8)
            {
LABEL_74:
              int v95 = v91[1];
              size_t v98 = (size_t)*v95;
              uint64_t v96 = (char *)(v95 + 2);
              size_t v97 = v98;
              goto LABEL_75;
            }
            int v93 = 1;
            while (v92 != (uint64_t ***)-4096)
            {
              int v94 = v90 + v93++;
              uint64_t v90 = v94 & (v89 - 1);
              uint64_t v92 = *(uint64_t ****)(v88 + 16 * v90);
              if (v92 == v8)
              {
                uint64_t v91 = (uint64_t ****)(v88 + 16 * v90);
                goto LABEL_74;
              }
            }
          }
          uint64_t v91 = (uint64_t ****)(v88 + 16 * v89);
          goto LABEL_74;
        }
LABEL_135:
        size_t v97 = 0;
        uint64_t v96 = &byte_1CFBCE98E;
LABEL_75:
        if (v97 >= v85) {
          size_t v99 = v85;
        }
        else {
          size_t v99 = v97;
        }
        if (v99 && (uint64_t result = (char *)memcmp(result, v96, v99), result))
        {
          if ((result & 0x80000000) == 0) {
            goto LABEL_81;
          }
        }
        else if (v85 >= v97)
        {
LABEL_81:
          *BOOL v5 = v6;
          uint64_t *v4 = v7;
          uint64_t v48 = *a3;
          uint64_t v100 = *(uint64_t ****)(*a3 + 40);
          if ((*((unsigned char *)v100 + 23) & 0x10) == 0)
          {
            size_t v122 = 0;
            uint64_t result = &byte_1CFBCE98E;
LABEL_101:
            uint64_t v124 = *(uint64_t ****)(v7 + 40);
            if ((*((unsigned char *)v124 + 23) & 0x10) == 0)
            {
              size_t v140 = 0;
              int v139 = &byte_1CFBCE98E;
              goto LABEL_120;
            }
            uint64_t v125 = ***v124;
            uint64_t v126 = *(void *)(v125 + 152);
            uint64_t v127 = *(unsigned int *)(v125 + 168);
            if (v127)
            {
              LODWORD(v128) = (v127 - 1) & ((v124 >> 4) ^ (v124 >> 9));
              unsigned int v129 = (uint64_t ****)(v126 + 16 * v128);
              size_t v130 = *v129;
              if (*v129 == v124)
              {
LABEL_119:
                int v138 = v129[1];
                size_t v141 = (size_t)*v138;
                int v139 = (char *)(v138 + 2);
                size_t v140 = v141;
LABEL_120:
                if (v140 >= v122) {
                  size_t v142 = v122;
                }
                else {
                  size_t v142 = v140;
                }
                if (v142)
                {
                  uint64_t result = (char *)memcmp(result, v139, v142);
                  if (result)
                  {
                    BOOL v5 = v4;
                    BOOL v4 = a3;
                    goto LABEL_126;
                  }
                }
                BOOL v5 = v4;
                BOOL v4 = a3;
                if (v122 >= v140) {
                  return result;
                }
LABEL_116:
                *BOOL v5 = v48;
                uint64_t *v4 = v7;
                return result;
              }
              int v131 = 1;
              while (v130 != (uint64_t ***)-4096)
              {
                int v132 = v128 + v131++;
                uint64_t v128 = v132 & (v127 - 1);
                size_t v130 = *(uint64_t ****)(v126 + 16 * v128);
                if (v130 == v124)
                {
                  unsigned int v129 = (uint64_t ****)(v126 + 16 * v128);
                  goto LABEL_119;
                }
              }
            }
            unsigned int v129 = (uint64_t ****)(v126 + 16 * v127);
            goto LABEL_119;
          }
          uint64_t v101 = ***v100;
          uint64_t v102 = *(void *)(v101 + 152);
          uint64_t v103 = *(unsigned int *)(v101 + 168);
          if (v103)
          {
            LODWORD(v104) = (v103 - 1) & ((v100 >> 4) ^ (v100 >> 9));
            uint64_t v105 = (uint64_t ****)(v102 + 16 * v104);
            uint64_t v106 = *v105;
            if (*v105 == v100)
            {
LABEL_100:
              uint64_t v121 = v105[1];
              size_t v123 = (size_t)*v121;
              uint64_t result = (char *)(v121 + 2);
              size_t v122 = v123;
              goto LABEL_101;
            }
            int v107 = 1;
            while (v106 != (uint64_t ***)-4096)
            {
              int v108 = v104 + v107++;
              uint64_t v104 = v108 & (v103 - 1);
              uint64_t v106 = *(uint64_t ****)(v102 + 16 * v104);
              if (v106 == v100)
              {
                uint64_t v105 = (uint64_t ****)(v102 + 16 * v104);
                goto LABEL_100;
              }
            }
          }
          uint64_t v105 = (uint64_t ****)(v102 + 16 * v103);
          goto LABEL_100;
        }
        BOOL v4 = a3;
        goto LABEL_116;
      }
      uint64_t v50 = ***v49;
      uint64_t v51 = *(void *)(v50 + 152);
      uint64_t v52 = *(unsigned int *)(v50 + 168);
      if (v52)
      {
        LODWORD(v53) = (v52 - 1) & ((v49 >> 4) ^ (v49 >> 9));
        int v54 = (uint64_t ****)(v51 + 16 * v53);
        unsigned int v55 = *v54;
        if (*v54 == v49) {
          goto LABEL_66;
        }
        int v56 = 1;
        while (v55 != (uint64_t ***)-4096)
        {
          int v57 = v53 + v56++;
          uint64_t v53 = v57 & (v52 - 1);
          unsigned int v55 = *(uint64_t ****)(v51 + 16 * v53);
          if (v55 == v49)
          {
            int v54 = (uint64_t ****)(v51 + 16 * v53);
            goto LABEL_66;
          }
        }
      }
      int v54 = (uint64_t ****)(v51 + 16 * v52);
LABEL_66:
      size_t v84 = v54[1];
      size_t v86 = (size_t)*v84;
      uint64_t result = (char *)(v84 + 2);
      size_t v85 = v86;
      if ((v9 & 0x10000000) != 0) {
        goto LABEL_67;
      }
      goto LABEL_135;
    }
  }
  if (v21 < v34) {
    goto LABEL_33;
  }
LABEL_25:
  uint64_t v38 = *a3;
  int v39 = *(uint64_t ****)(*a3 + 40);
  if ((*((unsigned char *)v39 + 23) & 0x10) != 0)
  {
    uint64_t v40 = ***v39;
    uint64_t v41 = *(void *)(v40 + 152);
    uint64_t v42 = *(unsigned int *)(v40 + 168);
    if (v42)
    {
      LODWORD(v43) = (v42 - 1) & ((v39 >> 4) ^ (v39 >> 9));
      size_t v44 = (uint64_t ****)(v41 + 16 * v43);
      size_t v45 = *v44;
      if (*v44 == v39) {
        goto LABEL_41;
      }
      int v46 = 1;
      while (v45 != (uint64_t ***)-4096)
      {
        int v47 = v43 + v46++;
        uint64_t v43 = v47 & (v42 - 1);
        size_t v45 = *(uint64_t ****)(v41 + 16 * v43);
        if (v45 == v39)
        {
          size_t v44 = (uint64_t ****)(v41 + 16 * v43);
          goto LABEL_41;
        }
      }
    }
    size_t v44 = (uint64_t ****)(v41 + 16 * v42);
LABEL_41:
    uint64_t v58 = v44[1];
    size_t v61 = (size_t)*v58;
    uint64_t result = (char *)(v58 + 2);
    size_t v60 = v61;
    if ((v9 & 0x10000000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_133;
  }
  size_t v60 = 0;
  uint64_t result = &byte_1CFBCE98E;
  if ((v9 & 0x10000000) != 0)
  {
LABEL_42:
    uint64_t v62 = ***v8;
    uint64_t v63 = *(void *)(v62 + 152);
    uint64_t v64 = *(unsigned int *)(v62 + 168);
    if (v64)
    {
      LODWORD(v65) = (v64 - 1) & (v10 ^ (v8 >> 9));
      __int16 v66 = (uint64_t ****)(v63 + 16 * v65);
      int v67 = *v66;
      if (*v66 == v8)
      {
LABEL_49:
        unsigned int v70 = v66[1];
        size_t v73 = (size_t)*v70;
        size_t v71 = (char *)(v70 + 2);
        size_t v72 = v73;
        goto LABEL_50;
      }
      int v68 = 1;
      while (v67 != (uint64_t ***)-4096)
      {
        int v69 = v65 + v68++;
        uint64_t v65 = v69 & (v64 - 1);
        int v67 = *(uint64_t ****)(v63 + 16 * v65);
        if (v67 == v8)
        {
          __int16 v66 = (uint64_t ****)(v63 + 16 * v65);
          goto LABEL_49;
        }
      }
    }
    __int16 v66 = (uint64_t ****)(v63 + 16 * v64);
    goto LABEL_49;
  }
LABEL_133:
  size_t v72 = 0;
  size_t v71 = &byte_1CFBCE98E;
LABEL_50:
  if (v72 >= v60) {
    size_t v74 = v60;
  }
  else {
    size_t v74 = v72;
  }
  if (v74 && (uint64_t result = (char *)memcmp(result, v71, v74), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v60 >= v72)
  {
    return result;
  }
  uint64_t *v4 = v38;
  *a3 = v6;
  uint64_t v48 = *v4;
  uint64_t v7 = *v5;
  uint64_t v75 = *(uint64_t ****)(*v4 + 40);
  if ((*((unsigned char *)v75 + 23) & 0x10) != 0)
  {
    uint64_t v76 = ***v75;
    uint64_t v77 = *(void *)(v76 + 152);
    uint64_t v78 = *(unsigned int *)(v76 + 168);
    if (v78)
    {
      LODWORD(v79) = (v78 - 1) & ((v75 >> 4) ^ (v75 >> 9));
      int v80 = (uint64_t ****)(v77 + 16 * v79);
      uint64_t v81 = *v80;
      if (*v80 == v75)
      {
LABEL_91:
        int v109 = v80[1];
        size_t v111 = (size_t)*v109;
        uint64_t result = (char *)(v109 + 2);
        size_t v110 = v111;
        goto LABEL_92;
      }
      int v82 = 1;
      while (v81 != (uint64_t ***)-4096)
      {
        int v83 = v79 + v82++;
        uint64_t v79 = v83 & (v78 - 1);
        uint64_t v81 = *(uint64_t ****)(v77 + 16 * v79);
        if (v81 == v75)
        {
          int v80 = (uint64_t ****)(v77 + 16 * v79);
          goto LABEL_91;
        }
      }
    }
    int v80 = (uint64_t ****)(v77 + 16 * v78);
    goto LABEL_91;
  }
  size_t v110 = 0;
  uint64_t result = &byte_1CFBCE98E;
LABEL_92:
  unsigned int v112 = *(uint64_t ****)(v7 + 40);
  if ((*((unsigned char *)v112 + 23) & 0x10) != 0)
  {
    uint64_t v113 = ***v112;
    uint64_t v114 = *(void *)(v113 + 152);
    uint64_t v115 = *(unsigned int *)(v113 + 168);
    if (v115)
    {
      LODWORD(v116) = (v115 - 1) & ((v112 >> 4) ^ (v112 >> 9));
      int v117 = (uint64_t ****)(v114 + 16 * v116);
      uint64_t v118 = *v117;
      if (*v117 == v112)
      {
LABEL_109:
        uint64_t v133 = v117[1];
        size_t v136 = (size_t)*v133;
        uint64_t v134 = (char *)(v133 + 2);
        size_t v135 = v136;
        goto LABEL_110;
      }
      int v119 = 1;
      while (v118 != (uint64_t ***)-4096)
      {
        int v120 = v116 + v119++;
        uint64_t v116 = v120 & (v115 - 1);
        uint64_t v118 = *(uint64_t ****)(v114 + 16 * v116);
        if (v118 == v112)
        {
          int v117 = (uint64_t ****)(v114 + 16 * v116);
          goto LABEL_109;
        }
      }
    }
    int v117 = (uint64_t ****)(v114 + 16 * v115);
    goto LABEL_109;
  }
  size_t v135 = 0;
  uint64_t v134 = &byte_1CFBCE98E;
LABEL_110:
  if (v135 >= v110) {
    size_t v137 = v110;
  }
  else {
    size_t v137 = v135;
  }
  if (!v137 || (uint64_t result = (char *)memcmp(result, v134, v137), !result))
  {
    if (v110 >= v135) {
      return result;
    }
    goto LABEL_116;
  }
LABEL_126:
  if ((result & 0x80000000) != 0) {
    goto LABEL_116;
  }
  return result;
}

BOOL sub_1CCE6BA80(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      uint64_t v8 = *(uint64_t ****)(v6 + 40);
      if ((*((unsigned char *)v8 + 23) & 0x10) != 0)
      {
        uint64_t v9 = ***v8;
        uint64_t v10 = *(void *)(v9 + 152);
        uint64_t v11 = *(unsigned int *)(v9 + 168);
        if (v11)
        {
          LODWORD(v12) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
          uint64_t v13 = (uint64_t ****)(v10 + 16 * v12);
          uint64_t v14 = *v13;
          if (*v13 != v8)
          {
            int v15 = 1;
            do
            {
              if (v14 == (uint64_t ***)-4096) {
                goto LABEL_85;
              }
              int v16 = v12 + v15++;
              uint64_t v12 = v16 & (v11 - 1);
              uint64_t v14 = *(uint64_t ****)(v10 + 16 * v12);
            }
            while (v14 != v8);
            uint64_t v13 = (uint64_t ****)(v10 + 16 * v12);
          }
        }
        else
        {
LABEL_85:
          uint64_t v13 = (uint64_t ****)(v10 + 16 * v11);
        }
        int v93 = v13[1];
        size_t v96 = (size_t)*v93;
        int v94 = (char *)(v93 + 2);
        size_t v95 = v96;
      }
      else
      {
        size_t v95 = 0;
        int v94 = &byte_1CFBCE98E;
      }
      size_t v97 = *(uint64_t ****)(v7 + 40);
      if ((*((unsigned char *)v97 + 23) & 0x10) != 0)
      {
        uint64_t v98 = ***v97;
        uint64_t v99 = *(void *)(v98 + 152);
        uint64_t v100 = *(unsigned int *)(v98 + 168);
        if (v100)
        {
          LODWORD(v101) = (v100 - 1) & ((v97 >> 4) ^ (v97 >> 9));
          uint64_t v102 = (uint64_t ****)(v99 + 16 * v101);
          uint64_t v103 = *v102;
          if (*v102 != v97)
          {
            int v104 = 1;
            do
            {
              if (v103 == (uint64_t ***)-4096) {
                goto LABEL_103;
              }
              int v105 = v101 + v104++;
              uint64_t v101 = v105 & (v100 - 1);
              uint64_t v103 = *(uint64_t ****)(v99 + 16 * v101);
            }
            while (v103 != v97);
            uint64_t v102 = (uint64_t ****)(v99 + 16 * v101);
          }
        }
        else
        {
LABEL_103:
          uint64_t v102 = (uint64_t ****)(v99 + 16 * v100);
        }
        int v119 = v102[1];
        size_t v122 = (size_t)*v119;
        int v120 = (char *)(v119 + 2);
        size_t v121 = v122;
      }
      else
      {
        size_t v121 = 0;
        int v120 = &byte_1CFBCE98E;
      }
      if (v121 >= v95) {
        size_t v123 = v95;
      }
      else {
        size_t v123 = v121;
      }
      if (v123 && (int v124 = memcmp(v94, v120, v123)) != 0)
      {
        if ((v124 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v95 >= v121)
      {
        return 1;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return 1;
    case 3:
      sub_1CCE6B3BC(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CCE6C518(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      int v80 = a1 + 2;
      uint64_t v81 = a1 + 3;
      sub_1CCE6C518(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v82 = *(a2 - 1);
      uint64_t v83 = a1[3];
      size_t v84 = *(uint64_t ****)(v82 + 40);
      if ((*((unsigned char *)v84 + 23) & 0x10) != 0)
      {
        uint64_t v85 = ***v84;
        uint64_t v86 = *(void *)(v85 + 152);
        uint64_t v87 = *(unsigned int *)(v85 + 168);
        if (v87)
        {
          LODWORD(v88) = (v87 - 1) & ((v84 >> 4) ^ (v84 >> 9));
          uint64_t v89 = (uint64_t ****)(v86 + 16 * v88);
          uint64_t v90 = *v89;
          if (*v89 != v84)
          {
            int v91 = 1;
            do
            {
              if (v90 == (uint64_t ***)-4096) {
                goto LABEL_94;
              }
              int v92 = v88 + v91++;
              uint64_t v88 = v92 & (v87 - 1);
              uint64_t v90 = *(uint64_t ****)(v86 + 16 * v88);
            }
            while (v90 != v84);
            uint64_t v89 = (uint64_t ****)(v86 + 16 * v88);
          }
        }
        else
        {
LABEL_94:
          uint64_t v89 = (uint64_t ****)(v86 + 16 * v87);
        }
        uint64_t v106 = v89[1];
        size_t v109 = (size_t)*v106;
        int v107 = (char *)(v106 + 2);
        size_t v108 = v109;
        goto LABEL_96;
      }
      size_t v108 = 0;
      int v107 = &byte_1CFBCE98E;
LABEL_96:
      size_t v110 = *(uint64_t ****)(v83 + 40);
      if ((*((unsigned char *)v110 + 23) & 0x10) != 0)
      {
        uint64_t v111 = ***v110;
        uint64_t v112 = *(void *)(v111 + 152);
        uint64_t v113 = *(unsigned int *)(v111 + 168);
        if (v113)
        {
          LODWORD(v114) = (v113 - 1) & ((v110 >> 4) ^ (v110 >> 9));
          uint64_t v115 = (uint64_t ****)(v112 + 16 * v114);
          uint64_t v116 = *v115;
          if (*v115 != v110)
          {
            int v117 = 1;
            do
            {
              if (v116 == (uint64_t ***)-4096) {
                goto LABEL_114;
              }
              int v118 = v114 + v117++;
              uint64_t v114 = v118 & (v113 - 1);
              uint64_t v116 = *(uint64_t ****)(v112 + 16 * v114);
            }
            while (v116 != v110);
            uint64_t v115 = (uint64_t ****)(v112 + 16 * v114);
          }
        }
        else
        {
LABEL_114:
          uint64_t v115 = (uint64_t ****)(v112 + 16 * v113);
        }
        uint64_t v125 = v115[1];
        size_t v128 = (size_t)*v125;
        uint64_t v126 = (char *)(v125 + 2);
        size_t v127 = v128;
        goto LABEL_116;
      }
      size_t v127 = 0;
      uint64_t v126 = &byte_1CFBCE98E;
LABEL_116:
      if (v127 >= v108) {
        size_t v129 = v108;
      }
      else {
        size_t v129 = v127;
      }
      if (v129 && (int v130 = memcmp(v107, v126, v129)) != 0)
      {
        if ((v130 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v108 >= v127)
      {
        return 1;
      }
      uint64_t *v81 = v82;
      *(a2 - 1) = v83;
      uint64_t v131 = *v81;
      uint64_t v132 = *v80;
      uint64_t v133 = *(uint64_t ****)(*v81 + 40);
      if ((*((unsigned char *)v133 + 23) & 0x10) != 0)
      {
        uint64_t v134 = ***v133;
        uint64_t v135 = *(void *)(v134 + 152);
        uint64_t v136 = *(unsigned int *)(v134 + 168);
        if (v136)
        {
          LODWORD(v137) = (v136 - 1) & ((v133 >> 4) ^ (v133 >> 9));
          int v138 = (uint64_t ****)(v135 + 16 * v137);
          int v139 = *v138;
          if (*v138 != v133)
          {
            int v140 = 1;
            do
            {
              if (v139 == (uint64_t ***)-4096) {
                goto LABEL_131;
              }
              int v141 = v137 + v140++;
              uint64_t v137 = v141 & (v136 - 1);
              int v139 = *(uint64_t ****)(v135 + 16 * v137);
            }
            while (v139 != v133);
            int v138 = (uint64_t ****)(v135 + 16 * v137);
          }
        }
        else
        {
LABEL_131:
          int v138 = (uint64_t ****)(v135 + 16 * v136);
        }
        size_t v142 = v138[1];
        size_t v145 = (size_t)*v142;
        size_t v143 = (char *)(v142 + 2);
        size_t v144 = v145;
        goto LABEL_133;
      }
      size_t v144 = 0;
      size_t v143 = &byte_1CFBCE98E;
LABEL_133:
      int v146 = *(uint64_t ****)(v132 + 40);
      if ((*((unsigned char *)v146 + 23) & 0x10) != 0)
      {
        uint64_t v147 = ***v146;
        uint64_t v148 = *(void *)(v147 + 152);
        uint64_t v149 = *(unsigned int *)(v147 + 168);
        if (v149)
        {
          LODWORD(v150) = (v149 - 1) & ((v146 >> 4) ^ (v146 >> 9));
          unsigned int v151 = (uint64_t ****)(v148 + 16 * v150);
          uint64_t v152 = *v151;
          if (*v151 != v146)
          {
            int v153 = 1;
            do
            {
              if (v152 == (uint64_t ***)-4096) {
                goto LABEL_140;
              }
              int v154 = v150 + v153++;
              uint64_t v150 = v154 & (v149 - 1);
              uint64_t v152 = *(uint64_t ****)(v148 + 16 * v150);
            }
            while (v152 != v146);
            unsigned int v151 = (uint64_t ****)(v148 + 16 * v150);
          }
        }
        else
        {
LABEL_140:
          unsigned int v151 = (uint64_t ****)(v148 + 16 * v149);
        }
        uint64_t v155 = v151[1];
        size_t v158 = (size_t)*v155;
        uint64_t v156 = (char *)(v155 + 2);
        size_t v157 = v158;
        goto LABEL_142;
      }
      size_t v157 = 0;
      uint64_t v156 = &byte_1CFBCE98E;
LABEL_142:
      if (v157 >= v144) {
        size_t v159 = v144;
      }
      else {
        size_t v159 = v157;
      }
      if (v159 && (int v160 = memcmp(v143, v156, v159)) != 0)
      {
        if ((v160 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v144 >= v157)
      {
        return 1;
      }
      *int v80 = v131;
      uint64_t *v81 = v132;
      uint64_t v161 = a1[1];
      int v162 = *(uint64_t ****)(v131 + 40);
      if ((*((unsigned char *)v162 + 23) & 0x10) != 0)
      {
        uint64_t v163 = ***v162;
        uint64_t v164 = *(void *)(v163 + 152);
        uint64_t v165 = *(unsigned int *)(v163 + 168);
        if (v165)
        {
          LODWORD(v166) = (v165 - 1) & ((v162 >> 4) ^ (v162 >> 9));
          uint64_t v167 = (uint64_t ****)(v164 + 16 * v166);
          uint64_t v168 = *v167;
          if (*v167 != v162)
          {
            int v169 = 1;
            do
            {
              if (v168 == (uint64_t ***)-4096) {
                goto LABEL_157;
              }
              int v170 = v166 + v169++;
              uint64_t v166 = v170 & (v165 - 1);
              uint64_t v168 = *(uint64_t ****)(v164 + 16 * v166);
            }
            while (v168 != v162);
            uint64_t v167 = (uint64_t ****)(v164 + 16 * v166);
          }
        }
        else
        {
LABEL_157:
          uint64_t v167 = (uint64_t ****)(v164 + 16 * v165);
        }
        uint64_t v171 = v167[1];
        size_t v174 = (size_t)*v171;
        int v172 = (char *)(v171 + 2);
        size_t v173 = v174;
        goto LABEL_159;
      }
      size_t v173 = 0;
      int v172 = &byte_1CFBCE98E;
LABEL_159:
      unsigned int v175 = *(uint64_t ****)(v161 + 40);
      if ((*((unsigned char *)v175 + 23) & 0x10) != 0)
      {
        uint64_t v176 = ***v175;
        uint64_t v177 = *(void *)(v176 + 152);
        uint64_t v178 = *(unsigned int *)(v176 + 168);
        if (v178)
        {
          LODWORD(v179) = (v178 - 1) & ((v175 >> 4) ^ (v175 >> 9));
          int v180 = (uint64_t ****)(v177 + 16 * v179);
          size_t v181 = *v180;
          if (*v180 != v175)
          {
            int v182 = 1;
            do
            {
              if (v181 == (uint64_t ***)-4096) {
                goto LABEL_166;
              }
              int v183 = v179 + v182++;
              uint64_t v179 = v183 & (v178 - 1);
              size_t v181 = *(uint64_t ****)(v177 + 16 * v179);
            }
            while (v181 != v175);
            int v180 = (uint64_t ****)(v177 + 16 * v179);
          }
        }
        else
        {
LABEL_166:
          int v180 = (uint64_t ****)(v177 + 16 * v178);
        }
        uint64_t v184 = v180[1];
        size_t v187 = (size_t)*v184;
        uint64_t v185 = (char *)(v184 + 2);
        size_t v186 = v187;
        goto LABEL_168;
      }
      size_t v186 = 0;
      uint64_t v185 = &byte_1CFBCE98E;
LABEL_168:
      if (v186 >= v173) {
        size_t v188 = v173;
      }
      else {
        size_t v188 = v186;
      }
      if (v188 && (int v189 = memcmp(v172, v185, v188)) != 0)
      {
        if ((v189 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v173 >= v186)
      {
        return 1;
      }
      a1[1] = v131;
      a1[2] = v161;
      uint64_t v190 = *a1;
      uint64_t v191 = *(uint64_t ****)(v131 + 40);
      if ((*((unsigned char *)v191 + 23) & 0x10) != 0)
      {
        uint64_t v192 = ***v191;
        uint64_t v193 = *(void *)(v192 + 152);
        uint64_t v194 = *(unsigned int *)(v192 + 168);
        if (v194)
        {
          LODWORD(v195) = (v194 - 1) & ((v191 >> 4) ^ (v191 >> 9));
          size_t v196 = (uint64_t ****)(v193 + 16 * v195);
          uint64_t v197 = *v196;
          if (*v196 != v191)
          {
            int v198 = 1;
            do
            {
              if (v197 == (uint64_t ***)-4096) {
                goto LABEL_187;
              }
              int v199 = v195 + v198++;
              uint64_t v195 = v199 & (v194 - 1);
              uint64_t v197 = *(uint64_t ****)(v193 + 16 * v195);
            }
            while (v197 != v191);
            size_t v196 = (uint64_t ****)(v193 + 16 * v195);
          }
        }
        else
        {
LABEL_187:
          size_t v196 = (uint64_t ****)(v193 + 16 * v194);
        }
        uint64_t v200 = v196[1];
        size_t v203 = (size_t)*v200;
        uint64_t v201 = (char *)(v200 + 2);
        size_t v202 = v203;
        goto LABEL_189;
      }
      size_t v202 = 0;
      uint64_t v201 = &byte_1CFBCE98E;
LABEL_189:
      int v204 = *(uint64_t ****)(v190 + 40);
      if ((*((unsigned char *)v204 + 23) & 0x10) != 0)
      {
        uint64_t v205 = ***v204;
        uint64_t v206 = *(void *)(v205 + 152);
        uint64_t v207 = *(unsigned int *)(v205 + 168);
        if (v207)
        {
          LODWORD(v208) = (v207 - 1) & ((v204 >> 4) ^ (v204 >> 9));
          int v209 = (uint64_t ****)(v206 + 16 * v208);
          uint64_t v210 = *v209;
          if (*v209 != v204)
          {
            int v211 = 1;
            do
            {
              if (v210 == (uint64_t ***)-4096) {
                goto LABEL_196;
              }
              int v212 = v208 + v211++;
              uint64_t v208 = v212 & (v207 - 1);
              uint64_t v210 = *(uint64_t ****)(v206 + 16 * v208);
            }
            while (v210 != v204);
            int v209 = (uint64_t ****)(v206 + 16 * v208);
          }
        }
        else
        {
LABEL_196:
          int v209 = (uint64_t ****)(v206 + 16 * v207);
        }
        size_t v213 = v209[1];
        size_t v216 = (size_t)*v213;
        size_t v214 = (char *)(v213 + 2);
        size_t v215 = v216;
        goto LABEL_198;
      }
      size_t v215 = 0;
      size_t v214 = &byte_1CFBCE98E;
LABEL_198:
      if (v215 >= v202) {
        size_t v217 = v202;
      }
      else {
        size_t v217 = v215;
      }
      if (v217 && (int v218 = memcmp(v201, v214, v217)) != 0)
      {
        if ((v218 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v202 >= v215)
      {
        return 1;
      }
      *a1 = v131;
      a1[1] = v190;
      return 1;
    default:
      int v17 = a1 + 2;
      sub_1CCE6B3BC(a1, a1 + 1, a1 + 2);
      int v18 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v19 = 0;
      break;
  }
  do
  {
    uint64_t v20 = *v18;
    size_t v21 = *(uint64_t ****)(*v18 + 40);
    if ((*((unsigned char *)v21 + 23) & 0x10) != 0)
    {
      uint64_t v22 = ***v21;
      uint64_t v23 = *(void *)(v22 + 152);
      uint64_t v24 = *(unsigned int *)(v22 + 168);
      if (v24)
      {
        LODWORD(v25) = (v24 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        uint64_t v26 = (uint64_t ****)(v23 + 16 * v25);
        uint64_t v27 = *v26;
        if (*v26 == v21)
        {
LABEL_19:
          int v30 = v26[1];
          size_t v33 = (size_t)*v30;
          int v31 = (char *)(v30 + 2);
          size_t v32 = v33;
          goto LABEL_20;
        }
        int v28 = 1;
        while (v27 != (uint64_t ***)-4096)
        {
          int v29 = v25 + v28++;
          uint64_t v25 = v29 & (v24 - 1);
          uint64_t v27 = *(uint64_t ****)(v23 + 16 * v25);
          if (v27 == v21)
          {
            uint64_t v26 = (uint64_t ****)(v23 + 16 * v25);
            goto LABEL_19;
          }
        }
      }
      uint64_t v26 = (uint64_t ****)(v23 + 16 * v24);
      goto LABEL_19;
    }
    size_t v32 = 0;
    int v31 = &byte_1CFBCE98E;
LABEL_20:
    uint64_t v34 = *v17;
    size_t v35 = *(uint64_t ****)(*v17 + 40);
    if ((*((unsigned char *)v35 + 23) & 0x10) == 0)
    {
      size_t v46 = 0;
      size_t v45 = &byte_1CFBCE98E;
      goto LABEL_29;
    }
    uint64_t v36 = ***v35;
    uint64_t v37 = *(void *)(v36 + 152);
    uint64_t v38 = *(unsigned int *)(v36 + 168);
    if (!v38) {
      goto LABEL_27;
    }
    LODWORD(v39) = (v38 - 1) & ((v35 >> 4) ^ (v35 >> 9));
    uint64_t v40 = (uint64_t ****)(v37 + 16 * v39);
    uint64_t v41 = *v40;
    if (*v40 != v35)
    {
      int v42 = 1;
      while (v41 != (uint64_t ***)-4096)
      {
        int v43 = v39 + v42++;
        uint64_t v39 = v43 & (v38 - 1);
        uint64_t v41 = *(uint64_t ****)(v37 + 16 * v39);
        if (v41 == v35)
        {
          uint64_t v40 = (uint64_t ****)(v37 + 16 * v39);
          goto LABEL_28;
        }
      }
LABEL_27:
      uint64_t v40 = (uint64_t ****)(v37 + 16 * v38);
    }
LABEL_28:
    size_t v44 = v40[1];
    size_t v47 = (size_t)*v44;
    size_t v45 = (char *)(v44 + 2);
    size_t v46 = v47;
LABEL_29:
    if (v46 >= v32) {
      size_t v48 = v32;
    }
    else {
      size_t v48 = v46;
    }
    if (v48 && (int v49 = memcmp(v31, v45, v48)) != 0)
    {
      if ((v49 & 0x80000000) == 0) {
        goto LABEL_71;
      }
    }
    else if (v32 >= v46)
    {
      goto LABEL_71;
    }
    uint64_t v50 = v18;
    while (1)
    {
      *uint64_t v50 = v34;
      if (v17 == a1) {
        break;
      }
      uint64_t v50 = v17;
      uint64_t v51 = *(uint64_t ****)(v20 + 40);
      if ((*((unsigned char *)v51 + 23) & 0x10) != 0)
      {
        uint64_t v52 = ***v51;
        uint64_t v53 = *(void *)(v52 + 152);
        uint64_t v54 = *(unsigned int *)(v52 + 168);
        if (!v54) {
          goto LABEL_46;
        }
        LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
        int v56 = (uint64_t ****)(v53 + 16 * v55);
        int v57 = *v56;
        if (*v56 != v51)
        {
          int v58 = 1;
          while (v57 != (uint64_t ***)-4096)
          {
            int v59 = v55 + v58++;
            uint64_t v55 = v59 & (v54 - 1);
            int v57 = *(uint64_t ****)(v53 + 16 * v55);
            if (v57 == v51)
            {
              int v56 = (uint64_t ****)(v53 + 16 * v55);
              goto LABEL_47;
            }
          }
LABEL_46:
          int v56 = (uint64_t ****)(v53 + 16 * v54);
        }
LABEL_47:
        size_t v60 = v56[1];
        size_t v63 = (size_t)*v60;
        size_t v61 = (char *)(v60 + 2);
        size_t v62 = v63;
        goto LABEL_48;
      }
      size_t v62 = 0;
      size_t v61 = &byte_1CFBCE98E;
LABEL_48:
      --v17;
      uint64_t v34 = *(v50 - 1);
      uint64_t v64 = *(uint64_t ****)(v34 + 40);
      if ((*((unsigned char *)v64 + 23) & 0x10) == 0)
      {
        size_t v75 = 0;
        size_t v74 = &byte_1CFBCE98E;
        goto LABEL_57;
      }
      uint64_t v65 = ***v64;
      uint64_t v66 = *(void *)(v65 + 152);
      uint64_t v67 = *(unsigned int *)(v65 + 168);
      if (!v67) {
        goto LABEL_55;
      }
      LODWORD(v68) = (v67 - 1) & ((v64 >> 4) ^ (v64 >> 9));
      int v69 = (uint64_t ****)(v66 + 16 * v68);
      unsigned int v70 = *v69;
      if (*v69 != v64)
      {
        int v71 = 1;
        while (v70 != (uint64_t ***)-4096)
        {
          int v72 = v68 + v71++;
          uint64_t v68 = v72 & (v67 - 1);
          unsigned int v70 = *(uint64_t ****)(v66 + 16 * v68);
          if (v70 == v64)
          {
            int v69 = (uint64_t ****)(v66 + 16 * v68);
            goto LABEL_56;
          }
        }
LABEL_55:
        int v69 = (uint64_t ****)(v66 + 16 * v67);
      }
LABEL_56:
      size_t v73 = v69[1];
      size_t v76 = (size_t)*v73;
      size_t v74 = (char *)(v73 + 2);
      size_t v75 = v76;
LABEL_57:
      if (v75 >= v62) {
        size_t v77 = v62;
      }
      else {
        size_t v77 = v75;
      }
      if (v77 && (int v78 = memcmp(v61, v74, v77)) != 0)
      {
        int v79 = (v78 >> 31) | 1;
      }
      else
      {
        if (v62 >= v75) {
          goto LABEL_70;
        }
        int v79 = -1;
      }
      if (v79 != -1) {
        goto LABEL_70;
      }
    }
    uint64_t v50 = a1;
LABEL_70:
    *uint64_t v50 = v20;
    if (++v19 == 8) {
      return v18 + 1 == a2;
    }
LABEL_71:
    int v17 = v18++;
  }
  while (v18 != a2);
  return 1;
}

char *sub_1CCE6C518(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  sub_1CCE6B3BC(a1, a2, a3);
  uint64_t v8 = *a4;
  uint64_t v9 = *a3;
  uint64_t v10 = *(uint64_t ****)(*a4 + 40);
  if ((*((unsigned char *)v10 + 23) & 0x10) != 0)
  {
    uint64_t v11 = ***v10;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      int v15 = (uint64_t ****)(v12 + 16 * v14);
      int v16 = *v15;
      if (*v15 == v10)
      {
LABEL_9:
        int v19 = v15[1];
        size_t v22 = (size_t)*v19;
        BOOL result = (char *)(v19 + 2);
        size_t v21 = v22;
        goto LABEL_10;
      }
      int v17 = 1;
      while (v16 != (uint64_t ***)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        int v16 = *(uint64_t ****)(v12 + 16 * v14);
        if (v16 == v10)
        {
          int v15 = (uint64_t ****)(v12 + 16 * v14);
          goto LABEL_9;
        }
      }
    }
    int v15 = (uint64_t ****)(v12 + 16 * v13);
    goto LABEL_9;
  }
  size_t v21 = 0;
  BOOL result = &byte_1CFBCE98E;
LABEL_10:
  uint64_t v23 = *(uint64_t ****)(v9 + 40);
  if ((*((unsigned char *)v23 + 23) & 0x10) != 0)
  {
    uint64_t v24 = ***v23;
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(unsigned int *)(v24 + 168);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      int v28 = (uint64_t ****)(v25 + 16 * v27);
      int v29 = *v28;
      if (*v28 == v23)
      {
LABEL_18:
        size_t v32 = v28[1];
        size_t v35 = (size_t)*v32;
        size_t v33 = (char *)(v32 + 2);
        size_t v34 = v35;
        goto LABEL_19;
      }
      int v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        int v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v23)
        {
          int v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_18;
        }
      }
    }
    int v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_18;
  }
  size_t v34 = 0;
  size_t v33 = &byte_1CFBCE98E;
LABEL_19:
  if (v34 >= v21) {
    size_t v36 = v21;
  }
  else {
    size_t v36 = v34;
  }
  if (v36 && (BOOL result = (char *)memcmp(result, v33, v36), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v21 >= v34)
  {
    return result;
  }
  *a3 = v8;
  *a4 = v9;
  uint64_t v37 = *a3;
  uint64_t v38 = *a2;
  uint64_t v39 = *(uint64_t ****)(*a3 + 40);
  if ((*((unsigned char *)v39 + 23) & 0x10) != 0)
  {
    uint64_t v40 = ***v39;
    uint64_t v41 = *(void *)(v40 + 152);
    uint64_t v42 = *(unsigned int *)(v40 + 168);
    if (v42)
    {
      LODWORD(v43) = (v42 - 1) & ((v39 >> 4) ^ (v39 >> 9));
      size_t v44 = (uint64_t ****)(v41 + 16 * v43);
      size_t v45 = *v44;
      if (*v44 == v39)
      {
LABEL_35:
        size_t v48 = v44[1];
        size_t v50 = (size_t)*v48;
        BOOL result = (char *)(v48 + 2);
        size_t v49 = v50;
        goto LABEL_36;
      }
      int v46 = 1;
      while (v45 != (uint64_t ***)-4096)
      {
        int v47 = v43 + v46++;
        uint64_t v43 = v47 & (v42 - 1);
        size_t v45 = *(uint64_t ****)(v41 + 16 * v43);
        if (v45 == v39)
        {
          size_t v44 = (uint64_t ****)(v41 + 16 * v43);
          goto LABEL_35;
        }
      }
    }
    size_t v44 = (uint64_t ****)(v41 + 16 * v42);
    goto LABEL_35;
  }
  size_t v49 = 0;
  BOOL result = &byte_1CFBCE98E;
LABEL_36:
  uint64_t v51 = *(uint64_t ****)(v38 + 40);
  if ((*((unsigned char *)v51 + 23) & 0x10) != 0)
  {
    uint64_t v52 = ***v51;
    uint64_t v53 = *(void *)(v52 + 152);
    uint64_t v54 = *(unsigned int *)(v52 + 168);
    if (v54)
    {
      LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
      int v56 = (uint64_t ****)(v53 + 16 * v55);
      int v57 = *v56;
      if (*v56 == v51)
      {
LABEL_44:
        size_t v60 = v56[1];
        size_t v63 = (size_t)*v60;
        size_t v61 = (char *)(v60 + 2);
        size_t v62 = v63;
        goto LABEL_45;
      }
      int v58 = 1;
      while (v57 != (uint64_t ***)-4096)
      {
        int v59 = v55 + v58++;
        uint64_t v55 = v59 & (v54 - 1);
        int v57 = *(uint64_t ****)(v53 + 16 * v55);
        if (v57 == v51)
        {
          int v56 = (uint64_t ****)(v53 + 16 * v55);
          goto LABEL_44;
        }
      }
    }
    int v56 = (uint64_t ****)(v53 + 16 * v54);
    goto LABEL_44;
  }
  size_t v62 = 0;
  size_t v61 = &byte_1CFBCE98E;
LABEL_45:
  if (v62 >= v49) {
    size_t v64 = v49;
  }
  else {
    size_t v64 = v62;
  }
  if (v64 && (BOOL result = (char *)memcmp(result, v61, v64), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v49 >= v62)
  {
    return result;
  }
  *a2 = v37;
  *a3 = v38;
  uint64_t v65 = *a2;
  uint64_t v66 = *a1;
  uint64_t v67 = *(uint64_t ****)(*a2 + 40);
  if ((*((unsigned char *)v67 + 23) & 0x10) != 0)
  {
    uint64_t v68 = ***v67;
    uint64_t v69 = *(void *)(v68 + 152);
    uint64_t v70 = *(unsigned int *)(v68 + 168);
    if (v70)
    {
      LODWORD(v71) = (v70 - 1) & ((v67 >> 4) ^ (v67 >> 9));
      int v72 = (uint64_t ****)(v69 + 16 * v71);
      size_t v73 = *v72;
      if (*v72 == v67)
      {
LABEL_61:
        size_t v76 = v72[1];
        size_t v78 = (size_t)*v76;
        BOOL result = (char *)(v76 + 2);
        size_t v77 = v78;
        goto LABEL_62;
      }
      int v74 = 1;
      while (v73 != (uint64_t ***)-4096)
      {
        int v75 = v71 + v74++;
        uint64_t v71 = v75 & (v70 - 1);
        size_t v73 = *(uint64_t ****)(v69 + 16 * v71);
        if (v73 == v67)
        {
          int v72 = (uint64_t ****)(v69 + 16 * v71);
          goto LABEL_61;
        }
      }
    }
    int v72 = (uint64_t ****)(v69 + 16 * v70);
    goto LABEL_61;
  }
  size_t v77 = 0;
  BOOL result = &byte_1CFBCE98E;
LABEL_62:
  int v79 = *(uint64_t ****)(v66 + 40);
  if ((*((unsigned char *)v79 + 23) & 0x10) != 0)
  {
    uint64_t v80 = ***v79;
    uint64_t v81 = *(void *)(v80 + 152);
    uint64_t v82 = *(unsigned int *)(v80 + 168);
    if (v82)
    {
      LODWORD(v83) = (v82 - 1) & ((v79 >> 4) ^ (v79 >> 9));
      size_t v84 = (uint64_t ****)(v81 + 16 * v83);
      uint64_t v85 = *v84;
      if (*v84 == v79)
      {
LABEL_70:
        uint64_t v88 = v84[1];
        size_t v91 = (size_t)*v88;
        uint64_t v89 = (char *)(v88 + 2);
        size_t v90 = v91;
        goto LABEL_71;
      }
      int v86 = 1;
      while (v85 != (uint64_t ***)-4096)
      {
        int v87 = v83 + v86++;
        uint64_t v83 = v87 & (v82 - 1);
        uint64_t v85 = *(uint64_t ****)(v81 + 16 * v83);
        if (v85 == v79)
        {
          size_t v84 = (uint64_t ****)(v81 + 16 * v83);
          goto LABEL_70;
        }
      }
    }
    size_t v84 = (uint64_t ****)(v81 + 16 * v82);
    goto LABEL_70;
  }
  size_t v90 = 0;
  uint64_t v89 = &byte_1CFBCE98E;
LABEL_71:
  if (v90 >= v77) {
    size_t v92 = v77;
  }
  else {
    size_t v92 = v90;
  }
  if (v92 && (BOOL result = (char *)memcmp(result, v89, v92), result))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v77 >= v90)
  {
    return result;
  }
  *a1 = v65;
  *a2 = v66;
  return result;
}

void sub_1CCE6C95C(uint64_t a1, uint64_t a2, char **a3, _DWORD *a4, char **a5)
{
  if (a1) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a2 + 24;
  if (!a2) {
    uint64_t v6 = 0;
  }
  uint64_t v60 = v6;
  uint64_t v61 = *(void *)(a1 + 40) + 40;
  if (v5 != v61 && v5 != v6)
  {
    uint64_t v9 = a4;
    uint64_t v10 = a3;
    do
    {
      if (v5) {
        uint64_t v11 = v5 - 24;
      }
      else {
        uint64_t v11 = 0;
      }
      int v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 == 84) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = 0;
      }
      if (v5 && v12 == 84)
      {
        int v15 = v10[1];
        unint64_t v14 = (unint64_t)v10[2];
        if ((unint64_t)v15 >= v14)
        {
          int v17 = *v10;
          uint64_t v18 = (v15 - *v10) >> 3;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61) {
LABEL_110:
          }
            abort();
          uint64_t v20 = v14 - (void)v17;
          if (v20 >> 2 > v19) {
            unint64_t v19 = v20 >> 2;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            if (v21 >> 61) {
LABEL_111:
            }
              sub_1CB833614();
            size_t v22 = (char *)operator new(8 * v21);
          }
          else
          {
            size_t v22 = 0;
          }
          uint64_t v23 = &v22[8 * v18];
          *(void *)uint64_t v23 = v13;
          int v16 = v23 + 8;
          if (v15 == v17)
          {
            uint64_t v25 = a3;
          }
          else
          {
            do
            {
              uint64_t v24 = *((void *)v15 - 1);
              v15 -= 8;
              *((void *)v23 - 1) = v24;
              v23 -= 8;
            }
            while (v15 != v17);
            uint64_t v25 = a3;
            int v15 = *a3;
          }
          *uint64_t v25 = v23;
          v25[1] = v16;
          v25[2] = &v22[8 * v21];
          uint64_t v9 = a4;
          uint64_t v10 = v25;
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(void *)int v15 = v13;
          int v16 = v15 + 8;
        }
        v10[1] = v16;
        int v12 = *(unsigned __int8 *)(v11 + 16);
      }
      if ((v12 - 29) <= 0xA)
      {
        uint64_t v26 = *(void *)(v11 + 40);
        uint64_t v27 = *(void *)(v26 + 40);
        if (v27 != v26 + 40)
        {
          if (v27) {
            uint64_t v28 = v27 - 24;
          }
          else {
            uint64_t v28 = 0;
          }
          int v29 = *(unsigned __int8 *)(v28 + 16);
          int v30 = v29 - 29;
          if (v29 != 30)
          {
            unsigned int v56 = 2;
            switch(v30)
            {
              case 1:
LABEL_112:
                __break(1u);
                JUMPOUT(0x1CCE6CDA4);
              case 2:
                unsigned int v56 = (*(_DWORD *)(v28 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_104;
              case 3:
              case 9:
                unsigned int v56 = (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_104;
              case 4:
                goto LABEL_49;
              case 7:
                unsigned int v56 = *(_WORD *)(v28 + 18) & 1;
                goto LABEL_104;
              case 8:
                unsigned int v56 = 1;
                goto LABEL_49;
              case 10:
                unsigned int v56 = *(_DWORD *)(v28 + 80) + 1;
LABEL_104:
                if (!v56) {
                  goto LABEL_97;
                }
                goto LABEL_49;
              default:
                goto LABEL_97;
            }
          }
          if ((*(_DWORD *)(v28 + 20) & 0x7FFFFFF) == 3) {
            unsigned int v56 = 2;
          }
          else {
            unsigned int v56 = 1;
          }
LABEL_49:
          uint64_t v31 = 0;
          uint64_t v32 = v28 - 32;
          uint64_t v33 = v56;
          do
          {
            uint64_t v62 = 0;
            int v34 = *(unsigned __int8 *)(v28 + 16);
            if (v34 == 30)
            {
              size_t v48 = (uint64_t *)(v32 - 32 * v31);
            }
            else
            {
              uint64_t v47 = (v34 - 31);
              size_t v48 = (uint64_t *)(v28 - 32);
              switch(v47)
              {
                case 1:
                case 7:
                  int v51 = *(_DWORD *)(v28 + 20);
                  if ((v51 & 0x40000000) != 0) {
                    uint64_t v52 = *(void *)(v28 - 8);
                  }
                  else {
                    uint64_t v52 = v28 - 32 * (v51 & 0x7FFFFFF);
                  }
                  size_t v48 = (uint64_t *)(v52 + 32 * v31 + 32);
                  goto LABEL_95;
                case 2:
                  uint64_t v53 = -64;
                  if (!v31) {
                    uint64_t v53 = -96;
                  }
                  size_t v48 = (uint64_t *)(v28 + v53);
                  break;
                case 3:
                case 4:
                  goto LABEL_112;
                case 5:
                  if ((*(_WORD *)(v28 + 18) & 1) == 0)
                  {
                    uint64_t v35 = 0;
                    uint64_t v10 = a3;
                    uint64_t v9 = a4;
                    goto LABEL_54;
                  }
                  uint64_t v54 = *(_DWORD *)(v28 + 20) & 0x7FFFFFF;
                  uint64_t v55 = v28 + 32;
                  goto LABEL_93;
                case 6:
                  break;
                case 8:
                  if (v31)
                  {
                    size_t v48 = (uint64_t *)(v32 - 32 * *(unsigned int *)(v28 + 80) + 32 * v31 - 32);
                  }
                  else
                  {
                    uint64_t v54 = *(unsigned int *)(v28 + 80);
                    uint64_t v55 = v28 - 64;
LABEL_93:
                    size_t v48 = (uint64_t *)(v55 - 32 * v54);
                  }
LABEL_95:
                  uint64_t v10 = a3;
                  uint64_t v9 = a4;
                  break;
                default:
                  int v49 = *(_DWORD *)(v28 + 20);
                  if ((v49 & 0x40000000) != 0) {
                    uint64_t v50 = *(void *)(v28 - 8);
                  }
                  else {
                    uint64_t v50 = v28 - 32 * (v49 & 0x7FFFFFF);
                  }
                  size_t v48 = (uint64_t *)(v50 + 32 * (2 * v31) + 32);
                  break;
              }
            }
            uint64_t v35 = *v48;
LABEL_54:
            uint64_t v62 = v35;
            sub_1CBB23C3C(v9, &v62, (uint64_t)v63);
            if (v63[16])
            {
              uint64_t v37 = a5[1];
              unint64_t v36 = (unint64_t)a5[2];
              if ((unint64_t)v37 >= v36)
              {
                uint64_t v39 = *a5;
                uint64_t v40 = (v37 - *a5) >> 3;
                unint64_t v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 61) {
                  goto LABEL_110;
                }
                uint64_t v42 = v36 - (void)v39;
                if (v42 >> 2 > v41) {
                  unint64_t v41 = v42 >> 2;
                }
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v43 = v41;
                }
                if (v43)
                {
                  if (v43 >> 61) {
                    goto LABEL_111;
                  }
                  size_t v44 = (char *)operator new(8 * v43);
                }
                else
                {
                  size_t v44 = 0;
                }
                size_t v45 = &v44[8 * v40];
                *(void *)size_t v45 = v62;
                uint64_t v38 = v45 + 8;
                if (v37 != v39)
                {
                  do
                  {
                    uint64_t v46 = *((void *)v37 - 1);
                    v37 -= 8;
                    *((void *)v45 - 1) = v46;
                    v45 -= 8;
                  }
                  while (v37 != v39);
                  uint64_t v37 = *a5;
                }
                *a5 = v45;
                a5[1] = v38;
                a5[2] = &v44[8 * v43];
                uint64_t v10 = a3;
                if (v37) {
                  operator delete(v37);
                }
                uint64_t v9 = a4;
              }
              else
              {
                *(void *)uint64_t v37 = v62;
                uint64_t v38 = v37 + 8;
              }
              a5[1] = v38;
            }
            ++v31;
          }
          while (v31 != v33);
        }
      }
LABEL_97:
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v61 && v5 != v60);
  }
}

void sub_1CCE6CDF4()
{
}

void sub_1CCE6CE34()
{
}

uint64_t sub_1CCE6CE70()
{
  int v3 = 1;
  LOBYTE(v1) = 0;
  char v2 = &v1;
  sub_1CD45C54C((uint64_t)&unk_1EBCF73D8, "spp-all-backedges", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF73D8, &dword_1CB82C000);
  int v3 = 1;
  int v1 = 32;
  char v2 = &v1;
  sub_1CD77EEDC(&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCF7498, &dword_1CB82C000);
  int v3 = 1;
  LOBYTE(v1) = 0;
  char v2 = &v1;
  sub_1CD77EFFC(&v3, (char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF7558, &dword_1CB82C000);
  int v3 = 1;
  LOBYTE(v1) = 0;
  char v2 = &v1;
  sub_1CD77F11C(&v3, (char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF7618, &dword_1CB82C000);
  int v3 = 1;
  LOBYTE(v1) = 0;
  char v2 = &v1;
  sub_1CD77F23C(&v3, (char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF76D8, &dword_1CB82C000);
  int v3 = 1;
  LOBYTE(v1) = 0;
  char v2 = &v1;
  sub_1CD45C54C((uint64_t)&unk_1EBCF7798, "spp-no-backedge", &v3, (unsigned char **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF7798, &dword_1CB82C000);
}

llvm::reassociate::XorOpnd *llvm::reassociate::XorOpnd::XorOpnd(llvm::reassociate::XorOpnd *this, llvm::Value *a2)
{
  *((void *)this + 2) = 0;
  uint64_t v4 = (llvm::reassociate::XorOpnd *)((char *)this + 16);
  *((_DWORD *)this + 6) = 1;
  *(void *)this = a2;
  unsigned int v5 = *((unsigned __int8 *)a2 + 16);
  *((_DWORD *)this + 8) = 0;
  if (!a2 || v5 < 0x1C || (v5 & 0xFE) != 0x38) {
    goto LABEL_4;
  }
  int v10 = *((_DWORD *)a2 + 5);
  uint64_t v11 = (v10 & 0x40000000) != 0
      ? (llvm::Value *)*((void *)a2 - 1)
      : (llvm::Value *)((char *)a2 - 32 * (v10 & 0x7FFFFFF));
  int v12 = *(unsigned __int8 **)v11;
  uint64_t v13 = (unsigned __int8 *)*((void *)v11 + 4);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = &v20;
  int v14 = sub_1CBF528D8((uint64_t)&v18, v12);
  int v15 = v14 ? v13 : v12;
  int v16 = v14 ? v12 : v13;
  uint64_t v18 = &v20;
  uint64_t v19 = 0;
  if (sub_1CBF528D8((uint64_t)&v18, v16))
  {
    int v17 = v20;
    if (*((_DWORD *)this + 6) > 0x40u || *((_DWORD *)v20 + 2) > 0x40u)
    {
      llvm::APInt::assignSlowCase(v4, v20);
    }
    else
    {
      *((void *)this + 2) = *(void *)v20;
      *((_DWORD *)this + 6) = *((_DWORD *)v17 + 2);
    }
    *((void *)this + 1) = v15;
    BOOL v8 = *((unsigned char *)a2 + 16) == 57;
  }
  else
  {
LABEL_4:
    *((void *)this + 1) = a2;
    uint64_t v6 = *(llvm::Type **)a2;
    if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
      uint64_t v6 = (llvm::Type *)**((void **)v6 + 2);
    }
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
    if (PrimitiveSizeInBits >= 0x41) {
      operator new[]();
    }
    if (*((_DWORD *)this + 6) >= 0x41u && *(void *)v4) {
      MEMORY[0x1D25D9CB0](*(void *)v4, 0x1000C8000313F17);
    }
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = PrimitiveSizeInBits;
    BOOL v8 = 1;
  }
  *((unsigned char *)this + 36) = v8;
  return this;
}

BOOL IsRelaxed(llvm::Instruction *a1)
{
  return (~*((unsigned __int8 *)a1 + 17) & 0xF2) == 0;
}

void llvm::ReassociatePass::BuildRankMap(uint64_t a1, llvm::Function *this, uint64_t *a3)
{
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    uint64_t v6 = *((void *)this + 11);
LABEL_3:
    uint64_t v7 = v6;
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v6 = *((void *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0) {
    goto LABEL_3;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v7 = *((void *)this + 11);
LABEL_4:
  uint64_t v8 = v7 + 40 * *((void *)this + 12);
  if (v6 != v8)
  {
    int v9 = 2;
    while (1)
    {
      uint64_t v51 = v6;
      int v39 = *(_DWORD *)(a1 + 40);
      if (!v39) {
        break;
      }
      uint64_t v40 = *(void *)(a1 + 24);
      int v41 = v39 - 1;
      unsigned int v42 = v41 & ((v6 >> 4) ^ (v6 >> 9));
      unint64_t v43 = (void *)(v40 + 16 * v42);
      uint64_t v44 = *v43;
      if (v6 != *v43)
      {
        size_t v45 = 0;
        int v46 = 1;
        while (v44 != -4096)
        {
          if (v45) {
            BOOL v47 = 0;
          }
          else {
            BOOL v47 = v44 == -8192;
          }
          if (v47) {
            size_t v45 = v43;
          }
          unsigned int v48 = v42 + v46++;
          unsigned int v42 = v48 & v41;
          unint64_t v43 = (void *)(v40 + 16 * v42);
          uint64_t v44 = *v43;
          if (v6 == *v43) {
            goto LABEL_65;
          }
        }
        if (v45) {
          int v49 = v45;
        }
        else {
          int v49 = v43;
        }
        goto LABEL_64;
      }
LABEL_65:
      *((_DWORD *)v43 + 2) = ++v9;
      v6 += 40;
      if (v6 == v8) {
        goto LABEL_6;
      }
    }
    int v49 = 0;
LABEL_64:
    unint64_t v43 = sub_1CC27AC9C(a1 + 24, (uint64_t)&v51, &v51, v49);
    *unint64_t v43 = v51;
    *((_DWORD *)v43 + 2) = 0;
    goto LABEL_65;
  }
  int v9 = 2;
LABEL_6:
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  if (v10 != *a3)
  {
LABEL_7:
    uint64_t v13 = *(void *)(v10 - 8);
    v10 -= 8;
    uint64_t v12 = v13;
    uint64_t v51 = v13;
    int v14 = *(_DWORD *)(a1 + 16);
    if (v14)
    {
      int v15 = v14 - 1;
      unsigned int v16 = ((v12 >> 4) ^ (v12 >> 9)) & v15;
      int v17 = (void *)(*(void *)a1 + 16 * v16);
      uint64_t v18 = *v17;
      if (v12 == *v17)
      {
LABEL_9:
        int v19 = ++v9 << 16;
        *((_DWORD *)v17 + 2) = v9 << 16;
        uint64_t v20 = v12 + 40;
        for (uint64_t i = *(void *)(v12 + 48); ; uint64_t i = *(void *)(i + 8))
        {
          if (i == v20)
          {
            if (v10 == v11) {
              return;
            }
            goto LABEL_7;
          }
          size_t v22 = i ? (llvm *)(i - 24) : 0;
          if (llvm::mayHaveNonDefUseDependency(v22, this)) {
            break;
          }
LABEL_15:
          ;
        }
        uint64_t v50 = v22;
        int v23 = *(_DWORD *)(a1 + 40);
        if (v23)
        {
          uint64_t v24 = *(void *)(a1 + 24);
          int v25 = v23 - 1;
          unsigned int v26 = v25 & ((v22 >> 4) ^ (v22 >> 9));
          uint64_t v27 = (void *)(v24 + 16 * v26);
          uint64_t v28 = *v27;
          if (v22 == (llvm *)*v27)
          {
LABEL_31:
            *((_DWORD *)v27 + 2) = ++v19;
            goto LABEL_15;
          }
          int v29 = 0;
          int v30 = 1;
          while (v28 != -4096)
          {
            if (v29) {
              BOOL v31 = 0;
            }
            else {
              BOOL v31 = v28 == -8192;
            }
            if (v31) {
              int v29 = v27;
            }
            unsigned int v32 = v26 + v30++;
            unsigned int v26 = v32 & v25;
            uint64_t v27 = (void *)(v24 + 16 * v26);
            uint64_t v28 = *v27;
            if (v22 == (llvm *)*v27) {
              goto LABEL_31;
            }
          }
          if (v29) {
            uint64_t v33 = v29;
          }
          else {
            uint64_t v33 = v27;
          }
        }
        else
        {
          uint64_t v33 = 0;
        }
        uint64_t v27 = sub_1CC27AC9C(a1 + 24, (uint64_t)&v50, (uint64_t *)&v50, v33);
        *uint64_t v27 = v50;
        *((_DWORD *)v27 + 2) = 0;
        goto LABEL_31;
      }
      int v34 = 0;
      int v35 = 1;
      while (v18 != -4096)
      {
        if (v34) {
          BOOL v36 = 0;
        }
        else {
          BOOL v36 = v18 == -8192;
        }
        if (v36) {
          int v34 = v17;
        }
        unsigned int v37 = v16 + v35++;
        unsigned int v16 = v37 & v15;
        int v17 = (void *)(*(void *)a1 + 16 * v16);
        uint64_t v18 = *v17;
        if (v12 == *v17) {
          goto LABEL_9;
        }
      }
      if (v34) {
        uint64_t v38 = v34;
      }
      else {
        uint64_t v38 = v17;
      }
    }
    else
    {
      uint64_t v38 = 0;
    }
    int v17 = sub_1CBFAF8D8(a1, (uint64_t)&v51, &v51, v38);
    void *v17 = v51;
    *((_DWORD *)v17 + 2) = 0;
    uint64_t v12 = v51;
    goto LABEL_9;
  }
}

uint64_t llvm::ReassociatePass::getRank(llvm::ReassociatePass *this, llvm::Value *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (!a2 || v4 <= 0x1B)
  {
    if (v4 != 21) {
      return 0;
    }
    int v59 = (char *)this + 24;
    uint64_t v58 = *((void *)this + 3);
    uint64_t v71 = a2;
    int v60 = *((_DWORD *)this + 10);
    if (v60)
    {
      int v61 = v60 - 1;
      unsigned int v62 = v61 & ((a2 >> 4) ^ (a2 >> 9));
      size_t v63 = (llvm::Value **)(v58 + 16 * v62);
      size_t v64 = *v63;
      if (*v63 == a2) {
        return *((unsigned int *)v63 + 2);
      }
      uint64_t v65 = 0;
      int v66 = 1;
      while (v64 != (llvm::Value *)-4096)
      {
        if (v65) {
          BOOL v67 = 0;
        }
        else {
          BOOL v67 = v64 == (llvm::Value *)-8192;
        }
        if (v67) {
          uint64_t v65 = v63;
        }
        unsigned int v68 = v62 + v66++;
        unsigned int v62 = v68 & v61;
        size_t v63 = (llvm::Value **)(v58 + 16 * v62);
        size_t v64 = *v63;
        if (*v63 == a2) {
          return *((unsigned int *)v63 + 2);
        }
      }
      if (v65) {
        uint64_t v69 = v65;
      }
      else {
        uint64_t v69 = v63;
      }
    }
    else
    {
      uint64_t v69 = 0;
    }
    size_t v63 = (llvm::Value **)sub_1CC27AC9C((uint64_t)v59, (uint64_t)&v71, (uint64_t *)&v71, v69);
    *size_t v63 = v71;
    *((_DWORD *)v63 + 2) = 0;
    return *((unsigned int *)v63 + 2);
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v71 = a2;
  int v6 = *((_DWORD *)this + 10);
  unsigned int v7 = a2 >> 4;
  if (v6)
  {
    int v8 = v6 - 1;
    unsigned int v9 = v8 & (v7 ^ (a2 >> 9));
    uint64_t v10 = (llvm::Value **)(v5 + 16 * v9);
    uint64_t v11 = *v10;
    if (*v10 == a2) {
      goto LABEL_18;
    }
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != (llvm::Value *)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == (llvm::Value *)-8192;
      }
      if (v14) {
        uint64_t v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      uint64_t v10 = (llvm::Value **)(v5 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a2) {
        goto LABEL_18;
      }
    }
    if (v12) {
      unsigned int v16 = v12;
    }
    else {
      unsigned int v16 = v10;
    }
  }
  else
  {
    unsigned int v16 = 0;
  }
  uint64_t v10 = (llvm::Value **)sub_1CC27AC9C((uint64_t)this + 24, (uint64_t)&v71, (uint64_t *)&v71, v16);
  *uint64_t v10 = v71;
  *((_DWORD *)v10 + 2) = 0;
LABEL_18:
  uint64_t v17 = *((unsigned int *)v10 + 2);
  if (!v17)
  {
    uint64_t v19 = *((void *)a2 + 5);
    uint64_t v71 = (llvm::Value *)v19;
    int v20 = *((_DWORD *)this + 4);
    if (v20)
    {
      int v21 = v20 - 1;
      unsigned int v22 = ((v19 >> 4) ^ (v19 >> 9)) & v21;
      int v23 = (void *)(*(void *)this + 16 * v22);
      uint64_t v24 = *v23;
      if (v19 == *v23) {
        goto LABEL_22;
      }
      unsigned int v48 = 0;
      int v49 = 1;
      while (v24 != -4096)
      {
        if (v48) {
          BOOL v50 = 0;
        }
        else {
          BOOL v50 = v24 == -8192;
        }
        if (v50) {
          unsigned int v48 = v23;
        }
        unsigned int v51 = v22 + v49++;
        unsigned int v22 = v51 & v21;
        int v23 = (void *)(*(void *)this + 16 * v22);
        uint64_t v24 = *v23;
        if (v19 == *v23) {
          goto LABEL_22;
        }
      }
      if (v48) {
        uint64_t v53 = v48;
      }
      else {
        uint64_t v53 = v23;
      }
    }
    else
    {
      uint64_t v53 = 0;
    }
    int v23 = sub_1CBFAF8D8((uint64_t)this, (uint64_t)&v71, (uint64_t *)&v71, v53);
    *int v23 = v71;
    *((_DWORD *)v23 + 2) = 0;
LABEL_22:
    int v25 = *((_DWORD *)v23 + 2);
    uint64_t v26 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    if (v26) {
      BOOL v27 = v25 == 0;
    }
    else {
      BOOL v27 = 1;
    }
    if (v27)
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v28 = 0;
      LODWORD(v17) = 0;
      uint64_t v29 = 32 * v26 - 32;
      do
      {
        int v30 = *((_DWORD *)a2 + 5);
        if ((v30 & 0x40000000) != 0) {
          BOOL v31 = (char *)*((void *)a2 - 1);
        }
        else {
          BOOL v31 = (char *)a2 - 32 * (v30 & 0x7FFFFFF);
        }
        Ranuint64_t k = llvm::ReassociatePass::getRank(this, *(llvm::Value **)&v31[v28]);
        if (v17 <= Rank) {
          uint64_t v17 = Rank;
        }
        else {
          uint64_t v17 = v17;
        }
        if (v29 == v28) {
          break;
        }
        v28 += 32;
      }
      while (v17 != v25);
    }
    int v33 = *((unsigned __int8 *)a2 + 16);
    if (v33 == 5)
    {
      if (*((_WORD *)a2 + 9) == 30
        && (sub_1CBF68974((uint64_t)&v71 + 1, ((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4])|| (sub_1CBF68974((uint64_t)&v71 + 1, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) & 1) != 0))
      {
        goto LABEL_48;
      }
    }
    else if (v33 == 58 {
           && ((sub_1CBF687D0((uint64_t)&v71 + 1, *((llvm::Constant **)a2 - 4)) & 1) != 0
    }
            || (sub_1CBF687D0((uint64_t)&v71 + 1, *((llvm::Constant **)a2 - 8)) & 1) != 0))
    {
      goto LABEL_48;
    }
    int v34 = *((unsigned __int8 *)a2 + 16);
    if (v34 == 5)
    {
      if (*((_WORD *)a2 + 9) != 15
        || (sub_1CC03F414((uint64_t)v70, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) & 1) == 0)
      {
LABEL_41:
        if (sub_1CB845E74((uint64_t)a2))
        {
          unsigned int v35 = *((unsigned __int8 *)a2 + 16);
          if (v35 <= 0x1B) {
            unsigned int v36 = *((unsigned __int16 *)a2 + 9);
          }
          else {
            unsigned int v36 = v35 - 28;
          }
          if (v36 != 12)
          {
            if (v36 != 16) {
              goto LABEL_46;
            }
            if ((*((unsigned char *)a2 + 17) & 0x10) != 0)
            {
              int v54 = *((_DWORD *)a2 + 5);
              if ((v54 & 0x40000000) != 0) {
                uint64_t v55 = (llvm::Constant **)*((void *)a2 - 1);
              }
              else {
                uint64_t v55 = (llvm::Constant **)((char *)a2 - 32 * (v54 & 0x7FFFFFF));
              }
              if (!sub_1CC0241FC((uint64_t)&v72, *v55)) {
                goto LABEL_46;
              }
            }
            else
            {
              int v56 = *((_DWORD *)a2 + 5);
              if ((v56 & 0x40000000) != 0) {
                int v57 = (llvm::Constant **)*((void *)a2 - 1);
              }
              else {
                int v57 = (llvm::Constant **)((char *)a2 - 32 * (v56 & 0x7FFFFFF));
              }
              if (!sub_1CC02435C((uint64_t)&v72, *v57)) {
                goto LABEL_46;
              }
            }
          }
          int v37 = 0;
          goto LABEL_47;
        }
LABEL_46:
        int v37 = 1;
LABEL_47:
        uint64_t v17 = (v37 + v17);
      }
    }
    else if (v34 != 43 || (sub_1CBF535C4((uint64_t)v70, *((llvm::Constant **)a2 - 8)) & 1) == 0)
    {
      goto LABEL_41;
    }
LABEL_48:
    uint64_t v71 = a2;
    int v38 = *((_DWORD *)this + 10);
    if (v38)
    {
      uint64_t v39 = *((void *)this + 3);
      int v40 = v38 - 1;
      unsigned int v41 = v40 & (v7 ^ (a2 >> 9));
      unsigned int v42 = (llvm::Value **)(v39 + 16 * v41);
      unint64_t v43 = *v42;
      if (*v42 == a2)
      {
LABEL_74:
        *((_DWORD *)v42 + 2) = v17;
        return v17;
      }
      uint64_t v44 = 0;
      int v45 = 1;
      while (v43 != (llvm::Value *)-4096)
      {
        if (v44) {
          BOOL v46 = 0;
        }
        else {
          BOOL v46 = v43 == (llvm::Value *)-8192;
        }
        if (v46) {
          uint64_t v44 = v42;
        }
        unsigned int v47 = v41 + v45++;
        unsigned int v41 = v47 & v40;
        unsigned int v42 = (llvm::Value **)(v39 + 16 * v41);
        unint64_t v43 = *v42;
        if (*v42 == a2) {
          goto LABEL_74;
        }
      }
      if (v44) {
        uint64_t v52 = v44;
      }
      else {
        uint64_t v52 = v42;
      }
    }
    else
    {
      uint64_t v52 = 0;
    }
    unsigned int v42 = (llvm::Value **)sub_1CC27AC9C((uint64_t)this + 24, (uint64_t)&v71, (uint64_t *)&v71, v52);
    char *v42 = v71;
    *((_DWORD *)v42 + 2) = 0;
    goto LABEL_74;
  }
  return v17;
}

llvm::ReassociatePass *llvm::ReassociatePass::canonicalizeOperands(llvm::ReassociatePass *this, llvm::Instruction *a2)
{
  int v3 = this;
  int v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = (char *)*((void *)a2 - 1);
  }
  else {
    uint64_t v5 = (char *)a2 - 32 * (v4 & 0x7FFFFFF);
  }
  int v6 = *(unsigned __int8 **)v5;
  unsigned int v7 = (unsigned __int8 *)*((void *)v5 + 4);
  if (*(unsigned __int8 **)v5 != v7 && v7[16] >= 0x15u)
  {
    if (v6[16] < 0x15u
      || (Ranuint64_t k = llvm::ReassociatePass::getRank(this, (llvm::Value *)v7),
          this = (llvm::ReassociatePass *)llvm::ReassociatePass::getRank(v3, (llvm::Value *)v6),
          Rank < this))
    {
      this = (llvm::ReassociatePass *)llvm::Instruction::isCommutative(a2);
      if (this)
      {
        uint64_t v9 = *((void *)a2 - 8);
        uint64_t v10 = *((void *)a2 - 4);
        if (v9 != v10)
        {
          uint64_t v11 = *((void *)a2 - 3);
          *((void *)a2 - 8) = v10;
          *((void *)a2 - 4) = v9;
          long long v12 = *(_OWORD *)((char *)a2 - 56);
          int v13 = (void *)*((void *)a2 - 2);
          *((void *)a2 - 7) = v11;
          *((void *)a2 - 6) = v13;
          *(_OWORD *)((char *)a2 - 24) = v12;
          *int v13 = (char *)a2 - 64;
          uint64_t v14 = *((void *)a2 - 7);
          if (v14) {
            *(void *)(v14 + 16) = (char *)a2 - 56;
          }
          **((void **)a2 - 2) = (char *)a2 - 32;
          uint64_t v15 = *((void *)a2 - 3);
          if (v15) {
            *(void *)(v15 + 16) = (char *)a2 - 24;
          }
        }
      }
    }
  }
  return this;
}

void llvm::ReassociatePass::RewriteExprTree(uint64_t a1, llvm::UndefValue **this, uint64_t a3)
{
  v168[8] = *MEMORY[0x1E4F143B8];
  uint64_t v166 = v168;
  uint64_t v167 = 0x800000000;
  uint64_t v6 = *((unsigned __int8 *)this + 16) - 28;
  unsigned int v7 = v162;
  size_t v158 = v162;
  size_t v159 = v162;
  uint64_t v160 = 8;
  int v161 = 0;
  uint64_t v8 = *(unsigned int *)(a3 + 8);
  if (!v8) {
    goto LABEL_61;
  }
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = 8;
  long long v12 = v162;
  do
  {
    uint64_t v13 = *(void *)(*(void *)a3 + 16 * v10 + 8);
    if (v12 != v7) {
      goto LABEL_15;
    }
    if (!v9)
    {
LABEL_11:
      if (v11 > v9)
      {
        HIDWORD(v160) = v9 + 1;
        *(void *)&v7[8 * v9] = v13;
        goto LABEL_13;
      }
LABEL_15:
      if (3 * v11 <= 4 * (v9 - v161))
      {
        if (v11 >= 0x40) {
          v11 *= 2;
        }
        else {
          unsigned int v11 = 128;
        }
      }
      else if (v11 - v9 >= v11 >> 3)
      {
        goto LABEL_17;
      }
      uint64_t v106 = v6;
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v158, v11);
      uint64_t v6 = v106;
      unsigned int v11 = v160;
      long long v12 = v159;
LABEL_17:
      unsigned int v17 = v11 - 1;
      unsigned int v18 = (v11 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      uint64_t v19 = &v12[8 * v18];
      uint64_t v20 = *(void *)v19;
      if (*(void *)v19 == -1)
      {
        int v21 = 0;
LABEL_29:
        if (v21) {
          int v25 = v21;
        }
        else {
          int v25 = v19;
        }
        if (*(void *)v25 != v13)
        {
          if (*(void *)v25 == -2) {
            --v161;
          }
          else {
            ++HIDWORD(v160);
          }
          *(void *)int v25 = v13;
        }
      }
      else
      {
        int v21 = 0;
        int v22 = 1;
        while (v20 != v13)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v20 == -2;
          }
          if (v23) {
            int v21 = v19;
          }
          unsigned int v24 = v18 + v22++;
          unsigned int v18 = v24 & v17;
          uint64_t v19 = &v12[8 * (v24 & v17)];
          uint64_t v20 = *(void *)v19;
          if (*(void *)v19 == -1) {
            goto LABEL_29;
          }
        }
      }
      goto LABEL_13;
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    unsigned int v16 = v7;
    while (*(void *)v16 != v13)
    {
      if (*(void *)v16 == -2) {
        uint64_t v14 = v16;
      }
      v16 += 8;
      v15 -= 8;
      if (!v15)
      {
        if (!v14) {
          goto LABEL_11;
        }
        *(void *)uint64_t v14 = v13;
        --v161;
        break;
      }
    }
LABEL_13:
    unsigned int v7 = v158;
    long long v12 = v159;
    unsigned int v11 = v160;
    unsigned int v9 = HIDWORD(v160);
    ++v10;
  }
  while (v10 != v8);
  if (*(_DWORD *)(a3 + 8) == 2)
  {
    uint64_t v26 = a1;
    BOOL v27 = 0;
    unsigned int v28 = 0;
    uint64_t v29 = this;
    goto LABEL_38;
  }
LABEL_61:
  uint64_t v26 = a1;
  unsigned int v45 = 0;
  BOOL v27 = 0;
  BOOL v46 = (llvm::Instruction *)this;
  do
  {
    uint64_t v47 = *(void *)(*(void *)a3 + 16 * v45 + 8);
    unsigned int v48 = (void *)((char *)v46 - 32);
    uint64_t v49 = *((void *)v46 - 4);
    BOOL v50 = (uint64_t *)((char *)v46 - 64);
    size_t v157 = (llvm::UndefValue ***)((char *)v46 - 64);
    if (v47 != v49)
    {
      if (v47 == *v50)
      {
        uint64_t v51 = v6;
        if (llvm::Instruction::isCommutative(v46))
        {
          uint64_t v52 = *((void *)v46 - 3);
          *((void *)v46 - 8) = v49;
          *((void *)v46 - 4) = v47;
          long long v53 = *(_OWORD *)((char *)v46 - 56);
          int v54 = (llvm::UndefValue ****)*((void *)v46 - 2);
          *((void *)v46 - 7) = v52;
          *((void *)v46 - 6) = v54;
          *(_OWORD *)((char *)v46 - 24) = v53;
          *int v54 = v157;
          BOOL v50 = (uint64_t *)((char *)v46 - 64);
          uint64_t v55 = *((void *)v46 - 7);
          if (v55) {
            *(void *)(v55 + 16) = (char *)v46 - 56;
          }
          **((void **)v46 - 2) = v48;
          uint64_t v56 = *((void *)v46 - 3);
          uint64_t v6 = v51;
          if (v56) {
            *(void *)(v56 + 16) = (char *)v46 - 24;
          }
        }
        else
        {
          uint64_t v6 = v51;
          BOOL v50 = (uint64_t *)((char *)v46 - 64);
        }
      }
      else
      {
        unsigned int v156 = v6;
        uint64_t v74 = sub_1CCE6E7A8(v49, v6);
        if (v74)
        {
          int v93 = v158;
          if (v159 == v158)
          {
            int v94 = HIDWORD(v160);
            size_t v95 = &v159[8 * HIDWORD(v160)];
            if (HIDWORD(v160))
            {
              uint64_t v73 = 0;
              while (*(void *)&v159[v73] != v74)
              {
                v73 += 8;
                if (8 * HIDWORD(v160) == v73) {
                  goto LABEL_206;
                }
              }
              size_t v95 = &v159[v73];
            }
LABEL_206:
            int v93 = v159;
          }
          else
          {
            int v99 = v160 - 1;
            unsigned int v100 = (v160 - 1) & ((v74 >> 4) ^ (v74 >> 9));
            size_t v95 = &v159[8 * v100];
            uint64_t v101 = *(void *)v95;
            if (*(void *)v95 == -1)
            {
              uint64_t v102 = 0;
LABEL_226:
              if (v102) {
                size_t v95 = v102;
              }
              int v94 = HIDWORD(v160);
              if (*(void *)v95 != v74) {
                size_t v95 = &v159[8 * v160];
              }
            }
            else
            {
              uint64_t v102 = 0;
              int v103 = 1;
              while (v101 != v74)
              {
                if (v102) {
                  BOOL v104 = 0;
                }
                else {
                  BOOL v104 = v101 == -2;
                }
                if (v104) {
                  uint64_t v102 = v95;
                }
                unsigned int v105 = v100 + v103++;
                unsigned int v100 = v105 & v99;
                size_t v95 = &v159[8 * (v105 & v99)];
                uint64_t v101 = *(void *)v95;
                if (*(void *)v95 == -1) {
                  goto LABEL_226;
                }
              }
              int v94 = HIDWORD(v160);
            }
          }
          if (v159 == v93) {
            int v130 = v94;
          }
          else {
            int v130 = v160;
          }
          if (v95 == &v159[8 * v130])
          {
            if (v167 >= (unint64_t)HIDWORD(v167)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v166 + v167) = v74;
            LODWORD(v167) = v167 + 1;
          }
        }
        if (*v48)
        {
          **((void **)v46 - 2) = *((void *)v46 - 3);
          uint64_t v75 = *((void *)v46 - 3);
          if (v75) {
            *(void *)(v75 + 16) = *((void *)v46 - 2);
          }
        }
        *unsigned int v48 = v47;
        BOOL v27 = (llvm::UndefValue **)v46;
        uint64_t v6 = v156;
        BOOL v50 = (uint64_t *)((char *)v46 - 64);
        if (v47)
        {
          uint64_t v78 = *(void *)(v47 + 8);
          size_t v77 = (void *)(v47 + 8);
          uint64_t v76 = v78;
          *((void *)v46 - 3) = v78;
          if (v78) {
            *(void *)(v76 + 16) = (char *)v46 - 24;
          }
          *((void *)v46 - 2) = v77;
          *size_t v77 = v48;
          BOOL v27 = (llvm::UndefValue **)v46;
        }
      }
      *(unsigned char *)(v26 + 552) = 1;
    }
    uint64_t v57 = v6;
    uint64_t v58 = sub_1CCE6E7A8(*v50, v6);
    if (!v58) {
      goto LABEL_137;
    }
    uint64_t v29 = (llvm::UndefValue **)v58;
    int v60 = v158;
    if (v159 == v158)
    {
      int v61 = HIDWORD(v160);
      unsigned int v62 = &v159[8 * HIDWORD(v160)];
      if (HIDWORD(v160))
      {
        uint64_t v63 = 0;
        while (*(void *)&v159[v63] != v58)
        {
          v63 += 8;
          if (8 * HIDWORD(v160) == v63) {
            goto LABEL_76;
          }
        }
        unsigned int v62 = &v159[v63];
      }
LABEL_76:
      int v60 = v159;
    }
    else
    {
      int v66 = v160 - 1;
      unsigned int v67 = (v160 - 1) & ((v58 >> 4) ^ (v58 >> 9));
      unsigned int v62 = &v159[8 * v67];
      uint64_t v68 = *(void *)v62;
      if (*(void *)v62 == -1)
      {
        uint64_t v69 = 0;
LABEL_148:
        if (v69) {
          unsigned int v62 = v69;
        }
        int v61 = HIDWORD(v160);
        if (*(void *)v62 != v58) {
          unsigned int v62 = &v159[8 * v160];
        }
      }
      else
      {
        uint64_t v69 = 0;
        int v70 = 1;
        while (v68 != v58)
        {
          if (v69) {
            BOOL v71 = 0;
          }
          else {
            BOOL v71 = v68 == -2;
          }
          if (v71) {
            uint64_t v69 = v62;
          }
          unsigned int v72 = v67 + v70++;
          unsigned int v67 = v72 & v66;
          unsigned int v62 = &v159[8 * (v72 & v66)];
          uint64_t v68 = *(void *)v62;
          if (*(void *)v62 == -1) {
            goto LABEL_148;
          }
        }
        int v61 = HIDWORD(v160);
      }
    }
    int v64 = v159 == v60 ? v61 : v160;
    if (v62 != &v159[8 * v64])
    {
LABEL_137:
      if (v167)
      {
        uint64_t v29 = (llvm::UndefValue **)*((void *)v166 + v167 - 1);
        LODWORD(v167) = v167 - 1;
      }
      else
      {
        uint64_t v150 = llvm::UndefValue::get(*this, v59);
        v165[8] = 257;
        unsigned int v151 = llvm::BinaryOperator::Create(v57, v150, (uint64_t)v150, (const char **)&v163, (uint64_t)this);
        uint64_t v29 = (llvm::UndefValue **)v151;
        if ((*(_DWORD *)(*(void *)v151 + 8) & 0xFE) == 0x12) {
          unsigned int v152 = *(unsigned __int8 *)(**(void **)(*(void *)v151 + 16) + 8);
        }
        else {
          unsigned int v152 = *(_DWORD *)(*(void *)v151 + 8);
        }
        if (v152 <= 6) {
          *((unsigned char *)v151 + 17) |= *((unsigned char *)this + 17) & 0xFE;
        }
      }
      if (*v157)
      {
        **((void **)v46 - 6) = *((void *)v46 - 7);
        uint64_t v96 = *((void *)v46 - 7);
        if (v96) {
          *(void *)(v96 + 16) = *((void *)v46 - 6);
        }
      }
      *size_t v157 = v29;
      if (v29)
      {
        size_t v97 = (llvm::UndefValue ****)(v29 + 1);
        uint64_t v98 = v29[1];
        *((void *)v46 - 7) = v98;
        if (v98) {
          *((void *)v98 + 2) = (char *)v46 - 56;
        }
        *((void *)v46 - 6) = v97;
        uint64_t *v97 = v157;
      }
      *(unsigned char *)(v26 + 552) = 1;
      BOOL v27 = (llvm::UndefValue **)v46;
    }
    unsigned int v28 = v45 + 1;
    unsigned int v65 = v45 + 3;
    BOOL v46 = (llvm::Instruction *)v29;
    ++v45;
    uint64_t v6 = v57;
  }
  while (*(_DWORD *)(a3 + 8) != v65);
LABEL_38:
  int v30 = *(void **)(*(void *)a3 + 16 * v28 + 8);
  unsigned int v32 = v29 - 8;
  uint64_t v31 = (uint64_t)*(v29 - 8);
  int v33 = *(void **)(*(void *)a3 + 16 * (v28 + 1) + 8);
  unsigned int v35 = v29 - 4;
  uint64_t v34 = (uint64_t)*(v29 - 4);
  BOOL v36 = v30 == (void *)v31 && v33 == (void *)v34;
  uint64_t v37 = v26;
  if (v36)
  {
LABEL_54:
    uint64_t v29 = v27;
    if (v27) {
      goto LABEL_127;
    }
    goto LABEL_55;
  }
  if (v30 == (void *)v34 && v33 == (void *)v31)
  {
    if (llvm::Instruction::isCommutative((llvm::Instruction *)v29) && v33 != v30)
    {
      uint64_t v39 = *(v29 - 3);
      *(v29 - 8) = (llvm::UndefValue *)v30;
      *(v29 - 4) = (llvm::UndefValue *)v33;
      long long v40 = *(_OWORD *)(v29 - 7);
      unsigned int v41 = *(v29 - 2);
      *(v29 - 7) = v39;
      *(v29 - 6) = v41;
      *(_OWORD *)(v29 - 3) = v40;
      *(void *)unsigned int v41 = v32;
      uint64_t v42 = (uint64_t)*(v29 - 7);
      if (v42) {
        *(void *)(v42 + 16) = v29 - 7;
      }
      *(void *)*(v29 - 2) = v35;
      uint64_t v43 = (uint64_t)*(v29 - 3);
      if (v43) {
        *(void *)(v43 + 16) = v29 - 3;
      }
    }
    *(unsigned char *)(v26 + 552) = 1;
    goto LABEL_54;
  }
  if (v30 != (void *)v31)
  {
    int v79 = v6;
    uint64_t v80 = sub_1CCE6E7A8(v31, v6);
    if (v80)
    {
      uint64_t v125 = v158;
      if (v159 == v158)
      {
        int v126 = HIDWORD(v160);
        size_t v127 = &v159[8 * HIDWORD(v160)];
        if (HIDWORD(v160))
        {
          uint64_t v128 = 0;
          while (*(void *)&v159[v128] != v80)
          {
            v128 += 8;
            if (8 * HIDWORD(v160) == v128) {
              goto LABEL_197;
            }
          }
          size_t v127 = &v159[v128];
        }
LABEL_197:
        uint64_t v125 = v159;
      }
      else
      {
        int v131 = v160 - 1;
        unsigned int v132 = (v160 - 1) & ((v80 >> 4) ^ (v80 >> 9));
        size_t v127 = &v159[8 * v132];
        uint64_t v133 = *(void *)v127;
        if (*(void *)v127 == -1)
        {
          uint64_t v134 = 0;
LABEL_246:
          if (v134) {
            size_t v127 = v134;
          }
          int v126 = HIDWORD(v160);
          if (*(void *)v127 != v80) {
            size_t v127 = &v159[8 * v160];
          }
        }
        else
        {
          uint64_t v134 = 0;
          int v135 = 1;
          while (v133 != v80)
          {
            if (v134) {
              BOOL v136 = 0;
            }
            else {
              BOOL v136 = v133 == -2;
            }
            if (v136) {
              uint64_t v134 = v127;
            }
            unsigned int v137 = v132 + v135++;
            unsigned int v132 = v137 & v131;
            size_t v127 = &v159[8 * (v137 & v131)];
            uint64_t v133 = *(void *)v127;
            if (*(void *)v127 == -1) {
              goto LABEL_246;
            }
          }
          int v126 = HIDWORD(v160);
        }
      }
      if (v159 == v125) {
        int v129 = v126;
      }
      else {
        int v129 = v160;
      }
      if (v127 == &v159[8 * v129])
      {
        if (v167 >= HIDWORD(v167)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v166 + v167) = v80;
        LODWORD(v167) = v167 + 1;
      }
    }
    if (*v32)
    {
      *(void *)*(v29 - 6) = *(v29 - 7);
      uint64_t v81 = (uint64_t)*(v29 - 7);
      if (v81) {
        *(void *)(v81 + 16) = *(v29 - 6);
      }
    }
    *unsigned int v32 = (llvm::UndefValue *)v30;
    LODWORD(v6) = v79;
    if (v30)
    {
      size_t v84 = (llvm::UndefValue *)v30[1];
      uint64_t v83 = (llvm::UndefValue *)(v30 + 1);
      uint64_t v82 = v84;
      *(v29 - 7) = v84;
      if (v84) {
        *((void *)v82 + 2) = v29 - 7;
      }
      *(v29 - 6) = v83;
      *(void *)uint64_t v83 = v32;
    }
  }
  if (v33 != (void *)v34)
  {
    uint64_t v85 = sub_1CCE6E7A8(v34, v6);
    if (v85)
    {
      int v138 = v158;
      if (v159 == v158)
      {
        int v139 = HIDWORD(v160);
        int v140 = &v159[8 * HIDWORD(v160)];
        if (HIDWORD(v160))
        {
          uint64_t v141 = 0;
          while (*(void *)&v159[v141] != v85)
          {
            v141 += 8;
            if (8 * HIDWORD(v160) == v141) {
              goto LABEL_238;
            }
          }
          int v140 = &v159[v141];
        }
LABEL_238:
        int v138 = v159;
      }
      else
      {
        int v143 = v160 - 1;
        unsigned int v144 = (v160 - 1) & ((v85 >> 4) ^ (v85 >> 9));
        int v140 = &v159[8 * v144];
        uint64_t v145 = *(void *)v140;
        if (*(void *)v140 == -1)
        {
          int v146 = 0;
LABEL_265:
          if (v146) {
            int v140 = v146;
          }
          int v139 = HIDWORD(v160);
          if (*(void *)v140 != v85) {
            int v140 = &v159[8 * v160];
          }
        }
        else
        {
          int v146 = 0;
          int v147 = 1;
          while (v145 != v85)
          {
            if (v146) {
              BOOL v148 = 0;
            }
            else {
              BOOL v148 = v145 == -2;
            }
            if (v148) {
              int v146 = v140;
            }
            unsigned int v149 = v144 + v147++;
            unsigned int v144 = v149 & v143;
            int v140 = &v159[8 * (v149 & v143)];
            uint64_t v145 = *(void *)v140;
            if (*(void *)v140 == -1) {
              goto LABEL_265;
            }
          }
          int v139 = HIDWORD(v160);
        }
      }
      if (v159 == v138) {
        int v142 = v139;
      }
      else {
        int v142 = v160;
      }
      if (v140 == &v159[8 * v142])
      {
        if (v167 >= HIDWORD(v167)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v166 + v167) = v85;
        LODWORD(v167) = v167 + 1;
      }
    }
    if (*v35)
    {
      *(void *)*(v29 - 2) = *(v29 - 3);
      uint64_t v86 = (uint64_t)*(v29 - 3);
      if (v86) {
        *(void *)(v86 + 16) = *(v29 - 2);
      }
    }
    const llvm::APInt *v35 = (llvm::UndefValue *)v33;
    if (v33)
    {
      uint64_t v89 = (llvm::UndefValue *)v33[1];
      uint64_t v88 = (llvm::UndefValue *)(v33 + 1);
      int v87 = v89;
      *(v29 - 3) = v89;
      if (v89) {
        *((void *)v87 + 2) = v29 - 3;
      }
      *(v29 - 2) = v88;
      *(void *)uint64_t v88 = v35;
    }
  }
  *(unsigned char *)(v37 + 552) = 1;
LABEL_127:
  while (1)
  {
    char v90 = sub_1CB845E74((uint64_t)this)
        ? *((unsigned char *)this + 17) & 0xFE | *((unsigned char *)v29 + 17) & 1
        : *((unsigned char *)v29 + 17) & 1;
    *((unsigned char *)v29 + 17) = v90;
    if (v29 == this) {
      break;
    }
    uint64_t v163 = v165;
    uint64_t v164 = 0x100000000;
    llvm::findDbgUsers((uint64_t)&v163, (uint64_t ***)v29);
    size_t v92 = (uint64_t ***)v163;
    if (v164)
    {
      uint64_t v153 = 8 * v164;
      do
      {
        int v154 = *v92++;
        uint64_t v155 = llvm::UndefValue::get(*v29, v91);
        llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v154, (llvm::Value *)v29, v155);
        v153 -= 8;
      }
      while (v153);
      size_t v92 = (uint64_t ***)v163;
    }
    if (v92 != (uint64_t ***)v165) {
      free(v92);
    }
    llvm::Instruction::moveBefore((llvm::Instruction *)v29, (llvm::Instruction *)this);
    uint64_t v29 = (llvm::UndefValue **)*((void *)v29[1] + 3);
  }
LABEL_55:
  uint64_t v44 = v167;
  if (v167)
  {
    uint64_t v107 = 0;
    while (1)
    {
      size_t v108 = (void *)*((void *)v166 + v107);
      uint64_t v163 = v108;
      int v109 = *(_DWORD *)(v37 + 64);
      if (!v109) {
        break;
      }
      uint64_t v110 = *(void *)(v37 + 48);
      int v111 = v109 - 1;
      unsigned int v112 = ((v108 >> 4) ^ (v108 >> 9)) & v111;
      uint64_t v113 = (uint64_t *)(v110 + 8 * v112);
      uint64_t v114 = (void *)*v113;
      if (v108 != (void *)*v113)
      {
        uint64_t v115 = 0;
        int v116 = 1;
        while (v114 != (void *)-4096)
        {
          if (v115) {
            BOOL v117 = 0;
          }
          else {
            BOOL v117 = v114 == (void *)-8192;
          }
          if (v117) {
            uint64_t v115 = v113;
          }
          unsigned int v118 = v112 + v116++;
          unsigned int v112 = v118 & v111;
          uint64_t v113 = (uint64_t *)(v110 + 8 * v112);
          uint64_t v114 = (void *)*v113;
          if (v108 == (void *)*v113) {
            goto LABEL_190;
          }
        }
        if (v115) {
          int v119 = v115;
        }
        else {
          int v119 = v113;
        }
        goto LABEL_184;
      }
LABEL_190:
      if (++v107 == v44) {
        goto LABEL_56;
      }
    }
    int v119 = 0;
LABEL_184:
    *sub_1CCE7BF00(v37 + 48, (uint64_t *)&v163, v119) = (uint64_t)v108;
    uint64_t v120 = *(void *)(v37 + 88);
    uint64_t v121 = *(void *)(v37 + 80);
    if (v120 == v121) {
      uint64_t v122 = 0;
    }
    else {
      uint64_t v122 = ((v120 - v121) << 6) - 1;
    }
    uint64_t v123 = *(void *)(v37 + 112);
    unint64_t v124 = v123 + *(void *)(v37 + 104);
    if (v122 == v124)
    {
      sub_1CCE7C1C0(v37 + 72);
      uint64_t v121 = *(void *)(v37 + 80);
      uint64_t v123 = *(void *)(v37 + 112);
      unint64_t v124 = *(void *)(v37 + 104) + v123;
    }
    *(void *)(*(void *)(v121 + ((v124 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v124 & 0x1FF)) = v108;
    *(void *)(v37 + 112) = v123 + 1;
    goto LABEL_190;
  }
LABEL_56:
  if (v159 != v158) {
    free(v159);
  }
  if (v166 != v168) {
    free(v166);
  }
}

uint64_t sub_1CCE6E7A8(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    BOOL v5 = v4 >= 0x1C;
    unsigned int v6 = v4 - 28;
    if (v5)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        return 0;
      }
      BOOL v8 = !*(void *)(v7 + 8) && v6 == a2;
      if (!v8 || sub_1CB845E74(a1) && (~*(unsigned __int8 *)(a1 + 17) & 0xF2) != 0) {
        return 0;
      }
      else {
        return a1;
      }
    }
  }
  return result;
}

llvm::BinaryOperator *llvm::ReassociatePass::RemoveFactorFromExpression(llvm::ReassociatePass *this, llvm::Value *a2, const void **a3)
{
  v95[24] = *MEMORY[0x1E4F143B8];
  BOOL v5 = (llvm::UndefValue **)sub_1CCE6F0D0((uint64_t)a2, 17, 18);
  if (!v5) {
    return 0;
  }
  int v93 = v95;
  uint64_t v94 = 0x800000000;
  uint64_t v81 = v5;
  *((unsigned char *)this + 552) |= sub_1CCE6F148(v5, (uint64_t)&v93);
  char v90 = v92;
  uint64_t v91 = 0x800000000;
  if (v94 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v94)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v94;
    do
    {
      BOOL v8 = (char *)v93 + 24 * v6;
      unsigned int v9 = *(llvm::Value **)v8;
      if (*((_DWORD *)v8 + 4) > 0x40u) {
        operator new[]();
      }
      uint64_t v10 = *((void *)v8 + 1);
      Ranuint64_t k = llvm::ReassociatePass::getRank(this, v9);
      int v12 = v91;
      if (v10 + (unint64_t)v91 > HIDWORD(v91)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v10)
      {
        uint64_t v13 = (char *)v90 + 16 * v91;
        uint64_t v14 = v10;
        do
        {
          *uint64_t v13 = Rank;
          v13[1] = v9;
          v13 += 2;
          --v14;
        }
        while (v14);
        int v12 = v91;
      }
      LODWORD(v91) = v12 + v10;
      ++v6;
    }
    while (v6 != v7);
  }
  uint64_t v15 = v91;
  if (!v91)
  {
LABEL_100:
    llvm::ReassociatePass::RewriteExprTree((uint64_t)this, v81, (uint64_t)&v90);
    uint64_t v49 = 0;
    goto LABEL_132;
  }
  uint64_t v16 = 0;
  unsigned int v17 = (void **)(a3 + 4);
  uint64_t v80 = 0;
  do
  {
    unsigned int v18 = (char *)v90 + 16 * v16;
    uint64_t v19 = v18[1];
    if ((const void **)v19 == a3)
    {
      int v53 = v91;
      int v54 = (char *)v90 + 16 * v91;
      if (v54 != (char *)(v18 + 2))
      {
        memmove(v18, v18 + 2, v54 - (char *)(v18 + 2));
        int v53 = v91;
      }
      uint64_t v51 = (uint64_t)v81;
      char v52 = BYTE4(v80);
      int v50 = v53 - 1;
      LODWORD(v91) = v50;
      goto LABEL_104;
    }
    int v20 = *((unsigned __int8 *)a3 + 16);
    if (a3 && v20 == 16)
    {
      if (v19) {
        BOOL v21 = *(unsigned char *)(v19 + 16) == 16;
      }
      else {
        BOOL v21 = 0;
      }
      if (v21)
      {
        unsigned int v22 = *(_DWORD *)(v19 + 32);
        unsigned int v83 = v22;
        if (v22 > 0x40) {
          operator new[]();
        }
        unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
        if (!v22) {
          unint64_t v43 = 0;
        }
        __s2 = (void *)(v43 & ~*(void *)(v19 + 24));
        llvm::APInt::operator++((uint64_t)&__s2);
        unsigned int v44 = v83;
        unsigned int v45 = __s2;
        unsigned int v83 = 0;
        uint64_t v46 = *(unsigned int *)v17;
        if (v46 > 0x40) {
          BOOL v47 = memcmp(a3[3], __s2, ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8) == 0;
        }
        else {
          BOOL v47 = a3[3] == __s2;
        }
        int v48 = v47;
        if (v44 >= 0x41)
        {
          if (v45)
          {
            MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
            if (v83 >= 0x41)
            {
              if (__s2) {
                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
              }
            }
          }
        }
        if (v48)
        {
          size_t v77 = (char *)v90 + 16 * v16;
          int v78 = v91;
          int v79 = (char *)v90 + 16 * v91;
          if (v79 != v77 + 16)
          {
            memmove(v77, v77 + 16, v79 - (v77 + 16));
            int v78 = v91;
          }
          uint64_t v51 = (uint64_t)v81;
          int v50 = v78 - 1;
          LODWORD(v91) = v50;
          char v52 = 1;
          goto LABEL_104;
        }
      }
      goto LABEL_86;
    }
    if (a3 && v20 == 17 && v19 && *(unsigned char *)(v19 + 16) == 17)
    {
      uint64_t v24 = *(void *)(v19 + 32);
      if ((_UNKNOWN *)v24 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v85, (const llvm::detail::DoubleAPFloat *)(v19 + 32));
      }
      else
      {
        uint64_t v85 = *(void *)(v19 + 32);
        if ((*(_DWORD *)(v24 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        char v25 = *(unsigned char *)(v19 + 52);
        int v26 = v25 & 7;
        unsigned __int8 v88 = v88 & 0xF0 | v25 & 0xF;
        int v87 = *(_DWORD *)(v19 + 48);
        BOOL v28 = (v25 & 6) != 0 && v26 != 3;
        if (v26 == 1 || v28)
        {
          uint64_t v30 = *(unsigned int *)(v85 + 8);
          uint64_t v31 = (uint64_t *)&v86;
          if ((v30 - 64) <= 0xFFFFFF7F) {
            uint64_t v31 = v86;
          }
          uint64_t v34 = *(uint64_t **)(v19 + 40);
          int v33 = (uint64_t *)(v19 + 40);
          unsigned int v32 = v34;
          if ((*(_DWORD *)(*(v33 - 1) + 8) - 64) >= 0xFFFFFF80) {
            unsigned int v32 = v33;
          }
          if (v30 <= 0xFFFFFFBF)
          {
            unint64_t v35 = (unint64_t)(v30 + 64) >> 6;
            do
            {
              uint64_t v36 = *v32++;
              *v31++ = v36;
              --v35;
            }
            while (v35);
          }
        }
      }
      if ((_UNKNOWN *)v85 == &unk_1CFB2E344)
      {
        sub_1CBFC6FB8((uint64_t)v86);
        sub_1CBFC6FB8((uint64_t)(v86 + 4));
      }
      else
      {
        v88 ^= 8u;
      }
      if (*v17 != &unk_1CFB2E344)
      {
        int v37 = *((unsigned __int8 *)a3 + 52);
        char v38 = 0;
        switch(4 * (v37 & 7) + (v88 & 7))
        {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
            goto LABEL_83;
          case 0xA:
            if (((v88 ^ v37) & 8) != 0) {
              goto LABEL_82;
            }
            int v39 = llvm::detail::IEEEFloat::compareAbsoluteValue((llvm::detail::IEEEFloat *)(a3 + 4), (const llvm::detail::IEEEFloat *)&v85);
            if ((*((unsigned char *)a3 + 52) & 8) == 0) {
              goto LABEL_61;
            }
            if ((v39 | 2) == 2) {
              goto LABEL_82;
            }
            goto LABEL_62;
          case 0xF:
            goto LABEL_62;
          default:
            if (((v88 ^ v37) & 8) != 0) {
              goto LABEL_82;
            }
            goto LABEL_62;
        }
      }
      int v39 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)(a3 + 4), (const llvm::detail::DoubleAPFloat *)&v85);
LABEL_61:
      if (v39 == 1)
      {
LABEL_62:
        long long v40 = (char *)v90 + 16 * v16;
        int v41 = v91;
        uint64_t v42 = (char *)v90 + 16 * v91;
        if (v42 != v40 + 16)
        {
          memmove(v40, v40 + 16, v42 - (v40 + 16));
          int v41 = v91;
        }
        LODWORD(v91) = v41 - 1;
        char v38 = 1;
        uint64_t v80 = 0x100000001;
      }
      else
      {
LABEL_82:
        char v38 = 0;
      }
LABEL_83:
      if ((_UNKNOWN *)v85 == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v86);
      }
      else if ((*(_DWORD *)(v85 + 8) - 64) <= 0xFFFFFF7F && v86)
      {
        MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
      }
      if (v38) {
        break;
      }
    }
LABEL_86:
    ++v16;
  }
  while (v16 != v15);
  if ((v80 & 1) == 0) {
    goto LABEL_100;
  }
  int v50 = v91;
  uint64_t v51 = (uint64_t)v81;
  char v52 = BYTE4(v80);
LABEL_104:
  uint64_t v55 = *(void *)(v51 + 32);
  if (v50 == 1)
  {
    uint64_t v56 = *((void *)this + 6);
    size_t v84 = (const char *)v51;
    int v57 = *((_DWORD *)this + 16);
    if (!v57)
    {
      int v66 = 0;
      goto LABEL_121;
    }
    int v58 = v57 - 1;
    unsigned int v59 = v58 & ((v51 >> 4) ^ (v51 >> 9));
    int v60 = (uint64_t *)(v56 + 8 * v59);
    uint64_t v61 = *v60;
    if (v51 != *v60)
    {
      unsigned int v62 = 0;
      int v63 = 1;
      while (v61 != -4096)
      {
        if (v62) {
          BOOL v64 = 0;
        }
        else {
          BOOL v64 = v61 == -8192;
        }
        if (v64) {
          unsigned int v62 = v60;
        }
        unsigned int v65 = v59 + v63++;
        unsigned int v59 = v65 & v58;
        int v60 = (uint64_t *)(v56 + 8 * v59);
        uint64_t v61 = *v60;
        if (v51 == *v60) {
          goto LABEL_127;
        }
      }
      if (v62) {
        int v66 = v62;
      }
      else {
        int v66 = v60;
      }
LABEL_121:
      *sub_1CCE7BF00((uint64_t)this + 48, (uint64_t *)&v84, v66) = v51;
      uint64_t v67 = *((void *)this + 11);
      uint64_t v68 = *((void *)this + 10);
      if (v67 == v68) {
        uint64_t v69 = 0;
      }
      else {
        uint64_t v69 = ((v67 - v68) << 6) - 1;
      }
      uint64_t v70 = *((void *)this + 14);
      unint64_t v71 = v70 + *((void *)this + 13);
      if (v69 == v71)
      {
        sub_1CCE7C1C0((uint64_t)this + 72);
        uint64_t v68 = *((void *)this + 10);
        uint64_t v70 = *((void *)this + 14);
        unint64_t v71 = *((void *)this + 13) + v70;
      }
      *(void *)(*(void *)(v68 + ((v71 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v71 & 0x1FF)) = v51;
      *((void *)this + 14) = v70 + 1;
    }
LABEL_127:
    uint64_t v49 = (llvm::BinaryOperator *)*((void *)v90 + 1);
    if (v52)
    {
LABEL_128:
      size_t v84 = "neg";
      __int16 v89 = 259;
      if (v55) {
        unsigned int v72 = (llvm::Instruction *)(v55 - 24);
      }
      else {
        unsigned int v72 = 0;
      }
      uint64_t v49 = sub_1CCE705F4(v49, (llvm::Value *)&v84, v72, v51);
    }
  }
  else
  {
    llvm::ReassociatePass::RewriteExprTree((uint64_t)this, (llvm::UndefValue **)v51, (uint64_t)&v90);
    uint64_t v49 = (llvm::BinaryOperator *)v51;
    if (v52) {
      goto LABEL_128;
    }
  }
LABEL_132:
  if (v90 != v92) {
    free(v90);
  }
  uint64_t v73 = (char *)v93;
  if (v94)
  {
    uint64_t v74 = 24 * v94;
    do
    {
      if (*(_DWORD *)&v73[v74 - 8] >= 0x41u)
      {
        uint64_t v75 = *(void *)&v73[v74 - 16];
        if (v75) {
          MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
        }
      }
      v74 -= 24;
    }
    while (v74);
    uint64_t v73 = (char *)v93;
  }
  if (v73 != (char *)v95) {
    free(v73);
  }
  return v49;
}

uint64_t sub_1CCE6F0D0(uint64_t a1, int a2, int a3)
{
  uint64_t result = 0;
  if (a1)
  {
    unsigned int v5 = *(unsigned __int8 *)(a1 + 16);
    BOOL v6 = v5 >= 0x1C;
    unsigned int v7 = v5 - 28;
    if (v6)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      if (!v8 || *(void *)(v8 + 8)) {
        return 0;
      }
      BOOL v9 = v7 == a2 || v7 == a3;
      if (!v9 || sub_1CB845E74(a1) && (~*(unsigned __int8 *)(a1 + 17) & 0xF2) != 0) {
        return 0;
      }
      else {
        return a1;
      }
    }
  }
  return result;
}

uint64_t sub_1CCE6F148(void *a1, uint64_t a2)
{
  int v3 = a1;
  v162[24] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
    uint64_t v4 = **(void **)(v4 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
  if (v5 == 1)
  {
    unsigned int v135 = PrimitiveSizeInBits;
    unsigned int PrimitiveSizeInBits = v135;
  }
  int v145 = *((unsigned __int8 *)v3 + 16);
  uint64_t v160 = v162;
  uint64_t v161 = 0x800000000;
  uint64_t v141 = a2;
  unsigned int v138 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40) {
    operator new[]();
  }
  if (PrimitiveSizeInBits) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
  }
  else {
    LOBYTE(v7) = 0;
  }
  v159[0] = PrimitiveSizeInBits;
  uint64_t v158 = v7 & 1;
  unint64_t v8 = (v145 - 28);
  BOOL v9 = &v162[3 * v161];
  *BOOL v9 = v3;
  *((_DWORD *)v9 + 4) = v159[0];
  v9[1] = v158;
  v159[0] = 0;
  LODWORD(v161) = v161 + 1;
  unsigned int v10 = v161;
  uint64_t v153 = 0;
  int32x2_t v154 = 0;
  unsigned int v155 = 0;
  size_t v157 = v159;
  uint64_t v158 = 0x800000000;
  if (v161)
  {
    char v140 = 0;
    unsigned int v142 = v8 & 0xFFFFFFFE;
    v147[0] = v145 - 28;
    do
    {
      unsigned int v11 = v160;
      int v12 = (char *)v160 + 24 * v10;
      unsigned int v13 = *((_DWORD *)v12 - 2);
      int v3 = (void *)*((void *)v12 - 3);
      uint64_t v14 = (char *)*((void *)v12 - 2);
      *((_DWORD *)v12 - 2) = 0;
      unsigned int v15 = v10 - 1;
      LODWORD(v161) = v15;
      if (LODWORD(v11[3 * v15 + 2]) >= 0x41)
      {
        uint64_t v16 = v11[3 * v15 + 1];
        if (v16) {
          MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
        }
      }
      int v17 = *((_DWORD *)v3 + 5);
      unint64_t v18 = v17 & 0x7FFFFFF;
      int v146 = v3;
      if ((v17 & 0x7FFFFFF) != 0)
      {
        unint64_t v19 = 0;
        while (1)
        {
          if ((v17 & 0x40000000) != 0) {
            int v20 = (void *)*(v3 - 1);
          }
          else {
            int v20 = &v3[-4 * v18];
          }
          uint64_t v21 = v20[4 * v19];
          uint64_t v152 = v21;
          unsigned int v151 = v13;
          if (v13 > 0x40) {
            operator new[]();
          }
          __src = v14;
          uint64_t v22 = sub_1CCE6E7A8(v21, v8);
          if (v22)
          {
            BOOL v23 = v14;
            unsigned int v149 = v13;
            *(void *)&v147[1] = v22;
            BOOL v148 = v14;
            if (v161 >= HIDWORD(v161))
            {
              if (v160 > &v147[1] || (char *)v160 + 24 * v161 <= (char *)&v147[1]) {
                sub_1CD77F450();
              }
              sub_1CD77F450();
            }
            uint64_t v24 = (char *)v160 + 24 * v161;
            *(void *)uint64_t v24 = *(void *)&v147[1];
            *((_DWORD *)v24 + 4) = v149;
            *((void *)v24 + 1) = v148;
            unsigned int v149 = 0;
            LODWORD(v161) = v161 + 1;
            goto LABEL_158;
          }
          BOOL v23 = v14;
          *(void *)&v147[1] = 0;
          uint64_t v25 = v153;
          unsigned int v26 = v155;
          int v27 = sub_1CC01F510(v153, v155, v21, &v147[1]);
          uint64_t v28 = *(void *)&v147[1];
          if (v27) {
            BOOL v29 = *(void *)&v147[1] == v25 + 24 * v26;
          }
          else {
            BOOL v29 = 1;
          }
          if (!v29)
          {
            char v38 = (void **)(*(void *)&v147[1] + 8);
            if (!v14)
            {
LABEL_106:
              unint64_t v8 = v147[0];
LABEL_107:
              uint64_t v74 = *(void *)(v21 + 8);
              if (!v74 || *(void *)(v74 + 8)) {
                goto LABEL_158;
              }
              unsigned int v50 = *(_DWORD *)(v28 + 16);
              if (v50 > 0x40)
              {
                unsigned int v144 = v38;
                llvm::APInt::reallocate((uint64_t)&__src, v50);
                unsigned int v50 = v151;
                if (v151 <= 0x40)
                {
                  BOOL v23 = (char *)*v144;
                  __src = *v144;
                }
                else
                {
                  BOOL v23 = (char *)__src;
                  memcpy(__src, *v144, (((unint64_t)v151 + 63) >> 3) & 0x3FFFFFF8);
                }
                if (*(_DWORD *)(v28 + 16) >= 0x41u && *v144) {
                  MEMORY[0x1D25D9CB0](*v144, 0x1000C8000313F17);
                }
              }
              else
              {
                BOOL v23 = (char *)*v38;
                __src = *v38;
                unsigned int v151 = v50;
              }
              *(void *)uint64_t v28 = -8192;
              int32x2_t v154 = vadd_s32(v154, (int32x2_t)0x1FFFFFFFFLL);
LABEL_118:
              unsigned int v75 = *(unsigned __int8 *)(v21 + 16);
              if (v75 >= 0x1C)
              {
                if (v145 == 46) {
                  goto LABEL_268;
                }
                if (v145 == 45)
                {
                  if (v75 == 43 && (sub_1CBF535C4((uint64_t)&v147[1], *(llvm::Constant **)(v21 - 64)) & 1) != 0) {
                    goto LABEL_123;
                  }
                  if (v8 == 18)
                  {
LABEL_268:
                    if (sub_1CB845E74(v21))
                    {
                      unsigned int v78 = *(unsigned __int8 *)(v21 + 16);
                      if (v78 <= 0x1B) {
                        unsigned int v79 = *(unsigned __int16 *)(v21 + 18);
                      }
                      else {
                        unsigned int v79 = v78 - 28;
                      }
                      if (v79 == 12)
                      {
LABEL_123:
                        *(void *)&v147[1] = sub_1CCE77A04((unsigned __int8 *)v21, v76, v77);
                        unsigned int v149 = v50;
                        if (v50 > 0x40) {
                          operator new[]();
                        }
                        BOOL v148 = v23;
                        int v3 = v146;
                        if (v161 >= HIDWORD(v161))
                        {
                          if (v160 > &v147[1] || (char *)v160 + 24 * v161 <= (char *)&v147[1]) {
                            sub_1CD77F450();
                          }
                          sub_1CD77F450();
                        }
                        int v93 = (char *)v160 + 24 * v161;
                        *(void *)int v93 = *(void *)&v147[1];
                        *((_DWORD *)v93 + 4) = v149;
                        *((void *)v93 + 1) = v148;
                        unsigned int v149 = 0;
                        LODWORD(v161) = v161 + 1;
                        char v140 = 1;
                        goto LABEL_158;
                      }
                      if (v79 == 16)
                      {
                        if ((*(unsigned char *)(v21 + 17) & 0x10) != 0)
                        {
                          int v80 = *(_DWORD *)(v21 + 20);
                          if ((v80 & 0x40000000) != 0) {
                            uint64_t v81 = *(llvm::Constant ***)(v21 - 8);
                          }
                          else {
                            uint64_t v81 = (llvm::Constant **)(v21 - 32 * (v80 & 0x7FFFFFF));
                          }
                          if (sub_1CC0241FC((uint64_t)&v156, *v81)) {
                            goto LABEL_123;
                          }
                        }
                        else
                        {
                          int v94 = *(_DWORD *)(v21 + 20);
                          if ((v94 & 0x40000000) != 0) {
                            size_t v95 = *(llvm::Constant ***)(v21 - 8);
                          }
                          else {
                            size_t v95 = (llvm::Constant **)(v21 - 32 * (v94 & 0x7FFFFFF));
                          }
                          if (sub_1CC02435C((uint64_t)&v156, *v95)) {
                            goto LABEL_123;
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (v158 >= (unint64_t)HIDWORD(v158)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v157 + v158) = v21;
              LODWORD(v158) = v158 + 1;
              if (v26)
              {
                unsigned int v82 = ((v21 >> 4) ^ (v21 >> 9)) & (v26 - 1);
                unsigned int v83 = (uint64_t *)(v25 + 24 * v82);
                uint64_t v84 = *v83;
                if (v21 != *v83)
                {
                  uint64_t v85 = 0;
                  int v86 = 1;
                  while (v84 != -4096)
                  {
                    if (v85) {
                      BOOL v87 = 0;
                    }
                    else {
                      BOOL v87 = v84 == -8192;
                    }
                    if (v87) {
                      uint64_t v85 = v83;
                    }
                    unsigned int v88 = v82 + v86++;
                    unsigned int v82 = v88 & (v26 - 1);
                    unsigned int v83 = (uint64_t *)(v25 + 24 * v82);
                    uint64_t v84 = *v83;
                    if (v21 == *v83) {
                      goto LABEL_152;
                    }
                  }
                  if (v85) {
                    __int16 v89 = v85;
                  }
                  else {
                    __int16 v89 = v83;
                  }
LABEL_151:
                  unsigned int v83 = sub_1CCE7A38C((uint64_t)&v153, &v152, v89);
                  *((_DWORD *)v83 + 4) = 1;
                  uint64_t *v83 = v21;
                  v83[1] = 0;
                }
LABEL_152:
                if (*((_DWORD *)v83 + 4) > 0x40u || v50 > 0x40)
                {
                  char v90 = (void **)(v83 + 1);
                  llvm::APInt::reallocate((uint64_t)(v83 + 1), v50);
                  uint64_t v91 = *((unsigned int *)v83 + 4);
                  BOOL v23 = (char *)__src;
                  if (v91 <= 0x40) {
                    *char v90 = __src;
                  }
                  else {
                    memcpy(*v90, __src, ((unint64_t)(v91 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  int v3 = v146;
LABEL_158:
                  if (v151 >= 0x41 && v23 != 0) {
                    MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
                  }
                  goto LABEL_163;
                }
                v83[1] = (uint64_t)v23;
                *((_DWORD *)v83 + 4) = v50;
                int v3 = v146;
                goto LABEL_163;
              }
              __int16 v89 = 0;
              goto LABEL_151;
            }
            unint64_t v40 = *(unsigned int *)(*(void *)&v147[1] + 16);
            if (v40 > 0x40)
            {
              int v41 = 0;
              int64_t v42 = (v40 + 63) >> 6;
              do
              {
                if (v42-- < 1) {
                  break;
                }
                unint64_t v44 = *((void *)*v38 + v42);
                v41 += __clz(v44);
              }
              while (!v44);
              int v45 = v40 | 0xFFFFFFC0;
              if ((v40 & 0x3F) == 0) {
                int v45 = 0;
              }
              if (v41 + v45 == v40)
              {
                uint64_t v46 = (void **)(*(void *)&v147[1] + 8);
                llvm::APInt::reallocate(*(void *)&v147[1] + 8, v13);
                uint64_t v47 = *(unsigned int *)(v28 + 16);
                if (v47 <= 0x40) {
                  *uint64_t v46 = v14;
                }
                else {
                  memcpy(*v46, v14, ((unint64_t)(v47 + 63) >> 3) & 0x3FFFFFF8);
                }
                int v3 = v146;
                char v38 = (void **)(v28 + 8);
                unint64_t v8 = v147[0];
                goto LABEL_107;
              }
            }
            else if (!*v38)
            {
              *(void *)(*(void *)&v147[1] + 8) = v14;
              *(_DWORD *)(v28 + 16) = v13;
              goto LABEL_105;
            }
            if (v142 != 28)
            {
              if (v147[0] != 30)
              {
                if ((v145 - 41) > 1)
                {
                  if (v40 >= 4)
                  {
                    int v143 = (void **)(*(void *)&v147[1] + 8);
                    char v52 = v40 - 2;
                    if (v40 > 0x40) {
                      operator new[]();
                    }
                    LODWORD(v148) = *(_DWORD *)(*(void *)&v147[1] + 16);
                    uint64_t v139 = 1 << v52;
                    *(void *)&v147[1] = 1 << v52;
                    llvm::APInt::operator+=((uint64_t)&v147[1], v40);
                    unsigned int v53 = v148;
                    unint64_t v54 = *(void *)&v147[1];
                    LODWORD(v148) = 0;
                    uint64_t v55 = *(unsigned int *)(v28 + 16);
                    unint64_t v8 = v147[0];
                    if (v55 >= 0x41)
                    {
                      uint64_t v104 = 0;
                      unsigned int v105 = (unint64_t *)*v143;
                      unint64_t v106 = (unint64_t)(v55 + 63) >> 6;
                      uint64_t v107 = (uint64_t *)v14;
                      unint64_t v108 = v106;
                      do
                      {
                        uint64_t v109 = *v107++;
                        unint64_t v110 = v109 + *v105;
                        BOOL v111 = v110 + 1 <= *v105;
                        if (v104)
                        {
                          ++v110;
                          uint64_t v104 = v111;
                        }
                        else
                        {
                          uint64_t v104 = v110 < *v105;
                        }
                        *v105++ = v110;
                        --v108;
                      }
                      while (v108);
                      char v38 = v143;
                      *((void *)*v143 + (v106 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v55;
                      unint64_t v8 = v147[0];
                    }
                    else
                    {
                      char v38 = v143;
                      if (v55) {
                        unint64_t v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v55;
                      }
                      else {
                        unint64_t v56 = 0;
                      }
                      *int v143 = (void *)(v56 & (unint64_t)&v14[(void)*v143]);
                    }
                    while (1)
                    {
                      while (1)
                      {
                        uint64_t v57 = *(unsigned int *)(v28 + 16);
                        if (v57 <= 0x40) {
                          break;
                        }
                        unsigned int v59 = (unint64_t *)*v38;
                        unint64_t v60 = (unint64_t)(v57 + 63) >> 6;
                        uint64_t v61 = 8 * v60;
                        while (v61)
                        {
                          unint64_t v62 = *(void *)((char *)*v38 + v61 - 8);
                          unint64_t v63 = *(void *)(v54 - 8 + v61);
                          v61 -= 8;
                          if (v62 != v63)
                          {
                            if (v62 <= v63) {
                              goto LABEL_165;
                            }
                            break;
                          }
                        }
                        uint64_t v64 = 0;
                        unsigned int v65 = (unint64_t *)v139;
                        unint64_t v66 = (unint64_t)(v57 + 63) >> 6;
                        do
                        {
                          unint64_t v67 = *v65++;
                          unint64_t v68 = *v59 - v67;
                          BOOL v69 = *v59 < v67;
                          unint64_t v70 = *v59 + ~v67;
                          if (v64)
                          {
                            uint64_t v64 = v70 >= *v59;
                          }
                          else
                          {
                            unint64_t v70 = v68;
                            uint64_t v64 = v69;
                          }
                          *v59++ = v70;
                          --v66;
                        }
                        while (v66);
                        *((void *)*v38 + (v60 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
                      }
                      if ((unint64_t)*v38 < v54) {
                        break;
                      }
                      if (v57) {
                        unint64_t v58 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
                      }
                      else {
                        unint64_t v58 = 0;
                      }
                      *char v38 = (void *)(v58 & ((unint64_t)*v38 - v139));
                    }
LABEL_165:
                    if (v53 >= 0x41 && v54)
                    {
                      MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
                      char v38 = v143;
                    }
                    int v3 = v146;
                    goto LABEL_107;
                  }
                  if (v40 == 3) {
                    char v71 = -2;
                  }
                  else {
                    char v71 = -1;
                  }
                  int v72 = 1 << (v71 + v40);
                  LODWORD(v51) = v72 + __src + *(_DWORD *)v38;
                  do
                    unint64_t v51 = (v51 - v72);
                  while (v51 >= v72 + (int)v40);
                }
                else
                {
                  if (v40 >= 0x41)
                  {
                    uint64_t v96 = 0;
                    BOOL v97 = 0;
                    uint64_t v98 = (char *)*v38;
                    unint64_t v99 = (v40 + 63) >> 6;
                    do
                    {
                      unint64_t v100 = *(void *)&v98[v96];
                      unint64_t v101 = *(void *)&v14[v96] + v100;
                      BOOL v102 = v101 < v100;
                      BOOL v103 = v101 + 1 <= v100;
                      if (v97)
                      {
                        ++v101;
                        BOOL v97 = v103;
                      }
                      else
                      {
                        BOOL v97 = v102;
                      }
                      *(void *)&v98[v96] = v101;
                      v96 += 8;
                    }
                    while (8 * v99 != v96);
                    *((void *)*v38 + (v99 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
                    goto LABEL_105;
                  }
                  unint64_t v51 = (unint64_t)&v14[(void)*v38];
                }
                unint64_t v73 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
                if (!v40) {
                  unint64_t v73 = 0;
                }
                *char v38 = (void *)(v73 & v51);
                goto LABEL_105;
              }
              if (v40 > 0x40)
              {
                *(void *)*char v38 = 0;
                bzero((char *)*v38 + 8, (((v40 + 63) >> 3) - 8) & 0xFFFFFFF8);
                char v38 = (void **)(v28 + 8);
              }
              else
              {
                *char v38 = 0;
              }
            }
LABEL_105:
            int v3 = v146;
            goto LABEL_106;
          }
          uint64_t v30 = *(void *)(v21 + 8);
          if (v30 && !*(void *)(v30 + 8))
          {
            unsigned int v50 = v13;
            unint64_t v8 = v147[0];
            goto LABEL_118;
          }
          unint64_t v8 = v147[0];
          if (v158 >= (unint64_t)HIDWORD(v158)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v157 + v158) = v21;
          LODWORD(v158) = v158 + 1;
          if (!v26) {
            break;
          }
          unsigned int v31 = (v26 - 1) & ((v21 >> 4) ^ (v21 >> 9));
          unsigned int v32 = (uint64_t *)(v25 + 24 * v31);
          uint64_t v33 = *v32;
          if (v21 != *v32)
          {
            uint64_t v34 = 0;
            int v35 = 1;
            while (v33 != -4096)
            {
              if (v34) {
                BOOL v36 = 0;
              }
              else {
                BOOL v36 = v33 == -8192;
              }
              if (v36) {
                uint64_t v34 = v32;
              }
              unsigned int v37 = v31 + v35++;
              unsigned int v31 = v37 & (v26 - 1);
              unsigned int v32 = (uint64_t *)(v25 + 24 * v31);
              uint64_t v33 = *v32;
              if (v21 == *v32) {
                goto LABEL_66;
              }
            }
            if (v34) {
              int v39 = v34;
            }
            else {
              int v39 = v32;
            }
            goto LABEL_65;
          }
LABEL_66:
          if (*((_DWORD *)v32 + 4) > 0x40u)
          {
            int v48 = (void **)(v32 + 1);
            llvm::APInt::reallocate((uint64_t)(v32 + 1), v13);
            uint64_t v49 = *((unsigned int *)v32 + 4);
            BOOL v23 = (char *)__src;
            if (v49 <= 0x40) {
              *int v48 = __src;
            }
            else {
              memcpy(*v48, __src, ((unint64_t)(v49 + 63) >> 3) & 0x3FFFFFF8);
            }
            goto LABEL_158;
          }
          v32[1] = (uint64_t)v14;
          *((_DWORD *)v32 + 4) = v13;
LABEL_163:
          ++v19;
          int v17 = *((_DWORD *)v3 + 5);
          unint64_t v18 = v17 & 0x7FFFFFF;
          if (v19 >= v18) {
            goto LABEL_207;
          }
        }
        int v39 = 0;
LABEL_65:
        unsigned int v32 = sub_1CCE7A38C((uint64_t)&v153, &v152, v39);
        *((_DWORD *)v32 + 4) = 1;
        *unsigned int v32 = v21;
        v32[1] = 0;
        goto LABEL_66;
      }
LABEL_207:
      if (v13 >= 0x41 && v14) {
        MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
      }
      unsigned int v10 = v161;
    }
    while (v161);
    uint64_t v112 = v158;
    if (v158)
    {
      uint64_t v113 = 0;
      uint64_t v114 = v153;
      int v115 = v155;
      uint64_t v116 = v153 + 24 * v155;
      a2 = v141;
      while (1)
      {
        uint64_t v117 = *((void *)v157 + v113);
        *(void *)&v147[1] = 0;
        if (sub_1CC01F510(v114, v115, v117, &v147[1])) {
          BOOL v118 = *(void *)&v147[1] == v116;
        }
        else {
          BOOL v118 = 1;
        }
        if (v118) {
          goto LABEL_226;
        }
        unsigned int v119 = *(_DWORD *)(*(void *)&v147[1] + 16);
        if (v119 > 0x40) {
          operator new[]();
        }
        uint64_t v120 = *(char **)(*(void *)&v147[1] + 8);
        if (!v120) {
          goto LABEL_226;
        }
        *(void *)(*(void *)&v147[1] + 8) = 0;
        *(void *)&v147[1] = v117;
        unsigned int v149 = v119;
        BOOL v148 = v120;
        uint64_t v121 = *(unsigned int *)(v141 + 8);
        unint64_t v122 = *(void *)v141;
        if (v121 >= *(_DWORD *)(v141 + 12))
        {
          unint64_t v125 = v121 + 1;
          BOOL v126 = v122 + 24 * v121 > (unint64_t)&v147[1];
          if (v122 <= (unint64_t)&v147[1] && v126)
          {
            size_t v127 = (char *)&v147[1] - v122;
            sub_1CCE7A724(v141, v125);
            unint64_t v122 = *(void *)v141;
            uint64_t v123 = &v127[*(void *)v141];
            goto LABEL_223;
          }
          sub_1CCE7A724(v141, v125);
          unint64_t v122 = *(void *)v141;
        }
        uint64_t v123 = (char *)&v147[1];
LABEL_223:
        uint64_t v124 = v122 + 24 * *(unsigned int *)(v141 + 8);
        *(void *)uint64_t v124 = *(void *)v123;
        *(_DWORD *)(v124 + 16) = *((_DWORD *)v123 + 4);
        *(void *)(v124 + 8) = *((void *)v123 + 1);
        *((_DWORD *)v123 + 4) = 0;
        ++*(_DWORD *)(v141 + 8);
        if (v149 >= 0x41 && v148) {
          MEMORY[0x1D25D9CB0](v148, 0x1000C8000313F17);
        }
LABEL_226:
        if (++v113 == v112)
        {
          int v3 = v146;
          unint64_t v8 = v147[0];
          goto LABEL_234;
        }
      }
    }
    a2 = v141;
  }
  else
  {
    char v140 = 0;
  }
LABEL_234:
  if (!*(_DWORD *)(a2 + 8))
  {
    __src = llvm::ConstantExpr::getBinOpIdentity((llvm::ConstantExpr *)v8, (llvm::ConstantFP *)*v3, 0, 0);
    LODWORD(v148) = v138;
    if (v138 > 0x40) {
      operator new[]();
    }
    if (v138) {
      unint64_t v134 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v138;
    }
    else {
      LOBYTE(v134) = 0;
    }
    *(void *)&v147[1] = v134 & 1;
    sub_1CD77F408(a2, &__src, (uint64_t)&v147[1]);
    if (v148 >= 0x41 && *(void *)&v147[1]) {
      MEMORY[0x1D25D9CB0](*(void *)&v147[1], 0x1000C8000313F17);
    }
  }
  if (v157 != v159) {
    free(v157);
  }
  uint64_t v128 = v153;
  if (v155)
  {
    uint64_t v129 = 24 * v155;
    uint64_t v130 = v153 + 8;
    do
    {
      uint64_t v131 = *(void *)(v130 - 8);
      if (v131 != -4096 && v131 != -8192 && *(_DWORD *)(v130 + 8) >= 0x41u && *(void *)v130) {
        MEMORY[0x1D25D9CB0](*(void *)v130, 0x1000C8000313F17);
      }
      v130 += 24;
      v129 -= 24;
    }
    while (v129);
  }
  MEMORY[0x1D25D9CD0](v128, 8);
  unsigned int v132 = (char *)v160;
  if (v161)
  {
    uint64_t v136 = 24 * v161;
    do
    {
      if (*(_DWORD *)&v132[v136 - 8] >= 0x41u)
      {
        uint64_t v137 = *(void *)&v132[v136 - 16];
        if (v137) {
          MEMORY[0x1D25D9CB0](v137, 0x1000C8000313F17);
        }
      }
      v136 -= 24;
    }
    while (v136);
    unsigned int v132 = (char *)v160;
  }
  if (v132 != (char *)v162) {
    free(v132);
  }
  return v140 & 1;
}

llvm::Value *sub_1CCE705F4(llvm::BinaryOperator *this, llvm::Value *a2, llvm::Instruction *a3, uint64_t a4)
{
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
    int v5 = *(unsigned __int8 *)(**(void **)(*(void *)this + 16) + 8);
  }
  else {
    int v5 = *(_DWORD *)(*(void *)this + 8);
  }
  if (v5 == 13)
  {
    return llvm::BinaryOperator::CreateNeg(this, a2, a3, a3);
  }
  else
  {
    unsigned int v7 = *(unsigned __int8 *)(a4 + 16);
    unint64_t v8 = llvm::UnaryOperator::Create(12, (uint64_t *)this, (const char **)a2, (uint64_t)a3);
    BOOL v9 = v8;
    if (a4 && v7 >= 0x1C) {
      llvm::Instruction::copyIRFlags((uint64_t)v8, a4, 1);
    }
    return v9;
  }
}

uint64_t llvm::ReassociatePass::CombineXorOpnd(llvm::ReassociatePass *this, llvm::Instruction *a2, llvm::reassociate::XorOpnd *a3, const void **a4, llvm::Value **a5)
{
  if (!*((unsigned char *)a3 + 36)) {
    return 0;
  }
  uint64_t v8 = *((unsigned int *)a3 + 6);
  if (v8 <= 0x40)
  {
    if (!*((void *)a3 + 2)) {
      return 0;
    }
LABEL_11:
    uint64_t v15 = *(void *)(*(void *)a3 + 8);
    if (!v15 || *(void *)(v15 + 8)) {
      return 0;
    }
    if (v8 > 0x40)
    {
      if (!memcmp(*((const void **)a3 + 2), *a4, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8)) {
        operator new[]();
      }
      return 0;
    }
    unint64_t v16 = *((void *)a3 + 2);
    if ((const void *)v16 != *a4) {
      return 0;
    }
    int v17 = (llvm::Value *)*((void *)a3 + 1);
    unint64_t v18 = ~v16;
    unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!v8) {
      unint64_t v19 = 0;
    }
    unsigned int v44 = *((_DWORD *)a3 + 6);
    unint64_t v43 = v19 & v18;
    *a5 = sub_1CCE709E4((uint64_t)a2, v17, (llvm::LLVMContext *)&v43);
    if (v44 >= 0x41 && v43) {
      MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
    }
    uint64_t v20 = *((unsigned int *)a4 + 2);
    if (v20 > 0x40)
    {
      uint64_t v21 = *a4;
      uint64_t v22 = (uint64_t *)*((void *)a3 + 2);
      unint64_t v23 = (unint64_t)(v20 + 63) >> 6;
      do
      {
        uint64_t v24 = *v22++;
        *v21++ ^= v24;
        --v23;
      }
      while (v23);
    }
    else
    {
      *a4 = (const void *)((unint64_t)*a4 ^ *((void *)a3 + 2));
    }
    uint64_t v25 = *(void *)a3;
    if (v25) {
      BOOL v26 = *(unsigned __int8 *)(v25 + 16) >= 0x1Cu;
    }
    else {
      BOOL v26 = 0;
    }
    if (!v26) {
      return 1;
    }
    uint64_t v27 = *((void *)this + 6);
    unint64_t v43 = v25;
    int v28 = *((_DWORD *)this + 16);
    if (v28)
    {
      int v29 = v28 - 1;
      unsigned int v30 = v29 & ((v25 >> 4) ^ (v25 >> 9));
      unsigned int v31 = (uint64_t *)(v27 + 8 * v30);
      uint64_t v32 = *v31;
      if (v25 == *v31) {
        return 1;
      }
      uint64_t v33 = 0;
      int v34 = 1;
      while (v32 != -4096)
      {
        if (v33) {
          BOOL v35 = 0;
        }
        else {
          BOOL v35 = v32 == -8192;
        }
        if (v35) {
          uint64_t v33 = v31;
        }
        unsigned int v36 = v30 + v34++;
        unsigned int v30 = v36 & v29;
        unsigned int v31 = (uint64_t *)(v27 + 8 * v30);
        uint64_t v32 = *v31;
        if (v25 == *v31) {
          return 1;
        }
      }
      if (v33) {
        unsigned int v37 = v33;
      }
      else {
        unsigned int v37 = v31;
      }
    }
    else
    {
      unsigned int v37 = 0;
    }
    *sub_1CCE7BF00((uint64_t)this + 48, (uint64_t *)&v43, v37) = v25;
    uint64_t v38 = *((void *)this + 11);
    uint64_t v39 = *((void *)this + 10);
    if (v38 == v39) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = ((v38 - v39) << 6) - 1;
    }
    uint64_t v41 = *((void *)this + 14);
    unint64_t v42 = v41 + *((void *)this + 13);
    if (v40 == v42)
    {
      sub_1CCE7C1C0((uint64_t)this + 72);
      uint64_t v39 = *((void *)this + 10);
      uint64_t v41 = *((void *)this + 14);
      unint64_t v42 = *((void *)this + 13) + v41;
    }
    *(void *)(*(void *)(v39 + ((v42 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v42 & 0x1FF)) = v25;
    *((void *)this + 14) = v41 + 1;
    return 1;
  }
  int v9 = 0;
  int64_t v10 = (unint64_t)(v8 + 63) >> 6;
  do
  {
    if (v10-- < 1) {
      break;
    }
    unint64_t v12 = *(void *)(*((void *)a3 + 2) + 8 * v10);
    v9 += __clz(v12);
  }
  while (!v12);
  uint64_t result = 0;
  int v14 = v8 | 0xFFFFFFC0;
  if ((v8 & 0x3F) == 0) {
    int v14 = 0;
  }
  if (v9 + v14 != v8) {
    goto LABEL_11;
  }
  return result;
}

llvm::Value *sub_1CCE709E4(uint64_t a1, llvm::Value *a2, llvm::LLVMContext *a3)
{
  uint64_t v6 = *((unsigned int *)a3 + 2);
  if (v6 <= 0x40)
  {
    if (*(void *)a3)
    {
      if (v6) {
        BOOL v7 = *(void *)a3 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
      }
      else {
        BOOL v7 = 1;
      }
      if (v7) {
        return a2;
      }
      goto LABEL_16;
    }
    return 0;
  }
  int v8 = 0;
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  do
  {
    if (v9-- < 1) {
      break;
    }
    unint64_t v11 = *(void *)(*(void *)a3 + 8 * v9);
    v8 += __clz(v11);
  }
  while (!v11);
  int v12 = v6 | 0xFFFFFFC0;
  if ((v6 & 0x3F) == 0) {
    int v12 = 0;
  }
  if (v8 + v12 == v6) {
    return 0;
  }
  if (llvm::APInt::countTrailingOnesSlowCase(a3) == v6) {
    return a2;
  }
LABEL_16:
  unsigned int v13 = *(llvm::ConstantInt ***)a2;
  Splat = llvm::ConstantInt::get(**(llvm::ConstantInt ***)a2, a3, a3);
  if ((v13[1] & 0xFE) == 0x12) {
    Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v13 + 8) | ((unint64_t)(*((_DWORD *)v13 + 2) == 19) << 32)), (uint64_t)Splat);
  }
  v29[0] = "and.ra";
  __int16 v30 = 259;
  a2 = llvm::BinaryOperator::Create(28, a2, (uint64_t)Splat, v29, a1);
  uint64_t v15 = *(unsigned __int8 **)(a1 + 48);
  int v28 = v15;
  if (v15) {
    llvm::MetadataTracking::track((uint64_t)&v28, v15, 2);
  }
  unint64_t v16 = (unsigned __int8 **)((char *)a2 + 48);
  if (&v28 != (unsigned __int8 **)((char *)a2 + 48))
  {
    int v17 = *v16;
    if (*v16)
    {
      int v20 = *v17;
      if ((v20 - 4) > 0x1E)
      {
        if ((v20 - 3) >= 0xFFFFFFFE) {
          unint64_t v23 = *v16;
        }
        else {
          unint64_t v23 = 0;
        }
        if ((v20 - 3) < 0xFFFFFFFE)
        {
          if (v20 == 3) {
            *((void *)v17 + 1) = 0;
          }
          goto LABEL_22;
        }
        unint64_t v22 = (unint64_t)(v23 + 8);
      }
      else
      {
        if ((v17[1] & 0x7F) != 2 && !*((_DWORD *)v17 + 3)) {
          goto LABEL_22;
        }
        uint64_t v21 = *((void *)v17 + 2);
        if ((v21 & 4) == 0) {
          goto LABEL_22;
        }
        unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF8;
        if (!v22) {
          goto LABEL_22;
        }
      }
      v29[0] = (char *)a2 + 48;
      sub_1CC5FA668(v22 + 16, v29);
    }
LABEL_22:
    unint64_t v18 = v28;
    *unint64_t v16 = v28;
    if (v18) {
      llvm::MetadataTracking::retrack((uint64_t)&v28, v18, (uint64_t)a2 + 48);
    }
    return a2;
  }
  if (!v28) {
    return a2;
  }
  int v24 = *v28;
  if ((v24 - 4) > 0x1E)
  {
    if ((v24 - 3) >= 0xFFFFFFFE) {
      uint64_t v27 = v28;
    }
    else {
      uint64_t v27 = 0;
    }
    if ((v24 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v26 = (unint64_t)(v27 + 8);
LABEL_51:
      v29[0] = (const char *)&v28;
      sub_1CC5FA668(v26 + 16, v29);
      return a2;
    }
    if (v24 == 3) {
      *((void *)v28 + 1) = 0;
    }
  }
  else if ((v28[1] & 0x7F) == 2 || *((_DWORD *)v28 + 3))
  {
    uint64_t v25 = *((void *)v28 + 2);
    if ((v25 & 4) != 0)
    {
      unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFF8;
      if (v26) {
        goto LABEL_51;
      }
    }
  }
  return a2;
}

uint64_t llvm::ReassociatePass::CombineXorOpnd(llvm::ReassociatePass *this, llvm::Instruction *a2, llvm::reassociate::XorOpnd *a3, llvm::Value **a4, llvm::APInt *a5, llvm::Value **a6)
{
  uint64_t v6 = (llvm::Value *)*((void *)a3 + 1);
  if (v6 != a4[1]) {
    return 0;
  }
  int64_t v9 = (llvm::reassociate::XorOpnd *)a4;
  uint64_t v12 = *(void *)(*(void *)a3 + 8);
  int v13 = 1;
  if (v12)
  {
    if (*(void *)(v12 + 8)) {
      int v13 = 1;
    }
    else {
      int v13 = 2;
    }
  }
  uint64_t v14 = *((void *)*a4 + 1);
  if (v14) {
    LODWORD(v14) = *(void *)(v14 + 8) == 0;
  }
  unsigned int v15 = v13 + v14;
  if ((*((unsigned char *)a3 + 36) != 0) == (*((unsigned char *)a4 + 36) != 0))
  {
    if (*((unsigned char *)a3 + 36))
    {
      unsigned int v84 = v13 + v14;
      unsigned int v19 = *((_DWORD *)a3 + 6);
      if (v19 >= 0x41) {
        operator new[]();
      }
      uint64_t v20 = (unint64_t)a4[2] ^ *((void *)a3 + 2);
      unsigned int v86 = *((_DWORD *)a3 + 6);
      uint64_t v85 = v20;
      if (v19 && v20 && v20 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v19)
      {
        uint64_t v23 = *((unsigned int *)a5 + 2);
        if (v23 > 0x40)
        {
          int v39 = 0;
          int64_t v40 = (unint64_t)(v23 + 63) >> 6;
          do
          {
            BOOL v29 = v40-- < 1;
            if (v29) {
              break;
            }
            unint64_t v41 = *(void *)(*(void *)a5 + 8 * v40);
            v39 += __clz(v41);
          }
          while (!v41);
          int v42 = v23 | 0xFFFFFFC0;
          if ((v23 & 0x3F) == 0) {
            int v42 = 0;
          }
          BOOL v24 = v39 + v42 == v23;
        }
        else
        {
          BOOL v24 = *(void *)a5 == 0;
        }
        BOOL v43 = v24;
        if (v43 && v84 < 2) {
          return 0;
        }
      }
      *a6 = sub_1CCE709E4((uint64_t)a2, v6, (llvm::LLVMContext *)&v85);
      uint64_t v45 = *((unsigned int *)a5 + 2);
      if (v45 > 0x40)
      {
        uint64_t v46 = *(void **)a5;
        uint64_t v47 = (uint64_t *)v85;
        unint64_t v48 = (unint64_t)(v45 + 63) >> 6;
        do
        {
          uint64_t v49 = *v47++;
          *v46++ ^= v49;
          --v48;
        }
        while (v48);
      }
      else
      {
        *(void *)a5 ^= v85;
      }
    }
    else
    {
      if (*((_DWORD *)a3 + 6) > 0x40u) {
        operator new[]();
      }
      uint64_t v22 = (unint64_t)a4[2] ^ *((void *)a3 + 2);
      unsigned int v86 = *((_DWORD *)a3 + 6);
      uint64_t v85 = v22;
      *a6 = sub_1CCE709E4((uint64_t)a2, v6, (llvm::LLVMContext *)&v85);
    }
    if (v86 >= 0x41 && v85) {
      MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
    }
    unint64_t v16 = a3;
  }
  else
  {
    if (*((unsigned char *)a4 + 36)) {
      unint64_t v16 = (llvm::reassociate::XorOpnd *)a4;
    }
    else {
      unint64_t v16 = a3;
    }
    if (*((unsigned char *)a4 + 36)) {
      int64_t v9 = a3;
    }
    unsigned int v17 = *((_DWORD *)v16 + 6);
    if (v17 > 0x40) {
      operator new[]();
    }
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
    if (!v17) {
      unint64_t v18 = 0;
    }
    uint64_t v21 = *((void *)v9 + 2) ^ v18 & ~*((void *)v16 + 2);
    unsigned int v86 = *((_DWORD *)v16 + 6);
    uint64_t v85 = v21;
    if (v17 && v21 && v21 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v17)
    {
      uint64_t v25 = *((unsigned int *)a5 + 2);
      if (v25 > 0x40)
      {
        int v27 = 0;
        int64_t v28 = (unint64_t)(v25 + 63) >> 6;
        do
        {
          BOOL v29 = v28-- < 1;
          if (v29) {
            break;
          }
          unint64_t v30 = *(void *)(*(void *)a5 + 8 * v28);
          v27 += __clz(v30);
        }
        while (!v30);
        int v31 = v25 | 0xFFFFFFC0;
        if ((v25 & 0x3F) == 0) {
          int v31 = 0;
        }
        BOOL v26 = v27 + v31 == v25;
      }
      else
      {
        BOOL v26 = *(void *)a5 == 0;
      }
      BOOL v32 = v26;
      if (v32 && v15 < 2) {
        return 0;
      }
    }
    *a6 = sub_1CCE709E4((uint64_t)a2, v6, (llvm::LLVMContext *)&v85);
    uint64_t v34 = *((unsigned int *)a5 + 2);
    if (v34 > 0x40)
    {
      BOOL v35 = *(void **)a5;
      unsigned int v36 = (uint64_t *)*((void *)v16 + 2);
      unint64_t v37 = (unint64_t)(v34 + 63) >> 6;
      do
      {
        uint64_t v38 = *v36++;
        *v35++ ^= v38;
        --v37;
      }
      while (v37);
    }
    else
    {
      *(void *)a5 ^= *((void *)v16 + 2);
    }
    if (v86 >= 0x41 && v85) {
      MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
    }
  }
  uint64_t v50 = *(void *)v16;
  if (*(void *)v16 && *(unsigned __int8 *)(v50 + 16) >= 0x1Cu)
  {
    uint64_t v51 = *((void *)this + 6);
    uint64_t v85 = *(void *)v16;
    int v52 = *((_DWORD *)this + 16);
    if (v52)
    {
      int v53 = v52 - 1;
      unsigned int v54 = v53 & ((v50 >> 4) ^ (v50 >> 9));
      uint64_t v55 = (uint64_t *)(v51 + 8 * v54);
      uint64_t v56 = *v55;
      if (v50 == *v55) {
        goto LABEL_103;
      }
      uint64_t v57 = 0;
      int v58 = 1;
      while (v56 != -4096)
      {
        if (v57) {
          BOOL v59 = 0;
        }
        else {
          BOOL v59 = v56 == -8192;
        }
        if (v59) {
          uint64_t v57 = v55;
        }
        unsigned int v60 = v54 + v58++;
        unsigned int v54 = v60 & v53;
        uint64_t v55 = (uint64_t *)(v51 + 8 * v54);
        uint64_t v56 = *v55;
        if (v50 == *v55) {
          goto LABEL_103;
        }
      }
      if (v57) {
        uint64_t v61 = v57;
      }
      else {
        uint64_t v61 = v55;
      }
    }
    else
    {
      uint64_t v61 = 0;
    }
    *sub_1CCE7BF00((uint64_t)this + 48, &v85, v61) = v50;
    uint64_t v62 = *((void *)this + 11);
    uint64_t v63 = *((void *)this + 10);
    if (v62 == v63) {
      uint64_t v64 = 0;
    }
    else {
      uint64_t v64 = ((v62 - v63) << 6) - 1;
    }
    uint64_t v65 = *((void *)this + 14);
    unint64_t v66 = v65 + *((void *)this + 13);
    if (v64 == v66)
    {
      sub_1CCE7C1C0((uint64_t)this + 72);
      uint64_t v63 = *((void *)this + 10);
      uint64_t v65 = *((void *)this + 14);
      unint64_t v66 = *((void *)this + 13) + v65;
    }
    *(void *)(*(void *)(v63 + ((v66 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v66 & 0x1FF)) = v50;
    *((void *)this + 14) = v65 + 1;
  }
LABEL_103:
  uint64_t v67 = *(void *)v9;
  uint64_t result = 1;
  if (v67 && *(unsigned __int8 *)(v67 + 16) >= 0x1Cu)
  {
    uint64_t v68 = *((void *)this + 6);
    uint64_t v85 = v67;
    int v69 = *((_DWORD *)this + 16);
    if (v69)
    {
      int v70 = v69 - 1;
      unsigned int v71 = v70 & ((v67 >> 4) ^ (v67 >> 9));
      int v72 = (uint64_t *)(v68 + 8 * v71);
      uint64_t v73 = *v72;
      if (v67 == *v72) {
        return 1;
      }
      uint64_t v74 = 0;
      int v75 = 1;
      while (v73 != -4096)
      {
        if (v74) {
          BOOL v76 = 0;
        }
        else {
          BOOL v76 = v73 == -8192;
        }
        if (v76) {
          uint64_t v74 = v72;
        }
        unsigned int v77 = v71 + v75++;
        unsigned int v71 = v77 & v70;
        int v72 = (uint64_t *)(v68 + 8 * v71);
        uint64_t v73 = *v72;
        if (v67 == *v72) {
          return 1;
        }
      }
      if (v74) {
        unsigned int v78 = v74;
      }
      else {
        unsigned int v78 = v72;
      }
    }
    else
    {
      unsigned int v78 = 0;
    }
    *sub_1CCE7BF00((uint64_t)this + 48, &v85, v78) = v67;
    uint64_t v79 = *((void *)this + 11);
    uint64_t v80 = *((void *)this + 10);
    if (v79 == v80) {
      uint64_t v81 = 0;
    }
    else {
      uint64_t v81 = ((v79 - v80) << 6) - 1;
    }
    uint64_t v82 = *((void *)this + 14);
    unint64_t v83 = v82 + *((void *)this + 13);
    if (v81 == v83)
    {
      sub_1CCE7C1C0((uint64_t)this + 72);
      uint64_t v80 = *((void *)this + 10);
      uint64_t v82 = *((void *)this + 14);
      unint64_t v83 = *((void *)this + 13) + v82;
    }
    *(void *)(*(void *)(v80 + ((v83 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v83 & 0x1FF)) = v67;
    *((void *)this + 14) = v82 + 1;
    return 1;
  }
  return result;
}

llvm::Value *llvm::ReassociatePass::OptimizeXor(llvm::ReassociatePass *a1, llvm::Instruction *a2, _DWORD *a3)
{
  v81[40] = *MEMORY[0x1E4F143B8];
  int v5 = sub_1CCE71BEC(30, (uint64_t)a3);
  if (v5) {
    return v5;
  }
  int v6 = a3[2];
  if (v6 == 1) {
    return 0;
  }
  uint64_t v79 = v81;
  uint64_t v80 = 0x800000000;
  BOOL v76 = v78;
  uint64_t v77 = 0x800000000;
  uint64_t v7 = **(void **)(*(void *)a3 + 8);
  int v8 = (llvm::Type *)v7;
  if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12) {
    int v8 = **(llvm::Type ***)(v7 + 16);
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v8);
  if (PrimitiveSizeInBits > 0x40) {
    operator new[]();
  }
  unint64_t v74 = 0;
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      int64_t v10 = *(llvm::Value **)(*(void *)a3 + 16 * i + 8);
      uint64_t v73 = 0;
      v68[0] = (llvm::Value *)&v73;
      v68[1] = 0;
      if (sub_1CBF528D8((uint64_t)v68, (unsigned __int8 *)v10))
      {
        if (PrimitiveSizeInBits > 0x40)
        {
          uint64_t v47 = (void *)v74;
          unint64_t v48 = *(uint64_t **)v73;
          unint64_t v49 = ((unint64_t)PrimitiveSizeInBits + 63) >> 6;
          do
          {
            uint64_t v50 = *v48++;
            *v47++ ^= v50;
            --v49;
          }
          while (v49);
        }
        else
        {
          v74 ^= *(void *)v73;
        }
      }
      else
      {
        unint64_t v11 = v68;
        llvm::reassociate::XorOpnd::XorOpnd((llvm::reassociate::XorOpnd *)v68, v10);
        Ranuint64_t k = llvm::ReassociatePass::getRank(a1, v68[1]);
        uint64_t v12 = (char *)v79;
        if (v80 >= HIDWORD(v80))
        {
          unint64_t v39 = v80 + 1;
          if (v79 <= v68 && (char *)v79 + 40 * v80 > (char *)v68)
          {
            int64_t v65 = (char *)v68 - (unsigned char *)v79;
            sub_1CCE7C3F8((uint64_t)&v79, v39);
            uint64_t v12 = (char *)v79;
            unint64_t v11 = (llvm::Value **)((char *)v79 + v65);
          }
          else
          {
            sub_1CCE7C3F8((uint64_t)&v79, v39);
            unint64_t v11 = v68;
            uint64_t v12 = (char *)v79;
          }
        }
        int v13 = v80;
        uint64_t v14 = &v12[40 * v80];
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v11;
        unsigned int v15 = (llvm::APInt *)(v14 + 16);
        unint64_t v16 = (const llvm::APInt *)(v11 + 2);
        unsigned int v17 = *((_DWORD *)v11 + 6);
        *((_DWORD *)v14 + 6) = v17;
        if (v17 > 0x40) {
          llvm::APInt::initSlowCase(v15, v16);
        }
        *(void *)unsigned int v15 = *(void *)v16;
        unint64_t v18 = &v12[40 * v13];
        int v19 = *((_DWORD *)v11 + 8);
        v18[36] = *((unsigned char *)v11 + 36);
        *((_DWORD *)v18 + 8) = v19;
        LODWORD(v80) = v80 + 1;
        if (v70 >= 0x41 && v69) {
          MEMORY[0x1D25D9CB0](v69, 0x1000C8000313F17);
        }
      }
    }
  }
  unsigned int v20 = v77;
  if (v80)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 40 * v80;
    do
    {
      if (v20 >= HIDWORD(v77)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v76 + v20) = (char *)v79 + v21;
      unsigned int v20 = v77 + 1;
      LODWORD(v77) = v77 + 1;
      v21 += 40;
    }
    while (v22 != v21);
  }
  uint64_t v23 = (char *)v76;
  unint64_t v24 = v20;
  uint64_t v25 = (char *)v76 + 8 * v20;
  if (v20 >= 0x81)
  {
    unint64_t v41 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v42 = v20;
    unint64_t v66 = (char *)v76 + 8 * v20;
    while (1)
    {
      BOOL v43 = (uint64_t *)operator new(8 * v42, v41);
      if (v43) {
        break;
      }
      BOOL v44 = v42 > 1;
      v42 >>= 1;
      uint64_t v25 = v66;
      if (!v44) {
        goto LABEL_21;
      }
    }
    uint64_t v64 = v43;
    sub_1CCE7C55C(v23, v66, v24, v43, v42);
    operator delete(v64);
  }
  else
  {
LABEL_21:
    sub_1CCE7C55C(v23, v25, v24, 0, 0);
  }
  if (!v80) {
    goto LABEL_38;
  }
  unint64_t v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 8 * v80;
  do
  {
    uint64_t v31 = *(void *)((char *)v76 + v27);
    uint64_t v73 = 0;
    unsigned int v32 = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74) == v32) {
        goto LABEL_27;
      }
    }
    else if (!v74)
    {
      goto LABEL_27;
    }
    if (llvm::ReassociatePass::CombineXorOpnd(a1, a2, (llvm::reassociate::XorOpnd *)v31, (const void **)&v74, &v73))
    {
      if (!v73)
      {
        *(void *)uint64_t v31 = 0;
        *(void *)(v31 + 8) = 0;
        char v28 = 1;
LABEL_93:
        uint64_t v31 = v29;
        goto LABEL_28;
      }
      llvm::reassociate::XorOpnd::XorOpnd((llvm::reassociate::XorOpnd *)v68, v73);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v68;
      if (*(_DWORD *)(v31 + 24) >= 0x41u)
      {
        uint64_t v45 = *(void *)(v31 + 16);
        if (v45) {
          MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
        }
      }
      *(void *)(v31 + 16) = v69;
      *(_DWORD *)(v31 + 24) = v70;
      int v46 = Rank;
      *(unsigned char *)(v31 + 36) = v72;
      *(_DWORD *)(v31 + 32) = v46;
      char v28 = 1;
    }
LABEL_27:
    if (v29 && *(void *)(v31 + 8) == *(void *)(v29 + 8))
    {
      if (!llvm::ReassociatePass::CombineXorOpnd(a1, a2, (llvm::reassociate::XorOpnd *)v31, (llvm::Value **)v29, (llvm::APInt *)&v74, &v73))goto LABEL_93; {
      *(void *)uint64_t v29 = 0;
      }
      *(void *)(v29 + 8) = 0;
      if (v73)
      {
        llvm::reassociate::XorOpnd::XorOpnd((llvm::reassociate::XorOpnd *)v68, v73);
        *(_OWORD *)uint64_t v31 = *(_OWORD *)v68;
        if (*(_DWORD *)(v31 + 24) >= 0x41u)
        {
          uint64_t v33 = *(void *)(v31 + 16);
          if (v33) {
            MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
          }
        }
        *(void *)(v31 + 16) = v69;
        *(_DWORD *)(v31 + 24) = v70;
        int v34 = Rank;
        *(unsigned char *)(v31 + 36) = v72;
        *(_DWORD *)(v31 + 32) = v34;
        char v28 = 1;
      }
      else
      {
        *(void *)uint64_t v31 = 0;
        *(void *)(v31 + 8) = 0;
        char v28 = 1;
        uint64_t v31 = 0;
      }
    }
LABEL_28:
    v27 += 8;
    uint64_t v29 = v31;
  }
  while (v30 != v27);
  if ((v28 & 1) == 0) {
    goto LABEL_38;
  }
  a3[2] = 0;
  if (v80)
  {
    uint64_t v51 = 0;
    int v52 = 0;
    uint64_t v53 = 40 * v80;
    do
    {
      unsigned int v54 = (char *)v79;
      if (*(void *)((char *)v79 + v51 + 8))
      {
        unsigned int v55 = llvm::ReassociatePass::getRank(a1, *(llvm::Value **)((char *)v79 + v51));
        unint64_t v56 = *(void *)&v54[v51];
        unint64_t v57 = a3[2];
        if (v57 >= a3[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v27 = v27 & 0xFFFFFFFF00000000 | v55;
        int v58 = (unint64_t *)(*(void *)a3 + 16 * v57);
        *int v58 = v27;
        v58[1] = v56;
        int v52 = a3[2] + 1;
        a3[2] = v52;
      }
      v51 += 40;
    }
    while (v53 != v51);
  }
  else
  {
    int v52 = 0;
  }
  unsigned int v59 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74) != v59)
    {
LABEL_86:
      unsigned int v60 = llvm::ConstantInt::get((llvm::ConstantInt **)v7, (llvm::Type *)&v74, v26);
      uint64_t v61 = llvm::ReassociatePass::getRank(a1, v60);
      unsigned int v62 = a3[2];
      if (v62 >= a3[3]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v63 = (void *)(*(void *)a3 + 16 * v62);
      *uint64_t v63 = v61;
      v63[1] = v60;
      int v52 = a3[2] + 1;
      a3[2] = v52;
    }
  }
  else if (v74)
  {
    goto LABEL_86;
  }
  if (v52)
  {
    if (v52 == 1) {
      BOOL v35 = *(llvm::Value **)(*(void *)a3 + 8);
    }
    else {
LABEL_38:
    }
      BOOL v35 = 0;
  }
  else
  {
    BOOL v35 = llvm::ConstantInt::get((llvm::ConstantInt **)v7, (llvm::Type *)&v74, v26);
  }
  if (PrimitiveSizeInBits >= 0x41 && v74) {
    MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
  }
  if (v76 != v78) {
    free(v76);
  }
  unsigned int v36 = (char *)v79;
  if (v80)
  {
    uint64_t v37 = 40 * v80;
    do
    {
      if (*(_DWORD *)&v36[v37 - 16] >= 0x41u)
      {
        uint64_t v40 = *(void *)&v36[v37 - 24];
        if (v40) {
          MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
        }
      }
      v37 -= 40;
    }
    while (v37);
    unsigned int v36 = (char *)v79;
  }
  if (v36 != (char *)v81) {
    free(v36);
  }
  return v35;
}

llvm::Value *sub_1CCE71BEC(int a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  unsigned int v6 = a1 & 0xFFFFFFFE;
  while (1)
  {
    unsigned int v20 = 0;
    uint64_t v7 = *(void *)(*(void *)a2 + 16 * v5 + 8);
    int v19 = &v20;
    if (sub_1CBF686A0(&v19, 30, v7) && sub_1CCE734E4(a2, v5, v20) != v5)
    {
      if (a1 == 29) {
        return (llvm::Value *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v20, v8, v9);
      }
      if (a1 == 28)
      {
        unint64_t v18 = (llvm::Constant **)v20;
        return llvm::Constant::getNullValue(*v18, v8, v9);
      }
    }
    unint64_t v10 = *(unsigned int *)(a2 + 8);
    if (v10 != v5 + 1)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = (void *)(*(void *)a2 + 16 * v5);
      if (*(void *)(*(void *)a2 + 16 * (v5 + 1) + 8) == v12[1]) {
        break;
      }
    }
    uint64_t v5 = (v5 + 1);
LABEL_10:
    if (v5 == v2) {
      return 0;
    }
  }
  if (v6 == 28)
  {
    int v13 = (char *)(v11 + 16 * v10);
    if (v13 != (char *)(v12 + 2))
    {
      memmove((void *)(*(void *)a2 + 16 * v5), v12 + 2, v13 - (char *)(v12 + 2));
      LODWORD(v10) = *(_DWORD *)(a2 + 8);
    }
    LODWORD(v10) = v10 - 1;
    int v14 = -1;
LABEL_20:
    *(_DWORD *)(a2 + 8) = v10;
    v2 += v14;
    goto LABEL_10;
  }
  if (v2 != 2)
  {
    unsigned int v15 = (char *)(v11 + 16 * v10);
    int64_t v16 = v15 - (char *)(v12 + 4);
    if (v15 != (char *)(v12 + 4))
    {
      memmove((void *)(*(void *)a2 + 16 * v5), v12 + 4, v15 - (char *)(v12 + 4));
      uint64_t v11 = *(void *)a2;
    }
    unint64_t v10 = ((unint64_t)v12 + v16 - v11) >> 4;
    int v14 = -2;
    goto LABEL_20;
  }
  unint64_t v18 = *(llvm::Constant ***)(v11 + 8);
  return llvm::Constant::getNullValue(*v18, v8, v9);
}

llvm::Value *llvm::ReassociatePass::OptimizeAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v268 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (!v5)
  {
    char v28 = 0;
    size_t v253 = 0;
    uint64_t v254 = 0;
    int v255 = 0;
    goto LABEL_432;
  }
  uint64_t v7 = 0;
  uint64_t v245 = a1 + 48;
  uint64_t v244 = a1 + 72;
  do
  {
    uint64_t v8 = *(void *)a3;
    uint64_t v9 = *(void *)(*(void *)a3 + 16 * v7 + 8);
    unsigned int v10 = *(_DWORD *)(a3 + 8);
    if (v10 != v7 + 1 && *(void *)(v8 + 16 * (v7 + 1) + 8) == v9)
    {
      int v19 = 1;
      do
      {
        unsigned int v20 = v19;
        uint64_t v21 = (char *)(v8 + 16 * v7);
        uint64_t v22 = v21 + 16;
        uint64_t v23 = (char *)(v8 + 16 * v10);
        if (v23 != v21 + 16)
        {
          memmove(v21, v22, v23 - (v21 + 16));
          unsigned int v10 = *(_DWORD *)(a3 + 8);
        }
        *(_DWORD *)(a3 + 8) = --v10;
        if (v10 == v7) {
          break;
        }
        uint64_t v8 = *(void *)a3;
        int v19 = v20 + 1;
      }
      while (*(void *)(*(void *)a3 + 16 * v7 + 8) == v9);
      unint64_t v24 = *(llvm::ConstantInt **)v9;
      if ((*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 0x12) {
        int v25 = *(unsigned __int8 *)(**((void **)v24 + 2) + 8);
      }
      else {
        int v25 = *(_DWORD *)(*(void *)v9 + 8);
      }
      if (v25 == 13) {
        BOOL v26 = llvm::ConstantInt::get(v24, v20, 0);
      }
      else {
        BOOL v26 = llvm::ConstantFP::get((llvm::ConstantFP **)v24, (llvm::Type *)v22, (double)v20);
      }
      v256.n128_u64[0] = (unint64_t)"factor";
      v259[0] = 259;
      unint64_t v27 = sub_1CCE73448((void *)v9, (uint64_t)v26, (const char **)&v256, a2, a2);
      char v28 = v27;
      v256.n128_u64[0] = (unint64_t)v27;
      int v29 = *(_DWORD *)(a1 + 64);
      if (v29)
      {
        uint64_t v30 = *(void *)(a1 + 48);
        int v31 = v29 - 1;
        unsigned int v32 = v31 & ((v27 >> 4) ^ (v27 >> 9));
        uint64_t v33 = (uint64_t *)(v30 + 8 * v32);
        int v34 = (llvm::Value *)*v33;
        if (v27 == (llvm::Value *)*v33)
        {
LABEL_54:
          if (!*(_DWORD *)(a3 + 8)) {
            return v28;
          }
          uint64_t v45 = *(void *)a3;
          unint64_t v4 = v4 & 0xFFFFFFFF00000000 | llvm::ReassociatePass::getRank((llvm::ReassociatePass *)a1, v28);
          v256.n128_u64[0] = v4;
          v256.n128_u64[1] = (unint64_t)v28;
          sub_1CCE7CE4C((uint64_t *)a3, v45, &v256);
          LODWORD(v7) = v7 - 1;
          uint64_t v14 = *(unsigned int *)(a3 + 8);
          goto LABEL_88;
        }
        BOOL v35 = 0;
        int v36 = 1;
        while (v34 != (llvm::Value *)-4096)
        {
          if (v35) {
            BOOL v37 = 0;
          }
          else {
            BOOL v37 = v34 == (llvm::Value *)-8192;
          }
          if (v37) {
            BOOL v35 = v33;
          }
          unsigned int v38 = v32 + v36++;
          unsigned int v32 = v38 & v31;
          uint64_t v33 = (uint64_t *)(v30 + 8 * v32);
          int v34 = (llvm::Value *)*v33;
          if (v27 == (llvm::Value *)*v33) {
            goto LABEL_54;
          }
        }
        if (v35) {
          unint64_t v39 = v35;
        }
        else {
          unint64_t v39 = v33;
        }
      }
      else
      {
        unint64_t v39 = 0;
      }
      *sub_1CCE7BF00(v245, (uint64_t *)&v256, v39) = (uint64_t)v27;
      uint64_t v40 = *(void *)(a1 + 88);
      uint64_t v41 = *(void *)(a1 + 80);
      if (v40 == v41) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = ((v40 - v41) << 6) - 1;
      }
      uint64_t v43 = *(void *)(a1 + 112);
      unint64_t v44 = v43 + *(void *)(a1 + 104);
      if (v42 == v44)
      {
        sub_1CCE7C1C0(v244);
        uint64_t v41 = *(void *)(a1 + 80);
        uint64_t v43 = *(void *)(a1 + 112);
        unint64_t v44 = *(void *)(a1 + 104) + v43;
      }
      *(void *)(*(void *)(v41 + ((v44 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v44 & 0x1FF)) = v28;
      *(void *)(a1 + 112) = v43 + 1;
      goto LABEL_54;
    }
    char v260 = 0;
    v256.n128_u64[1] = (unint64_t)&v260;
    int v11 = *(unsigned __int8 *)(v9 + 16);
    if (v11 == 5)
    {
      if (*(_WORD *)(v9 + 18) == 15)
      {
        if (sub_1CC03F414((uint64_t)&v256, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF))))
        {
          uint64_t v12 = *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
          if (v12)
          {
LABEL_13:
            *(void *)v256.n128_u64[1] = v12;
            goto LABEL_16;
          }
        }
      }
    }
    else if (v11 == 43)
    {
      if (sub_1CBF535C4((uint64_t)&v256, *(llvm::Constant **)(v9 - 64)))
      {
        uint64_t v12 = *(void *)(v9 - 32);
        if (v12) {
          goto LABEL_13;
        }
      }
    }
    v265.n128_u64[0] = (unint64_t)&v260;
    if ((sub_1CBF686A0(&v265, 30, v9) & 1) == 0)
    {
      size_t v253 = &v260;
      if (!sub_1CC04C34C(&v253, v9))
      {
LABEL_17:
        uint64_t v14 = v5;
        goto LABEL_88;
      }
    }
LABEL_16:
    unsigned int v13 = sub_1CCE734E4(a3, v7, v260);
    if (v13 == v7) {
      goto LABEL_17;
    }
    unsigned int v15 = v13;
    if (*(_DWORD *)(a3 + 8) == 2)
    {
      int v16 = *(unsigned __int8 *)(v9 + 16);
      if (v16 == 5)
      {
        if (*(_WORD *)(v9 + 18) == 15
          && (sub_1CC03F414((uint64_t)&v256, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF))) & 1) != 0)
        {
          return llvm::Constant::getNullValue(*(llvm::Constant **)v260, v17, v18);
        }
      }
      else if (v16 == 43 && (sub_1CBF535C4((uint64_t)&v256, *(llvm::Constant **)(v9 - 64)) & 1) != 0)
      {
        return llvm::Constant::getNullValue(*(llvm::Constant **)v260, v17, v18);
      }
      if (sub_1CB845E74(v9))
      {
        unsigned int v46 = *(unsigned __int8 *)(v9 + 16);
        if (v46 <= 0x1B) {
          unsigned int v47 = *(unsigned __int16 *)(v9 + 18);
        }
        else {
          unsigned int v47 = v46 - 28;
        }
        if (v47 == 12) {
          return llvm::Constant::getNullValue(*(llvm::Constant **)v260, v17, v18);
        }
        if (v47 == 16)
        {
          if ((*(unsigned char *)(v9 + 17) & 0x10) != 0)
          {
            int v64 = *(_DWORD *)(v9 + 20);
            if ((v64 & 0x40000000) != 0) {
              int64_t v65 = *(llvm::Constant ***)(v9 - 8);
            }
            else {
              int64_t v65 = (llvm::Constant **)(v9 - 32 * (v64 & 0x7FFFFFF));
            }
            if (sub_1CC0241FC((uint64_t)&v265, *v65)) {
              return llvm::Constant::getNullValue(*(llvm::Constant **)v260, v17, v18);
            }
          }
          else
          {
            int v66 = *(_DWORD *)(v9 + 20);
            if ((v66 & 0x40000000) != 0) {
              uint64_t v67 = *(llvm::Constant ***)(v9 - 8);
            }
            else {
              uint64_t v67 = (llvm::Constant **)(v9 - 32 * (v66 & 0x7FFFFFF));
            }
            if (sub_1CC02435C((uint64_t)&v265, *v67)) {
              return llvm::Constant::getNullValue(*(llvm::Constant **)v260, v17, v18);
            }
          }
        }
      }
      if (*(_DWORD *)(a3 + 8) == 2)
      {
        int v48 = *(unsigned __int8 *)(v9 + 16);
        if (v48 == 5)
        {
          if (*(_WORD *)(v9 + 18) == 30
            && (sub_1CBF68974((uint64_t)v256.n128_i64 + 1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32))|| sub_1CBF68974((uint64_t)v256.n128_i64 + 1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)))))
          {
            return (llvm::Value *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v260, v49, v50);
          }
        }
        else if (v48 == 58 {
               && ((sub_1CBF687D0((uint64_t)v256.n128_i64 + 1, *(llvm::Constant **)(v9 - 32)) & 1) != 0
        }
                || (sub_1CBF687D0((uint64_t)v256.n128_i64 + 1, *(llvm::Constant **)(v9 - 64)) & 1) != 0))
        {
          return (llvm::Value *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v260, v49, v50);
        }
      }
    }
    uint64_t v51 = *(void *)a3;
    uint64_t v52 = *(void *)a3 + 16 * v7;
    uint64_t v53 = *(unsigned int *)(a3 + 8);
    uint64_t v54 = *(void *)a3 + 16 * v53;
    if (v54 != v52 + 16)
    {
      memmove((void *)v52, (const void *)(v52 + 16), v54 - (v52 + 16));
      LODWORD(v53) = *(_DWORD *)(a3 + 8);
      uint64_t v51 = *(void *)a3;
    }
    unsigned int v55 = v53 - 1;
    *(_DWORD *)(a3 + 8) = v55;
    if (v7 < v15) {
      int v56 = 0;
    }
    else {
      int v56 = -1;
    }
    unint64_t v57 = v51 + 16 * ((__PAIR64__(v15, v7) - v15) >> 32);
    uint64_t v58 = v51 + 16 * v55;
    if (v58 != v57 + 16)
    {
      memmove((void *)v57, (const void *)(v57 + 16), v58 - (v57 + 16));
      unsigned int v55 = *(_DWORD *)(a3 + 8);
    }
    *(_DWORD *)(a3 + 8) = v55 - 1;
    LODWORD(v7) = v7 + v56 - 1;
    uint64_t v14 = (v5 - 2);
    int v59 = *(unsigned __int8 *)(v9 + 16);
    if (v59 == 5)
    {
      if (*(_WORD *)(v9 + 18) == 30
        && (sub_1CBF68974((uint64_t)v256.n128_i64 + 1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32))|| sub_1CBF68974((uint64_t)v256.n128_i64 + 1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)))))
      {
LABEL_87:
        AllOnesValue = (llvm::Value *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v260, v60, v61);
        uint64_t v63 = *(void *)a3 + 16 * *(unsigned int *)(a3 + 8);
        unint64_t v3 = v3 & 0xFFFFFFFF00000000 | llvm::ReassociatePass::getRank((llvm::ReassociatePass *)a1, AllOnesValue);
        v256.n128_u64[0] = v3;
        v256.n128_u64[1] = (unint64_t)AllOnesValue;
        sub_1CCE7CE4C((uint64_t *)a3, v63, &v256);
        uint64_t v14 = (v5 - 1);
      }
    }
    else if (v59 == 58 {
           && ((sub_1CBF687D0((uint64_t)v256.n128_i64 + 1, *(llvm::Constant **)(v9 - 32)) & 1) != 0
    }
            || (sub_1CBF687D0((uint64_t)v256.n128_i64 + 1, *(llvm::Constant **)(v9 - 64)) & 1) != 0))
    {
      goto LABEL_87;
    }
LABEL_88:
    uint64_t v7 = (v7 + 1);
    uint64_t v5 = v14;
  }
  while (v7 != v14);
  uint64_t v68 = *(unsigned int *)(a3 + 8);
  size_t v253 = 0;
  uint64_t v254 = 0;
  int v255 = 0;
  if (!v68) {
    goto LABEL_431;
  }
  uint64_t v69 = 0;
  unsigned int v70 = 0;
  unsigned int v71 = 0;
  uint64_t v246 = v68;
  while (2)
  {
    uint64_t v72 = sub_1CCE6F0D0(*(void *)(*(void *)a3 + 16 * v69 + 8), 17, 18);
    if (!v72) {
      goto LABEL_333;
    }
    v265.n128_u64[0] = (unint64_t)v266;
    v265.n128_u64[1] = 0x800000000;
    sub_1CCE73658(v72, (uint64_t)&v265);
    v256.n128_u64[0] = (unint64_t)v259;
    v256.n128_u64[1] = (unint64_t)v259;
    uint64_t v257 = 8;
    int v258 = 0;
    uint64_t v74 = v265.n128_u32[2];
    if (!v265.n128_u32[2]) {
      goto LABEL_331;
    }
    uint64_t v75 = 0;
    while (2)
    {
      size_t v252 = 0;
      BOOL v76 = *(llvm::ConstantFP ****)(v265.n128_u64[0] + 8 * v75);
      size_t v252 = v76;
      unint64_t v77 = v256.n128_u64[1];
      uint64_t v78 = HIDWORD(v257);
      if (v256.n128_u64[1] == v256.n128_u64[0])
      {
        if (HIDWORD(v257))
        {
          uint64_t v79 = 0;
          uint64_t v80 = 8 * HIDWORD(v257);
          uint64_t v81 = (llvm::ConstantFP ****)v256.n128_u64[1];
          while (*v81 != v76)
          {
            if (*v81 == (llvm::ConstantFP ***)-2) {
              uint64_t v79 = v81;
            }
            ++v81;
            v80 -= 8;
            if (!v80)
            {
              if (!v79) {
                goto LABEL_116;
              }
              *uint64_t v79 = v76;
              --v258;
              goto LABEL_140;
            }
          }
          goto LABEL_302;
        }
LABEL_116:
        unsigned int v82 = v257;
        if (HIDWORD(v257) < v257)
        {
          ++HIDWORD(v257);
          *(void *)(v256.n128_u64[1] + 8 * v78) = v76;
          goto LABEL_140;
        }
      }
      else
      {
        unsigned int v82 = v257;
      }
      if (3 * v82 <= 4 * (HIDWORD(v257) - v258))
      {
        if (v82 >= 0x40) {
          v82 *= 2;
        }
        else {
          unsigned int v82 = 128;
        }
      }
      else if (v82 - HIDWORD(v257) >= v82 >> 3)
      {
        goto LABEL_121;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v256, v82);
      unsigned int v82 = v257;
      unint64_t v77 = v256.n128_u64[1];
LABEL_121:
      unsigned int v83 = v82 - 1;
      unsigned int v84 = (v82 - 1) & ((v76 >> 4) ^ (v76 >> 9));
      uint64_t v85 = (llvm::ConstantFP ****)(v77 + 8 * v84);
      unsigned int v86 = *v85;
      if (*v85 != (llvm::ConstantFP ***)-1)
      {
        BOOL v87 = 0;
        int v88 = 1;
        while (v86 != v76)
        {
          if (v87) {
            BOOL v89 = 0;
          }
          else {
            BOOL v89 = v86 == (llvm::ConstantFP ***)-2;
          }
          if (v89) {
            BOOL v87 = v85;
          }
          unsigned int v90 = v84 + v88++;
          unsigned int v84 = v90 & v83;
          uint64_t v85 = (llvm::ConstantFP ****)(v77 + 8 * (v90 & v83));
          unsigned int v86 = *v85;
          if (*v85 == (llvm::ConstantFP ***)-1) {
            goto LABEL_133;
          }
        }
        goto LABEL_302;
      }
      BOOL v87 = 0;
LABEL_133:
      if (v87) {
        uint64_t v91 = v87;
      }
      else {
        uint64_t v91 = v85;
      }
      if (*v91 == v76) {
        goto LABEL_302;
      }
      if (*v91 == (llvm::ConstantFP ***)-2) {
        --v258;
      }
      else {
        ++HIDWORD(v257);
      }
      *uint64_t v91 = v76;
LABEL_140:
      if (!v255)
      {
        unint64_t v100 = 0;
        goto LABEL_154;
      }
      size_t v92 = v252;
      unsigned int v93 = ((v252 >> 4) ^ (v252 >> 9)) & (v255 - 1);
      int v94 = (uint64_t *)&v253[2 * v93];
      uint64_t v95 = *v94;
      if (v252 != (llvm::ConstantFP ***)*v94)
      {
        uint64_t v96 = 0;
        int v97 = 1;
        while (v95 != -4096)
        {
          if (v96) {
            BOOL v98 = 0;
          }
          else {
            BOOL v98 = v95 == -8192;
          }
          if (v98) {
            uint64_t v96 = v94;
          }
          unsigned int v99 = v93 + v97++;
          unsigned int v93 = v99 & (v255 - 1);
          int v94 = (uint64_t *)&v253[2 * v93];
          uint64_t v95 = *v94;
          if (v252 == (llvm::ConstantFP ***)*v94) {
            goto LABEL_155;
          }
        }
        if (v96) {
          unint64_t v100 = v96;
        }
        else {
          unint64_t v100 = v94;
        }
LABEL_154:
        int v94 = sub_1CBFFD5B4((uint64_t)&v253, (uint64_t)&v252, (uint64_t *)&v252, v100);
        *int v94 = (uint64_t)v252;
        *((_DWORD *)v94 + 2) = 0;
        size_t v92 = v252;
      }
LABEL_155:
      int v101 = *((_DWORD *)v94 + 2);
      *((_DWORD *)v94 + 2) = v101 + 1;
      if (v101 + 1 > v71)
      {
        unsigned int v71 = v101 + 1;
        unsigned int v70 = (const void **)v92;
      }
      int v102 = *((unsigned __int8 *)v92 + 16);
      if (!v92 || v102 != 16)
      {
        if (!v92 || v102 != 17) {
          goto LABEL_302;
        }
        unint64_t v108 = v92[4];
        if (v108 == (llvm::ConstantFP **)&unk_1CFB2E344)
        {
          if ((*((unsigned char *)v92[5] + 28) & 8) == 0) {
            goto LABEL_302;
          }
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v261, (const llvm::detail::DoubleAPFloat *)(v92 + 4));
        }
        else
        {
          char v109 = *((unsigned char *)v92 + 52);
          if ((v109 & 8) == 0) {
            goto LABEL_302;
          }
          int v261 = v92[4];
          if ((*((_DWORD *)v108 + 2) + 64) >= 0x80) {
            operator new[]();
          }
          int v110 = v109 & 7;
          char v264 = v264 & 0xF0 | v109 & 0xF;
          int v263 = *((_DWORD *)v92 + 12);
          BOOL v112 = (v109 & 6) != 0 && v110 != 3;
          if (v110 == 1 || v112)
          {
            uint64_t v113 = *((unsigned int *)v261 + 2);
            uint64_t v114 = (uint64_t *)&v262;
            if ((v113 - 64) <= 0xFFFFFF7F) {
              uint64_t v114 = v262;
            }
            int v115 = (uint64_t *)(v92 + 5);
            if ((*((_DWORD *)v92[4] + 2) - 64) < 0xFFFFFF80) {
              int v115 = (uint64_t *)v92[5];
            }
            if (v113 <= 0xFFFFFFBF)
            {
              unint64_t v116 = (unint64_t)(v113 + 64) >> 6;
              do
              {
                uint64_t v117 = *v115++;
                *v114++ = v117;
                --v116;
              }
              while (v116);
            }
          }
        }
        if (v261 == (llvm::ConstantFP **)&unk_1CFB2E344)
        {
          sub_1CBFC6FB8((uint64_t)v262);
          sub_1CBFC6FB8((uint64_t)(v262 + 4));
        }
        else
        {
          v264 ^= 8u;
        }
        BOOL v118 = llvm::ConstantFP::get(**v92, (llvm::LLVMContext *)&v260, v73);
        unsigned int v119 = v118;
        size_t v252 = (llvm::ConstantFP ***)v118;
        unint64_t v120 = v256.n128_u64[1];
        uint64_t v121 = HIDWORD(v257);
        if (v256.n128_u64[1] == v256.n128_u64[0])
        {
          if (HIDWORD(v257))
          {
            unint64_t v122 = 0;
            uint64_t v123 = 8 * HIDWORD(v257);
            uint64_t v124 = (const llvm::detail::DoubleAPFloat **)v256.n128_u64[1];
            while (*v124 != v118)
            {
              if (*v124 == (const llvm::detail::DoubleAPFloat *)-2) {
                unint64_t v122 = v124;
              }
              ++v124;
              v123 -= 8;
              if (!v123)
              {
                if (!v122) {
                  goto LABEL_193;
                }
                uint64_t *v122 = v118;
                --v258;
                goto LABEL_283;
              }
            }
            goto LABEL_300;
          }
LABEL_193:
          unsigned int v125 = v257;
          if (HIDWORD(v257) < v257)
          {
            ++HIDWORD(v257);
            *(void *)(v256.n128_u64[1] + 8 * v121) = v118;
            goto LABEL_283;
          }
        }
        else
        {
          unsigned int v125 = v257;
        }
        if (3 * v125 <= 4 * (HIDWORD(v257) - v258))
        {
          if (v125 >= 0x40) {
            v125 *= 2;
          }
          else {
            unsigned int v125 = 128;
          }
        }
        else if (v125 - HIDWORD(v257) >= v125 >> 3)
        {
LABEL_237:
          unsigned int v143 = v125 - 1;
          unsigned int v144 = (v125 - 1) & ((v119 >> 4) ^ (v119 >> 9));
          int v145 = (const llvm::detail::DoubleAPFloat **)(v120 + 8 * v144);
          int v146 = *v145;
          if (*v145 != (const llvm::detail::DoubleAPFloat *)-1)
          {
            int v147 = 0;
            int v148 = 1;
            while (v146 != v119)
            {
              if (v147) {
                BOOL v149 = 0;
              }
              else {
                BOOL v149 = v146 == (const llvm::detail::DoubleAPFloat *)-2;
              }
              if (v149) {
                int v147 = v145;
              }
              unsigned int v150 = v144 + v148++;
              unsigned int v144 = v150 & v143;
              int v145 = (const llvm::detail::DoubleAPFloat **)(v120 + 8 * (v150 & v143));
              int v146 = *v145;
              if (*v145 == (const llvm::detail::DoubleAPFloat *)-1) {
                goto LABEL_276;
              }
            }
            goto LABEL_300;
          }
          int v147 = 0;
LABEL_276:
          if (v147) {
            int v162 = v147;
          }
          else {
            int v162 = v145;
          }
          if (*v162 == v119) {
            goto LABEL_300;
          }
          if (*v162 == (const llvm::detail::DoubleAPFloat *)-2) {
            --v258;
          }
          else {
            ++HIDWORD(v257);
          }
          std::string *v162 = v119;
LABEL_283:
          if (v255)
          {
            uint64_t v163 = (const void **)v252;
            unsigned int v164 = ((v252 >> 4) ^ (v252 >> 9)) & (v255 - 1);
            uint64_t v165 = (uint64_t *)&v253[2 * v164];
            uint64_t v166 = *v165;
            if (v252 == (llvm::ConstantFP ***)*v165) {
              goto LABEL_298;
            }
            uint64_t v167 = 0;
            int v168 = 1;
            while (v166 != -4096)
            {
              if (v167) {
                BOOL v169 = 0;
              }
              else {
                BOOL v169 = v166 == -8192;
              }
              if (v169) {
                uint64_t v167 = v165;
              }
              unsigned int v170 = v164 + v168++;
              unsigned int v164 = v170 & (v255 - 1);
              uint64_t v165 = (uint64_t *)&v253[2 * v164];
              uint64_t v166 = *v165;
              if (v252 == (llvm::ConstantFP ***)*v165) {
                goto LABEL_298;
              }
            }
            if (v167) {
              uint64_t v171 = v167;
            }
            else {
              uint64_t v171 = v165;
            }
          }
          else
          {
            uint64_t v171 = 0;
          }
          uint64_t v165 = sub_1CBFFD5B4((uint64_t)&v253, (uint64_t)&v252, (uint64_t *)&v252, v171);
          *uint64_t v165 = (uint64_t)v252;
          *((_DWORD *)v165 + 2) = 0;
          uint64_t v163 = (const void **)v252;
LABEL_298:
          int v172 = *((_DWORD *)v165 + 2);
          *((_DWORD *)v165 + 2) = v172 + 1;
          if (v172 + 1 > v71)
          {
            unsigned int v71 = v172 + 1;
            unsigned int v70 = v163;
          }
LABEL_300:
          if (v261 == (llvm::ConstantFP **)&unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v262);
          }
          else if ((*((_DWORD *)v261 + 2) - 64) <= 0xFFFFFF7F && v262)
          {
            MEMORY[0x1D25D9CB0](v262, 0x1000C8000313F17);
          }
          goto LABEL_302;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v256, v125);
        unsigned int v125 = v257;
        unint64_t v120 = v256.n128_u64[1];
        goto LABEL_237;
      }
      BOOL v103 = (unint64_t **)(v92 + 3);
      unsigned int v104 = *((_DWORD *)v92 + 8);
      unsigned int v105 = v104 - 1;
      if (v104 > 0x40)
      {
        if ((((*v103)[v105 >> 6] >> v105) & 1) != 0
          && llvm::APInt::countTrailingZerosSlowCase(v103) != v105)
        {
          unsigned int v251 = v104;
          operator new[]();
        }
        goto LABEL_302;
      }
      unint64_t v106 = *v103;
      if ((((unint64_t)*v103 >> v105) & 1) == 0 || v106 == (unint64_t *)(1 << v105)) {
        goto LABEL_302;
      }
      uint64_t v107 = **v92;
      unsigned int v251 = *((_DWORD *)v92 + 8);
      if (v104) {
        unint64_t v126 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v104;
      }
      else {
        unint64_t v126 = 0;
      }
      uint64_t v250 = (llvm::Instruction *)(v126 & ~(unint64_t)v106);
      llvm::APInt::operator++((uint64_t)&v250);
      LODWORD(v261) = v251;
      char v260 = v250;
      unsigned int v251 = 0;
      size_t v252 = (llvm::ConstantFP ***)llvm::ConstantInt::get(v107, (llvm::LLVMContext *)&v260, v127);
      if (v261 >= 0x41 && v260) {
        MEMORY[0x1D25D9CB0](v260, 0x1000C8000313F17);
      }
      if (v251 >= 0x41 && v250) {
        MEMORY[0x1D25D9CB0](v250, 0x1000C8000313F17);
      }
      uint64_t v128 = v252;
      unint64_t v129 = v256.n128_u64[1];
      uint64_t v130 = HIDWORD(v257);
      if (v256.n128_u64[1] == v256.n128_u64[0])
      {
        if (HIDWORD(v257))
        {
          uint64_t v131 = 0;
          uint64_t v132 = 8 * HIDWORD(v257);
          uint64_t v133 = (llvm::ConstantFP ****)v256.n128_u64[1];
          while (*v133 != v252)
          {
            if (*v133 == (llvm::ConstantFP ***)-2) {
              uint64_t v131 = v133;
            }
            ++v133;
            v132 -= 8;
            if (!v132)
            {
              if (!v131) {
                goto LABEL_214;
              }
              uint64_t *v131 = v252;
              --v258;
              goto LABEL_256;
            }
          }
          goto LABEL_302;
        }
LABEL_214:
        unsigned int v134 = v257;
        if (HIDWORD(v257) < v257)
        {
          ++HIDWORD(v257);
          *(void *)(v256.n128_u64[1] + 8 * v130) = v252;
          goto LABEL_256;
        }
      }
      else
      {
        unsigned int v134 = v257;
      }
      if (3 * v134 <= 4 * (HIDWORD(v257) - v258))
      {
        if (v134 >= 0x40) {
          v134 *= 2;
        }
        else {
          unsigned int v134 = 128;
        }
      }
      else if (v134 - HIDWORD(v257) >= v134 >> 3)
      {
        goto LABEL_222;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v256, v134);
      unsigned int v134 = v257;
      unint64_t v129 = v256.n128_u64[1];
LABEL_222:
      unsigned int v135 = v134 - 1;
      unsigned int v136 = (v134 - 1) & ((v128 >> 4) ^ (v128 >> 9));
      uint64_t v137 = (llvm::ConstantFP ****)(v129 + 8 * v136);
      unsigned int v138 = *v137;
      if (*v137 != (llvm::ConstantFP ***)-1)
      {
        uint64_t v139 = 0;
        int v140 = 1;
        while (v138 != v128)
        {
          if (v139) {
            BOOL v141 = 0;
          }
          else {
            BOOL v141 = v138 == (llvm::ConstantFP ***)-2;
          }
          if (v141) {
            uint64_t v139 = v137;
          }
          unsigned int v142 = v136 + v140++;
          unsigned int v136 = v142 & v135;
          uint64_t v137 = (llvm::ConstantFP ****)(v129 + 8 * (v142 & v135));
          unsigned int v138 = *v137;
          if (*v137 == (llvm::ConstantFP ***)-1) {
            goto LABEL_249;
          }
        }
        goto LABEL_302;
      }
      uint64_t v139 = 0;
LABEL_249:
      if (v139) {
        unsigned int v151 = v139;
      }
      else {
        unsigned int v151 = v137;
      }
      if (*v151 != v128)
      {
        if (*v151 == (llvm::ConstantFP ***)-2) {
          --v258;
        }
        else {
          ++HIDWORD(v257);
        }
        *unsigned int v151 = v128;
LABEL_256:
        if (v255)
        {
          uint64_t v152 = (const void **)v252;
          unsigned int v153 = ((v252 >> 4) ^ (v252 >> 9)) & (v255 - 1);
          int32x2_t v154 = (uint64_t *)&v253[2 * v153];
          uint64_t v155 = *v154;
          if (v252 != (llvm::ConstantFP ***)*v154)
          {
            char v156 = 0;
            int v157 = 1;
            while (v155 != -4096)
            {
              if (v156) {
                BOOL v158 = 0;
              }
              else {
                BOOL v158 = v155 == -8192;
              }
              if (v158) {
                char v156 = v154;
              }
              unsigned int v159 = v153 + v157++;
              unsigned int v153 = v159 & (v255 - 1);
              int32x2_t v154 = (uint64_t *)&v253[2 * v153];
              uint64_t v155 = *v154;
              if (v252 == (llvm::ConstantFP ***)*v154) {
                goto LABEL_271;
              }
            }
            if (v156) {
              uint64_t v160 = v156;
            }
            else {
              uint64_t v160 = v154;
            }
LABEL_270:
            int32x2_t v154 = sub_1CBFFD5B4((uint64_t)&v253, (uint64_t)&v252, (uint64_t *)&v252, v160);
            *int32x2_t v154 = (uint64_t)v252;
            *((_DWORD *)v154 + 2) = 0;
            uint64_t v152 = (const void **)v252;
          }
LABEL_271:
          int v161 = *((_DWORD *)v154 + 2);
          *((_DWORD *)v154 + 2) = v161 + 1;
          if (v161 + 1 > v71)
          {
            unsigned int v71 = v161 + 1;
            unsigned int v70 = v152;
          }
          goto LABEL_302;
        }
        uint64_t v160 = 0;
        goto LABEL_270;
      }
LABEL_302:
      if (++v75 != v74) {
        continue;
      }
      break;
    }
    if (v256.n128_u64[1] != v256.n128_u64[0]) {
      free((void *)v256.n128_u64[1]);
    }
    uint64_t v68 = v246;
LABEL_331:
    if ((void *)v265.n128_u64[0] != v266) {
      free((void *)v265.n128_u64[0]);
    }
LABEL_333:
    if (++v69 != v68) {
      continue;
    }
    break;
  }
  if (v71 <= 1) {
    goto LABEL_431;
  }
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v173 = *(unsigned __int8 *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  else {
    int v173 = *(_DWORD *)(*(void *)a2 + 8);
  }
  v259[0] = 257;
  if (v173 == 13) {
    char v174 = 13;
  }
  else {
    char v174 = 14;
  }
  uint64_t v176 = (void (**)(void))llvm::BinaryOperator::Create(v174, v70, (uint64_t)v70, (const char **)&v256, 0);
  v256.n128_u64[0] = (unint64_t)&v257;
  v256.n128_u64[1] = 0x400000000;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v177 = 0;
    int v178 = 0;
    do
    {
      if (sub_1CCE6F0D0(*(void *)(*(void *)a3 + 16 * v177 + 8), 17, 18))
      {
        uint64_t v179 = llvm::ReassociatePass::RemoveFactorFromExpression((llvm::ReassociatePass *)a1, *(llvm::Value **)(*(void *)a3 + 16 * v177 + 8), v70);
        int v180 = *(_DWORD *)(a3 + 8);
        if (v179)
        {
          size_t v181 = v179;
          int v182 = v178;
          LODWORD(v183) = *(_DWORD *)(a3 + 8);
          if (v180 != v178)
          {
            do
            {
              uint64_t v183 = (v183 - 1);
              if (*(void *)(*(void *)a3 + 16 * v183 + 8) == *(void *)(*(void *)a3
                                                                                           + 16 * v177
                                                                                           + 8))
              {
                __n128 v265 = (__n128)6uLL;
                v266[0] = v181;
                if (v181 != (llvm::BinaryOperator *)-8192 && v181 != (llvm::BinaryOperator *)-4096) {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v265);
                }
                unint64_t v184 = v256.n128_u64[0];
                if (v256.n128_u32[2] >= v256.n128_u32[3])
                {
                  unint64_t v205 = v256.n128_u32[2] + 1;
                  if (v256.n128_u64[0] <= (unint64_t)&v265
                    && v256.n128_u64[0] + 24 * (unint64_t)v256.n128_u32[2] > (unint64_t)&v265)
                  {
                    long long v249 = (char *)&v265 - v256.n128_u64[0];
                    sub_1CC261F80((unsigned int *)&v256, v205);
                    unint64_t v184 = v256.n128_u64[0];
                    uint64_t v185 = (__n128 *)&v249[v256.n128_u64[0]];
                  }
                  else
                  {
                    sub_1CC261F80((unsigned int *)&v256, v205);
                    uint64_t v185 = &v265;
                    unint64_t v184 = v256.n128_u64[0];
                  }
                }
                else
                {
                  uint64_t v185 = &v265;
                }
                unsigned __int32 v186 = v256.n128_u32[2];
                size_t v187 = (unint64_t *)(v184 + 24 * v256.n128_u32[2]);
                *size_t v187 = 6;
                v187[1] = 0;
                unint64_t v188 = v185[1].n128_u64[0];
                v187[2] = v188;
                if (v188 != -8192 && v188 != -4096)
                {
                  if (v188)
                  {
                    unint64_t v189 = v185->n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
                    v187[1] = *(void *)v189;
                    *(void *)unint64_t v189 = v187;
                    *size_t v187 = v189 | 6;
                    uint64_t v190 = (unint64_t *)v187[1];
                    if (v190) {
                      *uint64_t v190 = *v190 & 7 | (unint64_t)(v187 + 1);
                    }
                  }
                }
                v256.n128_u32[2] = v186 + 1;
                if (v266[0] != -8192 && v266[0] != -4096 && v266[0])
                {
                  unint64_t v191 = v265.n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
                  *(void *)(v265.n128_u64[0] & 0xFFFFFFFFFFFFFFF8) = v265.n128_u64[1];
                  if (v265.n128_u64[1])
                  {
                    *(void *)v265.n128_u64[1] = *(void *)v265.n128_u64[1] & 7 | v191;
                  }
                  else
                  {
                    uint64_t v192 = v266[0];
                    uint64_t v193 = ***(int32x2_t ****)v266[0];
                    unint64_t v194 = (unint64_t)v193[303];
                    if (v194 <= v191)
                    {
                      uint64_t v195 = v193[305].u32[0];
                      if (v194 + 16 * v195 > v191)
                      {
                        unsigned int v196 = v195 - 1;
                        LODWORD(v197) = v196 & ((LODWORD(v266[0]) >> 4) ^ (LODWORD(v266[0]) >> 9));
                        int v198 = (uint64_t *)(v194 + 16 * v197);
                        uint64_t v199 = *v198;
                        if (v266[0] == *v198)
                        {
LABEL_370:
                          *int v198 = -8192;
                          v193[304] = vadd_s32(v193[304], (int32x2_t)0x1FFFFFFFFLL);
                          uint64_t v192 = v266[0];
                        }
                        else
                        {
                          int v200 = 1;
                          while (v199 != -4096)
                          {
                            int v201 = v197 + v200++;
                            uint64_t v197 = v201 & v196;
                            uint64_t v199 = *(void *)(v194 + 16 * v197);
                            if (v266[0] == v199)
                            {
                              int v198 = (uint64_t *)(v194 + 16 * v197);
                              goto LABEL_370;
                            }
                          }
                        }
                        *(unsigned char *)(v192 + 17) &= ~1u;
                      }
                    }
                  }
                }
                size_t v202 = (char *)(*(void *)a3 + 16 * v183);
                unsigned int v175 = v202 + 16;
                uint64_t v203 = *(unsigned int *)(a3 + 8);
                uint64_t v204 = *(void *)a3 + 16 * v203;
                if ((char *)v204 != v202 + 16)
                {
                  memmove(v202, v175, v204 - (void)(v202 + 16));
                  LODWORD(v203) = *(_DWORD *)(a3 + 8);
                }
                int v180 = v203 - 1;
                *(_DWORD *)(a3 + 8) = v180;
              }
              int v182 = v180;
            }
            while (v183 != v178);
          }
          --v178;
          int v180 = v182;
        }
      }
      else
      {
        int v180 = *(_DWORD *)(a3 + 8);
      }
      uint64_t v177 = (v178 + 1);
      int v178 = v177;
    }
    while (v180 != v177);
  }
  llvm::Value::deleteValue(v176, (llvm::Value *)v175);
  uint64_t v206 = sub_1CCE736FC(a2, &v256);
  uint64_t v207 = v206;
  if (v206 && *((unsigned __int8 *)v206 + 16) >= 0x1Cu)
  {
    v265.n128_u64[0] = (unint64_t)v206;
    int v208 = *(_DWORD *)(a1 + 64);
    if (!v208)
    {
      uint64_t v219 = 0;
      goto LABEL_403;
    }
    uint64_t v209 = *(void *)(a1 + 48);
    int v210 = v208 - 1;
    unsigned int v211 = v210 & ((v206 >> 4) ^ (v206 >> 9));
    int v212 = (uint64_t *)(v209 + 8 * v211);
    size_t v213 = (llvm::Value *)*v212;
    if (v206 != (llvm::Value *)*v212)
    {
      size_t v214 = 0;
      int v215 = 1;
      while (v213 != (llvm::Value *)-4096)
      {
        if (v214) {
          BOOL v216 = 0;
        }
        else {
          BOOL v216 = v213 == (llvm::Value *)-8192;
        }
        if (v216) {
          size_t v214 = v212;
        }
        unsigned int v217 = v211 + v215++;
        unsigned int v211 = v217 & v210;
        int v212 = (uint64_t *)(v209 + 8 * v211);
        size_t v213 = (llvm::Value *)*v212;
        if (v206 == (llvm::Value *)*v212) {
          goto LABEL_409;
        }
      }
      if (v214) {
        uint64_t v219 = v214;
      }
      else {
        uint64_t v219 = v212;
      }
LABEL_403:
      *sub_1CCE7BF00(v245, (uint64_t *)&v265, v219) = (uint64_t)v206;
      uint64_t v220 = *(void *)(a1 + 88);
      uint64_t v221 = *(void *)(a1 + 80);
      if (v220 == v221) {
        uint64_t v222 = 0;
      }
      else {
        uint64_t v222 = ((v220 - v221) << 6) - 1;
      }
      uint64_t v223 = *(void *)(a1 + 112);
      unint64_t v224 = v223 + *(void *)(a1 + 104);
      if (v222 == v224)
      {
        sub_1CCE7C1C0(v244);
        uint64_t v221 = *(void *)(a1 + 80);
        uint64_t v223 = *(void *)(a1 + 112);
        unint64_t v224 = *(void *)(a1 + 104) + v223;
      }
      *(void *)(*(void *)(v221 + ((v224 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v224 & 0x1FF)) = v207;
      *(void *)(a1 + 112) = v223 + 1;
    }
  }
LABEL_409:
  v265.n128_u64[0] = (unint64_t)"reass.mul";
  __int16 v267 = 259;
  uint64_t v225 = sub_1CCE73448(v207, (uint64_t)v70, (const char **)&v265, a2, a2);
  char v28 = v225;
  v265.n128_u64[0] = (unint64_t)v225;
  int v226 = *(_DWORD *)(a1 + 64);
  if (!v226)
  {
    int v236 = 0;
    goto LABEL_423;
  }
  uint64_t v227 = *(void *)(a1 + 48);
  int v228 = v226 - 1;
  unsigned int v229 = v228 & ((v225 >> 4) ^ (v225 >> 9));
  uint64_t v230 = (uint64_t *)(v227 + 8 * v229);
  uint64_t v231 = (llvm::Value *)*v230;
  if (v225 != (llvm::Value *)*v230)
  {
    uint64_t v232 = 0;
    int v233 = 1;
    while (v231 != (llvm::Value *)-4096)
    {
      if (v232) {
        BOOL v234 = 0;
      }
      else {
        BOOL v234 = v231 == (llvm::Value *)-8192;
      }
      if (v234) {
        uint64_t v232 = v230;
      }
      unsigned int v235 = v229 + v233++;
      unsigned int v229 = v235 & v228;
      uint64_t v230 = (uint64_t *)(v227 + 8 * v229);
      uint64_t v231 = (llvm::Value *)*v230;
      if (v225 == (llvm::Value *)*v230) {
        goto LABEL_429;
      }
    }
    if (v232) {
      int v236 = v232;
    }
    else {
      int v236 = v230;
    }
LABEL_423:
    *sub_1CCE7BF00(v245, (uint64_t *)&v265, v236) = (uint64_t)v225;
    uint64_t v237 = *(void *)(a1 + 88);
    uint64_t v238 = *(void *)(a1 + 80);
    if (v237 == v238) {
      uint64_t v239 = 0;
    }
    else {
      uint64_t v239 = ((v237 - v238) << 6) - 1;
    }
    uint64_t v240 = *(void *)(a1 + 112);
    unint64_t v241 = v240 + *(void *)(a1 + 104);
    if (v239 == v241)
    {
      sub_1CCE7C1C0(v244);
      uint64_t v238 = *(void *)(a1 + 80);
      uint64_t v240 = *(void *)(a1 + 112);
      unint64_t v241 = *(void *)(a1 + 104) + v240;
    }
    *(void *)(*(void *)(v238 + ((v241 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v241 & 0x1FF)) = v28;
    *(void *)(a1 + 112) = v240 + 1;
  }
LABEL_429:
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v242 = *(void *)a3;
    v265.n128_u64[0] = llvm::ReassociatePass::getRank((llvm::ReassociatePass *)a1, v28);
    v265.n128_u64[1] = (unint64_t)v28;
    sub_1CCE7CE4C((uint64_t *)a3, v242, &v265);
    sub_1CCDDEA84((char **)&v256);
LABEL_431:
    char v28 = 0;
  }
  else
  {
    sub_1CCDDEA84((char **)&v256);
  }
LABEL_432:
  MEMORY[0x1D25D9CD0](v253, 8);
  return v28;
}

llvm::Value *sub_1CCE73448(void *a1, uint64_t a2, const char **a3, uint64_t a4, uint64_t a5)
{
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12) {
    int v6 = *(unsigned __int8 *)(**(void **)(*a1 + 16) + 8);
  }
  else {
    int v6 = *(_DWORD *)(*a1 + 8);
  }
  if (v6 == 13)
  {
    return llvm::BinaryOperator::Create(17, a1, a2, a3, a4);
  }
  else
  {
    uint64_t result = llvm::BinaryOperator::Create(18, a1, a2, a3, a4);
    *((unsigned char *)result + 17) |= *(unsigned char *)(a5 + 17) & 0xFE;
  }
  return result;
}

uint64_t sub_1CCE734E4(uint64_t a1, uint64_t a2, llvm::Instruction *a3)
{
  int v6 = *(_DWORD *)(*(void *)a1 + 16 * a2);
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = (a2 + 1);
  if (v8 != v7)
  {
    while (*(_DWORD *)(*(void *)a1 + 16 * v8) == v6)
    {
      uint64_t v9 = *(unsigned __int8 **)(*(void *)a1 + 16 * v8 + 8);
      if (v9 == (unsigned __int8 *)a3) {
        return v8;
      }
      BOOL v10 = v9 && v9[16] >= 0x1Cu;
      if (v10
        && a3
        && *((unsigned __int8 *)a3 + 16) >= 0x1Cu
        && llvm::Instruction::isIdenticalToWhenDefined(*(llvm::Instruction **)(*(void *)a1 + 16 * v8 + 8), a3)&& (*((unsigned __int8 *)a3 + 17) ^ v9[17]) < 2)
      {
        return v8;
      }
      uint64_t v8 = (v8 + 1);
      if (v7 == v8) {
        break;
      }
    }
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = a2;
  while (1)
  {
    uint64_t v12 = v11 - 1;
    uint64_t v13 = (v11 - 1);
    if (*(_DWORD *)(*(void *)a1 + 16 * v13) != v6) {
      return a2;
    }
    uint64_t v14 = *(unsigned __int8 **)(*(void *)a1 + 16 * v13 + 8);
    if (v14 == (unsigned __int8 *)a3) {
      return (v11 - 1);
    }
    BOOL v15 = v14 && v14[16] >= 0x1Cu;
    if (v15
      && a3
      && *((unsigned __int8 *)a3 + 16) >= 0x1Cu
      && llvm::Instruction::isIdenticalToWhenDefined(*(llvm::Instruction **)(*(void *)a1 + 16 * v13 + 8), a3)&& (*((unsigned __int8 *)a3 + 17) ^ v14[17]) < 2)
    {
      break;
    }
    uint64_t v11 = v12;
    if (!v12) {
      return a2;
    }
  }
  return v12;
}

uint64_t sub_1CCE73658(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t result = sub_1CCE6F0D0(a1, 17, 18);
  if (result)
  {
    uint64_t v5 = result;
    do
    {
      sub_1CCE73658(*(void *)(v5 - 32), a2);
      uint64_t v3 = *(void *)(v5 - 64);
      uint64_t result = sub_1CCE6F0D0(v3, 17, 18);
      uint64_t v5 = result;
    }
    while (result);
  }
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a2 + 8 * v6) = v3;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

llvm::Value *sub_1CCE736FC(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[2];
  if (v2 == 1) {
    return *(llvm::Value **)(*(void *)a2 + 16);
  }
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)a2 + 24 * v2;
  uint64_t v39 = 6;
  uint64_t v40 = 0;
  int v7 = *(int32x2_t *****)(v6 - 8);
  uint64_t v41 = v7;
  if (v7 && v7 != (int32x2_t ****)-8192 && v7 != (int32x2_t ****)-4096)
  {
    unint64_t v8 = *(void *)(v6 - 24) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v40 = *(unint64_t **)v8;
    uint64_t v9 = v40;
    *(void *)unint64_t v8 = &v39;
    uint64_t v39 = v8 | 6;
    if (v9) {
      *uint64_t v9 = *v9 & 7 | (unint64_t)&v40;
    }
    uint64_t v5 = *(void *)a2;
  }
  unsigned int v10 = v2 - 1;
  a2[2] = v10;
  uint64_t v11 = (void *)(v5 + 24 * v10);
  uint64_t v12 = v11[2];
  if (v12 && v12 != -8192 && v12 != -4096)
  {
    unint64_t v13 = *v11 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v13 = v11[1];
    uint64_t v14 = (unint64_t *)v11[1];
    if (v14)
    {
      *uint64_t v14 = *v14 & 7 | v13;
    }
    else
    {
      uint64_t v15 = v11[2];
      int v16 = ***(int32x2_t ****)v15;
      unint64_t v17 = (unint64_t)v16[303];
      if (v17 <= v13)
      {
        uint64_t v18 = v16[305].u32[0];
        if (v17 + 16 * v18 > v13)
        {
          unsigned int v19 = v18 - 1;
          LODWORD(v20) = v19 & ((v15 >> 4) ^ (v15 >> 9));
          uint64_t v21 = (uint64_t *)(v17 + 16 * v20);
          uint64_t v22 = *v21;
          if (v15 == *v21)
          {
LABEL_20:
            *uint64_t v21 = -8192;
            v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v15 = v11[2];
          }
          else
          {
            int v23 = 1;
            while (v22 != -4096)
            {
              int v24 = v20 + v23++;
              uint64_t v20 = v24 & v19;
              uint64_t v22 = *(void *)(v17 + 16 * v20);
              if (v15 == v22)
              {
                uint64_t v21 = (uint64_t *)(v17 + 16 * v20);
                goto LABEL_20;
              }
            }
          }
          *(unsigned char *)(v15 + 17) &= ~1u;
        }
      }
    }
  }
  uint64_t v25 = (uint64_t)v41;
  if (v41 != (int32x2_t ****)-8192 && v41 != (int32x2_t ****)-4096 && v41 != 0)
  {
    unint64_t v28 = v39 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v39 & 0xFFFFFFFFFFFFFFF8) = v40;
    if (v40)
    {
      *uint64_t v40 = *v40 & 7 | v28;
    }
    else
    {
      int v29 = v41;
      uint64_t v30 = ***v41;
      unint64_t v31 = (unint64_t)v30[303];
      if (v31 <= v28)
      {
        uint64_t v32 = v30[305].u32[0];
        if (v31 + 16 * v32 > v28)
        {
          unsigned int v33 = v32 - 1;
          LODWORD(v34) = v33 & ((v41 >> 4) ^ (v41 >> 9));
          BOOL v35 = (int32x2_t *****)(v31 + 16 * v34);
          int v36 = *v35;
          if (v41 == *v35)
          {
LABEL_39:
            uint64_t *v35 = (int32x2_t ****)-8192;
            v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
            int v29 = v41;
          }
          else
          {
            int v37 = 1;
            while (v36 != (int32x2_t ****)-4096)
            {
              int v38 = v34 + v37++;
              uint64_t v34 = v38 & v33;
              int v36 = *(int32x2_t *****)(v31 + 16 * v34);
              if (v41 == v36)
              {
                BOOL v35 = (int32x2_t *****)(v31 + 16 * v34);
                goto LABEL_39;
              }
            }
          }
          *((unsigned char *)v29 + 17) &= ~1u;
        }
      }
    }
  }
  unint64_t v27 = (void *)sub_1CCE736FC(a1);
  uint64_t v39 = (uint64_t)"reass.add";
  __int16 v42 = 259;
  return sub_1CCE7A7E4(v27, v25, (const char **)&v39, a1, a1);
}

uint64_t llvm::ReassociatePass::buildMinimalMultiplyDAG(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  v65[4] = *MEMORY[0x1E4F143B8];
  uint64_t v63 = v65;
  uint64_t v64 = 0x400000000;
  unint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= 2)
  {
    unsigned int v6 = 0;
    int v7 = &v62;
    uint64_t v56 = a1 + 48;
    uint64_t v55 = a1 + 72;
    unsigned int v8 = 1;
    while (1)
    {
      uint64_t v9 = *(void *)a3;
      int v10 = *(_DWORD *)(*(void *)a3 + 16 * v8 + 8);
      if (!v10)
      {
LABEL_41:
        LODWORD(v5) = *(_DWORD *)(a3 + 8);
        goto LABEL_42;
      }
      if (v10 == *(_DWORD *)(v9 + 16 * v6 + 8)) {
        break;
      }
LABEL_38:
      unsigned int v6 = v8++;
      if (v8 >= v5) {
        goto LABEL_41;
      }
    }
    uint64_t v11 = v8;
    uint64_t v12 = v6;
    unint64_t v13 = v7;
    unsigned int v60 = v7;
    uint64_t v14 = 16 * v6;
    uint64_t v62 = *(void *)(v9 + v14);
    uint64_t v61 = 0x400000001;
    if (v5 <= v8 + 1) {
      ++v8;
    }
    else {
      unsigned int v8 = v5;
    }
    uint64_t v15 = 16 * v11;
    uint64_t v16 = 1;
    unsigned int v17 = 1;
    while (1)
    {
      if (v17 >= HIDWORD(v61)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v60 + v17) = *(void *)(v9 + v15);
      unsigned int v17 = v61 + 1;
      LODWORD(v61) = v61 + 1;
      if (v11 + v16 >= v5) {
        break;
      }
      uint64_t v9 = *(void *)a3;
      int v18 = *(_DWORD *)(*(void *)a3 + v15 + 24);
      ++v16;
      v15 += 16;
      if (v18 != *(_DWORD *)(*(void *)a3 + 16 * v12 + 8))
      {
        unsigned int v8 = v11 + v16 - 1;
        break;
      }
    }
    uint64_t v19 = sub_1CCE73EA0(a2, (uint64_t)&v60);
    *(void *)(*(void *)a3 + v14) = v19;
    uint64_t v4 = a1;
    int v7 = v13;
    if (v19)
    {
      uint64_t v20 = v19;
      if (*(unsigned __int8 *)(v19 + 16) >= 0x1Cu)
      {
        uint64_t v59 = v19;
        int v21 = *(_DWORD *)(a1 + 64);
        if (!v21)
        {
          unint64_t v31 = 0;
LABEL_30:
          *sub_1CCE7BF00(v56, &v59, v31) = v19;
          uint64_t v32 = *(void *)(a1 + 88);
          uint64_t v33 = *(void *)(a1 + 80);
          if (v32 == v33) {
            uint64_t v34 = 0;
          }
          else {
            uint64_t v34 = ((v32 - v33) << 6) - 1;
          }
          uint64_t v35 = *(void *)(a1 + 112);
          unint64_t v36 = v35 + *(void *)(a1 + 104);
          if (v34 == v36)
          {
            sub_1CCE7C1C0(v55);
            uint64_t v33 = *(void *)(a1 + 80);
            uint64_t v35 = *(void *)(a1 + 112);
            unint64_t v36 = *(void *)(a1 + 104) + v35;
          }
          *(void *)(*(void *)(v33 + ((v36 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v36 & 0x1FF)) = v20;
          *(void *)(a1 + 112) = v35 + 1;
          goto LABEL_36;
        }
        uint64_t v22 = *(void *)(a1 + 48);
        int v23 = v21 - 1;
        unsigned int v24 = v23 & ((v19 >> 4) ^ (v19 >> 9));
        uint64_t v25 = (uint64_t *)(v22 + 8 * v24);
        uint64_t v26 = *v25;
        if (v19 != *v25)
        {
          unint64_t v27 = 0;
          int v28 = 1;
          while (v26 != -4096)
          {
            if (v27) {
              BOOL v29 = 0;
            }
            else {
              BOOL v29 = v26 == -8192;
            }
            if (v29) {
              unint64_t v27 = v25;
            }
            unsigned int v30 = v24 + v28++;
            unsigned int v24 = v30 & v23;
            uint64_t v25 = (uint64_t *)(v22 + 8 * v24);
            uint64_t v26 = *v25;
            if (v19 == *v25) {
              goto LABEL_36;
            }
          }
          if (v27) {
            unint64_t v31 = v27;
          }
          else {
            unint64_t v31 = v25;
          }
          goto LABEL_30;
        }
      }
    }
LABEL_36:
    if (v60 != v13) {
      free(v60);
    }
    goto LABEL_38;
  }
LABEL_42:
  uint64_t v37 = *(void *)a3;
  uint64_t v38 = *(void *)a3 + 16 * v5;
  uint64_t v39 = *(void *)a3;
  if (v5)
  {
    uint64_t v40 = 0;
    while (16 * v5 - 16 != v40)
    {
      int v41 = *(_DWORD *)(v37 + v40 + 8);
      int v42 = *(_DWORD *)(v37 + v40 + 24);
      v40 += 16;
      if (v41 == v42)
      {
        uint64_t v39 = v37 + v40 - 16;
        goto LABEL_47;
      }
    }
  }
  else
  {
LABEL_47:
    if (v39 != v38)
    {
      uint64_t v43 = v39 + 32;
      if (v39 + 32 != v38)
      {
        do
        {
          if (*(_DWORD *)(v39 + 8) != *(_DWORD *)(v43 + 8))
          {
            int v44 = *(_DWORD *)(v43 + 8);
            *(void *)(v39 + 16) = *(void *)v43;
            v39 += 16;
            *(_DWORD *)(v39 + 8) = v44;
          }
          v43 += 16;
        }
        while (v43 != v38);
        uint64_t v37 = *(void *)a3;
      }
      uint64_t v38 = v39 + 16;
    }
  }
  unint64_t v45 = v38 - v37;
  *(_DWORD *)(a3 + 8) = v45 >> 4;
  if ((v45 >> 4))
  {
    uint64_t v46 = 0;
    uint64_t v47 = v45 & 0xFFFFFFFF0;
    do
    {
      unsigned int v48 = *(_DWORD *)(v37 + v46 + 8);
      if (v48)
      {
        if (v64 >= (unint64_t)HIDWORD(v64)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v63 + v64) = *(void *)(v37 + v46);
        LODWORD(v64) = v64 + 1;
        uint64_t v37 = *(void *)a3;
        unsigned int v48 = *(_DWORD *)(*(void *)a3 + v46 + 8);
      }
      *(_DWORD *)(v37 + v46 + 8) = v48 >> 1;
      v46 += 16;
    }
    while (v47 != v46);
  }
  if (*(_DWORD *)(v37 + 8))
  {
    uint64_t v49 = llvm::ReassociatePass::buildMinimalMultiplyDAG(v4, a2, a3);
    if (v64 >= HIDWORD(v64)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v63 + v64) = v49;
    unsigned int v50 = v64 + 1;
    LODWORD(v64) = v50;
    if (v50 >= HIDWORD(v64)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v63 + v50) = v49;
    int v51 = v64 + 1;
    LODWORD(v64) = v64 + 1;
  }
  else
  {
    int v51 = v64;
  }
  if (v51 == 1)
  {
    uint64_t v52 = v63;
    uint64_t v53 = *(void *)v63;
  }
  else
  {
    uint64_t v53 = sub_1CCE73EA0(a2, (uint64_t)&v63);
    uint64_t v52 = v63;
  }
  if (v52 != v65) {
    free(v52);
  }
  return v53;
}

uint64_t sub_1CCE73EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  uint64_t v4 = *(void *)(*(void *)a2 + 8 * v3 - 8);
  unsigned int v5 = v3 - 1;
  if (v5)
  {
    *(_DWORD *)(a2 + 8) = v5;
    do
    {
      if ((*(_DWORD *)(*(void *)v4 + 8) & 0xFE) == 0x12) {
        int v7 = *(unsigned __int8 *)(**(void **)(*(void *)v4 + 16) + 8);
      }
      else {
        int v7 = *(_DWORD *)(*(void *)v4 + 8);
      }
      uint64_t v8 = *(void *)(*(void *)a2 + 8 * v5 - 8);
      *(_DWORD *)(a2 + 8) = v5 - 1;
      __int16 v12 = 257;
      if (v7 == 13) {
        uint64_t v9 = (uint64_t)sub_1CC09A1EC(a1, v4, v8, (uint64_t)v11, 0, 0);
      }
      else {
        uint64_t v9 = sub_1CB843C88(a1, v4, v8, (uint64_t)v11, 0);
      }
      uint64_t v4 = v9;
      unsigned int v5 = *(_DWORD *)(a2 + 8);
    }
    while (v5);
  }
  return v4;
}

llvm::Value *llvm::ReassociatePass::OptimizeMul(llvm::ReassociatePass *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  v64[8] = *MEMORY[0x1E4F143B8];
  LODWORD(v4) = *(_DWORD *)(a3 + 8);
  if (v4 < 4) {
    return 0;
  }
  unsigned int v8 = 0;
  uint64_t v62 = v64;
  a4.n128_u64[0] = 0x400000000;
  uint64_t v63 = 0x400000000;
  uint64_t v9 = *(void *)a3;
  int v10 = 1;
  do
  {
    int v11 = 0;
    if (v4 <= v10 + 1) {
      int v12 = v10 + 1;
    }
    else {
      int v12 = v4;
    }
    unsigned int v13 = v12 + 1;
    unsigned int v14 = v12 + 1 - v10;
    int v15 = v12 - v10;
    while (*(void *)(v9 + 16 * (v10 + v11) + 8) == *(void *)(v9 + 16 * (v10 - 1) + 8))
    {
      if (v15 == ++v11) {
        goto LABEL_11;
      }
    }
    unsigned int v14 = v11 + 1;
    unsigned int v13 = v11 + 1 + v10;
LABEL_11:
    if (v14 <= 1) {
      unsigned int v16 = 0;
    }
    else {
      unsigned int v16 = v14;
    }
    v8 += v16;
    int v10 = v13;
  }
  while (v13 < v4);
  if (v8 < 4) {
    return 0;
  }
  int v17 = 1;
  do
  {
    int v18 = 0;
    uint64_t v19 = *(void *)(v9 + 16 * (v17 - 1) + 8);
    if (v4 <= v17 + 1) {
      unsigned int v20 = v17 + 1;
    }
    else {
      unsigned int v20 = v4;
    }
    int v21 = v20 - v17 + 1;
    while (*(void *)(v9 + 16 * (v17 + v18) + 8) == v19)
    {
      if (v20 - v17 == ++v18) {
        goto LABEL_25;
      }
    }
    int v21 = v18 + 1;
    unsigned int v20 = v17 + v18;
LABEL_25:
    if (v21 != 1)
    {
      if (v63 >= (unint64_t)HIDWORD(v63)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v22 = v21 & 0xFFFFFFFE;
      v20 -= v22;
      int v23 = (char *)v62 + 16 * v63;
      *int v23 = v19;
      v23[1] = v22;
      LODWORD(v63) = v63 + 1;
      uint64_t v9 = *(void *)a3;
      uint64_t v24 = *(void *)a3 + 16 * v20;
      uint64_t v25 = (const void *)(v24 + 16 * v22);
      uint64_t v26 = *(void *)a3 + 16 * *(unsigned int *)(a3 + 8);
      uint64_t v27 = v26 - (void)v25;
      if ((const void *)v26 != v25)
      {
        memmove((void *)(*(void *)a3 + 16 * v20), v25, v26 - (void)v25);
        uint64_t v9 = *(void *)a3;
      }
      unint64_t v4 = (unint64_t)(v24 + v27 - v9) >> 4;
      *(_DWORD *)(a3 + 8) = v4;
    }
    int v17 = v20 + 1;
  }
  while (v4 > v20 + 1);
  unsigned int v30 = (__n128 *)((char *)v62 + 16 * v63);
  if (v63 < 0x81)
  {
LABEL_39:
    sub_1CCE7A880((__n128 *)v62, v30, v63, 0, 0, a4);
  }
  else
  {
    unint64_t v31 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v32 = v63;
    while (1)
    {
      uint64_t v33 = (__n128 *)operator new(16 * v32, v31);
      if (v33) {
        break;
      }
      BOOL v34 = v32 > 1;
      v32 >>= 1;
      if (!v34) {
        goto LABEL_39;
      }
    }
    uint64_t v35 = v33;
    sub_1CCE7A880((__n128 *)v62, v30, v63, v33, v32, a4);
    operator delete(v35);
  }
  uint64_t v36 = 0;
  uint64_t v37 = **(void **)a2;
  v53[1] = (void *)0x200000000;
  v54[6] = v37;
  v54[7] = &v60;
  v54[8] = &v61;
  v54[9] = 0;
  int v55 = 0;
  __int16 v56 = 512;
  char v57 = 7;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  unsigned int v60 = &unk_1F2616E88;
  uint64_t v61 = &unk_1F2617008;
  uint64_t v38 = *(unsigned __int8 **)(a2 + 48);
  v54[4] = *(void *)(a2 + 40);
  v54[5] = a2 + 24;
  uint64_t v52 = v38;
  v53[0] = v54;
  if (v38)
  {
    llvm::MetadataTracking::track((uint64_t)&v52, v38, 2);
    uint64_t v36 = (uint64_t)v52;
  }
  sub_1CB8461A4((uint64_t)v53, 0, v36);
  if (v52)
  {
    int v47 = *v52;
    if ((v47 - 4) > 0x1E)
    {
      if ((v47 - 3) >= 0xFFFFFFFE) {
        unsigned int v50 = v52;
      }
      else {
        unsigned int v50 = 0;
      }
      if ((v47 - 3) < 0xFFFFFFFE)
      {
        if (v47 == 3) {
          *((void *)v52 + 1) = 0;
        }
        goto LABEL_44;
      }
      unint64_t v49 = (unint64_t)(v50 + 8);
    }
    else
    {
      if ((v52[1] & 0x7F) != 2 && !*((_DWORD *)v52 + 3)) {
        goto LABEL_44;
      }
      uint64_t v48 = *((void *)v52 + 2);
      if ((v48 & 4) == 0) {
        goto LABEL_44;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
      if (!v49) {
        goto LABEL_44;
      }
    }
    v51.n128_u64[0] = (unint64_t)&v52;
    sub_1CC5FA668(v49 + 16, &v51);
  }
LABEL_44:
  if (sub_1CB845E74(a2))
  {
    int v39 = *(unsigned __int8 *)(a2 + 17) >> 1;
    if (v39 == 127) {
      int v39 = -1;
    }
    int v55 = v39;
  }
  int v28 = (llvm::Value *)llvm::ReassociatePass::buildMinimalMultiplyDAG((uint64_t)a1, (uint64_t)v53, (uint64_t)&v62);
  if (*(_DWORD *)(a3 + 8))
  {
    Ranuint64_t k = llvm::ReassociatePass::getRank(a1, v28);
    uint64_t v41 = *(void *)a3;
    unint64_t v42 = *(unsigned int *)(a3 + 8);
    if (v42)
    {
      do
      {
        unint64_t v43 = v42 >> 1;
        int v44 = (unsigned int *)(v41 + 16 * (v42 >> 1));
        unsigned int v46 = *v44;
        unint64_t v45 = v44 + 4;
        v42 += ~(v42 >> 1);
        if (v46 > Rank) {
          uint64_t v41 = (uint64_t)v45;
        }
        else {
          unint64_t v42 = v43;
        }
      }
      while (v42);
    }
    v51.n128_u64[0] = Rank;
    v51.n128_u64[1] = (unint64_t)v28;
    sub_1CCE7CE4C((uint64_t *)a3, v41, &v51);
    int v28 = 0;
  }
  if (v53[0] != v54) {
    free(v53[0]);
  }
  if (v62 != v64) {
    free(v62);
  }
  return v28;
}

llvm::Constant *llvm::ReassociatePass::OptimizeExpression(llvm::ReassociatePass *a1, unsigned __int8 *a2, _DWORD *a3, llvm::Constant *a4, __n128 a5)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  unsigned int v8 = a3[2];
  while (1)
  {
    if (!v8) {
      return 0;
    }
    uint64_t v9 = 0;
    int v10 = a2[16];
    while (1)
    {
      int v11 = *(unsigned __int8 **)(*(void *)a3 + 16 * v8 - 8);
      if (v11[16] > 0x14u) {
        break;
      }
      a3[2] = --v8;
      if (v9)
      {
        uint64_t v21 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)(v10 - 28), (llvm::Constant *)v11, v9, a4);
        if (!v21)
        {
          uint64_t v22 = *(void ***)v11;
          if (*(void *)v11)
          {
            v31[0] = v11;
            v31[1] = v9;
            uint64_t v23 = **v22 + 1512;
            v24[0] = v10 - 28;
            v24[1] = 0;
            __int16 v25 = 0;
            uint64_t v26 = v31;
            uint64_t v27 = 2;
            long long v28 = 0u;
            long long v29 = 0u;
            uint64_t v30 = 0;
            uint64_t v21 = sub_1CC56C20C(v23, (uint64_t)v22, v24);
          }
          else
          {
            uint64_t v21 = 0;
          }
        }
        unsigned int v8 = a3[2];
        int v11 = (unsigned __int8 *)v21;
      }
      uint64_t v9 = (llvm::Constant *)v11;
      if (!v8) {
        return (llvm::Constant *)v11;
      }
    }
    if (v9) {
      break;
    }
LABEL_9:
    if (v8 == 1) {
      return *(llvm::Constant **)(*(void *)a3 + 8);
    }
    if (v10 <= 44)
    {
      if ((v10 - 41) < 2)
      {
        int v12 = llvm::ReassociatePass::OptimizeAdd((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
        if (v12) {
          return v12;
        }
      }
    }
    else if ((v10 - 45) >= 2)
    {
      if ((v10 - 56) >= 2)
      {
        if (v10 == 58)
        {
          int v12 = llvm::ReassociatePass::OptimizeXor(a1, (llvm::Instruction *)a2, a3);
          if (v12) {
            return v12;
          }
        }
      }
      else
      {
        int v12 = sub_1CCE71BEC(v10 - 28, (uint64_t)a3);
        if (v12) {
          return v12;
        }
      }
    }
    else
    {
      int v12 = llvm::ReassociatePass::OptimizeMul(a1, (uint64_t)a2, (uint64_t)a3, a5);
      if (v12) {
        return v12;
      }
    }
    BOOL v13 = a3[2] == v8;
    unsigned int v8 = a3[2];
    if (v13) {
      return 0;
    }
  }
  if (v9 == llvm::ConstantExpr::getBinOpIdentity((llvm::ConstantExpr *)(v10 - 28), *(llvm::ConstantFP **)a2, 0, 0))
  {
    unsigned int v8 = a3[2];
    goto LABEL_9;
  }
  unsigned int v16 = *(llvm::Constant **)a2;
  if (v10 == 56 || v10 == 45)
  {
    NullValue = llvm::Constant::getNullValue(v16, v14, v15);
  }
  else if (v10 == 57)
  {
    NullValue = (llvm::Constant *)llvm::Constant::getAllOnesValue(v16, v14, v15);
  }
  else
  {
    NullValue = 0;
  }
  if (v9 != NullValue)
  {
    unint64_t v18 = a3[2];
    if (v18 >= a3[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v19 = (void *)(*(void *)a3 + 16 * v18);
    *uint64_t v19 = 0;
    v19[1] = v9;
    unsigned int v8 = a3[2] + 1;
    a3[2] = v8;
    goto LABEL_9;
  }
  return v9;
}

void llvm::ReassociatePass::RecursivelyEraseDeadInsts(int32x2_t *a1, _DWORD *a2, int32x2_t *a3)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  int v6 = a2[5];
  if ((v6 & 0x40000000) != 0)
  {
    unsigned int v8 = (uint64_t *)*((void *)a2 - 1);
    unint64_t v7 = v6 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v7 = v6 & 0x7FFFFFF;
    unsigned int v8 = (uint64_t *)&a2[-8 * v7];
  }
  if (v7 >= 5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v7)
  {
    uint64_t v9 = 32 * v7;
    int v10 = &v42;
    do
    {
      uint64_t v11 = *v8;
      v8 += 4;
      *v10++ = v11;
      v9 -= 32;
    }
    while (v9);
  }
  __int32 v12 = a1[5].i32[0];
  unsigned int v13 = a2 >> 4;
  if (v12)
  {
    int32x2_t v14 = a1[3];
    __int32 v15 = v12 - 1;
    LODWORD(v16) = (v12 - 1) & (v13 ^ (a2 >> 9));
    int v17 = (void *)(*(void *)&v14 + 16 * v16);
    unint64_t v18 = (_DWORD *)*v17;
    if ((_DWORD *)*v17 != a2)
    {
      int v19 = 1;
      do
      {
        if (v18 == (_DWORD *)-4096) {
          goto LABEL_15;
        }
        int v20 = v16 + v19++;
        uint64_t v16 = v20 & v15;
        unint64_t v18 = *(_DWORD **)(*(void *)&v14 + 16 * v16);
      }
      while (v18 != a2);
      int v17 = (void *)(*(void *)&v14 + 16 * v16);
    }
    void *v17 = -8192;
    a1[4] = vadd_s32(a1[4], (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_15:
  unint64_t v43 = a2;
  __int32 v21 = a3[2].i32[0];
  if (v21)
  {
    int32x2_t v22 = *a3;
    __int32 v23 = v21 - 1;
    LODWORD(v24) = (v21 - 1) & (v13 ^ (a2 >> 9));
    __int16 v25 = (void *)(*(void *)a3 + 8 * v24);
    uint64_t v26 = (_DWORD *)*v25;
    if ((_DWORD *)*v25 != a2)
    {
      int v27 = 1;
      do
      {
        if (v26 == (_DWORD *)-4096) {
          goto LABEL_22;
        }
        int v28 = v24 + v27++;
        uint64_t v24 = v28 & v23;
        uint64_t v26 = *(_DWORD **)(*(void *)&v22 + 8 * v24);
      }
      while (v26 != a2);
      __int16 v25 = (void *)(*(void *)&v22 + 8 * v24);
    }
    *__int16 v25 = -8192;
    a3[1] = vadd_s32(a3[1], (int32x2_t)0x1FFFFFFFFLL);
    long long v29 = (char *)sub_1CCE7CF5C(&a3[3], (uint64_t *)&v43);
    sub_1CCE7D110((uint64_t)&a3[3], v29, v30);
  }
LABEL_22:
  unint64_t v43 = a2;
  __int32 v31 = a1[8].i32[0];
  if (v31)
  {
    int32x2_t v32 = a1[6];
    __int32 v33 = v31 - 1;
    LODWORD(v34) = (v31 - 1) & (v13 ^ (a2 >> 9));
    uint64_t v35 = (void *)(*(void *)&v32 + 8 * v34);
    uint64_t v36 = (_DWORD *)*v35;
    if ((_DWORD *)*v35 != a2)
    {
      int v37 = 1;
      do
      {
        if (v36 == (_DWORD *)-4096) {
          goto LABEL_29;
        }
        int v38 = v34 + v37++;
        uint64_t v34 = v38 & v33;
        uint64_t v36 = *(_DWORD **)(*(void *)&v32 + 8 * v34);
      }
      while (v36 != a2);
      uint64_t v35 = (void *)(*(void *)&v32 + 8 * v34);
    }
    void *v35 = -8192;
    a1[7] = vadd_s32(a1[7], (int32x2_t)0x1FFFFFFFFLL);
    int v39 = a1 + 9;
    uint64_t v40 = (char *)sub_1CCE7CF5C(v39, (uint64_t *)&v43);
    sub_1CCE7D110((uint64_t)v39, v40, v41);
  }
LABEL_29:
  unint64_t v43 = v45;
  uint64_t v44 = 0x100000000;
  llvm::findDbgUsers((uint64_t)&v43, (uint64_t ***)a2);
  llvm::salvageDebugInfoForDbgValues((llvm::CastInst *)a2, (uint64_t *)v43, v44);
  if (v43 != v45) {
    free(v43);
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
}

void llvm::ReassociatePass::EraseInst(int32x2_t *this, llvm::Instruction *a2)
{
  v33[8] = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0)
  {
    int v6 = (uint64_t *)*((void *)a2 - 1);
    unint64_t v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v5 = v4 & 0x7FFFFFF;
    int v6 = (uint64_t *)((char *)a2 - 32 * v5);
  }
  void v31[10] = v33;
  uint64_t v32 = 0x800000000;
  if (v5 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v5)
  {
    uint64_t v7 = 32 * v5;
    unsigned int v8 = v33;
    do
    {
      uint64_t v9 = *v6;
      v6 += 4;
      *v8++ = v9;
      v7 -= 32;
    }
    while (v7);
  }
  LODWORD(v32) = v5;
  __int32 v10 = this[5].i32[0];
  unsigned int v11 = a2 >> 4;
  if (v10)
  {
    int32x2_t v12 = this[3];
    __int32 v13 = v10 - 1;
    LODWORD(v14) = (v10 - 1) & (v11 ^ (a2 >> 9));
    __int32 v15 = (llvm::Instruction **)(*(void *)&v12 + 16 * v14);
    uint64_t v16 = *v15;
    if (*v15 != a2)
    {
      int v17 = 1;
      do
      {
        if (v16 == (llvm::Instruction *)-4096) {
          goto LABEL_15;
        }
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & v13;
        uint64_t v16 = *(llvm::Instruction **)(*(void *)&v12 + 16 * v14);
      }
      while (v16 != a2);
      __int32 v15 = (llvm::Instruction **)(*(void *)&v12 + 16 * v14);
    }
    *__int32 v15 = (llvm::Instruction *)-8192;
    this[4] = vadd_s32(this[4], (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_15:
  int32x2_t v19 = this[6];
  long long v29 = a2;
  __int32 v20 = this[8].i32[0];
  if (v20)
  {
    __int32 v21 = v20 - 1;
    LODWORD(v22) = v21 & (v11 ^ (a2 >> 9));
    __int32 v23 = (llvm::Instruction **)(*(void *)&v19 + 8 * v22);
    uint64_t v24 = *v23;
    if (*v23 != a2)
    {
      int v25 = 1;
      do
      {
        if (v24 == (llvm::Instruction *)-4096) {
          goto LABEL_22;
        }
        int v26 = v22 + v25++;
        uint64_t v22 = v26 & v21;
        uint64_t v24 = *(llvm::Instruction **)(*(void *)&v19 + 8 * v22);
      }
      while (v24 != a2);
      __int32 v23 = (llvm::Instruction **)(*(void *)&v19 + 8 * v22);
    }
    *__int32 v23 = (llvm::Instruction *)-8192;
    this[7] = vadd_s32(this[7], (int32x2_t)0x1FFFFFFFFLL);
    int v27 = (char *)sub_1CCE7CF5C(&this[9], (uint64_t *)&v29);
    sub_1CCE7D110((uint64_t)&this[9], v27, v28);
  }
LABEL_22:
  long long v29 = v31;
  uint64_t v30 = 0x100000000;
  llvm::findDbgUsers((uint64_t)&v29, (uint64_t ***)a2);
  llvm::salvageDebugInfoForDbgValues(a2, (uint64_t *)v29, v30);
  if (v29 != v31) {
    free(v29);
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
}

llvm::Instruction *llvm::ReassociatePass::canonicalizeNegFPConstantsForOp(llvm::ReassociatePass *this, llvm::Instruction *a2, llvm::Instruction *a3, llvm::Value *a4)
{
  v125[4] = *MEMORY[0x1E4F143B8];
  uint64_t v123 = (char *)v125;
  uint64_t v124 = 0x400000000;
  sub_1CCE75AA0((uint64_t)a3, (uint64_t)&v123);
  uint64_t v8 = v124;
  if (!v124) {
    goto LABEL_5;
  }
  int v9 = *((unsigned __int8 *)a2 + 16);
  if ((v124 & 1) != 0 && v9 != 44)
  {
    if (sub_1CCE75C80((uint64_t)a2))
    {
LABEL_5:
      a2 = 0;
      goto LABEL_147;
    }
    uint64_t v8 = v124;
    if (!v124) {
      goto LABEL_147;
    }
  }
  int v92 = v9;
  unsigned int v93 = a2;
  __int32 v10 = v123;
  unsigned int v11 = &v123[8 * v8];
  do
  {
    uint64_t v12 = *(void *)v10;
    v94[0] = 0;
    int v13 = *(_DWORD *)(v12 + 20);
    if ((v13 & 0x40000000) != 0) {
      uint64_t v14 = *(unsigned __int8 ***)(v12 - 8);
    }
    else {
      uint64_t v14 = (unsigned __int8 **)(v12 - 32 * (v13 & 0x7FFFFFF));
    }
    __int32 v15 = *v14;
    int v97 = v94;
    uint64_t v98 = 0;
    if (!sub_1CC04AFFC((uint64_t)&v97, v15)) {
      goto LABEL_49;
    }
    int v17 = *(llvm::ConstantFP ***)v12;
    uint64_t v18 = *(void *)(v94[0] + 8);
    if ((_UNKNOWN *)v18 == &unk_1CFB2E344)
    {
      uint64_t v61 = *(llvm::ConstantFP ***)v12;
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v119, (const llvm::detail::DoubleAPFloat *)(v94[0] + 8));
      int v17 = v61;
    }
    else
    {
      unsigned int v119 = *(_DWORD **)(v94[0] + 8);
      if ((*(_DWORD *)(v18 + 8) + 64) >= 0x80) {
        operator new[]();
      }
      char v122 = v122 & 0xF7 | *(unsigned char *)(v94[0] + 28) & 8;
      char v19 = *(unsigned char *)(v94[0] + 28);
      int v20 = v19 & 7;
      char v122 = v122 & 0xF8 | v19 & 7;
      int v121 = *(_DWORD *)(v94[0] + 24);
      BOOL v22 = (v19 & 6) != 0 && v20 != 3;
      if (v20 == 1 || v22)
      {
        uint64_t v24 = v119[2];
        int v25 = &v120;
        if ((v24 - 64) <= 0xFFFFFF7F) {
          int v25 = (uint64_t *)v120;
        }
        int v26 = *(uint64_t **)(v94[0] + 16);
        if ((*(_DWORD *)(*(void *)(v94[0] + 8) + 8) - 64) >= 0xFFFFFF80) {
          int v26 = (uint64_t *)(v94[0] + 16);
        }
        if (v24 <= 0xFFFFFFBF)
        {
          unint64_t v27 = (unint64_t)(v24 + 64) >> 6;
          do
          {
            uint64_t v28 = *v26++;
            *v25++ = v28;
            --v27;
          }
          while (v27);
        }
      }
    }
    uint64_t v29 = (uint64_t)v119;
    if (v119 == (_DWORD *)&unk_1CFB2E344)
    {
      if ((*(unsigned char *)(v120 + 28) & 8) == 0
        || (int64_t v65 = v17,
            sub_1CBFC6FB8(v120),
            sub_1CBFC6FB8(v120 + 32),
            int v17 = v65,
            uint64_t v29 = (uint64_t)v119,
            v119 == (_DWORD *)&unk_1CFB2E344))
      {
        uint64_t v62 = v120;
        uint64_t v120 = 0;
        uint64_t v98 = (uint64_t)&unk_1CFB2E344;
        uint64_t v99 = v62;
        goto LABEL_35;
      }
    }
    else if ((v122 & 8) != 0)
    {
      v122 ^= 8u;
    }
    uint64_t v98 = v29;
    uint64_t v99 = v120;
    int v100 = v121;
    char v101 = v101 & 0xF0 | v122 & 0xF;
LABEL_35:
    unsigned int v119 = &unk_1CFB2E394;
    uint64_t v30 = llvm::ConstantFP::get(v17, (llvm::Type *)&v97, v16);
    int v31 = *(_DWORD *)(v12 + 20);
    if ((v31 & 0x40000000) != 0) {
      uint64_t v32 = *(void *)(v12 - 8);
    }
    else {
      uint64_t v32 = v12 - 32 * (v31 & 0x7FFFFFF);
    }
    if (*(void *)v32)
    {
      **(void **)(v32 + 16) = *(void *)(v32 + 8);
      uint64_t v33 = *(void *)(v32 + 8);
      if (v33) {
        *(void *)(v33 + 16) = *(void *)(v32 + 16);
      }
    }
    *(void *)uint64_t v32 = v30;
    if (v30)
    {
      uint64_t v36 = *((void *)v30 + 1);
      uint64_t v34 = (void *)((char *)v30 + 8);
      uint64_t v35 = v36;
      *(void *)(v32 + 8) = v36;
      if (v36) {
        *(void *)(v35 + 16) = v32 + 8;
      }
      *(void *)(v32 + 16) = v34;
      void *v34 = v32;
    }
    if ((_UNKNOWN *)v98 == &unk_1CFB2E344)
    {
      sub_1CB845718(&v99);
    }
    else if ((*(_DWORD *)(v98 + 8) - 64) <= 0xFFFFFF7F && v99)
    {
      MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
    }
    if (v119 == (_DWORD *)&unk_1CFB2E344)
    {
      sub_1CB845718(&v120);
    }
    else if ((v119[2] - 64) <= 0xFFFFFF7F && v120)
    {
      MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
    }
    *((unsigned char *)this + 552) = 1;
LABEL_49:
    int v37 = *(_DWORD *)(v12 + 20);
    if ((v37 & 0x40000000) != 0) {
      uint64_t v38 = *(void *)(v12 - 8);
    }
    else {
      uint64_t v38 = v12 - 32 * (v37 & 0x7FFFFFF);
    }
    int v39 = *(unsigned __int8 **)(v38 + 32);
    int v97 = v94;
    uint64_t v98 = 0;
    if (!sub_1CC04AFFC((uint64_t)&v97, v39)) {
      goto LABEL_88;
    }
    uint64_t v41 = *(llvm::ConstantFP ***)v12;
    uint64_t v42 = *(void *)(v94[0] + 8);
    if ((_UNKNOWN *)v42 == &unk_1CFB2E344)
    {
      uint64_t v63 = *(llvm::ConstantFP ***)v12;
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v115, (const llvm::detail::DoubleAPFloat *)(v94[0] + 8));
      uint64_t v41 = v63;
    }
    else
    {
      int v115 = *(_DWORD **)(v94[0] + 8);
      if ((*(_DWORD *)(v42 + 8) + 64) >= 0x80) {
        operator new[]();
      }
      char v118 = v118 & 0xF7 | *(unsigned char *)(v94[0] + 28) & 8;
      char v43 = *(unsigned char *)(v94[0] + 28);
      int v44 = v43 & 7;
      char v118 = v118 & 0xF8 | v43 & 7;
      int v117 = *(_DWORD *)(v94[0] + 24);
      BOOL v46 = (v43 & 6) != 0 && v44 != 3;
      if (v44 == 1 || v46)
      {
        uint64_t v47 = v115[2];
        uint64_t v48 = &v116;
        if ((v47 - 64) <= 0xFFFFFF7F) {
          uint64_t v48 = (uint64_t *)v116;
        }
        unint64_t v49 = *(uint64_t **)(v94[0] + 16);
        if ((*(_DWORD *)(*(void *)(v94[0] + 8) + 8) - 64) >= 0xFFFFFF80) {
          unint64_t v49 = (uint64_t *)(v94[0] + 16);
        }
        if (v47 <= 0xFFFFFFBF)
        {
          unint64_t v50 = (unint64_t)(v47 + 64) >> 6;
          do
          {
            uint64_t v51 = *v49++;
            *v48++ = v51;
            --v50;
          }
          while (v50);
        }
      }
    }
    uint64_t v52 = (uint64_t)v115;
    if (v115 == (_DWORD *)&unk_1CFB2E344)
    {
      if ((*(unsigned char *)(v116 + 28) & 8) == 0
        || (int v66 = v41,
            sub_1CBFC6FB8(v116),
            sub_1CBFC6FB8(v116 + 32),
            uint64_t v41 = v66,
            uint64_t v52 = (uint64_t)v115,
            v115 == (_DWORD *)&unk_1CFB2E344))
      {
        uint64_t v64 = v116;
        uint64_t v116 = 0;
        uint64_t v98 = (uint64_t)&unk_1CFB2E344;
        uint64_t v99 = v64;
        goto LABEL_74;
      }
    }
    else if ((v118 & 8) != 0)
    {
      v118 ^= 8u;
    }
    uint64_t v98 = v52;
    uint64_t v99 = v116;
    int v100 = v117;
    char v101 = v101 & 0xF0 | v118 & 0xF;
LABEL_74:
    int v115 = &unk_1CFB2E394;
    uint64_t v53 = llvm::ConstantFP::get(v41, (llvm::Type *)&v97, v40);
    int v54 = *(_DWORD *)(v12 + 20);
    if ((v54 & 0x40000000) != 0) {
      uint64_t v55 = *(void *)(v12 - 8);
    }
    else {
      uint64_t v55 = v12 - 32 * (v54 & 0x7FFFFFF);
    }
    __int16 v56 = (llvm::Value **)(v55 + 32);
    if (*(void *)(v55 + 32))
    {
      **(void **)(v55 + 48) = *(void *)(v55 + 40);
      uint64_t v57 = *(void *)(v55 + 40);
      if (v57) {
        *(void *)(v57 + 16) = *(void *)(v55 + 48);
      }
    }
    *__int16 v56 = v53;
    if (v53)
    {
      uint64_t v60 = *((void *)v53 + 1);
      uint64_t v58 = (llvm::Value ***)((char *)v53 + 8);
      uint64_t v59 = v60;
      *(void *)(v55 + 40) = v60;
      if (v60) {
        *(void *)(v59 + 16) = v55 + 40;
      }
      *(void *)(v55 + 48) = v58;
      *uint64_t v58 = v56;
    }
    if ((_UNKNOWN *)v98 == &unk_1CFB2E344)
    {
      sub_1CB845718(&v99);
    }
    else if ((*(_DWORD *)(v98 + 8) - 64) <= 0xFFFFFF7F && v99)
    {
      MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
    }
    if (v115 == (_DWORD *)&unk_1CFB2E344)
    {
      sub_1CB845718(&v116);
    }
    else if ((v115[2] - 64) <= 0xFFFFFF7F && v116)
    {
      MEMORY[0x1D25D9CB0](v116, 0x1000C8000313F17);
    }
    *((unsigned char *)this + 552) = 1;
LABEL_88:
    v10 += 8;
  }
  while (v10 != v11);
  if (v124)
  {
    uint64_t v67 = 0;
    uint64_t v68 = **(void **)a2;
    uint64_t v98 = 0x200000000;
    uint64_t v104 = v68;
    unsigned int v105 = &v113;
    unint64_t v106 = &v114;
    uint64_t v107 = 0;
    int v108 = 0;
    __int16 v109 = 512;
    char v110 = 7;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    uint64_t v113 = &unk_1F2616E88;
    uint64_t v114 = &unk_1F2617008;
    uint64_t v69 = (unsigned __int8 *)*((void *)a2 + 6);
    uint64_t v102 = *((void *)a2 + 5);
    BOOL v103 = (char *)a2 + 24;
    uint64_t v96 = v69;
    int v97 = &v99;
    if (v69)
    {
      llvm::MetadataTracking::track((uint64_t)&v96, v69, 2);
      uint64_t v67 = (uint64_t)v96;
    }
    sub_1CB8461A4((uint64_t)&v97, 0, v67);
    if (v96)
    {
      int v88 = *v96;
      if ((v88 - 4) > 0x1E)
      {
        if ((v88 - 3) >= 0xFFFFFFFE) {
          uint64_t v91 = v96;
        }
        else {
          uint64_t v91 = 0;
        }
        if ((v88 - 3) < 0xFFFFFFFE)
        {
          if (v88 == 3) {
            *((void *)v96 + 1) = 0;
          }
          goto LABEL_120;
        }
        unint64_t v90 = (unint64_t)(v91 + 8);
      }
      else
      {
        if ((v96[1] & 0x7F) != 2 && !*((_DWORD *)v96 + 3)) {
          goto LABEL_120;
        }
        uint64_t v89 = *((void *)v96 + 2);
        if ((v89 & 4) == 0) {
          goto LABEL_120;
        }
        unint64_t v90 = v89 & 0xFFFFFFFFFFFFFFF8;
        if (!v90) {
          goto LABEL_120;
        }
      }
      v94[0] = (uint64_t)&v96;
      sub_1CC5FA668(v90 + 16, v94);
    }
LABEL_120:
    __int16 v95 = 257;
    if (v92 == 44) {
      unsigned int v70 = (llvm::Instruction *)sub_1CC9F56B4((uint64_t)&v97, (uint64_t)a4, (uint64_t)a3, a2, (uint64_t)v94);
    }
    else {
      unsigned int v70 = (llvm::Instruction *)sub_1CB930B40((uint64_t)&v97, (uint64_t)a4, (uint64_t)a3, a2, (uint64_t)v94);
    }
    a2 = v70;
    llvm::Value::doRAUW(v93, v70, (llvm::Value *)1);
    uint64_t v71 = *((void *)this + 6);
    v94[0] = (uint64_t)v93;
    int v72 = *((_DWORD *)this + 16);
    if (!v72)
    {
      uint64_t v81 = 0;
      goto LABEL_137;
    }
    int v73 = v72 - 1;
    unsigned int v74 = v73 & ((v93 >> 4) ^ (v93 >> 9));
    uint64_t v75 = (uint64_t *)(v71 + 8 * v74);
    BOOL v76 = (llvm::ValueAsMetadata *)*v75;
    if ((llvm::ValueAsMetadata *)*v75 != v93)
    {
      unint64_t v77 = 0;
      int v78 = 1;
      while (v76 != (llvm::ValueAsMetadata *)-4096)
      {
        if (v77) {
          BOOL v79 = 0;
        }
        else {
          BOOL v79 = v76 == (llvm::ValueAsMetadata *)-8192;
        }
        if (v79) {
          unint64_t v77 = v75;
        }
        unsigned int v80 = v74 + v78++;
        unsigned int v74 = v80 & v73;
        uint64_t v75 = (uint64_t *)(v71 + 8 * v74);
        BOOL v76 = (llvm::ValueAsMetadata *)*v75;
        if ((llvm::ValueAsMetadata *)*v75 == v93) {
          goto LABEL_143;
        }
      }
      if (v77) {
        uint64_t v81 = v77;
      }
      else {
        uint64_t v81 = v75;
      }
LABEL_137:
      *sub_1CCE7BF00((uint64_t)this + 48, v94, v81) = (uint64_t)v93;
      uint64_t v82 = *((void *)this + 11);
      uint64_t v83 = *((void *)this + 10);
      if (v82 == v83) {
        uint64_t v84 = 0;
      }
      else {
        uint64_t v84 = ((v82 - v83) << 6) - 1;
      }
      uint64_t v85 = *((void *)this + 14);
      unint64_t v86 = v85 + *((void *)this + 13);
      if (v84 == v86)
      {
        sub_1CCE7C1C0((uint64_t)this + 72);
        uint64_t v83 = *((void *)this + 10);
        uint64_t v85 = *((void *)this + 14);
        unint64_t v86 = *((void *)this + 13) + v85;
      }
      *(void *)(*(void *)(v83 + ((v86 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v86 & 0x1FF)) = v93;
      *((void *)this + 14) = v85 + 1;
    }
LABEL_143:
    if (*((unsigned __int8 *)a2 + 16) <= 0x1Bu) {
      a2 = 0;
    }
    if (v97 != &v99) {
      free(v97);
    }
  }
LABEL_147:
  if (v123 != (char *)v125) {
    free(v123);
  }
  return a2;
}

uint64_t sub_1CCE75AA0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (!v2) {
    return result;
  }
  if (*(void *)(v2 + 8)) {
    return result;
  }
  uint64_t v3 = result;
  unsigned int v4 = *(unsigned __int8 *)(result + 16);
  if (v4 < 0x1C) {
    return result;
  }
  uint64_t v25 = 0;
  if (v4 == 49)
  {
    int v8 = *(_DWORD *)(result + 20);
    if ((v8 & 0x40000000) != 0) {
      int v9 = *(unsigned __int8 ***)(result - 8);
    }
    else {
      int v9 = (unsigned __int8 **)(result - 32 * (v8 & 0x7FFFFFF));
    }
    uint64_t v12 = *v9;
    if ((*v9)[16] >= 0x15u || v9[4][16] >= 0x15u)
    {
      __int32 v23 = &v25;
      uint64_t v24 = 0;
      if (sub_1CC04AFFC((uint64_t)&v23, v12))
      {
        uint64_t v13 = v25;
        if (*(_UNKNOWN **)(v25 + 8) == &unk_1CFB2E344) {
          uint64_t v13 = *(void *)(v25 + 16);
        }
        if ((*(unsigned char *)(v13 + 28) & 8) != 0)
        {
LABEL_28:
          unsigned int v17 = *(_DWORD *)(a2 + 8);
          if (v17 >= *(_DWORD *)(a2 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a2 + 8 * v17) = v3;
          ++*(_DWORD *)(a2 + 8);
LABEL_30:
          int v18 = *(_DWORD *)(v3 + 20);
          if ((v18 & 0x40000000) != 0) {
            char v19 = *(void **)(v3 - 8);
          }
          else {
            char v19 = (void *)(v3 - 32 * (v18 & 0x7FFFFFF));
          }
          sub_1CCE75AA0(*v19, a2);
          int v20 = *(_DWORD *)(v3 + 20);
          if ((v20 & 0x40000000) != 0) {
            uint64_t v21 = *(void *)(v3 - 8);
          }
          else {
            uint64_t v21 = v3 - 32 * (v20 & 0x7FFFFFF);
          }
          return sub_1CCE75AA0(*(void *)(v21 + 32), a2);
        }
      }
      int v14 = *(_DWORD *)(v3 + 20);
      if ((v14 & 0x40000000) != 0) {
        uint64_t v15 = *(void *)(v3 - 8);
      }
      else {
        uint64_t v15 = v3 - 32 * (v14 & 0x7FFFFFF);
      }
      __int32 v10 = *(unsigned __int8 **)(v15 + 32);
      v22[0] = &v25;
      v22[1] = 0;
      unsigned int v11 = (uint64_t **)v22;
LABEL_24:
      if (!sub_1CC04AFFC((uint64_t)v11, v10)) {
        goto LABEL_30;
      }
      uint64_t v16 = v25;
      if (*(_UNKNOWN **)(v25 + 8) == &unk_1CFB2E344) {
        uint64_t v16 = *(void *)(v25 + 16);
      }
      if ((*(unsigned char *)(v16 + 28) & 8) == 0) {
        goto LABEL_30;
      }
      goto LABEL_28;
    }
  }
  else if (v4 == 46)
  {
    int v6 = *(_DWORD *)(result + 20);
    uint64_t v7 = (v6 & 0x40000000) != 0 ? *(void **)(result - 8) : (void *)(result - 32 * (v6 & 0x7FFFFFF));
    if (*(unsigned __int8 *)(*v7 + 16) >= 0x15u)
    {
      __int32 v10 = (unsigned __int8 *)v7[4];
      __int32 v23 = &v25;
      uint64_t v24 = 0;
      unsigned int v11 = &v23;
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t sub_1CCE75C80(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 == 5)
  {
    if (*(_WORD *)(a1 + 18) == 15
      && (sub_1CC03F414((uint64_t)v18, *(llvm::Constant **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF))) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v2 == 43 && (sub_1CBF535C4((uint64_t)v18, *(llvm::Constant **)(a1 - 64)) & 1) != 0)
  {
    return 0;
  }
  if (sub_1CB845E74(a1))
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
    if (v3 <= 0x1B) {
      unsigned int v4 = *(unsigned __int16 *)(a1 + 18);
    }
    else {
      unsigned int v4 = v3 - 28;
    }
    if (v4 == 12) {
      return 0;
    }
    if (v4 == 16)
    {
      if ((*(unsigned char *)(a1 + 17) & 0x10) != 0)
      {
        int v5 = *(_DWORD *)(a1 + 20);
        if ((v5 & 0x40000000) != 0) {
          int v6 = *(llvm::Constant ***)(a1 - 8);
        }
        else {
          int v6 = (llvm::Constant **)(a1 - 32 * (v5 & 0x7FFFFFF));
        }
        if (sub_1CC0241FC((uint64_t)&v20, *v6)) {
          return 0;
        }
      }
      else
      {
        int v16 = *(_DWORD *)(a1 + 20);
        if ((v16 & 0x40000000) != 0) {
          unsigned int v17 = *(llvm::Constant ***)(a1 - 8);
        }
        else {
          unsigned int v17 = (llvm::Constant **)(a1 - 32 * (v16 & 0x7FFFFFF));
        }
        if (sub_1CC02435C((uint64_t)&v19, *v17)) {
          return 0;
        }
      }
    }
  }
  int v7 = *(_DWORD *)(a1 + 20);
  if ((v7 & 0x40000000) != 0) {
    int v8 = *(uint64_t **)(a1 - 8);
  }
  else {
    int v8 = (uint64_t *)(a1 - 32 * (v7 & 0x7FFFFFF));
  }
  if (*(unsigned __int8 *)(v8[4] + 16) - 11 < 2) {
    return 0;
  }
  uint64_t v10 = *v8;
  if (!sub_1CCE6F0D0(*v8, 13, 14) && !sub_1CCE6F0D0(v10, 15, 16))
  {
    int v11 = *(_DWORD *)(a1 + 20);
    uint64_t v12 = (v11 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v11 & 0x7FFFFFF);
    uint64_t v13 = *(void *)(v12 + 32);
    if (!sub_1CCE6F0D0(v13, 13, 14) && !sub_1CCE6F0D0(v13, 15, 16))
    {
      uint64_t v14 = *(void *)(a1 + 8);
      if (*(void *)(v14 + 8)) {
        return 0;
      }
      uint64_t v15 = *(void *)(v14 + 24);
      if (!sub_1CCE6F0D0(v15, 13, 14) && !sub_1CCE6F0D0(v15, 15, 16)) {
        return 0;
      }
    }
  }
  return 1;
}

llvm::Instruction *llvm::ReassociatePass::canonicalizeNegFPConstants(llvm::ReassociatePass *this, llvm::Instruction *a2)
{
  int v2 = a2;
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 5)
  {
    if (*((_WORD *)a2 + 9) != 14) {
      goto LABEL_23;
    }
    int v8 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    int v5 = *(llvm::Value **)v8;
    if (!*(void *)v8) {
      goto LABEL_23;
    }
    uint64_t v6 = *((void *)v8 + 4);
    uint64_t v9 = *(void *)(v6 + 8);
    if (!v9 || *(void *)(v9 + 8) || *(unsigned __int8 *)(v6 + 16) < 0x1Cu) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (v4 != 42) {
    goto LABEL_16;
  }
  int v5 = (llvm::Value *)*((void *)a2 - 8);
  if (v5)
  {
    uint64_t v6 = *((void *)a2 - 4);
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      if (!*(void *)(v7 + 8) && *(unsigned __int8 *)(v6 + 16) >= 0x1Cu)
      {
LABEL_13:
        uint64_t v10 = llvm::ReassociatePass::canonicalizeNegFPConstantsForOp(this, a2, (llvm::Instruction *)v6, v5);
        if (v10) {
          int v2 = v10;
        }
        int v4 = *((unsigned __int8 *)v2 + 16);
LABEL_16:
        if (v4 != 5)
        {
          if (v4 != 42) {
            goto LABEL_31;
          }
          goto LABEL_18;
        }
LABEL_23:
        if (*((_WORD *)v2 + 9) != 14) {
          goto LABEL_35;
        }
        uint64_t v14 = (void *)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
        uint64_t v11 = *v14;
        uint64_t v15 = *(void *)(*v14 + 8);
        if (!v15) {
          goto LABEL_35;
        }
        if (*(void *)(v15 + 8)) {
          goto LABEL_35;
        }
        if (*(unsigned __int8 *)(v11 + 16) < 0x1Cu) {
          goto LABEL_35;
        }
        uint64_t v13 = (llvm::Value *)v14[4];
        if (!v13) {
          goto LABEL_35;
        }
        goto LABEL_28;
      }
    }
  }
LABEL_18:
  uint64_t v11 = *((void *)v2 - 8);
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12) {
    return v2;
  }
  if (*(void *)(v12 + 8)) {
    return v2;
  }
  if (*(unsigned __int8 *)(v11 + 16) < 0x1Cu) {
    return v2;
  }
  uint64_t v13 = (llvm::Value *)*((void *)v2 - 4);
  if (!v13) {
    return v2;
  }
LABEL_28:
  int v16 = llvm::ReassociatePass::canonicalizeNegFPConstantsForOp(this, v2, (llvm::Instruction *)v11, v13);
  if (v16) {
    int v2 = v16;
  }
  int v4 = *((unsigned __int8 *)v2 + 16);
LABEL_31:
  if (v4 == 5)
  {
LABEL_35:
    if (*((_WORD *)v2 + 9) != 16) {
      return v2;
    }
    char v19 = (char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF);
    unsigned int v17 = *(llvm::Value **)v19;
    if (!*(void *)v19) {
      return v2;
    }
    uint64_t v18 = *((void *)v19 + 4);
    goto LABEL_38;
  }
  if (v4 != 44) {
    return v2;
  }
  unsigned int v17 = (llvm::Value *)*((void *)v2 - 8);
  if (!v17) {
    return v2;
  }
  uint64_t v18 = *((void *)v2 - 4);
LABEL_38:
  uint64_t v20 = *(void *)(v18 + 8);
  if (v20)
  {
    if (!*(void *)(v20 + 8) && *(unsigned __int8 *)(v18 + 16) >= 0x1Cu)
    {
      BOOL v22 = llvm::ReassociatePass::canonicalizeNegFPConstantsForOp(this, v2, (llvm::Instruction *)v18, v17);
      if (v22) {
        return v22;
      }
    }
  }
  return v2;
}

void llvm::ReassociatePass::OptimizeInst(llvm::ReassociatePass *this, llvm::Instruction *a2)
{
  v305[8] = *MEMORY[0x1E4F143B8];
  int v2 = *((unsigned __int8 *)a2 + 16);
  BOOL v3 = v2 != 40 && (v2 - 41) > 0x11;
  if (v3) {
    return;
  }
  if (v2 == 53)
  {
    int v6 = *((_DWORD *)a2 + 5);
    uint64_t v7 = (v6 & 0x40000000) != 0 ? (uint64_t *)*((void *)a2 - 1) : (uint64_t *)((char *)a2 - 32 * (v6 & 0x7FFFFFF));
    if (*(unsigned char *)(v7[4] + 16) == 16
      && (sub_1CCE6E7A8(*v7, 17)
       || (uint64_t v11 = *((void *)a2 + 1)) != 0
       && !*(void *)(v11 + 8)
       && (sub_1CCE6E7A8(*(void *)(v11 + 24), 17) || sub_1CCE6E7A8(*(void *)(*((void *)a2 + 1) + 24), 13))))
    {
      int v8 = (llvm::ConstantExpr *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 1uLL, 0);
      int v9 = *((_DWORD *)a2 + 5);
      if ((v9 & 0x40000000) != 0) {
        uint64_t v10 = (char *)*((void *)a2 - 1);
      }
      else {
        uint64_t v10 = (char *)a2 - 32 * (v9 & 0x7FFFFFF);
      }
      uint64_t v84 = (unsigned int *)*((void *)v10 + 4);
      Shl = llvm::ConstantExpr::getShl(v8, (llvm::Constant *)v84, 0, 0);
      int v86 = *((_DWORD *)a2 + 5);
      if ((v86 & 0x40000000) != 0) {
        BOOL v87 = (void **)*((void *)a2 - 1);
      }
      else {
        BOOL v87 = (void **)((char *)a2 - 32 * (v86 & 0x7FFFFFF));
      }
      int v88 = *v87;
      LOWORD(v302[0]) = 257;
      uint64_t v12 = llvm::BinaryOperator::Create(17, v88, (uint64_t)Shl, (const char **)&v299, (uint64_t)a2);
      unint64_t v90 = llvm::UndefValue::get(*(llvm::UndefValue **)a2, v89);
      int v91 = *((_DWORD *)a2 + 5);
      if ((v91 & 0x40000000) != 0) {
        int v92 = (char *)*((void *)a2 - 1);
      }
      else {
        int v92 = (char *)a2 - 32 * (v91 & 0x7FFFFFF);
      }
      if (*(void *)v92)
      {
        **((void **)v92 + 2) = *((void *)v92 + 1);
        uint64_t v93 = *((void *)v92 + 1);
        if (v93) {
          *(void *)(v93 + 16) = *((void *)v92 + 2);
        }
      }
      *(void *)int v92 = v90;
      if (v90)
      {
        uint64_t v96 = *((void *)v90 + 1);
        int v94 = (void *)((char *)v90 + 8);
        uint64_t v95 = v96;
        *((void *)v92 + 1) = v96;
        if (v96) {
          *(void *)(v95 + 16) = v92 + 8;
        }
        *((void *)v92 + 2) = v94;
        *int v94 = v92;
      }
      llvm::Value::takeName((int32x2_t ****)v12, a2);
      llvm::Value::doRAUW(a2, v12, (llvm::Value *)1);
      int v97 = (void *)*((void *)a2 + 6);
      int v303 = v97;
      if (v97) {
        llvm::MetadataTracking::track((uint64_t)&v303, (unsigned __int8 *)v97, 2);
      }
      uint64_t v98 = (void **)((char *)v12 + 48);
      if (&v303 == (void **)((char *)v12 + 48))
      {
        if (!v303) {
          goto LABEL_185;
        }
        int v291 = *(unsigned __int8 *)v303;
        if ((v291 - 4) > 0x1E)
        {
          if ((v291 - 3) >= 0xFFFFFFFE) {
            uint64_t v297 = v303;
          }
          else {
            uint64_t v297 = 0;
          }
          if ((v291 - 3) < 0xFFFFFFFE)
          {
            if (v291 == 3) {
              *((void *)v303 + 1) = 0;
            }
LABEL_185:
            char v101 = *((unsigned char *)a2 + 17) & 2;
            if ((*((unsigned char *)a2 + 17) & 4) == 0) {
              goto LABEL_197;
            }
            if ((*((unsigned char *)a2 + 17) & 2) == 0)
            {
              uint64_t v102 = v84 + 6;
              uint64_t v103 = v84[8];
              if (v103 >= 0x41)
              {
                int v104 = 0;
                int64_t v105 = (unint64_t)(v103 + 63) >> 6;
                do
                {
                  BOOL v3 = v105-- < 1;
                  if (v3) {
                    break;
                  }
                  unint64_t v106 = *(void *)(*v102 + 8 * v105);
                  v104 += __clz(v106);
                }
                while (!v106);
                int v107 = v103 | 0xFFFFFFC0;
                if ((v103 & 0x3F) == 0) {
                  int v107 = 0;
                }
                if ((v103 - v104 - v107) > 0x40)
                {
LABEL_197:
                  *((unsigned char *)v12 + 17) = *((unsigned char *)v12 + 17) & 0xFD | v101;
                  uint64_t v108 = *((void *)this + 6);
                  *(void *)&long long v299 = a2;
                  int v109 = *((_DWORD *)this + 16);
                  if (v109)
                  {
                    int v110 = v109 - 1;
                    unsigned int v111 = v110 & ((a2 >> 4) ^ (a2 >> 9));
                    uint64_t v112 = (llvm::Instruction **)(v108 + 8 * v111);
                    uint64_t v113 = *v112;
                    if (*v112 == a2)
                    {
LABEL_217:
                      *((unsigned char *)this + 552) = 1;
                      goto LABEL_16;
                    }
                    uint64_t v114 = 0;
                    int v115 = 1;
                    while (v113 != (llvm::Instruction *)-4096)
                    {
                      if (v114) {
                        BOOL v116 = 0;
                      }
                      else {
                        BOOL v116 = v113 == (llvm::Instruction *)-8192;
                      }
                      if (v116) {
                        uint64_t v114 = (uint64_t *)v112;
                      }
                      unsigned int v117 = v111 + v115++;
                      unsigned int v111 = v117 & v110;
                      uint64_t v112 = (llvm::Instruction **)(v108 + 8 * v111);
                      uint64_t v113 = *v112;
                      if (*v112 == a2) {
                        goto LABEL_217;
                      }
                    }
                    if (v114) {
                      char v118 = v114;
                    }
                    else {
                      char v118 = (uint64_t *)v112;
                    }
                  }
                  else
                  {
                    char v118 = 0;
                  }
                  *sub_1CCE7BF00((uint64_t)this + 48, (uint64_t *)&v299, v118) = (uint64_t)a2;
                  uint64_t v119 = *((void *)this + 11);
                  uint64_t v120 = *((void *)this + 10);
                  if (v119 == v120) {
                    uint64_t v121 = 0;
                  }
                  else {
                    uint64_t v121 = ((v119 - v120) << 6) - 1;
                  }
                  uint64_t v122 = *((void *)this + 14);
                  unint64_t v123 = v122 + *((void *)this + 13);
                  if (v121 == v123)
                  {
                    sub_1CCE7C1C0((uint64_t)this + 72);
                    uint64_t v120 = *((void *)this + 10);
                    uint64_t v122 = *((void *)this + 14);
                    unint64_t v123 = *((void *)this + 13) + v122;
                  }
                  *(void *)(*(void *)(v120 + ((v123 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v123 & 0x1FF)) = a2;
                  *((void *)this + 14) = v122 + 1;
                  goto LABEL_217;
                }
                uint64_t v102 = (void *)*v102;
              }
              if (*v102 >= (unint64_t)((*(_DWORD *)(*(void *)a2 + 8) >> 8) - 1)) {
                goto LABEL_197;
              }
            }
            *((unsigned char *)v12 + 17) |= 4u;
            goto LABEL_197;
          }
          unint64_t v293 = (unint64_t)v297 + 8;
        }
        else
        {
          if ((*((unsigned char *)v303 + 1) & 0x7F) != 2 && !*((_DWORD *)v303 + 3)) {
            goto LABEL_185;
          }
          uint64_t v292 = *((void *)v303 + 2);
          if ((v292 & 4) == 0) {
            goto LABEL_185;
          }
          unint64_t v293 = v292 & 0xFFFFFFFFFFFFFFF8;
          if (!v293) {
            goto LABEL_185;
          }
        }
        *(void *)&long long v299 = &v303;
        sub_1CC5FA668(v293 + 16, &v299);
        goto LABEL_185;
      }
      uint64_t v99 = (unsigned __int8 *)*v98;
      if (!*v98)
      {
LABEL_183:
        int v100 = (unsigned __int8 *)v303;
        char *v98 = v303;
        if (v100)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v303, v100, (uint64_t)v12 + 48);
          int v303 = 0;
        }
        goto LABEL_185;
      }
      int v145 = *v99;
      if ((v145 - 4) > 0x1E)
      {
        if ((v145 - 3) >= 0xFFFFFFFE) {
          uint64_t v245 = *v98;
        }
        else {
          uint64_t v245 = 0;
        }
        if ((v145 - 3) < 0xFFFFFFFE)
        {
          if (v145 == 3) {
            *((void *)v99 + 1) = 0;
          }
          goto LABEL_183;
        }
        unint64_t v147 = (unint64_t)v245 + 8;
      }
      else
      {
        if ((v99[1] & 0x7F) != 2 && !*((_DWORD *)v99 + 3)) {
          goto LABEL_183;
        }
        uint64_t v146 = *((void *)v99 + 2);
        if ((v146 & 4) == 0) {
          goto LABEL_183;
        }
        unint64_t v147 = v146 & 0xFFFFFFFFFFFFFFF8;
        if (!v147) {
          goto LABEL_183;
        }
      }
      *(void *)&long long v299 = (char *)v12 + 48;
      sub_1CC5FA668(v147 + 16, &v299);
      goto LABEL_183;
    }
  }
  uint64_t v12 = a2;
LABEL_16:
  if (llvm::Instruction::isCommutative(v12))
  {
    int v13 = *((_DWORD *)v12 + 5);
    uint64_t v14 = (v13 & 0x40000000) != 0
        ? (unsigned __int8 **)*((void *)v12 - 1)
        : (unsigned __int8 **)((char *)v12 - 32 * (v13 & 0x7FFFFFF));
    uint64_t v15 = *v14;
    int v16 = v14[4];
    if (*v14 != v16 && v16[16] >= 0x15u)
    {
      if (v15[16] < 0x15u
        || (Ranuint64_t k = llvm::ReassociatePass::getRank(this, (llvm::Value *)v16),
            Rank < llvm::ReassociatePass::getRank(this, (llvm::Value *)v15)))
      {
        if (llvm::Instruction::isCommutative(v12))
        {
          uint64_t v18 = *((void *)v12 - 8);
          uint64_t v19 = *((void *)v12 - 4);
          if (v18 != v19)
          {
            uint64_t v20 = *((void *)v12 - 3);
            *((void *)v12 - 8) = v19;
            *((void *)v12 - 4) = v18;
            long long v21 = *(_OWORD *)((char *)v12 - 56);
            BOOL v22 = (void *)*((void *)v12 - 2);
            *((void *)v12 - 7) = v20;
            *((void *)v12 - 6) = v22;
            *(_OWORD *)((char *)v12 - 24) = v21;
            void *v22 = (char *)v12 - 64;
            uint64_t v23 = *((void *)v12 - 7);
            if (v23) {
              *(void *)(v23 + 16) = (char *)v12 - 56;
            }
            **((void **)v12 - 2) = (char *)v12 - 32;
            uint64_t v24 = *((void *)v12 - 3);
            if (v24) {
              *(void *)(v24 + 16) = (char *)v12 - 24;
            }
          }
        }
      }
    }
  }
  uint64_t v25 = llvm::ReassociatePass::canonicalizeNegFPConstants(this, v12);
  if (v25) {
    uint64_t v26 = (uint64_t)v25;
  }
  else {
    uint64_t v26 = (uint64_t)v12;
  }
  int v27 = *(_DWORD *)(*(void *)v26 + 8);
  unsigned __int8 v28 = v27;
  if ((v27 & 0xFE) == 0x12) {
    unsigned __int8 v28 = *(unsigned char *)(**(void **)(*(void *)v26 + 16) + 8);
  }
  if (v28 > 6u)
  {
    if (v27 == 269) {
      return;
    }
  }
  else if (v27 == 269 || (*(unsigned char *)(v26 + 17) & 0xF2) != 0xF2)
  {
    return;
  }
  if (*(unsigned char *)(v26 + 16) != 57) {
    goto LABEL_268;
  }
  int v29 = *(_DWORD *)(v26 + 20);
  if ((v29 & 0x40000000) == 0)
  {
    uint64_t v30 = v29 & 0x7FFFFFF;
    int v31 = (uint64_t *)(v26 - 32 * v30);
    if (!v30) {
      goto LABEL_49;
    }
LABEL_44:
    uint64_t v32 = &v31[4 * v30];
    long long v33 = xmmword_1CFB2D2C0;
    do
    {
      uint64_t v34 = 0;
      uint64_t v35 = *v31;
      long long v299 = v33;
      do
      {
        if (sub_1CCE6E7A8(v35, *(_DWORD *)((char *)&v299 + v34))) {
          goto LABEL_54;
        }
        v34 += 4;
      }
      while (v34 != 16);
      v31 += 4;
      long long v33 = xmmword_1CFB2D2C0;
    }
    while (v31 != v32);
    goto LABEL_49;
  }
  int v31 = *(uint64_t **)(v26 - 8);
  uint64_t v30 = v29 & 0x7FFFFFF;
  if (v30) {
    goto LABEL_44;
  }
LABEL_49:
  uint64_t v36 = *(void *)(v26 + 8);
  if (!*(void *)(v36 + 8))
  {
    uint64_t v37 = 0;
    uint64_t v38 = *(void *)(v36 + 24);
    long long v299 = xmmword_1CFB2D2C0;
    while (!sub_1CCE6E7A8(v38, *(_DWORD *)((char *)&v299 + v37)))
    {
      v37 += 4;
      if (v37 == 16) {
        goto LABEL_268;
      }
    }
LABEL_54:
    char v39 = 0;
    uint64_t v304 = 0x800000000;
    *(void *)&long long v299 = v302;
    *((void *)&v299 + 1) = v302;
    int v303 = v305;
    uint64_t v300 = 8;
    int v301 = 0;
    if (v26 && *(unsigned __int8 *)(v26 + 16) >= 0x1Cu)
    {
      unsigned int v40 = 1;
      HIDWORD(v300) = 1;
      v302[0] = v26;
      v305[0] = v26;
      while (1)
      {
        while (1)
        {
          char v39 = 0;
          uint64_t v41 = *((void *)v303 + --v40);
          LODWORD(v304) = v40;
          unsigned int v42 = *(unsigned __int8 *)(v41 + 16);
          if (v42 > 0x3B) {
            break;
          }
          if (v42 == 53) {
            goto LABEL_66;
          }
          if (v42 != 57) {
            goto LABEL_223;
          }
          int v43 = *(_DWORD *)(v41 + 20);
          if ((v43 & 0x40000000) != 0)
          {
            unint64_t v45 = *(uint64_t **)(v41 - 8);
            uint64_t v44 = v43 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v44 = v43 & 0x7FFFFFF;
            unint64_t v45 = (uint64_t *)(v41 - 32 * v44);
          }
          int64_t v65 = &v45[4 * v44];
          if (v44)
          {
            while (1)
            {
              uint64_t v66 = *v45;
              if (*v45) {
                BOOL v67 = *(unsigned __int8 *)(*v45 + 16) >= 0x1Cu;
              }
              else {
                BOOL v67 = 0;
              }
              if (!v67) {
                goto LABEL_218;
              }
              uint64_t v68 = *((void *)&v299 + 1);
              uint64_t v69 = HIDWORD(v300);
              if (*((void *)&v299 + 1) == (void)v299)
              {
                if (HIDWORD(v300))
                {
                  unsigned int v70 = 0;
                  uint64_t v71 = 8 * HIDWORD(v300);
                  int v72 = (void *)*((void *)&v299 + 1);
                  while (*v72 != v66)
                  {
                    if (*v72 == -2) {
                      unsigned int v70 = v72;
                    }
                    ++v72;
                    v71 -= 8;
                    if (!v71)
                    {
                      if (!v70) {
                        goto LABEL_113;
                      }
                      *unsigned int v70 = v66;
                      --v301;
                      goto LABEL_137;
                    }
                  }
                  goto LABEL_139;
                }
LABEL_113:
                unsigned int v73 = v300;
                if (HIDWORD(v300) < v300)
                {
                  ++HIDWORD(v300);
                  *(void *)(*((void *)&v299 + 1) + 8 * v69) = v66;
                  goto LABEL_137;
                }
              }
              else
              {
                unsigned int v73 = v300;
              }
              if (3 * v73 <= 4 * (HIDWORD(v300) - v301)) {
                break;
              }
              if (v73 - HIDWORD(v300) < v73 >> 3) {
                goto LABEL_146;
              }
LABEL_118:
              unsigned int v74 = v73 - 1;
              unsigned int v75 = (v73 - 1) & ((v66 >> 4) ^ (v66 >> 9));
              BOOL v76 = (void *)(v68 + 8 * v75);
              uint64_t v77 = *v76;
              if (*v76 != -1)
              {
                int v78 = 0;
                int v79 = 1;
                while (v77 != v66)
                {
                  if (v78) {
                    BOOL v80 = 0;
                  }
                  else {
                    BOOL v80 = v77 == -2;
                  }
                  if (v80) {
                    int v78 = v76;
                  }
                  unsigned int v81 = v75 + v79++;
                  unsigned int v75 = v81 & v74;
                  BOOL v76 = (void *)(v68 + 8 * (v81 & v74));
                  uint64_t v77 = *v76;
                  if (*v76 == -1) {
                    goto LABEL_130;
                  }
                }
                goto LABEL_139;
              }
              int v78 = 0;
LABEL_130:
              if (v78) {
                uint64_t v82 = v78;
              }
              else {
                uint64_t v82 = v76;
              }
              if (*v82 == v66) {
                goto LABEL_139;
              }
              if (*v82 == -2) {
                --v301;
              }
              else {
                ++HIDWORD(v300);
              }
              *uint64_t v82 = v66;
LABEL_137:
              int v83 = v304;
              if (v304 >= HIDWORD(v304)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v303 + v304) = v66;
              LODWORD(v304) = v83 + 1;
LABEL_139:
              v45 += 4;
              if (v45 == v65) {
                goto LABEL_157;
              }
            }
            if (v73 >= 0x40) {
              v73 *= 2;
            }
            else {
              unsigned int v73 = 128;
            }
LABEL_146:
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v299, v73);
            unsigned int v73 = v300;
            uint64_t v68 = *((void *)&v299 + 1);
            goto LABEL_118;
          }
LABEL_157:
          unsigned int v40 = v304;
          if (!v304) {
            goto LABEL_222;
          }
        }
        if (v42 == 67) {
          break;
        }
        if (v42 != 60) {
          goto LABEL_223;
        }
        if (!v40)
        {
LABEL_222:
          char v39 = 1;
          goto LABEL_223;
        }
      }
LABEL_66:
      int v46 = *(_DWORD *)(v41 + 20);
      if ((v46 & 0x40000000) != 0) {
        uint64_t v47 = *(uint64_t **)(v41 - 8);
      }
      else {
        uint64_t v47 = (uint64_t *)(v41 - 32 * (v46 & 0x7FFFFFF));
      }
      uint64_t v48 = *v47;
      unsigned int v49 = *(unsigned __int8 *)(*v47 + 16);
      if (v48) {
        BOOL v50 = v49 >= 0x1C;
      }
      else {
        BOOL v50 = 0;
      }
      if (!v50)
      {
LABEL_218:
        char v39 = 0;
        goto LABEL_223;
      }
      uint64_t v51 = *((void *)&v299 + 1);
      uint64_t v52 = HIDWORD(v300);
      if (*((void *)&v299 + 1) == (void)v299)
      {
        if (HIDWORD(v300))
        {
          uint64_t v53 = 0;
          uint64_t v54 = 8 * HIDWORD(v300);
          uint64_t v55 = (void *)*((void *)&v299 + 1);
          while (*v55 != v48)
          {
            if (*v55 == -2) {
              uint64_t v53 = v55;
            }
            ++v55;
            v54 -= 8;
            if (!v54)
            {
              if (!v53) {
                goto LABEL_82;
              }
              *uint64_t v53 = v48;
              --v301;
              goto LABEL_155;
            }
          }
          goto LABEL_157;
        }
LABEL_82:
        unsigned int v56 = v300;
        if (HIDWORD(v300) < v300)
        {
          ++HIDWORD(v300);
          *(void *)(*((void *)&v299 + 1) + 8 * v52) = v48;
LABEL_155:
          if (v40 >= HIDWORD(v304)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v303 + v40) = v48;
          LODWORD(v304) = v40 + 1;
          goto LABEL_157;
        }
      }
      else
      {
        unsigned int v56 = v300;
      }
      if (3 * v56 <= 4 * (HIDWORD(v300) - v301))
      {
        if (v56 >= 0x40) {
          v56 *= 2;
        }
        else {
          unsigned int v56 = 128;
        }
      }
      else if (v56 - HIDWORD(v300) >= v56 >> 3)
      {
LABEL_87:
        unsigned int v57 = v56 - 1;
        unsigned int v58 = (v56 - 1) & ((v48 >> 4) ^ (v48 >> 9));
        uint64_t v59 = (void *)(v51 + 8 * v58);
        uint64_t v60 = *v59;
        if (*v59 != -1)
        {
          uint64_t v61 = 0;
          int v62 = 1;
          while (v60 != v48)
          {
            if (v61) {
              BOOL v63 = 0;
            }
            else {
              BOOL v63 = v60 == -2;
            }
            if (v63) {
              uint64_t v61 = v59;
            }
            unsigned int v64 = v58 + v62++;
            unsigned int v58 = v64 & v57;
            uint64_t v59 = (void *)(v51 + 8 * (v64 & v57));
            uint64_t v60 = *v59;
            if (*v59 == -1) {
              goto LABEL_149;
            }
          }
          goto LABEL_157;
        }
        uint64_t v61 = 0;
LABEL_149:
        if (v61) {
          uint64_t v59 = v61;
        }
        if (*v59 == v48) {
          goto LABEL_157;
        }
        if (*v59 == -2) {
          --v301;
        }
        else {
          ++HIDWORD(v300);
        }
        void *v59 = v48;
        unsigned int v40 = v304;
        goto LABEL_155;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v299, v56);
      unsigned int v56 = v300;
      uint64_t v51 = *((void *)&v299 + 1);
      goto LABEL_87;
    }
LABEL_223:
    if (*((void *)&v299 + 1) != (void)v299) {
      free(*((void **)&v299 + 1));
    }
    if (v303 != v305) {
      free(v303);
    }
    if ((v39 & 1) == 0)
    {
      int v124 = *(_DWORD *)(v26 + 20);
      unsigned int v125 = (v124 & 0x40000000) != 0 ? *(llvm ***)(v26 - 8) : (llvm **)(v26 - 32 * (v124 & 0x7FFFFFF));
      if (llvm::haveNoCommonBitsSet(*v125, v125[4], (void **)(*(void *)(*(void *)(*(void *)(v26 + 40) + 56) + 40) + 272), 0, (llvm::AssumptionCache *)v26, 0, (const llvm::DominatorTree *)1))
      {
        int v126 = *(_DWORD *)(v26 + 20);
        if ((v126 & 0x40000000) != 0) {
          uint64_t v127 = *(void *)(v26 - 8);
        }
        else {
          uint64_t v127 = v26 - 32 * (v126 & 0x7FFFFFF);
        }
        uint64_t v128 = *(void **)v127;
        uint64_t v129 = *(void *)(v127 + 32);
        LOWORD(v302[0]) = 257;
        uint64_t v130 = sub_1CCE7A7E4(v128, v129, (const char **)&v299, v26, v26);
        *((unsigned char *)v130 + 17) |= 6u;
        llvm::Value::takeName((int32x2_t ****)v130, (llvm::Value *)v26);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v26, v130, (llvm::Value *)1);
        uint64_t v131 = *(void **)(v26 + 48);
        int v303 = v131;
        if (v131) {
          llvm::MetadataTracking::track((uint64_t)&v303, (unsigned __int8 *)v131, 2);
        }
        uint64_t v132 = (void **)((char *)v130 + 48);
        if (&v303 == (void **)((char *)v130 + 48))
        {
          if (!v303) {
            goto LABEL_241;
          }
          int v294 = *(unsigned __int8 *)v303;
          if ((v294 - 4) > 0x1E)
          {
            if ((v294 - 3) >= 0xFFFFFFFE) {
              uint64_t v298 = v303;
            }
            else {
              uint64_t v298 = 0;
            }
            if ((v294 - 3) < 0xFFFFFFFE)
            {
              if (v294 == 3) {
                *((void *)v303 + 1) = 0;
              }
LABEL_241:
              uint64_t v135 = *((void *)this + 6);
              *(void *)&long long v299 = v26;
              int v136 = *((_DWORD *)this + 16);
              if (v136)
              {
                int v137 = v136 - 1;
                unsigned int v138 = v137 & ((v26 >> 4) ^ (v26 >> 9));
                uint64_t v139 = (uint64_t *)(v135 + 8 * v138);
                uint64_t v140 = *v139;
                if (v26 == *v139)
                {
LABEL_267:
                  *((unsigned char *)this + 552) = 1;
                  uint64_t v26 = (uint64_t)v130;
                  goto LABEL_268;
                }
                BOOL v141 = 0;
                int v142 = 1;
                while (v140 != -4096)
                {
                  if (v141) {
                    BOOL v143 = 0;
                  }
                  else {
                    BOOL v143 = v140 == -8192;
                  }
                  if (v143) {
                    BOOL v141 = v139;
                  }
                  unsigned int v144 = v138 + v142++;
                  unsigned int v138 = v144 & v137;
                  uint64_t v139 = (uint64_t *)(v135 + 8 * v138);
                  uint64_t v140 = *v139;
                  if (v26 == *v139) {
                    goto LABEL_267;
                  }
                }
                if (v141) {
                  int v148 = v141;
                }
                else {
                  int v148 = v139;
                }
              }
              else
              {
                int v148 = 0;
              }
              *sub_1CCE7BF00((uint64_t)this + 48, (uint64_t *)&v299, v148) = v26;
              uint64_t v149 = *((void *)this + 11);
              uint64_t v150 = *((void *)this + 10);
              if (v149 == v150) {
                uint64_t v151 = 0;
              }
              else {
                uint64_t v151 = ((v149 - v150) << 6) - 1;
              }
              uint64_t v152 = *((void *)this + 14);
              unint64_t v153 = v152 + *((void *)this + 13);
              if (v151 == v153)
              {
                sub_1CCE7C1C0((uint64_t)this + 72);
                uint64_t v150 = *((void *)this + 10);
                uint64_t v152 = *((void *)this + 14);
                unint64_t v153 = *((void *)this + 13) + v152;
              }
              *(void *)(*(void *)(v150 + ((v153 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v153 & 0x1FF)) = v26;
              *((void *)this + 14) = v152 + 1;
              goto LABEL_267;
            }
            unint64_t v296 = (unint64_t)v298 + 8;
          }
          else
          {
            if ((*((unsigned char *)v303 + 1) & 0x7F) != 2 && !*((_DWORD *)v303 + 3)) {
              goto LABEL_241;
            }
            uint64_t v295 = *((void *)v303 + 2);
            if ((v295 & 4) == 0) {
              goto LABEL_241;
            }
            unint64_t v296 = v295 & 0xFFFFFFFFFFFFFFF8;
            if (!v296) {
              goto LABEL_241;
            }
          }
          *(void *)&long long v299 = &v303;
          sub_1CC5FA668(v296 + 16, &v299);
          goto LABEL_241;
        }
        uint64_t v133 = (unsigned __int8 *)*v132;
        if (!*v132)
        {
LABEL_239:
          unsigned int v134 = (unsigned __int8 *)v303;
          *uint64_t v132 = v303;
          if (v134) {
            llvm::MetadataTracking::retrack((uint64_t)&v303, v134, (uint64_t)v130 + 48);
          }
          goto LABEL_241;
        }
        int v247 = *v133;
        if ((v247 - 4) > 0x1E)
        {
          if ((v247 - 3) >= 0xFFFFFFFE) {
            unint64_t v288 = *v132;
          }
          else {
            unint64_t v288 = 0;
          }
          if ((v247 - 3) < 0xFFFFFFFE)
          {
            if (v247 == 3) {
              *((void *)v133 + 1) = 0;
            }
            goto LABEL_239;
          }
          unint64_t v249 = (unint64_t)v288 + 8;
        }
        else
        {
          if ((v133[1] & 0x7F) != 2 && !*((_DWORD *)v133 + 3)) {
            goto LABEL_239;
          }
          uint64_t v248 = *((void *)v133 + 2);
          if ((v248 & 4) == 0) {
            goto LABEL_239;
          }
          unint64_t v249 = v248 & 0xFFFFFFFFFFFFFFF8;
          if (!v249) {
            goto LABEL_239;
          }
        }
        *(void *)&long long v299 = (char *)v130 + 48;
        sub_1CC5FA668(v249 + 16, &v299);
        goto LABEL_239;
      }
    }
  }
LABEL_268:
  int v154 = *(unsigned __int8 *)(v26 + 16);
  if (v154 != 40 && v154 != 44)
  {
    if (v154 != 43) {
      goto LABEL_318;
    }
    if (sub_1CCE75C80(v26))
    {
      BOOL v158 = (char *)this + 48;
      unsigned int v159 = sub_1CCE7774C(v26, (uint64_t)this + 48, v155, v156, v157);
      *(void *)&long long v299 = v26;
      int v160 = *((_DWORD *)this + 16);
      if (v160)
      {
        uint64_t v161 = *((void *)this + 6);
        int v162 = v160 - 1;
        unsigned int v163 = v162 & ((v26 >> 4) ^ (v26 >> 9));
        unsigned int v164 = (uint64_t *)(v161 + 8 * v163);
        uint64_t v165 = *v164;
        if (v26 != *v164)
        {
          uint64_t v166 = 0;
          int v167 = 1;
          while (v165 != -4096)
          {
            if (v166) {
              BOOL v168 = 0;
            }
            else {
              BOOL v168 = v165 == -8192;
            }
            if (v168) {
              uint64_t v166 = v164;
            }
            unsigned int v169 = v163 + v167++;
            unsigned int v163 = v169 & v162;
            unsigned int v164 = (uint64_t *)(v161 + 8 * v163);
            uint64_t v165 = *v164;
            if (v26 == *v164) {
              goto LABEL_317;
            }
          }
LABEL_307:
          if (v166) {
            size_t v187 = v166;
          }
          else {
            size_t v187 = v164;
          }
          goto LABEL_310;
        }
        goto LABEL_317;
      }
      goto LABEL_495;
    }
    int v196 = *(unsigned __int8 *)(v26 + 16);
    if (v196 == 5)
    {
      if (*(_WORD *)(v26 + 18) != 15
        || !sub_1CC03F414((uint64_t)&v299, *(llvm::Constant **)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF))))
      {
        goto LABEL_318;
      }
    }
    else if (v196 != 43 || (sub_1CBF535C4((uint64_t)&v299, *(llvm::Constant **)(v26 - 64)) & 1) == 0)
    {
      goto LABEL_318;
    }
    int v209 = *(_DWORD *)(v26 + 20);
    if ((v209 & 0x40000000) != 0) {
      uint64_t v210 = *(void *)(v26 - 8);
    }
    else {
      uint64_t v210 = v26 - 32 * (v209 & 0x7FFFFFF);
    }
    if (sub_1CCE6E7A8(*(void *)(v210 + 32), 17))
    {
      uint64_t v213 = *(void *)(v26 + 8);
      if (!v213 || *(void *)(v213 + 8) || !sub_1CCE6E7A8(*(void *)(v213 + 24), 17))
      {
        unsigned int v159 = sub_1CCE77A04((unsigned __int8 *)v26, v211, v212);
        for (uint64_t i = *((void *)v159 + 1); i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v215 = *(void *)(i + 24);
          unsigned int v216 = *(unsigned __int8 *)(v215 + 16);
          if (v215) {
            BOOL v217 = v216 >= 0x1C;
          }
          else {
            BOOL v217 = 0;
          }
          if (v217 && v216 - 59 >= 0xFFFFFFEE)
          {
            *(void *)&long long v299 = *(void *)(i + 24);
            int v219 = *((_DWORD *)this + 16);
            if (!v219)
            {
              unsigned int v229 = 0;
LABEL_378:
              *sub_1CCE7BF00((uint64_t)this + 48, (uint64_t *)&v299, v229) = v215;
              uint64_t v230 = *((void *)this + 11);
              uint64_t v231 = *((void *)this + 10);
              if (v230 == v231) {
                uint64_t v232 = 0;
              }
              else {
                uint64_t v232 = ((v230 - v231) << 6) - 1;
              }
              uint64_t v233 = *((void *)this + 14);
              unint64_t v234 = v233 + *((void *)this + 13);
              if (v232 == v234)
              {
                sub_1CCE7C1C0((uint64_t)this + 72);
                uint64_t v231 = *((void *)this + 10);
                uint64_t v233 = *((void *)this + 14);
                unint64_t v234 = *((void *)this + 13) + v233;
              }
              *(void *)(*(void *)(v231 + ((v234 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v234 & 0x1FF)) = v215;
              *((void *)this + 14) = v233 + 1;
              continue;
            }
            uint64_t v220 = *((void *)this + 6);
            int v221 = v219 - 1;
            unsigned int v222 = v221 & ((v215 >> 4) ^ (v215 >> 9));
            uint64_t v223 = (uint64_t *)(v220 + 8 * v222);
            uint64_t v224 = *v223;
            if (v215 != *v223)
            {
              uint64_t v225 = 0;
              int v226 = 1;
              while (v224 != -4096)
              {
                if (v225) {
                  BOOL v227 = 0;
                }
                else {
                  BOOL v227 = v224 == -8192;
                }
                if (v227) {
                  uint64_t v225 = v223;
                }
                unsigned int v228 = v222 + v226++;
                unsigned int v222 = v228 & v221;
                uint64_t v223 = (uint64_t *)(v220 + 8 * v222);
                uint64_t v224 = *v223;
                if (v215 == *v223) {
                  goto LABEL_384;
                }
              }
              if (v225) {
                unsigned int v229 = v225;
              }
              else {
                unsigned int v229 = v223;
              }
              goto LABEL_378;
            }
          }
LABEL_384:
          ;
        }
        unint64_t v188 = (char *)this + 48;
        uint64_t v235 = *((void *)this + 6);
        *(void *)&long long v299 = v26;
        int v236 = *((_DWORD *)this + 16);
        if (v236)
        {
          int v237 = v236 - 1;
          unsigned int v238 = v237 & ((v26 >> 4) ^ (v26 >> 9));
          uint64_t v239 = (uint64_t *)(v235 + 8 * v238);
          uint64_t v240 = *v239;
          if (v26 == *v239) {
            goto LABEL_317;
          }
          unint64_t v241 = 0;
          int v242 = 1;
          while (v240 != -4096)
          {
            if (v241) {
              BOOL v243 = 0;
            }
            else {
              BOOL v243 = v240 == -8192;
            }
            if (v243) {
              unint64_t v241 = v239;
            }
            unsigned int v244 = v238 + v242++;
            unsigned int v238 = v244 & v237;
            uint64_t v239 = (uint64_t *)(v235 + 8 * v238);
            uint64_t v240 = *v239;
            if (v26 == *v239) {
              goto LABEL_317;
            }
          }
LABEL_476:
          if (v241) {
            size_t v187 = v241;
          }
          else {
            size_t v187 = v239;
          }
LABEL_311:
          *sub_1CCE7BF00((uint64_t)v188, (uint64_t *)&v299, v187) = v26;
          uint64_t v189 = *((void *)this + 11);
          uint64_t v190 = *((void *)this + 10);
          if (v189 == v190) {
            uint64_t v191 = 0;
          }
          else {
            uint64_t v191 = ((v189 - v190) << 6) - 1;
          }
          uint64_t v192 = *((void *)this + 14);
          unint64_t v193 = v192 + *((void *)this + 13);
          if (v191 == v193)
          {
            sub_1CCE7C1C0((uint64_t)this + 72);
            uint64_t v190 = *((void *)this + 10);
            uint64_t v192 = *((void *)this + 14);
            unint64_t v193 = *((void *)this + 13) + v192;
          }
          *(void *)(*(void *)(v190 + ((v193 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v193 & 0x1FF)) = v26;
          *((void *)this + 14) = v192 + 1;
          goto LABEL_317;
        }
        goto LABEL_497;
      }
    }
    goto LABEL_318;
  }
  if (sub_1CCE75C80(v26))
  {
    BOOL v158 = (char *)this + 48;
    unsigned int v159 = sub_1CCE7774C(v26, (uint64_t)this + 48, v170, v171, v172);
    *(void *)&long long v299 = v26;
    int v173 = *((_DWORD *)this + 16);
    if (v173)
    {
      uint64_t v174 = *((void *)this + 6);
      int v175 = v173 - 1;
      unsigned int v176 = v175 & ((v26 >> 4) ^ (v26 >> 9));
      unsigned int v164 = (uint64_t *)(v174 + 8 * v176);
      uint64_t v177 = *v164;
      if (v26 != *v164)
      {
        uint64_t v166 = 0;
        int v178 = 1;
        while (v177 != -4096)
        {
          if (v166) {
            BOOL v179 = 0;
          }
          else {
            BOOL v179 = v177 == -8192;
          }
          if (v179) {
            uint64_t v166 = v164;
          }
          unsigned int v180 = v176 + v178++;
          unsigned int v176 = v180 & v175;
          unsigned int v164 = (uint64_t *)(v174 + 8 * v176);
          uint64_t v177 = *v164;
          if (v26 == *v164) {
            goto LABEL_317;
          }
        }
        goto LABEL_307;
      }
LABEL_317:
      *((unsigned char *)this + 552) = 1;
      uint64_t v26 = (uint64_t)v159;
      goto LABEL_318;
    }
LABEL_495:
    size_t v187 = 0;
LABEL_310:
    unint64_t v188 = v158;
    goto LABEL_311;
  }
  if (!sub_1CB845E74(v26)) {
    goto LABEL_318;
  }
  unsigned int v181 = *(unsigned __int8 *)(v26 + 16);
  if (v181 <= 0x1B) {
    unsigned int v182 = *(unsigned __int16 *)(v26 + 18);
  }
  else {
    unsigned int v182 = v181 - 28;
  }
  if (v182 != 12)
  {
    if (v182 != 16) {
      goto LABEL_318;
    }
    if ((*(unsigned char *)(v26 + 17) & 0x10) != 0)
    {
      int v183 = *(_DWORD *)(v26 + 20);
      if ((v183 & 0x40000000) != 0) {
        unint64_t v184 = *(llvm::Constant ***)(v26 - 8);
      }
      else {
        unint64_t v184 = (llvm::Constant **)(v26 - 32 * (v183 & 0x7FFFFFF));
      }
      if (!sub_1CC0241FC((uint64_t)&v299, *v184)) {
        goto LABEL_318;
      }
    }
    else
    {
      int v289 = *(_DWORD *)(v26 + 20);
      if ((v289 & 0x40000000) != 0) {
        int v290 = *(llvm::Constant ***)(v26 - 8);
      }
      else {
        int v290 = (llvm::Constant **)(v26 - 32 * (v289 & 0x7FFFFFF));
      }
      if (!sub_1CC02435C((uint64_t)&v299, *v290)) {
        goto LABEL_318;
      }
    }
  }
  int v185 = *(_DWORD *)(v26 + 20);
  if (*(unsigned __int8 *)(v26 + 16) - 41 > 0x11)
  {
    if ((v185 & 0x40000000) != 0) {
      uint64_t v246 = *(uint64_t **)(v26 - 8);
    }
    else {
      uint64_t v246 = (uint64_t *)(v26 - 32 * (v185 & 0x7FFFFFF));
    }
  }
  else
  {
    if ((v185 & 0x40000000) != 0) {
      uint64_t v186 = *(void *)(v26 - 8);
    }
    else {
      uint64_t v186 = v26 - 32 * (v185 & 0x7FFFFFF);
    }
    uint64_t v246 = (uint64_t *)(v186 + 32);
  }
  if (sub_1CCE6E7A8(*v246, 18))
  {
    uint64_t v258 = *(void *)(v26 + 8);
    if (!v258 || *(void *)(v258 + 8) || !sub_1CCE6E7A8(*(void *)(v258 + 24), 18))
    {
      unsigned int v159 = sub_1CCE77A04((unsigned __int8 *)v26, v256, v257);
      uint64_t v259 = *((void *)v159 + 1);
      if (!v259)
      {
LABEL_465:
        unint64_t v188 = (char *)this + 48;
        uint64_t v280 = *((void *)this + 6);
        *(void *)&long long v299 = v26;
        int v281 = *((_DWORD *)this + 16);
        if (v281)
        {
          int v282 = v281 - 1;
          unsigned int v283 = v282 & ((v26 >> 4) ^ (v26 >> 9));
          uint64_t v239 = (uint64_t *)(v280 + 8 * v283);
          uint64_t v284 = *v239;
          if (v26 == *v239) {
            goto LABEL_317;
          }
          unint64_t v241 = 0;
          int v285 = 1;
          while (v284 != -4096)
          {
            if (v241) {
              BOOL v286 = 0;
            }
            else {
              BOOL v286 = v284 == -8192;
            }
            if (v286) {
              unint64_t v241 = v239;
            }
            unsigned int v287 = v283 + v285++;
            unsigned int v283 = v287 & v282;
            uint64_t v239 = (uint64_t *)(v280 + 8 * v283);
            uint64_t v284 = *v239;
            if (v26 == *v239) {
              goto LABEL_317;
            }
          }
          goto LABEL_476;
        }
LABEL_497:
        size_t v187 = 0;
        goto LABEL_311;
      }
      while (1)
      {
        uint64_t v260 = *(void *)(v259 + 24);
        unsigned int v261 = *(unsigned __int8 *)(v260 + 16);
        if (v260) {
          BOOL v262 = v261 >= 0x1C;
        }
        else {
          BOOL v262 = 0;
        }
        if (v262 && v261 - 59 >= 0xFFFFFFEE)
        {
          *(void *)&long long v299 = *(void *)(v259 + 24);
          int v264 = *((_DWORD *)this + 16);
          if (!v264)
          {
            int v274 = 0;
LABEL_456:
            *sub_1CCE7BF00((uint64_t)this + 48, (uint64_t *)&v299, v274) = v260;
            uint64_t v275 = *((void *)this + 11);
            uint64_t v276 = *((void *)this + 10);
            if (v275 == v276) {
              uint64_t v277 = 0;
            }
            else {
              uint64_t v277 = ((v275 - v276) << 6) - 1;
            }
            uint64_t v278 = *((void *)this + 14);
            unint64_t v279 = v278 + *((void *)this + 13);
            if (v277 == v279)
            {
              sub_1CCE7C1C0((uint64_t)this + 72);
              uint64_t v276 = *((void *)this + 10);
              uint64_t v278 = *((void *)this + 14);
              unint64_t v279 = *((void *)this + 13) + v278;
            }
            *(void *)(*(void *)(v276 + ((v279 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v279 & 0x1FF)) = v260;
            *((void *)this + 14) = v278 + 1;
            goto LABEL_462;
          }
          uint64_t v265 = *((void *)this + 6);
          int v266 = v264 - 1;
          unsigned int v267 = v266 & ((v260 >> 4) ^ (v260 >> 9));
          uint64_t v268 = (uint64_t *)(v265 + 8 * v267);
          uint64_t v269 = *v268;
          if (v260 != *v268)
          {
            uint64_t v270 = 0;
            int v271 = 1;
            while (v269 != -4096)
            {
              if (v270) {
                BOOL v272 = 0;
              }
              else {
                BOOL v272 = v269 == -8192;
              }
              if (v272) {
                uint64_t v270 = v268;
              }
              unsigned int v273 = v267 + v271++;
              unsigned int v267 = v273 & v266;
              uint64_t v268 = (uint64_t *)(v265 + 8 * v267);
              uint64_t v269 = *v268;
              if (v260 == *v268) {
                goto LABEL_462;
              }
            }
            if (v270) {
              int v274 = v270;
            }
            else {
              int v274 = v268;
            }
            goto LABEL_456;
          }
        }
LABEL_462:
        uint64_t v259 = *(void *)(v259 + 8);
        if (!v259) {
          goto LABEL_465;
        }
      }
    }
  }
LABEL_318:
  int v194 = *(unsigned __int8 *)(v26 + 16);
  switch(*(unsigned char *)(v26 + 16))
  {
    case ')':
    case '-':
      goto LABEL_320;
    case '*':
    case '.':
      if ((~*(unsigned __int8 *)(v26 + 17) & 0x12) == 0) {
        goto LABEL_320;
      }
      return;
    case '+':
    case ',':
      return;
    default:
      if ((v194 - 56) >= 3) {
        return;
      }
LABEL_320:
      uint64_t v195 = *(void *)(v26 + 8);
      if (!v195 || *(void *)(v195 + 8)) {
        goto LABEL_322;
      }
      uint64_t v197 = *(void *)(v195 + 24);
      int v198 = *(unsigned __int8 *)(v197 + 16);
      if (v198 != v194)
      {
        if (v194 == 42)
        {
          if (v198 == 44) {
            return;
          }
        }
        else if (v194 == 41 && v198 == 43)
        {
          return;
        }
LABEL_322:
        llvm::ReassociatePass::ReassociateExpression(this, (llvm::BinaryOperator *)v26);
        return;
      }
      if (v197 != v26 && *(void *)(v26 + 40) == *(void *)(v197 + 40))
      {
        uint64_t v199 = *((void *)this + 6);
        *(void *)&long long v299 = v197;
        int v200 = *((_DWORD *)this + 16);
        if (v200)
        {
          int v201 = v200 - 1;
          unsigned int v202 = v201 & ((v197 >> 4) ^ (v197 >> 9));
          uint64_t v203 = (uint64_t *)(v199 + 8 * v202);
          uint64_t v204 = *v203;
          if (v197 == *v203) {
            return;
          }
          unint64_t v205 = 0;
          int v206 = 1;
          while (v204 != -4096)
          {
            if (v205) {
              BOOL v207 = 0;
            }
            else {
              BOOL v207 = v204 == -8192;
            }
            if (v207) {
              unint64_t v205 = v203;
            }
            unsigned int v208 = v202 + v206++;
            unsigned int v202 = v208 & v201;
            uint64_t v203 = (uint64_t *)(v199 + 8 * v202);
            uint64_t v204 = *v203;
            if (v197 == *v203) {
              return;
            }
          }
          if (v205) {
            uint64_t v250 = v205;
          }
          else {
            uint64_t v250 = v203;
          }
        }
        else
        {
          uint64_t v250 = 0;
        }
        *sub_1CCE7BF00((uint64_t)this + 48, (uint64_t *)&v299, v250) = v197;
        uint64_t v251 = *((void *)this + 11);
        uint64_t v252 = *((void *)this + 10);
        if (v251 == v252) {
          uint64_t v253 = 0;
        }
        else {
          uint64_t v253 = ((v251 - v252) << 6) - 1;
        }
        uint64_t v254 = *((void *)this + 14);
        unint64_t v255 = v254 + *((void *)this + 13);
        if (v253 == v255)
        {
          sub_1CCE7C1C0((uint64_t)this + 72);
          uint64_t v252 = *((void *)this + 10);
          uint64_t v254 = *((void *)this + 14);
          unint64_t v255 = *((void *)this + 13) + v254;
        }
        *(void *)(*(void *)(v252 + ((v255 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v255 & 0x1FF)) = v197;
        *((void *)this + 14) = v254 + 1;
      }
      break;
  }
}

llvm::Value *sub_1CCE7774C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  int v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v7 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v7 = a1 - 32 * (v6 & 0x7FFFFFF);
  }
  uint64_t v8 = sub_1CCE7B2AC(*(uint64_t ****)(v7 + 32), (llvm::Type *)a1, a2, a4, a5);
  int v9 = *(_DWORD *)(a1 + 20);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = *(void ***)(a1 - 8);
  }
  else {
    uint64_t v10 = (void **)(a1 - 32 * (v9 & 0x7FFFFFF));
  }
  uint64_t v11 = *v10;
  __int16 v47 = 257;
  uint64_t v12 = sub_1CCE7A7E4(v11, v8, v46, a1, a1);
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a1, v13, v14);
  int v18 = *(_DWORD *)(a1 + 20);
  if ((v18 & 0x40000000) != 0) {
    uint64_t v19 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v19 = a1 - 32 * (v18 & 0x7FFFFFF);
  }
  if (*(void *)v19)
  {
    **(void **)(v19 + 16) = *(void *)(v19 + 8);
    uint64_t v20 = *(void *)(v19 + 8);
    if (v20) {
      *(void *)(v20 + 16) = *(void *)(v19 + 16);
    }
  }
  *(void *)uint64_t v19 = NullValue;
  if (NullValue)
  {
    uint64_t v23 = *((void *)NullValue + 1);
    long long v21 = (uint64_t *)((char *)NullValue + 8);
    uint64_t v22 = v23;
    *(void *)(v19 + 8) = v23;
    if (v23) {
      *(void *)(v22 + 16) = v19 + 8;
    }
    *(void *)(v19 + 16) = v21;
    *long long v21 = v19;
  }
  uint64_t v24 = llvm::Constant::getNullValue(*(llvm::Constant **)a1, v16, v17);
  int v25 = *(_DWORD *)(a1 + 20);
  if ((v25 & 0x40000000) != 0) {
    uint64_t v26 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v26 = a1 - 32 * (v25 & 0x7FFFFFF);
  }
  int v27 = (llvm::Value **)(v26 + 32);
  if (*(void *)(v26 + 32))
  {
    **(void **)(v26 + 48) = *(void *)(v26 + 40);
    uint64_t v28 = *(void *)(v26 + 40);
    if (v28) {
      *(void *)(v28 + 16) = *(void *)(v26 + 48);
    }
  }
  *int v27 = v24;
  if (v24)
  {
    uint64_t v31 = *((void *)v24 + 1);
    int v29 = (llvm::Value ***)((char *)v24 + 8);
    uint64_t v30 = v31;
    *(void *)(v26 + 40) = v31;
    if (v31) {
      *(void *)(v30 + 16) = v26 + 40;
    }
    *(void *)(v26 + 48) = v29;
    void *v29 = v27;
  }
  llvm::Value::takeName((int32x2_t ****)v12, (llvm::Value *)a1);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a1, v12, (llvm::Value *)1);
  uint64_t v32 = *(unsigned __int8 **)(a1 + 48);
  unint64_t v45 = v32;
  if (v32) {
    llvm::MetadataTracking::track((uint64_t)&v45, v32, 2);
  }
  long long v33 = (unsigned __int8 **)((char *)v12 + 48);
  if (&v45 != (unsigned __int8 **)((char *)v12 + 48))
  {
    uint64_t v34 = *v33;
    if (*v33)
    {
      int v37 = *v34;
      if ((v37 - 4) > 0x1E)
      {
        if ((v37 - 3) >= 0xFFFFFFFE) {
          unsigned int v40 = *v33;
        }
        else {
          unsigned int v40 = 0;
        }
        if ((v37 - 3) < 0xFFFFFFFE)
        {
          if (v37 == 3) {
            *((void *)v34 + 1) = 0;
          }
          goto LABEL_29;
        }
        unint64_t v39 = (unint64_t)(v40 + 8);
      }
      else
      {
        if ((v34[1] & 0x7F) != 2 && !*((_DWORD *)v34 + 3)) {
          goto LABEL_29;
        }
        uint64_t v38 = *((void *)v34 + 2);
        if ((v38 & 4) == 0) {
          goto LABEL_29;
        }
        unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8;
        if (!v39) {
          goto LABEL_29;
        }
      }
      v46[0] = (char *)v12 + 48;
      sub_1CC5FA668(v39 + 16, v46);
    }
LABEL_29:
    uint64_t v35 = v45;
    *long long v33 = v45;
    if (v35) {
      llvm::MetadataTracking::retrack((uint64_t)&v45, v35, (uint64_t)v12 + 48);
    }
    return v12;
  }
  if (!v45) {
    return v12;
  }
  int v41 = *v45;
  if ((v41 - 4) > 0x1E)
  {
    if ((v41 - 3) >= 0xFFFFFFFE) {
      uint64_t v44 = v45;
    }
    else {
      uint64_t v44 = 0;
    }
    if ((v41 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v43 = (unint64_t)(v44 + 8);
LABEL_60:
      v46[0] = (const char *)&v45;
      sub_1CC5FA668(v43 + 16, v46);
      return v12;
    }
    if (v41 == 3) {
      *((void *)v45 + 1) = 0;
    }
  }
  else if ((v45[1] & 0x7F) == 2 || *((_DWORD *)v45 + 3))
  {
    uint64_t v42 = *((void *)v45 + 2);
    if ((v42 & 4) != 0)
    {
      unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFF8;
      if (v43) {
        goto LABEL_60;
      }
    }
  }
  return v12;
}

llvm::Value *sub_1CCE77A04(unsigned __int8 *a1, llvm::Type *a2, const llvm::APInt *a3)
{
  int v4 = *(llvm::Constant **)a1;
  if ((*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 0x12) {
    int v5 = *(unsigned __int8 *)(**((void **)v4 + 2) + 8);
  }
  else {
    int v5 = *(_DWORD *)(*(void *)a1 + 8);
  }
  int v6 = a1[16];
  if (v5 == 13) {
    AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)a1, a2, a3);
  }
  else {
    AllOnesValue = llvm::ConstantFP::get(*(llvm::ConstantFP ***)a1, a2, -1.0);
  }
  uint64_t v8 = (uint64_t)AllOnesValue;
  int v9 = *((_DWORD *)a1 + 5);
  if ((v9 & 0x40000000) != 0) {
    uint64_t v10 = (unsigned __int8 *)*((void *)a1 - 1);
  }
  else {
    uint64_t v10 = &a1[-32 * (v9 & 0x7FFFFFF)];
  }
  BOOL v11 = (v6 - 41) < 0x12;
  uint64_t v12 = *(void **)&v10[32 * v11];
  __int16 v40 = 257;
  int v13 = sub_1CCE73448(v12, v8, v39, (uint64_t)a1, (uint64_t)a1);
  NullValue = llvm::Constant::getNullValue(v4, v14, v15);
  int v17 = *((_DWORD *)a1 + 5);
  if ((v17 & 0x40000000) != 0) {
    int v18 = (unsigned __int8 *)*((void *)a1 - 1);
  }
  else {
    int v18 = &a1[-32 * (v17 & 0x7FFFFFF)];
  }
  uint64_t v19 = &v18[32 * v11];
  if (*(void *)v19)
  {
    **((void **)v19 + 2) = *((void *)v19 + 1);
    uint64_t v20 = *((void *)v19 + 1);
    if (v20) {
      *(void *)(v20 + 16) = *((void *)v19 + 2);
    }
  }
  *(void *)uint64_t v19 = NullValue;
  if (NullValue)
  {
    uint64_t v23 = *((void *)NullValue + 1);
    long long v21 = (unsigned __int8 **)((char *)NullValue + 8);
    uint64_t v22 = v23;
    uint64_t v24 = &v18[32 * v11];
    *((void *)v24 + 1) = v23;
    if (v23) {
      *(void *)(v22 + 16) = v24 + 8;
    }
    *((void *)v24 + 2) = v21;
    *long long v21 = v19;
  }
  llvm::Value::takeName((int32x2_t ****)v13, (llvm::Value *)a1);
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a1, v13, (llvm::Value *)1);
  int v25 = (unsigned __int8 *)*((void *)a1 + 6);
  uint64_t v38 = v25;
  if (v25) {
    llvm::MetadataTracking::track((uint64_t)&v38, v25, 2);
  }
  uint64_t v26 = (unsigned __int8 **)((char *)v13 + 48);
  if (&v38 != (unsigned __int8 **)((char *)v13 + 48))
  {
    int v27 = *v26;
    if (*v26)
    {
      int v30 = *v27;
      if ((v30 - 4) > 0x1E)
      {
        if ((v30 - 3) >= 0xFFFFFFFE) {
          long long v33 = *v26;
        }
        else {
          long long v33 = 0;
        }
        if ((v30 - 3) < 0xFFFFFFFE)
        {
          if (v30 == 3) {
            *((void *)v27 + 1) = 0;
          }
          goto LABEL_23;
        }
        unint64_t v32 = (unint64_t)(v33 + 8);
      }
      else
      {
        if ((v27[1] & 0x7F) != 2 && !*((_DWORD *)v27 + 3)) {
          goto LABEL_23;
        }
        uint64_t v31 = *((void *)v27 + 2);
        if ((v31 & 4) == 0) {
          goto LABEL_23;
        }
        unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
        if (!v32) {
          goto LABEL_23;
        }
      }
      v39[0] = (char *)v13 + 48;
      sub_1CC5FA668(v32 + 16, v39);
    }
LABEL_23:
    uint64_t v28 = v38;
    *uint64_t v26 = v38;
    if (v28) {
      llvm::MetadataTracking::retrack((uint64_t)&v38, v28, (uint64_t)v13 + 48);
    }
    return v13;
  }
  if (!v38) {
    return v13;
  }
  int v34 = *v38;
  if ((v34 - 4) > 0x1E)
  {
    if ((v34 - 3) >= 0xFFFFFFFE) {
      int v37 = v38;
    }
    else {
      int v37 = 0;
    }
    if ((v34 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v36 = (unint64_t)(v37 + 8);
LABEL_53:
      v39[0] = (const char *)&v38;
      sub_1CC5FA668(v36 + 16, v39);
      return v13;
    }
    if (v34 == 3) {
      *((void *)v38 + 1) = 0;
    }
  }
  else if ((v38[1] & 0x7F) == 2 || *((_DWORD *)v38 + 3))
  {
    uint64_t v35 = *((void *)v38 + 2);
    if ((v35 & 4) != 0)
    {
      unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFF8;
      if (v36) {
        goto LABEL_53;
      }
    }
  }
  return v13;
}

void llvm::ReassociatePass::ReassociateExpression(llvm::ReassociatePass *this, llvm::BinaryOperator *a2)
{
  v142[24] = *MEMORY[0x1E4F143B8];
  uint64_t v140 = v142;
  uint64_t v141 = 0x800000000;
  *((unsigned char *)this + 552) |= sub_1CCE6F148(a2, (uint64_t)&v140);
  int v137 = v139;
  uint64_t v138 = 0x800000000;
  if (v141 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v141)
  {
    int v4 = (char *)v140;
    int v5 = (char *)v140 + 24 * v141;
    do
    {
      int v6 = v4 + 8;
      if (*((_DWORD *)v4 + 4) >= 0x41u) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = (void *)*v6;
      Ranuint64_t k = llvm::ReassociatePass::getRank(this, *(llvm::Value **)v4);
      int v9 = *(llvm::Value **)v4;
      int v10 = v138;
      if ((unint64_t)v7 + v138 > HIDWORD(v138)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v7)
      {
        BOOL v11 = (char *)v137 + 16 * v138;
        uint64_t v12 = v7;
        do
        {
          *BOOL v11 = Rank;
          v11[1] = v9;
          v11 += 2;
          uint64_t v12 = (void *)((char *)v12 - 1);
        }
        while (v12);
        int v10 = v138;
      }
      unsigned int v13 = v10 + v7;
      LODWORD(v138) = v13;
      v4 += 24;
    }
    while (v4 != v5);
  }
  else
  {
    unsigned int v13 = v138;
  }
  unint64_t v14 = v13;
  uint64_t v15 = (char *)v137 + 16 * v13;
  if (v13 < 0x81)
  {
LABEL_20:
    sub_1CCE7D530((long long *)v137, v15, v14, 0, 0);
  }
  else
  {
    int v16 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v17 = v13;
    while (1)
    {
      int v18 = (long long *)operator new(16 * v17, v16);
      if (v18) {
        break;
      }
      BOOL v19 = v17 > 1;
      v17 >>= 1;
      if (!v19) {
        goto LABEL_20;
      }
    }
    uint64_t v22 = v18;
    sub_1CCE7D530((long long *)v137, v15, v14, v18, v17);
    operator delete(v22);
  }
  uint64_t v23 = llvm::ReassociatePass::OptimizeExpression(this, (unsigned __int8 *)a2, &v137, v20, v21);
  if (v23)
  {
    uint64_t v24 = v23;
    if (v23 == a2) {
      goto LABEL_122;
    }
    llvm::Value::doRAUW(a2, v23, (llvm::Value *)1);
    if (*((unsigned __int8 *)v24 + 16) >= 0x1Cu)
    {
      int v25 = (unsigned __int8 *)*((void *)a2 + 6);
      if (v25)
      {
        uint64_t v135 = (unsigned __int8 *)*((void *)a2 + 6);
        llvm::MetadataTracking::track((uint64_t)&v135, v25, 2);
        uint64_t v26 = (unsigned __int8 **)((char *)v24 + 48);
        if (&v135 != v26)
        {
          int v27 = *v26;
          if (!*v26) {
            goto LABEL_28;
          }
          int v113 = *v27;
          if ((v113 - 4) > 0x1E)
          {
            if ((v113 - 3) >= 0xFFFFFFFE) {
              uint64_t v119 = *v26;
            }
            else {
              uint64_t v119 = 0;
            }
            if ((v113 - 3) < 0xFFFFFFFE)
            {
              if (v113 == 3) {
                *((void *)v27 + 1) = 0;
              }
              goto LABEL_28;
            }
            unint64_t v115 = (unint64_t)(v119 + 8);
          }
          else if ((v27[1] & 0x7F) != 2 && !*((_DWORD *)v27 + 3) {
                 || (uint64_t v114 = *((void *)v27 + 2), (v114 & 4) == 0)
          }
                 || (unint64_t v115 = v114 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
LABEL_28:
            uint64_t v28 = v135;
            *uint64_t v26 = v135;
            if (v28)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v135, v28, (uint64_t)v26);
              uint64_t v135 = 0;
            }
            goto LABEL_30;
          }
          v136.n128_u64[0] = (unint64_t)v26;
          sub_1CC5FA668(v115 + 16, &v136);
          goto LABEL_28;
        }
        if (!v135) {
          goto LABEL_30;
        }
        int v122 = *v135;
        if ((v122 - 4) <= 0x1E)
        {
          if ((v135[1] & 0x7F) != 2 && !*((_DWORD *)v135 + 3)) {
            goto LABEL_30;
          }
          uint64_t v123 = *((void *)v135 + 2);
          if ((v123 & 4) == 0) {
            goto LABEL_30;
          }
          unint64_t v124 = v123 & 0xFFFFFFFFFFFFFFF8;
          if (!v124) {
            goto LABEL_30;
          }
LABEL_199:
          v136.n128_u64[0] = (unint64_t)&v135;
          sub_1CC5FA668(v124 + 16, &v136);
          goto LABEL_30;
        }
        if ((v122 - 3) >= 0xFFFFFFFE) {
          uint64_t v128 = v135;
        }
        else {
          uint64_t v128 = 0;
        }
        if ((v122 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v124 = (unint64_t)(v128 + 8);
          goto LABEL_199;
        }
        if (v122 == 3) {
          *((void *)v135 + 1) = 0;
        }
      }
    }
LABEL_30:
    int v29 = (char *)this + 48;
    uint64_t v30 = *((void *)this + 6);
    v136.n128_u64[0] = (unint64_t)a2;
    int v31 = *((_DWORD *)this + 16);
    if (v31)
    {
      int v32 = v31 - 1;
      unsigned int v33 = v32 & ((a2 >> 4) ^ (a2 >> 9));
      int v34 = (llvm::BinaryOperator **)(v30 + 8 * v33);
      uint64_t v35 = *v34;
      if (*v34 == a2) {
        goto LABEL_122;
      }
      unint64_t v36 = 0;
      int v37 = 1;
      while (v35 != (llvm::BinaryOperator *)-4096)
      {
        if (v36) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = v35 == (llvm::BinaryOperator *)-8192;
        }
        if (v38) {
          unint64_t v36 = (uint64_t *)v34;
        }
        unsigned int v39 = v33 + v37++;
        unsigned int v33 = v39 & v32;
        int v34 = (llvm::BinaryOperator **)(v30 + 8 * v33);
        uint64_t v35 = *v34;
        if (*v34 == a2) {
          goto LABEL_122;
        }
      }
LABEL_64:
      if (v36) {
        unsigned int v56 = v36;
      }
      else {
        unsigned int v56 = (uint64_t *)v34;
      }
LABEL_67:
      *sub_1CCE7BF00((uint64_t)v29, (uint64_t *)&v136, v56) = (uint64_t)a2;
      uint64_t v57 = *((void *)this + 11);
      uint64_t v58 = *((void *)this + 10);
      if (v57 == v58) {
        uint64_t v59 = 0;
      }
      else {
        uint64_t v59 = ((v57 - v58) << 6) - 1;
      }
      uint64_t v60 = *((void *)this + 14);
      unint64_t v61 = v60 + *((void *)this + 13);
      if (v59 == v61)
      {
        sub_1CCE7C1C0((uint64_t)this + 72);
        uint64_t v58 = *((void *)this + 10);
        uint64_t v60 = *((void *)this + 14);
        unint64_t v61 = *((void *)this + 13) + v60;
      }
      *(void *)(*(void *)(v58 + ((v61 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v61 & 0x1FF)) = a2;
      *((void *)this + 14) = v60 + 1;
      goto LABEL_122;
    }
    goto LABEL_179;
  }
  uint64_t v40 = *((void *)a2 + 1);
  if (!v40 || *(void *)(v40 + 8)) {
    goto LABEL_43;
  }
  int v103 = *((unsigned __int8 *)a2 + 16);
  if (v103 == 46)
  {
    if (*(unsigned char *)(*(void *)(v40 + 24) + 16) != 42) {
      goto LABEL_43;
    }
    uint64_t v110 = *((void *)v137 + 2 * v138 - 1);
    if (*(unsigned char *)(v110 + 16) != 17 || !sub_1CB844168(v110, -1.0)) {
      goto LABEL_43;
    }
    unsigned int v111 = v137;
    __n128 v112 = *((__n128 *)v137 + v138 - 1);
    LODWORD(v138) = v138 - 1;
    __n128 v136 = v112;
    goto LABEL_166;
  }
  if (v103 != 45) {
    goto LABEL_43;
  }
  if (*(unsigned char *)(*(void *)(v40 + 24) + 16) != 41) {
    goto LABEL_43;
  }
  int v104 = v137;
  int v105 = v138;
  unint64_t v106 = (char *)v137 + 16 * v138;
  unint64_t v107 = *((void *)v106 - 1);
  if (*(unsigned char *)(v107 + 16) != 16) {
    goto LABEL_43;
  }
  unsigned int v108 = *(_DWORD *)(v107 + 32);
  if (!v108) {
    goto LABEL_165;
  }
  int v109 = (llvm::APInt *)(v107 + 24);
  if (v108 > 0x40)
  {
    if (llvm::APInt::countTrailingOnesSlowCase(v109) != v108) {
      goto LABEL_43;
    }
LABEL_165:
    unint64_t v120 = *((void *)v106 - 2);
    LODWORD(v138) = v105 - 1;
    v136.n128_u64[0] = v120;
    v136.n128_u64[1] = v107;
    unsigned int v111 = v104;
LABEL_166:
    sub_1CCE7CE4C((uint64_t *)&v137, (uint64_t)v111, &v136);
    goto LABEL_43;
  }
  if (*(void *)v109 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v108) {
    goto LABEL_165;
  }
LABEL_43:
  int v41 = v138;
  if (v138 == 1)
  {
    uint64_t v42 = (llvm::BinaryOperator *)*((void *)v137 + 1);
    if (v42 == a2) {
      goto LABEL_122;
    }
    llvm::Value::doRAUW(a2, v42, (llvm::Value *)1);
    uint64_t v43 = *((void *)v137 + 1);
    if (v43 && *(unsigned __int8 *)(v43 + 16) >= 0x1Cu)
    {
      uint64_t v44 = (unsigned __int8 *)*((void *)a2 + 6);
      unsigned int v134 = v44;
      if (v44) {
        llvm::MetadataTracking::track((uint64_t)&v134, v44, 2);
      }
      unint64_t v45 = (unsigned __int8 **)(v43 + 48);
      if (&v134 != (unsigned __int8 **)(v43 + 48))
      {
        int v46 = *v45;
        if (!*v45) {
          goto LABEL_51;
        }
        int v116 = *v46;
        if ((v116 - 4) > 0x1E)
        {
          if ((v116 - 3) >= 0xFFFFFFFE) {
            uint64_t v121 = *v45;
          }
          else {
            uint64_t v121 = 0;
          }
          if ((v116 - 3) < 0xFFFFFFFE)
          {
            if (v116 == 3) {
              *((void *)v46 + 1) = 0;
            }
            goto LABEL_51;
          }
          unint64_t v118 = (unint64_t)(v121 + 8);
        }
        else if ((v46[1] & 0x7F) != 2 && !*((_DWORD *)v46 + 3) {
               || (uint64_t v117 = *((void *)v46 + 2), (v117 & 4) == 0)
        }
               || (unint64_t v118 = v117 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
LABEL_51:
          __int16 v47 = v134;
          *unint64_t v45 = v134;
          if (v47)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v134, v47, v43 + 48);
            unsigned int v134 = 0;
          }
          goto LABEL_53;
        }
        v136.n128_u64[0] = v43 + 48;
        sub_1CC5FA668(v118 + 16, &v136);
        goto LABEL_51;
      }
      if (!v134) {
        goto LABEL_53;
      }
      int v125 = *v134;
      if ((v125 - 4) <= 0x1E)
      {
        if ((v134[1] & 0x7F) != 2 && !*((_DWORD *)v134 + 3)) {
          goto LABEL_53;
        }
        uint64_t v126 = *((void *)v134 + 2);
        if ((v126 & 4) == 0) {
          goto LABEL_53;
        }
        unint64_t v127 = v126 & 0xFFFFFFFFFFFFFFF8;
        if (!v127) {
          goto LABEL_53;
        }
LABEL_207:
        v136.n128_u64[0] = (unint64_t)&v134;
        sub_1CC5FA668(v127 + 16, &v136);
        goto LABEL_53;
      }
      if ((v125 - 3) >= 0xFFFFFFFE) {
        uint64_t v129 = v134;
      }
      else {
        uint64_t v129 = 0;
      }
      if ((v125 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v127 = (unint64_t)(v129 + 8);
        goto LABEL_207;
      }
      if (v125 == 3) {
        *((void *)v134 + 1) = 0;
      }
    }
LABEL_53:
    int v29 = (char *)this + 48;
    uint64_t v48 = *((void *)this + 6);
    v136.n128_u64[0] = (unint64_t)a2;
    int v49 = *((_DWORD *)this + 16);
    if (v49)
    {
      int v50 = v49 - 1;
      unsigned int v51 = v50 & ((a2 >> 4) ^ (a2 >> 9));
      int v34 = (llvm::BinaryOperator **)(v48 + 8 * v51);
      uint64_t v52 = *v34;
      if (*v34 == a2) {
        goto LABEL_122;
      }
      unint64_t v36 = 0;
      int v53 = 1;
      while (v52 != (llvm::BinaryOperator *)-4096)
      {
        if (v36) {
          BOOL v54 = 0;
        }
        else {
          BOOL v54 = v52 == (llvm::BinaryOperator *)-8192;
        }
        if (v54) {
          unint64_t v36 = (uint64_t *)v34;
        }
        unsigned int v55 = v51 + v53++;
        unsigned int v51 = v55 & v50;
        int v34 = (llvm::BinaryOperator **)(v48 + 8 * v51);
        uint64_t v52 = *v34;
        if (*v34 == a2) {
          goto LABEL_122;
        }
      }
      goto LABEL_64;
    }
LABEL_179:
    unsigned int v56 = 0;
    goto LABEL_67;
  }
  if ((v138 - 3) > 7) {
    goto LABEL_121;
  }
  uint64_t v62 = 0;
  unsigned int v63 = 0;
  unsigned int v64 = 0;
  unsigned int v65 = 0;
  uint64_t v66 = (char *)v137;
  BOOL v67 = (char *)this + 24 * *((unsigned __int8 *)a2 + 16) - 984;
  uint64_t v132 = (uint64_t *)(v67 + 120);
  uint64_t v130 = v67 + 136;
  uint64_t v68 = 1;
  uint64_t v69 = 1;
  do
  {
    if (v62 + 1 < (unint64_t)v138)
    {
      unsigned int v70 = (char *)v137 + 16 * v62;
      unint64_t v71 = *((void *)v70 + 1);
      uint64_t v72 = *v132;
      int v73 = *v130 - 1;
      unsigned int v74 = *(_DWORD *)v70;
      uint64_t v75 = v68;
      while (1)
      {
        unint64_t v76 = *((void *)v137 + 2 * v75 + 1);
        if (v76 >= v71) {
          unint64_t v77 = *((void *)v137 + 2 * v75 + 1);
        }
        else {
          unint64_t v77 = v71;
        }
        if (v76 >= v71) {
          unint64_t v78 = v71;
        }
        else {
          unint64_t v78 = *((void *)v137 + 2 * v75 + 1);
        }
        if (!*v130) {
          goto LABEL_104;
        }
        unint64_t v79 = ((v77 >> 4) ^ (v77 >> 9) | ((unint64_t)((v78 >> 4) ^ (v78 >> 9)) << 32))
            + ~((unint64_t)((v77 >> 4) ^ (v77 >> 9)) << 32);
        unint64_t v80 = (v79 ^ (v79 >> 22)) + ~((v79 ^ (v79 >> 22)) << 13);
        unint64_t v81 = (9 * (v80 ^ (v80 >> 8))) ^ ((9 * (v80 ^ (v80 >> 8))) >> 15);
        unsigned int v82 = v73 & (((v81 + ~(v81 << 27)) >> 31) ^ (v81 + ~(v81 << 27)));
        int v83 = (uint64_t *)(v72 + 72 * v82);
        uint64_t v84 = *v83;
        uint64_t v85 = v83[1];
        if (v78 != *v83 || v77 != v85) {
          break;
        }
LABEL_96:
        if (v83 == (uint64_t *)(*v132 + 72 * *v130) || !v83[4] || !v83[7]) {
          goto LABEL_104;
        }
        uint64_t v90 = *((unsigned int *)v83 + 16);
        if (v74 <= *((_DWORD *)v137 + 4 * v75)) {
          unsigned int v91 = *((_DWORD *)v137 + 4 * v75);
        }
        else {
          unsigned int v91 = v74;
        }
        if (v90 <= v69) {
          goto LABEL_107;
        }
LABEL_109:
        unsigned int v65 = v62;
        unsigned int v64 = v75;
        unsigned int v63 = v91;
        uint64_t v69 = v90;
LABEL_110:
        if (v138 == ++v75) {
          goto LABEL_111;
        }
      }
      int v87 = 1;
      while (v84 != -4096 || v85 != -4096)
      {
        unsigned int v88 = v82 + v87++;
        unsigned int v82 = v88 & v73;
        int v83 = (uint64_t *)(v72 + 72 * (v88 & v73));
        uint64_t v84 = *v83;
        uint64_t v85 = v83[1];
        if (v78 == *v83 && v77 == v85) {
          goto LABEL_96;
        }
      }
LABEL_104:
      LODWORD(v90) = 0;
      if (v74 <= *((_DWORD *)v137 + 4 * v75)) {
        unsigned int v91 = *((_DWORD *)v137 + 4 * v75);
      }
      else {
        unsigned int v91 = v74;
      }
LABEL_107:
      if (v90 != v69) {
        goto LABEL_110;
      }
      uint64_t v90 = v69;
      if (v91 >= v63) {
        goto LABEL_110;
      }
      goto LABEL_109;
    }
LABEL_111:
    ++v68;
    BOOL v38 = v62++ == v138 - 2;
  }
  while (!v38);
  if (v69 > 1)
  {
    uint64_t v92 = v65;
    uint64_t v93 = (long long *)((char *)v137 + 16 * v64);
    long long v131 = *((_OWORD *)v137 + v65);
    long long v133 = *v93;
    int v94 = (char *)v137 + 16 * v138;
    if (v94 != (char *)(v93 + 1))
    {
      memmove(v93, v93 + 1, v94 - (char *)(v93 + 1));
      int v41 = v138;
      uint64_t v66 = (char *)v137;
    }
    int v95 = v41 - 1;
    LODWORD(v138) = v95;
    uint64_t v96 = &v66[16 * v92];
    int v97 = &v66[16 * v95];
    if (v97 != v96 + 16)
    {
      memmove(v96, v96 + 16, v97 - (v96 + 16));
      int v95 = v138;
    }
    unsigned int v98 = v95 - 1;
    LODWORD(v138) = v98;
    if (v98 >= HIDWORD(v138)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v137 + v98) = v131;
    unsigned int v99 = v138 + 1;
    LODWORD(v138) = v99;
    if (v99 >= HIDWORD(v138)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v137 + v99) = v133;
    LODWORD(v138) = v138 + 1;
  }
LABEL_121:
  llvm::ReassociatePass::RewriteExprTree((uint64_t)this, (llvm::UndefValue **)a2, (uint64_t)&v137);
LABEL_122:
  if (v137 != v139) {
    free(v137);
  }
  int v100 = (char *)v140;
  if (v141)
  {
    uint64_t v101 = 24 * v141;
    do
    {
      if (*(_DWORD *)&v100[v101 - 8] >= 0x41u)
      {
        uint64_t v102 = *(void *)&v100[v101 - 16];
        if (v102) {
          MEMORY[0x1D25D9CB0](v102, 0x1000C8000313F17);
        }
      }
      v101 -= 24;
    }
    while (v101);
    int v100 = (char *)v140;
  }
  if (v100 != (char *)v142) {
    free(v100);
  }
}

void llvm::ReassociatePass::BuildPairMap(uint64_t a1, uint64_t *a2)
{
  v204[8] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2[1];
  uint64_t v166 = *a2;
  if (v2 != *a2)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 - 8);
      uint64_t v168 = v2 - 8;
      uint64_t v4 = v3 + 40;
      uint64_t v5 = *(void *)(v3 + 48);
      if (v5 == v3 + 40) {
        goto LABEL_292;
      }
      uint64_t v169 = v3 + 40;
      do
      {
        if (v5) {
          uint64_t v6 = v5 - 24;
        }
        else {
          uint64_t v6 = 0;
        }
        int v7 = *(unsigned __int8 *)(v6 + 16);
        switch(*(unsigned char *)(v6 + 16))
        {
          case ')':
          case '-':
            goto LABEL_9;
          case '*':
          case '.':
            if ((~*(unsigned __int8 *)(v6 + 17) & 0x12) == 0) {
              goto LABEL_9;
            }
            goto LABEL_291;
          case '+':
          case ',':
            goto LABEL_291;
          default:
            if ((v7 - 56) >= 3) {
              goto LABEL_291;
            }
LABEL_9:
            uint64_t v8 = *(void *)(v6 + 8);
            if (v8 && !*(void *)(v8 + 8) && *(unsigned __int8 *)(*(void *)(v8 + 24) + 16) == v7) {
              goto LABEL_291;
            }
            int v9 = *(_DWORD *)(v6 + 20);
            if ((v9 & 0x40000000) != 0) {
              int v10 = *(uint64_t **)(v6 - 8);
            }
            else {
              int v10 = (uint64_t *)(v6 - 32 * (v9 & 0x7FFFFFF));
            }
            unsigned int v11 = 0;
            uint64_t v12 = *v10;
            uint64_t v13 = v10[4];
            int v201 = v204;
            unsigned int v203 = 8;
            v204[0] = v12;
            v204[1] = v13;
            int v198 = v200;
            uint64_t v199 = 0x800000000;
            unsigned int v14 = 2;
            uint64_t v170 = v5;
            break;
        }
        while (1)
        {
          uint64_t v15 = v201[v14 - 1];
          unsigned int v16 = v14 - 1;
          unsigned int v202 = v14 - 1;
          unsigned int v17 = *(unsigned __int8 *)(v15 + 16);
          if (v15 && v17 >= 0x1C && v17 == *(unsigned __int8 *)(v6 + 16))
          {
            uint64_t v19 = *(void *)(v15 + 8);
            if (v19)
            {
              if (!*(void *)(v19 + 8)) {
                break;
              }
            }
          }
          if (v11 >= HIDWORD(v199)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v198 + v11) = v15;
          unsigned int v11 = v199 + 1;
          LODWORD(v199) = v199 + 1;
          unsigned int v14 = v202;
          if (!v202) {
            goto LABEL_47;
          }
LABEL_28:
          if (v11 >= 0xB) {
            goto LABEL_47;
          }
        }
        int v20 = *(_DWORD *)(v15 + 20);
        if ((v20 & 0x40000000) != 0) {
          __n128 v21 = *(void **)(v15 - 8);
        }
        else {
          __n128 v21 = (void *)(v15 - 32 * (v20 & 0x7FFFFFF));
        }
        if (*v21 != v15)
        {
          if (v16 >= v203) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v201[v16] = *v21;
          unsigned int v16 = ++v202;
          int v20 = *(_DWORD *)(v15 + 20);
        }
        if ((v20 & 0x40000000) != 0) {
          uint64_t v22 = *(void *)(v15 - 8);
        }
        else {
          uint64_t v22 = v15 - 32 * (v20 & 0x7FFFFFF);
        }
        uint64_t v23 = *(void *)(v22 + 32);
        if (v23 != v15)
        {
          if (v16 >= v203) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v201[v16] = v23;
          unsigned int v16 = ++v202;
        }
        unsigned int v11 = v199;
        unsigned int v14 = v16;
        if (v16) {
          goto LABEL_28;
        }
LABEL_47:
        if (v11 <= 0xA)
        {
          uint64_t v24 = 0;
          int v25 = *(unsigned __int8 *)(v6 + 16);
          uint64_t v192 = v194;
          uint64_t v193 = 0x2000000000;
          int v196 = 0;
          uint64_t v197 = 0;
          uint64_t v195 = &v196;
          if (v11 != 1)
          {
            uint64_t v26 = 0;
            LODWORD(v27) = 0;
            uint64_t v28 = a1 + 24 * (v25 - 41);
            int v29 = (uint64_t *)(v28 + 120);
            int v175 = (unsigned int *)(v28 + 136);
            uint64_t v30 = (_DWORD *)(v28 + 128);
            int v173 = (uint64_t *)(v28 + 120);
            uint64_t v174 = (_DWORD *)(v28 + 132);
            unsigned int v31 = 1;
            while (1)
            {
              uint64_t v27 = (v27 + 1);
              if (v11 > v27) {
                break;
              }
              uint64_t v113 = v11;
LABEL_282:
              ++v31;
              uint64_t v26 = v27;
              if (v113 - 1 <= (unint64_t)v27)
              {
                uint64_t v24 = v196;
                goto LABEL_284;
              }
            }
            uint64_t v172 = v27;
            unsigned int v171 = v31;
            unint64_t v32 = v31;
LABEL_52:
            unint64_t v33 = *((void *)v198 + v26);
            unint64_t v34 = *((void *)v198 + v32);
            if (v34 >= v33) {
              uint64_t v35 = (uint64_t *)*((void *)v198 + v32);
            }
            else {
              uint64_t v35 = (uint64_t *)*((void *)v198 + v26);
            }
            if (v34 >= v33) {
              unint64_t v36 = (int32x2_t ****)*((void *)v198 + v26);
            }
            else {
              unint64_t v36 = (int32x2_t ****)*((void *)v198 + v32);
            }
            if (v197)
            {
              uint64_t v129 = v196;
              for (uint64_t i = &v196; ; v129 = *i)
              {
                uint64_t v126 = i;
                if (!v129) {
                  goto LABEL_222;
                }
                while (1)
                {
                  uint64_t i = (uint64_t **)v129;
                  unint64_t v130 = v129[4];
                  if ((unint64_t)v36 < v130) {
                    break;
                  }
                  if (v130 >= (unint64_t)v36)
                  {
                    long long v131 = i[5];
                    if (v35 < v131) {
                      break;
                    }
                    if (v131 >= v35) {
                      goto LABEL_185;
                    }
                  }
                  uint64_t v129 = i[1];
                  if (!v129)
                  {
LABEL_221:
                    uint64_t v126 = i + 1;
                    goto LABEL_222;
                  }
                }
              }
            }
            unsigned int v37 = v193;
            if (!v193) {
              goto LABEL_67;
            }
            uint64_t v38 = 16 * v193;
            unsigned int v39 = (uint64_t **)((char *)v192 + 8);
            while (*(v39 - 1) != (uint64_t *)v36 || *v39 != v35)
            {
              v39 += 2;
              v38 -= 16;
              if (!v38) {
                goto LABEL_66;
              }
            }
            if (v38) {
              goto LABEL_185;
            }
LABEL_66:
            if (v193 < 0x20)
            {
LABEL_67:
              if (v193 >= HIDWORD(v193)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v41 = (int32x2_t *****)((char *)v192 + 16 * v193);
              *int v41 = v36;
              v41[1] = (int32x2_t ****)v35;
              LODWORD(v193) = v193 + 1;
              goto LABEL_69;
            }
            while (1)
            {
              uint64_t v114 = v196;
              unint64_t v115 = (char *)v192 + 16 * v37;
              int v116 = &v196;
              uint64_t v117 = &v196;
              if (v196) {
                break;
              }
LABEL_199:
              int v122 = v115 - 16;
              uint64_t v123 = operator new(0x30uLL);
              v123[2] = *(_OWORD *)v122;
              *(void *)uint64_t v123 = 0;
              *((void *)v123 + 1) = 0;
              *((void *)v123 + 2) = v116;
              *uint64_t v117 = (uint64_t *)v123;
              if (*v195)
              {
                uint64_t v195 = (uint64_t **)*v195;
                uint64_t v123 = *v117;
              }
              sub_1CB8358B8(v196, (uint64_t *)v123);
              ++v197;
              unsigned int v37 = v193;
              int v29 = v173;
LABEL_202:
              LODWORD(v193) = --v37;
              if (!v37)
              {
                unint64_t v124 = v196;
                for (uint64_t i = &v196; ; v124 = *i)
                {
                  uint64_t v126 = i;
                  if (!v124) {
                    break;
                  }
                  while (1)
                  {
                    uint64_t i = (uint64_t **)v124;
                    unint64_t v127 = v124[4];
                    if ((unint64_t)v36 < v127) {
                      break;
                    }
                    if (v127 >= (unint64_t)v36)
                    {
                      uint64_t v128 = i[5];
                      if (v35 < v128) {
                        break;
                      }
                      if (v128 >= v35) {
                        goto LABEL_69;
                      }
                    }
                    unint64_t v124 = i[1];
                    if (!v124) {
                      goto LABEL_221;
                    }
                  }
                }
LABEL_222:
                uint64_t v132 = (uint64_t *)operator new(0x30uLL);
                v132[4] = (uint64_t)v36;
                v132[5] = (uint64_t)v35;
                *uint64_t v132 = 0;
                v132[1] = 0;
                void v132[2] = (uint64_t)i;
                *uint64_t v126 = v132;
                if (*v195)
                {
                  uint64_t v195 = (uint64_t **)*v195;
                  uint64_t v132 = *v126;
                }
                sub_1CB8358B8(v196, v132);
                ++v197;
                int v29 = v173;
LABEL_69:
                uint64_t v176 = 4;
                uint64_t v177 = 0;
                int v178 = v36;
                if (v36 != (int32x2_t ****)-8192 && v36 != (int32x2_t ****)-4096 && v36)
                {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v176);
                  int v29 = v173;
                }
                uint64_t v179 = 4;
                unsigned int v180 = 0;
                unsigned int v181 = (int32x2_t ****)v35;
                if (v35 != (uint64_t *)-8192 && v35 != (uint64_t *)-4096 && v35)
                {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v179);
                  int v29 = v173;
                }
                int v182 = 1;
                int v183 = v36;
                unint64_t v184 = v35;
                uint64_t v185 = 4;
                uint64_t v186 = 0;
                size_t v187 = v178;
                if (v178 != (int32x2_t ****)-8192 && v178 != (int32x2_t ****)-4096)
                {
                  if (v178)
                  {
                    unint64_t v42 = v176 & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v186 = *(unint64_t **)(v176 & 0xFFFFFFFFFFFFFFF8);
                    *(void *)unint64_t v42 = &v185;
                    uint64_t v185 = v42 | 4;
                    if (v186) {
                      unint64_t *v186 = *v186 & 7 | (unint64_t)&v186;
                    }
                  }
                }
                uint64_t v188 = 4;
                uint64_t v189 = 0;
                uint64_t v190 = v181;
                if (v181 != (int32x2_t ****)-8192 && v181 != (int32x2_t ****)-4096)
                {
                  if (v181)
                  {
                    unint64_t v43 = v179 & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v189 = *(unint64_t **)(v179 & 0xFFFFFFFFFFFFFFF8);
                    *(void *)unint64_t v43 = &v188;
                    uint64_t v188 = v43 | 4;
                    if (v189) {
                      *uint64_t v189 = *v189 & 7 | (unint64_t)&v189;
                    }
                  }
                }
                int v191 = 1;
                unsigned int v44 = *v175;
                if (!*v175)
                {
                  uint64_t v50 = 0;
                  goto LABEL_111;
                }
                unint64_t v45 = ((v184 >> 4) ^ (v184 >> 9) | ((unint64_t)((v183 >> 4) ^ (v183 >> 9)) << 32))
                    + ~((unint64_t)((v184 >> 4) ^ (v184 >> 9)) << 32);
                unint64_t v46 = (v45 ^ (v45 >> 22)) + ~((v45 ^ (v45 >> 22)) << 13);
                unint64_t v47 = (9 * (v46 ^ (v46 >> 8))) ^ ((9 * (v46 ^ (v46 >> 8))) >> 15);
                unsigned int v48 = v44 - 1;
                unsigned int v49 = (v44 - 1) & (((v47 + ~(v47 << 27)) >> 31) ^ (v47 + ~(v47 << 27)));
                uint64_t v50 = *v29 + 72 * v49;
                uint64_t v51 = *(void *)v50;
                uint64_t v52 = *(uint64_t **)(v50 + 8);
                if (v183 == *(int32x2_t *****)v50 && v184 == v52)
                {
LABEL_108:
                  int v60 = 1;
                }
                else
                {
                  uint64_t v54 = 0;
                  int v55 = 1;
                  while (v51 != -4096 || v52 != (uint64_t *)-4096)
                  {
                    if (v54) {
                      BOOL v56 = 0;
                    }
                    else {
                      BOOL v56 = v52 == (uint64_t *)-8192;
                    }
                    if (v56 && v51 == -8192) {
                      uint64_t v54 = v50;
                    }
                    unsigned int v58 = v49 + v55++;
                    unsigned int v49 = v58 & v48;
                    uint64_t v50 = *v29 + 72 * (v58 & v48);
                    uint64_t v51 = *(void *)v50;
                    uint64_t v52 = *(uint64_t **)(v50 + 8);
                    if (v183 == *(int32x2_t *****)v50 && v184 == v52) {
                      goto LABEL_108;
                    }
                  }
                  if (v54) {
                    uint64_t v50 = v54;
                  }
LABEL_111:
                  if (4 * *v30 + 4 >= 3 * v44)
                  {
                    long long v133 = v29;
                    sub_1CCE7DECC(v29, 2 * v44);
                    unsigned int v134 = *v175;
                    if (*v175)
                    {
                      unint64_t v135 = ((v184 >> 4) ^ (v184 >> 9) | ((unint64_t)((v183 >> 4) ^ (v183 >> 9)) << 32))
                           + ~((unint64_t)((v184 >> 4) ^ (v184 >> 9)) << 32);
                      unint64_t v136 = (v135 ^ (v135 >> 22)) + ~((v135 ^ (v135 >> 22)) << 13);
                      unint64_t v137 = (9 * (v136 ^ (v136 >> 8))) ^ ((9 * (v136 ^ (v136 >> 8))) >> 15);
                      int v138 = ((v137 + ~(v137 << 27)) >> 31) ^ (v137 + ~(v137 << 27));
                      unsigned int v139 = v134 - 1;
                      unsigned int v140 = (v134 - 1) & v138;
                      uint64_t v50 = *v133 + 72 * v140;
                      uint64_t v141 = *(void *)v50;
                      int v142 = *(uint64_t **)(v50 + 8);
                      BOOL v143 = v183 == *(int32x2_t *****)v50 && v184 == v142;
                      int v29 = v133;
                      if (!v143)
                      {
                        uint64_t v144 = 0;
                        int v145 = 1;
                        while (v141 != -4096 || v142 != (uint64_t *)-4096)
                        {
                          if (v144) {
                            BOOL v146 = 0;
                          }
                          else {
                            BOOL v146 = v142 == (uint64_t *)-8192;
                          }
                          if (v146 && v141 == -8192) {
                            uint64_t v144 = v50;
                          }
                          unsigned int v148 = v140 + v145++;
                          unsigned int v140 = v148 & v139;
                          uint64_t v50 = *v133 + 72 * (v148 & v139);
                          uint64_t v141 = *(void *)v50;
                          int v142 = *(uint64_t **)(v50 + 8);
                          if (v183 == *(int32x2_t *****)v50 && v184 == v142) {
                            goto LABEL_113;
                          }
                        }
                        if (v144) {
                          uint64_t v50 = v144;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v50 = 0;
                      int v29 = v133;
                    }
                  }
                  else if (v44 + ~*v30 - *v174 <= v44 >> 3)
                  {
                    sub_1CCE7DECC(v29, v44);
                    unsigned int v150 = *v175;
                    if (*v175)
                    {
                      unint64_t v151 = ((v184 >> 4) ^ (v184 >> 9) | ((unint64_t)((v183 >> 4) ^ (v183 >> 9)) << 32))
                           + ~((unint64_t)((v184 >> 4) ^ (v184 >> 9)) << 32);
                      unint64_t v152 = (v151 ^ (v151 >> 22)) + ~((v151 ^ (v151 >> 22)) << 13);
                      unint64_t v153 = (9 * (v152 ^ (v152 >> 8))) ^ ((9 * (v152 ^ (v152 >> 8))) >> 15);
                      int v154 = ((v153 + ~(v153 << 27)) >> 31) ^ (v153 + ~(v153 << 27));
                      unsigned int v155 = v150 - 1;
                      unsigned int v156 = (v150 - 1) & v154;
                      uint64_t v50 = *v173 + 72 * v156;
                      uint64_t v157 = *(void *)v50;
                      BOOL v158 = *(uint64_t **)(v50 + 8);
                      if (*(int32x2_t *****)v50 != v183 || v158 != v184)
                      {
                        uint64_t v160 = 0;
                        int v161 = 1;
                        while (v157 != -4096 || v158 != (uint64_t *)-4096)
                        {
                          if (v160) {
                            BOOL v162 = 0;
                          }
                          else {
                            BOOL v162 = v158 == (uint64_t *)-8192;
                          }
                          if (v162 && v157 == -8192) {
                            uint64_t v160 = v50;
                          }
                          unsigned int v164 = v156 + v161++;
                          unsigned int v156 = v164 & v155;
                          uint64_t v50 = *v173 + 72 * (v164 & v155);
                          uint64_t v157 = *(void *)v50;
                          BOOL v158 = *(uint64_t **)(v50 + 8);
                          BOOL v165 = *(int32x2_t *****)v50 == v183 && v158 == v184;
                          int v29 = v173;
                          if (v165) {
                            goto LABEL_113;
                          }
                        }
                        if (v160) {
                          uint64_t v50 = v160;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v50 = 0;
                    }
                    int v29 = v173;
                  }
LABEL_113:
                  ++*v30;
                  if (*(void *)v50 != -4096 || *(void *)(v50 + 8) != -4096) {
                    --*v174;
                  }
                  *(void *)uint64_t v50 = v183;
                  *(void *)(v50 + 8) = v184;
                  *(void *)(v50 + 16) = 4;
                  unint64_t v61 = (unint64_t *)(v50 + 16);
                  *(void *)(v50 + 24) = 0;
                  unint64_t v62 = v50 + 24;
                  unsigned int v63 = v187;
                  *(void *)(v50 + 32) = v187;
                  if (v63 != (int32x2_t ****)-8192 && v63 != (int32x2_t ****)-4096)
                  {
                    if (v63)
                    {
                      unint64_t v64 = v185 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)unint64_t v62 = *(void *)(v185 & 0xFFFFFFFFFFFFFFF8);
                      *(void *)unint64_t v64 = v61;
                      *unint64_t v61 = v64 | 4;
                      if (*(void *)v62) {
                        **(void **)unint64_t v62 = **(void **)v62 & 7 | v62;
                      }
                    }
                  }
                  *(void *)(v50 + 48) = 0;
                  unint64_t v65 = v50 + 48;
                  *(void *)(v50 + 40) = 4;
                  uint64_t v66 = (unint64_t *)(v50 + 40);
                  BOOL v67 = v190;
                  *(void *)(v50 + 56) = v190;
                  if (v67 != (int32x2_t ****)-8192 && v67 != (int32x2_t ****)-4096)
                  {
                    if (v67)
                    {
                      unint64_t v68 = v188 & 0xFFFFFFFFFFFFFFF8;
                      *(void *)unint64_t v65 = *(void *)(v188 & 0xFFFFFFFFFFFFFFF8);
                      *(void *)unint64_t v68 = v66;
                      *uint64_t v66 = v68 | 4;
                      if (*(void *)v65) {
                        **(void **)unint64_t v65 = **(void **)v65 & 7 | v65;
                      }
                    }
                  }
                  int v60 = 0;
                  *(_DWORD *)(v50 + 64) = v191;
                }
                if (v190 && v190 != (int32x2_t ****)-8192 && v190 != (int32x2_t ****)-4096)
                {
                  unint64_t v69 = v188 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)(v188 & 0xFFFFFFFFFFFFFFF8) = v189;
                  if (v189)
                  {
                    *uint64_t v189 = *v189 & 7 | v69;
                  }
                  else
                  {
                    unsigned int v70 = v190;
                    unint64_t v71 = ***v190;
                    unint64_t v72 = (unint64_t)v71[303];
                    if (v72 <= v69)
                    {
                      uint64_t v73 = v71[305].u32[0];
                      if (v72 + 16 * v73 > v69)
                      {
                        unsigned int v74 = v73 - 1;
                        LODWORD(v75) = v74 & ((v190 >> 4) ^ (v190 >> 9));
                        unint64_t v76 = (int32x2_t *****)(v72 + 16 * v75);
                        unint64_t v77 = *v76;
                        if (v190 == *v76)
                        {
LABEL_137:
                          *unint64_t v76 = (int32x2_t ****)-8192;
                          v71[304] = vadd_s32(v71[304], (int32x2_t)0x1FFFFFFFFLL);
                          unsigned int v70 = v190;
                        }
                        else
                        {
                          int v78 = 1;
                          while (v77 != (int32x2_t ****)-4096)
                          {
                            int v79 = v75 + v78++;
                            uint64_t v75 = v79 & v74;
                            unint64_t v77 = *(int32x2_t *****)(v72 + 16 * v75);
                            if (v190 == v77)
                            {
                              unint64_t v76 = (int32x2_t *****)(v72 + 16 * v75);
                              goto LABEL_137;
                            }
                          }
                        }
                        *((unsigned char *)v70 + 17) &= ~1u;
                      }
                    }
                  }
                }
                if (v187 && v187 != (int32x2_t ****)-8192 && v187 != (int32x2_t ****)-4096)
                {
                  unint64_t v80 = v185 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)(v185 & 0xFFFFFFFFFFFFFFF8) = v186;
                  if (v186)
                  {
                    unint64_t *v186 = *v186 & 7 | v80;
                  }
                  else
                  {
                    unint64_t v81 = v187;
                    unsigned int v82 = ***v187;
                    unint64_t v83 = (unint64_t)v82[303];
                    if (v83 <= v80)
                    {
                      uint64_t v84 = v82[305].u32[0];
                      if (v83 + 16 * v84 > v80)
                      {
                        unsigned int v85 = v84 - 1;
                        LODWORD(v86) = v85 & ((v187 >> 4) ^ (v187 >> 9));
                        int v87 = (int32x2_t *****)(v83 + 16 * v86);
                        unsigned int v88 = *v87;
                        if (v187 == *v87)
                        {
LABEL_151:
                          llvm::UndefValue *v87 = (int32x2_t ****)-8192;
                          v82[304] = vadd_s32(v82[304], (int32x2_t)0x1FFFFFFFFLL);
                          unint64_t v81 = v187;
                        }
                        else
                        {
                          int v89 = 1;
                          while (v88 != (int32x2_t ****)-4096)
                          {
                            int v90 = v86 + v89++;
                            uint64_t v86 = v90 & v85;
                            unsigned int v88 = *(int32x2_t *****)(v83 + 16 * v86);
                            if (v187 == v88)
                            {
                              int v87 = (int32x2_t *****)(v83 + 16 * v86);
                              goto LABEL_151;
                            }
                          }
                        }
                        *((unsigned char *)v81 + 17) &= ~1u;
                      }
                    }
                  }
                }
                if (v181 && v181 != (int32x2_t ****)-8192 && v181 != (int32x2_t ****)-4096)
                {
                  unint64_t v91 = v179 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)(v179 & 0xFFFFFFFFFFFFFFF8) = v180;
                  if (v180)
                  {
                    *unsigned int v180 = *v180 & 7 | v91;
                  }
                  else
                  {
                    uint64_t v92 = v181;
                    uint64_t v93 = ***v181;
                    unint64_t v94 = (unint64_t)v93[303];
                    if (v94 <= v91)
                    {
                      uint64_t v95 = v93[305].u32[0];
                      if (v94 + 16 * v95 > v91)
                      {
                        unsigned int v96 = v95 - 1;
                        LODWORD(v97) = v96 & ((v181 >> 4) ^ (v181 >> 9));
                        unsigned int v98 = (int32x2_t *****)(v94 + 16 * v97);
                        unsigned int v99 = *v98;
                        if (v181 == *v98)
                        {
LABEL_165:
                          char *v98 = (int32x2_t ****)-8192;
                          v93[304] = vadd_s32(v93[304], (int32x2_t)0x1FFFFFFFFLL);
                          uint64_t v92 = v181;
                        }
                        else
                        {
                          int v100 = 1;
                          while (v99 != (int32x2_t ****)-4096)
                          {
                            int v101 = v97 + v100++;
                            uint64_t v97 = v101 & v96;
                            unsigned int v99 = *(int32x2_t *****)(v94 + 16 * v97);
                            if (v181 == v99)
                            {
                              unsigned int v98 = (int32x2_t *****)(v94 + 16 * v97);
                              goto LABEL_165;
                            }
                          }
                        }
                        *((unsigned char *)v92 + 17) &= ~1u;
                      }
                    }
                  }
                }
                if (!v178 || v178 == (int32x2_t ****)-8192 || v178 == (int32x2_t ****)-4096)
                {
LABEL_181:
                  if (v60) {
                    goto LABEL_184;
                  }
                }
                else
                {
                  unint64_t v102 = v176 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)(v176 & 0xFFFFFFFFFFFFFFF8) = v177;
                  if (!v177)
                  {
                    int v103 = v178;
                    int v104 = ***v178;
                    unint64_t v105 = (unint64_t)v104[303];
                    if (v105 <= v102)
                    {
                      uint64_t v106 = v104[305].u32[0];
                      if (v105 + 16 * v106 > v102)
                      {
                        unsigned int v107 = v106 - 1;
                        LODWORD(v108) = v107 & ((v178 >> 4) ^ (v178 >> 9));
                        int v109 = (int32x2_t *****)(v105 + 16 * v108);
                        uint64_t v110 = *v109;
                        if (v178 == *v109)
                        {
LABEL_179:
                          *int v109 = (int32x2_t ****)-8192;
                          v104[304] = vadd_s32(v104[304], (int32x2_t)0x1FFFFFFFFLL);
                          int v103 = v178;
                        }
                        else
                        {
                          int v111 = 1;
                          while (v110 != (int32x2_t ****)-4096)
                          {
                            int v112 = v108 + v111++;
                            uint64_t v108 = v112 & v107;
                            uint64_t v110 = *(int32x2_t *****)(v105 + 16 * v108);
                            if (v178 == v110)
                            {
                              int v109 = (int32x2_t *****)(v105 + 16 * v108);
                              goto LABEL_179;
                            }
                          }
                        }
                        *((unsigned char *)v103 + 17) &= ~1u;
                      }
                    }
                    goto LABEL_181;
                  }
                  *uint64_t v177 = *v177 & 7 | v102;
                  if (v60) {
LABEL_184:
                  }
                    ++*(_DWORD *)(v50 + 64);
                }
LABEL_185:
                ++v32;
                uint64_t v113 = v199;
                if (v32 >= v199)
                {
                  unsigned int v11 = v199;
                  uint64_t v27 = v172;
                  unsigned int v31 = v171;
                  goto LABEL_282;
                }
                goto LABEL_52;
              }
            }
            unint64_t v118 = *((void *)v115 - 2);
            unint64_t v119 = *((void *)v115 - 1);
            while (2)
            {
              while (1)
              {
                int v116 = (uint64_t **)v114;
                unint64_t v120 = v114[4];
                if (v118 < v120) {
                  break;
                }
                if (v120 >= v118)
                {
                  uint64_t v121 = v116[5];
                  if (v119 < (unint64_t)v121) {
                    break;
                  }
                  if ((unint64_t)v121 >= v119) {
                    goto LABEL_202;
                  }
                }
                uint64_t v114 = v116[1];
                if (!v114)
                {
                  uint64_t v117 = v116 + 1;
                  goto LABEL_199;
                }
              }
              uint64_t v114 = *v116;
              uint64_t v117 = v116;
              if (!*v116) {
                goto LABEL_199;
              }
              continue;
            }
          }
LABEL_284:
          sub_1CD40B1BC(v24);
          if (v192 != v194) {
            free(v192);
          }
        }
        if (v198 != v200) {
          free(v198);
        }
        if (v201 != v204) {
          free(v201);
        }
        uint64_t v4 = v169;
        uint64_t v5 = v170;
LABEL_291:
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 != v4);
LABEL_292:
      uint64_t v2 = v168;
    }
    while (v168 != v166);
  }
}

void llvm::ReassociatePass::run(int32x2_t *a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X8>)
{
  int32x2_t v118 = (int32x2_t)a2;
  int v125 = 0;
  uint64_t v126 = 0;
  std::string __p = 0;
  sub_1CC86D39C((char **)&__p, (uint64_t)&v118);
  llvm::ReassociatePass::BuildRankMap((uint64_t)a1, a2, (uint64_t *)&__p);
  llvm::ReassociatePass::BuildPairMap((uint64_t)a1, (uint64_t *)&__p);
  uint64_t v5 = a1 + 69;
  a1[69].i8[0] = 0;
  int v7 = (char *)__p;
  uint64_t v6 = v125;
  if (v125 != __p)
  {
    do
    {
      uint64_t v8 = *((void *)v6 - 1);
      v6 -= 8;
      uint64_t v9 = v8 + 40;
      for (uint64_t i = *(void *)(v8 + 48); i != v9; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          unsigned int v11 = (llvm::Instruction *)(i - 24);
        }
        else {
          unsigned int v11 = 0;
        }
        if (!*((void *)v11 + 1))
        {
          if (llvm::wouldInstructionBeTriviallyDead((uint64_t)v11, 0)) {
            llvm::ReassociatePass::EraseInst(a1, v11);
          }
        }
        llvm::ReassociatePass::OptimizeInst((llvm::ReassociatePass *)a1, v11);
      }
      int32x2_t v118 = 0;
      int32x2_t v119 = 0;
      unsigned int v120 = 0;
      MEMORY[0x1D25D9CD0](0, 8);
      uint64_t v12 = a1[8].u32[0];
      unsigned int v120 = v12;
      if (v12)
      {
        int32x2_t v118 = (int32x2_t)operator new(8 * v12, (std::align_val_t)8uLL);
        int32x2_t v119 = a1[7];
        if (v120)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 8 * v120;
          do
          {
            *(void *)(*(void *)&v118 + v13) = *(void *)(*(void *)&a1[6] + v13);
            v13 += 8;
          }
          while (v14 != v13);
        }
      }
      else
      {
        int32x2_t v118 = 0;
        int32x2_t v119 = 0;
      }
      long long v122 = 0u;
      long long v123 = 0u;
      long long v121 = 0u;
      int32x2_t v15 = a1[13];
      int32x2_t v16 = a1[10];
      unsigned int v17 = (char *)(*(void *)&v16 + 8 * (*(void *)&v15 >> 9));
      if (*(void *)&a1[11] == *(void *)&v16)
      {
        int v18 = 0;
        uint64_t v21 = 0;
        int v20 = (char *)(*(void *)&v16 + 8 * ((*(void *)&a1[14] + *(void *)&v15) >> 9));
      }
      else
      {
        int v18 = (uint64_t *)(*(void *)v17 + 8 * (*(void *)&a1[13] & 0x1FFLL));
        unint64_t v19 = *(void *)&a1[14] + *(void *)&v15;
        int v20 = (char *)(*(void *)&v16 + 8 * (v19 >> 9));
        uint64_t v21 = *(void *)v20 + 8 * (v19 & 0x1FF);
      }
      if ((uint64_t *)v21 != v18)
      {
        uint64_t v37 = ((v21 - *(void *)v20) >> 3) + ((v20 - v17) << 6);
        uint64_t v38 = (uint64_t)v18 - *(void *)v17;
        uint64_t v39 = v37 - (v38 >> 3);
        if (v37 != v38 >> 3)
        {
          if (((v39 + 1) & 0x1FF) != 0) {
            unint64_t v40 = ((unint64_t)(v39 + 1) >> 9) + 1;
          }
          else {
            unint64_t v40 = (unint64_t)(v39 + 1) >> 9;
          }
          if (v40)
          {
            unint64_t v130 = (char *)&v122 + 8;
            *(void *)&long long v128 = operator new(8 * v40);
            *((void *)&v128 + 1) = v128;
            *(void *)&long long v129 = v128;
            *((void *)&v129 + 1) = v128 + 8 * v40;
            uint64_t v41 = -(uint64_t)v40;
            do
            {
              unint64_t v127 = operator new(0x1000uLL);
              sub_1CD4A54E0((uint64_t)&v128, &v127);
            }
            while (!__CFADD__(v41++, 1));
            unint64_t v43 = (void *)*((void *)&v121 + 1);
            unsigned int v44 = (void *)v122;
            while (v44 != v43)
            {
              sub_1CD4A5618((const void **)&v128, --v44);
              unint64_t v43 = (void *)*((void *)&v121 + 1);
            }
            unint64_t v45 = (void *)v121;
            uint64_t v46 = *((void *)&v128 + 1);
            long long v121 = v128;
            long long v122 = v129;
            if (v45)
            {
              operator delete(v45);
              uint64_t v47 = v123;
              uint64_t v46 = *((void *)&v121 + 1);
              uint64_t v48 = v122;
            }
            else
            {
              uint64_t v47 = v123;
              uint64_t v48 = v129;
            }
            uint64_t v49 = *((void *)&v123 + 1);
            __int16 v50 = v47 + WORD4(v123);
            uint64_t v51 = (void *)(v46 + 8 * ((unint64_t)(v47 + *((void *)&v123 + 1)) >> 9));
            if (v48 == v46) {
              uint64_t v52 = 0;
            }
            else {
              uint64_t v52 = *v51 + 8 * (v50 & 0x1FF);
            }
          }
          else
          {
            uint64_t v52 = 0;
            uint64_t v49 = 0;
            uint64_t v51 = 0;
          }
          uint64_t v53 = v39 + ((v52 - *v51) >> 3);
          if (v53 < 1)
          {
            unint64_t v71 = 511 - v53;
            LOWORD(v53) = ~(511 - v53);
            uint64_t v54 = &v51[-(v71 >> 9)];
          }
          else
          {
            uint64_t v54 = &v51[(unint64_t)v53 >> 9];
          }
          uint64_t v55 = *v54 + 8 * (v53 & 0x1FF);
          if (v52 != v55)
          {
            do
            {
              uint64_t v56 = v55;
              if (v51 != v54) {
                uint64_t v56 = *v51 + 4096;
              }
              if (v52 == v56)
              {
                uint64_t v56 = v52;
              }
              else
              {
                uint64_t v57 = (void *)v52;
                do
                {
                  uint64_t v58 = *v18++;
                  *v57++ = v58;
                  if ((uint64_t *)((char *)v18 - *(void *)v17) == (uint64_t *)4096)
                  {
                    uint64_t v59 = (uint64_t *)*((void *)v17 + 1);
                    v17 += 8;
                    int v18 = v59;
                  }
                }
                while (v57 != (void *)v56);
              }
              v49 += (v56 - v52) >> 3;
              if (v51 == v54) {
                break;
              }
              uint64_t v60 = v51[1];
              ++v51;
              uint64_t v52 = v60;
            }
            while (v60 != v55);
            *((void *)&v123 + 1) = v49;
          }
          while (v49)
          {
            uint64_t v61 = v49 - 1;
            uint64_t v62 = *((void *)&v121 + 1);
            unint64_t v63 = v49 - 1 + v123;
            uint64_t v64 = *(void *)(*(void *)(*((void *)&v121 + 1) + ((v63 >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * (v63 & 0x1FF));
            if (v120)
            {
              LODWORD(v65) = ((v64 >> 4) ^ (v64 >> 9)) & (v120 - 1);
              uint64_t v66 = (uint64_t *)(*(void *)&v118 + 8 * v65);
              uint64_t v67 = *v66;
              if (v64 == *v66)
              {
LABEL_76:
                *uint64_t v66 = -8192;
                int32x2_t v119 = vadd_s32(v119, (int32x2_t)0x1FFFFFFFFLL);
              }
              else
              {
                int v68 = 1;
                while (v67 != -4096)
                {
                  int v69 = v65 + v68++;
                  uint64_t v65 = v69 & (v120 - 1);
                  uint64_t v67 = *(void *)(*(void *)&v118 + 8 * v65);
                  if (v64 == v67)
                  {
                    uint64_t v66 = (uint64_t *)(*(void *)&v118 + 8 * v65);
                    goto LABEL_76;
                  }
                }
              }
            }
            *((void *)&v123 + 1) = v61;
            if ((void)v122 == v62) {
              uint64_t v70 = 0;
            }
            else {
              uint64_t v70 = (((void)v122 - v62) << 6) - 1;
            }
            if (v70 - v63 >= 0x400)
            {
              operator delete(*(void **)(v122 - 8));
              *(void *)&long long v122 = v122 - 8;
            }
            if (!*(void *)(v64 + 8) && llvm::wouldInstructionBeTriviallyDead(v64, 0)) {
              llvm::ReassociatePass::RecursivelyEraseDeadInsts(a1, (_DWORD *)v64, &v118);
            }
            uint64_t v49 = *((void *)&v123 + 1);
          }
        }
      }
      while (a1[14])
      {
        int32x2_t v22 = a1[10];
        int32x2_t v23 = a1[11];
        uint64_t v24 = (char *)(*(void *)&v22 + 8 * (*(void *)&a1[13] >> 9));
        uint64_t v25 = *(void *)&a1[13] & 0x1FFLL;
        uint64_t v26 = *(llvm::Instruction **)(*(void *)v24 + 8 * v25);
        if (*(void *)&v23 == *(void *)&v22) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = (void *)(*(void *)v24 + 8 * v25);
        }
        __int32 v28 = a1[8].i32[0];
        if (v28)
        {
          int32x2_t v29 = a1[6];
          __int32 v30 = v28 - 1;
          LODWORD(v31) = ((*v27 >> 4) ^ (*v27 >> 9)) & (v28 - 1);
          unint64_t v32 = (uint64_t *)(*(void *)&v29 + 8 * v31);
          uint64_t v33 = *v32;
          if (*v27 == *v32)
          {
LABEL_30:
            *unint64_t v32 = -8192;
            a1[7] = vadd_s32(a1[7], (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            int v34 = 1;
            while (v33 != -4096)
            {
              int v35 = v31 + v34++;
              uint64_t v31 = v35 & v30;
              uint64_t v33 = *(void *)(*(void *)&v29 + 8 * v31);
              if (*v27 == v33)
              {
                unint64_t v32 = (uint64_t *)(*(void *)&v29 + 8 * v31);
                goto LABEL_30;
              }
            }
          }
        }
        if (*(void *)&v23 == *(void *)&v22) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = *(void *)v24 + 8 * v25;
        }
        if (v27 != (void *)v36)
        {
          uint64_t v112 = (uint64_t)v27 - *(void *)v24;
          unint64_t v113 = v112 >> 3;
          uint64_t v27 = (void *)v36;
          if (v112 >> 3 != (v36 - *(void *)v24) >> 3)
          {
            if (v112 < 1)
            {
              v24 -= 8 * ((511 - v113) >> 9);
              uint64_t v27 = (void *)(*(void *)v24 + 8 * (~(511 - (_WORD)v113) & 0x1FF));
            }
            else
            {
              v24 += 8 * (v113 >> 9);
              uint64_t v27 = (void *)(*(void *)v24 + (v112 & 0xFF8));
            }
          }
        }
        sub_1CCE7D110((uint64_t)&a1[9], v24, (uint64_t)v27);
        if (!*((void *)v26 + 1) && llvm::wouldInstructionBeTriviallyDead((uint64_t)v26, 0)) {
          llvm::ReassociatePass::EraseInst(a1, v26);
        }
        llvm::ReassociatePass::OptimizeInst((llvm::ReassociatePass *)a1, v26);
      }
      sub_1CCCB7078((uint64_t)&v121);
      MEMORY[0x1D25D9CD0](*(void *)&v118, 8);
    }
    while (v6 != v7);
  }
  sub_1CC0A1FD4(a1);
  sub_1CC27F058(&a1[3]);
  uint64_t v72 = (uint64_t)&a1[15];
  int64x2_t v117 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    int v73 = *(_DWORD *)(v72 + 8);
    if (v73 || *(_DWORD *)(v72 + 12))
    {
      unsigned int v74 = *(_DWORD *)(v72 + 16);
      if (v74 <= 4 * v73 || v74 < 0x41)
      {
        if (v74)
        {
          unsigned int v82 = *(int64x2_t **)v72;
          uint64_t v83 = *(void *)v72 + 72 * v74;
          do
          {
            uint64_t v84 = v82->i64[1];
            if (v82->i64[0] != -4096 || v84 != -4096)
            {
              if (v82->i64[0] != -8192 || v84 != -8192)
              {
                uint64_t v85 = v82[3].i64[1];
                if (v85 && v85 != -8192 && v85 != -4096)
                {
                  unint64_t v86 = v82[2].i64[1] & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unint64_t v86 = v82[3].i64[0];
                  int v87 = (unint64_t *)v82[3].i64[0];
                  if (v87)
                  {
                    unint64_t *v87 = *v87 & 7 | v86;
                  }
                  else
                  {
                    uint64_t v88 = v82[3].i64[1];
                    int v89 = ***(int32x2_t ****)v88;
                    unint64_t v90 = (unint64_t)v89[303];
                    if (v90 <= v86)
                    {
                      uint64_t v91 = v89[305].u32[0];
                      if (v90 + 16 * v91 > v86)
                      {
                        unsigned int v92 = v91 - 1;
                        LODWORD(v93) = v92 & ((v88 >> 4) ^ (v88 >> 9));
                        unint64_t v94 = (uint64_t *)(v90 + 16 * v93);
                        uint64_t v95 = *v94;
                        if (v88 == *v94)
                        {
LABEL_126:
                          *unint64_t v94 = -8192;
                          v89[304] = vadd_s32(v89[304], (int32x2_t)0x1FFFFFFFFLL);
                          uint64_t v88 = v82[3].i64[1];
                        }
                        else
                        {
                          int v96 = 1;
                          while (v95 != -4096)
                          {
                            int v97 = v93 + v96++;
                            uint64_t v93 = v97 & v92;
                            uint64_t v95 = *(void *)(v90 + 16 * v93);
                            if (v88 == v95)
                            {
                              unint64_t v94 = (uint64_t *)(v90 + 16 * v93);
                              goto LABEL_126;
                            }
                          }
                        }
                        *(unsigned char *)(v88 + 17) &= ~1u;
                      }
                    }
                  }
                }
                uint64_t v98 = v82[2].i64[0];
                if (v98 && v98 != -8192 && v98 != -4096)
                {
                  unint64_t v99 = v82[1].i64[0] & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unint64_t v99 = v82[1].i64[1];
                  int v100 = (unint64_t *)v82[1].i64[1];
                  if (v100)
                  {
                    *int v100 = *v100 & 7 | v99;
                  }
                  else
                  {
                    uint64_t v101 = v82[2].i64[0];
                    unint64_t v102 = ***(int32x2_t ****)v101;
                    unint64_t v103 = (unint64_t)v102[303];
                    if (v103 <= v99)
                    {
                      uint64_t v104 = v102[305].u32[0];
                      if (v103 + 16 * v104 > v99)
                      {
                        unsigned int v105 = v104 - 1;
                        LODWORD(v106) = v105 & ((v101 >> 4) ^ (v101 >> 9));
                        unsigned int v107 = (uint64_t *)(v103 + 16 * v106);
                        uint64_t v108 = *v107;
                        if (v101 == *v107)
                        {
LABEL_140:
                          *unsigned int v107 = -8192;
                          v102[304] = vadd_s32(v102[304], (int32x2_t)0x1FFFFFFFFLL);
                          uint64_t v101 = v82[2].i64[0];
                        }
                        else
                        {
                          int v109 = 1;
                          while (v108 != -4096)
                          {
                            int v110 = v106 + v109++;
                            uint64_t v106 = v110 & v105;
                            uint64_t v108 = *(void *)(v103 + 16 * v106);
                            if (v101 == v108)
                            {
                              unsigned int v107 = (uint64_t *)(v103 + 16 * v106);
                              goto LABEL_140;
                            }
                          }
                        }
                        *(unsigned char *)(v101 + 17) &= ~1u;
                      }
                    }
                  }
                }
              }
              v82->i64[0] = -4096;
              v82->i64[1] = -4096;
            }
            unsigned int v82 = (int64x2_t *)((char *)v82 + 72);
          }
          while (v82 != (int64x2_t *)v83);
        }
        *(void *)(v72 + 8) = 0;
      }
      else
      {
        sub_1CCCB6E34(v72);
        int v75 = 1 << (33 - __clz(v73 - 1));
        if (v75 <= 64) {
          int v75 = 64;
        }
        if (v73) {
          uint64_t v76 = v75;
        }
        else {
          uint64_t v76 = 0;
        }
        if (v76 == *(_DWORD *)(v72 + 16))
        {
          *(void *)(v72 + 8) = 0;
          if (v76)
          {
            uint64_t v114 = *(int64x2_t **)v72;
            uint64_t v115 = 72 * v76;
            do
            {
              *uint64_t v114 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
              uint64_t v114 = (int64x2_t *)((char *)v114 + 72);
              v115 -= 72;
            }
            while (v115);
          }
        }
        else
        {
          MEMORY[0x1D25D9CD0](*(void *)v72, 8);
          if (v76)
          {
            unint64_t v77 = (4 * (int)v76 / 3u + 1) | ((unint64_t)(4 * (int)v76 / 3u + 1) >> 1) | (((4 * (int)v76 / 3u + 1) | ((unint64_t)(4 * (int)v76 / 3u + 1) >> 1)) >> 2);
            unint64_t v78 = v77 | (v77 >> 4) | ((v77 | (v77 >> 4)) >> 8);
            LODWORD(v78) = ((v78 >> 16) | v78) + 1;
            *(_DWORD *)(v72 + 16) = v78;
            int v79 = operator new(72 * v78, (std::align_val_t)8uLL);
            *(void *)uint64_t v72 = v79;
            *(void *)(v72 + 8) = 0;
            uint64_t v80 = *(unsigned int *)(v72 + 16);
            if (v80)
            {
              uint64_t v81 = 72 * v80;
              do
              {
                *int v79 = v117;
                int v79 = (_OWORD *)((char *)v79 + 72);
                v81 -= 72;
              }
              while (v81);
            }
          }
          else
          {
            *(void *)uint64_t v72 = 0;
            *(void *)(v72 + 8) = 0;
            *(_DWORD *)(v72 + 16) = 0;
          }
        }
      }
    }
    v72 += 24;
  }
  while ((int32x2_t *)v72 != v5);
  int v111 = v5->u8[0];
  *(void *)a3 = a3 + 32;
  *(void *)(a3 + 8) = a3 + 32;
  *(_DWORD *)(a3 + 16) = 2;
  if (v111)
  {
    *(_DWORD *)(a3 + 20) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(void *)(a3 + 48) = a3 + 80;
    *(void *)(a3 + 56) = a3 + 80;
    *(void *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    sub_1CBF541A4((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  }
  else
  {
    *(void *)(a3 + 48) = a3 + 80;
    *(void *)(a3 + 56) = a3 + 80;
    *(void *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    *(void *)(a3 + 20) = 1;
    *(void *)(a3 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  }
  if (__p)
  {
    int v125 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1CCE7A178()
{
}

uint64_t sub_1CCE7A214(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF7858;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2640728;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v2 = 152;
  *(_OWORD *)(a1 + 136) = 0u;
  do
  {
    uint64_t v3 = a1 + v2;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 16) = 0;
    v2 += 24;
  }
  while (v2 != 584);
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF7860, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CCE7A178;
    v7[1] = &PassRegistry;
    uint64_t v6 = v7;
    std::__call_once(&qword_1EBCF7860, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CCE7A30C(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(result + 24 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(result + 24 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
LABEL_7:
  *a4 = v6;
  return result;
}

uint64_t *sub_1CCE7A38C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    uint64_t v7 = *(uint64_t **)a1;
    unint64_t v8 = (2 * v6 - 1) | ((unint64_t)(2 * v6 - 1) >> 1);
    unint64_t v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
    int v10 = ((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8);
    if ((v10 + 1) > 0x40) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 64;
    }
    *(_DWORD *)(a1 + 16) = v11;
    uint64_t v12 = (uint64_t *)operator new(24 * v11, (std::align_val_t)8uLL);
    *(void *)a1 = v12;
    if (v7)
    {
      sub_1CCE7A638(a1, v7, &v7[3 * v6]);
      MEMORY[0x1D25D9CD0](v7, 8);
      LODWORD(v14) = *(_DWORD *)(a1 + 16);
      uint64_t v12 = *(uint64_t **)a1;
    }
    else
    {
      uint64_t v13 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v14 = *(unsigned int *)(a1 + 16);
      do
      {
        v12[v13] = -4096;
        v13 += 3;
      }
      while (3 * v14 != v13);
    }
    uint64_t v15 = *a2;
    int v16 = v14 - 1;
    unsigned int v17 = ((*a2 >> 4) ^ (*a2 >> 9)) & v16;
    a3 = &v12[3 * v17];
    uint64_t v18 = *a3;
    if (*a2 == *a3) {
      goto LABEL_16;
    }
    unint64_t v19 = 0;
    int v20 = 1;
    while (v18 != -4096)
    {
      if (v19) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v18 == -8192;
      }
      if (v22) {
        unint64_t v19 = a3;
      }
      unsigned int v23 = v17 + v20++;
      unsigned int v17 = v23 & v16;
      a3 = &v12[3 * v17];
      uint64_t v18 = *a3;
      if (v15 == *a3) {
        goto LABEL_16;
      }
    }
    if (v19) {
      a3 = v19;
    }
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
    sub_1CCE7A560(a1, *(_DWORD *)(a1 + 16));
    uint64_t v24 = 0;
    sub_1CCE7A30C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v24);
    a3 = v24;
  }
  uint64_t v15 = *a3;
LABEL_16:
  ++*(_DWORD *)(a1 + 8);
  if (v15 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CCE7A560(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CCE7A638(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CCE7A638(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    int v4 = *(void **)result;
    uint64_t v5 = 24 * v3;
    do
    {
      void *v4 = -4096;
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 3)
  {
    uint64_t v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v7 = *(_DWORD *)(result + 16) - 1;
      unsigned int v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v9 = *(void *)result + 24 * v8;
      uint64_t v10 = *(void *)v9;
      if (v6 != *(void *)v9)
      {
        uint64_t v11 = 0;
        int v12 = 1;
        while (v10 != -4096)
        {
          if (v11) {
            BOOL v13 = 0;
          }
          else {
            BOOL v13 = v10 == -8192;
          }
          if (v13) {
            uint64_t v11 = v9;
          }
          unsigned int v14 = v8 + v12++;
          unsigned int v8 = v14 & v7;
          uint64_t v9 = *(void *)result + 24 * (v14 & v7);
          uint64_t v10 = *(void *)v9;
          if (v6 == *(void *)v9) {
            goto LABEL_11;
          }
        }
        if (v11) {
          uint64_t v9 = v11;
        }
      }
LABEL_11:
      *(void *)uint64_t v9 = v6;
      *(_DWORD *)(v9 + 16) = *((_DWORD *)a2 + 4);
      *(void *)(v9 + 8) = a2[1];
      *((_DWORD *)a2 + 4) = 0;
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

void sub_1CCE7A724(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(24 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  int v7 = v6;
  sub_1CD77F4C4(a1, (uint64_t)v6);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

llvm::Value *sub_1CCE7A7E4(void *a1, uint64_t a2, const char **a3, uint64_t a4, uint64_t a5)
{
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12) {
    int v6 = *(unsigned __int8 *)(**(void **)(*a1 + 16) + 8);
  }
  else {
    int v6 = *(_DWORD *)(*a1 + 8);
  }
  if (v6 == 13)
  {
    return llvm::BinaryOperator::Create(13, a1, a2, a3, a4);
  }
  else
  {
    uint64_t result = llvm::BinaryOperator::Create(14, a1, a2, a3, a4);
    *((unsigned char *)result + 17) |= *(unsigned char *)(a5 + 17) & 0xFE;
  }
  return result;
}

void sub_1CCE7A880(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  if (a3 >= 2)
  {
    int v7 = a1;
    if (a3 == 2)
    {
      if (a2[-1].n128_u32[2] > a1->n128_u32[2])
      {
        __n128 v36 = *a1;
        unsigned __int32 v8 = a2[-1].n128_u32[2];
        a1->n128_u64[0] = a2[-1].n128_u64[0];
        a1->n128_u32[2] = v8;
        a2[-1].n128_u64[0] = v36.n128_u64[0];
        a2[-1].n128_u32[2] = v36.n128_u32[2];
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      int v20 = a4;
      unint64_t v21 = a3 >> 1;
      BOOL v22 = &a1[a3 >> 1];
      unint64_t v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v24 = sub_1CCE7AB14(a1, v22, v23, a4, a6);
        uint64_t v25 = &v20[v21];
        sub_1CCE7AB14(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v25, v24);
        uint64_t v26 = &v20[a3];
        uint64_t v27 = v25;
        while (v27 != v26)
        {
          if (v27->n128_u32[2] <= v20->n128_u32[2])
          {
            unint64_t v29 = v20->n128_u64[0];
            v7->n128_u32[2] = v20->n128_u32[2];
            v7->n128_u64[0] = v29;
            ++v20;
          }
          else
          {
            unint64_t v28 = v27->n128_u64[0];
            v7->n128_u32[2] = v27->n128_u32[2];
            v7->n128_u64[0] = v28;
            ++v27;
          }
          ++v7;
          if (v20 == v25)
          {
            if (v27 != v26)
            {
              uint64_t v30 = 0;
              do
              {
                uint64_t v31 = &v7[v30];
                unint64_t v32 = v27[v30].n128_u64[0];
                v31->n128_u32[2] = v27[v30].n128_u32[2];
                v31->n128_u64[0] = v32;
                ++v30;
              }
              while (&v27[v30] != v26);
            }
            return;
          }
        }
        if (v20 != v25)
        {
          uint64_t v33 = 0;
          do
          {
            int v34 = &v7[v33];
            unint64_t v35 = v20[v33].n128_u64[0];
            v34->n128_u32[2] = v20[v33].n128_u32[2];
            v34->n128_u64[0] = v35;
            ++v33;
          }
          while (&v20[v33] != v25);
        }
      }
      else
      {
        sub_1CCE7A880(a1, v22, v23, a4, a5);
        sub_1CCE7A880(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v20, a5);
        sub_1CCE7AD28((char *)v7, (char *)&v7[a3 >> 1], (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v20, a5);
      }
    }
    else if (a1 != a2)
    {
      uint64_t v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v11 = 0;
        int v12 = a1;
        do
        {
          unsigned __int32 v13 = v12[1].n128_u32[2];
          unsigned __int32 v14 = v12->n128_u32[2];
          int v12 = v10;
          if (v13 > v14)
          {
            unint64_t v15 = v10->n128_u64[0];
            uint64_t v16 = v11;
            while (1)
            {
              unsigned int v17 = (char *)a1 + v16;
              *((void *)v17 + 2) = *(unint64_t *)((char *)a1->n128_u64 + v16);
              *((_DWORD *)v17 + 6) = *(unsigned __int32 *)((char *)&a1->n128_u32[2] + v16);
              if (!v16) {
                break;
              }
              v16 -= 16;
              if (v13 <= *((_DWORD *)v17 - 2))
              {
                uint64_t v18 = (uint64_t)&a1[1] + v16;
                goto LABEL_15;
              }
            }
            uint64_t v18 = (uint64_t)a1;
LABEL_15:
            *(void *)uint64_t v18 = v15;
            *(_DWORD *)(v18 + 8) = v13;
          }
          uint64_t v10 = v12 + 1;
          v11 += 16;
        }
        while (&v12[1] != a2);
      }
    }
  }
}

__n128 sub_1CCE7AB14(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  if (a3)
  {
    uint64_t v5 = a4;
    unsigned __int32 v8 = a1;
    if (a3 == 2)
    {
      uint64_t v9 = a2 - 1;
      if (a2[-1].n128_u32[2] <= a1->n128_u32[2])
      {
        *a4 = *a1;
        uint64_t result = *v9;
      }
      else
      {
        *a4 = *v9;
        uint64_t result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      uint64_t result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      uint64_t v18 = &a1[a3 >> 1];
      sub_1CCE7A880(a1, v18, a3 >> 1, a4, a3 >> 1);
      sub_1CCE7A880(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v19 = &v8[a3 >> 1];
      while (v19 != a2)
      {
        if (v19->n128_u32[2] <= v8->n128_u32[2])
        {
          __n128 v21 = *v8++;
          uint64_t result = v21;
        }
        else
        {
          __n128 v20 = *v19++;
          uint64_t result = v20;
        }
        *v5++ = result;
        if (v8 == v18)
        {
          if (v19 != a2)
          {
            uint64_t v22 = 0;
            do
            {
              uint64_t result = v19[v22];
              v5[v22++] = result;
            }
            while (&v19[v22] != a2);
          }
          return result;
        }
      }
      if (v8 != v18)
      {
        uint64_t v23 = 0;
        do
        {
          uint64_t result = v8[v23];
          v5[v23++] = result;
        }
        while (&v8[v23] != v18);
      }
    }
    else if (a1 != a2)
    {
      uint64_t result = *a1;
      *a4 = *a1;
      uint64_t v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v11 = 0;
        int v12 = a4;
        do
        {
          unsigned __int32 v13 = v10;
          unsigned __int32 v14 = v12 + 1;
          if (v8[1].n128_u32[2] <= v12->n128_u32[2])
          {
            uint64_t result = *v10;
            *unsigned __int32 v14 = *v10;
          }
          else
          {
            uint64_t result = *v12;
            *unsigned __int32 v14 = *v12;
            unint64_t v15 = a4;
            if (v12 != a4)
            {
              uint64_t v16 = v11;
              while (1)
              {
                unint64_t v15 = (__n128 *)((char *)a4 + v16);
                if (v8[1].n128_u32[2] <= *(unsigned __int32 *)((char *)&a4->n128_u32[-2] + v16)) {
                  break;
                }
                v15->n128_u64[0] = v15[-1].n128_u64[0];
                v15->n128_u32[2] = v15[-1].n128_u32[2];
                v16 -= 16;
                if (!v16)
                {
                  unint64_t v15 = a4;
                  break;
                }
              }
            }
            unint64_t v17 = v13->n128_u64[0];
            v15->n128_u32[2] = v13->n128_u32[2];
            v15->n128_u64[0] = v17;
          }
          uint64_t v10 = v13 + 1;
          v11 += 16;
          int v12 = v14;
          unsigned __int32 v8 = v13;
        }
        while (&v13[1] != a2);
      }
    }
  }
  return result;
}

char *sub_1CCE7AD28(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v7 = a5;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v9 = 0;
      uint64_t v10 = -a4;
      while (1)
      {
        uint64_t v11 = &result[v9];
        if (*((_DWORD *)a2 + 2) > *(_DWORD *)&result[v9 + 8]) {
          break;
        }
        v9 += 16;
        if (__CFADD__(v10++, 1)) {
          return result;
        }
      }
      uint64_t v13 = -v10;
      if (-v10 >= v7)
      {
        if (v10 == -1)
        {
          int v73 = &result[v9];
          long long v85 = *(_OWORD *)v73;
          uint64_t v74 = *(void *)a2;
          *((_DWORD *)v73 + 2) = *((_DWORD *)a2 + 2);
          *(void *)int v73 = v74;
          *((_DWORD *)a2 + 2) = DWORD2(v85);
          *(void *)a2 = v85;
          return result;
        }
        if (v10 > 0) {
          uint64_t v13 = 1 - v10;
        }
        uint64_t v23 = v13 >> 1;
        unint64_t v17 = &result[16 * (v13 >> 1) + v9];
        uint64_t v16 = a3;
        if (a3 != a2)
        {
          unint64_t v24 = (a3 - a2) >> 4;
          uint64_t v16 = a2;
          do
          {
            unint64_t v25 = v24 >> 1;
            uint64_t v26 = &v16[16 * (v24 >> 1)];
            unsigned int v27 = *((_DWORD *)v26 + 2);
            unint64_t v28 = v26 + 16;
            v24 += ~(v24 >> 1);
            if (v27 > *((_DWORD *)v17 + 2)) {
              uint64_t v16 = v28;
            }
            else {
              unint64_t v24 = v25;
            }
          }
          while (v24);
        }
        uint64_t v15 = (v16 - a2) >> 4;
      }
      else
      {
        if (v7 >= 0) {
          uint64_t v14 = v7;
        }
        else {
          uint64_t v14 = v7 + 1;
        }
        uint64_t v15 = v14 >> 1;
        uint64_t v16 = &a2[16 * (v14 >> 1)];
        unint64_t v17 = a2;
        if (v11 != a2)
        {
          unint64_t v18 = (a2 - result - v9) >> 4;
          unint64_t v17 = &result[v9];
          do
          {
            unint64_t v19 = v18 >> 1;
            __n128 v20 = &v17[16 * (v18 >> 1)];
            unsigned int v21 = *((_DWORD *)v20 + 2);
            uint64_t v22 = v20 + 16;
            v18 += ~(v18 >> 1);
            if (*((_DWORD *)v16 + 2) > v21) {
              unint64_t v18 = v19;
            }
            else {
              unint64_t v17 = v22;
            }
          }
          while (v18);
        }
        uint64_t v23 = (v17 - result - v9) >> 4;
      }
      unint64_t v29 = v16;
      if (v17 != a2)
      {
        unint64_t v29 = v17;
        if (a2 != v16)
        {
          if (v17 + 16 == a2)
          {
            long long v83 = *(_OWORD *)v17;
            int64_t v35 = v16 - a2;
            uint64_t v78 = v23;
            uint64_t v80 = a3;
            __n128 v36 = a6;
            uint64_t v37 = v15;
            uint64_t v38 = a7;
            memmove(v17, a2, v16 - a2 - 4);
            a7 = v38;
            uint64_t v23 = v78;
            a3 = v80;
            uint64_t v15 = v37;
            a6 = v36;
            unint64_t v29 = &v17[v35];
            *(void *)unint64_t v29 = v83;
            *((_DWORD *)v29 + 2) = DWORD2(v83);
          }
          else if (a2 + 16 == v16)
          {
            unint64_t v29 = v17 + 16;
            long long v84 = *((_OWORD *)v16 - 1);
            if (v16 - 16 != v17)
            {
              uint64_t v79 = v23;
              uint64_t v81 = a3;
              uint64_t v39 = a6;
              uint64_t v40 = v15;
              uint64_t v41 = a7;
              memmove(v17 + 16, v17, v16 - 16 - v17 - 4);
              a7 = v41;
              uint64_t v23 = v79;
              a3 = v81;
              uint64_t v15 = v40;
              a6 = v39;
            }
            *((_DWORD *)v17 + 2) = DWORD2(v84);
            *(void *)unint64_t v17 = v84;
          }
          else
          {
            uint64_t v30 = (a2 - v17) >> 4;
            if (v30 == (v16 - a2) >> 4)
            {
              uint64_t v31 = 0;
              do
              {
                unint64_t v32 = &a2[v31];
                uint64_t v33 = &v17[v31];
                long long v82 = *(_OWORD *)&v17[v31];
                uint64_t v34 = *(void *)&a2[v31];
                *((_DWORD *)v33 + 2) = *(_DWORD *)&a2[v31 + 8];
                *(void *)uint64_t v33 = v34;
                *((_DWORD *)v32 + 2) = DWORD2(v82);
                *(void *)unint64_t v32 = v82;
                if (&v17[v31 + 16] == a2) {
                  break;
                }
                v31 += 16;
              }
              while (v32 + 16 != v16);
              unint64_t v29 = a2;
            }
            else
            {
              uint64_t v42 = (v16 - a2) >> 4;
              uint64_t v43 = (a2 - v17) >> 4;
              do
              {
                uint64_t v44 = v43;
                uint64_t v43 = v42;
                uint64_t v42 = v44 % v42;
              }
              while (v42);
              if (v43)
              {
                unint64_t v45 = &v17[16 * v43];
                do
                {
                  long long v46 = *((_OWORD *)v45 - 1);
                  v45 -= 16;
                  uint64_t v47 = &v45[16 * v30];
                  uint64_t v48 = v45;
                  do
                  {
                    uint64_t v49 = v48;
                    uint64_t v48 = v47;
                    uint64_t v50 = *(void *)v47;
                    *((_DWORD *)v49 + 2) = *((_DWORD *)v48 + 2);
                    *(void *)uint64_t v49 = v50;
                    uint64_t v47 = &v17[16 * (v30 - ((v16 - v48) >> 4))];
                    if (v30 < (v16 - v48) >> 4) {
                      uint64_t v47 = &v48[16 * v30];
                    }
                  }
                  while (v47 != v45);
                  *((_DWORD *)v48 + 2) = DWORD2(v46);
                  *(void *)uint64_t v48 = v46;
                }
                while (v45 != v17);
              }
              unint64_t v29 = &v17[16 * ((v16 - a2) >> 4)];
            }
          }
        }
      }
      a4 = -(v23 + v10);
      uint64_t v51 = v7 - v15;
      if (v23 + v15 >= v7 - (v23 + v15) - v10)
      {
        uint64_t v56 = -(v23 + v10);
        uint64_t v57 = v15;
        uint64_t v58 = v51;
        uint64_t v59 = a6;
        uint64_t v60 = a7;
        sub_1CCE7AD28(v29, v16, a3, v56, v58);
        a7 = v60;
        a6 = v59;
        uint64_t v16 = v17;
        uint64_t v51 = v57;
        a4 = v23;
        a3 = v29;
      }
      else
      {
        uint64_t v52 = a3;
        uint64_t v53 = v23;
        uint64_t v54 = a6;
        uint64_t v55 = a7;
        sub_1CCE7AD28(v11, v17, v29, v53, v15);
        a7 = v55;
        a3 = v52;
        a6 = v54;
        uint64_t v11 = v29;
      }
      uint64_t v7 = v51;
      uint64_t result = v11;
      a2 = v16;
      if (!v51) {
        return result;
      }
    }
    if (a4 <= v7)
    {
      if (result != a2)
      {
        unint64_t v69 = 0;
        do
        {
          *(_OWORD *)&a6[v69] = *(_OWORD *)&result[v69];
          v69 += 16;
        }
        while (&result[v69] != a2);
        if (v69)
        {
          uint64_t v70 = a6;
          while (a2 != a3)
          {
            if (*((_DWORD *)a2 + 2) <= *((_DWORD *)v70 + 2))
            {
              uint64_t v72 = *(void *)v70;
              *((_DWORD *)result + 2) = *((_DWORD *)v70 + 2);
              *(void *)uint64_t result = v72;
              v70 += 16;
            }
            else
            {
              uint64_t v71 = *(void *)a2;
              *((_DWORD *)result + 2) = *((_DWORD *)a2 + 2);
              *(void *)uint64_t result = v71;
              a2 += 16;
            }
            result += 16;
            if (&a6[v69] == v70) {
              return result;
            }
          }
          return (char *)memmove(result, v70, a6 - v70 + v69 - 4);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v61 = 0;
      do
      {
        *(_OWORD *)&a6[v61] = *(_OWORD *)&a2[v61];
        v61 += 16;
      }
      while (&a2[v61] != a3);
      if (v61)
      {
        uint64_t v62 = &a6[v61];
        unint64_t v63 = a3 - 16;
        while (a2 != result)
        {
          unsigned int v64 = *((_DWORD *)v62 - 2);
          unsigned int v65 = *((_DWORD *)a2 - 2);
          BOOL v66 = v64 > v65;
          if (v64 <= v65) {
            uint64_t v67 = v62 - 16;
          }
          else {
            uint64_t v67 = a2 - 16;
          }
          if (v66) {
            a2 -= 16;
          }
          else {
            v62 -= 16;
          }
          uint64_t v68 = *(void *)v67;
          *((_DWORD *)v63 + 2) = *((_DWORD *)v67 + 2);
          *(void *)unint64_t v63 = v68;
          v63 -= 16;
          if (v62 == a6) {
            return result;
          }
        }
        if (v62 != a6)
        {
          unint64_t v75 = 0;
          do
          {
            uint64_t v76 = &v63[v75];
            uint64_t v77 = *(void *)&v62[v75 - 16];
            *((_DWORD *)v76 + 2) = *(_DWORD *)&v62[v75 - 8];
            *(void *)uint64_t v76 = v77;
            v75 -= 16;
          }
          while (&v62[v75] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CCE7B2AC(uint64_t ***a1, llvm::Type *a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  v124[2] = *MEMORY[0x1E4F143B8];
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    unsigned __int32 v8 = (llvm::Constant *)*a1;
    if (((*a1)[1] & 0xFE) == 0x12)
    {
      if (*(unsigned __int8 *)(**((void **)v8 + 2) + 8) >= 7u) {
        goto LABEL_5;
      }
    }
    else if (*((_DWORD *)*a1 + 2) > 6u)
    {
LABEL_5:
      NullValue = llvm::Constant::getNullValue(v8, a2, (const llvm::APFloat *)a3);
      uint64_t v11 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, NullValue, (llvm::Constant *)a1, v10);
      if (!v11)
      {
        int v12 = *(void ***)NullValue;
        if (*(void *)NullValue)
        {
          v124[0] = NullValue;
          v124[1] = a1;
          uint64_t v13 = **v12 + 1512;
          LODWORD(v118) = 15;
          int32x2_t v119 = v124;
          uint64_t v120 = 2;
          long long v121 = 0u;
          long long v122 = 0u;
          uint64_t v123 = 0;
          return sub_1CC56C20C(v13, (uint64_t)v12, (unsigned __int8 *)&v118);
        }
        else
        {
          return 0;
        }
      }
      return (uint64_t)v11;
    }
    return llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, (unsigned __int8 *)a1, 0, 0, a5);
  }
  uint64_t v14 = sub_1CCE6F0D0((uint64_t)a1, 13, 14);
  if (v14)
  {
    uint64_t v11 = (const llvm::detail::DoubleAPFloat *)v14;
    uint64_t v15 = (uint64_t *)(v14 - 64);
    uint64_t v16 = sub_1CCE7B2AC(*(void *)(v14 - 64), a2, a3);
    if (*v15)
    {
      **((void **)v11 - 6) = *((void *)v11 - 7);
      uint64_t v17 = *((void *)v11 - 7);
      if (v17) {
        *(void *)(v17 + 16) = *((void *)v11 - 6);
      }
    }
    *uint64_t v15 = v16;
    if (v16)
    {
      uint64_t v20 = *(void *)(v16 + 8);
      unint64_t v18 = (uint64_t **)(v16 + 8);
      uint64_t v19 = v20;
      *((void *)v11 - 7) = v20;
      if (v20) {
        *(void *)(v19 + 16) = (char *)v11 - 56;
      }
      *((void *)v11 - 6) = v18;
      __n128 *v18 = v15;
    }
    unsigned int v21 = (uint64_t *)((char *)v11 - 32);
    uint64_t v22 = sub_1CCE7B2AC(*((void *)v11 - 4), a2, a3);
    if (*((void *)v11 - 4))
    {
      **((void **)v11 - 2) = *((void *)v11 - 3);
      uint64_t v23 = *((void *)v11 - 3);
      if (v23) {
        *(void *)(v23 + 16) = *((void *)v11 - 2);
      }
    }
    *unsigned int v21 = v22;
    if (v22)
    {
      uint64_t v26 = *(void *)(v22 + 8);
      unint64_t v24 = (uint64_t **)(v22 + 8);
      uint64_t v25 = v26;
      *((void *)v11 - 3) = v26;
      if (v26) {
        *(void *)(v25 + 16) = (char *)v11 - 24;
      }
      *((void *)v11 - 2) = v24;
      uint64_t *v24 = v21;
    }
    if (*((unsigned char *)v11 + 16) == 41) {
      *((unsigned char *)v11 + 17) &= 0xF9u;
    }
    llvm::Instruction::moveBefore(v11, a2);
    unsigned int v27 = v11 >> 4;
    if ((*((unsigned char *)v11 + 23) & 0x10) == 0)
    {
      uint64_t v48 = 0;
      uint64_t v47 = &byte_1CFBCE98E;
LABEL_64:
      WORD4(v121) = 773;
      int32x2_t v118 = v47;
      int32x2_t v119 = v48;
      uint64_t v120 = (uint64_t)".neg";
      llvm::Value::setNameImpl(v11, &v118);
      if (*((unsigned char *)v11 + 16)) {
        goto LABEL_65;
      }
      if ((*((unsigned char *)v11 + 23) & 0x10) == 0) {
        goto LABEL_164;
      }
      uint64_t v104 = ***(void ***)v11;
      uint64_t v105 = *(void *)(v104 + 152);
      uint64_t v106 = *(unsigned int *)(v104 + 168);
      if (v106)
      {
        LODWORD(v107) = (v106 - 1) & (v27 ^ (v11 >> 9));
        uint64_t v108 = (const llvm::detail::DoubleAPFloat **)(v105 + 16 * v107);
        int v109 = *v108;
        if (*v108 == v11)
        {
LABEL_157:
          uint64_t v112 = v108[1];
          unint64_t v115 = *(void *)v112;
          unint64_t v113 = (char *)v112 + 16;
          unint64_t v114 = v115;
          if (v115 >= 5 && *(_DWORD *)v113 == *(_DWORD *)"llvm." && v113[4] == aLlvm_1[4])
          {
            *((_DWORD *)v11 + 8) |= 0x2000u;
            int v117 = llvm::Function::lookupIntrinsicID(v113, v114);
LABEL_165:
            *((_DWORD *)v11 + 9) = v117;
LABEL_65:
            int32x2_t v118 = (const char *)v11;
            int v50 = *(_DWORD *)(a3 + 16);
            if (v50)
            {
              int v51 = v50 - 1;
              unsigned int v52 = v51 & (v27 ^ (v11 >> 9));
              uint64_t v53 = (uint64_t *)(*(void *)a3 + 8 * v52);
              uint64_t v54 = (llvm::Value *)*v53;
              if (v11 != (const llvm::detail::DoubleAPFloat *)*v53)
              {
                uint64_t v55 = 0;
                int v56 = 1;
                while (v54 != (llvm::Value *)-4096)
                {
                  if (v55) {
                    BOOL v57 = 0;
                  }
                  else {
                    BOOL v57 = v54 == (llvm::Value *)-8192;
                  }
                  if (v57) {
                    uint64_t v55 = v53;
                  }
                  unsigned int v58 = v52 + v56++;
                  unsigned int v52 = v58 & v51;
                  uint64_t v53 = (uint64_t *)(*(void *)a3 + 8 * v52);
                  uint64_t v54 = (llvm::Value *)*v53;
                  if (v11 == (const llvm::detail::DoubleAPFloat *)*v53) {
                    return (uint64_t)v11;
                  }
                }
                goto LABEL_138;
              }
              return (uint64_t)v11;
            }
            goto LABEL_166;
          }
LABEL_164:
          int v117 = 0;
          *((_DWORD *)v11 + 8) &= ~0x2000u;
          goto LABEL_165;
        }
        int v110 = 1;
        while (v109 != (const llvm::detail::DoubleAPFloat *)-4096)
        {
          int v111 = v107 + v110++;
          uint64_t v107 = v111 & (v106 - 1);
          int v109 = *(const llvm::detail::DoubleAPFloat **)(v105 + 16 * v107);
          if (v109 == v11)
          {
            uint64_t v108 = (const llvm::detail::DoubleAPFloat **)(v105 + 16 * v107);
            goto LABEL_157;
          }
        }
      }
      uint64_t v108 = (const llvm::detail::DoubleAPFloat **)(v105 + 16 * v106);
      goto LABEL_157;
    }
    uint64_t v28 = ***(void ***)v11;
    uint64_t v29 = *(void *)(v28 + 152);
    uint64_t v30 = *(unsigned int *)(v28 + 168);
    if (v30)
    {
      LODWORD(v31) = (v30 - 1) & (v27 ^ (v11 >> 9));
      unint64_t v32 = (const llvm::detail::DoubleAPFloat **)(v29 + 16 * v31);
      uint64_t v33 = *v32;
      if (*v32 == v11)
      {
LABEL_63:
        long long v46 = v32[1];
        uint64_t v49 = *(void **)v46;
        uint64_t v47 = (char *)v46 + 16;
        uint64_t v48 = v49;
        goto LABEL_64;
      }
      int v34 = 1;
      while (v33 != (const llvm::detail::DoubleAPFloat *)-4096)
      {
        int v35 = v31 + v34++;
        uint64_t v31 = v35 & (v30 - 1);
        uint64_t v33 = *(const llvm::detail::DoubleAPFloat **)(v29 + 16 * v31);
        if (v33 == v11)
        {
          unint64_t v32 = (const llvm::detail::DoubleAPFloat **)(v29 + 16 * v31);
          goto LABEL_63;
        }
      }
    }
    unint64_t v32 = (const llvm::detail::DoubleAPFloat **)(v29 + 16 * v30);
    goto LABEL_63;
  }
  uint64_t v37 = a1[1];
  if (!v37) {
    goto LABEL_106;
  }
  while (1)
  {
    uint64_t v11 = (const llvm::detail::DoubleAPFloat *)v37[3];
    int v38 = *((unsigned __int8 *)v11 + 16);
    if (v38 == 5)
    {
      if (*((_WORD *)v11 + 9) == 15
        && (sub_1CC03F414((uint64_t)&v118, *((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))) & 1) != 0)
      {
        goto LABEL_52;
      }
    }
    else if (v38 == 43 && (sub_1CBF535C4((uint64_t)&v118, *((llvm::Constant **)v11 - 8)) & 1) != 0)
    {
      goto LABEL_52;
    }
    if (sub_1CB845E74((uint64_t)v11))
    {
      unsigned int v39 = *((unsigned __int8 *)v11 + 16);
      if (v39 <= 0x1B) {
        unsigned int v40 = *((unsigned __int16 *)v11 + 9);
      }
      else {
        unsigned int v40 = v39 - 28;
      }
      if (v40 == 12) {
        goto LABEL_52;
      }
      if (v40 == 16) {
        break;
      }
    }
LABEL_53:
    uint64_t v37 = (uint64_t **)v37[1];
    if (!v37) {
      goto LABEL_106;
    }
  }
  if ((*((unsigned char *)v11 + 17) & 0x10) != 0)
  {
    int v41 = *((_DWORD *)v11 + 5);
    if ((v41 & 0x40000000) != 0) {
      uint64_t v42 = (llvm::Constant **)*((void *)v11 - 1);
    }
    else {
      uint64_t v42 = (llvm::Constant **)((char *)v11 - 32 * (v41 & 0x7FFFFFF));
    }
    if (!sub_1CC0241FC((uint64_t)v124, *v42)) {
      goto LABEL_53;
    }
  }
  else
  {
    int v44 = *((_DWORD *)v11 + 5);
    if ((v44 & 0x40000000) != 0) {
      unint64_t v45 = (llvm::Constant **)*((void *)v11 - 1);
    }
    else {
      unint64_t v45 = (llvm::Constant **)((char *)v11 - 32 * (v44 & 0x7FFFFFF));
    }
    if (!sub_1CC02435C((uint64_t)v124, *v45)) {
      goto LABEL_53;
    }
  }
LABEL_52:
  uint64_t v43 = *(void *)(*((void *)v11 + 5) + 56);
  if (v43 != *(void *)(*((void *)a2 + 5) + 56)) {
    goto LABEL_53;
  }
  if (!a1 || (unsigned int v59 = *((unsigned __int8 *)a1 + 16), v59 < 0x1C))
  {
    uint64_t v61 = *(void *)(v43 + 80);
    if (v61) {
      uint64_t v62 = v61 - 24;
    }
    else {
      uint64_t v62 = 0;
    }
    uint64_t v63 = *(void *)(v62 + 48);
    goto LABEL_101;
  }
  if (v59 == 33) {
    uint64_t v60 = (uint64_t *)(*(a1 - 12) + 6);
  }
  else {
    uint64_t v60 = (uint64_t *)(a1 + 4);
  }
  uint64_t v63 = *v60;
  uint64_t v64 = v63 - 24;
  if (!v63) {
    uint64_t v64 = 0;
  }
  uint64_t v65 = *(void *)(v64 + 40) + 40;
  if (v63 != v65)
  {
    char v66 = 0;
    while (1)
    {
      uint64_t v67 = v63 - 24;
      if (!v63) {
        uint64_t v67 = 0;
      }
      int v68 = *(unsigned __int8 *)(v67 + 16);
      if ((v68 - 38) > 0x38 || ((1 << (v68 - 38)) & 0x100260000000001) == 0) {
        break;
      }
      if (v68 == 38) {
        char v66 = 1;
      }
      uint64_t v63 = *(void *)(v63 + 8);
      if (v63 == v65)
      {
        uint64_t v63 = v65;
        break;
      }
    }
    if (v66)
    {
LABEL_106:
      if ((*((unsigned char *)a1 + 23) & 0x10) == 0)
      {
        uint64_t v81 = 0;
        uint64_t v80 = &byte_1CFBCE98E;
LABEL_115:
        WORD4(v121) = 773;
        int32x2_t v118 = v80;
        int32x2_t v119 = v81;
        uint64_t v120 = (uint64_t)".neg";
        long long v83 = sub_1CCE705F4((llvm::BinaryOperator *)a1, (llvm::Value *)&v118, a2, (uint64_t)a2);
        uint64_t v11 = v83;
        int32x2_t v118 = (const char *)v83;
        int v84 = *(_DWORD *)(a3 + 16);
        if (v84)
        {
          int v85 = v84 - 1;
          unsigned int v86 = v85 & ((v83 >> 4) ^ (v83 >> 9));
          uint64_t v53 = (uint64_t *)(*(void *)a3 + 8 * v86);
          uint64_t v87 = *v53;
          if (v83 != (llvm::Value *)*v53)
          {
            uint64_t v55 = 0;
            int v88 = 1;
            while (v87 != -4096)
            {
              if (v55) {
                BOOL v89 = 0;
              }
              else {
                BOOL v89 = v87 == -8192;
              }
              if (v89) {
                uint64_t v55 = v53;
              }
              unsigned int v90 = v86 + v88++;
              unsigned int v86 = v90 & v85;
              uint64_t v53 = (uint64_t *)(*(void *)a3 + 8 * v86);
              uint64_t v87 = *v53;
              if (v83 == (llvm::Value *)*v53) {
                return (uint64_t)v11;
              }
            }
            goto LABEL_138;
          }
          return (uint64_t)v11;
        }
LABEL_166:
        uint64_t v98 = 0;
        goto LABEL_141;
      }
      uint64_t v71 = ***a1;
      uint64_t v72 = *(void *)(v71 + 152);
      uint64_t v73 = *(unsigned int *)(v71 + 168);
      if (v73)
      {
        LODWORD(v74) = (v73 - 1) & ((a1 >> 4) ^ (a1 >> 9));
        unint64_t v75 = (uint64_t ****)(v72 + 16 * v74);
        uint64_t v76 = *v75;
        if (*v75 == a1)
        {
LABEL_114:
          uint64_t v79 = v75[1];
          long long v82 = *v79;
          uint64_t v80 = (const char *)(v79 + 2);
          uint64_t v81 = v82;
          goto LABEL_115;
        }
        int v77 = 1;
        while (v76 != (uint64_t ***)-4096)
        {
          int v78 = v74 + v77++;
          uint64_t v74 = v78 & (v73 - 1);
          uint64_t v76 = *(uint64_t ****)(v72 + 16 * v74);
          if (v76 == a1)
          {
            unint64_t v75 = (uint64_t ****)(v72 + 16 * v74);
            goto LABEL_114;
          }
        }
      }
      unint64_t v75 = (uint64_t ****)(v72 + 16 * v73);
      goto LABEL_114;
    }
  }
LABEL_101:
  if (v63) {
    uint64_t v70 = (llvm::Instruction *)(v63 - 24);
  }
  else {
    uint64_t v70 = 0;
  }
  llvm::Instruction::moveBefore(v11, v70);
  if (*((unsigned char *)v11 + 16) == 43) {
    *((unsigned char *)v11 + 17) &= 0xF9u;
  }
  else {
    llvm::Instruction::andIRFlags((uint64_t)v11, (uint64_t)a2);
  }
  int32x2_t v118 = (const char *)v11;
  int v91 = *(_DWORD *)(a3 + 16);
  if (!v91) {
    goto LABEL_166;
  }
  int v92 = v91 - 1;
  unsigned int v93 = v92 & ((v11 >> 4) ^ (v11 >> 9));
  uint64_t v53 = (uint64_t *)(*(void *)a3 + 8 * v93);
  uint64_t v94 = *v53;
  if (v11 != (const llvm::detail::DoubleAPFloat *)*v53)
  {
    uint64_t v55 = 0;
    int v95 = 1;
    while (v94 != -4096)
    {
      if (v55) {
        BOOL v96 = 0;
      }
      else {
        BOOL v96 = v94 == -8192;
      }
      if (v96) {
        uint64_t v55 = v53;
      }
      unsigned int v97 = v93 + v95++;
      unsigned int v93 = v97 & v92;
      uint64_t v53 = (uint64_t *)(*(void *)a3 + 8 * v93);
      uint64_t v94 = *v53;
      if (v11 == (const llvm::detail::DoubleAPFloat *)*v53) {
        return (uint64_t)v11;
      }
    }
LABEL_138:
    if (v55) {
      uint64_t v98 = v55;
    }
    else {
      uint64_t v98 = v53;
    }
LABEL_141:
    *sub_1CCE7BF00(a3, (uint64_t *)&v118, v98) = (uint64_t)v11;
    uint64_t v99 = *(void *)(a3 + 40);
    uint64_t v100 = *(void *)(a3 + 32);
    if (v99 == v100) {
      uint64_t v101 = 0;
    }
    else {
      uint64_t v101 = ((v99 - v100) << 6) - 1;
    }
    uint64_t v102 = *(void *)(a3 + 64);
    unint64_t v103 = v102 + *(void *)(a3 + 56);
    if (v101 == v103)
    {
      sub_1CCE7C1C0(a3 + 24);
      uint64_t v100 = *(void *)(a3 + 32);
      uint64_t v102 = *(void *)(a3 + 64);
      unint64_t v103 = *(void *)(a3 + 56) + v102;
    }
    *(void *)(*(void *)(v100 + ((v103 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v103 & 0x1FF)) = v11;
    *(void *)(a3 + 64) = v102 + 1;
  }
  return (uint64_t)v11;
}

void sub_1CCE7BB28()
{
}

void sub_1CCE7BB64(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2640728;
  sub_1CCCB6DC0((void *)a1 + 4);

  llvm::Pass::~Pass(a1);
}

void sub_1CCE7BBB8(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2640728;
  sub_1CCCB6DC0((void *)a1 + 4);
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE7BC20(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, v3, (uint64_t)llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::BasicAAWrapperPass::ID);

  sub_1CB843600(a2, v3, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

BOOL sub_1CCE7BCC0(int32x2_t *a1, llvm::LLVMContextImpl ****a2)
{
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2)) {
    return 0;
  }
  v26[0] = 0;
  v26[1] = 0;
  int v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v33 = 0;
  llvm::ReassociatePass::run(a1 + 4, (llvm::Function *)a2, (uint64_t)&v18);
  if (v24 == v25)
  {
    uint64_t v5 = v18;
    if (v19 == v18)
    {
      unsigned int v6 = v21;
      uint64_t v7 = (void **)&v19[8 * v21];
      if (v21)
      {
        uint64_t v8 = 0;
        while (*(_UNKNOWN **)&v19[v8] != &llvm::PreservedAnalyses::AllAnalysesKey)
        {
          v8 += 8;
          if (8 * v21 == v8) {
            goto LABEL_23;
          }
        }
        uint64_t v7 = (void **)&v19[v8];
      }
LABEL_23:
      uint64_t v5 = v19;
      goto LABEL_30;
    }
    unsigned int v9 = v20 - 1;
    unsigned int v10 = (v20 - 1) & ((&llvm::PreservedAnalyses::AllAnalysesKey >> 4) ^ (&llvm::PreservedAnalyses::AllAnalysesKey >> 9));
    uint64_t v7 = (void **)&v19[8 * v10];
    uint64_t v11 = *v7;
    if (*v7 == (void *)-1)
    {
      int v12 = 0;
LABEL_25:
      if (v12) {
        uint64_t v7 = v12;
      }
      if (*v7 != &llvm::PreservedAnalyses::AllAnalysesKey)
      {
        unsigned int v6 = v21;
        uint64_t v7 = (void **)&v19[8 * v20];
LABEL_30:
        if (v19 == v5) {
          unsigned int v16 = v6;
        }
        else {
          unsigned int v16 = v20;
        }
        BOOL v4 = v7 == (void **)&v19[8 * v16];
        goto LABEL_34;
      }
    }
    else
    {
      int v12 = 0;
      int v13 = 1;
      while (v11 != &llvm::PreservedAnalyses::AllAnalysesKey)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == (void *)-2;
        }
        if (v14) {
          int v12 = v7;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & v9;
        uint64_t v7 = (void **)&v19[8 * (v15 & v9)];
        uint64_t v11 = *v7;
        if (*v7 == (void *)-1) {
          goto LABEL_25;
        }
      }
    }
    unsigned int v6 = v21;
    goto LABEL_30;
  }
  BOOL v4 = 1;
LABEL_34:
  if (v23 != v22) {
    free(v23);
  }
  if (v19 != v18) {
    free(v19);
  }
  MEMORY[0x1D25D9CD0](0, 8);
  MEMORY[0x1D25D9CD0](0, 8);
  sub_1CBF54128((unsigned int *)v26);
  MEMORY[0x1D25D9CD0](v26[0], 8);
  return v4;
}

uint64_t sub_1CCE7BE84(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unsigned int v6 = (void *)(result + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unsigned int v6 = (void *)(result + 8 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_14;
        }
      }
      if (v8) {
        unsigned int v6 = v8;
      }
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
LABEL_14:
  *a4 = v6;
  return result;
}

uint64_t *sub_1CCE7BF00(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1CCE7C034(a1, 2 * v6);
    unsigned int v16 = 0;
    sub_1CCE7BE84(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
    a3 = v16;
    goto LABEL_3;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
LABEL_3:
    uint64_t v7 = *a3;
    goto LABEL_4;
  }
  sub_1CCE7C034(a1, v6);
  uint64_t v7 = *a2;
  int v9 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(void *)a1 + 8 * v10);
  uint64_t v11 = *a3;
  if (*a2 != *a3)
  {
    int v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        int v12 = a3;
      }
      unsigned int v15 = v10 + v13++;
      unsigned int v10 = v15 & v9;
      a3 = (uint64_t *)(*(void *)a1 + 8 * v10);
      uint64_t v11 = *a3;
      if (v7 == *a3) {
        goto LABEL_4;
      }
    }
    if (v12) {
      a3 = v12;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CCE7C034(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      int v12 = result;
      do
      {
        *v12++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if (v3)
    {
      int v13 = 0;
      int v14 = v10 - 1;
      unsigned int v15 = v4;
      do
      {
        uint64_t v16 = *v15;
        if (*v15 != -8192 && v16 != -4096)
        {
          unsigned int v17 = ((v16 >> 4) ^ (v16 >> 9)) & v14;
          unint64_t v18 = &result[v17];
          uint64_t v19 = *v18;
          if (v16 != *v18)
          {
            unsigned int v20 = 0;
            int v21 = 1;
            while (v19 != -4096)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -8192;
              }
              if (v22) {
                unsigned int v20 = v18;
              }
              unsigned int v23 = v17 + v21++;
              unsigned int v17 = v23 & v14;
              unint64_t v18 = &result[v23 & v14];
              uint64_t v19 = *v18;
              if (v16 == *v18) {
                goto LABEL_26;
              }
            }
            if (v20) {
              unint64_t v18 = v20;
            }
          }
LABEL_26:
          void *v18 = v16;
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        ++v15;
      }
      while (v15 != &v4[v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v24 = *(unsigned int *)(a1 + 16);
  if (v24)
  {
    uint64_t v25 = 8 * v24;
    do
    {
      *result++ = -4096;
      v25 -= 8;
    }
    while (v25);
  }
  return result;
}

void sub_1CCE7C1C0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unint64_t v5 = *(void **)(a1 + 8);
    unint64_t v6 = *(char **)(a1 + 16);
    uint64_t v9 = *v5;
    int v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    *(void *)(a1 + 8) = v7;
    if (v6 == *(char **)(a1 + 24))
    {
      uint64_t v10 = *(char **)a1;
      if ((unint64_t)v7 <= *(void *)a1)
      {
        if (v6 == v10) {
          unint64_t v17 = 1;
        }
        else {
          unint64_t v17 = (v6 - v10) >> 2;
        }
        if (v17 >> 61) {
          goto LABEL_35;
        }
        unint64_t v18 = (char *)operator new(8 * v17);
        uint64_t v19 = &v18[8 * (v17 >> 2)];
        uint64_t v21 = v6 - v7;
        BOOL v20 = v6 == v7;
        unint64_t v6 = v19;
        if (!v20)
        {
          unint64_t v6 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v22 = 8 * (v21 >> 3);
          unsigned int v23 = &v18[8 * (v17 >> 2)];
          do
          {
            uint64_t v24 = *(void *)v7;
            v7 += 8;
            *(void *)unsigned int v23 = v24;
            v23 += 8;
            v22 -= 8;
          }
          while (v22);
        }
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v6;
        *(void *)(a1 + 24) = &v18[8 * v17];
        if (v10)
        {
          operator delete(v10);
          unint64_t v6 = *(char **)(a1 + 16);
        }
      }
      else
      {
        uint64_t v11 = (uint64_t)&v7[-*(void *)a1] >> 3;
        if (v11 >= -1) {
          uint64_t v12 = v11 + 1;
        }
        else {
          uint64_t v12 = v11 + 2;
        }
        uint64_t v13 = -(v12 >> 1);
        uint64_t v14 = v12 >> 1;
        unsigned int v15 = &v7[-8 * v14];
        size_t v16 = v6 - v7;
        if (v16)
        {
          memmove(&v7[-8 * v14], v7, v16);
          int v7 = *(char **)(a1 + 8);
        }
        unint64_t v6 = &v15[v16];
        *(void *)(a1 + 8) = &v7[8 * v13];
        *(void *)(a1 + 16) = v6;
      }
    }
    *(void *)unint64_t v6 = v8;
    *(void *)(a1 + 16) += 8;
    return;
  }
  uint64_t v25 = *(void *)(a1 + 16);
  unint64_t v26 = v25 - *(void *)(a1 + 8);
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = v27 - *(void *)a1;
  if (v26 < v28)
  {
    if (v27 == v25)
    {
      *(void *)&long long v35 = operator new(0x1000uLL);
      sub_1CD4A5618((const void **)a1, &v35);
      int v33 = *(void **)(a1 + 8);
      *(void *)&long long v35 = *v33;
      *(void *)(a1 + 8) = v33 + 1;
      sub_1CB904CD8(a1, &v35);
    }
    else
    {
      *(void *)&long long v35 = operator new(0x1000uLL);
      sub_1CD4A54E0(a1, &v35);
    }
    return;
  }
  if (v27 == *(void *)a1) {
    unint64_t v29 = 1;
  }
  else {
    unint64_t v29 = v28 >> 2;
  }
  uint64_t v37 = a1 + 24;
  if (v29 >> 61) {
LABEL_35:
  }
    sub_1CB833614();
  *(void *)&long long v35 = operator new(8 * v29);
  *((void *)&v35 + 1) = v35 + v26;
  *(void *)&long long v36 = v35 + v26;
  *((void *)&v36 + 1) = v35 + 8 * v29;
  int v34 = operator new(0x1000uLL);
  sub_1CD4A54E0((uint64_t)&v35, &v34);
  for (uint64_t i = *(void **)(a1 + 16); i != *(void **)(a1 + 8); sub_1CD4A5618((const void **)&v35, i))
    --i;
  uint64_t v31 = *(char **)a1;
  long long v32 = v36;
  *(_OWORD *)a1 = v35;
  *(_OWORD *)(a1 + 16) = v32;
  if (v31) {
    operator delete(v31);
  }
}

void sub_1CCE7C3F8(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = malloc_type_malloc(40 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  int v7 = v6;
  uint64_t v8 = *(char **)a1;
  int v9 = *(_DWORD *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = &v8[40 * v9];
    uint64_t v11 = v7;
    do
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v8;
      v11[6] = *((_DWORD *)v8 + 6);
      *((void *)v11 + 2) = *((void *)v8 + 2);
      *((_DWORD *)v8 + 6) = 0;
      int v12 = *((_DWORD *)v8 + 8);
      *((unsigned char *)v11 + 36) = v8[36];
      v11[8] = v12;
      v8 += 40;
      v11 += 10;
    }
    while (v8 != v10);
    uint64_t v8 = *(char **)a1;
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (v13)
    {
      uint64_t v14 = 40 * v13;
      do
      {
        if (*(_DWORD *)&v8[v14 - 16] >= 0x41u)
        {
          uint64_t v15 = *(void *)&v8[v14 - 24];
          if (v15)
          {
            uint64_t v16 = v14;
            unint64_t v17 = v8;
            MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
            uint64_t v14 = v16;
            uint64_t v8 = v17;
          }
        }
        v14 -= 40;
      }
      while (v14);
      uint64_t v8 = *(char **)a1;
    }
  }
  if (v8 != (char *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

char *sub_1CCE7C55C(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    unint64_t v6 = result;
    if (a3 == 2)
    {
      uint64_t v7 = *((void *)a2 - 1);
      uint64_t v8 = *(void *)result;
      if (*(_DWORD *)(v7 + 32) < *(_DWORD *)(*(void *)result + 32))
      {
        *(void *)uint64_t result = v7;
        *((void *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      BOOL v20 = (char *)a4;
      unint64_t v21 = a3 >> 1;
      uint64_t v22 = &result[8 * (a3 >> 1)];
      unint64_t v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1CCE7C7A4((uint64_t)result, v22, v23, a4);
        uint64_t v24 = (uint64_t *)&v20[8 * v21];
        uint64_t result = (char *)sub_1CCE7C7A4((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24);
        uint64_t v25 = &v20[8 * a3];
        unint64_t v26 = v24;
        while (v26 != (uint64_t *)v25)
        {
          uint64_t v27 = v26;
          uint64_t v28 = *v26;
          uint64_t v29 = *(void *)v20;
          unsigned int v30 = *(_DWORD *)(v28 + 32);
          unsigned int v31 = *(_DWORD *)(*(void *)v20 + 32);
          if (v30 < v31) {
            uint64_t v29 = v28;
          }
          v20 += 8 * (v30 >= v31);
          unint64_t v26 = &v27[v30 < v31];
          *(void *)unint64_t v6 = v29;
          v6 += 8;
          if (v20 == (char *)v24)
          {
            if (v26 != (uint64_t *)v25)
            {
              uint64_t v32 = 0;
              if (v30 < v31) {
                char v33 = 1;
              }
              else {
                char v33 = 2;
              }
              int v34 = &v27[v33 & 1];
              do
              {
                *(void *)&v6[v32 * 8] = v34[v32];
                ++v32;
              }
              while (&v34[v32] != (uint64_t *)v25);
            }
            return result;
          }
        }
        if (v20 != (char *)v24)
        {
          uint64_t v35 = 0;
          do
          {
            *(void *)&v6[v35] = *(void *)&v20[v35];
            v35 += 8;
          }
          while (&v20[v35] != (char *)v24);
        }
      }
      else
      {
        sub_1CCE7C55C(result, v22, v23, a4, a5);
        sub_1CCE7C55C(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v20, a5);
        return sub_1CCE7C9A4(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v20, a5);
      }
    }
    else if (result != a2)
    {
      uint64_t v10 = result + 8;
      if (result + 8 != a2)
      {
        uint64_t v11 = 8;
        int v12 = result;
        do
        {
          uint64_t v14 = *(void *)v12;
          uint64_t v13 = *((void *)v12 + 1);
          int v12 = v10;
          unsigned int v15 = *(_DWORD *)(v13 + 32);
          if (v15 < *(_DWORD *)(v14 + 32))
          {
            uint64_t v16 = v11;
            while (1)
            {
              *(void *)&result[v16] = v14;
              uint64_t v17 = v16 - 8;
              if (v16 == 8) {
                break;
              }
              uint64_t v14 = *(void *)&result[v16 - 16];
              v16 -= 8;
              if (v15 >= *(_DWORD *)(v14 + 32))
              {
                unint64_t v18 = &result[v17];
                goto LABEL_15;
              }
            }
            unint64_t v18 = result;
LABEL_15:
            *(void *)unint64_t v18 = v13;
          }
          uint64_t v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1CCE7C7A4(uint64_t result, void *a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      uint64_t *v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *(a2 - 1);
      unsigned int v9 = *(_DWORD *)(v8 + 32);
      unsigned int v10 = *(_DWORD *)(*(void *)result + 32);
      if (v9 >= v10) {
        uint64_t v8 = *(void *)result;
      }
      *a4 = v8;
      unint64_t v4 = a4 + 1;
      if (v9 >= v10) {
        uint64_t v6 = (uint64_t)(a2 - 1);
      }
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v20 = result + 8 * (a3 >> 1);
      sub_1CCE7C55C(result, v20, a3 >> 1, a4, a3 >> 1);
      uint64_t result = sub_1CCE7C55C(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v21 = (void *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        uint64_t v22 = v21;
        uint64_t v23 = *v21;
        uint64_t v24 = *(void *)v6;
        unsigned int v25 = *(_DWORD *)(v23 + 32);
        unsigned int v26 = *(_DWORD *)(*(void *)v6 + 32);
        if (v25 < v26) {
          uint64_t v24 = v23;
        }
        unint64_t v21 = &v22[v25 < v26];
        v6 += 8 * (v25 >= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            uint64_t v27 = 0;
            uint64_t v28 = &v22[v25 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        uint64_t v29 = 0;
        do
        {
          v4[v29] = *(void *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((void *)result != a2)
    {
      uint64_t v11 = result + 8;
      *a4 = *(void *)result;
      if ((void *)(result + 8) != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a4;
        uint64_t v14 = a4;
        do
        {
          uint64_t v16 = *v14++;
          uint64_t v15 = v16;
          if (*(_DWORD *)(*(void *)v11 + 32) >= *(_DWORD *)(v16 + 32))
          {
            *uint64_t v14 = *(void *)v11;
          }
          else
          {
            v13[1] = v15;
            uint64_t v17 = a4;
            if (v13 != a4)
            {
              uint64_t v18 = v12;
              while (1)
              {
                uint64_t v17 = (uint64_t *)((char *)a4 + v18);
                uint64_t v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(_DWORD *)(*(void *)v11 + 32) >= *(_DWORD *)(v19 + 32)) {
                  break;
                }
                uint64_t *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  uint64_t v17 = a4;
                  break;
                }
              }
            }
            uint64_t *v17 = *(void *)v11;
          }
          v11 += 8;
          v12 += 8;
          uint64_t v13 = v14;
        }
        while ((void *)v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1CCE7C9A4(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v11 = result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return result;
      }
      while (1)
      {
        uint64_t v12 = *(void *)v11;
        if (*(_DWORD *)(*(void *)a2 + 32) < *(_DWORD *)(*(void *)v11 + 32)) {
          break;
        }
        v11 += 8;
        if (!--a4) {
          return result;
        }
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *(void *)uint64_t v11 = *(void *)a2;
          *(void *)a2 = v12;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v23 = a4;
        }
        else {
          uint64_t v23 = a4 + 1;
        }
        uint64_t v22 = v23 >> 1;
        uint64_t v16 = &v11[8 * (v23 >> 1)];
        uint64_t v15 = a3;
        if (a3 != a2)
        {
          unint64_t v24 = (a3 - a2) >> 3;
          uint64_t v15 = a2;
          do
          {
            unint64_t v25 = v24 >> 1;
            unsigned int v26 = &v15[8 * (v24 >> 1)];
            uint64_t v28 = *(void *)v26;
            uint64_t v27 = v26 + 8;
            v24 += ~(v24 >> 1);
            if (*(_DWORD *)(v28 + 32) < *(_DWORD *)(*(void *)v16 + 32)) {
              uint64_t v15 = v27;
            }
            else {
              unint64_t v24 = v25;
            }
          }
          while (v24);
        }
        uint64_t v14 = (v15 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v13 = v8;
        }
        else {
          uint64_t v13 = v8 + 1;
        }
        uint64_t v14 = v13 >> 1;
        uint64_t v15 = &a2[8 * (v13 >> 1)];
        uint64_t v16 = a2;
        if (v11 != a2)
        {
          unint64_t v17 = (a2 - v11) >> 3;
          uint64_t v16 = v11;
          do
          {
            unint64_t v18 = v17 >> 1;
            uint64_t v19 = &v16[8 * (v17 >> 1)];
            uint64_t v21 = *(void *)v19;
            unint64_t v20 = v19 + 8;
            v17 += ~(v17 >> 1);
            if (*(_DWORD *)(*(void *)v15 + 32) < *(_DWORD *)(v21 + 32)) {
              unint64_t v17 = v18;
            }
            else {
              uint64_t v16 = v20;
            }
          }
          while (v17);
        }
        uint64_t v22 = (v16 - v11) >> 3;
      }
      uint64_t v29 = v15;
      if (v16 != a2)
      {
        uint64_t v29 = v16;
        if (a2 != v15)
        {
          if (v16 + 8 == a2)
          {
            uint64_t v69 = *(void *)v16;
            uint64_t v71 = a3;
            uint64_t v36 = v15 - a2;
            uint64_t v73 = a6;
            memmove(v16, a2, v15 - a2);
            a3 = v71;
            a6 = v73;
            uint64_t v29 = &v16[v36];
            *(void *)uint64_t v29 = v69;
          }
          else if (a2 + 8 == v15)
          {
            uint64_t v37 = *((void *)v15 - 1);
            uint64_t v29 = v16 + 8;
            if (v15 - 8 != v16)
            {
              uint64_t v72 = a3;
              uint64_t v74 = a6;
              uint64_t v70 = *((void *)v15 - 1);
              memmove(v16 + 8, v16, v15 - 8 - v16);
              uint64_t v37 = v70;
              a3 = v72;
              a6 = v74;
            }
            *(void *)uint64_t v16 = v37;
          }
          else
          {
            uint64_t v30 = (a2 - v16) >> 3;
            if (v30 == (v15 - a2) >> 3)
            {
              uint64_t v31 = 0;
              do
              {
                uint64_t v32 = *(void *)&v16[v31];
                *(void *)&v16[v31] = *(void *)&a2[v31];
                uint64_t v33 = (uint64_t)&v16[v31 + 8];
                *(void *)&a2[v31] = v32;
                uint64_t v34 = (uint64_t)&a2[v31 + 8];
                v31 += 8;
              }
              while ((char *)v33 != a2 && v34 != (void)v15);
              uint64_t v29 = a2;
            }
            else
            {
              uint64_t v38 = (v15 - a2) >> 3;
              uint64_t v39 = (a2 - v16) >> 3;
              do
              {
                uint64_t v40 = v39;
                uint64_t v39 = v38;
                uint64_t v38 = v40 % v38;
              }
              while (v38);
              if (v39)
              {
                int v41 = &v16[8 * v39];
                do
                {
                  uint64_t v43 = *((void *)v41 - 1);
                  v41 -= 8;
                  uint64_t v42 = v43;
                  int v44 = &v41[8 * v30];
                  unint64_t v45 = v41;
                  do
                  {
                    long long v46 = v45;
                    unint64_t v45 = v44;
                    *(void *)long long v46 = *(void *)v44;
                    BOOL v47 = __OFSUB__(v30, (v15 - v44) >> 3);
                    uint64_t v49 = v30 - ((v15 - v44) >> 3);
                    char v48 = (v49 < 0) ^ v47;
                    int v44 = &v16[8 * v49];
                    if (v48) {
                      int v44 = &v45[8 * v30];
                    }
                  }
                  while (v44 != v41);
                  *(void *)unint64_t v45 = v42;
                }
                while (v41 != v16);
              }
              uint64_t v29 = &v16[8 * ((v15 - a2) >> 3)];
            }
          }
        }
      }
      a4 -= v22;
      v8 -= v14;
      if (v22 + v14 >= a4 + v8)
      {
        uint64_t v54 = v8;
        uint64_t v55 = a6;
        uint64_t result = (char *)sub_1CCE7C9A4(v29, v15, a3, a4, v54, a6, a7);
        a6 = v55;
        uint64_t v15 = v16;
        uint64_t v8 = v14;
        a4 = v22;
        a3 = v29;
      }
      else
      {
        int v50 = v11;
        int v51 = v16;
        unsigned int v52 = a6;
        uint64_t v53 = a3;
        uint64_t result = (char *)sub_1CCE7C9A4(v50, v51, v29, v22, v14, a6, a7);
        a3 = v53;
        a6 = v52;
        uint64_t v11 = v29;
      }
      a2 = v15;
      if (!v8) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        uint64_t v60 = 0;
        do
        {
          *(void *)&a6[v60] = *(void *)&v11[v60];
          v60 += 8;
        }
        while (&v11[v60] != a2);
        if (v60)
        {
          uint64_t v61 = a6;
          while (a2 != a3)
          {
            uint64_t v62 = *(void *)a2;
            unsigned int v63 = *(_DWORD *)(*(void *)a2 + 32);
            unsigned int v64 = *(_DWORD *)(*(void *)v61 + 32);
            BOOL v65 = v63 >= v64;
            BOOL v66 = v63 < v64;
            unsigned int v67 = v65;
            if (v65) {
              uint64_t v62 = *(void *)v61;
            }
            v61 += 8 * v67;
            a2 += 8 * v66;
            *(void *)uint64_t v11 = v62;
            v11 += 8;
            if (&a6[v60] == v61) {
              return result;
            }
          }
          return (char *)memmove(v11, v61, a6 - v61 + v60);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v56 = 0;
      do
      {
        *(void *)&a6[v56] = *(void *)&a2[v56];
        v56 += 8;
      }
      while (&a2[v56] != a3);
      if (v56)
      {
        BOOL v57 = &a6[v56];
        unsigned int v58 = a3 - 8;
        while (a2 != v11)
        {
          uint64_t v59 = *((void *)v57 - 1);
          if (*(_DWORD *)(v59 + 32) >= *(_DWORD *)(*((void *)a2 - 1) + 32))
          {
            v57 -= 8;
          }
          else
          {
            uint64_t v59 = *((void *)a2 - 1);
            a2 -= 8;
          }
          *(void *)unsigned int v58 = v59;
          v58 -= 8;
          if (v57 == a6) {
            return result;
          }
        }
        if (v57 != a6)
        {
          uint64_t v68 = 0;
          do
          {
            *(void *)&v58[v68] = *(void *)&v57[v68 - 8];
            v68 -= 8;
          }
          while (&v57[v68] != a6);
        }
      }
    }
  }
  return result;
}

__n128 sub_1CCE7CE4C(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned int *)a1 + 2);
  if (*a1 + 16 * v6 == a2)
  {
    if (v6 >= *((_DWORD *)a1 + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = *a3;
    *(__n128 *)(v5 + 16 * v6) = *a3;
    ++*((_DWORD *)a1 + 2);
  }
  else
  {
    if (v6 >= *((_DWORD *)a1 + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = (__n128 *)(v5 + 16 * ((a2 - v5) >> 4));
    *(_OWORD *)(v5 + 16 * v6) = *(_OWORD *)(v5 + 16 * v6 - 16);
    uint64_t v8 = *((unsigned int *)a1 + 2);
    uint64_t v9 = *a1 + 16 * v8 - 16;
    if ((__n128 *)v9 != v7)
    {
      memmove(&v7[1], v7, v9 - (void)v7);
      LODWORD(v8) = *((_DWORD *)a1 + 2);
    }
    *((_DWORD *)a1 + 2) = v8 + 1;
    __n128 result = *a3;
    *uint64_t v7 = *a3;
  }
  return result;
}

void *sub_1CCE7CF5C(void *a1, uint64_t *a2)
{
  unint64_t v3 = a1[4];
  unint64_t v4 = v3 >> 9;
  uint64_t v5 = a1[1];
  uint64_t v6 = (void *)(v5 + 8 * (v3 >> 9));
  if (a1[2] != v5)
  {
    uint64_t v7 = *(void *)(v5 + 8 * v4);
    uint64_t v8 = (void *)(v7 + 8 * (a1[4] & 0x1FFLL));
    unint64_t v9 = a1[5] + v3;
    __n128 result = (void *)(v5 + 8 * (v9 >> 9));
    uint64_t v11 = *result + 8 * (v9 & 0x1FF);
    if (v4 != v9 >> 9) {
      goto LABEL_13;
    }
    if (v8 == (void *)v11) {
      goto LABEL_27;
    }
    uint64_t v12 = *a2;
    while (*v8 != v12)
    {
      if (++v8 == (void *)v11) {
        goto LABEL_10;
      }
    }
    uint64_t v11 = (uint64_t)v8;
    if (!v5) {
      return 0;
    }
LABEL_11:
    uint64_t v8 = (void *)v11;
LABEL_27:
    __n128 result = v6;
    if ((void *)(*v6 + 4096) != v8) {
      return result;
    }
    return ++v6;
  }
  unint64_t v13 = a1[5] + v3;
  if (v4 == v13 >> 9)
  {
    uint64_t v11 = 0;
LABEL_10:
    if (!v5) {
      return 0;
    }
    goto LABEL_11;
  }
  uint64_t v8 = 0;
  uint64_t v11 = 0;
  __n128 result = (void *)(v5 + 8 * (v13 >> 9));
  uint64_t v7 = *v6;
  do
  {
LABEL_13:
    if (*v8 == *a2) {
      return v6;
    }
    ++v8;
  }
  while (v8 != (void *)(v7 + 4096));
  uint64_t v14 = v6 + 1;
  if (v6 + 1 != result)
  {
LABEL_16:
    uint64_t v15 = 0;
    uint64_t v16 = v6;
    uint64_t v6 = v14;
    while (*(void *)(v16[1] + v15) != *a2)
    {
      v15 += 8;
      if (v15 == 4096)
      {
        ++v14;
        if (v6 + 1 != result) {
          goto LABEL_16;
        }
        goto LABEL_20;
      }
    }
    return v6;
  }
LABEL_20:
  unint64_t v17 = (void *)*result;
  if (*result != v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a2;
    do
    {
      if (*v17 == v19) {
        break;
      }
      ++v18;
      ++v17;
    }
    while (v17 != (void *)v11);
    if (v18 == 512)
    {
      v6 += 2;
      return v6;
    }
  }
  return result;
}

void sub_1CCE7D110(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = (char **)(v5 + 8 * (v4 >> 9));
  if (v6 == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (uint64_t)&(*v7)[8 * (*(void *)(a1 + 32) & 0x1FFLL)];
  }
  if (a3 == v8)
  {
    unint64_t v9 = *v7;
LABEL_5:
    unsigned int v10 = (char *)v8;
    uint64_t v11 = (char **)(v5 + 8 * (v4 >> 9));
LABEL_6:
    uint64_t v12 = (v10 - v9) >> 3;
    if (v10 - v9 < -7)
    {
      BOOL v40 = v12 > 510;
      uint64_t v41 = 510 - v12;
      uint64_t v42 = 1021 - v12;
      if (!v40) {
        uint64_t v42 = v41;
      }
      uint64_t v14 = (uint64_t *)&v11[-(v42 >> 9)];
      uint64_t v43 = v41 & 0x1FF;
      uint64_t v45 = -v41;
      BOOL v44 = v45 < 0;
      uint64_t v46 = v45 & 0x1FF;
      if (v44) {
        uint64_t v47 = v43;
      }
      else {
        uint64_t v47 = -v46;
      }
      uint64_t v15 = *v14 + 8 * (511 - v47);
    }
    else
    {
      unint64_t v13 = v12 + 1;
      uint64_t v14 = (uint64_t *)&v11[v13 >> 9];
      uint64_t v15 = *v14 + 8 * (v13 & 0x1FF);
    }
    if (v7 == v11)
    {
      uint64_t v19 = v8;
      uint64_t v18 = (uint64_t)v10;
    }
    else
    {
      sub_1CCE7D430(&v55, (uint64_t)v9, (uint64_t)v10, v14, v15);
      uint64_t v14 = v56;
      uint64_t v15 = (uint64_t)v57;
      uint64_t v16 = (uint64_t *)(v11 - 1);
      while (v16 != (uint64_t *)v7)
      {
        uint64_t v17 = *v16--;
        sub_1CCE7D430(&v55, v17, v17 + 4096, v14, v15);
        uint64_t v14 = v56;
        uint64_t v15 = (uint64_t)v57;
      }
      uint64_t v18 = (uint64_t)(*v7 + 4096);
      uint64_t v19 = v8;
    }
    sub_1CCE7D430(&v55, v19, v18, v14, v15);
    int64x2_t v20 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1CFAC6350);
    *(int64x2_t *)(a1 + 32) = v20;
    if (v20.i64[0] >= 0x400uLL)
    {
      operator delete(**(void ***)(a1 + 8));
      *(void *)(a1 + 8) += 8;
      *(void *)(a1 + 32) -= 512;
    }
    return;
  }
  uint64_t v21 = ((a3 - *(void *)a2) >> 3) + ((a2 - (char *)v7) << 6);
  unint64_t v9 = *v7;
  uint64_t v22 = v8 - (void)*v7;
  unint64_t v23 = v21 - (v22 >> 3);
  if (v21 == v22 >> 3) {
    goto LABEL_5;
  }
  if (v21 < 1)
  {
    unint64_t v48 = 511 - v21;
    uint64_t v11 = &v7[-(v48 >> 9)];
    unint64_t v9 = *v11;
    uint64_t v24 = ~v48 & 0x1FFLL;
  }
  else
  {
    uint64_t v11 = &v7[(unint64_t)v21 >> 9];
    unint64_t v9 = *v11;
    uint64_t v24 = v21 & 0x1FF;
  }
  unsigned int v10 = &v9[8 * v24];
  uint64_t v25 = *(void *)(a1 + 40);
  if (v23 <= (unint64_t)(v25 - 1) >> 1) {
    goto LABEL_6;
  }
  uint64_t v26 = (v10 - v9) >> 3;
  if (v10 - v9 < -7)
  {
    BOOL v40 = v26 > 510;
    uint64_t v49 = 510 - v26;
    uint64_t v50 = 1021 - v26;
    if (!v40) {
      uint64_t v50 = v49;
    }
    uint64_t v28 = &v11[-(v50 >> 9)];
    uint64_t v29 = *v28;
    uint64_t v51 = v49 & 0x1FF;
    uint64_t v52 = -v49;
    BOOL v44 = v52 < 0;
    uint64_t v53 = v52 & 0x1FF;
    if (v44) {
      uint64_t v54 = v51;
    }
    else {
      uint64_t v54 = -v53;
    }
    uint64_t v30 = 511 - v54;
  }
  else
  {
    __int16 v27 = v26 + 1;
    uint64_t v28 = &v11[(unint64_t)(v26 + 1) >> 9];
    uint64_t v29 = *v28;
    uint64_t v30 = v27 & 0x1FF;
  }
  uint64_t v31 = (uint64_t *)&v29[8 * v30];
  unint64_t v32 = v25 + v4;
  uint64_t v33 = (uint64_t **)(v5 + 8 * (v32 >> 9));
  if (v6 == v5) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = (uint64_t)&(*v33)[v32 & 0x1FF];
  }
  if (v28 == (char **)v33)
  {
    uint64_t v39 = (uint64_t *)v34;
    uint64_t v35 = v11;
    uint64_t v36 = v10;
  }
  else
  {
    sub_1CCE7D4B4(&v55, v31, (uint64_t *)v29 + 512, v11, v10);
    uint64_t v35 = (char **)v56;
    uint64_t v36 = v57;
    uint64_t v37 = (uint64_t **)(v28 + 1);
    while (v37 != v33)
    {
      uint64_t v38 = *v37++;
      sub_1CCE7D4B4(&v55, v38, v38 + 512, v35, v36);
      uint64_t v35 = (char **)v56;
      uint64_t v36 = v57;
    }
    uint64_t v31 = *v33;
    uint64_t v39 = (uint64_t *)v34;
  }
  sub_1CCE7D4B4(&v55, v31, v39, v35, v36);
  --*(void *)(a1 + 40);

  sub_1CC0D41E4((void *)a1);
}

void *sub_1CCE7D430(void *result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a2 == a3)
  {
    a3 = a2;
  }
  else
  {
    uint64_t v5 = *a4;
    uint64_t v6 = a3;
    while (1)
    {
      uint64_t v7 = a5 - v5;
      if ((v6 - a2) >> 3 >= v7 >> 3) {
        uint64_t v8 = v7 >> 3;
      }
      else {
        uint64_t v8 = (v6 - a2) >> 3;
      }
      if (v8)
      {
        uint64_t v9 = -8 * v8;
        unsigned int v10 = (uint64_t *)(v6 - 8);
        do
        {
          uint64_t v11 = *v10--;
          *(void *)(a5 - 8) = v11;
          a5 -= 8;
          v9 += 8;
        }
        while (v9);
      }
      v6 -= 8 * v8;
      if (v6 == a2) {
        break;
      }
      uint64_t v12 = *--a4;
      uint64_t v5 = v12;
      a5 = v12 + 4096;
    }
    if (*a4 + 4096 == a5)
    {
      uint64_t v13 = a4[1];
      ++a4;
      a5 = v13;
    }
  }
  *__n128 result = a3;
  result[1] = a4;
  result[2] = a5;
  return result;
}

uint64_t **sub_1CCE7D4B4(uint64_t **result, uint64_t *a2, uint64_t *a3, char **a4, char *a5)
{
  if (a2 != a3)
  {
    uint64_t v5 = *a4;
    while (1)
    {
      uint64_t v6 = v5 - a5 + 4096;
      if (a3 - a2 >= v6 >> 3) {
        uint64_t v7 = v6 >> 3;
      }
      else {
        uint64_t v7 = a3 - a2;
      }
      if (v7)
      {
        uint64_t v8 = 8 * v7;
        uint64_t v9 = &a2[v7];
        do
        {
          uint64_t v10 = *a2++;
          *(void *)a5 = v10;
          a5 += 8;
          v8 -= 8;
        }
        while (v8);
        a2 = v9;
      }
      if (a2 == a3) {
        break;
      }
      uint64_t v11 = a4[1];
      ++a4;
      uint64_t v5 = v11;
      a5 = v11;
    }
    if (*a4 + 4096 == a5)
    {
      uint64_t v12 = a4[1];
      ++a4;
      a5 = v12;
    }
  }
  *__n128 result = a3;
  result[1] = (uint64_t *)a4;
  result[2] = (uint64_t *)a5;
  return result;
}

long long *sub_1CCE7D530(long long *result, char *a2, unint64_t a3, long long *a4, uint64_t a5)
{
  if (a3 == 2)
  {
    unsigned int v6 = *((_DWORD *)a2 - 4);
    uint64_t v5 = (long long *)(a2 - 16);
    if (v6 > *(_DWORD *)result)
    {
      long long v7 = *result;
      *__n128 result = *v5;
      *uint64_t v5 = v7;
    }
  }
  else if (a3 >= 2)
  {
    if ((uint64_t)a3 > 128)
    {
      uint64_t v28 = (char *)result;
      uint64_t v29 = a4;
      uint64_t v17 = a3 >> 1;
      uint64_t v18 = (char *)&result[a3 >> 1];
      unint64_t v19 = a3 - (a3 >> 1);
      if ((uint64_t)a3 > a5)
      {
        sub_1CCE7D530(result, v18, a3 >> 1, a4, a5);
        sub_1CCE7D530(v18, a2, v19, v29, a5);
        return (long long *)sub_1CCE7D9E0(v28, v18, a2, v17, v19, v29, a5);
      }
      else
      {
        sub_1CCE7D7F4(result, (long long *)v18, a3 >> 1, a4);
        uint64_t v21 = &v29[v17];
        __n128 result = sub_1CCE7D7F4((long long *)v18, (long long *)a2, v19, v21);
        uint64_t v22 = &v29[a3];
        unint64_t v23 = v21;
        while (v23 != v22)
        {
          if (*(_DWORD *)v23 > *(_DWORD *)v29)
          {
            long long v26 = *v23++;
            *(_OWORD *)uint64_t v28 = v26;
          }
          else
          {
            *(_OWORD *)uint64_t v28 = *v29++;
          }
          v28 += 16;
          if (v29 == v21)
          {
            if (v23 != v22)
            {
              uint64_t v24 = 0;
              do
              {
                *(_OWORD *)&v28[v24 * 16] = v23[v24];
                ++v24;
              }
              while (&v23[v24] != v22);
            }
            return result;
          }
        }
        if (v29 != v21)
        {
          uint64_t v25 = 0;
          do
          {
            *(_OWORD *)&v28[v25 * 16] = v29[v25];
            ++v25;
          }
          while (&v29[v25] != v21);
        }
      }
    }
    else if (result != (long long *)a2)
    {
      uint64_t v8 = result + 1;
      if (result + 1 != (long long *)a2)
      {
        uint64_t v9 = 0;
        uint64_t v10 = result;
        do
        {
          uint64_t v11 = v8;
          unsigned int v12 = *((_DWORD *)v10 + 4);
          if (v12 > *(_DWORD *)v10)
          {
            uint64_t v30 = *(void *)((char *)v10 + 20);
            int v31 = *((_DWORD *)v10 + 7);
            uint64_t v13 = v9;
            while (1)
            {
              *(long long *)((char *)result + v13 + 16) = *(long long *)((char *)result + v13);
              if (!v13) {
                break;
              }
              unsigned int v14 = *(_DWORD *)((char *)result + v13 - 16);
              v13 -= 16;
              if (v12 <= v14)
              {
                uint64_t v15 = (uint64_t)result + v13 + 16;
                goto LABEL_17;
              }
            }
            uint64_t v15 = (uint64_t)result;
LABEL_17:
            *(_DWORD *)uint64_t v15 = v12;
            *(void *)(v15 + 4) = v30;
            *(_DWORD *)(v15 + 12) = v31;
          }
          uint64_t v8 = v11 + 1;
          v9 += 16;
          uint64_t v10 = v11;
        }
        while (v11 + 1 != (long long *)a2);
      }
    }
  }
  return result;
}

long long *sub_1CCE7D7F4(long long *result, long long *a2, unint64_t a3, long long *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    long long v7 = result;
    if (a3 == 2)
    {
      uint64_t v15 = a2 - 1;
      if (*((_DWORD *)a2 - 4) <= *(_DWORD *)result)
      {
        *a4 = *result;
        long long v16 = *v15;
      }
      else
      {
        *a4 = *v15;
        long long v16 = *result;
      }
      a4[1] = v16;
    }
    else if (a3 == 1)
    {
      *a4 = *result;
    }
    else if ((uint64_t)a3 <= 8)
    {
      if (result != a2)
      {
        *a4 = *result;
        uint64_t v17 = (unsigned int *)(result + 1);
        if (result + 1 != a2)
        {
          uint64_t v18 = 0;
          unint64_t v19 = a4;
          do
          {
            int64x2_t v20 = v19;
            unsigned int v21 = *(_DWORD *)v19++;
            uint64_t v22 = v19;
            if (*v17 > v21)
            {
              *unint64_t v19 = *v20;
              uint64_t v22 = a4;
              if (v20 != a4)
              {
                uint64_t v23 = v18;
                while (1)
                {
                  uint64_t v22 = (long long *)((char *)a4 + v23);
                  if (*v17 <= *(_DWORD *)((char *)a4 + v23 - 16)) {
                    break;
                  }
                  long long *v22 = *(long long *)((char *)a4 + v23 - 16);
                  v23 -= 16;
                  if (!v23)
                  {
                    uint64_t v22 = a4;
                    break;
                  }
                }
              }
            }
            long long v24 = *(_OWORD *)v17;
            v17 += 4;
            long long *v22 = v24;
            v18 += 16;
          }
          while (v17 != (unsigned int *)a2);
        }
      }
    }
    else
    {
      uint64_t v8 = &result[a3 >> 1];
      sub_1CCE7D530(result, v8, a3 >> 1, a4, a3 >> 1);
      __n128 result = (long long *)sub_1CCE7D530(&v7[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      uint64_t v9 = &v7[a3 >> 1];
      while (v9 != a2)
      {
        if (*(_DWORD *)v9 > *(_DWORD *)v7)
        {
          long long v13 = *v9++;
          long long v11 = v13;
        }
        else
        {
          long long v10 = *v7++;
          long long v11 = v10;
        }
        *v4++ = v11;
        if (v7 == v8)
        {
          if (v9 != a2)
          {
            uint64_t v12 = 0;
            do
            {
              v4[v12] = v9[v12];
              ++v12;
            }
            while (&v9[v12] != a2);
          }
          return result;
        }
      }
      if (v7 != v8)
      {
        uint64_t v14 = 0;
        do
        {
          v4[v14] = v7[v14];
          ++v14;
        }
        while (&v7[v14] != v8);
      }
    }
  }
  return result;
}

char *sub_1CCE7D9E0(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v11 = 0;
      uint64_t v12 = -a4;
      while (*(_DWORD *)a2 <= *(_DWORD *)&result[v11])
      {
        v11 += 16;
        if (__CFADD__(v12++, 1)) {
          return result;
        }
      }
      uint64_t v14 = -v12;
      uint64_t v15 = &result[v11];
      if (-v12 >= v8)
      {
        if (v12 == -1)
        {
          long long v81 = *(_OWORD *)&result[v11];
          *(_OWORD *)&result[v11] = *(_OWORD *)a2;
          *(_OWORD *)a2 = v81;
          return result;
        }
        if (v12 > 0) {
          uint64_t v14 = 1 - v12;
        }
        uint64_t v25 = v14 >> 1;
        unint64_t v19 = &result[16 * (v14 >> 1) + v11];
        uint64_t v18 = a3;
        if (a3 != a2)
        {
          unint64_t v26 = (a3 - a2) >> 4;
          uint64_t v18 = a2;
          do
          {
            unint64_t v27 = v26 >> 1;
            uint64_t v28 = &v18[16 * (v26 >> 1)];
            unsigned int v30 = *(_DWORD *)v28;
            uint64_t v29 = v28 + 16;
            v26 += ~(v26 >> 1);
            if (v30 > *(_DWORD *)v19) {
              uint64_t v18 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }
          while (v26);
        }
        uint64_t v17 = (v18 - a2) >> 4;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v16 = v8;
        }
        else {
          uint64_t v16 = v8 + 1;
        }
        uint64_t v17 = v16 >> 1;
        uint64_t v18 = &a2[16 * (v16 >> 1)];
        unint64_t v19 = a2;
        if (v15 != a2)
        {
          unint64_t v20 = (a2 - result - v11) >> 4;
          unint64_t v19 = &result[v11];
          do
          {
            unint64_t v21 = v20 >> 1;
            uint64_t v22 = &v19[16 * (v20 >> 1)];
            unsigned int v24 = *(_DWORD *)v22;
            uint64_t v23 = v22 + 16;
            v20 += ~(v20 >> 1);
            if (*(_DWORD *)v18 > v24) {
              unint64_t v20 = v21;
            }
            else {
              unint64_t v19 = v23;
            }
          }
          while (v20);
        }
        uint64_t v25 = (v19 - result - v11) >> 4;
      }
      int v31 = v18;
      if (v19 != a2)
      {
        int v31 = v19;
        if (a2 != v18)
        {
          if (v19 + 16 == a2)
          {
            long long v79 = *(_OWORD *)v19;
            int64_t v37 = v18 - a2;
            uint64_t v74 = a6;
            uint64_t v76 = &result[v11];
            uint64_t v38 = a3;
            uint64_t v39 = v17;
            memmove(v19, a2, v18 - a2);
            uint64_t v17 = v39;
            a6 = v74;
            uint64_t v15 = v76;
            a3 = v38;
            int v31 = &v19[v37];
            *(_OWORD *)int v31 = v79;
          }
          else if (a2 + 16 == v18)
          {
            int v31 = v19 + 16;
            long long v80 = *((_OWORD *)v18 - 1);
            if (v18 - 16 != v19)
            {
              unint64_t v75 = a6;
              int v77 = &result[v11];
              BOOL v40 = a3;
              uint64_t v41 = v17;
              memmove(v19 + 16, v19, v18 - 16 - v19);
              uint64_t v17 = v41;
              a6 = v75;
              uint64_t v15 = v77;
              a3 = v40;
            }
            *(_OWORD *)unint64_t v19 = v80;
          }
          else
          {
            uint64_t v32 = (a2 - v19) >> 4;
            if (v32 == (v18 - a2) >> 4)
            {
              uint64_t v33 = 0;
              do
              {
                long long v78 = *(_OWORD *)&v19[v33];
                *(_OWORD *)&v19[v33] = *(_OWORD *)&a2[v33];
                uint64_t v34 = (uint64_t)&v19[v33 + 16];
                *(_OWORD *)&a2[v33] = v78;
                uint64_t v35 = (uint64_t)&a2[v33 + 16];
                v33 += 16;
              }
              while ((char *)v34 != a2 && v35 != (void)v18);
              int v31 = a2;
            }
            else
            {
              uint64_t v42 = (v18 - a2) >> 4;
              uint64_t v43 = (a2 - v19) >> 4;
              do
              {
                uint64_t v44 = v43;
                uint64_t v43 = v42;
                uint64_t v42 = v44 % v42;
              }
              while (v42);
              if (v43)
              {
                uint64_t v45 = &v19[16 * v43];
                do
                {
                  long long v46 = *((_OWORD *)v45 - 1);
                  v45 -= 16;
                  uint64_t v47 = &v45[16 * v32];
                  unint64_t v48 = v45;
                  do
                  {
                    uint64_t v49 = v48;
                    unint64_t v48 = v47;
                    *(_OWORD *)uint64_t v49 = *(_OWORD *)v47;
                    BOOL v50 = __OFSUB__(v32, (v18 - v47) >> 4);
                    uint64_t v51 = v32 - ((v18 - v47) >> 4);
                    char v66 = (v51 < 0) ^ v50;
                    uint64_t v47 = &v19[16 * v51];
                    if (v66) {
                      uint64_t v47 = &v48[16 * v32];
                    }
                  }
                  while (v47 != v45);
                  *(_OWORD *)unint64_t v48 = v46;
                }
                while (v45 != v19);
              }
              int v31 = &v19[16 * ((v18 - a2) >> 4)];
            }
          }
        }
      }
      a4 = -(v25 + v12);
      uint64_t v52 = v8 - v17;
      if (v25 + v17 >= v8 - (v25 + v17) - v12)
      {
        uint64_t v56 = -(v25 + v12);
        uint64_t v57 = v17;
        uint64_t v58 = v8 - v17;
        uint64_t v59 = a6;
        uint64_t v60 = v15;
        sub_1CCE7D9E0(v31, v18, a3, v56, v58, a6, a7);
        __n128 result = v60;
        a6 = v59;
        uint64_t v18 = v19;
        uint64_t v52 = v57;
        a4 = v25;
        a3 = v31;
      }
      else
      {
        uint64_t v53 = v19;
        uint64_t v54 = a6;
        uint64_t v55 = a3;
        sub_1CCE7D9E0(v15, v53, v31, v25, v17, a6, a7);
        a3 = v55;
        a6 = v54;
        __n128 result = v31;
      }
      uint64_t v8 = v52;
      a2 = v18;
      if (!v52) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (result != a2)
      {
        unint64_t v68 = 0;
        do
        {
          a6[v68 / 0x10] = *(_OWORD *)&result[v68];
          v68 += 16;
        }
        while (&result[v68] != a2);
        if (v68)
        {
          uint64_t v69 = a6;
          while (a2 != a3)
          {
            if (*(_DWORD *)a2 <= *(_DWORD *)v69)
            {
              long long v72 = *v69++;
              long long v71 = v72;
            }
            else
            {
              long long v70 = *(_OWORD *)a2;
              a2 += 16;
              long long v71 = v70;
            }
            *(_OWORD *)__n128 result = v71;
            result += 16;
            if (&a6[v68 / 0x10] == v69) {
              return result;
            }
          }
          return (char *)memmove(result, v69, (char *)a6 - (char *)v69 + v68);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v61 = 0;
      do
      {
        a6[v61] = *(_OWORD *)&a2[v61 * 16];
        ++v61;
      }
      while (&a2[v61 * 16] != a3);
      if (v61 * 16)
      {
        uint64_t v62 = &a6[v61];
        unsigned int v63 = a3 - 16;
        while (a2 != result)
        {
          unsigned int v64 = *((_DWORD *)v62 - 4);
          unsigned int v65 = *((_DWORD *)a2 - 4);
          char v66 = v64 > v65;
          if (v64 <= v65) {
            unsigned int v67 = (char *)(v62 - 1);
          }
          else {
            unsigned int v67 = a2 - 16;
          }
          if (v66) {
            a2 -= 16;
          }
          else {
            --v62;
          }
          *(_OWORD *)unsigned int v63 = *(_OWORD *)v67;
          v63 -= 16;
          if (v62 == a6) {
            return result;
          }
        }
        if (v62 != a6)
        {
          uint64_t v73 = 0;
          do
          {
            *(_OWORD *)&v63[v73 * 16] = v62[v73 - 1];
            --v73;
          }
          while (&v62[v73] != a6);
        }
      }
    }
  }
  return result;
}

_OWORD *sub_1CCE7DECC(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  unint64_t v4 = (uint64_t *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  __n128 result = operator new(72 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 72 * v10;
      int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *__n128 result = v12;
        __n128 result = (_OWORD *)((char *)result + 72);
        v11 -= 72;
      }
      while (v11);
    }
    if (v3)
    {
      long long v13 = v4;
      do
      {
        uint64_t v14 = *v13;
        uint64_t v15 = v13[1];
        if ((*v13 != -4096 || v15 != -4096) && (v14 != -8192 || v15 != -8192))
        {
          unint64_t v16 = ((v15 >> 4) ^ (v15 >> 9) | ((unint64_t)((v14 >> 4) ^ (v14 >> 9)) << 32))
              + ~((unint64_t)((v15 >> 4) ^ (v15 >> 9)) << 32);
          unint64_t v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
          unint64_t v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
          int v19 = ((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~(v18 << 27));
          int v20 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v21 = v20 & v19;
          uint64_t v22 = *a1 + 72 * v21;
          uint64_t v23 = *(void *)v22;
          uint64_t v24 = *(void *)(v22 + 8);
          if (v14 != *(void *)v22 || v15 != v24)
          {
            uint64_t v26 = 0;
            int v27 = 1;
            while (v23 != -4096 || v24 != -4096)
            {
              if (v26) {
                BOOL v28 = 0;
              }
              else {
                BOOL v28 = v24 == -8192;
              }
              if (v28 && v23 == -8192) {
                uint64_t v26 = v22;
              }
              unsigned int v30 = v21 + v27++;
              unsigned int v21 = v30 & v20;
              uint64_t v22 = *a1 + 72 * (v30 & v20);
              uint64_t v23 = *(void *)v22;
              uint64_t v24 = *(void *)(v22 + 8);
              if (v14 == *(void *)v22 && v15 == v24) {
                goto LABEL_37;
              }
            }
            if (v26) {
              uint64_t v22 = v26;
            }
          }
LABEL_37:
          *(void *)uint64_t v22 = v14;
          uint64_t v32 = v13[1];
          *(void *)(v22 + 24) = 0;
          unint64_t v33 = v22 + 24;
          *(void *)(v22 + 8) = v32;
          *(void *)(v22 + 16) = 4;
          uint64_t v34 = (unint64_t *)(v22 + 16);
          uint64_t v35 = v13[4];
          *(void *)(v22 + 32) = v35;
          if (v35 != -8192 && v35 != -4096)
          {
            if (v35)
            {
              unint64_t v36 = v13[2] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v33 = *(void *)v36;
              *(void *)unint64_t v36 = v34;
              unint64_t *v34 = v36 | 4;
              if (*(void *)v33) {
                **(void **)unint64_t v33 = **(void **)v33 & 7 | v33;
              }
            }
          }
          *(void *)(v22 + 48) = 0;
          unint64_t v37 = v22 + 48;
          *(void *)(v22 + 40) = 4;
          uint64_t v38 = (unint64_t *)(v22 + 40);
          uint64_t v39 = v13[7];
          *(void *)(v22 + 56) = v39;
          if (v39 != -8192 && v39 != -4096)
          {
            if (v39)
            {
              unint64_t v40 = v13[5] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v37 = *(void *)v40;
              *(void *)unint64_t v40 = v38;
              *uint64_t v38 = v40 | 4;
              if (*(void *)v37) {
                **(void **)unint64_t v37 = **(void **)v37 & 7 | v37;
              }
            }
          }
          *(_DWORD *)(v22 + 64) = *((_DWORD *)v13 + 16);
          ++*((_DWORD *)a1 + 2);
          uint64_t v41 = v13[7];
          if (v41 && v41 != -8192 && v41 != -4096)
          {
            unint64_t v42 = v13[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v42 = v13[6];
            uint64_t v43 = (unint64_t *)v13[6];
            if (v43)
            {
              *uint64_t v43 = *v43 & 7 | v42;
            }
            else
            {
              uint64_t v44 = v13[7];
              uint64_t v45 = ***(int32x2_t ****)v44;
              unint64_t v46 = (unint64_t)v45[303];
              if (v46 <= v42)
              {
                uint64_t v47 = v45[305].u32[0];
                if (v46 + 16 * v47 > v42)
                {
                  unsigned int v48 = v47 - 1;
                  LODWORD(v49) = v48 & ((v44 >> 4) ^ (v44 >> 9));
                  BOOL v50 = (uint64_t *)(v46 + 16 * v49);
                  uint64_t v51 = *v50;
                  if (v44 != *v50)
                  {
                    int v52 = 1;
                    do
                    {
                      if (v51 == -4096) {
                        goto LABEL_59;
                      }
                      int v53 = v49 + v52++;
                      uint64_t v49 = v53 & v48;
                      uint64_t v51 = *(void *)(v46 + 16 * v49);
                    }
                    while (v44 != v51);
                    BOOL v50 = (uint64_t *)(v46 + 16 * v49);
                  }
                  *BOOL v50 = -8192;
                  v45[304] = vadd_s32(v45[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v44 = v13[7];
LABEL_59:
                  *(unsigned char *)(v44 + 17) &= ~1u;
                }
              }
            }
          }
          uint64_t v54 = v13[4];
          if (v54 && v54 != -8192 && v54 != -4096)
          {
            unint64_t v55 = v13[2] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v55 = v13[3];
            uint64_t v56 = (unint64_t *)v13[3];
            if (v56)
            {
              *uint64_t v56 = *v56 & 7 | v55;
            }
            else
            {
              uint64_t v57 = v13[4];
              uint64_t v58 = ***(int32x2_t ****)v57;
              unint64_t v59 = (unint64_t)v58[303];
              if (v59 <= v55)
              {
                uint64_t v60 = v58[305].u32[0];
                if (v59 + 16 * v60 > v55)
                {
                  unsigned int v61 = v60 - 1;
                  LODWORD(v62) = v61 & ((v57 >> 4) ^ (v57 >> 9));
                  unsigned int v63 = (uint64_t *)(v59 + 16 * v62);
                  uint64_t v64 = *v63;
                  if (v57 != *v63)
                  {
                    int v65 = 1;
                    do
                    {
                      if (v64 == -4096) {
                        goto LABEL_73;
                      }
                      int v66 = v62 + v65++;
                      uint64_t v62 = v66 & v61;
                      uint64_t v64 = *(void *)(v59 + 16 * v62);
                    }
                    while (v57 != v64);
                    unsigned int v63 = (uint64_t *)(v59 + 16 * v62);
                  }
                  *unsigned int v63 = -8192;
                  v58[304] = vadd_s32(v58[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v57 = v13[4];
LABEL_73:
                  *(unsigned char *)(v57 + 17) &= ~1u;
                }
              }
            }
          }
        }
        v13 += 9;
      }
      while (v13 != &v4[9 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v67 = *((unsigned int *)a1 + 4);
  if (v67)
  {
    uint64_t v68 = 72 * v67;
    int64x2_t v69 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *__n128 result = v69;
      __n128 result = (_OWORD *)((char *)result + 72);
      v68 -= 72;
    }
    while (v68);
  }
  return result;
}

char *sub_1CCE7E360(void *a1)
{
  uint64_t v2 = a1[10];
  if (v2) {
    uint64_t v3 = v2 - 24;
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t v4 = (uint64_t *)(v3 + 48);
  do
  {
    uint64_t v5 = *v4;
    if (v5) {
      unint64_t v6 = (llvm::Instruction *)(v5 - 24);
    }
    else {
      unint64_t v6 = 0;
    }
    unint64_t v4 = (uint64_t *)(v5 + 8);
  }
  while (*((unsigned char *)v6 + 16) == 59);
  int v7 = operator new(0x60uLL);
  unsigned int v8 = (llvm::BitCastInst *)(v7 + 8);
  v7[13] = v7[13] & 0x38000000 | 1;
  *(void *)int v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *((void *)v7 + 3) = v7 + 8;
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)(**(void **)*a1 + 1960), v9, v10);
  int64x2_t v12 = (llvm::Type *)(**(void **)*a1 + 1960);
  uint64_t v45 = "reg2mem alloca point";
  __int16 v48 = 259;
  __n128 result = (char *)llvm::BitCastInst::BitCastInst(v8, NullValue, v12, &v45, v6);
  uint64_t v45 = (const char *)&v45;
  unint64_t v46 = &v45;
  uint64_t v47 = 0;
  unint64_t v16 = a1 + 9;
  for (uint64_t i = (void *)a1[10]; i != v16; uint64_t i = (void *)i[1])
  {
    unint64_t v18 = i - 3;
    if (!i) {
      unint64_t v18 = 0;
    }
    int v19 = (void *)v18[6];
    if (v19 != v18 + 5)
    {
      uint64_t v20 = 0;
      unsigned int v21 = &v45;
      while (1)
      {
        if (v19) {
          uint64_t v22 = v19 - 3;
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v23 = v22[5];
        if (*((unsigned char *)v22 + 16) != 59 || v23 != v3)
        {
          uint64_t v25 = v22[1];
          if (v25)
          {
            while (1)
            {
              uint64_t v26 = *(void *)(v25 + 24);
              if (*(void *)(v26 + 40) != v23 || *(unsigned char *)(v26 + 16) == 83) {
                break;
              }
              uint64_t v25 = *(void *)(v25 + 8);
              if (!v25) {
                goto LABEL_29;
              }
            }
            __n128 result = (char *)operator new(0x18uLL);
            *((void *)result + 1) = v21;
            *((void *)result + 2) = v22;
            *(void *)__n128 result = &v45;
            *unsigned int v21 = result;
            ++v20;
            unsigned int v21 = (const char **)result;
            unint64_t v46 = (const char **)result;
            uint64_t v47 = v20;
          }
        }
LABEL_29:
        int v19 = (void *)v19[1];
        int v27 = i - 3;
        if (!i) {
          int v27 = 0;
        }
        if (v19 == v27 + 5) {
          break;
        }
LABEL_36:
        if (i == v16) {
          goto LABEL_37;
        }
      }
      while (1)
      {
        uint64_t i = (void *)i[1];
        if (i == v16) {
          break;
        }
        BOOL v28 = i - 3;
        if (!i) {
          BOOL v28 = 0;
        }
        int v19 = (void *)v28[6];
        if (v19 != v28 + 5) {
          goto LABEL_36;
        }
      }
LABEL_37:
      if (v21 != &v45)
      {
        do
        {
          __n128 result = (char *)llvm::DemoteRegToStack((llvm *)v21[2], 0, v8, v15);
          unsigned int v21 = (const char **)v21[1];
        }
        while (v21 != &v45);
        uint64_t v20 = v47;
      }
      if (v20)
      {
        uint64_t v29 = v45;
        __n128 result = (char *)v46;
        unsigned int v30 = *v46;
        *((void *)v30 + 1) = *((void *)v45 + 1);
        **((void **)v29 + 1) = v30;
        uint64_t v47 = 0;
        if (result != (char *)&v45)
        {
          do
          {
            int v31 = (const char **)*((void *)result + 1);
            operator delete(result);
            __n128 result = (char *)v31;
          }
          while (v31 != &v45);
        }
      }
      break;
    }
  }
  uint64_t v32 = (void *)a1[10];
  unint64_t v33 = v46;
  if (v32 != v16)
  {
    uint64_t v34 = v47;
    do
    {
      uint64_t v35 = v32 - 3;
      if (!v32) {
        uint64_t v35 = 0;
      }
      if ((void *)v35[5] != v35 + 5)
      {
        uint64_t v36 = v35[6];
        uint64_t v37 = v36 - 24;
        uint64_t v38 = v36 ? v36 - 24 : 0;
        if (v36 && *(unsigned char *)(v38 + 16) == 83)
        {
          do
          {
            uint64_t v39 = v33;
            __n128 result = (char *)operator new(0x18uLL);
            unint64_t v33 = (const char **)result;
            *((void *)result + 1) = v39;
            *((void *)result + 2) = v37;
            *(void *)__n128 result = &v45;
            *uint64_t v39 = result;
            uint64_t v40 = *(void *)(v37 + 32);
            ++v34;
            uint64_t v37 = v40 - 24;
            if (v40) {
              uint64_t v41 = v40 - 24;
            }
            else {
              uint64_t v41 = 0;
            }
          }
          while (v40 && *(unsigned char *)(v41 + 16) == 83);
          unint64_t v46 = (const char **)result;
          uint64_t v47 = v34;
        }
      }
      uint64_t v32 = (void *)v32[1];
    }
    while (v32 != v16);
  }
  if (v33 != &v45) {
    llvm::DemotePHIToStack((llvm *)v33[2], v8, v14);
  }
  if (v47)
  {
    unint64_t v42 = v45;
    __n128 result = (char *)v46;
    uint64_t v43 = *v46;
    *((void *)v43 + 1) = *((void *)v45 + 1);
    **((void **)v42 + 1) = v43;
    uint64_t v47 = 0;
    if (result != (char *)&v45)
    {
      do
      {
        uint64_t v44 = (const char **)*((void *)result + 1);
        operator delete(result);
        __n128 result = (char *)v44;
      }
      while (v44 != &v45);
    }
  }
  return result;
}

void sub_1CCE7E6C8(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CCE7E768(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF7868;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F26407C8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF7870, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE7E6C8;
    v5[1] = &PassRegistry;
    unint64_t v4 = v5;
    std::__call_once(&qword_1EBCF7870, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCE7E818()
{
}

void sub_1CCE7E858(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE7E890(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61F348);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&unk_1EA61F348);
}

uint64_t sub_1CCE7E8E0(llvm::FunctionPass *a1, llvm::Function *a2)
{
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (*((llvm::Function **)a2 + 9) == (llvm::Function *)((char *)a2 + 72) && (*((unsigned char *)a2 + 34) & 0x80) == 0)
  {
    return 0;
  }
  if (llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2)) {
    return 0;
  }
  sub_1CCE7E360(a2);
  return 1;
}

BOOL sub_1CCE7E958(llvm::Function *a1)
{
  if ((*((_WORD *)a1 + 9) & 0x4000) == 0) {
    return 0;
  }
  GC = llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)a1, a1);
  char v2 = *((unsigned char *)GC + 23);
  BOOL v3 = v2 < 0;
  unint64_t v4 = (void *)*GC;
  if (v2 >= 0) {
    unint64_t v4 = GC;
  }
  uint64_t v5 = v2 & 0x7F;
  if (v3) {
    uint64_t v5 = GC[1];
  }
  if (v5 != 7)
  {
    if (v5 == 18)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = v4[1];
      int v8 = *((unsigned __int16 *)v4 + 8);
      BOOL v9 = v6 == 0x696F706574617473 && v7 == 0x706D6178652D746ELL;
      int v10 = 25964;
      return v9 && v8 == v10;
    }
    return 0;
  }
  int v12 = *(_DWORD *)v4;
  int v8 = *(_DWORD *)((char *)v4 + 3);
  BOOL v9 = v12 == 1701998435;
  int v10 = 1919705957;
  return v9 && v8 == v10;
}

uint64_t llvm::RewriteStatepointsForGC::runOnFunction(uint64_t a1, llvm *a2, uint64_t a3, llvm::MemorySSAUpdater *a4, llvm::MemorySSAUpdater *a5)
{
  v164[1] = *MEMORY[0x1E4F143B8];
  v140[0] = v141;
  v140[1] = 0x1000000000;
  v141[33] = 0;
  v141[32] = 0;
  v141[34] = a3;
  v141[35] = 0;
  char v142 = 1;
  BOOL v143 = v147;
  uint64_t v144 = v147;
  uint64_t v145 = 8;
  int v146 = 0;
  memset(&v147[64], 0, 24);
  __int16 v148 = 0;
  int v9 = llvm::removeUnreachableBlocks(a2, (llvm::Function *)v140, 0, a4, a5);
  llvm::DomTreeUpdater::getDomTree((llvm::DomTreeUpdater *)v140);
  unint64_t v137 = v139;
  uint64_t v138 = 0x4000000000;
  unsigned int v134 = v136;
  uint64_t v135 = 0x4000000000;
  int v10 = (void **)((char *)a2 + 72);
  for (uint64_t i = (void *)*((void *)a2 + 10); ; uint64_t i = (void *)i[1])
  {
    if (i == v10) {
      goto LABEL_48;
    }
    int v12 = i - 3;
    if (!i) {
      int v12 = 0;
    }
    long long v13 = (void *)v12[6];
    if (v13 != v12 + 5) {
      break;
    }
  }
  uint64_t v119 = a3;
  while (1)
  {
    if (v13) {
      uint64_t v14 = (uint64_t)(v13 - 3);
    }
    else {
      uint64_t v14 = 0;
    }
    unsigned int v15 = *(unsigned __int8 *)(v14 + 16) - 33;
    BOOL v16 = v15 > 0x33;
    uint64_t v17 = (1 << v15) & 0x8000000000041;
    if (!v16 && v17 != 0)
    {
      uint64_t v19 = *(void *)(v14 - 32);
      if ((!v19
         || *(unsigned char *)(v19 + 16)
         || *(void *)(v19 + 24) != *(void *)(v14 + 72)
         || *(_DWORD *)(v19 + 36) != 124)
        && !llvm::callsGCLeafFunction(v14, (uint64_t *)a5))
      {
        if (byte_1EBCF7CC8 || (sub_1CC233A58((char *)v14, 0, (uint64_t *)&v149), v151[8]))
        {
          if (v138 >= (unint64_t)HIDWORD(v138)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v137 + v138) = v14;
          LODWORD(v138) = v138 + 1;
        }
      }
    }
    int v20 = *(unsigned __int8 *)(v14 + 16);
    if (v20 != 84) {
      uint64_t v14 = 0;
    }
    if (v13)
    {
      if (v20 == 84)
      {
        uint64_t v21 = *(void *)(v14 - 32);
        if (v21)
        {
          if (!*(unsigned char *)(v21 + 16)
            && (*(void *)(v21 + 24) == *(void *)(v14 + 72) && *(_DWORD *)(v21 + 36) == 120
             || *(void *)(v21 + 24) == *(void *)(v14 + 72) && *(_DWORD *)(v21 + 36) == 121))
          {
            int v22 = v135;
            if (v135 >= HIDWORD(v135)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v134 + v135) = v14;
            LODWORD(v135) = v22 + 1;
          }
        }
      }
    }
    long long v13 = (void *)v13[1];
    uint64_t v23 = i - 3;
    if (!i) {
      uint64_t v23 = 0;
    }
    if (v13 == v23 + 5) {
      break;
    }
LABEL_38:
    if (i == v10) {
      goto LABEL_47;
    }
  }
  while (1)
  {
    uint64_t i = (void *)i[1];
    if (i == v10) {
      break;
    }
    uint64_t v24 = i - 3;
    if (!i) {
      uint64_t v24 = 0;
    }
    long long v13 = (void *)v24[6];
    if (v13 != v24 + 5) {
      goto LABEL_38;
    }
  }
LABEL_47:
  if (!(v138 | v135)) {
    goto LABEL_48;
  }
  uint64_t v26 = (void *)*((void *)a2 + 10);
  if (v26 == v10) {
    goto LABEL_61;
  }
  do
  {
    if (v26) {
      int v27 = (llvm *)(v26 - 3);
    }
    else {
      int v27 = 0;
    }
    if (llvm::BasicBlock::getUniquePredecessor(v27)) {
      v9 |= llvm::FoldSingleEntryPHINodes(v27, 0, v28);
    }
    uint64_t v26 = (void *)v26[1];
  }
  while (v26 != v10);
  uint64_t v29 = (void *)*((void *)a2 + 10);
  if (v29 == v10) {
    goto LABEL_61;
  }
  do
  {
    if (v29) {
      int v77 = v29 - 3;
    }
    else {
      int v77 = 0;
    }
    long long v78 = (void *)v77[5];
    if (v78 != v77 + 5)
    {
      uint64_t v79 = v78 ? (uint64_t)(v78 - 3) : 0;
      unsigned int v80 = *(unsigned __int8 *)(v79 + 16) - 40;
      uint64_t v81 = v80 >= 0xFFFFFFF5 ? v79 : 0;
      if (v78)
      {
        if (*(unsigned char *)(v81 + 16) == 30 && v80 >= 0xFFFFFFF5 && (*(_DWORD *)(v81 + 20) & 0x7FFFFFF) == 3)
        {
          uint64_t v83 = *(void *)(v81 - 96);
          if (*(unsigned char *)(v83 + 16) == 81)
          {
            uint64_t v84 = *(void *)(v83 + 8);
            if (v84)
            {
              if (!*(void *)(v84 + 8))
              {
                llvm::Instruction::moveBefore((llvm::Instruction *)v83, (llvm::Instruction *)v81);
                LOBYTE(v9) = 1;
              }
            }
          }
        }
      }
    }
    uint64_t v29 = (void *)v29[1];
  }
  while (v29 != v10);
  for (j = (void *)*((void *)a2 + 10); ; j = (void *)j[1])
  {
    if (j == v10) {
      goto LABEL_61;
    }
    unsigned int v86 = j - 3;
    if (!j) {
      unsigned int v86 = 0;
    }
    uint64_t v87 = (void *)v86[6];
    if (v87 != v86 + 5) {
      break;
    }
  }
  while (1)
  {
    if (v87) {
      int v88 = (uint64_t **)(v87 - 3);
    }
    else {
      int v88 = 0;
    }
    if (*((unsigned char *)v88 + 16) != 62) {
      goto LABEL_238;
    }
    int v89 = *((_DWORD *)v88 + 5);
    uint64_t v90 = v89 & 0x7FFFFFF;
    if ((v89 & 0x7FFFFFF) != 0)
    {
      uint64_t v91 = 0;
      int v92 = 0;
      do
      {
        unsigned int v93 = &v88[-4 * v90];
        if ((v89 & 0x40000000) != 0) {
          unsigned int v93 = (uint64_t **)*(v88 - 1);
        }
        uint64_t v94 = *v93[v91];
        if (v94) {
          BOOL v95 = (*(_DWORD *)(v94 + 8) & 0xFE) == 18;
        }
        else {
          BOOL v95 = 0;
        }
        if (v95) {
          int v92 = (llvm::Type *)*(unsigned int *)(v94 + 32);
        }
        v91 += 4;
      }
      while (4 * v90 != v91);
      if ((v89 & 0x40000000) == 0)
      {
LABEL_213:
        BOOL v96 = &v88[-4 * v90];
        goto LABEL_216;
      }
    }
    else
    {
      int v92 = 0;
      if ((v89 & 0x40000000) == 0) {
        goto LABEL_213;
      }
    }
    BOOL v96 = (uint64_t **)*(v88 - 1);
LABEL_216:
    if ((*(_DWORD *)(**v96 + 8) & 0xFE) == 0x12 || v92 == 0) {
      goto LABEL_238;
    }
    uint64_t v98 = 0;
    uint64_t v99 = **v88;
    uint64_t v149 = v151;
    uint64_t v150 = 0x200000000;
    uint64_t v154 = v99;
    unsigned int v155 = &v163;
    unsigned int v156 = v164;
    uint64_t v157 = 0;
    int v158 = 0;
    __int16 v159 = 512;
    char v160 = 7;
    unint64_t v152 = 0;
    unint64_t v153 = 0;
    uint64_t v161 = 0;
    uint64_t v162 = 0;
    unsigned int v163 = &unk_1F2616E88;
    v164[0] = &unk_1F2617008;
    unint64_t v152 = v88[5];
    unint64_t v153 = v88 + 3;
    uint64_t v100 = (char *)v88[6];
    v132[0] = v100;
    if (v100)
    {
      llvm::MetadataTracking::track((uint64_t)v132, (unsigned __int8 *)v100, 2);
      uint64_t v98 = v132[0];
    }
    sub_1CB8461A4((uint64_t)&v149, 0, (uint64_t)v98);
    if (!v132[0]) {
      goto LABEL_223;
    }
    int v113 = *v132[0];
    if ((v113 - 4) > 0x1E)
    {
      if ((v113 - 3) >= 0xFFFFFFFE) {
        int v116 = v132[0];
      }
      else {
        int v116 = 0;
      }
      if ((v113 - 3) < 0xFFFFFFFE)
      {
        if (v113 == 3) {
          *((void *)v132[0] + 1) = 0;
        }
        goto LABEL_223;
      }
      unint64_t v115 = (unint64_t)(v116 + 8);
    }
    else
    {
      if ((v132[0][1] & 0x7F) != 2 && !*((_DWORD *)v132[0] + 3)) {
        goto LABEL_223;
      }
      uint64_t v114 = *((void *)v132[0] + 2);
      if ((v114 & 4) == 0) {
        goto LABEL_223;
      }
      unint64_t v115 = v114 & 0xFFFFFFFFFFFFFFF8;
      if (!v115) {
        goto LABEL_223;
      }
    }
    v122[0] = v132;
    sub_1CC5FA668(v115 + 16, v122);
LABEL_223:
    int v101 = *((_DWORD *)v88 + 5);
    if ((v101 & 0x40000000) != 0) {
      uint64_t v102 = (unsigned __int8 **)*(v88 - 1);
    }
    else {
      uint64_t v102 = (unsigned __int8 **)&v88[-4 * (v101 & 0x7FFFFFF)];
    }
    unint64_t v103 = *v102;
    LOWORD(v125) = 257;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)&v149, v92, v103, (uint64_t)v122);
    int v105 = *((_DWORD *)v88 + 5);
    if ((v105 & 0x40000000) != 0) {
      uint64_t v106 = (uint64_t **)*(v88 - 1);
    }
    else {
      uint64_t v106 = &v88[-4 * (v105 & 0x7FFFFFF)];
    }
    if (*v106)
    {
      *v106[2] = (uint64_t)v106[1];
      uint64_t v107 = v106[1];
      if (v107) {
        v107[2] = (uint64_t)v106[2];
      }
    }
    char *v106 = (uint64_t *)VectorSplat;
    if (VectorSplat)
    {
      int v110 = (uint64_t *)*((void *)VectorSplat + 1);
      uint64_t v108 = (uint64_t *)((char *)VectorSplat + 8);
      int v109 = v110;
      v106[1] = v110;
      if (v110) {
        v109[2] = (uint64_t)(v106 + 1);
      }
      v106[2] = v108;
      uint64_t *v108 = (uint64_t)v106;
    }
    if (v149 != v151) {
      free(v149);
    }
    LOBYTE(v9) = 1;
LABEL_238:
    uint64_t v87 = (void *)v87[1];
    int v111 = j - 3;
    if (!j) {
      int v111 = 0;
    }
    if (v87 == v111 + 5) {
      break;
    }
LABEL_245:
    if (j == v10) {
      goto LABEL_61;
    }
  }
  while (1)
  {
    j = (void *)j[1];
    if (j == v10) {
      break;
    }
    uint64_t v112 = j - 3;
    if (!j) {
      uint64_t v112 = 0;
    }
    uint64_t v87 = (void *)v112[6];
    if (v87 != v112 + 5) {
      goto LABEL_245;
    }
  }
LABEL_61:
  v122[0] = 0;
  v122[1] = 0;
  int v123 = 0;
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v124 = 0;
  if (v135)
  {
    long long v121 = **(llvm::IntegerType ***)a2;
    uint64_t v120 = (void *)*((void *)a2 + 5);
    unsigned int v30 = *(uint64_t ***)v134;
    uint64_t v31 = *(void *)(*(void *)v134 - 32);
    if (v31 && !*(unsigned char *)(v31 + 16) && *(uint64_t **)(v31 + 24) == v30[9]) {
      int v32 = *(_DWORD *)(v31 + 36);
    }
    else {
      int v32 = 0;
    }
    unint64_t v33 = (llvm::Value *)v30[-4 * (*((_DWORD *)v30 + 5) & 0x7FFFFFF)];
    uint64_t v34 = (uint64_t ***)sub_1CCE86698((llvm::ConstantAggregateZero **)v33, (char *)v122);
    if (v32 == 120)
    {
      uint64_t v35 = 0;
      long long v131 = 0;
      uint64_t v36 = **v30;
      uint64_t v149 = v151;
      uint64_t v150 = 0x200000000;
      uint64_t v154 = v36;
      unsigned int v155 = &v163;
      unsigned int v156 = v164;
      uint64_t v157 = 0;
      int v158 = 0;
      __int16 v159 = 512;
      char v160 = 7;
      unint64_t v152 = 0;
      unint64_t v153 = 0;
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      unsigned int v163 = &unk_1F2616E88;
      v164[0] = &unk_1F2617008;
      unint64_t v152 = v30[5];
      unint64_t v153 = v30 + 3;
      uint64_t v37 = (unsigned __int8 *)v30[6];
      v129[0] = v37;
      if (v37)
      {
        llvm::MetadataTracking::track((uint64_t)v129, v37, 2);
        uint64_t v35 = v129[0];
      }
      sub_1CB8461A4((uint64_t)&v149, 0, v35);
      if (!v129[0])
      {
LABEL_70:
        uint64_t v38 = (uint64_t **)*v30;
        sub_1CCE8771C(__p, v34, (uint64_t)".cast", 5, "", 0);
        __int16 v130 = 260;
        v129[0] = __p;
        uint64_t v39 = (llvm::Instruction *)v34;
        if (*v34 != v38)
        {
          if (*((unsigned __int8 *)v34 + 16) <= 0x14u)
          {
            uint64_t v57 = (*((uint64_t (**)(void **, uint64_t, uint64_t ***, uint64_t **))*v155 + 28))(v155, 49, v34, v38);
            uint64_t v39 = (llvm::Instruction *)v57;
            if (v57)
            {
              if (*(unsigned __int8 *)(v57 + 16) >= 0x1Cu)
              {
                (*(void (**)(void *, uint64_t, void *, uint64_t *, void **))(*v156 + 16))(v156, v57, v129, v152, v153);
                if (v150)
                {
                  uint64_t v74 = (llvm::MDNode **)v149;
                  unint64_t v75 = &v149[16 * v150];
                  do
                  {
                    llvm::Instruction::setMetadata(v39, *(_DWORD *)v74, v74[1]);
                    v74 += 2;
                  }
                  while (v74 != (llvm::MDNode **)v75);
                }
              }
            }
          }
          else
          {
            __int16 v133 = 257;
            uint64_t v39 = llvm::CastInst::Create(49, (uint64_t)v34, (uint64_t)v38, v132, 0);
            (*(void (**)(void *, llvm::Instruction *, void *, uint64_t *, void **))(*v156 + 16))(v156, v39, v129, v152, v153);
            if (v150)
            {
              uint64_t v40 = (llvm::MDNode **)v149;
              uint64_t v41 = &v149[16 * v150];
              do
              {
                llvm::Instruction::setMetadata(v39, *(_DWORD *)v40, v40[1]);
                v40 += 2;
              }
              while (v40 != (llvm::MDNode **)v41);
            }
          }
        }
        if (v128 < 0) {
          operator delete(__p[0]);
        }
        if (v149 != v151) {
          free(v149);
        }
        long long v131 = v39;
        if (v39 != (llvm::Instruction *)v34)
        {
          *(void *)sub_1CD68C4F4((uint64_t)v122, (uint64_t *)&v131) = v34;
          uint64_t v34 = (uint64_t ***)v131;
        }
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v30, (llvm::Value *)v34, (llvm::Value *)1);
        if ((*((unsigned char *)v131 + 23) & 0x10) == 0) {
          llvm::Value::takeName((int32x2_t ****)v131, (llvm::Value *)v30);
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      int v64 = *(unsigned __int8 *)v129[0];
      if ((v64 - 4) > 0x1E)
      {
        if ((v64 - 3) >= 0xFFFFFFFE) {
          uint64_t v70 = v129[0];
        }
        else {
          uint64_t v70 = 0;
        }
        if ((v64 - 3) < 0xFFFFFFFE)
        {
          if (v64 == 3) {
            *(void *)(v129[0] + 8) = 0;
          }
          goto LABEL_70;
        }
        unint64_t v66 = v70 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v129[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v129[0] + 12)) {
          goto LABEL_70;
        }
        uint64_t v65 = *(void *)(v129[0] + 16);
        if ((v65 & 4) == 0) {
          goto LABEL_70;
        }
        unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
        if (!v66) {
          goto LABEL_70;
        }
      }
      v132[0] = (const char *)v129;
      sub_1CC5FA668(v66 + 16, v132);
      goto LABEL_70;
    }
    unsigned int v42 = *(_DWORD *)(*(void *)v33 + 8);
    if ((v42 & 0xFE) == 0x12) {
      unsigned int v42 = *(_DWORD *)(**(void **)(*(void *)v33 + 16) + 8);
    }
    if (v42 < 0x100) {
      goto LABEL_87;
    }
    unsigned int v43 = v42 >> 8;
    uint64_t v44 = *((unsigned int *)v120 + 128);
    uint64_t v45 = v120[63];
    if (v44)
    {
      uint64_t v45 = v120[63];
      unint64_t v46 = *((unsigned int *)v120 + 128);
      do
      {
        unint64_t v47 = v46 >> 1;
        uint64_t v48 = v45 + 16 * (v46 >> 1);
        unsigned int v49 = *(_DWORD *)(v48 + 8);
        uint64_t v50 = v48 + 16;
        v46 += ~(v46 >> 1);
        if (v49 < v43) {
          uint64_t v45 = v50;
        }
        else {
          unint64_t v46 = v47;
        }
      }
      while (v46);
    }
    if (v45 == v120[63] + 16 * v44 || *(_DWORD *)(v45 + 8) != v43) {
LABEL_87:
    }
      uint64_t v45 = v120[63];
    uint64_t v51 = 0;
    int v52 = (llvm::LLVMContext *)*(unsigned int *)(v45 + 4);
    uint64_t v53 = **v30;
    uint64_t v149 = v151;
    uint64_t v150 = 0x200000000;
    uint64_t v154 = v53;
    unsigned int v155 = &v163;
    unsigned int v156 = v164;
    uint64_t v157 = 0;
    int v158 = 0;
    __int16 v159 = 512;
    char v160 = 7;
    unint64_t v152 = 0;
    unint64_t v153 = 0;
    uint64_t v161 = 0;
    uint64_t v162 = 0;
    unsigned int v163 = &unk_1F2616E88;
    v164[0] = &unk_1F2617008;
    unint64_t v152 = v30[5];
    unint64_t v153 = v30 + 3;
    uint64_t v54 = (unsigned __int8 *)v30[6];
    v129[0] = v54;
    if (v54)
    {
      llvm::MetadataTracking::track((uint64_t)v129, v54, 2);
      uint64_t v51 = v129[0];
    }
    sub_1CB8461A4((uint64_t)&v149, 0, v51);
    if (!v129[0])
    {
LABEL_91:
      uint64_t v55 = llvm::IntegerType::get(v121, v52);
      sub_1CCE8771C(__p, v34, (uint64_t)".int", 4, "", 0);
      __int16 v130 = 260;
      v129[0] = __p;
      if (*v34 != (uint64_t **)v55)
      {
        if (*((unsigned __int8 *)v34 + 16) <= 0x14u)
        {
          uint64_t v58 = (*((uint64_t (**)(void **, uint64_t, uint64_t ***, uint64_t))*v155 + 28))(v155, 47, v34, v55);
          uint64_t v34 = (uint64_t ***)v58;
          if (v58)
          {
            if (*(unsigned __int8 *)(v58 + 16) >= 0x1Cu)
            {
              (*(void (**)(void *, uint64_t, void *, uint64_t *, void **))(*v156 + 16))(v156, v58, v129, v152, v153);
              if (v150)
              {
                uint64_t v76 = (llvm::MDNode **)v149;
                int32x2_t v118 = &v149[16 * v150];
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v34, *(_DWORD *)v76, v76[1]);
                  v76 += 2;
                }
                while (v76 != (llvm::MDNode **)v118);
              }
            }
          }
        }
        else
        {
          __int16 v133 = 257;
          uint64_t v34 = (uint64_t ***)llvm::CastInst::Create(47, (uint64_t)v34, v55, v132, 0);
          (*(void (**)(void *, uint64_t ***, void *, uint64_t *, void **))(*v156 + 16))(v156, v34, v129, v152, v153);
          if (v150)
          {
            uint64_t v56 = (llvm::MDNode **)v149;
            int v117 = &v149[16 * v150];
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v34, *(_DWORD *)v56, v56[1]);
              v56 += 2;
            }
            while (v56 != (llvm::MDNode **)v117);
          }
        }
      }
      if (v128 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v59 = llvm::IntegerType::get(v121, v52);
      sub_1CCE8771C(__p, (uint64_t ***)v33, (uint64_t)".int", 4, "", 0);
      __int16 v130 = 260;
      v129[0] = __p;
      if (*(void *)v33 != v59)
      {
        if (*((unsigned __int8 *)v33 + 16) <= 0x14u)
        {
          unint64_t v33 = (llvm::Value *)(*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v155 + 28))(v155, 47, v33, v59);
          if (v33) {
            BOOL v62 = *((unsigned __int8 *)v33 + 16) >= 0x1Cu;
          }
          else {
            BOOL v62 = 0;
          }
          if (v62)
          {
            (*(void (**)(void *, llvm::Value *, void *, uint64_t *, void **))(*v156 + 16))(v156, v33, v129, v152, v153);
            if (v150)
            {
              long long v72 = (llvm::MDNode **)v149;
              uint64_t v73 = &v149[16 * v150];
              do
              {
                llvm::Instruction::setMetadata(v33, *(_DWORD *)v72, v72[1]);
                v72 += 2;
              }
              while (v72 != (llvm::MDNode **)v73);
            }
          }
        }
        else
        {
          __int16 v133 = 257;
          unint64_t v33 = llvm::CastInst::Create(47, (uint64_t)v33, v59, v132, 0);
          (*(void (**)(void *, llvm::Value *, void *, uint64_t *, void **))(*v156 + 16))(v156, v33, v129, v152, v153);
          if (v150)
          {
            uint64_t v60 = (llvm::MDNode **)v149;
            unsigned int v61 = &v149[16 * v150];
            do
            {
              llvm::Instruction::setMetadata(v33, *(_DWORD *)v60, v60[1]);
              v60 += 2;
            }
            while (v60 != (llvm::MDNode **)v61);
          }
        }
      }
      if (v128 < 0) {
        operator delete(__p[0]);
      }
      __int16 v133 = 257;
      unsigned int v63 = sub_1CB84494C((uint64_t)&v149, (uint64_t)v33, (uint64_t)v34, (uint64_t)v132, 0, 0);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v30, v63, (llvm::Value *)1);
      llvm::Value::takeName((int32x2_t ****)v63, (llvm::Value *)v30);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    int v67 = *(unsigned __int8 *)v129[0];
    if ((v67 - 4) > 0x1E)
    {
      if ((v67 - 3) >= 0xFFFFFFFE) {
        uint64_t v71 = v129[0];
      }
      else {
        uint64_t v71 = 0;
      }
      if ((v67 - 3) < 0xFFFFFFFE)
      {
        if (v67 == 3) {
          *(void *)(v129[0] + 8) = 0;
        }
        goto LABEL_91;
      }
      unint64_t v69 = v71 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v129[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v129[0] + 12)) {
        goto LABEL_91;
      }
      uint64_t v68 = *(void *)(v129[0] + 16);
      if ((v68 & 4) == 0) {
        goto LABEL_91;
      }
      unint64_t v69 = v68 & 0xFFFFFFFFFFFFFFF8;
      if (!v69) {
        goto LABEL_91;
      }
    }
    v132[0] = (const char *)v129;
    sub_1CC5FA668(v69 + 16, v132);
    goto LABEL_91;
  }
  if (v138) {
    LOBYTE(v9) = v9 | sub_1CCE8086C((uint64_t)a2, v119, (uint64_t)a4, (uint64_t)&v137);
  }
  sub_1CD456CB4(v122);
LABEL_48:
  if (v134 != v136) {
    free(v134);
  }
  if (v137 != v139) {
    free(v137);
  }
  sub_1CC2930C0((uint64_t)v140);
  return v9 & 1;
}

void sub_1CCE7FB70(uint64_t a1)
{
  v82[11] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v75 = a1 + 24;
  if (v1 == a1 + 24) {
    return;
  }
  do
  {
    if (v1) {
      BOOL v3 = (uint64_t ***)(v1 - 56);
    }
    else {
      BOOL v3 = 0;
    }
    unint64_t v4 = (llvm::LLVMContext *)*((unsigned int *)v3 + 9);
    if (v4)
    {
      v3[14] = (uint64_t **)llvm::Intrinsic::getAttributes((llvm::Intrinsic *)**v3, v4);
      goto LABEL_25;
    }
    v82[0] = 0;
    v82[1] = 0;
    uint64_t v81 = v82;
    *(_OWORD *)unsigned int v80 = xmmword_1CFB2D2E0;
    if ((*((unsigned char *)v3 + 18) & 1) == 0)
    {
      uint64_t v6 = (int *)v3[11];
LABEL_9:
      uint64_t v7 = v6;
      goto LABEL_10;
    }
    llvm::Function::BuildLazyArguments((llvm::Function *)v3);
    uint64_t v6 = (int *)v3[11];
    if ((*((_WORD *)v3 + 9) & 1) == 0) {
      goto LABEL_9;
    }
    llvm::Function::BuildLazyArguments((llvm::Function *)v3);
    uint64_t v7 = (int *)v3[11];
LABEL_10:
    int v8 = &v7[10 * (void)v3[12]];
    while (v6 != v8)
    {
      if (*(unsigned char *)(*(void *)v6 + 8) == 15) {
        llvm::Function::removeParamAttrs((uint64_t)v3, v6[8], (uint64_t)v80);
      }
      v6 += 10;
    }
    if (*(unsigned char *)(*v3[3][2] + 8) == 15)
    {
      int v10 = (uint64_t *)(v3 + 14);
      int v9 = v3[14];
      if (v9 && *((_DWORD *)v9 + 2) >= 2u) {
        uint64_t v11 = v9[6];
      }
      else {
        uint64_t v11 = 0;
      }
      int v12 = **v3;
      *(void *)long long v78 = v11;
      uint64_t v13 = llvm::AttributeSet::removeAttributes((uint64_t *)v78, v12, (uint64_t)v80);
      if (v11 == (uint64_t *)v13) {
        uint64_t v14 = *v10;
      }
      else {
        uint64_t v14 = llvm::AttributeList::setAttributesAtIndex(v3 + 14, v12, 0, v13);
      }
      *int v10 = v14;
    }
    for (uint64_t i = 0; i != 8; ++i)
      v3[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v3 + 14, **v3, -1, dword_1CFB2D2F0[i]);
    sub_1CC1E4850((uint64_t)&v81, v82[0]);
LABEL_25:
    uint64_t v1 = *(void *)(v1 + 8);
  }
  while (v1 != v75);
  uint64_t v16 = *(void *)(a1 + 32);
  if (v16 == v75) {
    return;
  }
  while (2)
  {
    uint64_t v17 = (uint64_t **)(v16 - 56);
    if (!v16) {
      uint64_t v17 = 0;
    }
    unint64_t v18 = v17 + 9;
    if (v17[9] == (uint64_t *)(v17 + 9)) {
      goto LABEL_126;
    }
    uint64_t v76 = **v17;
    v80[0] = &v81;
    v80[1] = (void *)0xC00000000;
    for (j = v17[10]; ; j = (uint64_t *)j[1])
    {
      if (j == (uint64_t *)v18) {
        goto LABEL_126;
      }
      int v20 = j - 3;
      if (!j) {
        int v20 = 0;
      }
      uint64_t v21 = v20[6];
      if ((uint64_t *)v21 != v20 + 5) {
        break;
      }
    }
    while (2)
    {
      unint64_t v33 = (uint64_t ***)(v21 - 24);
      if (v21) {
        uint64_t v34 = (unsigned __int8 *)(v21 - 24);
      }
      else {
        uint64_t v34 = 0;
      }
      if (v34[16] == 84)
      {
        uint64_t v35 = *((void *)v34 - 4);
        if (v35)
        {
          if (!*(unsigned char *)(v35 + 16)
            && *(void *)(v35 + 24) == *((void *)v34 + 9)
            && (*(unsigned char *)(v35 + 33) & 0x20) != 0
            && *(_DWORD *)(*(void *)(v21 - 56) + 36) == 164)
          {
            if (LODWORD(v80[1]) >= (unint64_t)HIDWORD(v80[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v80[0] + LODWORD(v80[1])) = v33;
            ++LODWORD(v80[1]);
            goto LABEL_114;
          }
        }
      }
      if ((v34[23] & 0x20) != 0)
      {
        uint64_t v36 = ***(void ***)v34;
        *(void *)long long v78 = v34;
        int v37 = *(_DWORD *)(v36 + 2496);
        if (!v37)
        {
          int v22 = 0;
          goto LABEL_44;
        }
        uint64_t v38 = *(void *)(v36 + 2480);
        int v39 = v37 - 1;
        unsigned int v40 = v39 & ((v34 >> 4) ^ (v34 >> 9));
        uint64_t v23 = (unsigned __int8 **)(v38 + 40 * v40);
        uint64_t v41 = *v23;
        if (*v23 != v34)
        {
          unsigned int v42 = 0;
          int v43 = 1;
          while (v41 != (unsigned __int8 *)-4096)
          {
            if (v42) {
              BOOL v44 = 0;
            }
            else {
              BOOL v44 = v41 == (unsigned __int8 *)-8192;
            }
            if (v44) {
              unsigned int v42 = v23;
            }
            unsigned int v45 = v40 + v43++;
            unsigned int v40 = v45 & v39;
            uint64_t v23 = (unsigned __int8 **)(v38 + 40 * v40);
            uint64_t v41 = *v23;
            if (*v23 == v34) {
              goto LABEL_76;
            }
          }
          if (v42) {
            int v22 = v42;
          }
          else {
            int v22 = v23;
          }
LABEL_44:
          uint64_t v23 = (unsigned __int8 **)sub_1CC609054(v36 + 2480, (uint64_t)v78, (uint64_t *)v78, v22);
          uint64_t v24 = *(unsigned __int8 **)v78;
          v23[4] = 0;
          v23[3] = 0;
          *uint64_t v23 = v24;
          v23[1] = (unsigned __int8 *)(v23 + 3);
          void v23[2] = (unsigned __int8 *)0x100000000;
        }
LABEL_76:
        uint64_t v46 = *((unsigned int *)v23 + 4);
        if (v46)
        {
          unint64_t v47 = (llvm::MDNode **)(v23[1] + 8);
          uint64_t v48 = 16 * v46;
          while (*((_DWORD *)v47 - 2) != 1)
          {
            v47 += 2;
            v48 -= 16;
            if (!v48) {
              goto LABEL_83;
            }
          }
          if (*v47)
          {
            MutableTBAAAccessTag = llvm::MDBuilder::createMutableTBAAAccessTag((llvm::MDBuilder *)&v76, *v47);
            llvm::Instruction::setMetadata((llvm::Instruction *)v34, 1, MutableTBAAAccessTag);
          }
        }
      }
LABEL_83:
      int v49 = v34[16];
      if ((v49 & 0xFE) == 0x3C)
      {
        *(_OWORD *)long long v78 = xmmword_1CFB2D310;
        *(_OWORD *)&v78[12] = *(long long *)((char *)&xmmword_1CFB2D310 + 12);
        llvm::Instruction::dropUnknownNonDebugMetadata((uint64_t)v34, (unsigned int *)v78, 7);
        int v49 = v34[16];
      }
      *(void *)&v78[24] = 0;
      uint64_t v79 = 0;
      *(void *)&v78[16] = &v78[24];
      *(_OWORD *)long long v78 = xmmword_1CFB2D2E0;
      unsigned int v50 = v49 - 33;
      BOOL v51 = v50 > 0x33;
      uint64_t v52 = (1 << v50) & 0x8000000000041;
      if (!v51 && v52 != 0)
      {
        int v54 = *(unsigned __int8 *)(v21 - 8);
        if (v54 == 84)
        {
          uint64_t v28 = 0;
        }
        else if (v54 == 39)
        {
          uint64_t v28 = (*(_DWORD *)(v21 + 56) + 1);
        }
        else
        {
          uint64_t v28 = 2;
        }
        int v55 = *(_DWORD *)(v21 - 4);
        if (v55 < 0 && (v29 = &v33[-4 * (v55 & 0x7FFFFFF)], uint64_t v30 = (uint64_t)*(v29 - 1), (v30 & 0xFFFFFFFF0) != 0))
        {
          uint64_t v31 = -(uint64_t)(v55 & 0x7FFFFFF);
          uint64_t v32 = (*((_DWORD *)v29 - 3) - *(_DWORD *)((char *)v29 - v30));
        }
        else
        {
          uint64_t v32 = 0;
          uint64_t v31 = -(uint64_t)(v55 & 0x7FFFFFF);
        }
        unint64_t v56 = -32 * v28 - 32 * v32 - 32 * v31 - 32;
        if ((v56 & 0x1FFFFFFFE0) != 0)
        {
          uint64_t v57 = 0;
          uint64_t v58 = (uint64_t *)(v21 + 40);
          uint64_t v59 = (v56 >> 5);
          do
          {
            int v60 = *((unsigned __int8 *)*(&v33[4 * v57++])[-4 * (*(_DWORD *)(v21 - 4) & 0x7FFFFFF)] + 8);
            if (v60 == 15)
            {
              uint64_t v61 = *v58;
              if (*v58 && (v57 + 1) < *(_DWORD *)(v61 + 8)) {
                uint64_t v62 = *(void *)(v61 + 8 * (v57 + 1) + 40);
              }
              else {
                uint64_t v62 = 0;
              }
              unsigned int v63 = **v33;
              uint64_t v77 = v62;
              uint64_t v64 = llvm::AttributeSet::removeAttributes(&v77, v63, (uint64_t)v78);
              if (v62 == v64) {
                uint64_t v65 = *v58;
              }
              else {
                uint64_t v65 = llvm::AttributeList::setAttributesAtIndex((void *)(v21 + 40), v63, v57, v64);
              }
              *uint64_t v58 = v65;
            }
          }
          while (v57 != v59);
        }
        unint64_t v66 = *v33;
        if (*((unsigned char *)*v33 + 8) == 15)
        {
          uint64_t v68 = (uint64_t *)(v21 + 40);
          uint64_t v67 = *(void *)(v21 + 40);
          if (v67 && *(_DWORD *)(v67 + 8) >= 2u) {
            uint64_t v25 = *(void *)(v67 + 48);
          }
          else {
            uint64_t v25 = 0;
          }
          unint64_t v69 = *v66;
          uint64_t v77 = v25;
          uint64_t v70 = llvm::AttributeSet::removeAttributes(&v77, v69, (uint64_t)v78);
          if (v25 == v70) {
            uint64_t v27 = *v68;
          }
          else {
            uint64_t v27 = llvm::AttributeList::setAttributesAtIndex((void *)(v21 + 40), v69, 0, v70);
          }
          *uint64_t v68 = v27;
        }
      }
      sub_1CC1E4850((uint64_t)&v78[16], *(void **)&v78[24]);
LABEL_114:
      uint64_t v21 = *(void *)(v21 + 8);
      uint64_t v71 = j - 3;
      if (!j) {
        uint64_t v71 = 0;
      }
      if ((uint64_t *)v21 != v71 + 5)
      {
LABEL_121:
        if (j == (uint64_t *)v18) {
          goto LABEL_122;
        }
        continue;
      }
      break;
    }
    while (1)
    {
      j = (uint64_t *)j[1];
      if (j == (uint64_t *)v18) {
        break;
      }
      long long v72 = j - 3;
      if (!j) {
        long long v72 = 0;
      }
      uint64_t v21 = v72[6];
      if ((uint64_t *)v21 != v72 + 5) {
        goto LABEL_121;
      }
    }
LABEL_122:
    if (LODWORD(v80[1]))
    {
      uint64_t v73 = *(llvm::ValueAsMetadata **)v80[0];
      uint64_t v74 = llvm::UndefValue::get(**(llvm::UndefValue ***)v80[0], v5);
      llvm::Value::doRAUW(v73, v74, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    if (v80[0] != &v81) {
      free(v80[0]);
    }
LABEL_126:
    uint64_t v16 = *(void *)(v16 + 8);
    if (v16 != v75) {
      continue;
    }
    break;
  }
}

void llvm::createRewriteStatepointsForGCLegacyPass(llvm *this)
{
}

uint64_t sub_1CCE80314(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF7879;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2640868;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)qword_1EBCF7880, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE803C4;
    v5[1] = &PassRegistry;
    unint64_t v4 = v5;
    std::__call_once(qword_1EBCF7880, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CCE803C4(uint64_t a1)
{
}

llvm *sub_1CCE8046C(uint64_t a1)
{
  char v2 = llvm::dbgs((llvm *)a1);
  BOOL v3 = v2;
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 2)
  {
    uint64_t v5 = (char *)*((void *)v2 + 4);
    if (*((char **)v2 + 3) == v5)
    {
      uint64_t v6 = "C";
      goto LABEL_10;
    }
    char v41 = 67;
  }
  else if (v4 == 1)
  {
    uint64_t v5 = (char *)*((void *)v2 + 4);
    if (*((char **)v2 + 3) == v5)
    {
      uint64_t v6 = "B";
      goto LABEL_10;
    }
    char v41 = 66;
  }
  else
  {
    if (v4) {
      goto LABEL_11;
    }
    uint64_t v5 = (char *)*((void *)v2 + 4);
    if (*((char **)v2 + 3) == v5)
    {
      uint64_t v6 = "U";
LABEL_10:
      llvm::raw_ostream::write(v2, v6, 1uLL);
      goto LABEL_11;
    }
    char v41 = 85;
  }
  *uint64_t v5 = v41;
  ++*((void *)v2 + 4);
LABEL_11:
  uint64_t v7 = (_DWORD *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v7 > 6uLL)
  {
    *(_DWORD *)((char *)v7 + 3) = 543519585;
    *uint64_t v7 = 1633822752;
    *((void *)v3 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v3, " (base ", 7uLL);
  }
  llvm::write_hex(v3, *(void *)(a1 + 16), 3, 0, 0);
  uint64_t v8 = *((void *)v3 + 4);
  if ((unint64_t)(*((void *)v3 + 3) - v8) > 2)
  {
    *(unsigned char *)(v8 + 2) = 32;
    *(_WORD *)uint64_t v8 = 11552;
    *((void *)v3 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v3, " - ", 3uLL);
  }
  int v9 = *(uint64_t ****)(a1 + 16);
  if (v9)
  {
    if ((*((unsigned char *)v9 + 23) & 0x10) == 0) {
      goto LABEL_30;
    }
    uint64_t v13 = ***v9;
    uint64_t v14 = *(void *)(v13 + 152);
    uint64_t v15 = *(unsigned int *)(v13 + 168);
    if (v15)
    {
      LODWORD(v16) = (v15 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v17 = (uint64_t ****)(v14 + 16 * v16);
      unint64_t v18 = *v17;
      if (*v17 == v9) {
        goto LABEL_26;
      }
      int v19 = 1;
      while (v18 != (uint64_t ***)-4096)
      {
        int v20 = v16 + v19++;
        uint64_t v16 = v20 & (v15 - 1);
        unint64_t v18 = *(uint64_t ****)(v14 + 16 * v16);
        if (v18 == v9)
        {
          uint64_t v17 = (uint64_t ****)(v14 + 16 * v16);
          goto LABEL_26;
        }
      }
    }
    uint64_t v17 = (uint64_t ****)(v14 + 16 * v15);
LABEL_26:
    uint64_t v21 = v17[1];
    size_t v22 = (size_t)*v21;
    uint64_t v11 = (const char *)(v21 + 2);
    size_t v12 = v22;
    int v10 = (void *)*((void *)v3 + 4);
    if (v22 <= *((void *)v3 + 3) - (void)v10)
    {
      if (!v12) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
LABEL_27:
    llvm::raw_ostream::write(v3, v11, v12);
    goto LABEL_30;
  }
  int v10 = (void *)*((void *)v3 + 4);
  uint64_t v11 = "nullptr";
  size_t v12 = 7;
  if (*((void *)v3 + 3) - (void)v10 <= 6uLL) {
    goto LABEL_27;
  }
LABEL_29:
  memcpy(v10, v11, v12);
  *((void *)v3 + 4) += v12;
LABEL_30:
  uint64_t v23 = (unsigned char *)*((void *)v3 + 4);
  if (*((unsigned char **)v3 + 3) == v23)
  {
    llvm::raw_ostream::write(v3, ")", 1uLL);
    uint64_t v24 = *((void *)v3 + 4);
  }
  else
  {
    *uint64_t v23 = 41;
    uint64_t v24 = *((void *)v3 + 4) + 1;
    *((void *)v3 + 4) = v24;
  }
  if ((unint64_t)(*((void *)v3 + 3) - v24) > 5)
  {
    *(_WORD *)(v24 + 4) = 8224;
    *(_DWORD *)uint64_t v24 = 1919903264;
    *((void *)v3 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v3, " for  ", 6uLL);
  }
  uint64_t v25 = *(uint64_t ****)a1;
  if ((*(unsigned char *)(*(void *)a1 + 23) & 0x10) == 0) {
    goto LABEL_44;
  }
  uint64_t v26 = ***v25;
  uint64_t v27 = *(void *)(v26 + 152);
  uint64_t v28 = *(unsigned int *)(v26 + 168);
  if (v28)
  {
    LODWORD(v29) = (v28 - 1) & ((v25 >> 4) ^ (v25 >> 9));
    uint64_t v30 = (uint64_t ****)(v27 + 16 * v29);
    uint64_t v31 = *v30;
    if (*v30 == v25) {
      goto LABEL_42;
    }
    int v32 = 1;
    while (v31 != (uint64_t ***)-4096)
    {
      int v33 = v29 + v32++;
      uint64_t v29 = v33 & (v28 - 1);
      uint64_t v31 = *(uint64_t ****)(v27 + 16 * v29);
      if (v31 == v25)
      {
        uint64_t v30 = (uint64_t ****)(v27 + 16 * v29);
        goto LABEL_42;
      }
    }
  }
  uint64_t v30 = (uint64_t ****)(v27 + 16 * v28);
LABEL_42:
  uint64_t v34 = v30[1];
  size_t v37 = (size_t)*v34;
  uint64_t v35 = (const char *)(v34 + 2);
  size_t v36 = v37;
  uint64_t v38 = (llvm::raw_ostream *)*((void *)v3 + 4);
  if (v37 > *((void *)v3 + 3) - (void)v38)
  {
    llvm::raw_ostream::write(v3, v35, v36);
LABEL_44:
    uint64_t v38 = (llvm::raw_ostream *)*((void *)v3 + 4);
    goto LABEL_47;
  }
  if (v36)
  {
    memcpy(v38, v35, v36);
    uint64_t v38 = (llvm::raw_ostream *)(*((void *)v3 + 4) + v36);
    *((void *)v3 + 4) = v38;
  }
LABEL_47:
  if (*((llvm::raw_ostream **)v3 + 3) == v38)
  {
    uint64_t v38 = llvm::raw_ostream::write(v3, ":", 1uLL);
  }
  else
  {
    *(unsigned char *)uint64_t v38 = 58;
    ++*((void *)v3 + 4);
  }
  __n128 result = llvm::dbgs(v38);
  unsigned int v40 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v40 >= *((void *)result + 3))
  {
    return llvm::raw_ostream::write(result, 10);
  }
  else
  {
    *((void *)result + 4) = v40 + 1;
    *unsigned int v40 = 10;
  }
  return result;
}

BOOL sub_1CCE8086C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  uint64_t v863 = v9;
  uint64_t v11 = v10;
  uint64_t v12 = v4;
  uint64_t v949 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *((unsigned int *)v5 + 2);
  uint64_t v840 = v4;
  uint64_t v849 = v5;
  if (!v13)
  {
    unsigned int v913 = v915;
    uint64_t v914 = 0x4000000000;
LABEL_9:
    unsigned int v19 = 0;
    HIDWORD(v911) = 64;
    memset(__p, 0, 96);
    *(_OWORD *)v942 = 0u;
    uint64_t v910 = v912;
LABEL_10:
    LODWORD(v911) = v19;
    goto LABEL_11;
  }
  uint64_t v14 = (uint64_t *)*v5;
  uint64_t v15 = 8 * v13;
  do
  {
    uint64_t v16 = *v14;
    if (*v14 && *(unsigned char *)(v16 + 16) == 33)
    {
      sub_1CCE884D4(*(llvm::BasicBlock **)(v16 - 96), *(void *)(v16 + 40), (int)v11);
      sub_1CCE884D4(*(llvm::BasicBlock **)(v16 - 64), *(void *)(v16 + 40), (int)v11);
    }
    ++v14;
    v15 -= 8;
  }
  while (v15);
  uint64_t v17 = *v8;
  uint64_t v18 = *((unsigned int *)v8 + 2);
  unsigned int v913 = v915;
  uint64_t v914 = 0x4000000000;
  if (!v18) {
    goto LABEL_9;
  }
  uint64_t v392 = &v17[v18];
  do
  {
    uint64_t v393 = *v17;
    uint64_t v910 = v912;
    unint64_t v911 = 0x4000000000;
    sub_1CC233A58(v393, 0, (uint64_t *)v942);
    if (LOBYTE(__p[1])) {
      v394 = v942[1];
    }
    else {
      v394 = 0;
    }
    if (LOBYTE(__p[1])) {
      int v395 = (uint64_t **)v942[0];
    }
    else {
      int v395 = 0;
    }
    if (v394)
    {
      uint64_t v396 = 32 * (void)v394;
      do
      {
        uint64_t v397 = **v395;
        if (v397 && *(_DWORD *)(v397 + 8) == 271
          || (*(_DWORD *)(v397 + 8) & 0xFE) == 0x12
          && (uint64_t v398 = *(void *)(v397 + 24)) != 0
          && *(_DWORD *)(v398 + 8) == 271)
        {
          if (v911 >= (unint64_t)HIDWORD(v911)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v910 + v911) = *v395;
          LODWORD(v911) = v911 + 1;
        }
        v395 += 4;
        v396 -= 32;
      }
      while (v396);
    }
    sub_1CCE88548((uint64_t)v393, (uint64_t *)v910, v911, (uint64_t)&v913);
    if (v910 != v912) {
      free(v910);
    }
    ++v17;
  }
  while (v17 != v392);
  uint64_t v8 = v849;
  unint64_t v399 = *((unsigned int *)v849 + 2);
  unsigned int v19 = v399;
  memset(__p, 0, 96);
  *(_OWORD *)v942 = 0u;
  uint64_t v910 = v912;
  unint64_t v911 = 0x4000000000;
  if (v399 < 0x41)
  {
    if (v399)
    {
      int v829 = v912;
      uint64_t v12 = v840;
      do
      {
        *(void *)int v829 = 0;
        *((void *)v829 + 1) = 0;
        *((_DWORD *)v829 + 4) = 0;
        sub_1CBFCB9AC((uint64_t)v829, (uint64_t)v942);
        *((void *)v829 + 4) = 0;
        *((void *)v829 + 5) = 0;
        *((void *)v829 + 3) = 0;
        sub_1CBFCBA2C((void *)v829 + 3, __p[1], (uint64_t)__p[2], ((char *)__p[2] - (char *)__p[1]) >> 3);
        *((_OWORD *)v829 + 3) = *(_OWORD *)&__p[4];
        *((void *)v829 + 9) = 0;
        *((_DWORD *)v829 + 20) = 0;
        *((void *)v829 + 8) = 0;
        sub_1CCE88A74((uint64_t *)v829 + 8, (uint64_t)&__p[6]);
        *((void *)v829 + 11) = 0;
        *((void *)v829 + 12) = 0;
        int v830 = v829 + 88;
        v830[2] = 0;
        sub_1CC0C57E8(v830, (unsigned char *)__p[9], (unsigned char *)__p[10], ((char *)__p[10] - (char *)__p[9]) >> 4);
        int v829 = v830 + 3;
        --v399;
      }
      while (v399);
    }
    else
    {
      uint64_t v12 = v840;
    }
    goto LABEL_10;
  }
  if (v399 <= 0x81) {
    uint64_t v400 = 129;
  }
  else {
    uint64_t v400 = v399;
  }
  v401 = (char *)malloc_type_malloc(112 * v400, 0x4065EBACuLL);
  if (!v401) {
LABEL_1335:
  }
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  uint64_t v402 = v401;
  uint64_t v403 = 0;
  uint64_t v404 = 112 * v399;
  do
  {
    uint64_t v405 = &v402[v403];
    *(void *)uint64_t v405 = 0;
    *((void *)v405 + 1) = 0;
    *((_DWORD *)v405 + 4) = 0;
    sub_1CBFCB9AC((uint64_t)&v402[v403], (uint64_t)v942);
    *((void *)v405 + 4) = 0;
    *((void *)v405 + 5) = 0;
    *((void *)v405 + 3) = 0;
    sub_1CBFCBA2C(&v402[v403 + 24], __p[1], (uint64_t)__p[2], ((char *)__p[2] - (char *)__p[1]) >> 3);
    *((_OWORD *)v405 + 3) = *(_OWORD *)&__p[4];
    *((void *)v405 + 9) = 0;
    *((_DWORD *)v405 + 20) = 0;
    *((void *)v405 + 8) = 0;
    sub_1CCE88A74((uint64_t *)&v402[v403 + 64], (uint64_t)&__p[6]);
    *((void *)v405 + 11) = 0;
    *((void *)v405 + 12) = 0;
    uint64_t v406 = &v402[v403 + 88];
    *((void *)v406 + 2) = 0;
    sub_1CC0C57E8(v406, (unsigned char *)__p[9], (unsigned char *)__p[10], ((char *)__p[10] - (char *)__p[9]) >> 4);
    v403 += 112;
  }
  while (v404 != v403);
  uint64_t v407 = (char *)v910;
  uint64_t v12 = v840;
  if (v911)
  {
    uint64_t v408 = 112 * v911;
    do
    {
      unsigned int v409 = &v407[v408];
      sub_1CD456CB4(&v407[v408 - 48]);
      int v410 = *(void **)&v407[v408 - 88];
      if (v410)
      {
        *((void *)v409 - 10) = v410;
        operator delete(v410);
      }
      MEMORY[0x1D25D9CD0](*((void *)v409 - 14), 8);
      v408 -= 112;
    }
    while (v408);
    uint64_t v407 = (char *)v910;
    uint64_t v12 = v840;
  }
  if (v407 != v912) {
    free(v407);
  }
  uint64_t v910 = v402;
  unint64_t v911 = __PAIR64__(v400, v19);
  uint64_t v8 = v849;
LABEL_11:
  unsigned int v831 = v11;
  sub_1CD456CB4(&__p[6]);
  if (__p[1])
  {
    __p[2] = __p[1];
    operator delete(__p[1]);
  }
  MEMORY[0x1D25D9CD0](v942[0], 8);
  uint64_t v856 = v910;
  v859 = (llvm::Value *)*v8;
  uint64_t v20 = v911;
  v942[1] = 0;
  v942[0] = 0;
  LODWORD(__p[0]) = 0;
  memset(&__p[1], 0, 44);
  memset(&__p[7], 0, 44);
  long long v944 = 0u;
  memset(v945, 0, 28);
  uint64_t v948 = 0;
  uint64_t v946 = 0;
  uint64_t v947 = 0;
  sub_1CCE88AE8(v12, (uint64_t)v942);
  uint64_t v853 = v20;
  if (v20)
  {
    uint64_t v254 = 0;
    while (1)
    {
      uint64_t v255 = *((void *)v859 + v254);
      uint64_t v904 = 0;
      int64x2_t v903 = 0;
      LODWORD(v905) = 0;
      uint64_t v907 = 0;
      *(void *)&long long v908 = 0;
      int64x2_t v906 = 0;
      __n128 v256 = (llvm *)sub_1CCE89798(v255, (uint64_t)v942, &v903);
      if (byte_1EBCF7908)
      {
        __n128 v256 = llvm::dbgs(v256);
        uint64_t v269 = (_OWORD *)*((void *)v256 + 4);
        if (*((void *)v256 + 3) - (void)v269 > 0xFuLL)
        {
          *uint64_t v269 = *(_OWORD *)"Live Variables:\n";
          *((void *)v256 + 4) += 16;
        }
        else
        {
          __n128 v256 = llvm::raw_ostream::write(v256, "Live Variables:\n", 0x10uLL);
        }
        uint64_t v270 = (llvm::Value **)v906;
        int v271 = v907;
        while (v270 != v271)
        {
          BOOL v272 = *v270;
          unsigned int v273 = llvm::dbgs(v256);
          int v274 = v273;
          uint64_t v275 = (unsigned char *)*((void *)v273 + 4);
          if (*((unsigned char **)v273 + 3) == v275)
          {
            llvm::raw_ostream::write(v273, " ", 1uLL);
          }
          else
          {
            *uint64_t v275 = 32;
            ++*((void *)v273 + 4);
          }
          if ((*((unsigned char *)v272 + 23) & 0x10) != 0)
          {
            uint64_t v276 = ***(void ***)v272;
            uint64_t v277 = *(void *)(v276 + 152);
            uint64_t v278 = *(unsigned int *)(v276 + 168);
            if (!v278) {
              goto LABEL_316;
            }
            LODWORD(v279) = (v278 - 1) & ((v272 >> 4) ^ (v272 >> 9));
            uint64_t v280 = (llvm::Value **)(v277 + 16 * v279);
            int v281 = *v280;
            if (*v280 != v272)
            {
              int v282 = 1;
              while (v281 != (llvm::Value *)-4096)
              {
                int v283 = v279 + v282++;
                uint64_t v279 = v283 & (v278 - 1);
                int v281 = *(llvm::Value **)(v277 + 16 * v279);
                if (v281 == v272)
                {
                  uint64_t v280 = (llvm::Value **)(v277 + 16 * v279);
                  goto LABEL_317;
                }
              }
LABEL_316:
              uint64_t v280 = (llvm::Value **)(v277 + 16 * v278);
            }
LABEL_317:
            uint64_t v284 = v280[1];
            size_t v287 = *(void *)v284;
            int v285 = (char *)v284 + 16;
            size_t v286 = v287;
            unint64_t v288 = (unsigned char *)*((void *)v274 + 4);
            if (v287 > *((void *)v274 + 3) - (void)v288)
            {
              llvm::raw_ostream::write(v274, v285, v286);
              goto LABEL_319;
            }
            if (v286)
            {
              memcpy(v288, v285, v286);
              unint64_t v288 = (unsigned char *)(*((void *)v274 + 4) + v286);
              *((void *)v274 + 4) = v288;
            }
          }
          else
          {
LABEL_319:
            unint64_t v288 = (unsigned char *)*((void *)v274 + 4);
          }
          if (*((unsigned char **)v274 + 3) == v288)
          {
            llvm::raw_ostream::write(v274, " ", 1uLL);
          }
          else
          {
            *unint64_t v288 = 32;
            ++*((void *)v274 + 4);
          }
          llvm::Value::print(v272, v274, 0);
          int v289 = (unsigned char *)*((void *)v274 + 4);
          if (*((unsigned char **)v274 + 3) == v289)
          {
            __n128 v256 = llvm::raw_ostream::write(v274, "\n", 1uLL);
          }
          else
          {
            *int v289 = 10;
            ++*((void *)v274 + 4);
          }
          ++v270;
          continue;
        }
      }
      if (byte_1EBCF79C8) {
        break;
      }
LABEL_342:
      sub_1CD542C18((uint64_t)v856 + 112 * v254, (uint64_t)&v903);
      if (v906)
      {
        uint64_t v907 = (llvm::Value **)v906;
        operator delete(v906);
      }
      MEMORY[0x1D25D9CD0](v903, 8);
      if (++v254 == v853) {
        goto LABEL_14;
      }
    }
    uint64_t v257 = llvm::dbgs(v256);
    uint64_t v258 = v257;
    uint64_t v259 = (void *)*((void *)v257 + 4);
    if (*((void *)v257 + 3) - (void)v259 > 0xEuLL)
    {
      qmemcpy(v259, "Safepoint For: ", 15);
      *((void *)v257 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v257, "Safepoint For: ", 0xFuLL);
    }
    uint64_t v260 = *(uint64_t ****)(v255 - 32);
    if ((*((unsigned char *)v260 + 23) & 0x10) == 0) {
      goto LABEL_333;
    }
    uint64_t v261 = ***v260;
    uint64_t v262 = *(void *)(v261 + 152);
    uint64_t v263 = *(unsigned int *)(v261 + 168);
    if (v263)
    {
      LODWORD(v264) = (v263 - 1) & ((v260 >> 4) ^ (v260 >> 9));
      uint64_t v265 = (uint64_t ****)(v262 + 16 * v264);
      int v266 = *v265;
      if (*v265 == v260)
      {
LABEL_331:
        int v290 = (size_t *)v265[1];
        size_t v293 = *v290;
        int v291 = v290 + 2;
        size_t v292 = v293;
        int v294 = (llvm::raw_ostream *)*((void *)v258 + 4);
        if (v293 <= *((void *)v258 + 3) - (void)v294)
        {
          if (v292)
          {
            memcpy(v294, v291, v292);
            int v294 = (llvm::raw_ostream *)(*((void *)v258 + 4) + v292);
            *((void *)v258 + 4) = v294;
          }
          goto LABEL_336;
        }
        llvm::raw_ostream::write(v258, (const char *)v291, v292);
LABEL_333:
        int v294 = (llvm::raw_ostream *)*((void *)v258 + 4);
LABEL_336:
        if (*((llvm::raw_ostream **)v258 + 3) == v294)
        {
          int v294 = llvm::raw_ostream::write(v258, "\n", 1uLL);
        }
        else
        {
          *(unsigned char *)int v294 = 10;
          ++*((void *)v258 + 4);
        }
        uint64_t v295 = llvm::dbgs(v294);
        unint64_t v296 = v295;
        uint64_t v297 = *((void *)v295 + 4);
        if ((unint64_t)(*((void *)v295 + 3) - v297) > 0x13)
        {
          *(_DWORD *)(v297 + 16) = 540701541;
          *(_OWORD *)uint64_t v297 = *(_OWORD *)"Number live values: ";
          *((void *)v295 + 4) += 20;
        }
        else
        {
          llvm::raw_ostream::write(v295, "Number live values: ", 0x14uLL);
        }
        sub_1CD098D14(v296, ((char *)v907 - (unsigned char *)v906) >> 3, 0, 0, 0);
        uint64_t v298 = (unsigned char *)*((void *)v296 + 4);
        if (*((unsigned char **)v296 + 3) == v298)
        {
          llvm::raw_ostream::write(v296, "\n", 1uLL);
        }
        else
        {
          *uint64_t v298 = 10;
          ++*((void *)v296 + 4);
        }
        goto LABEL_342;
      }
      int v267 = 1;
      while (v266 != (uint64_t ***)-4096)
      {
        int v268 = v264 + v267++;
        uint64_t v264 = v268 & (v263 - 1);
        int v266 = *(uint64_t ****)(v262 + 16 * v264);
        if (v266 == v260)
        {
          uint64_t v265 = (uint64_t ****)(v262 + 16 * v264);
          goto LABEL_331;
        }
      }
    }
    uint64_t v265 = (uint64_t ****)(v262 + 16 * v263);
    goto LABEL_331;
  }
LABEL_14:
  sub_1CD780114((uint64_t)&v945[8]);
  sub_1CD780114((uint64_t)&__p[10]);
  sub_1CD780114((uint64_t)&__p[4]);
  uint64_t v21 = (llvm *)sub_1CD780114((uint64_t)v942);
  v878[0] = 0;
  v878[1] = 0;
  int v879 = 0;
  uint64_t v881 = 0;
  uint64_t v882 = 0;
  uint64_t v880 = 0;
  size_t v22 = v849;
  if (v911)
  {
    unint64_t v23 = 0;
    do
    {
      uint64_t v24 = (char *)v910 + 112 * v23;
      uint64_t v25 = (*v22)[v23];
      v942[1] = 0;
      v942[0] = 0;
      LODWORD(__p[0]) = 0;
      sub_1CBFCB9AC((uint64_t)v942, (uint64_t)v24);
      memset(&__p[1], 0, 24);
      uint64_t v27 = (unsigned char *)*((void *)v24 + 3);
      uint64_t v26 = (unsigned char *)*((void *)v24 + 4);
      int64_t v28 = v26 - v27;
      if (v26 != v27)
      {
        if (v28 < 0) {
          goto LABEL_1332;
        }
        __p[1] = operator new(v26 - v27);
        __p[2] = __p[1];
        uint64_t v29 = (char *)__p[1] + 8 * (v28 >> 3);
        __p[3] = v29;
        memmove(__p[1], v27, v28);
        __p[2] = v29;
        size_t v22 = v849;
      }
      sub_1CC233A58(v25, 0, (uint64_t *)&v903);
      if ((_BYTE)v906 && v904)
      {
        uint64_t v30 = (void **)v903;
        uint64_t v31 = (void **)((char *)v903 + 32 * v904);
        do
        {
          __src = 0;
          int v32 = *v30;
          __src = *v30;
          if (LODWORD(__p[0]))
          {
            unsigned int v33 = ((v32 >> 4) ^ (v32 >> 9)) & (LODWORD(__p[0]) - 1);
            uint64_t v34 = (void *)*((void *)v942[0] + v33);
            if (v32 == v34)
            {
LABEL_24:
              sub_1CD77FBE4((uint64_t)v942, &__src);
              uint64_t v35 = __src;
              *(void *)sub_1CD68C4F4((uint64_t)v878, (uint64_t *)&__src) = v35;
            }
            else
            {
              int v36 = 1;
              while (v34 != (void *)-4096)
              {
                unsigned int v37 = v33 + v36++;
                unsigned int v33 = v37 & (LODWORD(__p[0]) - 1);
                uint64_t v34 = (void *)*((void *)v942[0] + v33);
                if (v32 == v34) {
                  goto LABEL_24;
                }
              }
            }
          }
          v30 += 4;
        }
        while (v30 != v31);
      }
      uint64_t v38 = (void **)__p[1];
      int v39 = (void **)__p[2];
      if (__p[1] != __p[2])
      {
        do
        {
          int64x2_t v903 = 0;
          unsigned int v40 = *v38++;
          int64x2_t v903 = v40;
          char v41 = sub_1CCE86698((llvm::ConstantAggregateZero **)v40, v7);
          *(void *)sub_1CD68C4F4((uint64_t)v878, (uint64_t *)&v903) = v41;
        }
        while (v38 != v39);
        uint64_t v38 = (void **)__p[1];
      }
      if (v38)
      {
        __p[2] = v38;
        operator delete(v38);
      }
      uint64_t v21 = (llvm *)MEMORY[0x1D25D9CD0](v942[0], 8);
      ++v23;
    }
    while (v23 < v911);
  }
  if (byte_1EBCF7A88)
  {
    unsigned int v42 = (llvm::raw_ostream *)llvm::errs(v21);
    int v43 = (void *)*((void *)v42 + 4);
    if (*((void *)v42 + 3) - (void)v43 > 0x1CuLL)
    {
      qmemcpy(v43, "Base Pairs (w/o Relocation):\n", 29);
      *((void *)v42 + 4) += 29;
    }
    else
    {
      unsigned int v42 = llvm::raw_ostream::write(v42, "Base Pairs (w/o Relocation):\n", 0x1DuLL);
    }
    BOOL v44 = v880;
    for (uint64_t i = v881; v44 != i; v44 += 2)
    {
      int v411 = (llvm::raw_ostream *)llvm::errs(v42);
      uint64_t v412 = *((void *)v411 + 4);
      if ((unint64_t)(*((void *)v411 + 3) - v412) > 8)
      {
        *(unsigned char *)(v412 + 8) = 32;
        *(void *)uint64_t v412 = *(void *)" derived ";
        *((void *)v411 + 4) += 9;
      }
      else
      {
        int v411 = llvm::raw_ostream::write(v411, " derived ", 9uLL);
      }
      size_t v413 = *v44;
      size_t v414 = (llvm::raw_ostream *)llvm::errs(v411);
      uint64_t v415 = (llvm *)llvm::Value::printAsOperand(v413, v414, 0, 0);
      uint64_t v416 = (llvm::raw_ostream *)llvm::errs(v415);
      uint64_t v417 = *((void *)v416 + 4);
      if ((unint64_t)(*((void *)v416 + 3) - v417) > 5)
      {
        *(_WORD *)(v417 + 4) = 8293;
        *(_DWORD *)uint64_t v417 = 1935761952;
        *((void *)v416 + 4) += 6;
      }
      else
      {
        uint64_t v416 = llvm::raw_ostream::write(v416, " base ", 6uLL);
      }
      uint64_t v418 = v44[1];
      uint64_t v419 = (llvm::raw_ostream *)llvm::errs(v416);
      uint64_t v420 = (llvm *)llvm::Value::printAsOperand(v418, v419, 0, 0);
      unsigned int v42 = (llvm::raw_ostream *)llvm::errs(v420);
      unsigned int v421 = (unsigned char *)*((void *)v42 + 4);
      if (*((unsigned char **)v42 + 3) == v421)
      {
        unsigned int v42 = llvm::raw_ostream::write(v42, "\n", 1uLL);
      }
      else
      {
        *unsigned int v421 = 10;
        ++*((void *)v42 + 4);
      }
    }
  }
  uint64_t v46 = v911;
  if (v911 + (unint64_t)v914 > HIDWORD(v914)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v911)
  {
    unint64_t v47 = 0;
    do
    {
      uint64_t v48 = (char *)v910 + 112 * v47;
      v942[0] = __p;
      v942[1] = (void *)0x8000000000;
      int v49 = (void **)*((void *)v48 + 3);
      unsigned int v50 = (void **)*((void *)v48 + 4);
      if (v49 == v50)
      {
        unsigned int v52 = 0;
        uint64_t v53 = (uint64_t *)__p;
      }
      else
      {
        do
        {
          int64x2_t v903 = 0;
          int64x2_t v903 = *v49;
          uint64_t v51 = *(void *)sub_1CD68C4F4((uint64_t)v878, (uint64_t *)&v903);
          if (LODWORD(v942[1]) >= (unint64_t)HIDWORD(v942[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v942[0] + LODWORD(v942[1])) = v51;
          unsigned int v52 = ++LODWORD(v942[1]);
          ++v49;
        }
        while (v49 != v50);
        uint64_t v53 = (uint64_t *)v942[0];
      }
      sub_1CCE88548((uint64_t)(*v849)[v47], v53, v52, (uint64_t)&v913);
      if (v942[0] != __p) {
        free(v942[0]);
      }
      ++v47;
      uint64_t v46 = v911;
    }
    while (v47 < v911);
  }
  int v54 = *v849;
  int v55 = v910;
  v942[1] = 0;
  v942[0] = 0;
  LODWORD(__p[0]) = 0;
  memset(&__p[1], 0, 44);
  memset(&__p[7], 0, 44);
  long long v944 = 0u;
  memset(v945, 0, 28);
  uint64_t v948 = 0;
  uint64_t v946 = 0;
  uint64_t v947 = 0;
  sub_1CCE88AE8(v840, (uint64_t)v942);
  if (v46)
  {
    for (uint64_t j = 0; j != v46; ++j)
    {
      uint64_t v57 = (uint64_t)v54[j];
      uint64_t v904 = 0;
      int64x2_t v903 = 0;
      LODWORD(v905) = 0;
      uint64_t v907 = 0;
      *(void *)&long long v908 = 0;
      int64x2_t v906 = 0;
      sub_1CCE89798(v57, (uint64_t)v942, &v903);
      uint64_t v58 = (void **)v906;
      uint64_t v59 = (void **)v907;
      while (v58 != v59)
      {
        int v60 = *v58++;
        __src = v60;
        size_t __nel = (size_t)v60;
        sub_1CD78015C((uint64_t)v878, (uint64_t *)&__src, (uint64_t *)&__nel);
      }
      sub_1CD542C18((uint64_t)v55 + 112 * j, (uint64_t)&v903);
      if (v906)
      {
        uint64_t v907 = (llvm::Value **)v906;
        operator delete(v906);
      }
      MEMORY[0x1D25D9CD0](v903, 8);
    }
  }
  sub_1CD780114((uint64_t)&v945[8]);
  sub_1CD780114((uint64_t)&__p[10]);
  sub_1CD780114((uint64_t)&__p[4]);
  uint64_t v61 = (llvm *)sub_1CD780114((uint64_t)v942);
  if (byte_1EBCF7A88)
  {
    uint64_t v62 = (llvm::raw_ostream *)llvm::errs(v61);
    unsigned int v63 = (void *)*((void *)v62 + 4);
    if (*((void *)v62 + 3) - (void)v63 > 0x1AuLL)
    {
      qmemcpy(v63, "Base Pairs: (w/Relocation)\n", 27);
      *((void *)v62 + 4) += 27;
    }
    else
    {
      uint64_t v62 = llvm::raw_ostream::write(v62, "Base Pairs: (w/Relocation)\n", 0x1BuLL);
    }
    uint64_t v64 = v880;
    for (uint64_t k = v881; v64 != k; v64 += 2)
    {
      int v423 = *v64;
      unint64_t v422 = v64[1];
      int v424 = (llvm::raw_ostream *)llvm::errs(v62);
      uint64_t v425 = *((void *)v424 + 4);
      if ((unint64_t)(*((void *)v424 + 3) - v425) > 8)
      {
        *(unsigned char *)(v425 + 8) = 32;
        *(void *)uint64_t v425 = *(void *)" derived ";
        *((void *)v424 + 4) += 9;
      }
      else
      {
        int v424 = llvm::raw_ostream::write(v424, " derived ", 9uLL);
      }
      uint64_t v426 = (llvm::raw_ostream *)llvm::errs(v424);
      size_t v427 = (llvm *)llvm::Value::printAsOperand(v423, v426, 0, 0);
      size_t v428 = (llvm::raw_ostream *)llvm::errs(v427);
      uint64_t v429 = *((void *)v428 + 4);
      if ((unint64_t)(*((void *)v428 + 3) - v429) > 5)
      {
        *(_WORD *)(v429 + 4) = 8293;
        *(_DWORD *)uint64_t v429 = 1935761952;
        *((void *)v428 + 4) += 6;
      }
      else
      {
        size_t v428 = llvm::raw_ostream::write(v428, " base ", 6uLL);
      }
      unsigned int v430 = (llvm::raw_ostream *)llvm::errs(v428);
      unint64_t v431 = (llvm *)llvm::Value::printAsOperand(v422, v430, 0, 0);
      uint64_t v62 = (llvm::raw_ostream *)llvm::errs(v431);
      uint64_t v432 = (unsigned char *)*((void *)v62 + 4);
      if (*((unsigned char **)v62 + 3) == v432)
      {
        uint64_t v62 = llvm::raw_ostream::write(v62, "\n", 1uLL);
      }
      else
      {
        *uint64_t v432 = 10;
        ++*((void *)v62 + 4);
      }
    }
  }
  unint64_t v66 = v849;
  if (v911)
  {
    uint64_t v67 = (char *)v910;
    uint64_t v68 = (char *)v910 + 112 * v911;
    do
    {
      unint64_t v69 = (void *)*((void *)v67 + 3);
      uint64_t v70 = (void *)*((void *)v67 + 4);
      v942[0] = v878;
      v942[1] = v67;
      if (v69 != v70)
      {
        while (1)
        {
          uint64_t v71 = v69 + 1;
          if (sub_1CCE89B20((uint64_t *)v942, v69)) {
            break;
          }
          ++v69;
          if (v71 == v70)
          {
            unint64_t v69 = v70;
            goto LABEL_76;
          }
        }
        while (v71 != v70)
        {
          if (!sub_1CCE89B20((uint64_t *)v942, v71)) {
            *v69++ = *v71;
          }
          ++v71;
        }
      }
LABEL_76:
      if (v69 != *((void **)v67 + 4)) {
        *((void *)v67 + 4) = v69;
      }
      v67 += 112;
    }
    while (v67 != v68);
  }
  if (v914) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  LODWORD(v914) = 0;
  v873[0] = 0;
  v873[1] = 0;
  int v874 = 0;
  uint64_t v876 = 0;
  v877 = 0;
  unint64_t v875 = 0;
  v868[0] = 0;
  v868[1] = 0;
  int v869 = 0;
  sub_1CBFCBCC4((uint64_t)v868, (uint64_t)v878);
  v870 = 0;
  int64x2_t v871 = 0;
  v872 = 0;
  long long v72 = v880;
  uint64_t v73 = (char *)v881 - (char *)v880;
  uint64_t v74 = v840;
  if (v881 == v880) {
    goto LABEL_84;
  }
  if (v73 < 0) {
    goto LABEL_1332;
  }
  uint64_t v75 = operator new((char *)v881 - (char *)v880);
  v870 = v75;
  int64x2_t v871 = (char *)v75;
  v872 = &v75[2 * (v73 >> 4)];
  size_t v76 = v73 & 0xFFFFFFFFFFFFFFF0;
  memcpy(v75, v72, v76);
  uint64_t v77 = (void *)((char *)v75 + v76);
  int64x2_t v871 = (char *)v75 + v76;
  if (!v76) {
    goto LABEL_84;
  }
  __dsta = (char *)v75 + v76;
  do
  {
    uint64_t v634 = *v75;
    uint64_t v633 = v75[1];
    v896[0] = v634;
    if (v634 == v633) {
      goto LABEL_954;
    }
    unsigned int v635 = 0;
    __src = v927;
    size_t __nel = 0x300000000;
    while (1)
    {
      unsigned int v636 = *(unsigned __int8 *)(v634 + 16);
      if (v634 && v636 == 62)
      {
        if (v635 >= HIDWORD(__nel)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)__src + v635) = v634;
        unsigned int v635 = __nel + 1;
        LODWORD(__nel) = __nel + 1;
        uint64_t v637 = -(uint64_t)(*(_DWORD *)(v634 + 20) & 0x7FFFFFF);
        goto LABEL_948;
      }
      if (!v634) {
        break;
      }
      BOOL v638 = v636 >= 0x1C && v636 - 79 >= 0xFFFFFFF3;
      if (!v638) {
        break;
      }
      BOOL isNoopCast = llvm::CastInst::isNoopCast((llvm::CastInst *)v634, (const llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(v634 + 40) + 56) + 40) + 272));
      unsigned int v635 = __nel;
      if (!isNoopCast) {
        break;
      }
      if (__nel >= HIDWORD(__nel)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__src + __nel) = v634;
      unsigned int v635 = __nel + 1;
      LODWORD(__nel) = __nel + 1;
      uint64_t v637 = -1;
LABEL_948:
      uint64_t v634 = *(void *)(v634 + 32 * v637);
    }
    if (v635 - 11 < 0xFFFFFFF6) {
      goto LABEL_952;
    }
    if (v634 != *(void *)sub_1CD68C4F4((uint64_t)v868, v896))
    {
      if (*(unsigned char *)(v634 + 16) == 83) {
        uint64_t v688 = v634;
      }
      else {
        uint64_t v688 = 0;
      }
      uint64_t v689 = sub_1CD68C4F4((uint64_t)v868, v896);
      if (*(unsigned char *)(*(void *)v689 + 16) == 83) {
        uint64_t v690 = *(void *)v689;
      }
      else {
        uint64_t v690 = 0;
      }
      if (!v688) {
        goto LABEL_952;
      }
      if (!v690) {
        goto LABEL_952;
      }
      uint64_t v691 = *(_DWORD *)(v688 + 20) & 0x7FFFFFF;
      if (v691 != (*(_DWORD *)(v690 + 20) & 0x7FFFFFF) || *(void *)(v688 + 40) != *(void *)(v690 + 40)) {
        goto LABEL_952;
      }
      v942[0] = (void *)1;
      for (uint64_t m = 1; m != 17; m += 2)
        v942[m] = (void *)-4096;
      if (v691)
      {
        uint64_t v693 = 0;
        uint64_t v694 = 0;
        do
        {
          int v695 = *(_DWORD *)(v688 + 20);
          if ((v695 & 0x40000000) != 0) {
            uint64_t v696 = *(void *)(v688 - 8);
          }
          else {
            uint64_t v696 = v688 - 32 * (v695 & 0x7FFFFFF);
          }
          uint64_t v697 = *(void *)(v696 + 32 * *(unsigned int *)(v688 + 60) + v694);
          int64x2_t v903 = *(void **)(v696 + v693);
          sub_1CD780268(v942, (uint64_t *)&v903)[1] = v697;
          v694 += 8;
          v693 += 32;
        }
        while (8 * v691 != v694);
        uint64_t v698 = 0;
        int v699 = *(_DWORD *)(v690 + 20);
        uint64_t v74 = v840;
        unint64_t v66 = v849;
        uint64_t v77 = __dsta;
        do
        {
          if ((v699 & 0x40000000) != 0) {
            uint64_t v700 = *(void *)(v690 - 8);
          }
          else {
            uint64_t v700 = v690 - 32 * (v699 & 0x7FFFFFF);
          }
          uint64_t v701 = sub_1CD780208((uint64_t)v942, *(void *)(v700 + 32 * v698));
          char v702 = (char)v942[0];
          size_t v703 = &v942[1];
          if (((uint64_t)v942[0] & 1) == 0) {
            size_t v703 = (void **)v942[1];
          }
          unsigned int v704 = __p[0];
          if ((uint64_t)v942[0]) {
            unsigned int v704 = 8;
          }
          if (&v703[2 * v704] == (void **)v701
            || ((int v699 = *(_DWORD *)(v690 + 20), (v699 & 0x40000000) != 0)
              ? (uint64_t v705 = *(void *)(v690 - 8))
              : (uint64_t v705 = v690 - 32 * (v699 & 0x7FFFFFF)),
                *(void *)(v701 + 8) != *(void *)(v705 + 32 * *(unsigned int *)(v690 + 60) + 8 * v698)))
          {
            if (((uint64_t)v942[0] & 1) == 0) {
              MEMORY[0x1D25D9CD0]();
            }
            goto LABEL_952;
          }
          ++v698;
        }
        while (v698 != v691);
      }
      else
      {
        char v702 = (char)v942[0];
      }
      if ((v702 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v942[1], 8);
      }
    }
    if (!__nel)
    {
      uint64_t v660 = 0;
      int v640 = 0;
      unint64_t v641 = 0;
      unsigned int v662 = 0;
      int64x2_t v903 = &v905;
      HIDWORD(v904) = 3;
      char v661 = 1;
      goto LABEL_987;
    }
    int v640 = 0;
    unint64_t v641 = 0;
    unint64_t v642 = (uint64_t *)__src;
    size_t v643 = (uint64_t *)((char *)__src + 8 * __nel);
    while (2)
    {
      uint64_t v644 = *v642;
      int v645 = *(unsigned __int8 *)(*v642 + 16);
      if (*v642) {
        BOOL v646 = (v645 - 79) >= 0xFFFFFFF3;
      }
      else {
        BOOL v646 = 0;
      }
      if (v646)
      {
        uint64_t v651 = **(void **)(v644 - 32);
        uint64_t v652 = (v645 - 28);
        uint64_t v653 = *(void *)v644;
        uint64_t CastContextHint = llvm::TargetTransformInfo::getCastContextHint(*v642);
        uint64_t v655 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)v863 + 840))(*(void *)v863, v652, v653, v651, CastContextHint, 3, v644);
        if (v656 == 1) {
          int v640 = 1;
        }
        BOOL v657 = __OFADD__(v641, v655);
        unint64_t v658 = v641 + v655;
        unint64_t v659 = ((uint64_t)(v641 + v655) >> 63) ^ 0x8000000000000000;
        goto LABEL_979;
      }
      if (v645 != 62) {
        uint64_t v644 = 0;
      }
      uint64_t v647 = (*(uint64_t (**)(void, void, void, void))(**(void **)v863 + 976))(*(void *)v863, *(void *)(v644 + 64), 0, 0);
      if (v648 == 1) {
        int v640 = 1;
      }
      if (__OFADD__(v641, v647)) {
        unint64_t v641 = ((uint64_t)(v641 + v647) >> 63) ^ 0x8000000000000000;
      }
      else {
        v641 += v647;
      }
      uint64_t v649 = *(_DWORD *)(v644 + 20) & 0x7FFFFFF;
      if (v649 != 1)
      {
        unsigned int v650 = 1;
        while (*(unsigned char *)(*(void *)(v644 - 32 * v649 + 32 * v650) + 16) == 16)
        {
          if (v649 == ++v650) {
            goto LABEL_982;
          }
        }
        BOOL v657 = __OFADD__(v641, 2);
        unint64_t v658 = v641 + 2;
        unint64_t v659 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_979:
        if (v657) {
          unint64_t v641 = v659;
        }
        else {
          unint64_t v641 = v658;
        }
      }
LABEL_982:
      if (++v642 != v643) {
        continue;
      }
      break;
    }
    uint64_t v660 = __nel;
    int64x2_t v903 = &v905;
    uint64_t v904 = 0x300000000;
    *((void *)&v908 + 1) = 0;
    int v909 = 0;
    if (__nel)
    {
      unint64_t v66 = v849;
      uint64_t v77 = __dsta;
      if (__nel >= 4) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(&v905, __src, 8 * __nel);
      char v661 = 0;
      unsigned int v662 = v660;
    }
    else
    {
      uint64_t v660 = 0;
      unsigned int v662 = 0;
      char v661 = 1;
      unint64_t v66 = v849;
      uint64_t v77 = __dsta;
    }
LABEL_987:
    LODWORD(v904) = v662;
    *(void *)&long long v908 = v634;
    *((void *)&v908 + 1) = v641;
    int v909 = v640;
    uint64_t v663 = (void *)v896[0];
    v942[0] = (void *)v896[0];
    v942[1] = &__p[1];
    __p[0] = (void *)0x300000000;
    uint64_t v74 = v840;
    if ((v661 & 1) == 0)
    {
      if (v662 >= 4) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v660) {
        memcpy(v942[1], v903, 8 * v660);
      }
      LODWORD(__p[0]) = v662;
      uint64_t v663 = v942[0];
    }
    *(_OWORD *)&__p[4] = v908;
    LODWORD(__p[6]) = v909;
    *(void *)&long long v916 = v663;
    DWORD2(v916) = 0;
    sub_1CC6125EC((uint64_t)v873, (uint64_t *)&v916, (_DWORD *)&v916 + 2, (uint64_t)v922);
    if (!v923[0]) {
      goto LABEL_1041;
    }
    v664 = (void **)v875;
    uint64_t v665 = v876;
    uint64_t v666 = ((char *)v876 - (unsigned char *)v875) >> 3;
    unint64_t v667 = 0x8E38E38E38E38E39 * v666;
    *((_DWORD *)v922[0] + 2) = 954437177 * v666;
    if (v665 < (void **)v877)
    {
      *uint64_t v665 = v942[0];
      v665[1] = v665 + 3;
      v665[2] = (void *)0x300000000;
      if (v665 != v942)
      {
        int v668 = (int)__p[0];
        if (LODWORD(__p[0]))
        {
          if (v942[1] == &__p[1])
          {
            if (LODWORD(__p[0]) >= 4) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v665 + 3, &__p[1], 8 * LODWORD(__p[0]));
            *((_DWORD *)v665 + 4) = v668;
          }
          else
          {
            v665[1] = v942[1];
            *((_DWORD *)v665 + 4) = v668;
            *((_DWORD *)v665 + 5) = HIDWORD(__p[0]);
            v942[1] = &__p[1];
            HIDWORD(__p[0]) = 0;
          }
          LODWORD(__p[0]) = 0;
        }
      }
      long long v669 = *(_OWORD *)&__p[4];
      *((_DWORD *)v665 + 16) = __p[6];
      *((_OWORD *)v665 + 3) = v669;
      size_t v670 = v665 + 9;
      goto LABEL_1040;
    }
    unint64_t v671 = v667 + 1;
    if (v667 + 1 > 0x38E38E38E38E38ELL) {
      goto LABEL_1332;
    }
    if (0x1C71C71C71C71C72 * ((v877 - (char *)v664) >> 3) > v671) {
      unint64_t v671 = 0x1C71C71C71C71C72 * ((v877 - (char *)v664) >> 3);
    }
    if (0x8E38E38E38E38E39 * ((v877 - (char *)v664) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v672 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v672 = v671;
    }
    if (v672)
    {
      if (v672 <= 0x38E38E38E38E38ELL)
      {
        int v673 = (char *)operator new(72 * v672);
        goto LABEL_1011;
      }
LABEL_1333:
      sub_1CB833614();
    }
    int v673 = 0;
LABEL_1011:
    BOOL v674 = &v673[72 * v667];
    *(void **)BOOL v674 = v942[0];
    *((void *)v674 + 1) = v674 + 24;
    *((void *)v674 + 2) = 0x300000000;
    int v675 = (int)__p[0];
    if (v674 + 8 != (char *)&v942[1] && LODWORD(__p[0]) != 0)
    {
      if (v942[1] == &__p[1])
      {
        if (LODWORD(__p[0]) >= 4)
        {
          *((_DWORD *)v674 + 4) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v674 + 24, &__p[1], 8 * LODWORD(__p[0]));
        *((_DWORD *)v674 + 4) = v675;
        v664 = (void **)v875;
        uint64_t v665 = v876;
      }
      else
      {
        *((void **)v674 + 1) = v942[1];
        int v706 = HIDWORD(__p[0]);
        *((_DWORD *)v674 + 4) = v675;
        *((_DWORD *)v674 + 5) = v706;
        v942[1] = &__p[1];
        HIDWORD(__p[0]) = 0;
      }
      LODWORD(__p[0]) = 0;
    }
    uint64_t v677 = &v673[72 * v667];
    *((_OWORD *)v677 + 3) = *(_OWORD *)&__p[4];
    *((_DWORD *)v677 + 16) = __p[6];
    size_t v670 = (void **)(v674 + 72);
    if (v665 == v664)
    {
      unint64_t v875 = &v673[72 * v667];
      uint64_t v876 = (void **)(v674 + 72);
      v877 = &v673[72 * v672];
      uint64_t v74 = v840;
      unint64_t v66 = v849;
      uint64_t v77 = __dsta;
      if (!v664) {
        goto LABEL_1040;
      }
      goto LABEL_1039;
    }
    uint64_t v839 = &v673[72 * v672];
    uint64_t v678 = 0;
    do
    {
      uint64_t v679 = (char *)&v665[v678];
      uint64_t v680 = &v674[v678 * 8];
      *((void *)v680 - 9) = v665[v678 - 9];
      uint64_t v681 = &v674[v678 * 8 - 48];
      *(void *)&v674[v678 * 8 - 64] = v681;
      *((void *)v680 - 7) = 0x300000000;
      unsigned int v682 = v665[v678 - 7];
      if (v682) {
        BOOL v683 = v680 == v679;
      }
      else {
        BOOL v683 = 1;
      }
      if (!v683)
      {
        int v684 = (char *)*((void *)v679 - 8);
        if (v679 - 48 == v684)
        {
          if (v682 >= 4) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v681, v684, 8 * LODWORD(v665[v678 - 7]));
          *((_DWORD *)v680 - 14) = v682;
        }
        else
        {
          *((void *)v680 - 8) = v684;
          *((_DWORD *)v680 - 14) = v682;
          *((_DWORD *)v680 - 13) = *((_DWORD *)&v665[v678 - 6] - 1);
          *((void *)v679 - 8) = v679 - 48;
          *((_DWORD *)&v665[v678 - 6] - 1) = 0;
        }
        *((_DWORD *)v679 - 14) = 0;
      }
      long long v685 = *(_OWORD *)(v679 - 24);
      *((_DWORD *)v680 - 2) = *((_DWORD *)v679 - 2);
      *(_OWORD *)(v680 - 24) = v685;
      v678 -= 9;
    }
    while (&v665[v678] != v664);
    v664 = (void **)v875;
    uint64_t v686 = v876;
    unint64_t v875 = &v674[v678 * 8];
    uint64_t v876 = (void **)(v674 + 72);
    v877 = v839;
    uint64_t v77 = __dsta;
    if (v686 == v664)
    {
      uint64_t v74 = v840;
      unint64_t v66 = v849;
      if (!v664) {
        goto LABEL_1040;
      }
LABEL_1039:
      operator delete(v664);
      goto LABEL_1040;
    }
    uint64_t v74 = v840;
    unint64_t v66 = v849;
    do
    {
      size_t v687 = (char *)*(v686 - 8);
      if (v686 - 6 != (void **)v687) {
        free(v687);
      }
      v686 -= 9;
    }
    while (v686 != v664);
    if (v664) {
      goto LABEL_1039;
    }
LABEL_1040:
    uint64_t v876 = v670;
LABEL_1041:
    if (v942[1] != &__p[1]) {
      free(v942[1]);
    }
    if (v903 != &v905) {
      free(v903);
    }
LABEL_952:
    if (__src != v927) {
      free(__src);
    }
LABEL_954:
    v75 += 2;
  }
  while (v75 != v77);
LABEL_84:
  sub_1CD456CB4(v868);
  if (!v911)
  {
LABEL_288:
    uint64_t v251 = 0;
    *((_DWORD *)v66 + 2) = 0;
    uint64_t v252 = &unk_1CFAC6000;
    goto LABEL_289;
  }
  unint64_t v78 = 0;
  do
  {
    uint64_t v79 = (*v66)[v78];
    unsigned int v80 = (char *)v910 + 112 * v78;
    v942[0] = __p;
    v942[1] = (void *)0x2000000000;
    long long v82 = (uint64_t *)*((void *)v80 + 3);
    uint64_t v81 = (uint64_t *)*((void *)v80 + 4);
    uint64_t v850 = (uint64_t)v80;
    if (v82 == v81) {
      goto LABEL_286;
    }
    size_t v846 = (char *)v910 + 112 * v78 + 64;
    v854 = (uint64_t *)*((void *)v80 + 4);
    int64_t v857 = v79;
    do
    {
      *(void *)&long long v916 = 0;
      uint64_t v83 = *v82;
      *(void *)&long long v916 = *v82;
      if (!v874) {
        goto LABEL_97;
      }
      uint64_t v84 = ((v83 >> 4) ^ (v83 >> 9)) & (v874 - 1);
      uint64_t v85 = *(void *)(v873[0] + 16 * v84);
      if (v83 == v85)
      {
LABEL_90:
        if (v84 == v874) {
          goto LABEL_97;
        }
        unsigned int v86 = *(_DWORD *)(v873[0] + 16 * v84 + 8);
        uint64_t v87 = v875;
        if ((char *)v875 + 72 * v86 == (char *)v876) {
          goto LABEL_97;
        }
        int v88 = (char *)v875 + 72 * v86;
        *(_OWORD *)v922 = *(_OWORD *)(v88 + 56);
        if (v79[16] == 33)
        {
          int64x2_t v903 = (void *)2;
          LODWORD(v904) = 0;
          sub_1CB90C9D4((uint64_t)v922, (uint64_t)&v903);
          uint64_t v81 = v854;
          uint64_t v79 = v857;
        }
        BOOL v89 = (uint64_t)v922[0] >= dword_1EBCF7B48;
        if (LODWORD(v922[1])) {
          BOOL v89 = SLODWORD(v922[1]) >= 0;
        }
        if (v89) {
          goto LABEL_97;
        }
        if (LODWORD(v942[1]) >= (unint64_t)HIDWORD(v942[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v90 = (const void **)(v88 + 8);
        *((void *)v942[0] + LODWORD(v942[1])) = v916;
        ++LODWORD(v942[1]);
        __src = v927;
        size_t __nel = 0x300000000;
        uint64_t v91 = LODWORD(v87[9 * v86 + 2]);
        if (v91 && &__src != (void **)v90)
        {
          if (v91 >= 4) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v927, *v90, 8 * v91);
          LODWORD(__nel) = v91;
          int v92 = (char *)__src + 8 * v91 - 8;
          uint64_t v79 = v857;
          if (__src < v92)
          {
            unsigned int v93 = (char *)__src + 8;
            do
            {
              uint64_t v94 = *((void *)v93 - 1);
              *((void *)v93 - 1) = *(void *)v92;
              *(void *)int v92 = v94;
              v92 -= 8;
              BOOL v638 = v93 >= v92;
              v93 += 8;
            }
            while (!v638);
          }
        }
        unint64_t v841 = v78;
        if (v79[16] == 84)
        {
          uint64_t v95 = *((void *)v79 + 4);
          uint64_t v96 = *((void *)v79 + 5);
          uint64_t v864 = (llvm::Value *)v87[9 * v86 + 6];
          unsigned int v97 = (llvm::Value **)sub_1CD68C4F4((uint64_t)v878, (uint64_t *)&v916);
          if (!__nel)
          {
            uint64_t v98 = 0;
LABEL_229:
            uint64_t v203 = v916;
            int64x2_t v903 = v98;
            uint64_t v204 = (uint64_t)v846;
LABEL_271:
            *(void *)sub_1CD7805E4(v204, (uint64_t *)&v903) = v203;
            unint64_t v78 = v841;
            uint64_t v74 = v840;
            unint64_t v66 = v849;
            if (__src != v927) {
              free(__src);
            }
            uint64_t v81 = v854;
            uint64_t v79 = v857;
            goto LABEL_97;
          }
          uint64_t v98 = 0;
          uint64_t v161 = 0;
          uint64_t v162 = *v97;
          unsigned int v163 = (llvm::Instruction **)__src;
          unsigned int v164 = (llvm::Instruction **)((char *)__src + 8 * __nel);
          if (v95) {
            BOOL v165 = v95 == v96 + 40;
          }
          else {
            BOOL v165 = 1;
          }
          if (v165) {
            uint64_t v166 = 0;
          }
          else {
            uint64_t v166 = v95 - 24;
          }
          int v167 = (uint64_t *)(v166 + 24);
          while (2)
          {
            uint64_t v168 = v161;
            uint64_t v169 = (llvm::Value *)v98;
            uint64_t v161 = *v163;
            uint64_t v98 = (uint64_t ***)llvm::Instruction::clone(*v163);
            uint64_t v170 = *(void *)(v166 + 40);
            v98[5] = (uint64_t **)v170;
            *(_WORD *)(v170 + 18) &= ~0x8000u;
            if ((*((unsigned char *)v98 + 23) & 0x10) != 0)
            {
              uint64_t v187 = *(void *)(v170 + 56);
              if (v187)
              {
                uint64_t v188 = *(llvm::ValueSymbolTable **)(v187 + 104);
                if (v188) {
                  llvm::ValueSymbolTable::reinsertValue(v188, (llvm::Value *)v98);
                }
              }
            }
            uint64_t v171 = *v167;
            v98[3] = (uint64_t **)*v167;
            v98[4] = (uint64_t **)v167;
            *(void *)(v171 + 8) = v98 + 3;
            *int v167 = (uint64_t)(v98 + 3);
            if ((*((unsigned char *)v161 + 23) & 0x10) != 0)
            {
              uint64_t v172 = ***(void ***)v161;
              uint64_t v173 = *(void *)(v172 + 152);
              uint64_t v174 = *(unsigned int *)(v172 + 168);
              if (!v174) {
                goto LABEL_198;
              }
              LODWORD(v175) = (v174 - 1) & ((v161 >> 4) ^ (v161 >> 9));
              uint64_t v176 = (llvm::Instruction **)(v173 + 16 * v175);
              uint64_t v177 = *v176;
              if (*v176 != v161)
              {
                int v178 = 1;
                while (v177 != (llvm::Instruction *)-4096)
                {
                  int v179 = v175 + v178++;
                  uint64_t v175 = v179 & (v174 - 1);
                  uint64_t v177 = *(llvm::Instruction **)(v173 + 16 * v175);
                  if (v177 == v161)
                  {
                    uint64_t v176 = (llvm::Instruction **)(v173 + 16 * v175);
                    goto LABEL_199;
                  }
                }
LABEL_198:
                uint64_t v176 = (llvm::Instruction **)(v173 + 16 * v174);
              }
LABEL_199:
              unsigned int v180 = v176[1];
              uint64_t v183 = *(void *)v180;
              int v182 = (char *)v180 + 16;
              uint64_t v181 = v183;
            }
            else
            {
              uint64_t v181 = 0;
              int v182 = &byte_1CFBCE98E;
            }
            LOWORD(v907) = 773;
            int64x2_t v903 = v182;
            uint64_t v904 = v181;
            int64x2_t v905 = ".remat";
            llvm::Value::setNameImpl((llvm::Value *)v98, (const char **)&v903);
            if (!v98 || *((unsigned char *)v98 + 16))
            {
              if (v169) {
                goto LABEL_203;
              }
LABEL_225:
              if (v864 != v162)
              {
                unint64_t v184 = (llvm::User *)v98;
                uint64_t v185 = v864;
                uint64_t v186 = v162;
                goto LABEL_227;
              }
              goto LABEL_228;
            }
            if ((*((unsigned char *)v98 + 23) & 0x10) == 0) {
              goto LABEL_223;
            }
            uint64_t v189 = ***v98;
            uint64_t v190 = *(void *)(v189 + 152);
            uint64_t v191 = *(unsigned int *)(v189 + 168);
            if (!v191) {
              goto LABEL_215;
            }
            LODWORD(v192) = (v191 - 1) & ((v98 >> 4) ^ (v98 >> 9));
            uint64_t v193 = (uint64_t ****)(v190 + 16 * v192);
            int v194 = *v193;
            if (*v193 != v98)
            {
              int v195 = 1;
              while (v194 != (uint64_t ***)-4096)
              {
                int v196 = v192 + v195++;
                uint64_t v192 = v196 & (v191 - 1);
                int v194 = *(uint64_t ****)(v190 + 16 * v192);
                if (v194 == v98)
                {
                  uint64_t v193 = (uint64_t ****)(v190 + 16 * v192);
                  goto LABEL_216;
                }
              }
LABEL_215:
              uint64_t v193 = (uint64_t ****)(v190 + 16 * v191);
            }
LABEL_216:
            uint64_t v197 = v193[1];
            unint64_t v200 = (unint64_t)*v197;
            int v198 = v197 + 2;
            unint64_t v199 = v200;
            if (v200 >= 5
              && (*(_DWORD *)v198 == *(_DWORD *)"llvm." ? (BOOL v201 = v198[4] == aLlvm_1[4]) : (BOOL v201 = 0), v201))
            {
              *((_DWORD *)v98 + 8) |= 0x2000u;
              int v202 = llvm::Function::lookupIntrinsicID(v198, v199);
            }
            else
            {
LABEL_223:
              int v202 = 0;
              *((_DWORD *)v98 + 8) &= ~0x2000u;
            }
            *((_DWORD *)v98 + 9) = v202;
            if (!v169) {
              goto LABEL_225;
            }
LABEL_203:
            unint64_t v184 = (llvm::User *)v98;
            uint64_t v185 = v168;
            uint64_t v186 = v169;
LABEL_227:
            llvm::User::replaceUsesOfWith(v184, v185, v186);
LABEL_228:
            if (++v163 == v164) {
              goto LABEL_229;
            }
            continue;
          }
        }
        uint64_t v99 = *((void *)v79 - 12);
        uint64_t v100 = v99 + 40;
        for (uint64_t n = *(void *)(v99 + 48); n != v100; uint64_t n = *(void *)(n + 8))
        {
          uint64_t v102 = n - 24;
          if (!n) {
            uint64_t v102 = 0;
          }
          if (*(unsigned char *)(v102 + 16) != 83)
          {
            unsigned int v103 = *(unsigned __int8 *)(n - 8) - 38;
            BOOL v104 = v103 > 0x38;
            uint64_t v105 = (1 << v103) & 0x100060000000001;
            if (v104 || v105 == 0) {
              uint64_t v100 = n;
            }
            else {
              uint64_t v100 = *(void *)(n + 8);
            }
            break;
          }
        }
        if (v100) {
          uint64_t v107 = v100 - 24;
        }
        else {
          uint64_t v107 = 0;
        }
        uint64_t v108 = *((void *)v79 - 8);
        uint64_t v109 = v108 + 40;
        for (iuint64_t i = *(void *)(v108 + 48); ii != v109; iuint64_t i = *(void *)(ii + 8))
        {
          uint64_t v111 = ii - 24;
          if (!ii) {
            uint64_t v111 = 0;
          }
          if (*(unsigned char *)(v111 + 16) != 83)
          {
            unsigned int v112 = *(unsigned __int8 *)(ii - 8) - 38;
            BOOL v104 = v112 > 0x38;
            uint64_t v113 = (1 << v112) & 0x100060000000001;
            if (v104 || v113 == 0) {
              uint64_t v109 = ii;
            }
            else {
              uint64_t v109 = *(void *)(ii + 8);
            }
            break;
          }
        }
        if (v109) {
          unint64_t v115 = (llvm::Value *)(v109 - 24);
        }
        else {
          unint64_t v115 = 0;
        }
        int v116 = (char *)&v87[9 * v86];
        unint64_t v860 = (llvm::Value *)*((void *)v116 + 6);
        unint64_t v865 = v115;
        uint64_t v837 = (llvm::Value **)(v116 + 48);
        int v117 = (llvm::Value **)sub_1CD68C4F4((uint64_t)v878, (uint64_t *)&v916);
        int32x2_t v118 = 0;
        if (__nel)
        {
          int32x2_t v118 = 0;
          uint64_t v119 = 0;
          uint64_t v120 = *v117;
          long long v121 = (llvm::Instruction **)__src;
          long long v122 = (llvm::Instruction **)((char *)__src + 8 * __nel);
          int v123 = (uint64_t *)(v107 + 24);
          while (1)
          {
            uint64_t v124 = v119;
            uint64_t v125 = v118;
            uint64_t v119 = *v121;
            int32x2_t v118 = (llvm::Value *)llvm::Instruction::clone(*v121);
            uint64_t v126 = *(void *)(v107 + 40);
            *((void *)v118 + 5) = v126;
            *(_WORD *)(v126 + 18) &= ~0x8000u;
            if ((*((unsigned char *)v118 + 23) & 0x10) != 0)
            {
              uint64_t v143 = *(void *)(v126 + 56);
              if (v143)
              {
                uint64_t v144 = *(llvm::ValueSymbolTable **)(v143 + 104);
                if (v144) {
                  llvm::ValueSymbolTable::reinsertValue(v144, v118);
                }
              }
            }
            uint64_t v127 = *v123;
            *((void *)v118 + 3) = *v123;
            *((void *)v118 + 4) = v123;
            *(void *)(v127 + 8) = (char *)v118 + 24;
            *int v123 = (uint64_t)v118 + 24;
            if ((*((unsigned char *)v119 + 23) & 0x10) == 0)
            {
              uint64_t v137 = 0;
              uint64_t v138 = &byte_1CFBCE98E;
              goto LABEL_152;
            }
            uint64_t v128 = ***(void ***)v119;
            uint64_t v129 = *(void *)(v128 + 152);
            uint64_t v130 = *(unsigned int *)(v128 + 168);
            if (!v130) {
              goto LABEL_150;
            }
            LODWORD(v131) = (v130 - 1) & ((v119 >> 4) ^ (v119 >> 9));
            uint64_t v132 = (llvm::Instruction **)(v129 + 16 * v131);
            __int16 v133 = *v132;
            if (*v132 != v119) {
              break;
            }
LABEL_151:
            unint64_t v136 = v132[1];
            uint64_t v139 = *(void *)v136;
            uint64_t v138 = (char *)v136 + 16;
            uint64_t v137 = v139;
LABEL_152:
            LOWORD(v907) = 773;
            int64x2_t v903 = v138;
            uint64_t v904 = v137;
            int64x2_t v905 = ".remat";
            llvm::Value::setNameImpl(v118, (const char **)&v903);
            if (!v118 || *((unsigned char *)v118 + 16))
            {
              if (v125) {
                goto LABEL_155;
              }
              goto LABEL_177;
            }
            if ((*((unsigned char *)v118 + 23) & 0x10) == 0) {
              goto LABEL_175;
            }
            uint64_t v145 = ***(void ***)v118;
            uint64_t v146 = *(void *)(v145 + 152);
            uint64_t v147 = *(unsigned int *)(v145 + 168);
            if (!v147) {
              goto LABEL_167;
            }
            LODWORD(v148) = (v147 - 1) & ((v118 >> 4) ^ (v118 >> 9));
            uint64_t v149 = (llvm::Value **)(v146 + 16 * v148);
            uint64_t v150 = *v149;
            if (*v149 != v118)
            {
              int v151 = 1;
              while (v150 != (llvm::Value *)-4096)
              {
                int v152 = v148 + v151++;
                uint64_t v148 = v152 & (v147 - 1);
                uint64_t v150 = *(llvm::Value **)(v146 + 16 * v148);
                if (v150 == v118)
                {
                  uint64_t v149 = (llvm::Value **)(v146 + 16 * v148);
                  goto LABEL_168;
                }
              }
LABEL_167:
              uint64_t v149 = (llvm::Value **)(v146 + 16 * v147);
            }
LABEL_168:
            unint64_t v153 = v149[1];
            unint64_t v156 = *(void *)v153;
            uint64_t v154 = (char *)v153 + 16;
            unint64_t v155 = v156;
            if (v156 >= 5 && *(_DWORD *)v154 == *(_DWORD *)"llvm." && v154[4] == aLlvm_1[4])
            {
              *((_DWORD *)v118 + 8) |= 0x2000u;
              int v158 = llvm::Function::lookupIntrinsicID(v154, v155);
              goto LABEL_176;
            }
LABEL_175:
            int v158 = 0;
            *((_DWORD *)v118 + 8) &= ~0x2000u;
LABEL_176:
            *((_DWORD *)v118 + 9) = v158;
            if (v125)
            {
LABEL_155:
              unsigned int v140 = v118;
              uint64_t v141 = v124;
              char v142 = v125;
LABEL_179:
              llvm::User::replaceUsesOfWith(v140, v141, v142);
              goto LABEL_180;
            }
LABEL_177:
            if (v860 != v120)
            {
              unsigned int v140 = v118;
              uint64_t v141 = v860;
              char v142 = v120;
              goto LABEL_179;
            }
LABEL_180:
            if (++v121 == v122) {
              goto LABEL_181;
            }
          }
          int v134 = 1;
          while (v133 != (llvm::Instruction *)-4096)
          {
            int v135 = v131 + v134++;
            uint64_t v131 = v135 & (v130 - 1);
            __int16 v133 = *(llvm::Instruction **)(v129 + 16 * v131);
            if (v133 == v119)
            {
              uint64_t v132 = (llvm::Instruction **)(v129 + 16 * v131);
              goto LABEL_151;
            }
          }
LABEL_150:
          uint64_t v132 = (llvm::Instruction **)(v129 + 16 * v130);
          goto LABEL_151;
        }
LABEL_181:
        unint64_t v861 = *v837;
        __int16 v159 = (llvm::Value **)sub_1CD68C4F4((uint64_t)v878, (uint64_t *)&v916);
        if (!__nel)
        {
          char v160 = 0;
LABEL_270:
          uint64_t v245 = v916;
          int64x2_t v903 = v118;
          *(void *)sub_1CD7805E4((uint64_t)v846, (uint64_t *)&v903) = v245;
          uint64_t v203 = v916;
          int64x2_t v903 = v160;
          uint64_t v204 = (uint64_t)v846;
          goto LABEL_271;
        }
        char v160 = 0;
        unint64_t v205 = 0;
        int v206 = *v159;
        BOOL v207 = (llvm::Instruction **)__src;
        unsigned int v208 = (llvm::Instruction **)((char *)__src + 8 * __nel);
        int v209 = (uint64_t *)((char *)v865 + 24);
        while (2)
        {
          uint64_t v210 = v205;
          unsigned int v211 = (llvm::Value *)v160;
          unint64_t v205 = *v207;
          char v160 = (uint64_t ***)llvm::Instruction::clone(*v207);
          uint64_t v212 = *((void *)v865 + 5);
          v160[5] = (uint64_t **)v212;
          *(_WORD *)(v212 + 18) &= ~0x8000u;
          if ((*((unsigned char *)v160 + 23) & 0x10) != 0)
          {
            uint64_t v229 = *(void *)(v212 + 56);
            if (v229)
            {
              uint64_t v230 = *(llvm::ValueSymbolTable **)(v229 + 104);
              if (v230) {
                llvm::ValueSymbolTable::reinsertValue(v230, (llvm::Value *)v160);
              }
            }
          }
          uint64_t v213 = *v209;
          v160[3] = (uint64_t **)*v209;
          v160[4] = (uint64_t **)v209;
          *(void *)(v213 + 8) = v160 + 3;
          uint64_t *v209 = (uint64_t)(v160 + 3);
          if ((*((unsigned char *)v205 + 23) & 0x10) != 0)
          {
            uint64_t v214 = ***(void ***)v205;
            uint64_t v215 = *(void *)(v214 + 152);
            uint64_t v216 = *(unsigned int *)(v214 + 168);
            if (!v216) {
              goto LABEL_239;
            }
            LODWORD(v217) = (v216 - 1) & ((v205 >> 4) ^ (v205 >> 9));
            int v218 = (llvm::Instruction **)(v215 + 16 * v217);
            int v219 = *v218;
            if (*v218 != v205)
            {
              int v220 = 1;
              while (v219 != (llvm::Instruction *)-4096)
              {
                int v221 = v217 + v220++;
                uint64_t v217 = v221 & (v216 - 1);
                int v219 = *(llvm::Instruction **)(v215 + 16 * v217);
                if (v219 == v205)
                {
                  int v218 = (llvm::Instruction **)(v215 + 16 * v217);
                  goto LABEL_240;
                }
              }
LABEL_239:
              int v218 = (llvm::Instruction **)(v215 + 16 * v216);
            }
LABEL_240:
            unsigned int v222 = v218[1];
            uint64_t v225 = *(void *)v222;
            uint64_t v224 = (char *)v222 + 16;
            uint64_t v223 = v225;
          }
          else
          {
            uint64_t v223 = 0;
            uint64_t v224 = &byte_1CFBCE98E;
          }
          LOWORD(v907) = 773;
          int64x2_t v903 = v224;
          uint64_t v904 = v223;
          int64x2_t v905 = ".remat";
          llvm::Value::setNameImpl((llvm::Value *)v160, (const char **)&v903);
          if (!v160 || *((unsigned char *)v160 + 16))
          {
            if (v211) {
              goto LABEL_244;
            }
LABEL_266:
            if (v861 != v206)
            {
              int v226 = (llvm::User *)v160;
              BOOL v227 = v861;
              unsigned int v228 = v206;
              goto LABEL_268;
            }
            goto LABEL_269;
          }
          if ((*((unsigned char *)v160 + 23) & 0x10) == 0) {
            goto LABEL_264;
          }
          uint64_t v231 = ***v160;
          uint64_t v232 = *(void *)(v231 + 152);
          uint64_t v233 = *(unsigned int *)(v231 + 168);
          if (!v233) {
            goto LABEL_256;
          }
          LODWORD(v234) = (v233 - 1) & ((v160 >> 4) ^ (v160 >> 9));
          uint64_t v235 = (uint64_t ****)(v232 + 16 * v234);
          int v236 = *v235;
          if (*v235 != v160)
          {
            int v237 = 1;
            while (v236 != (uint64_t ***)-4096)
            {
              int v238 = v234 + v237++;
              uint64_t v234 = v238 & (v233 - 1);
              int v236 = *(uint64_t ****)(v232 + 16 * v234);
              if (v236 == v160)
              {
                uint64_t v235 = (uint64_t ****)(v232 + 16 * v234);
                goto LABEL_257;
              }
            }
LABEL_256:
            uint64_t v235 = (uint64_t ****)(v232 + 16 * v233);
          }
LABEL_257:
          uint64_t v239 = v235[1];
          unint64_t v242 = (unint64_t)*v239;
          uint64_t v240 = v239 + 2;
          unint64_t v241 = v242;
          if (v242 >= 5 && (*(_DWORD *)v240 == *(_DWORD *)"llvm." ? (BOOL v243 = v240[4] == aLlvm_1[4]) : (BOOL v243 = 0), v243))
          {
            *((_DWORD *)v160 + 8) |= 0x2000u;
            int v244 = llvm::Function::lookupIntrinsicID(v240, v241);
          }
          else
          {
LABEL_264:
            int v244 = 0;
            *((_DWORD *)v160 + 8) &= ~0x2000u;
          }
          *((_DWORD *)v160 + 9) = v244;
          if (!v211) {
            goto LABEL_266;
          }
LABEL_244:
          int v226 = (llvm::User *)v160;
          BOOL v227 = v210;
          unsigned int v228 = v211;
LABEL_268:
          llvm::User::replaceUsesOfWith(v226, v227, v228);
LABEL_269:
          if (++v207 == v208) {
            goto LABEL_270;
          }
          continue;
        }
      }
      int v246 = 1;
      while (v85 != -4096)
      {
        int v247 = v84 + v246++;
        uint64_t v84 = v247 & (v874 - 1);
        uint64_t v85 = *(void *)(v873[0] + 16 * v84);
        if (v83 == v85) {
          goto LABEL_90;
        }
      }
LABEL_97:
      ++v82;
    }
    while (v82 != v81);
    uint64_t v248 = (void **)v942[0];
    if (LODWORD(v942[1]))
    {
      uint64_t v249 = 8 * LODWORD(v942[1]);
      do
      {
        int64x2_t v903 = 0;
        uint64_t v250 = *v248++;
        int64x2_t v903 = v250;
        sub_1CD77FBE4(v850, &v903);
        v249 -= 8;
      }
      while (v249);
      uint64_t v248 = (void **)v942[0];
    }
    if (v248 != __p) {
      free(v248);
    }
LABEL_286:
    ++v78;
  }
  while (v78 < v911);
  if (!v911) {
    goto LABEL_288;
  }
  unint64_t v433 = 0;
  uint64_t v251 = 0;
  uint64_t v434 = 0;
  v855 = 0;
  do
  {
    uint64_t v435 = (llvm::LLVMContext ***)(*v66)[v433];
    uint64_t v866 = (llvm::Value *)v910;
    unint64_t v436 = (char *)v910 + 112 * v433;
    v942[0] = __p;
    v942[1] = (void *)0x4000000000;
    int64x2_t v903 = &v905;
    uint64_t v904 = 0x4000000000;
    int v438 = (uint64_t *)*((void *)v436 + 3);
    uint64_t v437 = (uint64_t *)*((void *)v436 + 4);
    if ((unint64_t)((char *)v437 - (char *)v438) >= 0x201) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((unint64_t)(v437 - v438) > 0x40) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    while (v438 != v437)
    {
      uint64_t v439 = *v438;
      if (v904 >= (unint64_t)HIDWORD(v904)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v903 + v904) = v439;
      LODWORD(v904) = v904 + 1;
      uint64_t v440 = *(void *)(sub_1CD7806A4((uint64_t)v878, v439) + 8);
      if (LODWORD(v942[1]) >= (unint64_t)HIDWORD(v942[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v942[0] + LODWORD(v942[1])) = v440;
      ++LODWORD(v942[1]);
      ++v438;
    }
    uint64_t v441 = 0;
    size_t v442 = **v435;
    __src = v927;
    size_t __nel = 0x200000000;
    v931 = v442;
    v932 = &v940;
    v933 = &v941;
    uint64_t v934 = 0;
    int v935 = 0;
    __int16 v936 = 512;
    char v937 = 7;
    v929 = 0;
    v930 = 0;
    uint64_t v938 = 0;
    uint64_t v939 = 0;
    v940 = &unk_1F2616E88;
    v941 = &unk_1F2617008;
    v929 = v435[5];
    v930 = v435 + 3;
    unint64_t v443 = (unsigned __int8 *)v435[6];
    *(void *)&long long v916 = v443;
    if (v443)
    {
      llvm::MetadataTracking::track((uint64_t)&v916, v443, 2);
      uint64_t v441 = v916;
    }
    sub_1CB8461A4((uint64_t)&__src, 0, v441);
    if (!(void)v916) {
      goto LABEL_558;
    }
    int v519 = *(unsigned __int8 *)v916;
    if ((v519 - 4) > 0x1E)
    {
      if ((v519 - 3) >= 0xFFFFFFFE) {
        uint64_t v562 = v916;
      }
      else {
        uint64_t v562 = 0;
      }
      if ((v519 - 3) < 0xFFFFFFFE)
      {
        if (v519 == 3) {
          *(void *)(v916 + 8) = 0;
        }
        goto LABEL_558;
      }
      unint64_t v521 = v562 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v916 + 1) & 0x7F) != 2 && !*(_DWORD *)(v916 + 12)) {
        goto LABEL_558;
      }
      uint64_t v520 = *(void *)(v916 + 16);
      if ((v520 & 4) == 0) {
        goto LABEL_558;
      }
      unint64_t v521 = v520 & 0xFFFFFFFFFFFFFFF8;
      if (!v521) {
        goto LABEL_558;
      }
    }
    v922[0] = &v916;
    sub_1CC5FA668(v521 + 16, v922);
LABEL_558:
    int v444 = *((_DWORD *)v435 + 5);
    int v445 = *((unsigned __int8 *)v435 + 16);
    uint64_t __dst = v904;
    size_t v845 = (uint64_t *)v903;
    if (v445 == 84)
    {
      uint64_t v446 = 0;
    }
    else if (v445 == 39)
    {
      uint64_t v446 = (*((_DWORD *)v435 + 20) + 1);
    }
    else
    {
      uint64_t v446 = 2;
    }
    uint64_t v447 = v444 & 0x7FFFFFF;
    unsigned int v448 = &v435[-4 * v447];
    uint64_t v848 = v251;
    if (v444 < 0)
    {
      uint64_t v568 = (uint64_t)*(v448 - 1);
      if ((v568 & 0xFFFFFFFF0) != 0) {
        uint64_t v449 = (*((_DWORD *)v448 - 3) - *(_DWORD *)((char *)v448 - v568));
      }
      else {
        uint64_t v449 = 0;
      }
    }
    else
    {
      uint64_t v449 = 0;
    }
    uint64_t v450 = (uint64_t)&(&v435[-4 * v446])[-4 * v449 - 4];
    v922[0] = v923;
    v922[1] = (void *)0x800000000;
    unint64_t v451 = v450 - (void)v448;
    if ((unint64_t)(v450 - (void)v448) >= 0x101) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v448 != (llvm::LLVMContext ***)v450)
    {
      uint64_t v452 = (llvm::LLVMContext ***)v922[0];
      uint64_t v453 = 32 * v447 - 32 * v446 - 32 * v449 - 32;
      do
      {
        size_t v454 = *v448;
        v448 += 4;
        *v452++ = v454;
        v453 -= 32;
      }
      while (v453);
    }
    LODWORD(v922[1]) = v451 >> 5;
    sub_1CC233A58((char *)v435, 0, (uint64_t *)&v916);
    char v455 = 0;
    char v456 = 0;
    unint64_t v66 = v849;
    if (v918)
    {
      char v455 = v916;
      v921[0] = *(void *)((char *)&v916 + 1);
      *(void *)((char *)v921 + 7) = *((void *)&v916 + 1);
      char v456 = 1;
    }
    sub_1CC233A58((char *)v435, 2, (uint64_t *)&v916);
    if (v918)
    {
      char v835 = v916;
      v920[0] = *(void *)((char *)&v916 + 1);
      *(void *)((char *)v920 + 7) = *((void *)&v916 + 1);
      int v457 = 1;
    }
    else
    {
      char v835 = 0;
      int v457 = 0;
    }
    char v834 = v457;
    int64_t v458 = (uint64_t *)(v435 + 8);
    llvm::parseStatepointDirectivesFromAttrs((uint64_t)v435[8], &v897);
    if (v898) {
      unsigned int v459 = v897;
    }
    else {
      unsigned int v459 = 0;
    }
    uint64_t v460 = 2882400000;
    if (v900) {
      uint64_t v460 = v899;
    }
    uint64_t v836 = v460;
    size_t v833 = (uint64_t *)(v435 + 8);
    unsigned int v851 = v457;
    char v842 = v455;
    unsigned int v838 = v459;
    if ((llvm::AttributeList::hasFnAttr((uint64_t *)v435 + 8, "deopt-lowering", 0xEuLL) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v435, "deopt-lowering", 0xEuLL))
    {
      goto LABEL_623;
    }
    uint64_t v461 = *v458;
    *(void *)&long long v916 = *v458;
    if (llvm::AttributeList::hasFnAttr((uint64_t *)&v916, "deopt-lowering", 0xEuLL))
    {
      if (v461)
      {
        if (*(_DWORD *)(v461 + 8))
        {
          uint64_t v462 = *(void *)(v461 + 40);
          if (v462)
          {
            int v463 = *(_DWORD *)(v462 + 40);
            if (v463)
            {
              uint64_t v464 = *(void *)(v462 + 24);
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_1EBCBE588))
              {
                unint64_t v566 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override) {
                  unint64_t v566 = 0xFF51AFD7ED558CCDLL;
                }
                qword_1EBCBE580 = v566;
                __cxa_guard_release(&qword_1EBCBE588);
              }
              unint64_t v465 = 0x9DDFEA08EB382D69
                   * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xD285B0CDD5A6F0B9)) ^ ((0x9DDFEA08EB382D69
                                                                                          * (qword_1EBCBE580 ^ 0xD285B0CDD5A6F0B9)) >> 47) ^ 0xBDE99DB9A5C995DDLL);
              unsigned int v466 = (-348639895 * ((v465 >> 47) ^ v465)) ^ 0x65776F6C;
              for (juint64_t j = 1; ; ++jj)
              {
                unsigned int v468 = v466 & (v463 - 1);
                uint64_t v469 = v464 + 24 * v468;
                int v470 = *(void **)v469;
                if (*(void *)v469 == -1)
                {
                  if ("deopt-lowering" == (char *)-1) {
                    goto LABEL_618;
                  }
                }
                else if (v470 == (void *)-2)
                {
                  if ("deopt-lowering" == (char *)-2) {
                    goto LABEL_618;
                  }
                }
                else if (*(void *)(v469 + 8) == 14 {
                       && *v470 == 0x6F6C2D74706F6564
                }
                       && *(void *)((char *)v470 + 6) == 0x676E697265776F6CLL)
                {
                  goto LABEL_618;
                }
                if (v470 == (void *)-1) {
                  break;
                }
                unsigned int v466 = jj + v468;
              }
            }
          }
        }
      }
LABEL_623:
      char v487 = v456;
      goto LABEL_624;
    }
    uint64_t v472 = (*(v435 - 4))[14];
    if (!v472) {
      goto LABEL_623;
    }
    if (!*((_DWORD *)v472 + 2)) {
      goto LABEL_623;
    }
    uint64_t v473 = *((void *)v472 + 5);
    if (!v473) {
      goto LABEL_623;
    }
    int v474 = *(_DWORD *)(v473 + 40);
    if (!v474) {
      goto LABEL_623;
    }
    uint64_t v475 = *(void *)(v473 + 24);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCBE588))
    {
      unint64_t v567 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v567 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v567;
      __cxa_guard_release(&qword_1EBCBE588);
    }
    unint64_t v476 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xD285B0CDD5A6F0B9)) ^ ((0x9DDFEA08EB382D69
                                                                                * (qword_1EBCBE580 ^ 0xD285B0CDD5A6F0B9)) >> 47) ^ 0xBDE99DB9A5C995DDLL);
    unsigned int v477 = (-348639895 * ((v476 >> 47) ^ v476)) ^ 0x65776F6C;
    for (kuint64_t k = 1; ; ++kk)
    {
      unsigned int v479 = v477 & (v474 - 1);
      uint64_t v469 = v475 + 24 * v479;
      uint64_t v480 = *(void **)v469;
      if (*(void *)v469 == -1)
      {
        if ("deopt-lowering" == (char *)-1) {
          goto LABEL_618;
        }
        goto LABEL_607;
      }
      if (v480 != (void *)-2) {
        break;
      }
      if ("deopt-lowering" == (char *)-2) {
        goto LABEL_618;
      }
LABEL_607:
      if (v480 == (void *)-1) {
        goto LABEL_623;
      }
      unsigned int v477 = kk + v479;
    }
    if (*(void *)(v469 + 8) != 14) {
      goto LABEL_607;
    }
    if (*v480 != 0x6F6C2D74706F6564 || *(void *)((char *)v480 + 6) != 0x676E697265776F6CLL) {
      goto LABEL_607;
    }
LABEL_618:
    uint64_t v482 = *(void *)(v469 + 16);
    if (!v482 || *(_DWORD *)(v482 + 16) != 7) {
      goto LABEL_623;
    }
    uint64_t v483 = v482 + *(unsigned int *)(v482 + 12);
    unsigned int v484 = 1818850917;
    unsigned int v485 = bswap32(*(_DWORD *)(v483 + 25));
    unsigned int v486 = v457;
    if (v485 == 1818850917 && (unsigned int v484 = 1697474926, v485 = bswap32(*(_DWORD *)(v483 + 28)), v485 == 1697474926))
    {
      char v487 = v456;
      int v488 = 0;
    }
    else
    {
      char v487 = v456;
      if (v485 < v484) {
        int v488 = -1;
      }
      else {
        int v488 = 1;
      }
    }
    if (!v488) {
      v486 |= 2u;
    }
    unsigned int v851 = v486;
LABEL_624:
    int v489 = 0;
    inserted = (llvm::PointerType *)v435[9];
    int v491 = (char **)*(v435 - 4);
    if (v491 && !*((unsigned char *)v491 + 16))
    {
      int v492 = *((_DWORD *)v491 + 9);
      if (v492 == 198 || v492 == 195)
      {
        uint64_t v495 = (uint64_t)**v435;
        v896[0] = *((void *)v435[5][7] + 5) + 272;
        v896[1] = (uint64_t)v878;
        v896[2] = (uint64_t)&__src;
        v896[3] = v495;
        uint64_t v496 = sub_1CCE89BBC((uint64_t)v896, *(void *)v922[0]);
        uint64_t v498 = v497;
        uint64_t v500 = sub_1CCE89BBC((uint64_t)v896, *((void *)v922[0] + 1));
        uint64_t v501 = *((void *)v922[0] + 2);
        uint64_t v832 = *((void *)v922[0] + 3);
        LODWORD(v922[1]) = 0;
        if (!HIDWORD(v922[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)v922[0] = v496;
        unsigned int v502 = LODWORD(v922[1]) + 1;
        LODWORD(v922[1]) = v502;
        if (v502 >= HIDWORD(v922[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v922[0] + v502) = v498;
        unsigned int v503 = LODWORD(v922[1]) + 1;
        LODWORD(v922[1]) = v503;
        unint64_t v66 = v849;
        if (v503 >= HIDWORD(v922[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v922[0] + v503) = v500;
        unsigned int v504 = LODWORD(v922[1]) + 1;
        LODWORD(v922[1]) = v504;
        if (v504 >= HIDWORD(v922[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v922[0] + v504) = v499;
        unsigned int v505 = LODWORD(v922[1]) + 1;
        LODWORD(v922[1]) = v505;
        if (v505 >= HIDWORD(v922[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v922[0] + v505) = v501;
        *(void *)&long long v916 = &v917;
        *((void *)&v916 + 1) = 0x800000000;
        BOOL v638 = __CFADD__(v922[1], 1);
        uint64_t v506 = ++LODWORD(v922[1]);
        unsigned int v507 = 0;
        if (v638)
        {
          uint64_t v508 = &v917;
        }
        else
        {
          uint64_t v509 = (void **)v922[0];
          uint64_t v510 = 8 * v506;
          do
          {
            if (v507 >= HIDWORD(v916)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(v916 + 8 * v507) = **v509;
            unsigned int v507 = ++DWORD2(v916);
            ++v509;
            v510 -= 8;
          }
          while (v510);
          uint64_t v508 = (unsigned int *)v916;
        }
        uint64_t v511 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(void **)*v491 + 1576), (uint64_t)v508, v507, 0);
        uint64_t v512 = (void *)(v832 + 24);
        if (*(_DWORD *)(v832 + 32) >= 0x41u) {
          uint64_t v512 = (void *)*v512;
        }
        unint64_t v513 = (void *)*v512;
        if (v492 == 195)
        {
          int v514 = "__llvm_memcpy_element_unordered_atomic_safepoint_1";
          switch((unint64_t)v513)
          {
            case 1uLL:
              goto LABEL_670;
            case 2uLL:
              int v514 = "__llvm_memcpy_element_unordered_atomic_safepoint_2";
              goto LABEL_670;
            case 3uLL:
            case 5uLL:
            case 6uLL:
            case 7uLL:
              goto LABEL_1334;
            case 4uLL:
              int v514 = "__llvm_memcpy_element_unordered_atomic_safepoint_4";
              goto LABEL_670;
            case 8uLL:
              int v514 = "__llvm_memcpy_element_unordered_atomic_safepoint_8";
              goto LABEL_670;
            default:
              int v514 = "__llvm_memcpy_element_unordered_atomic_safepoint_16";
              goto LABEL_670;
          }
        }
        int v514 = "__llvm_memmove_element_unordered_atomic_safepoint_1";
        switch((unint64_t)v513)
        {
          case 1uLL:
            goto LABEL_670;
          case 2uLL:
            int v514 = "__llvm_memmove_element_unordered_atomic_safepoint_2";
            goto LABEL_670;
          case 3uLL:
          case 5uLL:
          case 6uLL:
          case 7uLL:
LABEL_1334:
            __break(1u);
            goto LABEL_1335;
          case 4uLL:
            int v514 = "__llvm_memmove_element_unordered_atomic_safepoint_4";
            goto LABEL_670;
          case 8uLL:
            int v514 = "__llvm_memmove_element_unordered_atomic_safepoint_8";
            goto LABEL_670;
          default:
            int v514 = "__llvm_memmove_element_unordered_atomic_safepoint_16";
LABEL_670:
            uint64_t v522 = (const char *)strlen(v514);
            inserted = llvm::Module::getOrInsertFunction((uint64_t)v491[5], (unsigned __int8 *)v514, v522, v511, 0);
            int v491 = v523;
            if ((unsigned int *)v916 != &v917) {
              free((void *)v916);
            }
            break;
        }
      }
      else if (v492 == 119)
      {
        *(void *)&long long v916 = &v917;
        *((void *)&v916 + 1) = 0x800000000;
        if (LODWORD(v922[1]))
        {
          unsigned int v493 = 0;
          int v515 = (void **)v922[0];
          uint64_t v516 = 8 * LODWORD(v922[1]);
          do
          {
            if (v493 >= HIDWORD(v916)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(v916 + 8 * v493) = **v515;
            unsigned int v493 = ++DWORD2(v916);
            ++v515;
            v516 -= 8;
          }
          while (v516);
          uint64_t v494 = (unsigned int *)v916;
        }
        else
        {
          unsigned int v493 = 0;
          uint64_t v494 = &v917;
        }
        uint64_t v517 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(void **)*v491 + 1576), (uint64_t)v494, v493, 0);
        inserted = llvm::Module::getOrInsertFunction((uint64_t)v491[5], "__llvm_deoptimize", (const char *)0x11, v517, 0);
        int v491 = v518;
        if ((unsigned int *)v916 != &v917) {
          free((void *)v916);
        }
        int v489 = 1;
        goto LABEL_673;
      }
      int v489 = 0;
    }
LABEL_673:
    if (*((unsigned char *)v435 + 16) != 84)
    {
      uint64_t v536 = (uint64_t)*(v435 - 12);
      uint64_t v537 = (uint64_t)*(v435 - 8);
      LOBYTE(v887) = v835;
      *(void *)((char *)&v887 + 1) = v920[0];
      *((void *)&v887 + 1) = *(void *)((char *)v920 + 7);
      char v888 = v834;
      *(_DWORD *)int64x2_t v889 = *(_DWORD *)v901;
      *(_DWORD *)&v889[3] = *(_DWORD *)&v901[3];
      LOBYTE(v884) = v842;
      *((void *)&v884 + 1) = *(void *)((char *)v921 + 7);
      *(void *)((char *)&v884 + 1) = v921[0];
      char v885 = v487;
      *(_DWORD *)uint64_t v886 = *(_DWORD *)v902;
      *(_DWORD *)&v886[3] = *(_DWORD *)&v902[3];
      *(void *)&long long v916 = "statepoint_token";
      __int16 v919 = 259;
      uint64_t v524 = (uint64_t ***)llvm::IRBuilderBase::CreateGCStatepointInvoke((uint64_t)&__src, v836, (const llvm::APInt *)v838, (uint64_t)inserted, v491, v536, v537, v851, (char *)v922[0], LODWORD(v922[1]), &v887, &v884, v845, __dst, (uint64_t)&v916);
      *((_WORD *)v524 + 9) = *((_WORD *)v524 + 9) & 0xF003 | *((_WORD *)v435 + 9) & 0xFFC;
      v524[8] = (uint64_t **)sub_1CCE89F98(**v435, (uint64_t)v435[8], (uint64_t)v524[8]);
      uint64_t v538 = (uint64_t)*(v435 - 8);
      uint64_t v539 = v538 + 40;
      uint64_t v540 = *(void *)(v538 + 48);
      if (v540 == v538 + 40)
      {
        uint64_t v540 = v538 + 40;
      }
      else
      {
        while (1)
        {
          uint64_t v541 = v540 - 24;
          if (!v540) {
            uint64_t v541 = 0;
          }
          if (*(unsigned char *)(v541 + 16) != 83) {
            break;
          }
          uint64_t v540 = *(void *)(v540 + 8);
          if (v540 == v539)
          {
            uint64_t v540 = v538 + 40;
            goto LABEL_700;
          }
        }
        unsigned int v542 = *(unsigned __int8 *)(v540 - 8) - 38;
        BOOL v104 = v542 > 0x38;
        uint64_t v543 = (1 << v542) & 0x100060000000001;
        if (!v104 && v543 != 0) {
          uint64_t v540 = *(void *)(v540 + 8);
        }
      }
LABEL_700:
      uint64_t v545 = 0;
      if (v540) {
        uint64_t v546 = v540 - 24;
      }
      else {
        uint64_t v546 = 0;
      }
      v929 = *(llvm::LLVMContext ***)(v546 + 40);
      v930 = (void **)(v546 + 24);
      uint64_t v547 = *(unsigned __int8 **)(v546 + 48);
      v896[0] = (uint64_t)v547;
      if (v547)
      {
        llvm::MetadataTracking::track((uint64_t)v896, v547, 2);
        uint64_t v545 = v896[0];
      }
      sub_1CB8461A4((uint64_t)&__src, 0, v545);
      if (v896[0])
      {
        int v559 = *(unsigned __int8 *)v896[0];
        if ((v559 - 4) > 0x1E)
        {
          if ((v559 - 3) >= 0xFFFFFFFE) {
            uint64_t v564 = v896[0];
          }
          else {
            uint64_t v564 = 0;
          }
          if ((v559 - 3) < 0xFFFFFFFE)
          {
            if (v559 == 3) {
              *(void *)(v896[0] + 8) = 0;
            }
            goto LABEL_706;
          }
          unint64_t v561 = v564 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v896[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v896[0] + 12)) {
            goto LABEL_706;
          }
          uint64_t v560 = *(void *)(v896[0] + 16);
          if ((v560 & 4) == 0) {
            goto LABEL_706;
          }
          unint64_t v561 = v560 & 0xFFFFFFFFFFFFFFF8;
          if (!v561) {
            goto LABEL_706;
          }
        }
        *(void *)&long long v916 = v896;
        sub_1CC5FA668(v561 + 16, &v916);
      }
LABEL_706:
      uint64_t v548 = (unsigned __int8 *)v435[6];
      int64x2_t v883 = v548;
      if (v548)
      {
        llvm::MetadataTracking::track((uint64_t)&v883, v548, 2);
        uint64_t v549 = (uint64_t)v883;
      }
      else
      {
        uint64_t v549 = 0;
      }
      sub_1CB8461A4((uint64_t)&__src, 0, v549);
      if (v883)
      {
        int v550 = *v883;
        if ((v550 - 4) > 0x1E)
        {
          if ((v550 - 3) >= 0xFFFFFFFE) {
            unint64_t v554 = v883;
          }
          else {
            unint64_t v554 = 0;
          }
          if ((v550 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v555 = (unint64_t)(v554 + 8);
            goto LABEL_725;
          }
          if (v550 == 3) {
            *((void *)v883 + 1) = 0;
          }
        }
        else if ((v883[1] & 0x7F) == 2 || *((_DWORD *)v883 + 3))
        {
          uint64_t v565 = *((void *)v883 + 2);
          if ((v565 & 4) != 0)
          {
            unint64_t v555 = v565 & 0xFFFFFFFFFFFFFFF8;
            if (v555)
            {
LABEL_725:
              *(void *)&long long v916 = &v883;
              sub_1CC5FA668(v555 + 16, &v916);
            }
          }
        }
      }
      for (uint64_t mm = *(void *)(v538 + 48); mm != v539; uint64_t mm = *(void *)(mm + 8))
      {
        uint64_t v552 = mm - 24;
        if (mm) {
          uint64_t v553 = mm - 24;
        }
        else {
          uint64_t v553 = 0;
        }
        if (*(unsigned char *)(v553 + 16) != 83) {
          goto LABEL_792;
        }
      }
      uint64_t v552 = 0;
LABEL_792:
      if (*(unsigned char *)(v552 + 16) == 94) {
        uint64_t v569 = v552;
      }
      else {
        uint64_t v569 = 0;
      }
      *((void *)v866 + 14 * v433 + 7) = v569;
      sub_1CCE8A11C((uint64_t)v903, v904, (const llvm::APInt *)v942[0], LODWORD(v942[1]), v569, (uint64_t)&__src);
      uint64_t v570 = (uint64_t)*(v435 - 12);
      uint64_t v571 = v570 + 40;
      for (nuint64_t n = *(void *)(v570 + 48); nn != v571; nuint64_t n = *(void *)(nn + 8))
      {
        uint64_t v573 = nn - 24;
        if (!nn) {
          uint64_t v573 = 0;
        }
        if (*(unsigned char *)(v573 + 16) != 83)
        {
          unsigned int v574 = *(unsigned __int8 *)(nn - 8) - 38;
          BOOL v104 = v574 > 0x38;
          uint64_t v575 = (1 << v574) & 0x100060000000001;
          if (v104 || v575 == 0) {
            uint64_t v571 = nn;
          }
          else {
            uint64_t v571 = *(void *)(nn + 8);
          }
          break;
        }
      }
      uint64_t v532 = 0;
      if (v571) {
        unint64_t v535 = (llvm::LLVMContext **)(v571 - 24);
      }
      else {
        unint64_t v535 = 0;
      }
      v929 = (llvm::LLVMContext **)v535[5];
      v930 = (void **)(v535 + 3);
      goto LABEL_811;
    }
    LOBYTE(v893) = v835;
    *(void *)((char *)&v893 + 1) = v920[0];
    *((void *)&v893 + 1) = *(void *)((char *)v920 + 7);
    char v894 = v834;
    *(_DWORD *)unsigned int v895 = *(_DWORD *)v901;
    *(_DWORD *)&v895[3] = *(_DWORD *)&v901[3];
    LOBYTE(v890) = v842;
    *((void *)&v890 + 1) = *(void *)((char *)v921 + 7);
    *(void *)((char *)&v890 + 1) = v921[0];
    char v891 = v487;
    *(_DWORD *)long long v892 = *(_DWORD *)v902;
    *(_DWORD *)&v892[3] = *(_DWORD *)&v902[3];
    *(void *)&long long v916 = "safepoint_token";
    __int16 v919 = 259;
    uint64_t v524 = (uint64_t ***)llvm::IRBuilderBase::CreateGCStatepointCall((uint64_t)&__src, v836, (const llvm::APInt *)v838, (uint64_t)inserted, v491, v851, (char *)v922[0], LODWORD(v922[1]), &v893, &v890, v845, __dst, (uint64_t)&v916);
    __int16 v525 = *((_WORD *)v524 + 9) & 0xFFFC | *((_WORD *)v435 + 9) & 3;
    *((_WORD *)v524 + 9) = v525;
    *((_WORD *)v524 + 9) = *((_WORD *)v435 + 9) & 0xFFC | v525 & 0xF003;
    uint64_t v526 = sub_1CCE89F98(**v435, (uint64_t)v435[8], (uint64_t)v524[8]);
    uint64_t v527 = 0;
    v524[8] = (uint64_t **)v526;
    uint64_t v528 = v435[4];
    if (v528) {
      BOOL v529 = v528 == v435[5] + 5;
    }
    else {
      BOOL v529 = 1;
    }
    if (v529) {
      uint64_t v530 = 0;
    }
    else {
      uint64_t v530 = v528 - 3;
    }
    v929 = (llvm::LLVMContext **)v530[5];
    v930 = (void **)(v530 + 3);
    int v531 = (unsigned __int8 *)v530[6];
    v896[0] = (uint64_t)v531;
    if (v531)
    {
      llvm::MetadataTracking::track((uint64_t)v896, v531, 2);
      uint64_t v527 = v896[0];
    }
    sub_1CB8461A4((uint64_t)&__src, 0, v527);
    if (v896[0])
    {
      int v556 = *(unsigned __int8 *)v896[0];
      if ((v556 - 4) > 0x1E)
      {
        if ((v556 - 3) >= 0xFFFFFFFE) {
          uint64_t v563 = v896[0];
        }
        else {
          uint64_t v563 = 0;
        }
        if ((v556 - 3) < 0xFFFFFFFE)
        {
          if (v556 == 3) {
            *(void *)(v896[0] + 8) = 0;
          }
          goto LABEL_683;
        }
        unint64_t v558 = v563 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v896[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v896[0] + 12)) {
          goto LABEL_683;
        }
        uint64_t v557 = *(void *)(v896[0] + 16);
        if ((v557 & 4) == 0) {
          goto LABEL_683;
        }
        unint64_t v558 = v557 & 0xFFFFFFFFFFFFFFF8;
        if (!v558) {
          goto LABEL_683;
        }
      }
      *(void *)&long long v916 = v896;
      sub_1CC5FA668(v558 + 16, &v916);
    }
LABEL_683:
    uint64_t v532 = 0;
    unsigned int v533 = v435[4];
    if (v533) {
      BOOL v534 = v533 == v435[5] + 5;
    }
    else {
      BOOL v534 = 1;
    }
    if (v534) {
      unint64_t v535 = 0;
    }
    else {
      unint64_t v535 = v533 - 3;
    }
LABEL_811:
    unint64_t v577 = (unsigned __int8 *)v535[6];
    v896[0] = (uint64_t)v577;
    if (v577)
    {
      llvm::MetadataTracking::track((uint64_t)v896, v577, 2);
      uint64_t v532 = v896[0];
    }
    sub_1CB8461A4((uint64_t)&__src, 0, v532);
    if (v896[0])
    {
      int v578 = *(unsigned __int8 *)v896[0];
      if ((v578 - 4) > 0x1E)
      {
        if ((v578 - 3) >= 0xFFFFFFFE) {
          uint64_t v594 = v896[0];
        }
        else {
          uint64_t v594 = 0;
        }
        if ((v578 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v595 = v594 + 8;
          goto LABEL_864;
        }
        if (v578 == 3) {
          *(void *)(v896[0] + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v896[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v896[0] + 12))
      {
        uint64_t v632 = *(void *)(v896[0] + 16);
        if ((v632 & 4) != 0)
        {
          unint64_t v595 = v632 & 0xFFFFFFFFFFFFFFF8;
          if (v595)
          {
LABEL_864:
            *(void *)&long long v916 = v896;
            sub_1CC5FA668(v595 + 16, &v916);
          }
        }
      }
    }
    if (!v489)
    {
      *(void *)&long long v916 = "statepoint_token";
      __int16 v919 = 259;
      llvm::Value::setNameImpl((llvm::Value *)v524, (const char **)&v916);
      if (!v524 || *((unsigned char *)v524 + 16))
      {
LABEL_822:
        size_t v579 = (llvm::Type *)*v435;
        if (*((unsigned char *)*v435 + 8) == 7 || !v435[1])
        {
          if (v434 < v855)
          {
            *(void *)uint64_t v434 = v435;
            *((void *)v434 + 1) = 0;
            v434[16] = 0;
            v434 += 24;
            uint64_t v251 = v848;
            goto LABEL_882;
          }
          unint64_t v583 = 0xAAAAAAAAAAAAAAABLL * ((v434 - v848) >> 3) + 1;
          if (v583 <= 0xAAAAAAAAAAAAAAALL)
          {
            if (0x5555555555555556 * ((v855 - v848) >> 3) > v583) {
              unint64_t v583 = 0x5555555555555556 * ((v855 - v848) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v855 - v848) >> 3) >= 0x555555555555555) {
              unint64_t v584 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v584 = v583;
            }
            if (v584)
            {
              if (v584 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_1333;
              }
              uint64_t v585 = (char *)operator new(24 * v584);
            }
            else
            {
              uint64_t v585 = 0;
            }
            uint64_t v591 = &v585[8 * ((v434 - v848) >> 3)];
            *(void *)uint64_t v591 = v435;
            *((void *)v591 + 1) = 0;
            v591[16] = 0;
            if (v434 == v848)
            {
              uint64_t v251 = &v585[8 * ((v434 - v848) >> 3)];
            }
            else
            {
              uint64_t v592 = &v585[8 * ((v434 - v848) >> 3)];
              do
              {
                uint64_t v251 = v592 - 24;
                long long v593 = *(_OWORD *)(v434 - 24);
                *((void *)v592 - 1) = *((void *)v434 - 1);
                *(_OWORD *)(v592 - 24) = v593;
                v434 -= 24;
                v592 -= 24;
              }
              while (v434 != v848);
            }
            v855 = &v585[24 * v584];
            uint64_t v434 = v591 + 24;
            if (v848) {
              operator delete(v848);
            }
            goto LABEL_882;
          }
          goto LABEL_1332;
        }
        if ((*((unsigned char *)v435 + 23) & 0x10) == 0)
        {
          uint64_t v586 = 0;
          uint64_t v587 = "";
LABEL_875:
          __int16 v919 = 261;
          *(void *)&long long v916 = v587;
          *((void *)&v916 + 1) = v586;
          uint64_t GCResult = llvm::IRBuilderBase::CreateGCResult((llvm::IRBuilderBase *)&__src, (llvm::Instruction *)v524, v579, (const llvm::Twine *)&v916);
          uint64_t v607 = GCResult;
          uint64_t v608 = *v833;
          if (*v833)
          {
            uint64_t v251 = v848;
            if (*(_DWORD *)(v608 + 8) >= 2u) {
              uint64_t v609 = *(void *)(v608 + 48);
            }
            else {
              uint64_t v609 = 0;
            }
          }
          else
          {
            uint64_t v609 = 0;
            uint64_t v251 = v848;
          }
          *(void *)(GCResult + 64) = llvm::AttributeList::get(**(uint64_t ***)GCResult, 0, v609);
          if (v434 < v855)
          {
            *(void *)uint64_t v434 = v435;
            *((void *)v434 + 1) = v607;
            v434[16] = 0;
            v434 += 24;
            goto LABEL_882;
          }
          unint64_t v611 = 0xAAAAAAAAAAAAAAABLL * ((v434 - v251) >> 3) + 1;
          if (v611 <= 0xAAAAAAAAAAAAAAALL)
          {
            if (0x5555555555555556 * ((v855 - v251) >> 3) > v611) {
              unint64_t v611 = 0x5555555555555556 * ((v855 - v251) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v855 - v251) >> 3) >= 0x555555555555555) {
              unint64_t v612 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v612 = v611;
            }
            if (v612)
            {
              if (v612 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_1333;
              }
              size_t v613 = (char *)operator new(24 * v612);
            }
            else
            {
              size_t v613 = 0;
            }
            int v614 = &v613[8 * ((v434 - v251) >> 3)];
            *(void *)int v614 = v435;
            *((void *)v614 + 1) = v607;
            v614[16] = 0;
            if (v434 == v251)
            {
              uint64_t v615 = &v613[8 * ((v434 - v251) >> 3)];
            }
            else
            {
              unint64_t v616 = &v613[8 * ((v434 - v251) >> 3)];
              do
              {
                uint64_t v615 = v616 - 24;
                long long v617 = *(_OWORD *)(v434 - 24);
                *((void *)v616 - 1) = *((void *)v434 - 1);
                *(_OWORD *)(v616 - 24) = v617;
                v434 -= 24;
                v616 -= 24;
              }
              while (v434 != v251);
            }
            v855 = &v613[24 * v612];
            uint64_t v434 = v614 + 24;
            if (v251) {
              operator delete(v251);
            }
            uint64_t v251 = v615;
            goto LABEL_882;
          }
LABEL_1332:
          abort();
        }
        uint64_t v596 = **(void **)v579;
        uint64_t v597 = *(void *)(v596 + 152);
        uint64_t v598 = *(unsigned int *)(v596 + 168);
        if (v598)
        {
          LODWORD(v599) = (v598 - 1) & ((v435 >> 4) ^ (v435 >> 9));
          unsigned int v600 = (llvm::LLVMContext ****)(v597 + 16 * v599);
          uint64_t v601 = *v600;
          if (*v600 != v435)
          {
            int v602 = 1;
            while (v601 != (llvm::LLVMContext ***)-4096)
            {
              int v603 = v599 + v602++;
              uint64_t v599 = v603 & (v598 - 1);
              uint64_t v601 = *(llvm::LLVMContext ****)(v597 + 16 * v599);
              if (v601 == v435)
              {
                unsigned int v600 = (llvm::LLVMContext ****)(v597 + 16 * v599);
                goto LABEL_874;
              }
            }
            goto LABEL_873;
          }
        }
        else
        {
LABEL_873:
          unsigned int v600 = (llvm::LLVMContext ****)(v597 + 16 * v598);
        }
LABEL_874:
        uint64_t v604 = v600[1];
        uint64_t v605 = *v604;
        uint64_t v587 = (const char *)(v604 + 2);
        uint64_t v586 = v605;
        goto LABEL_875;
      }
      if ((*((unsigned char *)v524 + 23) & 0x10) == 0) {
        goto LABEL_924;
      }
      uint64_t v618 = ***v524;
      uint64_t v619 = *(void *)(v618 + 152);
      uint64_t v620 = *(unsigned int *)(v618 + 168);
      if (!v620) {
        goto LABEL_916;
      }
      LODWORD(v621) = (v620 - 1) & ((v524 >> 4) ^ (v524 >> 9));
      uint64_t v622 = (uint64_t ****)(v619 + 16 * v621);
      uint64_t v623 = *v622;
      if (*v622 != v524)
      {
        int v624 = 1;
        while (v623 != (uint64_t ***)-4096)
        {
          int v625 = v621 + v624++;
          uint64_t v621 = v625 & (v620 - 1);
          uint64_t v623 = *(uint64_t ****)(v619 + 16 * v621);
          if (v623 == v524)
          {
            uint64_t v622 = (uint64_t ****)(v619 + 16 * v621);
            goto LABEL_917;
          }
        }
LABEL_916:
        uint64_t v622 = (uint64_t ****)(v619 + 16 * v620);
      }
LABEL_917:
      int v626 = v622[1];
      unint64_t v629 = (unint64_t)*v626;
      int v627 = v626 + 2;
      unint64_t v628 = v629;
      if (v629 >= 5 && (*(_DWORD *)v627 == *(_DWORD *)"llvm." ? (BOOL v630 = v627[4] == aLlvm_1[4]) : (BOOL v630 = 0), v630))
      {
        *((_DWORD *)v524 + 8) |= 0x2000u;
        int v631 = llvm::Function::lookupIntrinsicID(v627, v628);
      }
      else
      {
LABEL_924:
        int v631 = 0;
        *((_DWORD *)v524 + 8) &= ~0x2000u;
      }
      *((_DWORD *)v524 + 9) = v631;
      goto LABEL_822;
    }
    if (v434 < v855)
    {
      *(void *)uint64_t v434 = v435;
      *((void *)v434 + 1) = 0;
      v434[16] = 1;
      v434 += 24;
      uint64_t v251 = v848;
      goto LABEL_882;
    }
    unint64_t v580 = 0xAAAAAAAAAAAAAAABLL * ((v434 - v848) >> 3) + 1;
    if (v580 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_1332;
    }
    if (0x5555555555555556 * ((v855 - v848) >> 3) > v580) {
      unint64_t v580 = 0x5555555555555556 * ((v855 - v848) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v855 - v848) >> 3) >= 0x555555555555555) {
      unint64_t v581 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v581 = v580;
    }
    if (!v581)
    {
      v582 = 0;
      goto LABEL_846;
    }
    if (v581 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_1333;
    }
    v582 = (char *)operator new(24 * v581);
LABEL_846:
    unsigned int v588 = &v582[8 * ((v434 - v848) >> 3)];
    *(void *)unsigned int v588 = v435;
    *((void *)v588 + 1) = 0;
    v588[16] = 1;
    for (i1 = v588; v434 != v848; v434 -= 24)
    {
      long long v590 = *(_OWORD *)(v434 - 24);
      *((void *)i1 - 1) = *((void *)v434 - 1);
      *(_OWORD *)(i1 - 24) = v590;
      i1 -= 24;
    }
    v855 = &v582[24 * v581];
    uint64_t v434 = v588 + 24;
    if (v848) {
      operator delete(v848);
    }
    uint64_t v251 = i1;
LABEL_882:
    *((void *)v866 + 14 * v433 + 6) = v524;
    sub_1CCE8A11C((uint64_t)v903, v904, (const llvm::APInt *)v942[0], LODWORD(v942[1]), (uint64_t)v524, (uint64_t)&__src);
    if (v922[0] != v923) {
      free(v922[0]);
    }
    if (__src != v927) {
      free(__src);
    }
    if (v903 != &v905) {
      free(v903);
    }
    if (v942[0] != __p) {
      free(v942[0]);
    }
    ++v433;
    unsigned int v610 = v911;
  }
  while (v433 < v911);
  *((_DWORD *)v66 + 2) = 0;
  uint64_t v74 = v840;
  uint64_t v252 = (void *)&unk_1CFAC6000;
  if (v251 != v434)
  {
    unsigned int v804 = *(llvm::ValueAsMetadata **)v251;
    int v803 = (llvm::Value *)*((void *)v251 + 1);
    *(void *)uint64_t v251 = 0;
    *((void *)v251 + 1) = 0;
    if (v803) {
      llvm::Value::doRAUW(v804, v803, (llvm::Value *)1);
    }
    if (v251[16])
    {
      uint64_t v805 = *((void *)v804 + 5);
      uint64_t v806 = *(void *)(v805 + 40);
      if (v806 == v805 + 40)
      {
        uint64_t v808 = 0;
      }
      else
      {
        if (v806) {
          uint64_t v807 = v806 - 24;
        }
        else {
          uint64_t v807 = 0;
        }
        if (*(unsigned __int8 *)(v807 + 16) - 29 >= 0xB) {
          uint64_t v808 = 0;
        }
        else {
          uint64_t v808 = (llvm::LLVMContext ***)v807;
        }
      }
      uint64_t v809 = (llvm::UnreachableInst *)operator new(0x40uLL);
      *((_DWORD *)v809 + 5) &= 0x38000000u;
      llvm::UnreachableInst::UnreachableInst(v809, **v808, (llvm::Instruction *)v808);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  if (v610)
  {
    uint64_t v810 = (char *)v910;
    uint64_t v811 = (char *)v910 + 112 * v610;
    do
    {
      sub_1CD47558C(v810);
      *((void *)v810 + 4) = *((void *)v810 + 3);
      v810 += 112;
    }
    while (v810 != v811);
  }
LABEL_289:
  size_t v847 = v251;
  sub_1CC27F058(v878);
  uint64_t v881 = v880;
  uint64_t v253 = &v905;
  int64x2_t v903 = &v905;
  uint64_t v904 = v252[168];
  if (!v911)
  {
    v942[0] = &__p[2];
LABEL_354:
    LODWORD(v305) = 0;
    LODWORD(v904) = 0;
    uint64_t v306 = (void **)v253;
    goto LABEL_355;
  }
  unint64_t v299 = 0;
  uint64_t v300 = 48;
  do
  {
    int v301 = *(char **)((char *)v910 + v300);
    unint64_t v302 = (char *)sub_1CD78079C(v301);
    int v303 = (char *)sub_1CD7807E8(v301);
    sub_1CD5C4C58((uint64_t)&v903, (uint64_t)v903 + 8 * v904, v302, v303);
    ++v299;
    v300 += 112;
  }
  while (v299 < v911);
  uint64_t v253 = (const char **)v903;
  uint64_t v304 = &__p[2];
  v942[0] = &__p[2];
  v942[1] = &__p[2];
  __p[0] = (void *)8;
  LODWORD(__p[1]) = 0;
  if (!v904) {
    goto LABEL_354;
  }
  unsigned int v707 = 0;
  unsigned int v708 = 8;
  uint64_t v709 = &__p[2];
  unint64_t v710 = (const char **)((char *)v903 + 8 * v904);
  while (2)
  {
    unint64_t v711 = *v253;
    if (v709 != v304) {
      goto LABEL_1105;
    }
    if (!v707) {
      goto LABEL_1103;
    }
    uint64_t v712 = 0;
    int v713 = 0;
    do
    {
      unint64_t v714 = (const char *)v304[v712];
      if (v714 == v711)
      {
        uint64_t v709 = v304;
        goto LABEL_1283;
      }
      if (v714 == (const char *)-2) {
        int v713 = &v304[v712];
      }
      ++v712;
    }
    while (v707 != v712);
    if (v713)
    {
      *int v713 = (void *)v711;
      --LODWORD(__p[1]);
      goto LABEL_1125;
    }
LABEL_1103:
    if (v708 > v707)
    {
      HIDWORD(__p[0]) = v707 + 1;
      v304[v707] = (void *)v711;
      goto LABEL_1125;
    }
LABEL_1105:
    if (3 * v708 <= 4 * (v707 - LODWORD(__p[1])))
    {
      if (v708 >= 0x40) {
        v708 *= 2;
      }
      else {
        unsigned int v708 = 128;
      }
    }
    else if (v708 - v707 >= v708 >> 3)
    {
      goto LABEL_1107;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v942, v708);
    unsigned int v708 = __p[0];
    uint64_t v709 = (void **)v942[1];
LABEL_1107:
    unsigned int v715 = v708 - 1;
    unsigned int v716 = (v708 - 1) & ((v711 >> 4) ^ (v711 >> 9));
    unint64_t v717 = &v709[v716];
    uint64_t v718 = (const char *)*v717;
    if (*v717 != (void *)-1)
    {
      uint64_t v719 = 0;
      int v720 = 1;
      while (v718 != v711)
      {
        if (v719) {
          BOOL v721 = 0;
        }
        else {
          BOOL v721 = v718 == (const char *)-2;
        }
        if (v721) {
          uint64_t v719 = v717;
        }
        unsigned int v722 = v716 + v720++;
        unsigned int v716 = v722 & v715;
        unint64_t v717 = &v709[v722 & v715];
        uint64_t v718 = (const char *)*v717;
        if (*v717 == (void *)-1) {
          goto LABEL_1119;
        }
      }
      goto LABEL_1279;
    }
    uint64_t v719 = 0;
LABEL_1119:
    if (v719) {
      unint64_t v717 = v719;
    }
    if (*v717 == v711)
    {
LABEL_1279:
      uint64_t v304 = (void **)v942[0];
LABEL_1283:
      unint64_t v812 = v253 + 1;
      if (v253 + 1 == v710) {
        goto LABEL_1325;
      }
      while (1)
      {
        uint64_t v813 = *v812;
        int v814 = (char *)v942[1];
        uint64_t v815 = HIDWORD(__p[0]);
        if (v942[1] == v942[0])
        {
          if (HIDWORD(__p[0]))
          {
            unsigned int v816 = 0;
            uint64_t v817 = 8 * HIDWORD(__p[0]);
            size_t v818 = (const char **)v942[1];
            while (*v818 != v813)
            {
              if (*v818 == (const char *)-2) {
                unsigned int v816 = v818;
              }
              ++v818;
              v817 -= 8;
              if (!v817)
              {
                if (!v816) {
                  goto LABEL_1292;
                }
                *unsigned int v816 = v813;
                --LODWORD(__p[1]);
                goto LABEL_1316;
              }
            }
            goto LABEL_1317;
          }
LABEL_1292:
          unsigned int v819 = __p[0];
          if (HIDWORD(__p[0]) < LODWORD(__p[0]))
          {
            ++HIDWORD(__p[0]);
            *((void *)v942[1] + v815) = v813;
            goto LABEL_1316;
          }
        }
        else
        {
          unsigned int v819 = __p[0];
        }
        if (3 * v819 <= 4 * (HIDWORD(__p[0]) - LODWORD(__p[1]))) {
          break;
        }
        if (v819 - HIDWORD(__p[0]) < v819 >> 3) {
          goto LABEL_1324;
        }
LABEL_1297:
        unsigned int v820 = v819 - 1;
        unsigned int v821 = (v819 - 1) & ((v813 >> 4) ^ (v813 >> 9));
        unint64_t v822 = &v814[8 * v821];
        uint64_t v823 = *(const char **)v822;
        if (*(void *)v822 != -1)
        {
          uint64_t v824 = 0;
          int v825 = 1;
          while (v823 != v813)
          {
            if (v824) {
              BOOL v826 = 0;
            }
            else {
              BOOL v826 = v823 == (const char *)-2;
            }
            if (v826) {
              uint64_t v824 = v822;
            }
            unsigned int v827 = v821 + v825++;
            unsigned int v821 = v827 & v820;
            unint64_t v822 = &v814[8 * (v827 & v820)];
            uint64_t v823 = *(const char **)v822;
            if (*(void *)v822 == -1) {
              goto LABEL_1309;
            }
          }
          goto LABEL_1317;
        }
        uint64_t v824 = 0;
LABEL_1309:
        if (v824) {
          uint64_t v828 = (const char **)v824;
        }
        else {
          uint64_t v828 = (const char **)v822;
        }
        if (*v828 == v813) {
          goto LABEL_1317;
        }
        if (*v828 == (const char *)-2) {
          --LODWORD(__p[1]);
        }
        else {
          ++HIDWORD(__p[0]);
        }
        *uint64_t v828 = v813;
LABEL_1316:
        *v253++ = *v812;
LABEL_1317:
        if (++v812 == v710)
        {
          uint64_t v709 = (void **)v942[1];
          uint64_t v304 = (void **)v942[0];
          goto LABEL_1325;
        }
      }
      if (v819 >= 0x40) {
        v819 *= 2;
      }
      else {
        unsigned int v819 = 128;
      }
LABEL_1324:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v942, v819);
      unsigned int v819 = __p[0];
      int v814 = (char *)v942[1];
      goto LABEL_1297;
    }
    if (*v717 == (void *)-2) {
      --LODWORD(__p[1]);
    }
    else {
      ++HIDWORD(__p[0]);
    }
    *unint64_t v717 = (void *)v711;
LABEL_1125:
    uint64_t v709 = (void **)v942[1];
    uint64_t v304 = (void **)v942[0];
    unsigned int v708 = __p[0];
    unsigned int v707 = HIDWORD(__p[0]);
    if (++v253 != v710) {
      continue;
    }
    break;
  }
  uint64_t v253 = v710;
LABEL_1325:
  uint64_t v306 = (void **)v903;
  unint64_t v305 = (unint64_t)((char *)v253 - (unsigned char *)v903) >> 3;
  LODWORD(v904) = v305;
  if (v709 != v304)
  {
    free(v709);
    LODWORD(v305) = v904;
    uint64_t v306 = (void **)v903;
  }
LABEL_355:
  size_t v307 = v910;
  unsigned int v308 = v911;
  long long v916 = 0uLL;
  unsigned int v917 = 0;
  v942[0] = __p;
  v942[1] = (void *)0xC800000000;
  if (v305 >= 0xC9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v862 = (unsigned int *)(*(void *)(v74 + 40) + 272);
  if (v305)
  {
    int v310 = &v306[v305];
    do
    {
      v922[0] = *v306;
      uint64_t v311 = (llvm::Type **)v922[0];
      uint64_t v312 = operator new(0x68uLL);
      v313 = (char *)(v312 + 8);
      v312[13] = v312[13] & 0x38000000 | 1;
      *(void *)uint64_t v312 = 0;
      *((void *)v312 + 1) = 0;
      *((void *)v312 + 2) = 0;
      *((void *)v312 + 3) = v312 + 8;
      int v314 = *v311;
      unsigned int v315 = (llvm::Type *)v862[1];
      __int16 v928 = 257;
      uint64_t v316 = *(void *)(v74 + 80);
      uint64_t v317 = v316 - 24;
      if (!v316) {
        uint64_t v317 = 0;
      }
      uint64_t v318 = v317 + 40;
      for (uint64_t i2 = *(void *)(v317 + 48); i2 != v318; uint64_t i2 = *(void *)(i2 + 8))
      {
        uint64_t v320 = (llvm::Instruction *)(i2 - 24);
        if (i2) {
          uint64_t v321 = i2 - 24;
        }
        else {
          uint64_t v321 = 0;
        }
        if (*(unsigned char *)(v321 + 16) != 83) {
          goto LABEL_373;
        }
      }
      uint64_t v320 = 0;
LABEL_373:
      llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v312 + 8), v314, v315, 0, (const char **)&__src, v320);
      sub_1CC020864((uint64_t *)&v916, v922)[1] = v313;
      if (LODWORD(v942[1]) >= (unint64_t)HIDWORD(v942[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v942[0] + LODWORD(v942[1])) = v313;
      ++LODWORD(v942[1]);
      ++v306;
    }
    while (v306 != v310);
  }
  if (!v308) {
    goto LABEL_359;
  }
  uint64_t v322 = &v307[14 * v308];
  int v323 = v307;
  while (2)
  {
    uint64_t v324 = v323[11];
    uint64_t v325 = v323[12];
    while (2)
    {
      if (v324 != v325)
      {
        v326 = *(llvm::Type ***)(v324 + 8);
        if (v917)
        {
          unsigned int v327 = ((v326 >> 4) ^ (v326 >> 9)) & (v917 - 1);
          size_t v328 = *(llvm::Type ***)(v916 + 16 * v327);
          if (v326 == v328)
          {
LABEL_382:
            v324 += 16;
            continue;
          }
          int v329 = 1;
          while (v328 != (llvm::Type **)-4096)
          {
            unsigned int v330 = v327 + v329++;
            unsigned int v327 = v330 & (v917 - 1);
            size_t v328 = *(llvm::Type ***)(v916 + 16 * v327);
            if (v326 == v328) {
              goto LABEL_382;
            }
          }
        }
        v922[0] = *(void **)(v324 + 8);
        uint64_t v331 = operator new(0x68uLL);
        uint64_t v332 = (char *)(v331 + 8);
        v331[13] = v331[13] & 0x38000000 | 1;
        *(void *)uint64_t v331 = 0;
        *((void *)v331 + 1) = 0;
        *((void *)v331 + 2) = 0;
        *((void *)v331 + 3) = v331 + 8;
        uint64_t v333 = *v326;
        unint64_t v334 = (llvm::Type *)v862[1];
        __int16 v928 = 257;
        uint64_t v335 = *(void *)(v74 + 80);
        uint64_t v336 = v335 - 24;
        if (!v335) {
          uint64_t v336 = 0;
        }
        uint64_t v337 = v336 + 40;
        for (uint64_t i3 = *(void *)(v336 + 48); i3 != v337; uint64_t i3 = *(void *)(i3 + 8))
        {
          unint64_t v339 = (llvm::Instruction *)(i3 - 24);
          if (i3) {
            uint64_t v340 = i3 - 24;
          }
          else {
            uint64_t v340 = 0;
          }
          if (*(unsigned char *)(v340 + 16) != 83) {
            goto LABEL_397;
          }
        }
        unint64_t v339 = 0;
LABEL_397:
        llvm::AllocaInst::AllocaInst((llvm::AllocaInst *)(v331 + 8), v333, v334, 0, (const char **)&__src, v339);
        sub_1CC020864((uint64_t *)&v916, v922)[1] = v332;
        if (LODWORD(v942[1]) >= (unint64_t)HIDWORD(v942[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v942[0] + LODWORD(v942[1])) = v332;
        ++LODWORD(v942[1]);
        goto LABEL_382;
      }
      break;
    }
    v323 += 14;
    if (v323 != v322) {
      continue;
    }
    break;
  }
  do
  {
    uint64_t v341 = v307[6];
    sub_1CCE8A588(*(void *)(v341 + 8), 0, (uint64_t *)&v916);
    if (*(unsigned char *)(v341 + 16) == 33) {
      sub_1CCE8A588(*(void *)(v307[7] + 8), 0, (uint64_t *)&v916);
    }
    int v343 = (uint64_t *)v307[11];
    int v344 = (uint64_t *)v307[12];
    while (v343 != v344)
    {
      uint64_t v346 = *v343;
      size_t v345 = (void *)v343[1];
      v343 += 2;
      __src = v345;
      uint64_t v347 = (llvm::Value *)sub_1CC020864((uint64_t *)&v916, &__src)[1];
      uint64_t v348 = operator new(0x80uLL);
      v348[21] = v348[21] & 0x38000000 | 2;
      *(void *)uint64_t v348 = 0;
      *((void *)v348 + 1) = 0;
      *((void *)v348 + 2) = 0;
      *((void *)v348 + 3) = v348 + 16;
      *((void *)v348 + 4) = 0;
      *((void *)v348 + 5) = 0;
      *((void *)v348 + 6) = 0;
      *((void *)v348 + 7) = v348 + 16;
      uint64_t v349 = *(void *)(v346 + 32);
      if (v349) {
        BOOL v350 = v349 == *(void *)(v346 + 40) + 40;
      }
      else {
        BOOL v350 = 1;
      }
      if (v350) {
        uint64_t v351 = 0;
      }
      else {
        uint64_t v351 = (llvm::Instruction *)(v349 - 24);
      }
      llvm::StoreInst::StoreInst((llvm::StoreInst *)(v348 + 16), (llvm::Type **)v346, v347, 0, v351);
    }
    if (byte_1EBCF7878)
    {
      __src = v927;
      size_t __nel = 0x4000000000;
      uint64_t v352 = v916 + 16 * v917;
      if (DWORD2(v916))
      {
        if (v917)
        {
          uint64_t v353 = 16 * v917;
          unint64_t v354 = (void *)v916;
          while ((*v354 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v354 += 2;
            v353 -= 16;
            if (!v353) {
              goto LABEL_418;
            }
          }
        }
        else
        {
          unint64_t v354 = (void *)v916;
        }
      }
      else
      {
LABEL_418:
        unint64_t v354 = (void *)(v916 + 16 * v917);
      }
      uint64_t v355 = v916 + 16 * v917;
      if (v354 == (void *)v355)
      {
        unsigned int v356 = 0;
      }
      else
      {
        unsigned int v356 = 0;
        do
        {
          if (v356 >= HIDWORD(__nel)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__src + v356) = v354[1];
          unsigned int v356 = __nel + 1;
          LODWORD(__nel) = __nel + 1;
          v357 = v354 + 2;
          unint64_t v354 = (void *)v352;
          if (v357 != (void *)v352)
          {
            unint64_t v354 = v357;
            while ((*v354 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v354 += 2;
              if (v354 == (void *)v352)
              {
                unint64_t v354 = (void *)v352;
                break;
              }
            }
          }
        }
        while (v354 != (void *)v355);
      }
      if (v341 && *(unsigned char *)(v341 + 16) == 33)
      {
        uint64_t v358 = *(void *)(v341 - 96);
        uint64_t v359 = v358 + 40;
        for (uint64_t i4 = *(void *)(v358 + 48); i4 != v359; uint64_t i4 = *(void *)(i4 + 8))
        {
          uint64_t v361 = i4 - 24;
          if (!i4) {
            uint64_t v361 = 0;
          }
          if (*(unsigned char *)(v361 + 16) != 83)
          {
            unsigned int v370 = *(unsigned __int8 *)(i4 - 8) - 38;
            BOOL v104 = v370 > 0x38;
            uint64_t v371 = (1 << v370) & 0x100060000000001;
            if (v104 || v371 == 0) {
              uint64_t v359 = i4;
            }
            else {
              uint64_t v359 = *(void *)(i4 + 8);
            }
            break;
          }
        }
        if (v359) {
          uint64_t v373 = (llvm::Instruction *)(v359 - 24);
        }
        else {
          uint64_t v373 = 0;
        }
        if (v356)
        {
          uint64_t v374 = (llvm::ConstantPointerNull ***)__src;
          uint64_t v375 = 8 * v356;
          do
          {
            uint64_t v376 = *v374++;
            uint64_t v377 = (llvm::Type **)llvm::ConstantPointerNull::get(v376[8], v342);
            uint64_t v378 = operator new(0x80uLL);
            v378[21] = v378[21] & 0x38000000 | 2;
            *(void *)uint64_t v378 = 0;
            *((void *)v378 + 1) = 0;
            *((void *)v378 + 2) = 0;
            *((void *)v378 + 3) = v378 + 16;
            *((void *)v378 + 4) = 0;
            *((void *)v378 + 5) = 0;
            *((void *)v378 + 6) = 0;
            *((void *)v378 + 7) = v378 + 16;
            llvm::StoreInst::StoreInst((llvm::StoreInst *)(v378 + 16), v377, (llvm::Value *)v376, 0, v373);
            v375 -= 8;
          }
          while (v375);
        }
        uint64_t v379 = *(void *)(v341 - 64);
        uint64_t v380 = v379 + 40;
        for (uint64_t i5 = *(void *)(v379 + 48); i5 != v380; uint64_t i5 = *(void *)(i5 + 8))
        {
          uint64_t v382 = i5 - 24;
          if (!i5) {
            uint64_t v382 = 0;
          }
          if (*(unsigned char *)(v382 + 16) != 83)
          {
            unsigned int v383 = *(unsigned __int8 *)(i5 - 8) - 38;
            BOOL v104 = v383 > 0x38;
            uint64_t v384 = (1 << v383) & 0x100060000000001;
            if (v104 || v384 == 0) {
              uint64_t v380 = i5;
            }
            else {
              uint64_t v380 = *(void *)(i5 + 8);
            }
            break;
          }
        }
        if (v380) {
          uint64_t v386 = (llvm::Instruction *)(v380 - 24);
        }
        else {
          uint64_t v386 = 0;
        }
        if (__nel)
        {
          uint64_t v387 = (llvm::ConstantPointerNull ***)__src;
          uint64_t v388 = 8 * __nel;
          do
          {
            uint64_t v389 = *v387++;
            uint64_t v390 = (llvm::Type **)llvm::ConstantPointerNull::get(v389[8], v342);
            uint64_t v391 = operator new(0x80uLL);
            v391[21] = v391[21] & 0x38000000 | 2;
            *(void *)uint64_t v391 = 0;
            *((void *)v391 + 1) = 0;
            *((void *)v391 + 2) = 0;
            *((void *)v391 + 3) = v391 + 16;
            *((void *)v391 + 4) = 0;
            *((void *)v391 + 5) = 0;
            *((void *)v391 + 6) = 0;
            *((void *)v391 + 7) = v391 + 16;
            llvm::StoreInst::StoreInst((llvm::StoreInst *)(v391 + 16), v390, (llvm::Value *)v389, 0, v386);
            v388 -= 8;
          }
          while (v388);
        }
      }
      else
      {
        uint64_t v362 = *(void *)(v341 + 32);
        if (v362) {
          BOOL v363 = v362 == *(void *)(v341 + 40) + 40;
        }
        else {
          BOOL v363 = 1;
        }
        if (v363) {
          unsigned int v364 = 0;
        }
        else {
          unsigned int v364 = (llvm::Instruction *)(v362 - 24);
        }
        if (v356)
        {
          uint64_t v365 = (llvm::ConstantPointerNull ***)__src;
          uint64_t v366 = 8 * v356;
          do
          {
            int v367 = *v365++;
            uint64_t v368 = (llvm::Type **)llvm::ConstantPointerNull::get(v367[8], v342);
            size_t v369 = operator new(0x80uLL);
            v369[21] = v369[21] & 0x38000000 | 2;
            *(void *)size_t v369 = 0;
            *((void *)v369 + 1) = 0;
            *((void *)v369 + 2) = 0;
            *((void *)v369 + 3) = v369 + 16;
            *((void *)v369 + 4) = 0;
            *((void *)v369 + 5) = 0;
            *((void *)v369 + 6) = 0;
            *((void *)v369 + 7) = v369 + 16;
            llvm::StoreInst::StoreInst((llvm::StoreInst *)(v369 + 16), v368, (llvm::Value *)v367, 0, v364);
            v366 -= 8;
          }
          while (v366);
        }
      }
      if (__src != v927) {
        free(__src);
      }
    }
    MEMORY[0x1D25D9CD0](0, 8);
    v307 += 14;
  }
  while (v307 != v322);
LABEL_359:
  if (DWORD2(v916))
  {
    if (v917)
    {
      uint64_t v723 = 16 * v917;
      size_t v309 = (uint64_t *)v916;
      while ((*v309 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v309 += 2;
        v723 -= 16;
        if (!v723) {
          goto LABEL_1136;
        }
      }
    }
    else
    {
      size_t v309 = (uint64_t *)v916;
    }
  }
  else
  {
LABEL_1136:
    size_t v309 = (uint64_t *)(v916 + 16 * v917);
  }
  uint64_t v858 = (uint64_t *)(v916 + 16 * v917);
  if (v309 != v858)
  {
    uint64_t v852 = v916 + 16 * v917;
    do
    {
      uint64_t v735 = *v309;
      uint64_t v736 = (void *)v309[1];
      __src = v927;
      size_t __nel = 0x1400000000;
      uint64_t v737 = *(void *)(v735 + 8);
      unint64_t v867 = (llvm::Value *)(v735 + 8);
      uint64_t v738 = (uint64_t *)v927;
      uint64_t v739 = (uint64_t *)v927;
      if (v737)
      {
        unsigned int v740 = 0;
        uint64_t v741 = *(void *)(v735 + 8);
        do
        {
          ++v740;
          uint64_t v741 = *(void *)(v741 + 8);
        }
        while (v741);
        if (v740 >= 0x15) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        do
        {
          uint64_t v742 = *(void *)(v737 + 24);
          if (*(unsigned char *)(v742 + 16) != 5)
          {
            if (__nel >= (unint64_t)HIDWORD(__nel)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)__src + __nel) = v742;
            LODWORD(__nel) = __nel + 1;
          }
          uint64_t v737 = *(void *)(v737 + 8);
        }
        while (v737);
        uint64_t v743 = __nel;
        uint64_t v738 = (uint64_t *)__src;
        if (__nel >= 2)
        {
          qsort(__src, __nel, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CD780838);
          uint64_t v743 = __nel;
          uint64_t v738 = (uint64_t *)__src;
        }
        uint64_t v739 = &v738[v743];
        uint64_t v744 = v738;
        if (v743)
        {
          unint64_t v745 = 0;
          while (8 * v743 - 8 != v745)
          {
            uint64_t v747 = v738[v745 / 8];
            uint64_t v746 = v738[v745 / 8 + 1];
            v745 += 8;
            if (v747 == v746)
            {
              uint64_t v744 = &v738[v745 / 8 - 1];
              goto LABEL_1182;
            }
          }
        }
        else
        {
LABEL_1182:
          if (v744 != v739)
          {
            uint64_t v748 = v744 + 2;
            if (v744 + 2 != v739)
            {
              uint64_t v749 = *v744;
              do
              {
                uint64_t v750 = v749;
                uint64_t v749 = *v748;
                if (v750 != *v748)
                {
                  v744[1] = v749;
                  ++v744;
                }
                ++v748;
              }
              while (v748 != v739);
            }
            uint64_t v739 = v744 + 1;
          }
        }
      }
      unint64_t v751 = (char *)v739 - (char *)v738;
      unint64_t v752 = (unint64_t)((char *)v739 - (char *)v738) >> 3;
      LODWORD(__nel) = v752;
      if ((v751 >> 3))
      {
        unsigned int v753 = &v738[v752];
        do
        {
          int v754 = (_DWORD *)*v738;
          if (*(unsigned char *)(*v738 + 16) == 83)
          {
            int v755 = v754[5];
            unint64_t v756 = v755 & 0x7FFFFFF;
            if ((v755 & 0x7FFFFFF) != 0)
            {
              uint64_t v757 = 0;
              unint64_t v758 = 0;
              do
              {
                if ((v755 & 0x40000000) != 0) {
                  size_t v759 = (_DWORD *)*((void *)v754 - 1);
                }
                else {
                  size_t v759 = &v754[-8 * v756];
                }
                if (v735 == *(void *)&v759[v757])
                {
                  size_t v760 = (char *)operator new(0x60uLL);
                  *((_DWORD *)v760 + 13) = *((_DWORD *)v760 + 13) & 0x38000000 | 1;
                  *(void *)size_t v760 = 0;
                  *((void *)v760 + 1) = 0;
                  *((void *)v760 + 2) = 0;
                  *((void *)v760 + 3) = v760 + 32;
                  uint64_t v761 = (llvm::Type *)v736[8];
                  __int16 v924 = 257;
                  int v762 = v754[5];
                  if ((v762 & 0x40000000) != 0) {
                    size_t v763 = (_DWORD *)*((void *)v754 - 1);
                  }
                  else {
                    size_t v763 = &v754[-8 * (v762 & 0x7FFFFFF)];
                  }
                  uint64_t v764 = *(void *)&v763[8 * v754[15] + 2 * v758];
                  uint64_t v765 = *(void *)(v764 + 40);
                  if (v765 == v764 + 40)
                  {
                    uint64_t v767 = 0;
                  }
                  else
                  {
                    if (v765) {
                      uint64_t v766 = (unsigned __int8 *)(v765 - 24);
                    }
                    else {
                      uint64_t v766 = 0;
                    }
                    if (v766[16] - 29 >= 0xB) {
                      uint64_t v767 = 0;
                    }
                    else {
                      uint64_t v767 = (llvm::Instruction *)v766;
                    }
                  }
                  Inst = llvm::LoadInst::LoadInst((llvm::LoadInst *)(v760 + 32), v761, (llvm::Value *)v736, (const char **)v922, 0, v767);
                  int v769 = v754[5];
                  if ((v769 & 0x40000000) != 0) {
                    uint64_t v770 = (_DWORD *)*((void *)v754 - 1);
                  }
                  else {
                    uint64_t v770 = &v754[-8 * (v769 & 0x7FFFFFF)];
                  }
                  uint64_t v771 = &v770[v757];
                  if (*(void *)&v770[v757])
                  {
                    **((void **)v771 + 2) = *((void *)v771 + 1);
                    uint64_t v775 = *((void *)v771 + 1);
                    if (v775) {
                      *(void *)(v775 + 16) = *((void *)v771 + 2);
                    }
                  }
                  *(void *)uint64_t v771 = Inst;
                  uint64_t v774 = *((void *)v760 + 5);
                  unint64_t v773 = v760 + 40;
                  uint64_t v772 = v774;
                  *((void *)v771 + 1) = v774;
                  if (v774) {
                    *(void *)(v772 + 16) = v771 + 2;
                  }
                  *(void *)&v770[v757 + 4] = v773;
                  *unint64_t v773 = v771;
                  int v755 = v754[5];
                }
                ++v758;
                unint64_t v756 = v755 & 0x7FFFFFF;
                v757 += 8;
              }
              while (v758 < v756);
            }
          }
          else
          {
            int v776 = operator new(0x60uLL);
            uint64_t v777 = (llvm::Value *)(v776 + 8);
            v776[13] = v776[13] & 0x38000000 | 1;
            *(void *)int v776 = 0;
            *((void *)v776 + 1) = 0;
            *((void *)v776 + 2) = 0;
            *((void *)v776 + 3) = v776 + 8;
            size_t v778 = (llvm::Type *)v736[8];
            __int16 v924 = 257;
            llvm::LoadInst::LoadInst((llvm::LoadInst *)(v776 + 8), v778, (llvm::Value *)v736, (const char **)v922, 0, (llvm::Instruction *)v754);
            llvm::User::replaceUsesOfWith((llvm::User *)v754, (llvm::Value *)v735, v777);
          }
          ++v738;
        }
        while (v738 != v753);
      }
      size_t v779 = (char *)operator new(0x80uLL);
      v780 = (llvm::Value *)(v779 + 64);
      *((_DWORD *)v779 + 21) = *((_DWORD *)v779 + 21) & 0x38000000 | 2;
      *(void *)size_t v779 = 0;
      *((void *)v779 + 1) = 0;
      *((void *)v779 + 2) = 0;
      *((void *)v779 + 3) = v779 + 64;
      *((void *)v779 + 4) = 0;
      uint64_t v781 = v779 + 32;
      *((void *)v779 + 5) = 0;
      *((void *)v779 + 6) = 0;
      *((void *)v779 + 7) = v779 + 64;
      char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)v862, *(llvm::Type **)v735, 1);
      *((void *)v779 + 8) = ***(void ***)v735 + 1576;
      *((void *)v779 + 9) = 0;
      v779[80] = 61;
      v779[81] = 0;
      *((_WORD *)v779 + 41) = 0;
      *((_DWORD *)v779 + 21) = *((_DWORD *)v779 + 21) & 0xC0000000 | 2;
      *(_OWORD *)(v779 + 88) = 0u;
      uint64_t v783 = v779 + 88;
      *((_DWORD *)v779 + 30) = 0;
      *(_OWORD *)(v779 + 104) = 0u;
      if (*(void *)v779)
      {
        **((void **)v779 + 2) = *((void *)v779 + 1);
        uint64_t v801 = *((void *)v779 + 1);
        if (v801) {
          *(void *)(v801 + 16) = *((void *)v779 + 2);
        }
      }
      *(void *)size_t v779 = v735;
      uint64_t v784 = *(void *)(v735 + 8);
      *((void *)v779 + 1) = v784;
      if (v784) {
        *(void *)(v784 + 16) = v779 + 8;
      }
      *((void *)v779 + 2) = v867;
      *(void *)unint64_t v867 = v779;
      if (*((void *)v779 + 4))
      {
        **((void **)v779 + 6) = *((void *)v779 + 5);
        uint64_t v802 = *((void *)v779 + 5);
        if (v802) {
          *(void *)(v802 + 16) = *((void *)v779 + 6);
        }
      }
      *uint64_t v781 = v736;
      if (v736)
      {
        uint64_t v785 = v736 + 1;
        uint64_t v786 = v736[1];
        *((void *)v779 + 5) = v786;
        if (v786) {
          *(void *)(v786 + 16) = v779 + 40;
        }
        *((void *)v779 + 6) = v785;
        *uint64_t v785 = v781;
      }
      *((_WORD *)v779 + 41) = 2 * (Alignment & 0x3F);
      v779[124] = 1;
      unsigned int v787 = *(unsigned __int8 *)(v735 + 16);
      if (v787 >= 0x1C)
      {
        if (v787 == 33)
        {
          uint64_t v790 = *(void *)(v735 - 96);
          uint64_t v791 = v790 + 40;
          for (uint64_t i6 = *(void *)(v790 + 48); i6 != v791; uint64_t i6 = *(void *)(i6 + 8))
          {
            uint64_t v793 = i6 - 24;
            if (i6) {
              uint64_t v794 = i6 - 24;
            }
            else {
              uint64_t v794 = 0;
            }
            if (*(unsigned char *)(v794 + 16) != 83) {
              goto LABEL_1243;
            }
          }
          uint64_t v793 = 0;
LABEL_1243:
          uint64_t v795 = *(void *)(v793 + 40);
          *((void *)v779 + 13) = v795;
          *(_WORD *)(v795 + 18) &= ~0x8000u;
          if ((v779[87] & 0x10) != 0)
          {
            uint64_t v799 = *(void *)(v795 + 56);
            if (v799)
            {
              unsigned int v800 = *(llvm::ValueSymbolTable **)(v799 + 104);
              if (v800) {
                llvm::ValueSymbolTable::reinsertValue(v800, v780);
              }
            }
          }
          uint64_t v797 = *(void *)(v793 + 24);
          uint64_t v796 = (void *)(v793 + 24);
          *((void *)v779 + 11) = v797;
          *((void *)v779 + 12) = v796;
          *(void *)(v797 + 8) = v783;
          *uint64_t v796 = v783;
          goto LABEL_1245;
        }
        int v788 = (void *)(*(void *)(v735 + 40) + 40);
        uint64_t v789 = v735 + 24;
      }
      else
      {
        int v788 = (void *)(v736[5] + 40);
        uint64_t v789 = (uint64_t)(v736 + 3);
      }
      sub_1CC5C6C08(v788, v789, v780);
LABEL_1245:
      if (__src != v927) {
        free(__src);
      }
      uint64_t v798 = v309 + 2;
      size_t v309 = (uint64_t *)v852;
      if (v798 != (uint64_t *)v852)
      {
        size_t v309 = v798;
        while ((*v309 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v309 += 2;
          if (v309 == (uint64_t *)v852)
          {
            size_t v309 = (uint64_t *)v852;
            break;
          }
        }
      }
    }
    while (v309 != v858);
  }
  int v724 = (void **)v942[0];
  if (LODWORD(v942[1]))
  {
    llvm::PromoteMemToReg(v942[0], LODWORD(v942[1]), v831, 0);
    int v724 = (void **)v942[0];
  }
  if (v724 != __p) {
    free(v724);
  }
  MEMORY[0x1D25D9CD0](v916, 8);
  int v725 = v911;
  if (v903 != &v905) {
    free(v903);
  }
  if (v847) {
    operator delete(v847);
  }
  uint64_t v726 = (void **)v875;
  if (v875)
  {
    uint64_t v727 = v876;
    size_t v728 = v875;
    if (v876 != v875)
    {
      do
      {
        size_t v729 = (char *)*(v727 - 8);
        if (v727 - 6 != (void **)v729) {
          free(v729);
        }
        v727 -= 9;
      }
      while (v727 != v726);
      size_t v728 = v875;
    }
    uint64_t v876 = v726;
    operator delete(v728);
  }
  MEMORY[0x1D25D9CD0](v873[0], 8);
  sub_1CD456CB4(v878);
  size_t v730 = (char *)v910;
  if (v911)
  {
    uint64_t v731 = 112 * v911;
    do
    {
      unsigned int v732 = &v730[v731];
      sub_1CD456CB4(&v730[v731 - 48]);
      size_t v733 = *(void **)&v730[v731 - 88];
      if (v733)
      {
        *((void *)v732 - 10) = v733;
        operator delete(v733);
      }
      MEMORY[0x1D25D9CD0](*((void *)v732 - 14), 8);
      v731 -= 112;
    }
    while (v731);
    size_t v730 = (char *)v910;
  }
  if (v730 != v912) {
    free(v730);
  }
  if (v913 != v915) {
    free(v913);
  }
  return v725 != 0;
}

void sub_1CCE86064(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE8609C(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1CCE86100(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2 + 24;
  uint64_t v3 = *(void *)(a2 + 32);
  if (v3 != a2 + 24)
  {
    do
    {
      if (v3) {
        uint64_t v5 = v3 - 56;
      }
      else {
        uint64_t v5 = 0;
      }
      if (v3 && *(unsigned char *)(v5 + 16) == 3)
      {
        if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) != 0) {
          goto LABEL_12;
        }
      }
      else if (*(unsigned char *)(v5 + 16) || *(void *)(v5 + 72) != v5 + 72 || (*(unsigned char *)(v5 + 34) & 0x80) != 0)
      {
LABEL_12:
        if (*(void *)(v5 + 72) != v5 + 72 && sub_1CCE7E958((llvm::Function *)v5))
        {
          uint64_t v6 = *(uint64_t **)(a1 + 8);
          uint64_t v7 = *v6;
          uint64_t v8 = v6[1];
          while (v7 != v8)
          {
            if (*(char **)v7 == llvm::TargetTransformInfoWrapperPass::ID)
            {
              uint64_t v9 = *(void *)(v7 + 8);
LABEL_20:
              int v10 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v9 + 96))(v9, llvm::TargetTransformInfoWrapperPass::ID);
              llvm::TargetTransformInfoWrapperPass::getTTI(v10, (const Function *)v5);
              uint64_t v11 = *(uint64_t **)(a1 + 8);
              uint64_t v12 = *v11;
              uint64_t v13 = v11[1];
              if (v12 == v13)
              {
LABEL_23:
                uint64_t v14 = 0;
              }
              else
              {
                while (*(char **)v12 != llvm::TargetLibraryInfoWrapperPass::ID)
                {
                  v12 += 16;
                  if (v12 == v13) {
                    goto LABEL_23;
                  }
                }
                uint64_t v14 = *(void *)(v12 + 8);
              }
              uint64_t v15 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v14 + 96))(v14, llvm::TargetLibraryInfoWrapperPass::ID);
              uint64_t v16 = v15 + 32;
              if (!*(unsigned char *)(v15 + 232))
              {
                uint64_t v17 = *(void *)(v5 + 40) + 216;
                __int16 v21 = 260;
                uint64_t v20 = v17;
                llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v20);
                uint64_t v27 = 0;
                uint64_t v28 = 0;
                int v29 = 0;
                long long v30 = 0u;
                long long v31 = 0u;
                long long v32 = 0u;
                *(void *)&long long v18 = -1;
                *((void *)&v18 + 1) = -1;
                v25[0] = v18;
                v25[1] = v18;
                v25[2] = v18;
                v25[3] = v18;
                v25[4] = v18;
                v25[5] = v18;
                *(_OWORD *)uint64_t v26 = v18;
                *(void *)&v26[13] = -1;
                sub_1CC153974((uint64_t)v25, (int *)__p);
                sub_1CD4D04B8(v16, (uint64_t)v25);
                sub_1CD4CFA4C((uint64_t *)v25);
                if (v23 < 0) {
                  operator delete(__p[0]);
                }
              }
              sub_1CC1569E8(&v24, v16);
            }
            v7 += 16;
          }
          uint64_t v9 = 0;
          goto LABEL_20;
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return 0;
}

void sub_1CCE8665C()
{
}

llvm::ConstantAggregateZero **sub_1CCE86698(llvm::ConstantAggregateZero **a1, char *a2)
{
  v199[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1CCE87868(a1, (uint64_t)a2);
  uint64_t v188 = v4;
  if (!sub_1CCE878E4((uint64_t)v4) || ((*((_DWORD *)*v4 + 2) & 0xFE) != 18) == ((*((_DWORD *)*a1 + 2) & 0xFE) == 18))
  {
    uint64_t v182 = 0;
    int32x2_t v183 = 0;
    unsigned int v184 = 0;
    uint64_t v186 = 0;
    uint64_t v187 = 0;
    std::string __p = 0;
    uint64_t v197 = v199;
    v199[0] = v4;
    uint64_t v198 = 0x1000000001;
    p_dst = (void **)v4;
    uint64_t v174 = (uint64_t *)v4;
    uint64_t v172 = v4;
    int v175 = 0;
    uint64_t v176 = 0;
    sub_1CCE87950(&v182, (uint64_t *)&p_dst);
    while (v198)
    {
      uint64_t v5 = *((void *)v197 + v198 - 1);
      LODWORD(v198) = v198 - 1;
      uint64_t v6 = operator new(0x20uLL);
      void *v6 = &unk_1F2640908;
      v6[1] = a2;
      void v6[2] = &v182;
      void v6[3] = &v197;
      int v196 = v6;
      sub_1CCE87ACC(v5, (uint64_t)v195);
      (*(void (**)(void *))(*v6 + 40))(v6);
    }
    if (v197 != v199) {
      free(v197);
    }
    uint64_t v197 = v199;
    HIDWORD(v198) = 6;
    do
    {
      LODWORD(v198) = 0;
      uint64_t v7 = (uint64_t *)__p;
      uint64_t v8 = v186;
      if (__p == v186) {
        break;
      }
      do
      {
        uint64_t v9 = *v7;
        p_dst = (void **)a2;
        uint64_t v174 = &v182;
        LOBYTE(__dst) = 1;
        v193[0] = &unk_1F2640950;
        v193[1] = &__dst;
        v193[2] = &p_dst;
        int v194 = v193;
        sub_1CCE87ACC(v9, (uint64_t)v193);
        if (v194 == v193)
        {
          (*(void (**)(void *))(v193[0] + 32))(v193);
        }
        else if (v194)
        {
          (*(void (**)(void))(*v194 + 40))();
        }
        if ((_BYTE)__dst)
        {
          if (v198 >= (unint64_t)HIDWORD(v198)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v197 + v198) = v9;
          LODWORD(v198) = v198 + 1;
        }
        v7 += 4;
      }
      while (v7 != v8);
      if (!v198) {
        break;
      }
      int v10 = (void ***)v197;
      uint64_t v11 = (void ***)((char *)v197 + 8 * v198);
      do
      {
        p_dst = 0;
        p_dst = *v10;
        uint64_t v12 = (uint64_t *)sub_1CCE88300(&v182, (uint64_t)p_dst);
        uint64_t v13 = v186;
        if (v186 != v12)
        {
          uint64_t v14 = v184;
          if (v184)
          {
            LODWORD(v15) = ((*v12 >> 4) ^ (*v12 >> 9)) & (v184 - 1);
            uint64_t v16 = (uint64_t *)(v182 + 16 * v15);
            uint64_t v17 = *v16;
            if (*v12 == *v16)
            {
LABEL_25:
              *uint64_t v16 = -8192;
              int32x2_t v183 = vadd_s32(v183, (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v13 = v186;
            }
            else
            {
              int v30 = 1;
              while (v17 != -4096)
              {
                int v31 = v15 + v30++;
                uint64_t v15 = v31 & (v184 - 1);
                uint64_t v17 = *(void *)(v182 + 16 * v15);
                if (*v12 == v17)
                {
                  uint64_t v16 = (uint64_t *)(v182 + 16 * v15);
                  goto LABEL_25;
                }
              }
            }
          }
          long long v18 = v12 + 4;
          if (v12 + 4 == v13)
          {
            uint64_t v186 = v12;
          }
          else
          {
            uint64_t v19 = 0;
            unint64_t v20 = ((char *)v12 - (unsigned char *)__p) >> 5;
            do
            {
              __int16 v21 = &v18[v19];
              *((_OWORD *)v21 - 2) = *(_OWORD *)&v18[v19];
              *((_DWORD *)v21 - 4) = v18[v19 + 2];
              *(v21 - 1) = v18[v19 + 3];
              v19 += 4;
            }
            while (v21 + 4 != v13);
            uint64_t v186 = &v12[v19];
            if (v19 * 8)
            {
              uint64_t v23 = v182 + 16 * v14;
              if (v183.i32[0]) {
                uint64_t v24 = 0;
              }
              else {
                uint64_t v24 = v14;
              }
              if (v183.i32[0]) {
                uint64_t v25 = v182;
              }
              else {
                uint64_t v25 = v182 + 16 * v14;
              }
              if (v14 && v183.i32[0])
              {
                uint64_t v26 = 16 * v14;
                uint64_t v25 = v182;
                while ((*(void *)v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v25 += 16;
                  v26 -= 16;
                  if (!v26)
                  {
                    uint64_t v24 = v14;
                    uint64_t v25 = v182 + 16 * v14;
                    goto LABEL_46;
                  }
                }
                uint64_t v24 = v14;
              }
LABEL_46:
              uint64_t v27 = v182 + 16 * v24;
LABEL_47:
              while (v25 != v27)
              {
                unint64_t v28 = *(unsigned int *)(v25 + 8);
                if (v20 < v28) {
                  *(_DWORD *)(v25 + 8) = v28 - 1;
                }
                uint64_t v29 = v25 + 16;
                uint64_t v25 = v23;
                if (v29 != v23)
                {
                  uint64_t v25 = v29;
                  while ((*(void *)v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v25 += 16;
                    if (v25 == v23)
                    {
                      uint64_t v25 = v23;
                      goto LABEL_47;
                    }
                  }
                }
              }
            }
          }
        }
        size_t v22 = p_dst;
        *(void *)sub_1CD68C4F4((uint64_t)a2, (uint64_t *)&p_dst) = v22;
        ++v10;
      }
      while (v10 != v11);
    }
    while (v198);
    if (v184)
    {
      uint64_t v4 = v172;
      unsigned int v32 = (v184 - 1) & ((v172 >> 4) ^ (v172 >> 9));
      uint64_t v33 = *(llvm::ConstantAggregateZero ***)(v182 + 16 * v32);
      if (v172 == v33)
      {
LABEL_62:
        if (v32 != v184)
        {
          uint64_t v181 = &v182;
          uint64_t v34 = (uint64_t *)__p;
          do
          {
            uint64_t v35 = (void **)v186;
            if (v34 == v186) {
              goto LABEL_138;
            }
            char v36 = 0;
            unsigned int v37 = (void **)v34;
            do
            {
              uint64_t __dst = *v37;
              uint64_t v38 = __dst;
              LODWORD(v179) = 0;
              uint64_t v180 = 0;
              int v39 = operator new(0x20uLL);
              *int v39 = &unk_1F2640998;
              v39[1] = a2;
              v39[2] = &v181;
              v39[3] = &__dst;
              uint64_t v192 = v39;
              sub_1CCE87ACC((uint64_t)v38, (uint64_t)v191);
              (*(void (**)(void *))(*v39 + 40))(v39);
              uint64_t v189 = v38;
              int v190 = 0;
              sub_1CD5D55BC((uint64_t)&v182, (uint64_t *)&v189, &v190, (uint64_t)&p_dst);
              uint64_t v34 = (uint64_t *)__p;
              unsigned int v40 = (char *)__p + 32 * *((unsigned int *)p_dst + 2);
              char v41 = (void *)*((void *)v40 + 1);
              int v42 = *((_DWORD *)v40 + 4);
              uint64_t v43 = *((void *)v40 + 3);
              if (v41 != __dst || v43 != v180 || v42 != v179)
              {
                uint64_t v189 = v38;
                int v190 = 0;
                sub_1CD5D55BC((uint64_t)&v182, (uint64_t *)&v189, &v190, (uint64_t)&p_dst);
                uint64_t v34 = (uint64_t *)__p;
                uint64_t v46 = (char *)__p + 32 * *((unsigned int *)p_dst + 2);
                *((void *)v46 + 1) = __dst;
                *((_DWORD *)v46 + 4) = v179;
                *((void *)v46 + 3) = v180;
                char v36 = 1;
              }
              v37 += 4;
            }
            while (v37 != v35);
          }
          while ((v36 & 1) != 0);
          unint64_t v47 = v186;
          if (v34 != v186)
          {
            uint64_t v48 = (char *)v34;
            do
            {
              if (*((_DWORD *)v48 + 4) == 1)
              {
                int v49 = (llvm::Value *)*((void *)v48 + 3);
                if ((*(_DWORD *)(*(void *)v49 + 8) & 0xFE) == 0x12)
                {
                  unsigned int v50 = *(llvm::Instruction **)v48;
                  if (*(unsigned char *)(*(void *)v48 + 16) == 89)
                  {
                    uint64_t v51 = (llvm::Value *)*((void *)v50 - 4);
                    p_dst = (void **)"base_ee";
                    __int16 v177 = 259;
                    unsigned int v52 = (char *)operator new(0x80uLL);
                    *((_DWORD *)v52 + 21) = *((_DWORD *)v52 + 21) & 0x38000000 | 2;
                    uint64_t v53 = (uint64_t ***)(v52 + 64);
                    *(void *)unsigned int v52 = 0;
                    *((void *)v52 + 1) = 0;
                    *((void *)v52 + 2) = 0;
                    *((void *)v52 + 3) = v52 + 64;
                    *((void *)v52 + 4) = 0;
                    *((void *)v52 + 5) = 0;
                    *((void *)v52 + 6) = 0;
                    *((void *)v52 + 7) = v52 + 64;
                    llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v52 + 64), v49, v51, (const char **)&p_dst, v50);
                    Impl = llvm::MDTuple::getImpl(**(void **)v50, 0, 0, 0, 1);
                    if (Impl || *((void *)v52 + 14) || (v52[87] & 0x20) != 0)
                    {
                      int MDKindID = llvm::LLVMContext::getMDKindID(**v53, "is_base_value", 0xDuLL);
                      llvm::Instruction::setMetadata((llvm::Instruction *)v53, MDKindID, Impl);
                    }
                    uint64_t __dst = v50;
                    LODWORD(v179) = 0;
                    sub_1CD5D55BC((uint64_t)&v182, (uint64_t *)&__dst, &v179, (uint64_t)&p_dst);
                    uint64_t v34 = (uint64_t *)__p;
                    unint64_t v56 = (char *)__p + 32 * *((unsigned int *)p_dst + 2);
                    *((void *)v56 + 1) = v50;
                    *((_DWORD *)v56 + 4) = 1;
                    *((void *)v56 + 3) = v53;
                  }
                  else if ((*(_DWORD *)(*(void *)v50 + 8) & 0xFE) != 0x12)
                  {
                    uint64_t __dst = *(void **)v48;
                    LODWORD(v179) = 0;
                    sub_1CD5D55BC((uint64_t)&v182, (uint64_t *)&__dst, &v179, (uint64_t)&p_dst);
                    uint64_t v34 = (uint64_t *)__p;
                    uint64_t v57 = (char *)__p + 32 * *((unsigned int *)p_dst + 2);
                    *((void *)v57 + 1) = v50;
                    *((_DWORD *)v57 + 4) = 2;
                    *((void *)v57 + 3) = 0;
                  }
                }
              }
              v48 += 32;
            }
            while (v48 != (char *)v47);
            uint64_t v59 = v186;
            if (v34 != v186)
            {
              int v60 = (char *)v34;
              do
              {
                if (*((_DWORD *)v60 + 4) == 2)
                {
                  uint64_t v61 = *(llvm::Instruction **)v60;
                  uint64_t v62 = (llvm::Value *)llvm::Instruction::clone(*(llvm::Instruction **)v60);
                  uint64_t v63 = *((void *)v61 + 5);
                  *((void *)v62 + 5) = v63;
                  *(_WORD *)(v63 + 18) &= ~0x8000u;
                  if ((*((unsigned char *)v62 + 23) & 0x10) != 0)
                  {
                    uint64_t v70 = *(void *)(v63 + 56);
                    if (v70)
                    {
                      uint64_t v71 = *(llvm::ValueSymbolTable **)(v70 + 104);
                      if (v71) {
                        llvm::ValueSymbolTable::reinsertValue(v71, v62);
                      }
                    }
                  }
                  uint64_t v64 = *((void *)v61 + 3);
                  *((void *)v62 + 3) = v64;
                  *((void *)v62 + 4) = (char *)v61 + 24;
                  *(void *)(v64 + 8) = (char *)v62 + 24;
                  *((void *)v61 + 3) = (char *)v62 + 24;
                  uint64_t v65 = "base_phi";
                  size_t v66 = 8;
                  switch(*((unsigned char *)v61 + 16))
                  {
                    case 'S':
                      goto LABEL_109;
                    case 'U':
                      uint64_t v65 = "base_select";
                      size_t v66 = 11;
                      goto LABEL_109;
                    case 'Y':
                      uint64_t v65 = "base_ee";
                      goto LABEL_108;
                    case 'Z':
                      uint64_t v65 = "base_ie";
                      goto LABEL_108;
                    default:
                      uint64_t v65 = "base_sv";
LABEL_108:
                      size_t v66 = 7;
LABEL_109:
                      sub_1CCE8771C(&__dst, (uint64_t ***)v61, (uint64_t)".base", 5, v65, v66);
                      __int16 v177 = 260;
                      p_dst = &__dst;
                      llvm::Value::setNameImpl(v62, (const char **)&p_dst);
                      if (*((unsigned char *)v62 + 16)) {
                        goto LABEL_110;
                      }
                      if ((*((unsigned char *)v62 + 23) & 0x10) == 0) {
                        goto LABEL_135;
                      }
                      uint64_t v72 = ***(void ***)v62;
                      uint64_t v73 = *(void *)(v72 + 152);
                      uint64_t v74 = *(unsigned int *)(v72 + 168);
                      if (!v74) {
                        goto LABEL_127;
                      }
                      LODWORD(v75) = (v74 - 1) & ((v62 >> 4) ^ (v62 >> 9));
                      size_t v76 = (llvm::Value **)(v73 + 16 * v75);
                      uint64_t v77 = *v76;
                      if (*v76 == v62) {
                        goto LABEL_128;
                      }
                      int v78 = 1;
                      break;
                  }
                  do
                  {
                    if (v77 == (llvm::Value *)-4096)
                    {
LABEL_127:
                      size_t v76 = (llvm::Value **)(v73 + 16 * v74);
                      goto LABEL_128;
                    }
                    int v79 = v75 + v78++;
                    uint64_t v75 = v79 & (v74 - 1);
                    uint64_t v77 = *(llvm::Value **)(v73 + 16 * v75);
                  }
                  while (v77 != v62);
                  size_t v76 = (llvm::Value **)(v73 + 16 * v75);
LABEL_128:
                  unsigned int v80 = v76[1];
                  unint64_t v83 = *(void *)v80;
                  uint64_t v81 = (char *)v80 + 16;
                  unint64_t v82 = v83;
                  if (v83 >= 5
                    && (*(_DWORD *)v81 == *(_DWORD *)"llvm." ? (BOOL v84 = v81[4] == aLlvm_1[4]) : (BOOL v84 = 0), v84))
                  {
                    *((_DWORD *)v62 + 8) |= 0x2000u;
                    int v85 = llvm::Function::lookupIntrinsicID(v81, v82);
                  }
                  else
                  {
LABEL_135:
                    int v85 = 0;
                    *((_DWORD *)v62 + 8) &= ~0x2000u;
                  }
                  *((_DWORD *)v62 + 9) = v85;
LABEL_110:
                  if (SHIBYTE(v180) < 0) {
                    operator delete(__dst);
                  }
                  uint64_t v67 = llvm::MDTuple::getImpl(**(void **)v61, 0, 0, 0, 1);
                  if (v67 || *((void *)v62 + 6) || (*((unsigned char *)v62 + 23) & 0x20) != 0)
                  {
                    int v68 = llvm::LLVMContext::getMDKindID(**(uint64_t ***)v62, "is_base_value", 0xDuLL);
                    llvm::Instruction::setMetadata(v62, v68, v67);
                  }
                  uint64_t __dst = v61;
                  LODWORD(v179) = 0;
                  sub_1CD5D55BC((uint64_t)&v182, (uint64_t *)&__dst, &v179, (uint64_t)&p_dst);
                  uint64_t v34 = (uint64_t *)__p;
                  unint64_t v69 = (char *)__p + 32 * *((unsigned int *)p_dst + 2);
                  *((void *)v69 + 1) = v61;
                  *((_DWORD *)v69 + 4) = 2;
                  *((void *)v69 + 3) = v62;
                }
                v60 += 32;
              }
              while (v60 != (char *)v59);
              unsigned int v86 = v186;
              uint64_t __dst = a2;
              int v179 = &v182;
              if (v34 == v186) {
                goto LABEL_138;
              }
              while (1)
              {
                if (*((_DWORD *)v34 + 4) == 2)
                {
                  uint64_t v87 = (char *)*v34;
                  uint64_t v88 = v34[3];
                  int v89 = *(unsigned __int8 *)(v88 + 16);
                  if (v89 != 83 || v88 == 0)
                  {
                    if (v89 == 85 && v88 != 0)
                    {
                      uint64_t v146 = sub_1CCE87CC0((uint64_t *)&__dst, *((llvm::ConstantAggregateZero ***)v87 - 8), (llvm::Instruction *)v34[3]);
                      uint64_t v147 = (llvm::Value **)(v88 - 64);
                      if (*(void *)(v88 - 64))
                      {
                        **(void **)(v88 - 48) = *(void *)(v88 - 56);
                        uint64_t v148 = *(void *)(v88 - 56);
                        if (v148) {
                          *(void *)(v148 + 16) = *(void *)(v88 - 48);
                        }
                      }
                      *uint64_t v147 = v146;
                      if (v146)
                      {
                        uint64_t v151 = *((void *)v146 + 1);
                        uint64_t v149 = (llvm::Value ***)((char *)v146 + 8);
                        uint64_t v150 = v151;
                        *(void *)(v88 - 56) = v151;
                        if (v151) {
                          *(void *)(v150 + 16) = v88 - 56;
                        }
                        *(void *)(v88 - 48) = v149;
                        *uint64_t v149 = v147;
                      }
                      goto LABEL_242;
                    }
                    if (v89 != 89 || v88 == 0)
                    {
                      if (v89 == 90 && v88 != 0)
                      {
                        uint64_t v157 = sub_1CCE87CC0((uint64_t *)&__dst, *((llvm::ConstantAggregateZero ***)v87 - 12), (llvm::Instruction *)v34[3]);
                        int v158 = (llvm::Value **)(v88 - 96);
                        if (*(void *)(v88 - 96))
                        {
                          **(void **)(v88 - 80) = *(void *)(v88 - 88);
                          uint64_t v159 = *(void *)(v88 - 88);
                          if (v159) {
                            *(void *)(v159 + 16) = *(void *)(v88 - 80);
                          }
                        }
                        *int v158 = v157;
                        if (v157)
                        {
                          uint64_t v162 = *((void *)v157 + 1);
                          char v160 = (llvm::Value ***)((char *)v157 + 8);
                          uint64_t v161 = v162;
                          *(void *)(v88 - 88) = v162;
                          if (v162) {
                            *(void *)(v161 + 16) = v88 - 88;
                          }
                          *(void *)(v88 - 80) = v160;
                          uint64_t *v160 = v158;
                        }
                        goto LABEL_259;
                      }
                      uint64_t v94 = sub_1CCE87CC0((uint64_t *)&__dst, *((llvm::ConstantAggregateZero ***)v87 - 8), (llvm::Instruction *)v34[3]);
                      uint64_t v95 = (llvm::Value **)(v88 - 64);
                      if (*(void *)(v88 - 64))
                      {
                        **(void **)(v88 - 48) = *(void *)(v88 - 56);
                        uint64_t v96 = *(void *)(v88 - 56);
                        if (v96) {
                          *(void *)(v96 + 16) = *(void *)(v88 - 48);
                        }
                      }
                      *uint64_t v95 = v94;
                      if (v94)
                      {
                        uint64_t v99 = *((void *)v94 + 1);
                        unsigned int v97 = (llvm::Value ***)((char *)v94 + 8);
                        uint64_t v98 = v99;
                        *(void *)(v88 - 56) = v99;
                        if (v99) {
                          *(void *)(v98 + 16) = v88 - 56;
                        }
                        *(void *)(v88 - 48) = v97;
                        char *v97 = v95;
                      }
                      uint64_t v100 = *(unsigned int *)(**((void **)v87 - 8) + 32);
                      if (v100 == *((_DWORD *)v87 + 18)
                        && (llvm::ShuffleVectorInst::isZeroEltSplatMask(*((int **)v87 + 8), v100) & 1) != 0)
                      {
                        uint64_t v102 = llvm::UndefValue::get(**((llvm::UndefValue ***)v87 - 4), v101);
                      }
                      else
                      {
LABEL_242:
                        uint64_t v102 = sub_1CCE87CC0((uint64_t *)&__dst, *((llvm::ConstantAggregateZero ***)v87 - 4), (llvm::Instruction *)v88);
                      }
                      int v152 = (llvm::UndefValue **)(v88 - 32);
                      if (*(void *)(v88 - 32))
                      {
                        **(void **)(v88 - 16) = *(void *)(v88 - 24);
                        uint64_t v153 = *(void *)(v88 - 24);
                        if (v153) {
                          *(void *)(v153 + 16) = *(void *)(v88 - 16);
                        }
                      }
                      *int v152 = v102;
                      if (!v102) {
                        goto LABEL_267;
                      }
                      uint64_t v156 = *((void *)v102 + 1);
                      uint64_t v154 = (llvm::UndefValue ***)((char *)v102 + 8);
                      uint64_t v155 = v156;
                      *(void *)(v88 - 24) = v156;
                      if (v156) {
                        *(void *)(v155 + 16) = v88 - 24;
                      }
                      *(void *)(v88 - 16) = v154;
                    }
                    else
                    {
LABEL_259:
                      unsigned int v163 = sub_1CCE87CC0((uint64_t *)&__dst, *((llvm::ConstantAggregateZero ***)v87 - 8), (llvm::Instruction *)v88);
                      int v152 = (llvm::UndefValue **)(v88 - 64);
                      if (*(void *)(v88 - 64))
                      {
                        **(void **)(v88 - 48) = *(void *)(v88 - 56);
                        uint64_t v164 = *(void *)(v88 - 56);
                        if (v164) {
                          *(void *)(v164 + 16) = *(void *)(v88 - 48);
                        }
                      }
                      *int v152 = v163;
                      if (!v163) {
                        goto LABEL_267;
                      }
                      uint64_t v166 = *((void *)v163 + 1);
                      uint64_t v154 = (llvm::UndefValue ***)((char *)v163 + 8);
                      uint64_t v165 = v166;
                      *(void *)(v88 - 56) = v166;
                      if (v166) {
                        *(void *)(v165 + 16) = v88 - 56;
                      }
                      *(void *)(v88 - 48) = v154;
                    }
                    *uint64_t v154 = v152;
                    goto LABEL_267;
                  }
                  int v103 = *((_DWORD *)v87 + 5);
                  p_dst = 0;
                  uint64_t v174 = 0;
                  int v175 = 0;
                  uint64_t v104 = v103 & 0x7FFFFFF;
                  if ((v103 & 0x7FFFFFF) != 0)
                  {
                    uint64_t v105 = 0;
                    while (1)
                    {
                      int v106 = *((_DWORD *)v87 + 5);
                      if ((v106 & 0x40000000) != 0)
                      {
                        uint64_t v108 = *(llvm::ConstantAggregateZero ***)(*((void *)v87 - 1) + 32 * v105);
                        uint64_t v189 = 0;
                        uint64_t v107 = (char *)*((void *)v87 - 1);
                      }
                      else
                      {
                        uint64_t v107 = &v87[-32 * (v106 & 0x7FFFFFF)];
                        uint64_t v108 = *(llvm::ConstantAggregateZero ***)&v107[32 * v105];
                        uint64_t v189 = 0;
                      }
                      uint64_t v109 = *(void *)&v107[32 * *((unsigned int *)v87 + 15) + 8 * v105];
                      uint64_t v189 = (void *)v109;
                      int v110 = v175;
                      if (v175)
                      {
                        uint64_t v111 = p_dst;
                        int v112 = v175 - 1;
                        uint64_t v113 = ((v109 >> 4) ^ (v109 >> 9)) & (v175 - 1);
                        uint64_t v114 = p_dst[2 * v113];
                        if ((void *)v109 == v114) {
                          goto LABEL_207;
                        }
                        int v115 = 1;
                        while (v114 != (void *)-4096)
                        {
                          int v116 = v113 + v115++;
                          LODWORD(v113) = v116 & v112;
                          uint64_t v114 = p_dst[2 * v113];
                          if ((void *)v109 == v114) {
                            goto LABEL_205;
                          }
                        }
                      }
                      uint64_t v117 = *(void *)(v109 + 40);
                      if (v117 == v109 + 40)
                      {
                        uint64_t v119 = 0;
                      }
                      else
                      {
                        if (v117) {
                          int32x2_t v118 = (unsigned __int8 *)(v117 - 24);
                        }
                        else {
                          int32x2_t v118 = 0;
                        }
                        if (v118[16] - 29 >= 0xB) {
                          uint64_t v119 = 0;
                        }
                        else {
                          uint64_t v119 = (llvm::Instruction *)v118;
                        }
                      }
                      uint64_t v120 = sub_1CCE87CC0((uint64_t *)&__dst, v108, v119);
                      int v110 = v175;
                      if (v175)
                      {
                        uint64_t v111 = p_dst;
                        unsigned int v121 = ((v189 >> 4) ^ (v189 >> 9)) & (v175 - 1);
                        long long v122 = (uint64_t *)&p_dst[2 * v121];
                        uint64_t v123 = *v122;
                        if (v189 == (void *)*v122) {
                          goto LABEL_204;
                        }
                        uint64_t v124 = 0;
                        int v125 = 1;
                        while (v123 != -4096)
                        {
                          if (v124) {
                            BOOL v126 = 0;
                          }
                          else {
                            BOOL v126 = v123 == -8192;
                          }
                          if (v126) {
                            uint64_t v124 = v122;
                          }
                          unsigned int v127 = v121 + v125++;
                          unsigned int v121 = v127 & (v175 - 1);
                          long long v122 = (uint64_t *)&p_dst[2 * v121];
                          uint64_t v123 = *v122;
                          if (v189 == (void *)*v122) {
                            goto LABEL_204;
                          }
                        }
                        if (v124) {
                          uint64_t v128 = v124;
                        }
                        else {
                          uint64_t v128 = v122;
                        }
                      }
                      else
                      {
                        uint64_t v128 = 0;
                      }
                      long long v122 = sub_1CC0A3E2C((uint64_t)&p_dst, (uint64_t)&v189, (uint64_t *)&v189, v128);
                      uint64_t *v122 = (uint64_t)v189;
                      v122[1] = 0;
                      uint64_t v111 = p_dst;
                      int v110 = v175;
LABEL_204:
                      v122[1] = (uint64_t)v120;
LABEL_205:
                      if (!v110)
                      {
                        int v135 = 0;
LABEL_220:
                        uint64_t v129 = sub_1CC0A3E2C((uint64_t)&p_dst, (uint64_t)&v189, (uint64_t *)&v189, v135);
                        *uint64_t v129 = (uint64_t)v189;
                        v129[1] = 0;
                        goto LABEL_221;
                      }
                      uint64_t v109 = (uint64_t)v189;
                      int v112 = v110 - 1;
                      uint64_t v113 = ((v189 >> 4) ^ (v189 >> 9)) & (v110 - 1);
LABEL_207:
                      uint64_t v129 = (uint64_t *)&v111[2 * v113];
                      uint64_t v130 = *v129;
                      if (v109 != *v129)
                      {
                        uint64_t v131 = 0;
                        int v132 = 1;
                        while (v130 != -4096)
                        {
                          if (v131) {
                            BOOL v133 = 0;
                          }
                          else {
                            BOOL v133 = v130 == -8192;
                          }
                          if (v133) {
                            uint64_t v131 = v129;
                          }
                          int v134 = v113 + v132++;
                          LODWORD(v113) = v134 & v112;
                          uint64_t v129 = (uint64_t *)&v111[2 * v113];
                          uint64_t v130 = *v129;
                          if (v109 == *v129) {
                            goto LABEL_221;
                          }
                        }
                        if (v131) {
                          int v135 = v131;
                        }
                        else {
                          int v135 = v129;
                        }
                        goto LABEL_220;
                      }
LABEL_221:
                      uint64_t v136 = v129[1];
                      int v137 = *(_DWORD *)(v88 + 20);
                      if ((v137 & 0x40000000) != 0) {
                        uint64_t v138 = *(void *)(v88 - 8);
                      }
                      else {
                        uint64_t v138 = v88 - 32 * (v137 & 0x7FFFFFF);
                      }
                      uint64_t v139 = v138 + 32 * v105;
                      if (*(void *)v139)
                      {
                        **(void **)(v139 + 16) = *(void *)(v139 + 8);
                        uint64_t v144 = *(void *)(v139 + 8);
                        if (v144) {
                          *(void *)(v144 + 16) = *(void *)(v139 + 16);
                        }
                      }
                      *(void *)uint64_t v139 = v136;
                      if (v136)
                      {
                        uint64_t v142 = *(void *)(v136 + 8);
                        unsigned int v140 = (void *)(v136 + 8);
                        uint64_t v141 = v142;
                        uint64_t v143 = v138 + 32 * v105;
                        *(void *)(v143 + 8) = v142;
                        if (v142) {
                          *(void *)(v141 + 16) = v143 + 8;
                        }
                        *(void *)(v143 + 16) = v140;
                        *unsigned int v140 = v139;
                      }
                      if (++v105 == v104)
                      {
                        uint64_t v145 = p_dst;
                        goto LABEL_251;
                      }
                    }
                  }
                  uint64_t v145 = 0;
LABEL_251:
                  MEMORY[0x1D25D9CD0](v145, 8);
                }
LABEL_267:
                v34 += 4;
                if (v34 == v86)
                {
                  int v167 = (void ***)__p;
                  uint64_t v168 = (void ***)v186;
                  while (v167 != v168)
                  {
                    uint64_t v169 = v167[3];
                    p_dst = *v167;
                    *(void *)sub_1CD68C4F4((uint64_t)a2, (uint64_t *)&p_dst) = v169;
                    v167 += 4;
                  }
                  break;
                }
              }
            }
          }
LABEL_138:
          uint64_t v4 = *(llvm::ConstantAggregateZero ***)sub_1CD68C4F4((uint64_t)a2, (uint64_t *)&v188);
        }
      }
      else
      {
        int v170 = 1;
        while (v33 != (llvm::ConstantAggregateZero **)-4096)
        {
          unsigned int v171 = v32 + v170++;
          unsigned int v32 = v171 & (v184 - 1);
          uint64_t v33 = *(llvm::ConstantAggregateZero ***)(v182 + 16 * v32);
          if (v172 == v33) {
            goto LABEL_62;
          }
        }
      }
    }
    else
    {
      uint64_t v4 = v172;
    }
    if (v197 != v199) {
      free(v197);
    }
    if (__p)
    {
      uint64_t v186 = (uint64_t *)__p;
      operator delete(__p);
    }
    MEMORY[0x1D25D9CD0](v182, 8);
  }
  return v4;
}

void sub_1CCE8771C(void *__dst, uint64_t ***a2, uint64_t a3, uint64_t a4, void *__src, size_t __len)
{
  uint64_t v6 = __dst;
  if ((*((_DWORD *)a2 + 5) & 0x10000000) == 0)
  {
    if (!__src)
    {
      *uint64_t __dst = 0;
      __dst[1] = 0;
      __dst[2] = 0;
      return;
    }
    if (__len >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (__len >= 0x17)
    {
      size_t v17 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17) {
        size_t v17 = __len | 7;
      }
      size_t v18 = v17 + 1;
      uint64_t v19 = operator new(v17 + 1);
      v6[1] = __len;
      void v6[2] = v18 | 0x8000000000000000;
      void *v6 = v19;
      uint64_t v6 = v19;
    }
    else
    {
      *((unsigned char *)__dst + 23) = __len;
      if (!__len) {
        goto LABEL_18;
      }
    }
    memmove(v6, __src, __len);
LABEL_18:
    *((unsigned char *)v6 + __len) = 0;
    return;
  }
  uint64_t v9 = ***a2;
  uint64_t v10 = *(void *)(v9 + 152);
  uint64_t v11 = *(unsigned int *)(v9 + 168);
  if (!v11) {
    goto LABEL_19;
  }
  LODWORD(v12) = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v13 = (uint64_t ****)(v10 + 16 * v12);
  uint64_t v14 = *v13;
  if (*v13 != a2)
  {
    int v15 = 1;
    while (v14 != (uint64_t ***)-4096)
    {
      int v16 = v12 + v15++;
      uint64_t v12 = v16 & (v11 - 1);
      uint64_t v14 = *(uint64_t ****)(v10 + 16 * v12);
      if (v14 == a2)
      {
        uint64_t v13 = (uint64_t ****)(v10 + 16 * v12);
        goto LABEL_20;
      }
    }
LABEL_19:
    uint64_t v13 = (uint64_t ****)(v10 + 16 * v11);
  }
LABEL_20:
  unint64_t v20 = (uint64_t *)v13[1];
  uint64_t v21 = *v20;
  v22[0] = v20 + 2;
  v22[1] = v21;
  void v22[2] = a3;
  v22[3] = a4;
  __int16 v23 = 1285;
  llvm::Twine::str((llvm::Twine *)v22, __dst);
}

llvm::ConstantAggregateZero **sub_1CCE87868(llvm::ConstantAggregateZero **a1, uint64_t a2)
{
  uint64_t v9 = a1;
  uint64_t v3 = (llvm::ConstantAggregateZero ***)sub_1CD68C4F4(a2, (uint64_t *)&v9);
  uint64_t v5 = *v3;
  if (!*v3)
  {
    uint64_t v6 = v3;
    uint64_t v5 = sub_1CCE87E20(v9, v4);
    void *v6 = v5;
  }
  uint64_t v7 = sub_1CD77FA2C(a2, (uint64_t)v5);
  if (*(void *)(a2 + 32) != v7) {
    return *(llvm::ConstantAggregateZero ***)(v7 + 8);
  }
  return v5;
}

BOOL sub_1CCE878E4(uint64_t a1)
{
  uint64_t v1 = 1;
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16) - 83;
  BOOL v3 = v2 > 8;
  int v4 = (1 << v2) & 0x1C5;
  if (!v3 && v4 != 0) {
    return (*(void *)(a1 + 48) || (*(unsigned char *)(a1 + 23) & 0x20) != 0)
  }
        && llvm::Instruction::getMetadataImpl((uint64_t ***)a1, "is_base_value", 0xDuLL);
  return v1;
}

uint64_t sub_1CCE87950(void *a1, uint64_t *a2)
{
  int v4 = a2 + 1;
  uint64_t v22 = *a2;
  int v23 = 0;
  sub_1CC6125EC((uint64_t)a1, &v22, &v23, (uint64_t)&v24);
  if (!v25) {
    return 0;
  }
  uint64_t v6 = a1[3];
  unint64_t v5 = a1[4];
  uint64_t v7 = v5 - v6;
  *(_DWORD *)(v24 + 8) = (v5 - v6) >> 5;
  unint64_t v8 = a1[5];
  if (v5 >= v8)
  {
    uint64_t v12 = v7 >> 5;
    unint64_t v13 = (v7 >> 5) + 1;
    if (v13 >> 59) {
      abort();
    }
    uint64_t v14 = v8 - v6;
    if (v14 >> 4 > v13) {
      unint64_t v13 = v14 >> 4;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 59) {
        sub_1CB833614();
      }
      int v16 = (char *)operator new(32 * v15);
    }
    else
    {
      int v16 = 0;
    }
    size_t v17 = &v16[32 * v12];
    size_t v18 = &v16[32 * v15];
    *(void *)size_t v17 = *a2;
    *(_OWORD *)(v17 + 8) = *(_OWORD *)v4;
    *((void *)v17 + 3) = v4[2];
    uint64_t v10 = v17 + 32;
    if (v5 == v6)
    {
      uint64_t v19 = &v16[32 * v12];
    }
    else
    {
      do
      {
        uint64_t v19 = v17 - 32;
        long long v20 = *(_OWORD *)(v5 - 16);
        *((_OWORD *)v17 - 2) = *(_OWORD *)(v5 - 32);
        *((_OWORD *)v17 - 1) = v20;
        v5 -= 32;
        v17 -= 32;
      }
      while (v5 != v6);
    }
    uint64_t v21 = (void *)a1[3];
    a1[3] = v19;
    a1[4] = v10;
    a1[5] = v18;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(void *)unint64_t v5 = *a2;
    long long v9 = *(_OWORD *)v4;
    *(void *)(v5 + 24) = v4[2];
    *(_OWORD *)(v5 + 8) = v9;
    uint64_t v10 = (char *)(v5 + 32);
  }
  a1[4] = v10;
  return 1;
}

uint64_t sub_1CCE87ACC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(unsigned __int8 *)(result + 16);
  if (!result || v4 != 83)
  {
    if (result && v4 == 85)
    {
      uint64_t v16 = *(void *)(result - 64);
      uint64_t v8 = *(void *)(a2 + 24);
      if (!v8) {
        goto LABEL_32;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 48))(v8, &v16);
      goto LABEL_10;
    }
    if (!result || v4 != 89)
    {
      if (!result || v4 != 90)
      {
        if (v4 != 91) {
          uint64_t v3 = 0;
        }
        uint64_t v16 = *(void *)(v3 - 64);
        uint64_t v14 = *(void *)(a2 + 24);
        if (!v14) {
          goto LABEL_32;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 48))(v14, &v16);
        uint64_t v15 = *(unsigned int *)(**(void **)(v3 - 64) + 32);
        if (v15 == *(_DWORD *)(v3 + 72))
        {
          __n128 result = llvm::ShuffleVectorInst::isZeroEltSplatMask(*(int **)(v3 + 64), v15);
          if (result) {
            return result;
          }
        }
LABEL_10:
        uint64_t v9 = *(void *)(v3 - 32);
        goto LABEL_23;
      }
      uint64_t v16 = *(void *)(result - 96);
      uint64_t v12 = *(void *)(a2 + 24);
      if (!v12) {
        goto LABEL_32;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 48))(v12, &v16);
    }
    uint64_t v9 = *(void *)(v3 - 64);
LABEL_23:
    uint64_t v16 = v9;
    uint64_t v13 = *(void *)(a2 + 24);
    if (v13) {
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v16);
    }
LABEL_32:
    sub_1CB920400();
    return sub_1CCE87CC0();
  }
  int v5 = *(_DWORD *)(result + 20);
  if ((v5 & 0x40000000) == 0)
  {
    uint64_t v6 = v5 & 0x7FFFFFF;
    uint64_t v7 = (uint64_t *)(result - 32 * v6);
    if (!v6) {
      return result;
    }
    goto LABEL_12;
  }
  uint64_t v7 = *(uint64_t **)(result - 8);
  uint64_t v6 = v5 & 0x7FFFFFF;
  if (v6)
  {
LABEL_12:
    uint64_t v10 = 32 * v6;
    while (1)
    {
      uint64_t v16 = *v7;
      uint64_t v11 = *(void *)(a2 + 24);
      if (!v11) {
        break;
      }
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 48))(v11, &v16);
      v7 += 4;
      v10 -= 32;
      if (!v10) {
        return result;
      }
    }
    goto LABEL_32;
  }
  return result;
}

llvm::Value *sub_1CCE87CC0(uint64_t *a1, llvm::ConstantAggregateZero **a2, llvm::Instruction *a3)
{
  uint64_t v6 = sub_1CCE87868(a2, *a1);
  uint64_t v7 = (llvm::Value *)v6;
  uint64_t v8 = a1[1];
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(unsigned int *)(v8 + 16);
  if (v10)
  {
    LODWORD(v11) = ((v6 >> 4) ^ (v6 >> 9)) & (v10 - 1);
    uint64_t v12 = (llvm::ConstantAggregateZero ***)(v9 + 16 * v11);
    uint64_t v13 = *v12;
    if (v6 == *v12) {
      goto LABEL_8;
    }
    int v14 = 1;
    while (v13 != (llvm::ConstantAggregateZero **)-4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      uint64_t v13 = *(llvm::ConstantAggregateZero ***)(v9 + 16 * v11);
      if (v6 == v13)
      {
        uint64_t v12 = (llvm::ConstantAggregateZero ***)(v9 + 16 * v11);
        goto LABEL_8;
      }
    }
  }
  uint64_t v12 = (llvm::ConstantAggregateZero ***)(v9 + 16 * v10);
LABEL_8:
  if (v12 == (llvm::ConstantAggregateZero ***)(v9 + 16 * v10))
  {
    if (!a3) {
      return v7;
    }
  }
  else
  {
    uint64_t v22 = v6;
    int v23 = 0;
    sub_1CD5D55BC(v8, (uint64_t *)&v22, &v23, (uint64_t)v20);
    uint64_t v7 = *(llvm::Value **)(*(void *)(v8 + 24) + 32 * *((unsigned int *)v20[0] + 2) + 24);
    if (!a3) {
      return v7;
    }
  }
  if (*(llvm::ConstantAggregateZero **)v7 != *a2)
  {
    uint64_t v16 = operator new(0x60uLL);
    size_t v17 = (char *)(v16 + 8);
    v16[13] = v16[13] & 0x38000000 | 1;
    *(void *)uint64_t v16 = 0;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = v16 + 8;
    size_t v18 = *a2;
    v20[0] = "cast";
    __int16 v21 = 259;
    llvm::BitCastInst::BitCastInst((llvm::BitCastInst *)(v16 + 8), v7, v18, v20, a3);
    return (llvm::Value *)v17;
  }
  return v7;
}

llvm::ConstantAggregateZero **sub_1CCE87E20(llvm::ConstantAggregateZero **a1, llvm::Type *a2)
{
  unsigned int v2 = a1;
  uint64_t v3 = *a1;
  unsigned int v4 = *((unsigned __int8 *)v2 + 16);
  if ((*((_DWORD *)v3 + 2) & 0xFE) == 0x12)
  {
    if (v4 == 21) {
      return v2;
    }
    if (v4 <= 0x14) {
      return (llvm::ConstantAggregateZero **)llvm::ConstantAggregateZero::get(v3, a2);
    }
    if (*((unsigned __int8 *)v2 + 16) > 0x4Cu)
    {
      if (*((unsigned __int8 *)v2 + 16) > 0x59u || v4 != 77) {
        return v2;
      }
      int v5 = *(v2 - 4);
      return (llvm::ConstantAggregateZero **)sub_1CCE87E20(v5);
    }
    if (v4 != 62) {
      return v2;
    }
LABEL_30:
    int v5 = v2[-4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)];
    return (llvm::ConstantAggregateZero **)sub_1CCE87E20(v5);
  }
  if (v4 == 21) {
    return v2;
  }
  if (v4 <= 0x14) {
    return (llvm::ConstantAggregateZero **)llvm::ConstantPointerNull::get(v3, a2);
  }
  if (v4 == 76) {
    return v2;
  }
  if (v4 >= 0x1C && v4 - 79 >= 0xFFFFFFF3)
  {
    int v5 = llvm::Value::stripPointerCasts((llvm::Value *)v2);
    return (llvm::ConstantAggregateZero **)sub_1CCE87E20(v5);
  }
  uint64_t v6 = v4 - 33;
  if (v6 > 0x3B) {
    goto LABEL_34;
  }
  if (((1 << (v4 - 33)) & 0x800000088000001) != 0) {
    return v2;
  }
  if (v6 == 29) {
    goto LABEL_30;
  }
  if (v6 == 51)
  {
    uint64_t v8 = (uint64_t)*(v2 - 4);
    if (v8
      && !*(unsigned char *)(v8 + 16)
      && *(llvm::ConstantAggregateZero **)(v8 + 24) == v2[9]
      && (*(unsigned char *)(v8 + 33) & 0x20) != 0
      && *(_DWORD *)(v8 + 36) == 120)
    {
      goto LABEL_30;
    }
  }
  else
  {
LABEL_34:
    if (v4 >= 0x1C && (v2[6] || (*((unsigned char *)v2 + 23) & 0x20) != 0)) {
      llvm::Instruction::getMetadataImpl((uint64_t ***)v2, "is_base_value", 0xDuLL);
    }
  }
  return v2;
}

void sub_1CCE88018()
{
}

__n128 sub_1CCE8802C(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_1F2640908;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CCE88080(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2640908;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CCE880B8(uint64_t *a1, llvm::ConstantAggregateZero ***a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = sub_1CCE87868(*a2, a1[1]);
  uint64_t result = sub_1CCE878E4((uint64_t)v4);
  if (!result || ((*((_DWORD *)*v4 + 2) & 0xFE) != 18) == ((*((_DWORD *)*v3 + 2) & 0xFE) == 18))
  {
    uint64_t v6 = (void *)a1[2];
    v9[0] = (uint64_t)v4;
    v9[1] = (uint64_t)v4;
    int v10 = 0;
    uint64_t v11 = 0;
    uint64_t result = sub_1CCE87950(v6, v9);
    if (result)
    {
      uint64_t v7 = a1[3];
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 >= *(_DWORD *)(v7 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)v7 + 8 * v8) = v4;
      ++*(_DWORD *)(v7 + 8);
    }
  }
  return result;
}

void sub_1CCE88194()
{
}

__n128 sub_1CCE881A8(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_1F2640950;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCE881F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2640950;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::Value *sub_1CCE88224(llvm::Value *result, llvm::ConstantAggregateZero ***a2)
{
  unsigned int v2 = result;
  char v3 = **((unsigned char **)result + 1);
  if (v3)
  {
    unsigned int v4 = *a2;
    int v5 = (uint64_t *)*((void *)result + 2);
    uint64_t v6 = sub_1CCE87868(*a2, *v5);
    __n128 result = llvm::Value::stripPointerCasts((llvm::Value *)v4);
    if (result != (llvm::Value *)v6)
    {
      char v3 = 0;
      goto LABEL_12;
    }
    uint64_t v7 = v5[1];
    uint64_t v8 = *(void *)v7;
    uint64_t v9 = *(unsigned int *)(v7 + 16);
    if (v9)
    {
      LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v11 = (llvm::ConstantAggregateZero ***)(v8 + 16 * v10);
      uint64_t v12 = *v11;
      if (v6 == *v11)
      {
LABEL_11:
        char v3 = v11 == (llvm::ConstantAggregateZero ***)(v8 + 16 * v9);
        goto LABEL_12;
      }
      int v13 = 1;
      while (v12 != (llvm::ConstantAggregateZero **)-4096)
      {
        int v14 = v10 + v13++;
        uint64_t v10 = v14 & (v9 - 1);
        uint64_t v12 = *(llvm::ConstantAggregateZero ***)(v8 + 16 * v10);
        if (v6 == v12)
        {
          uint64_t v11 = (llvm::ConstantAggregateZero ***)(v8 + 16 * v10);
          goto LABEL_11;
        }
      }
    }
    uint64_t v11 = (llvm::ConstantAggregateZero ***)(v8 + 16 * v9);
    goto LABEL_11;
  }
LABEL_12:
  **((unsigned char **)v2 + 1) = v3;
  return result;
}

uint64_t sub_1CCE88300(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        int v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  int v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return a1[4];
  }
  else {
    return a1[3] + 32 * *((unsigned int *)v5 + 2);
  }
}

void sub_1CCE88388()
{
}

__n128 sub_1CCE8839C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F2640998;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CCE883F0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2640998;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CCE88428(uint64_t a1, llvm::ConstantAggregateZero ***a2)
{
  uint64_t v3 = sub_1CCE87868(*a2, *(void *)(a1 + 8));
  uint64_t v4 = **(uint64_t ***)(a1 + 16);
  uint64_t result = sub_1CCE88300(v4, (uint64_t)v3);
  if (v4[4] == result)
  {
    int v6 = 1;
  }
  else
  {
    int v6 = *(_DWORD *)(result + 16);
    uint64_t v3 = *(llvm::ConstantAggregateZero ***)(result + 24);
  }
  uint64_t v7 = *(void *)(a1 + 24);
  int v8 = *(_DWORD *)(v7 + 8);
  if (v8 != 2)
  {
    if (!v8)
    {
      *(_DWORD *)(v7 + 8) = v6;
      *(void *)(v7 + 16) = v3;
      return result;
    }
    if (v6)
    {
      if (v6 != 2)
      {
        if (*(llvm::ConstantAggregateZero ***)(v7 + 16) == v3) {
          return result;
        }
        int v6 = 2;
      }
      *(_DWORD *)(v7 + 8) = v6;
      *(void *)(v7 + 16) = 0;
    }
  }
  return result;
}

BOOL sub_1CCE884D4(llvm::BasicBlock *a1, uint64_t a2, int a3)
{
  uint64_t v4 = (uint64_t **)a1;
  uint64_t v7 = a2;
  if (!llvm::BasicBlock::getUniquePredecessor(a1)) {
    uint64_t v4 = (uint64_t **)sub_1CD1271B8(v4, (int)&v7, 1, "", 0, a3, 0, 0, 0);
  }
  return llvm::FoldSingleEntryPHINodes((llvm *)v4, 0, v5);
}

void sub_1CCE88548(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 56) + 40);
    uint64_t v9 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(void **)v8 + 1576), 0, 0, 1);
    inserted = (uint64_t **)llvm::Module::getOrInsertFunction(v8, "__tmp_use", (const char *)9, v9, 0);
    uint64_t v12 = v10;
    if (*(unsigned char *)(a1 + 16) == 84)
    {
      __int16 v65 = 257;
      int v13 = *(uint64_t **)(a1 + 32);
      uint64_t v14 = (a3 + 1);
      int v15 = operator new(32 * v14 + 80);
      uint64_t v16 = &v15[4 * v14];
      *((_DWORD *)v16 + 5) = *((_DWORD *)v16 + 5) & 0x38000000 | v14 & 0x7FFFFFF;
      if (a3 == -1)
      {
        unsigned int v17 = 0;
      }
      else
      {
        do
        {
          *int v15 = 0;
          v15[1] = 0;
          v15[2] = 0;
          v15[3] = v16;
          v15 += 4;
        }
        while (v15 != v16);
        unsigned int v17 = *((_DWORD *)v16 + 5) & 0xC0000000;
      }
      *uint64_t v16 = *inserted[2];
      v16[1] = 0;
      *((unsigned char *)v16 + 16) = 84;
      *((unsigned char *)v16 + 17) = 0;
      *((_WORD *)v16 + 9) = 0;
      *((_DWORD *)v16 + 5) = v17 | v14 & 0x7FFFFFF;
      *(_OWORD *)(v16 + 3) = 0u;
      unsigned int v32 = v16 + 3;
      *(_OWORD *)(v16 + 5) = 0u;
      *((_DWORD *)v16 + 14) = 0;
      if (v13)
      {
        uint64_t v50 = v13[2];
        v16[5] = v50;
        *(_WORD *)(v50 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v16 + 23) & 0x10) != 0)
        {
          uint64_t v56 = *(void *)(v50 + 56);
          if (v56)
          {
            uint64_t v57 = *(llvm::ValueSymbolTable **)(v56 + 104);
            if (v57) {
              llvm::ValueSymbolTable::reinsertValue(v57, (llvm::Value *)v16);
            }
          }
        }
        uint64_t v51 = *v13;
        v16[3] = *v13;
        v16[4] = v13;
        *(void *)(v51 + 8) = v32;
        *int v13 = (uint64_t)v32;
      }
      v16[8] = 0;
      uint64_t v33 = (uint64_t ***)v16;
      uint64_t v34 = inserted;
      uint64_t v35 = v12;
      char v36 = a2;
    }
    else
    {
      __int16 v65 = 257;
      uint64_t v18 = *(void *)(a1 - 96);
      uint64_t v19 = (uint64_t *)(v18 + 40);
      long long v20 = *(uint64_t **)(v18 + 48);
      uint64_t v63 = v10;
      if (v20 == v19)
      {
LABEL_11:
        uint64_t v22 = a2;
      }
      else
      {
        while (1)
        {
          __int16 v21 = v20 - 3;
          if (!v20) {
            __int16 v21 = 0;
          }
          if (*((unsigned char *)v21 + 16) != 83) {
            break;
          }
          long long v20 = (uint64_t *)v20[1];
          if (v20 == v19) {
            goto LABEL_11;
          }
        }
        unsigned int v23 = *((unsigned __int8 *)v20 - 8) - 38;
        BOOL v24 = v23 > 0x38;
        uint64_t v25 = (1 << v23) & 0x100060000000001;
        uint64_t v22 = a2;
        if (v24 || v25 == 0) {
          uint64_t v19 = v20;
        }
        else {
          uint64_t v19 = (uint64_t *)v20[1];
        }
      }
      uint64_t v27 = (a3 + 1);
      uint64_t __sz = 32 * v27 + 80;
      unint64_t v28 = operator new(__sz);
      uint64_t v29 = &v28[4 * v27];
      int v30 = v27 & 0x7FFFFFF;
      *((_DWORD *)v29 + 5) = *((_DWORD *)v29 + 5) & 0x38000000 | v27 & 0x7FFFFFF;
      if (a3 == -1)
      {
        unsigned int v31 = 0;
      }
      else
      {
        do
        {
          *unint64_t v28 = 0;
          v28[1] = 0;
          v28[2] = 0;
          v28[3] = v29;
          v28 += 4;
        }
        while (v28 != v29);
        unsigned int v31 = *((_DWORD *)v29 + 5) & 0xC0000000;
      }
      void *v29 = *inserted[2];
      v29[1] = 0;
      *((unsigned char *)v29 + 16) = 84;
      *((unsigned char *)v29 + 17) = 0;
      *((_WORD *)v29 + 9) = 0;
      *((_DWORD *)v29 + 5) = v31 | v30;
      *(_OWORD *)(v29 + 3) = 0u;
      unsigned int v37 = v29 + 3;
      *(_OWORD *)(v29 + 5) = 0u;
      *((_DWORD *)v29 + 14) = 0;
      if (v19)
      {
        uint64_t v52 = v19[2];
        v29[5] = v52;
        *(_WORD *)(v52 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v29 + 23) & 0x10) != 0)
        {
          uint64_t v58 = *(void *)(v52 + 56);
          if (v58)
          {
            uint64_t v59 = *(llvm::ValueSymbolTable **)(v58 + 104);
            if (v59) {
              llvm::ValueSymbolTable::reinsertValue(v59, (llvm::Value *)v29);
            }
          }
        }
        uint64_t v53 = *v19;
        v29[3] = *v19;
        v29[4] = v19;
        *(void *)(v53 + 8) = v37;
        *uint64_t v19 = (uint64_t)v37;
      }
      v29[8] = 0;
      llvm::CallInst::init((uint64_t ***)v29, inserted, v63, v22, a3, 0, 0, v64);
      unsigned int v38 = *(_DWORD *)(a4 + 8);
      if (v38 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a4 + 8 * v38) = v29;
      ++*(_DWORD *)(a4 + 8);
      __int16 v65 = 257;
      uint64_t v39 = *(void *)(a1 - 64);
      unsigned int v40 = (uint64_t *)(v39 + 40);
      for (uint64_t i = *(uint64_t **)(v39 + 48); i != v40; uint64_t i = (uint64_t *)i[1])
      {
        int v42 = i - 3;
        if (!i) {
          int v42 = 0;
        }
        if (*((unsigned char *)v42 + 16) != 83)
        {
          unsigned int v43 = *((unsigned __int8 *)i - 8) - 38;
          BOOL v24 = v43 > 0x38;
          uint64_t v44 = (1 << v43) & 0x100060000000001;
          if (v24 || v44 == 0) {
            unsigned int v40 = i;
          }
          else {
            unsigned int v40 = (uint64_t *)i[1];
          }
          break;
        }
      }
      uint64_t v46 = operator new(__sz);
      uint64_t v16 = &v46[4 * v27];
      *((_DWORD *)v16 + 5) = *((_DWORD *)v16 + 5) & 0x38000000 | v30;
      if (a3 == -1)
      {
        unsigned int v47 = 0;
      }
      else
      {
        do
        {
          *uint64_t v46 = 0;
          v46[1] = 0;
          v46[2] = 0;
          void v46[3] = v16;
          v46 += 4;
        }
        while (v46 != v16);
        unsigned int v47 = *((_DWORD *)v16 + 5) & 0xC0000000;
      }
      *uint64_t v16 = *inserted[2];
      v16[1] = 0;
      *((unsigned char *)v16 + 16) = 84;
      *((unsigned char *)v16 + 17) = 0;
      *((_WORD *)v16 + 9) = 0;
      *((_DWORD *)v16 + 5) = v47 | v30;
      *(_OWORD *)(v16 + 3) = 0u;
      uint64_t v48 = v16 + 3;
      *(_OWORD *)(v16 + 5) = 0u;
      *((_DWORD *)v16 + 14) = 0;
      if (v40)
      {
        uint64_t v54 = v40[2];
        v16[5] = v54;
        *(_WORD *)(v54 + 18) &= ~0x8000u;
        if ((*((unsigned char *)v16 + 23) & 0x10) != 0)
        {
          uint64_t v60 = *(void *)(v54 + 56);
          if (v60)
          {
            uint64_t v61 = *(llvm::ValueSymbolTable **)(v60 + 104);
            if (v61) {
              llvm::ValueSymbolTable::reinsertValue(v61, (llvm::Value *)v16);
            }
          }
        }
        uint64_t v55 = *v40;
        v16[3] = *v40;
        v16[4] = v40;
        *(void *)(v55 + 8) = v48;
        *unsigned int v40 = (uint64_t)v48;
      }
      v16[8] = 0;
      uint64_t v33 = (uint64_t ***)v16;
      uint64_t v34 = inserted;
      uint64_t v35 = v63;
      char v36 = v22;
    }
    llvm::CallInst::init(v33, v34, v35, v36, a3, 0, 0, v64);
    unsigned int v49 = *(_DWORD *)(a4 + 8);
    if (v49 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a4 + 8 * v49) = v16;
    ++*(_DWORD *)(a4 + 8);
  }
}

uint64_t *sub_1CCE88A74(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (uint64_t *)MEMORY[0x1D25D9CD0](*a1, 8);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  *((_DWORD *)a1 + 4) = v5;
  if (v5)
  {
    *a1 = (uint64_t)operator new(16 * v5, (std::align_val_t)8uLL);
    return sub_1CD77FA94(a1, (void *)a2);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void sub_1CCE88AE8(uint64_t a1, uint64_t a2)
{
  v101[32] = *MEMORY[0x1E4F143B8];
  v98[0] = 1;
  uint64_t v2 = 1;
  int64x2_t v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v98[v2] = v3;
    v2 += 2;
  }
  while (v2 != 33);
  uint64_t v99 = v101;
  uint64_t v100 = 0x2000000000;
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v83 = a1 + 72;
  if (v4 != a1 + 72)
  {
    uint64_t v5 = a2 + 144;
    uint64_t v6 = a2 + 96;
    uint64_t v84 = a2 + 144;
    uint64_t v85 = a2 + 48;
    do
    {
      if (v4) {
        uint64_t v7 = (void *)(v4 - 24);
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = v7 + 5;
      unsigned int v93 = 0;
      uint64_t v94 = 0;
      int v95 = 0;
      unsigned int v97 = 0;
      long long v96 = 0uLL;
      for (uint64_t i = (void *)v7[6]; i != v8; uint64_t i = (void *)i[1])
      {
        uint64_t v10 = (uint64_t)(i - 3);
        if (!i) {
          uint64_t v10 = 0;
        }
        if (!*(void *)v10 || *(_DWORD *)(*(void *)v10 + 8) != 271)
        {
          if ((*(_DWORD *)(*(void *)v10 + 8) & 0xFE) != 0x12) {
            continue;
          }
          uint64_t v11 = *(void *)(*(void *)v10 + 24);
          if (!v11 || *(_DWORD *)(v11 + 8) != 271) {
            continue;
          }
        }
        v87[0] = v10;
        sub_1CBF5F714(&v93, v87);
      }
      v87[0] = (uint64_t)v7;
      uint64_t v12 = sub_1CD77FAFC(a2, v87);
      MEMORY[0x1D25D9CD0](*(void *)v12, 8);
      int v13 = 0;
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 16) = 0;
      *(void *)uint64_t v12 = v93;
      *(void *)(v12 + 8) = v94;
      unsigned int v93 = 0;
      uint64_t v94 = 0;
      *(_DWORD *)(v12 + 16) = v95;
      int v95 = 0;
      uint64_t v14 = *(void **)(v12 + 24);
      if (v14)
      {
        *(void *)(v12 + 32) = v14;
        operator delete(v14);
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 32) = 0;
        *(void *)(v12 + 40) = 0;
        int v13 = v93;
      }
      *(_OWORD *)(v12 + 24) = v96;
      *(void *)(v12 + 40) = v97;
      long long v96 = 0uLL;
      unsigned int v97 = 0;
      MEMORY[0x1D25D9CD0](v13, 8);
      unsigned int v93 = (unsigned __int8 *)v7;
      uint64_t v15 = sub_1CD77FAFC(v85, (uint64_t *)&v93);
      sub_1CD47558C((_DWORD *)v15);
      *(void *)(v15 + 32) = *(void *)(v15 + 24);
      uint64_t v16 = v7[5];
      unsigned int v93 = (unsigned __int8 *)v7;
      unsigned int v17 = (void *)sub_1CD77FAFC(v85, (uint64_t *)&v93);
      sub_1CCE89410(v16, v7 + 5, v17);
      unsigned int v93 = (unsigned __int8 *)v7;
      uint64_t v18 = sub_1CD77FAFC(v5, (uint64_t *)&v93);
      MEMORY[0x1D25D9CD0](*(void *)v18, 8);
      uint64_t v19 = *(void **)(v18 + 24);
      *(void *)uint64_t v18 = 0;
      *(void *)(v18 + 8) = 0;
      *(_DWORD *)(v18 + 16) = 0;
      if (v19)
      {
        *(void *)(v18 + 32) = v19;
        operator delete(v19);
      }
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0;
      *(void *)(v18 + 40) = 0;
      MEMORY[0x1D25D9CD0](0, 8);
      v87[0] = (uint64_t)v7;
      uint64_t v20 = sub_1CD77FAFC(v5, v87);
      __int16 v21 = (void *)v7[5];
      if (v21 != v8)
      {
        if (v21) {
          uint64_t v22 = v21 - 3;
        }
        else {
          uint64_t v22 = 0;
        }
        unsigned int v23 = (void *)v20;
        if (*((unsigned char *)v22 + 16) != 30)
        {
          int v47 = 2;
          switch(*((unsigned char *)v22 + 16))
          {
            case 0x1E:
LABEL_142:
              __break(1u);
              JUMPOUT(0x1CCE893B8);
            case 0x1F:
              int v47 = (*((_DWORD *)v22 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_71;
            case 0x20:
            case 0x26:
              int v47 = (*((_DWORD *)v22 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_71;
            case 0x21:
              goto LABEL_32;
            case 0x24:
              int v47 = *((_WORD *)v22 + 9) & 1;
              goto LABEL_71;
            case 0x25:
              int v47 = 1;
              goto LABEL_32;
            case 0x27:
              int v47 = *((_DWORD *)v22 + 20) + 1;
LABEL_71:
              if (!v47) {
                goto LABEL_49;
              }
              goto LABEL_32;
            default:
              goto LABEL_49;
          }
        }
        if ((*((_DWORD *)v22 + 5) & 0x7FFFFFF) == 3) {
          int v47 = 2;
        }
        else {
          int v47 = 1;
        }
LABEL_32:
        for (unsigned int j = 0; j != v47; ++j)
        {
          uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v22, j);
          uint64_t v26 = Successor + 40;
          for (uint64_t k = *(void *)(Successor + 48); k != v26; uint64_t k = *(void *)(k + 8))
          {
            uint64_t v28 = k ? k - 24 : 0;
            if (!k || *(unsigned char *)(v28 + 16) != 83) {
              break;
            }
            unsigned int v93 = 0;
            uint64_t v29 = (unsigned __int8 *)sub_1CBF73380(v28, (uint64_t)v7);
            unsigned int v93 = v29;
            if (!*(void *)v29 || *(_DWORD *)(*(void *)v29 + 8) != 271)
            {
              if ((*(_DWORD *)(*(void *)v29 + 8) & 0xFE) != 0x12) {
                continue;
              }
              uint64_t v30 = *(void *)(*(void *)v29 + 24);
              if (!v30 || *(_DWORD *)(v30 + 8) != 271) {
                continue;
              }
            }
            if (v29[16] >= 0x15u) {
              sub_1CBF5F714(v23, &v93);
            }
          }
        }
      }
LABEL_49:
      unsigned int v93 = (unsigned __int8 *)v7;
      uint64_t v31 = sub_1CD77FAFC(v85, (uint64_t *)&v93);
      v87[0] = (uint64_t)v7;
      uint64_t v32 = sub_1CD77FAFC(v6, v87);
      sub_1CD542C18(v32, v31);
      unsigned int v93 = (unsigned __int8 *)v7;
      uint64_t v33 = (void *)sub_1CD77FAFC(v6, (uint64_t *)&v93);
      v87[0] = (uint64_t)v7;
      uint64_t v5 = v84;
      uint64_t v34 = sub_1CD77FAFC(v84, v87);
      char v36 = *(void **)(v34 + 24);
      uint64_t v35 = *(void **)(v34 + 32);
      while (v36 != v35)
        sub_1CBF5F714(v33, v36++);
      unsigned int v93 = (unsigned __int8 *)v7;
      uint64_t v37 = sub_1CD77FAFC(v6, (uint64_t *)&v93);
      v87[0] = (uint64_t)v7;
      uint64_t v38 = sub_1CD77FAFC(a2, v87);
      unsigned int v40 = *(void **)(v38 + 24);
      uint64_t v39 = *(void **)(v38 + 32);
      while (v40 != v39)
        sub_1CD77FBE4(v37, v40++);
      unsigned int v93 = (unsigned __int8 *)v7;
      uint64_t v41 = sub_1CD77FAFC(v6, (uint64_t *)&v93);
      if (*(void *)(v41 + 24) != *(void *)(v41 + 32))
      {
        for (uint64_t m = v7[1]; m; uint64_t m = *(void *)(m + 8))
        {
          uint64_t v43 = *(void *)(m + 24);
          unsigned int v44 = *(unsigned __int8 *)(v43 + 16);
          if (v43) {
            BOOL v45 = v44 >= 0x1C;
          }
          else {
            BOOL v45 = 0;
          }
          if (v45 && v44 - 29 < 0xB) {
            break;
          }
        }
        sub_1CCE8951C(v98, m);
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v83);
    uint64_t v48 = v100;
    if (v100)
    {
      while (1)
      {
        uint64_t v49 = *((void *)v99 + v48 - 1);
        unsigned int v93 = 0;
        if (sub_1CD77FD5C((uint64_t)v98, v49, &v93))
        {
          *(void *)unsigned int v93 = -8192;
          LODWORD(v98[0]) -= 2;
          ++HIDWORD(v98[0]);
        }
        LODWORD(v100) = v100 - 1;
        uint64_t v92 = v49;
        uint64_t v50 = sub_1CD77FAFC(v5, &v92);
        unsigned int v93 = 0;
        uint64_t v94 = 0;
        int v95 = 0;
        sub_1CBFCB9AC((uint64_t)&v93, v50);
        long long v96 = 0uLL;
        unsigned int v97 = 0;
        uint64_t v52 = *(unsigned char **)(v50 + 24);
        uint64_t v51 = *(unsigned char **)(v50 + 32);
        int64_t v53 = v51 - v52;
        if (v51 == v52)
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
        }
        else
        {
          if (v53 < 0) {
            goto LABEL_141;
          }
          uint64_t v54 = (char *)operator new(v51 - v52);
          *(void *)&long long v96 = v54;
          *((void *)&v96 + 1) = v54;
          uint64_t v55 = &v54[8 * (v53 >> 3)];
          unsigned int v97 = v55;
          memmove(v54, v52, v53);
          *((void *)&v96 + 1) = v55;
        }
        uint64_t v56 = *(void *)(v49 + 40);
        if (v56 == v49 + 40) {
          goto LABEL_99;
        }
        if (v56) {
          uint64_t v57 = v56 - 24;
        }
        else {
          uint64_t v57 = 0;
        }
        if (*(unsigned char *)(v57 + 16) != 30)
        {
          int v63 = 2;
          switch(*(unsigned char *)(v57 + 16))
          {
            case 0x1E:
              goto LABEL_142;
            case 0x1F:
              int v63 = (*(_DWORD *)(v57 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_105;
            case 0x20:
            case 0x26:
              int v63 = (*(_DWORD *)(v57 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_105;
            case 0x21:
              goto LABEL_93;
            case 0x24:
              int v63 = *(_WORD *)(v57 + 18) & 1;
              goto LABEL_105;
            case 0x25:
              int v63 = 1;
              goto LABEL_93;
            case 0x27:
              int v63 = *(_DWORD *)(v57 + 80) + 1;
LABEL_105:
              if (!v63) {
                goto LABEL_99;
              }
              goto LABEL_93;
            default:
              goto LABEL_99;
          }
        }
        int v63 = (*(_DWORD *)(v57 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_93:
        unsigned int v58 = 0;
        uint64_t v59 = v55 - v54;
        do
        {
          v87[0] = llvm::Instruction::getSuccessor((llvm::Instruction *)v57, v58);
          uint64_t v60 = sub_1CD77FAFC(v6, v87);
          uint64_t v62 = *(void **)(v60 + 24);
          uint64_t v61 = *(void **)(v60 + 32);
          while (v62 != v61)
            sub_1CBF5F714(&v93, v62++);
          ++v58;
        }
        while (v63 != v58);
        uint64_t v54 = (char *)v96;
        uint64_t v5 = v84;
        if (v59 == *((void *)&v96 + 1) - (void)v96) {
          goto LABEL_99;
        }
        uint64_t v64 = sub_1CD77FAFC(v84, &v92);
        sub_1CD542C18(v64, (uint64_t)&v93);
        v87[0] = 0;
        v87[1] = 0;
        int v88 = 0;
        sub_1CBFCB9AC((uint64_t)v87, (uint64_t)&v93);
        int v89 = 0;
        uint64_t v90 = 0;
        uint64_t v91 = 0;
        __int16 v65 = (const void *)v96;
        int64_t v66 = *((void *)&v96 + 1) - v96;
        if (*((void *)&v96 + 1) != (void)v96)
        {
          if (v66 < 0) {
LABEL_141:
          }
            abort();
          int v89 = (char *)operator new(*((void *)&v96 + 1) - v96);
          uint64_t v90 = v89;
          uint64_t v67 = &v89[8 * (v66 >> 3)];
          uint64_t v91 = v67;
          memmove(v89, v65, v66);
          uint64_t v90 = v67;
        }
        uint64_t v68 = sub_1CD77FAFC(v85, &v92);
        uint64_t v70 = *(void **)(v68 + 24);
        unint64_t v69 = *(void **)(v68 + 32);
        while (v70 != v69)
          sub_1CBF5F714(v87, v70++);
        uint64_t v71 = sub_1CD77FAFC(a2, &v92);
        uint64_t v73 = *(void **)(v71 + 24);
        uint64_t v72 = *(void **)(v71 + 32);
        while (v73 != v72)
          sub_1CD77FBE4((uint64_t)v87, v73++);
        uint64_t v74 = sub_1CD77FAFC(v6, &v92);
        uint64_t v75 = *(void *)(v74 + 32) - *(void *)(v74 + 24);
        size_t v76 = v89;
        if (v75 != v90 - v89) {
          break;
        }
        if (v89) {
          goto LABEL_118;
        }
LABEL_119:
        MEMORY[0x1D25D9CD0](v87[0], 8);
        uint64_t v54 = (char *)v96;
LABEL_99:
        if (v54)
        {
          *((void *)&v96 + 1) = v54;
          operator delete(v54);
        }
        MEMORY[0x1D25D9CD0](v93, 8);
        uint64_t v48 = v100;
        if (!v100) {
          goto LABEL_136;
        }
      }
      uint64_t v77 = sub_1CD77FAFC(v6, &v92);
      sub_1CD542C18(v77, (uint64_t)v87);
      for (uint64_t n = *(void *)(v49 + 8); n; uint64_t n = *(void *)(n + 8))
      {
        uint64_t v79 = *(void *)(n + 24);
        unsigned int v80 = *(unsigned __int8 *)(v79 + 16);
        if (v79) {
          BOOL v81 = v80 >= 0x1C;
        }
        else {
          BOOL v81 = 0;
        }
        if (v81 && v80 - 29 < 0xB) {
          break;
        }
      }
      sub_1CCE8951C(v98, n);
      size_t v76 = v89;
      if (!v89) {
        goto LABEL_119;
      }
LABEL_118:
      uint64_t v90 = v76;
      operator delete(v76);
      goto LABEL_119;
    }
  }
LABEL_136:
  if (v99 != v101) {
    free(v99);
  }
  if ((v98[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v98[1], 8);
  }
}

uint64_t sub_1CCE89410(uint64_t result, void *a2, void *a3)
{
  if ((void *)result != a2)
  {
    v15[7] = v3;
    v15[8] = v4;
    uint64_t v7 = (void *)result;
    do
    {
      if (v7) {
        uint64_t v8 = v7 - 3;
      }
      else {
        uint64_t v8 = 0;
      }
      v15[0] = v8;
      uint64_t result = sub_1CD77FBE4((uint64_t)a3, v15);
      if (*((unsigned char *)v8 + 16) != 83)
      {
        int v9 = *((_DWORD *)v8 + 5);
        if ((v9 & 0x40000000) != 0)
        {
          uint64_t v11 = (unsigned __int8 **)*(v8 - 1);
          uint64_t v10 = v9 & 0x7FFFFFF;
          if (v10)
          {
LABEL_11:
            uint64_t v12 = 32 * v10;
            do
            {
              v15[0] = 0;
              int v13 = *v11;
              v15[0] = v13;
              if ((*(void *)v13 && *(_DWORD *)(*(void *)v13 + 8) == 271
                 || (*(_DWORD *)(*(void *)v13 + 8) & 0xFE) == 0x12
                 && (uint64_t v14 = *(void *)(*(void *)v13 + 24)) != 0
                 && *(_DWORD *)(v14 + 8) == 271)
                && v13[16] >= 0x15u)
              {
                uint64_t result = sub_1CBF5F714(a3, v15);
              }
              v11 += 4;
              v12 -= 32;
            }
            while (v12);
          }
        }
        else
        {
          uint64_t v10 = v9 & 0x7FFFFFF;
          uint64_t v11 = (unsigned __int8 **)&v8[-4 * v10];
          if (v10) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v7 = (void *)*v7;
    }
    while (v7 != a2);
  }
  return result;
}

void *sub_1CCE8951C(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = *(void *)(a2 + 24);
LABEL_3:
    uint64_t v9 = *(void *)(v4 + 40);
    uint64_t result = sub_1CD77FC9C((uint64_t)v10, v3, &v9);
    if (v10[16])
    {
      unint64_t v5 = *(unsigned int *)(v3 + 272);
      if (v5 >= *(unsigned int *)(v3 + 276)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v3 + 264) + 8 * v5) = *(void *)(*(void *)(v2 + 24) + 40);
      ++*(_DWORD *)(v3 + 272);
    }
    while (1)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        break;
      }
      uint64_t v4 = *(void *)(v2 + 24);
      unsigned int v6 = *(unsigned __int8 *)(v4 + 16);
      if (v4) {
        BOOL v7 = v6 >= 0x1C;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7 && v6 - 29 < 0xB) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

void sub_1CCE895FC(void **a1, void *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *unint64_t v5 = *a2;
    unsigned int v6 = v5 + 7;
    sub_1CD46AEB4((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
    goto LABEL_21;
  }
  uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5 - (unsigned char *)*a1) >> 3);
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x492492492492492) {
    abort();
  }
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (void)*a1) >> 3);
  if (2 * v9 > v8) {
    unint64_t v8 = 2 * v9;
  }
  if (v9 >= 0x249249249249249) {
    unint64_t v10 = 0x492492492492492;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v10)
  {
    if (v10 > 0x492492492492492) {
      sub_1CB833614();
    }
    uint64_t v11 = (char *)operator new(56 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[56 * v7];
  int v13 = &v11[56 * v10];
  *(void *)uint64_t v12 = *a2;
  unsigned int v6 = v12 + 56;
  sub_1CD46AEB4((uint64_t)(v12 + 8), (uint64_t)(a2 + 1));
  uint64_t v15 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  do
  {
    uint64_t v16 = *((void *)v14 - 7);
    v14 -= 56;
    *((void *)v12 - 7) = v16;
    v12 -= 56;
    __n128 v17 = sub_1CD46AEB4((uint64_t)(v12 + 8), (uint64_t)(v14 + 8));
  }
  while (v14 != v15);
  uint64_t v14 = (char *)*a1;
  uint64_t v18 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v6;
  for (a1[2] = v13; v18 != v14; v18 -= 56)
  {
    uint64_t v19 = (void *)*((void *)v18 - 3);
    if (v19)
    {
      *((void *)v18 - 2) = v19;
      operator delete(v19);
    }
    MEMORY[0x1D25D9CD0](*((void *)v18 - 6), 8, v17);
  }
  if (v14) {
LABEL_20:
  }
    operator delete(v14);
LABEL_21:
  a1[1] = v6;
}

uint64_t sub_1CCE89798(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v30 = v5;
  uint64_t v6 = sub_1CD77FAFC(a2 + 144, &v30);
  v25[0] = 0;
  v25[1] = 0;
  int v26 = 0;
  sub_1CBFCB9AC((uint64_t)v25, v6);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  unint64_t v8 = *(unsigned char **)(v6 + 24);
  uint64_t v7 = *(unsigned char **)(v6 + 32);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
LABEL_29:
    }
      abort();
    uint64_t v27 = (char *)operator new(v7 - v8);
    uint64_t v28 = v27;
    unint64_t v10 = &v27[8 * (v9 >> 3)];
    uint64_t v29 = v10;
    memmove(v27, v8, v9);
    uint64_t v28 = v10;
  }
  sub_1CCE89410(*(void *)(v5 + 40), *(void **)(a1 + 24), v25);
  v31[0] = a1;
  sub_1CD77FBE4((uint64_t)v25, v31);
  uint64_t v11 = v27;
  uint64_t v12 = v28;
  if (v27 != v28)
  {
    do
    {
      sub_1CBF5FAF4((uint64_t)a3, v11, (uint64_t)v31);
      if (v32)
      {
        uint64_t v14 = (void *)a3[4];
        unint64_t v13 = a3[5];
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = (void *)a3[3];
          uint64_t v17 = v14 - v16;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61) {
            goto LABEL_29;
          }
          uint64_t v19 = v13 - (void)v16;
          if (v19 >> 2 > v18) {
            unint64_t v18 = v19 >> 2;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            if (v20 >> 61) {
              sub_1CB833614();
            }
            __int16 v21 = (char *)operator new(8 * v20);
          }
          else
          {
            __int16 v21 = 0;
          }
          uint64_t v22 = &v21[8 * v17];
          *(void *)uint64_t v22 = *(void *)v11;
          uint64_t v15 = v22 + 8;
          if (v14 != v16)
          {
            do
            {
              uint64_t v23 = *--v14;
              *((void *)v22 - 1) = v23;
              v22 -= 8;
            }
            while (v14 != v16);
            uint64_t v14 = (void *)a3[3];
          }
          a3[3] = v22;
          a3[4] = v15;
          a3[5] = &v21[8 * v20];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *uint64_t v14 = *(void *)v11;
          uint64_t v15 = v14 + 1;
        }
        a3[4] = v15;
      }
      v11 += 8;
    }
    while (v11 != v12);
    uint64_t v11 = v27;
  }
  if (v11)
  {
    uint64_t v28 = v11;
    operator delete(v11);
  }
  return MEMORY[0x1D25D9CD0](v25[0], 8);
}

void sub_1CCE89984(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        MEMORY[0x1D25D9CD0](*((void *)v4 - 6), 8);
        v4 -= 56;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1CCE89A2C(char **a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9 >> 60) {
    sub_1CB833614();
  }
  uint64_t v12 = (char *)operator new(16 * v9);
  unint64_t v13 = &v12[16 * v5];
  uint64_t v14 = *a3;
  *(void *)unint64_t v13 = *a2;
  *((void *)v13 + 1) = v14;
  uint64_t v15 = v13 + 16;
  if (v4 == v3)
  {
    uint64_t v16 = &v12[16 * v5];
  }
  else
  {
    do
    {
      uint64_t v16 = v13 - 16;
      *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
      v4 -= 16;
      v13 -= 16;
    }
    while (v4 != v3);
  }
  *a1 = v16;
  a1[1] = v15;
  a1[2] = &v12[16 * v9];
  if (v3) {
    operator delete(v3);
  }
  return v15;
}

BOOL sub_1CCE89B20(uint64_t *a1, void *a2)
{
  uint64_t v7 = (void *)*a2;
  unsigned int v4 = *(unsigned __int8 *)(*(void *)sub_1CD68C4F4(*a1, (uint64_t *)&v7) + 16);
  if (v4 <= 0x14)
  {
    uint64_t v5 = a1[1];
    uint64_t v7 = 0;
    if (sub_1CBF5FB7C((uint64_t *)v5, a2, &v7))
    {
      *uint64_t v7 = -8192;
      *(int32x2_t *)(v5 + 8) = vadd_s32(*(int32x2_t *)(v5 + 8), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  return v4 < 0x15;
}

uint64_t sub_1CCE89BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)a2;
  unsigned int v4 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v4 & 0xFE) == 0x12) {
    unsigned int v4 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v4 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v5 = v4 >> 8;
  uint64_t v6 = *(unsigned int *)(*(void *)a1 + 240);
  uint64_t v7 = *(void *)(*(void *)a1 + 232);
  if (v6)
  {
    uint64_t v7 = *(void *)(*(void *)a1 + 232);
    unint64_t v8 = *(unsigned int *)(*(void *)a1 + 240);
    do
    {
      unint64_t v9 = v8 >> 1;
      uint64_t v10 = v7 + 16 * (v8 >> 1);
      unsigned int v11 = *(_DWORD *)(v10 + 8);
      uint64_t v12 = v10 + 16;
      v8 += ~(v8 >> 1);
      if (v11 < v5) {
        uint64_t v7 = v12;
      }
      else {
        unint64_t v8 = v9;
      }
    }
    while (v8);
  }
  if (v7 == *(void *)(*(void *)a1 + 232) + 16 * v6 || *(_DWORD *)(v7 + 8) != v5) {
LABEL_12:
  }
    uint64_t v7 = *(void *)(*(void *)a1 + 232);
  unint64_t v13 = (llvm::LLVMContext *)*(unsigned int *)(v7 + 4);
  uint64_t v14 = *(void *)(sub_1CD7806A4(*(void *)(a1 + 8), a2) + 8);
  uint64_t v15 = *(uint64_t **)(a1 + 16);
  uint64_t v16 = llvm::IntegerType::get(*(llvm::IntegerType **)(a1 + 24), v13);
  __int16 v37 = 257;
  uint64_t v17 = (unsigned __int8 *)v14;
  if (*(void *)v14 != v16)
  {
    if (*(unsigned __int8 *)(v14 + 16) <= 0x14u)
    {
      uint64_t v17 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15[9] + 224))(v15[9], 47, v14, v16);
      if (v17) {
        BOOL v21 = v17[16] >= 0x1Cu;
      }
      else {
        BOOL v21 = 0;
      }
      if (v21)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)v15[10] + 16))(v15[10], v17, v36, v15[6], v15[7]);
        uint64_t v30 = *((unsigned int *)v15 + 2);
        if (v30)
        {
          uint64_t v31 = *v15;
          uint64_t v32 = v31 + 16 * v30;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v17, *(_DWORD *)v31, *(llvm::MDNode **)(v31 + 8));
            v31 += 16;
          }
          while (v31 != v32);
        }
      }
    }
    else
    {
      __int16 v39 = 257;
      uint64_t v17 = (unsigned __int8 *)llvm::CastInst::Create(47, v14, v16, v38, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)v15[10] + 16))(v15[10], v17, v36, v15[6], v15[7]);
      uint64_t v18 = *((unsigned int *)v15 + 2);
      if (v18)
      {
        uint64_t v19 = *v15;
        uint64_t v20 = v19 + 16 * v18;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v17, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
          v19 += 16;
        }
        while (v19 != v20);
      }
    }
  }
  uint64_t v22 = *(uint64_t **)(a1 + 16);
  uint64_t v23 = llvm::IntegerType::get(*(llvm::IntegerType **)(a1 + 24), v13);
  __int16 v37 = 257;
  if (*(void *)v2 != v23)
  {
    if (v2[16] <= 0x14u)
    {
      uint64_t v2 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v22[9] + 224))(v22[9], 47, v2, v23);
      if (v2) {
        BOOL v27 = v2[16] >= 0x1Cu;
      }
      else {
        BOOL v27 = 0;
      }
      if (v27)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)v22[10] + 16))(v22[10], v2, v36, v22[6], v22[7]);
        uint64_t v33 = *((unsigned int *)v22 + 2);
        if (v33)
        {
          uint64_t v34 = *v22;
          uint64_t v35 = *v22 + 16 * v33;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v2, *(_DWORD *)v34, *(llvm::MDNode **)(v34 + 8));
            v34 += 16;
          }
          while (v34 != v35);
        }
      }
    }
    else
    {
      __int16 v39 = 257;
      uint64_t v2 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v2, v23, v38, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, uint64_t, uint64_t))(*(void *)v22[10] + 16))(v22[10], v2, v36, v22[6], v22[7]);
      uint64_t v24 = *((unsigned int *)v22 + 2);
      if (v24)
      {
        uint64_t v25 = *v22;
        uint64_t v26 = *v22 + 16 * v24;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v2, *(_DWORD *)v25, *(llvm::MDNode **)(v25 + 8));
          v25 += 16;
        }
        while (v25 != v26);
      }
    }
  }
  uint64_t v28 = *(void *)(a1 + 16);
  __int16 v39 = 257;
  sub_1CB84494C(v28, (uint64_t)v2, (uint64_t)v17, (uint64_t)v38, 0, 0);
  return v14;
}

uint64_t sub_1CCE89F98(llvm::LLVMContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  v20[8] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a3;
  if (a2)
  {
    if (*(_DWORD *)(a2 + 8))
    {
      uint64_t v6 = *(void *)(a2 + 40);
      uint64_t v17 = a1;
      uint64_t v18 = v20;
      uint64_t v19 = 0x800000000;
      if (v6)
      {
        uint64_t v7 = (char *)(v6 + 48);
        unint64_t v8 = (char *)(v6 + 48 + 8 * *(unsigned int *)(v6 + 8));
      }
      else
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v17 = a1;
      uint64_t v18 = v20;
      uint64_t v19 = 0x800000000;
    }
    sub_1CC512940((uint64_t)&v18, (uint64_t)v20, v7, v8);
    for (uint64_t i = 0; i != 8; ++i)
      llvm::AttrBuilder::removeAttribute((uint64_t)&v17, dword_1CFB2D2F0[i]);
    if (*(_DWORD *)(a2 + 8))
    {
      uint64_t v10 = *(void *)(a2 + 40);
      if (v10)
      {
        uint64_t v11 = *(unsigned int *)(v10 + 8);
        if (v11)
        {
          uint64_t v12 = (uint64_t *)(v10 + 48);
          uint64_t v13 = 8 * v11;
          do
          {
            uint64_t v14 = *v12;
            if (llvm::isStatepointDirectiveAttr(*v12)) {
              sub_1CD78071C((uint64_t)&v17, v14);
            }
            ++v12;
            v13 -= 8;
          }
          while (v13);
        }
      }
    }
    uint64_t v3 = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v16, a1, -1, (const llvm::AttrBuilder *)&v17);
    if (v18 != v20) {
      free(v18);
    }
  }
  return v3;
}

uint64_t sub_1CCE8A11C(uint64_t result, unint64_t a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v50[3] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unint64_t v9 = (char *)result;
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    uint64_t v38 = (char *)(result + 8 * a2);
    uint64_t v39 = 8 * a2;
    unsigned int v40 = *(uint64_t ***)(*(void *)(*(void *)(a5 + 40) + 56) + 40);
    v45[0] = 0;
    v45[1] = 0;
    int v46 = 0;
    while (1)
    {
      uint64_t v12 = v39;
      uint64_t v13 = v9;
      while (*(void *)v13 != *((void *)a3 + v10))
      {
        v13 += 8;
        v12 -= 8;
        if (!v12)
        {
          uint64_t v13 = v38;
          break;
        }
      }
      uint64_t v14 = **(void **)(a6 + 64);
      uint64_t v15 = ((unint64_t)(v13 - v9) >> 3);
      uint64_t v16 = *(llvm::ConstantInt **)(v14 + 1960);
      unsigned int v17 = *(_DWORD *)(v14 + 1968);
      unsigned int v48 = v17 >> 8;
      if (v17 >> 8 > 0x40) {
        operator new[]();
      }
      if (v17 <= 0xFF) {
        unint64_t v18 = 0;
      }
      else {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v17) + 63);
      }
      int v47 = (void **)(v18 & v15);
      uint64_t v20 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v47, a3);
      if (v48 >= 0x41 && v47) {
        MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
      }
      uint64_t v21 = **(void **)(a6 + 64);
      uint64_t v22 = *(llvm::ConstantInt **)(v21 + 1960);
      unint64_t v23 = *(unsigned int *)(v21 + 1968);
      unsigned int v48 = v23 >> 8;
      if (v23 >> 8 > 0x40) {
        operator new[]();
      }
      if (v23 <= 0xFF) {
        unint64_t v24 = 0;
      }
      else {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v23) + 63);
      }
      int v47 = (void **)(v24 & v10);
      uint64_t v25 = llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v47, v19);
      if (v48 >= 0x41 && v47) {
        MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
      }
      uint64_t v26 = **(void **)&v9[8 * v10];
      uint64_t v44 = v26;
      if (!v46) {
        goto LABEL_18;
      }
      unsigned int v31 = ((v26 >> 4) ^ (v26 >> 9)) & (v46 - 1);
      uint64_t v32 = *(void *)(v45[0] + 16 * v31);
      if (v26 != v32) {
        break;
      }
LABEL_26:
      uint64_t v33 = sub_1CD467E2C((uint64_t)v45, &v44)[1];
      if (v33) {
        uint64_t v34 = *(uint64_t ***)(v33 + 24);
      }
      else {
        uint64_t v34 = 0;
      }
      v50[0] = a5;
      v50[1] = (uint64_t)v20;
      v50[2] = (uint64_t)v25;
      sub_1CCE8771C(__p, *(uint64_t ****)&v9[8 * v10], (uint64_t)".relocated", 10, "", 0);
      __int16 v49 = 260;
      int v47 = __p;
      uint64_t v35 = sub_1CB845BAC((uint64_t *)a6, v34, (uint64_t **)v33, v50, 3, (uint64_t)&v47, 0);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
      *(_WORD *)(v35 + 18) = *(_WORD *)(v35 + 18) & 0xF003 | 0x24;
      uint64_t v10 = ++v11;
      if (a2 <= v11) {
        return MEMORY[0x1D25D9CD0](v45[0], 8);
      }
    }
    int v36 = 1;
    while (v32 != -4096)
    {
      unsigned int v37 = v31 + v36++;
      unsigned int v31 = v37 & (v46 - 1);
      uint64_t v32 = *(void *)(v45[0] + 16 * v31);
      if (v26 == v32) {
        goto LABEL_26;
      }
    }
LABEL_18:
    unsigned int v27 = *(_DWORD *)(v26 + 8);
    uint64_t v28 = v26;
    if ((v27 & 0xFE) == 0x12)
    {
      uint64_t v28 = **(void **)(v26 + 16);
      unsigned int v27 = *(_DWORD *)(v28 + 8);
    }
    if ((v27 & 0xFE) == 0x12) {
      unsigned int v27 = *(_DWORD *)(**(void **)(v28 + 16) + 8);
    }
    uint64_t v29 = (llvm::FixedVectorType *)llvm::PointerType::get((llvm::PointerType *)(**v40 + 1912), (llvm::Type *)(v27 >> 8));
    if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12) {
      llvm::FixedVectorType::get(v29, (llvm::Type *)*(unsigned int *)(v26 + 32));
    }
    int v47 = (void **)v29;
    uint64_t Declaration = llvm::Intrinsic::getDeclaration(v40, 122, (uint64_t)&v47, 1);
    sub_1CD467E2C((uint64_t)v45, &v44)[1] = Declaration;
    goto LABEL_26;
  }
  return result;
}

void sub_1CCE8A588(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v53[1] = *MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    while (1)
    {
      unsigned int v5 = *(llvm::Value **)(v4 + 24);
      BOOL v6 = sub_1CC070820((uint64_t)v5);
      if (v5 && v6) {
        break;
      }
LABEL_8:
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2) {
        return;
      }
    }
    uint64_t DerivedPtr = 0;
    uint64_t DerivedPtr = llvm::GCRelocateInst::getDerivedPtr(v5);
    unint64_t v8 = sub_1CC020864(a3, &DerivedPtr);
    uint64_t v9 = 0;
    uint64_t v10 = (llvm::Value *)v8[1];
    uint64_t v11 = *((void *)v5 + 4);
    if (v11) {
      BOOL v12 = v11 == *((void *)v5 + 5) + 40;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (uint64_t **)(v11 - 24);
    }
    uint64_t v14 = **v13;
    uint64_t v38 = v40;
    uint64_t v39 = 0x200000000;
    uint64_t v43 = v14;
    uint64_t v44 = &v52;
    BOOL v45 = v53;
    uint64_t v46 = 0;
    int v47 = 0;
    __int16 v48 = 512;
    char v49 = 7;
    uint64_t v41 = 0;
    int v42 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = &unk_1F2616E88;
    v53[0] = &unk_1F2617008;
    uint64_t v41 = v13[5];
    int v42 = v13 + 3;
    uint64_t v15 = (unsigned __int8 *)v13[6];
    v33[0] = v15;
    if (v15)
    {
      llvm::MetadataTracking::track((uint64_t)v33, v15, 2);
      uint64_t v9 = v33[0];
    }
    sub_1CB8461A4((uint64_t)&v38, 0, v9);
    if (v33[0])
    {
      int v23 = *(unsigned __int8 *)v33[0];
      if ((v23 - 4) > 0x1E)
      {
        if ((v23 - 3) >= 0xFFFFFFFE) {
          uint64_t v26 = v33[0];
        }
        else {
          uint64_t v26 = 0;
        }
        if ((v23 - 3) < 0xFFFFFFFE)
        {
          if (v23 == 3) {
            *(void *)(v33[0] + 8) = 0;
          }
          goto LABEL_19;
        }
        unint64_t v25 = v26 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v33[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v33[0] + 12)) {
          goto LABEL_19;
        }
        uint64_t v24 = *(void *)(v33[0] + 16);
        if ((v24 & 4) == 0) {
          goto LABEL_19;
        }
        unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
        if (!v25) {
          goto LABEL_19;
        }
      }
      v36[0] = (const char *)v33;
      sub_1CC5FA668(v25 + 16, v36);
    }
LABEL_19:
    uint64_t v16 = *((void *)v10 + 8);
    sub_1CCE8771C(__p, (uint64_t ***)v5, (uint64_t)".casted", 7, "", 0);
    __int16 v34 = 260;
    v33[0] = __p;
    if (*(void *)v5 != v16)
    {
      if (*((unsigned __int8 *)v5 + 16) <= 0x14u)
      {
        uint64_t v18 = (*((uint64_t (**)(void **, uint64_t, llvm::Value *, uint64_t))*v44 + 28))(v44, 49, v5, v16);
        unsigned int v5 = (llvm::Value *)v18;
        if (v18)
        {
          if (*(unsigned __int8 *)(v18 + 16) >= 0x1Cu)
          {
            (*(void (**)(void *, uint64_t, void *, uint64_t *, uint64_t **))(*v45 + 16))(v45, v18, v33, v41, v42);
            if (v39)
            {
              unsigned int v27 = (llvm::MDNode **)v38;
              uint64_t v29 = (llvm::MDNode **)((char *)v38 + 16 * v39);
              do
              {
                llvm::Instruction::setMetadata(v5, *(_DWORD *)v27, v27[1]);
                v27 += 2;
              }
              while (v27 != v29);
            }
          }
        }
      }
      else
      {
        __int16 v37 = 257;
        unsigned int v5 = llvm::CastInst::Create(49, (uint64_t)v5, v16, v36, 0);
        (*(void (**)(void *, llvm::Value *, void *, uint64_t *, uint64_t **))(*v45 + 16))(v45, v5, v33, v41, v42);
        if (v39)
        {
          unsigned int v17 = (llvm::MDNode **)v38;
          uint64_t v28 = (llvm::MDNode **)((char *)v38 + 16 * v39);
          do
          {
            llvm::Instruction::setMetadata(v5, *(_DWORD *)v17, v17[1]);
            v17 += 2;
          }
          while (v17 != v28);
        }
      }
    }
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v19 = operator new(0x80uLL);
    v19[21] = v19[21] & 0x38000000 | 2;
    *(void *)uint64_t v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = 0;
    *((void *)v19 + 3) = v19 + 16;
    *((void *)v19 + 4) = 0;
    *((void *)v19 + 5) = 0;
    *((void *)v19 + 6) = 0;
    *((void *)v19 + 7) = v19 + 16;
    uint64_t v20 = *((void *)v5 + 4);
    if (v20) {
      BOOL v21 = v20 == *((void *)v5 + 5) + 40;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = (llvm::Instruction *)(v20 - 24);
    }
    llvm::StoreInst::StoreInst((llvm::StoreInst *)(v19 + 16), (llvm::Type **)v5, v10, 0, v22);
    if (v38 != v40) {
      free(v38);
    }
    goto LABEL_8;
  }
}

uint64_t sub_1CCE8A9CC()
{
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD45C54C((uint64_t)&qword_1EBCF7880[1], "spp-print-liveset", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF7880[1], &dword_1CB82C000);
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD45C54C((uint64_t)&unk_1EBCF7948, "spp-print-liveset-size", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF7948, &dword_1CB82C000);
  int v3 = 1;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD45C54C((uint64_t)&unk_1EBCF7A08, "spp-print-base-pointers", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCF7A08, &dword_1CB82C000);
  int v3 = 1;
  int v1 = 6;
  uint64_t v2 = &v1;
  sub_1CD780854(&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCF7AC8, &dword_1CB82C000);
  uint64_t v2 = (int *)&byte_1EBCF7878;
  int v3 = 1;
  sub_1CD780970((unsigned char **)&v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1CC086C1C, &qword_1EBCF7B88, &dword_1CB82C000);
  int v3 = 1;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD780AC8(&v3, (char **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCF7C48, &dword_1CB82C000);
}

void llvm::SCCPPass::run()
{
}

void sub_1CCE8AC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F26409E0;
  v3[1] = a3;
  v3[3] = v3;
  llvm::SCCPSolver::SCCPSolver();
}

void sub_1CCE8AF6C(uint64_t a1)
{
}

uint64_t sub_1CCE8B00C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCF7D08;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2640A28;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCF7D10, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CCE8AF6C;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCF7D10, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::runIPSCCP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1F4188790](a1, a2, a3, a4);
  v5[31] = *(void **)MEMORY[0x1E4F143B8];
  sub_1CBFF6D30((uint64_t)v5, v4);
  llvm::SCCPSolver::SCCPSolver();
}

uint64_t sub_1CCE8CF58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*a2 + 8) == 16)
  {
    sub_1CD202B54(*a1, a2, v61);
    unsigned int v5 = (unsigned int *)v61[0];
    BOOL v6 = (unsigned int *)v61[1];
    while (v5 != v6)
    {
      if ((*(_WORD *)v5 & 0xFE) != 0 && *(_WORD *)v5 != 2)
      {
        if ((*(_WORD *)v5 & 0xFE) != 4) {
          goto LABEL_96;
        }
        LODWORD(__src) = v5[4];
        if (__src > 0x40) {
          operator new[]();
        }
        __s2 = (void *)*((void *)v5 + 1);
        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        unsigned int v8 = __src;
        uint64_t v9 = __s2;
        LODWORD(__src) = 0;
        uint64_t v10 = v5[8];
        BOOL v11 = v10 > 0x40
            ? memcmp(*((const void **)v5 + 3), __s2, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8) == 0
            : *((void *)v5 + 3) == (void)__s2;
        BOOL v12 = v11;
        if (v8 >= 0x41)
        {
          if (v9)
          {
            MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
            if (__src >= 0x41)
            {
              if (__s2) {
                MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
              }
            }
          }
        }
        if (!v12)
        {
LABEL_96:
          __s2 = v61;
          sub_1CCE8E370((void ***)&__s2);
          return 0;
        }
      }
      v5 += 10;
    }
    uint64_t v59 = v2;
    uint64_t v60 = (llvm::PoisonValue *)*v2;
    uint64_t v21 = *(unsigned int *)(*v2 + 12);
    if (v21)
    {
      uint64_t v22 = 0;
      int v23 = 0;
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        uint64_t v26 = (char *)v61[0] + 40 * v22;
        char v27 = *v26;
        LOWORD(__s2) = *v26;
        int v28 = *v26;
        if ((v28 - 4) < 2)
        {
          uint64_t v29 = (char *)v61[0] + 40 * v22;
          unsigned int v66 = *((_DWORD *)v29 + 4);
          if (v66 > 0x40) {
            operator new[]();
          }
          __src = (void *)*((void *)v29 + 1);
          uint64_t v30 = (char *)v61[0] + 40 * v22;
          unsigned int v68 = *((_DWORD *)v30 + 8);
          if (v68 > 0x40) {
            operator new[]();
          }
          __s1 = (void *)*((void *)v30 + 3);
          char v27 = (char)__s2;
          LOWORD(__s2) = __s2 | (v26[1] << 8);
        }
        else if ((v28 - 2) < 2)
        {
          __src = (void *)*((void *)v61[0] + 5 * v22 + 1);
        }
        if (v27 == 2) {
          goto LABEL_40;
        }
        if ((v27 & 0xFE) != 4) {
          goto LABEL_50;
        }
        unsigned int v63 = v66;
        if (v66 > 0x40) {
          operator new[]();
        }
        uint64_t v62 = __src;
        llvm::APInt::operator+=((uint64_t)&v62, 1uLL);
        unsigned int v32 = v63;
        uint64_t v33 = v62;
        unsigned int v63 = 0;
        if (v68 > 0x40) {
          BOOL v34 = memcmp(__s1, v62, (((unint64_t)v68 + 63) >> 3) & 0x3FFFFFF8) == 0;
        }
        else {
          BOOL v34 = __s1 == v62;
        }
        int v35 = v34;
        if (v32 >= 0x41)
        {
          if (v33)
          {
            MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
            if (v63 >= 0x41)
            {
              if (v62) {
                MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
              }
            }
          }
        }
        if (v35) {
LABEL_40:
        }
          Constant = llvm::SCCPInstVisitor::getConstant(*a1, (uint64_t)&__s2);
        else {
LABEL_50:
        }
          Constant = llvm::UndefValue::get(*(llvm::UndefValue **)(*((void *)v60 + 2) + 8 * v22), v4);
        int v36 = Constant;
        if (v25 >= v23)
        {
          uint64_t v37 = (v25 - v24) >> 3;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61) {
            abort();
          }
          if ((v23 - v24) >> 2 > v38) {
            unint64_t v38 = (v23 - v24) >> 2;
          }
          if ((unint64_t)(v23 - v24) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39)
          {
            if (v39 >> 61) {
              sub_1CB833614();
            }
            unsigned int v40 = (char *)operator new(8 * v39);
          }
          else
          {
            unsigned int v40 = 0;
          }
          uint64_t v41 = &v40[8 * v37];
          *(void *)uint64_t v41 = v36;
          int v42 = v41 + 8;
          while (v25 != v24)
          {
            uint64_t v43 = *((void *)v25 - 1);
            v25 -= 8;
            *((void *)v41 - 1) = v43;
            v41 -= 8;
          }
          int v23 = &v40[8 * v39];
          if (v24) {
            operator delete(v24);
          }
          uint64_t v24 = v41;
          unint64_t v25 = v42;
        }
        else
        {
          *(void *)unint64_t v25 = Constant;
          v25 += 8;
        }
        if ((__s2 & 0xFE) == 4)
        {
          if (v68 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          if (v66 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        ++v22;
      }
      while (v22 != v21);
    }
    else
    {
      unint64_t v25 = 0;
      uint64_t v24 = 0;
    }
    uint64_t v54 = (llvm::Value *)llvm::ConstantStruct::get(v60, (llvm::Type *)v24, (v25 - v24) >> 3);
    if (v24) {
      operator delete(v24);
    }
    __s2 = v61;
    sub_1CCE8E370((void ***)&__s2);
    uint64_t v2 = v59;
  }
  else
  {
    uint64_t v13 = sub_1CD205858((uint64_t *)(*a1 + 136), (uint64_t)a2);
    uint64_t v15 = v13;
    unsigned int v17 = (__int16 *)(v13 + 1);
    __int16 v16 = *((_WORD *)v13 + 4);
    int v18 = v16;
    if ((v16 & 0xFE) != 0 && v16 != 2)
    {
      if ((v16 & 0xFE) != 4) {
        return 0;
      }
      LODWORD(__src) = *((_DWORD *)v13 + 6);
      if (__src > 0x40) {
        operator new[]();
      }
      __s2 = (void *)v13[2];
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      unsigned int v44 = __src;
      BOOL v45 = __s2;
      LODWORD(__src) = 0;
      uint64_t v46 = *((unsigned int *)v15 + 10);
      if (v46 > 0x40) {
        BOOL v47 = memcmp((const void *)v15[4], __s2, ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8) == 0;
      }
      else {
        BOOL v47 = v15[4] == (void)__s2;
      }
      int v48 = v47;
      if (v44 >= 0x41)
      {
        if (v45)
        {
          MEMORY[0x1D25D9CB0](v45, 0x1000C8000313F17);
          if (__src >= 0x41)
          {
            if (__s2) {
              MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
            }
          }
        }
      }
      if (!v48) {
        return 0;
      }
      __int16 v16 = *v17;
      int v18 = *v17;
    }
    if (v18 == 2) {
      goto LABEL_30;
    }
    if ((v16 & 0xFE) != 4) {
      goto LABEL_106;
    }
    LODWORD(__src) = *((_DWORD *)v15 + 6);
    if (__src > 0x40) {
      operator new[]();
    }
    __s2 = (void *)v15[2];
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    unsigned int v49 = __src;
    uint64_t v50 = __s2;
    LODWORD(__src) = 0;
    uint64_t v51 = *((unsigned int *)v15 + 10);
    if (v51 > 0x40) {
      BOOL v52 = memcmp((const void *)v15[4], __s2, ((unint64_t)(v51 + 63) >> 3) & 0x3FFFFFF8) == 0;
    }
    else {
      BOOL v52 = v15[4] == (void)__s2;
    }
    int v53 = v52;
    if (v49 >= 0x41)
    {
      if (v50)
      {
        MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
        if (__src >= 0x41)
        {
          if (__s2) {
            MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
        }
      }
    }
    if (v53) {
LABEL_30:
    }
      uint64_t v20 = (llvm::Value *)llvm::SCCPInstVisitor::getConstant(*a1, (uint64_t)v17);
    else {
LABEL_106:
    }
      uint64_t v20 = llvm::UndefValue::get((llvm::UndefValue *)*v2, v14);
    uint64_t v54 = v20;
  }
  unsigned int v55 = *((unsigned __int8 *)v2 + 16);
  if (v55 < 0x1C
    || v55 - 33 > 0x33
    || ((1 << (v55 - 33)) & 0x8000000000041) == 0
    || (v55 != 84
     || (*((_WORD *)v2 + 9) & 3) != 2
     || llvm::Instruction::isSafeToRemove((llvm::Instruction *)v2))
    && (sub_1CC233A58((char *)v2, 6, (uint64_t *)&__s2), !(_BYTE)__s1))
  {
    uint64_t v57 = 1;
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v2, v54, (llvm::Value *)1);
    return v57;
  }
  uint64_t v56 = *(v2 - 4);
  if (v56 && !*(unsigned char *)(v56 + 16) && *(void *)(v56 + 24) == v2[9]) {
    sub_1CB89694C((llvm::SmallPtrSetImplBase *)(*a1 + 464), v56);
  }
  return 0;
}

uint64_t sub_1CCE8D818(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a2 + 40;
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4 != a2 + 40)
  {
    char v7 = 0;
    while (1)
    {
      uint64_t v8 = v4 - 24;
      BOOL v24 = v4 == 0;
      uint64_t v4 = *(void *)(v4 + 8);
      if (v24) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v8;
      }
      if (*(unsigned char *)(*(void *)v9 + 8) != 7)
      {
        if (sub_1CCE8CF58(a1, (uint64_t *)v9))
        {
          if (llvm::Instruction::isSafeToRemove((llvm::Instruction *)v9)) {
            goto LABEL_9;
          }
          char v7 = 1;
        }
        else if (*(unsigned char *)(v9 + 16) == 68)
        {
          int v10 = *(_DWORD *)(v9 + 20);
          BOOL v11 = (v10 & 0x40000000) != 0 ? *(llvm::Value ***)(v9 - 8) : (llvm::Value **)(v9 - 32 * (v10 & 0x7FFFFFF));
          BOOL v12 = *v11;
          if (*((unsigned __int8 *)*v11 + 16) >= 0x15u)
          {
            uint64_t v14 = *a3;
            uint64_t v13 = a3[1];
            if (v13 == *a3)
            {
              uint64_t v15 = *((unsigned int *)a3 + 5);
              __int16 v16 = (llvm::Value **)(v13 + 8 * v15);
              if (v15)
              {
                uint64_t v17 = 0;
                while (*(llvm::Value **)(v13 + v17) != v12)
                {
                  v17 += 8;
                  if (8 * v15 == v17) {
                    goto LABEL_35;
                  }
                }
                __int16 v16 = (llvm::Value **)(v13 + v17);
              }
LABEL_35:
              uint64_t v14 = a3[1];
            }
            else
            {
              uint64_t v18 = *((unsigned int *)a3 + 4);
              int v19 = v18 - 1;
              unsigned int v20 = (v18 - 1) & ((v12 >> 4) ^ (v12 >> 9));
              __int16 v16 = (llvm::Value **)(v13 + 8 * v20);
              uint64_t v21 = *v16;
              if (*v16 == (llvm::Value *)-1)
              {
                uint64_t v22 = 0;
LABEL_64:
                if (v22) {
                  __int16 v16 = v22;
                }
                LODWORD(v15) = *((_DWORD *)a3 + 5);
                unsigned int v44 = (llvm::Value **)(v13 + 8 * v18);
                if (*v16 != v12) {
                  __int16 v16 = v44;
                }
              }
              else
              {
                uint64_t v22 = 0;
                int v23 = 1;
                while (v21 != v12)
                {
                  if (v22) {
                    BOOL v24 = 0;
                  }
                  else {
                    BOOL v24 = v21 == (llvm::Value *)-2;
                  }
                  if (v24) {
                    uint64_t v22 = v16;
                  }
                  unsigned int v25 = v20 + v23++;
                  unsigned int v20 = v25 & v19;
                  __int16 v16 = (llvm::Value **)(v13 + 8 * (v25 & v19));
                  uint64_t v21 = *v16;
                  if (*v16 == (llvm::Value *)-1) {
                    goto LABEL_64;
                  }
                }
                LODWORD(v15) = *((_DWORD *)a3 + 5);
              }
            }
            unsigned int v26 = v13 == v14 ? v15 : *((_DWORD *)a3 + 4);
            if (v16 == (llvm::Value **)(v13 + 8 * v26))
            {
              char v27 = sub_1CD205858((uint64_t *)(*a1 + 136), (uint64_t)v12);
              int v28 = v27;
              int v29 = *((unsigned __int8 *)v27 + 8);
              if (v29 == 4) {
                goto LABEL_108;
              }
              if (v29 == 5)
              {
                unsigned int v59 = *((_DWORD *)v27 + 6);
                if (v59 > 0x40) {
                  operator new[]();
                }
                __s2 = (void *)v27[2];
                llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
                unsigned int v30 = v59;
                unsigned int v31 = __s2;
                unsigned int v59 = 0;
                uint64_t v32 = *((unsigned int *)v28 + 10);
                if (v32 > 0x40)
                {
                  uint64_t v57 = __s2;
                  int v55 = memcmp((const void *)v28[4], __s2, ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8);
                  unsigned int v31 = v57;
                  BOOL v33 = v55 == 0;
                }
                else
                {
                  BOOL v33 = v28[4] == (void)__s2;
                }
                int v34 = v33;
                if (v30 >= 0x41)
                {
                  if (v31)
                  {
                    MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
                    if (v59 >= 0x41)
                    {
                      if (__s2) {
                        MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                      }
                    }
                  }
                }
                if (v34)
                {
LABEL_108:
                  if (llvm::ConstantRange::isAllNonNegative((llvm::ConstantRange *)(v28 + 2)))
                  {
                    int v35 = operator new(0x60uLL);
                    int v36 = (llvm::Value *)(v35 + 8);
                    v35[13] = v35[13] & 0x38000000 | 1;
                    *(void *)int v35 = 0;
                    *((void *)v35 + 1) = 0;
                    *((void *)v35 + 2) = 0;
                    *((void *)v35 + 3) = v35 + 8;
                    uint64_t v37 = *(llvm::Type **)v9;
                    __int16 v60 = 257;
                    llvm::ZExtInst::ZExtInst((llvm::ZExtInst *)(v35 + 8), v12, v37, (const char **)&__s2, (llvm::Instruction *)v9);
                    uint64_t v38 = a3[1];
                    uint64_t v39 = *((unsigned int *)a3 + 5);
                    if (v38 == *a3)
                    {
                      if (v39)
                      {
                        unsigned int v40 = 0;
                        uint64_t v41 = 8 * v39;
                        int v42 = (llvm::Value **)a3[1];
                        do
                        {
                          if (*v42 == v36) {
                            goto LABEL_91;
                          }
                          if (*v42 == (llvm::Value *)-2) {
                            unsigned int v40 = v42;
                          }
                          ++v42;
                          v41 -= 8;
                        }
                        while (v41);
                        if (v40)
                        {
                          *unsigned int v40 = v36;
                          --*((_DWORD *)a3 + 6);
                          goto LABEL_91;
                        }
                      }
                      unsigned int v43 = *((_DWORD *)a3 + 4);
                      if (v39 < v43)
                      {
                        *((_DWORD *)a3 + 5) = v39 + 1;
                        *(void *)(v38 + 8 * v39) = v36;
LABEL_91:
                        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9, v36, (llvm::Value *)1);
                        uint64_t v54 = (int32x2_t *)*a1;
                        __s2 = (void *)v9;
                        sub_1CD205788(v54 + 17, &__s2);
LABEL_9:
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                      }
                    }
                    else
                    {
                      unsigned int v43 = *((_DWORD *)a3 + 4);
                    }
                    if (3 * v43 <= 4 * ((int)v39 - *((_DWORD *)a3 + 6)))
                    {
                      if (v43 >= 0x40) {
                        v43 *= 2;
                      }
                      else {
                        unsigned int v43 = 128;
                      }
                    }
                    else if (v43 - v39 >= v43 >> 3)
                    {
                      goto LABEL_72;
                    }
                    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v43);
                    unsigned int v43 = *((_DWORD *)a3 + 4);
                    uint64_t v38 = a3[1];
LABEL_72:
                    unsigned int v45 = v43 - 1;
                    unsigned int v46 = (v43 - 1) & ((v36 >> 4) ^ (v36 >> 9));
                    BOOL v47 = (llvm::Value **)(v38 + 8 * v46);
                    int v48 = *v47;
                    if (*v47 == (llvm::Value *)-1)
                    {
                      unsigned int v49 = 0;
LABEL_84:
                      if (v49) {
                        int v53 = v49;
                      }
                      else {
                        int v53 = v47;
                      }
                      if (*v53 != v36)
                      {
                        if (*v53 == (llvm::Value *)-2) {
                          --*((_DWORD *)a3 + 6);
                        }
                        else {
                          ++*((_DWORD *)a3 + 5);
                        }
                        *int v53 = v36;
                      }
                    }
                    else
                    {
                      unsigned int v49 = 0;
                      int v50 = 1;
                      while (v48 != v36)
                      {
                        if (v49) {
                          BOOL v51 = 0;
                        }
                        else {
                          BOOL v51 = v48 == (llvm::Value *)-2;
                        }
                        if (v51) {
                          unsigned int v49 = v47;
                        }
                        unsigned int v52 = v46 + v50++;
                        unsigned int v46 = v52 & v45;
                        BOOL v47 = (llvm::Value **)(v38 + 8 * (v52 & v45));
                        int v48 = *v47;
                        if (*v47 == (llvm::Value *)-1) {
                          goto LABEL_84;
                        }
                      }
                    }
                    goto LABEL_91;
                  }
                }
              }
            }
          }
        }
      }
      if (v4 == v3) {
        return v7 & 1;
      }
    }
  }
  char v7 = 0;
  return v7 & 1;
}

void *sub_1CCE8DD1C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t result = sub_1CB896AE8(*a3 + 624, a1);
  uint64_t v8 = *(void *)(v6 + 632);
  uint64_t v9 = 640;
  if (v8 == *(void *)(v6 + 624)) {
    uint64_t v9 = 644;
  }
  if (result != (void *)(v8 + 8 * *(unsigned int *)(v6 + v9)))
  {
    uint64_t v10 = *a3;
    uint64_t result = sub_1CB896AE8(v10 + 464, a1);
    uint64_t v11 = *(void *)(v10 + 472);
    uint64_t v12 = 480;
    if (v11 == *(void *)(v10 + 464)) {
      uint64_t v12 = 484;
    }
    if (result == (void *)(v11 + 8 * *(unsigned int *)(v10 + v12)))
    {
      for (uint64_t i = *(void *)(a1 + 80); i != a1 + 72; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v14 = (llvm::BasicBlock *)(i - 24);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t result = (void *)llvm::BasicBlock::getTerminatingMustTailCall(v14);
        if (result) {
          break;
        }
        uint64_t v15 = (void *)*((void *)v14 + 5);
        if (v15 != (void *)((char *)v14 + 40))
        {
          uint64_t v16 = v15 ? (uint64_t)(v15 - 3) : 0;
          unsigned int v17 = *(unsigned __int8 *)(v16 + 16) - 40;
          uint64_t v18 = v17 >= 0xFFFFFFF5 ? v16 : 0;
          if (v15)
          {
            BOOL v19 = *(unsigned char *)(v18 + 16) == 29 && v17 >= 0xFFFFFFF5;
            if (v19
              && *(unsigned __int8 *)(*(void *)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF)) + 16)
               - 11 >= 2)
            {
              unint64_t v20 = *(unsigned int *)(a2 + 8);
              if (v20 >= *(unsigned int *)(a2 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)a2 + 8 * v20) = v18;
              ++*(_DWORD *)(a2 + 8);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1CCE8DE98()
{
}

void *sub_1CCE8DEAC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F26409E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CCE8DEF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26409E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CCE8DF20(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_1CCE8DF28()
{
}

void sub_1CCE8DF68(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCE8DFA0(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CCE8E01C(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2) & 1) == 0)
  {
    unsigned int v5 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (v6 == v7)
    {
LABEL_6:
      uint64_t v8 = 0;
    }
    else
    {
      while (*(char **)v6 != llvm::TargetLibraryInfoWrapperPass::ID)
      {
        v6 += 16;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v8 = *(void *)(v6 + 8);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 96))(v8, llvm::TargetLibraryInfoWrapperPass::ID);
    uint64_t v10 = v9 + 32;
    if (!*(unsigned char *)(v9 + 232))
    {
      uint64_t v11 = *(void *)(a2 + 40) + 216;
      __int16 v14 = 260;
      v13[0] = v11;
      llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)v13);
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      int v26 = 0;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      *(void *)&long long v12 = -1;
      *((void *)&v12 + 1) = -1;
      *(_OWORD *)__src = v12;
      long long v18 = v12;
      long long v19 = v12;
      long long v20 = v12;
      long long v21 = v12;
      long long v22 = v12;
      *(_OWORD *)int v23 = v12;
      *(void *)&v23[13] = -1;
      sub_1CC153974((uint64_t)__src, (int *)__p);
      sub_1CD4D04B8(v10, (uint64_t)__src);
      sub_1CD4CFA4C((uint64_t *)__src);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1CC1569E8(__src, v10);
  }
  return 0;
}

void sub_1CCE8E370(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        __int16 v7 = *((_WORD *)v6 - 20);
        v6 -= 40;
        if ((v7 & 0xFE) == 4)
        {
          if (*((_DWORD *)v4 - 2) >= 0x41u)
          {
            uint64_t v8 = *((void *)v4 - 2);
            if (v8) {
              MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
            }
          }
          if (*((_DWORD *)v4 - 6) >= 0x41u)
          {
            uint64_t v9 = *((void *)v4 - 4);
            if (v9) {
              MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
            }
          }
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CCE8E468(uint64_t a1, long long *a2, long long *a3)
{
  unsigned int v3 = 0;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  long long v4 = a2[1];
  long long v33 = *a2;
  long long v34 = v4;
  int v35 = v37;
  unint64_t v36 = 0x400000000;
  if (&v33 != a2)
  {
    unsigned int v5 = *((_DWORD *)a2 + 10);
    if (v5)
    {
      unsigned int v22 = *((_DWORD *)a2 + 10);
      uint64_t v23 = a1;
      char v16 = a3;
      long long v12 = (long long *)*((void *)a2 + 4);
      long long v18 = a2;
      if (v12 == a2 + 3)
      {
        if (v5 >= 5) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v37, v12, 8 * *((unsigned int *)a2 + 10));
        LODWORD(v36) = v22;
      }
      else
      {
        int v35 = (unsigned char *)*((void *)a2 + 4);
        unint64_t v36 = __PAIR64__(*((_DWORD *)a2 + 11), v5);
        *((void *)a2 + 4) = a2 + 3;
        *((_DWORD *)a2 + 11) = 0;
      }
      a2 = v18;
      *((_DWORD *)v18 + 10) = 0;
      unsigned int v3 = v22;
      a1 = v23;
      a3 = v16;
    }
  }
  long long v38 = a2[5];
  long long v6 = a3[1];
  long long v27 = *a3;
  long long v28 = v6;
  uint64_t __dst = v31;
  unint64_t v30 = 0x400000000;
  if (&v27 == a3)
  {
    unsigned int v7 = 0;
  }
  else
  {
    unsigned int v7 = *((_DWORD *)a3 + 10);
    if (v7)
    {
      unsigned int v19 = *((_DWORD *)a3 + 10);
      uint64_t v24 = a1;
      uint64_t v13 = (long long *)*((void *)a3 + 4);
      unsigned int v17 = a3;
      if (v13 == a3 + 3)
      {
        if (v7 >= 5) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v31, v13, 8 * *((unsigned int *)a3 + 10));
        LODWORD(v30) = v19;
        unsigned int v3 = v36;
      }
      else
      {
        uint64_t __dst = (void *)*((void *)a3 + 4);
        unint64_t v30 = __PAIR64__(*((_DWORD *)a3 + 11), v7);
        *((void *)a3 + 4) = a3 + 3;
        *((_DWORD *)a3 + 11) = 0;
      }
      a3 = v17;
      *((_DWORD *)v17 + 10) = 0;
      a1 = v24;
      unsigned int v7 = v19;
    }
  }
  long long v32 = a3[5];
  long long v8 = v34;
  *(_OWORD *)a1 = v33;
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x400000000;
  if (&v33 != (long long *)a1 && v3)
  {
    unsigned int v20 = v3;
    uint64_t v25 = a1;
    if (v35 == v37)
    {
      if (v3 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a1 + 48), v37, 8 * v3);
      *(_DWORD *)(v25 + 40) = v20;
      unsigned int v7 = v30;
    }
    else
    {
      *(void *)(a1 + 32) = v35;
      int v14 = HIDWORD(v36);
      *(_DWORD *)(a1 + 40) = v3;
      *(_DWORD *)(a1 + 44) = v14;
      int v35 = v37;
      HIDWORD(v36) = 0;
    }
    LODWORD(v36) = 0;
    a1 = v25;
  }
  *(void *)(a1 + 128) = a1 + 144;
  long long v9 = v27;
  long long v10 = v28;
  *(_OWORD *)(a1 + 80) = v38;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v10;
  *(void *)(a1 + 136) = 0x400000000;
  uint64_t v11 = __dst;
  if ((long long *)(a1 + 96) != &v27 && v7)
  {
    unsigned int v21 = v7;
    uint64_t v26 = a1;
    if (__dst == v31)
    {
      if (v7 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a1 + 144), v31, 8 * v7);
      *(_DWORD *)(v26 + 136) = v21;
      uint64_t v11 = __dst;
    }
    else
    {
      *(void *)(a1 + 128) = __dst;
      int v15 = HIDWORD(v30);
      *(_DWORD *)(a1 + 136) = v7;
      *(_DWORD *)(a1 + 140) = v15;
      uint64_t v11 = v31;
      uint64_t __dst = v31;
      HIDWORD(v30) = 0;
    }
    LODWORD(v30) = 0;
    a1 = v26;
  }
  *(_OWORD *)(a1 + 176) = v32;
  if (v11 != v31) {
    free(v11);
  }
  if (v35 != v37) {
    free(v35);
  }
}

void sub_1CCE8E89C(uint64_t a1, llvm::raw_ostream *this, unint64_t *a3)
{
  long long v6 = (_WORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v6 > 1uLL)
  {
    _WORD *v6 = 8224;
    unsigned int v7 = (unsigned char *)(*((void *)this + 4) + 2);
    *((void *)this + 4) = v7;
  }
  else
  {
    llvm::raw_ostream::write(this, "  ", 2uLL);
    unsigned int v7 = (unsigned char *)*((void *)this + 4);
  }
  if (*((unsigned char **)this + 3) == v7)
  {
    llvm::raw_ostream::write(this, "[", 1uLL);
  }
  else
  {
    *unsigned int v7 = 91;
    ++*((void *)this + 4);
  }
  sub_1CD098D14(this, *a3, 0, 0, 0);
  long long v8 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v8)
  {
    llvm::raw_ostream::write(this, ",", 1uLL);
  }
  else
  {
    *long long v8 = 44;
    ++*((void *)this + 4);
  }
  sub_1CD098D14(this, a3[1], 0, 0, 0);
  long long v9 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v9)
  {
    llvm::raw_ostream::write(this, ")", 1uLL);
    long long v10 = (void *)*((void *)this + 4);
  }
  else
  {
    *long long v9 = 41;
    long long v10 = (void *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v10;
  }
  if (*((void *)this + 3) - (void)v10 > 7uLL)
  {
    *long long v10 = 0x23206563696C7320;
    *((void *)this + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(this, " slice #", 8uLL);
  }
  uint64_t v11 = (uint64_t)a3 - *(void *)(a1 + 16);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
  if (v11 < -23)
  {
    unint64_t v12 = 0x5555555555555555 * (v11 >> 3);
    uint64_t v13 = this;
    int v14 = 1;
  }
  else
  {
    uint64_t v13 = this;
    int v14 = 0;
  }
  sub_1CD098D14(v13, v12, 0, 0, v14);
  unint64_t v15 = a3[2];
  size_t v16 = ((uint64_t)(v15 << 61) >> 63) & 0xD;
  unsigned int v17 = (unsigned char *)*((void *)this + 4);
  if (v16 <= *((void *)this + 3) - (void)v17)
  {
    if ((v15 & 4) != 0)
    {
      qmemcpy(v17, " (splittable)", 13);
      unsigned int v17 = (unsigned char *)(*((void *)this + 4) + 13);
      *((void *)this + 4) = v17;
    }
  }
  else
  {
    if ((v15 & 4) != 0) {
      long long v18 = " (splittable)";
    }
    else {
      long long v18 = "";
    }
    llvm::raw_ostream::write(this, v18, v16);
    unsigned int v17 = (unsigned char *)*((void *)this + 4);
  }
  if (*((unsigned char **)this + 3) == v17)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
    unsigned int v19 = (_WORD *)*((void *)this + 4);
  }
  else
  {
    unsigned char *v17 = 10;
    unsigned int v19 = (_WORD *)(*((void *)this + 4) + 1);
    *((void *)this + 4) = v19;
  }
  if (*((void *)this + 3) - (void)v19 > 1uLL)
  {
    *unsigned int v19 = 8224;
    uint64_t v20 = *((void *)this + 4) + 2;
    *((void *)this + 4) = v20;
  }
  else
  {
    llvm::raw_ostream::write(this, "  ", 2uLL);
    uint64_t v20 = *((void *)this + 4);
  }
  if ((unint64_t)(*((void *)this + 3) - v20) > 0xA)
  {
    *(_DWORD *)(v20 + 7) = 540703074;
    *(void *)uint64_t v20 = *(void *)"  used by: ";
    *((void *)this + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(this, "  used by: ", 0xBuLL);
  }
  llvm::Value::print(*(llvm::Value **)((a3[2] & 0xFFFFFFFFFFFFFFF8) + 24), this, 0);
  unsigned int v21 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v21)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *unsigned int v21 = 10;
    ++*((void *)this + 4);
  }
}

void sub_1CCE8EC20(llvm *a1, unint64_t *a2)
{
  long long v4 = llvm::dbgs(a1);

  sub_1CCE8E89C((uint64_t)a1, v4, a2);
}

BOOL llvm::SROAPass::presplitLoadsAndStores(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v721 = *MEMORY[0x1E4F143B8];
  unsigned int v708 = v710;
  uint64_t v709 = 0x400000000;
  uint64_t v705 = v707;
  uint64_t v706 = 0x400000000;
  uint64_t v702 = 1;
  for (uint64_t i = 8; i != 328; i += 40)
    *(uint64_t *)((char *)&v702 + i) = -4096;
  int v675 = v679;
  uint64_t v676 = v679;
  uint64_t v677 = 8;
  int v678 = 0;
  uint64_t v4 = *(void *)(a3 + 16);
  int v625 = (char **)(a3 + 16);
  unsigned int v5 = *(_DWORD *)(a3 + 24);
  long long __src = 0uLL;
  *(void *)&long long v684 = v4;
  *((void *)&v684 + 1) = v4;
  long long v685 = v687;
  uint64_t v686 = 0x400000000;
  long long v688 = v4 + 24 * (unint64_t)v5;
  if (v5)
  {
    sub_1CCE9FED4((uint64_t)&__src);
    uint64_t v4 = *(void *)(a3 + 16);
    unsigned int v7 = *(_DWORD *)(a3 + 24);
  }
  else
  {
    unsigned int v7 = 0;
  }
  long long v711 = 0uLL;
  *(void *)&long long v712 = v4 + 24 * v7;
  *((void *)&v712 + 1) = v712;
  int v713 = v715;
  uint64_t v714 = 0x400000000;
  long long v716 = (unint64_t)v712;
  sub_1CCE8E468((uint64_t)&v689, &__src, &v711);
  if (v713 != v715) {
    free(v713);
  }
  if (v685 != v687) {
    free(v685);
  }
  long long __src = v689;
  long long v684 = v690;
  long long v685 = v687;
  uint64_t v686 = 0x400000000;
  unsigned int v8 = v692;
  if (v692)
  {
    if (v692 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v687, v691, 8 * v692);
    LODWORD(v686) = v8;
  }
  long long v688 = v695;
  long long v711 = v696;
  long long v712 = v697;
  int v713 = v715;
  uint64_t v714 = 0x400000000;
  int v9 = (int)v699;
  if (v699)
  {
    if (v699 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v715, v698, 8 * v699);
    LODWORD(v714) = v9;
  }
  long long v716 = v701;
  while (1)
  {
    long long v10 = (void *)v684;
    if ((void)v684 == (void)v712 && (v686 == 0) == (v714 == 0)) {
      break;
    }
    uint64_t v11 = (void *)*((void *)&v684 + 1);
    while (v10 != v11)
    {
      uint64_t v12 = v10[2];
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
      uint64_t v680 = v14;
      if ((v12 & 4) != 0 && v10[1] > *((void *)&__src + 1))
      {
        int v15 = *(unsigned __int8 *)(v14 + 16);
        if (v15 == 60 && v14 != 0)
        {
          uint64_t v42 = *(void *)(v14 + 8);
          if (!v42)
          {
LABEL_74:
            uint64_t v44 = v709;
            if (v709 >= (unint64_t)HIDWORD(v709)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v45 = &v708;
            goto LABEL_76;
          }
          while (1)
          {
            uint64_t v43 = *(void *)(v42 + 24);
            if (!v43 || *(unsigned char *)(v43 + 16) != 61 || (*(_WORD *)(v43 + 18) & 0x381) != 0) {
              break;
            }
            uint64_t v42 = *(void *)(v42 + 8);
            if (!v42) {
              goto LABEL_74;
            }
          }
          unsigned int v21 = v676;
          uint64_t v22 = HIDWORD(v677);
          if (v676 == v675)
          {
            if (HIDWORD(v677))
            {
              uint64_t v23 = 0;
              uint64_t v54 = 8 * HIDWORD(v677);
              int v55 = (uint64_t *)v676;
              while (*v55 != v14)
              {
                if (*v55 == -2) {
                  uint64_t v23 = v55;
                }
                ++v55;
                v54 -= 8;
                if (!v54)
                {
                  if (v23) {
                    goto LABEL_158;
                  }
                  goto LABEL_87;
                }
              }
              goto LABEL_160;
            }
LABEL_87:
            unsigned int v56 = v677;
            if (HIDWORD(v677) < v677)
            {
LABEL_40:
              HIDWORD(v677) = v22 + 1;
              v21[v22] = v14;
              goto LABEL_160;
            }
          }
          else
          {
            unsigned int v56 = v677;
          }
          if (3 * v56 <= 4 * (HIDWORD(v677) - v678))
          {
            if (v56 >= 0x40) {
              v56 *= 2;
            }
            else {
              unsigned int v56 = 128;
            }
          }
          else if (v56 - HIDWORD(v677) >= v56 >> 3)
          {
            goto LABEL_114;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v675, v56);
          unsigned int v56 = v677;
          unsigned int v21 = v676;
LABEL_114:
          unsigned int v67 = v56 - 1;
          unsigned int v68 = (v56 - 1) & ((v14 >> 4) ^ (v14 >> 9));
          unint64_t v36 = &v21[v68];
          uint64_t v69 = *v36;
          if (*v36 != -1)
          {
            long long v38 = 0;
            int v70 = 1;
            while (v69 != v14)
            {
              if (v38) {
                BOOL v71 = 0;
              }
              else {
                BOOL v71 = v69 == -2;
              }
              if (v71) {
                long long v38 = v36;
              }
              unsigned int v72 = v68 + v70++;
              unsigned int v68 = v72 & v67;
              unint64_t v36 = &v21[v72 & v67];
              uint64_t v69 = *v36;
              if (*v36 == -1) {
                goto LABEL_126;
              }
            }
            goto LABEL_160;
          }
LABEL_125:
          long long v38 = 0;
LABEL_126:
          if (v38) {
            uint64_t v73 = v38;
          }
          else {
            uint64_t v73 = v36;
          }
          if (*v73 != v14)
          {
            if (*v73 == -2) {
              --v678;
            }
            else {
              ++HIDWORD(v677);
            }
            *uint64_t v73 = v14;
          }
          goto LABEL_160;
        }
        if (v15 == 61 && v14 != 0)
        {
          int v18 = *(_DWORD *)(v14 + 20);
          uint64_t v19 = (v18 & 0x40000000) != 0 ? *(void *)(v14 - 8) : v14 - 32 * (v18 & 0x7FFFFFF);
          if (v19 + 32 == v13)
          {
            uint64_t v66 = *(void *)(v14 - 64);
            if (v66)
            {
              if (*(unsigned char *)(v66 + 16) == 60 && (*(_WORD *)(v66 + 18) & 0x381) == 0)
              {
                uint64_t v44 = v706;
                if (v706 >= (unint64_t)HIDWORD(v706)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                unsigned int v45 = &v705;
LABEL_76:
                *((void *)*v45 + v44) = v14;
                ++*((_DWORD *)v45 + 2);
                v717.n128_u64[0] = 0;
                char v46 = sub_1CCEA98F4((uint64_t)&v702, v14, &v717);
                BOOL v47 = (void *)v717.n128_u64[0];
                if (v46)
                {
                  int v50 = *(char **)(v717.n128_u64[0] + 24);
                  unint64_t v48 = *(void *)(v717.n128_u64[0] + 32);
                  unsigned int v49 = (void *)(v717.n128_u64[0] + 24);
                  *(void *)(v717.n128_u64[0] + 8) = v10;
                  uint64_t v51 = *((void *)&__src + 1) - *v10;
                  if ((unint64_t)v50 < v48)
                  {
                    *(void *)int v50 = v51;
                    unsigned int v52 = v50 + 8;
                    void *v49 = v52;
                    int v53 = v52;
LABEL_149:
                    void *v49 = v53;
                    goto LABEL_160;
                  }
                  uint64_t v57 = (char *)v47[2];
                }
                else
                {
                  BOOL v47 = sub_1CCEA99A4((uint64_t)&v702, &v680, v717.n128_u64[0]);
                  uint64_t v57 = 0;
                  int v50 = 0;
                  unint64_t v48 = 0;
                  v47[1] = v10;
                  int32x4_t v47[2] = 0;
                  void v47[3] = 0;
                  unsigned int v49 = v47 + 3;
                  v47[4] = 0;
                  *BOOL v47 = v14;
                  uint64_t v51 = *((void *)&__src + 1) - *v10;
                }
                uint64_t v74 = (v50 - v57) >> 3;
                unint64_t v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 61) {
                  goto LABEL_1046;
                }
                uint64_t v76 = v48 - (void)v57;
                if (v76 >> 2 > v75) {
                  unint64_t v75 = v76 >> 2;
                }
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v77 = v75;
                }
                if (v77)
                {
                  if (v77 >> 61) {
                    goto LABEL_1047;
                  }
                  int v78 = (char *)operator new(8 * v77);
                }
                else
                {
                  int v78 = 0;
                }
                uint64_t v79 = &v78[8 * v74];
                *(void *)uint64_t v79 = v51;
                int v53 = v79 + 8;
                while (v50 != v57)
                {
                  uint64_t v80 = *((void *)v50 - 1);
                  v50 -= 8;
                  *((void *)v79 - 1) = v80;
                  v79 -= 8;
                }
                int32x4_t v47[2] = v79;
                void *v49 = v53;
                v47[4] = &v78[8 * v77];
                if (v57) {
                  operator delete(v57);
                }
                goto LABEL_149;
              }
            }
          }
        }
      }
      else
      {
        int v20 = *(unsigned __int8 *)(v14 + 16);
        if (v14 && v20 == 60)
        {
          unsigned int v21 = v676;
          uint64_t v22 = HIDWORD(v677);
          if (v676 == v675)
          {
            if (HIDWORD(v677))
            {
              uint64_t v23 = 0;
              uint64_t v24 = 8 * HIDWORD(v677);
              uint64_t v25 = (uint64_t *)v676;
              while (*v25 != v14)
              {
                if (*v25 == -2) {
                  uint64_t v23 = v25;
                }
                ++v25;
                v24 -= 8;
                if (!v24)
                {
                  if (!v23) {
                    goto LABEL_39;
                  }
LABEL_158:
                  *uint64_t v23 = v14;
                  goto LABEL_159;
                }
              }
              goto LABEL_160;
            }
LABEL_39:
            unsigned int v26 = v677;
            if (HIDWORD(v677) < v677) {
              goto LABEL_40;
            }
          }
          else
          {
            unsigned int v26 = v677;
          }
          if (3 * v26 <= 4 * (HIDWORD(v677) - v678))
          {
            if (v26 >= 0x40) {
              v26 *= 2;
            }
            else {
              unsigned int v26 = 128;
            }
          }
          else if (v26 - HIDWORD(v677) >= v26 >> 3)
          {
LABEL_58:
            unsigned int v34 = v26 - 1;
            unsigned int v35 = (v26 - 1) & ((v14 >> 4) ^ (v14 >> 9));
            unint64_t v36 = &v21[v35];
            uint64_t v37 = *v36;
            if (*v36 == -1) {
              goto LABEL_125;
            }
            long long v38 = 0;
            int v39 = 1;
            while (v37 != v14)
            {
              if (v38) {
                BOOL v40 = 0;
              }
              else {
                BOOL v40 = v37 == -2;
              }
              if (v40) {
                long long v38 = v36;
              }
              unsigned int v41 = v35 + v39++;
              unsigned int v35 = v41 & v34;
              unint64_t v36 = &v21[v41 & v34];
              uint64_t v37 = *v36;
              if (*v36 == -1) {
                goto LABEL_126;
              }
            }
            goto LABEL_160;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v675, v26);
          unsigned int v26 = v677;
          unsigned int v21 = v676;
          goto LABEL_58;
        }
        if (!v14) {
          goto LABEL_160;
        }
        if (v20 != 61) {
          goto LABEL_160;
        }
        uint64_t v27 = *(void *)(v14 - 64);
        if (!v27 || *(unsigned char *)(v27 + 16) != 60) {
          goto LABEL_160;
        }
        long long v28 = v676;
        uint64_t v29 = HIDWORD(v677);
        if (v676 != v675)
        {
          unsigned int v33 = v677;
          goto LABEL_91;
        }
        if (!HIDWORD(v677))
        {
LABEL_53:
          unsigned int v33 = v677;
          if (HIDWORD(v677) < v677)
          {
            ++HIDWORD(v677);
            *(void *)&v676[8 * v29] = v27;
            goto LABEL_160;
          }
LABEL_91:
          if (3 * v33 <= 4 * (HIDWORD(v677) - v678))
          {
            if (v33 >= 0x40) {
              v33 *= 2;
            }
            else {
              unsigned int v33 = 128;
            }
          }
          else if (v33 - HIDWORD(v677) >= v33 >> 3)
          {
            goto LABEL_93;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v675, v33);
          unsigned int v33 = v677;
          long long v28 = v676;
LABEL_93:
          unsigned int v58 = v33 - 1;
          unsigned int v59 = (v33 - 1) & ((v27 >> 4) ^ (v27 >> 9));
          __int16 v60 = &v28[8 * v59];
          uint64_t v61 = *(void *)v60;
          if (*(void *)v60 == -1)
          {
            uint64_t v62 = 0;
LABEL_151:
            if (v62) {
              BOOL v81 = v62;
            }
            else {
              BOOL v81 = v60;
            }
            if (*(void *)v81 != v27)
            {
              if (*(void *)v81 == -2) {
                --v678;
              }
              else {
                ++HIDWORD(v677);
              }
              *(void *)BOOL v81 = v27;
            }
          }
          else
          {
            uint64_t v62 = 0;
            int v63 = 1;
            while (v61 != v27)
            {
              if (v62) {
                BOOL v64 = 0;
              }
              else {
                BOOL v64 = v61 == -2;
              }
              if (v64) {
                uint64_t v62 = v60;
              }
              unsigned int v65 = v59 + v63++;
              unsigned int v59 = v65 & v58;
              __int16 v60 = &v28[8 * (v65 & v58)];
              uint64_t v61 = *(void *)v60;
              if (*(void *)v60 == -1) {
                goto LABEL_151;
              }
            }
          }
          goto LABEL_160;
        }
        unint64_t v30 = 0;
        uint64_t v31 = 8 * HIDWORD(v677);
        long long v32 = v676;
        while (*v32 != v27)
        {
          if (*v32 == -2) {
            unint64_t v30 = v32;
          }
          ++v32;
          v31 -= 8;
          if (!v31)
          {
            if (!v30) {
              goto LABEL_53;
            }
            *unint64_t v30 = v27;
LABEL_159:
            --v678;
            break;
          }
        }
      }
LABEL_160:
      v10 += 3;
    }
    if (v686)
    {
      unint64_t v82 = (char *)v685;
      uint64_t v83 = (char *)v685 + 8 * v686;
      do
      {
        uint64_t v84 = *(void *)v82;
        uint64_t v85 = sub_1CCE9265C((uint64_t)&v702, *(void *)((*(void *)(*(void *)v82 + 16) & 0xFFFFFFFFFFFFFFF8) + 24));
        if (v702) {
          unsigned int v86 = &v703;
        }
        else {
          unsigned int v86 = v703;
        }
        unsigned int v87 = v704;
        if (v702) {
          unsigned int v87 = 8;
        }
        if (&v86[5 * v87] != (void *)v85 && *(void *)(v84 + 8) > *((void *)&__src + 1))
        {
          int v88 = (void *)v85;
          uint64_t v89 = *((void *)&__src + 1) - **(void **)(v85 + 8);
          uint64_t v91 = *(char **)(v85 + 24);
          unint64_t v90 = *(void *)(v85 + 32);
          if ((unint64_t)v91 >= v90)
          {
            unsigned int v93 = *(char **)(v85 + 16);
            uint64_t v94 = (v91 - v93) >> 3;
            unint64_t v95 = v94 + 1;
            if ((unint64_t)(v94 + 1) >> 61) {
              goto LABEL_1046;
            }
            uint64_t v96 = v90 - (void)v93;
            if (v96 >> 2 > v95) {
              unint64_t v95 = v96 >> 2;
            }
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v97 = v95;
            }
            if (v97)
            {
              if (v97 >> 61) {
                goto LABEL_1047;
              }
              uint64_t v98 = (char *)operator new(8 * v97);
            }
            else
            {
              uint64_t v98 = 0;
            }
            uint64_t v99 = &v98[8 * v94];
            *(void *)uint64_t v99 = v89;
            uint64_t v92 = v99 + 8;
            while (v91 != v93)
            {
              uint64_t v100 = *((void *)v91 - 1);
              v91 -= 8;
              *((void *)v99 - 1) = v100;
              v99 -= 8;
            }
            v88[2] = v99;
            v88[3] = v92;
            v88[4] = &v98[8 * v97];
            if (v93) {
              operator delete(v93);
            }
          }
          else
          {
            *(void *)uint64_t v91 = v89;
            uint64_t v92 = v91 + 8;
          }
          v88[3] = v92;
        }
        v82 += 8;
      }
      while (v82 != v83);
    }
    sub_1CCE9FED4((uint64_t)&__src);
  }
  if (v713 != v715) {
    free(v713);
  }
  if (v685 != v687) {
    free(v685);
  }
  if (v698 != v700) {
    free(v698);
  }
  if (v691 != &v693) {
    free(v691);
  }
  int v101 = (uint64_t *)v705;
  *(void *)&long long v689 = &v675;
  *((void *)&v689 + 1) = &v702;
  if (!v706) {
    goto LABEL_226;
  }
  uint64_t v102 = (uint64_t *)((char *)v705 + 8 * v706);
  uint64_t v103 = 8 * v706 - 8;
  uint64_t v104 = (uint64_t *)v705;
  do
  {
    uint64_t v105 = *v104++;
    if (sub_1CCEA9CC8((uint64_t *)&v689, v105)) {
      break;
    }
    v103 -= 8;
    int v101 = v104;
  }
  while (v104 != v102);
  if (v104 == v102)
  {
LABEL_226:
    uint64_t v102 = v101;
  }
  else
  {
    uint64_t v106 = 1;
    uint64_t v102 = v101;
    do
    {
      if ((sub_1CCEA9CC8((uint64_t *)&v689, v101[v106]) & 1) == 0) {
        *v102++ = v101[v106];
      }
      ++v106;
      v103 -= 8;
    }
    while (v103);
  }
  uint64_t v107 = v705;
  if (((unint64_t)((char *)v102 - (unsigned char *)v705) >> 3))
  {
    uint64_t v108 = (char *)v705 + 8 * ((unint64_t)((char *)v102 - (unsigned char *)v705) >> 3);
    if (v676 == v675) {
      int v109 = HIDWORD(v677);
    }
    else {
      int v109 = v677;
    }
    int v110 = &v676[8 * v109];
    int v111 = v677 - 1;
    int v112 = v676;
    uint64_t v113 = v705;
    uint64_t v114 = (unsigned int *)a1;
    while (1)
    {
      uint64_t v115 = *(void *)(*v113 - 64);
      if (v112 == v675)
      {
        if (HIDWORD(v677))
        {
          uint64_t v116 = 0;
          while (*(void *)&v675[v116] != v115)
          {
            v116 += 8;
            if (8 * HIDWORD(v677) == v116)
            {
              int v117 = HIDWORD(v677);
              goto LABEL_252;
            }
          }
          BOOL v126 = &v675[v116];
          int v117 = HIDWORD(v677);
          int v112 = v675;
        }
        else
        {
          int v117 = 0;
LABEL_252:
          int v112 = v675;
          BOOL v126 = &v675[8 * HIDWORD(v677)];
        }
      }
      else
      {
        unsigned int v118 = v111 & ((v115 >> 4) ^ (v115 >> 9));
        uint64_t v119 = &v676[8 * v118];
        uint64_t v120 = *(void *)v119;
        if (*(void *)v119 == -1)
        {
          unsigned int v121 = 0;
LABEL_254:
          if (v121) {
            uint64_t v119 = v121;
          }
          uint64_t v125 = *(void *)v119;
        }
        else
        {
          unsigned int v121 = 0;
          int v122 = 1;
          while (v120 != v115)
          {
            if (v121) {
              BOOL v123 = 0;
            }
            else {
              BOOL v123 = v120 == -2;
            }
            if (v123) {
              unsigned int v121 = v119;
            }
            unsigned int v124 = v118 + v122++;
            unsigned int v118 = v124 & v111;
            uint64_t v119 = &v676[8 * (v124 & v111)];
            uint64_t v120 = *(void *)v119;
            if (*(void *)v119 == -1) {
              goto LABEL_254;
            }
          }
          uint64_t v125 = *(void *)(*v113 - 64);
        }
        BOOL v126 = v125 == v115 ? v119 : v110;
        int v117 = HIDWORD(v677);
        int v112 = v676;
      }
      if (v112 != v675) {
        int v117 = v677;
      }
      unsigned int v127 = &v112[8 * v117];
      uint64_t v128 = (char *)(v113 + 1);
      if (v126 != v127) {
        break;
      }
      ++v113;
      if (v128 == v108)
      {
        uint64_t v129 = v705;
        uint64_t v107 = v108;
        goto LABEL_302;
      }
    }
    if (v128 == v108)
    {
      uint64_t v129 = v705;
    }
    else
    {
      do
      {
        uint64_t v130 = *(void *)(*(void *)v128 - 64);
        uint64_t v131 = v675;
        if (v676 == v675)
        {
          int v132 = HIDWORD(v677);
          BOOL v133 = &v676[8 * HIDWORD(v677)];
          if (HIDWORD(v677))
          {
            uint64_t v134 = 0;
            while (*(void *)&v676[v134] != v130)
            {
              v134 += 8;
              if (8 * HIDWORD(v677) == v134) {
                goto LABEL_287;
              }
            }
            BOOL v133 = &v676[v134];
          }
LABEL_287:
          uint64_t v131 = v676;
        }
        else
        {
          unsigned int v135 = ((v130 >> 4) ^ (v130 >> 9)) & v111;
          BOOL v133 = &v676[8 * v135];
          uint64_t v136 = *(void *)v133;
          if (*(void *)v133 == -1)
          {
            int v137 = 0;
LABEL_296:
            if (v137) {
              BOOL v133 = v137;
            }
            int v132 = HIDWORD(v677);
            if (*(void *)v133 != v130) {
              BOOL v133 = &v676[8 * v677];
            }
          }
          else
          {
            int v137 = 0;
            int v138 = 1;
            while (v136 != v130)
            {
              if (v137) {
                BOOL v139 = 0;
              }
              else {
                BOOL v139 = v136 == -2;
              }
              if (v139) {
                int v137 = v133;
              }
              unsigned int v140 = v135 + v138++;
              unsigned int v135 = v140 & v111;
              BOOL v133 = &v676[8 * (v140 & v111)];
              uint64_t v136 = *(void *)v133;
              if (*(void *)v133 == -1) {
                goto LABEL_296;
              }
            }
            int v132 = HIDWORD(v677);
          }
        }
        if (v676 == v131) {
          int v141 = v132;
        }
        else {
          int v141 = v677;
        }
        if (v133 == &v676[8 * v141]) {
          *v113++ = *(void *)v128;
        }
        v128 += 8;
      }
      while (v128 != v108);
      uint64_t v129 = v705;
    }
    uint64_t v107 = v113;
  }
  else
  {
    uint64_t v129 = v705;
    uint64_t v114 = (unsigned int *)a1;
  }
LABEL_302:
  unint64_t v142 = (unint64_t)(v107 - v129) >> 3;
  LODWORD(v706) = v142;
  uint64_t v143 = v708;
  if (v709)
  {
    uint64_t v144 = (char *)v708 + 8 * v709;
    if (v676 == v675) {
      int v145 = HIDWORD(v677);
    }
    else {
      int v145 = v677;
    }
    uint64_t v146 = &v676[8 * v145];
    int v147 = v677 - 1;
    uint64_t v148 = v676;
    uint64_t v149 = (char *)v708;
    while (1)
    {
      uint64_t v150 = *(void *)v149;
      if (v148 == v675)
      {
        if (HIDWORD(v677))
        {
          uint64_t v151 = 0;
          while (*(void *)&v675[v151] != v150)
          {
            v151 += 8;
            if (8 * HIDWORD(v677) == v151)
            {
              int v152 = HIDWORD(v677);
              goto LABEL_327;
            }
          }
          uint64_t v161 = &v675[v151];
          int v152 = HIDWORD(v677);
          uint64_t v148 = v675;
        }
        else
        {
          int v152 = 0;
LABEL_327:
          uint64_t v148 = v675;
          uint64_t v161 = &v675[8 * HIDWORD(v677)];
        }
      }
      else
      {
        unsigned int v153 = v147 & ((v150 >> 4) ^ (v150 >> 9));
        uint64_t v154 = &v676[8 * v153];
        uint64_t v155 = *(void *)v154;
        if (*(void *)v154 == -1)
        {
          uint64_t v156 = 0;
LABEL_329:
          if (v156) {
            uint64_t v154 = v156;
          }
          uint64_t v160 = *(void *)v154;
        }
        else
        {
          uint64_t v156 = 0;
          int v157 = 1;
          while (v155 != v150)
          {
            if (v156) {
              BOOL v158 = 0;
            }
            else {
              BOOL v158 = v155 == -2;
            }
            if (v158) {
              uint64_t v156 = v154;
            }
            unsigned int v159 = v153 + v157++;
            unsigned int v153 = v159 & v147;
            uint64_t v154 = &v676[8 * (v159 & v147)];
            uint64_t v155 = *(void *)v154;
            if (*(void *)v154 == -1) {
              goto LABEL_329;
            }
          }
          uint64_t v160 = *(void *)v149;
        }
        uint64_t v161 = v160 == v150 ? v154 : v146;
        int v152 = HIDWORD(v677);
        uint64_t v148 = v676;
      }
      if (v148 != v675) {
        int v152 = v677;
      }
      uint64_t v162 = &v148[8 * v152];
      unsigned int v163 = v149 + 8;
      if (v161 != v162) {
        break;
      }
      v149 += 8;
      if (v163 == v144)
      {
        uint64_t v149 = (char *)v708 + 8 * v709;
        goto LABEL_375;
      }
    }
    if (v163 != v144)
    {
      do
      {
        uint64_t v164 = *(void *)v163;
        uint64_t v165 = v675;
        if (v676 == v675)
        {
          int v166 = HIDWORD(v677);
          int v167 = &v676[8 * HIDWORD(v677)];
          if (HIDWORD(v677))
          {
            uint64_t v168 = 0;
            while (*(void *)&v676[v168] != v164)
            {
              v168 += 8;
              if (8 * HIDWORD(v677) == v168) {
                goto LABEL_362;
              }
            }
            int v167 = &v676[v168];
          }
LABEL_362:
          uint64_t v165 = v676;
        }
        else
        {
          unsigned int v169 = ((v164 >> 4) ^ (v164 >> 9)) & v147;
          int v167 = &v676[8 * v169];
          uint64_t v170 = *(void *)v167;
          if (*(void *)v167 == -1)
          {
            unsigned int v171 = 0;
LABEL_371:
            if (v171) {
              int v167 = v171;
            }
            int v166 = HIDWORD(v677);
            if (*(void *)v167 != v164) {
              int v167 = &v676[8 * v677];
            }
          }
          else
          {
            unsigned int v171 = 0;
            int v172 = 1;
            while (v170 != v164)
            {
              if (v171) {
                BOOL v173 = 0;
              }
              else {
                BOOL v173 = v170 == -2;
              }
              if (v173) {
                unsigned int v171 = v167;
              }
              unsigned int v174 = v169 + v172++;
              unsigned int v169 = v174 & v147;
              int v167 = &v676[8 * (v174 & v147)];
              uint64_t v170 = *(void *)v167;
              if (*(void *)v167 == -1) {
                goto LABEL_371;
              }
            }
            int v166 = HIDWORD(v677);
          }
        }
        if (v676 == v165) {
          int v175 = v166;
        }
        else {
          int v175 = v677;
        }
        if (v167 == &v676[8 * v175])
        {
          *(void *)uint64_t v149 = v164;
          v149 += 8;
        }
        v163 += 8;
      }
      while (v163 != v144);
      uint64_t v143 = v708;
      LODWORD(v142) = v706;
    }
  }
  else
  {
    uint64_t v149 = (char *)v708;
  }
LABEL_375:
  LODWORD(v709) = (unint64_t)(v149 - v143) >> 3;
  BOOL v176 = (v709 | v142) != 0;
  if (!(v709 | v142)) {
    goto LABEL_376;
  }
  sub_1CCE926C0((uint64_t)&v689, (uint64_t **)a2);
  *(void *)&long long __src = &v684;
  *((void *)&__src + 1) = 0x400000000;
  *(void *)&long long v711 = &v713;
  *((void *)&v711 + 1) = &v713;
  *(void *)&long long v712 = 4;
  DWORD2(v712) = 0;
  uint64_t v680 = 1;
  uint64_t v681 = -4096;
  uint64_t __dst = *(void **)(*(void *)(*(void *)(a2 + 40) + 56) + 40);
  unint64_t v658 = __dst + 34;
  if (!v709)
  {
    std::string __p = 0;
    goto LABEL_398;
  }
  int v648 = 0;
  std::string __p = 0;
  uint64_t v188 = (unint64_t *)v708;
  uint64_t v636 = (uint64_t)(v114 + 6);
  int v627 = v114 + 48;
  BOOL v630 = (char *)v708 + 8 * v709;
  while (2)
  {
    uint64_t v632 = v188;
    v717.n128_u64[0] = *v188;
    unint64_t v189 = v717.n128_u64[0];
    uint64_t v653 = (uint64_t **)sub_1CCE9282C((uint64_t)&v702, (uint64_t *)&v717);
    uint64_t v190 = (*v653)[1];
    uint64_t v645 = **v653;
    uint64_t v191 = *(llvm::CastInst **)(v189 - 32);
    uint64_t v693 = *(void *)(v189 + 40);
    uint64_t v694 = v189 + 24;
    uint64_t v192 = *(unsigned __int8 **)(v189 + 48);
    long long v669 = v192;
    if (v192)
    {
      llvm::MetadataTracking::track((uint64_t)&v669, v192, 2);
      uint64_t v193 = (uint64_t)v669;
    }
    else
    {
      uint64_t v193 = 0;
    }
    sub_1CB8461A4((uint64_t)&v689, 0, v193);
    unint64_t v194 = (unint64_t)__p;
    if (v669)
    {
      int v374 = *v669;
      if ((v374 - 4) > 0x1E)
      {
        if ((v374 - 3) >= 0xFFFFFFFE) {
          uint64_t v377 = v669;
        }
        else {
          uint64_t v377 = 0;
        }
        if ((v374 - 3) < 0xFFFFFFFE)
        {
          if (v374 == 3) {
            *((void *)v669 + 1) = 0;
          }
          goto LABEL_405;
        }
        unint64_t v376 = (unint64_t)(v377 + 8);
      }
      else
      {
        if ((v669[1] & 0x7F) != 2 && !*((_DWORD *)v669 + 3)) {
          goto LABEL_405;
        }
        uint64_t v375 = *((void *)v669 + 2);
        if ((v375 & 4) == 0) {
          goto LABEL_405;
        }
        unint64_t v376 = v375 & 0xFFFFFFFFFFFFFFF8;
        if (!v376) {
          goto LABEL_405;
        }
      }
      v717.n128_u64[0] = (unint64_t)&v669;
      sub_1CC5FA668(v376 + 16, &v717);
      unint64_t v194 = (unint64_t)__p;
    }
LABEL_405:
    uint64_t v195 = 0;
    uint64_t v196 = 0;
    uint64_t v197 = v653[1];
    unint64_t v639 = (unint64_t)((char *)v653[2] - (char *)v197) >> 3;
    uint64_t v198 = *v197;
    uint64_t v637 = (v190 - v645);
    unsigned int v641 = (v189 >> 4) ^ (v189 >> 9);
    uint64_t v651 = v189;
    while (2)
    {
      uint64_t v656 = v198;
      unint64_t v199 = (llvm::PointerType *)llvm::IntegerType::get(**(llvm::IntegerType ***)v189, (llvm::LLVMContext *)(8 * v198));
      uint64_t v200 = (uint64_t)v199;
      uint64_t v201 = **(void **)(v189 - 32);
      unsigned int v202 = *(_DWORD *)(v201 + 8);
      if ((v202 & 0xFE) == 0x12) {
        unsigned int v202 = *(_DWORD *)(**(void **)(v201 + 16) + 8);
      }
      unsigned int v203 = v202 >> 8;
      uint64_t v204 = (llvm::Value *)llvm::PointerType::get(v199, (llvm::Type *)(v202 >> 8));
      if (v202 < 0x100) {
        goto LABEL_417;
      }
      uint64_t v205 = *((unsigned int *)__dst + 128);
      uint64_t v206 = __dst[63];
      if (v205)
      {
        uint64_t v206 = __dst[63];
        unint64_t v207 = *((unsigned int *)__dst + 128);
        do
        {
          unint64_t v208 = v207 >> 1;
          uint64_t v209 = v206 + 16 * (v207 >> 1);
          unsigned int v210 = *(_DWORD *)(v209 + 8);
          uint64_t v211 = v209 + 16;
          v207 += ~(v207 >> 1);
          if (v210 < v203) {
            uint64_t v206 = v211;
          }
          else {
            unint64_t v207 = v208;
          }
        }
        while (v207);
      }
      if (v206 == __dst[63] + 16 * v205 || *(_DWORD *)(v206 + 8) != v203) {
LABEL_417:
      }
        uint64_t v206 = __dst[63];
      unsigned int v212 = *(_DWORD *)(v206 + 12);
      unsigned int v674 = v212;
      uint64_t v213 = (char *)v194;
      if (v212 > 0x40) {
        operator new[]();
      }
      if (v212) {
        unint64_t v214 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v212;
      }
      else {
        unint64_t v214 = 0;
      }
      unint64_t v673 = v214 & v196;
      if ((*((unsigned char *)v191 + 23) & 0x10) != 0)
      {
        uint64_t v215 = ***(void ***)v191;
        uint64_t v216 = *(void *)(v215 + 152);
        uint64_t v217 = *(unsigned int *)(v215 + 168);
        if (!v217) {
          goto LABEL_428;
        }
        LODWORD(v218) = (v217 - 1) & ((v191 >> 4) ^ (v191 >> 9));
        int v219 = (llvm::CastInst **)(v216 + 16 * v218);
        int v220 = *v219;
        if (*v219 != v191)
        {
          int v221 = 1;
          while (v220 != (llvm::CastInst *)-4096)
          {
            int v222 = v218 + v221++;
            uint64_t v218 = v222 & (v217 - 1);
            int v220 = *(llvm::CastInst **)(v216 + 16 * v218);
            if (v220 == v191)
            {
              int v219 = (llvm::CastInst **)(v216 + 16 * v218);
              goto LABEL_429;
            }
          }
LABEL_428:
          int v219 = (llvm::CastInst **)(v216 + 16 * v217);
        }
LABEL_429:
        uint64_t v223 = v219[1];
        uint64_t v226 = *(void *)v223;
        uint64_t v225 = (char *)v223 + 16;
        uint64_t v224 = v226;
      }
      else
      {
        uint64_t v224 = 0;
        uint64_t v225 = &byte_1CFBCE98E;
      }
      __int16 v672 = 773;
      long long v669 = (unsigned __int8 *)v225;
      uint64_t v670 = v224;
      unint64_t v671 = ".";
      BOOL v227 = sub_1CCE92898((uint64_t *)&v689, (uint64_t)v658, v191, (llvm::LLVMContext *)&v673, v204, (uint64_t)&v669);
      unint64_t v228 = *(unsigned __int16 *)(v651 + 18);
      if ((*(unsigned char *)(v651 + 23) & 0x10) != 0)
      {
        uint64_t v229 = ***(void ***)v651;
        uint64_t v230 = *(void *)(v229 + 152);
        uint64_t v231 = *(unsigned int *)(v229 + 168);
        if (!v231) {
          goto LABEL_437;
        }
        LODWORD(v232) = (v231 - 1) & v641;
        uint64_t v233 = (uint64_t *)(v230 + 16 * v232);
        uint64_t v234 = *v233;
        if (*v233 != v651)
        {
          int v235 = 1;
          while (v234 != -4096)
          {
            int v236 = v232 + v235++;
            uint64_t v232 = v236 & (v231 - 1);
            uint64_t v234 = *(void *)(v230 + 16 * v232);
            if (v234 == v651)
            {
              uint64_t v233 = (uint64_t *)(v230 + 16 * v232);
              goto LABEL_438;
            }
          }
LABEL_437:
          uint64_t v233 = (uint64_t *)(v230 + 16 * v231);
        }
LABEL_438:
        int v237 = (void *)v233[1];
        uint64_t v240 = *v237;
        uint64_t v239 = (char *)(v237 + 2);
        uint64_t v238 = v240;
      }
      else
      {
        uint64_t v238 = 0;
        uint64_t v239 = &byte_1CFBCE98E;
      }
      __int16 v668 = 261;
      unint64_t v241 = 63 - __clz(((1 << (v228 >> 1)) | v196) & -((1 << (v228 >> 1)) | v196));
      uint64_t v666 = v239;
      uint64_t v667 = v238;
      unint64_t v242 = operator new(0x60uLL);
      v242[13] = v242[13] & 0x38000000 | 1;
      BOOL v243 = (llvm::Instruction *)(v242 + 8);
      *(void *)unint64_t v242 = 0;
      *((void *)v242 + 1) = 0;
      *((void *)v242 + 2) = 0;
      *((void *)v242 + 3) = v242 + 8;
      __int16 v720 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v242 + 8), v200, (uint64_t)v227, (const char **)&v717, 0, v241, 0);
      (*(void (**)(void, _DWORD *, char **, uint64_t, uint64_t))(*(void *)v695 + 16))(v695, v242 + 8, &v666, v693, v694);
      if (DWORD2(v689))
      {
        uint64_t v257 = v689;
        uint64_t v258 = v689 + 16 * DWORD2(v689);
        do
        {
          llvm::Instruction::setMetadata(v243, *(_DWORD *)v257, *(llvm::MDNode **)(v257 + 8));
          v257 += 16;
        }
        while (v257 != v258);
      }
      unint64_t v194 = (unint64_t)v213;
      if (v674 >= 0x41 && v673) {
        MEMORY[0x1D25D9CB0](v673, 0x1000C8000313F17);
      }
      v717.n128_u64[0] = 0x190000000ALL;
      llvm::Instruction::copyMetadata((uint64_t)v243, v651, (int *)&v717, 2);
      int v244 = __p;
      if (__p >= v648)
      {
        uint64_t v246 = (__p - v213) >> 3;
        unint64_t v247 = v246 + 1;
        if ((unint64_t)(v246 + 1) >> 61) {
LABEL_1046:
        }
          abort();
        if ((v648 - v213) >> 2 > v247) {
          unint64_t v247 = (v648 - v213) >> 2;
        }
        if ((unint64_t)(v648 - v213) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v248 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v248 = v247;
        }
        if (v248)
        {
          if (v248 >> 61) {
LABEL_1047:
          }
            sub_1CB833614();
          uint64_t v249 = (char *)operator new(8 * v248);
          int v244 = __p;
        }
        else
        {
          uint64_t v249 = 0;
        }
        uint64_t v250 = (llvm::Instruction **)&v249[8 * v246];
        *uint64_t v250 = v243;
        uint64_t v251 = (char *)(v250 + 1);
        if (v244 != v213)
        {
          do
          {
            uint64_t v252 = (llvm::Instruction *)*((void *)v244 - 1);
            v244 -= 8;
            *--uint64_t v250 = v252;
          }
          while (v244 != v213);
          int v244 = v213;
        }
        unint64_t v194 = (unint64_t)v250;
        int v648 = &v249[8 * v248];
        if (v244) {
          operator delete(v244);
        }
        uint64_t v245 = v251;
      }
      else
      {
        *(void *)std::string __p = v243;
        uint64_t v245 = __p + 8;
      }
      int v253 = v242[13];
      std::string __p = v245;
      if ((v253 & 0x40000000) != 0) {
        unint64_t v254 = *((void *)v242 + 3);
      }
      else {
        unint64_t v254 = (unint64_t)v243 - 32 * (v253 & 0x7FFFFFF);
      }
      unint64_t v189 = v651;
      v717.n128_u64[0] = v196 + v645;
      v717.n128_u64[1] = v196 + v645 + v656;
      uint64_t v718 = (int32x2_t ****)(v254 & 0xFFFFFFFFFFFFFFFBLL);
      sub_1CBC0D590((uint64_t)&__src, &v717);
      if (v195 != (v639 & ~((int)v639 >> 31)))
      {
        uint64_t v255 = v653[1];
        uint64_t v256 = v637;
        if ((int)v195 + 1 < (int)v639) {
          uint64_t v256 = v255[v195 + 1];
        }
        uint64_t v196 = v255[v195];
        uint64_t v198 = v256 - v196;
        ++v195;
        continue;
      }
      break;
    }
    uint64_t v259 = *(void *)(v651 + 8);
    uint64_t v114 = (unsigned int *)a1;
    if (!v259) {
      goto LABEL_633;
    }
    char v260 = 0;
    unint64_t v643 = (unint64_t)&__p[-v194] >> 3;
    while (2)
    {
      char v642 = v260;
LABEL_478:
      uint64_t v261 = *(void *)(v259 + 24);
      if v706 && (sub_1CCEA98F4((uint64_t)&v702, *(void *)(v259 + 24), &v717))
      {
        uint64_t v259 = *(void *)(v259 + 8);
        char v260 = 1;
        if (!v259) {
          goto LABEL_667;
        }
        continue;
      }
      break;
    }
    uint64_t v262 = *(llvm::CastInst **)(v261 - 32);
    uint64_t v693 = *(void *)(v261 + 40);
    uint64_t v694 = v261 + 24;
    uint64_t v263 = *(unsigned __int8 **)(v261 + 48);
    long long v669 = v263;
    if (v263)
    {
      llvm::MetadataTracking::track((uint64_t)&v669, v263, 2);
      uint64_t v264 = (uint64_t)v669;
    }
    else
    {
      uint64_t v264 = 0;
    }
    sub_1CB8461A4((uint64_t)&v689, 0, v264);
    if (v669)
    {
      int v348 = *v669;
      if ((v348 - 4) > 0x1E)
      {
        if ((v348 - 3) >= 0xFFFFFFFE) {
          uint64_t v351 = v669;
        }
        else {
          uint64_t v351 = 0;
        }
        if ((v348 - 3) < 0xFFFFFFFE)
        {
          if (v348 == 3) {
            *((void *)v669 + 1) = 0;
          }
          goto LABEL_483;
        }
        unint64_t v350 = (unint64_t)(v351 + 8);
      }
      else
      {
        if ((v669[1] & 0x7F) != 2 && !*((_DWORD *)v669 + 3)) {
          goto LABEL_483;
        }
        uint64_t v349 = *((void *)v669 + 2);
        if ((v349 & 4) == 0) {
          goto LABEL_483;
        }
        unint64_t v350 = v349 & 0xFFFFFFFFFFFFFFF8;
        if (!v350) {
          goto LABEL_483;
        }
      }
      v717.n128_u64[0] = (unint64_t)&v669;
      sub_1CC5FA668(v350 + 16, &v717);
    }
LABEL_483:
    uint64_t v646 = v259;
    if ((int)v643 >= 1)
    {
      uint64_t v265 = 0;
      while (1)
      {
        if (v265) {
          uint64_t v266 = v653[1][v265 - 1];
        }
        else {
          uint64_t v266 = 0;
        }
        uint64_t v267 = **(void **)(v261 - 32);
        unsigned int v268 = *(_DWORD *)(v267 + 8);
        if ((v268 & 0xFE) == 0x12) {
          unsigned int v268 = *(_DWORD *)(**(void **)(v267 + 16) + 8);
        }
        unint64_t v269 = v194;
        uint64_t v270 = *(void *)(v194 + 8 * v265);
        int v271 = (llvm::Value *)llvm::PointerType::get(*(llvm::PointerType **)v270, (llvm::Type *)(v268 >> 8));
        uint64_t v272 = **(void **)(v261 - 32);
        unsigned int v273 = *(_DWORD *)(v272 + 8);
        if ((v273 & 0xFE) == 0x12) {
          unsigned int v273 = *(_DWORD *)(**(void **)(v272 + 16) + 8);
        }
        if (v273 < 0x100) {
          goto LABEL_501;
        }
        unsigned int v274 = v273 >> 8;
        uint64_t v275 = *((unsigned int *)__dst + 128);
        uint64_t v276 = __dst[63];
        if (v275)
        {
          uint64_t v276 = __dst[63];
          unint64_t v277 = *((unsigned int *)__dst + 128);
          do
          {
            unint64_t v278 = v277 >> 1;
            uint64_t v279 = v276 + 16 * (v277 >> 1);
            unsigned int v280 = *(_DWORD *)(v279 + 8);
            uint64_t v281 = v279 + 16;
            v277 += ~(v277 >> 1);
            if (v280 < v274) {
              uint64_t v276 = v281;
            }
            else {
              unint64_t v277 = v278;
            }
          }
          while (v277);
        }
        if (v276 == __dst[63] + 16 * v275 || *(_DWORD *)(v276 + 8) != v274) {
LABEL_501:
        }
          uint64_t v276 = __dst[63];
        unsigned int v282 = *(_DWORD *)(v276 + 12);
        unsigned int v665 = v282;
        if (v282 > 0x40) {
          operator new[]();
        }
        if (v282) {
          unint64_t v283 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v282;
        }
        else {
          unint64_t v283 = 0;
        }
        unint64_t v664 = v283 & v266;
        if ((*((unsigned char *)v262 + 23) & 0x10) == 0)
        {
          uint64_t v293 = 0;
          int v294 = &byte_1CFBCE98E;
          goto LABEL_514;
        }
        uint64_t v284 = ***(void ***)v262;
        uint64_t v285 = *(void *)(v284 + 152);
        uint64_t v286 = *(unsigned int *)(v284 + 168);
        if (!v286) {
          goto LABEL_512;
        }
        LODWORD(v287) = (v286 - 1) & ((v262 >> 4) ^ (v262 >> 9));
        unint64_t v288 = (llvm::CastInst **)(v285 + 16 * v287);
        int v289 = *v288;
        if (*v288 != v262) {
          break;
        }
LABEL_513:
        size_t v292 = v288[1];
        uint64_t v295 = *(void *)v292;
        int v294 = (char *)v292 + 16;
        uint64_t v293 = v295;
LABEL_514:
        __int16 v672 = 773;
        long long v669 = (unsigned __int8 *)v294;
        uint64_t v670 = v293;
        unint64_t v671 = ".";
        unint64_t v296 = sub_1CCE92898((uint64_t *)&v689, (uint64_t)v658, v262, (llvm::LLVMContext *)&v664, v271, (uint64_t)&v669);
        unint64_t v297 = *(unsigned __int16 *)(v261 + 18);
        uint64_t v298 = (char *)operator new(0x80uLL);
        *((_DWORD *)v298 + 21) = *((_DWORD *)v298 + 21) & 0x38000000 | 2;
        *(void *)uint64_t v298 = 0;
        *((void *)v298 + 2) = 0;
        *((void *)v298 + 1) = 0;
        *((void *)v298 + 5) = 0;
        *((void *)v298 + 6) = 0;
        *((void *)v298 + 4) = 0;
        unint64_t v299 = (unsigned __int8 **)(v298 + 32);
        *((void *)v298 + 8) = ***(void ***)v270 + 1576;
        uint64_t v300 = (llvm::Instruction *)(v298 + 64);
        *((void *)v298 + 3) = v298 + 64;
        *((void *)v298 + 7) = v298 + 64;
        *((void *)v298 + 9) = 0;
        v298[80] = 61;
        v298[81] = 0;
        *((_WORD *)v298 + 41) = 0;
        *((_DWORD *)v298 + 21) = 2;
        *(_OWORD *)(v298 + 88) = 0u;
        *(_OWORD *)(v298 + 104) = 0u;
        *((_DWORD *)v298 + 30) = 0;
        *(void *)uint64_t v298 = v270;
        uint64_t v303 = *(void *)(v270 + 8);
        unint64_t v302 = (void *)(v270 + 8);
        uint64_t v301 = v303;
        *((void *)v298 + 1) = v303;
        if (v303) {
          *(void *)(v301 + 16) = v298 + 8;
        }
        *((void *)v298 + 2) = v302;
        *unint64_t v302 = v298;
        if (*((void *)v298 + 4))
        {
          **((void **)v298 + 6) = *((void *)v298 + 5);
          uint64_t v309 = *((void *)v298 + 5);
          if (v309) {
            *(void *)(v309 + 16) = *((void *)v298 + 6);
          }
        }
        *unint64_t v299 = v296;
        unint64_t v194 = v269;
        if (v296)
        {
          uint64_t v306 = *((void *)v296 + 1);
          unint64_t v305 = (unsigned __int8 ***)(v296 + 8);
          uint64_t v304 = v306;
          *((void *)v298 + 5) = v306;
          if (v306) {
            *(void *)(v304 + 16) = v298 + 40;
          }
          *((void *)v298 + 6) = v305;
          void *v305 = v299;
        }
        *((_WORD *)v298 + 41) = (126
                               - 2
                               * __clz(((1 << (v297 >> 1)) | v266) & -((1 << (v297 >> 1)) | v266))) & 0x7E;
        v298[124] = 1;
        __int16 v720 = 257;
        (*(void (**)(void, llvm::Instruction *, __n128 *, uint64_t, uint64_t))(*(void *)v695 + 16))(v695, v300, &v717, v693, v694);
        if (DWORD2(v689))
        {
          uint64_t v307 = v689;
          uint64_t v308 = v689 + 16 * DWORD2(v689);
          do
          {
            llvm::Instruction::setMetadata(v300, *(_DWORD *)v307, *(llvm::MDNode **)(v307 + 8));
            v307 += 16;
          }
          while (v307 != v308);
        }
        if (v665 >= 0x41 && v664) {
          MEMORY[0x1D25D9CB0](v664, 0x1000C8000313F17);
        }
        v717.n128_u64[0] = 0x190000000ALL;
        llvm::Instruction::copyMetadata((uint64_t)v300, v261, (int *)&v717, 2);
        if (++v265 == v643) {
          goto LABEL_535;
        }
      }
      int v290 = 1;
      while (v289 != (llvm::CastInst *)-4096)
      {
        int v291 = v287 + v290++;
        uint64_t v287 = v291 & (v286 - 1);
        int v289 = *(llvm::CastInst **)(v285 + 16 * v287);
        if (v289 == v262)
        {
          unint64_t v288 = (llvm::CastInst **)(v285 + 16 * v287);
          goto LABEL_513;
        }
      }
LABEL_512:
      unint64_t v288 = (llvm::CastInst **)(v285 + 16 * v286);
      goto LABEL_513;
    }
LABEL_535:
    if (*((unsigned char *)v262 + 16) == 59) {
      unint64_t v310 = (unint64_t)v262;
    }
    else {
      unint64_t v310 = 0;
    }
    v717.n128_u64[0] = v310;
    if (v310)
    {
      uint64_t v311 = *((void *)&v711 + 1);
      uint64_t v312 = DWORD1(v712);
      if (*((void *)&v711 + 1) == (void)v711)
      {
        unint64_t v189 = v651;
        uint64_t v313 = v646;
        if (DWORD1(v712))
        {
          int v314 = 0;
          uint64_t v315 = 8 * DWORD1(v712);
          uint64_t v316 = (unint64_t *)*((void *)&v711 + 1);
          while (*v316 != v310)
          {
            if (*v316 == -2) {
              int v314 = v316;
            }
            ++v316;
            v315 -= 8;
            if (!v315)
            {
              if (!v314) {
                goto LABEL_547;
              }
              *int v314 = v310;
              --DWORD2(v712);
              goto LABEL_577;
            }
          }
          goto LABEL_577;
        }
LABEL_547:
        unsigned int v317 = v712;
        if (DWORD1(v712) < v712)
        {
          ++DWORD1(v712);
          *(void *)(*((void *)&v711 + 1) + 8 * v312) = v310;
LABEL_577:
          sub_1CCE93F38(v636, (uint64_t *)&v717);
          uint64_t v114 = (unsigned int *)a1;
          goto LABEL_578;
        }
      }
      else
      {
        unsigned int v317 = v712;
        unint64_t v189 = v651;
        uint64_t v313 = v646;
      }
      if (3 * v317 <= 4 * (DWORD1(v712) - DWORD2(v712)))
      {
        if (v317 >= 0x40) {
          v317 *= 2;
        }
        else {
          unsigned int v317 = 128;
        }
      }
      else if (v317 - DWORD1(v712) >= v317 >> 3)
      {
        goto LABEL_558;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v711, v317);
      unsigned int v317 = v712;
      uint64_t v311 = *((void *)&v711 + 1);
LABEL_558:
      unsigned int v320 = v317 - 1;
      unsigned int v321 = (v317 - 1) & ((v310 >> 4) ^ (v310 >> 9));
      uint64_t v322 = (unint64_t *)(v311 + 8 * v321);
      unint64_t v323 = *v322;
      if (*v322 == -1)
      {
        uint64_t v324 = 0;
LABEL_570:
        if (v324) {
          size_t v328 = v324;
        }
        else {
          size_t v328 = v322;
        }
        if (*v328 != v310)
        {
          if (*v328 == -2) {
            --DWORD2(v712);
          }
          else {
            ++DWORD1(v712);
          }
          *size_t v328 = v310;
        }
      }
      else
      {
        uint64_t v324 = 0;
        int v325 = 1;
        while (v323 != v310)
        {
          if (v324) {
            BOOL v326 = 0;
          }
          else {
            BOOL v326 = v323 == -2;
          }
          if (v326) {
            uint64_t v324 = v322;
          }
          unsigned int v327 = v321 + v325++;
          unsigned int v321 = v327 & v320;
          uint64_t v322 = (unint64_t *)(v311 + 8 * (v327 & v320));
          unint64_t v323 = *v322;
          if (*v322 == -1) {
            goto LABEL_570;
          }
        }
      }
      goto LABEL_577;
    }
    long long v669 = 0;
    uint64_t v318 = llvm::Value::stripInBoundsOffsets((uint64_t)v262, (void (*)(uint64_t, uint64_t))nullsub_608, (uint64_t)&v666);
    if (*(unsigned char *)(v318 + 16) == 59) {
      uint64_t v319 = (unsigned __int8 *)v318;
    }
    else {
      uint64_t v319 = 0;
    }
    long long v669 = v319;
    if (v319) {
      sub_1CCE93F38(v636, (uint64_t *)&v669);
    }
    uint64_t v114 = (unsigned int *)a1;
    unint64_t v189 = v651;
    uint64_t v313 = v646;
LABEL_578:
    __n128 v717 = (__n128)4uLL;
    uint64_t v718 = (int32x2_t ****)v261;
    if (v261 != -8192 && v261 != -4096 && v261) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v717);
    }
    uint64_t v329 = v114[50];
    unint64_t v330 = *((void *)v114 + 24);
    if (v329 >= v114[51])
    {
      unint64_t v352 = v329 + 1;
      BOOL v353 = v330 + 24 * v329 > (unint64_t)&v717;
      if (v330 <= (unint64_t)&v717 && v353)
      {
        unint64_t v354 = (char *)&v717 - v330;
        sub_1CC0BD844(v627, v352);
        unint64_t v330 = *(void *)v627;
        uint64_t v331 = (__n128 *)&v354[*(void *)v627];
        goto LABEL_584;
      }
      sub_1CC0BD844(v627, v352);
      unint64_t v330 = *(void *)v627;
    }
    uint64_t v331 = &v717;
LABEL_584:
    unsigned int v332 = v114[50];
    uint64_t v333 = (unint64_t *)(v330 + 24 * v332);
    *uint64_t v333 = 4;
    v333[1] = 0;
    unint64_t v334 = v331[1].n128_u64[0];
    v333[2] = v334;
    if (v334 != -8192 && v334 != -4096)
    {
      if (v334)
      {
        unint64_t v335 = v331->n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
        v333[1] = *(void *)v335;
        *(void *)unint64_t v335 = v333;
        *uint64_t v333 = v335 | 4;
        uint64_t v336 = (unint64_t *)v333[1];
        if (v336) {
          *uint64_t v336 = *v336 & 7 | (unint64_t)(v333 + 1);
        }
      }
    }
    v114[50] = v332 + 1;
    if (v718 != (int32x2_t ****)-8192 && v718 != (int32x2_t ****)-4096 && v718)
    {
      unint64_t v337 = v717.n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v717.n128_u64[0] & 0xFFFFFFFFFFFFFFF8) = v717.n128_u64[1];
      if (v717.n128_u64[1])
      {
        *(void *)v717.n128_u64[1] = *(void *)v717.n128_u64[1] & 7 | v337;
      }
      else
      {
        unint64_t v338 = v718;
        unint64_t v339 = ***v718;
        unint64_t v340 = (unint64_t)v339[303];
        if (v340 <= v337)
        {
          uint64_t v341 = v339[305].u32[0];
          if (v340 + 16 * v341 > v337)
          {
            unsigned int v342 = v341 - 1;
            LODWORD(v343) = v342 & ((v718 >> 4) ^ (v718 >> 9));
            int v344 = (int32x2_t *****)(v340 + 16 * v343);
            size_t v345 = *v344;
            if (v718 == *v344)
            {
LABEL_600:
              *int v344 = (int32x2_t ****)-8192;
              v339[304] = vadd_s32(v339[304], (int32x2_t)0x1FFFFFFFFLL);
              unint64_t v338 = v718;
            }
            else
            {
              int v346 = 1;
              while (v345 != (int32x2_t ****)-4096)
              {
                int v347 = v343 + v346++;
                uint64_t v343 = v347 & v342;
                size_t v345 = *(int32x2_t *****)(v340 + 16 * v343);
                if (v718 == v345)
                {
                  int v344 = (int32x2_t *****)(v340 + 16 * v343);
                  goto LABEL_600;
                }
              }
            }
            *((unsigned char *)v338 + 17) &= ~1u;
          }
        }
      }
    }
    uint64_t v259 = *(void *)(v313 + 8);
    if (v259) {
      goto LABEL_478;
    }
    if ((v642 & 1) == 0) {
      goto LABEL_633;
    }
LABEL_667:
    v717.n128_u64[0] = v189;
    v717.n128_u64[1] = v194;
    uint64_t v718 = (int32x2_t ****)__p;
    uint64_t v719 = v648;
    sub_1CD7817CC((uint64_t)&v669, (uint64_t)&v680, (uint64_t *)&v717, (uint64_t)&v717.n128_i64[1]);
    if (v717.n128_u64[1]) {
      operator delete((void *)v717.n128_u64[1]);
    }
    int v648 = 0;
    unint64_t v194 = 0;
LABEL_633:
    std::string __p = (char *)v194;
    __n128 v717 = (__n128)4uLL;
    uint64_t v718 = (int32x2_t ****)v189;
    if (v189 != -8192 && v189 != -4096 && v189) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v717);
    }
    uint64_t v355 = v114[50];
    unint64_t v356 = *((void *)v114 + 24);
    if (v355 >= v114[51])
    {
      unint64_t v378 = v355 + 1;
      BOOL v379 = v356 + 24 * v355 > (unint64_t)&v717;
      if (v356 > (unint64_t)&v717 || !v379)
      {
        sub_1CC0BD844(v627, v378);
        unint64_t v356 = *(void *)v627;
        goto LABEL_638;
      }
      uint64_t v380 = (char *)&v717 - v356;
      sub_1CC0BD844(v627, v378);
      unint64_t v356 = *(void *)v627;
      v357 = (__n128 *)&v380[*(void *)v627];
    }
    else
    {
LABEL_638:
      v357 = &v717;
    }
    unsigned int v358 = v114[50];
    uint64_t v359 = (unint64_t *)(v356 + 24 * v358);
    *uint64_t v359 = 4;
    v359[1] = 0;
    unint64_t v360 = v357[1].n128_u64[0];
    v359[2] = v360;
    if (v360 != -8192 && v360 != -4096)
    {
      if (v360)
      {
        unint64_t v361 = v357->n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
        v359[1] = *(void *)v361;
        *(void *)unint64_t v361 = v359;
        *uint64_t v359 = v361 | 4;
        uint64_t v362 = (unint64_t *)v359[1];
        if (v362) {
          *uint64_t v362 = *v362 & 7 | (unint64_t)(v359 + 1);
        }
      }
    }
    v114[50] = v358 + 1;
    if (v718 != (int32x2_t ****)-8192 && v718 != (int32x2_t ****)-4096 && v718)
    {
      unint64_t v363 = v717.n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v717.n128_u64[0] & 0xFFFFFFFFFFFFFFF8) = v717.n128_u64[1];
      if (v717.n128_u64[1])
      {
        *(void *)v717.n128_u64[1] = *(void *)v717.n128_u64[1] & 7 | v363;
      }
      else
      {
        unsigned int v364 = v718;
        uint64_t v365 = ***v718;
        unint64_t v366 = (unint64_t)v365[303];
        if (v366 <= v363)
        {
          uint64_t v367 = v365[305].u32[0];
          if (v366 + 16 * v367 > v363)
          {
            unsigned int v368 = v367 - 1;
            LODWORD(v369) = v368 & ((v718 >> 4) ^ (v718 >> 9));
            unsigned int v370 = (int32x2_t *****)(v366 + 16 * v369);
            uint64_t v371 = *v370;
            if (v718 == *v370)
            {
LABEL_655:
              *unsigned int v370 = (int32x2_t ****)-8192;
              v365[304] = vadd_s32(v365[304], (int32x2_t)0x1FFFFFFFFLL);
              unsigned int v364 = v718;
            }
            else
            {
              int v372 = 1;
              while (v371 != (int32x2_t ****)-4096)
              {
                int v373 = v369 + v372++;
                uint64_t v369 = v373 & v368;
                uint64_t v371 = *(int32x2_t *****)(v366 + 16 * v369);
                if (v718 == v371)
                {
                  unsigned int v370 = (int32x2_t *****)(v366 + 16 * v369);
                  goto LABEL_655;
                }
              }
            }
            *((unsigned char *)v364 + 17) &= ~1u;
          }
        }
      }
    }
    (*v653)[2] &= 7uLL;
    uint64_t v188 = v632 + 1;
    if (v632 + 1 != (unint64_t *)v630) {
      continue;
    }
    break;
  }
LABEL_398:
  if (!v706) {
    goto LABEL_399;
  }
  unsigned int v381 = (unint64_t *)v705;
  int v624 = (char *)v705 + 8 * v706;
  uint64_t v623 = (uint64_t)(v114 + 6);
  uint64_t v622 = v114 + 48;
  while (2)
  {
    unint64_t v628 = v381;
    uint64_t v383 = *(void *)(*v381 - 64);
    uint64_t v647 = *(llvm::IntegerType ***)v383;
    unint64_t v640 = (unint64_t)*(unsigned int *)(*(void *)v383 + 8) >> 11;
    v717.n128_u64[0] = *v381;
    uint64_t v382 = v717.n128_u64[0];
    uint64_t v384 = (uint64_t **)sub_1CCE9282C((uint64_t)&v702, (uint64_t *)&v717);
    uint64_t v644 = **v384;
    long long v385 = *(llvm::CastInst **)(v383 - 32);
    uint64_t v386 = *(llvm::CastInst **)(v382 - 32);
    uint64_t v387 = sub_1CD780DF4((uint64_t)&v680, v383);
    uint64_t v388 = 0;
    uint64_t v389 = 0;
    uint64_t v390 = &v681;
    if (v680)
    {
      uint64_t v391 = 1;
    }
    else
    {
      uint64_t v390 = (uint64_t *)v681;
      uint64_t v391 = v682;
    }
    uint64_t v652 = &v390[4 * v391];
    uint64_t v654 = v387;
    uint64_t v392 = v384[1];
    uint64_t v649 = v384;
    unint64_t v638 = (unint64_t)((char *)v384[2] - (char *)v392) >> 3;
    uint64_t v393 = *v392;
    unsigned int v631 = (v385 >> 4) ^ (v385 >> 9);
    uint64_t v633 = v383 + 24;
    uint64_t v634 = v385;
    unsigned int v629 = (v383 >> 4) ^ (v383 >> 9);
    while (2)
    {
      uint64_t v657 = v393;
      v394 = (llvm::PointerType *)llvm::IntegerType::get(*v647, (llvm::LLVMContext *)(8 * v393));
      int v395 = v394;
      uint64_t v396 = v383;
      uint64_t v397 = **(void **)(v383 - 32);
      unsigned int v398 = *(_DWORD *)(v397 + 8);
      if ((v398 & 0xFE) == 0x12) {
        unsigned int v398 = *(_DWORD *)(**(void **)(v397 + 16) + 8);
      }
      unint64_t v399 = (llvm::Value *)llvm::PointerType::get(v394, (llvm::Type *)(v398 >> 8));
      uint64_t v400 = **(void **)(v382 - 32);
      unsigned int v401 = *(_DWORD *)(v400 + 8);
      if ((v401 & 0xFE) == 0x12) {
        unsigned int v401 = *(_DWORD *)(**(void **)(v400 + 16) + 8);
      }
      uint64_t v402 = (llvm::Value *)llvm::PointerType::get(v395, (llvm::Type *)(v401 >> 8));
      if (v652 != (uint64_t *)v654)
      {
        uint64_t v403 = *(void **)(*(void *)(v654 + 8) + 8 * v388);
        goto LABEL_734;
      }
      uint64_t v693 = *(void *)(v396 + 40);
      uint64_t v694 = v633;
      uint64_t v404 = *(unsigned __int8 **)(v396 + 48);
      long long v669 = v404;
      if (v404)
      {
        llvm::MetadataTracking::track((uint64_t)&v669, v404, 2);
        uint64_t v405 = (uint64_t)v669;
      }
      else
      {
        uint64_t v405 = 0;
      }
      sub_1CB8461A4((uint64_t)&v689, 0, v405);
      if (v669)
      {
        int v493 = *v669;
        if ((v493 - 4) > 0x1E)
        {
          if ((v493 - 3) >= 0xFFFFFFFE) {
            uint64_t v499 = v669;
          }
          else {
            uint64_t v499 = 0;
          }
          if ((v493 - 3) < 0xFFFFFFFE)
          {
            if (v493 == 3) {
              *((void *)v669 + 1) = 0;
            }
            goto LABEL_696;
          }
          unint64_t v495 = (unint64_t)(v499 + 8);
        }
        else
        {
          if ((v669[1] & 0x7F) != 2 && !*((_DWORD *)v669 + 3)) {
            goto LABEL_696;
          }
          uint64_t v494 = *((void *)v669 + 2);
          if ((v494 & 4) == 0) {
            goto LABEL_696;
          }
          unint64_t v495 = v494 & 0xFFFFFFFFFFFFFFF8;
          if (!v495) {
            goto LABEL_696;
          }
        }
        v717.n128_u64[0] = (unint64_t)&v669;
        sub_1CC5FA668(v495 + 16, &v717);
      }
LABEL_696:
      uint64_t v406 = **(void **)(v396 - 32);
      unsigned int v407 = *(_DWORD *)(v406 + 8);
      if ((v407 & 0xFE) == 0x12) {
        unsigned int v407 = *(_DWORD *)(**(void **)(v406 + 16) + 8);
      }
      if (v407 < 0x100) {
        goto LABEL_707;
      }
      unsigned int v408 = v407 >> 8;
      uint64_t v409 = *((unsigned int *)__dst + 128);
      uint64_t v410 = __dst[63];
      if (v409)
      {
        uint64_t v410 = __dst[63];
        unint64_t v411 = *((unsigned int *)__dst + 128);
        do
        {
          unint64_t v412 = v411 >> 1;
          uint64_t v413 = v410 + 16 * (v411 >> 1);
          unsigned int v414 = *(_DWORD *)(v413 + 8);
          uint64_t v415 = v413 + 16;
          v411 += ~(v411 >> 1);
          if (v414 < v408) {
            uint64_t v410 = v415;
          }
          else {
            unint64_t v411 = v412;
          }
        }
        while (v411);
      }
      if (v410 == __dst[63] + 16 * v409 || *(_DWORD *)(v410 + 8) != v408) {
LABEL_707:
      }
        uint64_t v410 = __dst[63];
      unsigned int v416 = *(_DWORD *)(v410 + 12);
      unsigned int v663 = v416;
      if (v416 > 0x40) {
        operator new[]();
      }
      if (v416) {
        unint64_t v417 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v416;
      }
      else {
        unint64_t v417 = 0;
      }
      unint64_t v662 = v417 & v389;
      if ((*((unsigned char *)v634 + 23) & 0x10) != 0)
      {
        uint64_t v418 = ***(void ***)v634;
        uint64_t v419 = *(void *)(v418 + 152);
        uint64_t v420 = *(unsigned int *)(v418 + 168);
        if (!v420) {
          goto LABEL_718;
        }
        LODWORD(v421) = (v420 - 1) & v631;
        unint64_t v422 = (llvm::CastInst **)(v419 + 16 * v421);
        int v423 = *v422;
        if (*v422 != v634)
        {
          int v424 = 1;
          while (v423 != (llvm::CastInst *)-4096)
          {
            int v425 = v421 + v424++;
            uint64_t v421 = v425 & (v420 - 1);
            int v423 = *(llvm::CastInst **)(v419 + 16 * v421);
            if (v423 == v634)
            {
              unint64_t v422 = (llvm::CastInst **)(v419 + 16 * v421);
              goto LABEL_719;
            }
          }
LABEL_718:
          unint64_t v422 = (llvm::CastInst **)(v419 + 16 * v420);
        }
LABEL_719:
        uint64_t v426 = v422[1];
        uint64_t v429 = *(void *)v426;
        size_t v428 = (char *)v426 + 16;
        uint64_t v427 = v429;
      }
      else
      {
        uint64_t v427 = 0;
        size_t v428 = &byte_1CFBCE98E;
      }
      __int16 v672 = 773;
      long long v669 = (unsigned __int8 *)v428;
      uint64_t v670 = v427;
      unint64_t v671 = ".";
      unsigned int v430 = sub_1CCE92898((uint64_t *)&v689, (uint64_t)v658, v634, (llvm::LLVMContext *)&v662, v399, (uint64_t)&v669);
      unint64_t v431 = *(unsigned __int16 *)(v396 + 18);
      if ((*(unsigned char *)(v396 + 23) & 0x10) != 0)
      {
        uint64_t v432 = ***(void ***)v396;
        uint64_t v433 = *(void *)(v432 + 152);
        uint64_t v434 = *(unsigned int *)(v432 + 168);
        if (!v434) {
          goto LABEL_727;
        }
        LODWORD(v435) = (v434 - 1) & v629;
        unint64_t v436 = (uint64_t *)(v433 + 16 * v435);
        uint64_t v437 = *v436;
        if (*v436 != v396)
        {
          int v438 = 1;
          while (v437 != -4096)
          {
            int v439 = v435 + v438++;
            uint64_t v435 = v439 & (v434 - 1);
            uint64_t v437 = *(void *)(v433 + 16 * v435);
            if (v437 == v396)
            {
              unint64_t v436 = (uint64_t *)(v433 + 16 * v435);
              goto LABEL_728;
            }
          }
LABEL_727:
          unint64_t v436 = (uint64_t *)(v433 + 16 * v434);
        }
LABEL_728:
        uint64_t v440 = (void *)v436[1];
        uint64_t v443 = *v440;
        size_t v442 = (char *)(v440 + 2);
        uint64_t v441 = v443;
      }
      else
      {
        uint64_t v441 = 0;
        size_t v442 = &byte_1CFBCE98E;
      }
      __int16 v668 = 261;
      unint64_t v444 = 63 - __clz(((1 << (v431 >> 1)) | v389) & -((1 << (v431 >> 1)) | v389));
      uint64_t v666 = v442;
      uint64_t v667 = v441;
      int v445 = (char *)operator new(0x60uLL);
      *((_DWORD *)v445 + 13) = *((_DWORD *)v445 + 13) & 0x38000000 | 1;
      uint64_t v403 = v445 + 32;
      *(void *)int v445 = 0;
      *((void *)v445 + 1) = 0;
      *((void *)v445 + 2) = 0;
      *((void *)v445 + 3) = v445 + 32;
      __int16 v720 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v445 + 32), (uint64_t)v395, (uint64_t)v430, (const char **)&v717, 0, v444, 0);
      (*(void (**)(void, void *, char **, uint64_t, uint64_t))(*(void *)v695 + 16))(v695, v403, &v666, v693, v694);
      if (DWORD2(v689))
      {
        uint64_t v491 = v689;
        uint64_t v492 = v689 + 16 * DWORD2(v689);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v403, *(_DWORD *)v491, *(llvm::MDNode **)(v491 + 8));
          v491 += 16;
        }
        while (v491 != v492);
      }
      if (v663 >= 0x41 && v662) {
        MEMORY[0x1D25D9CB0](v662, 0x1000C8000313F17);
      }
      v717.n128_u64[0] = 0x190000000ALL;
      llvm::Instruction::copyMetadata((uint64_t)v403, v396, (int *)&v717, 2);
LABEL_734:
      uint64_t v693 = *(void *)(v382 + 40);
      uint64_t v694 = v382 + 24;
      uint64_t v446 = *(unsigned __int8 **)(v382 + 48);
      long long v669 = v446;
      if (v446)
      {
        llvm::MetadataTracking::track((uint64_t)&v669, v446, 2);
        uint64_t v447 = (uint64_t)v669;
      }
      else
      {
        uint64_t v447 = 0;
      }
      sub_1CB8461A4((uint64_t)&v689, 0, v447);
      if (v669)
      {
        int v488 = *v669;
        if ((v488 - 4) > 0x1E)
        {
          if ((v488 - 3) >= 0xFFFFFFFE) {
            uint64_t v498 = v669;
          }
          else {
            uint64_t v498 = 0;
          }
          if ((v488 - 3) < 0xFFFFFFFE)
          {
            if (v488 == 3) {
              *((void *)v669 + 1) = 0;
            }
            goto LABEL_737;
          }
          unint64_t v490 = (unint64_t)(v498 + 8);
        }
        else
        {
          if ((v669[1] & 0x7F) != 2 && !*((_DWORD *)v669 + 3)) {
            goto LABEL_737;
          }
          uint64_t v489 = *((void *)v669 + 2);
          if ((v489 & 4) == 0) {
            goto LABEL_737;
          }
          unint64_t v490 = v489 & 0xFFFFFFFFFFFFFFF8;
          if (!v490) {
            goto LABEL_737;
          }
        }
        v717.n128_u64[0] = (unint64_t)&v669;
        sub_1CC5FA668(v490 + 16, &v717);
      }
LABEL_737:
      uint64_t v448 = **(void **)(v382 - 32);
      unsigned int v449 = *(_DWORD *)(v448 + 8);
      if ((v449 & 0xFE) == 0x12) {
        unsigned int v449 = *(_DWORD *)(**(void **)(v448 + 16) + 8);
      }
      if (v449 < 0x100) {
        goto LABEL_748;
      }
      unsigned int v450 = v449 >> 8;
      uint64_t v451 = *((unsigned int *)__dst + 128);
      uint64_t v452 = __dst[63];
      if (v451)
      {
        uint64_t v452 = __dst[63];
        unint64_t v453 = *((unsigned int *)__dst + 128);
        do
        {
          unint64_t v454 = v453 >> 1;
          uint64_t v455 = v452 + 16 * (v453 >> 1);
          unsigned int v456 = *(_DWORD *)(v455 + 8);
          uint64_t v457 = v455 + 16;
          v453 += ~(v453 >> 1);
          if (v456 < v450) {
            uint64_t v452 = v457;
          }
          else {
            unint64_t v453 = v454;
          }
        }
        while (v453);
      }
      if (v452 == __dst[63] + 16 * v451 || *(_DWORD *)(v452 + 8) != v450) {
LABEL_748:
      }
        uint64_t v452 = __dst[63];
      unsigned int v458 = *(_DWORD *)(v452 + 12);
      unsigned int v661 = v458;
      if (v458 > 0x40) {
        operator new[]();
      }
      if (v458) {
        unint64_t v459 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v458;
      }
      else {
        unint64_t v459 = 0;
      }
      unint64_t v660 = v459 & v389;
      if ((*((unsigned char *)v386 + 23) & 0x10) != 0)
      {
        uint64_t v460 = ***(void ***)v386;
        uint64_t v461 = *(void *)(v460 + 152);
        uint64_t v462 = *(unsigned int *)(v460 + 168);
        if (!v462) {
          goto LABEL_759;
        }
        LODWORD(v463) = (v462 - 1) & ((v386 >> 4) ^ (v386 >> 9));
        uint64_t v464 = (llvm::CastInst **)(v461 + 16 * v463);
        unint64_t v465 = *v464;
        if (*v464 != v386)
        {
          int v466 = 1;
          while (v465 != (llvm::CastInst *)-4096)
          {
            int v467 = v463 + v466++;
            uint64_t v463 = v467 & (v462 - 1);
            unint64_t v465 = *(llvm::CastInst **)(v461 + 16 * v463);
            if (v465 == v386)
            {
              uint64_t v464 = (llvm::CastInst **)(v461 + 16 * v463);
              goto LABEL_760;
            }
          }
LABEL_759:
          uint64_t v464 = (llvm::CastInst **)(v461 + 16 * v462);
        }
LABEL_760:
        unsigned int v468 = v464[1];
        uint64_t v471 = *(void *)v468;
        int v470 = (char *)v468 + 16;
        uint64_t v469 = v471;
      }
      else
      {
        uint64_t v469 = 0;
        int v470 = &byte_1CFBCE98E;
      }
      __int16 v672 = 773;
      long long v669 = (unsigned __int8 *)v470;
      uint64_t v670 = v469;
      unint64_t v671 = ".";
      uint64_t v472 = sub_1CCE92898((uint64_t *)&v689, (uint64_t)v658, v386, (llvm::LLVMContext *)&v660, v402, (uint64_t)&v669);
      unint64_t v473 = *(unsigned __int16 *)(v382 + 18);
      int v474 = (char *)operator new(0x80uLL);
      uint64_t v475 = v474;
      *((_DWORD *)v474 + 21) = *((_DWORD *)v474 + 21) & 0x38000000 | 2;
      *(void *)int v474 = 0;
      *((void *)v474 + 2) = 0;
      *((void *)v474 + 1) = 0;
      *((void *)v474 + 5) = 0;
      *((void *)v474 + 6) = 0;
      *((void *)v474 + 4) = 0;
      unint64_t v476 = (unsigned __int8 **)(v474 + 32);
      *((void *)v474 + 8) = **(void **)*v403 + 1576;
      unsigned int v477 = (llvm::Instruction *)(v474 + 64);
      *((void *)v474 + 3) = v474 + 64;
      *((void *)v474 + 7) = v474 + 64;
      *((void *)v474 + 9) = 0;
      v474[80] = 61;
      v474[81] = 0;
      *((_WORD *)v474 + 41) = 0;
      *((_DWORD *)v474 + 21) = 2;
      *(_OWORD *)(v474 + 88) = 0u;
      *(_OWORD *)(v474 + 104) = 0u;
      *((_DWORD *)v474 + 30) = 0;
      *(void *)int v474 = v403;
      uint64_t v480 = v403[1];
      unsigned int v479 = v403 + 1;
      uint64_t v478 = v480;
      *((void *)v474 + 1) = v480;
      if (v480) {
        *(void *)(v478 + 16) = v474 + 8;
      }
      *((void *)v474 + 2) = v479;
      *unsigned int v479 = v474;
      if (*((void *)v474 + 4))
      {
        **((void **)v474 + 6) = *((void *)v474 + 5);
        uint64_t v500 = *((void *)v474 + 5);
        if (v500) {
          *(void *)(v500 + 16) = *((void *)v474 + 6);
        }
      }
      *unint64_t v476 = v472;
      uint64_t v383 = v396;
      if (v472)
      {
        uint64_t v483 = *((void *)v472 + 1);
        uint64_t v482 = (unsigned __int8 ***)(v472 + 8);
        uint64_t v481 = v483;
        *((void *)v474 + 5) = v483;
        if (v483) {
          *(void *)(v481 + 16) = v474 + 40;
        }
        *((void *)v474 + 6) = v482;
        *uint64_t v482 = v476;
      }
      *((_WORD *)v474 + 41) = (126
                             - 2
                             * __clz(((1 << (v473 >> 1)) | v389) & -((1 << (v473 >> 1)) | v389))) & 0x7E;
      v474[124] = 1;
      __int16 v720 = 257;
      (*(void (**)(void, llvm::Instruction *, __n128 *, uint64_t, uint64_t))(*(void *)v695 + 16))(v695, v477, &v717, v693, v694);
      if (DWORD2(v689))
      {
        uint64_t v496 = v689;
        uint64_t v497 = v689 + 16 * DWORD2(v689);
        do
        {
          llvm::Instruction::setMetadata(v477, *(_DWORD *)v496, *(llvm::MDNode **)(v496 + 8));
          v496 += 16;
        }
        while (v496 != v497);
      }
      if (v661 >= 0x41 && v660) {
        MEMORY[0x1D25D9CB0](v660, 0x1000C8000313F17);
      }
      v717.n128_u64[0] = 0x190000000ALL;
      llvm::Instruction::copyMetadata((uint64_t)v477, v382, (int *)&v717, 2);
      int v484 = *((_DWORD *)v475 + 21);
      if ((v484 & 0x40000000) != 0) {
        unsigned int v485 = (char *)*((void *)v475 + 7);
      }
      else {
        unsigned int v485 = (char *)v477 - 32 * (v484 & 0x7FFFFFF);
      }
      v717.n128_u64[0] = v389 + v644;
      v717.n128_u64[1] = v389 + v644 + v657;
      uint64_t v718 = (int32x2_t ****)((unint64_t)(v485 + 32) & 0xFFFFFFFFFFFFFFFBLL);
      sub_1CBC0D590((uint64_t)&__src, &v717);
      if (v388 != (v638 & ~((int)v638 >> 31)))
      {
        unsigned int v486 = v649[1];
        unint64_t v487 = v640;
        if ((int)v388 + 1 < (int)v638) {
          unint64_t v487 = v486[v388 + 1];
        }
        uint64_t v389 = v486[v388];
        uint64_t v393 = v487 - v389;
        ++v388;
        continue;
      }
      break;
    }
    if (v652 != (uint64_t *)v654) {
      goto LABEL_868;
    }
    if (*((unsigned char *)v634 + 16) == 59) {
      unint64_t v501 = (unint64_t)v634;
    }
    else {
      unint64_t v501 = 0;
    }
    v717.n128_u64[0] = v501;
    if (!v501)
    {
      long long v669 = 0;
      uint64_t v502 = llvm::Value::stripInBoundsOffsets((uint64_t)v634, (void (*)(uint64_t, uint64_t))nullsub_608, (uint64_t)&v666);
      if (*(unsigned char *)(v502 + 16) == 59) {
        unsigned int v503 = (unsigned __int8 *)v502;
      }
      else {
        unsigned int v503 = 0;
      }
      long long v669 = v503;
      if (v503)
      {
        unsigned int v504 = (__n128 *)&v669;
        goto LABEL_867;
      }
      goto LABEL_868;
    }
    uint64_t v505 = *((void *)&v711 + 1);
    uint64_t v506 = DWORD1(v712);
    if (*((void *)&v711 + 1) != (void)v711)
    {
      unsigned int v510 = v712;
      goto LABEL_845;
    }
    if (!DWORD1(v712))
    {
LABEL_842:
      unsigned int v510 = v712;
      if (DWORD1(v712) < v712)
      {
        ++DWORD1(v712);
        *(void *)(*((void *)&v711 + 1) + 8 * v506) = v501;
        goto LABEL_866;
      }
LABEL_845:
      if (3 * v510 <= 4 * (DWORD1(v712) - DWORD2(v712)))
      {
        if (v510 >= 0x40) {
          v510 *= 2;
        }
        else {
          unsigned int v510 = 128;
        }
      }
      else if (v510 - DWORD1(v712) >= v510 >> 3)
      {
        goto LABEL_847;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v711, v510);
      unsigned int v510 = v712;
      uint64_t v505 = *((void *)&v711 + 1);
LABEL_847:
      unsigned int v511 = v510 - 1;
      unsigned int v512 = (v510 - 1) & ((v501 >> 4) ^ (v501 >> 9));
      unint64_t v513 = (unint64_t *)(v505 + 8 * v512);
      unint64_t v514 = *v513;
      if (*v513 == -1)
      {
        int v515 = 0;
LABEL_859:
        if (v515) {
          int v519 = v515;
        }
        else {
          int v519 = v513;
        }
        if (*v519 != v501)
        {
          if (*v519 == -2) {
            --DWORD2(v712);
          }
          else {
            ++DWORD1(v712);
          }
          *int v519 = v501;
        }
      }
      else
      {
        int v515 = 0;
        int v516 = 1;
        while (v514 != v501)
        {
          if (v515) {
            BOOL v517 = 0;
          }
          else {
            BOOL v517 = v514 == -2;
          }
          if (v517) {
            int v515 = v513;
          }
          unsigned int v518 = v512 + v516++;
          unsigned int v512 = v518 & v511;
          unint64_t v513 = (unint64_t *)(v505 + 8 * (v518 & v511));
          unint64_t v514 = *v513;
          if (*v513 == -1) {
            goto LABEL_859;
          }
        }
      }
      goto LABEL_866;
    }
    unsigned int v507 = 0;
    uint64_t v508 = 8 * DWORD1(v712);
    uint64_t v509 = (unint64_t *)*((void *)&v711 + 1);
    while (*v509 != v501)
    {
      if (*v509 == -2) {
        unsigned int v507 = v509;
      }
      ++v509;
      v508 -= 8;
      if (!v508)
      {
        if (!v507) {
          goto LABEL_842;
        }
        *unsigned int v507 = v501;
        --DWORD2(v712);
        break;
      }
    }
LABEL_866:
    unsigned int v504 = &v717;
LABEL_867:
    sub_1CCE93F38(v623, (uint64_t *)v504);
LABEL_868:
    uint64_t v520 = *(void *)(v396 + 8);
    if (v520 && !*(void *)(v520 + 8))
    {
      __n128 v717 = (__n128)4uLL;
      uint64_t v718 = (int32x2_t ****)v396;
      if (v396 != -8192 && v396 != -4096 && v396) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v717);
      }
      uint64_t v521 = *(unsigned int *)(a1 + 200);
      unint64_t v522 = *(void *)(a1 + 192);
      if (v521 >= *(_DWORD *)(a1 + 204))
      {
        unint64_t v561 = v521 + 1;
        BOOL v562 = v522 + 24 * v521 > (unint64_t)&v717;
        if (v522 <= (unint64_t)&v717 && v562)
        {
          uint64_t v564 = (char *)&v717 - v522;
          sub_1CC0BD844(v622, v561);
          unint64_t v522 = *(void *)v622;
          uint64_t v523 = (__n128 *)&v564[*(void *)v622];
        }
        else
        {
          sub_1CC0BD844(v622, v561);
          unint64_t v522 = *(void *)v622;
          uint64_t v523 = &v717;
        }
      }
      else
      {
        uint64_t v523 = &v717;
      }
      unsigned int v524 = *(_DWORD *)(a1 + 200);
      __int16 v525 = (unint64_t *)(v522 + 24 * v524);
      *__int16 v525 = 4;
      v525[1] = 0;
      unint64_t v526 = v523[1].n128_u64[0];
      v525[2] = v526;
      if (v526 != -8192 && v526 != -4096)
      {
        if (v526)
        {
          unint64_t v527 = v523->n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
          v525[1] = *(void *)v527;
          *(void *)unint64_t v527 = v525;
          *__int16 v525 = v527 | 4;
          uint64_t v528 = (unint64_t *)v525[1];
          if (v528) {
            *uint64_t v528 = *v528 & 7 | (unint64_t)(v525 + 1);
          }
        }
      }
      *(_DWORD *)(a1 + 200) = v524 + 1;
      if (v718 != (int32x2_t ****)-8192 && v718 != (int32x2_t ****)-4096 && v718)
      {
        unint64_t v529 = v717.n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v717.n128_u64[0] & 0xFFFFFFFFFFFFFFF8) = v717.n128_u64[1];
        if (v717.n128_u64[1])
        {
          *(void *)v717.n128_u64[1] = *(void *)v717.n128_u64[1] & 7 | v529;
        }
        else
        {
          uint64_t v530 = v718;
          int v531 = ***v718;
          unint64_t v532 = (unint64_t)v531[303];
          if (v532 <= v529)
          {
            uint64_t v533 = v531[305].u32[0];
            if (v532 + 16 * v533 > v529)
            {
              unsigned int v534 = v533 - 1;
              LODWORD(v535) = v534 & ((v718 >> 4) ^ (v718 >> 9));
              uint64_t v536 = (int32x2_t *****)(v532 + 16 * v535);
              uint64_t v537 = *v536;
              if (v718 == *v536)
              {
LABEL_892:
                uint64_t *v536 = (int32x2_t ****)-8192;
                v531[304] = vadd_s32(v531[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v530 = v718;
              }
              else
              {
                int v538 = 1;
                while (v537 != (int32x2_t ****)-4096)
                {
                  int v539 = v535 + v538++;
                  uint64_t v535 = v539 & v534;
                  uint64_t v537 = *(int32x2_t *****)(v532 + 16 * v535);
                  if (v718 == v537)
                  {
                    uint64_t v536 = (int32x2_t *****)(v532 + 16 * v535);
                    goto LABEL_892;
                  }
                }
              }
              *((unsigned char *)v530 + 17) &= ~1u;
            }
          }
        }
      }
    }
    __n128 v717 = (__n128)4uLL;
    uint64_t v718 = (int32x2_t ****)v382;
    if (v382 != -8192 && v382 != -4096 && v382) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v717);
    }
    uint64_t v540 = *(unsigned int *)(a1 + 200);
    unint64_t v541 = *(void *)(a1 + 192);
    if (v540 >= *(_DWORD *)(a1 + 204))
    {
      unint64_t v559 = v540 + 1;
      BOOL v560 = v541 + 24 * v540 > (unint64_t)&v717;
      if (v541 > (unint64_t)&v717 || !v560)
      {
        sub_1CC0BD844(v622, v559);
        unint64_t v541 = *(void *)v622;
        goto LABEL_900;
      }
      uint64_t v563 = (char *)&v717 - v541;
      sub_1CC0BD844(v622, v559);
      unint64_t v541 = *(void *)v622;
      unsigned int v542 = (__n128 *)&v563[*(void *)v622];
    }
    else
    {
LABEL_900:
      unsigned int v542 = &v717;
    }
    unsigned int v543 = *(_DWORD *)(a1 + 200);
    uint64_t v544 = (unint64_t *)(v541 + 24 * v543);
    *uint64_t v544 = 4;
    v544[1] = 0;
    unint64_t v545 = v542[1].n128_u64[0];
    v544[2] = v545;
    if (v545 != -8192 && v545 != -4096)
    {
      if (v545)
      {
        unint64_t v546 = v542->n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
        v544[1] = *(void *)v546;
        *(void *)unint64_t v546 = v544;
        *uint64_t v544 = v546 | 4;
        uint64_t v547 = (unint64_t *)v544[1];
        if (v547) {
          *uint64_t v547 = *v547 & 7 | (unint64_t)(v544 + 1);
        }
      }
    }
    *(_DWORD *)(a1 + 200) = v543 + 1;
    if (v718 != (int32x2_t ****)-8192 && v718 != (int32x2_t ****)-4096 && v718)
    {
      unint64_t v548 = v717.n128_u64[0] & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v717.n128_u64[0] & 0xFFFFFFFFFFFFFFF8) = v717.n128_u64[1];
      if (v717.n128_u64[1])
      {
        *(void *)v717.n128_u64[1] = *(void *)v717.n128_u64[1] & 7 | v548;
      }
      else
      {
        uint64_t v549 = v718;
        int v550 = ***v718;
        unint64_t v551 = (unint64_t)v550[303];
        if (v551 <= v548)
        {
          uint64_t v552 = v550[305].u32[0];
          if (v551 + 16 * v552 > v548)
          {
            unsigned int v553 = v552 - 1;
            LODWORD(v554) = v553 & ((v718 >> 4) ^ (v718 >> 9));
            unint64_t v555 = (int32x2_t *****)(v551 + 16 * v554);
            int v556 = *v555;
            if (v718 == *v555)
            {
LABEL_917:
              *unint64_t v555 = (int32x2_t ****)-8192;
              v550[304] = vadd_s32(v550[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v549 = v718;
            }
            else
            {
              int v557 = 1;
              while (v556 != (int32x2_t ****)-4096)
              {
                int v558 = v554 + v557++;
                uint64_t v554 = v558 & v553;
                int v556 = *(int32x2_t *****)(v551 + 16 * v554);
                if (v718 == v556)
                {
                  unint64_t v555 = (int32x2_t *****)(v551 + 16 * v554);
                  goto LABEL_917;
                }
              }
            }
            *((unsigned char *)v549 + 17) &= ~1u;
          }
        }
      }
    }
    (*v649)[2] &= 7uLL;
    unsigned int v381 = v628 + 1;
    if (v628 + 1 != (unint64_t *)v624) {
      continue;
    }
    break;
  }
LABEL_399:
  uint64_t v184 = a3;
  uint64_t v185 = *(char **)(a3 + 16);
  uint64_t v186 = *(unsigned int *)(a3 + 24);
  if (v186)
  {
    uint64_t v565 = 0;
    unint64_t v566 = &v185[24 * v186];
    uint64_t v567 = 24 * v186;
    uint64_t v568 = 24 * v186 - 24;
    while (1)
    {
      uint64_t v187 = &v185[v565];
      if (*(void *)&v185[v565 + 16] <= 7uLL) {
        break;
      }
      v565 += 24;
      if (v567 == v565)
      {
        uint64_t v187 = v566;
        goto LABEL_946;
      }
    }
    if (v568 != v565)
    {
      uint64_t v569 = v187 + 40;
      uint64_t v570 = v567 - v565 - 24;
      do
      {
        if (*v569 >= 8uLL)
        {
          long long v571 = *((_OWORD *)v569 - 1);
          *((void *)v187 + 2) = *v569;
          *(_OWORD *)uint64_t v187 = v571;
          v187 += 24;
        }
        v569 += 3;
        v570 -= 24;
      }
      while (v570);
      uint64_t v185 = *v625;
    }
LABEL_946:
    uint64_t v184 = a3;
  }
  else
  {
    uint64_t v187 = *(char **)(a3 + 16);
  }
  unint64_t v572 = 0xAAAAAAAAAAAAAAABLL * ((v187 - v185) >> 3);
  *(_DWORD *)(v184 + 24) = v572;
  int v573 = DWORD2(__src);
  int v574 = v572;
  if (DWORD2(__src) + (unint64_t)v572 > *(unsigned int *)(v184 + 28)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (DWORD2(__src))
  {
    uint64_t v575 = &v185[24 * v572];
    uint64_t v576 = v184;
    memcpy(v575, (const void *)__src, 24 * DWORD2(__src));
    uint64_t v184 = v576;
    int v574 = *(_DWORD *)(v576 + 24);
    uint64_t v185 = *(char **)(v576 + 16);
  }
  unsigned int v577 = v574 + v573;
  *(_DWORD *)(v184 + 24) = v577;
  int v578 = &v185[24 * (int)v572];
  uint64_t v579 = 24 * v577 - 24 * (int)v572;
  if (v579 >= 48)
  {
    unint64_t v580 = &v185[24 * (int)v572];
    uint64_t v581 = v184;
    qsort(v580, v579 / 0x18uLL, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1CCEA0208);
    uint64_t v185 = *(char **)(v581 + 16);
    unsigned int v577 = *(_DWORD *)(v581 + 24);
  }
  v582 = &v185[24 * v577];
  uint64_t v583 = (v582 - v578) >> 3;
  uint64_t v584 = 0xAAAAAAAAAAAAAAABLL * v583;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * v583) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v578 - v185) >> 3))) {
    uint64_t v585 = 0xAAAAAAAAAAAAAAABLL * ((v578 - v185) >> 3);
  }
  else {
    uint64_t v585 = 0xAAAAAAAAAAAAAAABLL * v583;
  }
  if (v585 < 1)
  {
LABEL_960:
    sub_1CCEA0270(v185, v578, v582, 0xAAAAAAAAAAAAAAABLL * ((v578 - v185) >> 3), v584, 0, 0);
  }
  else
  {
    uint64_t v586 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    while (1)
    {
      uint64_t v587 = operator new(24 * v585, v586);
      if (v587) {
        break;
      }
      BOOL v588 = (unint64_t)v585 >= 2;
      uint64_t v585 = (unint64_t)v585 >> 1;
      if (!v588) {
        goto LABEL_960;
      }
    }
    uint64_t v589 = v587;
    sub_1CCEA0270(v185, v578, v582, 0xAAAAAAAAAAAAAAABLL * ((v578 - v185) >> 3), v584, v587, v585);
    operator delete(v589);
  }
  long long v590 = *(uint64_t **)(a1 + 568);
  uint64_t v591 = *(uint64_t **)(a1 + 576);
  if (v590 != v591)
  {
    int v592 = v712 - 1;
    if (*((void *)&v711 + 1) == (void)v711) {
      unsigned int v593 = DWORD1(v712);
    }
    else {
      unsigned int v593 = v712;
    }
    uint64_t v594 = *((void *)&v711 + 1) + 8 * v593;
    uint64_t v595 = *((void *)&v711 + 1);
    while (1)
    {
      uint64_t v596 = *v590;
      if (v595 == (void)v711)
      {
        if (DWORD1(v712))
        {
          uint64_t v597 = 0;
          while (*(void *)(v711 + v597) != v596)
          {
            v597 += 8;
            if (8 * DWORD1(v712) == v597)
            {
              unsigned int v598 = DWORD1(v712);
              goto LABEL_987;
            }
          }
          uint64_t v607 = (void *)(v711 + v597);
          unsigned int v598 = DWORD1(v712);
          uint64_t v595 = v711;
        }
        else
        {
          unsigned int v598 = 0;
LABEL_987:
          uint64_t v595 = v711;
          uint64_t v607 = (void *)(v711 + 8 * DWORD1(v712));
        }
      }
      else
      {
        unsigned int v599 = v592 & ((v596 >> 4) ^ (v596 >> 9));
        unsigned int v600 = (void *)(*((void *)&v711 + 1) + 8 * v599);
        uint64_t v601 = *v600;
        if (*v600 == -1)
        {
          int v602 = 0;
LABEL_989:
          if (v602) {
            unsigned int v600 = v602;
          }
          uint64_t v606 = *v600;
        }
        else
        {
          int v602 = 0;
          int v603 = 1;
          while (v601 != v596)
          {
            if (v602) {
              BOOL v604 = 0;
            }
            else {
              BOOL v604 = v601 == -2;
            }
            if (v604) {
              int v602 = v600;
            }
            unsigned int v605 = v599 + v603++;
            unsigned int v599 = v605 & v592;
            unsigned int v600 = (void *)(*((void *)&v711 + 1) + 8 * (v605 & v592));
            uint64_t v601 = *v600;
            if (*v600 == -1) {
              goto LABEL_989;
            }
          }
          uint64_t v606 = *v590;
        }
        uint64_t v607 = v606 == v596 ? v600 : (void *)v594;
        unsigned int v598 = DWORD1(v712);
        uint64_t v595 = *((void *)&v711 + 1);
      }
      if (v595 != (void)v711) {
        unsigned int v598 = v712;
      }
      uint64_t v608 = (void *)(v595 + 8 * v598);
      uint64_t v609 = v590 + 1;
      if (v607 != v608) {
        break;
      }
      ++v590;
      if (v609 == v591) {
        goto LABEL_1036;
      }
    }
    if (v609 != v591)
    {
      do
      {
        uint64_t v610 = *v609;
        uint64_t v611 = v711;
        if (*((void *)&v711 + 1) == (void)v711)
        {
          unsigned int v612 = DWORD1(v712);
          size_t v613 = (void *)(*((void *)&v711 + 1) + 8 * DWORD1(v712));
          if (DWORD1(v712))
          {
            uint64_t v614 = 0;
            while (*(void *)(*((void *)&v711 + 1) + v614) != v610)
            {
              v614 += 8;
              if (8 * DWORD1(v712) == v614) {
                goto LABEL_1021;
              }
            }
            size_t v613 = (void *)(*((void *)&v711 + 1) + v614);
          }
LABEL_1021:
          uint64_t v611 = *((void *)&v711 + 1);
        }
        else
        {
          unsigned int v615 = ((v610 >> 4) ^ (v610 >> 9)) & v592;
          size_t v613 = (void *)(*((void *)&v711 + 1) + 8 * v615);
          uint64_t v616 = *v613;
          if (*v613 == -1)
          {
            long long v617 = 0;
LABEL_1030:
            if (v617) {
              size_t v613 = v617;
            }
            unsigned int v612 = DWORD1(v712);
            if (*v613 != v610) {
              size_t v613 = (void *)(*((void *)&v711 + 1) + 8 * v712);
            }
          }
          else
          {
            long long v617 = 0;
            int v618 = 1;
            while (v616 != v610)
            {
              if (v617) {
                BOOL v619 = 0;
              }
              else {
                BOOL v619 = v616 == -2;
              }
              if (v619) {
                long long v617 = v613;
              }
              unsigned int v620 = v615 + v618++;
              unsigned int v615 = v620 & v592;
              size_t v613 = (void *)(*((void *)&v711 + 1) + 8 * (v620 & v592));
              uint64_t v616 = *v613;
              if (*v613 == -1) {
                goto LABEL_1030;
              }
            }
            unsigned int v612 = DWORD1(v712);
          }
        }
        if (*((void *)&v711 + 1) == v611) {
          unsigned int v621 = v612;
        }
        else {
          unsigned int v621 = v712;
        }
        if (v613 == (void *)(*((void *)&v711 + 1) + 8 * v621)) {
          *v590++ = v610;
        }
        ++v609;
      }
      while (v609 != v591);
      uint64_t v591 = *(uint64_t **)(a1 + 576);
    }
    if (v590 != v591) {
      *(void *)(a1 + 576) = v590;
    }
  }
LABEL_1036:
  if (__p) {
    operator delete(__p);
  }
  sub_1CD78170C((uint64_t)&v680);
  if (*((void *)&v711 + 1) != (void)v711) {
    free(*((void **)&v711 + 1));
  }
  BOOL v176 = 1;
  if ((long long *)__src != &v684) {
    free((void *)__src);
  }
  if ((v700[15] & 0x80000000) != 0) {
    operator delete(v699);
  }
  if ((long long *)v689 != &v690) {
    free((void *)v689);
  }
LABEL_376:
  if (v676 != v675) {
    free(v676);
  }
  char v177 = v702;
  if (v702 & 1 | v704)
  {
    int v178 = v703;
    if (v702)
    {
      int v178 = &v703;
      uint64_t v179 = 8;
    }
    else
    {
      uint64_t v179 = v704;
    }
    if (v179)
    {
      uint64_t v180 = 40 * v179;
      uint64_t v181 = v178 + 3;
      do
      {
        if ((*(v181 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v182 = (void *)*(v181 - 1);
          if (v182)
          {
            *uint64_t v181 = v182;
            operator delete(v182);
          }
        }
        v181 += 5;
        v180 -= 40;
      }
      while (v180);
      char v177 = v702;
    }
  }
  if ((v177 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v703, 8);
  }
  if (v705 != v707) {
    free(v705);
  }
  if (v708 != v710) {
    free(v708);
  }
  return v176;
}

uint64_t sub_1CCE9265C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  if (sub_1CCEA98F4(a1, a2, &v6)) {
    return v6;
  }
  if (*(unsigned char *)a1)
  {
    uint64_t v4 = a1 + 8;
    unsigned int v5 = 8;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 40 * v5;
}

uint64_t sub_1CCE926C0(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = **a2;
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = a1 + 120;
  *(void *)(a1 + 80) = a1 + 128;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(unsigned char *)(a1 + 102) = 7;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = &unk_1F2616E88;
  *(void *)(a1 + 128) = &unk_1F2640AC8;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 48) = a2[5];
  *(void *)(a1 + 56) = a2 + 3;
  unsigned int v5 = (unsigned __int8 *)a2[6];
  uint64_t v11 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v11, v5, 2);
    uint64_t v3 = (uint64_t)v11;
  }
  sub_1CB8461A4(a1, 0, v3);
  if (v11)
  {
    int v7 = *v11;
    if ((v7 - 4) > 0x1E)
    {
      if ((v7 - 3) >= 0xFFFFFFFE) {
        long long v10 = v11;
      }
      else {
        long long v10 = 0;
      }
      if ((v7 - 3) < 0xFFFFFFFE)
      {
        if (v7 == 3) {
          *((void *)v11 + 1) = 0;
        }
        return a1;
      }
      unint64_t v9 = (unint64_t)(v10 + 8);
    }
    else
    {
      if ((v11[1] & 0x7F) != 2 && !*((_DWORD *)v11 + 3)) {
        return a1;
      }
      uint64_t v8 = *((void *)v11 + 2);
      if ((v8 & 4) == 0) {
        return a1;
      }
      unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      if (!v9) {
        return a1;
      }
    }
    uint64_t v12 = &v11;
    sub_1CC5FA668(v9 + 16, &v12);
  }
  return a1;
}

void *sub_1CCE9282C(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = sub_1CCEA98F4(a1, *a2, &v7);
  unsigned int v5 = v7;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = sub_1CCEA99A4(a1, a2, v7);
    *unsigned int v5 = *a2;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5 + 1;
}

unsigned __int8 *sub_1CCE92898(uint64_t *a1, uint64_t a2, llvm::CastInst *this, llvm::LLVMContext *a4, llvm::Value *a5, uint64_t a6)
{
  PointerBitCastOrAddrSpaceCast = this;
  uint64_t v11 = a1;
  uint64_t v220 = *MEMORY[0x1E4F143B8];
  unsigned int v12 = *(_DWORD *)(*(void *)this + 8);
  if (*(void *)this) {
    BOOL v13 = *(_DWORD *)(*(void *)this + 8) == 15;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13 && !*(void *)(*(void *)this + 24))
  {
    uint64_t v131 = *((unsigned int *)a4 + 2);
    int v132 = a4;
    if (v131 >= 0x41)
    {
      int v133 = 0;
      int64_t v134 = (unint64_t)(v131 + 63) >> 6;
      do
      {
        BOOL v59 = v134-- < 1;
        if (v59) {
          break;
        }
        unint64_t v135 = *(void *)(*(void *)a4 + 8 * v134);
        v133 += __clz(v135);
      }
      while (!v135);
      int v136 = v131 | 0xFFFFFFC0;
      if ((v131 & 0x3F) == 0) {
        int v136 = 0;
      }
      if ((v131 - v133 - v136) > 0x40) {
        goto LABEL_271;
      }
      int v132 = *(llvm::LLVMContext **)a4;
    }
    if (!*(void *)v132) {
      goto LABEL_281;
    }
LABEL_271:
    int v137 = (llvm::ConstantInt *)a1[8];
    uint64_t v138 = *(void *)v137 + 1912;
    BOOL v139 = (const char *)llvm::ConstantInt::get(v137, a4, this);
    int v140 = *(unsigned __int8 *)(a6 + 32);
    if (v140 == 1)
    {
      unint64_t v214 = "sroa_idx";
      __int16 v141 = 259;
    }
    else
    {
      if (*(unsigned char *)(a6 + 32))
      {
        uint64_t v142 = *(void *)(a6 + 8);
        if (*(unsigned char *)(a6 + 33) == 1)
        {
          uint64_t v143 = *(const char **)a6;
        }
        else
        {
          LOBYTE(v140) = 2;
          uint64_t v143 = (const char *)a6;
        }
        unint64_t v214 = (char *)v143;
        uint64_t v215 = v142;
        *(void *)&long long v216 = "sroa_idx";
        LOBYTE(v217) = v140;
        HIBYTE(v217) = 3;
        goto LABEL_280;
      }
      __int16 v141 = 256;
    }
    __int16 v217 = v141;
LABEL_280:
    PointerBitCastOrAddrSpaceCast = sub_1CC278130(v11, v138, (uint64_t *)PointerBitCastOrAddrSpaceCast, v139, (uint64_t)&v214);
LABEL_281:
    int v144 = *(unsigned __int8 *)(a6 + 32);
    if (v144 == 1)
    {
      unsigned int v202 = "sroa_cast";
      __int16 v145 = 259;
    }
    else
    {
      if (*(unsigned char *)(a6 + 32))
      {
        uint64_t v146 = *(char **)(a6 + 8);
        if (*(unsigned char *)(a6 + 33) == 1)
        {
          int v147 = *(const char **)a6;
        }
        else
        {
          LOBYTE(v144) = 2;
          int v147 = (const char *)a6;
        }
        unsigned int v202 = v147;
        unsigned int v203 = v146;
        uint64_t v204 = (uint64_t)"sroa_cast";
        LOBYTE(v206[0]) = v144;
        BYTE1(v206[0]) = 3;
        goto LABEL_290;
      }
      __int16 v145 = 256;
    }
    LOWORD(v206[0]) = v145;
LABEL_290:
    if (*(llvm::Value **)PointerBitCastOrAddrSpaceCast != a5)
    {
      if (*((unsigned __int8 *)PointerBitCastOrAddrSpaceCast + 16) <= 0x14u)
      {
        PointerBitCastOrAddrSpaceCast = (llvm::Instruction *)(*(uint64_t (**)(uint64_t, llvm::Instruction *, llvm::Value *))(*(void *)v11[9] + 240))(v11[9], PointerBitCastOrAddrSpaceCast, a5);
        if (PointerBitCastOrAddrSpaceCast) {
          BOOL v182 = *((unsigned __int8 *)PointerBitCastOrAddrSpaceCast + 16) >= 0x1Cu;
        }
        else {
          BOOL v182 = 0;
        }
        if (v182)
        {
          (*(void (**)(uint64_t, llvm::Instruction *, const char **, uint64_t, uint64_t))(*(void *)a1[10]
                                                                                                + 16))(a1[10], PointerBitCastOrAddrSpaceCast, &v202, a1[6], a1[7]);
          uint64_t v183 = *((unsigned int *)a1 + 2);
          if (v183)
          {
            uint64_t v184 = *a1;
            uint64_t v185 = *a1 + 16 * v183;
            do
            {
              llvm::Instruction::setMetadata(PointerBitCastOrAddrSpaceCast, *(_DWORD *)v184, *(llvm::MDNode **)(v184 + 8));
              v184 += 16;
            }
            while (v184 != v185);
          }
        }
      }
      else
      {
        __int16 v217 = 257;
        PointerBitCastOrAddrSpaceCast = llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(PointerBitCastOrAddrSpaceCast, a5, (const char **)&v214, 0, a5);
        (*(void (**)(uint64_t, llvm::Instruction *, const char **, uint64_t, uint64_t))(*(void *)v11[10] + 16))(v11[10], PointerBitCastOrAddrSpaceCast, &v202, v11[6], v11[7]);
        uint64_t v148 = *((unsigned int *)v11 + 2);
        if (v148)
        {
          uint64_t v176 = *v11;
          uint64_t v177 = *v11 + 16 * v148;
          do
          {
            llvm::Instruction::setMetadata(PointerBitCastOrAddrSpaceCast, *(_DWORD *)v176, *(llvm::MDNode **)(v176 + 8));
            v176 += 16;
          }
          while (v176 != v177);
        }
      }
    }
    return (unsigned __int8 *)PointerBitCastOrAddrSpaceCast;
  }
  unsigned int v202 = (const char *)v206;
  unsigned int v203 = (char *)v206;
  int v205 = 0;
  uint64_t v204 = 0x100000004;
  v206[0] = this;
  uint64_t v211 = (uint64_t *)v213;
  uint64_t v212 = 0x400000000;
  unsigned int v201 = *((_DWORD *)a4 + 2);
  if (v201 > 0x40) {
    operator new[]();
  }
  uint64_t __dst = 0;
  uint64_t v197 = (llvm::Type *)**((void **)a5 + 2);
  uint64_t v191 = 0;
  unint64_t v192 = llvm::PointerType::get(v197, (llvm::Type *)(v12 >> 8));
  uint64_t v196 = 0;
  unint64_t v194 = 0;
LABEL_9:
  while (2)
  {
    do
    {
      int v15 = *((unsigned __int8 *)PointerBitCastOrAddrSpaceCast + 16);
      if (v15 != 62 && (v15 != 5 || *((_WORD *)PointerBitCastOrAddrSpaceCast + 9) != 34)) {
        break;
      }
      DWORD2(v208) = *((_DWORD *)a4 + 2);
      if (DWORD2(v208) > 0x40) {
        operator new[]();
      }
      *(void *)&long long v208 = 0;
      int v16 = *((_DWORD *)PointerBitCastOrAddrSpaceCast + 5);
      if ((v16 & 0x40000000) != 0)
      {
        int v18 = (char *)*((void *)PointerBitCastOrAddrSpaceCast - 1);
        uint64_t v17 = v16 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v17 = v16 & 0x7FFFFFF;
        int v18 = (char *)PointerBitCastOrAddrSpaceCast - 32 * v17;
      }
      unint64_t v214 = (char *)&v216;
      uint64_t v215 = 0x600000000;
      unint64_t v19 = 32 * v17 - 32;
      if (v19 >= 0xC1) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v20 = (llvm::Constant **)&v216;
      if (v17 != 1)
      {
        unsigned int v21 = (uint64_t *)(v18 + 32);
        uint64_t v22 = &v216;
        uint64_t v23 = 32 * v17 - 32;
        do
        {
          uint64_t v24 = *v21;
          v21 += 4;
          *(void *)uint64_t v22 = v24;
          uint64_t v22 = (long long *)((char *)v22 + 8);
          v23 -= 32;
        }
        while (v23);
        int v20 = (llvm::Constant **)v214;
      }
      LODWORD(v215) = v19 >> 5;
      if (*((unsigned char *)PointerBitCastOrAddrSpaceCast + 16) != 62 || PointerBitCastOrAddrSpaceCast == 0) {
        uint64_t v26 = 24;
      }
      else {
        uint64_t v26 = 64;
      }
      int v27 = llvm::GEPOperator::accumulateConstantOffset(*(void *)((char *)PointerBitCastOrAddrSpaceCast + v26), v20, (v19 >> 5), (llvm::DataLayout *)a2, (llvm::APInt *)&v208, 0, v14);
      if (v214 == (char *)&v216)
      {
        if (!v27) {
          goto LABEL_77;
        }
      }
      else
      {
        free(v214);
        if (!v27) {
          goto LABEL_77;
        }
      }
      uint64_t v28 = *((unsigned int *)a4 + 2);
      if (v28 >= 0x41)
      {
        uint64_t v117 = 0;
        unsigned int v118 = *(unint64_t **)a4;
        uint64_t v119 = (uint64_t *)v208;
        unint64_t v120 = (unint64_t)(v28 + 63) >> 6;
        unint64_t v121 = v120;
        do
        {
          uint64_t v122 = *v119++;
          unint64_t v123 = v122 + *v118;
          BOOL v124 = v123 + 1 <= *v118;
          if (v117)
          {
            ++v123;
            uint64_t v117 = v124;
          }
          else
          {
            uint64_t v117 = v123 < *v118;
          }
          *v118++ = v123;
          --v121;
        }
        while (v121);
        *(void *)(*(void *)a4 + 8 * (v120 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
      }
      else
      {
        if (v28) {
          unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
        }
        else {
          unint64_t v29 = 0;
        }
        *(void *)a4 = v29 & (*(void *)a4 + v208);
      }
      int v30 = *((_DWORD *)PointerBitCastOrAddrSpaceCast + 5);
      if ((v30 & 0x40000000) != 0) {
        uint64_t v31 = (llvm::Instruction **)*((void *)PointerBitCastOrAddrSpaceCast - 1);
      }
      else {
        uint64_t v31 = (llvm::Instruction **)((char *)PointerBitCastOrAddrSpaceCast - 32 * (v30 & 0x7FFFFFF));
      }
      PointerBitCastOrAddrSpaceCast = *v31;
      long long v32 = v203;
      uint64_t v33 = HIDWORD(v204);
      if (v203 == v202)
      {
        if (HIDWORD(v204))
        {
          unsigned int v34 = 0;
          uint64_t v35 = 8 * HIDWORD(v204);
          unint64_t v36 = v203;
          while (*(llvm::Instruction **)v36 != PointerBitCastOrAddrSpaceCast)
          {
            if (*(void *)v36 == -2) {
              unsigned int v34 = (llvm::Instruction **)v36;
            }
            v36 += 8;
            v35 -= 8;
            if (!v35)
            {
              if (!v34) {
                goto LABEL_44;
              }
              uint64_t *v34 = PointerBitCastOrAddrSpaceCast;
              --v205;
              goto LABEL_68;
            }
          }
          goto LABEL_77;
        }
LABEL_44:
        unsigned int v37 = v204;
        if (HIDWORD(v204) < v204)
        {
          ++HIDWORD(v204);
          *(void *)&v203[8 * v33] = PointerBitCastOrAddrSpaceCast;
LABEL_68:
          char v47 = 1;
          goto LABEL_78;
        }
      }
      else
      {
        unsigned int v37 = v204;
      }
      if (3 * v37 <= 4 * (HIDWORD(v204) - v205))
      {
        if (v37 >= 0x40) {
          v37 *= 2;
        }
        else {
          unsigned int v37 = 128;
        }
      }
      else if (v37 - HIDWORD(v204) >= v37 >> 3)
      {
        goto LABEL_49;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v202, v37);
      unsigned int v37 = v204;
      long long v32 = v203;
LABEL_49:
      unsigned int v38 = v37 - 1;
      unsigned int v39 = (v37 - 1) & ((PointerBitCastOrAddrSpaceCast >> 4) ^ (PointerBitCastOrAddrSpaceCast >> 9));
      BOOL v40 = &v32[8 * v39];
      unsigned int v41 = *(llvm::Instruction **)v40;
      if (*(void *)v40 == -1)
      {
        uint64_t v42 = 0;
LABEL_61:
        if (v42) {
          char v46 = v42;
        }
        else {
          char v46 = (llvm::Instruction **)v40;
        }
        if (*v46 != PointerBitCastOrAddrSpaceCast)
        {
          if (*v46 == (llvm::Instruction *)-2) {
            --v205;
          }
          else {
            ++HIDWORD(v204);
          }
          *char v46 = PointerBitCastOrAddrSpaceCast;
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v42 = 0;
        int v43 = 1;
        while (v41 != PointerBitCastOrAddrSpaceCast)
        {
          if (v42) {
            BOOL v44 = 0;
          }
          else {
            BOOL v44 = v41 == (llvm::Instruction *)-2;
          }
          if (v44) {
            uint64_t v42 = (llvm::Instruction **)v40;
          }
          unsigned int v45 = v39 + v43++;
          unsigned int v39 = v45 & v38;
          BOOL v40 = &v32[8 * (v45 & v38)];
          unsigned int v41 = *(llvm::Instruction **)v40;
          if (*(void *)v40 == -1) {
            goto LABEL_61;
          }
        }
      }
LABEL_77:
      char v47 = 0;
LABEL_78:
      if (DWORD2(v208) >= 0x41 && (void)v208) {
        MEMORY[0x1D25D9CB0](v208, 0x1000C8000313F17);
      }
    }
    while ((v47 & 1) != 0);
    LODWORD(v212) = 0;
    unsigned int v199 = *((_DWORD *)a4 + 2);
    if (v199 > 0x40) {
      operator new[]();
    }
    uint64_t v198 = *(void **)a4;
    uint64_t v48 = *(void *)PointerBitCastOrAddrSpaceCast;
    unint64_t v49 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v11[8] + 1912), (llvm::Type *)(*(_DWORD *)(*(void *)PointerBitCastOrAddrSpaceCast + 8) >> 8));
    if (v48 == v49 && *((_DWORD *)v197 + 2) == 2061)
    {
      unsigned int v52 = 0;
      int v53 = v196;
      goto LABEL_109;
    }
    unint64_t v207 = 0;
    uint64_t v54 = **(unsigned __int8 ***)(v48 + 16);
    unint64_t v207 = (llvm::Type *)v54;
    unsigned int v55 = v54[8];
    int v53 = v196;
    if (v55 > 0x11) {
      goto LABEL_218;
    }
    if (((1 << v55) & 0xAC7F) != 0) {
      goto LABEL_90;
    }
    if (((1 << v55) & 0x30000) == 0)
    {
LABEL_218:
      if ((v55 & 0xFE) != 0x12 && v55 != 21)
      {
        unsigned int v52 = 0;
        goto LABEL_109;
      }
    }
    unsigned int v52 = 0;
    if (!llvm::Type::isSizedDerivedType((uint64_t)v54, 0)) {
      goto LABEL_109;
    }
LABEL_90:
    llvm::DataLayout::getGEPIndicesForOffset((llvm::DataLayout *)a2, &v207, (llvm::APInt *)&v198, (uint64_t)&v214);
    unsigned int v56 = v198;
    if (v199 >= 0x41)
    {
      int v57 = 0;
      int64_t v58 = ((unint64_t)v199 + 63) >> 6;
      do
      {
        BOOL v59 = v58-- < 1;
        if (v59) {
          break;
        }
        unint64_t v60 = v198[v58];
        v57 += __clz(v60);
      }
      while (!v60);
      unsigned int v61 = v199 | 0xFFFFFFC0;
      if ((v199 & 0x3F) == 0) {
        unsigned int v61 = 0;
      }
      if (v199 - v57 - v61 > 0x40)
      {
LABEL_99:
        unsigned int v52 = 0;
        goto LABEL_100;
      }
      unsigned int v56 = (void *)*v198;
    }
    if (v56) {
      goto LABEL_99;
    }
    if (v215)
    {
      uint64_t v83 = (llvm::LLVMContext *)v214;
      uint64_t v84 = 16 * v215;
      do
      {
        uint64_t v85 = llvm::ConstantInt::get((llvm::ConstantInt *)v11[8], v83, v50);
        if (v212 >= (unint64_t)HIDWORD(v212)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v211[v212] = (uint64_t)v85;
        LODWORD(v212) = v212 + 1;
        uint64_t v83 = (llvm::LLVMContext *)((char *)v83 + 16);
        v84 -= 16;
      }
      while (v84);
    }
    unsigned int v86 = v207;
    if (v207 == v197)
    {
      LODWORD(v103) = v212;
      goto LABEL_213;
    }
    unsigned int v87 = *(_DWORD *)(*(void *)PointerBitCastOrAddrSpaceCast + 8);
    if ((v87 & 0xFE) == 0x12) {
      unsigned int v87 = *(_DWORD *)(**(void **)(*(void *)PointerBitCastOrAddrSpaceCast + 16) + 8);
    }
    if (v87 < 0x100) {
      goto LABEL_179;
    }
    unsigned int v88 = v87 >> 8;
    uint64_t v89 = *(unsigned int *)(a2 + 240);
    uint64_t v90 = *(void *)(a2 + 232);
    if (v89)
    {
      uint64_t v90 = *(void *)(a2 + 232);
      unint64_t v91 = *(unsigned int *)(a2 + 240);
      do
      {
        unint64_t v92 = v91 >> 1;
        uint64_t v93 = v90 + 16 * (v91 >> 1);
        unsigned int v94 = *(_DWORD *)(v93 + 8);
        uint64_t v95 = v93 + 16;
        v91 += ~(v91 >> 1);
        if (v94 < v88) {
          uint64_t v90 = v95;
        }
        else {
          unint64_t v91 = v92;
        }
      }
      while (v91);
    }
    if (v90 == *(void *)(a2 + 232) + 16 * v89 || *(_DWORD *)(v90 + 8) != v88) {
LABEL_179:
    }
      uint64_t v90 = *(void *)(a2 + 232);
    int v96 = 0;
    unsigned int v193 = *(_DWORD *)(v90 + 12);
    while (2)
    {
      int v97 = *((unsigned __int8 *)v86 + 8);
      if (v97 == 17)
      {
        unsigned int v86 = (llvm::Type *)*((void *)v86 + 3);
        uint64_t v98 = llvm::IntegerType::get((llvm::IntegerType *)v11[8], (llvm::LLVMContext *)v193);
        uint64_t v99 = *(llvm::ConstantInt **)v98;
        unint64_t v100 = *(unsigned int *)(v98 + 8);
        goto LABEL_190;
      }
      if (v97 == 15) {
        break;
      }
      if ((v97 & 0xFE) == 0x12)
      {
        unsigned int v86 = (llvm::Type *)*((void *)v86 + 3);
        goto LABEL_189;
      }
      if (v97 == 16 && *((_DWORD *)v86 + 3))
      {
        unsigned int v86 = (llvm::Type *)**((void **)v86 + 2);
LABEL_189:
        uint64_t v101 = *(void *)v11[8];
        uint64_t v99 = *(llvm::ConstantInt **)(v101 + 1960);
        unint64_t v100 = *(unsigned int *)(v101 + 1968);
LABEL_190:
        DWORD2(v208) = v100 >> 8;
        if (v100 >> 8 >= 0x41) {
          operator new[]();
        }
        *(void *)&long long v208 = 0;
        uint64_t v102 = llvm::ConstantInt::get(v99, (llvm::LLVMContext *)&v208, v50);
        if (DWORD2(v208) >= 0x41 && (void)v208) {
          MEMORY[0x1D25D9CB0](v208, 0x1000C8000313F17);
        }
        uint64_t v11 = a1;
        if (v212 >= (unint64_t)HIDWORD(v212)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v211[v212] = (uint64_t)v102;
        LODWORD(v103) = v212 + 1;
        LODWORD(v212) = v212 + 1;
        ++v96;
        if (v86 == v197) {
          goto LABEL_213;
        }
        continue;
      }
      break;
    }
    LODWORD(v103) = v212;
    if (v86 != v197)
    {
      unint64_t v103 = (8 * v212 + 8 * (unint64_t)-v96) >> 3;
      LODWORD(v212) = v103;
    }
LABEL_213:
    int v53 = v196;
    unsigned int v52 = (unsigned __int8 *)PointerBitCastOrAddrSpaceCast;
    if (v103)
    {
      if (v103 != 1) {
        goto LABEL_229;
      }
      uint64_t v105 = *v211;
      uint64_t v106 = *(unsigned int *)(*v211 + 32);
      if (v106 > 0x40)
      {
        int v108 = 0;
        int64_t v109 = (unint64_t)(v106 + 63) >> 6;
        do
        {
          BOOL v59 = v109-- < 1;
          if (v59) {
            break;
          }
          unint64_t v110 = *(void *)(*(void *)(v105 + 24) + 8 * v109);
          v108 += __clz(v110);
        }
        while (!v110);
        int v111 = v106 | 0xFFFFFFC0;
        if ((v106 & 0x3F) == 0) {
          int v111 = 0;
        }
        unsigned int v52 = (unsigned __int8 *)PointerBitCastOrAddrSpaceCast;
        if (v108 + v111 != v106) {
          goto LABEL_229;
        }
      }
      else
      {
        unsigned int v52 = (unsigned __int8 *)PointerBitCastOrAddrSpaceCast;
        if (!*(void *)(v105 + 24)) {
          goto LABEL_100;
        }
LABEL_229:
        uint64_t v112 = **(void **)(*(void *)PointerBitCastOrAddrSpaceCast + 16);
        int v113 = *(unsigned __int8 *)(a6 + 32);
        if (*(unsigned char *)(a6 + 32))
        {
          if (v113 == 1)
          {
            *(void *)&long long v208 = "sroa_idx";
            char v114 = 1;
            LOBYTE(v113) = 3;
          }
          else
          {
            uint64_t v115 = *(void *)(a6 + 8);
            if (*(unsigned char *)(a6 + 33) == 1)
            {
              uint64_t v116 = *(const char **)a6;
            }
            else
            {
              LOBYTE(v113) = 2;
              uint64_t v116 = (const char *)a6;
            }
            *(void *)&long long v208 = v116;
            *((void *)&v208 + 1) = v115;
            uint64_t v209 = "sroa_idx";
            char v114 = 3;
          }
        }
        else
        {
          char v114 = 1;
        }
        LOBYTE(v210) = v113;
        HIBYTE(v210) = v114;
        unsigned int v52 = (unsigned __int8 *)sub_1CC57EEA0(v11, v112, (uint64_t *)PointerBitCastOrAddrSpaceCast, v211, v103, (uint64_t)&v208);
      }
    }
LABEL_100:
    uint64_t v62 = v214;
    if (v215)
    {
      uint64_t v63 = 16 * v215;
      do
      {
        if (*(_DWORD *)&v62[v63 - 8] >= 0x41u)
        {
          uint64_t v64 = *(void *)&v62[v63 - 16];
          if (v64) {
            MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
          }
        }
        v63 -= 16;
      }
      while (v63);
      uint64_t v62 = v214;
      int v53 = v196;
    }
    if (v62 != (char *)&v216) {
      free(v62);
    }
LABEL_109:
    if (v199 >= 0x41 && v198) {
      MEMORY[0x1D25D9CB0](v198, 0x1000C8000313F17);
    }
    if (!v52)
    {
      unsigned int v52 = v53;
      goto LABEL_120;
    }
    if (v53 && v53 != (unsigned __int8 *)v194 && v53[16] >= 0x1Cu) {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    unint64_t v194 = PointerBitCastOrAddrSpaceCast;
    if (*(void *)v52 != v192)
    {
LABEL_120:
      if (*(_DWORD *)(*(void *)PointerBitCastOrAddrSpaceCast + 8) != 2061) {
        goto LABEL_126;
      }
      if (v201 > 0x40 || (unsigned int v65 = *((_DWORD *)a4 + 2), v65 > 0x40))
      {
        uint64_t v191 = (unsigned __int8 *)PointerBitCastOrAddrSpaceCast;
        if (&__dst == (void **)a4)
        {
LABEL_126:
          unsigned int v66 = *((unsigned __int8 *)PointerBitCastOrAddrSpaceCast + 16);
          if (v66 > 0x1B)
          {
            if (v66 != 77) {
              goto LABEL_255;
            }
          }
          else
          {
            if (v66 == 1)
            {
              if (llvm::GlobalValue::isInterposable(PointerBitCastOrAddrSpaceCast)) {
                goto LABEL_255;
              }
              unsigned int v68 = (llvm::Instruction **)((char *)PointerBitCastOrAddrSpaceCast - 32);
LABEL_137:
              PointerBitCastOrAddrSpaceCast = *v68;
              uint64_t v69 = v203;
              uint64_t v70 = HIDWORD(v204);
              if (v203 == v202)
              {
                if (HIDWORD(v204))
                {
                  BOOL v71 = 0;
                  uint64_t v72 = 8 * HIDWORD(v204);
                  uint64_t v73 = v203;
                  while (*(llvm::Instruction **)v73 != PointerBitCastOrAddrSpaceCast)
                  {
                    if (*(void *)v73 == -2) {
                      BOOL v71 = (llvm::Instruction **)v73;
                    }
                    v73 += 8;
                    v72 -= 8;
                    if (!v72)
                    {
                      if (!v71) {
                        goto LABEL_145;
                      }
                      llvm::ValueSymbolTable *v71 = PointerBitCastOrAddrSpaceCast;
                      --v205;
                      uint64_t v196 = v52;
                      goto LABEL_9;
                    }
                  }
                  goto LABEL_255;
                }
LABEL_145:
                unsigned int v74 = v204;
                if (HIDWORD(v204) < v204)
                {
                  ++HIDWORD(v204);
                  *(void *)&v203[8 * v70] = PointerBitCastOrAddrSpaceCast;
                  uint64_t v196 = v52;
                  continue;
                }
              }
              else
              {
                unsigned int v74 = v204;
              }
              if (3 * v74 <= 4 * (HIDWORD(v204) - v205))
              {
                if (v74 >= 0x40) {
                  v74 *= 2;
                }
                else {
                  unsigned int v74 = 128;
                }
              }
              else if (v74 - HIDWORD(v204) >= v74 >> 3)
              {
                goto LABEL_150;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v202, v74);
              unsigned int v74 = v204;
              uint64_t v69 = v203;
LABEL_150:
              unsigned int v75 = v74 - 1;
              unsigned int v76 = (v74 - 1) & ((PointerBitCastOrAddrSpaceCast >> 4) ^ (PointerBitCastOrAddrSpaceCast >> 9));
              unint64_t v77 = &v69[8 * v76];
              int v78 = *(llvm::Instruction **)v77;
              if (*(void *)v77 == -1)
              {
                uint64_t v79 = 0;
LABEL_203:
                if (v79) {
                  uint64_t v104 = v79;
                }
                else {
                  uint64_t v104 = (llvm::Instruction **)v77;
                }
                if (*v104 != PointerBitCastOrAddrSpaceCast)
                {
                  if (*v104 == (llvm::Instruction *)-2) {
                    --v205;
                  }
                  else {
                    ++HIDWORD(v204);
                  }
                  *uint64_t v104 = PointerBitCastOrAddrSpaceCast;
                  uint64_t v196 = v52;
                  continue;
                }
              }
              else
              {
                uint64_t v79 = 0;
                int v80 = 1;
                while (v78 != PointerBitCastOrAddrSpaceCast)
                {
                  if (v79) {
                    BOOL v81 = 0;
                  }
                  else {
                    BOOL v81 = v78 == (llvm::Instruction *)-2;
                  }
                  if (v81) {
                    uint64_t v79 = (llvm::Instruction **)v77;
                  }
                  unsigned int v82 = v76 + v80++;
                  unsigned int v76 = v82 & v75;
                  unint64_t v77 = &v69[8 * (v82 & v75)];
                  int v78 = *(llvm::Instruction **)v77;
                  if (*(void *)v77 == -1) {
                    goto LABEL_203;
                  }
                }
              }
LABEL_255:
              if (v52) {
                break;
              }
              uint64_t v125 = a6;
              BOOL v126 = v191;
              if (v191) {
                goto LABEL_314;
              }
              unsigned int v127 = *(_DWORD *)(v192 + 8);
              if ((v127 & 0xFE) == 0x12) {
                unsigned int v127 = *(_DWORD *)(**(void **)(v192 + 16) + 8);
              }
              unint64_t v128 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v11[8] + 1912), (llvm::Type *)(v127 >> 8));
              int v129 = *(unsigned __int8 *)(a6 + 32);
              if (v129 == 1)
              {
                *(void *)&long long v208 = "sroa_raw_cast";
                __int16 v130 = 259;
              }
              else
              {
                if (*(unsigned char *)(a6 + 32))
                {
                  uint64_t v149 = *(void *)(a6 + 8);
                  if (*(unsigned char *)(a6 + 33) == 1)
                  {
                    uint64_t v150 = *(const char **)a6;
                  }
                  else
                  {
                    LOBYTE(v129) = 2;
                    uint64_t v150 = (const char *)a6;
                  }
                  *(void *)&long long v208 = v150;
                  *((void *)&v208 + 1) = v149;
                  uint64_t v209 = "sroa_raw_cast";
                  LOBYTE(v210) = v129;
                  HIBYTE(v210) = 3;
LABEL_300:
                  if (*(void *)PointerBitCastOrAddrSpaceCast != v128)
                  {
                    if (*((unsigned __int8 *)PointerBitCastOrAddrSpaceCast + 16) > 0x14u)
                    {
                      __int16 v217 = 257;
                      BOOL v126 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)PointerBitCastOrAddrSpaceCast, v128, (const char **)&v214, 0);
                      (*(void (**)(uint64_t, unsigned __int8 *, long long *, uint64_t, uint64_t))(*(void *)v11[10] + 16))(v11[10], v126, &v208, v11[6], v11[7]);
                      uint64_t v151 = *((unsigned int *)v11 + 2);
                      if (v151)
                      {
                        uint64_t v152 = *v11;
                        uint64_t v153 = *v11 + 16 * v151;
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v126, *(_DWORD *)v152, *(llvm::MDNode **)(v152 + 8));
                          v152 += 16;
                        }
                        while (v152 != v153);
                      }
LABEL_310:
                      if (v201 <= 0x40)
                      {
                        unsigned int v155 = *((_DWORD *)a4 + 2);
                        if (v155 <= 0x40)
                        {
                          uint64_t v156 = *(void *)a4;
                          uint64_t __dst = *(void **)a4;
                          unsigned int v201 = v155;
                          goto LABEL_323;
                        }
                      }
                      if (&__dst != (void **)a4)
                      {
                        llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)a4 + 2));
                        if (v201 <= 0x40)
                        {
                          uint64_t __dst = *(void **)a4;
                          goto LABEL_315;
                        }
                        memcpy(__dst, *(const void **)a4, (((unint64_t)v201 + 63) >> 3) & 0x3FFFFFF8);
                      }
LABEL_314:
                      if (v201 >= 0x41)
                      {
                        int v158 = 0;
                        int64_t v159 = ((unint64_t)v201 + 63) >> 6;
                        p_dst = (uint64_t *)__dst;
                        do
                        {
                          BOOL v59 = v159-- < 1;
                          if (v59) {
                            break;
                          }
                          unint64_t v160 = *((void *)__dst + v159);
                          v158 += __clz(v160);
                        }
                        while (!v160);
                        unsigned int v161 = v201 | 0xFFFFFFC0;
                        if ((v201 & 0x3F) == 0) {
                          unsigned int v161 = 0;
                        }
                        if (v201 - v158 - v161 > 0x40) {
                          goto LABEL_324;
                        }
                        goto LABEL_322;
                      }
LABEL_315:
                      p_dst = (uint64_t *)&__dst;
LABEL_322:
                      uint64_t v156 = *p_dst;
LABEL_323:
                      if (!v156)
                      {
LABEL_333:
                        unsigned int v52 = v126;
                        break;
                      }
LABEL_324:
                      uint64_t v162 = (llvm::ConstantInt *)v11[8];
                      uint64_t v163 = *(void *)v162 + 1912;
                      uint64_t v164 = (const char *)llvm::ConstantInt::get(v162, (llvm::LLVMContext *)&__dst, v50);
                      int v165 = *(unsigned __int8 *)(v125 + 32);
                      if (v165 == 1)
                      {
                        unint64_t v214 = "sroa_raw_idx";
                        long long v216 = v208;
                        __int16 v217 = 259;
                        int v218 = (int)v207;
                        __int16 v219 = WORD2(v207);
                      }
                      else if (*(unsigned char *)(v125 + 32))
                      {
                        uint64_t v166 = *(void *)(v125 + 8);
                        if (*(unsigned char *)(v125 + 33) == 1)
                        {
                          int v167 = *(const char **)v125;
                        }
                        else
                        {
                          LOBYTE(v165) = 2;
                          int v167 = (const char *)v125;
                        }
                        unint64_t v214 = (char *)v167;
                        uint64_t v215 = v166;
                        *(void *)&long long v216 = "sroa_raw_idx";
                        LOBYTE(v217) = v165;
                        HIBYTE(v217) = 3;
                      }
                      else
                      {
                        __int16 v217 = 256;
                      }
                      BOOL v126 = (unsigned __int8 *)sub_1CC278130(v11, v163, (uint64_t *)v126, v164, (uint64_t)&v214);
                      goto LABEL_333;
                    }
                    BOOL v126 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Instruction *, unint64_t))(*(void *)v11[9] + 224))(v11[9], 49, PointerBitCastOrAddrSpaceCast, v128);
                    if (v126) {
                      BOOL v154 = v126[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v154 = 0;
                    }
                    if (!v154) {
                      goto LABEL_310;
                    }
                    PointerBitCastOrAddrSpaceCast = (llvm::Instruction *)v126;
                    (*(void (**)(uint64_t, unsigned __int8 *, long long *, uint64_t, uint64_t))(*(void *)v11[10] + 16))(v11[10], v126, &v208, v11[6], v11[7]);
                    uint64_t v186 = *((unsigned int *)v11 + 2);
                    if (v186)
                    {
                      uint64_t v187 = *a1;
                      uint64_t v188 = *a1 + 16 * v186;
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v126, *(_DWORD *)v187, *(llvm::MDNode **)(v187 + 8));
                        v187 += 16;
                      }
                      while (v187 != v188);
                    }
                    uint64_t v11 = a1;
                    uint64_t v125 = a6;
                  }
                  BOOL v126 = (unsigned __int8 *)PointerBitCastOrAddrSpaceCast;
                  goto LABEL_310;
                }
                __int16 v130 = 256;
              }
              __int16 v210 = v130;
              goto LABEL_300;
            }
            if (v66 != 5 || *((_WORD *)PointerBitCastOrAddrSpaceCast + 9) != 49) {
              goto LABEL_255;
            }
          }
          int v67 = *((_DWORD *)PointerBitCastOrAddrSpaceCast + 5);
          if ((v67 & 0x40000000) != 0) {
            unsigned int v68 = (llvm::Instruction **)*((void *)PointerBitCastOrAddrSpaceCast - 1);
          }
          else {
            unsigned int v68 = (llvm::Instruction **)((char *)PointerBitCastOrAddrSpaceCast - 32 * (v67 & 0x7FFFFFF));
          }
          goto LABEL_137;
        }
        llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)a4 + 2));
        if (v201 <= 0x40) {
          uint64_t __dst = *(void **)a4;
        }
        else {
          memcpy(__dst, *(const void **)a4, (((unint64_t)v201 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
      else
      {
        uint64_t __dst = *(void **)a4;
        unsigned int v201 = v65;
      }
      uint64_t v191 = (unsigned __int8 *)PointerBitCastOrAddrSpaceCast;
      goto LABEL_126;
    }
    break;
  }
  if (*(llvm::Value **)v52 != a5)
  {
    int v168 = *(unsigned __int8 *)(a6 + 32);
    if (v168 == 1)
    {
      *(void *)&long long v208 = "sroa_cast";
      __int16 v169 = 259;
LABEL_339:
      __int16 v210 = v169;
    }
    else
    {
      if (!*(unsigned char *)(a6 + 32))
      {
        __int16 v169 = 256;
        goto LABEL_339;
      }
      uint64_t v170 = *(void *)(a6 + 8);
      if (*(unsigned char *)(a6 + 33) == 1)
      {
        unsigned int v171 = *(const char **)a6;
      }
      else
      {
        LOBYTE(v168) = 2;
        unsigned int v171 = (const char *)a6;
      }
      *(void *)&long long v208 = v171;
      *((void *)&v208 + 1) = v170;
      uint64_t v209 = "sroa_cast";
      LOBYTE(v210) = v168;
      HIBYTE(v210) = 3;
    }
    if (*(llvm::Value **)v52 != a5)
    {
      if (v52[16] <= 0x14u)
      {
        unsigned int v52 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Value *))(*(void *)v11[9] + 240))(v11[9], v52, a5);
        if (v52) {
          BOOL v178 = v52[16] >= 0x1Cu;
        }
        else {
          BOOL v178 = 0;
        }
        if (v178)
        {
          (*(void (**)(uint64_t, unsigned __int8 *, long long *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v52, &v208, a1[6], a1[7]);
          uint64_t v179 = *((unsigned int *)a1 + 2);
          if (v179)
          {
            uint64_t v180 = *a1;
            uint64_t v181 = *a1 + 16 * v179;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v52, *(_DWORD *)v180, *(llvm::MDNode **)(v180 + 8));
              v180 += 16;
            }
            while (v180 != v181);
          }
        }
      }
      else
      {
        __int16 v217 = 257;
        unsigned int v52 = (unsigned __int8 *)llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast((llvm::CastInst *)v52, a5, (const char **)&v214, 0, v51);
        (*(void (**)(uint64_t, unsigned __int8 *, long long *, uint64_t, uint64_t))(*(void *)v11[10] + 16))(v11[10], v52, &v208, v11[6], v11[7]);
        uint64_t v172 = *((unsigned int *)v11 + 2);
        if (v172)
        {
          uint64_t v174 = *v11;
          uint64_t v175 = *v11 + 16 * v172;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v52, *(_DWORD *)v174, *(llvm::MDNode **)(v174 + 8));
            v174 += 16;
          }
          while (v174 != v175);
        }
      }
    }
  }
  if (v201 >= 0x41 && __dst) {
    MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
  }
  if (v211 != (uint64_t *)v213) {
    free(v211);
  }
  if (v203 != v202) {
    free(v203);
  }
  return v52;
}

void *sub_1CCE93F38(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_1CC020978(a1, a2, (uint64_t)v7);
  if (v7[16])
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 32);
    if (v6 >= *(_DWORD *)(a1 + 36)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 24) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

uint64_t llvm::SROAPass::rewritePartition(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v5 = a2;
  v362[8] = *MEMORY[0x1E4F143B8];
  uint64_t v305 = *(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40);
  unsigned int v6 = (llvm::DataLayout *)(v305 + 272);
  uint64_t v8 = (void *)*((void *)a4 + 2);
  int v7 = (void *)*((void *)a4 + 3);
  uint64_t v9 = *((void *)a4 + 1);
  uint64_t v312 = (llvm::DataLayout *)(v305 + 272);
  if (v8 == v7)
  {
    uint64_t v308 = 0;
    goto LABEL_35;
  }
  uint64_t v10 = 0;
  uint64_t v308 = 0;
  char v11 = 1;
  unsigned int v12 = (void *)*((void *)a4 + 2);
  do
  {
    uint64_t v13 = *(void *)((v12[2] & 0xFFFFFFFFFFFFFFF8) + 24);
    int v14 = *(unsigned __int8 *)(v13 + 16);
    if ((v14 != 84
       || (uint64_t v15 = *(void *)(v13 - 32)) == 0
       || *(unsigned char *)(v15 + 16)
       || *(void *)(v15 + 24) != *(void *)(v13 + 72)
       || (*(unsigned char *)(v15 + 33) & 0x20) == 0)
      && *v12 == *v8
      && v12[1] == v9)
    {
      if (v14 != 60)
      {
        if (v14 != 61) {
          goto LABEL_29;
        }
        uint64_t v13 = *(void *)(v13 - 64);
      }
      int v16 = *(llvm::Type **)v13;
      if (!v16)
      {
LABEL_29:
        char v11 = 0;
        goto LABEL_30;
      }
      unint64_t v17 = *((unsigned int *)v16 + 2);
      if (*((_DWORD *)v16 + 2) == 13)
      {
        if ((v17 & 0x700) != 0 || v9 - *v12 < v17 >> 11) {
          goto LABEL_30;
        }
        if (!v308 || v17 >> 8 > *((_DWORD *)v308 + 2) >> 8) {
          uint64_t v308 = v16;
        }
      }
      if (v10) {
        BOOL v18 = v10 == (void)v16;
      }
      else {
        BOOL v18 = 1;
      }
      char v19 = v18;
      if (v18) {
        uint64_t v10 = (uint64_t)v16;
      }
      v11 &= v19;
    }
LABEL_30:
    v12 += 3;
  }
  while (v12 != v7);
  if ((v11 & (v10 != 0)) == 0)
  {
LABEL_35:
    unint64_t v22 = *(void *)a4;
    unint64_t v23 = v9 - *(void *)a4;
    goto LABEL_36;
  }
  unint64_t v20 = (unint64_t)(sub_1CB83544C(v305 + 272, v10) + 7) >> 3;
  char Alignment = llvm::DataLayout::getAlignment(v6, (llvm::Type *)v10, 1);
  unint64_t v22 = *(void *)a4;
  unint64_t v23 = *((void *)a4 + 1) - *(void *)a4;
  if ((((1 << Alignment) + v20 - 1) & -(1 << Alignment)) >= v23) {
    goto LABEL_74;
  }
LABEL_36:
  uint64_t v24 = *(void *)(v5 + 64);
  unint64_t v309 = v23;
  while (2)
  {
    while (2)
    {
      if (!v22)
      {
        unint64_t v25 = (unint64_t)(sub_1CB83544C((uint64_t)v6, v24) + 7) >> 3;
        char v26 = llvm::DataLayout::getAlignment(v6, (llvm::Type *)v24, 1);
        if ((((1 << v26) + v25 - 1) & -(1 << v26)) == v23)
        {
          uint64_t v10 = sub_1CCEA0A14(v6, (llvm::Type *)v24);
          goto LABEL_68;
        }
      }
      unint64_t v27 = (unint64_t)(sub_1CB83544C((uint64_t)v6, v24) + 7) >> 3;
      char v28 = llvm::DataLayout::getAlignment(v6, (llvm::Type *)v24, 1);
      if ((((1 << v28) + v27 - 1) & -(1 << v28)) < v22) {
        goto LABEL_67;
      }
      unint64_t v29 = (unint64_t)(sub_1CB83544C((uint64_t)v6, v24) + 7) >> 3;
      char v30 = llvm::DataLayout::getAlignment(v6, (llvm::Type *)v24, 1);
      if (v29 + ~(-1 << v30) - v22 - ((v29 + ~(-1 << v30)) & ~(-1 << v30)) < v23) {
        goto LABEL_67;
      }
      int v31 = *(_DWORD *)(v24 + 8);
      if (v31 == 17 || (v31 & 0xFE) == 0x12)
      {
        if (v31 == 17) {
          unint64_t v51 = *(void *)(v24 + 32);
        }
        else {
          unint64_t v51 = *(unsigned int *)(v24 + 32);
        }
        uint64_t v24 = *(void *)(v24 + 24);
        unint64_t v52 = (unint64_t)(sub_1CB83544C((uint64_t)v6, v24) + 7) >> 3;
        char v53 = llvm::DataLayout::getAlignment(v6, (llvm::Type *)v24, 1);
        unint64_t v54 = ((1 << v53) + v52 - 1) & -(1 << v53);
        if (v22 / v54 < v51)
        {
          if (v54 > v23 || v22 != v54 * (v22 / v54))
          {
            v22 %= v54;
            if (v22 + v23 > v54) {
              goto LABEL_67;
            }
            continue;
          }
          unsigned int v55 = a4;
          if (v54 == v23)
          {
            uint64_t v72 = sub_1CCEA0A14(v6, (llvm::Type *)v24);
          }
          else
          {
            if (v23 / v54 * v54 != v23) {
              goto LABEL_484;
            }
            uint64_t v72 = (uint64_t)llvm::ArrayType::get((llvm::ArrayType *)v24, (llvm::Type *)(v23 / v54));
          }
          uint64_t v10 = v72;
          goto LABEL_69;
        }
LABEL_67:
        uint64_t v10 = 0;
LABEL_68:
        unsigned int v55 = a4;
        goto LABEL_69;
      }
      break;
    }
    if (v31 != 16) {
      goto LABEL_67;
    }
    StructLayout = llvm::DataLayout::getStructLayout(v6, (llvm::StructType *)v24);
    if (*(void *)StructLayout <= v22 || v22 + v23 > *(void *)StructLayout) {
      goto LABEL_67;
    }
    uint64_t v33 = StructLayout;
    unint64_t v306 = v22 + v23;
    unsigned int v34 = (char *)StructLayout + 16;
    uint64_t v35 = (char *)StructLayout + 16;
    unint64_t v36 = *((_DWORD *)StructLayout + 3) & 0x7FFFFFFF;
    if (v36)
    {
      uint64_t v35 = (char *)StructLayout + 16;
      do
      {
        unint64_t v37 = v36 >> 1;
        unsigned int v38 = (unint64_t *)&v35[8 * (v36 >> 1)];
        unint64_t v40 = *v38;
        unsigned int v39 = (char *)(v38 + 1);
        v36 += ~(v36 >> 1);
        if (v40 > v22) {
          unint64_t v36 = v37;
        }
        else {
          uint64_t v35 = v39;
        }
      }
      while (v36);
    }
    unint64_t v41 = v35 - v34 - 8;
    uint64_t v42 = *(void *)&v34[8 * (v41 >> 3)];
    uint64_t v43 = v22 - v42;
    BOOL v44 = *(llvm::Type **)(*(void *)(v24 + 16) + 8 * (v41 >> 3));
    unint64_t v45 = sub_1CB83544C((uint64_t)v6, (uint64_t)v44) + 7;
    char v46 = v6;
    unint64_t v47 = v45 >> 3;
    char v48 = llvm::DataLayout::getAlignment(v46, v44, 1);
    unint64_t v49 = ((1 << v48) + v47 - 1) & -(1 << v48);
    if (v22 - v42 >= v49)
    {
      uint64_t v10 = 0;
      uint64_t v5 = a2;
      unsigned int v6 = (llvm::DataLayout *)(v305 + 272);
      unsigned int v55 = a4;
      goto LABEL_69;
    }
    BOOL v50 = v22 != v42 || v49 > v309;
    if (v50)
    {
      uint64_t v24 = (uint64_t)v44;
      v22 -= v42;
      uint64_t v5 = a2;
      unsigned int v6 = (llvm::DataLayout *)(v305 + 272);
      unint64_t v23 = v309;
      if (v43 + v309 > v49) {
        goto LABEL_67;
      }
      continue;
    }
    break;
  }
  unsigned int v6 = (llvm::DataLayout *)(v305 + 272);
  unsigned int v55 = a4;
  if (v49 == v309)
  {
    uint64_t v10 = sub_1CCEA0A14(v312, v44);
LABEL_99:
    uint64_t v5 = a2;
    goto LABEL_69;
  }
  if (v306 >= *(void *)v33)
  {
    uint64_t v297 = *(unsigned int *)(v24 + 12);
    uint64_t v5 = a2;
    goto LABEL_466;
  }
  uint64_t v73 = v34;
  unint64_t v74 = *((_DWORD *)v33 + 3) & 0x7FFFFFFF;
  if (v74)
  {
    uint64_t v73 = v34;
    do
    {
      unint64_t v75 = v74 >> 1;
      unsigned int v76 = (unint64_t *)&v73[8 * (v74 >> 1)];
      unint64_t v78 = *v76;
      unint64_t v77 = (char *)(v76 + 1);
      v74 += ~(v74 >> 1);
      if (v78 > v306) {
        unint64_t v74 = v75;
      }
      else {
        uint64_t v73 = v77;
      }
    }
    while (v74);
  }
  unint64_t v79 = v73 - v34 - 8;
  if ((v41 >> 3) == (v79 >> 3))
  {
    uint64_t v10 = 0;
    goto LABEL_99;
  }
  uint64_t v5 = a2;
  if (*(void *)&v34[8 * (v79 >> 3)] != v306)
  {
LABEL_484:
    uint64_t v10 = 0;
    goto LABEL_69;
  }
  uint64_t v297 = (v79 >> 3);
LABEL_466:
  uint64_t v10 = llvm::StructType::get(*(uint64_t **)v24, *(void *)(v24 + 16) + 8 * (v41 >> 3), v297 - (v41 >> 3), (*(_DWORD *)(v24 + 8) >> 9) & 1);
  if (*(void *)llvm::DataLayout::getStructLayout(v312, (llvm::StructType *)v10) != v309) {
    uint64_t v10 = 0;
  }
LABEL_69:
  if (v10 || !v308)
  {
    if (v10) {
      goto LABEL_74;
    }
    uint64_t v58 = 0;
    goto LABEL_78;
  }
  uint64_t v10 = (uint64_t)v308;
  unint64_t v56 = (unint64_t)(sub_1CB83544C((uint64_t)v6, (uint64_t)v308) + 7) >> 3;
  char v57 = llvm::DataLayout::getAlignment(v6, v308, 1);
  uint64_t v58 = 0;
  if ((((1 << v57) + v56 - 1) & -(1 << v57)) < v55[1] - *v55) {
    goto LABEL_78;
  }
LABEL_74:
  if (*(unsigned char *)(v10 + 8) == 17)
  {
    uint64_t v58 = v10;
    if (*(unsigned char *)(**(void **)(v10 + 16) + 8) == 13)
    {
LABEL_78:
      uint64_t v59 = *((void *)a4 + 1) - *(void *)a4;
      uint64_t v60 = *(void *)(v305 + 304);
      unsigned int v61 = *(char **)(v305 + 312);
      uint64_t v62 = &v61[v60];
      if ((unint64_t)(8 * v59) <= 0xFF)
      {
        uint64_t v63 = (char *)memchr(*(void **)(v305 + 304), (char)(8 * v59), *(void *)(v305 + 312));
        if (v63) {
          uint64_t v62 = v63;
        }
      }
      if (&v62[-v60] != v61) {
        uint64_t v58 = llvm::IntegerType::get(*(llvm::IntegerType **)a1, (llvm::LLVMContext *)(8 * v59));
      }
      uint64_t v10 = v58;
      unsigned int v6 = (llvm::DataLayout *)(v305 + 272);
      if (!v58) {
        uint64_t v10 = (uint64_t)llvm::ArrayType::get((llvm::ArrayType *)(**(void **)a1 + 1912), (llvm::Type *)(*((void *)a4 + 1) - *(void *)a4));
      }
    }
  }
  unint64_t v64 = sub_1CB83544C((uint64_t)v6, v10);
  unsigned int v65 = a4;
  if (v64 <= 0x800000)
  {
    uint64_t v66 = (uint64_t)v6;
    int v67 = (llvm::LLVMContext *)v64;
    if (v64 == ((sub_1CB83544C(v66, v10) + 7) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v68 = llvm::IntegerType::get(*(llvm::IntegerType **)v10, v67);
      if (sub_1CCEA0BBC(v66, v10, v68))
      {
        if (sub_1CCEA0BBC(v66, v68, v10))
        {
          uint64_t v70 = (unint64_t *)*((void *)a4 + 2);
          uint64_t v69 = (unint64_t *)*((void *)a4 + 3);
          if (v70 == v69)
          {
            uint64_t v80 = *(void *)(v305 + 304);
            BOOL v81 = *(char **)(v305 + 312);
            unsigned int v82 = &v81[v80];
            if ((unint64_t)v67 <= 0xFF)
            {
              uint64_t v83 = (char *)memchr(*(void **)(v305 + 304), (char)v67, *(void *)(v305 + 312));
              if (v83) {
                unsigned int v82 = v83;
              }
            }
            LOBYTE(v321) = &v82[-v80] != v81;
            uint64_t v71 = v305 + 272;
LABEL_117:
            uint64_t v84 = *((unsigned int *)a4 + 10);
            if (v84)
            {
              uint64_t v85 = (unint64_t **)*((void *)a4 + 4);
              uint64_t v86 = 8 * v84;
              while ((sub_1CCEA0EEC(*v85, *(void *)a4, v10, v71, &v321) & 1) != 0)
              {
                ++v85;
                v86 -= 8;
                if (!v86) {
                  goto LABEL_121;
                }
              }
            }
            else
            {
LABEL_121:
              if ((_BYTE)v321)
              {
                uint64_t v87 = 0;
                int v88 = 1;
                goto LABEL_196;
              }
            }
          }
          else
          {
            LOBYTE(v321) = 0;
            uint64_t v71 = v305 + 272;
            while ((sub_1CCEA0EEC(v70, *(void *)a4, v10, (uint64_t)v312, &v321) & 1) != 0)
            {
              v70 += 3;
              if (v70 == v69) {
                goto LABEL_117;
              }
            }
          }
        }
      }
    }
  }
  unsigned int v321 = v323;
  uint64_t v322 = 0x400000000;
  uint64_t v89 = (void *)*((void *)a4 + 2);
  uint64_t v90 = (void *)*((void *)a4 + 3);
  if (v89 == v90)
  {
    uint64_t v87 = 0;
    goto LABEL_193;
  }
  uint64_t v310 = v10;
  unsigned int v91 = 0;
  uint64_t v92 = 0;
  int v93 = 1;
  while (2)
  {
    if (*v89 == *(void *)a4 && v89[1] == *((void *)a4 + 1))
    {
      unsigned int v94 = *(unsigned __int8 **)((v89[2] & 0xFFFFFFFFFFFFFFF8) + 24);
      int v95 = v94[16];
      if (v94 && v95 == 60) {
        goto LABEL_132;
      }
      if (v94 && v95 == 61)
      {
        unsigned int v94 = (unsigned __int8 *)*((void *)v94 - 8);
LABEL_132:
        uint64_t v96 = *(void *)v94;
        int v97 = *(_DWORD *)(*(void *)v94 + 8) & 0xFE;
        if (v96 && v97 == 18)
        {
          if (v91)
          {
            uint64_t v99 = *(void *)v321;
            uint64_t v100 = sub_1CB83544C((uint64_t)v312, v96);
            if (v100 != sub_1CB83544C((uint64_t)v312, v99))
            {
              unsigned int v91 = 0;
              LODWORD(v322) = 0;
              uint64_t v10 = v310;
              goto LABEL_147;
            }
            unint64_t v101 = v322;
            uint64_t v10 = v310;
          }
          else
          {
            unint64_t v101 = 0;
          }
          if (v101 >= HIDWORD(v322)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v321 + v101) = v96;
          unsigned int v91 = v322 + 1;
          LODWORD(v322) = v322 + 1;
          if (v92)
          {
            if (v92 != *(void *)(v96 + 24)) {
              int v93 = 0;
            }
          }
          else
          {
            uint64_t v92 = *(void *)(v96 + 24);
          }
        }
      }
    }
LABEL_147:
    v89 += 3;
    if (v89 != v90) {
      continue;
    }
    break;
  }
  if (!v91)
  {
LABEL_192:
    uint64_t v87 = 0;
    goto LABEL_193;
  }
  if (!v93)
  {
    int v111 = (uint64_t *)v321;
    uint64_t v112 = (char *)v321 + 8 * v91;
    uint64_t v113 = 8 * v91 - 8;
    char v114 = (char *)v321;
    uint64_t v115 = (char *)v321;
    while (1)
    {
      uint64_t v116 = *(void *)v115;
      v115 += 8;
      if (*(unsigned char *)(*(void *)(v116 + 24) + 8) != 13) {
        break;
      }
      v113 -= 8;
      char v114 = v115;
      if (v115 == v112) {
        goto LABEL_178;
      }
    }
    if (v115 == v112)
    {
      uint64_t v112 = v114;
    }
    else
    {
      uint64_t v117 = 8;
      uint64_t v112 = v114;
      do
      {
        uint64_t v118 = *(void *)&v114[v117];
        if (*(unsigned char *)(*(void *)(v118 + 24) + 8) == 13)
        {
          *(void *)uint64_t v112 = v118;
          v112 += 8;
        }
        v117 += 8;
        v113 -= 8;
      }
      while (v113);
      int v111 = (uint64_t *)v321;
    }
LABEL_178:
    unint64_t v119 = v112 - (char *)v111;
    unint64_t v120 = (unint64_t)(v112 - (char *)v111) >> 3;
    LODWORD(v322) = v120;
    if (v120)
    {
      sub_1CCEA11D4(v111, &v111[v120], 126 - 2 * __clz((v119 >> 3)), 1);
      uint64_t v102 = (char *)v321;
      unint64_t v121 = (char *)v321 + 8 * v322;
      uint64_t v122 = (char *)v321;
      if (v322)
      {
        uint64_t v122 = (char *)v321 - 8;
        uint64_t v123 = 8 * v322 - 8;
        while (v123)
        {
          uint64_t v124 = *((void *)v122 + 1);
          uint64_t v125 = *((void *)v122 + 2);
          v122 += 8;
          v123 -= 8;
          if (*(_DWORD *)(v124 + 32) < *(_DWORD *)(v125 + 32)) {
            goto LABEL_183;
          }
        }
      }
      else
      {
LABEL_183:
        if (v122 != v121)
        {
          BOOL v126 = v122 + 16;
          if (v122 + 16 != v121)
          {
            uint64_t v127 = *(void *)v122;
            do
            {
              uint64_t v128 = *(void *)v126;
              if (*(_DWORD *)(v127 + 32) >= *(_DWORD *)(*(void *)v126 + 32))
              {
                *((void *)v122 + 1) = v128;
                v122 += 8;
                uint64_t v127 = v128;
              }
              v126 += 8;
            }
            while (v126 != v121);
          }
          unint64_t v121 = v122 + 8;
        }
      }
      unint64_t v129 = v121 - v102;
      LODWORD(v322) = v129 >> 3;
      if (v322)
      {
        unint64_t v103 = &v102[v129 & 0x7FFFFFFF8];
        goto LABEL_155;
      }
    }
    goto LABEL_192;
  }
  if (v91 != 1) {
    LODWORD(v322) = 1;
  }
  uint64_t v102 = (char *)v321;
  unint64_t v103 = (char *)v321 + 8;
  do
  {
LABEL_155:
    uint64_t v87 = *(void *)v102;
    unint64_t v104 = sub_1CB83544C((uint64_t)v312, *(void *)(*(void *)v102 + 24));
    if ((v104 & 7) == 0)
    {
      unint64_t v105 = v104 >> 3;
      unsigned int v65 = a4;
      uint64_t v107 = (void *)*((void *)a4 + 2);
      uint64_t v106 = (void *)*((void *)a4 + 3);
      if (v107 == v106)
      {
LABEL_161:
        uint64_t v108 = *((unsigned int *)v65 + 10);
        if (!v108) {
          goto LABEL_193;
        }
        int64_t v109 = (void **)*((void *)v65 + 4);
        uint64_t v110 = 8 * v108;
        while ((sub_1CCEA1C2C((uint64_t *)a4, *v109, v87, v105, (uint64_t)v312) & 1) != 0)
        {
          ++v109;
          v110 -= 8;
          if (!v110) {
            goto LABEL_165;
          }
        }
      }
      else
      {
        while ((sub_1CCEA1C2C((uint64_t *)v65, v107, v87, v105, (uint64_t)v312) & 1) != 0)
        {
          v107 += 3;
          unsigned int v65 = a4;
          if (v107 == v106) {
            goto LABEL_161;
          }
        }
      }
    }
    v102 += 8;
  }
  while (v102 != v103);
  uint64_t v87 = 0;
LABEL_165:
  unsigned int v65 = a4;
LABEL_193:
  if (v321 != v323) {
    free(v321);
  }
  int v88 = 0;
LABEL_196:
  if (v87) {
    __int16 v130 = (llvm::Type *)v87;
  }
  else {
    __int16 v130 = (llvm::Type *)v10;
  }
  unsigned int v320 = 0;
  uint64_t v131 = *(void *)v65;
  if (v130 == *(llvm::Type **)(v5 + 64) && !v131)
  {
    unsigned int v320 = (char *)v5;
    uint64_t v132 = a3;
    int v133 = (void *)(v305 + 272);
    goto LABEL_218;
  }
  uint64_t v134 = (1 << *(_WORD *)(v5 + 18)) | v131;
  char v135 = __clz(v134 & -v134);
  unsigned __int8 v136 = llvm::DataLayout::getAlignment(v312, v130, 1);
  int v137 = (char *)operator new(0x68uLL);
  *((_DWORD *)v137 + 13) = *((_DWORD *)v137 + 13) & 0x38000000 | 1;
  *(void *)int v137 = 0;
  *((void *)v137 + 1) = 0;
  *((void *)v137 + 2) = 0;
  *((void *)v137 + 3) = v137 + 32;
  unsigned __int8 v138 = 63 - v135;
  BOOL v139 = (llvm::Type *)(*(_DWORD *)(*(void *)v5 + 8) >> 8);
  if ((63 - v135) <= v136) {
    unsigned __int8 v138 = llvm::DataLayout::getAlignment(v312, v130, 0);
  }
  uint64_t v132 = a3;
  if ((*(unsigned char *)(v5 + 23) & 0x10) != 0)
  {
    uint64_t v140 = ***(void ***)v5;
    uint64_t v141 = *(void *)(v140 + 152);
    uint64_t v142 = *(unsigned int *)(v140 + 168);
    unsigned int v65 = a4;
    if (!v142) {
      goto LABEL_211;
    }
    LODWORD(v143) = (v142 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    int v144 = (uint64_t *)(v141 + 16 * v143);
    uint64_t v145 = *v144;
    if (*v144 != v5)
    {
      int v146 = 1;
      while (v145 != -4096)
      {
        int v147 = v143 + v146++;
        uint64_t v143 = v147 & (v142 - 1);
        uint64_t v145 = *(void *)(v141 + 16 * v143);
        if (v145 == v5)
        {
          int v144 = (uint64_t *)(v141 + 16 * v143);
          goto LABEL_212;
        }
      }
LABEL_211:
      int v144 = (uint64_t *)(v141 + 16 * v142);
    }
LABEL_212:
    uint64_t v148 = (void *)v144[1];
    uint64_t v151 = *v148;
    uint64_t v149 = (char *)(v148 + 2);
    uint64_t v150 = v151;
  }
  else
  {
    uint64_t v150 = 0;
    uint64_t v149 = &byte_1CFBCE98E;
    unsigned int v65 = a4;
  }
  v357.i16[4] = 773;
  uint64_t v355 = (uint64_t)v149;
  v356.i64[0] = v150;
  v356.i64[1] = (uint64_t)".sroa.";
  unint64_t v350 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v65 + 2) - *(void *)(a3 + 16)) >> 3);
  unsigned int v321 = &v355;
  v323[0] = &v350;
  LOWORD(v324) = 2818;
  llvm::AllocaInst::AllocaInst((unint64_t *)v137 + 4, v130, v139, 0, v138, (const char **)&v321, v5);
  uint64_t v152 = *(unsigned __int8 **)(v5 + 48);
  uint64_t v319 = v152;
  unsigned int v320 = v137 + 32;
  if (v152) {
    llvm::MetadataTracking::track((uint64_t)&v319, v152, 2);
  }
  unsigned int v155 = (unsigned __int8 *)*((void *)v137 + 10);
  BOOL v154 = (unsigned __int8 **)(v137 + 80);
  uint64_t v153 = v155;
  int v133 = (void *)(v305 + 272);
  if (v155)
  {
    int v288 = *v153;
    if ((v288 - 4) > 0x1E)
    {
      if ((v288 - 3) >= 0xFFFFFFFE) {
        uint64_t v300 = v153;
      }
      else {
        uint64_t v300 = 0;
      }
      if ((v288 - 3) < 0xFFFFFFFE)
      {
        if (v288 == 3) {
          *((void *)v153 + 1) = 0;
        }
        goto LABEL_216;
      }
      unint64_t v290 = (unint64_t)(v300 + 8);
    }
    else
    {
      if ((v153[1] & 0x7F) != 2 && !*((_DWORD *)v153 + 3)) {
        goto LABEL_216;
      }
      uint64_t v289 = *((void *)v153 + 2);
      if ((v289 & 4) == 0) {
        goto LABEL_216;
      }
      unint64_t v290 = v289 & 0xFFFFFFFFFFFFFFF8;
      if (!v290) {
        goto LABEL_216;
      }
    }
    unsigned int v321 = v154;
    sub_1CC5FA668(v290 + 16, &v321);
  }
LABEL_216:
  uint64_t v156 = v319;
  *BOOL v154 = v319;
  if (v156)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v319, v156, (uint64_t)v154);
    uint64_t v319 = 0;
  }
LABEL_218:
  unsigned __int32 v157 = *(_DWORD *)(a1 + 432);
  uint64_t v355 = 1;
  int64x2_t v356 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v357 = v356;
  int64x2_t v358 = v356;
  int64x2_t v359 = v356;
  unint64_t v360 = v362;
  uint64_t v361 = 0x800000000;
  unint64_t v350 = 1;
  v351[0] = v356;
  v351[1] = v356;
  v351[2] = v356;
  v351[3] = v356;
  unint64_t v352 = v354;
  uint64_t v353 = 0x800000000;
  int v158 = v320;
  unsigned int v321 = v133;
  uint64_t v322 = v132;
  v323[0] = a1;
  v323[1] = v5;
  uint64_t v324 = (uint64_t)v320;
  long long v325 = *v65;
  int64_t v159 = (llvm::Use *)*((void *)v320 + 8);
  BOOL v326 = v159;
  if (v88)
  {
    unsigned int v161 = **(llvm::IntegerType ***)v320;
    uint64_t v162 = (llvm::LLVMContext *)sub_1CB83544C((uint64_t)v133, (uint64_t)v159);
    uint64_t v160 = llvm::IntegerType::get(v161, v162);
  }
  else
  {
    uint64_t v160 = 0;
  }
  uint64_t v327 = v160;
  uint64_t v328 = v87;
  if (v87)
  {
    uint64_t v329 = *(void *)(v87 + 24);
    unint64_t v163 = (unint64_t)sub_1CB83544C((uint64_t)v133, v329) >> 3;
  }
  else
  {
    unint64_t v163 = 0;
    uint64_t v329 = 0;
  }
  unsigned __int32 v301 = v157;
  long long v331 = 0u;
  memset(v332, 0, sizeof(v332));
  unint64_t v330 = v163;
  uint64_t v333 = 0;
  uint64_t v334 = 0;
  unint64_t v335 = &v355;
  uint64_t v336 = &v350;
  uint64_t v164 = **(void **)v158;
  unint64_t v337 = v339;
  uint64_t v338 = 0x200000000;
  v339[6] = v164;
  v339[7] = &v345;
  v339[8] = &v346;
  v339[9] = 0;
  int v340 = 0;
  __int16 v341 = 512;
  char v342 = 7;
  v339[4] = 0;
  v339[5] = 0;
  uint64_t v343 = 0;
  uint64_t v344 = 0;
  size_t v345 = &unk_1F2616E88;
  int v346 = &unk_1F2640AC8;
  std::string __p = 0;
  uint64_t v348 = 0;
  uint64_t v349 = 0;
  uint64_t v165 = *((unsigned int *)v65 + 10);
  if (v165)
  {
    uint64_t v166 = (unint64_t **)*((void *)v65 + 4);
    uint64_t v167 = 8 * v165;
    int v168 = 1;
    do
    {
      __int16 v169 = *v166++;
      v168 &= sub_1CCE95CB4((uint64_t)&v321, v169);
      v167 -= 8;
    }
    while (v167);
  }
  else
  {
    int v168 = 1;
  }
  unsigned int v171 = (unint64_t *)*((void *)v65 + 2);
  uint64_t v170 = (unint64_t *)*((void *)v65 + 3);
  while (v171 != v170)
  {
    v168 &= sub_1CCE95CB4((uint64_t)&v321, v171);
    v171 += 3;
  }
  if (v361)
  {
    uint64_t v172 = (uint64_t **)v360;
    uint64_t v307 = (uint64_t **)((char *)v360 + 8 * v361);
LABEL_234:
    BOOL v173 = *v172;
    uint64_t v174 = **v172;
    unsigned int v175 = *(_DWORD *)(v174 + 8);
    if ((v175 & 0xFE) == 0x12) {
      unsigned int v175 = *(_DWORD *)(**(void **)(v174 + 16) + 8);
    }
    uint64_t v313 = (llvm::DataLayout *)v173[5];
    uint64_t v176 = *(void *)(*((void *)v313 + 7) + 40);
    if (v175 < 0x100) {
      goto LABEL_245;
    }
    unsigned int v177 = v175 >> 8;
    uint64_t v178 = *(unsigned int *)(v176 + 512);
    uint64_t v179 = *(void *)(v176 + 504);
    if (v178)
    {
      uint64_t v179 = *(void *)(v176 + 504);
      unint64_t v180 = *(unsigned int *)(v176 + 512);
      do
      {
        unint64_t v181 = v180 >> 1;
        uint64_t v182 = v179 + 16 * (v180 >> 1);
        unsigned int v183 = *(_DWORD *)(v182 + 8);
        uint64_t v184 = v182 + 16;
        v180 += ~(v180 >> 1);
        if (v183 < v177) {
          uint64_t v179 = v184;
        }
        else {
          unint64_t v180 = v181;
        }
      }
      while (v180);
    }
    if (v179 == *(void *)(v176 + 504) + 16 * v178 || *(_DWORD *)(v179 + 8) != v177) {
LABEL_245:
    }
      uint64_t v179 = *(void *)(v176 + 504);
    unsigned int v185 = *(_DWORD *)(v179 + 12);
    LODWORD(v317) = v185;
    if (v185 > 0x40) {
      operator new[]();
    }
    long long __src = 0;
    uint64_t v186 = v173[1];
    if (!v186) {
      goto LABEL_330;
    }
    unsigned __int8 v315 = 0;
    uint64_t v311 = v176 + 272;
    while (2)
    {
      char v187 = 0;
      uint64_t v188 = *(void *)(v186 + 24);
      if (!v188 || *(unsigned char *)(v188 + 16) != 60) {
        goto LABEL_331;
      }
      if ((*(_WORD *)(v188 + 18) & 0x381) != 0 || *(llvm::DataLayout **)(v188 + 40) != v313) {
        goto LABEL_330;
      }
      if (v173 != (uint64_t *)v188)
      {
        uint64_t v189 = (uint64_t)v173;
        uint64_t v190 = v173 + 3;
        do
        {
          uint64_t v191 = *(unsigned __int8 *)(v189 + 16) - 33;
          if (v191 <= 0x37)
          {
            if (((1 << (*(unsigned char *)(v189 + 16) - 33)) & 0x8000000000041) != 0)
            {
              uint64_t v192 = *(void *)(v189 + 64);
              if (!v192 || (*(unsigned char *)(v192 + 17) & 0x30) == 0)
              {
                int v193 = *(_DWORD *)(v189 + 20);
                if (v193 < 0)
                {
                  uint64_t v194 = v189 - 32 * (v193 & 0x7FFFFFF);
                  uint64_t v197 = *(void *)(v194 - 8);
                  uint64_t v195 = v194 - 8;
                  uint64_t v196 = v197;
                  if (v197)
                  {
                    uint64_t v198 = -v196;
                    while (1)
                    {
                      unsigned int v199 = *(_DWORD *)(*(void *)(v195 + v198) + 8);
                      BOOL v50 = v199 > 7;
                      int v200 = (1 << v199) & 0x83;
                      if (v50 || v200 == 0) {
                        break;
                      }
                      v198 += 16;
                      if (!v198) {
                        goto LABEL_267;
                      }
                    }
LABEL_330:
                    char v187 = 0;
LABEL_331:
                    if (v317 >= 0x41 && __src) {
                      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                    }
                    if (v187)
                    {
                      if (++v172 == v307) {
                        goto LABEL_339;
                      }
                      goto LABEL_234;
                    }
LABEL_398:
                    BOOL v267 = v355 <= 1 && HIDWORD(v355) == 0;
                    uint64_t v236 = a2;
                    int v235 = (int32x2_t *)a1;
                    if (!v267)
                    {
                      if (v355)
                      {
                        uint64_t v285 = &v356;
                        uint64_t v286 = &v360;
                        goto LABEL_446;
                      }
                      if (((2 * v355) & 0xFFFFFFFC) >= v356.i32[2] || v356.i32[2] < 0x41u)
                      {
                        if (v356.i32[2])
                        {
                          uint64_t v285 = (int64x2_t *)v356.i64[0];
                          uint64_t v286 = (void **)(v356.i64[0] + 8 * v356.u32[2]);
                          uint64_t v236 = a2;
                          int v235 = (int32x2_t *)a1;
                          do
                          {
LABEL_446:
                            v285->i64[0] = -4096;
                            uint64_t v285 = (int64x2_t *)((char *)v285 + 8);
                          }
                          while (v285 != (int64x2_t *)v286);
                          unsigned int v287 = v355 & 1;
                        }
                        else
                        {
                          unsigned int v287 = 0;
                          uint64_t v236 = a2;
                          int v235 = (int32x2_t *)a1;
                        }
                        uint64_t v355 = v287;
                      }
                      else
                      {
                        sub_1CD543314(&v355);
                        uint64_t v236 = a2;
                        int v235 = (int32x2_t *)a1;
                      }
                    }
                    LODWORD(v361) = 0;
                    if (v350 > 1 || HIDWORD(v350) != 0)
                    {
                      if (v350)
                      {
                        unint64_t v269 = (void **)v351;
                        uint64_t v270 = &v352;
                        goto LABEL_409;
                      }
                      uint64_t v222 = DWORD2(v351[0]);
                      if (((2 * v350) & 0xFFFFFFFC) >= DWORD2(v351[0]) || DWORD2(v351[0]) < 0x41)
                      {
LABEL_493:
                        if (v222)
                        {
                          unint64_t v269 = *(void ***)&v351[0];
                          uint64_t v270 = (void **)(*(void *)&v351[0] + 8 * v222);
                          uint64_t v236 = a2;
                          int v235 = (int32x2_t *)a1;
                          do
LABEL_409:
                            *v269++ = (void *)-4096;
                          while (v269 != v270);
                          unsigned int v271 = v350 & 1;
                        }
                        else
                        {
                          unsigned int v271 = 0;
                          uint64_t v236 = a2;
                          int v235 = (int32x2_t *)a1;
                        }
                        unint64_t v350 = v271;
                      }
                      else
                      {
                        sub_1CD543314(&v350);
                        uint64_t v236 = a2;
                        int v235 = (int32x2_t *)a1;
                      }
                    }
                    LODWORD(v353) = 0;
LABEL_413:
                    while (v235[54].i32[0] > v301)
                      sub_1CCE996B8(v235 + 50);
                    if (v320 != (char *)v236)
                    {
                      uint64_t v272 = (uint64_t)&v235[3];
                      goto LABEL_417;
                    }
                    uint64_t v273 = 0;
                    goto LABEL_420;
                  }
                }
LABEL_267:
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v189, 45) & 1) == 0
                  && !llvm::CallBase::hasFnAttrOnCalledFunction(v189, 44))
                {
                  goto LABEL_330;
                }
              }
            }
            else if (v191 == 27)
            {
              if ((*(_WORD *)(v189 + 18) & 0x301) != 0) {
                goto LABEL_330;
              }
            }
            else if (((1 << (*(unsigned char *)(v189 + 16) - 33)) & 0x808001D0000010) != 0)
            {
              goto LABEL_330;
            }
          }
          uint64_t v190 = (void *)v190[1];
          if (v190) {
            uint64_t v189 = (uint64_t)(v190 - 3);
          }
          else {
            uint64_t v189 = 0;
          }
        }
        while (v189 != v188);
      }
      unint64_t v202 = (unint64_t)(sub_1CB83544C(v311, *(void *)v188) + 7) >> 3;
      unsigned int v203 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(v188 + 18) >> 1)) ^ 0x3F;
      if (v315 > v203) {
        LOBYTE(v203) = v315;
      }
      unsigned __int8 v315 = v203;
      unsigned int v204 = v317;
      if (v317 >= 0x41)
      {
        int v206 = 0;
        int64_t v207 = ((unint64_t)v317 + 63) >> 6;
        do
        {
          BOOL v50 = v207-- < 1;
          if (v50) {
            break;
          }
          unint64_t v208 = *((void *)__src + v207);
          v206 += __clz(v208);
        }
        while (!v208);
        unsigned int v209 = v317 | 0xFFFFFFC0;
        if ((v317 & 0x3F) == 0) {
          unsigned int v209 = 0;
        }
        if (v317 - v206 - v209 >= 0x41 || *(void *)__src >= v202) {
          operator new[]();
        }
      }
      else
      {
        int v205 = __src;
        if ((unint64_t)__src >= v202) {
          goto LABEL_299;
        }
      }
      unint64_t v210 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v185;
      if (!v185) {
        unint64_t v210 = 0;
      }
      int v205 = (void *)(v210 & v202);
      unsigned int v204 = v185;
      if (v317 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
LABEL_299:
      long long __src = v205;
      LODWORD(v317) = v204;
      uint64_t v186 = *(void *)(v186 + 8);
      if (!v186)
      {
        int v211 = *((_DWORD *)v173 + 5);
        uint64_t v212 = v211 & 0x7FFFFFF;
        if ((v211 & 0x7FFFFFF) == 0)
        {
          char v187 = 1;
          goto LABEL_331;
        }
        uint64_t v213 = 0;
        while (2)
        {
          int v214 = *((_DWORD *)v173 + 5);
          if ((v214 & 0x40000000) != 0) {
            uint64_t v215 = (uint64_t *)*(v173 - 1);
          }
          else {
            uint64_t v215 = &v173[-4 * (v214 & 0x7FFFFFF)];
          }
          uint64_t v216 = v215[4 * *((unsigned int *)v173 + 15) + v213];
          uint64_t v217 = *(void *)(v216 + 40);
          if (v217 == v216 + 40)
          {
            uint64_t v219 = 0;
            if ((v214 & 0x40000000) == 0) {
              goto LABEL_313;
            }
          }
          else
          {
            if (v217) {
              uint64_t v218 = v217 - 24;
            }
            else {
              uint64_t v218 = 0;
            }
            if (*(unsigned __int8 *)(v218 + 16) - 29 >= 0xB) {
              uint64_t v219 = 0;
            }
            else {
              uint64_t v219 = v218;
            }
            if ((v214 & 0x40000000) == 0)
            {
LABEL_313:
              uint64_t v220 = &v173[-4 * (v214 & 0x7FFFFFF)];
LABEL_316:
              int v221 = (llvm::Value *)v220[4 * v213];
              if ((llvm::Value *)v219 == v221
                || (llvm::Instruction::mayHaveSideEffects((llvm::Instruction *)v219) & 1) != 0)
              {
                goto LABEL_330;
              }
              if (*(unsigned char *)(v219 + 16) != 30)
              {
                switch(*(unsigned char *)(v219 + 16))
                {
                  case 0x1E:
                    __break(1u);
                    goto LABEL_493;
                  case 0x1F:
                    int v223 = (*(_DWORD *)(v219 + 20) >> 1) & 0x3FFFFFF;
                    goto LABEL_325;
                  case 0x20:
                  case 0x26:
                    int v223 = (*(_DWORD *)(v219 + 20) & 0x7FFFFFF) - 1;
                    goto LABEL_325;
                  case 0x24:
                    int v223 = *(_WORD *)(v219 + 18) & 1;
                    goto LABEL_325;
                  case 0x25:
                    goto LABEL_321;
                  case 0x27:
                    int v223 = *(_DWORD *)(v219 + 80) + 1;
LABEL_325:
                    if (v223 == 1) {
                      goto LABEL_321;
                    }
                    goto LABEL_320;
                  default:
                    goto LABEL_320;
                }
              }
              if ((*(_DWORD *)(v219 + 20) & 0x7FFFFFF) == 3)
              {
LABEL_320:
                if (!llvm::isSafeToLoadUnconditionally(v221, v315, (uint64_t)&__src, v311, (uint64_t *)v219, 0, 0)) {
                  goto LABEL_330;
                }
              }
LABEL_321:
              ++v213;
              char v187 = 1;
              if (v213 == v212) {
                goto LABEL_331;
              }
              continue;
            }
          }
          break;
        }
        uint64_t v220 = (uint64_t *)*(v173 - 1);
        goto LABEL_316;
      }
      continue;
    }
  }
LABEL_339:
  if (v353)
  {
    uint64_t v224 = (char *)v352;
    uint64_t v225 = (char *)v352 + 8 * v353;
    do
    {
      uint64_t v226 = *(void *)v224;
      uint64_t v227 = *(void *)(*(void *)v224 + 8);
      if (v227)
      {
        unint64_t v228 = *(llvm::Value **)(v226 - 64);
        uint64_t v229 = *(llvm::Value **)(v226 - 32);
        uint64_t v230 = *(void *)(*(void *)(*(void *)(v226 + 40) + 56) + 40) + 272;
        do
        {
          uint64_t v231 = *(void *)(v227 + 24);
          int v232 = *(unsigned __int8 *)(v231 + 16);
          if (v231 && v232 == 77)
          {
            uint64_t v233 = *(void *)(v231 + 8);
            if (!v233 || *(void *)(v233 + 8)) {
              goto LABEL_398;
            }
            uint64_t v231 = *(void *)(v233 + 24);
            int v232 = *(unsigned __int8 *)(v231 + 16);
          }
          else if (!v231)
          {
            goto LABEL_398;
          }
          if (v232 != 60) {
            goto LABEL_398;
          }
          unint64_t v234 = *(unsigned __int16 *)(v231 + 18);
          if ((v234 & 0x381) != 0
            || !llvm::isSafeToLoadUnconditionally(v228, *(void *)v231, (v234 >> 1) & 0x3F, v230, (uint64_t *)v231, 0, 0)|| !llvm::isSafeToLoadUnconditionally(v229, *(void *)v231, ((unint64_t)*(unsigned __int16 *)(v231 + 18) >> 1) & 0x3F, v230, (uint64_t *)v231, 0, 0))
          {
            goto LABEL_398;
          }
          uint64_t v227 = *(void *)(v227 + 8);
        }
        while (v227);
      }
      v224 += 8;
    }
    while (v224 != v225);
  }
  uint64_t v236 = a2;
  int v235 = (int32x2_t *)a1;
  if (!v168) {
    goto LABEL_413;
  }
  uint64_t v237 = *(unsigned int *)(a3 + 312);
  if (v237)
  {
    uint64_t v238 = *(llvm::Value ***)(a3 + 304);
    uint64_t v239 = &v238[v237];
    uint64_t v240 = (unsigned int *)(a1 + 192);
    while (1)
    {
      uint64_t v241 = *(void *)*v238;
      unsigned int v242 = *(unsigned __int8 *)(v241 + 16);
      llvm::Value::dropDroppableUse(*v238, v159);
      BOOL v243 = v241 && v242 >= 0x1C;
      if (v243 && !*(void *)(v241 + 8) && llvm::wouldInstructionBeTriviallyDead(v241, 0)) {
        break;
      }
LABEL_364:
      if (++v238 == v239) {
        goto LABEL_433;
      }
    }
    long long __src = (void *)4;
    unsigned int v317 = 0;
    uint64_t v318 = (int32x2_t ****)v241;
    if (v241 != -8192 && v241 != -4096 && v241 != 0) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__src);
    }
    uint64_t v245 = *(unsigned int *)(a1 + 200);
    unint64_t v246 = *(void *)(a1 + 192);
    if (v245 >= *(_DWORD *)(a1 + 204))
    {
      unint64_t v264 = v245 + 1;
      BOOL v265 = v246 + 24 * v245 > (unint64_t)&__src;
      if (v246 > (unint64_t)&__src || !v265)
      {
        sub_1CC0BD844(v240, v264);
        unint64_t v246 = *(void *)v240;
        goto LABEL_374;
      }
      uint64_t v266 = (char *)&__src - v246;
      sub_1CC0BD844(v240, v264);
      unint64_t v246 = *(void *)v240;
      p_src = (void **)&v266[*(void *)v240];
    }
    else
    {
LABEL_374:
      p_src = &__src;
    }
    unsigned int v248 = *(_DWORD *)(a1 + 200);
    uint64_t v249 = (unint64_t *)(v246 + 24 * v248);
    *uint64_t v249 = 4;
    v249[1] = 0;
    uint64_t v250 = p_src[2];
    v249[2] = (unint64_t)v250;
    if (v250 != (void *)-8192 && v250 != (void *)-4096)
    {
      if (v250)
      {
        unint64_t v251 = (unint64_t)*p_src & 0xFFFFFFFFFFFFFFF8;
        v249[1] = *(void *)v251;
        *(void *)unint64_t v251 = v249;
        *uint64_t v249 = v251 | 4;
        uint64_t v252 = (unint64_t *)v249[1];
        if (v252) {
          unint64_t *v252 = *v252 & 7 | (unint64_t)(v249 + 1);
        }
      }
    }
    *(_DWORD *)(a1 + 200) = v248 + 1;
    if (v318 != (int32x2_t ****)-8192 && v318 != (int32x2_t ****)-4096 && v318)
    {
      unint64_t v253 = (unint64_t)__src & 0xFFFFFFFFFFFFFFF8;
      *(void *)((unint64_t)__src & 0xFFFFFFFFFFFFFFF8) = v317;
      if (v317)
      {
        unint64_t *v317 = *v317 & 7 | v253;
      }
      else
      {
        unint64_t v254 = v318;
        uint64_t v255 = ***v318;
        unint64_t v256 = (unint64_t)v255[303];
        if (v256 <= v253)
        {
          uint64_t v257 = v255[305].u32[0];
          if (v256 + 16 * v257 > v253)
          {
            unsigned int v258 = v257 - 1;
            LODWORD(v259) = v258 & ((v318 >> 4) ^ (v318 >> 9));
            char v260 = (int32x2_t *****)(v256 + 16 * v259);
            uint64_t v261 = *v260;
            if (v318 == *v260)
            {
LABEL_391:
              llvm::Instruction *v260 = (int32x2_t ****)-8192;
              v255[304] = vadd_s32(v255[304], (int32x2_t)0x1FFFFFFFFLL);
              unint64_t v254 = v318;
            }
            else
            {
              int v262 = 1;
              while (v261 != (int32x2_t ****)-4096)
              {
                int v263 = v259 + v262++;
                uint64_t v259 = v263 & v258;
                uint64_t v261 = *(int32x2_t *****)(v256 + 16 * v259);
                if (v318 == v261)
                {
                  char v260 = (int32x2_t *****)(v256 + 16 * v259);
                  goto LABEL_391;
                }
              }
            }
            *((unsigned char *)v254 + 17) &= ~1u;
          }
        }
      }
    }
    goto LABEL_364;
  }
LABEL_433:
  unsigned int v275 = v353;
  if (v361 | v353)
  {
    if (v361)
    {
      uint64_t v279 = (void **)v360;
      uint64_t v280 = 8 * v361;
      do
      {
        uint64_t v281 = *v279++;
        long long __src = v281;
        sub_1CD780E54(a1 + 592, (uint64_t *)&__src);
        v280 -= 8;
      }
      while (v280);
      unsigned int v275 = v353;
    }
    if (v275)
    {
      unsigned int v282 = (void **)v352;
      uint64_t v283 = 8 * v275;
      do
      {
        uint64_t v284 = *v282++;
        long long __src = v284;
        sub_1CD780ED4(a1 + 648, (uint64_t *)&__src);
        v283 -= 8;
      }
      while (v283);
    }
    uint64_t v272 = a1 + 24;
LABEL_417:
    sub_1CCE93F38(v272, (uint64_t *)&v320);
  }
  else
  {
    uint64_t v276 = *(char ***)(a1 + 576);
    unint64_t v277 = *(void *)(a1 + 584);
    if ((unint64_t)v276 >= v277)
    {
      int v291 = *(void **)(a1 + 568);
      uint64_t v292 = v276 - (char **)v291;
      unint64_t v293 = v292 + 1;
      if ((unint64_t)(v292 + 1) >> 61) {
        abort();
      }
      uint64_t v294 = v277 - (void)v291;
      if (v294 >> 2 > v293) {
        unint64_t v293 = v294 >> 2;
      }
      if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v295 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v295 = v293;
      }
      if (v295)
      {
        if (v295 >> 61) {
          sub_1CB833614();
        }
        unint64_t v296 = (char *)operator new(8 * v295);
      }
      else
      {
        unint64_t v296 = 0;
      }
      uint64_t v298 = &v296[8 * v292];
      *(void *)uint64_t v298 = v320;
      unint64_t v278 = v298 + 8;
      if (v276 != v291)
      {
        do
        {
          uint64_t v299 = (uint64_t)*--v276;
          *((void *)v298 - 1) = v299;
          v298 -= 8;
        }
        while (v276 != v291);
        uint64_t v276 = *(char ***)(a1 + 568);
      }
      *(void *)(a1 + 568) = v298;
      *(void *)(a1 + 576) = v278;
      *(void *)(a1 + 584) = &v296[8 * v295];
      if (v276) {
        operator delete(v276);
      }
    }
    else
    {
      *uint64_t v276 = v320;
      unint64_t v278 = v276 + 1;
    }
    *(void *)(a1 + 576) = v278;
  }
  uint64_t v273 = (uint64_t)v320;
LABEL_420:
  if (SHIBYTE(v349) < 0) {
    operator delete(__p);
  }
  if (v337 != v339) {
    free(v337);
  }
  if (v352 != v354) {
    free(v352);
  }
  if ((v350 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)&v351[0], 8);
  }
  if (v360 != v362) {
    free(v360);
  }
  if ((v355 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v356.i64[0], 8);
  }
  return v273;
}

uint64_t sub_1CCE95CB4(uint64_t a1, unint64_t *a2)
{
  uint64_t v619 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *a2;
  *(void *)(a1 + 96) = *a2;
  uint64_t v4 = a1 + 96;
  unint64_t v5 = a2[1];
  *(void *)(a1 + 104) = v5;
  unint64_t v6 = a2[2];
  *(unsigned char *)(a1 + 136) = (v6 & 4) != 0;
  unint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  BOOL v9 = v3 < v7;
  if (v3 <= v7) {
    unint64_t v3 = *(void *)(a1 + 40);
  }
  char v10 = v5 > v8 || v9;
  *(unsigned char *)(a1 + 137) = v10;
  if (v8 < v5) {
    unint64_t v5 = v8;
  }
  *(void *)(a1 + 112) = v3;
  *(void *)(a1 + 120) = v5;
  *(void *)(a1 + 128) = v5 - v3;
  *(void *)(a1 + 144) = v6 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(a1 + 152) = *(void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v12 = (uint64_t *)(a1 + 176);
  *(void *)(a1 + 224) = *(void *)(v11 + 40);
  *(void *)(a1 + 232) = v11 + 24;
  uint64_t v13 = *(unsigned __int8 **)(v11 + 48);
  uint64_t v611 = (const char *)v13;
  if (v13)
  {
    llvm::MetadataTracking::track((uint64_t)&v611, v13, 2);
    uint64_t v14 = (uint64_t)v611;
  }
  else
  {
    uint64_t v14 = 0;
  }
  sub_1CB8461A4(v4 + 80, 0, v14);
  if (v611)
  {
    int v120 = *(unsigned __int8 *)v611;
    if ((v120 - 4) > 0x1E)
    {
      if ((v120 - 3) >= 0xFFFFFFFE) {
        unsigned int v161 = v611;
      }
      else {
        unsigned int v161 = 0;
      }
      if ((v120 - 3) < 0xFFFFFFFE)
      {
        if (v120 == 3) {
          *((void *)v611 + 1) = 0;
        }
        goto LABEL_11;
      }
      unint64_t v122 = (unint64_t)(v161 + 8);
    }
    else
    {
      if ((v611[1] & 0x7F) != 2 && !*((_DWORD *)v611 + 3)) {
        goto LABEL_11;
      }
      uint64_t v121 = *((void *)v611 + 2);
      if ((v121 & 4) == 0) {
        goto LABEL_11;
      }
      unint64_t v122 = v121 & 0xFFFFFFFFFFFFFFF8;
      if (!v122) {
        goto LABEL_11;
      }
    }
    uint64_t v615 = (uint64_t)&v611;
    sub_1CC5FA668(v122 + 16, &v615);
  }
LABEL_11:
  uint64_t v15 = *(unsigned __int8 **)(v11 + 48);
  uint64_t v608 = v15;
  if (v15)
  {
    llvm::MetadataTracking::track((uint64_t)&v608, v15, 2);
    uint64_t v16 = (uint64_t)v608;
  }
  else
  {
    uint64_t v16 = 0;
  }
  sub_1CB8461A4(v4 + 80, 0, v16);
  if (v608)
  {
    int v17 = *v608;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        unint64_t v75 = v608;
      }
      else {
        unint64_t v75 = 0;
      }
      if ((v17 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v76 = (unint64_t)(v75 + 8);
LABEL_83:
        uint64_t v615 = (uint64_t)&v608;
        sub_1CC5FA668(v76 + 16, &v615);
        goto LABEL_18;
      }
      if (v17 == 3) {
        *((void *)v608 + 1) = 0;
      }
    }
    else if ((v608[1] & 0x7F) == 2 || *((_DWORD *)v608 + 3))
    {
      uint64_t v510 = *((void *)v608 + 2);
      if ((v510 & 4) != 0)
      {
        unint64_t v76 = v510 & 0xFFFFFFFFFFFFFFF8;
        if (v76) {
          goto LABEL_83;
        }
      }
    }
  }
LABEL_18:
  BOOL v18 = *(uint64_t ****)(a1 + 32);
  if ((*((unsigned char *)v18 + 23) & 0x10) != 0)
  {
    uint64_t v19 = ***v18;
    uint64_t v20 = *(void *)(v19 + 152);
    uint64_t v21 = *(unsigned int *)(v19 + 168);
    if (v21)
    {
      LODWORD(v22) = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      unint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
      uint64_t v24 = *v23;
      if (*v23 == v18)
      {
LABEL_26:
        unint64_t v27 = v23[1];
        char v30 = (llvm::AAMDNodes *)*v27;
        char v28 = (char *)(v27 + 2);
        unint64_t v29 = v30;
        goto LABEL_27;
      }
      int v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        int v26 = v22 + v25++;
        uint64_t v22 = v26 & (v21 - 1);
        uint64_t v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == v18)
        {
          unint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_26;
        }
      }
    }
    unint64_t v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_26;
  }
  unint64_t v29 = 0;
  char v28 = &byte_1CFBCE98E;
LABEL_27:
  int v603 = (unsigned __int8 *)v28;
  BOOL v604 = v29;
  unsigned int v605 = ".";
  __int16 v607 = 773;
  uint64_t v611 = (const char *)&v603;
  uint64_t v613 = v4;
  __int16 v614 = 3074;
  uint64_t v615 = (uint64_t)&v611;
  *((void *)&v616 + 1) = ".";
  __int16 v618 = 770;
  llvm::Twine::str((llvm::Twine *)&v615, &v609);
  long long v32 = (void **)(a1 + 312);
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*v32);
  }
  *(_OWORD *)long long v32 = v609;
  *(void *)(a1 + 328) = v610;
  uint64_t v33 = *(llvm::IntegerType ****)(*(void *)(a1 + 144) + 24);
  unsigned int v34 = *((unsigned __int8 *)v33 + 16);
  if (v34 <= 0x52)
  {
    if (v34 == 61)
    {
      uint64_t v37 = (uint64_t)*(v33 - 4);
      llvm::Instruction::getAAMetadata(*(uint64_t ****)(*(void *)(a1 + 144) + 24), &v603);
      unsigned int v38 = (uint64_t *)*(v33 - 8);
      uint64_t v39 = *v38;
      if (*(unsigned char *)(*v38 + 8) == 15)
      {
        uint64_t v615 = 0;
        uint64_t v40 = llvm::Value::stripInBoundsOffsets((uint64_t)v38, (void (*)(uint64_t, uint64_t))nullsub_608, (uint64_t)&v611);
        if (*(unsigned char *)(v40 + 16) == 59) {
          unint64_t v41 = (const char *)v40;
        }
        else {
          unint64_t v41 = 0;
        }
        uint64_t v615 = (uint64_t)v41;
        if (v41) {
          sub_1CCE93F38(*(void *)(a1 + 16) + 400, &v615);
        }
        uint64_t v39 = *v38;
      }
      unint64_t v42 = *(void *)(a1 + 128);
      if (v42 < (unint64_t)(sub_1CB83544C(*(void *)a1, v39) + 7) >> 3)
      {
        uint64_t v43 = llvm::IntegerType::get(**v33, (llvm::LLVMContext *)(8 * *(_DWORD *)(a1 + 128)));
        BOOL v44 = *(unsigned char **)a1;
        unint64_t v45 = *(void *)(a1 + 112) - *(void *)(a1 + 96);
        uint64_t v615 = (uint64_t)"extract";
        __int16 v618 = 259;
        unsigned int v38 = (uint64_t *)sub_1CCEA3AC8(v44, (uint64_t)v12, v38, v43, v45, (uint64_t)&v615);
      }
      uint64_t v46 = *(void *)(a1 + 72);
      if (v46)
      {
        unint64_t v47 = (llvm::MDNode *)v603;
        char v48 = v604;
        BOOL v50 = (llvm::MDNode *)v605;
        unint64_t v49 = v606;
        uint64_t v51 = *v38;
        if (*v38 != v46)
        {
          uint64_t v164 = *(void *)(a1 + 40);
          uint64_t v165 = *(llvm::FixedVectorType **)(a1 + 80);
          unint64_t v166 = *(void *)(a1 + 88);
          *(void *)int v602 = (*(void *)(a1 + 112) - v164) / v166;
          uint64_t v167 = (llvm::Type *)(((*(void *)(a1 + 120) - v164) / v166) - v602[0]);
          if (v167 != 1)
          {
            llvm::FixedVectorType::get(v165, v167);
            uint64_t v165 = v168;
            uint64_t v51 = *v38;
          }
          __int16 v169 = (llvm::IRBuilderBase *)v12;
          if ((llvm::FixedVectorType *)v51 != v165) {
            unsigned int v38 = (uint64_t *)sub_1CCEA2284(*(void *)(*(void *)a1 + 232), *(_DWORD *)(*(void *)a1 + 240), v12, (uint64_t)v38, (uint64_t)v165);
          }
          uint64_t v334 = *(void *)(a1 + 32);
          unint64_t v335 = *(llvm::Type **)(v334 + 64);
          char v336 = *(_WORD *)(v334 + 18);
          uint64_t v611 = "load";
          __int16 v614 = 259;
          char v595 = v336 & 0x3F;
          uint64_t v597 = v335;
          unint64_t v337 = operator new(0x60uLL);
          v337[13] = v337[13] & 0x38000000 | 1;
          uint64_t v338 = (llvm::Instruction *)(v337 + 8);
          *(void *)unint64_t v337 = 0;
          *((void *)v337 + 1) = 0;
          *((void *)v337 + 2) = 0;
          *((void *)v337 + 3) = v337 + 8;
          __int16 v618 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v337 + 8), (uint64_t)v597, v334, (const char **)&v615, 0, v595, 0);
          (*(void (**)(void, llvm::Instruction *, const char **, void, void))(**(void **)(a1 + 256)
                                                                                             + 16))(*(void *)(a1 + 256), v338, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
          uint64_t v339 = *(unsigned int *)(a1 + 184);
          if (v339)
          {
            uint64_t v402 = *(void *)(a1 + 176);
            unsigned int v598 = (llvm::Type *)(v402 + 16 * v339);
            do
            {
              llvm::Instruction::setMetadata(v338, *(_DWORD *)v402, *(llvm::MDNode **)(v402 + 8));
              v402 += 16;
            }
            while ((llvm::Type *)v402 != v598);
          }
          uint64_t v615 = (uint64_t)"vec";
          __int16 v618 = 259;
          unsigned int v12 = (uint64_t *)v169;
          unsigned int v38 = (uint64_t *)sub_1CCEA3DA0(v169, (unsigned __int8 *)v338, (const llvm::APInt *)v38, v602[0], (uint64_t)&v615);
        }
        unint64_t v52 = sub_1CC27BF8C(v12, (uint64_t)v38, *(void *)(a1 + 32), *(_WORD *)(*(void *)(a1 + 32) + 18) & 0x3F | 0x100u, 0);
        uint64_t v615 = 0x190000000ALL;
        llvm::Instruction::copyMetadata((uint64_t)v52, (uint64_t)v33, (int *)&v615, 2);
        if (v47)
        {
          if (!v48)
          {
            uint64_t v160 = 0;
            goto LABEL_171;
          }
        }
        else if (!v48)
        {
          if (!((unint64_t)v50 | (unint64_t)v49)) {
            goto LABEL_53;
          }
          uint64_t v160 = 0;
LABEL_559:
          if (!*((void *)v52 + 6) && (*((unsigned char *)v52 + 23) & 0x20) == 0) {
            goto LABEL_172;
          }
          goto LABEL_171;
        }
        uint64_t v160 = llvm::AAMDNodes::shiftTBAAStruct(v48, (llvm::MDNode *)(*(void *)(a1 + 112) - *(void *)(a1 + 96)), v53);
        if (!v47) {
          goto LABEL_559;
        }
LABEL_171:
        llvm::Value::setMetadata((uint64_t ***)v52, 1, v47);
LABEL_172:
        if (v160 || *((void *)v52 + 6) || (*((unsigned char *)v52 + 23) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v52, 5, v160);
        }
        if (v50 || *((void *)v52 + 6) || (*((unsigned char *)v52 + 23) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v52, 7, v50);
        }
        if (v49 || *((void *)v52 + 6) || (*((unsigned char *)v52 + 23) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v52, 8, v49);
        }
LABEL_53:
        unint64_t v54 = *(unsigned int **)(a1 + 16);
        uint64_t v615 = 4;
        *(void *)&long long v616 = 0;
        *((void *)&v616 + 1) = v33;
        if (v33 != (llvm::IntegerType ***)-8192 && v33 != (llvm::IntegerType ***)-4096 && v33) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v615);
        }
        uint64_t v55 = v54[50];
        unint64_t v56 = *((void *)v54 + 24);
        char v57 = &v615;
        if (v55 >= v54[51])
        {
          BOOL v517 = (unint64_t *)(v54 + 48);
          unint64_t v518 = v55 + 1;
          BOOL v519 = v56 + 24 * v55 > (unint64_t)&v615;
          if (v56 <= (unint64_t)&v615 && v519)
          {
            BOOL v588 = (char *)&v615 - v56;
            sub_1CC0BD844(v54 + 48, v518);
            unint64_t v56 = *v517;
            char v57 = (uint64_t *)&v588[*v517];
          }
          else
          {
            sub_1CC0BD844(v54 + 48, v518);
            unint64_t v56 = *v517;
            char v57 = &v615;
          }
        }
        unsigned int v58 = v54[50];
        uint64_t v59 = (unint64_t *)(v56 + 24 * v58);
        unint64_t *v59 = 4;
        v59[1] = 0;
        uint64_t v60 = v57[2];
        v59[2] = v60;
        if (v60 != -8192 && v60 != -4096)
        {
          if (v60)
          {
            unint64_t v61 = *v57 & 0xFFFFFFFFFFFFFFF8;
            v59[1] = *(void *)v61;
            *(void *)unint64_t v61 = v59;
            unint64_t *v59 = v61 | 4;
            uint64_t v62 = (unint64_t *)v59[1];
            if (v62) {
              unint64_t *v62 = *v62 & 7 | (unint64_t)(v59 + 1);
            }
          }
        }
        v54[50] = v58 + 1;
        if (*((void *)&v616 + 1) == -8192 || *((void *)&v616 + 1) == -4096 || !*((void *)&v616 + 1)) {
          goto LABEL_89;
        }
        unint64_t v63 = v615 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v615 & 0xFFFFFFFFFFFFFFF8) = v616;
        unint64_t v64 = (unint64_t *)v616;
        if (!(void)v616)
        {
          uint64_t v65 = *((void *)&v616 + 1);
          uint64_t v66 = (int32x2_t *)****((void ****)&v616 + 1);
          unint64_t v67 = (unint64_t)v66[303];
          if (v67 > v63) {
            goto LABEL_89;
          }
          uint64_t v68 = v66[305].u32[0];
          if (v67 + 16 * v68 <= v63) {
            goto LABEL_89;
          }
          unsigned int v69 = v68 - 1;
          LODWORD(v70) = v69 & ((DWORD2(v616) >> 4) ^ (DWORD2(v616) >> 9));
          uint64_t v71 = (uint64_t *)(v67 + 16 * v70);
          uint64_t v72 = *v71;
          if (*((void *)&v616 + 1) != *v71)
          {
            int v73 = 1;
            while (v72 != -4096)
            {
              int v74 = v70 + v73++;
              uint64_t v70 = v74 & v69;
              uint64_t v72 = *(void *)(v67 + 16 * v70);
              if (*((void *)&v616 + 1) == v72) {
                goto LABEL_73;
              }
            }
            goto LABEL_75;
          }
LABEL_74:
          uint64_t *v71 = -8192;
          v66[304] = vadd_s32(v66[304], (int32x2_t)0x1FFFFFFFFLL);
          uint64_t v65 = *((void *)&v616 + 1);
LABEL_75:
          *(unsigned char *)(v65 + 17) &= ~1u;
          goto LABEL_89;
        }
        goto LABEL_157;
      }
      uint64_t v98 = *v38;
      if (*(void *)(a1 + 64) && *(unsigned char *)(v98 + 8) == 13)
      {
        uint64_t v99 = (llvm::MDNode *)v603;
        uint64_t v100 = v604;
        uint64_t v102 = (llvm::MDNode *)v605;
        unint64_t v101 = v606;
        if (sub_1CB83544C(*(void *)a1, v98) != (unint64_t)*(unsigned int *)(*(void *)(a1 + 64) + 8) >> 8)
        {
          unsigned int v600 = v12;
          uint64_t v535 = *(void *)(a1 + 32);
          uint64_t v536 = *(void *)(v535 + 64);
          __int16 v537 = *(_WORD *)(v535 + 18);
          uint64_t v611 = "oldload";
          __int16 v614 = 259;
          char v538 = v537 & 0x3F;
          int v539 = operator new(0x60uLL);
          v539[13] = v539[13] & 0x38000000 | 1;
          uint64_t v540 = (llvm::Instruction *)(v539 + 8);
          *(void *)int v539 = 0;
          *((void *)v539 + 1) = 0;
          *((void *)v539 + 2) = 0;
          *((void *)v539 + 3) = v539 + 8;
          __int16 v618 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v539 + 8), v536, v535, (const char **)&v615, 0, v538, 0);
          (*(void (**)(void, llvm::Instruction *, const char **, void, void))(**(void **)(a1 + 256)
                                                                                             + 16))(*(void *)(a1 + 256), v540, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
          uint64_t v541 = *(unsigned int *)(a1 + 184);
          if (v541)
          {
            uint64_t v554 = *(void *)(a1 + 176);
            uint64_t v555 = v554 + 16 * v541;
            do
            {
              llvm::Instruction::setMetadata(v540, *(_DWORD *)v554, *(llvm::MDNode **)(v554 + 8));
              v554 += 16;
            }
            while (v554 != v555);
          }
          unsigned int v12 = v600;
          unsigned int v542 = sub_1CCEA2284(*(void *)(*(void *)a1 + 232), *(_DWORD *)(*(void *)a1 + 240), v600, (uint64_t)v540, *(void *)(a1 + 64));
          unint64_t v543 = *(void *)(a1 + 96) - *(void *)(a1 + 40);
          uint64_t v544 = *(unsigned char **)a1;
          uint64_t v545 = (uint64_t)*(v33 - 8);
          uint64_t v615 = (uint64_t)"insert";
          __int16 v618 = 259;
          unsigned int v38 = (uint64_t *)sub_1CCEA2F70(v544, (uint64_t)v600, (llvm::ConstantInt ***)v542, v545, v543, (uint64_t)&v615);
        }
        unint64_t v103 = sub_1CCEA2284(*(void *)(*(void *)a1 + 232), *(_DWORD *)(*(void *)a1 + 240), v12, (uint64_t)v38, *(void *)(a1 + 56));
        unint64_t v104 = sub_1CC27BF8C(v12, (uint64_t)v103, *(void *)(a1 + 32), *(_WORD *)(*(void *)(a1 + 32) + 18) & 0x3F | 0x100u, 0);
        uint64_t v615 = 0x190000000ALL;
        llvm::Instruction::copyMetadata((uint64_t)v104, (uint64_t)v33, (int *)&v615, 2);
        if (v99)
        {
          if (!v100)
          {
            unsigned __int8 v315 = 0;
            goto LABEL_406;
          }
        }
        else if (!v100)
        {
          if (!((unint64_t)v102 | (unint64_t)v101)) {
            goto LABEL_106;
          }
          unsigned __int8 v315 = 0;
LABEL_690:
          if (!*((void *)v104 + 6) && (*((unsigned char *)v104 + 23) & 0x20) == 0) {
            goto LABEL_407;
          }
          goto LABEL_406;
        }
        unsigned __int8 v315 = llvm::AAMDNodes::shiftTBAAStruct(v100, (llvm::MDNode *)(*(void *)(a1 + 112) - *(void *)(a1 + 96)), v105);
        if (!v99) {
          goto LABEL_690;
        }
LABEL_406:
        llvm::Value::setMetadata((uint64_t ***)v104, 1, v99);
LABEL_407:
        if (v315 || *((void *)v104 + 6) || (*((unsigned char *)v104 + 23) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v104, 5, v315);
        }
        if (v102 || *((void *)v104 + 6) || (*((unsigned char *)v104 + 23) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v104, 7, v102);
        }
        if (v101 || *((void *)v104 + 6) || (*((unsigned char *)v104 + 23) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v104, 8, v101);
        }
LABEL_106:
        uint64_t v106 = *(unsigned int **)(a1 + 16);
        uint64_t v615 = 4;
        *(void *)&long long v616 = 0;
        *((void *)&v616 + 1) = v33;
        if (v33 != (llvm::IntegerType ***)-8192 && v33 != (llvm::IntegerType ***)-4096 && v33) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v615);
        }
        uint64_t v107 = v106[50];
        unint64_t v108 = *((void *)v106 + 24);
        int64_t v109 = &v615;
        if (v107 >= v106[51])
        {
          unint64_t v546 = (unint64_t *)(v106 + 48);
          unint64_t v547 = v107 + 1;
          BOOL v548 = v108 + 24 * v107 > (unint64_t)&v615;
          if (v108 <= (unint64_t)&v615 && v548)
          {
            uint64_t v591 = (char *)&v615 - v108;
            sub_1CC0BD844(v106 + 48, v547);
            unint64_t v108 = *v546;
            int64_t v109 = (uint64_t *)&v591[*v546];
          }
          else
          {
            sub_1CC0BD844(v106 + 48, v547);
            unint64_t v108 = *v546;
            int64_t v109 = &v615;
          }
        }
        unsigned int v110 = v106[50];
        int v111 = (unint64_t *)(v108 + 24 * v110);
        *int v111 = 4;
        v111[1] = 0;
        uint64_t v112 = v109[2];
        void v111[2] = v112;
        if (v112 != -8192 && v112 != -4096)
        {
          if (v112)
          {
            unint64_t v113 = *v109 & 0xFFFFFFFFFFFFFFF8;
            v111[1] = *(void *)v113;
            *(void *)unint64_t v113 = v111;
            *int v111 = v113 | 4;
            char v114 = (unint64_t *)v111[1];
            if (v114) {
              *char v114 = *v114 & 7 | (unint64_t)(v111 + 1);
            }
          }
        }
        v106[50] = v110 + 1;
        if (*((void *)&v616 + 1) == -8192 || *((void *)&v616 + 1) == -4096 || !*((void *)&v616 + 1)) {
          goto LABEL_89;
        }
        unint64_t v63 = v615 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v615 & 0xFFFFFFFFFFFFFFF8) = v616;
        unint64_t v64 = (unint64_t *)v616;
        if (!(void)v616)
        {
          uint64_t v65 = *((void *)&v616 + 1);
          uint64_t v66 = (int32x2_t *)****((void ****)&v616 + 1);
          unint64_t v67 = (unint64_t)v66[303];
          if (v67 > v63) {
            goto LABEL_89;
          }
          uint64_t v115 = v66[305].u32[0];
          if (v67 + 16 * v115 <= v63) {
            goto LABEL_89;
          }
          unsigned int v116 = v115 - 1;
          LODWORD(v70) = v116 & ((DWORD2(v616) >> 4) ^ (DWORD2(v616) >> 9));
          uint64_t v71 = (uint64_t *)(v67 + 16 * v70);
          uint64_t v117 = *v71;
          if (*((void *)&v616 + 1) != *v71)
          {
            int v118 = 1;
            while (v117 != -4096)
            {
              int v119 = v70 + v118++;
              uint64_t v70 = v119 & v116;
              uint64_t v117 = *(void *)(v67 + 16 * v70);
              if (*((void *)&v616 + 1) == v117)
              {
LABEL_73:
                uint64_t v71 = (uint64_t *)(v67 + 16 * v70);
                goto LABEL_74;
              }
            }
            goto LABEL_75;
          }
          goto LABEL_74;
        }
LABEL_157:
        unint64_t *v64 = *v64 & 7 | v63;
        goto LABEL_89;
      }
      uint64_t v137 = sub_1CB83544C(*(void *)a1, v98);
      if (*(void *)(a1 + 112) == *(void *)(a1 + 40) && *(void *)(a1 + 120) == *(void *)(a1 + 48))
      {
        uint64_t v138 = v137;
        unint64_t v139 = *(void *)(a1 + 128);
        if (sub_1CCEA0BBC(*(void *)a1, *v38, *(void *)(a1 + 56)))
        {
          unsigned int v140 = *(_DWORD *)(*v38 + 8);
          uint64_t v141 = *(void *)(a1 + 56);
LABEL_145:
          if (v140 == 13)
          {
            if (v141)
            {
              unsigned int v142 = *(_DWORD *)(v141 + 8);
              if (v142 == 13)
              {
                unsigned int v143 = v140 >> 8;
                if (v143 > v142 >> 8)
                {
                  if (**(unsigned char **)a1)
                  {
                    uint64_t v615 = (uint64_t)"endian_shift";
                    __int16 v618 = 259;
                    int v144 = llvm::ConstantInt::get((llvm::ConstantInt *)*v38, v143 - (v142 >> 8), 0);
                    unsigned int v38 = (uint64_t *)sub_1CC2429AC((uint64_t)v12, (uint64_t)v38, (uint64_t)v144, (uint64_t)&v615, 0);
                  }
                  uint64_t v611 = "load.trunc";
                  __int16 v614 = 259;
                  if (*v38 != v141)
                  {
                    if (*((unsigned __int8 *)v38 + 16) <= 0x14u)
                    {
                      uint64_t v405 = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 248)
                                                                                            + 224))(*(void *)(a1 + 248), 38, v38, v141);
                      unsigned int v38 = (uint64_t *)v405;
                      if (v405)
                      {
                        if (*(unsigned __int8 *)(v405 + 16) >= 0x1Cu)
                        {
                          (*(void (**)(void, uint64_t, const char **, void, void))(**(void **)(a1 + 256)
                                                                                                 + 16))(*(void *)(a1 + 256), v405, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
                          uint64_t v582 = *(unsigned int *)(a1 + 184);
                          if (v582)
                          {
                            uint64_t v583 = *(void *)(a1 + 176);
                            uint64_t v584 = v583 + 16 * v582;
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v38, *(_DWORD *)v583, *(llvm::MDNode **)(v583 + 8));
                              v583 += 16;
                            }
                            while (v583 != v584);
                          }
                        }
                      }
                    }
                    else
                    {
                      __int16 v618 = 257;
                      unsigned int v38 = (uint64_t *)llvm::CastInst::Create(38, (uint64_t)v38, v141, (const char **)&v615, 0);
                      (*(void (**)(void, uint64_t *, const char **, void, void))(**(void **)(a1 + 256)
                                                                                               + 16))(*(void *)(a1 + 256), v38, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
                      uint64_t v145 = *(unsigned int *)(a1 + 184);
                      if (v145)
                      {
                        uint64_t v146 = *(void *)(a1 + 176);
                        uint64_t v147 = v146 + 16 * v145;
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v38, *(_DWORD *)v146, *(llvm::MDNode **)(v146 + 8));
                          v146 += 16;
                        }
                        while (v146 != v147);
                      }
                    }
                  }
                  uint64_t v141 = *(void *)(a1 + 56);
                }
              }
            }
          }
          uint64_t v178 = sub_1CCEA2284(*(void *)(*(void *)a1 + 232), *(_DWORD *)(*(void *)a1 + 240), v12, (uint64_t)v38, v141);
          BOOL v173 = *(unsigned __int8 **)(a1 + 32);
          __int16 v175 = *((_WORD *)v33 + 9) & 1;
          __int16 v176 = *((_WORD *)v173 + 9) & 0x3F | 0x100;
          unsigned int v177 = v12;
          goto LABEL_205;
        }
        if ((unint64_t)(v138 + 7) >> 3 > v139)
        {
          uint64_t v141 = *(void *)(a1 + 56);
          if (*(unsigned char *)(v141 + 8) == 13)
          {
            unsigned int v140 = *(_DWORD *)(*v38 + 8);
            if (v140 == 13) {
              goto LABEL_145;
            }
          }
        }
      }
      uint64_t v170 = (uint64_t)**(v33 - 4);
      unsigned int v171 = *(_DWORD *)(v170 + 8);
      if ((v171 & 0xFE) == 0x12) {
        unsigned int v171 = *(_DWORD *)(**(void **)(v170 + 16) + 8);
      }
      uint64_t v172 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)*v38, (llvm::Type *)(v171 >> 8));
      BOOL v173 = sub_1CCEA20C0((uint64_t *)a1, v12, v172);
      uint64_t v174 = (1 << *(_WORD *)(*(void *)(a1 + 32) + 18)) | (*(void *)(a1 + 112) - *(void *)(a1 + 40));
      __int16 v175 = *((_WORD *)v33 + 9) & 1;
      __int16 v176 = (63 - __clz(v174 & -v174)) | 0x100;
      unsigned int v177 = v12;
      uint64_t v178 = (unsigned __int8 *)v38;
LABEL_205:
      uint64_t v179 = sub_1CC27BF8C(v177, (uint64_t)v178, (uint64_t)v173, v176, v175);
      uint64_t v615 = 0x190000000ALL;
      llvm::Instruction::copyMetadata((uint64_t)v179, (uint64_t)v33, (int *)&v615, 2);
      unint64_t v181 = (llvm::MDNode *)v603;
      unsigned int v183 = (llvm::MDNode *)v605;
      uint64_t v182 = v606;
      if (v603 || v604 || v605 || v606)
      {
        if (v604)
        {
          uint64_t v184 = llvm::AAMDNodes::shiftTBAAStruct(v604, (llvm::MDNode *)(*(void *)(a1 + 112) - *(void *)(a1 + 96)), v180);
          unsigned int v183 = (llvm::MDNode *)v605;
          uint64_t v182 = v606;
        }
        else
        {
          uint64_t v184 = 0;
        }
        if (v181 || *((void *)v179 + 6) || (*((unsigned char *)v179 + 23) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v179, 1, v181);
        }
        if (v184 || *((void *)v179 + 6) || (*((unsigned char *)v179 + 23) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v179, 5, v184);
        }
        if (v183 || *((void *)v179 + 6) || (*((unsigned char *)v179 + 23) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v179, 7, v183);
        }
        if (v182 || *((void *)v179 + 6) || (*((unsigned char *)v179 + 23) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v179, 8, v182);
        }
      }
      __int16 v185 = *((_WORD *)v33 + 9);
      if (v185)
      {
        char v186 = *((unsigned char *)v33 + 60);
        *((_WORD *)v179 + 9) = *((_WORD *)v179 + 9) & 0xFC7F | v185 & 0x380;
        *((unsigned char *)v179 + 60) = v186;
      }
      int v187 = *((unsigned __int8 *)v179 + 16);
      if (v187 == 60 || v187 == 61)
      {
        if ((*((_WORD *)v179 + 9) & 0x380) == 0)
        {
LABEL_231:
          uint64_t v188 = *(unsigned int **)(a1 + 16);
          uint64_t v615 = 4;
          *(void *)&long long v616 = 0;
          *((void *)&v616 + 1) = v33;
          if (v33 != (llvm::IntegerType ***)-8192 && v33 != (llvm::IntegerType ***)-4096 && v33) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v615);
          }
          uint64_t v189 = v188[50];
          unint64_t v190 = *((void *)v188 + 24);
          uint64_t v191 = &v615;
          if (v189 >= v188[51])
          {
            uint64_t v523 = (unint64_t *)(v188 + 48);
            unint64_t v524 = v189 + 1;
            BOOL v525 = v190 + 24 * v189 > (unint64_t)&v615;
            if (v190 <= (unint64_t)&v615 && v525)
            {
              long long v590 = (char *)&v615 - v190;
              sub_1CC0BD844(v188 + 48, v524);
              unint64_t v190 = *v523;
              uint64_t v191 = (uint64_t *)&v590[*v523];
            }
            else
            {
              sub_1CC0BD844(v188 + 48, v524);
              unint64_t v190 = *v523;
              uint64_t v191 = &v615;
            }
          }
          unsigned int v192 = v188[50];
          int v193 = (unint64_t *)(v190 + 24 * v192);
          unint64_t *v193 = 4;
          v193[1] = 0;
          uint64_t v194 = v191[2];
          v193[2] = v194;
          if (v194 != -8192 && v194 != -4096)
          {
            if (v194)
            {
              unint64_t v195 = *v191 & 0xFFFFFFFFFFFFFFF8;
              v193[1] = *(void *)v195;
              *(void *)unint64_t v195 = v193;
              unint64_t *v193 = v195 | 4;
              uint64_t v196 = (unint64_t *)v193[1];
              if (v196) {
                *uint64_t v196 = *v196 & 7 | (unint64_t)(v193 + 1);
              }
            }
          }
          v188[50] = v192 + 1;
          if (*((void *)&v616 + 1) != -8192 && *((void *)&v616 + 1) != -4096 && *((void *)&v616 + 1))
          {
            unint64_t v197 = v615 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v615 & 0xFFFFFFFFFFFFFFF8) = v616;
            if ((void)v616)
            {
              *(void *)long long v616 = *(void *)v616 & 7 | v197;
            }
            else
            {
              uint64_t v198 = *((void *)&v616 + 1);
              unsigned int v199 = (int32x2_t *)****((void ****)&v616 + 1);
              unint64_t v200 = (unint64_t)v199[303];
              if (v200 <= v197)
              {
                uint64_t v201 = v199[305].u32[0];
                if (v200 + 16 * v201 > v197)
                {
                  unsigned int v202 = v201 - 1;
                  LODWORD(v203) = v202 & ((DWORD2(v616) >> 4) ^ (DWORD2(v616) >> 9));
                  unsigned int v204 = (uint64_t *)(v200 + 16 * v203);
                  uint64_t v205 = *v204;
                  if (*((void *)&v616 + 1) == *v204)
                  {
LABEL_252:
                    *unsigned int v204 = -8192;
                    v199[304] = vadd_s32(v199[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v198 = *((void *)&v616 + 1);
                  }
                  else
                  {
                    int v206 = 1;
                    while (v205 != -4096)
                    {
                      int v207 = v203 + v206++;
                      uint64_t v203 = v207 & v202;
                      uint64_t v205 = *(void *)(v200 + 16 * v203);
                      if (*((void *)&v616 + 1) == v205)
                      {
                        unsigned int v204 = (uint64_t *)(v200 + 16 * v203);
                        goto LABEL_252;
                      }
                    }
                  }
                  *(unsigned char *)(v198 + 17) &= ~1u;
                }
              }
            }
          }
          sub_1CCEA35C4(a1, v37);
          if (*((void *)v179 - 4) == *(void *)(a1 + 32) && **((void **)v179 - 8) == *(void *)(a1 + 56))
          {
            BOOL v314 = (*((_WORD *)v33 + 9) & 1) == 0;
LABEL_401:
            char v31 = v314;
            return v31 & 1;
          }
LABEL_399:
          char v31 = 0;
          return v31 & 1;
        }
      }
      else if ((v187 - 63) >= 3)
      {
        goto LABEL_231;
      }
      *((_WORD *)v179 + 9) = *((_WORD *)v179 + 9) & 0xFF81 | (2
                                                            * __clz(1 << ((unint64_t)*((unsigned __int16 *)v33
                                                                                              + 9) >> 1))) ^ 0x7E;
      goto LABEL_231;
    }
    uint64_t v78 = (uint64_t)*(v33 - 4);
    llvm::Instruction::getAAMetadata(*(uint64_t ****)(*(void *)(a1 + 144) + 24), &v603);
    uint64_t v79 = (uint64_t)**(v33 - 4);
    unsigned int v80 = *(_DWORD *)(v79 + 8);
    if ((v80 & 0xFE) == 0x12) {
      unsigned int v80 = *(_DWORD *)(**(void **)(v79 + 16) + 8);
    }
    BOOL v81 = (llvm::Type *)(v80 >> 8);
    uint64_t v82 = (uint64_t)*v33;
    uint64_t v599 = (uint64_t)v12;
    if (*(unsigned char *)(a1 + 137)) {
      uint64_t v82 = llvm::IntegerType::get(*(llvm::IntegerType **)v82, (llvm::LLVMContext *)(8 * *(_DWORD *)(a1 + 128)));
    }
    uint64_t v83 = sub_1CB83544C(*(void *)a1, v82);
    uint64_t v601 = v82;
    unsigned int v596 = v81;
    if (*(void *)(a1 + 72))
    {
      uint64_t v593 = v78;
      unint64_t v84 = *(void *)(a1 + 88);
      uint64_t v85 = *(void *)(a1 + 112);
      uint64_t v86 = *(void *)(a1 + 120);
      uint64_t v88 = *(void *)(a1 + 32);
      uint64_t v87 = *(void *)(a1 + 40);
      uint64_t v89 = *(void *)(v88 + 64);
      __int16 v90 = *(_WORD *)(v88 + 18);
      uint64_t v611 = "load";
      __int16 v614 = 259;
      char v91 = v90 & 0x3F;
      uint64_t v92 = operator new(0x60uLL);
      v92[13] = v92[13] & 0x38000000 | 1;
      int v93 = (llvm::Instruction *)(v92 + 8);
      *(void *)uint64_t v92 = 0;
      *((void *)v92 + 1) = 0;
      *((void *)v92 + 2) = 0;
      *((void *)v92 + 3) = v92 + 8;
      __int16 v618 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v92 + 8), v89, v88, (const char **)&v615, 0, v91, 0);
      (*(void (**)(void, llvm::Instruction *, const char **, void, void))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), v93, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
      uint64_t v94 = *(unsigned int *)(a1 + 184);
      if (v94)
      {
        uint64_t v162 = *(void *)(a1 + 176);
        uint64_t v163 = v162 + 16 * v94;
        do
        {
          llvm::Instruction::setMetadata(v93, *(_DWORD *)v162, *(llvm::MDNode **)(v162 + 8));
          v162 += 16;
        }
        while (v162 != v163);
      }
      unint64_t v95 = (v86 - v87) / v84;
      uint64_t v615 = 0x190000000ALL;
      llvm::Instruction::copyMetadata((uint64_t)v93, (uint64_t)v33, (int *)&v615, 2);
      uint64_t v615 = (uint64_t)"vec";
      __int16 v618 = 259;
      unsigned int v12 = (uint64_t *)v599;
      uint64_t v96 = (uint64_t *)sub_1CCEA3800(v599, (unsigned __int8 *)v93, (const llvm::APInt *)((v85 - v87) / v84), v95, (uint64_t)&v615);
      char v97 = 1;
      uint64_t v78 = v593;
      goto LABEL_300;
    }
    uint64_t v123 = v83;
    unint64_t v124 = *(void *)(a1 + 128);
    if (*(void *)(a1 + 64) && *((unsigned char *)*v33 + 8) == 13)
    {
      uint64_t v125 = *(void *)(a1 + 32);
      uint64_t v126 = *(void *)(v125 + 64);
      __int16 v127 = *(_WORD *)(v125 + 18);
      uint64_t v611 = "load";
      __int16 v614 = 259;
      char v128 = v127 & 0x3F;
      unint64_t v129 = operator new(0x60uLL);
      v129[13] = v129[13] & 0x38000000 | 1;
      __int16 v130 = (llvm::Instruction *)(v129 + 8);
      *(void *)unint64_t v129 = 0;
      *((void *)v129 + 1) = 0;
      *((void *)v129 + 2) = 0;
      *((void *)v129 + 3) = v129 + 8;
      __int16 v618 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v129 + 8), v126, v125, (const char **)&v615, 0, v128, 0);
      (*(void (**)(void, llvm::Instruction *, const char **, void, void))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), v130, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
      uint64_t v131 = *(unsigned int *)(a1 + 184);
      if (v131)
      {
        uint64_t v332 = *(void *)(a1 + 176);
        uint64_t v333 = v332 + 16 * v131;
        do
        {
          llvm::Instruction::setMetadata(v130, *(_DWORD *)v332, *(llvm::MDNode **)(v332 + 8));
          v332 += 16;
        }
        while (v332 != v333);
      }
      uint64_t v96 = (uint64_t *)sub_1CCEA2284(*(void *)(*(void *)a1 + 232), *(_DWORD *)(*(void *)a1 + 240), v12, (uint64_t)v130, *(void *)(a1 + 64));
      uint64_t v132 = *(void *)(a1 + 112);
      uint64_t v133 = *(void *)(a1 + 40);
      unint64_t v134 = v132 - v133;
      if (v132 != v133 || *(void *)(a1 + 120) < *(void *)(a1 + 48))
      {
        uint64_t v556 = llvm::IntegerType::get(**v33, (llvm::LLVMContext *)(8 * *(_DWORD *)(a1 + 128)));
        int v557 = *(unsigned char **)a1;
        uint64_t v615 = (uint64_t)"extract";
        __int16 v618 = 259;
        uint64_t v96 = (uint64_t *)sub_1CCEA3AC8(v557, (uint64_t)v12, v96, v556, v134, (uint64_t)&v615);
      }
      uint64_t v135 = v601;
      unsigned __int8 v136 = *v33;
      if (8 * *(void *)(a1 + 128) >= (unint64_t)*((unsigned int *)*v33 + 2) >> 8)
      {
LABEL_140:
        char v97 = 1;
        goto LABEL_301;
      }
      __int16 v614 = 257;
      if ((llvm::IntegerType **)*v96 != v136)
      {
        if (*((unsigned __int8 *)v96 + 16) <= 0x14u)
        {
          uint64_t v96 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t *, llvm::IntegerType **))(**(void **)(a1 + 248) + 224))(*(void *)(a1 + 248), 39, v96, v136);
          if (v96) {
            BOOL v561 = *((unsigned __int8 *)v96 + 16) >= 0x1Cu;
          }
          else {
            BOOL v561 = 0;
          }
          if (v561)
          {
            (*(void (**)(void, uint64_t *, const char **, void, void))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), v96, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
            uint64_t v562 = *(unsigned int *)(a1 + 184);
            if (v562)
            {
              uint64_t v563 = *(void *)(a1 + 176);
              uint64_t v564 = v563 + 16 * v562;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v96, *(_DWORD *)v563, *(llvm::MDNode **)(v563 + 8));
                v563 += 16;
              }
              while (v563 != v564);
            }
          }
        }
        else
        {
          __int16 v618 = 257;
          uint64_t v96 = (uint64_t *)llvm::CastInst::Create(39, (uint64_t)v96, (uint64_t)v136, (const char **)&v615, 0);
          (*(void (**)(void, uint64_t *, const char **, void, void))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), v96, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
          uint64_t v558 = *(unsigned int *)(a1 + 184);
          if (v558)
          {
            uint64_t v559 = *(void *)(a1 + 176);
            uint64_t v560 = v559 + 16 * v558;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v96, *(_DWORD *)v559, *(llvm::MDNode **)(v559 + 8));
              v559 += 16;
            }
            while (v559 != v560);
          }
        }
      }
      goto LABEL_541;
    }
    if (*(void *)(a1 + 112) != *(void *)(a1 + 40)
      || *(void *)(a1 + 120) != *(void *)(a1 + 48)
      || (sub_1CCEA0BBC(*(void *)a1, *(void *)(a1 + 56), v82) & 1) == 0
      && ((unint64_t)(v123 + 7) >> 3 <= v124
       || *(unsigned char *)(*(void *)(a1 + 56) + 8) != 13
       || *(unsigned char *)(v82 + 8) != 13))
    {
      unint64_t v208 = (llvm::Value *)llvm::PointerType::get((llvm::PointerType *)v82, v81);
      unsigned int v209 = sub_1CCEA20C0((uint64_t *)a1, v12, v208);
      uint64_t v210 = (1 << *(_WORD *)(*(void *)(a1 + 32) + 18)) | (*(void *)(a1 + 112) - *(void *)(a1 + 40));
      char v211 = __clz(v210 & -v210);
      if ((*((unsigned char *)v33 + 23) & 0x10) == 0)
      {
        uint64_t v222 = 0;
        int v221 = &byte_1CFBCE98E;
        goto LABEL_269;
      }
      uint64_t v212 = *(void *)**v33;
      uint64_t v213 = *(void *)(v212 + 152);
      uint64_t v214 = *(unsigned int *)(v212 + 168);
      if (v214)
      {
        LODWORD(v215) = (v214 - 1) & ((v33 >> 4) ^ (v33 >> 9));
        uint64_t v216 = (llvm::IntegerType ****)(v213 + 16 * v215);
        uint64_t v217 = *v216;
        if (*v216 == v33)
        {
LABEL_268:
          uint64_t v220 = v216[1];
          int v223 = *v220;
          int v221 = (char *)(v220 + 2);
          uint64_t v222 = v223;
LABEL_269:
          uint64_t v224 = v78;
          __int16 v225 = *((_WORD *)v33 + 9) & 1;
          __int16 v614 = 261;
          uint64_t v611 = v221;
          unsigned int v612 = v222;
          char v226 = 63 - v211;
          uint64_t v227 = operator new(0x60uLL);
          v227[13] = v227[13] & 0x38000000 | 1;
          uint64_t v96 = (uint64_t *)(v227 + 8);
          *(void *)uint64_t v227 = 0;
          *((void *)v227 + 1) = 0;
          *((void *)v227 + 2) = 0;
          *((void *)v227 + 3) = v227 + 8;
          __int16 v618 = 257;
          llvm::LoadInst::LoadInst((llvm::Value *)(v227 + 8), v601, (uint64_t)v209, (const char **)&v615, v225, v226, 0);
          (*(void (**)(void, _DWORD *, const char **, void, void))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), v227 + 8, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
          uint64_t v229 = *(unsigned int *)(a1 + 184);
          if (v229)
          {
            uint64_t v316 = *(void *)(a1 + 176);
            uint64_t v317 = v316 + 16 * v229;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v96, *(_DWORD *)v316, *(llvm::MDNode **)(v316 + 8));
              v316 += 16;
            }
            while (v316 != v317);
          }
          uint64_t v230 = (llvm::MDNode *)v603;
          int v232 = (llvm::MDNode *)v605;
          uint64_t v231 = v606;
          if (v603) {
            BOOL v233 = 0;
          }
          else {
            BOOL v233 = v604 == 0;
          }
          if (!v233 || v605 != 0 || v606 != 0)
          {
            if (v604)
            {
              uint64_t v236 = llvm::AAMDNodes::shiftTBAAStruct(v604, (llvm::MDNode *)(*(void *)(a1 + 112) - *(void *)(a1 + 96)), v228);
              int v232 = (llvm::MDNode *)v605;
              uint64_t v231 = v606;
            }
            else
            {
              uint64_t v236 = 0;
            }
            if (v230 || *((void *)v227 + 10) || (*((unsigned char *)v227 + 55) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v96, 1, v230);
            }
            if (v236 || *((void *)v227 + 10) || (*((unsigned char *)v227 + 55) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v96, 5, v236);
            }
            if (v232 || *((void *)v227 + 10) || (*((unsigned char *)v227 + 55) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v96, 7, v232);
            }
            if (v231 || *((void *)v227 + 10) || (*((unsigned char *)v227 + 55) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v96, 8, v231);
            }
          }
          __int16 v237 = *((_WORD *)v33 + 9);
          uint64_t v78 = v224;
          if (v237)
          {
            char v238 = *((unsigned char *)v33 + 60);
            *((_WORD *)v227 + 25) = *((_WORD *)v227 + 25) & 0xFC7F | v237 & 0x380;
            *((unsigned char *)v227 + 92) = v238;
          }
          uint64_t v615 = 0x190000000ALL;
          llvm::Instruction::copyMetadata((uint64_t)v96, (uint64_t)v33, (int *)&v615, 2);
          char v97 = 0;
          unsigned int v12 = (uint64_t *)v599;
          goto LABEL_300;
        }
        int v218 = 1;
        while (v217 != (llvm::IntegerType ***)-4096)
        {
          int v219 = v215 + v218++;
          uint64_t v215 = v219 & (v214 - 1);
          uint64_t v217 = *(llvm::IntegerType ****)(v213 + 16 * v215);
          if (v217 == v33)
          {
            uint64_t v216 = (llvm::IntegerType ****)(v213 + 16 * v215);
            goto LABEL_268;
          }
        }
      }
      uint64_t v216 = (llvm::IntegerType ****)(v213 + 16 * v214);
      goto LABEL_268;
    }
    uint64_t v594 = v78;
    uint64_t v148 = *(void *)(a1 + 32);
    uint64_t v149 = *(void *)(v148 + 64);
    __int16 v150 = *(_WORD *)(v148 + 18);
    __int16 v151 = *((_WORD *)v33 + 9);
    if ((*((unsigned char *)v33 + 23) & 0x10) == 0)
    {
      char v342 = 0;
      __int16 v341 = &byte_1CFBCE98E;
LABEL_446:
      __int16 v614 = 261;
      __int16 v344 = v151 & 1;
      uint64_t v611 = v341;
      unsigned int v612 = v342;
      char v345 = v150 & 0x3F;
      int v346 = operator new(0x60uLL);
      v346[13] = v346[13] & 0x38000000 | 1;
      uint64_t v96 = (uint64_t *)(v346 + 8);
      *(void *)int v346 = 0;
      *((void *)v346 + 1) = 0;
      *((void *)v346 + 2) = 0;
      *((void *)v346 + 3) = v346 + 8;
      __int16 v618 = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v346 + 8), v149, v148, (const char **)&v615, v344, v345, 0);
      (*(void (**)(void, _DWORD *, const char **, void, void))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), v346 + 8, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
      uint64_t v349 = *(unsigned int *)(a1 + 184);
      if (v349)
      {
        uint64_t v403 = *(void *)(a1 + 176);
        uint64_t v404 = v403 + 16 * v349;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v96, *(_DWORD *)v403, *(llvm::MDNode **)(v403 + 8));
          v403 += 16;
        }
        while (v403 != v404);
      }
      unint64_t v350 = (llvm::MDNode *)v603;
      unint64_t v352 = (llvm::MDNode *)v605;
      uint64_t v351 = v606;
      if (v603) {
        BOOL v353 = 0;
      }
      else {
        BOOL v353 = v604 == 0;
      }
      if (!v353 || v605 != 0 || v606 != 0)
      {
        if (v604)
        {
          int64x2_t v356 = llvm::AAMDNodes::shiftTBAAStruct(v604, (llvm::MDNode *)(*(void *)(a1 + 112) - *(void *)(a1 + 96)), v347);
          unint64_t v352 = (llvm::MDNode *)v605;
          uint64_t v351 = v606;
        }
        else
        {
          int64x2_t v356 = 0;
        }
        if (v350 || *((void *)v346 + 10) || (*((unsigned char *)v346 + 55) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v96, 1, v350);
        }
        if (v356 || *((void *)v346 + 10) || (*((unsigned char *)v346 + 55) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v96, 5, v356);
        }
        if (v352 || *((void *)v346 + 10) || (*((unsigned char *)v346 + 55) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v96, 7, v352);
        }
        if (v351 || *((void *)v346 + 10) || (*((unsigned char *)v346 + 55) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v96, 8, v351);
        }
      }
      unint64_t v357 = *((unsigned __int16 *)v33 + 9);
      if (v357)
      {
        char v358 = *((unsigned char *)v33 + 60);
        *((_WORD *)v346 + 25) = *((_WORD *)v346 + 25) & 0xFC7F | v357 & 0x380;
        *((unsigned char *)v346 + 92) = v358;
      }
      int v359 = *((unsigned __int8 *)v346 + 48);
      unsigned int v12 = (uint64_t *)v599;
      uint64_t v78 = v594;
      if (v359 == 60 || v359 == 61)
      {
        if ((*((_WORD *)v346 + 25) & 0x380) == 0) {
          goto LABEL_479;
        }
      }
      else if ((v359 - 63) >= 3)
      {
LABEL_479:
        if ((*((unsigned char *)v33 + 23) & 0x20) == 0) {
          goto LABEL_537;
        }
        uint64_t v360 = *(void *)**v33;
        uint64_t v615 = (uint64_t)v33;
        int v361 = *(_DWORD *)(v360 + 2496);
        if (v361)
        {
          uint64_t v362 = *(void *)(v360 + 2480);
          int v363 = v361 - 1;
          unsigned int v364 = v363 & ((v33 >> 4) ^ (v33 >> 9));
          uint64_t v365 = (llvm::IntegerType ****)(v362 + 40 * v364);
          unint64_t v366 = *v365;
          if (*v365 == v33) {
            goto LABEL_490;
          }
          uint64_t v367 = 0;
          int v368 = 1;
          while (v366 != (llvm::IntegerType ***)-4096)
          {
            if (v367) {
              BOOL v369 = 0;
            }
            else {
              BOOL v369 = v366 == (llvm::IntegerType ***)-8192;
            }
            if (v369) {
              uint64_t v367 = v365;
            }
            unsigned int v370 = v364 + v368++;
            unsigned int v364 = v370 & v363;
            uint64_t v365 = (llvm::IntegerType ****)(v362 + 40 * v364);
            unint64_t v366 = *v365;
            if (*v365 == v33) {
              goto LABEL_490;
            }
          }
          if (v367) {
            uint64_t v506 = v367;
          }
          else {
            uint64_t v506 = v365;
          }
        }
        else
        {
          uint64_t v506 = 0;
        }
        uint64_t v365 = (llvm::IntegerType ****)sub_1CC609054(v360 + 2480, (uint64_t)&v615, &v615, v506);
        uint64_t v507 = v615;
        v365[3] = 0;
        v365[4] = 0;
        *uint64_t v365 = (llvm::IntegerType ***)v507;
        v365[1] = (llvm::IntegerType ***)(v365 + 3);
        v365[2] = (llvm::IntegerType ***)0x100000000;
LABEL_490:
        uint64_t v371 = *((unsigned int *)v365 + 4);
        if (v371)
        {
          int v372 = (const llvm::LoadInst **)(v365[1] + 1);
          uint64_t v373 = 16 * v371;
          while (*((_DWORD *)v372 - 2) != 11)
          {
            v372 += 2;
            v373 -= 16;
            if (!v373) {
              goto LABEL_537;
            }
          }
          if (*v372) {
            llvm::copyNonnullMetadata(v33, *v372, (llvm::Constant **)v96, v348);
          }
        }
LABEL_537:
        uint64_t v397 = *(void *)(a1 + 56);
        if (v397) {
          BOOL v398 = *(_DWORD *)(v397 + 8) == 13;
        }
        else {
          BOOL v398 = 0;
        }
        if (!v398)
        {
LABEL_541:
          char v97 = 1;
          goto LABEL_300;
        }
        char v97 = 1;
        if (!v601)
        {
          uint64_t v135 = 0;
LABEL_301:
          uint64_t v239 = sub_1CCEA2284(*(void *)(*(void *)a1 + 232), *(_DWORD *)(*(void *)a1 + 240), v12, (uint64_t)v96, v135);
          if (!*(unsigned char *)(a1 + 137))
          {
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v33, (llvm::Value *)v239, (llvm::Value *)1);
LABEL_310:
            unint64_t v254 = *(unsigned int **)(a1 + 16);
            uint64_t v615 = 4;
            *(void *)&long long v616 = 0;
            *((void *)&v616 + 1) = v33;
            if (v33 != (llvm::IntegerType ***)-8192 && v33 != (llvm::IntegerType ***)-4096 && v33) {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v615);
            }
            uint64_t v255 = v254[50];
            unint64_t v256 = *((void *)v254 + 24);
            uint64_t v257 = &v615;
            if (v255 >= v254[51])
            {
              unint64_t v514 = (unint64_t *)(v254 + 48);
              unint64_t v515 = v255 + 1;
              BOOL v516 = v256 + 24 * v255 > (unint64_t)&v615;
              if (v256 <= (unint64_t)&v615 && v516)
              {
                uint64_t v585 = (char *)&v615 - v256;
                sub_1CC0BD844(v254 + 48, v515);
                unint64_t v256 = *v514;
                uint64_t v257 = (uint64_t *)&v585[*v514];
              }
              else
              {
                sub_1CC0BD844(v254 + 48, v515);
                unint64_t v256 = *v514;
                uint64_t v257 = &v615;
              }
            }
            unsigned int v258 = v254[50];
            uint64_t v259 = (unint64_t *)(v256 + 24 * v258);
            unint64_t *v259 = 4;
            v259[1] = 0;
            uint64_t v260 = v257[2];
            v259[2] = v260;
            if (v260 != -8192 && v260 != -4096)
            {
              if (v260)
              {
                unint64_t v261 = *v257 & 0xFFFFFFFFFFFFFFF8;
                v259[1] = *(void *)v261;
                *(void *)unint64_t v261 = v259;
                unint64_t *v259 = v261 | 4;
                int v262 = (unint64_t *)v259[1];
                if (v262) {
                  *int v262 = *v262 & 7 | (unint64_t)(v259 + 1);
                }
              }
            }
            v254[50] = v258 + 1;
            if (*((void *)&v616 + 1) != -8192 && *((void *)&v616 + 1) != -4096 && *((void *)&v616 + 1))
            {
              unint64_t v263 = v615 & 0xFFFFFFFFFFFFFFF8;
              *(void *)(v615 & 0xFFFFFFFFFFFFFFF8) = v616;
              if ((void)v616)
              {
                *(void *)long long v616 = *(void *)v616 & 7 | v263;
              }
              else
              {
                uint64_t v264 = *((void *)&v616 + 1);
                BOOL v265 = (int32x2_t *)****((void ****)&v616 + 1);
                unint64_t v266 = (unint64_t)v265[303];
                if (v266 <= v263)
                {
                  uint64_t v267 = v265[305].u32[0];
                  if (v266 + 16 * v267 > v263)
                  {
                    unsigned int v268 = v267 - 1;
                    LODWORD(v269) = v268 & ((DWORD2(v616) >> 4) ^ (DWORD2(v616) >> 9));
                    uint64_t v270 = (uint64_t *)(v266 + 16 * v269);
                    uint64_t v271 = *v270;
                    if (*((void *)&v616 + 1) == *v270)
                    {
LABEL_331:
                      *uint64_t v270 = -8192;
                      v265[304] = vadd_s32(v265[304], (int32x2_t)0x1FFFFFFFFLL);
                      uint64_t v264 = *((void *)&v616 + 1);
                    }
                    else
                    {
                      int v272 = 1;
                      while (v271 != -4096)
                      {
                        int v273 = v269 + v272++;
                        uint64_t v269 = v273 & v268;
                        uint64_t v271 = *(void *)(v266 + 16 * v269);
                        if (*((void *)&v616 + 1) == v271)
                        {
                          uint64_t v270 = (uint64_t *)(v266 + 16 * v269);
                          goto LABEL_331;
                        }
                      }
                    }
                    *(unsigned char *)(v264 + 17) &= ~1u;
                  }
                }
              }
            }
            sub_1CCEA35C4(a1, v78);
            if (*((_WORD *)v33 + 9)) {
              char v31 = 0;
            }
            else {
              char v31 = v97;
            }
            return v31 & 1;
          }
          uint64_t v240 = 0;
          uint64_t v241 = v33[4];
          if (v241) {
            unsigned int v242 = v241 - 3;
          }
          else {
            unsigned int v242 = 0;
          }
          *(void *)(a1 + 224) = v242[5];
          *(void *)(a1 + 232) = v242 + 3;
          BOOL v243 = (unsigned __int8 *)v242[6];
          uint64_t v611 = (const char *)v243;
          if (v243)
          {
            llvm::MetadataTracking::track((uint64_t)&v611, v243, 2);
            uint64_t v240 = (uint64_t)v611;
          }
          sub_1CB8461A4((uint64_t)v12, 0, v240);
          if (v611)
          {
            int v274 = *(unsigned __int8 *)v611;
            if ((v274 - 4) > 0x1E)
            {
              if ((v274 - 3) >= 0xFFFFFFFE) {
                long long v331 = v611;
              }
              else {
                long long v331 = 0;
              }
              if ((v274 - 3) < 0xFFFFFFFE)
              {
                if (v274 == 3) {
                  *((void *)v611 + 1) = 0;
                }
                goto LABEL_308;
              }
              unint64_t v276 = (unint64_t)(v331 + 8);
            }
            else
            {
              if ((v611[1] & 0x7F) != 2 && !*((_DWORD *)v611 + 3)) {
                goto LABEL_308;
              }
              uint64_t v275 = *((void *)v611 + 2);
              if ((v275 & 4) == 0) {
                goto LABEL_308;
              }
              unint64_t v276 = v275 & 0xFFFFFFFFFFFFFFF8;
              if (!v276) {
                goto LABEL_308;
              }
            }
            uint64_t v615 = (uint64_t)&v611;
            sub_1CC5FA668(v276 + 16, &v615);
          }
LABEL_308:
          int v244 = operator new(0x60uLL);
          uint64_t v245 = (llvm::Value *)(v244 + 8);
          v244[13] = v244[13] & 0x38000000 | 1;
          *(void *)int v244 = 0;
          *((void *)v244 + 1) = 0;
          *((void *)v244 + 2) = 0;
          *((void *)v244 + 3) = v244 + 8;
          unint64_t v246 = *v33;
          unint64_t v247 = (llvm::PoisonValue *)llvm::PointerType::get((llvm::PointerType *)*v33, (llvm::Type *)v596);
          uint64_t v249 = llvm::PoisonValue::get(v247, v248);
          __int16 v618 = 257;
          llvm::LoadInst::LoadInst(v245, (uint64_t)v246, (uint64_t)v249, (const char **)&v615, 0, 0, 0);
          uint64_t v250 = *(unsigned char **)a1;
          unint64_t v251 = *(void *)(a1 + 112) - *(void *)(a1 + 96);
          uint64_t v615 = (uint64_t)"insert";
          __int16 v618 = 259;
          uint64_t v252 = sub_1CCEA2F70(v250, (uint64_t)v12, (llvm::ConstantInt ***)v245, (uint64_t)v239, v251, (uint64_t)&v615);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v33, (llvm::Value *)v252, (llvm::Value *)1);
          llvm::Value::doRAUW(v245, (llvm::Value *)v33, (llvm::Value *)1);
          llvm::Value::deleteValue((void (**)(void))v245, v253);
          goto LABEL_310;
        }
        if (*(_DWORD *)(v601 + 8) != 13 || *(_DWORD *)(v397 + 8) >> 8 >= *(_DWORD *)(v601 + 8) >> 8)
        {
LABEL_300:
          uint64_t v135 = v601;
          goto LABEL_301;
        }
        uint64_t v611 = "load.ext";
        __int16 v614 = 259;
        if (*v96 != v601)
        {
          if (*((unsigned __int8 *)v346 + 48) > 0x14u)
          {
            __int16 v618 = 257;
            uint64_t v135 = v601;
            uint64_t v96 = (uint64_t *)llvm::CastInst::Create(39, (uint64_t)v96, v601, (const char **)&v615, 0);
            (*(void (**)(void, uint64_t *, const char **, void, void))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), v96, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
            uint64_t v399 = *(unsigned int *)(a1 + 184);
            if (v399)
            {
              uint64_t v400 = *(void *)(a1 + 176);
              uint64_t v401 = v400 + 16 * v399;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v96, *(_DWORD *)v400, *(llvm::MDNode **)(v400 + 8));
                v400 += 16;
              }
              while (v400 != v401);
            }
            goto LABEL_584;
          }
          uint64_t v135 = v601;
          uint64_t v96 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 248)
                                                                                          + 224))(*(void *)(a1 + 248), 39, v96, v601);
          if (v96) {
            BOOL v410 = *((unsigned __int8 *)v96 + 16) >= 0x1Cu;
          }
          else {
            BOOL v410 = 0;
          }
          if (!v410)
          {
LABEL_584:
            if (**(unsigned char **)a1)
            {
              unint64_t v411 = ((*(_DWORD *)(v135 + 8) >> 8) - (*(_DWORD *)(v397 + 8) >> 8));
              uint64_t v615 = (uint64_t)"endian_shift";
              __int16 v618 = 259;
              unint64_t v412 = llvm::ConstantInt::get((llvm::ConstantInt *)*v96, v411, 0);
              uint64_t v96 = (uint64_t *)sub_1CC242524((uint64_t)v12, (uint64_t)v96, (uint64_t)v412, (uint64_t)&v615, 0, 0);
            }
            goto LABEL_140;
          }
          (*(void (**)(void, uint64_t *, const char **, void, void))(**(void **)(a1 + 256) + 16))(*(void *)(a1 + 256), v96, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
          uint64_t v580 = *(unsigned int *)(a1 + 184);
          if (v580)
          {
            uint64_t v586 = *(void *)(a1 + 176);
            uint64_t v587 = v586 + 16 * v580;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v96, *(_DWORD *)v586, *(llvm::MDNode **)(v586 + 8));
              v586 += 16;
            }
            while (v586 != v587);
          }
          unsigned int v12 = (uint64_t *)v599;
          uint64_t v78 = v594;
        }
        uint64_t v135 = v601;
        goto LABEL_584;
      }
      *((_WORD *)v346 + 25) = *((_WORD *)v346 + 25) & 0xFF81 | (2 * __clz(1 << (v357 >> 1))) ^ 0x7E;
      goto LABEL_479;
    }
    uint64_t v152 = *(void *)**v33;
    uint64_t v153 = *(void *)(v152 + 152);
    uint64_t v154 = *(unsigned int *)(v152 + 168);
    if (v154)
    {
      LODWORD(v155) = (v154 - 1) & ((v33 >> 4) ^ (v33 >> 9));
      uint64_t v156 = (llvm::IntegerType ****)(v153 + 16 * v155);
      unsigned __int32 v157 = *v156;
      if (*v156 == v33)
      {
LABEL_445:
        int v340 = v156[1];
        uint64_t v343 = *v340;
        __int16 v341 = (char *)(v340 + 2);
        char v342 = v343;
        goto LABEL_446;
      }
      int v158 = 1;
      while (v157 != (llvm::IntegerType ***)-4096)
      {
        int v159 = v155 + v158++;
        uint64_t v155 = v159 & (v154 - 1);
        unsigned __int32 v157 = *(llvm::IntegerType ****)(v153 + 16 * v155);
        if (v157 == v33)
        {
          uint64_t v156 = (llvm::IntegerType ****)(v153 + 16 * v155);
          goto LABEL_445;
        }
      }
    }
    uint64_t v156 = (llvm::IntegerType ****)(v153 + 16 * v154);
    goto LABEL_445;
  }
  if (v34 != 84)
  {
    if (v34 == 85)
    {
      uint64_t v297 = sub_1CCEA20C0((uint64_t *)a1, v12, **(llvm::Value ***)(a1 + 152));
      uint64_t v298 = (unsigned __int8 **)(v33 - 8);
      uint64_t v299 = (uint64_t)*(v33 - 8);
      if (v299 == *(void *)(a1 + 152))
      {
        if (v299)
        {
          **(v33 - 6) = (llvm::IntegerType *)*(v33 - 7);
          uint64_t v300 = (uint64_t)*(v33 - 7);
          if (v300) {
            *(void *)(v300 + 16) = *(v33 - 6);
          }
        }
        *uint64_t v298 = v297;
        if (v297)
        {
          unsigned __int32 v301 = (unsigned __int8 ***)(v297 + 8);
          uint64_t v302 = *((void *)v297 + 1);
          *(v33 - 7) = (llvm::IntegerType **)v302;
          if (v302) {
            *(void *)(v302 + 16) = v33 - 7;
          }
          *(v33 - 6) = (llvm::IntegerType **)v301;
          *unsigned __int32 v301 = v298;
        }
      }
      uint64_t v303 = (unsigned __int8 **)(v33 - 4);
      uint64_t v304 = (uint64_t)*(v33 - 4);
      if (v304 == *(void *)(a1 + 152))
      {
        if (v304)
        {
          **(v33 - 2) = (llvm::IntegerType *)*(v33 - 3);
          uint64_t v305 = (uint64_t)*(v33 - 3);
          if (v305) {
            *(void *)(v305 + 16) = *(v33 - 2);
          }
        }
        *uint64_t v303 = v297;
        if (v297)
        {
          uint64_t v308 = (llvm::IntegerType **)*((void *)v297 + 1);
          unint64_t v306 = (unsigned __int8 ***)(v297 + 8);
          uint64_t v307 = v308;
          *(v33 - 3) = v308;
          if (v308) {
            v307[2] = (llvm::IntegerType *)(v33 - 3);
          }
          *(v33 - 2) = (llvm::IntegerType **)v306;
          *unint64_t v306 = v303;
        }
      }
      sub_1CCEA35C4(a1, *(void *)(a1 + 152));
      sub_1CCEA4388((void *)a1, (uint64_t)v33);
      uint64_t v309 = *(void *)(a1 + 168);
      uint64_t v615 = 0;
      if (sub_1CCEA5F28(v309, (uint64_t)v33, &v615)) {
        goto LABEL_89;
      }
      int v310 = *(_DWORD *)v309 >> 1;
      if (*(_DWORD *)v309) {
        unsigned int v311 = 8;
      }
      else {
        unsigned int v311 = *(_DWORD *)(v309 + 16);
      }
      if (4 * v310 + 4 >= 3 * v311)
      {
        v311 *= 2;
      }
      else if (v311 + ~v310 - *(_DWORD *)(v309 + 4) > v311 >> 3)
      {
LABEL_389:
        uint64_t v312 = (void *)v615;
        *(_DWORD *)v309 += 2;
        if (*v312 != -4096) {
          --*(_DWORD *)(v309 + 4);
        }
        *uint64_t v312 = v33;
        unsigned int v313 = *(_DWORD *)(v309 + 80);
        if (v313 >= *(_DWORD *)(v309 + 84)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v309 + 72) + 8 * v313) = v33;
        ++*(_DWORD *)(v309 + 80);
        goto LABEL_89;
      }
      sub_1CD781238(v309, v311);
      uint64_t v615 = 0;
      sub_1CCEA5F28(v309, (uint64_t)v33, &v615);
      goto LABEL_389;
    }
    uint64_t v615 = (uint64_t)v12;
    long long v616 = *(_OWORD *)(a1 + 224);
    uint64_t v374 = *(unsigned int *)(a1 + 184);
    if (v374)
    {
      uint64_t v530 = (unsigned __int8 **)(*(void *)(a1 + 176) + 8);
      uint64_t v531 = 16 * v374;
      while (*((_DWORD *)v530 - 2))
      {
        v530 += 2;
        v531 -= 16;
        if (!v531) {
          goto LABEL_497;
        }
      }
      long long v617 = *v530;
      if (v617) {
        llvm::MetadataTracking::track((uint64_t)&v617, v617, 2);
      }
    }
    else
    {
LABEL_497:
      long long v617 = 0;
    }
    uint64_t v375 = *(void *)(a1 + 152);
    if (*(unsigned char *)(v375 + 16) != 83)
    {
      *(void *)(a1 + 224) = *(void *)(v375 + 40);
      *(void *)(a1 + 232) = v375 + 24;
      unint64_t v376 = *(unsigned __int8 **)(v375 + 48);
      int v603 = v376;
      if (v376)
      {
        llvm::MetadataTracking::track((uint64_t)&v603, v376, 2);
        uint64_t v377 = (uint64_t)v603;
      }
      else
      {
        uint64_t v377 = 0;
      }
      sub_1CB8461A4((uint64_t)v12, 0, v377);
      unint64_t v378 = v603;
      if (!v603) {
        goto LABEL_502;
      }
      int v511 = *v603;
      if ((v511 - 4) <= 0x1E)
      {
        if ((v603[1] & 0x7F) != 2 && !*((_DWORD *)v603 + 3)) {
          goto LABEL_502;
        }
        uint64_t v512 = *((void *)v603 + 2);
        if ((v512 & 4) == 0) {
          goto LABEL_502;
        }
        unint64_t v513 = v512 & 0xFFFFFFFFFFFFFFF8;
        if (!v513) {
          goto LABEL_502;
        }
LABEL_735:
        uint64_t v611 = (const char *)&v603;
        sub_1CC5FA668(v513 + 16, &v611);
        goto LABEL_502;
      }
      if ((v511 - 3) >= 0xFFFFFFFE) {
        unint64_t v522 = v603;
      }
      else {
        unint64_t v522 = 0;
      }
      if ((v511 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v513 = (unint64_t)(v522 + 8);
        goto LABEL_735;
      }
      if (v511 != 3) {
        goto LABEL_502;
      }
LABEL_760:
      *((void *)v378 + 1) = 0;
      goto LABEL_502;
    }
    uint64_t v565 = *(void *)(v375 + 40);
    uint64_t v566 = v565 + 40;
    for (uint64_t i = *(void *)(v565 + 48); i != v566; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v568 = i - 24;
      if (!i) {
        uint64_t v568 = 0;
      }
      if (*(unsigned char *)(v568 + 16) != 83)
      {
        unsigned int v572 = *(unsigned __int8 *)(i - 8) - 38;
        BOOL v456 = v572 > 0x38;
        uint64_t v573 = (1 << v572) & 0x100060000000001;
        if (v456 || v573 == 0) {
          uint64_t v566 = i;
        }
        else {
          uint64_t v566 = *(void *)(i + 8);
        }
        break;
      }
    }
    uint64_t v575 = 0;
    if (v566) {
      uint64_t v576 = v566 - 24;
    }
    else {
      uint64_t v576 = 0;
    }
    *(void *)(a1 + 224) = *(void *)(v576 + 40);
    *(void *)(a1 + 232) = v576 + 24;
    unsigned int v577 = *(unsigned __int8 **)(v576 + 48);
    int v603 = v577;
    if (v577)
    {
      llvm::MetadataTracking::track((uint64_t)&v603, v577, 2);
      uint64_t v575 = (uint64_t)v603;
    }
    sub_1CB8461A4((uint64_t)v12, 0, v575);
    unint64_t v378 = v603;
    if (v603)
    {
      int v578 = *v603;
      if ((v578 - 4) > 0x1E)
      {
        if ((v578 - 3) >= 0xFFFFFFFE) {
          uint64_t v589 = v603;
        }
        else {
          uint64_t v589 = 0;
        }
        if ((v578 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v513 = (unint64_t)(v589 + 8);
          goto LABEL_735;
        }
        if (v578 != 3) {
          goto LABEL_502;
        }
        goto LABEL_760;
      }
      if ((v603[1] & 0x7F) == 2 || *((_DWORD *)v603 + 3))
      {
        uint64_t v579 = *((void *)v603 + 2);
        if ((v579 & 4) != 0)
        {
          unint64_t v513 = v579 & 0xFFFFFFFFFFFFFFF8;
          if (v513) {
            goto LABEL_735;
          }
        }
      }
    }
LABEL_502:
    BOOL v379 = *(unsigned __int8 **)(*(void *)(a1 + 152) + 48);
    *(void *)&long long v609 = v379;
    if (v379)
    {
      llvm::MetadataTracking::track((uint64_t)&v609, v379, 2);
      uint64_t v380 = v609;
    }
    else
    {
      uint64_t v380 = 0;
    }
    sub_1CB8461A4((uint64_t)v12, 0, v380);
    if (!(void)v609) {
      goto LABEL_505;
    }
    int v569 = *(unsigned __int8 *)v609;
    if ((v569 - 4) > 0x1E)
    {
      if ((v569 - 3) >= 0xFFFFFFFE) {
        uint64_t v581 = v609;
      }
      else {
        uint64_t v581 = 0;
      }
      if ((v569 - 3) < 0xFFFFFFFE)
      {
        if (v569 == 3) {
          *(void *)(v609 + 8) = 0;
        }
LABEL_505:
        unsigned int v381 = sub_1CCEA20C0((uint64_t *)a1, v12, **(llvm::Value ***)(a1 + 152));
        int v382 = *((_DWORD *)v33 + 5);
        if ((v382 & 0x40000000) != 0)
        {
          uint64_t v383 = (llvm::IntegerType ***)*(v33 - 1);
          uint64_t v384 = v382 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v384 = v382 & 0x7FFFFFF;
          uint64_t v383 = &v33[-4 * v384];
        }
        uint64_t v385 = *(void *)(a1 + 152);
        if (v384)
        {
          uint64_t v386 = (unsigned __int8 ***)(v381 + 8);
          uint64_t v387 = (unsigned __int8 ***)(v383 + 1);
          uint64_t v388 = 32 * v384;
          do
          {
            uint64_t v389 = (unsigned __int8 **)(v387 - 1);
            if (*(v387 - 1) == (unsigned __int8 **)v385)
            {
              if (v385)
              {
                *v387[1] = (unsigned __int8 *)*v387;
                if (*v387) {
                  (*v387)[2] = (unsigned __int8 *)v387[1];
                }
              }
              *uint64_t v389 = v381;
              if (v381)
              {
                uint64_t v390 = *v386;
                long long *v387 = *v386;
                if (v390) {
                  v390[2] = (unsigned __int8 *)v387;
                }
                v387[1] = (unsigned __int8 **)v386;
                *uint64_t v386 = v389;
              }
            }
            v387 += 4;
            v388 -= 32;
          }
          while (v388);
          uint64_t v385 = *(void *)(a1 + 152);
        }
        sub_1CCEA35C4(a1, v385);
        sub_1CCEA4388((void *)a1, (uint64_t)v33);
        uint64_t v391 = *(void *)(a1 + 160);
        uint64_t v611 = 0;
        if (sub_1CCEA469C(v391, (uint64_t)v33, &v611))
        {
LABEL_528:
          uint64_t v396 = (const char *)v615;
          if ((void)v616)
          {
            sub_1CBF5385C(v615, v616, *((uint64_t *)&v616 + 1));
            uint64_t v396 = (const char *)v615;
          }
          else
          {
            *(void *)(v615 + 48) = 0;
            *((void *)v396 + 7) = 0;
          }
          int v603 = v617;
          if (v617)
          {
            llvm::MetadataTracking::track((uint64_t)&v603, v617, 2);
            uint64_t v406 = (uint64_t)v603;
          }
          else
          {
            uint64_t v406 = 0;
          }
          sub_1CB8461A4((uint64_t)v396, 0, v406);
          if (!v603) {
            goto LABEL_573;
          }
          int v532 = *v603;
          if ((v532 - 4) > 0x1E)
          {
            if ((v532 - 3) >= 0xFFFFFFFE) {
              int v550 = v603;
            }
            else {
              int v550 = 0;
            }
            if ((v532 - 3) < 0xFFFFFFFE)
            {
              if (v532 == 3) {
                *((void *)v603 + 1) = 0;
              }
LABEL_573:
              if (v617)
              {
                int v407 = *v617;
                if ((v407 - 4) > 0x1E)
                {
                  if ((v407 - 3) >= 0xFFFFFFFE) {
                    uint64_t v549 = v617;
                  }
                  else {
                    uint64_t v549 = 0;
                  }
                  if ((v407 - 3) < 0xFFFFFFFE)
                  {
                    if (v407 == 3) {
                      *((void *)v617 + 1) = 0;
                    }
                    goto LABEL_89;
                  }
                  unint64_t v409 = (unint64_t)(v549 + 8);
                }
                else
                {
                  if ((v617[1] & 0x7F) != 2 && !*((_DWORD *)v617 + 3)) {
                    goto LABEL_89;
                  }
                  uint64_t v408 = *((void *)v617 + 2);
                  if ((v408 & 4) == 0) {
                    goto LABEL_89;
                  }
                  unint64_t v409 = v408 & 0xFFFFFFFFFFFFFFF8;
                  if (!v409) {
                    goto LABEL_89;
                  }
                }
                uint64_t v611 = (const char *)&v617;
                sub_1CC5FA668(v409 + 16, &v611);
              }
LABEL_89:
              char v31 = 1;
              return v31 & 1;
            }
            unint64_t v534 = (unint64_t)(v550 + 8);
          }
          else
          {
            if ((v603[1] & 0x7F) != 2 && !*((_DWORD *)v603 + 3)) {
              goto LABEL_573;
            }
            uint64_t v533 = *((void *)v603 + 2);
            if ((v533 & 4) == 0) {
              goto LABEL_573;
            }
            unint64_t v534 = v533 & 0xFFFFFFFFFFFFFFF8;
            if (!v534) {
              goto LABEL_573;
            }
          }
          uint64_t v611 = (const char *)&v603;
          sub_1CC5FA668(v534 + 16, &v611);
          goto LABEL_573;
        }
        int v392 = *(_DWORD *)v391 >> 1;
        if (*(_DWORD *)v391) {
          unsigned int v393 = 8;
        }
        else {
          unsigned int v393 = *(_DWORD *)(v391 + 16);
        }
        if (4 * v392 + 4 >= 3 * v393)
        {
          v393 *= 2;
        }
        else if (v393 + ~v392 - *(_DWORD *)(v391 + 4) > v393 >> 3)
        {
LABEL_524:
          v394 = (char *)v611;
          *(_DWORD *)v391 += 2;
          if (*(void *)v394 != -4096) {
            --*(_DWORD *)(v391 + 4);
          }
          *(void *)v394 = v33;
          unsigned int v395 = *(_DWORD *)(v391 + 80);
          if (v395 >= *(_DWORD *)(v391 + 84)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v391 + 72) + 8 * v395) = v33;
          ++*(_DWORD *)(v391 + 80);
          goto LABEL_528;
        }
        sub_1CD781000(v391, v393);
        uint64_t v611 = 0;
        sub_1CCEA469C(v391, (uint64_t)v33, &v611);
        goto LABEL_524;
      }
      unint64_t v571 = v581 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v609 + 1) & 0x7F) != 2 && !*(_DWORD *)(v609 + 12)) {
        goto LABEL_505;
      }
      uint64_t v570 = *(void *)(v609 + 16);
      if ((v570 & 4) == 0) {
        goto LABEL_505;
      }
      unint64_t v571 = v570 & 0xFFFFFFFFFFFFFFF8;
      if (!v571) {
        goto LABEL_505;
      }
    }
    uint64_t v611 = (const char *)&v609;
    sub_1CC5FA668(v571 + 16, &v611);
    goto LABEL_505;
  }
  uint64_t v35 = (uint64_t)*(v33 - 4);
  if (v35 && !*(unsigned char *)(v35 + 16) && *(llvm::IntegerType ***)(v35 + 24) == v33[9])
  {
    int v36 = *(_DWORD *)(v35 + 36);
    if (v36 <= 196)
    {
      if (v36 <= 57)
      {
        if (!v36) {
          return v31 & 1;
        }
        goto LABEL_88;
      }
      if (v36 != 194)
      {
LABEL_88:
        sub_1CCEA4748(a1, *(int32x2_t *****)(*(void *)(a1 + 144) + 24));
        goto LABEL_89;
      }
      goto LABEL_86;
    }
    if (v36 > 312) {
      goto LABEL_88;
    }
    if (v36 != 199)
    {
      if (v36 != 197) {
        goto LABEL_88;
      }
LABEL_86:
      char v31 = sub_1CCEA4B20(a1, *(llvm::Instruction **)(*(void *)(a1 + 144) + 24));
      return v31 & 1;
    }
    llvm::Instruction::getAAMetadata(*(uint64_t ****)(*(void *)(a1 + 144) + 24), &v603);
    if (*((unsigned char *)v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF) + 8] + 16) != 16)
    {
      uint64_t v318 = sub_1CCEA20C0((uint64_t *)a1, v12, **(llvm::Value ***)(a1 + 152));
      uint64_t v319 = *((_DWORD *)v33 + 5) & 0x7FFFFFF;
      uint64_t v320 = -v319;
      unsigned int v321 = (unsigned __int8 **)&v33[-4 * v319];
      if (*v321)
      {
        uint64_t v322 = &v33[4 * v320];
        uint64_t v324 = v322[2];
        unint64_t v323 = v322 + 2;
        *uint64_t v324 = (llvm::IntegerType *)*(v323 - 1);
        uint64_t v325 = *(v323 - 1);
        if (v325) {
          *(void *)(v325 + 16) = *v323;
        }
      }
      *unsigned int v321 = v318;
      if (v318)
      {
        uint64_t v328 = (llvm::IntegerType **)*((void *)v318 + 1);
        BOOL v326 = (unsigned __int8 ***)(v318 + 8);
        uint64_t v327 = v328;
        uint64_t v329 = &v33[4 * v320];
        v329[1] = v328;
        if (v328) {
          v327[2] = (llvm::IntegerType *)(v329 + 1);
        }
        v329[2] = (llvm::IntegerType **)v326;
        llvm::Use *v326 = v321;
      }
      uint64_t v330 = (1 << *(_WORD *)(*(void *)(a1 + 32) + 18)) | (*(void *)(a1 + 112) - *(void *)(a1 + 40));
      sub_1CC27C328((uint64_t)v33, 63 - __clz(v330 & -v330));
      sub_1CCEA35C4(a1, *(void *)(a1 + 152));
      goto LABEL_399;
    }
    unint64_t v277 = *(unsigned int **)(a1 + 16);
    uint64_t v615 = 4;
    *(void *)&long long v616 = 0;
    *((void *)&v616 + 1) = v33;
    if (v33 != (llvm::IntegerType ***)-8192 && v33 != (llvm::IntegerType ***)-4096 && v33) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v615);
    }
    uint64_t v278 = v277[50];
    unint64_t v279 = *((void *)v277 + 24);
    uint64_t v280 = &v615;
    if (v278 >= v277[51])
    {
      unint64_t v551 = (unint64_t *)(v277 + 48);
      unint64_t v552 = v278 + 1;
      BOOL v553 = v279 + 24 * v278 > (unint64_t)&v615;
      if (v279 <= (unint64_t)&v615 && v553)
      {
        int v592 = (char *)&v615 - v279;
        sub_1CC0BD844(v277 + 48, v552);
        unint64_t v279 = *v551;
        uint64_t v280 = (uint64_t *)&v592[*v551];
      }
      else
      {
        sub_1CC0BD844(v277 + 48, v552);
        unint64_t v279 = *v551;
        uint64_t v280 = &v615;
      }
    }
    unsigned int v281 = v277[50];
    unsigned int v282 = (unint64_t *)(v279 + 24 * v281);
    *unsigned int v282 = 4;
    v282[1] = 0;
    uint64_t v283 = v280[2];
    v282[2] = v283;
    if (v283 != -8192 && v283 != -4096)
    {
      if (v283)
      {
        unint64_t v284 = *v280 & 0xFFFFFFFFFFFFFFF8;
        v282[1] = *(void *)v284;
        *(void *)unint64_t v284 = v282;
        *unsigned int v282 = v284 | 4;
        uint64_t v285 = (unint64_t *)v282[1];
        if (v285) {
          *uint64_t v285 = *v285 & 7 | (unint64_t)(v282 + 1);
        }
      }
    }
    v277[50] = v281 + 1;
    if (*((void *)&v616 + 1) != -8192 && *((void *)&v616 + 1) != -4096 && *((void *)&v616 + 1))
    {
      unint64_t v286 = v615 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v615 & 0xFFFFFFFFFFFFFFF8) = v616;
      if ((void)v616)
      {
        *(void *)long long v616 = *(void *)v616 & 7 | v286;
      }
      else
      {
        uint64_t v287 = *((void *)&v616 + 1);
        int v288 = (int32x2_t *)****((void ****)&v616 + 1);
        unint64_t v289 = (unint64_t)v288[303];
        if (v289 <= v286)
        {
          uint64_t v290 = v288[305].u32[0];
          if (v289 + 16 * v290 > v286)
          {
            unsigned int v291 = v290 - 1;
            LODWORD(v292) = v291 & ((DWORD2(v616) >> 4) ^ (DWORD2(v616) >> 9));
            unint64_t v293 = (uint64_t *)(v289 + 16 * v292);
            uint64_t v294 = *v293;
            if (*((void *)&v616 + 1) == *v293)
            {
LABEL_365:
              *unint64_t v293 = -8192;
              v288[304] = vadd_s32(v288[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v287 = *((void *)&v616 + 1);
            }
            else
            {
              int v295 = 1;
              while (v294 != -4096)
              {
                int v296 = v292 + v295++;
                uint64_t v292 = v296 & v291;
                uint64_t v294 = *(void *)(v289 + 16 * v292);
                if (*((void *)&v616 + 1) == v294)
                {
                  unint64_t v293 = (uint64_t *)(v289 + 16 * v292);
                  goto LABEL_365;
                }
              }
            }
            *(unsigned char *)(v287 + 17) &= ~1u;
          }
        }
      }
    }
    uint64_t v413 = *(void **)(a1 + 32);
    uint64_t v414 = v413[8];
    uint64_t v415 = v414;
    if ((*(_DWORD *)(v414 + 8) & 0xFE) == 0x12) {
      uint64_t v415 = **(void **)(v414 + 16);
    }
    if (*(void *)(a1 + 72)) {
      goto LABEL_590;
    }
    if (*(void *)(a1 + 64)) {
      goto LABEL_593;
    }
    if (*(void *)(a1 + 96) > *(void *)(a1 + 40) || *(void *)(a1 + 104) < *(void *)(a1 + 48)) {
      goto LABEL_659;
    }
    uint64_t v472 = v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF) + 8];
    unint64_t v473 = v472 + 3;
    uint64_t v474 = *((unsigned int *)v472 + 8);
    if (v474 >= 0x41)
    {
      int v475 = 0;
      int64_t v476 = (unint64_t)(v474 + 63) >> 6;
      do
      {
        BOOL v456 = v476-- < 1;
        if (v456) {
          break;
        }
        unint64_t v477 = *((void *)*v473 + v476);
        v475 += __clz(v477);
      }
      while (!v477);
      int v478 = v474 | 0xFFFFFFC0;
      if ((v474 & 0x3F) == 0) {
        int v478 = 0;
      }
      if ((v474 - v475 - v478) > 0x40)
      {
LABEL_659:
        unsigned int v486 = llvm::ConstantInt::get(*v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF) + 8], *(void *)(a1 + 120) - *(void *)(a1 + 112), 0);
        unint64_t v487 = sub_1CCEA20C0((uint64_t *)a1, v12, **(llvm::Value ***)(a1 + 152));
        int v488 = &v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF)];
        uint64_t v489 = (uint64_t)v488[4];
        uint64_t v490 = (1 << *(_WORD *)(*(void *)(a1 + 32) + 18)) | (*(void *)(a1 + 112) - *(void *)(a1 + 40));
        unint64_t v491 = 63 - __clz(v490 & -v490);
        uint64_t v492 = v488[12];
        uint64_t v493 = *((unsigned int *)v492 + 8);
        if (v493 > 0x40)
        {
          int v495 = 0;
          int64_t v496 = (unint64_t)(v493 + 63) >> 6;
          do
          {
            BOOL v456 = v496-- < 1;
            if (v456) {
              break;
            }
            unint64_t v497 = *((void *)v492[3] + v496);
            v495 += __clz(v497);
          }
          while (!v497);
          int v498 = v493 | 0xFFFFFFC0;
          if ((v493 & 0x3F) == 0) {
            int v498 = 0;
          }
          BOOL v494 = v495 + v498 == v493;
        }
        else
        {
          BOOL v494 = v492[3] == 0;
        }
        int v499 = v494;
        MemSet = llvm::IRBuilderBase::CreateMemSet((uint64_t)v12, (llvm::Value *)v487, v489, v486, v491 | 0x100u, v499 ^ 1u, 0, 0, 0);
        uint64_t v502 = (llvm::MDNode *)v603;
        unsigned int v504 = (llvm::MDNode *)v605;
        unsigned int v503 = v606;
        if (v603 || v604 || v605 || v606)
        {
          if (v604)
          {
            uint64_t v505 = llvm::AAMDNodes::shiftTBAAStruct(v604, (llvm::MDNode *)(*(void *)(a1 + 112) - *(void *)(a1 + 96)), v500);
            unsigned int v504 = (llvm::MDNode *)v605;
            unsigned int v503 = v606;
          }
          else
          {
            uint64_t v505 = 0;
          }
          if (v502 || MemSet[6] || (*((unsigned char *)MemSet + 23) & 0x20) != 0) {
            llvm::Value::setMetadata(MemSet, 1, v502);
          }
          if (v505 || MemSet[6] || (*((unsigned char *)MemSet + 23) & 0x20) != 0) {
            llvm::Value::setMetadata(MemSet, 5, v505);
          }
          if (v504 || MemSet[6] || (*((unsigned char *)MemSet + 23) & 0x20) != 0) {
            llvm::Value::setMetadata(MemSet, 7, v504);
          }
          if (v503 || MemSet[6] || (*((unsigned char *)MemSet + 23) & 0x20) != 0) {
            llvm::Value::setMetadata(MemSet, 8, v503);
          }
        }
        goto LABEL_399;
      }
      unint64_t v473 = (llvm::Type **)*v473;
    }
    if (!((unint64_t)*v473 >> 32))
    {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)*v413 + 1912), *v473);
      if (sub_1CCEA0BBC(*(void *)a1, v479, v414))
      {
        uint64_t v480 = *(void *)a1;
        unint64_t v481 = sub_1CB83544C(*(void *)a1, v415);
        uint64_t v482 = *(char **)(v480 + 32);
        size_t v483 = *(void *)(v480 + 40);
        int v484 = &v482[v483];
        if (v481 <= 0xFF)
        {
          unsigned int v485 = (char *)memchr(v482, (char)v481, v483);
          if (v485) {
            int v484 = v485;
          }
        }
        if (v484 - v482 != v483)
        {
          if (*(void *)(a1 + 72))
          {
LABEL_590:
            uint64_t v416 = *(void *)(a1 + 40);
            unint64_t v417 = *(void *)(a1 + 112) - v416;
            unint64_t v418 = *(void *)(a1 + 88);
            unint64_t v419 = v417 / v418;
            uint64_t v420 = (llvm::Type *)(((*(void *)(a1 + 120) - v416) / v418) - (v417 / v418));
            uint64_t v421 = (llvm::IntegerType ***)v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF) + 4];
            unint64_t v422 = sub_1CB83544C(*(void *)a1, *(void *)(a1 + 80));
            int v423 = sub_1CCEA5D40(a1, v421, v422 >> 3);
            VectorSplat = sub_1CCEA2284(*(void *)(*(void *)a1 + 232), *(_DWORD *)(*(void *)a1 + 240), v12, (uint64_t)v423, *(void *)(a1 + 80));
            if (v420 < 2)
            {
              int v425 = (llvm::IRBuilderBase *)v12;
            }
            else
            {
              uint64_t v615 = (uint64_t)"vsplat";
              __int16 v618 = 259;
              int v425 = (llvm::IRBuilderBase *)v12;
              VectorSplat = (unsigned __int8 *)llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v12, v420, VectorSplat, (uint64_t)&v615);
            }
            uint64_t v444 = *(void *)(a1 + 32);
            uint64_t v445 = *(void *)(v444 + 64);
            __int16 v446 = *(_WORD *)(v444 + 18);
            uint64_t v611 = "oldload";
            __int16 v614 = 259;
            char v447 = v446 & 0x3F;
            uint64_t v448 = operator new(0x60uLL);
            v448[13] = v448[13] & 0x38000000 | 1;
            unsigned int v449 = (llvm::Instruction *)(v448 + 8);
            *(void *)uint64_t v448 = 0;
            *((void *)v448 + 1) = 0;
            *((void *)v448 + 2) = 0;
            *((void *)v448 + 3) = v448 + 8;
            __int16 v618 = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v448 + 8), v445, v444, (const char **)&v615, 0, v447, 0);
            (*(void (**)(void, llvm::Instruction *, const char **, void, void))(**(void **)(a1 + 256)
                                                                                               + 16))(*(void *)(a1 + 256), v449, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
            uint64_t v450 = *(unsigned int *)(a1 + 184);
            if (v450)
            {
              uint64_t v508 = *(void *)(a1 + 176);
              uint64_t v509 = v508 + 16 * v450;
              do
              {
                llvm::Instruction::setMetadata(v449, *(_DWORD *)v508, *(llvm::MDNode **)(v508 + 8));
                v508 += 16;
              }
              while (v508 != v509);
            }
            uint64_t v615 = (uint64_t)"vec";
            __int16 v618 = 259;
            unsigned int v12 = (uint64_t *)v425;
            uint64_t v443 = sub_1CCEA3DA0(v425, (unsigned __int8 *)v449, (const llvm::APInt *)VectorSplat, v419, (uint64_t)&v615);
            goto LABEL_603;
          }
          if (!*(void *)(a1 + 64))
          {
            unint64_t v526 = (llvm::IntegerType ***)v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF) + 4];
            unint64_t v527 = sub_1CB83544C(*(void *)a1, v415);
            uint64_t v528 = (unsigned __int8 *)sub_1CCEA5D40(a1, v526, v527 >> 3);
            if (v414 && (*(_DWORD *)(v414 + 8) & 0xFE) == 0x12)
            {
              unint64_t v529 = (llvm::Type *)*(unsigned int *)(v414 + 32);
              uint64_t v615 = (uint64_t)"vsplat";
              __int16 v618 = 259;
              uint64_t v528 = (unsigned __int8 *)llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v12, v529, v528, (uint64_t)&v615);
            }
            uint64_t v439 = *(void *)(*(void *)a1 + 232);
            unsigned int v440 = *(_DWORD *)(*(void *)a1 + 240);
            uint64_t v441 = v12;
            uint64_t v442 = (uint64_t)v528;
            goto LABEL_599;
          }
LABEL_593:
          uint64_t v426 = sub_1CCEA5D40(a1, (llvm::IntegerType ***)v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF) + 4], *(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 112));
          if (*(void *)(a1 + 64))
          {
            uint64_t v427 = *(void *)(a1 + 96);
            if (v427 != *(void *)(a1 + 40) || *(void *)(a1 + 104) != v427)
            {
              size_t v428 = v12;
              uint64_t v429 = *(void *)(a1 + 32);
              uint64_t v430 = *(void *)(v429 + 64);
              __int16 v431 = *(_WORD *)(v429 + 18);
              uint64_t v611 = "oldload";
              __int16 v614 = 259;
              char v432 = v431 & 0x3F;
              uint64_t v433 = operator new(0x60uLL);
              v433[13] = v433[13] & 0x38000000 | 1;
              uint64_t v434 = (llvm::Instruction *)(v433 + 8);
              *(void *)uint64_t v433 = 0;
              *((void *)v433 + 1) = 0;
              *((void *)v433 + 2) = 0;
              *((void *)v433 + 3) = v433 + 8;
              __int16 v618 = 257;
              llvm::LoadInst::LoadInst((llvm::Value *)(v433 + 8), v430, v429, (const char **)&v615, 0, v432, 0);
              (*(void (**)(void, llvm::Instruction *, const char **, void, void))(**(void **)(a1 + 256)
                                                                                                 + 16))(*(void *)(a1 + 256), v434, &v611, *(void *)(a1 + 224), *(void *)(a1 + 232));
              uint64_t v435 = *(unsigned int *)(a1 + 184);
              if (v435)
              {
                uint64_t v520 = *(void *)(a1 + 176);
                uint64_t v521 = v520 + 16 * v435;
                do
                {
                  llvm::Instruction::setMetadata(v434, *(_DWORD *)v520, *(llvm::MDNode **)(v520 + 8));
                  v520 += 16;
                }
                while (v520 != v521);
              }
              unsigned int v12 = v428;
              unint64_t v436 = sub_1CCEA2284(*(void *)(*(void *)a1 + 232), *(_DWORD *)(*(void *)a1 + 240), v428, (uint64_t)v434, *(void *)(a1 + 64));
              unint64_t v437 = *(void *)(a1 + 112) - *(void *)(a1 + 40);
              int v438 = *(unsigned char **)a1;
              uint64_t v615 = (uint64_t)"insert";
              __int16 v618 = 259;
              uint64_t v426 = sub_1CCEA2F70(v438, (uint64_t)v428, (llvm::ConstantInt ***)v436, (uint64_t)v426, v437, (uint64_t)&v615);
            }
          }
          uint64_t v439 = *(void *)(*(void *)a1 + 232);
          unsigned int v440 = *(_DWORD *)(*(void *)a1 + 240);
          uint64_t v441 = v12;
          uint64_t v442 = (uint64_t)v426;
LABEL_599:
          uint64_t v443 = sub_1CCEA2284(v439, v440, v441, v442, v414);
LABEL_603:
          uint64_t v451 = v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF) + 12];
          uint64_t v452 = *((unsigned int *)v451 + 8);
          if (v452 > 0x40)
          {
            int v454 = 0;
            int64_t v455 = (unint64_t)(v452 + 63) >> 6;
            do
            {
              BOOL v456 = v455-- < 1;
              if (v456) {
                break;
              }
              unint64_t v457 = *((void *)v451[3] + v455);
              v454 += __clz(v457);
            }
            while (!v457);
            int v458 = v452 | 0xFFFFFFC0;
            if ((v452 & 0x3F) == 0) {
              int v458 = 0;
            }
            BOOL v453 = v454 + v458 == v452;
          }
          else
          {
            BOOL v453 = v451[3] == 0;
          }
          __int16 v459 = v453;
          uint64_t v460 = sub_1CC27BF8C(v12, (uint64_t)v443, *(void *)(a1 + 32), *(_WORD *)(*(void *)(a1 + 32) + 18) & 0x3F | 0x100u, v459 ^ 1u);
          uint64_t v615 = 0x190000000ALL;
          llvm::Instruction::copyMetadata((uint64_t)v460, (uint64_t)v33, (int *)&v615, 2);
          uint64_t v462 = (llvm::MDNode *)v603;
          uint64_t v464 = (llvm::MDNode *)v605;
          uint64_t v463 = v606;
          if (v603 || v604 || v605 || v606)
          {
            if (v604)
            {
              unint64_t v465 = llvm::AAMDNodes::shiftTBAAStruct(v604, (llvm::MDNode *)(*(void *)(a1 + 112) - *(void *)(a1 + 96)), v461);
              uint64_t v464 = (llvm::MDNode *)v605;
              uint64_t v463 = v606;
            }
            else
            {
              unint64_t v465 = 0;
            }
            if (v462 || *((void *)v460 + 6) || (*((unsigned char *)v460 + 23) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v460, 1, v462);
            }
            if (v465 || *((void *)v460 + 6) || (*((unsigned char *)v460 + 23) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v460, 5, v465);
            }
            if (v464 || *((void *)v460 + 6) || (*((unsigned char *)v460 + 23) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v460, 7, v464);
            }
            if (v463 || *((void *)v460 + 6) || (*((unsigned char *)v460 + 23) & 0x20) != 0) {
              llvm::Value::setMetadata((uint64_t ***)v460, 8, v463);
            }
          }
          int v466 = v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF) + 12];
          uint64_t v467 = *((unsigned int *)v466 + 8);
          if (v467 > 0x40)
          {
            int v468 = 0;
            int64_t v469 = (unint64_t)(v467 + 63) >> 6;
            do
            {
              BOOL v456 = v469-- < 1;
              if (v456) {
                break;
              }
              unint64_t v470 = *((void *)v466[3] + v469);
              v468 += __clz(v470);
            }
            while (!v470);
            int v471 = v467 | 0xFFFFFFC0;
            if ((v467 & 0x3F) == 0) {
              int v471 = 0;
            }
            BOOL v314 = v468 + v471 == v467;
          }
          else
          {
            BOOL v314 = v466[3] == 0;
          }
          goto LABEL_401;
        }
      }
    }
    goto LABEL_659;
  }
  return v31 & 1;
}

int32x2_t *sub_1CCE996B8(int32x2_t *result)
{
  uint64_t v1 = result[4].u32[0];
  __int32 v2 = result[2].i32[0];
  if (v2)
  {
    int32x2_t v3 = *result;
    uint64_t v4 = *(void *)(*(void *)&result[3] + 8 * v1 - 8);
    __int32 v5 = v2 - 1;
    LODWORD(v6) = ((v4 >> 4) ^ (v4 >> 9)) & (v2 - 1);
    unint64_t v7 = (uint64_t *)(*(void *)result + 8 * v6);
    uint64_t v8 = *v7;
    if (v4 == *v7)
    {
LABEL_7:
      *unint64_t v7 = -8192;
      result[1] = vadd_s32(result[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v9 = 1;
      while (v8 != -4096)
      {
        int v10 = v6 + v9++;
        uint64_t v6 = v10 & v5;
        uint64_t v8 = *(void *)(*(void *)&v3 + 8 * v6);
        if (v4 == v8)
        {
          unint64_t v7 = (uint64_t *)(*(void *)&v3 + 8 * v6);
          goto LABEL_7;
        }
      }
    }
  }
  result[4].i32[0] = v1 - 1;
  return result;
}

uint64_t llvm::SROAPass::splitAlloca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a3 + 24))
  {
    char v29 = 0;
    return v29 & 1;
  }
  uint64_t v6 = (llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 40) + 272);
  BOOL v75 = llvm::SROAPass::presplitLoadsAndStores(a1, a2, a3);
  unint64_t v7 = *(llvm::Type **)(a2 + 64);
  unint64_t v8 = (unint64_t)(sub_1CB83544C((uint64_t)v6, (uint64_t)v7) + 7) >> 3;
  char Alignment = llvm::DataLayout::getAlignment(v6, v7, 1);
  unint64_t v10 = ((1 << Alignment) + v8 - 1) & -(1 << Alignment);
  if (v10 <= 0x400)
  {
    if (v10 > 0x38) {
      operator new();
    }
    unint64_t v11 = ((unint64_t)(v10 + 1) << 58) | (2 * ~(-1 << (v10 + 1))) | 1;
    uint64_t v12 = *(unsigned int *)(a3 + 24);
    if (v12)
    {
      uint64_t v13 = *(int **)(a3 + 16);
      uint64_t v14 = v13;
      do
      {
        int v15 = *v14;
        unint64_t v16 = *((void *)v14 + 1);
        if (v16 >= v10) {
          unint64_t v16 = ((1 << Alignment) + v8 - 1) & -(1 << Alignment);
        }
        unint64_t v17 = (v15 + 1);
        if (v16 > v17)
        {
          unsigned int v18 = v15 + 2;
          do
          {
            if (v11) {
              unint64_t v11 = ((2 * ~((-1 << (v11 >> 58)) | (1 << v17))) | 0xFC00000000000000) & v11 | 1;
            }
            else {
              *(void *)(*(void *)v11 + 8 * ((v18 - 1) >> 6)) &= ~(1 << (v18 - 1));
            }
            LOBYTE(v17) = v18;
            BOOL v65 = v16 > v18++;
          }
          while (v65);
        }
        v14 += 6;
      }
      while (v14 != &v13[6 * v12]);
      uint64_t v19 = 24 * v12;
      uint64_t v20 = (unint64_t *)(v13 + 4);
      char v21 = 1;
      do
      {
        unint64_t v22 = *v20;
        if ((*v20 & 4) != 0)
        {
          unint64_t v23 = *(v20 - 2);
          if (v23 <= v10)
          {
            if (v11)
            {
              unint64_t v25 = (v11 >> 1) & ~(-1 << (v11 >> 58));
            }
            else
            {
              uint64_t v24 = v23 >> 6;
              LOBYTE(v23) = v23 & 0x3F;
              unint64_t v25 = *(void *)(*(void *)v11 + 8 * v24);
            }
            if (((v25 >> v23) & 1) == 0) {
              goto LABEL_27;
            }
          }
          unint64_t v26 = *(v20 - 1);
          if (v26 <= v10)
          {
            if (v11)
            {
              unint64_t v28 = (v11 >> 1) & ~(-1 << (v11 >> 58));
            }
            else
            {
              uint64_t v27 = v26 >> 6;
              LOBYTE(v26) = v26 & 0x3F;
              unint64_t v28 = *(void *)(*(void *)v11 + 8 * v27);
            }
            if (((v28 >> v26) & 1) == 0)
            {
LABEL_27:
              if ((*(unsigned char *)(*(void *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24) + 16) & 0xFE) == 0x3C)
              {
                char v21 = 0;
                *uint64_t v20 = v22 & 0xFFFFFFFFFFFFFFFBLL;
              }
            }
          }
        }
        v20 += 3;
        v19 -= 24;
      }
      while (v19);
      if ((v11 & 1) == 0)
      {
        if (*(void *)v11 != v11 + 16) {
          free(*(void **)v11);
        }
        MEMORY[0x1D25D9CE0](v11, 0x1080C40EF38A13ELL);
        LODWORD(v12) = *(_DWORD *)(a3 + 24);
      }
    }
    else
    {
      char v21 = 1;
    }
    char v33 = v75;
    if (v21) {
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  LODWORD(v12) = *(_DWORD *)(a3 + 24);
  if (v12)
  {
    char v30 = *(void **)(a3 + 16);
    char v31 = &v30[3 * v12];
    char v32 = 1;
    char v33 = v75;
    do
    {
      while (1)
      {
        uint64_t v34 = v30[2];
        if ((v34 & 4) == 0 || !*v30 && v30[1] >= v10) {
          break;
        }
        if ((*(unsigned char *)(*(void *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24) + 16) & 0xFE) != 0x3C) {
          break;
        }
        char v32 = 0;
        void v30[2] = v34 & 0xFFFFFFFFFFFFFFFBLL;
        v30 += 3;
        if (v30 == v31) {
          goto LABEL_47;
        }
      }
      v30 += 3;
    }
    while (v30 != v31);
    if (v32) {
      goto LABEL_50;
    }
LABEL_47:
    if (v12 >= 2)
    {
      qsort(*(void **)(a3 + 16), v12, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1CCEA0208);
      LODWORD(v12) = *(_DWORD *)(a3 + 24);
    }
    goto LABEL_50;
  }
  char v33 = v75;
LABEL_50:
  uint64_t v92 = v94;
  uint64_t v93 = 0x400000000;
  uint64_t v35 = *(void *)(a3 + 16);
  int8x16_t v101 = 0uLL;
  *(void *)&long long v102 = v35;
  *((void *)&v102 + 1) = v35;
  unint64_t v103 = v105;
  uint64_t v104 = 0x400000000;
  long long v106 = v35 + 24 * (unint64_t)v12;
  if (v12)
  {
    sub_1CCE9FED4((uint64_t)&v101);
    uint64_t v35 = *(void *)(a3 + 16);
    unsigned int v36 = *(_DWORD *)(a3 + 24);
  }
  else
  {
    unsigned int v36 = 0;
  }
  int8x16_t v95 = 0uLL;
  *(void *)&long long v96 = v35 + 24 * v36;
  *((void *)&v96 + 1) = v96;
  char v97 = v99;
  uint64_t v98 = 0x400000000;
  long long v100 = (unint64_t)v96;
  sub_1CCE8E468((uint64_t)v85, (long long *)v101.i8, (long long *)v95.i8);
  if (v97 != v99) {
    free(v97);
  }
  if (v103 != v105) {
    free(v103);
  }
  int8x16_t v101 = (int8x16_t)v85[0];
  long long v102 = v85[1];
  unint64_t v103 = v105;
  uint64_t v104 = 0x400000000;
  unsigned int v37 = v87;
  uint64_t v79 = a2;
  if (v87)
  {
    if (v87 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v105, __src, 8 * v87);
    LODWORD(v104) = v37;
    char v33 = v75;
  }
  long long v106 = v88[2];
  int8x16_t v95 = (int8x16_t)v88[3];
  long long v96 = v88[4];
  char v97 = v99;
  uint64_t v98 = 0x400000000;
  unsigned int v38 = v90;
  if (v90)
  {
    if (v90 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v99, v89, 8 * v90);
    LODWORD(v98) = v38;
    char v33 = v75;
  }
  long long v100 = v91[2];
  while ((void)v102 != (void)v96 || (v104 == 0) != (v98 == 0))
  {
    uint64_t v39 = llvm::SROAPass::rewritePartition(a1, a2, a3, (long long *)v101.i8);
    if (v39)
    {
      uint64_t v40 = v39;
      if (v39 != a2)
      {
        unint64_t v41 = sub_1CB83544C((uint64_t)v6, *(void *)(v39 + 64));
        unint64_t v42 = 8 * (v101.i64[1] - v101.i64[0]);
        if (v42 >= v41) {
          unint64_t v42 = v41;
        }
        *(void *)&long long v83 = v40;
        *((void *)&v83 + 1) = 8 * v101.i64[0];
        unint64_t v84 = v42;
        if (v93 >= HIDWORD(v93))
        {
          if (v92 <= &v83 && (char *)v92 + 24 * v93 > (char *)&v83) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v43 = (char *)v92 + 24 * v93;
        long long v44 = v83;
        *((void *)v43 + 2) = v84;
        *(_OWORD *)uint64_t v43 = v44;
        LODWORD(v93) = v93 + 1;
      }
      char v33 = 1;
    }
    sub_1CCE9FED4((uint64_t)&v101);
  }
  if (v97 != v99) {
    free(v97);
  }
  if (v103 != v105) {
    free(v103);
  }
  if (v89 != v91) {
    free(v89);
  }
  if (__src != v88) {
    free(__src);
  }
  unint64_t v45 = (char *)&v83;
  llvm::FindDbgAddrUses(a2, (unint64_t *)&v83);
  char v76 = v33;
  if ((v83 & 4) != 0)
  {
    unint64_t v45 = *(char **)(v83 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v46 = &v45[8 * *(unsigned int *)((v83 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    uint64_t v46 = (char *)&v83 + 8 * ((unint64_t)v83 > 7);
  }
  if (v45 != v46)
  {
    unint64_t v77 = v46;
    uint64_t v78 = v6;
    while (1)
    {
      unsigned int v80 = v45;
      uint64_t v47 = *(void *)v45;
      char v48 = *(uint64_t ***)(*(void *)(*(void *)v45 - 32 * (*(_DWORD *)(*(void *)v45 + 20) & 0x7FFFFFF) + 64)
                         + 24);
      llvm::DIBuilder::DIBuilder((uint64_t)v85, *(void **)(*(void *)(*(void *)(v79 + 40) + 56) + 40), 0, 0);
      unint64_t v82 = sub_1CB83544C((uint64_t)v6, *(void *)(v79 + 64));
      if (v93) {
        break;
      }
LABEL_129:
      sub_1CC2DBB1C((uint64_t)v85);
      unint64_t v45 = (char *)v80 + 8;
      uint64_t v6 = v78;
      if ((char *)v80 + 8 == v77) {
        goto LABEL_130;
      }
    }
    unint64_t v49 = (llvm::ValueAsMetadata **)v92;
    BOOL v81 = (llvm::ValueAsMetadata **)((char *)v92 + 24 * v93);
    uint64_t v50 = v47 + 32;
    while (1)
    {
      unint64_t v52 = *v49;
      uint64_t v51 = v49[1];
      unint64_t v53 = (unint64_t)v49[2];
      uint64_t v55 = v48[3];
      unint64_t v54 = v48[4];
      if (v53 >= v82)
      {
        llvm::DIExpression::getFragmentInfo(v48[3], v48[4], &v101);
        uint64_t v56 = (uint64_t)v48;
        if (!(_BYTE)v102) {
          goto LABEL_114;
        }
      }
      llvm::DIExpression::getFragmentInfo(v55, &v55[v54 - v55], &v101);
      if ((_BYTE)v102) {
        uint64_t v57 = v101.i64[1];
      }
      else {
        uint64_t v57 = 0;
      }
      unint64_t v58 = (unint64_t)v51 + v57;
      if ((_BYTE)v102)
      {
        unint64_t v59 = v101.i64[0] + v101.i64[1];
        if (v101.i64[0] + v101.i64[1] - v58 < v53) {
          unint64_t v53 = v59 - v58;
        }
        if (v59 <= v58) {
          goto LABEL_97;
        }
      }
      llvm::DIExpression::getFragmentInfo(v55, &v55[v54 - v55], &v95);
      if ((_BYTE)v96) {
        uint64_t v60 = v95.i64[1];
      }
      else {
        uint64_t v60 = 0;
      }
      unint64_t v61 = (const llvm::DIExpression *)(v58 - v60);
      unint64_t SizeInBits = llvm::DIVariable::getSizeInBits(*(llvm::DIVariable **)(*(void *)(v50
                                                                                    - 32
                                                                                    * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF))
                                                                        + 24));
      if (v63)
      {
        if (v53 >= SizeInBits) {
          unint64_t v64 = SizeInBits;
        }
        else {
          unint64_t v64 = v53;
        }
        if (v64) {
          BOOL v65 = (unint64_t)v61 + v64 > SizeInBits;
        }
        else {
          BOOL v65 = 1;
        }
        if (v65) {
          goto LABEL_97;
        }
        uint64_t v56 = (uint64_t)v48;
        BOOL v65 = SizeInBits > v53;
        LODWORD(v53) = v64;
        if (!v65) {
          goto LABEL_114;
        }
      }
      FragmentExpressiouint64_t n = llvm::DIExpression::createFragmentExpression((llvm::DIExpression *)v48, v61, v53);
      if (v67)
      {
        uint64_t v56 = (uint64_t)FragmentExpression;
LABEL_114:
        llvm::FindDbgAddrUses((uint64_t)v52, (unint64_t *)&v101);
        if ((v101.i8[0] & 4) != 0)
        {
          uint64_t v68 = *(int8x16_t **)(v101.i64[0] & 0xFFFFFFFFFFFFFFF8);
          unsigned int v69 = (int8x16_t *)((char *)v68 + 8 * *(unsigned int *)((v101.i64[0] & 0xFFFFFFFFFFFFFFF8) + 8));
        }
        else
        {
          uint64_t v68 = &v101;
          unsigned int v69 = (int8x16_t *)((char *)&v101 + 8 * (v101.i64[0] > 7uLL));
        }
        while (v68 != v69)
        {
          if (*(void *)(*(void *)(v68->i64[0] - 32 * (*(_DWORD *)(v68->i64[0] + 20) & 0x7FFFFFF) + 32) + 24) == *(void *)(*(void *)(v50 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF)) + 24))
          {
            uint64_t v70 = *(void *)(v68->i64[0] + 48);
            uint64_t v71 = *(_DWORD *)(v70 + 8) == 2 ? *(void *)(v70 - 8) : 0;
            uint64_t v72 = *(void *)(v47 + 48);
            uint64_t v73 = *(_DWORD *)(v72 + 8) == 2 ? *(void *)(v72 - 8) : 0;
            if (v71 == v73) {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
          }
          uint64_t v68 = (int8x16_t *)((char *)v68 + 8);
        }
        sub_1CBFA5CA8(&v101);
        llvm::DIBuilder::insertDeclare((uint64_t)v85, v52, *(void *)(*(void *)(v50 - 32 * (*(_DWORD *)(v47 + 20) & 0x7FFFFFF)) + 24), v56, *(void *)(v47 + 48), *(void *)(v79 + 40), v79);
      }
LABEL_97:
      v49 += 3;
      if (v49 == v81) {
        goto LABEL_129;
      }
    }
  }
LABEL_130:
  sub_1CBFA5CA8(&v83);
  if (v92 != v94) {
    free(v92);
  }
  char v29 = v76;
  return v29 & 1;
}

void llvm::SROAPass::clobberUse(llvm::SROAPass *this, llvm::PoisonValue ***a2)
{
  uint64_t v4 = *a2;
  __int32 v5 = llvm::PoisonValue::get(**a2, (llvm::Type *)a2);
  if (*a2)
  {
    *a2[2] = (llvm::PoisonValue *)a2[1];
    uint64_t v6 = a2[1];
    if (v6) {
      void v6[2] = (llvm::PoisonValue *)a2[2];
    }
  }
  *a2 = (llvm::PoisonValue **)v5;
  if (v5)
  {
    int v9 = (llvm::PoisonValue **)v5[1];
    unint64_t v7 = (llvm::PoisonValue ****)(v5 + 1);
    unint64_t v8 = v9;
    a2[1] = v9;
    if (v9) {
      v8[2] = (llvm::PoisonValue *)(a2 + 1);
    }
    a2[2] = (llvm::PoisonValue **)v7;
    *unint64_t v7 = a2;
  }
  if (*((unsigned __int8 *)v4 + 16) >= 0x1Cu
    && !v4[1]
    && llvm::wouldInstructionBeTriviallyDead((uint64_t)v4, 0))
  {
    uint64_t v33 = 4;
    uint64_t v34 = 0;
    uint64_t v35 = (int32x2_t ****)v4;
    if (v4 != (llvm::PoisonValue **)-8192 && v4 != (llvm::PoisonValue **)-4096 && v4) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v33);
    }
    uint64_t v10 = *((unsigned int *)this + 50);
    unint64_t v11 = *((void *)this + 24);
    uint64_t v12 = &v33;
    if (v10 >= *((_DWORD *)this + 51))
    {
      char v29 = (unint64_t *)((char *)this + 192);
      unint64_t v30 = v10 + 1;
      BOOL v31 = v11 + 24 * v10 > (unint64_t)&v33;
      if (v11 <= (unint64_t)&v33 && v31)
      {
        char v32 = (char *)&v33 - v11;
        sub_1CC0BD844((unsigned int *)this + 48, v30);
        unint64_t v11 = *v29;
        uint64_t v12 = (uint64_t *)&v32[*v29];
      }
      else
      {
        sub_1CC0BD844((unsigned int *)this + 48, v30);
        unint64_t v11 = *v29;
        uint64_t v12 = &v33;
      }
    }
    unsigned int v13 = *((_DWORD *)this + 50);
    uint64_t v14 = (unint64_t *)(v11 + 24 * v13);
    *uint64_t v14 = 4;
    v14[1] = 0;
    uint64_t v15 = v12[2];
    v14[2] = v15;
    if (v15 != -8192 && v15 != -4096)
    {
      if (v15)
      {
        unint64_t v16 = *v12 & 0xFFFFFFFFFFFFFFF8;
        v14[1] = *(void *)v16;
        *(void *)unint64_t v16 = v14;
        *uint64_t v14 = v16 | 4;
        unint64_t v17 = (unint64_t *)v14[1];
        if (v17) {
          unint64_t *v17 = *v17 & 7 | (unint64_t)(v14 + 1);
        }
      }
    }
    *((_DWORD *)this + 50) = v13 + 1;
    if (v35 != (int32x2_t ****)-8192 && v35 != (int32x2_t ****)-4096 && v35)
    {
      unint64_t v18 = v33 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v33 & 0xFFFFFFFFFFFFFFF8) = v34;
      if (v34)
      {
        unint64_t *v34 = *v34 & 7 | v18;
      }
      else
      {
        uint64_t v19 = v35;
        uint64_t v20 = ***v35;
        unint64_t v21 = (unint64_t)v20[303];
        if (v21 <= v18)
        {
          uint64_t v22 = v20[305].u32[0];
          if (v21 + 16 * v22 > v18)
          {
            unsigned int v23 = v22 - 1;
            LODWORD(v24) = v23 & ((v35 >> 4) ^ (v35 >> 9));
            unint64_t v25 = (int32x2_t *****)(v21 + 16 * v24);
            unint64_t v26 = *v25;
            if (v35 == *v25)
            {
LABEL_33:
              *unint64_t v25 = (int32x2_t ****)-8192;
              v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v19 = v35;
            }
            else
            {
              int v27 = 1;
              while (v26 != (int32x2_t ****)-4096)
              {
                int v28 = v24 + v27++;
                uint64_t v24 = v28 & v23;
                unint64_t v26 = *(int32x2_t *****)(v21 + 16 * v24);
                if (v35 == v26)
                {
                  unint64_t v25 = (int32x2_t *****)(v21 + 16 * v24);
                  goto LABEL_33;
                }
              }
            }
            *((unsigned char *)v19 + 17) &= ~1u;
          }
        }
      }
    }
  }
}

uint64_t llvm::SROAPass::runOnAlloca(llvm::SROAPass *this, llvm::AllocaInst *a2)
{
  __int32 v2 = (uint64_t *)a2;
  v837[4] = *MEMORY[0x1E4F143B8];
  if (!*((void *)a2 + 1)) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  int32x2_t v3 = (llvm::DataLayout *)(*(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40) + 272);
  uint64_t v4 = (unsigned __int8 *)*((void *)a2 + 8);
  uint64_t v5 = sub_1CB83544C((uint64_t)v3, (uint64_t)v4);
  BOOL v7 = v6 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v3, (llvm::Type *)v4, 1);
  if (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)v2)) {
    goto LABEL_9;
  }
  unint64_t v9 = (unint64_t)(v5 + 7) >> 3;
  BOOL v10 = v7;
  unint64_t v11 = ~(-1 << Alignment);
  unint64_t v12 = v9 + v11;
  unsigned int v13 = v4[8];
  if (v13 > 0x11) {
    goto LABEL_1119;
  }
  if (((1 << v13) & 0xAC7F) != 0)
  {
    BOOL v14 = !v10 && v12 > v11;
    if (!v14)
    {
LABEL_9:
      LOBYTE(v15) = 0;
      return v15 & 1;
    }
    goto LABEL_19;
  }
  if (((1 << v13) & 0x30000) == 0)
  {
LABEL_1119:
    if ((v13 & 0xFE) != 0x12 && v13 != 21) {
      goto LABEL_9;
    }
  }
  int isSizedDerivedType = llvm::Type::isSizedDerivedType((uint64_t)v4, 0);
  if (v10 || v12 <= v11 || isSizedDerivedType == 0) {
    goto LABEL_9;
  }
LABEL_19:
  sub_1CCE926C0((uint64_t)&v796, (uint64_t **)v2);
  uint64_t v785 = v787;
  uint64_t v786 = 0x800000000;
  int v788 = v792;
  uint64_t v789 = v792;
  uint64_t v790 = 8;
  int v791 = 0;
  uint64_t v793 = 0;
  uint64_t v794 = v3;
  uint64_t v795 = (llvm::IRBuilderBase *)&v796;
  sub_1CCEA5FCC((uint64_t)&v785, v2[1]);
  unsigned int v19 = v786;
  uint64_t v749 = v2;
  if (v786)
  {
    int v20 = 0;
    uint64_t v21 = 897;
    while (2)
    {
      uint64_t v22 = (void *)*((void *)v785 + v19 - 1);
      LODWORD(v786) = v19 - 1;
      uint64_t v793 = v22;
      unsigned int v23 = (_WORD *)v22[3];
      switch(*((unsigned char *)v23 + 16))
      {
        case '<':
          if ((v23[9] & 0x381) != 0) {
            goto LABEL_22;
          }
          uint64_t v24 = *(void *)v23;
          int v25 = *(_DWORD *)(*(void *)v23 + 8);
          if ((v25 & 0xFE) == 0x12
            || *(_DWORD *)(*(void *)v23 + 8) < 0x16u && ((0x20AC7Fu >> v25) & 1) != 0)
          {
            goto LABEL_22;
          }
          uint64_t v26 = *v22;
          llvm::Instruction::getAAMetadata((uint64_t ***)v23, v768);
          unint64_t v28 = (unsigned __int16)v23[9];
          char v29 = v794;
          unint64_t v30 = v795;
          uint64_t v805 = v795;
          v806.i64[0] = (uint64_t)&v807;
          v806.i64[1] = 0x400000000;
          uint64_t v31 = **((void **)v795 + 8);
          char v32 = *(llvm::ConstantInt **)(v31 + 1960);
          unsigned int v33 = *(_DWORD *)(v31 + 1968);
          LODWORD(v772) = v33 >> 8;
          if (v33 >> 8 >= 0x41) {
            operator new[]();
          }
          uint64_t v771 = 0;
          uint64_t v34 = llvm::ConstantInt::get(v32, (llvm::LLVMContext *)&v771, v27);
          if (v772 >= 0x41 && v771) {
            MEMORY[0x1D25D9CB0](v771, 0x1000C8000313F17);
          }
          uint64_t v809 = v811;
          uint64_t v810 = 0x400000001;
          v811[0] = v34;
          uint64_t v812 = v26;
          uint64_t v813 = v24;
          char v814 = __clz(1 << (v28 >> 1)) ^ 0x3F;
          uint64_t v815 = v29;
          *((void *)v30 + 6) = *((void *)v23 + 5);
          *((void *)v30 + 7) = v23 + 12;
          uint64_t v35 = (llvm::Value *)*((void *)v23 + 6);
          unint64_t v758 = v35;
          if (v35)
          {
            llvm::MetadataTracking::track((uint64_t)&v758, (unsigned __int8 *)v35, 2);
            unsigned int v36 = v758;
          }
          else
          {
            unsigned int v36 = 0;
          }
          sub_1CB8461A4((uint64_t)v30, 0, (uint64_t)v36);
          if (!v758) {
            goto LABEL_35;
          }
          int v179 = *(unsigned __int8 *)v758;
          if ((v179 - 4) > 0x1E)
          {
            if ((v179 - 3) >= 0xFFFFFFFE) {
              int v295 = v758;
            }
            else {
              int v295 = 0;
            }
            if ((v179 - 3) < 0xFFFFFFFE)
            {
              if (v179 == 3) {
                *((void *)v758 + 1) = 0;
              }
              goto LABEL_35;
            }
            unint64_t v181 = (unint64_t)v295 + 8;
          }
          else
          {
            if ((*((unsigned char *)v758 + 1) & 0x7F) != 2 && !*((_DWORD *)v758 + 3)) {
              goto LABEL_35;
            }
            uint64_t v180 = *((void *)v758 + 2);
            if ((v180 & 4) == 0) {
              goto LABEL_35;
            }
            unint64_t v181 = v180 & 0xFFFFFFFFFFFFFFF8;
            if (!v181) {
              goto LABEL_35;
            }
          }
          uint64_t v771 = &v758;
          sub_1CC5FA668(v181 + 16, &v771);
LABEL_35:
          long long v816 = *(_OWORD *)v768;
          int64x2_t v817 = v769;
          unint64_t v758 = 0;
          unint64_t v758 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v23, v37);
          unsigned int v38 = *(uint64_t ***)v23;
          if ((*((unsigned char *)v23 + 23) & 0x10) != 0)
          {
            uint64_t v39 = **v38;
            uint64_t v40 = *(void *)(v39 + 152);
            uint64_t v41 = *(unsigned int *)(v39 + 168);
            if (v41)
            {
              LODWORD(v42) = (v41 - 1) & ((v23 >> 4) ^ (v23 >> 9));
              uint64_t v43 = (void *)(v40 + 16 * v42);
              long long v44 = (_WORD *)*v43;
              if ((_WORD *)*v43 != v23)
              {
                int v45 = 1;
                do
                {
                  if (v44 == (_WORD *)-4096) {
                    goto LABEL_144;
                  }
                  int v46 = v42 + v45++;
                  uint64_t v42 = v46 & (v41 - 1);
                  long long v44 = *(_WORD **)(v40 + 16 * v42);
                }
                while (v44 != v23);
                uint64_t v43 = (void *)(v40 + 16 * v42);
              }
            }
            else
            {
LABEL_144:
              uint64_t v43 = (void *)(v40 + 16 * v41);
            }
            unint64_t v139 = (void *)v43[1];
            unint64_t v142 = *v139;
            uint64_t v141 = (char *)(v139 + 2);
            unint64_t v140 = v142;
          }
          else
          {
            unint64_t v140 = 0;
            uint64_t v141 = &byte_1CFBCE98E;
          }
          v775[0] = 773;
          uint64_t v771 = (llvm::Value **)v141;
          unint64_t v772 = v140;
          unint64_t v773 = ".fca";
          sub_1CCEA61C0((llvm::Instruction *)&v805, (uint64_t)v38, (const llvm::APInt *)&v758, (uint64_t)&v771);
          unsigned int v143 = v788;
          if (v789 == v788)
          {
            unsigned int v144 = HIDWORD(v790);
            uint64_t v145 = (char *)v789 + 8 * HIDWORD(v790);
            if (HIDWORD(v790))
            {
              uint64_t v146 = 0;
              while (*(_WORD **)((char *)v789 + v146) != v23)
              {
                v146 += 8;
                if (8 * HIDWORD(v790) == v146) {
                  goto LABEL_165;
                }
              }
              uint64_t v145 = (char *)v789 + v146;
            }
LABEL_165:
            unsigned int v143 = v789;
          }
          else
          {
            int v147 = v790 - 1;
            unsigned int v148 = (v790 - 1) & ((v23 >> 4) ^ (v23 >> 9));
            uint64_t v145 = (char *)v789 + 8 * v148;
            uint64_t v149 = *(_WORD **)v145;
            if (*(void *)v145 == -1)
            {
              __int16 v150 = 0;
LABEL_184:
              if (v150) {
                uint64_t v145 = v150;
              }
              unsigned int v144 = HIDWORD(v790);
              if (*(_WORD **)v145 != v23) {
                uint64_t v145 = (char *)v789 + 8 * v790;
              }
            }
            else
            {
              __int16 v150 = 0;
              int v151 = 1;
              while (v149 != v23)
              {
                if (v150) {
                  BOOL v152 = 0;
                }
                else {
                  BOOL v152 = v149 == (_WORD *)-2;
                }
                if (v152) {
                  __int16 v150 = v145;
                }
                unsigned int v153 = v148 + v151++;
                unsigned int v148 = v153 & v147;
                uint64_t v145 = (char *)v789 + 8 * (v153 & v147);
                uint64_t v149 = *(_WORD **)v145;
                if (*(void *)v145 == -1) {
                  goto LABEL_184;
                }
              }
              unsigned int v144 = HIDWORD(v790);
            }
          }
          if (v789 == v143) {
            unsigned int v154 = v144;
          }
          else {
            unsigned int v154 = v790;
          }
          if (v145 != (char *)v789 + 8 * v154)
          {
            *(void *)uint64_t v145 = -2;
            ++v791;
          }
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v23, v758, (llvm::Value *)1);
          goto LABEL_172;
        case '=':
          if ((v23[9] & 0x381) != 0) {
            goto LABEL_22;
          }
          if (*((void *)v23 - 4) != *v22) {
            goto LABEL_22;
          }
          v766[0] = 0;
          v766[0] = *((llvm::MDNode **)v23 - 8);
          uint64_t v47 = *(void *)v766[0];
          int v48 = *(_DWORD *)(*(void *)v766[0] + 8);
          if ((v48 & 0xFE) == 0x12
            || *(_DWORD *)(*(void *)v766[0] + 8) < 0x16u && ((0x20AC7Fu >> v48) & 1) != 0)
          {
            goto LABEL_22;
          }
          uint64_t v49 = *v22;
          llvm::Instruction::getAAMetadata((uint64_t ***)v23, v768);
          unint64_t v51 = (unsigned __int16)v23[9];
          unint64_t v52 = v794;
          unint64_t v53 = v795;
          uint64_t v805 = v795;
          v806.i64[0] = (uint64_t)&v807;
          v806.i64[1] = 0x400000000;
          uint64_t v54 = **((void **)v795 + 8);
          uint64_t v55 = *(llvm::ConstantInt **)(v54 + 1960);
          unsigned int v56 = *(_DWORD *)(v54 + 1968);
          LODWORD(v772) = v56 >> 8;
          if (v56 >> 8 >= 0x41) {
            operator new[]();
          }
          uint64_t v771 = 0;
          uint64_t v57 = llvm::ConstantInt::get(v55, (llvm::LLVMContext *)&v771, v50);
          if (v772 >= 0x41 && v771) {
            MEMORY[0x1D25D9CB0](v771, 0x1000C8000313F17);
          }
          uint64_t v809 = v811;
          uint64_t v810 = 0x400000001;
          v811[0] = v57;
          uint64_t v812 = v49;
          uint64_t v813 = v47;
          char v814 = __clz(1 << (v51 >> 1)) ^ 0x3F;
          uint64_t v815 = v52;
          *((void *)v53 + 6) = *((void *)v23 + 5);
          *((void *)v53 + 7) = v23 + 12;
          unint64_t v58 = (llvm::Value *)*((void *)v23 + 6);
          unint64_t v758 = v58;
          if (v58)
          {
            llvm::MetadataTracking::track((uint64_t)&v758, (unsigned __int8 *)v58, 2);
            unint64_t v59 = v758;
          }
          else
          {
            unint64_t v59 = 0;
          }
          sub_1CB8461A4((uint64_t)v53, 0, (uint64_t)v59);
          if (!v758) {
            goto LABEL_52;
          }
          int v289 = *(unsigned __int8 *)v758;
          if ((v289 - 4) > 0x1E)
          {
            if ((v289 - 3) >= 0xFFFFFFFE) {
              int v296 = v758;
            }
            else {
              int v296 = 0;
            }
            if ((v289 - 3) < 0xFFFFFFFE)
            {
              if (v289 == 3) {
                *((void *)v758 + 1) = 0;
              }
              goto LABEL_52;
            }
            unint64_t v291 = (unint64_t)v296 + 8;
          }
          else
          {
            if ((*((unsigned char *)v758 + 1) & 0x7F) != 2 && !*((_DWORD *)v758 + 3)) {
              goto LABEL_52;
            }
            uint64_t v290 = *((void *)v758 + 2);
            if ((v290 & 4) == 0) {
              goto LABEL_52;
            }
            unint64_t v291 = v290 & 0xFFFFFFFFFFFFFFF8;
            if (!v291) {
              goto LABEL_52;
            }
          }
          uint64_t v771 = &v758;
          sub_1CC5FA668(v291 + 16, &v771);
LABEL_52:
          long long v816 = *(_OWORD *)v768;
          int64x2_t v817 = v769;
          uint64_t v60 = *(uint64_t ***)v766[0];
          if ((*((unsigned char *)v766[0] + 23) & 0x10) != 0)
          {
            uint64_t v61 = **v60;
            uint64_t v62 = *(void *)(v61 + 152);
            uint64_t v63 = *(unsigned int *)(v61 + 168);
            if (v63)
            {
              LODWORD(v64) = (v63 - 1) & ((LODWORD(v766[0]) >> 4) ^ (LODWORD(v766[0]) >> 9));
              uint64_t v65 = v62 + 16 * v64;
              uint64_t v66 = *(llvm::MDNode **)v65;
              if (*(llvm::MDNode **)v65 != v766[0])
              {
                int v67 = 1;
                do
                {
                  if (v66 == (llvm::MDNode *)-4096) {
                    goto LABEL_189;
                  }
                  int v68 = v64 + v67++;
                  uint64_t v64 = v68 & (v63 - 1);
                  uint64_t v66 = *(llvm::MDNode **)(v62 + 16 * v64);
                }
                while (v66 != v766[0]);
                uint64_t v65 = v62 + 16 * v64;
              }
            }
            else
            {
LABEL_189:
              uint64_t v65 = v62 + 16 * v63;
            }
            uint64_t v163 = *(void **)(v65 + 8);
            unint64_t v166 = *v163;
            uint64_t v165 = (char *)(v163 + 2);
            unint64_t v164 = v166;
          }
          else
          {
            unint64_t v164 = 0;
            uint64_t v165 = &byte_1CFBCE98E;
          }
          v775[0] = 773;
          uint64_t v771 = (llvm::Value **)v165;
          unint64_t v772 = v164;
          unint64_t v773 = ".fca";
          sub_1CCEA6B78((uint64_t)&v805, (uint64_t)v60, (const llvm::APInt *)v766, (uint64_t)&v771);
          uint64_t v167 = v788;
          if (v789 == v788)
          {
            unsigned int v168 = HIDWORD(v790);
            __int16 v169 = (char *)v789 + 8 * HIDWORD(v790);
            if (HIDWORD(v790))
            {
              uint64_t v170 = 0;
              while (*(_WORD **)((char *)v789 + v170) != v23)
              {
                v170 += 8;
                if (8 * HIDWORD(v790) == v170) {
                  goto LABEL_210;
                }
              }
              __int16 v169 = (char *)v789 + v170;
            }
LABEL_210:
            uint64_t v167 = v789;
          }
          else
          {
            int v171 = v790 - 1;
            unsigned int v172 = (v790 - 1) & ((v23 >> 4) ^ (v23 >> 9));
            __int16 v169 = (char *)v789 + 8 * v172;
            BOOL v173 = *(_WORD **)v169;
            if (*(void *)v169 == -1)
            {
              uint64_t v174 = 0;
LABEL_372:
              if (v174) {
                __int16 v169 = v174;
              }
              unsigned int v168 = HIDWORD(v790);
              if (*(_WORD **)v169 != v23) {
                __int16 v169 = (char *)v789 + 8 * v790;
              }
            }
            else
            {
              uint64_t v174 = 0;
              int v175 = 1;
              while (v173 != v23)
              {
                if (v174) {
                  BOOL v176 = 0;
                }
                else {
                  BOOL v176 = v173 == (_WORD *)-2;
                }
                if (v176) {
                  uint64_t v174 = v169;
                }
                unsigned int v177 = v172 + v175++;
                unsigned int v172 = v177 & v171;
                __int16 v169 = (char *)v789 + 8 * (v177 & v171);
                BOOL v173 = *(_WORD **)v169;
                if (*(void *)v169 == -1) {
                  goto LABEL_372;
                }
              }
              unsigned int v168 = HIDWORD(v790);
            }
          }
          if (v789 == v167) {
            unsigned int v178 = v168;
          }
          else {
            unsigned int v178 = v790;
          }
          if (v169 != (char *)v789 + 8 * v178)
          {
            *(void *)__int16 v169 = -2;
            ++v791;
          }
LABEL_172:
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        case '>':
          int v739 = v20;
          uint64_t v69 = *((_DWORD *)v23 + 5) & 0x7FFFFFF;
          uint64_t v70 = &v23[-16 * v69];
          uint64_t v71 = *(uint64_t ****)v70;
          int v72 = *(unsigned __int8 *)(*(void *)v70 + 16);
          if (v72 == 83)
          {
            if (v69 == 1)
            {
LABEL_84:
              if (*((uint64_t ***)v23 + 5) == v71[5])
              {
                int v94 = *((_DWORD *)v71 + 5);
                if ((v94 & 0x40000000) != 0)
                {
                  long long v96 = (uint64_t ***)*(v71 - 1);
                  uint64_t v95 = v94 & 0x7FFFFFF;
                }
                else
                {
                  uint64_t v95 = v94 & 0x7FFFFFF;
                  long long v96 = &v71[-4 * v95];
                }
                if (!v95)
                {
LABEL_124:
                  uint64_t v805 = &v806.u64[1];
                  v806.i64[0] = 0x400000000;
                  unint64_t v121 = -(-32 * v69 + 32);
                  if (v121 >= 0x81) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v70 + 16 != v23)
                  {
                    unint64_t v122 = v805;
                    uint64_t v123 = 32 - 32 * v69;
                    do
                    {
                      *v122++ = *(void *)((char *)v23 + v123);
                      v123 += 32;
                    }
                    while (v123);
                  }
                  v806.i32[0] = v121 >> 5;
                  char v741 = *((unsigned char *)v23 + 17);
                  unint64_t v124 = v795;
                  for (uint64_t i = *(void **)(*((void *)v23 + 5) + 48); ; uint64_t i = (void *)i[1])
                  {
                    uint64_t v126 = i - 3;
                    if (!i) {
                      uint64_t v126 = 0;
                    }
                    if (*((unsigned char *)v126 + 16) != 83) {
                      break;
                    }
                  }
                  *((void *)v795 + 6) = i[2];
                  *((void *)v124 + 7) = i;
                  __int16 v127 = (llvm::MDNode *)i[3];
                  v768[0] = v127;
                  if (v127)
                  {
                    llvm::MetadataTracking::track((uint64_t)v768, (unsigned __int8 *)v127, 2);
                    char v128 = v768[0];
                  }
                  else
                  {
                    char v128 = 0;
                  }
                  sub_1CB8461A4((uint64_t)v124, 0, (uint64_t)v128);
                  if (!v768[0])
                  {
LABEL_137:
                    unint64_t v129 = *(uint64_t ***)v23;
                    int v130 = *((_DWORD *)v71 + 5);
                    if ((v130 & 0x10000000) != 0)
                    {
                      uint64_t v131 = ***v71;
                      uint64_t v132 = *(void *)(v131 + 152);
                      uint64_t v133 = *(unsigned int *)(v131 + 168);
                      if (v133)
                      {
                        LODWORD(v134) = (v133 - 1) & ((v71 >> 4) ^ (v71 >> 9));
                        uint64_t v135 = (uint64_t ****)(v132 + 16 * v134);
                        unsigned __int8 v136 = *v135;
                        if (*v135 != v71)
                        {
                          int v137 = 1;
                          do
                          {
                            if (v136 == (uint64_t ***)-4096) {
                              goto LABEL_223;
                            }
                            int v138 = v134 + v137++;
                            uint64_t v134 = v138 & (v133 - 1);
                            unsigned __int8 v136 = *(uint64_t ****)(v132 + 16 * v134);
                          }
                          while (v136 != v71);
                          uint64_t v135 = (uint64_t ****)(v132 + 16 * v134);
                        }
                      }
                      else
                      {
LABEL_223:
                        uint64_t v135 = (uint64_t ****)(v132 + 16 * v133);
                      }
                      uint64_t v182 = v135[1];
                      unint64_t v185 = (unint64_t)*v182;
                      uint64_t v184 = (char *)(v182 + 2);
                      unint64_t v183 = v185;
                    }
                    else
                    {
                      unint64_t v183 = 0;
                      uint64_t v184 = &byte_1CFBCE98E;
                    }
                    v775[0] = 773;
                    uint64_t v771 = (llvm::Value **)v184;
                    unint64_t v772 = v183;
                    unint64_t v773 = ".sroa.phi";
                    char v186 = sub_1CB93113C((uint64_t)v795, (uint64_t)v129, v130 & 0x7FFFFFF, (uint64_t)&v771);
                    uint64_t v743 = (void *)(*((_DWORD *)v71 + 5) & 0x7FFFFFF);
                    if (!v743) {
                      goto LABEL_290;
                    }
                    uint64_t v187 = 0;
LABEL_227:
                    int v188 = *((_DWORD *)v71 + 5);
                    if ((v188 & 0x40000000) != 0) {
                      uint64_t v189 = (uint64_t ***)*(v71 - 1);
                    }
                    else {
                      uint64_t v189 = &v71[-4 * (v188 & 0x7FFFFFF)];
                    }
                    unint64_t v190 = (&v189[4 * *((unsigned int *)v71 + 15)])[v187];
                    int v191 = *((_DWORD *)v186 + 5);
                    uint64_t v192 = v191 & 0x7FFFFFF;
                    if ((v191 & 0x7FFFFFF) == 0)
                    {
LABEL_237:
                      if ((v188 & 0x40000000) != 0) {
                        unint64_t v197 = (uint64_t ***)*(v71 - 1);
                      }
                      else {
                        unint64_t v197 = &v71[-4 * (v188 & 0x7FFFFFF)];
                      }
                      uint64_t v198 = (uint64_t *)v197[4 * v187];
                      sub_1CBF5385C((uint64_t)v795, v198[5], v198[4]);
                      if ((*((unsigned char *)v198 + 23) & 0x10) != 0)
                      {
                        uint64_t v199 = **(void **)*v198;
                        uint64_t v200 = *(void *)(v199 + 152);
                        uint64_t v201 = *(unsigned int *)(v199 + 168);
                        if (v201)
                        {
                          LODWORD(v202) = (v201 - 1) & ((v198 >> 4) ^ (v198 >> 9));
                          uint64_t v203 = (uint64_t **)(v200 + 16 * v202);
                          unsigned int v204 = *v203;
                          if (*v203 != v198)
                          {
                            int v205 = 1;
                            do
                            {
                              if (v204 == (uint64_t *)-4096) {
                                goto LABEL_249;
                              }
                              int v206 = v202 + v205++;
                              uint64_t v202 = v206 & (v201 - 1);
                              unsigned int v204 = *(uint64_t **)(v200 + 16 * v202);
                            }
                            while (v204 != v198);
                            uint64_t v203 = (uint64_t **)(v200 + 16 * v202);
                          }
                        }
                        else
                        {
LABEL_249:
                          uint64_t v203 = (uint64_t **)(v200 + 16 * v201);
                        }
                        unint64_t v208 = v203[1];
                        unint64_t v211 = *v208;
                        uint64_t v210 = (char *)(v208 + 2);
                        unint64_t v209 = v211;
                      }
                      else
                      {
                        unint64_t v209 = 0;
                        uint64_t v210 = &byte_1CFBCE98E;
                      }
                      uint64_t v212 = *((void *)v23 + 8);
                      v775[0] = 773;
                      uint64_t v771 = (llvm::Value **)v210;
                      unint64_t v772 = v209;
                      unint64_t v773 = ".sroa.gep";
                      if ((v741 & 2) != 0) {
                        uint64_t v213 = sub_1CC57EEA0((uint64_t *)v795, v212, v198, (uint64_t *)v805, v806.u32[0], (uint64_t)&v771);
                      }
                      else {
                        uint64_t v213 = sub_1CC27CEC0((uint64_t *)v795, v212, v198, (uint64_t *)v805, v806.u32[0], (uint64_t)&v771);
                      }
                      uint64_t v207 = v213;
                      int v191 = *((_DWORD *)v186 + 5);
                      LODWORD(v195) = *((_DWORD *)v186 + 15);
                      LODWORD(v192) = v191 & 0x7FFFFFF;
                      goto LABEL_255;
                    }
                    uint64_t v193 = 0;
                    uint64_t v194 = (char *)v186 - 32 * v192;
                    uint64_t v195 = *((unsigned int *)v186 + 15);
                    uint64_t v196 = 32 * v195;
                    while (1)
                    {
                      if ((v191 & 0x40000000) != 0)
                      {
                        if (*(uint64_t ***)(*((void *)v186 - 1) + v196) == v190)
                        {
                          uint64_t v194 = (char *)*((void *)v186 - 1);
LABEL_248:
                          uint64_t v207 = *(void *)&v194[v193];
LABEL_255:
                          if (v192 == v195)
                          {
                            uint64_t v226 = v191 & 0x7FFFFFF;
                            LODWORD(v227) = v226 + (v226 >> 1);
                            if (v227 <= 2) {
                              uint64_t v227 = 2;
                            }
                            else {
                              uint64_t v227 = v227;
                            }
                            uint64_t v734 = v227;
                            *((_DWORD *)v186 + 15) = v227;
                            uint64_t v228 = v191 & 0x7FFFFFF;
                            if ((v191 & 0x40000000) != 0) {
                              uint64_t v229 = (uint64_t *)*((void *)v186 - 1);
                            }
                            else {
                              uint64_t v229 = (uint64_t *)((char *)v186 - 32 * v226);
                            }
                            __pa = v229;
                            uint64_t v230 = operator new(40 * v227);
                            *((void *)v186 - 1) = v230;
                            uint64_t v231 = v230;
                            do
                            {
                              *uint64_t v231 = 0;
                              v231[1] = 0;
                              v231[2] = 0;
                              v231[3] = v186;
                              v231 += 4;
                            }
                            while (v231 != &v230[4 * v734]);
                            int v232 = *((_DWORD *)v186 + 5);
                            if ((v232 & 0x40000000) != 0) {
                              uint64_t v233 = (uint64_t)v230;
                            }
                            else {
                              uint64_t v233 = (uint64_t)v186 - 32 * (v232 & 0x7FFFFFF);
                            }
                            sub_1CC5E4108((uint64_t)&v771, __pa, &__pa[4 * v228], v233);
                            if (v228)
                            {
                              memmove((void *)(v233 + 32 * v734), &__pa[4 * v228], 8 * v228);
                              uint64_t v234 = 4 * v228;
                              do
                              {
                                int v235 = &__pa[v234];
                                if (__pa[v234 - 4])
                                {
                                  *(void *)*(v235 - 2) = *(v235 - 3);
                                  uint64_t v236 = *(v235 - 3);
                                  if (v236) {
                                    *(void *)(v236 + 16) = *(v235 - 2);
                                  }
                                }
                                v234 -= 4;
                              }
                              while (v234 * 8);
                            }
                            operator delete(__pa);
                            int v191 = *((_DWORD *)v186 + 5);
                          }
                          uint64_t v214 = (v191 + 1) & 0x7FFFFFF;
                          *((_DWORD *)v186 + 5) = v191 & 0xF8000000 | (v191 + 1) & 0x7FFFFFF;
                          if ((v191 & 0x40000000) != 0) {
                            uint64_t v215 = (char *)*((void *)v186 - 1);
                          }
                          else {
                            uint64_t v215 = (char *)v186 - 32 * v214;
                          }
                          uint64_t v216 = (v214 - 1);
                          uint64_t v217 = &v215[32 * v216];
                          if (*(void *)v217)
                          {
                            **((void **)v217 + 2) = *((void *)v217 + 1);
                            uint64_t v225 = *((void *)v217 + 1);
                            if (v225) {
                              *(void *)(v225 + 16) = *((void *)v217 + 2);
                            }
                          }
                          *(void *)uint64_t v217 = v207;
                          if (v207)
                          {
                            uint64_t v220 = *(void *)(v207 + 8);
                            int v219 = (char **)(v207 + 8);
                            uint64_t v218 = v220;
                            int v221 = &v215[32 * v216];
                            *((void *)v221 + 1) = v220;
                            if (v220) {
                              *(void *)(v218 + 16) = v221 + 8;
                            }
                            *((void *)v221 + 2) = v219;
                            llvm::Instruction *v219 = v217;
                          }
                          int v222 = *((_DWORD *)v186 + 5);
                          uint64_t v223 = v222 & 0x7FFFFFF;
                          if ((v222 & 0x40000000) != 0) {
                            uint64_t v224 = (char *)*((void *)v186 - 1);
                          }
                          else {
                            uint64_t v224 = (char *)v186 - 32 * v223;
                          }
                          *(void *)&v224[32 * *((unsigned int *)v186 + 15) + 8 * (v223 - 1)] = v190;
                          if ((void *)++v187 == v743)
                          {
LABEL_290:
                            __int16 v237 = v788;
                            if (v789 == v788)
                            {
                              unsigned int v238 = HIDWORD(v790);
                              uint64_t v239 = (char *)v789 + 8 * HIDWORD(v790);
                              if (HIDWORD(v790))
                              {
                                uint64_t v240 = 0;
                                while (*(_WORD **)((char *)v789 + v240) != v23)
                                {
                                  v240 += 8;
                                  if (8 * HIDWORD(v790) == v240) {
                                    goto LABEL_313;
                                  }
                                }
                                uint64_t v239 = (char *)v789 + v240;
                              }
LABEL_313:
                              __int16 v237 = v789;
                            }
                            else
                            {
                              int v241 = v790 - 1;
                              unsigned int v242 = (v790 - 1) & ((v23 >> 4) ^ (v23 >> 9));
                              uint64_t v239 = (char *)v789 + 8 * v242;
                              BOOL v243 = *(_WORD **)v239;
                              int v244 = 0;
                              if (*(void *)v239 == -1)
                              {
LABEL_306:
                                if (v244) {
                                  uint64_t v239 = v244;
                                }
                                unsigned int v238 = HIDWORD(v790);
                                if (*(_WORD **)v239 != v23) {
                                  uint64_t v239 = (char *)v789 + 8 * v790;
                                }
                              }
                              else
                              {
                                int v245 = 1;
                                while (v243 != v23)
                                {
                                  if (v244) {
                                    BOOL v246 = 0;
                                  }
                                  else {
                                    BOOL v246 = v243 == (_WORD *)-2;
                                  }
                                  if (v246) {
                                    int v244 = v239;
                                  }
                                  unsigned int v247 = v242 + v245++;
                                  unsigned int v242 = v247 & v241;
                                  uint64_t v239 = (char *)v789 + 8 * (v247 & v241);
                                  BOOL v243 = *(_WORD **)v239;
                                  if (*(void *)v239 == -1) {
                                    goto LABEL_306;
                                  }
                                }
                                unsigned int v238 = HIDWORD(v790);
                              }
                            }
                            if (v789 == v237) {
                              unsigned int v248 = v238;
                            }
                            else {
                              unsigned int v248 = v790;
                            }
                            if (v239 != (char *)v789 + 8 * v248)
                            {
                              *(void *)uint64_t v239 = -2;
                              ++v791;
                            }
                            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v23, v186, (llvm::Value *)1);
                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                          }
                          goto LABEL_227;
                        }
                      }
                      else if (*(uint64_t ***)&v194[v196] == v190)
                      {
                        goto LABEL_248;
                      }
                      v193 += 32;
                      v196 += 8;
                      if (32 * v192 == v193) {
                        goto LABEL_237;
                      }
                    }
                  }
                  int v292 = *(unsigned __int8 *)v768[0];
                  if ((v292 - 4) > 0x1E)
                  {
                    if ((v292 - 3) >= 0xFFFFFFFE) {
                      uint64_t v297 = v768[0];
                    }
                    else {
                      uint64_t v297 = 0;
                    }
                    if ((v292 - 3) < 0xFFFFFFFE)
                    {
                      if (v292 == 3) {
                        *((void *)v768[0] + 1) = 0;
                      }
                      goto LABEL_137;
                    }
                    unint64_t v294 = (unint64_t)v297 + 8;
                  }
                  else
                  {
                    if ((*((unsigned char *)v768[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v768[0] + 3)) {
                      goto LABEL_137;
                    }
                    uint64_t v293 = *((void *)v768[0] + 2);
                    if ((v293 & 4) == 0) {
                      goto LABEL_137;
                    }
                    unint64_t v294 = v293 & 0xFFFFFFFFFFFFFFF8;
                    if (!v294) {
                      goto LABEL_137;
                    }
                  }
                  uint64_t v771 = v768;
                  sub_1CC5FA668(v294 + 16, &v771);
                  goto LABEL_137;
                }
                uint64_t v97 = 32 * v95;
                while (1)
                {
                  unsigned int v98 = *((unsigned __int8 *)*v96 + 16);
                  if (!*v96 || v98 < 0x1C) {
                    break;
                  }
                  if (v98 == 62) {
                    break;
                  }
                  if (v98 == 83) {
                    break;
                  }
                  long long v100 = (*v96)[5];
                  int8x16_t v101 = (uint64_t *)v100[5];
                  if (v101 == v100 + 5) {
                    break;
                  }
                  long long v102 = v101 - 3;
                  if (!v101) {
                    long long v102 = 0;
                  }
                  unsigned int v103 = *((unsigned __int8 *)v102 + 16);
                  if (v103 != 30)
                  {
                    switch(*((unsigned char *)v102 + 16))
                    {
                      case 0x1E:
                        __break(1u);
                        goto LABEL_1142;
                      case 0x1F:
                        int v104 = (*((_DWORD *)v102 + 5) >> 1) & 0x3FFFFFF;
                        goto LABEL_106;
                      case 0x20:
                      case 0x26:
                        int v104 = (*((_DWORD *)v102 + 5) & 0x7FFFFFF) - 1;
                        goto LABEL_106;
                      case 0x24:
                        int v104 = *((_WORD *)v102 + 9) & 1;
                        goto LABEL_106;
                      case 0x27:
                        int v104 = *((_DWORD *)v102 + 20) + 1;
LABEL_106:
                        if (!v104) {
                          goto LABEL_85;
                        }
                        BOOL v14 = v103 > 0x26;
                        uint64_t v105 = (1 << v103) & 0x7600000000;
                        if (!v14 && v105 != 0) {
                          goto LABEL_85;
                        }
                        break;
                      default:
                        goto LABEL_85;
                    }
                  }
                  v96 += 4;
                  v97 -= 32;
                  if (!v97) {
                    goto LABEL_124;
                  }
                }
              }
            }
            else
            {
              unsigned int v93 = 1;
              while (*(unsigned char *)(*(void *)&v70[16 * v93] + 16) == 16)
              {
                if (v69 == ++v93) {
                  goto LABEL_84;
                }
              }
            }
          }
          else if (v72 == 85)
          {
            if (v69 == 1)
            {
LABEL_65:
              int v74 = v795;
              *((void *)v795 + 6) = *((void *)v23 + 5);
              *((void *)v74 + 7) = v23 + 12;
              BOOL v75 = (unsigned __int8 *)*((void *)v23 + 6);
              uint64_t v771 = (llvm::Value **)v75;
              if (v75)
              {
                llvm::MetadataTracking::track((uint64_t)&v771, v75, 2);
                uint64_t v76 = (uint64_t)v771;
              }
              else
              {
                uint64_t v76 = 0;
              }
              sub_1CB8461A4((uint64_t)v74, 0, v76);
              if (!v771) {
                goto LABEL_68;
              }
              int v160 = *(unsigned __int8 *)v771;
              if ((v160 - 4) <= 0x1E)
              {
                if ((*((unsigned char *)v771 + 1) & 0x7F) != 2 && !*((_DWORD *)v771 + 3)) {
                  goto LABEL_68;
                }
                unint64_t v161 = (unint64_t)v771[2];
                if ((v161 & 4) == 0) {
                  goto LABEL_68;
                }
                unint64_t v162 = v161 & 0xFFFFFFFFFFFFFFF8;
                if (!v162) {
                  goto LABEL_68;
                }
LABEL_383:
                uint64_t v805 = &v771;
                sub_1CC5FA668(v162 + 16, &v805);
                goto LABEL_68;
              }
              if ((v160 - 3) >= 0xFFFFFFFE) {
                int v288 = v771;
              }
              else {
                int v288 = 0;
              }
              if ((v160 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v162 = (unint64_t)(v288 + 1);
                goto LABEL_383;
              }
              if (v160 == 3) {
                v771[1] = 0;
              }
LABEL_68:
              uint64_t v77 = *((_DWORD *)v23 + 5) & 0x7FFFFFF;
              uint64_t v805 = &v806.u64[1];
              v806.i64[0] = 0x400000000;
              unint64_t v78 = -(-32 * v77 + 32);
              if (v78 >= 0x81) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v79 = &v806.i64[1];
              if (&v23[-16 * v77 + 16] != v23)
              {
                unsigned int v80 = &v806.i64[1];
                uint64_t v81 = 32 - 32 * v77;
                do
                {
                  *v80++ = *(void *)((char *)v23 + v81);
                  v81 += 32;
                }
                while (v81);
                uint64_t v79 = (uint64_t *)v805;
              }
              uint64_t v82 = (v78 >> 5);
              v806.i32[0] = v78 >> 5;
              uint64_t v83 = *((void *)v23 + 8);
              unint64_t v84 = (uint64_t *)*(v71 - 8);
              if ((*((unsigned char *)v84 + 23) & 0x10) != 0)
              {
                uint64_t v85 = **(void **)*v84;
                uint64_t v86 = *(void *)(v85 + 152);
                uint64_t v87 = *(unsigned int *)(v85 + 168);
                if (v87)
                {
                  LODWORD(v88) = (v87 - 1) & ((v84 >> 4) ^ (v84 >> 9));
                  uint64_t v89 = (uint64_t **)(v86 + 16 * v88);
                  unsigned int v90 = *v89;
                  if (*v89 != v84)
                  {
                    int v91 = 1;
                    do
                    {
                      if (v90 == (uint64_t *)-4096) {
                        goto LABEL_115;
                      }
                      int v92 = v88 + v91++;
                      uint64_t v88 = v92 & (v87 - 1);
                      unsigned int v90 = *(uint64_t **)(v86 + 16 * v88);
                    }
                    while (v90 != v84);
                    uint64_t v89 = (uint64_t **)(v86 + 16 * v88);
                  }
                }
                else
                {
LABEL_115:
                  uint64_t v89 = (uint64_t **)(v86 + 16 * v87);
                }
                uint64_t v107 = (llvm::MDNode **)v89[1];
                unsigned int v110 = *v107;
                int64_t v109 = (llvm::MDNode *)(v107 + 2);
                unint64_t v108 = v110;
                if ((*((unsigned char *)v23 + 17) & 2) == 0)
                {
LABEL_117:
                  __int16 v770 = 773;
                  v768[0] = v109;
                  v768[1] = v108;
                  v769.i64[0] = (uint64_t)".sroa.gep";
                  int v111 = (llvm::Value *)sub_1CC27CEC0((uint64_t *)v795, v83, v84, v79, v82, (uint64_t)v768);
                  uint64_t v112 = (uint64_t *)*(v71 - 4);
                  if ((*((unsigned char *)v112 + 23) & 0x10) != 0)
                  {
                    uint64_t v113 = **(void **)*v112;
                    uint64_t v114 = *(void *)(v113 + 152);
                    uint64_t v115 = *(unsigned int *)(v113 + 168);
                    if (v115)
                    {
                      LODWORD(v116) = (v115 - 1) & ((v112 >> 4) ^ (v112 >> 9));
                      uint64_t v117 = (uint64_t **)(v114 + 16 * v116);
                      int v118 = *v117;
                      if (*v117 != v112)
                      {
                        int v119 = 1;
                        do
                        {
                          if (v118 == (uint64_t *)-4096) {
                            goto LABEL_173;
                          }
                          int v120 = v116 + v119++;
                          uint64_t v116 = v120 & (v115 - 1);
                          int v118 = *(uint64_t **)(v114 + 16 * v116);
                        }
                        while (v118 != v112);
                        uint64_t v117 = (uint64_t **)(v114 + 16 * v116);
                      }
                    }
                    else
                    {
LABEL_173:
                      uint64_t v117 = (uint64_t **)(v114 + 16 * v115);
                    }
                    uint64_t v155 = (llvm::MDNode **)v117[1];
                    int v158 = *v155;
                    unsigned __int32 v157 = (llvm::MDNode *)(v155 + 2);
                    uint64_t v156 = v158;
                  }
                  else
                  {
                    uint64_t v156 = 0;
                    unsigned __int32 v157 = (llvm::MDNode *)&byte_1CFBCE98E;
                  }
                  __int16 v770 = 773;
                  v768[0] = v157;
                  v768[1] = v156;
                  v769.i64[0] = (uint64_t)".sroa.gep";
                  int v159 = (llvm::Value *)sub_1CC27CEC0((uint64_t *)v795, v83, v112, (uint64_t *)v805, v806.u32[0], (uint64_t)v768);
                  goto LABEL_331;
                }
              }
              else
              {
                unint64_t v108 = 0;
                int64_t v109 = (llvm::MDNode *)&byte_1CFBCE98E;
                if ((*((unsigned char *)v23 + 17) & 2) == 0) {
                  goto LABEL_117;
                }
              }
              v775[0] = 773;
              uint64_t v771 = (llvm::Value **)v109;
              unint64_t v772 = (unint64_t)v108;
              unint64_t v773 = ".sroa.gep";
              int v111 = (llvm::Value *)sub_1CC57EEA0((uint64_t *)v795, v83, v84, v79, v82, (uint64_t)&v771);
              uint64_t v249 = (uint64_t *)*(v71 - 4);
              if ((*((unsigned char *)v249 + 23) & 0x10) != 0)
              {
                uint64_t v250 = **(void **)*v249;
                uint64_t v251 = *(void *)(v250 + 152);
                uint64_t v252 = *(unsigned int *)(v250 + 168);
                if (v252)
                {
                  LODWORD(v253) = (v252 - 1) & ((v249 >> 4) ^ (v249 >> 9));
                  unint64_t v254 = (uint64_t **)(v251 + 16 * v253);
                  uint64_t v255 = *v254;
                  if (*v254 != v249)
                  {
                    int v256 = 1;
                    do
                    {
                      if (v255 == (uint64_t *)-4096) {
                        goto LABEL_328;
                      }
                      int v257 = v253 + v256++;
                      uint64_t v253 = v257 & (v252 - 1);
                      uint64_t v255 = *(uint64_t **)(v251 + 16 * v253);
                    }
                    while (v255 != v249);
                    unint64_t v254 = (uint64_t **)(v251 + 16 * v253);
                  }
                }
                else
                {
LABEL_328:
                  unint64_t v254 = (uint64_t **)(v251 + 16 * v252);
                }
                unsigned int v258 = v254[1];
                unint64_t v261 = *v258;
                uint64_t v260 = (char *)(v258 + 2);
                unint64_t v259 = v261;
              }
              else
              {
                unint64_t v259 = 0;
                uint64_t v260 = &byte_1CFBCE98E;
              }
              v775[0] = 773;
              uint64_t v771 = (llvm::Value **)v260;
              unint64_t v772 = v259;
              unint64_t v773 = ".sroa.gep";
              int v159 = (llvm::Value *)sub_1CC57EEA0((uint64_t *)v795, v83, v249, (uint64_t *)v805, v806.u32[0], (uint64_t)&v771);
LABEL_331:
              int v262 = (llvm::Value *)*(v71 - 12);
              if ((*((unsigned char *)v71 + 23) & 0x10) != 0)
              {
                uint64_t v263 = ***v71;
                uint64_t v264 = *(void *)(v263 + 152);
                uint64_t v265 = *(unsigned int *)(v263 + 168);
                if (v265)
                {
                  LODWORD(v266) = (v265 - 1) & ((v71 >> 4) ^ (v71 >> 9));
                  uint64_t v267 = (uint64_t ****)(v264 + 16 * v266);
                  unsigned int v268 = *v267;
                  if (*v267 != v71)
                  {
                    int v269 = 1;
                    do
                    {
                      if (v268 == (uint64_t ***)-4096) {
                        goto LABEL_338;
                      }
                      int v270 = v266 + v269++;
                      uint64_t v266 = v270 & (v265 - 1);
                      unsigned int v268 = *(uint64_t ****)(v264 + 16 * v266);
                    }
                    while (v268 != v71);
                    uint64_t v267 = (uint64_t ****)(v264 + 16 * v266);
                  }
                }
                else
                {
LABEL_338:
                  uint64_t v267 = (uint64_t ****)(v264 + 16 * v265);
                }
                uint64_t v271 = v267[1];
                unint64_t v274 = (unint64_t)*v271;
                int v273 = (char *)(v271 + 2);
                unint64_t v272 = v274;
              }
              else
              {
                unint64_t v272 = 0;
                int v273 = &byte_1CFBCE98E;
              }
              v775[0] = 773;
              uint64_t v771 = (llvm::Value **)v273;
              unint64_t v772 = v272;
              unint64_t v773 = ".sroa.sel";
              Select = llvm::IRBuilderBase::CreateSelect(v795, v262, v111, v159, (const llvm::Twine *)&v771, 0);
              unint64_t v276 = v788;
              if (v789 == v788)
              {
                unsigned int v277 = HIDWORD(v790);
                uint64_t v278 = (char *)v789 + 8 * HIDWORD(v790);
                if (HIDWORD(v790))
                {
                  uint64_t v279 = 0;
                  while (*(_WORD **)((char *)v789 + v279) != v23)
                  {
                    v279 += 8;
                    if (8 * HIDWORD(v790) == v279) {
                      goto LABEL_363;
                    }
                  }
                  uint64_t v278 = (char *)v789 + v279;
                }
LABEL_363:
                unint64_t v276 = v789;
              }
              else
              {
                int v280 = v790 - 1;
                unsigned int v281 = (v790 - 1) & ((v23 >> 4) ^ (v23 >> 9));
                uint64_t v278 = (char *)v789 + 8 * v281;
                unsigned int v282 = *(_WORD **)v278;
                uint64_t v283 = 0;
                if (*(void *)v278 == -1)
                {
LABEL_356:
                  if (v283) {
                    uint64_t v278 = v283;
                  }
                  unsigned int v277 = HIDWORD(v790);
                  if (*(_WORD **)v278 != v23) {
                    uint64_t v278 = (char *)v789 + 8 * v790;
                  }
                }
                else
                {
                  int v284 = 1;
                  while (v282 != v23)
                  {
                    if (v283) {
                      BOOL v285 = 0;
                    }
                    else {
                      BOOL v285 = v282 == (_WORD *)-2;
                    }
                    if (v285) {
                      uint64_t v283 = v278;
                    }
                    unsigned int v286 = v281 + v284++;
                    unsigned int v281 = v286 & v280;
                    uint64_t v278 = (char *)v789 + 8 * (v286 & v280);
                    unsigned int v282 = *(_WORD **)v278;
                    if (*(void *)v278 == -1) {
                      goto LABEL_356;
                    }
                  }
                  unsigned int v277 = HIDWORD(v790);
                }
              }
              if (v789 == v276) {
                unsigned int v287 = v277;
              }
              else {
                unsigned int v287 = v790;
              }
              if (v278 != (char *)v789 + 8 * v287)
              {
                *(void *)uint64_t v278 = -2;
                ++v791;
              }
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v23, Select, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
            }
            unsigned int v73 = 1;
            while (*(unsigned char *)(*(void *)&v70[16 * v73] + 16) == 16)
            {
              if (v69 == ++v73) {
                goto LABEL_65;
              }
            }
          }
LABEL_85:
          sub_1CCEA5FCC((uint64_t)&v785, *((void *)v23 + 1));
          int v20 = v739;
LABEL_22:
          unsigned int v19 = v786;
          if (!v786) {
            goto LABEL_436;
          }
          continue;
        case 'M':
        case 'N':
        case 'S':
        case 'U':
          sub_1CCEA5FCC((uint64_t)&v785, *((void *)v23 + 1));
          goto LABEL_22;
        default:
          goto LABEL_22;
      }
    }
  }
  int v20 = 0;
LABEL_436:
  int v739 = v20;
  uint64_t v21 = (uint64_t)&v805;
  uint64_t v771 = (llvm::Value **)v2;
  unint64_t v772 = 0;
  uint64_t v738 = v775;
  unint64_t v773 = v775;
  uint64_t v774 = 0x800000000;
  uint64_t v737 = v778;
  int v776 = v778;
  uint64_t v777 = 0x800000000;
  std::string __p = v781;
  size_t v779 = v781;
  uint64_t v780 = 0x800000000;
  size_t v733 = v784;
  uint64_t v782 = v784;
  uint64_t v783 = 0x800000000;
  uint64_t v747 = (char **)&v807;
  uint64_t v805 = v3;
  int8x16_t v806 = 0uLL;
  uint64_t v807 = &v809;
  uint64_t v808 = 0x800000000;
  size_t v818 = v822;
  unsigned int v819 = v822;
  uint64_t v820 = 8;
  int v821 = 0;
  p_src = &__src;
  unsigned int v826 = 1;
  long long __src = 0;
  uint64_t v298 = (llvm::Type *)v2[8];
  unint64_t v299 = (unint64_t)(sub_1CB83544C((uint64_t)v3, (uint64_t)v298) + 7) >> 3;
  char v300 = llvm::DataLayout::getAlignment(v3, v298, 1);
  unint64_t v827 = ((1 << v300) + v299 - 1) & -(1 << v300);
  uint64_t v828 = &v771;
  uint64_t v829 = 1;
  for (uint64_t j = 384; j != 448; j += 16)
    *(void **)((char *)&v805 + j) = (void *)-4096;
  uint64_t v831 = 1;
  for (uint64_t k = 456; k != 520; k += 16)
    *(void **)((char *)&v805 + k) = (void *)-4096;
  size_t v833 = v837;
  char v834 = v837;
  uint64_t v835 = 4;
  int v836 = 0;
  long long v96 = (uint64_t ***)v805;
  uint64_t v69 = *v2;
  unsigned int v303 = *(_DWORD *)(*v2 + 8);
  if ((v303 & 0xFE) == 0x12) {
LABEL_1142:
  }
    unsigned int v303 = *(_DWORD *)(**(void **)(v69 + 16) + 8);
  uint64_t v304 = v96[29];
  if (v303 < 0x100) {
    goto LABEL_450;
  }
  unsigned int v305 = v303 >> 8;
  unint64_t v306 = *((unsigned int *)v96 + 60);
  uint64_t v307 = v96[29];
  if (v306)
  {
    uint64_t v307 = v304;
    unint64_t v308 = v306;
    do
    {
      unint64_t v309 = v308 >> 1;
      int v310 = &v307[2 * (v308 >> 1)];
      unsigned int v311 = *((_DWORD *)v310 + 2);
      uint64_t v312 = v310 + 2;
      v308 += ~(v308 >> 1);
      if (v311 < v305) {
        uint64_t v307 = v312;
      }
      else {
        unint64_t v308 = v309;
      }
    }
    while (v308);
  }
  if (v307 == &v304[2 * v306] || *((_DWORD *)v307 + 2) != v305) {
LABEL_450:
  }
    uint64_t v307 = v304;
  uint64_t v313 = llvm::IntegerType::get(*(llvm::IntegerType **)v69, (llvm::LLVMContext *)*((unsigned int *)v307 + 3));
  if ((*(_DWORD *)(v69 + 8) & 0xFE) == 0x12)
  {
    size_t v729 = (llvm::Type *)*(unsigned int *)(v69 + 32);
    if (*(_DWORD *)(v69 + 8) == 19) {
      v314.n128_f64[0] = llvm::ScalableVectorType::get((uint64_t **)v313, v729);
    }
    else {
      v314.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v313, v729);
    }
    uint64_t v21 = (uint64_t)&v805;
  }
  BOOL v824 = 1;
  unint64_t v315 = *(unsigned int *)(v313 + 8);
  unint64_t v316 = v315 >> 8;
  if (v315 >> 8 >= 0x41) {
    operator new[]();
  }
  if (v826 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17, v314);
  }
  long long __src = 0;
  unsigned int v826 = v316;
  *(int8x16_t *)(v21 + 8) = vandq_s8(*(int8x16_t *)(v21 + 8), (int8x16_t)vdupq_n_s64(3uLL));
  llvm::detail::PtrUseVisitorBase::enqueueUsers((llvm::detail::PtrUseVisitorBase *)&v805, (llvm::Instruction *)v2);
  uint64_t v322 = (llvm::APInt *)p_src;
  while (1)
  {
    int v323 = v808;
    if (!v808) {
      break;
    }
    uint64_t v324 = v807;
    uint64_t v325 = &v807[3 * v808];
    unsigned int v326 = *((_DWORD *)v325 - 2);
    uint64_t v327 = (uint64_t)*(v325 - 3);
    uint64_t v328 = *(v325 - 2);
    *((_DWORD *)v325 - 2) = 0;
    unsigned int v329 = v323 - 1;
    LODWORD(v808) = v329;
    if (LODWORD(v324[3 * v329 + 2]) >= 0x41)
    {
      unint64_t v411 = v324[3 * v329 + 1];
      if (v411) {
        MEMORY[0x1D25D9CB0](v411, 0x1000C8000313F17);
      }
    }
    uint64_t v330 = (uint64_t **)(v327 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v823 = v327 & 0xFFFFFFFFFFFFFFF8;
    BOOL v824 = (v327 & 4) != 0;
    if ((v327 & 4) != 0)
    {
      if (v826 >= 0x41)
      {
        if (__src)
        {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          uint64_t v330 = (uint64_t **)v823;
        }
        __int32 v2 = v749;
        uint64_t v322 = (llvm::APInt *)p_src;
      }
      long long __src = v328;
      unsigned int v826 = v326;
      unsigned int v326 = 0;
    }
    unint64_t v331 = (unint64_t)v330[3];
    switch(*(unsigned char *)(v331 + 16))
    {
      case '!':
      case '\'':
        goto LABEL_592;
      case '<':
        if (!v824) {
          goto LABEL_657;
        }
        if (*(_WORD *)(v331 + 18))
        {
          uint64_t v409 = **(void **)(v331 - 32);
          unsigned int v410 = *(_DWORD *)(v409 + 8);
          if ((v410 & 0xFE) == 0x12) {
            unsigned int v410 = *(_DWORD *)(**(void **)(v409 + 16) + 8);
          }
          __int16 v341 = v805;
          if (*((_DWORD *)v805 + 1) != v410 >> 8) {
            goto LABEL_657;
          }
        }
        else
        {
          __int16 v341 = v805;
        }
        uint64_t v342 = sub_1CB83544C((uint64_t)v341, *(void *)v331);
        if (v343 == 1) {
          goto LABEL_657;
        }
        unint64_t v336 = (unint64_t)(v342 + 7) >> 3;
        uint64_t v338 = *(void *)v331;
        goto LABEL_480;
      case '=':
        uint64_t v332 = *(uint64_t **)(v331 - 64);
        if (v332 == *v330) {
          goto LABEL_592;
        }
        if (!v824) {
          goto LABEL_657;
        }
        if (*(_WORD *)(v331 + 18))
        {
          uint64_t v407 = **(void **)(v331 - 32);
          unsigned int v408 = *(_DWORD *)(v407 + 8);
          if ((v408 & 0xFE) == 0x12) {
            unsigned int v408 = *(_DWORD *)(**(void **)(v407 + 16) + 8);
          }
          uint64_t v333 = v805;
          if (*((_DWORD *)v805 + 1) != v408 >> 8) {
            goto LABEL_657;
          }
        }
        else
        {
          uint64_t v333 = v805;
        }
        uint64_t v334 = sub_1CB83544C((uint64_t)v333, *v332);
        if (v335 == 1) {
          goto LABEL_657;
        }
        unint64_t v336 = (unint64_t)(v334 + 7) >> 3;
        if (v827 < v336) {
          goto LABEL_482;
        }
        unint64_t v337 = v322;
        if (v826 >= 0x41)
        {
          int v412 = 0;
          int64_t v413 = ((unint64_t)v826 + 63) >> 6;
          unint64_t v337 = __src;
          do
          {
            BOOL v14 = v413-- < 1;
            if (v14) {
              break;
            }
            unint64_t v414 = *((void *)__src + v413);
            v412 += __clz(v414);
          }
          while (!v414);
          unsigned int v415 = v826 | 0xFFFFFFC0;
          if ((v826 & 0x3F) == 0) {
            unsigned int v415 = 0;
          }
          __int32 v2 = v749;
          uint64_t v322 = (llvm::APInt *)p_src;
          if (v826 - v412 - v415 > 0x40) {
            goto LABEL_482;
          }
        }
        if (*v337 > v827 - v336) {
          goto LABEL_482;
        }
        uint64_t v338 = *v332;
LABEL_480:
        sub_1CCEA76BC((uint64_t *)&v805, v338, v331, v322, v336, *(_WORD *)(v331 + 18) & 1);
        goto LABEL_582;
      case '>':
        if (!*(void *)(v331 + 8)) {
          goto LABEL_482;
        }
        if (!byte_1EBCF7D98 || (*(unsigned char *)(v331 + 17) & 2) == 0) {
          goto LABEL_580;
        }
        unsigned int v339 = v826;
        if (v826 > 0x40) {
          operator new[]();
        }
        int v340 = (unint64_t *)__src;
        int v754 = (llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(v331 + 40) + 56) + 40) + 272);
        int v346 = *(_DWORD *)(v331 + 20);
        if ((v346 & 0x40000000) != 0)
        {
          unint64_t v348 = *(void *)(v331 - 8);
          uint64_t v347 = v346 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v347 = v346 & 0x7FFFFFF;
          unint64_t v348 = v331 - 32 * v347;
        }
        uint64_t v349 = (llvm::MDNode *)(*(void *)(v331 + 64) | 4);
        unint64_t v350 = (llvm::MDNode *)(v348 + 32);
        v768[0] = (llvm::MDNode *)(v348 + 32);
        v768[1] = v349;
        if (v347 == 1)
        {
          char v351 = 0;
          goto LABEL_573;
        }
        uint64_t v731 = v328;
        unint64_t v352 = (llvm::MDNode *)(v348 + 32 * v347);
        unint64_t v353 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v826;
        unint64_t v742 = v353;
        uint64_t v744 = (char *)(((unint64_t)v826 + 63) >> 6);
        uint64_t v730 = (v744 - 1);
        unsigned int v354 = v826 | 0xFFFFFFC0;
        if ((v826 & 0x3F) == 0) {
          unsigned int v354 = 0;
        }
        unsigned int v732 = v354;
        while (2)
        {
          uint64_t v355 = *(void *)v350;
          if (v355) {
            BOOL v356 = *(unsigned char *)(v355 + 16) == 16;
          }
          else {
            BOOL v356 = 0;
          }
          if (!v356)
          {
LABEL_570:
            char v351 = 0;
            goto LABEL_572;
          }
          if (((uint64_t)v768[1] & 4) != 0 || ((unint64_t)v768[1] & 0xFFFFFFFFFFFFFFF8) == 0)
          {
            llvm::APInt::sextOrTrunc(v355 + 24, v826, (uint64_t)&v758);
            unsigned int v365 = v826;
            unint64_t v366 = (llvm::Type *)((unint64_t)v768[1] & 0xFFFFFFFFFFFFFFF8);
            if (((uint64_t)v768[1] & 4) == 0 || !v366)
            {
              AggregateElement = *(llvm::Constant **)v768[0];
              if (*(void *)v768[0]) {
                BOOL v368 = *(unsigned char *)(*(void *)v768[0] + 16) == 16;
              }
              else {
                BOOL v368 = 0;
              }
              if (!v368) {
                AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
              }
              uint64_t v371 = (unsigned int *)*((void *)AggregateElement + 3);
              BOOL v369 = (unsigned int *)((char *)AggregateElement + 24);
              unsigned int v370 = v371;
              if (v369[2] < 0x41) {
                unsigned int v370 = v369;
              }
              unint64_t v366 = *(llvm::Type **)(*((void *)v366 + 2) + 8 * *v370);
            }
            unint64_t v372 = (unint64_t)(sub_1CB83544C((uint64_t)v754, (uint64_t)v366) + 7) >> 3;
            char v373 = llvm::DataLayout::getAlignment(v754, v366, 1);
            uint64_t v374 = ((1 << v373) + v372 - 1) & -(1 << v373);
            LODWORD(v764) = v365;
            if (v365 > 0x40) {
              operator new[]();
            }
            unint64_t v375 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v365;
            if (!v365) {
              unint64_t v375 = 0;
            }
            unint64_t v763 = v375 & v374;
            llvm::APInt::operator*((uint64_t)&v758, &v763, (uint64_t)v766);
            __int32 v2 = v749;
            if (v339 >= 0x41)
            {
              uint64_t v381 = 0;
              int v382 = v766[0];
              uint64_t v383 = v340;
              uint64_t v384 = v744;
              do
              {
                uint64_t v385 = *(void *)v382;
                int v382 = (llvm::MDNode *)((char *)v382 + 8);
                unint64_t v386 = v385 + *v383;
                BOOL v387 = v386 + 1 <= *v383;
                if (v381)
                {
                  ++v386;
                  uint64_t v381 = v387;
                }
                else
                {
                  uint64_t v381 = v386 < *v383;
                }
                *v383++ = v386;
                --v384;
              }
              while (v384);
              v340[v730] &= v742;
              __int32 v2 = v749;
              unint64_t v353 = v742;
            }
            else
            {
              unint64_t v353 = v742;
              unint64_t v376 = v742;
              if (!v339) {
                unint64_t v376 = 0;
              }
              int v340 = (unint64_t *)(v376 & ((unint64_t)v766[0] + (unint64_t)v340));
            }
            if (LODWORD(v766[1]) >= 0x41 && v766[0]) {
              MEMORY[0x1D25D9CB0](v766[0], 0x1000C8000313F17);
            }
            if (v764 >= 0x41 && v763) {
              MEMORY[0x1D25D9CB0](v763, 0x1000C8000313F17);
            }
            if (v759 >= 0x41)
            {
              unsigned int v364 = v758;
              if (v758) {
                goto LABEL_546;
              }
            }
          }
          else
          {
            unint64_t v357 = (unsigned int *)(v355 + 24);
            if (*(_DWORD *)(v355 + 32) >= 0x41u) {
              unint64_t v357 = *(unsigned int **)v357;
            }
            uint64_t v358 = *v357;
            StructLayout = llvm::DataLayout::getStructLayout(v754, (llvm::StructType *)((unint64_t)v768[1] & 0xFFFFFFFFFFFFFFF8));
            unsigned int v360 = v826;
            if (v826 > 0x40) {
              operator new[]();
            }
            unint64_t v361 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v826;
            if (!v826) {
              unint64_t v361 = 0;
            }
            uint64_t v362 = (uint64_t *)(v361 & *((void *)StructLayout + v358 + 2));
            if (v339 >= 0x41)
            {
              uint64_t v388 = 0;
              uint64_t v389 = v340;
              uint64_t v390 = v362;
              uint64_t v391 = v744;
              do
              {
                uint64_t v392 = *v390++;
                unint64_t v393 = v392 + *v389;
                BOOL v394 = v393 + 1 <= *v389;
                if (v388)
                {
                  ++v393;
                  uint64_t v388 = v394;
                }
                else
                {
                  uint64_t v388 = v393 < *v389;
                }
                *v389++ = v393;
                --v391;
              }
              while (v391);
              unint64_t v353 = v742;
              v340[v730] &= v742;
              __int32 v2 = v749;
            }
            else
            {
              unint64_t v363 = v353;
              if (!v339) {
                unint64_t v363 = 0;
              }
              int v340 = (unint64_t *)(v363 & ((unint64_t)v340 + (void)v362));
            }
            if (v360 >= 0x41 && v362)
            {
              unsigned int v364 = (llvm::Value *)v362;
LABEL_546:
              MEMORY[0x1D25D9CB0](v364, 0x1000C8000313F17);
            }
          }
          uint64_t v377 = v340;
          if (v339 < 0x41) {
            goto LABEL_553;
          }
          int v378 = 0;
          uint64_t v379 = (uint64_t)v744;
          do
          {
            BOOL v14 = v379-- < 1;
            if (v14) {
              break;
            }
            unint64_t v380 = v340[v379];
            v378 += __clz(v380);
          }
          while (!v380);
          if (v339 - (v732 + v378) <= 0x40)
          {
            uint64_t v377 = (void *)*v340;
LABEL_553:
            if ((unint64_t)v377 > v827) {
              break;
            }
            sub_1CB8460E4((uint64_t)v768);
            unint64_t v350 = v768[0];
            if (v768[0] == v352) {
              goto LABEL_570;
            }
            continue;
          }
          break;
        }
        sub_1CCEA78F0((uint64_t)&v805, v331);
        char v351 = 1;
LABEL_572:
        uint64_t v328 = v731;
LABEL_573:
        if (v339 >= 0x41 && v340) {
          MEMORY[0x1D25D9CB0](v340, 0x1000C8000313F17);
        }
        if (*(void *)(v331 + 8)) {
          char v395 = v351;
        }
        else {
          char v395 = 1;
        }
        uint64_t v322 = (llvm::APInt *)p_src;
        if ((v395 & 1) == 0)
        {
LABEL_580:
          if ((llvm::detail::PtrUseVisitorBase::adjustOffsetForGEP((llvm::detail::PtrUseVisitorBase *)&v805, (llvm::GetElementPtrInst *)v331, v317, v318, v319, v320, v321) & 1) == 0)
          {
            BOOL v824 = 0;
            if (v826 >= 0x41 && __src) {
              MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
            }
            long long __src = 0;
            unsigned int v826 = 1;
          }
LABEL_581:
          llvm::detail::PtrUseVisitorBase::enqueueUsers((llvm::detail::PtrUseVisitorBase *)&v805, (llvm::Instruction *)v331);
        }
        goto LABEL_582;
      case 'K':
        v806.i64[1] = v806.i8[8] & 3 | v331 | 4;
        goto LABEL_582;
      case 'M':
        if (!*(void *)(v331 + 8)) {
          goto LABEL_482;
        }
        goto LABEL_581;
      case 'N':
        if (*(void *)(v331 + 8)) {
          llvm::detail::PtrUseVisitorBase::enqueueUsers((llvm::detail::PtrUseVisitorBase *)&v805, (llvm::Instruction *)v331);
        }
        else {
          sub_1CCEA78F0((uint64_t)&v805, v331);
        }
        __int32 v2 = v749;
        uint64_t v322 = (llvm::APInt *)p_src;
        goto LABEL_582;
      case 'S':
      case 'U':
        sub_1CCEA7AB4((llvm::detail::PtrUseVisitorBase *)&v805, (uint64_t)v330[3]);
        goto LABEL_582;
      case 'T':
        uint64_t v344 = *(void *)(v331 - 32);
        if (!v344 || *(unsigned char *)(v344 + 16) || *(void *)(v344 + 24) != *(void *)(v331 + 72)) {
          goto LABEL_592;
        }
        int v345 = *(_DWORD *)(v344 + 36);
        if (v345 <= 196)
        {
          if (v345 == 194) {
            goto LABEL_590;
          }
          if (v345)
          {
            if ((v345 - 56) < 3) {
              goto LABEL_582;
            }
LABEL_587:
            sub_1CCEA8604((uint64_t)&v805, v331);
            goto LABEL_582;
          }
LABEL_592:
          int8x16_t v806 = vorrq_s8(vorrq_s8(vandq_s8(v806, (int8x16_t)vdupq_n_s64(3uLL)), (int8x16_t)vdupq_n_s64(4uLL)), (int8x16_t)vdupq_n_s64(v331));
          goto LABEL_582;
        }
        if (v345 > 312) {
          goto LABEL_587;
        }
        if (v345 != 199)
        {
          if (v345 != 197) {
            goto LABEL_587;
          }
LABEL_590:
          sub_1CCEA88C0(&v805, v331);
          goto LABEL_582;
        }
        uint64_t v397 = (void *)(v331 - 32 * (*(_DWORD *)(v331 + 20) & 0x7FFFFFF));
        uint64_t v398 = v397[8];
        if (*(unsigned char *)(v398 + 16) != 16) {
          uint64_t v398 = 0;
        }
        if (!v398) {
          goto LABEL_598;
        }
        uint64_t v399 = (void *)(v398 + 24);
        uint64_t v400 = *(unsigned int *)(v398 + 32);
        if (v400 < 0x41) {
          goto LABEL_597;
        }
        int v416 = 0;
        int64_t v417 = (unint64_t)(v400 + 63) >> 6;
        do
        {
          BOOL v14 = v417-- < 1;
          if (v14) {
            break;
          }
          unint64_t v418 = *(void *)(*v399 + 8 * v417);
          v416 += __clz(v418);
        }
        while (!v418);
        int v419 = v400 | 0xFFFFFFC0;
        if ((v400 & 0x3F) == 0) {
          int v419 = 0;
        }
        __int32 v2 = v749;
        uint64_t v322 = (llvm::APInt *)p_src;
        if ((v400 - v416 - v419) <= 0x40)
        {
          uint64_t v399 = (void *)*v399;
LABEL_597:
          if (!*v399) {
            goto LABEL_482;
          }
        }
LABEL_598:
        if (v824)
        {
          uint64_t v401 = (unint64_t *)v322;
          if (v826 >= 0x41)
          {
            int v420 = 0;
            int64_t v421 = ((unint64_t)v826 + 63) >> 6;
            uint64_t v401 = (unint64_t *)__src;
            do
            {
              BOOL v14 = v421-- < 1;
              if (v14) {
                break;
              }
              unint64_t v422 = *((void *)__src + v421);
              v420 += __clz(v422);
            }
            while (!v422);
            unsigned int v423 = v826 | 0xFFFFFFC0;
            if ((v826 & 0x3F) == 0) {
              unsigned int v423 = 0;
            }
            __int32 v2 = v749;
            uint64_t v322 = (llvm::APInt *)p_src;
            if (v826 - v420 - v423 > 0x40) {
              goto LABEL_482;
            }
          }
          if (*v401 >= v827)
          {
LABEL_482:
            sub_1CCEA78F0((uint64_t)&v805, v331);
            goto LABEL_582;
          }
          uint64_t v402 = v397[12];
          uint64_t v403 = *(unsigned int *)(v402 + 32);
          if (v403 > 0x40)
          {
            int v424 = 0;
            int64_t v425 = (unint64_t)(v403 + 63) >> 6;
            do
            {
              BOOL v14 = v425-- < 1;
              if (v14) {
                break;
              }
              unint64_t v426 = *(void *)(*(void *)(v402 + 24) + 8 * v425);
              v424 += __clz(v426);
            }
            while (!v426);
            int v427 = v403 | 0xFFFFFFC0;
            if ((v403 & 0x3F) == 0) {
              int v427 = 0;
            }
            __int32 v2 = v749;
            uint64_t v322 = (llvm::APInt *)p_src;
            if (v424 + v427 == v403)
            {
LABEL_603:
              if (v398)
              {
                uint64_t v404 = (unint64_t *)(v398 + 24);
                uint64_t v405 = *(unsigned int *)(v398 + 32);
                if (v405 < 0x41) {
                  goto LABEL_605;
                }
                int v433 = 0;
                int64_t v434 = (unint64_t)(v405 + 63) >> 6;
                do
                {
                  BOOL v14 = v434-- < 1;
                  if (v14) {
                    break;
                  }
                  unint64_t v435 = *(void *)(*v404 + 8 * v434);
                  v433 += __clz(v435);
                }
                while (!v435);
                int v436 = v405 | 0xFFFFFFC0;
                if ((v405 & 0x3F) == 0) {
                  int v436 = 0;
                }
                if ((v405 - v433 - v436) > 0x40)
                {
                  unint64_t v406 = -1;
                  goto LABEL_675;
                }
                uint64_t v404 = (unint64_t *)*v404;
                __int32 v2 = v749;
                uint64_t v322 = (llvm::APInt *)p_src;
LABEL_605:
                unint64_t v406 = *v404;
              }
              else
              {
                if (v826 < 0x41) {
                  goto LABEL_673;
                }
                int v428 = 0;
                int64_t v429 = ((unint64_t)v826 + 63) >> 6;
                uint64_t v322 = (llvm::APInt *)__src;
                do
                {
                  BOOL v14 = v429-- < 1;
                  if (v14) {
                    break;
                  }
                  unint64_t v430 = *((void *)__src + v429);
                  v428 += __clz(v430);
                }
                while (!v430);
                unsigned int v431 = v826 | 0xFFFFFFC0;
                if ((v826 & 0x3F) == 0) {
                  unsigned int v431 = 0;
                }
                if (v826 - v428 - v431 <= 0x40) {
LABEL_673:
                }
                  uint64_t v432 = *(void *)v322;
                else {
                  uint64_t v432 = -1;
                }
                unint64_t v406 = v827 - v432;
LABEL_675:
                __int32 v2 = v749;
                uint64_t v322 = (llvm::APInt *)p_src;
              }
              sub_1CCEA7804(&v805, v331, v322, v406, v398 != 0);
              goto LABEL_582;
            }
          }
          else if (!*(void *)(v402 + 24))
          {
            goto LABEL_603;
          }
          if (*((_DWORD *)v805 + 1) == *(_DWORD *)(*(void *)*v397 + 8) >> 8) {
            goto LABEL_603;
          }
        }
LABEL_657:
        v806.i64[0] = v806.i8[0] & 3 | v331 | 4;
LABEL_582:
        __int8 v396 = v806.i8[0];
        if (v326 >= 0x41 && v328) {
          MEMORY[0x1D25D9CB0](v328, 0x1000C8000313F17);
        }
        if ((v396 & 4) != 0) {
          goto LABEL_677;
        }
        break;
      default:
        goto LABEL_657;
    }
  }
LABEL_677:
  if (((v806.i32[2] | v806.i32[0]) & 4) != 0)
  {
    unint64_t v719 = v806.i64[0] & 0xFFFFFFFFFFFFFFF8;
    if ((v806.i64[1] & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t v719 = v806.i64[1] & 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v772 = v719;
  }
  else
  {
    unint64_t v437 = v773;
    if (v774)
    {
      uint64_t v438 = 0;
      uint64_t v439 = 24 * v774;
      while (1)
      {
        unsigned int v440 = (char *)v773 + v438;
        if (*(void *)((char *)v773 + v438 + 16) <= 7uLL) {
          break;
        }
        v438 += 24;
        if (v439 == v438)
        {
          unsigned int v440 = (char *)v773 + 24 * v774;
          goto LABEL_683;
        }
      }
      if (v439 - 24 != v438)
      {
        uint64_t v724 = v439 - v438 - 24;
        int v725 = (unint64_t *)(v440 + 40);
        uint64_t v726 = (unint64_t *)(v440 + 40);
        do
        {
          unint64_t v727 = *v726;
          v726 += 3;
          if (v727 >= 8)
          {
            long long v728 = *((_OWORD *)v725 - 1);
            *((void *)v440 + 2) = *v725;
            *(_OWORD *)unsigned int v440 = v728;
            v440 += 24;
          }
          int v725 = v726;
          v724 -= 24;
        }
        while (v724);
        unint64_t v437 = v773;
      }
      __int32 v2 = v749;
    }
    else
    {
      unsigned int v440 = (char *)v773;
    }
LABEL_683:
    unint64_t v441 = 0xAAAAAAAAAAAAAAABLL * ((v440 - v437) >> 3);
    LODWORD(v774) = v441;
    unint64_t v442 = v441;
    uint64_t v443 = &v437[24 * v441];
    if (v441 < 0x81 || v441 == 0)
    {
LABEL_688:
      sub_1CCEA91C8((uint64_t)v437, v443, v442, 0, 0);
    }
    else
    {
      __int16 v720 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      unint64_t v721 = v441;
      while (1)
      {
        unsigned int v722 = operator new(24 * v721, v720);
        if (v722) {
          break;
        }
        BOOL v14 = v721 > 1;
        v721 >>= 1;
        if (!v14) {
          goto LABEL_688;
        }
      }
      uint64_t v723 = v722;
      sub_1CCEA91C8((uint64_t)v437, v443, v442, (uint64_t)v722, v721);
      operator delete(v723);
    }
  }
  int v15 = v739;
  if (v834 != v833) {
    free(v834);
  }
  if ((v831 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v832, 8);
  }
  if ((v829 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v830, 8);
  }
  if (v826 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v819 != v818) {
    free(v819);
  }
  sub_1CCEA0168(v747);
  if (v772) {
    goto LABEL_1102;
  }
  if (!v777) {
    goto LABEL_738;
  }
  __int16 v446 = (llvm::PoisonValue ***)v776;
  char v447 = (llvm::PoisonValue ***)((char *)v776 + 8 * v777);
  int v755 = (unsigned int *)((char *)this + 192);
  do
  {
    uint64_t v448 = *v446;
    int v449 = *((_DWORD *)*v446 + 5);
    if ((v449 & 0x40000000) != 0)
    {
      uint64_t v451 = (llvm::PoisonValue ***)*(v448 - 1);
      uint64_t v450 = v449 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v450 = v449 & 0x7FFFFFF;
      uint64_t v451 = (llvm::PoisonValue ***)&v448[-4 * v450];
    }
    if (v450)
    {
      uint64_t v452 = 32 * v450;
      do
      {
        llvm::SROAPass::clobberUse(this, v451);
        v451 += 4;
        v452 -= 32;
      }
      while (v452);
    }
    BOOL v453 = (llvm::Value *)llvm::PoisonValue::get(*v448, v445);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v448, v453, (llvm::Value *)1);
    uint64_t v805 = (void *)4;
    v806.i64[0] = 0;
    v806.i64[1] = (uint64_t)v448;
    if (v448 != (llvm::PoisonValue **)-8192 && v448 != (llvm::PoisonValue **)-4096 && v448) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v805);
    }
    uint64_t v454 = *((unsigned int *)this + 50);
    unint64_t v455 = *((void *)this + 24);
    if (v454 >= *((_DWORD *)this + 51))
    {
      unint64_t v473 = v454 + 1;
      BOOL v474 = v455 + 24 * v454 > (unint64_t)&v805;
      if (v455 <= (unint64_t)&v805 && v474)
      {
        int v475 = (char *)&v805 - v455;
        sub_1CC0BD844(v755, v473);
        unint64_t v455 = *(void *)v755;
        BOOL v456 = (void **)&v475[*(void *)v755];
        goto LABEL_713;
      }
      sub_1CC0BD844(v755, v473);
      unint64_t v455 = *(void *)v755;
    }
    BOOL v456 = &v805;
LABEL_713:
    unsigned int v457 = *((_DWORD *)this + 50);
    int v458 = (unint64_t *)(v455 + 24 * v457);
    *int v458 = 4;
    v458[1] = 0;
    __int16 v459 = v456[2];
    v458[2] = (unint64_t)v459;
    if (v459 != (void *)-8192 && v459 != (void *)-4096)
    {
      if (v459)
      {
        unint64_t v460 = (unint64_t)*v456 & 0xFFFFFFFFFFFFFFF8;
        v458[1] = *(void *)v460;
        *(void *)unint64_t v460 = v458;
        *int v458 = v460 | 4;
        uint64_t v461 = (unint64_t *)v458[1];
        if (v461) {
          unint64_t *v461 = *v461 & 7 | (unint64_t)(v458 + 1);
        }
      }
    }
    *((_DWORD *)this + 50) = v457 + 1;
    if (v806.i64[1] != -8192 && v806.i64[1] != -4096 && v806.i64[1])
    {
      unint64_t v462 = (unint64_t)v805 & 0xFFFFFFFFFFFFFFF8;
      *(void *)((unint64_t)v805 & 0xFFFFFFFFFFFFFFF8) = v806.i64[0];
      if (v806.i64[0])
      {
        *(void *)v806.i64[0] = *(void *)v806.i64[0] & 7 | v462;
      }
      else
      {
        uint64_t v463 = v806.i64[1];
        uint64_t v464 = ***(int32x2_t ****)v806.i64[1];
        unint64_t v465 = (unint64_t)v464[303];
        if (v465 <= v462)
        {
          uint64_t v466 = v464[305].u32[0];
          if (v465 + 16 * v466 > v462)
          {
            unsigned int v467 = v466 - 1;
            LODWORD(v468) = v467 & (((unsigned __int32)v806.i32[2] >> 4) ^ ((unsigned __int32)v806.i32[2] >> 9));
            int64_t v469 = (uint64_t *)(v465 + 16 * v468);
            uint64_t v470 = *v469;
            if (v806.i64[1] == *v469)
            {
LABEL_729:
              *int64_t v469 = -8192;
              v464[304] = vadd_s32(v464[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v463 = v806.i64[1];
            }
            else
            {
              int v471 = 1;
              while (v470 != -4096)
              {
                int v472 = v468 + v471++;
                uint64_t v468 = v472 & v467;
                uint64_t v470 = *(void *)(v465 + 16 * v468);
                if (v806.i64[1] == v470)
                {
                  int64_t v469 = (uint64_t *)(v465 + 16 * v468);
                  goto LABEL_729;
                }
              }
            }
            *(unsigned char *)(v463 + 17) &= ~1u;
          }
        }
      }
    }
    ++v446;
  }
  while (v446 != v447);
  int v15 = 1;
LABEL_738:
  if (v783)
  {
    int64_t v476 = (llvm::PoisonValue ****)v782;
    uint64_t v477 = 8 * v783;
    do
    {
      int v478 = *v476++;
      llvm::SROAPass::clobberUse(this, v478);
      v477 -= 8;
    }
    while (v477);
    int v15 = 1;
  }
  if (v774)
  {
    int v740 = v15 | llvm::SROAPass::splitAlloca((uint64_t)this, (uint64_t)v2, (uint64_t)&v771);
    uint64_t v479 = *((unsigned int *)this + 156);
    if (v479)
    {
      uint64_t v480 = *(uint64_t ****)(*((void *)this + 77) + 8 * v479 - 8);
      sub_1CD781D30((uint64_t)this + 592);
      unint64_t v481 = v480[1][3];
      unint64_t v756 = (uint64_t **)*v481;
      uint64_t v799 = v480[5];
      unsigned int v800 = v480 + 3;
      uint64_t v482 = (llvm::MDNode *)v480[6];
      v768[0] = v482;
      if (v482)
      {
        llvm::MetadataTracking::track((uint64_t)v768, (unsigned __int8 *)v482, 2);
        size_t v483 = v768[0];
      }
      else
      {
        size_t v483 = 0;
      }
      sub_1CB8461A4((uint64_t)&v796, 0, (uint64_t)v483);
      if (!v768[0]) {
        goto LABEL_747;
      }
      int v605 = *(unsigned __int8 *)v768[0];
      if ((v605 - 4) <= 0x1E)
      {
        if ((*((unsigned char *)v768[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v768[0] + 3)) {
          goto LABEL_747;
        }
        uint64_t v606 = *((void *)v768[0] + 2);
        if ((v606 & 4) == 0) {
          goto LABEL_747;
        }
        unint64_t v607 = v606 & 0xFFFFFFFFFFFFFFF8;
        if (!v607) {
          goto LABEL_747;
        }
LABEL_928:
        uint64_t v805 = v768;
        sub_1CC5FA668(v607 + 16, &v805);
        goto LABEL_747;
      }
      if ((v605 - 3) >= 0xFFFFFFFE) {
        uint64_t v608 = v768[0];
      }
      else {
        uint64_t v608 = 0;
      }
      if ((v605 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v607 = (unint64_t)v608 + 8;
        goto LABEL_928;
      }
      if (v605 == 3) {
        *((void *)v768[0] + 1) = 0;
      }
LABEL_747:
      int v484 = *((_DWORD *)v480 + 5);
      unsigned int v485 = v480 >> 4;
      if ((v484 & 0x10000000) != 0)
      {
        uint64_t v486 = ***v480;
        uint64_t v487 = *(void *)(v486 + 152);
        uint64_t v488 = *(unsigned int *)(v486 + 168);
        if (v488)
        {
          LODWORD(v489) = (v488 - 1) & (v485 ^ (v480 >> 9));
          uint64_t v490 = (uint64_t ****)(v487 + 16 * v489);
          unint64_t v491 = *v490;
          if (*v490 != v480)
          {
            int v492 = 1;
            do
            {
              if (v491 == (uint64_t ***)-4096) {
                goto LABEL_754;
              }
              int v493 = v489 + v492++;
              uint64_t v489 = v493 & (v488 - 1);
              unint64_t v491 = *(uint64_t ****)(v487 + 16 * v489);
            }
            while (v491 != v480);
            uint64_t v490 = (uint64_t ****)(v487 + 16 * v489);
          }
        }
        else
        {
LABEL_754:
          uint64_t v490 = (uint64_t ****)(v487 + 16 * v488);
        }
        BOOL v494 = v490[1];
        uint64_t v497 = (uint64_t)*v494;
        int64_t v496 = (char *)(v494 + 2);
        uint64_t v495 = v497;
      }
      else
      {
        uint64_t v495 = 0;
        int64_t v496 = &byte_1CFBCE98E;
      }
      LOWORD(v808) = 773;
      uint64_t v805 = v496;
      v806.i64[0] = v495;
      v806.i64[1] = (uint64_t)".sroa.speculated";
      int v498 = sub_1CB93113C((uint64_t)&v796, (uint64_t)v756, v484 & 0x7FFFFFF, (uint64_t)&v805);
      llvm::Instruction::getAAMetadata((uint64_t ***)v481, v766);
      unint64_t v499 = *((unsigned __int16 *)v481 + 9);
      uint64_t v500 = v480[1];
      if (v500)
      {
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v500[3], v498, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      unint64_t v763 = 0;
      uint64_t v764 = 0;
      int v765 = 0;
      int v501 = *((_DWORD *)v480 + 5);
      uint64_t v502 = v501 & 0x7FFFFFF;
      if ((v501 & 0x7FFFFFF) == 0) {
LABEL_914:
      }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      uint64_t v503 = 0;
      unint64_t v752 = (llvm::APInt *)((v499 >> 1) & 0x3F);
      unsigned int v750 = v485 ^ (v480 >> 9);
      uint64_t v748 = v501 & 0x7FFFFFF;
      while (2)
      {
        int v762 = 0;
        int v504 = *((_DWORD *)v480 + 5);
        if ((v504 & 0x40000000) != 0)
        {
          uint64_t v506 = (uint64_t)(&(*(v480 - 1))[4 * *((unsigned int *)v480 + 15)])[v503];
          int v762 = (uint64_t ***)v506;
          uint64_t v505 = (uint64_t ***)*(v480 - 1);
        }
        else
        {
          uint64_t v505 = &v480[-4 * (v504 & 0x7FFFFFF)];
          uint64_t v506 = (uint64_t)(&v505[4 * *((unsigned int *)v480 + 15)])[v503];
          int v762 = (uint64_t ***)v506;
        }
        uint64_t v507 = (uint64_t)v505[4 * v503];
        if (v765)
        {
          uint64_t v508 = (v765 - 1) & ((v506 >> 4) ^ (v506 >> 9));
          uint64_t v509 = *(void *)(v763 + 16 * v508);
          if (v506 == v509)
          {
LABEL_765:
            uint64_t v510 = *(void *)(v763 + 16 * v508 + 8);
            if (v510)
            {
              int v511 = *((_DWORD *)v498 + 5);
              uint64_t v512 = v511 & 0x7FFFFFF;
              if ((v511 & 0x7FFFFFF) == *((_DWORD *)v498 + 15))
              {
                unsigned int v524 = v512 + (v512 >> 1);
                if (v524 <= 2) {
                  uint64_t v525 = 2;
                }
                else {
                  uint64_t v525 = v524;
                }
                *((_DWORD *)v498 + 15) = v525;
                if ((v511 & 0x40000000) != 0) {
                  unint64_t v526 = (uint64_t *)*((void *)v498 - 1);
                }
                else {
                  unint64_t v526 = (uint64_t *)((char *)v498 - 32 * v512);
                }
                unint64_t v745 = v526;
                unint64_t v527 = operator new(40 * v525);
                *((void *)v498 - 1) = v527;
                uint64_t v528 = v527;
                do
                {
                  *uint64_t v528 = 0;
                  v528[1] = 0;
                  v528[2] = 0;
                  v528[3] = v498;
                  v528 += 4;
                }
                while (v528 != &v527[4 * v525]);
                int v529 = *((_DWORD *)v498 + 5);
                if ((v529 & 0x40000000) != 0) {
                  uint64_t v530 = (uint64_t)v527;
                }
                else {
                  uint64_t v530 = (uint64_t)v498 - 32 * (v529 & 0x7FFFFFF);
                }
                sub_1CC5E4108((uint64_t)&v805, v745, &v745[4 * v512], v530);
                if (v512)
                {
                  memmove((void *)(v530 + 32 * v525), &v745[4 * v512], 8 * v512);
                  uint64_t v531 = 4 * v512;
                  do
                  {
                    int v532 = &v745[v531];
                    if (v745[v531 - 4])
                    {
                      *(void *)*(v532 - 2) = *(v532 - 3);
                      uint64_t v533 = *(v532 - 3);
                      if (v533) {
                        *(void *)(v533 + 16) = *(v532 - 2);
                      }
                    }
                    v531 -= 4;
                  }
                  while (v531 * 8);
                }
                operator delete(v745);
                int v511 = *((_DWORD *)v498 + 5);
              }
              uint64_t v513 = (v511 + 1) & 0x7FFFFFF;
              *((_DWORD *)v498 + 5) = v511 & 0xF8000000 | (v511 + 1) & 0x7FFFFFF;
              uint64_t v502 = v748;
              if ((v511 & 0x40000000) != 0) {
                unint64_t v514 = (char *)*((void *)v498 - 1);
              }
              else {
                unint64_t v514 = (char *)v498 - 32 * v513;
              }
              uint64_t v515 = (v513 - 1);
              BOOL v516 = &v514[32 * v515];
              if (*(void *)v516)
              {
                **((void **)v516 + 2) = *((void *)v516 + 1);
                uint64_t v523 = *((void *)v516 + 1);
                if (v523) {
                  *(void *)(v523 + 16) = *((void *)v516 + 2);
                }
              }
              *(void *)BOOL v516 = v510;
              uint64_t v519 = *(void *)(v510 + 8);
              unint64_t v518 = (char **)(v510 + 8);
              uint64_t v517 = v519;
              *((void *)v516 + 1) = v519;
              if (v519) {
                *(void *)(v517 + 16) = v516 + 8;
              }
              *(void *)&v514[32 * v515 + 16] = v518;
              *unint64_t v518 = v516;
              int v520 = *((_DWORD *)v498 + 5);
              uint64_t v521 = v520 & 0x7FFFFFF;
              if ((v520 & 0x40000000) != 0) {
                unint64_t v522 = (char *)*((void *)v498 - 1);
              }
              else {
                unint64_t v522 = (char *)v498 - 32 * v521;
              }
              *(void *)&v522[32 * *((unsigned int *)v498 + 15) + 8 * (v521 - 1)] = v506;
LABEL_863:
              if (++v503 == v502) {
                goto LABEL_914;
              }
              continue;
            }
          }
          else
          {
            int v534 = 1;
            while (v509 != -4096)
            {
              int v535 = v508 + v534++;
              uint64_t v508 = v535 & (v765 - 1);
              uint64_t v509 = *(void *)(v763 + 16 * v508);
              if (v506 == v509) {
                goto LABEL_765;
              }
            }
          }
        }
        break;
      }
      uint64_t v536 = 0;
      uint64_t v537 = *(void *)(v506 + 40);
      if (v537) {
        uint64_t v538 = v537 - 24;
      }
      else {
        uint64_t v538 = 0;
      }
      if (*(unsigned __int8 *)(v538 + 16) - 29 >= 0xB) {
        uint64_t v538 = 0;
      }
      uint64_t v799 = *(uint64_t ***)(v538 + 40);
      unsigned int v800 = (void *)(v538 + 24);
      int v539 = *(llvm::MDNode **)(v538 + 48);
      v768[0] = v539;
      if (v539)
      {
        llvm::MetadataTracking::track((uint64_t)v768, (unsigned __int8 *)v539, 2);
        uint64_t v536 = v768[0];
      }
      sub_1CB8461A4((uint64_t)&v796, 0, (uint64_t)v536);
      if (v768[0])
      {
        int v601 = *(unsigned __int8 *)v768[0];
        if ((v601 - 4) > 0x1E)
        {
          if ((v601 - 3) >= 0xFFFFFFFE) {
            BOOL v604 = v768[0];
          }
          else {
            BOOL v604 = 0;
          }
          if ((v601 - 3) < 0xFFFFFFFE)
          {
            if (v601 == 3) {
              *((void *)v768[0] + 1) = 0;
            }
            goto LABEL_806;
          }
          unint64_t v603 = (unint64_t)v604 + 8;
        }
        else
        {
          if ((*((unsigned char *)v768[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v768[0] + 3)) {
            goto LABEL_806;
          }
          uint64_t v602 = *((void *)v768[0] + 2);
          if ((v602 & 4) == 0) {
            goto LABEL_806;
          }
          unint64_t v603 = v602 & 0xFFFFFFFFFFFFFFF8;
          if (!v603) {
            goto LABEL_806;
          }
        }
        uint64_t v805 = v768;
        sub_1CC5FA668(v603 + 16, &v805);
      }
LABEL_806:
      if ((*((unsigned char *)v480 + 23) & 0x10) != 0)
      {
        uint64_t v540 = ***v480;
        uint64_t v541 = *(void *)(v540 + 152);
        uint64_t v542 = *(unsigned int *)(v540 + 168);
        if (v542)
        {
          LODWORD(v543) = (v542 - 1) & v750;
          uint64_t v544 = (uint64_t ****)(v541 + 16 * v543);
          uint64_t v545 = *v544;
          if (*v544 != v480)
          {
            int v546 = 1;
            do
            {
              if (v545 == (uint64_t ***)-4096) {
                goto LABEL_813;
              }
              int v547 = v543 + v546++;
              uint64_t v543 = v547 & (v542 - 1);
              uint64_t v545 = *(uint64_t ****)(v541 + 16 * v543);
            }
            while (v545 != v480);
            uint64_t v544 = (uint64_t ****)(v541 + 16 * v543);
          }
        }
        else
        {
LABEL_813:
          uint64_t v544 = (uint64_t ****)(v541 + 16 * v542);
        }
        BOOL v548 = (uint64_t *)v544[1];
        uint64_t v551 = *v548;
        int v550 = (llvm::Value *)(v548 + 2);
        uint64_t v549 = v551;
      }
      else
      {
        uint64_t v549 = 0;
        int v550 = (llvm::Value *)&byte_1CFBCE98E;
      }
      __int16 v761 = 773;
      unint64_t v758 = v550;
      uint64_t v759 = v549;
      size_t v760 = ".sroa.speculate.load.";
      if ((*((unsigned char *)v762 + 23) & 0x10) != 0)
      {
        uint64_t v552 = ***v762;
        uint64_t v553 = *(void *)(v552 + 152);
        uint64_t v554 = *(unsigned int *)(v552 + 168);
        if (v554)
        {
          LODWORD(v555) = (v554 - 1) & ((v762 >> 4) ^ (v762 >> 9));
          uint64_t v556 = (uint64_t ****)(v553 + 16 * v555);
          int v557 = *v556;
          if (*v556 != v762)
          {
            int v558 = 1;
            do
            {
              if (v557 == (uint64_t ***)-4096) {
                goto LABEL_822;
              }
              int v559 = v555 + v558++;
              uint64_t v555 = v559 & (v554 - 1);
              int v557 = *(uint64_t ****)(v553 + 16 * v555);
            }
            while (v557 != v762);
            uint64_t v556 = (uint64_t ****)(v553 + 16 * v555);
          }
        }
        else
        {
LABEL_822:
          uint64_t v556 = (uint64_t ****)(v553 + 16 * v554);
        }
        uint64_t v560 = v556[1];
        uint64_t v563 = (uint64_t)*v560;
        uint64_t v562 = (char *)(v560 + 2);
        uint64_t v561 = v563;
      }
      else
      {
        uint64_t v561 = 0;
        uint64_t v562 = &byte_1CFBCE98E;
      }
      v768[0] = (llvm::MDNode *)&v758;
      v769.i64[0] = (uint64_t)v562;
      v769.i64[1] = v561;
      __int16 v770 = 1282;
      uint64_t v564 = (char *)operator new(0x60uLL);
      *((_DWORD *)v564 + 13) = *((_DWORD *)v564 + 13) & 0x38000000 | 1;
      uint64_t v565 = (llvm::Instruction *)(v564 + 32);
      *(void *)uint64_t v564 = 0;
      *((void *)v564 + 1) = 0;
      *((void *)v564 + 2) = 0;
      *((void *)v564 + 3) = v564 + 32;
      LOWORD(v808) = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v564 + 32), (uint64_t)v756, v507, (const char **)&v805, 0, (char)v752, 0);
      (*(void (**)(uint64_t, char *, llvm::MDNode **, uint64_t **, void *))(*(void *)v802 + 16))(v802, v564 + 32, v768, v799, v800);
      if (v797)
      {
        uint64_t v599 = (llvm::MDNode **)v796;
        unsigned int v600 = (llvm::MDNode **)((char *)v796 + 16 * v797);
        do
        {
          llvm::Instruction::setMetadata(v565, *(_DWORD *)v599, v599[1]);
          v599 += 2;
        }
        while (v599 != v600);
      }
      if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)v766), (int32x4_t)vceqzq_s64(*(int64x2_t *)v767))))))
      {
        if (v766[0] || *((void *)v564 + 10) || (v564[55] & 0x20) != 0)
        {
          llvm::Value::setMetadata((uint64_t ***)v565, 1, v766[0]);
          uint64_t v566 = v766[1];
          if (v766[1]) {
            goto LABEL_830;
          }
        }
        else
        {
          uint64_t v566 = v766[1];
          if (v766[1]) {
            goto LABEL_830;
          }
        }
        if (*((void *)v564 + 10) || (v564[55] & 0x20) != 0) {
LABEL_830:
        }
          llvm::Value::setMetadata((uint64_t ***)v565, 5, v566);
        if (v767[0] || *((void *)v564 + 10) || (v564[55] & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v565, 7, v767[0]);
        }
        if (v767[1] || *((void *)v564 + 10) || (v564[55] & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v565, 8, v767[1]);
        }
      }
      uint64_t v567 = (uint64_t)v762;
      int v568 = *((_DWORD *)v498 + 5);
      uint64_t v569 = v568 & 0x7FFFFFF;
      if ((v568 & 0x7FFFFFF) == *((_DWORD *)v498 + 15))
      {
        unsigned int v589 = v569 + (v569 >> 1);
        if (v589 <= 2) {
          uint64_t v590 = 2;
        }
        else {
          uint64_t v590 = v589;
        }
        *((_DWORD *)v498 + 15) = v590;
        if ((v568 & 0x40000000) != 0) {
          uint64_t v591 = (uint64_t *)*((void *)v498 - 1);
        }
        else {
          uint64_t v591 = (uint64_t *)((char *)v498 - 32 * v569);
        }
        uint64_t v746 = v591;
        int v592 = operator new(40 * v590);
        *((void *)v498 - 1) = v592;
        uint64_t v593 = v592;
        do
        {
          *uint64_t v593 = 0;
          v593[1] = 0;
          v593[2] = 0;
          v593[3] = v498;
          v593 += 4;
        }
        while (v593 != &v592[4 * v590]);
        int v594 = *((_DWORD *)v498 + 5);
        if ((v594 & 0x40000000) != 0) {
          uint64_t v595 = (uint64_t)v592;
        }
        else {
          uint64_t v595 = (uint64_t)v498 - 32 * (v594 & 0x7FFFFFF);
        }
        sub_1CC5E4108((uint64_t)&v805, v746, &v746[4 * v569], v595);
        if (v569)
        {
          memmove((void *)(v595 + 32 * v590), &v746[4 * v569], 8 * v569);
          uint64_t v596 = 4 * v569;
          do
          {
            uint64_t v597 = &v746[v596];
            if (v746[v596 - 4])
            {
              *(void *)*(v597 - 2) = *(v597 - 3);
              uint64_t v598 = *(v597 - 3);
              if (v598) {
                *(void *)(v598 + 16) = *(v597 - 2);
              }
            }
            v596 -= 4;
          }
          while (v596 * 8);
        }
        operator delete(v746);
        int v568 = *((_DWORD *)v498 + 5);
        uint64_t v502 = v748;
      }
      uint64_t v570 = (v568 + 1) & 0x7FFFFFF;
      *((_DWORD *)v498 + 5) = v568 & 0xF8000000 | (v568 + 1) & 0x7FFFFFF;
      if ((v568 & 0x40000000) != 0) {
        unint64_t v571 = (char *)*((void *)v498 - 1);
      }
      else {
        unint64_t v571 = (char *)v498 - 32 * v570;
      }
      uint64_t v572 = (v570 - 1);
      uint64_t v573 = &v571[32 * v572];
      if (*(void *)v573)
      {
        **((void **)v573 + 2) = *((void *)v573 + 1);
        uint64_t v588 = *((void *)v573 + 1);
        if (v588) {
          *(void *)(v588 + 16) = *((void *)v573 + 2);
        }
      }
      *(void *)uint64_t v573 = v565;
      uint64_t v576 = *((void *)v564 + 5);
      uint64_t v575 = (char **)(v564 + 40);
      uint64_t v574 = v576;
      *((void *)v573 + 1) = v576;
      if (v576) {
        *(void *)(v574 + 16) = v573 + 8;
      }
      *(void *)&v571[32 * v572 + 16] = v575;
      char *v575 = v573;
      int v577 = *((_DWORD *)v498 + 5);
      uint64_t v578 = v577 & 0x7FFFFFF;
      if ((v577 & 0x40000000) != 0) {
        uint64_t v579 = (char *)*((void *)v498 - 1);
      }
      else {
        uint64_t v579 = (char *)v498 - 32 * v578;
      }
      *(void *)&v579[32 * *((unsigned int *)v498 + 15) + 8 * (v578 - 1)] = v567;
      if (v765)
      {
        unsigned int v580 = ((v762 >> 4) ^ (v762 >> 9)) & (v765 - 1);
        uint64_t v581 = (uint64_t *)(v763 + 16 * v580);
        uint64_t v582 = *v581;
        if (v762 != (uint64_t ***)*v581)
        {
          uint64_t v583 = 0;
          int v584 = 1;
          while (v582 != -4096)
          {
            if (v583) {
              BOOL v585 = 0;
            }
            else {
              BOOL v585 = v582 == -8192;
            }
            if (v585) {
              uint64_t v583 = v581;
            }
            unsigned int v586 = v580 + v584++;
            unsigned int v580 = v586 & (v765 - 1);
            uint64_t v581 = (uint64_t *)(v763 + 16 * v580);
            uint64_t v582 = *v581;
            if (v762 == (uint64_t ***)*v581) {
              goto LABEL_862;
            }
          }
          if (v583) {
            uint64_t v587 = v583;
          }
          else {
            uint64_t v587 = v581;
          }
LABEL_861:
          uint64_t v581 = sub_1CC0A3E2C((uint64_t)&v763, (uint64_t)&v762, (uint64_t *)&v762, v587);
          *uint64_t v581 = (uint64_t)v762;
          v581[1] = 0;
        }
LABEL_862:
        v581[1] = (uint64_t)v565;
        goto LABEL_863;
      }
      uint64_t v587 = 0;
      goto LABEL_861;
    }
    uint64_t v609 = *((unsigned int *)this + 170);
    if (v609)
    {
      uint64_t v610 = *(llvm::APInt **)(*((void *)this + 84) + 8 * v609 - 8);
      sub_1CD781DA4((uint64_t)this + 648);
      uint64_t v799 = (uint64_t **)*((void *)v610 + 5);
      unsigned int v800 = (void *)((char *)v610 + 24);
      uint64_t v611 = (llvm::MDNode *)*((void *)v610 + 6);
      v768[0] = v611;
      if (v611)
      {
        llvm::MetadataTracking::track((uint64_t)v768, (unsigned __int8 *)v611, 2);
        unsigned int v612 = v768[0];
      }
      else
      {
        unsigned int v612 = 0;
      }
      sub_1CB8461A4((uint64_t)&v796, 0, (uint64_t)v612);
      if (!v768[0]) {
        goto LABEL_935;
      }
      int v713 = *(unsigned __int8 *)v768[0];
      if ((v713 - 4) <= 0x1E)
      {
        if ((*((unsigned char *)v768[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v768[0] + 3)) {
          goto LABEL_935;
        }
        uint64_t v714 = *((void *)v768[0] + 2);
        if ((v714 & 4) == 0) {
          goto LABEL_935;
        }
        unint64_t v715 = v714 & 0xFFFFFFFFFFFFFFF8;
        if (!v715) {
          goto LABEL_935;
        }
LABEL_1098:
        uint64_t v805 = v768;
        sub_1CC5FA668(v715 + 16, &v805);
        goto LABEL_935;
      }
      if ((v713 - 3) >= 0xFFFFFFFE) {
        long long v716 = v768[0];
      }
      else {
        long long v716 = 0;
      }
      if ((v713 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v715 = (unint64_t)v716 + 8;
        goto LABEL_1098;
      }
      if (v713 == 3) {
        *((void *)v768[0] + 1) = 0;
      }
LABEL_935:
      uint64_t v613 = *((void *)v610 + 1);
      if (!v613) {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
      uint64_t v614 = *((void *)v610 - 8);
      uint64_t v615 = (unsigned __int8 *)*((void *)v610 - 4);
      unsigned int v753 = v610;
      long long v616 = *(uint64_t ****)(v613 + 24);
      if (*((unsigned char *)v616 + 16) == 77) {
        long long v617 = *(uint64_t **)(v613 + 24);
      }
      else {
        long long v617 = 0;
      }
      if (v617) {
        long long v616 = *(uint64_t ****)(v617[1] + 24);
      }
      uint64_t v799 = v616[5];
      unsigned int v800 = v616 + 3;
      __int16 v618 = (llvm::MDNode *)v616[6];
      v768[0] = v618;
      if (v618)
      {
        llvm::MetadataTracking::track((uint64_t)v768, (unsigned __int8 *)v618, 2);
        uint64_t v619 = v768[0];
      }
      else
      {
        uint64_t v619 = 0;
      }
      sub_1CB8461A4((uint64_t)&v796, 0, (uint64_t)v619);
      if (v768[0])
      {
        int v705 = *(unsigned __int8 *)v768[0];
        if ((v705 - 4) > 0x1E)
        {
          if ((v705 - 3) >= 0xFFFFFFFE) {
            unsigned int v708 = v768[0];
          }
          else {
            unsigned int v708 = 0;
          }
          if ((v705 - 3) < 0xFFFFFFFE)
          {
            if (v705 == 3) {
              *((void *)v768[0] + 1) = 0;
            }
            goto LABEL_944;
          }
          unint64_t v707 = (unint64_t)v708 + 8;
        }
        else
        {
          if ((*((unsigned char *)v768[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v768[0] + 3)) {
            goto LABEL_944;
          }
          uint64_t v706 = *((void *)v768[0] + 2);
          if ((v706 & 4) == 0) {
            goto LABEL_944;
          }
          unint64_t v707 = v706 & 0xFFFFFFFFFFFFFFF8;
          if (!v707) {
            goto LABEL_944;
          }
        }
        uint64_t v805 = v768;
        sub_1CC5FA668(v707 + 16, &v805);
      }
LABEL_944:
      if (v617)
      {
        if ((*(unsigned char *)(v614 + 23) & 0x10) != 0)
        {
          uint64_t v620 = ***(void ***)v614;
          uint64_t v621 = *(void *)(v620 + 152);
          uint64_t v622 = *(unsigned int *)(v620 + 168);
          if (v622)
          {
            LODWORD(v623) = (v622 - 1) & ((v614 >> 4) ^ (v614 >> 9));
            int v624 = (uint64_t *)(v621 + 16 * v623);
            uint64_t v625 = *v624;
            if (*v624 != v614)
            {
              int v626 = 1;
              do
              {
                if (v625 == -4096) {
                  goto LABEL_953;
                }
                int v627 = v623 + v626++;
                uint64_t v623 = v627 & (v622 - 1);
                uint64_t v625 = *(void *)(v621 + 16 * v623);
              }
              while (v625 != v614);
              int v624 = (uint64_t *)(v621 + 16 * v623);
            }
          }
          else
          {
LABEL_953:
            int v624 = (uint64_t *)(v621 + 16 * v622);
          }
          unsigned int v629 = (llvm::MDNode **)v624[1];
          uint64_t v632 = *v629;
          unsigned int v631 = (llvm::MDNode *)(v629 + 2);
          BOOL v630 = v632;
        }
        else
        {
          BOOL v630 = 0;
          unsigned int v631 = (llvm::MDNode *)&byte_1CFBCE98E;
        }
        uint64_t v633 = *v617;
        __int16 v770 = 773;
        v768[0] = v631;
        v768[1] = v630;
        v769.i64[0] = (uint64_t)".sroa.cast";
        unint64_t v628 = (unsigned __int8 *)v614;
        if (*(void *)v614 != v633)
        {
          if (*(unsigned __int8 *)(v614 + 16) <= 0x14u)
          {
            unint64_t v628 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v801 + 224))(v801, 49, v614, v633);
            if (v628) {
              BOOL v636 = v628[16] >= 0x1Cu;
            }
            else {
              BOOL v636 = 0;
            }
            if (v636)
            {
              (*(void (**)(uint64_t, unsigned __int8 *, llvm::MDNode **, uint64_t **, void *))(*(void *)v802 + 16))(v802, v628, v768, v799, v800);
              if (v797)
              {
                uint64_t v709 = (llvm::MDNode **)v796;
                unint64_t v710 = (llvm::MDNode **)((char *)v796 + 16 * v797);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v628, *(_DWORD *)v709, v709[1]);
                  v709 += 2;
                }
                while (v709 != v710);
              }
            }
          }
          else
          {
            LOWORD(v808) = 257;
            unint64_t v628 = (unsigned __int8 *)llvm::CastInst::Create(49, v614, v633, (const char **)&v805, 0);
            (*(void (**)(uint64_t, unsigned __int8 *, llvm::MDNode **, uint64_t **, void *))(*(void *)v802 + 16))(v802, v628, v768, v799, v800);
            if (v797)
            {
              uint64_t v634 = (llvm::MDNode **)v796;
              unsigned int v635 = (llvm::MDNode **)((char *)v796 + 16 * v797);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v628, *(_DWORD *)v634, v634[1]);
                v634 += 2;
              }
              while (v634 != v635);
            }
          }
        }
        uint64_t v637 = *v617;
        if ((v615[23] & 0x10) != 0)
        {
          uint64_t v638 = ***(void ***)v615;
          uint64_t v639 = *(void *)(v638 + 152);
          uint64_t v640 = *(unsigned int *)(v638 + 168);
          if (v640)
          {
            LODWORD(v641) = (v640 - 1) & ((v615 >> 4) ^ (v615 >> 9));
            char v642 = (unsigned __int8 **)(v639 + 16 * v641);
            unint64_t v643 = *v642;
            if (*v642 != v615)
            {
              int v644 = 1;
              do
              {
                if (v643 == (unsigned __int8 *)-4096) {
                  goto LABEL_972;
                }
                int v645 = v641 + v644++;
                uint64_t v641 = v645 & (v640 - 1);
                unint64_t v643 = *(unsigned __int8 **)(v639 + 16 * v641);
              }
              while (v643 != v615);
              char v642 = (unsigned __int8 **)(v639 + 16 * v641);
            }
          }
          else
          {
LABEL_972:
            char v642 = (unsigned __int8 **)(v639 + 16 * v640);
          }
          uint64_t v646 = (llvm::MDNode **)v642[1];
          uint64_t v649 = *v646;
          int v648 = (llvm::MDNode *)(v646 + 2);
          uint64_t v647 = v649;
        }
        else
        {
          uint64_t v647 = 0;
          int v648 = (llvm::MDNode *)&byte_1CFBCE98E;
        }
        __int16 v770 = 773;
        v768[0] = v648;
        v768[1] = v647;
        v769.i64[0] = (uint64_t)".sroa.cast";
        if (*(void *)v615 != v637)
        {
          if (v615[16] <= 0x14u)
          {
            uint64_t v615 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v801 + 224))(v801, 49, v615, v637);
            if (v615) {
              BOOL v652 = v615[16] >= 0x1Cu;
            }
            else {
              BOOL v652 = 0;
            }
            if (v652)
            {
              (*(void (**)(uint64_t, unsigned __int8 *, llvm::MDNode **, uint64_t **, void *))(*(void *)v802 + 16))(v802, v615, v768, v799, v800);
              if (v797)
              {
                long long v711 = (llvm::MDNode **)v796;
                long long v712 = (llvm::MDNode **)((char *)v796 + 16 * v797);
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v615, *(_DWORD *)v711, v711[1]);
                  v711 += 2;
                }
                while (v711 != v712);
              }
            }
          }
          else
          {
            LOWORD(v808) = 257;
            uint64_t v615 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v615, v637, (const char **)&v805, 0);
            (*(void (**)(uint64_t, unsigned __int8 *, llvm::MDNode **, uint64_t **, void *))(*(void *)v802 + 16))(v802, v615, v768, v799, v800);
            if (v797)
            {
              unsigned int v650 = (llvm::MDNode **)v796;
              uint64_t v651 = (llvm::MDNode **)((char *)v796 + 16 * v797);
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v615, *(_DWORD *)v650, v650[1]);
                v650 += 2;
              }
              while (v650 != v651);
            }
          }
        }
      }
      else
      {
        unint64_t v628 = (unsigned __int8 *)v614;
      }
      uint64_t v653 = *v616;
      unsigned int v654 = v616 >> 4;
      if ((*((unsigned char *)v616 + 23) & 0x10) != 0)
      {
        uint64_t v655 = **v653;
        uint64_t v656 = *(void *)(v655 + 152);
        uint64_t v657 = *(unsigned int *)(v655 + 168);
        if (v657)
        {
          LODWORD(v658) = (v657 - 1) & (v654 ^ (v616 >> 9));
          unint64_t v659 = (uint64_t ****)(v656 + 16 * v658);
          unint64_t v660 = *v659;
          if (*v659 != v616)
          {
            int v661 = 1;
            do
            {
              if (v660 == (uint64_t ***)-4096) {
                goto LABEL_991;
              }
              int v662 = v658 + v661++;
              uint64_t v658 = v662 & (v657 - 1);
              unint64_t v660 = *(uint64_t ****)(v656 + 16 * v658);
            }
            while (v660 != v616);
            unint64_t v659 = (uint64_t ****)(v656 + 16 * v658);
          }
        }
        else
        {
LABEL_991:
          unint64_t v659 = (uint64_t ****)(v656 + 16 * v657);
        }
        unsigned int v663 = (llvm::MDNode **)v659[1];
        uint64_t v666 = *v663;
        unsigned int v665 = (llvm::MDNode *)(v663 + 2);
        unint64_t v664 = v666;
      }
      else
      {
        unint64_t v664 = 0;
        unsigned int v665 = (llvm::MDNode *)&byte_1CFBCE98E;
      }
      __int16 v770 = 773;
      v768[0] = v665;
      v768[1] = v664;
      v769.i64[0] = (uint64_t)".sroa.speculate.load.true";
      char v667 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v799[7][5] + 272), (llvm::Type *)v653, 1);
      __int16 v668 = operator new(0x60uLL);
      v668[13] = v668[13] & 0x38000000 | 1;
      long long v669 = (llvm::Instruction *)(v668 + 8);
      *(void *)__int16 v668 = 0;
      *((void *)v668 + 1) = 0;
      *((void *)v668 + 2) = 0;
      *((void *)v668 + 3) = v668 + 8;
      LOWORD(v808) = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v668 + 8), (uint64_t)v653, (uint64_t)v628, (const char **)&v805, 0, v667, 0);
      (*(void (**)(uint64_t, _DWORD *, llvm::MDNode **, uint64_t **, void *))(*(void *)v802 + 16))(v802, v668 + 8, v768, v799, v800);
      if (v797)
      {
        long long v701 = (llvm::MDNode **)v796;
        uint64_t v702 = (llvm::MDNode **)((char *)v796 + 16 * v797);
        do
        {
          llvm::Instruction::setMetadata(v669, *(_DWORD *)v701, v701[1]);
          v701 += 2;
        }
        while (v701 != v702);
      }
      uint64_t v670 = (llvm::Type *)*v616;
      if ((*((unsigned char *)v616 + 23) & 0x10) != 0)
      {
        uint64_t v671 = **(void **)v670;
        uint64_t v672 = *(void *)(v671 + 152);
        uint64_t v673 = *(unsigned int *)(v671 + 168);
        if (v673)
        {
          LODWORD(v674) = (v673 - 1) & (v654 ^ (v616 >> 9));
          int v675 = (uint64_t ****)(v672 + 16 * v674);
          uint64_t v676 = *v675;
          if (*v675 != v616)
          {
            int v677 = 1;
            do
            {
              if (v676 == (uint64_t ***)-4096) {
                goto LABEL_1001;
              }
              int v678 = v674 + v677++;
              uint64_t v674 = v678 & (v673 - 1);
              uint64_t v676 = *(uint64_t ****)(v672 + 16 * v674);
            }
            while (v676 != v616);
            int v675 = (uint64_t ****)(v672 + 16 * v674);
          }
        }
        else
        {
LABEL_1001:
          int v675 = (uint64_t ****)(v672 + 16 * v673);
        }
        uint64_t v679 = (llvm::MDNode **)v675[1];
        unsigned int v682 = *v679;
        uint64_t v681 = (llvm::MDNode *)(v679 + 2);
        uint64_t v680 = v682;
      }
      else
      {
        uint64_t v680 = 0;
        uint64_t v681 = (llvm::MDNode *)&byte_1CFBCE98E;
      }
      __int16 v770 = 773;
      v768[0] = v681;
      v768[1] = v680;
      v769.i64[0] = (uint64_t)".sroa.speculate.load.false";
      char v683 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v799[7][5] + 272), v670, 1);
      long long v684 = operator new(0x60uLL);
      v684[13] = v684[13] & 0x38000000 | 1;
      long long v685 = (llvm::Instruction *)(v684 + 8);
      *(void *)long long v684 = 0;
      *((void *)v684 + 1) = 0;
      *((void *)v684 + 2) = 0;
      *((void *)v684 + 3) = v684 + 8;
      LOWORD(v808) = 257;
      llvm::LoadInst::LoadInst((llvm::Value *)(v684 + 8), (uint64_t)v670, (uint64_t)v615, (const char **)&v805, 0, v683, 0);
      (*(void (**)(uint64_t, _DWORD *, llvm::MDNode **, uint64_t **, void *))(*(void *)v802 + 16))(v802, v684 + 8, v768, v799, v800);
      if (v797)
      {
        size_t v703 = (llvm::MDNode **)v796;
        unsigned int v704 = (llvm::MDNode **)((char *)v796 + 16 * v797);
        do
        {
          llvm::Instruction::setMetadata(v685, *(_DWORD *)v703, v703[1]);
          v703 += 2;
        }
        while (v703 != v704);
      }
      *((_WORD *)v668 + 25) = *((_WORD *)v668 + 25) & 0xFF81 | (2
                                                              * __clz(1 << ((unint64_t)*((unsigned __int16 *)v616
                                                                                                + 9) >> 1))) ^ 0x7E;
      *((_WORD *)v684 + 25) = *((_WORD *)v684 + 25) & 0xFF81 | (2
                                                              * __clz(1 << ((unint64_t)*((unsigned __int16 *)v616
                                                                                                + 9) >> 1))) ^ 0x7E;
      llvm::Instruction::getAAMetadata(v616, v768);
      if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)v768), (int32x4_t)vceqzq_s64(v769))))))
      {
        if (v768[0] || *((void *)v668 + 10) || (*((unsigned char *)v668 + 55) & 0x20) != 0)
        {
          llvm::Value::setMetadata((uint64_t ***)v669, 1, v768[0]);
          uint64_t v686 = v768[1];
          if (v768[1]) {
            goto LABEL_1009;
          }
        }
        else
        {
          uint64_t v686 = v768[1];
          if (v768[1]) {
            goto LABEL_1009;
          }
        }
        if (*((void *)v668 + 10) || (*((unsigned char *)v668 + 55) & 0x20) != 0) {
LABEL_1009:
        }
          llvm::Value::setMetadata((uint64_t ***)v669, 5, v686);
        if (v769.i64[0] || *((void *)v668 + 10) || (*((unsigned char *)v668 + 55) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v669, 7, (llvm::MDNode *)v769.i64[0]);
        }
        if (v769.i64[1] || *((void *)v668 + 10) || (*((unsigned char *)v668 + 55) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v669, 8, (llvm::MDNode *)v769.i64[1]);
        }
        if (v768[0] || *((void *)v684 + 10) || (*((unsigned char *)v684 + 55) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v685, 1, v768[0]);
        }
        if (v768[1] || *((void *)v684 + 10) || (*((unsigned char *)v684 + 55) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v685, 5, v768[1]);
        }
        if (v769.i64[0] || *((void *)v684 + 10) || (*((unsigned char *)v684 + 55) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v685, 7, (llvm::MDNode *)v769.i64[0]);
        }
        if (v769.i64[1] || *((void *)v684 + 10) || (*((unsigned char *)v684 + 55) & 0x20) != 0) {
          llvm::Value::setMetadata((uint64_t ***)v685, 8, (llvm::MDNode *)v769.i64[1]);
        }
      }
      size_t v687 = (llvm::Value *)*((void *)v753 - 12);
      if ((*((unsigned char *)v616 + 23) & 0x10) != 0)
      {
        uint64_t v688 = ***v616;
        uint64_t v689 = *(void *)(v688 + 152);
        uint64_t v690 = *(unsigned int *)(v688 + 168);
        if (v690)
        {
          LODWORD(v691) = (v690 - 1) & (v654 ^ (v616 >> 9));
          unsigned int v692 = (uint64_t ****)(v689 + 16 * v691);
          uint64_t v693 = *v692;
          if (*v692 != v616)
          {
            int v694 = 1;
            do
            {
              if (v693 == (uint64_t ***)-4096) {
                goto LABEL_1039;
              }
              int v695 = v691 + v694++;
              uint64_t v691 = v695 & (v690 - 1);
              uint64_t v693 = *(uint64_t ****)(v689 + 16 * v691);
            }
            while (v693 != v616);
            unsigned int v692 = (uint64_t ****)(v689 + 16 * v691);
          }
        }
        else
        {
LABEL_1039:
          unsigned int v692 = (uint64_t ****)(v689 + 16 * v690);
        }
        long long v696 = v692[1];
        uint64_t v699 = (uint64_t)*v696;
        uint64_t v698 = (char *)(v696 + 2);
        uint64_t v697 = v699;
      }
      else
      {
        uint64_t v697 = 0;
        uint64_t v698 = &byte_1CFBCE98E;
      }
      LOWORD(v808) = 773;
      uint64_t v805 = v698;
      v806.i64[0] = v697;
      v806.i64[1] = (uint64_t)".sroa.speculated";
      uint64_t v700 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v796, v687, v669, v685, (const llvm::Twine *)&v805, 0);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v616, v700, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    LOBYTE(v15) = v740;
  }
LABEL_1102:
  if (v782 != v733) {
    free(v782);
  }
  if (v779 != __p) {
    free(v779);
  }
  if (v776 != v737) {
    free(v776);
  }
  if (v773 != v738) {
    free(v773);
  }
  if (v789 != v788) {
    free(v789);
  }
  if (v785 != v787) {
    free(v785);
  }
  if (v804 < 0) {
    operator delete(v803);
  }
  if (v796 != &v798) {
    free(v796);
  }
  return v15 & 1;
}