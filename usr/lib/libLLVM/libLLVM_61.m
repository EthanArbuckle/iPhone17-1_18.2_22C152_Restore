llvm::raw_ostream **sub_1CD5DD07C(llvm::raw_ostream *a1, llvm::Twine *a2, const llvm::Module ***a3, llvm::Metadata **a4)
{
  llvm::raw_ostream **result;
  llvm::Metadata *v8;
  uint64_t vars8;

  result = (llvm::raw_ostream **)sub_1CD5DC588(a1, a2);
  if (*(void *)a1)
  {
    sub_1CD5DD0EC(a1, *a3);
    v8 = *a4;
    return sub_1CD5DC50C((llvm::raw_ostream **)a1, v8);
  }
  return result;
}

llvm::raw_ostream *sub_1CD5DD0EC(llvm::raw_ostream *result, const llvm::Module **this)
{
  if (this)
  {
    v2 = result;
    llvm::NamedMDNode::print(this, *(llvm::raw_ostream **)result, (llvm::raw_ostream *)((char *)result + 16), 0);
    result = *(llvm::raw_ostream **)v2;
    v3 = *(unsigned char **)(*(void *)v2 + 32);
    if ((unint64_t)v3 >= *(void *)(*(void *)v2 + 24))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((void *)result + 4) = v3 + 1;
      unsigned char *v3 = 10;
    }
  }
  return result;
}

uint64_t sub_1CD5DD168(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1CC64E380(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      uint64_t *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1CD5DD218(char **a1, long long *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)qword_1EBCD8F88, 0, 0);
  byte_1EBCD9008 = 0;
  qword_1EBCD9010 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCD9018 = 0;
  qword_1EBCD8F88[0] = (uint64_t)&unk_1F26440A0;
  qword_1EBCD9020 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCD9028 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCD9040 = (uint64_t)&qword_1EBCD9028;
  llvm::cl::Option::setArgStr(v4, "enable-swifttailcc-musttail-check", 0x21uLL);
  uint64_t v5 = *a1;
  byte_1EBCD9008 = **a1;
  byte_1EBCD9019 = 1;
  byte_1EBCD9018 = *v5;
  xmmword_1EBCD8FA8 = *a2;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCD8F88);
}

void sub_1CD5DD328(llvm::raw_ostream **a1, llvm::Value *a2, llvm::Metadata **a3, llvm::APInt **a4)
{
  if (a2) {
    sub_1CD5DBED0(a1, a2);
  }
  sub_1CD5DC50C(a1, *a3);
  v7 = *a4;

  sub_1CD5DD388(a1, v7);
}

void sub_1CD5DD388(llvm::raw_ostream **a1, llvm::APInt *this)
{
  if (this)
  {
    v2 = *a1;
    llvm::APInt::print(this, *a1, 1);
    v3 = (unsigned char *)*((void *)v2 + 4);
    if ((unint64_t)v3 >= *((void *)v2 + 3))
    {
      llvm::raw_ostream::write(v2, 10);
    }
    else
    {
      *((void *)v2 + 4) = v3 + 1;
      unsigned char *v3 = 10;
    }
  }
}

llvm::raw_ostream *sub_1CD5DD3FC(llvm::raw_ostream **a1, llvm::Value *a2, llvm::Metadata **a3, unsigned int *a4, unsigned int *a5)
{
  if (a2) {
    sub_1CD5DBED0(a1, a2);
  }
  sub_1CD5DC50C(a1, *a3);
  sub_1CD5DC7D0(*a1, *a4);
  unsigned int v9 = *a5;
  v10 = *a1;

  return sub_1CD5DC7D0(v10, v9);
}

uint64_t llvm::coverage::CounterExpressionBuilder::get(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = a1 + 24;
  uint64_t v4 = *(void *)(a1 + 24);
  v12 = 0;
  if (sub_1CD5DDE00(v4, *(_DWORD *)(v5 + 16), a2, &v12)) {
    BOOL v6 = v12 == (int *)(*(void *)v5 + 24 * *(unsigned int *)(v5 + 16));
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - *(void *)a1) >> 2);
    if (v9 >= *(void *)(a1 + 16))
    {
      v11 = sub_1CC3CE454((void **)a1, (uint64_t)a2);
    }
    else
    {
      long long v10 = *(_OWORD *)a2;
      *(_DWORD *)(v9 + 16) = a2[4];
      *(_OWORD *)unint64_t v9 = v10;
      v11 = (char *)(v9 + 20);
    }
    *(void *)(a1 + 8) = v11;
    sub_1CD5DE138(v5, a2)[5] = v7;
  }
  else
  {
    unint64_t v7 = v12[5];
  }
  return (v7 << 32) | 2;
}

unint64_t llvm::coverage::CounterExpressionBuilder::simplify(uint64_t a1, unint64_t a2)
{
  v27[32] = *MEMORY[0x1E4F143B8];
  v25 = v27;
  uint64_t v26 = 0x2000000000;
  llvm::coverage::CounterExpressionBuilder::extractTerms(a1, a2, 1, (uint64_t)&v25);
  v3 = (unsigned int *)v25;
  if (v26)
  {
    sub_1CC658504((uint64_t *)v25, (uint64_t *)v25 + v26, 126 - 2 * __clz(v26), 1);
    v3 = (unsigned int *)v25;
    uint64_t v4 = v25;
    if (v26 != 1)
    {
      uint64_t v5 = (char *)v25 + 8;
      LODWORD(v6) = *(_DWORD *)v25;
      uint64_t v7 = 8 * v26 - 8;
      uint64_t v4 = v25;
      do
      {
        if (*(_DWORD *)v5 == v6)
        {
          v4[1] += *((_DWORD *)v5 + 1);
        }
        else
        {
          uint64_t v6 = *(void *)v5;
          *((void *)v4 + 1) = *(void *)v5;
          v4 += 2;
        }
        v5 += 8;
        v7 -= 8;
      }
      while (v7);
    }
    unint64_t v8 = (unint64_t)((char *)v4 - (char *)v3 + 8) >> 3;
    LODWORD(v26) = v8;
    if (v8)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      v11 = &v3[2 * v8];
      do
      {
        int v12 = v3[1];
        if (v12 >= 1)
        {
          unint64_t v13 = *v3;
          unint64_t v14 = v10;
          do
          {
            unint64_t v10 = v13;
            LODWORD(v15) = 1;
            if (v9)
            {
              int v22 = 1;
              unint64_t v23 = v9 | (v14 << 32);
              uint64_t v24 = (v13 << 32) | 1;
              unint64_t v15 = llvm::coverage::CounterExpressionBuilder::get(a1, &v22);
              unint64_t v10 = HIDWORD(v15);
            }
            uint64_t v9 = v15;
            unint64_t v14 = v10;
            --v12;
          }
          while (v12);
        }
        v3 += 2;
      }
      while (v3 != v11);
      v3 = (unsigned int *)v25;
      LODWORD(v8) = v26;
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v9 = 0;
    }
    if (v8)
    {
      v16 = &v3[2 * v8];
      do
      {
        unsigned int v17 = v3[1];
        if ((v17 & 0x80000000) != 0)
        {
          unint64_t v18 = ((unint64_t)*v3 << 32) | 1;
          if ((signed int)-v17 > 1) {
            int v19 = -v17;
          }
          else {
            int v19 = 1;
          }
          do
          {
            int v22 = 0;
            unint64_t v23 = v9 | (v10 << 32);
            uint64_t v24 = v18;
            unint64_t v20 = llvm::coverage::CounterExpressionBuilder::get(a1, &v22);
            uint64_t v9 = v20;
            unint64_t v10 = HIDWORD(v20);
            --v19;
          }
          while (v19);
        }
        v3 += 2;
      }
      while (v3 != v16);
      v3 = (unsigned int *)v25;
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  if (v3 != (unsigned int *)v27) {
    free(v3);
  }
  return v9 | (v10 << 32);
}

uint64_t llvm::coverage::CounterExpressionBuilder::add(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = 1;
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  uint64_t result = llvm::coverage::CounterExpressionBuilder::get(a1, &v7);
  if (a4)
  {
    return llvm::coverage::CounterExpressionBuilder::simplify(a1, result);
  }
  return result;
}

uint64_t llvm::coverage::CounterExpressionBuilder::subtract(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = 0;
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  uint64_t result = llvm::coverage::CounterExpressionBuilder::get(a1, &v7);
  if (a4)
  {
    return llvm::coverage::CounterExpressionBuilder::simplify(a1, result);
  }
  return result;
}

void *llvm::coverage::CounterMappingContext::evaluate@<X0>(void *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  v3 = result;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*a2 == 2)
  {
    unint64_t v8 = a2[1];
    if (result[1] > v8)
    {
      uint64_t v9 = *result;
      unint64_t v10 = (_DWORD *)(*result + 20 * v8);
      uint64_t result = llvm::coverage::CounterMappingContext::evaluate(&v14, result, v10 + 1);
      if (v15)
      {
        *(unsigned char *)(a3 + 8) = *(unsigned char *)(a3 + 8) & 0xFE | v15 & 1;
        uint64_t v7 = v14;
      }
      else
      {
        uint64_t result = llvm::coverage::CounterMappingContext::evaluate(&v12, v3, v9 + 20 * v8 + 12);
        if (v13)
        {
          *(unsigned char *)(a3 + 8) |= 1u;
          uint64_t v7 = v12;
        }
        else
        {
          if (*v10) {
            uint64_t v11 = v12;
          }
          else {
            uint64_t v11 = -v12;
          }
          uint64_t v7 = v11 + v14;
          *(unsigned char *)(a3 + 8) &= ~1u;
        }
      }
      goto LABEL_5;
    }
  }
  else
  {
    if (*a2 != 1)
    {
      *(unsigned char *)(a3 + 8) &= ~1u;
      *(void *)a3 = 0;
      return result;
    }
    unint64_t v5 = a2[1];
    if (result[3] > v5)
    {
      uint64_t v6 = result[2];
      *(unsigned char *)(a3 + 8) &= ~1u;
      uint64_t v7 = *(void *)(v6 + 8 * v5);
LABEL_5:
      *(void *)a3 = v7;
      return result;
    }
  }
  *(void *)&v17.__val_ = std::generic_category();
  uint64_t result = (void *)llvm::errorCodeToError((llvm *)0x21, v17, (void *)a3);
  *(unsigned char *)(a3 + 8) |= 1u;
  return result;
}

uint64_t sub_1CD5DD9F0(void **a1)
{
  unsigned int v5 = 0;
  v1 = *a1;
  *a1 = 0;
  v3 = &v5;
  uint64_t v4 = v1;
  sub_1CC654BAC(&v4, &v3);
  if (v4) {
    (*(void (**)(void *))(*v4 + 8))(v4);
  }
  return v5;
}

double llvm::coverage::CoverageMapError::message@<D0>(llvm::coverage::CoverageMapError *this@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return sub_1CC654970(a2, *((_DWORD *)this + 2), a3);
}

void sub_1CD5DDA6C()
{
}

void sub_1CD5DDA80(uint64_t a1, llvm::raw_ostream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 24))(__p);
  if (v6 >= 0) {
    v3 = __p;
  }
  else {
    v3 = (void **)__p[0];
  }
  if (v6 >= 0) {
    size_t v4 = v6 & 0x7F;
  }
  else {
    size_t v4 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(a2, (const char *)v3, v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_1CD5DDB08(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if (!atomic_load_explicit(&qword_1EA61BF28, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EA61BF28, (void *(*)(void))sub_1CC659778, (void (*)(void *))sub_1CC6597C0);
  }
  return v1;
}

void *sub_1CD5DDB70()
{
  return &llvm::coverage::CoverageMapError::ID;
}

BOOL sub_1CD5DDB7C(uint64_t a1, void *a2)
{
  return a2 == &llvm::coverage::CoverageMapError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void **sub_1CD5DDB9C@<X0>(void **result@<X0>, _DWORD **a2@<X1>, void *a3@<X8>)
{
  size_t v4 = *result;
  if (*result)
  {
    *uint64_t result = 0;
    if ((*(unsigned int (**)(void *, void *))(*v4 + 48))(v4, &llvm::ErrorList::ID))
    {
      *a3 = 0;
      char v6 = (char **)v4[1];
      uint64_t v7 = (char **)v4[2];
      if (v6 != v7)
      {
        unint64_t v8 = 0;
        do
        {
          uint64_t v12 = v8;
          uint64_t v9 = *v6;
          *char v6 = 0;
          if ((*(unsigned int (**)(char *, void *))(*(void *)v9 + 48))(v9, &llvm::InstrProfError::ID))
          {
            **a2 = *((_DWORD *)v9 + 2);
            (*(void (**)(char *))(*(void *)v9 + 8))(v9);
            uint64_t v9 = 0;
          }
          uint64_t v11 = v9;
          sub_1CD451630(&v12, &v11, &v13);
          unint64_t v8 = v13;
          *a3 = v13;
          char v13 = 0;
          if (v11) {
            (*(void (**)(char *))(*(void *)v11 + 8))(v11);
          }
          if (v12) {
            (*(void (**)(char *))(*(void *)v12 + 8))(v12);
          }
          ++v6;
        }
        while (v6 != v7);
      }
      return (void **)(*(uint64_t (**)(void *))(*v4 + 8))(v4);
    }
    else
    {
      uint64_t result = (void **)(*(uint64_t (**)(void *, void *))(*v4 + 48))(v4, &llvm::InstrProfError::ID);
      if (result)
      {
        **a2 = *((_DWORD *)v4 + 2);
        *a3 = 0;
        unint64_t v10 = *(uint64_t (**)(void *))(*v4 + 8);
        return (void **)v10(v4);
      }
      else
      {
        *a3 = v4;
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t sub_1CD5DDE00(uint64_t a1, int a2, _DWORD *a3, int **a4)
{
  if (!a2)
  {
    unsigned int v5 = 0;
    uint64_t result = 0;
    goto LABEL_3;
  }
  int v10 = a3[1];
  int v27 = a3[2];
  int v28 = v10;
  int v11 = a3[3];
  int v25 = a3[4];
  int v26 = v11;
  int v12 = sub_1CD5DDF58(a3, &v28, &v27, &v26, &v25);
  char v13 = 0;
  unsigned int v14 = (a2 - 1) & v12;
  for (int i = 1; ; ++i)
  {
    unsigned int v5 = (int *)(a1 + 24 * v14);
    int v16 = *v5;
    if (*a3 == *v5 && a3[1] == v5[1] && a3[2] == v5[2] && a3[3] == v5[3] && a3[4] == v5[4])
    {
      uint64_t result = 1;
      goto LABEL_3;
    }
    if (v16 != 1) {
      break;
    }
    if (v5[1] == 1 && v5[2] == -1)
    {
      BOOL v22 = v5[3] == 1 && v5[4] == -1;
      goto LABEL_32;
    }
LABEL_31:
    BOOL v22 = 0;
LABEL_32:
    if (v22 && v13 == 0) {
      char v13 = (int *)(a1 + 24 * v14);
    }
    unsigned int v23 = v14 + i;
    unsigned int v14 = v23 & (a2 - 1);
  }
  if (v16) {
    goto LABEL_31;
  }
  if (v5[1] != 1 || v5[2] != -1) {
    goto LABEL_31;
  }
  if (v5[3] != 1 || v5[4] != -1) {
    goto LABEL_31;
  }
  uint64_t result = 0;
  if (v13) {
    unsigned int v5 = v13;
  }
LABEL_3:
  *a4 = v5;
  return result;
}

unint64_t sub_1CD5DDF58(_DWORD *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  uint64_t v14 = sub_1CBF65470();
  LODWORD(v11[0]) = *a1;
  return sub_1CD5DE024(v11, (_DWORD *)v11 + 1, (char *)v12, *a2, a3, a4, a5);
}

unint64_t sub_1CD5DE024(void *a1, _DWORD *__dst, char *a3, int a4, int *a5, int *a6, int *a7)
{
  uint64_t v15 = 0;
  int v12 = sub_1CC0AC9D0(a1, &v15, __dst, (unint64_t)a3, a4);
  uint64_t v16 = v15;
  uint64_t v13 = sub_1CC0AC9D0(a1, &v16, v12, (unint64_t)a3, *a5);
  return sub_1CD5DE0C0(a1, v16, v13, a3, *a6, a7);
}

unint64_t sub_1CD5DE0C0(void *a1, uint64_t a2, _DWORD *a3, char *a4, int a5, int *a6)
{
  uint64_t v12 = a2;
  uint64_t v9 = sub_1CC0AC9D0(a1, &v12, a3, (unint64_t)a4, a5);
  uint64_t v13 = v12;
  int v10 = (char *)sub_1CC0AC9D0(a1, &v13, v9, (unint64_t)a4, *a6);
  return sub_1CC36B0E4((uint64_t)a1, v13, v10, a4);
}

int *sub_1CD5DE138(uint64_t a1, _DWORD *a2)
{
  unint64_t v8 = 0;
  char v4 = sub_1CD5DDE00(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  unsigned int v5 = v8;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = sub_1CD5DE1AC(a1, a2, v8);
    unsigned int v7 = a2[4];
    *(_OWORD *)unsigned int v5 = *(_OWORD *)a2;
    *((void *)v5 + 2) = v7;
  }
  return v5;
}

int *sub_1CD5DE1AC(uint64_t a1, _DWORD *a2, int *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_18;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_18:
    sub_1CD5DE280(a1, v6);
    int v10 = 0;
    sub_1CD5DDE00(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v10);
    a3 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 || (a3[1] == 1 ? (BOOL v8 = a3[2] == -1) : (BOOL v8 = 0), !v8 || (a3[3] == 1 ? (v9 = a3[4] == -1) : (v9 = 0), !v9))) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

char *sub_1CD5DE280(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  char v4 = *(_DWORD **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(24 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5DE364(a1, v4, &v4[6 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    int v11 = &result[24 * v10];
    int64x2_t v12 = vdupq_n_s64(0xFFFFFFFF00000001);
    do
    {
      *(_DWORD *)uint64_t result = 0;
      *(int64x2_t *)(result + 4) = v12;
      result += 24;
    }
    while (result != v11);
  }
  return result;
}

uint64_t sub_1CD5DE364(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  unsigned int v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)result;
    uint64_t v8 = *(void *)result + 24 * v6;
    int64x2_t v9 = vdupq_n_s64(0xFFFFFFFF00000001);
    do
    {
      *(_DWORD *)uint64_t v7 = 0;
      *(int64x2_t *)(v7 + 4) = v9;
      v7 += 24;
    }
    while (v7 != v8);
  }
  while (a2 != a3)
  {
    if (*a2 > 1u
      || (a2[1] == 1 ? (BOOL v10 = a2[2] == -1) : (BOOL v10 = 0), !v10 || (a2[3] == 1 ? (v11 = a2[4] == -1) : (v11 = 0), !v11)))
    {
      uint64_t v14 = 0;
      uint64_t result = sub_1CD5DDE00(*(void *)v5, *(_DWORD *)(v5 + 16), a2, &v14);
      int64x2_t v12 = v14;
      long long v13 = *(_OWORD *)a2;
      v14[4] = a2[4];
      *(_OWORD *)int64x2_t v12 = v13;
      v12[5] = a2[5];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 6;
  }
  return result;
}

void llvm::coverage::CoverageFilenamesSectionWriter::write(llvm::coverage::CoverageFilenamesSectionWriter *this, llvm::raw_ostream *a2, char a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  __p = 0;
  unint64_t v23 = 0;
  v26[0] = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  p_p = &__p;
  int v30 = 0;
  uint64_t v24 = 0;
  int v25 = &unk_1F2646F30;
  *(void *)&v26[2] = 0;
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    uint64_t v7 = *(void *)this;
    uint64_t v8 = 24 * v6;
    do
    {
      if (*(char *)(v7 + 23) < 0) {
        unint64_t v9 = *(void *)(v7 + 8);
      }
      else {
        unint64_t v9 = *(unsigned __int8 *)(v7 + 23);
      }
      sub_1CC659844(v9, (llvm::raw_ostream *)&v25, 0);
      char v10 = *(unsigned char *)(v7 + 23);
      BOOL v11 = v10 < 0;
      if (v10 >= 0) {
        int64x2_t v12 = (const char *)v7;
      }
      else {
        int64x2_t v12 = *(const char **)v7;
      }
      size_t v13 = v10 & 0x7F;
      if (v11) {
        size_t v14 = *(void *)(v7 + 8);
      }
      else {
        size_t v14 = v13;
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v25, v12, v14);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v25);
  int v25 = v27;
  *(_OWORD *)int v26 = xmmword_1CFAC3020;
  if ((a3 & 1) != 0 && llvm::zlib::isAvailable(v15) && byte_1EBD0AC28)
  {
    if (v24 >= 0) {
      uint64_t v16 = &__p;
    }
    else {
      uint64_t v16 = __p;
    }
    if (v24 >= 0) {
      unint64_t v17 = HIBYTE(v24) & 0x7F;
    }
    else {
      unint64_t v17 = v23;
    }
    llvm::zlib::compress(v16, v17, &v25, 9);
  }
  sub_1CC659844(*((void *)this + 1), a2, 0);
  if (v24 >= 0) {
    unint64_t v18 = HIBYTE(v24) & 0x7F;
  }
  else {
    unint64_t v18 = v23;
  }
  sub_1CC659844(v18, a2, 0);
  sub_1CC659844(0, a2, 0);
  if (v24 >= 0) {
    int v19 = &__p;
  }
  else {
    int v19 = __p;
  }
  if (v24 >= 0) {
    size_t v20 = HIBYTE(v24) & 0x7F;
  }
  else {
    size_t v20 = v23;
  }
  v21 = (void *)*((void *)a2 + 4);
  if (v20 <= *((void *)a2 + 3) - (void)v21)
  {
    if (v20)
    {
      memcpy(v21, v19, v20);
      *((void *)a2 + 4) += v20;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v19, v20);
  }
  if (v25 != v27) {
    free(v25);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
}

void llvm::coverage::CoverageMappingWriter::write(llvm::coverage::CoverageMappingWriter *this, llvm::raw_ostream *a2, __n128 a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (__n128 *)*((void *)this + 4);
  int64_t v5 = *((void *)this + 5);
  if (v5 < 129)
  {
LABEL_5:
    sub_1CC659A8C(v6, (__n128 *)((char *)v6 + 44 * v5), v5, 0, 0, a3);
  }
  else
  {
    uint64_t v7 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v8 = *((void *)this + 5);
    while (1)
    {
      unint64_t v9 = operator new(44 * v8, v7);
      if (v9) {
        break;
      }
      BOOL v10 = v8 > 1;
      v8 >>= 1;
      if (!v10) {
        goto LABEL_5;
      }
    }
    v42 = v9;
    sub_1CC659A8C(v6, (__n128 *)((char *)v6 + 44 * v5), v5, (uint64_t)v9, v8, a3);
    operator delete(v42);
  }
  sub_1CC659844(*((void *)this + 1), a2, 0);
  uint64_t v11 = *((void *)this + 1);
  if (v11)
  {
    int64x2_t v12 = *(unsigned int **)this;
    uint64_t v13 = 4 * v11;
    do
    {
      unsigned int v14 = *v12++;
      sub_1CC659844(v14, a2, 0);
      v13 -= 4;
    }
    while (v13);
  }
  unint64_t v15 = *((void *)this + 3);
  uint64_t v16 = (unint64_t *)*((void *)this + 4);
  uint64_t v17 = *((void *)this + 5);
  v45[0] = *((void *)this + 2);
  v45[1] = v15;
  v46 = v48;
  *(void *)v47 = 0x1000000000;
  v50 = 0;
  uint64_t v51 = 0;
  v49 = 0;
  int v44 = 0;
  if (v15) {
    sub_1CC2DC07C((uint64_t)&v49, v15, &v44);
  }
  if (v17)
  {
    unint64_t v18 = (unint64_t *)((char *)v16 + 44 * v17);
    int v19 = v16;
    do
    {
      sub_1CC659970(v45, *v19);
      sub_1CC659970(v45, v19[1]);
      int v19 = (unint64_t *)((char *)v19 + 44);
    }
    while (v19 != v18);
    do
    {
      sub_1CC6599E4((uint64_t)v45, *v16);
      sub_1CC6599E4((uint64_t)v45, v16[1]);
      uint64_t v16 = (unint64_t *)((char *)v16 + 44);
    }
    while (v16 != v18);
  }
  size_t v20 = (char *)v46;
  uint64_t v21 = v47[0];
  sub_1CC659844(v47[0], a2, 0);
  if (v21)
  {
    uint64_t v22 = 20 * v21;
    unint64_t v23 = (uint64_t *)(v20 + 12);
    do
    {
      unint64_t v24 = *(v23 - 1);
      unint64_t v25 = HIDWORD(v24);
      if (v24 == 2)
      {
        LODWORD(v25) = v49[v25];
        LODWORD(v24) = *(_DWORD *)&v20[20 * v25] + 2;
      }
      sub_1CC659844(v24 | (4 * v25), a2, 0);
      uint64_t v26 = *v23;
      unint64_t v27 = HIDWORD(*v23);
      if (*v23 == 2)
      {
        LODWORD(v27) = v49[v27];
        LODWORD(v26) = *(_DWORD *)&v20[20 * v27] + 2;
      }
      sub_1CC659844(v26 | (4 * v27), a2, 0);
      unint64_t v23 = (uint64_t *)((char *)v23 + 20);
      v22 -= 20;
    }
    while (v22);
  }
  v43 = v20;
  uint64_t v28 = *((void *)this + 5);
  if (v28)
  {
    int v29 = 0;
    int v30 = (uint64_t *)*((void *)this + 4);
    v31 = (uint64_t *)((char *)v30 + 44 * v28);
    uint64_t v32 = 44 * v28 - 44;
    int v33 = -1;
    do
    {
      int v34 = *((_DWORD *)v30 + 4);
      if (v34 != v33)
      {
        if ((uint64_t *)((char *)v30 + 44) == v31)
        {
          unsigned int v36 = 1;
        }
        else
        {
          uint64_t v35 = 0;
          unsigned int v36 = 1;
          do
          {
            if (v34 != *(_DWORD *)((char *)v30 + v35 + 60)) {
              break;
            }
            ++v36;
            v35 += 44;
          }
          while (v32 != v35);
        }
        sub_1CC659844(v36, a2, 0);
        int v29 = 0;
        int v33 = *((_DWORD *)v30 + 4);
      }
      uint64_t v37 = *v30;
      unint64_t v38 = HIDWORD(*v30);
      if (*v30 == 2)
      {
        LODWORD(v38) = v49[v38];
        LODWORD(v37) = 2;
      }
      unint64_t v39 = v30[1];
      unint64_t v40 = HIDWORD(v39);
      if (v39 == 2)
      {
        LODWORD(v40) = v49[v40];
        LODWORD(v39) = 2;
      }
      unsigned int v41 = 16;
      switch(*((_DWORD *)v30 + 10))
      {
        case 0:
        case 3:
          if (v37 == 2) {
            LODWORD(v37) = *(_DWORD *)&v43[20 * v38] + 2;
          }
          unsigned int v41 = v37 | (4 * v38);
          goto LABEL_43;
        case 1:
          unsigned int v41 = (8 * *((_DWORD *)v30 + 5)) | 4;
          goto LABEL_43;
        case 2:
          goto LABEL_43;
        case 4:
          sub_1CC659844(0x20uLL, a2, 0);
          if (v37 == 2) {
            LODWORD(v37) = *(_DWORD *)&v43[20 * v38] + 2;
          }
          sub_1CC659844(v37 | (4 * v38), a2, 0);
          if (v39 == 2) {
            LODWORD(v39) = *(_DWORD *)&v43[20 * v40] + 2;
          }
          unsigned int v41 = v39 | (4 * v40);
LABEL_43:
          sub_1CC659844(v41, a2, 0);
          break;
        default:
          break;
      }
      sub_1CC659844((*((_DWORD *)v30 + 6) - v29), a2, 0);
      sub_1CC659844(*((unsigned int *)v30 + 7), a2, 0);
      sub_1CC659844((*((_DWORD *)v30 + 8) - *((_DWORD *)v30 + 6)), a2, 0);
      sub_1CC659844(*((unsigned int *)v30 + 9), a2, 0);
      int v29 = *((_DWORD *)v30 + 6);
      int v30 = (uint64_t *)((char *)v30 + 44);
      v32 -= 44;
    }
    while (v30 != v31);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v46 != v48) {
    free(v46);
  }
}

unint64_t sub_1CD5DEBA8(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 20 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

char **llvm::coverage::RawCoverageReader::readULEB128@<X0>(char **this@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = (unint64_t)this[1];
  if (!v4) {
    operator new();
  }
  unint64_t v5 = 0;
  unsigned int v6 = 0;
  uint64_t v7 = *this;
  unint64_t v8 = *this;
  while (v8)
  {
    char v9 = *v8;
    uint64_t v10 = *v8 & 0x7F;
    if (v6 >= 0x40 && (*v8 & 0x7F) != 0) {
      break;
    }
    if ((unint64_t)(v10 << v6) >> v6 != v10) {
      break;
    }
    v5 += v10 << v6;
    v6 += 7;
    ++v8;
    if ((v9 & 0x80) == 0) {
      goto LABEL_10;
    }
  }
  unint64_t v5 = 0;
LABEL_10:
  unint64_t v11 = (v8 - v7);
  *a2 = v5;
  if (v4 < v11) {
    operator new();
  }
  *this = &v7[v11];
  this[1] = (char *)(v4 - v11);
  *a3 = 0;
  return this;
}

char **llvm::coverage::RawCoverageReader::readIntMax@<X0>(char **this@<X0>, unint64_t *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = llvm::coverage::RawCoverageReader::readULEB128(this, a2, a4);
  if (!*a4)
  {
    if (*a2 >= a3) {
      operator new();
    }
    uint64_t result = 0;
    *a4 = 0;
  }
  return result;
}

char **llvm::coverage::RawCoverageReader::readSize@<X0>(char **this@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = llvm::coverage::RawCoverageReader::readULEB128(this, a2, a3);
  if (!*a3)
  {
    if (*a2 > (unint64_t)this[1]) {
      operator new();
    }
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::coverage::RawCoverageMappingReader::decodeCounter@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unint64_t *a3@<X2>, void *a4@<X8>)
{
  if ((a2 & 3) == 1)
  {
    uint64_t result = 0;
    unint64_t v6 = a2 >> 2;
    uint64_t v7 = 1;
LABEL_5:
    *a3 = v7 | (v6 << 32);
    goto LABEL_6;
  }
  if ((a2 & 3) != 0)
  {
    unint64_t v6 = a2 >> 2;
    uint64_t v8 = **(void **)(a1 + 32);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a1 + 32) + 8) - v8) >> 2) <= v6) {
      operator new();
    }
    uint64_t result = 0;
    *(_DWORD *)(v8 + 20 * v6) = (a2 & 3) - 2;
    uint64_t v7 = 2;
    goto LABEL_5;
  }
  uint64_t result = 0;
  *a3 = 0;
LABEL_6:
  *a4 = 0;
  return result;
}

uint64_t llvm::coverage::RawCoverageMappingReader::readCounter@<X0>(char **a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v7 = 0;
  uint64_t result = (uint64_t)llvm::coverage::RawCoverageReader::readIntMax(a1, &v7, 0xFFFFFFFFuLL, a3);
  if (!*a3)
  {
    uint64_t result = llvm::coverage::RawCoverageMappingReader::decodeCounter((uint64_t)a1, v7, a2, a3);
    if (!*a3) {
      *a3 = 0;
    }
  }
  return result;
}

void llvm::coverage::RawCoverageMappingReader::read(llvm::coverage::RawCoverageMappingReader *this@<X0>, void *a2@<X8>)
{
  v38[4] = *MEMORY[0x1E4F143B8];
  unsigned int v36 = v38;
  uint64_t v37 = 0x800000000;
  unint64_t v33 = 0;
  llvm::coverage::RawCoverageReader::readSize((char **)this, &v33, a2);
  if (*a2) {
    goto LABEL_2;
  }
  unint64_t v4 = v33;
  if (v33)
  {
    while (1)
    {
      v34[0] = 0;
      llvm::coverage::RawCoverageReader::readIntMax((char **)this, (unint64_t *)v34, *(void *)(*((void *)this + 2) + 8), a2);
      if (*a2) {
        break;
      }
      if (v37 >= (unint64_t)HIDWORD(v37)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v36 + v37) = v34[0];
      unsigned int v5 = v37 + 1;
      LODWORD(v37) = v37 + 1;
      if (!--v4) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    unsigned int v5 = v37;
LABEL_11:
    if (v5)
    {
      unint64_t v6 = (unsigned int *)v36;
      uint64_t v7 = 4 * v5;
      do
      {
        uint64_t v8 = *((void *)this + 3);
        uint64_t v9 = **((void **)this + 2) + 24 * *v6;
        if (*(char *)(v9 + 23) >= 0) {
          uint64_t v10 = (void *)(**((void **)this + 2) + 24 * *v6);
        }
        else {
          uint64_t v10 = *(void **)v9;
        }
        v34[0] = v10;
        char v11 = *(unsigned char *)(v9 + 23);
        int v12 = v11;
        uint64_t v13 = *(void **)(v9 + 8);
        unsigned int v14 = (void *)(v11 & 0x7F);
        if (v12 >= 0) {
          uint64_t v13 = v14;
        }
        v34[1] = v13;
        unint64_t v15 = *(_OWORD **)(v8 + 8);
        if ((unint64_t)v15 >= *(void *)(v8 + 16))
        {
          uint64_t v16 = sub_1CC016940((void **)v8, v34);
        }
        else
        {
          *unint64_t v15 = *(_OWORD *)v34;
          uint64_t v16 = v15 + 1;
        }
        *(void *)(v8 + 8) = v16;
        ++v6;
        v7 -= 4;
      }
      while (v7);
    }
    unint64_t v32 = 0;
    llvm::coverage::RawCoverageReader::readSize((char **)this, &v32, a2);
    if (!*a2)
    {
      uint64_t v17 = *((void *)this + 4);
      unint64_t v18 = v32;
      v34[0] = 0;
      v34[1] = 0;
      v35[0] = 0;
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v17 + 8) - *(void *)v17) >> 2);
      if (v32 > v19)
      {
        sub_1CD5DF668((void **)v17, v32 - v19, (long long *)v34);
      }
      else
      {
        if (v32 < v19) {
          *(void *)(v17 + 8) = *(void *)v17 + 20 * v32;
        }
        if (!v18)
        {
LABEL_31:
          int v21 = v37;
          if (v37)
          {
            int v22 = 0;
            while (1)
            {
              llvm::coverage::RawCoverageMappingReader::readMappingRegionsSubArray((char **)this, *((char ***)this + 5), v22, v37, a2);
              if (*a2) {
                break;
              }
              if (v21 == ++v22)
              {
                v34[0] = v35;
                v34[1] = (void *)0x800000000;
                if (v37)
                {
                  sub_1CD5DF810((uint64_t)v34, v37);
                  int v23 = v37;
                  if (v37 >= 2)
                  {
                    int v24 = 1;
                    do
                    {
                      unint64_t v25 = (uint64_t *)*((void *)this + 5);
                      uint64_t v26 = *v25;
                      uint64_t v27 = v25[1];
                      if (v26 != v27)
                      {
                        do
                        {
                          if (*(_DWORD *)(v26 + 40) == 1) {
                            *((void *)v34[0] + *(unsigned int *)(v26 + 20)) = v26;
                          }
                          v26 += 44;
                        }
                        while (v26 != v27);
                        uint64_t v28 = (uint64_t *)*((void *)this + 5);
                        uint64_t v29 = *v28;
                        uint64_t v30 = v28[1];
                        while (v29 != v30)
                        {
                          v31 = (void *)*((void *)v34[0] + *(unsigned int *)(v29 + 16));
                          if (v31)
                          {
                            void *v31 = *(void *)v29;
                            *((void *)v34[0] + *(unsigned int *)(v29 + 16)) = 0;
                          }
                          v29 += 44;
                        }
                      }
                      ++v24;
                    }
                    while (v24 != v23);
                  }
                }
                goto LABEL_50;
              }
            }
          }
          else
          {
            v34[0] = v35;
            v34[1] = (void *)0x800000000;
LABEL_50:
            *a2 = 0;
            if (v34[0] != v35) {
              free(v34[0]);
            }
          }
          goto LABEL_2;
        }
      }
      uint64_t v20 = 12;
      while (1)
      {
        llvm::coverage::RawCoverageMappingReader::readCounter((char **)this, (unint64_t *)(**((void **)this + 4) + v20 - 8), a2);
        if (*a2) {
          break;
        }
        llvm::coverage::RawCoverageMappingReader::readCounter((char **)this, (unint64_t *)(**((void **)this + 4) + v20), a2);
        if (*a2) {
          break;
        }
        v20 += 20;
        if (!--v18) {
          goto LABEL_31;
        }
      }
    }
  }
LABEL_2:
  if (v36 != v38) {
    free(v36);
  }
}

void sub_1CD5DF348(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  int v3 = *(_DWORD *)(*(void *)a1 + 48) | 0x1000000;
  unint64_t v4 = a1 + 3;
  if (v3 != -872498498) {
    unint64_t v4 = a1 + 8;
  }
  unsigned int v5 = (llvm::Triple *)*v4;
  BOOL v6 = v3 == -872498498;
  uint64_t v7 = a1 + 4;
  if (!v6) {
    uint64_t v7 = a1 + 9;
  }
  char v11 = 0;
  uint64_t v12 = 0;
  llvm::object::MachOObjectFile::getArchTriple(v5, (const char **)&v11, *v7, &v12, (llvm::Triple *)&__p);
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v11)
  {
    std::string::size_type v8 = strlen(v11);
    std::string::__init(a2, v11, v8);
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

double sub_1CD5DF400@<D0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  llvm::object::Archive::child_begin(a1, a2, a3, (uint64_t)&v19);
  llvm::object::Archive::child_end((uint64_t)&v14);
  uint64_t v5 = v20;
  uint64_t v6 = v21;
  __int16 v7 = v22;
  uint64_t v8 = v23;
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  __int16 v11 = v17;
  uint64_t v12 = v18;
  *(_OWORD *)a4 = v19;
  *(void *)(a4 + 16) = v5;
  *(void *)(a4 + 24) = v6;
  *(_WORD *)(a4 + 32) = v7;
  *(void *)(a4 + 40) = v8;
  double result = *(double *)&v14;
  *(_OWORD *)(a4 + 48) = v14;
  *(void *)(a4 + 64) = v9;
  *(void *)(a4 + 72) = v10;
  *(_WORD *)(a4 + 80) = v11;
  *(void *)(a4 + 88) = v12;
  return result;
}

uint64_t sub_1CD5DF480(uint64_t a1)
{
  sub_1CD5E0760(a1, &v5);
  uint64_t v2 = v5;
  if (v5)
  {
    uint64_t v5 = 0;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(v4 & 0xFFFFFFFFFFFFFFF8) = v2;
    *(void *)(a1 + 40) = v4 & 3 | 4;
  }
  else
  {
    *(void *)(*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) = 0;
  }
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t sub_1CD5DF518(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  unint64_t v3 = *(void *)result;
  if (v2 >= *(_DWORD *)(result + 12))
  {
    unint64_t v6 = v3 + 8 * v2;
    if (v3 > (unint64_t)a2 || v6 <= (unint64_t)a2) {
      sub_1CD5E08B0();
    }
    sub_1CD5E08B0();
  }
  uint64_t v4 = *(unsigned int *)(result + 8);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v3 + 8 * v4) = v5;
  *(_DWORD *)(result + 8) = v4 + 1;
  return result;
}

uint64_t *sub_1CD5DF5A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 4);
  int v5 = *((_DWORD *)a2 + 5);
  uint64_t v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)a2 + 4) = 0;
  uint64_t v7 = *a1;
  *a1 = v3;
  v10[0] = v7;
  uint64_t v8 = a1[1];
  a1[1] = v6;
  v10[1] = v8;
  LODWORD(v3) = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = v4;
  int v11 = v3;
  int v12 = v5;
  sub_1CC0D7CD8((uint64_t)v10);
  return a1;
}

void *sub_1CD5DF60C(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  sub_1CC0D7CD8((uint64_t)(a1 + 3));
  return a1;
}

void sub_1CD5DF668(void **a1, unint64_t a2, long long *a3)
{
  uint64_t v7 = (char *)a1[1];
  uint64_t v6 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      uint64_t v20 = &v7[20 * a2];
      uint64_t v21 = 20 * a2;
      do
      {
        long long v22 = *a3;
        *((_DWORD *)v7 + 4) = *((_DWORD *)a3 + 4);
        *(_OWORD *)uint64_t v7 = v22;
        v7 += 20;
        v21 -= 20;
      }
      while (v21);
      uint64_t v7 = v20;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xCCCCCCCCCCCCCCCLL) {
        sub_1CB833614();
      }
      int v12 = (char *)operator new(20 * v11);
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v13 = &v12[20 * v8];
    long long v14 = &v13[20 * a2];
    uint64_t v15 = 20 * a2;
    uint64_t v16 = v13;
    do
    {
      long long v17 = *a3;
      *((_DWORD *)v16 + 4) = *((_DWORD *)a3 + 4);
      *(_OWORD *)uint64_t v16 = v17;
      v16 += 20;
      v15 -= 20;
    }
    while (v15);
    uint64_t v18 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        long long v19 = *(_OWORD *)(v7 - 20);
        *((_DWORD *)v13 - 1) = *((_DWORD *)v7 - 1);
        *(_OWORD *)(v13 - 20) = v19;
        v13 -= 20;
        v7 -= 20;
      }
      while (v7 != v18);
      uint64_t v7 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v14;
    a1[2] = &v12[20 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_1CD5DF810(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a2 > (unint64_t)*(unsigned int *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  bzero((void *)(*(void *)a1 + 8 * v4), 8 * a2);
  *(_DWORD *)(a1 + 8) = v4 + v2;
}

uint64_t *sub_1CD5DF87C(uint64_t *result)
{
  if (!*((unsigned char *)result + 128))
  {
    uint64_t v1 = result;
    uint64_t v2 = result[7];
    uint64_t v3 = (uint64_t *)v1[8];
    unint64_t v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - v2) >> 3));
    if (v3 == (uint64_t *)v2) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v4;
    }
    sub_1CD5DF994(v2, v3, (uint64_t)&v14, v5, 1);
    uint64_t v6 = v1[10];
    uint64_t v7 = (unint64_t *)v1[11];
    unint64_t v8 = 126 - 2 * __clz(((uint64_t)v7 - v6) >> 4);
    if (v7 == (unint64_t *)v6) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v8;
    }
    sub_1CD5DFE38(v6, v7, (uint64_t)&v15, v9, 1);
    uint64_t v10 = v1[13];
    unint64_t v11 = (unint64_t *)v1[14];
    unint64_t v12 = 126 - 2 * __clz(((uint64_t)v11 - v10) >> 4);
    if (v11 == (unint64_t *)v10) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v12;
    }
    sub_1CD5E0258(v10, v11, (uint64_t)&v16, v13, 1);
    double result = sub_1CC661C34((uint64_t *)v1[13], (uint64_t *)v1[14]);
    if ((uint64_t *)v1[14] != result) {
      v1[14] = (uint64_t)result;
    }
    *((unsigned char *)v1 + 128) = 1;
  }
  return result;
}

void sub_1CD5DF994(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  while (2)
  {
    unint64_t v12 = (unint64_t *)(a2 - 3);
    v43 = (unint64_t *)(a2 - 9);
    int v44 = (unint64_t *)(a2 - 6);
    v45 = a2;
LABEL_2:
    for (uint64_t i = 1 - a4; ; ++i)
    {
      uint64_t v14 = (uint64_t)a2 - a1;
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
      if (!(!v6 & v5))
      {
        switch(v15)
        {
          case 0uLL:
          case 1uLL:
            return;
          case 2uLL:
            unint64_t v26 = *(void *)a1;
            if (*v12 < *(void *)a1)
            {
              *(void *)a1 = *v12;
              *(a2 - 3) = v26;
              long long v47 = *(_OWORD *)(a1 + 8);
              *(_OWORD *)(a1 + 8) = *((_OWORD *)a2 - 1);
              *((_OWORD *)a2 - 1) = v47;
            }
            break;
          case 3uLL:
            sub_1CC660154((unint64_t *)a1, (unint64_t *)(a1 + 24), v12);
            break;
          case 4uLL:
            sub_1CC6605F0(a1, a1 + 24, a1 + 48, (uint64_t)v12);
            break;
          case 5uLL:
            sub_1CC6606B4(a1, a1 + 24, a1 + 48, a1 + 72, (uint64_t)v12);
            break;
          default:
            JUMPOUT(0);
        }
        return;
      }
      if (v14 <= 575)
      {
        uint64_t v27 = (uint64_t *)(a1 + 24);
        BOOL v29 = (uint64_t *)a1 == a2 || v27 == a2;
        if (a5)
        {
          if (!v29)
          {
            uint64_t v30 = 0;
            uint64_t v31 = a1;
            do
            {
              unint64_t v32 = v27;
              unint64_t v33 = *(void *)(v31 + 24);
              if (v33 < *(void *)v31)
              {
                long long v48 = *(_OWORD *)(v31 + 32);
                unint64_t v34 = *(void *)v31;
                uint64_t v35 = v30;
                while (1)
                {
                  uint64_t v36 = a1 + v35;
                  *(void *)(v36 + 24) = v34;
                  *(_OWORD *)(v36 + 32) = *(_OWORD *)(a1 + v35 + 8);
                  if (!v35) {
                    break;
                  }
                  unint64_t v34 = *(void *)(v36 - 24);
                  v35 -= 24;
                  if (v33 >= v34)
                  {
                    uint64_t v37 = (void *)(a1 + v35 + 24);
                    goto LABEL_45;
                  }
                }
                uint64_t v37 = (void *)a1;
LABEL_45:
                *uint64_t v37 = v33;
                *(_OWORD *)(v36 + 8) = v48;
              }
              uint64_t v27 = v32 + 3;
              v30 += 24;
              uint64_t v31 = (uint64_t)v32;
            }
            while (v32 + 3 != a2);
          }
        }
        else if (!v29)
        {
          unint64_t v38 = (_OWORD *)(a1 + 32);
          do
          {
            uint64_t v39 = (uint64_t)v27;
            unint64_t v40 = *(void *)(a1 + 24);
            if (v40 < *(void *)a1)
            {
              long long v49 = *(_OWORD *)(a1 + 32);
              unint64_t v41 = *(void *)a1;
              v42 = v38;
              do
              {
                *((void *)v42 - 1) = v41;
                _OWORD *v42 = *(_OWORD *)((char *)v42 - 24);
                unint64_t v41 = *((void *)v42 - 7);
                v42 = (_OWORD *)((char *)v42 - 24);
              }
              while (v40 < v41);
              *((void *)v42 - 1) = v40;
              _OWORD *v42 = v49;
            }
            uint64_t v27 = (uint64_t *)(v39 + 24);
            unint64_t v38 = (_OWORD *)((char *)v38 + 24);
            a1 = v39;
          }
          while ((uint64_t *)(v39 + 24) != a2);
        }
        return;
      }
      if (i == 1)
      {
        if ((uint64_t *)a1 != a2)
        {
          sub_1CC6607B0(a1, a2, a2, a3);
        }
        return;
      }
      unint64_t v16 = v15 >> 1;
      long long v17 = (unint64_t *)(a1 + 24 * (v15 >> 1));
      if ((unint64_t)v14 >= 0xC01)
      {
        sub_1CC660154((unint64_t *)a1, (unint64_t *)(a1 + 24 * (v15 >> 1)), v12);
        uint64_t v18 = v12;
        uint64_t v19 = a5;
        uint64_t v20 = a1 + 24 * v16;
        sub_1CC660154((unint64_t *)(a1 + 24), (unint64_t *)(v20 - 24), v44);
        sub_1CC660154((unint64_t *)(a1 + 48), (unint64_t *)(a1 + 24 + 24 * v16), v43);
        sub_1CC660154((unint64_t *)(v20 - 24), v17, (unint64_t *)(a1 + 24 + 24 * v16));
        unint64_t v21 = *(void *)a1;
        *(void *)a1 = *v17;
        *long long v17 = v21;
        long long v46 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(v20 + 8);
        *(_OWORD *)(v20 + 8) = v46;
        a5 = v19;
        unint64_t v12 = v18;
        a2 = v45;
      }
      else
      {
        sub_1CC660154((unint64_t *)(a1 + 24 * (v15 >> 1)), (unint64_t *)a1, v12);
      }
      if ((a5 & 1) == 0 && *(void *)(a1 - 24) >= *(void *)a1)
      {
        unint64_t v25 = sub_1CC660244((uint64_t *)a1, (unint64_t *)a2);
        goto LABEL_15;
      }
      unint64_t v22 = sub_1CC66032C((uint64_t *)a1, (unint64_t *)a2);
      if ((v23 & 1) == 0) {
        goto LABEL_62;
      }
      BOOL v24 = sub_1CC66041C(a1, v22);
      unint64_t v25 = (unint64_t *)(v22 + 24);
      if (sub_1CC66041C(v22 + 24, (uint64_t)a2)) {
        break;
      }
      if (!v24)
      {
LABEL_62:
        a4 = -i;
        sub_1CD5DF994(a1, v22, a3, -i, a5 & 1);
        a5 = 0;
        a1 = v22 + 24;
        goto LABEL_2;
      }
LABEL_15:
      a1 = (uint64_t)v25;
    }
    a4 = -i;
    a2 = (uint64_t *)v22;
    if (!v24) {
      continue;
    }
    break;
  }
}

uint64_t sub_1CD5DFE38(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v11 = (unint64_t *)result;
  while (2)
  {
    unint64_t v12 = a2 - 2;
LABEL_3:
    for (uint64_t i = 1 - a4; ; ++i)
    {
      uint64_t v14 = (char *)a2 - (char *)v11;
      unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
      if (!(!v6 & v5))
      {
        switch(v15)
        {
          case 0uLL:
          case 1uLL:
            return result;
          case 2uLL:
            unint64_t v25 = *v11;
            if (*v12 < *v11)
            {
              unint64_t v26 = v11[1];
              unint64_t v27 = *(a2 - 1);
              unint64_t *v11 = *v12;
              v11[1] = v27;
              *(a2 - 2) = v25;
              *(a2 - 1) = v26;
            }
            break;
          case 3uLL:
            double result = sub_1CC660B68(v11, v11 + 2, a2 - 2);
            break;
          case 4uLL:
            double result = sub_1CC660F38(v11, v11 + 2, v11 + 4, a2 - 2);
            break;
          case 5uLL:
            double result = sub_1CC660FDC(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
            break;
          default:
            JUMPOUT(0);
        }
        return result;
      }
      if (v14 <= 383)
      {
        uint64_t v28 = v11 + 2;
        BOOL v30 = v11 == a2 || v28 == a2;
        if (a5)
        {
          if (!v30)
          {
            uint64_t v31 = 0;
            unint64_t v32 = v11;
            do
            {
              unint64_t v33 = v28;
              unint64_t v34 = v32[2];
              unint64_t v35 = *v32;
              if (v34 < *v32)
              {
                unint64_t v36 = v32[3];
                uint64_t v37 = v31;
                while (1)
                {
                  unint64_t v38 = (char *)v11 + v37;
                  uint64_t v39 = *(unint64_t *)((char *)v11 + v37 + 8);
                  *((void *)v38 + 2) = v35;
                  *((void *)v38 + 3) = v39;
                  if (!v37) {
                    break;
                  }
                  unint64_t v35 = *((void *)v38 - 2);
                  v37 -= 16;
                  if (v34 >= v35)
                  {
                    unint64_t v40 = (unint64_t *)((char *)v11 + v37 + 16);
                    goto LABEL_46;
                  }
                }
                unint64_t v40 = v11;
LABEL_46:
                *unint64_t v40 = v34;
                v40[1] = v36;
              }
              uint64_t v28 = v33 + 2;
              v31 += 16;
              unint64_t v32 = v33;
            }
            while (v33 + 2 != a2);
          }
        }
        else if (!v30)
        {
          unint64_t v41 = v11 + 3;
          do
          {
            v42 = v28;
            unint64_t v43 = v11[2];
            unint64_t v44 = *v11;
            if (v43 < *v11)
            {
              unint64_t v45 = v11[3];
              long long v46 = v41;
              do
              {
                long long v47 = v46;
                *(v46 - 1) = v44;
                unint64_t v48 = *(v46 - 2);
                v46 -= 2;
                *long long v47 = v48;
                unint64_t v44 = *(v47 - 5);
              }
              while (v43 < v44);
              *(v46 - 1) = v43;
              unint64_t *v46 = v45;
            }
            uint64_t v28 = v42 + 2;
            v41 += 2;
            unint64_t v11 = v42;
          }
          while (v42 + 2 != a2);
        }
        return result;
      }
      if (i == 1)
      {
        if (v11 != a2)
        {
          return (uint64_t)sub_1CC6610B0(v11, a2, a2, a3);
        }
        return result;
      }
      unint64_t v16 = v15 >> 1;
      long long v17 = &v11[2 * (v15 >> 1)];
      if ((unint64_t)v14 >= 0x801)
      {
        sub_1CC660B68(v11, &v11[2 * (v15 >> 1)], a2 - 2);
        sub_1CC660B68(v11 + 2, v17 - 2, a2 - 4);
        sub_1CC660B68(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
        sub_1CC660B68(v17 - 2, v17, &v11[2 * v16 + 2]);
        unint64_t v18 = *v11;
        unint64_t v19 = v11[1];
        unint64_t v20 = v17[1];
        unint64_t *v11 = *v17;
        v11[1] = v20;
        *long long v17 = v18;
        v17[1] = v19;
      }
      else
      {
        sub_1CC660B68(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      }
      if ((a5 & 1) == 0 && *(v11 - 2) >= *v11)
      {
        double result = (uint64_t)sub_1CC660C18(v11, (uint64_t *)a2);
        BOOL v24 = (unint64_t *)result;
        goto LABEL_16;
      }
      unint64_t v21 = sub_1CC660CD4(v11, a2);
      if ((v22 & 1) == 0) {
        goto LABEL_63;
      }
      BOOL v23 = sub_1CC660D94(v11, v21);
      BOOL v24 = v21 + 2;
      double result = sub_1CC660D94(v21 + 2, a2);
      if (result) {
        break;
      }
      if (!v23)
      {
LABEL_63:
        a4 = -i;
        double result = sub_1CD5DFE38(v11, v21, a3, -i, a5 & 1);
        a5 = 0;
        unint64_t v11 = v21 + 2;
        goto LABEL_3;
      }
LABEL_16:
      unint64_t v11 = v24;
    }
    a4 = -i;
    a2 = v21;
    if (!v23) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CD5E0258(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v11 = (unint64_t *)result;
  while (2)
  {
    unint64_t v12 = a2 - 2;
LABEL_3:
    for (uint64_t i = 1 - a4; ; ++i)
    {
      uint64_t v14 = (char *)a2 - (char *)v11;
      unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
      if (!(!v6 & v5))
      {
        switch(v15)
        {
          case 0uLL:
          case 1uLL:
            return result;
          case 2uLL:
            uint64_t v23 = *v11;
            if (*v12 < *v11)
            {
              unint64_t *v11 = *v12;
              *(a2 - 2) = v23;
              unint64_t v24 = v11[1];
              v11[1] = *(a2 - 1);
              *(a2 - 1) = v24;
            }
            break;
          case 3uLL:
            double result = sub_1CC661390((uint64_t *)v11, v11 + 2, a2 - 2);
            break;
          case 4uLL:
            double result = sub_1CC6617B4((uint64_t *)v11, v11 + 2, v11 + 4, a2 - 2);
            break;
          case 5uLL:
            double result = sub_1CC661868((uint64_t *)v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
            break;
          default:
            JUMPOUT(0);
        }
        return result;
      }
      if (v14 <= 383)
      {
        unint64_t v25 = v11 + 2;
        BOOL v27 = v11 == a2 || v25 == a2;
        if (a5)
        {
          if (!v27)
          {
            uint64_t v28 = 0;
            BOOL v29 = v11;
            do
            {
              BOOL v30 = v25;
              unint64_t v31 = v29[2];
              unint64_t v32 = *v29;
              if (v31 < *v29)
              {
                unint64_t v33 = v29[3];
                uint64_t v34 = v28;
                while (1)
                {
                  unint64_t v35 = (char *)v11 + v34;
                  uint64_t v36 = *(unint64_t *)((char *)v11 + v34 + 8);
                  *((void *)v35 + 2) = v32;
                  *((void *)v35 + 3) = v36;
                  if (!v34) {
                    break;
                  }
                  unint64_t v32 = *((void *)v35 - 2);
                  v34 -= 16;
                  if (v31 >= v32)
                  {
                    uint64_t v37 = (unint64_t *)((char *)v11 + v34 + 16);
                    goto LABEL_46;
                  }
                }
                uint64_t v37 = v11;
LABEL_46:
                *uint64_t v37 = v31;
                v37[1] = v33;
              }
              unint64_t v25 = v30 + 2;
              v28 += 16;
              BOOL v29 = v30;
            }
            while (v30 + 2 != a2);
          }
        }
        else if (!v27)
        {
          unint64_t v38 = v11 + 3;
          do
          {
            uint64_t v39 = v25;
            unint64_t v40 = v11[2];
            unint64_t v41 = *v11;
            if (v40 < *v11)
            {
              unint64_t v42 = v11[3];
              unint64_t v43 = v38;
              do
              {
                unint64_t v44 = v43;
                *(v43 - 1) = v41;
                unint64_t v45 = *(v43 - 2);
                v43 -= 2;
                *unint64_t v44 = v45;
                unint64_t v41 = *(v44 - 5);
              }
              while (v40 < v41);
              *(v43 - 1) = v40;
              unint64_t *v43 = v42;
            }
            unint64_t v25 = v39 + 2;
            v38 += 2;
            unint64_t v11 = v39;
          }
          while (v39 + 2 != a2);
        }
        return result;
      }
      if (i == 1)
      {
        if (v11 != a2)
        {
          return (uint64_t)sub_1CC661950(v11, a2, a2, a3);
        }
        return result;
      }
      unint64_t v16 = v15 >> 1;
      long long v17 = &v11[2 * (v15 >> 1)];
      if ((unint64_t)v14 >= 0x801)
      {
        sub_1CC661390((uint64_t *)v11, &v11[2 * (v15 >> 1)], a2 - 2);
        sub_1CC661390((uint64_t *)v11 + 2, v17 - 2, a2 - 4);
        sub_1CC661390((uint64_t *)v11 + 4, &v11[2 * v16 + 2], a2 - 6);
        sub_1CC661390((uint64_t *)v17 - 2, v17, &v11[2 * v16 + 2]);
        long long v18 = *(_OWORD *)v11;
        *(_OWORD *)unint64_t v11 = *(_OWORD *)v17;
        *(_OWORD *)long long v17 = v18;
      }
      else
      {
        sub_1CC661390((uint64_t *)&v11[2 * (v15 >> 1)], v11, a2 - 2);
      }
      if ((a5 & 1) == 0 && *(v11 - 2) >= *v11)
      {
        double result = (uint64_t)sub_1CC661468(v11, (uint64_t *)a2);
        char v22 = (unint64_t *)result;
        goto LABEL_16;
      }
      unint64_t v19 = sub_1CC661534(v11, a2);
      if ((v20 & 1) == 0) {
        goto LABEL_63;
      }
      BOOL v21 = sub_1CC661608(v11, (char *)v19);
      char v22 = v19 + 2;
      double result = sub_1CC661608(v19 + 2, (char *)a2);
      if (result) {
        break;
      }
      if (!v21)
      {
LABEL_63:
        a4 = -i;
        double result = sub_1CD5E0258(v11, v19, a3, -i, a5 & 1);
        a5 = 0;
        unint64_t v11 = v19 + 2;
        goto LABEL_3;
      }
LABEL_16:
      unint64_t v11 = v22;
    }
    a4 = -i;
    a2 = v19;
    if (!v21) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CD5E0680(uint64_t a1, uint64_t a2)
{
  void (***v3)(uint64_t *__return_ptr);
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v3 = *(void (****)(uint64_t *__return_ptr))(a2 + 8);
  if (v3)
  {
    (**v3)(&v8);
    unint64_t v4 = v8;
    unint64_t v8 = 0;
    char v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      uint64_t v7 = v8;
      unint64_t v8 = 0;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
      }
    }
  }
  return a1;
}

uint64_t sub_1CD5E0760@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  llvm::object::Archive::Child::getNext((llvm::object::Archive::Child *)a1, (uint64_t)v9);
  char v4 = v11;
  if (v11)
  {
    uint64_t v7 = *(void *)&v9[0];
    *(void *)&v9[0] = 0;
  }
  else if (v9 == (_OWORD *)a1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    long long v6 = v9[0];
    *((void *)&v9[0] + 1) = 0;
    *(_OWORD *)a1 = v6;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      char v4 = v11;
    }
    uint64_t v7 = 0;
    *(_OWORD *)(a1 + 16) = v9[1];
    *(_WORD *)(a1 + 32) = v10;
  }
  *a2 = v7;
  if (v4)
  {
    uint64_t result = *(void *)&v9[0];
    *(void *)&v9[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t result = *((void *)&v9[0] + 1);
    *((void *)&v9[0] + 1) = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    }
  }
  return result;
}

void sub_1CD5E08B0()
{
}

uint64_t llvm::DWARFAbbreviationDeclaration::extract(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  if (*(unsigned char *)(a1 + 158)) {
    *(unsigned char *)(a1 + 158) = 0;
  }
  uint64_t v6 = *a3;
  uint64_t result = llvm::DataExtractor::getULEB128(a2, a3, 0);
  *(_DWORD *)a1 = result;
  if (result)
  {
    *(unsigned char *)(a1 + 6) = *(unsigned char *)a3 - v6;
    __int16 ULEB128 = llvm::DataExtractor::getULEB128(a2, a3, 0);
    *(_WORD *)(a1 + 4) = ULEB128;
    if (!ULEB128) {
      goto LABEL_34;
    }
    *(unsigned char *)(a1 + 7) = llvm::DataExtractor::getU8(a2, a3, 0) == 1;
    uint64_t v9 = (_DWORD *)(a1 + 152);
    if (!*(unsigned char *)(a1 + 158)) {
      *(_WORD *)(a1 + 157) = 256;
    }
    *(unsigned char *)(a1 + 156) = 0;
    *uint64_t v9 = 0;
    unsigned __int16 v10 = llvm::DataExtractor::getULEB128(a2, a3, 0);
    int v11 = llvm::DataExtractor::getULEB128(a2, a3, 0);
    int v12 = v11;
    unint64_t v13 = v10;
    if (v10 && (_WORD)v11)
    {
      uint64_t v14 = 0;
      while ((unsigned __int16)v12 == 33)
      {
        uint64_t SLEB128 = llvm::DataExtractor::getSLEB128(a2, a3, 0);
        unint64_t v16 = *(unsigned int *)(a1 + 16);
        if (v16 >= *(unsigned int *)(a1 + 20)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        long long v17 = (unint64_t *)(*(void *)(a1 + 8) + 16 * v16);
        *long long v17 = (v12 << 16) | v13;
        v17[1] = SLEB128;
LABEL_13:
        ++*(_DWORD *)(a1 + 16);
        unsigned __int16 v18 = llvm::DataExtractor::getULEB128(a2, a3, 0);
        int v19 = llvm::DataExtractor::getULEB128(a2, a3, 0);
        int v12 = v19;
        unint64_t v13 = v18;
        if (!v18 || !(_WORD)v19) {
          goto LABEL_32;
        }
      }
      if ((unsigned __int16)v12 <= 0x1Fu)
      {
        if (((1 << v12) & 0xA0804000) != 0)
        {
LABEL_18:
          if (*(unsigned char *)(a1 + 158))
          {
            uint64_t v20 = 0;
            ++*(unsigned char *)(a1 + 156);
LABEL_20:
            unint64_t v21 = *(unsigned int *)(a1 + 16);
            if (v21 >= *(unsigned int *)(a1 + 20)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            char v22 = (unint64_t *)(*(void *)(a1 + 8) + 16 * v21);
            *char v22 = (v12 << 16) | v13;
            v22[1] = v20 | (v14 << 8);
            goto LABEL_13;
          }
          goto LABEL_31;
        }
        if ((unsigned __int16)v12 == 1)
        {
          if (*(unsigned char *)(a1 + 158))
          {
            uint64_t v20 = 0;
            ++*(unsigned char *)(a1 + 154);
            goto LABEL_20;
          }
          goto LABEL_31;
        }
        if ((unsigned __int16)v12 == 16)
        {
          if (*(unsigned char *)(a1 + 158))
          {
            uint64_t v20 = 0;
            ++*(unsigned char *)(a1 + 155);
            goto LABEL_20;
          }
LABEL_31:
          uint64_t v20 = 0;
          goto LABEL_20;
        }
      }
      if ((unsigned __int16)v12 - 7968 >= 2)
      {
        v24 &= 0xFFFF000000000000;
        unsigned __int16 FixedFormByteSize = llvm::dwarf::getFixedFormByteSize((unsigned __int16)v12, v24);
        if (FixedFormByteSize >= 0x100u)
        {
          uint64_t v14 = FixedFormByteSize;
          if (*(unsigned char *)(a1 + 158)) {
            *(_WORD *)v9 += FixedFormByteSize;
          }
          uint64_t v20 = 1;
          goto LABEL_20;
        }
        if (*(unsigned char *)(a1 + 158))
        {
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 158) = 0;
          goto LABEL_20;
        }
        goto LABEL_31;
      }
      goto LABEL_18;
    }
LABEL_32:
    if (v13 | (unsigned __int16)v12)
    {
LABEL_34:
      *(_DWORD *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      uint64_t result = 0;
      if (*(unsigned char *)(a1 + 158)) {
        *(unsigned char *)(a1 + 158) = 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::DWARFAbbreviationDeclaration::getAttributeOffsetFromIndex(llvm::DWARFAbbreviationDeclaration *this, unint64_t a2, uint64_t a3, const llvm::DWARFUnit *a4)
{
  llvm::DWARFUnit::getDebugInfoExtractor(a4, &v19);
  uint64_t result = *((unsigned __int8 *)this + 6) + a3;
  uint64_t v18 = result;
  if (a2)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 16 * a2;
    while (1)
    {
      uint64_t v11 = *((void *)this + 1);
      int v12 = *(unsigned __int16 *)(v11 + v9 + 2);
      if (v12 == 33)
      {
        uint64_t v13 = 0;
      }
      else if (*(unsigned char *)(v11 + v9 + 8))
      {
        uint64_t v13 = *(unsigned __int8 *)(v11 + v9 + 9);
      }
      else
      {
        LODWORD(v13) = (unsigned __int16)llvm::dwarf::getFixedFormByteSize(v12, *((unsigned int *)a4 + 8) | ((unint64_t)*((unsigned __int16 *)a4 + 18) << 32));
        BOOL v14 = v13 >= 0x100;
        if (v13 <= 0x100) {
          LOBYTE(v13) = 0;
        }
        if (!v14)
        {
          unsigned __int16 v15 = *(_WORD *)(*((void *)this + 1) + v9 + 2);
          __n128 v16 = v19;
          uint64_t v17 = v20;
          a2 = a2 & 0xFFFF000000000000 | *((unsigned int *)a4 + 8) | ((unint64_t)*((unsigned __int16 *)a4 + 18) << 32);
          llvm::DWARFFormValue::skipValue(v15, (uint64_t *)&v16, (unint64_t *)&v18, a2);
          goto LABEL_6;
        }
        uint64_t v13 = v13;
      }
      v18 += v13;
LABEL_6:
      v9 += 16;
      if (v10 == v9) {
        return v18;
      }
    }
  }
  return result;
}

uint64_t llvm::DWARFAbbreviationDeclaration::AttributeSpec::getByteSize(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a1 + 2);
  if (v3 == 33)
  {
    return 0;
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    return *(unsigned __int8 *)(a1 + 9);
  }
  else
  {
    __int16 FixedFormByteSize = llvm::dwarf::getFixedFormByteSize(v3, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32));
    if ((FixedFormByteSize & 0xFF00) != 0) {
      return FixedFormByteSize;
    }
    else {
      return 0;
    }
  }
}

uint64_t llvm::DWARFAbbreviationDeclaration::getAttributeValueFromOffset@<X0>(llvm::DWARFAbbreviationDeclaration *this@<X0>, const llvm::DWARFUnit *a2@<X3>, unsigned int a3@<W1>, unint64_t a4@<X2>, uint64_t a5@<X8>)
{
  unint64_t v15 = a4;
  uint64_t v6 = *((void *)this + 1);
  if (*(_WORD *)(v6 + 16 * a3 + 2) == 33)
  {
    uint64_t result = llvm::DWARFFormValue::createFromSValue(33, *(void *)(v6 + 16 * a3 + 8), a5);
  }
  else
  {
    LOWORD(v12) = *(_WORD *)(v6 + 16 * a3 + 2);
    BYTE2(v12) = 0;
    *((void *)&v12 + 1) = 0;
    *(void *)&long long v13 = 0;
    long long v14 = 0uLL;
    llvm::DWARFUnit::getDebugInfoExtractor(a2, v11);
    uint64_t result = (uint64_t)llvm::DWARFFormValue::extractValue((unsigned __int16 *)&v12, (uint64_t *)v11, &v15, *((_DWORD *)a2 + 8), 0, (uint64_t)a2);
    if (!result)
    {
      char v8 = 0;
      *(unsigned char *)a5 = 0;
      goto LABEL_4;
    }
    long long v10 = v13;
    *(_OWORD *)a5 = v12;
    *(_OWORD *)(a5 + 16) = v10;
    *(_OWORD *)(a5 + 32) = v14;
  }
  char v8 = 1;
LABEL_4:
  *(unsigned char *)(a5 + 48) = v8;
  return result;
}

uint64_t llvm::DWARFAbbreviationDeclaration::getAttributeValue@<X0>(uint64_t this@<X0>, llvm::DWARFUnit *a2@<X3>, uint64_t a3@<X1>, int a4@<W2>, unsigned char *a5@<X8>)
{
  uint64_t v6 = *(unsigned int *)(this + 16);
  if (v6)
  {
    char v8 = (llvm::DWARFAbbreviationDeclaration *)this;
    unint64_t v9 = 0;
    long long v10 = *(unsigned __int16 **)(this + 8);
    while (1)
    {
      int v11 = *v10;
      v10 += 8;
      if (v11 == a4) {
        break;
      }
      if (v6 == ++v9) {
        goto LABEL_5;
      }
    }
    unint64_t AttributeOffsetFromIndex = llvm::DWARFAbbreviationDeclaration::getAttributeOffsetFromIndex((llvm::DWARFAbbreviationDeclaration *)this, v9, a3, a2);
    return llvm::DWARFAbbreviationDeclaration::getAttributeValueFromOffset(v8, a2, v9, AttributeOffsetFromIndex, (uint64_t)a5);
  }
  else
  {
LABEL_5:
    *a5 = 0;
    a5[48] = 0;
  }
  return this;
}

unint64_t llvm::DWARFAbbreviationDeclaration::FixedSizeInfo::getByteSize(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 34);
  if (a1[2]) {
    unint64_t v4 = *(unsigned __int8 *)(a2 + 34) * (unint64_t)a1[2];
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t result = v4 + *(unsigned __int16 *)a1;
  if (a1[3])
  {
    if (*(unsigned char *)(a2 + 35)) {
      int v6 = 8;
    }
    else {
      int v6 = 4;
    }
    if (*(_WORD *)(a2 + 32) != 2) {
      unsigned int v3 = v6;
    }
    result += a1[3] * (unint64_t)v3;
  }
  uint64_t v7 = a1[4];
  if (v7)
  {
    char v8 = 2;
    if (*(unsigned char *)(a2 + 35)) {
      char v8 = 3;
    }
    result += v7 << v8;
  }
  return result;
}

unint64_t llvm::DWARFAbbreviationDeclaration::getFixedAttributesByteSize(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 158)) {
    return llvm::DWARFAbbreviationDeclaration::FixedSizeInfo::getByteSize((unsigned __int8 *)(a1 + 152), a2);
  }
  else {
    return 0;
  }
}

void sub_1CD5E107C()
{
}

llvm::raw_ostream *sub_1CD5E1090(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD5E1098((unsigned __int16 *)(a1 + 8), a2);
}

llvm::raw_ostream *sub_1CD5E1098(unsigned __int16 *a1, llvm::raw_ostream *a2)
{
  unint64_t v4 = llvm::dwarf::TagString((llvm::dwarf *)*a1);
  if (v5)
  {
    int v6 = v4;
    size_t v7 = v5;
    char v8 = (void *)*((void *)a2 + 4);
    if (v5 <= *((void *)a2 + 3) - (void)v8)
    {
      unint64_t result = (llvm::raw_ostream *)memcpy(v8, v6, v5);
      *((void *)a2 + 4) += v7;
    }
    else
    {
      return llvm::raw_ostream::write(a2, v6, v5);
    }
  }
  else
  {
    long long v10 = sub_1CB8E509C(a2, "DW_");
    int v11 = sub_1CB8E509C(v10, "TAG");
    long long v12 = sub_1CB8E509C(v11, "_unknown_");
    uint64_t v13 = *a1;
    v14[0] = &unk_1F2618710;
    v14[1] = "%x";
    v14[2] = v13;
    return llvm::raw_ostream::operator<<(v12, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_1CD5E119C(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16));
}

llvm::raw_ostream *sub_1CD5E11D4(unsigned __int16 *a1, llvm::raw_ostream *a2)
{
  unint64_t v4 = llvm::dwarf::AttributeString((llvm::dwarf *)*a1);
  if (v5)
  {
    int v6 = v4;
    size_t v7 = v5;
    char v8 = (void *)*((void *)a2 + 4);
    if (v5 <= *((void *)a2 + 3) - (void)v8)
    {
      unint64_t result = (llvm::raw_ostream *)memcpy(v8, v6, v5);
      *((void *)a2 + 4) += v7;
    }
    else
    {
      return llvm::raw_ostream::write(a2, v6, v5);
    }
  }
  else
  {
    long long v10 = sub_1CB8E509C(a2, "DW_");
    int v11 = sub_1CB8E509C(v10, "AT");
    long long v12 = sub_1CB8E509C(v11, "_unknown_");
    uint64_t v13 = *a1;
    v14[0] = &unk_1F2618760;
    v14[1] = "%x";
    v14[2] = v13;
    return llvm::raw_ostream::operator<<(v12, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_1CD5E12D8(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16));
}

void sub_1CD5E1310()
{
}

llvm::raw_ostream *sub_1CD5E1324(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD5E132C(*(unsigned __int16 **)(a1 + 8), a2);
}

llvm::raw_ostream *sub_1CD5E132C(unsigned __int16 *a1, llvm::raw_ostream *a2)
{
  unint64_t v4 = llvm::dwarf::FormEncodingString((llvm::dwarf *)*a1);
  if (v5)
  {
    int v6 = v4;
    size_t v7 = v5;
    char v8 = (void *)*((void *)a2 + 4);
    if (v5 <= *((void *)a2 + 3) - (void)v8)
    {
      unint64_t result = (llvm::raw_ostream *)memcpy(v8, v6, v5);
      *((void *)a2 + 4) += v7;
    }
    else
    {
      return llvm::raw_ostream::write(a2, v6, v5);
    }
  }
  else
  {
    long long v10 = sub_1CB8E509C(a2, "DW_");
    int v11 = sub_1CB8E509C(v10, "FORM");
    long long v12 = sub_1CB8E509C(v11, "_unknown_");
    uint64_t v13 = *a1;
    v14[0] = &unk_1F26187B0;
    v14[1] = "%x";
    v14[2] = v13;
    return llvm::raw_ostream::operator<<(v12, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_1CD5E1430(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16));
}

llvm::raw_ostream *llvm::DWARFAddressRange::dump(uint64_t *a1, llvm::raw_ostream *a2, unsigned __int8 a3, uint64_t a4, llvm::raw_ostream *a5)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a4 + 21)) {
    long long v10 = " ";
  }
  else {
    long long v10 = "[";
  }
  sub_1CB8E509C(a2, v10);
  llvm::DWARFFormValue::dumpAddress(a2, (llvm::raw_ostream *)a3, *a1);
  sub_1CB8E509C(a2, ", ");
  llvm::DWARFFormValue::dumpAddress(a2, (llvm::raw_ostream *)a3, a1[1]);
  if (*(unsigned char *)(a4 + 21)) {
    int v11 = "";
  }
  else {
    int v11 = ")";
  }
  unint64_t result = sub_1CB8E509C(a2, v11);
  if (a5)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)a4;
    *(void *)&v13[14] = *(void *)(a4 + 14);
    sub_1CC66D518((uint64_t)&v14, a4 + 24);
    sub_1CC66D518((uint64_t)v15, a4 + 56);
    llvm::DWARFFormValue::dumpAddressSection(a5, a2, (uint64_t)v13, a1[2]);
    return (llvm::raw_ostream *)sub_1CD5E15A8(v13);
  }
  return result;
}

void *sub_1CD5E15A8(void *a1)
{
  uint64_t v2 = a1 + 7;
  unsigned int v3 = (void *)a1[10];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  unint64_t v4 = (void *)a1[6];
  if (v4 == a1 + 3)
  {
    (*(void (**)(void *))(a1[3] + 32))(a1 + 3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

void sub_1CD5E1698()
{
}

void *sub_1CD5E16AC(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_1F26187D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD5E16F4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26187D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD5E1720(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void (**)(uint64_t *))(a1 + 8);
  uint64_t v4 = *a2;
  *a2 = 0;
  v2(&v4);
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

llvm::raw_ostream *sub_1CD5E1780(uint64_t a1, const void *a2, size_t a3, unint64_t a4)
{
  size_t v7 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1);
  char v8 = (void *)*((void *)v7 + 4);
  if (a3 <= *((void *)v7 + 3) - (void)v8)
  {
    if (a3)
    {
      memcpy(v8, a2, a3);
      *((void *)v7 + 4) += a3;
    }
  }
  else
  {
    llvm::raw_ostream::write(v7, (const char *)a2, a3);
  }
  unint64_t v9 = sub_1CB8E509C(v7, ": ");
  long long v10 = llvm::raw_ostream::operator<<(v9, a4);

  return sub_1CB8E509C(v10, "\n");
}

llvm::raw_ostream *sub_1CD5E1848(uint64_t a1, const void *a2, size_t a3)
{
  size_t v5 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1);
  int v6 = (void *)*((void *)v5 + 4);
  if (a3 <= *((void *)v5 + 3) - (void)v6)
  {
    if (a3)
    {
      memcpy(v6, a2, a3);
      *((void *)v5 + 4) += a3;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, (const char *)a2, a3);
  }

  return sub_1CB8E509C(v5, "\n");
}

void *llvm::DWARFDebugNames::Entry::Entry(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = a1 + 3;
  uint64_t v4 = (uint64_t)(a1 + 1);
  a1[2] = 0x300000000;
  *a1 = &unk_1F2618838;
  a1[21] = a2;
  a1[22] = a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  if ((unint64_t)(v6 - v5) >= 0x19) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  while (v5 != v6)
  {
    sub_1CD5E19AC(v4, *(_WORD *)(v5 + 4));
    v5 += 8;
  }
  return a1;
}

uint64_t sub_1CD5E19AC(uint64_t a1, __int16 a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12)) {
    return sub_1CD5E25F8(a1, a2);
  }
  uint64_t v3 = *(void *)a1 + 48 * v2;
  *(_WORD *)uint64_t v3 = a2;
  *(unsigned char *)(v3 + 2) = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

unint64_t llvm::DWARFDebugNames::Entry::getCUIndex(llvm::DWARFDebugNames::Entry *this)
{
  uint64_t v1 = *((void *)this + 22);
  unsigned int v2 = *(_DWORD **)(v1 + 8);
  uint64_t v3 = *(_DWORD **)(v1 + 16);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v4 = (_OWORD *)*((void *)this + 1);
  while (*v2 != 1)
  {
    v2 += 2;
    v4 += 3;
    if (v2 == v3) {
      return 0;
    }
  }
  long long v7 = v4[1];
  v8[0] = *v4;
  v8[1] = v7;
  v8[2] = v4[2];
  char v9 = 1;
  return llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v8);
}

void llvm::DWARFDebugNames::Entry::dump(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)a2 + 296))(a2, "Abbrev", 6, **(unsigned int **)(a1 + 176));
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
  uint64_t v5 = *(void *)(a1 + 176) + 4;
  uint64_t v14 = "Tag: {0}\n";
  uint64_t v15 = 9;
  __n128 v16 = &v20;
  uint64_t v17 = 1;
  uint64_t v18 = &unk_1F26189A8;
  uint64_t v19 = v5;
  uint64_t v20 = &v18;
  sub_1CD862C68((uint64_t)&v14, v4);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(void *)(v6 + 16);
  if (v7 != v8)
  {
    char v9 = *(unsigned __int16 **)(a1 + 8);
    do
    {
      long long v10 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
      uint64_t v14 = "{0}: ";
      uint64_t v15 = 5;
      __n128 v16 = &v20;
      uint64_t v17 = 1;
      uint64_t v18 = &unk_1F26189D8;
      uint64_t v19 = v7;
      uint64_t v20 = &v18;
      sub_1CD862C68((uint64_t)&v14, v10);
      int v11 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 256))(a2);
      long long v26 = 0u;
      v21[2] = 0;
      long long v23 = 0u;
      v21[0] = -1;
      v21[1] = 0x1040000FFFFFFFFLL;
      char v22 = &unk_1F26187D0;
      *(void *)&long long v23 = llvm::WithColor::defaultErrorHandler;
      unint64_t v24 = &v22;
      unint64_t v25 = &unk_1F26187D0;
      *(void *)&long long v26 = llvm::WithColor::defaultWarningHandler;
      BOOL v27 = &v25;
      llvm::DWARFFormValue::dump(v9, v11, (uint64_t)v21);
      sub_1CD5E15A8(v21);
      long long v12 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 256))(a2);
      uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
      if ((unint64_t)v13 >= *((void *)v12 + 3))
      {
        llvm::raw_ostream::write(v12, 10);
      }
      else
      {
        *((void *)v12 + 4) = v13 + 1;
        *uint64_t v13 = 10;
      }
      v7 += 8;
      v9 += 24;
    }
    while (v7 != v8);
  }
}

void llvm::DWARFDebugNames::NameIndex::getEntry(llvm::DWARFDebugNames::NameIndex *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 12);
  if (*(void *)(v4 + 16) <= *a2)
  {
    uint64_t v16 = 92;
    uint64_t v17 = (void *)std::generic_category();
    sub_1CD06481C();
  }
  unint64_t v6 = (unint64_t)this;
  uint64_t v7 = (uint64_t *)(v4 + 8);
  int ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)(v4 + 8), (uint64_t *)a2, 0);
  if (!ULEB128) {
    operator new();
  }
  uint64_t v9 = *(void *)v6;
  uint64_t v10 = *(unsigned int *)(v6 + 16);
  int v11 = sub_1CD5E2670(*(void *)v6, *(_DWORD *)(v6 + 16), ULEB128);
  if ((int *)(v9 + 32 * v10) == v11)
  {
    uint64_t v16 = 22;
    uint64_t v17 = (void *)std::generic_category();
    sub_1CD06481C();
  }
  llvm::DWARFDebugNames::Entry::Entry(&v16, v6, (uint64_t)v11);
  if (v18)
  {
    long long v12 = (unsigned __int16 *)v17;
    unint64_t v13 = *(unsigned __int16 *)(v6 + 34) | ((unint64_t)*(unsigned __int8 *)(v6 + 32) << 24);
    uint64_t v14 = 48 * v18;
    do
    {
      unint64_t v6 = v13 | v6 & 0xFFFF000000000000;
      if ((llvm::DWARFFormValue::extractValue(v12, v7, a2, v6, 0, 0) & 1) == 0)
      {
        std::generic_category();
        sub_1CD06481C();
      }
      v12 += 24;
      v14 -= 48;
    }
    while (v14);
    BOOL v15 = v18 == 0;
  }
  else
  {
    BOOL v15 = 1;
  }
  *(unsigned char *)(a3 + 184) &= ~1u;
  *(void *)a3 = &unk_1F2618988;
  *(void *)(a3 + 8) = a3 + 24;
  *(void *)(a3 + 16) = 0x300000000;
  if (!v15) {
    sub_1CD5E235C(a3 + 8, (uint64_t)&v17);
  }
  *(void *)a3 = &unk_1F2618838;
  *(_OWORD *)(a3 + 168) = v19[9];
  uint64_t v16 = (uint64_t)&unk_1F2618988;
  if (v17 != v19) {
    free(v17);
  }
}

uint64_t llvm::DWARFDebugNames::dump(uint64_t this, llvm::raw_ostream *a2)
{
  v5[0] = &unk_1F26454D8;
  v5[1] = a2;
  int v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v2 = *(unsigned int *)(this + 80);
  if (v2)
  {
    uint64_t v3 = *(llvm::DWARFDebugNames::NameIndex **)(this + 72);
    uint64_t v4 = 160 * v2;
    do
    {
      this = llvm::DWARFDebugNames::NameIndex::dump(v3, (uint64_t)v5);
      uint64_t v3 = (llvm::DWARFDebugNames::NameIndex *)((char *)v3 + 160);
      v4 -= 160;
    }
    while (v4);
  }
  return this;
}

uint64_t sub_1CD5E2110(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 176) + 4) | 0x10000u;
}

void sub_1CD5E2124()
{
}

llvm::raw_ostream *sub_1CD5E2138(int a1, llvm::raw_ostream *a2)
{
  return sub_1CB8E509C(a2, "Sentinel");
}

void *sub_1CD5E2148()
{
  return &llvm::DWARFDebugNames::SentinelError::ID;
}

BOOL sub_1CD5E2154(uint64_t a1, void *a2)
{
  return a2 == &llvm::DWARFDebugNames::SentinelError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void *sub_1CD5E2174(uint64_t a1)
{
  uint64_t v2 = *(llvm::raw_ostream **)(a1 + 8);
  uint64_t v3 = *(const void **)(a1 + 24);
  size_t v4 = *(void *)(a1 + 32);
  uint64_t result = (void *)*((void *)v2 + 4);
  if (v4 <= *((void *)v2 + 3) - (void)result)
  {
    if (v4)
    {
      uint64_t result = memcpy(result, v3, v4);
      *((void *)v2 + 4) += v4;
    }
  }
  else
  {
    uint64_t result = llvm::raw_ostream::write(v2, (const char *)v3, v4);
  }
  if (*(int *)(a1 + 16) >= 1)
  {
    int v6 = 0;
    do
    {
      uint64_t result = sub_1CB8E509C(*(llvm::raw_ostream **)(a1 + 8), "  ");
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 16));
  }
  return result;
}

void sub_1CD5E2210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  memset(__p, 0, sizeof(__p));
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  BOOL v15 = __p;
  int v14 = 0;
  uint64_t v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v5 = *a4;
  uint64_t v6 = *a5;
  v17[0] = &unk_1F2618A48;
  v17[1] = a3;
  v17[2] = v5;
  v17[3] = v6;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v7, (uint64_t)v17);
  operator new();
}

uint64_t sub_1CD5E231C(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1CD5E235C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    size_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = (_DWORD *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        if (v9) {
          memmove(*(void **)a1, v4, 48 * v9);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v9)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10) {
          memmove(*(void **)a1, v4, 48 * v10);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *v7;
        if (v10 != v11) {
          memcpy((void *)(*(void *)a1 + 48 * v10), (const void *)(*(void *)a2 + 48 * v10), *(void *)a2 + 48 * v11 - (*(void *)a2 + 48 * v10));
        }
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        size_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    _DWORD *v7 = 0;
  }
  return a1;
}

void sub_1CD5E2484()
{
}

llvm::raw_ostream *sub_1CD5E2498(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD5E1098(*(unsigned __int16 **)(a1 + 8), a2);
}

void sub_1CD5E24A0()
{
}

llvm::raw_ostream *sub_1CD5E24B4(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD5E24BC(*(unsigned int **)(a1 + 8), a2);
}

llvm::raw_ostream *sub_1CD5E24BC(unsigned int *a1, llvm::raw_ostream *a2)
{
  size_t v4 = llvm::dwarf::IndexString((llvm::dwarf *)*a1);
  if (v5)
  {
    uint64_t v6 = v4;
    size_t v7 = v5;
    int v8 = (void *)*((void *)a2 + 4);
    if (v5 <= *((void *)a2 + 3) - (void)v8)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(v8, v6, v5);
      *((void *)a2 + 4) += v7;
    }
    else
    {
      return llvm::raw_ostream::write(a2, v6, v5);
    }
  }
  else
  {
    uint64_t v10 = sub_1CB8E509C(a2, "DW_");
    uint64_t v11 = sub_1CB8E509C(v10, "IDX");
    char v12 = sub_1CB8E509C(v11, "_unknown_");
    uint64_t v13 = *a1;
    v14[0] = &unk_1F2618A08;
    v14[1] = "%x";
    v14[2] = v13;
    return llvm::raw_ostream::operator<<(v12, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_1CD5E25C0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

uint64_t sub_1CD5E25F8(uint64_t a1, __int16 a2)
{
  __int16 v8 = a2;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v3 = (_OWORD *)sub_1CC1B48A4(a1, (unint64_t)&v8);
  size_t v4 = (_OWORD *)(*(void *)a1 + 48 * *(unsigned int *)(a1 + 8));
  long long v6 = v3[1];
  long long v5 = v3[2];
  *size_t v4 = *v3;
  v4[1] = v6;
  v4[2] = v5;
  LODWORD(v4) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  return *(void *)a1 + 48 * v4 - 48;
}

int *sub_1CD5E2670(uint64_t a1, unsigned int a2, int a3)
{
  if (a2)
  {
    unsigned int v3 = a2 - 1;
    size_t v4 = (int *)(a1 + 32 * ((37 * a3) & (a2 - 1)));
    int v5 = *v4;
    if (*v4 == a3) {
      return v4;
    }
    int v7 = 1;
    LODWORD(v8) = (37 * a3) & v3;
    while (v5)
    {
      int v9 = v8 + v7++;
      uint64_t v8 = v9 & v3;
      int v5 = *(_DWORD *)(a1 + 32 * v8);
      if (v5 == a3) {
        return (int *)(a1 + 32 * v8);
      }
    }
  }
  uint64_t v8 = a2;
  return (int *)(a1 + 32 * v8);
}

uint64_t sub_1CD5E26D4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24));
}

llvm::raw_ostream *llvm::DWARFCompileUnit::dump(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3)
{
  v47[4] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a3 + 19))
  {
    int v5 = result;
    if (*((unsigned char *)result + 35)) {
      int v6 = 16;
    }
    else {
      int v6 = 8;
    }
    uint64_t v7 = *((void *)result + 3);
    v44[0] = &unk_1F25FF808;
    v44[1] = "0x%08llx";
    v44[2] = v7;
    uint64_t v8 = llvm::raw_ostream::operator<<(a2, (uint64_t)v44);
    int v9 = sub_1CB8E509C(v8, ": Compile Unit:");
    uint64_t v10 = sub_1CB8E509C(v9, " length = ");
    uint64_t v11 = *((void *)v5 + 5);
    unint64_t v40 = (llvm::raw_ostream *)&unk_1F2618A68;
    unint64_t v41 = "0x%0*llx";
    LODWORD(v42) = v6;
    uint64_t v43 = v11;
    uint64_t v12 = llvm::raw_ostream::operator<<(v10, (uint64_t)&v40);
    uint64_t v13 = sub_1CB8E509C(v12, ", format = ");
    BOOL v15 = llvm::dwarf::FormatString(*((unsigned __int8 *)v5 + 35));
    size_t v16 = v14;
    uint64_t v17 = (void *)*((void *)v13 + 4);
    if (v14 <= *((void *)v13 + 3) - (void)v17)
    {
      if (v14)
      {
        memcpy(v17, v15, v14);
        *((void *)v13 + 4) += v16;
      }
    }
    else
    {
      llvm::raw_ostream::write(v13, v15, v14);
    }
    unsigned int v18 = sub_1CB8E509C(v13, ", version = ");
    uint64_t v19 = *((unsigned __int16 *)v5 + 16);
    v39[0] = &unk_1F2618A88;
    v39[1] = "0x%04x";
    v39[2] = v19;
    llvm::raw_ostream::operator<<(v18, (uint64_t)v39);
    if (*((unsigned __int16 *)v5 + 16) >= 5u)
    {
      uint64_t v20 = sub_1CB8E509C(a2, ", unit_type = ");
      char v22 = llvm::dwarf::UnitTypeString((llvm::dwarf *)*((unsigned __int8 *)v5 + 96));
      size_t v23 = v21;
      unint64_t v24 = (void *)*((void *)v20 + 4);
      if (v21 <= *((void *)v20 + 3) - (void)v24)
      {
        if (v21)
        {
          memcpy(v24, v22, v21);
          *((void *)v20 + 4) += v23;
        }
      }
      else
      {
        llvm::raw_ostream::write(v20, v22, v21);
      }
    }
    unint64_t v25 = sub_1CB8E509C(a2, ", abbr_offset = ");
    uint64_t v26 = *((void *)v5 + 6);
    unint64_t v40 = (llvm::raw_ostream *)&unk_1F25FF808;
    unint64_t v41 = "0x%04llx";
    uint64_t v42 = v26;
    llvm::raw_ostream::operator<<(v25, (uint64_t)&v40);
    if (!llvm::DWARFUnit::getAbbreviations(v5)) {
      sub_1CB8E509C(a2, " (invalid)");
    }
    BOOL v27 = sub_1CB8E509C(a2, ", addr_size = ");
    uint64_t v28 = *((unsigned __int8 *)v5 + 34);
    unint64_t v40 = (llvm::raw_ostream *)&unk_1F260ED30;
    unint64_t v41 = "0x%02x";
    uint64_t v42 = v28;
    llvm::raw_ostream::operator<<(v27, (uint64_t)&v40);
    if (*((unsigned __int16 *)v5 + 16) >= 5u && (*((unsigned char *)v5 + 96) & 0xFE) == 4)
    {
      BOOL v29 = sub_1CB8E509C(a2, ", DWO_id = ");
      llvm::DWARFUnit::extractDIEsIfNeeded(v5, 1);
      uint64_t v30 = *((void *)v5 + 10);
      unint64_t v40 = (llvm::raw_ostream *)&unk_1F25FF808;
      unint64_t v41 = "0x%016llx";
      uint64_t v42 = v30;
      llvm::raw_ostream::operator<<(v29, (uint64_t)&v40);
    }
    unint64_t v31 = sub_1CB8E509C(a2, " (next unit at ");
    uint64_t v32 = 12;
    if (!*((unsigned char *)v5 + 35)) {
      uint64_t v32 = 4;
    }
    uint64_t v33 = *((void *)v5 + 5) + *((void *)v5 + 3) + v32;
    unint64_t v40 = (llvm::raw_ostream *)&unk_1F25FF808;
    unint64_t v41 = "0x%08llx";
    uint64_t v42 = v33;
    uint64_t v34 = llvm::raw_ostream::operator<<(v31, (uint64_t)&v40);
    sub_1CB8E509C(v34, ")\n");
    llvm::DWARFUnit::extractDIEsIfNeeded(v5, 0);
    unint64_t v35 = (const char *)*((void *)v5 + 36);
    uint64_t v36 = (const char *)*((void *)v5 + 37);
    BOOL v37 = v35 == v36;
    if (v35 == v36) {
      unint64_t v38 = 0;
    }
    else {
      unint64_t v38 = v5;
    }
    if (v37) {
      unint64_t v35 = 0;
    }
    unint64_t v40 = v38;
    unint64_t v41 = v35;
    if (v38 && v35)
    {
      *(_OWORD *)unint64_t v45 = *(_OWORD *)a3;
      *(void *)&v45[14] = *(void *)(a3 + 14);
      sub_1CC66D518((uint64_t)&v46, a3 + 24);
      sub_1CC66D518((uint64_t)v47, a3 + 56);
      llvm::DWARFDie::dump((uint64_t *)&v40, a2, 0, (uint64_t)v45);
      return (llvm::raw_ostream *)sub_1CD5E15A8(v45);
    }
    else
    {
      return sub_1CB8E509C(a2, "<compile unit can't be parsed!>\n\n");
    }
  }
  return result;
}

void llvm::DWARFCompileUnit::~DWARFCompileUnit(llvm::DWARFCompileUnit *this)
{
  llvm::DWARFUnit::~DWARFUnit(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD5E2B90(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1CD5E2BCC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16));
}

uint64_t llvm::DWARFContext::getDebugAbbrev(llvm::DWARFContext *this)
{
  uint64_t result = *((void *)this + 17);
  if (!result)
  {
    (*(void (**)(void))(**((void **)this + 65) + 72))(*((void *)this + 65));
    (*(void (**)(void))(**((void **)this + 65) + 40))(*((void *)this + 65));
    operator new();
  }
  return result;
}

uint64_t llvm::DWARFContext::getDebugAbbrevDWO(llvm::DWARFContext *this)
{
  uint64_t result = *((void *)this + 42);
  if (!result)
  {
    (*(void (**)(void))(**((void **)this + 65) + 248))(*((void *)this + 65));
    (*(void (**)(void))(**((void **)this + 65) + 40))(*((void *)this + 65));
    operator new();
  }
  return result;
}

uint64_t llvm::DWARFContext::getCUIndex(llvm::DWARFContext *this)
{
  uint64_t result = *((void *)this + 14);
  if (!result)
  {
    (*(void (**)(void))(**((void **)this + 65) + 360))(*((void *)this + 65));
    (*(void (**)(void))(**((void **)this + 65) + 40))(*((void *)this + 65));
    operator new();
  }
  return result;
}

uint64_t llvm::DWARFContext::getTUIndex(llvm::DWARFContext *this)
{
  uint64_t result = *((void *)this + 16);
  if (!result)
  {
    (*(void (**)(void))(**((void **)this + 65) + 376))(*((void *)this + 65));
    (*(void (**)(void))(**((void **)this + 65) + 40))(*((void *)this + 65));
    operator new();
  }
  return result;
}

uint64_t llvm::DWARFContext::parseDWOUnits(uint64_t this, char a2)
{
  char v7 = a2;
  if (!*(_DWORD *)(this + 248))
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(this + 520);
    uint64_t v5 = v2;
    int v6 = &v7;
    (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t *))(*(void *)v3 + 232))(v3, sub_1CC683D94, &v5);
    *(_DWORD *)(v2 + 296) = *(_DWORD *)(v2 + 248);
    uint64_t v4 = *(void *)(v2 + 520);
    uint64_t v5 = v2;
    int v6 = &v7;
    return (*(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t *))(*(void *)v4 + 240))(v4, sub_1CC683DAC, &v5);
  }
  return this;
}

uint64_t llvm::DWARFContext::parseNormalUnits(uint64_t this)
{
  if (!*(_DWORD *)(this + 24))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 520);
    uint64_t v4 = v1;
    (*(void (**)(uint64_t, uint64_t (*)(llvm::DWARFContext **, uint64_t), uint64_t *))(*(void *)v2 + 56))(v2, sub_1CC683D6C, &v4);
    *(_DWORD *)(v1 + 72) = *(_DWORD *)(v1 + 24);
    uint64_t v3 = *(void *)(v1 + 520);
    uint64_t v4 = v1;
    return (*(uint64_t (**)(uint64_t, uint64_t (*)(llvm::DWARFContext **, uint64_t), uint64_t *))(*(void *)v3 + 64))(v3, sub_1CC683D80, &v4);
  }
  return this;
}

llvm::DWARFUnit *sub_1CD5E31EC(llvm::DWARFUnit *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  llvm::DWARFUnit::extractDIEsIfNeeded(a1, 0);
  uint64_t v4 = (void *)*((void *)v3 + 36);
  uint64_t v5 = (void *)*((void *)v3 + 37);
  if (v5 != v4)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
    do
    {
      unint64_t v7 = v6 >> 1;
      uint64_t v8 = &v4[3 * (v6 >> 1)];
      unint64_t v10 = *v8;
      int v9 = v8 + 3;
      v6 += ~(v6 >> 1);
      if (v10 < a2) {
        uint64_t v4 = v9;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    while (v6);
  }
  if (v4 == v5 || *v4 != a2) {
    return 0;
  }
  return v3;
}

void llvm::DWARFContext::getLineTableForUnit(llvm::DWARFContext *this, llvm::DWARFUnit *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  llvm::DWARFContext::getLineTableForUnit((uint64_t)this, (uint64_t)a2, (void (*)(void, void))sub_1CD5E3A98, (uint64_t)this + 488, (uint64_t)&v11);
  if (v12)
  {
    uint64_t v10 = v11;
    uint64_t v11 = 0;
    uint64_t v3 = *((void *)this + 64);
    if (!v3)
    {
      sub_1CB920400();
      llvm::DWARFContext::getLineTableForUnit(v5, v6, v7, v8, v9);
      return;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v10);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  if (v12)
  {
    uint64_t v4 = v11;
    uint64_t v11 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
}

void llvm::DWARFContext::getLineTableForUnit(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void, void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!*(void *)(a1 + 160)) {
    operator new();
  }
  llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)a2, 1);
  uint64_t v10 = *(llvm::DWARFUnit **)(a2 + 288);
  uint64_t v11 = *(llvm::DWARFUnit **)(a2 + 296);
  BOOL v12 = v10 == v11;
  if (v10 == v11) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = (llvm::DWARFUnit *)a2;
  }
  if (v12) {
    uint64_t v10 = 0;
  }
  v35[0] = v13;
  v35[1] = v10;
  if (v13) {
    BOOL v14 = v10 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    goto LABEL_13;
  }
  llvm::DWARFDie::find(v35, 16, &v29);
  if (!v34) {
    goto LABEL_13;
  }
  uint64_t AsSectionOffset = llvm::DWARFFormValue::getAsSectionOffset((llvm::DWARFFormValue *)&v29);
  if (!v16) {
    goto LABEL_13;
  }
  uint64_t v17 = *(void **)(a2 + 56);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(*v17 + 4);
    if (v18)
    {
      unint64_t v19 = 0;
      uint64_t v20 = *(int **)(*v17 + 24);
      uint64_t v21 = 8 * v18;
      while (1)
      {
        int v22 = *v20++;
        if (v22 == 4) {
          break;
        }
        v19 += 8;
        if (v21 == v19) {
          goto LABEL_22;
        }
      }
      uint64_t v17 = (void *)v17[2];
      if (v17) {
        uint64_t v17 = (void *)LODWORD(v17[v19 / 8]);
      }
    }
    else
    {
LABEL_22:
      uint64_t v17 = 0;
    }
  }
  size_t v23 = (void *)((char *)v17 + AsSectionOffset);
  LineTable = llvm::DWARFDebugLine::getLineTable(*(llvm::DWARFDebugLine **)(a1 + 160), (unint64_t)v17 + AsSectionOffset);
  if (LineTable)
  {
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(void *)a5 = LineTable;
    return;
  }
  unint64_t v25 = *(long long **)(a2 + 144);
  if ((unint64_t)v23 < *((void *)v25 + 1))
  {
    uint64_t v26 = *(void *)(a1 + 520);
    char v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26);
    char v28 = *(unsigned char *)(a2 + 34);
    long long v29 = *v25;
    char v30 = v27;
    char v31 = v28;
    uint64_t v32 = v26;
    uint64_t v33 = v25;
    llvm::DWARFDebugLine::getOrParseLineTable(*(uint64_t ***)(a1 + 160), (uint64_t)&v29, v23, a1, a2, a3, a4, a5);
  }
  else
  {
LABEL_13:
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(void *)a5 = 0;
  }
}

void *sub_1CD5E35A8(void *a1)
{
  uint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  sub_1CD5E35F4(a1 + 1);
  return a1;
}

void *sub_1CD5E35F4(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1CD5E3648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, void *a7@<X8>)
{
  unint64_t v26 = a3;
  if (*a4 < a3 || (unint64_t)*a4 >= *(void *)(a2 + 8))
  {
    uint64_t v18 = std::generic_category();
    *(void *)&v24[0] = a6;
    unint64_t v19 = "invalid %s list offset 0x%llx";
    uint64_t v21 = 22;
    uint64_t v20 = a4;
LABEL_14:
    sub_1CD5E37EC(v21, (uint64_t)v18, (uint64_t)v19, (uint64_t *)v24, v20);
  }
  *(void *)(a1 + 8) = *(void *)a1;
  while (1)
  {
    long long v13 = *(_OWORD *)(a2 + 16);
    v22[0] = *(_OWORD *)a2;
    v22[1] = v13;
    uint64_t v23 = *(void *)(a2 + 32);
    uint64_t result = llvm::RangeListEntry::extract((uint64_t)v24, (uint64_t)v22, a4, a7);
    if (*a7) {
      return result;
    }
    unint64_t v15 = *(void *)(a1 + 8);
    if (v15 >= *(void *)(a1 + 16))
    {
      uint64_t result = (uint64_t)sub_1CC682688((void **)a1, (uint64_t)v24);
    }
    else
    {
      long long v16 = v24[0];
      long long v17 = v24[1];
      *(void *)(v15 + 32) = v25;
      *(_OWORD *)unint64_t v15 = v16;
      *(_OWORD *)(v15 + 16) = v17;
      uint64_t result = v15 + 40;
    }
    *(void *)(a1 + 8) = result;
    if (!BYTE8(v24[0])) {
      break;
    }
    if (*(void *)(a2 + 8) <= (unint64_t)*a4)
    {
      uint64_t v18 = std::generic_category();
      *(void *)&v24[0] = a5;
      unint64_t v19 = "no end of list marker detected at end of %s table starting at offset 0x%llx";
      uint64_t v20 = (uint64_t *)&v26;
      uint64_t v21 = 92;
      goto LABEL_14;
    }
  }
  *a7 = 0;
  return result;
}

void sub_1CD5E3788(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1CD5E3788(a1, *a2);
    sub_1CD5E3788(a1, a2[1]);
    uint64_t v5 = (void *)a2[5];
    if (v5)
    {
      a2[6] = v5;
      operator delete(v5);
    }
    operator delete(a2);
  }
}

void sub_1CD5E37EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  memset(__p, 0, sizeof(__p));
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  unint64_t v15 = __p;
  int v14 = 0;
  unint64_t v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v5 = *a4;
  uint64_t v6 = *a5;
  v17[0] = &unk_1F2618CF0;
  v17[1] = a3;
  v17[2] = v5;
  v17[3] = v6;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v7, (uint64_t)v17);
  operator new();
}

uint64_t sub_1CD5E3928(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

void sub_1CD5E3960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  memset(__p, 0, sizeof(__p));
  int v6 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v13 = __p;
  int v12 = 0;
  uint64_t v5 = &unk_1F2646F30;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = *a4;
  v15[0] = &unk_1F25FF060;
  v15[1] = a3;
  v15[2] = v4;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v5, (uint64_t)v15);
  operator new();
}

void *sub_1CD5E3A98(uint64_t a1, void *a2)
{
  uint64_t v5 = (void *)*a2;
  *a2 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    (*(void (**)(uint64_t, void **))(*(void *)v2 + 48))(v2, &v5);
    uint64_t result = v5;
    if (v5) {
      return (void *)(*(uint64_t (**)(void *))(*v5 + 8))(v5);
    }
  }
  else
  {
    sub_1CB920400();
    return sub_1CD5E3B20(v4);
  }
  return result;
}

void *sub_1CD5E3B20(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    sub_1CC683B20((uint64_t)(a1 + 5), v3);
  }
  uint64_t v4 = a1[4];
  a1[4] = 0;
  if (v4) {
    MEMORY[0x1D25D9CB0](v4, 0x1000C8052888210);
  }
  uint64_t v5 = a1[3];
  a1[3] = 0;
  if (v5) {
    MEMORY[0x1D25D9CB0](v5, 0x1000C8052888210);
  }
  return a1;
}

void *sub_1CD5E3BA8(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    uint64_t v9 = 0;
LABEL_5:
    int v6 = sub_1CD5E3C64(a1, a2, v9);
    *int v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = (37 * *a2) & (v3 - 1);
  int v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    char v10 = 0;
    int v11 = 1;
    while (v7 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == -2;
      }
      if (v12) {
        char v10 = v6;
      }
      unsigned int v13 = v5 + v11++;
      unsigned int v5 = v13 & v4;
      int v6 = (void *)(*(void *)a1 + 16 * (v13 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v10) {
      uint64_t v9 = v10;
    }
    else {
      uint64_t v9 = v6;
    }
    goto LABEL_5;
  }
  return v6;
}

void *sub_1CD5E3C64(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1CD5E3DDC(a1, 2 * v6);
    uint64_t v7 = *a2;
    int v9 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v10 = (37 * *a2) & v9;
    a3 = (void *)(*(void *)a1 + 16 * v10);
    uint64_t v11 = *a3;
    if (*a2 != *a3)
    {
      BOOL v12 = 0;
      int v13 = 1;
      while (v11 != -1)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -2;
        }
        if (v14) {
          BOOL v12 = a3;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & v9;
        a3 = (void *)(*(void *)a1 + 16 * v10);
        uint64_t v11 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a3;
      goto LABEL_4;
    }
    sub_1CD5E3DDC(a1, v6);
    uint64_t v7 = *a2;
    int v16 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v17 = (37 * *a2) & v16;
    a3 = (void *)(*(void *)a1 + 16 * v17);
    uint64_t v18 = *a3;
    if (*a2 != *a3)
    {
      BOOL v12 = 0;
      int v19 = 1;
      while (v18 != -1)
      {
        if (v12) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == -2;
        }
        if (v20) {
          BOOL v12 = a3;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        a3 = (void *)(*(void *)a1 + 16 * v17);
        uint64_t v18 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
LABEL_20:
      if (v12) {
        a3 = v12;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD5E3DDC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5D4AB0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CD5E3EA8(uint64_t a1, char *a2)
{
  if (a2)
  {
    v6[3] = v2;
    v6[4] = v3;
    sub_1CD5E3EA8(a1, *(void *)a2);
    sub_1CD5E3EA8(a1, *((void *)a2 + 1));
    v6[0] = (void **)(a2 + 56);
    sub_1CC683C88(v6);
    operator delete(a2);
  }
}

char **sub_1CD5E3F0C(char **a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    int v4 = v2 - 144;
    uint64_t v5 = 152 * v3;
    do
    {
      sub_1CD5E3F74((char **)&v4[v5]);
      v5 -= 152;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

char **sub_1CD5E3F74(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = v3 << 6;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 32];
      if (&v2[v4 - 8] != v5) {
        free(v5);
      }
      v4 -= 64;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CD5E3FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  memset(__p, 0, sizeof(__p));
  int v6 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  int v13 = __p;
  int v12 = 0;
  uint64_t v5 = &unk_1F2646F30;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = *a4;
  v15[0] = &unk_1F25FF808;
  v15[1] = a3;
  v15[2] = v4;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v5, (uint64_t)v15);
  operator new();
}

unint64_t llvm::DWARFDataExtractor::getRelocatedValue(uint64_t a1, int a2, unint64_t *a3, void *a4, void *a5)
{
  if (a4) {
    *a4 = -1;
  }
  if (*(void *)(a1 + 32))
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 384))(&v14);
    uint64_t Unsigned = llvm::DataExtractor::getUnsigned((void *)a1, a3, a2, a5);
    if (v20)
    {
      if (a5 && *a5) {
        return Unsigned;
      }
      if (a4) {
        *a4 = v14;
      }
      uint64_t Unsigned = llvm::object::resolveRelocation(v19, v15, v15[2], Unsigned, v12);
      if (v17) {
        uint64_t Unsigned = llvm::object::resolveRelocation(v19, &v16, v18, Unsigned, v13);
      }
    }
    if (a5 && !*a5) {
      *a5 = 0;
    }
    return Unsigned;
  }

  return llvm::DataExtractor::getUnsigned((void *)a1, a3, a2, a5);
}

BOOL llvm::DWARFAbbreviationDeclarationSet::extract(uint64_t a1, long long *a2, uint64_t *a3)
{
  v19[17] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  int v6 = (uint64_t *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  for (uint64_t i = *(void *)(a1 + 24); i != v7; i -= 160)
  {
    uint64_t v9 = *(void **)(i - 152);
    if ((void *)(i - 136) != v9) {
      free(v9);
    }
  }
  *(void *)(a1 + 24) = v7;
  uint64_t v10 = *a3;
  *(void *)a1 = *a3;
  llvm::DWARFAbbreviationDeclaration::DWARFAbbreviationDeclaration((llvm::DWARFAbbreviationDeclaration *)&v17);
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  if (llvm::DWARFAbbreviationDeclaration::extract((uint64_t)&v17, (uint64_t *)&v15, a3))
  {
    int v11 = 0;
    while (*(_DWORD *)(a1 + 8))
    {
      if (++v11 != v17)
      {
        int v12 = -1;
        int v11 = v17;
LABEL_12:
        *(_DWORD *)(a1 + 8) = v12;
      }
      sub_1CC685E78(v6, (uint64_t)&v17);
      long long v15 = *a2;
      uint64_t v16 = *((void *)a2 + 2);
      if ((llvm::DWARFAbbreviationDeclaration::extract((uint64_t)&v17, (uint64_t *)&v15, a3) & 1) == 0) {
        goto LABEL_14;
      }
    }
    int v12 = v17;
    int v11 = v17;
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v13 = *a3;
  if (v18 != v19) {
    free(v18);
  }
  return v10 != v13;
}

_DWORD *llvm::DWARFAbbreviationDeclarationSet::getAbbreviationDeclaration(llvm::DWARFAbbreviationDeclarationSet *this, unsigned int a2)
{
  uint64_t v3 = *((unsigned int *)this + 2);
  if (v3 == -1)
  {
    uint64_t result = (_DWORD *)*((void *)this + 2);
    int v6 = (_DWORD *)*((void *)this + 3);
    while (result != v6)
    {
      if (*result == a2) {
        return result;
      }
      result += 40;
    }
    return 0;
  }
  if (a2 < v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 2);
  if (v3 - 0x3333333333333333 * ((*((void *)this + 3) - v4) >> 5) <= (unint64_t)a2) {
    return 0;
  }
  return (_DWORD *)(v4 + 160 * (a2 - v3));
}

void llvm::DWARFAbbreviationDeclarationSet::getCodeRange(llvm::DWARFAbbreviationDeclarationSet *this@<X0>, void *a2@<X8>)
{
  __p = 0;
  unint64_t v26 = 0;
  unint64_t v27 = 0;
  sub_1CC34AE58((uint64_t)&__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 5));
  uint64_t v4 = (int *)*((void *)this + 2);
  uint64_t v5 = (int *)*((void *)this + 3);
  int v6 = v26;
  while (v4 != v5)
  {
    int v7 = *v4;
    LODWORD(v16) = *v4;
    if ((unint64_t)v6 >= v27)
    {
      int v6 = sub_1CBFFBD60((char **)&__p, &v16);
    }
    else
    {
      *(_DWORD *)int v6 = v7;
      v6 += 4;
    }
    unint64_t v26 = v6;
    v4 += 40;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v17 = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  unint64_t v24 = a2;
  int v23 = 0;
  uint64_t v16 = &unk_1F2646F30;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v8 = (char *)__p;
  if (__p != v6)
  {
    do
    {
      unsigned int v11 = *(_DWORD *)v8;
      uint64_t v10 = v8 + 4;
      unsigned int v9 = v11;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v16, v11);
      unsigned int v12 = v11;
      while (1)
      {
        unsigned int v13 = v12;
        uint64_t v14 = v10;
        if (v10 == v6) {
          break;
        }
        v10 += 4;
        unsigned int v12 = *(_DWORD *)v14;
        if (*(_DWORD *)v14 != v13 + 1)
        {
          uint64_t v8 = v14;
          goto LABEL_13;
        }
      }
      uint64_t v8 = v6;
LABEL_13:
      if (v9 != v13)
      {
        long long v15 = sub_1CB8E509C((llvm::raw_ostream *)&v16, "-");
        llvm::raw_ostream::operator<<(v15, v13);
      }
      if (v14 != v6) {
        sub_1CB8E509C((llvm::raw_ostream *)&v16, ", ");
      }
    }
    while (v8 != v6);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v16);
  if (__p)
  {
    unint64_t v26 = (char *)__p;
    operator delete(__p);
  }
}

__n128 llvm::DWARFDebugAbbrev::extract(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_1CD5E3EA8(a1, *(char **)(a1 + 8));
  *(void *)a1 = v4;
  *uint64_t v4 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = (__n128 *)(a1 + 32);
  __n128 result = *a2;
  if (*(unsigned char *)(a1 + 56))
  {
    *(_WORD *)(a1 + 48) = a2[1].n128_u16[0];
    *uint64_t v5 = result;
  }
  else
  {
    *(void *)(a1 + 48) = a2[1].n128_u64[0];
    *uint64_t v5 = result;
    *(unsigned char *)(a1 + 56) = 1;
  }
  return result;
}

void *llvm::DWARFDebugAbbrev::getAbbreviationDeclarationSet(llvm::DWARFDebugAbbrev *this, void **a2)
{
  uint64_t v4 = (void *)((char *)this + 8);
  uint64_t v5 = (void *)*((void *)this + 3);
  if (v5 != (void *)((char *)this + 8) && (void **)v5[4] == a2) {
    return v5 + 5;
  }
  int v7 = (void *)*v4;
  if (*v4)
  {
    uint64_t v5 = (void *)((char *)this + 8);
    do
    {
      unint64_t v8 = v7[4];
      BOOL v9 = v8 >= (unint64_t)a2;
      if (v8 >= (unint64_t)a2) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      if (v9) {
        uint64_t v5 = v7;
      }
      int v7 = (void *)*v10;
    }
    while (*v10);
    if (v5 != v4 && v5[4] <= (unint64_t)a2)
    {
      *((void *)this + 3) = v5;
      return v5 + 5;
    }
  }
  if (!*((unsigned char *)this + 56) || *((void *)this + 5) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v22 = a2;
  int v19 = 0;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  long long v16 = *((_OWORD *)this + 2);
  uint64_t v17 = *((void *)this + 6);
  uint64_t v18 = 0;
  uint64_t v6 = 0;
  if (llvm::DWARFAbbreviationDeclarationSet::extract((uint64_t)&v18, &v16, (uint64_t *)&v22))
  {
    v12[0] = a2;
    v12[1] = v18;
    int v13 = v19;
    long long v14 = v20;
    uint64_t v15 = v21;
    uint64_t v21 = 0;
    long long v20 = 0uLL;
    *((void *)this + 3) = sub_1CD5E48A8((uint64_t **)this, (unint64_t *)v12, (uint64_t)v12);
    int v23 = (void **)&v14;
    sub_1CC683C88(&v23);
    uint64_t v6 = *((void *)this + 3) + 40;
  }
  v12[0] = (void **)&v20;
  sub_1CC683C88(v12);
  return (void *)v6;
}

uint64_t *sub_1CD5E47BC(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v4 + v7;
      uint64_t v9 = *(void *)(v4 + v7 - 160);
      *(void *)(v6 + v7 - 152) = v6 + v7 - 136;
      __n128 result = (uint64_t *)(v6 + v7 - 152);
      *(result - 1) = v9;
      result[1] = 0x800000000;
      if (*(_DWORD *)(v4 + v7 - 144)) {
        __n128 result = (uint64_t *)sub_1CD4684F0((uint64_t)result, v8 - 152);
      }
      *(void *)(v6 + v7 - 8) = *(void *)(v8 - 8);
      v7 -= 160;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v10 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

char *sub_1CD5E48A8(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v5;
        unint64_t v9 = *((void *)v5 + 4);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *(char **)v8;
        uint64_t v6 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = (char *)*((void *)v8 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v8 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = (char *)(a1 + 1);
LABEL_10:
    uint64_t v10 = v8;
    uint64_t v8 = (char *)operator new(0x50uLL);
    uint64_t v11 = *(void *)(a3 + 8);
    *((void *)v8 + 4) = *(void *)a3;
    *((void *)v8 + 5) = v11;
    *((_DWORD *)v8 + 12) = *(_DWORD *)(a3 + 16);
    *(_OWORD *)(v8 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v8 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    *uint64_t v6 = (uint64_t *)v8;
    uint64_t v12 = (uint64_t *)**a1;
    int v13 = (uint64_t *)v8;
    if (v12)
    {
      *a1 = v12;
      int v13 = *v6;
    }
    sub_1CB8358B8(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

BOOL sub_1CD5E49A8@<W0>(unsigned int a1@<W0>, uint64_t a2@<X3>, uint64_t *a3@<X4>, void *a4@<X8>)
{
  BOOL result = sub_1CC687520(a1);
  if (!result)
  {
    memset(__p, 0, sizeof(__p));
    int v19 = 0;
    char v23 = 0;
    uint64_t v24 = 0;
    unint64_t v26 = __p;
    int v25 = 0;
    uint64_t v18 = &unk_1F2646F30;
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v9 = *a3;
    char v28 = &unk_1F25FF808;
    v29.i64[0] = a2;
    v29.i64[1] = v9;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v18, (uint64_t)&v28);
    uint64_t v10 = sub_1CB8E509C((llvm::raw_ostream *)&v18, " has unsupported address size: ");
    uint64_t v11 = llvm::raw_ostream::operator<<(v10, a1);
    sub_1CB8E509C(v11, " (supported are ");
    char v12 = 0;
    char v28 = &v30;
    __int16 v30 = 1026;
    char v31 = 8;
    int64x2_t v29 = vdupq_n_s64(3uLL);
    uint64_t v13 = 24;
    while (1)
    {
      unint64_t v14 = *((unsigned __int8 *)&v28 + v13);
      if (v12) {
        size_t v15 = 2;
      }
      else {
        size_t v15 = 0;
      }
      if (v15 <= v21 - (unint64_t)v22)
      {
        if (v12) {
          *v22++ = 8236;
        }
      }
      else
      {
        if (v12) {
          long long v16 = ", ";
        }
        else {
          long long v16 = 0;
        }
        llvm::raw_ostream::write((llvm::raw_ostream *)&v18, v16, v15);
      }
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v18, v14);
      ++v13;
      char v12 = 1;
      if (v13 == 27)
      {
        if (v28 != &v30) {
          free(v28);
        }
        uint64_t v17 = v22;
        if ((unint64_t)v22 >= v21)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v18, 41);
        }
        else
        {
          uint64_t v22 = (_WORD *)((char *)v22 + 1);
          *uint64_t v17 = 41;
        }
        operator new();
      }
    }
  }
  *a4 = 0;
  return result;
}

void sub_1CD5E4C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  memset(__p, 0, sizeof(__p));
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  size_t v15 = __p;
  int v14 = 0;
  unint64_t v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v5 = *a4;
  uint64_t v6 = *a5;
  v17[0] = &unk_1F2618D30;
  v17[1] = a3;
  v17[2] = v5;
  v17[3] = v6;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v7, (uint64_t)v17);
  operator new();
}

void sub_1CD5E4D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int16 *a5)
{
  memset(__p, 0, sizeof(__p));
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  size_t v15 = __p;
  int v14 = 0;
  unint64_t v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v5 = *a4;
  __int16 v6 = *a5;
  v17[0] = &unk_1F2618D50;
  v17[1] = a3;
  v17[2] = v5;
  __int16 v18 = v6;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v7, (uint64_t)v17);
  operator new();
}

void sub_1CD5E4E84(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5)
{
  memset(__p, 0, sizeof(__p));
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  size_t v15 = __p;
  int v14 = 0;
  unint64_t v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v5 = *a4;
  uint64_t v6 = *a5;
  v17[0] = &unk_1F2618A28;
  v17[1] = a3;
  int v18 = v5;
  uint64_t v19 = v6;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v7, (uint64_t)v17);
  operator new();
}

uint64_t sub_1CD5E4FC4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1CD5E4FFC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int16 *)(a1 + 24));
}

uint64_t *sub_1CD5E5034(uint64_t **a1, unint64_t *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  int v5 = v4;
  unint64_t v6 = *a2;
  v4[4] = *a2;
  unint64_t v7 = a1 + 1;
  int v8 = a1[1];
  if (v8)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v8;
        if (v6 >= v8[4]) {
          break;
        }
        int v8 = (uint64_t *)*v8;
        uint64_t v9 = v7;
        if (!*v7) {
          goto LABEL_8;
        }
      }
      int v8 = (uint64_t *)v8[1];
    }
    while (v8);
    uint64_t v9 = v7 + 1;
  }
  else
  {
    uint64_t v9 = a1 + 1;
  }
LABEL_8:
  *uint64_t v4 = 0;
  v4[1] = 0;
  v4[2] = (uint64_t)v7;
  *uint64_t v9 = v4;
  uint64_t v10 = (uint64_t *)**a1;
  uint64_t v11 = v4;
  if (v10)
  {
    *a1 = v10;
    uint64_t v11 = *v9;
  }
  sub_1CB8358B8(a1[1], v11);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v5;
}

void sub_1CD5E50F0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  memset(__p, 0, sizeof(__p));
  int v6 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v13 = __p;
  int v12 = 0;
  int v5 = &unk_1F2646F30;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = *a4;
  v15[0] = &unk_1F25FED10;
  v15[1] = a3;
  v15[2] = v4;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v5, (uint64_t)v15);
  operator new();
}

void sub_1CD5E5228(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5)
{
  memset(__p, 0, sizeof(__p));
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  size_t v15 = __p;
  int v14 = 0;
  uint64_t v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v5 = *a4;
  uint64_t v6 = *a5;
  v17[0] = &unk_1F2618E28;
  v17[1] = a3;
  int v18 = v5;
  uint64_t v19 = v6;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v7, (uint64_t)v17);
  operator new();
}

char *sub_1CD5E5368@<X0>(char **a1@<X0>, char **a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  int v5 = *a2;
  uint64_t v6 = v3;
  *a2 = 0;
  sub_1CD451630(&v6, &v5, a3);
  if (v5) {
    (*(void (**)(char *))(*(void *)v5 + 8))(v5);
  }
  BOOL result = v6;
  if (v6) {
    return (char *)(*(uint64_t (**)(char *))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t sub_1CD5E53FC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1CD5E5438(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t sub_1CD5E546C(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

uint64_t llvm::DWARFDebugInfoEntry::extractFast(llvm::DWARFDebugInfoEntry *this, const llvm::DWARFUnit *a2, unint64_t *a3, const llvm::DWARFDataExtractor *a4, unint64_t a5, int a6)
{
  unint64_t v8 = *a3;
  *(void *)this = *a3;
  *((_DWORD *)this + 2) = a6;
  if (v8 >= a5)
  {
    unint64_t v27 = std::generic_category();
    uint64_t v40 = *((void *)a2 + 3);
    uint64_t v28 = 12;
    if (!*((unsigned char *)a2 + 35)) {
      uint64_t v28 = 4;
    }
    uint64_t v39 = *((void *)a2 + 5) + v40 + v28;
    sub_1CD5E5860(22, (uint64_t)v27, (uint64_t)"DWARF unit from offset 0x%8.8llx incl. to offset 0x%8.8llx excl. tries to read DIEs at offset 0x%8.8llx", &v40, &v39, (uint64_t *)a3);
  }
  uint64_t ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)a4, (uint64_t *)a3, 0);
  if (ULEB128)
  {
    uint64_t v12 = ULEB128;
    Abbreviations = (llvm::DWARFAbbreviationDeclarationSet *)llvm::DWARFUnit::getAbbreviations(a2);
    if (!Abbreviations)
    {
      int64x2_t v29 = std::generic_category();
      uint64_t v40 = *((void *)a2 + 3);
      uint64_t v39 = *((void *)a2 + 6);
      sub_1CD5E4C08(22, (uint64_t)v29, (uint64_t)"DWARF unit at offset 0x%8.8llx contains invalid abbreviation set offset 0x%llx", &v40, &v39);
    }
    unint64_t v14 = (unint64_t)Abbreviations;
    AbbreviationDeclaration = llvm::DWARFAbbreviationDeclarationSet::getAbbreviationDeclaration(Abbreviations, v12);
    *((void *)this + 2) = AbbreviationDeclaration;
    if (!AbbreviationDeclaration)
    {
      __int16 v30 = std::generic_category();
      uint64_t v31 = *((void *)a2 + 3);
      llvm::DWARFAbbreviationDeclarationSet::getCodeRange((llvm::DWARFAbbreviationDeclarationSet *)v14, __p);
      if (v37 >= 0) {
        uint64_t v32 = __p;
      }
      else {
        uint64_t v32 = (void **)__p[0];
      }
      sub_1CD5E5974((uint64_t)&v38, 22, (uint64_t)v30, v31, v12, *a3, (uint64_t)v32);
    }
    unint64_t FixedAttributesByteSize = llvm::DWARFAbbreviationDeclaration::getFixedAttributesByteSize((uint64_t)AbbreviationDeclaration, (uint64_t)a2);
    if (v17)
    {
      *a3 += FixedAttributesByteSize;
    }
    else
    {
      uint64_t v19 = *((void *)this + 2);
      uint64_t v20 = *(unsigned int *)(v19 + 16);
      if (v20)
      {
        uint64_t v21 = *(void *)(v19 + 8);
        uint64_t v22 = 16 * v20;
        do
        {
          uint64_t ByteSize = llvm::DWARFAbbreviationDeclaration::AttributeSpec::getByteSize(v21, (uint64_t)a2);
          if (v24)
          {
            *a3 += ByteSize;
          }
          else
          {
            unsigned __int16 v25 = *(_WORD *)(v21 + 2);
            long long v34 = *(_OWORD *)a4;
            uint64_t v35 = *((void *)a4 + 2);
            unint64_t v14 = v14 & 0xFFFF000000000000 | *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2
                                                                                              + 18) << 32);
            if ((llvm::DWARFFormValue::skipValue(v25, (uint64_t *)&v34, a3, v14) & 1) == 0)
            {
              unint64_t v26 = std::generic_category();
              sub_1CD5E5A84((uint64_t)&v33, 22, (uint64_t)v26, *((void *)a2 + 3), *(_WORD *)(v21 + 2), *a3);
            }
          }
          v21 += 16;
          v22 -= 16;
        }
        while (v22);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
  return 1;
}

void sub_1CD5E5860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  memset(__p, 0, sizeof(__p));
  int v10 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  char v17 = __p;
  int v16 = 0;
  uint64_t v9 = &unk_1F2646F30;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v6 = *a4;
  uint64_t v7 = *a5;
  uint64_t v8 = *a6;
  v19[0] = &unk_1F2618EC8;
  v19[1] = a3;
  v19[2] = v6;
  v19[3] = v7;
  v19[4] = v8;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v9, (uint64_t)v19);
  operator new();
}

void sub_1CD5E5974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  memset(v17, 0, sizeof(v17));
  int v9 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  int v16 = v17;
  int v15 = 0;
  v7[5] = a7;
  uint64_t v8 = &unk_1F2646F30;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v7[0] = &unk_1F2618EE8;
  v7[1] = "DWARF unit at offset 0x%8.8llx contains invalid abbreviation %llu at offset 0x%8.8llx, valid abbreviations are %s";
  v7[2] = a4;
  v7[3] = a5;
  v7[4] = a6;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v8, (uint64_t)v7);
  operator new();
}

void sub_1CD5E5A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  memset(__p, 0, sizeof(__p));
  int v7 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v14 = __p;
  int v13 = 0;
  uint64_t v6 = &unk_1F2646F30;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v16[0] = &unk_1F2618F08;
  v16[1] = "DWARF unit at offset 0x%8.8llx contains invalid FORM_* 0x%hx at offset 0x%8.8llx";
  v16[2] = a4;
  __int16 v17 = a5;
  uint64_t v18 = a6;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v6, (uint64_t)v16);
  operator new();
}

uint64_t sub_1CD5E5B98(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t sub_1CD5E5BD8(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_1CD5E5C18(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t llvm::DWARFDebugLine::Prologue::clear(uint64_t this)
{
  *(void *)(this + 5) = 0;
  *(void *)this = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 31) = 0;
  *(void *)(this + 48) = *(void *)(this + 40);
  *(void *)(this + 72) = *(void *)(this + 64);
  *(void *)(this + 96) = *(void *)(this + 88);
  return this;
}

void llvm::DWARFDebugLine::Prologue::dump(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  v83[2] = *MEMORY[0x1E4F143B8];
  if (*(void *)a1)
  {
    if (*(unsigned char *)(a1 + 11)) {
      int v6 = 16;
    }
    else {
      int v6 = 8;
    }
    int v7 = sub_1CB8E509C(a2, "Line table prologue:\n");
    uint64_t v8 = *(void *)a1;
    v76 = (char *)&unk_1F2618A68;
    size_t v77 = (size_t)"    total_length: 0x%0*llx\n";
    LODWORD(v78) = v6;
    uint64_t v79 = v8;
    uint64_t v9 = llvm::raw_ostream::operator<<(v7, (uint64_t)&v76);
    uint64_t v10 = sub_1CB8E509C(v9, "          format: ");
    uint64_t v12 = llvm::dwarf::FormatString(*(unsigned __int8 *)(a1 + 11));
    size_t v13 = v11;
    uint64_t v14 = (void *)*((void *)v10 + 4);
    if (v11 <= *((void *)v10 + 3) - (void)v14)
    {
      if (v11)
      {
        memcpy(v14, v12, v11);
        *((void *)v10 + 4) += v13;
      }
    }
    else
    {
      llvm::raw_ostream::write(v10, v12, v11);
    }
    int v15 = sub_1CB8E509C(v10, "\n");
    uint64_t v16 = *(unsigned __int16 *)(a1 + 8);
    v64 = &unk_1F2618A88;
    v65 = "         version: %u\n";
    uint64_t v66 = v16;
    llvm::raw_ostream::operator<<(v15, (uint64_t)&v64);
    unsigned int v17 = *(unsigned __int16 *)(a1 + 8);
    if (v17 - 2 <= 3)
    {
      uint64_t v55 = a3;
      if (v17 >= 5)
      {
        uint64_t v18 = (void *)*(unsigned __int8 *)(a1 + 10);
        v76 = (char *)&unk_1F260ED30;
        size_t v77 = (size_t)"    address_size: %u\n";
        v78 = v18;
        uint64_t v19 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v76);
        uint64_t v20 = *(unsigned __int8 *)(a1 + 24);
        v64 = &unk_1F260ED30;
        v65 = " seg_select_size: %u\n";
        uint64_t v66 = v20;
        llvm::raw_ostream::operator<<(v19, (uint64_t)&v64);
      }
      uint64_t v21 = *(void *)(a1 + 16);
      v76 = (char *)&unk_1F2618A68;
      size_t v77 = (size_t)" prologue_length: 0x%0*llx\n";
      LODWORD(v78) = v6;
      uint64_t v79 = v21;
      uint64_t v22 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v76);
      uint64_t v23 = *(unsigned __int8 *)(a1 + 25);
      v64 = &unk_1F260ED30;
      v65 = " min_inst_length: %u\n";
      uint64_t v66 = v23;
      char v24 = llvm::raw_ostream::operator<<(v22, (uint64_t)&v64);
      uint64_t v25 = *(unsigned __int8 *)(a1 + 26);
      if (*(unsigned __int16 *)(a1 + 8) <= 3u) {
        unint64_t v26 = (const char *)&unk_1CFBD9D5D;
      }
      else {
        unint64_t v26 = "max_ops_per_inst: %u\n";
      }
      v63[0] = &unk_1F260ED30;
      v63[1] = v26;
      v63[2] = v25;
      unint64_t v27 = llvm::raw_ostream::operator<<(v24, (uint64_t)v63);
      uint64_t v28 = *(unsigned __int8 *)(a1 + 27);
      v62[0] = &unk_1F260ED30;
      v62[1] = " default_is_stmt: %u\n";
      v62[2] = v28;
      int64x2_t v29 = llvm::raw_ostream::operator<<(v27, (uint64_t)v62);
      uint64_t v30 = *(unsigned __int8 *)(a1 + 28);
      v61[0] = &unk_1F2618F28;
      v61[1] = "       line_base: %i\n";
      v61[2] = v30;
      uint64_t v31 = llvm::raw_ostream::operator<<(v29, (uint64_t)v61);
      uint64_t v32 = *(unsigned __int8 *)(a1 + 29);
      v60[0] = &unk_1F260ED30;
      v60[1] = "      line_range: %u\n";
      v60[2] = v32;
      uint64_t v33 = llvm::raw_ostream::operator<<(v31, (uint64_t)v60);
      uint64_t v34 = *(unsigned __int8 *)(a1 + 30);
      v59[0] = &unk_1F260ED30;
      v59[1] = "     opcode_base: %u\n";
      v59[2] = v34;
      llvm::raw_ostream::operator<<(v33, (uint64_t)v59);
      uint64_t v35 = *(void *)(a1 + 40);
      if (*(void *)(a1 + 48) != v35)
      {
        uint64_t v36 = 0;
        unsigned int v37 = 1;
        do
        {
          v76 = "standard_opcode_lengths[{0}] = {1}\n";
          size_t v77 = 35;
          v78 = v83;
          uint64_t v79 = 2;
          v80 = &unk_1F2618F48;
          char v81 = v37;
          v82[0] = &unk_1F2618F98;
          v82[1] = v35 + v36;
          v83[0] = &v80;
          v83[1] = v82;
          llvm::raw_ostream::operator<<(a2, (uint64_t)&v76);
          uint64_t v36 = v37;
          uint64_t v35 = *(void *)(a1 + 40);
          BOOL v38 = *(void *)(a1 + 48) - v35 == v37++;
        }
        while (!v38);
      }
      if (*(void *)(a1 + 64) != *(void *)(a1 + 72))
      {
        uint64_t v39 = 0;
        BOOL v57 = *(unsigned __int16 *)(a1 + 8) < 5u;
        unsigned int v40 = 1;
        do
        {
          v76 = (char *)&unk_1F25FED10;
          size_t v77 = (size_t)"include_directories[%3u] = ";
          v78 = (void *)(v57 + v40 - 1);
          llvm::raw_ostream::operator<<(a2, (uint64_t)&v76);
          unint64_t v41 = (unsigned __int16 *)(*(void *)(a1 + 64) + 48 * v39);
          *(_OWORD *)v73 = *(_OWORD *)v55;
          *(void *)&v73[14] = *(void *)(v55 + 14);
          sub_1CC66D518((uint64_t)&v74, v55 + 24);
          sub_1CC66D518((uint64_t)&v75, v55 + 56);
          llvm::DWARFFormValue::dump(v41, a2, (uint64_t)v73);
          sub_1CD5E15A8(v73);
          uint64_t v42 = (unsigned char *)*((void *)a2 + 4);
          if ((unint64_t)v42 >= *((void *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 10);
          }
          else
          {
            *((void *)a2 + 4) = v42 + 1;
            unsigned char *v42 = 10;
          }
          uint64_t v39 = v40;
          BOOL v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 4) == v40++;
        }
        while (!v38);
      }
      uint64_t v43 = *(void *)(a1 + 88);
      if (v43 != *(void *)(a1 + 96))
      {
        uint64_t v44 = 0;
        BOOL v56 = *(unsigned __int16 *)(a1 + 8) < 5u;
        uint64_t v58 = v55 + 24;
        unsigned int v45 = 1;
        do
        {
          v76 = (char *)&unk_1F25FED10;
          size_t v77 = (size_t)"file_names[%3u]:\n";
          v78 = (void *)(v56 + v45 - 1);
          uint64_t v46 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v76);
          sub_1CB8E509C(v46, "           name: ");
          *(_OWORD *)v70 = *(_OWORD *)v55;
          *(void *)&v70[14] = *(void *)(v55 + 14);
          sub_1CC66D518((uint64_t)&v71, v58);
          sub_1CC66D518((uint64_t)&v72, v55 + 56);
          long long v47 = a2;
          llvm::DWARFFormValue::dump((unsigned __int16 *)(v43 + 136 * v44), a2, (uint64_t)v70);
          sub_1CD5E15A8(v70);
          unint64_t v48 = (unsigned char *)*((void *)a2 + 4);
          if ((unint64_t)v48 >= *((void *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 10);
          }
          else
          {
            *((void *)a2 + 4) = v48 + 1;
            *unint64_t v48 = 10;
          }
          v76 = (char *)&unk_1F25FF808;
          long long v49 = *(void **)(v43 + 136 * v44 + 48);
          size_t v77 = (size_t)"      dir_index: %llu\n";
          v78 = v49;
          llvm::raw_ostream::operator<<(a2, (uint64_t)&v76);
          if (*(unsigned char *)(a1 + 33))
          {
            v50 = sub_1CB8E509C(a2, "   md5_checksum: ");
            llvm::MD5::MD5Result::digest((llvm::MD5::MD5Result *)(v43 + 136 * v44 + 72), (uint64_t)&v76);
            llvm::raw_ostream::write(v50, v76, v77);
            uint64_t v51 = (unsigned char *)*((void *)v50 + 4);
            if ((unint64_t)v51 >= *((void *)v50 + 3))
            {
              llvm::raw_ostream::write(v50, 10);
            }
            else
            {
              *((void *)v50 + 4) = v51 + 1;
              *uint64_t v51 = 10;
            }
            long long v47 = a2;
            if (v76 != (char *)&v79) {
              free(v76);
            }
          }
          if (*(unsigned char *)(a1 + 31))
          {
            v76 = (char *)&unk_1F25FF808;
            uint64_t v52 = *(void **)(v43 + 136 * v44 + 56);
            size_t v77 = (size_t)"       mod_time: 0x%8.8llx\n";
            v78 = v52;
            llvm::raw_ostream::operator<<(v47, (uint64_t)&v76);
          }
          if (*(unsigned char *)(a1 + 32))
          {
            v76 = (char *)&unk_1F25FF808;
            v53 = *(void **)(v43 + 136 * v44 + 64);
            size_t v77 = (size_t)"         length: 0x%8.8llx\n";
            v78 = v53;
            llvm::raw_ostream::operator<<(v47, (uint64_t)&v76);
          }
          if (*(unsigned char *)(a1 + 34))
          {
            sub_1CB8E509C(a2, "         source: ");
            *(_OWORD *)v67 = *(_OWORD *)v55;
            *(void *)&v67[14] = *(void *)(v55 + 14);
            sub_1CC66D518((uint64_t)&v68, v58);
            sub_1CC66D518((uint64_t)&v69, v55 + 56);
            llvm::DWARFFormValue::dump((unsigned __int16 *)(v43 + 136 * v44 + 88), a2, (uint64_t)v67);
            sub_1CD5E15A8(v67);
            v54 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v54 >= *((void *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 10);
            }
            else
            {
              *((void *)a2 + 4) = v54 + 1;
              unsigned char *v54 = 10;
            }
          }
          uint64_t v44 = v45;
          uint64_t v43 = *(void *)(a1 + 88);
          BOOL v38 = 0xF0F0F0F0F0F0F0F1 * ((*(void *)(a1 + 96) - v43) >> 3) == v45++;
        }
        while (!v38);
      }
    }
  }
}

llvm::raw_ostream *llvm::DWARFDebugLine::Row::dumpTableHeader(llvm::DWARFDebugLine::Row *this, llvm::raw_ostream *a2)
{
  unsigned int v2 = a2;
  uint64_t v4 = llvm::raw_ostream::indent(this, a2);
  sub_1CB8E509C(v4, "Address            Line   Column File   ISA Discriminator Flags\n");
  int v5 = llvm::raw_ostream::indent(this, v2);

  return sub_1CB8E509C(v5, "------------------ ------ ------ ------ --- ------------- -------------\n");
}

llvm::raw_ostream *llvm::DWARFDebugLine::Row::dump(llvm::DWARFDebugLine::Row *this, llvm::raw_ostream *a2)
{
  uint64_t v3 = *(void *)this;
  int v4 = *((_DWORD *)this + 4);
  __int16 v5 = *((_WORD *)this + 10);
  v21[0] = &unk_1F2618FC8;
  v21[1] = "0x%16.16llx %6u %6u";
  v21[2] = v3;
  int v22 = v4;
  __int16 v23 = v5;
  int v6 = llvm::raw_ostream::operator<<(a2, (uint64_t)v21);
  unint64_t v7 = *((unsigned __int16 *)this + 11) | ((unint64_t)*((unsigned __int8 *)this + 28) << 16) | ((unint64_t)*((unsigned int *)this + 6) << 32);
  v20[0] = &unk_1F2618FE8;
  v20[1] = " %6u %3u %13u ";
  v20[2] = v7;
  uint64_t v8 = llvm::raw_ostream::operator<<(v6, (uint64_t)v20);
  if (*((unsigned char *)this + 29)) {
    uint64_t v9 = " is_stmt";
  }
  else {
    uint64_t v9 = (char *)&unk_1CFBD9D5D;
  }
  uint64_t v10 = sub_1CB8E509C(v8, v9);
  if ((*((unsigned char *)this + 29) & 2) != 0) {
    size_t v11 = " basic_block";
  }
  else {
    size_t v11 = (char *)&unk_1CFBD9D5D;
  }
  uint64_t v12 = sub_1CB8E509C(v10, v11);
  if ((*((unsigned char *)this + 29) & 8) != 0) {
    size_t v13 = " prologue_end";
  }
  else {
    size_t v13 = (char *)&unk_1CFBD9D5D;
  }
  uint64_t v14 = sub_1CB8E509C(v12, v13);
  if ((*((unsigned char *)this + 29) & 0x10) != 0) {
    int v15 = " epilogue_begin";
  }
  else {
    int v15 = (char *)&unk_1CFBD9D5D;
  }
  uint64_t v16 = sub_1CB8E509C(v14, v15);
  if ((*((unsigned char *)this + 29) & 4) != 0) {
    unsigned int v17 = " end_sequence";
  }
  else {
    unsigned int v17 = (char *)&unk_1CFBD9D5D;
  }
  BOOL result = sub_1CB8E509C(v16, v17);
  uint64_t v19 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v19 >= *((void *)result + 3)) {
    return llvm::raw_ostream::write(result, 10);
  }
  *((void *)result + 4) = v19 + 1;
  *uint64_t v19 = 10;
  return result;
}

char *llvm::DWARFDebugLine::getLineTable(llvm::DWARFDebugLine *this, unint64_t a2)
{
  int v4 = (void *)*((void *)this + 1);
  unsigned int v2 = (char *)this + 8;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  __int16 v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      __int16 v5 = (char *)v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 == v2 || *((void *)v5 + 4) > a2) {
LABEL_12:
  }
    __int16 v5 = v2;
  if (v5 == v2) {
    return 0;
  }
  else {
    return v5 + 40;
  }
}

uint64_t llvm::DWARFDebugLine::getOrParseLineTable@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void, void)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v35 = a3;
  if (*(void *)(a2 + 8) <= (unint64_t)a3)
  {
    uint64_t v21 = std::generic_category();
    sub_1CD5E3FE8(22, (uint64_t)v21, (uint64_t)"offset 0x%8.8llx is not a valid debug line section offset", (uint64_t *)&v35);
  }
  LODWORD(v22) = -1;
  v23[0] = 0;
  *(void *)((char *)v23 + 5) = 0;
  v23[2] = 0;
  v24[0] = 0;
  *(_DWORD *)((char *)v24 + 7) = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v32 = 0;
  uint64_t v33 = a3;
  sub_1CD5E73F8((uint64_t)v34, (uint64_t)&v22);
  int v15 = sub_1CD5E7848(a1, (unint64_t)v33, &v33);
  char v17 = v16;
  sub_1CD5E35A8(v34);
  uint64_t result = (uint64_t)sub_1CD5E35A8(&v22);
  uint64_t v19 = (uint64_t)(v15 + 5);
  if (v17
    && (result = llvm::DWARFDebugLine::LineTable::parse(v19, (long long *)a2, (unint64_t *)&v35, a4, a5, a6, a7, 0, (uint64_t *)&v33, 0), (uint64_t v20 = v33) != 0))
  {
    *(unsigned char *)(a8 + 8) |= 1u;
    *(void *)a8 = v20;
  }
  else
  {
    *(unsigned char *)(a8 + 8) &= ~1u;
    *(void *)a8 = v19;
  }
  return result;
}

uint64_t llvm::DWARFDebugLine::ParsingState::advanceAddr(llvm::DWARFDebugLine::ParsingState *this, uint64_t a2, llvm::dwarf *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)this;
  if (*(unsigned __int8 *)(*(void *)this + 38) > a3) {
    uint64_t v8 = llvm::dwarf::LNStandardString(a3);
  }
  else {
    uint64_t v8 = "special";
  }
  if (*((unsigned char *)this + 88))
  {
    if (*(unsigned __int16 *)(v7 + 16) >= 4u && *(unsigned char *)(v7 + 34) != 1)
    {
      size_t v11 = std::generic_category();
      sub_1CD5E6AB8((uint64_t)&v13, 45, (uint64_t)v11, *((void *)this + 10), (uint64_t)v8, a4, *(unsigned char *)(*(void *)this + 34));
    }
    if (!*(unsigned char *)(v7 + 33))
    {
      uint64_t v10 = std::generic_category();
      sub_1CD5E6BCC((uint64_t)&v12, 22, (uint64_t)v10, (uint64_t)"line table program at offset 0x%8.8llx contains a %s opcode at offset 0x%8.8llx, but the prologue minimum_instruction_length value is 0, which prevents any address advancing", *((void *)this + 10), (uint64_t)v8, a4);
    }
  }
  *((unsigned char *)this + 88) = 0;
  uint64_t result = *(unsigned __int8 *)(v7 + 33) * a2;
  *((void *)this + 1) += result;
  return result;
}

void sub_1CD5E6AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  memset(v18, 0, sizeof(v18));
  int v10 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  char v17 = v18;
  int v16 = 0;
  uint64_t v9 = &unk_1F2646F30;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v7[0] = &unk_1F2619008;
  v7[1] = "line table program at offset 0x%8.8llx contains a %s opcode at offset 0x%8.8llx, but the prologue maximum_oper"
          "ations_per_instruction value is %hhd, which is unsupported. Assuming a value of 1 instead";
  v7[2] = a4;
  v7[3] = a5;
  v7[4] = a6;
  char v8 = a7;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v9, (uint64_t)v7);
  operator new();
}

void sub_1CD5E6BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  memset(__p, 0, sizeof(__p));
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v15 = __p;
  int v14 = 0;
  uint64_t v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v17[0] = &unk_1F2619028;
  v17[1] = a4;
  void v17[2] = a5;
  void v17[3] = a6;
  void v17[4] = a7;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v7, (uint64_t)v17);
  operator new();
}

uint64_t llvm::DWARFDebugLine::ParsingState::advanceAddrForOpcode(llvm::DWARFDebugLine::ParsingState *this, llvm::dwarf *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)this;
  if (*((unsigned char *)this + 89) && !*(unsigned char *)(v6 + 37))
  {
    if (*(unsigned __int8 *)(v6 + 38) <= a2) {
      uint64_t v7 = "special";
    }
    else {
      uint64_t v7 = llvm::dwarf::LNStandardString(a2);
    }
    int v8 = std::generic_category();
    sub_1CD5E6BCC((uint64_t)&v14, 45, (uint64_t)v8, (uint64_t)"line table program at offset 0x%8.8llx contains a %s opcode at offset 0x%8.8llx, but the prologue line_range value is 0. The address and line will not be adjusted", *((void *)this + 10), (uint64_t)v7, a3);
  }
  if (a2 == 8) {
    char v9 = -1;
  }
  else {
    char v9 = (char)a2;
  }
  unsigned __int8 v10 = v9 - *(unsigned char *)(v6 + 38);
  unsigned int v11 = *(unsigned __int8 *)(v6 + 37);
  if (v11) {
    uint64_t v12 = v10 / v11;
  }
  else {
    uint64_t v12 = 0;
  }
  return llvm::DWARFDebugLine::ParsingState::advanceAddr(this, v12, a2, a3);
}

void sub_1CD5E6DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  memset(__p, 0, sizeof(__p));
  int v7 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v14 = __p;
  int v13 = 0;
  uint64_t v6 = &unk_1F2646F30;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v16[0] = &unk_1F2619048;
  v16[1] = "mismatching address size at offset 0x%8.8llx expected 0x%2.2hhx found 0x%2.2llx";
  v16[2] = a4;
  char v17 = a5;
  uint64_t v18 = a6;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v6, (uint64_t)v16);
  operator new();
}

BOOL sub_1CD5E6F04(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a2 + 16);
  if (v2 < v3) {
    return 1;
  }
  if (v3 >= v2) {
    return *(void *)(a1 + 8) < *(void *)(a2 + 8);
  }
  return 0;
}

uint64_t llvm::DWARFDebugLine::Prologue::getFileNameByIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, llvm::Twine *a7)
{
  v50[2] = *MEMORY[0x1E4F143B8];
  if (!a5) {
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 8) < 5u)
  {
    if (!a2) {
      return 0;
    }
    uint64_t v24 = *(void *)(a1 + 88);
    if (0xF0F0F0F0F0F0F0F1 * ((*(void *)(a1 + 96) - v24) >> 3) < a2) {
      return 0;
    }
    uint64_t v14 = v24 + 136 * a2 - 136;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 88);
    if (0xF0F0F0F0F0F0F0F1 * ((*(void *)(a1 + 96) - v13) >> 3) <= a2) {
      return 0;
    }
    uint64_t v14 = v13 + 136 * a2;
  }
  long long v15 = *(_OWORD *)v14;
  long long v16 = *(_OWORD *)(v14 + 32);
  *(_OWORD *)&v45[16] = *(_OWORD *)(v14 + 16);
  long long v46 = v16;
  *(_OWORD *)unsigned int v45 = v15;
  char v47 = 1;
  char v17 = (const char *)sub_1CC694498((llvm *)v45);
  if (v18)
  {
    uint64_t v19 = v17;
    if (v17) {
      uint64_t v20 = (void *)strlen(v17);
    }
    else {
      uint64_t v20 = 0;
    }
    if (a5 == 1
      || (LOWORD(v46) = 261,
          *(void *)unsigned int v45 = v19,
          *(void *)&v45[8] = v20,
          (llvm::sys::path::is_absolute((const char **)v45, (const llvm::Twine *)1) & 1) != 0)
      || (llvm::sys::path::is_absolute((const char **)v45, (const llvm::Twine *)3) & 1) != 0)
    {
      uint64_t v21 = v19;
      std::string::size_type v22 = (std::string::size_type)v20;
LABEL_12:
      std::string::__init((std::string *)v45, v21, v22);
      if (*(char *)(a6 + 23) < 0) {
        operator delete(*(void **)a6);
      }
      *(_OWORD *)a6 = *(_OWORD *)v45;
      *(void *)(a6 + 16) = *(void *)&v45[16];
      return 1;
    }
    if (a5 == 2)
    {
      uint64_t v25 = llvm::sys::path::filename((uint64_t)v19, (uint64_t)v20, 0);
      std::string::size_type v27 = v26;
      uint64_t v21 = (const std::string::value_type *)v25;
      std::string::size_type v22 = v27;
      goto LABEL_12;
    }
    unint64_t v48 = (std::string::value_type *)v50;
    long long v49 = xmmword_1CDB15990;
    unint64_t v28 = *(void *)(v14 + 48);
    if (*(unsigned __int16 *)(a1 + 8) < 5u)
    {
      if (v28)
      {
        uint64_t v31 = *(void *)(a1 + 64);
        if (v28 <= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 72) - v31) >> 4))
        {
          uint64_t v37 = v31 + 48 * v28;
          long long v34 = *(_OWORD *)(v37 - 48);
          long long v35 = *(_OWORD *)(v37 - 32);
          long long v36 = *(_OWORD *)(v37 - 16);
          goto LABEL_43;
        }
      }
    }
    else
    {
      if (a5 == 3 && !v28)
      {
        uint64_t v29 = 0;
        long long v30 = 0;
LABEL_28:
        LOWORD(v46) = 261;
        *(void *)unsigned int v45 = v30;
        *(void *)&v45[8] = v29;
        __int16 v44 = 261;
        v43[0] = v19;
        v43[1] = v20;
        __int16 v42 = 257;
        __int16 v40 = 257;
        llvm::sys::path::append(&v48, a7, (const char **)v45, v43, (uint64_t)v41, (uint64_t)v39);
        std::string::__init((std::string *)v45, v48, v49);
        if (*(char *)(a6 + 23) < 0) {
          operator delete(*(void **)a6);
        }
        *(_OWORD *)a6 = *(_OWORD *)v45;
        *(void *)(a6 + 16) = *(void *)&v45[16];
        if (v48 != (std::string::value_type *)v50) {
          free(v48);
        }
        return 1;
      }
      uint64_t v32 = *(void *)(a1 + 64);
      if (v28 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 72) - v32) >> 4))
      {
        uint64_t v33 = (long long *)(v32 + 48 * v28);
        long long v34 = *v33;
        long long v35 = v33[1];
        long long v36 = v33[2];
LABEL_43:
        *(_OWORD *)&v45[16] = v35;
        long long v46 = v36;
        *(_OWORD *)unsigned int v45 = v34;
        char v47 = 1;
        long long v30 = sub_1CD5E72E4((llvm *)v45);
        uint64_t v29 = v38;
        goto LABEL_35;
      }
    }
    long long v30 = 0;
    uint64_t v29 = 0;
LABEL_35:
    if (a5 == 4)
    {
      if (a4)
      {
        LOWORD(v46) = 261;
        *(void *)unsigned int v45 = v30;
        *(void *)&v45[8] = v29;
        if ((llvm::sys::path::is_absolute((const char **)v45, (const llvm::Twine *)1) & 1) == 0
          && (llvm::sys::path::is_absolute((const char **)v45, (const llvm::Twine *)3) & 1) == 0)
        {
          LOWORD(v46) = 261;
          *(void *)unsigned int v45 = a3;
          *(void *)&v45[8] = a4;
          __int16 v44 = 257;
          __int16 v42 = 257;
          __int16 v40 = 257;
          llvm::sys::path::append(&v48, a7, (const char **)v45, v43, (uint64_t)v41, (uint64_t)v39);
        }
      }
    }
    goto LABEL_28;
  }
  return 0;
}

char *sub_1CD5E72E4(llvm *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a1 + 48)) {
    return 0;
  }
  llvm::DWARFFormValue::getAsCString(a1, (uint64_t)&__s);
  if (v6)
  {
    int v4 = __s;
    __s = 0;
    sub_1CD4515D0((void **)&v4);
    if (v4) {
      (*(void (**)(char *))(*(void *)v4 + 8))(v4);
    }
    if (v6)
    {
      unint64_t v3 = __s;
      __s = 0;
      if (v3) {
        (*(void (**)(char *))(*(void *)v3 + 8))(v3);
      }
    }
    return 0;
  }
  else
  {
    uint64_t v1 = __s;
    if (__s) {
      strlen(__s);
    }
  }
  return v1;
}

uint64_t sub_1CD5E73F8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  sub_1CD5E746C(a1 + 8, (long long *)(a2 + 8));
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  return a1;
}

__n128 sub_1CD5E746C(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(_DWORD *)(a1 + 31) = *(_DWORD *)((char *)a2 + 31);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = a2[4];
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  return result;
}

uint64_t sub_1CD5E74E0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(char *)(a1 + 16));
}

void sub_1CD5E7518()
{
}

llvm::raw_ostream *sub_1CD5E752C(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD5E7534((unsigned __int8 *)(a1 + 8), a2);
}

llvm::raw_ostream *sub_1CD5E7534(unsigned __int8 *a1, llvm::raw_ostream *a2)
{
  int v4 = llvm::dwarf::LNStandardString((llvm::dwarf *)*a1);
  if (v5)
  {
    char v6 = v4;
    size_t v7 = v5;
    uint64_t v8 = (void *)*((void *)a2 + 4);
    if (v5 <= *((void *)a2 + 3) - (void)v8)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(v8, v6, v5);
      *((void *)a2 + 4) += v7;
    }
    else
    {
      return llvm::raw_ostream::write(a2, v6, v5);
    }
  }
  else
  {
    uint64_t v10 = sub_1CB8E509C(a2, "DW_");
    char v11 = sub_1CB8E509C(v10, "LNS");
    uint64_t v12 = sub_1CB8E509C(v11, "_unknown_");
    uint64_t v13 = *a1;
    v14[0] = &unk_1F2618F78;
    v14[1] = "%x";
    v14[2] = v13;
    return llvm::raw_ostream::operator<<(v12, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_1CD5E7638(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

void sub_1CD5E7670()
{
}

llvm::raw_ostream *sub_1CD5E7684(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD5E768C(*(unsigned __int8 **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1CD5E768C(unsigned __int8 *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  long long v15 = a3;
  uint64_t v16 = a4;
  int v14 = 0;
  if (sub_1CD465E40(&v15, &v14))
  {
    int v7 = v14;
    unint64_t v17 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v17, v6)) {
      unint64_t v8 = 0;
    }
    else {
      unint64_t v8 = v17;
    }
    if (llvm::isPrefixedHexStyle(v7)) {
      unint64_t v9 = v8 + 2;
    }
    else {
      unint64_t v9 = v8;
    }
    return llvm::write_hex(a2, *a1, v14, v9, 1);
  }
  if (v16)
  {
    int v11 = 0;
    unsigned int v12 = *v15;
    if (v12 <= 0x63)
    {
      if (v12 != 68)
      {
        if (v12 != 78) {
          goto LABEL_20;
        }
        goto LABEL_17;
      }
LABEL_18:
      int v11 = 0;
      ++v15;
      goto LABEL_19;
    }
    if (v12 == 100) {
      goto LABEL_18;
    }
    if (v12 == 110)
    {
LABEL_17:
      ++v15;
      int v11 = 1;
LABEL_19:
      --v16;
    }
  }
  else
  {
    int v11 = 0;
  }
LABEL_20:
  unint64_t v17 = 0;
  if (llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v17, v6)) {
    size_t v13 = 0;
  }
  else {
    size_t v13 = v17;
  }
  return llvm::write_integer(a2, *a1, v13, v11);
}

uint64_t sub_1CD5E77C4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24), *(unsigned __int16 *)(a1 + 28));
}

uint64_t sub_1CD5E7804(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int16 *)(a1 + 16), *(unsigned __int8 *)(a1 + 18), *(unsigned int *)(a1 + 20));
}

uint64_t **sub_1CD5E7848(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  char v6 = a1 + 1;
  size_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        size_t v5 = *v7;
        char v6 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= a2) {
        break;
      }
      size_t v5 = v7[1];
      if (!v5)
      {
        char v6 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0xD0uLL);
    v7[4] = *a3;
    sub_1CD5E73F8((uint64_t)(v7 + 5), (uint64_t)(a3 + 1));
    char *v7 = 0;
    v7[1] = 0;
    v7[2] = v10;
    *char v6 = (uint64_t *)v7;
    int v11 = (uint64_t *)**a1;
    unsigned int v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      unsigned int v12 = *v6;
    }
    sub_1CB8358B8(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_1CD5E792C(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1CD5E7970(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t sub_1CD5E79B0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(void *)(a1 + 32));
}

void sub_1CD5E79F0(uint64_t a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
  while (2)
  {
    size_t v13 = &a2[-3].n128_i8[8];
LABEL_2:
    for (uint64_t i = 1 - a4; ; ++i)
    {
      uint64_t v15 = (uint64_t)a2 - a1;
      unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
      if (!(!v7 & v6))
      {
        switch(v16)
        {
          case 0uLL:
          case 1uLL:
            return;
          case 2uLL:
            if ((*a3)((long long *)&a2[-3].n128_i8[8], (long long *)a1))
            {
              long long v32 = *(_OWORD *)a1;
              __n128 v33 = *(__n128 *)(a1 + 16);
              uint64_t v61 = *(void *)(a1 + 32);
              long long v59 = v32;
              __n128 v60 = v33;
              long long v34 = *(_OWORD *)v13;
              long long v35 = *(long long *)((char *)&a2[-2] + 8);
              *(unsigned char *)(a1 + 32) = a2[-1].n128_u8[8];
              *(_OWORD *)a1 = v34;
              *(_OWORD *)(a1 + 16) = v35;
              *(_OWORD *)size_t v13 = v59;
              *(__n128 *)((char *)a2 - 24) = v60;
              a2[-1].n128_u8[8] = v61;
            }
            break;
          case 3uLL:
            sub_1CC695088((long long *)a1, (long long *)(a1 + 40), (long long *)&a2[-3].n128_i8[8], a3);
            break;
          case 4uLL:
            sub_1CC69569C(a1, a1 + 40, a1 + 80, (uint64_t)&a2[-3].n128_i64[1], a3);
            break;
          case 5uLL:
            sub_1CC695788(a1, a1 + 40, a1 + 80, a1 + 120, (uint64_t)&a2[-3].n128_i64[1], a3);
            break;
          default:
            JUMPOUT(0);
        }
        return;
      }
      if (v15 <= 959)
      {
        long long v36 = (long long *)(a1 + 40);
        BOOL v38 = (__n128 *)a1 == a2 || v36 == (long long *)a2;
        if (a5)
        {
          if (!v38)
          {
            uint64_t v39 = 0;
            uint64_t v40 = a1;
            do
            {
              unint64_t v41 = (long long *)v40;
              uint64_t v40 = (uint64_t)v36;
              if ((*a3)(v36, v41))
              {
                long long v42 = *(_OWORD *)v40;
                __n128 v43 = *(__n128 *)(v40 + 16);
                uint64_t v61 = *(void *)(v40 + 32);
                long long v59 = v42;
                __n128 v60 = v43;
                uint64_t v44 = v39;
                while (1)
                {
                  uint64_t v45 = a1 + v44;
                  long long v46 = *(_OWORD *)(a1 + v44 + 16);
                  *(_OWORD *)(v45 + 40) = *(_OWORD *)(a1 + v44);
                  *(_OWORD *)(v45 + 56) = v46;
                  *(unsigned char *)(v45 + 72) = *(unsigned char *)(a1 + v44 + 32);
                  if (!v44) {
                    break;
                  }
                  v44 -= 40;
                  if (((*a3)(&v59, (long long *)(v44 + a1)) & 1) == 0)
                  {
                    uint64_t v47 = a1 + v44 + 40;
                    goto LABEL_45;
                  }
                }
                uint64_t v47 = a1;
LABEL_45:
                long long v48 = v59;
                __n128 v49 = v60;
                *(unsigned char *)(v47 + 32) = v61;
                *(_OWORD *)uint64_t v47 = v48;
                *(__n128 *)(v47 + 16) = v49;
              }
              long long v36 = (long long *)(v40 + 40);
              v39 += 40;
            }
            while ((__n128 *)(v40 + 40) != a2);
          }
        }
        else if (!v38)
        {
          uint64_t v50 = a1 - 40;
          do
          {
            uint64_t v51 = (long long *)a1;
            a1 = (uint64_t)v36;
            if ((*a3)(v36, v51))
            {
              long long v52 = *(_OWORD *)a1;
              __n128 v53 = *(__n128 *)(a1 + 16);
              uint64_t v61 = *(void *)(a1 + 32);
              long long v59 = v52;
              __n128 v60 = v53;
              uint64_t v54 = v50;
              do
              {
                long long v55 = *(_OWORD *)(v54 + 56);
                *(_OWORD *)(v54 + 80) = *(_OWORD *)(v54 + 40);
                *(_OWORD *)(v54 + 96) = v55;
                *(unsigned char *)(v54 + 112) = *(unsigned char *)(v54 + 72);
                char v56 = (*a3)(&v59, (long long *)v54);
                v54 -= 40;
              }
              while ((v56 & 1) != 0);
              long long v57 = v59;
              __n128 v58 = v60;
              *(unsigned char *)(v54 + 112) = v61;
              *(_OWORD *)(v54 + 80) = v57;
              *(__n128 *)(v54 + 96) = v58;
            }
            long long v36 = (long long *)(a1 + 40);
            v50 += 40;
          }
          while ((__n128 *)(a1 + 40) != a2);
        }
        return;
      }
      if (i == 1)
      {
        if ((__n128 *)a1 != a2)
        {
          sub_1CC6958B4(a1, a2, a2, (unsigned int (**)(int64_t, uint64_t))a3, a6);
        }
        return;
      }
      unint64_t v17 = v16 >> 1;
      unint64_t v18 = a1 + 40 * (v16 >> 1);
      if ((unint64_t)v15 >= 0x1401)
      {
        sub_1CC695088((long long *)a1, (long long *)(a1 + 40 * (v16 >> 1)), (long long *)&a2[-3].n128_i8[8], a3);
        uint64_t v19 = 5 * v17;
        uint64_t v20 = (long long *)(a1 + 40 * v17 - 40);
        sub_1CC695088((long long *)(a1 + 40), v20, (long long *)&a2[-5], a3);
        uint64_t v21 = (long long *)(a1 + 40 + 8 * v19);
        sub_1CC695088((long long *)(a1 + 80), v21, (long long *)&a2[-8].n128_i8[8], a3);
        sub_1CC695088(v20, (long long *)v18, v21, a3);
        long long v22 = *(_OWORD *)a1;
        __n128 v23 = *(__n128 *)(a1 + 16);
        uint64_t v61 = *(void *)(a1 + 32);
        long long v59 = v22;
        __n128 v60 = v23;
        long long v24 = *(_OWORD *)v18;
        long long v25 = *(_OWORD *)(v18 + 16);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(v18 + 32);
        *(_OWORD *)a1 = v24;
        *(_OWORD *)(a1 + 16) = v25;
        long long v26 = v59;
        __n128 v27 = v60;
        *(unsigned char *)(v18 + 32) = v61;
        *(_OWORD *)unint64_t v18 = v26;
        *(__n128 *)(v18 + 16) = v27;
      }
      else
      {
        sub_1CC695088((long long *)(a1 + 40 * (v16 >> 1)), (long long *)a1, (long long *)&a2[-3].n128_i8[8], a3);
      }
      if ((a5 & 1) == 0 && ((*a3)((long long *)(a1 - 40), (long long *)a1) & 1) == 0)
      {
        uint64_t v31 = sub_1CC6951C4((long long *)a1, (long long *)a2, a3);
        goto LABEL_15;
      }
      uint64_t v28 = sub_1CC695324((long long *)a1, (char *)a2, (uint64_t (**)(char *, long long *))a3);
      if ((v29 & 1) == 0) {
        goto LABEL_62;
      }
      BOOL v30 = sub_1CC695484(a1, v28, a3);
      uint64_t v31 = (long long *)(v28 + 40);
      if (sub_1CC695484(v28 + 40, (uint64_t)a2, a3)) {
        break;
      }
      if (!v30)
      {
LABEL_62:
        a4 = -i;
        sub_1CD5E79F0(a1, v28, a3, -i, a5 & 1);
        a5 = 0;
        a1 = v28 + 40;
        goto LABEL_2;
      }
LABEL_15:
      a1 = (uint64_t)v31;
    }
    a4 = -i;
    a2 = (__n128 *)v28;
    if (!v30) {
      continue;
    }
    break;
  }
}

uint64_t llvm::DWARFLocationTable::dumpLocationList(uint64_t a1, uint64_t *a2, llvm::raw_ostream *a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v29 = a7;
  uint64_t v30 = a5;
  long long v32 = *a4;
  uint64_t v14 = *((void *)a4 + 2);
  v31[0] = &unk_1F26190B8;
  v31[1] = a7;
  v31[3] = v31;
  long long v35 = v34;
  uint64_t v33 = v14;
  v34[0] = &unk_1F26190B8;
  v34[1] = a7;
  uint64_t v15 = *a2;
  uint64_t v20 = (long long *)&unk_1F25FF808;
  uint64_t v21 = "0x%8.8llx: ";
  uint64_t v22 = v15;
  llvm::raw_ostream::operator<<(a3, (uint64_t)&v20);
  uint64_t v20 = &v32;
  uint64_t v21 = (const char *)a8;
  uint64_t v22 = a1;
  __n128 v23 = a3;
  long long v24 = &a9;
  uint64_t v25 = a6;
  long long v26 = &v30;
  __n128 v27 = &v29;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t (*)(uint64_t, unsigned __int8 *), long long **))(*(void *)a1 + 16))(&v28, a1, a2, sub_1CC6964D4, &v20);
  uint64_t v16 = v28;
  if (v28)
  {
    uint64_t v19 = v28;
    uint64_t v28 = 0;
    uint64_t v17 = *(void *)(a8 + 48);
    if (!v17)
    {
      sub_1CB920400();
      return llvm::DWARFDebugLoc::visitLocationList();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v17 + 48))(v17, &v19);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
  }
  if (v35 == v34)
  {
    (*(void (**)(void *))(v34[0] + 32))(v34);
  }
  else if (v35)
  {
    (*(void (**)(void))(*v35 + 40))();
  }
  return v16 == 0;
}

uint64_t llvm::DWARFDebugLoc::visitLocationList@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, char *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v26 = *a2;
  uint64_t v27 = 0;
  unint64_t v9 = (void *)(a1 + 8);
  do
  {
    uint64_t v25 = 0;
    unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v9, *(unsigned __int8 *)(a1 + 25), &v26, 0, &v27);
    unint64_t v11 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v9, *(unsigned __int8 *)(a1 + 25), &v26, &v25, &v27);
    uint64_t v22 = &v24;
    long long v23 = xmmword_1CDB159A0;
    if (RelocatedValue | v11)
    {
      if (*(unsigned char *)(a1 + 25) == 4) {
        uint64_t v13 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v13 = -1;
      }
      if (RelocatedValue == v13)
      {
        v18[0] = 6;
        unint64_t v19 = v11;
        uint64_t v21 = v25;
      }
      else
      {
        v18[0] = 4;
        unint64_t v19 = RelocatedValue;
        unint64_t v20 = v11;
        uint64_t v21 = v25;
        unsigned int U16 = llvm::DataExtractor::getU16(v9, &v26, &v27);
        sub_1CD5E832C(v9, &v26, &v22, U16);
      }
    }
    else
    {
      v18[0] = 0;
    }
    if (v27)
    {
      *a5 = v27;
      uint64_t v27 = 0;
      int v12 = 1;
    }
    else
    {
      unsigned __int8 v14 = a3(a4, v18);
      if ((v14 & (v18[0] != 0)) != 0) {
        int v12 = 0;
      }
      else {
        int v12 = 3;
      }
    }
    if (v22 != &v24) {
      free(v22);
    }
  }
  while (!v12);
  if (v12 == 3)
  {
    *a2 = v26;
    *a5 = 0;
  }
  uint64_t result = v27;
  if (v27) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  return result;
}

unsigned char *sub_1CD5E832C(void *a1, unint64_t *a2, void *a3, unsigned int a4)
{
  if (!__CFADD__(*a2, a4) && a1[1] > *a2 + a4 - 1) {
    sub_1CC6963A8(a3, a4);
  }
  unint64_t v8 = (unsigned char *)*a3;

  return llvm::DataExtractor::getU8(a1, a2, v8, a4);
}

void *llvm::DWARFDebugLoc::dumpRawEntry(void *result, uint64_t a2, llvm::raw_ostream *this, unsigned int a4, uint64_t a5, llvm::raw_ostream *a6)
{
  v33[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a2)
  {
    unint64_t v11 = result;
    if (*(unsigned char *)a2 == 4)
    {
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v13 = (uint64_t *)(a2 + 16);
    }
    else
    {
      if (*((unsigned char *)result + 25) == 4) {
        uint64_t v12 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v12 = -1;
      }
      uint64_t v13 = (uint64_t *)(a2 + 8);
    }
    uint64_t v14 = *v13;
    uint64_t v15 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v15 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 10);
    }
    else
    {
      *((void *)this + 4) = v15 + 1;
      *uint64_t v15 = 10;
    }
    llvm::raw_ostream::indent(this, a4);
    uint64_t v16 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v16 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 40);
    }
    else
    {
      *((void *)this + 4) = v16 + 1;
      unsigned char *v16 = 40;
    }
    int v17 = 2 * *((unsigned __int8 *)v11 + 25) + 2;
    v27[0] = v12;
    v27[1] = 0;
    int v28 = v17;
    __int16 v29 = 1;
    char v30 = 1;
    unint64_t v18 = llvm::raw_ostream::operator<<(this, (uint64_t)v27);
    unint64_t v19 = sub_1CB8E509C(v18, ", ");
    int v20 = 2 * *((unsigned __int8 *)v11 + 25) + 2;
    v23[0] = v14;
    v23[1] = 0;
    int v24 = v20;
    __int16 v25 = 1;
    char v26 = 1;
    uint64_t v21 = llvm::raw_ostream::operator<<(v19, (uint64_t)v23);
    uint64_t v22 = (unsigned char *)*((void *)v21 + 4);
    if ((unint64_t)v22 >= *((void *)v21 + 3))
    {
      llvm::raw_ostream::write(v21, 41);
    }
    else
    {
      *((void *)v21 + 4) = v22 + 1;
      *uint64_t v22 = 41;
    }
    *(_OWORD *)uint64_t v31 = *(_OWORD *)a5;
    *(void *)&v31[14] = *(void *)(a5 + 14);
    sub_1CC66D518((uint64_t)&v32, a5 + 24);
    sub_1CC66D518((uint64_t)v33, a5 + 56);
    llvm::DWARFFormValue::dumpAddressSection(a6, this, (uint64_t)v31, *(void *)(a2 + 24));
    return sub_1CD5E15A8(v31);
  }
  return result;
}

uint64_t llvm::DWARFDebugLoclists::visitLocationList@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, char *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v28 = *a2;
  uint64_t v29 = 0;
  unint64_t v8 = (uint64_t *)(a1 + 8);
  while (2)
  {
    __int16 v25 = &v27;
    long long v26 = xmmword_1CDB159A0;
    unsigned int U8 = llvm::DataExtractor::getU8(v8, &v28, &v29);
    v21[0] = U8;
    switch(U8)
    {
      case 0u:
      case 5u:
        goto LABEL_16;
      case 1u:
        unint64_t ULEB128 = llvm::DataExtractor::getULEB128(v8, &v28, &v29);
        goto LABEL_9;
      case 2u:
        unint64_t v11 = llvm::DataExtractor::getULEB128(v8, &v28, &v29);
        goto LABEL_12;
      case 3u:
        unint64_t RelocatedValue = llvm::DataExtractor::getULEB128(v8, &v28, &v29);
        if (*(unsigned __int16 *)(a1 + 48) > 4u) {
          goto LABEL_13;
        }
        uint64_t U32 = llvm::DataExtractor::getU32(v8, &v28, &v29);
        goto LABEL_15;
      case 4u:
        unint64_t RelocatedValue = llvm::DataExtractor::getULEB128(v8, &v28, &v29);
        uint64_t U32 = llvm::DataExtractor::getULEB128(v8, &v28, &v29);
        uint64_t v24 = -1;
        goto LABEL_15;
      case 6u:
        unint64_t ULEB128 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v8, *(unsigned __int8 *)(a1 + 25), (unint64_t *)&v28, &v24, &v29);
LABEL_9:
        unint64_t RelocatedValue = ULEB128;
        goto LABEL_15;
      case 7u:
        unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v8, *(unsigned __int8 *)(a1 + 25), (unint64_t *)&v28, &v24, &v29);
        unint64_t v12 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v8, *(unsigned __int8 *)(a1 + 25), (unint64_t *)&v28, 0, &v29);
        goto LABEL_14;
      case 8u:
        unint64_t v11 = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v8, *(unsigned __int8 *)(a1 + 25), (unint64_t *)&v28, &v24, &v29);
LABEL_12:
        unint64_t RelocatedValue = v11;
LABEL_13:
        unint64_t v12 = llvm::DataExtractor::getULEB128(v8, &v28, &v29);
LABEL_14:
        uint64_t U32 = v12;
LABEL_15:
        unsigned int U8 = v21[0];
LABEL_16:
        if (U8 > 6 || ((1 << U8) & 0x43) == 0)
        {
          if (*(unsigned __int16 *)(a1 + 48) < 5u) {
            unsigned int U16 = llvm::DataExtractor::getU16(v8, &v28, &v29);
          }
          else {
            unsigned int U16 = llvm::DataExtractor::getULEB128(v8, &v28, &v29);
          }
          sub_1CD5E832C(v8, (unint64_t *)&v28, &v25, U16);
        }
        if (v29)
        {
          char v13 = 0;
          *a5 = v29;
          uint64_t v29 = 0;
          int v14 = 1;
        }
        else
        {
          int v15 = a3(a4, v21);
          if (v21[0]) {
            int v14 = v15;
          }
          else {
            int v14 = 0;
          }
          char v13 = 1;
        }
        if (v25 != &v27) {
          free(v25);
        }
        if ((v13 & 1) == 0) {
          goto LABEL_32;
        }
        if (v14) {
          continue;
        }
        *a2 = v28;
        *a5 = 0;
LABEL_32:
        uint64_t result = v29;
        if (v29) {
          return (*(uint64_t (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
        return result;
      default:
        uint64_t v29 = 0;
        unint64_t v18 = std::generic_category();
        sub_1CD5E8898((uint64_t)a5, 92, (uint64_t)v18, v21[0]);
    }
  }
}

void sub_1CD5E8898(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  memset(__p, 0, sizeof(__p));
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  unint64_t v12 = __p;
  int v11 = 0;
  int v4 = &unk_1F2646F30;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v14[0] = &unk_1F2618E88;
  v14[1] = "LLE of kind %x not supported";
  v14[2] = a4;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v4, (uint64_t)v14);
  operator new();
}

llvm::raw_ostream *llvm::DWARFDebugLoclists::dumpRawEntry(uint64_t a1, void *a2, llvm::raw_ostream *a3, unsigned int a4, uint64_t a5, llvm::raw_ostream *a6)
{
  v40[4] = *MEMORY[0x1E4F143B8];
  llvm::dwarf::LocListEncodingString(0);
  unint64_t v13 = v12;
  llvm::dwarf::LocListEncodingString((llvm::dwarf *)1);
  if (v13 <= v14) {
    unint64_t v13 = v14;
  }
  llvm::dwarf::LocListEncodingString((llvm::dwarf *)2);
  if (v13 <= v15) {
    unint64_t v13 = v15;
  }
  llvm::dwarf::LocListEncodingString((llvm::dwarf *)3);
  if (v13 <= v16) {
    unint64_t v13 = v16;
  }
  llvm::dwarf::LocListEncodingString((llvm::dwarf *)4);
  if (v13 <= v17) {
    unint64_t v13 = v17;
  }
  llvm::dwarf::LocListEncodingString((llvm::dwarf *)5);
  if (v13 <= v18) {
    unint64_t v13 = v18;
  }
  llvm::dwarf::LocListEncodingString((llvm::dwarf *)6);
  if (v13 <= v19) {
    unint64_t v13 = v19;
  }
  llvm::dwarf::LocListEncodingString((llvm::dwarf *)7);
  if (v13 <= v20) {
    unint64_t v13 = v20;
  }
  llvm::dwarf::LocListEncodingString((llvm::dwarf *)8);
  if (v13 <= v21) {
    unint64_t v13 = v21;
  }
  sub_1CB8E509C(a3, "\n");
  llvm::raw_ostream::indent(a3, a4);
  uint64_t v22 = llvm::dwarf::LocListEncodingString((llvm::dwarf *)*(unsigned __int8 *)a2);
  long long v34 = &unk_1F2619100;
  long long v35 = "%-*s(";
  unint64_t v36 = v13;
  uint64_t v37 = v22;
  uint64_t result = llvm::raw_ostream::operator<<(a3, (uint64_t)&v34);
  unsigned int v24 = *(unsigned __int8 *)a2;
  if (v24 <= 8)
  {
    int v25 = 2 * *(unsigned __int8 *)(a1 + 25) + 2;
    if (((1 << v24) & 0x19C) != 0)
    {
      long long v34 = (void *)a2[1];
      long long v35 = 0;
      LODWORD(v36) = v25;
      WORD2(v36) = 1;
      BYTE6(v36) = 1;
      long long v26 = llvm::raw_ostream::operator<<(a3, (uint64_t)&v34);
      uint64_t v27 = sub_1CB8E509C(v26, ", ");
      v30[0] = a2[2];
      v30[1] = 0;
      int v31 = v25;
      __int16 v32 = 1;
      char v33 = 1;
      uint64_t v28 = (void **)v30;
LABEL_20:
      uint64_t result = llvm::raw_ostream::operator<<(v27, (uint64_t)v28);
      goto LABEL_21;
    }
    if (((1 << v24) & 0x42) != 0)
    {
      long long v34 = (void *)a2[1];
      long long v35 = 0;
      LODWORD(v36) = v25;
      WORD2(v36) = 1;
      BYTE6(v36) = 1;
      uint64_t v28 = &v34;
      uint64_t v27 = a3;
      goto LABEL_20;
    }
  }
LABEL_21:
  uint64_t v29 = (unsigned char *)*((void *)a3 + 4);
  if ((unint64_t)v29 >= *((void *)a3 + 3))
  {
    uint64_t result = llvm::raw_ostream::write(a3, 41);
  }
  else
  {
    *((void *)a3 + 4) = v29 + 1;
    *uint64_t v29 = 41;
  }
  if (*(unsigned __int8 *)a2 - 6 <= 2)
  {
    *(_OWORD *)BOOL v38 = *(_OWORD *)a5;
    *(void *)&v38[14] = *(void *)(a5 + 14);
    sub_1CC66D518((uint64_t)&v39, a5 + 24);
    sub_1CC66D518((uint64_t)v40, a5 + 56);
    llvm::DWARFFormValue::dumpAddressSection(a6, a3, (uint64_t)v38, a2[3]);
    return (llvm::raw_ostream *)sub_1CD5E15A8(v38);
  }
  return result;
}

llvm::raw_ostream *llvm::ResolverError::log(llvm::ResolverError *this, llvm::raw_ostream *a2)
{
  int v4 = llvm::dwarf::LocListEncodingString((llvm::dwarf *)*((unsigned int *)this + 3));
  int v5 = *((_DWORD *)this + 2);
  v7[0] = &unk_1F2618E28;
  v7[1] = "unable to resolve indirect address %u for: %s";
  int v8 = v5;
  char v9 = v4;
  return llvm::raw_ostream::operator<<(a2, (uint64_t)v7);
}

uint64_t sub_1CD5E8CB8(uint64_t a1)
{
  return a1;
}

void sub_1CD5E8CE4(uint64_t a1)
{
  sub_1CD5E3F0C((char **)(a1 + 48));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD5E8D34()
{
}

void sub_1CD5E8D4C()
{
}

uint64_t sub_1CD5E8D60()
{
  return 22;
}

void *sub_1CD5E8D80()
{
  return &llvm::ResolverError::ID;
}

BOOL sub_1CD5E8D8C(uint64_t a1, void *a2)
{
  return a2 == &llvm::ResolverError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

uint64_t sub_1CD5E8DAC(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t llvm::DWARFDebugRangeList::clear(uint64_t this)
{
  *(void *)this = -1;
  *(unsigned char *)(this + 8) = 0;
  *(void *)(this + 24) = *(void *)(this + 16);
  return this;
}

uint64_t llvm::RangeListEntry::extract@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *(void *)a1 = *a3;
  *(void *)(a1 + 16) = -1;
  int v8 = (void *)(a1 + 16);
  unsigned int U8 = (llvm::dwarf *)llvm::DataExtractor::getU8(a2, a3, 0);
  uint64_t v10 = *a3;
  uint64_t v20 = *a3;
  unint64_t v21 = 0;
  switch((int)U8)
  {
    case 0:
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      goto LABEL_7;
    case 1:
      unint64_t ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)a2, &v20, &v21);
      goto LABEL_13;
    case 2:
    case 3:
    case 4:
      unint64_t v11 = llvm::DataExtractor::getULEB128((uint64_t *)a2, &v20, &v21);
      goto LABEL_3;
    case 5:
      unint64_t ULEB128 = llvm::DWARFDataExtractor::getRelocatedValue(a2, *(unsigned __int8 *)(a2 + 17), (unint64_t *)&v20, v8, &v21);
LABEL_13:
      *(void *)(a1 + 24) = ULEB128;
      goto LABEL_5;
    case 6:
      *(void *)(a1 + 24) = llvm::DWARFDataExtractor::getRelocatedValue(a2, *(unsigned __int8 *)(a2 + 17), (unint64_t *)&v20, v8, &v21);
      unint64_t RelocatedValue = llvm::DWARFDataExtractor::getRelocatedValue(a2, *(unsigned __int8 *)(a2 + 17), (unint64_t *)&v20, 0, &v21);
      goto LABEL_4;
    case 7:
      unint64_t v11 = llvm::DWARFDataExtractor::getRelocatedValue(a2, *(unsigned __int8 *)(a2 + 17), (unint64_t *)&v20, v8, &v21);
LABEL_3:
      *(void *)(a1 + 24) = v11;
      unint64_t RelocatedValue = llvm::DataExtractor::getULEB128((uint64_t *)a2, &v20, &v21);
LABEL_4:
      *(void *)(a1 + 32) = RelocatedValue;
LABEL_5:
      if (v21)
      {
        unint64_t v18 = v21;
        unint64_t v21 = 0;
        sub_1CD4515D0(&v18);
        if (v18) {
          (*(void (**)(void *))(*v18 + 8))(v18);
        }
        unint64_t v15 = std::generic_category();
        unint64_t v17 = llvm::dwarf::RLEString(U8);
        sub_1CD5E37EC(22, (uint64_t)v15, (uint64_t)"read past end of table when reading %s encoding at offset 0x%llx", (uint64_t *)&v17, (uint64_t *)a1);
      }
      uint64_t v10 = v20;
LABEL_7:
      *a3 = v10;
      *(unsigned char *)(a1 + 8) = (_BYTE)U8;
      *a4 = 0;
      uint64_t result = (uint64_t)v21;
      if (v21) {
        return (*(uint64_t (**)(void *))(*v21 + 8))(v21);
      }
      return result;
    default:
      unint64_t v19 = 0;
      unint64_t v21 = 0;
      sub_1CD4515D0(&v19);
      if (v19) {
        (*(void (**)(void *))(*v19 + 8))(v19);
      }
      unint64_t v16 = std::generic_category();
      LODWORD(v17) = U8;
      sub_1CD5E4E84(45, (uint64_t)v16, (uint64_t)"unknown rnglists encoding 0x%x at offset 0x%llx", (int *)&v17, (uint64_t *)a1);
  }
}

void llvm::DWARFDebugRnglist::getAbsoluteRanges(int8x16_t **a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  char v4 = *(unsigned char *)(a3 + 34);
  uint64_t v5 = a3;
  llvm::DWARFDebugRnglist::getAbsoluteRanges(a1, (uint64_t *)&v6, v4, (void (*)(long long *__return_ptr, uint64_t, void))sub_1CC69A6FC, (uint64_t)&v5, a4);
}

void *llvm::DWARFDie::getShortName(llvm::DWARFDie *this)
{
  if (!*(void *)this || !*((void *)this + 1)) {
    return 0;
  }
  unsigned __int16 v3 = 3;
  llvm::DWARFDie::findRecursively(this, &v3, 1, v4);
  uint64_t result = sub_1CC694498((llvm *)v4);
  if (!v2) {
    return 0;
  }
  return result;
}

llvm::DWARFUnit **llvm::DWARFDie::find@<X0>(llvm::DWARFUnit **result@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  unsigned __int16 v3 = *result;
  if (*result)
  {
    char v4 = (uint64_t *)result[1];
    if (v4)
    {
      uint64_t result = (llvm::DWARFUnit **)v4[2];
      if (result) {
        return (llvm::DWARFUnit **)llvm::DWARFAbbreviationDeclaration::getAttributeValue((uint64_t)result, v3, *v4, a2, a3);
      }
    }
  }
  *a3 = 0;
  a3[48] = 0;
  return result;
}

llvm::DWARFUnit **llvm::DWARFDie::find@<X0>(llvm::DWARFUnit **result@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*result
    && (uint64_t v5 = result, (v6 = result[1]) != 0)
    && ((v7 = *((void *)v6 + 2)) != 0 ? (BOOL v8 = a3 == 0) : (BOOL v8 = 1), !v8))
  {
    uint64_t v10 = 2 * a3;
    while (1)
    {
      uint64_t result = (llvm::DWARFUnit **)llvm::DWARFAbbreviationDeclaration::getAttributeValue(v7, *v5, *(void *)v5[1], *a2, a4);
      if (a4[48]) {
        break;
      }
      ++a2;
      v10 -= 2;
      if (!v10) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    *a4 = 0;
    a4[48] = 0;
  }
  return result;
}

void llvm::DWARFDie::findRecursively(_OWORD *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  v28[1] = 0;
  uint64_t v29 = v31;
  v31[0] = *a1;
  uint64_t v30 = 0x300000001;
  v26[0] = v27;
  v26[1] = (void *)0x300000000;
  v27[6] = v28;
  v28[0] = 0;
  sub_1CD5E9428((uint64_t)v26, (uint64_t)a1);
  unsigned int v7 = v30;
  while (v7)
  {
    BOOL v8 = (char *)v29 + 16 * v7;
    uint64_t v10 = (llvm::DWARFUnit *)*((void *)v8 - 2);
    char v9 = (llvm::DWARFUnit *)*((void *)v8 - 1);
    LODWORD(v30) = --v7;
    v25[0] = v10;
    v25[1] = v9;
    if (v10) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      llvm::DWARFDie::find(v25, a2, a3, a4);
      if (a4[48]) {
        goto LABEL_3;
      }
      AttributeValueAsReferencedDie = llvm::DWARFDie::getAttributeValueAsReferencedDie(v25, 49);
      long long v23 = AttributeValueAsReferencedDie;
      unsigned int v24 = v13;
      if (AttributeValueAsReferencedDie)
      {
        unint64_t v14 = v13;
        if (v13)
        {
          unint64_t v15 = AttributeValueAsReferencedDie;
          if ((sub_1CD5E9428((uint64_t)v26, (uint64_t)&v23) & 0x100000000) != 0)
          {
            if (v30 >= (unint64_t)HIDWORD(v30)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unint64_t v16 = (llvm::DWARFUnit **)((char *)v29 + 16 * v30);
            const std::error_category *v16 = v15;
            v16[1] = v14;
            LODWORD(v30) = v30 + 1;
          }
        }
      }
      unint64_t v17 = llvm::DWARFDie::getAttributeValueAsReferencedDie(v25, 71);
      long long v23 = v17;
      unsigned int v24 = v18;
      if (v17 && (unint64_t v19 = v18) != 0)
      {
        uint64_t v20 = v17;
        unint64_t v21 = sub_1CD5E9428((uint64_t)v26, (uint64_t)&v23);
        unsigned int v7 = v30;
        if ((v21 & 0x100000000) != 0)
        {
          if (v30 >= HIDWORD(v30)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v22 = (llvm::DWARFUnit **)((char *)v29 + 16 * v30);
          *uint64_t v22 = v20;
          v22[1] = v19;
          unsigned int v7 = v30 + 1;
          LODWORD(v30) = v30 + 1;
        }
      }
      else
      {
        unsigned int v7 = v30;
      }
    }
  }
  *a4 = 0;
  a4[48] = 0;
LABEL_3:
  sub_1CD40B1BC(v28[0]);
  if (v26[0] != v27) {
    free(v26[0]);
  }
  if (v29 != v31) {
    free(v29);
  }
}

unint64_t sub_1CD5E9428(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 80)) {
    return ((unint64_t)sub_1CD5EA0B0((uint64_t **)(a1 + 64), *(unint64_t **)(a2 + 8), (_OWORD *)a2) << 32) | 1;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    int64x2_t v5 = *(int64x2_t *)a2;
    uint64_t v6 = 16 * v4;
    unsigned int v7 = *(int64x2_t **)a1;
    while (1)
    {
      int32x2_t v8 = vmovn_s64(vceqq_s64(*v7, v5));
      if (v8.i32[1] & v8.i32[0]) {
        break;
      }
      ++v7;
      v6 -= 16;
      if (!v6) {
        goto LABEL_6;
      }
    }
    if (v6) {
      return 1;
    }
LABEL_6:
    if (v4 <= 2) {
      goto LABEL_7;
    }
    do
    {
      sub_1CD5EA0B0((uint64_t **)(a1 + 64), *(unint64_t **)(*(void *)a1 + 16 * v4 - 8), (_OWORD *)(*(void *)a1 + 16 * v4 - 16));
      LODWORD(v4) = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v4;
    }
    while (v4);
    sub_1CD5EA0B0((uint64_t **)(a1 + 64), *(unint64_t **)(a2 + 8), (_OWORD *)a2);
  }
  else
  {
    int64x2_t v5 = *(int64x2_t *)a2;
LABEL_7:
    if (v4 >= *(_DWORD *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(int64x2_t *)(*(void *)a1 + 16 * v4) = v5;
    ++*(_DWORD *)(a1 + 8);
  }
  return 0x100000001;
}

llvm::DWARFUnit *llvm::DWARFDie::getAttributeValueAsReferencedDie(llvm::DWARFUnit **a1, int a2)
{
  llvm::DWARFDie::find(a1, a2, v4);
  if (v4[48]) {
    return llvm::DWARFDie::getAttributeValueAsReferencedDie((llvm::DWARFDie *)a1, (const llvm::DWARFFormValue *)v4);
  }
  else {
    return 0;
  }
}

llvm::DWARFUnit *llvm::DWARFDie::getAttributeValueAsReferencedDie(llvm::DWARFDie *this, const llvm::DWARFFormValue *a2)
{
  llvm::DWARFFormValue::getAsRelativeReference((unsigned __int16 *)a2, (uint64_t)&v5);
  if (!v7) {
    return 0;
  }
  uint64_t result = v5;
  if (v5)
  {
    unint64_t v4 = v6 + *((void *)v5 + 3);
    return sub_1CD5E31EC(result, v4);
  }
  uint64_t result = (llvm::DWARFUnit *)llvm::DWARFUnitVector::getUnitForOffset(*(uint64_t ***)(*(void *)this + 216), v6);
  if (result)
  {
    unint64_t v4 = v6;
    return sub_1CD5E31EC(result, v4);
  }
  return result;
}

llvm::DWARFUnit *llvm::DWARFDie::resolveTypeUnitReference(llvm::DWARFUnit **this)
{
  llvm::DWARFDie::find(this, 105, v6);
  if (v6[48]
    && (uint64_t AsReferenceUVal = llvm::DWARFFormValue::getAsReferenceUVal((llvm::DWARFFormValue *)v6), v3)
    && (TypeUnitForHash = llvm::DWARFContext::getTypeUnitForHash(*((llvm::DWARFContext **)*this + 1), *((_WORD *)*this + 16), AsReferenceUVal, *((unsigned __int8 *)*this + 209))) != 0)
  {
    return sub_1CD5E31EC(TypeUnitForHash, *((void *)TypeUnitForHash + 3) + *((void *)TypeUnitForHash + 9));
  }
  else
  {
    return *this;
  }
}

unint64_t llvm::DWARFDie::getHighPC(llvm::DWARFUnit **this, uint64_t a2)
{
  if (0xFFFFFFFFFFFFFFFFLL >> (-8 * *((unsigned char *)*this + 34)) == a2)
  {
    LOBYTE(v2) = 0;
    unint64_t v3 = 0;
    return v2 | (v3 << 8);
  }
  llvm::DWARFDie::find(this, 18, v8);
  if (!v9)
  {
    unint64_t v3 = 0;
LABEL_11:
    LOBYTE(v2) = 0;
    return v2 | (v3 << 8);
  }
  llvm::DWARFFormValue::getAsSectionedAddress(v8, (uint64_t)&v10);
  LOBYTE(v2) = v10;
  if (v11) {
    unint64_t v3 = v10 >> 8;
  }
  else {
    unint64_t v3 = 0;
  }
  if (!v11)
  {
    unint64_t AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v8);
    if (v7)
    {
      unint64_t v2 = AsUnsignedConstant + a2;
      unint64_t v3 = v2 >> 8;
      return v2 | (v3 << 8);
    }
    goto LABEL_11;
  }
  return v2 | (v3 << 8);
}

uint64_t llvm::DWARFDie::getLowAndHighPC(llvm::DWARFUnit **this, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  llvm::DWARFDie::find(this, 17, v14);
  if (!v15) {
    return 0;
  }
  llvm::DWARFFormValue::getAsSectionedAddress(v14, (uint64_t)v12);
  if (!v13) {
    return 0;
  }
  unint64_t HighPC = llvm::DWARFDie::getHighPC(this, v12[0]);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = v12[1];
  *a2 = v12[0];
  *a3 = HighPC;
  *a4 = v11;
  return 1;
}

void llvm::DWARFDie::getAddressRanges(llvm::DWARFDie *this@<X0>, uint64_t a2@<X8>)
{
  v13[3] = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*((void *)this + 1) + 16)) {
    goto LABEL_2;
  }
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v10 = 0;
  if (llvm::DWARFDie::getLowAndHighPC((llvm::DWARFUnit **)this, &v12, &v11, &v10))
  {
    v13[0] = v12;
    v13[1] = v11;
    v13[2] = v10;
    sub_1CC6A0680(&v7, v13, 1uLL);
    *(unsigned char *)(a2 + 24) &= ~1u;
    *(_OWORD *)a2 = v7;
    *(void *)(a2 + 16) = v8;
    return;
  }
  llvm::DWARFDie::find((llvm::DWARFUnit **)this, 85, &v7);
  if (v9)
  {
    int v4 = (unsigned __int16)v7;
    int64x2_t v5 = *(llvm::DWARFUnit **)this;
    if (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v7, 8)) {
      uint64_t v6 = *((void *)&v7 + 1);
    }
    else {
      uint64_t v6 = 0;
    }
    if (v4 == 35) {
      llvm::DWARFUnit::findRnglistFromIndex(v5, v6, a2);
    }
    else {
      llvm::DWARFUnit::findRnglistFromOffset(v5, v6, a2);
    }
  }
  else
  {
LABEL_2:
    *(unsigned char *)(a2 + 24) &= ~1u;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
  }
}

void *llvm::DWARFDie::getName(llvm::DWARFDie *this, int a2)
{
  if (!*(void *)this) {
    return 0;
  }
  uint64_t result = 0;
  if (a2)
  {
    if (*((void *)this + 1))
    {
      if (a2 != 2 || (uint64_t result = llvm::DWARFDie::getLinkageName(this)) == 0)
      {
        return llvm::DWARFDie::getShortName(this);
      }
    }
  }
  return result;
}

void *llvm::DWARFDie::getLinkageName(llvm::DWARFDie *this)
{
  if (!*(void *)this || !*((void *)this + 1)) {
    return 0;
  }
  int v3 = 7217159;
  llvm::DWARFDie::findRecursively(this, (unsigned __int16 *)&v3, 2, v4);
  uint64_t result = sub_1CC694498((llvm *)v4);
  if (!v2) {
    return 0;
  }
  return result;
}

double llvm::DWARFDie::attributes@<D0>(llvm::DWARFDie *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = (void *)*((void *)this + 1);
  *(void *)&long long v13 = *(void *)this;
  *((void *)&v13 + 1) = v4;
  DWORD2(v14) = 0;
  WORD6(v14) = 0;
  LOWORD(v15) = 0;
  BYTE2(v15) = 0;
  *((void *)&v15 + 1) = 0;
  *(void *)&long long v16 = 0;
  long long v17 = 0uLL;
  LODWORD(v18) = 0;
  int64x2_t v5 = (unsigned __int8 *)v4[2];
  *(void *)&long long v14 = *v4 + v5[6];
  llvm::DWARFDie::attribute_iterator::updateForIndex((uint64_t)&v13, (const llvm::DWARFAbbreviationDeclaration *)v5, 0);
  uint64_t v6 = *(void *)this;
  uint64_t v7 = *((void *)this + 1);
  int v8 = *(_DWORD *)(*(void *)(v7 + 16) + 16);
  long long v9 = v16;
  *(_OWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 48) = v9;
  *(_OWORD *)(a2 + 64) = v17;
  uint64_t v10 = v18;
  double result = *(double *)&v13;
  long long v12 = v14;
  *(_OWORD *)a2 = v13;
  *(_OWORD *)(a2 + 16) = v12;
  *(void *)(a2 + 80) = v10;
  *(void *)(a2 + 88) = v6;
  *(void *)(a2 + 96) = v7;
  *(void *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_WORD *)(a2 + 116) = 0;
  *(_WORD *)(a2 + 120) = 0;
  *(unsigned char *)(a2 + 122) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_DWORD *)(a2 + 168) = v8;
  return result;
}

void *llvm::DWARFDie::dump(llvm::DWARFDie *this)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  char v2 = (llvm::raw_ostream *)llvm::errs(this);
  void v5[2] = 0;
  v6[2] = 0;
  v4[0] = -1;
  v4[1] = 0x1040000FFFFFFFFLL;
  v4[2] = 0;
  v5[0] = &unk_1F26187D0;
  v5[1] = llvm::WithColor::defaultErrorHandler;
  v5[3] = v5;
  v6[0] = &unk_1F26187D0;
  v6[1] = llvm::WithColor::defaultWarningHandler;
  v6[3] = v6;
  llvm::DWARFDie::dump((uint64_t *)this, v2, 0, (uint64_t)v4);
  return sub_1CD5E15A8(v4);
}

uint64_t llvm::DWARFDie::attribute_iterator::updateForIndex(uint64_t this, const llvm::DWARFAbbreviationDeclaration *a2, unsigned int a3)
{
  uint64_t v3 = this;
  *(_DWORD *)(this + 80) = a3;
  if (*((_DWORD *)a2 + 4) <= a3)
  {
    *(void *)(this + 16) = 0;
    *(_DWORD *)(this + 24) = 0;
    *(_WORD *)(this + 28) = 0;
    *(_WORD *)(this + 32) = 0;
    *(unsigned char *)(this + 34) = 0;
    *(void *)(this + 40) = 0;
    *(void *)(this + 48) = 0;
    *(void *)(this + 64) = 0;
    *(void *)(this + 72) = 0;
  }
  else
  {
    uint64_t v4 = *((void *)a2 + 1);
    int64x2_t v5 = (_WORD *)(v4 + 16 * a3);
    *(_WORD *)(this + 28) = *v5;
    unint64_t v6 = *(void *)(this + 16) + *(unsigned int *)(this + 24);
    *(void *)(this + 16) = v6;
    unint64_t v13 = v6;
    uint64_t v7 = (unsigned __int16)v5[1];
    if (v7 == 33)
    {
      this = llvm::DWARFFormValue::createFromSValue(v7, *(void *)(v4 + 16 * a3 + 8), (uint64_t)&v10);
      long long v8 = v11;
      *(_OWORD *)(v3 + 32) = v10;
      *(_OWORD *)(v3 + 48) = v8;
      *(_OWORD *)(v3 + 64) = v12;
    }
    else
    {
      this = (uint64_t)llvm::DWARFFormValue::createFromUnit(*(llvm::DWARFUnit **)v3, v7, &v13, (uint64_t)&v10);
      long long v9 = v11;
      *(_OWORD *)(v3 + 32) = v10;
      *(_OWORD *)(v3 + 48) = v9;
      *(_OWORD *)(v3 + 64) = v12;
      LODWORD(v6) = v13;
    }
    *(_DWORD *)(v3 + 24) = v6 - *(_DWORD *)(v3 + 16);
  }
  return this;
}

BOOL llvm::DWARFAttribute::mayHaveLocationList(int a1)
{
  BOOL result = 1;
  if ((a1 - 25) > 0x34 || ((1 << (a1 - 25)) & 0x12A08080020001) == 0) {
    return a1 == 2;
  }
  return result;
}

uint64_t llvm::DWARFAttribute::mayHaveLocationExpr(int a1)
{
  uint64_t result = 1;
  if (a1 > 76)
  {
    if (((a1 - 77) > 0x39 || ((1 << (a1 - 77)) & 0x3C600100000001FLL) == 0)
      && a1 != 8465
      && a1 != 8467)
    {
      return 0;
    }
  }
  else if (((a1 - 11) > 0x3F || ((1 << (a1 - 11)) & 0xA820301880804007) == 0) {
         && a1 != 2)
  }
  {
    return 0;
  }
  return result;
}

void sub_1CD5E9DA4()
{
}

llvm::raw_ostream *sub_1CD5E9DB8(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD5E11D4(*(unsigned __int16 **)(a1 + 8), a2);
}

void sub_1CD5E9DC4()
{
}

llvm::raw_ostream *sub_1CD5E9DD8(uint64_t a1, llvm::raw_ostream *a2)
{
  return sub_1CD5E132C(*(unsigned __int16 **)(a1 + 8), a2);
}

void sub_1CD5E9DE0(uint64_t a1, unint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  long long v12 = v13;
  int v11 = 0;
  uint64_t v4 = &unk_1F2646F30;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v4, a2);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *v12, (unint64_t)v12[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)v12;
    *(void *)(a1 + 16) = v12[2];
    *(_OWORD *)a1 = v3;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v4);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

void sub_1CD5E9E9C(uint64_t a1, uint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  long long v12 = v13;
  int v11 = 0;
  uint64_t v4 = &unk_1F2646F30;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v4, a2);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *v12, (unint64_t)v12[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)v12;
    *(void *)(a1 + 16) = v12[2];
    *(_OWORD *)a1 = v3;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v4);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

void *sub_1CD5E9F58@<X0>(unint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (char *)&v14;
  if (!a1)
  {
    uint64_t v7 = &v13;
    char v13 = 48;
  }
  BOOL v8 = a3 != 0;
  if (!a3) {
    BOOL v8 = a1;
  }
  if (v8)
  {
    if (a2) {
      char v9 = 32;
    }
    else {
      char v9 = 0;
    }
    unsigned int v10 = 1;
    do
    {
      *--uint64_t v7 = a0123456789abcd_6[a1 & 0xF] | v9;
      a1 >>= 4;
      BOOL v11 = v10 < a3;
      if (!a3) {
        BOOL v11 = a1;
      }
      ++v10;
    }
    while (v11);
  }
  return sub_1CC028D80(a4, v7, (char *)&v14, (char *)&v14 - v7);
}

uint64_t sub_1CD5EA028(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  if (a2)
  {
    uint64_t FirstChild = 0;
    uint64_t result = 0;
    uint64_t v9 = 0;
    if (a3)
    {
      uint64_t FirstChild = llvm::DWARFUnit::getFirstChild(a2, a3);
      uint64_t v4 = v10;
      uint64_t result = llvm::DWARFUnit::getLastChild(a2, a3);
    }
  }
  else
  {
    uint64_t FirstChild = 0;
    uint64_t result = 0;
    uint64_t v9 = 0;
  }
  *a1 = FirstChild;
  a1[1] = v4;
  a1[2] = result;
  a1[3] = v9;
  return result;
}

uint64_t sub_1CD5EA0B0(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        unint64_t v9 = *(void *)v5[5];
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        return 0;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = operator new(0x30uLL);
    void v10[2] = *a3;
    *(void *)uint64_t v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v8;
    *uint64_t v6 = (uint64_t *)v10;
    BOOL v11 = (uint64_t *)**a1;
    if (v11)
    {
      *a1 = v11;
      long long v12 = *v6;
    }
    else
    {
      long long v12 = (uint64_t *)v10;
    }
    sub_1CB8358B8(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

uint64_t sub_1CD5EA184(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(char *)(a1 + 20));
}

uint64_t llvm::DWARFExpression::print(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, llvm::MCRegisterInfo *a4, llvm::DWARFUnit *a5, int a6)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 8)) {
    sub_1CB8E509C(a2, "<empty>");
  }
  sub_1CC6A2264((uint64_t)&v23, (long long *)a1, 0);
  uint64_t result = sub_1CC6A2264((uint64_t)&v21, (long long *)a1, *(void *)(a1 + 8));
  if (v23 != v21 || v24 != v22)
  {
    int v12 = 0;
    int v17 = 0;
    while (1)
    {
      *(_OWORD *)uint64_t v28 = *(_OWORD *)a3;
      *(void *)&v28[14] = *(void *)(a3 + 14);
      sub_1CC66D518((uint64_t)&v29, a3 + 24);
      sub_1CC66D518((uint64_t)v30, a3 + 56);
      BOOL v13 = llvm::DWARFExpression::Operation::print(v25, a2, (uint64_t)v28, (void *)a1, a4, a5, a6);
      uint64_t result = (uint64_t)sub_1CD5E15A8(v28);
      if (!v13) {
        break;
      }
      if (v25[0] == 163 || v25[0] == 243)
      {
        sub_1CB8E509C(a2, "(");
        int v12 = v27;
        int v17 = v26;
      }
      else
      {
        unint64_t v14 = v26;
        if (v12)
        {
          v12 += v17 - v26;
          if (!v12)
          {
            sub_1CB8E509C(a2, ")");
            unint64_t v14 = v26;
          }
        }
        if (v14 < *(void *)(a1 + 8)) {
          sub_1CB8E509C(a2, ", ");
        }
      }
      uint64_t result = (uint64_t)sub_1CC6A144C(&v23);
      if (v23 == v21 && v24 == v22) {
        return result;
      }
    }
    for (i = v26; i < *(void *)(a1 + 8); uint64_t result = (uint64_t)llvm::raw_ostream::operator<<(a2, (uint64_t)v20))
    {
      if (llvm::DataExtractor::prepareRead(a1, i, 1, 0)) {
        uint64_t v16 = *(unsigned __int8 *)(*(void *)a1 + i++);
      }
      else {
        uint64_t v16 = 0;
      }
      v20[0] = &unk_1F260ED30;
      v20[1] = " %02x";
      v20[2] = v16;
    }
  }
  return result;
}

void sub_1CD5EA438()
{
  v0 = (unsigned char *)qword_1EBCD9970;
  if (0xAAAAAAAAAAAAAAABLL * (qword_1EBCD9978 - qword_1EBCD9970) >= 0xFF)
  {
    for (uint64_t i = 0; i != 765; i += 3)
    {
      BOOL v11 = &v0[i];
      *(_WORD *)BOOL v11 = -256;
      __n128 v11[2] = -1;
    }
    qword_1EBCD9970 = (uint64_t)(v0 + 765);
  }
  else
  {
    uint64_t v1 = qword_1EBCD9968;
    unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (qword_1EBCD9970 - qword_1EBCD9968);
    unint64_t v3 = v2 + 255;
    if (v2 + 255 >= 0x5555555555555556) {
      abort();
    }
    if (0x5555555555555556 * (qword_1EBCD9978 - qword_1EBCD9968) > v3) {
      unint64_t v3 = 0x5555555555555556 * (qword_1EBCD9978 - qword_1EBCD9968);
    }
    if (0xAAAAAAAAAAAAAAABLL * (qword_1EBCD9978 - qword_1EBCD9968) >= 0x2AAAAAAAAAAAAAAALL) {
      unint64_t v4 = 0x5555555555555555;
    }
    else {
      unint64_t v4 = v3;
    }
    if (v4)
    {
      if (v4 >= 0x5555555555555556) {
        sub_1CB833614();
      }
      int v5 = operator new(3 * v4);
    }
    else
    {
      int v5 = 0;
    }
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t)v5 + 3 * v2;
    do
    {
      uint64_t v8 = v7 + v6;
      *(_WORD *)uint64_t v8 = -256;
      *(unsigned char *)(v8 + 2) = -1;
      v6 += 3;
    }
    while (v6 != 765);
    uint64_t v9 = v7 + 765;
    if (v0 != (unsigned char *)v1)
    {
      do
      {
        __int16 v12 = *(_WORD *)(v0 - 3);
        v0 -= 3;
        char v13 = v0[2];
        *(_WORD *)(v7 - 3) = v12;
        v7 -= 3;
        *(unsigned char *)(v7 + 2) = v13;
      }
      while (v0 != (unsigned char *)v1);
      v0 = (unsigned char *)qword_1EBCD9968;
    }
    qword_1EBCD9968 = v7;
    qword_1EBCD9970 = v9;
    qword_1EBCD9978 = (uint64_t)v5 + 3 * v4;
    if (v0)
    {
      operator delete(v0);
    }
  }
}

uint64_t llvm::DWARFFormValue::createFromSValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = result;
  *(unsigned char *)(a3 + 2) = 0;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  return result;
}

uint64_t llvm::DWARFFormValue::createFromUValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = result;
  *(unsigned char *)(a3 + 2) = 0;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  return result;
}

uint64_t llvm::DWARFFormValue::createFromPValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = result;
  *(unsigned char *)(a3 + 2) = 0;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  return result;
}

unsigned __int16 *llvm::DWARFFormValue::createFromUnit@<X0>(llvm::DWARFUnit *this@<X1>, __int16 a2@<W0>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(_WORD *)a4 = a2;
  *(unsigned char *)(a4 + 2) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  llvm::DWARFUnit::getDebugInfoExtractor(this, v8);
  return llvm::DWARFFormValue::extractValue((unsigned __int16 *)a4, (uint64_t *)v8, a3, *((_DWORD *)this + 8), 0, (uint64_t)this);
}

uint64_t llvm::DWARFFormValue::skipValue(unsigned __int16 ULEB128, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  while (2)
  {
    if (ULEB128 <= 0x1F00u)
    {
      switch(ULEB128)
      {
        case 1u:
        case 5u:
        case 6u:
        case 7u:
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x17u:
        case 0x19u:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x28u:
        case 0x29u:
        case 0x2Au:
        case 0x2Cu:
          goto LABEL_6;
        case 3u:
          unsigned int U16 = llvm::DataExtractor::getU16(a2, a3, 0);
          break;
        case 4u:
          unsigned int U16 = llvm::DataExtractor::getU32(a2, a3, 0);
          break;
        case 8u:
          llvm::DataExtractor::getCStrRef(a2, a3, 0);
          return 1;
        case 9u:
        case 0x18u:
          uint64_t v8 = *a3 + llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, 0);
          goto LABEL_8;
        case 0xAu:
          unsigned int U16 = llvm::DataExtractor::getU8(a2, a3, 0);
          break;
        case 0xDu:
          llvm::DataExtractor::getSLEB128(a2, (uint64_t *)a3, 0);
          return 1;
        case 0xFu:
        case 0x15u:
        case 0x1Au:
        case 0x1Bu:
        case 0x22u:
        case 0x23u:
          goto LABEL_10;
        case 0x16u:
          unint64_t ULEB128 = llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, 0);
          continue;
        default:
          return 0;
      }
      uint64_t v8 = *a3 + U16;
      goto LABEL_8;
    }
    break;
  }
  if (ULEB128 - 7937 < 2)
  {
LABEL_10:
    llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, 0);
    return 1;
  }
  if (ULEB128 - 7968 >= 2)
  {
    if (ULEB128 == 8193)
    {
      llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, 0);
      uint64_t v8 = *a3 + 4;
      goto LABEL_8;
    }
  }
  else
  {
LABEL_6:
    unsigned __int16 FixedFormByteSize = llvm::dwarf::getFixedFormByteSize(ULEB128, a4 & 0xFFFFFFFFFFFFLL);
    if (FixedFormByteSize >= 0x100u)
    {
      uint64_t v8 = *a3 + FixedFormByteSize;
LABEL_8:
      *a3 = v8;
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::DWARFFormValue::isFormClass(unsigned __int16 *a1, int a2)
{
  uint64_t v2 = *a1;
  if (v2 <= 0x2D && dword_1CFB1BA50[v2] == a2) {
    return 1;
  }
  if (*a1 <= 0x1F1Fu)
  {
    if (v2 != 7937)
    {
      if (v2 != 7938) {
        goto LABEL_16;
      }
      return a2 == 4;
    }
    return a2 == 1;
  }
  switch(v2)
  {
    case 0x2001:
      return a2 == 1;
    case 0x1F21:
      return a2 == 4;
    case 0x1F20:
      return a2 == 6;
  }
LABEL_16:
  if (a2 != 8) {
    return 0;
  }
  if ((v2 - 6) < 2)
  {
    uint64_t v5 = *((void *)a1 + 4);
    if (!v5) {
      return 1;
    }
    return *(unsigned __int16 *)(v5 + 32) < 4u;
  }
  else
  {
    uint64_t result = 1;
    if (v2 != 14 && v2 != 31) {
      return 0;
    }
  }
  return result;
}

unsigned __int16 *llvm::DWARFFormValue::extractValue(unsigned __int16 *result, uint64_t *a2, unint64_t *a3, int a4, uint64_t a5, uint64_t a6)
{
  __int16 v6 = a4;
  uint64_t v9 = result;
  unsigned __int8 v10 = BYTE2(a4);
  int v11 = HIBYTE(a4);
  if (!a5 && a6) {
    a5 = *(void *)(a6 + 8);
  }
  *((void *)result + 4) = a6;
  *((void *)result + 5) = a5;
  *((unsigned char *)result + 2) = HIBYTE(a4);
  *((void *)result + 2) = 0;
  uint64_t v27 = 0;
  int v12 = *result;
  while (2)
  {
    if (v12 <= 7936)
    {
      switch(v12)
      {
        case 2:
        case 43:
          __break(1u);
          return result;
        case 3:
          unsigned int U16 = llvm::DataExtractor::getU16(a2, a3, &v27);
          goto LABEL_47;
        case 4:
          unsigned int U16 = llvm::DataExtractor::getU32(a2, a3, &v27);
          goto LABEL_47;
        case 5:
        case 18:
        case 38:
        case 42:
          unsigned int U8 = llvm::DataExtractor::getU16(a2, a3, &v27);
          goto LABEL_26;
        case 6:
        case 19:
        case 28:
        case 40:
        case 44:
          uint64_t v14 = (uint64_t)a2;
          int v13 = 4;
          goto LABEL_15;
        case 7:
        case 20:
        case 36:
          uint64_t v14 = (uint64_t)a2;
          int v13 = 8;
          goto LABEL_15;
        case 8:
          uint64_t CStrRef = (uint64_t)llvm::DataExtractor::getCStrRef(a2, a3, &v27);
          goto LABEL_17;
        case 9:
        case 24:
          uint64_t ULEB128 = llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, &v27);
          goto LABEL_48;
        case 10:
          unsigned int U16 = llvm::DataExtractor::getU8(a2, a3, &v27);
LABEL_47:
          uint64_t ULEB128 = U16;
          goto LABEL_48;
        case 11:
        case 12:
        case 17:
        case 37:
        case 41:
          unsigned int U8 = llvm::DataExtractor::getU8(a2, a3, &v27);
          goto LABEL_26;
        case 13:
          uint64_t CStrRef = llvm::DataExtractor::getSLEB128(a2, (uint64_t *)a3, &v27);
          goto LABEL_17;
        case 14:
        case 23:
        case 29:
        case 31:
          goto LABEL_11;
        case 15:
        case 21:
        case 26:
        case 27:
        case 34:
        case 35:
          goto LABEL_23;
        case 22:
          uint64_t result = (unsigned __int16 *)llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, &v27);
          int v12 = (unsigned __int16)result;
          *uint64_t v9 = (unsigned __int16)result;
          if (v27) {
            goto LABEL_18;
          }
          continue;
        case 25:
          uint64_t v20 = 1;
          goto LABEL_27;
        case 30:
          uint64_t ULEB128 = 16;
LABEL_48:
          *((void *)v9 + 1) = ULEB128;
          *((void *)v9 + 2) = llvm::DataExtractor::getBytes(a2, a3, ULEB128, &v27);
          goto LABEL_18;
        case 32:
          uint64_t CStrRef = llvm::DataExtractor::getU64(a2, a3, &v27);
          goto LABEL_17;
        case 33:
          goto LABEL_18;
        case 39:
          unsigned int U8 = llvm::DataExtractor::getU24((uint64_t)a2, a3, &v27);
LABEL_26:
          uint64_t v20 = U8;
          goto LABEL_27;
        default:
          if (v11) {
            char v22 = 8;
          }
          else {
            char v22 = 4;
          }
          if (v6 == 2 || v12 == 1) {
            unsigned __int8 v24 = v10;
          }
          else {
            unsigned __int8 v24 = v22;
          }
          int v13 = v24;
          uint64_t v16 = v9 + 12;
          uint64_t v14 = (uint64_t)a2;
          long long v15 = a3;
          goto LABEL_16;
      }
    }
    break;
  }
  if ((v12 - 7937) < 2)
  {
LABEL_23:
    uint64_t CStrRef = llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, &v27);
LABEL_17:
    *((void *)v9 + 1) = CStrRef;
    goto LABEL_18;
  }
  if ((v12 - 7968) < 2)
  {
LABEL_11:
    if (v11) {
      int v13 = 8;
    }
    else {
      int v13 = 4;
    }
    uint64_t v14 = (uint64_t)a2;
LABEL_15:
    long long v15 = a3;
    uint64_t v16 = 0;
LABEL_16:
    uint64_t CStrRef = llvm::DWARFDataExtractor::getRelocatedValue(v14, v13, v15, v16, &v27);
    goto LABEL_17;
  }
  *((void *)v9 + 1) = llvm::DataExtractor::getULEB128(a2, (uint64_t *)a3, &v27) << 32;
  uint64_t v20 = *((void *)v9 + 1) | llvm::DataExtractor::getU32(a2, a3, &v27);
LABEL_27:
  *((void *)v9 + 1) = v20;
LABEL_18:
  uint64_t v26 = v27;
  uint64_t v27 = 0;
  BOOL v18 = sub_1CC6A2754(&v26);
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  return (unsigned __int16 *)!v18;
}

llvm::raw_ostream *llvm::DWARFFormValue::dumpAddress(llvm::DWARFFormValue *this, llvm::raw_ostream *a2, uint64_t a3)
{
  v4[0] = &unk_1F2619220;
  v4[1] = "0x%*.*llx";
  char v5 = 2 * (_BYTE)a2;
  char v6 = 2 * (_BYTE)a2;
  uint64_t v7 = a3;
  return llvm::raw_ostream::operator<<(this, (uint64_t)v4);
}

void *llvm::DWARFFormValue::dumpSectionedAddress(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  char v9 = *(unsigned char *)(*(void *)(a1 + 32) + 34);
  v12[0] = &unk_1F2619220;
  v12[1] = "0x%*.*llx";
  char v13 = 2 * v9;
  char v14 = 2 * v9;
  uint64_t v15 = a4;
  llvm::raw_ostream::operator<<(a2, (uint64_t)v12);
  unsigned __int8 v10 = *(llvm::raw_ostream **)(*(void *)(*(void *)(a1 + 32) + 8) + 520);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)a3;
  *(void *)&v16[14] = *(void *)(a3 + 14);
  sub_1CC66D518((uint64_t)&v17, a3 + 24);
  sub_1CC66D518((uint64_t)v18, a3 + 56);
  llvm::DWARFFormValue::dumpAddressSection(v10, a2, (uint64_t)v16, a5);
  return sub_1CD5E15A8(v16);
}

llvm::raw_ostream *llvm::DWARFFormValue::dumpAddressSection(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  if (a4 != -1)
  {
    v13[9] = v4;
    v13[10] = v5;
    if (*(unsigned char *)(a3 + 20))
    {
      uint64_t v8 = (*(uint64_t (**)(llvm::raw_ostream *))(*(void *)result + 32))(result);
      uint64_t v9 = v8 + 24 * a4;
      unsigned __int8 v10 = sub_1CB8E509C(a2, " \"");
      int v11 = *(const void **)v9;
      size_t v12 = *(void *)(v9 + 8);
      uint64_t result = (llvm::raw_ostream *)*((void *)v10 + 4);
      if (v12 <= *((void *)v10 + 3) - (void)result)
      {
        if (v12)
        {
          memcpy(result, v11, v12);
          uint64_t result = (llvm::raw_ostream *)(*((void *)v10 + 4) + v12);
          *((void *)v10 + 4) = result;
        }
      }
      else
      {
        llvm::raw_ostream::write(v10, (const char *)v11, v12);
        uint64_t result = (llvm::raw_ostream *)*((void *)v10 + 4);
      }
      if ((unint64_t)result >= *((void *)v10 + 3))
      {
        uint64_t result = llvm::raw_ostream::write(v10, 34);
      }
      else
      {
        *((void *)v10 + 4) = (char *)result + 1;
        *(unsigned char *)uint64_t result = 34;
      }
      if (!*(unsigned char *)(v8 + 24 * a4 + 16))
      {
        v13[0] = &unk_1F25FF808;
        v13[1] = " [%llu]";
        v13[2] = a4;
        return llvm::raw_ostream::operator<<(a2, (uint64_t)v13);
      }
    }
  }
  return result;
}

void llvm::DWARFFormValue::dump(unsigned __int16 *a1, llvm::raw_ostream *a2, uint64_t a3)
{
  v52[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a1 + 1);
  if (*(unsigned char *)(a3 + 15))
  {
    llvm::WithColor::WithColor(&v34, a2, 0, 0);
    uint64_t v7 = (uint64_t *)v34;
    llvm::WithColor::~WithColor((llvm::WithColor *)&v34);
  }
  else
  {
    uint64_t v7 = llvm::nulls((llvm *)a1);
  }
  if (*((unsigned char *)a1 + 2)) {
    int v8 = 16;
  }
  else {
    int v8 = 8;
  }
  uint64_t v9 = *a1;
  if (*a1 <= 0x1F00u)
  {
    switch(*a1)
    {
      case 1u:
        *(_OWORD *)uint64_t v50 = *(_OWORD *)a3;
        *(void *)&v50[14] = *(void *)(a3 + 14);
        sub_1CC66D518((uint64_t)&v51, a3 + 24);
        sub_1CC66D518((uint64_t)v52, a3 + 56);
        llvm::DWARFFormValue::dumpSectionedAddress((uint64_t)a1, (llvm::raw_ostream *)v7, (uint64_t)v50, *((void *)a1 + 1), *((void *)a1 + 3));
        char v14 = v50;
        goto LABEL_92;
      case 3u:
      case 4u:
      case 9u:
      case 0xAu:
      case 0x18u:
        if (v6)
        {
          switch(*a1)
          {
            case 3u:
              unsigned __int8 v10 = (unsigned __int8 *)&unk_1F2618A88;
              uint64_t v11 = (unsigned __int16)v6;
              size_t v12 = "<0x%4.4x> ";
              goto LABEL_76;
            case 4u:
              unsigned __int8 v10 = (unsigned __int8 *)&unk_1F25FED10;
              uint64_t v11 = v6;
              size_t v12 = "<0x%8.8x> ";
              goto LABEL_76;
            case 5u:
            case 6u:
            case 7u:
            case 8u:
              goto LABEL_78;
            case 9u:
              goto LABEL_73;
            case 0xAu:
              unsigned __int8 v10 = (unsigned __int8 *)&unk_1F260ED30;
              uint64_t v11 = v6;
              size_t v12 = "<0x%2.2x> ";
LABEL_76:
              long long v34 = v10;
              long long v35 = v12;
              uint64_t v36 = v11;
              goto LABEL_77;
            default:
              if (v9 != 24) {
                goto LABEL_78;
              }
LABEL_73:
              long long v34 = (unsigned __int8 *)&unk_1F25FF808;
              long long v35 = "<0x%llx> ";
              uint64_t v36 = v6;
LABEL_77:
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)v7, (uint64_t)&v34);
LABEL_78:
              uint64_t v27 = (unsigned __int8 *)*((void *)a1 + 2);
              if (!v27)
              {
                uint64_t v20 = "NULL";
                goto LABEL_34;
              }
              if (v6 >= 1)
              {
                uint64_t v28 = &v27[v6];
                do
                {
                  long long v34 = (unsigned __int8 *)&unk_1F260ED30;
                  unsigned int v29 = *v27++;
                  long long v35 = "%2.2x ";
                  uint64_t v36 = v29;
                  llvm::raw_ostream::operator<<((llvm::raw_ostream *)v7, (uint64_t)&v34);
                }
                while (v27 < v28);
              }
              break;
          }
        }
        return;
      case 5u:
        uint64_t v15 = (unsigned __int8 *)&unk_1F2618A88;
        uint64_t v9 = (unsigned __int16)v6;
        uint64_t v16 = "0x%04x";
        goto LABEL_21;
      case 6u:
        uint64_t v15 = (unsigned __int8 *)&unk_1F25FED10;
        uint64_t v9 = v6;
        uint64_t v16 = "0x%08x";
        goto LABEL_21;
      case 7u:
        long long v34 = (unsigned __int8 *)&unk_1F25FF808;
        long long v35 = "0x%016llx";
        uint64_t v36 = v6;
        goto LABEL_22;
      case 8u:
        uint64_t v21 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v21 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 34);
        }
        else
        {
          *((void *)a2 + 4) = v21 + 1;
          unsigned char *v21 = 34;
        }
        uint64_t v30 = (char *)*((void *)a1 + 1);
        if (v30) {
          size_t v31 = strlen(v30);
        }
        else {
          size_t v31 = 0;
        }
        llvm::raw_ostream::write_escaped(a2, v30, v31, 0);
        uint64_t v32 = (unsigned char *)*((void *)a2 + 4);
        if ((unint64_t)v32 >= *((void *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 34);
        }
        else
        {
          *((void *)a2 + 4) = v32 + 1;
          *uint64_t v32 = 34;
        }
        return;
      case 0xBu:
      case 0xCu:
        uint64_t v15 = (unsigned __int8 *)&unk_1F260ED30;
        uint64_t v9 = v6;
        uint64_t v16 = "0x%02x";
        goto LABEL_21;
      case 0xDu:
      case 0x21u:
        llvm::raw_ostream::operator<<(a2, *((void *)a1 + 1));
        return;
      case 0xEu:
        if (!*(unsigned char *)(a3 + 20)) {
          goto LABEL_101;
        }
        char v33 = " .debug_str[0x%0*llx] = ";
        goto LABEL_107;
      case 0xFu:
        llvm::raw_ostream::operator<<(a2, *((void *)a1 + 1));
        return;
      case 0x10u:
      case 0x20u:
        BOOL v18 = "0x%016llx";
        goto LABEL_26;
      case 0x11u:
        if (!*(unsigned char *)(a3 + 20)) {
          goto LABEL_52;
        }
        char v22 = (unsigned __int8 *)&unk_1F260ED30;
        uint64_t v23 = v6;
        unsigned __int8 v24 = "cu + 0x%2.2x";
        goto LABEL_50;
      case 0x12u:
        if (!*(unsigned char *)(a3 + 20)) {
          goto LABEL_52;
        }
        char v22 = (unsigned __int8 *)&unk_1F2618A88;
        uint64_t v23 = (unsigned __int16)v6;
        goto LABEL_49;
      case 0x13u:
        if (!*(unsigned char *)(a3 + 20)) {
          goto LABEL_52;
        }
        char v22 = (unsigned __int8 *)&unk_1F25FED10;
        uint64_t v23 = v6;
LABEL_49:
        unsigned __int8 v24 = "cu + 0x%4.4x";
LABEL_50:
        long long v34 = v22;
        long long v35 = v24;
        uint64_t v36 = v23;
        goto LABEL_51;
      case 0x14u:
        if (!*(unsigned char *)(a3 + 20)) {
          goto LABEL_52;
        }
        uint64_t v26 = "cu + 0x%8.8llx";
        goto LABEL_64;
      case 0x15u:
        if (!*(unsigned char *)(a3 + 20)) {
          goto LABEL_52;
        }
        uint64_t v26 = "cu + 0x%llx";
LABEL_64:
        long long v34 = (unsigned __int8 *)&unk_1F25FF808;
        long long v35 = v26;
        uint64_t v36 = v6;
LABEL_51:
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)v7, (uint64_t)&v34);
LABEL_52:
        if (*(unsigned char *)(a3 + 20)) {
          sub_1CB8E509C(a2, " => {");
        }
        if (*(unsigned char *)(a3 + 15))
        {
          llvm::WithColor::WithColor(&v41, a2, 0, 0);
          uint64_t v25 = *((void *)a1 + 4);
          if (v25) {
            uint64_t v25 = *(void *)(v25 + 24);
          }
          long long v34 = (unsigned __int8 *)&unk_1F25FF808;
          long long v35 = "0x%8.8llx";
          uint64_t v36 = v25 + v6;
          llvm::raw_ostream::operator<<(v41, (uint64_t)&v34);
          llvm::WithColor::~WithColor((llvm::WithColor *)&v41);
        }
        if (!*(unsigned char *)(a3 + 20)) {
          return;
        }
        uint64_t v20 = "}";
        break;
      case 0x16u:
        uint64_t v20 = "DW_FORM_indirect";
        goto LABEL_34;
      case 0x17u:
        long long v34 = (unsigned __int8 *)&unk_1F2618A68;
        long long v35 = "0x%0*llx";
        LODWORD(v36) = v8;
        uint64_t v37 = v6;
        goto LABEL_27;
      case 0x19u:
        uint64_t v20 = "true";
        goto LABEL_34;
      case 0x1Au:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
        goto LABEL_98;
      case 0x1Bu:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
        goto LABEL_29;
      case 0x1Eu:
        long long v34 = (unsigned __int8 *)*((void *)a1 + 2);
        long long v35 = (const char *)16;
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0x1000000000;
        __int16 v39 = 16;
        char v40 = 0;
        llvm::raw_ostream::operator<<(a2, &v34);
        return;
      case 0x1Fu:
        if (!*(unsigned char *)(a3 + 20)) {
          goto LABEL_101;
        }
        char v33 = " .debug_line_str[0x%0*llx] = ";
LABEL_107:
        long long v34 = (unsigned __int8 *)&unk_1F2618A68;
        long long v35 = v33;
        LODWORD(v36) = v8;
        uint64_t v37 = v6;
        goto LABEL_100;
      case 0x22u:
        uint64_t v15 = (unsigned __int8 *)&unk_1F25FED10;
        uint64_t v9 = v6;
        uint64_t v16 = "indexed (0x%x) loclist = ";
        goto LABEL_21;
      case 0x23u:
        uint64_t v15 = (unsigned __int8 *)&unk_1F25FED10;
        uint64_t v9 = v6;
        uint64_t v16 = "indexed (0x%x) rangelist = ";
        goto LABEL_21;
      default:
        goto LABEL_97;
    }
    goto LABEL_34;
  }
  if (*a1 <= 0x1F1Fu)
  {
    if (v9 == 7937)
    {
LABEL_29:
      uint64_t v19 = *((void *)a1 + 4);
      if (v19)
      {
        llvm::DWARFUnit::getAddrOffsetSectionItem(v19, v6, (uint64_t)&v34);
        if ((_BYTE)v36 && !*(unsigned char *)(a3 + 20)
          || (unint64_t v41 = (llvm::raw_ostream *)&unk_1F25FED10,
              long long v42 = "indexed (%8.8x) address = ",
              unint64_t v43 = v6,
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)v7, (uint64_t)&v41),
              (_BYTE)v36))
        {
          *(_OWORD *)uint64_t v47 = *(_OWORD *)a3;
          *(void *)&v47[14] = *(void *)(a3 + 14);
          sub_1CC66D518((uint64_t)&v48, a3 + 24);
          sub_1CC66D518((uint64_t)&v49, a3 + 56);
          llvm::DWARFFormValue::dumpSectionedAddress((uint64_t)a1, (llvm::raw_ostream *)v7, (uint64_t)v47, (uint64_t)v34, (uint64_t)v35);
          char v14 = v47;
          goto LABEL_92;
        }
        goto LABEL_33;
      }
LABEL_36:
      uint64_t v20 = "<invalid dwarf unit>";
      goto LABEL_34;
    }
    if (v9 == 7938)
    {
LABEL_98:
      if (*(unsigned char *)(a3 + 20))
      {
        long long v34 = (unsigned __int8 *)&unk_1F25FED10;
        long long v35 = "indexed (%8.8x) string = ";
        uint64_t v36 = v6;
        goto LABEL_100;
      }
LABEL_101:
      llvm::DWARFFormValue::dumpString((llvm::DWARFFormValue *)a1, a2);
      return;
    }
    goto LABEL_97;
  }
  if (v9 == 7968)
  {
    BOOL v18 = "<alt 0x%llx>";
LABEL_26:
    long long v34 = (unsigned __int8 *)&unk_1F25FF808;
    long long v35 = v18;
    uint64_t v36 = v6;
LABEL_27:
    uint64_t v17 = (llvm::raw_ostream *)v7;
LABEL_23:
    llvm::raw_ostream::operator<<(v17, (uint64_t)&v34);
    return;
  }
  if (v9 != 8193)
  {
    if (v9 == 7969)
    {
      if (*(unsigned char *)(a3 + 20))
      {
        long long v34 = (unsigned __int8 *)&unk_1F25FF808;
        long long v35 = "alt indirect string, offset: 0x%llx";
        uint64_t v36 = v6;
LABEL_100:
        llvm::raw_ostream::operator<<(a2, (uint64_t)&v34);
        goto LABEL_101;
      }
      goto LABEL_101;
    }
LABEL_97:
    uint64_t v15 = (unsigned __int8 *)&unk_1F26187B0;
    uint64_t v16 = "DW_FORM(0x%4.4x)";
LABEL_21:
    long long v34 = v15;
    long long v35 = v16;
    uint64_t v36 = v9;
LABEL_22:
    uint64_t v17 = a2;
    goto LABEL_23;
  }
  uint64_t v13 = *((void *)a1 + 4);
  if (!v13) {
    goto LABEL_36;
  }
  llvm::DWARFUnit::getAddrOffsetSectionItem(v13, SHIDWORD(v6), (uint64_t)&v34);
  if ((_BYTE)v36 && !*(unsigned char *)(a3 + 20)
    || (unint64_t v41 = (llvm::raw_ostream *)&unk_1F26088E8,
        long long v42 = "indexed (%8.8x) + 0x%x address = ",
        unint64_t v43 = HIDWORD(v6) | (v6 << 32),
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)v7, (uint64_t)&v41),
        (_BYTE)v36))
  {
    v34 += v6;
    *(_OWORD *)uint64_t v44 = *(_OWORD *)a3;
    *(void *)&v44[14] = *(void *)(a3 + 14);
    sub_1CC66D518((uint64_t)&v45, a3 + 24);
    sub_1CC66D518((uint64_t)&v46, a3 + 56);
    llvm::DWARFFormValue::dumpSectionedAddress((uint64_t)a1, (llvm::raw_ostream *)v7, (uint64_t)v44, (uint64_t)v34, (uint64_t)v35);
    char v14 = v44;
LABEL_92:
    sub_1CD5E15A8(v14);
    return;
  }
LABEL_33:
  uint64_t v20 = "<unresolved>";
LABEL_34:
  sub_1CB8E509C(a2, v20);
}

void llvm::DWARFFormValue::dumpString(llvm::DWARFFormValue *this, llvm::raw_ostream *a2)
{
  long long v3 = *((_OWORD *)this + 1);
  *(_OWORD *)unsigned __int8 v10 = *(_OWORD *)this;
  long long v11 = v3;
  long long v12 = *((_OWORD *)this + 2);
  char v13 = 1;
  uint64_t v4 = (char *)sub_1CC694498((llvm *)v10);
  if (v5)
  {
    uint64_t v6 = v4;
    llvm::WithColor::WithColor(v10, a2, 1, 0);
    uint64_t v7 = (unsigned char *)*((void *)v10[0] + 4);
    if ((unint64_t)v7 >= *((void *)v10[0] + 3))
    {
      llvm::raw_ostream::write(v10[0], 34);
    }
    else
    {
      *((void *)v10[0] + 4) = v7 + 1;
      unsigned char *v7 = 34;
    }
    if (v6) {
      size_t v8 = strlen(v6);
    }
    else {
      size_t v8 = 0;
    }
    llvm::raw_ostream::write_escaped(v10[0], v6, v8, 0);
    uint64_t v9 = (unsigned char *)*((void *)v10[0] + 4);
    if ((unint64_t)v9 >= *((void *)v10[0] + 3))
    {
      llvm::raw_ostream::write(v10[0], 34);
    }
    else
    {
      *((void *)v10[0] + 4) = v9 + 1;
      *uint64_t v9 = 34;
    }
    llvm::WithColor::~WithColor((llvm::WithColor *)v10);
  }
}

llvm *llvm::DWARFFormValue::getAsCString@<X0>(llvm *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(unsigned __int16 *)this;
  if (v4 <= 0x2D && ((0x1E0A4004100uLL >> v4) & 1) != 0)
  {
    if (v4 == 8)
    {
      *(unsigned char *)(a2 + 8) &= ~1u;
      uint64_t v6 = *((void *)this + 1);
      goto LABEL_8;
    }
  }
  else if (v4 != 7938)
  {
    if (v4 != 7969)
    {
      uint64_t v36 = llvm::inconvertibleErrorCode(this);
      uint64_t v37 = v12;
      sub_1CC6A2A38();
    }
LABEL_5:
    uint64_t v36 = llvm::inconvertibleErrorCode(this);
    uint64_t v37 = v5;
    sub_1CB906E7C();
  }
  if (!*((void *)this + 5)) {
    goto LABEL_5;
  }
  unint64_t v7 = *((void *)this + 1);
  unint64_t v35 = v7;
  if (v4 <= 0x28 && ((1 << v4) & 0x1E004000000) != 0 || v4 == 7938)
  {
    size_t v8 = (llvm::DWARFUnit *)*((void *)this + 4);
    if (!v8)
    {
      uint64_t v36 = llvm::inconvertibleErrorCode(0);
      uint64_t v37 = v13;
      sub_1CC6A2AD8();
    }
    this = (llvm *)llvm::DWARFUnit::getStringOffsetSectionItem(v8, v7, (uint64_t)&v36);
    if ((v37 & 1) == 0)
    {
      char v9 = 0;
      unint64_t v35 = v36;
      unsigned int v4 = *(unsigned __int16 *)v2;
      goto LABEL_15;
    }
    uint64_t v6 = v36;
    *(unsigned char *)(a2 + 8) |= 1u;
LABEL_8:
    *(void *)a2 = v6;
    return this;
  }
  LODWORD(v7) = 0;
  char v9 = 1;
LABEL_15:
  if (v4 == 31)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*((void *)v2 + 5) + 520) + 128))(*(void *)(*((void *)v2 + 5) + 520));
  }
  else
  {
    uint64_t v14 = *((void *)v2 + 4);
    if (v14)
    {
      uint64_t v11 = *(void *)(v14 + 160);
      v33[0] = *(void *)(v14 + 152);
      goto LABEL_18;
    }
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*((void *)v2 + 5) + 520) + 136))(*(void *)(*((void *)v2 + 5) + 520));
  }
  v33[0] = v10;
LABEL_18:
  v33[1] = v11;
  __int16 v34 = 0;
  this = (llvm *)llvm::DataExtractor::getCStrRef(v33, &v35, 0);
  if (!this)
  {
    uint64_t v15 = llvm::dwarf::FormEncodingString((llvm::dwarf *)*(unsigned __int16 *)v2);
    if (v15) {
      std::string::__init(&v32, v15, v16);
    }
    else {
      memset(&v32, 0, sizeof(v32));
    }
    if ((v9 & 1) == 0)
    {
      v26[0] = (uint64_t)" uses index ";
      __int16 v27 = 259;
      __int16 v25 = 264;
      LODWORD(v24[0]) = v7;
      sub_1CB8F1E58(v26, v24, (uint64_t)v28);
      v22[0] = (uint64_t)", but the referenced string";
      __int16 v23 = 259;
      sub_1CB8F1E58(v28, v22, (uint64_t)&v36);
      llvm::Twine::str((llvm::Twine *)&v36, &__p);
      uint64_t v17 = v31 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
      std::string::size_type v18 = v31 >= 0 ? v31 & 0x7F : v30;
      std::string::append(&v32, v17, v18);
      if (v31 < 0) {
        operator delete(__p);
      }
    }
    v26[0] = (uint64_t)" offset ";
    __int16 v27 = 259;
    __int16 v25 = 268;
    v24[0] = (uint64_t)&v35;
    sub_1CB8F1E58(v26, v24, (uint64_t)v28);
    v22[0] = (uint64_t)" is beyond .debug_str bounds";
    __int16 v23 = 259;
    sub_1CB8F1E58(v28, v22, (uint64_t)&v36);
    llvm::Twine::str((llvm::Twine *)&v36, &__p);
    if (v31 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if (v31 >= 0) {
      std::string::size_type v20 = v31 & 0x7F;
    }
    else {
      std::string::size_type v20 = v30;
    }
    uint64_t v21 = std::string::append(&v32, p_p, v20);
    if (v31 < 0) {
      operator delete(__p);
    }
    llvm::inconvertibleErrorCode((llvm *)v21);
    operator new();
  }
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = this;
  return this;
}

uint64_t llvm::DWARFFormValue::getAsAddress(llvm::DWARFFormValue *this)
{
  llvm::DWARFFormValue::getAsSectionedAddress(this, (uint64_t)&v2);
  if (v3) {
    return v2;
  }
  else {
    return 0;
  }
}

void *llvm::DWARFFormValue::getAsSectionedAddress@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this;
  unsigned int v4 = *(unsigned __int16 *)this;
  if ((v4 > 0x2D || ((0x3E0008000002uLL >> v4) & 1) == 0) && v4 != 7937 && v4 != 8193) {
    goto LABEL_19;
  }
  if (v4 == 27 || v4 == 7937)
  {
    unint64_t v7 = this[1];
  }
  else
  {
    unint64_t v8 = this[1];
    if (v4 != 8193)
    {
      uint64_t v9 = this[3];
      *(void *)a2 = v8;
      *(void *)(a2 + 8) = v9;
      *(unsigned char *)(a2 + 16) = 1;
      return this;
    }
    unint64_t v7 = HIDWORD(v8);
  }
  this = (void *)this[4];
  if (this
    && (this = (void *)llvm::DWARFUnit::getAddrOffsetSectionItem((uint64_t)this, v7, (uint64_t)&v10), (_BYTE)v11))
  {
    if (v4 == 8193) {
      *(void *)&long long v10 = v10 + *((unsigned int *)v2 + 2);
    }
    *(_OWORD *)a2 = v10;
    *(void *)(a2 + 16) = v11;
  }
  else
  {
LABEL_19:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return this;
}

unsigned __int16 *llvm::DWARFFormValue::getAsRelativeReference@<X0>(unsigned __int16 *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = *this;
  if (v2 > 0x2D)
  {
    if (v2 == 7968) {
      goto LABEL_7;
    }
LABEL_11:
    LOBYTE(v3) = 0;
    goto LABEL_12;
  }
  if (((0x11103F0000uLL >> v2) & 1) == 0) {
    goto LABEL_11;
  }
  if (v2 - 17 >= 5)
  {
    if (v2 != 16 && v2 != 32) {
      goto LABEL_11;
    }
LABEL_7:
    uint64_t v5 = *((void *)this + 1);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v5;
    goto LABEL_8;
  }
  uint64_t v3 = *((void *)this + 4);
  if (!v3)
  {
LABEL_12:
    *(unsigned char *)a2 = 0;
    goto LABEL_13;
  }
  uint64_t v4 = *((void *)this + 1);
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
LABEL_8:
  LOBYTE(v3) = 1;
LABEL_13:
  *(unsigned char *)(a2 + 16) = v3;
  return this;
}

uint64_t llvm::DWARFFormValue::getAsSectionOffset(llvm::DWARFFormValue *this)
{
  if (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)this, 8)) {
    return *((void *)this + 1);
  }
  else {
    return 0;
  }
}

unint64_t llvm::DWARFFormValue::getAsUnsignedConstant(llvm::DWARFFormValue *this)
{
  unsigned int v1 = *(unsigned __int16 *)this;
  if (v1 > 0x2D) {
    goto LABEL_10;
  }
  if ((0x24000A8E0uLL >> v1))
  {
    if (v1 != 13) {
      goto LABEL_8;
    }
LABEL_10:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    return v4 | v3;
  }
  if (v1 != 12 && v1 != 25) {
    goto LABEL_10;
  }
LABEL_8:
  unint64_t v3 = *((void *)this + 1) & 0xFFFFFFFFFFFFFF00;
  uint64_t v4 = *((void *)this + 1);
  return v4 | v3;
}

unint64_t llvm::DWARFFormValue::getAsSignedConstant(llvm::DWARFFormValue *this)
{
  unsigned int v1 = *(unsigned __int16 *)this;
  if (v1 > 0x2D) {
    goto LABEL_17;
  }
  if (((0x24000A8E0uLL >> v1) & 1) == 0)
  {
    if (v1 != 12 && v1 != 25) {
      goto LABEL_17;
    }
    goto LABEL_8;
  }
  if (*(unsigned __int16 *)this > 0xAu)
  {
    if (v1 == 11)
    {
      uint64_t v3 = *((char *)this + 8);
      goto LABEL_9;
    }
    if (v1 != 15 || (*((void *)this + 1) & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
LABEL_17:
    LOBYTE(v3) = 0;
    unint64_t v4 = 0;
    return v4 | v3;
  }
  if (v1 == 5)
  {
    uint64_t v3 = *((__int16 *)this + 4);
    goto LABEL_9;
  }
  if (v1 == 6)
  {
    uint64_t v3 = *((int *)this + 2);
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v3 = *((void *)this + 1);
LABEL_9:
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFF00;
  return v4 | v3;
}

unsigned __int16 *llvm::DWARFFormValue::getAsBlock@<X0>(unsigned __int16 *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = *this;
  if (v2 <= 0x2D && (((0x618uLL >> v2) & 1) != 0 || (v2 != 24 ? (BOOL v3 = v2 == 30) : (BOOL v3 = 1), v3)))
  {
    uint64_t v4 = *((void *)this + 1);
    *(void *)a2 = *((void *)this + 2);
    *(void *)(a2 + 8) = v4;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v5;
  return this;
}

uint64_t llvm::DWARFFormValue::getAsReferenceUVal(llvm::DWARFFormValue *this)
{
  unsigned int v1 = *(unsigned __int16 *)this;
  if (v1 > 0x2D)
  {
    if (v1 != 7968) {
      return 0;
    }
  }
  else if (((0x11103F0000uLL >> v1) & 1) == 0)
  {
    return 0;
  }
  return *((void *)this + 1);
}

uint64_t sub_1CD5EC138(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned __int8 *)(a1 + 17), *(void *)(a1 + 24));
}

void sub_1CD5EC180()
{
}

llvm::raw_ostream *sub_1CD5EC194(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD4C9EB8((unsigned int *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1CD5EC19C(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 24));
}

uint64_t llvm::DWARFListTableHeader::length(llvm::DWARFListTableHeader *this)
{
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v1 = 12;
  if (!*((unsigned char *)this + 16)) {
    uint64_t v1 = 4;
  }
  return v1 + *(void *)this;
}

llvm::raw_ostream *llvm::DWARFTypeUnit::dump(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  v73[4] = *MEMORY[0x1E4F143B8];
  v70[0] = sub_1CD5E31EC((llvm::DWARFUnit *)a1, *(void *)(a1 + 24) + *(void *)(a1 + 72));
  v70[1] = v6;
  Name = (char *)llvm::DWARFDie::getName((llvm::DWARFDie *)v70, 1);
  if (*(unsigned char *)(a1 + 35)) {
    int v8 = 16;
  }
  else {
    int v8 = 8;
  }
  if (*(unsigned char *)(a3 + 19))
  {
    uint64_t v9 = sub_1CB8E509C(a2, "name = '");
    long long v10 = sub_1CB8E509C(v9, Name);
    uint64_t v11 = sub_1CB8E509C(v10, "'");
    uint64_t v12 = sub_1CB8E509C(v11, ", type_signature = ");
    uint64_t v13 = *(void *)(a1 + 64);
    v67 = &unk_1F25FF808;
    uint64_t v68 = "0x%016llx";
    uint64_t v69 = v13;
    uint64_t v14 = llvm::raw_ostream::operator<<(v12, (uint64_t)&v67);
    uint64_t v15 = sub_1CB8E509C(v14, ", length = ");
    uint64_t v16 = *(void *)(a1 + 40);
    v63 = &unk_1F2618A68;
    v64 = "0x%0*llx";
    LODWORD(v65) = v8;
    uint64_t v66 = v16;
    uint64_t result = llvm::raw_ostream::operator<<(v15, (uint64_t)&v63);
    std::string::size_type v18 = (unsigned char *)*((void *)result + 4);
    if ((unint64_t)v18 >= *((void *)result + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((void *)result + 4) = v18 + 1;
      *std::string::size_type v18 = 10;
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 24);
    v67 = &unk_1F25FF808;
    uint64_t v68 = "0x%08llx";
    uint64_t v69 = v19;
    std::string::size_type v20 = llvm::raw_ostream::operator<<(a2, (uint64_t)&v67);
    uint64_t v21 = sub_1CB8E509C(v20, ": Type Unit:");
    char v22 = sub_1CB8E509C(v21, " length = ");
    uint64_t v23 = *(void *)(a1 + 40);
    v63 = &unk_1F2618A68;
    v64 = "0x%0*llx";
    LODWORD(v65) = v8;
    uint64_t v66 = v23;
    unsigned __int8 v24 = llvm::raw_ostream::operator<<(v22, (uint64_t)&v63);
    __int16 v25 = sub_1CB8E509C(v24, ", format = ");
    __int16 v27 = llvm::dwarf::FormatString(*(unsigned __int8 *)(a1 + 35));
    size_t v28 = v26;
    unsigned int v29 = (void *)*((void *)v25 + 4);
    if (v26 <= *((void *)v25 + 3) - (void)v29)
    {
      if (v26)
      {
        memcpy(v29, v27, v26);
        *((void *)v25 + 4) += v28;
      }
    }
    else
    {
      llvm::raw_ostream::write(v25, v27, v26);
    }
    std::string::size_type v30 = sub_1CB8E509C(v25, ", version = ");
    uint64_t v31 = *(unsigned __int16 *)(a1 + 32);
    __n128 v60 = &unk_1F2618A88;
    uint64_t v61 = "0x%04x";
    uint64_t v62 = v31;
    llvm::raw_ostream::operator<<(v30, (uint64_t)&v60);
    if (*(unsigned __int16 *)(a1 + 32) >= 5u)
    {
      std::string v32 = sub_1CB8E509C(a2, ", unit_type = ");
      __int16 v34 = llvm::dwarf::UnitTypeString((llvm::dwarf *)*(unsigned __int8 *)(a1 + 96));
      size_t v35 = v33;
      uint64_t v36 = (void *)*((void *)v32 + 4);
      if (v33 <= *((void *)v32 + 3) - (void)v36)
      {
        if (v33)
        {
          memcpy(v36, v34, v33);
          *((void *)v32 + 4) += v35;
        }
      }
      else
      {
        llvm::raw_ostream::write(v32, v34, v33);
      }
    }
    uint64_t v37 = sub_1CB8E509C(a2, ", abbr_offset = ");
    uint64_t v38 = *(void *)(a1 + 48);
    v63 = &unk_1F25FF808;
    v64 = "0x%04llx";
    uint64_t v65 = v38;
    llvm::raw_ostream::operator<<(v37, (uint64_t)&v63);
    if (!llvm::DWARFUnit::getAbbreviations((llvm::DWARFUnit *)a1)) {
      sub_1CB8E509C(a2, " (invalid)");
    }
    __int16 v39 = sub_1CB8E509C(a2, ", addr_size = ");
    uint64_t v40 = *(unsigned __int8 *)(a1 + 34);
    v63 = &unk_1F260ED30;
    v64 = "0x%02x";
    uint64_t v65 = v40;
    unint64_t v41 = llvm::raw_ostream::operator<<(v39, (uint64_t)&v63);
    long long v42 = sub_1CB8E509C(v41, ", name = '");
    unint64_t v43 = sub_1CB8E509C(v42, Name);
    uint64_t v44 = sub_1CB8E509C(v43, "'");
    uint64_t v45 = sub_1CB8E509C(v44, ", type_signature = ");
    uint64_t v46 = *(void *)(a1 + 64);
    v67 = &unk_1F25FF808;
    uint64_t v68 = "0x%016llx";
    uint64_t v69 = v46;
    uint64_t v47 = llvm::raw_ostream::operator<<(v45, (uint64_t)&v67);
    uint64_t v48 = sub_1CB8E509C(v47, ", type_offset = ");
    uint64_t v49 = *(void *)(a1 + 72);
    __n128 v60 = &unk_1F25FF808;
    uint64_t v61 = "0x%04llx";
    uint64_t v62 = v49;
    uint64_t v50 = llvm::raw_ostream::operator<<(v48, (uint64_t)&v60);
    uint64_t v51 = sub_1CB8E509C(v50, " (next unit at ");
    uint64_t v52 = 12;
    if (!*(unsigned char *)(a1 + 35)) {
      uint64_t v52 = 4;
    }
    uint64_t v53 = *(void *)(a1 + 40) + *(void *)(a1 + 24) + v52;
    v59[0] = &unk_1F25FF808;
    v59[1] = "0x%08llx";
    v59[2] = v53;
    uint64_t v54 = llvm::raw_ostream::operator<<(v51, (uint64_t)v59);
    sub_1CB8E509C(v54, ")\n");
    llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)a1, 0);
    long long v55 = *(const char **)(a1 + 288);
    char v56 = *(const char **)(a1 + 296);
    BOOL v57 = v55 == v56;
    if (v55 == v56) {
      __n128 v58 = 0;
    }
    else {
      __n128 v58 = (void *)a1;
    }
    if (v57) {
      long long v55 = 0;
    }
    v63 = v58;
    v64 = v55;
    if (v58 && v55)
    {
      *(_OWORD *)uint64_t v71 = *(_OWORD *)a3;
      *(void *)&v71[14] = *(void *)(a3 + 14);
      sub_1CC66D518((uint64_t)&v72, a3 + 24);
      sub_1CC66D518((uint64_t)v73, a3 + 56);
      llvm::DWARFDie::dump((uint64_t *)&v63, a2, 0, (uint64_t)v71);
      return (llvm::raw_ostream *)sub_1CD5E15A8(v71);
    }
    else
    {
      return sub_1CB8E509C(a2, "<type unit can't be parsed!>\n\n");
    }
  }
  return result;
}

void sub_1CD5EC778(llvm::DWARFUnit *a1)
{
  llvm::DWARFUnit::~DWARFUnit(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::DWARFUnitIndex::Header::parse(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if ((unint64_t)*a3 <= 0xFFFFFFFFFFFFFFEFLL && *(void *)(a2 + 8) > (unint64_t)(v3 + 15))
  {
    int U32 = llvm::DataExtractor::getU32(a2, a3, 0);
    *a1 = U32;
    if (U32 == 2)
    {
LABEL_4:
      a1[1] = llvm::DataExtractor::getU32(a2, a3, 0);
      a1[2] = llvm::DataExtractor::getU32(a2, a3, 0);
      a1[3] = llvm::DataExtractor::getU32(a2, a3, 0);
      return 1;
    }
    *a3 = v3;
    int U16 = llvm::DataExtractor::getU16(a2, a3, 0);
    *a1 = U16;
    if (U16 == 5)
    {
      *a3 += 2;
      goto LABEL_4;
    }
  }
  return 0;
}

uint64_t llvm::DWARFUnitIndex::parse(uint64_t a1, uint64_t a2)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v3 = llvm::DWARFUnitIndex::parseImpl((_DWORD *)a1, &v9);
  if ((v3 & 1) == 0)
  {
    *(_DWORD *)(a1 + 12) = 0;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v5) {
      MEMORY[0x1D25D9CB0](v5, 0x1000C8052888210);
    }
    uint64_t v8 = *(void *)(a1 + 40);
    unint64_t v7 = (void *)(a1 + 40);
    uint64_t v6 = v8;
    void *v7 = 0;
    if (v8) {
      sub_1CC683B20((uint64_t)v7, v6);
    }
  }
  return v3;
}

uint64_t llvm::DWARFUnitIndex::parseImpl(_DWORD *a1, long long *a2)
{
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = 0;
  if (llvm::DWARFUnitIndex::Header::parse(a1, (uint64_t)&v6, &v8))
  {
    if (*a1 == 5) {
      a1[4] = 1;
    }
    uint64_t v4 = 12 * a1[3] + ((8 * a1[2]) | 4u) * a1[1];
    if (!__CFADD__(v8, v4) && *((void *)a2 + 1) > (unint64_t)(v8 + v4 - 1)) {
      operator new[]();
    }
  }
  return 0;
}

uint64_t llvm::DWARFUnitIndex::Entry::getContribution(void *a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(*a1 + 4);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(int **)(*a1 + 24);
  uint64_t v5 = 8 * v2;
  while (1)
  {
    int v6 = *v4++;
    if (v6 == a2) {
      break;
    }
    v3 += 8;
    if (v5 == v3) {
      return 0;
    }
  }
  return a1[2] + v3;
}

uint64_t llvm::DWARFUnitIndex::Entry::getContribution(llvm::DWARFUnitIndex::Entry *this)
{
  return *((void *)this + 2) + 8 * *(int *)(*(void *)this + 20);
}

uint64_t llvm::DWARFUnitIndex::getFromOffset(llvm::DWARFUnitIndex *this, unsigned int a2)
{
  uint64_t v4 = (uint64_t *)*((void *)this + 6);
  uint64_t v5 = (uint64_t *)*((void *)this + 7);
  int v6 = (void **)((char *)this + 48);
  if (v4 == v5)
  {
    int v15 = *((_DWORD *)this + 3);
    if (v15)
    {
      unsigned int v16 = 0;
      do
      {
        unsigned int v17 = v16;
        uint64_t v18 = *((void *)this + 5);
        if (*(void *)(v18 + 24 * v16 + 16))
        {
          uint64_t v19 = v18 + 24 * v16;
          if ((unint64_t)v4 >= *((void *)this + 8))
          {
            uint64_t v4 = sub_1CBF63C18(v6, v19);
            int v15 = *((_DWORD *)this + 3);
          }
          else
          {
            *v4++ = v19;
          }
          *((void *)this + 7) = v4;
        }
        unsigned int v16 = v17 + 1;
      }
      while (v17 + 1 != v15);
      std::string::size_type v20 = (uint64_t *)*v6;
    }
    else
    {
      std::string::size_type v20 = (uint64_t *)*((void *)this + 6);
    }
    unint64_t v21 = 126 - 2 * __clz(v4 - v20);
    uint64_t v23 = this;
    if (v4 == v20) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v21;
    }
    sub_1CC6A573C((unint64_t)v20, v4, (uint64_t)&v23, v22, 1);
    uint64_t v4 = (uint64_t *)*((void *)this + 6);
    uint64_t v5 = (uint64_t *)*((void *)this + 7);
  }
  if (v5 != v4)
  {
    unint64_t v7 = v5 - v4;
    uint64_t v5 = v4;
    do
    {
      unint64_t v8 = v7 >> 1;
      long long v9 = &v5[v7 >> 1];
      uint64_t v11 = *v9;
      uint64_t v10 = v9 + 1;
      v7 += ~(v7 >> 1);
      if (*(_DWORD *)(*(void *)(v11 + 16) + 8 * *((int *)this + 5)) <= a2) {
        uint64_t v5 = v10;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  if (v5 == v4) {
    return 0;
  }
  uint64_t v12 = *(v5 - 1);
  uint64_t v13 = (_DWORD *)(*(void *)(v12 + 16) + 8 * *((int *)this + 5));
  if (v13[1] + *v13 <= a2) {
    return 0;
  }
  else {
    return v12;
  }
}

void *llvm::DWARFUnitIndex::getFromHash(llvm::DWARFUnitIndex *this, uint64_t a2)
{
  uint64_t v2 = (*((_DWORD *)this + 3) - 1);
  uint64_t v3 = v2 & a2;
  uint64_t v4 = *((void *)this + 5);
  if (*(void *)(v4 + 24 * (v2 & a2) + 8) != a2)
  {
    do
    {
      if (!*(void *)(v4 + 24 * v3)) {
        break;
      }
      uint64_t v3 = (v3 + (v2 & HIDWORD(a2) | 1)) & v2;
    }
    while (*(void *)(v4 + 24 * v3 + 8) != a2);
  }
  uint64_t v5 = (void *)(v4 + 24 * v3);
  if (*v5) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t llvm::DWARFUnitVector::addUnitsForSection(uint64_t a1, llvm::DWARFContext *this, uint64_t a3, int a4)
{
  uint64_t v6 = *((void *)this + 65);
  uint64_t DebugAbbrev = llvm::DWARFContext::getDebugAbbrev(this);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 144))(v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(v6);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 136))(v6);
  uint64_t v11 = v10;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 224))(v6);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 312))(v6);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6);
  char v15 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  return llvm::DWARFUnitVector::addUnitsImpl(a1, (uint64_t)this, v6, a3, DebugAbbrev, v7, v8, v16, v9, v11, v12, v13, v14, v15, 0, 0, a4);
}

uint64_t llvm::DWARFUnitVector::addUnitsForDWOSection(uint64_t a1, llvm::DWARFContext *this, uint64_t a3, int a4, char a5)
{
  uint64_t v7 = *((void *)this + 65);
  uint64_t DebugAbbrevDWO = llvm::DWARFContext::getDebugAbbrevDWO(this);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 296))(v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 264))(v7);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 280))(v7);
  uint64_t v12 = v11;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 288))(v7);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 312))(v7);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 256))(v7);
  char v16 = (*(uint64_t (**)(void))(**((void **)this + 65) + 40))(*((void *)this + 65));
  return llvm::DWARFUnitVector::addUnitsImpl(a1, (uint64_t)this, v7, a3, DebugAbbrevDWO, v8, v9, v17, v10, v12, v13, v14, v15, v16, 1, a5, a4);
}

uint64_t llvm::DWARFUnitVector::getUnitForOffset(uint64_t **this, unint64_t a2)
{
  uint64_t v2 = *this;
  LODWORD(v3) = *((_DWORD *)this + 14);
  if (v3 == -1) {
    LODWORD(v3) = *((_DWORD *)this + 2);
  }
  uint64_t v4 = &v2[v3];
  if (v3)
  {
    unint64_t v3 = v3;
    do
    {
      unint64_t v5 = v3 >> 1;
      uint64_t v6 = &v2[v3 >> 1];
      uint64_t v8 = *v6;
      uint64_t v7 = v6 + 1;
      uint64_t v9 = *(void *)(v8 + 40) + *(void *)(v8 + 24);
      if (*(unsigned char *)(v8 + 35)) {
        uint64_t v10 = 12;
      }
      else {
        uint64_t v10 = 4;
      }
      v3 += ~(v3 >> 1);
      if (v9 + v10 > a2) {
        unint64_t v3 = v5;
      }
      else {
        uint64_t v2 = v7;
      }
    }
    while (v3);
  }
  if (v2 == v4) {
    return 0;
  }
  uint64_t v11 = *v2;
  if (*(void *)(v11 + 24) <= a2) {
    return v11;
  }
  else {
    return 0;
  }
}

void llvm::DWARFUnit::~DWARFUnit(llvm::DWARFUnit *this)
{
  *(void *)this = &unk_1F2619468;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_1CB833A08((uint64_t)this + 312, *((void **)this + 40));
  unint64_t v3 = (void *)*((void *)this + 36);
  if (v3)
  {
    *((void *)this + 37) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

__n128 llvm::DWARFUnit::getDebugInfoExtractor@<Q0>(llvm::DWARFUnit *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = (__n128 *)*((void *)this + 2);
  unint64_t v3 = *(void *)(*((void *)this + 1) + 520);
  unsigned __int8 v4 = *((unsigned char *)this + 208);
  unsigned __int8 v5 = *((unsigned char *)this + 34);
  __n128 result = *v2;
  *a2 = *v2;
  a2[1].n128_u8[0] = v4;
  a2[1].n128_u8[1] = v5;
  a2[1].n128_u64[1] = v3;
  a2[2].n128_u64[0] = (unint64_t)v2;
  return result;
}

uint64_t llvm::DWARFUnit::getAddrOffsetSectionItem@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this;
  if (*(unsigned char *)(this + 200))
  {
LABEL_2:
    uint64_t v6 = *(unsigned __int8 *)(v4 + 34);
    unint64_t v22 = *(void *)(v4 + 192) + (v6 * a2);
    uint64_t v7 = *(void **)(v4 + 176);
    unint64_t v8 = v7[1];
    if (v8 >= v22 + v6)
    {
      uint64_t v13 = *(void *)(*(void *)(v4 + 8) + 520);
      char v14 = *(unsigned char *)(v4 + 208);
      v17[0] = *v7;
      v17[1] = v8;
      char v18 = v14;
      char v19 = v6;
      uint64_t v20 = v13;
      unint64_t v21 = v7;
      uint64_t v16 = 0;
      this = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)v17, v6, &v22, &v16, 0);
      uint64_t v15 = v16;
      *(void *)a3 = this;
      *(void *)(a3 + 8) = v15;
      char v9 = 1;
    }
    else
    {
      char v9 = 0;
      *(unsigned char *)a3 = 0;
    }
    *(unsigned char *)(a3 + 16) = v9;
  }
  else
  {
    while (1)
    {
      uint64_t v10 = *(void *)(v4 + 8);
      this = llvm::DWARFContext::parseNormalUnits(v10);
      int v11 = *(_DWORD *)(v10 + 72);
      if (v11 == -1) {
        int v11 = *(_DWORD *)(v10 + 24);
      }
      if (!*(unsigned char *)(v4 + 209) || v11 != 1) {
        break;
      }
      uint64_t v4 = **(void **)(v10 + 16);
      if (*(unsigned char *)(v4 + 200)) {
        goto LABEL_2;
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  return this;
}

uint64_t llvm::DWARFUnitHeader::extract(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, int a5)
{
  *(void *)a1 = *a4;
  uint64_t v39 = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = llvm::DWARFDataExtractor::getInitialLength((uint64_t)a3, a4, &v39);
  *(unsigned char *)(a1 + 11) = v10;
  unsigned int v11 = sub_1CD833674((uint64_t)a3, a4, &v39);
  *(_WORD *)(a1 + 8) = v11;
  if (v11 <= 4)
  {
    if (*(unsigned char *)(a1 + 11)) {
      int v17 = 8;
    }
    else {
      int v17 = 4;
    }
    *(void *)(a1 + 24) = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)a3, v17, a4, 0, &v39);
    *(unsigned char *)(a1 + 10) = llvm::DataExtractor::getU8(a3, a4, &v39);
    uint64_t v12 = (unsigned char *)(a1 + 72);
    if (a5 != 2)
    {
      unsigned char *v12 = 1;
      goto LABEL_18;
    }
    unsigned char *v12 = 2;
    goto LABEL_14;
  }
  *(unsigned char *)(a1 + 72) = llvm::DataExtractor::getU8(a3, a4, &v39);
  uint64_t v12 = (unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 10) = llvm::DataExtractor::getU8(a3, a4, &v39);
  if (*(unsigned char *)(a1 + 11)) {
    int v13 = 8;
  }
  else {
    int v13 = 4;
  }
  *(void *)(a1 + 24) = llvm::DWARFDataExtractor::getRelocatedValue((uint64_t)a3, v13, a4, 0, &v39);
  int v14 = *v12;
  if ((v14 & 0xFFFFFFFB) == 2)
  {
LABEL_14:
    *(void *)(a1 + 40) = sub_1CD833894((uint64_t)a3, a4, &v39);
    if (*(unsigned char *)(a1 + 11)) {
      int v18 = 8;
    }
    else {
      int v18 = 4;
    }
    *(void *)(a1 + 48) = llvm::DataExtractor::getUnsigned(a3, a4, v18, &v39);
    goto LABEL_18;
  }
  if ((v14 & 0xFE) == 4)
  {
    unint64_t v15 = sub_1CD833894((uint64_t)a3, a4, &v39);
    int v16 = *(unsigned __int8 *)(a1 + 64);
    *(void *)(a1 + 56) = v15;
    if (!v16) {
      *(unsigned char *)(a1 + 64) = 1;
    }
  }
LABEL_18:
  if (v39)
  {
    size_t v26 = std::generic_category();
    sub_1CD5E3FE8(22, (uint64_t)v26, (uint64_t)"DWARF unit at 0x%8.8llx cannot be parsed:", (uint64_t *)a1);
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *a4 - *(void *)a1;
  *(unsigned char *)(a1 + 73) = v20;
  uint64_t v21 = 12;
  if (!*(unsigned char *)(a1 + 11)) {
    uint64_t v21 = 4;
  }
  unint64_t v22 = v21 + *(void *)(a1 + 16);
  uint64_t v23 = v22 + v19;
  unint64_t v38 = v22 + v19;
  if (a3[1] <= v22 + v19 - 1)
  {
    unsigned int v29 = std::generic_category();
    sub_1CD5EDC0C((uint64_t)&v37, 22, (uint64_t)v29, *(void *)a1, v23, a3[1]);
  }
  if (*(unsigned __int16 *)(a1 + 8) - 2 >= 4)
  {
    std::string::size_type v30 = std::generic_category();
    sub_1CD5EDD4C((uint64_t)&v36, 22, (uint64_t)v30, *(void *)a1, *(_WORD *)(a1 + 8), 5);
  }
  if ((*v12 & 0xFB) == 2)
  {
    unint64_t v24 = *(void *)(a1 + 48);
    if (v24 < v20)
    {
      __int16 v25 = std::generic_category();
      uint64_t v35 = *(void *)(a1 + 48) + *(void *)a1;
      sub_1CD5E4C08(22, (uint64_t)v25, (uint64_t)"DWARF type unit at offset 0x%8.8llx has its relocated type_offset 0x%8.8llx pointing inside the header", (uint64_t *)a1, &v35);
    }
    if (v24 >= v22)
    {
      __int16 v34 = std::generic_category();
      uint64_t v35 = *(void *)(a1 + 48) + *(void *)a1;
      sub_1CD5E5860(22, (uint64_t)v34, (uint64_t)"DWARF type unit from offset 0x%8.8llx incl. to offset 0x%8.8llx excl. has its relocated type_offset 0x%8.8llx pointing past the unit end", (uint64_t *)a1, (uint64_t *)&v38, &v35);
    }
  }
  unsigned int v31 = *(unsigned __int8 *)(a1 + 10);
  std::generic_category();
  sub_1CD5E49A8(v31, (uint64_t)"DWARF unit at offset 0x%8.8llx", (uint64_t *)a1, &v35);
  uint64_t v32 = v35;
  if (v35)
  {
    uint64_t v35 = 0;
    uint64_t v40 = v32;
    sub_1CD5E3A98(a2 + 488, &v40);
    if (v40) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
    }
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
    uint64_t v27 = 0;
  }
  else
  {
    unsigned int v33 = *(unsigned __int16 *)(a1 + 8);
    if (*(_DWORD *)(a2 + 360) < v33) {
      *(_DWORD *)(a2 + 360) = v33;
    }
    uint64_t v27 = 1;
  }
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  return v27;
}

void sub_1CD5EDC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  memset(__p, 0, sizeof(__p));
  int v7 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  int v14 = __p;
  int v13 = 0;
  uint64_t v6 = &unk_1F2646F30;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v16[0] = &unk_1F26194D8;
  v16[1] = "DWARF unit from offset 0x%8.8llx incl. to offset  0x%8.8llx excl. extends past section size 0x%8.8zx";
  v16[2] = a4;
  void v16[3] = a5;
  v16[4] = a6;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v6, (uint64_t)v16);
  operator new();
}

void sub_1CD5EDD4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, int a6)
{
  memset(__p, 0, sizeof(__p));
  int v7 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  int v14 = __p;
  int v13 = 0;
  uint64_t v6 = &unk_1F2646F30;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v16[0] = &unk_1F26194F8;
  v16[1] = "DWARF unit at offset 0x%8.8llx has unsupported version %hu, supported are 2-%u";
  v16[2] = a4;
  __int16 v17 = a5;
  int v18 = a6;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v6, (uint64_t)v16);
  operator new();
}

double llvm::DWARFUnit::clearDIEs(llvm::DWARFUnit *this, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a2 || (unint64_t v3 = (long long *)*((void *)this + 36), v3 == *((long long **)this + 37)))
  {
    long long v7 = 0uLL;
    uint64_t v8 = 0;
  }
  else
  {
    long long v4 = *v3;
    uint64_t v10 = *((void *)v3 + 2);
    long long v9 = v4;
    sub_1CC6A0680(&v7, &v9, 1uLL);
  }
  unsigned __int8 v5 = (void *)*((void *)this + 36);
  if (v5)
  {
    *((void *)this + 37) = v5;
    operator delete(v5);
  }
  double result = *(double *)&v7;
  *((_OWORD *)this + 18) = v7;
  *((void *)this + 38) = v8;
  return result;
}

void *llvm::DWARFUnit::getCompilationDir(llvm::DWARFUnit **this)
{
  llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)this, 1);
  uint64_t v2 = this[36];
  unint64_t v3 = this[37];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    unsigned __int8 v5 = 0;
  }
  else {
    unsigned __int8 v5 = (llvm::DWARFUnit *)this;
  }
  if (v4) {
    uint64_t v2 = 0;
  }
  v8[0] = v5;
  v8[1] = v2;
  llvm::DWARFDie::find(v8, 27, v9);
  double result = sub_1CC694498((llvm *)v9);
  if (!v7) {
    return 0;
  }
  return result;
}

void sub_1CD5EDFA4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    BOOL v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 3 * a2;
    uint64_t v6 = (char *)operator new(24 * a2);
    char v7 = &v6[24 * ((v4 - v2) / 24)];
    uint64_t v8 = v7;
    if (v4 != v2)
    {
      long long v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 24);
        uint64_t v8 = v9 - 24;
        *((void *)v9 - 1) = *((void *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v4 -= 24;
        v9 -= 24;
      }
      while (v4 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[8 * v5];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void llvm::DWARFUnit::extractDIEsIfNeeded(llvm::DWARFUnit *this, int a2)
{
  llvm::DWARFUnit::tryExtractDIEsIfNeeded(this, a2, &v5);
  uint64_t v3 = v5;
  if (v5)
  {
    uint64_t v4 = *((void *)this + 1) + 456;
    uint64_t v5 = 0;
    uint64_t v6 = v3;
    sub_1CD5E3A98(v4, &v6);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
}

void llvm::DWARFUnit::tryExtractDIEsIfNeeded(llvm::DWARFUnit *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v5 = *((void *)this + 36);
    if (v5 != *((void *)this + 37)) {
      goto LABEL_8;
    }
    uint64_t v6 = *((void *)this + 36);
  }
  else
  {
    uint64_t v5 = *((void *)this + 36);
    uint64_t v6 = *((void *)this + 37);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) < 2)
  {
    llvm::DWARFUnit::extractDIEsToVector((uint64_t)this, v5 == v6, a2 ^ 1, (char **)this + 36);
    char v7 = (llvm::DWARFUnit *)*((void *)this + 36);
    if (v7 != *((llvm::DWARFUnit **)this + 37) && v5 == v6)
    {
      v60[0] = this;
      v60[1] = v7;
      llvm::DWARFDie::find(v60, 8497, v61);
      if (v63)
      {
        unint64_t AsUnsignedConstant = llvm::DWARFFormValue::getAsUnsignedConstant((llvm::DWARFFormValue *)v61);
        if (v9)
        {
          int v10 = *((unsigned __int8 *)this + 88);
          *((void *)this + 10) = AsUnsignedConstant;
          if (!v10) {
            *((unsigned char *)this + 88) = 1;
          }
        }
      }
      if (*((unsigned char *)this + 209))
      {
        int v11 = 1;
      }
      else
      {
        llvm::DWARFDie::find(v60, 115, v61);
        if (v63 && (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)v61, 8) & 1) != 0)
        {
          *((void *)this + 24) = *((void *)&v61[0] + 1);
          *((void *)this + 25) = 1;
        }
        else
        {
          *((void *)this + 24) = 0;
          *((void *)this + 25) = 0;
          llvm::DWARFDie::find(v60, 8499, v61);
          if (v63)
          {
            unsigned int isFormClass = llvm::DWARFFormValue::isFormClass((unsigned __int16 *)v61, 8);
            uint64_t v36 = *((void *)&v61[0] + 1);
            uint64_t v37 = isFormClass;
            if (!isFormClass) {
              uint64_t v36 = 0;
            }
          }
          else
          {
            uint64_t v36 = 0;
            uint64_t v37 = 0;
          }
          *((void *)this + 24) = v36;
          *((void *)this + 25) = v37;
        }
        llvm::DWARFDie::find(v60, 116, v61);
        if (v63)
        {
          int v40 = llvm::DWARFFormValue::isFormClass((unsigned __int16 *)v61, 8);
          uint64_t v39 = *((void *)&v61[0] + 1);
          if (!v40) {
            uint64_t v39 = 0;
          }
        }
        else
        {
          uint64_t v39 = 0;
        }
        *((void *)this + 15) = v39;
        llvm::DWARFDie::find(v60, 140, v61);
        if (v63)
        {
          int v46 = llvm::DWARFFormValue::isFormClass((unsigned __int16 *)v61, 8);
          uint64_t v41 = *((void *)&v61[0] + 1);
          if (!v46) {
            uint64_t v41 = 0;
          }
        }
        else
        {
          uint64_t v41 = 0;
        }
        *((void *)this + 16) = v41;
        int v11 = *((unsigned __int8 *)this + 209);
      }
      uint64_t v12 = *(void *)(*((void *)this + 1) + 520);
      int v13 = (_OWORD *)*((void *)this + 21);
      char v14 = *((unsigned char *)this + 208);
      long long v55 = *v13;
      char v56 = v14;
      char v57 = 0;
      uint64_t v58 = v12;
      long long v59 = v13;
      if (v11)
      {
        llvm::DWARFUnit::determineStringOffsetsTableContributionDWO((uint64_t)this, &v55, (uint64_t)v61);
      }
      else
      {
        if (*((unsigned __int16 *)this + 16) <= 4u) {
          goto LABEL_17;
        }
        llvm::DWARFUnit::determineStringOffsetsTableContribution((llvm::DWARFUnit **)this, (llvm::DWARFDataExtractor *)&v55, (uint64_t)v61);
      }
      if (v62)
      {
        unint64_t v43 = std::generic_category();
        uint64_t v49 = *(void *)&v61[0];
        sub_1CD4FB504(&v49, &v50);
        uint64_t v44 = std::string::insert(&v50, 0, "invalid reference to or invalid content in .debug_str_offsets[.dwo]: ");
        std::string::size_type v45 = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        std::string::size_type v52 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        __int16 v54 = 260;
        uint64_t v53 = __p;
        sub_1CD4FF4BC(22, (uint64_t)v43, (llvm::Twine *)&v53);
      }
      long long v26 = v61[1];
      *((_OWORD *)this + 14) = v61[0];
      *((_OWORD *)this + 15) = v26;
      if (*((unsigned __int16 *)this + 16) >= 5u)
      {
        if (*((unsigned char *)this + 209))
        {
          uint64_t v27 = (void *)*((void *)this + 7);
          if (!v27) {
            goto LABEL_46;
          }
          uint64_t v28 = *(unsigned int *)(*v27 + 4);
          if (!v28) {
            goto LABEL_46;
          }
          uint64_t v29 = 0;
          std::string::size_type v30 = *(int **)(*v27 + 24);
          uint64_t v31 = 8 * v28;
          while (1)
          {
            int v32 = *v30++;
            if (v32 == 8) {
              break;
            }
            v29 += 8;
            if (v31 == v29) {
              goto LABEL_46;
            }
          }
          uint64_t v42 = v27[2];
          if (v42) {
            uint64_t v33 = *(unsigned int *)(v42 + v29);
          }
          else {
LABEL_46:
          }
            uint64_t v33 = 0;
          uint64_t v34 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 520) + 304))(*(void *)(*((void *)this + 1) + 520));
          uint64_t v35 = 20;
          if (!*((unsigned char *)this + 35)) {
            uint64_t v35 = 12;
          }
          *((void *)this + 14) = v34;
          *((void *)this + 15) = v35 + v33;
        }
        else
        {
          uint64_t v47 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 520) + 152))(*(void *)(*((void *)this + 1) + 520));
          llvm::DWARFDie::find(v60, 116, v61);
          if (*((unsigned char *)this + 35)) {
            uint64_t v48 = 20;
          }
          else {
            uint64_t v48 = 12;
          }
          if (v63 && llvm::DWARFFormValue::isFormClass((unsigned __int16 *)v61, 8)) {
            uint64_t v48 = *((void *)&v61[0] + 1);
          }
          *((void *)this + 14) = v47;
          *((void *)this + 15) = v48;
        }
      }
LABEL_17:
      unsigned int v15 = *((unsigned __int16 *)this + 16);
      if (*((unsigned char *)this + 209))
      {
        uint64_t v16 = **(void **)(*((void *)this + 1) + 520);
        if (v15 < 5) {
          (*(void (**)(void))(v16 + 264))();
        }
        else {
          (*(void (**)(void))(v16 + 272))();
        }
        uint64_t v19 = *((void *)this + 7);
        if (v19)
        {
          int v20 = *((unsigned __int16 *)this + 16) <= 4u ? 9 : 5;
          uint64_t v21 = *(unsigned int *)(*(void *)v19 + 4);
          if (v21)
          {
            uint64_t v22 = 0;
            uint64_t v23 = *(int **)(*(void *)v19 + 24);
            uint64_t v24 = 8 * v21;
            do
            {
              int v25 = *v23++;
              if (v25 == v20) {
                break;
              }
              v22 += 8;
            }
            while (v24 != v22);
          }
        }
        operator new();
      }
      __int16 v17 = *(uint64_t **)(*((void *)this + 1) + 520);
      uint64_t v18 = *v17;
      if (v15 >= 5)
      {
        (*(void (**)(uint64_t *))(v18 + 88))(v17);
        operator new();
      }
      (*(void (**)(uint64_t *))(v18 + 80))(v17);
      operator new();
    }
  }
LABEL_8:
  *a3 = 0;
}

void llvm::DWARFUnit::determineStringOffsetsTableContributionDWO(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a1 + 56);
  if (!v4)
  {
    if (*(unsigned __int16 *)(a1 + 32) <= 4u)
    {
      unint64_t v12 = *(void *)(*(void *)(a1 + 168) + 8);
      if (v12)
      {
        unint64_t v10 = 0;
        goto LABEL_23;
      }
LABEL_16:
      *(unsigned char *)(a3 + 32) &= ~1u;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 24) = 0;
      return;
    }
    goto LABEL_7;
  }
  uint64_t v5 = *(unsigned int *)(*v4 + 4);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  char v7 = *(int **)(*v4 + 24);
  uint64_t v8 = 8 * v5;
  while (1)
  {
    int v9 = *v7++;
    if (v9 == 6) {
      break;
    }
    v6 += 8;
    if (v8 == v6) {
      goto LABEL_6;
    }
  }
  uint64_t v13 = v4[2];
  if (!v13)
  {
LABEL_6:
    if (*(unsigned __int16 *)(a1 + 32) <= 4u) {
      goto LABEL_16;
    }
LABEL_7:
    unint64_t v10 = 0;
    goto LABEL_8;
  }
  unint64_t v10 = *(unsigned int *)(v13 + v6);
  if (*(unsigned __int16 *)(a1 + 32) >= 5u)
  {
LABEL_8:
    if (*a2)
    {
      uint64_t v11 = 16;
      if (!*(unsigned char *)(a1 + 35)) {
        uint64_t v11 = 8;
      }
      sub_1CC6A844C(&v21, (uint64_t)a2, *(unsigned __int8 *)(a1 + 35), v11 + v10);
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  unint64_t v12 = *(unsigned int *)(v13 + v6 + 4);
LABEL_23:
  char v15 = *(unsigned char *)(a1 + 35);
  v16.n128_u64[0] = v10;
  v16.n128_u64[1] = v12;
  __int16 v17 = 4;
  char v18 = 0;
  char v19 = v15;
  char v20 = 0;
  llvm::StrOffsetsContributionDescriptor::validateContributionSize(&v16, (uint64_t)a2, &v21);
LABEL_12:
  if (v23)
  {
    unint64_t v14 = v21.n128_u64[0];
    *(unsigned char *)(a3 + 32) |= 1u;
    *(void *)a3 = v14;
  }
  else
  {
    *(unsigned char *)(a3 + 32) &= ~1u;
    *(__n128 *)a3 = v21;
    *(void *)(a3 + 16) = v22;
    *(unsigned char *)(a3 + 24) = 1;
  }
}

void llvm::DWARFUnit::determineStringOffsetsTableContribution(llvm::DWARFUnit **this@<X0>, llvm::DWARFDataExtractor *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  llvm::DWARFUnit::extractDIEsIfNeeded((llvm::DWARFUnit *)this, 1);
  uint64_t v6 = this[36];
  char v7 = this[37];
  BOOL v8 = v6 == v7;
  if (v6 == v7) {
    int v9 = 0;
  }
  else {
    int v9 = (llvm::DWARFUnit *)this;
  }
  if (v8) {
    uint64_t v6 = 0;
  }
  v11[0] = v9;
  v11[1] = v6;
  llvm::DWARFDie::find(v11, 114, &v12);
  if (v15 && (llvm::DWARFFormValue::isFormClass((unsigned __int16 *)&v12, 8) & 1) != 0)
  {
    sub_1CC6A844C(&v12, (uint64_t)a2, *((unsigned __int8 *)this + 35), v12.n128_u64[1]);
    if (v14)
    {
      unint64_t v10 = v12.n128_u64[0];
      *(unsigned char *)(a3 + 32) |= 1u;
      *(void *)a3 = v10;
    }
    else
    {
      *(unsigned char *)(a3 + 32) &= ~1u;
      *(__n128 *)a3 = v12;
      *(void *)(a3 + 16) = v13;
      *(unsigned char *)(a3 + 24) = 1;
    }
  }
  else
  {
    *(unsigned char *)(a3 + 32) &= ~1u;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
}

__n128 llvm::DWARFUnit::getBaseAddress@<Q0>(llvm::DWARFUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (char *)this + 264;
  if (!*((unsigned char *)this + 280))
  {
    llvm::DWARFUnit::extractDIEsIfNeeded(this, 1);
    uint64_t v6 = (llvm::DWARFUnit *)*((void *)this + 36);
    char v7 = (llvm::DWARFUnit *)*((void *)this + 37);
    BOOL v8 = v6 == v7;
    if (v6 == v7) {
      int v9 = 0;
    }
    else {
      int v9 = this;
    }
    if (v8) {
      uint64_t v6 = 0;
    }
    v14[0] = v9;
    v14[1] = v6;
    LODWORD(v10) = 5373969;
    llvm::DWARFDie::find(v14, (unsigned __int16 *)&v10, 2, v12);
    if (v13)
    {
      llvm::DWARFFormValue::getAsSectionedAddress(v12, (uint64_t)&v10);
    }
    else
    {
      LOBYTE(v10) = 0;
      LOBYTE(v11) = 0;
    }
    *(_OWORD *)uint64_t v3 = v10;
    *((void *)v3 + 2) = v11;
  }
  __n128 result = *(__n128 *)v3;
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(void *)(a2 + 16) = *((void *)v3 + 2);
  return result;
}

double sub_1CD5EEC24(uint64_t a1, llvm::DWARFListTableHeader *this, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  if (llvm::DWARFListTableHeader::length(this))
  {
    uint64_t v7 = *((void *)this + 3);
    unint64_t v8 = llvm::DWARFListTableHeader::length(this) + v7;
    if (*(void *)(a3 + 8) < v8) {
      unint64_t v8 = *(void *)(a3 + 8);
    }
    BOOL v9 = *(unsigned char *)(a3 + 16) != 0;
    *(void *)(a3 + 8) = v8;
    *(unsigned char *)(a3 + 16) = v9;
  }
  long long v10 = *(_OWORD *)(a3 + 16);
  v14[0] = *(_OWORD *)a3;
  v14[1] = v10;
  uint64_t v15 = *(void *)(a3 + 32);
  if (llvm::DWARFListTableHeader::length(this)) {
    unint64_t v11 = *((void *)this + 3);
  }
  else {
    unint64_t v11 = 0;
  }
  sub_1CD5E3648((uint64_t)__p, (uint64_t)v14, v11, &v19, *((void *)this + 4), *((void *)this + 6), &v16);
  uint64_t v13 = v16;
  if (v16)
  {
    *(unsigned char *)(a1 + 24) |= 1u;
    *(void *)a1 = v13;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 24) &= ~1u;
    double result = *(double *)__p;
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v18;
  }
  return result;
}

void llvm::DWARFUnit::findRnglistFromIndex(llvm::DWARFUnit *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v8 = a2;
  unint64_t RnglistOffset = llvm::DWARFUnit::getRnglistOffset(this, a2);
  if (!v6)
  {
    uint64_t v7 = std::generic_category();
    sub_1CD5E50F0(22, (uint64_t)v7, (uint64_t)"invalid range list table index %d (possibly missing the entire range list table)", (unsigned int *)&v8);
  }

  llvm::DWARFUnit::findRnglistFromOffset(this, RnglistOffset, a3);
}

uint64_t llvm::DWARFUnit::getParent(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(_DWORD *)(a2 + 8) == -1) {
    return 0;
  }
  return result;
}

uint64_t llvm::DWARFUnit::getSibling(uint64_t a1, uint64_t a2)
{
  if (!a2 || !*(_DWORD *)(a2 + 12)) {
    return 0;
  }
  return result;
}

uint64_t llvm::DWARFUnit::getFirstChild(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2 || !*(unsigned char *)(v2 + 7)) {
    return 0;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 296) - *(void *)(result + 288)) >> 3) <= -1431655765 * ((unint64_t)(a2 - *(void *)(result + 288)) >> 3) + 1) {
    return 0;
  }
  return result;
}

uint64_t llvm::DWARFUnit::getLastChild(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (!*(unsigned char *)(v2 + 7)) {
    return 0;
  }
  if (!*(_DWORD *)(a2 + 12))
  {
    uint64_t v3 = *(void *)(result + 288);
    if (-1431655765 * ((unint64_t)(a2 - v3) >> 3)) {
      return 0;
    }
    uint64_t v4 = *(void *)(result + 296);
    if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3) < 2) {
      return 0;
    }
    uint64_t v5 = *(void *)(v4 - 8);
    if (v5)
    {
      if (*(_WORD *)(v5 + 4)) {
        return 0;
      }
    }
  }
  return result;
}

void *llvm::DWARFUnit::getAbbreviations(llvm::DWARFUnit *this)
{
  uint64_t result = (void *)*((void *)this + 32);
  if (!result)
  {
    uint64_t result = llvm::DWARFDebugAbbrev::getAbbreviationDeclarationSet(*((llvm::DWARFDebugAbbrev **)this + 13), *((void ***)this + 6));
    *((void *)this + 32) = result;
  }
  return result;
}

__n128 llvm::StrOffsetsContributionDescriptor::validateContributionSize@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v4 = -8;
  if (!a1[1].n128_u8[3]) {
    uint64_t v4 = -4;
  }
  uint64_t v5 = 8;
  if (!a1[1].n128_u8[3]) {
    uint64_t v5 = 4;
  }
  unint64_t v6 = a1->n128_u64[1];
  unint64_t v7 = (v6 + v5 - 1) & v4;
  if (v7 < v6
    || ((unint64_t v8 = a1->n128_u32[0], v9 = v8 + v7, v9 >= v8) ? (v10 = *(void *)(a2 + 8) > v9 - 1) : (v10 = 0), !v10))
  {
    std::generic_category();
    sub_1CD06481C();
  }
  a3[1].n128_u8[8] &= ~1u;
  __n128 result = *a1;
  *a3 = *a1;
  a3[1].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

uint64_t sub_1CD5EF024(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  unint64_t v7 = *(void *)a1 + 8 * v6;
  if (v7 == a2)
  {
    sub_1CD5EF19C(a1, a3);
    return *(void *)a1 + 8 * *(unsigned int *)(a1 + 8) - 8;
  }
  else
  {
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      if (v5 > (unint64_t)a3 || v7 <= (unint64_t)a3) {
        sub_1CD5EF224();
      }
      sub_1CD5EF224();
    }
    unint64_t v8 = (uint64_t *)(v5 + 8 * ((uint64_t)(a2 - v5) >> 3));
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    BOOL v10 = (void *)(v5 + 8 * v9);
    uint64_t v11 = *(v10 - 1);
    *(v10 - 1) = 0;
    void *v10 = v11;
    unint64_t v12 = *(void *)a1;
    uint64_t v13 = (uint64_t *)(*(void *)a1 + 8 * v9 - 8);
    if (v13 != v8)
    {
      char v14 = (uint64_t *)(*(void *)a1 + 8 * v9 - 8);
      do
      {
        uint64_t v15 = *--v14;
        *char v14 = 0;
        uint64_t v16 = *v13;
        *uint64_t v13 = v15;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
        uint64_t v13 = v14;
      }
      while (v14 != v8);
      LODWORD(v9) = *(_DWORD *)(a1 + 8);
      unint64_t v12 = *(void *)a1;
    }
    unsigned int v17 = v9 + 1;
    *(_DWORD *)(a1 + 8) = v17;
    unint64_t v18 = v12 + 8 * v17;
    BOOL v20 = a3 >= v8 && (unint64_t)a3 < v18;
    uint64_t v21 = a3[v20];
    a3[v20] = 0;
    uint64_t v22 = *v8;
    *unint64_t v8 = v21;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  return (uint64_t)v8;
}

uint64_t sub_1CD5EF19C(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  unint64_t v3 = *(void *)result;
  if (v2 >= *(_DWORD *)(result + 12))
  {
    unint64_t v6 = v3 + 8 * v2;
    if (v3 > (unint64_t)a2 || v6 <= (unint64_t)a2) {
      sub_1CD5EF224();
    }
    sub_1CD5EF224();
  }
  uint64_t v4 = *(unsigned int *)(result + 8);
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v3 + 8 * v4) = v5;
  *(_DWORD *)(result + 8) = v4 + 1;
  return result;
}

void sub_1CD5EF224()
{
}

uint64_t sub_1CD5EF2F4(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t sub_1CD5EF334(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), *(unsigned int *)(a1 + 28));
}

BOOL sub_1CD5EF374(int a1)
{
  BOOL result = 0;
  if (a1 <= 30)
  {
    switch(a1)
    {
      case 1:
      case 2:
      case 4:
      case 15:
      case 16:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
LABEL_4:
        BOOL result = 1;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(a1)
    {
      case 31:
      case 32:
      case 33:
      case 36:
      case 38:
      case 41:
      case 45:
      case 49:
      case 53:
      case 55:
      case 56:
      case 59:
      case 64:
      case 66:
      case 68:
      case 70:
      case 71:
      case 75:
        goto LABEL_4;
      case 34:
      case 35:
      case 37:
      case 39:
      case 40:
      case 42:
      case 43:
      case 44:
      case 46:
      case 47:
      case 48:
      case 50:
      case 51:
      case 52:
      case 54:
      case 57:
      case 58:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 67:
      case 69:
      case 72:
      case 73:
      case 74:
        return result;
      default:
        switch(a1)
        {
          case 45057:
          case 45058:
          case 45059:
          case 45060:
            goto LABEL_4;
          default:
            BOOL result = a1 == 17152;
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1CD5EF430(uint64_t a1, const char **a2)
{
  unint64_t v3 = *a2;
  if (*a2) {
    size_t v4 = strlen(*a2);
  }
  else {
    size_t v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v6 = (const char **)(*(void *)a1 + 16 * v5);
  *unint64_t v6 = v3;
  v6[1] = (const char *)v4;
  LODWORD(v6) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return *(void *)a1 + 16 * v6 - 16;
}

void sub_1CD5EF4C0()
{
}

llvm::raw_ostream *sub_1CD5EF4D4(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD5EF4DC(*(const void ***)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1CD5EF4DC(const void **a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v14 = 0;
    int AsUnsignedInteger = llvm::getAsUnsignedInteger(a3, a4, 0xAu, &v14);
    unint64_t v7 = v14;
    if (AsUnsignedInteger) {
      unint64_t v7 = -1;
    }
  }
  else
  {
    unint64_t v7 = -1;
  }
  char v8 = *((unsigned char *)a1 + 23);
  BOOL v9 = v8 < 0;
  if (v8 >= 0) {
    BOOL v10 = a1;
  }
  else {
    BOOL v10 = *a1;
  }
  size_t v11 = v8 & 0x7F;
  if (v9) {
    size_t v11 = (size_t)a1[1];
  }
  if (v11 >= v7) {
    size_t v12 = v7;
  }
  else {
    size_t v12 = v11;
  }
  BOOL result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v12 <= *((void *)a2 + 3) - (void)result)
  {
    if (v12)
    {
      BOOL result = (llvm::raw_ostream *)memcpy(result, v10, v12);
      *((void *)a2 + 4) += v12;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, (const char *)v10, v12);
  }
  return result;
}

void sub_1CD5EF5B0()
{
}

llvm::raw_ostream *sub_1CD5EF5C4(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD465D04(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

void *sub_1CD5EF5CC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  size_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5EF698(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *BOOL result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD5EF698(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(void **)result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    uint64_t v5 = 16 * v4;
    unint64_t v6 = *(void **)result;
    do
    {
      *unint64_t v6 = -1;
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    int v7 = 0;
    int v8 = v4 - 1;
    do
    {
      uint64_t v9 = *a2;
      if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        unsigned int v10 = (37 * v9) & v8;
        uint64_t v11 = &v3[2 * v10];
        uint64_t v12 = *v11;
        if (v9 != *v11)
        {
          uint64_t v13 = 0;
          int v14 = 1;
          while (v12 != -1)
          {
            if (v13) {
              BOOL v15 = 0;
            }
            else {
              BOOL v15 = v12 == -2;
            }
            if (v15) {
              uint64_t v13 = v11;
            }
            unsigned int v16 = v10 + v14++;
            unsigned int v10 = v16 & v8;
            uint64_t v11 = &v3[2 * (v16 & v8)];
            uint64_t v12 = *v11;
            if (v9 == *v11) {
              goto LABEL_8;
            }
          }
          if (v13) {
            uint64_t v11 = v13;
          }
        }
LABEL_8:
        void *v11 = v9;
        v11[1] = a2[1];
        *(_DWORD *)(result + 8) = ++v7;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

void *sub_1CD5EF768(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CD5EF5CC(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = (37 * *a3) & v10;
    a4 = (void *)(*(void *)a1 + 16 * v11);
    uint64_t v12 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v13 = 0;
      int v14 = 1;
      while (v12 != -1)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -2;
        }
        if (v15) {
          uint64_t v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (void *)(*(void *)a1 + 16 * v11);
        uint64_t v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      uint64_t v8 = *a4;
      goto LABEL_4;
    }
    sub_1CD5EF5CC(a1, v7);
    uint64_t v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = (37 * *a3) & v17;
    a4 = (void *)(*(void *)a1 + 16 * v18);
    uint64_t v19 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v13 = 0;
      int v20 = 1;
      while (v19 != -1)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -2;
        }
        if (v21) {
          uint64_t v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (void *)(*(void *)a1 + 16 * v18);
        uint64_t v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_20:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

llvm::raw_ostream *sub_1CD5EF8E0(const char **a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a4)
  {
    size_t v10 = 0;
    if (llvm::getAsUnsignedInteger(a3, a4, 0xAu, &v10)) {
      size_t v6 = -1;
    }
    else {
      size_t v6 = v10;
    }
  }
  else
  {
    size_t v6 = -1;
  }
  unsigned int v7 = *a1;
  if (v7) {
    size_t v8 = strlen(v7);
  }
  else {
    size_t v8 = 0;
  }
  if (v8 < v6) {
    size_t v6 = v8;
  }
  BOOL result = (llvm::raw_ostream *)*((void *)a2 + 4);
  if (v6 <= *((void *)a2 + 3) - (void)result)
  {
    if (v6)
    {
      BOOL result = (llvm::raw_ostream *)memcpy(result, v7, v6);
      *((void *)a2 + 4) += v6;
    }
  }
  else
  {
    return llvm::raw_ostream::write(a2, v7, v6);
  }
  return result;
}

uint64_t sub_1CD5EF9C4(uint64_t a1)
{
  *(void *)a1 = &unk_1F2619700;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CD5EFA14(uint64_t a1)
{
  *(void *)a1 = &unk_1F2619700;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *sub_1CD5EFA84(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CD5EF4DC((const void **)(a1 + 8), a2, a3, a4);
}

void llvm::demangle(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  if (!llvm::nonMicrosoftDemangle((llvm *)v3, (uint64_t)__p)
    && (*(unsigned char *)v3 != 95 || !llvm::nonMicrosoftDemangle((llvm *)((char *)v3 + 1), (uint64_t)__p)))
  {
    llvm::microsoftDemangle();
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v5;
  __p[1] = 0;
  uint64_t v5 = 0;
  __p[0] = 0;
}

const char *llvm::itanium_demangle::parse_discriminator(const char *this, const char *a2, const char *a3)
{
  if (this != a2)
  {
    uint64_t v3 = *(unsigned __int8 *)this;
    if (v3 == 95)
    {
      if (this + 1 != a2 && (this[1] & 0x80000000) == 0)
      {
        if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *((unsigned __int8 *)this + 1) + 60) & 0x400) != 0)
        {
          this += 2;
        }
        else
        {
          uint64_t v4 = this + 2;
          if (this[1] == 95 && v4 != a2)
          {
            while (1)
            {
              uint64_t v6 = *(unsigned __int8 *)v4;
              if (*v4 < 0 || (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v6 + 60) & 0x400) == 0) {
                break;
              }
              if (++v4 == a2) {
                return this;
              }
            }
            if (v6 == 95) {
              return v4 + 1;
            }
          }
        }
      }
    }
    else if ((v3 & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v3 + 60) & 0x400) != 0)
    {
      unsigned int v7 = this + 1;
      while (v7 != a2)
      {
        int v8 = *v7;
        if ((v8 & 0x80000000) == 0)
        {
          ++v7;
          if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v8 + 60) & 0x400) != 0) {
            continue;
          }
        }
        return this;
      }
      return a2;
    }
  }
  return this;
}

void llvm::ItaniumPartialDemangler::ItaniumPartialDemangler(llvm::ItaniumPartialDemangler *this)
{
  *(void *)this = 0;
  operator new();
}

BOOL llvm::ItaniumPartialDemangler::partialDemangle(llvm::ItaniumPartialDemangler *this, const char *__s)
{
  uint64_t v4 = *((void *)this + 1);
  size_t v5 = strlen(__s);
  *(void *)uint64_t v4 = __s;
  *(void *)(v4 + 8) = &__s[v5];
  *(void *)(v4 + 24) = *(void *)(v4 + 16);
  *(void *)(v4 + 304) = *(void *)(v4 + 296);
  *(void *)(v4 + 672) = *(void *)(v4 + 664);
  *(void *)(v4 + 784) = -1;
  *(_WORD *)(v4 + 776) = 1;
  *(void *)(v4 + 792) = 0;
  *(_DWORD *)(v4 + 800) = 0;
  uint64_t v6 = (void *)(v4 + 808);
  unsigned int v7 = *(void **)(v4 + 4904);
  while (v7)
  {
    int v8 = (void *)*v7;
    *(void *)(v4 + 4904) = *v7;
    if (v7 == v6)
    {
      unsigned int v7 = v8;
    }
    else
    {
      free(v7);
      unsigned int v7 = *(void **)(v4 + 4904);
    }
  }
  *uint64_t v6 = 0;
  *(void *)(v4 + 816) = 0;
  *(void *)(v4 + 4904) = v6;
  uint64_t v9 = sub_1CC6B4480(v4);
  *(void *)this = v9;
  return v9 == 0;
}

unsigned char *llvm::ItaniumPartialDemangler::getFunctionName(llvm::ItaniumPartialDemangler *this, char *a2, unint64_t *a3)
{
  if (*(unsigned char *)(*(void *)this + 8) == 18) {
    return sub_1CC6B4934(*(void *)(*(void *)this + 24), a2, (uint64_t *)a3);
  }
  else {
    return 0;
  }
}

void *sub_1CD5EFED8(void *result, uint64_t *a2)
{
  if (result[1])
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    uint64_t v5 = a2[1];
    char v6 = 1;
    do
    {
      uint64_t v7 = v5;
      if ((v6 & 1) == 0)
      {
        sub_1CD5EFF98(a2, 2);
        *(_WORD *)(*a2 + a2[1]) = 8236;
        uint64_t v7 = a2[1] + 2;
        a2[1] = v7;
      }
      BOOL result = sub_1CD5EFFF8(*(void *)(*v3 + 8 * v4), a2, 18, 0);
      if (v7 == a2[1])
      {
        a2[1] = v5;
      }
      else
      {
        char v6 = 0;
        uint64_t v5 = a2[1];
      }
      ++v4;
    }
    while (v4 != v3[1]);
  }
  return result;
}

void *sub_1CD5EFF98(void *result, uint64_t a2)
{
  unint64_t v2 = result[2];
  unint64_t v3 = result[1] + a2;
  if (v3 > v2)
  {
    uint64_t v4 = result;
    size_t v5 = v3 + 992;
    unint64_t v6 = 2 * v2;
    if (v6 <= v5) {
      size_t v7 = v5;
    }
    else {
      size_t v7 = v6;
    }
    result[2] = v7;
    BOOL result = malloc_type_realloc((void *)*result, v7, 0xF306D45BuLL);
    *uint64_t v4 = result;
    if (!result) {
      std::terminate();
    }
  }
  return result;
}

void *sub_1CD5EFFF8(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  if (a4 + a3 <= (*(unsigned __int16 *)(a1 + 9) << 26 >> 26))
  {
    ++*((_DWORD *)a2 + 8);
    sub_1CD5EFF98(a2, 1);
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    a2[1] = v9 + 1;
    *(unsigned char *)(v8 + v9) = 40;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 32))(a1, a2);
    if ((*(_WORD *)(a1 + 9) & 0xC0) != 0x40) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 40))(a1, a2);
    }
    --*((_DWORD *)a2 + 8);
    BOOL result = sub_1CD5EFF98(a2, 1);
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    a2[1] = v11 + 1;
    *(unsigned char *)(v10 + v11) = 41;
  }
  else
  {
    BOOL result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 32))(a1, a2);
    if ((*(_WORD *)(a1 + 9) & 0xC0) != 0x40)
    {
      size_t v7 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 40);
      return (void *)v7(a1, a2);
    }
  }
  return result;
}

char *sub_1CD5F0174(char *__dst, uint64_t a2)
{
  size_t v5 = (unsigned char *)(a2 + 24);
  uint64_t v4 = *(unsigned char **)a2;
  size_t v7 = __dst + 24;
  unint64_t v6 = *(char **)__dst;
  if (v4 == v5)
  {
    if (v6 != v7)
    {
      free(v6);
      *(void *)__dst = v7;
      *((void *)__dst + 1) = v7;
      *((void *)__dst + 2) = __dst + 56;
      uint64_t v4 = *(unsigned char **)a2;
    }
    uint64_t v10 = *(unsigned char **)(a2 + 8);
    if (v10 == v4)
    {
      uint64_t v11 = v4;
    }
    else
    {
      memmove(v7, v4, v10 - v4);
      uint64_t v4 = *(unsigned char **)a2;
      uint64_t v11 = *(unsigned char **)(a2 + 8);
    }
    *((void *)__dst + 1) = &v7[v11 - v4];
    *(void *)(a2 + 8) = v4;
  }
  else
  {
    *(void *)__dst = v4;
    if (v6 == v7)
    {
      *(_OWORD *)(__dst + 8) = *(_OWORD *)(a2 + 8);
      *(void *)a2 = v5;
      *(void *)(a2 + 8) = v5;
      *(void *)(a2 + 16) = a2 + 56;
    }
    else
    {
      *(void *)a2 = v6;
      uint64_t v8 = *((void *)__dst + 1);
      *((void *)__dst + 1) = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v8;
      uint64_t v9 = *((void *)__dst + 2);
      *((void *)__dst + 2) = *(void *)(a2 + 16);
      *(void *)(a2 + 8) = *(void *)a2;
      *(void *)(a2 + 16) = v9;
    }
  }
  return __dst;
}

char *sub_1CD5F0258(char *__dst, uint64_t a2)
{
  size_t v5 = (unsigned char *)(a2 + 24);
  uint64_t v4 = *(unsigned char **)a2;
  size_t v7 = __dst + 24;
  unint64_t v6 = *(char **)__dst;
  if (v4 == v5)
  {
    if (v6 != v7)
    {
      free(v6);
      *(void *)__dst = v7;
      *((void *)__dst + 1) = v7;
      *((void *)__dst + 2) = __dst + 88;
      uint64_t v4 = *(unsigned char **)a2;
    }
    uint64_t v10 = *(unsigned char **)(a2 + 8);
    if (v10 == v4)
    {
      uint64_t v11 = v4;
    }
    else
    {
      memmove(v7, v4, v10 - v4);
      uint64_t v4 = *(unsigned char **)a2;
      uint64_t v11 = *(unsigned char **)(a2 + 8);
    }
    *((void *)__dst + 1) = &v7[v11 - v4];
    *(void *)(a2 + 8) = v4;
  }
  else
  {
    *(void *)__dst = v4;
    if (v6 == v7)
    {
      *(_OWORD *)(__dst + 8) = *(_OWORD *)(a2 + 8);
      *(void *)a2 = v5;
      *(void *)(a2 + 8) = v5;
      *(void *)(a2 + 16) = a2 + 88;
    }
    else
    {
      *(void *)a2 = v6;
      uint64_t v8 = *((void *)__dst + 1);
      *((void *)__dst + 1) = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v8;
      uint64_t v9 = *((void *)__dst + 2);
      *((void *)__dst + 2) = *(void *)(a2 + 16);
      *(void *)(a2 + 8) = *(void *)a2;
      *(void *)(a2 + 16) = v9;
    }
  }
  return __dst;
}

uint64_t sub_1CD5F033C()
{
  return 0;
}

uint64_t sub_1CD5F0344()
{
  return 0;
}

uint64_t sub_1CD5F034C()
{
  return 0;
}

uint64_t sub_1CD5F0358(void *a1, void *a2)
{
  size_t v5 = (unsigned char *)a1[2];
  uint64_t v4 = (unsigned char *)a1[3];
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1CD5EFF98(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  uint64_t v7 = a1[4];
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 32))(v7, a2);
  if ((*(_WORD *)(v7 + 9) & 0xC0) != 0x40)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 40);
    return v9(v7, a2);
  }
  return result;
}

uint64_t sub_1CD5F044C()
{
  return 0;
}

void sub_1CD5F045C()
{
}

uint64_t sub_1CD5F0470(uint64_t a1, void *a2)
{
  sub_1CD5EFF98(a2, 24);
  qmemcpy((void *)(*a2 + a2[1]), "construction vtable for ", 24);
  a2[1] += 24;
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, a2);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 40))(v4, a2);
  }
  sub_1CD5EFF98(a2, 4);
  *(_DWORD *)(*a2 + a2[1]) = 762210605;
  a2[1] += 4;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 40);
    return v7(v5, a2);
  }
  return result;
}

void sub_1CD5F05F4()
{
}

void *sub_1CD5F0608(void *result, void *a2)
{
  unint64_t v3 = (unsigned char *)result[2];
  unint64_t v2 = (unsigned char *)result[3];
  size_t v4 = v2 - v3;
  if (v2 != v3)
  {
    sub_1CD5EFF98(a2, v2 - v3);
    uint64_t result = memcpy((void *)(*a2 + a2[1]), v3, v4);
    a2[1] += v4;
  }
  return result;
}

uint64_t sub_1CD5F066C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1CD5F067C()
{
}

uint64_t sub_1CD5F0690(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    goto LABEL_17;
  }
  (*(void (**)(void, uint64_t *))(*(void *)v4 + 32))(*(void *)(a1 + 16), a2);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 40))(v4, a2);
  }
  if (*(void *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 32)) {
      char v8 = 58;
    }
    else {
      char v8 = 46;
    }
  }
  else
  {
LABEL_17:
    if (!*(unsigned char *)(a1 + 32)) {
      goto LABEL_6;
    }
    char v8 = 58;
  }
  sub_1CD5EFF98(a2, 1);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  a2[1] = v10 + 1;
  *(unsigned char *)(v9 + v10) = v8;
LABEL_6:
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 40);
    return v7(v5, a2);
  }
  return result;
}

void sub_1CD5F0804()
{
}

uint64_t sub_1CD5F0818(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  *(unsigned char *)(a1 + 32) = 1;
  uint64_t v3 = *(void *)(a1 + 24);
  unsigned int v4 = *(unsigned __int8 *)(v3 + 9);
  if ((v4 & 0xC0) == 0x80) {
    uint64_t result = (**(uint64_t (***)(uint64_t))v3)(v3);
  }
  else {
    uint64_t result = v4 < 0x40;
  }
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1CD5F0898(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  *(unsigned char *)(a1 + 32) = 1;
  uint64_t v3 = *(unsigned char **)(a1 + 24);
  int v4 = v3[10] & 3;
  if (v4 == 2) {
    uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 8))(v3);
  }
  else {
    uint64_t result = v4 == 0;
  }
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1CD5F0918(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  *(unsigned char *)(a1 + 32) = 1;
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = (*(unsigned __int16 *)(v3 + 9) >> 10) & 3;
  if (v4 == 2) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  else {
    uint64_t result = v4 == 0;
  }
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1CD5F0998(uint64_t result)
{
  uint64_t v1 = result;
  if (!*(unsigned char *)(result + 32))
  {
    *(unsigned char *)(result + 32) = 1;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 24) + 24))(*(void *)(result + 24));
    *(unsigned char *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t sub_1CD5F09FC(uint64_t result)
{
  if (!*(unsigned char *)(result + 32))
  {
    uint64_t v1 = result;
    *(unsigned char *)(result + 32) = 1;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 24) + 32))(*(void *)(result + 24));
    *(unsigned char *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t sub_1CD5F0A58(uint64_t result)
{
  if (!*(unsigned char *)(result + 32))
  {
    uint64_t v1 = result;
    *(unsigned char *)(result + 32) = 1;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 24) + 40))(*(void *)(result + 24));
    *(unsigned char *)(v1 + 32) = 0;
  }
  return result;
}

void sub_1CD5F0AB8()
{
}

char *sub_1CD5F0ACC(uint64_t a1, size_t size)
{
  int v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  size_t v6 = 8 * size;
  if (*(void *)a1 != a1 + 24)
  {
    uint64_t result = (char *)malloc_type_realloc(*(void **)a1, v6, 0x2004093837F09uLL);
    char v8 = result;
    *(void *)a1 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_8:
    std::terminate();
  }
  uint64_t result = (char *)malloc_type_malloc(v6, 0x2004093837F09uLL);
  if (!result) {
    goto LABEL_8;
  }
  char v8 = result;
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9 != *(void *)a1) {
    uint64_t result = (char *)memmove(result, *(const void **)a1, v9 - *(void *)a1);
  }
  *(void *)a1 = v8;
LABEL_3:
  *(void *)(a1 + 8) = &v8[v5 - (void)v4];
  *(void *)(a1 + 16) = &v8[8 * size];
  return result;
}

void *sub_1CD5F0B88(uint64_t a1, uint64_t *a2)
{
  if (*((_DWORD *)a2 + 8)) {
    goto LABEL_5;
  }
  int v4 = *(const char **)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32) - (void)v4;
  if (v5 == 2)
  {
    if (strncmp(v4, ">>", 2uLL))
    {
LABEL_5:
      int v6 = 0;
      goto LABEL_6;
    }
  }
  else if (v5 != 1 || *v4 != 62)
  {
    goto LABEL_5;
  }
  int v6 = 1;
  *((_DWORD *)a2 + 8) = 1;
  sub_1CD5EFF98(a2, 1);
  uint64_t v16 = *a2;
  uint64_t v17 = a2[1];
  a2[1] = v17 + 1;
  *(unsigned char *)(v16 + v17) = 40;
LABEL_6:
  int v7 = *(unsigned __int16 *)(a1 + 9);
  __int16 v8 = (_WORD)v7 << 10;
  int v9 = (unsigned __int16)((_WORD)v7 << 10);
  int v10 = v7 << 26 >> 26;
  if (v9 == 17408) {
    int v11 = 15;
  }
  else {
    int v11 = v10;
  }
  sub_1CD5EFFF8(*(void *)(a1 + 16), a2, v11, v9 != 17408);
  uint64_t v13 = *(unsigned char **)(a1 + 24);
  uint64_t v12 = *(unsigned char **)(a1 + 32);
  if (v12 - v13 != 1 || *v13 != 44)
  {
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 32;
    uint64_t v13 = *(unsigned char **)(a1 + 24);
    uint64_t v12 = *(unsigned char **)(a1 + 32);
  }
  size_t v14 = v12 - v13;
  if (v12 != v13)
  {
    sub_1CD5EFF98(a2, v12 - v13);
    memcpy((void *)(*a2 + a2[1]), v13, v14);
    a2[1] += v14;
  }
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 32;
  uint64_t result = sub_1CD5EFFF8(*(void *)(a1 + 40), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, v8 == 17408);
  if (v6)
  {
    --*((_DWORD *)a2 + 8);
    uint64_t result = sub_1CD5EFF98(a2, 1);
    uint64_t v18 = *a2;
    uint64_t v19 = a2[1];
    a2[1] = v19 + 1;
    *(unsigned char *)(v18 + v19) = 41;
  }
  return result;
}

void sub_1CD5F0D54()
{
}

void *sub_1CD5F0D68(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(unsigned char **)(a1 + 16);
  int v4 = *(unsigned char **)(a1 + 24);
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1CD5EFF98(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(unsigned __int16 *)(a1 + 9) << 26 >> 26;

  return sub_1CD5EFFF8(v7, a2, v8, 0);
}

void sub_1CD5F0DF4()
{
}

void *sub_1CD5F0E08(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_1CD5EFFF8(*(void *)(a1 + 16), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 1);
  size_t v6 = *(unsigned char **)(a1 + 24);
  uint64_t v5 = *(unsigned char **)(a1 + 32);
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1CD5EFF98(a2, v5 - v6);
    uint64_t result = memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  return result;
}

void sub_1CD5F0E88()
{
}

void *sub_1CD5F0E9C(uint64_t a1, uint64_t a2)
{
  sub_1CD5EFFF8(*(void *)(a1 + 16), (uint64_t *)a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 0);
  ++*(_DWORD *)(a2 + 32);
  sub_1CD5EFF98((void *)a2, 1);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5 + 1;
  *(unsigned char *)(v4 + v5) = 91;
  sub_1CD5EFFF8(*(void *)(a1 + 24), (uint64_t *)a2, 19, 0);
  --*(_DWORD *)(a2 + 32);
  uint64_t result = sub_1CD5EFF98((void *)a2, 1);
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v8 + 1;
  *(unsigned char *)(v7 + v8) = 93;
  return result;
}

void sub_1CD5F0F44()
{
}

void *sub_1CD5F0F58(uint64_t a1, uint64_t *a2)
{
  sub_1CD5EFFF8(*(void *)(a1 + 16), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 1);
  uint64_t v5 = *(unsigned char **)(a1 + 24);
  uint64_t v4 = *(unsigned char **)(a1 + 32);
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1CD5EFF98(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  int v8 = *(unsigned __int16 *)(a1 + 9) << 26 >> 26;

  return sub_1CD5EFFF8(v7, a2, v8, 0);
}

void sub_1CD5F0FF8()
{
}

void *sub_1CD5F100C(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    sub_1CD5EFF98(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 14906;
    a2[1] += 2;
  }
  sub_1CD5EFF98(a2, 3);
  uint64_t v4 = *a2 + a2[1];
  *(unsigned char *)(v4 + 2) = 119;
  *(_WORD *)uint64_t v4 = 25966;
  a2[1] += 3;
  if (*(unsigned char *)(a1 + 57))
  {
    sub_1CD5EFF98(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 23899;
    a2[1] += 2;
  }
  if (*(void *)(a1 + 24))
  {
    ++*((_DWORD *)a2 + 8);
    sub_1CD5EFF98(a2, 1);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    a2[1] = v6 + 1;
    *(unsigned char *)(v5 + v6) = 40;
    sub_1CD5EFED8((void *)(a1 + 16), a2);
    --*((_DWORD *)a2 + 8);
    sub_1CD5EFF98(a2, 1);
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    a2[1] = v8 + 1;
    *(unsigned char *)(v7 + v8) = 41;
  }
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 32;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 32))(v9, a2);
  if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 40))(v9, a2);
  }
  if (*(void *)(a1 + 48))
  {
    ++*((_DWORD *)a2 + 8);
    sub_1CD5EFF98(a2, 1);
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    a2[1] = v12 + 1;
    *(unsigned char *)(v11 + v12) = 40;
    sub_1CD5EFED8((void *)(a1 + 40), a2);
    --*((_DWORD *)a2 + 8);
    uint64_t result = sub_1CD5EFF98(a2, 1);
    uint64_t v13 = *a2;
    uint64_t v14 = a2[1];
    a2[1] = v14 + 1;
    *(unsigned char *)(v13 + v14) = 41;
  }
  return result;
}

void sub_1CD5F1238()
{
}

uint64_t sub_1CD5F124C(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    sub_1CD5EFF98(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 14906;
    a2[1] += 2;
  }
  sub_1CD5EFF98(a2, 6);
  uint64_t v4 = *a2 + a2[1];
  *(_WORD *)(v4 + 4) = 25972;
  *(_DWORD *)uint64_t v4 = 1701602660;
  a2[1] += 6;
  if (*(unsigned char *)(a1 + 25))
  {
    sub_1CD5EFF98(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 23899;
    a2[1] += 2;
  }
  sub_1CD5EFF98(a2, 1);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  a2[1] = v6 + 1;
  *(unsigned char *)(v5 + v6) = 32;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 32))(v7, a2);
  if ((*(_WORD *)(v7 + 9) & 0xC0) != 0x40)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 40);
    return v9(v7, a2);
  }
  return result;
}

void sub_1CD5F13A4()
{
}

void *sub_1CD5F13B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 40))(v4, a2);
  }
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  a2[1] = v6 + 1;
  *(unsigned char *)(v5 + v6) = 40;
  sub_1CD5EFED8((void *)(a1 + 24), a2);
  --*((_DWORD *)a2 + 8);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  a2[1] = v9 + 1;
  *(unsigned char *)(v8 + v9) = 41;
  return result;
}

void sub_1CD5F14B4()
{
}

void *sub_1CD5F14C8(uint64_t a1, uint64_t *a2)
{
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  a2[1] = v5 + 1;
  *(unsigned char *)(v4 + v5) = 40;
  uint64_t v6 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 32))(v6, a2);
  if ((*(_WORD *)(v6 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 40))(v6, a2);
  }
  --*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  a2[1] = v8 + 1;
  *(unsigned char *)(v7 + v8) = 41;
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  a2[1] = v10 + 1;
  *(unsigned char *)(v9 + v10) = 40;
  sub_1CD5EFED8((void *)(a1 + 24), a2);
  --*((_DWORD *)a2 + 8);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  a2[1] = v13 + 1;
  *(unsigned char *)(v12 + v13) = 41;
  return result;
}

void sub_1CD5F1618()
{
}

void *sub_1CD5F162C(uint64_t a1, uint64_t *a2)
{
  sub_1CD5EFFF8(*(void *)(a1 + 16), a2, *(unsigned __int16 *)(a1 + 9) << 26 >> 26, 0);
  sub_1CD5EFF98(a2, 3);
  uint64_t v4 = *a2 + a2[1];
  *(unsigned char *)(v4 + 2) = 32;
  *(_WORD *)uint64_t v4 = 16160;
  a2[1] += 3;
  sub_1CD5EFFF8(*(void *)(a1 + 24), a2, 19, 0);
  sub_1CD5EFF98(a2, 3);
  uint64_t v5 = *a2 + a2[1];
  *(unsigned char *)(v5 + 2) = 32;
  *(_WORD *)uint64_t v5 = 14880;
  a2[1] += 3;
  uint64_t v6 = *(void *)(a1 + 32);

  return sub_1CD5EFFF8(v6, a2, 17, 1);
}

void sub_1CD5F1700()
{
}

void *sub_1CD5F1714(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(unsigned char **)(a1 + 16);
  uint64_t v4 = *(unsigned char **)(a1 + 24);
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1CD5EFF98(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  int v7 = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 60;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), a2);
  uint64_t v8 = a2[1];
  if (v8 && *(unsigned char *)(v8 + *a2 - 1) == 62)
  {
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 32;
  }
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 62;
  *((_DWORD *)a2 + 8) = v7 + 1;
  sub_1CD5EFF98(a2, 1);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  a2[1] = v10 + 1;
  *(unsigned char *)(v9 + v10) = 40;
  sub_1CD5EFFF8(*(void *)(a1 + 40), a2, 19, 0);
  --*((_DWORD *)a2 + 8);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  a2[1] = v13 + 1;
  *(unsigned char *)(v12 + v13) = 41;
  return result;
}

void sub_1CD5F18A0()
{
}

void *sub_1CD5F18B4(void *a1, uint64_t *a2)
{
  uint64_t v5 = (unsigned char *)a1[2];
  uint64_t v4 = (unsigned char *)a1[3];
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1CD5EFF98(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  a2[1] = v8 + 1;
  *(unsigned char *)(v7 + v8) = 40;
  uint64_t v9 = a1[4];
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 32))(v9, a2);
  if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 40))(v9, a2);
  }
  --*((_DWORD *)a2 + 8);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  a2[1] = v12 + 1;
  *(unsigned char *)(v11 + v12) = 41;
  uint64_t v14 = (unsigned char *)a1[5];
  uint64_t v13 = (unsigned char *)a1[6];
  size_t v15 = v13 - v14;
  if (v13 != v14)
  {
    sub_1CD5EFF98(a2, v13 - v14);
    uint64_t result = memcpy((void *)(*a2 + a2[1]), v14, v15);
    a2[1] += v15;
  }
  return result;
}

void sub_1CD5F1A1C()
{
}

void *sub_1CD5F1A30(void *result, uint64_t *a2)
{
  uint64_t v3 = result;
  if (result[3] - result[2] >= 4uLL)
  {
    ++*((_DWORD *)a2 + 8);
    sub_1CD5EFF98(a2, 1);
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    a2[1] = v12 + 1;
    *(unsigned char *)(v11 + v12) = 40;
    uint64_t v14 = (unsigned char *)v3[2];
    uint64_t v13 = (unsigned char *)v3[3];
    size_t v15 = v13 - v14;
    if (v13 != v14)
    {
      sub_1CD5EFF98(a2, v13 - v14);
      memcpy((void *)(*a2 + a2[1]), v14, v15);
      a2[1] += v15;
    }
    --*((_DWORD *)a2 + 8);
    uint64_t result = sub_1CD5EFF98(a2, 1);
    uint64_t v16 = *a2;
    uint64_t v17 = a2[1];
    a2[1] = v17 + 1;
    *(unsigned char *)(v16 + v17) = 41;
  }
  uint64_t v4 = (unsigned char *)v3[4];
  if (*v4 != 110)
  {
    uint64_t v5 = (unsigned char *)v3[5];
    size_t v6 = v5 - v4;
    if (v5 == v4) {
      goto LABEL_4;
    }
    sub_1CD5EFF98(a2, v5 - v4);
    uint64_t v23 = *a2;
    uint64_t v19 = a2 + 1;
    uint64_t v24 = a2[1];
    goto LABEL_19;
  }
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v19 = a2 + 1;
  uint64_t v18 = a2[1];
  uint64_t v20 = *a2;
  a2[1] = v18 + 1;
  *(unsigned char *)(v20 + v18) = 45;
  unsigned int v22 = (unsigned char *)v3[4];
  BOOL v21 = (unsigned char *)v3[5];
  if (v21 == v22) {
    uint64_t v4 = (unsigned char *)v3[4];
  }
  else {
    uint64_t v4 = v22 + 1;
  }
  size_t v6 = v21 - v4;
  if (v21 != v4)
  {
    sub_1CD5EFF98(a2, v21 - v4);
    uint64_t v23 = *a2;
    uint64_t v24 = a2[1];
LABEL_19:
    uint64_t result = memcpy((void *)(v23 + v24), v4, v6);
    *v19 += v6;
  }
LABEL_4:
  uint64_t v8 = (unsigned char *)v3[2];
  uint64_t v7 = (unsigned char *)v3[3];
  size_t v9 = v7 - v8;
  if (v7 != v8 && v9 <= 3)
  {
    sub_1CD5EFF98(a2, v7 - v8);
    uint64_t result = memcpy((void *)(*a2 + a2[1]), v8, v9);
    a2[1] += v9;
  }
  return result;
}

void sub_1CD5F1BF0()
{
}

void *sub_1CD5F1C04(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 11)) {
    uint64_t v3 = "true";
  }
  else {
    uint64_t v3 = "false";
  }
  uint64_t v4 = "";
  if (!*(unsigned char *)(a1 + 11)) {
    uint64_t v4 = "";
  }
  size_t v5 = v4 - v3;
  sub_1CD5EFF98(a2, v4 - v3);
  uint64_t result = memcpy((void *)(*a2 + a2[1]), v3, v5);
  a2[1] += v5;
  return result;
}

void sub_1CD5F1C88()
{
}

void *sub_1CD5F1C9C(void *result, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)result + 2);
  if ((unint64_t)(*((void *)result + 3) - v2 + 1) >= 9)
  {
    uint64_t v4 = 0;
    size_t v5 = v16;
    uint64_t v6 = MEMORY[0x1E4F14390];
    do
    {
      uint64_t v7 = *(unsigned __int8 *)(v2 + v4);
      if ((*(char *)(v2 + v4) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v7 + 60) & 0x400) != 0) {
        char v8 = -48;
      }
      else {
        char v8 = -87;
      }
      uint64_t v9 = *(unsigned __int8 *)(v2 + v4 + 1);
      if ((*(char *)(v2 + v4 + 1) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v9 + 60) & 0x400) != 0) {
        char v10 = -48;
      }
      else {
        char v10 = -87;
      }
      *++size_t v5 = v9 + 16 * (v8 + v7) + v10;
      v4 += 2;
    }
    while (v4 != 8);
    if (&v16[1] < v5)
    {
      uint64_t v11 = &v16[2];
      do
      {
        char v12 = *(v11 - 1);
        *(v11 - 1) = *v5;
        *v5-- = v12;
      }
      while (v11++ < v5);
    }
    *(void *)__str = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t result = (void *)snprintf(__str, 0x18uLL, "%af", *(float *)&v16[1]);
    if (result)
    {
      int v14 = (int)result;
      size_t v15 = (int)result;
      sub_1CD5EFF98(a2, (int)result);
      uint64_t result = memcpy((void *)(*a2 + a2[1]), __str, v15);
      a2[1] += v14;
    }
  }
  return result;
}

void sub_1CD5F1E24()
{
}

void *sub_1CD5F1E38(void *result, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)result + 2);
  if ((unint64_t)(*((void *)result + 3) - v2 + 1) >= 0x11)
  {
    uint64_t v4 = 0;
    size_t v5 = (double *)((char *)&v16 + 7);
    uint64_t v6 = MEMORY[0x1E4F14390];
    do
    {
      uint64_t v7 = *(unsigned __int8 *)(v2 + v4);
      if ((*(char *)(v2 + v4) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v7 + 60) & 0x400) != 0) {
        char v8 = -48;
      }
      else {
        char v8 = -87;
      }
      uint64_t v9 = *(unsigned __int8 *)(v2 + v4 + 1);
      if ((*(char *)(v2 + v4 + 1) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v9 + 60) & 0x400) != 0) {
        char v10 = -48;
      }
      else {
        char v10 = -87;
      }
      *((unsigned char *)v5 + 1) = v9 + 16 * (v8 + v7) + v10;
      size_t v5 = (double *)((char *)v5 + 1);
      v4 += 2;
    }
    while (v4 != 16);
    if (&v17 < v5)
    {
      uint64_t v11 = (double *)((char *)&v17 + 1);
      do
      {
        char v12 = *((unsigned char *)v11 - 1);
        *((unsigned char *)v11 - 1) = *(unsigned char *)v5;
        *(unsigned char *)size_t v5 = v12;
        size_t v5 = (double *)((char *)v5 - 1);
        BOOL v13 = v11 >= v5;
        uint64_t v11 = (double *)((char *)v11 + 1);
      }
      while (!v13);
    }
    *(_OWORD *)__str = 0u;
    long long v19 = 0u;
    uint64_t result = (void *)snprintf(__str, 0x20uLL, "%a", v17);
    if (result)
    {
      int v14 = (int)result;
      size_t v15 = (int)result;
      sub_1CD5EFF98(a2, (int)result);
      uint64_t result = memcpy((void *)(*a2 + a2[1]), __str, v15);
      a2[1] += v14;
    }
  }
  return result;
}

void sub_1CD5F1FBC()
{
}

void *sub_1CD5F1FD0(void *result, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)result + 2);
  if ((unint64_t)(*((void *)result + 3) - v2 + 1) >= 0x21)
  {
    uint64_t v4 = 0;
    size_t v5 = (long double *)((char *)&v16 + 7);
    uint64_t v6 = MEMORY[0x1E4F14390];
    do
    {
      uint64_t v7 = *(unsigned __int8 *)(v2 + v4);
      if ((*(char *)(v2 + v4) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v7 + 60) & 0x400) != 0) {
        char v8 = -48;
      }
      else {
        char v8 = -87;
      }
      uint64_t v9 = *(unsigned __int8 *)(v2 + v4 + 1);
      if ((*(char *)(v2 + v4 + 1) & 0x80000000) == 0 && (*(_DWORD *)(v6 + 4 * v9 + 60) & 0x400) != 0) {
        char v10 = -48;
      }
      else {
        char v10 = -87;
      }
      *((unsigned char *)v5 + 1) = v9 + 16 * (v8 + v7) + v10;
      size_t v5 = (long double *)((char *)v5 + 1);
      v4 += 2;
    }
    while (v4 != 32);
    if (&v17 < v5)
    {
      uint64_t v11 = (long double *)((char *)&v17 + 1);
      do
      {
        char v12 = *((unsigned char *)v11 - 1);
        *((unsigned char *)v11 - 1) = *(unsigned char *)v5;
        *(unsigned char *)size_t v5 = v12;
        size_t v5 = (long double *)((char *)v5 - 1);
        BOOL v13 = v11 >= v5;
        uint64_t v11 = (long double *)((char *)v11 + 1);
      }
      while (!v13);
    }
    *(_OWORD *)__str = 0u;
    memset(v19, 0, sizeof(v19));
    uint64_t result = (void *)snprintf(__str, 0x2AuLL, "%LaL", v17);
    if (result)
    {
      int v14 = (int)result;
      size_t v15 = (int)result;
      sub_1CD5EFF98(a2, (int)result);
      uint64_t result = memcpy((void *)(*a2 + a2[1]), __str, v15);
      a2[1] += v14;
    }
  }
  return result;
}

void sub_1CD5F2158()
{
}

void *sub_1CD5F216C(uint64_t a1, void *a2)
{
  sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 15394;
  a2[1] += 2;
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, a2);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 40))(v4, a2);
  }
  uint64_t result = sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 8766;
  a2[1] += 2;
  return result;
}

void sub_1CD5F2248()
{
}

void *sub_1CD5F225C(uint64_t a1, void *a2)
{
  sub_1CD5EFF98(a2, 8);
  *(void *)(*a2 + a2[1]) = 0x64656D616E6E7527;
  a2[1] += 8;
  size_t v5 = *(unsigned char **)(a1 + 16);
  uint64_t v4 = *(unsigned char **)(a1 + 24);
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1CD5EFF98(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  uint64_t result = sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 39;
  return result;
}

void sub_1CD5F2318()
{
}

void *sub_1CD5F232C(void *result, uint64_t *a2)
{
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 3);
  if (v4 == 2)
  {
    uint64_t v6 = 3;
    uint64_t result = sub_1CD5EFF98(a2, 3);
    uint64_t v7 = a2 + 1;
    uint64_t v8 = *a2 + a2[1];
    *(unsigned char *)(v8 + 2) = 84;
    *(_WORD *)uint64_t v8 = 21540;
  }
  else
  {
    if (v4 == 1)
    {
      uint64_t v6 = 2;
      uint64_t result = sub_1CD5EFF98(a2, 2);
      uint64_t v9 = *a2;
      uint64_t v7 = a2 + 1;
      uint64_t v10 = a2[1];
      __int16 v11 = 20004;
    }
    else
    {
      if (v4) {
        goto LABEL_4;
      }
      uint64_t v6 = 2;
      uint64_t result = sub_1CD5EFF98(a2, 2);
      uint64_t v9 = *a2;
      uint64_t v7 = a2 + 1;
      uint64_t v10 = a2[1];
      __int16 v11 = 21540;
    }
    *(_WORD *)(v9 + v10) = v11;
  }
  *v7 += v6;
LABEL_4:
  int v5 = *((_DWORD *)v3 + 4);
  if (v5)
  {
    return sub_1CD5F2448(a2, (v5 - 1), 0);
  }
  return result;
}

void sub_1CD5F2434()
{
}

void *sub_1CD5F2448(void *a1, unint64_t a2, int a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 20;
  do
  {
    v9[v4--] = (a2 % 0xA) | 0x30;
    BOOL v5 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v5);
  if (a3) {
    v9[v4] = 45;
  }
  else {
    ++v4;
  }
  if (v4 != 21)
  {
    uint64_t v7 = &v9[v4];
    size_t v8 = 21 - v4;
    sub_1CD5EFF98(a1, 21 - v4);
    memcpy((void *)(*a1 + a1[1]), v7, v8);
    a1[1] += v8;
  }
  return a1;
}

void *sub_1CD5F2540(uint64_t a1, void *a2)
{
  uint64_t result = sub_1CD5EFF98(a2, 9);
  uint64_t v4 = *a2 + a2[1];
  *(void *)uint64_t v4 = *(void *)"typename ";
  *(unsigned char *)(v4 + 8) = 32;
  a2[1] += 9;
  return result;
}

uint64_t sub_1CD5F2598(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
  if ((*(_WORD *)(v3 + 9) & 0xC0) != 0x40)
  {
    BOOL v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return v5(v3, a2);
  }
  return result;
}

void sub_1CD5F263C()
{
}

uint64_t sub_1CD5F2650(uint64_t a1, void *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
  uint64_t result = *(void *)(a1 + 24);
  unsigned int v5 = *(unsigned __int8 *)(result + 9);
  if ((v5 & 0xC0) == 0x80)
  {
    uint64_t result = (**(uint64_t (***)(uint64_t, void *))result)(result, a2);
    if (result) {
      return result;
    }
    goto LABEL_3;
  }
  if (v5 >= 0x40)
  {
LABEL_3:
    uint64_t result = (uint64_t)sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 32;
  }
  return result;
}

uint64_t sub_1CD5F270C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, a2);
  }
  unsigned int v5 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 40);

  return v5();
}

void sub_1CD5F27DC()
{
}

void *sub_1CD5F27F0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  sub_1CD5EFF98((void *)a2, 9);
  uint64_t v5 = *(void *)a2 + *(void *)(a2 + 8);
  *(void *)uint64_t v5 = *(void *)"template<";
  *(unsigned char *)(v5 + 8) = 60;
  *(void *)(a2 + 8) += 9;
  sub_1CD5EFED8((void *)(a1 + 24), (uint64_t *)a2);
  uint64_t result = sub_1CD5EFF98((void *)a2, 11);
  uint64_t v7 = *(void *)a2 + *(void *)(a2 + 8);
  *(void *)uint64_t v7 = *(void *)"> typename ";
  *(_DWORD *)(v7 + 7) = 543518049;
  *(void *)(a2 + 8) += 11;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t sub_1CD5F28A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
  if ((*(_WORD *)(v3 + 9) & 0xC0) != 0x40)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return v5(v3, a2);
  }
  return result;
}

void sub_1CD5F294C()
{
}

void *sub_1CD5F2960(uint64_t a1, void *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
  uint64_t result = sub_1CD5EFF98(a2, 3);
  uint64_t v4 = *a2 + a2[1];
  *(unsigned char *)(v4 + 2) = 46;
  *(_WORD *)uint64_t v4 = 11822;
  a2[1] += 3;
  return result;
}

uint64_t sub_1CD5F29D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

void sub_1CD5F2A04()
{
}

void *sub_1CD5F2A18(void *a1, uint64_t *a2)
{
  sub_1CD5EFF98(a2, 7);
  uint64_t v4 = (_DWORD *)(*a2 + a2[1]);
  *(_DWORD *)((char *)v4 + 3) = 1633968749;
  *uint64_t v4 = 1835101223;
  a2[1] += 7;
  uint64_t v6 = (unsigned char *)a1[6];
  uint64_t v5 = (unsigned char *)a1[7];
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1CD5EFF98(a2, v5 - v6);
    memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 39;

  return sub_1CD5F2B08(a1, a2);
}

void sub_1CD5F2AF4()
{
}

void *sub_1CD5F2B08(void *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a2 + 8);
  if (a1[3])
  {
    *((_DWORD *)a2 + 8) = 0;
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 60;
    sub_1CD5EFED8(a1 + 2, a2);
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 62;
  }
  *((_DWORD *)a2 + 8) = v4 + 1;
  sub_1CD5EFF98(a2, 1);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  a2[1] = v6 + 1;
  *(unsigned char *)(v5 + v6) = 40;
  sub_1CD5EFED8(a1 + 4, a2);
  --*((_DWORD *)a2 + 8);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  a2[1] = v9 + 1;
  *(unsigned char *)(v8 + v9) = 41;
  return result;
}

void *sub_1CD5F2C04(uint64_t a1, uint64_t *a2)
{
  sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 23899;
  a2[1] += 2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v4 + 8) == 48) {
    sub_1CD5F2B08((void *)v4, a2);
  }
  uint64_t result = sub_1CD5EFF98(a2, 5);
  uint64_t v6 = *a2 + a2[1];
  *(unsigned char *)(v6 + 4) = 125;
  *(_DWORD *)uint64_t v6 = 774778491;
  a2[1] += 5;
  return result;
}

void sub_1CD5F2C9C()
{
}

void *sub_1CD5F2CB0(void *a1, uint64_t *a2)
{
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  a2[1] = v5 + 1;
  *(unsigned char *)(v4 + v5) = 40;
  uint64_t v6 = a1[2];
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 32))(v6, a2);
  if ((*(_WORD *)(v6 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 40))(v6, a2);
  }
  --*((_DWORD *)a2 + 8);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  a2[1] = v9 + 1;
  *(unsigned char *)(v8 + v9) = 41;
  uint64_t v10 = (unsigned char *)a1[3];
  if (*v10 == 110)
  {
    uint64_t result = sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 45;
    BOOL v13 = (unsigned char *)a1[3];
    __int16 v11 = (unsigned char *)a1[4];
    if (v11 == v13) {
      uint64_t v10 = (unsigned char *)a1[3];
    }
    else {
      uint64_t v10 = v13 + 1;
    }
  }
  else
  {
    __int16 v11 = (unsigned char *)a1[4];
  }
  size_t v12 = v11 - v10;
  if (v11 != v10)
  {
    sub_1CD5EFF98(a2, v11 - v10);
    uint64_t result = memcpy((void *)(*a2 + a2[1]), v10, v12);
    a2[1] += v12;
  }
  return result;
}

void sub_1CD5F2E24()
{
}

void *sub_1CD5F2E38(uint64_t a1, void *a2)
{
  uint64_t result = sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 28774;
  a2[1] += 2;
  uint64_t v6 = *(unsigned char **)(a1 + 16);
  uint64_t v5 = *(unsigned char **)(a1 + 24);
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1CD5EFF98(a2, v5 - v6);
    uint64_t result = memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  return result;
}

void sub_1CD5F2EC8()
{
}

void *sub_1CD5F2EDC(uint64_t a1, uint64_t a2)
{
  v17[0] = a2;
  v17[1] = a1;
  ++*(_DWORD *)(a2 + 32);
  sub_1CD5EFF98((void *)a2, 1);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5 + 1;
  *(unsigned char *)(v4 + v5) = 40;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      goto LABEL_6;
    }
    sub_1CD5EFFF8(v13, (uint64_t *)a2, 3, 1);
  }
  else
  {
    sub_1CD5F3118(v17);
  }
  sub_1CD5EFF98((void *)a2, 1);
  *(unsigned char *)(*(void *)a2 + (*(void *)(a2 + 8))++) = 32;
  size_t v7 = *(unsigned char **)(a1 + 32);
  uint64_t v6 = *(unsigned char **)(a1 + 40);
  size_t v8 = v6 - v7;
  if (v6 != v7)
  {
    sub_1CD5EFF98((void *)a2, v6 - v7);
    memcpy((void *)(*(void *)a2 + *(void *)(a2 + 8)), v7, v8);
    *(void *)(a2 + 8) += v8;
  }
  sub_1CD5EFF98((void *)a2, 1);
  *(unsigned char *)(*(void *)a2 + (*(void *)(a2 + 8))++) = 32;
LABEL_6:
  sub_1CD5EFF98((void *)a2, 3);
  uint64_t v9 = *(void *)a2 + *(void *)(a2 + 8);
  *(unsigned char *)(v9 + 2) = 46;
  *(_WORD *)uint64_t v9 = 11822;
  *(void *)(a2 + 8) += 3;
  if (*(unsigned char *)(a1 + 48) || *(void *)(a1 + 24))
  {
    sub_1CD5EFF98((void *)a2, 1);
    *(unsigned char *)(*(void *)a2 + (*(void *)(a2 + 8))++) = 32;
    __int16 v11 = *(unsigned char **)(a1 + 32);
    uint64_t v10 = *(unsigned char **)(a1 + 40);
    size_t v12 = v10 - v11;
    if (v10 != v11)
    {
      sub_1CD5EFF98((void *)a2, v10 - v11);
      memcpy((void *)(*(void *)a2 + *(void *)(a2 + 8)), v11, v12);
      *(void *)(a2 + 8) += v12;
    }
    sub_1CD5EFF98((void *)a2, 1);
    *(unsigned char *)(*(void *)a2 + (*(void *)(a2 + 8))++) = 32;
    if (*(unsigned char *)(a1 + 48)) {
      sub_1CD5F3118(v17);
    }
    else {
      sub_1CD5EFFF8(*(void *)(a1 + 24), (uint64_t *)a2, 3, 1);
    }
  }
  --*(_DWORD *)(a2 + 32);
  uint64_t result = sub_1CD5EFF98((void *)a2, 1);
  uint64_t v15 = *(void *)a2;
  uint64_t v16 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v16 + 1;
  *(unsigned char *)(v15 + v16) = 41;
  return result;
}

void sub_1CD5F3104()
{
}

void *sub_1CD5F3118(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(*a1 + 32) + 1;
  sub_1CD5EFF98((void *)v2, 1);
  uint64_t v4 = *(void *)v2;
  uint64_t v5 = *(void *)(v2 + 8);
  *(void *)(v2 + 8) = v5 + 1;
  *(unsigned char *)(v4 + v5) = 40;
  uint64_t v6 = *(void *)(v3 + 16);
  char v13 = 38;
  __int16 v14 = 1344;
  size_t v12 = (void (**)(void **, void))&unk_1F261A2E0;
  uint64_t v15 = v6;
  uint64_t v7 = *a1;
  sub_1CD5F3230((uint64_t)&v12, *a1);
  if ((v14 & 0xC0) != 0x40) {
    v12[5]((void **)&v12, v7);
  }
  uint64_t v8 = *a1;
  --*(_DWORD *)(v8 + 32);
  uint64_t result = sub_1CD5EFF98((void *)v8, 1);
  uint64_t v10 = *(void *)v8;
  uint64_t v11 = *(void *)(v8 + 8);
  *(void *)(v8 + 8) = v11 + 1;
  *(unsigned char *)(v10 + v11) = 41;
  return result;
}

void *sub_1CD5F3230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = -1;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  if ((*(_WORD *)(v6 + 9) & 0xC0) != 0x40) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2);
  }
  unsigned int v8 = *(_DWORD *)(a2 + 28);
  if (!v8) {
    goto LABEL_12;
  }
  if (v8 == -1)
  {
    uint64_t result = sub_1CD5EFF98((void *)a2, 3);
    uint64_t v11 = *(void *)a2 + *(void *)(a2 + 8);
    *(unsigned char *)(v11 + 2) = 46;
    *(_WORD *)uint64_t v11 = 11822;
    uint64_t v5 = *(void *)(a2 + 8) + 3;
LABEL_12:
    *(void *)(a2 + 8) = v5;
    goto LABEL_13;
  }
  if (v8 >= 2)
  {
    for (int i = 1; i != v8; ++i)
    {
      sub_1CD5EFF98((void *)a2, 2);
      *(_WORD *)(*(void *)a2 + *(void *)(a2 + 8)) = 8236;
      *(void *)(a2 + 8) += 2;
      *(_DWORD *)(a2 + 24) = i;
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a2);
      if ((*(_WORD *)(v10 + 9) & 0xC0) != 0x40) {
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, a2);
      }
    }
  }
LABEL_13:
  *(void *)(a2 + 24) = v4;
  return result;
}

void sub_1CD5F33D8()
{
}

uint64_t sub_1CD5F33EC(uint64_t a1, uint64_t *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  sub_1CD5EFF98(a2, 1);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  a2[1] = v6 + 1;
  if (v4)
  {
    *(unsigned char *)(v5 + v6) = 91;
    uint64_t v11 = *(void *)(a1 + 16);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 32))(v11, a2);
    if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 40))(v11, a2);
    }
    sub_1CD5EFF98(a2, 1);
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    a2[1] = v13 + 1;
    *(unsigned char *)(v12 + v13) = 93;
  }
  else
  {
    *(unsigned char *)(v5 + v6) = 46;
    uint64_t v7 = *(void *)(a1 + 16);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 32))(v7, a2);
    if ((*(_WORD *)(v7 + 9) & 0xC0) != 0x40) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 40))(v7, a2);
    }
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(unsigned __int8 *)(v8 + 8) - 77 >= 2)
  {
    sub_1CD5EFF98(a2, 3);
    uint64_t v14 = *a2 + a2[1];
    *(unsigned char *)(v14 + 2) = 32;
    *(_WORD *)uint64_t v14 = 15648;
    a2[1] += 3;
    uint64_t v8 = *(void *)(a1 + 24);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v8 + 32))(v8, a2);
  if ((*(_WORD *)(v8 + 9) & 0xC0) != 0x40)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v8 + 40);
    return v10(v8, a2);
  }
  return result;
}

void sub_1CD5F3618()
{
}

uint64_t sub_1CD5F362C(void *a1, uint64_t *a2)
{
  sub_1CD5EFF98(a2, 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  a2[1] = v5 + 1;
  *(unsigned char *)(v4 + v5) = 91;
  uint64_t v6 = a1[2];
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 32))(v6, a2);
  if ((*(_WORD *)(v6 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 40))(v6, a2);
  }
  sub_1CD5EFF98(a2, 5);
  uint64_t v7 = *a2 + a2[1];
  *(unsigned char *)(v7 + 4) = 32;
  *(_DWORD *)uint64_t v7 = 774778400;
  a2[1] += 5;
  uint64_t v8 = a1[3];
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 32))(v8, a2);
  if ((*(_WORD *)(v8 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 40))(v8, a2);
  }
  sub_1CD5EFF98(a2, 1);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  a2[1] = v10 + 1;
  *(unsigned char *)(v9 + v10) = 93;
  uint64_t v11 = a1[4];
  if (*(unsigned __int8 *)(v11 + 8) - 77 >= 2)
  {
    sub_1CD5EFF98(a2, 3);
    uint64_t v14 = *a2 + a2[1];
    *(unsigned char *)(v14 + 2) = 32;
    *(_WORD *)uint64_t v14 = 15648;
    a2[1] += 3;
    uint64_t v11 = a1[4];
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
  {
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 40);
    return v13(v11, a2);
  }
  return result;
}

void sub_1CD5F3878()
{
}

void *sub_1CD5F388C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    (*(void (**)(void, uint64_t *))(*(void *)v4 + 32))(*(void *)(a1 + 16), a2);
    if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 40))(v4, a2);
    }
  }
  sub_1CD5EFF98(a2, 1);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  a2[1] = v6 + 1;
  *(unsigned char *)(v5 + v6) = 123;
  sub_1CD5EFED8((void *)(a1 + 24), a2);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  a2[1] = v9 + 1;
  *(unsigned char *)(v8 + v9) = 125;
  return result;
}

void sub_1CD5F3978()
{
}

void *sub_1CD5F398C(uint64_t a1, uint64_t *a2)
{
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  a2[1] = v5 + 1;
  *(unsigned char *)(v4 + v5) = 40;
  uint64_t v6 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 32))(v6, a2);
  if ((*(_WORD *)(v6 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 40))(v6, a2);
  }
  --*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  a2[1] = v8 + 1;
  *(unsigned char *)(v7 + v8) = 41;
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  a2[1] = v10 + 1;
  *(unsigned char *)(v9 + v10) = 40;
  uint64_t v11 = *(void *)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 32))(v11, a2);
  if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 40))(v11, a2);
  }
  --*((_DWORD *)a2 + 8);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  a2[1] = v14 + 1;
  *(unsigned char *)(v13 + v14) = 41;
  return result;
}

void sub_1CD5F3B3C()
{
}

void *sub_1CD5F3B50(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 40))(v4, a2);
  }
  sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 15406;
  a2[1] += 2;
  uint64_t v5 = a1[2];
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v5 + 40))(v5, a2);
  }
  sub_1CD5EFF98(a2, 11);
  uint64_t v6 = *a2 + a2[1];
  *(void *)uint64_t v6 = *(void *)" at offset ";
  *(_DWORD *)(v6 + 7) = 544499059;
  a2[1] += 11;
  uint64_t v8 = (unsigned char *)a1[4];
  uint64_t v7 = (unsigned char *)a1[5];
  if (v8 == v7)
  {
    size_t v9 = 1;
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]) = 48;
LABEL_7:
    a2[1] += v9;
    goto LABEL_8;
  }
  if (*v8 != 110)
  {
    size_t v9 = v7 - v8;
LABEL_16:
    sub_1CD5EFF98(a2, v9);
    memcpy((void *)(*a2 + a2[1]), v8, v9);
    goto LABEL_7;
  }
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 45;
  uint64_t v12 = (unsigned char *)a1[4];
  uint64_t v11 = (unsigned char *)a1[5];
  if (v11 == v12) {
    uint64_t v8 = (unsigned char *)a1[4];
  }
  else {
    uint64_t v8 = v12 + 1;
  }
  size_t v9 = v11 - v8;
  if (v11 != v8) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t result = sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 62;
  return result;
}

void sub_1CD5F3D7C()
{
}

void *sub_1CD5F3D90(uint64_t a1, uint64_t a2)
{
  sub_1CD5EFF98((void *)a2, 9);
  uint64_t v4 = *(void *)a2 + *(void *)(a2 + 8);
  *(void *)uint64_t v4 = *(void *)"sizeof...";
  *(unsigned char *)(v4 + 8) = 46;
  *(void *)(a2 + 8) += 9;
  ++*(_DWORD *)(a2 + 32);
  sub_1CD5EFF98((void *)a2, 1);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v6 + 1;
  *(unsigned char *)(v5 + v6) = 40;
  uint64_t v7 = *(void *)(a1 + 16);
  char v12 = 38;
  __int16 v13 = 1344;
  uint64_t v11 = &unk_1F261A2E0;
  uint64_t v14 = v7;
  sub_1CD5F3230((uint64_t)&v11, a2);
  --*(_DWORD *)(a2 + 32);
  uint64_t result = sub_1CD5EFF98((void *)a2, 1);
  uint64_t v9 = *(void *)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v10 + 1;
  *(unsigned char *)(v9 + v10) = 41;
  return result;
}

void sub_1CD5F3E94()
{
}

void *sub_1CD5F3EA8(uint64_t a1, uint64_t *a2)
{
  return sub_1CD5EFED8((void *)(a1 + 16), a2);
}

void sub_1CD5F3EB4()
{
}

uint64_t sub_1CD5F3EC8(uint64_t a1, void *a2)
{
  sub_1CD5EFF98(a2, 6);
  uint64_t v4 = *a2 + a2[1];
  *(_WORD *)(v4 + 4) = 8311;
  *(_DWORD *)uint64_t v4 = 1869768820;
  a2[1] += 6;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 40);
    return v7(v5, a2);
  }
  return result;
}

void sub_1CD5F3FA8()
{
}

uint64_t sub_1CD5F3FBC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 40))(v4, a2);
  }
  sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 14906;
  a2[1] += 2;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 40);
    return v7(v5, a2);
  }
  return result;
}

uint64_t sub_1CD5F40FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))();
}

void sub_1CD5F4128()
{
}

uint64_t sub_1CD5F413C(uint64_t a1, void *a2)
{
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 126;
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 32);

  return v4();
}

void sub_1CD5F41C0()
{
}

uint64_t sub_1CD5F41D4(uint64_t a1, void *a2)
{
  sub_1CD5EFF98(a2, 9);
  uint64_t v4 = *a2 + a2[1];
  *(void *)uint64_t v4 = *(void *)"operator ";
  *(unsigned char *)(v4 + 8) = 32;
  a2[1] += 9;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 40);
    return v7(v5, a2);
  }
  return result;
}

void sub_1CD5F42B8()
{
}

uint64_t sub_1CD5F42CC(uint64_t a1, void *a2)
{
  sub_1CD5EFF98(a2, 11);
  uint64_t v4 = *a2 + a2[1];
  *(void *)uint64_t v4 = *(void *)"operator\"\" ";
  *(_DWORD *)(v4 + 7) = 539107954;
  a2[1] += 11;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 40);
    return v7(v5, a2);
  }
  return result;
}

void sub_1CD5F43B4()
{
}

uint64_t sub_1CD5F43C8(uint64_t a1, void *a2)
{
  sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 14906;
  a2[1] += 2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, a2);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 40);
    return v6(v4, a2);
  }
  return result;
}

uint64_t sub_1CD5F4494(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

void sub_1CD5F44C0()
{
}

void *sub_1CD5F44D4(void *result, uint64_t *a2)
{
  if (!(!v3 & v2))
  {
    switch(*((_DWORD *)result + 3))
    {
      case 0:
        uint64_t v5 = 14;
        uint64_t result = sub_1CD5EFF98(a2, 14);
        uint64_t v6 = *a2;
        uint64_t v8 = a2[1];
        uint64_t v7 = a2 + 1;
        qmemcpy((void *)(v6 + v8), "std::allocator", 14);
        break;
      case 1:
        uint64_t v5 = 17;
        uint64_t result = sub_1CD5EFF98(a2, 17);
        uint64_t v9 = *a2;
        uint64_t v10 = a2[1];
        uint64_t v7 = a2 + 1;
        uint64_t v11 = v9 + v10;
        *(_OWORD *)uint64_t v11 = *(_OWORD *)"std::basic_string";
        *(unsigned char *)(v11 + 16) = 103;
        break;
      case 2:
        uint64_t v5 = 11;
        uint64_t result = sub_1CD5EFF98(a2, 11);
        uint64_t v12 = *a2;
        uint64_t v13 = a2[1];
        uint64_t v7 = a2 + 1;
        uint64_t v14 = v12 + v13;
        *(void *)uint64_t v14 = *(void *)"std::string";
        *(_DWORD *)(v14 + 7) = 1735289202;
        break;
      case 3:
        uint64_t v5 = 12;
        uint64_t result = sub_1CD5EFF98(a2, 12);
        uint64_t v15 = *a2;
        uint64_t v16 = a2[1];
        uint64_t v7 = a2 + 1;
        uint64_t v17 = v15 + v16;
        uint64_t v18 = "std::istream";
        goto LABEL_10;
      case 4:
        uint64_t v5 = 12;
        uint64_t result = sub_1CD5EFF98(a2, 12);
        uint64_t v19 = *a2;
        uint64_t v20 = a2[1];
        uint64_t v7 = a2 + 1;
        uint64_t v17 = v19 + v20;
        uint64_t v18 = "std::ostream";
LABEL_10:
        *(void *)uint64_t v17 = *(void *)v18;
        *(_DWORD *)(v17 + 8) = 1835099506;
        break;
      case 5:
        uint64_t v5 = 13;
        uint64_t result = sub_1CD5EFF98(a2, 13);
        uint64_t v21 = *a2;
        uint64_t v22 = a2[1];
        uint64_t v7 = a2 + 1;
        qmemcpy((void *)(v21 + v22), "std::iostream", 13);
        break;
      default:
        JUMPOUT(0);
    }
    *v7 += v5;
  }
  return result;
}

char *sub_1CD5F4674(uint64_t a1)
{
  return off_1E684A070[*(int *)(a1 + 12)];
}

void sub_1CD5F4698()
{
}

void *sub_1CD5F46AC(uint64_t a1, void *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
  sub_1CD5EFF98(a2, 5);
  uint64_t v4 = *a2 + a2[1];
  *(unsigned char *)(v4 + 4) = 58;
  *(_DWORD *)uint64_t v4 = 1768055131;
  a2[1] += 5;
  uint64_t v6 = *(unsigned char **)(a1 + 24);
  uint64_t v5 = *(unsigned char **)(a1 + 32);
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1CD5EFF98(a2, v5 - v6);
    memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  uint64_t result = sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 93;
  return result;
}

void sub_1CD5F4794()
{
}

void *sub_1CD5F47A8(uint64_t a1, uint64_t *a2)
{
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  a2[1] = v5 + 1;
  *(unsigned char *)(v4 + v5) = 91;
  sub_1CD5EFED8((void *)(a1 + 16), a2);
  --*((_DWORD *)a2 + 8);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  a2[1] = v8 + 1;
  *(unsigned char *)(v7 + v8) = 93;
  return result;
}

void sub_1CD5F4834()
{
}

void *sub_1CD5F4848(void *result, uint64_t *a2)
{
  if (!(!v3 & v2))
  {
    switch(*((_DWORD *)result + 3))
    {
      case 0:
        uint64_t v5 = 14;
        uint64_t result = sub_1CD5EFF98(a2, 14);
        uint64_t v6 = *a2;
        uint64_t v8 = a2[1];
        uint64_t v7 = a2 + 1;
        qmemcpy((void *)(v6 + v8), "std::allocator", 14);
        break;
      case 1:
        uint64_t v5 = 17;
        uint64_t result = sub_1CD5EFF98(a2, 17);
        uint64_t v9 = *a2;
        uint64_t v10 = a2[1];
        uint64_t v7 = a2 + 1;
        uint64_t v11 = v9 + v10;
        *(_OWORD *)uint64_t v11 = *(_OWORD *)"std::basic_string";
        *(unsigned char *)(v11 + 16) = 103;
        break;
      case 2:
        uint64_t v5 = 70;
        uint64_t result = sub_1CD5EFF98(a2, 70);
        uint64_t v12 = *a2;
        uint64_t v13 = a2[1];
        uint64_t v7 = a2 + 1;
        qmemcpy((void *)(v12 + v13), "std::basic_string<char, std::char_traits<char>, std::allocator<char> >", 70);
        break;
      case 3:
        uint64_t v5 = 49;
        uint64_t result = sub_1CD5EFF98(a2, 49);
        uint64_t v14 = *a2;
        uint64_t v15 = a2[1];
        uint64_t v7 = a2 + 1;
        uint64_t v16 = v14 + v15;
        uint64_t v17 = "std::basic_istream<char, std::char_traits<char> >";
        goto LABEL_10;
      case 4:
        uint64_t v5 = 49;
        uint64_t result = sub_1CD5EFF98(a2, 49);
        uint64_t v18 = *a2;
        uint64_t v19 = a2[1];
        uint64_t v7 = a2 + 1;
        uint64_t v16 = v18 + v19;
        uint64_t v17 = "std::basic_ostream<char, std::char_traits<char> >";
LABEL_10:
        long long v20 = *((_OWORD *)v17 + 1);
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        *(_OWORD *)(v16 + 16) = v20;
        *(_OWORD *)(v16 + 32) = *((_OWORD *)v17 + 2);
        *(unsigned char *)(v16 + 48) = 62;
        break;
      case 5:
        uint64_t v5 = 50;
        uint64_t result = sub_1CD5EFF98(a2, 50);
        uint64_t v21 = *a2;
        uint64_t v22 = a2[1];
        uint64_t v7 = a2 + 1;
        qmemcpy((void *)(v21 + v22), "std::basic_iostream<char, std::char_traits<char> >", 50);
        break;
      default:
        JUMPOUT(0);
    }
    *v7 += v5;
  }
  return result;
}

char *sub_1CD5F49F8(uint64_t a1)
{
  return off_1E684A0D0[*(int *)(a1 + 12)];
}

void sub_1CD5F4A1C()
{
}

unsigned char *sub_1CD5F4A30(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 126;
  }
  uint64_t result = (unsigned char *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16));
  size_t v6 = v5 - result;
  if (v5 != result)
  {
    uint64_t v7 = result;
    sub_1CD5EFF98(a2, v6);
    uint64_t result = memcpy((void *)(*a2 + a2[1]), v7, v6);
    a2[1] += v6;
  }
  return result;
}

void sub_1CD5F4AF4()
{
}

uint64_t sub_1CD5F4B08(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 40))(v4, a2);
  }
  sub_1CD5EFF98(a2, 1);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  a2[1] = v6 + 1;
  *(unsigned char *)(v5 + v6) = 64;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 32))(v7, a2);
  if ((*(_WORD *)(v7 + 9) & 0xC0) != 0x40)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 40);
    return v9(v7, a2);
  }
  return result;
}

uint64_t sub_1CD5F4C44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))();
}

void sub_1CD5F4C70()
{
}

uint64_t sub_1CD5F4C84(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 40))(v4, a2);
  }
  sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 14906;
  a2[1] += 2;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 40);
    return v7(v5, a2);
  }
  return result;
}

uint64_t sub_1CD5F4DC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))();
}

void sub_1CD5F4DF0()
{
}

uint64_t sub_1CD5F4E04(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 40))(v4, a2);
  }
  sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 14906;
  a2[1] += 2;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 40);
    return v7(v5, a2);
  }
  return result;
}

void sub_1CD5F4F48()
{
}

uint64_t sub_1CD5F4F5C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(result + 8) = 36;
  __int16 v3 = *(_WORD *)(result + 9) & 0xF000;
  *(void *)uint64_t result = &unk_1F261AA70;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  __int16 v4 = v3 | 0xA80;
  *(_WORD *)(result + 9) = v3 | 0xA80;
  uint64_t v5 = 8 * a3;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    uint64_t v7 = a2;
    while ((*(_WORD *)(*(void *)v7 + 9) & 0x300) == 0x100)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    __int16 v4 = v3 | 0x980;
    *(_WORD *)(result + 9) = v3 | 0x980;
  }
  if (a3)
  {
    uint64_t v8 = 8 * a3;
    uint64_t v9 = a2;
    while ((*(_WORD *)(*(void *)v9 + 9) & 0xC00) == 0x400)
    {
      v9 += 8;
      v8 -= 8;
      if (!v8) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    __int16 v4 = v4 & 0xF3FF | 0x400;
    *(_WORD *)(result + 9) = v4;
  }
  if (a3)
  {
    while ((*(_WORD *)(*(void *)a2 + 9) & 0xC0) == 0x40)
    {
      a2 += 8;
      v5 -= 8;
      if (!v5) {
        goto LABEL_14;
      }
    }
  }
  else
  {
LABEL_14:
    *(_WORD *)(result + 9) = v4 & 0xFF3F | 0x40;
  }
  return result;
}

uint64_t sub_1CD5F5040(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 28) == -1)
  {
    unint64_t v2 = 0;
    unint64_t v3 = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    unint64_t v2 = *(unsigned int *)(a2 + 24);
    unint64_t v3 = *(void *)(a1 + 24);
  }
  if (v3 <= v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8 * v2);
  unsigned int v5 = *(unsigned __int8 *)(v4 + 9);
  if ((v5 & 0xC0) == 0x80) {
    return (**(uint64_t (***)(uint64_t))v4)(v4);
  }
  else {
    return v5 < 0x40;
  }
}

uint64_t sub_1CD5F50BC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 28) == -1)
  {
    unint64_t v2 = 0;
    unint64_t v3 = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    unint64_t v2 = *(unsigned int *)(a2 + 24);
    unint64_t v3 = *(void *)(a1 + 24);
  }
  if (v3 <= v2) {
    return 0;
  }
  uint64_t v4 = *(unsigned char **)(*(void *)(a1 + 16) + 8 * v2);
  int v5 = v4[10] & 3;
  if (v5 == 2) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 8))();
  }
  else {
    return v5 == 0;
  }
}

uint64_t sub_1CD5F5138(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 28) == -1)
  {
    unint64_t v2 = 0;
    unint64_t v3 = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    unint64_t v2 = *(unsigned int *)(a2 + 24);
    unint64_t v3 = *(void *)(a1 + 24);
  }
  if (v3 <= v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8 * v2);
  int v5 = (*(unsigned __int16 *)(v4 + 9) >> 10) & 3;
  if (v5 == 2) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 16))();
  }
  else {
    return v5 == 0;
  }
}

uint64_t sub_1CD5F51B4(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 28) == -1)
  {
    unint64_t v2 = 0;
    unint64_t v3 = *(void *)(result + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    unint64_t v2 = *(unsigned int *)(a2 + 24);
    unint64_t v3 = *(void *)(result + 24);
  }
  if (v3 > v2) {
    return (*(uint64_t (**)(void))(**(void **)(*(void *)(result + 16) + 8 * v2) + 24))();
  }
  return result;
}

uint64_t sub_1CD5F5210(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 28) == -1)
  {
    unint64_t v2 = 0;
    unint64_t v3 = *(void *)(result + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    unint64_t v2 = *(unsigned int *)(a2 + 24);
    unint64_t v3 = *(void *)(result + 24);
  }
  if (v3 > v2) {
    return (*(uint64_t (**)(void))(**(void **)(*(void *)(result + 16) + 8 * v2) + 32))();
  }
  return result;
}

uint64_t sub_1CD5F526C(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 28) == -1)
  {
    unint64_t v2 = 0;
    unint64_t v3 = *(void *)(result + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 28) = v3;
  }
  else
  {
    unint64_t v2 = *(unsigned int *)(a2 + 24);
    unint64_t v3 = *(void *)(result + 24);
  }
  if (v3 > v2) {
    return (*(uint64_t (**)(void))(**(void **)(*(void *)(result + 16) + 8 * v2) + 40))();
  }
  return result;
}

void sub_1CD5F52CC()
{
}

void *sub_1CD5F52E0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  sub_1CD5EFF98((void *)a2, 1);
  *(unsigned char *)(*(void *)a2 + (*(void *)(a2 + 8))++) = 60;
  sub_1CD5EFED8((void *)(a1 + 16), (uint64_t *)a2);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 && *(unsigned char *)(v5 + *(void *)a2 - 1) == 62)
  {
    sub_1CD5EFF98((void *)a2, 1);
    *(unsigned char *)(*(void *)a2 + (*(void *)(a2 + 8))++) = 32;
  }
  uint64_t result = sub_1CD5EFF98((void *)a2, 1);
  *(unsigned char *)(*(void *)a2 + (*(void *)(a2 + 8))++) = 62;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

void sub_1CD5F53B0()
{
}

uint64_t sub_1CD5F53C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, a2);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40);
    return v7(v5, a2);
  }
  return result;
}

uint64_t sub_1CD5F54E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

void sub_1CD5F550C()
{
}

void *sub_1CD5F5520(uint64_t a1, uint64_t *a2)
{
  return sub_1CD5EFED8((void *)(a1 + 16), a2);
}

void sub_1CD5F552C()
{
}

void *sub_1CD5F5540(uint64_t a1, uint64_t *a2)
{
  sub_1CD5EFF98(a2, 12);
  uint64_t v4 = *a2 + a2[1];
  *(void *)uint64_t v4 = *(void *)" [enable_if:";
  *(_DWORD *)(v4 + 8) = 979790175;
  a2[1] += 12;
  sub_1CD5EFED8((void *)(a1 + 16), a2);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  a2[1] = v7 + 1;
  *(unsigned char *)(v6 + v7) = 93;
  return result;
}

void sub_1CD5F55D0()
{
}

uint64_t sub_1CD5F55E4()
{
  return 1;
}

uint64_t sub_1CD5F55EC()
{
  return 1;
}

uint64_t sub_1CD5F55F4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, a2);
    uint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = *(unsigned __int8 *)(v5 + 9);
    if ((v6 & 0xC0) == 0x80)
    {
      if ((**(uint64_t (***)(uint64_t, void *))v5)(v5, a2)) {
        goto LABEL_6;
      }
      goto LABEL_4;
    }
    if (v6 >= 0x40)
    {
LABEL_4:
      sub_1CD5EFF98(a2, 1);
      *(unsigned char *)(*a2 + a2[1]++) = 32;
    }
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 32))(v7, a2);
  if ((*(_WORD *)(v7 + 9) & 0xC0) != 0x40)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 40);
    return v9(v7, a2);
  }
  return result;
}

void *sub_1CD5F573C(uint64_t a1, uint64_t *a2)
{
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  a2[1] = v5 + 1;
  *(unsigned char *)(v4 + v5) = 40;
  sub_1CD5EFED8((void *)(a1 + 32), a2);
  --*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  a2[1] = v7 + 1;
  *(unsigned char *)(v6 + v7) = 41;
  uint64_t result = *(void **)(a1 + 16);
  if (result) {
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t *))(*result + 40))(result, a2);
  }
  int v9 = *(_DWORD *)(a1 + 56);
  if (v9)
  {
    uint64_t result = sub_1CD5EFF98(a2, 6);
    uint64_t v13 = *a2 + a2[1];
    *(_WORD *)(v13 + 4) = 29811;
    *(_DWORD *)uint64_t v13 = 1852793632;
    a2[1] += 6;
    int v9 = *(_DWORD *)(a1 + 56);
  }
  if ((v9 & 2) != 0)
  {
    uint64_t result = sub_1CD5EFF98(a2, 9);
    uint64_t v14 = *a2 + a2[1];
    *(void *)uint64_t v14 = *(void *)" volatile";
    *(unsigned char *)(v14 + 8) = 101;
    a2[1] += 9;
    int v9 = *(_DWORD *)(a1 + 56);
  }
  if ((v9 & 4) != 0)
  {
    uint64_t result = sub_1CD5EFF98(a2, 9);
    uint64_t v15 = *a2 + a2[1];
    *(void *)uint64_t v15 = *(void *)" restrict";
    *(unsigned char *)(v15 + 8) = 116;
    a2[1] += 9;
  }
  int v10 = *(unsigned __int8 *)(a1 + 60);
  if (v10 == 2)
  {
    uint64_t v16 = 3;
    uint64_t result = sub_1CD5EFF98(a2, 3);
    uint64_t v17 = *a2 + a2[1];
    *(unsigned char *)(v17 + 2) = 38;
    *(_WORD *)uint64_t v17 = 9760;
LABEL_19:
    a2[1] += v16;
    goto LABEL_11;
  }
  if (v10 == 1)
  {
    uint64_t v16 = 2;
    uint64_t result = sub_1CD5EFF98(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 9760;
    goto LABEL_19;
  }
LABEL_11:
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11)
  {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 32))(v11, a2);
    if ((*(_WORD *)(v11 + 9) & 0xC0) != 0x40)
    {
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 40);
      return (void *)v12(v11, a2);
    }
  }
  return result;
}

void sub_1CD5F59C0()
{
}

void *sub_1CD5F59D4(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 40))(v4, a2);
  }
  sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 10272;
  a2[1] += 2;
  uint64_t v6 = (unsigned char *)a1[3];
  uint64_t v5 = (unsigned char *)a1[4];
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1CD5EFF98(a2, v5 - v6);
    memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  uint64_t result = sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 41;
  return result;
}

void sub_1CD5F5AEC()
{
}

void *sub_1CD5F5B00(uint64_t a1, uint64_t *a2)
{
  sub_1CD5EFF98(a2, 8);
  *(void *)(*a2 + a2[1]) = 0x7470656378656F6ELL;
  a2[1] += 8;
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  a2[1] = v5 + 1;
  *(unsigned char *)(v4 + v5) = 40;
  sub_1CD5EFFF8(*(void *)(a1 + 16), a2, 19, 0);
  --*((_DWORD *)a2 + 8);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  a2[1] = v8 + 1;
  *(unsigned char *)(v7 + v8) = 41;
  return result;
}

void sub_1CD5F5BC4()
{
}

void *sub_1CD5F5BD8(uint64_t a1, uint64_t *a2)
{
  sub_1CD5EFF98(a2, 5);
  uint64_t v4 = *a2 + a2[1];
  *(unsigned char *)(v4 + 4) = 119;
  *(_DWORD *)uint64_t v4 = 1869768820;
  a2[1] += 5;
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  a2[1] = v6 + 1;
  *(unsigned char *)(v5 + v6) = 40;
  sub_1CD5EFED8((void *)(a1 + 16), a2);
  --*((_DWORD *)a2 + 8);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  a2[1] = v9 + 1;
  *(unsigned char *)(v8 + v9) = 41;
  return result;
}

void sub_1CD5F5C98()
{
}

uint64_t sub_1CD5F5CAC()
{
  return 1;
}

uint64_t sub_1CD5F5CB4()
{
  return 1;
}

void *sub_1CD5F5CBC(uint64_t a1, void *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
  uint64_t result = sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 32;
  return result;
}

void *sub_1CD5F5D28(uint64_t a1, uint64_t *a2)
{
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  a2[1] = v5 + 1;
  *(unsigned char *)(v4 + v5) = 40;
  sub_1CD5EFED8((void *)(a1 + 24), a2);
  --*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  a2[1] = v7 + 1;
  *(unsigned char *)(v6 + v7) = 41;
  uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
  int v9 = *(_DWORD *)(a1 + 40);
  if (v9)
  {
    uint64_t result = sub_1CD5EFF98(a2, 6);
    uint64_t v11 = *a2 + a2[1];
    *(_WORD *)(v11 + 4) = 29811;
    *(_DWORD *)uint64_t v11 = 1852793632;
    a2[1] += 6;
    int v9 = *(_DWORD *)(a1 + 40);
  }
  if ((v9 & 2) != 0)
  {
    uint64_t result = sub_1CD5EFF98(a2, 9);
    uint64_t v12 = *a2 + a2[1];
    *(void *)uint64_t v12 = *(void *)" volatile";
    *(unsigned char *)(v12 + 8) = 101;
    a2[1] += 9;
    int v9 = *(_DWORD *)(a1 + 40);
  }
  if ((v9 & 4) != 0)
  {
    uint64_t result = sub_1CD5EFF98(a2, 9);
    uint64_t v13 = *a2 + a2[1];
    *(void *)uint64_t v13 = *(void *)" restrict";
    *(unsigned char *)(v13 + 8) = 116;
    a2[1] += 9;
  }
  int v10 = *(unsigned __int8 *)(a1 + 44);
  if (v10 == 2)
  {
    uint64_t v18 = 3;
    uint64_t result = sub_1CD5EFF98(a2, 3);
    uint64_t v19 = *a2 + a2[1];
    *(unsigned char *)(v19 + 2) = 38;
    *(_WORD *)uint64_t v19 = 9760;
LABEL_17:
    a2[1] += v18;
    goto LABEL_9;
  }
  if (v10 == 1)
  {
    uint64_t v18 = 2;
    uint64_t result = sub_1CD5EFF98(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 9760;
    goto LABEL_17;
  }
LABEL_9:
  if (*(void *)(a1 + 48))
  {
    sub_1CD5EFF98(a2, 1);
    uint64_t v14 = *a2;
    uint64_t v15 = a2[1];
    a2[1] = v15 + 1;
    *(unsigned char *)(v14 + v15) = 32;
    uint64_t v16 = *(void *)(a1 + 48);
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v16 + 32))(v16, a2);
    if ((*(_WORD *)(v16 + 9) & 0xC0) != 0x40)
    {
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v16 + 40);
      return (void *)v17(v16, a2);
    }
  }
  return result;
}

void sub_1CD5F5FCC()
{
}

void *sub_1CD5F5FE0(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 40))(v4, a2);
  }
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 60;
  uint64_t v6 = (unsigned char *)a1[3];
  uint64_t v5 = (unsigned char *)a1[4];
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1CD5EFF98(a2, v5 - v6);
    memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  uint64_t result = sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 62;
  return result;
}

void sub_1CD5F60F8()
{
}

void *sub_1CD5F610C(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 40))(v4, a2);
  }
  uint64_t result = sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 32;
  size_t v7 = (unsigned char *)a1[3];
  uint64_t v6 = (unsigned char *)a1[4];
  size_t v8 = v6 - v7;
  if (v6 != v7)
  {
    sub_1CD5EFF98(a2, v6 - v7);
    uint64_t result = memcpy((void *)(*a2 + a2[1]), v7, v8);
    a2[1] += v8;
  }
  uint64_t v9 = a1[5];
  if (v9)
  {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 32))(v9, a2);
    if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40)
    {
      int v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 40);
      return (void *)v10(v9, a2);
    }
  }
  return result;
}

void sub_1CD5F6290()
{
}

uint64_t sub_1CD5F62A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  unsigned int v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80) {
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  }
  else {
    return v2 < 0x40;
  }
}

uint64_t sub_1CD5F62E8(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 16);
  int v2 = v1[10] & 3;
  if (v2 == 2) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 8))();
  }
  else {
    return v2 == 0;
  }
}

uint64_t sub_1CD5F632C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = (*(unsigned __int16 *)(v1 + 9) >> 10) & 3;
  if (v2 == 2) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 16))();
  }
  else {
    return v2 == 0;
  }
}

void *sub_1CD5F6370(uint64_t a1, void *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));

  return sub_1CD5F6414((void *)a1, a2);
}

uint64_t sub_1CD5F63D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

void sub_1CD5F6400()
{
}

void *sub_1CD5F6414(void *result, void *a2)
{
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 3);
  if (v4)
  {
    uint64_t result = sub_1CD5EFF98(a2, 6);
    uint64_t v5 = *a2 + a2[1];
    *(_WORD *)(v5 + 4) = 29811;
    *(_DWORD *)uint64_t v5 = 1852793632;
    a2[1] += 6;
    int v4 = *((_DWORD *)v3 + 3);
  }
  if ((v4 & 2) != 0)
  {
    uint64_t result = sub_1CD5EFF98(a2, 9);
    uint64_t v6 = *a2 + a2[1];
    *(void *)uint64_t v6 = *(void *)" volatile";
    *(unsigned char *)(v6 + 8) = 101;
    a2[1] += 9;
    int v4 = *((_DWORD *)v3 + 3);
  }
  if ((v4 & 4) != 0)
  {
    uint64_t result = sub_1CD5EFF98(a2, 9);
    uint64_t v7 = *a2 + a2[1];
    *(void *)uint64_t v7 = *(void *)" restrict";
    *(unsigned char *)(v7 + 8) = 116;
    a2[1] += 9;
  }
  return result;
}

uint64_t sub_1CD5F6500(uint64_t a1, void *a2)
{
  sub_1CD5EFF98(a2, 6);
  uint64_t v4 = *a2 + a2[1];
  *(_WORD *)(v4 + 4) = 29793;
  *(_DWORD *)uint64_t v4 = 1869366879;
  a2[1] += 6;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
  if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 40);
    return v7(v5, a2);
  }
  return result;
}

void sub_1CD5F65E0()
{
}

void *sub_1CD5F65F4(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    sub_1CD5EFF98(a2, 9);
    uint64_t v4 = *a2 + a2[1];
    *(void *)uint64_t v4 = *(void *)"unsigned ";
    *(unsigned char *)(v4 + 8) = 32;
    a2[1] += 9;
  }
  sub_1CD5EFF98(a2, 7);
  uint64_t v5 = (_DWORD *)(*a2 + a2[1]);
  *(_DWORD *)((char *)v5 + 3) = 1953384820;
  *uint64_t v5 = 1953055327;
  a2[1] += 7;
  ++*((_DWORD *)a2 + 8);
  sub_1CD5EFF98(a2, 1);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  a2[1] = v7 + 1;
  *(unsigned char *)(v6 + v7) = 40;
  sub_1CD5EFFF8(*(void *)(a1 + 16), a2, 19, 0);
  --*((_DWORD *)a2 + 8);
  uint64_t result = sub_1CD5EFF98(a2, 1);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  a2[1] = v10 + 1;
  *(unsigned char *)(v9 + v10) = 41;
  return result;
}

void sub_1CD5F6700()
{
}

void *sub_1CD5F6714(uint64_t a1, void *a2)
{
  sub_1CD5EFF98(a2, 13);
  qmemcpy((void *)(*a2 + a2[1]), "pixel vector[", 13);
  a2[1] += 13;
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, a2);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 40))(v4, a2);
  }
  uint64_t result = sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 93;
  return result;
}

void sub_1CD5F6804()
{
}

void *sub_1CD5F6818(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if ((*(_WORD *)(v4 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 40))(v4, a2);
  }
  sub_1CD5EFF98(a2, 8);
  *(void *)(*a2 + a2[1]) = 0x5B726F7463657620;
  a2[1] += 8;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, a2);
    if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40) {
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 40))(v5, a2);
    }
  }
  uint64_t result = sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 93;
  return result;
}

void sub_1CD5F6974()
{
}

uint64_t sub_1CD5F6988()
{
  return 1;
}

uint64_t sub_1CD5F6990()
{
  return 1;
}

uint64_t sub_1CD5F6998(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t sub_1CD5F69C0(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (!v4 || *(unsigned char *)(v4 + *a2 - 1) != 93)
  {
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 32;
  }
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 91;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    (*(void (**)(void, void *))(*(void *)v5 + 32))(*(void *)(a1 + 24), a2);
    if ((*(_WORD *)(v5 + 9) & 0xC0) != 0x40) {
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 40))(v5, a2);
    }
  }
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 93;
  uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 40);

  return v6();
}

void sub_1CD5F6B20()
{
}

uint64_t sub_1CD5F6B34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  unsigned int v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80) {
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  }
  else {
    return v2 < 0x40;
  }
}

void *sub_1CD5F6B78(uint64_t a1, void *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned int v5 = *(unsigned __int16 *)(v4 + 9);
  int v6 = (v5 >> 8) & 3;
  if (!v6) {
    goto LABEL_8;
  }
  if (v6 == 2)
  {
    if ((*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 8))(v4, a2))
    {
LABEL_8:
      char v8 = 40;
      goto LABEL_9;
    }
    uint64_t v4 = *(void *)(a1 + 24);
    unsigned int v5 = *(unsigned __int16 *)(v4 + 9);
  }
  int v7 = (v5 >> 10) & 3;
  if (!v7 || v7 == 2 && ((*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, a2) & 1) != 0) {
    goto LABEL_8;
  }
  char v8 = 32;
LABEL_9:
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = v8;
  uint64_t v9 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void *))(*(void *)v9 + 32))(v9, a2);
  if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40) {
    (*(void (**)(uint64_t, void *))(*(void *)v9 + 40))(v9, a2);
  }
  uint64_t result = sub_1CD5EFF98(a2, 3);
  uint64_t v11 = *a2 + a2[1];
  *(unsigned char *)(v11 + 2) = 42;
  *(_WORD *)uint64_t v11 = 14906;
  a2[1] += 3;
  return result;
}

uint64_t sub_1CD5F6D20(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned int v5 = *(unsigned __int16 *)(v4 + 9);
  int v6 = (v5 >> 8) & 3;
  if (v6 == 2)
  {
    if ((*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 8))(v4, a2)) {
      goto LABEL_12;
    }
    uint64_t v4 = *(void *)(a1 + 24);
    unsigned int v5 = *(unsigned __int16 *)(v4 + 9);
  }
  else if (!v6)
  {
    goto LABEL_12;
  }
  int v7 = (v5 >> 10) & 3;
  if (v7 == 2)
  {
    if (!(*(unsigned int (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, a2)) {
      goto LABEL_9;
    }
  }
  else if (v7)
  {
    goto LABEL_9;
  }
LABEL_12:
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 41;
LABEL_9:
  char v8 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 40);

  return v8();
}

void sub_1CD5F6E3C()
{
}

uint64_t sub_1CD5F6E50(void *a1, uint64_t *a2)
{
  unsigned int v5 = (unsigned char *)a1[2];
  uint64_t v4 = (unsigned char *)a1[3];
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1CD5EFF98(a2, v4 - v5);
    memcpy((void *)(*a2 + a2[1]), v5, v6);
    a2[1] += v6;
  }
  sub_1CD5EFF98(a2, 1);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  a2[1] = v8 + 1;
  *(unsigned char *)(v7 + v8) = 32;
  uint64_t v9 = a1[4];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 32))(v9, a2);
  if ((*(_WORD *)(v9 + 9) & 0xC0) != 0x40)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 40);
    return v11(v9, a2);
  }
  return result;
}

void sub_1CD5F6F60()
{
}

uint64_t sub_1CD5F6F74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  unsigned int v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80) {
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  }
  else {
    return v2 < 0x40;
  }
}

void *sub_1CD5F6FB8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v4 + 8) != 10
    || (uint64_t v5 = *(void *)(v4 + 16), *(unsigned char *)(v5 + 8) != 7)
    || (size_t v6 = *(const char **)(v5 + 16), *(void *)(v5 + 24) - (void)v6 != 11)
    || strncmp(v6, "objc_object", 0xBuLL))
  {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, a2);
    uint64_t v13 = *(unsigned char **)(a1 + 16);
    if ((v13[10] & 3) == 0
      || (v13[10] & 3) == 2 && (*(unsigned int (**)(unsigned char *, void *))(*(void *)v13 + 8))(v13, a2))
    {
      sub_1CD5EFF98(a2, 1);
      *(unsigned char *)(*a2 + a2[1]++) = 32;
    }
    uint64_t v14 = *(void *)(a1 + 16);
    unsigned int v15 = *(unsigned __int16 *)(v14 + 9);
    int v16 = (v15 >> 8) & 3;
    if (v16)
    {
      if (v16 != 2)
      {
LABEL_16:
        int v17 = (v15 >> 10) & 3;
        if (v17 && (v17 != 2 || !(*(unsigned int (**)(uint64_t, void *))(*(void *)v14 + 16))(v14, a2))) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      if (((*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 8))(v14, a2) & 1) == 0)
      {
        uint64_t v14 = *(void *)(a1 + 16);
        unsigned int v15 = *(unsigned __int16 *)(v14 + 9);
        goto LABEL_16;
      }
    }
LABEL_19:
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 40;
LABEL_20:
    uint64_t result = sub_1CD5EFF98(a2, 1);
    char v12 = 42;
    goto LABEL_21;
  }
  sub_1CD5EFF98(a2, 3);
  uint64_t v7 = *a2 + a2[1];
  *(unsigned char *)(v7 + 2) = 60;
  *(_WORD *)uint64_t v7 = 25705;
  a2[1] += 3;
  uint64_t v9 = *(unsigned char **)(v4 + 24);
  uint64_t v8 = *(unsigned char **)(v4 + 32);
  size_t v10 = v8 - v9;
  if (v8 != v9)
  {
    sub_1CD5EFF98(a2, v8 - v9);
    memcpy((void *)(*a2 + a2[1]), v9, v10);
    a2[1] += v10;
  }
  uint64_t result = sub_1CD5EFF98(a2, 1);
  char v12 = 62;
LABEL_21:
  *(unsigned char *)(*a2 + a2[1]++) = v12;
  return result;
}

uint64_t sub_1CD5F720C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v4 + 8) == 10)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    if (*(unsigned char *)(v5 + 8) == 7)
    {
      size_t v6 = *(const char **)(v5 + 16);
      if (*(void *)(v5 + 24) - (void)v6 == 11)
      {
        uint64_t result = strncmp(v6, "objc_object", 0xBuLL);
        if (!result) {
          return result;
        }
      }
    }
  }
  unsigned int v8 = *(unsigned __int16 *)(v4 + 9);
  int v9 = (v8 >> 8) & 3;
  if (v9 == 2)
  {
    if ((*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 8))(v4, a2)) {
      goto LABEL_16;
    }
    uint64_t v4 = *(void *)(a1 + 16);
    unsigned int v8 = *(unsigned __int16 *)(v4 + 9);
  }
  else if (!v9)
  {
    goto LABEL_16;
  }
  int v10 = (v8 >> 10) & 3;
  if (v10 == 2)
  {
    if (!(*(unsigned int (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, a2)) {
      goto LABEL_13;
    }
LABEL_16:
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 41;
    goto LABEL_13;
  }
  if (!v10) {
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v11 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 40);

  return v11();
}

void sub_1CD5F7388()
{
}

uint64_t sub_1CD5F739C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  unsigned int v2 = *(unsigned __int8 *)(v1 + 9);
  if ((v2 & 0xC0) == 0x80) {
    return (**(uint64_t (***)(uint64_t))v1)(v1);
  }
  else {
    return v2 < 0x40;
  }
}

uint64_t sub_1CD5F73E0(uint64_t result, void *a2)
{
  if (!*(unsigned char *)(result + 28))
  {
    uint64_t v3 = result;
    *(unsigned char *)(result + 28) = 1;
    uint64_t result = sub_1CD5F7718(result);
    if (!v4)
    {
LABEL_3:
      *(unsigned char *)(v3 + 28) = 0;
      return result;
    }
    int v5 = result;
    uint64_t v6 = v4;
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 32))(v4, a2);
    if ((*(unsigned char *)(v6 + 10) & 3) == 0
      || (*(unsigned char *)(v6 + 10) & 3) == 2
      && (*(unsigned int (**)(uint64_t, void *))(*(void *)v6 + 8))(v6, a2))
    {
      sub_1CD5EFF98(a2, 1);
      *(unsigned char *)(*a2 + a2[1]++) = 32;
    }
    unsigned int v7 = *(unsigned __int16 *)(v6 + 9);
    int v8 = (v7 >> 8) & 3;
    if (!v8) {
      goto LABEL_15;
    }
    if (v8 == 2)
    {
      if ((*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 8))(v6, a2)) {
        goto LABEL_15;
      }
      unsigned int v7 = *(unsigned __int16 *)(v6 + 9);
    }
    int v9 = (v7 >> 10) & 3;
    if (v9 && (v9 != 2 || !(*(unsigned int (**)(uint64_t, void *))(*(void *)v6 + 16))(v6, a2)))
    {
LABEL_16:
      BOOL v10 = v5 == 0;
      if (v5) {
        size_t v11 = 2;
      }
      else {
        size_t v11 = 1;
      }
      if (v10) {
        char v12 = "&";
      }
      else {
        char v12 = "&&";
      }
      sub_1CD5EFF98(a2, v11);
      uint64_t result = (uint64_t)memcpy((void *)(*a2 + a2[1]), v12, v11);
      a2[1] += v11;
      goto LABEL_3;
    }
LABEL_15:
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 40;
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1CD5F75C8(uint64_t result, void *a2)
{
  if (!*(unsigned char *)(result + 28))
  {
    uint64_t v3 = result;
    *(unsigned char *)(result + 28) = 1;
    uint64_t result = sub_1CD5F7718(result);
    if (!v4)
    {
LABEL_12:
      *(unsigned char *)(v3 + 28) = 0;
      return result;
    }
    uint64_t v5 = v4;
    unsigned int v6 = *(unsigned __int16 *)(v4 + 9);
    int v7 = (v6 >> 8) & 3;
    if (v7 == 2)
    {
      if ((*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 8))(v4, a2)) {
        goto LABEL_13;
      }
      unsigned int v6 = *(unsigned __int16 *)(v5 + 9);
    }
    else if (!v7)
    {
      goto LABEL_13;
    }
    int v8 = (v6 >> 10) & 3;
    if (v8 != 2)
    {
      if (!v8) {
        goto LABEL_13;
      }
LABEL_11:
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 40))(v5, a2);
      goto LABEL_12;
    }
    if (!(*(unsigned int (**)(uint64_t, void *))(*(void *)v5 + 16))(v5, a2)) {
      goto LABEL_11;
    }
LABEL_13:
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 41;
    goto LABEL_11;
  }
  return result;
}

void sub_1CD5F7704()
{
}

uint64_t sub_1CD5F7718(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 16);
  int v7 = v10;
  int v8 = (uint64_t *)v10;
  int v9 = &v11;
  memset(v10, 0, sizeof(v10));
  for (uint64_t i = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
        *(unsigned char *)(i + 8) == 12;
        uint64_t i = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4))
  {
    uint64_t v4 = *(void *)(i + 16);
    if (*(_DWORD *)(i + 24) < (signed int)v1) {
      unsigned int v1 = *(_DWORD *)(i + 24);
    }
    uint64_t v5 = v8;
    if (v8 == v9)
    {
      sub_1CD5F7850((uint64_t)&v7, ((char *)v8 - (unsigned char *)v7) >> 2);
      uint64_t v5 = v8;
    }
    int v8 = v5 + 1;
    *uint64_t v5 = v4;
    if ((unint64_t)((char *)v8 - (unsigned char *)v7) >= 9
      && v4 == *(void *)((char *)v7 + (((((char *)v8 - (unsigned char *)v7) >> 1) - 4) & 0xFFFFFFFFFFFFFFF8)))
    {
      break;
    }
  }
  if (v7 != v10) {
    free(v7);
  }
  return v1;
}

char *sub_1CD5F7850(uint64_t a1, size_t size)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  size_t v6 = 8 * size;
  if (*(void *)a1 != a1 + 24)
  {
    uint64_t result = (char *)malloc_type_realloc(*(void **)a1, v6, 0x6004044C4A2DFuLL);
    int v8 = result;
    *(void *)a1 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_8:
    std::terminate();
  }
  uint64_t result = (char *)malloc_type_malloc(v6, 0x6004044C4A2DFuLL);
  if (!result) {
    goto LABEL_8;
  }
  int v8 = result;
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9 != *(void *)a1) {
    uint64_t result = (char *)memmove(result, *(const void **)a1, v9 - *(void *)a1);
  }
  *(void *)a1 = v8;
LABEL_3:
  *(void *)(a1 + 8) = &v8[v5 - (void)v4];
  *(void *)(a1 + 16) = &v8[8 * size];
  return result;
}

void *sub_1CD5F790C(uint64_t a1, void *a2)
{
  uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
  size_t v6 = *(unsigned char **)(a1 + 24);
  uint64_t v5 = *(unsigned char **)(a1 + 32);
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1CD5EFF98(a2, v5 - v6);
    uint64_t result = memcpy((void *)(*a2 + a2[1]), v6, v7);
    a2[1] += v7;
  }
  return result;
}

void sub_1CD5F79A0()
{
}

uint64_t sub_1CD5F79B4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  v2[1] = v4 + a2;
  if (v4 + a2 > (unint64_t)v2[2]) {
    operator new();
  }
  return v3 + v4;
}

unint64_t llvm::ms_demangle::Demangler::demangleSpecialTableSymbolNode(uint64_t a1, uint64_t a2, int a3)
{
  size_t v6 = (uint64_t *)(a1 + 16);
  unint64_t v7 = sub_1CD5F7B90((uint64_t *)(a1 + 16));
  uint64_t v9 = "";
  if (a3 != 15)
  {
    uint64_t v9 = "";
  }
  uint64_t v11 = "";
  if (a3 == 1)
  {
    uint64_t v11 = "";
  }
  if (a3 <= 14)
  {
    int v8 = v10;
    uint64_t v9 = v11;
  }
  *(void *)(v7 + 24) = v8;
  *(void *)(v7 + 32) = v9;
  uint64_t v12 = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a2, v7);
  unint64_t v13 = sub_1CD5F7D60(v6);
  *(void *)(v13 + 16) = v12;
  uint64_t v14 = *(char **)a2;
  if (*(void *)a2 == *(void *)(a2 + 8)
    || (*(void *)a2 = v14 + 1, *v14 - 56 <= 0xFFFFFFFD))
  {
    unint64_t v15 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    unint64_t v15 = v13;
    *(unsigned char *)(v13 + 32) = llvm::ms_demangle::Demangler::demangleQualifiers(a1, (char **)a2);
    uint64_t v18 = *(char **)a2;
    uint64_t v17 = *(void *)(a2 + 8);
    if (*(void *)a2 == v17 || *v18 != 64)
    {
      *(void *)(v15 + 24) = llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, a2);
    }
    else
    {
      *(void *)a2 = v18 + 1;
      *(void *)(a2 + 8) = v17;
    }
  }
  return v15;
}

unint64_t sub_1CD5F7B90(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 40;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 5;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)unint64_t result = &unk_1F261B338;
  *(void *)(result + 32) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleNameScopeChain(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  size_t v6 = (uint64_t *)(a1 + 16);
  unint64_t v7 = sub_1CD5FB5C0((uint64_t *)(a1 + 16));
  void *v7 = a3;
  unint64_t v8 = 1;
  if (sub_1CD5F8160((uint64_t)a2, "@", (uint64_t)""))
  {
LABEL_6:
    unint64_t v12 = sub_1CD5FB664(v6);
    *(void *)(v12 + 16) = sub_1CC6BE130(v6, v7, v8);
  }
  else
  {
    uint64_t v9 = v7;
    while (1)
    {
      BOOL v10 = sub_1CD5FB5C0(v6);
      v10[1] = v9;
      if (*a2 == a2[1]) {
        break;
      }
      unint64_t v7 = v10;
      uint64_t v11 = llvm::ms_demangle::Demangler::demangleNameScopePiece(a1, a2);
      if (*(unsigned char *)(a1 + 8)) {
        return 0;
      }
      void *v7 = v11;
      ++v8;
      uint64_t v9 = v7;
      if (sub_1CD5F8160((uint64_t)a2, "@", (uint64_t)"")) {
        goto LABEL_6;
      }
    }
    unint64_t v12 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return v12;
}

unint64_t sub_1CD5F7D60(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 40;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 28;
  *(void *)unint64_t result = &unk_1F261B630;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 0;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleQualifiers(uint64_t a1, char **a2)
{
  uint64_t v2 = *a2;
  if (*a2 != a2[1])
  {
    *a2 = v2 + 1;
    uint64_t v3 = *v2 - 65;
    if v3 < 0x14 && ((0xF000Fu >> v3)) {
      return word_1CFB1BD20[v3];
    }
  }
  uint64_t v4 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return v4;
}

unint64_t llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = llvm::ms_demangle::Demangler::demangleUnqualifiedTypeName(a1, a2, 1);
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  unint64_t result = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a2, v4);
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleLocalStaticGuard(uint64_t a1, void *a2, char a3)
{
  size_t v6 = (uint64_t *)(a1 + 16);
  unint64_t v7 = sub_1CD5F7FC4((uint64_t *)(a1 + 16));
  *(unsigned char *)(v7 + 24) = a3;
  uint64_t v8 = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a2, v7);
  unint64_t v9 = sub_1CD5F8094(v6);
  *(void *)(v9 + 16) = v8;
  if (sub_1CD5F8160((uint64_t)a2, "4IA", (uint64_t)""))
  {
    char v10 = 0;
  }
  else
  {
    char v12 = sub_1CD5F8160((uint64_t)a2, "5", (uint64_t)"");
    char v10 = 1;
    if ((v12 & 1) == 0)
    {
      unint64_t v9 = 0;
      *(unsigned char *)(a1 + 8) = 1;
      return v9;
    }
  }
  *(unsigned char *)(v9 + 24) = v10;
  if (*a2 != a2[1])
  {
    int v13 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
    if (v14) {
      *(unsigned char *)(a1 + 8) = 1;
    }
    *(_DWORD *)(v7 + 28) = v13;
  }
  return v9;
}

unint64_t sub_1CD5F7FC4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 32;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 7;
  *(void *)(result + 16) = 0;
  *(void *)unint64_t result = &unk_1F261B3B0;
  *(unsigned char *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

unint64_t sub_1CD5F8094(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 32;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 25;
  *(void *)(result + 16) = 0;
  *(void *)unint64_t result = &unk_1F261B658;
  *(unsigned char *)(result + 24) = 0;
  return result;
}

uint64_t sub_1CD5F8160(uint64_t a1, char *__s1, uint64_t a3)
{
  size_t v3 = a3 - (void)__s1;
  unint64_t v4 = *(const char **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  size_t v6 = v5 - *(void *)a1;
  if (a3 - (uint64_t)__s1 > v6 || strncmp(__s1, v4, v3)) {
    return 0;
  }
  if (v6 >= v3) {
    size_t v9 = v3;
  }
  else {
    size_t v9 = v6;
  }
  *(void *)a1 = &v4[v9];
  *(void *)(a1 + 8) = v5;
  return 1;
}

unint64_t llvm::ms_demangle::Demangler::demangleUntypedVariable(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_1CD5F7B90(a2);
  *(void *)(v10 + 24) = a4;
  *(void *)(v10 + 32) = a5;
  uint64_t v11 = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a3, v10);
  unint64_t v12 = sub_1CD5F826C(a2);
  *(void *)(v12 + 16) = v11;
  if ((sub_1CD5F8160(a3, "8", (uint64_t)"") & 1) == 0)
  {
    unint64_t v12 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return v12;
}

unint64_t sub_1CD5F826C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 40;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 27;
  *(void *)(result + 16) = 0;
  *(void *)unint64_t result = &unk_1F261B6A8;
  *(unsigned char *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleRttiBaseClassDescriptorNode(uint64_t a1, uint64_t *a2, void *a3)
{
  size_t v6 = (_DWORD *)sub_1CD5F8460(a2);
  int v7 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a3);
  if (v8) {
    *(unsigned char *)(a1 + 8) = 1;
  }
  v6[6] = v7;
  uint64_t v9 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a3);
  if (v9 < 0) {
    *(unsigned char *)(a1 + 8) = 1;
  }
  int v11 = -(int)v9;
  if (!v10) {
    int v11 = v9;
  }
  v6[7] = v11;
  int v12 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a3);
  if (v13) {
    *(unsigned char *)(a1 + 8) = 1;
  }
  v6[8] = v12;
  int v14 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a3);
  if (v15)
  {
    unint64_t v16 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    v6[9] = v14;
  }
  else
  {
    int v18 = *(unsigned __int8 *)(a1 + 8);
    v6[9] = v14;
    if (v18)
    {
      return 0;
    }
    else
    {
      unint64_t v16 = sub_1CD5F826C(a2);
      *(void *)(v16 + 16) = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a3, v6);
      long long v20 = (unsigned char *)*a3;
      uint64_t v19 = a3[1];
      if (*a3 != v19 && *v20 == 56)
      {
        *a3 = v20 + 1;
        a3[1] = v19;
      }
    }
  }
  return v16;
}

unint64_t sub_1CD5F8460(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 40;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 24;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)unint64_t result = &unk_1F261B5E0;
  *(void *)(result + 32) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleInitFiniStub(uint64_t a1, uint64_t *a2, char a3)
{
  size_t v6 = (uint64_t *)(a1 + 16);
  unint64_t v7 = sub_1CD5F8680((uint64_t *)(a1 + 16));
  *(unsigned char *)(v7 + 40) = a3;
  uint64_t v9 = (unsigned char *)*a2;
  uint64_t v8 = a2[1];
  if (*a2 == v8 || *v9 != 63)
  {
    int v10 = 0;
  }
  else
  {
    *a2 = (uint64_t)(v9 + 1);
    a2[1] = v8;
    int v10 = 1;
  }
  uint64_t v11 = llvm::ms_demangle::Demangler::demangleDeclarator(a1, a2);
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  unint64_t v12 = v11;
  if (*(_DWORD *)(v11 + 8) == 27)
  {
    *(void *)(v7 + 24) = v11;
    int v14 = (unsigned char *)*a2;
    char v15 = (unsigned char *)a2[1];
    uint64_t v16 = *a2 + 1;
    char v17 = 1;
    while (v14 != v15 && *v14 == 64)
    {
      ++v14;
      *a2 = v16;
      a2[1] = (uint64_t)v15;
      char v18 = v10 & v17;
      ++v16;
      char v17 = 0;
      if ((v18 & 1) == 0)
      {
        unint64_t v12 = llvm::ms_demangle::Demangler::demangleFunctionEncoding(a1, a2);
        if (!v12) {
          return v12;
        }
        goto LABEL_18;
      }
    }
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_16:
    unint64_t v12 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    return v12;
  }
  *(void *)(v7 + 32) = *(void *)(v11 + 16);
LABEL_18:
  unint64_t v19 = sub_1CD5FB664(v6);
  unint64_t v20 = sub_1CD5FCA00(v6);
  *(void *)(v19 + 16) = v20;
  *(void *)(v20 + 24) = 1;
  uint64_t v21 = sub_1CD5FCAC8(v6, 1uLL);
  *(void *)(*(void *)(v19 + 16) + 16) = v21;
  *(void *)uint64_t v21 = v7;
  *(void *)(v12 + 16) = v19;
  return v12;
}

unint64_t sub_1CD5F8680(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 48;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 10;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)unint64_t result = &unk_1F261B310;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 0;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleDeclarator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = llvm::ms_demangle::Demangler::demangleFullyQualifiedSymbolName(a1, a2);
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v6 = v4;
  uint64_t result = llvm::ms_demangle::Demangler::demangleEncodedSymbol(a1, (char **)a2, v4);
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  *(void *)(result + 16) = v6;
  uint64_t v7 = *(void *)(*(void *)(*(void *)(v6 + 16) + 16) + 8 * *(void *)(*(void *)(v6 + 16) + 24) - 8);
  if (*(_DWORD *)(v7 + 8) == 9 && !*(void *)(v7 + 24))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleFunctionEncoding(uint64_t a1, void *a2)
{
  int v4 = sub_1CD5F8160((uint64_t)a2, "$$J0", (uint64_t)"");
  if (*a2 == a2[1])
  {
    unint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 1;
    return result;
  }
  if (v4) {
    int v6 = 128;
  }
  else {
    int v6 = 0;
  }
  unsigned int v7 = llvm::ms_demangle::Demangler::demangleFunctionClass(a1, a2) | v6;
  if (v7 >= 0x800)
  {
    unint64_t v8 = sub_1CD5FB1B8((uint64_t *)(a1 + 16));
LABEL_10:
    uint64_t v9 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
    if (v9 < 0) {
      *(unsigned char *)(a1 + 8) = 1;
    }
    int v11 = -(int)v9;
    if (!v10) {
      int v11 = v9;
    }
    *(_DWORD *)(v8 + 60) = v11;
    goto LABEL_15;
  }
  if ((v7 & 0x200) != 0)
  {
    unint64_t v8 = sub_1CD5FB1B8((uint64_t *)(a1 + 16));
    if ((v7 & 0x400) != 0)
    {
      uint64_t v13 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
      if (v13 < 0) {
        *(unsigned char *)(a1 + 8) = 1;
      }
      int v15 = -(int)v13;
      if (!v14) {
        int v15 = v13;
      }
      *(_DWORD *)(v8 + 64) = v15;
      uint64_t v16 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
      if (v16 < 0) {
        *(unsigned char *)(a1 + 8) = 1;
      }
      int v18 = -(int)v16;
      if (!v17) {
        int v18 = v16;
      }
      *(_DWORD *)(v8 + 68) = v18;
    }
    uint64_t v19 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
    if (v19 < 0) {
      *(unsigned char *)(a1 + 8) = 1;
    }
    int v21 = -(int)v19;
    if (!v20) {
      int v21 = v19;
    }
    *(_DWORD *)(v8 + 72) = v21;
    goto LABEL_10;
  }
  unint64_t v8 = 0;
LABEL_15:
  if ((v7 & 0x100) != 0) {
    unint64_t v12 = sub_1CD5FBFA8((uint64_t *)(a1 + 16));
  }
  else {
    unint64_t v12 = llvm::ms_demangle::Demangler::demangleFunctionType(a1, (uint64_t)a2, (v7 & 0x18) == 0);
  }
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  if (v8)
  {
    *(_DWORD *)(v8 + 8) = *(_DWORD *)(v12 + 8);
    *(unsigned char *)(v8 + 12) = *(unsigned char *)(v12 + 12);
    long long v22 = *(_OWORD *)(v12 + 16);
    long long v23 = *(_OWORD *)(v12 + 32);
    *(_OWORD *)(v8 + 41) = *(_OWORD *)(v12 + 41);
    *(_OWORD *)(v8 + 16) = v22;
    *(_OWORD *)(v8 + 32) = v23;
  }
  else
  {
    unint64_t v8 = v12;
  }
  *(_WORD *)(v8 + 22) = v7;
  unint64_t result = sub_1CD5FB028((uint64_t *)(a1 + 16));
  *(void *)(result + 24) = v8;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleSpecialIntrinsic(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const char **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = v3 - *(void *)a2;
  if (v4 < 3) {
    return 0;
  }
  uint64_t v9 = 3;
  if (!strncmp("?_7", *(const char **)a2, 3uLL))
  {
    int v10 = 1;
    goto LABEL_27;
  }
  uint64_t v9 = 3;
  if (!strncmp("?_8", v2, 3uLL))
  {
    int v10 = 2;
    goto LABEL_27;
  }
  if (!strncmp("?_9", v2, 3uLL))
  {
    *(void *)a2 = v2 + 3;
    *(void *)(a2 + 8) = v3;
    return llvm::ms_demangle::Demangler::demangleVcallThunkNode(a1, a2);
  }
  if (!strncmp("?_A", v2, 3uLL)) {
    goto LABEL_14;
  }
  if (!strncmp("?_B", v2, 3uLL))
  {
    *(void *)a2 = v2 + 3;
    *(void *)(a2 + 8) = v3;
    uint64_t v11 = a1;
    unint64_t v12 = (void *)a2;
    char v13 = 0;
LABEL_35:
    return llvm::ms_demangle::Demangler::demangleLocalStaticGuard(v11, v12, v13);
  }
  if (!strncmp("?_C", v2, 3uLL))
  {
    *(void *)a2 = v2 + 3;
    *(void *)(a2 + 8) = v3;
    return llvm::ms_demangle::Demangler::demangleStringLiteral(a1, a2);
  }
  if (!strncmp("?_P", v2, 3uLL))
  {
LABEL_14:
    *(void *)a2 = v2 + 3;
    *(void *)(a2 + 8) = v3;
LABEL_15:
    unint64_t v5 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    return v5;
  }
  if (v4 < 4)
  {
    uint64_t v9 = 3;
    if (!strncmp("?_S", v2, 3uLL))
    {
LABEL_13:
      int v10 = 16;
LABEL_27:
      *(void *)a2 = &v2[v9];
      *(void *)(a2 + 8) = v3;
      return llvm::ms_demangle::Demangler::demangleSpecialTableSymbolNode(a1, a2, v10);
    }
    return 0;
  }
  if (!strncmp("?_R0", v2, 4uLL))
  {
    *(void *)a2 = v2 + 4;
    *(void *)(a2 + 8) = v3;
    uint64_t v14 = llvm::ms_demangle::Demangler::demangleType(a1, a2, 2);
    if (!*(unsigned char *)(a1 + 8))
    {
      uint64_t v15 = v14;
      if (sub_1CD5F8160(a2, "@8", (uint64_t)""))
      {
        if (*(void *)a2 == *(void *)(a2 + 8))
        {
          uint64_t v16 = (uint64_t *)(a1 + 16);
          unint64_t v5 = sub_1CD5F826C(v16);
          *(void *)(v5 + 32) = v15;
          return v5;
        }
      }
    }
    goto LABEL_15;
  }
  if (!strncmp("?_R1", v2, 4uLL))
  {
    *(void *)a2 = v2 + 4;
    *(void *)(a2 + 8) = v3;
    return llvm::ms_demangle::Demangler::demangleRttiBaseClassDescriptorNode(a1, (uint64_t *)(a1 + 16), (void *)a2);
  }
  if (!strncmp("?_R2", v2, 4uLL))
  {
    *(void *)a2 = v2 + 4;
    *(void *)(a2 + 8) = v3;
    char v17 = (uint64_t *)(a1 + 16);
    uint64_t v19 = "";
LABEL_49:
    return llvm::ms_demangle::Demangler::demangleUntypedVariable(a1, v17, a2, (uint64_t)v18, (uint64_t)v19);
  }
  if (!strncmp("?_R3", v2, 4uLL))
  {
    *(void *)a2 = v2 + 4;
    *(void *)(a2 + 8) = v3;
    char v17 = (uint64_t *)(a1 + 16);
    uint64_t v19 = "";
    goto LABEL_49;
  }
  uint64_t v9 = 4;
  if (!strncmp("?_R4", v2, 4uLL))
  {
    int v10 = 15;
    goto LABEL_27;
  }
  uint64_t v9 = 3;
  if (!strncmp("?_S", v2, 3uLL)) {
    goto LABEL_13;
  }
  if (!strncmp("?__E", v2, 4uLL))
  {
    *(void *)a2 = v2 + 4;
    *(void *)(a2 + 8) = v3;
    uint64_t v20 = a1;
    int v21 = (uint64_t *)a2;
    char v22 = 0;
  }
  else
  {
    if (strncmp("?__F", v2, 4uLL))
    {
      if (strncmp("?__J", v2, 4uLL)) {
        return 0;
      }
      *(void *)a2 = v2 + 4;
      *(void *)(a2 + 8) = v3;
      uint64_t v11 = a1;
      unint64_t v12 = (void *)a2;
      char v13 = 1;
      goto LABEL_35;
    }
    *(void *)a2 = v2 + 4;
    *(void *)(a2 + 8) = v3;
    uint64_t v20 = a1;
    int v21 = (uint64_t *)a2;
    char v22 = 1;
  }

  return llvm::ms_demangle::Demangler::demangleInitFiniStub(v20, v21, v22);
}

unint64_t llvm::ms_demangle::Demangler::demangleStringLiteral(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v47 = -1;
  int v48 = 1;
  unint64_t v4 = (uint64_t **)(a1 + 16);
  unint64_t v5 = sub_1CD5FB2FC((uint64_t *)(a1 + 16));
  int v6 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
  if (!v6) {
    std::terminate();
  }
  unsigned int v7 = v6;
  std::string::size_type v45 = v6;
  long long v46 = xmmword_1CFB1BC20;
  if ((sub_1CD5F8160(a2, "@_", (uint64_t)"") & 1) == 0) {
    goto LABEL_6;
  }
  unint64_t v8 = *(char **)a2;
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    goto LABEL_6;
  }
  *(void *)a2 = v8 + 1;
  int v9 = *v8;
  if (v9 == 48)
  {
    int v11 = 0;
  }
  else
  {
    if (v9 != 49) {
      goto LABEL_6;
    }
    int v11 = 1;
  }
  unint64_t v12 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
  unint64_t v14 = 1;
  if (v11) {
    unint64_t v14 = 2;
  }
  if (!*(unsigned char *)(a1 + 8) && !v13)
  {
    unint64_t v15 = v12;
    if (v12 >= v14)
    {
      uint64_t v16 = *(char **)a2;
      char v17 = *(char **)(a2 + 8);
      unint64_t v18 = (unint64_t)&v17[-*(void *)a2];
      if (v17 != *(char **)a2)
      {
        uint64_t v19 = (char *)memchr(*(void **)a2, 64, (size_t)&v17[-*(void *)a2]);
        if (v19)
        {
          uint64_t v20 = (char *)(v19 - v16);
          if (v19 - v16 != -1)
          {
            uint64_t v21 = v18 >= (unint64_t)(v20 + 1) ? (uint64_t)(v20 + 1) : v18;
            char v22 = &v16[v21];
            *(void *)a2 = v22;
            *(void *)(a2 + 8) = v17;
            if (v22 != v17)
            {
              if (v11)
              {
                *(_DWORD *)(v5 + 44) = 3;
                if (v15 >= 0x41) {
                  *(unsigned char *)(v5 + 40) = 1;
                }
                unint64_t v23 = v15 - 2;
                while (1)
                {
                  int v25 = *(char **)a2;
                  uint64_t v24 = *(void *)(a2 + 8);
                  if (*(void *)a2 != v24 && *v25 == 64) {
                    break;
                  }
                  if ((unint64_t)(v24 - (void)v25) >= 2)
                  {
                    int v26 = llvm::ms_demangle::Demangler::demangleWcharLiteral(a1, a2);
                    if (v23 || *(unsigned char *)(v5 + 40)) {
                      sub_1CC6BD96C((uint64_t *)&v45, v26);
                    }
                    v23 -= 2;
                    if (!*(unsigned char *)(a1 + 8)) {
                      continue;
                    }
                  }
                  unsigned int v7 = v45;
                  goto LABEL_6;
                }
                *(void *)a2 = v25 + 1;
                *(void *)(a2 + 8) = v24;
              }
              else
              {
                if (*v22 != 64)
                {
                  uint64_t v27 = 0;
                  while (v27 != 128)
                  {
                    v49[v27] = llvm::ms_demangle::Demangler::demangleCharLiteral(a1, (unsigned __int8 **)a2);
                    char v22 = *(char **)a2;
                    char v17 = *(char **)(a2 + 8);
                    if (*(char **)a2 == v17) {
                      break;
                    }
                    ++v27;
                    if (*v22 == 64)
                    {
                      unsigned int v28 = v27;
                      goto LABEL_43;
                    }
                  }
                  goto LABEL_6;
                }
                unsigned int v28 = 0;
                LODWORD(v27) = 0;
LABEL_43:
                if (v17 != v22) {
                  ++v22;
                }
                *(void *)a2 = v22;
                *(void *)(a2 + 8) = v17;
                if (v15 > v27) {
                  *(unsigned char *)(v5 + 40) = 1;
                }
                unsigned int v29 = sub_1CC6BDC44(v49, v27, v15);
                if (v29 == 1)
                {
                  int v30 = 0;
                }
                else if (v29 == 4)
                {
                  int v30 = 2;
                }
                else
                {
                  int v30 = 1;
                }
                *(_DWORD *)(v5 + 44) = v30;
                if (v29 <= v27)
                {
                  uint64_t v31 = 0;
                  unsigned int v32 = v27;
                  uint64_t v33 = v29;
                  if (v28 / v29 <= 1) {
                    uint64_t v34 = 1;
                  }
                  else {
                    uint64_t v34 = v28 / v29;
                  }
                  uint64_t v35 = 8 * v29;
                  uint64_t v36 = v49;
                  unint64_t v37 = v32 / v29;
                  do
                  {
                    uint64_t v38 = 0;
                    int v39 = 0;
                    int v40 = v36;
                    do
                    {
                      int v41 = *v40++;
                      v39 |= v41 << v38;
                      v38 += 8;
                    }
                    while (v35 != v38);
                    if (++v31 < v37 || *(unsigned char *)(v5 + 40)) {
                      sub_1CC6BD96C((uint64_t *)&v45, v39);
                    }
                    v36 += v33;
                  }
                  while (v31 != v34);
                }
              }
              uint64_t v42 = v45;
              size_t v43 = v46;
              uint64_t v44 = (char *)sub_1CD5F79B4(v4, v46);
              memcpy(v44, v42, v43);
              *(void *)(v5 + 24) = v44;
              *(void *)(v5 + 32) = &v44[v43];
              unsigned int v7 = v45;
              goto LABEL_7;
            }
          }
        }
      }
    }
  }
LABEL_6:
  unint64_t v5 = 0;
  *(unsigned char *)(a1 + 8) = 1;
LABEL_7:
  free(v7);
  return v5;
}

unint64_t llvm::ms_demangle::Demangler::demangleVcallThunkNode(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 16);
  unint64_t v5 = sub_1CD5FB028((uint64_t *)(a1 + 16));
  unint64_t v6 = sub_1CD5FB0F0(v4);
  unint64_t v7 = sub_1CD5FB1B8(v4);
  *(void *)(v5 + 24) = v7;
  *(_WORD *)(v7 + 22) = 256;
  *(void *)(v5 + 16) = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a2, v6);
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  int v9 = sub_1CD5F8160(a2, "$B", (uint64_t)"");
  *(unsigned char *)(a1 + 8) = v9 ^ 1;
  if ((v9 ^ 1)) {
    return 0;
  }
  uint64_t v10 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
  uint64_t v11 = v10;
  if (v12)
  {
    unint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 1;
    *(void *)(v6 + 24) = v11;
    return result;
  }
  int v13 = *(unsigned __int8 *)(a1 + 8);
  *(void *)(v6 + 24) = v10;
  if (v13) {
    return 0;
  }
  unint64_t v15 = *(char **)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  if (*(void *)a2 != v14 && *v15 == 65)
  {
    *(void *)a2 = v15 + 1;
    *(void *)(a2 + 8) = v14;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(*(void *)(v5 + 24) + 20) = llvm::ms_demangle::Demangler::demangleCallingConvention(a1, (char **)a2);
    if (*(unsigned char *)(a1 + 8)) {
      return 0;
    }
    else {
      return v5;
    }
  }
  else
  {
    unint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleType(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 2)
  {
    uint64_t v16 = *(char **)a2;
    uint64_t v15 = *(void *)(a2 + 8);
    if (*(void *)a2 == v15 || *v16 != 63) {
      goto LABEL_3;
    }
    *(void *)a2 = v16 + 1;
    *(void *)(a2 + 8) = v15;
  }
  else if (a3 != 1)
  {
LABEL_3:
    char v5 = 0;
    goto LABEL_4;
  }
  char v5 = llvm::ms_demangle::Demangler::demangleQualifiers(a1, (char **)a2);
LABEL_4:
  unint64_t v7 = *(char **)a2;
  unint64_t v6 = *(unsigned char **)(a2 + 8);
  if (*(unsigned char **)a2 == v6) {
    goto LABEL_31;
  }
  int v8 = *v7;
  if ((v8 & 0xFFFFFFFC) == 0x54)
  {
    uint64_t result = llvm::ms_demangle::Demangler::demangleClassType(a1, a2);
    goto LABEL_37;
  }
  unint64_t v9 = v6 - v7;
  if ((unint64_t)(v6 - v7) >= 3 && !strncmp("$$Q", v7, 3uLL) || (v8 - 80) < 4 || v8 == 65)
  {
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v10 = v7 + 1;
    if ((*v7 & 0xFC) != 0x50) {
      goto LABEL_36;
    }
    if (v10 == v6) {
      goto LABEL_31;
    }
    if (((char)*v10 & 0x80000000) == 0)
    {
      int v11 = *v10;
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * *v10 + 60) & 0x400) != 0)
      {
        if (v11 != 54)
        {
          if (v11 == 56) {
            goto LABEL_24;
          }
          goto LABEL_31;
        }
LABEL_36:
        uint64_t result = llvm::ms_demangle::Demangler::demanglePointerType(a1, (void *)a2);
        goto LABEL_37;
      }
      if (v11 == 69) {
        uint64_t v10 = v7 + 2;
      }
    }
    if (v10 == v6) {
      goto LABEL_31;
    }
    char v12 = v10 + 1;
    if (*v10 != 73) {
      char v12 = v10;
    }
    if (v12 == v6) {
      goto LABEL_31;
    }
    if (*v12 == 70) {
      ++v12;
    }
    if (v12 == v6) {
      goto LABEL_31;
    }
    int v13 = (char)*v12;
    if ((v13 - 65) >= 4)
    {
      if ((v13 - 81) < 4)
      {
LABEL_24:
        uint64_t result = llvm::ms_demangle::Demangler::demangleMemberPointerType(a1, (char **)a2);
        goto LABEL_37;
      }
LABEL_31:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 8) = 1;
      return result;
    }
    goto LABEL_36;
  }
  if (v8 == 89)
  {
    uint64_t result = llvm::ms_demangle::Demangler::demangleArrayType(a1, (char **)a2);
    goto LABEL_37;
  }
  if (v9 >= 6)
  {
    if (!strncmp("$$A8@@", v7, 6uLL)) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if (v9 >= 4)
  {
LABEL_45:
    if (strncmp("$$A6", v7, 4uLL)) {
      goto LABEL_48;
    }
LABEL_46:
    if (sub_1CD5F8160(a2, "$$A8@@", (uint64_t)""))
    {
      uint64_t v17 = a1;
      uint64_t v18 = a2;
      uint64_t v19 = 1;
    }
    else
    {
      sub_1CD5F8160(a2, "$$A6", (uint64_t)"");
      uint64_t v17 = a1;
      uint64_t v18 = a2;
      uint64_t v19 = 0;
    }
    uint64_t result = llvm::ms_demangle::Demangler::demangleFunctionType(v17, v18, v19);
    goto LABEL_37;
  }
LABEL_48:
  if (v8 == 63) {
    uint64_t result = llvm::ms_demangle::Demangler::demangleCustomType(a1, (uint64_t *)a2);
  }
  else {
    uint64_t result = llvm::ms_demangle::Demangler::demanglePrimitiveType(a1, (uint64_t *)a2);
  }
LABEL_37:
  if (result)
  {
    if (!*(unsigned char *)(a1 + 8)) {
      *(unsigned char *)(result + 12) |= v5;
    }
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleFunctionIdentifierCode(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3 != *a2) {
    ++v4;
  }
  *a2 = v4;
  if (v4 == v3)
  {
    *(unsigned char *)(a1 + 8) = 1;
    return 0;
  }
  else
  {
    if (sub_1CD5F8160((uint64_t)a2, "__", (uint64_t)""))
    {
      uint64_t v7 = a1;
      int v8 = a2;
      int v9 = 2;
    }
    else if (sub_1CD5F8160((uint64_t)a2, "_", (uint64_t)""))
    {
      uint64_t v7 = a1;
      int v8 = a2;
      int v9 = 1;
    }
    else
    {
      uint64_t v7 = a1;
      int v8 = a2;
      int v9 = 0;
    }
    return llvm::ms_demangle::Demangler::demangleFunctionIdentifierCode(v7, v8, v9);
  }
}

unint64_t llvm::ms_demangle::Demangler::demangleFunctionIdentifierCode(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3 = (char *)*a2;
  if (*a2 == a2[1])
  {
    unint64_t v4 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    return v4;
  }
  if (a3 == 2)
  {
    *a2 = (uint64_t)(v3 + 1);
    uint64_t v11 = *v3;
    if (v11 != 75)
    {
      unint64_t v6 = (uint64_t *)(a1 + 16);
      if ((v11 - 48) >= 0xA && (v11 - 65) >= 0x1A)
      {
        char v17 = 0;
        *(unsigned char *)(a1 + 8) = 1;
      }
      else
      {
        uint64_t v16 = -55;
        if ((v11 - 48) < 0xA) {
          uint64_t v16 = -48;
        }
        char v17 = byte_1CFB1BCC8[v16 + v11];
      }
      char v22 = v17;
      uint64_t v14 = &v22;
      return sub_1CD5F9BD8(v6, v14);
    }
    return llvm::ms_demangle::Demangler::demangleLiteralOperatorIdentifier(a1, a2);
  }
  else
  {
    if (a3 == 1)
    {
      unint64_t v6 = (uint64_t *)(a1 + 16);
      *a2 = (uint64_t)(v3 + 1);
      uint64_t v7 = *v3;
      if ((v7 - 48) >= 0xA && (v7 - 65) >= 0x1A)
      {
        char v10 = 0;
        *(unsigned char *)(a1 + 8) = 1;
      }
      else
      {
        uint64_t v9 = -55;
        if ((v7 - 48) < 0xA) {
          uint64_t v9 = -48;
        }
        char v10 = asc_1CFB1BCA4[v9 + v7];
      }
      char v23 = v10;
      uint64_t v14 = &v23;
      return sub_1CD5F9BD8(v6, v14);
    }
    *a2 = (uint64_t)(v3 + 1);
    int v12 = *v3;
    if ((v12 - 48) < 2)
    {
      BOOL v13 = v12 == 49;
      unint64_t v4 = sub_1CD5F9844((uint64_t *)(a1 + 16));
      *(unsigned char *)(v4 + 32) = v13;
      return v4;
    }
    if (v12 != 66)
    {
      unint64_t v6 = (uint64_t *)(a1 + 16);
      if ((v12 - 48) >= 0xA && (v12 - 65) >= 0x1Au)
      {
        char v21 = 0;
        *(unsigned char *)(a1 + 8) = 1;
      }
      else
      {
        uint64_t v20 = -55;
        if ((v12 - 48) < 0xAu) {
          uint64_t v20 = -48;
        }
        char v21 = byte_1CFB1BC80[v20 + v12];
      }
      char v24 = v21;
      uint64_t v14 = &v24;
      return sub_1CD5F9BD8(v6, v14);
    }
    uint64_t v18 = (uint64_t *)(a1 + 16);
    return sub_1CD5F9910(v18);
  }
}

unint64_t sub_1CD5F9844(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 40;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 11;
  *(void *)unint64_t result = &unk_1F261B400;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 0;
  return result;
}

unint64_t sub_1CD5F9910(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 32;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 9;
  *(void *)unint64_t result = &unk_1F261B3D8;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleLiteralOperatorIdentifier(uint64_t a1, uint64_t *a2)
{
  unint64_t result = sub_1CD5F9A70((uint64_t *)(a1 + 16));
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = v6 - *a2;
  if (v6 == *a2) {
    goto LABEL_7;
  }
  unint64_t v8 = 0;
  uint64_t v9 = v7 <= 1 ? 1 : v6 - *a2;
  while (*(unsigned char *)(v5 + v8) != 64)
  {
    if (v9 == ++v8) {
      goto LABEL_7;
    }
  }
  if (!v8)
  {
LABEL_7:
    uint64_t v10 = 0;
    uint64_t v5 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    if (v7 >= v8) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = v6 - *a2;
    }
    uint64_t v10 = v5 + v11;
    if (v7 >= v8 + 1) {
      unint64_t v7 = v8 + 1;
    }
    *a2 = v5 + v7;
    a2[1] = v6;
  }
  *(void *)(result + 24) = v5;
  *(void *)(result + 32) = v10;
  return result;
}

unint64_t sub_1CD5F9A70(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 40;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 12;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)unint64_t result = &unk_1F261B388;
  *(void *)(result + 32) = 0;
  return result;
}

char *llvm::ms_demangle::Demangler::demangleSimpleString(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v4 = *(char **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v5 = v3 - *(void *)a2;
  if (v3 == *(void *)a2) {
    goto LABEL_7;
  }
  unint64_t v6 = 0;
  uint64_t v7 = v5 <= 1 ? 1 : v3 - *(void *)a2;
  while (v4[v6] != 64)
  {
    if (v7 == ++v6) {
      goto LABEL_7;
    }
  }
  if (!v6)
  {
LABEL_7:
    unint64_t v4 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    if (v5 >= v6) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = v3 - *(void *)a2;
    }
    if (v5 >= v6 + 1) {
      unint64_t v5 = v6 + 1;
    }
    *(void *)a2 = &v4[v5];
    *(void *)(a2 + 8) = v3;
    if (a3) {
      llvm::ms_demangle::Demangler::memorizeString(a1, v4, (uint64_t)&v4[v9]);
    }
  }
  return v4;
}

unint64_t sub_1CD5F9BD8(uint64_t *a1, char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  uint64_t v4 = v3 + *(void *)*a1;
  unint64_t result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = v3 - v4 + result + 32;
  *(void *)(v2 + 8) = v6;
  if (v6 > *(void *)(v2 + 16)) {
    operator new();
  }
  char v7 = *a2;
  *(_DWORD *)(result + 8) = 8;
  *(void *)(result + 16) = 0;
  *(void *)unint64_t result = &unk_1F261B360;
  *(unsigned char *)(result + 24) = v7;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleEncodedSymbol(uint64_t a1, char **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  if (*a2 == a2[1])
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else if ((*v4 - 48) > 4)
  {
    uint64_t result = llvm::ms_demangle::Demangler::demangleFunctionEncoding(a1, a2);
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) + 16) + 8 * *(void *)(*(void *)(a3 + 16) + 24) - 8);
    if (*(_DWORD *)(v8 + 8) == 9 && result != 0) {
      *(void *)(v8 + 24) = *(void *)(*(void *)(result + 24) + 32);
    }
  }
  else
  {
    *a2 = v4 + 1;
    char v6 = *v4 - 47;
    return llvm::ms_demangle::Demangler::demangleVariableEncoding(a1, a2, v6);
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleVariableEncoding(uint64_t a1, char **a2, char a3)
{
  unint64_t v6 = sub_1CD5F826C((uint64_t *)(a1 + 16));
  uint64_t v7 = llvm::ms_demangle::Demangler::demangleType(a1, (uint64_t)a2, 0);
  *(void *)(v6 + 32) = v7;
  *(unsigned char *)(v6 + 24) = a3;
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v9 = v7;
  if (*(_DWORD *)(v7 + 8) == 14)
  {
    char v10 = *(unsigned char *)(v7 + 12);
    *(unsigned char *)(v7 + 12) = llvm::ms_demangle::Demangler::demanglePointerExtQualifiers(v7, (uint64_t)a2) | v10;
    char v11 = llvm::ms_demangle::Demangler::demangleQualifiers(a1, a2);
    if (*(void *)(v9 + 24)) {
      llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, a2);
    }
    *(unsigned char *)(*(void *)(v9 + 32) + 12) |= v11;
  }
  else
  {
    *(unsigned char *)(*(void *)(v6 + 32) + 12) = llvm::ms_demangle::Demangler::demangleQualifiers(a1, a2);
  }
  return v6;
}

uint64_t llvm::ms_demangle::Demangler::demangleFullyQualifiedSymbolName(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = llvm::ms_demangle::Demangler::demangleUnqualifiedSymbolName(a1, a2, 2u);
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v6 = v4;
  uint64_t result = llvm::ms_demangle::Demangler::demangleNameScopeChain(a1, a2, v4);
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  if (*(_DWORD *)(v6 + 8) == 11)
  {
    uint64_t v7 = *(void *)(result + 16);
    unint64_t v8 = *(void *)(v7 + 24);
    if (v8 > 1)
    {
      *(void *)(v6 + 24) = *(void *)(*(void *)(v7 + 16) + 8 * v8 - 16);
    }
    else
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 8) = 1;
    }
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleMD5Name(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = v4 - *a2;
  if (v5 < 4
    || ((v7 = (char *)memchr((void *)(v3 + 3), 64, v5 - 3), unint64_t v8 = &v7[-v3], v7) ? (v9 = v8 + 1 == 0) : (v9 = 1), v9))
  {
    unint64_t v10 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    if (v5 >= (unint64_t)(v8 + 1)) {
      unint64_t v12 = (unint64_t)(v8 + 1);
    }
    else {
      unint64_t v12 = v5;
    }
    *a2 = v3 + v12;
    a2[1] = v4;
    sub_1CD5F8160((uint64_t)a2, "??_R4@", (uint64_t)"");
    uint64_t v13 = *a2;
    uint64_t v14 = (uint64_t *)(a1 + 16);
    int v15 = 1;
    unint64_t v10 = sub_1CD5F9FC8(v14, &v15);
    *(void *)(v10 + 16) = sub_1CC6BD7C8(v14, v3, v13);
  }
  return v10;
}

unint64_t sub_1CD5F9FC8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  uint64_t v4 = v3 + *(void *)*a1;
  unint64_t result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = v3 - v4 + result + 24;
  *(void *)(v2 + 8) = v6;
  if (v6 > *(void *)(v2 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = *a2;
  *(void *)unint64_t result = &unk_1F261B608;
  *(void *)(result + 16) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleTypeinfoName(uint64_t a1, void *a2)
{
  unint64_t v5 = (unsigned char *)*a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4 && *v5 == 46)
  {
    *a2 = v5 + 1;
    a2[1] = v4;
  }
  uint64_t v6 = llvm::ms_demangle::Demangler::demangleType(a1, (uint64_t)a2, 2);
  if (!*(unsigned char *)(a1 + 8) && *a2 == a2[1])
  {
    uint64_t v9 = v6;
    unint64_t v10 = (uint64_t *)(a1 + 16);
    unint64_t v7 = sub_1CD5F826C(v10);
    *(void *)(v7 + 32) = v9;
  }
  else
  {
    unint64_t v7 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return v7;
}

uint64_t llvm::ms_demangle::Demangler::parse(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (unsigned char *)*a2;
  unint64_t v5 = (unsigned char *)a2[1];
  if ((unsigned char *)*a2 != v5 && *v4 == 46)
  {
    return llvm::ms_demangle::Demangler::demangleTypeinfoName(a1, a2);
  }
  else if ((unint64_t)(v5 - v4) >= 3 && !strncmp("??@", (const char *)*a2, 3uLL))
  {
    return llvm::ms_demangle::Demangler::demangleMD5Name(a1, a2);
  }
  else if (v4 != v5 && *v4 == 63)
  {
    *a2 = (uint64_t)(v4 + 1);
    a2[1] = (uint64_t)v5;
    uint64_t result = llvm::ms_demangle::Demangler::demangleSpecialIntrinsic(a1, (uint64_t)a2);
    if (!result)
    {
      return llvm::ms_demangle::Demangler::demangleDeclarator(a1, a2);
    }
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleClassType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (char *)*a2;
  unint64_t v5 = (unsigned char *)(*a2 + 1);
  *a2 = (uint64_t)v5;
  int v6 = *v4;
  if (v6 != 87)
  {
    switch(v6)
    {
      case 'V':
        unint64_t v10 = (uint64_t *)(a1 + 16);
        int v12 = 0;
LABEL_13:
        unint64_t v8 = sub_1CD5FC420(v10, &v12);
LABEL_14:
        *(void *)(v8 + 16) = llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, a2);
        return v8;
      case 'U':
        unint64_t v10 = (uint64_t *)(a1 + 16);
        int v11 = 1;
        break;
      case 'T':
        unint64_t v10 = (uint64_t *)(a1 + 16);
        int v11 = 2;
        break;
      default:
        unint64_t v8 = 0;
        goto LABEL_14;
    }
LABEL_12:
    int v12 = v11;
    goto LABEL_13;
  }
  unint64_t v7 = (unsigned char *)a2[1];
  if (v5 != v7 && *v5 == 52)
  {
    *a2 = (uint64_t)(v4 + 2);
    a2[1] = (uint64_t)v7;
    unint64_t v10 = (uint64_t *)(a1 + 16);
    int v11 = 3;
    goto LABEL_12;
  }
  unint64_t v8 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return v8;
}

uint64_t llvm::ms_demangle::Demangler::demanglePointerExtQualifiers(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned char **)a2;
  uint64_t v2 = *(unsigned char **)(a2 + 8);
  if (*(unsigned char **)a2 == v2) {
    return 0;
  }
  if (*v3 == 69)
  {
    *(void *)a2 = ++v3;
    *(void *)(a2 + 8) = v2;
    uint64_t result = 64;
  }
  else
  {
    uint64_t result = 0;
  }
  if (v3 != v2)
  {
    int v5 = *v3;
    if (v5 == 73)
    {
      *(void *)a2 = ++v3;
      *(void *)(a2 + 8) = v2;
    }
    if (v3 == v2 || *v3 != 70)
    {
      if (v5 == 73) {
        return result | 0x20;
      }
      else {
        return result;
      }
    }
    else
    {
      *(void *)a2 = v3 + 1;
      *(void *)(a2 + 8) = v2;
      int v6 = result | 0x20;
      if (v5 != 73) {
        int v6 = result;
      }
      return v6 | 0x10u;
    }
  }
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned char **)a2;
  uint64_t v2 = *(unsigned char **)(a2 + 8);
  if (*(unsigned char **)a2 == v2)
  {
    uint64_t v4 = *(unsigned char **)a2;
  }
  else
  {
    if (*v3 == 63)
    {
      *(void *)a2 = ++v3;
      *(void *)(a2 + 8) = v2;
    }
    uint64_t v4 = v2;
  }
  if (v3 != v2 && ((char)*v3 & 0x80000000) == 0)
  {
    uint64_t v5 = *v3;
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v5 + 60) & 0x400) != 0)
    {
      uint64_t v8 = v5 - 47;
      if (v4 != v3) {
        ++v3;
      }
LABEL_24:
      *(void *)a2 = v3;
      *(void *)(a2 + 8) = v4;
      return v8;
    }
  }
  unint64_t v6 = v4 - v3;
  if (v4 != v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (v6 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v4 - v3;
    }
    while (1)
    {
      uint64_t v10 = (char)v3[v7];
      if (v10 == 64) {
        break;
      }
      if ((v10 - 65) <= 0xFu)
      {
        uint64_t v8 = (v10 - 65) + 16 * v8;
        if (v9 != ++v7) {
          continue;
        }
      }
      goto LABEL_16;
    }
    if (v6 >= v7 + 1) {
      unint64_t v6 = v7 + 1;
    }
    v3 += v6;
    goto LABEL_24;
  }
LABEL_16:
  uint64_t v8 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return v8;
}

uint64_t llvm::ms_demangle::Demangler::memorizeString(uint64_t result, char *__s1, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 192);
  if (v3 <= 9)
  {
    uint64_t v6 = result;
    if (v3)
    {
      uint64_t v7 = a3 - (void)__s1;
      uint64_t v8 = result + 112;
      while (1)
      {
        uint64_t v9 = *(const char **)(*(void *)v8 + 24);
        if (v7 == *(void *)(*(void *)v8 + 32) - (void)v9)
        {
          uint64_t result = strncmp(__s1, v9, a3 - (void)__s1);
          if (!result) {
            break;
          }
        }
        v8 += 8;
        if (!--v3) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      uint64_t result = sub_1CD5F7B90((uint64_t *)(v6 + 16));
      *(void *)(result + 24) = __s1;
      *(void *)(result + 32) = a3;
      uint64_t v10 = *(void *)(v6 + 192);
      *(void *)(v6 + 192) = v10 + 1;
      *(void *)(v6 + 8 * v10 + 112) = result;
    }
  }
  return result;
}

void llvm::ms_demangle::Demangler::memorizeIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = -1;
  int v11 = 1;
  uint64_t v4 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
  if (!v4) {
    std::terminate();
  }
  uint64_t v8 = v4;
  long long v9 = xmmword_1CFB1BC20;
  (*(void (**)(uint64_t, void **, void))(*(void *)a2 + 16))(a2, &v8, 0);
  uint64_t v5 = v8;
  size_t v6 = v9;
  uint64_t v7 = (void *)sub_1CD5F79B4((uint64_t **)(a1 + 16), v9);
  memcpy(v7, v5, v6);
  llvm::ms_demangle::Demangler::memorizeString(a1, (char *)v7, (uint64_t)v7 + v6);
  free(v8);
}

uint64_t llvm::ms_demangle::Demangler::demangleTemplateInstantiationName(uint64_t a1, uint64_t *a2, char a3)
{
  sub_1CD5F8160((uint64_t)a2, "?$", (uint64_t)"");
  size_t v6 = (_OWORD *)(a1 + 24);
  long long v21 = *(_OWORD *)(a1 + 56);
  long long v22 = *(_OWORD *)(a1 + 72);
  long long v23 = *(_OWORD *)(a1 + 88);
  long long v19 = *(_OWORD *)(a1 + 24);
  long long v20 = *(_OWORD *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = (_OWORD *)(a1 + 112);
  long long v16 = *(_OWORD *)(a1 + 144);
  long long v17 = *(_OWORD *)(a1 + 160);
  long long v18 = *(_OWORD *)(a1 + 176);
  long long v14 = *(_OWORD *)(a1 + 112);
  long long v15 = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 192);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 192) = 0;
  uint64_t v10 = llvm::ms_demangle::Demangler::demangleUnqualifiedSymbolName(a1, a2, 2u);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v11 = 0;
    *(_OWORD *)(a1 + 56) = v21;
    *(_OWORD *)(a1 + 72) = v22;
    *(_OWORD *)(a1 + 88) = v23;
    *size_t v6 = v19;
    *(_OWORD *)(a1 + 40) = v20;
    *(void *)(a1 + 104) = v7;
    *(_OWORD *)(a1 + 144) = v16;
    *(_OWORD *)(a1 + 160) = v17;
    *(_OWORD *)(a1 + 176) = v18;
    *uint64_t v8 = v14;
    *(_OWORD *)(a1 + 128) = v15;
    *(void *)(a1 + 192) = v9;
  }
  else
  {
    uint64_t v11 = v10;
    *(void *)(v10 + 16) = llvm::ms_demangle::Demangler::demangleTemplateParameterList(a1, (uint64_t)a2);
    int v13 = *(unsigned __int8 *)(a1 + 8);
    *(_OWORD *)(a1 + 72) = v22;
    *(_OWORD *)(a1 + 88) = v23;
    *size_t v6 = v19;
    *(_OWORD *)(a1 + 40) = v20;
    *(_OWORD *)(a1 + 56) = v21;
    *(void *)(a1 + 104) = v7;
    *(_OWORD *)(a1 + 160) = v17;
    *(_OWORD *)(a1 + 176) = v18;
    *uint64_t v8 = v14;
    *(_OWORD *)(a1 + 128) = v15;
    *(_OWORD *)(a1 + 144) = v16;
    *(void *)(a1 + 192) = v9;
    if (v13)
    {
      return 0;
    }
    else if (a3)
    {
      if ((*(_DWORD *)(v11 + 8) | 2) == 0xB)
      {
        uint64_t v11 = 0;
        *(unsigned char *)(a1 + 8) = 1;
      }
      else
      {
        llvm::ms_demangle::Demangler::memorizeIdentifier(a1, v11);
      }
    }
  }
  return v11;
}

uint64_t llvm::ms_demangle::Demangler::demangleUnqualifiedSymbolName(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  size_t v6 = (unsigned char *)*a2;
  uint64_t v7 = (unsigned char *)a2[1];
  if ((unsigned char *)*a2 == v7
    || (char)*v6 < 0
    || (uint64_t v8 = *v6, (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v8 + 60) & 0x400) == 0))
  {
    if ((unint64_t)(v7 - v6) >= 2 && !strncmp("?$", (const char *)*a2, 2uLL))
    {
      return llvm::ms_demangle::Demangler::demangleTemplateInstantiationName(a1, (int)a2);
    }
    else if (v6 == v7 || *v6 != 63)
    {
      uint64_t v11 = llvm::ms_demangle::Demangler::demangleSimpleString(a1, (uint64_t)a2, (a3 >> 1) & 1);
      if (*(unsigned char *)(a1 + 8))
      {
        return 0;
      }
      else
      {
        int v13 = v11;
        uint64_t v14 = v12;
        uint64_t result = sub_1CD5F7B90((uint64_t *)(a1 + 16));
        *(void *)(result + 24) = v13;
        *(void *)(result + 32) = v14;
      }
    }
    else
    {
      return llvm::ms_demangle::Demangler::demangleFunctionIdentifierCode(a1, a2);
    }
  }
  else
  {
    unint64_t v9 = v8 - 48;
    if (v9 >= *(void *)(a1 + 192))
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *a2 = (uint64_t)(v6 + 1);
      return *(void *)(a1 + 8 * v9 + 112);
    }
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleTemplateParameterList(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0;
  __int16 v54 = 0;
  uint64_t v5 = (uint64_t *)(a1 + 16);
  size_t v6 = &v54;
  while (1)
  {
    uint64_t v8 = *(const char **)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    if (*(void *)a2 != v7 && *v8 == 64) {
      break;
    }
    if ((sub_1CD5F8160(a2, "$S", (uint64_t)"") & 1) == 0
      && (sub_1CD5F8160(a2, "$$V", (uint64_t)"") & 1) == 0
      && (sub_1CD5F8160(a2, "$$$V", (uint64_t)"") & 1) == 0
      && (sub_1CD5F8160(a2, "$$Z", (uint64_t)"") & 1) == 0)
    {
      unint64_t v9 = sub_1CD5FB5C0(v5);
      *size_t v6 = v9;
      if (sub_1CD5F8160(a2, "$$Y", (uint64_t)""))
      {
        unint64_t v10 = llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, a2);
        goto LABEL_10;
      }
      if (sub_1CD5F8160(a2, "$$B", (uint64_t)"")) {
        goto LABEL_17;
      }
      if (sub_1CD5F8160(a2, "$$C", (uint64_t)""))
      {
        int v13 = a1;
        int v14 = a2;
        goto LABEL_18;
      }
      long long v15 = *(const char **)a2;
      unint64_t v16 = *(void *)(a2 + 8) - *(void *)a2;
      if (v16 < 2) {
        goto LABEL_22;
      }
      if (strncmp("$1", *(const char **)a2, 2uLL)
        && strncmp("$H", v15, 2uLL)
        && strncmp("$I", v15, 2uLL)
        && strncmp("$J", v15, 2uLL))
      {
        if (v16 >= 3 && !strncmp("$E?", v15, 3uLL))
        {
          sub_1CD5F8160(a2, "$E", (uint64_t)"");
          unint64_t v35 = sub_1CD5FC780(v5);
          *unint64_t v9 = v35;
          *(void *)(v35 + 16) = llvm::ms_demangle::Demangler::parse(a1, a2);
          *(_DWORD *)(v35 + 56) = 2;
          goto LABEL_11;
        }
        if (!strncmp("$F", v15, 2uLL) || !strncmp("$G", v15, 2uLL))
        {
          unint64_t v36 = sub_1CD5FC780(v5);
          *unint64_t v9 = v36;
          if (*(void *)(a2 + 8) == *(void *)a2) {
            unint64_t v37 = *(const char **)a2;
          }
          else {
            unint64_t v37 = (const char *)(*(void *)a2 + 1);
          }
          *(void *)a2 = v37 + 1;
          if (*v37 == 71)
          {
            uint64_t v38 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
            if (v38 < 0) {
              *(unsigned char *)(a1 + 8) = 1;
            }
            if (v39) {
              uint64_t v40 = -v38;
            }
            else {
              uint64_t v40 = v38;
            }
            uint64_t v41 = *(int *)(v36 + 24);
            *(_DWORD *)(v36 + 24) = v41 + 1;
            *(void *)(v36 + 8 * v41 + 32) = v40;
          }
          uint64_t v42 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
          if (v42 < 0) {
            *(unsigned char *)(a1 + 8) = 1;
          }
          if (v43) {
            uint64_t v44 = -v42;
          }
          else {
            uint64_t v44 = v42;
          }
          uint64_t v45 = *(int *)(v36 + 24);
          *(_DWORD *)(v36 + 24) = v45 + 1;
          *(void *)(v36 + 32 + 8 * v45) = v44;
          uint64_t v46 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
          if (v46 < 0) {
            *(unsigned char *)(a1 + 8) = 1;
          }
          if (v47) {
            uint64_t v48 = -v46;
          }
          else {
            uint64_t v48 = v46;
          }
          uint64_t v49 = *(int *)(v36 + 24);
          *(_DWORD *)(v36 + 24) = v49 + 1;
          *(void *)(v36 + 32 + 8 * v49) = v48;
          *(unsigned char *)(v36 + 60) = 1;
          goto LABEL_11;
        }
LABEL_22:
        if (sub_1CD5F8160(a2, "$0", (uint64_t)""))
        {
          uint64_t v52 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
          char v53 = v17;
          unint64_t v10 = sub_1CD5FC69C(v5, &v52, &v53);
          goto LABEL_10;
        }
LABEL_17:
        int v13 = a1;
        int v14 = a2;
LABEL_18:
        unint64_t v10 = llvm::ms_demangle::Demangler::demangleType(v13, v14);
LABEL_10:
        *unint64_t v9 = v10;
        goto LABEL_11;
      }
      unint64_t v18 = sub_1CD5FC780(v5);
      *unint64_t v9 = v18;
      *(unsigned char *)(v18 + 60) = 1;
      long long v19 = *(const char **)(a2 + 8);
      if (v19 == *(const char **)a2) {
        long long v20 = *(const char **)a2;
      }
      else {
        long long v20 = (const char *)(*(void *)a2 + 1);
      }
      *(void *)a2 = v20 + 1;
      int v21 = *v20;
      if (v20 + 1 != v19 && v20[1] == 63)
      {
        uint64_t v50 = llvm::ms_demangle::Demangler::parse(a1, a2);
        if (*(unsigned char *)(a1 + 8) || (uint64_t v22 = v50, (v51 = *(void *)(v50 + 16)) == 0))
        {
          *(unsigned char *)(a1 + 8) = 1;
          return 0;
        }
        llvm::ms_demangle::Demangler::memorizeIdentifier(a1, *(void *)(*(void *)(*(void *)(v51 + 16) + 16) + 8 * *(void *)(*(void *)(v51 + 16) + 24) - 8));
      }
      else
      {
        uint64_t v22 = 0;
      }
      if (v21 != 49)
      {
        if (v21 != 72)
        {
          if (v21 != 73)
          {
            uint64_t v23 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
            if (v23 < 0) {
              *(unsigned char *)(a1 + 8) = 1;
            }
            if (v24) {
              uint64_t v25 = -v23;
            }
            else {
              uint64_t v25 = v23;
            }
            uint64_t v26 = *(int *)(v18 + 24);
            *(_DWORD *)(v18 + 24) = v26 + 1;
            *(void *)(v18 + 8 * v26 + 32) = v25;
          }
          uint64_t v27 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
          if (v27 < 0) {
            *(unsigned char *)(a1 + 8) = 1;
          }
          if (v28) {
            uint64_t v29 = -v27;
          }
          else {
            uint64_t v29 = v27;
          }
          uint64_t v30 = *(int *)(v18 + 24);
          *(_DWORD *)(v18 + 24) = v30 + 1;
          *(void *)(v18 + 8 * v30 + 32) = v29;
        }
        uint64_t v31 = llvm::ms_demangle::Demangler::demangleNumber(a1, a2);
        if (v31 < 0) {
          *(unsigned char *)(a1 + 8) = 1;
        }
        if (v32) {
          uint64_t v33 = -v31;
        }
        else {
          uint64_t v33 = v31;
        }
        uint64_t v34 = *(int *)(v18 + 24);
        *(_DWORD *)(v18 + 24) = v34 + 1;
        *(void *)(v18 + 8 * v34 + 32) = v33;
      }
      *(_DWORD *)(v18 + 56) = 1;
      *(void *)(v18 + 16) = v22;
LABEL_11:
      ++v4;
      size_t v6 = v9 + 1;
      if (*(unsigned char *)(a1 + 8)) {
        return 0;
      }
    }
  }
  *(void *)a2 = v8 + 1;
  *(void *)(a2 + 8) = v7;
  uint64_t v12 = v54;

  return sub_1CC6BE130(v5, v12, v4);
}

uint64_t llvm::ms_demangle::Demangler::demangleCharLiteral(uint64_t a1, unsigned __int8 **a2)
{
  unint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (*a2 == v2 || *v3 != 63)
  {
    *a2 = v3 + 1;
    return *v3;
  }
  *a2 = v3 + 1;
  a2[1] = v2;
  if (v3 + 1 == v2) {
    goto LABEL_19;
  }
  uint64_t v4 = v3[1];
  if (v4 != 36)
  {
    if ((v4 & 0x80) == 0)
    {
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v4 + 60) & 0x400) != 0)
      {
        unsigned __int8 v7 = asc_1CFBDD939[v4 - 48];
        goto LABEL_16;
      }
      if ((v4 - 97) <= 0x19)
      {
        unsigned __int8 v7 = byte_1CFB1BCEC[v4 - 97];
LABEL_16:
        *a2 = v3 + 2;
        a2[1] = v2;
        return v7;
      }
      if ((v4 - 65) <= 0x19)
      {
        unsigned __int8 v7 = byte_1CFB1BD06[v4 - 65];
        goto LABEL_16;
      }
    }
LABEL_19:
    unsigned __int8 v7 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    return v7;
  }
  *a2 = v3 + 2;
  a2[1] = v2;
  if ((unint64_t)(v2 - (v3 + 2)) < 2) {
    goto LABEL_19;
  }
  unsigned __int8 v5 = v3[2] - 65;
  if (v5 > 0xFu) {
    goto LABEL_19;
  }
  unsigned __int8 v6 = v3[3] - 65;
  if (v6 > 0xFu) {
    goto LABEL_19;
  }
  *a2 = v3 + 4;
  a2[1] = v2;
  return (v6 | (16 * v5));
}

uint64_t llvm::ms_demangle::Demangler::demangleWcharLiteral(uint64_t a1, uint64_t a2)
{
  int v4 = llvm::ms_demangle::Demangler::demangleCharLiteral(a1, (unsigned __int8 **)a2);
  if (!*(unsigned char *)(a1 + 8) && *(void *)a2 != *(void *)(a2 + 8))
  {
    int v6 = v4;
    int v7 = llvm::ms_demangle::Demangler::demangleCharLiteral(a1, (unsigned __int8 **)a2);
    if (!*(unsigned char *)(a1 + 8)) {
      return v7 | (v6 << 8);
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return result;
}

unint64_t sub_1CD5FB028(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 32;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 26;
  *(void *)unint64_t result = &unk_1F261B6D0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

unint64_t sub_1CD5FB0F0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 32;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 6;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)unint64_t result = &unk_1F261B2E8;
  return result;
}

unint64_t sub_1CD5FB1B8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 80;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 13;
  *(unsigned char *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(unsigned char *)(result + 20) = 0;
  *(_WORD *)(result + 22) = 8;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)unint64_t result = &unk_1F261B428;
  *(void *)(result + 68) = 0;
  *(void *)(result + 60) = 0;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleCallingConvention(uint64_t a1, char **a2)
{
  uint64_t v2 = *a2;
  if (*a2 == a2[1])
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    *a2 = v2 + 1;
    uint64_t v3 = *v2 - 65;
    if (v3 > 0x16) {
      return 0;
    }
    else {
      return byte_1CFB1BD48[v3];
    }
  }
  return result;
}

unint64_t sub_1CD5FB2FC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 48;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 22;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)unint64_t result = &unk_1F261B680;
  *(_DWORD *)(result + 44) = 0;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleAnonymousNamespaceName(uint64_t a1, uint64_t a2)
{
  sub_1CD5F8160(a2, "?A", (uint64_t)"");
  unint64_t v4 = sub_1CD5F7B90((uint64_t *)(a1 + 16));
  *(void *)(v4 + 32) = "";
  int v6 = *(char **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unint64_t v7 = v5 - *(void *)a2;
  if (v5 == *(void *)a2
    || ((unint64_t v8 = v4, v9 = memchr(*(void **)a2, 64, v5 - *(void *)a2), v10 = v9 - v6, v9)
      ? (BOOL v11 = v10 == -1)
      : (BOOL v11 = 1),
        v11))
  {
    unint64_t v8 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    if (v7 >= v10) {
      int64_t v13 = v9 - v6;
    }
    else {
      int64_t v13 = v7;
    }
    llvm::ms_demangle::Demangler::memorizeString(a1, v6, (uint64_t)&v6[v13]);
    uint64_t v14 = v10 + *(void *)a2 + 1;
    uint64_t v15 = v14 + *(void *)(a2 + 8) + ~v10 - *(void *)a2;
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v15;
  }
  return v8;
}

unint64_t llvm::ms_demangle::Demangler::demangleUnqualifiedTypeName(uint64_t a1, uint64_t *a2, int a3)
{
  int v6 = (const char *)*a2;
  unint64_t v7 = (const char *)a2[1];
  if (v6 == v7
    || *v6 < 0
    || (uint64_t v8 = *(unsigned __int8 *)v6, (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v8 + 60) & 0x400) == 0))
  {
    if ((unint64_t)(v7 - v6) >= 2 && !strncmp("?$", v6, 2uLL))
    {
      return llvm::ms_demangle::Demangler::demangleTemplateInstantiationName(a1, a2, 1);
    }
    else
    {
      unint64_t v10 = llvm::ms_demangle::Demangler::demangleSimpleString(a1, (uint64_t)a2, a3);
      if (*(unsigned char *)(a1 + 8))
      {
        return 0;
      }
      else
      {
        uint64_t v12 = v10;
        uint64_t v13 = v11;
        unint64_t result = sub_1CD5F7B90((uint64_t *)(a1 + 16));
        *(void *)(result + 24) = v12;
        *(void *)(result + 32) = v13;
      }
    }
  }
  else if ((unint64_t)(v8 - 48) >= *(void *)(a1 + 192))
  {
    unint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    *a2 = (uint64_t)(v6 + 1);
    return *(void *)(a1 + 8 * (v8 - 48) + 112);
  }
  return result;
}

void *sub_1CD5FB5C0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (void *)((v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (unint64_t)result + v2 - v3 + 16;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *unint64_t result = 0;
  result[1] = 0;
  return result;
}

unint64_t sub_1CD5FB664(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 24;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 20;
  *(void *)unint64_t result = &unk_1F261B568;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demangleFunctionClass(uint64_t a1, void *a2)
{
  uint64_t v3 = (unsigned char *)*a2;
  unint64_t v4 = (unsigned char *)(*a2 + 1);
  *a2 = v4;
  uint64_t result = 384;
  switch(*v3)
  {
    case '$':
      int v6 = (unsigned char *)a2[1];
      if (v4 == v6) {
        goto LABEL_35;
      }
      if (*v4 == 82)
      {
        unint64_t v4 = v3 + 2;
        *a2 = v3 + 2;
        a2[1] = v6;
        int v7 = 1536;
      }
      else
      {
        int v7 = 512;
      }
      if (v4 == v6) {
        goto LABEL_35;
      }
      *a2 = v4 + 1;
      switch(*v4)
      {
        case '0':
          int v8 = 36;
          break;
        case '1':
          int v8 = 100;
          break;
        case '2':
          int v8 = 34;
          break;
        case '3':
          int v8 = 98;
          break;
        case '4':
          int v8 = 33;
          break;
        case '5':
          int v8 = 97;
          break;
        default:
          goto LABEL_35;
      }
      uint64_t result = v7 | v8;
      break;
    case '9':
      return result;
    case 'A':
      uint64_t result = 4;
      break;
    case 'B':
      uint64_t result = 68;
      break;
    case 'C':
      uint64_t result = 20;
      break;
    case 'D':
      uint64_t result = 84;
      break;
    case 'E':
      uint64_t result = 36;
      break;
    case 'F':
      uint64_t result = 100;
      break;
    case 'G':
      uint64_t result = 2052;
      break;
    case 'H':
      uint64_t result = 2116;
      break;
    case 'I':
      uint64_t result = 2;
      break;
    case 'J':
      uint64_t result = 66;
      break;
    case 'K':
      uint64_t result = 18;
      break;
    case 'L':
      uint64_t result = 82;
      break;
    case 'M':
      uint64_t result = 34;
      break;
    case 'N':
      uint64_t result = 98;
      break;
    case 'O':
      uint64_t result = 2082;
      break;
    case 'P':
      uint64_t result = 2146;
      break;
    case 'Q':
      uint64_t result = 1;
      break;
    case 'R':
      uint64_t result = 65;
      break;
    case 'S':
      uint64_t result = 17;
      break;
    case 'T':
      uint64_t result = 81;
      break;
    case 'U':
      uint64_t result = 33;
      break;
    case 'V':
      uint64_t result = 97;
      break;
    case 'W':
      uint64_t result = 2081;
      break;
    case 'X':
      uint64_t result = 2145;
      break;
    case 'Y':
      uint64_t result = 8;
      break;
    case 'Z':
      uint64_t result = 72;
      break;
    default:
LABEL_35:
      uint64_t result = 1;
      *(unsigned char *)(a1 + 8) = 1;
      break;
  }
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleMemberPointerType(uint64_t a1, char **a2)
{
  unint64_t v4 = sub_1CD5FC500((uint64_t *)(a1 + 16));
  uint64_t v5 = sub_1CC6BE3AC(a2);
  *(unsigned char *)(v4 + 12) = v5;
  *(_DWORD *)(v4 + 16) = HIDWORD(v5);
  *(unsigned char *)(v4 + 12) |= llvm::ms_demangle::Demangler::demanglePointerExtQualifiers(v5, (uint64_t)a2);
  if (sub_1CD5F8160((uint64_t)a2, "8", (uint64_t)""))
  {
    *(void *)(v4 + 24) = llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, a2);
    *(void *)(v4 + 32) = llvm::ms_demangle::Demangler::demangleFunctionType(a1, a2, 1);
  }
  else
  {
    char v7 = llvm::ms_demangle::Demangler::demangleQualifiers(a1, a2);
    *(void *)(v4 + 24) = llvm::ms_demangle::Demangler::demangleFullyQualifiedTypeName(a1, a2);
    uint64_t v8 = llvm::ms_demangle::Demangler::demangleType(a1, (int)a2);
    *(void *)(v4 + 32) = v8;
    if (v8) {
      *(unsigned char *)(v8 + 12) = v7;
    }
  }
  return v4;
}

unint64_t llvm::ms_demangle::Demangler::demanglePointerType(uint64_t a1, void *a2)
{
  unint64_t v4 = sub_1CD5FC500((uint64_t *)(a1 + 16));
  uint64_t v5 = sub_1CC6BE3AC(a2);
  *(unsigned char *)(v4 + 12) = v5;
  *(_DWORD *)(v4 + 16) = HIDWORD(v5);
  uint64_t v6 = sub_1CD5F8160((uint64_t)a2, "6", (uint64_t)"");
  if (v6)
  {
    uint64_t v7 = llvm::ms_demangle::Demangler::demangleFunctionType(a1, a2, 0);
  }
  else
  {
    *(unsigned char *)(v4 + 12) |= llvm::ms_demangle::Demangler::demanglePointerExtQualifiers(v6, (uint64_t)a2);
    uint64_t v7 = llvm::ms_demangle::Demangler::demangleType(a1, (int)a2);
  }
  *(void *)(v4 + 32) = v7;
  return v4;
}

unint64_t llvm::ms_demangle::Demangler::demangleArrayType(uint64_t a1, char **a2)
{
  ++*a2;
  uint64_t v4 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
  if (!v5)
  {
    unint64_t v6 = v4;
    if (v4)
    {
      unint64_t v7 = sub_1CD5FC5D0((uint64_t *)(a1 + 16));
      unint64_t v9 = sub_1CD5FB5C0((uint64_t *)(a1 + 16));
      uint64_t v10 = 0;
      uint64_t v11 = v9;
      while (1)
      {
        uint64_t v15 = llvm::ms_demangle::Demangler::demangleNumber(a1, (uint64_t)a2);
        char v16 = v12;
        if (*(unsigned char *)(a1 + 8) | v12) {
          break;
        }
        unint64_t *v11 = sub_1CD5FC69C((uint64_t *)(a1 + 16), &v15, &v16);
        if (++v10 < v6)
        {
          uint64_t v13 = sub_1CD5FB5C0((uint64_t *)(a1 + 16));
          v11[1] = (unint64_t)v13;
          uint64_t v11 = v13;
        }
        if (v6 == v10)
        {
          *(void *)(v7 + 16) = sub_1CC6BE130((uint64_t *)(a1 + 16), v9, v6);
          if (!sub_1CD5F8160((uint64_t)a2, "$$C", (uint64_t)"")
            || (unsigned __int16 v14 = llvm::ms_demangle::Demangler::demangleQualifiers(a1, a2), *(unsigned char *)(v7 + 12) = v14, v14 < 0x100u))
          {
            *(void *)(v7 + 24) = llvm::ms_demangle::Demangler::demangleType(a1, (int)a2);
            return v7;
          }
          break;
        }
      }
    }
  }
  unint64_t v7 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return v7;
}

unint64_t llvm::ms_demangle::Demangler::demangleFunctionType(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = sub_1CD5FBFA8((uint64_t *)(a1 + 16));
  unint64_t v7 = v6;
  if (a3)
  {
    char v8 = llvm::ms_demangle::Demangler::demanglePointerExtQualifiers(v6, a2);
    *(unsigned char *)(v7 + 12) = v8;
    uint64_t v10 = *(char **)a2;
    uint64_t v9 = *(void *)(a2 + 8);
    if (*(void *)a2 == v9)
    {
LABEL_3:
      int v11 = 0;
LABEL_4:
      *(_DWORD *)(v7 + 24) = v11;
      *(unsigned char *)(v7 + 12) = v8 | llvm::ms_demangle::Demangler::demangleQualifiers(a1, (char **)a2);
      goto LABEL_5;
    }
    int v18 = *v10;
    if (v18 == 71)
    {
      int v11 = 1;
    }
    else
    {
      if (v18 != 72) {
        goto LABEL_3;
      }
      int v11 = 2;
    }
    *(void *)a2 = v10 + 1;
    *(void *)(a2 + 8) = v9;
    goto LABEL_4;
  }
LABEL_5:
  *(unsigned char *)(v7 + 20) = llvm::ms_demangle::Demangler::demangleCallingConvention(a1, (char **)a2);
  uint64_t v13 = *(char **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(void *)a2 == v12 || *v13 != 64)
  {
    *(void *)(v7 + 32) = llvm::ms_demangle::Demangler::demangleType(a1, a2, 2);
  }
  else
  {
    *(void *)a2 = v13 + 1;
    *(void *)(a2 + 8) = v12;
  }
  *(void *)(v7 + 48) = llvm::ms_demangle::Demangler::demangleFunctionParameterList(a1, (unsigned __int8 **)a2, (unsigned char *)(v7 + 40));
  unsigned __int16 v14 = *(char **)a2;
  uint64_t v15 = *(char **)(a2 + 8);
  if ((unint64_t)&v15[-*(void *)a2] >= 2 && !strncmp("_E", *(const char **)a2, 2uLL))
  {
    *(void *)a2 = v14 + 2;
    *(void *)(a2 + 8) = v15;
    char v16 = 1;
  }
  else if (v14 == v15 || *v14 != 90)
  {
    char v16 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    char v16 = 0;
    *(void *)a2 = v14 + 1;
    *(void *)(a2 + 8) = v15;
  }
  *(unsigned char *)(v7 + 56) = v16;
  return v7;
}

unint64_t llvm::ms_demangle::Demangler::demangleCustomType(uint64_t a1, uint64_t *a2)
{
  ++*a2;
  unint64_t v4 = sub_1CD5FC278((uint64_t *)(a1 + 16));
  *(void *)(v4 + 16) = llvm::ms_demangle::Demangler::demangleUnqualifiedTypeName(a1, a2, 1);
  unint64_t v6 = (unsigned char *)*a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5 || *v6 != 64)
  {
    unint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    *a2 = (uint64_t)(v6 + 1);
    a2[1] = v5;
    if (*(unsigned char *)(a1 + 8)) {
      return 0;
    }
    else {
      return v4;
    }
  }
  return result;
}

uint64_t llvm::ms_demangle::Demangler::demanglePrimitiveType(uint64_t a1, uint64_t *a2)
{
  if (sub_1CD5F8160((uint64_t)a2, "$$T", (uint64_t)""))
  {
    unint64_t v7 = (uint64_t *)(a1 + 16);
    int v8 = 20;
LABEL_8:
    int v9 = v8;
    return sub_1CD5FC344(v7, &v9);
  }
  else
  {
    unint64_t v4 = (unsigned char *)*a2;
    uint64_t v5 = *a2 + 1;
    *a2 = v5;
    switch(*v4)
    {
      case 'C':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 3;
        goto LABEL_8;
      case 'D':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 2;
        goto LABEL_8;
      case 'E':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 4;
        goto LABEL_8;
      case 'F':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 8;
        goto LABEL_8;
      case 'G':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 9;
        goto LABEL_8;
      case 'H':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 10;
        goto LABEL_8;
      case 'I':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 11;
        goto LABEL_8;
      case 'J':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 12;
        goto LABEL_8;
      case 'K':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 13;
        goto LABEL_8;
      case 'M':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 17;
        goto LABEL_8;
      case 'N':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 18;
        goto LABEL_8;
      case 'O':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v8 = 19;
        goto LABEL_8;
      case 'X':
        unint64_t v7 = (uint64_t *)(a1 + 16);
        int v9 = 0;
        return sub_1CD5FC344(v7, &v9);
      case '_':
        if (v5 != a2[1])
        {
          *a2 = (uint64_t)(v4 + 2);
          switch(v4[1])
          {
            case 'J':
              unint64_t v7 = (uint64_t *)(a1 + 16);
              int v8 = 14;
              goto LABEL_8;
            case 'K':
              unint64_t v7 = (uint64_t *)(a1 + 16);
              int v8 = 15;
              goto LABEL_8;
            case 'N':
              unint64_t v7 = (uint64_t *)(a1 + 16);
              int v8 = 1;
              goto LABEL_8;
            case 'Q':
              unint64_t v7 = (uint64_t *)(a1 + 16);
              int v8 = 5;
              goto LABEL_8;
            case 'S':
              unint64_t v7 = (uint64_t *)(a1 + 16);
              int v8 = 6;
              goto LABEL_8;
            case 'U':
              unint64_t v7 = (uint64_t *)(a1 + 16);
              int v8 = 7;
              goto LABEL_8;
            case 'W':
              unint64_t v7 = (uint64_t *)(a1 + 16);
              int v8 = 16;
              goto LABEL_8;
            default:
              goto LABEL_5;
          }
        }
        break;
      default:
        break;
    }
LABEL_5:
    uint64_t result = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return result;
}

unint64_t sub_1CD5FBFA8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 64;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 3;
  *(unsigned char *)(result + 12) = 0;
  *(void *)unint64_t result = &unk_1F261B2B0;
  *(_DWORD *)(result + 16) = 0;
  *(unsigned char *)(result + 20) = 0;
  *(_WORD *)(result + 22) = 8;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(unsigned char *)(result + 56) = 0;
  return result;
}

unint64_t llvm::ms_demangle::Demangler::demangleFunctionParameterList(uint64_t a1, unsigned __int8 **a2, unsigned char *a3)
{
  unint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 != v6 && *v7 == 88)
  {
    unint64_t result = 0;
    goto LABEL_4;
  }
  long long v20 = sub_1CD5FB5C0((uint64_t *)(a1 + 16));
  if (*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  unint64_t v9 = 0;
  uint64_t v10 = a1 + 24;
  int v11 = &v20;
  while (1)
  {
    uint64_t v13 = *a2;
    uint64_t v12 = a2[1];
    if (*a2 == v12)
    {
      ++v9;
LABEL_18:
      void *v11 = sub_1CD5FB5C0((uint64_t *)(a1 + 16));
      unint64_t result = llvm::ms_demangle::Demangler::demangleType(a1, (uint64_t)a2, 0);
      if (!result) {
        return result;
      }
      int v17 = *(unsigned __int8 *)(a1 + 8);
      if (*(unsigned char *)(a1 + 8)) {
        return 0;
      }
      *(void *)void *v11 = result;
      unint64_t v18 = *(void *)(a1 + 104);
      if (v18 <= 9 && &(*a2)[v12 - &a2[1][(void)v13]] >= (unsigned __int8 *)2)
      {
        int v17 = 0;
        *(void *)(a1 + 104) = v18 + 1;
        *(void *)(v10 + 8 * v18) = result;
      }
      goto LABEL_16;
    }
    uint64_t v14 = *v13;
    if (v14 == 64 || v14 == 90) {
      break;
    }
    ++v9;
    if ((v14 & 0x80) != 0 || (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v14 + 60) & 0x400) == 0) {
      goto LABEL_18;
    }
    uint64_t v15 = v14 - 48;
    if ((unint64_t)(v14 - 48) >= *(void *)(a1 + 104))
    {
      unint64_t result = 0;
      *(unsigned char *)(a1 + 8) = 1;
      return result;
    }
    *a2 = v13 + 1;
    a2[1] = v12;
    char v16 = sub_1CD5FB5C0((uint64_t *)(a1 + 16));
    void *v11 = v16;
    void *v16 = *(void *)(v10 + 8 * v15);
    int v17 = *(unsigned __int8 *)(a1 + 8);
LABEL_16:
    int v11 = (void *)(*v11 + 8);
    if (v17) {
      return 0;
    }
  }
  unint64_t result = sub_1CC6BE130((uint64_t *)(a1 + 16), v20, v9);
  unint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 == v6) {
    goto LABEL_30;
  }
  int v19 = *v7;
  if (v19 == 90)
  {
    *a2 = v7 + 1;
    a2[1] = v6;
    goto LABEL_30;
  }
  if (v19 != 64)
  {
LABEL_30:
    *a3 = 1;
    return result;
  }
LABEL_4:
  *a2 = v7 + 1;
  a2[1] = v6;
  return result;
}

unint64_t sub_1CD5FC278(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 24;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 17;
  *(unsigned char *)(result + 12) = 0;
  *(void *)unint64_t result = &unk_1F261B508;
  *(void *)(result + 16) = 0;
  return result;
}

unint64_t sub_1CD5FC344(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  uint64_t v4 = v3 + *(void *)*a1;
  unint64_t result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = v3 - v4 + result + 24;
  *(void *)(v2 + 8) = v6;
  if (v6 > *(void *)(v2 + 16)) {
    operator new();
  }
  int v7 = *a2;
  *(_DWORD *)(result + 8) = 2;
  *(unsigned char *)(result + 12) = 0;
  *(void *)unint64_t result = &unk_1F261B278;
  *(_DWORD *)(result + 16) = v7;
  return result;
}

unint64_t sub_1CD5FC420(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  uint64_t v4 = v3 + *(void *)*a1;
  unint64_t result = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = v3 - v4 + result + 32;
  *(void *)(v2 + 8) = v6;
  if (v6 > *(void *)(v2 + 16)) {
    operator new();
  }
  int v7 = *a2;
  *(_DWORD *)(result + 8) = 15;
  *(unsigned char *)(result + 12) = 0;
  *(void *)unint64_t result = &unk_1F261B498;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = v7;
  return result;
}

unint64_t sub_1CD5FC500(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 40;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 14;
  *(unsigned char *)(result + 12) = 0;
  *(void *)unint64_t result = &unk_1F261B460;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

unint64_t sub_1CD5FC5D0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 32;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 16;
  *(unsigned char *)(result + 12) = 0;
  *(void *)unint64_t result = &unk_1F261B4D0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

unint64_t sub_1CD5FC69C(uint64_t *a1, uint64_t *a2, char *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 8);
  uint64_t v5 = v4 + *(void *)*a1;
  unint64_t result = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = v4 - v5 + result + 32;
  *(void *)(v3 + 8) = v7;
  if (v7 > *(void *)(v3 + 16)) {
    operator new();
  }
  char v8 = *a3;
  uint64_t v9 = *a2;
  *(_DWORD *)(result + 8) = 23;
  *(void *)unint64_t result = &unk_1F261B5B8;
  *(void *)(result + 16) = v9;
  *(unsigned char *)(result + 24) = v8;
  return result;
}

unint64_t sub_1CD5FC780(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 64;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 21;
  *(void *)unint64_t result = &unk_1F261B590;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(unsigned char *)(result + 60) = 0;
  return result;
}

uint64_t llvm::ms_demangle::Demangler::dumpBackReferences(llvm::ms_demangle::Demangler *this)
{
  printf("%d function parameter backreferences\n", *((void *)this + 13));
  uint64_t v9 = -1;
  int v10 = 1;
  uint64_t v2 = malloc_type_malloc(0x400uLL, 0x1E4FE0F9uLL);
  if (!v2) {
    std::terminate();
  }
  unint64_t v7 = v2;
  long long v8 = xmmword_1CFB1BC20;
  if (*((void *)this + 13))
  {
    unint64_t v3 = 0;
    do
    {
      *(void *)&long long v8 = 0;
      (*(void (**)(void, void **, void))(**((void **)this + v3 + 3) + 16))(*((void *)this + v3 + 3), &v7, 0);
      printf("  [%d] - %.*s\n", v3++, (int)v8, (const char *)v7);
    }
    while (v3 < *((void *)this + 13));
    uint64_t v2 = v7;
  }
  free(v2);
  if (*((void *)this + 13)) {
    putchar(10);
  }
  uint64_t result = printf("%d name backreferences\n", *((void *)this + 24));
  if (*((void *)this + 24))
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t result = printf("  [%d] - %.*s\n", v5, *(_DWORD *)(*((void *)this + v5 + 14) + 32) - *(_DWORD *)(*((void *)this + v5 + 14) + 24), *(const char **)(*((void *)this + v5 + 14) + 24));
      ++v5;
      unint64_t v6 = *((void *)this + 24);
    }
    while (v5 < v6);
    if (v6) {
      return putchar(10);
    }
  }
  return result;
}

void *sub_1CD5FC9BC(void *a1)
{
  *a1 = &unk_1F261B258;
  sub_1CD5FCC10(a1 + 2);
  return a1;
}

unint64_t sub_1CD5FCA00(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = v2 + *(void *)*a1;
  unint64_t result = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = v2 - v3 + result + 32;
  *(void *)(v1 + 8) = v5;
  if (v5 > *(void *)(v1 + 16)) {
    operator new();
  }
  *(_DWORD *)(result + 8) = 19;
  *(void *)unint64_t result = &unk_1F261B540;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

char *sub_1CD5FCAC8(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (char *)((*(void *)(*a1 + 8) + *(void *)*a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = &v3[8 * a2 - *(void *)*a1];
  *(void *)(v2 + 8) = v4;
  if ((unint64_t)v4 > *(void *)(v2 + 16)) {
    operator new();
  }
  if (a2 >> 61) {
    size_t v5 = -1;
  }
  else {
    size_t v5 = 8 * a2;
  }
  bzero(v3, v5);
  return v3;
}

void sub_1CD5FCBAC(void *a1)
{
  *a1 = &unk_1F261B258;
  sub_1CD5FCC10(a1 + 2);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CD5FCC10(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (v2)
  {
    do
    {
      if (*v2)
      {
        MEMORY[0x1D25D9CB0](*v2, 0x1000C8077774924);
        uint64_t v2 = (void *)*a1;
      }
      uint64_t v3 = (void *)v2[3];
      MEMORY[0x1D25D9CE0]();
      *a1 = v3;
      uint64_t v2 = v3;
    }
    while (v3);
  }
  return a1;
}

uint64_t *llvm::ms_demangle::PrimitiveTypeNode::outputPre(uint64_t a1, uint64_t *a2)
{
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
      uint64_t v4 = 4;
      sub_1CD5EFF98(a2, 4);
      uint64_t v5 = *a2;
      unint64_t v6 = a2 + 1;
      uint64_t v7 = a2[1];
      int v8 = 1684631414;
      goto LABEL_16;
    case 1:
      uint64_t v4 = 4;
      sub_1CD5EFF98(a2, 4);
      uint64_t v5 = *a2;
      unint64_t v6 = a2 + 1;
      uint64_t v7 = a2[1];
      int v8 = 1819242338;
      goto LABEL_16;
    case 2:
      uint64_t v4 = 4;
      sub_1CD5EFF98(a2, 4);
      uint64_t v5 = *a2;
      unint64_t v6 = a2 + 1;
      uint64_t v7 = a2[1];
      int v8 = 1918986339;
      goto LABEL_16;
    case 3:
      uint64_t v4 = 11;
      sub_1CD5EFF98(a2, 11);
      unint64_t v6 = a2 + 1;
      uint64_t v9 = *a2 + a2[1];
      *(void *)uint64_t v9 = *(void *)"signed char";
      int v10 = 1918986339;
      goto LABEL_30;
    case 4:
      uint64_t v4 = 13;
      sub_1CD5EFF98(a2, 13);
      unint64_t v6 = a2 + 1;
      int v11 = (void *)(*a2 + a2[1]);
      uint64_t v12 = "unsigned char";
      goto LABEL_18;
    case 5:
      uint64_t v4 = 7;
      sub_1CD5EFF98(a2, 7);
      unint64_t v6 = a2 + 1;
      uint64_t v13 = *a2 + a2[1];
      *(_DWORD *)(v13 + 3) = 1952397426;
      int v14 = 1918986339;
      goto LABEL_24;
    case 6:
      uint64_t v4 = 8;
      sub_1CD5EFF98(a2, 8);
      uint64_t v15 = *a2;
      unint64_t v6 = a2 + 1;
      uint64_t v16 = a2[1];
      uint64_t v17 = 0x363172616863;
      goto LABEL_10;
    case 7:
      uint64_t v4 = 8;
      sub_1CD5EFF98(a2, 8);
      uint64_t v15 = *a2;
      unint64_t v6 = a2 + 1;
      uint64_t v16 = a2[1];
      uint64_t v17 = 0x323372616863;
LABEL_10:
      *(void *)(v15 + v16) = v17 & 0xFFFFFFFFFFFFLL | 0x745F000000000000;
      goto LABEL_25;
    case 8:
      uint64_t v4 = 5;
      sub_1CD5EFF98(a2, 5);
      unint64_t v6 = a2 + 1;
      uint64_t v13 = *a2 + a2[1];
      *(unsigned char *)(v13 + 4) = 116;
      int v14 = 1919903859;
      goto LABEL_24;
    case 9:
      uint64_t v4 = 14;
      sub_1CD5EFF98(a2, 14);
      unint64_t v6 = a2 + 1;
      unint64_t v18 = (void *)(*a2 + a2[1]);
      int v19 = "unsigned short";
      goto LABEL_32;
    case 0xA:
      uint64_t v4 = 3;
      sub_1CD5EFF98(a2, 3);
      unint64_t v6 = a2 + 1;
      uint64_t v20 = *a2 + a2[1];
      *(unsigned char *)(v20 + 2) = 116;
      *(_WORD *)uint64_t v20 = 28265;
      goto LABEL_25;
    case 0xB:
      uint64_t v4 = 12;
      sub_1CD5EFF98(a2, 12);
      unint64_t v6 = a2 + 1;
      uint64_t v21 = *a2 + a2[1];
      *(void *)uint64_t v21 = *(void *)"unsigned int";
      *(_DWORD *)(v21 + 8) = 1953392928;
      goto LABEL_25;
    case 0xC:
      uint64_t v4 = 4;
      sub_1CD5EFF98(a2, 4);
      uint64_t v5 = *a2;
      unint64_t v6 = a2 + 1;
      uint64_t v7 = a2[1];
      int v8 = 1735290732;
LABEL_16:
      *(_DWORD *)(v5 + v7) = v8;
      goto LABEL_25;
    case 0xD:
      uint64_t v4 = 13;
      sub_1CD5EFF98(a2, 13);
      unint64_t v6 = a2 + 1;
      int v11 = (void *)(*a2 + a2[1]);
      uint64_t v12 = "unsigned long";
LABEL_18:
      void *v11 = *(void *)v12;
      *(void *)((char *)v11 + 5) = *(void *)(v12 + 5);
      goto LABEL_25;
    case 0xE:
      uint64_t v4 = 7;
      sub_1CD5EFF98(a2, 7);
      unint64_t v6 = a2 + 1;
      uint64_t v13 = *a2 + a2[1];
      *(_DWORD *)(v13 + 3) = 875983982;
      int v14 = 1852399455;
      goto LABEL_24;
    case 0xF:
      uint64_t v4 = 16;
      sub_1CD5EFF98(a2, 16);
      unint64_t v6 = a2 + 1;
      *(_OWORD *)(*a2 + a2[1]) = *(_OWORD *)"unint64_t";
      goto LABEL_25;
    case 0x10:
      uint64_t v4 = 7;
      sub_1CD5EFF98(a2, 7);
      unint64_t v6 = a2 + 1;
      uint64_t v13 = *a2 + a2[1];
      *(_DWORD *)(v13 + 3) = 1952412257;
      int v14 = 1634231159;
      goto LABEL_24;
    case 0x11:
      uint64_t v4 = 5;
      sub_1CD5EFF98(a2, 5);
      unint64_t v6 = a2 + 1;
      uint64_t v13 = *a2 + a2[1];
      *(unsigned char *)(v13 + 4) = 116;
      int v14 = 1634692198;
      goto LABEL_24;
    case 0x12:
      uint64_t v4 = 6;
      sub_1CD5EFF98(a2, 6);
      unint64_t v6 = a2 + 1;
      uint64_t v13 = *a2 + a2[1];
      *(_WORD *)(v13 + 4) = 25964;
      int v14 = 1651863396;
LABEL_24:
      *(_DWORD *)uint64_t v13 = v14;
      goto LABEL_25;
    case 0x13:
      uint64_t v4 = 11;
      sub_1CD5EFF98(a2, 11);
      unint64_t v6 = a2 + 1;
      uint64_t v9 = *a2 + a2[1];
      *(void *)uint64_t v9 = *(void *)"long double";
      int v10 = 1701601909;
LABEL_30:
      *(_DWORD *)(v9 + 7) = v10;
      goto LABEL_25;
    case 0x14:
      uint64_t v4 = 14;
      sub_1CD5EFF98(a2, 14);
      unint64_t v6 = a2 + 1;
      unint64_t v18 = (void *)(*a2 + a2[1]);
      int v19 = "std::nullptr_t";
LABEL_32:
      *unint64_t v18 = *(void *)v19;
      *(void *)((char *)v18 + 6) = *(void *)(v19 + 6);
LABEL_25:
      *v6 += v4;
      break;
    default:
      break;
  }
  int v22 = *(unsigned __int8 *)(a1 + 12);

  return sub_1CC6BE798(a2, v22, 1, 0);
}

uint64_t llvm::ms_demangle::NodeArrayNode::output(uint64_t a1, void *a2, uint64_t a3)
{
  return llvm::ms_demangle::NodeArrayNode::output(a1, a2, a3, ", ", "");
}

uint64_t llvm::ms_demangle::NodeArrayNode::output(uint64_t result, void *a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  unint64_t v5 = *(void *)(result + 24);
  if (v5)
  {
    uint64_t v10 = result;
    unint64_t result = **(void **)(result + 16);
    if (result)
    {
      unint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)result + 16))(result, a2, a3);
      unint64_t v5 = *(void *)(v10 + 24);
    }
    if (v5 >= 2)
    {
      unint64_t v11 = 1;
      do
      {
        if (a5 != a4)
        {
          sub_1CD5EFF98(a2, a5 - a4);
          memcpy((void *)(*a2 + a2[1]), a4, a5 - a4);
          a2[1] += a5 - a4;
        }
        uint64_t v12 = *(void *)(*(void *)(v10 + 16) + 8 * v11);
        unint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v12 + 16))(v12, a2, a3);
        ++v11;
      }
      while (v11 < *(void *)(v10 + 24));
    }
  }
  return result;
}

void *llvm::ms_demangle::EncodedStringLiteralNode::output(uint64_t a1, uint64_t *a2)
{
  switch(*(_DWORD *)(a1 + 44))
  {
    case 0:
      uint64_t v4 = 1;
      sub_1CD5EFF98(a2, 1);
      unint64_t v5 = a2 + 1;
      *(unsigned char *)(*a2 + a2[1]) = 34;
      goto LABEL_7;
    case 1:
      uint64_t v4 = 2;
      sub_1CD5EFF98(a2, 2);
      uint64_t v6 = *a2;
      unint64_t v5 = a2 + 1;
      uint64_t v7 = a2[1];
      __int16 v8 = 8821;
      goto LABEL_6;
    case 2:
      uint64_t v4 = 2;
      sub_1CD5EFF98(a2, 2);
      uint64_t v6 = *a2;
      unint64_t v5 = a2 + 1;
      uint64_t v7 = a2[1];
      __int16 v8 = 8789;
      goto LABEL_6;
    case 3:
      uint64_t v4 = 2;
      sub_1CD5EFF98(a2, 2);
      uint64_t v6 = *a2;
      unint64_t v5 = a2 + 1;
      uint64_t v7 = a2[1];
      __int16 v8 = 8780;
LABEL_6:
      *(_WORD *)(v6 + v7) = v8;
LABEL_7:
      *v5 += v4;
      break;
    default:
      break;
  }
  uint64_t v10 = *(unsigned char **)(a1 + 24);
  uint64_t v9 = *(unsigned char **)(a1 + 32);
  size_t v11 = v9 - v10;
  if (v9 != v10)
  {
    sub_1CD5EFF98(a2, v9 - v10);
    memcpy((void *)(*a2 + a2[1]), v10, v11);
    a2[1] += v11;
  }
  unint64_t result = sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 34;
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t result = sub_1CD5EFF98(a2, 3);
    uint64_t v13 = *a2 + a2[1];
    *(unsigned char *)(v13 + 2) = 46;
    *(_WORD *)uint64_t v13 = 11822;
    a2[1] += 3;
  }
  return result;
}

void *llvm::ms_demangle::IntegerLiteralNode::output(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    sub_1CD5EFF98(a2, 1);
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    a2[1] = v5 + 1;
    *(unsigned char *)(v4 + v5) = 45;
  }
  unint64_t v6 = *(void *)(a1 + 16);

  return sub_1CD5F2448(a2, v6, 0);
}

void *llvm::ms_demangle::TemplateParameterReferenceNode::output(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(int *)(a1 + 24) > 0)
  {
    char v7 = 123;
  }
  else
  {
    if (*(_DWORD *)(a1 + 56) != 1) {
      goto LABEL_3;
    }
    char v7 = 38;
  }
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = v7;
LABEL_3:
  unint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    unint64_t result = (void *)(*(uint64_t (**)(void *, void *, uint64_t))(*result + 16))(result, a2, a3);
    if (*(int *)(a1 + 24) < 1) {
      return result;
    }
    unint64_t result = sub_1CD5EFF98(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 8236;
    a2[1] += 2;
  }
  if (*(int *)(a1 + 24) >= 1)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8 >= 0) {
      unint64_t v9 = *(void *)(a1 + 32);
    }
    else {
      unint64_t v9 = -v8;
    }
    unint64_t result = sub_1CD5F2448(a2, v9, (unint64_t)v8 >> 63);
    LODWORD(v10) = *(_DWORD *)(a1 + 24);
    if ((int)v10 > 1)
    {
      uint64_t v11 = 5;
      do
      {
        sub_1CD5EFF98(a2, 2);
        *(_WORD *)(*a2 + a2[1]) = 8236;
        a2[1] += 2;
        uint64_t v12 = *(void *)(a1 + 8 * v11);
        if (v12 >= 0) {
          unint64_t v13 = *(void *)(a1 + 8 * v11);
        }
        else {
          unint64_t v13 = -v12;
        }
        unint64_t result = sub_1CD5F2448(a2, v13, (unint64_t)v12 >> 63);
        uint64_t v10 = *(int *)(a1 + 24);
        uint64_t v14 = v11 - 3;
        ++v11;
      }
      while (v14 < v10);
    }
    if ((int)v10 >= 1)
    {
      unint64_t result = sub_1CD5EFF98(a2, 1);
      *(unsigned char *)(*a2 + a2[1]++) = 125;
    }
  }
  return result;
}

void *llvm::ms_demangle::IdentifierNode::outputTemplateParameters(void *result, void *a2, uint64_t a3)
{
  if (result[2])
  {
    uint64_t v5 = result;
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 60;
    (*(void (**)(void, void *, uint64_t))(*(void *)v5[2] + 16))(v5[2], a2, a3);
    unint64_t result = sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 62;
  }
  return result;
}

void *llvm::ms_demangle::DynamicStructorIdentifierNode::output(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v6 = 31;
    sub_1CD5EFF98(a2, 31);
  }
  else
  {
    uint64_t v6 = 25;
    sub_1CD5EFF98(a2, 25);
  }
  a2[1] += v6;
  char v7 = (void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 24);
  sub_1CD5EFF98(a2, 1);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (v8)
  {
    *(unsigned char *)(v9 + v10) = 96;
  }
  else
  {
    *(unsigned char *)(v9 + v10) = 39;
    char v7 = (void *)(a1 + 32);
  }
  ++a2[1];
  (*(void (**)(void, uint64_t *, uint64_t))(*(void *)*v7 + 16))(*v7, a2, a3);
  unint64_t result = sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 10023;
  a2[1] += 2;
  return result;
}

void *llvm::ms_demangle::NamedIdentifierNode::output(void *a1, void *a2, uint64_t a3)
{
  char v7 = (unsigned char *)a1[3];
  uint64_t v6 = (unsigned char *)a1[4];
  size_t v8 = v6 - v7;
  if (v6 != v7)
  {
    sub_1CD5EFF98(a2, v6 - v7);
    memcpy((void *)(*a2 + a2[1]), v7, v8);
    a2[1] += v8;
  }

  return llvm::ms_demangle::IdentifierNode::outputTemplateParameters(a1, a2, a3);
}

void *llvm::ms_demangle::IntrinsicFunctionIdentifierNode::output(uint64_t a1, void *a2, uint64_t a3)
{
  switch(*(unsigned char *)(a1 + 24))
  {
    case 1:
      uint64_t v6 = 12;
      sub_1CD5EFF98(a2, 12);
      char v7 = a2 + 1;
      uint64_t v8 = *a2 + a2[1];
      *(void *)uint64_t v8 = *(void *)"operator new";
      int v9 = 2003136032;
      goto LABEL_49;
    case 2:
      uint64_t v6 = 15;
      sub_1CD5EFF98(a2, 15);
      char v7 = a2 + 1;
      qmemcpy((void *)(*a2 + a2[1]), "operator delete", 15);
      goto LABEL_44;
    case 3:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator=";
      char v11 = 61;
      goto LABEL_30;
    case 4:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator>>";
      __int16 v13 = 15934;
      goto LABEL_43;
    case 5:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator<<";
      __int16 v13 = 15420;
      goto LABEL_43;
    case 6:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator!";
      char v11 = 33;
      goto LABEL_30;
    case 7:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator==";
      __int16 v13 = 15677;
      goto LABEL_43;
    case 8:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator!=";
      __int16 v13 = 15649;
      goto LABEL_43;
    case 9:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator[]";
      __int16 v13 = 23899;
      goto LABEL_43;
    case 0xA:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator->";
      __int16 v13 = 15917;
      goto LABEL_43;
    case 0xB:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator*";
      char v11 = 42;
      goto LABEL_30;
    case 0xC:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator++";
      __int16 v13 = 11051;
      goto LABEL_43;
    case 0xD:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator--";
      __int16 v13 = 11565;
      goto LABEL_43;
    case 0xE:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator-";
      char v11 = 45;
      goto LABEL_30;
    case 0xF:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator+";
      char v11 = 43;
      goto LABEL_30;
    case 0x10:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator&";
      char v11 = 38;
      goto LABEL_30;
    case 0x11:
      uint64_t v6 = 11;
      sub_1CD5EFF98(a2, 11);
      char v7 = a2 + 1;
      uint64_t v14 = *a2 + a2[1];
      *(void *)uint64_t v14 = *(void *)"operator->*";
      int v15 = 708717938;
      goto LABEL_78;
    case 0x12:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator/";
      char v11 = 47;
      goto LABEL_30;
    case 0x13:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator%";
      char v11 = 37;
      goto LABEL_30;
    case 0x14:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator<";
      char v11 = 60;
      goto LABEL_30;
    case 0x15:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator<=";
      __int16 v13 = 15676;
      goto LABEL_43;
    case 0x16:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator>";
      char v11 = 62;
      goto LABEL_30;
    case 0x17:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator>=";
      __int16 v13 = 15678;
      goto LABEL_43;
    case 0x18:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator,";
      char v11 = 44;
      goto LABEL_30;
    case 0x19:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator()";
      __int16 v13 = 10536;
      goto LABEL_43;
    case 0x1A:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator~";
      char v11 = 126;
      goto LABEL_30;
    case 0x1B:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator^";
      char v11 = 94;
      goto LABEL_30;
    case 0x1C:
      uint64_t v6 = 9;
      sub_1CD5EFF98(a2, 9);
      char v7 = a2 + 1;
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"operator|";
      char v11 = 124;
LABEL_30:
      *(unsigned char *)(v10 + 8) = v11;
      goto LABEL_44;
    case 0x1D:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator&&";
      __int16 v13 = 9766;
      goto LABEL_43;
    case 0x1E:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator||";
      __int16 v13 = 31868;
      goto LABEL_43;
    case 0x1F:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator*=";
      __int16 v13 = 15658;
      goto LABEL_43;
    case 0x20:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator+=";
      __int16 v13 = 15659;
      goto LABEL_43;
    case 0x21:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator-=";
      __int16 v13 = 15661;
      goto LABEL_43;
    case 0x22:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator/=";
      __int16 v13 = 15663;
      goto LABEL_43;
    case 0x23:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator%=";
      __int16 v13 = 15653;
      goto LABEL_43;
    case 0x24:
      uint64_t v6 = 11;
      sub_1CD5EFF98(a2, 11);
      char v7 = a2 + 1;
      uint64_t v14 = *a2 + a2[1];
      *(void *)uint64_t v14 = *(void *)"operator>>=";
      int v15 = 1027489394;
      goto LABEL_78;
    case 0x25:
      uint64_t v6 = 11;
      sub_1CD5EFF98(a2, 11);
      char v7 = a2 + 1;
      uint64_t v14 = *a2 + a2[1];
      *(void *)uint64_t v14 = *(void *)"operator<<=";
      int v15 = 1027357810;
      goto LABEL_78;
    case 0x26:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator&=";
      __int16 v13 = 15654;
      goto LABEL_43;
    case 0x27:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator|=";
      __int16 v13 = 15740;
      goto LABEL_43;
    case 0x28:
      uint64_t v6 = 10;
      sub_1CD5EFF98(a2, 10);
      char v7 = a2 + 1;
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"operator^=";
      __int16 v13 = 15710;
LABEL_43:
      *(_WORD *)(v12 + 8) = v13;
      goto LABEL_44;
    case 0x29:
      uint64_t v6 = 12;
      sub_1CD5EFF98(a2, 12);
      char v7 = a2 + 1;
      uint64_t v8 = *a2 + a2[1];
      int v9 = 661811060;
LABEL_49:
      *(_DWORD *)(v8 + 8) = v9;
      goto LABEL_44;
    case 0x2A:
      uint64_t v6 = 22;
      sub_1CD5EFF98(a2, 22);
      char v7 = a2 + 1;
      uint64_t v17 = *a2 + a2[1];
      goto LABEL_55;
    case 0x2B:
      uint64_t v6 = 22;
      sub_1CD5EFF98(a2, 22);
      char v7 = a2 + 1;
      uint64_t v17 = *a2 + a2[1];
      goto LABEL_55;
    case 0x2C:
      uint64_t v6 = 22;
      sub_1CD5EFF98(a2, 22);
      char v7 = a2 + 1;
      uint64_t v17 = *a2 + a2[1];
      goto LABEL_55;
    case 0x2D:
      uint64_t v6 = 22;
      sub_1CD5EFF98(a2, 22);
      char v7 = a2 + 1;
      uint64_t v17 = *a2 + a2[1];
      goto LABEL_55;
    case 0x2E:
      uint64_t v6 = 22;
      sub_1CD5EFF98(a2, 22);
      char v7 = a2 + 1;
      uint64_t v17 = *a2 + a2[1];
LABEL_55:
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *(void *)(v17 + 14) = *(void *)(v18 + 14);
      goto LABEL_44;
    case 0x2F:
      uint64_t v6 = 28;
      sub_1CD5EFF98(a2, 28);
      char v7 = a2 + 1;
      int v19 = (_OWORD *)(*a2 + a2[1]);
      goto LABEL_64;
    case 0x30:
      uint64_t v6 = 26;
      sub_1CD5EFF98(a2, 26);
      char v7 = a2 + 1;
      goto LABEL_44;
    case 0x31:
      uint64_t v6 = 25;
      sub_1CD5EFF98(a2, 25);
      char v7 = a2 + 1;
      uint64_t v21 = (_OWORD *)(*a2 + a2[1]);
      goto LABEL_60;
    case 0x32:
      uint64_t v6 = 25;
      sub_1CD5EFF98(a2, 25);
      char v7 = a2 + 1;
      uint64_t v21 = (_OWORD *)(*a2 + a2[1]);
LABEL_60:
      _OWORD *v21 = *(_OWORD *)v22;
      *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)(v22 + 9);
      goto LABEL_44;
    case 0x33:
      uint64_t v6 = 31;
      sub_1CD5EFF98(a2, 31);
      char v7 = a2 + 1;
      goto LABEL_44;
    case 0x34:
      uint64_t v6 = 19;
      sub_1CD5EFF98(a2, 19);
      char v7 = a2 + 1;
      uint64_t v23 = *a2 + a2[1];
      *(_DWORD *)(v23 + 15) = 660959861;
      goto LABEL_44;
    case 0x35:
      uint64_t v6 = 28;
      sub_1CD5EFF98(a2, 28);
      char v7 = a2 + 1;
      int v19 = (_OWORD *)(*a2 + a2[1]);
LABEL_64:
      *int v19 = *(_OWORD *)v20;
      *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(v20 + 12);
      goto LABEL_44;
    case 0x36:
      uint64_t v6 = 14;
      sub_1CD5EFF98(a2, 14);
      char v7 = a2 + 1;
      qmemcpy((void *)(*a2 + a2[1]), "operator new[]", 14);
      goto LABEL_44;
    case 0x37:
      uint64_t v6 = 17;
      sub_1CD5EFF98(a2, 17);
      char v7 = a2 + 1;
      uint64_t v24 = *a2 + a2[1];
      *(_OWORD *)uint64_t v24 = *(_OWORD *)"operator delete[]";
      char v25 = 93;
      goto LABEL_76;
    case 0x38:
      uint64_t v6 = 30;
      sub_1CD5EFF98(a2, 30);
      char v7 = a2 + 1;
      uint64_t v26 = (_OWORD *)(*a2 + a2[1]);
      goto LABEL_70;
    case 0x39:
      uint64_t v6 = 30;
      sub_1CD5EFF98(a2, 30);
      char v7 = a2 + 1;
      uint64_t v26 = (_OWORD *)(*a2 + a2[1]);
      goto LABEL_70;
    case 0x3A:
      uint64_t v6 = 30;
      sub_1CD5EFF98(a2, 30);
      char v7 = a2 + 1;
      uint64_t v26 = (_OWORD *)(*a2 + a2[1]);
LABEL_70:
      *uint64_t v26 = *(_OWORD *)v27;
      *(_OWORD *)((char *)v26 + 14) = *(_OWORD *)(v27 + 14);
      goto LABEL_44;
    case 0x3B:
      uint64_t v6 = 36;
      sub_1CD5EFF98(a2, 36);
      char v7 = a2 + 1;
      goto LABEL_44;
    case 0x3C:
      uint64_t v6 = 27;
      sub_1CD5EFF98(a2, 27);
      char v7 = a2 + 1;
      goto LABEL_44;
    case 0x3D:
      uint64_t v6 = 40;
      sub_1CD5EFF98(a2, 40);
      char v7 = a2 + 1;
      goto LABEL_44;
    case 0x3E:
      uint64_t v6 = 48;
      sub_1CD5EFF98(a2, 48);
      char v7 = a2 + 1;
      goto LABEL_44;
    case 0x3F:
      uint64_t v6 = 17;
      sub_1CD5EFF98(a2, 17);
      char v7 = a2 + 1;
      uint64_t v24 = *a2 + a2[1];
      *(_OWORD *)uint64_t v24 = *(_OWORD *)"operator co_await";
      char v25 = 116;
LABEL_76:
      *(unsigned char *)(v24 + 16) = v25;
      goto LABEL_44;
    case 0x40:
      uint64_t v6 = 11;
      sub_1CD5EFF98(a2, 11);
      char v7 = a2 + 1;
      uint64_t v14 = *a2 + a2[1];
      *(void *)uint64_t v14 = *(void *)"operator<=>";
      int v15 = 1044200562;
LABEL_78:
      *(_DWORD *)(v14 + 7) = v15;
LABEL_44:
      *v7 += v6;
      break;
    default:
      break;
  }

  return llvm::ms_demangle::IdentifierNode::outputTemplateParameters((void *)a1, a2, a3);
}

void *llvm::ms_demangle::LocalStaticGuardIdentifierNode::output(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = 27;
    unint64_t result = sub_1CD5EFF98(a2, 27);
  }
  else
  {
    uint64_t v4 = 20;
    unint64_t result = sub_1CD5EFF98(a2, 20);
    uint64_t v6 = *a2 + a2[1];
    *(_DWORD *)(v6 + 16) = 660894305;
  }
  a2[1] += v4;
  if (*(_DWORD *)(a1 + 28))
  {
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 123;
    char v7 = sub_1CD5F2448(a2, *(unsigned int *)(a1 + 28), 0);
    unint64_t result = sub_1CD5EFF98(v7, 1);
    *(unsigned char *)(*v7 + v7[1]++) = 125;
  }
  return result;
}

uint64_t llvm::ms_demangle::ConversionOperatorIdentifierNode::output(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1CD5EFF98(a2, 8);
  *(void *)(*a2 + a2[1]) = 0x726F74617265706FLL;
  a2[1] += 8;
  llvm::ms_demangle::IdentifierNode::outputTemplateParameters((void *)a1, a2, a3);
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 32;
  uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 16);

  return v6();
}

void *llvm::ms_demangle::StructorIdentifierNode::output(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 32))
  {
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 126;
  }
  (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), a2, a3);

  return llvm::ms_demangle::IdentifierNode::outputTemplateParameters((void *)a1, a2, a3);
}

void *llvm::ms_demangle::LiteralOperatorIdentifierNode::output(void *a1, void *a2, uint64_t a3)
{
  sub_1CD5EFF98(a2, 11);
  uint64_t v6 = *a2 + a2[1];
  *(void *)uint64_t v6 = *(void *)"operator \"\"";
  *(_DWORD *)(v6 + 7) = 572661874;
  a2[1] += 11;
  uint64_t v8 = (unsigned char *)a1[3];
  char v7 = (unsigned char *)a1[4];
  size_t v9 = v7 - v8;
  if (v7 != v8)
  {
    sub_1CD5EFF98(a2, v7 - v8);
    memcpy((void *)(*a2 + a2[1]), v8, v9);
    a2[1] += v9;
  }

  return llvm::ms_demangle::IdentifierNode::outputTemplateParameters(a1, a2, a3);
}

_WORD *llvm::ms_demangle::FunctionSignatureNode::outputPre(_WORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = result;
  if ((a3 & 4) == 0)
  {
    __int16 v6 = result[11];
    if (v6)
    {
      unint64_t result = sub_1CD5EFF98(a2, 8);
      *(void *)(*a2 + a2[1]) = 0x203A63696C627570;
      a2[1] += 8;
      __int16 v6 = v5[11];
    }
    if ((v6 & 2) != 0)
    {
      unint64_t result = sub_1CD5EFF98(a2, 11);
      uint64_t v9 = *a2 + a2[1];
      *(void *)uint64_t v9 = *(void *)"protected: ";
      *(_DWORD *)(v9 + 7) = 540697701;
      a2[1] += 11;
      __int16 v6 = v5[11];
    }
    if ((v6 & 4) != 0)
    {
      unint64_t result = sub_1CD5EFF98(a2, 9);
      uint64_t v10 = *a2 + a2[1];
      *(void *)uint64_t v10 = *(void *)"private: ";
      *(unsigned char *)(v10 + 8) = 32;
      a2[1] += 9;
    }
  }
  if ((a3 & 8) == 0)
  {
    __int16 v7 = v5[11];
    if ((v7 & 0x18) == 0x10)
    {
      unint64_t result = sub_1CD5EFF98(a2, 7);
      char v11 = (_DWORD *)(*a2 + a2[1]);
      *(_DWORD *)((char *)v11 + 3) = 543385972;
      _DWORD *v11 = 1952543859;
      a2[1] += 7;
      __int16 v7 = v5[11];
    }
    if ((v7 & 0x20) != 0)
    {
      unint64_t result = sub_1CD5EFF98(a2, 8);
      *(void *)(*a2 + a2[1]) = 0x206C617574726976;
      a2[1] += 8;
      __int16 v7 = v5[11];
    }
    if ((v7 & 0x80) != 0)
    {
      unint64_t result = sub_1CD5EFF98(a2, 11);
      uint64_t v12 = *a2 + a2[1];
      *(void *)uint64_t v12 = *(void *)"extern \"C\" ";
      *(_DWORD *)(v12 + 7) = 539116322;
      a2[1] += 11;
    }
  }
  if ((a3 & 0x10) == 0)
  {
    unint64_t result = (_WORD *)*((void *)v5 + 4);
    if (result)
    {
      (*(void (**)(_WORD *, uint64_t *, uint64_t))(*(void *)result + 24))(result, a2, a3);
      unint64_t result = sub_1CD5EFF98(a2, 1);
      *(unsigned char *)(*a2 + a2[1]++) = 32;
    }
  }
  if ((a3 & 1) == 0)
  {
    int v8 = *((unsigned __int8 *)v5 + 20);
    return (_WORD *)sub_1CC6BE950(a2, v8);
  }
  return result;
}

_WORD *llvm::ms_demangle::FunctionSignatureNode::outputPost(_WORD *result, void *a2, uint64_t a3)
{
  uint64_t v5 = result;
  if ((result[11] & 0x100) == 0)
  {
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 40;
    uint64_t v9 = *((void *)v5 + 6);
    if (v9)
    {
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v9 + 16))(v9, a2, a3);
    }
    else
    {
      sub_1CD5EFF98(a2, 4);
      *(_DWORD *)(*a2 + a2[1]) = 1684631414;
      a2[1] += 4;
    }
    if (*((unsigned char *)v5 + 40))
    {
      uint64_t v18 = a2[1];
      if (!v18 || *(unsigned char *)(v18 + *a2 - 1) != 40)
      {
        sub_1CD5EFF98(a2, 2);
        *(_WORD *)(*a2 + a2[1]) = 8236;
        a2[1] += 2;
      }
      sub_1CD5EFF98(a2, 3);
      uint64_t v19 = *a2 + a2[1];
      *(unsigned char *)(v19 + 2) = 46;
      *(_WORD *)uint64_t v19 = 11822;
      a2[1] += 3;
    }
    unint64_t result = sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 41;
  }
  char v6 = *((unsigned char *)v5 + 12);
  if (v6)
  {
    unint64_t result = sub_1CD5EFF98(a2, 6);
    uint64_t v10 = *a2 + a2[1];
    *(_WORD *)(v10 + 4) = 29811;
    *(_DWORD *)uint64_t v10 = 1852793632;
    a2[1] += 6;
    char v6 = *((unsigned char *)v5 + 12);
  }
  if ((v6 & 2) != 0)
  {
    unint64_t result = sub_1CD5EFF98(a2, 9);
    uint64_t v11 = *a2 + a2[1];
    *(void *)uint64_t v11 = *(void *)" volatile";
    *(unsigned char *)(v11 + 8) = 101;
    a2[1] += 9;
    char v6 = *((unsigned char *)v5 + 12);
  }
  if ((v6 & 0x20) != 0)
  {
    unint64_t result = sub_1CD5EFF98(a2, 11);
    uint64_t v12 = *a2 + a2[1];
    *(void *)uint64_t v12 = *(void *)" __restrict";
    *(_DWORD *)(v12 + 7) = 1952672114;
    a2[1] += 11;
    char v6 = *((unsigned char *)v5 + 12);
  }
  if ((v6 & 0x10) != 0)
  {
    unint64_t result = sub_1CD5EFF98(a2, 12);
    uint64_t v13 = *a2 + a2[1];
    *(void *)uint64_t v13 = *(void *)" __unaligned";
    *(_DWORD *)(v13 + 8) = 1684368999;
    a2[1] += 12;
  }
  if (*((unsigned char *)v5 + 56))
  {
    unint64_t result = sub_1CD5EFF98(a2, 9);
    uint64_t v14 = *a2 + a2[1];
    *(void *)uint64_t v14 = *(void *)" noexcept";
    *(unsigned char *)(v14 + 8) = 116;
    a2[1] += 9;
  }
  int v7 = *((_DWORD *)v5 + 6);
  if (v7 == 2)
  {
    uint64_t v15 = 3;
    unint64_t result = sub_1CD5EFF98(a2, 3);
    uint64_t v16 = a2 + 1;
    uint64_t v17 = *a2 + a2[1];
    *(unsigned char *)(v17 + 2) = 38;
    *(_WORD *)uint64_t v17 = 9760;
LABEL_24:
    *v16 += v15;
    goto LABEL_14;
  }
  if (v7 == 1)
  {
    uint64_t v15 = 2;
    unint64_t result = sub_1CD5EFF98(a2, 2);
    uint64_t v16 = a2 + 1;
    *(_WORD *)(*a2 + a2[1]) = 9760;
    goto LABEL_24;
  }
LABEL_14:
  if ((a3 & 0x10) == 0)
  {
    unint64_t result = (_WORD *)*((void *)v5 + 4);
    if (result)
    {
      int v8 = *(uint64_t (**)(void))(*(void *)result + 32);
      return (_WORD *)v8();
    }
  }
  return result;
}

_WORD *llvm::ms_demangle::ThunkSignatureNode::outputPre(_WORD *a1, uint64_t *a2, uint64_t a3)
{
  sub_1CD5EFF98(a2, 9);
  uint64_t v6 = *a2 + a2[1];
  *(void *)uint64_t v6 = *(void *)"[thunk]: ";
  *(unsigned char *)(v6 + 8) = 32;
  a2[1] += 9;

  return llvm::ms_demangle::FunctionSignatureNode::outputPre(a1, a2, a3);
}

_WORD *llvm::ms_demangle::ThunkSignatureNode::outputPost(uint64_t a1, void *a2, uint64_t a3)
{
  if ((*(_WORD *)(a1 + 22) & 0x800) != 0)
  {
    uint64_t v10 = 10;
    sub_1CD5EFF98(a2, 10);
    uint64_t v11 = *a2 + a2[1];
    *(_WORD *)(v11 + 8) = 31602;
    uint64_t v9 = a2;
  }
  else
  {
    if ((*(_WORD *)(a1 + 22) & 0x200) == 0) {
      goto LABEL_10;
    }
    if ((*(_WORD *)(a1 + 22) & 0x400) != 0)
    {
      sub_1CD5EFF98(a2, 12);
      uint64_t v14 = *a2 + a2[1];
      *(_DWORD *)(v14 + 8) = 2071487856;
      a2[1] += 12;
      int v15 = *(_DWORD *)(a1 + 64);
      if (v15 >= 0) {
        unint64_t v16 = v15;
      }
      else {
        unint64_t v16 = -v15;
      }
      uint64_t v17 = sub_1CD5F2448(a2, v16, v15 >> 31);
      uint64_t v10 = 2;
      sub_1CD5EFF98(v17, 2);
      *(_WORD *)(*v17 + v17[1]) = 8236;
      v17[1] += 2;
      int v18 = *(_DWORD *)(a1 + 68);
      if (v18 >= 0) {
        unint64_t v19 = v18;
      }
      else {
        unint64_t v19 = -v18;
      }
      uint64_t v20 = sub_1CD5F2448(v17, v19, v18 >> 31);
      sub_1CD5EFF98(v20, 2);
      *(_WORD *)(*v20 + v20[1]) = 8236;
      v20[1] += 2;
      int v21 = *(_DWORD *)(a1 + 72);
      if (v21 >= 0) {
        unint64_t v22 = v21;
      }
      else {
        unint64_t v22 = -v21;
      }
      uint64_t v9 = sub_1CD5F2448(v20, v22, v21 >> 31);
      sub_1CD5EFF98(v9, 2);
      *(_WORD *)(*v9 + v9[1]) = 8236;
    }
    else
    {
      sub_1CD5EFF98(a2, 10);
      uint64_t v6 = *a2 + a2[1];
      *(_WORD *)(v6 + 8) = 31600;
      a2[1] += 10;
      int v7 = *(_DWORD *)(a1 + 72);
      if (v7 >= 0) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = -v7;
      }
      uint64_t v9 = sub_1CD5F2448(a2, v8, v7 >> 31);
      uint64_t v10 = 2;
      sub_1CD5EFF98(v9, 2);
      *(_WORD *)(*v9 + v9[1]) = 8236;
    }
  }
  v9[1] += v10;
  uint64_t v12 = sub_1CD5F2448(v9, *(unsigned int *)(a1 + 60), 0);
  sub_1CD5EFF98(v12, 2);
  *(_WORD *)(*v12 + v12[1]) = 10109;
  v12[1] += 2;
LABEL_10:

  return llvm::ms_demangle::FunctionSignatureNode::outputPost((_WORD *)a1, a2, a3);
}

uint64_t *llvm::ms_demangle::PointerTypeNode::outputPre(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(_DWORD **)(a1 + 32);
  if (v6[2] == 3) {
    a3 = 1;
  }
  else {
    a3 = a3;
  }
  (*(void (**)(_DWORD *, uint64_t *, uint64_t))(*(void *)v6 + 24))(v6, a2, a3);
  sub_1CC6BEC08((unint64_t)a2);
  if ((*(unsigned char *)(a1 + 12) & 0x10) != 0)
  {
    sub_1CD5EFF98(a2, 12);
    uint64_t v12 = *a2 + a2[1];
    *(void *)uint64_t v12 = *(void *)"__unaligned ";
    *(_DWORD *)(v12 + 8) = 543450478;
    a2[1] += 12;
  }
  int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 8);
  if (v7 == 3)
  {
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 40;
    sub_1CC6BE950(a2, *(unsigned __int8 *)(*(void *)(a1 + 32) + 20));
    sub_1CD5EFF98(a2, 1);
    char v13 = 32;
  }
  else
  {
    if (v7 != 16) {
      goto LABEL_8;
    }
    sub_1CD5EFF98(a2, 1);
    char v13 = 40;
  }
  *(unsigned char *)(*a2 + a2[1]++) = v13;
LABEL_8:
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v8 + 16))(v8, a2, v3);
    sub_1CD5EFF98(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 14906;
    a2[1] += 2;
  }
  int v9 = *(_DWORD *)(a1 + 16);
  if (v9 == 3)
  {
    uint64_t v14 = 2;
    sub_1CD5EFF98(a2, 2);
    int v15 = a2 + 1;
    *(_WORD *)(*a2 + a2[1]) = 9766;
  }
  else
  {
    if (v9 == 2)
    {
      uint64_t v14 = 1;
      sub_1CD5EFF98(a2, 1);
      uint64_t v16 = *a2;
      int v15 = a2 + 1;
      uint64_t v17 = a2[1];
      char v18 = 38;
    }
    else
    {
      if (v9 != 1) {
        goto LABEL_13;
      }
      uint64_t v14 = 1;
      sub_1CD5EFF98(a2, 1);
      uint64_t v16 = *a2;
      int v15 = a2 + 1;
      uint64_t v17 = a2[1];
      char v18 = 42;
    }
    *(unsigned char *)(v16 + v17) = v18;
  }
  *v15 += v14;
LABEL_13:
  int v10 = *(unsigned __int8 *)(a1 + 12);

  return sub_1CC6BE798(a2, v10, 0, 0);
}

uint64_t llvm::ms_demangle::PointerTypeNode::outputPost(uint64_t a1, void *a2)
{
  uint64_t v4 = *(_DWORD **)(a1 + 32);
  int v5 = v4[2];
  if (v5 == 16 || v5 == 3)
  {
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 41;
    uint64_t v4 = *(_DWORD **)(a1 + 32);
  }
  int v7 = *(uint64_t (**)(void))(*(void *)v4 + 32);

  return v7();
}

uint64_t *llvm::ms_demangle::TagTypeNode::outputPre(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((a3 & 2) == 0)
  {
    switch(*(_DWORD *)(a1 + 24))
    {
      case 0:
        uint64_t v8 = 5;
        sub_1CD5EFF98(a2, 5);
        int v9 = a2 + 1;
        uint64_t v10 = *a2 + a2[1];
        *(unsigned char *)(v10 + 4) = 115;
        int v11 = 1935764579;
        goto LABEL_9;
      case 1:
        uint64_t v8 = 6;
        sub_1CD5EFF98(a2, 6);
        int v9 = a2 + 1;
        uint64_t v10 = *a2 + a2[1];
        *(_WORD *)(v10 + 4) = 29795;
        int v11 = 1970435187;
        goto LABEL_9;
      case 2:
        uint64_t v8 = 5;
        sub_1CD5EFF98(a2, 5);
        int v9 = a2 + 1;
        uint64_t v10 = *a2 + a2[1];
        *(unsigned char *)(v10 + 4) = 110;
        int v11 = 1869180533;
LABEL_9:
        *(_DWORD *)uint64_t v10 = v11;
        goto LABEL_10;
      case 3:
        uint64_t v8 = 4;
        sub_1CD5EFF98(a2, 4);
        int v9 = a2 + 1;
        *(_DWORD *)(*a2 + a2[1]) = 1836412517;
LABEL_10:
        *v9 += v8;
        break;
      default:
        break;
    }
    sub_1CD5EFF98(a2, 1);
    *(unsigned char *)(*a2 + a2[1]++) = 32;
  }
  (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a2, a3);
  int v6 = *(unsigned __int8 *)(a1 + 12);

  return sub_1CC6BE798(a2, v6, 1, 0);
}

uint64_t *llvm::ms_demangle::ArrayTypeNode::outputPre(uint64_t a1, uint64_t *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24));
  int v4 = *(unsigned __int8 *)(a1 + 12);

  return sub_1CC6BE798(a2, v4, 1, 0);
}

void *llvm::ms_demangle::ArrayTypeNode::outputDimensionsImpl(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = result[2];
  unint64_t v4 = *(void *)(v3 + 24);
  if (v4)
  {
    int v7 = result;
    unint64_t result = **(void ***)(v3 + 16);
    if (result[2])
    {
      unint64_t result = (void *)(*(uint64_t (**)(void *, void *, uint64_t))(*result + 16))(result, a2, a3);
      unint64_t v4 = *(void *)(v7[2] + 24);
    }
    if (v4 >= 2)
    {
      unint64_t v8 = 1;
      do
      {
        sub_1CD5EFF98(a2, 2);
        *(_WORD *)(*a2 + a2[1]) = 23389;
        a2[1] += 2;
        uint64_t v9 = v7[2];
        unint64_t result = *(void **)(*(void *)(v9 + 16) + 8 * v8);
        if (result[2])
        {
          unint64_t result = (void *)(*(uint64_t (**)(void *, void *, uint64_t))(*result + 16))(result, a2, a3);
          uint64_t v9 = v7[2];
        }
        ++v8;
      }
      while (v8 < *(void *)(v9 + 24));
    }
  }
  return result;
}

uint64_t llvm::ms_demangle::ArrayTypeNode::outputPost(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 91;
  llvm::ms_demangle::ArrayTypeNode::outputDimensionsImpl((void *)a1, a2, a3);
  sub_1CD5EFF98(a2, 1);
  *(unsigned char *)(*a2 + a2[1]++) = 93;
  int v6 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);

  return v6();
}

uint64_t llvm::ms_demangle::SymbolNode::output(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t llvm::ms_demangle::FunctionSymbolNode::output(uint64_t a1, unint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24));
  sub_1CC6BEC08(a2);
  (*(void (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a2, a3);
  int v6 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);

  return v6();
}

uint64_t llvm::ms_demangle::CustomTypeNode::outputPre(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t llvm::ms_demangle::QualifiedNameNode::output(uint64_t a1, void *a2, uint64_t a3)
{
  return llvm::ms_demangle::NodeArrayNode::output(*(void *)(a1 + 16), a2, a3, "::", "");
}

void *llvm::ms_demangle::RttiBaseClassDescriptorNode::output(unsigned int *a1, void *a2)
{
  sub_1CD5EFF98(a2, 32);
  a2[1] += 32;
  unint64_t v4 = sub_1CD5F2448(a2, a1[6], 0);
  sub_1CD5EFF98(v4, 2);
  *(_WORD *)(*v4 + v4[1]) = 8236;
  v4[1] += 2;
  int v5 = a1[7];
  if (v5 >= 0) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = -v5;
  }
  int v7 = sub_1CD5F2448(v4, v6, v5 >> 31);
  sub_1CD5EFF98(v7, 2);
  *(_WORD *)(*v7 + v7[1]) = 8236;
  v7[1] += 2;
  unint64_t v8 = sub_1CD5F2448(v7, a1[8], 0);
  sub_1CD5EFF98(v8, 2);
  *(_WORD *)(*v8 + v8[1]) = 8236;
  v8[1] += 2;
  sub_1CD5F2448(v8, a1[9], 0);
  unint64_t result = sub_1CD5EFF98(a2, 2);
  *(_WORD *)(*a2 + a2[1]) = 10025;
  a2[1] += 2;
  return result;
}

uint64_t llvm::ms_demangle::LocalStaticGuardVariableNode::output(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void *llvm::ms_demangle::VcallThunkIdentifierNode::output(uint64_t a1, void *a2)
{
  sub_1CD5EFF98(a2, 8);
  *(void *)(*a2 + a2[1]) = 0x7B276C6C61637660;
  a2[1] += 8;
  unint64_t v4 = sub_1CD5F2448(a2, *(void *)(a1 + 24), 0);
  unint64_t result = sub_1CD5EFF98(v4, 9);
  uint64_t v6 = *v4 + v4[1];
  *(void *)uint64_t v6 = *(void *)", {flat}}";
  *(unsigned char *)(v6 + 8) = 125;
  v4[1] += 9;
  return result;
}

void *llvm::ms_demangle::SpecialTableSymbolNode::output(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_1CC6BE798(a2, *(unsigned __int8 *)(a1 + 32), 0, 1);
  unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a2, a3);
  if (*(void *)(a1 + 24))
  {
    sub_1CD5EFF98(a2, 6);
    uint64_t v7 = *a2 + a2[1];
    *(_WORD *)(v7 + 4) = 24608;
    *(_DWORD *)uint64_t v7 = 1919903355;
    a2[1] += 6;
    (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), a2, a3);
    unint64_t result = sub_1CD5EFF98(a2, 2);
    *(_WORD *)(*a2 + a2[1]) = 32039;
    a2[1] += 2;
  }
  return result;
}

void sub_1CD5FFDF4()
{
}

uint64_t sub_1CD5FFE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32);

  return v6(a1, a2, a3);
}

void sub_1CD5FFEA0()
{
}

void sub_1CD5FFEB8()
{
}

void sub_1CD5FFED0()
{
}

void sub_1CD5FFEE8()
{
}

void sub_1CD5FFF00()
{
}

void sub_1CD5FFF18()
{
}

void sub_1CD5FFF30()
{
}

void sub_1CD5FFF48()
{
}

void sub_1CD5FFF60()
{
}

void sub_1CD5FFF78()
{
}

void sub_1CD5FFF90()
{
}

void sub_1CD5FFFA8()
{
}

void sub_1CD5FFFC0()
{
}

void sub_1CD5FFFD8()
{
}

void sub_1CD5FFFF0()
{
}

void sub_1CD600008()
{
}

void sub_1CD600020()
{
}

void sub_1CD600038()
{
}

void sub_1CD600050()
{
}

void sub_1CD600068()
{
}

void sub_1CD600080()
{
}

void sub_1CD600098()
{
}

void sub_1CD6000B0()
{
}

void sub_1CD6000C8()
{
}

void sub_1CD6000E0()
{
}

char *llvm::omp::getOpenMPDirectiveName(int a1)
{
  return off_1E684A130[a1];
}

char *llvm::omp::getOpenMPClauseName(int a1)
{
  return off_1E684A450[a1];
}

uint64_t llvm::omp::isAllowedClauseForDirective(unsigned int a1, int a2, int a3)
{
  uint64_t v3 = a1;
  uint64_t result = 0;
  switch(v3)
  {
    case 1:
    case 3:
    case 4:
    case 6:
    case 8:
    case 11:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 35:
    case 52:
    case 79:
    case 87:
    case 89:
    case 91:
      return result;
    case 2:
      if (a2 <= 64)
      {
        BOOL v7 = a3 > 0;
        BOOL v152 = a3 > 50;
        BOOL v153 = a3 > 49;
        if (a2 != 35) {
          BOOL v153 = 0;
        }
        if (a2 != 13) {
          BOOL v152 = v153;
        }
        if (a2 != 11) {
          BOOL v7 = v152;
        }
        BOOL v10 = a3 > 49;
        BOOL v154 = v10;
        if (a2 != 1) {
          BOOL v154 = 0;
        }
        if (a2) {
          BOOL v10 = v154;
        }
        BOOL v13 = a2 <= 10;
        goto LABEL_540;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case 'A':
        case 'H':
          goto LABEL_322;
        case 'B':
        case 'E':
        case 'F':
        case 'G':
          return result;
        case 'C':
        case 'D':
          goto LABEL_23;
        default:
          BOOL v14 = a3 > 0;
          BOOL v15 = v14;
          if (a2 != 93) {
            BOOL v15 = 0;
          }
          BOOL v16 = a2 == 87;
          goto LABEL_350;
      }
      return result;
    case 5:
      BOOL v7 = a3 > 0;
      BOOL v18 = v7;
      if (a2 != 81) {
        BOOL v18 = 0;
      }
      if (a2 != 45) {
        BOOL v7 = v18;
      }
      BOOL v10 = a3 > 0;
      BOOL v19 = v10;
      if (a2 != 40) {
        BOOL v19 = 0;
      }
      if (a2 != 23) {
        BOOL v10 = v19;
      }
      BOOL v13 = a2 <= 44;
      goto LABEL_540;
    case 7:
      BOOL v5 = a2 == 36;
      goto LABEL_3;
    case 9:
      BOOL v5 = a2 == 35;
      goto LABEL_3;
    case 10:
      BOOL v5 = a2 == 46;
      goto LABEL_3;
    case 12:
      BOOL v7 = a3 > 0;
      BOOL v20 = v7;
      BOOL v21 = v7;
      if (a2 != 84) {
        BOOL v21 = 0;
      }
      if (a2 != 75) {
        BOOL v20 = v21;
      }
      if (a2 != 54) {
        BOOL v7 = v20;
      }
      BOOL v10 = a3 > 0;
      BOOL v22 = v10;
      BOOL v23 = v10;
      if (a2 != 44) {
        BOOL v23 = 0;
      }
      if (a2 != 38) {
        BOOL v22 = v23;
      }
      if (a2 != 5) {
        BOOL v10 = v22;
      }
      BOOL v13 = a2 <= 53;
      goto LABEL_540;
    case 13:
      BOOL v14 = a3 > 0;
      BOOL v15 = v14;
      BOOL v24 = v14;
      if (a2 != 81) {
        BOOL v24 = 0;
      }
      if (a2 != 45) {
        BOOL v15 = v24;
      }
      BOOL v16 = a2 == 40;
      goto LABEL_350;
    case 14:
      BOOL v14 = a3 > 50;
      BOOL v15 = v14;
      BOOL v25 = a3 > 0;
      if (a2 != 47) {
        BOOL v25 = 0;
      }
      if (a2 != 8) {
        BOOL v15 = v25;
      }
      BOOL v16 = a2 == 2;
      goto LABEL_350;
    case 15:
      BOOL v7 = a3 > 49;
      BOOL v26 = v7;
      if (a2 != 87) {
        BOOL v26 = 0;
      }
      if (a2 != 20) {
        BOOL v7 = v26;
      }
      BOOL v10 = a3 > 49;
      BOOL v27 = v10;
      if (a2 != 19) {
        BOOL v27 = 0;
      }
      if (a2 != 18) {
        BOOL v10 = v27;
      }
      BOOL v13 = a2 <= 19;
      goto LABEL_540;
    case 16:
      BOOL v7 = a3 > 0;
      BOOL v28 = v7;
      BOOL v29 = v7;
      if (a2 != 63) {
        BOOL v29 = 0;
      }
      if (a2 != 43) {
        BOOL v28 = v29;
      }
      if (a2 != 29) {
        BOOL v7 = v28;
      }
      BOOL v10 = a3 > 0;
      BOOL v30 = v10;
      BOOL v31 = v10;
      if (a2 != 24) {
        BOOL v31 = 0;
      }
      if (a2 != 12) {
        BOOL v30 = v31;
      }
      goto LABEL_269;
    case 17:
      if (a2 <= 42) {
        goto LABEL_79;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case ':':
        case ';':
        case '<':
        case '?':
        case '@':
        case 'B':
        case 'G':
        case 'I':
          goto LABEL_322;
        case '=':
        case '>':
        case 'A':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'H':
          return result;
        default:
          goto LABEL_596;
      }
      return result;
    case 18:
      uint64_t result = 0;
      if (a2 > 42)
      {
        switch(a2)
        {
          case '5':
          case ':':
          case ';':
          case '?':
          case '@':
          case 'B':
          case 'F':
          case 'G':
          case 'I':
          case 'K':
            goto LABEL_322;
          case '6':
          case '7':
          case '8':
          case '9':
          case '<':
          case '=':
          case '>':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'H':
          case 'J':
            return result;
          default:
            goto LABEL_596;
        }
      }
      else
      {
        if (a2 > 23) {
          goto LABEL_673;
        }
        switch(a2)
        {
          case 5:
          case 6:
          case 12:
          case 15:
          case 16:
            goto LABEL_322;
          default:
            return result;
        }
      }
      return result;
    case 19:
      if (a2 <= 35) {
        goto LABEL_524;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case ':':
        case '?':
        case '@':
        case 'B':
        case 'G':
        case 'I':
          goto LABEL_322;
        case ';':
          goto LABEL_23;
        case '<':
        case '=':
        case '>':
        case 'A':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'H':
          return result;
        default:
          goto LABEL_756;
      }
      return result;
    case 20:
      uint64_t result = 0;
      if (a2 > 42)
      {
        switch(a2)
        {
          case '5':
          case ';':
            goto LABEL_23;
          case '6':
          case '7':
          case '8':
          case '9':
          case '<':
          case '=':
          case '>':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'H':
          case 'J':
            return result;
          case ':':
          case '?':
          case '@':
          case 'B':
          case 'F':
          case 'G':
          case 'I':
          case 'K':
            goto LABEL_322;
          default:
            goto LABEL_596;
        }
      }
      else
      {
        if (a2 > 23)
        {
LABEL_673:
          BOOL v158 = a3 <= 0;
          BOOL v14 = a3 > 0;
          BOOL v15 = v14;
          goto LABEL_674;
        }
        switch(a2)
        {
          case 5:
          case 6:
          case 12:
          case 15:
          case 16:
            goto LABEL_322;
          default:
            return result;
        }
      }
      return result;
    case 21:
      uint64_t result = 0;
      if (a2 > 42)
      {
        switch(a2)
        {
          case '5':
          case ';':
            goto LABEL_23;
          case '6':
          case '7':
          case '8':
          case '9':
          case '=':
          case '>':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'H':
          case 'I':
          case 'J':
            return result;
          case ':':
          case '<':
          case '?':
          case '@':
          case 'B':
          case 'F':
          case 'G':
          case 'K':
            goto LABEL_322;
          default:
            goto LABEL_596;
        }
        return result;
      }
      if (a2 <= 23)
      {
        switch(a2)
        {
          case 5:
          case 6:
          case 12:
          case 15:
          case 16:
            goto LABEL_322;
          default:
            return result;
        }
        return result;
      }
      BOOL v14 = a3 > 0;
      BOOL v15 = v14;
      BOOL v158 = a3 <= 49;
LABEL_674:
      int v159 = !v158;
      if (a2 != 36) {
        int v159 = 0;
      }
      if (a2 != 29) {
        BOOL v15 = v159;
      }
      BOOL v16 = a2 == 24;
      goto LABEL_350;
    case 22:
      BOOL v7 = a3 > 0;
      BOOL v35 = v7;
      BOOL v36 = v7;
      if (a2 != 63) {
        BOOL v36 = 0;
      }
      if (a2 != 66) {
        BOOL v35 = v36;
      }
      if (a2 != 71) {
        BOOL v7 = v35;
      }
      BOOL v37 = a3 > 0;
      BOOL v38 = v37;
      if (a2 != 60) {
        BOOL v38 = 0;
      }
      if (a2 != 51) {
        BOOL v37 = v38;
      }
      if (a2 <= 62) {
        BOOL v7 = v37;
      }
      BOOL v10 = a3 > 0;
      BOOL v39 = v10;
      if (a2 != 44) {
        BOOL v39 = 0;
      }
      if (a2 != 43) {
        BOOL v10 = v39;
      }
      BOOL v40 = a3 > 0;
      BOOL v41 = v40;
      if (a2 != 29) {
        BOOL v41 = 0;
      }
      if (a2 != 12) {
        BOOL v40 = v41;
      }
      if (a2 <= 42) {
        BOOL v10 = v40;
      }
      goto LABEL_247;
    case 23:
      if (a2 <= 50)
      {
        BOOL v7 = a3 > 0;
        BOOL v42 = v7;
        BOOL v43 = v7;
        if (a2 != 44) {
          BOOL v43 = 0;
        }
        if (a2 != 43) {
          BOOL v42 = v43;
        }
        if (a2 != 29) {
          BOOL v7 = v42;
        }
        BOOL v10 = a3 > 0;
        BOOL v30 = v10;
        if (a2 != 12) {
          BOOL v30 = 0;
        }
        goto LABEL_166;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case '<':
        case '?':
        case 'B':
        case 'F':
        case 'G':
          goto LABEL_322;
        case '=':
        case '>':
        case '@':
        case 'A':
        case 'C':
        case 'D':
        case 'E':
          return result;
        default:
          BOOL v14 = a3 > 0;
          BOOL v15 = v14;
          BOOL v180 = a2 == 75;
          goto LABEL_792;
      }
      return result;
    case 29:
    case 31:
      BOOL v5 = a2 == 51;
      goto LABEL_3;
    case 30:
      BOOL v14 = a3 > 0;
      BOOL v15 = v14;
      if (a2 != 14) {
        BOOL v15 = 0;
      }
LABEL_133:
      BOOL v16 = a2 == 51;
      goto LABEL_350;
    case 32:
      BOOL v7 = a3 > 0;
      BOOL v44 = a3 > 49;
      if (a2 != 68) {
        BOOL v44 = 0;
      }
      if (a2 != 30) {
        BOOL v7 = v44;
      }
      BOOL v10 = a3 > 49;
      BOOL v45 = v10;
      if (a2 != 1) {
        BOOL v45 = 0;
      }
      if (a2) {
        BOOL v10 = v45;
      }
      BOOL v13 = a2 <= 29;
      goto LABEL_540;
    case 33:
      if (a2 > 50)
      {
        uint64_t result = 0;
        switch(a2)
        {
          case ';':
            goto LABEL_23;
          case '<':
          case '?':
          case 'B':
            goto LABEL_322;
          case '=':
          case '>':
          case '@':
          case 'A':
            return result;
          default:
            BOOL v14 = a3 > 0;
            BOOL v15 = v14;
            BOOL v180 = a2 == 71;
            goto LABEL_792;
        }
        return result;
      }
      BOOL v7 = a3 > 0;
      BOOL v46 = v7;
      BOOL v47 = v7;
      if (a2 != 44) {
        BOOL v47 = 0;
      }
      if (a2 != 43) {
        BOOL v46 = v47;
      }
      if (a2 != 29) {
        BOOL v7 = v46;
      }
      BOOL v10 = a3 > 0;
      BOOL v30 = v10;
      BOOL v48 = a2 == 12;
LABEL_267:
      if (!v48) {
        BOOL v30 = 0;
      }
LABEL_269:
      BOOL v53 = a2 == 6;
      goto LABEL_270;
    case 34:
      if (a2 > 50)
      {
        uint64_t result = 0;
        switch(a2)
        {
          case ';':
            goto LABEL_23;
          case '<':
          case '?':
          case 'B':
          case 'F':
          case 'G':
          case 'K':
            goto LABEL_322;
          case '=':
          case '>':
          case '@':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'H':
          case 'I':
          case 'J':
            return result;
          default:
            BOOL v14 = a3 > 0;
            BOOL v15 = a3 > 49;
            BOOL v180 = a2 == 53;
LABEL_792:
            if (!v180) {
              BOOL v15 = 0;
            }
            goto LABEL_133;
        }
        return result;
      }
      BOOL v7 = a3 > 0;
      BOOL v49 = v7;
      if (a2 != 44) {
        BOOL v49 = 0;
      }
      if (a2 != 43) {
        BOOL v7 = v49;
      }
      BOOL v50 = a3 > 0;
      BOOL v51 = a3 > 49;
      if (a2 != 36) {
        BOOL v51 = 0;
      }
      if (a2 != 29) {
        BOOL v50 = v51;
      }
      if (a2 <= 42) {
        BOOL v7 = v50;
      }
      BOOL v10 = a3 > 0;
      BOOL v30 = v10;
      BOOL v52 = v10;
      if (a2 != 12) {
        BOOL v52 = 0;
      }
      if (a2 != 6) {
        BOOL v30 = v52;
      }
LABEL_166:
      BOOL v53 = a2 == 5;
LABEL_270:
      if (!v53) {
        BOOL v10 = v30;
      }
      BOOL v13 = a2 <= 28;
      goto LABEL_540;
    case 36:
      if (a2 > 42)
      {
        BOOL v7 = a3 > 0;
        BOOL v54 = v7;
        BOOL v55 = v7;
        if (a2 != 86) {
          BOOL v55 = 0;
        }
        BOOL v56 = a2 == 73;
        goto LABEL_357;
      }
      if (a2 <= 27) {
        goto LABEL_692;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case 28:
        case 29:
        case 33:
        case 36:
        case 37:
          goto LABEL_322;
        default:
          return result;
      }
      return result;
    case 37:
      uint64_t result = 0;
      if (a2 <= 48)
      {
        if (a2 <= 15) {
          goto LABEL_588;
        }
        switch(a2)
        {
          case 28:
          case 29:
          case 33:
          case 36:
          case 37:
          case 43:
          case 44:
            goto LABEL_322;
          case 30:
          case 31:
          case 32:
          case 34:
          case 35:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
            return result;
          default:
            goto LABEL_808;
        }
      }
      else
      {
        switch(a2)
        {
          case '1':
          case '2':
          case '8':
          case '>':
          case '?':
          case 'B':
          case 'F':
          case 'I':
          case 'K':
            goto LABEL_322;
          case '3':
          case '4':
          case '6':
          case '7':
          case '9':
          case ':':
          case '<':
          case '=':
          case '@':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'G':
          case 'H':
          case 'J':
            return result;
          case '5':
          case ';':
            goto LABEL_23;
          default:
            goto LABEL_790;
        }
      }
      return result;
    case 38:
      BOOL v14 = a3 > 0;
      BOOL v15 = v14;
      if (a2 != 92) {
        BOOL v15 = 0;
      }
LABEL_175:
      BOOL v16 = a2 == 16;
      goto LABEL_350;
    case 39:
      BOOL v14 = a3 > 0;
      BOOL v15 = v14;
      BOOL v57 = v14;
      if (a2 != 18) {
        BOOL v57 = 0;
      }
      if (a2 != 74) {
        BOOL v15 = v57;
      }
      BOOL v16 = a2 == 80;
      goto LABEL_350;
    case 40:
      if (a2 <= 35) {
        goto LABEL_213;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case ':':
        case '?':
        case '@':
        case 'B':
          goto LABEL_322;
        case ';':
        case '<':
        case '=':
        case '>':
        case 'A':
          return result;
        default:
          goto LABEL_697;
      }
      return result;
    case 41:
      if (a2 <= 42)
      {
        BOOL v7 = a3 > 0;
        BOOL v58 = v7;
        BOOL v59 = v7;
        if (a2 != 36) {
          BOOL v59 = 0;
        }
        if (a2 != 29) {
          BOOL v58 = v59;
        }
        if (a2 != 16) {
          BOOL v7 = v58;
        }
        BOOL v10 = a3 > 0;
        BOOL v60 = v10;
        if (a2 != 15) {
          BOOL v60 = 0;
        }
        BOOL v61 = a2 == 12;
        goto LABEL_537;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case ':':
        case '<':
        case '?':
        case '@':
        case 'B':
        case 'G':
        case 'I':
          goto LABEL_322;
        case ';':
        case '=':
        case '>':
        case 'A':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'H':
          return result;
        default:
          goto LABEL_596;
      }
      return result;
    case 42:
      uint64_t result = 0;
      if (a2 <= 42)
      {
        switch(a2)
        {
          case 5:
          case 6:
          case 12:
          case 15:
          case 16:
            goto LABEL_322;
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
          case 14:
            return result;
          default:
            goto LABEL_663;
        }
      }
      else
      {
        switch(a2)
        {
          case '5':
          case ':':
          case ';':
          case '<':
          case '?':
          case '@':
          case 'B':
          case 'F':
          case 'G':
          case 'I':
          case 'K':
            goto LABEL_322;
          case '6':
          case '7':
          case '8':
          case '9':
          case '=':
          case '>':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'H':
          case 'J':
            return result;
          default:
            goto LABEL_596;
        }
      }
      return result;
    case 43:
      if (a2 <= 42)
      {
        BOOL v7 = a3 > 0;
        BOOL v62 = v7;
        BOOL v63 = v7;
        if (a2 != 36) {
          BOOL v63 = 0;
        }
        BOOL v64 = a2 == 29;
        goto LABEL_527;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case ':':
        case '<':
        case '?':
        case '@':
        case 'B':
        case 'G':
        case 'I':
          goto LABEL_322;
        case ';':
          goto LABEL_23;
        case '=':
        case '>':
        case 'A':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'H':
          return result;
        default:
          goto LABEL_596;
      }
      return result;
    case 44:
      uint64_t result = 0;
      if (a2 <= 42)
      {
        switch(a2)
        {
          case 5:
          case 6:
          case 12:
          case 15:
          case 16:
            goto LABEL_322;
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
          case 14:
            return result;
          default:
            goto LABEL_663;
        }
      }
      else
      {
        switch(a2)
        {
          case '5':
          case ';':
            goto LABEL_23;
          case '6':
          case '7':
          case '8':
          case '9':
          case '=':
          case '>':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'H':
          case 'J':
            return result;
          case ':':
          case '<':
          case '?':
          case '@':
          case 'B':
          case 'F':
          case 'G':
          case 'I':
          case 'K':
            goto LABEL_322;
          default:
            goto LABEL_596;
        }
      }
      return result;
    case 45:
      if (a2 <= 35) {
        goto LABEL_213;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case ':':
        case '?':
        case '@':
        case 'B':
          goto LABEL_322;
        case ';':
        case '<':
        case '=':
        case '>':
        case 'A':
          return result;
        default:
          BOOL v14 = a3 > 0;
          BOOL v15 = v14;
          if (a2 != 36) {
            BOOL v15 = 0;
          }
          goto LABEL_762;
      }
      return result;
    case 46:
      uint64_t result = 0;
      if (a2 <= 48)
      {
        if (a2 <= 15)
        {
          BOOL v14 = a3 > 0;
          BOOL v15 = v14;
          BOOL v162 = v14;
          BOOL v163 = a2 == 15;
          goto LABEL_693;
        }
        switch(a2)
        {
          case 28:
          case 29:
          case 33:
          case 36:
            goto LABEL_322;
          case 30:
          case 31:
          case 32:
          case 34:
          case 35:
            return result;
          default:
            BOOL v14 = a3 > 0;
            BOOL v15 = v14;
            if (a2 != 43) {
              BOOL v15 = 0;
            }
            goto LABEL_175;
        }
      }
      else
      {
        switch(a2)
        {
          case '1':
          case '2':
          case '8':
          case ':':
          case '>':
          case '?':
          case '@':
          case 'B':
            goto LABEL_322;
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '9':
          case ';':
          case '<':
          case '=':
          case 'A':
            return result;
          default:
            BOOL v14 = a3 > 0;
            BOOL v15 = v14;
            BOOL v178 = a2 == 86;
            goto LABEL_760;
        }
      }
      return result;
    case 47:
      uint64_t result = 0;
      if (a2 > 65)
      {
        switch(a2)
        {
          case 'B':
          case 'F':
          case 'I':
          case 'K':
            goto LABEL_322;
          case 'C':
          case 'D':
          case 'E':
          case 'G':
          case 'H':
          case 'J':
            return result;
          default:
            goto LABEL_790;
        }
      }
      else
      {
        switch(a2)
        {
          case 28:
          case 29:
          case 33:
          case 36:
          case 43:
          case 44:
          case 49:
          case 50:
          case 56:
          case 58:
          case 62:
          case 63:
          case 64:
            goto LABEL_322;
          case 30:
          case 31:
          case 32:
          case 34:
          case 35:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 45:
          case 46:
          case 47:
          case 48:
          case 51:
          case 52:
          case 54:
          case 55:
          case 57:
          case 60:
          case 61:
            return result;
          case 53:
          case 59:
            goto LABEL_23;
          default:
            switch(a2)
            {
              case 5:
              case 6:
              case 12:
              case 15:
              case 16:
                goto LABEL_322;
              default:
                return result;
            }
        }
      }
      return result;
    case 48:
      if (a2 <= 42)
      {
        BOOL v7 = a3 > 0;
        BOOL v65 = v7;
        BOOL v66 = v7;
        if (a2 != 36) {
          BOOL v66 = 0;
        }
        if (a2 != 29) {
          BOOL v65 = v66;
        }
        goto LABEL_215;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case ':':
        case '?':
        case '@':
        case 'B':
          goto LABEL_322;
        case ';':
        case '<':
        case '=':
        case '>':
        case 'A':
          return result;
        default:
          goto LABEL_711;
      }
      return result;
    case 49:
      if (a2 > 35)
      {
        uint64_t result = 0;
        switch(a2)
        {
          case ':':
          case '?':
          case '@':
          case 'B':
            goto LABEL_322;
          case ';':
          case '<':
          case '=':
          case '>':
          case 'A':
            return result;
          default:
LABEL_697:
            BOOL v14 = a3 > 0;
            BOOL v15 = v14;
            BOOL v164 = a2 == 73;
            goto LABEL_698;
        }
        return result;
      }
LABEL_213:
      BOOL v7 = a3 > 0;
      BOOL v65 = v7;
      if (a2 != 29) {
        BOOL v65 = 0;
      }
LABEL_215:
      if (a2 != 16) {
        BOOL v7 = v65;
      }
      BOOL v10 = a3 > 0;
      BOOL v60 = v10;
      BOOL v67 = a2 == 15;
      goto LABEL_218;
    case 50:
      BOOL v7 = a3 > 98;
      BOOL v68 = a3 > 0;
      BOOL v69 = v68;
      if (a2 != 82) {
        BOOL v69 = 0;
      }
      if (a2 != 83) {
        BOOL v68 = v69;
      }
      if (a2 != 69) {
        BOOL v7 = v68;
      }
      BOOL v10 = a3 > 0;
      BOOL v70 = v10;
      if (a2 != 25) {
        BOOL v70 = 0;
      }
      if (a2 != 9) {
        BOOL v10 = v70;
      }
      BOOL v13 = a2 <= 68;
      goto LABEL_540;
    case 51:
      BOOL v14 = a3 > 49;
      BOOL v15 = v14;
      if (a2 != 39) {
        BOOL v15 = 0;
      }
      BOOL v16 = a2 == 26;
      goto LABEL_350;
    case 53:
      BOOL v7 = a3 > 0;
      BOOL v71 = v7;
      BOOL v72 = v7;
      if (a2 != 63) {
        BOOL v72 = 0;
      }
      if (a2 != 66) {
        BOOL v71 = v72;
      }
      if (a2 != 51) {
        BOOL v7 = v71;
      }
      BOOL v10 = a3 > 0;
      BOOL v73 = v10;
      BOOL v74 = v10;
      if (a2 != 43) {
        BOOL v74 = 0;
      }
      if (a2 != 29) {
        BOOL v73 = v74;
      }
      BOOL v75 = a2 == 6;
      goto LABEL_245;
    case 54:
      if (a2 <= 52)
      {
        BOOL v7 = a3 > 49;
        BOOL v76 = a3 > 0;
        BOOL v77 = v76;
        if (a2 != 44) {
          BOOL v77 = 0;
        }
        if (a2 != 43) {
          BOOL v76 = v77;
        }
        if (a2 != 36) {
          BOOL v7 = v76;
        }
        BOOL v10 = a3 > 0;
        BOOL v11 = v10;
        BOOL v78 = v10;
        if (a2 != 12) {
          BOOL v78 = 0;
        }
        if (a2 != 6) {
          BOOL v11 = v78;
        }
        BOOL v12 = a2 == 5;
        goto LABEL_15;
      }
      BOOL v7 = a3 > 0;
      BOOL v137 = v7;
      BOOL v138 = v7;
      if (a2 != 75) {
        BOOL v138 = 0;
      }
      if (a2 != 70) {
        BOOL v137 = v138;
      }
      if (a2 != 66) {
        BOOL v7 = v137;
      }
      BOOL v10 = a3 > 49;
      BOOL v106 = v10;
      BOOL v139 = a3 > 0;
      if (a2 != 63) {
        BOOL v139 = 0;
      }
      if (a2 != 59) {
        BOOL v106 = v139;
      }
      BOOL v108 = a2 == 53;
      goto LABEL_414;
    case 55:
      BOOL v7 = a3 > 0;
      BOOL v79 = v7;
      BOOL v80 = v7;
      if (a2 != 63) {
        BOOL v80 = 0;
      }
      if (a2 != 51) {
        BOOL v79 = v80;
      }
      if (a2 != 29) {
        BOOL v7 = v79;
      }
      BOOL v10 = a3 > 0;
      BOOL v30 = v10;
      BOOL v48 = a2 == 14;
      goto LABEL_267;
    case 56:
      if (a2 <= 35)
      {
        BOOL v7 = a3 > 0;
        BOOL v148 = v7;
        BOOL v149 = a3 > 50;
        if (a2 != 34) {
          BOOL v149 = 0;
        }
        if (a2 != 29) {
          BOOL v148 = v149;
        }
        if (a2 != 22) {
          BOOL v7 = v148;
        }
        BOOL v10 = a3 > 0;
        BOOL v150 = v10;
        BOOL v151 = v10;
        if (a2 != 18) {
          BOOL v151 = 0;
        }
        if (a2 != 17) {
          BOOL v150 = v151;
        }
        if (a2 != 6) {
          BOOL v10 = v150;
        }
        BOOL v13 = a2 <= 21;
      }
      else
      {
        BOOL v7 = a3 > 0;
        BOOL v81 = a3 > 49;
        if (a2 != 91) {
          BOOL v81 = 0;
        }
        if (a2 != 66) {
          BOOL v7 = v81;
        }
        BOOL v82 = a3 > 0;
        BOOL v83 = v82;
        if (a2 != 63) {
          BOOL v83 = 0;
        }
        if (a2 != 51) {
          BOOL v82 = v83;
        }
        if (a2 <= 65) {
          BOOL v7 = v82;
        }
        BOOL v10 = a3 > 0;
        BOOL v73 = v10;
        BOOL v84 = v10;
        if (a2 != 46) {
          BOOL v84 = 0;
        }
        if (a2 != 42) {
          BOOL v73 = v84;
        }
        BOOL v75 = a2 == 36;
LABEL_245:
        if (!v75) {
          BOOL v10 = v73;
        }
LABEL_247:
        BOOL v13 = a2 <= 50;
      }
      goto LABEL_540;
    case 57:
      BOOL v7 = a3 > 0;
      BOOL v85 = a3 > 49;
      BOOL v86 = v7;
      if (a2 != 90) {
        BOOL v86 = 0;
      }
      if (a2 != 89) {
        BOOL v85 = v86;
      }
      if (a2 != 46) {
        BOOL v7 = v85;
      }
      BOOL v10 = a3 > 0;
      BOOL v87 = v10;
      if (a2 != 36) {
        BOOL v87 = 0;
      }
      if (a2 != 22) {
        BOOL v10 = v87;
      }
      BOOL v13 = a2 <= 45;
      goto LABEL_540;
    case 58:
    case 59:
      BOOL v7 = a3 > 0;
      BOOL v8 = v7;
      BOOL v9 = v7;
      if (a2 != 51) {
        BOOL v9 = 0;
      }
      if (a2 != 46) {
        BOOL v8 = v9;
      }
      if (a2 != 36) {
        BOOL v7 = v8;
      }
      BOOL v10 = a3 > 0;
      BOOL v11 = v10;
      if (a2 != 22) {
        BOOL v11 = 0;
      }
      goto LABEL_14;
    case 60:
      uint64_t result = 0;
      if (a2 <= 41)
      {
        if (a2 > 28) {
          goto LABEL_701;
        }
        switch(a2)
        {
          case 16:
          case 17:
          case 18:
          case 22:
            goto LABEL_322;
          case 19:
          case 20:
          case 21:
            return result;
          default:
            goto LABEL_735;
        }
        return result;
      }
      if (a2 > 57)
      {
        switch(a2)
        {
          case ':':
          case '?':
          case '@':
          case 'B':
            goto LABEL_322;
          case ';':
          case '<':
          case '=':
          case '>':
          case 'A':
            return result;
          default:
            goto LABEL_759;
        }
        return result;
      }
      BOOL v14 = a3 > 0;
      BOOL v15 = v14;
      BOOL v179 = v14;
      if (a2 != 51) {
        BOOL v179 = 0;
      }
      if (a2 != 46) {
        BOOL v15 = v179;
      }
      BOOL v16 = a2 == 42;
      goto LABEL_350;
    case 61:
      uint64_t result = 0;
      if (a2 <= 35)
      {
        switch(a2)
        {
          case 7:
          case 12:
          case 15:
          case 16:
          case 17:
          case 18:
          case 22:
            goto LABEL_322;
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
          case 14:
          case 19:
          case 20:
          case 21:
            return result;
          default:
            goto LABEL_763;
        }
      }
      else
      {
        switch(a2)
        {
          case '*':
          case '+':
          case ',':
          case '.':
          case '3':
          case ':':
          case ';':
          case '<':
          case '?':
          case '@':
          case 'B':
          case 'G':
          case 'I':
            goto LABEL_322;
          case '-':
          case '/':
          case '0':
          case '1':
          case '2':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case '=':
          case '>':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'H':
            return result;
          default:
            BOOL v14 = a3 > 0;
            BOOL v15 = v14;
            BOOL v164 = a2 == 91;
            goto LABEL_698;
        }
      }
      return result;
    case 62:
      uint64_t result = 0;
      if (a2 <= 28)
      {
        switch(a2)
        {
          case 5:
          case 6:
          case 12:
          case 16:
          case 17:
          case 18:
            goto LABEL_322;
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
          case 14:
          case 15:
            return result;
          default:
            goto LABEL_806;
        }
      }
      else
      {
        switch(a2)
        {
          case 29:
          case 36:
          case 42:
          case 43:
          case 44:
          case 46:
          case 51:
          case 53:
          case 58:
          case 59:
          case 60:
          case 63:
          case 64:
          case 66:
          case 70:
          case 71:
          case 73:
          case 75:
            goto LABEL_322;
          case 30:
          case 31:
          case 32:
          case 33:
          case 35:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 45:
          case 47:
          case 48:
          case 49:
          case 50:
          case 52:
          case 54:
          case 55:
          case 56:
          case 57:
          case 61:
          case 62:
          case 65:
          case 67:
          case 68:
          case 69:
          case 72:
          case 74:
            return result;
          case 34:
            goto LABEL_670;
          default:
            goto LABEL_798;
        }
      }
      return result;
    case 63:
      uint64_t result = 0;
      if (a2 > 35)
      {
        switch(a2)
        {
          case '*':
          case '+':
          case ',':
          case '.':
          case '3':
          case ':':
          case '<':
          case '?':
          case '@':
          case 'B':
          case 'G':
          case 'I':
            goto LABEL_322;
          case '-':
          case '/':
          case '0':
          case '1':
          case '2':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case '=':
          case '>':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'H':
            return result;
          case ';':
            goto LABEL_23;
          default:
            BOOL v14 = a3 > 49;
            BOOL v15 = a3 > 0;
            if (a2 != 36) {
              BOOL v15 = 0;
            }
            BOOL v16 = a2 == 91;
            goto LABEL_350;
        }
        return result;
      }
      if (a2 <= 28)
      {
        switch(a2)
        {
          case 12:
          case 16:
          case 17:
          case 18:
          case 22:
            goto LABEL_322;
          case 13:
          case 14:
          case 15:
          case 19:
          case 20:
          case 21:
            return result;
          default:
            goto LABEL_735;
        }
        return result;
      }
LABEL_763:
      BOOL v14 = a3 > 0;
      BOOL v15 = a3 > 50;
      BOOL v157 = a2 == 34;
LABEL_664:
      if (!v157) {
        BOOL v15 = 0;
      }
      goto LABEL_666;
    case 64:
      uint64_t result = 0;
      if (a2 <= 28)
      {
        switch(a2)
        {
          case 5:
          case 6:
          case 12:
          case 16:
          case 17:
          case 18:
            goto LABEL_322;
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
          case 14:
          case 15:
            return result;
          default:
LABEL_806:
            BOOL v173 = a3 > 0;
            BOOL v174 = a2 == 22;
            goto LABEL_787;
        }
      }
      else
      {
        switch(a2)
        {
          case 29:
          case 36:
          case 42:
          case 43:
          case 44:
          case 46:
          case 51:
          case 58:
          case 60:
          case 63:
          case 64:
          case 66:
          case 70:
          case 71:
          case 73:
          case 75:
            goto LABEL_322;
          case 30:
          case 31:
          case 32:
          case 33:
          case 35:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 45:
          case 47:
          case 48:
          case 49:
          case 50:
          case 52:
          case 54:
          case 55:
          case 56:
          case 57:
          case 61:
          case 62:
          case 65:
          case 67:
          case 68:
          case 69:
          case 72:
          case 74:
            return result;
          case 34:
            goto LABEL_670;
          case 53:
          case 59:
            goto LABEL_23;
          default:
            goto LABEL_782;
        }
      }
      return result;
    case 65:
      if (a2 > 28)
      {
        uint64_t result = 0;
        switch(a2)
        {
          case '""':
            goto LABEL_670;
          case '#':
          case '%':
          case '&':
          case '\'':
          case '(':
          case ')':
          case '-':
          case '/':
          case '0':
          case '1':
          case '2':
          case '4':
          case '6':
          case '7':
          case '8':
          case '9':
          case '<':
          case '=':
          case '>':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'H':
          case 'J':
            return result;
          case '$':
          case '*':
          case '+':
          case ',':
          case '.':
          case '3':
          case ':':
          case '?':
          case '@':
          case 'B':
          case 'F':
          case 'G':
          case 'I':
          case 'K':
            goto LABEL_322;
          case '5':
          case ';':
            goto LABEL_23;
          default:
            BOOL v14 = a3 > 0;
            BOOL v15 = a3 > 49;
            BOOL v157 = a2 == 91;
            goto LABEL_664;
        }
        return result;
      }
      BOOL v7 = a3 > 0;
      BOOL v166 = v7;
      BOOL v167 = v7;
      if (a2 != 22) {
        BOOL v167 = 0;
      }
      if (a2 != 18) {
        BOOL v166 = v167;
      }
      if (a2 != 17) {
        BOOL v7 = v166;
      }
      BOOL v10 = a3 > 0;
      BOOL v168 = v10;
      BOOL v169 = v10;
      if (a2 != 12) {
        BOOL v169 = 0;
      }
      if (a2 != 6) {
        BOOL v168 = v169;
      }
      if (a2 != 5) {
        BOOL v10 = v168;
      }
      BOOL v13 = a2 <= 16;
      goto LABEL_540;
    case 66:
      if (a2 > 45)
      {
        BOOL v7 = a3 > 0;
        BOOL v142 = a3 > 49;
        if (a2 != 91) {
          BOOL v142 = 0;
        }
        if (a2 != 78) {
          BOOL v7 = v142;
        }
        BOOL v143 = a3 > 0;
        BOOL v144 = v143;
        if (a2 != 73) {
          BOOL v144 = 0;
        }
        if (a2 != 66) {
          BOOL v143 = v144;
        }
        if (a2 <= 77) {
          BOOL v7 = v143;
        }
        BOOL v10 = a3 > 0;
        BOOL v145 = v10;
        if (a2 != 63) {
          BOOL v145 = 0;
        }
        if (a2 != 57) {
          BOOL v10 = v145;
        }
        BOOL v146 = a3 > 0;
        BOOL v147 = v146;
        if (a2 != 51) {
          BOOL v147 = 0;
        }
        if (a2 != 46) {
          BOOL v146 = v147;
        }
        if (a2 <= 56) {
          BOOL v10 = v146;
        }
        goto LABEL_416;
      }
      if (a2 <= 28)
      {
        uint64_t result = 0;
        switch(a2)
        {
          case 16:
          case 17:
          case 18:
          case 22:
            goto LABEL_322;
          case 19:
          case 20:
          case 21:
            return result;
          default:
            goto LABEL_735;
        }
        return result;
      }
      BOOL v7 = a3 > 0;
      BOOL v177 = v7;
      if (a2 != 42) {
        BOOL v177 = 0;
      }
      if (a2 != 36) {
        BOOL v7 = v177;
      }
      BOOL v10 = a3 > 0;
      BOOL v11 = a3 > 50;
      if (a2 != 34) {
        BOOL v11 = 0;
      }
      BOOL v12 = a2 == 29;
LABEL_15:
      if (!v12) {
        BOOL v10 = v11;
      }
      BOOL v13 = a2 <= 35;
      goto LABEL_540;
    case 67:
      uint64_t result = 0;
      if (a2 <= 41)
      {
        if (a2 <= 15) {
          goto LABEL_754;
        }
        switch(a2)
        {
          case 16:
          case 17:
          case 18:
          case 22:
          case 24:
          case 29:
            goto LABEL_322;
          case 19:
          case 20:
          case 21:
          case 23:
          case 25:
          case 26:
          case 27:
          case 28:
            return result;
          default:
            goto LABEL_708;
        }
        return result;
      }
      if (a2 <= 62)
      {
        switch(a2)
        {
          case '*':
          case '+':
          case '.':
          case '3':
            goto LABEL_322;
          case ',':
          case '-':
          case '/':
          case '0':
          case '1':
          case '2':
            return result;
          default:
            BOOL v173 = a3 > 0;
            BOOL v174 = a2 == 57;
            goto LABEL_787;
        }
        return result;
      }
      BOOL v7 = a3 > 0;
      BOOL v175 = v7;
      BOOL v176 = a3 > 49;
      if (a2 != 91) {
        BOOL v176 = 0;
      }
      if (a2 != 78) {
        BOOL v175 = v176;
      }
      if (a2 != 73) {
        BOOL v7 = v175;
      }
      BOOL v10 = a3 > 0;
      BOOL v171 = v10;
      if (a2 != 66) {
        BOOL v171 = 0;
      }
      BOOL v172 = a2 == 63;
      goto LABEL_732;
    case 68:
      uint64_t result = 0;
      if (a2 <= 41)
      {
        switch(a2)
        {
          case 12:
          case 15:
          case 16:
          case 17:
          case 18:
          case 22:
          case 24:
          case 29:
          case 36:
            goto LABEL_322;
          case 13:
          case 14:
          case 19:
          case 20:
          case 21:
          case 23:
          case 25:
          case 26:
          case 27:
          case 28:
          case 30:
          case 31:
          case 32:
          case 33:
          case 35:
            return result;
          case 34:
            goto LABEL_670;
          default:
            goto LABEL_735;
        }
      }
      else
      {
        switch(a2)
        {
          case '*':
          case '+':
          case ',':
          case '.':
          case '3':
          case '9':
          case ':':
          case ';':
          case '<':
          case '?':
          case '@':
          case 'B':
          case 'G':
          case 'I':
          case 'N':
            goto LABEL_322;
          case '-':
          case '/':
          case '0':
          case '1':
          case '2':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '=':
          case '>':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'H':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
            return result;
          default:
            goto LABEL_798;
        }
      }
      return result;
    case 69:
      uint64_t result = 0;
      switch(a2)
      {
        case 5:
        case 6:
        case 12:
        case 15:
        case 16:
        case 17:
        case 18:
        case 22:
        case 24:
        case 29:
        case 36:
        case 42:
        case 43:
        case 44:
        case 46:
        case 51:
        case 53:
        case 57:
        case 58:
        case 59:
        case 60:
        case 63:
        case 64:
        case 66:
        case 70:
        case 71:
        case 73:
        case 75:
        case 78:
          goto LABEL_322;
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 13:
        case 14:
        case 19:
        case 20:
        case 21:
        case 23:
        case 25:
        case 26:
        case 27:
        case 28:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 45:
        case 47:
        case 48:
        case 49:
        case 50:
        case 52:
        case 54:
        case 55:
        case 56:
        case 61:
        case 62:
        case 65:
        case 67:
        case 68:
        case 69:
        case 72:
        case 74:
        case 76:
        case 77:
          return result;
        case 34:
          goto LABEL_670;
        default:
LABEL_798:
          BOOL v181 = a3 <= 0;
          goto LABEL_783;
      }
      return result;
    case 70:
      uint64_t result = 0;
      if (a2 > 41)
      {
        switch(a2)
        {
          case '9':
          case ':':
          case '?':
          case '@':
          case 'B':
          case 'G':
          case 'I':
          case 'N':
            goto LABEL_322;
          case ';':
LABEL_23:
            BOOL v17 = a3 <= 49;
            goto LABEL_323;
          case '<':
          case '=':
          case '>':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'H':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
            return result;
          default:
            switch(a2)
            {
              case '*':
              case '+':
              case '.':
              case '3':
                goto LABEL_322;
              case ',':
              case '-':
              case '/':
              case '0':
              case '1':
              case '2':
                return result;
              default:
                goto LABEL_782;
            }
        }
      }
      else
      {
        if (a2 <= 15)
        {
LABEL_754:
          BOOL v14 = a3 > 0;
          BOOL v15 = v14;
          if (a2 != 12) {
            BOOL v15 = 0;
          }
          goto LABEL_349;
        }
        switch(a2)
        {
          case 16:
          case 17:
          case 18:
          case 22:
          case 24:
          case 29:
            goto LABEL_322;
          case 19:
          case 20:
          case 21:
          case 23:
          case 25:
          case 26:
          case 27:
          case 28:
            return result;
          default:
            goto LABEL_708;
        }
      }
      return result;
    case 71:
      uint64_t result = 0;
      switch(a2)
      {
        case 29:
        case 36:
        case 42:
        case 43:
        case 44:
        case 46:
        case 51:
        case 57:
        case 58:
        case 63:
        case 64:
        case 66:
        case 70:
        case 71:
        case 73:
        case 75:
        case 78:
LABEL_322:
          BOOL v17 = a3 <= 0;
          goto LABEL_323;
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 45:
        case 47:
        case 48:
        case 49:
        case 50:
        case 52:
        case 54:
        case 55:
        case 56:
        case 60:
        case 61:
        case 62:
        case 65:
        case 67:
        case 68:
        case 69:
        case 72:
        case 74:
        case 76:
        case 77:
          return result;
        case 34:
LABEL_670:
          BOOL v17 = a3 <= 50;
LABEL_323:
          uint64_t result = !v17;
          break;
        case 53:
        case 59:
          goto LABEL_429;
        default:
          switch(a2)
          {
            case 5:
            case 12:
            case 16:
            case 17:
            case 18:
            case 22:
            case 24:
              goto LABEL_322;
            case 6:
              goto LABEL_421;
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 13:
            case 14:
            case 15:
            case 19:
            case 20:
            case 21:
            case 23:
              return result;
            default:
              goto LABEL_782;
          }
      }
      return result;
    case 72:
      uint64_t result = 0;
      if (a2 > 56)
      {
        switch(a2)
        {
          case 'F':
          case 'I':
          case 'K':
          case 'N':
            goto LABEL_421;
          case 'G':
          case 'H':
          case 'J':
          case 'L':
          case 'M':
            return result;
          default:
LABEL_782:
            BOOL v181 = a3 <= 49;
LABEL_783:
            BOOL v173 = !v181;
            BOOL v174 = a2 == 91;
            goto LABEL_787;
        }
      }
      else if (a2 > 28)
      {
        switch(a2)
        {
          case '""':
            BOOL v6 = a3 <= 50;
            return !v6;
          case '#':
          case '%':
          case '&':
          case '\'':
          case '(':
          case ')':
          case '-':
          case '/':
          case '0':
          case '1':
          case '2':
          case '4':
            return result;
          case '$':
          case '*':
          case '+':
          case ',':
          case '.':
          case '3':
            goto LABEL_421;
          case '5':
            goto LABEL_429;
          default:
            BOOL v173 = a3 > 0;
            BOOL v174 = a2 == 29;
            goto LABEL_787;
        }
      }
      else
      {
        if (a2 <= 16) {
          goto LABEL_588;
        }
        switch(a2)
        {
          case 17:
          case 18:
          case 22:
          case 24:
            goto LABEL_421;
          default:
            return result;
        }
      }
      return result;
    case 73:
      BOOL v7 = a3 > 0;
      BOOL v88 = v7;
      BOOL v89 = v7;
      if (a2 != 36) {
        BOOL v89 = 0;
      }
      if (a2 != 51) {
        BOOL v88 = v89;
      }
      if (a2 != 81) {
        BOOL v7 = v88;
      }
      BOOL v10 = a3 > 0;
      BOOL v11 = v10;
      BOOL v90 = v10;
      if (a2 != 31) {
        BOOL v90 = 0;
      }
      if (a2 != 22) {
        BOOL v11 = v90;
      }
LABEL_14:
      BOOL v12 = a2 == 18;
      goto LABEL_15;
    case 74:
      if (a2 <= 27)
      {
        BOOL v7 = a3 > 0;
        BOOL v160 = v7;
        BOOL v161 = a3 > 49;
        if (a2 != 21) {
          BOOL v161 = 0;
        }
        if (a2 != 18) {
          BOOL v160 = v161;
        }
        if (a2 != 16) {
          BOOL v7 = v160;
        }
        BOOL v10 = a3 > 49;
        BOOL v60 = a3 > 0;
        if (a2 != 6) {
          BOOL v60 = 0;
        }
        BOOL v61 = a2 == 3;
        goto LABEL_537;
      }
      if (a2 <= 61)
      {
        uint64_t result = 0;
        switch(a2)
        {
          case 28:
          case 29:
          case 36:
          case 37:
            goto LABEL_421;
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
            return result;
          default:
            BOOL v173 = a3 > 0;
            BOOL v174 = a2 == 49;
            goto LABEL_787;
        }
        return result;
      }
      BOOL v7 = a3 > 0;
      BOOL v170 = v7;
      if (a2 != 86) {
        BOOL v170 = 0;
      }
      if (a2 != 73) {
        BOOL v7 = v170;
      }
      BOOL v10 = a3 > 0;
      BOOL v171 = v10;
      if (a2 != 63) {
        BOOL v171 = 0;
      }
      BOOL v172 = a2 == 62;
LABEL_732:
      if (!v172) {
        BOOL v10 = v171;
      }
      BOOL v13 = a2 <= 72;
      goto LABEL_540;
    case 75:
      BOOL v14 = a3 > 49;
      BOOL v15 = v14;
      if (a2 != 77) {
        BOOL v15 = 0;
      }
      goto LABEL_349;
    case 76:
      if (a2 > 42)
      {
        BOOL v7 = a3 > 0;
        BOOL v54 = v7;
        BOOL v55 = v7;
        if (a2 != 73) {
          BOOL v55 = 0;
        }
        BOOL v56 = a2 == 86;
LABEL_357:
        if (!v56) {
          BOOL v54 = v55;
        }
        if (a2 != 66) {
          BOOL v7 = v54;
        }
        BOOL v91 = a3 > 0;
        BOOL v92 = v91;
        if (a2 != 63) {
          BOOL v92 = 0;
        }
        if (a2 != 62) {
          BOOL v91 = v92;
        }
        if (a2 <= 65) {
          BOOL v7 = v91;
        }
        BOOL v10 = a3 > 0;
        BOOL v93 = v10;
        if (a2 != 56) {
          BOOL v93 = 0;
        }
        if (a2 != 50) {
          BOOL v10 = v93;
        }
        BOOL v94 = a3 > 0;
        BOOL v95 = v94;
        if (a2 != 49) {
          BOOL v95 = 0;
        }
        if (a2 != 43) {
          BOOL v94 = v95;
        }
        if (a2 <= 49) {
          BOOL v10 = v94;
        }
        BOOL v13 = a2 <= 61;
        goto LABEL_540;
      }
      if (a2 > 27)
      {
        uint64_t result = 0;
        switch(a2)
        {
          case 28:
          case 29:
          case 33:
          case 36:
          case 37:
            goto LABEL_421;
          default:
            return result;
        }
        return result;
      }
LABEL_692:
      BOOL v14 = a3 > 0;
      BOOL v15 = v14;
      BOOL v162 = v14;
      BOOL v163 = a2 == 16;
LABEL_693:
      if (!v163) {
        BOOL v162 = 0;
      }
      if (a2 != 12) {
        BOOL v15 = v162;
      }
LABEL_349:
      BOOL v16 = a2 == 6;
      goto LABEL_350;
    case 77:
      uint64_t result = 0;
      if (a2 <= 48)
      {
        if (a2 <= 15)
        {
LABEL_588:
          BOOL v14 = a3 > 0;
          BOOL v15 = v14;
          BOOL v140 = v14;
          if (a2 != 12) {
            BOOL v140 = 0;
          }
          if (a2 != 6) {
            BOOL v15 = v140;
          }
          BOOL v16 = a2 == 5;
          goto LABEL_350;
        }
        switch(a2)
        {
          case 28:
          case 29:
          case 33:
          case 36:
          case 37:
          case 43:
          case 44:
            goto LABEL_421;
          case 30:
          case 31:
          case 32:
          case 34:
          case 35:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
            return result;
          default:
LABEL_808:
            BOOL v173 = a3 > 0;
            BOOL v174 = a2 == 16;
            goto LABEL_787;
        }
      }
      else
      {
        switch(a2)
        {
          case '1':
          case '2':
          case '8':
          case '>':
          case '?':
          case 'B':
          case 'F':
          case 'I':
          case 'K':
            goto LABEL_421;
          case '3':
          case '4':
          case '6':
          case '7':
          case '9':
          case ':':
          case '<':
          case '=':
          case '@':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'G':
          case 'H':
          case 'J':
            return result;
          case '5':
          case ';':
            goto LABEL_429;
          default:
LABEL_790:
            BOOL v173 = a3 > 0;
            BOOL v174 = a2 == 86;
            goto LABEL_787;
        }
      }
      return result;
    case 78:
      BOOL v96 = a2 == 18;
      int v97 = 49;
      goto LABEL_455;
    case 80:
      BOOL v7 = a3 > 0;
      BOOL v98 = v7;
      if (a2 != 78) {
        BOOL v98 = 0;
      }
      if (a2 != 73) {
        BOOL v7 = v98;
      }
      BOOL v99 = a3 > 0;
      BOOL v100 = v99;
      if (a2 != 66) {
        BOOL v100 = 0;
      }
      if (a2 != 63) {
        BOOL v99 = v100;
      }
      if (a2 <= 72) {
        BOOL v7 = v99;
      }
      BOOL v10 = a3 > 0;
      BOOL v101 = v10;
      if (a2 != 57) {
        BOOL v101 = 0;
      }
      if (a2 != 29) {
        BOOL v10 = v101;
      }
      BOOL v102 = a3 > 0;
      BOOL v103 = v102;
      if (a2 != 16) {
        BOOL v103 = 0;
      }
      if (a2 != 6) {
        BOOL v102 = v103;
      }
      if (a2 <= 28) {
        BOOL v10 = v102;
      }
      BOOL v13 = a2 <= 62;
      goto LABEL_540;
    case 81:
      if (a2 <= 42)
      {
        BOOL v7 = a3 > 0;
        BOOL v155 = v7;
        BOOL v156 = v7;
        if (a2 != 29) {
          BOOL v156 = 0;
        }
        if (a2 != 24) {
          BOOL v155 = v156;
        }
        if (a2 != 16) {
          BOOL v7 = v155;
        }
        BOOL v10 = a3 > 0;
        BOOL v60 = v10;
        BOOL v67 = a2 == 12;
LABEL_218:
        if (!v67) {
          BOOL v60 = 0;
        }
        goto LABEL_536;
      }
      BOOL v7 = a3 > 0;
      BOOL v104 = v7;
      BOOL v105 = v7;
      if (a2 != 78) {
        BOOL v105 = 0;
      }
      if (a2 != 73) {
        BOOL v104 = v105;
      }
      if (a2 != 66) {
        BOOL v7 = v104;
      }
      BOOL v10 = a3 > 0;
      BOOL v106 = v10;
      BOOL v107 = v10;
      if (a2 != 63) {
        BOOL v107 = 0;
      }
      if (a2 != 57) {
        BOOL v106 = v107;
      }
      BOOL v108 = a2 == 43;
LABEL_414:
      if (!v108) {
        BOOL v10 = v106;
      }
LABEL_416:
      BOOL v13 = a2 <= 65;
      goto LABEL_540;
    case 82:
      if (a2 <= 42)
      {
LABEL_79:
        BOOL v7 = a3 > 0;
        BOOL v32 = v7;
        if (a2 != 36) {
          BOOL v32 = 0;
        }
        if (a2 != 29) {
          BOOL v7 = v32;
        }
        BOOL v33 = a3 > 0;
        BOOL v34 = v33;
        if (a2 != 24) {
          BOOL v34 = 0;
        }
        if (a2 != 16) {
          BOOL v33 = v34;
        }
        if (a2 <= 28) {
          BOOL v7 = v33;
        }
        goto LABEL_531;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case '9':
        case ':':
        case ';':
        case '<':
        case '?':
        case '@':
        case 'B':
        case 'G':
        case 'I':
        case 'N':
          goto LABEL_421;
        case '=':
        case '>':
        case 'A':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'H':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
          return result;
        default:
          goto LABEL_596;
      }
      return result;
    case 83:
      if (a2 <= 42) {
        goto LABEL_543;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case '5':
        case '9':
        case ':':
        case ';':
        case '?':
        case '@':
        case 'B':
        case 'F':
        case 'G':
        case 'I':
        case 'K':
        case 'N':
          goto LABEL_421;
        case '6':
        case '7':
        case '8':
        case '<':
        case '=':
        case '>':
        case 'A':
        case 'C':
        case 'D':
        case 'E':
        case 'H':
        case 'J':
        case 'L':
        case 'M':
          return result;
        default:
          goto LABEL_596;
      }
      return result;
    case 84:
      if (a2 > 35)
      {
        uint64_t result = 0;
        switch(a2)
        {
          case '9':
          case ':':
          case '?':
          case '@':
          case 'B':
          case 'G':
          case 'I':
          case 'N':
            goto LABEL_421;
          case ';':
            goto LABEL_429;
          case '<':
          case '=':
          case '>':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'H':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
            return result;
          default:
LABEL_756:
            BOOL v14 = a3 > 0;
            BOOL v15 = v14;
            BOOL v164 = a2 == 43;
LABEL_698:
            if (!v164) {
              BOOL v15 = 0;
            }
            BOOL v16 = a2 == 36;
            goto LABEL_350;
        }
        return result;
      }
LABEL_524:
      BOOL v7 = a3 > 0;
      BOOL v62 = v7;
      BOOL v63 = v7;
      if (a2 != 29) {
        BOOL v63 = 0;
      }
      BOOL v64 = a2 == 24;
LABEL_527:
      if (!v64) {
        BOOL v62 = v63;
      }
      if (a2 != 16) {
        BOOL v7 = v62;
      }
LABEL_531:
      BOOL v10 = a3 > 0;
      BOOL v60 = v10;
      BOOL v131 = v10;
      if (a2 != 15) {
        BOOL v131 = 0;
      }
      BOOL v132 = a2 == 12;
      goto LABEL_534;
    case 85:
      if (a2 <= 42)
      {
LABEL_543:
        BOOL v7 = a3 > 0;
        BOOL v133 = v7;
        if (a2 != 36) {
          BOOL v133 = 0;
        }
        if (a2 != 29) {
          BOOL v7 = v133;
        }
        BOOL v134 = a3 > 0;
        BOOL v135 = v134;
        if (a2 != 24) {
          BOOL v135 = 0;
        }
        if (a2 != 16) {
          BOOL v134 = v135;
        }
        if (a2 <= 28) {
          BOOL v7 = v134;
        }
        BOOL v10 = a3 > 0;
        BOOL v60 = v10;
        BOOL v136 = v10;
        if (a2 != 12) {
          BOOL v136 = 0;
        }
        if (a2 != 6) {
          BOOL v60 = v136;
        }
        BOOL v61 = a2 == 5;
        goto LABEL_537;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case '5':
        case ';':
          goto LABEL_429;
        case '6':
        case '7':
        case '8':
        case '<':
        case '=':
        case '>':
        case 'A':
        case 'C':
        case 'D':
        case 'E':
        case 'H':
        case 'J':
        case 'L':
        case 'M':
          return result;
        case '9':
        case ':':
        case '?':
        case '@':
        case 'B':
        case 'F':
        case 'G':
        case 'I':
        case 'K':
        case 'N':
          goto LABEL_421;
        default:
LABEL_596:
          BOOL v14 = a3 > 0;
          BOOL v15 = v14;
          BOOL v141 = a2 == 44;
          goto LABEL_597;
      }
      return result;
    case 86:
      if (a2 <= 52)
      {
        BOOL v7 = a3 > 49;
        BOOL v109 = a3 > 0;
        BOOL v110 = v109;
        if (a2 != 44) {
          BOOL v110 = 0;
        }
        if (a2 != 43) {
          BOOL v109 = v110;
        }
        if (a2 != 36) {
          BOOL v7 = v109;
        }
        BOOL v111 = a3 > 0;
        BOOL v112 = v111;
        if (a2 != 29) {
          BOOL v112 = 0;
        }
        if (a2 != 24) {
          BOOL v111 = v112;
        }
        if (a2 <= 35) {
          BOOL v7 = v111;
        }
        BOOL v10 = a3 > 0;
        BOOL v113 = v10;
        if (a2 != 16) {
          BOOL v113 = 0;
        }
        if (a2 != 12) {
          BOOL v10 = v113;
        }
        BOOL v114 = a3 > 0;
        BOOL v115 = v114;
        if (a2 != 6) {
          BOOL v115 = 0;
        }
        if (a2 != 5) {
          BOOL v114 = v115;
        }
        if (a2 <= 11) {
          BOOL v10 = v114;
        }
        BOOL v13 = a2 <= 23;
        goto LABEL_540;
      }
      uint64_t result = 0;
      switch(a2)
      {
        case 'F':
        case 'I':
        case 'K':
        case 'N':
          goto LABEL_421;
        case 'G':
        case 'H':
        case 'J':
        case 'L':
        case 'M':
          return result;
        default:
          BOOL v173 = a3 > 49;
          BOOL v174 = a2 == 53;
          goto LABEL_787;
      }
      return result;
    case 88:
      BOOL v96 = a2 == 76;
      int v97 = 50;
LABEL_455:
      BOOL v6 = !v96 || a3 <= v97;
      return !v6;
    case 90:
      BOOL v14 = a3 > 50;
      BOOL v15 = v14;
      if (a2 != 32) {
        BOOL v15 = 0;
      }
      BOOL v16 = a2 == 61;
      goto LABEL_350;
    case 92:
      BOOL v7 = a3 > 0;
      BOOL v116 = v7;
      if (a2 != 55) {
        BOOL v116 = 0;
      }
      if (a2 != 52) {
        BOOL v7 = v116;
      }
      BOOL v117 = a3 > 0;
      BOOL v118 = v117;
      if (a2 != 51) {
        BOOL v118 = 0;
      }
      if (a2 != 42) {
        BOOL v117 = v118;
      }
      if (a2 <= 51) {
        BOOL v7 = v117;
      }
      BOOL v10 = a3 > 0;
      BOOL v119 = v10;
      BOOL v120 = a3 > 50;
      if (a2 != 34) {
        BOOL v120 = 0;
      }
      if (a2 != 22) {
        BOOL v119 = v120;
      }
      if (a2 != 18) {
        BOOL v10 = v119;
      }
      BOOL v13 = a2 <= 41;
      goto LABEL_540;
    case 93:
      BOOL v7 = a3 > 0;
      BOOL v121 = v7;
      BOOL v122 = v7;
      if (a2 != 88) {
        BOOL v122 = 0;
      }
      if (a2 != 51) {
        BOOL v121 = v122;
      }
      if (a2 != 41) {
        BOOL v7 = v121;
      }
      BOOL v10 = a3 > 0;
      BOOL v123 = v10;
      BOOL v124 = v10;
      if (a2 != 22) {
        BOOL v124 = 0;
      }
      if (a2 != 20) {
        BOOL v123 = v124;
      }
      if (a2 != 18) {
        BOOL v10 = v123;
      }
      BOOL v13 = a2 <= 40;
      goto LABEL_540;
    case 94:
      BOOL v7 = a3 > 0;
      BOOL v125 = v7;
      BOOL v126 = v7;
      if (a2 != 66) {
        BOOL v126 = 0;
      }
      if (a2 != 63) {
        BOOL v125 = v126;
      }
      if (a2 != 59) {
        BOOL v7 = v125;
      }
      BOOL v10 = a3 > 49;
      BOOL v127 = a3 > 0;
      BOOL v128 = v127;
      if (a2 != 43) {
        BOOL v128 = 0;
      }
      if (a2 != 12) {
        BOOL v127 = v128;
      }
      if (a2 != 10) {
        BOOL v10 = v127;
      }
      BOOL v13 = a2 <= 58;
      goto LABEL_540;
    case 95:
      BOOL v5 = a2 == 27;
LABEL_3:
      BOOL v6 = !v5 || a3 <= 0;
      return !v6;
    case 96:
      uint64_t result = 0;
      if (a2 > 42)
      {
        switch(a2)
        {
          case ':':
          case ';':
          case '?':
          case '@':
          case 'B':
            goto LABEL_421;
          case '<':
          case '=':
          case '>':
          case 'A':
            return result;
          default:
LABEL_711:
            BOOL v14 = a3 > 0;
            BOOL v15 = v14;
            BOOL v141 = a2 == 73;
LABEL_597:
            if (!v141) {
              BOOL v15 = 0;
            }
            BOOL v16 = a2 == 43;
            goto LABEL_350;
        }
      }
      else
      {
        switch(a2)
        {
          case 6:
          case 12:
          case 15:
          case 16:
            goto LABEL_421;
          case 7:
          case 8:
          case 9:
          case 11:
          case 13:
          case 14:
            return result;
          case 10:
            goto LABEL_429;
          default:
LABEL_663:
            BOOL v14 = a3 > 0;
            BOOL v15 = v14;
            BOOL v157 = a2 == 36;
            goto LABEL_664;
        }
      }
      return result;
    case 97:
      uint64_t result = 0;
      if (a2 > 41)
      {
        if (a2 <= 57)
        {
          switch(a2)
          {
            case '*':
            case '+':
            case '.':
            case '3':
              goto LABEL_421;
            default:
              return result;
          }
        }
        else
        {
          switch(a2)
          {
            case ':':
            case ';':
            case '?':
            case '@':
            case 'B':
              goto LABEL_421;
            case '<':
            case '=':
            case '>':
            case 'A':
              return result;
            default:
LABEL_759:
              BOOL v14 = a3 > 0;
              BOOL v15 = a3 > 49;
              BOOL v178 = a2 == 91;
              goto LABEL_760;
          }
        }
      }
      else
      {
        if (a2 > 33)
        {
LABEL_708:
          BOOL v14 = a3 > 50;
          BOOL v15 = a3 > 0;
          if (a2 != 36) {
            BOOL v15 = 0;
          }
          BOOL v16 = a2 == 34;
          goto LABEL_350;
        }
        switch(a2)
        {
          case 10:
            goto LABEL_429;
          case 11:
          case 13:
          case 14:
          case 19:
          case 20:
          case 21:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
            return result;
          case 12:
          case 15:
          case 16:
          case 17:
          case 18:
          case 22:
          case 29:
            goto LABEL_421;
          default:
LABEL_735:
            BOOL v173 = a3 > 0;
            BOOL v174 = a2 == 6;
LABEL_787:
            uint64_t result = v174 && v173;
            break;
        }
      }
      return result;
    case 98:
      uint64_t result = 0;
      if (a2 <= 41)
      {
        if (a2 > 28)
        {
LABEL_701:
          BOOL v14 = a3 > 0;
          BOOL v15 = a3 > 50;
          BOOL v165 = v14;
          if (a2 != 36) {
            BOOL v165 = 0;
          }
          if (a2 != 34) {
            BOOL v15 = v165;
          }
LABEL_666:
          BOOL v16 = a2 == 29;
          goto LABEL_350;
        }
        switch(a2)
        {
          case 6:
          case 12:
          case 16:
          case 17:
          case 18:
          case 22:
            goto LABEL_421;
          case 10:
LABEL_429:
            BOOL v6 = a3 <= 49;
            return !v6;
          default:
            return result;
        }
      }
      else
      {
        if (a2 > 56)
        {
          if (a2 <= 72)
          {
            switch(a2)
            {
              case '9':
              case ';':
              case '?':
              case 'B':
                goto LABEL_421;
              default:
                return result;
            }
            return result;
          }
          BOOL v14 = a3 > 0;
          BOOL v15 = v14;
          BOOL v182 = a3 > 49;
          if (a2 != 91) {
            BOOL v182 = 0;
          }
          if (a2 != 78) {
            BOOL v15 = v182;
          }
LABEL_762:
          BOOL v16 = a2 == 73;
LABEL_350:
          if (v16) {
            return v14;
          }
          else {
            return v15;
          }
        }
        switch(a2)
        {
          case '*':
          case '+':
          case '.':
          case '3':
            goto LABEL_421;
          default:
            return result;
        }
      }
      return result;
    case 99:
      if (a2 > 56)
      {
        uint64_t result = 0;
        switch(a2)
        {
          case '9':
          case ';':
          case '?':
          case 'B':
LABEL_421:
            BOOL v6 = a3 <= 0;
            return !v6;
          case ':':
          case '<':
          case '=':
          case '>':
          case '@':
          case 'A':
            return result;
          default:
            BOOL v14 = a3 > 0;
            BOOL v15 = v14;
            BOOL v178 = a2 == 78;
LABEL_760:
            if (!v178) {
              BOOL v15 = 0;
            }
            goto LABEL_762;
        }
      }
      else
      {
        BOOL v7 = a3 > 0;
        BOOL v129 = v7;
        BOOL v130 = v7;
        if (a2 != 43) {
          BOOL v130 = 0;
        }
        if (a2 != 29) {
          BOOL v129 = v130;
        }
        if (a2 != 16) {
          BOOL v7 = v129;
        }
        BOOL v10 = a3 > 0;
        BOOL v60 = a3 > 49;
        BOOL v131 = v10;
        if (a2 != 12) {
          BOOL v131 = 0;
        }
        BOOL v132 = a2 == 10;
LABEL_534:
        if (!v132) {
          BOOL v60 = v131;
        }
LABEL_536:
        BOOL v61 = a2 == 6;
LABEL_537:
        if (!v61) {
          BOOL v10 = v60;
        }
        BOOL v13 = a2 <= 15;
LABEL_540:
        if (v13) {
          return v10;
        }
        else {
          return v7;
        }
      }
    default:
      BOOL v14 = a3 > 50;
      BOOL v15 = a3 > 0;
      if (a2 != 7) {
        BOOL v15 = 0;
      }
      BOOL v16 = a2 == 4;
      goto LABEL_350;
  }
}

uint64_t llvm::omp::OMPContext::OMPContext(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F261B6F8;
  *(void *)(a1 + 8) = a1 + 24;
  BOOL v6 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0x600000000;
  sub_1CB90D610(a1 + 8, 1uLL, 0);
  *(_DWORD *)(a1 + 72) = 55;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)(a1 + 88) = 0x800000000;
  uint64_t v7 = 128;
  if (!a2) {
    uint64_t v7 = 64;
  }
  BOOL v8 = *v6;
  uint64_t v9 = **v6 | v7;
  **BOOL v6 = v9;
  int v10 = *(_DWORD *)(a3 + 24);
  int v11 = v10 - 1;
  if (v10 - 1) <= 0x2C && ((0x1B0020F7801FuLL >> v11)) {
    *BOOL v8 = qword_1CFB1C438[v11] | v9;
  }
  if (v10 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"arm", 3uLL)) {
    **v6 |= 0x1000uLL;
  }
  int v12 = *(_DWORD *)(a3 + 24);
  if (v12 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"armeb", 5uLL)) {
    **v6 |= 0x2000uLL;
  }
  int v13 = *(_DWORD *)(a3 + 24);
  if (v13 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"aarch64", 7uLL)) {
    **v6 |= 0x4000uLL;
  }
  int v14 = *(_DWORD *)(a3 + 24);
  if (v14 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"aarch64_be", 0xAuLL)) {
    **v6 |= 0x8000uLL;
  }
  int v15 = *(_DWORD *)(a3 + 24);
  if (v15 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"aarch64_32", 0xAuLL)) {
    **v6 |= 0x10000uLL;
  }
  int v16 = *(_DWORD *)(a3 + 24);
  if (v16 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"ppc", 3uLL)) {
    **v6 |= 0x20000uLL;
  }
  int v17 = *(_DWORD *)(a3 + 24);
  if (v17 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"ppcle", 5uLL)) {
    **v6 |= 0x40000uLL;
  }
  int v18 = *(_DWORD *)(a3 + 24);
  if (v18 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"ppc64", 5uLL)) {
    **v6 |= 0x80000uLL;
  }
  int v19 = *(_DWORD *)(a3 + 24);
  if (v19 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"ppc64le", 7uLL)) {
    **v6 |= 0x100000uLL;
  }
  int v20 = *(_DWORD *)(a3 + 24);
  if (v20 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"x86", 3uLL)) {
    **v6 |= 0x200000uLL;
  }
  int v21 = *(_DWORD *)(a3 + 24);
  if (v21 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"x86_64", 6uLL)) {
    **v6 |= 0x400000uLL;
  }
  int v22 = *(_DWORD *)(a3 + 24);
  if (v22 == 42) {
    **v6 |= 0x400000uLL;
  }
  if (v22 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"amdgcn", 6uLL)) {
    **v6 |= 0x800000uLL;
  }
  int v23 = *(_DWORD *)(a3 + 24);
  if (v23 == llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"nvptx", 5uLL)) {
    **v6 |= 0x1000000uLL;
  }
  int v24 = *(_DWORD *)(a3 + 24);
  int ArchTypeForLLVMName = llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)"nvptx64", 7uLL);
  BOOL v26 = *(uint64_t **)(a1 + 8);
  uint64_t v27 = *v26;
  if (v24 == ArchTypeForLLVMName) {
    uint64_t v27 = *v26 | 0x2000000;
  }
  *BOOL v26 = v27 | 0x200400000800;
  return a1;
}

BOOL llvm::omp::isVariantApplicableInContext(unint64_t **a1, uint64_t a2, int a3)
{
  return sub_1CC6C6C18(a1, a2, 0, a3) != 0;
}

uint64_t llvm::omp::getOpenMPContextTraitSetForSelector(int a1)
{
  return dword_1CFB1C9E4[a1];
}

uint64_t llvm::omp::getOpenMPContextTraitSetForProperty(int a1)
{
  return dword_1CFB1C5A0[a1];
}

char *llvm::omp::getOpenMPContextTraitSetName(int a1)
{
  return off_1E684A7D0[a1];
}

uint64_t llvm::omp::getOpenMPContextTraitSelectorForProperty(int a1)
{
  return dword_1CFB1C6A8[a1];
}

char *llvm::omp::getOpenMPContextTraitSelectorName(int a1)
{
  return off_1E684A7F8[a1];
}

uint64_t llvm::omp::getOpenMPContextTraitPropertyKind(int a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a1 == 2 && a2 == 12) {
    return 49;
  }
  if (a1 == 1)
  {
    switch(a4)
    {
      case 3:
        if (*(_WORD *)a3 != 28518 || *(unsigned char *)(a3 + 2) != 114) {
          return 0;
        }
        return 4;
      case 4:
        if (*(_DWORD *)a3 != 1684892019) {
          return 0;
        }
        return 5;
      case 5:
        if (*(_DWORD *)a3 != 1835099508 || *(unsigned char *)(a3 + 4) != 115) {
          return 0;
        }
        return 2;
      case 6:
        return *(_DWORD *)a3 == 1735549300 && *(_WORD *)(a3 + 4) == 29797;
      case 8:
        if (*(void *)a3 == 0x6C656C6C61726170)
        {
          uint64_t result = 3;
        }
        else
        {
          if (*(void *)a3 != 0x6863746170736964) {
            return 0;
          }
          uint64_t result = 48;
        }
        break;
      default:
        return 0;
    }
  }
  else
  {
    if (!a1) {
      return 0;
    }
    if (a1 == 2)
    {
      switch(a4)
      {
        case 3:
          if (*(_WORD *)a3 == 28771 && *(unsigned char *)(a3 + 2) == 117) {
            return 8;
          }
          if (*(_WORD *)a3 == 28775 && *(unsigned char *)(a3 + 2) == 117) {
            return 9;
          }
          if (*(_WORD *)a3 == 28257 && *(unsigned char *)(a3 + 2) == 121) {
            return 11;
          }
          if (*(_WORD *)a3 == 29281 && *(unsigned char *)(a3 + 2) == 109) {
            return 12;
          }
          if (*(_WORD *)a3 == 28784 && *(unsigned char *)(a3 + 2) == 99) {
            return 17;
          }
          if (*(_WORD *)a3 == 14456 && *(unsigned char *)(a3 + 2) == 54) {
            return 21;
          }
          return 0;
        case 4:
          if (*(_DWORD *)a3 == 1953722216) {
            return 6;
          }
          if (*(_DWORD *)a3 != 1634168934) {
            return 0;
          }
          return 10;
        case 5:
          if (*(_DWORD *)a3 == 1701671521 && *(unsigned char *)(a3 + 4) == 98) {
            return 13;
          }
          if (*(_DWORD *)a3 == 1818456176 && *(unsigned char *)(a3 + 4) == 101) {
            return 18;
          }
          if (*(_DWORD *)a3 == 912486512 && *(unsigned char *)(a3 + 4) == 52) {
            return 19;
          }
          if (*(_DWORD *)a3 == 1953527406 && *(unsigned char *)(a3 + 4) == 120) {
            return 24;
          }
          return 0;
        case 6:
          if (*(_DWORD *)a3 == 1869115246 && *(_WORD *)(a3 + 4) == 29811) {
            return 7;
          }
          if (*(_DWORD *)a3 == 1597388920 && *(_WORD *)(a3 + 4) == 13366) {
            return 22;
          }
          if (*(_DWORD *)a3 == 1734634849 && *(_WORD *)(a3 + 4) == 28259) {
            return 23;
          }
          return 0;
        case 7:
          if (*(_DWORD *)a3 == 1668440417 && *(_DWORD *)(a3 + 3) == 875980899) {
            return 14;
          }
          if (*(_DWORD *)a3 == 912486512 && *(_DWORD *)(a3 + 3) == 1701590070) {
            return 20;
          }
          if (*(_DWORD *)a3 == 1953527406 && *(_DWORD *)(a3 + 3) == 875985012) {
            return 25;
          }
          return 0;
        case 8:
        case 9:
          return 0;
        case 10:
          if (*(void *)a3 == 0x5F34366863726161 && *(_WORD *)(a3 + 8) == 25954) {
            return 15;
          }
          if (*(void *)a3 == 0x5F34366863726161 && *(_WORD *)(a3 + 8) == 12851) {
            return 16;
          }
          break;
        default:
          if (a4 != 32) {
            return 0;
          }
          BOOL v14 = *(void *)a3 == 0x6E65202C796E613CLL && *(void *)(a3 + 8) == 0x7420796C65726974;
          BOOL v15 = v14 && *(void *)(a3 + 16) == 0x6564207465677261;
          if (!v15 || *(void *)(a3 + 24) != 0x3E746E65646E6570) {
            return 0;
          }
          return 49;
      }
      return 0;
    }
    if (a1 != 4)
    {
      if (a1 == 3)
      {
        switch(a4)
        {
          case 2:
            if (*(_WORD *)a3 != 26996) {
              return 0;
            }
            return 38;
          case 3:
            if (*(_WORD *)a3 == 28001 && *(unsigned char *)(a3 + 2) == 100) {
              return 26;
            }
            if (*(_WORD *)a3 == 29281 && *(unsigned char *)(a3 + 2) == 109) {
              return 27;
            }
            if (*(_WORD *)a3 == 29538 && *(unsigned char *)(a3 + 2) == 99) {
              return 28;
            }
            if (*(_WORD *)a3 == 28263 && *(unsigned char *)(a3 + 2) == 117) {
              return 31;
            }
            if (*(_WORD *)a3 == 25193 && *(unsigned char *)(a3 + 2) == 109) {
              return 32;
            }
            if (*(_WORD *)a3 == 25966 && *(unsigned char *)(a3 + 2) == 99) {
              return 35;
            }
            if (*(_WORD *)a3 == 26480 && *(unsigned char *)(a3 + 2) == 105) {
              return 37;
            }
            return 0;
          case 4:
            if (*(_DWORD *)a3 == 2036429411) {
              return 29;
            }
            if (*(_DWORD *)a3 != 1836477548) {
              return 0;
            }
            return 34;
          case 5:
            if (*(_DWORD *)a3 != 1702129257 || *(unsigned char *)(a3 + 4) != 108) {
              return 0;
            }
            return 33;
          case 6:
            if (*(_DWORD *)a3 != 1684633198 || *(_WORD *)(a3 + 4) != 24937) {
              return 0;
            }
            return 36;
          case 7:
            if (*(_DWORD *)a3 == 1768584550 && *(_DWORD *)(a3 + 3) == 1970500713) {
              return 30;
            }
            if (*(_DWORD *)a3 == 1852534389 && *(_DWORD *)(a3 + 3) == 1853321070) {
              return 39;
            }
            return 0;
          case 9:
            if (*(void *)a3 == 0x6C615F686374616DLL && *(unsigned char *)(a3 + 8) == 108) {
              return 40;
            }
            if (*(void *)a3 == 0x6E615F686374616DLL && *(unsigned char *)(a3 + 8) == 121) {
              return 41;
            }
            return 0;
          case 10:
            if (*(void *)a3 != 0x6F6E5F686374616DLL || *(_WORD *)(a3 + 8) != 25966) {
              return 0;
            }
            return 42;
          case 15:
            if (*(void *)a3 == 0x65745F776F6C6C61 && *(void *)(a3 + 7) == 0x736574616C706D65) {
              return 44;
            }
            if (*(void *)a3 == 0x5F64656966696E75 && *(void *)(a3 + 7) == 0x737365726464615FLL) {
              return 50;
            }
            if (*(void *)a3 == 0x5F65737265766572 && *(void *)(a3 + 7) == 0x64616F6C66666F5FLL) {
              return 52;
            }
            return 0;
          case 18:
            if (*(void *)a3 != 0x5F63696D616E7964
              || *(void *)(a3 + 8) != 0x6F7461636F6C6C61
              || *(_WORD *)(a3 + 16) != 29554)
            {
              return 0;
            }
            return 53;
          case 21:
            if (*(void *)a3 == 0x5F656C6261736964
              && *(void *)(a3 + 8) == 0x746963696C706D69
              && *(void *)(a3 + 13) == 0x657361625F746963)
            {
              return 43;
            }
            if (*(void *)a3 == 0x5F64656966696E75
              && *(void *)(a3 + 8) == 0x6D5F646572616873
              && *(void *)(a3 + 13) == 0x79726F6D656D5F64)
            {
              return 51;
            }
            break;
          case 24:
            if (*(void *)a3 != 0x645F63696D6F7461
              || *(void *)(a3 + 8) != 0x6D5F746C75616665
              || *(void *)(a3 + 16) != 0x726564726F5F6D65)
            {
              return 0;
            }
            return 54;
          default:
            return 0;
        }
      }
      return 0;
    }
    if (a4 == 7)
    {
      if (*(_DWORD *)a3 != 1852534389 || *(_DWORD *)(a3 + 3) != 1853321070) {
        return 0;
      }
      return 47;
    }
    else if (a4 == 5)
    {
      if (*(_DWORD *)a3 != 1936482662 || *(unsigned char *)(a3 + 4) != 101) {
        return 0;
      }
      return 46;
    }
    else
    {
      if (a4 != 4 || *(_DWORD *)a3 != 1702195828) {
        return 0;
      }
      return 45;
    }
  }
  return result;
}

uint64_t llvm::omp::getOpenMPContextTraitPropertyForSelector(int a1)
{
  OpenMPContextTraitSelectorName = llvm::omp::getOpenMPContextTraitSelectorName(a1);
  if (v3 == 7)
  {
    BOOL v13 = *(_DWORD *)OpenMPContextTraitSelectorName == 1635151465
       && *(_DWORD *)(OpenMPContextTraitSelectorName + 3) == 1684630625;
    if (v13)
    {
      uint64_t v4 = 0x100000000;
      goto LABEL_247;
    }
    uint64_t v4 = 0;
LABEL_19:
    int v12 = 0;
    int v11 = 0;
    BOOL v10 = a1 == 6;
LABEL_20:
    if (v12 && (v4 & 0x300000000) == 0)
    {
      uint64_t v14 = 0x100000009;
      if (!v10) {
        uint64_t v14 = 0x100000000;
      }
      if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7067 | OpenMPContextTraitSelectorName[2] ^ 0x75)) {
        uint64_t v4 = v14;
      }
      int v12 = 1;
    }
    if (v12 && (v4 & 0x300000000) == 0)
    {
      BOOL v13 = !v10;
      uint64_t v15 = 0x100000000;
      if (!v13) {
        uint64_t v15 = 0x10000000BLL;
      }
      if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6E61 | OpenMPContextTraitSelectorName[2] ^ 0x79)) {
        uint64_t v4 = v15;
      }
    }
    BOOL v16 = a1 == 7;
    char v17 = v12 ^ 1;
    if ((v4 & 0x300000000) != 0) {
      char v17 = 1;
    }
    if ((v17 & 1) == 0)
    {
      uint64_t v18 = 0x10000000CLL;
      if (a1 != 7) {
        uint64_t v18 = 0x100000000;
      }
      if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7261 | OpenMPContextTraitSelectorName[2] ^ 0x6D)) {
        uint64_t v4 = v18;
      }
    }
    uint64_t v19 = v4 & 0x300000000;
    BOOL v20 = v3 == 5;
    if (v3 != 5 || v19)
    {
      if (v3 != 7 || v19)
      {
        char v21 = 0;
        BOOL v22 = v3 == 10;
        if (v3 == 10 && !v19)
        {
          char v21 = 0;
          uint64_t v95 = 0x10000000FLL;
          if (a1 != 7) {
            uint64_t v95 = 0x100000000;
          }
          if (!(*(void *)OpenMPContextTraitSelectorName ^ 0x5F34366863726161 | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                                    + 4) ^ 0x6562))
            uint64_t v4 = v95;
          BOOL v22 = 1;
        }
LABEL_308:
        if (v22 && (v4 & 0x300000000) == 0)
        {
          uint64_t v96 = 0x100000010;
          if (!v16) {
            uint64_t v96 = 0x100000000;
          }
          if (!(*(void *)OpenMPContextTraitSelectorName ^ 0x5F34366863726161 | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                                    + 4) ^ 0x3233))
            uint64_t v4 = v96;
          LOBYTE(v22) = 1;
        }
      }
      else
      {
        char v21 = 0;
        LOBYTE(v22) = 0;
        uint64_t v91 = 0x10000000ELL;
        if (a1 != 7) {
          uint64_t v91 = 0x100000000;
        }
        if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x63726161 | *(_DWORD *)(OpenMPContextTraitSelectorName + 3) ^ 0x34366863)) {
          uint64_t v4 = v91;
        }
      }
    }
    else
    {
      char v21 = 0;
      LOBYTE(v22) = 0;
      uint64_t v23 = 0x10000000DLL;
      if (a1 != 7) {
        uint64_t v23 = 0x100000000;
      }
      if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x656D7261 | OpenMPContextTraitSelectorName[4] ^ 0x62)) {
        uint64_t v4 = v23;
      }
      BOOL v20 = 1;
    }
    if (v12 && (v4 & 0x300000000) == 0)
    {
      uint64_t v24 = 0x100000011;
      if (!v16) {
        uint64_t v24 = 0x100000000;
      }
      if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7070 | OpenMPContextTraitSelectorName[2] ^ 0x63)) {
        uint64_t v4 = v24;
      }
    }
    char v25 = !v20;
    char v26 = (v4 & 0x300000000) != 0 || !v20;
    if ((v26 & 1) == 0)
    {
      uint64_t v27 = 0x100000012;
      if (!v16) {
        uint64_t v27 = 0x100000000;
      }
      if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x6C637070 | OpenMPContextTraitSelectorName[4] ^ 0x65)) {
        uint64_t v4 = v27;
      }
    }
    if ((v4 & 0x300000000) != 0) {
      char v25 = 1;
    }
    if (v25)
    {
      if (v3 != 7 || (v4 & 0x300000000) != 0)
      {
LABEL_69:
        char v30 = v12 ^ 1;
        if ((v4 & 0x300000000) != 0) {
          char v30 = 1;
        }
        if ((v30 & 1) == 0)
        {
          uint64_t v31 = 0x100000015;
          if (!v16) {
            uint64_t v31 = 0x100000000;
          }
          if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x3878 | OpenMPContextTraitSelectorName[2] ^ 0x36)) {
            uint64_t v4 = v31;
          }
        }
        goto LABEL_76;
      }
      int v28 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x36637070 | *(_DWORD *)(OpenMPContextTraitSelectorName + 3) ^ 0x656C3436;
      uint64_t v29 = 0x100000014;
    }
    else
    {
      int v28 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x36637070 | OpenMPContextTraitSelectorName[4] ^ 0x34;
      uint64_t v29 = 0x100000013;
    }
    if (!v16) {
      uint64_t v29 = 0x100000000;
    }
    if (!v28) {
      uint64_t v4 = v29;
    }
    goto LABEL_69;
  }
  uint64_t v4 = 0;
  switch(v3)
  {
    case 3:
      int v5 = *(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6F66;
      int v6 = OpenMPContextTraitSelectorName[2] ^ 0x72;
      uint64_t v7 = 0x100000004;
      uint64_t v8 = 0x100000000;
      if (a1 != 4) {
        uint64_t v7 = 0x100000000;
      }
      int v9 = v5 | v6;
      if (v5 | v6) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = v7;
      }
      BOOL v10 = a1 == 6;
      int v11 = 0;
      if (v9)
      {
        if (a1 == 6) {
          uint64_t v8 = 0x100000008;
        }
        if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7063 | OpenMPContextTraitSelectorName[2] ^ 0x75)) {
          uint64_t v4 = v8;
        }
      }
      int v12 = 1;
      goto LABEL_20;
    case 4:
      uint64_t v4 = 0x100000005;
      uint64_t v97 = 0x100000000;
      if (a1 != 5) {
        uint64_t v4 = 0x100000000;
      }
      if (*(_DWORD *)OpenMPContextTraitSelectorName != 1684892019)
      {
        if (a1 == 6) {
          uint64_t v97 = 0x100000006;
        }
        if (*(_DWORD *)OpenMPContextTraitSelectorName == 1953722216) {
          uint64_t v4 = v97;
        }
        else {
          uint64_t v4 = 0;
        }
      }
      if ((v4 & 0x300000000) == 0)
      {
        uint64_t v98 = 0x10000000ALL;
        if (a1 != 6) {
          uint64_t v98 = 0x100000000;
        }
        if (*(_DWORD *)OpenMPContextTraitSelectorName == 1634168934) {
          uint64_t v4 = v98;
        }
      }
      BOOL v20 = 0;
      int v11 = 0;
      int v12 = 0;
      BOOL v22 = 0;
      BOOL v16 = a1 == 7;
      char v21 = 1;
      goto LABEL_308;
    case 5:
      uint64_t v99 = 0x100000000;
      if (a1 == 2) {
        uint64_t v99 = 0x100000002;
      }
      BOOL v100 = (*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x6D616574 | OpenMPContextTraitSelectorName[4] ^ 0x73) == 0;
      goto LABEL_352;
    case 6:
      uint64_t v4 = (a1 == 1) | 0x100000000;
      int v101 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x67726174 | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                      + 2) ^ 0x7465;
      if (v101) {
        uint64_t v4 = 0;
      }
      BOOL v10 = a1 == 6;
      if (!v101)
      {
        int v12 = 0;
        int v11 = 1;
        goto LABEL_20;
      }
      BOOL v20 = 0;
      char v21 = 0;
      LOBYTE(v12) = 0;
      LOBYTE(v22) = 0;
      uint64_t v102 = 0x100000007;
      if (a1 != 6) {
        uint64_t v102 = 0x100000000;
      }
      if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x6F686F6E | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                      + 2) ^ 0x7473))
        uint64_t v4 = v102;
      BOOL v16 = a1 == 7;
      int v11 = 1;
      break;
    case 8:
      uint64_t v99 = 0x100000000;
      if (a1 == 3) {
        uint64_t v99 = 0x100000003;
      }
      BOOL v100 = *(void *)OpenMPContextTraitSelectorName == 0x6C656C6C61726170;
LABEL_352:
      if (v100) {
        uint64_t v4 = v99;
      }
      else {
        uint64_t v4 = 0;
      }
      goto LABEL_19;
    default:
      goto LABEL_19;
  }
LABEL_76:
  if (v11 && (v4 & 0x300000000) == 0)
  {
    uint64_t v32 = 0x100000016;
    if (!v16) {
      uint64_t v32 = 0x100000000;
    }
    if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x5F363878 | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                    + 2) ^ 0x3436))
      uint64_t v4 = v32;
  }
  char v33 = v11 ^ 1;
  if ((v4 & 0x300000000) != 0) {
    char v33 = 1;
  }
  if ((v33 & 1) == 0)
  {
    uint64_t v34 = 0x100000017;
    if (!v16) {
      uint64_t v34 = 0x100000000;
    }
    if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x67646D61 | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                    + 2) ^ 0x6E63))
      uint64_t v4 = v34;
  }
  char v35 = !v20;
  if ((v4 & 0x300000000) != 0) {
    char v35 = 1;
  }
  if (v35)
  {
    if (v3 != 7 || (v4 & 0x300000000) != 0) {
      goto LABEL_97;
    }
    int v36 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x7470766E | *(_DWORD *)(OpenMPContextTraitSelectorName + 3) ^ 0x34367874;
    uint64_t v37 = 0x100000019;
  }
  else
  {
    int v36 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x7470766E | OpenMPContextTraitSelectorName[4] ^ 0x78;
    uint64_t v37 = 0x100000018;
  }
  BOOL v13 = !v16;
  uint64_t v38 = 0x100000000;
  if (!v13) {
    uint64_t v38 = v37;
  }
  if (!v36) {
    uint64_t v4 = v38;
  }
LABEL_97:
  char v39 = v12 ^ 1;
  if ((v4 & 0x300000000) != 0) {
    char v40 = 1;
  }
  else {
    char v40 = v12 ^ 1;
  }
  if ((v40 & 1) == 0)
  {
    uint64_t v41 = 0x10000001ALL;
    if (a1 != 8) {
      uint64_t v41 = 0x100000000;
    }
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6D61 | OpenMPContextTraitSelectorName[2] ^ 0x64)) {
      uint64_t v4 = v41;
    }
  }
  if ((v4 & 0x300000000) != 0) {
    char v39 = 1;
  }
  if ((v39 & 1) == 0)
  {
    uint64_t v42 = 0x10000001BLL;
    if (a1 != 8) {
      uint64_t v42 = 0x100000000;
    }
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7261 | OpenMPContextTraitSelectorName[2] ^ 0x6D)) {
      uint64_t v4 = v42;
    }
  }
  char v43 = v12 ^ 1;
  if ((v4 & 0x300000000) != 0) {
    char v43 = 1;
  }
  if ((v43 & 1) == 0)
  {
    uint64_t v44 = 0x10000001CLL;
    if (a1 != 8) {
      uint64_t v44 = 0x100000000;
    }
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x7362 | OpenMPContextTraitSelectorName[2] ^ 0x63)) {
      uint64_t v4 = v44;
    }
  }
  char v45 = v21 ^ 1;
  if ((v4 & 0x300000000) != 0) {
    char v45 = 1;
  }
  if ((v45 & 1) == 0)
  {
    uint64_t v46 = 0x10000001DLL;
    if (a1 != 8) {
      uint64_t v46 = 0x100000000;
    }
    if (*(_DWORD *)OpenMPContextTraitSelectorName == 2036429411) {
      uint64_t v4 = v46;
    }
  }
  if (v3 == 7 && (v4 & 0x300000000) == 0)
  {
    uint64_t v47 = 0x10000001ELL;
    if (a1 != 8) {
      uint64_t v47 = 0x100000000;
    }
    if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x696A7566 | *(_DWORD *)(OpenMPContextTraitSelectorName + 3) ^ 0x75737469)) {
      uint64_t v4 = v47;
    }
  }
  char v48 = v12 ^ 1;
  if ((v4 & 0x300000000) != 0) {
    char v49 = 1;
  }
  else {
    char v49 = v12 ^ 1;
  }
  if ((v49 & 1) == 0)
  {
    uint64_t v50 = 0x10000001FLL;
    if (a1 != 8) {
      uint64_t v50 = 0x100000000;
    }
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6E67 | OpenMPContextTraitSelectorName[2] ^ 0x75)) {
      uint64_t v4 = v50;
    }
  }
  if ((v4 & 0x300000000) != 0) {
    char v48 = 1;
  }
  if ((v48 & 1) == 0)
  {
    uint64_t v51 = 0x100000020;
    if (a1 != 8) {
      uint64_t v51 = 0x100000000;
    }
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6269 | OpenMPContextTraitSelectorName[2] ^ 0x6D)) {
      uint64_t v4 = v51;
    }
  }
  char v52 = !v20;
  if ((v4 & 0x300000000) != 0) {
    char v52 = 1;
  }
  if ((v52 & 1) == 0)
  {
    uint64_t v53 = 0x100000021;
    if (a1 != 8) {
      uint64_t v53 = 0x100000000;
    }
    if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x65746E69 | OpenMPContextTraitSelectorName[4] ^ 0x6C)) {
      uint64_t v4 = v53;
    }
  }
  char v54 = v21 ^ 1;
  if ((v4 & 0x300000000) != 0) {
    char v54 = 1;
  }
  if ((v54 & 1) == 0)
  {
    uint64_t v55 = 0x100000022;
    if (a1 != 8) {
      uint64_t v55 = 0x100000000;
    }
    if (*(_DWORD *)OpenMPContextTraitSelectorName == 1836477548) {
      uint64_t v4 = v55;
    }
  }
  char v56 = v12 ^ 1;
  if ((v4 & 0x300000000) != 0) {
    char v56 = 1;
  }
  if ((v56 & 1) == 0)
  {
    uint64_t v57 = 0x100000023;
    if (a1 != 8) {
      uint64_t v57 = 0x100000000;
    }
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x656E | OpenMPContextTraitSelectorName[2] ^ 0x63)) {
      uint64_t v4 = v57;
    }
  }
  char v58 = v11 ^ 1;
  if ((v4 & 0x300000000) != 0) {
    char v58 = 1;
  }
  if ((v58 & 1) == 0)
  {
    uint64_t v59 = 0x100000024;
    if (a1 != 8) {
      uint64_t v59 = 0x100000000;
    }
    if (!(*(_DWORD *)OpenMPContextTraitSelectorName ^ 0x6469766E | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                    + 2) ^ 0x6169))
      uint64_t v4 = v59;
  }
  char v60 = v12 ^ 1;
  if ((v4 & 0x300000000) != 0) {
    char v60 = 1;
  }
  if ((v60 & 1) == 0)
  {
    uint64_t v61 = 0x100000025;
    if (a1 != 8) {
      uint64_t v61 = 0x100000000;
    }
    if (!(*(unsigned __int16 *)OpenMPContextTraitSelectorName ^ 0x6770 | OpenMPContextTraitSelectorName[2] ^ 0x69)) {
      uint64_t v4 = v61;
    }
  }
  uint64_t v62 = v4 & 0x300000000;
  if (v3 == 2 && !v62)
  {
    unsigned int v63 = (bswap32(*(unsigned __int16 *)OpenMPContextTraitSelectorName) >> 16) - 29801;
    uint64_t v64 = 0x100000026;
LABEL_185:
    if (a1 != 8) {
      uint64_t v64 = 0x100000000;
    }
    if (!v63) {
      uint64_t v4 = v64;
    }
    BOOL v65 = a1 == 9;
    goto LABEL_190;
  }
  if (v3 == 7 && !v62)
  {
    unsigned int v88 = 1970170734;
    unsigned int v89 = bswap32(*(_DWORD *)OpenMPContextTraitSelectorName);
    if (v89 == 1970170734
      && (unsigned int v88 = 1852798830, v89 = bswap32(*(_DWORD *)(OpenMPContextTraitSelectorName + 3)), v89 == 1852798830))
    {
      unsigned int v63 = 0;
    }
    else if (v89 < v88)
    {
      unsigned int v63 = -1;
    }
    else
    {
      unsigned int v63 = 1;
    }
    uint64_t v64 = 0x100000027;
    goto LABEL_185;
  }
  BOOL v65 = a1 == 9;
  BOOL v92 = v3 == 9;
  if (v3 == 9 && !v62)
  {
    uint64_t v93 = 0x100000028;
    if (a1 != 9) {
      uint64_t v93 = 0x100000000;
    }
    if (!(*(void *)OpenMPContextTraitSelectorName ^ 0x6C615F686374616DLL | OpenMPContextTraitSelectorName[8] ^ 0x6CLL)) {
      uint64_t v4 = v93;
    }
    BOOL v92 = 1;
  }
  if (v92 && (v4 & 0x300000000) == 0)
  {
    uint64_t v94 = 0x100000029;
    if (a1 != 9) {
      uint64_t v94 = 0x100000000;
    }
    if (!(*(void *)OpenMPContextTraitSelectorName ^ 0x6E615F686374616DLL | OpenMPContextTraitSelectorName[8] ^ 0x79)) {
      uint64_t v4 = v94;
    }
  }
LABEL_190:
  char v66 = !v22;
  if ((v4 & 0x300000000) != 0) {
    char v66 = 1;
  }
  if ((v66 & 1) == 0)
  {
    uint64_t v67 = 0x10000002ALL;
    if (!v65) {
      uint64_t v67 = 0x100000000;
    }
    if (!(*(void *)OpenMPContextTraitSelectorName ^ 0x6F6E5F686374616DLL | *((unsigned __int16 *)OpenMPContextTraitSelectorName
                                                                              + 4) ^ 0x656ELL))
      uint64_t v4 = v67;
  }
  uint64_t v68 = v4 & 0x300000000;
  if (v3 != 21 || v68)
  {
    BOOL v69 = v3 == 15;
    if (v3 == 15 && !v68)
    {
      BOOL v13 = !v65;
      uint64_t v90 = 0x100000000;
      if (!v13) {
        uint64_t v90 = 0x10000002CLL;
      }
      if (!(*(void *)OpenMPContextTraitSelectorName ^ 0x65745F776F6C6C61 | *(void *)(OpenMPContextTraitSelectorName
                                                                                          + 7) ^ 0x736574616C706D65))
        uint64_t v4 = v90;
      BOOL v69 = 1;
    }
  }
  else
  {
    BOOL v69 = 0;
    BOOL v13 = !v65;
    uint64_t v70 = 0x100000000;
    if (!v13) {
      uint64_t v70 = 0x10000002BLL;
    }
    if (!(*(void *)OpenMPContextTraitSelectorName ^ 0x5F656C6261736964 | *((void *)OpenMPContextTraitSelectorName
                                                                              + 1) ^ 0x746963696C706D69 | *(void *)(OpenMPContextTraitSelectorName + 13) ^ 0x657361625F746963))
      uint64_t v4 = v70;
  }
  char v71 = v21 ^ 1;
  if ((v4 & 0x300000000) != 0) {
    char v71 = 1;
  }
  if ((v71 & 1) == 0)
  {
    uint64_t v72 = 0x10000002DLL;
    if (a1 != 10) {
      uint64_t v72 = 0x100000000;
    }
    if (*(_DWORD *)OpenMPContextTraitSelectorName == 1702195828) {
      uint64_t v4 = v72;
    }
  }
  uint64_t v73 = v4 & 0x300000000;
  char v74 = !v20;
  if ((v4 & 0x300000000) != 0) {
    char v74 = 1;
  }
  if ((v74 & 1) == 0)
  {
    int v75 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x736C6166 | OpenMPContextTraitSelectorName[4] ^ 0x65;
    uint64_t v76 = 0x10000002ELL;
LABEL_214:
    if (a1 != 10) {
      uint64_t v76 = 0x100000000;
    }
    BOOL v77 = v75 == 0;
LABEL_217:
    if (v77) {
      uint64_t v4 = v76;
    }
    goto LABEL_220;
  }
  if (v3 == 7 && !v73)
  {
    int v75 = *(_DWORD *)OpenMPContextTraitSelectorName ^ 0x6E6B6E75 | *(_DWORD *)(OpenMPContextTraitSelectorName + 3) ^ 0x6E776F6E;
    uint64_t v76 = 0x10000002FLL;
    goto LABEL_214;
  }
  if (v3 == 8 && !v73)
  {
    uint64_t v76 = 0x100000030;
    if (a1 != 11) {
      uint64_t v76 = 0x100000000;
    }
    BOOL v77 = *(void *)OpenMPContextTraitSelectorName == 0x6863746170736964;
    goto LABEL_217;
  }
  if (v3 == 32 && !v73)
  {
    uint64_t v76 = 0x100000031;
    if (a1 != 12) {
      uint64_t v76 = 0x100000000;
    }
    BOOL v77 = (*(void *)OpenMPContextTraitSelectorName ^ 0x6E65202C796E613CLL | *((void *)OpenMPContextTraitSelectorName
                                                                              + 1) ^ 0x7420796C65726974 | *((void *)OpenMPContextTraitSelectorName + 2) ^ 0x6564207465677261 | *((void *)OpenMPContextTraitSelectorName + 3) ^ 0x3E746E65646E6570) == 0;
    goto LABEL_217;
  }
LABEL_220:
  char v78 = !v69;
  if ((v4 & 0x300000000) != 0) {
    char v78 = 1;
  }
  if ((v78 & 1) == 0)
  {
    uint64_t v79 = 0x100000032;
    if (a1 != 13) {
      uint64_t v79 = 0x100000000;
    }
    if (!(*(void *)OpenMPContextTraitSelectorName ^ 0x5F64656966696E75 | *(void *)(OpenMPContextTraitSelectorName
                                                                                        + 7) ^ 0x737365726464615FLL))
      uint64_t v4 = v79;
  }
  if (v3 == 21 && (v4 & 0x300000000) == 0)
  {
    uint64_t v80 = 0x100000033;
    if (a1 != 14) {
      uint64_t v80 = 0x100000000;
    }
    if (!(*(void *)OpenMPContextTraitSelectorName ^ 0x5F64656966696E75 | *((void *)OpenMPContextTraitSelectorName
                                                                              + 1) ^ 0x6D5F646572616873 | *(void *)(OpenMPContextTraitSelectorName + 13) ^ 0x79726F6D656D5F64))
      uint64_t v4 = v80;
  }
  char v81 = !v69;
  if ((v4 & 0x300000000) != 0) {
    char v81 = 1;
  }
  if ((v81 & 1) == 0)
  {
    uint64_t v82 = 0x100000034;
    if (a1 != 15) {
      uint64_t v82 = 0x100000000;
    }
    if (!(*(void *)OpenMPContextTraitSelectorName ^ 0x5F65737265766572 | *(void *)(OpenMPContextTraitSelectorName
                                                                                        + 7) ^ 0x64616F6C66666F5FLL))
      uint64_t v4 = v82;
  }
  uint64_t v83 = v4 & 0x300000000;
  if (v3 != 18 || v83)
  {
    if (v3 != 24 || v83) {
      goto LABEL_247;
    }
    uint64_t v84 = *(void *)OpenMPContextTraitSelectorName ^ 0x645F63696D6F7461 | *((void *)OpenMPContextTraitSelectorName
                                                                             + 1) ^ 0x6D5F746C75616665 | *((void *)OpenMPContextTraitSelectorName + 2) ^ 0x726564726F5F6D65;
    uint64_t v85 = 0x100000036;
    BOOL v86 = a1 == 17;
  }
  else
  {
    uint64_t v84 = *(void *)OpenMPContextTraitSelectorName ^ 0x5F63696D616E7964 | *((void *)OpenMPContextTraitSelectorName
                                                                             + 1) ^ 0x6F7461636F6C6C61 | *((unsigned __int16 *)OpenMPContextTraitSelectorName + 8) ^ 0x7372;
    uint64_t v85 = 0x100000035;
    BOOL v86 = a1 == 16;
  }
  if (!v86) {
    uint64_t v85 = 0x100000000;
  }
  if (!v84) {
    uint64_t v4 = v85;
  }
LABEL_247:
  if ((v4 & 0x300000000) != 0) {
    return v4;
  }
  else {
    return 0;
  }
}

const char *llvm::omp::getOpenMPContextTraitPropertyName(int a1, const char *a2)
{
  uint64_t result = "invalid";
  switch(a1)
  {
    case 1:
      uint64_t result = "target";
      break;
    case 2:
      uint64_t result = "teams";
      break;
    case 3:
      uint64_t result = "parallel";
      break;
    case 4:
      uint64_t result = "for";
      break;
    case 5:
      uint64_t result = "simd";
      break;
    case 6:
      uint64_t result = "host";
      break;
    case 7:
      uint64_t result = "nohost";
      break;
    case 8:
      uint64_t result = "cpu";
      break;
    case 9:
      uint64_t result = "gpu";
      break;
    case 10:
      uint64_t result = "fpga";
      break;
    case 11:
      uint64_t result = "any";
      break;
    case 12:
    case 27:
      uint64_t result = "arm";
      break;
    case 13:
      uint64_t result = "armeb";
      break;
    case 14:
      uint64_t result = "aarch64";
      break;
    case 15:
      uint64_t result = "aarch64_be";
      break;
    case 16:
      uint64_t result = "aarch64_32";
      break;
    case 17:
      uint64_t result = "ppc";
      break;
    case 18:
      uint64_t result = "ppcle";
      break;
    case 19:
      uint64_t result = "ppc64";
      break;
    case 20:
      uint64_t result = "ppc64le";
      break;
    case 21:
      uint64_t result = "x86";
      break;
    case 22:
      uint64_t result = "x86_64";
      break;
    case 23:
      uint64_t result = "amdgcn";
      break;
    case 24:
      uint64_t result = "nvptx";
      break;
    case 25:
      uint64_t result = "nvptx64";
      break;
    case 26:
      uint64_t result = "amd";
      break;
    case 28:
      uint64_t result = "bsc";
      break;
    case 29:
      uint64_t result = "cray";
      break;
    case 30:
      uint64_t result = "fujitsu";
      break;
    case 31:
      uint64_t result = "gnu";
      break;
    case 32:
      uint64_t result = "ibm";
      break;
    case 33:
      uint64_t result = "intel";
      break;
    case 34:
      uint64_t result = "llvm";
      break;
    case 35:
      uint64_t result = "nec";
      break;
    case 36:
      uint64_t result = "nvidia";
      break;
    case 37:
      uint64_t result = "pgi";
      break;
    case 38:
      uint64_t result = "ti";
      break;
    case 39:
    case 47:
      uint64_t result = "unknown";
      break;
    case 40:
      uint64_t result = "match_all";
      break;
    case 41:
      uint64_t result = "match_any";
      break;
    case 42:
      uint64_t result = "match_none";
      break;
    case 43:
      uint64_t result = "disable_implicit_base";
      break;
    case 44:
      uint64_t result = "allow_templates";
      break;
    case 45:
      uint64_t result = "true";
      break;
    case 46:
      uint64_t result = "false";
      break;
    case 48:
      uint64_t result = "dispatch";
      break;
    case 49:
      uint64_t result = a2;
      break;
    case 50:
      uint64_t result = "unified_address";
      break;
    case 51:
      uint64_t result = "unified_shared_memory";
      break;
    case 52:
      uint64_t result = "reverse_offload";
      break;
    case 53:
      uint64_t result = "dynamic_allocators";
      break;
    case 54:
      uint64_t result = "atomic_default_mem_order";
      break;
    default:
      return result;
  }
  return result;
}

BOOL llvm::omp::isValidTraitSelectorForTraitSet(int a1, int a2, BOOL *a3, unsigned char *a4)
{
  *a3 = (a2 - 3) < 0xFFFFFFFE;
  unsigned int v4 = dword_1CFB1C9E4[a1];
  *a4 = byte_1CFB1C9D0[a1];
  return v4 == a2;
}

BOOL llvm::omp::isValidTraitPropertyForTraitSetAndSelector(int a1, int a2, int a3)
{
  switch(a1)
  {
    case 1:
      BOOL v7 = a2 == 1;
      return v7 && a3 == 1;
    case 2:
      BOOL v7 = a2 == 2;
      return v7 && a3 == 1;
    case 3:
      BOOL v7 = a2 == 3;
      return v7 && a3 == 1;
    case 4:
      BOOL v7 = a2 == 4;
      return v7 && a3 == 1;
    case 5:
      BOOL v7 = a2 == 5;
      return v7 && a3 == 1;
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      BOOL v3 = a2 == 6;
      return v3 && a3 == 2;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      BOOL v3 = a2 == 7;
      return v3 && a3 == 2;
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      BOOL v5 = a2 == 8;
      goto LABEL_7;
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      BOOL v5 = a2 == 9;
      goto LABEL_7;
    case 45:
    case 46:
    case 47:
      return a2 == 10 && a3 == 4;
    case 48:
      BOOL v7 = a2 == 11;
      return v7 && a3 == 1;
    case 49:
      BOOL v3 = a2 == 12;
      return v3 && a3 == 2;
    case 50:
      BOOL v5 = a2 == 13;
      goto LABEL_7;
    case 51:
      BOOL v5 = a2 == 14;
      goto LABEL_7;
    case 52:
      BOOL v5 = a2 == 15;
      goto LABEL_7;
    case 53:
      BOOL v5 = a2 == 16;
      goto LABEL_7;
    case 54:
      BOOL v5 = a2 == 17;
LABEL_7:
      BOOL v4 = v5 && a3 == 3;
      break;
    default:
      BOOL v4 = (a3 | a2) == 0;
      break;
  }
  return v4;
}

std::string *llvm::omp::listOpenMPContextTraitSets@<X0>(std::string *a1@<X8>)
{
  uint64_t v2 = a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  BOOL v3 = std::string::append(a1, "'");
  BOOL v4 = std::string::append(v3, "construct");
  BOOL v5 = std::string::append(v4, "'");
  std::string::append(v5, " ");
  int v6 = std::string::append(v2, "'");
  BOOL v7 = std::string::append(v6, "device");
  uint64_t v8 = std::string::append(v7, "'");
  std::string::append(v8, " ");
  int v9 = std::string::append(v2, "'");
  BOOL v10 = std::string::append(v9, "implementation");
  int v11 = std::string::append(v10, "'");
  std::string::append(v11, " ");
  int v12 = std::string::append(v2, "'");
  BOOL v13 = std::string::append(v12, "user");
  uint64_t v14 = std::string::append(v13, "'");
  uint64_t result = std::string::append(v14, " ");
  int v16 = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = v2->__r_.__value_.__l.__size_;
  if (v16 >= 0) {
    std::string::size_type size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  std::string::size_type v18 = size - 1;
  if (v16 < 0)
  {
    v2->__r_.__value_.__l.__size_ = v18;
    uint64_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&v2->__r_.__value_.__s + 23) = v18 & 0x7F;
  }
  v2->__r_.__value_.__s.__data_[v18] = 0;
  return result;
}

std::string *llvm::omp::listOpenMPContextTraitSelectors@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a2;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  BOOL v3 = "condition";
  switch((int)result)
  {
    case 0:
      BOOL v3 = "invalid";
      goto LABEL_7;
    case 1:
      BOOL v5 = std::string::append(a2, "'");
      int v6 = std::string::append(v5, "target");
      BOOL v7 = std::string::append(v6, "'");
      std::string::append(v7, " ");
      uint64_t v8 = std::string::append(v2, "'");
      int v9 = std::string::append(v8, "teams");
      BOOL v10 = std::string::append(v9, "'");
      std::string::append(v10, " ");
      int v11 = std::string::append(v2, "'");
      int v12 = std::string::append(v11, "parallel");
      BOOL v13 = std::string::append(v12, "'");
      std::string::append(v13, " ");
      uint64_t v14 = std::string::append(v2, "'");
      uint64_t v15 = std::string::append(v14, "for");
      int v16 = std::string::append(v15, "'");
      std::string::append(v16, " ");
      char v17 = std::string::append(v2, "'");
      std::string::size_type v18 = std::string::append(v17, "simd");
      uint64_t v19 = std::string::append(v18, "'");
      std::string::append(v19, " ");
      BOOL v3 = "dispatch";
      goto LABEL_7;
    case 2:
      BOOL v20 = std::string::append(a2, "'");
      char v21 = std::string::append(v20, "kind");
      BOOL v22 = std::string::append(v21, "'");
      std::string::append(v22, " ");
      uint64_t v23 = std::string::append(v2, "'");
      uint64_t v24 = std::string::append(v23, "arch");
      char v25 = std::string::append(v24, "'");
      std::string::append(v25, " ");
      BOOL v3 = "isa";
      goto LABEL_7;
    case 3:
      char v26 = std::string::append(a2, "'");
      uint64_t v27 = std::string::append(v26, "vendor");
      int v28 = std::string::append(v27, "'");
      std::string::append(v28, " ");
      uint64_t v29 = std::string::append(v2, "'");
      char v30 = std::string::append(v29, "extension");
      uint64_t v31 = std::string::append(v30, "'");
      std::string::append(v31, " ");
      uint64_t v32 = std::string::append(v2, "'");
      char v33 = std::string::append(v32, "unified_address");
      uint64_t v34 = std::string::append(v33, "'");
      std::string::append(v34, " ");
      char v35 = std::string::append(v2, "'");
      int v36 = std::string::append(v35, "unified_shared_memory");
      uint64_t v37 = std::string::append(v36, "'");
      std::string::append(v37, " ");
      uint64_t v38 = std::string::append(v2, "'");
      char v39 = std::string::append(v38, "reverse_offload");
      char v40 = std::string::append(v39, "'");
      std::string::append(v40, " ");
      uint64_t v41 = std::string::append(v2, "'");
      uint64_t v42 = std::string::append(v41, "dynamic_allocators");
      char v43 = std::string::append(v42, "'");
      std::string::append(v43, " ");
      BOOL v3 = "atomic_default_mem_order";
      goto LABEL_7;
    case 4:
LABEL_7:
      uint64_t v44 = std::string::append(v2, "'");
      char v45 = std::string::append(v44, v3);
      uint64_t v46 = std::string::append(v45, "'");
      uint64_t result = std::string::append(v46, " ");
      int v47 = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
      std::string::size_type size = v2->__r_.__value_.__l.__size_;
      if (v47 >= 0) {
        std::string::size_type size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
      }
      uint64_t v4 = size - 1;
      if ((v47 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      v2->__r_.__value_.__l.__size_ = v4;
      uint64_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
      break;
    default:
      uint64_t v4 = -1;
LABEL_10:
      *((unsigned char *)&v2->__r_.__value_.__s + 23) = v4 & 0x7F;
      break;
  }
  v2->__r_.__value_.__s.__data_[v4] = 0;
  return result;
}

void llvm::omp::listOpenMPContextTraitProperties(int a1@<W0>, int a2@<W1>, char *a3@<X8>)
{
  memset(&v66, 0, sizeof(v66));
  if (a1 == 1 && a2 == 1)
  {
    uint64_t v4 = "target";
LABEL_4:
    BOOL v5 = std::string::append(&v66, "'");
    int v6 = std::string::append(v5, v4);
    BOOL v7 = std::string::append(v6, "'");
    std::string::append(v7, " ");
    char v8 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v66.__r_.__value_.__l.__size_;
    goto LABEL_5;
  }
  if (a1 == 1 && a2 == 2)
  {
    uint64_t v4 = "teams";
    goto LABEL_4;
  }
  if (a1 == 1 && a2 == 3)
  {
    uint64_t v4 = "parallel";
    goto LABEL_4;
  }
  if (a1 == 1 && a2 == 4)
  {
    uint64_t v4 = "for";
    goto LABEL_4;
  }
  if (a1 == 1 && a2 == 5)
  {
    uint64_t v4 = "simd";
    goto LABEL_4;
  }
  if (a1 == 2 && a2 == 6)
  {
    uint64_t v4 = "any";
    int v12 = "fpga";
    BOOL v13 = "gpu";
    uint64_t v14 = "cpu";
    uint64_t v15 = "nohost";
    int v16 = "host";
LABEL_32:
    char v17 = std::string::append(&v66, "'");
    std::string::size_type v18 = std::string::append(v17, v16);
    uint64_t v19 = std::string::append(v18, "'");
    std::string::append(v19, " ");
LABEL_33:
    BOOL v20 = std::string::append(&v66, "'");
    char v21 = std::string::append(v20, v15);
    BOOL v22 = std::string::append(v21, "'");
    std::string::append(v22, " ");
    uint64_t v23 = std::string::append(&v66, "'");
    uint64_t v24 = std::string::append(v23, v14);
    char v25 = std::string::append(v24, "'");
    std::string::append(v25, " ");
LABEL_34:
    char v26 = std::string::append(&v66, "'");
    uint64_t v27 = std::string::append(v26, v13);
    int v28 = std::string::append(v27, "'");
    std::string::append(v28, " ");
    uint64_t v29 = std::string::append(&v66, "'");
    char v30 = std::string::append(v29, v12);
    uint64_t v31 = std::string::append(v30, "'");
    std::string::append(v31, " ");
    goto LABEL_4;
  }
  if (a1 == 2 && a2 == 7)
  {
    uint64_t v4 = "nvptx64";
    uint64_t v64 = "amdgcn";
    BOOL v65 = "nvptx";
    uint64_t v14 = "x86_64";
    uint64_t v15 = "x86";
    int v16 = "ppc64le";
    uint64_t v62 = "ppcle";
    unsigned int v63 = "ppc64";
    __s = "aarch64_32";
    uint64_t v61 = "ppc";
    uint64_t v32 = "aarch64_be";
    char v33 = "aarch64";
    uint64_t v34 = "armeb";
    char v35 = "arm";
LABEL_38:
    int v36 = std::string::append(&v66, "'");
    uint64_t v37 = std::string::append(v36, v35);
    uint64_t v38 = std::string::append(v37, "'");
    std::string::append(v38, " ");
    char v39 = std::string::append(&v66, "'");
    char v40 = std::string::append(v39, v34);
    uint64_t v41 = std::string::append(v40, "'");
    std::string::append(v41, " ");
    uint64_t v42 = std::string::append(&v66, "'");
    char v43 = std::string::append(v42, v33);
    uint64_t v44 = std::string::append(v43, "'");
    std::string::append(v44, " ");
    char v45 = std::string::append(&v66, "'");
    uint64_t v46 = std::string::append(v45, v32);
    int v47 = std::string::append(v46, "'");
    std::string::append(v47, " ");
    char v48 = std::string::append(&v66, "'");
    char v49 = std::string::append(v48, __s);
    uint64_t v50 = std::string::append(v49, "'");
    std::string::append(v50, " ");
    uint64_t v51 = std::string::append(&v66, "'");
    char v52 = std::string::append(v51, v61);
    uint64_t v53 = std::string::append(v52, "'");
    std::string::append(v53, " ");
    char v54 = std::string::append(&v66, "'");
    uint64_t v55 = std::string::append(v54, v62);
    char v56 = std::string::append(v55, "'");
    std::string::append(v56, " ");
    uint64_t v57 = std::string::append(&v66, "'");
    char v58 = std::string::append(v57, v63);
    uint64_t v59 = std::string::append(v58, "'");
    std::string::append(v59, " ");
    BOOL v13 = v64;
    int v12 = v65;
    goto LABEL_32;
  }
  if (a1 == 3 && a2 == 8)
  {
    uint64_t v4 = "unknown";
    uint64_t v64 = "pgi";
    BOOL v65 = "ti";
    uint64_t v14 = "nvidia";
    uint64_t v15 = "nec";
    int v16 = "llvm";
    uint64_t v62 = "ibm";
    unsigned int v63 = "intel";
    __s = "fujitsu";
    uint64_t v61 = "gnu";
    uint64_t v32 = "cray";
    char v33 = "bsc";
    uint64_t v34 = "arm";
    char v35 = "amd";
    goto LABEL_38;
  }
  if (a1 == 3 && a2 == 9)
  {
    uint64_t v4 = "allow_templates";
    int v12 = "disable_implicit_base";
    BOOL v13 = "match_none";
    uint64_t v14 = "match_any";
    uint64_t v15 = "match_all";
    goto LABEL_33;
  }
  if (a1 == 4 && a2 == 10)
  {
    uint64_t v4 = "unknown";
    int v12 = "false";
    BOOL v13 = "true";
    goto LABEL_34;
  }
  if (a1 == 1 && a2 == 11)
  {
    uint64_t v4 = "dispatch";
    goto LABEL_4;
  }
  if (a1 == 2 && a2 == 12)
  {
    uint64_t v4 = "<any, entirely target dependent>";
    goto LABEL_4;
  }
  if (a1 == 3 && a2 == 13)
  {
    uint64_t v4 = "unified_address";
    goto LABEL_4;
  }
  if (a1 == 3 && a2 == 14)
  {
    uint64_t v4 = "unified_shared_memory";
    goto LABEL_4;
  }
  if (a1 == 3 && a2 == 15)
  {
    uint64_t v4 = "reverse_offload";
    goto LABEL_4;
  }
  if (a1 == 3 && a2 == 16)
  {
    uint64_t v4 = "dynamic_allocators";
    goto LABEL_4;
  }
  char v8 = 0;
  std::string::size_type size = 0;
  if (a1 == 3 && a2 == 17)
  {
    uint64_t v4 = "atomic_default_mem_order";
    goto LABEL_4;
  }
LABEL_5:
  if (v8 >= 0) {
    std::string::size_type size = v8 & 0x7F;
  }
  if (size)
  {
    std::string::size_type v10 = size - 1;
    int v11 = &v66;
    if (v8 < 0) {
      int v11 = (std::string *)v66.__r_.__value_.__r.__words[0];
    }
    if (v8 < 0) {
      v66.__r_.__value_.__l.__size_ = v10;
    }
    else {
      *((unsigned char *)&v66.__r_.__value_.__s + 23) = v10 & 0x7F;
    }
    v11->__r_.__value_.__s.__data_[v10] = 0;
    *(std::string *)a3 = v66;
  }
  else
  {
    a3[23] = 6;
    strcpy(a3, "<none>");
    if (v8 < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t sub_1CD605144()
{
  return 0;
}

uint64_t sub_1CD60514C(llvm::APInt *a1, uint64_t a2, int a3)
{
  uint64_t v7 = 0;
  uint64_t result = sub_1CD6051E4(a2, a3, &v7);
  if (result)
  {
    BOOL v5 = (const llvm::APInt *)(v7 + 8);
    unsigned int v6 = *(_DWORD *)(v7 + 16);
    *((_DWORD *)a1 + 2) = v6;
    if (v6 > 0x40)
    {
      llvm::APInt::initSlowCase(a1, v5);
    }
    *(void *)a1 = *(void *)v5;
  }
  else
  {
    *((_DWORD *)a1 + 2) = 1;
    *(void *)a1 = 0;
  }
  return result;
}

uint64_t sub_1CD6051E4(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & a2;
  uint64_t v7 = (_DWORD *)(v3 + 24 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    std::string::size_type v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        std::string::size_type v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 24 * (v13 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void llvm::OpenMPIRBuilder::addAttributes(uint64_t a1, int a2, uint64_t a3)
{
  v262[4] = *MEMORY[0x1E4F143B8];
  int v5 = **(uint64_t ***)a3;
  uint64_t v6 = *(void *)(a3 + 112);
  uint64_t v245 = v6;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 8)) {
      uint64_t v6 = *(void *)(v6 + 40);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  *(void *)v244 = v6;
  *(void *)v243 = llvm::AttributeList::getRetAttrs((llvm::AttributeList *)&v245);
  v260 = v262;
  uint64_t v261 = 0x400000000;
  if (*(void *)(a3 + 96))
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v245, v7);
      int v9 = v261;
      if (v261 >= HIDWORD(v261)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v260[v261] = ParamAttrs;
      LODWORD(v261) = v9 + 1;
      ++v7;
    }
    while (v7 < *(void *)(a3 + 96));
  }
  int v10 = byte_1EBCD9A00;
  unint64_t v246 = llvm::Attribute::get(v5, 0x25u, 0);
  if (v10)
  {
    unint64_t v247 = llvm::Attribute::get(v5, 0x2Du, 0);
    unint64_t v248 = llvm::Attribute::get(v5, 0x23u, 0);
    unint64_t v249 = llvm::Attribute::get(v5, 0x19u, 0);
    unint64_t v250 = llvm::Attribute::get(v5, 0xBu, 0);
    unint64_t v251 = llvm::Attribute::get(v5, 0x41u, 0);
    uint64_t v11 = 6;
  }
  else
  {
    uint64_t v11 = 1;
  }
  uint64_t v238 = llvm::AttributeSet::get(v5, &v246, v11);
  int v12 = byte_1EBCD9A00;
  unint64_t v246 = llvm::Attribute::get(v5, 0x25u, 0);
  if (v12)
  {
    unint64_t v247 = llvm::Attribute::get(v5, 0x23u, 0);
    unint64_t v248 = llvm::Attribute::get(v5, 0x19u, 0);
    unint64_t v249 = llvm::Attribute::get(v5, 0xCu, 0);
    unint64_t v250 = llvm::Attribute::get(v5, 0x41u, 0);
    uint64_t v13 = 5;
  }
  else
  {
    uint64_t v13 = 1;
  }
  uint64_t v240 = llvm::AttributeSet::get(v5, &v246, v13);
  int v14 = byte_1EBCD9A00;
  unint64_t v246 = llvm::Attribute::get(v5, 0x25u, 0);
  if (v14)
  {
    unint64_t v247 = llvm::Attribute::get(v5, 0x42u, 0);
    unint64_t v248 = llvm::Attribute::get(v5, 0x23u, 0);
    unint64_t v249 = llvm::Attribute::get(v5, 0x19u, 0);
    unint64_t v250 = llvm::Attribute::get(v5, 0xBu, 0);
    unint64_t v251 = llvm::Attribute::get(v5, 0x41u, 0);
    uint64_t v15 = 6;
  }
  else
  {
    uint64_t v15 = 1;
  }
  uint64_t v235 = llvm::AttributeSet::get(v5, &v246, v15);
  int v16 = byte_1EBCD9A00;
  unint64_t v246 = llvm::Attribute::get(v5, 0x25u, 0);
  if (v16)
  {
    unint64_t v247 = llvm::Attribute::get(v5, 0x23u, 0);
    unint64_t v248 = llvm::Attribute::get(v5, 0x41u, 0);
    unint64_t v249 = llvm::Attribute::get(v5, 0x19u, 0);
    uint64_t v17 = 4;
  }
  else
  {
    uint64_t v17 = 1;
  }
  uint64_t v237 = llvm::AttributeSet::get(v5, &v246, v17);
  unint64_t v246 = llvm::Attribute::get(v5, 0x25u, 0);
  unint64_t v247 = llvm::Attribute::get(v5, 6u, 0);
  uint64_t v239 = llvm::AttributeSet::get(v5, &v246, 2);
  int v18 = byte_1EBCD9A00;
  unint64_t v246 = llvm::Attribute::get(v5, 0x25u, 0);
  if (v18)
  {
    unint64_t v247 = llvm::Attribute::get(v5, 0x23u, 0);
    unint64_t v248 = llvm::Attribute::get(v5, 0xCu, 0);
    unint64_t v249 = llvm::Attribute::get(v5, 0x41u, 0);
    unint64_t v250 = llvm::Attribute::get(v5, 0x19u, 0);
    uint64_t v19 = 5;
  }
  else
  {
    uint64_t v19 = 1;
  }
  uint64_t v236 = llvm::AttributeSet::get(v5, &v246, v19);
  unint64_t v246 = llvm::Attribute::get(v5, 0x16u, 0);
  uint64_t v20 = llvm::AttributeSet::get(v5, &v246, 1);
  unint64_t v246 = llvm::Attribute::get(v5, 2u, 0);
  uint64_t v21 = llvm::AttributeSet::get(v5, &v246, 1);
  int v22 = byte_1EBCD9A00;
  unint64_t v246 = llvm::Attribute::get(v5, 0x25u, 0);
  if (v22)
  {
    unint64_t v247 = llvm::Attribute::get(v5, 0x23u, 0);
    unint64_t v248 = llvm::Attribute::get(v5, 0x41u, 0);
    uint64_t v23 = 3;
  }
  else
  {
    uint64_t v23 = 1;
  }
  uint64_t v24 = llvm::AttributeSet::get(v5, &v246, v23);
  unint64_t v246 = llvm::Attribute::get(v5, 0x25u, 0);
  uint64_t v25 = llvm::AttributeSet::get(v5, &v246, 1);
  if (byte_1EBCD9A00)
  {
    unint64_t v246 = llvm::Attribute::get(v5, 0x2Du, 0);
    unint64_t v247 = llvm::Attribute::get(v5, 0x19u, 0);
    unint64_t v248 = llvm::Attribute::get(v5, 0x16u, 0);
    char v26 = &v246;
    uint64_t v27 = 3;
  }
  else
  {
    char v26 = 0;
    uint64_t v27 = 0;
  }
  uint64_t v241 = llvm::AttributeSet::get(v5, v26, v27);
  unint64_t v246 = llvm::Attribute::get(v5, 0x25u, 0);
  unint64_t v247 = llvm::Attribute::get(v5, 0x23u, 0);
  uint64_t v28 = llvm::AttributeSet::get(v5, &v246, 2);
  uint64_t v242 = a3;
  if (byte_1EBCD9A00)
  {
    unint64_t v246 = llvm::Attribute::get(v5, 0x16u, 0);
    unint64_t v247 = llvm::Attribute::get(v5, 0x19u, 0);
    uint64_t v29 = &v246;
    uint64_t v30 = 2;
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
  }
  uint64_t v31 = llvm::AttributeSet::get(v5, v29, v30);
  if (byte_1EBCD9A00)
  {
    unint64_t v246 = llvm::Attribute::get(v5, 0x13u, 0);
    uint64_t v32 = &v246;
    uint64_t v33 = 1;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v34 = llvm::AttributeSet::get(v5, v32, v33);
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
    case 7:
    case 56:
    case 57:
    case 92:
    case 93:
    case 96:
    case 97:
    case 105:
    case 117:
    case 120:
    case 166:
    case 167:
      char v40 = v5;
      uint64_t v41 = v239;
      goto LABEL_40;
    case 1:
    case 8:
    case 9:
    case 10:
    case 43:
    case 44:
    case 45:
    case 46:
    case 62:
    case 67:
    case 80:
    case 81:
    case 82:
    case 83:
    case 113:
    case 152:
    case 153:
      char v40 = v5;
      uint64_t v41 = v236;
      goto LABEL_40;
    case 4:
      char v40 = v5;
      uint64_t v41 = v238;
      goto LABEL_40;
    case 6:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v25);
      uint64_t v111 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v111);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i = 0; i != 3; ++i)
      {
        BOOL v113 = &v260[i];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v241;
        uint64_t v114 = llvm::AttributeSet::addAttributes(v113, v5, *(unint64_t *)((char *)&v246 + i * 8));
        v260[i] = v114;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 11:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      uint64_t v123 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v123);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t j = 0; j != 5; ++j)
      {
        BOOL v125 = &v260[j];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v241;
        unint64_t v249 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v250 = v241;
        uint64_t v126 = llvm::AttributeSet::addAttributes(v125, v5, *(unint64_t *)((char *)&v246 + j * 8));
        v260[j] = v126;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
      char v35 = v5;
      uint64_t v36 = v238;
      goto LABEL_28;
    case 22:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v178 = llvm::AttributeSet::get(v5, 0, 0);
      uint64_t v179 = 0;
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v178);
      uint64_t v49 = v242;
      while (1)
      {
        unint64_t v246 = llvm::Attribute::get(v5, 0x16u, 0);
        unint64_t v247 = llvm::Attribute::get(v5, 0x42u, 0);
        llvm::AttributeSet::get(v5, &v246, 2);
        unint64_t v258 = llvm::Attribute::get(v5, 0x16u, 0);
        unint64_t v259 = llvm::Attribute::get(v5, 0x42u, 0);
        llvm::AttributeSet::get(v5, &v258, 2);
        if (v179 == 2) {
          break;
        }
        BOOL v180 = &v260[v179];
        unint64_t v258 = llvm::Attribute::get(v5, 0x16u, 0);
        unint64_t v259 = llvm::Attribute::get(v5, 0x42u, 0);
        unint64_t v246 = llvm::AttributeSet::get(v5, &v258, 2);
        v257[0] = llvm::Attribute::get(v5, 0x16u, 0);
        v257[1] = llvm::Attribute::get(v5, 0x42u, 0);
        unint64_t v247 = llvm::AttributeSet::get(v5, v257, 2);
        uint64_t v181 = llvm::AttributeSet::addAttributes(v180, v5, *(unint64_t *)((char *)&v246 + v179 * 8));
        v260[v179++] = v181;
      }
      goto LABEL_162;
    case 34:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v162 = llvm::AttributeSet::get(v5, 0, 0);
      uint64_t v163 = 0;
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v162);
      uint64_t v49 = v242;
      while (1)
      {
        llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v246 = llvm::Attribute::get(v5, 0x16u, 0);
        unint64_t v247 = llvm::Attribute::get(v5, 0x42u, 0);
        llvm::AttributeSet::get(v5, &v246, 2);
        if (v163 == 2) {
          break;
        }
        BOOL v164 = &v260[v163];
        unint64_t v246 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v258 = llvm::Attribute::get(v5, 0x16u, 0);
        unint64_t v259 = llvm::Attribute::get(v5, 0x42u, 0);
        unint64_t v247 = llvm::AttributeSet::get(v5, &v258, 2);
        uint64_t v165 = llvm::AttributeSet::addAttributes(v164, v5, *(unint64_t *)((char *)&v246 + v163 * 8));
        v260[v163++] = v165;
      }
      goto LABEL_162;
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 129:
      char v35 = v5;
      uint64_t v36 = v235;
      goto LABEL_28;
    case 47:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      uint64_t v166 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v166);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t k = 0; k != 3; ++k)
      {
        BOOL v168 = &v260[k];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v169 = llvm::AttributeSet::addAttributes(v168, v5, *(unint64_t *)((char *)&v246 + k * 8));
        v260[k] = v169;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 48:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      uint64_t v170 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v170);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t m = 0; m != 4; ++m)
      {
        BOOL v172 = &v260[m];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v173 = llvm::AttributeSet::addAttributes(v172, v5, *(unint64_t *)((char *)&v246 + m * 8));
        v260[m] = v173;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 49:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      uint64_t v127 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v127);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t n = 0; n != 3; ++n)
      {
        BOOL v129 = &v260[n];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v130 = llvm::AttributeSet::addAttributes(v129, v5, *(unint64_t *)((char *)&v246 + n * 8));
        v260[n] = v130;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 50:
    case 51:
    case 98:
    case 99:
    case 111:
      char v40 = v5;
      uint64_t v41 = v237;
      goto LABEL_40;
    case 52:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      uint64_t v91 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v91);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (iuint64_t i = 0; ii != 6; ++ii)
      {
        uint64_t v93 = &v260[ii];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v250 = v241;
        unint64_t v251 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v94 = llvm::AttributeSet::addAttributes(v93, v5, *(unint64_t *)((char *)&v246 + ii * 8));
        v260[ii] = v94;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 53:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      uint64_t v203 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v203);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (juint64_t j = 0; jj != 6; ++jj)
      {
        v205 = &v260[jj];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v250 = v241;
        unint64_t v251 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v206 = llvm::AttributeSet::addAttributes(v205, v5, *(unint64_t *)((char *)&v246 + jj * 8));
        v260[jj] = v206;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 54:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      uint64_t v67 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v67);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t kk = 0; kk != 3; ++kk)
      {
        BOOL v69 = &v260[kk];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v70 = llvm::AttributeSet::addAttributes(v69, v5, *(unint64_t *)((char *)&v246 + kk * 8));
        v260[kk] = v70;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 55:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      uint64_t v115 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v115);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t mm = 0; mm != 3; ++mm)
      {
        BOOL v117 = &v260[mm];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v118 = llvm::AttributeSet::addAttributes(v117, v5, *(unint64_t *)((char *)&v246 + mm * 8));
        v260[mm] = v118;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 58:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v207 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v207);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (nuint64_t n = 0; nn != 9; ++nn)
      {
        v209 = &v260[nn];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v254 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v210 = llvm::AttributeSet::addAttributes(v209, v5, *(unint64_t *)((char *)&v246 + nn * 8));
        v260[nn] = v210;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 59:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v71 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v71);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i1 = 0; i1 != 9; ++i1)
      {
        uint64_t v73 = &v260[i1];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v254 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v74 = llvm::AttributeSet::addAttributes(v73, v5, *(unint64_t *)((char *)&v246 + i1 * 8));
        v260[i1] = v74;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 60:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v95 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v95);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i2 = 0; i2 != 9; ++i2)
      {
        uint64_t v97 = &v260[i2];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v254 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v98 = llvm::AttributeSet::addAttributes(v97, v5, *(unint64_t *)((char *)&v246 + i2 * 8));
        v260[i2] = v98;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 61:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v131 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v131);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i3 = 0; i3 != 9; ++i3)
      {
        BOOL v133 = &v260[i3];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v254 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v134 = llvm::AttributeSet::addAttributes(v133, v5, *(unint64_t *)((char *)&v246 + i3 * 8));
        v260[i3] = v134;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 63:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v75 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v75);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i4 = 0; i4 != 9; ++i4)
      {
        BOOL v77 = &v260[i4];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v254 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v78 = llvm::AttributeSet::addAttributes(v77, v5, *(unint64_t *)((char *)&v246 + i4 * 8));
        v260[i4] = v78;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 64:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v99 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v99);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i5 = 0; i5 != 9; ++i5)
      {
        int v101 = &v260[i5];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v254 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v102 = llvm::AttributeSet::addAttributes(v101, v5, *(unint64_t *)((char *)&v246 + i5 * 8));
        v260[i5] = v102;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 65:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v55 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v55);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i6 = 0; i6 != 9; ++i6)
      {
        uint64_t v57 = &v260[i6];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v254 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v58 = llvm::AttributeSet::addAttributes(v57, v5, *(unint64_t *)((char *)&v246 + i6 * 8));
        v260[i6] = v58;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 66:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v182 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v182);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i7 = 0; i7 != 9; ++i7)
      {
        v184 = &v260[i7];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v254 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v185 = llvm::AttributeSet::addAttributes(v184, v5, *(unint64_t *)((char *)&v246 + i7 * 8));
        v260[i7] = v185;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 68:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v119 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v119);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i8 = 0; i8 != 4; ++i8)
      {
        BOOL v121 = &v260[i8];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        uint64_t v122 = llvm::AttributeSet::addAttributes(v121, v5, *(unint64_t *)((char *)&v246 + i8 * 8));
        v260[i8] = v122;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 69:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v79 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v79);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i9 = 0; i9 != 4; ++i9)
      {
        char v81 = &v260[i9];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        uint64_t v82 = llvm::AttributeSet::addAttributes(v81, v5, *(unint64_t *)((char *)&v246 + i9 * 8));
        v260[i9] = v82;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 70:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v135 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v135);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i10 = 0; i10 != 4; ++i10)
      {
        BOOL v137 = &v260[i10];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        uint64_t v138 = llvm::AttributeSet::addAttributes(v137, v5, *(unint64_t *)((char *)&v246 + i10 * 8));
        v260[i10] = v138;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 71:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v83 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v83);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i11 = 0; i11 != 4; ++i11)
      {
        uint64_t v85 = &v260[i11];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        uint64_t v86 = llvm::AttributeSet::addAttributes(v85, v5, *(unint64_t *)((char *)&v246 + i11 * 8));
        v260[i11] = v86;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 72:
    case 73:
    case 74:
    case 75:
      char v40 = v5;
      uint64_t v41 = v240;
LABEL_40:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v40, v41);
      uint64_t v42 = llvm::AttributeSet::get(v5, 0, 0);
      char v43 = v5;
      goto LABEL_41;
    case 76:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v59 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v59);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i12 = 0; i12 != 6; ++i12)
      {
        uint64_t v61 = &v260[i12];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v31;
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v62 = llvm::AttributeSet::addAttributes(v61, v5, *(unint64_t *)((char *)&v246 + i12 * 8));
        v260[i12] = v62;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 77:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v186 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v186);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i13 = 0; i13 != 6; ++i13)
      {
        v188 = &v260[i13];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v31;
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v189 = llvm::AttributeSet::addAttributes(v188, v5, *(unint64_t *)((char *)&v246 + i13 * 8));
        v260[i13] = v189;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 78:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v211 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v211);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i14 = 0; i14 != 6; ++i14)
      {
        v213 = &v260[i14];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v31;
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v214 = llvm::AttributeSet::addAttributes(v213, v5, *(unint64_t *)((char *)&v246 + i14 * 8));
        v260[i14] = v214;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 79:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v190 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v190);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i15 = 0; i15 != 6; ++i15)
      {
        v192 = &v260[i15];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v31;
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v193 = llvm::AttributeSet::addAttributes(v192, v5, *(unint64_t *)((char *)&v246 + i15 * 8));
        v260[i15] = v193;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 84:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v227 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v227);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i16 = 0; i16 != 6; ++i16)
      {
        v229 = &v260[i16];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v31;
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v230 = llvm::AttributeSet::addAttributes(v229, v5, *(unint64_t *)((char *)&v246 + i16 * 8));
        v260[i16] = v230;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 85:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v215 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v215);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i17 = 0; i17 != 6; ++i17)
      {
        v217 = &v260[i17];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v31;
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v218 = llvm::AttributeSet::addAttributes(v217, v5, *(unint64_t *)((char *)&v246 + i17 * 8));
        v260[i17] = v218;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 86:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v139 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v139);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i18 = 0; i18 != 6; ++i18)
      {
        BOOL v141 = &v260[i18];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v31;
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v142 = llvm::AttributeSet::addAttributes(v141, v5, *(unint64_t *)((char *)&v246 + i18 * 8));
        v260[i18] = v142;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 87:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v194 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v194);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i19 = 0; i19 != 6; ++i19)
      {
        v196 = &v260[i19];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v31;
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v197 = llvm::AttributeSet::addAttributes(v196, v5, *(unint64_t *)((char *)&v246 + i19 * 8));
        v260[i19] = v197;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 88:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v103 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v103);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i20 = 0; i20 != 8; ++i20)
      {
        BOOL v105 = &v260[i20];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = v31;
        uint64_t v106 = llvm::AttributeSet::addAttributes(v105, v5, *(unint64_t *)((char *)&v246 + i20 * 8));
        v260[i20] = v106;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 89:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v198 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v198);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i21 = 0; i21 != 8; ++i21)
      {
        v200 = &v260[i21];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = v31;
        uint64_t v201 = llvm::AttributeSet::addAttributes(v200, v5, *(unint64_t *)((char *)&v246 + i21 * 8));
        v260[i21] = v201;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 90:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v87 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v87);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i22 = 0; i22 != 8; ++i22)
      {
        unsigned int v89 = &v260[i22];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = v31;
        uint64_t v90 = llvm::AttributeSet::addAttributes(v89, v5, *(unint64_t *)((char *)&v246 + i22 * 8));
        v260[i22] = v90;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 91:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v240);
      uint64_t v143 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v143);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i23 = 0; i23 != 8; ++i23)
      {
        BOOL v145 = &v260[i23];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v31;
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = v31;
        uint64_t v253 = v31;
        uint64_t v146 = llvm::AttributeSet::addAttributes(v145, v5, *(unint64_t *)((char *)&v246 + i23 * 8));
        v260[i23] = v146;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 94:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v34);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i24 = 0; i24 != 6; ++i24)
      {
        BOOL v148 = &v260[i24];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v250 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v251 = v241;
        uint64_t v149 = llvm::AttributeSet::addAttributes(v148, v5, *(unint64_t *)((char *)&v246 + i24 * 8));
        v260[i24] = v149;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 95:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      uint64_t v107 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v107);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i25 = 0; i25 != 3; ++i25)
      {
        BOOL v109 = &v260[i25];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v110 = llvm::AttributeSet::addAttributes(v109, v5, *(unint64_t *)((char *)&v246 + i25 * 8));
        v260[i25] = v110;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 100:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      uint64_t v174 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v174);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i26 = 0; i26 != 7; ++i26)
      {
        BOOL v176 = &v260[i26];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v250 = v241;
        unint64_t v251 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v252 = v241;
        uint64_t v177 = llvm::AttributeSet::addAttributes(v176, v5, *(unint64_t *)((char *)&v246 + i26 * 8));
        v260[i26] = v177;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 101:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      uint64_t v150 = llvm::AttributeSet::get(v5, 0, 0);
      uint64_t v151 = 0;
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v150);
      while (1)
      {
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        if (v151 == 11) {
          break;
        }
        BOOL v152 = &v260[v151];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v250 = v31;
        unint64_t v251 = v31;
        uint64_t v252 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v253 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v254 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v255 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v256 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v153 = llvm::AttributeSet::addAttributes(v152, v5, *(unint64_t *)((char *)&v246 + v151 * 8));
        v260[v151++] = v153;
      }
      goto LABEL_43;
    case 102:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      uint64_t v52 = 0;
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v34);
      uint64_t v49 = v242;
      while (1)
      {
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
        if (v52 == 7) {
          break;
        }
        uint64_t v53 = &v260[v52];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v250 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v251 = v241;
        uint64_t v252 = llvm::AttributeSet::get(v5, 0, 0);
        uint64_t v54 = llvm::AttributeSet::addAttributes(v53, v5, *(unint64_t *)((char *)&v246 + v52 * 8));
        v260[v52++] = v54;
      }
LABEL_162:
      uint64_t v39 = *(void *)v243;
      unsigned int v48 = v261;
      goto LABEL_45;
    case 103:
    case 115:
    case 145:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      char v43 = v5;
      uint64_t v42 = v34;
LABEL_41:
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v43, v42);
      uint64_t v44 = v260;
      char v45 = v5;
      uint64_t v46 = v241;
      goto LABEL_42;
    case 104:
    case 109:
      char v35 = v5;
      uint64_t v36 = v237;
      goto LABEL_28;
    case 106:
    case 107:
    case 108:
    case 121:
    case 122:
    case 127:
      uint64_t v50 = v5;
      uint64_t v51 = v237;
      goto LABEL_53;
    case 110:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      uint64_t v63 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v63);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i27 = 0; i27 != 4; ++i27)
      {
        BOOL v65 = &v260[i27];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v241;
        uint64_t v66 = llvm::AttributeSet::addAttributes(v65, v5, *(unint64_t *)((char *)&v246 + i27 * 8));
        v260[i27] = v66;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 112:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v25);
      uint64_t v231 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v231);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i28 = 0; i28 != 3; ++i28)
      {
        v233 = &v260[i28];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v241;
        uint64_t v234 = llvm::AttributeSet::addAttributes(v233, v5, *(unint64_t *)((char *)&v246 + i28 * 8));
        v260[i28] = v234;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 114:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      uint64_t v219 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v219);
      llvm::AttributeSet::get(v5, 0, 0);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i29 = 0; i29 != 4; ++i29)
      {
        v221 = &v260[i29];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v249 = v241;
        uint64_t v222 = llvm::AttributeSet::addAttributes(v221, v5, *(unint64_t *)((char *)&v246 + i29 * 8));
        v260[i29] = v222;
        llvm::AttributeSet::get(v5, 0, 0);
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 116:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v237);
      uint64_t v154 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v154);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i30 = 0; i30 != 5; ++i30)
      {
        BOOL v156 = &v260[i30];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v241;
        unint64_t v249 = v241;
        unint64_t v250 = v241;
        uint64_t v157 = llvm::AttributeSet::addAttributes(v156, v5, *(unint64_t *)((char *)&v246 + i30 * 8));
        v260[i30] = v157;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 118:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      uint64_t v158 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v158);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i31 = 0; i31 != 3; ++i31)
      {
        BOOL v160 = &v260[i31];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v241;
        uint64_t v161 = llvm::AttributeSet::addAttributes(v160, v5, *(unint64_t *)((char *)&v246 + i31 * 8));
        v260[i31] = v161;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 119:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v239);
      uint64_t v223 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v223);
      llvm::AttributeSet::get(v5, 0, 0);
      for (uint64_t i32 = 0; i32 != 3; ++i32)
      {
        v225 = &v260[i32];
        unint64_t v246 = v241;
        unint64_t v247 = llvm::AttributeSet::get(v5, 0, 0);
        unint64_t v248 = v241;
        uint64_t v226 = llvm::AttributeSet::addAttributes(v225, v5, *(unint64_t *)((char *)&v246 + i32 * 8));
        v260[i32] = v226;
        llvm::AttributeSet::get(v5, 0, 0);
      }
      goto LABEL_43;
    case 123:
    case 128:
      char v35 = v5;
      uint64_t v36 = v24;
      goto LABEL_28;
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
      char v35 = v5;
      uint64_t v36 = v25;
      goto LABEL_28;
    case 149:
      char v35 = v5;
      uint64_t v36 = v21;
      goto LABEL_28;
    case 159:
      unint64_t v246 = llvm::Attribute::get(v5, 0x25u, 0);
      unint64_t v247 = llvm::Attribute::get(v5, 0x23u, 0);
      LOBYTE(v258) = 0;
      BYTE4(v258) = 0;
      unint64_t v248 = llvm::Attribute::getWithAllocSizeArgs(v5, 0, (unsigned int *)&v258);
      uint64_t v51 = llvm::AttributeSet::get(v5, &v246, 3);
      uint64_t v50 = v5;
LABEL_53:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v50, v51);
      uint64_t v38 = v5;
      uint64_t v37 = v34;
      goto LABEL_29;
    case 160:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v5, v28);
      uint64_t v202 = llvm::AttributeSet::get(v5, 0, 0);
      *(void *)v243 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v5, v202);
      uint64_t v44 = v260;
      char v45 = v5;
      uint64_t v46 = v20;
LABEL_42:
      uint64_t v47 = llvm::AttributeSet::addAttributes(v44, v45, v46);
      uint64_t *v260 = v47;
LABEL_43:
      uint64_t v39 = *(void *)v243;
      goto LABEL_44;
    case 168:
    case 169:
      char v35 = v5;
      uint64_t v36 = v239;
LABEL_28:
      *(void *)v244 = llvm::AttributeSet::addAttributes((uint64_t *)v244, v35, v36);
      uint64_t v37 = llvm::AttributeSet::get(v5, 0, 0);
      uint64_t v38 = v5;
LABEL_29:
      uint64_t v39 = llvm::AttributeSet::addAttributes((uint64_t *)v243, v38, v37);
      *(void *)v243 = v39;
LABEL_44:
      unsigned int v48 = v261;
      uint64_t v49 = v242;
LABEL_45:
      *(void *)(v49 + 112) = llvm::AttributeList::get(v5, *(uint64_t *)v244, v39, v260, v48);
      break;
    default:
      break;
  }
  if (v260 != v262) {
    free(v260);
  }
}

llvm::PointerType *llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(uint64_t Function, unint64_t a2, int a3)
{
  uint64_t v323 = *MEMORY[0x1E4F143B8];
  switch(a3)
  {
    case 0:
      int v5 = *(uint64_t ***)(Function + 2088);
      uint64_t v6 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v6;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v5, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_barrier";
      goto LABEL_59;
    case 1:
      int v9 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v9;
      *(void *)&v313[8] = v9;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v9, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_cancel";
      goto LABEL_96;
    case 2:
      int v10 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v10;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v10, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_cancel_barrier";
      goto LABEL_186;
    case 3:
      uint64_t v11 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2240);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v11, (uint64_t)&v312, 1, 0);
      int v8 = "__kmpc_flush";
      goto LABEL_128;
    case 4:
      int v12 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v12, (uint64_t)&v312, 1, 0);
      int v8 = "__kmpc_global_thread_num";
      goto LABEL_188;
    case 5:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "__kmpc_get_hardware_thread_id_in_block";
      goto LABEL_168;
    case 6:
      uint64_t v13 = *(uint64_t ***)(Function + 2088);
      uint64_t v14 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v14;
      *(void *)&v313[8] = *(void *)(Function + 2272);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v13, (uint64_t)&v312, 3, 1);
      int v8 = "__kmpc_fork_call";
      goto LABEL_102;
    case 7:
      uint64_t v15 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v15;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v15, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_omp_taskwait";
      goto LABEL_177;
    case 8:
      int v16 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v16;
      *(void *)&v313[8] = v16;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v16, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_omp_taskyield";
      goto LABEL_173;
    case 9:
      uint64_t v17 = *(uint64_t ***)(Function + 2088);
      uint64_t v18 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v18;
      *(void *)&v313[8] = v18;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v17, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_push_num_threads";
      goto LABEL_144;
    case 10:
      uint64_t v19 = *(uint64_t ***)(Function + 2088);
      uint64_t v20 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v20;
      *(void *)&v313[8] = v20;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v19, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_push_proc_bind";
      goto LABEL_186;
    case 11:
      uint64_t v21 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v21;
      *(void *)&v313[8] = *(void *)(Function + 2176);
      *(_OWORD *)&v313[16] = __PAIR128__(*(unint64_t *)&v313[8], (unint64_t)v21);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v21, (uint64_t)&v312, 5, 0);
      int v8 = "__kmpc_omp_reg_task_with_affinity";
      goto LABEL_112;
    case 12:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "__kmpc_get_hardware_num_blocks";
      goto LABEL_194;
    case 13:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "__kmpc_get_hardware_num_threads_in_block";
      uint64_t v22 = a2;
      unint64_t v23 = 40;
      goto LABEL_174;
    case 14:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "__kmpc_get_warp_size";
      goto LABEL_173;
    case 15:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_thread_num";
      goto LABEL_179;
    case 16:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_num_threads";
      goto LABEL_177;
    case 17:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_max_threads";
      goto LABEL_177;
    case 18:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_in_parallel";
      goto LABEL_196;
    case 19:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_dynamic";
      goto LABEL_196;
    case 20:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_cancellation";
      goto LABEL_173;
    case 21:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_nested";
      goto LABEL_59;
    case 22:
      uint64_t v24 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2152);
      *(void *)v313 = v312;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v24, (uint64_t)&v312, 2, 0);
      int v8 = "omp_get_schedule";
      goto LABEL_102;
    case 23:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_thread_limit";
      goto LABEL_173;
    case 24:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_supported_active_levels";
      goto LABEL_152;
    case 25:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_max_active_levels";
      goto LABEL_141;
    case 26:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_level";
      goto LABEL_96;
    case 27:
      v312 = *(uint64_t ***)(Function + 2120);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v312, (uint64_t)&v312, 1, 0);
      int v8 = "omp_get_ancestor_thread_num";
      goto LABEL_184;
    case 28:
      v312 = *(uint64_t ***)(Function + 2120);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v312, (uint64_t)&v312, 1, 0);
      int v8 = "omp_get_team_size";
      goto LABEL_134;
    case 29:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_active_level";
      goto LABEL_173;
    case 30:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_in_final";
      goto LABEL_128;
    case 31:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_proc_bind";
      goto LABEL_134;
    case 32:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_num_places";
      goto LABEL_179;
    case 33:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_num_procs";
      goto LABEL_134;
    case 34:
      uint64_t v25 = *(uint64_t ***)(Function + 2088);
      uint64_t v26 = *(void *)(Function + 2152);
      v312 = *(uint64_t ***)(Function + 2120);
      *(void *)v313 = v26;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v25, (uint64_t)&v312, 2, 0);
      int v8 = "omp_get_place_proc_ids";
      goto LABEL_162;
    case 35:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_place_num";
      goto LABEL_134;
    case 36:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2120), 0, 0, 0);
      int v8 = "omp_get_partition_num_places";
      goto LABEL_182;
    case 37:
      uint64_t v27 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2152);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v27, (uint64_t)&v312, 1, 0);
      int v8 = "omp_get_partition_place_nums";
      goto LABEL_182;
    case 38:
      uint64_t v28 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v28, (uint64_t)&v312, 1, 0);
      int v8 = "omp_set_num_threads";
      goto LABEL_177;
    case 39:
      uint64_t v29 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v29, (uint64_t)&v312, 1, 0);
      int v8 = "omp_set_dynamic";
      goto LABEL_196;
    case 40:
      uint64_t v30 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v30, (uint64_t)&v312, 1, 0);
      int v8 = "omp_set_nested";
      goto LABEL_59;
    case 41:
      uint64_t v31 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      *(void *)v313 = v312;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v31, (uint64_t)&v312, 2, 0);
      int v8 = "omp_set_schedule";
      goto LABEL_102;
    case 42:
      uint64_t v32 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v32, (uint64_t)&v312, 1, 0);
      int v8 = "omp_set_max_active_levels";
      goto LABEL_141;
    case 43:
      uint64_t v33 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v33;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v33, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_master";
      goto LABEL_96;
    case 44:
      uint64_t v34 = *(uint64_t ***)(Function + 2088);
      uint64_t v35 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v35;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v34, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_end_master";
      goto LABEL_134;
    case 45:
      uint64_t v36 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v36;
      *(void *)&v313[8] = v36;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v36, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_masked";
      goto LABEL_96;
    case 46:
      uint64_t v37 = *(uint64_t ***)(Function + 2088);
      uint64_t v38 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v38;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v37, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_end_masked";
      goto LABEL_134;
    case 47:
      uint64_t v39 = *(uint64_t ***)(Function + 2088);
      uint64_t v40 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v40;
      *(void *)&v313[8] = *(void *)(Function + 2224);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v39, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_critical";
      goto LABEL_196;
    case 48:
      uint64_t v41 = *(uint64_t ***)(Function + 2088);
      uint64_t v42 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v42;
      *(void *)&v313[8] = *(void *)(Function + 2224);
      *(void *)&v313[16] = v42;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v41, (uint64_t)&v312, 4, 0);
      int v8 = "__kmpc_critical_with_hint";
      goto LABEL_141;
    case 49:
      char v43 = *(uint64_t ***)(Function + 2088);
      uint64_t v44 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v44;
      *(void *)&v313[8] = *(void *)(Function + 2224);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v43, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_end_critical";
      goto LABEL_177;
    case 50:
      char v45 = *(uint64_t ***)(Function + 2088);
      uint64_t v46 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v46;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v45, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_begin";
      goto LABEL_128;
    case 51:
      uint64_t v47 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2240);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v47, (uint64_t)&v312, 1, 0);
      int v8 = "__kmpc_end";
      uint64_t v22 = a2;
      unint64_t v23 = 10;
      goto LABEL_174;
    case 52:
      unsigned int v48 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v48;
      *(void *)&v313[8] = v48;
      *(_OWORD *)&v313[16] = *(_OWORD *)(Function + 2168);
      uint64_t v49 = *(void *)(Function + 2224);
      *(void *)v314 = *(void *)(Function + 2288);
      *(void *)&v314[8] = v49;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v48, (uint64_t)&v312, 7, 0);
      int v8 = "__kmpc_reduce";
      goto LABEL_96;
    case 53:
      uint64_t v50 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v50;
      *(void *)&v313[8] = v50;
      *(_OWORD *)&v313[16] = *(_OWORD *)(Function + 2168);
      uint64_t v51 = *(void *)(Function + 2224);
      *(void *)v314 = *(void *)(Function + 2288);
      *(void *)&v314[8] = v51;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v50, (uint64_t)&v312, 7, 0);
      int v8 = "__kmpc_reduce_nowait";
      goto LABEL_173;
    case 54:
      uint64_t v52 = *(uint64_t ***)(Function + 2088);
      uint64_t v53 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v53;
      *(void *)&v313[8] = *(void *)(Function + 2224);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v52, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_end_reduce";
      goto LABEL_134;
    case 55:
      uint64_t v54 = *(uint64_t ***)(Function + 2088);
      uint64_t v55 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v55;
      *(void *)&v313[8] = *(void *)(Function + 2224);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v54, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_end_reduce_nowait";
      goto LABEL_188;
    case 56:
      char v56 = *(uint64_t ***)(Function + 2088);
      uint64_t v57 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v57;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v56, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_ordered";
LABEL_59:
      uint64_t v22 = a2;
      unint64_t v23 = 14;
      goto LABEL_174;
    case 57:
      uint64_t v58 = *(uint64_t ***)(Function + 2088);
      uint64_t v59 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v59;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v58, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_end_ordered";
      goto LABEL_179;
    case 58:
      char v60 = *(uint64_t ***)(Function + 2088);
      uint64_t v61 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v61;
      uint64_t v62 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v61;
      *(void *)&v313[16] = v62;
      *(void *)&v313[24] = v62;
      *(void *)v314 = v62;
      *(void *)&v314[8] = v62;
      *(void *)&v314[16] = v61;
      v315 = v61;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v60, (uint64_t)&v312, 9, 0);
      int v8 = "__kmpc_for_static_init_4";
      goto LABEL_188;
    case 59:
      uint64_t v63 = *(uint64_t ***)(Function + 2088);
      uint64_t v64 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v64;
      uint64_t v65 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v64;
      *(void *)&v313[16] = v65;
      *(void *)&v313[24] = v65;
      *(void *)v314 = v65;
      *(void *)&v314[8] = v65;
      *(void *)&v314[16] = v64;
      v315 = v64;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v63, (uint64_t)&v312, 9, 0);
      int v8 = "__kmpc_for_static_init_4u";
      goto LABEL_141;
    case 60:
      uint64_t v66 = *(uint64_t ***)(Function + 2088);
      uint64_t v67 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v67;
      uint64_t v68 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v67;
      *(void *)&v313[16] = v68;
      *(void *)&v313[24] = *(void *)(Function + 2160);
      *(void *)v314 = *(void *)&v313[24];
      BOOL v69 = *(uint64_t ***)(Function + 2128);
      *(void *)&v314[8] = *(void *)&v313[24];
      *(void *)&v314[16] = v69;
      v315 = v69;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v66, (uint64_t)&v312, 9, 0);
      int v8 = "__kmpc_for_static_init_8";
      goto LABEL_188;
    case 61:
      uint64_t v70 = *(uint64_t ***)(Function + 2088);
      uint64_t v71 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v71;
      uint64_t v72 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v71;
      *(void *)&v313[16] = v72;
      *(void *)&v313[24] = *(void *)(Function + 2160);
      *(void *)v314 = *(void *)&v313[24];
      uint64_t v73 = *(uint64_t ***)(Function + 2128);
      *(void *)&v314[8] = *(void *)&v313[24];
      *(void *)&v314[16] = v73;
      v315 = v73;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v70, (uint64_t)&v312, 9, 0);
      int v8 = "__kmpc_for_static_init_8u";
      goto LABEL_141;
    case 62:
      uint64_t v74 = *(uint64_t ***)(Function + 2088);
      uint64_t v75 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v75;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v74, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_for_static_fini";
      goto LABEL_162;
    case 63:
      uint64_t v76 = *(uint64_t ***)(Function + 2088);
      BOOL v77 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v77;
      uint64_t v78 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v77;
      *(void *)&v313[16] = v78;
      *(void *)&v313[24] = v78;
      *(void *)v314 = v78;
      *(void *)&v314[8] = v78;
      *(void *)&v314[16] = v77;
      v315 = v77;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v76, (uint64_t)&v312, 9, 0);
      int v8 = "__kmpc_distribute_static_init_4";
      goto LABEL_152;
    case 64:
      uint64_t v79 = *(uint64_t ***)(Function + 2088);
      uint64_t v80 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v80;
      uint64_t v81 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v80;
      *(void *)&v313[16] = v81;
      *(void *)&v313[24] = v81;
      *(void *)v314 = v81;
      *(void *)&v314[8] = v81;
      *(void *)&v314[16] = v80;
      v315 = v80;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v79, (uint64_t)&v312, 9, 0);
      int v8 = "__kmpc_distribute_static_init_4u";
      goto LABEL_198;
    case 65:
      uint64_t v82 = *(uint64_t ***)(Function + 2088);
      uint64_t v83 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v83;
      uint64_t v84 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v83;
      *(void *)&v313[16] = v84;
      *(void *)&v313[24] = *(void *)(Function + 2160);
      *(void *)v314 = *(void *)&v313[24];
      uint64_t v85 = *(uint64_t ***)(Function + 2128);
      *(void *)&v314[8] = *(void *)&v313[24];
      *(void *)&v314[16] = v85;
      v315 = v85;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v82, (uint64_t)&v312, 9, 0);
      int v8 = "__kmpc_distribute_static_init_8";
      goto LABEL_152;
    case 66:
      uint64_t v86 = *(uint64_t ***)(Function + 2088);
      uint64_t v87 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v87;
      uint64_t v88 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v87;
      *(void *)&v313[16] = v88;
      *(void *)&v313[24] = *(void *)(Function + 2160);
      *(void *)v314 = *(void *)&v313[24];
      unsigned int v89 = *(uint64_t ***)(Function + 2128);
      *(void *)&v314[8] = *(void *)&v313[24];
      *(void *)&v314[16] = v89;
      v315 = v89;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v86, (uint64_t)&v312, 9, 0);
      int v8 = "__kmpc_distribute_static_init_8u";
      goto LABEL_198;
    case 67:
      uint64_t v90 = *(uint64_t ***)(Function + 2088);
      uint64_t v91 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v91;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v90, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_distribute_static_fini";
      goto LABEL_192;
    case 68:
      BOOL v92 = *(uint64_t ***)(Function + 2088);
      uint64_t v93 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v93;
      uint64_t v94 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v93;
      *(void *)&v313[16] = v94;
      *(void *)&v313[24] = v93;
      *(void *)v314 = v93;
      *(void *)&v314[8] = v93;
      *(void *)&v314[16] = v93;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v92, (uint64_t)&v312, 8, 0);
      int v8 = "__kmpc_dist_dispatch_init_4";
      goto LABEL_184;
    case 69:
      uint64_t v95 = *(uint64_t ***)(Function + 2088);
      uint64_t v96 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v96;
      uint64_t v97 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v96;
      *(void *)&v313[16] = v97;
      *(void *)&v313[24] = v96;
      *(void *)v314 = v96;
      *(void *)&v314[8] = v96;
      *(void *)&v314[16] = v96;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v95, (uint64_t)&v312, 8, 0);
      int v8 = "__kmpc_dist_dispatch_init_4u";
      goto LABEL_182;
    case 70:
      uint64_t v98 = *(uint64_t ***)(Function + 2088);
      uint64_t v99 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v99;
      uint64_t v100 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v99;
      *(void *)&v313[16] = v100;
      *(void *)&v313[24] = *(void *)(Function + 2128);
      *(void *)v314 = *(void *)&v313[24];
      *(void *)&v314[8] = *(void *)&v313[24];
      *(void *)&v314[16] = *(void *)&v313[24];
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v98, (uint64_t)&v312, 8, 0);
      int v8 = "__kmpc_dist_dispatch_init_8";
      goto LABEL_184;
    case 71:
      int v101 = *(uint64_t ***)(Function + 2088);
      uint64_t v102 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v102;
      uint64_t v103 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v102;
      *(void *)&v313[16] = v103;
      *(void *)&v313[24] = *(void *)(Function + 2128);
      *(void *)v314 = *(void *)&v313[24];
      *(void *)&v314[8] = *(void *)&v313[24];
      *(void *)&v314[16] = *(void *)&v313[24];
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v101, (uint64_t)&v312, 8, 0);
      int v8 = "__kmpc_dist_dispatch_init_8u";
      goto LABEL_182;
    case 72:
      BOOL v104 = *(uint64_t ***)(Function + 2088);
      uint64_t v105 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v105;
      *(void *)&v313[8] = v105;
      *(void *)&v313[16] = v105;
      *(void *)&v313[24] = v105;
      *(void *)v314 = v105;
      *(void *)&v314[8] = v105;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v104, (uint64_t)&v312, 7, 0);
      int v8 = "__kmpc_dispatch_init_4";
      goto LABEL_162;
    case 73:
      uint64_t v106 = *(uint64_t ***)(Function + 2088);
      uint64_t v107 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v107;
      *(void *)&v313[8] = v107;
      *(void *)&v313[16] = v107;
      *(void *)&v313[24] = v107;
      *(void *)v314 = v107;
      *(void *)&v314[8] = v107;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v106, (uint64_t)&v312, 7, 0);
      int v8 = "__kmpc_dispatch_init_4u";
      goto LABEL_144;
    case 74:
      BOOL v108 = *(uint64_t ***)(Function + 2088);
      uint64_t v109 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v109;
      uint64_t v110 = *(void *)(Function + 2128);
      *(void *)&v313[8] = v109;
      *(void *)&v313[16] = v110;
      *(void *)&v313[24] = v110;
      *(void *)v314 = v110;
      *(void *)&v314[8] = v110;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v108, (uint64_t)&v312, 7, 0);
      int v8 = "__kmpc_dispatch_init_8";
      goto LABEL_162;
    case 75:
      uint64_t v111 = *(uint64_t ***)(Function + 2088);
      uint64_t v112 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v112;
      uint64_t v113 = *(void *)(Function + 2128);
      *(void *)&v313[8] = v112;
      *(void *)&v313[16] = v113;
      *(void *)&v313[24] = v113;
      *(void *)v314 = v113;
      *(void *)&v314[8] = v113;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v111, (uint64_t)&v312, 7, 0);
      int v8 = "__kmpc_dispatch_init_8u";
      goto LABEL_144;
    case 76:
      uint64_t v114 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v114;
      *(void *)&v313[8] = *(void *)(Function + 2152);
      *(void *)&v313[16] = *(void *)&v313[8];
      *(void *)&v313[24] = *(void *)&v313[8];
      *(void *)v314 = *(void *)&v313[8];
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v114, (uint64_t)&v312, 6, 0);
      int v8 = "__kmpc_dispatch_next_4";
      goto LABEL_162;
    case 77:
      uint64_t v115 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v115;
      *(void *)&v313[8] = *(void *)(Function + 2152);
      *(void *)&v313[16] = *(void *)&v313[8];
      *(void *)&v313[24] = *(void *)&v313[8];
      *(void *)v314 = *(void *)&v313[8];
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v115, (uint64_t)&v312, 6, 0);
      int v8 = "__kmpc_dispatch_next_4u";
      goto LABEL_144;
    case 78:
      BOOL v116 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v116;
      uint64_t v117 = *(void *)(Function + 2160);
      *(void *)&v313[8] = *(void *)(Function + 2152);
      *(void *)&v313[16] = v117;
      *(void *)&v313[24] = v117;
      *(void *)v314 = v117;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v116, (uint64_t)&v312, 6, 0);
      int v8 = "__kmpc_dispatch_next_8";
      goto LABEL_162;
    case 79:
      uint64_t v118 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v118;
      uint64_t v119 = *(void *)(Function + 2160);
      *(void *)&v313[8] = *(void *)(Function + 2152);
      *(void *)&v313[16] = v119;
      *(void *)&v313[24] = v119;
      *(void *)v314 = v119;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v118, (uint64_t)&v312, 6, 0);
      int v8 = "__kmpc_dispatch_next_8u";
      goto LABEL_144;
    case 80:
      BOOL v120 = *(uint64_t ***)(Function + 2088);
      uint64_t v121 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v121;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v120, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_dispatch_fini_4";
      goto LABEL_162;
    case 81:
      uint64_t v122 = *(uint64_t ***)(Function + 2088);
      uint64_t v123 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v123;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v122, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_dispatch_fini_4u";
      goto LABEL_144;
    case 82:
      BOOL v124 = *(uint64_t ***)(Function + 2088);
      uint64_t v125 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v125;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v124, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_dispatch_fini_8";
      goto LABEL_162;
    case 83:
      uint64_t v126 = *(uint64_t ***)(Function + 2088);
      uint64_t v127 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v127;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v126, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_dispatch_fini_8u";
      goto LABEL_144;
    case 84:
      BOOL v128 = *(uint64_t ***)(Function + 2088);
      uint64_t v129 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v129;
      *(void *)&v313[8] = *(void *)(Function + 2152);
      *(void *)&v313[16] = *(void *)&v313[8];
      *(void *)&v313[24] = *(void *)&v313[8];
      *(void *)v314 = *(void *)&v313[8];
      *(void *)&v314[8] = v129;
      *(void *)&v314[16] = v129;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v128, (uint64_t)&v312, 8, 0);
      int v8 = "__kmpc_team_static_init_4";
      goto LABEL_141;
    case 85:
      uint64_t v130 = *(uint64_t ***)(Function + 2088);
      uint64_t v131 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v131;
      *(void *)&v313[8] = *(void *)(Function + 2152);
      *(void *)&v313[16] = *(void *)&v313[8];
      *(void *)&v313[24] = *(void *)&v313[8];
      *(void *)v314 = *(void *)&v313[8];
      *(void *)&v314[8] = v131;
      *(void *)&v314[16] = v131;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v130, (uint64_t)&v312, 8, 0);
      int v8 = "__kmpc_team_static_init_4u";
      goto LABEL_190;
    case 86:
      BOOL v132 = *(uint64_t ***)(Function + 2088);
      uint64_t v133 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v133;
      uint64_t v134 = *(void *)(Function + 2160);
      *(void *)&v313[8] = *(void *)(Function + 2152);
      *(void *)&v313[16] = v134;
      *(void *)&v313[24] = v134;
      *(void *)v314 = v134;
      *(void *)&v314[8] = *(void *)(Function + 2128);
      *(void *)&v314[16] = *(void *)&v314[8];
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v132, (uint64_t)&v312, 8, 0);
      int v8 = "__kmpc_team_static_init_8";
      goto LABEL_141;
    case 87:
      uint64_t v135 = *(uint64_t ***)(Function + 2088);
      uint64_t v136 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v136;
      uint64_t v137 = *(void *)(Function + 2160);
      *(void *)&v313[8] = *(void *)(Function + 2152);
      *(void *)&v313[16] = v137;
      *(void *)&v313[24] = v137;
      *(void *)v314 = v137;
      *(void *)&v314[8] = *(void *)(Function + 2128);
      *(void *)&v314[16] = *(void *)&v314[8];
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v135, (uint64_t)&v312, 8, 0);
      int v8 = "__kmpc_team_static_init_8u";
      goto LABEL_190;
    case 88:
      uint64_t v138 = *(uint64_t ***)(Function + 2088);
      uint64_t v139 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v139;
      uint64_t v140 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v139;
      *(void *)&v313[16] = v140;
      *(void *)&v313[24] = v140;
      *(void *)v314 = v140;
      *(void *)&v314[8] = v140;
      *(void *)&v314[16] = v140;
      v315 = v139;
      v316 = v139;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v138, (uint64_t)&v312, 10, 0);
      int v8 = "__kmpc_dist_for_static_init_4";
      goto LABEL_192;
    case 89:
      BOOL v141 = *(uint64_t ***)(Function + 2088);
      uint64_t v142 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v142;
      uint64_t v143 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v142;
      *(void *)&v313[16] = v143;
      *(void *)&v313[24] = v143;
      *(void *)v314 = v143;
      *(void *)&v314[8] = v143;
      *(void *)&v314[16] = v143;
      v315 = v142;
      v316 = v142;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v141, (uint64_t)&v312, 10, 0);
      int v8 = "__kmpc_dist_for_static_init_4u";
      goto LABEL_194;
    case 90:
      BOOL v144 = *(uint64_t ***)(Function + 2088);
      uint64_t v145 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v145;
      uint64_t v146 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v145;
      *(void *)&v313[16] = v146;
      *(void *)&v313[24] = *(void *)(Function + 2160);
      *(void *)v314 = *(void *)&v313[24];
      *(void *)&v314[8] = *(void *)&v313[24];
      *(void *)&v314[16] = *(void *)&v313[24];
      v315 = *(uint64_t ***)(Function + 2128);
      v316 = v315;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v144, (uint64_t)&v312, 10, 0);
      int v8 = "__kmpc_dist_for_static_init_8";
      goto LABEL_192;
    case 91:
      BOOL v147 = *(uint64_t ***)(Function + 2088);
      uint64_t v148 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v148;
      uint64_t v149 = *(void *)(Function + 2152);
      *(void *)&v313[8] = v148;
      *(void *)&v313[16] = v149;
      *(void *)&v313[24] = *(void *)(Function + 2160);
      *(void *)v314 = *(void *)&v313[24];
      *(void *)&v314[8] = *(void *)&v313[24];
      *(void *)&v314[16] = *(void *)&v313[24];
      v315 = *(uint64_t ***)(Function + 2128);
      v316 = v315;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v147, (uint64_t)&v312, 10, 0);
      int v8 = "__kmpc_dist_for_static_init_8u";
      goto LABEL_194;
    case 92:
      uint64_t v150 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v150;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v150, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_single";
LABEL_96:
      uint64_t v22 = a2;
      unint64_t v23 = 13;
      goto LABEL_174;
    case 93:
      uint64_t v151 = *(uint64_t ***)(Function + 2088);
      uint64_t v152 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v152;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v151, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_end_single";
      goto LABEL_134;
    case 94:
      uint64_t v153 = *(uint64_t ***)(Function + 2176);
      uint64_t v154 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v154;
      uint64_t v155 = *(void *)(Function + 2168);
      *(void *)&v313[8] = v154;
      *(void *)&v313[16] = v155;
      uint64_t v156 = *(void *)(Function + 2368);
      *(void *)&v313[24] = v155;
      *(void *)v314 = v156;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v153, (uint64_t)&v312, 6, 0);
      int v8 = "__kmpc_omp_task_alloc";
      goto LABEL_186;
    case 95:
      uint64_t v157 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v157;
      *(void *)&v313[8] = *(void *)(Function + 2176);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v157, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_omp_task";
      goto LABEL_196;
    case 96:
      uint64_t v158 = *(uint64_t ***)(Function + 2088);
      uint64_t v159 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v159;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v158, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_end_taskgroup";
      goto LABEL_173;
    case 97:
      BOOL v160 = *(uint64_t ***)(Function + 2088);
      uint64_t v161 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v161;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v160, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_taskgroup";
LABEL_102:
      uint64_t v22 = a2;
      unint64_t v23 = 16;
      goto LABEL_174;
    case 98:
      uint64_t v162 = *(uint64_t ***)(Function + 2088);
      uint64_t v163 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v163;
      *(void *)&v313[8] = *(void *)(Function + 2176);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v162, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_omp_task_begin_if0";
      goto LABEL_141;
    case 99:
      BOOL v164 = *(uint64_t ***)(Function + 2088);
      uint64_t v165 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v165;
      *(void *)&v313[8] = *(void *)(Function + 2176);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v164, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_omp_task_complete_if0";
      goto LABEL_182;
    case 100:
      uint64_t v166 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v166;
      *(void *)&v313[8] = *(void *)(Function + 2176);
      *(_OWORD *)&v313[16] = __PAIR128__(*(unint64_t *)&v313[8], (unint64_t)v166);
      *(_OWORD *)v314 = __PAIR128__(*(unint64_t *)&v313[8], (unint64_t)v166);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v166, (uint64_t)&v312, 7, 0);
      int v8 = "__kmpc_omp_task_with_deps";
      goto LABEL_141;
    case 101:
      BOOL v167 = *(uint64_t ***)(Function + 2088);
      BOOL v168 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v168;
      *(void *)&v313[8] = *(void *)(Function + 2176);
      *(void *)&v313[16] = v168;
      *(void *)&v313[24] = *(void *)(Function + 2160);
      *(void *)v314 = *(void *)&v313[24];
      *(void *)&v314[8] = *(void *)(Function + 2128);
      *(void *)&v314[16] = v168;
      v315 = v168;
      v316 = *(uint64_t ***)&v314[8];
      v317 = *(uint64_t ***)&v313[8];
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v167, (uint64_t)&v312, 11, 0);
      int v8 = "__kmpc_taskloop";
      goto LABEL_196;
    case 102:
      uint64_t v169 = *(uint64_t ***)(Function + 2176);
      uint64_t v170 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v170;
      uint64_t v171 = *(void *)(Function + 2168);
      *(void *)&v313[8] = v170;
      *(void *)&v313[16] = v171;
      uint64_t v172 = *(void *)(Function + 2368);
      *(void *)&v313[24] = v171;
      *(void *)v314 = v172;
      *(void *)&v314[8] = *(void *)(Function + 2128);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v169, (uint64_t)&v312, 7, 0);
      int v8 = "__kmpc_omp_target_task_alloc";
      goto LABEL_182;
    case 103:
      uint64_t v173 = *(uint64_t ***)(Function + 2176);
      uint64_t v174 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v174;
      *(void *)&v313[8] = v174;
      *(void *)&v313[16] = v174;
      *(void *)&v313[24] = v173;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v173, (uint64_t)&v312, 5, 0);
      int v8 = "__kmpc_taskred_modifier_init";
      goto LABEL_182;
    case 104:
      BOOL v175 = *(uint64_t ***)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(void *)v313 = v312;
      *(void *)&v313[8] = v175;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v175, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_taskred_init";
      goto LABEL_177;
    case 105:
      BOOL v176 = *(uint64_t ***)(Function + 2088);
      uint64_t v177 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v177;
      *(void *)&v313[8] = v177;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v176, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_task_reduction_modifier_fini";
      goto LABEL_171;
    case 106:
      uint64_t v178 = *(uint64_t ***)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(void *)v313 = v178;
      *(void *)&v313[8] = v178;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v178, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_task_reduction_get_th_data";
LABEL_112:
      uint64_t v22 = a2;
      unint64_t v23 = 33;
      goto LABEL_174;
    case 107:
      uint64_t v179 = *(uint64_t ***)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(void *)v313 = v312;
      *(void *)&v313[8] = v179;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v179, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_task_reduction_init";
      goto LABEL_190;
    case 108:
      uint64_t v180 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2176);
      *(void *)v313 = v180;
      *(void *)&v313[8] = v180;
      *(void *)&v313[16] = v180;
      *(void *)&v313[24] = v312;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v312, (uint64_t)&v312, 5, 0);
      int v8 = "__kmpc_task_reduction_modifier_init";
      goto LABEL_171;
    case 109:
      uint64_t v181 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2176);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v181, (uint64_t)&v312, 1, 0);
      int v8 = "__kmpc_proxy_task_completed_ooo";
      goto LABEL_152;
    case 110:
      uint64_t v182 = *(uint64_t ***)(Function + 2088);
      uint64_t v183 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v183;
      uint64_t v184 = *(void *)(Function + 2176);
      *(void *)&v313[8] = v183;
      *(void *)&v313[16] = v184;
      *(void *)&v313[24] = v183;
      *(void *)v314 = v184;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v182, (uint64_t)&v312, 6, 0);
      int v8 = "__kmpc_omp_wait_deps";
      goto LABEL_173;
    case 111:
      uint64_t v185 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v185;
      *(void *)&v313[8] = v185;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v185, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_cancellationpoint";
      goto LABEL_188;
    case 112:
      uint64_t v186 = *(uint64_t ***)(Function + 2088);
      uint64_t v187 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v187;
      *(void *)&v313[8] = *(void *)(Function + 2272);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v186, (uint64_t)&v312, 3, 1);
      int v8 = "__kmpc_fork_teams";
      goto LABEL_134;
    case 113:
      v188 = *(uint64_t ***)(Function + 2088);
      uint64_t v189 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v189;
      *(void *)&v313[8] = v189;
      *(void *)&v313[16] = v189;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v188, (uint64_t)&v312, 4, 0);
      int v8 = "__kmpc_push_num_teams";
      goto LABEL_186;
    case 114:
      uint64_t v190 = *(uint64_t ***)(Function + 2088);
      uint64_t v191 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v191;
      *(_OWORD *)&v313[8] = *(_OWORD *)(Function + 2168);
      *(void *)&v313[24] = *(void *)(Function + 2304);
      *(void *)v314 = v191;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v190, (uint64_t)&v312, 6, 0);
      int v8 = "__kmpc_copyprivate";
      goto LABEL_179;
    case 115:
      v192 = *(uint64_t ***)(Function + 2176);
      uint64_t v193 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v193;
      uint64_t v194 = *(void *)(Function + 2168);
      *(void *)&v313[8] = v192;
      *(void *)&v313[16] = v194;
      *(void *)&v313[24] = *(void *)(Function + 2192);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v192, (uint64_t)&v312, 5, 0);
      int v8 = "__kmpc_threadprivate_cached";
      goto LABEL_184;
    case 116:
      v195 = *(uint64_t ***)(Function + 2088);
      uint64_t v196 = *(void *)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v196;
      uint64_t v197 = *(void *)(Function + 2352);
      *(void *)&v313[8] = *(void *)(Function + 2320);
      *(void *)&v313[16] = v197;
      *(void *)&v313[24] = *(void *)(Function + 2336);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v195, (uint64_t)&v312, 5, 0);
      int v8 = "__kmpc_threadprivate_register";
      goto LABEL_192;
    case 117:
      uint64_t v198 = *(uint64_t ***)(Function + 2088);
      uint64_t v199 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v199;
      uint64_t v200 = *(void *)(Function + 2176);
      *(void *)&v313[8] = v199;
      *(void *)&v313[16] = v200;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v198, (uint64_t)&v312, 4, 0);
      int v8 = "__kmpc_doacross_init";
      goto LABEL_173;
    case 118:
      uint64_t v201 = *(uint64_t ***)(Function + 2088);
      uint64_t v202 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v202;
      *(void *)&v313[8] = *(void *)(Function + 2160);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v201, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_doacross_post";
      goto LABEL_173;
    case 119:
      uint64_t v203 = *(uint64_t ***)(Function + 2088);
      uint64_t v204 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v204;
      *(void *)&v313[8] = *(void *)(Function + 2160);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v203, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_doacross_wait";
      goto LABEL_173;
    case 120:
      v205 = *(uint64_t ***)(Function + 2088);
      uint64_t v206 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v206;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v205, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_doacross_fini";
      goto LABEL_173;
    case 121:
      uint64_t v207 = *(uint64_t ***)(Function + 2176);
      uint64_t v208 = *(void *)(Function + 2168);
      v312 = *(uint64_t ***)(Function + 2120);
      *(void *)v313 = v208;
      *(void *)&v313[8] = v207;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v207, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_alloc";
LABEL_128:
      uint64_t v22 = a2;
      unint64_t v23 = 12;
      goto LABEL_174;
    case 122:
      v209 = *(uint64_t ***)(Function + 2176);
      uint64_t v210 = *(void *)(Function + 2168);
      v312 = *(uint64_t ***)(Function + 2120);
      *(void *)v313 = v210;
      *(void *)&v313[8] = v210;
      *(void *)&v313[16] = v209;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v209, (uint64_t)&v312, 4, 0);
      int v8 = "__kmpc_aligned_alloc";
      goto LABEL_173;
    case 123:
      uint64_t v211 = *(uint64_t ***)(Function + 2088);
      uint64_t v212 = *(void *)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(void *)v313 = v212;
      *(void *)&v313[8] = v212;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v211, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_free";
      uint64_t v22 = a2;
      unint64_t v23 = 11;
      goto LABEL_174;
    case 124:
      v213 = *(uint64_t ***)(Function + 2088);
      uint64_t v214 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v214;
      uint64_t v215 = *(void *)(Function + 2128);
      *(void *)&v313[8] = *(void *)(Function + 2184);
      *(void *)&v313[16] = v215;
      *(void *)&v313[24] = v214;
      *(void *)v314 = v214;
      *(void *)&v314[8] = *(void *)(Function + 2176);
      *(void *)&v314[16] = v214;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v213, (uint64_t)&v312, 8, 0);
      int v8 = "__tgt_interop_init";
      goto LABEL_179;
    case 125:
      v216 = *(uint64_t ***)(Function + 2088);
      uint64_t v217 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v217;
      *(void *)&v313[8] = *(void *)(Function + 2184);
      *(void *)&v313[16] = v217;
      uint64_t v218 = *(void *)(Function + 2176);
      *(void *)&v313[24] = v217;
      *(void *)v314 = v218;
      *(void *)&v314[8] = v217;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v216, (uint64_t)&v312, 7, 0);
      int v8 = "__tgt_interop_destroy";
      goto LABEL_186;
    case 126:
      uint64_t v219 = *(uint64_t ***)(Function + 2088);
      uint64_t v220 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v220;
      *(void *)&v313[8] = *(void *)(Function + 2184);
      *(void *)&v313[16] = v220;
      uint64_t v221 = *(void *)(Function + 2176);
      *(void *)&v313[24] = v220;
      *(void *)v314 = v221;
      *(void *)&v314[8] = v220;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v219, (uint64_t)&v312, 7, 0);
      int v8 = "__tgt_interop_use";
LABEL_134:
      uint64_t v22 = a2;
      unint64_t v23 = 17;
      goto LABEL_174;
    case 127:
      uint64_t v222 = *(uint64_t ***)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(void *)v313 = v222;
      *(void *)&v313[8] = v312;
      *(void *)&v313[16] = v222;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v222, (uint64_t)&v312, 4, 0);
      int v8 = "__kmpc_init_allocator";
      goto LABEL_186;
    case 128:
      uint64_t v223 = *(uint64_t ***)(Function + 2088);
      uint64_t v224 = *(void *)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2120);
      *(void *)v313 = v224;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v223, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_destroy_allocator";
      goto LABEL_188;
    case 129:
      v225 = *(uint64_t ***)(Function + 2088);
      uint64_t v226 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v226;
      *(void *)&v313[8] = v226;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v225, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_push_target_tripcount_mapper";
      goto LABEL_171;
    case 130:
      uint64_t v227 = *(uint64_t ***)(Function + 2120);
      uint64_t v228 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v228;
      *(void *)&v313[8] = *(void *)(Function + 2176);
      *(void *)&v313[16] = v227;
      *(void *)&v313[24] = *(void *)(Function + 2184);
      *(void *)v314 = *(void *)&v313[24];
      *(void *)&v314[8] = *(void *)(Function + 2160);
      *(void *)&v314[16] = *(void *)&v314[8];
      v315 = *(uint64_t ***)&v313[24];
      v316 = *(uint64_t ***)&v313[24];
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v227, (uint64_t)&v312, 10, 0);
      int v8 = "__tgt_target_mapper";
      goto LABEL_177;
    case 131:
      v229 = *(uint64_t ***)(Function + 2120);
      uint64_t v230 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v230;
      *(void *)&v313[8] = *(void *)(Function + 2176);
      *(void *)&v313[16] = v229;
      *(void *)&v313[24] = *(void *)(Function + 2184);
      *(void *)v314 = *(void *)&v313[24];
      *(void *)&v314[8] = *(void *)(Function + 2160);
      *(void *)&v314[16] = *(void *)&v314[8];
      v315 = *(uint64_t ***)&v313[24];
      v316 = *(uint64_t ***)&v313[24];
      v317 = v229;
      v318 = *(uint64_t ***)&v313[8];
      v319 = v229;
      uint64_t v320 = *(void *)&v313[8];
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v229, (uint64_t)&v312, 14, 0);
      int v8 = "__tgt_target_nowait_mapper";
      goto LABEL_190;
    case 132:
      uint64_t v231 = *(uint64_t ***)(Function + 2120);
      uint64_t v232 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v232;
      *(void *)&v313[8] = *(void *)(Function + 2176);
      *(void *)&v313[16] = v231;
      *(void *)&v313[24] = *(void *)(Function + 2184);
      *(void *)v314 = *(void *)&v313[24];
      *(void *)&v314[8] = *(void *)(Function + 2160);
      *(void *)&v314[16] = *(void *)&v314[8];
      v315 = *(uint64_t ***)&v313[24];
      v316 = *(uint64_t ***)&v313[24];
      v317 = v231;
      v318 = v231;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v231, (uint64_t)&v312, 12, 0);
      int v8 = "__tgt_target_teams_mapper";
LABEL_141:
      uint64_t v22 = a2;
      unint64_t v23 = 25;
      goto LABEL_174;
    case 133:
      v233 = *(uint64_t ***)(Function + 2120);
      uint64_t v234 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v234;
      *(void *)&v313[8] = *(void *)(Function + 2176);
      *(void *)&v313[16] = v233;
      *(void *)&v313[24] = *(void *)(Function + 2184);
      *(void *)v314 = *(void *)&v313[24];
      *(void *)&v314[8] = *(void *)(Function + 2160);
      *(void *)&v314[16] = *(void *)&v314[8];
      v315 = *(uint64_t ***)&v313[24];
      v316 = *(uint64_t ***)&v313[24];
      v317 = v233;
      v318 = v233;
      v319 = v233;
      uint64_t v320 = *(void *)&v313[8];
      v321 = v233;
      uint64_t v322 = *(void *)&v313[8];
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v233, (uint64_t)&v312, 16, 0);
      int v8 = "__tgt_target_teams_nowait_mapper";
      goto LABEL_198;
    case 134:
      uint64_t v235 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2128);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v235, (uint64_t)&v312, 1, 0);
      int v8 = "__tgt_register_requires";
LABEL_144:
      uint64_t v22 = a2;
      unint64_t v23 = 23;
      goto LABEL_174;
    case 135:
      uint64_t v236 = *(uint64_t ***)(Function + 2088);
      uint64_t v237 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v237;
      uint64_t v238 = *(uint64_t ***)(Function + 2184);
      *(void *)&v313[8] = *(void *)(Function + 2120);
      *(void *)&v313[16] = v238;
      uint64_t v239 = *(void *)(Function + 2160);
      *(void *)&v313[24] = v238;
      *(void *)v314 = v239;
      *(void *)&v314[8] = v239;
      *(void *)&v314[16] = v238;
      v315 = v238;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v236, (uint64_t)&v312, 9, 0);
      int v8 = "__tgt_target_data_begin_mapper";
      goto LABEL_194;
    case 136:
      uint64_t v240 = *(uint64_t ***)(Function + 2088);
      uint64_t v241 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v241;
      uint64_t v242 = *(uint64_t ***)(Function + 2184);
      *(void *)&v313[8] = *(void *)(Function + 2120);
      *(void *)&v313[16] = v242;
      uint64_t v243 = *(void *)(Function + 2160);
      *(void *)&v313[24] = v242;
      *(void *)v314 = v243;
      *(void *)&v314[8] = v243;
      *(void *)&v314[16] = v242;
      v315 = v242;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v240, (uint64_t)&v312, 9, 0);
      int v8 = "__tgt_target_data_begin_nowait_mapper";
      uint64_t v22 = a2;
      unint64_t v23 = 37;
      goto LABEL_174;
    case 137:
      v244 = *(uint64_t ***)(Function + 2088);
      uint64_t v245 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v245;
      unint64_t v246 = *(uint64_t ***)(Function + 2184);
      *(void *)&v313[8] = *(void *)(Function + 2120);
      *(void *)&v313[16] = v246;
      uint64_t v247 = *(void *)(Function + 2160);
      *(void *)&v313[24] = v246;
      *(void *)v314 = v247;
      *(void *)&v314[8] = v247;
      *(void *)&v314[16] = v246;
      unint64_t v248 = *(uint64_t ***)(Function + 2256);
      v315 = v246;
      v316 = v248;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v244, (uint64_t)&v312, 10, 0);
      int v8 = "__tgt_target_data_begin_mapper_issue";
      uint64_t v22 = a2;
      unint64_t v23 = 36;
      goto LABEL_174;
    case 138:
      unint64_t v249 = *(uint64_t ***)(Function + 2088);
      uint64_t v250 = *(void *)(Function + 2256);
      v312 = *(uint64_t ***)(Function + 2128);
      *(void *)v313 = v250;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v249, (uint64_t)&v312, 2, 0);
      int v8 = "__tgt_target_data_begin_mapper_wait";
      goto LABEL_171;
    case 139:
      unint64_t v251 = *(uint64_t ***)(Function + 2088);
      uint64_t v252 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v252;
      uint64_t v253 = *(uint64_t ***)(Function + 2184);
      *(void *)&v313[8] = *(void *)(Function + 2120);
      *(void *)&v313[16] = v253;
      uint64_t v254 = *(void *)(Function + 2160);
      *(void *)&v313[24] = v253;
      *(void *)v314 = v254;
      *(void *)&v314[8] = v254;
      *(void *)&v314[16] = v253;
      v315 = v253;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v251, (uint64_t)&v312, 9, 0);
      int v8 = "__tgt_target_data_end_mapper";
      goto LABEL_182;
    case 140:
      uint64_t v255 = *(uint64_t ***)(Function + 2088);
      uint64_t v256 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v256;
      v257 = *(uint64_t ***)(Function + 2184);
      *(void *)&v313[8] = *(void *)(Function + 2120);
      *(void *)&v313[16] = v257;
      uint64_t v258 = *(void *)(Function + 2160);
      *(void *)&v313[24] = v257;
      *(void *)v314 = v258;
      *(void *)&v314[8] = v258;
      *(void *)&v314[16] = v257;
      v315 = v257;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v255, (uint64_t)&v312, 9, 0);
      int v8 = "__tgt_target_data_end_nowait_mapper";
      goto LABEL_171;
    case 141:
      unint64_t v259 = *(uint64_t ***)(Function + 2088);
      uint64_t v260 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v260;
      uint64_t v261 = *(uint64_t ***)(Function + 2184);
      *(void *)&v313[8] = *(void *)(Function + 2120);
      *(void *)&v313[16] = v261;
      uint64_t v262 = *(void *)(Function + 2160);
      *(void *)&v313[24] = v261;
      *(void *)v314 = v262;
      *(void *)&v314[8] = v262;
      *(void *)&v314[16] = v261;
      v315 = v261;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v259, (uint64_t)&v312, 9, 0);
      int v8 = "__tgt_target_data_update_mapper";
LABEL_152:
      uint64_t v22 = a2;
      unint64_t v23 = 31;
      goto LABEL_174;
    case 142:
      v263 = *(uint64_t ***)(Function + 2088);
      uint64_t v264 = *(void *)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v264;
      v265 = *(uint64_t ***)(Function + 2184);
      *(void *)&v313[8] = *(void *)(Function + 2120);
      *(void *)&v313[16] = v265;
      uint64_t v266 = *(void *)(Function + 2160);
      *(void *)&v313[24] = v265;
      *(void *)v314 = v266;
      *(void *)&v314[8] = v266;
      *(void *)&v314[16] = v265;
      v315 = v265;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v263, (uint64_t)&v312, 9, 0);
      int v8 = "__tgt_target_data_update_nowait_mapper";
      goto LABEL_168;
    case 143:
      v267 = *(uint64_t ***)(Function + 2128);
      v312 = *(uint64_t ***)(Function + 2176);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v267, (uint64_t)&v312, 1, 0);
      int v8 = "__tgt_mapper_num_components";
      goto LABEL_184;
    case 144:
      v268 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2176);
      *(void *)v313 = v312;
      uint64_t v269 = *(void *)(Function + 2128);
      *(void *)&v313[8] = v312;
      *(void *)&v313[16] = v269;
      *(void *)&v313[24] = v269;
      *(void *)v314 = v312;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v268, (uint64_t)&v312, 6, 0);
      int v8 = "__tgt_push_mapper_component";
      goto LABEL_184;
    case 145:
      v270 = *(uint64_t ***)(Function + 2176);
      uint64_t v271 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v271;
      *(void *)&v313[8] = v270;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v270, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_task_allow_completion_event";
      uint64_t v22 = a2;
      unint64_t v23 = 34;
      goto LABEL_174;
    case 146:
      v272 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      int8x16_t v273 = *(int8x16_t *)(Function + 2096);
      *(int8x16_t *)v313 = vextq_s8(v273, v273, 8uLL);
      *(void *)&v313[16] = v273.i64[0];
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v272, (uint64_t)&v312, 4, 0);
      int v8 = "__kmpc_target_init";
      goto LABEL_179;
    case 147:
      v274 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2240);
      *(int8x16_t *)v313 = vextq_s8(*(int8x16_t *)(Function + 2096), *(int8x16_t *)(Function + 2096), 8uLL);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v274, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_target_deinit";
      goto LABEL_173;
    case 148:
      v275 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2176);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v275, (uint64_t)&v312, 1, 0);
      int v8 = "__kmpc_kernel_prepare_parallel";
      goto LABEL_194;
    case 149:
      v276 = *(uint64_t ***)(Function + 2088);
      uint64_t v277 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v277;
      *(void *)&v313[8] = v277;
      *(void *)&v313[16] = v277;
      *(void *)&v313[24] = v277;
      long long v278 = *(_OWORD *)(Function + 2176);
      *(void *)v314 = *(void *)(Function + 2176);
      *(_OWORD *)&v314[8] = v278;
      v315 = *(uint64_t ***)(Function + 2168);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v276, (uint64_t)&v312, 9, 0);
      int v8 = "__kmpc_parallel_51";
      goto LABEL_179;
    case 150:
      v279 = *(uint64_t ***)(Function + 2096);
      v312 = *(uint64_t ***)(Function + 2184);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v279, (uint64_t)&v312, 1, 0);
      int v8 = "__kmpc_kernel_parallel";
LABEL_162:
      uint64_t v22 = a2;
      unint64_t v23 = 22;
      goto LABEL_174;
    case 151:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2088), 0, 0, 0);
      int v8 = "__kmpc_kernel_end_parallel";
      goto LABEL_190;
    case 152:
      v280 = *(uint64_t ***)(Function + 2088);
      uint64_t v281 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v281;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v280, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_serialized_parallel";
      goto LABEL_190;
    case 153:
      v282 = *(uint64_t ***)(Function + 2088);
      uint64_t v283 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v283;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v282, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_end_serialized_parallel";
      goto LABEL_194;
    case 154:
      uint64_t v284 = *(void *)(Function + 2112);
      v312 = *(uint64_t ***)(Function + 2120);
      *(void *)v313 = v284;
      *(void *)&v313[8] = v284;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v312, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_shuffle_int32";
      goto LABEL_173;
    case 155:
      v285 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v285;
      *(void *)&v313[8] = v285;
      *(_OWORD *)&v313[16] = *(_OWORD *)(Function + 2168);
      uint64_t v286 = *(void *)(Function + 2400);
      *(void *)v314 = *(void *)(Function + 2384);
      *(void *)&v314[8] = v286;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v285, (uint64_t)&v312, 7, 0);
      int v8 = "__kmpc_nvptx_parallel_reduce_nowait_v2";
LABEL_168:
      uint64_t v22 = a2;
      unint64_t v23 = 38;
      goto LABEL_174;
    case 156:
      v287 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2120);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v287, (uint64_t)&v312, 1, 0);
      int v8 = "__kmpc_nvptx_end_reduce_nowait";
      goto LABEL_194;
    case 157:
      v288 = *(uint64_t ***)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v288;
      *(void *)&v313[8] = *(void *)(Function + 2176);
      *(_OWORD *)&v313[16] = __PAIR128__(*(unint64_t *)&v313[8], (unint64_t)v288);
      *(void *)v314 = *(void *)(Function + 2384);
      v289 = *(uint64_t ***)(Function + 2416);
      *(void *)&v314[8] = *(void *)(Function + 2400);
      *(void *)&v314[16] = v289;
      v315 = v289;
      v316 = v289;
      v317 = v289;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v288, (uint64_t)&v312, 11, 0);
      int v8 = "__kmpc_nvptx_teams_reduce_nowait_v2";
LABEL_171:
      uint64_t v22 = a2;
      unint64_t v23 = 35;
      goto LABEL_174;
    case 158:
      uint64_t v290 = *(void *)(Function + 2112);
      v312 = *(uint64_t ***)(Function + 2128);
      *(void *)v313 = v290;
      *(void *)&v313[8] = v290;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v312, (uint64_t)&v312, 3, 0);
      int v8 = "__kmpc_shuffle_int64";
LABEL_173:
      uint64_t v22 = a2;
      unint64_t v23 = 20;
      goto LABEL_174;
    case 159:
      v294 = *(uint64_t ***)(Function + 2176);
      v312 = *(uint64_t ***)(Function + 2168);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v294, (uint64_t)&v312, 1, 0);
      int v8 = "__kmpc_alloc_shared";
LABEL_177:
      uint64_t v22 = a2;
      unint64_t v23 = 19;
      goto LABEL_174;
    case 160:
      v295 = *(uint64_t ***)(Function + 2088);
      uint64_t v296 = *(void *)(Function + 2168);
      v312 = *(uint64_t ***)(Function + 2176);
      *(void *)v313 = v296;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v295, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_free_shared";
LABEL_179:
      uint64_t v22 = a2;
      unint64_t v23 = 18;
      goto LABEL_174;
    case 161:
      v297 = *(uint64_t ***)(Function + 2088);
      uint64_t v298 = *(void *)(Function + 2168);
      v312 = *(uint64_t ***)(Function + 2192);
      *(void *)v313 = v298;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v297, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_begin_sharing_variables";
      goto LABEL_194;
    case 162:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2088), 0, 0, 0);
      int v8 = "__kmpc_end_sharing_variables";
LABEL_182:
      uint64_t v22 = a2;
      unint64_t v23 = 28;
      goto LABEL_174;
    case 163:
      v299 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2192);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v299, (uint64_t)&v312, 1, 0);
      int v8 = "__kmpc_get_shared_variables";
LABEL_184:
      uint64_t v22 = a2;
      unint64_t v23 = 27;
      goto LABEL_174;
    case 164:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2104), 0, 0, 0);
      int v8 = "__kmpc_parallel_level";
LABEL_186:
      uint64_t v22 = a2;
      unint64_t v23 = 21;
      goto LABEL_174;
    case 165:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2104), 0, 0, 0);
      int v8 = "__kmpc_is_spmd_exec_mode";
LABEL_188:
      uint64_t v22 = a2;
      unint64_t v23 = 24;
      goto LABEL_174;
    case 166:
      v300 = *(uint64_t ***)(Function + 2088);
      uint64_t v301 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v301;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v300, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_barrier_simple_spmd";
LABEL_190:
      uint64_t v22 = a2;
      unint64_t v23 = 26;
      goto LABEL_174;
    case 167:
      v302 = *(uint64_t ***)(Function + 2088);
      uint64_t v303 = *(void *)(Function + 2120);
      v312 = *(uint64_t ***)(Function + 2240);
      *(void *)v313 = v303;
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v302, (uint64_t)&v312, 2, 0);
      int v8 = "__kmpc_barrier_simple_generic";
LABEL_192:
      uint64_t v22 = a2;
      unint64_t v23 = 29;
      goto LABEL_174;
    case 168:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2128), 0, 0, 0);
      int v8 = "__kmpc_warp_active_thread_mask";
LABEL_194:
      uint64_t v22 = a2;
      unint64_t v23 = 30;
      goto LABEL_174;
    case 169:
      v304 = *(uint64_t ***)(Function + 2088);
      v312 = *(uint64_t ***)(Function + 2128);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v304, (uint64_t)&v312, 1, 0);
      int v8 = "__kmpc_syncwarp";
LABEL_196:
      uint64_t v22 = a2;
      unint64_t v23 = 15;
      goto LABEL_174;
    case 170:
      v305 = *(uint64_t ***)(Function + 2104);
      v312 = *(uint64_t ***)(Function + 2120);
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(v305, (uint64_t)&v312, 1, 0);
      int v8 = "__kmpc_is_generic_main_thread_id";
LABEL_198:
      uint64_t v22 = a2;
      unint64_t v23 = 32;
      goto LABEL_174;
    case 171:
      unint64_t v7 = (llvm::PointerType *)llvm::FunctionType::get(*(uint64_t ***)(Function + 2088), 0, 0, 0);
      int v8 = "__last";
      uint64_t v22 = a2;
      unint64_t v23 = 6;
LABEL_174:
      Functiouint64_t n = llvm::Module::getFunction(v22, (unsigned __int8 *)v8, v23);
      v291 = (unint64_t *)Function;
      if (Function) {
        goto LABEL_175;
      }
      goto LABEL_201;
    default:
      unint64_t v7 = 0;
LABEL_201:
      switch(a3)
      {
        case 0:
          v306 = "__kmpc_barrier";
          goto LABEL_377;
        case 1:
          v306 = "__kmpc_cancel";
          goto LABEL_377;
        case 2:
          v306 = "__kmpc_cancel_barrier";
          goto LABEL_377;
        case 3:
          v306 = "__kmpc_flush";
          goto LABEL_377;
        case 4:
          v306 = "__kmpc_global_thread_num";
          goto LABEL_377;
        case 5:
          v306 = "__kmpc_get_hardware_thread_id_in_block";
          goto LABEL_377;
        case 6:
          v307 = "__kmpc_fork_call";
          goto LABEL_316;
        case 7:
          v306 = "__kmpc_omp_taskwait";
          goto LABEL_377;
        case 8:
          v306 = "__kmpc_omp_taskyield";
          goto LABEL_377;
        case 9:
          v306 = "__kmpc_push_num_threads";
          goto LABEL_377;
        case 10:
          v306 = "__kmpc_push_proc_bind";
          goto LABEL_377;
        case 11:
          v306 = "__kmpc_omp_reg_task_with_affinity";
          goto LABEL_377;
        case 12:
          v306 = "__kmpc_get_hardware_num_blocks";
          goto LABEL_377;
        case 13:
          v306 = "__kmpc_get_hardware_num_threads_in_block";
          goto LABEL_377;
        case 14:
          v306 = "__kmpc_get_warp_size";
          goto LABEL_377;
        case 15:
          v306 = "omp_get_thread_num";
          goto LABEL_377;
        case 16:
          v306 = "omp_get_num_threads";
          goto LABEL_377;
        case 17:
          v306 = "omp_get_max_threads";
          goto LABEL_377;
        case 18:
          v306 = "omp_in_parallel";
          goto LABEL_377;
        case 19:
          v306 = "omp_get_dynamic";
          goto LABEL_377;
        case 20:
          v306 = "omp_get_cancellation";
          goto LABEL_377;
        case 21:
          v306 = "omp_get_nested";
          goto LABEL_377;
        case 22:
          v306 = "omp_get_schedule";
          goto LABEL_377;
        case 23:
          v306 = "omp_get_thread_limit";
          goto LABEL_377;
        case 24:
          v306 = "omp_get_supported_active_levels";
          goto LABEL_377;
        case 25:
          v306 = "omp_get_max_active_levels";
          goto LABEL_377;
        case 26:
          v306 = "omp_get_level";
          goto LABEL_377;
        case 27:
          v306 = "omp_get_ancestor_thread_num";
          goto LABEL_377;
        case 28:
          v306 = "omp_get_team_size";
          goto LABEL_377;
        case 29:
          v306 = "omp_get_active_level";
          goto LABEL_377;
        case 30:
          v306 = "omp_in_final";
          goto LABEL_377;
        case 31:
          v306 = "omp_get_proc_bind";
          goto LABEL_377;
        case 32:
          v306 = "omp_get_num_places";
          goto LABEL_377;
        case 33:
          v306 = "omp_get_num_procs";
          goto LABEL_377;
        case 34:
          v306 = "omp_get_place_proc_ids";
          goto LABEL_377;
        case 35:
          v306 = "omp_get_place_num";
          goto LABEL_377;
        case 36:
          v306 = "omp_get_partition_num_places";
          goto LABEL_377;
        case 37:
          v306 = "omp_get_partition_place_nums";
          goto LABEL_377;
        case 38:
          v306 = "omp_set_num_threads";
          goto LABEL_377;
        case 39:
          v306 = "omp_set_dynamic";
          goto LABEL_377;
        case 40:
          v306 = "omp_set_nested";
          goto LABEL_377;
        case 41:
          v306 = "omp_set_schedule";
          goto LABEL_377;
        case 42:
          v306 = "omp_set_max_active_levels";
          goto LABEL_377;
        case 43:
          v306 = "__kmpc_master";
          goto LABEL_377;
        case 44:
          v306 = "__kmpc_end_master";
          goto LABEL_377;
        case 45:
          v306 = "__kmpc_masked";
          goto LABEL_377;
        case 46:
          v306 = "__kmpc_end_masked";
          goto LABEL_377;
        case 47:
          v306 = "__kmpc_critical";
          goto LABEL_377;
        case 48:
          v306 = "__kmpc_critical_with_hint";
          goto LABEL_377;
        case 49:
          v306 = "__kmpc_end_critical";
          goto LABEL_377;
        case 50:
          v306 = "__kmpc_begin";
          goto LABEL_377;
        case 51:
          v306 = "__kmpc_end";
          goto LABEL_377;
        case 52:
          v306 = "__kmpc_reduce";
          goto LABEL_377;
        case 53:
          v306 = "__kmpc_reduce_nowait";
          goto LABEL_377;
        case 54:
          v306 = "__kmpc_end_reduce";
          goto LABEL_377;
        case 55:
          v306 = "__kmpc_end_reduce_nowait";
          goto LABEL_377;
        case 56:
          v306 = "__kmpc_ordered";
          goto LABEL_377;
        case 57:
          v306 = "__kmpc_end_ordered";
          goto LABEL_377;
        case 58:
          v306 = "__kmpc_for_static_init_4";
          goto LABEL_377;
        case 59:
          v306 = "__kmpc_for_static_init_4u";
          goto LABEL_377;
        case 60:
          v306 = "__kmpc_for_static_init_8";
          goto LABEL_377;
        case 61:
          v306 = "__kmpc_for_static_init_8u";
          goto LABEL_377;
        case 62:
          v306 = "__kmpc_for_static_fini";
          goto LABEL_377;
        case 63:
          v306 = "__kmpc_distribute_static_init_4";
          goto LABEL_377;
        case 64:
          v306 = "__kmpc_distribute_static_init_4u";
          goto LABEL_377;
        case 65:
          v306 = "__kmpc_distribute_static_init_8";
          goto LABEL_377;
        case 66:
          v306 = "__kmpc_distribute_static_init_8u";
          goto LABEL_377;
        case 67:
          v306 = "__kmpc_distribute_static_fini";
          goto LABEL_377;
        case 68:
          v306 = "__kmpc_dist_dispatch_init_4";
          goto LABEL_377;
        case 69:
          v306 = "__kmpc_dist_dispatch_init_4u";
          goto LABEL_377;
        case 70:
          v306 = "__kmpc_dist_dispatch_init_8";
          goto LABEL_377;
        case 71:
          v306 = "__kmpc_dist_dispatch_init_8u";
          goto LABEL_377;
        case 72:
          v306 = "__kmpc_dispatch_init_4";
          goto LABEL_377;
        case 73:
          v306 = "__kmpc_dispatch_init_4u";
          goto LABEL_377;
        case 74:
          v306 = "__kmpc_dispatch_init_8";
          goto LABEL_377;
        case 75:
          v306 = "__kmpc_dispatch_init_8u";
          goto LABEL_377;
        case 76:
          v306 = "__kmpc_dispatch_next_4";
          goto LABEL_377;
        case 77:
          v306 = "__kmpc_dispatch_next_4u";
          goto LABEL_377;
        case 78:
          v306 = "__kmpc_dispatch_next_8";
          goto LABEL_377;
        case 79:
          v306 = "__kmpc_dispatch_next_8u";
          goto LABEL_377;
        case 80:
          v306 = "__kmpc_dispatch_fini_4";
          goto LABEL_377;
        case 81:
          v306 = "__kmpc_dispatch_fini_4u";
          goto LABEL_377;
        case 82:
          v306 = "__kmpc_dispatch_fini_8";
          goto LABEL_377;
        case 83:
          v306 = "__kmpc_dispatch_fini_8u";
          goto LABEL_377;
        case 84:
          v306 = "__kmpc_team_static_init_4";
          goto LABEL_377;
        case 85:
          v306 = "__kmpc_team_static_init_4u";
          goto LABEL_377;
        case 86:
          v306 = "__kmpc_team_static_init_8";
          goto LABEL_377;
        case 87:
          v306 = "__kmpc_team_static_init_8u";
          goto LABEL_377;
        case 88:
          v306 = "__kmpc_dist_for_static_init_4";
          goto LABEL_377;
        case 89:
          v306 = "__kmpc_dist_for_static_init_4u";
          goto LABEL_377;
        case 90:
          v306 = "__kmpc_dist_for_static_init_8";
          goto LABEL_377;
        case 91:
          v306 = "__kmpc_dist_for_static_init_8u";
          goto LABEL_377;
        case 92:
          v306 = "__kmpc_single";
          goto LABEL_377;
        case 93:
          v306 = "__kmpc_end_single";
          goto LABEL_377;
        case 94:
          v306 = "__kmpc_omp_task_alloc";
          goto LABEL_377;
        case 95:
          v306 = "__kmpc_omp_task";
          goto LABEL_377;
        case 96:
          v306 = "__kmpc_end_taskgroup";
          goto LABEL_377;
        case 97:
          v306 = "__kmpc_taskgroup";
          goto LABEL_377;
        case 98:
          v306 = "__kmpc_omp_task_begin_if0";
          goto LABEL_377;
        case 99:
          v306 = "__kmpc_omp_task_complete_if0";
          goto LABEL_377;
        case 100:
          v306 = "__kmpc_omp_task_with_deps";
          goto LABEL_377;
        case 101:
          v306 = "__kmpc_taskloop";
          goto LABEL_377;
        case 102:
          v306 = "__kmpc_omp_target_task_alloc";
          goto LABEL_377;
        case 103:
          v306 = "__kmpc_taskred_modifier_init";
          goto LABEL_377;
        case 104:
          v306 = "__kmpc_taskred_init";
          goto LABEL_377;
        case 105:
          v306 = "__kmpc_task_reduction_modifier_fini";
          goto LABEL_377;
        case 106:
          v306 = "__kmpc_task_reduction_get_th_data";
          goto LABEL_377;
        case 107:
          v306 = "__kmpc_task_reduction_init";
          goto LABEL_377;
        case 108:
          v306 = "__kmpc_task_reduction_modifier_init";
          goto LABEL_377;
        case 109:
          v306 = "__kmpc_proxy_task_completed_ooo";
          goto LABEL_377;
        case 110:
          v306 = "__kmpc_omp_wait_deps";
          goto LABEL_377;
        case 111:
          v306 = "__kmpc_cancellationpoint";
          goto LABEL_377;
        case 112:
          v307 = "__kmpc_fork_teams";
LABEL_316:
          v312 = (uint64_t **)v307;
          *(_WORD *)&v313[24] = 259;
          v291 = llvm::Function::Create(v7, 0, (const char **)&v312, a2);
          Functiouint64_t n = llvm::Value::getMetadata((llvm::Value *)v291, 26);
          if (!Function)
          {
            v312 = *(uint64_t ***)*v291;
            v308 = (llvm::Type *)v312;
            uint64_t v310 = -1;
            CallbackEncoding = llvm::MDBuilder::createCallbackEncoding((llvm::Type **)&v312, (llvm::Type *)2, (int *)&v310, 2, 1u);
            Impl = llvm::MDTuple::getImpl((uint64_t)v308, &CallbackEncoding, 1, 0, 1);
            llvm::Value::addMetadata((llvm::Value *)v291, 26, Impl);
          }
          break;
        case 113:
          v306 = "__kmpc_push_num_teams";
          goto LABEL_377;
        case 114:
          v306 = "__kmpc_copyprivate";
          goto LABEL_377;
        case 115:
          v306 = "__kmpc_threadprivate_cached";
          goto LABEL_377;
        case 116:
          v306 = "__kmpc_threadprivate_register";
          goto LABEL_377;
        case 117:
          v306 = "__kmpc_doacross_init";
          goto LABEL_377;
        case 118:
          v306 = "__kmpc_doacross_post";
          goto LABEL_377;
        case 119:
          v306 = "__kmpc_doacross_wait";
          goto LABEL_377;
        case 120:
          v306 = "__kmpc_doacross_fini";
          goto LABEL_377;
        case 121:
          v306 = "__kmpc_alloc";
          goto LABEL_377;
        case 122:
          v306 = "__kmpc_aligned_alloc";
          goto LABEL_377;
        case 123:
          v306 = "__kmpc_free";
          goto LABEL_377;
        case 124:
          v306 = "__tgt_interop_init";
          goto LABEL_377;
        case 125:
          v306 = "__tgt_interop_destroy";
          goto LABEL_377;
        case 126:
          v306 = "__tgt_interop_use";
          goto LABEL_377;
        case 127:
          v306 = "__kmpc_init_allocator";
          goto LABEL_377;
        case 128:
          v306 = "__kmpc_destroy_allocator";
          goto LABEL_377;
        case 129:
          v306 = "__kmpc_push_target_tripcount_mapper";
          goto LABEL_377;
        case 130:
          v306 = "__tgt_target_mapper";
          goto LABEL_377;
        case 131:
          v306 = "__tgt_target_nowait_mapper";
          goto LABEL_377;
        case 132:
          v306 = "__tgt_target_teams_mapper";
          goto LABEL_377;
        case 133:
          v306 = "__tgt_target_teams_nowait_mapper";
          goto LABEL_377;
        case 134:
          v306 = "__tgt_register_requires";
          goto LABEL_377;
        case 135:
          v306 = "__tgt_target_data_begin_mapper";
          goto LABEL_377;
        case 136:
          v306 = "__tgt_target_data_begin_nowait_mapper";
          goto LABEL_377;
        case 137:
          v306 = "__tgt_target_data_begin_mapper_issue";
          goto LABEL_377;
        case 138:
          v306 = "__tgt_target_data_begin_mapper_wait";
          goto LABEL_377;
        case 139:
          v306 = "__tgt_target_data_end_mapper";
          goto LABEL_377;
        case 140:
          v306 = "__tgt_target_data_end_nowait_mapper";
          goto LABEL_377;
        case 141:
          v306 = "__tgt_target_data_update_mapper";
          goto LABEL_377;
        case 142:
          v306 = "__tgt_target_data_update_nowait_mapper";
          goto LABEL_377;
        case 143:
          v306 = "__tgt_mapper_num_components";
          goto LABEL_377;
        case 144:
          v306 = "__tgt_push_mapper_component";
          goto LABEL_377;
        case 145:
          v306 = "__kmpc_task_allow_completion_event";
          goto LABEL_377;
        case 146:
          v306 = "__kmpc_target_init";
          goto LABEL_377;
        case 147:
          v306 = "__kmpc_target_deinit";
          goto LABEL_377;
        case 148:
          v306 = "__kmpc_kernel_prepare_parallel";
          goto LABEL_377;
        case 149:
          v306 = "__kmpc_parallel_51";
          goto LABEL_377;
        case 150:
          v306 = "__kmpc_kernel_parallel";
          goto LABEL_377;
        case 151:
          v306 = "__kmpc_kernel_end_parallel";
          goto LABEL_377;
        case 152:
          v306 = "__kmpc_serialized_parallel";
          goto LABEL_377;
        case 153:
          v306 = "__kmpc_end_serialized_parallel";
          goto LABEL_377;
        case 154:
          v306 = "__kmpc_shuffle_int32";
          goto LABEL_377;
        case 155:
          v306 = "__kmpc_nvptx_parallel_reduce_nowait_v2";
          goto LABEL_377;
        case 156:
          v306 = "__kmpc_nvptx_end_reduce_nowait";
          goto LABEL_377;
        case 157:
          v306 = "__kmpc_nvptx_teams_reduce_nowait_v2";
          goto LABEL_377;
        case 158:
          v306 = "__kmpc_shuffle_int64";
          goto LABEL_377;
        case 159:
          v306 = "__kmpc_alloc_shared";
          goto LABEL_377;
        case 160:
          v306 = "__kmpc_free_shared";
          goto LABEL_377;
        case 161:
          v306 = "__kmpc_begin_sharing_variables";
          goto LABEL_377;
        case 162:
          v306 = "__kmpc_end_sharing_variables";
          goto LABEL_377;
        case 163:
          v306 = "__kmpc_get_shared_variables";
          goto LABEL_377;
        case 164:
          v306 = "__kmpc_parallel_level";
          goto LABEL_377;
        case 165:
          v306 = "__kmpc_is_spmd_exec_mode";
          goto LABEL_377;
        case 166:
          v306 = "__kmpc_barrier_simple_spmd";
          goto LABEL_377;
        case 167:
          v306 = "__kmpc_barrier_simple_generic";
          goto LABEL_377;
        case 168:
          v306 = "__kmpc_warp_active_thread_mask";
          goto LABEL_377;
        case 169:
          v306 = "__kmpc_syncwarp";
          goto LABEL_377;
        case 170:
          v306 = "__kmpc_is_generic_main_thread_id";
          goto LABEL_377;
        case 171:
          v306 = "__last";
LABEL_377:
          v312 = (uint64_t **)v306;
          *(_WORD *)&v313[24] = 259;
          Functiouint64_t n = (uint64_t)llvm::Function::Create(v7, 0, (const char **)&v312, a2);
          v291 = (unint64_t *)Function;
          break;
        default:
          v291 = 0;
          break;
      }
      llvm::OpenMPIRBuilder::addAttributes(Function, a3, (uint64_t)v291);
LABEL_175:
      v292 = (llvm::Constant *)llvm::PointerType::get(v7, 0);
      llvm::ConstantExpr::getBitCast((llvm::detail::IEEEFloat *)v291, v292, 0);
      return v7;
  }
}

unint64_t llvm::OpenMPIRBuilder::initialize(llvm::Type ***this)
{
  return llvm::OpenMPIRBuilder::initializeTypes((llvm::OpenMPIRBuilder *)this, this[42]);
}

unint64_t llvm::OpenMPIRBuilder::initializeTypes(llvm::OpenMPIRBuilder *this, llvm::Type **a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  uint64_t v5 = *(void *)*a2;
  *((void *)this + 261) = v5 + 1576;
  *((void *)this + 262) = v5 + 1888;
  *((void *)this + 263) = llvm::Type::getInt8Ty(v4, (llvm::LLVMContext *)a2);
  *((void *)this + 264) = llvm::Type::getInt16Ty(v4, v6);
  uint64_t v7 = *(void *)v4;
  *((void *)this + 265) = *(void *)v4 + 1960;
  *((void *)this + 266) = v7 + 1984;
  *((void *)this + 267) = llvm::PointerType::get((llvm::PointerType *)(v7 + 1912), 0);
  *((void *)this + 268) = llvm::Type::getInt16PtrTy(v4, 0);
  *((void *)this + 269) = llvm::Type::getInt32PtrTy(v4, 0);
  *((void *)this + 270) = llvm::Type::getInt64PtrTy(v4, 0);
  *((void *)this + 271) = llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(a2 + 34), v4, 0);
  int v8 = (llvm::PointerType *)llvm::PointerType::get(*((llvm::PointerType **)this + 263), 0);
  *((void *)this + 272) = v8;
  int v9 = (llvm::PointerType *)llvm::PointerType::get(v8, 0);
  *((void *)this + 273) = v9;
  *((void *)this + 274) = llvm::PointerType::get(v9, 0);
  int v10 = (llvm::PointerType *)llvm::PointerType::get(*((llvm::PointerType **)this + 267), 0);
  *((void *)this + 275) = v10;
  *((void *)this + 276) = llvm::PointerType::get(v10, 0);
  uint64_t v11 = llvm::ArrayType::get(*((llvm::ArrayType **)this + 265), (llvm::Type *)8);
  *((void *)this + 277) = v11;
  *((void *)this + 278) = llvm::PointerType::get(v11, 0);
  TypeByName = (llvm::PointerType *)llvm::StructType::getTypeByName((uint64_t *)v4, "struct.ident_t", 0xEuLL);
  if (!TypeByName)
  {
    uint64_t v36 = (uint64_t **)*((void *)this + 265);
    uint64_t v37 = v36;
    uint64_t v38 = v36;
    uint64_t v39 = v36;
    uint64_t v40 = *((void *)this + 267);
    TypeByName = (llvm::PointerType *)llvm::StructType::create((uint64_t *)v4, (uint64_t)&v36, 5, "struct.ident_t", 0xEuLL, 0);
  }
  *((void *)this + 279) = TypeByName;
  *((void *)this + 280) = llvm::PointerType::get(TypeByName, 0);
  uint64_t v13 = (llvm::PointerType *)llvm::StructType::getTypeByName((uint64_t *)v4, "struct.__tgt_async_info", 0x17uLL);
  if (!v13)
  {
    uint64_t v36 = (uint64_t **)*((void *)this + 267);
    uint64_t v13 = (llvm::PointerType *)llvm::StructType::create((uint64_t *)v4, (uint64_t)&v36, 1, "struct.__tgt_async_info", 0x17uLL, 0);
  }
  *((void *)this + 281) = v13;
  *((void *)this + 282) = llvm::PointerType::get(v13, 0);
  uint64_t v14 = (uint64_t **)*((void *)this + 261);
  uint64_t v36 = (uint64_t **)*((void *)this + 269);
  uint64_t v37 = v36;
  uint64_t v15 = (llvm::PointerType *)llvm::FunctionType::get(v14, (uint64_t)&v36, 2, 1);
  *((void *)this + 283) = v15;
  *((void *)this + 284) = llvm::PointerType::get(v15, 0);
  int v16 = (uint64_t **)*((void *)this + 261);
  uint64_t v36 = (uint64_t **)*((void *)this + 272);
  uint64_t v37 = v36;
  uint64_t v17 = (llvm::PointerType *)llvm::FunctionType::get(v16, (uint64_t)&v36, 2, 0);
  *((void *)this + 285) = v17;
  *((void *)this + 286) = llvm::PointerType::get(v17, 0);
  uint64_t v18 = (uint64_t **)*((void *)this + 261);
  uint64_t v36 = (uint64_t **)*((void *)this + 272);
  uint64_t v37 = v36;
  uint64_t v19 = (llvm::PointerType *)llvm::FunctionType::get(v18, (uint64_t)&v36, 2, 0);
  *((void *)this + 287) = v19;
  *((void *)this + 288) = llvm::PointerType::get(v19, 0);
  uint64_t v36 = (uint64_t **)*((void *)this + 272);
  uint64_t v20 = (llvm::PointerType *)llvm::FunctionType::get(v36, (uint64_t)&v36, 1, 0);
  *((void *)this + 289) = v20;
  *((void *)this + 290) = llvm::PointerType::get(v20, 0);
  uint64_t v21 = (uint64_t **)*((void *)this + 261);
  uint64_t v36 = (uint64_t **)*((void *)this + 272);
  uint64_t v22 = (llvm::PointerType *)llvm::FunctionType::get(v21, (uint64_t)&v36, 1, 0);
  *((void *)this + 291) = v22;
  *((void *)this + 292) = llvm::PointerType::get(v22, 0);
  uint64_t v36 = (uint64_t **)*((void *)this + 272);
  uint64_t v37 = v36;
  unint64_t v23 = (llvm::PointerType *)llvm::FunctionType::get(v36, (uint64_t)&v36, 2, 0);
  *((void *)this + 293) = v23;
  *((void *)this + 294) = llvm::PointerType::get(v23, 0);
  uint64_t v24 = (uint64_t **)*((void *)this + 272);
  uint64_t v36 = (uint64_t **)*((void *)this + 265);
  uint64_t v37 = v24;
  uint64_t v25 = (llvm::PointerType *)llvm::FunctionType::get(v36, (uint64_t)&v36, 2, 0);
  *((void *)this + 295) = v25;
  *((void *)this + 296) = llvm::PointerType::get(v25, 0);
  uint64_t v26 = (uint64_t **)*((void *)this + 261);
  uint64_t v27 = (uint64_t **)*((void *)this + 264);
  uint64_t v36 = (uint64_t **)*((void *)this + 272);
  uint64_t v37 = v27;
  uint64_t v38 = v27;
  uint64_t v39 = v27;
  uint64_t v28 = (llvm::PointerType *)llvm::FunctionType::get(v26, (uint64_t)&v36, 4, 0);
  *((void *)this + 297) = v28;
  *((void *)this + 298) = llvm::PointerType::get(v28, 0);
  uint64_t v29 = (uint64_t **)*((void *)this + 261);
  uint64_t v30 = (uint64_t **)*((void *)this + 265);
  uint64_t v36 = (uint64_t **)*((void *)this + 272);
  uint64_t v37 = v30;
  uint64_t v31 = (llvm::PointerType *)llvm::FunctionType::get(v29, (uint64_t)&v36, 2, 0);
  *((void *)this + 299) = v31;
  *((void *)this + 300) = llvm::PointerType::get(v31, 0);
  uint64_t v32 = (uint64_t **)*((void *)this + 261);
  uint64_t v33 = (uint64_t **)*((void *)this + 265);
  uint64_t v36 = (uint64_t **)*((void *)this + 272);
  uint64_t v37 = v33;
  uint64_t v38 = v36;
  uint64_t v34 = (llvm::PointerType *)llvm::FunctionType::get(v32, (uint64_t)&v36, 3, 0);
  *((void *)this + 301) = v34;
  unint64_t result = llvm::PointerType::get(v34, 0);
  *((void *)this + 302) = result;
  return result;
}

void llvm::OpenMPIRBuilder::finalize(llvm::OpenMPIRBuilder *this, llvm::Function *a2)
{
  v31[32] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v23;
  uint64_t v20 = v23;
  uint64_t v21 = 32;
  int v22 = 0;
  uint64_t v29 = v31;
  uint64_t v30 = 0x2000000000;
  uint64_t v26 = v28;
  uint64_t v27 = 0x1000000000;
  int v16 = (char *)this + 536;
  unsigned int v2 = *((_DWORD *)this + 136);
  if (v2)
  {
    unint64_t v7 = *((void *)this + 67);
    unint64_t v8 = v7 + 88 * v2;
    do
    {
      if (!a2 || *(llvm::Function **)(*(void *)(v7 + 32) + 56) == a2)
      {
        sub_1CBFF3560((llvm::SmallPtrSetImplBase *)&v19);
        LODWORD(v30) = 0;
        llvm::OpenMPIRBuilder::OutlineInfo::collectBlocks(v7, (llvm::SmallPtrSetImplBase *)&v19, (uint64_t)&v29);
        llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)v25, *(llvm::Function **)(*(void *)(v7 + 32) + 56));
        uint64_t v9 = *(void *)(v7 + 48);
        char v18 = 8;
        strcpy((char *)&v17, ".omp_par");
        llvm::CodeExtractor::CodeExtractor((uint64_t)v24, (char **)v29, v30, 0, 1, 0, 0, 0, 1u, 1, v9, &v17);
        uint64_t v10 = *(unsigned int *)(v7 + 64);
        if (v10)
        {
          uint64_t v11 = *(llvm::Value ***)(v7 + 56);
          uint64_t v12 = 8 * v10;
          do
          {
            uint64_t v13 = *v11++;
            llvm::CodeExtractor::excludeArgFromAggregate((llvm::CodeExtractor *)v24, v13);
            v12 -= 8;
          }
          while (v12);
        }
        CodeRegiouint64_t n = (llvm::Function *)llvm::CodeExtractor::extractCodeRegion((llvm::CodeExtractor *)v24, (const llvm::CodeExtractorAnalysisCache *)v25);
        llvm::Function::removeFromParent(CodeRegion);
        sub_1CD60C288();
      }
      unint64_t v15 = sub_1CD612278((uint64_t)&v26, v7);
      sub_1CC6D8C84((uint64_t)v26 + 88 * v27, v15);
      LODWORD(v27) = v27 + 1;
      v7 += 88;
    }
    while (v7 != v8);
  }
  sub_1CD612354((uint64_t)v16, (uint64_t)&v26);
  uint64_t v3 = v26;
  if (v27)
  {
    uint64_t v4 = 88 * v27;
    uint64_t v5 = (char *)v26 - 88;
    do
    {
      sub_1CD6113D8(&v5[v4]);
      v4 -= 88;
    }
    while (v4);
    uint64_t v3 = v26;
  }
  if (v3 != v28) {
    free(v3);
  }
  if (v29 != v31) {
    free(v29);
  }
  if (v20 != v19) {
    free(v20);
  }
}

void llvm::OpenMPIRBuilder::OutlineInfo::collectBlocks(uint64_t a1, llvm::SmallPtrSetImplBase *this, uint64_t a3)
{
  v17[32] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0x2000000000;
  sub_1CB89694C(this, *(void *)(a1 + 32));
  sub_1CB89694C(this, *(void *)(a1 + 40));
  v17[0] = *(void *)(a1 + 32);
  unsigned int v6 = 1;
  LODWORD(v16) = 1;
  do
  {
    uint64_t v7 = v17[v6 - 1];
    LODWORD(v16) = v6 - 1;
    unint64_t v8 = *(unsigned int *)(a3 + 8);
    if (v8 >= *(unsigned int *)(a3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a3 + 8 * v8) = v7;
    ++*(_DWORD *)(a3 + 8);
    uint64_t v9 = *(void *)(v7 + 40);
    if (v9 != v7 + 40)
    {
      uint64_t v10 = v9 ? (unsigned __int8 *)(v9 - 24) : 0;
      if (v10[16] - 29 <= 0xA)
      {
        int NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v10);
        if (NumSuccessors)
        {
          int v12 = NumSuccessors;
          for (unsigned int i = 0; i != v12; ++i)
          {
            uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v10, i);
            sub_1CB89694C(this, Successor);
            if (v15)
            {
              if (v16 >= (unint64_t)HIDWORD(v16)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v17[v16] = Successor;
              LODWORD(v16) = v16 + 1;
            }
          }
        }
      }
    }
    unsigned int v6 = v16;
  }
  while (v16);
}

void sub_1CD60C288()
{
}

void llvm::OpenMPIRBuilder::~OpenMPIRBuilder(llvm::OpenMPIRBuilder *this)
{
  free(*((void **)this + 246));
  sub_1CBFFBA64((uint64_t)this + 1992);
  unsigned int v2 = (void *)*((void *)this + 245);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
  *((void *)this + 245) = 0;
  sub_1CD612094((char **)this + 67);
  MEMORY[0x1D25D9CD0](*((void *)this + 64), 8);
  sub_1CD61201C((uint64_t)this + 480);
  uint64_t v4 = (char *)*((void *)this + 43);
  if (v4 != (char *)this + 360) {
    free(v4);
  }

  sub_1CD611F58((char **)this);
}

char *llvm::OpenMPIRBuilder::createGlobalFlag(uint64_t a1, unsigned int a2, const char *a3, const char *a4)
{
  unint64_t v8 = ***(llvm::ConstantInt ****)(a1 + 336);
  uint64_t v9 = (char *)operator new(0x78uLL);
  *((_DWORD *)v9 + 13) = *((_DWORD *)v9 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = v9 + 32;
  unint64_t v8 = (llvm::ConstantInt *)((char *)v8 + 1960);
  uint64_t v10 = *(void *)(a1 + 336);
  uint64_t v11 = llvm::ConstantInt::get(v8, a2, 0);
  __int16 v16 = 261;
  v15[0] = a3;
  v15[1] = a4;
  llvm::GlobalVariable::GlobalVariable((unint64_t *)v9 + 4, v10, v8, 1, 5, (unint64_t)v11, v15, 0, 0, 0, 0);
  int v12 = *((_DWORD *)v9 + 16);
  unsigned int v13 = v12 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v9 + 16) = v13;
  if ((v12 & 0xFu) - 7 >= 2)
  {
    if (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)(v9 + 32))) {
      return v9 + 32;
    }
    unsigned int v13 = *((_DWORD *)v9 + 16);
  }
  *((_DWORD *)v9 + 16) = v13 | 0x4000;
  return v9 + 32;
}

llvm::ConstantExpr *llvm::OpenMPIRBuilder::getOrCreateIdent(uint64_t a1, llvm::Value *a2, unsigned int a3, int a4, unsigned int a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = a4 | 2u;
  unint64_t v9 = a5;
  NullValue = a2;
  unint64_t v28 = a5 | (unint64_t)((uint64_t)(int)v8 << 31);
  uint64_t v10 = sub_1CD612584(a1 + 512, (uint64_t *)&NullValue);
  unsigned int v13 = (llvm::ConstantExpr *)v10[2];
  if (!v13)
  {
    char v15 = v10;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2120), v11, v12);
    unint64_t v28 = (unint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), v8, 0);
    uint64_t v29 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), v9, 0);
    uint64_t v30 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), a3, 0);
    uint64_t v31 = a2;
    __int16 v16 = llvm::ConstantStruct::get(*(llvm::PoisonValue **)(a1 + 2232), (llvm::Type *)&NullValue, 5);
    uint64_t v17 = *(void *)(a1 + 336);
    uint64_t v18 = v17 + 8;
    for (uint64_t i = *(void *)(v17 + 16); i != v18; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        uint64_t v20 = (llvm::GlobalValue *)(i - 56);
      }
      else {
        uint64_t v20 = 0;
      }
      if (*((void *)v20 + 3) == *(void *)(a1 + 2232)
        && !llvm::GlobalValue::isDeclaration(v20)
        && *((void **)v20 - 4) == v16)
      {
        v15[2] = v20;
      }
    }
    unsigned int v13 = (llvm::ConstantExpr *)v15[2];
    if (!v13)
    {
      uint64_t v21 = operator new(0x78uLL);
      unsigned int v13 = (llvm::ConstantExpr *)(v21 + 8);
      v21[13] = v21[13] & 0x38000000 | 1;
      *(void *)uint64_t v21 = 0;
      *((void *)v21 + 1) = 0;
      *((void *)v21 + 2) = 0;
      *((void *)v21 + 3) = v21 + 8;
      uint64_t v22 = *(void *)(a1 + 336);
      unint64_t v23 = *(llvm::PointerType **)(a1 + 2232);
      __int16 v26 = 257;
      uint64_t v24 = llvm::GlobalVariable::GlobalVariable((unint64_t *)v21 + 4, v22, v23, 1, 8, (unint64_t)v16, &v25, 0, 0, (llvm::Type *)(*(unsigned int *)(v22 + 288) | 0x100000000), 0);
      v21[16] = v21[16] & 0xFFFFFF3F | 0x80;
      llvm::GlobalObject::setAlignment((uint64_t)v24, 259);
      v15[2] = v21 + 8;
    }
  }
  return llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(v13, *(llvm::Constant **)(a1 + 2240), v12);
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(uint64_t a1, unsigned __int8 *a2, llvm::Type *a3, _DWORD *a4)
{
  *a4 = a3;
  uint64_t v7 = sub_1CD3F4C18(a1 + 480, a2, (size_t)a3);
  unint64_t v8 = *v7;
  uint64_t result = (*v7)[1];
  if (!result)
  {
    String = llvm::ConstantDataArray::getString(**(void **)(a1 + 336), (char *)a2, a3, 1);
    uint64_t v11 = *(void *)(a1 + 336);
    uint64_t v12 = v11 + 8;
    uint64_t v13 = *(void *)(v11 + 16);
    if (v13 == v11 + 8)
    {
LABEL_12:
      __int16 v18 = 257;
      uint64_t result = sub_1CD57DDA8(a1 + 344, (char *)a2, a3, &v17, 0, v11);
    }
    else
    {
      uint64_t v14 = String;
      while (1)
      {
        char v15 = v13 ? (llvm::GlobalValue *)(v13 - 56) : 0;
        if ((*((unsigned char *)v15 + 80) & 1) != 0
          && !llvm::GlobalValue::isDeclaration(v15)
          && *((llvm::Value **)v15 - 4) == v14)
        {
          break;
        }
        uint64_t v13 = *(void *)(v13 + 8);
        if (v13 == v12)
        {
          uint64_t v11 = *(void *)(a1 + 336);
          goto LABEL_12;
        }
      }
      uint64_t result = (uint64_t)llvm::ConstantExpr::getPointerCast(v15, *(llvm::Constant **)(a1 + 2136), v16);
    }
    v8[1] = result;
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, unsigned int a6, unsigned int a7, _DWORD *a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v23 = v25;
  v25[0] = 59;
  long long v24 = xmmword_1CFAC7A00;
  sub_1CC22C75C(&v23, a4, &a4[a5]);
  if ((unint64_t)(v24 + 1) > *((void *)&v24 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v23 + v24) = 59;
  *(void *)&long long v24 = v24 + 1;
  sub_1CC22C75C(&v23, a2, &a2[a3]);
  if ((unint64_t)(v24 + 1) > *((void *)&v24 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v23 + v24) = 59;
  *(void *)&long long v24 = v24 + 1;
  std::to_string(&v22, a6);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v22;
  }
  else {
    uint64_t v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  std::string::size_type size = *((unsigned char *)&v22.__r_.__value_.__s + 23) & 0x7F;
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  sub_1CC22C75C(&v23, v14, (unsigned char *)v14 + size);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((unint64_t)(v24 + 1) > *((void *)&v24 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v23 + v24) = 59;
  *(void *)&long long v24 = v24 + 1;
  std::to_string(&v22, a7);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v16 = &v22;
  }
  else {
    __int16 v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v17 = *((unsigned char *)&v22.__r_.__value_.__s + 23) & 0x7F;
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v17 = v22.__r_.__value_.__l.__size_;
  }
  sub_1CC22C75C(&v23, v16, (unsigned char *)v16 + v17);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((unint64_t)(v24 + 1) > *((void *)&v24 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v23 + v24) = 59;
  uint64_t v18 = v24;
  uint64_t v19 = v24 + 1;
  *(void *)&long long v24 = v24 + 1;
  if ((unint64_t)(v18 + 2) > *((void *)&v24 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *((unsigned char *)v23 + v19) = 59;
  *(void *)&long long v24 = v24 + 1;
  uint64_t SrcLocStr = llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, (unsigned __int8 *)v23, (llvm::Type *)v24, a8);
  if (v23 != v25) {
    free(v23);
  }
  return SrcLocStr;
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateDefaultSrcLocStr(llvm::OpenMPIRBuilder *this, unsigned int *a2)
{
  return llvm::OpenMPIRBuilder::getOrCreateSrcLocStr((uint64_t)this, ";unknown;unknown;0;0;;", (llvm::Type *)0x16, a2);
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(uint64_t a1, llvm::DebugLoc *a2, _DWORD *a3, llvm::Value *a4)
{
  uint64_t v7 = llvm::DebugLoc::get(a2);
  if (v7)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(a1 + 336);
    uint64_t v13 = *(unsigned char **)(v10 + 168);
    uint64_t v11 = v10 + 168;
    uint64_t v12 = v13;
    char v14 = *(unsigned char *)(v11 + 23);
    if (v14 >= 0) {
      String = (unsigned char *)v11;
    }
    else {
      String = v12;
    }
    uint64_t v16 = *(void *)(v11 + 8);
    if (v14 >= 0) {
      uint64_t v17 = v14 & 0x7F;
    }
    else {
      uint64_t v17 = v16;
    }
    uint64_t v18 = *(void *)(v7 - 8 * *(unsigned int *)(v7 + 8));
    uint64_t v19 = v18;
    if (*(unsigned char *)v18 == 15 || (uint64_t v19 = *(void *)(v18 - 8 * *(unsigned int *)(v18 + 8))) != 0)
    {
      if (*(unsigned char *)(v19 + 56))
      {
        String = (unsigned char *)llvm::MDString::getString(*(llvm::MDString **)(v19 + 48));
        uint64_t v17 = v20;
        uint64_t v18 = *(void *)(v9 - 8 * *(unsigned int *)(v9 + 8));
      }
    }
    Subprograuint64_t m = llvm::DILocalScope::getSubprogram(v18);
    std::string v22 = *(llvm::MDString **)(Subprogram - 8 * *(unsigned int *)(Subprogram + 8) + 16);
    if (v22)
    {
      Name = (char *)llvm::MDString::getString(v22);
      uint64_t v23 = v28;
    }
    else
    {
      uint64_t v23 = 0;
      Name = 0;
    }
    if (a4 && !v23)
    {
      Name = llvm::Value::getName(a4);
      uint64_t v23 = v25;
    }
    unsigned int v26 = *(_DWORD *)(v9 + 4);
    unsigned int v27 = *(unsigned __int16 *)(v9 + 2);
    return llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, Name, v23, String, v17, v26, v27, a3);
  }
  else
  {
    return llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, ";unknown;unknown;0;0;;", (llvm::Type *)0x16, a3);
  }
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(uint64_t a1, void *a2, _DWORD *a3)
{
  unsigned int v6 = (unsigned __int8 *)a2[2];
  uint64_t v9 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v9, v6, 2);
  }
  uint64_t SrcLocStr = llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, (llvm::DebugLoc *)&v9, a3, *(llvm::Value **)(*a2 + 56));
  if (v9) {
    llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
  }
  return SrcLocStr;
}

uint64_t llvm::OpenMPIRBuilder::getOrCreateThreadID(llvm::OpenMPIRBuilder *this, llvm::Value *a2)
{
  uint64_t v9 = a2;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)this, *((void *)this + 42), 4);
  if (*(unsigned char *)(v3 + 16)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  if (v4) {
    uint64_t v5 = *(uint64_t ***)(v4 + 24);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v7 = "omp_global_thread_num";
  __int16 v8 = 259;
  return sub_1CB845BAC((uint64_t *)this + 43, v5, (uint64_t **)v4, (uint64_t *)&v9, 1, (uint64_t)&v7, 0);
}

uint64_t llvm::OpenMPIRBuilder::createBarrier(uint64_t a1, uint64_t *a2, int a3, char a4, int a5)
{
  if (sub_1CD60CD08(a1, a2)) {
    return llvm::OpenMPIRBuilder::emitBarrierImpl(a1, a2, a3, a4, a5);
  }
  else {
    return *a2;
  }
}

BOOL sub_1CD60CD08(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 344;
  uint64_t v4 = *a2;
  if (v4)
  {
    sub_1CBF5385C(a1 + 344, v4, a2[1]);
  }
  else
  {
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
  }
  uint64_t v5 = (unsigned __int8 *)a2[2];
  __int16 v8 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v8, v5, 2);
    unsigned int v6 = v8;
  }
  else
  {
    unsigned int v6 = 0;
  }
  sub_1CB8461A4(v3, 0, (uint64_t)v6);
  if (v8) {
    llvm::MetadataTracking::untrack((uint64_t)&v8, v8);
  }
  return *a2 != 0;
}

uint64_t llvm::OpenMPIRBuilder::emitBarrierImpl(uint64_t a1, void *a2, int a3, char a4, int a5)
{
  v25[2] = *MEMORY[0x1E4F143B8];
  if (a3 == 53) {
    int v8 = 192;
  }
  else {
    int v8 = 64;
  }
  if (a3 == 55) {
    int v8 = 320;
  }
  if (a3 == 3) {
    int v9 = 32;
  }
  else {
    int v9 = v8;
  }
  unsigned int v23 = 0;
  uint64_t v10 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v23);
  unsigned int v11 = v23;
  v25[0] = (uint64_t)llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v10, v23, v9, 0);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v10, v11, 0, 0);
  v25[1] = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  if ((a4 & 1) == 0 && (unsigned int v13 = *(_DWORD *)(a1 + 8)) != 0 && (v14 = *(void *)a1 + 40 * v13, *(unsigned char *)(v14 - 4)))
  {
    BOOL v15 = *(_DWORD *)(v14 - 8) == 40;
    int v16 = 2 * v15;
  }
  else
  {
    BOOL v15 = 0;
    int v16 = 0;
  }
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), v16);
  if (*(unsigned char *)(v17 + 16)) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v17;
  }
  if (v18) {
    uint64_t v19 = *(uint64_t ***)(v18 + 24);
  }
  else {
    uint64_t v19 = 0;
  }
  __int16 v22 = 257;
  sub_1CB845BAC((uint64_t *)(a1 + 344), v19, (uint64_t **)v18, v25, 2, (uint64_t)v21, 0);
  if ((v15 & a5) == 1)
  {
    uint64_t v24 = 0;
    llvm::OpenMPIRBuilder::emitCancelationCheckImpl(a1);
  }
  return *(void *)(a1 + 392);
}

void llvm::OpenMPIRBuilder::emitCancelationCheckImpl(uint64_t a1)
{
  unsigned int v2 = *(llvm **)(a1 + 392);
  uint64_t v1 = *(llvm **)(a1 + 400);
  if (v1 != (llvm *)((char *)v2 + 40))
  {
    if (v1) {
      uint64_t v3 = (llvm *)((char *)v1 - 24);
    }
    else {
      uint64_t v3 = 0;
    }
    __int16 v7 = 257;
    sub_1CD126150(v2, v3, 0, 0, 0, 0, (llvm::Twine *)v6, 0);
  }
  Name = llvm::Value::getName(*(llvm::Value **)(a1 + 392));
  __int16 v7 = 773;
  v6[0] = Name;
  v6[1] = v5;
  v6[2] = ".cont";
  operator new();
}

uint64_t llvm::OpenMPIRBuilder::createCancel(uint64_t a1, uint64_t *a2, llvm *a3, int a4)
{
  void v34[3] = *(llvm::Value **)MEMORY[0x1E4F143B8];
  if (sub_1CD60CD08(a1, a2))
  {
    uint64_t v10 = LLVMBuildUnreachable_0(a1 + 344);
    uint64_t v32 = 0;
    v33[0] = v10;
    if (a3) {
      llvm::SplitBlockAndInsertIfThenElse(a3, v10, (llvm::Instruction *)v33, &v32, 0, v9);
    }
    sub_1CC096F34(a1 + 344, (uint64_t)v10);
    uint64_t v11 = 1;
    uint64_t v12 = 3;
    if (a4 != 53) {
      uint64_t v12 = 4;
    }
    if (a4 == 33) {
      uint64_t v11 = 2;
    }
    if (a4 <= 52) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)(a1 + 408) + 1960), v13, 0);
    unsigned int v31 = 0;
    BOOL v15 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v31);
    v34[0] = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v15, v31, 0, 0);
    v34[1] = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, v34[0]);
    v34[2] = v14;
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 1);
    uint64_t v17 = v16;
    uint64_t v18 = 0;
    if (*(unsigned char *)(v17 + 16)) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v17;
    }
    if (v19) {
      uint64_t v18 = *(uint64_t ***)(v19 + 24);
    }
    LOWORD(v30) = 257;
    sub_1CB845BAC((uint64_t *)(a1 + 344), v18, (uint64_t **)v19, (uint64_t *)v34, 3, (uint64_t)&v27, 0);
    uint64_t v27 = a1;
    int v28 = a4;
    long long v29 = *(_OWORD *)a2;
    uint64_t v20 = (unsigned __int8 *)a2[2];
    uint64_t v30 = v20;
    if (v20)
    {
      llvm::MetadataTracking::track((uint64_t)&v30, v20, 2);
      uint64_t v23 = v27;
      int v24 = v28;
      long long v25 = v29;
      unsigned int v26 = v30;
      if (v30) {
        llvm::MetadataTracking::track((uint64_t)&v26, v30, 2);
      }
    }
    else
    {
      uint64_t v23 = v27;
      int v24 = v28;
      long long v25 = *(_OWORD *)a2;
      unsigned int v26 = 0;
    }
    uint64_t v21 = (char *)operator new(0x30uLL);
    *(void *)uint64_t v21 = &unk_1F261B9D0;
    *((void *)v21 + 1) = v23;
    *((_DWORD *)v21 + 4) = v24;
    *(_OWORD *)(v21 + 24) = v25;
    __int16 v22 = v26;
    *((void *)v21 + 5) = v26;
    if (v22) {
      llvm::MetadataTracking::track((uint64_t)(v21 + 40), v22, 2);
    }
    v33[4] = v21;
    llvm::OpenMPIRBuilder::emitCancelationCheckImpl(a1);
  }
  return *a2;
}

unint64_t sub_1CD60D4EC(uint64_t a1, unint64_t a2)
{
  unint64_t result = sub_1CD612948(a1, a2);
  unint64_t v4 = result;
  uint64_t v5 = *(void *)a1;
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)a1 + 40 * v6;
  uint64_t v8 = *(void *)(result + 24);
  if (v8)
  {
    if (v8 == result)
    {
      *(void *)(v7 + 24) = v7;
      unint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 24) + 24))(*(void *)(result + 24));
    }
    else
    {
      *(void *)(v7 + 24) = v8;
      *(void *)(result + 24) = 0;
    }
  }
  else
  {
    *(void *)(v7 + 24) = 0;
  }
  uint64_t v9 = v5 + 40 * v6;
  int v10 = *(_DWORD *)(v4 + 32);
  *(unsigned char *)(v9 + 36) = *(unsigned char *)(v4 + 36);
  *(_DWORD *)(v9 + 32) = v10;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::OpenMPIRBuilder::emitFlush(uint64_t a1, void *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  unsigned int v9 = 0;
  uint64_t v3 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v9);
  v10[0] = (uint64_t)llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v3, v9, 0, 0);
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 3);
  if (*(unsigned char *)(v4 + 16)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5) {
    unsigned int v6 = *(uint64_t ***)(v5 + 24);
  }
  else {
    unsigned int v6 = 0;
  }
  v8[16] = 257;
  return sub_1CB845BAC((uint64_t *)(a1 + 344), v6, (uint64_t **)v5, v10, 1, (uint64_t)v8, 0);
}

uint64_t llvm::OpenMPIRBuilder::createFlush(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_1CD60CD08(a1, a2);
  if (result)
  {
    return llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::emitTaskwaitImpl(uint64_t a1, void *a2)
{
  __n128 v11[2] = *(llvm::Value **)MEMORY[0x1E4F143B8];
  unsigned int v10 = 0;
  uint64_t v3 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v10);
  v11[0] = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v3, v10, 0, 0);
  v11[1] = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, v11[0]);
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 7);
  if (*(unsigned char *)(v4 + 16)) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5) {
    unsigned int v6 = *(uint64_t ***)(v5 + 24);
  }
  else {
    unsigned int v6 = 0;
  }
  __int16 v9 = 257;
  return sub_1CB845BAC((uint64_t *)(a1 + 344), v6, (uint64_t **)v5, (uint64_t *)v11, 2, (uint64_t)v8, 0);
}

uint64_t llvm::OpenMPIRBuilder::createTaskwait(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_1CD60CD08(a1, a2);
  if (result)
  {
    return llvm::OpenMPIRBuilder::emitTaskwaitImpl(a1, a2);
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::emitTaskyieldImpl(uint64_t a1, void *a2)
{
  void v14[3] = *MEMORY[0x1E4F143B8];
  unsigned int v13 = 0;
  uint64_t v3 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v13);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v3, v13, 0, 0);
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 2120), v5, v6);
  v14[0] = (uint64_t)Ident;
  v14[1] = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  _OWORD v14[2] = (uint64_t)NullValue;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 8);
  if (*(unsigned char *)(v8 + 16)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  if (v9) {
    unsigned int v10 = *(uint64_t ***)(v9 + 24);
  }
  else {
    unsigned int v10 = 0;
  }
  v12[16] = 257;
  return sub_1CB845BAC((uint64_t *)(a1 + 344), v10, (uint64_t **)v9, v14, 3, (uint64_t)v12, 0);
}

uint64_t llvm::OpenMPIRBuilder::createTaskyield(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_1CD60CD08(a1, a2);
  if (result)
  {
    return llvm::OpenMPIRBuilder::emitTaskyieldImpl(a1, a2);
  }
  return result;
}

uint64_t llvm::OpenMPIRBuilder::createSections(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::Type *a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a5;
  __int16 v22 = a6;
  if (sub_1CD60CD08(a1, (uint64_t *)a2))
  {
    v23[0] = &unk_1F261BAA8;
    v23[1] = a9;
    void v23[2] = a1;
    int v24 = v23;
    int v25 = 53;
    char v26 = a10;
    sub_1CD60D4EC(a1, (unint64_t)v23);
    if (v24 == v23)
    {
      (*(void (**)(void *))(v23[0] + 32))(v23);
    }
    else if (v24)
    {
      (*(void (**)(void))(*v24 + 40))();
    }
    v20[0] = a1;
    v20[1] = &v21;
    BOOL v15 = (llvm::ConstantInt *)(***(void ***)(a1 + 336) + 1960);
    uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get(v15, 0, 0);
    uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get(v15, (unint64_t)v22, 0);
    uint64_t v18 = (llvm::BinaryOperator *)llvm::ConstantInt::get(v15, 1uLL, 0);
    v23[0] = "section_loop";
    LOWORD(v25) = 259;
    *((void *)&v19 + 1) = a4;
    *(void *)&long long v19 = a3;
    llvm::OpenMPIRBuilder::createCanonicalLoop(a1, a2, (uint64_t)sub_1CC6DC31C, (uint64_t)v20, v16, v17, v18, 1, 0, v19, (uint64_t)v23);
  }
  return *(void *)a2;
}

uint64_t llvm::OpenMPIRBuilder::createSection(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  if (sub_1CD60CD08(a1, a2))
  {
    unsigned int v10 = operator new(0x20uLL);
    void *v10 = &unk_1F261BAF0;
    v10[1] = a5;
    uint64_t v10[2] = a1;
    v10[3] = a2;
    _OWORD v12[3] = v10;
    llvm::OpenMPIRBuilder::EmitOMPInlinedRegion(a1, 53, 0, 0, a3, a4, (uint64_t)v12, 0, 1, 1);
  }
  return *a2;
}

llvm::Instruction *sub_1CD60DE54(uint64_t a1, uint64_t a2, uint64_t *a3, llvm::IntegerType *a4, unint64_t a5, uint64_t a6)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  v19[0] = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)(a1 + 64) + 1984), (unint64_t)a4, 0);
  v19[1] = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)(a1 + 64) + 1984), a5, 0);
  uint64_t result = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t))(**(void **)(a1 + 72) + 48))(*(void *)(a1 + 72), a2, a3, v19, 2, 1);
  if (!result)
  {
    __int16 v18 = 257;
    uint64_t v12 = operator new(0xB0uLL);
    unsigned int v13 = v12;
    uint64_t v14 = 0;
    BOOL v15 = (llvm::Instruction *)(v12 + 24);
    v12[29] = v12[29] & 0x38000000 | 3;
    do
    {
      uint64_t v16 = &v12[v14];
      void *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      void v16[3] = v15;
      v14 += 8;
    }
    while (v14 != 24);
    sub_1CB845960((uint64_t)(v12 + 24), a2, a3, v19, 2, 3, &v17, 0);
    *((unsigned char *)v13 + 113) |= 2u;
    return sub_1CB844E0C((uint64_t *)a1, v15, a6);
  }
  return result;
}

unint64_t *llvm::OpenMPIRBuilder::getOMPCriticalRegionLock(llvm::OpenMPIRBuilder *a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  __int16 v15 = 1283;
  v12[0] = "gomp_critical_user_";
  unsigned int v13 = a2;
  uint64_t v14 = a3;
  llvm::Twine::str((llvm::Twine *)v12, v10);
  uint64_t v4 = (void **)v10[0];
  if (v11 >= 0) {
    uint64_t v4 = v10;
  }
  uint64_t v5 = (void *)(v11 & 0x7F);
  if (v11 < 0) {
    uint64_t v5 = v10[1];
  }
  v12[0] = v4;
  v12[1] = v5;
  unsigned int v13 = "var";
  uint64_t v14 = 3;
  llvm::OpenMPIRBuilder::getNameWithSeparators(".", (uint64_t)v12, 2, 1uLL, ".", 1uLL, &__p);
  unsigned int v6 = (llvm::Type *)*((void *)a1 + 277);
  __int16 v15 = 260;
  v12[0] = &__p;
  OMPInternalVariable = llvm::OpenMPIRBuilder::getOrCreateOMPInternalVariable(a1, v6, (const llvm::Twine *)v12, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  return OMPInternalVariable;
}

void llvm::OpenMPIRBuilder::createCanonicalLoop(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9 = *a2;
  uint64_t v10 = *(void *)(*a2 + 56);
  uint64_t v11 = *(void *)(*a2 + 32);
  if (v11) {
    BOOL v12 = v11 == v10 + 72;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v11 - 24;
  }
  uint64_t v14 = (unsigned __int8 *)a2[2];
  __int16 v15 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v15, v14, 2);
    uint64_t v10 = *(void *)(v9 + 56);
  }
  llvm::OpenMPIRBuilder::createLoopSkeleton(a1, (uint64_t)&v15, a5, v10, v13, v13, a6);
}

uint64_t llvm::OpenMPIRBuilder::applyWorkshareLoop(unint64_t *a1, unsigned __int8 **a2, llvm::CanonicalLoopInfo *this, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 *a8, char a9, char a10, char a11, unsigned __int8 a12)
{
  int v12 = a12;
  switch(a7)
  {
    case 3:
      break;
    case 4:
      BOOL v19 = a9 == 0;
      int v20 = 4;
      int v21 = 14;
      goto LABEL_8;
    case 5:
      a7 = 6;
      break;
    case 6:
      BOOL v19 = a9 == 0;
      int v20 = 5;
      int v21 = 15;
LABEL_8:
      if (v19) {
        a7 = v20;
      }
      else {
        a7 = v21;
      }
      break;
    default:
      if (a8) {
        a7 = 1;
      }
      else {
        a7 = 2;
      }
      break;
  }
  if (a12) {
    int v22 = 64;
  }
  else {
    int v22 = 32;
  }
  int v23 = a7 | v22;
  if (v23 == 79) {
    int v24 = 69;
  }
  else {
    int v24 = v23;
  }
  if (v23 == 78) {
    int v25 = 68;
  }
  else {
    int v25 = v24;
  }
  if ((v25 & 0xFu) - 1 < 2) {
    int v12 = 1;
  }
  if (v12) {
    int v26 = v25;
  }
  else {
    int v26 = v25 | 0x40000000;
  }
  if (a11) {
    int v27 = v25 | 0x40000000;
  }
  else {
    int v27 = v26;
  }
  if (a10) {
    int v28 = v25 | 0x20000000;
  }
  else {
    int v28 = v27;
  }
  if ((v28 & 0x1FFFFF1F) == 1)
  {
    uint64_t v32 = *a2;
    if ((v28 & 0x40) == 0)
    {
      uint64_t v36 = v32;
      if (v32) {
        llvm::MetadataTracking::track((uint64_t)&v36, v32, 2);
      }
      llvm::OpenMPIRBuilder::applyStaticChunkedWorkshareLoop((uint64_t)a1, &v36, this, a4, a5, a6, a8);
    }
    uint64_t v37 = v32;
    if (v32) {
      llvm::MetadataTracking::track((uint64_t)&v37, v32, 2);
    }
    llvm::OpenMPIRBuilder::applyDynamicWorkshareLoop(a1, &v37, (uint64_t)this, a4, a5, v28, a6, a8);
  }
  if ((v28 & 0x1FFFFF1F) != 2)
  {
    uint64_t v34 = *a2;
    uint64_t v35 = v34;
    if (v34) {
      llvm::MetadataTracking::track((uint64_t)&v35, v34, 2);
    }
    llvm::OpenMPIRBuilder::applyDynamicWorkshareLoop(a1, &v35, (uint64_t)this, a4, a5, v28, a6, a8);
  }
  long long v29 = *a2;
  if ((v28 & 0x40) != 0)
  {
    uint64_t v39 = v29;
    if (v29) {
      llvm::MetadataTracking::track((uint64_t)&v39, v29, 2);
    }
    llvm::OpenMPIRBuilder::applyDynamicWorkshareLoop(a1, &v39, (uint64_t)this, a4, a5, v28, a6, a8);
  }
  uint64_t v38 = v29;
  if (v29) {
    llvm::MetadataTracking::track((uint64_t)&v38, v29, 2);
  }
  llvm::OpenMPIRBuilder::applyStaticWorkshareLoop((uint64_t)a1, &v38, this, a4, a5, a6);
  uint64_t v31 = v30;
  if (v38) {
    llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
  }
  return v31;
}

void llvm::OpenMPIRBuilder::applyDynamicWorkshareLoop(unint64_t *a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = (uint64_t *)(a1 + 43);
  uint64_t v14 = *a2;
  uint64_t v52 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v52, v14, 2);
    __int16 v15 = v52;
  }
  else
  {
    __int16 v15 = 0;
  }
  sub_1CB8461A4((uint64_t)v13, 0, (uint64_t)v15);
  if (v52) {
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
  }
  unsigned int v51 = 0;
  uint64_t v16 = *a2;
  uint64_t v50 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v50, v16, 2);
  }
  uint64_t v17 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr((uint64_t)a1, (llvm::DebugLoc *)&v50, &v51, 0);
  if (v50) {
    llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
  }
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent((uint64_t)a1, v17, v51, 0, 0);
  __int16 v18 = *(llvm::Type **)(*(void *)(*(void *)a3 + 48) - 24);
  if ((*((_DWORD *)v18 + 2) & 0xFFFFFF00) == 0x2000) {
    int v19 = 73;
  }
  else {
    int v19 = 75;
  }
  RuntimeFunctiouint64_t n = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)a1, a1[42], v19);
  uint64_t v42 = v21;
  char v43 = (uint64_t **)RuntimeFunction;
  if ((*((_DWORD *)v18 + 2) & 0xFFFFFF00) == 0x2000) {
    int v22 = 77;
  }
  else {
    int v22 = 79;
  }
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction((uint64_t)a1, a1[42], v22);
  if (a4)
  {
    sub_1CBF5385C((uint64_t)v13, a4, a5);
  }
  else
  {
    a1[49] = 0;
    a1[50] = 0;
  }
  int v23 = (llvm::Type *)(**(void **)a1[42] + 1960);
  v55[0] = (uint64_t)"p.lastiter";
  LOWORD(v56) = 259;
  int v24 = v23;
  sub_1CB935044(v13, v23, 0, (uint64_t)v55);
  v55[0] = (uint64_t)"p.lowerbound";
  LOWORD(v56) = 259;
  int v25 = sub_1CB935044(v13, v18, 0, (uint64_t)v55);
  v55[0] = (uint64_t)"p.upperbound";
  LOWORD(v56) = 259;
  uint64_t v46 = sub_1CB935044(v13, v18, 0, (uint64_t)v55);
  v55[0] = (uint64_t)"p.stride";
  LOWORD(v56) = 259;
  int v26 = sub_1CB935044(v13, v18, 0, (uint64_t)v55);
  Preheader = (llvm::Value *)llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)a3);
  uint64_t v28 = 0;
  long long v29 = (void *)*((void *)Preheader + 5);
  if (v29 != (void *)((char *)Preheader + 40))
  {
    if (v29) {
      uint64_t v30 = (uint64_t)(v29 - 3);
    }
    else {
      uint64_t v30 = 0;
    }
    if (*(unsigned __int8 *)(v30 + 16) - 29 >= 0xB) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = v30;
    }
  }
  sub_1CC096F34((uint64_t)v13, v28);
  uint64_t v31 = llvm::ConstantInt::get(v18, 1uLL, 0);
  sub_1CC27BF8C(v13, (uint64_t)v31, (uint64_t)v25, 0, 0);
  uint64_t v32 = *(void *)(*(void *)(a3 + 8) + 48);
  if (v32) {
    uint64_t v33 = v32 - 24;
  }
  else {
    uint64_t v33 = 0;
  }
  int v34 = *(_DWORD *)(v33 + 20);
  if ((v34 & 0x40000000) != 0) {
    uint64_t v35 = *(void *)(v33 - 8);
  }
  else {
    uint64_t v35 = v33 - 32 * (v34 & 0x7FFFFFF);
  }
  uint64_t v36 = *(void *)(v35 + 32);
  sub_1CC27BF8C(v13, v36, (uint64_t)v46, 0, 0);
  sub_1CC27BF8C(v13, (uint64_t)v31, (uint64_t)v26, 0, 0);
  llvm::BasicBlock::getSingleSuccessor(*(llvm::BasicBlock **)(a3 + 24));
  if (a8) {
    uint64_t v37 = a8;
  }
  else {
    uint64_t v37 = v31;
  }
  uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  uint64_t v39 = llvm::ConstantInt::get(v24, a6, 0);
  v55[0] = (uint64_t)Ident;
  v55[1] = ThreadID;
  v55[2] = (uint64_t)v39;
  v55[3] = (uint64_t)v31;
  uint64_t v56 = v36;
  uint64_t v57 = v31;
  uint64_t v58 = v37;
  __int16 v54 = 257;
  sub_1CB845BAC(v13, v43, v42, v55, 7, (uint64_t)v53, 0);
  Name = llvm::Value::getName(Preheader);
  __int16 v54 = 261;
  v53[0] = (uint64_t)Name;
  v53[1] = v41;
  unsigned int v48 = ".outer.cond";
  __int16 v49 = 259;
  sub_1CB8F1E58(v53, (uint64_t *)&v48, (uint64_t)v55);
  operator new();
}

__n128 llvm::CanonicalLoopInfo::collectControlBlocks(llvm::BasicBlock **this, uint64_t a2)
{
  if ((unint64_t)*(unsigned int *)(a2 + 8) + 6 > *(unsigned int *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t Preheader = llvm::CanonicalLoopInfo::getPreheader((llvm::CanonicalLoopInfo *)this);
  __n128 v11 = *(__n128 *)this;
  unsigned int v6 = this[2];
  uint64_t v5 = this[3];
  Singleuint64_t Successor = llvm::BasicBlock::getSingleSuccessor(v5);
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v8 + 6 > (unint64_t)*(unsigned int *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v9 = *(void *)a2 + 8 * v8;
  *(void *)uint64_t v9 = Preheader;
  __n128 result = v11;
  *(__n128 *)(v9 + 8) = v11;
  *(void *)(v9 + 24) = v6;
  *(void *)(v9 + 32) = v5;
  *(void *)(v9 + 40) = SingleSuccessor;
  *(_DWORD *)(a2 + 8) += 6;
  return result;
}

void llvm::OpenMPIRBuilder::unrollLoopFull(uint64_t a1, uint64_t a2, void *a3)
{
  __src[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a1 + 408);
  unsigned int v6 = llvm::MDString::get(v4, "llvm.loop.unroll.enable", 0x17uLL);
  __src[0] = llvm::MDTuple::getImpl((uint64_t)v4, &v6, 1, 0, 1);
  uint64_t v5 = llvm::MDString::get(v4, "llvm.loop.unroll.full", 0x15uLL);
  __src[1] = llvm::MDTuple::getImpl((uint64_t)v4, &v5, 1, 0, 1);
  sub_1CC6D2ED8(a3, __src, 2);
}

void llvm::OpenMPIRBuilder::unrollLoopHeuristic(uint64_t a1, uint64_t a2, void *a3)
{
  __src[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a1 + 408);
  uint64_t v5 = llvm::MDString::get(v4, "llvm.loop.unroll.enable", 0x17uLL);
  __src[0] = llvm::MDTuple::getImpl((uint64_t)v4, &v5, 1, 0, 1);
  sub_1CC6D2ED8(a3, __src, 1);
}

void llvm::OpenMPIRBuilder::applySimd()
{
  v8[18] = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  v0[1] = 0;
  int v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  int v7 = 0;
  v8[0] = &llvm::DominatorTreeAnalysis::Key;
  if (sub_1CC6D91C0(v0, v8)[1])
  {
    v8[0] = &llvm::LoopAnalysis::Key;
    if (sub_1CC6D91C0(v0, v8)[1])
    {
      v8[0] = &llvm::PassInstrumentationAnalysis::Key;
      if (sub_1CC6D91C0(v0, v8)[1]) {
        llvm::LoopAnalysis::run((uint64_t)v8);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t llvm::OpenMPIRBuilder::createOrderedDepend(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!sub_1CD60CD08(a1, a2)) {
    return *a2;
  }
  uint64_t v17 = a5;
  __int16 v18 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 2128), (llvm::Type *)a5);
  if (a3)
  {
    sub_1CBF5385C(a1 + 344, a3, a4);
  }
  else
  {
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
  }
  int v19 = sub_1CB935044((uint64_t *)(a1 + 344), v18, 0, a8);
  *((_WORD *)v19 + 9) = *((_WORD *)v19 + 9) & 0xFFC0 | 3;
  if (*a2)
  {
    sub_1CBF5385C(a1 + 344, *a2, a2[1]);
  }
  else
  {
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
  }
  if (a5)
  {
    unint64_t v20 = 0;
    do
    {
      int v34 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)(a1 + 408) + 1984), 0, 0);
      uint64_t v35 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)(a1 + 408) + 1984), v20, 0);
      __int16 v33 = 257;
      uint64_t v21 = sub_1CC57EEA0((uint64_t *)(a1 + 344), (uint64_t)v18, (uint64_t *)v19, (uint64_t *)&v34, 2, (uint64_t)v32);
      int v22 = sub_1CC27BF8C((uint64_t *)(a1 + 344), *(void *)(a6 + 8 * v20), v21, 0, 0);
      *((_WORD *)v22 + 9) = *((_WORD *)v22 + 9) & 0xFF81 | 6;
      ++v20;
    }
    while (v17 != v20);
  }
  int v34 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)(a1 + 408) + 1984), 0, 0);
  uint64_t v35 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(void **)(a1 + 408) + 1984), 0, 0);
  __int16 v33 = 257;
  uint64_t v23 = sub_1CC57EEA0((uint64_t *)(a1 + 344), (uint64_t)v18, (uint64_t *)v19, (uint64_t *)&v34, 2, (uint64_t)v32);
  unsigned int v31 = 0;
  int v24 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v31);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v24, v31, 0, 0);
  uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  int v34 = Ident;
  uint64_t v35 = (void *)ThreadID;
  uint64_t v36 = v23;
  if (a9) {
    int v27 = 118;
  }
  else {
    int v27 = 119;
  }
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), v27);
  if (*(unsigned char *)(v28 + 16))
  {
    long long v29 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    long long v29 = (uint64_t **)v28;
    uint64_t v30 = *(uint64_t ***)(v28 + 24);
  }
  __int16 v33 = 257;
  sub_1CB845BAC((uint64_t *)(a1 + 344), v30, v29, (uint64_t *)&v34, 3, (uint64_t)v32, 0);
  return *(void *)(a1 + 392);
}

uint64_t llvm::OpenMPIRBuilder::emitCommonDirectiveEntry(uint64_t a1, llvm::Type *a2, llvm::Constant **a3, uint64_t a4, char a5)
{
  if (a3 && (a5 & 1) != 0)
  {
    __int16 v10 = 257;
    NullValue = llvm::Constant::getNullValue(*a3, a2, (const llvm::APFloat *)a3);
    sub_1CB845F20(a1 + 344, 33, a3, (uint64_t)NullValue, (uint64_t)&v9);
    uint64_t v9 = "omp_region.body";
    __int16 v10 = 259;
    operator new();
  }
  return *(void *)(a1 + 392);
}

uint64_t llvm::OpenMPIRBuilder::emitCommonDirectiveExit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a1 + 344;
  if (a3)
  {
    sub_1CBF5385C(a1 + 344, a3, a4);
  }
  else
  {
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
  }
  if (a6)
  {
    sub_1CC6CA484((uint64_t)v18, a1);
    v17[0] = a3;
    v17[1] = a4;
    if (!v19)
    {
      sub_1CB920400();
      return llvm::OpenMPIRBuilder::createOMPAlloc();
    }
    (*(void (**)(void *, void *))(*v19 + 48))(v19, v17);
    uint64_t v12 = *(void *)(a3 + 40);
    if (v12 == a3 + 40)
    {
      uint64_t v14 = 0;
    }
    else
    {
      if (v12) {
        uint64_t v13 = v12 - 24;
      }
      else {
        uint64_t v13 = 0;
      }
      if (*(unsigned __int8 *)(v13 + 16) - 29 >= 0xB) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = v13;
      }
    }
    sub_1CC096F34(v11, v14);
    if (v19 == v18)
    {
      (*(void (**)(void *))(v18[0] + 32))(v18);
    }
    else if (v19)
    {
      (*(void (**)(void *, uint64_t))(*v19 + 40))(v19, v15);
    }
  }
  if (a5) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  return *(void *)(a1 + 392);
}

uint64_t llvm::OpenMPIRBuilder::createOMPAlloc(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25[3] = *MEMORY[0x1E4F143B8];
  __int16 v10 = (uint64_t *)(a1 + 344);
  uint64_t v22 = a1 + 344;
  uint64_t v11 = (void *)(a1 + 392);
  long long v23 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v24);
  if (*a2)
  {
    sub_1CBF5385C((uint64_t)v10, *a2, a2[1]);
  }
  else
  {
    void *v11 = 0;
    v11[1] = 0;
  }
  unsigned int v21 = 0;
  uint64_t v12 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v21);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v12, v21, 0, 0);
  v25[0] = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v25[1] = a3;
  v25[2] = a4;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 121);
  if (*(unsigned char *)(v14 + 16)) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  if (v15) {
    uint64_t v16 = *(uint64_t ***)(v15 + 24);
  }
  else {
    uint64_t v16 = 0;
  }
  __int16 v20 = 260;
  v19[0] = a5;
  uint64_t v17 = sub_1CB845BAC(v10, v16, (uint64_t **)v15, v25, 3, (uint64_t)v19, 0);
  sub_1CC6DA230(&v22);
  return v17;
}

uint64_t llvm::OpenMPIRBuilder::createOMPFree(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25[3] = *MEMORY[0x1E4F143B8];
  __int16 v10 = (uint64_t *)(a1 + 344);
  uint64_t v22 = a1 + 344;
  uint64_t v11 = (void *)(a1 + 392);
  long long v23 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v24);
  if (*a2)
  {
    sub_1CBF5385C((uint64_t)v10, *a2, a2[1]);
  }
  else
  {
    void *v11 = 0;
    v11[1] = 0;
  }
  unsigned int v21 = 0;
  uint64_t v12 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v21);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v12, v21, 0, 0);
  v25[0] = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  v25[1] = a3;
  v25[2] = a4;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 123);
  if (*(unsigned char *)(v14 + 16)) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  if (v15) {
    uint64_t v16 = *(uint64_t ***)(v15 + 24);
  }
  else {
    uint64_t v16 = 0;
  }
  __int16 v20 = 260;
  v19[0] = a5;
  uint64_t v17 = sub_1CB845BAC(v10, v16, (uint64_t **)v15, v25, 3, (uint64_t)v19, 0);
  sub_1CC6DA230(&v22);
  return v17;
}

uint64_t llvm::OpenMPIRBuilder::createOMPInteropInit(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, void *a5, void *a6, void *a7, unsigned int a8)
{
  v35[8] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = (uint64_t *)(a1 + 344);
  uint64_t v32 = a1 + 344;
  uint64_t v17 = (void *)(a1 + 392);
  long long v33 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v34);
  if (*a2)
  {
    sub_1CBF5385C((uint64_t)v16, *a2, a2[1]);
  }
  else
  {
    *uint64_t v17 = 0;
    v17[1] = 0;
  }
  unsigned int v31 = 0;
  __int16 v18 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v31);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v18, v31, 0, 0);
  uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  if (!a5) {
    a5 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  unsigned int v21 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2128), a4, 0);
  if (!a6)
  {
    a6 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), 0, 0);
    uint64_t v22 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)(a1 + 336) + 1912), 0);
    a7 = llvm::ConstantPointerNull::get(v22, v23);
  }
  int v24 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), a8, 0);
  v35[0] = (uint64_t)Ident;
  v35[1] = ThreadID;
  v35[2] = a3;
  v35[3] = (uint64_t)v21;
  v35[4] = (uint64_t)a5;
  v35[5] = (uint64_t)a6;
  v35[6] = (uint64_t)a7;
  v35[7] = (uint64_t)v24;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 124);
  if (*(unsigned char *)(v25 + 16)) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v25;
  }
  if (v26) {
    int v27 = *(uint64_t ***)(v26 + 24);
  }
  else {
    int v27 = 0;
  }
  v30[16] = 257;
  uint64_t v28 = sub_1CB845BAC(v16, v27, (uint64_t **)v26, v35, 8, (uint64_t)v30, 0);
  sub_1CC6DA230(&v32);
  return v28;
}

uint64_t llvm::OpenMPIRBuilder::createOMPInteropDestroy(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, void *a5, void *a6, unsigned int a7)
{
  v32[7] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = (uint64_t *)(a1 + 344);
  uint64_t v29 = a1 + 344;
  uint64_t v15 = (void *)(a1 + 392);
  long long v30 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v31);
  if (*a2)
  {
    sub_1CBF5385C((uint64_t)v14, *a2, a2[1]);
  }
  else
  {
    *uint64_t v15 = 0;
    v15[1] = 0;
  }
  unsigned int v28 = 0;
  uint64_t v16 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v28);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v16, v28, 0, 0);
  uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  if (!a4) {
    a4 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  if (!a5)
  {
    a5 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), 0, 0);
    int v19 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)(a1 + 336) + 1912), 0);
    a6 = llvm::ConstantPointerNull::get(v19, v20);
  }
  unsigned int v21 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), a7, 0);
  v32[0] = (uint64_t)Ident;
  v32[1] = ThreadID;
  v32[2] = a3;
  v32[3] = (uint64_t)a4;
  v32[4] = (uint64_t)a5;
  v32[5] = (uint64_t)a6;
  v32[6] = (uint64_t)v21;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 125);
  if (*(unsigned char *)(v22 + 16)) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  if (v23) {
    int v24 = *(uint64_t ***)(v23 + 24);
  }
  else {
    int v24 = 0;
  }
  v27[16] = 257;
  uint64_t v25 = sub_1CB845BAC(v14, v24, (uint64_t **)v23, v32, 7, (uint64_t)v27, 0);
  sub_1CC6DA230(&v29);
  return v25;
}

uint64_t llvm::OpenMPIRBuilder::createOMPInteropUse(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, void *a5, void *a6, unsigned int a7)
{
  v32[7] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = (uint64_t *)(a1 + 344);
  uint64_t v29 = a1 + 344;
  uint64_t v15 = (void *)(a1 + 392);
  long long v30 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v31);
  if (*a2)
  {
    sub_1CBF5385C((uint64_t)v14, *a2, a2[1]);
  }
  else
  {
    *uint64_t v15 = 0;
    v15[1] = 0;
  }
  unsigned int v28 = 0;
  uint64_t v16 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v28);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v16, v28, 0, 0);
  uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  if (!a4) {
    a4 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  if (!a5)
  {
    a5 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), 0, 0);
    int v19 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(***(void ***)(a1 + 336) + 1912), 0);
    a6 = llvm::ConstantPointerNull::get(v19, v20);
  }
  unsigned int v21 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 2120), a7, 0);
  v32[0] = (uint64_t)Ident;
  v32[1] = ThreadID;
  v32[2] = a3;
  v32[3] = (uint64_t)a4;
  v32[4] = (uint64_t)a5;
  v32[5] = (uint64_t)a6;
  v32[6] = (uint64_t)v21;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 126);
  if (*(unsigned char *)(v22 + 16)) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  if (v23) {
    int v24 = *(uint64_t ***)(v23 + 24);
  }
  else {
    int v24 = 0;
  }
  v27[16] = 257;
  uint64_t v25 = sub_1CB845BAC(v14, v24, (uint64_t **)v23, v32, 7, (uint64_t)v27, 0);
  sub_1CC6DA230(&v29);
  return v25;
}

uint64_t llvm::OpenMPIRBuilder::createCachedThreadPrivate(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const llvm::Twine *a5)
{
  v26[5] = *MEMORY[0x1E4F143B8];
  __int16 v10 = (uint64_t *)(a1 + 344);
  uint64_t v23 = a1 + 344;
  uint64_t v11 = (void *)(a1 + 392);
  long long v24 = *(_OWORD *)(a1 + 392);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)(a1 + 344), &v25);
  if (*a2)
  {
    sub_1CBF5385C((uint64_t)v10, *a2, a2[1]);
  }
  else
  {
    void *v11 = 0;
    v11[1] = 0;
  }
  unsigned int v22 = 0;
  uint64_t v12 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v22);
  Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v12, v22, 0, 0);
  uint64_t ThreadID = llvm::OpenMPIRBuilder::getOrCreateThreadID((llvm::OpenMPIRBuilder *)a1, Ident);
  OMPInternalVariable = llvm::OpenMPIRBuilder::getOrCreateOMPInternalVariable((llvm::OpenMPIRBuilder *)a1, *(llvm::Type **)(a1 + 2200), a5, 0);
  v26[0] = (uint64_t)Ident;
  v26[1] = ThreadID;
  v26[2] = a3;
  v26[3] = a4;
  uint64_t v26[4] = (uint64_t)OMPInternalVariable;
  llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 115);
  if (*(unsigned char *)(v16 + 16)) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  if (v17) {
    __int16 v18 = *(uint64_t ***)(v17 + 24);
  }
  else {
    __int16 v18 = 0;
  }
  v21[16] = 257;
  uint64_t v19 = sub_1CB845BAC(v10, v18, (uint64_t **)v17, v26, 5, (uint64_t)v21, 0);
  sub_1CC6DA230(&v23);
  return v19;
}

unint64_t *llvm::OpenMPIRBuilder::getOrCreateOMPInternalVariable(llvm::OpenMPIRBuilder *this, llvm::Type *a2, const llvm::Twine *a3, unsigned int a4)
{
  v30[32] = *MEMORY[0x1E4F143B8];
  int v27 = &v28;
  unsigned int v28 = v30;
  long long v29 = xmmword_1CD96DBF0;
  int v20 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  int v26 = 0;
  uint64_t v19 = &unk_1F2646FA8;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  llvm::Twine::print(a3, (llvm::raw_ostream *)&v19);
  int v7 = sub_1CD610D30((uint64_t)this + 1968, (unsigned __int8 *)*v27, (size_t)v27[1]);
  uint64_t v8 = *v7;
  uint64_t v9 = *(unint64_t **)(*v7 + 8);
  if (!v9)
  {
    __int16 v10 = (char *)operator new(0x78uLL);
    uint64_t v9 = (unint64_t *)(v10 + 32);
    *((_DWORD *)v10 + 13) = *((_DWORD *)v10 + 13) & 0x38000000 | 1;
    *(void *)__int16 v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *((void *)v10 + 3) = v10 + 32;
    uint64_t v11 = *((void *)this + 42);
    NullValue = llvm::Constant::getNullValue(a2, v12, v13);
    uint64_t v15 = *(const char **)v8;
    __int16 v18 = 261;
    v17[0] = (const char *)(v8 + 16);
    v17[1] = v15;
    llvm::GlobalVariable::GlobalVariable(v9, v11, a2, 0, 10, (unint64_t)NullValue, v17, 0, 0, (llvm::Type *)(a4 | 0x100000000), 0);
    *(void *)(v8 + 8) = v9;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v19);
  if (v28 != v30) {
    free(v28);
  }
  return v9;
}

uint64_t llvm::OpenMPIRBuilder::createTargetInit(uint64_t a1, uint64_t *a2, int a3, llvm::LLVMContext *a4)
{
  void v31[4] = *MEMORY[0x1E4F143B8];
  if (sub_1CD60CD08(a1, a2))
  {
    unsigned int v28 = 0;
    uint64_t v9 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v28);
    Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v9, v28, 0, 0);
    Int8Ty = (llvm::ConstantInt *)llvm::Type::getInt8Ty(**(llvm::Type ***)(a1 + 2104), v11);
    if (a3) {
      unint64_t v14 = 2;
    }
    else {
      unint64_t v14 = 1;
    }
    Signed = llvm::ConstantInt::getSigned(Int8Ty, v14, v13);
    Bool = llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)(a1 + 2120), (llvm::LLVMContext *)(a3 ^ 1u), v16);
    uint64_t v19 = llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)(a1 + 2120), a4, v18);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 146);
    uint64_t v21 = v20;
    uint64_t v22 = 0;
    if (*(unsigned char *)(v21 + 16)) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v21;
    }
    if (v23) {
      uint64_t v22 = *(uint64_t ***)(v23 + 24);
    }
    v31[0] = (uint64_t)Ident;
    v31[1] = (uint64_t)Signed;
    v31[2] = (uint64_t)Bool;
    _OWORD v31[3] = (uint64_t)v19;
    __int16 v30 = 257;
    char v24 = (llvm::ConstantInt **)sub_1CB845BAC((uint64_t *)(a1 + 344), v22, (uint64_t **)v23, v31, 4, (uint64_t)v29, 0);
    uint64_t v25 = llvm::ConstantInt::get(*v24, 0xFFFFFFFFFFFFFFFFLL, 0);
    v29[0] = "exec_user_code";
    __int16 v30 = 259;
    sub_1CB845F20(a1 + 344, 32, v24, (uint64_t)v25, (uint64_t)v29);
    int v26 = LLVMBuildUnreachable_0(a1 + 344);
    uint64_t v27 = *((void *)v26 + 5);
    v29[0] = "user_code.entry";
    __int16 v30 = 259;
    llvm::BasicBlock::splitBasicBlock(v27, (uint64_t)v26 + 24, (uint64_t)v29, 0);
  }
  return *a2;
}

uint64_t llvm::OpenMPIRBuilder::createTargetDeinit(uint64_t a1, uint64_t *a2, int a3, llvm::LLVMContext *a4)
{
  void v23[3] = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CD60CD08(a1, a2);
  if (result)
  {
    unsigned int v22 = 0;
    uint64_t v9 = (llvm::Value *)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(a1, a2, &v22);
    Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(a1, v9, v22, 0, 0);
    Int8Ty = (llvm::ConstantInt *)llvm::Type::getInt8Ty(**(llvm::Type ***)(a1 + 2104), v11);
    if (a3) {
      unint64_t v14 = 2;
    }
    else {
      unint64_t v14 = 1;
    }
    Signed = llvm::ConstantInt::getSigned(Int8Ty, v14, v13);
    Bool = llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)(a1 + 2120), a4, v16);
    llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(a1, *(void *)(a1 + 336), 147);
    if (*(unsigned char *)(v18 + 16)) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v18;
    }
    if (v19) {
      uint64_t v20 = *(uint64_t ***)(v19 + 24);
    }
    else {
      uint64_t v20 = 0;
    }
    v23[0] = (uint64_t)Ident;
    v23[1] = (uint64_t)Signed;
    void v23[2] = (uint64_t)Bool;
    v21[16] = 257;
    return sub_1CB845BAC((uint64_t *)(a1 + 344), v20, (uint64_t **)v19, v23, 3, (uint64_t)v21, 0);
  }
  return result;
}

void llvm::OpenMPIRBuilder::getNameWithSeparators(char *a1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, size_t a4@<X3>, char *a5@<X4>, size_t a6@<X5>, std::string *a7@<X8>)
{
  v29[16] = *MEMORY[0x1E4F143B8];
  int v26 = &v27;
  uint64_t v27 = v29;
  long long v28 = xmmword_1CFAC3020;
  int v19 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  uint64_t v18 = &unk_1F2646FA8;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  __dst = 0;
  if (!a3)
  {
    uint64_t v17 = (std::string::size_type *)&v28;
    uint64_t v16 = (const std::string::value_type *)v29;
LABEL_14:
    std::string::__init(a7, v16, *v17);
    goto LABEL_15;
  }
  uint64_t v11 = a2;
  uint64_t v12 = a2 + 16 * a3;
  do
  {
    unint64_t v14 = *(const void **)v11;
    size_t v13 = *(void *)(v11 + 8);
    uint64_t v15 = (char *)__dst;
    if (a4 <= v21 - (uint64_t)__dst)
    {
      if (a4)
      {
        memcpy(__dst, a1, a4);
        uint64_t v15 = (char *)__dst + a4;
        __dst = (char *)__dst + a4;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v18, a1, a4);
      uint64_t v15 = (char *)__dst;
    }
    if (v13 <= v21 - (uint64_t)v15)
    {
      if (v13)
      {
        memcpy(v15, v14, v13);
        __dst = (char *)__dst + v13;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v18, (const char *)v14, v13);
    }
    v11 += 16;
    a1 = a5;
    a4 = a6;
  }
  while (v11 != v12);
  uint64_t v17 = (std::string::size_type *)(v26 + 1);
  uint64_t v16 = (const std::string::value_type *)*v26;
  if (*v26) {
    goto LABEL_14;
  }
  a7->__r_.__value_.__r.__words[0] = 0;
  a7->__r_.__value_.__l.__size_ = 0;
  a7->__r_.__value_.__r.__words[2] = 0;
LABEL_15:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v18);
  if (v27 != v29) {
    free(v27);
  }
}

uint64_t *sub_1CD610D30(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      uint64_t v9 = i[1];
      ++i;
      uint64_t v8 = v9;
    }
    return i;
  }
  uint64_t v11 = sub_1CB906F34((uint64_t *)(a1 + 24), a3 + 17, 3);
  uint64_t v12 = (void *)v11;
  uint64_t v13 = v11 + 16;
  if (a3) {
    memcpy((void *)(v11 + 16), a2, a3);
  }
  *(unsigned char *)(v13 + a3) = 0;
  void *v12 = a3;
  v12[1] = 0;
  *uint64_t i = (uint64_t)v12;
  ++*(_DWORD *)(a1 + 12);
  for (uint64_t i = (uint64_t *)(*(void *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i == -8;
  return i;
}

unint64_t *llvm::OpenMPIRBuilder::createOffloadMaptypes(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5 = *(unsigned char **)a2;
  uint64_t v6 = (llvm::Type *)*(unsigned int *)(a2 + 8);
  IntNTy = (llvm::ArrayType *)llvm::Type::getIntNTy(**(llvm::Type ***)(a1 + 336), (llvm::LLVMContext *)0x40, a3);
  uint64_t v8 = llvm::ArrayType::get(IntNTy, v6);
  Impl = llvm::ConstantDataSequential::getImpl(v5, (llvm::Type *)(8 * (void)v6), v8);
  __int16 v10 = (char *)operator new(0x78uLL);
  *((_DWORD *)v10 + 13) = *((_DWORD *)v10 + 13) & 0x38000000 | 1;
  *(void *)__int16 v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 32;
  uint64_t v11 = *(void *)(a1 + 336);
  uint64_t v12 = *(llvm::PointerType **)Impl;
  __int16 v15 = 260;
  unint64_t v14 = a3;
  uint64_t result = llvm::GlobalVariable::GlobalVariable((unint64_t *)v10 + 4, v11, v12, 1, 8, (unint64_t)Impl, &v14, 0, 0, 0, 0);
  *((_DWORD *)v10 + 16) = *((_DWORD *)v10 + 16) & 0xFFFFFF3F | 0x80;
  return result;
}

uint64_t llvm::OpenMPIRBuilder::createAtomicCompare(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int a6, int a7, int a8)
{
  if (!sub_1CD60CD08(a1, a2)) {
    return *a2;
  }
  if (a7)
  {
    if (a7 == 2) {
      __int16 v17 = 9;
    }
    else {
      __int16 v17 = 10;
    }
    if (a7 == 2) {
      __int16 v18 = 7;
    }
    else {
      __int16 v18 = 8;
    }
    if (*(unsigned char *)(a3 + 16)) {
      __int16 v17 = v18;
    }
    if (a7 == 2) {
      __int16 v19 = 10;
    }
    else {
      __int16 v19 = 9;
    }
    if (a7 == 2) {
      __int16 v20 = 8;
    }
    else {
      __int16 v20 = 7;
    }
    if (*(unsigned char *)(a3 + 16)) {
      __int16 v21 = v20;
    }
    else {
      __int16 v21 = v19;
    }
    if (a8) {
      __int16 v22 = v21;
    }
    else {
      __int16 v22 = v17;
    }
    sub_1CD5097F8((uint64_t *)(a1 + 344), v22, *(void *)a3, a4, 0, a6, 1);
  }
  else
  {
    sub_1CD509648((uint64_t *)(a1 + 344), *(void *)a3, (uint64_t ***)a4, a5, 0, a6, dword_1CFB1CA38[a6 - 2], 1);
  }
  if ((a6 - 5) <= 2) {
    llvm::OpenMPIRBuilder::emitFlush(a1, a2);
  }
  return *(void *)(a1 + 392);
}

unint64_t *llvm::OpenMPIRBuilder::createOffloadMapnames(uint64_t a1, unsigned int *a2, const char *a3)
{
  Int8Ty = (llvm::PointerType *)llvm::Type::getInt8Ty(**(llvm::Type ***)(a1 + 336), (llvm::LLVMContext *)a2);
  int v7 = (llvm::ArrayType *)llvm::PointerType::get(Int8Ty, 0);
  uint64_t v8 = llvm::ArrayType::get(v7, (llvm::Type *)a2[2]);
  uint64_t v9 = llvm::ConstantArray::get(v8, *(llvm::Type **)a2, a2[2]);
  __int16 v10 = (char *)operator new(0x78uLL);
  *((_DWORD *)v10 + 13) = *((_DWORD *)v10 + 13) & 0x38000000 | 1;
  *(void *)__int16 v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 32;
  uint64_t v11 = *(void *)(a1 + 336);
  uint64_t v12 = *(llvm::PointerType **)v9;
  __int16 v15 = 260;
  unint64_t v14 = a3;
  return llvm::GlobalVariable::GlobalVariable((unint64_t *)v10 + 4, v11, v12, 1, 8, (unint64_t)v9, &v14, 0, 0, 0, 0);
}

uint64_t sub_1CD6110E0(uint64_t a1)
{
  sub_1CD456CB4((void *)(a1 + 192));
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2 != (void *)(a1 + 136)) {
    free(v2);
  }
  sub_1CC189978((void *)(a1 + 56));
  return a1;
}

uint64_t sub_1CD611140(uint64_t a1)
{
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1CD61119C(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    sub_1CD611204();
  }
  uint64_t result = sub_1CC6D8C84(*(void *)a1 + 88 * v3, a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1CD611204()
{
}

uint64_t sub_1CD6112A0(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)result;
    uint64_t v6 = 88 * v2;
    do
    {
      uint64_t result = sub_1CD611324(a2, v5);
      v5 += 88;
      a2 += 88;
      v6 -= 88;
    }
    while (v6);
    unsigned int v7 = *(_DWORD *)(v4 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)v4;
      uint64_t v9 = 88 * v7;
      uint64_t v10 = v8 - 88;
      do
      {
        uint64_t result = (uint64_t)sub_1CD6113D8((void *)(v10 + v9));
        v9 -= 88;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_1CD611324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = a1 + 72;
  *(void *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 64) = 0x200000000;
  if (*(_DWORD *)(a2 + 64)) {
    sub_1CBA6E388(a1 + 56, (const void **)(a2 + 56));
  }
  return a1;
}

void *sub_1CD6113D8(void *a1)
{
  unsigned int v2 = (void *)a1[7];
  if (v2 != a1 + 9) {
    free(v2);
  }
  unsigned int v3 = (void *)a1[3];
  if (v3 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

llvm::SmallPtrSetImplBase *sub_1CD611470(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t *a3)
{
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 32;
  *((void *)this + 2) = 8;
  *((_DWORD *)this + 6) = 0;
  if (a2 != a3)
  {
    long long v5 = a2;
    do
    {
      uint64_t v6 = *v5++;
      sub_1CB89694C(this, v6);
    }
    while (v5 != a3);
  }
  return this;
}

uint64_t sub_1CD6114D8(uint64_t result, uint64_t a2, char *a3, char *a4)
{
  long long v5 = a3;
  uint64_t v6 = *(void *)result;
  uint64_t v7 = *(unsigned int *)(result + 8);
  if (*(void *)result + 8 * v7 == a2)
  {
    return sub_1CB91FB58(result, a3, a4);
  }
  else
  {
    uint64_t v8 = (a2 - v6) >> 3;
    unint64_t v9 = (a4 - a3) >> 3;
    if (v7 + v9 > *(unsigned int *)(result + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v10 = (char *)(v6 + 8 * v8);
    uint64_t v11 = (char *)(v6 + 8 * v7);
    unint64_t v12 = (v11 - v10) >> 3;
    if (v12 >= v9)
    {
      uint64_t result = sub_1CD4570C8(result, &v11[-8 * v9], (char *)(v6 + 8 * v7));
      if (&v11[-8 * v9] != v10) {
        uint64_t result = (uint64_t)memmove(&v10[8 * v9], v10, &v11[-8 * v9] - v10);
      }
      while (v5 != a4)
      {
        uint64_t v16 = *(void *)v5;
        v5 += 8;
        *(void *)uint64_t v10 = v16;
        v10 += 8;
      }
    }
    else
    {
      unsigned int v13 = v7 + ((unint64_t)(a4 - a3) >> 3);
      *(_DWORD *)(result + 8) = v13;
      if (v8 != v7)
      {
        uint64_t result = (uint64_t)memcpy((void *)(v6 + 8 * v13 - 8 * v12), v10, v11 - v10);
        do
        {
          uint64_t v14 = *(void *)v5;
          v5 += 8;
          *(void *)uint64_t v10 = v14;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      while (v5 != a4)
      {
        uint64_t v15 = *(void *)v5;
        v5 += 8;
        *(void *)uint64_t v11 = v15;
        v11 += 8;
      }
    }
  }
  return result;
}

uint64_t sub_1CD611644(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      sub_1CBA0E618(v5, a2, &v11);
      unint64_t v9 = v11;
      void *v11 = *a2;
      uint64_t v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      uint64_t result = a2[1];
      a2[1] = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CD611730(uint64_t a1)
{
  *(void *)a1 = &unk_1F261B720;
  if (*(unsigned char *)(a1 + 208))
  {
    sub_1CD4CFA4C((uint64_t *)(a1 + 8));
    *(unsigned char *)(a1 + 208) = 0;
  }
  return a1;
}

void sub_1CD611788(uint64_t a1)
{
  *(void *)a1 = &unk_1F261B720;
  if (*(unsigned char *)(a1 + 208))
  {
    sub_1CD4CFA4C((uint64_t *)(a1 + 8));
    *(unsigned char *)(a1 + 208) = 0;
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CD611800(void *a1)
{
  *a1 = &unk_1F261B750;
  unsigned int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

char *sub_1CD611854()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::TargetLibraryAnalysis]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  unsigned int v2 = &aStringrefLlvmG_1[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD611914()
{
}

uint64_t sub_1CD61192C(uint64_t a1)
{
  *(void *)a1 = &unk_1F261B7A8;
  sub_1CBF69A38((void *)(a1 + 168));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 168), 8);
  sub_1CBF69C4C((char **)(a1 + 24));
  return a1;
}

char *sub_1CD611984()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::AssumptionAnalysis]";
  v10[1] = 74;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4A) {
    uint64_t v1 = 74;
  }
  else {
    uint64_t v1 = v0;
  }
  unsigned int v2 = &aStringrefLlvmG_2[v1];
  unint64_t v3 = 74 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD611A44()
{
}

char *sub_1CD611A5C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DominatorTreeAnalysis]";
  v10[1] = 77;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D) {
    uint64_t v1 = 77;
  }
  else {
    uint64_t v1 = v0;
  }
  unsigned int v2 = &aStringrefLlvmG_3[v1];
  unint64_t v3 = 77 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD611B1C()
{
}

void sub_1CD611B34(void *a1)
{
  *a1 = &unk_1F261B858;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase();
}

char *sub_1CD611B78()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopAnalysis]";
  v10[1] = 68;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x44) {
    uint64_t v1 = 68;
  }
  else {
    uint64_t v1 = v0;
  }
  unsigned int v2 = &aStringrefLlvmG_4[v1];
  unint64_t v3 = 68 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD611C38()
{
}

void *sub_1CD611C50(void *a1)
{
  *a1 = &unk_1F261B8B0;
  llvm::ScalarEvolution::~ScalarEvolution((llvm::ScalarEvolution *)(a1 + 1));
  return a1;
}

char *sub_1CD611C94()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ScalarEvolutionAnalysis]";
  v10[1] = 79;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4F) {
    uint64_t v1 = 79;
  }
  else {
    uint64_t v1 = v0;
  }
  unsigned int v2 = &aStringrefLlvmG_5[v1];
  unint64_t v3 = 79 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void sub_1CD611D54()
{
}

char *sub_1CD611D70()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PassInstrumentationAnalysis]";
  v10[1] = 83;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x53) {
    uint64_t v1 = 83;
  }
  else {
    uint64_t v1 = v0;
  }
  unsigned int v2 = &aStringrefLlvmG_6[v1];
  unint64_t v3 = 83 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

void *sub_1CD611E30(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1F261B9A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

char *sub_1CD611E9C()
{
  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::TargetIRAnalysis]";
  v10[1] = 72;
  unint64_t v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x48) {
    uint64_t v1 = 72;
  }
  else {
    uint64_t v1 = v0;
  }
  uint64_t v2 = &aStringrefLlvmG_7[v1];
  unint64_t v3 = 72 - v1;
  if (v3 >= 0x12) {
    uint64_t v4 = 18;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t result = &v2[v4];
  unint64_t v6 = v3 - v4;
  if (v6 >= v6 - 1) {
    unint64_t v7 = v6 - 1;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906) {
    result += 6;
  }
  return result;
}

char **sub_1CD611F58(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 40 * v3;
    uint64_t v5 = v2 - 40;
    do
    {
      unint64_t v6 = *(char **)&v5[v4 + 24];
      if (&v5[v4] == v6)
      {
        (*(void (**)(char *))(*(void *)&v5[v4] + 32))(&v5[v4]);
      }
      else if (v6)
      {
        (*(void (**)(char *))(*(void *)v6 + 40))(v6);
      }
      v4 -= 40;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD61201C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *(void *)(*(void *)a1 + v4);
        if (v6 != -8 && v6 != 0) {
          MEMORY[0x1D25D9CD0]();
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  free(*(void **)a1);
  return a1;
}

char **sub_1CD612094(char **a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 88 * v3;
    uint64_t v5 = v2 - 88;
    do
    {
      sub_1CD6113D8(&v5[v4]);
      v4 -= 88;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CD6120FC(_WORD *a1, long long *a2, double **a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCD9A40, 0, 0);
  xmmword_1EBCD9AC0 = 0u;
  *(_OWORD *)&qword_1EBCD9AD0 = 0u;
  *((void *)&xmmword_1EBCD9AC0 + 1) = &unk_1F2601200;
  qword_1EBCD9A40 = (uint64_t)&unk_1F2601198;
  qword_1EBCD9AE0 = (uint64_t)&unk_1F2643E40;
  qword_1EBCD9AE8 = (uint64_t)&unk_1F2601220;
  qword_1EBCD9B00 = (uint64_t)&qword_1EBCD9AE8;
  sub_1CD6121F0(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCD9A40);
}

double sub_1CD6121F0(_WORD *a1, long long *a2, double **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCD9A40, "openmp-ir-builder-unroll-threshold-factor", 0x29uLL);
  word_1EBCD9A4A = (32 * (*a1 & 3)) | word_1EBCD9A4A & 0xFF9F;
  xmmword_1EBCD9A60 = *a2;
  uint64_t v6 = *a3;
  *(double *)&xmmword_1EBCD9AC0 = **a3;
  byte_1EBCD9AD8 = 1;
  double result = *v6;
  qword_1EBCD9AD0 = *(void *)v6;
  return result;
}

unint64_t sub_1CD612278(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 88 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      sub_1CD6122E4();
    }
    sub_1CD6122E4();
  }
  return a2;
}

void sub_1CD6122E4()
{
}

uint64_t sub_1CD612354(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(char **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      unsigned int v5 = *(_DWORD *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        uint64_t v16 = *(void *)a1;
        if (v5)
        {
          uint64_t v17 = sub_1CC6DA3B4((uint64_t)v4, (uint64_t)&v4[88 * v5], v16);
          uint64_t v16 = *(void *)a1;
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
        }
        else
        {
          uint64_t v17 = *(void *)a1;
        }
        for (uint64_t i = (void *)(v16 + 88 * v6); i != (void *)v17; uint64_t i = sub_1CD6113D8(i - 11))
          ;
        *(_DWORD *)(a1 + 8) = v5;
        unsigned int v19 = *(_DWORD *)(a2 + 8);
        if (v19)
        {
          uint64_t v20 = 88 * v19;
          uint64_t v21 = *(void *)a2 - 88;
          do
          {
            sub_1CD6113D8((void *)(v21 + v20));
            v20 -= 88;
          }
          while (v20);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          if (v6)
          {
            uint64_t v23 = 88 * v6;
            uint64_t v24 = *(void *)a1 - 88;
            do
            {
              sub_1CD6113D8((void *)(v24 + v23));
              v23 -= 88;
            }
            while (v23);
          }
          *(_DWORD *)(a1 + 8) = 0;
          sub_1CD6122E4();
        }
        if (v6) {
          sub_1CC6DA3B4((uint64_t)v4, (uint64_t)&v4[88 * v6], *(void *)a1);
        }
        else {
          uint64_t v6 = 0;
        }
        unint64_t v7 = *(char **)a2;
        uint64_t v8 = *(unsigned int *)(a2 + 8);
        if (v6 != v8)
        {
          uint64_t v9 = *(void *)a1 + 88 * v6;
          uint64_t v10 = (uint64_t)&v7[88 * v6];
          uint64_t v11 = 88 * v8 - 88 * v6;
          do
          {
            uint64_t v12 = sub_1CD611324(v9, v10);
            v10 += 88;
            uint64_t v9 = v12 + 88;
            v11 -= 88;
          }
          while (v11);
          unint64_t v7 = *(char **)a2;
        }
        *(_DWORD *)(a1 + 8) = v5;
        unsigned int v13 = *(_DWORD *)(a2 + 8);
        if (v13)
        {
          uint64_t v14 = 88 * v13;
          uint64_t v15 = v7 - 88;
          do
          {
            sub_1CD6113D8(&v15[v14]);
            v14 -= 88;
          }
          while (v14);
        }
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      sub_1CD612504((char **)a1, (char **)a2);
    }
  }
  return a1;
}

double sub_1CD612504(char **a1, char **a2)
{
  unint64_t v4 = *a1;
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = 88 * v5;
    unint64_t v7 = v4 - 88;
    do
    {
      sub_1CD6113D8(&v7[v6]);
      v6 -= 88;
    }
    while (v6);
    unint64_t v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void *sub_1CD612584(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CD6125F4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
  unsigned int v5 = v8;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = sub_1CD6126E8(a1, a2, v8);
    uint64_t v7 = a2[1];
    *unsigned int v5 = *a2;
    v5[1] = v7;
    void v5[2] = 0;
  }
  return v5;
}

uint64_t sub_1CD6125F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = (37 * a4)
       + ~((unint64_t)(37 * a4) << 32)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v10 = (void *)(a1 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v12 == -2;
        }
        if (v18 && v11 == -8192) {
          uint64_t v16 = v10;
        }
        unsigned int v20 = v9 + v17++;
        unsigned int v9 = v20 & v8;
        uint64_t v10 = (void *)(a1 + 24 * (v20 & v8));
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        uint64_t v14 = 1;
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = 0;
      if (v16) {
        uint64_t v10 = v16;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

void *sub_1CD6126E8(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD6127A0(a1, v6);
  unsigned int v9 = 0;
  sub_1CD6125F4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_OWORD *sub_1CD6127A0(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  char v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD61287C(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *double result = xmmword_1CFB1B710;
      double result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD61287C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      _OWORD *v7 = xmmword_1CFB1B710;
      int v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    if ((*a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      uint64_t v15 = 0;
      double result = sub_1CD6125F4(*(void *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v15);
      unsigned int v13 = v15;
      uint64_t v14 = a2[1];
      *uint64_t v15 = *a2;
      v13[1] = v14;
      v13[2] = a2[2];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

unint64_t sub_1CD612948(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 40 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      sub_1CD6129B4();
    }
    sub_1CD6129B4();
  }
  return a2;
}

void sub_1CD6129B4()
{
}

unsigned int *sub_1CD612A24(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    unint64_t v4 = result;
    uint64_t v5 = *(void *)result;
    uint64_t v6 = 40 * v2;
    do
    {
      uint64_t v7 = *(void *)(v5 + 24);
      if (v7)
      {
        if (v5 == v7)
        {
          *(void *)(a2 + 24) = a2;
          double result = (unsigned int *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 24) + 24))(*(void *)(v5 + 24), a2);
        }
        else
        {
          *(void *)(a2 + 24) = v7;
          *(void *)(v5 + 24) = 0;
        }
      }
      else
      {
        *(void *)(a2 + 24) = 0;
      }
      int v8 = *(_DWORD *)(v5 + 32);
      *(unsigned char *)(a2 + 36) = *(unsigned char *)(v5 + 36);
      *(_DWORD *)(a2 + 32) = v8;
      v5 += 40;
      a2 += 40;
      v6 -= 40;
    }
    while (v6);
    uint64_t v9 = v4[2];
    if (v9)
    {
      uint64_t v10 = *(void *)v4;
      uint64_t v11 = 40 * v9;
      uint64_t v12 = v10 - 40;
      do
      {
        double result = *(unsigned int **)(v12 + v11 + 24);
        if ((unsigned int *)(v12 + v11) == result)
        {
          double result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)(v12 + v11) + 32))(v12 + v11);
        }
        else if (result)
        {
          double result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 40))(result);
        }
        v11 -= 40;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_1CD612B60(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EA61EFE3);
  void *v2 = &unk_1F261BB38;
  unsigned int v3 = (llvm::PassRegistry *)sub_1CC6DEB38((uint64_t)(v2 + 31));
  *(void *)(a1 + 616) = 0;
  *(unsigned char *)(a1 + 624) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD9B08, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CC6DD24C;
    v7[1] = &PassRegistry;
    uint64_t v6 = v7;
    std::__call_once(&qword_1EBCD9B08, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD612C20(uint64_t a1)
{
  sub_1CC6DD470(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t *sub_1CD612C58(uint64_t *a1, uint64_t a2)
{
  return a1;
}

void sub_1CD612C84(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

void sub_1CD612C90(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F261BB38;
  sub_1CC6DD470((uint64_t)a1 + 248);

  sub_1CBA0E6AC(a1);
}

void sub_1CD612CE4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F261BB38;
  sub_1CC6DD470((uint64_t)a1 + 248);
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD612D4C()
{
}

void sub_1CD612D88(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  llvm::APInt::byteSwap((llvm::APInt *)a1, (uint64_t)&v6);
  llvm::APInt::byteSwap((llvm::APInt *)(a1 + 16), (uint64_t)&v4);
  *(_DWORD *)(a2 + 8) = v7;
  *(void *)a2 = v6;
  *(_DWORD *)(a2 + 24) = v5;
  *(void *)(a2 + 16) = v4;
}

unsigned int *sub_1CD612DE8@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  llvm::APInt::reverseBits(a1, (llvm::APInt *)&v7);
  double result = llvm::APInt::reverseBits(a1 + 4, (llvm::APInt *)&v5);
  *(_DWORD *)(a2 + 8) = v8;
  *(void *)a2 = v7;
  *(_DWORD *)(a2 + 24) = v6;
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_1CD612E48(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

void sub_1CD612E54(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F261BC98;
  uint64_t v2 = *((void *)a1 + 31);
  *((void *)a1 + 31) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  sub_1CBA0E6AC(a1);
}

void sub_1CD612ED4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F261BC98;
  uint64_t v2 = *((void *)a1 + 31);
  *((void *)a1 + 31) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD612F7C()
{
}

uint64_t sub_1CD612FB8(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EA61EFE4);
  *(void *)uint64_t v2 = &unk_1F261BC98;
  *((void *)v2 + 31) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD9B10, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC6DEDEC;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCD9B10, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void *sub_1CD61306C(void *a1)
{
  *a1 = &unk_1F261CD58;
  uint64_t v4 = (unsigned __int8 *)a1[4];
  uint64_t v2 = (uint64_t)(a1 + 4);
  unsigned int v3 = v4;
  if (v4) {
    llvm::MetadataTracking::untrack(v2, v3);
  }
  return a1;
}

void *sub_1CD6130BC(uint64_t a1, void *a2, llvm::Type **a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)a2[1];
  uint64_t v8 = *(void *)(*v7 + 40);
  uint64_t v9 = (llvm::DataLayout *)(v8 + 272);
  uint64_t v10 = *a3;
  unint64_t v11 = *(unsigned int *)(v8 + 276);
  int v12 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem((llvm::DataLayout *)(v8 + 272), *(_DWORD *)(v8 + 276)) + 4);
  unsigned int v13 = (unsigned __int8 *)v7[7];
  unint64_t v14 = (unint64_t)(sub_1CB83544C((uint64_t)v9, (uint64_t)v10) + 7) >> 3;
  BOOL v16 = v15 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v9, v10, 1);
  if (v16)
  {
    char v27 = Alignment;
    char Alignment = v27;
  }
  uint64_t v19 = ((1 << Alignment) + v14 - 1) & -(1 << Alignment);
  PrefTypeAliguint64_t n = llvm::DataLayout::getPrefTypeAlign(v9, v10);
  int StackObject = llvm::MachineFrameInfo::CreateStackObject(v13, v19, PrefTypeAlign, 0, 0, 0);
  __int16 v30 = (llvm::Type *)(((v11 & 0xFFFFFF) << 19) | (8 * (unsigned __int16)v12) | 2);
  LODWORD(v31) = 0;
  sub_1CC735850(a2, (uint64_t *)&v30, StackObject);
  int v29 = *(_DWORD *)(*(void *)(v22 + 32) + 4);
  unint64_t v23 = llvm::PointerType::get(v10, (llvm::Type *)v11);
  sub_1CB925510((uint64_t)&v30, &v29, 1, v23, -1, 0, 0, 1, 0);
  sub_1CC6E710C(a1, &v30, 0, v9, (uint64_t)a3);
  *v31 |= 8u;
  uint64_t v25 = *(void *)(a4 + 192);
  uint64_t v24 = a4 + 192;
  sub_1CD613460(v24, v25, (unint64_t)&v30);
  *(_DWORD *)(v24 + 4940) = StackObject;
  *(_DWORD *)(v24 + 4936) = v29;
  return sub_1CC6EA9DC(&v30);
}

uint64_t sub_1CD6132AC(uint64_t a1, int a2)
{
  uint64_t result = llvm::AttributeList::getParamInAllocaType((llvm::AttributeList *)(a1 + 64), a2);
  if (!result)
  {
    uint64_t v5 = *(void *)(a1 - 32);
    if (v5 && !*(unsigned char *)(v5 + 16) && *(void *)(v5 + 24) == *(void *)(a1 + 72))
    {
      uint64_t v6 = *(void *)(v5 + 112);
      return llvm::AttributeList::getParamInAllocaType((llvm::AttributeList *)&v6, a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CD613324(uint64_t a1, int a2)
{
  uint64_t result = llvm::AttributeList::getParamPreallocatedType((llvm::AttributeList *)(a1 + 64), a2);
  if (!result)
  {
    uint64_t v5 = *(void *)(a1 - 32);
    if (v5 && !*(unsigned char *)(v5 + 16) && *(void *)(v5 + 24) == *(void *)(a1 + 72))
    {
      uint64_t v6 = *(void *)(v5 + 112);
      return llvm::AttributeList::getParamPreallocatedType((llvm::AttributeList *)&v6, a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1CD6133A0(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  if ((*a1 & 0xFFFFFFFFFFFFFFF9) == 0 || (*a1 & 4) == 0) {
    return a2;
  }
  uint64_t v5 = 0x800000000000000;
  if ((v2 & 2) == 0) {
    uint64_t v5 = 0x8000000000000;
  }
  return sub_1CBA5A95C((unsigned __int16)(v2 >> 3) | ((unint64_t)((v5 & v2) != 0) << 32), a2);
}

unint64_t sub_1CD6133E4(unint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  if ((*a1 & 0xFFFFFFFFFFFFFFF9) != 0 && (*a1 & 4) != 0) {
    uint64_t v3 = sub_1CBA15978(a1);
  }
  if (HIDWORD(a2) != 1 && a2 == 1) {
    return v3;
  }

  return sub_1CBA5A95C(a2, v3);
}

uint64_t sub_1CD613460(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)a1 + 152 * *(unsigned int *)(a1 + 8) == a2)
  {
    unint64_t v16 = sub_1CB927410(a1, a3, 1);
    uint64_t result = sub_1CC6EAD34(*(void *)a1 + 152 * *(unsigned int *)(a1 + 8), v16);
    ++*(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v4 = a2 - *(void *)a1;
    unint64_t v5 = sub_1CB927410(a1, a3, 1);
    unint64_t v6 = *(void *)a1 + v4;
    uint64_t v7 = *(void *)a1 + 152 * *(unsigned int *)(a1 + 8);
    sub_1CC6EAC74(v7, v7 - 152);
    uint64_t v8 = *(void *)a1 + 152 * *(unsigned int *)(a1 + 8);
    sub_1CC6EB014(v6, v8 - 152, v8);
    unsigned int v9 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v9;
    unint64_t v10 = *(void *)a1 + 152 * v9;
    BOOL v12 = v5 >= v6 && v5 < v10;
    unint64_t v13 = v5 + 152 * v12;
    *(void *)unint64_t v6 = *(void *)v13;
    sub_1CB927924(v6 + 8, v13 + 8);
    *(unsigned char *)(v6 + 72) = *(unsigned char *)(v13 + 72);
    sub_1CB927A18(v6 + 80, v13 + 80);
    uint64_t result = sub_1CB927A18(v6 + 112, v13 + 112);
    int v15 = *(_DWORD *)(v13 + 144);
    *(void *)(v6 + 136) = *(void *)(v13 + 136);
    *(_DWORD *)(v6 + 144) = v15;
  }
  return result;
}

void sub_1CD613588(uint64_t a1)
{
  sub_1CD614248(a1);
  sub_1CD6178F4(a1);
  sub_1CD62ADB0(a1);
  sub_1CD62C740(a1);
  sub_1CD62E510(a1);

  sub_1CD616E70(a1);
}

unint64_t *sub_1CD6135E0(uint64_t *a1, llvm::MachineInstr *a2, int a3, int *a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unsigned int v10 = *(_DWORD *)(*((void *)a2 + 4) + 4);
  uint64_t v11 = *a1;
  *(void *)(v11 + 40) = *((void *)a2 + 3);
  *(void *)(v11 + 48) = a2;
  unsigned int v12 = llvm::MachineRegisterInfo::cloneVirtualRegister(a1[1], v10, (unsigned __int8 *)&unk_1CFBE0C25, 0);
  uint64_t v13 = *a1;
  v15[0] = v12;
  v15[2] = 1;
  if (a3) {
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, void, void, void))(*(void *)v13 + 32))(v13, 68, v15, 1, 0, 0, 0);
  }
  else {
    sub_1CC738CA0(v13, (uint64_t)v15, a4, a5);
  }
  llvm::MachineInstr::eraseFromParent(a2);
  return sub_1CC6EC690(a1, (void *)a1[1], v10, v12);
}

BOOL sub_1CD613714(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if ((v1 & 7) != 0)
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v1 &= 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 48) = v1;
    uint64_t v2 = v1;
  }
  if ((*(_WORD *)(v2 + 36) & 0xF00) != 0) {
    return 0;
  }
  if ((v1 & 3) != 0)
  {
    unint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v4 = v1 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 48) = v4;
  }
  return (*(_WORD *)(v4 + 32) & 4) == 0;
}

uint64_t sub_1CD613778(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if ((v1 & 7) != 0)
  {
    unint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 48) = v1 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v3 = (unint64_t *)(v2 + 24);
  if ((v4 & 0xFFFFFFFFFFFFFFF9) == 0) {
    return -1;
  }
  uint64_t result = sub_1CB8F1DC4(v3);
  if (v6 == 1)
  {
    uint64_t v8 = result;
    return v8;
  }
  return result;
}

uint64_t sub_1CD6137F0(void ***a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    return sub_1CD430B68(a1, a2, a3);
  }
  if (*(void *)(a2 + 24) == *(void *)(a3 + 24)) {
    return sub_1CC6EDEA4(a2, a3);
  }
  return 0;
}

uint64_t sub_1CD61381C(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 16);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 120))(v10);
  unsigned int v12 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
  __int16 v30 = a4;
  *a4 = v12;
  uint64_t UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(void *)(a1 + 8), v12);
  if (!UniqueVRegDef || **(_WORD **)(UniqueVRegDef + 16) != 70)
  {
    uint64_t v14 = sub_1CBB36200(*(void *)(a1 + 8), *a4);
    if (v14 != v15)
    {
      uint64_t v16 = v14;
      uint64_t v17 = v15;
      do
      {
        uint64_t v18 = *(void *)(v16 + 8);
        if (**(_WORD **)(v18 + 16) != 193) {
          goto LABEL_8;
        }
        unsigned int v19 = *(_DWORD *)(*(void *)(v18 + 32) + 68);
        *a5 = v19;
        if (!byte_1EBD06F60)
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v11 + 1544))(v11, a2, *v30)) {
            goto LABEL_8;
          }
          unsigned int v19 = *a5;
        }
        uint64_t v20 = llvm::MachineRegisterInfo::getUniqueVRegDef(*(void *)(a1 + 8), v19);
        if (v20 && sub_1CD6137F0(*(void ****)(a1 + 32), v20, a2))
        {
          uint64_t v22 = sub_1CBB36200(*(void *)(a1 + 8), *(_DWORD *)(*(void *)(v18 + 32) + 4));
          uint64_t v29 = v23;
          if (v22 == v23)
          {
LABEL_26:
            *a3 = *(_DWORD *)(*(void *)(v18 + 32) + 4);
            return 1;
          }
          uint64_t v24 = v22;
          int v25 = 1;
          while (1)
          {
            int v26 = sub_1CD6137F0(*(void ****)(a1 + 32), a2, *(void *)(v24 + 8));
            if (!v26) {
              break;
            }
            v25 &= v26;
            uint64_t v27 = *(void *)(v24 + 8);
            do
              uint64_t v24 = *(void *)(v24 + 24);
            while (v24 && ((*(_DWORD *)v24 & 0x81000000) != 0 || *(void *)(v24 + 8) == v27));
            if (v24 == v29)
            {
              if (!v25) {
                break;
              }
              goto LABEL_26;
            }
          }
        }
LABEL_8:
        uint64_t v21 = *(void *)(v16 + 8);
        do
          uint64_t v16 = *(void *)(v16 + 24);
        while (v16 && ((*(_DWORD *)v16 & 0x81000000) != 0 || *(void *)(v16 + 8) == v21));
      }
      while (v16 != v17);
    }
  }
  return 0;
}

uint64_t sub_1CD613A58(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, _DWORD *a5)
{
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 16);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 120))(v10);
  unsigned int v12 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
  *a3 = v12;
  uint64_t result = sub_1CC73D838(193, v12, *(void *)(a1 + 8));
  if (result)
  {
    uint64_t v14 = result;
    if (llvm::MachineRegisterInfo::hasOneNonDBGUse(*(void *)(a1 + 8), *a3)) {
      return 0;
    }
    uint64_t v15 = *(void *)(v14 + 32);
    *a4 = *(_DWORD *)(v15 + 36);
    *a5 = *(_DWORD *)(v15 + 68);
    if (byte_1EBD06F60
      || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v11 + 1544))(v11, a2, *a4),
          result))
    {
      if (**(_WORD **)(sub_1CC73D73C(*a4, *(void *)(a1 + 8)) + 16) == 70) {
        return 0;
      }
      unsigned int v16 = *a3;
      if (**(_WORD **)(a2 + 16) != 96
        || (result = 0, int v17 = *(_DWORD *)(*(void *)(a2 + 32) + 4), *a4 != v17) && v17 != v16)
      {
        uint64_t v18 = sub_1CBB36200(*(void *)(a1 + 8), v16);
        if (v18 == v19)
        {
          return 1;
        }
        else
        {
          uint64_t v20 = v18;
          uint64_t v21 = v19;
          do
          {
            uint64_t result = sub_1CD6137F0(*(void ****)(a1 + 32), a2, *(void *)(v20 + 8));
            if (!result) {
              break;
            }
            uint64_t v22 = *(void *)(v20 + 8);
            do
              uint64_t v20 = *(void *)(v20 + 24);
            while (v20 && ((*(unsigned char *)(v20 + 3) & 0x81) != 0 || *(void *)(v20 + 8) == v22));
          }
          while (v20 != v21);
        }
      }
    }
  }
  return result;
}

void sub_1CD613C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t UniqueVRegDef = (llvm::MachineInstr *)llvm::MachineRegisterInfo::getUniqueVRegDef(*(void *)(a1 + 8), *(_DWORD *)a3);
  sub_1CBA05F5C((uint64_t)v19, a2);
  int v6 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v7 = sub_1CC734F48(v19, dword_1CFB1CA58[(__int16)(v6 - 90)]);
  uint64_t v10 = (llvm::MachineFunction *)sub_1CC734FCC(v19, (uint64_t)v7, v8);
  uint64_t v11 = v9;
  if (v6 == 96)
  {
    unsigned int v12 = *(_DWORD *)a3;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v21 = 0x1000000;
    unsigned int v22 = v12;
    llvm::MachineInstr::addOperand(v9, v10, (const llvm::MachineOperand *)&v21);
    unsigned int v13 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v21 = 0;
    unsigned int v22 = v13;
    uint64_t v25 = 0;
  }
  else
  {
    unsigned int v14 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v21 = 0x1000000;
    unsigned int v22 = v14;
    llvm::MachineInstr::addOperand(v9, v10, (const llvm::MachineOperand *)&v21);
    unsigned int v15 = *(_DWORD *)a3;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v21 = 0x1000000;
    unsigned int v22 = v15;
  }
  llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v21);
  unsigned int v16 = *(_DWORD *)(a3 + 4);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v21 = 0;
  unsigned int v22 = v16;
  uint64_t v25 = 0;
  llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v21);
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v21 = 0;
  unsigned int v22 = v17;
  uint64_t v25 = 0;
  llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v21);
  uint64_t v18 = *(unsigned __int8 *)(a3 + 12);
  int v21 = 1;
  uint64_t v23 = 0;
  uint64_t v24 = v18;
  llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v21);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  llvm::MachineInstr::eraseFromParent(UniqueVRegDef);
  v19[0] = &unk_1F261CD58;
  if (v20) {
    llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
  }
}

uint64_t sub_1CD613DEC(void *a1, uint64_t *a2, long long *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2;
  if (!v6) {
    goto LABEL_8;
  }
  if (v6 != 2)
  {
    uint64_t v8 = a1[3];
    if ((*(_DWORD *)a2 & 0x80000000) != 0)
    {
      uint64_t v13 = *(_DWORD *)a2 & 0x7FFFFFFF;
      if (v13 < *(_DWORD *)(v8 + 432))
      {
        uint64_t v7 = (uint64_t *)(*(void *)(v8 + 424) + 8 * v13);
LABEL_8:
        uint64_t v9 = *v7;
        goto LABEL_5;
      }
    }
  }
  uint64_t v9 = 0;
LABEL_5:
  *(void *)&long long v14 = v9;
  DWORD2(v14) = 0;
  uint64_t v10 = sub_1CC7362A8((uint64_t)a1, (unint64_t *)&v14, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v19 = *a2;
  int v20 = *((_DWORD *)a2 + 2);
  long long v14 = *a3;
  int v15 = *((_DWORD *)a3 + 4);
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  int v18 = 1;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*a1 + 32))(a1, 67, &v19, 1, &v14, 2, 0);
}

unint64_t sub_1CD613F18(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 96))
  {
    sub_1CD6140B4((uint64_t **)(a1 + 80), a2, (uint64_t **)a2);
    return ((unint64_t)v9 << 32) | 1;
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    uint64_t v5 = *a2;
    if (v4)
    {
      uint64_t v6 = 8 * v4;
      uint64_t v7 = *(void **)a1;
      while (*v7 != v5)
      {
        ++v7;
        v6 -= 8;
        if (!v6) {
          goto LABEL_6;
        }
      }
      if (v6) {
        return 1;
      }
LABEL_6:
      if (v4 <= 7) {
        goto LABEL_7;
      }
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)a1 + 8 * v4 - 8);
        sub_1CD6140B4((uint64_t **)(a1 + 80), v10, (uint64_t **)v10);
        LODWORD(v4) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v4;
      }
      while (v4);
      sub_1CD6140B4((uint64_t **)(a1 + 80), a2, (uint64_t **)a2);
    }
    else
    {
LABEL_7:
      if (v4 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a1 + 8 * v4) = v5;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

uint64_t sub_1CD61402C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = llvm::MachineRegisterInfo::getVRegDef(a2, *a3);
  if (result)
  {
    if (**(_WORD **)(result + 16) == 193
      && *(_DWORD *)(result + 40) == 3
      && (uint64_t v6 = *(void *)(result + 32),
          **(_DWORD **)a1 = *(_DWORD *)(v6 + 36),
          unint64_t v7 = sub_1CC73C9C0(*(_DWORD *)(v6 + 68), a2),
          v8))
    {
      **(void **)(a1 + 8) = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t **sub_1CD6140B4(uint64_t **a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    uint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        char v8 = (uint64_t **)v5;
        uint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)v8;
    char v8 = (uint64_t **)operator new(0x28uLL);
    v8[4] = *a3;
    *char v8 = 0;
    v8[1] = 0;
    __n128 v8[2] = v10;
    *uint64_t v6 = (uint64_t *)v8;
    uint64_t v11 = (uint64_t *)**a1;
    unsigned int v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      unsigned int v12 = *v6;
    }
    sub_1CB8358B8(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

uint64_t sub_1CD614194(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v3 = *(void **)result;
  unint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *(unsigned int *)(result + 8);
  }
  if (v5)
  {
    uint64_t v6 = *(void **)result;
    do
    {
      *v6++ = a3;
      --v5;
    }
    while (v5);
  }
  unint64_t v7 = v4 - a2;
  if (v4 < a2)
  {
    char v8 = &v3[v4];
    do
      *v8++ = a3;
    while (!__CFADD__(v7++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_1CD614248(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD9BF8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC6EE89C;
    v3[1] = &v1;
    unint64_t v2 = v3;
    std::__call_once(&qword_1EBCD9BF8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t sub_1CD6142B8(uint64_t a1, int a2)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EA61BF40);
  *(void *)uint64_t v4 = &unk_1F261BEF0;
  *(_OWORD *)(v4 + 256) = 0u;
  *(void *)(v4 + 272) = v4 + 288;
  *(void *)(v4 + 280) = 0x400000000;
  *(void *)(v4 + 320) = v4 + 336;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(void *)(v4 + 360) = 0;
  *(void *)(v4 + 368) = v4 + 384;
  *(void *)(v4 + 376) = 0x400000000;
  *(void *)(v4 + 416) = v4 + 432;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 452) = 0u;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_DWORD *)(v4 + 488) = 0;
  *(_DWORD *)(v4 + 512) = 0;
  *(_OWORD *)(v4 + 496) = 0u;
  *(_DWORD *)(v4 + 536) = 0;
  *(_OWORD *)(v4 + 520) = 0u;
  *(void *)(v4 + 544) = v4 + 560;
  *(void *)(v4 + 552) = 0x400000000;
  *(_DWORD *)(v4 + 704) = 0;
  *(_OWORD *)(v4 + 688) = 0u;
  *(_DWORD *)(v4 + 760) = 0;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_DWORD *)(v4 + 784) = 0;
  *(_OWORD *)(v4 + 768) = 0u;
  *(_DWORD *)(v4 + 808) = 0;
  *(_OWORD *)(v4 + 792) = 0u;
  *(void *)(v4 + 824) = v4 + 840;
  *(void *)(v4 + 832) = 0x100000000;
  *(void *)(v4 + 872) = 0;
  *(_OWORD *)(v4 + 848) = 0u;
  *(_DWORD *)(v4 + 896) = a2;
  *(void *)(a1 + 904) = 0;
  sub_1CC702B9C(v4 + 912);
  *(_WORD *)(a1 + 1760) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  return a1;
}

void sub_1CD6143E4(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::StackProtector::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE3);
  if (*(_DWORD *)(a1 + 896)) {
    llvm::AnalysisUsage::addRequiredID(this, llvm::BranchProbabilityInfoWrapperPass::ID);
  }
  llvm::AnalysisUsage::addRequiredID(this, llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1CD632034((uint64_t)this);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

void sub_1CD61449C(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, void *a5, int a6, unsigned int a7, uint64_t a8, unsigned __int8 a9)
{
  int v17 = a9;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 0;
  uint64_t v35 = &v34;
  uint64_t v18 = *(void *)(a2 + 8);
  if (v18
    && !*(void *)(v18 + 8)
    && (v29 = sub_1CBF686A0((void **)&v35, 30, a2), int v17 = a9, v29)
    && (!v34 || *(unsigned __int8 *)(v34 + 16) < 0x1Cu || *(void *)(v34 + 40) == a5[2]))
  {
    sub_1CD61449C(a1);
  }
  else
  {
    unsigned int v19 = *(unsigned __int8 *)(a2 + 16);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    if (v19 < 0x1C) {
      goto LABEL_4;
    }
    int v30 = v17;
    uint64_t v35 = &v33;
    uint64_t v36 = (uint64_t)&v32;
    if (sub_1CC185750((void **)&v35, (uint64_t *)a2))
    {
      int v17 = v30;
      int v20 = v30 ? 29 : 28;
    }
    else
    {
      v31[0] = &v33;
      v31[1] = &v32;
      int v21 = sub_1CC185634(v31, (uint64_t *)a2);
      if (v21) {
        int v20 = 29;
      }
      else {
        int v20 = 0;
      }
      if (v21) {
        int v22 = 28;
      }
      else {
        int v22 = 0;
      }
      int v17 = v30;
      if (v30) {
        int v20 = v22;
      }
    }
    if ((int v23 = a6, v20)
      && v20 == a6
      && (uint64_t v24 = *(void *)(a2 + 8)) != 0
      && !*(void *)(v24 + 8)
      && (uint64_t v25 = *(const llvm::BasicBlock **)(a2 + 40), v25 == (const llvm::BasicBlock *)a5[2])
      && (!v33 || *(unsigned __int8 *)(v33 + 16) < 0x1Cu || *(const llvm::BasicBlock **)(v33 + 40) == v25)
      && (!v32 || *(unsigned __int8 *)(v32 + 16) < 0x1Cu || *(const llvm::BasicBlock **)(v32 + 40) == v25))
    {
      MachineBasicBlocuint64_t k = (void *)llvm::MachineFunction::CreateMachineBasicBlock(*(llvm::MachineFunction **)(a1 + 864), v25);
      uint64_t v27 = (uint64_t *)a5[1];
      llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(a5[4] + 320, (uint64_t)MachineBasicBlock);
      uint64_t v28 = *v27;
      *MachineBasicBlocuint64_t k = *v27;
      MachineBasicBlock[1] = v27;
      *(void *)(v28 + 8) = MachineBasicBlock;
      *uint64_t v27 = (uint64_t)MachineBasicBlock;
      sub_1CD61449C(a1);
      uint64_t v35 = &v37;
      if (v23 == 29) {
        unint64_t v37 = (a7 >> 1) | (unint64_t)(a8 << 32);
      }
      else {
        unint64_t v37 = a7 | ((unint64_t)(a8 >> 1) << 32);
      }
      uint64_t v36 = 0x200000002;
      sub_1CD55DE24((unsigned int *)&v37, (unsigned int *)&v38);
      sub_1CD61449C(a1);
      if (v35 != &v37) {
        free(v35);
      }
    }
    else
    {
LABEL_4:
      sub_1CC6F25D0(a1, a2, a3, a4, (uint64_t)a5, a7, a8, v17);
    }
  }
}

BOOL sub_1CD614848(int **a1)
{
  uint64_t v1 = *a1;
  if ((char *)a1[1] - (char *)*a1 != 176) {
    return 1;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)v1 + 1);
  uint64_t v4 = (unsigned __int8 *)*((void *)v1 + 12);
  unint64_t v5 = (unsigned __int8 *)*((void *)v1 + 3);
  uint64_t v6 = (unsigned __int8 *)*((void *)v1 + 14);
  if (v3 == v4 && v5 == v6) {
    return 0;
  }
  if (v5 == v4 && v3 == v6) {
    return 0;
  }
  if (v5 != v6 || *v1 != v1[22] || v5[16] > 0x14u || !llvm::Constant::isNullValue((llvm::Constant *)v5)) {
    return 1;
  }
  uint64_t v10 = *a1;
  int v11 = **a1;
  if (v11 != 33)
  {
    if (v11 == 32)
    {
      uint64_t v12 = *((void *)v10 + 4);
      return v12 != *((void *)v10 + 17);
    }
    return 1;
  }
  uint64_t v12 = *((void *)v10 + 5);
  return v12 != *((void *)v10 + 17);
}

llvm::MachineFunction *sub_1CD614908(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v12 = &unk_1F261CD58;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  sub_1CC734E30(&v12, v6);
  *(void *)&long long v15 = a3;
  *((void *)&v15 + 1) = a3 + 48;
  sub_1CB896804((unsigned __int8 **)&v14 + 1, (unsigned __int8 **)(*(void *)(a1 + 848) + 32));
  Int8PtrTy = (llvm *)llvm::Type::getInt8PtrTy(****(llvm::Type *****)(a1 + 864), 0);
  unint64_t LLTForType = llvm::getLLTForType(Int8PtrTy, *(llvm::Type **)(a1 + 880), v8);
  sub_1CD62D13C((uint64_t)&v12, LLTForType, a2[1]);
  uint64_t result = sub_1CD62D6C4((uint64_t)&v12, *(_DWORD *)(*(void *)(v10 + 32) + 4), a2[1], *a2);
  uint64_t v12 = &unk_1F261CD58;
  if (*((void *)&v14 + 1)) {
    return (llvm::MachineFunction *)llvm::MetadataTracking::untrack((uint64_t)&v14 + 8, *((unsigned __int8 **)&v14 + 1));
  }
  return result;
}

uint64_t sub_1CD6149F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a4 + 32);
  uint64_t v44 = (llvm::ConstantInt ****)&unk_1F261CD58;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  sub_1CC734E30(&v44, v8);
  *(void *)&long long v47 = a4;
  *((void *)&v47 + 1) = a4 + 48;
  sub_1CB896804((unsigned __int8 **)&v46 + 1, (unsigned __int8 **)(*(void *)(a1 + 848) + 32));
  uint64_t v9 = *(llvm ***)(a3 + 32);
  unint64_t LLTForType = llvm::getLLTForType(*v9, *(llvm::Type **)(a1 + 880), v10);
  uint64_t v12 = (int *)sub_1CC6EF0A4(a1, v9);
  if (v13) {
    int v14 = *v12;
  }
  else {
    int v14 = 0;
  }
  *(void *)&long long v51 = LLTForType;
  DWORD2(v51) = 0;
  uint64_t v15 = sub_1CC737454(&v44, (uint64_t)&v51, (llvm::LLVMContext *)a3);
  *(void *)&long long v49 = LLTForType;
  DWORD2(v49) = 0;
  LODWORD(v51) = v14;
  int v52 = 0;
  uint64_t v53 = v15;
  uint64_t v54 = v16;
  int v55 = 1;
  uint64_t v17 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))v44[4])(&v44, 46, &v49, 1, &v51, 2, 0);
  uint64_t v19 = v18;
  uint64_t PointerTo = llvm::Type::getPointerTo(*v9, 0);
  unsigned int v21 = sub_1CB83544C(*(void *)(a1 + 880), PointerTo);
  if (v22 == 1)
  {
    unsigned int v39 = v21;
    unsigned int v21 = v39;
  }
  uint64_t v23 = (8 * v21) | 1;
  *(void *)&long long v49 = v23;
  DWORD2(v49) = 0;
  *(void *)&long long v51 = v17;
  *((void *)&v51 + 1) = v19;
  int v52 = 1;
  uint64_t result = sub_1CC738034(&v44, 126, (unint64_t *)&v49, (int *)&v51);
  *(_DWORD *)a2 = *(_DWORD *)(*(void *)(v25 + 32) + 4);
  if (!*(unsigned char *)(a3 + 49))
  {
    uint64_t v28 = result;
    uint64_t v29 = v25;
    int v30 = *v9;
    unsigned int v43 = *(_DWORD *)(a3 + 24);
    if (v43 > 0x40) {
      operator new[]();
    }
    uint64_t v42 = *(void *)(a3 + 16);
    llvm::APInt::operator-=((uint64_t)&v42, (unint64_t **)a3);
    DWORD2(v51) = v43;
    *(void *)&long long v51 = v42;
    unsigned int v43 = 0;
    uint64_t v32 = llvm::ConstantInt::get((llvm::ConstantInt **)v30, (llvm::Type *)&v51, v31);
    uint64_t v33 = (int *)sub_1CC6EF0A4(a1, v32);
    if (v34) {
      int v35 = *v33;
    }
    else {
      int v35 = 0;
    }
    if (DWORD2(v51) >= 0x41 && (void)v51) {
      MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
    }
    if (v43 >= 0x41 && v42) {
      MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
    }
    *(void *)&long long v49 = v23;
    DWORD2(v49) = 0;
    LODWORD(v51) = v35;
    int v52 = 0;
    sub_1CC738034(&v44, 126, (unint64_t *)&v49, (int *)&v51);
    int v37 = *(_DWORD *)(*(void *)(v36 + 32) + 4);
    uint64_t v40 = 9;
    int v41 = 0;
    *(void *)&long long v51 = v28;
    *((void *)&v51 + 1) = v29;
    int v52 = 1;
    LODWORD(v49) = v37;
    int v50 = 0;
    sub_1CC73933C((uint64_t)&v44, 34, (uint64_t)&v40, &v51, &v49);
    LODWORD(v51) = *(_DWORD *)(*(void *)(v38 + 32) + 4);
    int v52 = 0;
    uint64_t result = (uint64_t)sub_1CC7376D4(&v44, (int *)&v51, *(void *)(a2 + 16));
  }
  int v26 = *(unsigned __int8 **)(a2 + 8);
  if (*(void *)(a4 + 8) == *(void *)(a4 + 32) + 320) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = *(unsigned __int8 **)(a4 + 8);
  }
  if (v26 != v27) {
    uint64_t result = (uint64_t)sub_1CC73677C(&v44, v26);
  }
  uint64_t v44 = (llvm::ConstantInt ****)&unk_1F261CD58;
  if (*((void *)&v46 + 1)) {
    return llvm::MetadataTracking::untrack((uint64_t)&v46 + 8, *((unsigned __int8 **)&v46 + 1));
  }
  return result;
}

uint64_t sub_1CD614DBC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned int a7, uint64_t a8, llvm::MachineBasicBlock *a9, char a10)
{
  uint64_t v28 = *(void *)(*(void *)(a1 + 1792) + 32);
  unsigned int v29 = *(_DWORD *)(a8 + 24);
  uint64_t v30 = v28 + 80 * v29;
  uint64_t v18 = *(void *)(v30 + 64);
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(void *)(a3 + 32) + 320, v18);
  uint64_t v19 = *a6;
  *(void *)uint64_t v18 = *a6;
  *(void *)(v18 + 8) = a6;
  *(void *)(v19 + 8) = v18;
  *a6 = v18;
  unsigned int v31 = (llvm::MachineBasicBlock *)a4;
  sub_1CC6F1ABC(a1, *(void *)(a3 + 16), *(void *)(a5 + 16), a4);
  sub_1CC6F1ABC(a1, *(void *)(a3 + 16), *(void *)(a5 + 16), v18);
  unsigned int v20 = *(_DWORD *)(a8 + 32);
  uint64_t v21 = *(void *)(v18 + 88);
  uint64_t v22 = *(void *)(v18 + 96);
  if (v21 != v22)
  {
    uint64_t v23 = a2 >> 1;
    uint64_t v24 = *(void *)(v18 + 88);
    do
    {
      if (*(void *)v24 == a5)
      {
        if (v23 + (unint64_t)v20 <= 0x80000000) {
          v20 += v23;
        }
        else {
          unsigned int v20 = 0x80000000;
        }
        if (a7 >= v23) {
          a7 -= v23;
        }
        else {
          a7 = 0;
        }
        llvm::MachineBasicBlock::setSuccProbability((void *)v18, v21, v23);
        sub_1CC2BE0A8(*(unsigned int **)(v18 + 112), *(unsigned int **)(v18 + 120));
      }
      else
      {
        sub_1CC6F1ABC(a1, *(void *)(a3 + 16), *(void *)(*(void *)v24 + 16), v18);
      }
      v24 += 8;
      v21 += 8;
    }
    while (v24 != v22);
  }
  if (a10)
  {
    uint64_t v26 = v28 + 80 * v29;
    uint64_t v25 = (unsigned int **)v31;
    *(unsigned char *)(v30 + 49) = 1;
  }
  else
  {
    uint64_t v26 = v28 + 80 * v29;
    uint64_t v25 = (unsigned int **)v31;
    if (!*(unsigned char *)(v30 + 49)) {
      sub_1CC6F3FE0(*(void *)(a1 + 944), v31, a9, a7);
    }
  }
  sub_1CC6F3FE0(*(void *)(a1 + 944), (llvm::MachineBasicBlock *)v25, (llvm::MachineBasicBlock *)v18, v20);
  uint64_t result = (uint64_t)sub_1CC2BE0A8(v25[14], v25[15]);
  *(void *)(v26 + 40) = v25;
  *(void *)(v28 + 80 * v29 + 72) = a9;
  if (v25 == (unsigned int **)a3)
  {
    uint64_t result = sub_1CD6149F8(a1, v26 + 56, v26, a3);
    *(unsigned char *)(v26 + 48) = 1;
  }
  return result;
}

llvm::MachineFunction *sub_1CD614FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 848);
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 48) = a3 + 48;
  unint64_t v7 = (int *)sub_1CC6EF0A4(a1, *(void *)(a2 + 32));
  if (v8)
  {
    int v9 = *v7;
    if (*v7 < 0)
    {
      uint64_t v10 = *(void *)(a1 + 872);
      if ((v9 & 0x7FFFFFFFu) < *(_DWORD *)(v10 + 432))
      {
        unint64_t v11 = *(void *)(*(void *)(v10 + 424) + 8 * (v9 & 0x7FFFFFFF));
        goto LABEL_7;
      }
    }
  }
  else
  {
    int v9 = 0;
  }
  unint64_t v11 = 0;
LABEL_7:
  unint64_t v48 = v11;
  *(void *)&long long v51 = v11;
  DWORD2(v51) = 0;
  sub_1CC737454((llvm::ConstantInt *****)v6, (uint64_t)&v51, (llvm::LLVMContext *)a2);
  int v13 = *(_DWORD *)(*(void *)(v12 + 32) + 4);
  *(void *)&long long v49 = v11;
  DWORD2(v49) = 0;
  LODWORD(v51) = v9;
  int v52 = 0;
  int v53 = v13;
  int v54 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v6 + 32))(v6, 46, &v49, 1, &v51, 2, 0);
  uint64_t v16 = v15;
  Int8PtrTy = (llvm *)llvm::Type::getInt8PtrTy(****(llvm::Type *****)(a1 + 864), 0);
  unint64_t LLTForType = llvm::getLLTForType(Int8PtrTy, *(llvm::Type **)(a1 + 880), v18);
  uint64_t v46 = v11;
  unint64_t v47 = LLTForType;
  unint64_t v21 = sub_1CB8F1DC4((unint64_t *)&v46);
  if (v20 == 1) {
  unint64_t v22 = sub_1CB8F1DC4(&v47);
  }
  if (v23 == 1)
  {
    unint64_t v43 = v22;
    unint64_t v22 = v43;
  }
  if (v21 <= v22)
  {
    unsigned int v36 = sub_1CB8F1DC4((unint64_t *)&v46);
    if (v35 == 1) {
    uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
    }
    v37.i16[0] = vaddlv_u8(v37);
    if (v37.i32[0] == 1)
    {
      uint64_t v38 = *(unsigned int *)(a2 + 72);
      if (!v38) {
        goto LABEL_15;
      }
      uint64_t v39 = 0;
      uint64_t v40 = 32 * v38;
      while (1)
      {
        int v42 = sub_1CB8F1DC4(&v48);
        if (v41 == 1) {
        if ((v42 & 0xFFFFFFC0) == 0 && 0xFFFFFFFFFFFFFFFFLL >> -(char)v42 < *(void *)(*(void *)(a2 + 64) + v39))
        }
          break;
        v39 += 32;
        if (v40 == v39) {
          goto LABEL_15;
        }
      }
    }
  }
  unsigned int v25 = sub_1CB8F1DC4(&v47);
  if (v24 == 1) {
  uint64_t v46 = (8 * v25) | 1;
  }
LABEL_15:
  int v26 = *(_DWORD *)(*(void *)(v16 + 32) + 4);
  unint64_t v27 = v48;
  if (v48 != v46)
  {
    *(void *)&long long v49 = v46;
    DWORD2(v49) = 0;
    LODWORD(v51) = v26;
    int v52 = 0;
    sub_1CC738034((void *)v6, 126, (unint64_t *)&v49, (int *)&v51);
    int v26 = *(_DWORD *)(*(void *)(v28 + 32) + 4);
    unint64_t v27 = v46;
  }
  *(unsigned char *)(a2 + 44) = llvm::getMVTForLLT(v27);
  *(_DWORD *)(a2 + 40) = v26;
  unsigned int v29 = *(llvm::MachineBasicBlock **)(*(void *)(a2 + 64) + 8);
  if (!*(unsigned char *)(a2 + 184)) {
    sub_1CC6F3FE0(*(void *)(a1 + 944), (llvm::MachineBasicBlock *)a3, *(llvm::MachineBasicBlock **)(a2 + 56), *(_DWORD *)(a2 + 180));
  }
  sub_1CC6F3FE0(*(void *)(a1 + 944), (llvm::MachineBasicBlock *)a3, v29, *(_DWORD *)(a2 + 176));
  uint64_t result = (llvm::MachineFunction *)sub_1CC2BE0A8(*(unsigned int **)(a3 + 112), *(unsigned int **)(a3 + 120));
  if (!*(unsigned char *)(a2 + 184))
  {
    *(void *)&long long v51 = v48;
    DWORD2(v51) = 0;
    uint64_t v31 = sub_1CC737454((llvm::ConstantInt *****)v6, (uint64_t)&v51, (llvm::LLVMContext *)(a2 + 16));
    uint64_t v44 = 9;
    int v45 = 0;
    *(void *)&long long v51 = v14;
    *((void *)&v51 + 1) = v16;
    int v52 = 1;
    *(void *)&long long v49 = v31;
    *((void *)&v49 + 1) = v32;
    int v50 = 1;
    *(void *)&long long v51 = sub_1CC73933C(v6, 34, (uint64_t)&v44, &v51, &v49);
    *((void *)&v51 + 1) = v33;
    int v52 = 1;
    uint64_t result = sub_1CC7376D4((void *)v6, (int *)&v51, *(void *)(a2 + 56));
  }
  if (*(void *)(a3 + 8) == *(void *)(a3 + 32) + 320) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = *(llvm::MachineBasicBlock **)(a3 + 8);
  }
  if (v29 != v34) {
    return sub_1CC73677C((void *)v6, (unsigned __int8 *)v29);
  }
  return result;
}

llvm::MachineFunction *sub_1CD61537C(uint64_t a1, uint64_t a2, llvm::MachineBasicBlock *a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a2;
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v13 = *(void **)(a1 + 848);
  v13[5] = a7;
  v13[6] = a7 + 48;
  unint64_t LLTForMVT = llvm::getLLTForMVT(*(unsigned char *)(a2 + 44));
  unint64_t v15 = LLTForMVT;
  unint64_t v16 = *(void *)a6;
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a6);
  v17.i16[0] = vaddlv_u8(v17);
  uint64_t v18 = v17.u32[0];
  if (v17.u32[0] == 1)
  {
    *(void *)&long long v50 = LLTForMVT;
    DWORD2(v50) = 0;
    uint64_t v19 = sub_1CC7362A8((uint64_t)v13, (unint64_t *)&v50, __clz(__rbit64(v16)));
    uint64_t v46 = 9;
    int v47 = 0;
    LODWORD(v50) = a5;
    int v51 = 0;
    *(void *)&long long v48 = v19;
    *((void *)&v48 + 1) = v20;
    int v49 = 1;
    sub_1CC73933C((uint64_t)v13, 32, (uint64_t)&v46, &v50, &v48);
    int v22 = *(_DWORD *)(*(void *)(v21 + 32) + 4);
  }
  else
  {
    uint64_t v23 = v11;
    uint64_t v24 = (llvm::APInt *)(v11 + 16);
    uint64_t v43 = v23;
    uint64_t v44 = a3;
    unsigned int v25 = *(_DWORD *)(v23 + 24);
    if (v25 >= 0x41 && v25 - llvm::APInt::countLeadingZerosSlowCase(v24) > 0x40) {
      goto LABEL_9;
    }
    int v26 = *(llvm::APInt **)v24;
    if (v25 < 0x41) {
      int v26 = v24;
    }
    if (*(void *)v26 == v18)
    {
      *(void *)&long long v50 = v15;
      DWORD2(v50) = 0;
      uint64_t v27 = sub_1CC7362A8((uint64_t)v13, (unint64_t *)&v50, __clz(__rbit64(~v16)));
      uint64_t v46 = 9;
      int v47 = 0;
      LODWORD(v50) = a5;
      int v51 = 0;
      *(void *)&long long v48 = v27;
      *((void *)&v48 + 1) = v28;
      int v49 = 1;
    }
    else
    {
LABEL_9:
      *(void *)&long long v50 = v15;
      DWORD2(v50) = 0;
      *(void *)&long long v48 = v15;
      DWORD2(v48) = 0;
      *(void *)&long long v50 = sub_1CC7362A8((uint64_t)v13, (unint64_t *)&v50, 1uLL);
      *((void *)&v50 + 1) = v29;
      int v51 = 1;
      LODWORD(v52) = a5;
      int v54 = 0;
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v13 + 32))(v13, 127, &v48, 1, &v50, 2, 0);
      uint64_t v32 = v31;
      *(void *)&long long v50 = v15;
      DWORD2(v50) = 0;
      uint64_t v33 = sub_1CC7362A8((uint64_t)v13, (unint64_t *)&v50, *(void *)a6);
      *(void *)&long long v48 = v15;
      DWORD2(v48) = 0;
      *(void *)&long long v50 = v30;
      *((void *)&v50 + 1) = v32;
      int v51 = 1;
      uint64_t v52 = v33;
      uint64_t v53 = v34;
      int v54 = 1;
      uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v13 + 32))(v13, 65, &v48, 1, &v50, 2, 0);
      uint64_t v37 = v36;
      *(void *)&long long v50 = v15;
      DWORD2(v50) = 0;
      uint64_t v38 = sub_1CC7362A8((uint64_t)v13, (unint64_t *)&v50, 0);
      uint64_t v46 = 9;
      int v47 = 0;
      *(void *)&long long v50 = v35;
      *((void *)&v50 + 1) = v37;
      int v51 = 1;
      *(void *)&long long v48 = v38;
      *((void *)&v48 + 1) = v39;
      int v49 = 1;
    }
    sub_1CC73933C((uint64_t)v13, 33, (uint64_t)&v46, &v50, &v48);
    int v22 = *(_DWORD *)(*(void *)(v40 + 32) + 4);
    uint64_t v11 = v43;
    a3 = v44;
  }
  sub_1CC6F3FE0(*(void *)(a1 + 944), (llvm::MachineBasicBlock *)a7, *(llvm::MachineBasicBlock **)(a6 + 16), *(_DWORD *)(a6 + 24));
  sub_1CC6F3FE0(*(void *)(a1 + 944), (llvm::MachineBasicBlock *)a7, a3, a4);
  sub_1CC2BE0A8(*(unsigned int **)(a7 + 112), *(unsigned int **)(a7 + 120));
  sub_1CC6F1ABC(a1, *(void *)(*(void *)(v11 + 48) + 16), *(void *)(*(void *)(a6 + 16) + 16), a7);
  LODWORD(v50) = v22;
  int v51 = 0;
  uint64_t result = sub_1CC7376D4(v13, (int *)&v50, *(void *)(a6 + 16));
  if (*(void *)(a7 + 8) == *(void *)(a7 + 32) + 320) {
    int v42 = 0;
  }
  else {
    int v42 = *(llvm::MachineBasicBlock **)(a7 + 8);
  }
  if (v42 != a3) {
    return sub_1CC73677C(v13, (unsigned __int8 *)a3);
  }
  return result;
}

void sub_1CD615700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v12 = *(_DWORD *)(a7 + 24);
  uint64_t v13 = *(void *)(*(void *)(a1 + 1792) + 56);
  uint64_t v31 = v13 + 192 * v12;
  uint64_t v14 = *(unsigned int *)(v31 + 72);
  if (v14)
  {
    uint64_t v16 = *(void *)(a2 + 32) + 320;
    uint64_t v17 = 32 * v14;
    uint64_t v18 = (uint64_t **)(*(void *)(v31 + 64) + 8);
    do
    {
      uint64_t v19 = *v18;
      v18 += 4;
      llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v16, (uint64_t)v19);
      uint64_t v20 = *a4;
      *uint64_t v19 = *a4;
      v19[1] = (uint64_t)a4;
      *(void *)(v20 + 8) = v19;
      *a4 = (uint64_t)v19;
      v17 -= 32;
    }
    while (v17);
  }
  uint64_t v21 = v13 + 192 * v12;
  *(_DWORD *)(v21 + 180) = a6;
  int v22 = (_DWORD *)(v21 + 180);
  *(void *)(v22 - 33) = a3;
  *(void *)(v22 - 31) = a8;
  if (!*((unsigned char *)v22 - 134))
  {
    uint64_t v23 = v13 + 192 * v12;
    uint64_t v24 = *(unsigned int *)(v23 + 176);
    unint64_t v25 = v24 + (a5 >> 1);
    unsigned int v26 = v24 + (a5 >> 1);
    if (v25 <= 0x80000000) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0x80000000;
    }
    *(_DWORD *)(v23 + 176) = v27;
    int v28 = a6 - (a5 >> 1);
    if (a6 < a5 >> 1) {
      int v28 = 0;
    }
    *int v22 = v28;
  }
  if (a9) {
    *(unsigned char *)(v13 + 192 * v12 + 184) = 1;
  }
  if (a3 == a2)
  {
    sub_1CD614FAC(a1, v31, a2);
    *(unsigned char *)(v13 + 192 * v12 + 45) = 1;
  }
}

void sub_1CD615858(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v6 = a2[5];
  if ((v6 & 0x40000000) != 0) {
    unint64_t v7 = (void *)*((void *)a2 - 1);
  }
  else {
    unint64_t v7 = &a2[-8 * (v6 & 0x7FFFFFF)];
  }
  uint64_t v8 = (_DWORD *)sub_1CC6EF0A4(a1, *v7);
  if (v9) {
    LODWORD(v9) = *v8;
  }
  sub_1CD62D638(a3, v9);
  uint64_t v18 = v22;
  uint64_t v19 = v22;
  uint64_t v20 = 32;
  int v21 = 0;
  uint64_t v10 = *(void **)(a3 + 40);
  int NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)a2);
  if (NumSuccessors)
  {
    int v12 = NumSuccessors;
    unsigned int v13 = 0;
    uint64_t v14 = (_DWORD *)(a1 + 496);
    do
    {
      uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)a2, v13);
      sub_1CB89694C((llvm::SmallPtrSetImplBase *)&v18, Successor);
      if (v16)
      {
        uint64_t v23 = Successor;
        uint64_t v17 = sub_1CC703600(v14, &v23);
        llvm::MachineBasicBlock::addSuccessor(v10, (void *)v17[1], -1);
      }
      ++v13;
    }
    while (v12 != v13);
    if (v19 != v18) {
      free(v19);
    }
  }
}

uint64_t sub_1CD61596C(void *a1, int a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1[108] + 16) + 176))(*(void *)(a1[108] + 16));
  uint64_t v7 = a1[109];
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v6 + 240))(v6, a1[108], 0);
  llvm::MachineRegisterInfo::setRegClass(v7, a2, v8);
  LODWORD(v26[0]) = a2;
  DWORD2(v26[0]) = 1;
  uint64_t v9 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 28, v26, 1, 0, 0, 0);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1[108] + 16) + 120))(*(void *)(a1[108] + 16));
  uint64_t result = (*(uint64_t (**)(void))(v12 + 776))();
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v15 = *(void *)result;
    unsigned int v16 = *(_DWORD *)(*(void *)result + 8);
    unsigned int v17 = v16;
    if ((v16 & 0xFE) == 0x12) {
      unsigned int v17 = *(_DWORD *)(**(void **)(v15 + 16) + 8);
    }
    unsigned int v18 = v17 >> 8;
    uint64_t v19 = (llvm::DataLayout *)a1[110];
    unint64_t v20 = ((unint64_t)(v17 >> 8) << 19) | (8
                                                * (unsigned __int16)*(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v19, v17 >> 8)+ 4)) | 2;
    if ((v16 & 0xFE) == 0x12) {
      unsigned int v16 = *(_DWORD *)(**(void **)(v15 + 16) + 8);
    }
    uint64_t v21 = a1[108];
    v23[0] = v14 & 0xFFFFFFFFFFFFFFFBLL;
    v23[1] = 0;
    unsigned int v24 = v16 >> 8;
    char v25 = 0;
    PointerABIchar Alignment = llvm::DataLayout::getPointerABIAlignment(v19, v18);
    memset(v26, 0, sizeof(v26));
    *(void *)&v26[0] = llvm::MachineFunction::getMachineMemOperand(v21, (uint64_t)v23, 49, v20, PointerABIAlignment, v26, 0, 1, 0, 0, 0);
    return llvm::MachineInstr::setMemRefs(v11, v9, v26, 1);
  }
  return result;
}

uint64_t sub_1CD615BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (int *)sub_1CC6EF0A4(a1, a3);
  if (v9) {
    int v10 = *v8;
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = (int *)sub_1CC6EF0A4(a1, *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
  if (v12) {
    int v13 = *v11;
  }
  else {
    int v13 = 0;
  }
  uint64_t v14 = (int *)sub_1CC6EF0A4(a1, *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32));
  if (v15) {
    int v16 = *v14;
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64);
  unsigned int v18 = (void *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u) {
    unsigned int v18 = (void *)*v18;
  }
  uint64_t v19 = (void *)*v18;
  v24[0] = v10;
  void v24[2] = 1;
  v21[0] = v13;
  v21[4] = 0;
  v21[6] = v16;
  v21[10] = 0;
  int v22 = v19;
  int v23 = 3;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a4 + 32))(a4, a2, v24, 1, v21, 3, 0);
}

uint64_t sub_1CD615D50(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = sub_1CB927410(a1, a2, 1);
  uint64_t result = sub_1CC6EAC74(*(void *)a1 + 152 * *(unsigned int *)(a1 + 8), v3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CD615D9C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  sub_1CB9276BC(a1 + 8, a2 + 8);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  sub_1CB927804(a1 + 80, a2 + 80);
  sub_1CB927804(a1 + 112, a2 + 112);
  int v4 = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = v4;
  return a1;
}

uint64_t sub_1CD615E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 864) + 16) + 144))(*(void *)(*(void *)(a1 + 864) + 16));
  if (!v6) {
    return 0;
  }
  v9[0] = &unk_1F261BFB0;
  v9[1] = a1;
  int v10 = v9;
  uint64_t v7 = sub_1CC707440(v6, a3, a2, (uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

_DWORD *sub_1CD615F38@<X0>(_DWORD *result@<X0>, const void *a2@<X1>, size_t a3@<X2>, unsigned char *a4@<X8>)
{
  int v4 = result[5];
  if (v4 < 0 && (uint64_t v6 = v4 & 0x7FFFFFF, v7 = &result[-8 * v6], v8 = *((void *)v7 - 1), (v8 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v9 = (v8 >> 4);
    int v10 = (_DWORD *)((char *)result - v8 + -32 * v6);
    size_t v17 = a3;
    while (1)
    {
      uint64_t v11 = a4;
      uint64_t v12 = (void *)*((void *)v10 - 1);
      uint64_t result = v12 + 2;
      if (*v12 == a3)
      {
        if (!v17) {
          break;
        }
        uint64_t result = (_DWORD *)memcmp(result, a2, v17);
        if (!result) {
          break;
        }
      }
      v10 += 4;
      --v9;
      a4 = v11;
      a3 = v17;
      if (!v9) {
        goto LABEL_2;
      }
    }
    uint64_t v13 = *v10;
    uint64_t v14 = &v7[8 * v13];
    uint64_t v15 = v10[1] - v13;
    a4 = v11;
    void *v11 = v14;
    v11[1] = v15;
    __n128 v11[2] = v12;
    char v5 = 1;
  }
  else
  {
LABEL_2:
    char v5 = 0;
    *a4 = 0;
  }
  a4[24] = v5;
  return result;
}

uint64_t sub_1CD616008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (int *)sub_1CC6EF0A4(a1, a2);
  if (v7) {
    int v8 = *v6;
  }
  else {
    int v8 = 0;
  }
  v18[0] = v8;
  v18[2] = 1;
  int v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0) {
    int v10 = *(void **)(a2 - 8);
  }
  else {
    int v10 = (void *)(a2 - 32 * (v9 & 0x7FFFFFF));
  }
  uint64_t v11 = (int *)sub_1CC6EF0A4(a1, *v10);
  if (v12) {
    int v13 = *v11;
  }
  else {
    int v13 = 0;
  }
  v15[0] = v13;
  _DWORD v15[4] = 0;
  uint64_t v16 = 1 << llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 880), *(llvm::Type **)a2, 1);
  int v17 = 3;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a3 + 32))(a3, 123, v18, 1, v15, 2, 0);
}

llvm::MachineBasicBlock *sub_1CD61612C(llvm::MachineBasicBlock *result, const llvm::BasicBlock *a2, llvm::MachineBasicBlock *a3, char a4)
{
  *(void *)uint64_t result = a3;
  if ((a4 & 1) == 0)
  {
    uint64_t v6 = (llvm::MachineBasicBlock **)result;
    *((void *)result + 1) = llvm::StackProtectorDescriptor::addSuccessorMBB(result, a2, a3, 1, 0);
    uint64_t result = llvm::StackProtectorDescriptor::addSuccessorMBB((llvm::StackProtectorDescriptor *)v6, a2, a3, 0, v6[2]);
    void v6[2] = result;
  }
  return result;
}

uint64_t sub_1CD616190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 848);
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 48) = a3 + 48;
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 864) + 16) + 120))(*(void *)(*(void *)(a1 + 864) + 16));
  Int8PtrTy = (llvm *)llvm::Type::getInt8PtrTy(****(llvm::Type *****)(a1 + 864), 0);
  unint64_t LLTForType = llvm::getLLTForType(Int8PtrTy, *(llvm::Type **)(a1 + 880), v9);
  unsigned __int8 v10 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v7 + 40))(v7, *(void *)(a1 + 880), 0);
  unint64_t LLTForMVT = llvm::getLLTForMVT(v10);
  int v12 = *(_DWORD *)(*(void *)(*(void *)(a3 + 32) + 56) + 64);
  int v13 = *(void **)(a1 + 848);
  *(void *)&long long v46 = LLTForType;
  DWORD2(v46) = 0;
  sub_1CC735850(v13, (uint64_t *)&v46, v12);
  int v15 = *(_DWORD *)(*(void *)(v14 + 32) + 4);
  uint64_t v16 = *(llvm::Type ***)(**(void **)(a3 + 32) + 40);
  int v17 = *(llvm::DataLayout **)(a1 + 880);
  unsigned int v18 = (llvm::Type *)llvm::Type::getInt8PtrTy(*v16, 0);
  PrefTypeAliguint64_t n = llvm::DataLayout::getPrefTypeAlign(v17, v18);
  unint64_t v20 = *(void **)(a1 + 848);
  uint64_t v53 = LLTForMVT;
  int v54 = 0;
  LODWORD(v51) = v15;
  int v52 = 0;
  FixedStacuint64_t k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(a1 + 864) + 432), v12);
  *(void *)&long long v48 = (unint64_t)FixedStack | 4;
  *((void *)&v48 + 1) = 0;
  char v50 = 0;
  if (FixedStack) {
    int v22 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v22 = 0;
  }
  int v49 = v22;
  long long v46 = 0u;
  long long v47 = 0u;
  sub_1CD62D8F8(v20, (int *)&v53, (int *)&v51, &v48, PrefTypeAlign, 5, &v46);
  int v24 = *(_DWORD *)(*(void *)(v23 + 32) + 4);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 784))(v7) & 1) != 0
    || (*(uint64_t (**)(uint64_t, llvm::Type **))(*(void *)v7 + 792))(v7, v16))
  {
    return 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 2160))(v7))
  {
    uint64_t v40 = *(void *)(a1 + 872);
    unsigned int v42 = sub_1CB8F1DC4(&LLTForType);
    if (v41 == 1) {
    int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v40, (8 * v42) | 1, "", 0);
    }
    sub_1CD61596C((void *)a1, GenericVirtualRegister, *(void *)(a1 + 848));
  }
  else
  {
    uint64_t v27 = (uint64_t *)(*(uint64_t (**)(uint64_t, llvm::Type **))(*(void *)v7 + 776))(v7, v16);
    int v28 = sub_1CC6EF0A4(a1, v27);
    if (v29) {
      int v30 = *v28;
    }
    else {
      int v30 = 0;
    }
    uint64_t v31 = *(void **)(a1 + 848);
    uint64_t v53 = LLTForMVT;
    int v54 = 0;
    LODWORD(v51) = v30;
    int v52 = 0;
    uint64_t v32 = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(void *)(a1 + 864) + 432), v12);
    *(void *)&long long v43 = (unint64_t)v32 | 4;
    *((void *)&v43 + 1) = 0;
    char v45 = 0;
    if (v32) {
      int v33 = *((_DWORD *)v32 + 3);
    }
    else {
      int v33 = 0;
    }
    int v44 = v33;
    long long v46 = 0u;
    long long v47 = 0u;
    sub_1CD62D8F8(v31, (int *)&v53, (int *)&v51, &v43, PrefTypeAlign, 5, &v46);
    int GenericVirtualRegister = *(_DWORD *)(*(void *)(v34 + 32) + 4);
  }
  uint64_t v36 = *(void *)(a1 + 848);
  uint64_t v53 = 9;
  int v54 = 0;
  LODWORD(v46) = GenericVirtualRegister;
  LODWORD(v47) = 0;
  LODWORD(v51) = v24;
  int v52 = 0;
  uint64_t v37 = sub_1CC73933C(v36, 33, (uint64_t)&v53, &v46, &v51);
  uint64_t v38 = *(void **)(a1 + 848);
  *(void *)&long long v46 = v37;
  *((void *)&v46 + 1) = v39;
  uint64_t v25 = 1;
  LODWORD(v47) = 1;
  sub_1CC7376D4(v38, (int *)&v46, *(void *)(a2 + 16));
  sub_1CC73677C(*(void **)(a1 + 848), *(unsigned __int8 **)(a2 + 8));
  return v25;
}

BOOL sub_1CD616588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(v4 + 848);
  *(void *)(v5 + 40) = v6;
  *(void *)(v5 + 48) = v6 + 48;
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 864) + 16) + 120))(*(void *)(*(void *)(v4 + 864) + 16));
  uint64_t v8 = *(void *)(v7 + 179120);
  uint64_t v28 = 0;
  v29[0] = &v30;
  v29[1] = 0x400000000;
  char v31 = 0;
  v32[0] = &v33;
  v32[1] = 0x400000000;
  v34[0] = &v35;
  v34[1] = 0x200000000;
  uint64_t v36 = 0;
  uint64_t v38 = v40;
  uint64_t v39 = 0x2000000000;
  v40[1216] = 0;
  char v43 = 0;
  long long v41 = 0u;
  char v42 = 0;
  int v44 = 0;
  char v45 = 1;
  int v46 = 0;
  int v9 = *(_DWORD *)(v7 + 184236);
  uint64_t v24 = 9;
  uint64_t v25 = 0;
  uint64_t v26 = v8;
  int v23 = v9;
  int v27 = 0;
  int v17 = 0;
  sub_1CB925510((uint64_t)&v18, &v17, 1, *****(void *****)(v4 + 864) + 1576, 0, 0, 0, 1, 0);
  uint64_t v28 = v18;
  sub_1CB9276BC((uint64_t)v29, (uint64_t)v19);
  char v31 = v19[64];
  sub_1CB927804((uint64_t)v32, (uint64_t)&v20);
  sub_1CB927804((uint64_t)v34, (uint64_t)v21);
  uint64_t v36 = v21[3];
  int v37 = v22;
  sub_1CC6EA9DC(&v18);
  BOOL v10 = 0;
  if ((*(unsigned int (**)(void, void, int *))(**(void **)(v4 + 248) + 72))(*(void *)(v4 + 248), *(void *)(v4 + 848), &v23))
  {
    uint64_t v11 = *(_DWORD **)(*(void *)(v4 + 864) + 8);
    int v12 = v11[118];
    BOOL v10 = (v12 != 42 || v11[120] != 3 || v11[121] != 25) && (v12 - 65) < 0xFFFFFFFE;
  }
  int v13 = v38;
  if (v39)
  {
    uint64_t v14 = 38 * v39;
    int v15 = v38 - 38;
    do
    {
      sub_1CC6EA9DC(&v15[v14]);
      v14 -= 38;
    }
    while (v14 * 4);
    int v13 = v38;
  }
  if (v13 != v40) {
    free(v13);
  }
  sub_1CC6EA9DC(&v28);
  return v10;
}

void sub_1CD616860(uint64_t a1)
{
  sub_1CC703194(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD616898()
{
}

uint64_t sub_1CD6168D8(uint64_t a1, void *a2, uint64_t *a3, int *a4, uint64_t *a5)
{
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    uint64_t v14 = *a3;
    int v15 = *a4;
    uint64_t v16 = *a5;
    v19[0] = *a2;
    v19[1] = v14;
    int v20 = v15;
    uint64_t v21 = v16;
    int v17 = (_OWORD *)sub_1CB8968D4(a1, (unint64_t)v19, 1);
    uint64_t v6 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 8);
    long long v18 = v17[1];
    *(_OWORD *)uint64_t v6 = *v17;
    *(_OWORD *)(v6 + 16) = v18;
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
    uint64_t v7 = *(void *)a1;
  }
  else
  {
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = *(void *)a1 + 32 * v6;
    uint64_t v9 = *a3;
    int v10 = *a4;
    uint64_t v11 = *a5;
    *(void *)uint64_t v8 = *a2;
    *(void *)(v8 + 8) = v9;
    *(_DWORD *)(v8 + 16) = v10;
    *(void *)(v8 + 24) = v11;
  }
  uint64_t v12 = (v6 + 1);
  *(_DWORD *)(a1 + 8) = v12;
  return v7 + 32 * v12 - 32;
}

void *sub_1CD61698C(void *a1)
{
  unint64_t v2 = (void *)a1[14];
  if (v2 != a1 + 16) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](a1[10], 8);
  MEMORY[0x1D25D9CD0](a1[7], 8);
  MEMORY[0x1D25D9CD0](a1[4], 8);
  return a1;
}

char **sub_1CD6169EC(char **a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v7 = v2;
    uint64_t v5 = 32 * v3;
    do
    {
      uint64_t v6 = *(char **)&v7[v5 - 24];
      if (&v7[v5 - 8] != v6) {
        free(v6);
      }
      v5 -= 32;
    }
    while (v5);
    unint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CD616A68(long long *a1, _WORD *a2, char **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCD9B38, 0, 0);
  byte_1EBCD9BB8 = 0;
  qword_1EBCD9BC0 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCD9BC8 = 0;
  qword_1EBCD9B38 = (uint64_t)&unk_1F26440A0;
  qword_1EBCD9BD0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCD9BD8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCD9BF0 = (uint64_t)&qword_1EBCD9BD8;
  llvm::cl::Option::setArgStr(v6, "enable-cse-in-irtranslator", 0x1AuLL);
  xmmword_1EBCD9B58 = *a1;
  word_1EBCD9B42 = word_1EBCD9B42 & 0xFFF8 | *a2 & 7;
  uint64_t v7 = *a3;
  byte_1EBCD9BB8 = **a3;
  byte_1EBCD9BC9 = 1;
  byte_1EBCD9BC8 = *v7;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCD9B38);
}

uint64_t sub_1CD616B8C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  uint64_t v7 = (unsigned __int8 *)*((void *)a2 + 7);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = a1 + 56;
  if (v7) {
    llvm::MetadataTracking::track(v8, v7, 2);
  }
  int v9 = *((_DWORD *)a2 + 16);
  int v10 = (unsigned __int8 *)*((void *)a2 + 9);
  *(void *)(a1 + 72) = v10;
  *(_DWORD *)(a1 + 64) = v9;
  if (v10) {
    llvm::MetadataTracking::track(a1 + 72, v10, 2);
  }
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  return a1;
}

uint64_t sub_1CD616C08(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  uint64_t v7 = (void *)a2 + 7;
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  uint64_t v8 = (unsigned __int8 *)*((void *)a2 + 7);
  if (v8)
  {
    llvm::MetadataTracking::retrack((uint64_t)v7, v8, a1 + 56);
    void *v7 = 0;
  }
  int v9 = *((_DWORD *)a2 + 16);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_DWORD *)(a1 + 64) = v9;
  int v10 = (unsigned __int8 *)*((void *)a2 + 9);
  if (v10)
  {
    llvm::MetadataTracking::retrack((uint64_t)a2 + 72, v10, a1 + 72);
    *((void *)a2 + 9) = 0;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  return a1;
}

void sub_1CD616CA8()
{
}

void sub_1CD616D60(uint64_t a1, llvm::MachineBasicBlock *a2, llvm::MachineBasicBlock *a3, int a4)
{
}

uint64_t sub_1CD616D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CD5C66FC(a1, (uint64_t *)a2) + 80;
  if (*(char *)(a2 + 103) < 0)
  {
    sub_1CB8BDF7C(v4, *(const void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 80);
    *(void *)(v4 + 16) = *(void *)(a2 + 96);
    *(_OWORD *)uint64_t v4 = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v6;
  return a1;
}

__n128 sub_1CD616DE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(a1 + 6) = *(uint64_t *)((char *)a2 + 6);
  *(void *)a1 = v2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 32) = a2[4];
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 64) = a2[8];
  a2[7] = 0;
  a2[8] = 0;
  a2[6] = 0;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  long long v3 = *((_OWORD *)a2 + 5);
  *(void *)(a1 + 96) = a2[12];
  *(_OWORD *)(a1 + 80) = v3;
  a2[11] = 0;
  a2[12] = 0;
  a2[10] = 0;
  __n128 result = *(__n128 *)(a2 + 13);
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
  *(__n128 *)(a1 + 104) = result;
  return result;
}

void sub_1CD616E70(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD9C00, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC708E98;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCD9C00, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD616EE0(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EA61BF48);
  *(void *)uint64_t v1 = &unk_1F261C090;
  *(void *)(v1 + 248) = 0;
  *(void *)(v1 + 256) = 0;
  *(_DWORD *)(v1 + 264) = 2;
}

void sub_1CD616F28(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE4);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE4);
  if (*(_DWORD *)(a1 + 264))
  {
    llvm::AnalysisUsage::addRequiredID(this, llvm::ProfileSummaryInfoWrapperPass::ID);
    llvm::LazyBlockFrequencyInfoPass::getLazyBFIAnalysisUsage(this, v4);
  }
  sub_1CD632034((uint64_t)this);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

void sub_1CD616FCC(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD617004()
{
}

double sub_1CD617064(void *a1, unsigned int a2)
{
  uint64_t v2 = sub_1CD6170EC(a1, a2);
  v2[3] = v2 + 5;
  *(void *)&double result = 0x400000000;
  v2[4] = 0x400000000;
  v2[9] = 0;
  v2[10] = 0;
  *((_DWORD *)v2 + 22) = 0;
  return result;
}

double sub_1CD61709C(uint64_t a1)
{
  *(void *)a1 = &unk_1F261C150;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void *sub_1CD6170EC(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    uint64_t v3 = 9 * a2;
    uint64_t v4 = 144 * a2;
    long long v5 = (char *)operator new(144 * a2);
    *a1 = v5;
    long long v6 = &v5[16 * v3];
    a1[2] = v6;
    uint64_t v7 = v5 + 16;
    do
    {
      *((void *)v7 - 2) = v7;
      *((void *)v7 - 1) = 0x400000000;
      v7 += 144;
      v4 -= 144;
    }
    while (v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_1CD617164(unsigned int a1@<W0>, unsigned int a2@<W1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v16[8] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = v16;
  uint64_t v15 = 0x400000000;
  sub_1CD6175DC((unsigned int *)&v14, a3, &a3[16 * a4]);
  unint64_t v10 = __PAIR64__(a2, a1);
  uint64_t v11 = v13;
  uint64_t v12 = 0x400000000;
  if (v15)
  {
    sub_1CC70AFE8((uint64_t)&v11, (uint64_t)&v14);
    BOOL v8 = v12 == 0;
  }
  else
  {
    BOOL v8 = 1;
  }
  int v9 = operator new(0x60uLL);
  *int v9 = &unk_1F261C1F8;
  v9[1] = v10;
  _OWORD v9[2] = v9 + 4;
  void v9[3] = 0x400000000;
  if (!v8) {
    sub_1CD617668((uint64_t)(v9 + 2), (uint64_t)&v11);
  }
  *(void *)(a5 + 24) = v9;
  if (v11 != v13) {
    free(v11);
  }
  if (v14 != v16) {
    free(v14);
  }
}

void sub_1CD6172BC(int a1@<W0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x400000000;
  sub_1CD47792C((unsigned int *)&v11, a2, &a2[8 * a3]);
  BOOL v8 = v10;
  uint64_t v9 = 0x400000000;
  if (v12)
  {
    sub_1CC70AAB8((uint64_t)&v8, (uint64_t)&v11);
    BOOL v6 = v9 == 0;
  }
  else
  {
    BOOL v6 = 1;
  }
  uint64_t v7 = operator new(0x40uLL);
  *(void *)uint64_t v7 = &unk_1F261C240;
  void v7[2] = a1;
  *((void *)v7 + 2) = v7 + 8;
  *((void *)v7 + 3) = 0x400000000;
  if (!v6) {
    sub_1CC70AE9C((uint64_t)(v7 + 4), (const void **)&v8);
  }
  *(void *)(a4 + 24) = v7;
  if (v8 != v10) {
    free(v8);
  }
  if (v11 != v13) {
    free(v11);
  }
}

uint64_t sub_1CD61740C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F261C288;
  *(_DWORD *)(a2 + 8) = result;
  *(void *)(a2 + 24) = a2;
  return result;
}

uint64_t sub_1CD617434@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F261C2D0;
  *(_DWORD *)(a2 + 8) = result;
  *(void *)(a2 + 24) = a2;
  return result;
}

uint64_t sub_1CD61745C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C3A8;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1CD617488@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C3F0;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1CD6174B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C438;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1CD6174E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C480;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1CD61750C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F261C4C8;
  *(_DWORD *)(a2 + 8) = result;
  *(void *)(a2 + 24) = a2;
  return result;
}

uint64_t sub_1CD617534@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C558;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1CD617560@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F261C5A0;
  *(_DWORD *)(a2 + 8) = result;
  *(void *)(a2 + 24) = a2;
  return result;
}

uint64_t sub_1CD617588@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F261C5E8;
  *(_DWORD *)(a2 + 8) = result;
  *(void *)(a2 + 24) = a2;
  return result;
}

uint64_t sub_1CD6175B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C630;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

unsigned int *sub_1CD6175DC(unsigned int *result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = result;
  size_t v4 = a3 - a2;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - a2) >> 4) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    double result = (unsigned int *)memcpy((void *)(*(void *)result + 16 * v5), a2, v4);
    LODWORD(v5) = v3[2];
  }
  void v3[2] = v5 + (v4 >> 4);
  return result;
}

uint64_t sub_1CD617668(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a2 + 16;
    uint64_t v3 = *(void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      BOOL v6 = (_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5)
        {
          uint64_t v14 = &v3[2 * v5];
          uint64_t v15 = *(void **)a1;
          do
          {
            *uint64_t v15 = *v3;
            v15[1] = v3[1];
            v3 += 2;
            v15 += 2;
          }
          while (v3 != v14);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v16 = &v3[2 * v7];
          int v17 = *(void **)a1;
          do
          {
            *int v17 = *v3;
            v17[1] = v3[1];
            v3 += 2;
            v17 += 2;
          }
          while (v3 != v16);
        }
        else
        {
          uint64_t v7 = 0;
        }
        uint64_t v8 = *v6;
        if (v7 != v8) {
          memcpy((void *)(*(void *)a1 + 16 * v7), (const void *)(*(void *)a2 + 16 * v7), *(void *)a2 + 16 * v8 - (*(void *)a2 + 16 * v7));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v11);
        uint64_t v3 = *(void **)a2;
      }
      *(void *)a1 = v3;
      uint64_t v12 = a2;
      uint64_t v13 = *(void *)(a2 + 8);
      BOOL v6 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = v13;
      *(void *)uint64_t v12 = v4;
      *(_DWORD *)(v12 + 12) = 0;
    }
    *BOOL v6 = 0;
  }
  return a1;
}

uint64_t sub_1CD6177C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C6C0;
  a3[1] = result;
  a3[2] = a2;
  a3[3] = a3;
  return result;
}

uint64_t sub_1CD6177F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C708;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1CD61781C@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C750;
  a3[1] = a2 | (unint64_t)(result << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1CD617848@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C7E0;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1CD617874@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C828;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1CD6178A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1F261C870;
  a3[1] = result | (unint64_t)(a2 << 32);
  a3[3] = a3;
  return result;
}

uint64_t sub_1CD6178CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F261C8B8;
  *(_DWORD *)(a2 + 8) = result;
  *(void *)(a2 + 24) = a2;
  return result;
}

void sub_1CD6178F4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD9CE0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC70CD0C;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCD9CE0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD617964(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EA61BF50);
  void *v1 = &unk_1F261C900;
}

void sub_1CD6179A0(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&unk_1EA61EFE3);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EA61EFE3);
  sub_1CD632034((uint64_t)this);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

void sub_1CD617A24(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD617A5C()
{
}

uint64_t sub_1CD617AB0(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(unsigned int *)(v7 + 68);
  if ((v8 & 0x80000000) != 0
    && (v8 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(*(void *)a1 + 432))
  {
    unint64_t v9 = *(void *)(*(void *)(*(void *)a1 + 424) + 8 * (v8 & 0x7FFFFFFF));
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = *(unsigned int *)(v7 + 36);
  unint64_t v25 = v9;
  uint64_t v11 = *(void *)(v7 + 112);
  int v12 = sub_1CB8F1DC4(&v25);
  if (v13 == 1)
  {
    int v23 = v12;
    int v12 = v23;
  }
  unsigned int v14 = v12 + v11;
  if ((int)a4 + (int)a3 <= v11 || v14 <= a3)
  {
    uint64_t v16 = a1;
    uint64_t v17 = v10;
    return sub_1CC714E1C(v16, v17, a3, a4);
  }
  if (a3 >= v11 && (int)a4 + (int)a3 <= v14)
  {
    a3 = (a3 - v11);
    if (!a3)
    {
      if ((v8 & 0x80000000) != 0
        && (v8 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(*(void *)a1 + 432))
      {
        unint64_t v20 = *(void *)(*(void *)(*(void *)a1 + 424) + 8 * (v8 & 0x7FFFFFFF));
      }
      else
      {
        unint64_t v20 = 0;
      }
      unint64_t v24 = v20;
      uint64_t v22 = sub_1CB8F1DC4(&v24);
      if (v21 == 1) {
      if (v22 == a4)
      }
        a1[6] = v8;
    }
    uint64_t v16 = a1;
    uint64_t v17 = v8;
    return sub_1CC714E1C(v16, v17, a3, a4);
  }
  return 0;
}

void sub_1CD617C08(long long *a1, _WORD *a2, char **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCD9CE8, 0, 0);
  byte_1EBCD9D68 = 0;
  qword_1EBCD9D70 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCD9D78 = 0;
  qword_1EBCD9CE8 = (uint64_t)&unk_1F26440A0;
  qword_1EBCD9D80 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCD9D88 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCD9DA0 = (uint64_t)&qword_1EBCD9D88;
  llvm::cl::Option::setArgStr(v6, "enable-cse-in-legalizer", 0x17uLL);
  xmmword_1EBCD9D08 = *a1;
  word_1EBCD9CF2 = word_1EBCD9CF2 & 0xFFF8 | *a2 & 7;
  uint64_t v7 = *a3;
  byte_1EBCD9D68 = **a3;
  byte_1EBCD9D79 = 1;
  byte_1EBCD9D78 = *v7;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCD9CE8);
}

void sub_1CD617D2C(long long *a1, _WORD *a2, char **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCD9DA8, 0, 0);
  byte_1EBCD9E28 = 0;
  qword_1EBCD9E30 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCD9E38 = 0;
  qword_1EBCD9DA8 = (uint64_t)&unk_1F26440A0;
  qword_1EBCD9E40 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCD9E48 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCD9E60 = (uint64_t)&qword_1EBCD9E48;
  llvm::cl::Option::setArgStr(v6, "allow-ginsert-as-artifact", 0x19uLL);
  xmmword_1EBCD9DC8 = *a1;
  word_1EBCD9DB2 = word_1EBCD9DB2 & 0xFFF8 | *a2 & 7;
  uint64_t v7 = *a3;
  byte_1EBCD9E28 = **a3;
  byte_1EBCD9E39 = 1;
  byte_1EBCD9E38 = *v7;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCD9DA8);
}

uint64_t sub_1CD617E50(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  if (v6 < 0 && (uint64_t v18 = a1[2], v19 = v6 & 0x7FFFFFFF, v19 < *(_DWORD *)(v18 + 432))) {
    unint64_t v7 = *(void *)(*(void *)(v18 + 424) + 8 * v19);
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v65 = v7;
  unint64_t v9 = (llvm::LLVMContext *)sub_1CB8F1DC4(&v65);
  if (v8 == 1) {
  uint64_t v10 = ****(llvm::Type *****)(*a1 + 8);
  }
  int v11 = **(unsigned __int16 **)(a2 + 16);
  uint64_t result = 2;
  switch(**(_WORD **)(a2 + 16))
  {
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xBB:
    case 0xBC:
    case 0xD6:
    case 0xD7:
    case 0xD8:
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDC:
      goto LABEL_6;
    case 0xA7:
    case 0xAB:
    case 0xB1:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEB:
      return result;
    case 0xB2:
    case 0xB3:
      int v30 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      if (v30 < 0 && (uint64_t v56 = a1[2], v57 = v30 & 0x7FFFFFFF, v57 < *(_DWORD *)(v56 + 432))) {
        unint64_t v31 = *(void *)(*(void *)(v56 + 424) + 8 * v57);
      }
      else {
        unint64_t v31 = 0;
      }
      uint64_t v32 = sub_1CC726BE0(****(void *****)(*a1 + 8), v31);
      int v33 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      if (v33 < 0 && (uint64_t v58 = a1[2], v59 = v33 & 0x7FFFFFFF, v59 < *(_DWORD *)(v58 + 432))) {
        unint64_t v34 = *(void *)(*(void *)(v58 + 424) + 8 * v59);
      }
      else {
        unint64_t v34 = 0;
      }
      uint64_t v35 = sub_1CC726BE0(v10, v34);
      if (v32) {
        BOOL v36 = v35 == 0;
      }
      else {
        BOOL v36 = 1;
      }
      if (v36) {
        return 2;
      }
      uint64_t v48 = v35;
      uint64_t v49 = *a1;
      uint64_t v50 = a2;
      uint64_t v51 = v32;
      goto LABEL_61;
    case 0xB4:
    case 0xB5:
      int v20 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      if (v20 < 0 && (uint64_t v52 = a1[2], v53 = v20 & 0x7FFFFFFF, v53 < *(_DWORD *)(v52 + 432))) {
        unint64_t v21 = *(void *)(*(void *)(v52 + 424) + 8 * v53);
      }
      else {
        unint64_t v21 = 0;
      }
      unint64_t v64 = v21;
      int v23 = sub_1CB8F1DC4(&v64);
      if (v22 == 1) {
      int v24 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      }
      if (v24 < 0 && (v54 = a1[2], uint64_t v55 = v24 & 0x7FFFFFFF, v55 < *(_DWORD *)(v54 + 432))) {
        unint64_t v25 = *(void *)(*(void *)(v54 + 424) + 8 * v55);
      }
      else {
        unint64_t v25 = 0;
      }
      unint64_t v64 = v25;
      int v27 = sub_1CB8F1DC4(&v64);
      if (v26 == 1) {
      if (v27 != 64 && v27 != 32 || v23 != 64 && v23 != 32)
      }
        return 2;
      uint64_t v28 = *a1;
      if (v27 == 32) {
        uint64_t Int32Ty = llvm::Type::getInt32Ty(v10, (llvm::LLVMContext *)v26);
      }
      else {
        uint64_t Int32Ty = llvm::Type::getInt64Ty(v10, (llvm::LLVMContext *)v26);
      }
      uint64_t v48 = Int32Ty;
      if (v23 == 64) {
        uint64_t v51 = *(void *)v10 + 1696;
      }
      else {
        uint64_t v51 = *(void *)v10 + 1672;
      }
      uint64_t v50 = a2;
      uint64_t v49 = v28;
      goto LABEL_61;
    case 0xB6:
    case 0xB7:
      int v37 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      if (v37 < 0 && (uint64_t v60 = a1[2], v61 = v37 & 0x7FFFFFFF, v61 < *(_DWORD *)(v60 + 432))) {
        unint64_t v38 = *(void *)(*(void *)(v60 + 424) + 8 * v61);
      }
      else {
        unint64_t v38 = 0;
      }
      unint64_t v64 = v38;
      int v40 = sub_1CB8F1DC4(&v64);
      if (v39 == 1) {
      int v41 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      }
      if (v41 < 0 && (uint64_t v62 = a1[2], v63 = v41 & 0x7FFFFFFF, v63 < *(_DWORD *)(v62 + 432))) {
        unint64_t v42 = *(void *)(*(void *)(v62 + 424) + 8 * v63);
      }
      else {
        unint64_t v42 = 0;
      }
      unint64_t v64 = v42;
      int v44 = sub_1CB8F1DC4(&v64);
      if (v43 == 1) {
      if (v40 != 64 && v40 != 32 || v44 != 64 && v44 != 32)
      }
        return 2;
      uint64_t v45 = *a1;
      if (v44 == 64) {
        uint64_t v46 = *(void *)v10 + 1696;
      }
      else {
        uint64_t v46 = *(void *)v10 + 1672;
      }
      if (v40 == 32) {
        uint64_t Int64Ty = llvm::Type::getInt32Ty(v10, (llvm::LLVMContext *)v43);
      }
      else {
        uint64_t Int64Ty = llvm::Type::getInt64Ty(v10, (llvm::LLVMContext *)v43);
      }
      uint64_t v51 = Int64Ty;
      uint64_t v50 = a2;
      uint64_t v49 = v45;
      uint64_t v48 = v46;
LABEL_61:
      int v17 = sub_1CC726CD0(v50, v49, v48, v51);
      goto LABEL_10;
    case 0xD2:
      goto LABEL_15;
    case 0xEA:
    case 0xEC:
    case 0xED:
    case 0xEE:
      int v17 = sub_1CC725868(*a1, *(void *)(*a1 + 24), a2, a3);
      goto LABEL_10;
    default:
      if ((v11 - 59) < 4)
      {
LABEL_15:
        uint64_t v14 = llvm::IntegerType::get(****(llvm::IntegerType *****)(*a1 + 8), v9);
        goto LABEL_9;
      }
      if (v11 == 88)
      {
LABEL_6:
        uint64_t v13 = sub_1CC726BE0(****(void *****)(*a1 + 8), v65);
        if (!v13) {
          return 2;
        }
        uint64_t v14 = v13;
        HIDWORD(v16) = v9;
        LODWORD(v16) = v9 - 32;
        unsigned int v15 = v16 >> 4;
        uint64_t result = 2;
        if (v15 <= 6 && ((1 << v15) & 0x4D) != 0)
        {
LABEL_9:
          int v17 = sub_1CC72653C(a2, *a1, (int)v9, v14);
LABEL_10:
          if (v17 == 1)
          {
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
            return 1;
          }
          return 2;
        }
      }
      return result;
  }
}

uint64_t sub_1CD61829C(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v29 = a4;
  unsigned int v7 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v8 = 2;
  if (v7 <= 0x87)
  {
    if (v7 == 90)
    {
      if (a3) {
        return v8;
      }
      uint64_t v23 = *(void *)(a2 + 48);
      if ((v23 & 7) != 0)
      {
        unint64_t v11 = *(void *)((v23 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v11 = v23 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a2 + 48) = v23 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v28 = *(void *)(v11 + 24);
      uint64_t v24 = sub_1CB8F1DC4(&v28);
      int v26 = v25;
      if (v24 != sub_1CB8F1DC4((unint64_t *)&v29) || v26 != v27) {
        return v8;
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      sub_1CD61B3B8((uint64_t *)a1, *(void *)(a2 + 32), v29);
    }
    else
    {
      if (v7 != 96)
      {
        if (v7 - 65 < 3)
        {
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
          uint64_t v8 = 1;
          sub_1CD61B300(*(void *)a1, *(void *)(a2 + 32), a4, 1u);
          sub_1CD61B300(*(void *)a1, *(void *)(a2 + 32), a4, 2u);
          sub_1CD61B3B8((uint64_t *)a1, *(void *)(a2 + 32), a4);
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
        }
        return v8;
      }
      if (a3) {
        return v8;
      }
      uint64_t v10 = *(void *)(a2 + 48);
      if ((v10 & 7) != 0)
      {
        unint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a2 + 48) = v10 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v28 = *(void *)(v11 + 24);
      uint64_t v12 = sub_1CB8F1DC4(&v28);
      int v14 = v13;
      if (v12 != sub_1CB8F1DC4((unint64_t *)&v29) || v14 != v15) {
        return v8;
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
      sub_1CD61B300(*(void *)a1, *(void *)(a2 + 32), v29, 0);
    }
    *(void *)(v11 + 24) = v29;
LABEL_25:
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
    return 1;
  }
  if (v7 == 136)
  {
    if (a3) {
      return v8;
    }
    int v16 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
    if (v16 < 0)
    {
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v18 = v16 & 0x7FFFFFFF;
      if (v18 < *(_DWORD *)(v17 + 432))
      {
        uint64_t v19 = *(void *)(*(void *)(v17 + 424) + 8 * v18);
        unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF9;
        uint64_t v21 = v19 & 4;
        if (v20 && v21 != 0) {
          return v8;
        }
      }
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
    sub_1CD61B300(*(void *)a1, *(void *)(a2 + 32), a4, 2u);
    sub_1CD61B300(*(void *)a1, *(void *)(a2 + 32), a4, 3u);
    sub_1CD61B3B8((uint64_t *)a1, *(void *)(a2 + 32), a4);
    goto LABEL_25;
  }
  if (v7 != 204)
  {
    if (v7 == 205)
    {
      return sub_1CC72757C((uint64_t *)a1, a2, a3, a4);
    }
    return v8;
  }

  return sub_1CC728308((uint64_t *)a1, (llvm::MachineInstr *)a2, a3, a4);
}

uint64_t sub_1CD618638(uint64_t *a1, llvm::MachineInstr *this, int a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  unint64_t v50 = a4;
  unsigned int v7 = **((unsigned __int16 **)this + 2);
  uint64_t v8 = 2;
  if (v7 <= 0x76)
  {
    if (**((unsigned __int16 **)this + 2) <= 0x59u)
    {
      switch(**((_WORD **)this + 2))
      {
        case 'A':
        case 'B':
        case 'C':
          goto LABEL_42;
        case 'D':
          goto LABEL_31;
        case 'E':
          sub_1CD624D30(a1, (uint64_t)this, a4);
          return 1;
        case 'F':
        case 'G':
        case 'H':
        case 'J':
        case 'L':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
          return v8;
        case 'I':
          if (a3 != 1) {
            return v8;
          }
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[1] + 32))(a1[1], this);
          uint64_t v8 = 1;
          sub_1CD61B250((void *)*a1, *((void *)this + 4), v4, 1u);
          break;
        case 'K':
        case 'S':
          goto LABEL_9;
        case 'M':
          *(void *)&long long v56 = v57;
          *((void *)&v56 + 1) = 0x800000000;
          uint64_t v28 = *((void *)this + 4);
          unsigned int NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs(this);
          uint64_t v31 = *((unsigned int *)this + 10);
          if (NumExplicitDefs == v31)
          {
            unsigned int v32 = 0;
          }
          else
          {
            uint64_t v33 = 32 * v31 - 32 * NumExplicitDefs;
            unint64_t v34 = (int *)(v28 + 32 * NumExplicitDefs + 4);
            do
            {
              int v35 = *v34;
              v34 += 8;
              LODWORD(v53) = v35;
              int v55 = 0;
              unint64_t v36 = sub_1CBA0E760((uint64_t)&v56, (unint64_t)&v53, 1);
              uint64_t v37 = v56 + 24 * DWORD2(v56);
              long long v38 = *(_OWORD *)v36;
              *(void *)(v37 + 16) = *(void *)(v36 + 16);
              *(_OWORD *)uint64_t v37 = v38;
              unsigned int v32 = ++DWORD2(v56);
              v33 -= 32;
            }
            while (v33);
          }
          while (1)
          {
            if ((v4 & 2) != 0) {
              uint64_t v39 = 0x800000000000000;
            }
            else {
              uint64_t v39 = 0x8000000000000;
            }
            if ((v39 & v4) != 0)
            {
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v30);
              unint64_t v4 = v50;
            }
            if (v32 >= (unsigned __int16)(v4 >> 3)) {
              break;
            }
            uint64_t v40 = *a1;
            if ((v4 & 0xFFFFFFFFFFFFFFF9) != 0 && (v4 & 4) != 0) {
              unint64_t v4 = sub_1CBA15978(&v50);
            }
            uint64_t v53 = v4;
            LODWORD(v54) = 0;
            uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)v40 + 32))(v40, 68, &v53, 1, 0, 0, 0);
            uint64_t v54 = v41;
            int v55 = 1;
            unint64_t v42 = sub_1CBA0E760((uint64_t)&v56, (unint64_t)&v53, 1);
            uint64_t v43 = v56 + 24 * DWORD2(v56);
            long long v44 = *(_OWORD *)v42;
            *(void *)(v43 + 16) = *(void *)(v42 + 16);
            *(_OWORD *)uint64_t v43 = v44;
            ++DWORD2(v56);
            ++v32;
            unint64_t v4 = v50;
          }
          uint64_t v45 = (void *)*a1;
          LODWORD(v48) = *(_DWORD *)(*((void *)this + 4) + 4);
          int v49 = 1;
          unint64_t v51 = v4;
          int v52 = 0;
          uint64_t v53 = (*(uint64_t (**)(void *, uint64_t, unint64_t *, uint64_t, void, void, void))(*v45 + 32))(v45, 77, &v51, 1, v56, DWORD2(v56), 0);
          uint64_t v54 = v46;
          int v55 = 1;
          sub_1CD62D47C(v45, &v48, (int *)&v53);
          llvm::MachineInstr::eraseFromParent(this);
          if ((_DWORD *)v56 != v57) {
            free((void *)v56);
          }
          return 1;
        default:
          if (v7 - 45 < 3) {
            goto LABEL_42;
          }
          return v8;
      }
      goto LABEL_44;
    }
    if (v7 != 90)
    {
      if (v7 != 96 || a3) {
        return v8;
      }
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[1] + 32))(a1[1], this);
      sub_1CD61B250((void *)*a1, *((void *)this + 4), v4, 0);
LABEL_34:
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[1] + 40))(a1[1], this);
      return 1;
    }
LABEL_31:
    if (!a3)
    {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[1] + 32))(a1[1], this);
LABEL_33:
      sub_1CD61B19C(a1, *((void *)this + 4), v4);
      goto LABEL_34;
    }
    return v8;
  }
  if (**((unsigned __int16 **)this + 2) <= 0xA4u)
  {
    if (**((unsigned __int16 **)this + 2) > 0x87u)
    {
      if (v7 == 136)
      {
        uint64_t v11 = *((void *)this + 4);
        int v12 = *(_DWORD *)(v11 + 4);
        int v13 = *(_DWORD *)(v11 + 36);
        int v14 = (void *)a1[2];
        if (v12 < 0 && (uint64_t v47 = v12 & 0x7FFFFFFF, v47 < *((_DWORD *)v14 + 108))) {
          uint64_t v15 = *(void *)(v14[53] + 8 * v47);
        }
        else {
          uint64_t v15 = 0;
        }
        if (v13 < 0 && (v13 & 0x7FFFFFFFu) < *((_DWORD *)v14 + 108)) {
          uint64_t v16 = *(void *)(v14[53] + 8 * (v13 & 0x7FFFFFFF));
        }
        else {
          uint64_t v16 = 0;
        }
        if (a3 == 1)
        {
          if ((v16 & 1) == 0) {
            return v8;
          }
          uint64_t v17 = 0x800000000000000;
          if ((v15 & 2) != 0) {
            uint64_t v18 = 0x800000000000000;
          }
          else {
            uint64_t v18 = 0x8000000000000;
          }
          BOOL v19 = (v18 & v15) != 0;
          if ((a4 & 2) == 0) {
            uint64_t v17 = 0x8000000000000;
          }
          BOOL v20 = (v17 & a4) != 0;
          if ((v15 ^ a4) & 0x7FFF8) != 0 || ((v20 ^ v19)) {
            return v8;
          }
          uint64_t v21 = (uint64_t *)*a1;
          uint64_t v53 = a4;
          LODWORD(v54) = 0;
          LODWORD(v56) = v13;
          v57[0] = 0;
          sub_1CD62DC70(v21, &v53, &v56);
          uint64_t v23 = v22;
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[1] + 32))(a1[1], this);
          llvm::MachineOperand::setReg(*((void *)this + 4) + 32, *(_DWORD *)(*(void *)(v23 + 32) + 4));
          goto LABEL_34;
        }
        if ((v16 & 0xFFFFFFFFFFFFFFF9) != 0 && (v16 & 4) != 0) {
          return v8;
        }
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[1] + 32))(a1[1], this);
        sub_1CD61B250((void *)*a1, *((void *)this + 4), v4, 2u);
        sub_1CD61B250((void *)*a1, *((void *)this + 4), v4, 3u);
        goto LABEL_33;
      }
      if (v7 - 149 >= 4 && v7 != 163) {
        return v8;
      }
      goto LABEL_42;
    }
    if (v7 == 125)
    {
LABEL_9:
      if (a3) {
        return v8;
      }
      goto LABEL_38;
    }
    if (v7 - 130 >= 2)
    {
      if (v7 != 119) {
        return v8;
      }
LABEL_38:
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[1] + 32))(a1[1], this);
      uint64_t v24 = (void *)*a1;
      uint64_t v25 = *((void *)this + 4);
      uint64_t v8 = 1;
      uint64_t v26 = v4;
      unsigned int v27 = 1;
LABEL_43:
      sub_1CD61B250(v24, v25, v26, v27);
      sub_1CD61B19C(a1, *((void *)this + 4), v4);
LABEL_44:
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[1] + 40))(a1[1], this);
      return v8;
    }
    goto LABEL_75;
  }
  uint64_t v9 = v7 - 177;
  if (v9 > 0x23) {
    goto LABEL_73;
  }
  if (((1 << (v7 + 79)) & 0x800000281) != 0) {
    goto LABEL_9;
  }
  if (((1 << (v7 + 79)) & 0x3CFC00) != 0)
  {
LABEL_42:
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[1] + 32))(a1[1], this);
    uint64_t v8 = 1;
    sub_1CD61B250((void *)*a1, *((void *)this + 4), v4, 1u);
    uint64_t v24 = (void *)*a1;
    uint64_t v25 = *((void *)this + 4);
    uint64_t v26 = v4;
    unsigned int v27 = 2;
    goto LABEL_43;
  }
  if (v9 != 29)
  {
LABEL_73:
    if (v7 == 165) {
      goto LABEL_42;
    }
    if (v7 != 166) {
      return v8;
    }
LABEL_75:
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)a1[1] + 32))(a1[1], this);
    uint64_t v8 = 1;
    sub_1CD61B250((void *)*a1, *((void *)this + 4), v4, 1u);
    sub_1CD61B250((void *)*a1, *((void *)this + 4), v4, 2u);
    uint64_t v24 = (void *)*a1;
    uint64_t v25 = *((void *)this + 4);
    uint64_t v26 = v4;
    unsigned int v27 = 3;
    goto LABEL_43;
  }

  return sub_1CD624E94(a1, (uint64_t)this, a3, a4);
}

void sub_1CD618E18(uint64_t *a1, int a2, unsigned int a3, uint64_t a4)
{
  v36[4] = *MEMORY[0x1E4F143B8];
  if (a2 < 0 && (uint64_t v8 = a1[2], (a2 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v8 + 432))) {
    unint64_t v9 = *(void *)(*(void *)(v8 + 424) + 8 * (a2 & 0x7FFFFFFF));
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v34 = v9;
  uint64_t v11 = sub_1CBA15978(&v34);
  unint64_t v12 = v11;
  if (a3 != 1) {
    unint64_t v12 = sub_1CBA5A95C(a3, v11);
  }
  unsigned int v13 = v34;
  uint64_t v14 = 0x800000000000000;
  if ((v34 & 2) == 0) {
    uint64_t v14 = 0x8000000000000;
  }
  if ((v14 & v34) != 0)
  {
    unint64_t v17 = v12;
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v10);
    unint64_t v12 = v17;
    unsigned int v13 = v34;
  }
  unsigned int v15 = (unsigned __int16)(v13 >> 3);
  uint64_t v16 = v15 % a3;
  if (v16)
  {
    unsigned int v18 = v15 / a3;
    unint64_t v19 = v12;
    v35[0] = v36;
    v35[1] = (void *)0x800000000;
    int v20 = a2;
    unsigned int v21 = v15;
    sub_1CC724218(a1, v20, v11, v15, (uint64_t)v35);
    if (v21 >= a3)
    {
      LODWORD(v22) = 0;
      if (v18 <= 1) {
        int v23 = 1;
      }
      else {
        int v23 = v18;
      }
      do
      {
        uint64_t v24 = *a1;
        unint64_t v32 = v19;
        int v33 = 0;
        sub_1CC73661C(v24, (uint64_t)&v32, (int *)v35[0] + v22, a3);
        unint64_t v26 = *(unsigned int *)(a4 + 8);
        if (v26 >= *(unsigned int *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v26) = *(_DWORD *)(*(void *)(v25 + 32) + 4);
        ++*(_DWORD *)(a4 + 8);
        uint64_t v22 = v22 + a3;
        --v23;
      }
      while (v23);
    }
    else
    {
      uint64_t v22 = 0;
    }
    if (v16 == 1)
    {
      int v27 = *((_DWORD *)v35[0] + v22);
    }
    else
    {
      unint64_t v28 = sub_1CBA5A95C(v16, v11);
      uint64_t v29 = *a1;
      unint64_t v32 = v28;
      int v33 = 0;
      sub_1CC73661C(v29, (uint64_t)&v32, (int *)v35[0] + v22, v16);
      int v27 = *(_DWORD *)(*(void *)(v30 + 32) + 4);
    }
    unsigned int v31 = *(_DWORD *)(a4 + 8);
    if (v31 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a4 + 4 * v31) = v27;
    ++*(_DWORD *)(a4 + 8);
    if (v35[0] != v36) {
      free(v35[0]);
    }
  }
  else
  {
    sub_1CC724218(a1, a2, v12, v15 / a3, a4);
  }
}

void sub_1CD6190B8(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  _DWORD v18[4] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = v18;
  uint64_t v17 = 0x800000000;
  unint64_t v7 = a4 - 1;
  if (a4 != 1)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 1;
    do
    {
      sub_1CD619218(a1, (char *)&v16, *(_DWORD *)(a3 + 4 * v8));
      uint64_t v8 = v9;
    }
    while (v7 > v9++);
  }
  int v11 = *(_DWORD *)(a3 + 4 * v7);
  if (v11 < 0
    && (uint64_t v12 = a1[2], (v11 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v12 + 432))
    && (*(void *)(*(void *)(v12 + 424) + 8 * (v11 & 0x7FFFFFFF)) & 1) != 0)
  {
    if (v17 >= HIDWORD(v17)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v16 + v17) = v11;
    unsigned int v13 = v17 + 1;
    LODWORD(v17) = v17 + 1;
  }
  else
  {
    sub_1CD619218(a1, (char *)&v16, v11);
    unsigned int v13 = v17;
  }
  uint64_t v14 = *a1;
  v15[0] = a2;
  v15[2] = 1;
  sub_1CC73661C(v14, (uint64_t)v15, (int *)v16, v13);
  if (v16 != v18) {
    free(v16);
  }
}

void sub_1CD619218(uint64_t *a1, char *a2, int a3)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  if (a3 < 0 && (uint64_t v5 = a1[2], (a3 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v5 + 432))) {
    unint64_t v6 = *(void *)(*(void *)(v5 + 424) + 8 * (a3 & 0x7FFFFFFF));
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v10 = v6;
  __src = v13;
  uint64_t v12 = 0x800000000;
  uint64_t v8 = v6;
  if ((v6 & 0xFFFFFFFFFFFFFFF9) != 0 && (v6 & 4) != 0)
  {
    uint64_t v8 = sub_1CBA15978(&v10);
    unint64_t v6 = v10;
  }
  uint64_t v9 = 0x800000000000000;
  if ((v6 & 2) == 0) {
    uint64_t v9 = 0x8000000000000;
  }
  if ((v9 & v6) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
    LODWORD(v6) = v10;
  }
  sub_1CC724218(a1, a3, v8, (unsigned __int16)(v6 >> 3), (uint64_t)&__src);
  sub_1CB925718((unsigned int *)a2, __src, (unsigned char *)__src + 4 * v12);
  if (__src != v13) {
    free(__src);
  }
}

uint64_t sub_1CD619348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  int v6 = v5;
  uint64_t v21 = v7;
  uint64_t v22 = v8;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = v4;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 8) + 16) + 136))(*(void *)(*(void *)(v4 + 8) + 16));
  v29[1] = 0x400000000;
  char v31 = 0;
  v32[0] = &v33;
  v32[1] = 0x400000000;
  v34[0] = &v35;
  v34[1] = 0x200000000;
  uint64_t v36 = 0;
  long long v38 = v40;
  uint64_t v39 = 0x2000000000;
  v40[1216] = 0;
  char v43 = 0;
  long long v41 = 0u;
  char v42 = 0;
  int v44 = 0;
  char v45 = 1;
  int v46 = 0;
  int v23 = v6;
  uint64_t v24 = 9;
  uint64_t v25 = 0;
  uint64_t v26 = v21;
  int v27 = 0;
  uint64_t v28 = *v12;
  v29[0] = &v30;
  sub_1CB927924((uint64_t)v29, (uint64_t)(v12 + 1));
  char v31 = *((unsigned char *)v12 + 72);
  sub_1CB927A18((uint64_t)v32, (uint64_t)(v12 + 10));
  sub_1CB927A18((uint64_t)v34, (uint64_t)(v12 + 14));
  uint64_t v36 = v12[17];
  int v37 = *((_DWORD *)v12 + 36);
  sub_1CC72D258(v10, v10 + 152 * v22, (uint64_t)&v38);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v14 + 72))(v14, v13, &v23);
  uint64_t v16 = v38;
  if (v39)
  {
    uint64_t v17 = 152 * v39;
    unsigned int v18 = (char *)v38 - 152;
    do
    {
      sub_1CC6EA9DC(&v18[v17]);
      v17 -= 152;
    }
    while (v17);
    uint64_t v16 = v38;
  }
  if (v16 != v40) {
    free(v16);
  }
  if (v15) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = 2;
  }
  sub_1CC6EA9DC(&v28);
  return v19;
}

uint64_t sub_1CD6195AC(uint64_t *a1, llvm::MachineInstr *this, int a3, unint64_t a4)
{
  v70[1] = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 2;
  }
  int v6 = this;
  uint64_t v8 = *((void *)this + 4);
  int v9 = *(_DWORD *)(v8 + 4);
  uint64_t v10 = a1[2];
  if (v9 < 0
    && (v9 & 0x7FFFFFFFu) < *(_DWORD *)(v10 + 432)
    && (*(void *)(*(void *)(v10 + 424) + 8 * (v9 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
    && (*(void *)(*(void *)(v10 + 424) + 8 * (v9 & 0x7FFFFFFF)) & 4) != 0)
  {
    return 2;
  }
  unsigned int NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs(this);
  if (NumExplicitDefs == 2) {
    int v13 = *(_DWORD *)(v8 + 36);
  }
  else {
    int v13 = 0;
  }
  int v14 = *(_DWORD *)(v8 + 32 * NumExplicitDefs + 4);
  int v15 = *(_DWORD *)(v8 + 32 * (NumExplicitDefs + 1) + 4);
  if (*((_DWORD *)v6 + 10) == NumExplicitDefs + 3) {
    int v16 = *(_DWORD *)(v8 + 32 * (NumExplicitDefs + 2) + 4);
  }
  else {
    int v16 = 0;
  }
  if (v9 < 0 && (v9 & 0x7FFFFFFFu) < *(_DWORD *)(v10 + 432)) {
    unint64_t v17 = *(void *)(*(void *)(v10 + 424) + 8 * (v9 & 0x7FFFFFFF));
  }
  else {
    unint64_t v17 = 0;
  }
  uint64_t v45 = 0;
  unint64_t v46 = 0;
  uint64_t v68 = v70;
  uint64_t v69 = 0x200000000;
  unint64_t v65 = &v67;
  uint64_t v66 = 0x200000000;
  uint64_t v62 = &v64;
  uint64_t v63 = 0x200000000;
  v60[0] = (int *)&v61;
  v60[1] = (int *)0x200000000;
  uint64_t v57 = (int *)&v59;
  uint64_t v58 = 0x200000000;
  sub_1CC7243F4(a1, v14, v17, a4, (uint64_t *)&v46, (uint64_t)&v68, (int **)&v62);
  unint64_t v43 = v17;
  sub_1CC7243F4(a1, v15, v17, a4, &v45, (uint64_t)&v65, v60);
  int v19 = v69;
  if (v63)
  {
    int v20 = v6;
    unint64_t v21 = 0;
    uint64_t v22 = 4 * v63;
    do
    {
      if (v69 >= (unint64_t)HIDWORD(v69)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v68[v69] = *(_DWORD *)((char *)v62 + v21);
      LODWORD(v69) = v69 + 1;
      if (v66 >= (unint64_t)HIDWORD(v66)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v65 + v66) = v60[0][v21 / 4];
      LODWORD(v66) = v66 + 1;
      v21 += 4;
    }
    while (v22 != v21);
    unsigned int v23 = v69;
    int v6 = v20;
  }
  else
  {
    unsigned int v23 = v69;
  }
  if (HIDWORD(v58) < v23) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v24 = v19;
  if (v23)
  {
    unint64_t v41 = v19;
    char v42 = v6;
    unint64_t v25 = 0;
    uint64_t v26 = 4 * v23;
    uint64_t v44 = v23 - 1;
    uint64_t v27 = 4 * v44;
    do
    {
      uint64_t v28 = a1[2];
      int v29 = v68[v25 / 4];
      if (v29 < 0 && (uint64_t v37 = v29 & 0x7FFFFFFF, v37 < *(_DWORD *)(v28 + 432))) {
        uint64_t v30 = *(void *)(*(void *)(v28 + 424) + 8 * v37);
      }
      else {
        uint64_t v30 = 0;
      }
      int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v28, v30, "", 0);
      int v32 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], 9, "", 0);
      int v33 = v32;
      if (v13) {
        int v34 = v13;
      }
      else {
        int v34 = v32;
      }
      if (v27 == v25) {
        int v35 = v34;
      }
      else {
        int v35 = v32;
      }
      uint64_t v36 = *a1;
      if (v16)
      {
        int v53 = GenericVirtualRegister;
        int v54 = 1;
        if (v27 == v25)
        {
          int v55 = v34;
          int v56 = 1;
          int v47 = v68[v44];
          int v48 = 0;
          int v49 = *((_DWORD *)v65 + v44);
        }
        else
        {
          int v55 = v33;
          int v56 = 1;
          int v47 = v68[v25 / 4];
          int v48 = 0;
          int v49 = *(_DWORD *)((char *)v65 + v25);
        }
        int v50 = 0;
        int v51 = v16;
        int v52 = 0;
        long long v38 = *(void (**)(void))(*(void *)v36 + 32);
      }
      else
      {
        int v53 = GenericVirtualRegister;
        int v54 = 1;
        int v55 = v35;
        int v56 = 1;
        int v47 = v68[v25 / 4];
        int v48 = 0;
        int v49 = *(_DWORD *)((char *)v65 + v25);
        int v50 = 0;
        long long v38 = *(void (**)(void))(*(void *)v36 + 32);
      }
      v38();
      if (v58 >= (unint64_t)HIDWORD(v58)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v57[v58] = GenericVirtualRegister;
      unsigned int v39 = v58 + 1;
      LODWORD(v58) = v58 + 1;
      v25 += 4;
      int v16 = v35;
    }
    while (v26 != v25);
    unint64_t v24 = v41;
    int v6 = v42;
  }
  else
  {
    unsigned int v39 = v58;
  }
  if (v39 >= v24) {
    uint64_t v40 = v24;
  }
  else {
    uint64_t v40 = v39;
  }
  sub_1CC724950(a1, *(_DWORD *)(*((void *)v6 + 4) + 4), v43, a4, v57, v40, v46, v18, (uint64_t)&v57[v24], v39 - v24);
  llvm::MachineInstr::eraseFromParent(v6);
  if (v57 != (int *)&v59) {
    free(v57);
  }
  if ((uint64_t *)v60[0] != &v61) {
    free(v60[0]);
  }
  if (v62 != &v64) {
    free(v62);
  }
  if (v65 != &v67) {
    free(v65);
  }
  if (v68 != (_DWORD *)v70) {
    free(v68);
  }
  return 1;
}

uint64_t sub_1CD619BD4(uint64_t *a1, uint64_t a2, int a3, unint64_t a4)
{
  v66[4] = *MEMORY[0x1E4F143B8];
  unint64_t v60 = a4;
  if (a3) {
    return 2;
  }
  unint64_t v6 = a4;
  uint64_t v9 = *(void *)(a2 + 48);
  if ((v9 & 7) != 0)
  {
    unint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v10;
  }
  if ((*(_WORD *)(v10 + 36) & 0xF00) != 0) {
    return 2;
  }
  int v11 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 32);
  int v13 = *(_DWORD *)(v12 + 4);
  if (v13 < 0 && (uint64_t v23 = a1[2], (v13 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v23 + 432))) {
    unint64_t v14 = *(void *)(*(void *)(v23 + 424) + 8 * (v13 & 0x7FFFFFFF));
  }
  else {
    unint64_t v14 = 0;
  }
  int v15 = *(_DWORD *)(v12 + 36);
  unint64_t v59 = v14;
  uint64_t v17 = sub_1CB8F1DC4(&v59);
  if (v16 == 1) {
  uint64_t v18 = *(void *)(a2 + 48);
  }
  if ((v18 & 7) != 0)
  {
    unint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v18 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v17 != 8 * sub_1CB8F20C0(v19)) {
    return 2;
  }
  unint64_t v58 = 0;
  uint64_t v64 = (int *)v66;
  uint64_t v65 = 0x800000000;
  uint64_t v61 = (int *)v63;
  uint64_t v62 = 0x800000000;
  if (v11 == 90)
  {
    unint64_t v20 = sub_1CC72AE20(v59, v6, &v58);
    unsigned int v21 = v20;
    unint64_t v22 = HIDWORD(v20);
  }
  else
  {
    sub_1CC7243F4(a1, v13, v59, v6, (uint64_t *)&v58, (uint64_t)&v64, &v61);
    unsigned int v21 = v65;
    LODWORD(v22) = v62;
  }
  if (v21 == -1)
  {
    uint64_t v4 = 2;
  }
  else
  {
    unsigned int v40 = v22;
    if (v15 < 0 && (uint64_t v39 = a1[2], (v15 & 0x7FFFFFFFu) < *(_DWORD *)(v39 + 432))) {
      unint64_t v24 = *(void *)(*(void *)(v39 + 424) + 8 * (v15 & 0x7FFFFFFF));
    }
    else {
      unint64_t v24 = 0;
    }
    unint64_t v57 = v24;
    unsigned int v26 = sub_1CB8F1DC4(&v57);
    if (v25 == 1) {
    int v28 = sub_1CB8F1DC4(&v59);
    }
    if (v27 == 1) {
    int v29 = *(unsigned __int8 *)(*(void *)(**(void **)(*a1 + 8) + 40) + 272);
    }
    uint64_t v30 = *(void *)(a2 + 48);
    if ((v30 & 7) != 0)
    {
      char v31 = *(long long **)((v30 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      char v31 = (long long *)(v30 & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a2 + 48) = v31;
    }
    long long v32 = v31[3];
    long long v54 = v31[2];
    long long v55 = v32;
    long long v56 = v31[4];
    long long v33 = v31[1];
    long long v52 = *v31;
    long long v53 = v33;
    unint64_t v41 = a1;
    int v42 = v28;
    int v43 = v15;
    uint64_t v44 = (8 * v26) | 1;
    long long v46 = v33;
    long long v47 = v54;
    long long v48 = v32;
    long long v49 = v56;
    long long v45 = v52;
    BOOL v50 = v11 == 90;
    char v51 = v29;
    if (v29)
    {
      int v35 = sub_1CB8F1DC4(&v60);
      if (v34 == 1) {
      uint64_t v36 = (v28 - v35);
      }
      unint64_t v6 = v60;
    }
    else
    {
      uint64_t v36 = 0;
    }
    uint64_t v37 = sub_1CC72AF6C(&v41, v6, (uint64_t)&v64, v21, v36);
    if ((v58 & 0xFFFFFFFFFFFFFFF9) != 0) {
      sub_1CC72AF6C(&v41, v58, (uint64_t)&v61, v40, v37);
    }
    if (v11 == 90) {
      sub_1CC724950(a1, v13, v59, v60, v64, v65, v58, v38, (uint64_t)v61, v62);
    }
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    uint64_t v4 = 1;
  }
  if (v61 != (int *)v63) {
    free(v61);
  }
  if (v64 != (int *)v66) {
    free(v64);
  }
  return v4;
}

uint64_t sub_1CD619F88(uint64_t *a1, llvm::MachineInstr *a2, int a3, uint64_t a4)
{
  v51[2] = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 2;
  }
  uint64_t v8 = (_DWORD *)*((void *)a2 + 4);
  int v9 = v8[9];
  uint64_t v10 = a1[2];
  if (v9 < 0
    && (v9 & 0x7FFFFFFFu) < *(_DWORD *)(v10 + 432)
    && (*(void *)(*(void *)(v10 + 424) + 8 * (v9 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
    && (*(void *)(*(void *)(v10 + 424) + 8 * (v9 & 0x7FFFFFFF)) & 4) != 0)
  {
    return 2;
  }
  int v11 = v8[1];
  int v25 = v11;
  if (v11 < 0 && (v11 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v10 + 432)) {
    unint64_t v12 = *(void *)(*(void *)(v10 + 424) + 8 * (v11 & 0x7FFFFFFF));
  }
  else {
    unint64_t v12 = 0;
  }
  long long v49 = (int *)v51;
  uint64_t v50 = 0x400000000;
  long long v46 = v48;
  uint64_t v47 = 0x400000000;
  int v43 = v45;
  uint64_t v44 = 0x400000000;
  unsigned int v40 = (int *)v42;
  uint64_t v41 = 0x400000000;
  v38[0] = v39;
  v38[1] = (void *)0x400000000;
  unint64_t v35 = 0;
  v36[0] = v37;
  v36[1] = (void *)0x400000000;
  sub_1CC7243F4(a1, v8[17], v12, a4, (uint64_t *)&v35, (uint64_t)&v43, &v40);
  uint64_t v34 = 0;
  sub_1CC7243F4(a1, *(_DWORD *)(*((void *)a2 + 4) + 100), v12, a4, &v34, (uint64_t)v38, (int **)v36);
  if (v44)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 4 * v44;
    do
    {
      uint64_t v16 = *a1;
      unint64_t v32 = a4;
      int v33 = 0;
      LODWORD(v30) = v9;
      int v31 = 0;
      LODWORD(v28) = *(_DWORD *)&v43[v14];
      int v29 = 0;
      LODWORD(v26) = *(_DWORD *)((char *)v38[0] + v14);
      int v27 = 0;
      sub_1CC739494(v16, (uint64_t *)&v32, &v30, &v28, &v26, 0);
      if (v50 >= (unint64_t)HIDWORD(v50)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v49[v50] = *(_DWORD *)(*(void *)(v17 + 32) + 4);
      LODWORD(v50) = v50 + 1;
      v14 += 4;
    }
    while (v15 != v14);
  }
  unint64_t v18 = v35;
  if (v41)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 4 * v41;
    do
    {
      uint64_t v21 = *a1;
      unint64_t v32 = v18;
      int v33 = 0;
      LODWORD(v30) = v9;
      int v31 = 0;
      LODWORD(v28) = v40[v19 / 4];
      int v29 = 0;
      LODWORD(v26) = *(_DWORD *)((char *)v36[0] + v19);
      int v27 = 0;
      sub_1CC739494(v21, (uint64_t *)&v32, &v30, &v28, &v26, 0);
      if (v47 >= (unint64_t)HIDWORD(v47)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v46[v47] = *(_DWORD *)(*(void *)(v22 + 32) + 4);
      unsigned int v23 = v47 + 1;
      LODWORD(v47) = v47 + 1;
      v19 += 4;
    }
    while (v20 != v19);
  }
  else
  {
    unsigned int v23 = v47;
  }
  sub_1CC724950(a1, v25, v12, a4, v49, v50, v18, v13, (uint64_t)v46, v23);
  llvm::MachineInstr::eraseFromParent(a2);
  if (v36[0] != v37) {
    free(v36[0]);
  }
  if (v38[0] != v39) {
    free(v38[0]);
  }
  if (v40 != (int *)v42) {
    free(v40);
  }
  if (v43 != v45) {
    free(v43);
  }
  if (v46 != (_DWORD *)v48) {
    free(v46);
  }
  if (v49 != (int *)v51) {
    free(v49);
  }
  return 1;
}

uint64_t sub_1CD61A350(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unint64_t v44 = a3;
  uint64_t v5 = *(void *)(a2 + 32);
  int v6 = *(_DWORD *)(v5 + 4);
  int v7 = *(_DWORD *)(v5 + 36);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
    uint64_t v9 = *(void *)(*(void *)(v8 + 424) + 8 * (v6 & 0x7FFFFFFF));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v7 < 0 && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
    unint64_t v10 = *(void *)(*(void *)(v8 + 424) + 8 * (v7 & 0x7FFFFFFF));
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v43 = v10;
  unsigned int v12 = sub_1CB8F1DC4(&v44);
  if (v11 == 1) {
  if ((v10 & 1) == 0)
  }
    return 2;
  uint64_t v16 = sub_1CB8F1DC4(&v43);
  if (v15 == 1) {
  if (v16 != 2 * v12)
  }
    return 2;
  int v17 = **(unsigned __int16 **)(a2 + 16);
  unint64_t v18 = *(void **)a1;
  LODWORD(v47) = v7;
  int v48 = 0;
  sub_1CC7363F0(v18, v44, (int *)&v47);
  uint64_t v20 = v19;
  *(void *)&long long v47 = v44;
  DWORD2(v47) = 0;
  uint64_t v21 = sub_1CC7362A8((uint64_t)v18, (unint64_t *)&v47, 0);
  *(void *)&long long v39 = 9;
  DWORD2(v39) = 0;
  LODWORD(v47) = *(_DWORD *)(*(void *)(v20 + 32) + 36);
  int v48 = 0;
  *(void *)&long long v45 = v21;
  *((void *)&v45 + 1) = v22;
  int v46 = 1;
  uint64_t v23 = sub_1CC73933C((uint64_t)v18, 32, (uint64_t)&v39, &v47, &v45);
  uint64_t v25 = v24;
  int v26 = *(_DWORD *)(*(void *)(v20 + 32) + 4);
  *(void *)&long long v45 = v9;
  DWORD2(v45) = 0;
  LODWORD(v47) = v26;
  int v48 = 0;
  if (v17 == 210) {
    uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v18 + 32))(v18, 210, &v45, 1, &v47, 1, 0);
  }
  else {
    uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v18 + 32))(v18, 209, &v45, 1, &v47, 1, 0);
  }
  uint64_t v29 = v27;
  uint64_t v30 = v28;
  *(void *)&long long v47 = v9;
  DWORD2(v47) = 0;
  uint64_t v31 = sub_1CC7362A8((uint64_t)v18, (unint64_t *)&v47, v12);
  *(void *)&long long v45 = v9;
  DWORD2(v45) = 0;
  *(void *)&long long v47 = v29;
  *((void *)&v47 + 1) = v30;
  uint64_t v13 = 1;
  int v48 = 1;
  uint64_t v49 = v31;
  uint64_t v50 = v32;
  int v51 = 1;
  uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v18 + 32))(v18, 45, &v45, 1, &v47, 2, 0);
  uint64_t v35 = v34;
  int v36 = *(_DWORD *)(*(void *)(v20 + 32) + 36);
  *(void *)&long long v45 = v9;
  DWORD2(v45) = 0;
  LODWORD(v47) = v36;
  int v48 = 0;
  uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v18 + 32))(v18, 210, &v45, 1, &v47, 1, 0);
  LODWORD(v41) = v6;
  int v42 = 1;
  *(void *)&long long v47 = v23;
  *((void *)&v47 + 1) = v25;
  int v48 = 1;
  *(void *)&long long v45 = v33;
  *((void *)&v45 + 1) = v35;
  int v46 = 1;
  *(void *)&long long v39 = v37;
  *((void *)&v39 + 1) = v38;
  int v40 = 1;
  sub_1CC739494((uint64_t)v18, &v41, &v47, &v45, &v39, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  return v13;
}

uint64_t sub_1CD61A6D4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  unint64_t v44 = a3;
  uint64_t v5 = *(void *)(a2 + 32);
  int v6 = *(_DWORD *)(v5 + 4);
  int v7 = *(_DWORD *)(v5 + 36);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
    uint64_t v9 = *(void *)(*(void *)(v8 + 424) + 8 * (v6 & 0x7FFFFFFF));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v7 < 0 && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
    unint64_t v10 = *(void *)(*(void *)(v8 + 424) + 8 * (v7 & 0x7FFFFFFF));
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v43 = v10;
  unsigned int v12 = sub_1CB8F1DC4(&v44);
  if (v11 == 1) {
  if ((v10 & 1) == 0)
  }
    return 2;
  uint64_t v16 = sub_1CB8F1DC4(&v43);
  if (v15 == 1) {
  if (v16 != 2 * v12)
  }
    return 2;
  int v17 = **(unsigned __int16 **)(a2 + 16);
  unint64_t v18 = *(void **)a1;
  LODWORD(v47) = v7;
  int v48 = 0;
  sub_1CC7363F0(v18, v44, (int *)&v47);
  uint64_t v20 = v19;
  *(void *)&long long v47 = v44;
  DWORD2(v47) = 0;
  uint64_t v21 = sub_1CC7362A8((uint64_t)v18, (unint64_t *)&v47, 0);
  *(void *)&long long v39 = 9;
  DWORD2(v39) = 0;
  LODWORD(v47) = *(_DWORD *)(*(void *)(v20 + 32) + 4);
  int v48 = 0;
  *(void *)&long long v45 = v21;
  *((void *)&v45 + 1) = v22;
  int v46 = 1;
  uint64_t v23 = sub_1CC73933C((uint64_t)v18, 32, (uint64_t)&v39, &v47, &v45);
  uint64_t v25 = v24;
  int v26 = *(_DWORD *)(*(void *)(v20 + 32) + 36);
  *(void *)&long long v45 = v9;
  DWORD2(v45) = 0;
  LODWORD(v47) = v26;
  int v48 = 0;
  if (v17 == 208) {
    uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v18 + 32))(v18, 208, &v45, 1, &v47, 1, 0);
  }
  else {
    uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v18 + 32))(v18, 207, &v45, 1, &v47, 1, 0);
  }
  uint64_t v29 = v27;
  uint64_t v30 = v28;
  *(void *)&long long v47 = v9;
  DWORD2(v47) = 0;
  uint64_t v31 = sub_1CC7362A8((uint64_t)v18, (unint64_t *)&v47, v12);
  *(void *)&long long v45 = v9;
  DWORD2(v45) = 0;
  *(void *)&long long v47 = v29;
  *((void *)&v47 + 1) = v30;
  uint64_t v13 = 1;
  int v48 = 1;
  uint64_t v49 = v31;
  uint64_t v50 = v32;
  int v51 = 1;
  uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v18 + 32))(v18, 45, &v45, 1, &v47, 2, 0);
  uint64_t v35 = v34;
  int v36 = *(_DWORD *)(*(void *)(v20 + 32) + 4);
  *(void *)&long long v45 = v9;
  DWORD2(v45) = 0;
  LODWORD(v47) = v36;
  int v48 = 0;
  uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v18 + 32))(v18, 208, &v45, 1, &v47, 1, 0);
  LODWORD(v41) = v6;
  int v42 = 1;
  *(void *)&long long v47 = v23;
  *((void *)&v47 + 1) = v25;
  int v48 = 1;
  *(void *)&long long v45 = v33;
  *((void *)&v45 + 1) = v35;
  int v46 = 1;
  *(void *)&long long v39 = v37;
  *((void *)&v39 + 1) = v38;
  int v40 = 1;
  sub_1CC739494((uint64_t)v18, &v41, &v47, &v45, &v39, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  return v13;
}

uint64_t sub_1CD61AA58(uint64_t a1, llvm::MachineInstr *a2, unint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unint64_t v33 = a3;
  uint64_t v5 = *((void *)a2 + 4);
  int v6 = *(_DWORD *)(v5 + 4);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432)) {
    uint64_t v8 = *(void *)(*(void *)(v7 + 424) + 8 * (v6 & 0x7FFFFFFF));
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = *(_DWORD *)(v5 + 36);
  if (v9 < 0 && (uint64_t v30 = v9 & 0x7FFFFFFF, v30 < *(_DWORD *)(v7 + 432))) {
    unint64_t v10 = *(void *)(*(void *)(v7 + 424) + 8 * v30);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v10;
  int v12 = sub_1CB8F1DC4(&v33);
  if (v11 == 1) {
  if ((v10 & 1) == 0)
  }
    return 2;
  uint64_t v15 = sub_1CB8F1DC4(&v32);
  if (v16 == 1)
  {
    uint64_t v31 = v15;
    uint64_t v15 = v31;
  }
  if (v15 != 2 * v12) {
    return 2;
  }
  int v17 = *(void **)a1;
  LODWORD(v34[0]) = *(_DWORD *)(*((void *)a2 + 4) + 36);
  int v35 = 0;
  sub_1CC7363F0(v17, v33, (int *)v34);
  uint64_t v19 = v18;
  uint64_t v20 = *(void **)a1;
  int v21 = *(_DWORD *)(*(void *)(v18 + 32) + 4);
  uint64_t v39 = v8;
  int v40 = 0;
  LODWORD(v34[0]) = v21;
  int v35 = 0;
  uint64_t v13 = 1;
  uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, void *, uint64_t, void))(*v20 + 32))(v20, 211, &v39, 1, v34, 1, 0);
  uint64_t v24 = v23;
  uint64_t v25 = *(void **)a1;
  int v26 = *(_DWORD *)(*(void *)(v19 + 32) + 36);
  uint64_t v39 = v8;
  int v40 = 0;
  LODWORD(v34[0]) = v26;
  int v35 = 0;
  uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, void *, uint64_t, void))(*v25 + 32))(v25, 211, &v39, 1, v34, 1, 0);
  uint64_t v28 = *(void **)a1;
  LODWORD(v39) = v6;
  int v40 = 1;
  v34[0] = v27;
  v34[1] = v29;
  int v35 = 1;
  uint64_t v36 = v22;
  uint64_t v37 = v24;
  int v38 = 1;
  (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, void *, uint64_t, void))(*v28 + 32))(v28, 45, &v39, 1, v34, 2, 0);
  llvm::MachineInstr::eraseFromParent(a2);
  return v13;
}

uint64_t sub_1CD61ACD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], a3, "", 0);
  uint64_t v8 = *(void *)(*a1 + 48);
  if (!v8 || (*(unsigned char *)v8 & 4) == 0)
  {
    while ((*(_WORD *)(v8 + 44) & 8) != 0)
      uint64_t v8 = *(void *)(v8 + 8);
  }
  *(void *)(*a1 + 48) = *(void *)(v8 + 8);
  uint64_t v9 = *a1;
  v13[0] = *(_DWORD *)(a2 + 4);
  v13[2] = 1;
  unsigned int v10 = GenericVirtualRegister;
  v12[0] = GenericVirtualRegister;
  v12[4] = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v9 + 32))(v9, a4, v13, 1, v12, 1, 0);
  return llvm::MachineOperand::setReg(a2, v10);
}

uint64_t sub_1CD61ADF0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = a2 + 32 * a4;
  uint64_t v8 = a3;
  int v9 = 0;
  v7[0] = *(_DWORD *)(v4 + 4);
  v7[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 119, &v8, 1, v7, 1, 0);
  return llvm::MachineOperand::setReg(v4, *(_DWORD *)(*(void *)(v5 + 32) + 4));
}

unsigned int *sub_1CD61AE7C(unsigned int *result, uint64_t a2, int *__src, int *a4)
{
  uint64_t v5 = __src;
  uint64_t v6 = *(void *)result;
  uint64_t v7 = result[2];
  if (*(void *)result + 4 * v7 == a2)
  {
    return sub_1CB925718(result, __src, a4);
  }
  else
  {
    uint64_t v8 = (a2 - v6) >> 2;
    unint64_t v9 = a4 - __src;
    if (v7 + v9 > result[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v10 = (_DWORD *)(v6 + 4 * v8);
    int v11 = (unsigned char *)(v6 + 4 * v7);
    unint64_t v12 = (v11 - (unsigned char *)v10) >> 2;
    if (v12 >= v9)
    {
      uint64_t result = (unsigned int *)sub_1CD462190((uint64_t)result, &v11[-4 * v9], (char *)(v6 + 4 * v7));
      if (&v11[-4 * v9] != (unsigned char *)v10) {
        uint64_t result = (unsigned int *)memmove(&v10[v9], v10, &v11[-4 * v9] - (unsigned char *)v10);
      }
      if (v5 != a4)
      {
        return (unsigned int *)memmove(v10, v5, (char *)a4 - (char *)v5);
      }
    }
    else
    {
      unsigned int v13 = v7 + ((unint64_t)((char *)a4 - (char *)__src) >> 2);
      result[2] = v13;
      if (v8 != v7)
      {
        uint64_t result = (unsigned int *)memcpy((void *)(v6 + 4 * v13 - 4 * v12), v10, v11 - (unsigned char *)v10);
        do
        {
          int v14 = *v5++;
          *v10++ = v14;
          --v12;
        }
        while (v12);
      }
      if (v5 != a4)
      {
        return (unsigned int *)memcpy(v11, v5, (char *)a4 - (char *)v5);
      }
    }
  }
  return result;
}

uint64_t sub_1CD61B03C(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  if (a3) {
    return 2;
  }
  void v19[5] = v4;
  v19[6] = v5;
  int v8 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
  if ((v8 & 0x80000000) == 0) {
    return 2;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = v8 & 0x7FFFFFFF;
  if (v11 >= *(_DWORD *)(v10 + 432)) {
    return 2;
  }
  uint64_t v13 = *(void *)(*(void *)(v10 + 424) + 8 * v11);
  int v14 = **(unsigned __int16 **)(a2 + 16);
  v19[0] = v13;
  if ((v13 & 0xFFFFFFFFFFFFFFF9) != 0 && (v13 & 4) != 0) {
    uint64_t v13 = sub_1CBA15978(v19);
  }
  if (v13 != 129) {
    return 2;
  }
  if (a4)
  {
    unsigned int v16 = a4 >> 3;
  }
  else if ((a4 & 4) != 0)
  {
    unsigned int v16 = (a4 & 2) != 0 ? (unsigned __int16)(a4 >> 19) : a4 >> 19;
  }
  else
  {
    unsigned int v16 = (unsigned __int16)(a4 >> 3);
  }
  unsigned int v17 = v14 == 180 ? 17 : 16;
  if (v17 > v16) {
    return 2;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
  if (v14 == 180) {
    uint64_t v18 = 124;
  }
  else {
    uint64_t v18 = 126;
  }
  sub_1CD61ACD8((uint64_t *)a1, *(void *)(a2 + 32), a4, v18);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
  return 1;
}

uint64_t sub_1CD61B19C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*a1 + 48);
  if (!v5 || (*(unsigned char *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 8) != 0)
      uint64_t v5 = *(void *)(v5 + 8);
  }
  *(void *)(*a1 + 48) = *(void *)(v5 + 8);
  int v6 = *(_DWORD *)(a2 + 4);
  unsigned int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], a3, "", 0);
  llvm::MachineOperand::setReg(a2, GenericVirtualRegister);
  int v8 = (void *)*a1;
  LODWORD(v11) = v6;
  int v12 = 1;
  v10[0] = GenericVirtualRegister;
  _OWORD v10[4] = 0;
  return sub_1CD62D47C(v8, &v11, v10);
}

void sub_1CD61B250(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _OWORD v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2 + 32 * a4;
  unint64_t v9 = v11;
  uint64_t v10 = 0x800000000;
  uint64_t v7 = a3;
  int v8 = 0;
  v6[0] = *(_DWORD *)(v4 + 4);
  void v6[4] = 0;
  sub_1CD62D20C(a1, &v7, v6);
  llvm::MachineOperand::setReg(v4, *(_DWORD *)(*(void *)(v5 + 32) + 4));
  if (v9 != v11) {
    free(v9);
  }
}

uint64_t sub_1CD61B300(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2 + 32 * a4;
  int v5 = *(_DWORD *)(v4 + 4);
  uint64_t v9 = a3;
  int v10 = 0;
  v8[0] = v5;
  v8[4] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 82, &v9, 1, v8, 1, 0);
  return llvm::MachineOperand::setReg(v4, *(_DWORD *)(*(void *)(v6 + 32) + 4));
}

uint64_t sub_1CD61B3B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unsigned int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], a3, "", 0);
  uint64_t v6 = *(void *)(*a1 + 48);
  if (!v6 || (*(unsigned char *)v6 & 4) == 0)
  {
    while ((*(_WORD *)(v6 + 44) & 8) != 0)
      uint64_t v6 = *(void *)(v6 + 8);
  }
  *(void *)(*a1 + 48) = *(void *)(v6 + 8);
  uint64_t v7 = *a1;
  unsigned int v8 = GenericVirtualRegister;
  v11[0] = *(_DWORD *)(a2 + 4);
  __n128 v11[2] = 1;
  v10[0] = GenericVirtualRegister;
  _OWORD v10[4] = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v7 + 32))(v7, 82, v11, 1, v10, 1, 0);
  return llvm::MachineOperand::setReg(a2, v8);
}

void sub_1CD61B4C4(uint64_t *a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a3 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1[1] + 32))(a1[1], a2);
    sub_1CC7272A4(a1, *(void *)(a2 + 32), a4, 1u, 0x77u);
    uint64_t v7 = *(void (**)(void))(*(void *)a1[1] + 40);
    v7();
  }
  else
  {
    unsigned int v8 = *(_DWORD **)(a2 + 32);
    int v9 = v8[9];
    int v10 = v8[17];
    uint64_t v11 = a1[2];
    if (v10 < 0 && (v10 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432)) {
      unint64_t v12 = *(void *)(*(void *)(v11 + 424) + 8 * (v10 & 0x7FFFFFFF));
    }
    else {
      unint64_t v12 = 0;
    }
    if (v9 < 0 && (v9 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432)) {
      uint64_t v13 = *(void *)(*(void *)(v11 + 424) + 8 * (v9 & 0x7FFFFFFF));
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = **(unsigned __int16 **)(a2 + 16);
    int v15 = v8[25];
    int v41 = v8[9];
    int v42 = v8[1];
    if (v12)
    {
      uint64_t v16 = (v12 >> 3);
    }
    else if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v16 = (unsigned __int16)(v12 >> 19);
      }
      else {
        uint64_t v16 = (v12 >> 19);
      }
    }
    else
    {
      uint64_t v16 = (unsigned __int16)(v12 >> 3);
    }
    uint64_t v40 = v16;
    if (v14 == 146) {
      uint64_t v17 = 124;
    }
    else {
      uint64_t v17 = 126;
    }
    uint64_t v18 = *a1;
    *(void *)&long long v45 = a4;
    DWORD2(v45) = 0;
    LODWORD(v48) = v10;
    int v49 = 0;
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v18 + 32))(v18, v17, &v45, 1, &v48, 1, 0);
    uint64_t v21 = v20;
    uint64_t v22 = *a1;
    *(void *)&long long v45 = a4;
    DWORD2(v45) = 0;
    LODWORD(v48) = v15;
    int v49 = 0;
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v22 + 32))(v22, v17, &v45, 1, &v48, 1, 0);
    uint64_t v24 = *a1;
    uint64_t v25 = **(unsigned __int16 **)(a2 + 16);
    *(void *)&long long v45 = a4;
    DWORD2(v45) = 0;
    uint64_t v46 = v13;
    int v47 = 0;
    *(void *)&long long v48 = v19;
    *((void *)&v48 + 1) = v21;
    int v49 = 1;
    uint64_t v50 = v23;
    uint64_t v51 = v26;
    int v52 = 1;
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v24 + 32))(v24, v25, &v45, 2, &v48, 2, 0);
    uint64_t v28 = v27;
    int v29 = *(_DWORD *)(*(void *)(v27 + 32) + 4);
    uint64_t v30 = *a1;
    LODWORD(v45) = v42;
    DWORD2(v45) = 1;
    LODWORD(v48) = v29;
    int v49 = 0;
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v30 + 32))(v30, 119, &v45, 1, &v48, 1, 0);
    uint64_t v31 = *a1;
    *(void *)&long long v45 = a4;
    DWORD2(v45) = 0;
    LODWORD(v48) = v29;
    int v49 = 0;
    if (v14 == 146)
    {
      uint64_t v50 = v40;
      int v52 = 3;
      uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v31 + 32))(v31, 125, &v45, 1, &v48, 2, 0);
    }
    else
    {
      uint64_t v32 = sub_1CD62DA84(v31, (unint64_t *)&v45, &v48, v40);
    }
    if (a4)
    {
      unsigned int v34 = a4 >> 3;
    }
    else if ((a4 & 4) != 0)
    {
      if ((a4 & 2) != 0) {
        unsigned int v34 = (unsigned __int16)(a4 >> 19);
      }
      else {
        unsigned int v34 = a4 >> 19;
      }
    }
    else
    {
      unsigned int v34 = (unsigned __int16)(a4 >> 3);
    }
    uint64_t v35 = *a1;
    if (v34 >= 2 * (int)v40)
    {
      LODWORD(v43) = v41;
      int v44 = 1;
      LODWORD(v48) = v29;
      int v49 = 0;
      *(void *)&long long v45 = v32;
      *((void *)&v45 + 1) = v33;
      LODWORD(v46) = 1;
      sub_1CC73933C(v35, 33, (uint64_t)&v43, &v48, &v45);
    }
    else
    {
      uint64_t v43 = v13;
      int v44 = 0;
      LODWORD(v48) = v29;
      int v49 = 0;
      *(void *)&long long v45 = v32;
      *((void *)&v45 + 1) = v33;
      LODWORD(v46) = 1;
      uint64_t v36 = sub_1CC73933C(v35, 33, (uint64_t)&v43, &v48, &v45);
      uint64_t v37 = *a1;
      int v38 = *(_DWORD *)(*(void *)(v28 + 32) + 36);
      LODWORD(v45) = v41;
      DWORD2(v45) = 1;
      LODWORD(v48) = v38;
      int v49 = 0;
      uint64_t v50 = v36;
      uint64_t v51 = v39;
      int v52 = 1;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v37 + 32))(v37, 66, &v45, 1, &v48, 2, 0);
    }
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  }
}

uint64_t sub_1CD61B9C4(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 4);
  int v5 = *(_DWORD *)(v4 + 4);
  int v6 = *(_DWORD *)(v4 + 36);
  uint64_t v7 = (void *)a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *((_DWORD *)v7 + 108)) {
    unint64_t v8 = *(void *)(v7[53] + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v31 = v8;
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < (unint64_t)*((unsigned int *)v7 + 108))
  {
    unint64_t v30 = *(void *)(v7[53] + 8 * (v6 & 0x7FFFFFFF));
    if ((v30 & 0xFFFFFFFFFFFFFFF9) != 0 && (v30 & 4) != 0)
    {
      unint64_t v16 = sub_1CBA15978(&v30);
      uint64_t v32 = v34;
      uint64_t v33 = 0x800000000;
      unsigned int v17 = v31;
      if ((v31 & 0xFFFFFFFFFFFFFFF9) != 0 && (v31 & 4) != 0)
      {
        if ((v31 & 2) != 0) {
          uint64_t v18 = 0x800000000000000;
        }
        else {
          uint64_t v18 = 0x8000000000000;
        }
        if ((v18 & v31) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v15);
          unsigned int v17 = v31;
        }
        unsigned int v19 = (unsigned __int16)(v17 >> 3);
        unsigned int v20 = v30;
        if ((v30 & 2) != 0) {
          uint64_t v21 = 0x800000000000000;
        }
        else {
          uint64_t v21 = 0x8000000000000;
        }
        if ((v21 & v30) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v15);
          unsigned int v20 = v30;
        }
        unsigned int v22 = (unsigned __int16)(v20 >> 3);
        unint64_t v23 = sub_1CBA15978(&v31);
        if (v22 >= v19)
        {
          if (v22 > v19) {
            unint64_t v16 = sub_1CBA5A95C(v22 / v19, v16);
          }
        }
        else
        {
          unint64_t v23 = sub_1CBA5A95C(v19 / v22, v23);
        }
        sub_1CC7274B0((uint64_t)&v32, (void *)*a1, v6, v16);
        if (v33)
        {
          uint64_t v24 = (int *)v32;
          uint64_t v25 = 4 * v33;
          do
          {
            uint64_t v26 = *a1;
            int v27 = *v24;
            unint64_t v38 = v23;
            int v39 = 0;
            int v35 = v27;
            int v37 = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, int *, uint64_t, void))(*(void *)v26 + 32))(v26, 82, &v38, 1, &v35, 1, 0);
            *v24++ = *(_DWORD *)(*(void *)(v28 + 32) + 4);
            v25 -= 4;
          }
          while (v25);
        }
      }
      else
      {
        sub_1CC7274B0((uint64_t)&v32, (void *)*a1, v6, v16);
      }
      uint64_t v29 = *a1;
      int v35 = v5;
      int v36 = 1;
      sub_1CC73661C(v29, (uint64_t)&v35, (int *)v32, v33);
      llvm::MachineInstr::eraseFromParent(a2);
      uint64_t v13 = v32;
      if (v32 == v34) {
        return 1;
      }
      goto LABEL_7;
    }
  }
  uint64_t result = 2;
  if ((v8 & 0xFFFFFFFFFFFFFFF9) != 0 && (v8 & 4) != 0)
  {
    uint64_t v32 = v34;
    uint64_t v33 = 0x800000000;
    int v10 = (void *)*a1;
    unint64_t v11 = sub_1CBA15978(&v31);
    sub_1CC7274B0((uint64_t)&v32, v10, v6, v11);
    uint64_t v12 = *a1;
    int v35 = v5;
    int v36 = 1;
    sub_1CC73661C(v12, (uint64_t)&v35, (int *)v32, v33);
    llvm::MachineInstr::eraseFromParent(a2);
    uint64_t v13 = v32;
    if (v32 == v34) {
      return 1;
    }
LABEL_7:
    free(v13);
    return 1;
  }
  return result;
}

uint64_t sub_1CD61BCCC(uint64_t *a1, uint64_t a2)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = *(_DWORD *)(v4 + 4);
  if (v5 < 0 && (uint64_t v32 = a1[2], (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v32 + 432))) {
    unint64_t v6 = *(void *)(*(void *)(v32 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v6 = 0;
  }
  int v7 = *(_DWORD *)(v4 + 36);
  unint64_t v103 = v6;
  uint64_t v8 = *(void *)(a2 + 48);
  if ((v8 & 7) != 0)
  {
    unint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v8 & 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v102 = *(void *)(v9 + 24);
  int v10 = *(llvm::LLVMContext *****)(*a1 + 8);
  unsigned __int32 v12 = sub_1CB8F1DC4(&v102);
  if (v11 == 1) {
  unsigned int v14 = sub_1CB8F1DC4(&v102) + 7;
  }
  if (v13 == 1) {
  if ((v14 & 0xFFFFFFF8) != v12)
  }
  {
    if ((v102 & 0xFFFFFFFFFFFFFFF9) != 0 && (v102 & 4) != 0) {
      return 2;
    }
    int v96 = v5;
    int v18 = v7;
    unint64_t v19 = ((unint64_t)(v14 >> 3) << 6) | 1;
    llvm::MachineFunction::getMachineMemOperand((uint64_t)v10, v9, v9, v19);
    uint64_t v21 = v20;
    unint64_t v22 = v103;
    unint64_t v23 = v14 & 0xFFFFFFF8;
    unint64_t v25 = sub_1CB8F1DC4(&v103);
    if (v24 == 1) {
    int GenericVirtualRegister = v96;
    }
    if (v23 > v25)
    {
      int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v19, "", 0);
      unint64_t v22 = v19;
    }
    int v27 = **(unsigned __int16 **)(a2 + 16);
    if (v27 != 92)
    {
      if (v27 == 91)
      {
        uint64_t v28 = (void *)*a1;
        *(void *)&long long v104 = v22;
        DWORD2(v104) = 0;
        LODWORD(v106) = v18;
        LODWORD(v107) = 0;
        uint64_t v29 = sub_1CC737934(v28, 0x5Au, (int *)&v104, (int *)&v106, v21);
        uint64_t v30 = *a1;
        LODWORD(v104) = GenericVirtualRegister;
        DWORD2(v104) = 1;
        *(void *)&long long v106 = v29;
        *((void *)&v106 + 1) = v31;
        LODWORD(v107) = 1;
        uint64_t v108 = v12;
        int v110 = 3;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v30 + 32))(v30, 125, &v104, 1, &v106, 2, 0);
LABEL_36:
        if (v103 == v22)
        {
LABEL_39:
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          return 1;
        }
        uint64_t v43 = *a1;
        LODWORD(v104) = v96;
        DWORD2(v104) = 1;
        LODWORD(v106) = GenericVirtualRegister;
        LODWORD(v107) = 0;
        int v44 = *(void (**)(void))(*(void *)v43 + 32);
LABEL_38:
        v44();
        goto LABEL_39;
      }
      if (v19 != v22)
      {
        uint64_t v79 = (void *)*a1;
        LODWORD(v104) = GenericVirtualRegister;
        DWORD2(v104) = 1;
        LODWORD(v106) = v18;
        LODWORD(v107) = 0;
        sub_1CC737934(v79, 0x5Au, (int *)&v104, (int *)&v106, v21);
        goto LABEL_36;
      }
    }
    int v37 = (void *)*a1;
    *(void *)&long long v104 = v22;
    DWORD2(v104) = 0;
    LODWORD(v106) = v18;
    LODWORD(v107) = 0;
    unint64_t v38 = sub_1CC737934(v37, 0x5Au, (int *)&v104, (int *)&v106, v21);
    uint64_t v39 = *a1;
    LODWORD(v100) = GenericVirtualRegister;
    int v101 = 1;
    *(void *)&long long v104 = v38;
    *((void *)&v104 + 1) = v40;
    int v105 = 1;
    int v41 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v39 + 32))(v39, 43, &v100, 1, &v104, 1, 0);
    LODWORD(v106) = 1;
    *((void *)&v106 + 1) = 0;
    uint64_t v107 = v12;
    llvm::MachineInstr::addOperand(v42, v41, (const llvm::MachineOperand *)&v106);
    goto LABEL_36;
  }
  uint64_t v16 = *(void *)(**(void **)(*a1 + 8) + 40);
  if (*(unsigned char *)(v16 + 272)) {
    return 2;
  }
  v15.i32[0] = v12;
  uint8x8_t v33 = (uint8x8_t)vcnt_s8(v15);
  v33.i16[0] = vaddlv_u8(v33);
  if (v33.i32[0] == 1)
  {
    if (llvm::TargetLoweringBase::allowsMemoryAccess(a1[4], ***v10, v16 + 272, v102, v9, 0)) {
      return 2;
    }
    unint64_t v34 = v12 >> 1;
    unint64_t v35 = v34;
  }
  else
  {
    unint64_t v35 = 1 << ~__clz(v12);
    if (!v12) {
      unint64_t v35 = 0;
    }
    LODWORD(v34) = v12 - v35;
  }
  if ((v102 & 0xFFFFFFFFFFFFFFF9) == 0 || (v102 & 4) == 0)
  {
    unint64_t v97 = v35;
    unint64_t v45 = v35 >> 3;
    MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v10, v9, 0, ((unint64_t)(v35 >> 3) << 6) | 1);
    int v47 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v10, v9, v45, ((unint64_t)(v34 >> 3) << 6) | 1);
    uint64_t v48 = 0;
    if (v7 < 0)
    {
      uint64_t v89 = a1[2];
      if ((v7 & 0x7FFFFFFFu) >= *(_DWORD *)(v89 + 432)) {
        uint64_t v48 = 0;
      }
      else {
        uint64_t v48 = *(void *)(*(void *)(v89 + 424) + 8 * (v7 & 0x7FFFFFFF));
      }
    }
    uint64_t v99 = v48;
    uint64_t v50 = sub_1CB8F1DC4(&v103);
    if (v49 == 1) {
    if (v50)
    }
    {
      unint64_t v51 = (v50 - 1) | ((unint64_t)(v50 - 1) >> 1) | (((v50 - 1) | ((unint64_t)(v50 - 1) >> 1)) >> 2);
      unint64_t v52 = v51 | (v51 >> 4) | ((v51 | (v51 >> 4)) >> 8);
      uint64_t v53 = (8 * (((v52 | (v52 >> 16)) >> 32) | v52 | (v52 >> 16)) + 8) & 0x7FFFFFFF8 | 1;
    }
    else
    {
      uint64_t v53 = 1;
    }
    uint64_t v98 = v53;
    long long v54 = (void *)*a1;
    *(void *)&long long v104 = v53;
    DWORD2(v104) = 0;
    LODWORD(v106) = v7;
    LODWORD(v107) = 0;
    uint64_t v94 = sub_1CC737934(v54, 0x5Cu, (int *)&v104, (int *)&v106, MachineMemOperand);
    uint64_t v95 = v55;
    uint64_t v56 = *a1;
    unsigned int v57 = sub_1CB8F1DC4((unint64_t *)&v99);
    if (v58 == 1)
    {
      unsigned int v93 = v57;
      unsigned int v57 = v93;
    }
    *(void *)&long long v106 = (8 * v57) | 1;
    DWORD2(v106) = 0;
    uint64_t v59 = sub_1CC7362A8(v56, (unint64_t *)&v106, v45);
    uint64_t v61 = v60;
    int v62 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[2], v99, "", 0);
    uint64_t v63 = *a1;
    LODWORD(v100) = v62;
    int v101 = 1;
    LODWORD(v106) = v7;
    LODWORD(v107) = 0;
    *(void *)&long long v104 = v59;
    *((void *)&v104 + 1) = v61;
    int v105 = 1;
    uint64_t v64 = sub_1CC735F44(v63, &v100, &v106, &v104);
    uint64_t v65 = (void *)*a1;
    unsigned int v66 = **(unsigned __int16 **)(a2 + 16);
    *(void *)&long long v104 = v53;
    DWORD2(v104) = 0;
    *(void *)&long long v106 = v64;
    *((void *)&v106 + 1) = v67;
    LODWORD(v107) = 1;
    uint64_t v68 = sub_1CC737934(v65, v66, (int *)&v104, (int *)&v106, v47);
    uint64_t v70 = v69;
    uint64_t v71 = *a1;
    *(void *)&long long v106 = v53;
    DWORD2(v106) = 0;
    uint64_t v72 = sub_1CC7362A8(v71, (unint64_t *)&v106, v97);
    uint64_t v73 = *a1;
    *(void *)&long long v104 = v53;
    DWORD2(v104) = 0;
    *(void *)&long long v106 = v68;
    *((void *)&v106 + 1) = v70;
    LODWORD(v107) = 1;
    uint64_t v108 = v72;
    uint64_t v109 = v74;
    int v110 = 1;
    uint64_t v76 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v73 + 32))(v73, 127, &v104, 1, &v106, 2, 0);
    uint64_t v77 = v75;
    if (v98 != v103)
    {
      uint64_t v80 = sub_1CB8F1DC4((unint64_t *)&v98);
      int v82 = v81;
      uint64_t v84 = sub_1CB8F1DC4(&v103);
      uint64_t v85 = *a1;
      if (v80 == v84 && v82 == v83)
      {
        *(void *)&long long v104 = v98;
        DWORD2(v104) = 0;
        *(void *)&long long v106 = v76;
        *((void *)&v106 + 1) = v77;
        LODWORD(v107) = 1;
        uint64_t v108 = (uint64_t)v94;
        uint64_t v109 = v95;
        int v110 = 1;
        uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v85 + 32))(v85, 66, &v104, 1, &v106, 2, 0);
        uint64_t v87 = *a1;
        LODWORD(v104) = v5;
        DWORD2(v104) = 1;
        *(void *)&long long v106 = v86;
        *((void *)&v106 + 1) = v88;
        LODWORD(v107) = 1;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v87 + 32))(v87, 81, &v104, 1, &v106, 1, 0);
      }
      else
      {
        *(void *)&long long v104 = v98;
        DWORD2(v104) = 0;
        *(void *)&long long v106 = v76;
        *((void *)&v106 + 1) = v77;
        LODWORD(v107) = 1;
        uint64_t v108 = (uint64_t)v94;
        uint64_t v109 = v95;
        int v110 = 1;
        uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v85 + 32))(v85, 66, &v104, 1, &v106, 2, 0);
        uint64_t v91 = *a1;
        LODWORD(v104) = v5;
        DWORD2(v104) = 1;
        *(void *)&long long v106 = v90;
        *((void *)&v106 + 1) = v92;
        LODWORD(v107) = 1;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v91 + 32))(v91, 119, &v104, 1, &v106, 1, 0);
      }
      goto LABEL_39;
    }
    uint64_t v78 = *a1;
    LODWORD(v104) = v5;
    DWORD2(v104) = 1;
    *(void *)&long long v106 = v76;
    *((void *)&v106 + 1) = v75;
    LODWORD(v107) = 1;
    uint64_t v108 = (uint64_t)v94;
    uint64_t v109 = v95;
    int v110 = 1;
    int v44 = *(void (**)(void))(*(void *)v78 + 32);
    goto LABEL_38;
  }
  if (v102 != v103) {
    return 2;
  }
  unint64_t v36 = sub_1CBA15978(&v103);
  return sub_1CD619BD4(a1, a2, 0, v36);
}

uint64_t sub_1CD61C5A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = *(_DWORD *)(v4 + 4);
  if (v5 < 0 && (uint64_t v17 = a1[2], (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v17 + 432))) {
    unint64_t v6 = *(void *)(*(void *)(v17 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v6 = 0;
  }
  int v85 = *(_DWORD *)(v4 + 36);
  uint64_t v90 = v6;
  int v7 = *(llvm::LLVMContext *****)(*a1 + 8);
  uint64_t v8 = *(void *)(a2 + 48);
  if ((v8 & 7) != 0)
  {
    unint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v8 & 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v89 = *(void *)(v9 + 24);
  unsigned int v11 = sub_1CB8F1DC4(&v89);
  if (v10 == 1) {
  unint64_t v13 = sub_1CB8F1DC4(&v89) + 7;
  }
  if (v12 == 1) {
  if ((v13 & 0xFFFFFFF8) != v11)
  }
  {
    if ((v6 & 0xFFFFFFFFFFFFFFF9) != 0 && (v6 & 4) != 0) {
      return 2;
    }
    unint64_t v22 = (llvm::MachineInstr *)a2;
    uint64_t v23 = (uint64_t)v7;
    unint64_t v24 = v13 >> 3;
    unint64_t v25 = v13 & 0xFFFFFFF8;
    unint64_t v27 = sub_1CB8F1DC4((unint64_t *)&v90);
    if (v26 == 1) {
    if (v25 > v27)
    }
    {
      uint64_t v28 = *a1;
      *(void *)&long long v91 = ((v24 & 0x1FFFFFFF) << 6) | 1;
      DWORD2(v91) = 0;
      LODWORD(v93) = v5;
      int v94 = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v28 + 32))(v28, 118, &v91, 1, &v93, 1, 0);
      int v5 = *(_DWORD *)(*(void *)(v29 + 32) + 4);
      uint64_t v90 = ((v24 & 0x1FFFFFFF) << 6) | 1;
    }
    uint64_t v71 = *a1;
    *(void *)&long long v91 = v90;
    DWORD2(v91) = 0;
    LODWORD(v93) = v5;
    int v94 = 0;
    uint64_t v72 = sub_1CD62DA84(v71, (unint64_t *)&v91, &v93, v11);
    uint64_t v74 = v73;
    llvm::MachineFunction::getMachineMemOperand(v23, v9, v9, ((v24 & 0x1FFFFFFF) << 6) | 1);
    uint64_t v76 = v75;
    uint64_t v77 = (void *)*a1;
    *(void *)&long long v93 = v72;
    *((void *)&v93 + 1) = v74;
    uint64_t v15 = 1;
    int v94 = 1;
    LODWORD(v91) = v85;
    int v92 = 0;
    sub_1CC737D1C(v77, (int *)&v93, (int *)&v91, v76);
    uint64_t v70 = v22;
    goto LABEL_52;
  }
  if ((v89 & 0xFFFFFFFFFFFFFFF9) == 0 || (v89 & 4) == 0)
  {
    unsigned int v19 = sub_1CB8F1DC4(&v89);
    if (v18 == 1) {
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    }
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.i32[0] == 1)
    {
      if (llvm::TargetLoweringBase::allowsMemoryAccess(a1[4], ***v7, *(void *)(**(void **)(*a1 + 8) + 40) + 272, v89, v9, 0))return 2; {
      unint64_t v21 = v19 >> 1;
      }
      unsigned int v84 = v19 >> 1;
    }
    else
    {
      unint64_t v31 = sub_1CB8F1DC4(&v89);
      if (v30 == 1) {
      uint64_t v32 = 1 << ~__clz(v31);
      }
      if (v31) {
        unint64_t v21 = v32;
      }
      else {
        unint64_t v21 = 0;
      }
      int v34 = sub_1CB8F1DC4(&v89);
      if (v33 == 1) {
      unsigned int v84 = v34 - v21;
      }
    }
    uint64_t v36 = sub_1CB8F1DC4(&v89);
    if (v35 == 1) {
    uint64_t v37 = (uint64_t)v7;
    }
    if (v36)
    {
      unint64_t v38 = (v36 - 1) | ((unint64_t)(v36 - 1) >> 1) | (((v36 - 1) | ((unint64_t)(v36 - 1) >> 1)) >> 2);
      unint64_t v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
      uint64_t v40 = (8 * (((v39 | (v39 >> 16)) >> 32) | v39 | (v39 >> 16)) + 8) & 0x7FFFFFFF8 | 1;
    }
    else
    {
      uint64_t v40 = 1;
    }
    if ((v90 & 0xFFFFFFFFFFFFFFF9) != 0 && (v90 & 6) == 2)
    {
      unsigned int v42 = sub_1CB8F1DC4((unint64_t *)&v90);
      if (v41 == 1) {
      uint64_t v43 = *a1;
      }
      *(void *)&long long v91 = (8 * v42) | 1;
      DWORD2(v91) = 0;
      LODWORD(v93) = v5;
      int v94 = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v43 + 32))(v43, 80, &v91, 1, &v93, 1, 0);
      int v5 = *(_DWORD *)(*(void *)(v44 + 32) + 4);
    }
    unint64_t v45 = (void *)*a1;
    *(void *)&long long v91 = v40;
    DWORD2(v91) = 0;
    LODWORD(v93) = v5;
    int v94 = 0;
    uint64_t v46 = sub_1CC738034(v45, 118, (unint64_t *)&v91, (int *)&v93);
    uint64_t v48 = v47;
    uint64_t v49 = *a1;
    *(void *)&long long v93 = v40;
    DWORD2(v93) = 0;
    uint64_t v50 = sub_1CC7362A8(v49, (unint64_t *)&v93, v21);
    uint64_t v51 = *a1;
    *(void *)&long long v91 = v40;
    DWORD2(v91) = 0;
    uint64_t v82 = v48;
    uint64_t v83 = v46;
    *(void *)&long long v93 = v46;
    *((void *)&v93 + 1) = v48;
    int v94 = 1;
    uint64_t v95 = v50;
    uint64_t v96 = v52;
    int v97 = 1;
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v51 + 32))(v51, 128, &v91, 1, &v93, 2, 0);
    uint64_t v80 = v54;
    uint64_t v81 = v53;
    uint64_t v55 = 0;
    if (v85 < 0)
    {
      uint64_t v78 = a1[2];
      uint64_t v79 = v85 & 0x7FFFFFFF;
      if (v79 >= *(_DWORD *)(v78 + 432)) {
        uint64_t v55 = 0;
      }
      else {
        uint64_t v55 = *(void *)(*(void *)(v78 + 424) + 8 * v79);
      }
    }
    uint64_t v88 = v55;
    uint64_t v56 = *a1;
    unsigned int v58 = sub_1CB8F1DC4((unint64_t *)&v88);
    if (v57 == 1) {
    uint64_t v15 = 1;
    }
    *(void *)&long long v93 = (8 * v58) | 1;
    DWORD2(v93) = 0;
    uint64_t v59 = v21 >> 3;
    uint64_t v60 = sub_1CC7362A8(v56, (unint64_t *)&v93, v21 >> 3);
    uint64_t v61 = *a1;
    uint64_t v86 = v88;
    int v87 = 0;
    LODWORD(v93) = v85;
    int v94 = 0;
    *(void *)&long long v91 = v60;
    *((void *)&v91 + 1) = v62;
    int v92 = 1;
    uint64_t v63 = sub_1CC735F44(v61, &v86, &v93, &v91);
    uint64_t v65 = v64;
    MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v37, v9, 0, ((unint64_t)(v59 & 0x1FFFFFFF) << 6) | 1);
    uint64_t v67 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v37, v9, v59, ((unint64_t)(v84 >> 3) << 6) | 1);
    uint64_t v68 = (void *)*a1;
    *(void *)&long long v93 = v83;
    *((void *)&v93 + 1) = v82;
    int v94 = 1;
    LODWORD(v91) = v85;
    int v92 = 0;
    sub_1CC737D1C(v68, (int *)&v93, (int *)&v91, MachineMemOperand);
    uint64_t v69 = (void *)*a1;
    *(void *)&long long v93 = v81;
    *((void *)&v93 + 1) = v80;
    int v94 = 1;
    *(void *)&long long v91 = v63;
    *((void *)&v91 + 1) = v65;
    int v92 = 1;
    sub_1CC737D1C(v69, (int *)&v93, (int *)&v91, v67);
    uint64_t v70 = (llvm::MachineInstr *)a2;
LABEL_52:
    llvm::MachineInstr::eraseFromParent(v70);
    return v15;
  }
  if (v89 != v6) {
    return 2;
  }
  unint64_t v14 = sub_1CBA15978((unint64_t *)&v90);
  return sub_1CD619BD4(a1, a2, 0, v14);
}

void sub_1CD61CC48(uint64_t *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_DWORD **)(a2 + 32);
  int v5 = v4[1];
  int v6 = v4[9];
  uint64_t v7 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432)) {
    uint64_t v8 = *(void *)(*(void *)(v7 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = **(unsigned __int16 **)(a2 + 16);
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432)) {
    uint64_t v10 = *(void *)(*(void *)(v7 + 424) + 8 * (v6 & 0x7FFFFFFF));
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = v4[17];
  int v12 = v4[25];
  uint64_t v13 = *a1;
  LODWORD(v29) = v4[1];
  DWORD2(v29) = 1;
  LODWORD(v31) = v11;
  int v32 = 0;
  LODWORD(v33) = v12;
  int v35 = 0;
  if (v9 == 141)
  {
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v13 + 32))(v13, 45, &v29, 1, &v31, 2, 0);
    int v14 = 40;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v13 + 32))(v13, 46, &v29, 1, &v31, 2, 0);
    int v14 = 38;
  }
  uint64_t v15 = *a1;
  *(void *)&long long v31 = v8;
  DWORD2(v31) = 0;
  uint64_t v16 = sub_1CC7362A8(v15, (unint64_t *)&v31, 0);
  uint64_t v18 = v17;
  uint64_t v19 = *a1;
  uint64_t v27 = v10;
  int v28 = 0;
  LODWORD(v31) = v5;
  int v32 = 0;
  LODWORD(v29) = v11;
  int v30 = 0;
  uint64_t v20 = sub_1CC73933C(v19, 40, (uint64_t)&v27, &v31, &v29);
  uint64_t v22 = v21;
  uint64_t v23 = *a1;
  uint64_t v27 = v10;
  int v28 = 0;
  LODWORD(v31) = v12;
  int v32 = 0;
  *(void *)&long long v29 = v16;
  *((void *)&v29 + 1) = v18;
  int v30 = 1;
  uint64_t v24 = sub_1CC73933C(v23, v14, (uint64_t)&v27, &v31, &v29);
  uint64_t v25 = *a1;
  LODWORD(v29) = v6;
  DWORD2(v29) = 1;
  *(void *)&long long v31 = v24;
  *((void *)&v31 + 1) = v26;
  int v32 = 1;
  uint64_t v33 = v20;
  uint64_t v34 = v22;
  int v35 = 1;
  (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v25 + 32))(v25, 67, &v29, 1, &v31, 2, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

void sub_1CD61CEDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 0x80000000) == 0 || (uint64_t v32 = a1[2], (v5 & 0x7FFFFFFFu) >= *(_DWORD *)(v32 + 432)))
  {
    unint64_t v6 = 0;
LABEL_3:
    unint64_t v7 = (unsigned __int16)(v6 >> 3);
    goto LABEL_4;
  }
  unint64_t v6 = *(void *)(*(void *)(v32 + 424) + 8 * (v5 & 0x7FFFFFFF));
  if (v6)
  {
    unint64_t v7 = (v6 >> 3);
    goto LABEL_4;
  }
  if ((v6 & 4) == 0) {
    goto LABEL_3;
  }
  if ((v6 & 2) != 0) {
    unint64_t v7 = (unsigned __int16)(v6 >> 19);
  }
  else {
    unint64_t v7 = (v6 >> 19);
  }
LABEL_4:
  int v8 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v9 = (2 * v7);
  if ((v6 & 0xFFFFFFFFFFFFFFF9) != 0 && (v6 & 4) != 0)
  {
    uint64_t v10 = 0x800000000000000;
    if ((v6 & 2) == 0) {
      uint64_t v10 = 0x8000000000000;
    }
    unint64_t v11 = v6 & 0x7FFF8 | (v9 << 19) | ((unint64_t)((v10 & v6) != 0) << 51) | 4;
  }
  else
  {
    unint64_t v11 = (8 * v9) | 1;
  }
  if (v8 == 148) {
    uint64_t v12 = 124;
  }
  else {
    uint64_t v12 = 126;
  }
  uint64_t v13 = *a1;
  unint64_t v39 = v11;
  int v40 = 0;
  LODWORD(v33) = *(_DWORD *)(v4 + 36);
  int v35 = 0;
  if (v8 == 148) {
    uint64_t v14 = 129;
  }
  else {
    uint64_t v14 = 128;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v13 + 32))(v13, v12, &v39, 1, &v33, 1, 0);
  uint64_t v17 = v16;
  uint64_t v18 = *a1;
  unint64_t v39 = v11;
  int v40 = 0;
  LODWORD(v33) = *(_DWORD *)(*(void *)(a2 + 32) + 68);
  int v35 = 0;
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v18 + 32))(v18, v12, &v39, 1, &v33, 1, 0);
  uint64_t v20 = *a1;
  unint64_t v39 = v11;
  int v40 = 0;
  unint64_t v33 = v15;
  uint64_t v34 = v17;
  int v35 = 1;
  uint64_t v36 = v19;
  uint64_t v37 = v21;
  int v38 = 1;
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v20 + 32))(v20, 47, &v39, 1, &v33, 2, 0);
  uint64_t v24 = v23;
  uint64_t v25 = *a1;
  unint64_t v33 = v11;
  LODWORD(v34) = 0;
  uint64_t v26 = sub_1CC7362A8(v25, &v33, v7);
  uint64_t v27 = *a1;
  unint64_t v39 = v11;
  int v40 = 0;
  unint64_t v33 = v22;
  uint64_t v34 = v24;
  int v35 = 1;
  uint64_t v36 = v26;
  uint64_t v37 = v28;
  int v38 = 1;
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v27 + 32))(v27, v14, &v39, 1, &v33, 2, 0);
  uint64_t v30 = *a1;
  LODWORD(v39) = v5;
  int v40 = 1;
  unint64_t v33 = v29;
  uint64_t v34 = v31;
  int v35 = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v30 + 32))(v30, 119, &v39, 1, &v33, 1, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

void sub_1CD61D1F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_DWORD **)(a2 + 32);
  int v5 = v4[1];
  if (v5 < 0 && (uint64_t v15 = a1[2], (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v15 + 432))) {
    uint64_t v6 = *(void *)(*(void *)(v15 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *a1;
  int v8 = v4[9];
  int v9 = v4[17];
  uint64_t v10 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
  uint64_t v20 = v6;
  int v21 = 0;
  LODWORD(v16[0]) = v8;
  int v17 = 0;
  int v18 = v9;
  int v19 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 165, &v20, 1, v16, 2, v10);
  uint64_t v12 = *a1;
  int v13 = *(_DWORD *)(*(void *)(a2 + 32) + 100);
  LODWORD(v20) = v5;
  int v21 = 1;
  v16[0] = v11;
  v16[1] = v14;
  int v17 = 1;
  int v18 = v13;
  int v19 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 163, &v20, 1, v16, 2, v10);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

void sub_1CD61D368(uint64_t *a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 32);
  int v4 = *(_DWORD *)(v3 + 4);
  int v5 = *(_DWORD *)(v3 + 36);
  int v34 = v4;
  if (v4 < 0 && (uint64_t v30 = a1[2], v31 = v4 & 0x7FFFFFFF, v31 < *(_DWORD *)(v30 + 432)))
  {
    uint64_t v6 = *(void *)(*(void *)(v30 + 424) + 8 * v31);
    uint64_t v32 = 0x800000000000000;
    if ((v6 & 2) == 0) {
      uint64_t v32 = 0x8000000000000;
    }
    if ((v6 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(void *)(*(void *)(v30 + 424) + 8 * v31) & 4) == 0) {
      unint64_t v7 = 9;
    }
    else {
      unint64_t v7 = v6 & 0x7FFF8 | ((unint64_t)((v32 & v6) != 0) << 51) | 0x80004;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 9;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
  *(void *)&long long v38 = v6;
  DWORD2(v38) = 0;
  LODWORD(v40) = v5;
  int v41 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 85, &v38, 1, &v40, 1, v9);
  uint64_t v12 = v11;
  uint64_t v13 = *a1;
  *(void *)&long long v40 = v6;
  DWORD2(v40) = 0;
  uint64_t v14 = sub_1CC7374CC(v13, (unint64_t *)&v40, 0.0);
  uint64_t v15 = *a1;
  unint64_t v36 = v7;
  int v37 = 0;
  LODWORD(v40) = v5;
  int v41 = 0;
  *(void *)&long long v38 = v14;
  *((void *)&v38 + 1) = v16;
  int v39 = 1;
  uint64_t v17 = sub_1CC7393E8(v15, 4, (uint64_t)&v36, &v40, &v38, v9);
  uint64_t v19 = v18;
  uint64_t v20 = *a1;
  unint64_t v36 = v7;
  int v37 = 0;
  LODWORD(v40) = v5;
  int v41 = 0;
  *(void *)&long long v38 = v10;
  *((void *)&v38 + 1) = v12;
  int v39 = 1;
  uint64_t v21 = sub_1CC7393E8(v20, 6, (uint64_t)&v36, &v40, &v38, v9);
  uint64_t v22 = *a1;
  *(void *)&long long v38 = v7;
  DWORD2(v38) = 0;
  *(void *)&long long v40 = v17;
  *((void *)&v40 + 1) = v19;
  int v41 = 1;
  uint64_t v42 = v21;
  uint64_t v43 = v23;
  int v44 = 1;
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v22 + 32))(v22, 65, &v38, 1, &v40, 2, 0);
  uint64_t v25 = *a1;
  *(void *)&long long v38 = v6;
  DWORD2(v38) = 0;
  *(void *)&long long v40 = v24;
  *((void *)&v40 + 1) = v26;
  int v41 = 1;
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v25 + 32))(v25, 182, &v38, 1, &v40, 1, 0);
  uint64_t v28 = *a1;
  LODWORD(v38) = v34;
  DWORD2(v38) = 1;
  *(void *)&long long v40 = v10;
  *((void *)&v40 + 1) = v12;
  int v41 = 1;
  uint64_t v42 = v27;
  uint64_t v43 = v29;
  int v44 = 1;
  (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 163, &v38, 1, &v40, 2, v9);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

void sub_1CD61D664(uint64_t *a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 32);
  int v4 = *(_DWORD *)(v3 + 4);
  int v5 = *(_DWORD *)(v3 + 36);
  int v51 = v4;
  uint64_t v6 = *(unsigned __int16 *)(a2 + 44);
  if ((v4 & 0x80000000) == 0 || (uint64_t v41 = a1[2], v42 = v4 & 0x7FFFFFFF, v42 >= *(_DWORD *)(v41 + 432)))
  {
    uint64_t v7 = 0;
LABEL_3:
    unint64_t v8 = 9;
    goto LABEL_4;
  }
  uint64_t v7 = *(void *)(*(void *)(v41 + 424) + 8 * v42);
  if ((v7 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(void *)(*(void *)(v41 + 424) + 8 * v42) & 4) == 0) {
    goto LABEL_3;
  }
  uint64_t v44 = 0x800000000000000;
  if ((v7 & 2) == 0) {
    uint64_t v44 = 0x8000000000000;
  }
  unint64_t v8 = v7 & 0x7FFF8 | ((unint64_t)((v44 & v7) != 0) << 51) | 0x80004;
LABEL_4:
  unint64_t v50 = v8;
  uint64_t v9 = *a1;
  uint64_t v10 = v6 | 0x100000000;
  *(void *)&long long v57 = v7;
  DWORD2(v57) = 0;
  LODWORD(v59) = v5;
  int v60 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 85, &v57, 1, &v59, 1, v6 | 0x100000000);
  uint64_t v48 = v12;
  uint64_t v49 = v11;
  uint64_t v13 = *a1;
  *(void *)&long long v57 = v7;
  DWORD2(v57) = 0;
  LODWORD(v59) = v5;
  int v60 = 0;
  uint64_t v61 = v11;
  uint64_t v62 = v12;
  int v63 = 1;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 164, &v57, 1, &v59, 2, v10);
  uint64_t v15 = *a1;
  *(void *)&long long v57 = v7;
  DWORD2(v57) = 0;
  *(void *)&long long v59 = v14;
  *((void *)&v59 + 1) = v16;
  int v60 = 1;
  uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 184, &v57, 1, &v59, 1, v10);
  uint64_t v18 = v17;
  uint64_t v19 = *a1;
  *(void *)&long long v59 = v7;
  DWORD2(v59) = 0;
  uint64_t v20 = sub_1CC7374CC(v19, (unint64_t *)&v59, 0.0);
  uint64_t v46 = v21;
  uint64_t v47 = v20;
  uint64_t v22 = *a1;
  *(void *)&long long v59 = v7;
  DWORD2(v59) = 0;
  uint64_t v23 = sub_1CC7374CC(v22, (unint64_t *)&v59, 1.0);
  uint64_t v25 = v24;
  uint64_t v26 = *a1;
  *(void *)&long long v59 = v7;
  DWORD2(v59) = 0;
  uint64_t v27 = sub_1CC7374CC(v26, (unint64_t *)&v59, 0.5);
  uint64_t v29 = v28;
  uint64_t v30 = *a1;
  *(void *)&long long v57 = v7;
  DWORD2(v57) = 0;
  *(void *)&long long v59 = v23;
  *((void *)&v59 + 1) = v25;
  int v60 = 1;
  LODWORD(v61) = v5;
  int v63 = 0;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v30 + 32))(v30, 185, &v57, 1, &v59, 2, 0);
  uint64_t v33 = v32;
  uint64_t v34 = *a1;
  *(void *)&long long v53 = v50;
  DWORD2(v53) = 0;
  *(void *)&long long v59 = v45;
  *((void *)&v59 + 1) = v18;
  int v60 = 1;
  *(void *)&long long v57 = v27;
  *((void *)&v57 + 1) = v29;
  int v58 = 1;
  uint64_t v35 = sub_1CC7393E8(v34, 3, (uint64_t)&v53, &v59, &v57, v10);
  uint64_t v36 = *a1;
  uint64_t v55 = v7;
  int v56 = 0;
  *(void *)&long long v59 = v35;
  *((void *)&v59 + 1) = v37;
  int v60 = 1;
  *(void *)&long long v57 = v31;
  *((void *)&v57 + 1) = v33;
  int v58 = 1;
  *(void *)&long long v53 = v47;
  *((void *)&v53 + 1) = v46;
  int v54 = 1;
  uint64_t v38 = sub_1CC739494(v36, &v55, &v59, &v57, &v53, v10);
  uint64_t v39 = *a1;
  LODWORD(v57) = v51;
  DWORD2(v57) = 1;
  *(void *)&long long v59 = v49;
  *((void *)&v59 + 1) = v48;
  int v60 = 1;
  uint64_t v61 = v38;
  uint64_t v62 = v40;
  int v63 = 1;
  (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 163, &v57, 1, &v59, 2, v10);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

uint64_t sub_1CD61DA18(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  int v5 = *(_DWORD *)(v4 + 4);
  int v6 = *(_DWORD *)(v4 + 36);
  uint64_t v7 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432)) {
    uint64_t v8 = *(void *)(*(void *)(v7 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    uint64_t v8 = 0;
  }
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432))
  {
    uint64_t v11 = *(void *)(*(void *)(v7 + 424) + 8 * (v6 & 0x7FFFFFFF));
    if (v11 == 513)
    {
      if (v8 == 257)
      {
        sub_1CD62671C(a1, a2);
        return 1;
      }
    }
    else if (v11 == 9)
    {
      uint64_t v12 = *a1;
      *(void *)&long long v24 = v8;
      DWORD2(v24) = 0;
      uint64_t v13 = sub_1CC7374CC(v12, (unint64_t *)&v24, 1.0);
      uint64_t v15 = v14;
      uint64_t v16 = *a1;
      *(void *)&long long v24 = v8;
      DWORD2(v24) = 0;
      uint64_t v17 = sub_1CC7374CC(v16, (unint64_t *)&v24, 0.0);
      uint64_t v18 = *a1;
      uint64_t v9 = 1;
      LODWORD(v26) = v5;
      int v27 = 1;
      LODWORD(v24) = v6;
      int v25 = 0;
      *(void *)&long long v22 = v13;
      *((void *)&v22 + 1) = v15;
      int v23 = 1;
      *(void *)&long long v20 = v17;
      *((void *)&v20 + 1) = v19;
      int v21 = 1;
      sub_1CC739494(v18, &v26, &v24, &v22, &v20, 0);
      llvm::MachineInstr::eraseFromParent(a2);
      return v9;
    }
  }
  return 2;
}

uint64_t sub_1CD61DB68(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 4);
  int v5 = *(_DWORD *)(v4 + 4);
  int v6 = *(_DWORD *)(v4 + 36);
  uint64_t v7 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432)) {
    uint64_t v8 = *(void *)(*(void *)(v7 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    uint64_t v8 = 0;
  }
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432))
  {
    uint64_t v10 = *(void *)(*(void *)(v7 + 424) + 8 * (v6 & 0x7FFFFFFF));
    if (v10 == 513)
    {
      if (v8 == 257)
      {
        uint64_t v19 = *a1;
        *(void *)&long long v52 = 513;
        DWORD2(v52) = 0;
        uint64_t v20 = sub_1CC7362A8(v19, (unint64_t *)&v52, 0x3FuLL);
        uint64_t v21 = *a1;
        *(void *)&long long v50 = 513;
        DWORD2(v50) = 0;
        LODWORD(v52) = v6;
        int v53 = 0;
        uint64_t v54 = v20;
        uint64_t v55 = v22;
        int v56 = 1;
        uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v21 + 32))(v21, 129, &v50, 1, &v52, 2, 0);
        uint64_t v25 = v24;
        uint64_t v26 = *a1;
        *(void *)&long long v50 = 513;
        DWORD2(v50) = 0;
        LODWORD(v52) = v6;
        int v53 = 0;
        uint64_t v54 = v23;
        uint64_t v55 = v24;
        uint64_t v27 = v23;
        uint64_t v45 = v23;
        int v56 = 1;
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v26 + 32))(v26, 45, &v50, 1, &v52, 2, 0);
        uint64_t v29 = *a1;
        *(void *)&long long v50 = 513;
        DWORD2(v50) = 0;
        *(void *)&long long v52 = v28;
        *((void *)&v52 + 1) = v30;
        int v53 = 1;
        uint64_t v54 = v27;
        uint64_t v55 = v25;
        int v56 = 1;
        uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v29 + 32))(v29, 67, &v50, 1, &v52, 2, 0);
        uint64_t v32 = *a1;
        *(void *)&long long v50 = 257;
        DWORD2(v50) = 0;
        *(void *)&long long v52 = v31;
        *((void *)&v52 + 1) = v33;
        int v53 = 1;
        uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v32 + 32))(v32, 183, &v50, 1, &v52, 1, 0);
        uint64_t v36 = v35;
        uint64_t v37 = *a1;
        *(void *)&long long v50 = 257;
        DWORD2(v50) = 0;
        *(void *)&long long v52 = v34;
        *((void *)&v52 + 1) = v35;
        int v53 = 1;
        uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v37 + 32))(v37, 177, &v50, 1, &v52, 1, 0);
        uint64_t v40 = v39;
        uint64_t v41 = *a1;
        *(void *)&long long v46 = 9;
        DWORD2(v46) = 0;
        *(void *)&long long v52 = v45;
        *((void *)&v52 + 1) = v25;
        int v53 = 1;
        uint64_t v48 = 513;
        int v49 = 0;
        *(void *)&long long v50 = sub_1CC7362A8(v41, (unint64_t *)&v48, 0);
        *((void *)&v50 + 1) = v42;
        int v51 = 1;
        uint64_t v43 = sub_1CC73933C(v41, 33, (uint64_t)&v46, &v52, &v50);
        uint64_t v17 = *a1;
        LODWORD(v48) = v5;
        int v49 = 1;
        *(void *)&long long v52 = v43;
        *((void *)&v52 + 1) = v44;
        int v53 = 1;
        *(void *)&long long v50 = v38;
        *((void *)&v50 + 1) = v40;
        int v51 = 1;
        *(void *)&long long v46 = v34;
        *((void *)&v46 + 1) = v36;
        int v47 = 1;
        goto LABEL_12;
      }
    }
    else if (v10 == 9)
    {
      uint64_t v11 = *a1;
      *(void *)&long long v52 = v8;
      DWORD2(v52) = 0;
      uint64_t v12 = sub_1CC7374CC(v11, (unint64_t *)&v52, -1.0);
      uint64_t v14 = v13;
      uint64_t v15 = *a1;
      *(void *)&long long v52 = v8;
      DWORD2(v52) = 0;
      uint64_t v16 = sub_1CC7374CC(v15, (unint64_t *)&v52, 0.0);
      uint64_t v17 = *a1;
      LODWORD(v48) = v5;
      int v49 = 1;
      LODWORD(v52) = v6;
      int v53 = 0;
      *(void *)&long long v50 = v12;
      *((void *)&v50 + 1) = v14;
      int v51 = 1;
      *(void *)&long long v46 = v16;
      *((void *)&v46 + 1) = v18;
      int v47 = 1;
LABEL_12:
      sub_1CC739494(v17, &v48, &v52, &v50, &v46, 0);
      llvm::MachineInstr::eraseFromParent(a2);
      return 1;
    }
  }
  return 2;
}

uint64_t sub_1CD61DF5C(llvm::ConstantFP ******a1, llvm::MachineInstr *a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 4);
  int v5 = *(_DWORD *)(v4 + 4);
  int v6 = *(_DWORD *)(v4 + 36);
  uint64_t v7 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *((_DWORD *)v7 + 108)) {
    unint64_t v8 = (unint64_t)v7[53][v5 & 0x7FFFFFFF];
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v52 = v8;
  if ((v6 & 0x80000000) == 0) {
    return 2;
  }
  if ((v6 & 0x7FFFFFFFu) >= *((_DWORD *)v7 + 108)) {
    return 2;
  }
  unint64_t v10 = (unint64_t)v7[53][v6 & 0x7FFFFFFF];
  unint64_t v51 = v10;
  if (v10 != 513 && v10 != 257) {
    return 2;
  }
  if (v8 != 513 && v8 != 257) {
    return 2;
  }
  uint64_t v12 = sub_1CB8F1DC4(&v52);
  if (v11 == 1) {
  sub_1CBA62420(v12, (llvm::APInt *)&v49);
  }
  uint64_t v13 = (llvm::APFloatBase *)sub_1CB8F1DC4(&v51);
  uint64_t v15 = v13;
  if (v14 == 1) {
  if (v15 == (llvm::APFloatBase *)32)
  }
    uint64_t v16 = &unk_1CFB2E308;
  else {
    uint64_t v16 = llvm::APFloatBase::IEEEdouble(v13);
  }
  unsigned int v18 = sub_1CB8F1DC4(&v51);
  if (v17 == 1) {
  sub_1CB8F1EEC((uint64_t)&v57, v18, 0);
  }
  sub_1CB919070((llvm::detail::IEEEFloat *)v56, v16, (const llvm::APInt **)&v57);
  if (DWORD2(v57) >= 0x41 && (void)v57) {
    MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
  }
  sub_1CBA62404((uint64_t)v55, (uint64_t)&v49, 0, 1);
  uint64_t v19 = *a1;
  *(void *)&long long v53 = v52;
  DWORD2(v53) = 0;
  LODWORD(v57) = v6;
  int v58 = 0;
  uint64_t v20 = ((uint64_t (*)(llvm::ConstantFP *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v19)[4])(v19, 180, &v53, 1, &v57, 1, 0);
  uint64_t v44 = v21;
  uint64_t v22 = *a1;
  *(void *)&long long v57 = v51;
  DWORD2(v57) = 0;
  uint64_t v23 = sub_1CC73765C(v22, (uint64_t)&v57, (llvm::LLVMContext *)v55);
  uint64_t v25 = v24;
  uint64_t v26 = *a1;
  *(void *)&long long v53 = v51;
  DWORD2(v53) = 0;
  LODWORD(v57) = v6;
  int v58 = 0;
  uint64_t v59 = v23;
  uint64_t v60 = v24;
  int v61 = 1;
  uint64_t v27 = ((uint64_t (*)(llvm::ConstantFP *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v26)[4])(v26, 164, &v53, 1, &v57, 2, 0);
  uint64_t v28 = *a1;
  *(void *)&long long v53 = v52;
  DWORD2(v53) = 0;
  *(void *)&long long v57 = v27;
  *((void *)&v57 + 1) = v29;
  int v58 = 1;
  uint64_t v30 = ((uint64_t (*)(llvm::ConstantFP *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v28)[4])(v28, 180, &v53, 1, &v57, 1, 0);
  uint64_t v32 = v31;
  uint64_t v33 = *a1;
  *(void *)&long long v57 = v52;
  DWORD2(v57) = 0;
  uint64_t v34 = sub_1CC737454(v33, (uint64_t)&v57, (llvm::LLVMContext *)&v49);
  uint64_t v35 = *a1;
  *(void *)&long long v53 = v52;
  DWORD2(v53) = 0;
  *(void *)&long long v57 = v30;
  *((void *)&v57 + 1) = v32;
  int v58 = 1;
  uint64_t v59 = v34;
  uint64_t v60 = v36;
  int v61 = 1;
  uint64_t v37 = ((uint64_t (*)(llvm::ConstantFP *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v35)[4])(v35, 67, &v53, 1, &v57, 2, 0);
  uint64_t v39 = v38;
  uint64_t v40 = (uint64_t)*a1;
  *(void *)&long long v45 = 9;
  DWORD2(v45) = 0;
  LODWORD(v57) = v6;
  int v58 = 0;
  *(void *)&long long v53 = v23;
  *((void *)&v53 + 1) = v25;
  int v54 = 1;
  uint64_t v41 = sub_1CC7393E8(v40, 12, (uint64_t)&v45, &v57, &v53, 0);
  uint64_t v42 = (uint64_t)*a1;
  LODWORD(v47) = v5;
  int v48 = 1;
  *(void *)&long long v57 = v41;
  *((void *)&v57 + 1) = v43;
  int v58 = 1;
  *(void *)&long long v53 = v20;
  *((void *)&v53 + 1) = v44;
  int v54 = 1;
  *(void *)&long long v45 = v37;
  *((void *)&v45 + 1) = v39;
  int v46 = 1;
  sub_1CC739494(v42, &v47, &v57, &v53, &v45, 0);
  llvm::MachineInstr::eraseFromParent(a2);
  sub_1CB87DEE4(v56);
  if (v50 >= 0x41)
  {
    if (v49) {
      MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
    }
  }
  return 1;
}

uint64_t sub_1CD61E3CC(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 4);
  int v5 = *(_DWORD *)(v4 + 4);
  int v6 = *(_DWORD *)(v4 + 36);
  uint64_t v7 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432)) {
    uint64_t v8 = *(void *)(*(void *)(v7 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v123 = v8;
  if ((v6 & 0x80000000) == 0 || (v6 & 0x7FFFFFFFu) >= *(_DWORD *)(v7 + 432)) {
    return 2;
  }
  uint64_t v11 = *(void *)(*(void *)(v7 + 424) + 8 * (v6 & 0x7FFFFFFF));
  unint64_t v122 = v11;
  if ((v11 & 0xFFFFFFFFFFFFFFF9) != 0 && (v11 & 4) != 0) {
    uint64_t v11 = sub_1CBA15978(&v122);
  }
  if (v11 != 257) {
    return 2;
  }
  if ((v8 & 0xFFFFFFFFFFFFFFF9) != 0 && (v8 & 4) != 0) {
    uint64_t v8 = sub_1CBA15978((unint64_t *)&v123);
  }
  if (v8 != 513) {
    return 2;
  }
  if (v122)
  {
    uint64_t v13 = (v122 >> 3);
  }
  else if ((v122 & 4) != 0)
  {
    if ((v122 & 2) != 0) {
      uint64_t v13 = (unsigned __int16)(v122 >> 19);
    }
    else {
      uint64_t v13 = (v122 >> 19);
    }
  }
  else
  {
    uint64_t v13 = (unsigned __int16)(v122 >> 3);
  }
  uint64_t v14 = *a1;
  *(void *)&long long v126 = v122;
  DWORD2(v126) = 0;
  uint64_t v15 = sub_1CC7362A8(v14, (unint64_t *)&v126, 0x7F800000uLL);
  uint64_t v17 = v16;
  uint64_t v18 = *a1;
  *(void *)&long long v126 = v122;
  DWORD2(v126) = 0;
  uint64_t v19 = sub_1CC7362A8(v18, (unint64_t *)&v126, 0x17uLL);
  uint64_t v21 = v20;
  uint64_t v22 = *a1;
  *(void *)&long long v124 = v122;
  DWORD2(v124) = 0;
  LODWORD(v126) = v6;
  int v127 = 0;
  uint64_t v128 = v15;
  uint64_t v129 = v17;
  uint64_t v9 = 1;
  int v130 = 1;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v22 + 32))(v22, 65, &v124, 1, &v126, 2, 0);
  uint64_t v24 = *a1;
  *(void *)&long long v124 = v122;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v23;
  *((void *)&v126 + 1) = v25;
  int v127 = 1;
  uint64_t v116 = v21;
  uint64_t v117 = v19;
  uint64_t v128 = v19;
  uint64_t v129 = v21;
  int v130 = 1;
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v24 + 32))(v24, 128, &v124, 1, &v126, 2, 0);
  uint64_t v28 = v27;
  uint64_t v29 = (llvm::ConstantInt *****)*a1;
  *(void *)&long long v126 = v122;
  DWORD2(v126) = 0;
  sub_1CBA62420(v13, (llvm::APInt *)&v124);
  uint64_t v30 = sub_1CC737454(v29, (uint64_t)&v126, (llvm::LLVMContext *)&v124);
  uint64_t v32 = v31;
  if (DWORD2(v124) >= 0x41 && (void)v124) {
    MEMORY[0x1D25D9CB0](v124, 0x1000C8000313F17);
  }
  uint64_t v33 = *a1;
  *(void *)&long long v124 = v122;
  DWORD2(v124) = 0;
  LODWORD(v126) = v6;
  int v127 = 0;
  uint64_t v128 = v30;
  uint64_t v129 = v32;
  int v130 = 1;
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v33 + 32))(v33, 65, &v124, 1, &v126, 2, 0);
  uint64_t v36 = v35;
  uint64_t v37 = *a1;
  *(void *)&long long v126 = v122;
  DWORD2(v126) = 0;
  uint64_t v38 = sub_1CC7362A8(v37, (unint64_t *)&v126, (v13 - 1));
  uint64_t v39 = *a1;
  *(void *)&long long v124 = v122;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v34;
  *((void *)&v126 + 1) = v36;
  int v127 = 1;
  uint64_t v128 = v38;
  uint64_t v129 = v40;
  int v130 = 1;
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v39 + 32))(v39, 129, &v124, 1, &v126, 2, 0);
  uint64_t v42 = *a1;
  *(void *)&long long v124 = v123;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v41;
  *((void *)&v126 + 1) = v43;
  int v127 = 1;
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v42 + 32))(v42, 124, &v124, 1, &v126, 1, 0);
  uint64_t v113 = v45;
  uint64_t v114 = v44;
  uint64_t v46 = *a1;
  *(void *)&long long v126 = v122;
  DWORD2(v126) = 0;
  uint64_t v47 = sub_1CC7362A8(v46, (unint64_t *)&v126, 0x7FFFFFuLL);
  uint64_t v48 = *a1;
  *(void *)&long long v124 = v122;
  DWORD2(v124) = 0;
  LODWORD(v126) = v6;
  int v127 = 0;
  uint64_t v128 = v47;
  uint64_t v129 = v49;
  int v130 = 1;
  uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v48 + 32))(v48, 65, &v124, 1, &v126, 2, 0);
  uint64_t v52 = v51;
  uint64_t v53 = *a1;
  *(void *)&long long v126 = v122;
  DWORD2(v126) = 0;
  uint64_t v54 = sub_1CC7362A8(v53, (unint64_t *)&v126, 0x800000uLL);
  uint64_t v55 = *a1;
  *(void *)&long long v124 = v122;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v50;
  *((void *)&v126 + 1) = v52;
  int v127 = 1;
  uint64_t v128 = v54;
  uint64_t v129 = v56;
  int v130 = 1;
  uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v55 + 32))(v55, 66, &v124, 1, &v126, 2, 0);
  uint64_t v58 = *a1;
  *(void *)&long long v124 = v123;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v57;
  *((void *)&v126 + 1) = v59;
  int v127 = 1;
  uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v58 + 32))(v58, 126, &v124, 1, &v126, 1, 0);
  uint64_t v111 = v61;
  uint64_t v112 = v60;
  uint64_t v62 = *a1;
  *(void *)&long long v126 = v122;
  DWORD2(v126) = 0;
  uint64_t v63 = sub_1CC7362A8(v62, (unint64_t *)&v126, 0x7FuLL);
  uint64_t v64 = *a1;
  *(void *)&long long v124 = v122;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v26;
  *((void *)&v126 + 1) = v28;
  int v127 = 1;
  uint64_t v128 = v63;
  uint64_t v129 = v65;
  int v130 = 1;
  uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v64 + 32))(v64, 46, &v124, 1, &v126, 2, 0);
  uint64_t v67 = *a1;
  *(void *)&long long v124 = v122;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v66;
  *((void *)&v126 + 1) = v68;
  uint64_t v69 = v66;
  uint64_t v110 = v66;
  uint64_t v70 = v68;
  uint64_t v115 = v68;
  int v127 = 1;
  uint64_t v128 = v117;
  uint64_t v129 = v116;
  int v130 = 1;
  uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v67 + 32))(v67, 46, &v124, 1, &v126, 2, 0);
  uint64_t v73 = v72;
  uint64_t v74 = *a1;
  *(void *)&long long v124 = v122;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v117;
  *((void *)&v126 + 1) = v116;
  int v127 = 1;
  uint64_t v128 = v69;
  uint64_t v129 = v70;
  int v130 = 1;
  uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v74 + 32))(v74, 46, &v124, 1, &v126, 2, 0);
  uint64_t v77 = v76;
  uint64_t v78 = *a1;
  *(void *)&long long v124 = v123;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v112;
  *((void *)&v126 + 1) = v111;
  int v127 = 1;
  uint64_t v128 = v71;
  uint64_t v129 = v73;
  int v130 = 1;
  uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v78 + 32))(v78, 127, &v124, 1, &v126, 2, 0);
  uint64_t v81 = v80;
  uint64_t v82 = *a1;
  *(void *)&long long v124 = v123;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v112;
  *((void *)&v126 + 1) = v111;
  int v127 = 1;
  uint64_t v128 = v75;
  uint64_t v129 = v77;
  int v130 = 1;
  uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v82 + 32))(v82, 128, &v124, 1, &v126, 2, 0);
  uint64_t v85 = v84;
  uint64_t v86 = *a1;
  *(void *)&long long v118 = 9;
  DWORD2(v118) = 0;
  *(void *)&long long v126 = v110;
  *((void *)&v126 + 1) = v115;
  int v127 = 1;
  *(void *)&long long v124 = v117;
  *((void *)&v124 + 1) = v116;
  int v125 = 1;
  uint64_t v87 = sub_1CC73933C(v86, 38, (uint64_t)&v118, &v126, &v124);
  uint64_t v88 = *a1;
  uint64_t v120 = v123;
  int v121 = 0;
  *(void *)&long long v126 = v87;
  *((void *)&v126 + 1) = v89;
  int v127 = 1;
  *(void *)&long long v124 = v79;
  *((void *)&v124 + 1) = v81;
  int v125 = 1;
  *(void *)&long long v118 = v83;
  *((void *)&v118 + 1) = v85;
  int v119 = 1;
  uint64_t v90 = sub_1CC739494(v88, &v120, &v126, &v124, &v118, 0);
  uint64_t v91 = *a1;
  *(void *)&long long v124 = v123;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v90;
  *((void *)&v126 + 1) = v92;
  int v127 = 1;
  uint64_t v128 = v114;
  uint64_t v129 = v113;
  int v130 = 1;
  uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v91 + 32))(v91, 67, &v124, 1, &v126, 2, 0);
  uint64_t v94 = *a1;
  *(void *)&long long v124 = v123;
  DWORD2(v124) = 0;
  *(void *)&long long v126 = v93;
  *((void *)&v126 + 1) = v95;
  int v127 = 1;
  uint64_t v128 = v114;
  uint64_t v129 = v113;
  int v130 = 1;
  uint64_t v96 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v94 + 32))(v94, 46, &v124, 1, &v126, 2, 0);
  uint64_t v98 = v97;
  uint64_t v99 = *a1;
  *(void *)&long long v126 = v122;
  DWORD2(v126) = 0;
  uint64_t v100 = sub_1CC7362A8(v99, (unint64_t *)&v126, 0);
  uint64_t v101 = *a1;
  *(void *)&long long v118 = 9;
  DWORD2(v118) = 0;
  *(void *)&long long v126 = v110;
  *((void *)&v126 + 1) = v115;
  int v127 = 1;
  *(void *)&long long v124 = v100;
  *((void *)&v124 + 1) = v102;
  int v125 = 1;
  uint64_t v103 = sub_1CC73933C(v101, 40, (uint64_t)&v118, &v126, &v124);
  uint64_t v105 = v104;
  uint64_t v106 = *a1;
  *(void *)&long long v126 = v123;
  DWORD2(v126) = 0;
  uint64_t v107 = sub_1CC7362A8(v106, (unint64_t *)&v126, 0);
  uint64_t v108 = *a1;
  LODWORD(v120) = v5;
  int v121 = 1;
  *(void *)&long long v126 = v103;
  *((void *)&v126 + 1) = v105;
  int v127 = 1;
  *(void *)&long long v124 = v107;
  *((void *)&v124 + 1) = v109;
  int v125 = 1;
  *(void *)&long long v118 = v96;
  *((void *)&v118 + 1) = v98;
  int v119 = 1;
  sub_1CC739494(v108, &v120, &v126, &v124, &v118, 0);
  llvm::MachineInstr::eraseFromParent(a2);
  return v9;
}

uint64_t sub_1CD61ED64(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  int v5 = *(_DWORD *)(v4 + 4);
  int v6 = *(_DWORD *)(v4 + 36);
  uint64_t v7 = a1[2];
  if (v5 < 0 && (uint64_t v11 = v5 & 0x7FFFFFFF, v11 < *(_DWORD *)(v7 + 432))) {
    uint64_t v8 = *(void *)(*(void *)(v7 + 424) + 8 * v11);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v14 = v8;
  if (v6 < 0 && (uint64_t v12 = v6 & 0x7FFFFFFF, v12 < *(_DWORD *)(v7 + 432))) {
    uint64_t v9 = *(void *)(*(void *)(v7 + 424) + 8 * v12);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v13 = v9;
  if ((v8 & 0xFFFFFFFFFFFFFFF9) != 0 && (v8 & 4) != 0) {
    uint64_t v8 = sub_1CBA15978((unint64_t *)&v14);
  }
  if (v8 != 129) {
    return 2;
  }
  if ((v9 & 0xFFFFFFFFFFFFFFF9) != 0 && (v9 & 4) != 0) {
    uint64_t v9 = sub_1CBA15978((unint64_t *)&v13);
  }
  if (v9 == 513) {
    return sub_1CD626E7C(a1, a2);
  }
  else {
    return 2;
  }
}

void sub_1CD61EE48(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_DWORD **)(a2 + 32);
  int v5 = v4[1];
  int v6 = v4[9];
  int v7 = v4[17];
  if (v5 < 0 && (uint64_t v14 = a1[2], (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v14 + 432))) {
    uint64_t v8 = *(void *)(*(void *)(v14 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *a1;
  uint64_t v20 = v8;
  int v21 = 0;
  v15[0] = v7;
  int v16 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v9 + 32))(v9, 182, &v20, 1, v15, 1, 0);
  uint64_t v11 = *a1;
  uint64_t v12 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
  LODWORD(v20) = v5;
  int v21 = 1;
  v15[0] = v6;
  int v16 = 0;
  uint64_t v17 = v10;
  uint64_t v18 = v13;
  int v19 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 170, &v20, 1, v15, 2, v12);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

void sub_1CD61EFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(_DWORD **)(a2 + 32);
  int v4 = v3[9];
  int v5 = v3[17];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v4 < 0 && (v4 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432)) {
    unint64_t v7 = *(void *)(*(void *)(v6 + 424) + 8 * (v4 & 0x7FFFFFFF));
  }
  else {
    unint64_t v7 = 0;
  }
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432)) {
    unint64_t v8 = *(void *)(*(void *)(v6 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v9 = (unsigned __int16)(v7 >> 3);
  uint64_t v10 = (unsigned __int16)(v7 >> 19);
  if ((v7 & 2) == 0) {
    uint64_t v10 = (v7 >> 19);
  }
  if ((v7 & 4) != 0) {
    uint64_t v9 = v10;
  }
  if (v7) {
    uint64_t v11 = (v7 >> 3);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v8)
  {
    int v12 = v8 >> 3;
  }
  else if ((v8 & 4) != 0)
  {
    if ((v8 & 2) != 0) {
      int v12 = (unsigned __int16)(v8 >> 19);
    }
    else {
      int v12 = v8 >> 19;
    }
  }
  else
  {
    int v12 = (unsigned __int16)(v8 >> 3);
  }
  int v46 = v3[1];
  uint64_t v13 = *(llvm::ConstantInt ******)a1;
  unint64_t v48 = v7;
  LODWORD(v49) = 0;
  sub_1CBA62420(v11, (llvm::APInt *)&v54);
  uint64_t v14 = sub_1CC737454(v13, (uint64_t)&v48, (llvm::LLVMContext *)&v54);
  uint64_t v45 = v15;
  if (v55 >= 0x41 && v54) {
    MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
  }
  int v16 = *(llvm::ConstantInt ******)a1;
  unint64_t v48 = v7;
  LODWORD(v49) = 0;
  sub_1CB8F1EEC((uint64_t)&v54, v11, 0);
  sub_1CBAB8F38(&v54, 0, v11 - 1);
  uint64_t v17 = sub_1CC737454(v16, (uint64_t)&v48, (llvm::LLVMContext *)&v54);
  uint64_t v19 = v18;
  if (v55 >= 0x41 && v54) {
    MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
  }
  uint64_t v20 = *(llvm::ConstantInt ******)a1;
  unint64_t v54 = v7;
  unsigned int v55 = 0;
  LODWORD(v48) = v4;
  int v50 = 0;
  uint64_t v51 = v17;
  uint64_t v52 = v19;
  int v53 = 1;
  ((void (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v20)[4])(v20, 65, &v54, 1, &v48, 2, 0);
  int v22 = *(_DWORD *)(*(void *)(v21 + 32) + 4);
  if (v7 == v8)
  {
    uint64_t v23 = *(llvm::ConstantInt ******)a1;
    unint64_t v54 = v7;
    unsigned int v55 = 0;
    LODWORD(v48) = v5;
    int v50 = 0;
    uint64_t v51 = v14;
    uint64_t v52 = v45;
    int v53 = 1;
    ((void (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v23)[4])(v23, 65, &v54, 1, &v48, 2, 0);
  }
  else
  {
    uint64_t v25 = *(void *)a1;
    if ((int)v11 <= v12)
    {
      unint64_t v48 = v8;
      LODWORD(v49) = 0;
      uint64_t v35 = sub_1CC7362A8(v25, &v48, v12 - (int)v11);
      uint64_t v36 = *(llvm::ConstantInt ******)a1;
      unint64_t v54 = v8;
      unsigned int v55 = 0;
      LODWORD(v48) = v5;
      int v50 = 0;
      uint64_t v51 = v35;
      uint64_t v52 = v37;
      int v53 = 1;
      uint64_t v38 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v36)[4])(v36, 128, &v54, 1, &v48, 2, 0);
      uint64_t v39 = *(llvm::ConstantInt ******)a1;
      unint64_t v54 = v7;
      unsigned int v55 = 0;
      unint64_t v48 = v38;
      uint64_t v49 = v40;
      int v50 = 1;
      uint64_t v33 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v39)[4])(v39, 119, &v54, 1, &v48, 1, 0);
    }
    else
    {
      unint64_t v48 = v7;
      LODWORD(v49) = 0;
      uint64_t v26 = sub_1CC7362A8(v25, &v48, (int)v11 - v12);
      uint64_t v28 = v27;
      uint64_t v29 = *(llvm::ConstantInt ******)a1;
      unint64_t v54 = v7;
      unsigned int v55 = 0;
      LODWORD(v48) = v5;
      int v50 = 0;
      uint64_t v30 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v29)[4])(v29, 126, &v54, 1, &v48, 1, 0);
      uint64_t v31 = *(llvm::ConstantInt ******)a1;
      unint64_t v54 = v7;
      unsigned int v55 = 0;
      unint64_t v48 = v30;
      uint64_t v49 = v32;
      int v50 = 1;
      uint64_t v51 = v26;
      uint64_t v52 = v28;
      int v53 = 1;
      uint64_t v33 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v31)[4])(v31, 127, &v54, 1, &v48, 2, 0);
    }
    uint64_t v41 = *(llvm::ConstantInt ******)a1;
    unint64_t v54 = v7;
    unsigned int v55 = 0;
    unint64_t v48 = v33;
    uint64_t v49 = v34;
    int v50 = 1;
    uint64_t v51 = v14;
    uint64_t v52 = v45;
    int v53 = 1;
    ((void (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v41)[4])(v41, 65, &v54, 1, &v48, 2, 0);
  }
  int v42 = *(_DWORD *)(*(void *)(v24 + 32) + 4);
  uint64_t v43 = *(llvm::ConstantInt ******)a1;
  uint64_t v44 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
  LODWORD(v54) = v46;
  unsigned int v55 = 1;
  LODWORD(v48) = v22;
  int v50 = 0;
  LODWORD(v51) = v42;
  int v53 = 0;
  ((void (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*v43)[4])(v43, 66, &v54, 1, &v48, 2, v44);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

void sub_1CD61F4DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(_DWORD **)(a2 + 32);
  int v6 = v5[1];
  int v7 = v5[9];
  unsigned int v8 = v5[17];
  uint64_t v9 = a1[2];
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v9 + 432)) {
    uint64_t v10 = *(void *)(*(void *)(v9 + 424) + 8 * (v6 & 0x7FFFFFFF));
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = *(unsigned __int16 *)v4;
  LODWORD(v4) = *(unsigned __int16 *)(a2 + 44);
  if ((v4 & 0x10) == 0)
  {
    if (!sub_1CD631AF0(v5[9], v9, 1))
    {
      uint64_t v12 = *a1;
      uint64_t v13 = *(unsigned __int16 *)(a2 + 44) | 0x100000000;
      uint64_t v24 = v10;
      int v25 = 0;
      v20[0] = v7;
      int v21 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 186, &v24, 1, v20, 1, v13);
      int v7 = *(_DWORD *)(*(void *)(v14 + 32) + 4);
    }
    BOOL v15 = sub_1CD631AF0(v8, a1[2], 1);
    unint64_t v4 = *(unsigned __int16 *)(a2 + 44);
    if (!v15)
    {
      uint64_t v16 = *a1;
      uint64_t v24 = v10;
      int v25 = 0;
      v20[0] = v8;
      int v21 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, unint64_t))(*(void *)v16 + 32))(v16, 186, &v24, 1, v20, 1, v4 | 0x100000000);
      unsigned int v8 = *(_DWORD *)(*(void *)(v17 + 32) + 4);
      LODWORD(v4) = *(unsigned __int16 *)(a2 + 44);
    }
  }
  if (v11 == 187) {
    uint64_t v18 = 189;
  }
  else {
    uint64_t v18 = 190;
  }
  uint64_t v19 = *a1;
  LODWORD(v24) = v6;
  int v25 = 1;
  v20[0] = v7;
  int v21 = 0;
  unsigned int v22 = v8;
  int v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, v18, &v24, 1, v20, 2, v4 | 0x100000000);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

uint64_t sub_1CD61F6E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(_DWORD **)(a2 + 32);
  int v5 = v4[9];
  if (**(_WORD **)(a2 + 16) == 204) {
    int v6 = v4[17];
  }
  else {
    int v6 = 0;
  }
  unsigned int v7 = v4[8 * (*(_DWORD *)(a2 + 40) - 1) + 1];
  if (v5 < 0 && (uint64_t v18 = a1[2], (v5 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v18 + 432))) {
    unint64_t v8 = *(void *)(*(void *)(v18 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v8 = 0;
  }
  int v9 = v4[1];
  unint64_t v58 = v8;
  unint64_t v11 = sub_1CBA15978(&v58);
  unint64_t v57 = v11;
  unint64_t v12 = v58;
  uint64_t v13 = 0x800000000000000;
  if ((v58 & 2) == 0) {
    uint64_t v13 = 0x8000000000000;
  }
  if ((v13 & v58) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v10);
    unint64_t v12 = v58;
  }
  int64_t v14 = sub_1CC73C9C0(v7, a1[2]);
  if (v15 && (int64_t v16 = v14, v14 <= (unsigned __int16)(v12 >> 3)))
  {
    *(void *)&v59[0] = &v59[1];
    *((void *)&v59[0] + 1) = 0x800000000;
    sub_1CC724218(a1, v5, v11, (unsigned __int16)(v12 >> 3), (uint64_t)v59);
    if (v6)
    {
      uint64_t v19 = *(int **)&v59[0];
      *(_DWORD *)(*(void *)&v59[0] + 4 * v16) = *(_DWORD *)(*(void *)(a2 + 32) + 68);
      uint64_t v20 = *a1;
      *(_DWORD *)uint64_t v56 = v9;
      *(_DWORD *)&v56[8] = 1;
      sub_1CC73661C(v20, (uint64_t)v56, v19, DWORD2(v59[0]));
    }
    else
    {
      uint64_t v21 = *a1;
      LODWORD(v53) = v9;
      LODWORD(v54) = 1;
      *(_DWORD *)uint64_t v56 = *(_DWORD *)(*(void *)&v59[0] + 4 * v16);
      *(_DWORD *)&v56[16] = 0;
      (*(void (**)(uint64_t, uint64_t, llvm::MachineFunction **, uint64_t, unsigned char *, uint64_t, void))(*(void *)v21 + 32))(v21, 19, &v53, 1, v56, 1, 0);
    }
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    if (*(long long **)&v59[0] != &v59[1]) {
      free(*(void **)&v59[0]);
    }
  }
  else
  {
    if ((sub_1CB8F1DC4(&v57) & 7) != 0) {
      return 2;
    }
    uint64_t v23 = sub_1CB8F1DC4(&v57);
    if (v22 == 1) {
    char v24 = sub_1CD6232A4(v58);
    }
    memset(v56, 0, 21);
    uint64_t v26 = (const char *)((unint64_t)(sub_1CB8F1DC4(&v58) + 7) >> 3);
    if (v25 == 1) {
    uint64_t v27 = sub_1CD623330((uint64_t)a1, v26, 0, v24, (uint64_t)v56);
    }
    uint64_t v29 = v28;
    uint64_t v30 = (void *)*a1;
    LODWORD(v53) = v5;
    int v55 = 0;
    int v50 = v27;
    uint64_t v51 = v28;
    int v52 = 1;
    long long v48 = *(_OWORD *)v56;
    uint64_t v49 = *(void *)&v56[16];
    memset(v59, 0, 32);
    sub_1CD62D9C4(v30, (int *)&v53, (int *)&v50, &v48, v24, 0, v59);
    int v31 = sub_1CD623430(a1, *(_DWORD *)(*(void *)(v29 + 32) + 4), v58, v7);
    unint64_t v32 = sub_1CC73C9C0(v7, a1[2]);
    if (v33)
    {
      uint64_t v34 = v32 * ((unint64_t)(v23 + 7) >> 3);
      sub_1CB8F0264((uint64_t *)v56, v34, (uint64_t)v59);
      *(_OWORD *)uint64_t v56 = v59[0];
      *(void *)&v56[13] = *(void *)((char *)v59 + 13);
      char v35 = 63 - __clz((v34 | (1 << v24)) & -(v34 | (1 << v24)));
    }
    else
    {
      char v35 = sub_1CD6232A4(v57);
      if (v31 < 0 && (uint64_t v41 = a1[2], (v31 & 0x7FFFFFFFu) < *(_DWORD *)(v41 + 432))) {
        unint64_t v39 = *(void *)(*(void *)(v41 + 424) + 8 * (v31 & 0x7FFFFFFF));
      }
      else {
        unint64_t v39 = 0;
      }
      char v40 = 35;
      if ((v39 & 4) == 0) {
        char v40 = 19;
      }
      *(_OWORD *)uint64_t v56 = 0uLL;
      *(_DWORD *)&v56[16] = (v39 >> v40) & 0xFFFFFF;
      v56[20] = 0;
    }
    uint64_t v36 = (void *)*a1;
    char v37 = v35;
    if (v6)
    {
      LODWORD(v53) = v6;
      int v55 = 0;
      LODWORD(v50) = v31;
      int v52 = 0;
      long long v46 = *(_OWORD *)v56;
      uint64_t v47 = *(void *)&v56[16];
      memset(v59, 0, 32);
      sub_1CD62D9C4(v36, (int *)&v53, (int *)&v50, &v46, v35, 0, v59);
      uint64_t v36 = (void *)*a1;
      LODWORD(v50) = v9;
      LODWORD(v51) = 1;
      int v53 = v27;
      uint64_t v54 = v29;
      int v55 = 1;
      long long v44 = *(_OWORD *)v56;
      uint64_t v45 = *(void *)&v56[16];
      memset(v59, 0, 32);
      uint64_t v38 = &v44;
      char v37 = v24;
    }
    else
    {
      LODWORD(v50) = v9;
      LODWORD(v51) = 1;
      LODWORD(v53) = v31;
      int v55 = 0;
      long long v42 = *(_OWORD *)v56;
      uint64_t v43 = *(void *)&v56[16];
      memset(v59, 0, 32);
      uint64_t v38 = &v42;
    }
    sub_1CD62D8F8(v36, (int *)&v50, (int *)&v53, v38, v37, 0, v59);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  }
  return 1;
}

uint64_t sub_1CD61FBA8(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(*((void *)a2 + 3) + 32) + 16);
  if (!*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4) + 8)) {
    return 2;
  }
  uint64_t v5 = *((void *)a2 + 4);
  int v6 = *(_DWORD *)(v5 + 4);
  unint64_t v7 = *(void *)(v5 + 80);
  if (v6 < 0 && (uint64_t v39 = a1[2], (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v39 + 432))) {
    unint64_t v8 = *(void *)(*(void *)(v39 + 424) + 8 * (v6 & 0x7FFFFFFF));
  }
  else {
    unint64_t v8 = 0;
  }
  int v9 = *(_DWORD *)(v5 + 36);
  unint64_t v44 = v8;
  unsigned int v11 = sub_1CB8F1DC4(&v44);
  if (v10 == 1) {
  uint64_t v12 = 1;
  }
  uint64_t v43 = (8 * v11) | 1;
  int v13 = *(_DWORD *)(a1[4] + 88);
  uint64_t v14 = *a1;
  unint64_t v51 = v44;
  int v52 = 0;
  LODWORD(v45) = v13;
  int v47 = 0;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v14 + 32))(v14, 19, &v51, 1, &v45, 1, 0);
  uint64_t v16 = *a1;
  unint64_t v51 = v43;
  int v52 = 0;
  unint64_t v45 = v15;
  uint64_t v46 = v17;
  int v47 = 1;
  uint64_t v18 = sub_1CC7382B0(v16);
  uint64_t v19 = *a1;
  unint64_t v51 = v43;
  int v52 = 0;
  unint64_t v45 = v18;
  uint64_t v46 = v20;
  int v47 = 1;
  LODWORD(v48) = v9;
  int v50 = 0;
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v19 + 32))(v19, 46, &v51, 1, &v45, 2, 0);
  uint64_t v23 = v22;
  if (v7)
  {
    uint64_t v24 = (63 - __clz(v7));
    if (v24)
    {
      unsigned int v26 = sub_1CB8F1DC4((unint64_t *)&v43);
      if (v25 == 1)
      {
        unsigned int v40 = v26;
        unsigned int v26 = v40;
      }
      sub_1CB8F1EEC((uint64_t)&v41, v26, 1 << v24);
      sub_1CBA14940((uint64_t)&v41);
      llvm::APInt::operator++((uint64_t)&v41);
      uint64_t v27 = (llvm::ConstantInt *****)*a1;
      unint64_t v45 = v43;
      LODWORD(v46) = 0;
      uint64_t v28 = sub_1CC737454(v27, (uint64_t)&v45, (llvm::LLVMContext *)&v41);
      uint64_t v29 = *a1;
      unint64_t v51 = v43;
      int v52 = 0;
      unint64_t v45 = v21;
      uint64_t v46 = v23;
      int v47 = 1;
      uint64_t v48 = v28;
      uint64_t v49 = v30;
      int v50 = 1;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v29 + 32))(v29, 65, &v51, 1, &v45, 2, 0);
      uint64_t v23 = v31;
      if (v42 >= 0x41 && v41) {
        MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
      }
    }
  }
  uint64_t v32 = *a1;
  unint64_t v51 = v44;
  int v52 = 0;
  unint64_t v45 = v21;
  uint64_t v46 = v23;
  int v47 = 1;
  uint64_t v33 = sub_1CC7382B0(v32);
  uint64_t v35 = v34;
  uint64_t v36 = *a1;
  LODWORD(v51) = v13;
  int v52 = 1;
  unint64_t v45 = v33;
  uint64_t v46 = v34;
  int v47 = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v36 + 32))(v36, 19, &v51, 1, &v45, 1, 0);
  uint64_t v37 = *a1;
  LODWORD(v51) = v6;
  int v52 = 1;
  unint64_t v45 = v33;
  uint64_t v46 = v35;
  int v47 = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v37 + 32))(v37, 19, &v51, 1, &v45, 1, 0);
  llvm::MachineInstr::eraseFromParent(a2);
  return v12;
}

uint64_t sub_1CD61FFA4(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 4);
  int v5 = *(_DWORD *)(v4 + 4);
  int v6 = *(_DWORD *)(v4 + 36);
  uint64_t v7 = *(void *)(v4 + 80);
  uint64_t v8 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
    unint64_t v9 = *(void *)(*(void *)(v8 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v44 = v9;
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432))
  {
    uint64_t v43 = *(void *)(*(void *)(v8 + 424) + 8 * (v6 & 0x7FFFFFFF));
    if ((v43 & 0xFFFFFFFFFFFFFFF9) != 0 && (v43 & 4) != 0)
    {
      uint64_t v48 = (void *)sub_1CBA15978((unint64_t *)&v43);
      unsigned int v26 = sub_1CB8F1DC4((unint64_t *)&v48);
      if (v25 == 1) {
      unsigned int v28 = sub_1CB8F1DC4(&v44);
      }
      if (v27 == 1) {
      uint64_t v29 = v7 / v26;
      }
      if (!(v7 % v26) && !(v28 % v26))
      {
        unint64_t v30 = v28 + v7;
        unint64_t v32 = sub_1CB8F1DC4((unint64_t *)&v43);
        if (v31 == 1) {
        if (v32 >= v30)
        }
        {
          uint64_t v33 = (void *)*a1;
          unint64_t v34 = sub_1CBA15978((unint64_t *)&v43);
          LODWORD(v48) = v6;
          int v50 = 0;
          sub_1CC7363F0(v33, v34, (int *)&v48);
          uint64_t v48 = &v50;
          uint64_t v49 = 0x800000000;
          unsigned int v36 = v30 / v26;
          if (v29 >= v36)
          {
            unsigned int v37 = 0;
            uint64_t v39 = &v50;
          }
          else
          {
            unsigned int v37 = 0;
            do
            {
              if (v37 >= HIDWORD(v49)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v48 + v37) = *(_DWORD *)(*(void *)(v35 + 32) + 32 * v29 + 4);
              int v38 = v49;
              unsigned int v37 = v49 + 1;
              LODWORD(v49) = v49 + 1;
              ++v29;
            }
            while (v29 != v36);
            uint64_t v39 = (int *)v48;
            if (!v38)
            {
              unsigned int v40 = (void *)*a1;
              v42[0] = v5;
              v42[2] = 1;
              LODWORD(v45) = *(_DWORD *)v48;
              int v47 = 0;
              (*(void (**)(void *, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, void))(*v40 + 32))(v40, 19, v42, 1, &v45, 1, 0);
              goto LABEL_46;
            }
          }
          uint64_t v41 = *a1;
          LODWORD(v45) = v5;
          int v46 = 1;
          sub_1CC73661C(v41, (uint64_t)&v45, v39, v37);
LABEL_46:
          llvm::MachineInstr::eraseFromParent(a2);
          if (v48 != &v50) {
            free(v48);
          }
          return 1;
        }
      }
    }
  }
  else
  {
    uint64_t v43 = 0;
  }
  if ((v44 & 1) == 0) {
    return 2;
  }
  uint64_t v11 = v43;
  if (v43) {
    goto LABEL_13;
  }
  uint64_t result = 2;
  if ((v43 & 0xFFFFFFFFFFFFFFF9) != 0 && (v43 & 4) != 0)
  {
    uint64_t v12 = sub_1CBA15978((unint64_t *)&v43);
    if (v44 != v12) {
      return 2;
    }
    uint64_t v11 = v43;
LABEL_13:
    if ((v11 & 1) == 0)
    {
      unsigned int v14 = sub_1CB8F1DC4((unint64_t *)&v43);
      if (v13 == 1) {
      uint64_t v11 = (8 * v14) | 1;
      }
      uint64_t v15 = *a1;
      uint64_t v45 = v11;
      int v46 = 0;
      LODWORD(v48) = v6;
      int v50 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v15 + 32))(v15, 82, &v45, 1, &v48, 1, 0);
      int v6 = *(_DWORD *)(*(void *)(v16 + 32) + 4);
    }
    uint64_t v17 = *a1;
    if (v7)
    {
      uint64_t v48 = (void *)v11;
      LODWORD(v49) = 0;
      uint64_t v18 = sub_1CC7362A8(v17, (unint64_t *)&v48, v7);
      uint64_t v19 = *a1;
      uint64_t v45 = v11;
      int v46 = 0;
      LODWORD(v48) = v6;
      int v50 = 0;
      uint64_t v51 = v18;
      uint64_t v52 = v20;
      int v53 = 1;
      uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v19 + 32))(v19, 128, &v45, 1, &v48, 2, 0);
      uint64_t v22 = *a1;
      LODWORD(v45) = v5;
      int v46 = 1;
      uint64_t v48 = v21;
      uint64_t v49 = v23;
      int v50 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v22 + 32))(v22, 119, &v45, 1, &v48, 1, 0);
    }
    else
    {
      LODWORD(v45) = v5;
      int v46 = 1;
      LODWORD(v48) = v6;
      int v50 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)v17 + 32))(v17, 119, &v45, 1, &v48, 1, 0);
    }
    llvm::MachineInstr::eraseFromParent(a2);
    return 1;
  }
  return result;
}

void sub_1CD620474(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a2 + 4);
  unsigned int v49 = *(_DWORD *)(v3 + 4);
  int v4 = *(_DWORD *)(v3 + 36);
  if ((v4 & 0x80000000) == 0 || (uint64_t v48 = a1[2], (v4 & 0x7FFFFFFFu) >= *(_DWORD *)(v48 + 432)))
  {
    unint64_t v5 = 0;
    goto LABEL_3;
  }
  unint64_t v5 = *(void *)(*(void *)(v48 + 424) + 8 * (v4 & 0x7FFFFFFF));
  if (v5)
  {
    int v6 = v5 >> 3;
    goto LABEL_4;
  }
  if ((v5 & 4) == 0)
  {
LABEL_3:
    int v6 = (unsigned __int16)(v5 >> 3);
    goto LABEL_4;
  }
  if ((v5 & 2) != 0) {
    int v6 = (unsigned __int16)(v5 >> 19);
  }
  else {
    int v6 = v5 >> 19;
  }
LABEL_4:
  unsigned int v7 = v6 + 7;
  uint64_t v8 = *a1;
  unsigned int v52 = (v6 + 7) & 0xFFFFFFF8;
  unint64_t v60 = v5;
  LODWORD(v61) = 0;
  uint64_t v9 = sub_1CC7362A8(v8, &v60, v52 - 8);
  uint64_t v11 = v10;
  uint64_t v12 = *a1;
  unint64_t v66 = v5;
  int v67 = 0;
  LODWORD(v60) = v4;
  int v62 = 0;
  uint64_t v63 = v9;
  uint64_t v64 = v10;
  int v65 = 1;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v12 + 32))(v12, 127, &v66, 1, &v60, 2, 0);
  uint64_t v15 = v14;
  uint64_t v16 = *a1;
  unint64_t v66 = v5;
  int v67 = 0;
  int v51 = v4;
  LODWORD(v60) = v4;
  int v62 = 0;
  uint64_t v63 = v9;
  uint64_t v64 = v11;
  int v65 = 1;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v16 + 32))(v16, 128, &v66, 1, &v60, 2, 0);
  uint64_t v18 = *a1;
  unint64_t v66 = v5;
  int v67 = 0;
  unint64_t v60 = v17;
  uint64_t v61 = v19;
  int v62 = 1;
  uint64_t v63 = v13;
  uint64_t v64 = v15;
  int v65 = 1;
  uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v18 + 32))(v18, 66, &v66, 1, &v60, 2, 0);
  uint64_t v56 = v20;
  if (v7 >= 0x20)
  {
    uint64_t v21 = (v7 >> 4) - 1;
    unsigned int v22 = v52 - 24;
    char v23 = 8;
    do
    {
      sub_1CB8F1EEC((uint64_t)&v58, v52, 255 << v23);
      uint64_t v24 = (llvm::ConstantInt *****)*a1;
      unint64_t v60 = v5;
      LODWORD(v61) = 0;
      uint64_t v53 = sub_1CC737454(v24, (uint64_t)&v60, (llvm::LLVMContext *)&v58);
      uint64_t v54 = v25;
      uint64_t v26 = v25;
      uint64_t v27 = *a1;
      unint64_t v60 = v5;
      LODWORD(v61) = 0;
      uint64_t v28 = sub_1CC7362A8(v27, &v60, v22);
      uint64_t v30 = v29;
      uint64_t v31 = *a1;
      unint64_t v66 = v5;
      int v67 = 0;
      LODWORD(v60) = v51;
      int v62 = 0;
      uint64_t v63 = v53;
      uint64_t v64 = v26;
      int v65 = 1;
      uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v31 + 32))(v31, 65, &v66, 1, &v60, 2, 0);
      uint64_t v33 = *a1;
      unint64_t v66 = v5;
      int v67 = 0;
      unint64_t v60 = v32;
      uint64_t v61 = v34;
      int v62 = 1;
      uint64_t v63 = v28;
      uint64_t v64 = v30;
      int v65 = 1;
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v33 + 32))(v33, 127, &v66, 1, &v60, 2, 0);
      uint64_t v36 = *a1;
      unint64_t v66 = v5;
      int v67 = 0;
      unint64_t v60 = v55;
      uint64_t v61 = v56;
      int v62 = 1;
      uint64_t v63 = v35;
      uint64_t v64 = v37;
      int v65 = 1;
      uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v36 + 32))(v36, 66, &v66, 1, &v60, 2, 0);
      uint64_t v39 = v38;
      uint64_t v40 = *a1;
      unint64_t v66 = v5;
      int v67 = 0;
      LODWORD(v60) = v51;
      int v62 = 0;
      uint64_t v63 = v28;
      uint64_t v64 = v30;
      int v65 = 1;
      uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v40 + 32))(v40, 128, &v66, 1, &v60, 2, 0);
      uint64_t v42 = *a1;
      unint64_t v66 = v5;
      int v67 = 0;
      unint64_t v60 = v41;
      uint64_t v61 = v43;
      int v62 = 1;
      uint64_t v63 = v53;
      uint64_t v64 = v54;
      int v65 = 1;
      uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v42 + 32))(v42, 65, &v66, 1, &v60, 2, 0);
      uint64_t v45 = *a1;
      unint64_t v66 = v5;
      int v67 = 0;
      unint64_t v60 = v57;
      uint64_t v61 = v39;
      int v62 = 1;
      uint64_t v63 = v44;
      uint64_t v64 = v46;
      int v65 = 1;
      uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v45 + 32))(v45, 66, &v66, 1, &v60, 2, 0);
      uint64_t v56 = v47;
      if (v59 >= 0x41 && v58) {
        MEMORY[0x1D25D9CB0](v58, 0x1000C8000313F17);
      }
      v22 -= 16;
      v23 += 8;
      --v21;
    }
    while (v21);
  }
  llvm::MachineOperand::setReg(*(void *)(v56 + 32), v49);
  llvm::MachineInstr::eraseFromParent(a2);
}

void sub_1CD62099C(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a2 + 4);
  uint64_t v7 = *(unsigned int *)(v6 + 36);
  if ((v7 & 0x80000000) != 0
    && (uint64_t v13 = a1[2], (v7 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v13 + 432)))
  {
    unint64_t v8 = *(void *)(*(void *)(v13 + 424) + 8 * (v7 & 0x7FFFFFFF));
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v9 = *(unsigned int *)(v6 + 4);
  unint64_t v41 = v8;
  uint64_t v11 = (llvm::APInt *)sub_1CB8F1DC4(&v41);
  if (v10 == 1) {
  if (v11 >= 8)
  }
    unsigned int v12 = 8;
  else {
    unsigned int v12 = v11;
  }
  if (v11 == 1)
  {
    llvm::MachineRegisterInfo::replaceRegWith((void *)a1[2], v9, v7);
    llvm::MachineInstr::removeFromParent(a2);
    return;
  }
  if (v11 >= 9)
  {
    uint64_t v14 = *a1;
    unint64_t v45 = v41;
    int v46 = 0;
    LODWORD(v42) = v7;
    int v44 = 0;
    int v15 = 1;
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v14 + 32))(v14, 212, &v45, 1, &v42, 1, 0);
    unint64_t v17 = v16 & 0xFFFFFFFF00000000;
    uint64_t v7 = v16;
    goto LABEL_14;
  }
  if (v11 >= 5)
  {
    unint64_t v17 = 0;
    int v15 = 0;
LABEL_14:
    unint64_t v18 = v41;
    uint64_t v19 = *a1;
    *(void *)&long long v39 = v17 | v7;
    *((void *)&v39 + 1) = v10;
    int v40 = v15;
    sub_1CB8F1EEC((uint64_t)&v42, v12, 240);
    llvm::APInt::getSplat(v11, (llvm::APInt *)&v42, (uint64_t)&v37);
    uint64_t v7 = sub_1CC72C354(4u, v18, 0, v19, &v39, (llvm::LLVMContext *)&v37);
    uint64_t v2 = v20;
    if (v38 >= 0x41 && v37) {
      MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
    }
    unint64_t v21 = v7 & 0xFFFFFFFF00000000;
    if (v43 >= 0x41 && v42) {
      MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
    }
    uint64_t v7 = v7;
    int v22 = 1;
    goto LABEL_21;
  }
  unint64_t v21 = 0;
  int v22 = 0;
  int v27 = 0;
  unint64_t v26 = 0;
  if (v11 >= 3)
  {
LABEL_21:
    unint64_t v23 = v41;
    uint64_t v24 = *a1;
    *(void *)&long long v35 = v21 | v7;
    *((void *)&v35 + 1) = v2;
    int v36 = v22;
    sub_1CB8F1EEC((uint64_t)&v42, v12, 204);
    llvm::APInt::getSplat(v11, (llvm::APInt *)&v42, (uint64_t)&v33);
    uint64_t v7 = sub_1CC72C354(2u, v23, 0, v24, &v35, (llvm::LLVMContext *)&v33);
    uint64_t v3 = v25;
    if (v34 >= 0x41 && v33) {
      MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
    }
    unint64_t v26 = v7 & 0xFFFFFFFF00000000;
    if (v43 >= 0x41 && v42) {
      MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
    }
    uint64_t v7 = v7;
    int v27 = 1;
  }
  uint64_t v28 = *a1;
  *(void *)&long long v31 = v26 | v7;
  *((void *)&v31 + 1) = v3;
  int v32 = v27;
  sub_1CB8F1EEC((uint64_t)&v42, v12, 170);
  llvm::APInt::getSplat(v11, (llvm::APInt *)&v42, (uint64_t)&v29);
  sub_1CC72C354(1u, v9, 1, v28, &v31, (llvm::LLVMContext *)&v29);
  if (v30 >= 0x41 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
  }
  if (v43 >= 0x41)
  {
    if (v42) {
      MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
    }
  }
  llvm::MachineInstr::eraseFromParent(a2);
}

uint64_t sub_1CD620D50(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 + 8);
  int v5 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  int v7 = *(_DWORD *)(v6 + 32 * (v5 != 232) + 4);
  if (v7 < 0 && (uint64_t v15 = a1[2], (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v15 + 432))) {
    uint64_t v8 = *(void *)(*(void *)(v15 + 424) + 8 * (v7 & 0x7FFFFFFF));
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v6 + 32 * (v5 == 232) + 16);
  uint64_t v10 = a1[4];
  uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v9 - 8 * *(unsigned int *)(v9 + 8)));
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 1896))(v10, String, v8, v4);
  if (!v12) {
    return 2;
  }
  int v13 = v12;
  uint64_t v14 = *a1;
  if (v5 == 232)
  {
    int v18 = v7;
    int v19 = 1;
    v17[0] = v13;
  }
  else
  {
    int v18 = v13;
    int v19 = 1;
    v17[0] = v7;
  }
  void v17[4] = 0;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v14 + 32))(v14, 19, &v18, 1, v17, 1, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  return 1;
}

void sub_1CD620ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (llvm::MachineInstr *)a2;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_DWORD **)(a2 + 32);
  int v66 = v4[1];
  if (v66 < 0 && (v16 = *(void *)(a1 + 16), uint64_t v17 = v66 & 0x7FFFFFFF, v17 < *(_DWORD *)(v16 + 432))) {
    unint64_t v5 = *(void *)(*(void *)(v16 + 424) + 8 * v17);
  }
  else {
    unint64_t v5 = 0;
  }
  int v6 = v4[9];
  int v7 = v4[17];
  int v8 = 1;
  int v9 = 45;
  switch(**(_WORD **)(a2 + 16))
  {
    case 0x96:
      goto LABEL_9;
    case 0x97:
      uint64_t v10 = 46;
      int v11 = v4[9];
      goto LABEL_5;
    case 0x98:
      int v8 = 0;
      int v9 = 46;
LABEL_9:
      int v64 = v4[17];
      unsigned int v65 = v9;
      uint64_t v18 = (unsigned __int16)(v5 >> 3);
      uint64_t v19 = (unsigned __int16)(v5 >> 19);
      if ((v5 & 2) == 0) {
        uint64_t v19 = (v5 >> 19);
      }
      if ((v5 & 4) != 0) {
        uint64_t v18 = v19;
      }
      uint64_t v20 = *(llvm::ConstantInt ******)a1;
      if (v5) {
        uint64_t v21 = (v5 >> 3);
      }
      else {
        uint64_t v21 = v18;
      }
      *(void *)&long long v67 = v5;
      DWORD2(v67) = 0;
      sub_1CBFD9168(v21, (llvm::APInt *)&v71);
      uint64_t v22 = sub_1CC737454(v20, (uint64_t)&v67, (llvm::LLVMContext *)&v71);
      uint64_t v24 = v23;
      if (v72 >= 0x41 && v71) {
        MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
      }
      uint64_t v25 = *(llvm::ConstantInt ******)a1;
      *(void *)&long long v67 = v5;
      DWORD2(v67) = 0;
      sub_1CBA62420(v21, (llvm::APInt *)&v71);
      *(void *)&long long v63 = sub_1CC737454(v25, (uint64_t)&v67, (llvm::LLVMContext *)&v71);
      *((void *)&v63 + 1) = v26;
      if (v72 >= 0x41 && v71) {
        MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
      }
      uint64_t v27 = *(void *)a1;
      *(void *)&long long v67 = v5;
      DWORD2(v67) = 0;
      if (v8)
      {
        uint64_t v28 = sub_1CC7362A8(v27, (unint64_t *)&v67, 0);
        uint64_t v30 = v29;
        long long v31 = *(llvm::ConstantInt ******)a1;
        unint64_t v71 = v5;
        unsigned int v72 = 0;
        LODWORD(v67) = v6;
        int v68 = 0;
        *(void *)&long long v69 = v28;
        *((void *)&v69 + 1) = v29;
        int v70 = 1;
        uint64_t v32 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v31)[4])(v31, 196, &v71, 1, &v67, 2, 0);
        unint64_t v71 = v5;
        unsigned int v72 = 0;
        *(void *)&long long v67 = v22;
        *((void *)&v67 + 1) = v24;
        int v68 = 1;
        *(void *)&long long v69 = v32;
        *((void *)&v69 + 1) = v33;
        int v70 = 1;
        uint64_t v34 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v31)[4])(v31, 46, &v71, 1, &v67, 2, 0);
        uint64_t v36 = v35;
        uint64_t v37 = *(llvm::ConstantInt ******)a1;
        unint64_t v71 = v5;
        unsigned int v72 = 0;
        LODWORD(v67) = v6;
        int v68 = 0;
        *(void *)&long long v69 = v28;
        *((void *)&v69 + 1) = v30;
        int v70 = 1;
        uint64_t v38 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v37)[4])(v37, 195, &v71, 1, &v67, 2, 0);
        unint64_t v71 = v5;
        unsigned int v72 = 0;
        long long v67 = v63;
        int v68 = 1;
        *(void *)&long long v69 = v38;
        *((void *)&v69 + 1) = v39;
        int v70 = 1;
        uint64_t v40 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v37)[4])(v37, 46, &v71, 1, &v67, 2, 0);
        uint64_t v42 = v41;
      }
      else
      {
        int v62 = v2;
        uint64_t v43 = sub_1CC7362A8(v27, (unint64_t *)&v67, 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v45 = v44;
        int v46 = *(llvm::ConstantInt ******)a1;
        unint64_t v71 = v5;
        unsigned int v72 = 0;
        LODWORD(v67) = v6;
        int v68 = 0;
        *(void *)&long long v69 = v43;
        *((void *)&v69 + 1) = v44;
        int v70 = 1;
        uint64_t v47 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v46)[4])(v46, 196, &v71, 1, &v67, 2, 0);
        unint64_t v71 = v5;
        unsigned int v72 = 0;
        *(void *)&long long v67 = v47;
        *((void *)&v67 + 1) = v48;
        int v68 = 1;
        *(void *)&long long v69 = v22;
        *((void *)&v69 + 1) = v24;
        int v70 = 1;
        uint64_t v40 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v46)[4])(v46, 46, &v71, 1, &v67, 2, 0);
        uint64_t v42 = v49;
        int v50 = *(llvm::ConstantInt ******)a1;
        unint64_t v71 = v5;
        unsigned int v72 = 0;
        LODWORD(v67) = v6;
        int v68 = 0;
        *(void *)&long long v69 = v43;
        *((void *)&v69 + 1) = v45;
        uint64_t v2 = v62;
        int v70 = 1;
        uint64_t v51 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v50)[4])(v50, 195, &v71, 1, &v67, 2, 0);
        unint64_t v71 = v5;
        unsigned int v72 = 0;
        *(void *)&long long v67 = v51;
        *((void *)&v67 + 1) = v52;
        int v68 = 1;
        long long v69 = v63;
        int v70 = 1;
        uint64_t v34 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v50)[4])(v50, 46, &v71, 1, &v67, 2, 0);
        uint64_t v36 = v53;
      }
      uint64_t v54 = *(llvm::ConstantInt ******)a1;
      unint64_t v71 = v5;
      unsigned int v72 = 0;
      *(void *)&long long v67 = v40;
      *((void *)&v67 + 1) = v42;
      int v68 = 1;
      LODWORD(v69) = v64;
      int v70 = 0;
      uint64_t v55 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v54)[4])(v54, 196, &v71, 1, &v67, 2, 0);
      unint64_t v71 = v5;
      unsigned int v72 = 0;
      *(void *)&long long v67 = v55;
      *((void *)&v67 + 1) = v56;
      int v68 = 1;
      *(void *)&long long v69 = v34;
      *((void *)&v69 + 1) = v36;
      int v70 = 1;
      uint64_t v57 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v54)[4])(v54, 195, &v71, 1, &v67, 2, 0);
      uint64_t v58 = *(llvm::ConstantInt ******)a1;
      LODWORD(v71) = v66;
      unsigned int v72 = 1;
      LODWORD(v67) = v6;
      int v68 = 0;
      *(void *)&long long v69 = v57;
      *((void *)&v69 + 1) = v59;
      int v70 = 1;
      ((void (*)(llvm::ConstantInt *****, void, unint64_t *, uint64_t, long long *, uint64_t, void))(*v58)[4])(v58, v65, &v71, 1, &v67, 2, 0);
      goto LABEL_26;
    default:
      unint64_t v60 = *(llvm::ConstantInt ******)a1;
      unint64_t v71 = v5;
      unsigned int v72 = 0;
      LODWORD(v67) = v6;
      int v68 = 0;
      sub_1CD613DEC(v60, (uint64_t *)&v71, &v67);
      int v11 = *(_DWORD *)(*(void *)(v61 + 32) + 4);
      uint64_t v10 = 45;
LABEL_5:
      int v12 = *(llvm::ConstantInt ******)a1;
      unint64_t v71 = v5;
      unsigned int v72 = 0;
      LODWORD(v67) = v11;
      int v68 = 0;
      LODWORD(v69) = v7;
      int v70 = 0;
      uint64_t v13 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v12)[4])(v12, 197, &v71, 1, &v67, 2, 0);
      uint64_t v14 = *(llvm::ConstantInt ******)a1;
      LODWORD(v71) = v66;
      unsigned int v72 = 1;
      LODWORD(v67) = v6;
      int v68 = 0;
      *(void *)&long long v69 = v13;
      *((void *)&v69 + 1) = v15;
      int v70 = 1;
      ((void (*)(llvm::ConstantInt *****, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v14)[4])(v14, v10, &v71, 1, &v67, 2, 0);
LABEL_26:
      llvm::MachineInstr::eraseFromParent(v2);
      return;
  }
}

void sub_1CD6215F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_DWORD **)(a2 + 32);
  int v5 = v4[1];
  if ((v5 & 0x80000000) == 0 || (uint64_t v6 = a1[2], (v5 & 0x7FFFFFFFu) >= *(_DWORD *)(v6 + 432)))
  {
    uint64_t v8 = 0;
    unint64_t v7 = 0;
LABEL_8:
    unint64_t v10 = 9;
    goto LABEL_9;
  }
  unint64_t v7 = *(void *)(*(void *)(v6 + 424) + 8 * (v5 & 0x7FFFFFFF));
  uint64_t v8 = v7 & 4;
  if ((v7 & 0xFFFFFFFFFFFFFFF9) == 0 || v8 == 0) {
    goto LABEL_8;
  }
  uint64_t v26 = 0x800000000000000;
  if ((v7 & 2) == 0) {
    uint64_t v26 = 0x8000000000000;
  }
  unint64_t v10 = v7 & 0x7FFF8 | ((unint64_t)((v26 & v7) != 0) << 51) | 0x80004;
  uint64_t v8 = 1;
LABEL_9:
  int v11 = v4[9];
  int v12 = v4[17];
  int v13 = **(unsigned __int16 **)(a2 + 16);
  unint64_t v14 = -1;
  uint64_t v15 = 137;
  int v16 = 0;
  switch(v13)
  {
    case 150:
      int v16 = 1;
      uint64_t v15 = 141;
      break;
    case 151:
      unint64_t v14 = 0;
      int v16 = 0;
      uint64_t v15 = 139;
      break;
    case 152:
      unint64_t v14 = 0;
      int v16 = 1;
      uint64_t v15 = 143;
      break;
    default:
      break;
  }
  uint64_t v17 = *a1;
  *(void *)&long long v50 = v7;
  DWORD2(v50) = 0;
  unint64_t v51 = v10;
  int v52 = 0;
  LODWORD(v53) = v11;
  int v54 = 0;
  LODWORD(v55) = v12;
  int v57 = 0;
  (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v17 + 32))(v17, v15, &v50, 2, &v53, 2, 0);
  uint64_t v19 = *(void *)(v18 + 32);
  int v20 = *(_DWORD *)(v19 + 4);
  int v21 = *(_DWORD *)(v19 + 36);
  if (v16)
  {
    int v45 = v5;
    uint64_t v27 = (unsigned __int16)(v7 >> 3);
    uint64_t v28 = (unsigned __int16)(v7 >> 19);
    if ((v7 & 2) == 0) {
      uint64_t v28 = (v7 >> 19);
    }
    if (v8) {
      uint64_t v27 = v28;
    }
    uint64_t v29 = *a1;
    if (v7) {
      uint64_t v30 = (v7 >> 3);
    }
    else {
      uint64_t v30 = v27;
    }
    *(void *)&long long v53 = v7;
    DWORD2(v53) = 0;
    uint64_t v31 = sub_1CC7362A8(v29, (unint64_t *)&v53, v30 - 1);
    uint64_t v32 = *a1;
    *(void *)&long long v50 = v7;
    DWORD2(v50) = 0;
    int v44 = v20;
    LODWORD(v53) = v20;
    int v54 = 0;
    uint64_t v55 = v31;
    uint64_t v56 = v33;
    int v57 = 1;
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v32 + 32))(v32, 129, &v50, 1, &v53, 2, 0);
    unint64_t v35 = v7;
    uint64_t v37 = v36;
    uint64_t v38 = (llvm::ConstantInt *****)*a1;
    unint64_t v39 = v35;
    *(void *)&long long v53 = v35;
    DWORD2(v53) = 0;
    sub_1CBA62420(v30, (llvm::APInt *)&v50);
    uint64_t v40 = sub_1CC737454(v38, (uint64_t)&v53, (llvm::LLVMContext *)&v50);
    uint64_t v42 = v41;
    if (DWORD2(v50) >= 0x41 && (void)v50) {
      MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
    }
    uint64_t v43 = *a1;
    *(void *)&long long v50 = v39;
    DWORD2(v50) = 0;
    *(void *)&long long v53 = v34;
    *((void *)&v53 + 1) = v37;
    int v54 = 1;
    uint64_t v55 = v40;
    uint64_t v56 = v42;
    int v57 = 1;
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v43 + 32))(v43, 45, &v50, 1, &v53, 2, 0);
    int v5 = v45;
    int v20 = v44;
  }
  else
  {
    uint64_t v22 = *a1;
    *(void *)&long long v53 = v7;
    DWORD2(v53) = 0;
    uint64_t v23 = sub_1CC7362A8(v22, (unint64_t *)&v53, v14);
  }
  uint64_t v25 = *a1;
  LODWORD(v48) = v5;
  int v49 = 1;
  LODWORD(v53) = v21;
  int v54 = 0;
  *(void *)&long long v50 = v23;
  *((void *)&v50 + 1) = v24;
  LODWORD(v51) = 1;
  LODWORD(v46) = v20;
  int v47 = 0;
  sub_1CC739494(v25, &v48, &v53, &v50, &v46, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

void sub_1CD62199C(llvm::ConstantInt ******a1, uint64_t a2)
{
  uint64_t v2 = (llvm::MachineInstr *)a2;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v4 = **(unsigned __int16 **)(a2 + 16);
  int v5 = *(_DWORD **)(a2 + 32);
  int v6 = v5[1];
  int v7 = v5[9];
  int v8 = v5[17];
  int v51 = v6;
  if ((v6 & 0x80000000) == 0 || (uint64_t v41 = a1[2], v42 = v6 & 0x7FFFFFFF, v42 >= *((_DWORD *)v41 + 108)))
  {
    unint64_t v9 = 0;
    uint64_t v50 = 9;
    goto LABEL_3;
  }
  unint64_t v9 = (unint64_t)v41[53][v42];
  uint64_t v43 = 0x800000000000000;
  if ((v9 & 2) == 0) {
    uint64_t v43 = 0x8000000000000;
  }
  if ((v9 & 0xFFFFFFFFFFFFFFF9) == 0 || ((unint64_t)v41[53][v42] & 4) == 0) {
    unint64_t v45 = 9;
  }
  else {
    unint64_t v45 = v9 & 0x7FFF8 | ((unint64_t)((v43 & v9) != 0) << 51) | 0x80004;
  }
  uint64_t v50 = v45;
  if (v9)
  {
    uint64_t v10 = (v9 >> 3);
    goto LABEL_4;
  }
  if ((v9 & 4) == 0)
  {
LABEL_3:
    uint64_t v10 = (unsigned __int16)(v9 >> 3);
    goto LABEL_4;
  }
  if ((v9 & 2) != 0) {
    uint64_t v10 = (unsigned __int16)(v9 >> 19);
  }
  else {
    uint64_t v10 = (v9 >> 19);
  }
LABEL_4:
  int v11 = *a1;
  *(void *)&long long v56 = v9;
  DWORD2(v56) = 0;
  LODWORD(v58) = v7;
  int v59 = 0;
  int v60 = v8;
  int v61 = 0;
  uint64_t v13 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v11)[4])(v11, 127, &v56, 1, &v58, 2, 0);
  uint64_t v14 = v12;
  uint64_t v15 = *a1;
  if (v4 == 154)
  {
    uint64_t v48 = v2;
    *(void *)&long long v56 = v9;
    DWORD2(v56) = 0;
    *(void *)&long long v58 = v13;
    *((void *)&v58 + 1) = v12;
    int v59 = 1;
    int v60 = v8;
    int v61 = 0;
    uint64_t v16 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v15)[4])(v15, 129, &v56, 1, &v58, 2, 0);
    uint64_t v49 = v17;
    uint64_t v18 = *a1;
    *(void *)&long long v58 = v9;
    DWORD2(v58) = 0;
    sub_1CBA62420(v10, (llvm::APInt *)&v56);
    uint64_t v19 = sub_1CC737454(v18, (uint64_t)&v58, (llvm::LLVMContext *)&v56);
    uint64_t v46 = v20;
    uint64_t v47 = v19;
    if (DWORD2(v56) >= 0x41 && (void)v56) {
      MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
    }
    int v21 = *a1;
    *(void *)&long long v58 = v9;
    DWORD2(v58) = 0;
    sub_1CBFD9168(v10, (llvm::APInt *)&v56);
    uint64_t v22 = sub_1CC737454(v21, (uint64_t)&v58, (llvm::LLVMContext *)&v56);
    uint64_t v24 = v23;
    if (DWORD2(v56) >= 0x41 && (void)v56) {
      MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
    }
    uint64_t v25 = (uint64_t)*a1;
    uint64_t v26 = v50;
    *(void *)&long long v52 = v50;
    DWORD2(v52) = 0;
    LODWORD(v58) = v7;
    int v59 = 0;
    unint64_t v54 = v9;
    int v55 = 0;
    *(void *)&long long v56 = sub_1CC7362A8(v25, &v54, 0);
    *((void *)&v56 + 1) = v27;
    int v57 = 1;
    uint64_t v28 = sub_1CC73933C(v25, 40, (uint64_t)&v52, &v58, &v56);
    uint64_t v29 = (uint64_t)*a1;
    unint64_t v54 = v9;
    int v55 = 0;
    *(void *)&long long v58 = v28;
    *((void *)&v58 + 1) = v30;
    int v59 = 1;
    *(void *)&long long v56 = v47;
    *((void *)&v56 + 1) = v46;
    int v57 = 1;
    *(void *)&long long v52 = v22;
    *((void *)&v52 + 1) = v24;
    int v53 = 1;
    uint64_t v31 = sub_1CC739494(v29, (uint64_t *)&v54, &v58, &v56, &v52, 0);
    uint64_t v33 = v32;
    uint64_t v2 = v48;
  }
  else
  {
    *(void *)&long long v56 = v9;
    DWORD2(v56) = 0;
    *(void *)&long long v58 = v13;
    *((void *)&v58 + 1) = v12;
    int v59 = 1;
    int v60 = v8;
    int v61 = 0;
    uint64_t v16 = ((uint64_t (*)(llvm::ConstantInt *****, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*v15)[4])(v15, 128, &v56, 1, &v58, 2, 0);
    uint64_t v49 = v34;
    unint64_t v35 = *a1;
    *(void *)&long long v58 = v9;
    DWORD2(v58) = 0;
    sub_1CB8F1EEC((uint64_t)&v56, v10, -1);
    uint64_t v31 = sub_1CC737454(v35, (uint64_t)&v58, (llvm::LLVMContext *)&v56);
    uint64_t v33 = v36;
    if (DWORD2(v56) >= 0x41 && (void)v56) {
      MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
    }
    uint64_t v26 = v50;
  }
  uint64_t v37 = (uint64_t)*a1;
  *(void *)&long long v52 = v26;
  DWORD2(v52) = 0;
  LODWORD(v58) = v7;
  int v59 = 0;
  *(void *)&long long v56 = v16;
  *((void *)&v56 + 1) = v49;
  int v57 = 1;
  uint64_t v38 = sub_1CC73933C(v37, 33, (uint64_t)&v52, &v58, &v56);
  uint64_t v39 = (uint64_t)*a1;
  LODWORD(v54) = v51;
  int v55 = 1;
  *(void *)&long long v58 = v38;
  *((void *)&v58 + 1) = v40;
  int v59 = 1;
  *(void *)&long long v56 = v31;
  *((void *)&v56 + 1) = v33;
  int v57 = 1;
  *(void *)&long long v52 = v13;
  *((void *)&v52 + 1) = v14;
  int v53 = 1;
  sub_1CC739494(v39, (uint64_t *)&v54, &v58, &v56, &v52, 0);
  llvm::MachineInstr::eraseFromParent(v2);
}

void sub_1CD621E40(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 4);
  int v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 0x80000000) == 0 || (uint64_t v20 = a1[2], v21 = v5 & 0x7FFFFFFF, v21 >= *(_DWORD *)(v20 + 432)))
  {
    unint64_t v6 = 0;
    int v7 = *(_DWORD *)(v4 + 36);
    uint64_t v8 = *a1;
    unint64_t v22 = 0;
    LODWORD(v23) = 0;
LABEL_3:
    int v9 = (unsigned __int16)(v6 >> 3);
    goto LABEL_4;
  }
  unint64_t v6 = *(void *)(*(void *)(v20 + 424) + 8 * v21);
  int v7 = *(_DWORD *)(v4 + 36);
  uint64_t v8 = *a1;
  unint64_t v22 = v6;
  LODWORD(v23) = 0;
  if (v6)
  {
    int v9 = v6 >> 3;
    goto LABEL_4;
  }
  if ((v6 & 4) == 0) {
    goto LABEL_3;
  }
  if ((v6 & 2) != 0) {
    int v9 = (unsigned __int16)(v6 >> 19);
  }
  else {
    int v9 = v6 >> 19;
  }
LABEL_4:
  uint64_t v10 = sub_1CC7362A8(v8, &v22, (v9 - 1));
  uint64_t v11 = *a1;
  unint64_t v28 = v6;
  int v29 = 0;
  LODWORD(v22) = v7;
  int v24 = 0;
  uint64_t v25 = v10;
  uint64_t v26 = v12;
  int v27 = 1;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v11 + 32))(v11, 129, &v28, 1, &v22, 2, 0);
  uint64_t v15 = v14;
  uint64_t v16 = *a1;
  unint64_t v28 = v6;
  int v29 = 0;
  LODWORD(v22) = v7;
  int v24 = 0;
  uint64_t v25 = v13;
  uint64_t v26 = v14;
  int v27 = 1;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v16 + 32))(v16, 45, &v28, 1, &v22, 2, 0);
  uint64_t v18 = *a1;
  LODWORD(v28) = *(_DWORD *)(*((void *)a2 + 4) + 4);
  int v29 = 1;
  unint64_t v22 = v17;
  uint64_t v23 = v19;
  int v24 = 1;
  uint64_t v25 = v13;
  uint64_t v26 = v15;
  int v27 = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v18 + 32))(v18, 67, &v28, 1, &v22, 2, 0);
  llvm::MachineInstr::eraseFromParent(a2);
}

uint64_t sub_1CD62205C(uint64_t **a1, llvm::MachineInstr *a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (_DWORD *)*((void *)a2 + 4);
  int v5 = v4[1];
  int v6 = v4[9];
  int v7 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *((_DWORD *)v7 + 108)) {
    unint64_t v8 = *(void *)(v7[53] + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v8 = 0;
  }
  int v9 = v4[17];
  int v10 = v4[25];
  unint64_t v56 = v8;
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *((_DWORD *)v7 + 108)) {
    uint64_t v11 = *(void *)(v7[53] + 8 * (v6 & 0x7FFFFFFF));
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v55 = v11;
  uint64_t result = 2;
  if ((v8 & 0xFFFFFFFFFFFFFFF9) != 0 && (v8 & 4) != 0)
  {
    uint64_t v13 = sub_1CBA15978(&v56);
    BOOL v14 = (v13 & 0xFFFFFFFFFFFFFFF9) != 0 && (v13 & 6) == 2;
    int v15 = v14;
    if (v14)
    {
      uint64_t v46 = (unsigned __int16)(v56 >> 3);
      uint64_t v47 = (unsigned __int16)(v56 >> 19);
      if ((v56 & 2) == 0) {
        uint64_t v47 = (v56 >> 19);
      }
      if ((v56 & 4) != 0) {
        uint64_t v46 = v47;
      }
      if (v56) {
        uint64_t v48 = (v56 >> 3);
      }
      else {
        uint64_t v48 = v46;
      }
      unint64_t v49 = sub_1CD6133A0(&v56, (8 * v48) | 1);
      uint64_t v50 = *a1;
      unint64_t v62 = v49;
      int v63 = 0;
      LODWORD(v57) = v9;
      int v58 = 0;
      (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v50 + 32))(v50, 80, &v62, 1, &v57, 1, 0);
      int v9 = *(_DWORD *)(*(void *)(v51 + 32) + 4);
      long long v52 = *a1;
      unint64_t v62 = v49;
      int v63 = 0;
      LODWORD(v57) = v10;
      int v58 = 0;
      (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v52 + 32))(v52, 80, &v62, 1, &v57, 1, 0);
      int v10 = *(_DWORD *)(*(void *)(v53 + 32) + 4);
      unint64_t v56 = v49;
    }
    if (v11)
    {
      unint64_t v16 = sub_1CB8F1DC4((unint64_t *)&v55);
      if (v17 == 1)
      {
        unint64_t v54 = v16;
        unint64_t v16 = v54;
      }
      if (v56)
      {
        unint64_t v18 = (v56 >> 3);
      }
      else if ((v56 & 4) != 0)
      {
        if ((v56 & 2) != 0) {
          unint64_t v18 = (unsigned __int16)(v56 >> 19);
        }
        else {
          unint64_t v18 = (v56 >> 19);
        }
      }
      else
      {
        unint64_t v18 = (unsigned __int16)(v56 >> 3);
      }
      if (v16 <= v18 && v55 != 9)
      {
        uint64_t v19 = *a1;
        unint64_t v62 = v55;
        int v63 = 0;
        LODWORD(v57) = v6;
        int v58 = 0;
        uint64_t v59 = 1;
        int v61 = 3;
        (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v19 + 32))(v19, 125, &v62, 1, &v57, 2, 0);
        int v6 = *(_DWORD *)(*(void *)(v20 + 32) + 4);
      }
      uint64_t v21 = *a1;
      unint64_t v62 = sub_1CBA15978(&v56);
      int v63 = 0;
      LODWORD(v57) = v6;
      int v58 = 0;
      sub_1CD62DA74(v21, &v62, (int *)&v57);
      int v23 = *(_DWORD *)(*(void *)(v22 + 32) + 4);
      int v24 = *a1;
      unint64_t v62 = v56;
      int v63 = 0;
      LODWORD(v57) = v23;
      int v58 = 0;
      sub_1CD62DC70(v24, &v62, &v57);
      int v6 = *(_DWORD *)(*(void *)(v25 + 32) + 4);
      uint64_t v55 = v56;
    }
    uint64_t v26 = sub_1CB8F1DC4((unint64_t *)&v55);
    int v28 = v27;
    uint64_t v30 = sub_1CB8F1DC4(&v56);
    uint64_t result = 2;
    if (v26 == v30 && v28 == v29)
    {
      uint64_t v31 = *a1;
      unint64_t v62 = v55;
      int v63 = 0;
      LODWORD(v57) = v6;
      int v58 = 0;
      uint64_t v32 = sub_1CD613DEC(v31, (uint64_t *)&v62, &v57);
      uint64_t v34 = v33;
      unint64_t v35 = *a1;
      unint64_t v62 = v55;
      int v63 = 0;
      LODWORD(v57) = v9;
      int v58 = 0;
      LODWORD(v59) = v6;
      int v61 = 0;
      uint64_t v36 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v35 + 32))(v35, 65, &v62, 1, &v57, 2, 0);
      uint64_t v38 = v37;
      uint64_t v39 = *a1;
      unint64_t v62 = v55;
      int v63 = 0;
      LODWORD(v57) = v10;
      int v58 = 0;
      uint64_t v59 = v32;
      uint64_t v60 = v34;
      int v61 = 1;
      uint64_t v41 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v39 + 32))(v39, 65, &v62, 1, &v57, 2, 0);
      uint64_t v42 = *a1;
      if (v15)
      {
        unint64_t v62 = v56;
        int v63 = 0;
        *(void *)&long long v57 = v36;
        *((void *)&v57 + 1) = v38;
        int v58 = 1;
        uint64_t v59 = v41;
        uint64_t v60 = v40;
        int v61 = 1;
        uint64_t v43 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v42 + 32))(v42, 66, &v62, 1, &v57, 2, 0);
        int v44 = *a1;
        LODWORD(v62) = v5;
        int v63 = 1;
        *(void *)&long long v57 = v43;
        *((void *)&v57 + 1) = v45;
        int v58 = 1;
        (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v44 + 32))(v44, 81, &v62, 1, &v57, 1, 0);
      }
      else
      {
        LODWORD(v62) = v5;
        int v63 = 1;
        *(void *)&long long v57 = v36;
        *((void *)&v57 + 1) = v38;
        int v58 = 1;
        uint64_t v59 = v41;
        uint64_t v60 = v40;
        int v61 = 1;
        (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*v42 + 32))(v42, 66, &v62, 1, &v57, 2, 0);
      }
      llvm::MachineInstr::eraseFromParent(a2);
      return 1;
    }
  }
  return result;
}

void sub_1CD6225E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  BOOL v5 = **(unsigned __int16 **)(a2 + 16) == 63;
  if (**(_WORD **)(a2 + 16) == 63) {
    uint64_t v6 = 59;
  }
  else {
    uint64_t v6 = 60;
  }
  int v7 = *(_DWORD **)(a2 + 32);
  int v15 = v7[1];
  int v16 = 1;
  v11[0] = v7[17];
  int v12 = 0;
  int v13 = v7[25];
  int v14 = 0;
  if (v5) {
    uint64_t v8 = 61;
  }
  else {
    uint64_t v8 = 62;
  }
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v4 + 32))(v4, v6, &v15, 1, v11, 2, 0);
  uint64_t v9 = *a1;
  int v10 = *(_DWORD **)(a2 + 32);
  int v15 = v10[9];
  int v16 = 1;
  v11[0] = v10[17];
  int v12 = 0;
  int v13 = v10[25];
  int v14 = 0;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v9 + 32))(v9, v8, &v15, 1, v11, 2, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

void sub_1CD622734(uint64_t *a1, uint64_t a2)
{
  void v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = *(_DWORD *)(v4 + 4);
  uint64_t v6 = a1[2];
  if (v5 < 0 && (uint64_t v7 = v5 & 0x7FFFFFFF, v7 < *(_DWORD *)(v6 + 432))) {
    uint64_t v8 = *(void *)(*(void *)(v6 + 424) + 8 * v7);
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = *(_DWORD *)(v4 + 100);
  if (v9 < 0 && (uint64_t v10 = v9 & 0x7FFFFFFF, v10 < *(_DWORD *)(v6 + 432))) {
    uint64_t v11 = *(void *)(*(void *)(v6 + 424) + 8 * v10);
  }
  else {
    uint64_t v11 = 0;
  }
  if (**(_WORD **)(a2 + 16) == 130) {
    int v12 = 131;
  }
  else {
    int v12 = 130;
  }
  uint64_t v13 = a1[3];
  v19[0] = v8;
  v19[1] = v11;
  int v14 = v12;
  int v15 = v19;
  uint64_t v16 = 2;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (sub_1CC72D410(v13, (uint64_t)&v14) == 6 || sub_1CD62588C(a1, a2) == 2) {
    sub_1CD625CB8(a1, a2);
  }
}

void sub_1CD62284C(uint64_t *a1, uint64_t a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_DWORD **)(a2 + 32);
  int v5 = v4[1];
  int v6 = v4[9];
  int v7 = v4[17];
  uint64_t v8 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
    unint64_t v9 = *(void *)(*(void *)(v8 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v9 = 0;
  }
  if (v6 < 0 && (v6 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
    uint64_t v10 = *(void **)(*(void *)(v8 + 424) + 8 * (v6 & 0x7FFFFFFF));
  }
  else {
    uint64_t v10 = 0;
  }
  if (v7 < 0 && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
    unint64_t v11 = *(void *)(*(void *)(v8 + 424) + 8 * (v7 & 0x7FFFFFFF));
  }
  else {
    unint64_t v11 = 0;
  }
  int v80 = v6;
  if (v9)
  {
    unint64_t v12 = (v9 >> 3);
  }
  else if ((v9 & 4) != 0)
  {
    if ((v9 & 2) != 0) {
      unint64_t v12 = (unsigned __int16)(v9 >> 19);
    }
    else {
      unint64_t v12 = (v9 >> 19);
    }
  }
  else
  {
    unint64_t v12 = (unsigned __int16)(v9 >> 3);
  }
  int v13 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v14 = *a1;
  *(void *)(v14 + 40) = *(void *)(a2 + 24);
  *(void *)(v14 + 48) = a2;
  sub_1CB896804((unsigned __int8 **)(v14 + 32), (unsigned __int8 **)(a2 + 56));
  uint64_t v15 = a1[3];
  if (v13 == 133) {
    int v16 = 132;
  }
  else {
    int v16 = 133;
  }
  unint64_t v82 = v9;
  uint64_t v83 = v10;
  LODWORD(v88) = v16;
  *((void *)&v88 + 1) = &v82;
  uint64_t v89 = 2;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  if ((sub_1CC72D410(v15, (uint64_t)&v88) & 0xF7) == 0 && v12 && (v12 & (v12 - 1)) == 0)
  {
    sub_1CD626454(a1, a2);
    return;
  }
  uint64_t v17 = a1[3];
  if (v13 == 133) {
    int v18 = 130;
  }
  else {
    int v18 = 131;
  }
  if (v13 == 133) {
    int v19 = 131;
  }
  else {
    int v19 = 130;
  }
  v87[0] = v9;
  v87[1] = v11;
  LODWORD(v88) = v18;
  *((void *)&v88 + 1) = v87;
  uint64_t v89 = 2;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  if ((sub_1CC72D410(v17, (uint64_t)&v88) & 0xF7) != 0)
  {
    uint64_t v20 = a1[3];
    v81[0] = v9;
    v81[1] = v11;
    LODWORD(v82) = v19;
    uint64_t v83 = v81;
    uint64_t v84 = 2;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    char v21 = sub_1CC72D410(v20, (uint64_t)&v82);
    v22.i32[0] = v12;
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22);
    v23.i16[0] = vaddlv_u8(v23);
    __int32 v24 = v23.i32[0];
    uint64_t v25 = (void *)*a1;
    if ((v21 & 0xF7) != 0 || v23.i32[0] != 1)
    {
      int v78 = v5;
      uint64_t v79 = (llvm::MachineInstr *)a2;
      *(void *)&long long v88 = v11;
      DWORD2(v88) = 0;
      uint64_t v26 = sub_1CC7362A8((uint64_t)v25, (unint64_t *)&v88, 0);
      uint64_t v28 = v27;
      uint64_t v29 = *a1;
      if (v13 == 133) {
        int v30 = 127;
      }
      else {
        int v30 = 128;
      }
      if (v13 == 133) {
        int v31 = 128;
      }
      else {
        int v31 = 127;
      }
      unsigned int v76 = v30;
      unsigned int v77 = v31;
      *(void *)&long long v88 = v11;
      DWORD2(v88) = 0;
      uint64_t v32 = sub_1CC7362A8(v29, (unint64_t *)&v88, (v12 - 1));
      uint64_t v34 = v33;
      uint64_t v35 = *a1;
      if (v24 == 1)
      {
        unint64_t v82 = v11;
        LODWORD(v83) = 0;
        *(void *)&long long v88 = v26;
        *((void *)&v88 + 1) = v28;
        LODWORD(v89) = 1;
        LODWORD(v90) = v7;
        int v92 = 0;
        uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v35 + 32))(v35, 46, &v82, 1, &v88, 2, 0);
        uint64_t v38 = v37;
        uint64_t v39 = *a1;
        unint64_t v82 = v11;
        LODWORD(v83) = 0;
        LODWORD(v88) = v7;
        LODWORD(v89) = 0;
        uint64_t v90 = v32;
        uint64_t v91 = v34;
        int v92 = 1;
        uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v39 + 32))(v39, 65, &v82, 1, &v88, 2, 0);
        uint64_t v41 = *a1;
        unint64_t v82 = v9;
        LODWORD(v83) = 0;
        LODWORD(v88) = v80;
        LODWORD(v89) = 0;
        uint64_t v90 = v40;
        uint64_t v91 = v42;
        int v92 = 1;
        (*(void (**)(uint64_t, void, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v41 + 32))(v41, v76, &v82, 1, &v88, 2, 0);
        int v44 = *(_DWORD *)(*(void *)(v43 + 32) + 4);
        uint64_t v45 = *a1;
        unint64_t v82 = v11;
        LODWORD(v83) = 0;
        *(void *)&long long v88 = v36;
        *((void *)&v88 + 1) = v38;
        LODWORD(v89) = 1;
        uint64_t v90 = v32;
        uint64_t v91 = v34;
        int v92 = 1;
        uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v45 + 32))(v45, 65, &v82, 1, &v88, 2, 0);
        uint64_t v47 = *a1;
        unint64_t v82 = v9;
        LODWORD(v83) = 0;
        LODWORD(v88) = v80;
        LODWORD(v89) = 0;
        uint64_t v90 = v46;
        uint64_t v91 = v48;
      }
      else
      {
        *(void *)&long long v88 = v11;
        DWORD2(v88) = 0;
        uint64_t v52 = sub_1CC7362A8(v35, (unint64_t *)&v88, v12);
        uint64_t v53 = *a1;
        unint64_t v82 = v11;
        LODWORD(v83) = 0;
        LODWORD(v88) = v7;
        LODWORD(v89) = 0;
        uint64_t v90 = v52;
        uint64_t v91 = v54;
        int v92 = 1;
        uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v53 + 32))(v53, 62, &v82, 1, &v88, 2, 0);
        uint64_t v57 = v56;
        uint64_t v58 = *a1;
        unint64_t v82 = v9;
        LODWORD(v83) = 0;
        LODWORD(v88) = v80;
        LODWORD(v89) = 0;
        uint64_t v90 = v55;
        uint64_t v91 = v56;
        int v92 = 1;
        (*(void (**)(uint64_t, void, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v58 + 32))(v58, v76, &v82, 1, &v88, 2, 0);
        int v60 = *(_DWORD *)(*(void *)(v59 + 32) + 4);
        uint64_t v61 = *a1;
        unint64_t v82 = v11;
        LODWORD(v83) = 0;
        *(void *)&long long v88 = v32;
        *((void *)&v88 + 1) = v34;
        LODWORD(v89) = 1;
        uint64_t v90 = v55;
        uint64_t v91 = v57;
        int v92 = 1;
        uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v61 + 32))(v61, 46, &v82, 1, &v88, 2, 0);
        uint64_t v64 = v63;
        uint64_t v65 = *a1;
        *(void *)&long long v88 = v11;
        DWORD2(v88) = 0;
        uint64_t v66 = sub_1CC7362A8(v65, (unint64_t *)&v88, 1uLL);
        uint64_t v67 = *a1;
        unint64_t v82 = v9;
        LODWORD(v83) = 0;
        LODWORD(v88) = v80;
        int v44 = v60;
        LODWORD(v89) = 0;
        uint64_t v90 = v66;
        uint64_t v91 = v68;
        int v92 = 1;
        uint64_t v69 = (*(uint64_t (**)(uint64_t, void, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v67 + 32))(v67, v77, &v82, 1, &v88, 2, 0);
        uint64_t v47 = *a1;
        unint64_t v82 = v9;
        LODWORD(v83) = 0;
        *(void *)&long long v88 = v69;
        *((void *)&v88 + 1) = v70;
        LODWORD(v89) = 1;
        uint64_t v90 = v62;
        uint64_t v91 = v64;
      }
      int v92 = 1;
      (*(void (**)(uint64_t, void, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v47 + 32))(v47, v77, &v82, 1, &v88, 2, 0);
      int v72 = *(_DWORD *)(*(void *)(v71 + 32) + 4);
      uint64_t v73 = *a1;
      LODWORD(v82) = v78;
      LODWORD(v83) = 1;
      LODWORD(v88) = v44;
      LODWORD(v89) = 0;
      LODWORD(v90) = v72;
      int v92 = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v73 + 32))(v73, 66, &v82, 1, &v88, 2, 0);
      uint64_t v51 = v79;
      goto LABEL_45;
    }
    unint64_t v82 = v9;
    LODWORD(v83) = 0;
    LODWORD(v88) = v7;
    LODWORD(v89) = 0;
    int v74 = *(_DWORD *)(*(void *)(sub_1CD6265EC(v25, &v82, &v88) + 32) + 4);
    uint64_t v75 = *a1;
    LODWORD(v82) = v5;
    LODWORD(v83) = 1;
    LODWORD(v88) = v80;
    LODWORD(v89) = 0;
    LODWORD(v90) = v80;
    int v92 = 0;
    int v93 = v74;
    int v94 = 0;
    uint64_t v50 = *(void (**)(void))(*(void *)v75 + 32);
  }
  else
  {
    uint64_t v49 = *a1;
    LODWORD(v82) = v5;
    LODWORD(v83) = 1;
    LODWORD(v88) = v80;
    LODWORD(v89) = 0;
    LODWORD(v90) = v80;
    int v92 = 0;
    int v93 = v7;
    int v94 = 0;
    uint64_t v50 = *(void (**)(void))(*(void *)v49 + 32);
  }
  v50();
  uint64_t v51 = (llvm::MachineInstr *)a2;
LABEL_45:
  llvm::MachineInstr::eraseFromParent(v51);
}

uint64_t sub_1CD623014(uint64_t a1, unint64_t *a2)
{
  int v5 = a2 + 6;
  unint64_t v4 = a2[6];
  int v6 = (_DWORD *)a2[4];
  unsigned int v7 = v6[1];
  int v8 = v6[9];
  unsigned int v9 = v6[17];
  if ((v4 & 7) != 0)
  {
    unint64_t v10 = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v10 = v4 & 0xFFFFFFFFFFFFFFF8;
    *int v5 = v10;
  }
  __int16 v11 = *(_WORD *)(v10 + 32);
  sub_1CC73C44C(v9, *(void *)(a1 + 16), 1, (uint64_t)&v18);
  if (v19 >= 0x41) {
    unint64_t v12 = v18;
  }
  else {
    unint64_t v12 = (unint64_t *)&v18;
  }
  unint64_t v13 = *v12;
  if (*v12)
  {
    unint64_t v16 = *v5;
    if ((*v5 & 7) != 0)
    {
      unint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
      *int v5 = v16;
      unint64_t v17 = v16;
    }
    if ((v16 & 3) != 0) {
      int v5 = (unint64_t *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else {
      *int v5 = v16 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = sub_1CD62871C(a1, a2, v7, v8, v13, -1, *(unsigned char *)(v17 + 34), *(unsigned char *)(v5[1] + 34), (v11 & 4) != 0);
  }
  else
  {
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    uint64_t v14 = 1;
  }
  if (v20 && v19 >= 0x41 && v18) {
    MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
  }
  return v14;
}

uint64_t sub_1CD623170(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
  if ((v2 & 0x80000000) == 0) {
    return 2;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = v2 & 0x7FFFFFFF;
  if (v6 >= *(_DWORD *)(v5 + 432)) {
    return 2;
  }
  unint64_t v13 = *(void *)(*(void *)(v5 + 424) + 8 * v6);
  unint64_t v14 = v13;
  if ((v13 & 1) == 0) {
    return 2;
  }
  unint64_t v9 = sub_1CB8F1DC4(&v13);
  if (v8 == 1) {
  unint64_t v10 = sub_1CB8F1DC4(&v14);
  }
  if (v11 == 1)
  {
    unint64_t v12 = v10;
    unint64_t v10 = v12;
  }
  if (v9 > v10) {
    return 2;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
  *(void *)(a2 + 16) = *(void *)(*(void *)(*(void *)a1 + 16) + 8) + 912;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
  return 1;
}

uint64_t sub_1CD6232A4(unint64_t a1)
{
  unint64_t v9 = a1;
  unint64_t v2 = sub_1CB8F1DC4(&v9) + 7;
  if (v1 == 1)
  {
    unint64_t v8 = v2;
    unint64_t v2 = v8;
  }
  if (v2 >= 8)
  {
    unint64_t v4 = ((v2 >> 3) - 1) | (((v2 >> 3) - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    unint64_t v6 = v5 | (v5 >> 8) | ((v5 | (v5 >> 8)) >> 16);
    unint64_t v3 = (v6 | HIDWORD(v6)) + 1;
  }
  else
  {
    unint64_t v3 = 0;
  }
  return 63 - __clz(v3);
}

llvm::MachineFunction *sub_1CD623330(uint64_t a1, const char *a2, int a3, unsigned __int8 a4, uint64_t a5)
{
  unsigned int v7 = *(uint64_t ****)(*(void *)a1 + 8);
  unint64_t v8 = (*v7)[5];
  unint64_t v9 = (unsigned __int8 *)v7[7];
  if (a3 == 1)
  {
    int v18 = (unsigned __int8 *)v7[7];
    unint64_t v16 = a2;
    unsigned __int8 v17 = a4;
    unint64_t v9 = v18;
    a4 = v17;
    a2 = v16;
  }
  unint64_t v10 = (llvm::DataLayout *)(v8 + 34);
  int StackObject = (llvm::MachineFunction *)llvm::MachineFrameInfo::CreateStackObject(v9, (uint64_t)a2, a4, 0, 0, 0);
  unsigned int v12 = *((_DWORD *)v8 + 69);
  uint64_t v13 = ((*(void *)&v12 & 0xFFFFFFLL) << 19) | (8
                                                * (unsigned __int16)*(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v10, v12)+ 4)) | 2;
  llvm::MachinePointerInfo::getFixedStack(v7, StackObject, 0, (uint64_t)v19);
  *(_OWORD *)a5 = *(_OWORD *)v19;
  *(void *)(a5 + 13) = *(void *)&v19[13];
  unint64_t v14 = *(void **)a1;
  *(void *)unsigned int v19 = v13;
  *(_DWORD *)&v19[8] = 0;
  return sub_1CC735850(v14, (uint64_t *)v19, (int)StackObject);
}

uint64_t sub_1CD623430(uint64_t *a1, int a2, unint64_t a3, unsigned int a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  unint64_t v41 = a3;
  uint64_t v40 = sub_1CBA15978(&v41);
  unint64_t v8 = sub_1CB8F1DC4((unint64_t *)&v40);
  if (v7 == 1) {
  uint64_t v9 = *a1;
  }
  unint64_t v10 = v41;
  sub_1CC73C9C0(a4, *(void *)(*a1 + 24));
  if (!(_BYTE)v11)
  {
    if ((a4 & 0x80000000) != 0
      && (uint64_t v24 = *(void *)(v9 + 24), (a4 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v24 + 432)))
    {
      uint64_t v25 = *(void *)(*(void *)(v24 + 424) + 8 * (a4 & 0x7FFFFFFF));
    }
    else
    {
      uint64_t v25 = 0;
    }
    unint64_t v46 = v25;
    uint64_t v27 = 0x800000000000000;
    if ((v10 & 2) == 0) {
      uint64_t v27 = 0x8000000000000;
    }
    if ((v27 & v10) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v11);
    }
    unsigned int v28 = (unsigned __int16)(v10 >> 3);
    v12.i32[0] = v28;
    uint8x8_t v29 = (uint8x8_t)vcnt_s8(v12);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.i32[0] == 1)
    {
      unsigned int v31 = sub_1CB8F1DC4(&v46);
      if (v30 == 1)
      {
        unsigned int v39 = v31;
        unsigned int v31 = v39;
      }
      sub_1CB8F1EEC((uint64_t)&v44, v31, 0);
      sub_1CBAB8F38(&v44, 0, 31 - __clz(v28));
      unint64_t v32 = v46;
      unint64_t v42 = v46;
      int v43 = 0;
      uint64_t v33 = sub_1CC737454((llvm::ConstantInt *****)v9, (uint64_t)&v42, (llvm::LLVMContext *)&v44);
      *(void *)&long long v47 = v32;
      DWORD2(v47) = 0;
      LODWORD(v49) = a4;
      int v50 = 0;
      uint64_t v51 = v33;
      uint64_t v52 = v34;
      int v53 = 1;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v9 + 32))(v9, 65, &v47, 1, &v49, 2, 0);
      a4 = *(_DWORD *)(*(void *)(v35 + 32) + 4);
      if (v45 >= 0x41 && v44) {
        MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
      }
    }
    else
    {
      uint64_t v44 = v25;
      unsigned int v45 = 0;
      uint64_t v36 = sub_1CC7362A8(v9, (unint64_t *)&v44, v28 - 1);
      *(void *)&long long v47 = v25;
      DWORD2(v47) = 0;
      LODWORD(v49) = a4;
      int v50 = 0;
      uint64_t v51 = v36;
      uint64_t v52 = v37;
      int v53 = 1;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v9 + 32))(v9, 197, &v47, 1, &v49, 2, 0);
      a4 = *(_DWORD *)(*(void *)(v38 + 32) + 4);
    }
  }
  if ((a4 & 0x80000000) != 0 && (uint64_t v26 = a1[2], (a4 & 0x7FFFFFFF) < *(_DWORD *)(v26 + 432))) {
    uint64_t v13 = *(void *)(*(void *)(v26 + 424) + 8 * (a4 & 0x7FFFFFFF));
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *a1;
  uint64_t v44 = v13;
  unsigned int v45 = 0;
  uint64_t v15 = sub_1CC7362A8(v14, (unint64_t *)&v44, (v8 >> 3));
  *(void *)&long long v47 = v13;
  DWORD2(v47) = 0;
  LODWORD(v49) = a4;
  int v50 = 0;
  uint64_t v51 = v15;
  uint64_t v52 = v16;
  int v53 = 1;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v14 + 32))(v14, 47, &v47, 1, &v49, 2, 0);
  uint64_t v19 = 0;
  if (a2 < 0)
  {
    uint64_t v23 = a1[2];
    if ((a2 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v23 + 432)) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = *(void *)(*(void *)(v23 + 424) + 8 * (a2 & 0x7FFFFFFF));
    }
  }
  uint64_t v20 = *a1;
  uint64_t v44 = v19;
  unsigned int v45 = 0;
  LODWORD(v49) = a2;
  int v50 = 0;
  *(void *)&long long v47 = v17;
  *((void *)&v47 + 1) = v18;
  int v48 = 1;
  sub_1CC735F44(v20, &v44, &v49, &v47);
  return *(unsigned int *)(*(void *)(v21 + 32) + 4);
}

void sub_1CD6237F0(uint64_t *a1, llvm::MachineInstr *this, unsigned int a3)
{
  v61[16] = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(*((void *)this + 4) + 4);
  if (v6 < 0 && (v7 = a1[2], uint64_t v8 = v6 & 0x7FFFFFFF, v8 < *(_DWORD *)(v7 + 432))) {
    uint64_t v9 = *(void *)(*(void *)(v7 + 424) + 8 * v8);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = 0x800000000000000;
  if ((v9 & 2) == 0) {
    uint64_t v10 = 0x8000000000000;
  }
  if ((v10 & v9) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)this);
  }
  int v11 = *((_DWORD *)this + 10);
  int NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs(this);
  uint64_t v13 = *(void *)(*((void *)this + 2) + 32);
  if (v13)
  {
    unsigned int v16 = 0;
    while (*(unsigned __int16 *)(v13 + 2 * v16++))
      ;
    unsigned int v14 = -1;
    do
      ++v14;
    while (*(_WORD *)(v13 + 2 * v14));
    int v15 = NumExplicitDefs + v16 - 1;
  }
  else
  {
    unsigned int v14 = 0;
    int v15 = NumExplicitDefs;
  }
  unsigned int v50 = v11 - v15;
  v60[0] = v61;
  v60[1] = (void *)0x800000000;
  uint64_t v57 = v59;
  uint64_t v58 = 0x800000000;
  int v18 = *(_DWORD *)(*((void *)this + 4) + 4);
  if (v18 < 0 && (uint64_t v19 = a1[2], v20 = v18 & 0x7FFFFFFF, v20 < *(_DWORD *)(v19 + 432))) {
    unint64_t v21 = *(void *)(*(void *)(v19 + 424) + 8 * v20);
  }
  else {
    unint64_t v21 = 0;
  }
  unsigned int v22 = v14 + NumExplicitDefs;
  sub_1CC72ACB4((uint64_t)v60, v21, a3);
  uint64_t v51 = &v53;
  uint64_t v52 = 0x800000000;
  v55[0] = (char *)&v56;
  v55[1] = (char *)0x300000000;
  sub_1CD629D00((uint64_t)v55, v50 >> 1, (uint64_t)&v51);
  if (v51 != &v53) {
    free(v51);
  }
  unsigned int v23 = (unsigned __int16)(v9 >> 3);
  if (v22 < *((_DWORD *)this + 10))
  {
    int v24 = 0;
    do
    {
      uint64_t v25 = *(llvm::MachineBasicBlock **)(*((void *)this + 4) + 32 * (v22 + 1) + 16);
      uint64_t v26 = *a1;
      unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v25);
      *(void *)(v26 + 40) = v25;
      *(void *)(v26 + 48) = FirstTerminator;
      sub_1CD618E18(a1, *(_DWORD *)(*((void *)this + 4) + 32 * v22 + 4), a3, (uint64_t)&v55[0][48 * v24]);
      v22 += 2;
      ++v24;
    }
    while (v22 < *((_DWORD *)this + 10));
  }
  unsigned int v28 = v23 / a3;
  int v49 = v23 % a3;
  uint64_t v29 = *a1;
  *(void *)(v29 + 40) = *((void *)this + 3);
  *(void *)(v29 + 48) = this;
  if (v23 % a3) {
    uint64_t v30 = v28 + 1;
  }
  else {
    uint64_t v30 = v28;
  }
  if (v30)
  {
    uint64_t v31 = 0;
    if (v50 >> 1 <= 1) {
      unsigned int v32 = 1;
    }
    else {
      unsigned int v32 = v50 >> 1;
    }
    uint64_t v33 = 48 * v32;
    while (1)
    {
      uint64_t v34 = (void *)*a1;
      uint64_t v35 = sub_1CC734F48((void *)*a1, 0x45u);
      uint64_t v37 = (llvm::MachineInstr *)v36;
      sub_1CC734FCC(v34, (uint64_t)v35, v36);
      uint64_t v38 = a1[2];
      unsigned int v39 = (int *)((char *)v60[0] + 16 * v31);
      int v40 = v39[2];
      if (!v40) {
        goto LABEL_47;
      }
      if (v40 != 2)
      {
        int v41 = *v39;
        if (v41 < 0)
        {
          uint64_t v47 = v41 & 0x7FFFFFFF;
          if (v47 < *(_DWORD *)(v38 + 432)) {
            break;
          }
        }
      }
      uint64_t v42 = 0;
LABEL_39:
      int GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v38, v42, "", 0);
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      LODWORD(v51) = 0x1000000;
      HIDWORD(v51) = GenericVirtualRegister;
      llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v51);
      if (v58 >= (unint64_t)HIDWORD(v58)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v57 + v58) = *(_DWORD *)(*((void *)v37 + 4) + 4);
      LODWORD(v58) = v58 + 1;
      if (v50 >= 2)
      {
        uint64_t v44 = 0;
        uint64_t v45 = 64;
        do
        {
          int v46 = *(_DWORD *)(*(void *)&v55[0][v44] + 4 * v31);
          uint64_t v52 = 0;
          LODWORD(v51) = 0;
          HIDWORD(v51) = v46;
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)&v51);
          llvm::MachineInstr::addOperand(v37, v35, (const llvm::MachineOperand *)(*((void *)this + 4) + v45));
          v45 += 64;
          v44 += 48;
        }
        while (v33 != v44);
      }
      if (++v31 == v30) {
        goto LABEL_29;
      }
    }
    unsigned int v39 = (int *)(*(void *)(v38 + 424) + 8 * v47);
LABEL_47:
    uint64_t v42 = *(void *)v39;
    goto LABEL_39;
  }
LABEL_29:
  if (v49)
  {
    sub_1CD6190B8(a1, *(_DWORD *)(*((void *)this + 4) + 4), (uint64_t)v57, v58);
  }
  else
  {
    uint64_t v48 = *a1;
    LODWORD(v51) = *(_DWORD *)(*((void *)this + 4) + 4);
    LODWORD(v52) = 1;
    sub_1CC73661C(v48, (uint64_t)&v51, (int *)v57, v58);
  }
  llvm::MachineInstr::eraseFromParent(this);
  sub_1CD48219C(v55);
  if (v57 != v59) {
    free(v57);
  }
  if (v60[0] != v61) {
    free(v60[0]);
  }
}

uint64_t sub_1CD623C64(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  unint64_t v40 = a4;
  uint64_t v5 = (*(_DWORD *)(a2 + 40) - 1);
  uint64_t v6 = *(void *)(a2 + 32);
  int v7 = *(_DWORD *)(v6 + 32 * v5 + 4);
  uint64_t v8 = *(void *)(a1 + 16);
  int v9 = *(_DWORD *)(v6 + 4);
  if (v9 < 0 && (uint64_t v17 = v9 & 0x7FFFFFFF, v17 < *(_DWORD *)(v8 + 432))) {
    unint64_t v10 = *(void *)(*(void *)(v8 + 424) + 8 * v17);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v39 = v10;
  if (v7 < 0 && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
    unint64_t v11 = *(void *)(*(void *)(v8 + 424) + 8 * (v7 & 0x7FFFFFFF));
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v38 = v11;
  uint64_t result = 2;
  if (a3 == 1 && v10 != a4)
  {
    unint64_t v14 = sub_1CB8F1DC4(&v38);
    if (v13 == 1) {
    unint64_t v16 = sub_1CB8F1DC4(&v40);
    }
    if (v15 == 1) {
    if (v14 % v16)
    }
      return 2;
    unint64_t v19 = sub_1CB8F1DC4(&v40);
    if (v18 == 1) {
    unint64_t v21 = sub_1CB8F1DC4(&v39);
    }
    if (v20 == 1) {
    if (v19 % v21)
    }
    {
      return 2;
    }
    else
    {
      unsigned int v22 = *(void **)a1;
      int v41 = v7;
      LODWORD(v44) = 0;
      sub_1CC7363F0(v22, v40, &v41);
      uint64_t v35 = v23;
      uint64_t v36 = (*(_DWORD *)(v23 + 40) - 1);
      if (*(_DWORD *)(v23 + 40) != 1)
      {
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = ((int)v5 / (int)v36);
        do
        {
          uint64_t v27 = *(void **)a1;
          unsigned int v28 = sub_1CC734F48(*(void **)a1, 0x4Au);
          uint64_t v30 = (llvm::MachineInstr *)v29;
          sub_1CC734FCC(v27, (uint64_t)v28, v29);
          unsigned int v31 = v24;
          uint64_t v32 = v26;
          if (v26)
          {
            do
            {
              int v33 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v31 + 4);
              uint64_t v43 = 0;
              uint64_t v44 = 0;
              uint64_t v45 = 0;
              int v41 = 0x1000000;
              int v42 = v33;
              llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v41);
              ++v31;
              --v32;
            }
            while (v32);
          }
          int v34 = *(_DWORD *)(*(void *)(v35 + 32) + 32 * v25 + 4);
          uint64_t v43 = 0;
          int v41 = 0;
          int v42 = v34;
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v41);
          ++v25;
          v24 += v26;
        }
        while (v25 != v36);
      }
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      return 1;
    }
  }
  return result;
}

uint64_t sub_1CD623EE8(uint64_t *a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v5 = a1;
  v90[4] = *MEMORY[0x1E4F143B8];
  unint64_t v84 = a4;
  uint64_t v6 = *(void *)(a2 + 32);
  int v7 = *(_DWORD *)(v6 + 4);
  uint64_t v8 = a1[2];
  if (v7 < 0 && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v8 + 432)) {
    unint64_t v9 = *(void *)(*(void *)(v8 + 424) + 8 * (v7 & 0x7FFFFFFF));
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v83 = v9;
  int v10 = *(_DWORD *)(v6 + 36);
  if (v10 < 0 && (uint64_t v31 = v10 & 0x7FFFFFFF, v31 < *(_DWORD *)(v8 + 432))) {
    unint64_t v11 = *(void *)(*(void *)(v8 + 424) + 8 * v31);
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v82 = v11;
  if (v11 == a4) {
    return 2;
  }
  if (a3 == 1)
  {
    unint64_t v14 = sub_1CB8F1DC4(&v83);
    if (v13 == 1) {
    unint64_t v16 = sub_1CB8F1DC4(&v84);
    }
    if (v15 == 1) {
    if (v14 % v16)
    }
      return 2;
    unsigned int v17 = v84;
    if ((v84 & 2) != 0) {
      uint64_t v18 = 0x800000000000000;
    }
    else {
      uint64_t v18 = 0x8000000000000;
    }
    if ((v18 & v84) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v15);
      unsigned int v17 = v84;
    }
    if ((v11 & 2) != 0) {
      uint64_t v19 = 0x800000000000000;
    }
    else {
      uint64_t v19 = 0x8000000000000;
    }
    if ((v19 & v11) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v15);
    }
    if ((unsigned __int16)(v17 >> 3) >= (unsigned __int16)(v11 >> 3)) {
      return 2;
    }
    long long v88 = v90;
    uint64_t v89 = 0x800000000;
    int v20 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
    if (v20 < 0 && (uint64_t v63 = v5[2], v64 = v20 & 0x7FFFFFFF, v64 < *(_DWORD *)(v63 + 432)))
    {
      unint64_t v22 = *(void *)(*(void *)(v63 + 424) + 8 * v64);
      uint64_t v85 = (void *)v22;
      int v21 = v7;
      if ((v22 & 0xFFFFFFFFFFFFFFF9) != 0 && (v22 & 4) != 0) {
        unint64_t v22 = sub_1CBA15978((unint64_t *)&v85);
      }
    }
    else
    {
      int v21 = v7;
      unint64_t v22 = 0;
    }
    if (*(_DWORD *)(a2 + 40) >= 2u)
    {
      unint64_t v23 = 1;
      do
      {
        unsigned int v24 = (void *)*v5;
        LODWORD(v85) = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v23 + 4);
        v87[0] = 0;
        sub_1CC7363F0(v24, v22, (int *)&v85);
        uint64_t v26 = v25;
        for (unint64_t i = 0; ; ++i)
        {
          int NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs(v26);
          uint64_t v29 = *(void *)(*((void *)v26 + 2) + 32);
          if (v29)
          {
            unsigned int v30 = -1;
            do
              ++v30;
            while (*(_WORD *)(v29 + 2 * v30));
          }
          else
          {
            unsigned int v30 = 0;
          }
          if (i >= v30 + NumExplicitDefs) {
            break;
          }
          if (v89 >= (unint64_t)HIDWORD(v89)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v88 + v89) = *(_DWORD *)(*((void *)v26 + 4) + 32 * i + 4);
          LODWORD(v89) = v89 + 1;
        }
        ++v23;
      }
      while (v23 < *(unsigned int *)(a2 + 40));
    }
    uint64_t v85 = v87;
    uint64_t v86 = 0x800000000;
    unint64_t v51 = v84;
    if ((v84 & 2) != 0) {
      uint64_t v52 = 0x800000000000000;
    }
    else {
      uint64_t v52 = 0x8000000000000;
    }
    if ((v52 & v84) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v15);
      unint64_t v51 = v84;
    }
    unsigned int v53 = v83;
    if ((v83 & 2) != 0) {
      uint64_t v54 = 0x800000000000000;
    }
    else {
      uint64_t v54 = 0x8000000000000;
    }
    if ((v54 & v83) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v15);
      unsigned int v53 = v83;
    }
    if ((unsigned __int16)(v51 >> 3) <= (unsigned __int16)(v53 >> 3))
    {
      uint64_t v56 = 0;
      uint64_t v57 = (unsigned __int16)(v51 >> 3);
      unsigned int v58 = (unsigned __int16)(v53 >> 3) / v57;
      if (v58 <= 1) {
        int v59 = 1;
      }
      else {
        int v59 = v58;
      }
      do
      {
        uint64_t v60 = *v5;
        unint64_t v80 = v84;
        int v81 = 0;
        sub_1CC73661C(v60, (uint64_t)&v80, (int *)((char *)v88 + v56), v57);
        if (v86 >= (unint64_t)HIDWORD(v86)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v85 + v86) = *(_DWORD *)(*(void *)(v61 + 32) + 4);
        unsigned int v55 = v86 + 1;
        LODWORD(v86) = v86 + 1;
        v56 += 4 * v57;
        --v59;
      }
      while (v59);
    }
    else
    {
      unsigned int v55 = v86;
    }
    uint64_t v62 = *v5;
    LODWORD(v80) = v21;
    int v81 = 1;
    sub_1CC73661C(v62, (uint64_t)&v80, (int *)v85, v55);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    if (v85 != v87) {
      free(v85);
    }
    unsigned int v50 = v88;
    if (v88 != v90) {
      goto LABEL_98;
    }
  }
  else
  {
    unint64_t v33 = sub_1CB8F1DC4(&v84);
    if (v32 == 1) {
    unint64_t v35 = sub_1CB8F1DC4(&v82);
    }
    if (v34 == 1) {
    if (v33 % v35)
    }
      return 2;
    unint64_t v37 = sub_1CB8F1DC4(&v83);
    if (v36 == 1) {
    unint64_t v39 = sub_1CB8F1DC4(&v84);
    }
    if (v38 == 1) {
    if (v37 % v39)
    }
      return 2;
    long long v88 = v90;
    uint64_t v89 = 0x800000000;
    unsigned int v40 = v83;
    if ((v83 & 2) != 0) {
      uint64_t v41 = 0x800000000000000;
    }
    else {
      uint64_t v41 = 0x8000000000000;
    }
    if ((v41 & v83) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v38);
      unsigned int v40 = v83;
    }
    unint64_t v42 = v84;
    if ((v84 & 2) != 0) {
      uint64_t v43 = 0x800000000000000;
    }
    else {
      uint64_t v43 = 0x8000000000000;
    }
    int v76 = v7;
    if ((v43 & v84) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v38);
      unint64_t v42 = v84;
    }
    unint64_t v44 = v82;
    LOWORD(v45) = 1;
    unint64_t v46 = v42;
    if ((v82 & 0xFFFFFFFFFFFFFFF9) != 0 && (v82 & 4) != 0)
    {
      uint64_t v47 = 0x800000000000000;
      if ((v82 & 2) == 0) {
        uint64_t v47 = 0x8000000000000;
      }
      if ((v47 & v82) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v38);
        unint64_t v44 = v82;
        unint64_t v46 = v84;
      }
      else
      {
        unint64_t v46 = v42;
      }
      unint64_t v45 = v44 >> 3;
    }
    uint64_t v48 = 0x800000000000000;
    if ((v46 & 2) == 0) {
      uint64_t v48 = 0x8000000000000;
    }
    if ((v48 & v46) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v38);
      LODWORD(v46) = v84;
    }
    if ((unsigned __int16)(v42 >> 3) <= (unsigned __int16)(v40 >> 3))
    {
      uint64_t v65 = 0;
      unsigned int v66 = (unsigned __int16)(v40 >> 3) / (unsigned __int16)(v42 >> 3);
      if (v66 <= 1) {
        uint64_t v67 = 1;
      }
      else {
        uint64_t v67 = v66;
      }
      LODWORD(v68) = (unsigned __int16)(v46 >> 3) / (unsigned __int16)v45;
      uint64_t v79 = v68;
      if (v68 <= 1) {
        uint64_t v68 = 1;
      }
      else {
        uint64_t v68 = v68;
      }
      unsigned int v77 = v5;
      uint64_t v78 = v68;
      unsigned int v69 = v46 >> 3;
      do
      {
        uint64_t v85 = v87;
        uint64_t v86 = 0x800000000;
        if ((unsigned __int16)v45 <= (unsigned __int16)v69)
        {
          unsigned int v70 = 0;
          uint64_t v72 = 0;
          uint64_t v73 = v78;
          do
          {
            if (v70 >= HIDWORD(v86)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v85 + v70) = *(_DWORD *)(*(void *)(a2 + 32) + 32 * (v65 * v79 + 1 + v72) + 4);
            unsigned int v70 = v86 + 1;
            LODWORD(v86) = v86 + 1;
            ++v72;
            --v73;
          }
          while (v73);
          uint64_t v71 = (int *)v85;
          uint64_t v5 = v77;
        }
        else
        {
          unsigned int v70 = 0;
          uint64_t v71 = v87;
        }
        uint64_t v74 = *v5;
        unint64_t v80 = v84;
        int v81 = 0;
        sub_1CC73661C(v74, (uint64_t)&v80, v71, v70);
        if (v89 >= (unint64_t)HIDWORD(v89)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v88 + v89) = *(_DWORD *)(*(void *)(v75 + 32) + 4);
        LODWORD(v89) = v89 + 1;
        if (v85 != v87) {
          free(v85);
        }
        ++v65;
      }
      while (v65 != v67);
    }
    uint64_t v49 = *v5;
    LODWORD(v85) = v76;
    LODWORD(v86) = 1;
    sub_1CC73661C(v49, (uint64_t)&v85, (int *)v88, v89);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    unsigned int v50 = v88;
    if (v88 != v90) {
LABEL_98:
    }
      free(v50);
  }
  return 1;
}

uint64_t sub_1CD624684(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)(a2 + 32);
  int v7 = **(unsigned __int16 **)(a2 + 16);
  if (v7 == 204) {
    int v8 = v6[17];
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = 2;
  if ((a3 & 0xFFFFFFFFFFFFFFF9) != 0 && (a3 & 4) != 0)
  {
    int v10 = v6[9];
    unint64_t v11 = &v6[8 * (*(_DWORD *)(a2 + 40) - 1)];
    int v12 = v11[1];
    uint64_t v13 = *(void *)(a1 + 16);
    if (v10 < 0 && (v10 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v13 + 432)) {
      unint64_t v14 = *(void *)(*(void *)(v13 + 424) + 8 * (v10 & 0x7FFFFFFF));
    }
    else {
      unint64_t v14 = 0;
    }
    int v15 = v6[1];
    sub_1CC73C44C(v11[1], v13, 1, (uint64_t)&v41);
    if (v43)
    {
      if (v42 > 0x40) {
        uint64_t v17 = *v41;
      }
      else {
        uint64_t v17 = (uint64_t)((void)v41 << -(uint64_t)v42) >> -(uint64_t)v42;
      }
      uint64_t v18 = 0x800000000000000;
      if ((v14 & 2) == 0) {
        uint64_t v18 = 0x8000000000000;
      }
      if ((v18 & v14) != 0) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v16);
      }
      if (v17 >= (unsigned __int16)(v14 >> 3))
      {
        int v34 = *(llvm::IntegerType ******)a1;
        uint64_t v9 = 1;
        LODWORD(v47) = v15;
        int v48 = 1;
        ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, void, void, void))(*v34)[4])(v34, 68, &v47, 1, 0, 0, 0);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      }
      else
      {
        unint64_t v44 = v46;
        uint64_t v45 = 0x800000000;
        unint64_t v19 = sub_1CC7257E0(a1, (uint64_t)&v44, v14, a3, v10);
        int v21 = (void *)sub_1CC724E64((llvm::IntegerType ******)a1, v14, a3, v19, (uint64_t)&v44, 118);
        uint64_t v22 = 0x800000000000000;
        if ((a3 & 2) == 0) {
          uint64_t v22 = 0x8000000000000;
        }
        if ((v22 & a3) != 0) {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
        }
        if (v12 < 0
          && (uint64_t v37 = *(void *)(a1 + 16), (v12 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v37 + 432)))
        {
          unint64_t v23 = *(void *)(*(void *)(v37 + 424) + 8 * (v12 & 0x7FFFFFFF));
        }
        else
        {
          unint64_t v23 = 0;
        }
        uint64_t v24 = (unsigned __int16)(a3 >> 3);
        uint64_t v25 = v17 / v24;
        uint64_t v26 = *(llvm::IntegerType ******)a1;
        unint64_t v47 = v23;
        int v48 = 0;
        uint64_t v27 = sub_1CC7362A8((uint64_t)v26, &v47, v17 % v24);
        if (v7 == 204)
        {
          int v29 = *((_DWORD *)v44 + v25);
          if (v29 < 0 && (uint64_t v38 = *(void *)(a1 + 16), (v29 & 0x7FFFFFFFu) < *(_DWORD *)(v38 + 432))) {
            uint64_t v30 = *(void *)(*(void *)(v38 + 424) + 8 * (v29 & 0x7FFFFFFF));
          }
          else {
            uint64_t v30 = 0;
          }
          uint64_t v31 = *(llvm::IntegerType ******)a1;
          uint64_t v39 = v30;
          int v40 = 0;
          LODWORD(v47) = v29;
          int v49 = 0;
          LODWORD(v50) = v8;
          int v52 = 0;
          uint64_t v53 = v27;
          uint64_t v54 = v28;
          int v55 = 1;
          ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v31)[4])(v31, 204, &v39, 1, &v47, 3, 0);
          unint64_t v33 = (int *)v44;
          *((_DWORD *)v44 + v25) = *(_DWORD *)(*(void *)(v32 + 32) + 4);
          sub_1CC725580((uint64_t *)a1, v15, v21, v33, v45);
        }
        else
        {
          unint64_t v35 = *(llvm::IntegerType ******)a1;
          LODWORD(v39) = v15;
          int v40 = 1;
          LODWORD(v47) = *((_DWORD *)v44 + v25);
          int v49 = 0;
          uint64_t v50 = v27;
          uint64_t v51 = v28;
          int v52 = 1;
          ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*v35)[4])(v35, 205, &v39, 1, &v47, 2, 0);
        }
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        if (v44 != v46) {
          free(v44);
        }
        uint64_t v9 = 1;
      }
    }
    else
    {
      uint64_t v9 = sub_1CD61F6E4((uint64_t *)a1, a2);
    }
    if (v43 && v42 >= 0x41 && v41) {
      MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
    }
  }
  return v9;
}

void sub_1CD624A98(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v8 = a4;
  v29[6] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = v29;
  uint64_t v28 = 0xC00000000;
  if ((a4 & 2) != 0) {
    uint64_t v12 = 0x800000000000000;
  }
  else {
    uint64_t v12 = 0x8000000000000;
  }
  if ((v12 & a4) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  if ((a5 & 2) != 0) {
    uint64_t v13 = 0x800000000000000;
  }
  else {
    uint64_t v13 = 0x8000000000000;
  }
  if ((v13 & a5) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  sub_1CC724218((uint64_t *)a1, a3, a5, (unsigned __int16)(v8 >> 3) / (unsigned __int16)(a5 >> 3), (uint64_t)&v27);
  if (v28 >= 2)
  {
    do
    {
      uint64_t v14 = 0;
      uint64_t v24 = v26;
      uint64_t v25 = 0xC00000000;
      unsigned int v15 = 2;
      do
      {
        int v16 = *((_DWORD *)v27 + v14);
        int v17 = *((_DWORD *)v27 + v15 - 1);
        uint64_t v18 = *(void *)a1;
        uint64_t v22 = a5;
        int v23 = 0;
        v21[0] = v16;
        void v21[4] = 0;
        v21[6] = v17;
        v21[10] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)v18 + 32))(v18, a6, &v22, 1, v21, 2, 0);
        if (v25 >= (unint64_t)HIDWORD(v25)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v24 + v25) = *(_DWORD *)(*(void *)(v19 + 32) + 4);
        LODWORD(v25) = v25 + 1;
        uint64_t v14 = v15;
        BOOL v20 = (unint64_t)v28 - 1 > v15;
        v15 += 2;
      }
      while (v20);
      sub_1CB927804((uint64_t)&v27, (uint64_t)&v24);
      if (v24 != v26) {
        free(v24);
      }
    }
    while (v28 > 1);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
  llvm::MachineOperand::setReg(*(void *)(a2 + 32) + 32, *(_DWORD *)v27);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
  if (v27 != v29) {
    free(v27);
  }
}

uint64_t sub_1CD624D30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1[1] + 32))(a1[1]);
  int v6 = *(_DWORD *)(a2 + 40);
  if (v6 != 1)
  {
    for (unsigned int i = 1; i != v6; i += 2)
    {
      unsigned int v8 = *(llvm::MachineBasicBlock **)(*(void *)(a2 + 32) + 32 * (i + 1) + 16);
      uint64_t v9 = *a1;
      unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v8);
      *(void *)(v9 + 40) = v8;
      *(void *)(v9 + 48) = FirstTerminator;
      sub_1CD61B250((void *)*a1, *(void *)(a2 + 32), a3, i);
    }
  }
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *a1;
  uint64_t v13 = (void *)(v11 + 48);
  for (uint64_t j = *(void *)(v11 + 56); (void *)j != v13; uint64_t j = *(void *)(j + 8))
  {
    if (**(_WORD **)(j + 16) && **(_WORD **)(j + 16) != 69)
    {
      uint64_t v13 = (void *)j;
      break;
    }
  }
  unint64_t v15 = *v13 & 0xFFFFFFFFFFFFFFF8;
  if (!v15 || (*(unsigned char *)v15 & 4) == 0)
  {
    while ((*(_WORD *)(v15 + 44) & 4) != 0)
      unint64_t v15 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v12 + 40) = v11;
  *(void *)(v12 + 48) = v15;
  sub_1CD61B19C(a1, *(void *)(a2 + 32), a3);
  int v16 = *(uint64_t (**)(void))(*(void *)a1[1] + 40);

  return v16();
}

uint64_t sub_1CD624E94(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  v38[8] = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 2;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  int v9 = *(_DWORD *)(v8 + 4);
  int v10 = *(_DWORD *)(v8 + 36);
  int v11 = *(_DWORD *)(v8 + 68);
  uint64_t v12 = a1[2];
  if (v9 < 0 && (uint64_t v26 = v9 & 0x7FFFFFFF, v26 < *(_DWORD *)(v12 + 432))) {
    uint64_t v13 = *(void *)(*(void *)(v12 + 424) + 8 * v26);
  }
  else {
    uint64_t v13 = 0;
  }
  if (v10 < 0 && (uint64_t v27 = v10 & 0x7FFFFFFF, v27 < *(_DWORD *)(v12 + 432))) {
    uint64_t v14 = *(void *)(*(void *)(v12 + 424) + 8 * v27);
  }
  else {
    uint64_t v14 = 0;
  }
  if (v11 < 0 && (uint64_t v28 = v11 & 0x7FFFFFFF, v28 < *(_DWORD *)(v12 + 432))) {
    uint64_t v15 = *(void *)(*(void *)(v12 + 424) + 8 * v28);
  }
  else {
    uint64_t v15 = 0;
  }
  int v16 = *(int **)(v8 + 112);
  if ((v13 & 2) != 0) {
    uint64_t v17 = 0x800000000000000;
  }
  else {
    uint64_t v17 = 0x8000000000000;
  }
  if ((v17 & v13) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  if ((a4 & 2) != 0) {
    uint64_t v18 = 0x800000000000000;
  }
  else {
    uint64_t v18 = 0x8000000000000;
  }
  if ((v18 & a4) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  uint64_t result = 2;
  if (v13 == v14 && v13 == v15)
  {
    int v19 = (unsigned __int16)(v13 >> 3);
    int v20 = (unsigned __int16)(a4 >> 3);
    sub_1CD61B250((void *)*a1, *(void *)(a2 + 32), a4, 1u);
    sub_1CD61B250((void *)*a1, *(void *)(a2 + 32), a4, 2u);
    uint64_t v36 = v38;
    uint64_t v37 = 0x1000000000;
    unsigned int v21 = 0;
    if ((unsigned __int16)(v13 >> 3))
    {
      uint64_t v29 = (unsigned __int16)(v13 >> 3);
      do
      {
        int v31 = *v16++;
        int v30 = v31;
        if (v31 >= v19) {
          v30 += v20 - v19;
        }
        if (v21 >= HIDWORD(v37)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v36 + v21) = v30;
        unsigned int v21 = v37 + 1;
        LODWORD(v37) = v37 + 1;
        --v29;
      }
      while (v29);
    }
    int v22 = v20 - v19;
    if (v20 != v19)
    {
      do
      {
        if (v21 >= HIDWORD(v37)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v36 + v21) = -1;
        unsigned int v21 = v37 + 1;
        LODWORD(v37) = v37 + 1;
        --v22;
      }
      while (v22);
    }
    sub_1CD61B19C(a1, *(void *)(a2 + 32), a4);
    uint64_t v23 = *a1;
    *(void *)(v23 + 40) = *(void *)(a2 + 24);
    *(void *)(v23 + 48) = a2;
    sub_1CB896804((unsigned __int8 **)(v23 + 32), (unsigned __int8 **)(a2 + 56));
    uint64_t v24 = (uint64_t *)*a1;
    uint64_t v25 = *(_DWORD **)(a2 + 32);
    LODWORD(v34) = v25[1];
    int v35 = 1;
    v33[0] = v25[9];
    v33[4] = 0;
    v32[0] = v25[17];
    v32[4] = 0;
    sub_1CD62DEA0(v24, &v34, v33, v32, v36, v37);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    if (v36 != v38) {
      free(v36);
    }
    return 1;
  }
  return result;
}

void sub_1CD62518C(uint64_t a1, uint64_t a2, int *a3, unsigned int a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(unsigned int *)(a2 + 8);
  int v14 = *a3;
  int v15 = *a5;
  uint64_t v66 = a7;
  int v67 = 0;
  v70[0] = v14;
  int v71 = 0;
  LODWORD(v72) = v15;
  int v74 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 47, &v66, 1, v70, 2, 0);
  uint64_t v57 = (void *)a2;
  **(_DWORD **)a2 = *(_DWORD *)(*(void *)(v16 + 32) + 4);
  unsigned int v63 = 0;
  if (v13 >= 2)
  {
    int v17 = 0;
    int v18 = 0;
    unsigned int v19 = a4 - 1;
    uint64_t v55 = (v13 - 1);
    uint64_t v56 = v13;
    unint64_t v54 = a4;
    uint64_t v20 = 1;
    unsigned int v21 = 2;
    unsigned int v58 = a4 - 1;
    unsigned int v59 = a4;
    do
    {
      unsigned int v22 = v20 - a4;
      if (v20 >= a4) {
        unint64_t v23 = v22;
      }
      else {
        unint64_t v23 = 0;
      }
      unsigned int v61 = v21;
      BOOL v24 = v21 >= a4;
      unsigned int v25 = v21 - a4;
      if (v24) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = 0;
      }
      if (v19 >= v20) {
        unint64_t v27 = v20;
      }
      else {
        unint64_t v27 = v19;
      }
      uint64_t v60 = v20 + 1;
      uint64_t v62 = v20;
      if (v20 + 1 < v54 || (unsigned int v28 = 0, v22 + 1 <= v27))
      {
        int v29 = v20 - v26;
        if (v61 >= v59) {
          unint64_t v30 = v61 - v59;
        }
        else {
          unint64_t v30 = 0;
        }
        do
        {
          int v31 = a3[v29];
          int v32 = a5[v30];
          uint64_t v66 = a7;
          int v67 = 0;
          v70[0] = v31;
          int v71 = 0;
          LODWORD(v72) = v32;
          int v74 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 47, &v66, 1, v70, 2, 0);
          if (v63 >= 4uLL) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(&v64 + v63) = *(_DWORD *)(*(void *)(v33 + 32) + 4);
          unsigned int v28 = ++v63;
          --v29;
          BOOL v24 = v30++ >= v27;
        }
        while (!v24);
        unsigned int v19 = v58;
        uint64_t v20 = v62;
      }
      if (v19 >= (int)v20 - 1) {
        unint64_t v34 = (v20 - 1);
      }
      else {
        unint64_t v34 = v19;
      }
      if (v23 <= v34)
      {
        int v35 = v17 - v23;
        do
        {
          int v36 = a3[v35];
          int v37 = a5[v23];
          uint64_t v66 = a7;
          int v67 = 0;
          v70[0] = v36;
          int v71 = 0;
          LODWORD(v72) = v37;
          int v74 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 147, &v66, 1, v70, 2, 0);
          if (v63 >= 4uLL) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(&v64 + v63) = *(_DWORD *)(*(void *)(v38 + 32) + 4);
          unsigned int v28 = ++v63;
          --v35;
          BOOL v24 = v23++ >= v34;
        }
        while (!v24);
        uint64_t v20 = v62;
      }
      if (v20 != 1)
      {
        if (v28 >= 4) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(&v64 + v28) = v18;
        ++v63;
      }
      if (v20 == v55)
      {
        uint64_t v66 = a7;
        int v67 = 0;
        v70[0] = v64;
        int v71 = 0;
        LODWORD(v72) = v65;
        int v74 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 45, &v66, 1, v70, 2, 0);
        int v40 = *(_DWORD *)(*(void *)(v39 + 32) + 4);
        if (v63 >= 3)
        {
          for (unint64_t i = 2; i < v63; ++i)
          {
            int v42 = *(&v64 + i);
            uint64_t v66 = a7;
            int v67 = 0;
            v70[0] = v40;
            int v71 = 0;
            LODWORD(v72) = v42;
            int v74 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 45, &v66, 1, v70, 2, 0);
            int v40 = *(_DWORD *)(*(void *)(v43 + 32) + 4);
          }
        }
        int v18 = 0;
      }
      else
      {
        uint64_t v66 = a7;
        int v67 = 0;
        uint64_t v68 = 9;
        int v69 = 0;
        v70[0] = v64;
        int v71 = 0;
        LODWORD(v72) = v65;
        int v74 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 137, &v66, 2, v70, 2, 0);
        uint64_t v45 = *(void *)(v44 + 32);
        int v40 = *(_DWORD *)(v45 + 4);
        uint64_t v66 = a7;
        int v67 = 0;
        v70[0] = *(_DWORD *)(v45 + 36);
        int v71 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 126, &v66, 1, v70, 1, 0);
        int v18 = *(_DWORD *)(*(void *)(v46 + 32) + 4);
        if (v63 >= 3)
        {
          for (unint64_t j = 2; j < v63; ++j)
          {
            int v48 = *(&v64 + j);
            uint64_t v66 = a7;
            int v67 = 0;
            uint64_t v68 = 9;
            int v69 = 0;
            v70[0] = v40;
            int v71 = 0;
            LODWORD(v72) = v48;
            int v74 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 137, &v66, 2, v70, 2, 0);
            uint64_t v50 = *(void *)(v49 + 32);
            int v40 = *(_DWORD *)(v50 + 4);
            uint64_t v66 = a7;
            int v67 = 0;
            v70[0] = *(_DWORD *)(v50 + 36);
            int v71 = 0;
            uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 126, &v66, 1, v70, 1, 0);
            uint64_t v66 = a7;
            int v67 = 0;
            v70[0] = v18;
            int v71 = 0;
            uint64_t v72 = v51;
            uint64_t v73 = v52;
            int v74 = 1;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a1 + 32))(a1, 45, &v66, 1, v70, 2, 0);
            int v18 = *(_DWORD *)(*(void *)(v53 + 32) + 4);
          }
        }
      }
      *(_DWORD *)(*v57 + 4 * v62) = v40;
      unsigned int v63 = 0;
      unsigned int v21 = v61 + 1;
      ++v17;
      a4 = v59;
      uint64_t v20 = v60;
      unsigned int v19 = v58;
    }
    while (v60 != v56);
  }
}

uint64_t sub_1CD62588C(uint64_t *a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(_DWORD **)(a2 + 32);
  int v5 = v4[1];
  unsigned int v6 = v4[25];
  uint64_t v7 = a1[2];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < *(_DWORD *)(v7 + 432)) {
    unint64_t v8 = *(void *)(*(void *)(v7 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v8 = 0;
  }
  if ((v6 & 0x80000000) != 0 && (v6 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v7 + 432)) {
    uint64_t v9 = *(void *)(*(void *)(v7 + 424) + 8 * (v6 & 0x7FFFFFFF));
  }
  else {
    uint64_t v9 = 0;
  }
  int8x8_t v10 = (int8x8_t)(unsigned __int16)(v8 >> 3);
  int8x8_t v11 = (int8x8_t)(unsigned __int16)(v8 >> 19);
  if ((v8 & 2) == 0) {
    int8x8_t v11 = (int8x8_t)(v8 >> 19);
  }
  if ((v8 & 4) != 0) {
    int8x8_t v10 = v11;
  }
  if (v8) {
    int8x8_t v12 = (int8x8_t)(v8 >> 3);
  }
  else {
    int8x8_t v12 = v10;
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.i32[0] != 1) {
    return 2;
  }
  int v14 = v4[9];
  int v15 = v4[17];
  int v16 = **(unsigned __int16 **)(a2 + 16);
  if (v16 == 130) {
    uint64_t v17 = 131;
  }
  else {
    uint64_t v17 = 130;
  }
  int v18 = sub_1CC72C264(v7, v6, v12.i32[0]);
  uint64_t v19 = *a1;
  if (v18)
  {
    *(void *)&long long v41 = v9;
    DWORD2(v41) = 0;
    uint64_t v20 = sub_1CC7362A8(v19, (unint64_t *)&v41, 0);
    uint64_t v21 = *a1;
    unint64_t v49 = v8;
    int v50 = 0;
    *(void *)&long long v41 = v20;
    *((void *)&v41 + 1) = v22;
    int v42 = 1;
    LODWORD(v43) = v6;
    int v45 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v21 + 32))(v21, 46, &v49, 1, &v41, 2, 0);
  }
  else
  {
    *(void *)&long long v41 = v9;
    DWORD2(v41) = 0;
    uint64_t v29 = sub_1CC7362A8(v19, (unint64_t *)&v41, 1uLL);
    uint64_t v30 = *a1;
    uint64_t v40 = v29;
    unint64_t v49 = v8;
    int v50 = 0;
    LODWORD(v41) = v14;
    int v42 = 0;
    LODWORD(v43) = v15;
    int v45 = 0;
    uint64_t v46 = v29;
    uint64_t v47 = v28;
    int v48 = 1;
    if (v16 == 130)
    {
      uint64_t v31 = v28;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v30 + 32))(v30, 131, &v49, 1, &v41, 3, 0);
      int v15 = *(_DWORD *)(*(void *)(v32 + 32) + 4);
      uint64_t v33 = *a1;
      unint64_t v49 = v8;
      int v50 = 0;
      LODWORD(v41) = v14;
      int v42 = 0;
      uint64_t v43 = v40;
      uint64_t v44 = v31;
      int v45 = 1;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v33 + 32))(v33, 128, &v49, 1, &v41, 2, 0);
      int v14 = *(_DWORD *)(*(void *)(v34 + 32) + 4);
    }
    else
    {
      uint64_t v35 = v28;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v30 + 32))(v30, 130, &v49, 1, &v41, 3, 0);
      int v14 = *(_DWORD *)(*(void *)(v36 + 32) + 4);
      uint64_t v37 = *a1;
      unint64_t v49 = v8;
      int v50 = 0;
      LODWORD(v41) = v15;
      int v42 = 0;
      uint64_t v43 = v40;
      uint64_t v44 = v35;
      int v45 = 1;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v37 + 32))(v37, 127, &v49, 1, &v41, 2, 0);
      int v15 = *(_DWORD *)(*(void *)(v38 + 32) + 4);
    }
    uint64_t v39 = (void *)*a1;
    unint64_t v49 = v9;
    int v50 = 0;
    LODWORD(v41) = v6;
    int v42 = 0;
    sub_1CD613DEC(v39, (uint64_t *)&v49, &v41);
  }
  int v24 = *(_DWORD *)(*(void *)(v23 + 32) + 4);
  uint64_t v25 = *a1;
  uint64_t v26 = 1;
  LODWORD(v49) = v5;
  int v50 = 1;
  LODWORD(v41) = v14;
  int v42 = 0;
  LODWORD(v43) = v15;
  int v45 = 0;
  LODWORD(v46) = v24;
  int v48 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v25 + 32))(v25, v17, &v49, 1, &v41, 3, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
  return v26;
}

void sub_1CD625CB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(_DWORD **)(a2 + 32);
  int v4 = v3[1];
  unsigned int v5 = v3[25];
  uint64_t v6 = a1[2];
  if (v4 < 0 && (v4 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432)) {
    unint64_t v7 = *(void *)(*(void *)(v6 + 424) + 8 * (v4 & 0x7FFFFFFF));
  }
  else {
    unint64_t v7 = 0;
  }
  if ((v5 & 0x80000000) != 0 && (v5 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v6 + 432)) {
    uint64_t v8 = *(void *)(*(void *)(v6 + 424) + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = v3[9];
  int v10 = v3[17];
  unint64_t v11 = (unsigned __int16)(v7 >> 3);
  unint64_t v12 = (unsigned __int16)(v7 >> 19);
  if ((v7 & 2) == 0) {
    unint64_t v12 = (v7 >> 19);
  }
  if ((v7 & 4) != 0) {
    unint64_t v11 = v12;
  }
  if (v7) {
    unint64_t v13 = (v7 >> 3);
  }
  else {
    unint64_t v13 = v11;
  }
  int v14 = **(unsigned __int16 **)(a2 + 16);
  int v15 = sub_1CC72C264(v6, v5, v13);
  uint64_t v16 = *a1;
  int v71 = v10;
  if (v15)
  {
    *(void *)&long long v72 = v8;
    DWORD2(v72) = 0;
    uint64_t v17 = sub_1CC7362A8(v16, (unint64_t *)&v72, v13);
    uint64_t v19 = v18;
    uint64_t v20 = *a1;
    unint64_t v77 = v8;
    int v78 = 0;
    LODWORD(v72) = v5;
    int v73 = 0;
    uint64_t v74 = v17;
    uint64_t v75 = v18;
    int v76 = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v20 + 32))(v20, 62, &v77, 1, &v72, 2, 0);
    int v22 = *(_DWORD *)(*(void *)(v21 + 32) + 4);
    uint64_t v23 = *a1;
    unint64_t v77 = v8;
    int v78 = 0;
    *(void *)&long long v72 = v17;
    *((void *)&v72 + 1) = v19;
    int v73 = 1;
    LODWORD(v74) = v22;
    int v76 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v23 + 32))(v23, 46, &v77, 1, &v72, 2, 0);
    int v25 = *(_DWORD *)(*(void *)(v24 + 32) + 4);
    uint64_t v26 = *a1;
    if (v14 == 130) {
      int v27 = v22;
    }
    else {
      int v27 = *(_DWORD *)(*(void *)(v24 + 32) + 4);
    }
    unint64_t v77 = v7;
    int v78 = 0;
    LODWORD(v72) = v9;
    int v73 = 0;
    LODWORD(v74) = v27;
    int v76 = 0;
    if (v14 == 130) {
      int v28 = v25;
    }
    else {
      int v28 = v22;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v26 + 32))(v26, 127, &v77, 1, &v72, 2, 0);
    int v30 = *(_DWORD *)(*(void *)(v29 + 32) + 4);
    uint64_t v31 = *a1;
    unint64_t v77 = v7;
    int v78 = 0;
    LODWORD(v72) = v71;
    int v73 = 0;
    LODWORD(v74) = v28;
    int v76 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v31 + 32))(v31, 128, &v77, 1, &v72, 2, 0);
  }
  else
  {
    int v69 = v4;
    *(void *)&long long v72 = v8;
    DWORD2(v72) = 0;
    uint64_t v34 = sub_1CC7362A8(v16, (unint64_t *)&v72, (v13 - 1));
    uint64_t v35 = v33;
    v36.i32[0] = v13;
    uint8x8_t v37 = (uint8x8_t)vcnt_s8(v36);
    v37.i16[0] = vaddlv_u8(v37);
    uint64_t v38 = *a1;
    if (v37.i32[0] == 1)
    {
      unint64_t v77 = v8;
      int v78 = 0;
      LODWORD(v72) = v5;
      int v73 = 0;
      uint64_t v74 = v34;
      uint64_t v75 = v33;
      int v76 = 1;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v38 + 32))(v38, 65, &v77, 1, &v72, 2, 0);
      int v43 = *(_DWORD *)(*(void *)(v64 + 32) + 4);
      int v65 = (void *)*a1;
      unint64_t v77 = v8;
      int v78 = 0;
      LODWORD(v72) = v5;
      int v73 = 0;
      uint64_t v66 = sub_1CD613DEC(v65, (uint64_t *)&v77, &v72);
      uint64_t v67 = *a1;
      unint64_t v77 = v8;
      int v78 = 0;
      *(void *)&long long v72 = v66;
      *((void *)&v72 + 1) = v68;
      int v73 = 1;
      uint64_t v74 = v34;
      uint64_t v75 = v35;
      int v76 = 1;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v67 + 32))(v67, 65, &v77, 1, &v72, 2, 0);
    }
    else
    {
      *(void *)&long long v72 = v8;
      DWORD2(v72) = 0;
      uint64_t v39 = sub_1CC7362A8(v38, (unint64_t *)&v72, v13);
      uint64_t v40 = *a1;
      unint64_t v77 = v8;
      int v78 = 0;
      LODWORD(v72) = v5;
      int v73 = 0;
      uint64_t v74 = v39;
      uint64_t v75 = v41;
      int v76 = 1;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v40 + 32))(v40, 62, &v77, 1, &v72, 2, 0);
      int v43 = *(_DWORD *)(*(void *)(v42 + 32) + 4);
      uint64_t v44 = *a1;
      unint64_t v77 = v8;
      int v78 = 0;
      *(void *)&long long v72 = v34;
      *((void *)&v72 + 1) = v35;
      int v73 = 1;
      LODWORD(v74) = v43;
      int v76 = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v44 + 32))(v44, 46, &v77, 1, &v72, 2, 0);
    }
    int v46 = *(_DWORD *)(*(void *)(v45 + 32) + 4);
    uint64_t v47 = *a1;
    *(void *)&long long v72 = v8;
    DWORD2(v72) = 0;
    uint64_t v49 = sub_1CC7362A8(v47, (unint64_t *)&v72, 1uLL);
    uint64_t v50 = v48;
    uint64_t v51 = *a1;
    unint64_t v77 = v7;
    int v78 = 0;
    LODWORD(v72) = v9;
    int v73 = 0;
    if (v14 == 130)
    {
      LODWORD(v74) = v43;
      int v76 = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v51 + 32))(v51, 127, &v77, 1, &v72, 2, 0);
      int v30 = *(_DWORD *)(*(void *)(v52 + 32) + 4);
      uint64_t v53 = *a1;
      unint64_t v77 = v7;
      int v78 = 0;
      LODWORD(v72) = v71;
      int v73 = 0;
      uint64_t v74 = v49;
      uint64_t v75 = v50;
      int v76 = 1;
      uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v53 + 32))(v53, 128, &v77, 1, &v72, 2, 0);
      uint64_t v55 = *a1;
      unint64_t v77 = v7;
      int v78 = 0;
      *(void *)&long long v72 = v54;
      *((void *)&v72 + 1) = v56;
      int v73 = 1;
      LODWORD(v74) = v46;
      int v76 = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v55 + 32))(v55, 128, &v77, 1, &v72, 2, 0);
    }
    else
    {
      uint64_t v74 = v49;
      uint64_t v75 = v48;
      int v76 = 1;
      uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v51 + 32))(v51, 127, &v77, 1, &v72, 2, 0);
      uint64_t v58 = *a1;
      unint64_t v77 = v7;
      int v78 = 0;
      *(void *)&long long v72 = v57;
      *((void *)&v72 + 1) = v59;
      int v73 = 1;
      LODWORD(v74) = v46;
      int v76 = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v58 + 32))(v58, 127, &v77, 1, &v72, 2, 0);
      int v30 = *(_DWORD *)(*(void *)(v60 + 32) + 4);
      uint64_t v61 = *a1;
      unint64_t v77 = v7;
      int v78 = 0;
      LODWORD(v72) = v71;
      int v73 = 0;
      LODWORD(v74) = v43;
      int v76 = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v61 + 32))(v61, 128, &v77, 1, &v72, 2, 0);
    }
    int v4 = v69;
  }
  int v62 = *(_DWORD *)(*(void *)(v32 + 32) + 4);
  uint64_t v63 = *a1;
  LODWORD(v77) = v4;
  int v78 = 1;
  LODWORD(v72) = v30;
  int v73 = 0;
  LODWORD(v74) = v62;
  int v76 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v63 + 32))(v63, 66, &v77, 1, &v72, 2, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

void sub_1CD626454(uint64_t *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD **)(a2 + 32);
  int v5 = v4[1];
  int v6 = v4[9];
  int v7 = v4[17];
  if (v7 < 0 && (uint64_t v17 = a1[2], (v7 & 0x7FFFFFFFu) < *(_DWORD *)(v17 + 432))) {
    unint64_t v8 = *(void *)(*(void *)(v17 + 424) + 8 * (v7 & 0x7FFFFFFF));
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v9 = *a1;
  unint64_t v18 = v8;
  LODWORD(v19) = 0;
  uint64_t v10 = sub_1CC7362A8(v9, &v18, 0);
  if (**(_WORD **)(a2 + 16) == 133) {
    uint64_t v12 = 132;
  }
  else {
    uint64_t v12 = 133;
  }
  uint64_t v13 = *a1;
  unint64_t v24 = v8;
  int v25 = 0;
  unint64_t v18 = v10;
  uint64_t v19 = v11;
  int v20 = 1;
  LODWORD(v21) = v7;
  int v23 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v13 + 32))(v13, 46, &v24, 1, &v18, 2, 0);
  uint64_t v15 = *a1;
  LODWORD(v24) = v5;
  int v25 = 1;
  LODWORD(v18) = v6;
  int v20 = 0;
  uint64_t v21 = v14;
  uint64_t v22 = v16;
  int v23 = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v15 + 32))(v15, v12, &v24, 1, &v18, 2, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

uint64_t sub_1CD6265EC(void *a1, unint64_t *a2, long long *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)a2 + 2);
  int v7 = a2;
  if (!v6) {
    goto LABEL_8;
  }
  if (v6 != 2)
  {
    uint64_t v8 = a1[3];
    if ((*(_DWORD *)a2 & 0x80000000) != 0)
    {
      uint64_t v14 = *(_DWORD *)a2 & 0x7FFFFFFF;
      if (v14 < *(_DWORD *)(v8 + 432))
      {
        int v7 = (unint64_t *)(*(void *)(v8 + 424) + 8 * v14);
LABEL_8:
        unint64_t v9 = *v7;
        goto LABEL_5;
      }
    }
  }
  unint64_t v9 = 0;
LABEL_5:
  unint64_t v15 = v9;
  LODWORD(v16) = 0;
  uint64_t v10 = sub_1CC7362A8((uint64_t)a1, &v15, 0);
  unint64_t v20 = *a2;
  int v21 = *((_DWORD *)a2 + 2);
  unint64_t v15 = v10;
  uint64_t v16 = v11;
  int v17 = 1;
  long long v18 = *a3;
  int v19 = *((_DWORD *)a3 + 4);
  (*(void (**)(void *, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a1 + 32))(a1, 46, &v20, 1, &v15, 2, 0);
  return v12;
}

void sub_1CD62671C(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a2 + 4);
  int v95 = *(_DWORD *)(v3 + 4);
  int v4 = *(_DWORD *)(v3 + 36);
  uint64_t v5 = *a1;
  *(void *)&long long v103 = 257;
  DWORD2(v103) = 0;
  uint64_t v6 = sub_1CC7362A8(v5, (unint64_t *)&v103, 0);
  uint64_t v93 = v7;
  uint64_t v94 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = *a1;
  *(void *)&long long v103 = 513;
  DWORD2(v103) = 0;
  uint64_t v90 = sub_1CC7362A8(v9, (unint64_t *)&v103, 0);
  uint64_t v11 = v10;
  uint64_t v12 = *a1;
  *(void *)&long long v101 = 257;
  DWORD2(v101) = 0;
  LODWORD(v103) = v4;
  int v104 = 0;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v12 + 32))(v12, 210, &v101, 1, &v103, 1, 0);
  uint64_t v15 = v14;
  uint64_t v16 = *a1;
  *(void *)&long long v103 = 257;
  DWORD2(v103) = 0;
  uint64_t v17 = sub_1CC7362A8(v16, (unint64_t *)&v103, 0xBEuLL);
  uint64_t v18 = *a1;
  *(void *)&long long v101 = 257;
  DWORD2(v101) = 0;
  *(void *)&long long v103 = v17;
  *((void *)&v103 + 1) = v19;
  int v104 = 1;
  uint64_t v105 = v13;
  uint64_t v106 = v15;
  int v107 = 1;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v18 + 32))(v18, 46, &v101, 1, &v103, 2, 0);
  uint64_t v22 = v21;
  uint64_t v23 = *a1;
  *(void *)&long long v99 = 9;
  DWORD2(v99) = 0;
  LODWORD(v103) = v4;
  int v104 = 0;
  *(void *)&long long v101 = v90;
  *((void *)&v101 + 1) = v11;
  int v102 = 1;
  uint64_t v24 = sub_1CC73933C(v23, 33, (uint64_t)&v99, &v103, &v101);
  uint64_t v25 = *a1;
  uint64_t v97 = 257;
  int v98 = 0;
  *(void *)&long long v103 = v24;
  *((void *)&v103 + 1) = v26;
  int v104 = 1;
  *(void *)&long long v101 = v20;
  *((void *)&v101 + 1) = v22;
  int v102 = 1;
  *(void *)&long long v99 = v6;
  *((void *)&v99 + 1) = v8;
  int v100 = 1;
  uint64_t v91 = sub_1CC739494(v25, &v97, &v103, &v101, &v99, 0);
  uint64_t v28 = v27;
  uint64_t v29 = *a1;
  *(void *)&long long v103 = 513;
  DWORD2(v103) = 0;
  uint64_t v30 = sub_1CC7362A8(v29, (unint64_t *)&v103, 0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v32 = v31;
  uint64_t v33 = *a1;
  *(void *)&long long v101 = 513;
  DWORD2(v101) = 0;
  LODWORD(v103) = v4;
  int v104 = 0;
  uint64_t v105 = v13;
  uint64_t v106 = v15;
  int v107 = 1;
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v33 + 32))(v33, 127, &v101, 1, &v103, 2, 0);
  uint64_t v35 = *a1;
  *(void *)&long long v101 = 513;
  DWORD2(v101) = 0;
  *(void *)&long long v103 = v34;
  *((void *)&v103 + 1) = v36;
  int v104 = 1;
  uint64_t v105 = v30;
  uint64_t v106 = v32;
  int v107 = 1;
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v35 + 32))(v35, 65, &v101, 1, &v103, 2, 0);
  uint64_t v39 = v38;
  uint64_t v40 = *a1;
  *(void *)&long long v103 = 513;
  DWORD2(v103) = 0;
  uint64_t v41 = sub_1CC7362A8(v40, (unint64_t *)&v103, 0xFFFFFFFFFFuLL);
  uint64_t v42 = *a1;
  *(void *)&long long v101 = 513;
  DWORD2(v101) = 0;
  *(void *)&long long v103 = v37;
  *((void *)&v103 + 1) = v39;
  int v104 = 1;
  uint64_t v105 = v41;
  uint64_t v106 = v43;
  int v107 = 1;
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v42 + 32))(v42, 65, &v101, 1, &v103, 2, 0);
  uint64_t v46 = v45;
  uint64_t v47 = *a1;
  *(void *)&long long v99 = 513;
  DWORD2(v99) = 0;
  uint64_t v48 = sub_1CC7362A8(v47, (unint64_t *)&v99, 0x28uLL);
  *(void *)&long long v101 = 513;
  DWORD2(v101) = 0;
  *(void *)&long long v103 = v37;
  *((void *)&v103 + 1) = v39;
  int v104 = 1;
  uint64_t v105 = v48;
  uint64_t v106 = v49;
  int v107 = 1;
  uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v47 + 32))(v47, 128, &v101, 1, &v103, 2, 0);
  uint64_t v52 = v51;
  uint64_t v53 = *a1;
  *(void *)&long long v99 = 257;
  DWORD2(v99) = 0;
  uint64_t v54 = sub_1CC7362A8(v53, (unint64_t *)&v99, 0x17uLL);
  *(void *)&long long v101 = 257;
  DWORD2(v101) = 0;
  *(void *)&long long v103 = v91;
  *((void *)&v103 + 1) = v28;
  int v104 = 1;
  uint64_t v105 = v54;
  uint64_t v106 = v55;
  int v107 = 1;
  uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v53 + 32))(v53, 127, &v101, 1, &v103, 2, 0);
  uint64_t v58 = v57;
  uint64_t v59 = *a1;
  uint64_t v97 = 257;
  int v98 = 0;
  *(void *)&long long v101 = v50;
  *((void *)&v101 + 1) = v52;
  int v102 = 1;
  uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v59 + 32))(v59, 119, &v97, 1, &v101, 1, 0);
  *(void *)&long long v99 = 257;
  DWORD2(v99) = 0;
  *(void *)&long long v103 = v56;
  *((void *)&v103 + 1) = v58;
  int v104 = 1;
  uint64_t v105 = v60;
  uint64_t v106 = v61;
  int v107 = 1;
  uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v59 + 32))(v59, 66, &v99, 1, &v103, 2, 0);
  uint64_t v64 = v63;
  uint64_t v65 = *a1;
  *(void *)&long long v103 = 513;
  DWORD2(v103) = 0;
  uint64_t v66 = sub_1CC7362A8(v65, (unint64_t *)&v103, 0x8000000000uLL);
  uint64_t v68 = v67;
  uint64_t v69 = *a1;
  *(void *)&long long v99 = 9;
  DWORD2(v99) = 0;
  *(void *)&long long v103 = v44;
  *((void *)&v103 + 1) = v46;
  int v104 = 1;
  *(void *)&long long v101 = v66;
  *((void *)&v101 + 1) = v67;
  int v102 = 1;
  uint64_t v92 = sub_1CC73933C(v69, 34, (uint64_t)&v99, &v103, &v101);
  uint64_t v71 = v70;
  uint64_t v72 = *a1;
  *(void *)&long long v99 = 9;
  DWORD2(v99) = 0;
  *(void *)&long long v103 = v44;
  *((void *)&v103 + 1) = v46;
  int v104 = 1;
  *(void *)&long long v101 = v66;
  *((void *)&v101 + 1) = v68;
  int v102 = 1;
  uint64_t v73 = sub_1CC73933C(v72, 32, (uint64_t)&v99, &v103, &v101);
  uint64_t v75 = v74;
  uint64_t v76 = *a1;
  *(void *)&long long v103 = 257;
  DWORD2(v103) = 0;
  uint64_t v77 = sub_1CC7362A8(v76, (unint64_t *)&v103, 1uLL);
  uint64_t v79 = v78;
  uint64_t v80 = *a1;
  *(void *)&long long v101 = 257;
  DWORD2(v101) = 0;
  *(void *)&long long v103 = v62;
  *((void *)&v103 + 1) = v64;
  int v104 = 1;
  uint64_t v105 = v77;
  uint64_t v106 = v78;
  int v107 = 1;
  uint64_t v81 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v80 + 32))(v80, 65, &v101, 1, &v103, 2, 0);
  uint64_t v82 = *a1;
  uint64_t v97 = 257;
  int v98 = 0;
  *(void *)&long long v103 = v73;
  *((void *)&v103 + 1) = v75;
  int v104 = 1;
  *(void *)&long long v101 = v81;
  *((void *)&v101 + 1) = v83;
  int v102 = 1;
  *(void *)&long long v99 = v94;
  *((void *)&v99 + 1) = v93;
  int v100 = 1;
  uint64_t v84 = sub_1CC739494(v82, &v97, &v103, &v101, &v99, 0);
  uint64_t v85 = *a1;
  uint64_t v97 = 257;
  int v98 = 0;
  *(void *)&long long v103 = v92;
  *((void *)&v103 + 1) = v71;
  int v104 = 1;
  *(void *)&long long v101 = v77;
  *((void *)&v101 + 1) = v79;
  int v102 = 1;
  *(void *)&long long v99 = v84;
  *((void *)&v99 + 1) = v86;
  int v100 = 1;
  uint64_t v87 = sub_1CC739494(v85, &v97, &v103, &v101, &v99, 0);
  uint64_t v88 = *a1;
  LODWORD(v101) = v95;
  DWORD2(v101) = 1;
  *(void *)&long long v103 = v62;
  *((void *)&v103 + 1) = v64;
  int v104 = 1;
  uint64_t v105 = v87;
  uint64_t v106 = v89;
  int v107 = 1;
  (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v88 + 32))(v88, 45, &v101, 1, &v103, 2, 0);
  llvm::MachineInstr::eraseFromParent(a2);
}

uint64_t sub_1CD626E7C(uint64_t *a1, llvm::MachineInstr *a2)
{
  uint64_t v232 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a2 + 4);
  int v4 = *(_DWORD *)(v3 + 4);
  int v5 = *(_DWORD *)(v3 + 36);
  if (v5 < 0)
  {
    uint64_t v202 = a1[2];
    if ((v5 & 0x7FFFFFFFu) < *(_DWORD *)(v202 + 432))
    {
      uint64_t v203 = *(void *)(*(void *)(v202 + 424) + 8 * (v5 & 0x7FFFFFFF));
      unint64_t v204 = v203 & 0xFFFFFFFFFFFFFFF9;
      uint64_t v205 = v203 & 4;
      if (v204 && v205 != 0) {
        return 2;
      }
    }
  }
  uint64_t v6 = (void *)*a1;
  LODWORD(v227) = v5;
  int v228 = 0;
  int v215 = v4;
  sub_1CC7363F0(v6, 0x101uLL, (int *)&v227);
  uint64_t v8 = *(void *)(v7 + 32);
  int v9 = *(_DWORD *)(v8 + 4);
  int v10 = *(_DWORD *)(v8 + 36);
  uint64_t v11 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v12 = sub_1CC7362A8(v11, (unint64_t *)&v221, 0x14uLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  LODWORD(v227) = v10;
  int v13 = v10;
  int v228 = 0;
  uint64_t v229 = v12;
  uint64_t v230 = v14;
  uint64_t v15 = 1;
  int v231 = 1;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v11 + 32))(v11, 128, &v225, 1, &v227, 2, 0);
  uint64_t v18 = v17;
  uint64_t v19 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v20 = sub_1CC7362A8(v19, (unint64_t *)&v221, 0x7FFuLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v16;
  *((void *)&v227 + 1) = v18;
  int v228 = 1;
  uint64_t v229 = v20;
  uint64_t v230 = v21;
  int v231 = 1;
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v19 + 32))(v19, 65, &v225, 1, &v227, 2, 0);
  uint64_t v24 = v23;
  uint64_t v25 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v26 = sub_1CC7362A8(v25, (unint64_t *)&v221, 0xFFFFFC10uLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v22;
  *((void *)&v227 + 1) = v24;
  int v228 = 1;
  uint64_t v229 = v26;
  uint64_t v230 = v27;
  int v231 = 1;
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v25 + 32))(v25, 45, &v225, 1, &v227, 2, 0);
  uint64_t v217 = v29;
  uint64_t v218 = v28;
  uint64_t v30 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v31 = sub_1CC7362A8(v30, (unint64_t *)&v221, 8uLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  LODWORD(v227) = v13;
  int v214 = v13;
  int v228 = 0;
  uint64_t v229 = v31;
  uint64_t v230 = v32;
  int v231 = 1;
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v30 + 32))(v30, 128, &v225, 1, &v227, 2, 0);
  uint64_t v35 = v34;
  uint64_t v36 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v37 = sub_1CC7362A8(v36, (unint64_t *)&v221, 0xFFEuLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v33;
  *((void *)&v227 + 1) = v35;
  int v228 = 1;
  uint64_t v229 = v37;
  uint64_t v230 = v38;
  int v231 = 1;
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v36 + 32))(v36, 65, &v225, 1, &v227, 2, 0);
  uint64_t v41 = v40;
  uint64_t v42 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v43 = sub_1CC7362A8(v42, (unint64_t *)&v221, 0x1FFuLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  LODWORD(v227) = v13;
  int v228 = 0;
  uint64_t v229 = v43;
  uint64_t v230 = v44;
  int v231 = 1;
  uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v42 + 32))(v42, 65, &v225, 1, &v227, 2, 0);
  uint64_t v46 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v45;
  *((void *)&v227 + 1) = v47;
  int v228 = 1;
  LODWORD(v229) = v9;
  int v231 = 0;
  uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v46 + 32))(v46, 66, &v225, 1, &v227, 2, 0);
  uint64_t v50 = v49;
  uint64_t v51 = *a1;
  *(void *)&long long v227 = 257;
  DWORD2(v227) = 0;
  uint64_t v52 = sub_1CC7362A8(v51, (unint64_t *)&v227, 0);
  uint64_t v54 = v53;
  uint64_t v55 = *a1;
  *(void *)&long long v221 = 9;
  DWORD2(v221) = 0;
  *(void *)&long long v227 = v48;
  *((void *)&v227 + 1) = v50;
  int v228 = 1;
  *(void *)&long long v225 = v52;
  *((void *)&v225 + 1) = v53;
  int v226 = 1;
  uint64_t v56 = sub_1CC73933C(v55, 33, (uint64_t)&v221, &v227, &v225);
  uint64_t v57 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v56;
  *((void *)&v227 + 1) = v58;
  int v228 = 1;
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v57 + 32))(v57, 126, &v225, 1, &v227, 1, 0);
  uint64_t v60 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v39;
  *((void *)&v227 + 1) = v41;
  int v228 = 1;
  uint64_t v229 = v59;
  uint64_t v230 = v61;
  int v231 = 1;
  uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v60 + 32))(v60, 66, &v225, 1, &v227, 2, 0);
  uint64_t v64 = v63;
  uint64_t v65 = *a1;
  *(void *)&long long v227 = 257;
  DWORD2(v227) = 0;
  uint64_t v66 = sub_1CC7362A8(v65, (unint64_t *)&v227, 0x200uLL);
  uint64_t v68 = v67;
  uint64_t v69 = *a1;
  *(void *)&long long v221 = 9;
  DWORD2(v221) = 0;
  *(void *)&long long v227 = v62;
  *((void *)&v227 + 1) = v64;
  int v228 = 1;
  *(void *)&long long v225 = v52;
  *((void *)&v225 + 1) = v54;
  int v226 = 1;
  uint64_t v70 = sub_1CC73933C(v69, 33, (uint64_t)&v221, &v227, &v225);
  uint64_t v71 = *a1;
  uint64_t v223 = 257;
  int v224 = 0;
  *(void *)&long long v227 = v70;
  *((void *)&v227 + 1) = v72;
  int v228 = 1;
  *(void *)&long long v225 = v66;
  *((void *)&v225 + 1) = v68;
  int v226 = 1;
  *(void *)&long long v221 = v52;
  *((void *)&v221 + 1) = v54;
  int v222 = 1;
  uint64_t v73 = sub_1CC739494(v71, &v223, &v227, &v225, &v221, 0);
  uint64_t v75 = v74;
  uint64_t v76 = *a1;
  *(void *)&long long v227 = 257;
  DWORD2(v227) = 0;
  uint64_t v77 = sub_1CC7362A8(v76, (unint64_t *)&v227, 0x7C00uLL);
  uint64_t v78 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v73;
  *((void *)&v227 + 1) = v75;
  int v228 = 1;
  uint64_t v229 = v77;
  uint64_t v230 = v79;
  int v231 = 1;
  uint64_t v80 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v78 + 32))(v78, 66, &v225, 1, &v227, 2, 0);
  uint64_t v212 = v81;
  uint64_t v213 = v80;
  uint64_t v82 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v83 = sub_1CC7362A8(v82, (unint64_t *)&v221, 0xCuLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v218;
  *((void *)&v227 + 1) = v217;
  int v228 = 1;
  uint64_t v229 = v83;
  uint64_t v230 = v84;
  int v231 = 1;
  uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v82 + 32))(v82, 127, &v225, 1, &v227, 2, 0);
  uint64_t v86 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v62;
  *((void *)&v227 + 1) = v64;
  int v228 = 1;
  uint64_t v229 = v85;
  uint64_t v230 = v87;
  int v231 = 1;
  uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v86 + 32))(v86, 66, &v225, 1, &v227, 2, 0);
  uint64_t v209 = v89;
  uint64_t v210 = v88;
  uint64_t v90 = *a1;
  *(void *)&long long v227 = 257;
  DWORD2(v227) = 0;
  uint64_t v91 = sub_1CC7362A8(v90, (unint64_t *)&v227, 1uLL);
  uint64_t v207 = v92;
  uint64_t v208 = v91;
  uint64_t v93 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v91;
  *((void *)&v227 + 1) = v92;
  int v228 = 1;
  uint64_t v229 = v218;
  uint64_t v230 = v217;
  int v231 = 1;
  uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v93 + 32))(v93, 46, &v225, 1, &v227, 2, 0);
  uint64_t v95 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v94;
  *((void *)&v227 + 1) = v96;
  int v228 = 1;
  uint64_t v229 = v52;
  uint64_t v230 = v54;
  int v231 = 1;
  uint64_t v97 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v95 + 32))(v95, 196, &v225, 1, &v227, 2, 0);
  uint64_t v99 = v98;
  uint64_t v100 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v101 = sub_1CC7362A8(v100, (unint64_t *)&v221, 0xDuLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v97;
  *((void *)&v227 + 1) = v99;
  int v228 = 1;
  uint64_t v229 = v101;
  uint64_t v230 = v102;
  int v231 = 1;
  uint64_t v103 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v100 + 32))(v100, 195, &v225, 1, &v227, 2, 0);
  uint64_t v105 = v104;
  uint64_t v106 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v107 = sub_1CC7362A8(v106, (unint64_t *)&v221, 0x1000uLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v62;
  *((void *)&v227 + 1) = v64;
  int v228 = 1;
  uint64_t v229 = v107;
  uint64_t v230 = v108;
  int v231 = 1;
  uint64_t v109 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v106 + 32))(v106, 66, &v225, 1, &v227, 2, 0);
  uint64_t v111 = v110;
  uint64_t v112 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v109;
  *((void *)&v227 + 1) = v110;
  int v228 = 1;
  uint64_t v229 = v103;
  uint64_t v230 = v105;
  int v231 = 1;
  uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v112 + 32))(v112, 128, &v225, 1, &v227, 2, 0);
  uint64_t v115 = v114;
  uint64_t v116 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v113;
  *((void *)&v227 + 1) = v114;
  int v228 = 1;
  uint64_t v229 = v103;
  uint64_t v230 = v105;
  int v231 = 1;
  uint64_t v117 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v116 + 32))(v116, 127, &v225, 1, &v227, 2, 0);
  uint64_t v118 = *a1;
  *(void *)&long long v221 = 9;
  DWORD2(v221) = 0;
  *(void *)&long long v227 = v117;
  *((void *)&v227 + 1) = v119;
  int v228 = 1;
  *(void *)&long long v225 = v109;
  *((void *)&v225 + 1) = v111;
  int v226 = 1;
  uint64_t v120 = sub_1CC73933C(v118, 33, (uint64_t)&v221, &v227, &v225);
  uint64_t v121 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v120;
  *((void *)&v227 + 1) = v122;
  int v228 = 1;
  uint64_t v123 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v121 + 32))(v121, 126, &v225, 1, &v227, 1, 0);
  uint64_t v124 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v113;
  *((void *)&v227 + 1) = v115;
  int v228 = 1;
  uint64_t v229 = v123;
  uint64_t v230 = v125;
  int v231 = 1;
  uint64_t v126 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v124 + 32))(v124, 66, &v225, 1, &v227, 2, 0);
  uint64_t v128 = v127;
  uint64_t v129 = *a1;
  *(void *)&long long v221 = 9;
  DWORD2(v221) = 0;
  *(void *)&long long v227 = v218;
  *((void *)&v227 + 1) = v217;
  int v228 = 1;
  *(void *)&long long v225 = v208;
  *((void *)&v225 + 1) = v207;
  int v226 = 1;
  uint64_t v130 = sub_1CC73933C(v129, 40, (uint64_t)&v221, &v227, &v225);
  uint64_t v131 = *a1;
  uint64_t v223 = 257;
  int v224 = 0;
  *(void *)&long long v227 = v130;
  *((void *)&v227 + 1) = v132;
  int v228 = 1;
  *(void *)&long long v225 = v126;
  *((void *)&v225 + 1) = v128;
  int v226 = 1;
  *(void *)&long long v221 = v210;
  *((void *)&v221 + 1) = v209;
  int v222 = 1;
  uint64_t v133 = sub_1CC739494(v131, &v223, &v227, &v225, &v221, 0);
  uint64_t v135 = v134;
  uint64_t v136 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v137 = sub_1CC7362A8(v136, (unint64_t *)&v221, 7uLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v133;
  *((void *)&v227 + 1) = v135;
  int v228 = 1;
  uint64_t v229 = v137;
  uint64_t v230 = v138;
  int v231 = 1;
  uint64_t v139 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v136 + 32))(v136, 65, &v225, 1, &v227, 2, 0);
  uint64_t v141 = v140;
  uint64_t v142 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v143 = sub_1CC7362A8(v142, (unint64_t *)&v221, 2uLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v133;
  *((void *)&v227 + 1) = v135;
  int v228 = 1;
  uint64_t v229 = v143;
  uint64_t v230 = v144;
  int v231 = 1;
  uint64_t v211 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v142 + 32))(v142, 128, &v225, 1, &v227, 2, 0);
  uint64_t v146 = v145;
  uint64_t v147 = *a1;
  *(void *)&long long v221 = 9;
  DWORD2(v221) = 0;
  *(void *)&long long v227 = v139;
  *((void *)&v227 + 1) = v141;
  int v228 = 1;
  uint64_t v223 = 257;
  int v224 = 0;
  *(void *)&long long v225 = sub_1CC7362A8(v147, (unint64_t *)&v223, 3uLL);
  *((void *)&v225 + 1) = v148;
  int v226 = 1;
  uint64_t v149 = sub_1CC73933C(v147, 32, (uint64_t)&v221, &v227, &v225);
  uint64_t v150 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v149;
  *((void *)&v227 + 1) = v151;
  int v228 = 1;
  uint64_t v152 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v150 + 32))(v150, 126, &v225, 1, &v227, 1, 0);
  uint64_t v154 = v153;
  uint64_t v155 = *a1;
  *(void *)&long long v221 = 9;
  DWORD2(v221) = 0;
  *(void *)&long long v227 = v139;
  *((void *)&v227 + 1) = v141;
  int v228 = 1;
  uint64_t v223 = 257;
  int v224 = 0;
  *(void *)&long long v225 = sub_1CC7362A8(v155, (unint64_t *)&v223, 5uLL);
  *((void *)&v225 + 1) = v156;
  int v226 = 1;
  uint64_t v157 = sub_1CC73933C(v155, 38, (uint64_t)&v221, &v227, &v225);
  uint64_t v158 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v157;
  *((void *)&v227 + 1) = v159;
  int v228 = 1;
  uint64_t v160 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v158 + 32))(v158, 126, &v225, 1, &v227, 1, 0);
  uint64_t v161 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v152;
  *((void *)&v227 + 1) = v154;
  int v228 = 1;
  uint64_t v229 = v160;
  uint64_t v230 = v162;
  int v231 = 1;
  uint64_t v163 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v161 + 32))(v161, 66, &v225, 1, &v227, 2, 0);
  uint64_t v164 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v211;
  *((void *)&v227 + 1) = v146;
  int v228 = 1;
  uint64_t v229 = v163;
  uint64_t v230 = v165;
  int v231 = 1;
  uint64_t v166 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v164 + 32))(v164, 45, &v225, 1, &v227, 2, 0);
  uint64_t v168 = v167;
  uint64_t v169 = *a1;
  *(void *)&long long v221 = 9;
  DWORD2(v221) = 0;
  *(void *)&long long v227 = v218;
  *((void *)&v227 + 1) = v217;
  int v228 = 1;
  uint64_t v223 = 257;
  int v224 = 0;
  *(void *)&long long v225 = sub_1CC7362A8(v169, (unint64_t *)&v223, 0x1EuLL);
  *((void *)&v225 + 1) = v170;
  int v226 = 1;
  uint64_t v171 = sub_1CC73933C(v169, 38, (uint64_t)&v221, &v227, &v225);
  uint64_t v172 = *a1;
  uint64_t v223 = 257;
  int v224 = 0;
  *(void *)&long long v227 = v171;
  *((void *)&v227 + 1) = v173;
  int v228 = 1;
  unint64_t v219 = 257;
  int v220 = 0;
  *(void *)&long long v225 = sub_1CC7362A8(v172, &v219, 0x7C00uLL);
  *((void *)&v225 + 1) = v174;
  int v226 = 1;
  *(void *)&long long v221 = v166;
  *((void *)&v221 + 1) = v168;
  int v222 = 1;
  uint64_t v175 = sub_1CC739494(v172, &v223, &v227, &v225, &v221, 0);
  uint64_t v177 = v176;
  uint64_t v178 = *a1;
  *(void *)&long long v221 = 9;
  DWORD2(v221) = 0;
  *(void *)&long long v227 = v218;
  *((void *)&v227 + 1) = v217;
  int v228 = 1;
  uint64_t v223 = 257;
  int v224 = 0;
  *(void *)&long long v225 = sub_1CC7362A8(v178, (unint64_t *)&v223, 0x40FuLL);
  *((void *)&v225 + 1) = v179;
  int v226 = 1;
  uint64_t v180 = sub_1CC73933C(v178, 32, (uint64_t)&v221, &v227, &v225);
  uint64_t v181 = *a1;
  uint64_t v223 = 257;
  int v224 = 0;
  *(void *)&long long v227 = v180;
  *((void *)&v227 + 1) = v182;
  int v228 = 1;
  *(void *)&long long v225 = v213;
  *((void *)&v225 + 1) = v212;
  int v226 = 1;
  *(void *)&long long v221 = v175;
  *((void *)&v221 + 1) = v177;
  int v222 = 1;
  uint64_t v183 = sub_1CC739494(v181, &v223, &v227, &v225, &v221, 0);
  uint64_t v185 = v184;
  uint64_t v186 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v187 = sub_1CC7362A8(v186, (unint64_t *)&v221, 0x10uLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  LODWORD(v227) = v214;
  int v228 = 0;
  uint64_t v229 = v187;
  uint64_t v230 = v188;
  int v231 = 1;
  uint64_t v189 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v186 + 32))(v186, 128, &v225, 1, &v227, 2, 0);
  uint64_t v191 = v190;
  uint64_t v192 = *a1;
  *(void *)&long long v221 = 257;
  DWORD2(v221) = 0;
  uint64_t v193 = sub_1CC7362A8(v192, (unint64_t *)&v221, 0x8000uLL);
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v189;
  *((void *)&v227 + 1) = v191;
  int v228 = 1;
  uint64_t v229 = v193;
  uint64_t v230 = v194;
  int v231 = 1;
  uint64_t v195 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v192 + 32))(v192, 65, &v225, 1, &v227, 2, 0);
  uint64_t v196 = *a1;
  *(void *)&long long v225 = 257;
  DWORD2(v225) = 0;
  *(void *)&long long v227 = v195;
  *((void *)&v227 + 1) = v197;
  int v228 = 1;
  uint64_t v229 = v183;
  uint64_t v230 = v185;
  int v231 = 1;
  uint64_t v198 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v196 + 32))(v196, 66, &v225, 1, &v227, 2, 0);
  uint64_t v199 = *a1;
  LODWORD(v225) = v215;
  DWORD2(v225) = 1;
  *(void *)&long long v227 = v198;
  *((void *)&v227 + 1) = v200;
  int v228 = 1;
  (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v199 + 32))(v199, 119, &v225, 1, &v227, 1, 0);
  llvm::MachineInstr::eraseFromParent(a2);
  return v15;
}

uint64_t sub_1CD627FF0(uint64_t a1, llvm::MachineInstr *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v12 = *(llvm::MachineFunction **)(*((void *)a2 + 3) + 32);
  uint64_t v13 = (*(uint64_t (**)(void *))(**((void **)v12 + 2) + 120))(*((void **)v12 + 2));
  uint64_t DataLayout = llvm::MachineFunction::getDataLayout(v12);
  uint64_t v15 = *(llvm::IntegerType ****)v12;
  uint64_t v16 = **(llvm::IntegerType ****)v12;
  uint64_t v94 = (llvm::DataLayout *)DataLayout;
  uint64_t v96 = (uint64_t)v12;
  uint64_t v17 = (void *)*((void *)v12 + 7);
  unsigned int v18 = *(_DWORD *)(*((void *)v12 + 1) + 484);
  BOOL v19 = v18 > 0x21;
  uint64_t v20 = (1 << v18) & 0x3F0000888;
  BOOL v21 = v19 || v20 == 0;
  if (v21 && (uint64_t v87 = v15[14]) != 0 && (*((unsigned char *)v87 + 17) & 4) != 0)
  {
    BOOL v23 = 1;
  }
  else
  {
    uint64_t v22 = v15[14];
    if (v22) {
      BOOL v23 = *((char *)v22 + 13) < 0;
    }
    else {
      BOOL v23 = 0;
    }
  }
  uint64_t v89 = *v16;
  uint64_t v92 = v13;
  uint64_t v24 = (unsigned int *)(v13 + 184252);
  uint64_t v25 = sub_1CC73D838(70, a3, *(void *)(a1 + 16));
  uint64_t v26 = v25;
  unsigned int v97 = a3;
  uint64_t v88 = (uint64_t)v17;
  if (v25)
  {
    int v27 = *(_DWORD *)(*(void *)(v25 + 32) + 48);
    BOOL v28 = v27 < 0 && v27 >= -*((_DWORD *)v17 + 8);
    int v29 = !v28;
  }
  else
  {
    int v29 = 0;
  }
  uint64_t v30 = v24 + 1;
  if (!v23) {
    uint64_t v30 = v24;
  }
  uint64_t v31 = *v30;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  uint64_t v32 = *((void *)a2 + 6);
  if ((v32 & 7) != 0)
  {
    unint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
    *((void *)a2 + 6) = v32 & 0xFFFFFFFFFFFFFFF8;
  }
  long long v34 = *(_OWORD *)v33;
  uint64_t v113 = *(void *)(v33 + 16);
  long long v112 = v34;
  uint64_t v91 = a4;
  sub_1CC73C44C(a4, *(void *)(a1 + 16), 1, (uint64_t)&v109);
  if (v111
    && ((unsigned int v35 = v110, v110 < 0x41)
     || v35 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v109) < 0x41))
  {
    uint64_t v36 = v109;
    if (v35 < 0x41) {
      uint64_t v36 = &v109;
    }
    BOOL v21 = *v36 == 0;
    uint64_t v37 = 0x1000000;
    if (v21) {
      uint64_t v37 = 0x101000000;
    }
  }
  else
  {
    uint64_t v37 = 0x1000000;
  }
  v107[0] = a5;
  v107[1] = v29 & 0xFFFF00FF | ((unint64_t)a6 << 8) | v37 | 0x10000;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace((llvm::MachinePointerInfo *)&v112);
  *(void *)&long long v102 = *(void *)(*(void *)v96 + 112);
  if (sub_1CC72C6DC(&v114, v31, (unsigned __int8 *)v107, AddrSpace, (uint64_t)&v102, v92))
  {
    uint64_t v93 = v33;
    uint64_t v90 = a2;
    uint64_t v39 = (unint64_t *)v114;
    if (v29)
    {
      sub_1CC72CB18(*(void *)v114, v89);
      ABITypeAliguint64_t n = llvm::DataLayout::getABITypeAlign(v94, v40);
      if (a6 < ABITypeAlign)
      {
        int v42 = *(_DWORD *)(*(void *)(v26 + 32) + 48);
        uint64_t v43 = *(void *)(v88 + 8) + 40 * (*(_DWORD *)(v88 + 32) + v42);
        unsigned int v45 = *(unsigned __int8 *)(v43 + 16);
        uint64_t v44 = (unsigned __int8 *)(v43 + 16);
        if (v45 < ABITypeAlign)
        {
          *uint64_t v44 = ABITypeAlign;
          if (!*(unsigned char *)(*(void *)(v88 + 8) + 40 * (*(_DWORD *)(v88 + 32) + v42) + 20)) {
            llvm::MachineFrameInfo::ensureMaxAlignment(v88, ABITypeAlign);
          }
        }
      }
    }
    sub_1CBA05F5C((uint64_t)v107, (uint64_t)v90);
    unint64_t v46 = *v39;
    unint64_t v106 = *v39;
    uint64_t v47 = v115;
    unint64_t v48 = v115 - v39;
    if ((unint64_t)((char *)v115 - (char *)v39) >= 9)
    {
      unsigned int v49 = 2;
      uint64_t v50 = 1;
      do
      {
        uint64_t v51 = &v39[v50];
        unint64_t v53 = sub_1CB8F1DC4(v51);
        if (v52 == 1) {
        unint64_t v55 = sub_1CB8F1DC4(&v106);
        }
        if (v54 == 1) {
        if (v53 > v55)
        }
          unint64_t v106 = *v51;
        uint64_t v50 = v49;
        BOOL v19 = v48 > v49++;
      }
      while (v19);
      unint64_t v46 = v106;
    }
    int v95 = sub_1CC72CC0C(v91, v46, (uint64_t)v107);
    if (v95)
    {
      if ((v97 & 0x80000000) != 0
        && (uint64_t v56 = *(void *)(a1 + 16), (v97 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v56 + 432)))
      {
        uint64_t v57 = *(void *)(*(void *)(v56 + 424) + 8 * (v97 & 0x7FFFFFFF));
      }
      else
      {
        uint64_t v57 = 0;
      }
      uint64_t v105 = v57;
      if (v47 == v39)
      {
LABEL_86:
        llvm::MachineInstr::eraseFromParent(v90);
        uint64_t v58 = 1;
      }
      else
      {
        uint64_t v60 = 0;
        int v61 = 0;
        unsigned int v62 = 1;
        while (1)
        {
          unint64_t v104 = v39[v60];
          uint64_t v64 = sub_1CB8F1DC4(&v104);
          if (v63 == 1) {
          unint64_t v65 = (unint64_t)(v64 + 7) >> 3;
          }
          if (v65 >= a5) {
            int v66 = v65 - a5;
          }
          else {
            int v66 = 0;
          }
          unint64_t v68 = sub_1CB8F1DC4(&v104);
          if (v67 == 1) {
          unint64_t v70 = sub_1CB8F1DC4(&v106);
          }
          if (v69 == 1) {
          int v71 = v95;
          }
          if (v68 < v70)
          {
            if ((unsigned __int8 MVTForLLT = llvm::getMVTForLLT(v104),
                  unsigned __int8 v83 = llvm::getMVTForLLT(v106),
                  unint64_t v84 = v104,
                  (v106 & 0xFFFFFFFFFFFFFFF9) != 0)
              && (v106 & 4) != 0
              || (v104 & 0xFFFFFFFFFFFFFFF9) != 0 && (v104 & 4) != 0
              || (v85 = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)v92 + 1160))(v92, v83, 0, MVTForLLT, 0), unint64_t v84 = v104, !v85))
            {
              int v71 = sub_1CC72CC0C(v91, v84, (uint64_t)v107);
            }
            else
            {
              *(void *)&long long v98 = v104;
              DWORD2(v98) = 0;
              LODWORD(v102) = v95;
              int v103 = 0;
              (*(void (**)(void *, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(v107[0] + 32))(v107, 119, &v98, 1, &v102, 1, 0);
              int v71 = *(_DWORD *)(*(void *)(v86 + 32) + 4);
            }
            if (!v71) {
              break;
            }
          }
          unint64_t v72 = (v61 - v66);
          MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v96, v93, v72, v104);
          unsigned int v74 = v97;
          if (v61 != v66)
          {
            unsigned int v76 = sub_1CB8F1DC4((unint64_t *)&v105);
            if (v75 == 1) {
            *(void *)&long long v102 = (8 * v76) | 1;
            }
            DWORD2(v102) = 0;
            uint64_t v77 = sub_1CC7362A8((uint64_t)v107, (unint64_t *)&v102, v72);
            uint64_t v100 = v105;
            int v101 = 0;
            LODWORD(v102) = v97;
            int v103 = 0;
            *(void *)&long long v98 = v77;
            *((void *)&v98 + 1) = v78;
            int v99 = 1;
            sub_1CC735F44((uint64_t)v107, &v100, &v102, &v98);
            unsigned int v74 = *(_DWORD *)(*(void *)(v79 + 32) + 4);
          }
          LODWORD(v102) = v71;
          int v103 = 0;
          LODWORD(v98) = v74;
          int v99 = 0;
          sub_1CC737D1C(v107, (int *)&v102, (int *)&v98, MachineMemOperand);
          uint64_t v81 = sub_1CB8F1DC4(&v104);
          if (v80 == 1) {
          LODWORD(a5) = a5 - v65;
          }
          int v61 = v72 + ((unint64_t)(v81 + 7) >> 3);
          uint64_t v60 = v62;
          BOOL v19 = v48 > v62++;
          if (!v19) {
            goto LABEL_86;
          }
        }
        uint64_t v58 = 2;
      }
    }
    else
    {
      uint64_t v58 = 2;
    }
    v107[0] = &unk_1F261CD58;
    if (v108) {
      llvm::MetadataTracking::untrack((uint64_t)&v108, v108);
    }
  }
  else
  {
    uint64_t v58 = 2;
  }
  if (v111 && v110 >= 0x41 && v109) {
    MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
  }
  if (v114) {
    operator delete(v114);
  }
  return v58;
}

uint64_t sub_1CD62871C(uint64_t a1, unint64_t *a2, unsigned int a3, int a4, unint64_t a5, uint64_t a6, unsigned __int8 a7, unsigned __int8 a8, char a9)
{
  uint64_t v15 = *(llvm::MachineFunction **)(a2[3] + 32);
  uint64_t v16 = (*(uint64_t (**)(void))(**((void **)v15 + 2) + 120))(*((void *)v15 + 2));
  uint64_t DataLayout = llvm::MachineFunction::getDataLayout(v15);
  uint64_t v78 = ***(llvm::IntegerType ****)v15;
  uint64_t v80 = (unsigned __int8 *)DataLayout;
  unsigned int v18 = (void **)*((void *)v15 + 7);
  if (a8 >= a7) {
    uint64_t v19 = a7;
  }
  else {
    uint64_t v19 = a8;
  }
  uint64_t v82 = a1;
  uint64_t v20 = sub_1CC73D838(70, a3, *(void *)(a1 + 16));
  uint64_t v74 = v20;
  uint64_t v75 = (uint64_t)v18;
  if (v20)
  {
    int v21 = *(_DWORD *)(*(void *)(v20 + 32) + 48);
    BOOL v22 = (v21 & 0x80000000) == 0 || v21 < -*((_DWORD *)v18 + 8);
  }
  else
  {
    BOOL v22 = 0;
  }
  BOOL v23 = a2 + 6;
  uint64_t v24 = a2[6];
  uint64_t v100 = 0;
  int v101 = 0;
  uint64_t v102 = 0;
  if ((v24 & 7) != 0)
  {
    uint64_t v84 = *(void *)((v24 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
    *BOOL v23 = v24;
    uint64_t v84 = v24;
  }
  if ((v24 & 3) != 0) {
    BOOL v23 = (unint64_t *)((v24 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else {
    *BOOL v23 = v24 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = v23[1];
  long long v26 = *(_OWORD *)v84;
  uint64_t v99 = *(void *)(v84 + 16);
  long long v98 = v26;
  long long v27 = *(_OWORD *)v25;
  uint64_t v83 = v25;
  uint64_t v97 = *(void *)(v25 + 16);
  long long v96 = v27;
  uint64_t v28 = 0x10000;
  if (a9) {
    uint64_t v28 = 0;
  }
  v94[0] = a5;
  v94[1] = v28 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)a8 << 48) | (v19 << 8) | v22;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace((llvm::MachinePointerInfo *)&v98);
  llvm::MachinePointerInfo::getAddrSpace((llvm::MachinePointerInfo *)&v96);
  *(void *)&long long v88 = *(void *)(*(void *)v15 + 112);
  int v30 = sub_1CC72C6DC(&v100, a6, (unsigned __int8 *)v94, AddrSpace, (uint64_t)&v88, v16);
  uint64_t v31 = v100;
  if (v30)
  {
    if (v22)
    {
      sub_1CC72CB18(*(void *)v100, v78);
      ABITypeAliguint64_t n = llvm::DataLayout::getABITypeAlign((llvm::DataLayout *)v80, v32);
      uint64_t v34 = (*(uint64_t (**)(void))(**((void **)v15 + 2) + 176))(*((void *)v15 + 2));
      if ((!(*(unsigned int (**)(void))(*(void *)v34 + 440))()
         || ((*(uint64_t (**)(uint64_t, llvm::MachineFunction *))(*(void *)v34 + 432))(v34, v15) & 1) == 0)
        && v19 < ABITypeAlign)
      {
        do
        {
          if (!v80[9]) {
            break;
          }
          if (v80[8] >= ABITypeAlign) {
            break;
          }
          ABITypeAliguint64_t n = 63 - __clz((unint64_t)(1 << ABITypeAlign) >> 1);
        }
        while (v19 < ABITypeAlign);
      }
      if (v19 < ABITypeAlign)
      {
        int v35 = *(_DWORD *)(*(void *)(v74 + 32) + 48);
        uint64_t v36 = *(void *)(v75 + 8) + 40 * (*(_DWORD *)(v75 + 32) + v35);
        unsigned int v38 = *(unsigned __int8 *)(v36 + 16);
        uint64_t v37 = (unsigned __int8 *)(v36 + 16);
        if (v38 < ABITypeAlign)
        {
          *uint64_t v37 = ABITypeAlign;
          if (!*(unsigned char *)(*(void *)(v75 + 8) + 40 * (*(_DWORD *)(v75 + 32) + v35) + 20)) {
            llvm::MachineFrameInfo::ensureMaxAlignment(v75, ABITypeAlign);
          }
        }
      }
    }
    sub_1CBA05F5C((uint64_t)v94, (uint64_t)a2);
    uint64_t v39 = (unint64_t *)v101;
    unsigned int v76 = v31;
    if (v31 != v101)
    {
      unsigned int v40 = 0;
      unint64_t v79 = a3 & 0x7FFFFFFF;
      unint64_t v81 = a4 & 0x7FFFFFFF;
      uint64_t v41 = (unint64_t *)v31;
      do
      {
        unint64_t v93 = *v41;
        uint64_t v43 = sub_1CB8F1DC4(&v93);
        if (v42 == 1) {
        if ((unint64_t)(v43 + 7) >> 3 > a5)
        }
        {
          uint64_t v45 = sub_1CB8F1DC4(&v93);
          if (v44 == 1) {
          v40 += a5 - ((unint64_t)(v45 + 7) >> 3);
          }
        }
        uint64_t v47 = sub_1CB8F1DC4(&v93);
        if (v46 == 1) {
        unint64_t v48 = v40;
        }
        MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v15, v83, v40, (8 * v47 + 56) & 0x7FFFFFFC0 | 1);
        uint64_t v51 = sub_1CB8F1DC4(&v93);
        if (v50 == 1) {
        uint64_t v52 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v15, v84, v48, (8 * v51 + 56) & 0x7FFFFFFC0 | 1);
        }
        if (v48)
        {
          if (a4 < 0 && (uint64_t v53 = *(void *)(v82 + 16), v81 < *(unsigned int *)(v53 + 432))) {
            uint64_t v54 = *(void *)(*(void *)(v53 + 424) + 8 * v81);
          }
          else {
            uint64_t v54 = 0;
          }
          uint64_t v92 = v54;
          unsigned int v56 = sub_1CB8F1DC4((unint64_t *)&v92);
          if (v55 == 1) {
          *(void *)&long long v88 = (8 * v56) | 1;
          }
          DWORD2(v88) = 0;
          sub_1CC7362A8((uint64_t)v94, (unint64_t *)&v88, v48);
          int v58 = *(_DWORD *)(*(void *)(v57 + 32) + 4);
          uint64_t v90 = v92;
          int v91 = 0;
          LODWORD(v88) = a4;
          int v89 = 0;
          LODWORD(v86) = v58;
          int v87 = 0;
          sub_1CC735F44((uint64_t)v94, &v90, &v88, &v86);
          int v60 = *(_DWORD *)(*(void *)(v59 + 32) + 4);
        }
        else
        {
          int v58 = 0;
          int v60 = a4;
        }
        *(void *)&long long v86 = v93;
        DWORD2(v86) = 0;
        LODWORD(v88) = v60;
        int v89 = 0;
        int v61 = sub_1CC737934(v94, 0x5Au, (int *)&v86, (int *)&v88, MachineMemOperand);
        uint64_t v63 = v62;
        unsigned int v64 = a3;
        if (v48)
        {
          if ((a3 & 0x80000000) != 0 && (uint64_t v65 = *(void *)(v82 + 16), v79 < *(unsigned int *)(v65 + 432))) {
            uint64_t v66 = *(void *)(*(void *)(v65 + 424) + 8 * v79);
          }
          else {
            uint64_t v66 = 0;
          }
          uint64_t v90 = v66;
          int v91 = 0;
          LODWORD(v88) = a3;
          int v89 = 0;
          LODWORD(v86) = v58;
          int v87 = 0;
          sub_1CC735F44((uint64_t)v94, &v90, &v88, &v86);
          unsigned int v64 = *(_DWORD *)(*(void *)(v67 + 32) + 4);
        }
        *(void *)&long long v88 = v61;
        *((void *)&v88 + 1) = v63;
        int v89 = 1;
        LODWORD(v86) = v64;
        int v87 = 0;
        sub_1CC737D1C(v94, (int *)&v88, (int *)&v86, v52);
        uint64_t v69 = sub_1CB8F1DC4(&v93);
        if (v68 == 1) {
        uint64_t v71 = sub_1CB8F1DC4(&v93);
        }
        if (v70 == 1) {
        unsigned int v40 = v48 + ((unint64_t)(v69 + 7) >> 3);
        }
        a5 = a5 - ((unint64_t)(v71 + 7) >> 3);
        ++v41;
      }
      while (v41 != v39);
    }
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    v94[0] = &unk_1F261CD58;
    if (v95) {
      llvm::MetadataTracking::untrack((uint64_t)&v95, v95);
    }
    uint64_t v72 = 1;
    uint64_t v31 = v76;
  }
  else
  {
    uint64_t v72 = 2;
  }
  if (v31) {
    operator delete(v31);
  }
  return v72;
}

uint64_t sub_1CD628E0C(uint64_t a1, unint64_t *a2, unsigned int a3, int a4, _DWORD *a5, unsigned __int8 a6, unsigned __int8 a7)
{
  v109[8] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(llvm::MachineFunction **)(a2[3] + 32);
  uint64_t v13 = (*(uint64_t (**)(void))(**((void **)v12 + 2) + 120))(*((void *)v12 + 2));
  uint64_t DataLayout = (unsigned __int8 *)llvm::MachineFunction::getDataLayout(v12);
  uint64_t v14 = *(llvm::IntegerType ****)v12;
  uint64_t v15 = (void **)*((void *)v12 + 7);
  unsigned int v16 = *(_DWORD *)(*((void *)v12 + 1) + 484);
  BOOL v17 = v16 > 0x21;
  uint64_t v18 = (1 << v16) & 0x3F0000888;
  BOOL v19 = v17 || v18 == 0;
  long long v86 = a5;
  if (v19 && (uint64_t v80 = v14[14]) != 0 && (*((unsigned char *)v80 + 17) & 4) != 0)
  {
    BOOL v21 = 1;
  }
  else
  {
    uint64_t v20 = v14[14];
    if (v20) {
      BOOL v21 = *((char *)v20 + 13) < 0;
    }
    else {
      BOOL v21 = 0;
    }
  }
  uint64_t v83 = ***(llvm::IntegerType ****)v12;
  if (a7 >= a6) {
    uint64_t v22 = a6;
  }
  else {
    uint64_t v22 = a7;
  }
  uint64_t v23 = sub_1CC73D838(70, a3, *(void *)(a1 + 16));
  uint64_t v81 = v23;
  uint64_t v82 = (uint64_t)v15;
  if (v23)
  {
    int v24 = *(_DWORD *)(*(void *)(v23 + 32) + 48);
    BOOL v25 = (v24 & 0x80000000) == 0 || v24 < -*((_DWORD *)v15 + 8);
  }
  else
  {
    BOOL v25 = 0;
  }
  long long v26 = (unsigned int *)(v13 + 184284);
  if (!v21) {
    long long v26 = (unsigned int *)(v13 + 184280);
  }
  uint64_t v27 = *v26;
  uint64_t v28 = a2 + 6;
  uint64_t v29 = a2[6];
  unint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  if ((v29 & 7) != 0)
  {
    uint64_t v89 = *(void *)((v29 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
    *uint64_t v28 = v29;
    uint64_t v89 = v29;
  }
  if ((v29 & 3) != 0) {
    uint64_t v28 = (unint64_t *)((v29 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else {
    *uint64_t v28 = v29 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = v28[1];
  long long v31 = *(_OWORD *)v89;
  uint64_t v103 = *(void *)(v89 + 16);
  long long v102 = v31;
  long long v32 = *(_OWORD *)v30;
  uint64_t v101 = *(void *)(v30 + 16);
  long long v100 = v32;
  uint64_t v107 = v86;
  unint64_t v108 = ((unint64_t)a7 << 48) | (v22 << 8) | v25;
  unsigned int AddrSpace = llvm::MachinePointerInfo::getAddrSpace((llvm::MachinePointerInfo *)&v102);
  llvm::MachinePointerInfo::getAddrSpace((llvm::MachinePointerInfo *)&v100);
  v98[0] = *(void *)(*(void *)v12 + 112);
  int v34 = sub_1CC72C6DC(&v104, v27, (unsigned __int8 *)&v107, AddrSpace, (uint64_t)v98, v13);
  int v35 = v104;
  if (v34)
  {
    if (v25)
    {
      sub_1CC72CB18(*(void *)v104, v83);
      ABITypeAliguint64_t n = llvm::DataLayout::getABITypeAlign((llvm::DataLayout *)DataLayout, v36);
      uint64_t v38 = (*(uint64_t (**)(void))(**((void **)v12 + 2) + 176))(*((void *)v12 + 2));
      if ((!(*(unsigned int (**)(void))(*(void *)v38 + 440))()
         || ((*(uint64_t (**)(uint64_t, llvm::MachineFunction *))(*(void *)v38 + 432))(v38, v12) & 1) == 0)
        && v22 < ABITypeAlign)
      {
        do
        {
          if (!DataLayout[9]) {
            break;
          }
          if (DataLayout[8] >= ABITypeAlign) {
            break;
          }
          ABITypeAliguint64_t n = 63 - __clz((unint64_t)(1 << ABITypeAlign) >> 1);
        }
        while (v22 < ABITypeAlign);
      }
      if (v22 < ABITypeAlign)
      {
        int v39 = *(_DWORD *)(*(void *)(v81 + 32) + 48);
        uint64_t v40 = *(void *)(v82 + 8) + 40 * (*(_DWORD *)(v82 + 32) + v39);
        unsigned int v42 = *(unsigned __int8 *)(v40 + 16);
        uint64_t v41 = (unsigned __int8 *)(v40 + 16);
        if (v42 < ABITypeAlign)
        {
          *uint64_t v41 = ABITypeAlign;
          if (!*(unsigned char *)(*(void *)(v82 + 8) + 40 * (*(_DWORD *)(v82 + 32) + v39) + 20)) {
            llvm::MachineFrameInfo::ensureMaxAlignment(v82, ABITypeAlign);
          }
        }
      }
    }
    sub_1CBA05F5C((uint64_t)v98, (uint64_t)a2);
    uint64_t v107 = v109;
    unint64_t v108 = 0x1000000000;
    uint64_t v43 = (unint64_t *)v105;
    if (v35 != v105)
    {
      unsigned int v44 = 0;
      unint64_t v87 = a4 & 0x7FFFFFFF;
      uint64_t v45 = (unint64_t *)v35;
      do
      {
        unint64_t v97 = *v45;
        uint64_t v47 = sub_1CB8F1DC4(&v97);
        if (v46 == 1) {
        MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v12, v30, v44, (8 * v47 + 56) & 0x7FFFFFFC0 | 1);
        }
        int v49 = a4;
        if (v44)
        {
          if (a4 < 0 && (uint64_t v50 = *(void *)(a1 + 16), v87 < *(unsigned int *)(v50 + 432))) {
            uint64_t v51 = *(void *)(*(void *)(v50 + 424) + 8 * v87);
          }
          else {
            uint64_t v51 = 0;
          }
          uint64_t v96 = v51;
          unsigned int v53 = sub_1CB8F1DC4((unint64_t *)&v96);
          if (v52 == 1) {
          *(void *)&long long v92 = (8 * v53) | 1;
          }
          DWORD2(v92) = 0;
          uint64_t v54 = sub_1CC7362A8((uint64_t)v98, (unint64_t *)&v92, v44);
          uint64_t v94 = v96;
          int v95 = 0;
          LODWORD(v92) = a4;
          int v93 = 0;
          *(void *)&long long v90 = v54;
          *((void *)&v90 + 1) = v55;
          int v91 = 1;
          sub_1CC735F44((uint64_t)v98, &v94, &v92, &v90);
          int v49 = *(_DWORD *)(*(void *)(v56 + 32) + 4);
        }
        *(void *)&long long v90 = v97;
        DWORD2(v90) = 0;
        LODWORD(v92) = v49;
        int v93 = 0;
        sub_1CC737934(v98, 0x5Au, (int *)&v90, (int *)&v92, MachineMemOperand);
        if (v108 >= (unint64_t)HIDWORD(v108)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v107[v108] = *(_DWORD *)(*(void *)(v57 + 32) + 4);
        LODWORD(v108) = v108 + 1;
        uint64_t v59 = sub_1CB8F1DC4(&v97);
        if (v58 == 1) {
        v44 += (unint64_t)(v59 + 7) >> 3;
        }
        ++v45;
      }
      while (v45 != v43);
      uint64_t v60 = 0;
      unsigned int v61 = 0;
      unint64_t v62 = ((char *)v43 - v35) >> 3;
      unint64_t v63 = a3 & 0x7FFFFFFF;
      unsigned int v64 = 1;
      do
      {
        unint64_t v97 = *(void *)&v35[8 * v60];
        uint64_t v66 = sub_1CB8F1DC4(&v97);
        if (v65 == 1) {
        uint64_t v67 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v12, v89, v61, (8 * v66 + 56) & 0x7FFFFFFC0 | 1);
        }
        unsigned int v68 = a3;
        if (v61)
        {
          if ((a3 & 0x80000000) != 0 && (uint64_t v69 = *(void *)(a1 + 16), v63 < *(unsigned int *)(v69 + 432))) {
            uint64_t v70 = *(void *)(*(void *)(v69 + 424) + 8 * v63);
          }
          else {
            uint64_t v70 = 0;
          }
          uint64_t v96 = v70;
          unsigned int v72 = sub_1CB8F1DC4((unint64_t *)&v96);
          if (v71 == 1) {
          *(void *)&long long v92 = (8 * v72) | 1;
          }
          DWORD2(v92) = 0;
          uint64_t v73 = sub_1CC7362A8((uint64_t)v98, (unint64_t *)&v92, v61);
          uint64_t v94 = v96;
          int v95 = 0;
          LODWORD(v92) = a3;
          int v93 = 0;
          *(void *)&long long v90 = v73;
          *((void *)&v90 + 1) = v74;
          int v91 = 1;
          sub_1CC735F44((uint64_t)v98, &v94, &v92, &v90);
          unsigned int v68 = *(_DWORD *)(*(void *)(v75 + 32) + 4);
        }
        LODWORD(v92) = v107[v60];
        int v93 = 0;
        LODWORD(v90) = v68;
        int v91 = 0;
        sub_1CC737D1C(v98, (int *)&v92, (int *)&v90, v67);
        uint64_t v77 = sub_1CB8F1DC4(&v97);
        if (v76 == 1) {
        v61 += (unint64_t)(v77 + 7) >> 3;
        }
        uint64_t v60 = v64;
        BOOL v17 = v62 > v64++;
      }
      while (v17);
    }
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    if (v107 != (_DWORD *)v109) {
      free(v107);
    }
    v98[0] = &unk_1F261CD58;
    if (v99) {
      llvm::MetadataTracking::untrack((uint64_t)&v99, v99);
    }
    uint64_t v78 = 1;
  }
  else
  {
    uint64_t v78 = 2;
  }
  if (v35) {
    operator delete(v35);
  }
  return v78;
}

void *sub_1CD6295E4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= a3)
  {
    sub_1CBAB8F38((void *)a1, 0, a3);
    a3 = *(_DWORD *)(a1 + 8);
  }

  return sub_1CBAB8F38((void *)a1, a2, a3);
}

uint64_t sub_1CD629638(void *a1)
{
  if (*a1 == a1[2]) {
    return 0;
  }
  else {
    return *a1;
  }
}

uint64_t sub_1CD62964C(uint64_t a1)
{
  if (*(void *)(a1 + 8) == *(void *)(a1 + 24)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 8);
  }
}

void sub_1CD629660(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(a1 + 12) < a2)
  {
    sub_1CD6297A4();
  }
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= a2) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = *(unsigned int *)(a1 + 8);
  }
  if (v7)
  {
    uint64_t v8 = *(void *)a1;
    do
    {
      sub_1CB927A18(v8, a3);
      v8 += 24;
      --v7;
    }
    while (v7);
    unint64_t v6 = *(unsigned int *)(a1 + 8);
  }
  unint64_t v9 = v6 - a2;
  if (v6 >= a2)
  {
    if (v6 > a2)
    {
      uint64_t v12 = 3 * v6;
      uint64_t v13 = *(void *)a1 + 8 * v12 - 8;
      uint64_t v14 = 24 * a2 - 8 * v12;
      do
      {
        uint64_t v15 = *(void **)(v13 - 16);
        if ((void *)v13 != v15) {
          free(v15);
        }
        v13 -= 24;
        v14 += 24;
      }
      while (v14);
    }
  }
  else
  {
    int v10 = (void *)(*(void *)a1 + 24 * v6);
    do
    {
      void *v10 = v10 + 2;
      v10[1] = 0x200000000;
      if (*(_DWORD *)(a3 + 8)) {
        sub_1CB927A18((uint64_t)v10, a3);
      }
      v10 += 3;
    }
    while (!__CFADD__(v9++, 1));
  }
  *(_DWORD *)(a1 + 8) = a2;
}

void sub_1CD6297A4()
{
}

char **sub_1CD629894(char **a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    do
    {
      int v5 = *(char **)&v2[v4 - 24];
      if (&v2[v4 - 8] != v5) {
        free(v5);
      }
      v4 -= 24;
    }
    while (v4);
    unint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD62990C(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v2) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_1CD62996C(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    sub_1CD629AC0();
  }
  unint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = *(unsigned int *)(result + 8);
  }
  if (v4)
  {
    uint64_t v15 = a3;
    unint64_t v19 = a2;
    uint64_t v9 = result;
    uint64_t v10 = *(void *)result;
    do
    {
      uint64_t v10 = sub_1CD629BB0(v10, v15) + 144;
      --v4;
    }
    while (v4);
    uint64_t result = v9;
    unint64_t v3 = *(unsigned int *)(v9 + 8);
    a2 = v19;
    a3 = v15;
  }
  unint64_t v5 = v3 - a2;
  if (v3 >= a2)
  {
    if (v3 > a2)
    {
      uint64_t v11 = 9 * v3;
      uint64_t v12 = (void **)(*(void *)result + 16 * v11 - 144);
      uint64_t v13 = 144 * a2 - 16 * v11;
      uint64_t v17 = result;
      int v20 = a2;
      do
      {
        if (v12 + 2 != *v12) {
          free(*v12);
        }
        v12 -= 18;
        v13 += 144;
        uint64_t result = v17;
        LODWORD(a2) = v20;
      }
      while (v13);
    }
  }
  else
  {
    unint64_t v6 = (void *)(*(void *)result + 144 * v3);
    uint64_t v7 = 0x800000000;
    do
    {
      *unint64_t v6 = v6 + 2;
      v6[1] = v7;
      if (*(_DWORD *)(a3 + 8))
      {
        uint64_t v18 = result;
        unint64_t v21 = a2;
        uint64_t v16 = a3;
        uint64_t v14 = v7;
        sub_1CD629BB0((uint64_t)v6, a3);
        uint64_t v7 = v14;
        a3 = v16;
        uint64_t result = v18;
        a2 = v21;
      }
      v6 += 18;
    }
    while (!__CFADD__(v5++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_1CD629AC0()
{
}

uint64_t sub_1CD629BB0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 16 * v4 - 4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 16 * v5 - 4);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 16 * v5), (const void *)(*(void *)a2 + 16 * v5), *(void *)a2 + 16 * v6 - (*(void *)a2 + 16 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

char **sub_1CD629C84(char **a1)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 144 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 144];
      if (&v2[v4 - 128] != v5) {
        free(v5);
      }
      v4 -= 144;
    }
    while (v4);
    unsigned int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD629D00(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    sub_1CD629E50();
  }
  unint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = *(unsigned int *)(result + 8);
  }
  if (v4)
  {
    uint64_t v14 = a3;
    uint64_t v16 = result;
    unint64_t v19 = a2;
    uint64_t v9 = *(void *)result;
    do
    {
      sub_1CB927A18(v9, v14);
      v9 += 48;
      --v4;
    }
    while (v4);
    uint64_t result = v16;
    a2 = v19;
    unint64_t v3 = *(unsigned int *)(v16 + 8);
    a3 = v14;
  }
  unint64_t v5 = v3 - a2;
  if (v3 >= a2)
  {
    if (v3 > a2)
    {
      uint64_t v10 = 3 * v3;
      uint64_t v11 = (void **)(*(void *)result + 16 * v10 - 48);
      uint64_t v12 = 48 * a2 - 16 * v10;
      uint64_t v17 = result;
      int v20 = a2;
      do
      {
        if (v11 + 2 != *v11) {
          free(*v11);
        }
        v11 -= 6;
        v12 += 48;
        uint64_t result = v17;
        LODWORD(a2) = v20;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t v6 = (void *)(*(void *)result + 48 * v3);
    uint64_t v7 = 0x800000000;
    do
    {
      *uint64_t v6 = v6 + 2;
      v6[1] = v7;
      if (*(_DWORD *)(a3 + 8))
      {
        uint64_t v18 = result;
        unint64_t v21 = a2;
        uint64_t v15 = a3;
        uint64_t v13 = v7;
        sub_1CB927A18((uint64_t)v6, a3);
        uint64_t v7 = v13;
        a3 = v15;
        uint64_t result = v18;
        a2 = v21;
      }
      v6 += 6;
    }
    while (!__CFADD__(v5++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_1CD629E50()
{
}

char **sub_1CD629F40(char **a1)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 48 * v3;
    do
    {
      unint64_t v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5) {
        free(v5);
      }
      v4 -= 48;
    }
    while (v4);
    unsigned int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD629FBC(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    sub_1CD62A10C();
  }
  unint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = *(unsigned int *)(result + 8);
  }
  if (v4)
  {
    uint64_t v14 = a3;
    unint64_t v18 = a2;
    uint64_t v9 = result;
    uint64_t v10 = *(void *)result;
    do
    {
      uint64_t v10 = sub_1CD62A1FC(v10, v14) + 208;
      --v4;
    }
    while (v4);
    uint64_t result = v9;
    unint64_t v3 = *(unsigned int *)(v9 + 8);
    a2 = v18;
    a3 = v14;
  }
  unint64_t v5 = v3 - a2;
  if (v3 >= a2)
  {
    if (v3 > a2)
    {
      uint64_t v11 = (void **)(*(void *)result + 208 * v3 - 208);
      uint64_t v12 = 208 * a2 - 208 * v3;
      uint64_t v16 = result;
      int v19 = a2;
      do
      {
        if (v11 + 2 != *v11) {
          free(*v11);
        }
        v11 -= 26;
        v12 += 208;
        uint64_t result = v16;
        LODWORD(a2) = v19;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t v6 = (void *)(*(void *)result + 208 * v3);
    uint64_t v7 = 0x800000000;
    do
    {
      *uint64_t v6 = v6 + 2;
      v6[1] = v7;
      if (*(_DWORD *)(a3 + 8))
      {
        uint64_t v17 = result;
        unint64_t v20 = a2;
        uint64_t v15 = a3;
        uint64_t v13 = v7;
        sub_1CD62A1FC((uint64_t)v6, a3);
        uint64_t v7 = v13;
        a3 = v15;
        uint64_t result = v17;
        a2 = v20;
      }
      v6 += 26;
    }
    while (!__CFADD__(v5++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_1CD62A10C()
{
}

uint64_t sub_1CD62A1FC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 24 * v4 - 4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 24 * v5 - 4);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 24 * v5), (const void *)(*(void *)a2 + 24 * v5), *(void *)a2 + 24 * v6 - (*(void *)a2 + 24 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

char **sub_1CD62A2E0(char **a1)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 208 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 208];
      if (&v2[v4 - 192] != v5) {
        free(v5);
      }
      v4 -= 208;
    }
    while (v4);
    unsigned int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD62A360(uint64_t a1)
{
  *(void *)a1 = &unk_1F261CA88;
  sub_1CBA6249C((char **)(a1 + 35456));
  for (uint64_t i = 0; i != -35448; i -= 168)
    sub_1CBA627B0((char **)(a1 + 35296 + i));
  return a1;
}

void sub_1CD62A3D8(uint64_t a1)
{
  *(void *)a1 = &unk_1F261CA88;
  sub_1CBA6249C((char **)(a1 + 35456));
  for (uint64_t i = 0; i != -35448; i -= 168)
    sub_1CBA627B0((char **)(a1 + 35296 + i));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD62A474()
{
  return 1;
}

void sub_1CD62A47C(long long *a1, _WORD *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCD9E68, 0, 0);
  byte_1EBCD9EE8 = 0;
  qword_1EBCD9EF0 = (uint64_t)&unk_1F25EDE58;
  unk_1EBCD9EF8 = 0;
  qword_1EBCD9E68 = (uint64_t)&unk_1F26440A0;
  qword_1EBCD9F00 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCD9F08 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCD9F20 = (uint64_t)&qword_1EBCD9F08;
  llvm::cl::Option::setArgStr(v4, "disable-gisel-legality-check", 0x1CuLL);
  xmmword_1EBCD9E88 = *a1;
  word_1EBCD9E72 = (32 * (*a2 & 3)) | word_1EBCD9E72 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCD9E68);
}

int *sub_1CD62A588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CD62A8F4(a2, a1);
}

void sub_1CD62A594(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1CD62A5A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1CD62A5C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1CD62A5D4(uint64_t a1, int a2, unsigned int a3, unsigned __int16 a4, char **a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)(a1 + 40 * (a2 - 45) + 45584);
  if (!sub_1CC72FF1C(v8, a4))
  {
    std::string __p = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unsigned __int16 v11 = a4;
    uint64_t v9 = sub_1CC72FFE0((uint64_t)v8, a4, &v11);
    sub_1CD62ACAC(v9 + 3, (uint64_t)&__p, 1);
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
  }
  uint64_t v10 = sub_1CC72FF1C(v8, a4);
  sub_1CC72FAB4(a3, (uint64_t)(v10 + 3), a5);
}

void sub_1CD62A6B8(uint64_t a1, int a2, unsigned int a3, unsigned __int16 a4, char **a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)(a1 + 40 * (a2 - 45) + 54024);
  if (!sub_1CC72FF1C(v8, a4))
  {
    std::string __p = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unsigned __int16 v11 = a4;
    uint64_t v9 = sub_1CC72FFE0((uint64_t)v8, a4, &v11);
    sub_1CD62ACAC(v9 + 3, (uint64_t)&__p, 1);
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
  }
  uint64_t v10 = sub_1CC72FF1C(v8, a4);
  sub_1CC72FAB4(a3, (uint64_t)(v10 + 3), a5);
}

uint64_t sub_1CD62A79C(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if ((*a2 - 256) <= 0xFFFFFF2C
    || (unsigned int v5 = v3 - 45, v6 = a2[1], *(_DWORD *)(a1 + 40 * (v3 - 45) + 37152) <= v6))
  {
LABEL_16:
    LOBYTE(v17) = 10;
    return v17;
  }
  uint64_t v7 = (unsigned __int16 **)(*(void *)(a1 + 40 * v5 + 37144) + 24 * v6);
  unint64_t v8 = *((void *)a2 + 1);
  unsigned int v9 = (unsigned __int16)(v8 >> 3);
  unsigned int v10 = (unsigned __int16)(v8 >> 19);
  if ((v8 & 2) == 0) {
    unsigned int v10 = v8 >> 19;
  }
  if ((v8 & 4) != 0) {
    unsigned int v9 = v10;
  }
  if (v8) {
    unsigned int v11 = v8 >> 3;
  }
  else {
    unsigned int v11 = v9;
  }
  unsigned int v13 = sub_1CC72F878(v7, v11);
  uint64_t v14 = *((void *)a2 + 1);
  uint64_t v15 = 0x800000000000000;
  if ((v14 & 2) == 0) {
    uint64_t v15 = 0x8000000000000;
  }
  if ((v15 & v14) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v12);
    uint64_t v14 = *((void *)a2 + 1);
  }
  unsigned int v16 = v14 & 0x7FFF8;
  if (!BYTE2(v13))
  {
    int v19 = sub_1CC731998((void *)(a1 + 40 * v5 + 54024), v13);
    if (v19) {
      return (sub_1CC72F878((unsigned __int16 **)&v19[3][3 * v6], v16 >> 3) >> 16);
    }
    goto LABEL_16;
  }
  return BYTE2(v13);
}

int *sub_1CD62A8F4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(_WORD **)a2;
  unsigned int v5 = *(_WORD **)(a2 + 8);
  if (v5 != *(_WORD **)a2 && *v4 == 1)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = sub_1CC73062C((void **)a1, 589825);
    *(void *)(a1 + 8) = result;
    uint64_t v4 = *(_WORD **)a2;
    unsigned int v5 = *(_WORD **)(a2 + 8);
  }
  if (v5 != v4)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      unsigned int v9 = (int *)&v4[v7];
      if ((unint64_t)result >= *(void *)(a1 + 16)) {
        uint64_t result = sub_1CC7318BC((void **)a1, v9);
      }
      else {
        *result++ = *v9;
      }
      *(void *)(a1 + 8) = result;
      ++v8;
      uint64_t v4 = *(_WORD **)a2;
      uint64_t v10 = *(void *)(a2 + 8) - *(void *)a2;
      if (v8 == v10 >> 2) {
        break;
      }
      int v11 = (unsigned __int16)v4[v7];
      if (v11 + 1 != (unsigned __int16)v4[v7 + 2]) {
        goto LABEL_12;
      }
LABEL_15:
      v7 += 2;
      if (v8 >= v10 >> 2) {
        return result;
      }
    }
    int v11 = (unsigned __int16)v4[v7];
LABEL_12:
    int v12 = (v11 + 1) | 0x10000;
    if ((unint64_t)result < *(void *)(a1 + 16)) {
      *result++ = v12;
    }
    else {
      uint64_t result = sub_1CC73062C((void **)a1, v12);
    }
    *(void *)(a1 + 8) = result;
    uint64_t v4 = *(_WORD **)a2;
    uint64_t v10 = *(void *)(a2 + 8) - *(void *)a2;
    goto LABEL_15;
  }
  return result;
}

void sub_1CD62AA0C()
{
}

void sub_1CD62AA80(uint64_t *a1, void *a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *a1 + 24 * v2;
    do
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      *(_OWORD *)a2 = *(_OWORD *)v3;
      a2[2] = *(void *)(v3 + 16);
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      v3 += 24;
      a2 += 3;
    }
    while (v3 != v4);
    uint64_t v5 = *a1;
    uint64_t v6 = 24 * v2;
    do
    {
      uint64_t v7 = *(void **)(v5 + v6 - 24);
      if (v7)
      {
        *(void *)(v5 + v6 - 16) = v7;
        uint64_t v8 = v6;
        uint64_t v9 = v5;
        operator delete(v7);
        uint64_t v6 = v8;
        uint64_t v5 = v9;
      }
      v6 -= 24;
    }
    while (v6);
  }
}

void sub_1CD62AB18()
{
}

unsigned int *sub_1CD62AB8C(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)result;
    uint64_t v6 = 32 * v2;
    do
    {
      uint64_t v7 = *(void *)(v5 + 24);
      if (v7)
      {
        if (v5 == v7)
        {
          *(void *)(a2 + 24) = a2;
          uint64_t result = (unsigned int *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 24) + 24))(*(void *)(v5 + 24), a2);
        }
        else
        {
          *(void *)(a2 + 24) = v7;
          *(void *)(v5 + 24) = 0;
        }
      }
      else
      {
        *(void *)(a2 + 24) = 0;
      }
      v5 += 32;
      a2 += 32;
      v6 -= 32;
    }
    while (v6);
    uint64_t v8 = v4[2];
    if (v8)
    {
      uint64_t v9 = *(void *)v4;
      uint64_t v10 = 32 * v8;
      uint64_t v11 = v9 - 32;
      do
      {
        uint64_t result = *(unsigned int **)(v11 + v10 + 24);
        if ((unsigned int *)(v11 + v10) == result)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)(v11 + v10) + 32))(v11 + v10);
        }
        else if (result)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 40))(result);
        }
        v10 -= 32;
      }
      while (v10);
    }
  }
  return result;
}

void *sub_1CD62ACAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = 24 * v3;
    do
    {
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = a2;
      uint64_t v11 = *(void **)(v6 + v7 - 24);
      if (v11)
      {
        *(void *)(v6 + v7 - 16) = v11;
        operator delete(v11);
      }
      v7 -= 24;
      a2 = v10;
      a3 = v9;
      a1 = v8;
    }
    while (v7);
  }
  *((_DWORD *)a1 + 2) = 0;
  uint64_t v4 = a2 + 24 * a3;

  return sub_1CC7303F0(a1, a2, v4);
}

void sub_1CD62AD44()
{
}

void *sub_1CD62AD58(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261CAC0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD62ADA4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

void sub_1CD62ADB0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD9F28, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC731A4C;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCD9F28, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t sub_1CD62AE20(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F261CBC8;
  uint64_t v4 = v3;
  sub_1CC731AE8(a1, (uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return a1;
}

void *sub_1CD62AF04(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 296) = a2;
  *(void *)(a1 + 280) = *(void *)(a2 + 40);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(char **)v5 != llvm::AAResultsWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  *(void *)(a1 + 304) = *(void *)((*(uint64_t (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, llvm::AAResultsWrapperPass::ID)+ 32);
  *(void *)(a1 + 288) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 120))(*(void *)(a2 + 16));
  *(void *)(a1 + 312) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 168))(*(void *)(a2 + 16));
  sub_1CC734E30((void *)(a1 + 320), a2);
  *(unsigned char *)(a1 + 416) = (**(void **)(a2 + 360) & 0x20) == 0;

  return sub_1CBFF3560((llvm::SmallPtrSetImplBase *)(a1 + 424));
}

void sub_1CD62B030(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, llvm::AAResultsWrapperPass::ID);
  sub_1CD632034((uint64_t)this);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

uint64_t sub_1CD62B084(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  unsigned int v11 = 0;
  uint64_t result = sub_1CC733188((_DWORD *)a1, &v11, *(void *)(a3 + 24), *(void *)(a3 + 272), a2);
  if (result)
  {
    unsigned int v7 = v11;
    uint64_t result = sub_1CC73C44C(v11, a3, 1, (uint64_t)&v8);
    if (v10)
    {
      if (v9 > 0x40)
      {
        *(void *)(a1 + 8) = *v8;
        *(_DWORD *)(a1 + 4) = v7;
        *(unsigned char *)(a1 + 16) = 0;
        return MEMORY[0x1D25D9CB0]();
      }
      *(void *)(a1 + 8) = (uint64_t)((void)v8 << -(uint64_t)v9) >> -(uint64_t)v9;
    }
    *(_DWORD *)(a1 + 4) = v7;
  }
  else
  {
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = 0;
  }
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1CD62B15C(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  unsigned int v4 = **(unsigned __int16 **)(a1 + 16) - 90;
  char v25 = v4 > 6;
  int v5 = (1 << v4) & 0x47;
  if (v25) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = a1;
  }
  unsigned int v8 = **(unsigned __int16 **)(a2 + 16) - 90;
  char v25 = v8 > 6;
  int v9 = (1 << v8) & 0x47;
  if (v25) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  if (v10 || !v7) {
    return 0;
  }
  sub_1CD62B084((uint64_t)&v34, *(_DWORD *)(*(void *)(v7 + 32) + 36), a4);
  sub_1CD62B084((uint64_t)&v32, *(_DWORD *)(*(void *)(a2 + 32) + 36), a4);
  uint64_t result = 0;
  unsigned int v15 = v34;
  if (!v34) {
    return result;
  }
  unsigned int v16 = v32;
  if (!v32) {
    return result;
  }
  uint64_t v17 = *(void *)(v7 + 48);
  if ((v17 & 7) != 0)
  {
    unint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v7 + 48) = v17 & 0xFFFFFFFFFFFFFFF8;
  }
  int64_t v19 = sub_1CB8F20C0(v18);
  uint64_t v20 = *(void *)(a2 + 48);
  if ((v20 & 7) != 0)
  {
    unint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v20 & 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v22 = sub_1CB8F20C0(v21);
  if (v15 != v16)
  {
    uint64_t v26 = sub_1CC73D73C(v15, a4);
    uint64_t v27 = sub_1CC73D73C(v16, a4);
    uint64_t result = 0;
    if (!v26 || !v27) {
      return result;
    }
    int v28 = **(unsigned __int16 **)(v26 + 16);
    if (v28 == **(unsigned __int16 **)(v27 + 16))
    {
      if (v28 == 71)
      {
        uint64_t result = 0;
        if (*(void *)(*(void *)(v26 + 32) + 48) == *(void *)(*(void *)(v27 + 32) + 48)) {
          return result;
        }
        goto LABEL_27;
      }
      if (v28 == 70 && v26 != v27)
      {
        int v29 = *(_DWORD *)(*(void *)(v26 + 32) + 48);
        if (v29 < 0)
        {
          LOBYTE(result) = 0;
          int v30 = -*(_DWORD *)(*(void *)(*(void *)(*(void *)(v26 + 24) + 32) + 56) + 32);
          if (v29 < v30) {
            goto LABEL_27;
          }
          uint64_t result = 0;
          int v31 = *(_DWORD *)(*(void *)(v27 + 32) + 48);
          if ((v31 & 0x80000000) == 0 || v31 < v30) {
            goto LABEL_27;
          }
          return result;
        }
        LOBYTE(result) = 0;
LABEL_27:
        *a3 = result;
        return 1;
      }
    }
    return 0;
  }
  unint64_t v23 = v22;
  int64_t v24 = v33 - v35;
  if (v33 - v35 >= 0 && v19 != -1)
  {
    char v25 = v19 <= v24;
    goto LABEL_24;
  }
  uint64_t result = 0;
  if (v24 < 0 && v23 != -1)
  {
    char v25 = ((uint64_t)(v24 + v23) < 0) ^ __OFADD__(v24, v23) | (v24 + v23 == 0);
LABEL_24:
    if (v25) {
      LOBYTE(result) = 0;
    }
    else {
      LOBYTE(result) = 1;
    }
    goto LABEL_27;
  }
  return result;
}

BOOL sub_1CD62B390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CC731BE0(&v36, a3, a1);
  sub_1CC731BE0(&v33, a3, a2);
  if (DWORD1(v36)) {
    BOOL v8 = DWORD1(v36) == DWORD1(v33);
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 && *((void *)&v36 + 1) == *((void *)&v33 + 1)) {
    return 1;
  }
  BOOL v9 = !(_BYTE)v36 || v33 == 0;
  if (!v9 || BYTE1(v36) && BYTE1(v33)) {
    return 1;
  }
  unsigned int v11 = v38;
  if (v38)
  {
    int v12 = v35;
    if (v35)
    {
      __int16 v13 = *((_WORD *)v38 + 16);
      __int16 v14 = *((_WORD *)v35 + 16);
      if ((v13 & 0x20) != 0 && (v14 & 2) != 0 || (v13 & 2) != 0 && (v14 & 0x20) != 0) {
        return 0;
      }
      char v32 = 0;
      if ((sub_1CD62B15C(a1, a2, &v32, a3) & 1) == 0)
      {
        if (!a4) {
          return 1;
        }
        unint64_t v15 = *v11;
        if ((unint64_t)*v11 < 8) {
          return 1;
        }
        if ((v15 & 4) != 0) {
          return 1;
        }
        unint64_t v16 = *v12;
        if ((unint64_t)*v12 < 8 || (v16 & 4) != 0 || v37 == -1 || v34 == -1) {
          return 1;
        }
        uint64_t v17 = v11[1];
        uint64_t v18 = v12[1];
        if (v18 >= v17) {
          uint64_t v19 = v11[1];
        }
        else {
          uint64_t v19 = v12[1];
        }
        unint64_t v20 = v37 + v17 - v19;
        unint64_t v21 = v15 & 0xFFFFFFFFFFFFFFF8;
        if (v20 > 0x7FFFFFFFFFFFFFFBLL) {
          unint64_t v20 = -2;
        }
        v29[0] = v21;
        v29[1] = v20;
        long long v22 = *(_OWORD *)(v11 + 5);
        long long v31 = *(_OWORD *)(v11 + 7);
        long long v30 = v22;
        unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v24 = (unint64_t)(v18 - v19 + v34) <= 0x7FFFFFFFFFFFFFFBLL ? v18 - v19 + v34 : -2;
        v26[0] = v23;
        v26[1] = v24;
        long long v25 = *(_OWORD *)(v12 + 5);
        long long v28 = *(_OWORD *)(v12 + 7);
        long long v27 = v25;
        return llvm::AAResults::alias(a4, (uint64_t)v29, (uint64_t)v26) != 0;
      }
      return v32 != 0;
    }
  }
  char v32 = 0;
  if (sub_1CD62B15C(a1, a2, &v32, a3)) {
    return v32 != 0;
  }
  return 1;
}

uint64_t sub_1CD62B57C(uint64_t a1, unsigned int *a2)
{
  v47[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 280);
  uint64_t v5 = *(void *)(**(void **)a2 + 32);
  int v6 = *(_DWORD *)(v5 + 4);
  if (v6 < 0 && (uint64_t v7 = v6 & 0x7FFFFFFF, v7 < *(_DWORD *)(v4 + 432))) {
    unint64_t v8 = *(void *)(*(void *)(v4 + 424) + 8 * v7);
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v45 = v8;
  int v9 = *(_DWORD *)(v5 + 36);
  if (v9 < 0 && (uint64_t v10 = v9 & 0x7FFFFFFF, v10 < *(_DWORD *)(v4 + 432))) {
    unint64_t v11 = *(void *)(*(void *)(v4 + 424) + 8 * v10);
  }
  else {
    unint64_t v11 = 0;
  }
  char v12 = 35;
  if ((v11 & 4) == 0) {
    char v12 = 19;
  }
  unint64_t v13 = v11 >> v12;
  uint64_t v14 = v13 & 0xFFFFFF;
  int v44 = v13 & 0xFFFFFF;
  sub_1CD62B8A4(a1, v13 & 0xFFFFFF);
  unint64_t v15 = sub_1CD62C2D4(a1 + 392, &v44);
  int v16 = 0;
  uint64_t v17 = *(void *)(**(void **)(a1 + 296) + 40) + 272;
  unint64_t v18 = a2[2];
  do
  {
    uint64_t v19 = 1 << ~__clz(v18);
    if (v18) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    int v21 = sub_1CB8F1DC4(&v45);
    unint64_t v22 = (v20 * v21);
    if ((v20 * v21) >= 2)
    {
      while (1)
      {
        unint64_t ApproximateEVTForLLT = llvm::getApproximateEVTForLLT((8 * v22) | 1, v17, ****(llvm::LLVMContext *****)(a1 + 296));
        if (v15[18] > v22
          && ((*(void *)(*((void *)v15 + 1) + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
        {
          unsigned __int8 v25 = ApproximateEVTForLLT;
          BOOL v26 = !(*(unsigned int (**)(void, uint64_t, unint64_t, uint64_t, void))(**(void **)(a1 + 288) + 208))(*(void *)(a1 + 288), v14, ApproximateEVTForLLT, v24, *(void *)(a1 + 296))|| v25 == 0;
          if (!v26 && *(void *)(*(void *)(a1 + 288) + 8 * v25 + 96)) {
            break;
          }
        }
        unint64_t v27 = v22 >> 1;
        BOOL v28 = v22 > 3;
        v22 >>= 1;
        if (!v28) {
          goto LABEL_27;
        }
      }
    }
    unint64_t v27 = v22;
LABEL_27:
    unint64_t v30 = sub_1CB8F1DC4(&v45);
    if (v29 == 1) {
    if (v30 >= v27)
    }
      break;
    int v43 = v16;
    unint64_t v32 = sub_1CB8F1DC4(&v45);
    if (v31 == 1) {
    unint64_t v33 = v27 / v32;
    }
    uint64_t v34 = *(unsigned char **)a2;
    uint64_t v35 = (unsigned char *)(*(void *)a2 + 8 * (v27 / v32));
    v46[0] = v47;
    v46[1] = (void *)0x800000000;
    sub_1CD47792C((unsigned int *)v46, v34, v35);
    int v36 = sub_1CC731D50(a1, (uint64_t **)v46);
    uint64_t v37 = *(void *)a2;
    uint64_t v38 = (const void *)(*(void *)a2 + 8 * v33);
    uint64_t v39 = a2[2];
    uint64_t v40 = *(void *)a2 + 8 * v39 - (void)v38;
    if (v33 != v39) {
      memmove(*(void **)a2, v38, *(void *)a2 + 8 * v39 - (void)v38);
    }
    unint64_t v41 = v37 + v40 - *(void *)a2;
    a2[2] = v41 >> 3;
    if (v46[0] == v47)
    {
      unint64_t v18 = (v41 >> 3);
    }
    else
    {
      free(v46[0]);
      unint64_t v18 = a2[2];
    }
    int v16 = v43 | v36;
  }
  while (v18 > 1);
  return v16 & 1;
}

void sub_1CD62B8A4(uint64_t a1, unsigned int a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unsigned int v30 = a2;
  int v4 = *(_DWORD *)(a1 + 408);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 392);
    int v6 = v4 - 1;
    unsigned int v7 = v6 & (37 * a2);
    int v8 = *(_DWORD *)(v5 + 80 * v7);
    if (v8 == a2) {
      return;
    }
    int v9 = 1;
    while (v8 != -1)
    {
      unsigned int v22 = v7 + v9++;
      unsigned int v7 = v22 & v6;
      int v8 = *(_DWORD *)(v5 + 80 * v7);
      if (v8 == a2) {
        return;
      }
    }
  }
  uint64_t v23 = a1 + 392;
  v38[0] = v39;
  v38[1] = (void *)0x600000000;
  sub_1CB90D610((uint64_t)v38, 4uLL, 0);
  int v40 = 256;
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 296) + 16) + 168))(*(void *)(*(void *)(a1 + 296) + 16));
  uint64_t v11 = **(void **)(a1 + 296);
  char v12 = (llvm::DataLayout *)(*(void *)(v11 + 40) + 272);
  IntPtrType = (llvm::Type *)llvm::DataLayout::getIntPtrType(v12, **(llvm::LLVMContext ***)v11, a2);
  uint64_t PointerTo = (llvm *)llvm::Type::getPointerTo(IntPtrType, a2);
  unint64_t LLTForType = llvm::getLLTForType(PointerTo, v12, v15);
  unint64_t v17 = 2;
  do
  {
    unint64_t v29 = (8 * v17) | 1;
    uint64_t v19 = sub_1CB8F1DC4(&v29);
    if (v18 == 1) {
    uint64_t v34 = v36;
    }
    v36[0] = (8 * v17) | 1;
    v36[1] = v19;
    int v37 = 0;
    uint64_t v35 = 0x200000001;
    long long v31 = v33;
    v33[0] = v29;
    v33[1] = LLTForType;
    uint64_t v32 = 0x600000002;
    int v24 = 96;
    unsigned __int8 v25 = v33;
    uint64_t v26 = 2;
    unint64_t v27 = v36;
    uint64_t v28 = 1;
    if (!sub_1CC72D410(v10, (uint64_t)&v24)) {
      *(void *)((char *)v38[0] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v17 & 0x3E);
    }
    if (v31 != v33) {
      free(v31);
    }
    if (v34 != v36) {
      free(v34);
    }
    BOOL v20 = v17 >= 0x41;
    v17 *= 2;
  }
  while (!v20);
  int v21 = sub_1CD62C2D4(v23, (int *)&v30);
  sub_1CBAF13E8((uint64_t)(v21 + 2), (uint64_t)v38);
  v21[18] = v40;
  if (v38[0] != v39) {
    free(v38[0]);
  }
}

llvm::APInt *sub_1CD62BB50(uint64_t a1, const llvm::APInt *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    sub_1CD62C510();
  }
  uint64_t result = (llvm::APInt *)(*(void *)a1 + 16 * v3);
  unsigned int v5 = *((_DWORD *)a2 + 2);
  *((_DWORD *)result + 2) = v5;
  if (v5 > 0x40) {
    llvm::APInt::initSlowCase(result, a2);
  }
  *(void *)uint64_t result = *(void *)a2;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL sub_1CD62BBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 280);
  uint64_t v7 = *(void *)(a2 + 32);
  int v8 = *(_DWORD *)(v7 + 4);
  if (v8 < 0 && (uint64_t v13 = v8 & 0x7FFFFFFF, v13 < *(_DWORD *)(v6 + 432))) {
    unint64_t v9 = *(void *)(*(void *)(v6 + 424) + 8 * v13);
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v53 = v9;
  int v10 = *(_DWORD *)(v7 + 36);
  if (v10 < 0 && (uint64_t v14 = v10 & 0x7FFFFFFF, v14 < *(_DWORD *)(v6 + 432))) {
    unint64_t v11 = *(void *)(*(void *)(v6 + 424) + 8 * v14);
  }
  else {
    unint64_t v11 = 0;
  }
  if ((v9 & 1) == 0) {
    return 0;
  }
  uint64_t v15 = sub_1CD613778(a2);
  uint64_t v17 = sub_1CB8F1DC4(&v53);
  if (v16 == 1) {
  if (v15 != v17)
  }
    return 0;
  BOOL result = sub_1CD613714(a2);
  if (result)
  {
    sub_1CD62B084((uint64_t)&v51, *(_DWORD *)(*(void *)(a2 + 32) + 36), *(void *)(a1 + 280));
    unint64_t v18 = v52;
    uint64_t v19 = a3 + 16;
    if (!*(_DWORD *)(a3 + 24))
    {
      int v39 = v51;
      unint64_t v41 = (unint64_t)(sub_1CB8F1DC4(&v53) + 7) >> 3;
      if (v40 == 1) {
      if (v18 >= v41)
      }
      {
        *(_DWORD *)a3 = v39;
        *(void *)(a3 + 8) = v18;
        uint64_t v42 = *(unsigned int *)(a3 + 24);
        if (v42 >= *(_DWORD *)(a3 + 28)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a3 + 16) + 8 * v42) = a2;
        *(_DWORD *)(a3 + 24) = v42 + 1;
        return 1;
      }
      return 0;
    }
    int v20 = *(_DWORD *)(*(void *)(**(void **)v19 + 32) + 4);
    unint64_t v47 = v52;
    int v48 = v51;
    unint64_t v49 = v11;
    if (v20 < 0 && (v43 = *(void *)(a1 + 280), uint64_t v44 = v20 & 0x7FFFFFFF, v44 < *(_DWORD *)(v43 + 432))) {
      unint64_t v21 = *(void *)(*(void *)(v43 + 424) + 8 * v44);
    }
    else {
      unint64_t v21 = 0;
    }
    unint64_t v50 = v21;
    uint64_t v22 = sub_1CB8F1DC4(&v50);
    int v24 = v23;
    uint64_t v26 = sub_1CB8F1DC4(&v53);
    BOOL result = 0;
    if (v22 == v26 && v24 == v25)
    {
      int v27 = *(_DWORD *)(*(void *)(**(void **)v19 + 32) + 36);
      if (v27 < 0 && (v45 = *(void *)(a1 + 280), uint64_t v46 = v27 & 0x7FFFFFFF, v46 < *(_DWORD *)(v45 + 432))) {
        unint64_t v28 = *(void *)(*(void *)(v45 + 424) + 8 * v46);
      }
      else {
        unint64_t v28 = 0;
      }
      BOOL result = 0;
      char v29 = 35;
      if ((v28 & 4) != 0) {
        char v30 = 35;
      }
      else {
        char v30 = 19;
      }
      unint64_t v31 = v28 >> v30;
      if ((v49 & 4) == 0) {
        char v29 = 19;
      }
      if (((v31 ^ (v49 >> v29)) & 0xFFFFFF) == 0 && *(_DWORD *)a3 == v48)
      {
        uint64_t v32 = *(void *)(a3 + 8);
        unint64_t v34 = (unint64_t)(sub_1CB8F1DC4(&v53) + 7) >> 3;
        if (v33 == 1) {
        if (v32 - v34 == v47)
        }
        {
          uint64_t v35 = *(unsigned int *)(a3 + 24);
          if (v35 >= *(_DWORD *)(a3 + 28)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)v19 + 8 * v35) = a2;
          *(_DWORD *)(a3 + 24) = v35 + 1;
          uint64_t v36 = *(void *)(a3 + 8);
          unint64_t v38 = (unint64_t)(sub_1CB8F1DC4(&v53) + 7) >> 3;
          if (v37 == 1) {
          *(void *)(a3 + 8) = v36 - v38;
          }
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1CD62BF1C(uint64_t a1, uint64_t a2)
{
  if ((**(unsigned char **)(a2 + 360) & 0x10) != 0)
  {
    LOBYTE(v2) = 0;
  }
  else
  {
    sub_1CD62AF04(a1, a2);
    uint64_t v6 = a2 + 320;
    uint64_t v7 = *(void *)(a2 + 328);
    if (v7 == v6)
    {
      LOBYTE(v2) = 0;
    }
    else
    {
      int v2 = 0;
      do
      {
        v2 |= sub_1CC732A44(a1, v7);
        uint64_t v7 = *(void *)(v7 + 8);
      }
      while (v7 != v6);
    }
    sub_1CD62BFA4((_DWORD *)(a1 + 392));
  }
  return v2 & 1;
}

void sub_1CD62BFA4(_DWORD *a1)
{
  int v2 = a1[2];
  if (!v2 && !a1[3]) {
    return;
  }
  uint64_t v3 = a1[4];
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!v3)
    {
LABEL_12:
      *((void *)a1 + 1) = 0;
      return;
    }
    uint64_t v4 = 80 * v3;
    uint64_t v5 = *(void *)a1 + 24;
    while (1)
    {
      int v6 = *(_DWORD *)(v5 - 24);
      if (v6 == -2) {
        goto LABEL_10;
      }
      if (v6 != -1) {
        break;
      }
LABEL_11:
      v5 += 80;
      v4 -= 80;
      if (!v4) {
        goto LABEL_12;
      }
    }
    uint64_t v7 = *(void **)(v5 - 16);
    if ((void *)v5 != v7) {
      free(v7);
    }
LABEL_10:
    *(_DWORD *)(v5 - 24) = -1;
    goto LABEL_11;
  }

  sub_1CD62C644(a1);
}

void sub_1CD62C06C(uint64_t *a1)
{
  sub_1CD62C1D4(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD62C0A4()
{
  return "LoadStoreOpt";
}

void sub_1CD62C0B4(uint64_t a1@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = v6;
  uint64_t v5 = 0x600000000;
  sub_1CB90D610((uint64_t)&v4, 1uLL, 0);
  int v2 = 11;
  LODWORD(v7) = 11;
  uint64_t v3 = v4;
  *(void *)v4 |= 1uLL;
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  if (v5)
  {
    sub_1CBAF13E8(a1, (uint64_t)&v4);
    int v2 = v7;
    uint64_t v3 = v4;
  }
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v6) {
    free(v3);
  }
}

void sub_1CD62C198()
{
}

void sub_1CD62C1D4(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F261CB08;
  int v2 = (void *)a1[54];
  if (v2 != (void *)a1[53]) {
    free(v2);
  }
  sub_1CC732F4C(a1 + 49);
  a1[40] = (uint64_t)&unk_1F261CD58;
  uint64_t v3 = (unsigned __int8 *)a1[44];
  if (v3) {
    llvm::MetadataTracking::untrack((uint64_t)(a1 + 44), v3);
  }
  uint64_t v4 = (uint64_t *)a1[34];
  if (v4 == a1 + 31)
  {
    (*(void (**)(uint64_t *))(a1[31] + 32))(a1 + 31);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t *))(*v4 + 40))(v4);
  }

  sub_1CBA0E6AC((llvm::Pass *)a1);
}

_DWORD *sub_1CD62C2D4(uint64_t a1, int *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CC733210(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD62C358(a1, a2, v7);
    *uint64_t v5 = *a2;
    *((void *)v5 + 1) = v5 + 6;
    *((void *)v5 + 2) = 0x600000000;
    v5[18] = 0;
  }
  return v5;
}

_DWORD *sub_1CD62C358(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_1CC7332AC(a1, v6);
    uint64_t v8 = 0;
    sub_1CC733210(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3) {
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void sub_1CD62C410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(_DWORD **)a1;
    uint64_t v8 = 80 * v6;
    do
    {
      _DWORD *v7 = -1;
      v7 += 20;
      v8 -= 80;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      int v9 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 <= 0xFFFFFFFD)
      {
        char v12 = 0;
        sub_1CC733210(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v12);
        int v10 = v12;
        _DWORD *v12 = *(_DWORD *)v4;
        *((void *)v10 + 1) = v10 + 6;
        *((void *)v10 + 2) = 0x600000000;
        if (*(_DWORD *)(v4 + 16)) {
          sub_1CB837F14((uint64_t)(v10 + 2), v4 + 8);
        }
        v10[18] = *(_DWORD *)(v4 + 72);
        ++*(_DWORD *)(a1 + 8);
        unint64_t v11 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v11) {
          free(v11);
        }
      }
      v4 += 80;
    }
    while (v4 != a3);
  }
}

void sub_1CD62C510()
{
}

uint64_t sub_1CD62C5C4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = (void *)(*(void *)a1 + 16 * v3);
  *uint64_t v4 = a2;
  v4[1] = a3;
  LODWORD(v4) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  return *(void *)a1 + 16 * v4 - 16;
}

void sub_1CD62C644(_DWORD *a1)
{
  uint64_t v2 = a1[4];
  int v3 = a1[2];
  if (v2)
  {
    uint64_t v4 = 80 * v2;
    uint64_t v5 = *(void *)a1 + 24;
    do
    {
      if (*(_DWORD *)(v5 - 24) <= 0xFFFFFFFD)
      {
        uint64_t v6 = *(void **)(v5 - 16);
        if ((void *)v5 != v6) {
          free(v6);
        }
      }
      v5 += 80;
      v4 -= 80;
    }
    while (v4);
  }
  int v7 = 1 << (33 - __clz(v3 - 1));
  if (v7 <= 64) {
    int v7 = 64;
  }
  if (v3) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 == a1[4])
  {
    *((void *)a1 + 1) = 0;
    if (v8)
    {
      int v9 = *(_DWORD **)a1;
      uint64_t v10 = 80 * v8;
      do
      {
        *int v9 = -1;
        v9 += 20;
        v10 -= 80;
      }
      while (v10);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)a1, 8);
    sub_1CC73306C(a1, v8);
  }
}

void sub_1CD62C740(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD9FF0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC733384;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCD9FF0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD62C7B0(uint64_t a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, llvm::TargetTransformInfoWrapperPass::ID);
  sub_1CD632034((uint64_t)this);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

void sub_1CD62C804()
{
}

void *sub_1CD62C840(uint64_t a1, uint64_t a2)
{
  return sub_1CB89694C((llvm::SmallPtrSetImplBase *)(a1 + 160), a2);
}

void *sub_1CD62C848(void *result, uint64_t a2)
{
  unsigned int v2 = **(unsigned __int16 **)(a2 + 16) - 68;
  BOOL v3 = v2 > 0x35;
  uint64_t v4 = (1 << v2) & 0x30000000000009;
  if (v3 || v4 == 0)
  {
    int v7 = result;
    BOOL result = sub_1CB896AE8((uint64_t)(result + 20), a2);
    uint64_t v8 = v7[21];
    uint64_t v9 = 176;
    if (v8 == v7[20]) {
      uint64_t v9 = 180;
    }
    if (result != (void *)(v8 + 8 * *(unsigned int *)((char *)v7 + v9)))
    {
      *BOOL result = -2;
      ++*((_DWORD *)v7 + 46);
    }
    uint64_t v11 = *(void *)(a2 + 56);
    uint64_t v10 = (unsigned __int8 **)(a2 + 56);
    if (v11)
    {
      return sub_1CD62C904(v7 + 11, v10);
    }
  }
  return result;
}

void *sub_1CD62C904(void *result, unsigned __int8 **this)
{
  BOOL v3 = result;
  if (result[8])
  {
    uint64_t v7 = (uint64_t)(result + 6);
  }
  else
  {
    uint64_t v4 = *((unsigned int *)result + 2);
    if (!v4) {
      goto LABEL_9;
    }
    uint64_t v5 = (unsigned __int8 **)*result;
    uint64_t v6 = 8 * v4;
    while (*v5 != *this)
    {
      ++v5;
      v6 -= 8;
      if (!v6) {
        goto LABEL_8;
      }
    }
    if (v6) {
      return result;
    }
LABEL_8:
    if (v4 < 4)
    {
LABEL_9:
      return sub_1CD62CC8C((uint64_t)result, this);
    }
    do
    {
      uint64_t v8 = (llvm::DebugLoc *)(*v3 + 8 * v4 - 8);
      sub_1CD62CD24((uint64_t)(v3 + 6), v8, (unsigned __int8 **)v8);
      LODWORD(v4) = *((_DWORD *)v3 + 2) - 1;
      *((_DWORD *)v3 + 2) = v4;
      uint64_t v9 = (unsigned __int8 **)(*v3 + 8 * v4);
      if (*v9)
      {
        llvm::MetadataTracking::untrack((uint64_t)v9, *v9);
        LODWORD(v4) = *((_DWORD *)v3 + 2);
      }
    }
    while (v4);
    uint64_t v7 = (uint64_t)(v3 + 6);
  }

  return (void *)sub_1CD62CD24(v7, (llvm::DebugLoc *)this, this);
}

void *sub_1CD62CA14(void *result, uint64_t a2)
{
  unsigned int v2 = **(unsigned __int16 **)(a2 + 16) - 68;
  BOOL v3 = v2 > 0x35;
  uint64_t v4 = (1 << v2) & 0x30000000000009;
  if (v3 || v4 == 0)
  {
    uint64_t v7 = result;
    BOOL result = sub_1CB896AE8((uint64_t)(result + 20), a2);
    uint64_t v8 = v7[21];
    uint64_t v9 = 176;
    if (v8 == v7[20]) {
      uint64_t v9 = 180;
    }
    if (result != (void *)(v8 + 8 * *(unsigned int *)((char *)v7 + v9)))
    {
      *BOOL result = -2;
      ++*((_DWORD *)v7 + 46);
    }
    uint64_t v11 = *(void *)(a2 + 56);
    uint64_t v10 = (unsigned __int8 **)(a2 + 56);
    if (v11)
    {
      return sub_1CD62C904(v7 + 11, v10);
    }
  }
  return result;
}

void *sub_1CD62CAD0(uint64_t a1, uint64_t a2)
{
  return sub_1CB89694C((llvm::SmallPtrSetImplBase *)(a1 + 160), a2);
}

void sub_1CD62CADC(uint64_t a1)
{
  sub_1CC734D90(a1);

  JUMPOUT(0x1D25D9CE0);
}

unsigned __int8 **sub_1CD62CB14(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  uint64_t v6 = *a1 + 8 * v5;
  if (a2 + 1 != (unsigned __int8 **)v6)
  {
    uint64_t v7 = a2;
    do
    {
      sub_1CB8F69CC(v7, v7 + 1);
      uint64_t v8 = v7 + 2;
      ++v7;
    }
    while (v8 != (unsigned __int8 **)v6);
    LODWORD(v5) = *((_DWORD *)a1 + 2);
    uint64_t v4 = *a1;
  }
  unsigned int v9 = v5 - 1;
  *((_DWORD *)a1 + 2) = v9;
  uint64_t v10 = (unsigned __int8 **)(v4 + 8 * v9);
  if (*v10) {
    llvm::MetadataTracking::untrack((uint64_t)v10, *v10);
  }
  return a2;
}

void *sub_1CD62CBA8(uint64_t a1, llvm::DebugLoc *a2)
{
  unsigned int v2 = (void *)(a1 + 8);
  BOOL v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    unint64_t v6 = llvm::DebugLoc::get((llvm::DebugLoc *)(v3 + 4));
    unint64_t v7 = llvm::DebugLoc::get(a2);
    uint64_t v8 = v3 + 1;
    if (v6 >= v7)
    {
      uint64_t v8 = v3;
      uint64_t v5 = v3;
    }
    BOOL v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 == v2) {
    return v2;
  }
  unint64_t v9 = llvm::DebugLoc::get(a2);
  if (v9 < llvm::DebugLoc::get((llvm::DebugLoc *)(v5 + 4))) {
    return v2;
  }
  return v5;
}

void sub_1CD62CC44(uint64_t **a1, uint64_t *a2)
{
  sub_1CD491B50(a1, a2);
  BOOL v3 = (unsigned __int8 *)a2[4];
  if (v3) {
    llvm::MetadataTracking::untrack((uint64_t)(a2 + 4), v3);
  }

  operator delete(a2);
}

void *sub_1CD62CC8C(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v9 = v5 + 8 * v4;
    if (v5 > (unint64_t)a2 || v9 <= (unint64_t)a2) {
      sub_1CD62CE84();
    }
    sub_1CD62CE84();
  }
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  BOOL result = (void *)(v5 + 8 * v6);
  uint64_t v8 = *a2;
  *BOOL result = *a2;
  if (v8)
  {
    BOOL result = (void *)llvm::MetadataTracking::track((uint64_t)result, v8, 2);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  return result;
}

uint64_t sub_1CD62CD24(uint64_t a1, llvm::DebugLoc *this, unsigned __int8 **a3)
{
  unint64_t v5 = (uint64_t **)sub_1CD62CDD8(a1, &v12, this);
  if (*v5) {
    return 0;
  }
  unint64_t v7 = v5;
  uint64_t v8 = (uint64_t *)operator new(0x28uLL);
  unint64_t v9 = *a3;
  v8[4] = (uint64_t)*a3;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)(v8 + 4), v9, 2);
  }
  uint64_t v10 = v12;
  *uint64_t v8 = 0;
  v8[1] = 0;
  __n128 v8[2] = v10;
  void *v7 = v8;
  uint64_t v11 = **(void **)a1;
  if (v11)
  {
    *(void *)a1 = v11;
    uint64_t v8 = *v7;
  }
  sub_1CB8358B8(*(uint64_t **)(a1 + 8), v8);
  ++*(void *)(a1 + 16);
  return 1;
}

void *sub_1CD62CDD8(uint64_t a1, void *a2, llvm::DebugLoc *this)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        uint64_t v8 = (llvm::DebugLoc *)(v4 + 4);
        unint64_t v9 = llvm::DebugLoc::get(this);
        if (v9 >= llvm::DebugLoc::get(v8)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      unint64_t v10 = llvm::DebugLoc::get(v8);
      if (v10 >= llvm::DebugLoc::get(this)) {
        break;
      }
      unint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_1CD62CE84()
{
}

uint64_t sub_1CD62CEF4(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = *(unsigned __int8 ***)result;
    uint64_t v6 = 8 * v2;
    do
    {
      *a2 = *v5;
      if (*v5)
      {
        BOOL result = llvm::MetadataTracking::retrack((uint64_t)v5, *v5, (uint64_t)a2);
        *unint64_t v5 = 0;
      }
      ++v5;
      ++a2;
      v6 -= 8;
    }
    while (v6);
    uint64_t v7 = *(unsigned int *)(v4 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)v4;
      uint64_t v9 = 8 * v7;
      uint64_t v10 = v8 - 8;
      do
      {
        BOOL result = v10 + v9;
        uint64_t v11 = *(unsigned __int8 **)(v10 + v9);
        if (v11) {
          BOOL result = llvm::MetadataTracking::untrack(result, v11);
        }
        v9 -= 8;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_1CD62CF8C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = llvm::BuildMI(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(*(void *)(a1 + 16) + 8) + 624, 1, a2, a3, a4);

  return sub_1CC734FCC((void *)a1, (uint64_t)v6, v5);
}

llvm::MachineFunction *sub_1CD62CFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CC34E910(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(*(void *)(a1 + 16) + 8) + 816);
  uint64_t v6 = (llvm::MachineInstr *)v5;
  sub_1CC734FCC((void *)a1, (uint64_t)v4, v5);
  int v8 = 14;
  uint64_t v9 = 0;
  uint64_t v10 = a2;
  llvm::MachineInstr::addOperand(v6, v4, (const llvm::MachineOperand *)&v8);
  return v4;
}

llvm::MachineFunction *sub_1CD62D084(uint64_t a1, int *a2, int *a3, char a4)
{
  int v8 = sub_1CC34E910(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(*(void *)(a1 + 16) + 8) + 10752);
  uint64_t v10 = (llvm::MachineInstr *)v9;
  sub_1CC734FCC((void *)a1, (uint64_t)v8, v9);
  uint64_t v12 = v8;
  uint64_t v13 = v10;
  sub_1CC7355DC(a2, *(void *)(a1 + 24), &v12);
  sub_1CC7357B8(a3, v12, v13);
  int v14 = 1;
  uint64_t v15 = 0;
  uint64_t v16 = 1 << a4;
  llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)&v14);
  return v12;
}

llvm::MachineFunction *sub_1CD62D13C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a2;
  int v11 = 0;
  uint64_t v4 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, 223, &v10, 1, 0, 0, 0);
  uint64_t v8 = 0;
  int v9 = a3;
  int v7 = 8;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)&v7);
  return v4;
}

uint64_t sub_1CD62D20C(void *a1, uint64_t *a2, int *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[3];
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2;
  if (v7)
  {
    if (v7 == 2
      || (*(_DWORD *)a2 & 0x80000000) == 0
      || (uint64_t v27 = *(_DWORD *)a2 & 0x7FFFFFFF, v27 >= *(_DWORD *)(v6 + 432)))
    {
      uint64_t v9 = 0;
      goto LABEL_5;
    }
    uint64_t v8 = (uint64_t *)(*(void *)(v6 + 424) + 8 * v27);
  }
  uint64_t v9 = *v8;
LABEL_5:
  uint64_t v28 = sub_1CC7363A4(a3, v6);
  unint64_t v10 = sub_1CBA15978((unint64_t *)&v28);
  sub_1CC7363F0(a1, v10, a3);
  char v29 = v31;
  uint64_t v30 = 0x800000000;
  uint64_t v12 = *((void *)v11 + 4);
  unsigned int NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs(v11);
  if (NumExplicitDefs)
  {
    unsigned int v14 = v30;
    uint64_t v15 = 32 * NumExplicitDefs;
    uint64_t v16 = (int *)(v12 + 4);
    do
    {
      int v18 = *v16;
      v16 += 8;
      int v17 = v18;
      if (v14 >= HIDWORD(v30)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v29 + v14) = v17;
      unsigned int v14 = v30 + 1;
      LODWORD(v30) = v30 + 1;
      v15 -= 32;
    }
    while (v15);
  }
  uint64_t v32 = sub_1CBA15978((unint64_t *)&v28);
  int v33 = 0;
  (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, void, void, void))(*a1 + 32))(a1, 68, &v32, 1, 0, 0, 0);
  int v20 = *(_DWORD *)(*(void *)(v19 + 32) + 4);
  uint64_t v21 = 0x800000000000000;
  if ((v9 & 2) == 0) {
    uint64_t v21 = 0x8000000000000;
  }
  if ((v21 & v9) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v19);
  }
  unsigned int v22 = v30;
  unsigned int v23 = (unsigned __int16)(v9 >> 3) - v30;
  if (v23)
  {
    if (v23 <= 1) {
      int v24 = 1;
    }
    else {
      int v24 = (unsigned __int16)(v9 >> 3) - v30;
    }
    do
    {
      if (v22 >= HIDWORD(v30)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v29 + v22) = v20;
      unsigned int v22 = v30 + 1;
      LODWORD(v30) = v30 + 1;
      --v24;
    }
    while (v24);
  }
  uint64_t v25 = sub_1CC73661C((uint64_t)a1, (uint64_t)a2, (int *)v29, v22);
  if (v29 != v31) {
    free(v29);
  }
  return v25;
}

uint64_t sub_1CD62D47C(void *a1, unint64_t *a2, int *a3)
{
  uint64_t v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[3];
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2;
  if (v7)
  {
    if (v7 == 2
      || (*(_DWORD *)a2 & 0x80000000) == 0
      || (uint64_t v18 = *(_DWORD *)a2 & 0x7FFFFFFF, v18 >= *(_DWORD *)(v6 + 432)))
    {
      unint64_t v9 = 0;
      goto LABEL_5;
    }
    uint64_t v8 = (unint64_t *)(*(void *)(v6 + 424) + 8 * v18);
  }
  unint64_t v9 = *v8;
LABEL_5:
  uint64_t v19 = sub_1CC7363A4(a3, v6);
  int v20 = v22;
  uint64_t v21 = 0x800000000;
  unint64_t v10 = sub_1CBA15978((unint64_t *)&v19);
  sub_1CC7363F0(a1, v10, a3);
  uint64_t v12 = v11;
  uint64_t v13 = 0;
  uint64_t v14 = 0x800000000000000;
  if ((v9 & 2) == 0) {
    uint64_t v14 = 0x8000000000000;
  }
  uint64_t v15 = v14 & v9;
  while (1)
  {
    if (v15) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v11);
    }
    if (32 * (unsigned __int16)(v9 >> 3) == v13) {
      break;
    }
    if (v21 >= (unint64_t)HIDWORD(v21)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v20 + v21) = *(_DWORD *)(*((void *)v12 + 4) + v13 + 4);
    LODWORD(v21) = v21 + 1;
    v13 += 32;
  }
  uint64_t v16 = sub_1CC73661C((uint64_t)a1, (uint64_t)a2, (int *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

llvm::MachineFunction *sub_1CD62D638(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1CC34E910(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(*(void *)(a1 + 16) + 8) + 5520);
  uint64_t v6 = (llvm::MachineInstr *)v5;
  sub_1CC734FCC((void *)a1, (uint64_t)v4, v5);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v8[0] = 0;
  v8[1] = a2;
  uint64_t v11 = 0;
  llvm::MachineInstr::addOperand(v6, v4, (const llvm::MachineOperand *)v8);
  return v4;
}

llvm::MachineFunction *sub_1CD62D6C4(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8 = sub_1CC34E910(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(*(void *)(a1 + 16) + 8) + 9744);
  uint64_t v10 = (llvm::MachineInstr *)v9;
  sub_1CC734FCC((void *)a1, (uint64_t)v8, v9);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v12 = 0;
  int v13 = a2;
  uint64_t v16 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  uint64_t v14 = 0;
  LODWORD(v15) = a3;
  int v12 = 8;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v12 = 0;
  int v13 = a4;
  uint64_t v16 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  return v8;
}

uint64_t sub_1CD62D79C(void *a1, uint64_t a2, long long *a3)
{
  v16[24] = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = (unint64_t *)a2;
  if (!v6) {
    goto LABEL_6;
  }
  if (v6 != 2)
  {
    uint64_t v8 = a1[3];
    if ((*(_DWORD *)a2 & 0x80000000) != 0)
    {
      uint64_t v9 = *(_DWORD *)a2 & 0x7FFFFFFF;
      if (v9 < *(_DWORD *)(v8 + 432))
      {
        int v7 = (unint64_t *)(*(void *)(v8 + 424) + 8 * v9);
LABEL_6:
        unint64_t v10 = *v7;
        goto LABEL_8;
      }
    }
  }
  unint64_t v10 = 0;
LABEL_8:
  uint64_t v11 = 0x800000000000000;
  if ((v10 & 2) == 0) {
    uint64_t v11 = 0x8000000000000;
  }
  if ((v11 & v10) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  uint64_t v14 = v16;
  uint64_t v15 = 0x800000000;
  sub_1CD62E40C((uint64_t *)&v14, (unsigned __int16)(v10 >> 3), a3);
  uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, void *, void, void))(*a1 + 32))(a1, 77, a2, 1, v14, v15, 0);
  if (v14 != v16) {
    free(v14);
  }
  return v12;
}

llvm::MachineFunction *sub_1CD62D8F8(void *a1, int *a2, int *a3, long long *a4, char a5, __int16 a6, long long *a7)
{
  int v10 = a2[2];
  uint64_t v11 = (uint64_t *)a2;
  if (!v10) {
    goto LABEL_8;
  }
  if (v10 != 2)
  {
    uint64_t v12 = a1[3];
    if (*a2 < 0)
    {
      uint64_t v17 = *a2 & 0x7FFFFFFF;
      if (v17 < *(_DWORD *)(v12 + 432))
      {
        uint64_t v11 = (uint64_t *)(*(void *)(v12 + 424) + 8 * v17);
LABEL_8:
        uint64_t v13 = *v11;
        goto LABEL_5;
      }
    }
  }
  uint64_t v13 = 0;
LABEL_5:
  uint64_t v14 = a1[1];
  long long v18 = *a4;
  uint64_t v19 = *((void *)a4 + 2);
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v14, (uint64_t)&v18, a6 | 1u, v13, a5, a7, 0, 1, 0, 0, 0);
  return sub_1CC737934(a1, 0x5Au, a2, a3, MachineMemOperand);
}

llvm::MachineFunction *sub_1CD62D9C4(void *a1, int *a2, int *a3, long long *a4, char a5, __int16 a6, long long *a7)
{
  __int16 v13 = a6 | 2;
  uint64_t v14 = sub_1CC7363A4(a2, a1[3]);
  uint64_t v15 = a1[1];
  long long v18 = *a4;
  uint64_t v19 = *((void *)a4 + 2);
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v15, (uint64_t)&v18, v13, v14, a5, a7, 0, 1, 0, 0, 0);
  return sub_1CC737D1C(a1, a2, a3, MachineMemOperand);
}

uint64_t sub_1CD62DA74(void *a1, unint64_t *a2, int *a3)
{
  return sub_1CC738034(a1, 124, a2, a3);
}

uint64_t sub_1CD62DA84(uint64_t a1, unint64_t *a2, long long *a3, unsigned int a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2;
  if (v8)
  {
    if (v8 == 2
      || (uint64_t v10 = *(void *)(a1 + 24), (*(_DWORD *)a2 & 0x80000000) == 0)
      || (uint64_t v19 = *(_DWORD *)a2 & 0x7FFFFFFF, v19 >= *(_DWORD *)(v10 + 432)))
    {
      unint64_t v11 = 0;
      *(void *)&long long v20 = 0;
      DWORD2(v20) = 0;
LABEL_5:
      unsigned int v12 = (unsigned __int16)(v11 >> 3);
      goto LABEL_6;
    }
    uint64_t v9 = (unint64_t *)(*(void *)(v10 + 424) + 8 * v19);
  }
  unint64_t v11 = *v9;
  *(void *)&long long v20 = v11;
  DWORD2(v20) = 0;
  if (v11)
  {
    unsigned int v12 = v11 >> 3;
    goto LABEL_6;
  }
  if ((v11 & 4) == 0) {
    goto LABEL_5;
  }
  if ((v11 & 2) != 0) {
    unsigned int v12 = (unsigned __int16)(v11 >> 19);
  }
  else {
    unsigned int v12 = v11 >> 19;
  }
LABEL_6:
  sub_1CB8F1EEC((uint64_t)&v25, v12, 0);
  sub_1CBAB8F38(&v25, 0, a4);
  uint64_t v14 = llvm::ConstantInt::get(****(llvm::ConstantInt *****)(a1 + 8), (llvm::LLVMContext *)&v25, v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, long long *, void *))(*(void *)a1 + 16))(a1, &v20, v14);
  uint64_t v17 = v16;
  if (v26 >= 0x41 && v25) {
    MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
  }
  unint64_t v25 = *a2;
  unsigned int v26 = *((_DWORD *)a2 + 2);
  long long v20 = *a3;
  int v21 = *((_DWORD *)a3 + 4);
  uint64_t v22 = v15;
  uint64_t v23 = v17;
  int v24 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a1 + 32))(a1, 65, &v25, 1, &v20, 2, 0);
}

llvm::MachineFunction *sub_1CD62DC70(uint64_t *a1, _DWORD *a2, long long *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v5 = a2[2];
  if (!v5) {
    goto LABEL_6;
  }
  if (v5 != 2)
  {
    uint64_t v6 = a1[3];
    if ((*a2 & 0x80000000) != 0)
    {
      uint64_t v7 = *a2 & 0x7FFFFFFF;
      if (v7 < *(_DWORD *)(v6 + 432))
      {
        a2 = (_DWORD *)(*(void *)(v6 + 424) + 8 * v7);
LABEL_6:
        unint64_t v8 = *(void *)a2;
        goto LABEL_8;
      }
    }
  }
  unint64_t v8 = 0;
LABEL_8:
  uint64_t v27 = (void *)v8;
  LODWORD(v28) = 0;
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, void, void, void))(*a1 + 32))(a1, 68, &v27, 1, 0, 0, 0);
  uint64_t v11 = v10;
  uint64_t v27 = (void *)513;
  LODWORD(v28) = 0;
  uint64_t v12 = sub_1CC7362A8((uint64_t)a1, (unint64_t *)&v27, 0);
  unint64_t v22 = v8;
  LODWORD(v23) = 0;
  uint64_t v27 = v9;
  uint64_t v28 = v11;
  int v29 = 1;
  long long v30 = *a3;
  int v31 = *((_DWORD *)a3 + 4);
  uint64_t v32 = v12;
  uint64_t v33 = v13;
  int v34 = 1;
  uint64_t v15 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*a1 + 32))(a1, 204, &v22, 1, &v27, 3, 0);
  uint64_t v16 = v14;
  uint64_t v17 = 0x800000000000000;
  if ((v8 & 2) == 0) {
    uint64_t v17 = 0x8000000000000;
  }
  if ((v17 & v8) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v14);
  }
  uint64_t v27 = &v29;
  uint64_t v28 = 0x1000000000;
  sub_1CBF8EBE4((uint64_t)&v27, (unsigned __int16)(v8 >> 3), 0);
  unint64_t v25 = v8;
  int v26 = 0;
  unint64_t v22 = v15;
  uint64_t v23 = v16;
  int v24 = 1;
  v20[0] = v9;
  v20[1] = v11;
  int v21 = 1;
  long long v18 = sub_1CD62DEA0(a1, (uint64_t *)&v25, (int *)&v22, (int *)v20, v27, v28);
  if (v27 != &v29) {
    free(v27);
  }
  return v18;
}

llvm::MachineFunction *sub_1CD62DEA0(uint64_t *a1, uint64_t *a2, int *a3, int *a4, const void *a5, uint64_t a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  sub_1CC7363A4(a3, a1[3]);
  sub_1CC7363A4(a4, a1[3]);
  ShuffleMasuint64_t k = llvm::MachineFunction::allocateShuffleMask(a1[1], a5, a6);
  uint64_t v14 = v13;
  uint64_t v26 = *a2;
  int v27 = *((_DWORD *)a2 + 2);
  long long v22 = *(_OWORD *)a3;
  int v23 = a3[4];
  long long v24 = *(_OWORD *)a4;
  int v25 = a4[4];
  uint64_t v15 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*a1 + 32))(a1, 206, &v26, 1, &v22, 2, 0);
  int v18 = 19;
  uint64_t v19 = 0;
  long long v20 = ShuffleMask;
  uint64_t v21 = v14;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v18);
  return v15;
}

llvm::MachineFunction *sub_1CD62DFF0(void *a1, int a2, long long *a3, uint64_t a4, int a5)
{
  uint64_t v9 = (unsigned __int8 **)(a1 + 4);
  uint64_t v10 = (llvm::MachineFunction *)a1[1];
  uint64_t v11 = 5568;
  if (a5) {
    uint64_t v11 = 5616;
  }
  uint64_t v12 = sub_1CC34E910(v10, v9, *(void *)(a1[2] + 8) + v11);
  uint64_t v14 = (llvm::MachineInstr *)v13;
  sub_1CC734FCC(a1, (uint64_t)v12, v13);
  int v18 = v12;
  uint64_t v19 = v14;
  if (a4)
  {
    uint64_t v15 = 16 * a4;
    do
    {
      long long v16 = *a3++;
      long long v20 = v16;
      sub_1CC7355DC((int *)&v20, a1[3], &v18);
      v15 -= 16;
    }
    while (v15);
    uint64_t v12 = v18;
    uint64_t v14 = v19;
  }
  LODWORD(v20) = 17;
  *((void *)&v20 + 1) = 0;
  int v21 = a2;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v20);
  return v18;
}

llvm::MachineFunction *sub_1CD62E0C8(uint64_t a1, int a2, int a3, int a4, int a5, llvm::MachineMemOperand *a6)
{
  uint64_t v12 = sub_1CC34E910(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(*(void *)(a1 + 16) + 8) + 4752);
  uint64_t v14 = (llvm::MachineInstr *)v13;
  sub_1CC734FCC((void *)a1, (uint64_t)v12, v13);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  int v16 = 0x1000000;
  int v17 = a2;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v16);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v16 = 0;
  int v17 = a3;
  uint64_t v20 = 0;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v16);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v16 = 0;
  int v17 = a4;
  uint64_t v20 = 0;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v16);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v16 = 0;
  int v17 = a5;
  uint64_t v20 = 0;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)&v16);
  llvm::MachineInstr::addMemOperand(v14, v12, a6);
  return v12;
}

llvm::MachineFunction *sub_1CD62E1DC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = sub_1CC34E910(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(*(void *)(a1 + 16) + 8) + 5424);
  unint64_t v8 = (llvm::MachineInstr *)v7;
  sub_1CC734FCC((void *)a1, (uint64_t)v6, v7);
  int v10 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = a2;
  llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)&v10);
  int v10 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = a3;
  llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)&v10);
  return v6;
}

llvm::MachineFunction *sub_1CD62E294(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_1CC34E910(*(llvm::MachineFunction **)(a1 + 8), (unsigned __int8 **)(a1 + 32), *(void *)(*(void *)(a1 + 16) + 8) + 10656);
  unint64_t v8 = (llvm::MachineInstr *)v7;
  sub_1CC734FCC((void *)a1, (uint64_t)v6, v7);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  LODWORD(v10) = 0x1000000;
  HIDWORD(v10) = a2;
  llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)&v10);
  uint64_t v11 = 0;
  uint64_t v12 = a3;
  LODWORD(v13) = 0;
  uint64_t v10 = 11;
  llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)&v10);
  return v6;
}

void *sub_1CD62E354(void *a1)
{
  *a1 = &unk_1F261CD58;
  uint64_t v4 = (unsigned __int8 *)a1[4];
  uint64_t v2 = (uint64_t)(a1 + 4);
  BOOL v3 = v4;
  if (v4) {
    llvm::MetadataTracking::untrack(v2, v3);
  }
  return a1;
}

void sub_1CD62E3A0(void *a1)
{
  *a1 = &unk_1F261CD58;
  BOOL v3 = (unsigned __int8 *)a1[4];
  uint64_t v1 = (uint64_t)(a1 + 4);
  uint64_t v2 = v3;
  if (v3) {
    llvm::MetadataTracking::untrack(v1, v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t *sub_1CD62E40C(uint64_t *result, unint64_t a2, long long *a3)
{
  if (*((unsigned int *)result + 3) < a2)
  {
    *((_DWORD *)result + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = result + 1;
  unint64_t v3 = *((unsigned int *)result + 2);
  if (v3 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *((unsigned int *)result + 2);
  }
  if (v5)
  {
    uint64_t v6 = *result;
    do
    {
      long long v7 = *a3;
      *(_DWORD *)(v6 + 16) = *((_DWORD *)a3 + 4);
      *(_OWORD *)uint64_t v6 = v7;
      v6 += 24;
      --v5;
    }
    while (v5);
    unint64_t v3 = *v4;
  }
  unint64_t v8 = v3 - a2;
  if (v3 < a2)
  {
    uint64_t v9 = *result + 24 * v3;
    do
    {
      long long v10 = *a3;
      *(void *)(v9 + 16) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v9 = v10;
      v9 += 24;
    }
    while (!__CFADD__(v8++, 1));
  }
  *uint64_t v4 = a2;
  return result;
}

void sub_1CD62E510(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD9FF8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC73A454;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCD9FF8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD62E580(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCDA000);
  *(void *)uint64_t v1 = &unk_1F261CD90;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(void *)(v1 + 296) = &unk_1F261CD58;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_DWORD *)(v1 + 368) = 0;
  if (word_1EBCDA010) {
    *(_DWORD *)(v1 + 368) = dword_1EBCDA088;
  }
}

void sub_1CD62E618(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 184))(*(void *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 248) = v4;
  *(void *)(a1 + 256) = v5;
  *(void *)(a1 + 264) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_4:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v7 != &llvm::TargetPassConfig::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_4;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  *(void *)(a1 + 376) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::TargetPassConfig::ID);
  if (*(_DWORD *)(a1 + 368))
  {
    long long v10 = *(uint64_t **)(a1 + 8);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (v11 == v12)
    {
LABEL_9:
      uint64_t v13 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v11 != &llvm::MachineBlockFrequencyInfo::ID)
      {
        v11 += 16;
        if (v11 == v12) {
          goto LABEL_9;
        }
      }
      uint64_t v13 = *(void *)(v11 + 8);
    }
    *(void *)(a1 + 272) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::MachineBlockFrequencyInfo::ID);
    uint64_t v14 = *(uint64_t **)(a1 + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    if (v15 == v16)
    {
LABEL_13:
      uint64_t v17 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v15 != &llvm::MachineBranchProbabilityInfo::ID)
      {
        v15 += 16;
        if (v15 == v16) {
          goto LABEL_13;
        }
      }
      uint64_t v17 = *(void *)(v15 + 8);
    }
    *(void *)(a1 + 280) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::MachineBranchProbabilityInfo::ID);
  }
  else
  {
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
  }
  sub_1CC734E30((void *)(a1 + 296), a2);
  operator new();
}

void sub_1CD62E854(uint64_t a1, llvm::AnalysisUsage *this)
{
  if (*(_DWORD *)(a1 + 368))
  {
    llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineBlockFrequencyInfo::ID);
    llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineBranchProbabilityInfo::ID);
  }
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  sub_1CD632034((uint64_t)this);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, (uint64_t)this);
}

void sub_1CD62E8D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int **a5)
{
  if (a3 == 1)
  {
    if ((*(_DWORD *)a2 & 0x1000000) != 0) {
      int v9 = *(_DWORD *)(a2 + 4);
    }
    else {
      int v9 = **a5;
    }
    if ((*(_DWORD *)a2 & 0x1000000) != 0) {
      int v10 = **a5;
    }
    else {
      int v10 = *(_DWORD *)(a2 + 4);
    }
    uint64_t v11 = sub_1CC734F48((void *)(a1 + 296), 0x13u);
    uint64_t v13 = v12;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v37 = 0x1000000;
    int v38 = v9;
    llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v37);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    int v37 = 0;
    int v38 = v10;
    uint64_t v41 = 0;
    uint64_t v14 = v13;
    uint64_t v15 = v11;
  }
  else
  {
    int v17 = *(_DWORD *)(a2 + 4);
    if (v17 < 0 && (uint64_t v35 = *(void *)(a1 + 256), v36 = v17 & 0x7FFFFFFF, v36 < *(_DWORD *)(v35 + 432))) {
      uint64_t v18 = *(void *)(*(void *)(v35 + 424) + 8 * v36);
    }
    else {
      uint64_t v18 = 0;
    }
    if (*(unsigned char *)(a2 + 3))
    {
      unsigned int v26 = 76;
      if ((v18 & 0xFFFFFFFFFFFFFFF9) != 0 && (v18 & 4) != 0)
      {
        uint64_t v27 = 0x800000000000000;
        if ((v18 & 2) == 0) {
          uint64_t v27 = 0x8000000000000;
        }
        if ((v27 & v18) != 0) {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)0x4C);
        }
        if (a3 == (unsigned __int16)(v18 >> 3)) {
          unsigned int v26 = 77;
        }
        else {
          unsigned int v26 = 79;
        }
      }
      uint64_t v28 = sub_1CC734F48((void *)(a1 + 296), v26);
      long long v30 = v29;
      int v31 = *(_DWORD *)(a2 + 4);
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      int v37 = 0x1000000;
      int v38 = v31;
      llvm::MachineInstr::addOperand(v29, v28, (const llvm::MachineOperand *)&v37);
      uint64_t v32 = *a5;
      uint64_t v33 = a5[1];
      while (v32 != v33)
      {
        int v34 = *v32++;
        uint64_t v39 = 0;
        int v37 = 0;
        int v38 = v34;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v37);
      }
LABEL_10:
      if (*(_DWORD *)(a4 + 24) == 1) {
        operator new[]();
      }
      llvm::report_fatal_error((llvm *)"need testcase to support multiple insertion points", (const llvm::Twine *)1);
    }
    uint64_t v19 = sub_1CC734F48((void *)(a1 + 296), 0x4Au);
    int v21 = v20;
    int v23 = *a5;
    long long v22 = a5[1];
    while (v23 != v22)
    {
      int v24 = *v23++;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      int v37 = 0x1000000;
      int v38 = v24;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
    }
    int v25 = *(_DWORD *)(a2 + 4);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    int v37 = 0;
    int v38 = v25;
    uint64_t v41 = 0;
    uint64_t v14 = v21;
    uint64_t v15 = v19;
  }
  llvm::MachineInstr::addOperand(v14, v15, (const llvm::MachineOperand *)&v37);
  goto LABEL_10;
}

uint64_t sub_1CD62EB98(unsigned char *a1, uint64_t a2)
{
  if (!a1[8])
  {
    a1[8] = 1;
    (**(void (***)(unsigned char *))a1)(a1);
  }
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 8))(a1);
  if (!a1[8])
  {
    a1[8] = 1;
    (**(void (***)(unsigned char *))a1)(a1);
  }
  uint64_t v5 = (uint64_t *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 16))(a1);
  uint64_t result = llvm::ilist_traits<llvm::MachineInstr>::addNodeToList((uint64_t *)(v4 + 40), a2);
  unint64_t v7 = *v5 & 0xFFFFFFFFFFFFFFF8;
  *(void *)a2 = v7 | *(void *)a2 & 7;
  *(void *)(a2 + 8) = v5;
  *(void *)(v7 + 8) = a2;
  *uint64_t v5 = *v5 & 7 | a2;
  return result;
}

uint64_t sub_1CD62ECBC(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  int v6 = a3[2];
  RegBanuint64_t k = llvm::RegisterBankInfo::getRegBank(a1[31], a2[1], a1[32], a1[33]);
  if (a3[2] == 1)
  {
    if (v6 != 1
      || ((unint64_t v8 = *(void *)(*(void *)a3 + 8), v9 = a2[1], (*a2 & 0x1000000) != 0)
        ? (unint64_t v10 = *(void *)(*(void *)a3 + 8))
        : (unint64_t v10 = RegBank),
          (*a2 & 0x1000000) != 0 ? (unint64_t v11 = RegBank) : (unint64_t v11 = v8),
          uint64_t v12 = a1[31],
          uint64_t SizeInBits = llvm::RegisterBankInfo::getSizeInBits(v12, v9, a1[32], a1[33]),
          LODWORD(result) = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t))(*(void *)v12 + 32))(v12, v11, v10, SizeInBits), result == -1))
    {
      LODWORD(result) = -1;
    }
  }
  else
  {
    LODWORD(result) = (*(uint64_t (**)(uint64_t, _DWORD *, unint64_t))(*(void *)a1[31] + 40))(a1[31], a3, RegBank);
  }
  return result;
}

BOOL sub_1CD62EDB4(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2]) {
    return 0;
  }
  if (v2 == -1 && a1[1] == -1 && a1[2] == -1)
  {
    BOOL v11 = 0;
    BOOL v10 = a2[1] == -1;
    goto LABEL_21;
  }
  unint64_t v5 = a2[1];
  unint64_t v6 = a2[2];
  if (v3 == -1 && v5 == -1 && v6 == -1)
  {
    if (v2 == -1 && a1[1] == -1)
    {
      BOOL v11 = a1[2] != -1;
      BOOL v10 = 1;
    }
    else
    {
      BOOL v10 = 1;
      BOOL v11 = 1;
    }
LABEL_21:
    BOOL v12 = 0;
    if (v3 == -1 && v10) {
      BOOL v12 = a2[2] == -1;
    }
    return v11 && v12;
  }
  if (v2 != -2)
  {
    if (v3 != -2 || v5 != -1 || v6 != -1)
    {
      unint64_t v9 = a1[1];
      goto LABEL_44;
    }
LABEL_31:
    BOOL v13 = 1;
    return v3 == -2 && v5 == -1 && v6 == -1 && v13;
  }
  unint64_t v9 = a1[1];
  if (v9 != -1)
  {
    if (v3 != -2 || v5 != -1 || v6 != -1) {
      goto LABEL_44;
    }
    goto LABEL_31;
  }
  unint64_t v22 = a1[2];
  if (v22 == -1 || (unint64_t v9 = -1, v3 == -2) && v5 == -1 && v6 == -1)
  {
    BOOL v13 = v22 != -1;
    return v3 == -2 && v5 == -1 && v6 == -1 && v13;
  }
LABEL_44:
  unint64_t v16 = a1[2];
  if (v16 != v6)
  {
LABEL_59:
    uint64_t v20 = v9 - v5;
    if (v9 < v5) {
      uint64_t v20 = 0;
    }
    uint64_t v21 = v5 - v9;
    if (v5 < v9) {
      uint64_t v21 = 0;
    }
    unint64_t v23 = v2 * v16;
    BOOL v24 = v2 * v16 < v16;
    int v25 = v23 < v2 || v24;
    if (v2) {
      unint64_t v18 = v23;
    }
    else {
      unint64_t v18 = 0;
    }
    if (v2) {
      unsigned int v19 = v25;
    }
    else {
      unsigned int v19 = 0;
    }
    goto LABEL_72;
  }
  BOOL result = v2 < v3;
  if (v9 == v5) {
    return result;
  }
  unint64_t v17 = v2 - v3;
  if (v2 >= v3)
  {
    unint64_t v3 = 0;
    unint64_t v2 = v17;
    goto LABEL_59;
  }
  unint64_t v18 = 0;
  unsigned int v19 = 0;
  v3 -= v2;
  if (v9 >= v5) {
    uint64_t v20 = v9 - v5;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v5 >= v9) {
    uint64_t v21 = v5 - v9;
  }
  else {
    uint64_t v21 = 0;
  }
LABEL_72:
  unint64_t v26 = v3 * v6;
  BOOL v27 = v3 * v6 < v6;
  if (v26 < v3) {
    BOOL v27 = 1;
  }
  if (!v3) {
    BOOL v27 = 0;
  }
  if (__CFADD__(v20, v18) && v9 > v5) {
    unsigned int v29 = 1;
  }
  else {
    unsigned int v29 = v19;
  }
  unsigned int v31 = __CFADD__(v21, v26) && v5 > v9 || v27;
  if (v29 && v31) {
    return 0;
  }
  if (v29 | v31) {
    BOOL v32 = v29 >= v31;
  }
  else {
    BOOL v32 = v20 + v18 >= v26 + v21;
  }
  return !v32;
}

uint64_t sub_1CD62F008(uint64_t *a1, uint64_t *a2)
{
  unsigned int v4 = *((_DWORD *)a1 + 2);
  if (v4 >= *((_DWORD *)a1 + 3))
  {
    sub_1CD630E4C();
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 56 * v4;
  uint64_t v7 = *a2;
  *(_WORD *)(v6 + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t v6 = v7;
  *(void *)(v6 + 24) = 0x200000000;
  *(void *)(v6 + 16) = v6 + 32;
  uint64_t result = v6 + 16;
  if (*((_DWORD *)a2 + 6)) {
    uint64_t result = sub_1CD630FFC(result, (uint64_t)(a2 + 2));
  }
  *(void *)(v5 + 56 * v4 + 48) = a2[6];
  ++*((_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1CD62F0C8(uint64_t a1, llvm::MachineInstr *a2, const llvm::RegisterBankInfo::InstructionMapping *a3, uint64_t a4)
{
  v23[7] = *MEMORY[0x1E4F143B8];
  llvm::RegisterBankInfo::OperandsMapper::OperandsMapper((llvm::RegisterBankInfo::OperandsMapper *)v20, a2, a3, *(llvm::MachineRegisterInfo **)(a1 + 256));
  uint64_t v9 = *(unsigned int *)(a4 + 8);
  if (v9)
  {
    uint64_t v10 = *(void *)a4;
    uint64_t v11 = 56 * v9;
    while (*(unsigned char *)(v10 + 8) && *(_DWORD *)v10 != 3)
    {
      uint64_t v12 = *(unsigned int *)(v10 + 4);
      uint64_t v13 = *((void *)a2 + 4);
      uint64_t v14 = (int *)(*((void *)a3 + 1) + 16 * v12);
      if (*(_DWORD *)v10 != 2)
      {
        uint64_t v15 = v13 + 32 * v12;
        llvm::RegisterBankInfo::OperandsMapper::createVRegs((llvm::RegisterBankInfo::OperandsMapper *)v20, *(_DWORD *)(v10 + 4));
        v19[0] = (int *)llvm::RegisterBankInfo::OperandsMapper::getVRegs((llvm::RegisterBankInfo::OperandsMapper *)v20, v12);
        v19[1] = v16;
        sub_1CD62E8D0(a1, v15, v14[2], v10, v19);
      }
      llvm::MachineRegisterInfo::setRegBank(*(void *)(a1 + 256), *(_DWORD *)(v13 + 32 * v12 + 4), *(void *)(*(void *)v14 + 8));
      v10 += 56;
      v11 -= 56;
      if (!v11) {
        goto LABEL_9;
      }
    }
    uint64_t v17 = 0;
  }
  else
  {
LABEL_9:
    if (*(_DWORD *)v23[6] == -1) {
      llvm::RegisterBankInfo::applyDefaultMapping((uint64_t)v20, v8);
    }
    else {
      (***(void (****)(void, void **))(a1 + 248))(*(void *)(a1 + 248), v20);
    }
    uint64_t v17 = 1;
  }
  if (v22 != v23) {
    free(v22);
  }
  if (v20[0] != &v21) {
    free(v20[0]);
  }
  return v17;
}

uint64_t sub_1CD62F278(uint64_t a1, llvm::MachineInstr *a2)
{
  v18[28] = *MEMORY[0x1E4F143B8];
  if (**((unsigned __int16 **)a2 + 2) - 42 <= 2)
  {
    uint64_t v4 = *(void *)(a1 + 256);
    uint64_t v5 = *((void *)a2 + 4);
    uint64_t v6 = *(void *)(*(void *)(v4 + 24) + 16 * (*(_DWORD *)(v5 + 36) & 0x7FFFFFFF));
    llvm::MachineRegisterInfo::setRegBank(v4, *(_DWORD *)(v5 + 4), v6 & (v6 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8);
    return 1;
  }
  unint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  if (*(_DWORD *)(a1 + 368))
  {
    llvm::RegisterBankInfo::getInstrPossibleMappings(*(llvm::RegisterBankInfo **)(a1 + 248), a2, (unsigned int *)&v14);
    int v9 = DWORD2(v14);
    if (DWORD2(v14)) {
      uint64_t v10 = (const llvm::RegisterBankInfo::InstructionMapping *)sub_1CC73A504((uint64_t *)a1, (unint64_t)a2, (uint64_t **)&v14, (uint64_t)&v16);
    }
    else {
      uint64_t v10 = 0;
    }
    if ((uint64_t *)v14 != &v15) {
      free((void *)v14);
    }
    if (!v9) {
      goto LABEL_10;
    }
LABEL_19:
    uint64_t v7 = sub_1CD62F0C8(a1, a2, v10, (uint64_t)&v16);
    goto LABEL_11;
  }
  uint64_t v10 = (const llvm::RegisterBankInfo::InstructionMapping *)(*(uint64_t (**)(void, llvm::MachineInstr *))(**(void **)(a1 + 248) + 48))(*(void *)(a1 + 248), a2);
  sub_1CC73A70C((uint64_t)&v14, (uint64_t *)a1, (unint64_t)a2, (uint64_t)v10, (uint64_t)&v16, 0);
  if (v14 != __PAIR128__(-1, -1) || v15 != -1) {
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v7 = 0;
LABEL_11:
  uint64_t v11 = v16;
  if (v17)
  {
    uint64_t v12 = (char *)v16 - 40;
    uint64_t v13 = 56 * v17;
    do
    {
      sub_1CD6308C0((char **)&v12[v13]);
      v13 -= 56;
    }
    while (v13);
    uint64_t v11 = v16;
  }
  if (v11 != v18) {
    free(v11);
  }
  return v7;
}

uint64_t sub_1CD62F474(uint64_t a1, uint64_t a2)
{
  if ((**(unsigned char **)(a2 + 360) & 0x10) == 0)
  {
    if (llvm::Function::hasFnAttribute(*(void *)a2, 43)) {
      *(_DWORD *)(a1 + 368) = 0;
    }
    sub_1CD62E618(a1, a2);
  }
  return 0;
}

uint64_t sub_1CD62F658(uint64_t result, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = a2;
  *(_DWORD *)uint64_t result = 1;
  *(_DWORD *)(result + 4) = a3;
  *(_WORD *)(result + 8) = 1;
  *(void *)(result + 16) = result + 32;
  *(void *)(result + 24) = 0x200000000;
  *(void *)(result + 48) = a5;
  uint64_t v7 = *(void *)(a2 + 32);
  int v8 = *(_DWORD *)(v7 + 32 * a3);
  int v9 = *(unsigned __int16 **)(a2 + 16);
  int v10 = *v9;
  if (!*v9 || v10 == 69) {
    goto LABEL_17;
  }
  __int16 v11 = *(_WORD *)(a2 + 44);
  uint64_t v12 = *((void *)v9 + 1);
  if ((v11 & 0xC) == 0 || (v11 & 4) != 0)
  {
    if ((v12 & 0x200) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v12 & 0x200) == 0)
  {
    unint64_t v13 = a2;
    while ((*(_WORD *)(v13 + 44) & 8) != 0)
    {
      unint64_t v13 = *(void *)(v13 + 8);
      if ((*(unsigned char *)(*(void *)(v13 + 16) + 9) & 2) != 0) {
        goto LABEL_11;
      }
    }
LABEL_15:
    operator new();
  }
LABEL_11:
  if (!v10)
  {
LABEL_17:
    if ((v8 & 0x1000000) != 0)
    {
      FirstNonPHI = (void *)llvm::MachineBasicBlock::getFirstNonPHI(*(llvm::MachineBasicBlock **)(a2 + 24));
      if ((void *)(*(void *)(v6 + 24) + 48) != FirstNonPHI) {
        operator new();
      }
      unint64_t v20 = *FirstNonPHI & 0xFFFFFFFFFFFFFFF8;
      if (!v20 || (*(unsigned char *)v20 & 4) == 0)
      {
        while ((*(_WORD *)(v20 + 44) & 4) != 0)
          unint64_t v20 = *(void *)v20 & 0xFFFFFFFFFFFFFFF8;
      }
      goto LABEL_26;
    }
    uint64_t v15 = *(llvm::MachineBasicBlock **)(v7 + 32 * (a3 + 1) + 16);
    unsigned int v16 = *(_DWORD *)(v7 + 32 * a3 + 4);
    uint64_t LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr(v15, 1);
    uint64_t v18 = *((void *)v15 + 7);
    if (v18 == LastNonDebugInstr) {
      goto LABEL_19;
    }
    while (1)
    {
      uint64_t v21 = *(void *)(*(void *)(LastNonDebugInstr + 16) + 8);
      if ((*(_WORD *)(LastNonDebugInstr + 44) & 0xC) != 0 && (*(_WORD *)(LastNonDebugInstr + 44) & 4) == 0)
      {
        uint64_t v23 = LastNonDebugInstr;
        if ((v21 & 0x200) == 0)
        {
          while ((*(_WORD *)(v23 + 44) & 8) != 0)
          {
            uint64_t v23 = *(void *)(v23 + 8);
            if ((*(unsigned char *)(*(void *)(v23 + 16) + 9) & 2) != 0) {
              goto LABEL_32;
            }
          }
LABEL_19:
          operator new();
        }
      }
      else if ((v21 & 0x200) == 0)
      {
        goto LABEL_19;
      }
LABEL_32:
      if (llvm::MachineInstr::findRegisterDefOperandIdx(LastNonDebugInstr, v16, 0, 1, a4) != -1) {
        operator new();
      }
      uint64_t LastNonDebugInstr = *(void *)LastNonDebugInstr & 0xFFFFFFFFFFFFFFF8;
      if (!LastNonDebugInstr || (*(unsigned char *)LastNonDebugInstr & 4) == 0)
      {
        while ((*(_WORD *)(LastNonDebugInstr + 44) & 4) != 0)
          uint64_t LastNonDebugInstr = *(void *)LastNonDebugInstr & 0xFFFFFFFFFFFFFFF8;
      }
      if (LastNonDebugInstr == v18) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if ((v8 & 0x1000000) == 0)
  {
    if (v14 + 48 == a2) {
LABEL_46:
    }
      operator new();
    while (1)
    {
      uint64_t v24 = *(void *)(*(void *)(v6 + 16) + 8);
      if ((*(_WORD *)(v6 + 44) & 0xC) != 0 && (*(_WORD *)(v6 + 44) & 4) == 0)
      {
        unint64_t v26 = v6;
        if ((v24 & 0x200) == 0)
        {
          while ((*(_WORD *)(v26 + 44) & 8) != 0)
          {
            unint64_t v26 = *(void *)(v26 + 8);
            if ((*(unsigned char *)(*(void *)(v26 + 16) + 9) & 2) != 0) {
              goto LABEL_52;
            }
          }
LABEL_26:
          operator new();
        }
      }
      else if ((v24 & 0x200) == 0)
      {
        goto LABEL_26;
      }
LABEL_52:
      unint64_t v6 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
      if (!v6 || (*(unsigned char *)v6 & 4) == 0)
      {
        while ((*(_WORD *)(v6 + 44) & 4) != 0)
          unint64_t v6 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v6 == v14 + 48) {
        goto LABEL_46;
      }
    }
  }
  if (*(void *)(v14 + 88) != *(void *)(v14 + 96)) {
    operator new();
  }
  return result;
}

uint64_t sub_1CD62FB38(uint64_t a1, uint64_t a2)
{
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  if (*(unsigned char *)(a1 + 8)) {
    char v5 = v4;
  }
  else {
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  *(unsigned char *)(a1 + 9) |= result;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  if (v7 >= *(_DWORD *)(a1 + 28)) {
    sub_1CD6314EC();
  }
  *(void *)(*(void *)(a1 + 16) + 8 * v7) = a2;
  *(_DWORD *)(a1 + 24) = v7 + 1;
  return result;
}

uint64_t sub_1CD62FC00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t sub_1CD62FC24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(void *)(*(void *)(v1 + 24) + 56) == v1) {
      return 0;
    }
    unint64_t v2 = *(void *)v1 & 0xFFFFFFFFFFFFFFF8;
    if (!v2) {
      return 0;
    }
    unint64_t v3 = *(void *)(*(void *)(v2 + 16) + 8);
    if ((*(_WORD *)(v2 + 44) & 0xC) == 0 || (*(_WORD *)(v2 + 44) & 4) != 0) {
      return (v3 >> 9) & 1;
    }
    if ((v3 & 0x200) == 0)
    {
      do
      {
        unsigned int v9 = *(unsigned __int16 *)(v2 + 44);
        uint64_t result = (v9 >> 3) & 1;
        if ((v9 & 8) == 0) {
          break;
        }
        unint64_t v2 = *(void *)(v2 + 8);
      }
      while ((*(unsigned char *)(*(void *)(v2 + 16) + 9) & 2) == 0);
      return result;
    }
    return 1;
  }
  unint64_t v6 = *(void *)(*(void *)(v1 + 16) + 8);
  if ((*(_WORD *)(v1 + 44) & 0xC) == 0 || (*(_WORD *)(v1 + 44) & 4) != 0) {
    return (v6 >> 9) & 1;
  }
  if ((v6 & 0x200) != 0) {
    return 1;
  }
  do
  {
    unsigned int v8 = *(unsigned __int16 *)(v1 + 44);
    uint64_t result = (v8 >> 3) & 1;
    if ((v8 & 8) == 0) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
  }
  while ((*(unsigned char *)(*(void *)(v1 + 16) + 9) & 2) == 0);
  return result;
}

uint64_t sub_1CD62FCF4(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisIfAvailable = llvm::AnalysisResolver::getAnalysisIfAvailable(*(llvm::PMDataManager ***)(a2 + 8), &llvm::MachineBlockFrequencyInfo::ID);
  if (!AnalysisIfAvailable) {
    return 1;
  }
  char v4 = (llvm::MachineBlockFrequencyInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisIfAvailable
                                                                                     + 96))(AnalysisIfAvailable, &llvm::MachineBlockFrequencyInfo::ID);
  if (!v4) {
    return 1;
  }
  char v5 = *(const llvm::MachineBasicBlock **)(*(void *)(a1 + 16) + 24);

  return llvm::MachineBlockFrequencyInfo::getBlockFreq(v4, v5);
}

uint64_t sub_1CD62FD80(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisIfAvailable = llvm::AnalysisResolver::getAnalysisIfAvailable(*(llvm::PMDataManager ***)(a2 + 8), &llvm::MachineBlockFrequencyInfo::ID);
  if (!AnalysisIfAvailable) {
    return 1;
  }
  char v4 = (llvm::MachineBlockFrequencyInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisIfAvailable
                                                                                     + 96))(AnalysisIfAvailable, &llvm::MachineBlockFrequencyInfo::ID);
  if (!v4) {
    return 1;
  }
  char v5 = *(const llvm::MachineBasicBlock **)(a1 + 16);

  return llvm::MachineBlockFrequencyInfo::getBlockFreq(v4, v5);
}

unint64_t sub_1CD62FE08(uint64_t a1)
{
  unint64_t result = llvm::MachineBasicBlock::SplitCriticalEdge(*(void **)(a1 + 16), *(const llvm::MachineBasicBlock **)(a1 + 24), *(void *)(a1 + 32), 0);
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_1CD62FE3C(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisIfAvailable = llvm::AnalysisResolver::getAnalysisIfAvailable(*(llvm::PMDataManager ***)(a2 + 8), &llvm::MachineBlockFrequencyInfo::ID);
  if (!AnalysisIfAvailable) {
    return 1;
  }
  char v5 = (llvm::MachineBlockFrequencyInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisIfAvailable
                                                                                     + 96))(AnalysisIfAvailable, &llvm::MachineBlockFrequencyInfo::ID);
  if (!v5) {
    return 1;
  }
  unint64_t v6 = v5;
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v9 = llvm::AnalysisResolver::getAnalysisIfAvailable(*(llvm::PMDataManager ***)(a2 + 8), &llvm::MachineBranchProbabilityInfo::ID);
    if (v9)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::MachineBranchProbabilityInfo::ID);
      if (v10)
      {
        __int16 v11 = (llvm::MachineBranchProbabilityInfo *)v10;
        uint64_t BlockFreq = llvm::MachineBlockFrequencyInfo::getBlockFreq(v6, *(const llvm::MachineBasicBlock **)(a1 + 16));
        unsigned int EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(v11, *(const llvm::MachineBasicBlock **)(a1 + 16), *(const llvm::MachineBasicBlock **)(a1 + 24));
        return llvm::BlockFrequency::operator*((unint64_t *)&BlockFreq, EdgeProbability);
      }
    }
    return 1;
  }
  uint64_t v7 = *(const llvm::MachineBasicBlock **)(a1 + 24);

  return llvm::MachineBlockFrequencyInfo::getBlockFreq(v5, v7);
}

uint64_t sub_1CD62FF64(uint64_t a1)
{
  return llvm::MachineBasicBlock::canSplitCriticalEdge(*(llvm::MachineBasicBlock **)(a1 + 16), *(const llvm::MachineBasicBlock **)(a1 + 24));
}

llvm *sub_1CD62FF70(llvm *a1)
{
  unint64_t v2 = llvm::dbgs(a1);
  unint64_t v3 = sub_1CD62FFE0((unint64_t *)a1, v2);
  unint64_t result = llvm::dbgs(v3);
  char v5 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v5 >= *((void *)result + 3))
  {
    return llvm::raw_ostream::write(result, 10);
  }
  else
  {
    *((void *)result + 4) = v5 + 1;
    *char v5 = 10;
  }
  return result;
}

llvm::raw_ostream *sub_1CD62FFE0(unint64_t *a1, llvm::raw_ostream *a2)
{
  if (*a1 == -2)
  {
    if (a1[1] == -1 && a1[2] == -1)
    {
      char v4 = "saturated";
      goto LABEL_12;
    }
  }
  else if (*a1 == -1 && a1[1] == -1 && a1[2] == -1)
  {
    char v4 = "impossible";
LABEL_12:
    return sub_1CB8E509C(a2, v4);
  }
  char v5 = llvm::raw_ostream::operator<<(a2, a1[2]);
  unint64_t v6 = sub_1CB8E509C(v5, " * ");
  uint64_t v7 = llvm::raw_ostream::operator<<(v6, *a1);
  unsigned int v8 = sub_1CB8E509C(v7, " + ");
  unint64_t v9 = a1[1];

  return llvm::raw_ostream::operator<<(v8, v9);
}

uint64_t sub_1CD6300C0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1CD6300C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 24)) {
    return *(void *)(v1 + 56);
  }
  else {
    return v1 + 48;
  }
}

void sub_1CD6300E8()
{
}

uint64_t sub_1CD6300FC()
{
  return 0;
}

uint64_t sub_1CD630104()
{
  return 1;
}

uint64_t sub_1CD63010C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1CD630114(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 24) + 56);
}

void sub_1CD630124()
{
}

BOOL sub_1CD630138(uint64_t a1)
{
  return ((*(void *)(*(void *)(a1 + 16) + 96) - *(void *)(*(void *)(a1 + 16) + 88)) & 0x7FFFFFFF0) != 0
      && ((*(void *)(*(void *)(a1 + 24) + 72) - *(void *)(*(void *)(a1 + 24) + 64)) & 0x7FFFFFFF0) != 0;
}

void sub_1CD630170(llvm::Pass *a1)
{
  sub_1CD63094C(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD6301A8()
{
  return "RegBankSelect";
}

void sub_1CD6301B8(uint64_t a1@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  char v4 = v6;
  uint64_t v5 = 0x600000000;
  sub_1CB90D610((uint64_t)&v4, 1uLL, 0);
  int v2 = 11;
  LODWORD(v7) = 11;
  unint64_t v3 = v4;
  *(void *)v4 |= 0x21uLL;
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  if (v5)
  {
    sub_1CBAF13E8(a1, (uint64_t)&v4);
    int v2 = v7;
    unint64_t v3 = v4;
  }
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v6) {
    free(v3);
  }
}

void sub_1CD6302A0(uint64_t a1@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  char v4 = v6;
  uint64_t v5 = 0x600000000;
  sub_1CB90D610((uint64_t)&v4, 1uLL, 0);
  int v2 = 11;
  LODWORD(v7) = 11;
  unint64_t v3 = v4;
  *(void *)v4 |= 0x40uLL;
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  if (v5)
  {
    sub_1CBAF13E8(a1, (uint64_t)&v4);
    int v2 = v7;
    unint64_t v3 = v4;
  }
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v6) {
    free(v3);
  }
}

void sub_1CD630384(uint64_t a1@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  char v4 = v6;
  uint64_t v5 = 0x600000000;
  sub_1CB90D610((uint64_t)&v4, 1uLL, 0);
  int v2 = 11;
  LODWORD(v7) = 11;
  unint64_t v3 = v4;
  *(void *)v4 |= 2uLL;
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  if (v5)
  {
    sub_1CBAF13E8(a1, (uint64_t)&v4);
    int v2 = v7;
    unint64_t v3 = v4;
  }
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v6) {
    free(v3);
  }
}

uint64_t sub_1CD630468(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 24);
}

uint64_t sub_1CD630474(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 24);
  uint64_t result = *(void *)(a1 + 16);
  if (!v1)
  {
    uint64_t v3 = *(void *)(result + 8);
    if (v3) {
      BOOL v4 = v3 == *(void *)(result + 24) + 48;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4) {
      return *(void *)(result + 24) + 48;
    }
    else {
      return *(void *)(result + 8);
    }
  }
  return result;
}

void sub_1CD6304A4()
{
}

uint64_t sub_1CD6304B8()
{
  return 1;
}

void *sub_1CD6304C0(void *a1)
{
  *a1 = &unk_1F261CF40;
  int v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F261CFA8;
  BOOL v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

void *sub_1CD6305A8(void *a1)
{
  *a1 = &unk_1F261CFA8;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD6305FC(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  int v12 = 0;
  uint64_t v8 = sub_1CD42FA04(a1 + 152, (void *)a1, a3, a4, a5, a6, &v12);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1CB920400();
  return sub_1CD630690(v11);
}

uint64_t sub_1CD630690(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CD6306A8(void *a1)
{
  sub_1CD6304C0(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CD6306E0(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CD6306EC(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CD6306FC(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_3:
    BOOL v4 = &unk_1F261CFF8;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_1CD630780(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CD630798(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CD6307A0(void *a1)
{
  *a1 = &unk_1F261CFA8;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD630814(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CD63081C(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CD630830(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CD630844(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CD630858(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1CD630884()
{
}

char **sub_1CD6308C0(char **a1)
{
  int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    int v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
      }
      v4 -= 8;
    }
    while (v4);
    int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CD63094C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F261CD90;
  *((void *)a1 + 37) = &unk_1F261CD58;
  int v2 = (unsigned __int8 *)*((void *)a1 + 41);
  if (v2) {
    llvm::MetadataTracking::untrack((uint64_t)a1 + 328, v2);
  }
  uint64_t v3 = *((void *)a1 + 36);
  *((void *)a1 + 36) = 0;
  if (v3) {
    MEMORY[0x1D25D9CE0](v3, 0x20C40A4A59CD2);
  }

  sub_1CBA0E6AC(a1);
}

void sub_1CD6309EC(long long *a1, _WORD *a2, _WORD *a3, uint64_t a4)
{
  sub_1CB883A14((uint64_t)&qword_1EBCDA008, 0, 0);
  dword_1EBCDA088 = 0;
  qword_1EBCDA090 = (uint64_t)&unk_1F261CFF8;
  unk_1EBCDA098 = 0;
  qword_1EBCDA008 = (uint64_t)&unk_1F261CF40;
  qword_1EBCDA0A0 = (uint64_t)&unk_1F261CFA8;
  qword_1EBCDA0A8 = (uint64_t)&qword_1EBCDA008;
  qword_1EBCDA0B0 = (uint64_t)&unk_1EBCDA0C0;
  qword_1EBCDA0B8 = 0x800000000;
  qword_1EBCDA240 = (uint64_t)&unk_1F261D038;
  qword_1EBCDA258 = (uint64_t)&qword_1EBCDA240;
  xmmword_1EBCDA028 = *a1;
  word_1EBCDA012 = word_1EBCDA012 & 0xFF9F | (32 * (*a2 & 3));
  word_1EBCDA012 = word_1EBCDA012 & 0xFFF8 | *a3 & 7;
  sub_1CD630B98(*(void *)a4, *(_DWORD *)(a4 + 8));

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDA008);
}

void sub_1CD630B20()
{
}

void *sub_1CD630B34()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F261D038;
  return result;
}

void sub_1CD630B6C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F261D038;
}

void sub_1CD630B98(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = a1;
    uint64_t v3 = a1 + 40 * a2;
    do
    {
      sub_1CD630BE4(*(unsigned __int8 **)v2, *(void *)(v2 + 8), *(_DWORD *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

void sub_1CD630BE4(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a1;
  v11[1] = a2;
  __n128 v11[2] = a4;
  v11[3] = a5;
  _DWORD v11[4] = &unk_1F261CFF8;
  char v13 = 1;
  int v12 = a3;
  unint64_t v7 = sub_1CD630CD8((unint64_t)v11);
  uint64_t v8 = qword_1EBCDA0B0 + 48 * qword_1EBCDA0B8;
  long long v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 32) = &unk_1F261D018;
  char v10 = *(unsigned char *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(unsigned char *)(v8 + 44) = v10;
  *(void *)(v8 + 32) = &unk_1F261CFF8;
  LODWORD(qword_1EBCDA0B8) = qword_1EBCDA0B8 + 1;
  llvm::cl::AddLiteralOption(qword_1EBCDA0A8, a1, a2);
}

unint64_t sub_1CD630CD8(unint64_t result)
{
  if (qword_1EBCDA0B8 >= HIDWORD(qword_1EBCDA0B8))
  {
    if (qword_1EBCDA0B0 > result || qword_1EBCDA0B0 + 48 * (unint64_t)qword_1EBCDA0B8 <= result) {
      sub_1CD630D54();
    }
    sub_1CD630D54();
  }
  return result;
}

void sub_1CD630D54()
{
}

void sub_1CD630E4C()
{
}

uint64_t sub_1CD630F2C(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)result;
    uint64_t v5 = *(void *)result + 56 * v2;
    uint64_t result = a2 + 16;
    uint64_t v6 = v4 + 16;
    do
    {
      uint64_t v8 = v6 - 16;
      uint64_t v7 = *(void *)(v6 - 16);
      *(_WORD *)(result - 8) = *(_WORD *)(v6 - 8);
      *(void *)(result - 16) = v7;
      *(void *)uint64_t result = result + 16;
      *(void *)(result + 8) = 0x200000000;
      if (*(_DWORD *)(v6 + 8)) {
        uint64_t result = sub_1CD630FFC(result, v6);
      }
      *(void *)(result + 32) = *(void *)(v6 + 32);
      result += 56;
      v6 += 56;
    }
    while (v8 + 56 != v5);
    uint64_t v9 = *(unsigned int *)(v3 + 8);
    if (v9)
    {
      uint64_t v10 = *(void *)v3 - 40;
      uint64_t v11 = 56 * v9;
      do
      {
        uint64_t result = (uint64_t)sub_1CD6308C0((char **)(v10 + v11));
        v11 -= 56;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_1CD630FFC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(char **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        uint64_t v21 = *(char **)a1;
        if (v5)
        {
          uint64_t v22 = 0;
          do
          {
            uint64_t v23 = *(void *)&v4[v22];
            *(void *)&v4[v22] = 0;
            uint64_t v24 = *(void *)&v21[v22];
            *(void *)&v21[v22] = v23;
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 32))(v24);
            }
            v22 += 8;
          }
          while (8 * v5 != v22);
          uint64_t v6 = *(unsigned int *)(a1 + 8);
          int v25 = &v21[v22];
          uint64_t v21 = *(char **)a1;
        }
        else
        {
          int v25 = *(char **)a1;
        }
        unint64_t v26 = &v21[8 * v6];
        while (v26 != v25)
        {
          uint64_t v28 = *((void *)v26 - 1);
          v26 -= 8;
          uint64_t v27 = v28;
          *(void *)unint64_t v26 = 0;
          if (v28) {
            (*(void (**)(uint64_t))(*(void *)v27 + 32))(v27);
          }
        }
        *(_DWORD *)(a1 + 8) = v5;
        uint64_t v29 = *(unsigned int *)(a2 + 8);
        if (v29)
        {
          uint64_t v30 = 8 * v29;
          uint64_t v31 = *(void *)a2 - 8;
          do
          {
            uint64_t v32 = *(void *)(v31 + v30);
            *(void *)(v31 + v30) = 0;
            if (v32) {
              (*(void (**)(uint64_t))(*(void *)v32 + 32))(v32);
            }
            v30 -= 8;
          }
          while (v30);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          if (v6)
          {
            uint64_t v34 = 8 * v6;
            uint64_t v35 = *(void *)a1 - 8;
            do
            {
              uint64_t v36 = *(void *)(v35 + v34);
              *(void *)(v35 + v34) = 0;
              if (v36) {
                (*(void (**)(uint64_t))(*(void *)v36 + 32))(v36);
              }
              v34 -= 8;
            }
            while (v34);
          }
          *(_DWORD *)(a1 + 8) = 0;
          sub_1CD631360();
        }
        if (v6)
        {
          uint64_t v7 = *(char **)a1;
          uint64_t v8 = 8 * v6;
          do
          {
            uint64_t v9 = *(void *)v4;
            *(void *)uint64_t v4 = 0;
            uint64_t v10 = *(void *)v7;
            *(void *)uint64_t v7 = v9;
            if (v10) {
              (*(void (**)(uint64_t))(*(void *)v10 + 32))(v10);
            }
            v4 += 8;
            v7 += 8;
            v8 -= 8;
          }
          while (v8);
        }
        else
        {
          uint64_t v6 = 0;
        }
        uint64_t v11 = *(char **)a2;
        uint64_t v12 = *(unsigned int *)(a2 + 8);
        if (v6 != v12)
        {
          char v13 = (void *)(*(void *)a1 + 8 * v6);
          uint64_t v14 = &v11[8 * v6];
          uint64_t v15 = 8 * v12 - 8 * v6;
          do
          {
            uint64_t v16 = *(void *)v14;
            *(void *)uint64_t v14 = 0;
            v14 += 8;
            *v13++ = v16;
            v15 -= 8;
          }
          while (v15);
          uint64_t v11 = *(char **)a2;
        }
        *(_DWORD *)(a1 + 8) = v5;
        uint64_t v17 = *(unsigned int *)(a2 + 8);
        if (v17)
        {
          uint64_t v18 = 8 * v17;
          unsigned int v19 = v11 - 8;
          do
          {
            uint64_t v20 = *(void *)&v19[v18];
            *(void *)&v19[v18] = 0;
            if (v20) {
              (*(void (**)(uint64_t))(*(void *)v20 + 32))(v20);
            }
            v18 -= 8;
          }
          while (v18);
        }
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      sub_1CD6312BC((char **)a1, (char **)a2);
    }
  }
  return a1;
}

double sub_1CD6312BC(char **a1, char **a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    uint64_t v7 = v4 - 8;
    do
    {
      uint64_t v8 = *(void *)&v7[v6];
      *(void *)&v7[v6] = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
      }
      v6 -= 8;
    }
    while (v6);
    uint64_t v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_1CD631360()
{
}

uint64_t sub_1CD631430(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void **)(a3 + 8);
  if (v3 == v4)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void **)(a2 + 8);
    do
    {
      ++v5;
      uint64_t v6 = (void *)(*v6 & 0xFFFFFFFFFFFFFFF8);
    }
    while (v4 != v6);
  }
  uint64_t v7 = *(unsigned int *)(result + 8);
  if (v5 + v7 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v3 != v4)
  {
    uint64_t v8 = (void *)(*(void *)result + 8 * v7);
    do
    {
      uint64_t v3 = (void *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      *v8++ = v3;
    }
    while (v4 != v3);
  }
  *(_DWORD *)(result + 8) = v7 + v5;
  return result;
}

void sub_1CD6314EC()
{
}

void sub_1CD6315D4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA268, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC73AE6C;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDA268, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t sub_1CD631644(uint64_t a1)
{
  sub_1CB8483A0(a1, (uint64_t)&unk_1EBCDA260);
  *(void *)unsigned int v2 = &unk_1F261D080;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA268, memory_order_acquire) != -1)
  {
    v6[0] = sub_1CC73AE6C;
    v6[1] = &PassRegistry;
    uint64_t v5 = v6;
    std::__call_once(&qword_1EBCDA268, &v5, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD6316FC(llvm::Pass *a1)
{
  sub_1CBA0E6AC(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD631734()
{
}

void sub_1CD631770(char a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2 != 54282728 && a2 != 54283368 && a2 != 54284310)
    {
      char v17 = 6;
      strcpy((char *)v16, "denied");
      sub_1CD631A44(v16);
      if (v17 < 0)
      {
        uint64_t v5 = (void *)v16[0];
        goto LABEL_14;
      }
      return;
    }
    int v2 = os_fault_with_payload();
    if (v2)
    {
      int v3 = v2;
      int v4 = *__error();
      if (v4 > 44)
      {
        if (v4 == 45)
        {
          char v10 = 8;
          strcpy((char *)v9, "disabled");
          sub_1CD631A44(v9);
          if (v10 < 0)
          {
            uint64_t v5 = (void *)v9[0];
            goto LABEL_14;
          }
          return;
        }
        if (v4 == 106)
        {
          char v12 = 14;
          strcpy((char *)v11, "quota exceeded");
          sub_1CD631A44(v11);
          if (v12 < 0)
          {
            uint64_t v5 = (void *)v11[0];
            goto LABEL_14;
          }
          return;
        }
      }
      else
      {
        if (v4 == 1)
        {
          HIBYTE(v15[2]) = 17;
          strcpy((char *)v15, "denied by sandbox");
          sub_1CD631A44(v15);
          if (SHIBYTE(v15[2]) < 0)
          {
            uint64_t v5 = (void *)v15[0];
            goto LABEL_14;
          }
          return;
        }
        if (v4 == 16)
        {
          char v14 = 12;
          strcpy((char *)v13, "too frequent");
          sub_1CD631A44(v13);
          if (v14 < 0)
          {
            uint64_t v5 = (void *)v13[0];
LABEL_14:
            operator delete(v5);
            return;
          }
          return;
        }
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 67109120;
      int v20 = v3;
      uint64_t v6 = MEMORY[0x1E4F14500];
      uint64_t v7 = "fallback report suppressed (unknown error %d)";
      uint32_t v8 = 8;
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)buf = 0;
      uint64_t v6 = MEMORY[0x1E4F14500];
      uint64_t v7 = "fallback report generated (but might not be delivered)";
      uint32_t v8 = 2;
    }
    _os_log_impl(&dword_1CB82C000, v6, OS_LOG_TYPE_DEFAULT, v7, buf, v8);
    return;
  }
  HIBYTE(v18[2]) = 16;
  strcpy((char *)v18, "already reported");
  sub_1CD631A44(v18);
  if (SHIBYTE(v18[2]) < 0)
  {
    uint64_t v5 = (void *)v18[0];
    goto LABEL_14;
  }
}

void sub_1CD631A44(uint64_t *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) < 0) {
      a1 = (uint64_t *)*a1;
    }
    int v2 = 136315138;
    int v3 = a1;
    _os_log_impl(&dword_1CB82C000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "fallback report suppressed (%s)", (uint8_t *)&v2, 0xCu);
  }
}

BOOL sub_1CD631AF0(unsigned int a1, uint64_t a2, int a3)
{
  uint64_t VRegDef = llvm::MachineRegisterInfo::getVRegDef(a2, a1);
  if (!VRegDef) {
    return 0;
  }
  uint64_t v6 = VRegDef;
  while (1)
  {
    while (1)
    {
      if ((*(_WORD *)(v6 + 44) & 0x10) != 0
        || (*(_WORD *)(*(void *)(*(void *)(*(void *)(v6 + 24) + 32) + 8) + 1020) & 4) != 0)
      {
        return 1;
      }
      unsigned int v7 = **(unsigned __int16 **)(v6 + 16);
      if (v7 <= 0xBC) {
        break;
      }
      if (v7 - 189 >= 2) {
        goto LABEL_23;
      }
      if (a3) {
        return 1;
      }
      if (!sub_1CD631AF0(*(unsigned int *)(*(void *)(v6 + 32) + 36), a2, 0)
        || (uint64_t v8 = 1, (sub_1CD631AF0(*(unsigned int *)(*(void *)(v6 + 32) + 68), a2, 1) & 1) == 0))
      {
        if (!sub_1CD631AF0(*(unsigned int *)(*(void *)(v6 + 32) + 36), a2, 1)) {
          return 0;
        }
        uint64_t v6 = llvm::MachineRegisterInfo::getVRegDef(a2, *(_DWORD *)(*(void *)(v6 + 32) + 68));
        a3 = 0;
        uint64_t v8 = 0;
        if (v6) {
          continue;
        }
      }
      return v8;
    }
    if (v7 - 187 >= 2) {
      break;
    }
    if (sub_1CD631AF0(*(unsigned int *)(*(void *)(v6 + 32) + 36), a2, a3 & 1)) {
      return 1;
    }
    uint64_t v6 = llvm::MachineRegisterInfo::getVRegDef(a2, *(_DWORD *)(*(void *)(v6 + 32) + 68));
    if (!v6) {
      return 0;
    }
  }
  if (v7 == 77)
  {
    uint64_t v14 = *(void *)(v6 + 32);
    unsigned int NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs((llvm::MachineInstr *)v6);
    uint64_t v16 = *(unsigned int *)(v6 + 40);
    if (NumExplicitDefs == v16) {
      return 1;
    }
    uint64_t v17 = 32 * v16 - 32 * NumExplicitDefs - 32;
    uint64_t v18 = (unsigned int *)(v14 + 32 * NumExplicitDefs + 4);
    do
    {
      unsigned int v19 = *v18;
      v18 += 8;
      uint64_t v8 = sub_1CD631AF0(v19, a2, a3 & 1);
      if (v8) {
        BOOL v20 = v17 == 0;
      }
      else {
        BOOL v20 = 1;
      }
      v17 -= 32;
    }
    while (!v20);
    return v8;
  }
  if (v7 != 121 || (uint64_t v9 = *(void *)(*(void *)(v6 + 32) + 48)) == 0)
  {
LABEL_23:
    if (a3)
    {
      unsigned int v12 = v7 - 178;
      if (v12 <= 8) {
        return (0x103u >> v12) & 1;
      }
    }
    return 0;
  }
  char v10 = (llvm::detail::IEEEFloat *)(v9 + 32);
  if (*(_UNKNOWN **)(v9 + 32) != &unk_1CFB2E344)
  {
    int v11 = *(unsigned char *)(v9 + 52) & 7;
    uint64_t v8 = v11 != 1;
    if (v11 != 1 || ((a3 ^ 1) & 1) != 0) {
      return v8;
    }
    return !llvm::detail::IEEEFloat::isSignaling(v10);
  }
  uint64_t v21 = *(void *)(v9 + 40);
  int v22 = *(unsigned char *)(v21 + 28) & 7;
  uint64_t v8 = v22 != 1;
  if (v22 == 1 && ((a3 ^ 1) & 1) == 0)
  {
    char v10 = (llvm::detail::IEEEFloat *)(v21 + 8);
    return !llvm::detail::IEEEFloat::isSignaling(v10);
  }
  return v8;
}

uint64_t sub_1CD631D34(void *a1, void *a2)
{
  int v2 = (llvm::Value *)(*a2 & 0xFFFFFFFFFFFFFFF8);
  if ((*a2 & 4) != 0 && v2)
  {
    if (*((_DWORD *)v2 + 2) != 4) {
      return 0;
    }
    uint64_t v3 = (1 << *(unsigned char *)(*(void *)(a1[7] + 8)
                          + 40 * (*(_DWORD *)(a1[7] + 32) + *((_DWORD *)v2 + 4))
                          + 16)) | a2[1];
    return 63 - __clz(v3 & -v3);
  }
  uint64_t v4 = 0;
  if ((*a2 & 4) != 0 || !v2) {
    return v4;
  }
  uint64_t DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*a1 + 40));

  return llvm::Value::getPointerAlignment(v2, DataLayout);
}

void sub_1CD631DF8(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v18[6] = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x80000000) != 0 && (a1 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432)) {
    uint64_t v5 = *(void *)(*(void *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v16 = v18;
  uint64_t v17 = 0xC00000000;
  if ((v5 & 0xFFFFFFFFFFFFFFF9) != 0 && (v5 & 4) != 0)
  {
    sub_1CC73D648(a1, a2, (uint64_t)&v14);
    if (v15 && (uint64_t v6 = v14) != 0 && **(_WORD **)(v14 + 16) == 77)
    {
      if (*(_DWORD *)(v14 + 40) == 1)
      {
        *(void *)a3 = a3 + 16;
        *(void *)(a3 + 8) = 0xC00000000;
LABEL_15:
        LOBYTE(v8) = 1;
        goto LABEL_18;
      }
      unint64_t v10 = 0;
      uint64_t v11 = 36;
      while (1)
      {
        unint64_t v12 = sub_1CC73EE64(a2, *(_DWORD *)(*(void *)(v6 + 32) + v11));
        unint64_t v8 = HIDWORD(v12);
        if (!HIDWORD(v12)) {
          break;
        }
        if (v17 >= HIDWORD(v17)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v16 + v17) = v12;
        ++v10;
        int v13 = v17 + 1;
        LODWORD(v17) = v17 + 1;
        v11 += 32;
        if (v10 >= (*(_DWORD *)(v6 + 40) - 1))
        {
          *(void *)a3 = a3 + 16;
          *(void *)(a3 + 8) = 0xC00000000;
          if (v13) {
            goto LABEL_14;
          }
          goto LABEL_15;
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
    }
  }
  else
  {
    unint64_t v7 = sub_1CC73EE64(a2, a1);
    unint64_t v8 = HIDWORD(v7);
    if (HIDWORD(v7))
    {
      *((_DWORD *)v16 + v17) = v7;
      int v9 = v17;
      *(void *)a3 = a3 + 16;
      *(void *)(a3 + 8) = 0xC00000000;
      LODWORD(v17) = v9 + 1;
      if (v9 != -1) {
LABEL_14:
      }
        sub_1CC0778D4(a3, (uint64_t)&v16);
      goto LABEL_15;
    }
  }
  *(unsigned char *)a3 = 0;
LABEL_18:
  *(unsigned char *)(a3 + 64) = v8;
  if (v16 != v18) {
    free(v16);
  }
}

void sub_1CD632034(uint64_t a1)
{
}

uint64_t sub_1CD632044(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  sub_1CC73D648(a2, a1, (uint64_t)v21);
  if (v22) {
    uint64_t v7 = v21[0];
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = **(unsigned __int16 **)(v7 + 16);
  if (a4 && v8 == 68)
  {
    v21[0] = 0;
LABEL_7:
    uint64_t v9 = *(void *)(a3 + 24);
    if (v9) {
      return (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 48))(v9, v21);
    }
LABEL_30:
    sub_1CB920400();
    return (uint64_t)sub_1CD6321FC(v18, v19, v20);
  }
  if (v8 != 77)
  {
    if (v8 != 120) {
      return 0;
    }
    v21[0] = *(void *)(*(void *)(v7 + 32) + 48);
    goto LABEL_7;
  }
  int v11 = *(_DWORD *)(v7 + 40);
  int v12 = v11 - 1;
  if (v11 != 1)
  {
    uint64_t v13 = 36;
    do
    {
      sub_1CC73D648(*(_DWORD *)(*(void *)(v7 + 32) + v13), a1, (uint64_t)v21);
      if (v22) {
        uint64_t v14 = v21[0];
      }
      else {
        uint64_t v14 = 0;
      }
      int v15 = **(unsigned __int16 **)(v14 + 16);
      if (a4 && v15 == 68)
      {
        v21[0] = 0;
        uint64_t v16 = *(void *)(a3 + 24);
        if (!v16) {
          goto LABEL_30;
        }
        if (((*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 48))(v16, v21) & 1) == 0) {
          return 0;
        }
      }
      else
      {
        if (v15 != 120) {
          return 0;
        }
        v21[0] = *(void *)(*(void *)(v14 + 32) + 48);
        uint64_t v17 = *(void *)(a3 + 24);
        if (!v17) {
          goto LABEL_30;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 48))(v17, v21);
        if (!result) {
          return result;
        }
      }
      v13 += 32;
      --v12;
    }
    while (v12);
  }
  return 1;
}

llvm::SmallPtrSetImplBase *sub_1CD6321FC(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t a3)
{
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 32;
  *((void *)this + 2) = 32;
  *((_DWORD *)this + 6) = 0;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      uint64_t v6 = *a2++;
      sub_1CB89694C(this, v6);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

void sub_1CD632260(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = v2 > 0x1FF;
  BOOL v4 = v2 >= 0x200;
  unint64_t v5 = v2 - 512;
  unint64_t v6 = v2 < 0x200;
  if (v4)
  {
    *(void *)(a1 + 32) = v5;
    unint64_t v10 = *(void **)(a1 + 8);
    *(void *)&long long v25 = *v10;
    *(void *)(a1 + 8) = v10 + 1;
    sub_1CB904CD8(a1, &v25);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 24) - *(void *)a1;
    uint64_t v8 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
    if ((v7 >> 3) - (v8 >> 3) < v6)
    {
      uint64_t v15 = v8 >> 3;
      unint64_t v16 = v7 >> 2;
      unint64_t v17 = (v8 >> 3) + v6;
      if (v16 <= v17) {
        unint64_t v18 = v17;
      }
      else {
        unint64_t v18 = v16;
      }
      uint64_t v27 = a1 + 24;
      if (v18)
      {
        if (v18 >> 61) {
          sub_1CB833614();
        }
        unsigned int v19 = (char *)operator new(8 * v18);
      }
      else
      {
        unsigned int v19 = 0;
      }
      *(void *)&long long v25 = v19;
      *((void *)&v25 + 1) = &v19[8 * (v15 - v3)];
      *(void *)&long long v26 = *((void *)&v25 + 1);
      *((void *)&v26 + 1) = &v19[8 * v18];
      uint64_t v24 = operator new(0x1000uLL);
      sub_1CD3F23B4((uint64_t)&v25, &v24);
      uint64_t v20 = *(void **)(a1 + 8);
      uint64_t v21 = *(void **)(a1 + 16);
      while (v21 != v20)
      {
        sub_1CD3F24DC((void **)&v25, --v21);
        uint64_t v20 = *(void **)(a1 + 8);
      }
      char v22 = *(void **)a1;
      long long v23 = v26;
      *(_OWORD *)a1 = v25;
      *(_OWORD *)(a1 + 16) = v23;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      uint64_t v9 = -(uint64_t)v6;
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        *(void *)&long long v25 = operator new(0x1000uLL);
        sub_1CD3F23B4(a1, &v25);
        BOOL v4 = __CFADD__(v9++, 1);
        if (v4) {
          goto LABEL_20;
        }
      }
      if (!v9)
      {
LABEL_20:
        uint64_t v13 = *(void *)(a1 + 32);
        goto LABEL_17;
      }
      uint64_t v11 = 0;
      do
      {
        *(void *)&long long v25 = operator new(0x1000uLL);
        sub_1CD3F24DC((void **)a1, &v25);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v12 = 511;
        }
        else {
          uint64_t v12 = 512;
        }
        uint64_t v13 = v12 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v13;
        ++v11;
      }
      while (-v9 != v11);
      v3 -= v9;
LABEL_17:
      for (*(void *)(a1 + 32) = v13 - (v3 << 9); v3; --v3)
      {
        uint64_t v14 = *(void **)(a1 + 8);
        *(void *)&long long v25 = *v14;
        *(void *)(a1 + 8) = v14 + 1;
        sub_1CB904CD8(a1, &v25);
      }
    }
  }
}

llvm::APInt *sub_1CD63245C(llvm::APInt *this, llvm::APInt *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((unsigned char *)this + 24))
    {
      if (*((_DWORD *)this + 2) > 0x40u || *((_DWORD *)a2 + 2) > 0x40u)
      {
        llvm::APInt::assignSlowCase(this, a2);
      }
      else
      {
        *(void *)this = *(void *)a2;
        *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
      }
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    }
    else
    {
      unsigned int v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 2) = v5;
      if (v5 > 0x40) {
        llvm::APInt::initSlowCase(this, a2);
      }
      *(void *)this = *(void *)a2;
      *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
      *((unsigned char *)this + 24) = 1;
    }
  }
  else if (*((unsigned char *)this + 24))
  {
    if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
      MEMORY[0x1D25D9CB0]();
    }
    *((unsigned char *)this + 24) = 0;
  }
  return this;
}

void sub_1CD632548()
{
}

void *sub_1CD63255C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261D140;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD6325A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261D140;
  a2[1] = v2;
  return result;
}

void sub_1CD6325D0()
{
}

void *sub_1CD6325E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261D188;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD63262C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261D188;
  a2[1] = v2;
  return result;
}

void llvm::AGXPseudoWaitPlacement::getAnalysisUsage(llvm::AGXPseudoWaitPlacement *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::setPreservesCFG(a2);
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::LiveIntervals::ID);
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::SlotIndexes::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::SlotIndexes::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)this, (uint64_t)a2);
}

void llvm::createAGXPreRAAnalysisPass(llvm *this)
{
}

void llvm::initializeAGXPreRAAnalysisPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA270, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC744178;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCDA270, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::initializeGPUCFGLoweringPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA280, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC746984;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCDA280, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createGPUCFGLoweringPass()
{
}

uint64_t sub_1CD632900(uint64_t a1, uint64_t a2, llvm::Twine *this)
{
  v7[0] = a1;
  v7[1] = a2;
  __int16 v8 = 0;
  llvm::Twine::str(this, __p);
  sub_1CD63295C((uint64_t)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

llvm::raw_ostream *sub_1CD63295C(uint64_t a1, uint64_t a2)
{
  sub_1CD6329D4((llvm::raw_ostream **)a1, a2);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(v3 + 872);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 864);
    uint64_t v6 = 48 * v4;
    do
    {
      sub_1CC74AF7C((uint64_t *)a1, v5);
      v5 += 48;
      v6 -= 48;
    }
    while (v6);
  }
  uint64_t v7 = *(llvm::raw_ostream **)a1;

  return sub_1CB8E509C(v7, "}\n");
}

llvm::raw_ostream *sub_1CD6329D4(llvm::raw_ostream **a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 23);
  int v5 = v4;
  uint64_t v6 = v4 & 0x7F;
  if (v5 < 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = *a1;
  if (v6)
  {
    __int16 v8 = sub_1CB8E509C(v7, "digraph \"");
    llvm::DOT::EscapeString((char *)a2, (uint64_t)&__p);
    if (v23 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    if (v23 >= 0) {
      size_t v10 = v23 & 0x7F;
    }
    else {
      size_t v10 = v22;
    }
    uint64_t v11 = llvm::raw_ostream::write(v8, p_p, v10);
    sub_1CB8E509C(v11, "\" {\n");
    if (v23 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    sub_1CB8E509C(v7, "digraph unnamed {\n");
  }
  char v12 = *(unsigned char *)(a2 + 23);
  int v13 = v12;
  uint64_t v14 = v12 & 0x7F;
  if (v13 < 0) {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  if (v14)
  {
    uint64_t v15 = sub_1CB8E509C(*a1, "\tlabel=\"");
    llvm::DOT::EscapeString((char *)a2, (uint64_t)&__p);
    unint64_t v16 = v23 >= 0 ? (const char *)&__p : (const char *)__p;
    size_t v17 = v23 >= 0 ? v23 & 0x7F : v22;
    unint64_t v18 = llvm::raw_ostream::write(v15, v16, v17);
    sub_1CB8E509C(v18, "\";\n");
    if (v23 < 0) {
      operator delete(__p);
    }
  }
  unsigned int v19 = *a1;
  char v23 = 0;
  LOBYTE(__p) = 0;
  llvm::raw_ostream::write(v19, (const char *)&__p, 0);
  if (v23 < 0) {
    operator delete(__p);
  }
  return sub_1CB8E509C(*a1, "\n");
}

char *sub_1CD632B50(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(a3 + 8);
  if (!v4) {
    goto LABEL_8;
  }
  char v5 = 0;
  char v6 = 0;
  uint64_t v7 = *(unsigned int **)a3;
  uint64_t v8 = 4 * v4;
  do
  {
    unsigned int v9 = *v7++;
    uint64_t v10 = *(void *)(a3 + 864) + 48 * v9;
    v5 |= v10 == a2;
    v6 |= *(void *)(a2 + 16) == *(void *)(v10 + 16);
    v8 -= 4;
  }
  while (v8);
  if (v5)
  {
    result[23] = 10;
    strcpy(result, "style=bold");
    return result;
  }
  if (v6)
  {
    uint64_t result = (char *)operator new(0x20uLL);
    *(void *)uint64_t v3 = result;
    *(_OWORD *)(v3 + 8) = xmmword_1CFB1D050;
    strcpy(result, "style=filled,color=\"#00ff0080\"");
  }
  else
  {
LABEL_8:
    result[23] = 0;
    *uint64_t result = 0;
  }
  return result;
}

void sub_1CD632C30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    std::to_string(&v13, *(_DWORD *)(v3 + 24));
    char v5 = std::string::insert(&v13, 0, "bb.");
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v14, ".");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v16 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    __int16 v18 = 260;
    size_t v17 = __p;
    Name = llvm::MachineBasicBlock::getName(*(llvm::MachineBasicBlock **)(a2 + 16));
    __int16 v12 = 261;
    v11[0] = (uint64_t)Name;
    v11[1] = v10;
    sub_1CB8F1E58((uint64_t *)&v17, v11, (uint64_t)v19);
    llvm::Twine::str((llvm::Twine *)v19, (void *)a1);
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 23) = 9;
    strcpy((char *)a1, "(null-bb)");
  }
}

llvm::raw_ostream *sub_1CD632D58(llvm::raw_ostream *result, llvm::raw_ostream *a2, unsigned int *a3)
{
  uint64_t v3 = *(unsigned int ***)a3;
  uint64_t v4 = *(unsigned int *)(*(void *)a3 + 8);
  if (v4)
  {
    char v5 = *v3;
    uint64_t v6 = (uint64_t)&(*v3)[v4];
    uint64_t v7 = v3[108];
    std::string::size_type v8 = v5;
    do
    {
      while (1)
      {
        unsigned int v9 = *v8;
        if (&v7[12 * *v8] != a3) {
          break;
        }
        if (++v8 == (unsigned int *)v6) {
          goto LABEL_11;
        }
      }
      ++v8;
    }
    while (*((void *)a3 + 2) != *(void *)&v7[12 * v9 + 4] && v8 != (unsigned int *)v6);
    do
    {
LABEL_11:
      while (1)
      {
        unsigned int v11 = *v5;
        if (&v7[12 * *v5] != a3) {
          break;
        }
        if (++v5 == (unsigned int *)v6) {
          goto LABEL_19;
        }
      }
      ++v5;
    }
    while (*((void *)a3 + 2) != *(void *)&v7[12 * v11 + 4] && v5 != (unsigned int *)v6);
  }
LABEL_19:
  if (*((unsigned char *)result + 16)) {
    return sub_1CB8E509C(a2, "</tr><tr>");
  }
  return result;
}

uint64_t sub_1CD632E14(unsigned int **a1)
{
  uint64_t v1 = a1[1];
  if (!*((unsigned char *)a1 + 24)) {
    return *((void *)v1 + 108) + 48 * **a1;
  }
  uint64_t v2 = v1[2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(unsigned int **)v1;
  uint64_t v4 = a1[2];
  uint64_t v5 = 4 * v2;
  uint64_t v6 = *((void *)v1 + 108);
  while (1)
  {
    uint64_t result = v6 + 48 * *v3;
    if (v4 != (unsigned int *)result && *((void *)v4 + 2) == *(void *)(v6 + 48 * *v3 + 16)) {
      break;
    }
    ++v3;
    v5 -= 4;
    if (!v5) {
      return 0;
    }
  }
  return result;
}

void sub_1CD632E8C(llvm::raw_ostream **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1CD632E14((unsigned int **)a3);
  if (v6)
  {
    char v7 = *(unsigned char *)(a3 + 24);
    if (v7)
    {
      strcpy(__p, "style=dotted,minlen=5");
      char v7 = 21;
    }
    else
    {
      __p[0] = 0;
    }
    char v9 = v7;
    sub_1CD460084(a1, a2, v6, (uint64_t)__p);
    if (v9 < 0) {
      operator delete(*(void **)__p);
    }
  }
}

uint64_t sub_1CD632F2C(uint64_t a1, uint64_t a2, llvm::Twine *this)
{
  v7[0] = a1;
  v7[1] = a2;
  __int16 v8 = 0;
  llvm::Twine::str(this, __p);
  sub_1CD632F88((uint64_t)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

llvm::raw_ostream *sub_1CD632F88(uint64_t a1, uint64_t a2)
{
  sub_1CD6329D4((llvm::raw_ostream **)a1, a2);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (v4)
  {
    unint64_t v5 = *(void *)v3;
    uint64_t v6 = v4 << 6;
    do
    {
      sub_1CC74B86C((llvm::raw_ostream **)a1, v5);
      v5 += 64;
      v6 -= 64;
    }
    while (v6);
  }
  char v7 = *(llvm::raw_ostream **)a1;

  return sub_1CB8E509C(v7, "}\n");
}

uint64_t sub_1CD632FFC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void *)(*(void *)a2 + 2136);
  unsigned int v4 = *(_DWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(v3 + 864);
  uint64_t v6 = v5 + 48 * v4;
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v8 = v6 + 24;
  uint64_t v7 = v9;
  uint64_t v10 = *(unsigned int *)(v3 + 8);
  if (v10)
  {
    unsigned int v11 = *(unsigned int **)v3;
    __int16 v12 = (void *)(v5 + 48 * v4 + 16);
    uint64_t v13 = 4 * v10;
    uint64_t v14 = v13;
    uint64_t v15 = v11;
    while (1)
    {
      uint64_t v16 = *v15;
      if (v4 != v16 && *v12 == *(void *)(v5 + 48 * v16 + 16)) {
        break;
      }
      ++v15;
      v14 -= 4;
      if (!v14)
      {
        uint64_t v17 = 0;
        goto LABEL_7;
      }
    }
    uint64_t v17 = *v2 + (v16 << 6);
LABEL_7:
    unsigned int v18 = *(_DWORD *)(v8 + 8);
    while (v4 == *v11 || *v12 != *(void *)(v5 + 48 * *v11 + 16))
    {
      ++v11;
      v13 -= 4;
      if (!v13)
      {
        BOOL v19 = 0;
        goto LABEL_13;
      }
    }
    BOOL v19 = *v2 != 0;
  }
  else
  {
    uint64_t v17 = 0;
    BOOL v19 = 0;
    unsigned int v18 = *(_DWORD *)(v8 + 8);
  }
LABEL_13:
  uint64_t v20 = *(void *)(a2 + 40);
  *(void *)uint64_t result = v7;
  *(void *)(result + 8) = v2;
  *(void *)(result + 16) = a2;
  *(unsigned char *)(result + 24) = v17 != 0;
  *(void *)(result + 32) = v7 + 4 * v18;
  *(void *)(result + 40) = v2;
  *(void *)(result + 48) = a2;
  *(unsigned char *)(result + 56) = v19;
  *(void *)(result + 64) = v20;
  *(void *)(result + 72) = v2;
  *(void *)(result + 80) = a2;
  *(_DWORD *)(result + 88) = v18 == 0;
  return result;
}

uint64_t sub_1CD633110(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void *)(*(void *)a2 + 2136);
  unsigned int v4 = *(_DWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(v3 + 864);
  uint64_t v6 = v5 + 48 * v4;
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(unsigned int *)(v6 + 32);
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    uint64_t v10 = *(unsigned int **)v3;
    unsigned int v11 = (void *)(v5 + 48 * v4 + 16);
    uint64_t v12 = 4 * v9;
    uint64_t v13 = v12;
    uint64_t v14 = v10;
    do
    {
      uint64_t v15 = *v14;
      if (v4 != v15 && *v11 == *(void *)(v5 + 48 * v15 + 16))
      {
        uint64_t v16 = *v2 + (v15 << 6);
        goto LABEL_7;
      }
      ++v14;
      v13 -= 4;
    }
    while (v13);
    uint64_t v16 = 0;
LABEL_7:
    while (v4 == *v10 || *v11 != *(void *)(v5 + 48 * *v10 + 16))
    {
      ++v10;
      v12 -= 4;
      if (!v12) {
        goto LABEL_12;
      }
    }
    BOOL v17 = *v2 != 0;
  }
  else
  {
    uint64_t v16 = 0;
LABEL_12:
    BOOL v17 = 0;
  }
  uint64_t v18 = v7 + 4 * v8;
  uint64_t v19 = *(void *)(a2 + 40);
  uint64_t v20 = *(unsigned int *)(a2 + 48);
  *(void *)uint64_t result = v18;
  *(void *)(result + 8) = v2;
  *(void *)(result + 16) = a2;
  *(unsigned char *)(result + 24) = v16 != 0;
  *(void *)(result + 32) = v18;
  *(void *)(result + 40) = v2;
  *(void *)(result + 48) = a2;
  *(unsigned char *)(result + 56) = v17;
  *(void *)(result + 64) = v19 + 4 * v20;
  *(void *)(result + 72) = v2;
  *(void *)(result + 80) = a2;
  *(_DWORD *)(result + 88) = 1;
  return result;
}

llvm::raw_ostream *sub_1CD633220(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  sub_1CD632FFC((uint64_t)v8, a3);
  uint64_t result = (llvm::raw_ostream *)sub_1CD633110((uint64_t)&v7, a3);
  if (*(unsigned char *)(a1 + 16))
  {
    return sub_1CB8E509C(a2, "</tr><tr>");
  }
  return result;
}

void sub_1CD6332A8(llvm::raw_ostream **a1, unint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 88);
  if (v6) {
    unint64_t v7 = **(void **)(a3 + 72) + ((unint64_t)**(unsigned int **)(a3 + 64) << 6);
  }
  else {
    unint64_t v7 = sub_1CD63334C((unsigned int **)a3);
  }
  if (v7)
  {
    sub_1CD6333C8((char *)__p, *(unsigned char *)(a3 + 24), v6);
    sub_1CD460084(a1, a2, v7, (uint64_t)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t sub_1CD63334C(unsigned int **a1)
{
  uint64_t v1 = a1[1];
  if (*((unsigned char *)a1 + 24))
  {
    uint64_t v2 = (unsigned int **)*((void *)v1 + 267);
    uint64_t v3 = *((unsigned int *)v2 + 2);
    if (!v3) {
      return 0;
    }
    unsigned int v4 = *v2;
    unsigned int v5 = a1[2][8];
    uint64_t v6 = 4 * v3;
    while (1)
    {
      uint64_t v7 = *v4;
      if (v5 != v7 && *(void *)&v2[108][12 * v5 + 4] == *(void *)&v2[108][12 * v7 + 4]) {
        break;
      }
      ++v4;
      v6 -= 4;
      if (!v6) {
        return 0;
      }
    }
  }
  else
  {
    uint64_t v7 = **a1;
  }
  return *(void *)v1 + (v7 << 6);
}

void sub_1CD6333C8(char *a1, char a2, int a3)
{
  if (a3)
  {
    a1[23] = 8;
    strcpy(a1, "dir=back");
  }
  else
  {
    if (a2)
    {
      strcpy((char *)&__p, "style=dotted,minlen=5");
      char v4 = 21;
    }
    else
    {
      char v4 = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v4;
    unsigned int v5 = std::string::append(&__p, "color=lightgrey,");
    *(std::string *)a1 = *v5;
    v5->__r_.__value_.__r.__words[0] = 0;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t sub_1CD633488(uint64_t a1, uint64_t a2, llvm::Twine *this)
{
  v7[0] = a1;
  v7[1] = a2;
  __int16 v8 = 0;
  llvm::Twine::str(this, __p);
  sub_1CD6334E4((uint64_t)v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

llvm::raw_ostream *sub_1CD6334E4(uint64_t a1, uint64_t a2)
{
  sub_1CD6329D4((llvm::raw_ostream **)a1, a2);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(v3 + 72);
  if (v4)
  {
    unint64_t v5 = *(void *)(v3 + 64);
    uint64_t v6 = 48 * v4;
    do
    {
      sub_1CC74C130(a1, v5);
      v5 += 48;
      v6 -= 48;
    }
    while (v6);
  }
  uint64_t v7 = *(llvm::raw_ostream **)a1;

  return sub_1CB8E509C(v7, "}\n");
}

void sub_1CD63355C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v33 = 0;
  int v24 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  uint64_t v31 = v32;
  int v30 = 0;
  char v23 = &unk_1F2646F30;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v5 = a3 + 48 * *(unsigned int *)(a2 + 8);
  std::to_string(&v16, *(_DWORD *)(*(void *)(v5 + 16) + 24));
  uint64_t v6 = std::string::insert(&v16, 0, "bb");
  std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  __int16 v8 = std::string::append(&v17, ".");
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v19 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  __int16 v21 = 260;
  uint64_t v20 = __p;
  Name = llvm::MachineBasicBlock::getName(*(llvm::MachineBasicBlock **)(v5 + 16));
  __int16 v15 = 261;
  v14[0] = (uint64_t)Name;
  v14[1] = v11;
  sub_1CB8F1E58((uint64_t *)&v20, v14, (uint64_t)v22);
  llvm::Twine::print((llvm::Twine *)v22, (llvm::raw_ostream *)&v23);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = sub_1CB8E509C((llvm::raw_ostream *)&v23, " (NodePtr=");
  sub_1CD098D14(v12, *(unsigned int *)(a2 + 8), 0, 0, 0);
  sub_1CB8E509C(v12, ")");
  if (*((char *)v31 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *v31, (unint64_t)v31[1]);
  }
  else
  {
    long long v13 = *(_OWORD *)v31;
    *(void *)(a1 + 16) = v31[2];
    *(_OWORD *)a1 = v13;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
}

void sub_1CD633734(uint64_t a1, uint64_t a2)
{
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v21 = 0;
  int v12 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  std::string::size_type v19 = v20;
  int v18 = 0;
  uint64_t v11 = &unk_1F2646F30;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v4 = sub_1CB8E509C((llvm::raw_ostream *)&v11, "EntryNestingLevel=");
  sub_1CD098D14(v4, *(unsigned int *)(a2 + 24), 0, 0, 0);
  sub_1CB8E509C(v4, "\n");
  uint64_t v5 = sub_1CB8E509C((llvm::raw_ostream *)&v11, "ExitNestingLevel=");
  sub_1CD098D14(v5, *(unsigned int *)(a2 + 28), 0, 0, 0);
  sub_1CB8E509C(v5, "\n");
  if (*(_DWORD *)(a2 + 32))
  {
    uint64_t v6 = sub_1CB8E509C((llvm::raw_ostream *)&v11, "UnstructuredID=");
    sub_1CD098D14(v6, *(unsigned int *)(a2 + 32), 0, 0, 0);
    sub_1CB8E509C(v6, "\n");
  }
  if (*(_DWORD *)(a2 + 36))
  {
    std::string::size_type v7 = sub_1CB8E509C((llvm::raw_ostream *)&v11, "PrologExtraCndEnds=");
    sub_1CD098D14(v7, *(unsigned int *)(a2 + 36), 0, 0, 0);
    sub_1CB8E509C(v7, "\n");
  }
  if (*(_DWORD *)(a2 + 40))
  {
    __int16 v8 = sub_1CB8E509C((llvm::raw_ostream *)&v11, "LoopEndPrologs=");
    sub_1CD098D14(v8, *(unsigned int *)(a2 + 40), 0, 0, 0);
    sub_1CB8E509C(v8, "\n");
  }
  __int16 v9 = *(_WORD *)(a2 + 44);
  if (v9)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "UnstructuredCndEnd\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 2) != 0)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "SkipUnstructuredSuccessorEmit\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 4) != 0)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "InvertPredicate\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 8) != 0)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "LoopBegin\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 0x10) != 0)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "IfBegin\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 0x20) != 0)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "IfElseBegin\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 0x40) != 0)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "ElseBegin\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 0x80) != 0)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "UnstructuredProlog\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 0x100) != 0)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "LoopEndEpilog\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 0x200) != 0)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "LoopBackedge\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 0x400) != 0)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "LoopBreak\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 0x800) != 0)
  {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "OptimizedUnstructuredLoopExit\n");
    __int16 v9 = *(_WORD *)(a2 + 44);
  }
  if ((v9 & 0x1000) != 0) {
    sub_1CB8E509C((llvm::raw_ostream *)&v11, "OptimizedLoopEpilog\n");
  }
  if (*((char *)v19 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *v19, (unint64_t)v19[1]);
  }
  else
  {
    long long v10 = *(_OWORD *)v19;
    *(void *)(a1 + 16) = v19[2];
    *(_OWORD *)a1 = v10;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v11);
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
}

uint64_t sub_1CD633A8C(uint64_t a1)
{
  uint64_t v1 = 0;
  switch(*(_DWORD *)(a1 + 16))
  {
    case 1:
      uint64_t v2 = (void *)(*(void *)a1 + 64);
      uint64_t v3 = (unsigned int *)(*(void *)(a1 + 8) + 12);
      goto LABEL_5;
    case 2:
      uint64_t v2 = (void *)(*(void *)a1 + 64);
      uint64_t v3 = (unsigned int *)(*(void *)(a1 + 8) + 16);
      goto LABEL_5;
    case 3:
      uint64_t v2 = (void *)(*(void *)a1 + 64);
      uint64_t v3 = (unsigned int *)(*(void *)(a1 + 8) + 20);
LABEL_5:
      uint64_t v1 = *v2 + 48 * *v3;
      break;
    default:
      return v1;
  }
  return v1;
}

void sub_1CD633AF8(llvm::raw_ostream **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1CD633A8C(a3);
  if (v6)
  {
    int v7 = *(_DWORD *)(a3 + 16);
    if (v7 == 3)
    {
      char v9 = 19;
      strcpy(__p, "style=\"grey,dotted\"");
    }
    else if (v7 == 2)
    {
      char v9 = 9;
      strcpy(__p, "color=red");
    }
    else
    {
      char v9 = 0;
      __p[0] = 0;
    }
    sub_1CD460084(a1, a2, v6, (uint64_t)__p);
    if (v9 < 0) {
      operator delete(*(void **)__p);
    }
  }
}

uint64_t *sub_1CD633BD0(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    unsigned int v3 = *((_DWORD *)a2 + 2);
    uint64_t v4 = *((unsigned int *)a1 + 2);
    if (v4 >= v3)
    {
      if (v3)
      {
        uint64_t v6 = *a2;
        uint64_t v7 = *a2 + 24 * v3;
        uint64_t v8 = *a1;
        do
        {
          *(void *)uint64_t v8 = *(void *)v6;
          *(void *)(v8 + 8) = *(void *)(v6 + 8);
          *(_DWORD *)(v8 + 16) = *(_DWORD *)(v6 + 16);
          v6 += 24;
          v8 += 24;
        }
        while (v6 != v7);
      }
    }
    else
    {
      if (*((_DWORD *)a1 + 3) < v3)
      {
        *((_DWORD *)a1 + 2) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v10 = *a2;
        uint64_t v11 = *a2 + 24 * v4;
        uint64_t v12 = *a1;
        do
        {
          *(void *)uint64_t v12 = *(void *)v10;
          *(void *)(v12 + 8) = *(void *)(v10 + 8);
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v10 + 16);
          v10 += 24;
          v12 += 24;
        }
        while (v10 != v11);
      }
      else
      {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *((unsigned int *)a2 + 2);
      if (v4 != v5) {
        memcpy((void *)(*a1 + 24 * v4), (const void *)(*a2 + 24 * v4), *a2 + 24 * v5 - (*a2 + 24 * v4));
      }
    }
    *((_DWORD *)a1 + 2) = v3;
  }
  return a1;
}

uint64_t sub_1CD633CF4(uint64_t a1, unsigned int a2)
{
  v14[64] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD633E8C(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  char v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *char v9 = v10;
      v9[1] = *(void *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD633E8C(a1, v14, v9);
}

uint64_t sub_1CD633E8C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    char v9 = (void *)(result + 520);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    char v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CC74D69C((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      uint64_t *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void llvm::initializeGPUCodeGen(llvm *this, llvm::PassRegistry *a2)
{
  llvm::initializeGPUCFGLoweringPass(this, a2);
  llvm::initializeGPUConditionalFlattenerPass(this, v3);
  llvm::initializeGPUIterateCombinePass(this, v4);
  llvm::initializeGPUSampleSinkPass(this, v5);
  llvm::initializeGPUWaitPlacementPassPass(this, v6);

  llvm::initializeAGXPreRAAnalysisPass(this, v7);
}

void llvm::initializeGPUConditionalFlattenerPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA4C8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC75422C;
    v4[1] = &v2;
    unint64_t v3 = v4;
    std::__call_once(&qword_1EBCDA4C8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createGPUConditionalFlattenerPass(llvm *this, const llvm::GPUConditionalizer *a2)
{
}

unint64_t *sub_1CD6340A0(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  char v9 = result;
  while (2)
  {
    uint64_t v10 = a2 - 1;
LABEL_3:
    for (uint64_t i = 1 - a3; ; ++i)
    {
      uint64_t v12 = (char *)a2 - (char *)v9;
      unint64_t v13 = a2 - v9;
      if (!(!v5 & v4))
      {
        switch(v13)
        {
          case 0uLL:
          case 1uLL:
            return result;
          case 2uLL:
            unint64_t v21 = *v9;
            if (*v10 < *v9)
            {
              *char v9 = *v10;
              unint64_t *v10 = v21;
            }
            break;
          case 3uLL:
            uint64_t result = sub_1CBB0A088(v9, v9 + 1, a2 - 1);
            break;
          case 4uLL:
            uint64_t result = sub_1CBB0A328(v9, v9 + 1, v9 + 2, a2 - 1);
            break;
          case 5uLL:
            uint64_t result = sub_1CBB0A3A8(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
            break;
          default:
            JUMPOUT(0);
        }
        return result;
      }
      if (v12 <= 191)
      {
        size_t v22 = v9 + 1;
        BOOL v24 = v9 == a2 || v22 == a2;
        if (a4)
        {
          if (!v24)
          {
            uint64_t v25 = 8;
            uint64_t v26 = v9;
            do
            {
              unint64_t v28 = *v26;
              unint64_t v27 = v26[1];
              uint64_t v26 = v22;
              if (v27 < v28)
              {
                uint64_t v29 = v25;
                do
                {
                  *(unint64_t *)((char *)v9 + v29) = v28;
                  uint64_t v30 = v29 - 8;
                  if (v29 == 8)
                  {
                    uint64_t v31 = v9;
                    goto LABEL_46;
                  }
                  unint64_t v28 = *(unint64_t *)((char *)v9 + v29 - 16);
                  v29 -= 8;
                }
                while (v27 < v28);
                uint64_t v31 = (unint64_t *)((char *)v9 + v30);
LABEL_46:
                unint64_t *v31 = v27;
              }
              size_t v22 = v26 + 1;
              v25 += 8;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            unint64_t v33 = *v9;
            unint64_t v32 = v9[1];
            char v9 = v22;
            if (v32 < v33)
            {
              do
              {
                *size_t v22 = v33;
                unint64_t v33 = *(v22 - 2);
                --v22;
              }
              while (v32 < v33);
              *size_t v22 = v32;
            }
            size_t v22 = v9 + 1;
          }
          while (v9 + 1 != a2);
        }
        return result;
      }
      if (i == 1)
      {
        if (v9 != a2)
        {
          return (unint64_t *)sub_1CBB0A44C((uint64_t)v9, a2, a2);
        }
        return result;
      }
      unint64_t v14 = v13 >> 1;
      uint64_t v15 = &v9[v13 >> 1];
      if ((unint64_t)v12 >= 0x401)
      {
        sub_1CBB0A088(v9, &v9[v13 >> 1], a2 - 1);
        sub_1CBB0A088(v9 + 1, v15 - 1, a2 - 2);
        sub_1CBB0A088(v9 + 2, &v9[v14 + 1], a2 - 3);
        sub_1CBB0A088(v15 - 1, v15, &v9[v14 + 1]);
        unint64_t v16 = *v9;
        *char v9 = *v15;
        *uint64_t v15 = v16;
      }
      else
      {
        sub_1CBB0A088(&v9[v13 >> 1], v9, a2 - 1);
      }
      if ((a4 & 1) == 0 && *(v9 - 1) >= *v9)
      {
        uint64_t result = sub_1CBB0A0F8(v9, (uint64_t *)a2);
        uint64_t v20 = result;
        goto LABEL_16;
      }
      uint64_t v17 = sub_1CC75699C(v9, a2);
      if ((v18 & 1) == 0) {
        goto LABEL_61;
      }
      BOOL v19 = sub_1CC756A50(v9, v17);
      uint64_t v20 = v17 + 1;
      uint64_t result = (unint64_t *)sub_1CC756A50(v17 + 1, a2);
      if (result) {
        break;
      }
      if (!v19)
      {
LABEL_61:
        a3 = -i;
        uint64_t result = (unint64_t *)sub_1CD6340A0(v9, v17, -i, a4 & 1);
        a4 = 0;
        char v9 = v17 + 1;
        goto LABEL_3;
      }
LABEL_16:
      char v9 = v20;
    }
    a3 = -i;
    a2 = v17;
    if (!v19) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CD63444C(uint64_t result, uint64_t *a2, void *a3, llvm::TargetInstrInfo *a4)
{
  uint64_t v4 = result;
  uint64_t v5 = a3[1];
  int v6 = (unsigned __int16 **)(a3 + 6);
  if (a3 + 6 != (void *)a3[7])
  {
    while (1)
    {
      int v6 = (unsigned __int16 **)((unint64_t)*v6 & 0xFFFFFFFFFFFFFFF8);
      uint64_t result = sub_1CB834754((uint64_t)v6);
      if (!result) {
        break;
      }
      if ((unsigned __int16 **)a3[7] == v6) {
        goto LABEL_4;
      }
    }
    uint64_t result = llvm::TargetInstrInfo::isUnpredicatedTerminator(a4, (const llvm::MachineInstr *)v6);
    if (result)
    {
      uint64_t v11 = *v6[2];
      uint64_t v12 = *(void *)(a3[4] + 16);
      if ((unsigned __int16 **)a3[7] == v6
        || (unint64_t v13 = (unsigned __int16 **)((unint64_t)*v6 & 0xFFFFFFFFFFFFFFF8),
            (llvm::TargetInstrInfo::isUnpredicatedTerminator(a4, (const llvm::MachineInstr *)v13) & 1) == 0))
      {
        int v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 72))(a2, v11, v12);
        uint64_t v19 = *a2;
        if (v18)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t *, unsigned __int16 **))(v19 + 80))(a2, v6);
          *(void *)uint64_t v4 = *(void *)(result + 16);
          *(void *)(v4 + 8) = v5;
LABEL_19:
          *(unsigned char *)(v4 + 16) = 0;
LABEL_20:
          char v10 = 1;
          goto LABEL_5;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 64))(a2, v11, v12);
        if (result)
        {
          uint64_t v20 = *(void *)((*(uint64_t (**)(uint64_t *, unsigned __int16 **))(*a2 + 80))(a2, v6) + 16);
          uint64_t result = (*(uint64_t (**)(uint64_t *, unsigned __int16 **))(*a2 + 88))(a2, v6);
          *(void *)uint64_t v4 = v20;
          *(void *)(v4 + 8) = v5;
          *(unsigned char *)(v4 + 16) = result;
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*a2 + 64))(a2, *v13[2], v12);
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a2 + 72))(a2, v11, v12);
          if (result)
          {
            uint64_t v14 = *(void *)((*(uint64_t (**)(uint64_t *, unsigned __int16 **))(*a2 + 80))(a2, v13) + 16);
            int v15 = (*(uint64_t (**)(uint64_t *, unsigned __int16 **))(*a2 + 88))(a2, v13);
            uint64_t result = (*(uint64_t (**)(uint64_t *, unsigned __int16 **))(*a2 + 80))(a2, v6);
            uint64_t v16 = *(void *)(result + 16);
            if (v15) {
              uint64_t v17 = v14;
            }
            else {
              uint64_t v17 = *(void *)(result + 16);
            }
            if (!v15) {
              uint64_t v16 = v14;
            }
            *(void *)uint64_t v4 = v16;
            *(void *)(v4 + 8) = v17;
            goto LABEL_19;
          }
        }
      }
      char v10 = 0;
      *(unsigned char *)uint64_t v4 = 0;
      goto LABEL_5;
    }
  }
LABEL_4:
  *(void *)uint64_t v4 = v5;
  *(void *)(v4 + 8) = v5;
  char v10 = 1;
  *(unsigned char *)(v4 + 16) = 0;
LABEL_5:
  *(unsigned char *)(v4 + 24) = v10;
  return result;
}

uint64_t llvm::GPUFastISel::getOperand(llvm::GPUFastISel *this, const llvm::Instruction *a2, int a3)
{
  int v3 = *((_DWORD *)a2 + 5);
  if ((v3 & 0x40000000) != 0) {
    uint64_t v4 = (char *)*((void *)a2 - 1);
  }
  else {
    uint64_t v4 = (char *)a2 - 32 * (v3 & 0x7FFFFFF);
  }
  return *(void *)&v4[32 * a3];
}

uint64_t llvm::GPUFastISel::getOpcode(llvm::GPUFastISel *this, const llvm::Instruction *a2)
{
  return *((unsigned __int8 *)a2 + 16) - 28;
}

uint64_t llvm::GPUFastISel::GetStateSource(llvm::DataLayout **this, const llvm::FunctionGroup *a2, const llvm::Value *a3, uint64_t a4, BOOL *a5, uint64_t a6, uint64_t a7)
{
  if (a3 && *((unsigned char *)a3 + 16) == 16)
  {
    uint64_t v8 = (unint64_t *)((char *)a3 + 24);
    if (*((_DWORD *)a3 + 8) >= 0x41u) {
      uint64_t v8 = (unint64_t *)*v8;
    }
    unint64_t v9 = *v8;
  }
  else
  {
    unint64_t v9 = sub_1CC756BD8(this[5], (uint64_t)a3, (uint64_t)a2, a4, (uint64_t)a5, a6, a7);
  }
  if (v9 == 0xFFFFFFFF) {
    return 0x2FFFFFFFFLL;
  }
  else {
    return (*(unsigned int (**)(llvm::DataLayout *))(*(void *)this[1] + 56))(this[1]) | 0x200000000;
  }
}

__n128 llvm::GPUFastISel::FixupTexStateSource@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 llvm::GPUFastISel::FixupSmpStateSource@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t llvm::GPUFastISel::GetTexSmpStateSource@<X0>(llvm::GPUFastISel *this@<X0>, const llvm::FunctionGroup *a2@<X1>, const llvm::Instruction *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = (const llvm::Value *)(*(uint64_t (**)(llvm::GPUFastISel *, const llvm::Instruction *, uint64_t))(*(void *)this + 16))(this, a3, a4);
  unint64_t v13 = (const llvm::Value *)(*(uint64_t (**)(llvm::GPUFastISel *, const llvm::Instruction *, uint64_t))(*(void *)this + 16))(this, a3, a5);
  uint64_t v14 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  int StateSource = llvm::GPUFastISel::GetStateSource((llvm::DataLayout **)this, a2, v12, v14, v15, v16, v17);
  unint64_t v20 = v19;
  uint64_t v21 = (*(uint64_t (**)(void))(**((void **)this + 1) + 48))(*((void *)this + 1));
  uint64_t result = llvm::GPUFastISel::GetStateSource((llvm::DataLayout **)this, a2, v13, v21, v22, v23, v24);
  int v26 = result;
  unint64_t v28 = v27;
  if (StateSource == -1)
  {
    int StateSource = (*(uint64_t (**)(llvm::GPUFastISel *, const llvm::Value *))(*(void *)this + 168))(this, v12);
    uint64_t result = (*(uint64_t (**)(llvm::GPUFastISel *, uint64_t, void))(*(void *)this + 312))(this, 1, 0);
    unint64_t v20 = 0;
    int v29 = (result & 0xFFF) << 8;
    int v30 = 2;
  }
  else
  {
    int v30 = 0;
    int v29 = (v20 >> 24) & 0xFFF00 | 7;
    unint64_t v20 = v20;
  }
  if (v26 == -1)
  {
    v30 |= 1u;
    int v26 = (*(uint64_t (**)(llvm::GPUFastISel *, const llvm::Value *))(*(void *)this + 168))(this, v13);
    uint64_t result = (*(uint64_t (**)(llvm::GPUFastISel *, uint64_t, void))(*(void *)this + 312))(this, 1, 0);
    uint64_t v31 = 0;
    int v32 = (result & 0xFFF) << 8;
  }
  else
  {
    int v32 = (v28 >> 24) & 0xFFF00 | 7;
    uint64_t v31 = v28;
  }
  *(_DWORD *)a6 = v29;
  *(_DWORD *)(a6 + 4) = StateSource;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = v20;
  *(void *)(a6 + 24) = 0;
  *(unsigned char *)(a6 + 32) = 1;
  *(_DWORD *)(a6 + 40) = 1;
  *(void *)(a6 + 48) = 0;
  *(void *)(a6 + 56) = 0;
  *(unsigned char *)(a6 + 72) = 1;
  *(_DWORD *)(a6 + 80) = v32;
  *(_DWORD *)(a6 + 84) = v26;
  *(void *)(a6 + 88) = 0;
  *(void *)(a6 + 96) = v31;
  *(void *)(a6 + 104) = 0;
  *(unsigned char *)(a6 + 112) = 1;
  *(_DWORD *)(a6 + 120) = v30;
  *(unsigned char *)(a6 + 128) = 0;
  *(unsigned char *)(a6 + 160) = 0;
  *(unsigned char *)(a6 + 168) = 1;
  return result;
}

uint64_t llvm::GPUFastISel::getFDiv(llvm::GPUFastISel *this, const llvm::Value *a2, const llvm::Value **a3, const llvm::Value **a4)
{
  uint64_t result = 0;
  if (a2 && *((unsigned char *)a2 + 16) == 49)
  {
    if (*((void *)a2 + 5) == *(void *)(*((void *)this + 2) + 16))
    {
      int v6 = *((_DWORD *)a2 + 5);
      if ((v6 & 0x40000000) != 0) {
        uint64_t v7 = (const llvm::Value **)*((void *)a2 - 1);
      }
      else {
        uint64_t v7 = (const llvm::Value **)((char *)a2 - 32 * (v6 & 0x7FFFFFF));
      }
      *a3 = *v7;
      int v8 = *((_DWORD *)a2 + 5);
      if ((v8 & 0x40000000) != 0) {
        unint64_t v9 = (char *)*((void *)a2 - 1);
      }
      else {
        unint64_t v9 = (char *)a2 - 32 * (v8 & 0x7FFFFFF);
      }
      *a4 = (const llvm::Value *)*((void *)v9 + 4);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::GPUFastISel::IsUniform()
{
  return 0;
}

uint64_t llvm::GPUFastISel::GetSharedRegisterReadByteOffset(llvm::DataLayout **this, const llvm::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a2 || *((unsigned char *)a2 + 16) != 60 || *(unsigned char *)(*(void *)a2 + 8) != 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)a2 - 4);
  int v8 = *(_DWORD *)(*(void *)v7 + 8);
  if ((v8 & 0xFE) == 0x12) {
    int v8 = *(_DWORD *)(**(void **)(*(void *)v7 + 16) + 8);
  }
  if ((v8 & 0xFFFFFF00) == 0x4000) {
    return sub_1CC756BD8(this[5], v7, *((void *)this[4] + 43), a4, a5, a6, a7);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

BOOL llvm::GPUFastISel::is16BitInteger(llvm::GPUFastISel *this, llvm::Type **a2)
{
  return llvm::Type::isIntegerTy(*a2, 16);
}

BOOL llvm::GPUFastISel::is32BitInteger(llvm::GPUFastISel *this, llvm::Type **a2)
{
  return llvm::Type::isIntegerTy(*a2, 32);
}

BOOL llvm::GPUFastISel::isHalf(llvm::GPUFastISel *this, const llvm::Value *a2)
{
  return *(unsigned char *)(*(void *)a2 + 8) == 0;
}

BOOL llvm::GPUFastISel::isFloat(llvm::GPUFastISel *this, const llvm::Value *a2)
{
  return *(unsigned char *)(*(void *)a2 + 8) == 2;
}

uint64_t llvm::GPUFastISel::GetConstantValue(llvm::GPUFastISel *this)
{
  v22[16] = *MEMORY[0x1E4F143B8];
  unint64_t v20 = v22;
  uint64_t v21 = 0x800000000;
  (*(void (**)(void))(**((void **)this + 1) + 296))();
  uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(*((void *)this + 4) + 40), 0, "", 0);
  FirstNonPHI = (unint64_t *)llvm::MachineBasicBlock::getFirstNonPHI(*((llvm::MachineBasicBlock **)this + 2));
  uint64_t v4 = *((void *)this + 2);
  v18[0] = 0;
  uint64_t v5 = sub_1CB85AA4C(v4, FirstNonPHI, (unsigned __int8 **)v18, *(void *)(*((void *)this + 6) + 8), VirtualRegister);
  uint64_t v7 = v6;
  if (v18[0]) {
    llvm::MetadataTracking::untrack((uint64_t)v18, (unsigned __int8 *)v18[0]);
  }
  v18[0] = v19;
  v18[1] = (void *)0x800000000;
  if (v21)
  {
    int v8 = (unsigned int *)v20;
    uint64_t v9 = 16 * v21;
    while (1)
    {
      unsigned int v10 = v8[1];
      if (!v10) {
        break;
      }
      if (v10 == 1)
      {
        uint64_t v11 = *v8;
        v14[0] = 1;
        uint64_t v15 = 0;
        uint64_t v16 = v11;
LABEL_9:
        llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v14);
      }
      v8 += 4;
      v9 -= 16;
      if (!v9)
      {
        if (v18[0] != v19) {
          free(v18[0]);
        }
        goto LABEL_13;
      }
    }
    int v12 = *v8;
    uint64_t v15 = 0;
    v14[0] = 0;
    v14[1] = v12;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    goto LABEL_9;
  }
LABEL_13:
  if (v20 != v22) {
    free(v20);
  }
  return VirtualRegister;
}

{
  uint64_t VirtualRegister;
  unint64_t *FirstNonPHI;
  uint64_t v4;
  llvm::MachineFunction *v5;
  llvm::MachineInstr *v6;
  llvm::MachineInstr *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _DWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18[2];
  unsigned char v19[64];
  void *v20;
  uint64_t v21;
  void v22[17];

  v22[16] = *MEMORY[0x1E4F143B8];
  unint64_t v20 = v22;
  uint64_t v21 = 0x800000000;
  (*(void (**)(void))(**((void **)this + 1) + 304))();
  uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(void *)(*((void *)this + 4) + 40), 0, "", 0);
  FirstNonPHI = (unint64_t *)llvm::MachineBasicBlock::getFirstNonPHI(*((llvm::MachineBasicBlock **)this + 2));
  uint64_t v4 = *((void *)this + 2);
  v18[0] = 0;
  uint64_t v5 = sub_1CB85AA4C(v4, FirstNonPHI, (unsigned __int8 **)v18, *(void *)(*((void *)this + 6) + 8), VirtualRegister);
  uint64_t v7 = v6;
  if (v18[0]) {
    llvm::MetadataTracking::untrack((uint64_t)v18, (unsigned __int8 *)v18[0]);
  }
  v18[0] = v19;
  v18[1] = (void *)0x800000000;
  if (v21)
  {
    int v8 = (unsigned int *)v20;
    uint64_t v9 = 16 * v21;
    while (1)
    {
      unsigned int v10 = v8[1];
      if (!v10) {
        break;
      }
      if (v10 == 1)
      {
        uint64_t v11 = *v8;
        v14[0] = 1;
        uint64_t v15 = 0;
        uint64_t v16 = v11;
LABEL_9:
        llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v14);
      }
      v8 += 4;
      v9 -= 16;
      if (!v9)
      {
        if (v18[0] != v19) {
          free(v18[0]);
        }
        goto LABEL_13;
      }
    }
    int v12 = *v8;
    uint64_t v15 = 0;
    v14[0] = 0;
    v14[1] = v12;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    goto LABEL_9;
  }
LABEL_13:
  if (v20 != v22) {
    free(v20);
  }
  return VirtualRegister;
}

uint64_t llvm::GPUFastISel::GetTargetConstantValue(llvm::GPUFastISel *this, uint64_t a2)
{
  return a2;
}

uint64_t llvm::GPUFastISel::GetRegSequenceForValues(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4 = (int *)a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 40);
  if (a4 == 1)
  {
    uint64_t v8 = *a3;
    unint64_t v9 = *(void *)(*(void *)(v7 + 24) + 16 * (v8 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    int v38 = 0;
    (*(void (**)(uint64_t, unint64_t, int *))(*(void *)a1 + 304))(a1, v9, &v38);
    if (v38 == 16)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 336))(a1, 16);
      uint64_t VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(v7, v10, "", 0);
      int v12 = sub_1CB85AA4C(*(void *)(a1 + 16), *(unint64_t **)(a1 + 24), (unsigned __int8 **)(a2 + 48), *(void *)(*(void *)(a1 + 48) + 8) + 912, VirtualRegister);
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      int v39 = 0;
      int v40 = v8;
      uint64_t v43 = 0;
      llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)&v39);
      return VirtualRegister;
    }
  }
  else
  {
    unsigned int v14 = 0;
    uint64_t v15 = a4;
    if (a4)
    {
      uint64_t v16 = (int *)a3;
      uint64_t v17 = a4;
      do
      {
        int v18 = *v16++;
        unint64_t v19 = *(void *)(*(void *)(v7 + 24) + 16 * (v18 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
        int v39 = 0;
        (*(void (**)(uint64_t, unint64_t, int *))(*(void *)a1 + 304))(a1, v19, &v39);
        v14 += v39;
        --v17;
      }
      while (v17);
    }
    if (v14 <= 0x20) {
      unsigned int v20 = 32;
    }
    else {
      unsigned int v20 = v14;
    }
    if ((v20 & 0x1F) == 0x10) {
      uint64_t v21 = v20 + 16;
    }
    else {
      uint64_t v21 = v20;
    }
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 336))(a1, v21);
    uint64_t v8 = llvm::MachineRegisterInfo::createVirtualRegister(v7, v22, "", 0);
    uint64_t v23 = sub_1CB85AA4C(*(void *)(a1 + 16), *(unint64_t **)(a1 + 24), (unsigned __int8 **)(a2 + 48), *(void *)(*(void *)(a1 + 48) + 8) + 864, v8);
    if (v15)
    {
      unsigned int v25 = 0;
      uint64_t v37 = v8;
      int v26 = v23;
      unint64_t v27 = v24;
      do
      {
        unint64_t v28 = *(void *)(*(void *)(v7 + 24) + 16 * (*v4 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
        int v38 = 0;
        (*(void (**)(uint64_t, unint64_t, int *))(*(void *)a1 + 304))(a1, v28, &v38);
        int v29 = *v4++;
        uint64_t v30 = v7;
        int v31 = v38;
        uint64_t v41 = 0;
        int v39 = 0;
        int v40 = v29;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v39);
        BOOL v32 = v31 == 16;
        char v33 = v31 != 16;
        if (v31 == 16) {
          int v34 = 1;
        }
        else {
          int v34 = 2;
        }
        unsigned int v35 = (*(uint64_t (**)(uint64_t, BOOL, void))(*(void *)a1 + 312))(a1, v32, v25 >> v33);
        int v39 = 1;
        uint64_t v41 = 0;
        uint64_t v42 = v35;
        llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v39);
        v25 += v34;
        uint64_t v7 = v30;
        --v15;
      }
      while (v15);
      return v37;
    }
  }
  return v8;
}

uint64_t llvm::GPUFastISel::GetIsSparse()
{
  return 0;
}

uint64_t llvm::GPUFastISel::GetIsQueryLOD()
{
  return 0;
}

void llvm::GPUFastISel::AddMemOperand(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(llvm::MachineFunction **)(*(void *)(*(void *)(a4 + 8) + 24) + 32);
  int v6 = a2[3];
  uint64_t v7 = (*(uint64_t (**)(void, void, llvm::MachineFunction *, BOOL))(**(void **)(a1 + 8) + 272))(*(void *)(a1 + 8), *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * a2[8]), v5, a2[23] != -1);
  if (v6 == -1)
  {
    v11[0] = v7 | 4;
    v11[1] = 0;
    char v13 = 0;
    if (v7) {
      int v10 = *(_DWORD *)(v7 + 12);
    }
    else {
      int v10 = 0;
    }
    int v12 = v10;
    long long v14 = 0u;
    long long v15 = 0u;
    MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v5, (uint64_t)v11, 2, 16, 3, &v14, 0, 1, 0, 0, 0);
  }
  else
  {
    v16[0] = v7 | 4;
    v16[1] = 0;
    char v18 = 0;
    if (v7) {
      int v8 = *(_DWORD *)(v7 + 12);
    }
    else {
      int v8 = 0;
    }
    int v17 = v8;
    long long v14 = 0u;
    long long v15 = 0u;
    MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v5, (uint64_t)v16, 1, 16, 3, &v14, 0, 1, 0, 0, 0);
  }
  llvm::MachineInstr::addMemOperand(*(llvm::MachineInstr **)(a4 + 8), v5, MachineMemOperand);
}

void llvm::GPUSDISel::~GPUSDISel(llvm::GPUSDISel *this)
{
}

uint64_t llvm::GPUSDISel::getOperand(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(void *)(*(void *)(a2 + 32) + 40 * a3);
}

uint64_t *llvm::GPUSDISel::FixupTexStateSource(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  v43[16] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8)))
  {
    uint64_t v40 = 0;
    uint64_t v41 = v43;
    uint64_t v42 = 0x800000000;
    uint64_t v7 = *(void *)(a1 + 40);
    int v39 = 0;
    int v8 = sub_1CD7EBF14(v7, 0, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v10 = (uint64_t **)((char *)v41 + 16 * v42);
    unint64_t *v10 = v8;
    v10[1] = v9;
    LODWORD(v42) = v42 + 1;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    uint64_t v11 = *(void *)(a1 + 40);
    int v39 = 0;
    uint64_t v40 = 0;
    int v12 = sub_1CD7EBF14(v11, 0, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v14 = (uint64_t **)((char *)v41 + 16 * v42);
    *long long v14 = v12;
    v14[1] = v13;
    unsigned int v15 = v42 + 1;
    LODWORD(v42) = v42 + 1;
    if (v39)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
      unsigned int v15 = v42;
    }
    if (v15 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v16 = (uint64_t **)((char *)v41 + 16 * v15);
    int *v16 = a2;
    v16[1] = a3;
    LODWORD(v42) = v42 + 1;
    uint64_t v17 = *(void *)(a1 + 40);
    int v39 = 0;
    uint64_t v40 = 0;
    char v18 = sub_1CD7EBF14(v17, 0, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v20 = (uint64_t **)((char *)v41 + 16 * v42);
    *unsigned int v20 = v18;
    v20[1] = v19;
    LODWORD(v42) = v42 + 1;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    uint64_t v21 = *(void *)(a1 + 40);
    int v39 = 0;
    uint64_t v40 = 0;
    uint64_t v22 = sub_1CD7EBF14(v21, 1, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v24 = (uint64_t **)((char *)v41 + 16 * v42);
    *uint64_t v24 = v22;
    v24[1] = v23;
    LODWORD(v42) = v42 + 1;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    uint64_t v25 = *(void *)(a1 + 40);
    int v39 = 0;
    uint64_t v40 = 0;
    int v26 = sub_1CD7EBF14(v25, 0, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v28 = (uint64_t **)((char *)v41 + 16 * v42);
    *unint64_t v28 = v26;
    v28[1] = v27;
    LODWORD(v42) = v42 + 1;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    uint64_t v29 = *(void *)(a1 + 40);
    int v39 = 0;
    uint64_t v40 = 0;
    uint64_t v30 = sub_1CD7EBF14(v29, 0, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    BOOL v32 = (uint64_t **)((char *)v41 + 16 * v42);
    *BOOL v32 = v30;
    v32[1] = v31;
    LODWORD(v42) = v42 + 1;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    uint64_t v33 = sub_1CD7EEB94(*(void *)(a1 + 40), 0, (llvm *)5, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v35 = (uint64_t *)((char *)v41 + 16 * v42);
    *unsigned int v35 = v33;
    v35[1] = v34;
    LODWORD(v42) = v42 + 1;
    uint64_t v36 = *(void *)(a1 + 40);
    int v37 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8));
    int v39 = 0;
    uint64_t v40 = 0;
    uint64_t v38 = a2[5] + 16 * a3;
    a2 = sub_1CD801450(v36, v37, (uint64_t)&v39, *(llvm **)v38, *(void *)(v38 + 8), (uint64_t *)v41, v42);
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    if (v41 != v43) {
      free(v41);
    }
  }
  return a2;
}

uint64_t *llvm::GPUSDISel::FixupSmpStateSource(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  v43[16] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8)))
  {
    uint64_t v40 = 0;
    uint64_t v41 = v43;
    uint64_t v42 = 0x800000000;
    uint64_t v7 = *(void *)(a1 + 40);
    int v39 = 0;
    int v8 = sub_1CD7EBF14(v7, 0, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v10 = (uint64_t **)((char *)v41 + 16 * v42);
    unint64_t *v10 = v8;
    v10[1] = v9;
    LODWORD(v42) = v42 + 1;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    uint64_t v11 = *(void *)(a1 + 40);
    int v39 = 0;
    uint64_t v40 = 0;
    int v12 = sub_1CD7EBF14(v11, 0, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v14 = (uint64_t **)((char *)v41 + 16 * v42);
    *long long v14 = v12;
    v14[1] = v13;
    unsigned int v15 = v42 + 1;
    LODWORD(v42) = v42 + 1;
    if (v39)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
      unsigned int v15 = v42;
    }
    if (v15 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v16 = (uint64_t **)((char *)v41 + 16 * v15);
    int *v16 = a2;
    v16[1] = a3;
    LODWORD(v42) = v42 + 1;
    uint64_t v17 = *(void *)(a1 + 40);
    int v39 = 0;
    uint64_t v40 = 0;
    char v18 = sub_1CD7EBF14(v17, 0, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v20 = (uint64_t **)((char *)v41 + 16 * v42);
    *unsigned int v20 = v18;
    v20[1] = v19;
    LODWORD(v42) = v42 + 1;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    uint64_t v21 = *(void *)(a1 + 40);
    int v39 = 0;
    uint64_t v40 = 0;
    uint64_t v22 = sub_1CD7EBF14(v21, 1, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v24 = (uint64_t **)((char *)v41 + 16 * v42);
    *uint64_t v24 = v22;
    v24[1] = v23;
    LODWORD(v42) = v42 + 1;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    uint64_t v25 = *(void *)(a1 + 40);
    int v39 = 0;
    uint64_t v40 = 0;
    int v26 = sub_1CD7EBF14(v25, 0, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v28 = (uint64_t **)((char *)v41 + 16 * v42);
    *unint64_t v28 = v26;
    v28[1] = v27;
    LODWORD(v42) = v42 + 1;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    uint64_t v29 = *(void *)(a1 + 40);
    int v39 = 0;
    uint64_t v40 = 0;
    uint64_t v30 = sub_1CD7EBF14(v29, 0, (const llvm::APInt *)&v39, (llvm *)5, 0, 1, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    BOOL v32 = (uint64_t **)((char *)v41 + 16 * v42);
    *BOOL v32 = v30;
    v32[1] = v31;
    LODWORD(v42) = v42 + 1;
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    uint64_t v33 = sub_1CD7EEB94(*(void *)(a1 + 40), 0, (llvm *)5, 0);
    if (v42 >= HIDWORD(v42)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v35 = (uint64_t *)((char *)v41 + 16 * v42);
    *unsigned int v35 = v33;
    v35[1] = v34;
    LODWORD(v42) = v42 + 1;
    uint64_t v36 = *(void *)(a1 + 40);
    int v37 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8));
    int v39 = 0;
    uint64_t v40 = 0;
    uint64_t v38 = a2[5] + 16 * a3;
    a2 = sub_1CD801450(v36, v37, (uint64_t)&v39, *(llvm **)v38, *(void *)(v38 + 8), (uint64_t *)v41, v42);
    if (v39) {
      llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
    }
    if (v41 != v43) {
      free(v41);
    }
  }
  return a2;
}

double llvm::GPUSDISel::GetTexSmpStateSource@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v83 = 0;
  DWORD2(v83) = 0;
  *(void *)&long long v82 = 0;
  DWORD2(v82) = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2, a3);
  uint64_t v13 = v12;
  v81[0] = v11;
  v81[1] = v12;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2, a4);
  uint64_t v16 = v15;
  v80[0] = v14;
  v80[1] = v15;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2, a5);
  uint64_t v78 = v17;
  uint64_t v79 = v18;
  int v77 = 0;
  if (*(_WORD *)(v11 + 24) == 201) {
    unint64_t v19 = *(long long **)(v11 + 32);
  }
  else {
    unint64_t v19 = (long long *)v81;
  }
  long long v76 = *v19;
  if (*(_WORD *)(v76 + 24) == 199) {
    unsigned int v20 = *(long long **)(v76 + 32);
  }
  else {
    unsigned int v20 = &v76;
  }
  uint64_t v21 = *(void *)v20;
  DWORD2(v76) = *((_DWORD *)v20 + 2);
  *(void *)&long long v76 = v21;
  if (*(_WORD *)(v21 + 24) == 216) {
    uint64_t v22 = *(long long **)(v21 + 32);
  }
  else {
    uint64_t v22 = &v76;
  }
  uint64_t v23 = *(void *)v22;
  DWORD2(v76) = *((_DWORD *)v22 + 2);
  *(void *)&long long v76 = v23;
  if (*(__int16 *)(v23 + 24) == -9) {
    uint64_t v24 = *(long long **)(v23 + 32);
  }
  else {
    uint64_t v24 = &v76;
  }
  uint64_t v25 = *(void *)v24;
  DWORD2(v76) = *((_DWORD *)v24 + 2);
  *(void *)&long long v76 = v25;
  if (*(_WORD *)(v17 + 24) == 199) {
    int v26 = *(uint64_t **)(v17 + 32);
  }
  else {
    int v26 = &v78;
  }
  uint64_t v27 = *v26;
  LODWORD(v79) = *((_DWORD *)v26 + 2);
  uint64_t v78 = v27;
  if (*(_WORD *)(v27 + 24) == 216) {
    unint64_t v28 = *(uint64_t ***)(v27 + 32);
  }
  else {
    unint64_t v28 = (uint64_t **)&v78;
  }
  uint64_t v29 = *v28;
  LODWORD(v79) = *((_DWORD *)v28 + 2);
  uint64_t v78 = (uint64_t)v29;
  int v30 = *((unsigned __int16 *)v29 + 12);
  if (v30 == 35 || v30 == 11)
  {
    uint64_t v31 = v29[10];
    unsigned int v32 = *(_DWORD *)(v31 + 32);
    uint64_t v33 = v32 > 0x40 ? **(void **)(v31 + 24) : (uint64_t)(*(void *)(v31 + 24) << -(char)v32) >> -(char)v32;
    if (v33 < 0)
    {
      int v58 = *(unsigned __int16 *)(v76 + 24);
      if (v58 == 45 || v58 == 35)
      {
        unsigned int v61 = (void *)*(int *)(v76 + 80);
      }
      else
      {
        if (v58 != 11)
        {
          LODWORD(v45) = 2;
          int v77 = 2;
          uint64_t v65 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v11, v13);
          goto LABEL_65;
        }
        uint64_t v59 = *(void *)(v76 + 80);
        uint64_t v60 = (void *)(v59 + 24);
        if (*(_DWORD *)(v59 + 32) >= 0x41u) {
          uint64_t v60 = (void *)*v60;
        }
        unsigned int v61 = (void *)*v60;
      }
      unsigned int v62 = (*(uint64_t (**)(void, void *))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v61);
      uint64_t v65 = sub_1CD7ED9FC(*(void *)(a1 + 40), v63, (llvm *)0xA, 0, v62, v64);
      LODWORD(v45) = 0;
LABEL_65:
      unsigned int v42 = 0;
      uint64_t v29 = 0;
      *(void *)&long long v83 = v65;
      DWORD2(v83) = v66;
      goto LABEL_40;
    }
  }
  uint64_t v34 = *(void *)(v11 + 80);
  unsigned int v35 = (void *)(v34 + 24);
  if (*(_DWORD *)(v34 + 32) >= 0x41u) {
    unsigned int v35 = (void *)*v35;
  }
  unsigned int v36 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8), *v35);
  *(void *)&long long v83 = sub_1CD7ED9FC(*(void *)(a1 + 40), v37, (llvm *)0xA, 0, v36, v38);
  DWORD2(v83) = v39;
  uint64_t v40 = *(unsigned __int8 **)(a2 + 64);
  *(void *)uint64_t v84 = v40;
  if (v40) {
    llvm::MetadataTracking::track((uint64_t)v84, v40, 2);
  }
  *(_DWORD *)&v84[8] = *(_DWORD *)(a2 + 60);
  int v41 = *((unsigned __int16 *)v29 + 12);
  if (v41 == 11 || v41 == 35)
  {
    uint64_t v67 = v29[10];
    unsigned int v68 = (unint64_t *)(v67 + 24);
    if (*(_DWORD *)(v67 + 32) >= 0x41u) {
      unsigned int v68 = (unint64_t *)*v68;
    }
    unint64_t v69 = *v68;
    if (*v68)
    {
      if (v69 < 0x10000) {
        uint64_t v45 = 4;
      }
      else {
        uint64_t v45 = 5;
      }
    }
    else
    {
      uint64_t v45 = 4;
      if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8)))
      {
        int v77 = 4;
        uint64_t v29 = sub_1CD7EBF14(*(void *)(a1 + 40), 0, (const llvm::APInt *)v84, (llvm *)3, 0, 0, 0);
        unsigned int v42 = v70;
        goto LABEL_38;
      }
    }
    uint64_t v29 = sub_1CD7EBF14(*(void *)(a1 + 40), v69, (const llvm::APInt *)v84, (llvm *)v45, 0, 0, 0);
    LODWORD(v79) = v73;
    unsigned int v42 = v73;
    sub_1CD3D60FC(*(void *)(a1 + 40), a2, 0, (uint64_t)v29);
  }
  else
  {
    unsigned int v42 = v79;
  }
  long long v75 = *(_OWORD *)(v29[5] + 16 * v42);
  if ((_BYTE)v75) {
    Extendeduint64_t SizeInBits = sub_1CB87E200((unsigned __int8 *)&v75);
  }
  else {
    Extendeduint64_t SizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v75);
  }
  v74[0] = ExtendedSizeInBits;
  v74[1] = v44;
  if ((unint64_t)llvm::TypeSize::operator unsigned long long(v74, v44) > 0x20)
  {
    uint64_t v71 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 264))(*(void *)(a1 + 8));
    uint64_t v29 = sub_1CD8015C0(*(void *)(a1 + 40), SHIDWORD(v71), (const llvm::APInt *)v84, (llvm *)5, 0, (uint64_t)v29, v79);
    LODWORD(v45) = 8;
    unsigned int v42 = v72;
  }
  else if (v75 == 4)
  {
    LODWORD(v45) = 6;
  }
  else
  {
    LODWORD(v45) = 8;
  }
  int v77 = v45;
LABEL_38:
  if (*(void *)v84) {
    llvm::MetadataTracking::untrack((uint64_t)v84, *(unsigned __int8 **)v84);
  }
LABEL_40:
  if (*(_WORD *)(v14 + 24) == 201) {
    uint64_t v46 = *(void **)(v14 + 32);
  }
  else {
    uint64_t v46 = v80;
  }
  uint64_t v47 = *v46;
  *(void *)&long long v76 = v47;
  DWORD2(v76) = *((_DWORD *)v46 + 2);
  int v48 = *(unsigned __int16 *)(v47 + 24);
  if (v48 == 45 || v48 == 35)
  {
    int v51 = (void *)*(int *)(v47 + 80);
LABEL_50:
    unsigned int v52 = (*(uint64_t (**)(void, void *))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), v51);
    uint64_t v55 = sub_1CD7ED9FC(*(void *)(a1 + 40), v53, (llvm *)0xA, 0, v52, v54);
    goto LABEL_51;
  }
  if (v48 == 11)
  {
    uint64_t v49 = *(void *)(v47 + 80);
    unint64_t v50 = (void *)(v49 + 24);
    if (*(_DWORD *)(v49 + 32) >= 0x41u) {
      unint64_t v50 = (void *)*v50;
    }
    int v51 = (void *)*v50;
    goto LABEL_50;
  }
  LODWORD(v45) = v45 | 1;
  int v77 = v45;
  uint64_t v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v14, v16);
LABEL_51:
  *(void *)&long long v82 = v55;
  DWORD2(v82) = v56;
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8)) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, long long *, long long *, int *))(*(void *)a1 + 280))(a1, a2, &v83, &v82, &v77);
    LODWORD(v45) = v77;
  }
  *(_OWORD *)a6 = v83;
  *(_OWORD *)&v84[7] = v82;
  *(unsigned char *)(a6 + 16) = 1;
  *(void *)(a6 + 24) = v29;
  *(_DWORD *)(a6 + 32) = v42;
  *(_DWORD *)(a6 + 36) = 0;
  *(unsigned char *)(a6 + 40) = 1;
  double result = *(double *)v84;
  *(_OWORD *)(a6 + 41) = *(_OWORD *)v84;
  *(void *)(a6 + 56) = *(void *)&v84[15];
  *(unsigned char *)(a6 + 64) = 1;
  *(_DWORD *)(a6 + 72) = v45;
  *(unsigned char *)(a6 + 80) = 0;
  *(unsigned char *)(a6 + 96) = 0;
  *(unsigned char *)(a6 + 104) = 1;
  return result;
}

void llvm::GPUSDISel::getScalarCoordElements(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(__int16 *)(a2 + 24) == -19)
  {
    int v4 = *(unsigned __int16 *)(a2 + 56);
    uint64_t v5 = *(void *)(a2 + 32);
    long long v9 = *(_OWORD *)(v5 + 120);
    int v6 = *(_DWORD *)(v5 + 48);
    *(void *)a4 = *(void *)(v5 + 40);
    *(_DWORD *)(a4 + 8) = v6;
    *(void *)(a4 + 16) = v9;
    *(_DWORD *)(a4 + 24) = DWORD2(v9);
    if (v4 == 7)
    {
      uint64_t v7 = *(void *)(a2 + 32);
      uint64_t v8 = *(void *)(v7 + 200);
      *(_DWORD *)(a4 + 40) = *(_DWORD *)(v7 + 208);
      *(void *)(a4 + 32) = v8;
    }
  }
  else
  {
    *(void *)a4 = a2;
    *(_DWORD *)(a4 + 8) = a3;
  }
}

BOOL llvm::GPUSDISel::getFDiv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(unsigned __int16 *)(a2 + 24);
  if (v5 == 99)
  {
    int v6 = *(uint64_t **)(a2 + 32);
    uint64_t v7 = *v6;
    *(_DWORD *)(a4 + 8) = *((_DWORD *)v6 + 2);
    *(void *)a4 = v7;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void *)(v8 + 40);
    *(_DWORD *)(a5 + 8) = *(_DWORD *)(v8 + 48);
    *(void *)a5 = v9;
  }
  return v5 == 99;
}

uint64_t llvm::GPUSDISel::getMulByRecip(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_WORD *)(a2 + 24) != 98) {
    return 0;
  }
  uint64_t v8 = *(uint64_t **)(a2 + 32);
  uint64_t v9 = *v8;
  int v10 = *((_DWORD *)v8 + 2);
  uint64_t v11 = v8[5];
  int v12 = *((_DWORD *)v8 + 12);
  int v13 = *(unsigned __int16 *)(*v8 + 24);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 160))(*(void *)(a1 + 8)) != v13)
  {
    int v14 = *(unsigned __int16 *)(v11 + 24);
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 160))(*(void *)(a1 + 8)) != v14) {
      return 0;
    }
  }
  int v15 = *(unsigned __int16 *)(v11 + 24);
  int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 160))(*(void *)(a1 + 8));
  if (v16 == v15) {
    int v17 = v10;
  }
  else {
    int v17 = v12;
  }
  if (v16 == v15) {
    uint64_t v18 = v11;
  }
  else {
    uint64_t v18 = v9;
  }
  if (v16 == v15) {
    uint64_t v19 = v9;
  }
  else {
    uint64_t v19 = v11;
  }
  *(void *)a4 = v19;
  *(_DWORD *)(a4 + 8) = v17;
  unsigned int v20 = *(uint64_t **)(v18 + 32);
  uint64_t v21 = *v20;
  *(_DWORD *)(a5 + 8) = *((_DWORD *)v20 + 2);
  *(void *)a5 = v21;
  return 1;
}

BOOL llvm::GPUSDISel::IsUniform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  int v5 = *(_DWORD *)(a2 + 28);
  int v36 = v5;
  if (a5 > 0xA) {
    return 0;
  }
  unsigned int v10 = *(unsigned __int16 *)(a2 + 24);
  if (*(__int16 *)(a2 + 24) < 0)
  {
    if (v10 != 65517) {
      return 0;
    }
    if (!*(_WORD *)(a2 + 56))
    {
LABEL_9:
      int v12 = sub_1CD638DF4((_DWORD *)a4, &v36);
      BOOL result = 1;
      *((unsigned char *)v12 + 4) = 1;
      return result;
    }
    uint64_t v13 = 0;
    uint64_t v14 = a5 + 1;
    uint64_t v15 = 40 * *(unsigned __int16 *)(a2 + 56);
    while (1)
    {
      uint64_t v16 = sub_1CD636B54(a4, v5);
      if (*(_DWORD *)a4) {
        uint64_t v17 = a4 + 8;
      }
      else {
        uint64_t v17 = *(void *)(a4 + 8);
      }
      unsigned int v18 = *(_DWORD *)(a4 + 16);
      if (*(_DWORD *)a4) {
        unsigned int v18 = 64;
      }
      if (v17 + 8 * v18 != v16) {
        return *((unsigned char *)sub_1CD638DF4((_DWORD *)a4, &v36) + 4) != 0;
      }
      if (((*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, *(void *)(*(void *)(a2 + 32) + v13), *(void *)(*(void *)(a2 + 32) + v13 + 8), a4, v14) & 1) == 0)
      {
LABEL_56:
        unsigned int v35 = sub_1CD638DF4((_DWORD *)a4, &v36);
        BOOL result = 0;
        *((unsigned char *)v35 + 4) = 0;
        return result;
      }
      v13 += 40;
      if (v15 == v13) {
        goto LABEL_9;
      }
    }
  }
  BOOL result = 0;
  if (*(unsigned __int16 *)(a2 + 24) <= 0xAEu)
  {
    if (v10 <= 0x3A)
    {
      if (((1 << v10) & 0x800001802) != 0)
      {
        *((unsigned char *)sub_1CD638DF4((_DWORD *)a4, &v36) + 4) = 1;
        return 1;
      }
      if (((1 << v10) & 0x504000000000000) != 0) {
        goto LABEL_8;
      }
    }
    if (v10 == 146) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v11 = v10 - 175;
    if (v11 <= 0x29)
    {
      if (((1 << (v10 + 81)) & 0x20001800007) != 0)
      {
LABEL_8:
        if (!*(_WORD *)(a2 + 56)) {
          goto LABEL_9;
        }
        uint64_t v19 = 0;
        uint64_t v20 = a5 + 1;
        uint64_t v21 = 40 * *(unsigned __int16 *)(a2 + 56);
        while (1)
        {
          uint64_t v22 = sub_1CD636B54(a4, v5);
          uint64_t v23 = (*(_DWORD *)a4 & 1) != 0 ? a4 + 8 : *(void *)(a4 + 8);
          unsigned int v24 = *(_DWORD *)(a4 + 16);
          if (*(_DWORD *)a4) {
            unsigned int v24 = 64;
          }
          if (v23 + 8 * v24 != v22) {
            return *((unsigned char *)sub_1CD638DF4((_DWORD *)a4, &v36) + 4) != 0;
          }
          if (((*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, *(void *)(*(void *)(a2 + 32) + v19), *(void *)(*(void *)(a2 + 32) + v19 + 8), a4, v20) & 1) == 0)goto LABEL_56; {
          v19 += 40;
          }
          if (v21 == v19) {
            goto LABEL_9;
          }
        }
      }
      if (v11 == 17)
      {
        if (*(_WORD *)(a2 + 56) == 1) {
          goto LABEL_9;
        }
        uint64_t v29 = 0;
        uint64_t v30 = a5 + 1;
        uint64_t v31 = 40 * (*(unsigned __int16 *)(a2 + 56) - 1);
        while (1)
        {
          uint64_t v32 = sub_1CD636B54(a4, v5);
          if (*(_DWORD *)a4) {
            uint64_t v33 = a4 + 8;
          }
          else {
            uint64_t v33 = *(void *)(a4 + 8);
          }
          unsigned int v34 = *(_DWORD *)(a4 + 16);
          if (*(_DWORD *)a4) {
            unsigned int v34 = 64;
          }
          if (v33 + 8 * v34 != v32) {
            return *((unsigned char *)sub_1CD638DF4((_DWORD *)a4, &v36) + 4) != 0;
          }
          if (((*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, *(void *)(*(void *)(a2 + 32) + v29), *(void *)(*(void *)(a2 + 32) + v29 + 8), a4, v30) & 1) == 0)goto LABEL_56; {
          v29 += 40;
          }
          if (v31 == v29) {
            goto LABEL_9;
          }
        }
      }
    }
    unsigned int v25 = v10 - 395;
    BOOL v26 = v25 > 0x2A;
    uint64_t v27 = (1 << v25) & 0x42000000009;
    if (!v26 && v27 != 0) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1CD636B54(uint64_t a1, int a2)
{
  uint64_t v6 = 0;
  if (sub_1CD638D44(a1, a2, &v6)) {
    return v6;
  }
  if (*(unsigned char *)a1)
  {
    uint64_t v4 = a1 + 8;
    uint64_t v5 = 64;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 8 * v5;
}

uint64_t llvm::GPUSDISel::GetSharedRegisterReadByteOffset(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 24);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 360))(*(void *)(a1 + 8)) != v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)(**(void **)(a2 + 32) + 80);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  return *v5;
}

BOOL llvm::GPUSDISel::is16BitInteger(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) == 4;
}

BOOL llvm::GPUSDISel::is32BitInteger(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) == 5;
}

BOOL llvm::GPUSDISel::isHalf(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) == 9;
}

BOOL llvm::GPUSDISel::isFloat(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return *(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) == 10;
}

uint64_t *llvm::GPUSDISel::GetConstantValue(llvm::GPUSDISel *this)
{
  v27[16] = *MEMORY[0x1E4F143B8];
  int v21 = 0;
  unsigned int v25 = v27;
  uint64_t v26 = 0x800000000;
  uint64_t v20 = 0;
  (*(void (**)(void))(**((void **)this + 1) + 296))();
  uint64_t v22 = v24;
  uint64_t v23 = 0x800000000;
  if (v26)
  {
    uint64_t v4 = (int *)v25;
    uint64_t v5 = 16 * v26;
    do
    {
      int v6 = v4[1];
      if (v6)
      {
        if (v6 == 1)
        {
          uint64_t v7 = *((void *)this + 5);
          uint64_t v8 = *v4;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          unsigned int v10 = sub_1CD7EBF14(v7, v8, (const llvm::APInt *)&v18, (llvm *)5, 0, 1, 0);
          if (v23 >= (unint64_t)HIDWORD(v23)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v11 = (uint64_t **)((char *)v22 + 16 * v23);
          uint64_t *v11 = v10;
          v11[1] = v9;
          LODWORD(v23) = v23 + 1;
          if (v18) {
            llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
          }
        }
      }
      else
      {
        uint64_t v13 = sub_1CD7EEB94(*((void *)this + 5), *v4, (llvm *)5, 0);
        if (v23 >= (unint64_t)HIDWORD(v23)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v14 = (uint64_t *)((char *)v22 + 16 * v23);
        *uint64_t v14 = v13;
        v14[1] = v12;
        LODWORD(v23) = v23 + 1;
      }
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
    int v3 = (uint64_t *)v22;
    uint64_t v2 = v23;
  }
  else
  {
    uint64_t v2 = 0;
    int v3 = (uint64_t *)v24;
  }
  uint64_t v15 = *((void *)this + 5);
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v16 = sub_1CD801450(v15, v21, (uint64_t)&v18, (llvm *)4, 0, v3, v2);
  if (v18) {
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
  }
  if (v22 != v24) {
    free(v22);
  }
  if (v25 != v27) {
    free(v25);
  }
  return v16;
}

{
  uint64_t v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  unsigned char v24[128];
  void *v25;
  uint64_t v26;
  void v27[17];

  v27[16] = *MEMORY[0x1E4F143B8];
  int v21 = 0;
  unsigned int v25 = v27;
  uint64_t v26 = 0x800000000;
  uint64_t v20 = 0;
  (*(void (**)(void))(**((void **)this + 1) + 304))();
  uint64_t v22 = v24;
  uint64_t v23 = 0x800000000;
  if (v26)
  {
    uint64_t v4 = (int *)v25;
    uint64_t v5 = 16 * v26;
    do
    {
      int v6 = v4[1];
      if (v6)
      {
        if (v6 == 1)
        {
          uint64_t v7 = *((void *)this + 5);
          uint64_t v8 = *v4;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          unsigned int v10 = sub_1CD7EBF14(v7, v8, (const llvm::APInt *)&v18, (llvm *)5, 0, 1, 0);
          if (v23 >= (unint64_t)HIDWORD(v23)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v11 = (uint64_t **)((char *)v22 + 16 * v23);
          uint64_t *v11 = v10;
          v11[1] = v9;
          LODWORD(v23) = v23 + 1;
          if (v18) {
            llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
          }
        }
      }
      else
      {
        uint64_t v13 = sub_1CD7EEB94(*((void *)this + 5), *v4, (llvm *)5, 0);
        if (v23 >= (unint64_t)HIDWORD(v23)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v14 = (uint64_t *)((char *)v22 + 16 * v23);
        *uint64_t v14 = v13;
        v14[1] = v12;
        LODWORD(v23) = v23 + 1;
      }
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
    int v3 = (uint64_t *)v22;
    uint64_t v2 = v23;
  }
  else
  {
    uint64_t v2 = 0;
    int v3 = (uint64_t *)v24;
  }
  uint64_t v15 = *((void *)this + 5);
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v16 = sub_1CD801450(v15, v21, (uint64_t)&v18, (llvm *)5, 0, v3, v2);
  if (v18) {
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
  }
  if (v22 != v24) {
    free(v22);
  }
  if (v25 != v27) {
    free(v25);
  }
  return v16;
}

uint64_t *llvm::GPUSDISel::GetTargetConstantValue(llvm::GPUSDISel *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 5);
  v5[0] = 0;
  v5[1] = 0;
  int v3 = sub_1CD7EBF14(v2, a2, (const llvm::APInt *)v5, (llvm *)5, 0, 1, 0);
  if (v5[0]) {
    llvm::MetadataTracking::untrack((uint64_t)v5, v5[0]);
  }
  return v3;
}

double llvm::GPUSDISel::AddDefaultPredicates(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if (v2 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a2 + 16 * v2) = xmmword_1CD91C140;
  unsigned int v3 = *(_DWORD *)(a2 + 12);
  unsigned int v4 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v4;
  if (v4 >= v3) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  double result = 0.0;
  *(_OWORD *)(*(void *)a2 + 16 * v4) = xmmword_1CD91C150;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t *llvm::GPUSDISel::GetInstr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, long long *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  v112[16] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = *(unsigned __int8 **)(a3 + 64);
  long long v90 = v22;
  if (v22) {
    llvm::MetadataTracking::track((uint64_t)&v90, v22, 2);
  }
  int v91 = *(_DWORD *)(a3 + 60);
  unsigned int v23 = *(_DWORD *)(a2 + 24);
  if (v23 == -1)
  {
    int v62 = 0;
    int8x8_t v68 = (int8x8_t)0xFFFFFFFFLL;
  }
  else
  {
    unsigned int v24 = *(int8x8_t **)(*(void *)(*(void *)(a3 + 32) + 40 * v23) + 80);
    unsigned int v25 = v24 + 3;
    if (v24[4].i32[0] >= 0x41u) {
      unsigned int v25 = (int8x8_t *)*v25;
    }
    int8x8_t v68 = *v25;
    int v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 200))(a1, a2, a3);
  }
  uint64_t v69 = a3;
  unsigned int v67 = a4;
  (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  unsigned int v110 = v112;
  uint64_t v111 = 0x1000000000;
  uint64_t v107 = v109;
  uint64_t v108 = 0x1000000000;
  uint64_t v66 = a2;
  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 288))(*(void *)(a1 + 8), a2, *(void *)(*(void *)(a1 + 40) + 40));
  if (v111)
  {
    uint64_t v26 = (unsigned int *)v110;
    uint64_t v27 = 8 * v111;
    do
    {
      uint64_t v29 = sub_1CD7EBF14(*(void *)(a1 + 40), *v26, (const llvm::APInt *)&v90, (llvm *)5, 0, 1, 0);
      if (v108 >= (unint64_t)HIDWORD(v108)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v30 = (uint64_t **)((char *)v107 + 16 * v108);
      *uint64_t v30 = v29;
      v30[1] = v28;
      LODWORD(v108) = v108 + 1;
      v26 += 2;
      v27 -= 8;
    }
    while (v27);
  }
  uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, v69, a9, a10);
  uint64_t v89 = v31;
  unint64_t v104 = v106;
  uint64_t v105 = 0x1000000000;
  if (a12)
  {
    uint64_t v33 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, v69, a11, a12);
    if (a18 == 7)
    {
      uint64_t v60 = v33[10];
      unsigned int v61 = (uint64_t *)(v60 + 24);
      if (*(_DWORD *)(v60 + 32) >= 0x41u) {
        unsigned int v61 = (uint64_t *)*v61;
      }
      uint64_t v33 = sub_1CD7EBF14(*(void *)(a1 + 40), *v61, (const llvm::APInt *)&v90, (llvm *)5, 0, 1, 0);
    }
    if (v105 >= HIDWORD(v105)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v34 = (uint64_t **)((char *)v104 + 16 * v105);
    *unsigned int v34 = v33;
    v34[1] = v32;
    LODWORD(v105) = v105 + 1;
  }
  uint64_t v101 = v103;
  uint64_t v102 = 0x1000000000;
  if (a14)
  {
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, v69, a13);
    if (v102 >= HIDWORD(v102)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v37 = (uint64_t *)((char *)v101 + 16 * v102);
    *int v37 = v36;
    v37[1] = v35;
    LODWORD(v102) = v102 + 1;
  }
  long long v98 = v100;
  uint64_t v99 = 0x1000000000;
  uint64_t v85 = v90;
  if (v90) {
    llvm::MetadataTracking::track((uint64_t)&v85, v90, 2);
  }
  int v38 = v91;
  int v86 = v91;
  uint64_t v87 = a1;
  LOBYTE(v39) = *((unsigned char *)a6 + 16);
  if ((_BYTE)v39)
  {
    uint64_t v39 = *a6;
    uint64_t v40 = a7;
    if (*a6)
    {
      v97[0] = *(uint64_t *)((char *)a6 + 1);
      *(void *)((char *)v97 + 7) = a6[1];
      v84[0] = *(_DWORD *)((char *)a6 + 17);
      *(_DWORD *)((char *)v84 + 3) = *((_DWORD *)a6 + 5);
      char v41 = 1;
    }
    else
    {
      char v41 = 0;
    }
  }
  else
  {
    char v41 = 0;
    uint64_t v40 = a7;
  }
  LOBYTE(v42) = *((unsigned char *)v40 + 16);
  if ((_BYTE)v42 && (uint64_t v42 = *v40) != 0)
  {
    v96[0] = *(uint64_t *)((char *)v40 + 1);
    *(void *)((char *)v96 + 7) = v40[1];
    v83[0] = *(_DWORD *)((char *)v40 + 17);
    *(_DWORD *)((char *)v83 + 3) = *((_DWORD *)v40 + 5);
    char v43 = 1;
  }
  else
  {
    char v43 = 0;
  }
  long long v81 = *a5;
  uint64_t v82 = *((void *)a5 + 2);
  char v77 = v39;
  *(void *)uint64_t v78 = v97[0];
  *(void *)&v78[7] = *(void *)((char *)v97 + 7);
  char v79 = v41;
  *(_DWORD *)uint64_t v80 = v84[0];
  *(_DWORD *)&v80[3] = *(_DWORD *)((char *)v84 + 3);
  char v73 = v42;
  *(void *)&v74[7] = *(void *)((char *)v96 + 7);
  *(void *)uint64_t v74 = v96[0];
  char v75 = v43;
  *(_DWORD *)&v76[3] = *(_DWORD *)((char *)v83 + 3);
  *(_DWORD *)long long v76 = v83[0];
  unsigned int v70 = v85;
  if (v85)
  {
    llvm::MetadataTracking::track((uint64_t)&v70, v85, 2);
    int v38 = v86;
    uint64_t v44 = v87;
    uint64_t v45 = v70;
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v44 = a1;
  }
  int v71 = v38;
  uint64_t v72 = v44;
  int v95 = 0;
  uint64_t v46 = operator new(0x20uLL);
  void *v46 = &unk_1F261D810;
  v46[1] = v45;
  if (v45)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v70, v45, (uint64_t)(v46 + 1));
    unsigned int v70 = 0;
    int v38 = v71;
    uint64_t v44 = v72;
  }
  *((_DWORD *)v46 + 4) = v38;
  v46[3] = v44;
  int v95 = v46;
  v92[0] = &unk_1F261D858;
  int v93 = v92;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, long long *, char *, char *))(*(void *)a1 + 288))(a1, v66, v69, v67, &v81, &v77, &v73);
  if (v93 == v92)
  {
    (*(void (**)(void *))(v92[0] + 32))(v92);
  }
  else if (v93)
  {
    (*(void (**)(void))(*v93 + 40))();
  }
  if (v95 == v94)
  {
    (*(void (**)(void *))(v94[0] + 32))(v94);
  }
  else if (v95)
  {
    (*(void (**)(void))(*v95 + 40))();
  }
  if (v70) {
    llvm::MetadataTracking::untrack((uint64_t)&v70, v70);
  }
  if (*(_DWORD *)(v66 + 20) != -1)
  {
    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v69);
    if (v99 >= HIDWORD(v99)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v49 = (uint64_t *)((char *)v98 + 16 * v99);
    uint64_t *v49 = v48;
    v49[1] = v47;
    LODWORD(v99) = v99 + 1;
  }
  uint64_t v50 = *(void *)(v69 + 40);
  uint64_t v51 = *(unsigned __int16 *)(v69 + 58);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 376))(*(void *)(a1 + 8)))
  {
    if (v68.i32[0] == -1)
    {
      int v52 = -1;
    }
    else if (v68.i32[0] <= 7u)
    {
      if (v68.i32[0] <= 3u)
      {
        if (v68.i32[0] <= 1u) {
          int v52 = 1;
        }
        else {
          int v52 = 2;
        }
      }
      else
      {
        int v52 = 3;
      }
    }
    else
    {
      int v52 = 4;
    }
  }
  else
  {
    uint8x8_t v53 = (uint8x8_t)vcnt_s8(v68);
    v53.i16[0] = vaddlv_u8(v53);
    int v52 = v53.i32[0] + v62;
  }
  int v54 = *(_DWORD *)(v66 + 12);
  if (v54 != -1 && v52 != v54)
  {
    uint64_t v55 = 9;
    if (*(unsigned char *)(v66 + 8)) {
      uint64_t v55 = 10;
    }
    if (v52 == 1) {
      uint64_t v56 = v55;
    }
    else {
      uint64_t v56 = 174;
    }
    uint64_t v50 = sub_1CD7F95FC(*(void *)(a1 + 40), v56, 0, *(void *)(v50 + 16 * (v51 - 1)), *(void *)(v50 + 16 * (v51 - 1) + 8));
    uint64_t v51 = v57;
  }
  int v58 = sub_1CD801044(*(void *)(a1 + 40), v67, (uint64_t)&v90, v50, v51, (uint64_t *)v98, v99);
  if (v85) {
    llvm::MetadataTracking::untrack((uint64_t)&v85, v85);
  }
  if (v98 != v100) {
    free(v98);
  }
  if (v101 != v103) {
    free(v101);
  }
  if (v104 != v106) {
    free(v104);
  }
  if (v107 != v109) {
    free(v107);
  }
  if (v110 != v112) {
    free(v110);
  }
  if (v90) {
    llvm::MetadataTracking::untrack((uint64_t)&v90, v90);
  }
  return v58;
}

uint64_t *llvm::GPUSDISel::GetRegSequenceForValues(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  v52[16] = *MEMORY[0x1E4F143B8];
  if (a4 == 1) {
    return *(uint64_t **)a3;
  }
  unsigned int v10 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v48 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v48, v10, 2);
  }
  int v49 = *(_DWORD *)(a2 + 60);
  long long v47 = *(_OWORD *)(*(void *)(*(void *)a3 + 40) + 16 * a3[2]);
  if ((_BYTE)v47) {
    Extendeduint64_t SizeInBits = (void *)sub_1CB87E200((unsigned __int8 *)&v47);
  }
  else {
    Extendeduint64_t SizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v47);
  }
  uint64_t v50 = ExtendedSizeInBits;
  uint64_t v51 = (uint64_t)v12;
  uint64_t v13 = llvm::TypeSize::operator unsigned long long(&v50, v12);
  unsigned int v14 = (*(uint64_t (**)(void, uint64_t, BOOL))(**(void **)(a1 + 8) + 248))(*(void *)(a1 + 8), a4, v13 == 16);
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 264))();
  unsigned int v16 = v15;
  if (v13 == 16) {
    int v17 = v15;
  }
  else {
    int v17 = HIDWORD(v15);
  }
  uint64_t v50 = v52;
  uint64_t v51 = 0x800000000;
  unsigned int v18 = sub_1CD7EBF14(*(void *)(a1 + 40), v14, (const llvm::APInt *)&v48, (llvm *)5, 0, 1, 0);
  if (v51 >= HIDWORD(v51)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v20 = (uint64_t **)((char *)v50 + 16 * v51);
  *uint64_t v20 = v18;
  v20[1] = v19;
  unsigned int v21 = v51 + 1;
  LODWORD(v51) = v51 + 1;
  long long v47 = *(_OWORD *)(*(void *)(*(void *)a3 + 40) + 16 * a3[2]);
  if (a4)
  {
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = a4;
    unsigned int v25 = a3 + 2;
    do
    {
      uint64_t v26 = *((void *)v25 - 1);
      long long v46 = *(_OWORD *)(*(void *)(v26 + 40) + 16 * *v25);
      uint64_t v27 = *(void *)v25;
      if (v21 >= HIDWORD(v51)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v28 = (char *)v50 + 16 * v21;
      *unint64_t v28 = v26;
      v28[1] = v27;
      LODWORD(v51) = v51 + 1;
      int v29 = v46;
      if (v46 == 174)
      {
        BOOL v30 = 0;
      }
      else
      {
        if ((_BYTE)v47)
        {
          uint64_t v31 = sub_1CB87E200((unsigned __int8 *)&v47);
          int v33 = v34;
          int v29 = v46;
        }
        else
        {
          uint64_t v31 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v47);
          int v33 = v32;
        }
        if (v29) {
          uint64_t v35 = sub_1CB87E200((unsigned __int8 *)&v46);
        }
        else {
          uint64_t v35 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v46);
        }
        BOOL v30 = v31 != v35 || v33 != v36;
      }
      unsigned int v38 = v17 + v22;
      v23 |= v30;
      if (v23)
      {
        long long v44 = *(_OWORD *)(*(void *)(*((void *)v25 - 1) + 40) + 16 * *v25);
        uint64_t v39 = (_BYTE)v44
            ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)&v44)
            : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v44);
        v45[0] = v39;
        v45[1] = v40;
        if (llvm::TypeSize::operator unsigned long long(v45, v40) == 16) {
          unsigned int v38 = v16;
        }
      }
      uint64_t v42 = sub_1CD7EBF14(*(void *)(a1 + 40), v38, (const llvm::APInt *)&v48, (llvm *)5, 0, 1, 0);
      if (v51 >= (unint64_t)HIDWORD(v51)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      char v43 = (uint64_t **)((char *)v50 + 16 * v51);
      unint64_t *v43 = v42;
      v43[1] = v41;
      unsigned int v21 = v51 + 1;
      LODWORD(v51) = v51 + 1;
      long long v47 = v46;
      ++v22;
      v25 += 4;
      v16 += 2;
      --v24;
    }
    while (v24);
  }
  uint64_t v5 = sub_1CD801450(*(void *)(a1 + 40), 18, (uint64_t)&v48, (llvm *)0xAE, 0, (uint64_t *)v50, v21);
  if (v50 != v52) {
    free(v50);
  }
  if (v48) {
    llvm::MetadataTracking::untrack((uint64_t)&v48, v48);
  }
  return v5;
}

uint64_t *llvm::GPUSDISel::AddMemOperand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 272);
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    uint64_t v14 = v7();
    v16[0] = v14 | 4;
    v16[1] = 0;
    char v18 = 0;
    if (v14) {
      int v15 = *(_DWORD *)(v14 + 12);
    }
    else {
      int v15 = 0;
    }
    int v17 = v15;
    long long v22 = 0u;
    long long v23 = 0u;
    unint64_t MachineMemOperand = llvm::MachineFunction::getMachineMemOperand(v6, (uint64_t)v16, 2, 16, 3, &v22, 0, 1, 0, 0, 0);
  }
  else
  {
    uint64_t v8 = v7();
    v19[0] = v8 | 4;
    v19[1] = 0;
    char v21 = 0;
    if (v8) {
      int v9 = *(_DWORD *)(v8 + 12);
    }
    else {
      int v9 = 0;
    }
    int v20 = v9;
    long long v22 = 0u;
    long long v23 = 0u;
    unint64_t MachineMemOperand = llvm::MachineFunction::getMachineMemOperand(v6, (uint64_t)v19, 1, 16, 3, &v22, 0, 1, 0, 0, 0);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 40);
  uint64_t v12 = *a4;
  *(void *)&long long v22 = MachineMemOperand;
  return sub_1CD8005B8(v11, v12, &v22, 1);
}

uint64_t llvm::GPUSDISel::GetIsSparse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 28);
  if (v3 == -1) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 32) + 40 * v3) + 80);
  uint64_t v5 = (void *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = (void *)*v5;
  }
  return *(unsigned char *)v5 & 1;
}

uint64_t llvm::GPUSDISel::GetIsQueryLOD(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 28);
  if (v3 == -1) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 32) + 40 * v3) + 80);
  uint64_t v5 = (unsigned __int8 *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned __int8 **)v5;
  }
  return (*v5 >> 1) & 1;
}

void llvm::GPUSDISel::ExpandIntrinsicSample(uint64_t a1, llvm::APFloatBase *a2, uint64_t a3, _DWORD *a4, int a5, uint64_t (*a6)(uint64_t *, unint64_t, llvm::APFloatBase *, uint64_t, uint64_t), void (*a7)(_OWORD *, uint64_t, llvm::APFloatBase *, void **, uint64_t (*)(void)), int a8, int a9)
{
  v140[32] = *MEMORY[0x1E4F143B8];
  llvm::SampleInfo::SampleInfo(&v129, a3, 0);
  long long v128 = *(_OWORD *)*(void *)(a1 + 40);
  if (v128 == 174) {
    return;
  }
  unsigned int v16 = *(char **)(a1 + 32);
  int v17 = &v16[40 * *(unsigned __int16 *)(a1 + 56)];
  uint64_t v138 = v140;
  uint64_t v139 = 0x1000000000;
  sub_1CD3E560C((uint64_t)&v138, v16, v17);
  uint64_t v19 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v126 = v19;
  if (v19) {
    llvm::MetadataTracking::track((uint64_t)&v126, v19, 2);
  }
  int v127 = *(_DWORD *)(a1 + 60);
  uint64_t v20 = *(void *)(a1 + 32);
  if (DWORD2(v131) != -1
    || *(unsigned char *)(*(void *)(*(void *)(v20 + 40 * v131) + 40)
                + 16 * *(unsigned int *)(v20 + 40 * v131 + 8)) != 4)
  {
    unsigned int v21 = DWORD1(v131);
    if (DWORD1(v131) == -1
      || *(unsigned char *)(*(void *)(*(void *)(v20 + 40 * DWORD1(v131)) + 40)
                  + 16 * *(unsigned int *)(v20 + 40 * DWORD1(v131) + 8)) != 4)
    {
      uint64_t v22 = *(void *)(v20 + 40 * DWORD2(v131));
      int v23 = *(unsigned __int16 *)(v22 + 24);
      if (v23 == 35 || v23 == 11)
      {
        uint64_t v25 = *(void *)(v22 + 80);
        unsigned int v26 = *(_DWORD *)(v25 + 32);
        uint64_t v27 = v26 > 0x40 ? **(void **)(v25 + 24) : (uint64_t)(*(void *)(v25 + 24) << -(char)v26) >> -(char)v26;
        if (v27 < 0)
        {
          uint64_t v82 = (uint64_t *)(v20 + 40 * v131);
          unint64_t v83 = v82[1];
          if (*(unsigned char *)(*(void *)(*v82 + 40) + 16 * v83) == 5)
          {
            uint64_t v84 = (uint64_t)a2;
            uint64_t v85 = *v82;
            uint64_t v86 = v82[1];
          }
          else
          {
            uint64_t v107 = sub_1CD7EB314(a2, (const char *)0xD8, (uint64_t)&v126, (llvm *)0x31, 0, *v82, (void *)v83);
            uint64_t v109 = *(void *)(a6(v107, v83 & 0xFFFFFFFF00000000 | v108, a2, 2, 5) + 32);
            uint64_t v85 = *(void *)(v109 + 40);
            uint64_t v86 = *(void *)(v109 + 48);
            uint64_t v84 = (uint64_t)a2;
          }
          uint64_t v110 = sub_1CD7EB80C(v84, v85, v86, (uint64_t)&v126, 4, 0);
          uint64_t v111 = (char *)v138 + 16 * v131;
          *(void *)uint64_t v111 = v110;
          *((_DWORD *)v111 + 2) = v112;
          uint64_t v113 = sub_1CD7EBF14((uint64_t)a2, -1, (const llvm::APInt *)&v126, (llvm *)5, 0, 1, 0);
          uint64_t v114 = (char *)v138 + 16 * DWORD2(v131);
          *(void *)uint64_t v114 = v113;
          *((_DWORD *)v114 + 2) = v115;
          unsigned int v21 = DWORD1(v131);
        }
      }
      if (v21 != -1)
      {
        unint64_t v28 = (uint64_t *)(*(void *)(a1 + 32) + 40 * v21);
        unint64_t v29 = v28[1];
        BOOL v30 = sub_1CD7EB314(a2, (const char *)0xD8, (uint64_t)&v126, (llvm *)0x31, 0, *v28, (void *)v29);
        uint64_t v32 = a6(v30, v29 & 0xFFFFFFFF00000000 | v31, a2, 2, 5);
        uint64_t v33 = sub_1CD7EB80C((uint64_t)a2, *(void *)(*(void *)(v32 + 32) + 40), *(void *)(*(void *)(v32 + 32) + 48), (uint64_t)&v126, 4, 0);
        int v34 = (char *)v138 + 16 * DWORD1(v131);
        *(void *)int v34 = v33;
        *((_DWORD *)v34 + 2) = v35;
      }
      if (a5 > 1 || DWORD2(v132) == -1) {
        goto LABEL_25;
      }
      uint64_t v36 = *(void *)(a1 + 32) + 40 * DWORD2(v132);
      if (*(unsigned __int8 *)(*(void *)(*(void *)v36 + 40) + 16 * *(unsigned int *)(v36 + 8)) != 174)
      {
        int v37 = sub_1CD7EB314(a2, (const char *)0xD8, (uint64_t)&v126, (llvm *)0x31, 0, *(void *)v36, *(void **)(v36 + 8));
        uint64_t v38 = ((uint64_t (*)(uint64_t *))a6)(v37);
        uint64_t v39 = (char *)v138 + 16 * DWORD2(v132);
        *(void *)uint64_t v39 = v38;
        *((_DWORD *)v39 + 2) = v40;
LABEL_25:
        if (BYTE13(v132) && a5 >= 2 && a7)
        {
          v124[4] = v133;
          v124[5] = v134;
          uint64_t v125 = v135;
          v124[0] = v129;
          v124[1] = v130;
          v124[2] = v131;
          v124[3] = v132;
          a7(v124, a1, a2, &v138, (uint64_t (*)(void))a6);
        }
        else
        {
          uint64_t v41 = DWORD1(v129) + BYTE13(v132);
          if (DWORD1(v129) != 1)
          {
            uint64_t v42 = (uint64_t **)(*(void *)(a1 + 32) + 40 * HIDWORD(v131));
            uint64_t v43 = a6(*v42, (unint64_t)v42[1], a2, v41, byte_1CFB1D0C0[2 * BYTE1(v129) + BYTE2(v129)]);
            long long v44 = (char *)v138 + 16 * HIDWORD(v131);
            *(void *)long long v44 = v43;
            *((_DWORD *)v44 + 2) = v45;
          }
          if (v41 && DWORD2(v133) != -1)
          {
            int v46 = 0;
            do
            {
              long long v47 = (uint64_t **)(*(void *)(a1 + 32) + 40 * (v46 + DWORD2(v133)));
              uint64_t v48 = a6(*v47, (unint64_t)v47[1], a2, 2, 10);
              int v49 = (char *)v138 + 16 * (v46 + DWORD2(v133));
              *(void *)int v49 = v48;
              *((_DWORD *)v49 + 2) = v50;
              ++v46;
            }
            while (v41 != v46);
          }
        }
        if (HIDWORD(v134) != -1)
        {
          uint64_t v51 = (uint64_t **)(*(void *)(a1 + 32) + 40 * HIDWORD(v134));
          int v52 = *v51;
          unint64_t v53 = (unint64_t)v51[1];
          LODWORD(v51) = *(unsigned __int8 *)((*v51)[5] + 16 * v53);
          LOBYTE(v136[0]) = (_BYTE)v51;
          if ((v51 - 15) <= 0x9B)
          {
            LOBYTE(v136[0]) = sub_1CB8C2FBC((unsigned __int8 *)v136);
            uint64_t v54 = a6(v52, v53, a2, v130, LOBYTE(v136[0]));
            uint64_t v55 = (char *)v138 + 16 * HIDWORD(v134);
            *(void *)uint64_t v55 = v54;
            *((_DWORD *)v55 + 2) = v56;
          }
        }
        if (HIDWORD(v130) == -1)
        {
          int v60 = 0;
        }
        else
        {
          uint64_t v57 = *(void *)(*(void *)(*(void *)(a1 + 32) + 40 * HIDWORD(v130)) + 80);
          unsigned int v58 = *(_DWORD *)(v57 + 32);
          if (v58 > 0x40) {
            uint64_t v59 = **(void **)(v57 + 24);
          }
          else {
            uint64_t v59 = (uint64_t)(*(void *)(v57 + 24) << -(char)v58) >> -(char)v58;
          }
          int v60 = v59 & 1;
        }
        uint64_t v61 = *(void *)(a1 + 40);
        if (HIDWORD(v129) == -1)
        {
          uint64_t v63 = *(unsigned __int16 *)(a1 + 58);
        }
        else
        {
          uint64_t v61 = sub_1CD7F95FC((uint64_t)a2, 174, 0, *(void *)(v61 + 32), *(void *)(v61 + 40));
          uint64_t v63 = v62;
        }
        uint64_t v66 = sub_1CD7F9CC8((uint64_t)a2, 47, (uint64_t)&v126, v61, v63, (uint64_t *)v138, v139, v18, *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96));
        if (HIDWORD(v129) == -1)
        {
          unsigned int v75 = a4[2];
          if (v75 >= a4[3]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          long long v76 = (uint64_t **)(*(void *)a4 + 16 * v75);
          const char *v76 = v66;
          v76[1] = 0;
          ++a4[2];
        }
        else
        {
          if (v63)
          {
            unsigned int v67 = 0;
            unsigned int v68 = a4[2];
            do
            {
              if (v68 >= a4[3]) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v69 = (uint64_t **)(*(void *)a4 + 16 * v68);
              *uint64_t v69 = v66;
              v69[1] = v67;
              unsigned int v68 = a4[2] + 1;
              a4[2] = v68;
              unsigned int v67 = (uint64_t *)((char *)v67 + 1);
            }
            while ((uint64_t *)v63 != v67);
          }
          else
          {
            unsigned int v68 = a4[2];
          }
          if (v68 >= a4[3]) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v70 = (void *)(*(void *)a4 + 16 * v68);
          *unsigned int v70 = 0;
          v70[1] = 0;
          LODWORD(v70) = a4[2] + 1;
          a4[2] = v70;
          uint64_t v71 = *(void *)a4 + 16 * v70;
          *(_OWORD *)uint64_t v136 = *(_OWORD *)(v71 - 32);
          *(void *)(v71 - 32) = *(void *)(v71 - 16);
          *(_DWORD *)(v71 - 24) = *(_DWORD *)(v71 - 8);
          *(void **)(v71 - 16) = v136[0];
          *(_DWORD *)(v71 - 8) = v136[1];
        }
        if (DWORD2(v130) == -1)
        {
          unint64_t v74 = 0xFFFFFFFFLL;
        }
        else
        {
          uint64_t v72 = *(void *)(*(void *)(*(void *)(a1 + 32) + 40 * DWORD2(v130)) + 80);
          char v73 = (unint64_t *)(v72 + 24);
          if (*(_DWORD *)(v72 + 32) >= 0x41u) {
            char v73 = (unint64_t *)*v73;
          }
          unint64_t v74 = *v73;
        }
        if (HIDWORD(v129) != -1)
        {
          v136[0] = v137;
          v136[1] = (void *)0x800000000;
          if (BYTE8(v129)) {
            int v77 = a9;
          }
          else {
            int v77 = a8;
          }
          int v122 = v77;
          if ((_BYTE)v128)
          {
            LOBYTE(ExtendedVectorElementType) = sub_1CB8C2FBC((unsigned __int8 *)&v128);
            unint64_t v81 = 0;
            uint64_t v80 = 0;
          }
          else
          {
            unint64_t ExtendedVectorElementType = llvm::EVT::getExtendedVectorElementType((llvm::EVT *)&v128, v64, v65);
            uint64_t v80 = v79;
            unint64_t v81 = ExtendedVectorElementType & 0xFFFFFFFFFFFFFF00;
          }
          uint64_t v87 = (llvm *)(v81 | ExtendedVectorElementType);
          uint64_t v88 = HIDWORD(v129);
          if (HIDWORD(v129))
          {
            uint64_t v90 = 0;
            do
            {
              if ((v74 >> v90)) {
                int v91 = sub_1CD8015C0((uint64_t)a2, v122 + (int)v90, (const llvm::APInt *)&v126, v87, v80, (uint64_t)v66, 0);
              }
              else {
                int v91 = sub_1CD7F330C((uint64_t)a2, 51, (uint64_t)&v126, v87, v80);
              }
              if (LODWORD(v136[1]) >= (unint64_t)HIDWORD(v136[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v93 = (uint64_t **)((char *)v136[0] + 16 * LODWORD(v136[1]));
              *int v93 = v91;
              v93[1] = v92;
              ++LODWORD(v136[1]);
              ++v90;
            }
            while (v88 != v90);
            unsigned int v89 = HIDWORD(v129);
          }
          else
          {
            unsigned int v89 = 0;
          }
          if (v60)
          {
            int v95 = sub_1CD8015C0((uint64_t)a2, v89 + v122, (const llvm::APInt *)&v126, v87, v80, (uint64_t)v66, 0);
            if (LODWORD(v136[1]) >= HIDWORD(v136[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v96 = (uint64_t **)((char *)v136[0] + 16 * LODWORD(v136[1]));
            *uint64_t v96 = v95;
            v96[1] = v94;
            ++LODWORD(v136[1]);
            unsigned int v89 = HIDWORD(v129);
          }
          unint64_t v97 = sub_1CD7EC8DC(a2, (const char *)0x92, (const llvm::APInt *)&v126, (llvm *)v128, *((uint64_t *)&v128 + 1), (uint64_t *)v136[0], v89);
          uint64_t v100 = *(void *)a4;
          *(void *)uint64_t v100 = v97;
          *(_DWORD *)(v100 + 8) = v98;
          if (v60)
          {
            if ((_BYTE)v128)
            {
              LOBYTE(v101) = sub_1CB8C2FBC((unsigned __int8 *)&v128);
              unint64_t v104 = 0;
              uint64_t v102 = 0;
            }
            else
            {
              unint64_t v101 = llvm::EVT::getExtendedVectorElementType((llvm::EVT *)&v128, v98, v99);
              unint64_t v104 = v101 & 0xFFFFFFFFFFFFFF00;
            }
            v123[0] = v104 | v101;
            v123[1] = v102;
            int v116 = sub_1CD3E12F4((unsigned __int8 *)v123, v102, v103);
            uint64_t v117 = 0;
            if (v116 > 31)
            {
              switch(v116)
              {
                case 32:
                  uint64_t v117 = 5;
                  break;
                case 64:
                  uint64_t v117 = 6;
                  break;
                case 128:
                  uint64_t v117 = 7;
                  break;
              }
            }
            else
            {
              switch(v116)
              {
                case 1:
                  uint64_t v117 = 2;
                  break;
                case 8:
                  uint64_t v117 = 3;
                  break;
                case 16:
                  uint64_t v117 = 4;
                  break;
              }
            }
            uint64_t v118 = sub_1CD7EB314(a2, (const char *)0xD8, (uint64_t)&v126, (llvm *)v117, 0, *((void *)v136[0] + 2 * LODWORD(v136[1]) - 2), *((void **)v136[0] + 2 * LODWORD(v136[1]) - 1));
            uint64_t v119 = *(void *)a4;
            *(void *)(v119 + 16) = v118;
            *(_DWORD *)(v119 + 24) = v120;
            uint64_t v105 = sub_1CD7EB314(a2, (const char *)0xC9, (uint64_t)&v126, (llvm *)3, 0, *(void *)(*(void *)a4 + 16), *(void **)(*(void *)a4 + 24));
          }
          else
          {
            uint64_t v105 = sub_1CD7EBF14((uint64_t)a2, 0, (const llvm::APInt *)&v126, (llvm *)3, 0, 0, 0);
          }
          uint64_t v121 = *(void *)a4;
          *(void *)(v121 + 16) = v105;
          *(_DWORD *)(v121 + 24) = v106;
          if (v136[0] != v137) {
            free(v136[0]);
          }
        }
      }
    }
  }
  if (v126) {
    llvm::MetadataTracking::untrack((uint64_t)&v126, v126);
  }
  if (v138 != v140) {
    free(v138);
  }
}

uint64_t sub_1CD638D44(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 64;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (_DWORD *)(v3 + 8 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    unsigned int v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != 0x7FFFFFFF)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == 0x80000000;
      }
      if (v12) {
        unsigned int v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CD638DF4(_DWORD *a1, int *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD638D44((uint64_t)a1, *a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CD638E5C(a1, a2, v7);
    *int v5 = *a2;
    *((unsigned char *)v5 + 4) = 0;
  }
  return v5;
}

_DWORD *sub_1CD638E5C(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 64;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD638F20((uint64_t)a1, v6);
  int v8 = 0;
  sub_1CD638D44((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != 0x7FFFFFFF) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CD638F20(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x41)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x40)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = llvm::allocate_buffer(8 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD6390BC(a1, v6, v6 + 8 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  int v9 = v14;
  do
  {
    int v10 = *(_DWORD *)(a1 + v8 + 8);
    if ((v10 - 0x7FFFFFFF) >= 2)
    {
      *(_DWORD *)int v9 = v10;
      v9[4] = *(unsigned char *)(a1 + v8 + 12);
      v9 += 8;
    }
    v8 += 8;
  }
  while (v8 != 512);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = llvm::allocate_buffer(8 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD6390BC(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1CD6390BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (_DWORD *)(result + 8);
    int v9 = (_DWORD *)(result + 520);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_6;
    }
    uint64_t v8 = *(_DWORD **)(result + 8);
    int v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = 0x7FFFFFFF;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      int v10 = *(_DWORD *)v4;
      if ((*(_DWORD *)v4 - 0x7FFFFFFF) >= 2)
      {
        BOOL v12 = 0;
        uint64_t result = sub_1CD638D44((uint64_t)v5, v10, &v12);
        uint64_t v11 = v12;
        _DWORD *v12 = *(_DWORD *)v4;
        *((unsigned char *)v11 + 4) = *(unsigned char *)(v4 + 4);
        *v5 += 2;
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
  return result;
}

void llvm::initializeGPUIterateCombinePass(llvm *this, llvm::PassRegistry *a2)
{
  unsigned int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA4D8, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC75F378;
    v4[1] = &v2;
    unint64_t v3 = v4;
    std::__call_once(&qword_1EBCDA4D8, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createGPUIterateCombinePass(llvm *this, const llvm::GPUIterateCombiner *a2)
{
}

void llvm::GPUMetadataEmitter::GPUMetadataEmitter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 1;
  int64x2_t v2 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 16) = v2;
  *(int64x2_t *)(a1 + 32) = v2;
  *(int64x2_t *)(a1 + 48) = v2;
  *(int64x2_t *)(a1 + 64) = v2;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)(a1 + 88) = 0x800000000;
  *(void *)(a1 + 160) = a1 + 176;
  *(void *)(a1 + 168) = 0x600000000;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 259) = 0u;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_DWORD *)((char *)&v3 + 3) = 0;
  LODWORD(v3) = 0;
  *((void *)&v3 + 1) = 0x10100000002;
  char v4 = 1;
  uint64_t v5 = 0;
  char v6 = 0;
  v7[23] = 15;
  strcpy(v7, "std::unique_ptr");
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v8 = 0;
  __int16 v15 = 84;
  int v16 = 257;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *(void *)((char *)v19 + 5) = 0;
  v19[0] = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  int v23 = 1;
  uint64_t v25 = 0;
  v26[0] = 0;
  *(_DWORD *)((char *)v26 + 7) = 0;
  uint64_t v24 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  strcpy(v33, "\n");
  uint64_t v31 = 0;
  strcpy(v32, "_generated");
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v33[2] = 0;
  __int16 v34 = 0;
  int v35 = 0;
  uint64_t v38 = 1;
  uint64_t v39 = 0;
  __int16 v40 = 257;
  sub_1CD639970(a1 + 320, &v3);
}

uint64_t sub_1CD639804(uint64_t a1, int a2, int a3, int a4, int a5)
{
  BOOL v9 = 1;
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 32);
  if (a5 || *(unsigned char *)(a1 + 80))
  {
    unsigned int v13 = sub_1CBF2F210(a1, a5);
    sub_1CBF2F3A0((uint64_t *)a1, 10, v13);
    BOOL v9 = *(unsigned char *)(a1 + 80) == 0;
  }
  if (a4 || !v9)
  {
    unsigned int v18 = sub_1CBF2F210(a1, a4);
    sub_1CBF2F3A0((uint64_t *)a1, 8, v18);
    BOOL v14 = *(unsigned char *)(a1 + 80) == 0;
  }
  else
  {
    BOOL v14 = 1;
  }
  if (a3 || !v14)
  {
    unsigned int v19 = sub_1CBF2F210(a1, a3);
    sub_1CBF2F3A0((uint64_t *)a1, 6, v19);
    BOOL v15 = *(unsigned char *)(a1 + 80) == 0;
  }
  else
  {
    BOOL v15 = 1;
  }
  if (a2 || !v15)
  {
    unsigned int v16 = sub_1CBF2F210(a1, a2);
    sub_1CBF2F3A0((uint64_t *)a1, 4, v16);
  }

  return sub_1CBF2CB78(a1, (unsigned __int16)v12 - (unsigned __int16)v11 + (unsigned __int16)v10);
}

unsigned int **sub_1CD63993C(unsigned int **result)
{
  unint64_t v1 = (unint64_t)result[1];
  if (v1 >= 5)
  {
    unint64_t v2 = **result;
    unint64_t v3 = v1 - 1;
    if ((int)v2 >= 1 && v3 >= v2) {
      return (unsigned int **)sub_1CD63A9A0((int *)((char *)*result + v2), (uint64_t)result);
    }
  }
  return result;
}

void sub_1CD639970(uint64_t a1, long long *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v4 = a1 + 184;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = 0u;
  *(unsigned char *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 352) = xmmword_1CFB1D0D0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 1;
  *(_WORD *)(a1 + 416) = 256;
  *(void *)(a1 + 424) = 0;
  sub_1CC77F07C((void *)(a1 + 432), 0x100uLL, 7);
  *(void *)(v4 + 376) = 0;
  *(_WORD *)(v4 + 384) = 0;
  *(_OWORD *)(v4 + 388) = 0u;
  *(_OWORD *)(v4 + 404) = 0u;
  *(_OWORD *)(v4 + 420) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(void *)(v4 + 448) = v4 + 456;
  *(void *)(v4 + 456) = 0;
  *(void *)(v4 + 480) = 0;
  *(void *)(v4 + 488) = 0;
  *(void *)(v4 + 464) = 0;
  *(void *)(v4 + 472) = v4 + 480;
  *(void *)(v4 + 504) = 0;
  *(void *)(v4 + 512) = 0;
  *(void *)(v4 + 496) = 0;
  *(void *)(v4 + 528) = 0;
  *(void *)(v4 + 520) = v4 + 528;
  *(void *)(v4 + 536) = 0;
  sub_1CD63A4F4(v4 + 544, a2);
  *(unsigned char *)(v4 + 952) = 0;
  *(_OWORD *)(v4 + 960) = 0u;
  *(_OWORD *)(v4 + 976) = 0u;
  *(_OWORD *)(v4 + 992) = 0u;
  *(_OWORD *)(v4 + 1008) = 0u;
  if (*(unsigned char *)(v4 + 800)) {
    *(unsigned char *)(a1 + 416) = 1;
  }
  operator new();
}

uint64_t sub_1CD63A4F4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 10) = *(long long *)((char *)a2 + 10);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = a1 + 32;
  if (*((char *)a2 + 55) < 0)
  {
    sub_1CB8BDF7C(v5, *((const void **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v6 = a2[2];
    *(void *)(v5 + 16) = *((void *)a2 + 6);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = (_OWORD *)(a1 + 56);
  if (*((char *)a2 + 79) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v7, *((const void **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 56);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    _OWORD *v7 = v8;
  }
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  BOOL v9 = (_OWORD *)(a1 + 88);
  if (*((char *)a2 + 111) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v9, *((const void **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *BOOL v9 = v10;
  }
  uint64_t v11 = (_OWORD *)(a1 + 112);
  if (*((char *)a2 + 135) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v11, *((const void **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v12 = a2[7];
    *(void *)(a1 + 128) = *((void *)a2 + 16);
    _OWORD *v11 = v12;
  }
  __int16 v13 = *((_WORD *)a2 + 68);
  *(unsigned char *)(a1 + 138) = *((unsigned char *)a2 + 138);
  *(_WORD *)(a1 + 136) = v13;
  BOOL v14 = (_OWORD *)(a1 + 144);
  if (*((char *)a2 + 167) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v14, *((const void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v15 = a2[9];
    *(void *)(a1 + 160) = *((void *)a2 + 20);
    *BOOL v14 = v15;
  }
  int v16 = *((_DWORD *)a2 + 42);
  *(unsigned char *)(a1 + 172) = *((unsigned char *)a2 + 172);
  *(_DWORD *)(a1 + 168) = v16;
  uint64_t v17 = (_OWORD *)(a1 + 176);
  if (*((char *)a2 + 199) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v17, *((const void **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v18 = a2[11];
    *(void *)(a1 + 192) = *((void *)a2 + 24);
    *uint64_t v17 = v18;
  }
  unsigned int v19 = (_OWORD *)(a1 + 200);
  if (*((char *)a2 + 223) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v19, *((const void **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v20 = *(long long *)((char *)a2 + 200);
    *(void *)(a1 + 216) = *((void *)a2 + 27);
    *unsigned int v19 = v20;
  }
  *(_DWORD *)(a1 + 224) = *((_DWORD *)a2 + 56);
  long long v21 = (_OWORD *)(a1 + 232);
  if (*((char *)a2 + 255) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v21, *((const void **)a2 + 29), *((void *)a2 + 30));
  }
  else
  {
    long long v22 = *(long long *)((char *)a2 + 232);
    *(void *)(a1 + 248) = *((void *)a2 + 31);
    _OWORD *v21 = v22;
  }
  __int16 v23 = *((_WORD *)a2 + 128);
  *(unsigned char *)(a1 + 258) = *((unsigned char *)a2 + 258);
  *(_WORD *)(a1 + 256) = v23;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  sub_1CB906CCC((void *)(a1 + 264), *((void *)a2 + 33), *((void *)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 3));
  uint64_t v24 = (_OWORD *)(a1 + 288);
  if (*((char *)a2 + 311) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v24, *((const void **)a2 + 36), *((void *)a2 + 37));
  }
  else
  {
    long long v25 = a2[18];
    *(void *)(a1 + 304) = *((void *)a2 + 38);
    *uint64_t v24 = v25;
  }
  unsigned int v26 = (_OWORD *)(a1 + 312);
  if (*((char *)a2 + 335) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v26, *((const void **)a2 + 39), *((void *)a2 + 40));
  }
  else
  {
    long long v27 = *(long long *)((char *)a2 + 312);
    *(void *)(a1 + 328) = *((void *)a2 + 41);
    *unsigned int v26 = v27;
  }
  long long v28 = (_OWORD *)(a1 + 336);
  if (*((char *)a2 + 359) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v28, *((const void **)a2 + 42), *((void *)a2 + 43));
  }
  else
  {
    long long v29 = a2[21];
    *(void *)(a1 + 352) = *((void *)a2 + 44);
    *long long v28 = v29;
  }
  long long v30 = (_OWORD *)(a1 + 360);
  if (*((char *)a2 + 383) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v30, *((const void **)a2 + 45), *((void *)a2 + 46));
  }
  else
  {
    long long v31 = *(long long *)((char *)a2 + 360);
    *(void *)(a1 + 376) = *((void *)a2 + 47);
    *long long v30 = v31;
  }
  long long v32 = a2[24];
  *(_WORD *)(a1 + 400) = *((_WORD *)a2 + 200);
  *(_OWORD *)(a1 + 384) = v32;
  return a1;
}

void *sub_1CD63A7B0(void *a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 248))(&v7, a2);
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 256))(&v6, a2);
  uint64_t v5 = v6;
  *a1 = v7;
  a1[1] = v5;
  return result;
}

uint64_t *sub_1CD63A844(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  if (*(void *)a2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 16))(&v7);
    uint64_t v3 = v7;
    uint64_t v4 = *a1;
    uint64_t v7 = 0;
    *a1 = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v6 = v7;
      uint64_t v7 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_1CD63A918(uint64_t *result, int a2)
{
  if (a2)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t result = (uint64_t *)sub_1CBF2C864((uint64_t)result, 4uLL);
    int v4 = *(_DWORD *)(v3 + 32) - *(_DWORD *)(v3 + 48) + *(_DWORD *)(v3 + 40) - a2;
    if (v4 != -4 || *(unsigned char *)(v3 + 80))
    {
      unsigned int v5 = sub_1CBF2F210(v3, v4 + 4);
      return sub_1CBF2F3A0((uint64_t *)v3, 4, v5);
    }
  }
  return result;
}

uint64_t sub_1CD63A9A0(int *a1, uint64_t a2)
{
  uint64_t result = sub_1CC780378((uint64_t *)a2, a1);
  if (result)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = (char *)a1 - v5;
    unsigned int v7 = *(unsigned __int16 *)((char *)a1 - v5);
    if (v7 < 5)
    {
      if (sub_1CD63AB30(a2, 0)) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v8 = -v5;
      uint64_t v9 = *((unsigned __int16 *)v6 + 2);
      if (*((_WORD *)v6 + 2))
      {
        uint64_t result = sub_1CC780328(a2, (unint64_t)a1 + v9 - *(void *)a2);
        if (!result) {
          return result;
        }
        uint64_t v11 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
        if (sub_1CD63AB30(a2, v11))
        {
          if (*v11)
          {
            unint64_t v12 = 0;
            __int16 v13 = v11 + 1;
            while (sub_1CD63AB98((int *)((char *)v13 + *v13), a2))
            {
              ++v12;
              ++v13;
              if (v12 >= *v11)
              {
                uint64_t v5 = *a1;
                uint64_t v8 = -v5;
                unsigned int v7 = *(unsigned __int16 *)((char *)a1 - v5);
                goto LABEL_9;
              }
            }
            return 0;
          }
          goto LABEL_9;
        }
      }
      else if (sub_1CD63AB30(a2, 0))
      {
LABEL_9:
        if (v7 >= 7)
        {
          if (*(_WORD *)((char *)a1 + v8 + 6))
          {
            uint64_t result = sub_1CC780328(a2, (unint64_t)a1 + *(unsigned __int16 *)((char *)a1 + v8 + 6) - *(void *)a2);
            if (!result) {
              return result;
            }
            long long v10 = 0;
            if (*(unsigned __int16 *)((char *)a1 - (int)v5) < 7u) {
              goto LABEL_16;
            }
            uint64_t v8 = -(uint64_t)(int)v5;
          }
          if (*(_WORD *)((char *)a1 + v8 + 6))
          {
            long long v10 = (unsigned int *)((char *)a1
                                 + *(unsigned __int16 *)((char *)a1 + v8 + 6)
                                 + *(unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v8 + 6)));
LABEL_16:
            uint64_t result = sub_1CD63AB30(a2, v10);
            if (result)
            {
              --*(_DWORD *)(a2 + 16);
              return 1;
            }
            return result;
          }
        }
LABEL_15:
        long long v10 = 0;
        goto LABEL_16;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_1CD63AB30(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 40)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (v5 > 0x1FFFFFFE) {
    return 0;
  }
  unint64_t v6 = 4 * v5 + 4;
  BOOL v7 = v3 > v6;
  unint64_t v8 = v3 - v6;
  return v7 && v8 >= v2;
}

BOOL sub_1CD63AB98(int *a1, uint64_t a2)
{
  BOOL result = sub_1CC780378((uint64_t *)a2, a1);
  if (result)
  {
    uint64_t v5 = (unsigned __int16 *)((char *)a1 - *a1);
    unsigned int v6 = *v5;
    if (v6 < 5) {
      goto LABEL_18;
    }
    if (!v5[2]
      || (result = 0, unint64_t v7 = *(void *)(a2 + 8), v7 >= 5) && v7 - 4 >= (unint64_t)a1 + v5[2] - *(void *)a2)
    {
      if (v6 < 7
        || (!v5[3]
         || (result = 0, unint64_t v8 = *(void *)(a2 + 8), v8 >= 5) && v8 - 4 >= (unint64_t)a1 + v5[3] - *(void *)a2)
        && (v6 < 9
         || (!v5[4]
          || (result = 0, unint64_t v9 = *(void *)(a2 + 8), v9 >= 5) && v9 - 4 >= (unint64_t)a1 + v5[4] - *(void *)a2)
         && (v6 < 0xB
          || (uint64_t v10 = v5[5]) == 0
          || (BOOL result = 0, v11 = *(void *)(a2 + 8), v11 >= 5)
          && v11 - 4 >= (unint64_t)a1 + v10 - *(void *)a2)))
      {
LABEL_18:
        --*(_DWORD *)(a2 + 16);
        return 1;
      }
    }
  }
  return result;
}

void sub_1CD63ACC8(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1CB883A14((uint64_t)&PrintPerfDiagsForLoopsOnly, 0, 0);
  byte_1EBD07020 = 0;
  qword_1EBD07028 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBD07030 = 0;
  PrintPerfDiagsForLoopsOnly = (uint64_t)&unk_1F26440A0;
  qword_1EBD07038 = (uint64_t)&unk_1F2643CC0;
  qword_1EBD07040 = (uint64_t)&unk_1F25EDE78;
  qword_1EBD07058 = (uint64_t)&qword_1EBD07040;
  sub_1CD63ADB8(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintPerfDiagsForLoopsOnly);
}

__n128 sub_1CD63ADB8(__n128 *a1, char **a2, _WORD *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&PrintPerfDiagsForLoopsOnly, "print-perf-diags-for-loops-only", 0x1FuLL);
  __n128 result = *a1;
  xmmword_1EBD06FC0 = (__int128)*a1;
  unint64_t v7 = *a2;
  byte_1EBD07020 = **a2;
  byte_1EBD07031 = 1;
  byte_1EBD07030 = *v7;
  word_1EBD06FAA = (32 * (*a3 & 3)) | word_1EBD06FAA & 0xFF9F;
  return result;
}

unint64_t sub_1CD63AE40(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 20 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

uint64_t sub_1CD63AECC(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v8 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v8;
    }
    sub_1CC7820FC(a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  unint64_t v9 = v14;
  for (uint64_t i = 8; i != 72; i += 8)
  {
    uint64_t v11 = *(void *)(a1 + i);
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v9++ = v11;
    }
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return sub_1CC7820FC(a1, v14, v9);
}

void llvm::initializeGPUSampleSinkPass(llvm *this, llvm::PassRegistry *a2)
{
  unsigned int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA500, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC782D10;
    v4[1] = &v2;
    unint64_t v3 = v4;
    std::__call_once(&qword_1EBCDA500, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createGPUSampleSinkPass()
{
}

int32x2_t *sub_1CD63B130(int32x2_t *result, int a2)
{
  __int32 v2 = result[2].i32[0];
  if (v2)
  {
    int32x2_t v3 = *result;
    __int32 v4 = v2 - 1;
    LODWORD(v5) = (v2 - 1) & (37 * a2);
    unsigned int v6 = (int *)(*(void *)result + 8 * v5);
    int v7 = *v6;
    if (*v6 == a2)
    {
LABEL_3:
      *unsigned int v6 = -2;
      result[1] = vadd_s32(result[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v8 = 1;
      while (v7 != -1)
      {
        int v9 = v5 + v8++;
        uint64_t v5 = v9 & v4;
        int v7 = *(_DWORD *)(*(void *)&v3 + 8 * v5);
        if (v7 == a2)
        {
          unsigned int v6 = (int *)(*(void *)&v3 + 8 * v5);
          goto LABEL_3;
        }
      }
    }
  }
  return result;
}

void llvm::initializeGPUWaitPlacementPassPass(llvm *this, llvm::PassRegistry *a2)
{
  __int32 v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA688, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC7867B8;
    v4[1] = &v2;
    int32x2_t v3 = v4;
    std::__call_once(&qword_1EBCDA688, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void llvm::createGPUWaitPlacementPass()
{
}

void llvm::AGX::PerformanceStatisticDiag::print(uint64_t a1, uint64_t a2)
{
  llvm::AGX::str(a1 + 16);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 56))(a2, &__p);
  (*(void (**)(uint64_t, const char *))(*(void *)v3 + 48))(v3, "\n");
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_1CD63B324()
{
}

void sub_1CD63B338(long long *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)&PrintDetailedPerfDiags, 0, 0);
  byte_1EBD070E0 = 0;
  qword_1EBD070E8 = (uint64_t)&unk_1F25EDE58;
  unk_1EBD070F0 = 0;
  PrintDetailedPerfDiags = (uint64_t)&unk_1F26440A0;
  qword_1EBD070F8 = (uint64_t)&unk_1F2643CC0;
  qword_1EBD07100 = (uint64_t)&unk_1F25EDE78;
  qword_1EBD07118 = (uint64_t)&qword_1EBD07100;
  llvm::cl::Option::setArgStr(v2, "print-detailed-perf-diags", 0x19uLL);
  xmmword_1EBD07080 = *a1;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintDetailedPerfDiags);
}

void sub_1CD63B420(char **a1, long long *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&PrintCanonicalRegs, 0, 0);
  byte_1EBD07560 = 0;
  qword_1EBD07568 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBD07570 = 0;
  PrintCanonicalRegs = (uint64_t)&unk_1F26440A0;
  qword_1EBD07578 = (uint64_t)&unk_1F2643CC0;
  qword_1EBD07580 = (uint64_t)&unk_1F25EDE78;
  qword_1EBD07598 = (uint64_t)&qword_1EBD07580;
  llvm::cl::Option::setArgStr(v4, "print-canonical-regs", 0x14uLL);
  char v5 = *a1;
  byte_1EBD07560 = **a1;
  byte_1EBD07571 = 1;
  byte_1EBD07570 = *v5;
  xmmword_1EBD07500 = *a2;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintCanonicalRegs);
}

void sub_1CD63B530(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA698, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC78BF7C;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDA698, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63B5A4()
{
}

void sub_1CD63B5F0()
{
}

void sub_1CD63B634(llvm::ModulePass *a1)
{
  llvm::ModulePass::~ModulePass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD63B66C()
{
  return "AGX Expand Builtins";
}

uint64_t sub_1CD63B67C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v1 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v2 == &unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::isInteger(v1);
  }
  else {
    return llvm::detail::IEEEFloat::isInteger(v1);
  }
}

void sub_1CD63B698(long long *a1, long long *a2, _WORD *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCDA6A0, 0, 0);
  qword_1EBCDA720 = 0;
  unk_1EBCDA728 = 0;
  qword_1EBCDA748 = 0;
  unk_1EBCDA750 = 0;
  byte_1EBCDA758 = 0;
  qword_1EBCDA740 = 0;
  unk_1EBCDA730 = 0;
  unk_1EBCDA738 = &unk_1F2643C20;
  qword_1EBCDA6A0 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCDA760 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCDA768 = (uint64_t)&unk_1F25F6428;
  qword_1EBCDA780 = (uint64_t)&qword_1EBCDA768;
  llvm::cl::Option::setArgStr(v6, "agx-expand-builtins-default-device", 0x22uLL);
  xmmword_1EBCDA6D0 = *a1;
  xmmword_1EBCDA6C0 = *a2;
  word_1EBCDA6AA = (32 * (*a3 & 3)) | word_1EBCDA6AA & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDA6A0);
}

void sub_1CD63B7BC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA790, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC790E90;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDA790, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63B830()
{
}

void sub_1CD63B86C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA798, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC790FDC;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDA798, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63B8E0()
{
}

void sub_1CD63B91C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA7A0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC791128;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDA7A0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63B990()
{
}

void sub_1CD63B9CC(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2628B90;
  sub_1CD496928((uint64_t)a1 + 80);
  uint64_t v2 = (void *)*((void *)a1 + 9);
  if (v2 == (void *)((char *)a1 + 48))
  {
    (*(void (**)(void *))(*((void *)a1 + 6) + 32))((void *)a1 + 6);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CD63BA84(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA7B8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC792658;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDA7B8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63BAF8()
{
}

void sub_1CD63BB34(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA7C8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7944BC;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDA7C8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63BBA8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA7D8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC794710;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDA7D8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63BC1C()
{
}

unint64_t sub_1CD63BC58(llvm::DataLayout *a1, llvm::Type **this)
{
  llvm::AllocaInst::getAllocationSizeInBits(this, a1, (uint64_t)&v5);
  if (!v7) {
    return 0;
  }
  v4[0] = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4[1] = v6 == 1;
  return (unint64_t)llvm::TypeSize::operator unsigned long long(v4, v2) >> 3;
}

void sub_1CD63BCBC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA7E8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7973DC;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDA7E8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63BD30(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA7F0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC797674;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDA7F0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63BDA4()
{
}

void sub_1CD63BDE4()
{
}

void *sub_1CD63BDF8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F261E150;
  result[1] = v3;
  return result;
}

void sub_1CD63BE44(char **a1, long long *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)qword_1EBCDA8B8, 0, 0);
  byte_1EBCDA938 = 0;
  qword_1EBCDA940 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCDA948 = 0;
  qword_1EBCDA8B8[0] = (uint64_t)&unk_1F26440A0;
  qword_1EBCDA950 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCDA958 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCDA970 = (uint64_t)&qword_1EBCDA958;
  llvm::cl::Option::setArgStr(v4, "atomicoptimize-datadiverge", 0x1AuLL);
  uint64_t v5 = *a1;
  byte_1EBCDA938 = **a1;
  byte_1EBCDA949 = 1;
  byte_1EBCDA948 = *v5;
  xmmword_1EBCDA8D8 = *a2;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCDA8B8);
}

void sub_1CD63BF58(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDA978, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC79D5FC;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDA978, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63BFCC()
{
}

void *sub_1CD63C02C(void *a1)
{
  *a1 = &unk_1F261E198;
  uint64_t v2 = a1 + 23;
  uint64_t v3 = (void *)a1[26];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (void *)a1[19];
  if (v4)
  {
    a1[20] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[16];
  if (v5)
  {
    a1[17] = v5;
    operator delete(v5);
  }

  return sub_1CB87DD48(a1);
}

uint64_t sub_1CD63C100(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  int v15 = 0;
  int v16 = a2;
  uint64_t v8 = llvm::cl::parser<unsigned int>::parse(a1 + 176, (void *)a1, a3, a4, a5, a6, &v15);
  if (v8) {
    return v8;
  }
  int v9 = *(_DWORD **)(a1 + 136);
  if ((unint64_t)v9 >= *(void *)(a1 + 144))
  {
    uint64_t v10 = sub_1CBFFBD60((char **)(a1 + 128), &v15);
  }
  else
  {
    *int v9 = v15;
    uint64_t v10 = (char *)(v9 + 1);
  }
  *(void *)(a1 + 136) = v10;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v11 = *(_DWORD **)(a1 + 160);
  if ((unint64_t)v11 >= *(void *)(a1 + 168))
  {
    uint64_t v12 = sub_1CBFFBD60((char **)(a1 + 152), &v16);
  }
  else
  {
    _DWORD *v11 = a2;
    uint64_t v12 = (char *)(v11 + 1);
  }
  *(void *)(a1 + 160) = v12;
  uint64_t v13 = *(void *)(a1 + 208);
  if (v13)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v13 + 48))(v13, &v15);
    return v8;
  }
  sub_1CB920400();
  return sub_1CD63C1D8();
}

uint64_t sub_1CD63C1D8()
{
  return 2;
}

void sub_1CD63C1E0(void *a1)
{
  sub_1CD63C02C(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CD63C218(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 176, a1);
}

llvm::raw_ostream *sub_1CD63C224(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 176), a1, a2);
}

void *sub_1CD63C238(void *result)
{
  result[20] = result[19];
  result[17] = result[16];
  return result;
}

void *sub_1CD63C250(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = sub_1CD63C2B8(a1, a2, 1);
  __n128 result = (void *)(*(void *)a1 + 144 * *(unsigned int *)(a1 + 8));
  *__n128 result = result + 2;
  result[1] = 0x1000000000;
  if (*(_DWORD *)(v3 + 8)) {
    __n128 result = (void *)sub_1CC79F218((uint64_t)result, (const void **)v3);
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t sub_1CD63C2B8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 144 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      sub_1CD63C324();
    }
    sub_1CD63C324();
  }
  return a2;
}

void sub_1CD63C324()
{
}

void sub_1CD63C394(uint64_t *a1, void *a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = 144 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x1000000000;
      if (*(_DWORD *)(v5 + 8)) {
        sub_1CC79F218((uint64_t)a2, (const void **)v5);
      }
      v5 += 144;
      a2 += 18;
      v6 -= 144;
    }
    while (v6);
    uint64_t v7 = *((unsigned int *)a1 + 2);
    if (v7)
    {
      uint64_t v8 = *a1;
      uint64_t v9 = 144 * v7;
      do
      {
        uint64_t v10 = *(void **)(v8 + v9 - 144);
        if ((void *)(v8 + v9 - 128) != v10) {
          free(v10);
        }
        v9 -= 144;
      }
      while (v9);
    }
  }
}

char **sub_1CD63C448(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 144 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 144];
      if (&v2[v4 - 128] != v5) {
        free(v5);
      }
      v4 -= 144;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD63C4C0(uint64_t a1, char *a2, _OWORD *a3, _OWORD *a4, _WORD *a5)
{
  uint64_t v10 = sub_1CB883A14(a1, 0, 0);
  *(void *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = 0;
  *(void *)(v10 + 168) = 0;
  *(void *)(v10 + 176) = 0;
  *(unsigned char *)(v10 + 184) = 0;
  *(void *)(v10 + 160) = 0;
  *(void *)(v10 + 144) = 0;
  *(void *)(v10 + 152) = &unk_1F2643C20;
  *(void *)uint64_t v10 = &unk_1F2643FD0;
  *(void *)(v10 + 192) = &unk_1F2643EA0;
  *(void *)(v10 + 200) = &unk_1F25F6428;
  *(void *)(v10 + 224) = v10 + 200;
  size_t v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_OWORD *)(a1 + 48) = *a3;
  *(_OWORD *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void sub_1CD63C5E8(long long *a1, __n128 *a2, _WORD *a3, _WORD *a4, _WORD *a5)
{
  sub_1CB883A14((uint64_t)&qword_1EBCDABC0, 1, 0);
  qword_1EBCDAC40 = 0;
  qword_1EBCDAC48 = 0;
  qword_1EBCDAC50 = 0;
  unk_1EBCDAC58 = 0;
  qword_1EBCDABC0 = (uint64_t)&unk_1F261E198;
  qword_1EBCDAC60 = 0;
  unk_1EBCDAC68 = 0;
  qword_1EBCDAC70 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCDAC78 = (uint64_t)&unk_1F261E2A0;
  qword_1EBCDAC90 = (uint64_t)&qword_1EBCDAC78;
  sub_1CD63C6D8(a1, a2, a3, a4, a5);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDABC0);
}

__n128 sub_1CD63C6D8(long long *a1, __n128 *a2, _WORD *a3, _WORD *a4, _WORD *a5)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCDABC0, "bisect-helper-shaderids-filter", 0x1EuLL);
  xmmword_1EBCDABF0 = *a1;
  __n128 result = *a2;
  xmmword_1EBCDABE0 = (__int128)*a2;
  word_1EBCDABCA = word_1EBCDABCA & 0xFF9F | (32 * (*a3 & 3));
  word_1EBCDABCA = word_1EBCDABCA & 0xFFF8 | *a4 & 7;
  word_1EBCDABCA |= (*a5 & 0x1F) << 9;
  return result;
}

void sub_1CD63C774()
{
}

void *sub_1CD63C788()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F261E2A0;
  return result;
}

void sub_1CD63C7C0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F261E2A0;
}

void sub_1CD63C7EC(long long *a1, long long *a2, _WORD *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCDAD80, 0, 0);
  qword_1EBCDAE00 = 0;
  qword_1EBCDAE08 = 0;
  qword_1EBCDAE28 = 0;
  unk_1EBCDAE30 = 0;
  byte_1EBCDAE38 = 0;
  qword_1EBCDAE20 = 0;
  unk_1EBCDAE10 = 0;
  unk_1EBCDAE18 = &unk_1F2643C20;
  qword_1EBCDAD80 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCDAE40 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCDAE48 = (uint64_t)&unk_1F25F6428;
  qword_1EBCDAE60 = (uint64_t)&qword_1EBCDAE48;
  llvm::cl::Option::setArgStr(v6, "bisect-helper-bbs-file", 0x16uLL);
  xmmword_1EBCDADB0 = *a1;
  xmmword_1EBCDADA0 = *a2;
  word_1EBCDAD8A = (32 * (*a3 & 3)) | word_1EBCDAD8A & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDAD80);
}

void sub_1CD63C910(long long *a1, long long *a2, _WORD *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCDAF50, 0, 0);
  qword_1EBCDAFD0 = 0;
  qword_1EBCDAFD8 = 0;
  qword_1EBCDAFF8 = 0;
  unk_1EBCDB000 = 0;
  byte_1EBCDB008 = 0;
  qword_1EBCDAFF0 = 0;
  unk_1EBCDAFE0 = 0;
  unk_1EBCDAFE8 = &unk_1F2643C20;
  qword_1EBCDAF50 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCDB010 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCDB018 = (uint64_t)&unk_1F25F6428;
  qword_1EBCDB030 = (uint64_t)&qword_1EBCDB018;
  llvm::cl::Option::setArgStr(v6, "bisect-helper-funcs-file", 0x18uLL);
  xmmword_1EBCDAF80 = *a1;
  xmmword_1EBCDAF70 = *a2;
  word_1EBCDAF5A = (32 * (*a3 & 3)) | word_1EBCDAF5A & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDAF50);
}

void sub_1CD63CA34(long long *a1, long long *a2, _WORD *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCDB038, 0, 0);
  qword_1EBCDB0B8 = 0;
  qword_1EBCDB0C0 = 0;
  qword_1EBCDB0E0 = 0;
  unk_1EBCDB0E8 = 0;
  byte_1EBCDB0F0 = 0;
  qword_1EBCDB0D8 = 0;
  unk_1EBCDB0C8 = 0;
  unk_1EBCDB0D0 = &unk_1F2643C20;
  qword_1EBCDB038 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCDB0F8 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCDB100 = (uint64_t)&unk_1F25F6428;
  qword_1EBCDB118 = (uint64_t)&qword_1EBCDB100;
  llvm::cl::Option::setArgStr(v6, "bisect-helper-set-funcs-attrs", 0x1DuLL);
  xmmword_1EBCDB068 = *a1;
  xmmword_1EBCDB058 = *a2;
  word_1EBCDB042 = (32 * (*a3 & 3)) | word_1EBCDB042 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDB038);
}

void sub_1CD63CB58(long long *a1, long long *a2, _WORD *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCDB120, 0, 0);
  qword_1EBCDB1A0 = 0;
  qword_1EBCDB1A8 = 0;
  qword_1EBCDB1C8 = 0;
  unk_1EBCDB1D0 = 0;
  byte_1EBCDB1D8 = 0;
  qword_1EBCDB1C0 = 0;
  unk_1EBCDB1B0 = 0;
  unk_1EBCDB1B8 = &unk_1F2643C20;
  qword_1EBCDB120 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCDB1E0 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCDB1E8 = (uint64_t)&unk_1F25F6428;
  qword_1EBCDB200 = (uint64_t)&qword_1EBCDB1E8;
  llvm::cl::Option::setArgStr(v6, "bisect-helper-split-bbs-file", 0x1CuLL);
  xmmword_1EBCDB150 = *a1;
  xmmword_1EBCDB140 = *a2;
  word_1EBCDB12A = (32 * (*a3 & 3)) | word_1EBCDB12A & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDB120);
}

void sub_1CD63CC7C(long long *a1, long long *a2, _WORD *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCDB208, 0, 0);
  qword_1EBCDB288 = 0;
  qword_1EBCDB290 = 0;
  qword_1EBCDB2B0 = 0;
  unk_1EBCDB2B8 = 0;
  byte_1EBCDB2C0 = 0;
  qword_1EBCDB2A8 = 0;
  unk_1EBCDB298 = 0;
  unk_1EBCDB2A0 = &unk_1F2643C20;
  qword_1EBCDB208 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCDB2C8 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCDB2D0 = (uint64_t)&unk_1F25F6428;
  qword_1EBCDB2E8 = (uint64_t)&qword_1EBCDB2D0;
  llvm::cl::Option::setArgStr(v6, "bisect-helper-split-bbs-out-file", 0x20uLL);
  xmmword_1EBCDB238 = *a1;
  xmmword_1EBCDB228 = *a2;
  word_1EBCDB212 = (32 * (*a3 & 3)) | word_1EBCDB212 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDB208);
}

void sub_1CD63CDA0(long long *a1, _WORD *a2, int **a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCDAB00, 0, 0);
  dword_1EBCDAB80 = 0;
  qword_1EBCDAB88 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCDAB90 = 0;
  qword_1EBCDAB00 = (uint64_t)&unk_1F2643F00;
  qword_1EBCDAB98 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCDABA0 = (uint64_t)&unk_1F25EA168;
  qword_1EBCDABB8 = (uint64_t)&qword_1EBCDABA0;
  llvm::cl::Option::setArgStr(v6, "bisect-helper-split-nb-insts", 0x1CuLL);
  xmmword_1EBCDAB20 = *a1;
  word_1EBCDAB0A = (32 * (*a2 & 3)) | word_1EBCDAB0A & 0xFF9F;
  dword_1EBCDAB80 = **a3;
  byte_1EBCDAB94 = 1;
  dword_1EBCDAB90 = dword_1EBCDAB80;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDAB00);
}

void sub_1CD63CEC8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB2F8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC79F6CC;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDB2F8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63CF3C()
{
}

uint64_t sub_1CD63CF78(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      size_t v11 = 0;
      __n128 result = sub_1CC01F8D4(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      uint64_t *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CD63D028(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    uint64_t result = 0;
    goto LABEL_3;
  }
  int v10 = sub_1CD63D12C(a3);
  size_t v11 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v13 = v10 & (a2 - 1);
    uint64_t v5 = (uint64_t *)(a1 + 32 * v13);
    uint64_t v14 = *v5;
    if (*(void *)a3 == *v5 && *(void *)(a3 + 8) == v5[1] && *(_DWORD *)(a3 + 16) == *((_DWORD *)v5 + 4))
    {
      uint64_t result = 1;
      goto LABEL_3;
    }
    if (v14 == -8192)
    {
      BOOL v16 = v5[1] == -8192 && *((_DWORD *)v5 + 4) == -2;
      goto LABEL_24;
    }
    if (v14 == -4096 && v5[1] == -4096 && *((_DWORD *)v5 + 4) == -1) {
      break;
    }
    BOOL v16 = 0;
LABEL_24:
    if (v16 && v11 == 0) {
      size_t v11 = (uint64_t *)(a1 + 32 * v13);
    }
    int v10 = v13 + i;
  }
  uint64_t result = 0;
  if (v11) {
    uint64_t v5 = v11;
  }
LABEL_3:
  *a4 = v5;
  return result;
}

uint64_t sub_1CD63D12C(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)a1 >> 4) ^ (*(_DWORD *)a1 >> 9);
  unsigned int v2 = sub_1CD63D1A0(*(void *)(a1 + 8), *(_DWORD *)(a1 + 16));
  unint64_t v3 = ~((unint64_t)v2 << 32) + v2 + (v1 << 32);
  unint64_t v4 = 9 * (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) ^ (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  return (v5 >> 31) ^ v5;
}

uint64_t sub_1CD63D1A0(unsigned int a1, int a2)
{
  unint64_t v2 = (((unint64_t)(37 * a2) << 32) - 1) ^ ((((unint64_t)(37 * a2) << 32) - 1) >> 22);
  unint64_t v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  unint64_t v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  unint64_t v5 = ((v4 >> 31) ^ v4 | ((unint64_t)((a1 >> 4) ^ (a1 >> 9)) << 32))
     + ~((unint64_t)((v4 >> 31) ^ v4) << 32);
  unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  return ((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27));
}

uint64_t sub_1CD63D21C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD63D028(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD63D29C(a1, a2, v7);
    *(void *)uint64_t v5 = *(void *)a2;
    *(void *)(v5 + 8) = *(void *)(a2 + 8);
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + 16);
    *(void *)(v5 + 24) = 0;
  }
  return v5;
}

uint64_t sub_1CD63D29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_13;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_13:
    sub_1CD63D368(a1, v6);
    uint64_t v9 = 0;
    sub_1CD63D028(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
    a3 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a3 != -4096 || (*(void *)(a3 + 8) == -4096 ? (BOOL v8 = *(_DWORD *)(a3 + 16) == -1) : (BOOL v8 = 0), !v8)) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

char *sub_1CD63D368(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD63D440(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    size_t v11 = &result[32 * v10];
    do
    {
      *(void *)uint64_t result = -4096;
      *((void *)result + 1) = -4096;
      *((_DWORD *)result + 4) = -1;
      result += 32;
    }
    while (result != v11);
  }
  return result;
}

uint64_t sub_1CD63D440(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)result;
    uint64_t v8 = *(void *)result + 32 * v6;
    do
    {
      *(void *)uint64_t v7 = -4096;
      *(void *)(v7 + 8) = -4096;
      *(_DWORD *)(v7 + 16) = -1;
      v7 += 32;
    }
    while (v7 != v8);
  }
  while (a2 != a3)
  {
    if (*(void *)a2 == -8192)
    {
      if (*(void *)(a2 + 8) != -8192 || *(_DWORD *)(a2 + 16) != -2)
      {
LABEL_17:
        uint64_t v12 = 0;
        uint64_t result = sub_1CD63D028(*(void *)v5, *(_DWORD *)(v5 + 16), a2, &v12);
        size_t v11 = v12;
        void *v12 = *(void *)a2;
        v11[1] = *(void *)(a2 + 8);
        *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
        v11[3] = *(void *)(a2 + 24);
        ++*(_DWORD *)(v5 + 8);
      }
    }
    else
    {
      if (*(void *)a2 != -4096) {
        goto LABEL_17;
      }
      if (*(void *)(a2 + 8) != -4096 || *(_DWORD *)(a2 + 16) != -1) {
        goto LABEL_17;
      }
    }
    a2 += 32;
  }
  return result;
}

char *sub_1CD63D544(char *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((unsigned int *)result + 4);
  int v3 = *((_DWORD *)result + 2);
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      uint64_t v6 = *(void *)result;
      uint64_t v7 = *(void *)result + 32 * v2;
      do
      {
        *(void *)uint64_t v6 = -4096;
        *(void *)(v6 + 8) = -4096;
        *(_DWORD *)(v6 + 16) = -1;
        v6 += 32;
      }
      while (v6 != v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 8);
    return sub_1CC7A55B4(v1, v5);
  }
  return result;
}

void sub_1CD63D5FC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB308, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7A85A0;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDB308, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63D670()
{
}

void sub_1CD63D6AC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB318, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7A9AD4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDB318, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

char **sub_1CD63D720(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v9 = v2;
    uint64_t v5 = v3 << 6;
    do
    {
      uint64_t v6 = &v9[v5];
      uint64_t v7 = *(char **)&v9[v5 - 24];
      if (&v9[v5 - 8] != v7) {
        free(v7);
      }
      uint64_t v8 = (char *)*((void *)v6 - 7);
      if (v6 - 40 != v8) {
        free(v8);
      }
      v5 -= 64;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD63D7B8(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 80) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 88), 8);
  }
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

char **sub_1CD63D814(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v7 = v2;
    uint64_t v5 = 48 * v3;
    do
    {
      uint64_t v6 = *(char **)&v7[v5 - 24];
      if (&v7[v5 - 8] != v6) {
        free(v6);
      }
      v5 -= 48;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD63D894(uint64_t a1)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  }
  return a1;
}

void *sub_1CD63D8D0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (_DWORD *)sub_1CD63EB6C(a1, a2, 1);
  uint64_t v4 = 0;
  uint64_t v5 = (void *)(*(void *)a1 + 1032 * *(unsigned int *)(a1 + 8));
  *uint64_t v5 = 1;
  do
  {
    v5[v4 + 1] = -4096;
    v4 += 2;
  }
  while (v4 != 128);
  uint64_t result = sub_1CD63ED14((uint64_t)v5, v3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CD63D944(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  int v3 = sub_1CD46E5FC(a1, &v7, &v8);
  uint64_t v4 = a1 + 8;
  if (v3) {
    return v8;
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v6 = 4;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

int *sub_1CD63D9C4(int *a1)
{
  int v2 = *a1;
  if (*a1 > 1)
  {
    if (v2)
    {
      uint64_t result = a1 + 2;
      uint64_t v7 = a1 + 258;
LABEL_10:
      while ((*(void *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 4;
        if (result == v7) {
          return v7;
        }
      }
    }
    else
    {
      uint64_t result = (int *)*((void *)a1 + 1);
      uint64_t v6 = a1[4];
      if (v6)
      {
        uint64_t v7 = &result[4 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      int v3 = a1 + 2;
      uint64_t v4 = 64;
    }
    else
    {
      int v3 = (int *)*((void *)a1 + 1);
      uint64_t v4 = a1[4];
    }
    return &v3[4 * v4];
  }
  return result;
}

void *sub_1CD63DA3C(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v6 = a2;
    uint64_t v7 = (uint64_t)result;
    do
    {
      uint64_t result = sub_1CC27F430(v7, v6, (uint64_t)v9);
      if (v9[16])
      {
        unint64_t v8 = *(unsigned int *)(v7 + 80);
        if (v8 >= *(unsigned int *)(v7 + 84)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 72) + 8 * v8) = *v6;
        ++*(_DWORD *)(v7 + 80);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

uint64_t sub_1CD63DAF4(uint64_t a1, uint64_t *a2)
{
  void v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a2;
  int v10 = 0;
  sub_1CD63DCD8(a1, &v9, &v10, (uint64_t)&v7);
  uint64_t v4 = v7;
  if (v8)
  {
    uint64_t v11 = v13;
    uint64_t v12 = 0x400000000;
    uint64_t v14 = *a2;
    int v15 = v17;
    uint64_t v16 = 0x400000000;
    sub_1CD63DC64(a1 + 72, (unint64_t)&v14);
    if (v15 != v17) {
      free(v15);
    }
    if (v11 != v13) {
      free(v11);
    }
    unsigned int v5 = *(_DWORD *)(a1 + 80) - 1;
    *(_DWORD *)(v4 + 8) = v5;
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(v7 + 8);
  }
  return *(void *)(a1 + 72) + 56 * v5 + 8;
}

uint64_t sub_1CD63DBFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1CD63D944(a1, *a2);
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = 4;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  if (v4 + 16 * v5 == v3) {
    uint64_t v6 = (unsigned int *)(a1 + 80);
  }
  else {
    uint64_t v6 = (unsigned int *)(v3 + 8);
  }
  return *(void *)(a1 + 72) + 56 * *v6;
}

unint64_t sub_1CD63DC64(uint64_t a1, unint64_t a2)
{
  unint64_t result = sub_1CD63E0BC(a1, a2, 1);
  uint64_t v4 = (void *)(*(void *)a1 + 56 * *(unsigned int *)(a1 + 8));
  *uint64_t v4 = *(void *)result;
  void v4[2] = 0x400000000;
  v4[1] = v4 + 3;
  uint64_t v5 = (uint64_t)(v4 + 1);
  if (*(_DWORD *)(result + 16)) {
    unint64_t result = sub_1CC79F218(v5, (const void **)(result + 8));
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CD63DCD8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = 0;
  uint64_t result = sub_1CD46E5FC(a1, a2, &v16);
  uint64_t v9 = v16;
  if (result)
  {
    uint64_t v10 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v11 = 4;
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = *(unsigned int *)(a1 + 16);
    }
    char v12 = 0;
    uint64_t v13 = v10 + 16 * v11;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD63DDA0((_DWORD *)a1, (uint64_t)a2, a2, v16);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    uint64_t v14 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v15 = 4;
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v15 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v13 = v14 + 16 * v15;
    char v12 = 1;
  }
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = v12;
  return result;
}

void *sub_1CD63DDA0(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD63DE60((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CD46E5FC((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CD63DE60(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD63DFEC(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)uint64_t v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD63DFEC(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1CD63DFEC(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD46E5FC((uint64_t)v5, (void *)a2, &v11);
      uint64_t v10 = v11;
      void *v11 = *(void *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

unint64_t sub_1CD63E0BC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 56 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      sub_1CD63E128();
    }
    sub_1CD63E128();
  }
  return a2;
}

void sub_1CD63E128()
{
}

void sub_1CD63E198(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1 + 56 * v2;
    uint64_t v5 = a2 + 24;
    uint64_t v6 = *a1 + 8;
    do
    {
      uint64_t v7 = v6 - 8;
      *(void *)(v5 - 24) = *(void *)(v6 - 8);
      *(void *)(v5 - 16) = v5;
      *(void *)(v5 - 8) = 0x400000000;
      if (*(_DWORD *)(v6 + 8)) {
        sub_1CC79F218(v5 - 16, (const void **)v6);
      }
      v5 += 56;
      v6 += 56;
    }
    while (v7 + 56 != v4);
    uint64_t v8 = *((unsigned int *)a1 + 2);
    if (v8)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = 56 * v8;
      do
      {
        uint64_t v11 = *(void **)(v9 + v10 - 48);
        if ((void *)(v9 + v10 - 32) != v11) {
          free(v11);
        }
        v10 -= 56;
      }
      while (v10);
    }
  }
}

void *sub_1CD63E260(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD46E5FC((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD63DDA0(a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

char **sub_1CD63E2C8(char **a1)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5) {
        free(v5);
      }
      v4 -= 56;
    }
    while (v4);
    unsigned int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD63E340@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = 0;
  uint64_t result = sub_1CD63E408(a1, a2, &v16);
  uint64_t v9 = v16;
  if (result)
  {
    uint64_t v10 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v11 = 64;
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = *(unsigned int *)(a1 + 16);
    }
    char v12 = 0;
    uint64_t v13 = v10 + 16 * v11;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD63E4B8((_DWORD *)a1, (uint64_t)a2, a2, v16);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(unsigned char *)(result + 8) = *a3;
    uint64_t v14 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v15 = 64;
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v15 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v13 = v14 + 16 * v15;
    char v12 = 1;
  }
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = v12;
  return result;
}

uint64_t sub_1CD63E408(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 64;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CD63E4B8(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 64;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD63E578((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CD63E408((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CD63E578(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x41)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x40)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD63E710(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)uint64_t v9 = v10;
      v9[8] = *(unsigned char *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 1024);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD63E710(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1CD63E710(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 1032);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD63E408((uint64_t)v5, (void *)a2, &v11);
      uint64_t v10 = v11;
      void *v11 = *(void *)a2;
      *((unsigned char *)v10 + 8) = *(unsigned char *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void *sub_1CD63E7E0(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD63E408((uint64_t)a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CD63E844(a1, (uint64_t)a2, a2, v7);
    *int v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CD63E844(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 64;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD63E904((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CD63E408((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CD63E904(uint64_t a1, unsigned int a2)
{
  v14[128] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x41)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v6 = *(void **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x40)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD63EA9C(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *uint64_t v9 = v10;
      v9[1] = *(void *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 1024);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD63EA9C(a1, v14, v9);
}

uint64_t sub_1CD63EA9C(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 1032);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD63E408((uint64_t)v5, a2, &v11);
      uint64_t v10 = v11;
      void *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

unint64_t sub_1CD63EB6C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 1032 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      sub_1CD63EBD8();
    }
    sub_1CD63EBD8();
  }
  return a2;
}

void sub_1CD63EBD8()
{
}

unsigned int *sub_1CD63EC48(unsigned int *result, unsigned int *a2)
{
  unsigned int v2 = result[2];
  if (v2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int **)result;
    uint64_t v5 = *(void *)result + 1032 * v2;
    do
    {
      *(void *)a2 = 1;
      int v6 = a2 + 258;
      for (uint64_t i = 2; i != 258; i += 4)
        *(void *)&a2[i] = -4096;
      uint64_t result = sub_1CC7B51E0(a2, v4);
      v4 += 258;
      a2 = v6;
    }
    while (v4 != (unsigned int *)v5);
    uint64_t v8 = v3[2];
    if (v8)
    {
      uint64_t v9 = *(void *)v3;
      uint64_t v10 = 1032 * v8;
      do
      {
        if ((*(unsigned char *)(v9 + v10 - 1032) & 1) == 0) {
          uint64_t result = (unsigned int *)MEMORY[0x1D25D9CD0](*(void *)(v9 + v10 - 1024), 8);
        }
        v10 -= 1032;
      }
      while (v10);
    }
  }
  return result;
}

void *sub_1CD63ED14(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
    unsigned int v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  if ((*(unsigned char *)a2 & 1) == 0 && a2[4] >= 0x41u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if (*a2) {
      uint64_t v5 = 64;
    }
    else {
      uint64_t v5 = a2[4];
    }
    *(void *)(a1 + 8) = operator new(16 * v5, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v5;
  }

  return sub_1CD63EDB8((unsigned int *)a1, a2);
}

void *sub_1CD63EDB8(unsigned int *a1, _DWORD *a2)
{
  int v3 = *a1 & 1;
  *a1 = *a2 & 0xFFFFFFFE | v3;
  a1[1] = a2[1];
  unsigned int v4 = a1 + 2;
  if (!v3) {
    unsigned int v4 = (void *)*v4;
  }
  char v6 = *(unsigned char *)a2;
  uint64_t v5 = a2 + 2;
  if ((v6 & 1) == 0) {
    uint64_t v5 = (void *)*v5;
  }
  if (v3) {
    size_t v7 = 1024;
  }
  else {
    size_t v7 = 16 * a1[4];
  }
  return memcpy(v4, v5, v7);
}

void *sub_1CD63EE08(_DWORD *a1, void *a2)
{
  size_t v7 = 0;
  char v4 = sub_1CD63E408((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD63E4B8(a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    *((unsigned char *)v5 + 8) = 0;
  }
  return v5;
}

void sub_1CD63EE70()
{
}

void sub_1CD63EEE0()
{
}

void sub_1CD63EF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    size_t v7 = *(void **)a1;
    uint64_t v8 = 40 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v13 = 0;
        sub_1CC7B6200(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        uint64_t v10 = v13;
        *uint64_t v13 = *(void *)v4;
        uint64_t v10[2] = 0x200000000;
        v10[1] = v10 + 3;
        uint64_t v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16)) {
          sub_1CC79F218(v11, (const void **)(v4 + 8));
        }
        ++*(_DWORD *)(a1 + 8);
        BOOL v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12) {
          free(v12);
        }
      }
      v4 += 40;
    }
    while (v4 != a3);
  }
}

llvm::SmallPtrSetImplBase *sub_1CD63F044(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a2 != a4)
  {
    uint64_t v6 = a2;
    size_t v7 = this;
    do
    {
      this = (llvm::SmallPtrSetImplBase *)sub_1CB89694C(v7, *v6);
      uint64_t v8 = (unint64_t *)(v6 + 1);
      while (1)
      {
        uint64_t v6 = a3;
        if (v8 == (unint64_t *)a3) {
          break;
        }
        unint64_t v9 = *v8++;
        if (v9 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v6 = (uint64_t *)(v8 - 1);
          break;
        }
      }
    }
    while (v6 != a4);
  }
  return this;
}

void *sub_1CD63F0BC(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3) {
    int v4 = 1 << (33 - v3);
  }
  else {
    int v4 = 64;
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 5)
  {
    uint64_t v6 = result + 1;
    *uint64_t result = 1;
    size_t v7 = result + 9;
    do
    {
LABEL_10:
      *uint64_t v6 = -4096;
      v6 += 2;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == *((_DWORD *)result + 4))
    {
      *uint64_t result = 0;
      if (!v5) {
        return result;
      }
      uint64_t v6 = (void *)result[1];
      size_t v7 = &v6[2 * v5];
      goto LABEL_10;
    }
    MEMORY[0x1D25D9CD0](result[1], 8);
  }

  return sub_1CBF8AE8C(v1, v5);
}

void sub_1CD63F194(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB4A8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7B755C;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDB4A8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63F208()
{
}

void sub_1CD63F244(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB4B0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7B7E6C;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDB4B0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63F2B8()
{
}

void sub_1CD63F314(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB4C0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7B8750;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDB4C0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63F388(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB4D0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7B8E10;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDB4D0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63F3FC()
{
}

llvm::Instruction *sub_1CD63F438(uint64_t a1, llvm::Type *a2, llvm::Type *a3, void *a4, uint64_t a5)
{
  Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
  uint64_t DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
  PrefTypeAliguint64_t n = llvm::DataLayout::getPrefTypeAlign(DataLayout, a2);
  uint64_t v13 = operator new(0x68uLL);
  v13[13] = v13[13] & 0x38000000 | 1;
  uint64_t v14 = (llvm::Instruction *)(v13 + 8);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = v13 + 8;
  __int16 v17 = 257;
  llvm::AllocaInst::AllocaInst((unint64_t *)v13 + 4, a2, a3, a4, PrefTypeAlign, &v16, 0);
  return sub_1CB844E0C((uint64_t *)a1, v14, a5);
}

uint64_t sub_1CD63F4FC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) == 89
    && ((int v2 = *(_DWORD *)(a2 + 20), (v2 & 0x40000000) != 0)
      ? (unsigned int v3 = *(void **)(a2 - 8))
      : (unsigned int v3 = (void *)(a2 - 32 * (v2 & 0x7FFFFFF))),
        *(void *)a1 == *v3))
  {
    return sub_1CC7BB9C8((void **)(a1 + 8), v3[4]);
  }
  else
  {
    return 0;
  }
}

void sub_1CD63F544(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB4E0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7BBB0C;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDB4E0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63F5B8()
{
}

void sub_1CD63F604(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB4F0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7BC934;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDB4F0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63F678()
{
}

void sub_1CD63F6B4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB500, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7C2514;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDB500, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63F728()
{
}

void sub_1CD63F774()
{
}

uint64_t sub_1CD63F7B4(uint64_t a1, char a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDB4F8;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261E970;
  if (byte_1EBCDB588) {
    a2 = 1;
  }
  *(unsigned char *)(a1 + 28) = a2;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB500, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CC7C2514;
    v7[1] = &PassRegistry;
    uint64_t v6 = v7;
    std::__call_once(&qword_1EBCDB500, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CD63F87C(llvm::ModulePass *a1)
{
  llvm::ModulePass::~ModulePass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CD63F8B4()
{
  return "Expand Fence And Barrier";
}

void sub_1CD63F8C4(long long *a1, char **a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)qword_1EBCDB508, 0, 0);
  byte_1EBCDB588 = 0;
  qword_1EBCDB590 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCDB598 = 0;
  qword_1EBCDB508[0] = (uint64_t)&unk_1F26440A0;
  qword_1EBCDB5A0 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCDB5A8 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCDB5C0 = (uint64_t)&qword_1EBCDB5A8;
  llvm::cl::Option::setArgStr(v4, "force-multi-l2", 0xEuLL);
  xmmword_1EBCDB528 = *a1;
  unsigned int v5 = *a2;
  byte_1EBCDB588 = **a2;
  byte_1EBCDB599 = 1;
  byte_1EBCDB598 = *v5;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCDB508);
}

void sub_1CD63F9D4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB5D8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7C27AC;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDB5D8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63FA48()
{
}

void sub_1CD63FB4C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB608, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7C5DEC;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDB608, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63FBC0()
{
}

void sub_1CD63FC0C(int **a1, _WORD *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCDB610, 0, 0);
  dword_1EBCDB690 = 0;
  qword_1EBCDB698 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCDB6A0 = 0;
  qword_1EBCDB610 = (uint64_t)&unk_1F2643F00;
  qword_1EBCDB6A8 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCDB6B0 = (uint64_t)&unk_1F25EA168;
  qword_1EBCDB6C8 = (uint64_t)&qword_1EBCDB6B0;
  llvm::cl::Option::setArgStr(v4, "threshold", 9uLL);
  dword_1EBCDB690 = **a1;
  byte_1EBCDB6A4 = 1;
  dword_1EBCDB6A0 = dword_1EBCDB690;
  word_1EBCDB61A = (32 * (*a2 & 3)) | word_1EBCDB61A & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDB610);
}

void sub_1CD63FD28(int **a1, _WORD *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCDB6D0, 0, 0);
  dword_1EBCDB750 = 0;
  qword_1EBCDB758 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCDB760 = 0;
  qword_1EBCDB6D0 = (uint64_t)&unk_1F2643F00;
  qword_1EBCDB768 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCDB770 = (uint64_t)&unk_1F25EA168;
  qword_1EBCDB788 = (uint64_t)&qword_1EBCDB770;
  llvm::cl::Option::setArgStr(v4, "single-threshold", 0x10uLL);
  dword_1EBCDB750 = **a1;
  byte_1EBCDB764 = 1;
  dword_1EBCDB760 = dword_1EBCDB750;
  word_1EBCDB6DA = (32 * (*a2 & 3)) | word_1EBCDB6DA & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDB6D0);
}

void sub_1CD63FE44(int **a1, _WORD *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCDB790, 0, 0);
  dword_1EBCDB810 = 0;
  qword_1EBCDB818 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCDB820 = 0;
  qword_1EBCDB790 = (uint64_t)&unk_1F2643F00;
  qword_1EBCDB828 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCDB830 = (uint64_t)&unk_1F25EA168;
  qword_1EBCDB848 = (uint64_t)&qword_1EBCDB830;
  llvm::cl::Option::setArgStr(v4, "simple-switch-threshold", 0x17uLL);
  dword_1EBCDB810 = **a1;
  byte_1EBCDB824 = 1;
  dword_1EBCDB820 = dword_1EBCDB810;
  word_1EBCDB79A = (32 * (*a2 & 3)) | word_1EBCDB79A & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDB790);
}

void sub_1CD63FF60(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB918, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7C9474;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDB918, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD63FFD4()
{
}

void sub_1CD640010(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDB928, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7CA8A4;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDB928, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD640084()
{
}

void sub_1CD6400C0(_WORD *a1, __n128 *a2, int **a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCDB930, 0, 0);
  dword_1EBCDB9B0 = 0;
  qword_1EBCDB9B8 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCDB9C0 = 0;
  qword_1EBCDB930 = (uint64_t)&unk_1F2643F00;
  qword_1EBCDB9C8 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCDB9D0 = (uint64_t)&unk_1F25EA168;
  qword_1EBCDB9E8 = (uint64_t)&qword_1EBCDB9D0;
  sub_1CD6401B0(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDB930);
}

__n128 sub_1CD6401B0(_WORD *a1, __n128 *a2, int **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCDB930, "max-fma-contraction", 0x13uLL);
  word_1EBCDB93A = (32 * (*a1 & 3)) | word_1EBCDB93A & 0xFF9F;
  __n128 result = *a2;
  xmmword_1EBCDB950 = (__int128)*a2;
  size_t v7 = *a3;
  dword_1EBCDB9B0 = **a3;
  byte_1EBCDB9C4 = 1;
  dword_1EBCDB9C0 = *v7;
  return result;
}

void sub_1CD640238(llvm *a1)
{
  sub_1CD63B86C((uint64_t)a1);
  sub_1CD63BB34((uint64_t)a1);
  sub_1CD63B530((uint64_t)a1);
  sub_1CD63B91C((uint64_t)a1);
  llvm::initializeAGXInstCombinePass(a1, v2);
  sub_1CD63BA84((uint64_t)a1);
  sub_1CD63BD30((uint64_t)a1);
  sub_1CD63FF60((uint64_t)a1);
  sub_1CD63BCBC((uint64_t)a1);
  sub_1CD63BF58((uint64_t)a1);
  sub_1CD63CEC8((uint64_t)a1);
  sub_1CD63D5FC((uint64_t)a1);
  sub_1CD63D6AC((uint64_t)a1);
  sub_1CC7CBFB0((uint64_t)a1);
  sub_1CD63F244((uint64_t)a1);
  sub_1CD644C80((uint64_t)a1);
  sub_1CD63F314((uint64_t)a1);
  sub_1CD63F604((uint64_t)a1);
  sub_1CD63BBA8((uint64_t)a1);
  sub_1CD63F9D4((uint64_t)a1);
  sub_1CD63FB4C((uint64_t)a1);
  sub_1CD643E5C((uint64_t)a1);
  sub_1CD640010((uint64_t)a1);
  sub_1CD640418((uint64_t)a1);
  sub_1CD640564((uint64_t)a1);
  sub_1CD640614((uint64_t)a1);
  sub_1CD6406D4((uint64_t)a1);
  sub_1CD640854((uint64_t)a1);
  sub_1CD640CA8((uint64_t)a1);
  sub_1CD63B7BC((uint64_t)a1);
  sub_1CD645CA8((uint64_t)a1);
  sub_1CD640E18((uint64_t)a1);
  sub_1CD64251C((uint64_t)a1);
  sub_1CD642618((uint64_t)a1);
  sub_1CD642C0C((uint64_t)a1);
  sub_1CD6426C8((uint64_t)a1);
  sub_1CD642B5C((uint64_t)a1);
  sub_1CD640D58((uint64_t)a1);
  sub_1CD6430FC((uint64_t)a1);
  sub_1CD64336C((uint64_t)a1);
  sub_1CD643DAC((uint64_t)a1);
  sub_1CD643F0C((uint64_t)a1);
  sub_1CD646260((uint64_t)a1);
  sub_1CD646538((uint64_t)a1);
  sub_1CD646C28((uint64_t)a1);
  sub_1CD646C9C((uint64_t)a1);
  sub_1CD6465E8((uint64_t)a1);
  sub_1CD63F194((uint64_t)a1);
  sub_1CD63F544((uint64_t)a1);
  sub_1CD646F98((uint64_t)a1);
  sub_1CD6460DC((uint64_t)a1);
  sub_1CD647048((uint64_t)a1);
  sub_1CD645BF8((uint64_t)a1);
  sub_1CD63F388((uint64_t)a1);

  sub_1CD63F6B4((uint64_t)a1);
}

void sub_1CD640418(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBAC8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7D335C;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDBAC8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD64048C()
{
}

uint64_t sub_1CD6404D8(double *a1, llvm::Constant *this)
{
  if (!this || *((unsigned char *)this + 16) != 17)
  {
    if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) != 0x12) {
      return 0;
    }
    SplatValue = (llvm::Constant *)llvm::Constant::getSplatValue(this, 0);
    if (!SplatValue) {
      return 0;
    }
    this = SplatValue;
    if (*((unsigned char *)SplatValue + 16) != 17) {
      return 0;
    }
  }
  double v3 = *a1;

  return sub_1CB844168((uint64_t)this, v3);
}

void sub_1CD640564(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBAD8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7D457C;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDBAD8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD6405D8()
{
}

void sub_1CD640614(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBAE8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7D9434;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDBAE8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD640688()
{
}

void sub_1CD6406D4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBBB8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7DD554;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDBBB8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t sub_1CD640748(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      size_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  size_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      size_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      size_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CD6407F4(uint64_t a1, void *a2)
{
  size_t v7 = 0;
  char v4 = sub_1CC7EBE90(a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CC7EBF40(a1, (uint64_t)a2, a2, v7);
    *int v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void sub_1CD640854(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBBC8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7EC3E4;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCDBBC8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD6408C8()
{
}

uint64_t sub_1CD640904(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v8 = 0;
  uint64_t v9 = v3;
  if (sub_1CBFF6924((uint64_t *)a1, &v9, &v8))
  {
    uint64_t v4 = v8;
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *(unsigned int *)(a1 + 16);
    uint64_t v4 = *(void *)a1 + 16 * v6;
  }
  if (v4 == v5 + 16 * v6) {
    return *(void *)(a1 + 32);
  }
  else {
    return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v4 + 8);
  }
}

uint64_t sub_1CD640980(uint64_t a1, unsigned int a2)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD640B0C(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *uint64_t v9 = v10;
      v9[1] = *(void *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD640B0C(a1, v14, v9);
}

uint64_t sub_1CD640B0C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = sub_1CC7EE270((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      uint64_t *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void *sub_1CD640BD0(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  char v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C) {
    int v4 = 64;
  }
  else {
    int v4 = 1 << (33 - v3);
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 9)
  {
    int v6 = result + 1;
    *uint64_t result = 1;
    uint64_t v7 = result + 17;
    do
    {
LABEL_10:
      *int v6 = -4096;
      v6 += 2;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == *((_DWORD *)result + 4))
    {
      *uint64_t result = 0;
      if (!v5) {
        return result;
      }
      int v6 = (void *)result[1];
      uint64_t v7 = &v6[2 * v5];
      goto LABEL_10;
    }
    MEMORY[0x1D25D9CD0](result[1], 8);
  }

  return sub_1CB901268(v1, v5);
}

void sub_1CD640CA8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBBD8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7EEA04;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDBBD8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD640D1C()
{
}

void sub_1CD640D58(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBBE8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7EFC70;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDBBE8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD640DCC()
{
}

void sub_1CD640E18(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDBBF8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC7F1550;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDBBF8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD640E8C()
{
}

void sub_1CD640EC8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  v12[24] = *MEMORY[0x1E4F143B8];
  sub_1CC7FA5F4((uint64_t)&v9, a2);
  sub_1CC7FA5F4((uint64_t)&v5, a3);
  sub_1CC7FA5F4(a1, (uint64_t *)&v9);
  sub_1CC7FA5F4(a1 + 304, (uint64_t *)&v5);
  if (v7 != &v8) {
    free(v7);
  }
  if (v6 != v5) {
    free(v6);
  }
  if (v11 != v12) {
    free(v11);
  }
  if (v10 != v9) {
    free(v10);
  }
}

void sub_1CD640FA4(uint64_t a1, uint64_t a2)
{
  v23[15] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a2;
  int v4 = *(llvm::Type **)a2;
  uint64_t v5 = *(void *)(a2 + 32);
  int v6 = (uint64_t **)(v5 - 24);
  if (v5) {
    BOOL v7 = v5 == *(void *)(a2 + 40) + 40;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v5 - 24;
  }
  if (*(unsigned char *)(v8 + 16) == 83)
  {
    uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(*(llvm::BasicBlock **)(v8 + 40));
    if (FirstInsertionPt) {
      int v6 = (uint64_t **)(FirstInsertionPt - 24);
    }
    else {
      int v6 = 0;
    }
  }
  sub_1CC243A10((uint64_t)v22, v6, 0, 0, 0);
  uint64_t v10 = sub_1CD6417AC(a1, v6);
  uint64_t PointerTo = llvm::Type::getPointerTo(v4, 3u);
  __int16 v20 = 773;
  v19[0] = llvm::Value::getName((llvm::Value *)v10);
  v19[1] = v12;
  void v19[2] = "bc";
  uint64_t v13 = sub_1CB84580C((uint64_t)v22, 49, (uint64_t)v10, PointerTo, (uint64_t)v19);
  uint64_t v14 = (llvm::SmallPtrSetImplBase *)(a1 + 8);
  sub_1CB89694C((llvm::SmallPtrSetImplBase *)(a1 + 8), (uint64_t)v13);
  uint64_t v15 = sub_1CC27BF8C((uint64_t *)v22, a2, (uint64_t)v13, 0, 0);
  sub_1CB89694C((llvm::SmallPtrSetImplBase *)(a1 + 336), *((void *)v15 + 5));
  uint64_t v16 = sub_1CD4CB550(a1 + 704, &v21);
  v16[1] = v15;
  void v16[2] = 0;
  if (*(unsigned char *)(a2 + 16) == 83)
  {
    __int16 v17 = sub_1CD641974(a1 + 1016, &v21);
    unsigned int v18 = *((_DWORD *)v17 + 4);
    if (v18 >= *((_DWORD *)v17 + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(v17[1] + 8 * v18) = v15;
    ++*((_DWORD *)v17 + 4);
  }
  sub_1CB89694C(v14, (uint64_t)v15);
  if (v22[0] != v23) {
    free(v22[0]);
  }
}

void sub_1CD64118C(uint64_t a1, llvm::Type ***a2)
{
  v35[15] = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  uint64_t v5 = (uint64_t)a2[3];
  int v6 = (llvm::SmallPtrSetImplBase *)(a1 + 8);
  BOOL v7 = sub_1CB896AE8(a1 + 8, v5);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = 24;
  if (v8 == *(void *)(a1 + 8)) {
    uint64_t v9 = 28;
  }
  if (v7 == (void *)(v8 + 8 * *(unsigned int *)(a1 + v9)))
  {
    if (*(unsigned char *)(v5 + 16) == 83)
    {
      int v10 = *(_DWORD *)(v5 + 20);
      if ((v10 & 0x40000000) != 0) {
        uint64_t v11 = *(void *)(v5 - 8);
      }
      else {
        uint64_t v11 = v5 - 32 * (v10 & 0x7FFFFFF);
      }
      uint64_t v12 = *(void *)(v11 + 32 * *(unsigned int *)(v5 + 60) + 8
                                                                * (((unint64_t)a2 - v11) >> 5));
      uint64_t v13 = *(void *)(v12 + 40);
      if (v13 == v12 + 40)
      {
        uint64_t v5 = 0;
      }
      else
      {
        if (v13) {
          uint64_t v14 = v13 - 24;
        }
        else {
          uint64_t v14 = 0;
        }
        if (*(unsigned __int8 *)(v14 + 16) - 29 >= 0xB) {
          uint64_t v5 = 0;
        }
        else {
          uint64_t v5 = v14;
        }
      }
    }
    sub_1CC243A10((uint64_t)v34, (uint64_t **)v5, 0, 0, 0);
    uint64_t v15 = sub_1CD6417AC(a1, (uint64_t **)v5);
    uint64_t PointerTo = llvm::Type::getPointerTo(**a2, 3u);
    __int16 v33 = 773;
    Name = llvm::Value::getName((llvm::Value *)v15);
    uint64_t v31 = v17;
    long long v32 = "bc";
    unsigned int v18 = sub_1CB84580C((uint64_t)v34, 49, (uint64_t)v15, PointerTo, (uint64_t)&Name);
    sub_1CB89694C(v6, (uint64_t)v18);
    unsigned int v19 = **a2;
    __int16 v20 = llvm::Value::getName((llvm::Value *)v4);
    __int16 v33 = 773;
    Name = v20;
    uint64_t v31 = v21;
    long long v32 = "_reload";
    long long v22 = sub_1CC241384((uint64_t *)v34, v19, (uint64_t)v18, 0, 0, (uint64_t)&Name);
    sub_1CB89694C((llvm::SmallPtrSetImplBase *)(a1 + 496), *((void *)v22 + 5));
    Name = (char *)v22;
    sub_1CD50FB1C((uint64_t *)(a1 + 656), &Name)[1] = v4;
    sub_1CB89694C((llvm::SmallPtrSetImplBase *)(a1 + 728), (uint64_t)v4);
    if (v23)
    {
      Name = (char *)v4;
      sub_1CD4CB550(a1 + 704, (uint64_t *)&Name)[2] = v22;
    }
    else
    {
      Name = 0;
      if (sub_1CD45B528(*(void *)(a1 + 704), *(_DWORD *)(a1 + 720), (uint64_t)v4, &Name))
      {
        *(void *)Name = -8192;
        *(int32x2_t *)(a1 + 712) = vadd_s32(*(int32x2_t *)(a1 + 712), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    if (*((unsigned char *)v4 + 16) == 83)
    {
      Name = (char *)v4;
      long long v28 = sub_1CD641974(a1 + 1016, (uint64_t *)&Name);
      unsigned int v29 = *((_DWORD *)v28 + 4);
      if (v29 >= *((_DWORD *)v28 + 5)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v28[1] + 8 * v29) = v22;
      ++*((_DWORD *)v28 + 4);
    }
    sub_1CB89694C(v6, (uint64_t)v22);
    if (*a2)
    {
      *a2[2] = (llvm::Type *)a2[1];
      uint64_t v24 = a2[1];
      if (v24) {
        void v24[2] = (llvm::Type *)a2[2];
      }
    }
    *a2 = (llvm::Type **)v22;
    long long v27 = (llvm::Type **)*((void *)v22 + 1);
    unsigned int v26 = (llvm::Type ****)((char *)v22 + 8);
    long long v25 = v27;
    a2[1] = v27;
    if (v27) {
      v25[2] = (llvm::Type *)(a2 + 1);
    }
    a2[2] = (llvm::Type **)v26;
    *unsigned int v26 = a2;
    if (v34[0] != v35) {
      free(v34[0]);
    }
  }
}

uint64_t sub_1CD6414B8(uint64_t result, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  BOOL v7 = a3;
  uint64_t v8 = *(void *)result;
  uint64_t v9 = *(unsigned int *)(result + 8);
  if (*(void *)result + 8 * v9 == a2)
  {
    return sub_1CD482BCC(result, a3, a4, a5);
  }
  else
  {
    if (a3 == a5)
    {
      unint64_t v10 = 0;
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v11 = a3;
      do
      {
        ++v10;
        uint64_t v12 = v11 + 1;
        while (v12 != a4)
        {
          unint64_t v13 = *v12++;
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v11 = v12 - 1;
            goto LABEL_9;
          }
        }
        uint64_t v11 = a4;
LABEL_9:
        ;
      }
      while (v11 != a5);
    }
    uint64_t v14 = (a2 - v8) >> 3;
    if (v10 + v9 > *(unsigned int *)(result + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v15 = (char *)(v8 + 8 * v14);
    uint64_t v16 = (char *)(v8 + 8 * v9);
    unint64_t v17 = (v16 - v15) >> 3;
    if (v17 >= v10)
    {
      uint64_t v24 = &v16[-8 * v10];
      uint64_t result = sub_1CD4570C8(result, v24, (char *)(v8 + 8 * v9));
      if (v24 != v15) {
        uint64_t result = (uint64_t)memmove(&v16[-(v24 - v15)], v15, v24 - v15);
      }
      while (v7 != a5)
      {
        unint64_t v26 = *v7;
        long long v25 = v7 + 1;
        *(void *)uint64_t v15 = v26;
        while (v25 != a4)
        {
          unint64_t v27 = *v25++;
          if (v27 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            BOOL v7 = v25 - 1;
            goto LABEL_41;
          }
        }
        BOOL v7 = a4;
LABEL_41:
        v15 += 8;
      }
    }
    else
    {
      *(_DWORD *)(result + 8) = v9 + v10;
      if (v14 != v9)
      {
        uint64_t result = (uint64_t)memcpy((void *)(v8 + 8 * (v9 + v10) - 8 * v17), v15, v16 - v15);
        do
        {
          unint64_t v19 = *v7;
          unsigned int v18 = v7 + 1;
          *(void *)uint64_t v15 = v19;
          v15 += 8;
          while (v18 != a4)
          {
            unint64_t v20 = *v18++;
            if (v20 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              BOOL v7 = v18 - 1;
              goto LABEL_20;
            }
          }
          BOOL v7 = a4;
LABEL_20:
          --v17;
        }
        while (v17);
      }
      while (v7 != a5)
      {
        unint64_t v22 = *v7;
        uint64_t v21 = v7 + 1;
        *(void *)uint64_t v16 = v22;
        while (v21 != a4)
        {
          unint64_t v23 = *v21++;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            BOOL v7 = v21 - 1;
            goto LABEL_27;
          }
        }
        BOOL v7 = a4;
LABEL_27:
        v16 += 8;
      }
    }
  }
  return result;
}

uint64_t sub_1CD6416D4(uint64_t *a1, llvm::DataLayout *this)
{
  uint64_t v4 = *a1;
  unsigned int v5 = *(unsigned __int8 *)(*a1 + 8);
  if (v5 > 0x11) {
    goto LABEL_12;
  }
  int v6 = (llvm::Type *)*a1;
  if (((1 << v5) & 0xAC7F) != 0) {
    goto LABEL_3;
  }
  if (((1 << v5) & 0x30000) == 0)
  {
LABEL_12:
    if ((v5 & 0xFE) != 0x12 && v5 != 21) {
      return 0;
    }
  }
  uint64_t result = llvm::Type::isSizedDerivedType(*a1, 0);
  if (!result) {
    return result;
  }
  int v6 = (llvm::Type *)*a1;
LABEL_3:
  if (llvm::DataLayout::getAlignment(this, v6, 1) > 4u) {
    return 0;
  }
  int v9 = sub_1CB83544C((uint64_t)this, v4);
  if (v8 == 1) {
  return (v9 & 0xFFFFFFF8) != 0;
  }
}

uint64_t *sub_1CD6417AC(uint64_t a1, uint64_t **a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)sub_1CC8074B4(a1);
  if (*(_DWORD *)(a1 + 328))
  {
    sub_1CC243A10((uint64_t)v27, a2, 0, 0, 0);
    Context = (llvm::Type *)llvm::Function::getContext(*(llvm::Function **)a1);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v26 = 0;
    int v17 = 0;
    char v21 = 0;
    uint64_t v22 = 0;
    uint64_t v24 = __p;
    int v23 = 0;
    uint64_t v16 = &unk_1F2646F30;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v6 = sub_1CB8E509C((llvm::raw_ostream *)&v16, "scalar_slot");
    sub_1CD098D14(v6, *(unsigned int *)(a1 + 328), 0, 0, 0);
    uint64_t v8 = (unsigned char *)*((void *)v6 + 4);
    if ((unint64_t)v8 >= *((void *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 95);
    }
    else
    {
      *((void *)v6 + 4) = v8 + 1;
      *uint64_t v8 = 95;
    }
    uint64_t Int8Ty = llvm::Type::getInt8Ty(v29, v7);
    Int16Ty = (llvm::ConstantInt *)llvm::Type::getInt16Ty(Context, v10);
    uint64_t v12 = (const char *)llvm::ConstantInt::get(Int16Ty, *(unsigned int *)(a1 + 328), 0);
    __int16 v15 = 260;
    uint64_t v14 = v24;
    uint64_t v4 = (uint64_t *)sub_1CB930F7C((uint64_t *)v27, Int8Ty, v4, v12, (uint64_t)&v14);
    sub_1CB89694C((llvm::SmallPtrSetImplBase *)(a1 + 8), (uint64_t)v4);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v16);
    if (SHIBYTE(v26) < 0) {
      operator delete(__p[0]);
    }
    if (v27[0] != &v28) {
      free(v27[0]);
    }
  }
  return v4;
}

void *sub_1CD641974(uint64_t a1, uint64_t *a2)
{
  BOOL v7 = 0;
  char v4 = sub_1CD513A78(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unsigned int v5 = v7;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = sub_1CD6419F0(a1, a2, v7);
    *unsigned int v5 = *a2;
    v5[1] = v5 + 3;
    void v5[2] = 0x800000000;
  }
  return v5;
}

void *sub_1CD6419F0(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD641AA4(a1, v6);
  uint64_t v8 = 0;
  sub_1CD513A78(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD641AA4(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD641B7C(a1, v4, v4 + 88 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 88 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 11;
      v11 -= 88;
    }
    while (v11);
  }
  return result;
}

void sub_1CD641B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 88 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 11;
      v8 -= 88;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unint64_t v13 = 0;
        sub_1CD513A78(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        unsigned int v10 = v13;
        *unint64_t v13 = *(void *)v4;
        uint64_t v10[2] = 0x800000000;
        v10[1] = v10 + 3;
        uint64_t v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16)) {
          sub_1CBA6E388(v11, (const void **)(v4 + 8));
        }
        ++*(_DWORD *)(a1 + 8);
        uint64_t v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12) {
          free(v12);
        }
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
}

void sub_1CD641C74(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  unint64_t v5 = (uint64_t *)a3[1];
  if (v5 == (uint64_t *)*a3) {
    unsigned int v6 = (unsigned int *)a3 + 5;
  }
  else {
    unsigned int v6 = (unsigned int *)(a3 + 2);
  }
  uint64_t v7 = *v6;
  uint64_t v8 = &v5[v7];
  if (v7)
  {
    uint64_t v20 = 8 * v7;
    while ((unint64_t)*v5 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v5;
      v20 -= 8;
      if (!v20)
      {
        unint64_t v5 = v8;
        break;
      }
    }
  }
  uint64_t v22 = v26;
  int v23 = v26;
  uint64_t v24 = 16;
  int v25 = 0;
  sub_1CD596984((llvm::SmallPtrSetImplBase *)&v22, v5, v8, v8);
  uint64_t v11 = *(void **)(a2 + 40);
  uint64_t v9 = (void *)(a2 + 40);
  for (uint64_t i = v11; i != v9; uint64_t i = (void *)*i)
  {
    if (i) {
      uint64_t v12 = (uint64_t)(i - 3);
    }
    else {
      uint64_t v12 = 0;
    }
    if (*(unsigned char *)(v12 + 16) == 83) {
      break;
    }
    unint64_t v13 = (char *)sub_1CB896AE8((uint64_t)&v22, v12);
    if (v23 == v22) {
      uint64_t v14 = (uint64_t *)((char *)&v24 + 4);
    }
    else {
      uint64_t v14 = &v24;
    }
    if (v13 != &v23[8 * *(unsigned int *)v14])
    {
      *(void *)unint64_t v13 = -2;
      ++v25;
    }
    int v15 = *(_DWORD *)(v12 + 20);
    if ((v15 & 0x40000000) != 0)
    {
      int v17 = *(uint64_t **)(v12 - 8);
      uint64_t v16 = v15 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v16 = v15 & 0x7FFFFFF;
      int v17 = (uint64_t *)(v12 - 32 * v16);
    }
    if (v16)
    {
      uint64_t v18 = 32 * v16;
      do
      {
        sub_1CB89694C((llvm::SmallPtrSetImplBase *)&v22, *v17);
        if (v19)
        {
          uint64_t v21 = *v17;
          sub_1CD467E2C(a1, &v21)[1] = v12;
        }
        v17 += 4;
        v18 -= 32;
      }
      while (v18);
    }
  }
  if (v23 != v22) {
    free(v23);
  }
}

uint64_t sub_1CD641E24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = sub_1CC7FC7D0((uint64_t *)a2, a1[40], a3, a4);
  if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu) {
    return (HIDWORD(v7) + v7);
  }
  unsigned int v8 = v6;
  uint64_t v9 = sub_1CB896AE8((uint64_t)(a1 + 1), a2);
  uint64_t v10 = a1[2];
  uint64_t v11 = 24;
  if (v10 == a1[1]) {
    uint64_t v11 = 28;
  }
  if (v9 == (void *)(v10 + 8 * *(unsigned int *)((char *)a1 + v11))) {
    return (HIDWORD(v7) + v7);
  }
  uint64_t v12 = a1[38];
  if (*(unsigned char *)(a2 + 16) != 60)
  {
    BOOL v14 = v12 == a2;
    uint64_t v12 = a2;
    if (!v14) {
      return 0;
    }
  }
  if (v12 == a2) {
    return 0;
  }
  return v8;
}

void sub_1CD641ED8(uint64_t a1, void *a2, void *a3, llvm::Instruction **a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 8))
  {
    uint64_t v11 = *(void *)a1;
    **(_DWORD **)(a1 + 24) = 0;
    uint64_t v12 = *((void *)*a4 + 5);
    uint64_t v13 = sub_1CC807C30(v11, *a4, v6, *(unsigned __int8 *)(a1 + 40));
    uint64_t v18 = v14;
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v15 = v14;
      sub_1CB89694C(*(llvm::SmallPtrSetImplBase **)(a1 + 32), v13);
      *a3 = v15 + 40;
      sub_1CC025000((uint64_t *)(v11 + 680), &v18)[1] = a5;
      if (*a2 == v12 + 40) {
        *a2 = *a3;
      }
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 8) = 0;
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v17 = *(unsigned int *)(v16 + 8);
    if (v17) {
      bzero(*(void **)v16, 8 * v17);
    }
    *a4 = 0;
  }
}

uint64_t sub_1CD641FD8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if (*(unsigned char *)(a1 + 16) == 61)
  {
    if ((v1 & 0x40000000) != 0) {
      uint64_t v2 = *(void *)(a1 - 8);
    }
    else {
      uint64_t v2 = a1 - 32 * (v1 & 0x7FFFFFF);
    }
    unsigned int v3 = (llvm::Value **)(v2 + 32);
  }
  else if ((v1 & 0x40000000) != 0)
  {
    unsigned int v3 = *(llvm::Value ***)(a1 - 8);
  }
  else
  {
    unsigned int v3 = (llvm::Value **)(a1 - 32 * (v1 & 0x7FFFFFF));
  }
  uint64_t v4 = llvm::Value::stripPointerCasts(*v3);
  if (*((unsigned char *)v4 + 16) != 62) {
    return 0;
  }
  int v5 = *((_DWORD *)v4 + 5);
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = (char *)*((void *)v4 - 1);
  }
  else {
    uint64_t v6 = (char *)v4 - 32 * (v5 & 0x7FFFFFF);
  }
  uint64_t v8 = *((void *)v6 + 4);
  uint64_t v9 = (unsigned int *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u) {
    uint64_t v9 = *(unsigned int **)v9;
  }
  return *v9;
}

uint64_t sub_1CD64207C(uint64_t a1)
{
  uint64_t v2 = *(llvm::ConstantInt ***)(a1 + 312);
  if (v2)
  {
    unsigned int v3 = llvm::ConstantInt::get(*v2, *(unsigned int *)(a1 + 332), 0);
    sub_1CC808490((uint64_t)v2, 1u, (uint64_t)v3);
  }
  sub_1CD64214C(a1);
  sub_1CD554148(a1 + 1016);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1016), 8);
  uint64_t v4 = *(void **)(a1 + 736);
  if (v4 != *(void **)(a1 + 728)) {
    free(v4);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 704), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 680), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 656), 8);
  int v5 = *(void **)(a1 + 504);
  if (v5 != *(void **)(a1 + 496)) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 344);
  if (v6 != *(void **)(a1 + 336)) {
    free(v6);
  }
  unint64_t v7 = *(void **)(a1 + 16);
  if (v7 != *(void **)(a1 + 8)) {
    free(v7);
  }
  return a1;
}

void sub_1CD64214C(uint64_t a1)
{
  v29[15] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 516) != *(_DWORD *)(a1 + 520))
  {
    uint64_t v2 = *(uint64_t ***)(*(void *)a1 + 40);
    unsigned int v3 = *v2;
    Declaratiouint64_t n = llvm::Intrinsic::getDeclaration(v2, 2622, 0, 0);
    uint64_t v5 = *(void *)(*(void *)a1 + 80);
    uint64_t v24 = *(void *)a1 + 72;
    if (v5 != v24)
    {
      uint64_t v6 = Declaration;
      do
      {
        if (v5) {
          uint64_t v7 = v5 - 24;
        }
        else {
          uint64_t v7 = 0;
        }
        v25[0] = v7;
        v28[0] = 0;
        int v8 = sub_1CD3C8538((uint64_t *)(a1 + 680), v25, v28);
        uint64_t v9 = v7;
        if (v8)
        {
          uint64_t v9 = v7;
          if (v28[0] != (void *)(*(void *)(a1 + 680) + 16 * *(unsigned int *)(a1 + 696))) {
            uint64_t v9 = *((void *)v28[0] + 1);
          }
        }
        uint64_t v10 = sub_1CB896AE8(a1 + 496, v9);
        uint64_t v11 = *(void *)(a1 + 504);
        uint64_t v12 = 512;
        if (v11 == *(void *)(a1 + 496)) {
          uint64_t v12 = 516;
        }
        if (v10 != (void *)(v11 + 8 * *(unsigned int *)(a1 + v12)))
        {
          uint64_t v13 = v7 + 40;
          for (uint64_t i = *(void *)(v7 + 48); i != v13; uint64_t i = *(void *)(i + 8))
          {
            if (i) {
              uint64_t v15 = i - 24;
            }
            else {
              uint64_t v15 = 0;
            }
            uint64_t v16 = sub_1CB896AE8(a1 + 8, v15);
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17 == *(void *)(a1 + 8)) {
              uint64_t v18 = 28;
            }
            else {
              uint64_t v18 = 24;
            }
            if (v16 != (void *)(v17 + 8 * *(unsigned int *)(a1 + v18)) && *(unsigned char *)(v15 + 16) == 60)
            {
              sub_1CC243A10((uint64_t)v28, (uint64_t **)v15, 0, 0, 0);
              if (v6) {
                uint64_t v20 = *(uint64_t ***)(v6 + 24);
              }
              else {
                uint64_t v20 = 0;
              }
              Int16Ty = (llvm::ConstantInt *)llvm::Type::getInt16Ty((llvm::Type *)v3, v19);
              v27[0] = (uint64_t)llvm::ConstantInt::get(Int16Ty, 2uLL, 0);
              int v23 = (llvm::ConstantInt *)llvm::Type::getInt16Ty((llvm::Type *)v3, v22);
              v27[1] = (uint64_t)llvm::ConstantInt::get(v23, 1uLL, 0);
              __int16 v26 = 257;
              sub_1CB845BAC((uint64_t *)v28, v20, (uint64_t **)v6, v27, 2, (uint64_t)v25, 0);
              if (v28[0] != v29) {
                free(v28[0]);
              }
            }
          }
        }
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 != v24);
    }
  }
}

void sub_1CD6423A4(_WORD *a1, __n128 *a2, char **a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBCDBF00, 0, 0);
  byte_1EBCDBF80 = 0;
  qword_1EBCDBF88 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCDBF90 = 0;
  qword_1EBCDBF00 = (uint64_t)&unk_1F26440A0;
  qword_1EBCDBF98 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCDBFA0 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCDBFB8 = (uint64_t)&qword_1EBCDBFA0;
  sub_1CD642494(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDBF00);
}

__n128 sub_1CD642494(_WORD *a1, __n128 *a2, char **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCDBF00, "scalar-opt-print-divergence-analysis", 0x24uLL);
  word_1EBCDBF0A = (32 * (*a1 & 3)) | word_1EBCDBF0A & 0xFF9F;
  __n128 result = *a2;
  xmmword_1EBCDBF20 = (__int128)*a2;
  uint64_t v7 = *a3;
  byte_1EBCDBF80 = **a3;
  byte_1EBCDBF91 = 1;
  byte_1EBCDBF90 = *v7;
  return result;
}

void sub_1CD64251C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC088, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC808714;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDC088, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t sub_1CD642590@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = sub_1CD50F704((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD50F7A0(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

void sub_1CD642618(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC098, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC80E7F8;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDC098, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD64268C()
{
}

void sub_1CD6426C8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC168, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC80EA8C;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDC168, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD64273C()
{
}

uint64_t sub_1CD642788(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = (_DWORD *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 8);
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 >= v9)
      {
        if (v9) {
          memmove(*(void **)a1, v4, 6 * v9);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v9)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10) {
          memmove(*(void **)a1, v4, 6 * v10);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *v7;
        if (v10 != v11) {
          memcpy((void *)(*(void *)a1 + 6 * v10), (const void *)(*(void *)a2 + 6 * v10), *(void *)a2 + 6 * v11 - (*(void *)a2 + 6 * v10));
        }
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    _DWORD *v7 = 0;
  }
  return a1;
}

void sub_1CD6428B0()
{
}

uint64_t sub_1CD642920(uint64_t a1, unsigned int a2)
{
  uint64_t v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD642A9C(a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  char v8 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v10 = *(void *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v8++ = v10;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD642A9C(a1, v14, v8);
}

uint64_t sub_1CD642A9C(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    char v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    char v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CC814E18((uint64_t)v5, a2, &v10);
      void *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1CD642B5C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC178, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC8159D4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDC178, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD642BD0()
{
}

void sub_1CD642C0C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC188, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC816444;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDC188, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD642C80()
{
}

uint64_t sub_1CD642CBC(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v11 = 0;
  uint64_t v8 = llvm::cl::parser<unsigned long long>::parse(a1 + 160, (void *)a1, a3, a4, a5, a6, &v11);
  if (v8) {
    return v8;
  }
  *(void *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v11);
    return v8;
  }
  sub_1CB920400();
  return sub_1CD642D50();
}

uint64_t sub_1CD642D50()
{
  return 2;
}

uint64_t sub_1CD642D58(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *sub_1CD642D64(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 160), a1, a2);
}

void sub_1CD642D74(uint64_t a1, int a2, int a3)
{
  if (a3)
  {
    unint64_t v3 = *(void *)(a1 + 128);
LABEL_3:
    uint64_t v4 = *(void *)(a1 + 144);
    char v6 = *(unsigned char *)(a1 + 152);
    v5[0] = &unk_1F261F710;
    v5[1] = v4;
    llvm::cl::parser<unsigned long long>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, v3, (uint64_t)v5, a2);
    return;
  }
  if (*(unsigned char *)(a1 + 152))
  {
    unint64_t v3 = *(void *)(a1 + 128);
    if (*(void *)(a1 + 144) != v3) {
      goto LABEL_3;
    }
  }
}

BOOL sub_1CD642DF8(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 16) && *(unsigned char *)(a1 + 16) && *(void *)(a1 + 8) != *(void *)(a2 + 8);
}

void sub_1CD642E24(int **a1, _WORD *a2, long long *a3)
{
  uint64_t v6 = sub_1CB883A14((uint64_t)&qword_1EBCDC190, 0, 0);
  xmmword_1EBCDC210 = 0u;
  *(_OWORD *)&qword_1EBCDC220 = 0u;
  *((void *)&xmmword_1EBCDC210 + 1) = &unk_1F261F710;
  qword_1EBCDC190 = (uint64_t)&unk_1F261F6A8;
  qword_1EBCDC230 = (uint64_t)&unk_1F2643E10;
  qword_1EBCDC238 = (uint64_t)&unk_1F261F7D0;
  qword_1EBCDC250 = (uint64_t)&qword_1EBCDC238;
  llvm::cl::Option::setArgStr(v6, "memmove-expansion-threshold", 0x1BuLL);
  *(void *)&xmmword_1EBCDC210 = **a1;
  byte_1EBCDC228 = 1;
  qword_1EBCDC220 = xmmword_1EBCDC210;
  word_1EBCDC19A = (32 * (*a2 & 3)) | word_1EBCDC19A & 0xFF9F;
  xmmword_1EBCDC1B0 = *a3;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDC190);
}

void sub_1CD642F54()
{
}

void *sub_1CD642F68()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F261F7D0;
  return result;
}

void sub_1CD642FA0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F261F7D0;
}

uint64_t sub_1CD642FCC(uint64_t a1, char *a2, int **a3, _WORD *a4, _OWORD *a5)
{
  uint64_t v10 = sub_1CB883A14(a1, 0, 0);
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(void *)(v10 + 136) = &unk_1F261F710;
  *(void *)uint64_t v10 = &unk_1F261F6A8;
  *(void *)(v10 + 160) = &unk_1F2643E10;
  *(void *)(v10 + 168) = &unk_1F261F7D0;
  *(void *)(v10 + 192) = v10 + 168;
  size_t v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  uint64_t v12 = **a3;
  *(void *)(a1 + 128) = v12;
  *(unsigned char *)(a1 + 152) = 1;
  *(void *)(a1 + 144) = v12;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void sub_1CD6430FC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC3F0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC81A78C;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDC3F0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD643170()
{
}

void *sub_1CD6431AC(void *a1, unsigned int a2)
{
  if (a2 <= 8)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v3 = a2;
    uint64_t result = operator new(16 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    int v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = &result[2 * v3];
      goto LABEL_6;
    }
  }
  uint64_t result = a1 + 1;
  uint64_t v6 = a1 + 17;
  do
  {
LABEL_6:
    *uint64_t result = -4096;
    result += 2;
  }
  while (result != v6);
  return result;
}

void *sub_1CD643230(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  char v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C) {
    int v4 = 64;
  }
  else {
    int v4 = 1 << (33 - v3);
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 9)
  {
    uint64_t v6 = result + 1;
    *uint64_t result = 1;
    uint64_t v7 = result + 17;
    do
    {
LABEL_10:
      *uint64_t v6 = -4096;
      v6 += 2;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == *((_DWORD *)result + 4))
    {
      *uint64_t result = 0;
      if (!v5) {
        return result;
      }
      uint64_t v6 = (void *)result[1];
      uint64_t v7 = &v6[2 * v5];
      goto LABEL_10;
    }
    MEMORY[0x1D25D9CD0](result[1], 8);
  }

  return sub_1CD6431AC(v1, v5);
}

void sub_1CD64330C()
{
}

void *sub_1CD643320(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261F8B8;
  result[1] = v3;
  return result;
}

void sub_1CD64336C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC400, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC82487C;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDC400, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

BOOL sub_1CD6433E0(uint64_t a1, uint64_t *a2)
{
  sub_1CD64376C(a1, a2, (uint64_t)v8);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

void *sub_1CD643470(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v3 = *a1 >> 1;
  if (*a1) {
    unsigned int v4 = 4;
  }
  else {
    unsigned int v4 = a1[4];
  }
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v7 = (uint64_t)a1;
  sub_1CD643534((uint64_t)a1, v4);
  uint64_t v8 = 0;
  sub_1CC84A190(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CD643534(uint64_t a1, unsigned int a2)
{
  uint64_t v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD6436B0(a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v10 = *(void *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v8++ = v10;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD6436B0(a1, v14, v8);
}

uint64_t sub_1CD6436B0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    unsigned __int8 v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    unsigned __int8 v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CC84A190((uint64_t)v5, v10, &v11);
      uint64_t *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void *sub_1CD64376C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = 0;
  uint64_t result = (void *)sub_1CD643828(a1, a2, &v14);
  uint64_t v7 = v14;
  if (result)
  {
    uint64_t v12 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v13 = 4;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(unsigned int *)(a1 + 16);
    }
    char v11 = 0;
    uint64_t v10 = v12 + 8 * v13;
  }
  else
  {
    uint64_t result = sub_1CD6438D8((_DWORD *)a1, (uint64_t)a2, a2, v14);
    uint64_t v7 = result;
    *uint64_t result = *a2;
    uint64_t v8 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v9 = 4;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v10 = v8 + 8 * v9;
    char v11 = 1;
  }
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1CD643828(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_10;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_10;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_10:
  *a3 = v7;
  return result;
}

void *sub_1CD6438D8(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v4 = *a1 >> 1;
  if (*a1) {
    unsigned int v5 = 4;
  }
  else {
    unsigned int v5 = a1[4];
  }
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v8 = (uint64_t)a1;
  sub_1CD643998((uint64_t)a1, v5);
  uint64_t v9 = 0;
  sub_1CD643828(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CD643998(uint64_t a1, unsigned int a2)
{
  uint64_t v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(void **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD643B14(a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v10 = *(void *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v8++ = v10;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD643B14(a1, v14, v8);
}

uint64_t sub_1CD643B14(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CD643828((uint64_t)v5, a2, &v10);
      void *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CD643BDC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_15:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CD643C84(uint64_t a1)
{
  for (uint64_t i = 0; i != 192; i += 64)
  {
    uint64_t v3 = a1 + i;
    *(_DWORD *)(a1 + i + 16) = 128;
    *(void *)uint64_t v3 = operator new(0x2000uLL, (std::align_val_t)8uLL);
    sub_1CC7AF4A4((void *)(a1 + i));
    *(unsigned char *)(v3 + 24) = 0;
    *(unsigned char *)(v3 + 48) = 0;
  }
  return a1;
}

uint64_t sub_1CD643CEC(uint64_t a1)
{
  for (uint64_t i = 0; i != -192; i -= 64)
  {
    sub_1CC009354(a1 + i + 152);
    sub_1CC4D021C((void *)(a1 + i + 128));
    MEMORY[0x1D25D9CD0](*(void *)(a1 + i + 128), 8);
  }
  return a1;
}

void *sub_1CD643D4C(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CC84E718((uint64_t)a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CC84E7C0(a1, (uint64_t)a2, a2, v7);
    *int v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void sub_1CD643DAC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC950, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC84EE84;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDC950, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD643E20()
{
}

void sub_1CD643E5C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC960, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC84F574;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDC960, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD643ED0()
{
}

void sub_1CD643F0C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC968, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC852168;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDC968, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

int *sub_1CD643F80(int *a1)
{
  int v2 = *a1;
  if (*a1 > 1)
  {
    if (v2)
    {
      uint64_t result = a1 + 2;
      uint64_t v7 = a1 + 66;
LABEL_10:
      while ((*(void *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 4;
        if (result == v7) {
          return v7;
        }
      }
    }
    else
    {
      uint64_t result = (int *)*((void *)a1 + 1);
      uint64_t v6 = a1[4];
      if (v6)
      {
        uint64_t v7 = &result[4 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      uint64_t v3 = a1 + 2;
      uint64_t v4 = 16;
    }
    else
    {
      uint64_t v3 = (int *)*((void *)a1 + 1);
      uint64_t v4 = a1[4];
    }
    return &v3[4 * v4];
  }
  return result;
}

uint64_t sub_1CD643FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v7 = 0;
  if (sub_1CD64419C(a1, &v6, &v7)) {
    return v7;
  }
  if (*(unsigned char *)a1)
  {
    uint64_t v4 = a1 + 8;
    uint64_t v5 = 16;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

llvm::Instruction *sub_1CD64405C(uint64_t *a1, llvm::Value *a2, unsigned int a3)
{
  uint64_t v6 = (llvm::IndirectBrInst *)llvm::User::operator new((llvm::User *)0x40);
  llvm::IndirectBrInst::IndirectBrInst(v6, a2, a3, 0);
  __int16 v9 = 257;
  return sub_1CD509770(a1, v6, (uint64_t)v8);
}

llvm::Instruction *sub_1CD6440C8(uint64_t *a1, llvm::Value *a2, llvm::BasicBlock *a3)
{
  uint64_t v6 = (llvm::SwitchInst *)llvm::User::operator new((llvm::User *)0x40);
  llvm::SwitchInst::SwitchInst(v6, a2, a3, 0xAu, 0);
  __int16 v9 = 257;
  return sub_1CB844E0C(a1, v6, (uint64_t)v8);
}

void *sub_1CD644138(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD64419C((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD64424C(a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CD64419C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    int v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        int v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CD64424C(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 16;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD64430C((uint64_t)a1, v7);
  __int16 v9 = 0;
  sub_1CD64419C((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CD64430C(uint64_t a1, unsigned int a2)
{
  v14[32] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v6 = *(void **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD6444A4(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  __int16 v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *__int16 v9 = v10;
      v9[1] = *(void *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD6444A4(a1, v14, v9);
}

uint64_t sub_1CD6444A4(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    __int16 v9 = (void *)(result + 264);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    __int16 v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CD64419C((uint64_t)v5, a2, &v11);
      uint64_t v10 = v11;
      void *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void *sub_1CD644574(_DWORD *a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD6445E8((uint64_t)a1, *a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CD64469C(a1, a2, v7);
    *int v5 = *a2;
    v5[1] = v5 + 3;
    void v5[2] = 0x800000000;
  }
  return v5;
}

uint64_t sub_1CD6445E8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 88 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 88 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CD64469C(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 8;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD64475C((uint64_t)a1, v6);
  uint64_t v8 = 0;
  sub_1CD6445E8((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

void sub_1CD64475C(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    unsigned int v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 8)
    {
      *(void *)(a1 + 8) = operator new(88 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD644954(a1, v7, v7 + 88 * v8);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v9 = 0;
  uint64_t v10 = v14;
  do
  {
    uint64_t v11 = a1 + v9;
    uint64_t v12 = *(void *)(a1 + v9 + 8);
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      void *v10 = v12;
      v10[1] = v10 + 3;
      unsigned int v13 = (const void **)(v11 + 16);
      uint64_t v10[2] = 0x800000000;
      if (*(_DWORD *)(v11 + 24)) {
        sub_1CC79F218((uint64_t)(v10 + 1), v13);
      }
      v10 += 11;
      if ((const void *)(a1 + v9 + 32) != *v13) {
        free((void *)*v13);
      }
    }
    v9 += 88;
  }
  while (v9 != 704);
  if (v2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(88 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  sub_1CD644954(a1, (uint64_t)v14, (uint64_t)v10);
}

void sub_1CD644954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    unsigned int v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 712);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (!v7) {
      goto LABEL_6;
    }
    unsigned int v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[11 * v7];
  }
  do
  {
    *unsigned int v8 = -4096;
    v8 += 11;
  }
  while (v8 != v9);
LABEL_6:
  if (a2 != a3)
  {
    do
    {
      uint64_t v10 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v14 = 0;
        sub_1CD6445E8(a1, v10, &v14);
        uint64_t v11 = v14;
        *uint64_t v14 = *(void *)v4;
        void v11[2] = 0x800000000;
        v11[1] = v11 + 3;
        uint64_t v12 = (uint64_t)(v11 + 1);
        if (*(_DWORD *)(v4 + 16)) {
          sub_1CC79F218(v12, (const void **)(v4 + 8));
        }
        *(_DWORD *)a1 += 2;
        unsigned int v13 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v13) {
          free(v13);
        }
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CD644A60(uint64_t a1)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  }
  return a1;
}

void sub_1CD644A9C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = a1 + 8;
    unsigned int v1 = 8;
  }
  else
  {
    unsigned int v1 = *(_DWORD *)(a1 + 16);
    if (!v1) {
      return;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v3 = 88 * v1;
  uint64_t v4 = (void *)(v2 + 24);
  do
  {
    if ((*(v4 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unint64_t v5 = (void *)*(v4 - 2);
      if (v4 != v5) {
        free(v5);
      }
    }
    v4 += 11;
    v3 -= 88;
  }
  while (v3);
}

uint64_t sub_1CD644B18(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v12 = v2;
  uint64_t v13 = v3;
  uint64_t v10 = a2;
  v11[0] = 0;
  uint64_t v7 = sub_1CD6456B0(a1 + 152, &v10, v11);
  uint64_t v8 = v7;
  if ((v9 & 1) == 0) {
    return *(unsigned char *)(v7 + 8) != 0;
  }
  uint64_t result = sub_1CC856B74(a1, a2);
  *(unsigned char *)(v8 + 8) = result;
  return result;
}

BOOL sub_1CD644BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2;
  v12[0] = 1;
  uint64_t v4 = sub_1CD6456B0(a1, &v11, v12);
  uint64_t v5 = v4;
  if ((v6 & 1) == 0) {
    return *(unsigned char *)(v4 + 8) != 0;
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = -8 * v8;
  while (1)
  {
    uint64_t v10 = *(void *)(a2 + v9);
    if (!v10) {
      goto LABEL_11;
    }
    if ((*(unsigned char *)v10 - 3) < 0xFEu) {
      break;
    }
    if ((sub_1CC856E34(a1, *(unsigned char *)v10, *(void *)(v10 + 128)) & 1) == 0) {
      goto LABEL_13;
    }
LABEL_11:
    v9 += 8;
    if (!v9) {
      return 1;
    }
  }
  if (!sub_1CB8F0DA8(*(unsigned char **)(a2 + v9)) || (sub_1CD644BA0(a1, v10) & 1) != 0) {
    goto LABEL_11;
  }
LABEL_13:
  BOOL result = 0;
  *(unsigned char *)(v5 + 8) = 0;
  return result;
}

void sub_1CD644C80(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC978, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC856FC8;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDC978, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

uint64_t sub_1CD644CF4(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v9 = 0;
      BOOL result = sub_1CC020A5C((uint64_t *)v5, a2, &v9);
      *uint64_t v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

void *sub_1CD644D9C(void *a1)
{
  *a1 = &unk_1F261FD40;
  MEMORY[0x1D25D9CD0](a1[5], 8);
  return a1;
}

void sub_1CD644DE8(void *a1)
{
  *a1 = &unk_1F261FD40;
  MEMORY[0x1D25D9CD0](a1[5], 8);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CD644E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_1F261FD40;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a2 + 17) = *(unsigned char *)(a1 + 17);
  *(unsigned char *)(a2 + 18) = *(unsigned char *)(a1 + 18);
  *(unsigned char *)(a2 + 19) = *(unsigned char *)(a1 + 19);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 40) = 0;
  BOOL result = sub_1CBFCBCC4(a2 + 40, a1 + 40);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a1 + 64);
  return result;
}

void sub_1CD644EE8()
{
}

void *sub_1CD644EF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD553C1C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD55B568(a1, a2, v7);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    void v5[2] = 0;
  }
  return v5;
}

void *sub_1CD644F64(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = 0;
  BOOL result = (void *)sub_1CC874F80(a2, a3, &v14);
  uint64_t v7 = v14;
  if (result)
  {
    uint64_t v12 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v13 = 4;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v13 = *(unsigned int *)(a2 + 16);
    }
    char v11 = 0;
    uint64_t v10 = v12 + 8 * v13;
  }
  else
  {
    BOOL result = sub_1CC875030(a2, (uint64_t)a3, a3, v14);
    uint64_t v7 = result;
    *BOOL result = *a3;
    uint64_t v8 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v9 = 4;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a2 + 16);
    }
    uint64_t v10 = v8 + 8 * v9;
    char v11 = 1;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = v11;
  return result;
}

void sub_1CD645028(_DWORD *a1)
{
  int v2 = a1[2];
  sub_1CC87ECB0((uint64_t)a1);
  if (v2)
  {
    int v3 = 1 << (33 - __clz(v2 - 1));
    if (v3 <= 64) {
      unsigned int v4 = 64;
    }
    else {
      unsigned int v4 = v3;
    }
    if (v4 == a1[4])
    {
      *((void *)a1 + 1) = 0;
      uint64_t v5 = 32 * v4;
      uint64_t v6 = *(void **)a1;
      do
      {
        *uint64_t v6 = -4096;
        v6 += 4;
        v5 -= 32;
      }
      while (v5);
      return;
    }
  }
  else
  {
    if (!a1[4])
    {
      *((void *)a1 + 1) = 0;
      return;
    }
    unsigned int v4 = 0;
  }
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);

  sub_1CBC04C8C(a1, v4);
}

uint64_t sub_1CD6450E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  unsigned int v4 = (void *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0) {
    unsigned int v4 = (void *)*v4;
  }
  uint64_t v5 = llvm::MetadataAsValue::get((uint64_t)v4, (unsigned __int8 *)a2);

  return LLVMSetArgOperand_0(a1, 1u, v5);
}

void *sub_1CD645138(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD46E5FC((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD64519C(a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CD64519C(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD64525C((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CD46E5FC((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CD64525C(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v6 = *(void **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD6453E8(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *uint64_t v9 = v10;
      v9[1] = *(void *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD6453E8(a1, v14, v9);
}

uint64_t sub_1CD6453E8(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)BOOL result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      BOOL result = sub_1CD46E5FC((uint64_t)v5, a2, &v11);
      uint64_t v10 = v11;
      void *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1CD6454B8(long long *a1, int **a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)qword_1EBCDCC90, 0, 0);
  dword_1EBCDCD10 = 0;
  qword_1EBCDCD18 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCDCD20 = 0;
  qword_1EBCDCC90[0] = (uint64_t)&unk_1F2643F00;
  qword_1EBCDCD28 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCDCD30 = (uint64_t)&unk_1F25EA168;
  qword_1EBCDCD48 = (uint64_t)&qword_1EBCDCD30;
  llvm::cl::Option::setArgStr(v4, "cprog-max-frontier", 0x12uLL);
  xmmword_1EBCDCCB0 = *a1;
  int v5 = *a2;
  dword_1EBCDCD10 = **a2;
  byte_1EBCDCD24 = 1;
  dword_1EBCDCD20 = *v5;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCDCC90);
}

void sub_1CD6455C8(long long *a1)
{
  uint64_t v2 = sub_1CB883A14((uint64_t)qword_1EBCDCD50, 0, 0);
  dword_1EBCDCDD0 = 0;
  qword_1EBCDCDD8 = (uint64_t)&unk_1F2643C00;
  unk_1EBCDCDE0 = 0;
  qword_1EBCDCD50[0] = (uint64_t)&unk_1F2609740;
  qword_1EBCDCDE8 = (uint64_t)&unk_1F2643CF0;
  qword_1EBCDCDF0 = (uint64_t)&unk_1F26097A8;
  qword_1EBCDCE08 = (uint64_t)&qword_1EBCDCDF0;
  llvm::cl::Option::setArgStr(v2, "cprog-can-read-from-uniforms", 0x1CuLL);
  xmmword_1EBCDCD70 = *a1;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCDCD50);
}

uint64_t sub_1CD6456B0(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v8 = *a2;
  int v9 = 0;
  sub_1CD645794((uint64_t)&v10, a1, &v8, &v9);
  int v6 = (void *)(a1 + 72);
  if (!v11) {
    return *v6 + 16 * *(unsigned int *)(v10 + 8);
  }
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a1 + 80);
  sub_1CD645758((uint64_t)v6, a2, a3);
  return *(void *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 80) - 16;
}

uint64_t sub_1CD645758(uint64_t result, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    return sub_1CD645B78(result, *a2, *a3);
  }
  uint64_t v4 = *(void *)result + 16 * v3;
  *(void *)uint64_t v4 = *a2;
  *(unsigned char *)(v4 + 8) = *a3;
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

uint64_t sub_1CD645794(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v16 = 0;
  uint64_t result = sub_1CD4C64C4(a2, *a3, &v16);
  int v9 = v16;
  if (result)
  {
    uint64_t v10 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v11 = 4;
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = *(unsigned int *)(a2 + 16);
    }
    char v12 = 0;
    uint64_t v13 = v10 + 16 * v11;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD645860((_DWORD *)a2, a3, v16);
    int v9 = (void *)result;
    *(void *)uint64_t result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    uint64_t v14 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v15 = 4;
    }
    else
    {
      uint64_t v14 = *(void *)(a2 + 8);
      uint64_t v15 = *(unsigned int *)(a2 + 16);
    }
    uint64_t v13 = v14 + 16 * v15;
    char v12 = 1;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v13;
  *(unsigned char *)(a1 + 16) = v12;
  return result;
}

void *sub_1CD645860(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD645920((uint64_t)a1, v6);
  uint64_t v8 = 0;
  sub_1CD4C64C4((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CD645920(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD645AAC(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  int v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)int v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD645AAC(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1CD645AAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    int v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    int v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      char v12 = 0;
      uint64_t result = sub_1CD4C64C4((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      void *v12 = *(void *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1CD645B78(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v4 = (void *)(*(void *)a1 + 16 * v3);
  *unint64_t v4 = a2;
  v4[1] = a3;
  LODWORD(v4) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v4;
  return *(void *)a1 + 16 * v4 - 16;
}

void sub_1CD645BF8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD058, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC87F344;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDD058, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD645C6C()
{
}

void sub_1CD645CA8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD068, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC87FE80;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDD068, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD645D1C()
{
}

uint64_t sub_1CD645E10(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  char v12 = 0;
  uint64_t result = sub_1CD3C8538((uint64_t *)a2, a3, &v12);
  int v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD5783BC(a2, (uint64_t)a3, a3, v12);
    int v9 = (void *)result;
    *(void *)uint64_t result = *a3;
    *(unsigned char *)(result + 8) = *a4;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1CD645EAC(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1CC886A4C((_DWORD *)a1, a2);
  if (v4)
  {
    int v5 = *(void **)(a1 + 72);
    uint64_t v6 = *(unsigned int *)(a1 + 80);
    uint64_t v7 = &v5[v6];
    if (v6)
    {
      uint64_t v8 = 8 * v6;
      while (*v5 != *a2)
      {
        ++v5;
        v8 -= 8;
        if (!v8)
        {
          int v5 = v7;
          break;
        }
      }
    }
    if (v7 != v5 + 1)
    {
      memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
      LODWORD(v6) = *(_DWORD *)(a1 + 80);
    }
    *(_DWORD *)(a1 + 80) = v6 - 1;
  }
  return v4;
}

char *sub_1CD645F38(llvm::Type **a1, uint64_t a2, void *a3, uint64_t a4, const char **a5, llvm::BasicBlock *a6)
{
  char v12 = operator new(0xA0uLL);
  v12[21] = v12[21] & 0x38000000 | 2;
  *(void *)char v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = v12 + 16;
  *((void *)v12 + 4) = 0;
  *((void *)v12 + 5) = 0;
  *((void *)v12 + 6) = 0;
  *((void *)v12 + 7) = v12 + 16;
  uint64_t v13 = llvm::Instruction::Instruction((llvm::Instruction *)(v12 + 16), *a1, 65, (llvm::Use *)v12, 2, a6);
  *((void *)v12 + 16) = v12 + 36;
  *((void *)v12 + 17) = 0x400000000;
  llvm::InsertValueInst::init(v13, (uint64_t)a1, a2, a3, a4, a5);
  return (char *)(v12 + 16);
}

void *sub_1CD646000(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      unsigned int v3 = result + 1;
      uint64_t v4 = result + 5;
    }
    else
    {
      uint64_t v2 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41) {
        return sub_1CD4AC4E8(result);
      }
      if (!v2)
      {
        int v5 = 0;
LABEL_11:
        *(_DWORD *)uint64_t result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      unsigned int v3 = (void *)result[1];
      uint64_t v4 = &v3[v2];
    }
    do
      *v3++ = -4096;
    while (v3 != v4);
    int v5 = *(_DWORD *)result & 1;
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1CD646078(uint64_t a1, unsigned int *a2)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  }
  *(void *)a1 = 1;
  int64x2_t v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v4;
  *(int64x2_t *)(a1 + 24) = v4;
  sub_1CD4B57D0((unsigned int *)a1, a2);
  return a1;
}

void sub_1CD6460DC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD070, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC888024;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDD070, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD646150(long long *a1, char **a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)qword_1EBCDD0B8, 0, 0);
  byte_1EBCDD138 = 0;
  qword_1EBCDD140 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCDD148 = 0;
  qword_1EBCDD0B8[0] = (uint64_t)&unk_1F26440A0;
  qword_1EBCDD150 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCDD158 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCDD170 = (uint64_t)&qword_1EBCDD158;
  llvm::cl::Option::setArgStr(v4, "replace-buffer-with-const-list-candidates", 0x29uLL);
  xmmword_1EBCDD0D8 = *a1;
  int v5 = *a2;
  byte_1EBCDD138 = **a2;
  byte_1EBCDD149 = 1;
  byte_1EBCDD148 = *v5;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCDD0B8);
}

void sub_1CD646260(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD180, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC889BE4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDD180, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD6462D4()
{
}

void sub_1CD646328(int **a1, _WORD *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCDD188, 0, 0);
  dword_1EBCDD208 = 0;
  qword_1EBCDD210 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCDD218 = 0;
  qword_1EBCDD188 = (uint64_t)&unk_1F2643F00;
  qword_1EBCDD220 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCDD228 = (uint64_t)&unk_1F25EA168;
  qword_1EBCDD240 = (uint64_t)&qword_1EBCDD228;
  llvm::cl::Option::setArgStr(v4, "scalarize-cutoff", 0x10uLL);
  int v5 = *a1;
  dword_1EBCDD208 = **a1;
  byte_1EBCDD21C = 1;
  dword_1EBCDD218 = *v5;
  word_1EBCDD192 = (32 * (*a2 & 3)) | word_1EBCDD192 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDD188);
}

llvm::cl::Option *sub_1CD646448(llvm::cl::Option *a1, char *a2, _DWORD **a3, _WORD *a4, __n128 *a5)
{
  uint64_t v10 = sub_1CB883A14((uint64_t)a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_1F25EA1B0;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_1F2643F00;
  *(void *)(v10 + 152) = &unk_1F2643DB0;
  *(void *)(v10 + 160) = &unk_1F25EA168;
  *(void *)(v10 + 184) = v10 + 160;
  sub_1CD57D2D4(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1CD646538(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD310, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC8909D0;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDD310, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD6465AC()
{
}

void sub_1CD6465E8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD320, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC890C44;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDD320, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD646660()
{
}

void *sub_1CD646674(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F26202F8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD6466C0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  if (sub_1CD646B40(a1, a2, &v6)) {
    return v6;
  }
  if (*(unsigned char *)a1)
  {
    uint64_t v4 = a1 + 8;
    uint64_t v5 = 8;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

void *sub_1CD646720(_DWORD *a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD646780((uint64_t)a1, *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD646824(a1, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CD646780(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CD646824(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v3 = *a1 >> 1;
  if (*a1) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = a1[4];
  }
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v7 = (uint64_t)a1;
  sub_1CD6468E8((uint64_t)a1, v4);
  uint64_t v8 = 0;
  sub_1CD646780(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CD6468E8(uint64_t a1, unsigned int a2)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD646A74(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  int v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *int v9 = v10;
      v9[1] = *(void *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD646A74(a1, v14, v9);
}

uint64_t sub_1CD646A74(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    int v9 = (void *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    int v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = sub_1CD646780((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      uint64_t *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CD646B40(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void sub_1CD646BEC()
{
}

void sub_1CD646C28(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD630, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC89BA84;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDD630, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD646C9C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD700, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC89D920;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCDD700, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD646D10()
{
}

void sub_1CD646D4C()
{
}

void sub_1CD646DC0(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1 + 72 * v2;
    uint64_t v5 = a2 + 24;
    uint64_t v6 = *a1 + 8;
    do
    {
      uint64_t v7 = v6 - 8;
      *(void *)(v5 - 24) = *(void *)(v6 - 8);
      *(void *)(v5 - 16) = v5;
      *(void *)(v5 - 8) = 0x600000000;
      if (*(_DWORD *)(v6 + 8)) {
        sub_1CC00811C(v5 - 16, v6);
      }
      v5 += 72;
      v6 += 72;
    }
    while (v7 + 72 != v4);
    uint64_t v8 = *((unsigned int *)a1 + 2);
    if (v8)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = 72 * v8;
      do
      {
        int v11 = *(void **)(v9 + v10 - 64);
        if ((void *)(v9 + v10 - 48) != v11) {
          free(v11);
        }
        v10 -= 72;
      }
      while (v10);
    }
  }
}

void sub_1CD646E8C(long long *a1, int **a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)qword_1EBCDD638, 0, 0);
  dword_1EBCDD6B8 = 0;
  qword_1EBCDD6C0 = (uint64_t)&unk_1F25EA1B0;
  *(void *)&dword_1EBCDD6C8 = 0;
  qword_1EBCDD638[0] = (uint64_t)&unk_1F2643F00;
  qword_1EBCDD6D0 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCDD6D8 = (uint64_t)&unk_1F25EA168;
  qword_1EBCDD6F0 = (uint64_t)&qword_1EBCDD6D8;
  llvm::cl::Option::setArgStr(v4, "trivial-call-promotion-max-nb-expanded-per-call", 0x2FuLL);
  xmmword_1EBCDD658 = *a1;
  dword_1EBCDD6B8 = **a2;
  byte_1EBCDD6CC = 1;
  dword_1EBCDD6C8 = dword_1EBCDD6B8;

  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCDD638);
}

void sub_1CD646F98(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD710, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC89E228;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDD710, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD64700C()
{
}

void sub_1CD647048(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD720, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC89E51C;
    v3[1] = &v1;
    unsigned int v2 = v3;
    std::__call_once(&qword_1EBCDD720, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CD6470BC()
{
}

void sub_1CD6470FC(llvm::ModulePass *a1)
{
  llvm::ModulePass::~ModulePass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD647134(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::FunctionGroupInfoWrapperPass::ID);

  llvm::AnalysisUsage::setPreservesCFG(this);
}

void sub_1CD64718C()
{
}

uint64_t sub_1CD6471C8(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDD718;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2620520;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD720, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC89E51C;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDD720, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::createAlwaysInlinerLegacyPass(llvm *this)
{
}

void llvm::createAnnotation2MetadataLegacyPass(llvm *this)
{
}

double llvm::Annotation2MetadataPass::run@<D0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  sub_1CC8A1430(a1);
  *(void *)(a2 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a2 = a2 + 32;
  *(void *)(a2 + 8) = a2 + 32;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 48) = a2 + 80;
  *(void *)(a2 + 56) = a2 + 80;
  *(void *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)&double result = 0x100000002;
  *(void *)(a2 + 16) = 0x100000002;
  return result;
}

void llvm::ArgumentPromotionPass::run()
{
}

void llvm::createArgumentPromotionPass(llvm *this)
{
}

void sub_1CD647728(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (*(void *)a1 + 8 * v5 == a2)
  {
    sub_1CC2FCB18(a1, a3, 0);
  }
  else
  {
    uint64_t v6 = (a2 - v4) >> 3;
    if (v5 + a3 > *(unsigned int *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v7 = (char *)(v4 + 8 * v6);
    uint64_t v8 = (char *)(v4 + 8 * v5);
    unint64_t v9 = (v8 - v7) >> 3;
    if (v9 < a3)
    {
      *(_DWORD *)(a1 + 8) = v5 + a3;
      if (v6 != v5)
      {
        memcpy((void *)(v4 + 8 * (v5 + a3) - 8 * v9), v7, v8 - v7);
        bzero(v7, v8 - v7);
      }
      if (v9 == a3) {
        return;
      }
      size_t v10 = 8 * a3 - (v8 - v7);
      int v11 = v8;
LABEL_9:
      bzero(v11, v10);
      return;
    }
    BOOL v12 = &v8[-8 * a3];
    sub_1CD4570C8(a1, v12, (char *)(v4 + 8 * v5));
    if (v12 != v7) {
      memmove(&v7[8 * a3], v7, &v8[-8 * a3] - v7);
    }
    if (a3)
    {
      size_t v10 = 8 * a3;
      int v11 = v7;
      goto LABEL_9;
    }
  }
}

uint64_t llvm::operator|(int a1, unsigned int a2)
{
  if (a1) {
    return a2;
  }
  else {
    return 0;
  }
}

_DWORD *llvm::operator|=(_DWORD *result, int a2)
{
  if (*result) {
    int v2 = a2;
  }
  else {
    int v2 = 0;
  }
  *double result = v2;
  return result;
}

BOOL llvm::AA::isNoSyncInst(llvm::AA *this, llvm::Attributor *a2, const llvm::Instruction *a3, const llvm::AbstractAttribute *a4)
{
  unsigned int v5 = *((unsigned __int8 *)a2 + 16) - 33;
  BOOL v6 = v5 > 0x33;
  uint64_t v7 = (1 << v5) & 0x8000000000041;
  if (!v6 && v7 != 0)
  {
    if ((sub_1CB8F8740((uint64_t)a2, 35) & 1) == 0
      && ((sub_1CB8F8740((uint64_t)a2, 6) & 1) != 0
       || (llvm::Instruction::mayReadFromMemory(a2) & 1) != 0
       || llvm::Instruction::mayWriteToMemory(a2))
      && !llvm::AANoSync::isNoSyncIntrinsic(a2, v12))
    {
      return *((unsigned char *)sub_1CC8B4D90((uint64_t)this, (uint64_t)a2, 0, (uint64_t)a3, 1, 0, 1) + 41) != 0;
    }
    return 1;
  }
  if ((llvm::Instruction::mayReadFromMemory(a2) & 1) == 0 && !llvm::Instruction::mayWriteToMemory(a2)) {
    return 1;
  }
  return (llvm::Instruction::isVolatile(a2) & 1) == 0 && !llvm::AANoSync::isNonRelaxedAtomic(a2, v13);
}

BOOL llvm::AA::isDynamicallyUnique(llvm::AA *this, llvm::Attributor *a2, int64_t a3, const llvm::Value *a4)
{
  if (!a4) {
    return 0;
  }
  unsigned int v4 = *(unsigned __int8 *)(a3 + 16);
  if (v4 != 21)
  {
    if (v4 < 0x1C)
    {
      if (!*(unsigned char *)(a3 + 16)) {
        a3 |= 2uLL;
      }
    }
    else
    {
      unsigned int v6 = v4 - 33;
      BOOL v7 = v6 > 0x33;
      uint64_t v8 = (1 << v6) & 0x8000000000041;
      if (!v7 && v8 != 0) {
        a3 |= 1uLL;
      }
    }
  }
  return *((unsigned char *)sub_1CC8B52C8((uint64_t)this, a3, 0, (uint64_t)a2, 1, 0, 1) + 41) != 0;
}

llvm::UndefValue *llvm::AA::getInitialValueForObj(uint64_t a1, llvm::UndefValue *this, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 16) == 59)
  {
LABEL_2:
    return llvm::UndefValue::get(this, this);
  }
  if (byte_1EBD04470) {
    int v7 = 59;
  }
  else {
    int v7 = 63;
  }
  sub_1CC095244(a1, v7, a3, v9);
  if (v9[24])
  {
    return llvm::getInitialValueOfAllocation(a1, a3, this);
  }
  else
  {
    if (*(unsigned char *)(a1 + 16) != 3 || (*(_DWORD *)(a1 + 32) & 0xFu) - 7 > 1) {
      return 0;
    }
    if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0) {
      goto LABEL_2;
    }
    double result = llvm::AA::getWithType(*(llvm::AA **)(a1 - 32), this, v8);
    if (result && *((unsigned __int8 *)result + 16) >= 0x15u) {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::AA::isAssumedReadOnly(llvm::AA *this, llvm::Attributor *a2, const llvm::IRPosition *a3, const llvm::AbstractAttribute *a4, BOOL *a5)
{
  return sub_1CC8AAAB0((uint64_t)this, (uint64_t *)a2, (uint64_t)a3, 0, a4);
}

unint64_t llvm::IRPosition::getAssociatedArgument(llvm::IRPosition *this)
{
  uint64_t v26[4] = *MEMORY[0x1E4F143B8];
  if (sub_1CD647DEC(this) == 6)
  {
    unint64_t v2 = *(void *)this & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)this & 3) == 0) {
      return *(void *)(v2 + 24);
    }
  }
  else
  {
    unsigned int v4 = sub_1CD64DE00(this, 0);
    if ((v4 & 0x80000000) != 0)
    {
      return 0;
    }
    else
    {
      unsigned int v5 = v4;
      uint64_t v24 = v26;
      uint64_t v25 = 0x400000000;
      int v6 = ~*(_DWORD *)this;
      unint64_t v7 = *(void *)this & 0xFFFFFFFFFFFFFFFCLL;
      if ((v6 & 3) == 0) {
        unint64_t v7 = *(void *)(v7 + 24);
      }
      llvm::AbstractCallSite::getCallbackUses((uint64_t ****)v7, (uint64_t)&v24);
      if (!v25) {
        goto LABEL_34;
      }
      int v8 = 0;
      unint64_t v2 = 0;
      unint64_t v9 = (const llvm::Use **)v24;
      size_t v10 = (const llvm::Use **)((char *)v24 + 8 * v25);
      do
      {
        llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v21, *v9);
        if (sub_1CD46F814(&v21))
        {
          unsigned int v19 = sub_1CD647E8C((uint64_t *)&v21);
          if (v19)
          {
            uint64_t v16 = 0;
            uint64_t v15 = 0;
            uint64_t v14 = v19;
            uint64_t v20 = v19;
            do
            {
              if (!v23
                && ((unsigned int v17 = *(unsigned __int8 *)(*((void *)v21 - 4) + 16), v17 >= 0x15)
                  ? (BOOL v18 = v17 == 24)
                  : (BOOL v18 = 1),
                    v18))
              {
                int v11 = v15;
              }
              else
              {
                int v11 = *((_DWORD *)v22 + v15 + 1);
              }
              if (v11 == v5)
              {
                if (v8)
                {
                  unint64_t v2 = 0;
                  int v8 = 1;
                  break;
                }
                BOOL v12 = sub_1CD46F814(&v21);
                unsigned int v13 = v12;
                if (*((_WORD *)v12 + 9)) {
                  llvm::Function::BuildLazyArguments(v12);
                }
                unint64_t v2 = *((void *)v13 + 11) + v16;
                int v8 = 1;
                uint64_t v14 = v20;
              }
              ++v15;
              v16 += 40;
            }
            while (v14 != v15);
          }
        }
        if (v22 != &v24) {
          free(v22);
        }
        ++v9;
      }
      while (v9 != v10);
      if (!v8 || !v2)
      {
LABEL_34:
        unint64_t v2 = *(void *)(v7 - 32);
        if (v2)
        {
          if (*(unsigned char *)(v2 + 16)
            || *(void *)(v2 + 24) != *(void *)(v7 + 72)
            || *(void *)(v2 + 96) <= (unint64_t)v5)
          {
            unint64_t v2 = 0;
          }
          else
          {
            if (*(_WORD *)(v2 + 18)) {
              llvm::Function::BuildLazyArguments(*(llvm::Function **)(v7 - 32));
            }
            unint64_t v2 = *(void *)(v2 + 88) + 40 * v5;
          }
        }
      }
      if (v24 != v26) {
        free(v24);
      }
    }
  }
  return v2;
}

uint64_t sub_1CD647DEC(void *a1)
{
  uint64_t v1 = *a1 & 3;
  if (v1 == 3) {
    return 7;
  }
  if (v1 == 2) {
    return 1;
  }
  unint64_t v3 = *a1 & 0xFFFFFFFFFFFFFFFCLL;
  if (!v3) {
    return 0;
  }
  unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 == 21) {
    return 6;
  }
  if (v4)
  {
    if (v4 < 0x1C) {
      return 1;
    }
    unsigned int v8 = v4 - 33;
    BOOL v9 = v8 > 0x33;
    uint64_t v10 = (1 << v8) & 0x8000000000041;
    if (v9 || v10 == 0) {
      return 1;
    }
    BOOL v5 = v1 == 1;
    unsigned int v6 = 5;
    unsigned int v7 = 3;
  }
  else
  {
    BOOL v5 = v1 == 1;
    unsigned int v6 = 4;
    unsigned int v7 = 2;
  }
  if (v5) {
    return v7;
  }
  else {
    return v6;
  }
}

unint64_t sub_1CD647E8C(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 4);
  if (v1) {
    return (v1 - 1);
  }
  unsigned int v4 = *(unsigned __int8 *)(*(void *)(*a1 - 32) + 16);
  if (v4 >= 0x15 && v4 != 24) {
    return (v1 - 1);
  }
  uint64_t v3 = *a1;
  return (sub_1CBF5BBBC(*a1) - (v3 + 32 * (unint64_t)-(*(_DWORD *)(v3 + 20) & 0x7FFFFFF))) >> 5;
}

uint64_t llvm::IRAttributeManifest::manifestAttrs(uint64_t a1, llvm::IRPosition *a2, uint64_t a3, int a4)
{
  unint64_t v7 = sub_1CD6482A0(a2);
  unsigned int v8 = sub_1CD647DEC(a2);
  unsigned int v9 = v8;
  uint64_t v37 = 0;
  if (v8 <= 7)
  {
    uint64_t v10 = 1;
    if (((1 << v8) & 0x54) != 0)
    {
      uint64_t v12 = *(void *)(v7 + 112);
    }
    else
    {
      if (((1 << v8) & 0xA8) == 0) {
        return v10;
      }
      unint64_t v11 = *(void *)a2 & 0xFFFFFFFFFFFFFFFCLL;
      if ((~*(_DWORD *)a2 & 3) == 0) {
        unint64_t v11 = *(void *)(v11 + 24);
      }
      uint64_t v12 = *(void *)(v11 + 64);
    }
    uint64_t v37 = v12;
  }
  unint64_t v13 = *(void *)a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)a2 & 3) == 0) {
    unint64_t v13 = *(void *)(v13 + 24);
  }
  uint64_t v14 = *(void *)(a3 + 8);
  uint64_t v10 = 1;
  if (v14)
  {
    int v36 = a4;
    unint64_t v35 = v7;
    uint64_t v15 = **(uint64_t ***)v13;
    uint64_t v16 = *(llvm::Attribute **)a3;
    uint64_t v17 = 8 * v14;
    int v18 = 1;
    while (1)
    {
      int v19 = -1;
      int v20 = 1 << sub_1CD647DEC(a2);
      if ((v20 & 0xC) != 0)
      {
        int v19 = 0;
      }
      else if ((v20 & 0x30) == 0)
      {
        int v19 = sub_1CD64DE00(a2, 0) + 1;
      }
      if (llvm::Attribute::isEnumAttribute(v16))
      {
        KindAsEnuuint64_t m = llvm::Attribute::getKindAsEnum(v16);
        if (v37)
        {
          if ((v19 + 1) < *(_DWORD *)(v37 + 8))
          {
            uint64_t v31 = *(void *)(v37 + 8 * (v19 + 1) + 40);
            if (v31)
            {
              if (((*(unsigned __int8 *)(v31 + KindAsEnum / 8 + 12) >> (KindAsEnum & 7)) & 1) != 0 && (v36 & 1) == 0)
              {
                uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(&v37, v19, KindAsEnum);
                if (!AttributeAtIndex
                  || *(unsigned char *)(AttributeAtIndex + 8) != 1
                  || !*(void *)v16
                  || *(void *)(AttributeAtIndex + 16) >= *(void *)(*(void *)v16 + 16))
                {
                  goto LABEL_34;
                }
              }
            }
          }
        }
      }
      else if (llvm::Attribute::isStringAttribute(v16))
      {
        KindAsuint64_t String = (void *)llvm::Attribute::getKindAsString(v16);
        size_t v24 = v23;
        if (llvm::AttributeList::hasAttributeAtIndex(&v37, v19, KindAsString, v23) && !v36)
        {
          uint64_t v25 = llvm::AttributeList::getAttributeAtIndex(&v37, v19, KindAsString, v24);
          if (!v25) {
            goto LABEL_34;
          }
          if (*(unsigned char *)(v25 + 8) != 1) {
            goto LABEL_34;
          }
          uint64_t v26 = *(void *)v16;
          if (!*(void *)v16 || *(void *)(v25 + 16) >= *(void *)(v26 + 16)) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
      }
      else
      {
        int v27 = llvm::Attribute::getKindAsEnum(v16);
        int v28 = v27;
        if (v37)
        {
          if ((v19 + 1) < *(_DWORD *)(v37 + 8))
          {
            uint64_t v33 = *(void *)(v37 + 8 * (v19 + 1) + 40);
            if (v33)
            {
              if (((*(unsigned __int8 *)(v33 + v27 / 8 + 12) >> (v27 & 7)) & 1) != 0 && (v36 & 1) == 0)
              {
                uint64_t v34 = llvm::AttributeList::getAttributeAtIndex(&v37, v19, v27);
                if (!v34
                  || *(unsigned char *)(v34 + 8) != 1
                  || !*(void *)v16
                  || *(void *)(v34 + 16) >= *(void *)(*(void *)v16 + 16))
                {
                  goto LABEL_34;
                }
              }
            }
          }
        }
        uint64_t v37 = llvm::AttributeList::removeAttributeAtIndex(&v37, v15, v19, v28);
      }
      uint64_t v26 = *(void *)v16;
LABEL_33:
      int v18 = 0;
      uint64_t v37 = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)&v37, (llvm::LLVMContext *)v15, v19, v26);
LABEL_34:
      uint64_t v16 = (llvm::Attribute *)((char *)v16 + 8);
      v17 -= 8;
      if (!v17)
      {
        if (v18 == 1) {
          return 1;
        }
        uint64_t v10 = 0;
        if (v9 <= 7)
        {
          if (((1 << v9) & 0x54) != 0)
          {
            uint64_t v10 = 0;
            *(void *)(v35 + 112) = v37;
          }
          else if (((1 << v9) & 0xA8) != 0)
          {
            unint64_t v30 = *(void *)a2 & 0xFFFFFFFFFFFFFFFCLL;
            if ((~*(_DWORD *)a2 & 3) == 0) {
              unint64_t v30 = *(void *)(v30 + 24);
            }
            uint64_t v10 = 0;
            *(void *)(v30 + 64) = v37;
          }
        }
        return v10;
      }
    }
  }
  return v10;
}

unint64_t sub_1CD6482A0(_DWORD *a1)
{
  int v1 = ~*a1;
  unint64_t result = *(void *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v1 & 3) == 0) {
    unint64_t result = *(void *)(result + 24);
  }
  unsigned int v3 = *(unsigned __int8 *)(result + 16);
  if (*(unsigned char *)(result + 16))
  {
    if (v3 == 21)
    {
      uint64_t v4 = result + 24;
    }
    else
    {
      if (v3 < 0x1C) {
        return 0;
      }
      uint64_t v4 = *(void *)(result + 40) + 56;
    }
    return *(void *)v4;
  }
  return result;
}

unint64_t sub_1CD6482F0(llvm::IRPosition *a1)
{
  int v2 = sub_1CD64DE00(a1, 0);
  uint64_t v3 = *(void *)a1 & 3;
  unint64_t v4 = *(void *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  if (v2 < 0)
  {
    if (v3 != 3) {
      return v4;
    }
    goto LABEL_4;
  }
  if (v3 != 3)
  {
    if (*(unsigned char *)(v4 + 16) == 21) {
      return v4;
    }
    goto LABEL_12;
  }
  if (*(unsigned char *)(*(void *)(v4 + 24) + 16) != 21)
  {
    unint64_t v4 = *(void *)(v4 + 24);
LABEL_12:
    uint64_t v5 = v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32 * sub_1CD64DE00(a1, 0);
    return *(void *)v5;
  }
LABEL_4:
  uint64_t v5 = v4 + 24;
  return *(void *)v5;
}

BOOL llvm::IRPosition::hasAttr(llvm::IRPosition *a1, unsigned int *a2, BOOL AttrsFromAssumes, char a4, uint64_t a5)
{
  _DWORD v24[4] = *MEMORY[0x1E4F143B8];
  v23[0] = v24;
  v23[1] = (void *)0x400000000;
  llvm::SubsumingPositionIterator::SubsumingPositionIterator((llvm::SubsumingPositionIterator *)&v20, a1);
  uint64_t v10 = v20;
  if (v21)
  {
    uint64_t v19 = a5;
    unint64_t v11 = (llvm::IRPosition *)((char *)v20 + 16 * v21);
    while (!AttrsFromAssumes)
    {
LABEL_7:
      int v14 = 2;
      if ((a4 & 1) == 0)
      {
        uint64_t v10 = (llvm::IRPosition *)((char *)v10 + 16);
        if (v10 != v11) {
          continue;
        }
      }
      goto LABEL_11;
    }
    uint64_t v12 = 4 * AttrsFromAssumes;
    unint64_t v13 = (int *)a2;
    while ((llvm::IRPosition::getAttrsFromIRAttr(v10, *v13, (uint64_t)v23) & 1) == 0)
    {
      ++v13;
      v12 -= 4;
      if (!v12) {
        goto LABEL_7;
      }
    }
    int v14 = 1;
LABEL_11:
    a5 = v19;
    uint64_t v10 = v20;
  }
  else
  {
    int v14 = 2;
  }
  if (v10 != (llvm::IRPosition *)&v22) {
    free(v10);
  }
  if (v14 == 2)
  {
    if (a5)
    {
      if (AttrsFromAssumes)
      {
        uint64_t v15 = 4 * AttrsFromAssumes - 4;
        do
        {
          unsigned int v16 = *a2++;
          AttrsFromAssumes = llvm::IRPosition::getAttrsFromAssumes(a1, v16, (uint64_t)v23, a5);
          if (AttrsFromAssumes) {
            break;
          }
          uint64_t v17 = v15;
          v15 -= 4;
        }
        while (v17);
      }
    }
    else
    {
      AttrsFromAssumes = 0;
    }
  }
  else
  {
    AttrsFromAssumes = 1;
  }
  if (v23[0] != v24) {
    free(v23[0]);
  }
  return AttrsFromAssumes;
}

uint64_t llvm::IRPosition::getAttrsFromIRAttr(llvm::IRPosition *a1, int a2, uint64_t a3)
{
  uint64_t result = sub_1CD647DEC(a1);
  if (result)
  {
    if (sub_1CD647DEC(a1) == 1) {
      return 0;
    }
    unint64_t v7 = *(void *)a1 & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)a1 & 3) == 0) {
      unint64_t v7 = *(void *)(v7 + 24);
    }
    unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 < 0x1C
      || ((unsigned int v9 = v8 - 33, v10 = v9 > 0x33, v11 = (1 << v9) & 0x8000000000041, !v10) ? (v12 = v11 == 0) : (v12 = 1),
          v12))
    {
      unint64_t v13 = (uint64_t *)(sub_1CD648A0C(a1) + 112);
    }
    else
    {
      unint64_t v13 = (uint64_t *)(v7 + 64);
    }
    uint64_t v14 = *v13;
    uint64_t v22 = *v13;
    int v15 = 1 << sub_1CD647DEC(a1);
    if ((v15 & 0xC) != 0)
    {
      unsigned int v16 = 1;
    }
    else
    {
      unsigned int v16 = 0;
      if ((v15 & 0x30) == 0) {
        unsigned int v16 = sub_1CD64DE00(a1, 0) + 2;
      }
    }
    if (v14
      && v16 < *(_DWORD *)(v14 + 8)
      && (uint64_t v17 = *(void *)(v14 + 8 * v16 + 40)) != 0
      && ((*(unsigned __int8 *)(v17 + a2 / 8 + 12) >> (a2 & 7)) & 1) != 0)
    {
      char v18 = sub_1CD647DEC(a1);
      int v19 = -1;
      if (((1 << v18) & 0xC) != 0)
      {
        int v19 = 0;
      }
      else if (((1 << v18) & 0x30) == 0)
      {
        int v19 = sub_1CD64DE00(a1, 0) + 1;
      }
      uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(&v22, v19, a2);
      unsigned int v21 = *(_DWORD *)(a3 + 8);
      if (v21 >= *(_DWORD *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v21) = AttributeAtIndex;
      ++*(_DWORD *)(a3 + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL llvm::IRPosition::getAttrsFromAssumes(llvm::IRPosition *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = (uint64_t ***)sub_1CD6482F0(a1);
  unsigned int v9 = (uint64_t *)(*(void *)(a4 + 88) + 368);
  unint64_t v30 = v8;
  LODWORD(v31) = a2;
  sub_1CD648AC4((uint64_t)&v35, v9, &v30);
  if (v36)
  {
    unint64_t v13 = **v8;
    int v14 = *(_DWORD *)(a3 + 8);
    uint64_t v15 = *(void *)(a4 + 88);
    uint64_t v16 = v15 + 136;
    unint64_t v17 = sub_1CC8AB830(a1);
    uint64_t v18 = sub_1CD4B25C4(v15 + 136, v17);
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    int v32 = 0;
    sub_1CBFCB9AC((uint64_t)&v30, v18);
    long long v19 = *(_OWORD *)(v18 + 24);
    long long v34 = *(_OWORD *)(v18 + 40);
    long long v33 = v19;
    sub_1CC8AB830(a1);
    v26[0] = 0;
    v26[1] = 0;
    int v27 = 0;
    sub_1CBFCB9AC((uint64_t)v26, v15 + 312);
    long long v20 = *(_OWORD *)(v15 + 352);
    long long v28 = *(_OWORD *)(v15 + 336);
    long long v29 = v20;
    uint64_t v11 = v35;
    uint64_t v21 = v35;
    if (v37)
    {
      uint64_t v22 = 24 * v37;
      uint64_t v21 = v35;
      while ((*(void *)v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v21 += 24;
        v22 -= 24;
        if (!v22) {
          goto LABEL_8;
        }
      }
    }
    uint64_t v23 = v35 + 24 * v37;
LABEL_10:
    if (v21 != v23)
    {
      if (sub_1CD648B2C(v16, *(void *)v21, (uint64_t *)&v30, v26))
      {
        unint64_t v24 = llvm::Attribute::get(v13, a2, *(void *)(v21 + 16));
        unint64_t v25 = *(unsigned int *)(a3 + 8);
        if (v25 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v25) = v24;
        ++*(_DWORD *)(a3 + 8);
      }
      while (1)
      {
        v21 += 24;
        if (v21 == v23) {
          break;
        }
        if ((*(void *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_10;
        }
      }
    }
LABEL_8:
    BOOL v10 = v14 != *(_DWORD *)(a3 + 8);
    MEMORY[0x1D25D9CD0](v26[0], 8);
    MEMORY[0x1D25D9CD0](v30, 8);
  }
  else
  {
    BOOL v10 = 0;
    uint64_t v11 = v35;
  }
  MEMORY[0x1D25D9CD0](v11, 8);
  return v10;
}

void llvm::IRPosition::getAttrs(llvm::IRPosition *a1, unsigned int *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  v22[8] = *MEMORY[0x1E4F143B8];
  llvm::SubsumingPositionIterator::SubsumingPositionIterator((llvm::SubsumingPositionIterator *)&v20, a1);
  BOOL v12 = (llvm::IRPosition *)v20;
  uint64_t v13 = 4 * a3;
  if (v21)
  {
    uint64_t v19 = a6;
    int v14 = (llvm::IRPosition *)((char *)v20 + 16 * v21);
    do
    {
      if (a3)
      {
        uint64_t v15 = 4 * a3;
        uint64_t v16 = (int *)a2;
        do
        {
          int v17 = *v16++;
          llvm::IRPosition::getAttrsFromIRAttr(v12, v17, a4);
          v15 -= 4;
        }
        while (v15);
      }
      if (a5) {
        break;
      }
      BOOL v12 = (llvm::IRPosition *)((char *)v12 + 16);
    }
    while (v12 != v14);
    a6 = v19;
    BOOL v12 = (llvm::IRPosition *)v20;
  }
  if (v12 != (llvm::IRPosition *)v22) {
    free(v12);
  }
  if (a6 && a3)
  {
    do
    {
      unsigned int v18 = *a2++;
      llvm::IRPosition::getAttrsFromAssumes(a1, v18, a4, a6);
      v13 -= 4;
    }
    while (v13);
  }
}

unint64_t sub_1CD648A0C(llvm::IRPosition *a1)
{
  unint64_t v1 = *(void *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)a1 & 3) == 0) {
    unint64_t v1 = *(void *)(v1 + 24);
  }
  unsigned int v2 = *(unsigned __int8 *)(v1 + 16);
  if (v2 < 0x1C
    || ((v3 = v2 - 33, v4 = v3 > 0x33, uint64_t v5 = (1 << v3) & 0x8000000000041, !v4) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    return sub_1CD6482A0(a1);
  }
  else
  {
    unint64_t AssociatedArgument = llvm::IRPosition::getAssociatedArgument(a1);
    if (AssociatedArgument)
    {
      return *(void *)(AssociatedArgument + 24);
    }
    else
    {
      unint64_t result = *(void *)(v1 - 32);
      if (!result || *(unsigned char *)(result + 16) || *(void *)(result + 24) != *(void *)(v1 + 72)) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_1CD648AC4(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6 = 0;
  unint64_t result = (void *)sub_1CD45B020(a2, a3, &v6);
  if (result)
  {
    uint64_t v5 = v6 + 16;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    return sub_1CC8B60AC(a1, v5);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t sub_1CD648B2C(uint64_t a1, unint64_t a2, uint64_t *a3, void *a4)
{
  if (sub_1CD64DE8C(a3, a2)) {
    return 1;
  }
  uint64_t v9 = a3[4];
  while (v9 != a4[4] || a3[5] != a4[5] || a3[6] != a4[6])
  {
    uint64_t v9 = llvm::MustBeExecutedIterator::advance((llvm::MustBeExecutedIterator *)a3, v7);
    a3[4] = v9;
    if (v9 == a2) {
      return 1;
    }
  }
  return 0;
}

llvm::UndefValue *llvm::Attributor::getAssumedConstant(llvm::Attributor *this, const llvm::IRPosition *a2, const llvm::AbstractAttribute *a3, BOOL *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  double v8 = sub_1CD648E24((uint64_t)&v25, (uint64_t *)this, (uint64_t *)a2);
  if (v26)
  {
    unint64_t v24 = a3;
    uint64_t v15 = *((void *)v25 + 3);
    if (!v15) {
      sub_1CB920400();
    }
    uint64_t v16 = (*(uint64_t (**)(uint64_t, const llvm::IRPosition *, const llvm::AbstractAttribute **, BOOL *, double))(*(void *)v15 + 48))(v15, a2, &v24, a4, v8);
    if (v17)
    {
      if (v16)
      {
        if (*(unsigned __int8 *)(v16 + 16) >= 0x15u) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = v16;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    sub_1CD650EAC(&v25);
  }
  else
  {
    sub_1CD650EAC(&v25);
    uint64_t v9 = sub_1CC8AB8F0((uint64_t)this, *(void *)a2, *((void *)a2 + 1), (uint64_t)a3, 2, 0, 1);
    BOOL v10 = (unsigned __int8 *)(*(uint64_t (**)(llvm::AbstractAttribute *, llvm::Attributor *))(*(void *)v9 + 112))(v9, this);
    char v12 = v11;
    *a4 |= (*(unsigned __int8 (**)(void))(*((void *)v9 + 4) + 24))() ^ 1;
    if (v12)
    {
      if (!v10) {
        return 0;
      }
      unsigned int v13 = v10[16];
      if (v13 - 11 > 1)
      {
        if (v13 <= 0x14)
        {
          unsigned int v21 = (llvm::Value *)sub_1CD648FA4(a2);
          uint64_t v23 = llvm::AA::getWithType((llvm::AA *)v10, v21, v22);
          uint64_t v14 = (uint64_t)v23;
          if (!v23) {
            return (llvm::UndefValue *)v14;
          }
          if (*((unsigned __int8 *)v23 + 16) <= 0x14u)
          {
            llvm::Attributor::recordDependence((uint64_t)this, (uint64_t)v9, (uint64_t)a3, 1);
            return (llvm::UndefValue *)v14;
          }
        }
        return 0;
      }
      llvm::Attributor::recordDependence((uint64_t)this, (uint64_t)v9, (uint64_t)a3, 1);
      uint64_t v19 = (llvm::UndefValue *)sub_1CD648FA4(a2);
      return llvm::UndefValue::get(v19, v20);
    }
    else
    {
      llvm::Attributor::recordDependence((uint64_t)this, (uint64_t)v9, (uint64_t)a3, 1);
      return 0;
    }
  }
  return (llvm::UndefValue *)v14;
}

double sub_1CD648E24(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  if (sub_1CD650C48(a2, a3, &v6))
  {
    BOOL v4 = v6;
    *(void *)a1 = a1 + 16;
    *(void *)&double result = 0x100000000;
    *(void *)(a1 + 8) = 0x100000000;
    if (*((_DWORD *)v4 + 6)) {
      sub_1CC8B6134((unsigned int *)a1, (uint64_t)(v4 + 2));
    }
  }
  else
  {
    *(void *)a1 = a1 + 16;
    *(void *)&double result = 0x100000000;
    *(void *)(a1 + 8) = 0x100000000;
  }
  return result;
}

__n128 llvm::Attributor::recordDependence(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 != 2)
  {
    uint64_t v17 = v4;
    uint64_t v18 = v5;
    if (*(_DWORD *)(a1 + 272))
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
      if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10) & 1) == 0)
      {
        uint64_t v12 = *(void *)(*(void *)(a1 + 264) + 8 * *(unsigned int *)(a1 + 272) - 8);
        v15[0] = a2;
        v15[1] = a3;
        int v16 = a4;
        unsigned int v13 = (__n128 *)sub_1CD41C4F0(v12, (unint64_t)v15, 1);
        uint64_t v14 = (__n128 *)(*(void *)v12 + 24 * *(unsigned int *)(v12 + 8));
        __n128 result = *v13;
        v14[1].n128_u64[0] = v13[1].n128_u64[0];
        *uint64_t v14 = result;
        ++*(_DWORD *)(v12 + 8);
      }
    }
  }
  return result;
}

uint64_t sub_1CD648FA4(llvm::IRPosition *a1)
{
  if (sub_1CD647DEC(a1) == 2) {
    unint64_t v2 = *(void *)(*(void *)(sub_1CD648A0C(a1) + 24) + 16);
  }
  else {
    unint64_t v2 = sub_1CD6482F0(a1);
  }
  return *(void *)v2;
}

unint64_t llvm::Attributor::getAssumedSimplified(llvm::Attributor *this, const llvm::IRPosition *a2, const llvm::AbstractAttribute *a3, BOOL *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  double v8 = sub_1CD648E24((uint64_t)&v20, (uint64_t *)this, (uint64_t *)a2);
  if (v21)
  {
    uint64_t v19 = a3;
    uint64_t v14 = *((void *)v20 + 3);
    if (!v14) {
      sub_1CB920400();
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, const llvm::IRPosition *, const llvm::AbstractAttribute **, BOOL *, double))(*(void *)v14 + 48))(v14, a2, &v19, a4, v8);
    sub_1CD650EAC(&v20);
  }
  else
  {
    sub_1CD650EAC(&v20);
    uint64_t v9 = sub_1CC8AB8F0((uint64_t)this, *(void *)a2, *((void *)a2 + 1), (uint64_t)a3, 2, 0, 1);
    uint64_t v10 = (llvm::AA *)(*(uint64_t (**)(llvm::AbstractAttribute *, llvm::Attributor *))(*(void *)v9 + 112))(v9, this);
    char v12 = v11;
    *a4 |= (*(unsigned __int8 (**)(void))(*((void *)v9 + 4) + 24))() ^ 1;
    if (v12)
    {
      if (v10 && (v16 = (llvm::Value *)sub_1CD648FA4(a2), (uint64_t v18 = llvm::AA::getWithType(v10, v16, v17)) != 0))
      {
        uint64_t v13 = (uint64_t)v18;
        if (a3) {
          llvm::Attributor::recordDependence((uint64_t)this, (uint64_t)v9, (uint64_t)a3, 1);
        }
      }
      else
      {
        return sub_1CD6482F0(a2);
      }
    }
    else
    {
      if (a3) {
        llvm::Attributor::recordDependence((uint64_t)this, (uint64_t)v9, (uint64_t)a3, 1);
      }
      return 0;
    }
  }
  return v13;
}

unint64_t llvm::Attributor::translateArgumentToCallSiteContent(llvm::Attributor *a1, llvm::Argument *this, char a3, uint64_t a4, const llvm::AbstractAttribute *a5, BOOL *a6)
{
  uint64_t v6 = this;
  if (a3)
  {
    if (this)
    {
      unsigned int v7 = *((unsigned __int8 *)this + 16);
      if (v7 > 0x14)
      {
        if (v7 != 21) {
          return 0;
        }
        uint64_t v13 = *(void *)(a4 - 32);
        if (!v13 || *(unsigned char *)(v13 + 16) || *(void *)(v13 + 24) != *(void *)(a4 + 72)) {
          uint64_t v13 = 0;
        }
        if (v13 == *((void *)this + 3) && (llvm::Argument::hasPointeeInMemoryValueAttr(this) & 1) == 0)
        {
          int v14 = *(_DWORD *)(a4 + 20);
          if ((v14 & 0x40000000) != 0) {
            uint64_t v15 = *(void *)(a4 - 8);
          }
          else {
            uint64_t v15 = a4 - 32 * (v14 & 0x7FFFFFF);
          }
          v16[0] = (v15 + 32 * *((unsigned int *)v6 + 8)) | 3;
          v16[1] = 0;
          return llvm::Attributor::getAssumedSimplified(a1, (const llvm::IRPosition *)v16, a5, a6);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return (unint64_t)v6;
}

void llvm::Attributor::~Attributor(llvm::Attributor *this)
{
  unsigned int v3 = (uint64_t *)((char *)this + 104);
  unint64_t v2 = *((void *)this + 13);
  if ((v2 & 2) != 0)
  {
    unint64_t v6 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v5 = *(uint64_t **)v6;
    uint64_t v4 = *(void *)v6 + 8 * *(unsigned int *)(v6 + 8);
  }
  else
  {
    uint64_t v4 = (uint64_t)&v3[v2 > 3];
    uint64_t v5 = (uint64_t *)((char *)this + 104);
  }
  while (v5 != (uint64_t *)v4)
  {
    uint64_t v7 = *v5++;
    (**(void (***)(void))(v7 & 0xFFFFFFFFFFFFFFF8))();
  }
  double v8 = (char *)*((void *)this + 665);
  if (v8 != (char *)this + 5336) {
    free(v8);
  }
  if ((*((unsigned char *)this + 5184) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)this + 649), 8);
  }
  sub_1CC0BDE04((char **)this + 622);
  sub_1CD64DF38((void *)this + 597);
  uint64_t v9 = (char *)*((void *)this + 587);
  if (v9 != (char *)this + 4712) {
    free(v9);
  }
  if ((*((unsigned char *)this + 4624) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)this + 579), 8);
  }
  uint64_t v10 = (char *)*((void *)this + 568);
  if (v10 != (char *)this + 4560) {
    free(v10);
  }
  if ((*((unsigned char *)this + 4472) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)this + 560), 8);
  }
  char v11 = (void *)*((void *)this + 548);
  if (v11 != *((void **)this + 547)) {
    free(v11);
  }
  sub_1CC0BD0FC((char **)this + 496);
  sub_1CD64E064((void *)this + 447);
  sub_1CC0BD0FC((char **)this + 397);
  sub_1CD64E064((void *)this + 348);
  char v12 = (char *)*((void *)this + 250);
  if (v12 != (char *)this + 2016) {
    free(v12);
  }
  if ((*((unsigned char *)this + 1480) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)this + 186), 8);
  }
  uint64_t v13 = (char *)*((void *)this + 119);
  if (v13 != (char *)this + 968) {
    free(v13);
  }
  if ((*((unsigned char *)this + 432) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)this + 55), 8);
  }
  MEMORY[0x1D25D9CD0](*((void *)this + 51), 8);
  int v14 = (char *)*((void *)this + 33);
  if (v14 != (char *)this + 280) {
    free(v14);
  }
  uint64_t v15 = (char *)*((void *)this + 23);
  if (v15 != (char *)this + 200) {
    free(v15);
  }
  if ((*((unsigned char *)this + 112) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)this + 15), 8);
  }
  *((void *)this + 12) = &unk_1F2620AA0;
  sub_1CD64E248(v3);
  sub_1CD64F648((uint64_t *)this + 7);
  MEMORY[0x1D25D9CD0](*((void *)this + 4), 8);
  sub_1CD64F5B4((char **)this);
  MEMORY[0x1D25D9CD0](*(void *)this, 8);
}

uint64_t llvm::Attributor::isAssumedDead(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned char *a4, int a5, int a6)
{
  uint64_t v12 = a2 + 16;
  uint64_t v13 = *(uint64_t **)(a1 + 80);
  uint64_t v15 = 0;
  unint64_t v16 = sub_1CD6482A0((_DWORD *)(a2 + 16));
  uint64_t result = sub_1CD420258(v13, &v16, &v15);
  if (result) {
    return llvm::Attributor::isAssumedDead(a1, v12, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t llvm::Attributor::isAssumedDead(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned char *a5, int a6, int a7)
{
  unint64_t v14 = sub_1CC8AB830((_DWORD *)a2);
  if (v14)
  {
    if (a6) {
      int v16 = a7;
    }
    else {
      int v16 = 1;
    }
    uint64_t result = llvm::Attributor::isAssumedDead(a1, v14, a3, a4, a5, 1, v16);
    if (result & 1) != 0 || (a6) {
      return result;
    }
  }
  else if (a6)
  {
    return 0;
  }
  if (sub_1CD647DEC((void *)a2) == 5)
  {
    unint64_t v22 = sub_1CD6482F0((llvm::IRPosition *)a2);
    uint64_t v18 = 0;
    uint64_t v17 = v22 | 1;
  }
  else
  {
    uint64_t v17 = *(void *)a2;
    uint64_t v18 = *(void *)(a2 + 8);
  }
  uint64_t v19 = sub_1CC8AC178(a1, v17, v18, a3, 2, 0, 1);
  if (v19 == (llvm::AbstractAttribute *)a3) {
    return 0;
  }
  uint64_t v20 = (uint64_t)v19;
  uint64_t result = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v19 + 112))(v19);
  if (result)
  {
    if (a3) {
      llvm::Attributor::recordDependence(a1, v20, a3, a7);
    }
    char v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 120))(v20);
    uint64_t result = 1;
    if ((v21 & 1) == 0) {
      *a5 = 1;
    }
  }
  return result;
}

{
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  llvm::AbstractAttribute *v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;

  uint64_t v12 = a2;
  if (a3) {
    unint64_t v14 = *(void *)(a3 + 24);
  }
  else {
    unint64_t v14 = 0;
  }
  uint64_t v15 = sub_1CB896AE8(a1 + 4376, *(void *)(a2 + 40));
  int v16 = *(void *)(a1 + 4384);
  uint64_t v17 = 4392;
  if (v16 == *(void *)(a1 + 4376)) {
    uint64_t v17 = 4396;
  }
  if (v15 != (void *)(v16 + 8 * *(unsigned int *)(a1 + v17))) {
    return 0;
  }
  if (!a4)
  {
    *(void *)&unint64_t v25 = *(void *)(*(void *)(v12 + 40) + 56);
    *((void *)&v25 + 1) = v14;
    uint64_t v19 = sub_1CD649A14(a1, &v25, a3, 2, 0);
    if (!v19) {
      goto LABEL_11;
    }
    a4 = (_DWORD *)v19;
  }
  if (sub_1CD6482A0(a4 + 4) == *(void *)(*(void *)(v12 + 40) + 56))
  {
    unint64_t v24 = *(void *)a4;
    if (a6)
    {
      if (((*(uint64_t (**)(_DWORD *))(v24 + 128))(a4) & 1) == 0) {
        return 0;
      }
    }
    else if (!(*(unsigned int (**)(_DWORD *, uint64_t))(v24 + 144))(a4, v12))
    {
      goto LABEL_12;
    }
    if (a3) {
      llvm::Attributor::recordDependence(a1, (uint64_t)a4, a3, a7);
    }
    if ((*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a4 + 152))(a4, v12)) {
      return 1;
    }
    goto LABEL_32;
  }
LABEL_11:
  if (a6) {
    return 0;
  }
LABEL_12:
  uint64_t v20 = *(unsigned __int8 *)(v12 + 16);
  if (!*(unsigned char *)(v12 + 16) || v20 >= 0x1C && (char v21 = v20 - 33, v21 <= 0x33) && ((1 << v21) & 0x8000000000041) != 0) {
    v12 |= 2uLL;
  }
  unint64_t v22 = sub_1CC8AC178(a1, v12, v14, a3, 2, 0, 1);
  if (v22 == (llvm::AbstractAttribute *)a3) {
    return 0;
  }
  uint64_t v23 = (uint64_t)v22;
  uint64_t result = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v22 + 112))(v22);
  if (result)
  {
    if (a3) {
      llvm::Attributor::recordDependence(a1, v23, a3, a7);
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v23 + 120))(v23)) {
      return 1;
    }
LABEL_32:
    uint64_t result = 1;
    *a5 = 1;
  }
  return result;
}

uint64_t sub_1CD649A14(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  unint64_t v14 = &llvm::AAIsDead::ID;
  long long v15 = v9;
  int v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

unint64_t llvm::Attributor::checkForAllCallSites(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t *), uint64_t a3, uint64_t a4, int a5, unsigned char *a6)
{
  unint64_t result = sub_1CD648A0C((llvm::IRPosition *)(a4 + 16));
  if (result)
  {
    return llvm::Attributor::checkForAllCallSites(a1, a2, a3, result, a5, a4, a6);
  }
  return result;
}

uint64_t sub_1CD649BF0(uint64_t (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = *a3;
  v8[0] = &v9;
  v8[1] = 0;
  if (*((_DWORD *)a3 + 4)) {
    sub_1CD41B598((uint64_t)v8, (uint64_t)(a3 + 1));
  }
  uint64_t v5 = a1(a2, &v7);
  if (v8[0] != &v9) {
    free(v8[0]);
  }
  return v5;
}

uint64_t llvm::Attributor::shouldPropagateCallBaseContext(llvm::Attributor *this, const llvm::IRPosition *a2)
{
  return byte_1EBD07860;
}

unint64_t llvm::Attributor::checkForAllReturnedValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a2;
  v11[1] = a3;
  unint64_t result = sub_1CD648A0C((llvm::IRPosition *)(a4 + 16));
  if (result)
  {
    uint64_t v7 = sub_1CC8B670C(a1, result, *(void *)(a4 + 24), a4, 0, 0, 1);
    uint64_t v8 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)v7 + 48))(v7);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    unint64_t result = 0;
    if (v9)
    {
      uint64_t v10 = v11;
      return (*(uint64_t (**)(llvm::AbstractAttribute *, uint64_t (*)(uint64_t), void **))(*(void *)v7 + 120))(v7, sub_1CC8B6C44, &v10);
    }
  }
  return result;
}

uint64_t llvm::Attributor::checkForAllInstructions(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, unsigned __int8 a8, char a9)
{
  if (!a4) {
    return 0;
  }
  if (!*(unsigned char *)(a4 + 16))
  {
    if (*(void *)(a4 + 72) != a4 + 72 || (*(unsigned char *)(a4 + 34) & 0x80) != 0) {
      goto LABEL_9;
    }
    return 0;
  }
  if (*(unsigned char *)(a4 + 16) == 3 && (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) == 0) {
    return 0;
  }
LABEL_9:
  uint64_t v18 = 0;
  if ((a8 & 1) == 0 && (a9 & 1) == 0) {
    uint64_t v18 = sub_1CC8AC178(a1, a4, 0, a5, 2, 0, 1);
  }
  uint64_t v19 = (uint64_t *)sub_1CD64B750(*(void *)(a1 + 88), (const llvm::Function *)a4);
  return sub_1CC8AD398(a1, v19, a2, a3, a5, v18, *(int **)a6, *(void *)(a6 + 8), a7, a8, a9);
}

uint64_t llvm::Attributor::checkForAllInstructions(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6, unsigned __int8 a7, char a8)
{
  unint64_t v16 = sub_1CD648A0C((llvm::IRPosition *)(a4 + 16));
  return llvm::Attributor::checkForAllInstructions(a1, a2, a3, v16, a4, a5, a6, a7, a8);
}

uint64_t llvm::Attributor::checkForAllReadWriteInstructions(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, unsigned char *a5)
{
  unint64_t v10 = sub_1CD648A0C((llvm::IRPosition *)(a4 + 16));
  if (v10)
  {
    uint64_t v13 = (const llvm::Function *)v10;
    uint64_t v11 = 1;
    unint64_t v14 = sub_1CC8AC178(a1, v10, 0, a4, 2, 0, 1);
    uint64_t v15 = sub_1CD64B750(*(void *)(a1 + 88), v13);
    uint64_t v16 = *(unsigned int *)(v15 + 32);
    if (!v16) {
      return v11;
    }
    uint64_t v17 = *(uint64_t **)(v15 + 24);
    uint64_t v18 = 8 * v16;
    while (1)
    {
      uint64_t v19 = *v17;
      unsigned int v20 = *(unsigned __int8 *)(*v17 + 16);
      if (*(unsigned char *)(*v17 + 16)
        && (v20 < 0x1C
         || ((unsigned int v22 = v20 - 33, v23 = v22 > 0x33, v24 = (1 << v22) & 0x8000000000041, !v23)
           ? (BOOL v25 = v24 == 0)
           : (BOOL v25 = 1),
             v25)))
      {
        uint64_t v21 = *v17;
      }
      else
      {
        uint64_t v21 = v19 | 2;
      }
      v26[0] = v21;
      v26[1] = 0;
      if ((llvm::Attributor::isAssumedDead(a1, (uint64_t)v26, a4, v14, a5, 0, 1) & 1) == 0 && !a2(a3, v19)) {
        break;
      }
      ++v17;
      uint64_t v11 = 1;
      v18 -= 8;
      if (!v18) {
        return v11;
      }
    }
  }
  return 0;
}

uint64_t sub_1CD64A05C(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (a2 != a4)
  {
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = result;
    do
    {
      uint64_t v12 = a3(v8);
      unint64_t result = sub_1CD4C96F8((uint64_t)v13, v9, &v12);
      if (v13[16])
      {
        uint64_t v10 = a3(v8);
        uint64_t v11 = *(uint64_t **)(v9 + 32);
        if ((unint64_t)v11 >= *(void *)(v9 + 40))
        {
          unint64_t result = (uint64_t)sub_1CBF63C18((void **)(v9 + 24), v10);
        }
        else
        {
          uint64_t *v11 = v10;
          unint64_t result = (uint64_t)(v11 + 1);
        }
        *(void *)(v9 + 32) = result;
      }
      v8 += 8;
    }
    while (v8 != a4);
  }
  return result;
}

uint64_t sub_1CD64A100(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = result;
  unint64_t v8 = a4 - a2;
  uint64_t v9 = *(unsigned int *)(result + 8);
  if (v9 + ((a4 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a4)
  {
    uint64_t v10 = (uint64_t *)(*(void *)result + 8 * v9);
    do
    {
      unint64_t result = a3(v6);
      *v10++ = result;
      v6 += 8;
    }
    while (v6 != a4);
    LODWORD(v9) = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(v7 + 8) = v9 + (v8 >> 3);
  return result;
}

BOOL llvm::Attributor::registerForUpdate(llvm::Attributor *this, llvm::AbstractAttribute *a2)
{
  unsigned int v3 = a2;
  return sub_1CD64A1CC((uint64_t)this + 5184, (uint64_t *)&v3);
}

BOOL sub_1CD64A1CC(uint64_t a1, uint64_t *a2)
{
  sub_1CD529884((uint64_t)v8, a1, a2);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 144);
    if (v6 >= *(_DWORD *)(a1 + 148)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 136) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 144);
  }
  return v4 != 0;
}

void llvm::Attributor::identifyDeadInternalFunctions(llvm::Attributor *this)
{
  v22[8] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 5465))
  {
    unsigned int v20 = v22;
    uint64_t v21 = 0x800000000;
    uint64_t v2 = *((void *)this + 10);
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v4 = *(void *)(v2 + 32);
    if (v3 != v4)
    {
      unsigned int v5 = 0;
      do
      {
        if ((*(_DWORD *)(*(void *)v3 + 32) & 0xFu) - 7 <= 1)
        {
          if (v5 >= HIDWORD(v21)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v20 + v5) = *(void *)v3;
          unsigned int v5 = v21 + 1;
          LODWORD(v21) = v21 + 1;
        }
        v3 += 8;
      }
      while (v3 != v4);
    }
    uint64_t v15 = v19;
    uint64_t v16 = v19;
    uint64_t v17 = 8;
    int v18 = 0;
    while (v21)
    {
      uint64_t v6 = 0;
      char v7 = 0;
      uint64_t v8 = 8 * v21;
      do
      {
        uint64_t v9 = *(void *)((char *)v20 + v6);
        if (v9)
        {
          v13[0] = (uint64_t)this;
          v13[1] = (uint64_t)&v15;
          if ((llvm::Attributor::checkForAllCallSites((uint64_t)this, (uint64_t (*)(uint64_t, uint64_t *))sub_1CC8B6CF8, (uint64_t)v13, v9, 1, 0, &v14) & 1) == 0)
          {
            sub_1CB89694C((llvm::SmallPtrSetImplBase *)&v15, v9);
            *(void *)((char *)v20 + v6) = 0;
            char v7 = 1;
          }
        }
        v6 += 8;
      }
      while (v8 != v6);
      if ((v7 & 1) == 0)
      {
        if (v21)
        {
          uint64_t v10 = 0;
          uint64_t v11 = (char *)this + 4472;
          uint64_t v12 = 8 * v21;
          do
          {
            v13[0] = 0;
            v13[0] = *(void *)((char *)v20 + v10);
            if (v13[0]) {
              sub_1CC8AEA28((uint64_t)v11, v13);
            }
            v10 += 8;
          }
          while (v12 != v10);
        }
        break;
      }
    }
    if (v16 != v15) {
      free(v16);
    }
    if (v20 != v22) {
      free(v20);
    }
  }
}

BOOL sub_1CD64A470(uint64_t a1, uint64_t *a2)
{
  sub_1CD64F740(a1, a2, (uint64_t)&v6);
  int v4 = v7;
  if (v7) {
    sub_1CC0B4168((unsigned int *)(a1 + 392), (char *)a2);
  }
  return v4 != 0;
}

uint64_t llvm::Attributor::run(llvm::Attributor *this)
{
  uint64_t v2 = (uint64_t *)off_1EC7DFC00();
  if (*v2) {
    llvm::timeTraceProfilerBegin((uint64_t)"Attributor::run", 15, (uint64_t)"", 0);
  }
  v6[0] = &unk_1F26207C8;
  v6[1] = this;
  if (byte_1EBD07920) {
    sub_1CD64A648((uint64_t)v6);
  }
  *((_DWORD *)this + 1092) = 1;
  llvm::Attributor::runTillFixpoint(this);
  if (byte_1EBD07620) {
    llvm::AADepGraph::dumpGraph((llvm::Attributor *)((char *)this + 96));
  }
  if (byte_1EBD076E0)
  {
    uint64_t v11 = (char *)this + 96;
    uint64_t v9 = "Dependency Graph";
    __int16 v10 = 259;
    __int16 v8 = 257;
    sub_1CD64C5D8((llvm::raw_ostream *)&v11, (llvm::Twine *)&v9, 0, (llvm::Twine *)v7, 0);
  }
  if (byte_1EBD077A0) {
    llvm::AADepGraph::print((uint64_t *)this + 12);
  }
  *((_DWORD *)this + 1092) = 2;
  int v3 = llvm::Attributor::manifestAttributes(this);
  *((_DWORD *)this + 1092) = 3;
  unsigned int v4 = llvm::Attributor::cleanupIR(this);
  if (byte_1EBD07920) {
    llvm::AttributorCallGraph::print((llvm::AttributorCallGraph *)v6);
  }
  if (*v2) {
    sub_1CD84B62C(*v2);
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

char *sub_1CD64A648(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v4 = v3;
  unint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  v7[0] = v2;
  v7[1] = v4;
  if ((char *)v2 != result)
  {
    uint64_t v6 = result;
    do
    {
      unint64_t result = llvm::AACallEdgeIterator::operator*((uint64_t)v7);
      v7[0] += 8;
    }
    while ((char *)v7[0] != v6);
  }
  return result;
}

void llvm::AADepGraph::dumpGraph(llvm::AADepGraph *this)
{
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v26 = 0;
  if (byte_1EBCDDE0F >= 0) {
    uint64_t v2 = byte_1EBCDDE0F & 0x7F;
  }
  else {
    uint64_t v2 = qword_1EBCDDE00;
  }
  if (v2)
  {
    if (byte_1EBCDDE0F >= 0) {
      uint64_t v3 = &qword_1EBCDDDF8;
    }
    else {
      uint64_t v3 = (uint64_t *)qword_1EBCDDDF8;
    }
    MEMORY[0x1D25D9640](v25, v3);
  }
  else
  {
    MEMORY[0x1D25D9630](v25, "dep_graph");
  }
  sub_1CBAD7600("_", v25, (void **)&__p.__r_.__value_.__l.__data_);
  int v4 = atomic_load((unsigned int *)dword_1EBCDD760);
  std::to_string(&v22, v4);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v5 = &v22;
  }
  else {
    unsigned int v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&v22.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
  }
  unsigned __int8 v7 = std::string::append(&__p, (const std::string::value_type *)v5, size);
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  uint64_t v9 = std::string::append(&v21, ".dot");
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
  long long v23 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  uint64_t v24 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = (llvm::raw_ostream *)llvm::outs((llvm *)v9);
  uint64_t v12 = sub_1CB8E509C(v11, "Dependency graph dump to ");
  if (v24 >= 0) {
    uint64_t v13 = (const char *)&v23;
  }
  else {
    uint64_t v13 = (const char *)v23;
  }
  if (v24 >= 0) {
    size_t v14 = HIBYTE(v24) & 0x7F;
  }
  else {
    size_t v14 = *((void *)&v23 + 1);
  }
  uint64_t v15 = llvm::raw_ostream::write(v12, v13, v14);
  sub_1CB8E509C(v15, ".\n");
  LODWORD(v22.__r_.__value_.__l.__data_) = 0;
  v22.__r_.__value_.__l.__size_ = (std::string::size_type)std::system_category();
  if (v24 >= 0) {
    uint64_t v16 = &v23;
  }
  else {
    uint64_t v16 = (long long *)v23;
  }
  if (v24 >= 0) {
    uint64_t v17 = HIBYTE(v24) & 0x7F;
  }
  else {
    uint64_t v17 = *((void *)&v23 + 1);
  }
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v21, v16, v17, (uint64_t)&v22, 3);
  if (!LODWORD(v22.__r_.__value_.__l.__data_))
  {
    unsigned int v20 = this;
    __int16 v19 = 257;
    sub_1CD64C67C((llvm::raw_ostream *)&v21, (llvm::raw_ostream *)&v20, 0, (llvm::Twine *)&__p);
  }
  atomic_fetch_add(dword_1EBCDD760, 1u);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v21);
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25[0]);
  }
}

uint64_t *llvm::AADepGraph::print(uint64_t *this)
{
  uint64_t v2 = this + 1;
  unint64_t v1 = this[1];
  if ((v1 & 2) != 0)
  {
    unint64_t v4 = v1 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v2 = *(uint64_t **)v4;
    uint64_t v3 = *(void *)v4 + 8 * *(unsigned int *)(v4 + 8);
  }
  else
  {
    uint64_t v3 = (uint64_t)&v2[v1 > 3];
  }
  while (v2 != (uint64_t *)v3)
  {
    uint64_t v5 = *v2++;
    uint64_t v6 = llvm::outs((llvm *)this);
    this = (uint64_t *)(*(uint64_t (**)(unint64_t, void *))(*(void *)(v5 & 0xFFFFFFFFFFFFFFF8) + 56))(v5 & 0xFFFFFFFFFFFFFFF8, v6);
  }
  return this;
}

unint64_t *llvm::Attributor::rememberDependences(unint64_t *this)
{
  unint64_t v1 = *(uint64_t **)(this[33] + 8 * *((unsigned int *)this + 68) - 8);
  unsigned int v2 = *((_DWORD *)v1 + 2);
  if (v2)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = *v1 + 24 * v2;
    do
    {
      this = sub_1CD64B90C((unint64_t *)(*(void *)v3 + 8), *(void *)(v3 + 8) & 0xFFFFFFFFFFFFFFFBLL | (4 * *(unsigned int *)(v3 + 16)));
      v3 += 24;
    }
    while (v3 != v4);
  }
  return this;
}

void llvm::Attributor::createShallowWrapper(llvm::Attributor *this, llvm::Function *a2)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *((void *)this + 5);
  uint64_t v4 = (llvm::PointerType *)*((void *)this + 3);
  char v5 = *((_DWORD *)this + 8) & 0xF;
  uint64_t v6 = (llvm::Type *)(*(_DWORD *)(*(void *)this + 8) >> 8);
  __int16 v15 = 261;
  v14[0] = llvm::Value::getName(this);
  v14[1] = v7;
  std::string::size_type v8 = (unint64_t *)operator new(0x80uLL);
  uint64_t v9 = (llvm::Value *)(v8 + 1);
  *((_DWORD *)v8 + 7) = *((_DWORD *)v8 + 7) & 0x38000000 | 0x40000000;
  *std::string::size_type v8 = 0;
  llvm::Function::Function(v8 + 1, v4, v5, v6, (const char **)v14, 0);
  __int16 v15 = 257;
  llvm::Value::setName(this, (const char **)v14);
  _DWORD v8[6] = v3;
  if ((*((unsigned char *)v8 + 31) & 0x10) != 0)
  {
    std::string::size_type v10 = *(llvm::ValueSymbolTable **)(v3 + 112);
    if (v10) {
      llvm::ValueSymbolTable::reinsertValue(v10, v9);
    }
  }
  unint64_t v11 = *((void *)this + 7);
  v8[8] = v11;
  v8[9] = (unint64_t)this + 56;
  *(void *)(v11 + 8) = v8 + 8;
  *((void *)this + 7) = v8 + 8;
  *((_DWORD *)this + 8) = *((_DWORD *)this + 8) & 0xFFFFBFC0 | 0x4007;
  llvm::Value::doRAUW(this, v9, (llvm::Value *)1);
  llvm::GlobalObject::setComdat(v9, *((llvm::Comdat **)this + 6));
  llvm::GlobalObject::setComdat(this, 0);
  uint64_t v16 = v18;
  uint64_t v17 = 0x100000000;
  llvm::Value::getAllMetadata(this, (uint64_t)&v16);
  if (v17)
  {
    uint64_t v12 = v16;
    uint64_t v13 = &v16[2 * v17];
    do
    {
      llvm::Value::addMetadata(v9, *(_DWORD *)v12, (llvm::MDNode *)v12[1]);
      v12 += 2;
    }
    while (v12 != v13);
  }
  v8[15] = *((void *)this + 14);
  v14[0] = "entry";
  __int16 v15 = 259;
  operator new();
}

uint64_t llvm::Attributor::isInternalizable(llvm::Attributor *this, llvm::Function *a2)
{
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (*((llvm::Attributor **)this + 9) == (llvm::Attributor *)((char *)this + 72) {
         && (*((unsigned char *)this + 34) & 0x80) == 0)
  }
  {
    return 0;
  }
  int v3 = *((_DWORD *)this + 8) & 0xF;
  BOOL v4 = (v3 - 7) >= 2;
  unsigned int v5 = (0x1EBu >> v3) & 1;
  if (v4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t llvm::Attributor::internalizeFunction(llvm::Attributor *this, llvm::Function *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (byte_1EBCDDC78) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = a2 == 0;
  }
  if (v2) {
    return 0;
  }
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (*((llvm::Attributor **)this + 9) == (llvm::Attributor *)((char *)this + 72) {
         && (*((unsigned char *)this + 34) & 0x80) == 0)
  }
  {
    return 0;
  }
  if ((*((_DWORD *)this + 8) & 0xFu) - 7 < 2) {
    return 0;
  }
  uint64_t v4 = 0;
  if (((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x614) == 0)
  {
    v9[0] = (uint64_t)this;
    sub_1CD651690((llvm::SmallPtrSetImplBase *)&v7, v9, 1);
    v9[0] = 0;
    v9[1] = 0;
    int v10 = 0;
    llvm::Attributor::internalizeFunctions((uint64_t)&v7, v9);
    uint64_t v6 = this;
    uint64_t v4 = sub_1CD4F8350(v9, &v6)[1];
    MEMORY[0x1D25D9CD0](v9[0], 8);
    if (v8 != v7) {
      free(v8);
    }
  }
  return v4;
}

uint64_t llvm::Attributor::internalizeFunctions(uint64_t a1, uint64_t *a2)
{
  BOOL v2 = a2;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 == *(void *)a1) {
    unsigned int v5 = (unsigned int *)(a1 + 20);
  }
  else {
    unsigned int v5 = (unsigned int *)(a1 + 16);
  }
  uint64_t v6 = *v5;
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    std::string::size_type v8 = *(unint64_t **)(a1 + 8);
    while (*v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v8;
      v7 -= 8;
      if (!v7) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    std::string::size_type v8 = *(unint64_t **)(a1 + 8);
  }
  uint64_t v16 = (unint64_t *)(v4 + 8 * v6);
  if (v8 == v16) {
    goto LABEL_8;
  }
  unint64_t v17 = *v8;
LABEL_19:
  if (v17 && *(unsigned char *)(v17 + 16) == 3)
  {
    if ((*(_DWORD *)(v17 + 20) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(v17 + 16) && *(void *)(v17 + 72) == v17 + 72 && (*(unsigned char *)(v17 + 34) & 0x80) == 0)
  {
    return 0;
  }
  int v18 = *(_DWORD *)(v17 + 32) & 0xF;
  if ((v18 - 7) < 2) {
    return 0;
  }
  uint64_t result = 0;
  if (((1 << v18) & 0x1EB) != 0)
  {
    unsigned int v20 = v8 + 1;
    while (v20 != v16)
    {
      unint64_t v21 = *v20++;
      unint64_t v17 = v21;
      if (v21 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        std::string::size_type v8 = v20 - 1;
        goto LABEL_19;
      }
    }
LABEL_8:
    sub_1CBB8977C(a2);
    int v10 = *(unint64_t **)a1;
    uint64_t v9 = *(unint64_t **)(a1 + 8);
    unsigned int v12 = *(_DWORD *)(a1 + 16);
    unsigned int v11 = *(_DWORD *)(a1 + 20);
    if (v9 == *(unint64_t **)a1) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = v12;
    }
    size_t v14 = *(llvm::Function ***)(a1 + 8);
    if (v13)
    {
      uint64_t v15 = 0;
      while (v9[v15] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v13 == ++v15) {
          goto LABEL_58;
        }
      }
      size_t v14 = (llvm::Function **)&v9[v15];
    }
    std::string v22 = &v9[v13];
    if (v14 != (llvm::Function **)v22)
    {
      uint64_t v54 = v2;
LABEL_36:
      int v60 = 0;
      int v60 = *v14;
      uint64_t v55 = *((void *)v60 + 5);
      int v56 = v14;
      long long v23 = (llvm::PointerType *)*((void *)v60 + 3);
      char v24 = *((_DWORD *)v60 + 8) & 0xF;
      BOOL v25 = (llvm::Type *)(*(_DWORD *)(*(void *)v60 + 8) >> 8);
      Name = llvm::Value::getName(v60);
      __int16 v67 = 773;
      uint64_t v64 = Name;
      uint64_t v65 = v27;
      v66[0] = ".internalized";
      long long v28 = (char *)operator new(0x80uLL);
      long long v29 = (llvm::Function *)(v28 + 8);
      *((_DWORD *)v28 + 7) = *((_DWORD *)v28 + 7) & 0x38000000 | 0x40000000;
      *(void *)long long v28 = 0;
      llvm::Function::Function((unint64_t *)v28 + 1, v23, v24, v25, (const char **)&v64, 0);
      int v58 = 128;
      v57[0] = operator new(0x2000uLL, (std::align_val_t)8uLL);
      sub_1CC7AF4A4(v57);
      v59[0] = 0;
      v59[24] = 0;
      if (v28[26]) {
        llvm::Function::BuildLazyArguments(v29);
      }
      unint64_t v30 = (llvm::Value *)*((void *)v28 + 12);
      uint64_t v31 = sub_1CB923B44(v60);
      if ((llvm::Value *)v31 != v32)
      {
        long long v33 = (llvm::Value *)v31;
        long long v34 = v32;
        do
        {
          uint64_t v35 = llvm::Value::getName(v33);
          __int16 v67 = 261;
          uint64_t v64 = v35;
          uint64_t v65 = v36;
          llvm::Value::setName(v30, (const char **)&v64);
          uint64_t v64 = v33;
          unsigned int v37 = (llvm::ValueHandleBase *)sub_1CC8B0DF4((uint64_t)v57, (int32x2_t *****)&v64);
          sub_1CC002D7C(v37, (uint64_t)v30);
          long long v33 = (llvm::Value *)((char *)v33 + 40);
          unint64_t v30 = (llvm::Value *)((char *)v30 + 40);
        }
        while (v33 != v34);
      }
      uint64_t v64 = v66;
      uint64_t v65 = 0x800000000;
      llvm::CloneFunctionInto((uint64_t)v29, (uint64_t)v60, (uint64_t)v57, 0, (uint64_t)&v64, "");
      *((_DWORD *)v28 + 10) = *((_DWORD *)v28 + 10) & 0xFFFFBFC0 | 0x4008;
      uint64_t v61 = v63;
      uint64_t v62 = 0x100000000;
      llvm::Value::getAllMetadata(v60, (uint64_t)&v61);
      if (v62)
      {
        uint64_t v38 = 16 * v62;
        uint64_t v39 = (llvm::MDNode **)((char *)v61 + 8);
        do
        {
          if ((v28[31] & 0x20) == 0) {
            llvm::Value::addMetadata(v29, *((_DWORD *)v39 - 2), *v39);
          }
          v39 += 2;
          v38 -= 16;
        }
        while (v38);
      }
      __int16 v40 = v60;
      *((void *)v28 + 6) = v55;
      if ((v28[31] & 0x10) != 0)
      {
        uint64_t v41 = *(llvm::ValueSymbolTable **)(v55 + 112);
        if (v41) {
          llvm::ValueSymbolTable::reinsertValue(v41, v29);
        }
      }
      uint64_t v42 = *((void *)v40 + 7);
      *((void *)v28 + 8) = v42;
      *((void *)v28 + 9) = (char *)v40 + 56;
      uint64_t v43 = v28 + 64;
      *(void *)(v42 + 8) = v43;
      *((void *)v40 + 7) = v43;
      *((_DWORD *)v43 - 6) |= 0x4000u;
      BOOL v2 = v54;
      sub_1CD4F8350(v54, &v60)[1] = v29;
      if (v61 != v63) {
        free(v61);
      }
      if (v64 != v66) {
        free(v64);
      }
      sub_1CC009354((uint64_t)v59);
      sub_1CC4D021C(v57);
      MEMORY[0x1D25D9CD0](v57[0], 8);
      long long v44 = (unint64_t *)(v56 + 1);
      while (v44 != v22)
      {
        unint64_t v45 = *v44++;
        if (v45 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          size_t v14 = (llvm::Function **)(v44 - 1);
          goto LABEL_36;
        }
      }
      int v10 = *(unint64_t **)a1;
      uint64_t v9 = *(unint64_t **)(a1 + 8);
      unsigned int v12 = *(_DWORD *)(a1 + 16);
      unsigned int v11 = *(_DWORD *)(a1 + 20);
    }
LABEL_58:
    if (v9 == v10) {
      uint64_t v46 = v11;
    }
    else {
      uint64_t v46 = v12;
    }
    uint64_t i = v9;
    if (v46)
    {
      uint64_t v48 = 8 * v46;
      for (uint64_t i = v9; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v48 -= 8;
        if (!v48) {
          return 1;
        }
      }
    }
    int v49 = &v9[v46];
    if (i != v49)
    {
LABEL_68:
      uint64_t v64 = 0;
      uint64_t v51 = (void *)*i;
      int v50 = i + 1;
      uint64_t v64 = v51;
      int v52 = sub_1CD4F8350(v2, &v64);
      v57[0] = v2;
      llvm::Value::replaceUsesWithIf((llvm::Value *)v64, (llvm::Value *)v52[1], (unsigned int (*)(uint64_t, uint64_t))sub_1CC8B6EBC, (uint64_t)v57);
      while (v50 != v49)
      {
        unint64_t v53 = *v50++;
        if (v53 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t i = v50 - 1;
          goto LABEL_68;
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t llvm::Attributor::isValidFunctionSignatureRewrite(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 5466)) {
    return 0;
  }
  BOOL v2 = *(const llvm::Function **)(a2 + 24);
  int v10 = v2;
  if (*(_DWORD *)(*((void *)v2 + 3) + 8) > 0xFFu) {
    return 0;
  }
  uint64_t v9 = *((void *)v2 + 14);
  if (llvm::AttributeList::hasAttrSomewhere(&v9, 18, 0)
    || llvm::AttributeList::hasAttrSomewhere(&v9, 73, 0)
    || llvm::AttributeList::hasAttrSomewhere(&v9, 71, 0)
    || llvm::AttributeList::hasAttrSomewhere(&v9, 72, 0))
  {
    return 0;
  }
  uint64_t result = llvm::Attributor::checkForAllCallSites(a1, (uint64_t (*)(uint64_t, uint64_t *))sub_1CC8B6F50, (uint64_t)&v10, (uint64_t)v2, 1, 0, &v8);
  if (result)
  {
    unsigned int v5 = (uint64_t *)sub_1CD64B750(*(void *)(a1 + 88), v2);
    int v6 = 56;
    return sub_1CC8AD398(0, v5, (uint64_t (*)(uint64_t, uint64_t))sub_1CC8B7070, (uint64_t)&v7, 0, 0, &v6, 1, &v8, 0, 0);
  }
  return result;
}

uint64_t llvm::Attributor::registerFunctionSignatureRewrite(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v13 = *(void *)(a2 + 24);
  int v6 = sub_1CD6516F4(a1 + 56, &v13);
  char v7 = v6 + 1;
  if (!*((_DWORD *)v6 + 4)) {
    sub_1CD651D38((uint64_t)(v6 + 1), *(void *)(v13 + 96));
  }
  uint64_t v8 = *(unsigned int *)(a2 + 32);
  uint64_t v9 = *v7;
  uint64_t v10 = *(void *)(*v7 + 8 * v8);
  if (!v10)
  {
    *(void *)(v9 + 8 * v8) = 0;
    goto LABEL_7;
  }
  if (a4 < *(unsigned int *)(v10 + 32))
  {
    *(void *)(v9 + 8 * v8) = 0;
    unsigned int v12 = sub_1CD651E58((void *)v10);
    MEMORY[0x1D25D9CE0](v12, 0x10E0C40D6C35413);
LABEL_7:
    operator new();
  }
  return 0;
}

uint64_t llvm::Attributor::shouldSeedAttribute()
{
  return 1;
}

uint64_t sub_1CD64B6C4(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1CC8B7874((_DWORD *)a1, a2);
  if (v4)
  {
    unsigned int v5 = *(void **)(a1 + 72);
    uint64_t v6 = *(unsigned int *)(a1 + 80);
    char v7 = &v5[v6];
    if (v6)
    {
      uint64_t v8 = 8 * v6;
      while (*v5 != *a2)
      {
        ++v5;
        v8 -= 8;
        if (!v8)
        {
          unsigned int v5 = v7;
          break;
        }
      }
    }
    if (v7 != v5 + 1)
    {
      memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
      LODWORD(v6) = *(_DWORD *)(a1 + 80);
    }
    *(_DWORD *)(a1 + 80) = v6 - 1;
  }
  return v4;
}

uint64_t sub_1CD64B750(uint64_t a1, const llvm::Function *a2)
{
  char v7 = a2;
  uint64_t v4 = sub_1CD4F8350((uint64_t *)(a1 + 96), &v7);
  uint64_t result = v4[1];
  if (!result)
  {
    uint64_t v6 = sub_1CB906F34(*(uint64_t **)(a1 + 128), 112, 3);
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(void *)(v6 + 24) = v6 + 40;
    *(_DWORD *)(v6 + 36) = 8;
    v4[1] = v6;
    llvm::InformationCache::initializeInformationCache((llvm::InformationCache *)a1, a2, (llvm::InformationCache::FunctionInfo *)v6);
    return v4[1];
  }
  return result;
}

uint64_t llvm::InformationCache::getAAResultsForFunction(llvm::InformationCache *this, const llvm::Function *a2)
{
  if (**((void **)this + 55)) {
    BOOL v2 = *((void *)a2 + 5) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
  return 0;
}

void llvm::InformationCache::FunctionInfo::~FunctionInfo(llvm::InformationCache::FunctionInfo *this)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  uint64_t v3 = *(void *)this + 16 * v2;
  if (*((_DWORD *)this + 2))
  {
    if (v2)
    {
      uint64_t v4 = 16 * v2;
      uint64_t v5 = *(void *)this;
      while (*(_DWORD *)v5 >= 0xFFFFFFFE)
      {
        v5 += 16;
        v4 -= 16;
        if (!v4) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v5 = *(void *)this;
    }
  }
  else
  {
LABEL_6:
    uint64_t v5 = *(void *)this + 16 * v2;
  }
  uint64_t v6 = *(void *)this + 16 * v2;
LABEL_8:
  while (v5 != v6)
  {
    char v7 = *(void ***)(v5 + 8);
    if (*v7 != v7 + 2) {
      free(*v7);
    }
    uint64_t v8 = (unsigned int *)(v5 + 16);
    while (v8 != (unsigned int *)v3)
    {
      unsigned int v9 = *v8;
      v8 += 4;
      if (v9 <= 0xFFFFFFFD)
      {
        uint64_t v5 = (uint64_t)(v8 - 4);
        goto LABEL_8;
      }
    }
    uint64_t v5 = v3;
  }
  uint64_t v10 = (char *)*((void *)this + 3);
  if (v10 != (char *)this + 40) {
    free(v10);
  }
  MEMORY[0x1D25D9CD0](*(void *)this, 8);
}

unint64_t *sub_1CD64B90C(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  if (*result > 3)
  {
    if ((v2 & 2) == 0) {
      operator new();
    }
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    unsigned int v4 = *(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    if (v4 >= *(_DWORD *)(v3 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v3 + 8 * v4) = a2;
    ++*(_DWORD *)(v3 + 8);
  }
  else
  {
    *uint64_t result = a2 & 0xFFFFFFFFFFFFFFFDLL;
  }
  return result;
}

uint64_t llvm::Attributor::identifyDefaultAbstractAttributes(llvm::Attributor *this, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(void *)__int16 v19 = a2;
  uint64_t result = sub_1CD6521E0((uint64_t)this + 408, v19, (uint64_t)&v21);
  if (v23)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      if (*(unsigned char *)(a2 + 16) == 3 && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 0) {
        return result;
      }
    }
    else if (*(void *)(a2 + 72) == a2 + 72 && (*(unsigned char *)(a2 + 34) & 0x80) == 0)
    {
      return result;
    }
    uint64_t v5 = sub_1CD64B750(*((void *)this + 11), (const llvm::Function *)a2);
    if (!*((unsigned char *)this + 5464))
    {
      uint64_t v6 = *(void *)(a2 + 8);
      if (!*(unsigned char *)(v5 + 104) && v6 != 0)
      {
        do
        {
          uint64_t v8 = *(void *)(v6 + 24);
          unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
          if (v9 >= 0x1C)
          {
            BOOL v10 = v9 - 33 > 0x33 || ((1 << (v9 - 33)) & 0x8000000000041) == 0;
            if (!v10 && v8 - 32 == v6 && v9 == 84 && (*(_WORD *)(v8 + 18) & 3) == 2) {
              *(unsigned char *)(v5 + 104) = 1;
            }
          }
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
    }
    sub_1CC8AC178((uint64_t)this, a2, 0, 0, 2, 0, 1);
    sub_1CC8B78C8((uint64_t)this, a2, 0, 0, 2, 0, 1);
    sub_1CC8B7E00((uint64_t)this, a2, 0);
    sub_1CC8B82A4((uint64_t)this, a2, 0, 0, 2, 0, 1);
    sub_1CC8B4D90((uint64_t)this, a2, 0, 0, 2, 0, 1);
    sub_1CC8B87DC((uint64_t)this, a2, 0, 0, 2, 0, 1);
    sub_1CC8B8D14((uint64_t)this, a2, 0, 0, 2, 0, 1);
    sub_1CC8B3300((uint64_t)this, a2, 0, 0, 2, 0, 1);
    sub_1CC8B2D1C((uint64_t)this, a2, 0, 0, 2, 0, 1);
    sub_1CC8B27E4((uint64_t)this, a2, 0, 0, 2, 0, 1);
    sub_1CC8B924C((uint64_t)this, a2, 0, 0, 2, 0, 1);
    if (byte_1EBCDDAF8) {
      sub_1CC8B9784((uint64_t)this, a2, 0, 0, 2, 0, 1);
    }
    uint64_t v11 = **(void **)(*(void *)(a2 + 24) + 16);
    if (*(unsigned char *)(v11 + 8) != 7)
    {
      sub_1CC8B670C((uint64_t)this, a2, 0, 0, 2, 0, 1);
      sub_1CC8AC178((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
      sub_1CC8AB8F0((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
      sub_1CC8B9CBC((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
      if (*(unsigned char *)(v11 + 8) == 15)
      {
        sub_1CC8BA1F4((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
        sub_1CC8BA72C((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
        sub_1CC8BAC64((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
        sub_1CC8BB19C((uint64_t)this, a2 | 1, 0, 0, 2, 0, 1);
      }
    }
    uint64_t v12 = sub_1CB923B44((llvm::Function *)a2);
    if (v12 != v13)
    {
      uint64_t v14 = v12;
      uint64_t v15 = v13;
      uint64_t v16 = v12;
      do
      {
        uint64_t v21 = v14;
        uint64_t v22 = 0;
        v19[0] = 0;
        llvm::Attributor::getAssumedSimplified(this, (const llvm::IRPosition *)&v21, 0, v19);
        sub_1CC8AC178((uint64_t)this, v21, v22, 0, 2, 0, 1);
        sub_1CC8B9CBC((uint64_t)this, v21, v22, 0, 2, 0, 1);
        if (*(unsigned char *)(*(void *)v16 + 8) == 15)
        {
          sub_1CC8BA72C((uint64_t)this, v21, v22, 0, 2, 0, 1);
          sub_1CC8BAC64((uint64_t)this, v21, v22, 0, 2, 0, 1);
          sub_1CC8BB19C((uint64_t)this, v21, v22, 0, 2, 0, 1);
          sub_1CC8BA1F4((uint64_t)this, v21, v22, 0, 2, 0, 1);
          sub_1CC8BB6D4((uint64_t)this, v21, v22, 0, 2, 0, 1);
          sub_1CC8B2D1C((uint64_t)this, v21, v22, 0, 2, 0, 1);
          sub_1CC8B87DC((uint64_t)this, v21, v22, 0, 2, 0, 1);
          sub_1CC8BBC0C((uint64_t)this, v21, v22, 0, 2, 0, 1);
        }
        v16 += 40;
        v14 += 40;
      }
      while (v16 != v15);
    }
    *(void *)__int16 v19 = this;
    unint64_t v17 = (uint64_t *)sub_1CD64B750(*((void *)this + 11), (const llvm::Function *)a2);
    uint64_t v21 = 0xB00000005;
    LODWORD(v22) = 56;
    sub_1CC8AD398(0, v17, (uint64_t (*)(uint64_t, uint64_t))sub_1CC8BC144, (uint64_t)v19, 0, 0, (int *)&v21, 3, &v18, 0, 0);
    uint64_t v21 = (uint64_t)this;
    uint64_t v20 = 0x2100000020;
    return sub_1CC8AD398(0, v17, (uint64_t (*)(uint64_t, uint64_t))sub_1CC8BC598, (uint64_t)&v21, 0, 0, (int *)&v20, 2, &v18, 0, 0);
  }
  return result;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, llvm::Value **a2)
{
  unsigned int v4 = (llvm::Value *)sub_1CD6482F0((llvm::IRPosition *)a2);
  uint64_t v5 = sub_1CB8E509C(a1, "{");
  int v6 = sub_1CD647DEC(a2);
  char v7 = llvm::operator<<(v5, v6);
  uint64_t v8 = sub_1CB8E509C(v7, ":");
  Name = llvm::Value::getName(v4);
  size_t v11 = v9;
  uint64_t v12 = (void *)*((void *)v8 + 4);
  if (v9 <= *((void *)v8 + 3) - (void)v12)
  {
    if (v9)
    {
      memcpy(v12, Name, v9);
      *((void *)v8 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, Name, v9);
  }
  uint64_t v13 = sub_1CB8E509C(v8, " [");
  uint64_t v14 = (llvm::Value *)((unint64_t)*a2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((~*(_DWORD *)a2 & 3) == 0) {
    uint64_t v14 = (llvm::Value *)*((void *)v14 + 3);
  }
  uint64_t v16 = llvm::Value::getName(v14);
  size_t v17 = v15;
  char v18 = (void *)*((void *)v13 + 4);
  if (v15 <= *((void *)v13 + 3) - (void)v18)
  {
    if (v15)
    {
      memcpy(v18, v16, v15);
      *((void *)v13 + 4) += v17;
    }
  }
  else
  {
    llvm::raw_ostream::write(v13, v16, v15);
  }
  __int16 v19 = sub_1CB8E509C(v13, "@");
  int v20 = sub_1CD64DE00((llvm::IRPosition *)a2, 0);
  uint64_t v21 = llvm::raw_ostream::operator<<(v19, v20);
  sub_1CB8E509C(v21, "]");
  if (a2[1])
  {
    char v23 = sub_1CB8E509C(a1, "[cb_context:");
    llvm::Value::print(a2[1], v23, 0);
    sub_1CB8E509C(v23, "]");
  }

  return sub_1CB8E509C(a1, "}");
}

void llvm::AbstractAttribute::print(llvm::AbstractAttribute *this, llvm::raw_ostream *a2)
{
  sub_1CB8E509C(a2, "[");
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(void *)this + 72))(&__p, this);
  if (v17 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  if (v17 >= 0) {
    size_t v5 = v17 & 0x7F;
  }
  else {
    size_t v5 = v16;
  }
  llvm::raw_ostream::write(a2, p_p, v5);
  if (v17 < 0) {
    operator delete(__p);
  }
  sub_1CB8E509C(a2, "] for CtxI ");
  unint64_t v6 = sub_1CC8AB830((_DWORD *)this + 4);
  if (v6)
  {
    uint64_t v8 = (llvm::Value *)v6;
    char v7 = "'";
    sub_1CB8E509C(a2, "'");
    llvm::Value::print(v8, a2, 0);
  }
  else
  {
    char v7 = "<<null inst>>";
  }
  sub_1CB8E509C(a2, v7);
  size_t v9 = sub_1CB8E509C(a2, " at position ");
  BOOL v10 = llvm::operator<<(v9, (llvm::Value **)this + 2);
  size_t v11 = sub_1CB8E509C(v10, " with state ");
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(void *)this + 64))(&__p, this);
  if (v17 >= 0) {
    uint64_t v12 = (const char *)&__p;
  }
  else {
    uint64_t v12 = (const char *)__p;
  }
  if (v17 >= 0) {
    size_t v13 = v17 & 0x7F;
  }
  else {
    size_t v13 = v16;
  }
  llvm::raw_ostream::write(v11, v12, v13);
  uint64_t v14 = (unsigned char *)*((void *)v11 + 4);
  if ((unint64_t)v14 >= *((void *)v11 + 3))
  {
    llvm::raw_ostream::write(v11, 10);
  }
  else
  {
    *((void *)v11 + 4) = v14 + 1;
    *uint64_t v14 = 10;
  }
  if (v17 < 0) {
    operator delete(__p);
  }
}

llvm::raw_ostream *llvm::AbstractAttribute::printWithDeps(llvm::AbstractAttribute *this, llvm::raw_ostream *a2)
{
  uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::AbstractAttribute *))(*(void *)this + 16))(this);
  unint64_t v7 = *((void *)this + 1);
  unint64_t v6 = (uint64_t *)((char *)this + 8);
  unint64_t v5 = v7;
  if ((v7 & 2) != 0)
  {
    unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v6 = *(uint64_t **)v9;
    uint64_t v8 = *(void *)v9 + 8 * *(unsigned int *)(v9 + 8);
  }
  else
  {
    uint64_t v8 = (uint64_t)&v6[v5 > 3];
  }
  for (;
        v6 != (uint64_t *)v8;
        uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(unint64_t, llvm::raw_ostream *))(*(void *)(v10 & 0xFFFFFFFFFFFFFFF8) + 16))(v10 & 0xFFFFFFFFFFFFFFF8, a2))
  {
    uint64_t v10 = *v6++;
    sub_1CB8E509C(a2, "  updates ");
  }
  size_t v11 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v11 >= *((void *)a2 + 3))
  {
    return llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((void *)a2 + 4) = v11 + 1;
    unsigned char *v11 = 10;
  }
  return result;
}

void sub_1CD64C5D8(llvm::raw_ostream *a1, llvm::Twine *this, char a3, llvm::Twine *a4, int a5)
{
  char v10 = 0;
  LOBYTE(__p) = 0;
  sub_1CC8BC70C((uint64_t)v11, a1, this, a3, a4, (uint64_t)&__p);
  if (v10 < 0) {
    operator delete(__p);
  }
  char v6 = v12;
  if (v12 >= 0) {
    std::string::size_type v7 = v12 & 0x7F;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v11[1];
  }
  if (v7)
  {
    if (v12 >= 0) {
      uint64_t v8 = v11;
    }
    else {
      uint64_t v8 = (void **)v11[0];
    }
    llvm::DisplayGraph((std::string::value_type *)v8, v7, 0, a5);
    char v6 = v12;
  }
  if (v6 < 0) {
    operator delete(v11[0]);
  }
}

llvm::raw_ostream *sub_1CD64C67C(llvm::raw_ostream *a1, llvm::raw_ostream *a2, char a3, llvm::Twine *this)
{
  v8[0] = a1;
  v8[1] = a2;
  char v10 = a3;
  char v9 = 0;
  llvm::Twine::str(this, __p);
  sub_1CD6329D4(v8, (uint64_t)__p);
  sub_1CD653964((uint64_t)v8);
  sub_1CB8E509C(a1, "}\n");
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void llvm::AttributorPass::run()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::AnalysisManager<llvm::Module>::getResultImpl();
}

void llvm::AttributorCGSCCPass::run()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl();
}

void llvm::createAttributorLegacyPass(llvm *this)
{
}

void llvm::createAttributorCGSCCLegacyPass(llvm *this)
{
}

uint64_t sub_1CD64CC24()
{
  return 0;
}

uint64_t sub_1CD64CC2C()
{
  return 1;
}

uint64_t sub_1CD64CC34(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  uint64_t v14 = &llvm::AAMemoryLocation::ID;
  long long v15 = v9;
  size_t v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD64CD80(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = &llvm::AAMemoryLocation::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD64CDF0(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    unint64_t v5 = 0;
    uint64_t result = 0;
    goto LABEL_3;
  }
  uint64_t v8 = *a1;
  long long v9 = llvm::IRPosition::EmptyKey;
  long long v10 = llvm::IRPosition::TombstoneKey;
  int v11 = sub_1CD64CF0C((_DWORD *)a2);
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & (v4 - 1);
    unint64_t v5 = (uint64_t *)(v8 + 32 * v14);
    uint64_t v15 = *v5;
    if (*(void *)a2 == *v5 && *(void *)(a2 + 8) == v5[1] && v5[2] == *(void *)(a2 + 16))
    {
      uint64_t result = 1;
      goto LABEL_3;
    }
    if (v15 == -8192)
    {
      BOOL v17 = v5[1] == (void)v10 && v5[2] == *((void *)&v10 + 1);
      goto LABEL_24;
    }
    if (v15 == -4096 && v5[1] == (void)v9 && v5[2] == *((void *)&v9 + 1)) {
      break;
    }
    BOOL v17 = 0;
LABEL_24:
    if (v17 && v12 == 0) {
      uint64_t v12 = (uint64_t *)(v8 + 32 * v14);
    }
    int v11 = v14 + i;
  }
  uint64_t result = 0;
  if (v12) {
    unint64_t v5 = v12;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

uint64_t sub_1CD64CF0C(_DWORD *a1)
{
  uint64_t v1 = (a1[4] >> 4) ^ (a1[4] >> 9) ^ (a1[2] ^ (a1[2] >> 5)) & 0xFFFFFFF0;
  unint64_t v2 = (v1 | ((unint64_t)((*a1 >> 4) ^ (*a1 >> 9)) << 32)) + ~(v1 << 32);
  unint64_t v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
  unint64_t v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
  return ((v4 + ~(v4 << 27)) >> 31) ^ (v4 + ~(v4 << 27));
}

uint64_t *sub_1CD64CF70(uint64_t *a1, uint64_t a2)
{
  char v7 = 0;
  char v4 = sub_1CD64CDF0(a1, a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CD64CFE0((uint64_t)a1, a2, a2, v7);
    *unint64_t v5 = *(void *)a2;
    *(_OWORD *)(v5 + 1) = *(_OWORD *)(a2 + 8);
    v5[3] = 0;
  }
  return v5;
}

uint64_t *sub_1CD64CFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_13;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_13:
    sub_1CD64D0B0(a1, v7);
    long long v10 = 0;
    sub_1CD64CDF0((uint64_t *)a1, a3, &v10);
    a4 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096
    || (a4[1] == (void)llvm::IRPosition::EmptyKey
      ? (BOOL v9 = a4[2] == *((void *)&llvm::IRPosition::EmptyKey + 1))
      : (BOOL v9 = 0),
        !v9))
  {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

char *sub_1CD64D0B0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD64D18C(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    long long v11 = llvm::IRPosition::EmptyKey;
    uint64_t v12 = &result[32 * v10];
    do
    {
      *(void *)uint64_t result = -4096;
      *(_OWORD *)(result + 8) = v11;
      result += 32;
    }
    while (result != v12);
  }
  return result;
}

uint64_t sub_1CD64D18C(uint64_t result, void *a2, void *a3)
{
  char v4 = a2;
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v7 = *((void *)&llvm::IRPosition::EmptyKey + 1);
  uint64_t v6 = llvm::IRPosition::EmptyKey;
  uint64_t v8 = *(unsigned int *)(result + 16);
  if (v8)
  {
    BOOL v9 = *(void **)result;
    uint64_t v10 = *(void *)result + 32 * v8;
    do
    {
      *BOOL v9 = -4096;
      v9[1] = v6;
      uint64_t v9[2] = v7;
      v9 += 4;
    }
    while (v9 != (void *)v10);
    uint64_t v7 = *((void *)&llvm::IRPosition::EmptyKey + 1);
  }
  if (a2 != a3)
  {
    long long v11 = llvm::IRPosition::TombstoneKey;
    do
    {
      if (*v4 == -8192)
      {
        if (v4[1] == (void)v11 && v4[2] == *((void *)&v11 + 1)) {
          goto LABEL_14;
        }
      }
      else if (*v4 == -4096 && v4[1] == v6 && v4[2] == v7)
      {
        goto LABEL_14;
      }
      uint64_t v15 = 0;
      uint64_t result = sub_1CD64CDF0((uint64_t *)v5, (uint64_t)v4, &v15);
      uint64_t v14 = v15;
      *uint64_t v15 = *v4;
      *(_OWORD *)(v14 + 1) = *(_OWORD *)(v4 + 1);
      void v14[3] = v4[3];
      ++*(_DWORD *)(v5 + 8);
LABEL_14:
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1CD64D2AC(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  uint64_t v14 = &llvm::AAMemoryBehavior::ID;
  long long v15 = v9;
  size_t v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD64D3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAMemoryBehavior::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD64D468(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  uint64_t v14 = &llvm::AANoRecurse::ID;
  long long v15 = v9;
  size_t v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD64D5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AANoRecurse::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD64D624(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  uint64_t v14 = &llvm::AAReachability::ID;
  long long v15 = v9;
  size_t v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD64D770(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAReachability::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

BOOL sub_1CD64D7E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v17 = a2;
  *((void *)&v17 + 1) = a3;
  uint64_t v6 = a1 + 544;
  *(void *)&long long v15 = 0;
  if (!sub_1CD5AA3D8((uint64_t *)(a1 + 544), &v17, &v15)
    || (void)v15 == *(void *)(a1 + 544) + 24 * *(unsigned int *)(a1 + 560))
  {
    uint64_t v9 = *(void *)(*(void *)(a2 + 40) + 56);
    if (v9 == *(void *)(*(void *)(a3 + 40) + 56))
    {
      uint64_t v10 = **(void **)(a1 + 440);
      uint64_t v11 = *(void *)(v9 + 40);
      if (v10) {
        BOOL v12 = v11 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12) {
        llvm::AnalysisManager<llvm::Function>::getResultImpl();
      }
      if (v10) {
        BOOL v13 = v11 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13) {
        llvm::AnalysisManager<llvm::Function>::getResultImpl();
      }
      int isPotentiallyReachable = llvm::isPotentiallyReachable(a2, a3, 0, 0, 0);
    }
    else
    {
      int isPotentiallyReachable = 1;
    }
    long long v15 = v17;
    v16[0] = isPotentiallyReachable;
    sub_1CD64D930(v6, &v15, v16, (uint64_t)v14);
  }
  else
  {
    int isPotentiallyReachable = *(unsigned __int8 *)(v15 + 16);
  }
  return isPotentiallyReachable != 0;
}

uint64_t sub_1CD64D930@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v12 = 0;
  uint64_t result = sub_1CD5AA3D8((uint64_t *)a1, a2, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD64D9D0(a1, (uint64_t)a2, a2, v12);
    uint64_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(void *)(result + 8) = a2[1];
    *(unsigned char *)(result + 16) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

void *sub_1CD64D9D0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1CD64DA8C(a1, v7);
    uint64_t v9 = 0;
    sub_1CD5AA3D8((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *sub_1CD64DA8C(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD64DB68(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *uint64_t result = v12;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CD64DB68(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(int64x2_t **)result;
    uint64_t v8 = 24 * v6;
    int64x2_t v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      int64x2_t *v7 = v9;
      int v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)(a2 + 8);
    if ((*(void *)a2 != -4096 || v10 != -4096) && (*(void *)a2 != -8192 || v10 != -8192))
    {
      int64x2_t v12 = 0;
      uint64_t result = sub_1CD5AA3D8((uint64_t *)v5, (void *)a2, &v12);
      uint64_t v11 = v12;
      void *v12 = *(void *)a2;
      v11[1] = *(void *)(a2 + 8);
      *((unsigned char *)v11 + 16) = *(unsigned char *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1CD64DC44(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  uint64_t v14 = &llvm::AAFunctionReachability::ID;
  long long v15 = v9;
  size_t v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD64DD90(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAFunctionReachability::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

unint64_t sub_1CD64DE00(llvm::IRPosition *this, int a2)
{
  if (a2)
  {
    uint64_t AssociatedArgument = llvm::IRPosition::getAssociatedArgument(this);
    if (AssociatedArgument) {
      return *(unsigned int *)(AssociatedArgument + 32);
    }
  }
  int v5 = sub_1CD647DEC(this);
  if (v5 == 7) {
    return ((*(void *)this & 0xFFFFFFFFFFFFFFFCLL)
  }
          - (*(void *)((*(void *)this & 0xFFFFFFFFFFFFFFFCLL) + 24)
           + 32 * -(*(_DWORD *)(*(void *)((*(void *)this & 0xFFFFFFFFFFFFFFFCLL) + 24) + 20) & 0x7FFFFFF))) >> 5;
  if (v5 == 6) {
    return *(unsigned int *)((*(void *)this & 0xFFFFFFFFFFFFFFFCLL) + 32);
  }
  return 0xFFFFFFFFLL;
}

BOOL sub_1CD64DE8C(uint64_t *a1, unint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a1;
  int v4 = v2 - 1;
  unsigned int v5 = v4 & ((a2 >> 9) ^ (a2 | 4));
  uint64_t v6 = *(void *)(*a1 + 8 * v5);
  if ((a2 | 4) == v6) {
    return 1;
  }
  unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFFBLL;
  int v9 = 1;
  BOOL result = 1;
  while (v6 != -4)
  {
    unsigned int v14 = v5 + v9++;
    unsigned int v5 = v14 & v4;
    uint64_t v6 = *(void *)(v3 + 8 * v5);
    if ((a2 | 4) == v6) {
      return result;
    }
  }
  unsigned int v10 = v4 & ((a2 >> 9) ^ v8);
  uint64_t v11 = *(void *)(v3 + 8 * v10);
  if (v8 == v11) {
    return 1;
  }
  int v12 = 1;
  do
  {
    BOOL result = v11 != -4;
    if (v11 == -4) {
      break;
    }
    unsigned int v13 = v10 + v12++;
    unsigned int v10 = v13 & v4;
    uint64_t v11 = *(void *)(v3 + 8 * v10);
  }
  while (v8 != v11);
  return result;
}

void *sub_1CD64DF38(void *a1)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    MEMORY[0x1D25D9CD0](a1[1], 8);
  }
  return a1;
}

void *sub_1CD64DF74(void *result)
{
  if (*(unsigned char *)result)
  {
    uint64_t v9 = 4;
    uint64_t v10 = 0;
    uint64_t v11 = -4096;
    uint64_t v6 = 4;
    uint64_t v7 = 0;
    int v2 = result + 1;
    uint64_t v1 = 8;
    uint64_t v8 = -8192;
  }
  else
  {
    uint64_t v1 = *((unsigned int *)result + 4);
    if (!v1) {
      return result;
    }
    uint64_t v9 = 4;
    uint64_t v10 = 0;
    uint64_t v11 = -4096;
    uint64_t v6 = 4;
    uint64_t v7 = 0;
    uint64_t v8 = -8192;
    int v2 = (void *)result[1];
  }
  uint64_t v3 = 24 * v1;
  do
  {
    uint64_t v4 = v2[2];
    if (v4 != -8192 && v4 != -4096 && v4 != 0) {
      BOOL result = llvm::ValueHandleBase::RemoveFromUseList(v2);
    }
    v2 += 3;
    v3 -= 24;
  }
  while (v3);
  return result;
}

void *sub_1CD64E064(void *a1)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    MEMORY[0x1D25D9CD0](a1[1], 8);
  }
  return a1;
}

void *sub_1CD64E0A0(void *result)
{
  if (*(unsigned char *)result)
  {
    uint64_t v9 = 4;
    uint64_t v10 = 0;
    uint64_t v11 = -4096;
    uint64_t v6 = 4;
    uint64_t v7 = 0;
    int v2 = result + 1;
    uint64_t v1 = 16;
    uint64_t v8 = -8192;
  }
  else
  {
    uint64_t v1 = *((unsigned int *)result + 4);
    if (!v1) {
      return result;
    }
    uint64_t v9 = 4;
    uint64_t v10 = 0;
    uint64_t v11 = -4096;
    uint64_t v6 = 4;
    uint64_t v7 = 0;
    uint64_t v8 = -8192;
    int v2 = (void *)result[1];
  }
  uint64_t v3 = 24 * v1;
  do
  {
    uint64_t v4 = v2[2];
    if (v4 != -8192 && v4 != -4096 && v4 != 0) {
      BOOL result = llvm::ValueHandleBase::RemoveFromUseList(v2);
    }
    v2 += 3;
    v3 -= 24;
  }
  while (v3);
  return result;
}

void *sub_1CD64E190(void *a1)
{
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);
  return a1;
}

void sub_1CD64E1D4(void *a1)
{
  *a1 = &unk_1F2620AA0;
  sub_1CD64E248(a1 + 1);

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *sub_1CD64E238(int a1, llvm::raw_ostream *a2)
{
  return sub_1CB8E509C(a2, "AADepNode Impl\n");
}

uint64_t *sub_1CD64E248(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((*a1 & 2) != 0)
  {
    uint64_t v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v2 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      if (*v3 != v3 + 2) {
        free(*v3);
      }
      MEMORY[0x1D25D9CE0](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

uint64_t sub_1CD64E2A8(uint64_t *a1, _DWORD *a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    uint64_t v3 = *a1;
    unsigned int v4 = v2 - 1;
    uint64_t v5 = (37 * *a2) & (v2 - 1);
    int v6 = *(_DWORD *)(*a1 + 16 * ((37 * *a2) & v4));
    if (*a2 == v6) {
      return *(void *)(v3 + 16 * v5 + 8);
    }
    int v8 = 1;
    while (v6 != -1)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & v4;
      int v6 = *(_DWORD *)(v3 + 16 * v5);
      if (*a2 == v6) {
        return *(void *)(v3 + 16 * v5 + 8);
      }
    }
  }
  return 0;
}

unint64_t sub_1CD64E318(void *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_1CD64E324(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1CC87E83C(a1, a2);
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = 32;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  if ((uint64_t *)(v4 + 16 * v5) == v3) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 520) + 24 * *((unsigned int *)v3 + 2) + 8);
  }
}

uint64_t sub_1CD64E38C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v8 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = v4 - 1;
  unsigned int v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
  uint64_t v8 = v3 + 24 * v7;
  uint64_t v9 = *(void *)(v8 + 16);
  if (v5 == v9)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v11 = 0;
    int v12 = 1;
    uint64_t result = 1;
    while (v9 != -4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v9 == -8192;
      }
      if (v13) {
        uint64_t v11 = v8;
      }
      unsigned int v14 = v7 + v12++;
      unsigned int v7 = v14 & v6;
      uint64_t v8 = v3 + 24 * (v14 & v6);
      uint64_t v9 = *(void *)(v8 + 16);
      if (v5 == v9) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v11) {
      uint64_t v8 = v11;
    }
  }
LABEL_7:
  *a3 = v8;
  return result;
}

void sub_1CD64E444()
{
}

uint64_t sub_1CD64E458(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 8) + 80) + 24);
}

uint64_t sub_1CD64E468(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 8) + 80) + 32);
}

uint64_t sub_1CD64E478(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *__src, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = *(void *)(a3 + 24);
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)(a1 + 32) = 0x800000000;
  sub_1CB935BDC((unsigned int *)(a1 + 24), __src, &__src[8 * a5]);
  uint64_t v10 = *(void *)(a6 + 24);
  if (v10)
  {
    if (v10 == a6)
    {
      *(void *)(a1 + 128) = a1 + 104;
      (*(void (**)(void))(**(void **)(a6 + 24) + 24))(*(void *)(a6 + 24));
    }
    else
    {
      *(void *)(a1 + 128) = v10;
      *(void *)(a6 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v11 = *(void *)(a7 + 24);
  if (v11)
  {
    if (v11 == a7)
    {
      *(void *)(a1 + 160) = a1 + 136;
      (*(void (**)(void))(**(void **)(a7 + 24) + 24))(*(void *)(a7 + 24));
    }
    else
    {
      *(void *)(a1 + 160) = v11;
      *(void *)(a7 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 160) = 0;
  }
  return a1;
}

uint64_t sub_1CD64E580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a2 + 272;
  *(void *)(a1 + 128) = a4;
  v16[0] = &unk_1F26207F8;
  v16[1] = a3;
  long long v17 = v16;
  v14[0] = &unk_1F2620840;
  v14[1] = a3;
  long long v15 = v14;
  v12[0] = &unk_1F2620888;
  v12[1] = a3;
  BOOL v13 = v12;
  sub_1CC0CAA54(a1 + 136, 1, 1, 1, (uint64_t)v16, (uint64_t)v14, (uint64_t)v12);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void))(*v17 + 40))();
  }
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 440) = a3;
  *(void *)(a1 + 448) = a1 + 480;
  *(void *)(a1 + 456) = a1 + 480;
  *(void *)(a1 + 464) = 8;
  *(_DWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 560) = 0;
  __int16 v11 = 260;
  v10[0] = a2 + 216;
  llvm::Triple::Triple((llvm::Triple *)(a1 + 568), (const llvm::Twine *)v10);
  if (a5) {
    sub_1CD64E844((llvm::SmallPtrSetImplBase *)a1, a5);
  }
  return a1;
}

void sub_1CD64E844(llvm::SmallPtrSetImplBase *this, uint64_t a2)
{
  v31[16] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(char **)(a2 + 24);
  int v4 = *(char **)(a2 + 32);
  if (v5 == v4)
  {
    int v6 = *(char **)(a2 + 24);
  }
  else
  {
    do
    {
      uint64_t v7 = *(void *)v5;
      v5 += 8;
      sub_1CB89694C(this, v7);
    }
    while (v5 != v4);
    int v6 = *(char **)(a2 + 24);
    uint64_t v5 = *(char **)(a2 + 32);
  }
  uint64_t v24 = v28;
  BOOL v25 = v28;
  uint64_t v26 = 16;
  int v27 = 0;
  long long v29 = v31;
  uint64_t v30 = 0x1000000000;
  sub_1CD4570C8((uint64_t)&v29, v6, v5);
  for (unsigned int i = v30; v30; unsigned int i = v30)
  {
    uint64_t v9 = *((void *)v29 + i - 1);
    LODWORD(v30) = i - 1;
    sub_1CB89694C(this, v9);
    uint64_t v10 = v9 + 72;
    for (uint64_t j = *(void *)(v9 + 80); j != v10; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v12 = j - 24;
      if (!j) {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(void *)(v12 + 48);
      if (v13 != v12 + 40)
      {
        while (1)
        {
          uint64_t v16 = v13 - 24;
          if (!v13) {
            uint64_t v16 = 0;
          }
          unsigned int v17 = *(unsigned __int8 *)(v16 + 16) - 33;
          BOOL v18 = v17 > 0x33;
          uint64_t v19 = (1 << v17) & 0x8000000000041;
          if (!v18 && v19 != 0)
          {
            uint64_t v21 = *(void *)(v13 - 56);
            if (v21)
            {
              if (!*(unsigned char *)(v21 + 16) && *(void *)(v21 + 24) == *(void *)(v13 + 48))
              {
                sub_1CB89694C((llvm::SmallPtrSetImplBase *)&v24, *(void *)(v13 - 56));
                if (v15)
                {
                  if (v30 >= (unint64_t)HIDWORD(v30)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v29 + v30) = v21;
                  LODWORD(v30) = v30 + 1;
                }
              }
            }
          }
          uint64_t v13 = *(void *)(v13 + 8);
          uint64_t v22 = j - 24;
          if (!j) {
            uint64_t v22 = 0;
          }
          if (v13 == v22 + 40) {
            break;
          }
LABEL_32:
          if (j == v10) {
            goto LABEL_33;
          }
        }
        while (1)
        {
          uint64_t j = *(void *)(j + 8);
          if (j == v10) {
            goto LABEL_33;
          }
          uint64_t v14 = j - 24;
          if (!j) {
            uint64_t v14 = 0;
          }
          uint64_t v13 = *(void *)(v14 + 48);
          if (v13 != v14 + 40) {
            goto LABEL_32;
          }
        }
      }
    }
LABEL_33:
    ;
  }
  sub_1CBFF3560((llvm::SmallPtrSetImplBase *)&v24);
  sub_1CD4570C8((uint64_t)&v29, *(char **)(a2 + 24), *(char **)(a2 + 32));
  while (v30)
  {
    uint64_t v23 = *((void *)v29 + v30 - 1);
    LODWORD(v30) = v30 - 1;
    sub_1CB89694C(this, v23);
    sub_1CD64ED74(v23, (llvm::SmallPtrSetImplBase *)&v24, (llvm::SmallPtrSetImplBase *)&v29, 1);
  }
  if (v29 != v31) {
    free(v29);
  }
  if (v25 != v24) {
    free(v25);
  }
}

void sub_1CD64EAFC()
{
}

void *sub_1CD64EB10(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F26207F8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD64EB58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26207F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD64EB84(uint64_t a1, uint64_t a2)
{
  if (**(void **)(a1 + 8)) {
    BOOL v2 = *(void *)(a2 + 40) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
  return 0;
}

void sub_1CD64EBD0()
{
}

void *sub_1CD64EBE4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2620840;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD64EC2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2620840;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD64EC58(uint64_t a1, uint64_t a2)
{
  if (**(void **)(a1 + 8)) {
    BOOL v2 = *(void *)(a2 + 40) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
  return 0;
}

void sub_1CD64ECA4()
{
}

void *sub_1CD64ECB8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2620888;
  result[1] = v3;
  return result;
}

uint64_t sub_1CD64ED00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2620888;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CD64ED2C(uint64_t a1, uint64_t a2)
{
  if (**(void **)(a1 + 8)) {
    BOOL v2 = *(void *)(a2 + 40) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
  return 0;
}

void sub_1CD64ED74(uint64_t a1, llvm::SmallPtrSetImplBase *a2, llvm::SmallPtrSetImplBase *a3, int a4)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  v11[0] = a2;
  v11[1] = a3;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v12 = v14;
  uint64_t v13 = 0x800000000;
  sub_1CD64EEA0((uint64_t)&v12, v5, (uint64_t)a3, 0);
  unsigned int v6 = v13;
  if (v13)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *((void *)v12 + v7);
      if (a4 && (uint64_t v9 = *(void *)(v8 + 24), *(unsigned char *)(v9 + 16) == 5))
      {
        for (uint64_t i = *(void *)(v9 + 8); i; uint64_t i = *(void *)(i + 8))
        {
          if (v6 >= HIDWORD(v13)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v12 + v6) = i;
          unsigned int v6 = v13 + 1;
          LODWORD(v13) = v13 + 1;
        }
      }
      else
      {
        sub_1CC8B4388(v11, v8);
        unsigned int v6 = v13;
      }
      ++v7;
    }
    while (v7 < v6);
  }
  if (v12 != v14) {
    free(v12);
  }
}

uint64_t sub_1CD64EEA0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if (a2 == a4)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2;
    do
    {
      ++v5;
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != a4);
  }
  uint64_t v7 = *(unsigned int *)(result + 8);
  if (v5 + v7 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a4)
  {
    uint64_t v8 = (void *)(*(void *)result + 8 * v7);
    do
    {
      *v8++ = v4;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != a4);
  }
  *(_DWORD *)(result + 8) = v7 + v5;
  return result;
}

BOOL sub_1CD64EF44(uint64_t a1, llvm::GlobalValue *this)
{
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_8;
    }
  }
  else if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72) {
         && (*((unsigned char *)this + 34) & 0x80) == 0)
  }
  {
    goto LABEL_8;
  }
  if (((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x7D5) != 0 && (llvm::GlobalValue::isInterposable(this) & 1) == 0) {
    return 1;
  }
LABEL_8:
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = sub_1CB896AE8(v4 + 448, (uint64_t)this);
  uint64_t v6 = *(void *)(v4 + 456);
  uint64_t v7 = 464;
  if (v6 == *(void *)(v4 + 448)) {
    uint64_t v7 = 468;
  }
  return v5 != (void *)(v6 + 8 * *(unsigned int *)(v4 + v7));
}

uint64_t sub_1CD64F008(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = (int64x2_t *)(a1 + 4632);
  uint64_t v7 = *(void *)(a3 + 128);
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a3;
  *(void *)(a1 + 96) = &unk_1F2620AA0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 1;
  int64x2_t v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 120) = v8;
  *(int64x2_t *)(a1 + 136) = v8;
  *(int64x2_t *)(a1 + 152) = v8;
  *(int64x2_t *)(a1 + 168) = v8;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x800000000;
  *(void *)(a1 + 264) = a1 + 280;
  *(void *)(a1 + 272) = 0x1000000000;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  uint64_t v9 = 440;
  *(void *)(a1 + 432) = 1;
  do
  {
    *(void *)(a1 + v9) = -4096;
    v9 += 16;
  }
  while (v9 != 952);
  *(void *)(a1 + 952) = a1 + 968;
  *(void *)(a1 + 960) = 0x2000000000;
  *(void *)(a1 + 1480) = 1;
  for (uint64_t i = 1488; i != 2000; i += 16)
    *(void *)(a1 + i) = -4096;
  *(void *)(a1 + 2000) = a1 + 2016;
  *(void *)(a1 + 2008) = 0x2000000000;
  *(_DWORD *)(a1 + 2784) |= 1u;
  sub_1CD64F274((int *)(a1 + 2784));
  *(void *)(a1 + 3176) = a1 + 3192;
  *(void *)(a1 + 3184) = 0x1000000000;
  *(_DWORD *)(a1 + 3576) |= 1u;
  sub_1CD64F274((int *)(a1 + 3576));
  *(void *)(a1 + 3968) = a1 + 3984;
  *(void *)(a1 + 3976) = 0x1000000000;
  *(void *)(a1 + 4368) = 0;
  *(void *)(a1 + 4376) = a1 + 4408;
  *(void *)(a1 + 4384) = a1 + 4408;
  *(void *)(a1 + 4392) = 8;
  *(_DWORD *)(a1 + 4400) = 0;
  *(void *)(a1 + 4472) = 1;
  int64x2_t v16 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 4480) = v16;
  *(int64x2_t *)(a1 + 4496) = v16;
  *(int64x2_t *)(a1 + 4512) = v16;
  *(int64x2_t *)(a1 + 4528) = v16;
  *(void *)(a1 + 4544) = a1 + 4560;
  *(void *)(a1 + 4552) = 0x800000000;
  *(void *)(a1 + 4624) = 1;
  *uint64_t v6 = v16;
  v6[1] = v16;
  void v6[2] = v16;
  _OWORD v6[3] = v16;
  *(void *)(a1 + 4696) = a1 + 4712;
  *(void *)(a1 + 4704) = 0x800000000;
  *(_DWORD *)(a1 + 4776) |= 1u;
  sub_1CD64F2C4((int *)(a1 + 4776));
  uint64_t v11 = 0;
  *(void *)(a1 + 4976) = a1 + 4992;
  *(void *)(a1 + 4984) = 0x800000000;
  *(void *)(a1 + 5184) = 1;
  do
  {
    *(int64x2_t *)(a1 + 5192 + v11) = v16;
    v11 += 16;
  }
  while (v11 != 128);
  *(void *)(a1 + 5320) = a1 + 5336;
  *(void *)(a1 + 5328) = 0x1000000000;
  long long v12 = *a4;
  long long v13 = a4[1];
  long long v14 = a4[2];
  *(void *)(a1 + 5512) = *((void *)a4 + 6);
  *(_OWORD *)(a1 + 5480) = v13;
  *(_OWORD *)(a1 + 5496) = v14;
  *(_OWORD *)(a1 + 5464) = v12;
  return a1;
}

int *sub_1CD64F274(int *result)
{
  int v1 = *result;
  *(void *)uint64_t result = *result & 1;
  if (v1)
  {
    uint64_t v3 = result + 2;
    uint64_t v4 = result + 98;
  }
  else
  {
    unsigned int v2 = result[4];
    if (!v2) {
      return result;
    }
    uint64_t v3 = (void *)*((void *)result + 1);
    uint64_t v4 = &v3[3 * v2];
  }
  do
  {
    void *v3 = 4;
    v3[1] = 0;
    void v3[2] = -4096;
    v3 += 3;
  }
  while (v3 != v4);
  return result;
}

int *sub_1CD64F2C4(int *result)
{
  int v1 = *result;
  *(void *)uint64_t result = *result & 1;
  if (v1)
  {
    uint64_t v3 = result + 2;
    uint64_t v4 = result + 50;
  }
  else
  {
    unsigned int v2 = result[4];
    if (!v2) {
      return result;
    }
    uint64_t v3 = (void *)*((void *)result + 1);
    uint64_t v4 = &v3[3 * v2];
  }
  do
  {
    void *v3 = 4;
    v3[1] = 0;
    void v3[2] = -4096;
    v3 += 3;
  }
  while (v3 != v4);
  return result;
}

void *sub_1CD64F314(void *a1, unsigned int a2)
{
  if (a2 <= 0x10)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v3 = a2;
    uint64_t result = operator new(8 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    int v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = &result[v3];
      goto LABEL_6;
    }
  }
  uint64_t result = a1 + 1;
  uint64_t v6 = a1 + 17;
  do
LABEL_6:
    *result++ = -4096;
  while (result != v6);
  return result;
}

uint64_t sub_1CD64F398(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(unsigned int *)(a1 + 112);
  uint64_t v4 = v2 + 16 * v3;
  if (*(_DWORD *)(a1 + 104))
  {
    if (v3)
    {
      uint64_t v11 = 16 * v3;
      uint64_t v5 = *(void *)(a1 + 96);
      while ((*(void *)v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 16;
        v11 -= 16;
        if (!v11) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 96);
    }
  }
  else
  {
LABEL_2:
    uint64_t v5 = v2 + 16 * v3;
  }
  uint64_t v6 = v2 + 16 * v3;
LABEL_4:
  while (v5 != v6)
  {
    llvm::InformationCache::FunctionInfo::~FunctionInfo(*(llvm::InformationCache::FunctionInfo **)(v5 + 8));
    uint64_t v7 = v5 + 16;
    uint64_t v5 = v4;
    if (v7 != v4)
    {
      uint64_t v5 = v7;
      while ((*(void *)v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 16;
        if (v5 == v4)
        {
          uint64_t v5 = v4;
          goto LABEL_4;
        }
      }
    }
  }
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 544), 8);
  int64x2_t v8 = *(void **)(a1 + 456);
  if (v8 != *(void **)(a1 + 448)) {
    free(v8);
  }
  sub_1CD456CB4((void *)(a1 + 392));
  sub_1CD64F4C8(a1 + 368);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 368), 8);
  sub_1CD4B2960(a1 + 136);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 96), 8);
  uint64_t v9 = *(void **)(a1 + 8);
  if (v9 != *(void **)a1) {
    free(v9);
  }
  return a1;
}

uint64_t sub_1CD64F4C8(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result + 40 * v1;
    uint64_t v3 = (void *)(*(void *)result + 16);
    do
    {
      uint64_t v5 = v3 - 2;
      uint64_t v4 = *(v3 - 2);
      int v6 = *((_DWORD *)v3 - 2);
      if ((v4 != -4096 || v6 != 82) && (v4 != -8192 || v6 != 83)) {
        uint64_t result = MEMORY[0x1D25D9CD0](*v3, 8);
      }
      v3 += 5;
    }
    while (v5 + 5 != (void *)v2);
  }
  return result;
}

llvm::CallGraphUpdater *sub_1CD64F554(llvm::CallGraphUpdater *a1)
{
  llvm::CallGraphUpdater::finalize(a1);
  uint64_t v2 = (void *)*((void *)a1 + 38);
  if (v2 != (void *)((char *)a1 + 320)) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)a1 + 20);
  if (v3 != (void *)((char *)a1 + 176)) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)a1 + 1);
  if (v4 != *(void **)a1) {
    free(v4);
  }
  return a1;
}

char **sub_1CD64F5B4(char **result)
{
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    long long v2 = llvm::IRPosition::EmptyKey;
    long long v3 = llvm::IRPosition::TombstoneKey;
    uint64_t v4 = &(*result)[64 * v1];
    uint64_t result = (char **)(*result + 16);
    do
    {
      uint64_t v5 = (uint64_t)*(result - 2);
      uint64_t v6 = (uint64_t)*(result - 1);
      uint64_t v7 = result - 2;
      if ((v5 != (void)v2 || v6 != *((void *)&v2 + 1)) && (v5 != (void)v3 || v6 != *((void *)&v3 + 1))) {
        uint64_t result = sub_1CD650EAC(result);
      }
      result += 8;
    }
    while (v7 + 8 != (char **)v4);
  }
  return result;
}

uint64_t *sub_1CD64F648(uint64_t *a1)
{
  unsigned int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 88 * v2;
    uint64_t v5 = (char **)(v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        uint64_t v5 = sub_1CD64F6B8(v5);
      }
      v5 += 11;
      v4 -= 88;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

char **sub_1CD64F6B8(char **a1)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void **)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6)
      {
        uint64_t v7 = sub_1CD651E58(v6);
        MEMORY[0x1D25D9CE0](v7, 0x10E0C40D6C35413);
      }
      v4 -= 8;
    }
    while (v4);
    unsigned int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

unint64_t sub_1CD64F740@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  long long v14 = 0;
  unint64_t result = sub_1CD64F808(a1, (uint64_t)a2, &v14);
  uint64_t v7 = v14;
  if (result)
  {
    uint64_t v8 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      unsigned int v9 = 16;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8);
      unsigned int v9 = *(_DWORD *)(a1 + 16);
    }
    char v10 = 0;
    uint64_t v11 = v8 + 24 * v9;
  }
  else
  {
    uint64_t v7 = (unint64_t *)sub_1CD64F8C0((_DWORD *)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)v14);
    unint64_t result = sub_1CBF62D84(v7, a2);
    uint64_t v12 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      unsigned int v13 = 16;
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8);
      unsigned int v13 = *(_DWORD *)(a1 + 16);
    }
    uint64_t v11 = v12 + 24 * v13;
    char v10 = 1;
  }
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_1CD64F808(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v8 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = v4 - 1;
  unsigned int v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
  uint64_t v8 = v3 + 24 * v7;
  uint64_t v9 = *(void *)(v8 + 16);
  if (v5 == v9)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v11 = 0;
    int v12 = 1;
    uint64_t result = 1;
    while (v9 != -4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v9 == -8192;
      }
      if (v13) {
        uint64_t v11 = v8;
      }
      unsigned int v14 = v7 + v12++;
      unsigned int v7 = v14 & v6;
      uint64_t v8 = v3 + 24 * (v14 & v6);
      uint64_t v9 = *(void *)(v8 + 16);
      if (v5 == v9) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v11) {
      uint64_t v8 = v11;
    }
  }
LABEL_7:
  *a3 = v8;
  return result;
}

uint64_t sub_1CD64F8C0(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 16;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD64F980((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CD64F808((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*(void *)(a4 + 16) != -4096) {
    --a1[1];
  }
  return a4;
}

void *sub_1CD64F980(uint64_t a1, unsigned int a2)
{
  v24[48] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
  int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
  if ((v5 + 1) > 0x40) {
    unsigned int v6 = v5 + 1;
  }
  else {
    unsigned int v6 = 64;
  }
  if (a2 >= 0x11) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = a2;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v8 = *(uint64_t **)(a1 + 8);
    unsigned int v9 = *(_DWORD *)(a1 + 16);
    if (v7 > 0x10)
    {
      *(void *)(a1 + 8) = operator new(24 * v7, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD64FBF4((int *)a1, v8, &v8[3 * v9]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v10 = 0;
  v22[0] = 4;
  v22[1] = 0;
  uint64_t v23 = -4096;
  v20[0] = 4;
  v20[1] = 0;
  uint64_t v11 = v24;
  uint64_t v21 = -8192;
  do
  {
    int v12 = (void *)(a1 + v10 + 8);
    uint64_t v13 = *(void *)(a1 + v10 + 24);
    if (v13 != v23 && v13 != v21)
    {
      uint64_t *v11 = 4;
      v11[1] = 0;
      void v11[2] = v13;
      if (v13 != -8192 && v13 != -4096 && v13 != 0)
      {
        unint64_t v16 = *v12 & 0xFFFFFFFFFFFFFFF8;
        v11[1] = *(void *)v16;
        *(void *)unint64_t v16 = v11;
        uint64_t *v11 = v16 | 4;
        unsigned int v17 = (unint64_t *)v11[1];
        if (v17) {
          *unsigned int v17 = *v17 & 7 | (unint64_t)(v11 + 1);
        }
      }
      v11 += 3;
      uint64_t v13 = *(void *)(a1 + v10 + 24);
    }
    if (v13 != -8192 && v13 != -4096 && v13 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(v12);
    }
    v10 += 24;
  }
  while (v10 != 384);
  if (v7 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(24 * v7, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v7;
  }
  uint64_t result = (void *)sub_1CD64FBF4((int *)a1, v24, v11);
  if (v21 != -8192 && v21 != -4096 && v21) {
    uint64_t result = llvm::ValueHandleBase::RemoveFromUseList(v20);
  }
  if (v23 != -8192 && v23 != -4096 && v23) {
    return llvm::ValueHandleBase::RemoveFromUseList(v22);
  }
  return result;
}

unint64_t sub_1CD64FBF4(int *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t result = (unint64_t)sub_1CD64F274(a1);
  while (a2 != a3)
  {
    uint64_t v7 = a2[2];
    if ((v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v9 = 0;
      sub_1CD64F808((uint64_t)a1, (uint64_t)a2, &v9);
      unint64_t result = sub_1CBF62D84(v9, a2);
      *a1 += 2;
      uint64_t v7 = a2[2];
    }
    if (v7 != -8192 && v7 != -4096 && v7 != 0) {
      unint64_t result = (unint64_t)llvm::ValueHandleBase::RemoveFromUseList(a2);
    }
    a2 += 3;
  }
  return result;
}

uint64_t sub_1CD64FCA0(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(void **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CD64FE1C(a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = v14;
  for (uint64_t i = 8; i != 72; i += 8)
  {
    uint64_t v10 = *(void *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v8++ = v10;
    }
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CD64FE1C(a1, v14, v8);
}

uint64_t sub_1CD64FE1C(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)unint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    unsigned int v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    unsigned int v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      unint64_t result = sub_1CC8B4C28((uint64_t)v5, a2, &v10);
      void *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1CD64FEDC(_WORD *a1, long long *a2, _DWORD **a3, int **a4)
{
  sub_1CB883A14((uint64_t)&qword_1EBCDD838, 0, 0);
  byte_1EBCDD8CC = 0;
  qword_1EBCDD8B8 = 0;
  unk_1EBCDD8C0 = &unk_1F25EA1B0;
  qword_1EBCDD838 = (uint64_t)&unk_1F26050E8;
  qword_1EBCDD8D0 = (uint64_t)&unk_1F2643DB0;
  qword_1EBCDD8D8 = (uint64_t)&unk_1F2605150;
  qword_1EBCDD8F0 = (uint64_t)&qword_1EBCDD8D8;
  sub_1CD64FFDC(a1, a2, a3, a4);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDD838);
}

uint64_t sub_1CD64FFDC(_WORD *a1, long long *a2, _DWORD **a3, int **a4)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBCDD838, "attributor-max-initialization-chain-length", 0x2AuLL);
  word_1EBCDD842 = (32 * (*a1 & 3)) | word_1EBCDD842 & 0xFF9F;
  xmmword_1EBCDD858 = *a2;
  uint64_t result = sub_1CC0777B8((uint64_t)&qword_1EBCDD8B8, &qword_1EBCDD838, *a3);
  int v9 = **a4;
  *(_DWORD *)qword_1EBCDD8B8 = v9;
  byte_1EBCDD8CC = 1;
  dword_1EBCDD8C8 = v9;
  return result;
}

void sub_1CD650080(char **a1, _WORD *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCDDA78, 0, 0);
  byte_1EBCDDAF8 = 0;
  qword_1EBCDDB00 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBCDDB08 = 0;
  qword_1EBCDDA78 = (uint64_t)&unk_1F26440A0;
  qword_1EBCDDB10 = (uint64_t)&unk_1F2643CC0;
  qword_1EBCDDB18 = (uint64_t)&unk_1F25EDE78;
  qword_1EBCDDB30 = (uint64_t)&qword_1EBCDDB18;
  llvm::cl::Option::setArgStr(v4, "enable-heap-to-stack-conversion", 0x1FuLL);
  int v5 = *a1;
  byte_1EBCDDAF8 = **a1;
  byte_1EBCDDB09 = 1;
  byte_1EBCDDB08 = *v5;
  word_1EBCDDA82 = (32 * (*a2 & 3)) | word_1EBCDDA82 & 0xFF9F;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDDA78);
}

void sub_1CD6501A0(_WORD *a1, long long *a2)
{
  uint64_t v4 = sub_1CB883A14((uint64_t)&qword_1EBCDDD78, 0, 0);
  qword_1EBCDDDF8 = 0;
  qword_1EBCDDE00 = 0;
  qword_1EBCDDE20 = 0;
  unk_1EBCDDE28 = 0;
  byte_1EBCDDE30 = 0;
  qword_1EBCDDE18 = 0;
  unk_1EBCDDE08 = 0;
  unk_1EBCDDE10 = &unk_1F2643C20;
  qword_1EBCDDD78 = (uint64_t)&unk_1F2643FD0;
  qword_1EBCDDE38 = (uint64_t)&unk_1F2643EA0;
  qword_1EBCDDE40 = (uint64_t)&unk_1F25F6428;
  qword_1EBCDDE58 = (uint64_t)&qword_1EBCDDE40;
  llvm::cl::Option::setArgStr(v4, "attributor-depgraph-dot-filename-prefix", 0x27uLL);
  word_1EBCDDD82 = (32 * (*a1 & 3)) | word_1EBCDDD82 & 0xFF9F;
  xmmword_1EBCDDD98 = *a2;

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCDDD78);
}

void sub_1CD6502B8(_WORD *a1, __n128 *a2, char **a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBD07720, 0, 0);
  byte_1EBD077A0 = 0;
  qword_1EBD077A8 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBD077B0 = 0;
  qword_1EBD07720 = (uint64_t)&unk_1F26440A0;
  qword_1EBD077B8 = (uint64_t)&unk_1F2643CC0;
  qword_1EBD077C0 = (uint64_t)&unk_1F25EDE78;
  qword_1EBD077D8 = (uint64_t)&qword_1EBD077C0;
  sub_1CD6503A8(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBD07720);
}

__n128 sub_1CD6503A8(_WORD *a1, __n128 *a2, char **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBD07720, "attributor-print-dep", 0x14uLL);
  word_1EBD0772A = (32 * (*a1 & 3)) | word_1EBD0772A & 0xFF9F;
  __n128 result = *a2;
  xmmword_1EBD07740 = (__int128)*a2;
  uint64_t v7 = *a3;
  byte_1EBD077A0 = **a3;
  byte_1EBD077B1 = 1;
  byte_1EBD077B0 = *v7;
  return result;
}

void sub_1CD650430(_WORD *a1, __n128 *a2, char **a3)
{
  sub_1CB883A14((uint64_t)&qword_1EBD077E0, 0, 0);
  byte_1EBD07860 = 0;
  qword_1EBD07868 = (uint64_t)&unk_1F25EDE58;
  *(void *)&byte_1EBD07870 = 0;
  qword_1EBD077E0 = (uint64_t)&unk_1F26440A0;
  qword_1EBD07878 = (uint64_t)&unk_1F2643CC0;
  qword_1EBD07880 = (uint64_t)&unk_1F25EDE78;
  qword_1EBD07898 = (uint64_t)&qword_1EBD07880;
  sub_1CD650520(a1, a2, a3);

  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBD077E0);
}

__n128 sub_1CD650520(_WORD *a1, __n128 *a2, char **a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1EBD077E0, "attributor-enable-call-site-specific-deduction", 0x2EuLL);
  word_1EBD077EA = (32 * (*a1 & 3)) | word_1EBD077EA & 0xFF9F;
  __n128 result = *a2;
  xmmword_1EBD07800 = (__int128)*a2;
  uint64_t v7 = *a3;
  byte_1EBD07860 = **a3;
  byte_1EBD07871 = 1;
  byte_1EBD07870 = *v7;
  return result;
}

uint64_t sub_1CD6505A8(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  unsigned int v14 = &llvm::AANoSync::ID;
  long long v15 = v9;
  unint64_t v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD6506F4(uint64_t a1, uint64_t a2)
{
  int v5 = &llvm::AANoSync::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD650764(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  unsigned int v14 = &llvm::AAInstanceInfo::ID;
  long long v15 = v9;
  unint64_t v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD6508B0(uint64_t a1, uint64_t a2)
{
  int v5 = &llvm::AAInstanceInfo::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

void *sub_1CD650920(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    long long v6 = a2;
    uint64_t v7 = (uint64_t)result;
    do
    {
      __n128 result = sub_1CC8B5EC4((uint64_t)v9, v7, v6);
      if (v9[16])
      {
        unint64_t v8 = *(unsigned int *)(v7 + 48);
        if (v8 >= *(unsigned int *)(v7 + 52)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 40) + 8 * v8) = *v6;
        ++*(_DWORD *)(v7 + 48);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

void *sub_1CD6509D4(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    long long v6 = a2;
    uint64_t v7 = (uint64_t)result;
    do
    {
      __n128 result = sub_1CD64376C(v7, v6, (uint64_t)v9);
      if (v9[16])
      {
        unint64_t v8 = *(unsigned int *)(v7 + 48);
        if (v8 >= *(unsigned int *)(v7 + 52)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 40) + 8 * v8) = *v6;
        ++*(_DWORD *)(v7 + 48);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

uint64_t sub_1CD650A8C(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  unsigned int v14 = &llvm::AAPointerInfo::ID;
  long long v15 = v9;
  unint64_t v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD650BD8(uint64_t a1, uint64_t a2)
{
  int v5 = &llvm::AAPointerInfo::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD650C48(uint64_t *a1, uint64_t *a2, unint64_t **a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    unsigned int v7 = v3 - 1;
    uint64_t v8 = ((v6 >> 4) ^ (v6 >> 9) ^ (*a2 ^ (*a2 >> 5)) & 0xFFFFFFF0) & (v3 - 1);
    long long v9 = (unint64_t *)(*a1 + (v8 << 6));
    unint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    if (v5 == *v9 && v11 == v6)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      uint64_t result = 1;
      while (__PAIR128__(v11, v10) != llvm::IRPosition::EmptyKey)
      {
        if (v13) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v11 == *((void *)&llvm::IRPosition::TombstoneKey + 1);
        }
        if (v16 && v10 == (void)llvm::IRPosition::TombstoneKey) {
          uint64_t v13 = v9;
        }
        int v18 = v8 + v14++;
        uint64_t v8 = v18 & v7;
        long long v9 = (unint64_t *)(v4 + (v8 << 6));
        unint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        if (v5 == *v9 && v11 == v6) {
          goto LABEL_8;
        }
      }
      uint64_t result = 0;
      if (v13) {
        long long v9 = v13;
      }
    }
  }
  else
  {
    long long v9 = 0;
    uint64_t result = 0;
  }
LABEL_8:
  *a3 = v9;
  return result;
}

void sub_1CD650D18()
{
}

unsigned int *sub_1CD650D88(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)result;
    uint64_t v6 = 32 * v2;
    do
    {
      uint64_t v7 = *(void *)(v5 + 24);
      if (v7)
      {
        if (v5 == v7)
        {
          *(void *)(a2 + 24) = a2;
          uint64_t result = (unsigned int *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 24) + 24))(*(void *)(v5 + 24), a2);
        }
        else
        {
          *(void *)(a2 + 24) = v7;
          *(void *)(v5 + 24) = 0;
        }
      }
      else
      {
        *(void *)(a2 + 24) = 0;
      }
      v5 += 32;
      a2 += 32;
      v6 -= 32;
    }
    while (v6);
    uint64_t v8 = v4[2];
    if (v8)
    {
      uint64_t v9 = *(void *)v4;
      uint64_t v10 = 32 * v8;
      uint64_t v11 = v9 - 32;
      do
      {
        uint64_t result = *(unsigned int **)(v11 + v10 + 24);
        if ((unsigned int *)(v11 + v10) == result)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)(v11 + v10) + 32))(v11 + v10);
        }
        else if (result)
        {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 40))(result);
        }
        v10 -= 32;
      }
      while (v10);
    }
  }
  return result;
}

char **sub_1CD650EAC(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 32 * v3;
    uint64_t v5 = v2 - 32;
    do
    {
      uint64_t v6 = *(char **)&v5[v4 + 24];
      if (&v5[v4] == v6)
      {
        (*(void (**)(char *))(*(void *)&v5[v4] + 32))(&v5[v4]);
      }
      else if (v6)
      {
        (*(void (**)(char *))(*(void *)v6 + 40))(v6);
      }
      v4 -= 32;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD650F6C(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AAValueSimplify::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD6510B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAValueSimplify::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD651128(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAIsDead::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD651198(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = 0;
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      ++v3;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
  }
  uint64_t v5 = *(unsigned int *)(result + 8);
  if (v3 + v5 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    long long v6 = (void *)(*(void *)result + 8 * v5);
    do
    {
      *v6++ = v2;
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  *(_DWORD *)(result + 8) = v5 + v3;
  return result;
}

uint64_t sub_1CD651220(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AAReturnedValues::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD65136C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAReturnedValues::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

void *sub_1CD6513DC(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      uint64_t v3 = result + 1;
      uint64_t v4 = result + 17;
    }
    else
    {
      uint64_t v2 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41) {
        return sub_1CD651454(result);
      }
      if (!v2)
      {
        int v5 = 0;
LABEL_11:
        *(_DWORD *)uint64_t result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      uint64_t v3 = (void *)result[1];
      uint64_t v4 = &v3[v2];
    }
    do
      *v3++ = -4096;
    while (v3 != v4);
    int v5 = *(_DWORD *)result & 1;
    goto LABEL_11;
  }
  return result;
}

void *sub_1CD651454(void *result)
{
  int v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28) {
    int v4 = 64;
  }
  else {
    int v4 = 1 << (33 - v3);
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    long long v6 = result + 1;
    *uint64_t result = 1;
    uint64_t v7 = result + 17;
    do
LABEL_10:
      *v6++ = -4096;
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 == *((_DWORD *)result + 4))
    {
      *uint64_t result = 0;
      if (!v5) {
        return result;
      }
      long long v6 = (void *)result[1];
      uint64_t v7 = &v6[v5];
      goto LABEL_10;
    }
    MEMORY[0x1D25D9CD0](result[1], 8);
  }

  return sub_1CD64F314(v1, v5);
}

char **sub_1CD651528(char **a1)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    do
    {
      uint64_t v5 = *(void *)&v2[v4 - 8];
      if (v5 != -8192 && v5 != -4096 && v5 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList(&v2[v4 - 24]);
      }
      v4 -= 24;
    }
    while (v4);
    unsigned int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CD6515AC()
{
  return 1;
}

unint64_t *sub_1CD6515B4(uint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  unsigned int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = *a1 + 24 * v6;
  if ((uint64_t *)v7 == a3)
  {
    long long v9 = a2;
  }
  else
  {
    uint64_t v8 = a3;
    long long v9 = a2;
    do
    {
      sub_1CBF62D84(v9, v8);
      v8 += 3;
      v9 += 3;
    }
    while (v8 != (uint64_t *)v7);
    uint64_t v5 = *a1;
    unsigned int v6 = *((_DWORD *)a1 + 2);
  }
  uint64_t v10 = (unint64_t *)(v5 + 24 * v6);
  if (v10 != v9)
  {
    do
    {
      uint64_t v11 = *(v10 - 1);
      v10 -= 3;
      if (v11 != -8192 && v11 != -4096 && v11 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList(v10);
      }
    }
    while (v10 != v9);
    uint64_t v5 = *a1;
  }
  *((_DWORD *)a1 + 2) = -1431655765 * (((unint64_t)v9 - v5) >> 3);
  return a2;
}

llvm::SmallPtrSetImplBase *sub_1CD651690(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t a3)
{
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 32;
  *((void *)this + 2) = 2;
  *((_DWORD *)this + 6) = 0;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      uint64_t v6 = *a2++;
      sub_1CB89694C(this, v6);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

void *sub_1CD6516F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CD513A78(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD651770(a1, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = v5 + 3;
    void v5[2] = 0x800000000;
  }
  return v5;
}

void *sub_1CD651770(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD651824(a1, v6);
  uint64_t v8 = 0;
  sub_1CD513A78(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CD651824(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  char v4 = *(char **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD6518FC((char **)a1, (uint64_t)v4, (uint64_t)&v4[88 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 88 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 11;
      v11 -= 88;
    }
    while (v11);
  }
  return result;
}

char **sub_1CD6518FC(char **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = result;
  result[1] = 0;
  unsigned int v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    int v7 = *result;
    uint64_t v8 = 88 * v6;
    do
    {
      *(void *)int v7 = -4096;
      v7 += 88;
      v8 -= 88;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v12 = 0;
        sub_1CD513A78((uint64_t)*v5, *((_DWORD *)v5 + 4), v9, &v12);
        unsigned int v10 = v12;
        void *v12 = *(void *)v4;
        uint64_t v10[2] = 0x800000000;
        v10[1] = v10 + 3;
        uint64_t v11 = (char **)(v10 + 1);
        if (*(_DWORD *)(v4 + 16)) {
          sub_1CD6519EC(v11, v4 + 8);
        }
        ++*((_DWORD *)v5 + 2);
        uint64_t result = sub_1CD64F6B8((char **)(v4 + 8));
      }
      v4 += 88;
    }
    while (v4 != a3);
  }
  return result;
}

char **sub_1CD6519EC(char **a1, uint64_t a2)
{
  if (a1 != (char **)a2)
  {
    unint64_t v5 = *(char **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *((unsigned int *)a1 + 2);
      if (v7 >= v6)
      {
        uint64_t v13 = *a1;
        if (v6)
        {
          int v14 = (char *)sub_1CC8B708C(v5, &v5[8 * v6], (void **)v13);
          uint64_t v13 = *a1;
          uint64_t v7 = *((unsigned int *)a1 + 2);
        }
        else
        {
          int v14 = *a1;
        }
        long long v15 = &v13[8 * v7];
        while (v15 != v14)
        {
          unsigned int v17 = (void *)*((void *)v15 - 1);
          v15 -= 8;
          BOOL v16 = v17;
          *(void *)long long v15 = 0;
          if (v17)
          {
            int v18 = sub_1CD651E58(v16);
            MEMORY[0x1D25D9CE0](v18, 0x10E0C40D6C35413);
          }
        }
      }
      else
      {
        if (*((_DWORD *)a1 + 3) < v6)
        {
          sub_1CD651BD4((uint64_t)a1);
          sub_1CD651C48();
        }
        if (v7) {
          sub_1CC8B708C(v5, &v5[8 * v7], (void **)*a1);
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t v8 = *(unsigned int *)(a2 + 8);
        if (v7 != v8)
        {
          uint64_t v9 = &(*a1)[8 * v7];
          unsigned int v10 = (uint64_t *)(*(void *)a2 + 8 * v7);
          uint64_t v11 = 8 * v8 - 8 * v7;
          do
          {
            uint64_t v12 = *v10;
            *v10++ = 0;
            *(void *)uint64_t v9 = v12;
            v9 += 8;
            v11 -= 8;
          }
          while (v11);
        }
      }
      *((_DWORD *)a1 + 2) = v6;
      sub_1CD651BD4(a2);
    }
    else
    {
      sub_1CD651B34(a1, (char **)a2);
    }
  }
  return a1;
}

double sub_1CD651B34(char **a1, char **a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    uint64_t v7 = v4 - 8;
    do
    {
      uint64_t v8 = *(void **)&v7[v6];
      *(void *)&v7[v6] = 0;
      if (v8)
      {
        uint64_t v9 = sub_1CD651E58(v8);
        MEMORY[0x1D25D9CE0](v9, 0x10E0C40D6C35413);
      }
      v6 -= 8;
    }
    while (v6);
    uint64_t v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t sub_1CD651BD4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    uint64_t v3 = 8 * v2;
    uint64_t v4 = *(void *)result - 8;
    do
    {
      double result = *(void *)(v4 + v3);
      *(void *)(v4 + v3) = 0;
      if (result)
      {
        uint64_t v5 = sub_1CD651E58((void *)result);
        double result = MEMORY[0x1D25D9CE0](v5, 0x10E0C40D6C35413);
      }
      v3 -= 8;
    }
    while (v3);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

void sub_1CD651C48()
{
}

uint64_t sub_1CD651CB8(uint64_t result, void *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)result;
    uint64_t v4 = 8 * v2;
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v3;
      *v3++ = 0;
      *a2++ = v6;
      v5 -= 8;
    }
    while (v5);
    uint64_t v7 = *(void *)result - 8;
    do
    {
      double result = *(void *)(v7 + v4);
      *(void *)(v7 + v4) = 0;
      if (result)
      {
        uint64_t v8 = sub_1CD651E58((void *)result);
        double result = MEMORY[0x1D25D9CE0](v8, 0x10E0C40D6C35413);
      }
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

void sub_1CD651D38(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 > a2)
    {
      sub_1CD651DD0(a1, a2);
    }
    else
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        sub_1CD651C48();
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 8 * v2), 8 * (a2 - v2));
      }
      *(_DWORD *)(a1 + 8) = v3;
    }
  }
}

uint64_t sub_1CD651DD0(uint64_t result, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = 8 * a2 - 8 * v4;
    uint64_t v6 = (uint64_t *)(*(void *)result + 8 * v4 - 8);
    do
    {
      double result = *v6;
      *uint64_t v6 = 0;
      if (result)
      {
        uint64_t v7 = sub_1CD651E58((void *)result);
        double result = MEMORY[0x1D25D9CE0](v7, 0x10E0C40D6C35413);
      }
      --v6;
      v5 += 8;
    }
    while (v5);
  }
  *(_DWORD *)(v3 + 8) = v2;
  return result;
}

void *sub_1CD651E58(void *a1)
{
  int v2 = a1 + 17;
  uint64_t v3 = (void *)a1[20];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (void *)a1[16];
  if (v4 == a1 + 13)
  {
    (*(void (**)(void *))(a1[13] + 32))(a1 + 13);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = (void *)a1[3];
  if (v5 != a1 + 5) {
    free(v5);
  }
  return a1;
}

uint64_t sub_1CD651F58@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v10 = 0;
  uint64_t result = sub_1CD651FE0((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CD65207C(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CD651FE0(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      unsigned int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          unsigned int v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 8 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_8;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CD65207C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1CC8B710C(a1, v7);
    uint64_t v9 = 0;
    sub_1CD651FE0((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CD652130(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    unsigned int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v9 = 0;
      uint64_t result = sub_1CD651FE0((uint64_t *)v5, a2, &v9);
      *uint64_t v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CD6521E0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v10 = 0;
  uint64_t result = sub_1CC020A5C((uint64_t *)a1, a2, &v10);
  unsigned int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC85F520(a1, (uint64_t)a2, a2, v10);
    unsigned int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CD652268(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AAWillReturn::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD6523B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAWillReturn::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD652424(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAUndefinedBehavior::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD652494(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AANoUnwind::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD6525E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AANoUnwind::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD652650(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AANoFree::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD65279C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AANoFree::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD65280C(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AANoReturn::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD652958(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AANoReturn::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD6529C8(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AAAssumptionInfo::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD652B14(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAAssumptionInfo::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD652B84(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AAHeapToStack::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD652CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAHeapToStack::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD652D40(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AANoUndef::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD652E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AANoUndef::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD652EFC(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AAAlign::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD653048(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAAlign::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD6530B8(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AANonNull::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD653204(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AANonNull::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD653274(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AANoAlias::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD6533C0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AANoAlias::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD653430(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AADereferenceable::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD65357C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AADereferenceable::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD6535EC(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AANoCapture::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD653738(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AANoCapture::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD6537A8(uint64_t a1, long long *a2, uint64_t a3, int a4, char a5)
{
  long long v9 = *a2;
  int v14 = &llvm::AAPrivatizablePtr::ID;
  long long v15 = v9;
  BOOL v16 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v16[3];
  if (v10)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v16[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
          llvm::Attributor::recordDependence(a1, v10, a3, a4);
        }
      }
    }
    if ((a5 & 1) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12)) {
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_1CD6538F4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AAPrivatizablePtr::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

void sub_1CD653964(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 8);
  unint64_t v5 = *(void *)(v2 + 8);
  uint64_t v4 = (uint64_t *)(v2 + 8);
  unint64_t v3 = v5;
  if ((v5 & 2) != 0)
  {
    unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v4 = *(uint64_t **)v7;
    uint64_t v6 = *(void *)v7 + 8 * *(unsigned int *)(v7 + 8);
  }
  else
  {
    uint64_t v6 = (uint64_t)&v4[v3 > 3];
  }
  while (v4 != (uint64_t *)v6)
  {
    uint64_t v8 = *v4++;
    sub_1CC8BCB60(a1, (void *)(v8 & 0xFFFFFFFFFFFFFFF8));
  }
}

unint64_t sub_1CD6539D8(void *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

void sub_1CD6539E4(llvm::raw_ostream **a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v6 = a4(a3);
  if (v6)
  {
    char v8 = 0;
    LOBYTE(__p) = 0;
    sub_1CD460084(a1, a2, v6, (uint64_t)&__p);
    if (v8 < 0) {
      operator delete(__p);
    }
  }
}

uint64_t llvm::clampStateAndIndicateChange<llvm::DerefState>(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 20);
  (*(void (**)(void))(*(void *)(a1 + 8) + 48))();
  int v5 = *(_DWORD *)(a1 + 20);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = a1 + 48;
  BOOL v8 = *(unsigned char *)(v6 + 9) == 0;
  (*(void (**)(uint64_t, void))(v7 + 48))(v6, *(unsigned __int8 *)(a2 + 57));
  if (v4 == v5) {
    return v8 ^ (*(unsigned char *)(v6 + 9) != 0);
  }
  else {
    return 0;
  }
}

BOOL llvm::AANoSync::isNonRelaxedAtomic(llvm::AANoSync *this, const llvm::Instruction *a2)
{
  BOOL result = llvm::Instruction::isAtomic(this);
  if (result)
  {
    int v4 = *((unsigned __int8 *)this + 16);
    if (this && v4 == 63)
    {
      return *((unsigned char *)this + 60) != 0;
    }
    else if (this && v4 == 64)
    {
      return (*((_WORD *)this + 9) & 0x1C) != 8 || (*((_WORD *)this + 9) & 0xE0) != 64;
    }
    else
    {
      if (v4 == 65) {
        char v5 = 1;
      }
      else {
        char v5 = 7;
      }
      return ((*((unsigned __int16 *)this + 9) >> v5) & 7u) - 3 < 0xFFFFFFFE;
    }
  }
  return result;
}

std::string *llvm::AAMemoryLocation::getMemoryLocationsAsStr@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  if ((_BYTE)this)
  {
    char v3 = (char)this;
    if (this == 255)
    {
      *((unsigned char *)&a2->__r_.__value_.__s + 23) = 9;
      strcpy((char *)a2, "no memory");
    }
    else
    {
      *((unsigned char *)&a2->__r_.__value_.__s + 23) = 7;
      strcpy((char *)a2, "memory:");
      if ((this & 1) == 0) {
        this = std::string::append(a2, "stack,");
      }
      if ((v3 & 2) == 0) {
        this = std::string::append(a2, "constant,");
      }
      if ((v3 & 4) == 0) {
        this = std::string::append(a2, "internal global,");
      }
      if ((v3 & 8) == 0) {
        this = std::string::append(a2, "external global,");
      }
      if ((v3 & 0x10) == 0) {
        this = std::string::append(a2, "argument,");
      }
      if ((v3 & 0x20) == 0) {
        this = std::string::append(a2, "inaccessible,");
      }
      if ((v3 & 0x40) == 0) {
        this = std::string::append(a2, "malloced,");
      }
      if ((v3 & 0x80) == 0) {
        this = std::string::append(a2, "unknown,");
      }
      int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
      if (v4 < 0)
      {
        uint64_t v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        uint64_t v6 = a2;
      }
      std::string::size_type v7 = size - 1;
      if (v4 < 0) {
        a2->__r_.__value_.__l.__size_ = v7;
      }
      else {
        *((unsigned char *)&a2->__r_.__value_.__s + 23) = v7 & 0x7F;
      }
      v6->__r_.__value_.__s.__data_[v7] = 0;
    }
  }
  else
  {
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 10;
    strcpy((char *)a2, "all memory");
  }
  return this;
}

char *llvm::AACallEdgeIterator::operator*(uint64_t a1)
{
  return (char *)sub_1CC8C5FA0(*(void *)(a1 + 8), **(void **)a1, 0, 0, 2) + 48;
}

llvm::raw_ostream *llvm::AttributorCallGraph::print(llvm::AttributorCallGraph *this)
{
  uint64_t v2 = (llvm::raw_ostream *)llvm::outs(this);
  char v5 = this;
  v4[16] = 257;
  return sub_1CD653DB8(v2, (llvm::raw_ostream *)&v5, (llvm::Twine *)v4);
}

llvm::raw_ostream *sub_1CD653DB8(llvm::raw_ostream *a1, llvm::raw_ostream *a2, llvm::Twine *this)
{
  v7[0] = a1;
  v7[1] = a2;
  __int16 v8 = 0;
  llvm::Twine::str(this, __p);
  sub_1CD6329D4(v7, (uint64_t)__p);
  sub_1CD660130((uint64_t)v7);
  sub_1CB8E509C(a1, "}\n");
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t llvm::AANoUnwind::createForPosition(llvm::AANoUnwind *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  if (v5 == 5)
  {
    uint64_t result = sub_1CB906F34(a2[3], 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(void *)uint64_t result = &unk_1F2620C10;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F2620C98;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    uint64_t result = sub_1CB906F34(a2[3], 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(void *)uint64_t result = &unk_1F2620AC8;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F2620B50;
LABEL_5:
    *(void *)(result + 32) = v7;
    return result;
  }
  return 0;
}

uint64_t llvm::AANoSync::createForPosition(llvm::AANoSync *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  if (v5 == 5)
  {
    uint64_t result = sub_1CB906F34(a2[3], 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(void *)uint64_t result = &unk_1F2620DE0;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F2620E68;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    uint64_t result = sub_1CB906F34(a2[3], 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(void *)uint64_t result = &unk_1F2620CF8;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F2620D80;
LABEL_5:
    *(void *)(result + 32) = v7;
    return result;
  }
  return 0;
}

uint64_t llvm::AANoRecurse::createForPosition(llvm::AANoRecurse *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  if (v5 == 5)
  {
    uint64_t result = sub_1CB906F34(a2[3], 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(void *)uint64_t result = &unk_1F2620FB0;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F2621038;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    uint64_t result = sub_1CB906F34(a2[3], 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(void *)uint64_t result = &unk_1F2620EC8;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F2620F50;
LABEL_5:
    *(void *)(result + 32) = v7;
    return result;
  }
  return 0;
}

uint64_t llvm::AAWillReturn::createForPosition(llvm::AAWillReturn *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  if (v5 == 5)
  {
    uint64_t result = sub_1CB906F34(a2[3], 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(void *)uint64_t result = &unk_1F2621180;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F2621208;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    uint64_t result = sub_1CB906F34(a2[3], 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(void *)uint64_t result = &unk_1F2621098;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F2621120;
LABEL_5:
    *(void *)(result + 32) = v7;
    return result;
  }
  return 0;
}

uint64_t llvm::AANoReturn::createForPosition(llvm::AANoReturn *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  if (v5 == 5)
  {
    uint64_t result = sub_1CB906F34(a2[3], 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(void *)uint64_t result = &unk_1F2621350;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F26213D8;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    uint64_t result = sub_1CB906F34(a2[3], 48, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(void *)uint64_t result = &unk_1F2621268;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F26212F0;
LABEL_5:
    *(void *)(result + 32) = v7;
    return result;
  }
  return 0;
}

uint64_t llvm::AAReturnedValues::createForPosition(llvm::AAReturnedValues *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  if (v5 == 5)
  {
    uint64_t result = sub_1CB906F34(a2[3], 96, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_DWORD *)(result + 56) = 0;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(_WORD *)(result + 88) = 256;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 64) = 0;
    *(void *)uint64_t result = &unk_1F2621648;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F2621710;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    uint64_t result = sub_1CB906F34(a2[3], 96, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_DWORD *)(result + 56) = 0;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(_WORD *)(result + 88) = 256;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 64) = 0;
    *(void *)uint64_t result = &unk_1F2621438;
    *(void *)(result + 8) = 0;
    std::string::size_type v7 = &unk_1F2621500;
LABEL_5:
    *(void *)(result + 32) = v7;
    return result;
  }
  return 0;
}

uint64_t llvm::AAMemoryLocation::createForPosition(llvm::AAMemoryLocation *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  if (v5 == 5)
  {
    uint64_t result = sub_1CB906F34(a2[3], 120, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(void *)(result + 8) = 0;
    *(void *)(result + 40) = 0x1FF00000000;
    *(void *)(result + 112) = a2[3];
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(void *)uint64_t result = &unk_1F26219A0;
    std::string::size_type v7 = &unk_1F2621A38;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    uint64_t result = sub_1CB906F34(a2[3], 120, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(void *)(result + 8) = 0;
    *(void *)(result + 40) = 0x1FF00000000;
    *(void *)(result + 112) = a2[3];
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(void *)uint64_t result = &unk_1F2621750;
    std::string::size_type v7 = &unk_1F26217E8;
LABEL_5:
    *(void *)(result + 32) = v7;
    return result;
  }
  return 0;
}

uint64_t llvm::AACallEdges::createForPosition(llvm::AACallEdges *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  if (v5 == 5)
  {
    uint64_t result = sub_1CB906F34(a2[3], 120, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(_DWORD *)(result + 80) = 0;
    *(void *)(result + 56) = a2;
    *(void *)(result + 64) = 0;
    *(void *)(result + 72) = 0;
    *(_WORD *)(result + 112) = 0;
    *(void *)(result + 96) = 0;
    *(void *)(result + 104) = 0;
    *(void *)(result + 88) = 0;
    *(void *)uint64_t result = &unk_1F2621D08;
    *(void *)(result + 8) = 0;
    *(void *)(result + 32) = &unk_1F2621DB0;
    std::string::size_type v7 = &unk_1F2621E10;
    goto LABEL_5;
  }
  if (v5 == 4)
  {
    uint64_t result = sub_1CB906F34(a2[3], 120, 3);
    *(_OWORD *)(result + 16) = *(_OWORD *)this;
    *(_WORD *)(result + 40) = 256;
    *(_DWORD *)(result + 80) = 0;
    *(void *)(result + 56) = a2;
    *(void *)(result + 64) = 0;
    *(void *)(result + 72) = 0;
    *(_WORD *)(result + 112) = 0;
    *(void *)(result + 96) = 0;
    *(void *)(result + 104) = 0;
    *(void *)(result + 88) = 0;
    *(void *)uint64_t result = &unk_1F2621A98;
    *(void *)(result + 8) = 0;
    *(void *)(result + 32) = &unk_1F2621B40;
    std::string::size_type v7 = &unk_1F2621BA0;
LABEL_5:
    *(void *)(result + 48) = v7;
    return result;
  }
  return 0;
}

void *llvm::AAAssumptionInfo::createForPosition(llvm::AAAssumptionInfo *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  if (v5 == 5)
  {
    char v6 = (void *)sub_1CB906F34(a2[3], 112, 3);
    *char v6 = &unk_1F2622198;
    void v6[4] = &unk_1F2622220;
    long long v9 = (llvm *)sub_1CD6482F0(this);
    llvm::getAssumptions(v9, (uint64_t)v12);
    uint64_t v10 = (llvm *)sub_1CD648A0C(this);
    if (v10)
    {
      llvm::getAssumptions(v10, (uint64_t)v13);
      sub_1CD5A4F8C((uint64_t)v12, (uint64_t)v13);
      MEMORY[0x1D25D9CD0](v13[0], 8);
    }
    uint64_t v11 = (llvm *)sub_1CD648A0C(this);
    if (v11)
    {
      llvm::getAssumptions(v11, (uint64_t)v13);
      sub_1CD5A4F8C((uint64_t)v12, (uint64_t)v13);
      MEMORY[0x1D25D9CD0](v13[0], 8);
    }
    sub_1CD658D3C(v6, this, (uint64_t)v12);
    *char v6 = &unk_1F2621F08;
    void v6[4] = &unk_1F2621F90;
    MEMORY[0x1D25D9CD0](v12[0], 8);
    *char v6 = &unk_1F2622198;
    void v6[4] = &unk_1F2622220;
  }
  else if (v5 == 4)
  {
    char v6 = (void *)sub_1CB906F34(a2[3], 112, 3);
    __int16 v8 = (llvm *)sub_1CD648A0C(this);
    llvm::getAssumptions(v8, (uint64_t)v13);
    sub_1CD658D3C(v6, this, (uint64_t)v13);
    *char v6 = &unk_1F2621F08;
    void v6[4] = &unk_1F2621F90;
    MEMORY[0x1D25D9CD0](v13[0], 8);
    *char v6 = &unk_1F2621E40;
    void v6[4] = &unk_1F2621EC8;
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t llvm::AANonNull::createForPosition(llvm::AANonNull *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t v7 = sub_1CB906F34(a2[3], 48, 3);
      uint64_t result = sub_1CC8C83B0(v7, this);
      *(void *)uint64_t result = &unk_1F2622260;
      __int16 v8 = &unk_1F26222E8;
      goto LABEL_7;
    case 2:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2622518;
      *(void *)(result + 8) = 0;
      __int16 v8 = &unk_1F26225A0;
      goto LABEL_7;
    case 3:
      uint64_t v9 = sub_1CB906F34(a2[3], 48, 3);
      uint64_t result = sub_1CC8C83B0(v9, this);
      *(void *)uint64_t result = &unk_1F2622600;
      __int16 v8 = &unk_1F2622688;
      goto LABEL_7;
    case 6:
      uint64_t v10 = sub_1CB906F34(a2[3], 48, 3);
      uint64_t result = sub_1CC8C83B0(v10, this);
      *(void *)uint64_t result = &unk_1F2622430;
      __int16 v8 = &unk_1F26224B8;
      goto LABEL_7;
    case 7:
      uint64_t v11 = sub_1CB906F34(a2[3], 48, 3);
      uint64_t result = sub_1CC8C83B0(v11, this);
      *(void *)uint64_t result = &unk_1F26226E8;
      __int16 v8 = &unk_1F2622770;
LABEL_7:
      *(void *)(result + 32) = v8;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::AANoAlias::createForPosition(llvm::AANoAlias *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F26227D0;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2622858;
      goto LABEL_7;
    case 2:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F26229A0;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2622A28;
      goto LABEL_7;
    case 3:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2622A88;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2622B10;
      goto LABEL_7;
    case 6:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F26228B8;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2622940;
      goto LABEL_7;
    case 7:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2622B70;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2622BF8;
LABEL_7:
      *(void *)(result + 32) = v7;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::AAPrivatizablePtr::createForPosition(llvm::AAPrivatizablePtr *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = sub_1CB906F34(a2[3], 64, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(unsigned char *)(result + 48) = 0;
      *(unsigned char *)(result + 56) = 0;
      *(void *)uint64_t result = &unk_1F2622C58;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2622CF0;
      goto LABEL_7;
    case 2:
      uint64_t result = sub_1CB906F34(a2[3], 64, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(unsigned char *)(result + 48) = 0;
      *(unsigned char *)(result + 56) = 0;
      *(void *)uint64_t result = &unk_1F2622ED8;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2622F70;
      goto LABEL_7;
    case 3:
      uint64_t result = sub_1CB906F34(a2[3], 64, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(unsigned char *)(result + 48) = 0;
      *(unsigned char *)(result + 56) = 0;
      *(void *)uint64_t result = &unk_1F2622FD0;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2623068;
      goto LABEL_7;
    case 6:
      uint64_t result = sub_1CB906F34(a2[3], 64, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(unsigned char *)(result + 48) = 0;
      *(unsigned char *)(result + 56) = 0;
      *(void *)uint64_t result = &unk_1F2622D50;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2622DE8;
      goto LABEL_7;
    case 7:
      uint64_t result = sub_1CB906F34(a2[3], 64, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(unsigned char *)(result + 48) = 0;
      *(unsigned char *)(result + 56) = 0;
      *(void *)uint64_t result = &unk_1F26230C8;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2623160;
LABEL_7:
      *(void *)(result + 32) = v7;
      break;
    default:
      return result;
  }
  return result;
}

void llvm::AADereferenceable::createForPosition(llvm::AADereferenceable *this, uint64_t **a2, llvm::Attributor *a3)
{
  switch(sub_1CD647DEC(this))
  {
    case 1u:
      uint64_t v5 = sub_1CB906F34(a2[3], 104, 3);
      sub_1CC8D21E8(v5, this);
      *char v6 = &unk_1F26231C0;
      uint64_t v7 = &unk_1F2623248;
      goto LABEL_7;
    case 2u:
      uint64_t v8 = sub_1CB906F34(a2[3], 104, 3);
      sub_1CC8D21E8(v8, this);
      *char v6 = &unk_1F2623510;
      uint64_t v7 = &unk_1F2623598;
      goto LABEL_7;
    case 3u:
      uint64_t v9 = sub_1CB906F34(a2[3], 104, 3);
      sub_1CC8D21E8(v9, this);
      *char v6 = &unk_1F26235D8;
      uint64_t v7 = &unk_1F2623660;
      goto LABEL_7;
    case 6u:
      uint64_t v10 = sub_1CB906F34(a2[3], 104, 3);
      sub_1CC8D21E8(v10, this);
      *char v6 = &unk_1F2623448;
      uint64_t v7 = &unk_1F26234D0;
      goto LABEL_7;
    case 7u:
      uint64_t v11 = sub_1CB906F34(a2[3], 104, 3);
      sub_1CC8D21E8(v11, this);
      *char v6 = &unk_1F26236A0;
      uint64_t v7 = &unk_1F2623728;
LABEL_7:
      void v6[4] = v7;
      break;
    default:
      return;
  }
}

uint64_t llvm::AAAlign::createForPosition(llvm::AAAlign *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = sub_1CB906F34(a2[3], 56, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 40) = xmmword_1CFB27360;
      *(void *)uint64_t result = &unk_1F2623768;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F26237F0;
      goto LABEL_7;
    case 2:
      uint64_t result = sub_1CB906F34(a2[3], 56, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 40) = xmmword_1CFB27360;
      *(void *)uint64_t result = &unk_1F26239F8;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2623A80;
      goto LABEL_7;
    case 3:
      uint64_t result = sub_1CB906F34(a2[3], 56, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 40) = xmmword_1CFB27360;
      *(void *)uint64_t result = &unk_1F2623AE0;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2623B68;
      goto LABEL_7;
    case 6:
      uint64_t result = sub_1CB906F34(a2[3], 56, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 40) = xmmword_1CFB27360;
      *(void *)uint64_t result = &unk_1F2623910;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2623998;
      goto LABEL_7;
    case 7:
      uint64_t result = sub_1CB906F34(a2[3], 56, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_OWORD *)(result + 40) = xmmword_1CFB27360;
      *(void *)uint64_t result = &unk_1F2623BC8;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2623C50;
LABEL_7:
      *(void *)(result + 32) = v7;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::AAInstanceInfo::createForPosition(llvm::AAInstanceInfo *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2623CB0;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2623D30;
      goto LABEL_6;
    case 2:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      __break(1u);
      return result;
    case 3:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2623E70;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2623EF0;
      goto LABEL_6;
    case 6:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2623D90;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2623E10;
      goto LABEL_6;
    case 7:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2623F50;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2623FD0;
LABEL_6:
      *(void *)(result + 32) = v7;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::AANoCapture::createForPosition(llvm::AANoCapture *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_DWORD *)(result + 40) = 458752;
      *(void *)uint64_t result = &unk_1F2624030;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F26240B8;
      goto LABEL_6;
    case 2:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      __break(1u);
      return result;
    case 3:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_DWORD *)(result + 40) = 458752;
      *(void *)uint64_t result = &unk_1F2624260;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F26242E8;
      goto LABEL_6;
    case 6:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_DWORD *)(result + 40) = 458752;
      *(void *)uint64_t result = &unk_1F2624178;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2624200;
      goto LABEL_6;
    case 7:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_DWORD *)(result + 40) = 458752;
      *(void *)uint64_t result = &unk_1F2624348;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F26243D0;
LABEL_6:
      *(void *)(result + 32) = v7;
      break;
    default:
      return result;
  }
  return result;
}

void *llvm::AAValueConstantRange::createForPosition(llvm::AAValueConstantRange *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = 0;
  switch(sub_1CD647DEC(this))
  {
    case 1u:
      int v5 = (void *)sub_1CB906F34(a2[3], 120, 3);
      sub_1CC8D8C20((uint64_t)v5, this);
      return v5;
    case 2u:
      int v5 = (void *)sub_1CB906F34(a2[3], 112, 3);
      uint64_t v8 = sub_1CD648FA4(this);
      sub_1CC8DCAFC((uint64_t)v5, this, *(_DWORD *)(v8 + 8) >> 8);
      *int v5 = &unk_1F26246D0;
      uint64_t v9 = &unk_1F2624760;
      goto LABEL_8;
    case 3u:
      int v5 = (void *)sub_1CB906F34(a2[3], 112, 3);
      uint64_t v10 = sub_1CD648FA4(this);
      sub_1CC8DCAFC((uint64_t)v5, this, *(_DWORD *)(v10 + 8) >> 8);
      *int v5 = &unk_1F26247A0;
      uint64_t v9 = &unk_1F2624830;
      goto LABEL_8;
    case 6u:
      int v5 = (void *)sub_1CB906F34(a2[3], 112, 3);
      uint64_t v11 = sub_1CD648FA4(this);
      sub_1CC8DCAFC((uint64_t)v5, this, *(_DWORD *)(v11 + 8) >> 8);
      *int v5 = &unk_1F2624600;
      uint64_t v9 = &unk_1F2624690;
LABEL_8:
      void v5[4] = v9;
      break;
    case 7u:
      int v5 = (void *)sub_1CB906F34(a2[3], 120, 3);
      char v6 = (void *)sub_1CC8D8C20((uint64_t)v5, this);
      *char v6 = &unk_1F2624870;
      void v6[4] = &unk_1F2624900;
      break;
    default:
      return v5;
  }
  return v5;
}

void llvm::AAPotentialConstantValues::createForPosition(llvm::AAPotentialConstantValues *this, uint64_t **a2, llvm::Attributor *a3)
{
  switch(sub_1CD647DEC(this))
  {
    case 1u:
      uint64_t v5 = sub_1CB906F34(a2[3], 344, 3);
      sub_1CC8E14F8(v5, this);
      *char v6 = &unk_1F2624940;
      uint64_t v7 = &unk_1F26249C0;
      goto LABEL_7;
    case 2u:
      uint64_t v8 = sub_1CB906F34(a2[3], 344, 3);
      sub_1CC8E14F8(v8, this);
      *char v6 = &unk_1F2624BC0;
      uint64_t v7 = &unk_1F2624C40;
      goto LABEL_7;
    case 3u:
      uint64_t v9 = sub_1CB906F34(a2[3], 344, 3);
      sub_1CC8E14F8(v9, this);
      *char v6 = &unk_1F2624C80;
      uint64_t v7 = &unk_1F2624D00;
      goto LABEL_7;
    case 6u:
      uint64_t v10 = sub_1CB906F34(a2[3], 344, 3);
      sub_1CC8E14F8(v10, this);
      *char v6 = &unk_1F2624B00;
      uint64_t v7 = &unk_1F2624B80;
      goto LABEL_7;
    case 7u:
      uint64_t v11 = sub_1CB906F34(a2[3], 344, 3);
      sub_1CC8E14F8(v11, this);
      *char v6 = &unk_1F2624D40;
      uint64_t v7 = &unk_1F2624DC0;
LABEL_7:
      void v6[4] = v7;
      break;
    default:
      return;
  }
}

uint64_t llvm::AANoUndef::createForPosition(llvm::AANoUndef *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2624E00;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2624E88;
      goto LABEL_7;
    case 2:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2624FD0;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2625058;
      goto LABEL_7;
    case 3:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F26250B8;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2625140;
      goto LABEL_7;
    case 6:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2624EE8;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2624F70;
      goto LABEL_7;
    case 7:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F26251A0;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2625228;
LABEL_7:
      *(void *)(result + 32) = v7;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::AAPointerInfo::createForPosition(llvm::AAPointerInfo *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = sub_1CB906F34(a2[3], 80, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(void *)(result + 72) = 0;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 40) = 0u;
      *(unsigned char *)(result + 73) = 1;
      *(void *)(result + 64) = &unk_1F2620BB0;
      *(void *)uint64_t result = &unk_1F2625288;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2625318;
      goto LABEL_7;
    case 2:
      uint64_t result = sub_1CB906F34(a2[3], 80, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(void *)(result + 72) = 0;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 40) = 0u;
      *(unsigned char *)(result + 73) = 1;
      *(void *)(result + 64) = &unk_1F2620BB0;
      *(void *)uint64_t result = &unk_1F26254F8;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2625588;
      goto LABEL_7;
    case 3:
      uint64_t result = sub_1CB906F34(a2[3], 80, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(void *)(result + 72) = 0;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 40) = 0u;
      *(unsigned char *)(result + 73) = 1;
      *(void *)(result + 64) = &unk_1F2620BB0;
      *(void *)uint64_t result = &unk_1F26255C8;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2625658;
      goto LABEL_7;
    case 6:
      uint64_t result = sub_1CB906F34(a2[3], 80, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(void *)(result + 72) = 0;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 40) = 0u;
      *(unsigned char *)(result + 73) = 1;
      *(void *)(result + 64) = &unk_1F2620BB0;
      *(void *)uint64_t result = &unk_1F2625428;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F26254B8;
      goto LABEL_7;
    case 7:
      uint64_t result = sub_1CB906F34(a2[3], 80, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(void *)(result + 72) = 0;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 40) = 0u;
      *(unsigned char *)(result + 73) = 1;
      *(void *)(result + 64) = &unk_1F2620BB0;
      *(void *)uint64_t result = &unk_1F2625698;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2625728;
LABEL_7:
      *(void *)(result + 32) = v7;
      break;
    default:
      return result;
  }
  return result;
}

void *llvm::AAValueSimplify::createForPosition(llvm::AAValueSimplify *this, uint64_t **a2, llvm::Attributor *a3)
{
  switch(sub_1CD647DEC(this))
  {
    case 1u:
      uint64_t v5 = sub_1CB906F34(a2[3], 80, 3);
      uint64_t result = (void *)sub_1CC8E8AA0(v5, this);
      *uint64_t result = &unk_1F26259D0;
      uint64_t v7 = &unk_1F2625A60;
      goto LABEL_10;
    case 2u:
      uint64_t v8 = sub_1CB906F34(a2[3], 80, 3);
      uint64_t result = (void *)sub_1CC8E8AA0(v8, this);
      *uint64_t result = &unk_1F2625B70;
      uint64_t v7 = &unk_1F2625C00;
      goto LABEL_10;
    case 3u:
      uint64_t v9 = sub_1CB906F34(a2[3], 80, 3);
      uint64_t result = (void *)sub_1CC8E8AA0(v9, this);
      *uint64_t result = &unk_1F2625C40;
      uint64_t v7 = &unk_1F2625CD0;
      goto LABEL_10;
    case 4u:
      uint64_t v10 = sub_1CB906F34(a2[3], 80, 3);
      uint64_t result = (void *)sub_1CC8E8AA0(v10, this);
      *uint64_t result = &unk_1F2625768;
      uint64_t v7 = &unk_1F26257F8;
      goto LABEL_10;
    case 5u:
      uint64_t v11 = sub_1CB906F34(a2[3], 80, 3);
      uint64_t result = (void *)sub_1CC8E8AA0(v11, this);
      *uint64_t result = &unk_1F2625900;
      uint64_t v7 = &unk_1F2625990;
      goto LABEL_10;
    case 6u:
      uint64_t v12 = sub_1CB906F34(a2[3], 80, 3);
      uint64_t result = (void *)sub_1CC8E8AA0(v12, this);
      *uint64_t result = &unk_1F2625AA0;
      uint64_t v7 = &unk_1F2625B30;
      goto LABEL_10;
    case 7u:
      uint64_t v13 = sub_1CB906F34(a2[3], 80, 3);
      uint64_t result = (void *)sub_1CC8E8AA0(v13, this);
      *uint64_t result = &unk_1F2625D10;
      uint64_t v7 = &unk_1F2625DA0;
LABEL_10:
      result[4] = v7;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void llvm::AAIsDead::createForPosition(llvm::AAIsDead *this, uint64_t **a2, llvm::Attributor *a3)
{
  switch(sub_1CD647DEC(this))
  {
    case 1u:
      uint64_t v5 = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)this;
      *(_WORD *)(v5 + 40) = 768;
      *(void *)uint64_t v5 = &unk_1F2626020;
      *(void *)(v5 + 8) = 0;
      char v6 = &unk_1F26260E0;
      goto LABEL_9;
    case 2u:
      uint64_t v5 = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)this;
      *(_WORD *)(v5 + 40) = 768;
      *(void *)uint64_t v5 = &unk_1F2626260;
      *(void *)(v5 + 8) = 0;
      char v6 = &unk_1F2626320;
      goto LABEL_9;
    case 3u:
      uint64_t v7 = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(v7 + 16) = *(_OWORD *)this;
      *(_WORD *)(v7 + 40) = 768;
      *(void *)uint64_t v7 = &unk_1F2626380;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 32) = &unk_1F2626440;
      *(unsigned char *)(v7 + 42) = 1;
      return;
    case 4u:
      uint64_t v8 = sub_1CB906F34(a2[3], 400, 3);
      sub_1CC8EBB90(v8, this);
      return;
    case 5u:
      uint64_t v9 = sub_1CB906F34(a2[3], 400, 3);
      sub_1CC8EBB90(v9, this);
      *(void *)uint64_t v5 = &unk_1F2625F00;
      char v6 = &unk_1F2625FC0;
      goto LABEL_9;
    case 6u:
      uint64_t v5 = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)this;
      *(_WORD *)(v5 + 40) = 768;
      *(void *)uint64_t v5 = &unk_1F2626140;
      *(void *)(v5 + 8) = 0;
      char v6 = &unk_1F2626200;
      goto LABEL_9;
    case 7u:
      uint64_t v5 = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)this;
      *(_WORD *)(v5 + 40) = 768;
      *(void *)uint64_t v5 = &unk_1F26264A0;
      *(void *)(v5 + 8) = 0;
      char v6 = &unk_1F2626560;
LABEL_9:
      *(void *)(v5 + 32) = v6;
      break;
    default:
      return;
  }
}

uint64_t llvm::AANoFree::createForPosition(llvm::AANoFree *this, uint64_t **a2, llvm::Attributor *a3)
{
  switch(sub_1CD647DEC(this))
  {
    case 1u:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2626790;
      *(void *)(result + 8) = 0;
      char v6 = &unk_1F2626818;
      goto LABEL_9;
    case 2u:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      __break(1u);
      return result;
    case 3u:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2626960;
      *(void *)(result + 8) = 0;
      char v6 = &unk_1F26269E8;
      goto LABEL_9;
    case 4u:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F26265C0;
      *(void *)(result + 8) = 0;
      char v6 = &unk_1F2626648;
      goto LABEL_9;
    case 5u:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F26266A8;
      *(void *)(result + 8) = 0;
      char v6 = &unk_1F2626730;
      goto LABEL_9;
    case 6u:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2626878;
      *(void *)(result + 8) = 0;
      char v6 = &unk_1F2626900;
      goto LABEL_9;
    case 7u:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 256;
      *(void *)uint64_t result = &unk_1F2626A48;
      *(void *)(result + 8) = 0;
      char v6 = &unk_1F2626AD0;
LABEL_9:
      *(void *)(result + 32) = v6;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t llvm::AAHeapToStack::createForPosition(llvm::AAHeapToStack *this, uint64_t **a2, llvm::Attributor *a3)
{
  if (sub_1CD647DEC(this) != 4) {
    return 0;
  }
  uint64_t result = sub_1CB906F34(a2[3], 144, 3);
  *(_OWORD *)(result + 16) = *(_OWORD *)this;
  *(_WORD *)(result + 40) = 256;
  *(void *)uint64_t result = &unk_1F2626B30;
  *(void *)(result + 8) = 0;
  *(void *)(result + 32) = &unk_1F2626BC0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_OWORD *)(result + 100) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  *(void *)(result + 120) = 0;
  return result;
}

uint64_t llvm::AAReachability::createForPosition(llvm::AAReachability *this, uint64_t **a2, llvm::Attributor *a3)
{
  if (sub_1CD647DEC(this) != 4) {
    return 0;
  }
  uint64_t result = sub_1CB906F34(a2[3], 48, 3);
  *(_OWORD *)(result + 16) = *(_OWORD *)this;
  *(_WORD *)(result + 40) = 256;
  *(void *)uint64_t result = &unk_1F2626CB0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 32) = &unk_1F2626D30;
  return result;
}

uint64_t llvm::AAUndefinedBehavior::createForPosition(llvm::AAUndefinedBehavior *this, uint64_t **a2, llvm::Attributor *a3)
{
  if (sub_1CD647DEC(this) != 4) {
    return 0;
  }
  uint64_t result = sub_1CB906F34(a2[3], 240, 3);
  *(_OWORD *)(result + 16) = *(_OWORD *)this;
  *(_WORD *)(result + 40) = 256;
  *(void *)(result + 48) = result + 80;
  *(void *)(result + 56) = result + 80;
  *(void *)(result + 64) = 8;
  *(_DWORD *)(result + 72) = 0;
  *(void *)(result + 144) = result + 176;
  *(void *)(result + 152) = result + 176;
  *(void *)(result + 160) = 8;
  *(_DWORD *)(result + 168) = 0;
  *(void *)uint64_t result = &unk_1F2626D90;
  *(void *)(result + 8) = 0;
  *(void *)(result + 32) = &unk_1F2626E20;
  return result;
}

uint64_t llvm::AAFunctionReachability::createForPosition(llvm::AAFunctionReachability *this, uint64_t **a2, llvm::Attributor *a3)
{
  if (sub_1CD647DEC(this) != 4) {
    return 0;
  }
  uint64_t result = sub_1CB906F34(a2[3], 200, 3);
  *(_OWORD *)(result + 16) = *(_OWORD *)this;
  *(_WORD *)(result + 40) = 256;
  *(void *)uint64_t result = &unk_1F2626F70;
  *(void *)(result + 8) = 0;
  *(void *)(result + 32) = &unk_1F2627010;
  *(unsigned char *)(result + 96) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 88) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(_OWORD *)(result + 156) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(void *)(result + 176) = 0;
  *(void *)(result + 184) = 0;
  *(void *)(result + 192) = 0;
  return result;
}

uint64_t llvm::AAMemoryBehavior::createForPosition(llvm::AAMemoryBehavior *this, uint64_t **a2, llvm::Attributor *a3)
{
  int v5 = sub_1CD647DEC(this);
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      *(void *)uint64_t result = &unk_1F2627240;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F26272C8;
      goto LABEL_8;
    case 3:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      *(void *)uint64_t result = &unk_1F2627410;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2627498;
      goto LABEL_8;
    case 4:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      *(void *)uint64_t result = &unk_1F2627070;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F26270F8;
      goto LABEL_8;
    case 5:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      *(void *)uint64_t result = &unk_1F2627158;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F26271E0;
      goto LABEL_8;
    case 6:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      *(void *)uint64_t result = &unk_1F2627328;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F26273B0;
      goto LABEL_8;
    case 7:
      uint64_t result = sub_1CB906F34(a2[3], 48, 3);
      *(_OWORD *)(result + 16) = *(_OWORD *)this;
      *(_WORD *)(result + 40) = 768;
      *(void *)uint64_t result = &unk_1F26274F8;
      *(void *)(result + 8) = 0;
      uint64_t v7 = &unk_1F2627580;
LABEL_8:
      *(void *)(result + 32) = v7;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1CD656DF4(void *a1, uint64_t a2)
{
  int v4 = (llvm::IRPosition *)(a1 + 2);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 2)) + 16) - 11 < 2
    || (unsigned int v10 = 37, llvm::IRPosition::hasAttr(v4, &v10, 1, 0, a2)))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  else
  {
    unsigned int v7 = sub_1CD647DEC(v4);
    if (v7 <= 6 && ((1 << v7) & 0x54) != 0)
    {
      uint64_t v8 = (llvm::GlobalValue *)sub_1CD6482A0(v4);
      if (!v8 || (unint64_t result = sub_1CD64EF44(a2, v8), (result & 1) == 0))
      {
        uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
        return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
    }
    else
    {
      return sub_1CD6482A0(v4);
    }
  }
  return result;
}

uint64_t sub_1CD656F54(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1CD656F5C(uint64_t a1)
{
  return a1 + 32;
}

void sub_1CD656F64(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "AANoUnwind");
}

void *sub_1CD656F8C()
{
  return &llvm::AANoUnwind::ID;
}

uint64_t sub_1CD656F98(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  int v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

unint64_t sub_1CD6570B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result = llvm::Attribute::get(a2, 0x25u, 0);
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v5) = result;
  *(_DWORD *)(a3 + 8) = v5 + 1;
  return result;
}

uint64_t sub_1CD657130(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

BOOL sub_1CD657138(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1CD65714C(uint64_t a1)
{
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return 1;
}

uint64_t sub_1CD65715C(uint64_t a1)
{
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a1 + 8);
  return 0;
}

uint64_t sub_1CD65716C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    *(unsigned char *)(result + 9) = *(unsigned char *)(result + 8);
  }
  return result;
}

uint64_t sub_1CD65717C(uint64_t result, int a2)
{
  if (a2) {
    *(_WORD *)(result + 8) = 257;
  }
  return result;
}

uint64_t sub_1CD65718C(uint64_t result, char a2, char a3)
{
  *(unsigned char *)(result + 8) |= a3;
  *(unsigned char *)(result + 9) |= a2;
  return result;
}

uint64_t sub_1CD6571A8(uint64_t result, char a2, char a3)
{
  if (*(unsigned char *)(result + 8)) {
    char v3 = a3;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  if (*(unsigned char *)(result + 9)) {
    char v4 = a2;
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(result + 9) = v4;
  return result;
}

void sub_1CD6571D0()
{
}

unint64_t sub_1CD6571EC(void *a1, uint64_t a2)
{
  char v4 = (llvm::IRPosition *)(a1 + 2);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 2)) + 16) - 11 < 2
    || (unsigned int v10 = 35, llvm::IRPosition::hasAttr(v4, &v10, 1, 0, a2)))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  else
  {
    unsigned int v7 = sub_1CD647DEC(v4);
    if (v7 <= 6 && ((1 << v7) & 0x54) != 0)
    {
      uint64_t v8 = (llvm::GlobalValue *)sub_1CD6482A0(v4);
      if (!v8 || (unint64_t result = sub_1CD64EF44(a2, v8), (result & 1) == 0))
      {
        uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
        return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
    }
    else
    {
      return sub_1CD6482A0(v4);
    }
  }
  return result;
}

void sub_1CD65734C(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "AANoSync");
}

void *sub_1CD657370()
{
  return &llvm::AANoSync::ID;
}

uint64_t sub_1CD65737C(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  char v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

unint64_t sub_1CD65749C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result = llvm::Attribute::get(a2, 0x23u, 0);
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v5) = result;
  *(_DWORD *)(a3 + 8) = v5 + 1;
  return result;
}

unint64_t sub_1CD657514(void *a1, uint64_t a2)
{
  char v4 = (llvm::IRPosition *)(a1 + 2);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 2)) + 16) - 11 < 2
    || (unsigned int v10 = 30, llvm::IRPosition::hasAttr(v4, &v10, 1, 0, a2)))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  else
  {
    unsigned int v7 = sub_1CD647DEC(v4);
    if (v7 <= 6 && ((1 << v7) & 0x54) != 0)
    {
      uint64_t v8 = (llvm::GlobalValue *)sub_1CD6482A0(v4);
      if (!v8 || (unint64_t result = sub_1CD64EF44(a2, v8), (result & 1) == 0))
      {
        uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
        return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
    }
    else
    {
      return sub_1CD6482A0(v4);
    }
  }
  return result;
}

void sub_1CD657674(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "AANoRecurse");
}

void *sub_1CD6576A0()
{
  return &llvm::AANoRecurse::ID;
}

uint64_t sub_1CD6576AC(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  char v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

unint64_t sub_1CD6577CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result = llvm::Attribute::get(a2, 0x1Eu, 0);
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v5) = result;
  *(_DWORD *)(a3 + 8) = v5 + 1;
  return result;
}

void sub_1CD657844(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "AAWillReturn");
}

void *sub_1CD657870()
{
  return &llvm::AAWillReturn::ID;
}

uint64_t sub_1CD65787C(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  char v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

unint64_t sub_1CD65799C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result = llvm::Attribute::get(a2, 0x41u, 0);
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v5) = result;
  *(_DWORD *)(a3 + 8) = v5 + 1;
  return result;
}

unint64_t sub_1CD657A14(void *a1, uint64_t a2)
{
  char v4 = (llvm::IRPosition *)(a1 + 2);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 2)) + 16) - 11 < 2
    || (unsigned int v10 = 65, llvm::IRPosition::hasAttr(v4, &v10, 1, 0, a2)))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  else
  {
    unsigned int v7 = sub_1CD647DEC(v4);
    if (v7 <= 6 && ((1 << v7) & 0x54) != 0)
    {
      uint64_t v8 = (llvm::GlobalValue *)sub_1CD6482A0(v4);
      if (!v8 || (unint64_t result = sub_1CD64EF44(a2, v8), (result & 1) == 0))
      {
        uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
        return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
    }
    else
    {
      return sub_1CD6482A0(v4);
    }
  }
  return result;
}

uint64_t sub_1CD657B74(uint64_t *a1, uint64_t a2)
{
  if ((unint64_t)(a2 - (void)a1) > 8) {
    return 1;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 40);
  if (v4 == *a1 + 40) {
    return 0;
  }
  uint64_t v5 = v4 ? (unsigned __int8 *)(v4 - 24) : 0;
  unsigned int v6 = v5[16] - 29;
  unsigned int v7 = v6 >= 0xB ? 0 : (llvm::Instruction *)v5;
  if (v6 > 0xA) {
    return 0;
  }
  uint64_t result = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v5);
  if (result)
  {
    unsigned int v8 = 0;
    int v9 = result - 1;
    do
    {
      BOOL v10 = llvm::Instruction::getSuccessor(v7, v8) == v3;
      uint64_t result = v10;
      if (v10) {
        break;
      }
      BOOL v10 = v9 == v8++;
    }
    while (!v10);
  }
  return result;
}

void sub_1CD657C28(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "AANoReturn");
}

void *sub_1CD657C50()
{
  return &llvm::AANoReturn::ID;
}

uint64_t sub_1CD657C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  int v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

unint64_t sub_1CD657D7C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result = llvm::Attribute::get(a2, 0x20u, 0);
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v5) = result;
  *(_DWORD *)(a3 + 8) = v5 + 1;
  return result;
}

unint64_t sub_1CD657DF4(void *a1, uint64_t a2)
{
  uint64_t v4 = (llvm::IRPosition *)(a1 + 2);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 2)) + 16) - 11 < 2
    || (unsigned int v10 = 32, llvm::IRPosition::hasAttr(v4, &v10, 1, 0, a2)))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  else
  {
    unsigned int v7 = sub_1CD647DEC(v4);
    if (v7 <= 6 && ((1 << v7) & 0x54) != 0)
    {
      unsigned int v8 = (llvm::GlobalValue *)sub_1CD6482A0(v4);
      if (!v8 || (unint64_t result = sub_1CD64EF44(a2, v8), (result & 1) == 0))
      {
        uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
        return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
    }
    else
    {
      return sub_1CD6482A0(v4);
    }
  }
  return result;
}

void sub_1CD657F54(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "AAReturnedValues");
}

void *sub_1CD657F74()
{
  return &llvm::AAReturnedValues::ID;
}

unint64_t sub_1CD657F80(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result = llvm::Attribute::get(a2, 0x2Eu, 0);
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v5) = result;
  *(_DWORD *)(a3 + 8) = v5 + 1;
  return result;
}

uint64_t sub_1CD657FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

uint64_t sub_1CD658118(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  if (*(void *)(a1 + 24))
  {
    sub_1CC8C1FE4((char **)(a1 + 24));
    operator delete(*v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  return a1;
}

uint64_t sub_1CD658164(uint64_t a1, uint64_t *a2)
{
  void v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a2;
  int v11 = 0;
  sub_1CD5D55BC(a1, &v10, &v11, (uint64_t)&v8);
  uint64_t v4 = v8;
  if (v9)
  {
    memset(v16, 0, sizeof(v16));
    uint64_t v12 = 1;
    int64x2_t v13 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    int64x2_t v14 = v13;
    v15[0] = v16;
    v15[1] = (void *)0x400000000;
    uint64_t v17 = *a2;
    sub_1CD4B575C((uint64_t)v18, (unsigned int *)&v12);
    sub_1CC8C2054((unsigned int **)(a1 + 24), (uint64_t)&v17);
    if (v20 != v21) {
      free(v20);
    }
    if ((v18[0] & 1) == 0) {
      MEMORY[0x1D25D9CD0](v19, 8);
    }
    if (v15[0] != v16) {
      free(v15[0]);
    }
    if ((v12 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v13.i64[0], 8);
    }
    uint64_t v6 = *(void *)(a1 + 24);
    unsigned int v5 = -1431655765 * ((unint64_t)(*(void *)(a1 + 32) - v6) >> 5) - 1;
    *(_DWORD *)(v4 + 8) = v5;
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(v8 + 8);
    uint64_t v6 = *(void *)(a1 + 24);
  }
  return v6 + 96 * v5 + 8;
}

BOOL sub_1CD6582E8(uint64_t a1, uint64_t *a2)
{
  sub_1CD4B58BC((uint64_t)v8, a1, a2);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

unint64_t sub_1CD65837C(uint64_t a1, unint64_t *a2)
{
  if (*(void *)(a1 + 288)) {
    return ((unint64_t)sub_1CD50F484(a1 + 272, *a2, a2[1], a2) << 32) | 1;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    int64x2_t v5 = *(int64x2_t *)a2;
    uint64_t v6 = 16 * v4;
    unint64_t v7 = *(int64x2_t **)a1;
    while (1)
    {
      int32x2_t v8 = vmovn_s64(vceqq_s64(*v7, v5));
      if (v8.i32[0] & v8.i32[1]) {
        break;
      }
      ++v7;
      v6 -= 16;
      if (!v6) {
        goto LABEL_6;
      }
    }
    if (v6) {
      return 1;
    }
LABEL_6:
    if (v4 <= 0xF) {
      goto LABEL_7;
    }
    do
    {
      sub_1CD50F484(a1 + 272, *(void *)(*(void *)a1 + 16 * v4 - 16), *(void *)(*(void *)a1 + 16 * v4 - 8), (_OWORD *)(*(void *)a1 + 16 * v4 - 16));
      LODWORD(v4) = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v4;
    }
    while (v4);
    sub_1CD50F484(a1 + 272, *a2, a2[1], a2);
  }
  else
  {
    int64x2_t v5 = *(int64x2_t *)a2;
LABEL_7:
    if (v4 >= *(_DWORD *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(int64x2_t *)(*(void *)a1 + 16 * v4) = v5;
    ++*(_DWORD *)(a1 + 8);
  }
  return 0x100000001;
}

uint64_t sub_1CD6584B8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1CD6584C0(uint64_t a1)
{
  return a1 + 32;
}

std::string *sub_1CD6584C8@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return llvm::AAMemoryLocation::getMemoryLocationsAsStr((std::string *)*(unsigned int *)(a1 + 44), a2);
}

void sub_1CD6584D0(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "AAMemoryLocation");
}

void *sub_1CD6584F0()
{
  return &llvm::AAMemoryLocation::ID;
}

BOOL sub_1CD6584FC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) != 0;
}

BOOL sub_1CD65850C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a1 + 8);
}

uint64_t sub_1CD65851C(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t sub_1CD65852C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = *(_DWORD *)(result + 12) & a2 | *(_DWORD *)(result + 8);
  return result;
}

int8x8_t sub_1CD658540(int8x8_t *a1, unsigned int a2)
{
  int8x8_t result = vorr_s8(a1[1], (int8x8_t)vdup_n_s32(a2));
  a1[1] = result;
  return result;
}

uint64_t sub_1CD658554(uint64_t result, int a2, int a3)
{
  int v3 = *(_DWORD *)(result + 12) | a2;
  *(_DWORD *)(result + 8) |= a3;
  *(_DWORD *)(result + 12) = v3;
  return result;
}

uint64_t sub_1CD658568(uint64_t result, int a2, int a3)
{
  int v3 = *(_DWORD *)(result + 12) & a2;
  *(_DWORD *)(result + 8) &= a3;
  *(_DWORD *)(result + 12) = v3;
  return result;
}

unint64_t sub_1CD65857C(void *a1, uint64_t a2)
{
  uint64_t v4 = (llvm::IRPosition *)(a1 + 2);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 2)) + 16) - 11 < 2
    || (unsigned int v10 = 44, llvm::IRPosition::hasAttr(v4, &v10, 1, 0, a2)))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  else
  {
    unsigned int v7 = sub_1CD647DEC(v4);
    if (v7 <= 6 && ((1 << v7) & 0x54) != 0)
    {
      int32x2_t v8 = (llvm::GlobalValue *)sub_1CD6482A0(v4);
      if (!v8 || (unint64_t result = sub_1CD64EF44(a2, v8), (result & 1) == 0))
      {
        uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
        return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
    }
    else
    {
      return sub_1CD6482A0(v4);
    }
  }
  return result;
}

uint64_t sub_1CD6586DC(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

uint64_t sub_1CD6587FC(uint64_t a1)
{
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
  return 0;
}

void sub_1CD658810()
{
}

unint64_t sub_1CD658824(llvm::IRPosition *a1, int *a2, uint64_t a3)
{
  unint64_t result = sub_1CD647DEC(a1);
  if (result)
  {
    unint64_t result = sub_1CD647DEC(a1);
    if (result != 1)
    {
      uint64_t v7 = *(void *)a1;
      unint64_t v8 = *(void *)a1 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v9 = v8;
      if ((~*(_DWORD *)a1 & 3) == 0) {
        unint64_t v9 = *(void *)(v8 + 24);
      }
      unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 < 0x1C
        || ((v11 = v10 - 33, BOOL v12 = v11 > 0x33, v13 = (1 << v11) & 0x8000000000041, !v12)
          ? (BOOL v14 = v13 == 0)
          : (BOOL v14 = 1),
            v14))
      {
        unint64_t v9 = 0;
        BOOL v16 = (unint64_t *)(sub_1CD648A0C(a1) + 112);
        uint64_t v7 = *(void *)a1;
        unint64_t v8 = *(void *)a1 & 0xFFFFFFFFFFFFFFFCLL;
        char v15 = 1;
      }
      else
      {
        char v15 = 0;
        BOOL v16 = (unint64_t *)(v9 + 64);
      }
      unint64_t result = *v16;
      unint64_t v22 = *v16;
      if ((~(_BYTE)v7 & 3) == 0) {
        unint64_t v8 = *(void *)(v8 + 24);
      }
      if (a3)
      {
        uint64_t v17 = **(uint64_t ***)v8;
        uint64_t v18 = 4 * a3;
        do
        {
          int v19 = *a2;
          char v20 = sub_1CD647DEC(a1);
          int v21 = -1;
          if (((1 << v20) & 0xC) != 0)
          {
            int v21 = 0;
          }
          else if (((1 << v20) & 0x30) == 0)
          {
            int v21 = sub_1CD64DE00(a1, 0) + 1;
          }
          unint64_t result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)&v22, v17, v21, v19);
          unint64_t v22 = result;
          ++a2;
          v18 -= 4;
        }
        while (v18);
      }
      if (v15)
      {
        unint64_t result = sub_1CD648A0C(a1);
        *(void *)(result + 112) = v22;
      }
      else
      {
        *(void *)(v9 + 64) = result;
      }
    }
  }
  return result;
}

void sub_1CD6589A4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "AACallEdges");
}

void *sub_1CD6589D0()
{
  return &llvm::AACallEdges::ID;
}

uint64_t sub_1CD6589DC(uint64_t a1)
{
  return *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1) + 24);
}

uint64_t sub_1CD658A28(uint64_t a1)
{
  return *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1) + 32);
}

uint64_t sub_1CD658A74(uint64_t a1)
{
  return *(void *)((*(uint64_t (**)(void))(*(void *)(a1 - 48) + 112))() + 24);
}

uint64_t sub_1CD658AC0(uint64_t a1)
{
  return *(void *)((*(uint64_t (**)(void))(*(void *)(a1 - 48) + 112))() + 32);
}

uint64_t sub_1CD658B0C(uint64_t a1, long long *a2, uint64_t a3, int a4)
{
  unsigned int v10 = &llvm::AACallEdges::ID;
  long long v11 = *a2;
  BOOL v12 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v10, &v12) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = v12[3];
  if (v7)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v12[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 16))(v8)) {
          llvm::Attributor::recordDependence(a1, v7, a3, a4);
        }
      }
    }
  }
  return v7;
}

uint64_t sub_1CD658BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &llvm::AACallEdges::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD658C68(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1CD658C70(uint64_t a1)
{
  return a1 + 32;
}

void sub_1CD658C78(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "AAAssumptionInfo");
}

void *sub_1CD658C98()
{
  return &llvm::AAAssumptionInfo::ID;
}

BOOL sub_1CD658CA4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) || *(unsigned char *)(a1 + 40) != 0;
}

uint64_t sub_1CD658CC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t sub_1CD658CCC(unsigned char *a1)
{
  a1[72] = 1;
  a1[8] = a1[40];
  sub_1CBFCBCC4((uint64_t)(a1 + 16), (uint64_t)(a1 + 48));
  return 1;
}

uint64_t sub_1CD658D04(unsigned char *a1)
{
  a1[72] = 1;
  a1[40] = a1[8];
  sub_1CBFCBCC4((uint64_t)(a1 + 48), (uint64_t)(a1 + 16));
  return 0;
}

void *sub_1CD658D3C(void *a1, _OWORD *a2, uint64_t a3)
{
  v6[0] = 0;
  v6[1] = 0;
  int v7 = 0;
  sub_1CBFCBCC4((uint64_t)v6, a3);
  sub_1CC8C7F1C((uint64_t)a1, a2, (uint64_t)v6);
  MEMORY[0x1D25D9CD0](v6[0], 8);
  *a1 = &unk_1F2621FD0;
  a1[4] = &unk_1F2622058;
  return a1;
}

void sub_1CD658DFC(void *a1)
{
  sub_1CD658E34(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CD658E34(void *a1)
{
  *a1 = &unk_1F2622158;
  MEMORY[0x1D25D9CD0](a1[6], 8);
  MEMORY[0x1D25D9CD0](a1[2], 8);
  return a1;
}

std::string *sub_1CD658E8C(std::string *this, const std::string::value_type **a2, const std::string::value_type **a3, const std::string::value_type **a4)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a4)
  {
    long long v6 = a2;
    int v7 = this;
    std::string::size_type v8 = 0;
    unint64_t v9 = a2;
    do
    {
      std::string::size_type v10 = v8++;
      long long v11 = (unint64_t *)(v9 + 2);
      while (v11 != (unint64_t *)a3)
      {
        unint64_t v12 = *v11;
        v11 += 2;
        if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v9 = (const std::string::value_type **)(v11 - 2);
          goto LABEL_8;
        }
      }
      unint64_t v9 = a3;
LABEL_8:
      ;
    }
    while (v9 != a4);
    uint64_t v13 = v6;
    do
    {
      v10 += (std::string::size_type)v13[1];
      BOOL v14 = (unint64_t *)(v13 + 2);
      while (v14 != (unint64_t *)a3)
      {
        unint64_t v15 = *v14;
        v14 += 2;
        if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v13 = (const std::string::value_type **)(v14 - 2);
          goto LABEL_15;
        }
      }
      uint64_t v13 = a3;
LABEL_15:
      ;
    }
    while (v13 != a4);
    std::string::reserve(this, v10);
    for (uint64_t i = (std::string::size_type *)(v6 + 1); ; uint64_t i = (std::string::size_type *)(v19 + 1))
    {
      uint64_t v18 = *v6;
      uint64_t v17 = v6 + 2;
      this = std::string::append(v7, v18, *i);
      while (1)
      {
        int v19 = v17;
        if (v17 == a3) {
          break;
        }
        v17 += 2;
        if ((unint64_t)*v19 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          long long v6 = v19;
          goto LABEL_22;
        }
      }
      long long v6 = a3;
LABEL_22:
      if (v6 == a4) {
        break;
      }
      std::string::append(v7, ",", 1uLL);
    }
  }
  return this;
}

uint64_t sub_1CD658FB8(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)a2)
  {
    int v3 = (unsigned char *)result;
    result += 8;
    if (*v3)
    {
      if ((unsigned char *)a2 != v3) {
        unint64_t result = (uint64_t)sub_1CBFCBCC4(result, a2 + 8);
      }
    }
    else
    {
      unint64_t result = sub_1CD659028(result, (uint64_t *)(a2 + 8));
    }
    if (*(unsigned char *)a2) {
      BOOL v4 = *v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    char v5 = !v4;
    unsigned char *v3 = v5;
  }
  return result;
}

uint64_t sub_1CD659028(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  uint64_t v5 = *(void *)result + 16 * v4;
  if (*(_DWORD *)(result + 8))
  {
    if (v4)
    {
      uint64_t v6 = 16 * v4;
      int v7 = *(unint64_t **)result;
      while (*v7 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      int v7 = *(unint64_t **)result;
    }
  }
  else
  {
LABEL_6:
    int v7 = (unint64_t *)(*(void *)result + 16 * v4);
  }
  if (v7 != (unint64_t *)(*(void *)result + 16 * v4))
  {
    do
    {
      uint64_t v8 = (uint64_t)v7;
      unint64_t v9 = v7 + 2;
      while (v9 != (unint64_t *)v5)
      {
        unint64_t v10 = *v9;
        v9 += 2;
        if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v7 = v9 - 2;
          goto LABEL_13;
        }
      }
      int v7 = (unint64_t *)v5;
LABEL_13:
      long long v11 = 0;
      unint64_t result = sub_1CC18A4C4(a2, v8, &v11);
      if ((result & 1) == 0)
      {
        long long v11 = 0;
        unint64_t result = sub_1CC18A4C4((uint64_t *)v3, v8, &v11);
        if (result)
        {
          _OWORD *v11 = xmmword_1CFAC6E20;
          *(int32x2_t *)(v3 + 8) = vadd_s32(*(int32x2_t *)(v3 + 8), (int32x2_t)0x1FFFFFFFFLL);
        }
      }
    }
    while (v7 != (unint64_t *)(*(void *)v3 + 16 * *(unsigned int *)(v3 + 16)));
  }
  return result;
}

BOOL sub_1CD659154(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  if (sub_1CC18A4C4((uint64_t *)(a1 + 48), a2, &v11))
  {
    uint64_t v4 = v11;
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(unsigned int *)(a1 + 64);
    uint64_t v4 = v5 + 16 * v6;
  }
  if (v4 != v5 + 16 * v6) {
    return 1;
  }
  uint64_t v11 = 0;
  if (sub_1CC18A4C4((uint64_t *)(a1 + 16), a2, &v11))
  {
    uint64_t v8 = v11;
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    uint64_t v8 = v9 + 16 * v10;
  }
  return v8 != v9 + 16 * v10;
}

void sub_1CD659204(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "AANonNull");
}

void *sub_1CD659228()
{
  return &llvm::AANonNull::ID;
}

uint64_t sub_1CD659234(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

unint64_t sub_1CD659354(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result = llvm::Attribute::get(a2, 0x27u, 0);
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v5) = result;
  *(_DWORD *)(a3 + 8) = v5 + 1;
  return result;
}

unint64_t sub_1CD6593CC(void *a1, uint64_t a2)
{
  uint64_t v4 = (llvm::IRPosition *)(a1 + 2);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 2)) + 16) - 11 < 2
    || (unsigned int v10 = 39, llvm::IRPosition::hasAttr(v4, &v10, 1, 0, a2)))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  else
  {
    unsigned int v7 = sub_1CD647DEC(v4);
    if (v7 <= 6 && ((1 << v7) & 0x54) != 0)
    {
      uint64_t v8 = (llvm::GlobalValue *)sub_1CD6482A0(v4);
      if (!v8 || (unint64_t result = sub_1CD64EF44(a2, v8), (result & 1) == 0))
      {
        uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
        return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
    }
    else
    {
      return sub_1CD6482A0(v4);
    }
  }
  return result;
}

uint64_t sub_1CD65952C(uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_1CD4B25C4(a1, a2);
  v15[0] = 0;
  v15[1] = 0;
  int v16 = 0;
  sub_1CBFCB9AC((uint64_t)v15, v7);
  long long v8 = *(_OWORD *)(v7 + 40);
  long long v17 = *(_OWORD *)(v7 + 24);
  long long v18 = v8;
  v12[0] = 0;
  v12[1] = 0;
  int v13 = 0;
  sub_1CBFCB9AC((uint64_t)v12, a1 + 176);
  *(_OWORD *)BOOL v14 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)&v14[16] = *(_OWORD *)(a1 + 216);
  for (uint64_t i = *((void *)&v17 + 1);
        (__PAIR128__(v18, i) != *(_OWORD *)&v14[8] || *((void *)&v18 + 1) != *(void *)&v14[24]) && a3(a4);
        *((void *)&v17 + 1) = i)
  {
    uint64_t i = llvm::MustBeExecutedIterator::advance((llvm::MustBeExecutedIterator *)v15, v10);
  }
  MEMORY[0x1D25D9CD0](v12[0], 8);
  return MEMORY[0x1D25D9CD0](v15[0], 8);
}

char *sub_1CD659618(uint64_t a1, char *a2)
{
  uint64_t v7 = 0;
  if (sub_1CD420258((uint64_t *)a1, a2, &v7))
  {
    void *v7 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  uint64_t v4 = *(char **)(a1 + 32);
  int64_t v5 = v4 - (a2 + 8);
  if (v4 != a2 + 8) {
    memmove(a2, a2 + 8, v4 - (a2 + 8));
  }
  *(void *)(a1 + 32) = &a2[v5];
  return a2;
}

uint64_t sub_1CD6596A4(uint64_t a1, long long *a2, uint64_t a3, int a4)
{
  unsigned int v10 = &llvm::AAValueConstantRange::ID;
  long long v11 = *a2;
  unint64_t v12 = 0;
  if ((sub_1CD64CDF0((uint64_t *)(a1 + 32), (uint64_t)&v10, &v12) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = v12[3];
  if (v7)
  {
    if (a3)
    {
      if (a4 != 2)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v12[3]);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 16))(v8)) {
          llvm::Attributor::recordDependence(a1, v7, a3, a4);
        }
      }
    }
  }
  return v7;
}

uint64_t sub_1CD659790(uint64_t a1, uint64_t a2)
{
  int64_t v5 = &llvm::AAValueConstantRange::ID;
  long long v6 = *(_OWORD *)(a2 + 16);
  sub_1CD64CF70((uint64_t *)(a1 + 32), (uint64_t)&v5)[3] = a2;
  if (*(_DWORD *)(a1 + 4368) <= 1u) {
    sub_1CD64B90C((unint64_t *)(a1 + 104), a2);
  }
  return a2;
}

uint64_t sub_1CD659800(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  if (sub_1CD647E8C((uint64_t *)a1) <= a2) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 16)
    || ((unsigned int v8 = *(unsigned __int8 *)(*(void *)(*(void *)a1 - 32) + 16), v8 >= 0x15) ? (v9 = v8 == 24) : (v9 = 1),
        !v9))
  {
    unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 8) + 4 * (v2 + 1));
  }
  if ((v2 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v4 = *(void *)a1;
  int v5 = *(_DWORD *)(*(void *)a1 + 20);
  if ((v5 & 0x40000000) != 0) {
    uint64_t v6 = *(void *)(v4 - 8);
  }
  else {
    uint64_t v6 = v4 - 32 * (v5 & 0x7FFFFFF);
  }
  return (v6 + 32 * v2) | 3;
}

void sub_1CD659898(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "AANoAlias");
}

void *sub_1CD6598BC()
{
  return &llvm::AANoAlias::ID;
}

uint64_t sub_1CD6598C8(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  BOOL v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

unint64_t sub_1CD6599E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result = llvm::Attribute::get(a2, 0x13u, 0);
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a3 + 8 * v5) = result;
  *(_DWORD *)(a3 + 8) = v5 + 1;
  return result;
}

unint64_t sub_1CD659A60(void *a1, uint64_t a2)
{
  uint64_t v4 = (llvm::IRPosition *)(a1 + 2);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 2)) + 16) - 11 < 2
    || (unsigned int v10 = 19, llvm::IRPosition::hasAttr(v4, &v10, 1, 0, a2)))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  else
  {
    unsigned int v7 = sub_1CD647DEC(v4);
    if (v7 <= 6 && ((1 << v7) & 0x54) != 0)
    {
      unsigned int v8 = (llvm::GlobalValue *)sub_1CD6482A0(v4);
      if (!v8 || (unint64_t result = sub_1CD64EF44(a2, v8), (result & 1) == 0))
      {
        uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
        return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
    }
    else
    {
      return sub_1CD6482A0(v4);
    }
  }
  return result;
}

unint64_t sub_1CD659BC0(llvm::IRPosition *a1)
{
  unsigned int v2 = sub_1CD647DEC(a1);
  if (v2 > 7 || ((1 << v2) & 0xA8) == 0) {
    return sub_1CD648A0C(a1);
  }
  unint64_t result = *(void *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)a1 & 3) == 0) {
    return *(void *)(result + 24);
  }
  return result;
}

void sub_1CD659C28(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "AAPrivatizablePtr");
}

void *sub_1CD659C4C()
{
  return &llvm::AAPrivatizablePtr::ID;
}

void sub_1CD659C58(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "AADereferenceable");
}

void *sub_1CD659C7C()
{
  return &llvm::AADereferenceable::ID;
}

BOOL sub_1CD659C88(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) != 0;
}

BOOL sub_1CD659C98(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a1 + 16)) {
    return *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a1 + 56);
  }
  return 0;
}

uint64_t sub_1CD659D0C(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 20);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a1 + 57);
  return 1;
}

uint64_t sub_1CD659D24(uint64_t a1)
{
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a1 + 56);
  return 0;
}

uint64_t sub_1CD659D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

uint64_t sub_1CD659E5C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2623348;
  sub_1CD40B1BC(*(void **)(a1 + 32));
  return a1;
}

void sub_1CD659EA4(uint64_t a1)
{
  *(void *)a1 = &unk_1F2623348;
  sub_1CD40B1BC(*(void **)(a1 + 32));

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CD659F10()
{
}

BOOL sub_1CD659F24(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) != 0;
}

BOOL sub_1CD659F34(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a1 + 8);
}

uint64_t sub_1CD659F44(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t sub_1CD659F54(uint64_t a1)
{
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
  return 0;
}

uint64_t sub_1CD659F64(uint64_t result, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 12);
  if (v2 >= a2) {
    unsigned int v2 = a2;
  }
  if (v2 <= *(_DWORD *)(result + 8)) {
    unsigned int v2 = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 12) = v2;
  return result;
}

uint32x2_t sub_1CD659F80(uint32x2_t *a1, unsigned int a2)
{
  uint32x2_t result = vmax_u32(a1[1], (uint32x2_t)vdup_n_s32(a2));
  a1[1] = result;
  return result;
}

uint32x2_t sub_1CD659F94(uint32x2_t *a1, unsigned int a2, unsigned int a3)
{
  uint32x2_t result = vmax_u32(a1[1], (uint32x2_t)__PAIR64__(a2, a3));
  a1[1] = result;
  return result;
}

uint32x2_t sub_1CD659FAC(uint32x2_t *a1, unsigned int a2, unsigned int a3)
{
  uint32x2_t result = vmin_u32(a1[1], (uint32x2_t)__PAIR64__(a2, a3));
  a1[1] = result;
  return result;
}

uint64_t sub_1CD659FCC(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 16);
  unsigned int v2 = *(void **)(result + 24);
  LODWORD(v3) = v1;
  if (v2 != (void *)(result + 32))
  {
    uint64_t v3 = *(unsigned int *)(result + 16);
    do
    {
      uint64_t v4 = v2[4];
      if (v3 < v4) {
        break;
      }
      uint64_t v5 = v2[5] + v4;
      if (v3 <= v5) {
        uint64_t v3 = v5;
      }
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          unsigned int v2 = v7;
        }
        while (!v8);
      }
      unsigned int v2 = v7;
    }
    while (v7 != (void *)(result + 32));
  }
  unsigned int v9 = *(_DWORD *)(result + 20);
  if (v9 <= v3) {
    unsigned int v9 = v3;
  }
  if (v1 <= v3) {
    unsigned int v1 = v3;
  }
  *(_DWORD *)(result + 16) = v1;
  *(_DWORD *)(result + 20) = v9;
  return result;
}

uint64_t sub_1CD65A058(uint64_t a1, void *a2, uint64_t a3)
{
  (*(void (**)(void *, void, void))(a2[1] + 72))(a2 + 1, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16));
  uint64_t v6 = a2[6];
  a2 += 6;
  (*(void (**)(void *, void, void))(v6 + 72))(a2, *(unsigned __int8 *)(a3 + 57), *(unsigned __int8 *)(a3 + 56));
  *(void *)a1 = &unk_1F2623348;
  uint64_t v7 = *(a2 - 4);
  *(void *)(a1 + 8) = &unk_1F2623388;
  *(void *)(a1 + 16) = v7;
  uint64_t result = sub_1CC8D26F8(a1 + 24, a2 - 3);
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 4);
  *(void *)(a1 + 48) = &unk_1F2620BB0;
  *(void *)(a1 + 64) = a2[2];
  return result;
}

uint64_t **sub_1CD65A160(uint64_t **a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    unsigned int v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    void v7[5] = 0;
    void *v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    long long v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      long long v11 = *v6;
    }
    sub_1CB8358B8(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t **sub_1CD65A22C(void **a1, void *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t result = (uint64_t **)sub_1CD65A2D0(a1, a2, &v13, &v12, a3);
  if (!*result)
  {
    uint64_t v7 = result;
    uint64_t v8 = operator new(0x30uLL);
    void v8[2] = *a4;
    uint64_t v9 = v13;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v9;
    void *v7 = (uint64_t *)v8;
    uint64_t v10 = (void *)**a1;
    if (v10)
    {
      *a1 = v10;
      long long v11 = *v7;
    }
    else
    {
      long long v11 = (uint64_t *)v8;
    }
    uint64_t result = (uint64_t **)sub_1CB8358B8(a1[1], v11);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return result;
}

void *sub_1CD65A2D0(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (uint64_t v6 = a2[4], v6 > a5))
  {
    uint64_t v7 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v9 = a2;
    }
    else
    {
      if (v7)
      {
        uint64_t v8 = (void *)*a2;
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        uint64_t v13 = a2;
        do
        {
          uint64_t v9 = (void *)v13[2];
          BOOL v14 = *v9 == (void)v13;
          uint64_t v13 = v9;
        }
        while (v14);
      }
      if (v9[4] >= a5)
      {
        unint64_t v15 = (void *)*v5;
        if (*v5)
        {
          do
          {
            while (1)
            {
              a4 = v15;
              uint64_t v16 = v15[4];
              if (v16 <= a5) {
                break;
              }
              unint64_t v15 = (void *)*a4;
              uint64_t v5 = a4;
              if (!*a4) {
                goto LABEL_36;
              }
            }
            if (v16 >= a5) {
              break;
            }
            uint64_t v5 = a4 + 1;
            unint64_t v15 = (void *)a4[1];
          }
          while (v15);
LABEL_28:
          *a3 = a4;
          return v5;
        }
        goto LABEL_44;
      }
    }
    if (v7)
    {
      *a3 = v9;
      return v9 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  else if (v6 < a5)
  {
    uint64_t v10 = a2[1];
    if (v10)
    {
      long long v11 = (void *)a2[1];
      do
      {
        a4 = v11;
        long long v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      long long v17 = a2;
      do
      {
        a4 = (void *)v17[2];
        BOOL v14 = *a4 == (void)v17;
        long long v17 = a4;
      }
      while (!v14);
    }
    if (a4 != v5 && a4[4] <= a5)
    {
      long long v18 = (void *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            a4 = v18;
            uint64_t v19 = v18[4];
            if (v19 <= a5) {
              break;
            }
            long long v18 = (void *)*a4;
            uint64_t v5 = a4;
            if (!*a4) {
              goto LABEL_36;
            }
          }
          if (v19 >= a5) {
            break;
          }
          uint64_t v5 = a4 + 1;
          long long v18 = (void *)a4[1];
        }
        while (v18);
        goto LABEL_28;
      }
LABEL_44:
      *a3 = v5;
      return v5;
    }
    if (v10)
    {
LABEL_36:
      *a3 = a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
  else
  {
    *a3 = a2;
    *a4 = a2;
  }
  return a4;
}

uint64_t sub_1CD65A454(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    if (a1 != a2) {
      sub_1CD65A578(a1 + 24, *(void **)(a2 + 24), (void *)(a2 + 32));
    }
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
  }
  else
  {
    *(void *)a1 = &unk_1F2623348;
    *(void *)(a1 + 8) = &unk_1F26233E8;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = &unk_1F2623388;
    *(void *)(a1 + 16) = v5;
    sub_1CC8D26F8(a1 + 24, (void *)(a2 + 24));
    *(void *)(a1 + 48) = &unk_1F26275E0;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(void *)(a1 + 48) = &unk_1F2620BB0;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_1CD65A578(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v8 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v8)
    {
      uint64_t v12 = sub_1CD4F3428((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v14 = a2;
        do
        {
          unint64_t v15 = v8;
          uint64_t v8 = v12;
          _DWORD v15[4] = v14[4];
          void v15[5] = v14[5];
          sub_1CD65A6D8((uint64_t **)a1, v15);
          if (v12) {
            uint64_t v12 = sub_1CD4F3428((uint64_t)v12);
          }
          uint64_t v16 = (void *)v14[1];
          if (v16)
          {
            do
            {
              a2 = v16;
              uint64_t v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              a2 = (void *)v14[2];
              BOOL v11 = *a2 == (void)v14;
              BOOL v14 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          BOOL v14 = a2;
        }
        while (a2 != a3);
      }
      sub_1CD40B1BC(v8);
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)v12[2];
        }
        while (v12);
        sub_1CD40B1BC(v13);
      }
    }
  }
  if (a2 != a3)
  {
    do
    {
      sub_1CD65A770((uint64_t **)a1, (_OWORD *)a2 + 2);
      uint64_t v9 = (void *)a2[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)a2[2];
          BOOL v11 = *v10 == (void)a2;
          a2 = v10;
        }
        while (!v11);
      }
      a2 = v10;
    }
    while (v10 != a3);
  }
}

uint64_t *sub_1CD65A6D8(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (a2[4] >= v4[4]) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = (uint64_t)v3;
  *uint64_t v5 = a2;
  uint64_t v6 = (uint64_t *)**a1;
  if (v6)
  {
    *a1 = v6;
    a2 = *v5;
  }
  uint64_t result = sub_1CB8358B8(a1[1], a2);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_1CD65A770(uint64_t **a1, _OWORD *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x30uLL);
  uint64_t v5 = v4;
  *((_OWORD *)v4 + 2) = *a2;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (v4[4] >= v7[4]) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  *uint64_t v4 = 0;
  v4[1] = 0;
  void v4[2] = (uint64_t)v6;
  *uint64_t v8 = v4;
  uint64_t v9 = (uint64_t *)**a1;
  if (v9)
  {
    *a1 = v9;
    uint64_t v5 = *v8;
  }
  uint64_t result = sub_1CB8358B8(a1[1], v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_1CD65A824(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1CD65A82C(uint64_t a1)
{
  return a1 + 32;
}

void sub_1CD65A834(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "AAAlign");
}

void *sub_1CD65A85C()
{
  return &llvm::AAAlign::ID;
}

BOOL sub_1CD65A868(uint64_t a1)
{
  return *(void *)(a1 + 16) != 1;
}

BOOL sub_1CD65A878(uint64_t a1)
{
  return *(void *)(a1 + 16) == *(void *)(a1 + 8);
}

uint64_t sub_1CD65A888(uint64_t a1)
{
  *(void *)(a1 + 8) = *(void *)(a1 + 16);
  return 1;
}

uint64_t sub_1CD65A898(uint64_t a1)
{
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  return 0;
}

uint64_t sub_1CD65A8A8(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2 >= a2) {
    unint64_t v2 = a2;
  }
  if (v2 <= *(void *)(result + 8)) {
    unint64_t v2 = *(void *)(result + 8);
  }
  *(void *)(result + 16) = v2;
  return result;
}

int8x16_t sub_1CD65A8C4(uint64_t a1, unint64_t a2)
{
  int8x16_t v2 = (int8x16_t)vdupq_n_s64(a2);
  int8x16_t result = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)(a1 + 8), (uint64x2_t)v2), *(int8x16_t *)(a1 + 8), v2);
  *(int8x16_t *)(a1 + 8) = result;
  return result;
}

int8x16_t sub_1CD65A8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3.i64[0] = a3;
  v3.i64[1] = a2;
  int8x16_t result = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)(a1 + 8), v3), *(int8x16_t *)(a1 + 8), (int8x16_t)v3);
  *(int8x16_t *)(a1 + 8) = result;
  return result;
}

int8x16_t sub_1CD65A8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3.i64[0] = a3;
  v3.i64[1] = a2;
  int8x16_t result = vbslq_s8((int8x16_t)vcgtq_u64(v3, *(uint64x2_t *)(a1 + 8)), *(int8x16_t *)(a1 + 8), (int8x16_t)v3);
  *(int8x16_t *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1CD65A914(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

void sub_1CD65AA38()
{
}

void sub_1CD65AA54(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "AAInstanceInfo");
}

void *sub_1CD65AA7C()
{
  return &llvm::AAInstanceInfo::ID;
}

uint64_t sub_1CD65AA88(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1CD65AA90(uint64_t a1)
{
  return a1 + 32;
}

void sub_1CD65AA98(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "AANoCapture");
}

void *sub_1CD65AAC4()
{
  return &llvm::AANoCapture::ID;
}

uint64_t sub_1CD65AAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(unsigned __int8 *)(sub_1CD6482F0((llvm::IRPosition *)(a1 + 16)) + 16) - 11 < 2) {
    return 1;
  }
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  unint64_t v7 = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0) {
    unint64_t v7 = *(void *)(v7 + 24);
  }
  (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 112))(a1, **(void **)v7, &v9);
  v8[0] = v9;
  v8[1] = v10;
  uint64_t v5 = llvm::IRAttributeManifest::manifestAttrs(a2, v4, (uint64_t)v8, 0);
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

BOOL sub_1CD65ABF0(uint64_t a1)
{
  return *(_WORD *)(a1 + 10) != 0;
}

BOOL sub_1CD65AC00(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a1 + 8);
}

uint64_t sub_1CD65AC14(uint64_t a1)
{
  *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 10);
  return 1;
}

uint64_t sub_1CD65AC24(uint64_t a1)
{
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 8);
  return 0;
}

uint64_t sub_1CD65AC34(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 10) = *(_WORD *)(result + 10) & a2 | *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_1CD65AC4C(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 10) |= a2;
  *(_WORD *)(result + 8) |= a2;
  return result;
}